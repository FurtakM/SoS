// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 630 0 0
// PrepareArabian ;
  12: CALL 1065 0 0
// PrepareAmerican ;
  16: CALL 4126 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9096 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: LD_INT 42000
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 182: LD_ADDR_EXP 20
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 190: LD_ADDR_EXP 18
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// attackWave := 1 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 9 , 10 ] [ Difficulty ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 6
 213: PUSH
 214: LD_INT 8
 216: PUSH
 217: LD_INT 9
 219: PUSH
 220: LD_INT 10
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: PUSH
 229: LD_OWVAR 67
 233: ARRAY
 234: ST_TO_ADDR
// vehCounter := 0 ;
 235: LD_ADDR_EXP 22
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// convoyCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimInDepot := false ;
 251: LD_ADDR_EXP 25
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimIsFree := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 16
 274: PUSH
 275: LD_INT 16
 277: PUSH
 278: LD_INT 15
 280: PUSH
 281: LD_INT 14
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: PUSH
 290: LD_OWVAR 67
 294: ARRAY
 295: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 296: LD_ADDR_EXP 13
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// allowCargoEvacuation := false ;
 304: LD_ADDR_EXP 7
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// americanStartRun := false ;
 312: LD_ADDR_EXP 14
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// end ; end_of_file
 320: LD_VAR 0 1
 324: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 325: LD_INT 0
 327: PPUSH
// uc_side := side ;
 328: LD_ADDR_OWVAR 20
 332: PUSH
 333: LD_VAR 0 1
 337: ST_TO_ADDR
// uc_nation := nation ;
 338: LD_ADDR_OWVAR 21
 342: PUSH
 343: LD_VAR 0 2
 347: ST_TO_ADDR
// vc_chassis := chassis ;
 348: LD_ADDR_OWVAR 37
 352: PUSH
 353: LD_VAR 0 3
 357: ST_TO_ADDR
// vc_engine := engine ;
 358: LD_ADDR_OWVAR 39
 362: PUSH
 363: LD_VAR 0 4
 367: ST_TO_ADDR
// vc_control := control ;
 368: LD_ADDR_OWVAR 38
 372: PUSH
 373: LD_VAR 0 5
 377: ST_TO_ADDR
// vc_weapon := weapon ;
 378: LD_ADDR_OWVAR 40
 382: PUSH
 383: LD_VAR 0 6
 387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 388: LD_ADDR_OWVAR 41
 392: PUSH
 393: LD_VAR 0 7
 397: ST_TO_ADDR
// result := CreateVehicle ;
 398: LD_ADDR_VAR 0 8
 402: PUSH
 403: CALL_OW 45
 407: ST_TO_ADDR
// end ;
 408: LD_VAR 0 8
 412: RET
// export function SayX ( units , ident ) ; var i ; begin
 413: LD_INT 0
 415: PPUSH
 416: PPUSH
// result := false ;
 417: LD_ADDR_VAR 0 3
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// if not units then
 425: LD_VAR 0 1
 429: NOT
 430: IFFALSE 434
// exit ;
 432: GO 488
// for i in units do
 434: LD_ADDR_VAR 0 4
 438: PUSH
 439: LD_VAR 0 1
 443: PUSH
 444: FOR_IN
 445: IFFALSE 486
// if IsOk ( i ) then
 447: LD_VAR 0 4
 451: PPUSH
 452: CALL_OW 302
 456: IFFALSE 484
// begin Say ( i , ident ) ;
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 2
 467: PPUSH
 468: CALL_OW 88
// result := i ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// break ;
 482: GO 486
// end ;
 484: GO 444
 486: POP
 487: POP
// end ;
 488: LD_VAR 0 3
 492: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 493: LD_INT 0
 495: PPUSH
 496: PPUSH
// InitUc ;
 497: CALL_OW 18
// InitHc ;
 501: CALL_OW 19
// uc_side := 0 ;
 505: LD_ADDR_OWVAR 20
 509: PUSH
 510: LD_INT 0
 512: ST_TO_ADDR
// uc_nation := 0 ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_INT 0
 520: ST_TO_ADDR
// for i = 1 to amount do
 521: LD_ADDR_VAR 0 4
 525: PUSH
 526: DOUBLE
 527: LD_INT 1
 529: DEC
 530: ST_TO_ADDR
 531: LD_VAR 0 2
 535: PUSH
 536: FOR_TO
 537: IFFALSE 619
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 539: LD_ADDR_OWVAR 29
 543: PUSH
 544: LD_INT 9
 546: PPUSH
 547: LD_INT 12
 549: PPUSH
 550: CALL_OW 12
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 570: LD_ADDR_OWVAR 35
 574: PUSH
 575: LD_INT 1
 577: NEG
 578: PPUSH
 579: LD_INT 1
 581: PPUSH
 582: CALL_OW 12
 586: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 587: LD_INT 0
 589: PPUSH
 590: LD_INT 12
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 49
// end ;
 617: GO 536
 619: POP
 620: POP
// InitHc ;
 621: CALL_OW 19
// end ;
 625: LD_VAR 0 3
 629: RET
// export function CreateNature ; var i ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 634: LD_INT 2
 636: PPUSH
 637: LD_INT 5
 639: PUSH
 640: LD_INT 4
 642: PUSH
 643: LD_INT 4
 645: PUSH
 646: LD_INT 3
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: PUSH
 655: LD_OWVAR 67
 659: ARRAY
 660: PPUSH
 661: CALL 493 0 2
// for i := 1 to 2 do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_INT 2
 677: PUSH
 678: FOR_TO
 679: IFFALSE 714
// begin hc_class := 21 ;
 681: LD_ADDR_OWVAR 28
 685: PUSH
 686: LD_INT 21
 688: ST_TO_ADDR
// hc_gallery :=  ;
 689: LD_ADDR_OWVAR 33
 693: PUSH
 694: LD_STRING 
 696: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 697: CALL_OW 44
 701: PPUSH
 702: LD_INT 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// end ;
 712: GO 678
 714: POP
 715: POP
// for i := 1 to 2 do
 716: LD_ADDR_VAR 0 2
 720: PUSH
 721: DOUBLE
 722: LD_INT 1
 724: DEC
 725: ST_TO_ADDR
 726: LD_INT 2
 728: PUSH
 729: FOR_TO
 730: IFFALSE 765
// begin hc_class := 18 ;
 732: LD_ADDR_OWVAR 28
 736: PUSH
 737: LD_INT 18
 739: ST_TO_ADDR
// hc_gallery :=  ;
 740: LD_ADDR_OWVAR 33
 744: PUSH
 745: LD_STRING 
 747: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 748: CALL_OW 44
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 49
// end ;
 763: GO 729
 765: POP
 766: POP
// for i := 1 to 2 do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_INT 2
 779: PUSH
 780: FOR_TO
 781: IFFALSE 816
// begin hc_class := 13 ;
 783: LD_ADDR_OWVAR 28
 787: PUSH
 788: LD_INT 13
 790: ST_TO_ADDR
// hc_gallery :=  ;
 791: LD_ADDR_OWVAR 33
 795: PUSH
 796: LD_STRING 
 798: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 799: CALL_OW 44
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end ;
 814: GO 780
 816: POP
 817: POP
// end ;
 818: LD_VAR 0 1
 822: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 823: LD_INT 0
 825: PPUSH
 826: PPUSH
 827: PPUSH
// if not observer or not unit then
 828: LD_VAR 0 1
 832: NOT
 833: PUSH
 834: LD_VAR 0 2
 838: NOT
 839: OR
 840: IFFALSE 844
// exit ;
 842: GO 892
// if not See ( GetSide ( observer ) , unit ) then
 844: LD_VAR 0 1
 848: PPUSH
 849: CALL_OW 255
 853: PPUSH
 854: LD_VAR 0 2
 858: PPUSH
 859: CALL_OW 292
 863: NOT
 864: IFFALSE 868
// exit ;
 866: GO 892
// result := GetDistUnits ( observer , unit ) < 12 ;
 868: LD_ADDR_VAR 0 3
 872: PUSH
 873: LD_VAR 0 1
 877: PPUSH
 878: LD_VAR 0 2
 882: PPUSH
 883: CALL_OW 296
 887: PUSH
 888: LD_INT 12
 890: LESS
 891: ST_TO_ADDR
// end ;
 892: LD_VAR 0 3
 896: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 897: LD_INT 0
 899: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 900: LD_VAR 0 2
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: PPUSH
 909: LD_VAR 0 2
 913: PUSH
 914: LD_INT 2
 916: ARRAY
 917: PPUSH
 918: CALL_OW 488
 922: PUSH
 923: LD_VAR 0 2
 927: PUSH
 928: LD_INT 1
 930: ARRAY
 931: PPUSH
 932: LD_VAR 0 2
 936: PUSH
 937: LD_INT 2
 939: ARRAY
 940: PPUSH
 941: CALL_OW 428
 945: PUSH
 946: LD_INT 0
 948: EQUAL
 949: AND
 950: IFFALSE 984
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 952: LD_VAR 0 1
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: LD_VAR 0 2
 970: PUSH
 971: LD_INT 2
 973: ARRAY
 974: PPUSH
 975: LD_VAR 0 3
 979: PPUSH
 980: CALL_OW 48
// end ;
 984: LD_VAR 0 4
 988: RET
// export function ReverseArray ( array ) ; var i ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
// if not array then
 993: LD_VAR 0 1
 997: NOT
 998: IFFALSE 1002
// exit ;
1000: GO 1060
// result := [ ] ;
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: EMPTY
1008: ST_TO_ADDR
// for i := 1 to array do
1009: LD_ADDR_VAR 0 3
1013: PUSH
1014: DOUBLE
1015: LD_INT 1
1017: DEC
1018: ST_TO_ADDR
1019: LD_VAR 0 1
1023: PUSH
1024: FOR_TO
1025: IFFALSE 1058
// result := Insert ( result , 1 , array [ i ] ) ;
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_VAR 0 2
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_VAR 0 1
1044: PUSH
1045: LD_VAR 0 3
1049: ARRAY
1050: PPUSH
1051: CALL_OW 2
1055: ST_TO_ADDR
1056: GO 1024
1058: POP
1059: POP
// end ; end_of_file
1060: LD_VAR 0 2
1064: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
1069: PPUSH
1070: PPUSH
// uc_side := 5 ;
1071: LD_ADDR_OWVAR 20
1075: PUSH
1076: LD_INT 5
1078: ST_TO_ADDR
// uc_nation := 2 ;
1079: LD_ADDR_OWVAR 21
1083: PUSH
1084: LD_INT 2
1086: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1087: LD_INT 5
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 1
1097: PPUSH
1098: LD_INT 65
1100: PPUSH
1101: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1105: LD_ADDR_EXP 36
1109: PUSH
1110: LD_STRING Farmer
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 37380 0 3
1123: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1124: LD_ADDR_EXP 37
1128: PUSH
1129: LD_STRING Omar
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: LD_STRING 
1137: PPUSH
1138: CALL 37380 0 3
1142: ST_TO_ADDR
// omarSquad := [ ] ;
1143: LD_ADDR_EXP 40
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// heikeSquad := [ ] ;
1150: LD_ADDR_EXP 41
1154: PUSH
1155: EMPTY
1156: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1157: LD_ADDR_EXP 42
1161: PUSH
1162: EMPTY
1163: ST_TO_ADDR
// omarCargo := [ ] ;
1164: LD_ADDR_EXP 43
1168: PUSH
1169: EMPTY
1170: ST_TO_ADDR
// for i := 1 to 5 do
1171: LD_ADDR_VAR 0 2
1175: PUSH
1176: DOUBLE
1177: LD_INT 1
1179: DEC
1180: ST_TO_ADDR
1181: LD_INT 5
1183: PUSH
1184: FOR_TO
1185: IFFALSE 1343
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1187: LD_INT 0
1189: PPUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_VAR 0 2
1216: ARRAY
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 380
// un := CreateHuman ;
1225: LD_ADDR_VAR 0 3
1229: PUSH
1230: CALL_OW 44
1234: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1235: LD_ADDR_EXP 40
1239: PUSH
1240: LD_EXP 40
1244: PUSH
1245: LD_VAR 0 3
1249: UNION
1250: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1251: LD_VAR 0 3
1255: PPUSH
1256: LD_INT 87
1258: PUSH
1259: LD_INT 30
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 91
1268: PUSH
1269: LD_INT 32
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 82
1278: PUSH
1279: LD_INT 15
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 79
1288: PUSH
1289: LD_INT 14
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: PUSH
1296: LD_INT 82
1298: PUSH
1299: LD_INT 13
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: PPUSH
1319: LD_INT 0
1321: PPUSH
1322: CALL 897 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1326: LD_VAR 0 3
1330: PPUSH
1331: LD_INT 93
1333: PPUSH
1334: LD_INT 21
1336: PPUSH
1337: CALL_OW 118
// end ;
1341: GO 1184
1343: POP
1344: POP
// uc_side := 2 ;
1345: LD_ADDR_OWVAR 20
1349: PUSH
1350: LD_INT 2
1352: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1353: LD_ADDR_EXP 28
1357: PUSH
1358: LD_STRING Heike
1360: PPUSH
1361: LD_EXP 1
1365: NOT
1366: PPUSH
1367: LD_EXP 2
1371: PPUSH
1372: CALL 37380 0 3
1376: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1377: LD_ADDR_EXP 32
1381: PUSH
1382: LD_STRING Aviradze
1384: PPUSH
1385: LD_EXP 1
1389: NOT
1390: PPUSH
1391: LD_EXP 2
1395: PPUSH
1396: CALL 37380 0 3
1400: ST_TO_ADDR
// tmp := [ ] ;
1401: LD_ADDR_VAR 0 4
1405: PUSH
1406: EMPTY
1407: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1408: LD_ADDR_EXP 29
1412: PUSH
1413: LD_STRING Givi
1415: PPUSH
1416: LD_EXP 1
1420: NOT
1421: PPUSH
1422: LD_EXP 2
1426: PPUSH
1427: CALL 37380 0 3
1431: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1432: LD_ADDR_EXP 30
1436: PUSH
1437: LD_STRING Mike
1439: PPUSH
1440: LD_EXP 1
1444: NOT
1445: PPUSH
1446: LD_EXP 2
1450: PPUSH
1451: CALL 37380 0 3
1455: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1456: LD_ADDR_EXP 31
1460: PUSH
1461: LD_STRING Kamil
1463: PPUSH
1464: LD_EXP 1
1468: NOT
1469: PPUSH
1470: LD_EXP 2
1474: PPUSH
1475: CALL 37380 0 3
1479: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1480: LD_ADDR_EXP 33
1484: PUSH
1485: LD_STRING Kaia
1487: PPUSH
1488: LD_EXP 1
1492: NOT
1493: PPUSH
1494: LD_EXP 2
1498: PPUSH
1499: CALL 37380 0 3
1503: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1504: LD_ADDR_EXP 34
1508: PUSH
1509: LD_STRING Sophia
1511: PPUSH
1512: LD_EXP 1
1516: NOT
1517: PPUSH
1518: LD_EXP 2
1522: PPUSH
1523: CALL 37380 0 3
1527: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1528: LD_ADDR_EXP 35
1532: PUSH
1533: LD_STRING Markov
1535: PPUSH
1536: LD_EXP 1
1540: NOT
1541: PPUSH
1542: LD_EXP 2
1546: PPUSH
1547: CALL 37380 0 3
1551: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1552: LD_ADDR_EXP 42
1556: PUSH
1557: LD_STRING 02_others
1559: PPUSH
1560: CALL_OW 31
1564: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_EXP 30
1574: PUSH
1575: LD_EXP 31
1579: PUSH
1580: LD_EXP 33
1584: PUSH
1585: LD_EXP 34
1589: PUSH
1590: LD_EXP 35
1594: PUSH
1595: LD_EXP 29
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: LD_EXP 42
1612: ADD
1613: PUSH
1614: LD_INT 0
1616: DIFF
1617: ST_TO_ADDR
// heikeSquad := tmp ;
1618: LD_ADDR_EXP 41
1622: PUSH
1623: LD_VAR 0 4
1627: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1628: LD_EXP 41
1632: PPUSH
1633: LD_INT 25
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 72
1647: PUSH
1648: LD_INT 3
1650: LESS
1651: IFFALSE 1701
// begin SetClass ( Kaia , 1 ) ;
1653: LD_EXP 33
1657: PPUSH
1658: LD_INT 1
1660: PPUSH
1661: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1665: LD_EXP 30
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1677: LD_EXP 29
1681: PPUSH
1682: LD_INT 1
1684: PPUSH
1685: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1689: LD_EXP 28
1693: PPUSH
1694: LD_INT 1
1696: PPUSH
1697: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1701: LD_ADDR_VAR 0 4
1705: PUSH
1706: LD_VAR 0 4
1710: PUSH
1711: LD_STRING 02_ape
1713: PPUSH
1714: CALL_OW 31
1718: UNION
1719: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1720: LD_EXP 28
1724: PPUSH
1725: LD_INT 92
1727: PPUSH
1728: LD_INT 17
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1738: LD_EXP 36
1742: PPUSH
1743: LD_INT 95
1745: PPUSH
1746: LD_INT 19
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1756: LD_EXP 37
1760: PPUSH
1761: LD_INT 89
1763: PPUSH
1764: LD_INT 25
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1774: LD_EXP 32
1778: PPUSH
1779: LD_INT 92
1781: PPUSH
1782: LD_INT 27
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1792: LD_EXP 37
1796: PPUSH
1797: LD_EXP 32
1801: PPUSH
1802: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1806: LD_EXP 32
1810: PPUSH
1811: LD_EXP 37
1815: PPUSH
1816: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1820: LD_EXP 28
1824: PUSH
1825: LD_EXP 36
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PPUSH
1834: LD_EXP 37
1838: PPUSH
1839: CALL_OW 119
// if tmp then
1843: LD_VAR 0 4
1847: IFFALSE 1901
// for i in tmp do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: LD_VAR 0 4
1858: PUSH
1859: FOR_IN
1860: IFFALSE 1899
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1862: LD_VAR 0 2
1866: PPUSH
1867: LD_INT 94
1869: PPUSH
1870: LD_INT 14
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_EXP 28
1892: PPUSH
1893: CALL_OW 119
// end ;
1897: GO 1859
1899: POP
1900: POP
// farmerSquad := [ ] ;
1901: LD_ADDR_EXP 39
1905: PUSH
1906: EMPTY
1907: ST_TO_ADDR
// uc_side := 5 ;
1908: LD_ADDR_OWVAR 20
1912: PUSH
1913: LD_INT 5
1915: ST_TO_ADDR
// uc_nation := 2 ;
1916: LD_ADDR_OWVAR 21
1920: PUSH
1921: LD_INT 2
1923: ST_TO_ADDR
// for i := 1 to 4 do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_INT 4
1936: PUSH
1937: FOR_TO
1938: IFFALSE 2016
// begin PrepareHuman ( false , 1 , 2 ) ;
1940: LD_INT 0
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_INT 2
1948: PPUSH
1949: CALL_OW 380
// un := CreateHuman ;
1953: LD_ADDR_VAR 0 3
1957: PUSH
1958: CALL_OW 44
1962: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1963: LD_VAR 0 3
1967: PPUSH
1968: LD_INT 102
1970: PPUSH
1971: LD_INT 27
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: LD_INT 0
1979: PPUSH
1980: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1984: LD_ADDR_EXP 39
1988: PUSH
1989: LD_EXP 39
1993: PUSH
1994: LD_VAR 0 3
1998: UNION
1999: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2000: LD_VAR 0 3
2004: PPUSH
2005: LD_EXP 37
2009: PPUSH
2010: CALL_OW 119
// end ;
2014: GO 1937
2016: POP
2017: POP
// for i := 1 to 2 do
2018: LD_ADDR_VAR 0 2
2022: PUSH
2023: DOUBLE
2024: LD_INT 1
2026: DEC
2027: ST_TO_ADDR
2028: LD_INT 2
2030: PUSH
2031: FOR_TO
2032: IFFALSE 2110
// begin PrepareHuman ( false , 2 , 2 ) ;
2034: LD_INT 0
2036: PPUSH
2037: LD_INT 2
2039: PPUSH
2040: LD_INT 2
2042: PPUSH
2043: CALL_OW 380
// un := CreateHuman ;
2047: LD_ADDR_VAR 0 3
2051: PUSH
2052: CALL_OW 44
2056: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2057: LD_VAR 0 3
2061: PPUSH
2062: LD_INT 108
2064: PPUSH
2065: LD_INT 62
2067: PPUSH
2068: LD_INT 2
2070: PPUSH
2071: LD_INT 0
2073: PPUSH
2074: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2078: LD_ADDR_EXP 39
2082: PUSH
2083: LD_EXP 39
2087: PUSH
2088: LD_VAR 0 3
2092: UNION
2093: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2094: LD_VAR 0 3
2098: PPUSH
2099: LD_EXP 37
2103: PPUSH
2104: CALL_OW 119
// end ;
2108: GO 2031
2110: POP
2111: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2112: LD_INT 109
2114: PPUSH
2115: LD_INT 63
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: LD_INT 15
2123: NEG
2124: PPUSH
2125: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2129: LD_INT 109
2131: PPUSH
2132: LD_INT 63
2134: PPUSH
2135: LD_INT 2
2137: PPUSH
2138: CALL_OW 331
// end ;
2142: LD_VAR 0 1
2146: RET
// export function PrepareIbrahim ( x , y ) ; begin
2147: LD_INT 0
2149: PPUSH
// uc_side := 6 ;
2150: LD_ADDR_OWVAR 20
2154: PUSH
2155: LD_INT 6
2157: ST_TO_ADDR
// uc_nation := 3 ;
2158: LD_ADDR_OWVAR 21
2162: PUSH
2163: LD_INT 3
2165: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2166: LD_ADDR_EXP 38
2170: PUSH
2171: LD_STRING IbrahimRu
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: LD_STRING 
2179: PPUSH
2180: CALL 37380 0 3
2184: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2185: LD_EXP 38
2189: PPUSH
2190: LD_VAR 0 1
2194: PPUSH
2195: LD_VAR 0 2
2199: PPUSH
2200: LD_INT 8
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL_OW 50
// end ;
2210: LD_VAR 0 3
2214: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2215: LD_EXP 37
2219: PUSH
2220: LD_EXP 40
2224: ADD
2225: PPUSH
2226: LD_INT 95
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PPUSH
2236: CALL_OW 72
2240: IFFALSE 2296
2242: GO 2244
2244: DISABLE
2245: LD_INT 0
2247: PPUSH
// begin enable ;
2248: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2249: LD_ADDR_VAR 0 1
2253: PUSH
2254: LD_EXP 37
2258: PUSH
2259: LD_EXP 40
2263: ADD
2264: PPUSH
2265: LD_INT 95
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 72
2279: PUSH
2280: FOR_IN
2281: IFFALSE 2294
// RemoveUnit ( i ) ;
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 64
2292: GO 2280
2294: POP
2295: POP
// end ;
2296: PPOPN 1
2298: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2299: LD_EXP 3
2303: PUSH
2304: LD_EXP 36
2308: PPUSH
2309: LD_INT 4
2311: PPUSH
2312: CALL_OW 308
2316: AND
2317: IFFALSE 3121
2319: GO 2321
2321: DISABLE
2322: LD_INT 0
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2328: LD_EXP 36
2332: PPUSH
2333: LD_INT 110
2335: PPUSH
2336: LD_INT 60
2338: PPUSH
2339: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2343: LD_EXP 36
2347: PPUSH
2348: LD_INT 110
2350: PPUSH
2351: LD_INT 61
2353: PPUSH
2354: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2358: LD_ADDR_VAR 0 2
2362: PUSH
2363: LD_EXP 39
2367: PPUSH
2368: LD_INT 25
2370: PUSH
2371: LD_INT 1
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PPUSH
2378: CALL_OW 72
2382: ST_TO_ADDR
// if tmp then
2383: LD_VAR 0 2
2387: IFFALSE 2481
// begin for i := 1 to 2 do
2389: LD_ADDR_VAR 0 1
2393: PUSH
2394: DOUBLE
2395: LD_INT 1
2397: DEC
2398: ST_TO_ADDR
2399: LD_INT 2
2401: PUSH
2402: FOR_TO
2403: IFFALSE 2479
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2405: LD_VAR 0 2
2409: PUSH
2410: LD_VAR 0 1
2414: ARRAY
2415: PPUSH
2416: LD_INT 5
2418: PPUSH
2419: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 1
2432: ARRAY
2433: PPUSH
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2441: LD_VAR 0 2
2445: PUSH
2446: LD_VAR 0 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2456: LD_VAR 0 2
2460: PUSH
2461: LD_VAR 0 1
2465: ARRAY
2466: PPUSH
2467: LD_INT 107
2469: PPUSH
2470: LD_INT 66
2472: PPUSH
2473: CALL_OW 171
// end ;
2477: GO 2402
2479: POP
2480: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_EXP 39
2490: PPUSH
2491: LD_INT 25
2493: PUSH
2494: LD_INT 2
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 72
2505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2506: LD_INT 35
2508: PPUSH
2509: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: LD_EXP 39
2522: PPUSH
2523: LD_INT 25
2525: PUSH
2526: LD_INT 2
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: ST_TO_ADDR
// until tmp ;
2538: LD_VAR 0 2
2542: IFFALSE 2506
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2544: LD_VAR 0 2
2548: PPUSH
2549: LD_INT 31
2551: PPUSH
2552: LD_INT 102
2554: PPUSH
2555: LD_INT 69
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2565: LD_INT 35
2567: PPUSH
2568: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2572: LD_EXP 39
2576: PPUSH
2577: LD_INT 3
2579: PUSH
2580: LD_INT 60
2582: PUSH
2583: EMPTY
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 25
2592: PUSH
2593: LD_INT 2
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 72
2608: IFFALSE 2565
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2610: LD_ADDR_VAR 0 2
2614: PUSH
2615: LD_EXP 39
2619: PPUSH
2620: LD_INT 25
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PPUSH
2630: CALL_OW 72
2634: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2635: LD_VAR 0 2
2639: PPUSH
2640: LD_INT 6
2642: PPUSH
2643: LD_INT 116
2645: PPUSH
2646: LD_INT 55
2648: PPUSH
2649: LD_INT 4
2651: PPUSH
2652: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2656: LD_VAR 0 2
2660: PPUSH
2661: LD_INT 4
2663: PPUSH
2664: LD_INT 116
2666: PPUSH
2667: LD_INT 70
2669: PPUSH
2670: LD_INT 5
2672: PPUSH
2673: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2677: LD_VAR 0 2
2681: PPUSH
2682: LD_INT 31
2684: PPUSH
2685: LD_INT 109
2687: PPUSH
2688: LD_INT 50
2690: PPUSH
2691: LD_INT 2
2693: PPUSH
2694: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2698: LD_INT 35
2700: PPUSH
2701: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2705: LD_INT 22
2707: PUSH
2708: LD_INT 5
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 30
2717: PUSH
2718: LD_INT 4
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 3
2727: PUSH
2728: LD_INT 57
2730: PUSH
2731: EMPTY
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: PPUSH
2743: CALL_OW 69
2747: IFFALSE 2698
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: LD_INT 22
2756: PUSH
2757: LD_INT 5
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 30
2766: PUSH
2767: LD_INT 4
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 3
2776: PUSH
2777: LD_INT 57
2779: PUSH
2780: EMPTY
2781: LIST
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: PUSH
2797: LD_INT 1
2799: ARRAY
2800: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2801: LD_ADDR_VAR 0 2
2805: PUSH
2806: LD_EXP 39
2810: PPUSH
2811: LD_INT 25
2813: PUSH
2814: LD_INT 1
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PPUSH
2821: CALL_OW 72
2825: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2826: LD_VAR 0 2
2830: PPUSH
2831: LD_VAR 0 3
2835: PPUSH
2836: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2840: LD_INT 35
2842: PPUSH
2843: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2847: LD_INT 22
2849: PUSH
2850: LD_INT 5
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 30
2859: PUSH
2860: LD_INT 31
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: LD_INT 57
2872: PUSH
2873: EMPTY
2874: LIST
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 69
2889: PUSH
2890: LD_INT 2
2892: GREATEREQUAL
2893: IFFALSE 2840
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: LD_EXP 39
2904: PPUSH
2905: LD_INT 25
2907: PUSH
2908: LD_INT 2
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PPUSH
2915: CALL_OW 72
2919: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 1
2927: ARRAY
2928: PPUSH
2929: LD_INT 5
2931: PPUSH
2932: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 2
2943: ARRAY
2944: PUSH
2945: LD_VAR 0 2
2949: PUSH
2950: LD_INT 3
2952: ARRAY
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: PPUSH
2958: LD_VAR 0 3
2962: PPUSH
2963: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_INT 3
2983: ARRAY
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PPUSH
2989: LD_INT 1
2991: PPUSH
2992: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 2
3003: ARRAY
3004: PUSH
3005: LD_VAR 0 2
3009: PUSH
3010: LD_INT 3
3012: ARRAY
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3022: LD_ADDR_VAR 0 4
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_INT 5
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 30
3039: PUSH
3040: LD_INT 31
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// for i := 1 to 2 do
3056: LD_ADDR_VAR 0 1
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_INT 2
3068: PUSH
3069: FOR_TO
3070: IFFALSE 3104
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3072: LD_VAR 0 2
3076: PUSH
3077: LD_VAR 0 1
3081: PUSH
3082: LD_INT 1
3084: PLUS
3085: ARRAY
3086: PPUSH
3087: LD_VAR 0 4
3091: PUSH
3092: LD_VAR 0 1
3096: ARRAY
3097: PPUSH
3098: CALL_OW 180
3102: GO 3069
3104: POP
3105: POP
// wait ( 1 1$00 ) ;
3106: LD_INT 2100
3108: PPUSH
3109: CALL_OW 67
// farmerBaseReady := true ;
3113: LD_ADDR_EXP 4
3117: PUSH
3118: LD_INT 1
3120: ST_TO_ADDR
// end ;
3121: PPOPN 4
3123: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3124: LD_EXP 4
3128: PUSH
3129: LD_EXP 11
3133: NOT
3134: AND
3135: IFFALSE 3657
3137: GO 3139
3139: DISABLE
3140: LD_INT 0
3142: PPUSH
3143: PPUSH
3144: PPUSH
3145: PPUSH
3146: PPUSH
// begin enable ;
3147: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3148: LD_ADDR_VAR 0 3
3152: PUSH
3153: LD_EXP 39
3157: PPUSH
3158: LD_INT 25
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 72
3172: PUSH
3173: LD_EXP 36
3177: ADD
3178: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_EXP 39
3188: PPUSH
3189: LD_INT 25
3191: PUSH
3192: LD_INT 2
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 72
3203: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3204: LD_ADDR_VAR 0 5
3208: PUSH
3209: LD_INT 22
3211: PUSH
3212: LD_INT 5
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 21
3221: PUSH
3222: LD_INT 3
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 3
3231: PUSH
3232: LD_INT 24
3234: PUSH
3235: LD_INT 1000
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PPUSH
3251: CALL_OW 69
3255: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3256: LD_ADDR_VAR 0 4
3260: PUSH
3261: LD_INT 22
3263: PUSH
3264: LD_INT 5
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 30
3273: PUSH
3274: LD_INT 4
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PPUSH
3285: CALL_OW 69
3289: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3290: LD_VAR 0 4
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: CALL_OW 302
3303: IFFALSE 3367
// for i in sol do
3305: LD_ADDR_VAR 0 1
3309: PUSH
3310: LD_VAR 0 3
3314: PUSH
3315: FOR_IN
3316: IFFALSE 3365
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3318: LD_VAR 0 1
3322: PPUSH
3323: CALL_OW 256
3327: PUSH
3328: LD_INT 999
3330: LESS
3331: PUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL_OW 310
3341: NOT
3342: AND
3343: IFFALSE 3363
// ComEnterUnit ( i , arm [ 1 ] ) ;
3345: LD_VAR 0 1
3349: PPUSH
3350: LD_VAR 0 4
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PPUSH
3359: CALL_OW 120
3363: GO 3315
3365: POP
3366: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3367: LD_VAR 0 2
3371: NOT
3372: PUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 1
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: LD_INT 21
3385: PUSH
3386: LD_INT 1
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PPUSH
3397: CALL_OW 69
3401: NOT
3402: AND
3403: IFFALSE 3495
// begin uc_side := 5 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 5
3412: ST_TO_ADDR
// uc_nation := 2 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 2
3420: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3421: LD_INT 0
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 2
3429: PPUSH
3430: CALL_OW 380
// eng := CreateHuman ;
3434: LD_ADDR_VAR 0 2
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3444: LD_VAR 0 2
3448: PPUSH
3449: LD_INT 102
3451: PPUSH
3452: LD_INT 8
3454: PPUSH
3455: LD_INT 0
3457: PPUSH
3458: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3462: LD_VAR 0 2
3466: PPUSH
3467: LD_INT 110
3469: PPUSH
3470: LD_INT 60
3472: PPUSH
3473: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3477: LD_ADDR_EXP 39
3481: PUSH
3482: LD_EXP 39
3486: PUSH
3487: LD_VAR 0 2
3491: UNION
3492: ST_TO_ADDR
// end else
3493: GO 3657
// begin for i in eng do
3495: LD_ADDR_VAR 0 1
3499: PUSH
3500: LD_VAR 0 2
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3655
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3508: LD_INT 10
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: CALL_OW 287
3518: IFFALSE 3569
// begin if IsInUnit ( i ) then
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL_OW 310
3529: IFFALSE 3540
// ComExitBuilding ( i ) ;
3531: LD_VAR 0 1
3535: PPUSH
3536: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 10
3547: PPUSH
3548: CALL_OW 308
3552: NOT
3553: IFFALSE 3567
// AddComMoveToArea ( i , collectFarmerArea ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 10
3562: PPUSH
3563: CALL_OW 173
// end else
3567: GO 3653
// begin if damagedBuilding then
3569: LD_VAR 0 5
3573: IFFALSE 3617
// begin if IsInUnit ( i ) then
3575: LD_VAR 0 1
3579: PPUSH
3580: CALL_OW 310
3584: IFFALSE 3597
// ComExitBuilding ( i ) else
3586: LD_VAR 0 1
3590: PPUSH
3591: CALL_OW 122
3595: GO 3615
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3597: LD_VAR 0 1
3601: PPUSH
3602: LD_VAR 0 5
3606: PUSH
3607: LD_INT 1
3609: ARRAY
3610: PPUSH
3611: CALL_OW 130
// end else
3615: GO 3653
// if not IsInUnit ( i ) and not HasTask ( i ) then
3617: LD_VAR 0 1
3621: PPUSH
3622: CALL_OW 310
3626: NOT
3627: PUSH
3628: LD_VAR 0 1
3632: PPUSH
3633: CALL_OW 314
3637: NOT
3638: AND
3639: IFFALSE 3653
// ComEnterUnit ( i , arDepot ) ;
3641: LD_VAR 0 1
3645: PPUSH
3646: LD_INT 5
3648: PPUSH
3649: CALL_OW 120
// end ; end ;
3653: GO 3505
3655: POP
3656: POP
// end ; end ;
3657: PPOPN 5
3659: END
// export function CargoEvacuation ; begin
3660: LD_INT 0
3662: PPUSH
// wait ( 0 0$20 ) ;
3663: LD_INT 700
3665: PPUSH
3666: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3670: LD_ADDR_EXP 21
3674: PUSH
3675: LD_EXP 21
3679: PUSH
3680: LD_INT 1
3682: MINUS
3683: ST_TO_ADDR
// if omarCargoCounter = 0 then
3684: LD_EXP 21
3688: PUSH
3689: LD_INT 0
3691: EQUAL
3692: IFFALSE 3696
// exit ;
3694: GO 4003
// if omarCargo then
3696: LD_EXP 43
3700: IFFALSE 3711
// RemoveUnit ( omarCargo ) ;
3702: LD_EXP 43
3706: PPUSH
3707: CALL_OW 64
// omarCargo := PrepareCargo ;
3711: LD_ADDR_EXP 43
3715: PUSH
3716: CALL 4008 0 0
3720: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3721: LD_EXP 43
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3733: LD_EXP 43
3737: PPUSH
3738: LD_INT 107
3740: PPUSH
3741: LD_INT 59
3743: PPUSH
3744: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3748: LD_INT 35
3750: PPUSH
3751: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3755: LD_EXP 43
3759: PPUSH
3760: LD_INT 107
3762: PPUSH
3763: LD_INT 59
3765: PPUSH
3766: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3770: LD_EXP 43
3774: PPUSH
3775: CALL_OW 302
3779: NOT
3780: PUSH
3781: LD_EXP 43
3785: PPUSH
3786: CALL_OW 301
3790: OR
3791: IFFALSE 3795
// exit ;
3793: GO 4003
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3795: LD_EXP 43
3799: PPUSH
3800: LD_INT 107
3802: PPUSH
3803: LD_INT 59
3805: PPUSH
3806: CALL_OW 307
3810: PUSH
3811: LD_EXP 43
3815: PPUSH
3816: LD_INT 5
3818: PPUSH
3819: CALL_OW 296
3823: PUSH
3824: LD_INT 6
3826: LESS
3827: OR
3828: IFFALSE 3748
// SetTag ( omarCargo , 1 ) ;
3830: LD_EXP 43
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 109
// wait ( 0 0$05 ) ;
3842: LD_INT 175
3844: PPUSH
3845: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3849: LD_EXP 43
3853: PPUSH
3854: LD_INT 5
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3864: LD_EXP 43
3868: PPUSH
3869: LD_INT 103
3871: PPUSH
3872: LD_INT 9
3874: PPUSH
3875: CALL_OW 171
// wait ( 0 0$1 ) ;
3879: LD_INT 35
3881: PPUSH
3882: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3886: LD_EXP 43
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 100
3896: PPUSH
3897: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3901: LD_INT 35
3903: PPUSH
3904: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3908: LD_EXP 43
3912: PPUSH
3913: LD_INT 103
3915: PPUSH
3916: LD_INT 9
3918: PPUSH
3919: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3923: LD_EXP 43
3927: PPUSH
3928: CALL_OW 302
3932: NOT
3933: PUSH
3934: LD_EXP 43
3938: PPUSH
3939: CALL_OW 301
3943: OR
3944: IFFALSE 3948
// exit ;
3946: GO 4003
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3948: LD_EXP 43
3952: PPUSH
3953: LD_INT 103
3955: PPUSH
3956: LD_INT 9
3958: PPUSH
3959: CALL_OW 307
3963: PUSH
3964: LD_EXP 43
3968: PPUSH
3969: LD_INT 3
3971: PPUSH
3972: CALL_OW 308
3976: OR
3977: PUSH
3978: LD_EXP 43
3982: PPUSH
3983: CALL_OW 110
3987: PUSH
3988: LD_INT 0
3990: GREATER
3991: AND
3992: IFFALSE 3901
// RemoveUnit ( omarCargo ) ;
3994: LD_EXP 43
3998: PPUSH
3999: CALL_OW 64
// end ;
4003: LD_VAR 0 1
4007: RET
// export function PrepareCargo ; var un , veh ; begin
4008: LD_INT 0
4010: PPUSH
4011: PPUSH
4012: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4013: LD_ADDR_VAR 0 3
4017: PUSH
4018: LD_INT 5
4020: PPUSH
4021: LD_INT 2
4023: PPUSH
4024: LD_INT 14
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_INT 1
4032: PPUSH
4033: LD_INT 32
4035: PPUSH
4036: LD_INT 80
4038: PPUSH
4039: CALL 325 0 7
4043: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4044: LD_VAR 0 3
4048: PPUSH
4049: LD_INT 4
4051: PPUSH
4052: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_INT 101
4063: PPUSH
4064: LD_INT 8
4066: PPUSH
4067: LD_INT 0
4069: PPUSH
4070: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4074: LD_INT 0
4076: PPUSH
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 2
4082: PPUSH
4083: CALL_OW 380
// un := CreateHuman ;
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: CALL_OW 44
4096: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_VAR 0 3
4106: PPUSH
4107: CALL_OW 52
// result := veh ;
4111: LD_ADDR_VAR 0 1
4115: PUSH
4116: LD_VAR 0 3
4120: ST_TO_ADDR
// end ; end_of_file
4121: LD_VAR 0 1
4125: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
// usForces := [ ] ;
4131: LD_ADDR_EXP 44
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4138: LD_ADDR_EXP 46
4142: PUSH
4143: LD_INT 6
4145: PUSH
4146: LD_INT 32
4148: PUSH
4149: LD_INT 27
4151: PUSH
4152: LD_INT 1
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 43
4166: PUSH
4167: LD_INT 24
4169: PUSH
4170: LD_INT 5
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 27
4181: PUSH
4182: LD_INT 29
4184: PUSH
4185: LD_INT 21
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: LIST
4201: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4202: LD_INT 11
4204: PPUSH
4205: CALL_OW 274
4209: PPUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 150
4215: PUSH
4216: LD_INT 120
4218: PUSH
4219: LD_INT 100
4221: PUSH
4222: LD_INT 80
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: PUSH
4231: LD_OWVAR 67
4235: ARRAY
4236: PPUSH
4237: CALL_OW 277
// if Difficulty = 1 then
4241: LD_OWVAR 67
4245: PUSH
4246: LD_INT 1
4248: EQUAL
4249: IFFALSE 4258
// RemoveUnit ( hillBun ) ;
4251: LD_INT 14
4253: PPUSH
4254: CALL_OW 64
// uc_side := 1 ;
4258: LD_ADDR_OWVAR 20
4262: PUSH
4263: LD_INT 1
4265: ST_TO_ADDR
// uc_nation := 1 ;
4266: LD_ADDR_OWVAR 21
4270: PUSH
4271: LD_INT 1
4273: ST_TO_ADDR
// hc_gallery :=  ;
4274: LD_ADDR_OWVAR 33
4278: PUSH
4279: LD_STRING 
4281: ST_TO_ADDR
// hc_name :=  ;
4282: LD_ADDR_OWVAR 26
4286: PUSH
4287: LD_STRING 
4289: ST_TO_ADDR
// hc_importance := 0 ;
4290: LD_ADDR_OWVAR 32
4294: PUSH
4295: LD_INT 0
4297: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4298: LD_INT 1
4300: PPUSH
4301: LD_INT 1
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: CALL_OW 380
// usCommander := CreateHuman ;
4311: LD_ADDR_EXP 45
4315: PUSH
4316: CALL_OW 44
4320: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4321: LD_EXP 45
4325: PPUSH
4326: LD_INT 11
4328: PPUSH
4329: CALL_OW 52
// if Difficulty > 1 then
4333: LD_OWVAR 67
4337: PUSH
4338: LD_INT 1
4340: GREATER
4341: IFFALSE 4423
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4343: LD_INT 0
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: LD_INT 1
4351: PUSH
4352: LD_INT 2
4354: PUSH
4355: LD_INT 3
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: LIST
4362: PUSH
4363: LD_OWVAR 67
4367: ARRAY
4368: PPUSH
4369: CALL_OW 380
// un := CreateHuman ;
4373: LD_ADDR_VAR 0 3
4377: PUSH
4378: CALL_OW 44
4382: ST_TO_ADDR
// usForces := usForces union un ;
4383: LD_ADDR_EXP 44
4387: PUSH
4388: LD_EXP 44
4392: PUSH
4393: LD_VAR 0 3
4397: UNION
4398: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_INT 1
4406: PPUSH
4407: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 14
4418: PPUSH
4419: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4423: LD_ADDR_VAR 0 2
4427: PUSH
4428: DOUBLE
4429: LD_INT 1
4431: DEC
4432: ST_TO_ADDR
4433: LD_INT 2
4435: PUSH
4436: LD_INT 3
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: LD_INT 4
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_OWVAR 67
4455: ARRAY
4456: PUSH
4457: FOR_TO
4458: IFFALSE 4604
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4460: LD_INT 0
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: LD_INT 1
4468: PUSH
4469: LD_INT 2
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: PUSH
4484: LD_OWVAR 67
4488: ARRAY
4489: PPUSH
4490: CALL_OW 380
// un := CreateHuman ;
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: CALL_OW 44
4503: ST_TO_ADDR
// usForces := usForces union un ;
4504: LD_ADDR_EXP 44
4508: PUSH
4509: LD_EXP 44
4513: PUSH
4514: LD_VAR 0 3
4518: UNION
4519: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4520: LD_VAR 0 3
4524: PPUSH
4525: LD_INT 39
4527: PPUSH
4528: LD_INT 24
4530: PPUSH
4531: LD_INT 4
4533: PPUSH
4534: LD_INT 0
4536: PPUSH
4537: CALL_OW 50
// if i < 3 then
4541: LD_VAR 0 2
4545: PUSH
4546: LD_INT 3
4548: LESS
4549: IFFALSE 4602
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4551: LD_VAR 0 3
4555: PPUSH
4556: LD_INT 22
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 58
4568: PUSH
4569: EMPTY
4570: LIST
4571: PUSH
4572: LD_INT 30
4574: PUSH
4575: LD_INT 31
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: PPUSH
4587: CALL_OW 69
4591: PUSH
4592: LD_VAR 0 2
4596: ARRAY
4597: PPUSH
4598: CALL_OW 120
// end ;
4602: GO 4457
4604: POP
4605: POP
// for i := 1 to 2 do
4606: LD_ADDR_VAR 0 2
4610: PUSH
4611: DOUBLE
4612: LD_INT 1
4614: DEC
4615: ST_TO_ADDR
4616: LD_INT 2
4618: PUSH
4619: FOR_TO
4620: IFFALSE 4684
// begin PrepareHuman ( false , 2 , 2 ) ;
4622: LD_INT 0
4624: PPUSH
4625: LD_INT 2
4627: PPUSH
4628: LD_INT 2
4630: PPUSH
4631: CALL_OW 380
// un := CreateHuman ;
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: CALL_OW 44
4644: ST_TO_ADDR
// usForces := usForces union un ;
4645: LD_ADDR_EXP 44
4649: PUSH
4650: LD_EXP 44
4654: PUSH
4655: LD_VAR 0 3
4659: UNION
4660: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_INT 39
4668: PPUSH
4669: LD_INT 24
4671: PPUSH
4672: LD_INT 4
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: CALL_OW 50
// end ;
4682: GO 4619
4684: POP
4685: POP
// PrepareHuman ( false , 4 , 1 ) ;
4686: LD_INT 0
4688: PPUSH
4689: LD_INT 4
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 380
// un := CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// usForces := usForces union un ;
4709: LD_ADDR_EXP 44
4713: PUSH
4714: LD_EXP 44
4718: PUSH
4719: LD_VAR 0 3
4723: UNION
4724: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4725: LD_VAR 0 3
4729: PPUSH
4730: LD_INT 39
4732: PPUSH
4733: LD_INT 24
4735: PPUSH
4736: LD_INT 4
4738: PPUSH
4739: LD_INT 0
4741: PPUSH
4742: CALL_OW 50
// end ;
4746: LD_VAR 0 1
4750: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4751: LD_EXP 44
4755: PUSH
4756: LD_EXP 6
4760: NOT
4761: AND
4762: PUSH
4763: LD_EXP 14
4767: NOT
4768: AND
4769: IFFALSE 5200
4771: GO 4773
4773: DISABLE
4774: LD_INT 0
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// begin enable ;
4781: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4782: LD_ADDR_VAR 0 3
4786: PUSH
4787: LD_EXP 44
4791: PPUSH
4792: LD_INT 25
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 72
4806: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4807: LD_ADDR_VAR 0 4
4811: PUSH
4812: LD_EXP 44
4816: PPUSH
4817: LD_INT 25
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: CALL_OW 72
4831: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4832: LD_ADDR_VAR 0 5
4836: PUSH
4837: LD_EXP 44
4841: PPUSH
4842: LD_INT 25
4844: PUSH
4845: LD_INT 4
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 72
4856: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4857: LD_INT 7
4859: PPUSH
4860: LD_INT 22
4862: PUSH
4863: LD_INT 2
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL_OW 70
4874: PUSH
4875: LD_INT 1
4877: EQUAL
4878: IFFALSE 4954
// for i in sol do
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_VAR 0 4
4889: PUSH
4890: FOR_IN
4891: IFFALSE 4952
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4893: LD_VAR 0 1
4897: PPUSH
4898: CALL_OW 310
4902: NOT
4903: PUSH
4904: LD_VAR 0 1
4908: PPUSH
4909: CALL_OW 310
4913: PPUSH
4914: CALL_OW 266
4918: PUSH
4919: LD_INT 4
4921: EQUAL
4922: NOT
4923: OR
4924: IFFALSE 4950
// begin ComExitBuilding ( i ) ;
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4935: LD_VAR 0 1
4939: PPUSH
4940: LD_INT 37
4942: PPUSH
4943: LD_INT 23
4945: PPUSH
4946: CALL_OW 174
// end ;
4950: GO 4890
4952: POP
4953: POP
// if eng then
4954: LD_VAR 0 3
4958: IFFALSE 5200
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: LD_INT 22
4967: PUSH
4968: LD_INT 1
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PUSH
4975: LD_INT 95
4977: PUSH
4978: LD_INT 7
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PUSH
4985: LD_INT 21
4987: PUSH
4988: LD_INT 3
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 24
5000: PUSH
5001: LD_INT 1000
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: ST_TO_ADDR
// if b then
5023: LD_VAR 0 2
5027: IFFALSE 5058
// begin ComExitBuilding ( eng ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5038: LD_VAR 0 3
5042: PPUSH
5043: LD_VAR 0 2
5047: PUSH
5048: LD_INT 1
5050: ARRAY
5051: PPUSH
5052: CALL_OW 190
// end else
5056: GO 5200
// begin for i in eng do
5058: LD_ADDR_VAR 0 1
5062: PUSH
5063: LD_VAR 0 3
5067: PUSH
5068: FOR_IN
5069: IFFALSE 5198
// if not HasTask ( i ) then
5071: LD_VAR 0 1
5075: PPUSH
5076: CALL_OW 314
5080: NOT
5081: IFFALSE 5196
// begin if americanBuildList then
5083: LD_EXP 46
5087: IFFALSE 5172
// begin if IsInUnit ( i ) then
5089: LD_VAR 0 1
5093: PPUSH
5094: CALL_OW 310
5098: IFFALSE 5109
// ComExitBuilding ( i ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5109: LD_VAR 0 1
5113: PPUSH
5114: LD_EXP 46
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PPUSH
5127: LD_EXP 46
5131: PUSH
5132: LD_INT 1
5134: ARRAY
5135: PUSH
5136: LD_INT 2
5138: ARRAY
5139: PPUSH
5140: LD_EXP 46
5144: PUSH
5145: LD_INT 1
5147: ARRAY
5148: PUSH
5149: LD_INT 3
5151: ARRAY
5152: PPUSH
5153: LD_EXP 46
5157: PUSH
5158: LD_INT 1
5160: ARRAY
5161: PUSH
5162: LD_INT 4
5164: ARRAY
5165: PPUSH
5166: CALL_OW 205
// end else
5170: GO 5196
// if not IsInUnit ( i ) then
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 310
5181: NOT
5182: IFFALSE 5196
// ComEnterUnit ( i , usDepot ) ;
5184: LD_VAR 0 1
5188: PPUSH
5189: LD_INT 11
5191: PPUSH
5192: CALL_OW 120
// end ;
5196: GO 5068
5198: POP
5199: POP
// end ; end ; end ;
5200: PPOPN 5
5202: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5203: LD_INT 0
5205: PPUSH
5206: PPUSH
5207: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_INT 35
5215: PUSH
5216: LD_INT 45
5218: PUSH
5219: LD_INT 48
5221: PUSH
5222: LD_EXP 58
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: ST_TO_ADDR
// for i in tech do
5233: LD_ADDR_VAR 0 4
5237: PUSH
5238: LD_VAR 0 3
5242: PUSH
5243: FOR_IN
5244: IFFALSE 5262
// AddComResearch ( lab , i ) ;
5246: LD_VAR 0 1
5250: PPUSH
5251: LD_VAR 0 4
5255: PPUSH
5256: CALL_OW 184
5260: GO 5243
5262: POP
5263: POP
// end ;
5264: LD_VAR 0 2
5268: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5269: LD_EXP 12
5273: PUSH
5274: LD_EXP 23
5278: PUSH
5279: LD_EXP 27
5283: LESSEQUAL
5284: AND
5285: IFFALSE 5310
5287: GO 5289
5289: DISABLE
// begin enable ;
5290: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5291: LD_INT 35
5293: PPUSH
5294: LD_INT 2065
5296: PPUSH
5297: CALL_OW 12
5301: PPUSH
5302: CALL_OW 67
// SendConvoy ;
5306: CALL 5416 0 0
// end ;
5310: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5311: LD_EXP 6
5315: PUSH
5316: LD_EXP 18
5320: AND
5321: IFFALSE 5415
5323: GO 5325
5325: DISABLE
// begin if americanHasEscaped then
5326: LD_EXP 8
5330: IFFALSE 5341
// wait ( 3 3$20 ) else
5332: LD_INT 7000
5334: PPUSH
5335: CALL_OW 67
5339: GO 5348
// wait ( 6 6$40 ) ;
5341: LD_INT 14000
5343: PPUSH
5344: CALL_OW 67
// SendAttack ;
5348: CALL 6163 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 , 4 4$00 ] [ Difficulty ] ) ;
5352: LD_INT 14000
5354: PUSH
5355: LD_INT 11900
5357: PUSH
5358: LD_INT 9800
5360: PUSH
5361: LD_INT 8400
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: LD_OWVAR 67
5374: ARRAY
5375: PPUSH
5376: CALL_OW 67
// SendAttack ;
5380: CALL 6163 0 0
// until attackWave < [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5384: LD_EXP 19
5388: PUSH
5389: LD_INT 6
5391: PUSH
5392: LD_INT 7
5394: PUSH
5395: LD_INT 8
5397: PUSH
5398: LD_INT 9
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_OWVAR 67
5411: ARRAY
5412: LESS
5413: IFFALSE 5352
// end ;
5415: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
5421: PPUSH
5422: PPUSH
5423: PPUSH
5424: PPUSH
5425: PPUSH
// road := rand ( 1 , 2 ) ;
5426: LD_ADDR_VAR 0 4
5430: PUSH
5431: LD_INT 1
5433: PPUSH
5434: LD_INT 2
5436: PPUSH
5437: CALL_OW 12
5441: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5442: LD_ADDR_VAR 0 8
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: LD_INT 8
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PUSH
5457: LD_VAR 0 4
5461: ARRAY
5462: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5463: LD_ADDR_VAR 0 5
5467: PUSH
5468: LD_INT 35
5470: PUSH
5471: LD_INT 66
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 101
5484: PUSH
5485: LD_INT 8
5487: PUSH
5488: LD_INT 4
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5500: LD_ADDR_VAR 0 6
5504: PUSH
5505: LD_INT 34
5507: PUSH
5508: LD_INT 67
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 38
5517: PUSH
5518: LD_INT 62
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: LD_INT 43
5527: PUSH
5528: LD_INT 54
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 57
5537: PUSH
5538: LD_INT 57
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 77
5547: PUSH
5548: LD_INT 71
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 86
5557: PUSH
5558: LD_INT 60
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 89
5567: PUSH
5568: LD_INT 35
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 93
5577: PUSH
5578: LD_INT 17
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: LD_INT 97
5587: PUSH
5588: LD_INT 10
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 103
5597: PUSH
5598: LD_INT 9
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: ST_TO_ADDR
// if road = 2 then
5617: LD_VAR 0 4
5621: PUSH
5622: LD_INT 2
5624: EQUAL
5625: IFFALSE 5642
// points := ReverseArray ( points ) ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_VAR 0 6
5636: PPUSH
5637: CALL 989 0 1
5641: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5642: LD_INT 4
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: LD_INT 2
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 12
5659: PPUSH
5660: LD_INT 80
5662: PPUSH
5663: CALL 325 0 7
// veh := CreateVehicle ;
5667: LD_ADDR_VAR 0 3
5671: PUSH
5672: CALL_OW 45
5676: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5677: LD_VAR 0 3
5681: PPUSH
5682: LD_VAR 0 5
5686: PUSH
5687: LD_VAR 0 4
5691: ARRAY
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PPUSH
5697: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5701: LD_VAR 0 3
5705: PPUSH
5706: LD_VAR 0 5
5710: PUSH
5711: LD_VAR 0 4
5715: ARRAY
5716: PUSH
5717: LD_INT 1
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 5
5725: PUSH
5726: LD_VAR 0 4
5730: ARRAY
5731: PUSH
5732: LD_INT 2
5734: ARRAY
5735: PPUSH
5736: LD_INT 0
5738: PPUSH
5739: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5743: LD_INT 0
5745: PPUSH
5746: LD_INT 1
5748: PPUSH
5749: LD_OWVAR 67
5753: PPUSH
5754: CALL_OW 380
// un := CreateHuman ;
5758: LD_ADDR_VAR 0 2
5762: PUSH
5763: CALL_OW 44
5767: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5768: LD_VAR 0 2
5772: PPUSH
5773: LD_VAR 0 3
5777: PPUSH
5778: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 , 48 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5782: LD_INT 60
5784: PUSH
5785: LD_INT 56
5787: PUSH
5788: LD_INT 52
5790: PUSH
5791: LD_INT 48
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: LD_OWVAR 67
5804: ARRAY
5805: PPUSH
5806: CALL_OW 13
5810: PUSH
5811: LD_OWVAR 1
5815: PUSH
5816: LD_INT 30
5818: MOD
5819: PLUS
5820: PUSH
5821: LD_EXP 23
5825: PUSH
5826: LD_INT 4
5828: LESS
5829: OR
5830: IFFALSE 5847
// SetCargo ( veh , mat_cans , 100 ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: LD_INT 100
5842: PPUSH
5843: CALL_OW 290
// for i := 2 to points do
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: DOUBLE
5853: LD_INT 2
5855: DEC
5856: ST_TO_ADDR
5857: LD_VAR 0 6
5861: PUSH
5862: FOR_TO
5863: IFFALSE 5906
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5865: LD_VAR 0 3
5869: PPUSH
5870: LD_VAR 0 6
5874: PUSH
5875: LD_VAR 0 7
5879: ARRAY
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: PPUSH
5885: LD_VAR 0 6
5889: PUSH
5890: LD_VAR 0 7
5894: ARRAY
5895: PUSH
5896: LD_INT 2
5898: ARRAY
5899: PPUSH
5900: CALL_OW 171
5904: GO 5862
5906: POP
5907: POP
// convoyCounter := convoyCounter + 1 ;
5908: LD_ADDR_EXP 23
5912: PUSH
5913: LD_EXP 23
5917: PUSH
5918: LD_INT 1
5920: PLUS
5921: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5922: LD_INT 35
5924: PPUSH
5925: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5929: LD_VAR 0 3
5933: PPUSH
5934: CALL_OW 314
5938: NOT
5939: PUSH
5940: LD_VAR 0 3
5944: PPUSH
5945: CALL_OW 302
5949: AND
5950: IFFALSE 5991
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5952: LD_VAR 0 3
5956: PPUSH
5957: LD_VAR 0 6
5961: PUSH
5962: LD_VAR 0 6
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_VAR 0 6
5976: PUSH
5977: LD_VAR 0 6
5981: ARRAY
5982: PUSH
5983: LD_INT 2
5985: ARRAY
5986: PPUSH
5987: CALL_OW 111
// if not IsInUnit ( un ) then
5991: LD_VAR 0 2
5995: PPUSH
5996: CALL_OW 310
6000: NOT
6001: IFFALSE 6042
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_VAR 0 6
6012: PUSH
6013: LD_VAR 0 6
6017: ARRAY
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: LD_VAR 0 6
6027: PUSH
6028: LD_VAR 0 6
6032: ARRAY
6033: PUSH
6034: LD_INT 2
6036: ARRAY
6037: PPUSH
6038: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6042: LD_VAR 0 3
6046: PPUSH
6047: LD_VAR 0 8
6051: PPUSH
6052: CALL_OW 308
6056: PUSH
6057: LD_VAR 0 2
6061: PPUSH
6062: LD_VAR 0 8
6066: PPUSH
6067: CALL_OW 308
6071: OR
6072: IFFALSE 5922
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6074: LD_VAR 0 2
6078: PPUSH
6079: CALL_OW 302
6083: PUSH
6084: LD_VAR 0 3
6088: PPUSH
6089: CALL_OW 302
6093: NOT
6094: AND
6095: PUSH
6096: LD_VAR 0 2
6100: PPUSH
6101: LD_VAR 0 8
6105: PPUSH
6106: CALL_OW 308
6110: AND
6111: IFFALSE 6122
// RemoveUnit ( un ) ;
6113: LD_VAR 0 2
6117: PPUSH
6118: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6122: LD_VAR 0 3
6126: PPUSH
6127: LD_VAR 0 8
6131: PPUSH
6132: CALL_OW 308
6136: PUSH
6137: LD_VAR 0 3
6141: PPUSH
6142: CALL_OW 302
6146: AND
6147: IFFALSE 6158
// RemoveUnit ( veh ) ;
6149: LD_VAR 0 3
6153: PPUSH
6154: CALL_OW 64
// end ;
6158: LD_VAR 0 1
6162: RET
// export function SendAttack ; var un , veh , i ; begin
6163: LD_INT 0
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
// if ingame_video then
6169: LD_OWVAR 52
6173: IFFALSE 6196
// begin repeat wait ( 0 0$1 ) ;
6175: LD_INT 35
6177: PPUSH
6178: CALL_OW 67
// until not ingame_video ;
6182: LD_OWVAR 52
6186: NOT
6187: IFFALSE 6175
// wait ( 0 0$5 ) ;
6189: LD_INT 175
6191: PPUSH
6192: CALL_OW 67
// end ; IncomingAttack ;
6196: CALL 15155 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6200: LD_INT 2100
6202: PPUSH
6203: LD_INT 3500
6205: PPUSH
6206: CALL_OW 12
6210: PPUSH
6211: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: DOUBLE
6221: LD_INT 1
6223: DEC
6224: ST_TO_ADDR
6225: LD_INT 3
6227: PUSH
6228: LD_INT 4
6230: PUSH
6231: LD_INT 4
6233: PUSH
6234: LD_INT 5
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: PUSH
6243: LD_OWVAR 67
6247: ARRAY
6248: PUSH
6249: LD_EXP 19
6253: PUSH
6254: LD_INT 3
6256: DIV
6257: PLUS
6258: PUSH
6259: FOR_TO
6260: IFFALSE 6376
// begin uc_side := 1 ;
6262: LD_ADDR_OWVAR 20
6266: PUSH
6267: LD_INT 1
6269: ST_TO_ADDR
// uc_nation := 1 ;
6270: LD_ADDR_OWVAR 21
6274: PUSH
6275: LD_INT 1
6277: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6278: LD_INT 0
6280: PPUSH
6281: LD_INT 1
6283: PPUSH
6284: LD_INT 2
6286: PUSH
6287: LD_INT 3
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: PUSH
6302: LD_OWVAR 67
6306: ARRAY
6307: PPUSH
6308: CALL_OW 380
// un := CreateHuman ;
6312: LD_ADDR_VAR 0 2
6316: PUSH
6317: CALL_OW 44
6321: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6322: LD_VAR 0 2
6326: PPUSH
6327: LD_INT 37
6329: PPUSH
6330: LD_INT 70
6332: PPUSH
6333: LD_INT 3
6335: PPUSH
6336: LD_INT 0
6338: PPUSH
6339: CALL_OW 50
// usAttackers := usAttackers union un ;
6343: LD_ADDR_EXP 47
6347: PUSH
6348: LD_EXP 47
6352: PUSH
6353: LD_VAR 0 2
6357: UNION
6358: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6359: LD_VAR 0 2
6363: PPUSH
6364: LD_INT 40
6366: PPUSH
6367: LD_INT 65
6369: PPUSH
6370: CALL_OW 111
// end ;
6374: GO 6259
6376: POP
6377: POP
// uc_side := 1 ;
6378: LD_ADDR_OWVAR 20
6382: PUSH
6383: LD_INT 1
6385: ST_TO_ADDR
// uc_nation := 1 ;
6386: LD_ADDR_OWVAR 21
6390: PUSH
6391: LD_INT 1
6393: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6394: LD_INT 0
6396: PPUSH
6397: LD_INT 4
6399: PPUSH
6400: LD_INT 2
6402: PPUSH
6403: CALL_OW 380
// un := CreateHuman ;
6407: LD_ADDR_VAR 0 2
6411: PUSH
6412: CALL_OW 44
6416: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6417: LD_VAR 0 2
6421: PPUSH
6422: LD_INT 37
6424: PPUSH
6425: LD_INT 70
6427: PPUSH
6428: LD_INT 3
6430: PPUSH
6431: LD_INT 0
6433: PPUSH
6434: CALL_OW 50
// usAttackers := usAttackers union un ;
6438: LD_ADDR_EXP 47
6442: PUSH
6443: LD_EXP 47
6447: PUSH
6448: LD_VAR 0 2
6452: UNION
6453: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6454: LD_VAR 0 2
6458: PPUSH
6459: LD_INT 40
6461: PPUSH
6462: LD_INT 65
6464: PPUSH
6465: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6469: LD_ADDR_VAR 0 4
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_OWVAR 67
6483: PUSH
6484: LD_EXP 19
6488: PUSH
6489: LD_INT 4
6491: DIV
6492: PLUS
6493: PUSH
6494: FOR_TO
6495: IFFALSE 6668
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6497: LD_ADDR_VAR 0 3
6501: PUSH
6502: LD_INT 1
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: LD_INT 2
6510: PPUSH
6511: LD_INT 1
6513: PPUSH
6514: LD_INT 1
6516: PPUSH
6517: LD_INT 4
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: LD_INT 2
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 3
6536: PPUSH
6537: CALL_OW 12
6541: ARRAY
6542: PPUSH
6543: LD_INT 90
6545: PPUSH
6546: CALL 325 0 7
6550: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6551: LD_VAR 0 3
6555: PPUSH
6556: LD_INT 35
6558: PPUSH
6559: LD_INT 65
6561: PPUSH
6562: LD_INT 0
6564: PPUSH
6565: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6569: LD_INT 0
6571: PPUSH
6572: LD_INT 3
6574: PPUSH
6575: LD_OWVAR 67
6579: PUSH
6580: LD_INT 1
6582: PLUS
6583: PPUSH
6584: CALL_OW 380
// un := CreateHuman ;
6588: LD_ADDR_VAR 0 2
6592: PUSH
6593: CALL_OW 44
6597: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6598: LD_VAR 0 2
6602: PPUSH
6603: LD_VAR 0 3
6607: PPUSH
6608: CALL_OW 52
// usAttackers := usAttackers union un ;
6612: LD_ADDR_EXP 47
6616: PUSH
6617: LD_EXP 47
6621: PUSH
6622: LD_VAR 0 2
6626: UNION
6627: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6628: LD_VAR 0 3
6632: PPUSH
6633: LD_INT 39
6635: PPUSH
6636: LD_INT 60
6638: PPUSH
6639: CALL_OW 111
// wait ( 0 0$3 ) ;
6643: LD_INT 105
6645: PPUSH
6646: CALL_OW 67
// usAttackers := usAttackers union veh ;
6650: LD_ADDR_EXP 47
6654: PUSH
6655: LD_EXP 47
6659: PUSH
6660: LD_VAR 0 3
6664: UNION
6665: ST_TO_ADDR
// end ;
6666: GO 6494
6668: POP
6669: POP
// attackWave := attackWave + 1 ;
6670: LD_ADDR_EXP 19
6674: PUSH
6675: LD_EXP 19
6679: PUSH
6680: LD_INT 1
6682: PLUS
6683: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6684: LD_EXP 24
6688: PPUSH
6689: CALL_OW 427
// end ;
6693: LD_VAR 0 1
6697: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6698: LD_INT 0
6700: PPUSH
6701: PPUSH
6702: PPUSH
6703: PPUSH
6704: PPUSH
6705: PPUSH
6706: PPUSH
6707: PPUSH
6708: PPUSH
6709: PPUSH
6710: PPUSH
// if retreatAllowed then
6711: LD_EXP 11
6715: IFFALSE 6727
// strategy := 2 else
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: LD_INT 2
6724: ST_TO_ADDR
6725: GO 6743
// strategy := rand ( 0 , 2 ) ;
6727: LD_ADDR_VAR 0 5
6731: PUSH
6732: LD_INT 0
6734: PPUSH
6735: LD_INT 2
6737: PPUSH
6738: CALL_OW 12
6742: ST_TO_ADDR
// attackFormula := [ ] ;
6743: LD_ADDR_VAR 0 6
6747: PUSH
6748: EMPTY
6749: ST_TO_ADDR
// case strategy of 0 :
6750: LD_VAR 0 5
6754: PUSH
6755: LD_INT 0
6757: DOUBLE
6758: EQUAL
6759: IFTRUE 6763
6761: GO 7093
6763: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6764: LD_INT 11
6766: PPUSH
6767: LD_INT 22
6769: PUSH
6770: LD_INT 2
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 70
6795: NOT
6796: IFFALSE 6868
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6798: LD_ADDR_VAR 0 6
6802: PUSH
6803: LD_INT 41
6805: PUSH
6806: LD_INT 34
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: EMPTY
6814: LIST
6815: PUSH
6816: LD_INT 53
6818: PUSH
6819: LD_INT 62
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 37
6828: PUSH
6829: LD_INT 63
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 44
6838: PUSH
6839: LD_INT 45
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 37
6848: PUSH
6849: LD_INT 28
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: ST_TO_ADDR
6866: GO 7091
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6868: LD_INT 12
6870: PPUSH
6871: LD_INT 22
6873: PUSH
6874: LD_INT 2
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 2
6883: PUSH
6884: LD_INT 30
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 30
6896: PUSH
6897: LD_INT 31
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 30
6906: PUSH
6907: LD_INT 32
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 70
6928: NOT
6929: IFFALSE 7012
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6931: LD_ADDR_VAR 0 6
6935: PUSH
6936: LD_INT 27
6938: PUSH
6939: LD_INT 42
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 27
6948: PUSH
6949: LD_INT 32
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 53
6962: PUSH
6963: LD_INT 62
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 37
6972: PUSH
6973: LD_INT 63
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 44
6982: PUSH
6983: LD_INT 45
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 37
6992: PUSH
6993: LD_INT 28
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: ST_TO_ADDR
7010: GO 7091
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7012: LD_ADDR_VAR 0 6
7016: PUSH
7017: LD_INT 71
7019: PUSH
7020: LD_INT 67
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 54
7029: PUSH
7030: LD_INT 35
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 63
7043: PUSH
7044: LD_INT 40
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 37
7053: PUSH
7054: LD_INT 63
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 44
7063: PUSH
7064: LD_INT 45
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 37
7073: PUSH
7074: LD_INT 28
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: ST_TO_ADDR
// end ; 1 :
7091: GO 7296
7093: LD_INT 1
7095: DOUBLE
7096: EQUAL
7097: IFTRUE 7101
7099: GO 7205
7101: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7102: LD_ADDR_VAR 0 6
7106: PUSH
7107: LD_INT 71
7109: PUSH
7110: LD_INT 67
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 82
7119: PUSH
7120: LD_INT 23
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: LD_INT 53
7129: PUSH
7130: LD_INT 7
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 43
7139: PUSH
7140: LD_INT 10
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 53
7155: PUSH
7156: LD_INT 62
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: LD_INT 37
7165: PUSH
7166: LD_INT 63
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: LD_INT 44
7175: PUSH
7176: LD_INT 45
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 37
7185: PUSH
7186: LD_INT 28
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: ST_TO_ADDR
7203: GO 7296
7205: LD_INT 2
7207: DOUBLE
7208: EQUAL
7209: IFTRUE 7213
7211: GO 7295
7213: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7214: LD_ADDR_VAR 0 6
7218: PUSH
7219: LD_INT 90
7221: PUSH
7222: LD_INT 59
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 108
7231: PUSH
7232: LD_INT 64
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 82
7245: PUSH
7246: LD_INT 75
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 73
7255: PUSH
7256: LD_INT 67
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 101
7265: PUSH
7266: LD_INT 65
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 108
7275: PUSH
7276: LD_INT 62
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: ST_TO_ADDR
7293: GO 7296
7295: POP
// if not attackFormula then
7296: LD_VAR 0 6
7300: NOT
7301: IFFALSE 7305
// exit ;
7303: GO 8983
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7305: LD_ADDR_VAR 0 7
7309: PUSH
7310: LD_EXP 47
7314: PPUSH
7315: LD_INT 25
7317: PUSH
7318: LD_INT 1
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PPUSH
7325: CALL_OW 72
7329: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7330: LD_ADDR_VAR 0 8
7334: PUSH
7335: LD_EXP 47
7339: PPUSH
7340: LD_INT 25
7342: PUSH
7343: LD_INT 4
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PPUSH
7350: CALL_OW 72
7354: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7355: LD_ADDR_VAR 0 9
7359: PUSH
7360: LD_EXP 47
7364: PPUSH
7365: LD_INT 25
7367: PUSH
7368: LD_INT 3
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 72
7379: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7380: LD_ADDR_VAR 0 10
7384: PUSH
7385: LD_EXP 47
7389: PPUSH
7390: LD_INT 21
7392: PUSH
7393: LD_INT 2
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PPUSH
7400: CALL_OW 72
7404: ST_TO_ADDR
// if sci then
7405: LD_VAR 0 8
7409: IFFALSE 7446
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7411: LD_VAR 0 8
7415: PPUSH
7416: LD_VAR 0 6
7420: PUSH
7421: LD_INT 2
7423: ARRAY
7424: PUSH
7425: LD_INT 1
7427: ARRAY
7428: PPUSH
7429: LD_VAR 0 6
7433: PUSH
7434: LD_INT 2
7436: ARRAY
7437: PUSH
7438: LD_INT 2
7440: ARRAY
7441: PPUSH
7442: CALL_OW 111
// repeat wait ( 10 ) ;
7446: LD_INT 10
7448: PPUSH
7449: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7453: LD_ADDR_VAR 0 7
7457: PUSH
7458: LD_EXP 47
7462: PPUSH
7463: LD_INT 25
7465: PUSH
7466: LD_INT 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 72
7477: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7478: LD_ADDR_VAR 0 8
7482: PUSH
7483: LD_EXP 47
7487: PPUSH
7488: LD_INT 25
7490: PUSH
7491: LD_INT 4
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PPUSH
7498: CALL_OW 72
7502: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7503: LD_ADDR_VAR 0 9
7507: PUSH
7508: LD_EXP 47
7512: PPUSH
7513: LD_INT 25
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PPUSH
7523: CALL_OW 72
7527: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7528: LD_ADDR_VAR 0 10
7532: PUSH
7533: LD_EXP 47
7537: PPUSH
7538: LD_INT 21
7540: PUSH
7541: LD_INT 2
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 72
7552: ST_TO_ADDR
// if sol then
7553: LD_VAR 0 7
7557: IFFALSE 7978
// begin for i in sol do
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_VAR 0 7
7568: PUSH
7569: FOR_IN
7570: IFFALSE 7976
// begin tag := GetTag ( i ) ;
7572: LD_ADDR_VAR 0 4
7576: PUSH
7577: LD_VAR 0 2
7581: PPUSH
7582: CALL_OW 110
7586: ST_TO_ADDR
// if not tag then
7587: LD_VAR 0 4
7591: NOT
7592: IFFALSE 7701
// begin if GetLives ( i ) = 1000 then
7594: LD_VAR 0 2
7598: PPUSH
7599: CALL_OW 256
7603: PUSH
7604: LD_INT 1000
7606: EQUAL
7607: IFFALSE 7623
// SetTag ( i , 1 ) else
7609: LD_VAR 0 2
7613: PPUSH
7614: LD_INT 1
7616: PPUSH
7617: CALL_OW 109
7621: GO 7699
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7623: LD_VAR 0 2
7627: PPUSH
7628: LD_VAR 0 6
7632: PUSH
7633: LD_INT 2
7635: ARRAY
7636: PUSH
7637: LD_INT 1
7639: ARRAY
7640: PPUSH
7641: LD_VAR 0 6
7645: PUSH
7646: LD_INT 2
7648: ARRAY
7649: PUSH
7650: LD_INT 2
7652: ARRAY
7653: PPUSH
7654: CALL_OW 297
7658: PUSH
7659: LD_INT 10
7661: GREATER
7662: IFFALSE 7699
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7664: LD_VAR 0 2
7668: PPUSH
7669: LD_VAR 0 6
7673: PUSH
7674: LD_INT 2
7676: ARRAY
7677: PUSH
7678: LD_INT 1
7680: ARRAY
7681: PPUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_INT 2
7689: ARRAY
7690: PUSH
7691: LD_INT 2
7693: ARRAY
7694: PPUSH
7695: CALL_OW 111
// end else
7699: GO 7974
// begin if GetLives ( i ) < 760 then
7701: LD_VAR 0 2
7705: PPUSH
7706: CALL_OW 256
7710: PUSH
7711: LD_INT 760
7713: LESS
7714: IFFALSE 7765
// begin SetTag ( i , 0 ) ;
7716: LD_VAR 0 2
7720: PPUSH
7721: LD_INT 0
7723: PPUSH
7724: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7728: LD_VAR 0 2
7732: PPUSH
7733: LD_VAR 0 6
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: PUSH
7742: LD_INT 1
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 6
7750: PUSH
7751: LD_INT 2
7753: ARRAY
7754: PUSH
7755: LD_INT 2
7757: ARRAY
7758: PPUSH
7759: CALL_OW 111
// end else
7763: GO 7974
// if tag <= attackFormula [ 1 ] then
7765: LD_VAR 0 4
7769: PUSH
7770: LD_VAR 0 6
7774: PUSH
7775: LD_INT 1
7777: ARRAY
7778: LESSEQUAL
7779: IFFALSE 7940
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7781: LD_VAR 0 2
7785: PPUSH
7786: LD_VAR 0 6
7790: PUSH
7791: LD_INT 1
7793: ARRAY
7794: PUSH
7795: LD_VAR 0 4
7799: ARRAY
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PPUSH
7805: LD_VAR 0 6
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PUSH
7814: LD_VAR 0 4
7818: ARRAY
7819: PUSH
7820: LD_INT 2
7822: ARRAY
7823: PPUSH
7824: CALL_OW 297
7828: PUSH
7829: LD_INT 6
7831: GREATER
7832: IFFALSE 7883
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7834: LD_VAR 0 2
7838: PPUSH
7839: LD_VAR 0 6
7843: PUSH
7844: LD_INT 1
7846: ARRAY
7847: PUSH
7848: LD_VAR 0 4
7852: ARRAY
7853: PUSH
7854: LD_INT 1
7856: ARRAY
7857: PPUSH
7858: LD_VAR 0 6
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: PUSH
7867: LD_VAR 0 4
7871: ARRAY
7872: PUSH
7873: LD_INT 2
7875: ARRAY
7876: PPUSH
7877: CALL_OW 114
7881: GO 7938
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7883: LD_INT 81
7885: PUSH
7886: LD_INT 1
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: LD_INT 91
7895: PUSH
7896: LD_VAR 0 2
7900: PUSH
7901: LD_INT 10
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PPUSH
7913: CALL_OW 69
7917: NOT
7918: IFFALSE 7938
// SetTag ( i , tag + 1 ) ;
7920: LD_VAR 0 2
7924: PPUSH
7925: LD_VAR 0 4
7929: PUSH
7930: LD_INT 1
7932: PLUS
7933: PPUSH
7934: CALL_OW 109
// end else
7938: GO 7974
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7940: LD_VAR 0 2
7944: PPUSH
7945: LD_INT 81
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PPUSH
7955: CALL_OW 69
7959: PPUSH
7960: LD_VAR 0 2
7964: PPUSH
7965: CALL_OW 74
7969: PPUSH
7970: CALL_OW 115
// end ; end ;
7974: GO 7569
7976: POP
7977: POP
// end ; if sci then
7978: LD_VAR 0 8
7982: IFFALSE 8251
// begin if not sol and not mech then
7984: LD_VAR 0 7
7988: NOT
7989: PUSH
7990: LD_VAR 0 9
7994: NOT
7995: AND
7996: IFFALSE 8048
// begin for i in sci do
7998: LD_ADDR_VAR 0 2
8002: PUSH
8003: LD_VAR 0 8
8007: PUSH
8008: FOR_IN
8009: IFFALSE 8044
// begin usForces := usForces union i ;
8011: LD_ADDR_EXP 44
8015: PUSH
8016: LD_EXP 44
8020: PUSH
8021: LD_VAR 0 2
8025: UNION
8026: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8027: LD_VAR 0 2
8031: PPUSH
8032: LD_INT 34
8034: PPUSH
8035: LD_INT 68
8037: PPUSH
8038: CALL_OW 111
// end ;
8042: GO 8008
8044: POP
8045: POP
// end else
8046: GO 8251
// for i in sci do
8048: LD_ADDR_VAR 0 2
8052: PUSH
8053: LD_VAR 0 8
8057: PUSH
8058: FOR_IN
8059: IFFALSE 8249
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_VAR 0 6
8070: PUSH
8071: LD_INT 2
8073: ARRAY
8074: PUSH
8075: LD_INT 1
8077: ARRAY
8078: PPUSH
8079: LD_VAR 0 6
8083: PUSH
8084: LD_INT 2
8086: ARRAY
8087: PUSH
8088: LD_INT 2
8090: ARRAY
8091: PPUSH
8092: CALL_OW 297
8096: PUSH
8097: LD_INT 10
8099: GREATER
8100: IFFALSE 8139
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8102: LD_VAR 0 2
8106: PPUSH
8107: LD_VAR 0 6
8111: PUSH
8112: LD_INT 2
8114: ARRAY
8115: PUSH
8116: LD_INT 1
8118: ARRAY
8119: PPUSH
8120: LD_VAR 0 6
8124: PUSH
8125: LD_INT 2
8127: ARRAY
8128: PUSH
8129: LD_INT 2
8131: ARRAY
8132: PPUSH
8133: CALL_OW 111
8137: GO 8247
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8139: LD_VAR 0 7
8143: PPUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 24
8149: PUSH
8150: LD_INT 1000
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 91
8163: PUSH
8164: LD_VAR 0 2
8168: PUSH
8169: LD_INT 10
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PPUSH
8181: CALL_OW 72
8185: IFFALSE 8247
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: LD_VAR 0 7
8196: PPUSH
8197: LD_INT 3
8199: PUSH
8200: LD_INT 24
8202: PUSH
8203: LD_INT 1000
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 91
8216: PUSH
8217: LD_VAR 0 2
8221: PUSH
8222: LD_INT 10
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 72
8238: PUSH
8239: LD_INT 1
8241: ARRAY
8242: PPUSH
8243: CALL_OW 128
8247: GO 8058
8249: POP
8250: POP
// end ; if mech then
8251: LD_VAR 0 9
8255: IFFALSE 8965
// begin for i in mech do
8257: LD_ADDR_VAR 0 2
8261: PUSH
8262: LD_VAR 0 9
8266: PUSH
8267: FOR_IN
8268: IFFALSE 8963
// begin tag := GetTag ( i ) ;
8270: LD_ADDR_VAR 0 4
8274: PUSH
8275: LD_VAR 0 2
8279: PPUSH
8280: CALL_OW 110
8284: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8285: LD_ADDR_VAR 0 11
8289: PUSH
8290: LD_VAR 0 2
8294: PPUSH
8295: CALL_OW 310
8299: ST_TO_ADDR
// if not tag then
8300: LD_VAR 0 4
8304: NOT
8305: IFFALSE 8676
// begin if veh then
8307: LD_VAR 0 11
8311: IFFALSE 8482
// begin if GetLives ( veh ) = 1000 then
8313: LD_VAR 0 11
8317: PPUSH
8318: CALL_OW 256
8322: PUSH
8323: LD_INT 1000
8325: EQUAL
8326: IFFALSE 8342
// SetTag ( i , 1 ) else
8328: LD_VAR 0 2
8332: PPUSH
8333: LD_INT 1
8335: PPUSH
8336: CALL_OW 109
8340: GO 8480
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8342: LD_VAR 0 11
8346: PPUSH
8347: LD_VAR 0 6
8351: PUSH
8352: LD_INT 3
8354: ARRAY
8355: PUSH
8356: LD_INT 1
8358: ARRAY
8359: PPUSH
8360: LD_VAR 0 6
8364: PUSH
8365: LD_INT 3
8367: ARRAY
8368: PUSH
8369: LD_INT 2
8371: ARRAY
8372: PPUSH
8373: CALL_OW 297
8377: PUSH
8378: LD_INT 8
8380: GREATER
8381: IFFALSE 8420
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8383: LD_VAR 0 11
8387: PPUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_INT 3
8395: ARRAY
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PPUSH
8401: LD_VAR 0 6
8405: PUSH
8406: LD_INT 3
8408: ARRAY
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: CALL_OW 111
8418: GO 8480
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8420: LD_INT 81
8422: PUSH
8423: LD_INT 1
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 91
8432: PUSH
8433: LD_VAR 0 2
8437: PUSH
8438: LD_INT 10
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 69
8454: NOT
8455: IFFALSE 8480
// begin ComExitVehicle ( i ) ;
8457: LD_VAR 0 2
8461: PPUSH
8462: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8466: LD_VAR 0 2
8470: PPUSH
8471: LD_VAR 0 11
8475: PPUSH
8476: CALL_OW 189
// end ; end else
8480: GO 8674
// if GetLives ( i ) < 400 then
8482: LD_VAR 0 2
8486: PPUSH
8487: CALL_OW 256
8491: PUSH
8492: LD_INT 400
8494: LESS
8495: IFFALSE 8546
// begin usAttackers := usAttackers diff i ;
8497: LD_ADDR_EXP 47
8501: PUSH
8502: LD_EXP 47
8506: PUSH
8507: LD_VAR 0 2
8511: DIFF
8512: ST_TO_ADDR
// usForces := usForces union i ;
8513: LD_ADDR_EXP 44
8517: PUSH
8518: LD_EXP 44
8522: PUSH
8523: LD_VAR 0 2
8527: UNION
8528: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8529: LD_VAR 0 2
8533: PPUSH
8534: LD_INT 34
8536: PPUSH
8537: LD_INT 68
8539: PPUSH
8540: CALL_OW 111
// end else
8544: GO 8674
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8546: LD_VAR 0 10
8550: PPUSH
8551: LD_INT 58
8553: PUSH
8554: EMPTY
8555: LIST
8556: PUSH
8557: LD_INT 24
8559: PUSH
8560: LD_INT 1000
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 72
8575: PUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: CALL_OW 314
8585: NOT
8586: AND
8587: PUSH
8588: LD_INT 81
8590: PUSH
8591: LD_INT 1
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 91
8600: PUSH
8601: LD_VAR 0 2
8605: PUSH
8606: LD_INT 9
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 69
8622: OR
8623: IFFALSE 8674
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8625: LD_VAR 0 2
8629: PPUSH
8630: LD_VAR 0 10
8634: PPUSH
8635: LD_INT 58
8637: PUSH
8638: EMPTY
8639: LIST
8640: PUSH
8641: LD_INT 24
8643: PUSH
8644: LD_INT 250
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 72
8659: PPUSH
8660: LD_VAR 0 2
8664: PPUSH
8665: CALL_OW 74
8669: PPUSH
8670: CALL_OW 120
// end else
8674: GO 8961
// begin if veh and GetLives ( veh ) < 760 then
8676: LD_VAR 0 11
8680: PUSH
8681: LD_VAR 0 11
8685: PPUSH
8686: CALL_OW 256
8690: PUSH
8691: LD_INT 760
8693: LESS
8694: AND
8695: IFFALSE 8746
// begin SetTag ( i , 0 ) ;
8697: LD_VAR 0 2
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8709: LD_VAR 0 11
8713: PPUSH
8714: LD_VAR 0 6
8718: PUSH
8719: LD_INT 3
8721: ARRAY
8722: PUSH
8723: LD_INT 1
8725: ARRAY
8726: PPUSH
8727: LD_VAR 0 6
8731: PUSH
8732: LD_INT 3
8734: ARRAY
8735: PUSH
8736: LD_INT 2
8738: ARRAY
8739: PPUSH
8740: CALL_OW 111
// end else
8744: GO 8961
// if veh then
8746: LD_VAR 0 11
8750: IFFALSE 8961
// if tag <= attackFormula [ 4 ] then
8752: LD_VAR 0 4
8756: PUSH
8757: LD_VAR 0 6
8761: PUSH
8762: LD_INT 4
8764: ARRAY
8765: LESSEQUAL
8766: IFFALSE 8927
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8768: LD_VAR 0 11
8772: PPUSH
8773: LD_VAR 0 6
8777: PUSH
8778: LD_INT 4
8780: ARRAY
8781: PUSH
8782: LD_VAR 0 4
8786: ARRAY
8787: PUSH
8788: LD_INT 1
8790: ARRAY
8791: PPUSH
8792: LD_VAR 0 6
8796: PUSH
8797: LD_INT 4
8799: ARRAY
8800: PUSH
8801: LD_VAR 0 4
8805: ARRAY
8806: PUSH
8807: LD_INT 2
8809: ARRAY
8810: PPUSH
8811: CALL_OW 297
8815: PUSH
8816: LD_INT 6
8818: GREATER
8819: IFFALSE 8870
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8821: LD_VAR 0 11
8825: PPUSH
8826: LD_VAR 0 6
8830: PUSH
8831: LD_INT 4
8833: ARRAY
8834: PUSH
8835: LD_VAR 0 4
8839: ARRAY
8840: PUSH
8841: LD_INT 1
8843: ARRAY
8844: PPUSH
8845: LD_VAR 0 6
8849: PUSH
8850: LD_INT 4
8852: ARRAY
8853: PUSH
8854: LD_VAR 0 4
8858: ARRAY
8859: PUSH
8860: LD_INT 2
8862: ARRAY
8863: PPUSH
8864: CALL_OW 114
8868: GO 8925
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8870: LD_INT 81
8872: PUSH
8873: LD_INT 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 91
8882: PUSH
8883: LD_VAR 0 11
8887: PUSH
8888: LD_INT 10
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PPUSH
8900: CALL_OW 69
8904: NOT
8905: IFFALSE 8925
// SetTag ( i , tag + 1 ) ;
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_VAR 0 4
8916: PUSH
8917: LD_INT 1
8919: PLUS
8920: PPUSH
8921: CALL_OW 109
// end else
8925: GO 8961
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8927: LD_VAR 0 11
8931: PPUSH
8932: LD_INT 81
8934: PUSH
8935: LD_INT 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PPUSH
8942: CALL_OW 69
8946: PPUSH
8947: LD_VAR 0 2
8951: PPUSH
8952: CALL_OW 74
8956: PPUSH
8957: CALL_OW 115
// end ; end ;
8961: GO 8267
8963: POP
8964: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8965: LD_EXP 47
8969: PPUSH
8970: LD_INT 52
8972: PUSH
8973: EMPTY
8974: LIST
8975: PPUSH
8976: CALL_OW 72
8980: NOT
8981: IFFALSE 7446
// end ;
8983: LD_VAR 0 1
8987: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8988: LD_INT 22
8990: PUSH
8991: LD_INT 1
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 32
9000: PUSH
9001: LD_INT 1
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: IFFALSE 9093
9018: GO 9020
9020: DISABLE
9021: LD_INT 0
9023: PPUSH
// begin enable ;
9024: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9025: LD_ADDR_VAR 0 1
9029: PUSH
9030: LD_INT 22
9032: PUSH
9033: LD_INT 1
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 32
9042: PUSH
9043: LD_INT 1
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 69
9058: PUSH
9059: FOR_IN
9060: IFFALSE 9091
// if GetFuel ( i ) < 10 then
9062: LD_VAR 0 1
9066: PPUSH
9067: CALL_OW 261
9071: PUSH
9072: LD_INT 10
9074: LESS
9075: IFFALSE 9089
// SetFuel ( i , 10 ) ;
9077: LD_VAR 0 1
9081: PPUSH
9082: LD_INT 10
9084: PPUSH
9085: CALL_OW 240
9089: GO 9059
9091: POP
9092: POP
// end ; end_of_file
9093: PPOPN 1
9095: END
// export function Action ; var hasAll , i , tmp ; begin
9096: LD_INT 0
9098: PPUSH
9099: PPUSH
9100: PPUSH
9101: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9102: LD_ADDR_VAR 0 2
9106: PUSH
9107: LD_INT 22
9109: PUSH
9110: LD_INT 2
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 21
9119: PUSH
9120: LD_INT 1
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 23
9129: PUSH
9130: LD_INT 2
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 69
9146: PUSH
9147: LD_INT 7
9149: GREATEREQUAL
9150: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9151: LD_VAR 0 2
9155: PPUSH
9156: LD_STRING 03_HasAll
9158: PPUSH
9159: CALL_OW 39
// Video ( true ) ;
9163: LD_INT 1
9165: PPUSH
9166: CALL 74089 0 1
// CenterNowOnUnits ( Heike ) ;
9170: LD_EXP 28
9174: PPUSH
9175: CALL_OW 87
// wait ( 0 0$2 ) ;
9179: LD_INT 70
9181: PPUSH
9182: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9186: LD_EXP 36
9190: PPUSH
9191: LD_STRING DF-1-start
9193: PPUSH
9194: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9198: LD_EXP 28
9202: PPUSH
9203: LD_EXP 36
9207: PPUSH
9208: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9212: LD_EXP 28
9216: PPUSH
9217: LD_STRING DH-1-start
9219: PPUSH
9220: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9224: LD_EXP 37
9228: PPUSH
9229: LD_INT 92
9231: PPUSH
9232: LD_INT 21
9234: PPUSH
9235: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9239: LD_EXP 32
9243: PPUSH
9244: LD_INT 94
9246: PPUSH
9247: LD_INT 23
9249: PPUSH
9250: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9254: LD_EXP 40
9258: PUSH
9259: LD_INT 1
9261: ARRAY
9262: PPUSH
9263: LD_INT 90
9265: PPUSH
9266: LD_INT 23
9268: PPUSH
9269: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9273: LD_EXP 40
9277: PUSH
9278: LD_INT 2
9280: ARRAY
9281: PPUSH
9282: LD_INT 93
9284: PPUSH
9285: LD_INT 25
9287: PPUSH
9288: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9292: LD_EXP 40
9296: PPUSH
9297: LD_EXP 37
9301: PPUSH
9302: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9306: LD_EXP 37
9310: PUSH
9311: LD_EXP 32
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PPUSH
9320: LD_EXP 28
9324: PPUSH
9325: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9329: LD_EXP 28
9333: PPUSH
9334: LD_EXP 37
9338: PPUSH
9339: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9343: LD_INT 35
9345: PPUSH
9346: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9350: LD_EXP 37
9354: PPUSH
9355: LD_INT 92
9357: PPUSH
9358: LD_INT 21
9360: PPUSH
9361: CALL_OW 307
9365: IFFALSE 9343
// Say ( Omar , DO-1-start ) ;
9367: LD_EXP 37
9371: PPUSH
9372: LD_STRING DO-1-start
9374: PPUSH
9375: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9379: LD_EXP 28
9383: PPUSH
9384: LD_STRING DH-2-start
9386: PPUSH
9387: CALL_OW 88
// if hasAll then
9391: LD_VAR 0 2
9395: IFFALSE 9523
// begin Say ( Omar , DO-2-start ) ;
9397: LD_EXP 37
9401: PPUSH
9402: LD_STRING DO-2-start
9404: PPUSH
9405: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9409: LD_EXP 37
9413: PPUSH
9414: LD_STRING DO-3-start
9416: PPUSH
9417: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9421: LD_EXP 28
9425: PPUSH
9426: LD_STRING DH-3-start
9428: PPUSH
9429: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9433: LD_EXP 36
9437: PPUSH
9438: LD_STRING DF-2-start
9440: PPUSH
9441: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9445: LD_EXP 37
9449: PPUSH
9450: LD_EXP 36
9454: PPUSH
9455: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9459: LD_EXP 37
9463: PPUSH
9464: LD_STRING DO-4-start
9466: PPUSH
9467: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9471: LD_EXP 36
9475: PPUSH
9476: LD_STRING DF-3-start
9478: PPUSH
9479: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9483: LD_EXP 37
9487: PPUSH
9488: LD_STRING DO-5-start
9490: PPUSH
9491: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9495: LD_EXP 36
9499: PPUSH
9500: LD_STRING DF-4-start
9502: PPUSH
9503: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9507: LD_EXP 37
9511: PPUSH
9512: LD_EXP 28
9516: PPUSH
9517: CALL_OW 119
// end else
9521: GO 9623
// begin Say ( Omar , DO-2-start-a ) ;
9523: LD_EXP 37
9527: PPUSH
9528: LD_STRING DO-2-start-a
9530: PPUSH
9531: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9535: LD_EXP 37
9539: PPUSH
9540: LD_STRING DO-3-start-a
9542: PPUSH
9543: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9547: LD_EXP 28
9551: PPUSH
9552: LD_STRING DH-3-start-a
9554: PPUSH
9555: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9559: LD_EXP 36
9563: PPUSH
9564: LD_STRING DF-2-start-a
9566: PPUSH
9567: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9571: LD_EXP 37
9575: PPUSH
9576: LD_EXP 36
9580: PPUSH
9581: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9585: LD_EXP 37
9589: PPUSH
9590: LD_STRING DO-4-start-a
9592: PPUSH
9593: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9597: LD_EXP 36
9601: PPUSH
9602: LD_STRING DF-3-start-a
9604: PPUSH
9605: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9609: LD_EXP 37
9613: PPUSH
9614: LD_EXP 28
9618: PPUSH
9619: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9623: LD_INT 10
9625: PPUSH
9626: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9630: LD_EXP 37
9634: PPUSH
9635: LD_STRING DO-1-mission
9637: PPUSH
9638: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING DO-2-mission
9649: PPUSH
9650: CALL_OW 88
// if not hasAll then
9654: LD_VAR 0 2
9658: NOT
9659: IFFALSE 9673
// Say ( Omar , DO-3-mission ) ;
9661: LD_EXP 37
9665: PPUSH
9666: LD_STRING DO-3-mission
9668: PPUSH
9669: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9673: LD_EXP 37
9677: PPUSH
9678: LD_STRING DO-4-mission
9680: PPUSH
9681: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9685: LD_EXP 28
9689: PPUSH
9690: LD_STRING DH-1-mission
9692: PPUSH
9693: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9697: LD_EXP 36
9701: PPUSH
9702: LD_STRING DF-1-mission
9704: PPUSH
9705: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9709: LD_EXP 37
9713: PPUSH
9714: LD_STRING DO-5-mission
9716: PPUSH
9717: CALL_OW 88
// if not hasAll then
9721: LD_VAR 0 2
9725: NOT
9726: IFFALSE 9861
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9728: LD_ADDR_VAR 0 4
9732: PUSH
9733: LD_INT 22
9735: PUSH
9736: LD_INT 2
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 21
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 23
9755: PUSH
9756: LD_INT 2
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PPUSH
9768: CALL_OW 69
9772: ST_TO_ADDR
// for i := 7 downto tmp do
9773: LD_ADDR_VAR 0 3
9777: PUSH
9778: DOUBLE
9779: LD_INT 7
9781: INC
9782: ST_TO_ADDR
9783: LD_VAR 0 4
9787: PUSH
9788: FOR_DOWNTO
9789: IFFALSE 9859
// begin if omarSquad < 3 then
9791: LD_EXP 40
9795: PUSH
9796: LD_INT 3
9798: LESS
9799: IFFALSE 9803
// break ;
9801: GO 9859
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9803: LD_EXP 40
9807: PUSH
9808: LD_INT 3
9810: ARRAY
9811: PPUSH
9812: LD_INT 2
9814: PPUSH
9815: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9819: LD_ADDR_EXP 42
9823: PUSH
9824: LD_EXP 42
9828: PUSH
9829: LD_EXP 40
9833: PUSH
9834: LD_INT 3
9836: ARRAY
9837: UNION
9838: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9839: LD_ADDR_EXP 40
9843: PUSH
9844: LD_EXP 40
9848: PPUSH
9849: LD_INT 3
9851: PPUSH
9852: CALL_OW 3
9856: ST_TO_ADDR
// end ;
9857: GO 9788
9859: POP
9860: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9861: LD_EXP 37
9865: PUSH
9866: LD_EXP 40
9870: ADD
9871: PPUSH
9872: LD_INT 103
9874: PPUSH
9875: LD_INT 9
9877: PPUSH
9878: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9882: LD_VAR 0 2
9886: PUSH
9887: LD_EXP 33
9891: PPUSH
9892: CALL_OW 302
9896: AND
9897: IFFALSE 9958
// begin wait ( 0 0$3 ) ;
9899: LD_INT 105
9901: PPUSH
9902: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9906: LD_EXP 33
9910: PPUSH
9911: LD_EXP 36
9915: PPUSH
9916: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9920: LD_EXP 33
9924: PPUSH
9925: LD_STRING DK-1-side
9927: PPUSH
9928: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9932: LD_EXP 36
9936: PPUSH
9937: LD_EXP 33
9941: PPUSH
9942: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9946: LD_EXP 36
9950: PPUSH
9951: LD_STRING DF-1-side
9953: PPUSH
9954: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9958: LD_INT 22
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: PPUSH
9973: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 39
9986: ADD
9987: PPUSH
9988: LD_INT 108
9990: PPUSH
9991: LD_INT 62
9993: PPUSH
9994: CALL_OW 111
// gameStarted := true ;
9998: LD_ADDR_EXP 3
10002: PUSH
10003: LD_INT 1
10005: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10006: LD_INT 105
10008: PPUSH
10009: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10013: LD_EXP 28
10017: PPUSH
10018: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10022: LD_EXP 28
10026: PPUSH
10027: LD_EXP 32
10031: PPUSH
10032: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 2
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PPUSH
10046: CALL_OW 69
10050: PUSH
10051: LD_EXP 28
10055: DIFF
10056: PPUSH
10057: LD_EXP 28
10061: PPUSH
10062: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10066: LD_EXP 28
10070: PPUSH
10071: LD_STRING DH-1-explore
10073: PPUSH
10074: CALL_OW 88
// if Givi then
10078: LD_EXP 29
10082: IFFALSE 10098
// Say ( Givi , DG-1-explore ) else
10084: LD_EXP 29
10088: PPUSH
10089: LD_STRING DG-1-explore
10091: PPUSH
10092: CALL_OW 88
10096: GO 10135
// if heikeSecondSquad then
10098: LD_EXP 42
10102: IFFALSE 10135
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10104: LD_EXP 42
10108: PPUSH
10109: LD_INT 26
10111: PUSH
10112: LD_INT 1
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PPUSH
10119: CALL_OW 72
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PPUSH
10128: LD_STRING DArm-1-explore
10130: PPUSH
10131: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10135: LD_EXP 32
10139: PPUSH
10140: LD_STRING DA-1-explore
10142: PPUSH
10143: CALL_OW 88
// if Sophia then
10147: LD_EXP 34
10151: IFFALSE 10229
// begin Say ( Sophia , DS-2-explore ) ;
10153: LD_EXP 34
10157: PPUSH
10158: LD_STRING DS-2-explore
10160: PPUSH
10161: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10165: LD_EXP 32
10169: PPUSH
10170: LD_STRING DA-2-explore
10172: PPUSH
10173: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10177: LD_EXP 34
10181: PPUSH
10182: LD_EXP 32
10186: PPUSH
10187: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10191: LD_EXP 32
10195: PPUSH
10196: LD_EXP 34
10200: PPUSH
10201: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10205: LD_EXP 34
10209: PPUSH
10210: LD_STRING DS-3-explore
10212: PPUSH
10213: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10217: LD_EXP 32
10221: PPUSH
10222: LD_STRING DA-3-explore
10224: PPUSH
10225: CALL_OW 88
// end ; if Mike then
10229: LD_EXP 30
10233: IFFALSE 10289
// begin Say ( Mike , DM-1-explore ) ;
10235: LD_EXP 30
10239: PPUSH
10240: LD_STRING DM-1-explore
10242: PPUSH
10243: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10247: LD_EXP 28
10251: PPUSH
10252: LD_STRING DH-2-explore
10254: PPUSH
10255: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10259: LD_EXP 30
10263: PPUSH
10264: LD_STRING DM-2-explore
10266: PPUSH
10267: CALL_OW 88
// if Kaia then
10271: LD_EXP 33
10275: IFFALSE 10289
// Say ( Kaia , DK-1-explore ) ;
10277: LD_EXP 33
10281: PPUSH
10282: LD_STRING DK-1-explore
10284: PPUSH
10285: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10289: LD_INT 22
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: PPUSH
10304: CALL_OW 139
// Video ( false ) ;
10308: LD_INT 0
10310: PPUSH
10311: CALL 74089 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10315: LD_STRING BuildBase
10317: PPUSH
10318: CALL_OW 337
// SaveForQuickRestart ;
10322: CALL_OW 22
// end ;
10326: LD_VAR 0 1
10330: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10331: LD_EXP 5
10335: NOT
10336: PUSH
10337: LD_EXP 6
10341: NOT
10342: AND
10343: PUSH
10344: LD_INT 5
10346: PPUSH
10347: LD_INT 22
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 70
10361: AND
10362: PUSH
10363: LD_EXP 6
10367: NOT
10368: AND
10369: IFFALSE 10454
10371: GO 10373
10373: DISABLE
// begin if Mike then
10374: LD_EXP 30
10378: IFFALSE 10394
// Say ( Mike , DM-1-scout ) else
10380: LD_EXP 30
10384: PPUSH
10385: LD_STRING DM-1-scout
10387: PPUSH
10388: CALL_OW 88
10392: GO 10425
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10394: LD_EXP 42
10398: PPUSH
10399: LD_INT 26
10401: PUSH
10402: LD_INT 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PPUSH
10409: CALL_OW 72
10413: PUSH
10414: LD_INT 1
10416: ARRAY
10417: PPUSH
10418: LD_STRING DArm-1-explore
10420: PPUSH
10421: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10425: LD_INT 54
10427: PPUSH
10428: LD_INT 35
10430: PPUSH
10431: LD_INT 2
10433: PPUSH
10434: LD_INT 1
10436: PPUSH
10437: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10441: LD_INT 54
10443: PPUSH
10444: LD_INT 35
10446: PPUSH
10447: LD_INT 2
10449: PPUSH
10450: CALL_OW 331
// end ;
10454: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10455: LD_INT 6
10457: PPUSH
10458: LD_INT 22
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 70
10472: PUSH
10473: LD_EXP 6
10477: NOT
10478: AND
10479: IFFALSE 10733
10481: GO 10483
10483: DISABLE
10484: LD_INT 0
10486: PPUSH
10487: PPUSH
10488: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10489: LD_ADDR_VAR 0 1
10493: PUSH
10494: LD_EXP 42
10498: PPUSH
10499: LD_INT 26
10501: PUSH
10502: LD_INT 1
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PPUSH
10509: CALL_OW 72
10513: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10514: LD_ADDR_VAR 0 2
10518: PUSH
10519: LD_EXP 42
10523: PPUSH
10524: LD_INT 26
10526: PUSH
10527: LD_INT 2
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PPUSH
10534: CALL_OW 72
10538: ST_TO_ADDR
// DialogueOn ;
10539: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10543: LD_INT 36
10545: PPUSH
10546: LD_INT 22
10548: PPUSH
10549: LD_INT 2
10551: PPUSH
10552: LD_INT 8
10554: PPUSH
10555: CALL_OW 330
// dwait ( 0 0$1 ) ;
10559: LD_INT 35
10561: PPUSH
10562: CALL_OW 68
// speakerOk := false ;
10566: LD_ADDR_VAR 0 3
10570: PUSH
10571: LD_INT 0
10573: ST_TO_ADDR
// if Mike then
10574: LD_EXP 30
10578: IFFALSE 10600
// speakerOk := Say ( Mike , DM-1-spot ) else
10580: LD_ADDR_VAR 0 3
10584: PUSH
10585: LD_EXP 30
10589: PPUSH
10590: LD_STRING DM-1-spot
10592: PPUSH
10593: CALL_OW 88
10597: ST_TO_ADDR
10598: GO 10628
// if randomMen then
10600: LD_VAR 0 1
10604: IFFALSE 10628
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10606: LD_ADDR_VAR 0 3
10610: PUSH
10611: LD_VAR 0 1
10615: PUSH
10616: LD_INT 1
10618: ARRAY
10619: PPUSH
10620: LD_STRING DArm-1-spot-a
10622: PPUSH
10623: CALL_OW 88
10627: ST_TO_ADDR
// if speakerOk then
10628: LD_VAR 0 3
10632: IFFALSE 10676
// begin if Givi then
10634: LD_EXP 29
10638: IFFALSE 10654
// Say ( Givi , DG-1-spot ) else
10640: LD_EXP 29
10644: PPUSH
10645: LD_STRING DG-1-spot
10647: PPUSH
10648: CALL_OW 88
10652: GO 10676
// if randomWomen then
10654: LD_VAR 0 2
10658: IFFALSE 10676
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10660: LD_VAR 0 2
10664: PUSH
10665: LD_INT 1
10667: ARRAY
10668: PPUSH
10669: LD_STRING DArf-1-spot-a
10671: PPUSH
10672: CALL_OW 88
// end ; if Mike then
10676: LD_EXP 30
10680: IFFALSE 10696
// Say ( Heike , DH-1-spot ) else
10682: LD_EXP 28
10686: PPUSH
10687: LD_STRING DH-1-spot
10689: PPUSH
10690: CALL_OW 88
10694: GO 10708
// Say ( Heike , DH-1-spot-a ) ;
10696: LD_EXP 28
10700: PPUSH
10701: LD_STRING DH-1-spot-a
10703: PPUSH
10704: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10708: LD_INT 36
10710: PPUSH
10711: LD_INT 22
10713: PPUSH
10714: LD_INT 2
10716: PPUSH
10717: CALL_OW 331
// DialogueOff ;
10721: CALL_OW 7
// americanBaseSpoted := true ;
10725: LD_ADDR_EXP 5
10729: PUSH
10730: LD_INT 1
10732: ST_TO_ADDR
// end ;
10733: PPOPN 3
10735: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10736: LD_EXP 5
10740: NOT
10741: PUSH
10742: LD_INT 22
10744: PUSH
10745: LD_INT 2
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 101
10754: PUSH
10755: LD_INT 1
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 69
10770: AND
10771: PUSH
10772: LD_EXP 6
10776: NOT
10777: AND
10778: IFFALSE 10864
10780: GO 10782
10782: DISABLE
10783: LD_INT 0
10785: PPUSH
// begin americanBaseSpoted := true ;
10786: LD_ADDR_EXP 5
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10794: LD_ADDR_VAR 0 1
10798: PUSH
10799: LD_EXP 42
10803: PPUSH
10804: LD_INT 26
10806: PUSH
10807: LD_INT 1
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 72
10818: ST_TO_ADDR
// if not randomMen then
10819: LD_VAR 0 1
10823: NOT
10824: IFFALSE 10828
// exit ;
10826: GO 10864
// DialogueOn ;
10828: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10832: LD_VAR 0 1
10836: PUSH
10837: LD_INT 1
10839: ARRAY
10840: PPUSH
10841: LD_STRING DArm-1-spot-a
10843: PPUSH
10844: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10848: LD_EXP 28
10852: PPUSH
10853: LD_STRING DH-1-spot-a
10855: PPUSH
10856: CALL_OW 88
// DialogueOff ;
10860: CALL_OW 7
// end ;
10864: PPOPN 1
10866: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10867: LD_INT 11
10869: PPUSH
10870: CALL_OW 255
10874: PUSH
10875: LD_INT 2
10877: EQUAL
10878: PUSH
10879: LD_INT 7
10881: PPUSH
10882: LD_INT 22
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: LD_INT 50
10897: PUSH
10898: EMPTY
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 30
10907: PUSH
10908: LD_INT 31
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: PPUSH
10920: CALL_OW 70
10924: OR
10925: PUSH
10926: LD_INT 7
10928: PPUSH
10929: LD_INT 22
10931: PUSH
10932: LD_INT 2
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PPUSH
10939: CALL_OW 70
10943: PUSH
10944: LD_INT 1
10946: GREATER
10947: OR
10948: PUSH
10949: LD_EXP 44
10953: PUSH
10954: LD_INT 4
10956: LESSEQUAL
10957: OR
10958: IFFALSE 11537
10960: GO 10962
10962: DISABLE
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
// begin wait ( 0 0$3 ) ;
10967: LD_INT 105
10969: PPUSH
10970: CALL_OW 67
// americanStartRun := true ;
10974: LD_ADDR_EXP 14
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// if IsOk ( usCommander ) then
10982: LD_EXP 45
10986: PPUSH
10987: CALL_OW 302
10991: IFFALSE 11021
// begin usForces := usForces union usCommander ;
10993: LD_ADDR_EXP 44
10997: PUSH
10998: LD_EXP 44
11002: PUSH
11003: LD_EXP 45
11007: UNION
11008: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11009: LD_EXP 45
11013: PPUSH
11014: LD_STRING DUsm-1-assault
11016: PPUSH
11017: CALL_OW 88
// end ; for i in usForces do
11021: LD_ADDR_VAR 0 1
11025: PUSH
11026: LD_EXP 44
11030: PUSH
11031: FOR_IN
11032: IFFALSE 11078
// begin if IsInUnit ( i ) then
11034: LD_VAR 0 1
11038: PPUSH
11039: CALL_OW 310
11043: IFFALSE 11054
// ComExitBuilding ( i ) ;
11045: LD_VAR 0 1
11049: PPUSH
11050: CALL_OW 122
// wait ( 3 ) ;
11054: LD_INT 3
11056: PPUSH
11057: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11061: LD_VAR 0 1
11065: PPUSH
11066: LD_INT 34
11068: PPUSH
11069: LD_INT 67
11071: PPUSH
11072: CALL_OW 111
// end ;
11076: GO 11031
11078: POP
11079: POP
// Say ( Heike , DH-1-assault ) ;
11080: LD_EXP 28
11084: PPUSH
11085: LD_STRING DH-1-assault
11087: PPUSH
11088: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11092: LD_INT 35
11094: PPUSH
11095: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11099: LD_VAR 0 1
11103: PPUSH
11104: LD_INT 34
11106: PPUSH
11107: LD_INT 67
11109: PPUSH
11110: CALL_OW 111
// until not usForces ;
11114: LD_EXP 44
11118: NOT
11119: IFFALSE 11092
// music_nat := 2 ;
11121: LD_ADDR_OWVAR 71
11125: PUSH
11126: LD_INT 2
11128: ST_TO_ADDR
// music_class := music_victory ;
11129: LD_ADDR_OWVAR 72
11133: PUSH
11134: LD_INT 4
11136: ST_TO_ADDR
// if not americanHasEscaped then
11137: LD_EXP 8
11141: NOT
11142: IFFALSE 11163
// begin Say ( Heike , DH-2-assault ) ;
11144: LD_EXP 28
11148: PPUSH
11149: LD_STRING DH-2-assault
11151: PPUSH
11152: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11156: LD_STRING ACH_CLEAN
11158: PPUSH
11159: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11163: LD_INT 70
11165: PPUSH
11166: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11170: LD_INT 35
11172: PPUSH
11173: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11177: LD_INT 22
11179: PUSH
11180: LD_INT 2
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 21
11189: PUSH
11190: LD_INT 1
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 3
11199: PUSH
11200: LD_INT 50
11202: PUSH
11203: EMPTY
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: PPUSH
11215: CALL_OW 69
11219: NOT
11220: IFFALSE 11170
// InGameOn ;
11222: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11226: LD_INT 11
11228: PPUSH
11229: CALL_OW 255
11233: PUSH
11234: LD_INT 2
11236: EQUAL
11237: NOT
11238: IFFALSE 11250
// SetSide ( usDepot , 2 ) ;
11240: LD_INT 11
11242: PPUSH
11243: LD_INT 2
11245: PPUSH
11246: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11250: LD_INT 35
11252: PPUSH
11253: LD_INT 22
11255: PPUSH
11256: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11260: LD_EXP 28
11264: PPUSH
11265: LD_INT 35
11267: PPUSH
11268: LD_INT 22
11270: PPUSH
11271: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11275: LD_EXP 28
11279: PPUSH
11280: LD_INT 38
11282: PPUSH
11283: LD_INT 25
11285: PPUSH
11286: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11290: LD_EXP 41
11294: PUSH
11295: LD_EXP 42
11299: UNION
11300: PPUSH
11301: LD_INT 39
11303: PPUSH
11304: LD_INT 26
11306: PPUSH
11307: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11311: LD_EXP 41
11315: PUSH
11316: LD_EXP 42
11320: UNION
11321: PPUSH
11322: LD_EXP 28
11326: PPUSH
11327: CALL_OW 179
// p := 0 ;
11331: LD_ADDR_VAR 0 2
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11339: LD_INT 35
11341: PPUSH
11342: CALL_OW 67
// p := p + 1 ;
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: LD_VAR 0 2
11355: PUSH
11356: LD_INT 1
11358: PLUS
11359: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11360: LD_EXP 28
11364: PPUSH
11365: CALL_OW 314
11369: NOT
11370: PUSH
11371: LD_VAR 0 2
11375: PUSH
11376: LD_INT 10
11378: GREATER
11379: OR
11380: IFFALSE 11339
// Say ( Heike , DH-1-capture ) ;
11382: LD_EXP 28
11386: PPUSH
11387: LD_STRING DH-1-capture
11389: PPUSH
11390: CALL_OW 88
// if Markov then
11394: LD_EXP 35
11398: IFFALSE 11412
// Say ( Markov , DMar-1-capture ) ;
11400: LD_EXP 35
11404: PPUSH
11405: LD_STRING DMar-1-capture
11407: PPUSH
11408: CALL_OW 88
// if Sophia then
11412: LD_EXP 34
11416: IFFALSE 11442
// begin Say ( Heike , DH-2-capture ) ;
11418: LD_EXP 28
11422: PPUSH
11423: LD_STRING DH-2-capture
11425: PPUSH
11426: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11430: LD_EXP 34
11434: PPUSH
11435: LD_STRING DS-1-capture
11437: PPUSH
11438: CALL_OW 88
// end ; InGameOff ;
11442: CALL_OW 9
// music_nat := music_auto ;
11446: LD_ADDR_OWVAR 71
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// music_class := music_auto ;
11454: LD_ADDR_OWVAR 72
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11462: LD_STRING ConstructBase
11464: PPUSH
11465: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: LD_INT 22
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 21
11486: PUSH
11487: LD_INT 3
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PPUSH
11498: CALL_OW 69
11502: PUSH
11503: FOR_IN
11504: IFFALSE 11520
// SetSide ( i , 2 ) ;
11506: LD_VAR 0 1
11510: PPUSH
11511: LD_INT 2
11513: PPUSH
11514: CALL_OW 235
11518: GO 11503
11520: POP
11521: POP
// wait ( 0 0$3 ) ;
11522: LD_INT 105
11524: PPUSH
11525: CALL_OW 67
// americanBaseCaptured := true ;
11529: LD_ADDR_EXP 6
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// end ;
11537: PPOPN 2
11539: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11540: LD_EXP 13
11544: PUSH
11545: LD_INT 3
11547: GREATEREQUAL
11548: IFFALSE 11560
11550: GO 11552
11552: DISABLE
// SetAchievement ( ACH_ENG ) ;
11553: LD_STRING ACH_ENG
11555: PPUSH
11556: CALL_OW 543
11560: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11561: LD_INT 22
11563: PUSH
11564: LD_INT 2
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 25
11573: PUSH
11574: LD_INT 15
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PPUSH
11585: CALL_OW 69
11589: PUSH
11590: LD_INT 4
11592: GREATEREQUAL
11593: IFFALSE 11605
11595: GO 11597
11597: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11598: LD_STRING ACH_APEGEN
11600: PPUSH
11601: CALL_OW 543
11605: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11606: LD_INT 22
11608: PUSH
11609: LD_INT 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 30
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 3
11628: PUSH
11629: LD_INT 57
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: PPUSH
11644: CALL_OW 69
11648: IFFALSE 11913
11650: GO 11652
11652: DISABLE
// begin workshopBuilded := true ;
11653: LD_ADDR_EXP 10
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// if IsOk ( Markov ) then
11661: LD_EXP 35
11665: PPUSH
11666: CALL_OW 302
11670: IFFALSE 11729
// begin Say ( Heike , DH-1-shop-a ) ;
11672: LD_EXP 28
11676: PPUSH
11677: LD_STRING DH-1-shop-a
11679: PPUSH
11680: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11684: LD_INT 47
11686: PPUSH
11687: LD_INT 2
11689: PPUSH
11690: CALL_OW 321
11694: PUSH
11695: LD_INT 2
11697: EQUAL
11698: PUSH
11699: LD_INT 45
11701: PPUSH
11702: LD_INT 2
11704: PPUSH
11705: CALL_OW 321
11709: PUSH
11710: LD_INT 2
11712: EQUAL
11713: AND
11714: NOT
11715: IFFALSE 11729
// Say ( Markov , DMar-1-shop-a ) ;
11717: LD_EXP 35
11721: PPUSH
11722: LD_STRING DMar-1-shop-a
11724: PPUSH
11725: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11729: LD_INT 35
11731: PPUSH
11732: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11736: LD_INT 47
11738: PPUSH
11739: LD_INT 2
11741: PPUSH
11742: CALL_OW 321
11746: PUSH
11747: LD_INT 2
11749: EQUAL
11750: PUSH
11751: LD_INT 45
11753: PPUSH
11754: LD_INT 2
11756: PPUSH
11757: CALL_OW 321
11761: PUSH
11762: LD_INT 2
11764: EQUAL
11765: OR
11766: IFFALSE 11729
// if IsOk ( Markov ) and IsOk ( Heike ) then
11768: LD_EXP 35
11772: PPUSH
11773: CALL_OW 302
11777: PUSH
11778: LD_EXP 28
11782: PPUSH
11783: CALL_OW 302
11787: AND
11788: IFFALSE 11906
// begin DialogueOn ;
11790: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11794: LD_EXP 35
11798: PPUSH
11799: LD_STRING DMar-1-shop
11801: PPUSH
11802: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11806: LD_EXP 28
11810: PPUSH
11811: LD_STRING DH-1-shop
11813: PPUSH
11814: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11818: LD_EXP 35
11822: PPUSH
11823: LD_STRING DMar-2-shop
11825: PPUSH
11826: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11830: LD_EXP 35
11834: PPUSH
11835: LD_STRING DMar-3-shop
11837: PPUSH
11838: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11842: LD_EXP 28
11846: PPUSH
11847: LD_STRING DH-2-shop
11849: PPUSH
11850: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11854: LD_EXP 35
11858: PPUSH
11859: LD_STRING DMar-4-shop
11861: PPUSH
11862: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11866: LD_EXP 28
11870: PPUSH
11871: LD_STRING DH-3-shop
11873: PPUSH
11874: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11878: LD_EXP 35
11882: PPUSH
11883: LD_STRING DMar-5-shop
11885: PPUSH
11886: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11890: LD_EXP 28
11894: PPUSH
11895: LD_STRING DH-4-shop
11897: PPUSH
11898: CALL_OW 88
// DialogueOff ;
11902: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
11906: LD_STRING ConstructVeh
11908: PPUSH
11909: CALL_OW 337
// end ;
11913: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11914: LD_INT 2
11916: PPUSH
11917: LD_INT 2
11919: PPUSH
11920: LD_INT 1
11922: PPUSH
11923: CALL 37443 0 3
11927: PUSH
11928: LD_INT 0
11930: EQUAL
11931: IFFALSE 11943
11933: GO 11935
11935: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11936: LD_STRING Techs
11938: PPUSH
11939: CALL_OW 337
11943: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11944: LD_EXP 35
11948: PPUSH
11949: CALL_OW 302
11953: PUSH
11954: LD_INT 22
11956: PUSH
11957: LD_INT 2
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 2
11966: PUSH
11967: LD_INT 34
11969: PUSH
11970: LD_INT 22
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 35
11979: PUSH
11980: LD_INT 22
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PPUSH
11996: CALL_OW 69
12000: AND
12001: IFFALSE 12108
12003: GO 12005
12005: DISABLE
// begin DialogueOn ;
12006: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12010: LD_INT 22
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 2
12022: PUSH
12023: LD_INT 34
12025: PUSH
12026: LD_INT 22
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 35
12035: PUSH
12036: LD_INT 22
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PPUSH
12052: CALL_OW 69
12056: PPUSH
12057: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12061: LD_INT 10
12063: PPUSH
12064: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12068: LD_EXP 28
12072: PPUSH
12073: LD_STRING DH-1-bal
12075: PPUSH
12076: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12080: LD_EXP 35
12084: PPUSH
12085: LD_STRING DMar-1-bal
12087: PPUSH
12088: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12092: LD_EXP 28
12096: PPUSH
12097: LD_STRING DH-2-bal
12099: PPUSH
12100: CALL_OW 88
// DialogueOff ;
12104: CALL_OW 7
// end ;
12108: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12109: LD_EXP 32
12113: PPUSH
12114: CALL_OW 302
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_INT 2
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 30
12131: PUSH
12132: LD_INT 6
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: AND
12148: IFFALSE 12209
12150: GO 12152
12152: DISABLE
// begin DialogueOn ;
12153: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12157: LD_EXP 32
12161: PPUSH
12162: LD_STRING DA-1-lab
12164: PPUSH
12165: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12169: LD_EXP 28
12173: PPUSH
12174: LD_STRING DH-1-lab
12176: PPUSH
12177: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12181: LD_EXP 32
12185: PPUSH
12186: LD_STRING DA-2-lab
12188: PPUSH
12189: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12193: LD_EXP 28
12197: PPUSH
12198: LD_STRING DH-2-lab
12200: PPUSH
12201: CALL_OW 88
// DialogueOff ;
12205: CALL_OW 7
// end ;
12209: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12210: LD_EXP 33
12214: PPUSH
12215: CALL_OW 302
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 25
12232: PUSH
12233: LD_INT 15
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: AND
12249: PUSH
12250: LD_INT 81
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: NOT
12265: AND
12266: IFFALSE 12448
12268: GO 12270
12270: DISABLE
12271: LD_INT 0
12273: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12274: LD_ADDR_VAR 0 1
12278: PUSH
12279: LD_INT 22
12281: PUSH
12282: LD_INT 2
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 25
12291: PUSH
12292: LD_INT 15
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PPUSH
12303: CALL_OW 69
12307: ST_TO_ADDR
// InGameOn ;
12308: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12312: LD_VAR 0 1
12316: PUSH
12317: LD_INT 1
12319: ARRAY
12320: PPUSH
12321: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12325: LD_VAR 0 1
12329: PUSH
12330: LD_INT 1
12332: ARRAY
12333: PPUSH
12334: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12338: LD_EXP 33
12342: PPUSH
12343: LD_STRING DK-1-apesol
12345: PPUSH
12346: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12350: LD_VAR 0 1
12354: PUSH
12355: LD_INT 1
12357: ARRAY
12358: PPUSH
12359: LD_INT 35
12361: PPUSH
12362: LD_INT 28
12364: PPUSH
12365: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12369: LD_VAR 0 1
12373: PUSH
12374: LD_INT 1
12376: ARRAY
12377: PPUSH
12378: LD_INT 36
12380: PPUSH
12381: LD_INT 17
12383: PPUSH
12384: CALL_OW 171
// DialogueOn ;
12388: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12392: LD_EXP 32
12396: PPUSH
12397: LD_STRING DA-1-apesol
12399: PPUSH
12400: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12404: LD_EXP 33
12408: PPUSH
12409: LD_STRING DK-2-apesol
12411: PPUSH
12412: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12416: LD_EXP 32
12420: PPUSH
12421: LD_STRING DA-2-apesol
12423: PPUSH
12424: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12428: LD_EXP 33
12432: PPUSH
12433: LD_STRING DK-3-apesol
12435: PPUSH
12436: CALL_OW 88
// DialogueOff ;
12440: CALL_OW 7
// InGameOff ;
12444: CALL_OW 9
// end ;
12448: PPOPN 1
12450: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12451: LD_EXP 34
12455: PPUSH
12456: CALL_OW 302
12460: PUSH
12461: LD_INT 22
12463: PUSH
12464: LD_INT 2
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 25
12473: PUSH
12474: LD_INT 16
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PPUSH
12485: CALL_OW 69
12489: AND
12490: PUSH
12491: LD_INT 81
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PPUSH
12501: CALL_OW 69
12505: NOT
12506: AND
12507: IFFALSE 12792
12509: GO 12511
12511: DISABLE
12512: LD_INT 0
12514: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12515: LD_ADDR_VAR 0 1
12519: PUSH
12520: LD_INT 22
12522: PUSH
12523: LD_INT 2
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 25
12532: PUSH
12533: LD_INT 16
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PPUSH
12544: CALL_OW 69
12548: ST_TO_ADDR
// InGameOn ;
12549: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12553: LD_INT 35
12555: PPUSH
12556: LD_INT 22
12558: PPUSH
12559: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12563: LD_INT 5
12565: PPUSH
12566: LD_INT 35
12568: PPUSH
12569: LD_INT 22
12571: PPUSH
12572: LD_INT 1
12574: PPUSH
12575: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12579: LD_EXP 34
12583: PPUSH
12584: LD_VAR 0 1
12588: PUSH
12589: LD_INT 1
12591: ARRAY
12592: PPUSH
12593: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12597: LD_VAR 0 1
12601: PUSH
12602: LD_INT 1
12604: ARRAY
12605: PPUSH
12606: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12610: LD_VAR 0 1
12614: PUSH
12615: LD_INT 1
12617: ARRAY
12618: PPUSH
12619: CALL_OW 122
// wait ( 0 0$2 ) ;
12623: LD_INT 70
12625: PPUSH
12626: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12630: LD_EXP 34
12634: PPUSH
12635: LD_STRING DS-1-apeeng
12637: PPUSH
12638: CALL_OW 88
// if IsOk ( Kamil ) then
12642: LD_EXP 31
12646: PPUSH
12647: CALL_OW 302
12651: IFFALSE 12788
// begin Say ( Kamil , DKam-1-apeeng ) ;
12653: LD_EXP 31
12657: PPUSH
12658: LD_STRING DKam-1-apeeng
12660: PPUSH
12661: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12665: LD_EXP 34
12669: PPUSH
12670: LD_STRING DS-2-apeeng
12672: PPUSH
12673: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12677: LD_EXP 31
12681: PPUSH
12682: LD_STRING DKam-2-apeeng
12684: PPUSH
12685: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12689: LD_EXP 34
12693: PPUSH
12694: LD_STRING DS-3-apeeng
12696: PPUSH
12697: CALL_OW 88
// if not IsOK ( Kaia ) then
12701: LD_EXP 33
12705: PPUSH
12706: CALL_OW 302
12710: NOT
12711: IFFALSE 12719
// begin InGameOff ;
12713: CALL_OW 9
// exit ;
12717: GO 12792
// end ; Say ( Kaia , DK-1-apeeng ) ;
12719: LD_EXP 33
12723: PPUSH
12724: LD_STRING DK-1-apeeng
12726: PPUSH
12727: CALL_OW 88
// if not IsOk ( Givi ) then
12731: LD_EXP 29
12735: PPUSH
12736: CALL_OW 302
12740: NOT
12741: IFFALSE 12752
// begin Video ( false ) ;
12743: LD_INT 0
12745: PPUSH
12746: CALL 74089 0 1
// exit ;
12750: GO 12792
// end ; Say ( Givi , DG-1-apeeng ) ;
12752: LD_EXP 29
12756: PPUSH
12757: LD_STRING DG-1-apeeng
12759: PPUSH
12760: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12764: LD_EXP 33
12768: PPUSH
12769: LD_STRING DK-2-apeeng
12771: PPUSH
12772: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12776: LD_EXP 33
12780: PPUSH
12781: LD_STRING DK-3-apeeng
12783: PPUSH
12784: CALL_OW 88
// end ; InGameOff ;
12788: CALL_OW 9
// end ;
12792: PPOPN 1
12794: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12795: LD_EXP 4
12799: PUSH
12800: LD_INT 22
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 30
12812: PUSH
12813: LD_INT 0
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PPUSH
12824: CALL_OW 69
12828: AND
12829: IFFALSE 12994
12831: GO 12833
12833: DISABLE
// begin wait ( 0 0$10 ) ;
12834: LD_INT 350
12836: PPUSH
12837: CALL_OW 67
// DialogueOn ;
12841: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12845: LD_EXP 36
12849: PPUSH
12850: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12854: LD_EXP 36
12858: PPUSH
12859: LD_STRING DF-1-distribution
12861: PPUSH
12862: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12866: LD_EXP 28
12870: PPUSH
12871: LD_STRING DH-2-distribution
12873: PPUSH
12874: CALL_OW 88
// if IsOk ( Kaia ) then
12878: LD_EXP 33
12882: PPUSH
12883: CALL_OW 302
12887: IFFALSE 12948
// begin Say ( Kaia , DK-1-distribution ) ;
12889: LD_EXP 33
12893: PPUSH
12894: LD_STRING DK-1-distribution
12896: PPUSH
12897: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12901: LD_EXP 28
12905: PPUSH
12906: LD_STRING DH-1-distribution
12908: PPUSH
12909: CALL_OW 88
// if IsOk ( Givi ) then
12913: LD_EXP 29
12917: PPUSH
12918: CALL_OW 302
12922: IFFALSE 12948
// begin Say ( Givi , DG-1-distribution ) ;
12924: LD_EXP 29
12928: PPUSH
12929: LD_STRING DG-1-distribution
12931: PPUSH
12932: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12936: LD_EXP 28
12940: PPUSH
12941: LD_STRING DH-3-distribution
12943: PPUSH
12944: CALL_OW 88
// end ; end ; DialogueOff ;
12948: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12952: LD_STRING Crates1
12954: PPUSH
12955: CALL_OW 337
// farmerRequestedCrates := 300 ;
12959: LD_ADDR_EXP 16
12963: PUSH
12964: LD_INT 300
12966: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12967: LD_STRING FarmerCrates
12969: PPUSH
12970: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12974: LD_INT 10
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12984: LD_INT 108
12986: PPUSH
12987: LD_INT 61
12989: PPUSH
12990: CALL_OW 86
// end ;
12994: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12995: LD_EXP 6
12999: PUSH
13000: LD_INT 22
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 3
13012: PUSH
13013: LD_INT 57
13015: PUSH
13016: EMPTY
13017: LIST
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: LD_INT 30
13028: PUSH
13029: LD_INT 6
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 30
13038: PUSH
13039: LD_INT 7
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: PPUSH
13056: CALL_OW 69
13060: AND
13061: PUSH
13062: LD_INT 22
13064: PUSH
13065: LD_INT 2
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 3
13074: PUSH
13075: LD_INT 57
13077: PUSH
13078: EMPTY
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 30
13087: PUSH
13088: LD_INT 4
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: PPUSH
13100: CALL_OW 69
13104: AND
13105: IFFALSE 13269
13107: GO 13109
13109: DISABLE
13110: LD_INT 0
13112: PPUSH
// begin wait ( 0 0$10 ) ;
13113: LD_INT 350
13115: PPUSH
13116: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13120: LD_ADDR_VAR 0 1
13124: PUSH
13125: LD_EXP 42
13129: PPUSH
13130: LD_INT 26
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 25
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 72
13158: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13159: LD_EXP 28
13163: PPUSH
13164: LD_STRING DH-1-task
13166: PPUSH
13167: CALL_OW 88
// if IsOk ( Sophia ) then
13171: LD_EXP 34
13175: PPUSH
13176: CALL_OW 302
13180: IFFALSE 13220
// begin Say ( Sophia , DS-1-task ) ;
13182: LD_EXP 34
13186: PPUSH
13187: LD_STRING DS-1-task
13189: PPUSH
13190: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13194: LD_EXP 34
13198: PPUSH
13199: LD_STRING DS-2-task
13201: PPUSH
13202: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13206: LD_EXP 28
13210: PPUSH
13211: LD_STRING DH-2-task
13213: PPUSH
13214: CALL_OW 88
// end else
13218: GO 13254
// if eng then
13220: LD_VAR 0 1
13224: IFFALSE 13254
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13226: LD_VAR 0 1
13230: PUSH
13231: LD_INT 1
13233: ARRAY
13234: PPUSH
13235: LD_STRING DArm-1-task
13237: PPUSH
13238: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13242: LD_EXP 28
13246: PPUSH
13247: LD_STRING DH-2-task
13249: PPUSH
13250: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13254: LD_STRING BaseConstructed
13256: PPUSH
13257: CALL_OW 337
// allowConvoys := true ;
13261: LD_ADDR_EXP 12
13265: PUSH
13266: LD_INT 1
13268: ST_TO_ADDR
// end ;
13269: PPOPN 1
13271: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13272: LD_INT 22
13274: PUSH
13275: LD_INT 4
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 34
13284: PUSH
13285: LD_INT 12
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PPUSH
13296: CALL_OW 69
13300: IFFALSE 13468
13302: GO 13304
13304: DISABLE
13305: LD_INT 0
13307: PPUSH
13308: PPUSH
13309: PPUSH
// begin wait ( 0 0$2 ) ;
13310: LD_INT 70
13312: PPUSH
13313: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13317: LD_ADDR_VAR 0 1
13321: PUSH
13322: LD_INT 22
13324: PUSH
13325: LD_INT 4
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 34
13334: PUSH
13335: LD_INT 12
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13351: LD_ADDR_VAR 0 2
13355: PUSH
13356: LD_VAR 0 1
13360: PUSH
13361: LD_INT 1
13363: ARRAY
13364: PPUSH
13365: CALL_OW 250
13369: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13370: LD_ADDR_VAR 0 3
13374: PUSH
13375: LD_VAR 0 1
13379: PUSH
13380: LD_INT 1
13382: ARRAY
13383: PPUSH
13384: CALL_OW 251
13388: ST_TO_ADDR
// DialogueOn ;
13389: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13393: LD_VAR 0 2
13397: PPUSH
13398: LD_VAR 0 3
13402: PPUSH
13403: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13407: LD_VAR 0 2
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 2
13419: PPUSH
13420: LD_INT 6
13422: NEG
13423: PPUSH
13424: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13428: LD_INT 10
13430: PPUSH
13431: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13435: LD_EXP 28
13439: PPUSH
13440: LD_STRING DH-1-seecargo
13442: PPUSH
13443: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13447: LD_VAR 0 2
13451: PPUSH
13452: LD_VAR 0 3
13456: PPUSH
13457: LD_INT 2
13459: PPUSH
13460: CALL_OW 331
// DialogueOff ;
13464: CALL_OW 7
// end ;
13468: PPOPN 3
13470: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13471: LD_EXP 4
13475: PUSH
13476: LD_EXP 15
13480: PUSH
13481: LD_INT 300
13483: GREATEREQUAL
13484: AND
13485: IFFALSE 13557
13487: GO 13489
13489: DISABLE
// begin DialogueOn ;
13490: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13494: LD_EXP 36
13498: PPUSH
13499: LD_STRING DF-1-delivery-2
13501: PPUSH
13502: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13506: LD_EXP 28
13510: PPUSH
13511: LD_STRING DH-1-delivery-2
13513: PPUSH
13514: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13518: LD_EXP 36
13522: PPUSH
13523: LD_STRING DF-2-delivery-2
13525: PPUSH
13526: CALL_OW 94
// DialogueOff ;
13530: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13534: LD_STRING Crates2
13536: PPUSH
13537: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13541: LD_ADDR_EXP 17
13545: PUSH
13546: LD_INT 63000
13548: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13549: LD_ADDR_EXP 16
13553: PUSH
13554: LD_INT 600
13556: ST_TO_ADDR
// end ;
13557: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13558: LD_EXP 4
13562: PUSH
13563: LD_EXP 15
13567: PUSH
13568: LD_INT 600
13570: GREATEREQUAL
13571: AND
13572: PUSH
13573: LD_OWVAR 67
13577: PUSH
13578: LD_INT 1
13580: GREATER
13581: AND
13582: IFFALSE 13748
13584: GO 13586
13586: DISABLE
// begin DialogueOn ;
13587: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13591: LD_EXP 36
13595: PPUSH
13596: LD_STRING DF-1-delivery-3
13598: PPUSH
13599: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13603: LD_EXP 28
13607: PPUSH
13608: LD_STRING DH-1-delivery-3
13610: PPUSH
13611: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13615: LD_EXP 36
13619: PPUSH
13620: LD_STRING DF-2-delivery-3
13622: PPUSH
13623: CALL_OW 94
// if IsOk ( Kaia ) then
13627: LD_EXP 33
13631: PPUSH
13632: CALL_OW 302
13636: IFFALSE 13686
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13638: LD_EXP 33
13642: PPUSH
13643: LD_STRING DK-1-delivery-3
13645: PPUSH
13646: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13650: LD_EXP 28
13654: PPUSH
13655: LD_STRING DH-2-delivery-3
13657: PPUSH
13658: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13662: LD_EXP 29
13666: PPUSH
13667: LD_STRING DG-1-delivery-3
13669: PPUSH
13670: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13674: LD_EXP 30
13678: PPUSH
13679: LD_STRING DM-1-delivery-3
13681: PPUSH
13682: CALL_OW 88
// end ; DialogueOff ;
13686: CALL_OW 7
// if Difficulty = 2 then
13690: LD_OWVAR 67
13694: PUSH
13695: LD_INT 2
13697: EQUAL
13698: IFFALSE 13725
// begin ChangeMissionObjectives ( Crates3 ) ;
13700: LD_STRING Crates3
13702: PPUSH
13703: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13707: LD_ADDR_EXP 17
13711: PUSH
13712: LD_INT 63000
13714: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13715: LD_ADDR_EXP 16
13719: PUSH
13720: LD_INT 900
13722: ST_TO_ADDR
// end else
13723: GO 13748
// begin ChangeMissionObjectives ( Crates4 ) ;
13725: LD_STRING Crates4
13727: PPUSH
13728: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13732: LD_ADDR_EXP 17
13736: PUSH
13737: LD_INT 63000
13739: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13740: LD_ADDR_EXP 16
13744: PUSH
13745: LD_INT 1200
13747: ST_TO_ADDR
// end ; end ;
13748: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13749: LD_EXP 4
13753: PUSH
13754: LD_EXP 15
13758: PUSH
13759: LD_INT 600
13761: PUSH
13762: LD_INT 900
13764: PUSH
13765: LD_INT 1200
13767: PUSH
13768: LD_INT 1400
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: LD_OWVAR 67
13781: ARRAY
13782: GREATEREQUAL
13783: AND
13784: PUSH
13785: LD_EXP 16
13789: PUSH
13790: LD_EXP 17
13794: LESSEQUAL
13795: AND
13796: IFFALSE 13882
13798: GO 13800
13800: DISABLE
// begin retreatAllowed := true ;
13801: LD_ADDR_EXP 11
13805: PUSH
13806: LD_INT 1
13808: ST_TO_ADDR
// display_strings := [ ] ;
13809: LD_ADDR_OWVAR 47
13813: PUSH
13814: EMPTY
13815: ST_TO_ADDR
// DialogueOn ;
13816: CALL_OW 6
// InGameOn ;
13820: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13824: LD_EXP 37
13828: PPUSH
13829: LD_STRING DO-radio-end
13831: PPUSH
13832: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13836: LD_EXP 28
13840: PPUSH
13841: LD_STRING DH-1-radio-end
13843: PPUSH
13844: CALL_OW 88
// InGameOff ;
13848: CALL_OW 9
// DialogueOff ;
13852: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13856: LD_STRING Retreat
13858: PPUSH
13859: CALL_OW 337
// wait ( 0 0$2 ) ;
13863: LD_INT 70
13865: PPUSH
13866: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13870: LD_EXP 28
13874: PPUSH
13875: LD_STRING DH-2-radio-end
13877: PPUSH
13878: CALL_OW 88
// end ;
13882: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13883: LD_EXP 11
13887: IFFALSE 14018
13889: GO 13891
13891: DISABLE
13892: LD_INT 0
13894: PPUSH
13895: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13896: LD_INT 10
13898: PPUSH
13899: LD_INT 0
13901: PPUSH
13902: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13906: LD_ADDR_VAR 0 1
13910: PUSH
13911: LD_EXP 39
13915: PPUSH
13916: LD_INT 25
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PPUSH
13926: CALL_OW 72
13930: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13931: LD_VAR 0 1
13935: PUSH
13936: LD_INT 102
13938: PPUSH
13939: LD_INT 69
13941: PPUSH
13942: CALL_OW 428
13946: PUSH
13947: LD_INT 0
13949: EQUAL
13950: AND
13951: IFFALSE 14018
// begin for i in tmp do
13953: LD_ADDR_VAR 0 2
13957: PUSH
13958: LD_VAR 0 1
13962: PUSH
13963: FOR_IN
13964: IFFALSE 13988
// if IsInUnit ( i ) then
13966: LD_VAR 0 2
13970: PPUSH
13971: CALL_OW 310
13975: IFFALSE 13986
// ComExitBuilding ( i ) ;
13977: LD_VAR 0 2
13981: PPUSH
13982: CALL_OW 122
13986: GO 13963
13988: POP
13989: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13990: LD_VAR 0 1
13994: PPUSH
13995: LD_INT 31
13997: PPUSH
13998: LD_INT 102
14000: PPUSH
14001: LD_INT 69
14003: PPUSH
14004: LD_INT 2
14006: PPUSH
14007: CALL_OW 205
// wait ( 0 0$3 ) ;
14011: LD_INT 105
14013: PPUSH
14014: CALL_OW 67
// end ; end ;
14018: PPOPN 2
14020: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14021: LD_EXP 11
14025: NOT
14026: PUSH
14027: LD_INT 5
14029: PPUSH
14030: CALL_OW 301
14034: AND
14035: IFFALSE 14067
14037: GO 14039
14039: DISABLE
// begin DialogueOn ;
14040: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14044: LD_EXP 36
14048: PPUSH
14049: LD_STRING DF-1-failure
14051: PPUSH
14052: CALL_OW 94
// DialogueOff ;
14056: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14060: LD_STRING FarmerDepot
14062: PPUSH
14063: CALL_OW 104
// end ;
14067: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14068: LD_EXP 11
14072: PUSH
14073: LD_EXP 28
14077: PPUSH
14078: LD_EXP 36
14082: PPUSH
14083: CALL_OW 296
14087: PUSH
14088: LD_INT 12
14090: LESS
14091: AND
14092: PUSH
14093: LD_INT 81
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 21
14105: PUSH
14106: LD_INT 1
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 69
14121: NOT
14122: AND
14123: IFFALSE 14787
14125: GO 14127
14127: DISABLE
14128: LD_INT 0
14130: PPUSH
14131: PPUSH
14132: PPUSH
// begin allowConvoys := false ;
14133: LD_ADDR_EXP 12
14137: PUSH
14138: LD_INT 0
14140: ST_TO_ADDR
// InGameOn ;
14141: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14145: LD_EXP 28
14149: PPUSH
14150: LD_EXP 36
14154: PPUSH
14155: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14159: LD_EXP 36
14163: PPUSH
14164: LD_EXP 28
14168: PPUSH
14169: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14173: LD_EXP 36
14177: PPUSH
14178: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14182: LD_EXP 28
14186: PPUSH
14187: LD_STRING DH-1-end
14189: PPUSH
14190: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14194: LD_EXP 36
14198: PPUSH
14199: LD_STRING DF-1-end
14201: PPUSH
14202: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14206: LD_EXP 36
14210: PPUSH
14211: LD_STRING DF-2-end
14213: PPUSH
14214: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14218: LD_EXP 28
14222: PPUSH
14223: LD_STRING DH-2-end
14225: PPUSH
14226: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14230: LD_EXP 36
14234: PPUSH
14235: LD_STRING DF-3-end
14237: PPUSH
14238: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14242: LD_EXP 28
14246: PPUSH
14247: LD_STRING DH-3-end
14249: PPUSH
14250: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14254: LD_EXP 29
14258: PPUSH
14259: LD_STRING DG-1-end
14261: PPUSH
14262: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14266: LD_EXP 28
14270: PPUSH
14271: LD_STRING DH-4-end
14273: PPUSH
14274: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14278: LD_EXP 36
14282: PPUSH
14283: LD_STRING DF-4-end
14285: PPUSH
14286: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14290: LD_EXP 28
14294: PPUSH
14295: LD_STRING DH-5-end
14297: PPUSH
14298: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14302: LD_EXP 36
14306: PPUSH
14307: LD_STRING DF-5-end
14309: PPUSH
14310: CALL_OW 88
// InGameOff ;
14314: CALL_OW 9
// allowCargoEvacuation := true ;
14318: LD_ADDR_EXP 7
14322: PUSH
14323: LD_INT 1
14325: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14326: LD_ADDR_VAR 0 2
14330: PUSH
14331: LD_INT 4
14333: PUSH
14334: LD_INT 3
14336: PUSH
14337: LD_INT 2
14339: PUSH
14340: LD_INT 1
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: PUSH
14349: LD_OWVAR 67
14353: ARRAY
14354: ST_TO_ADDR
// if farmerSquad < max then
14355: LD_EXP 39
14359: PUSH
14360: LD_VAR 0 2
14364: LESS
14365: IFFALSE 14377
// max := farmerSquad ;
14367: LD_ADDR_VAR 0 2
14371: PUSH
14372: LD_EXP 39
14376: ST_TO_ADDR
// for i := 1 to max do
14377: LD_ADDR_VAR 0 1
14381: PUSH
14382: DOUBLE
14383: LD_INT 1
14385: DEC
14386: ST_TO_ADDR
14387: LD_VAR 0 2
14391: PUSH
14392: FOR_TO
14393: IFFALSE 14431
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14395: LD_EXP 39
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: LD_INT 2
14406: PPUSH
14407: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14411: LD_ADDR_EXP 39
14415: PUSH
14416: LD_EXP 39
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 3
14428: ST_TO_ADDR
// end ;
14429: GO 14392
14431: POP
14432: POP
// for i in Farmer ^ farmerSquad do
14433: LD_ADDR_VAR 0 1
14437: PUSH
14438: LD_EXP 36
14442: PUSH
14443: LD_EXP 39
14447: ADD
14448: PUSH
14449: FOR_IN
14450: IFFALSE 14489
// begin if IsInUnit ( i ) then
14452: LD_VAR 0 1
14456: PPUSH
14457: CALL_OW 310
14461: IFFALSE 14472
// ComExitBuilding ( i ) ;
14463: LD_VAR 0 1
14467: PPUSH
14468: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14472: LD_VAR 0 1
14476: PPUSH
14477: LD_INT 102
14479: PPUSH
14480: LD_INT 7
14482: PPUSH
14483: CALL_OW 171
// end ;
14487: GO 14449
14489: POP
14490: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14491: LD_ADDR_VAR 0 1
14495: PUSH
14496: LD_INT 22
14498: PUSH
14499: LD_INT 5
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 21
14508: PUSH
14509: LD_INT 3
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PPUSH
14520: CALL_OW 69
14524: PUSH
14525: LD_INT 5
14527: DIFF
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14546
// SetSide ( i , 2 ) ;
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_INT 2
14539: PPUSH
14540: CALL_OW 235
14544: GO 14529
14546: POP
14547: POP
// wait ( 0 0$2 ) ;
14548: LD_INT 70
14550: PPUSH
14551: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14555: LD_EXP 28
14559: PPUSH
14560: LD_STRING DH-6-end
14562: PPUSH
14563: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14567: LD_INT 35
14569: PPUSH
14570: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14574: LD_ADDR_VAR 0 3
14578: PUSH
14579: LD_EXP 36
14583: PUSH
14584: LD_EXP 39
14588: ADD
14589: PPUSH
14590: LD_INT 95
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PPUSH
14600: CALL_OW 72
14604: ST_TO_ADDR
// if tmp then
14605: LD_VAR 0 3
14609: IFFALSE 14653
// for i in tmp do
14611: LD_ADDR_VAR 0 1
14615: PUSH
14616: LD_VAR 0 3
14620: PUSH
14621: FOR_IN
14622: IFFALSE 14651
// begin farmerSquad := farmerSquad diff i ;
14624: LD_ADDR_EXP 39
14628: PUSH
14629: LD_EXP 39
14633: PUSH
14634: LD_VAR 0 1
14638: DIFF
14639: ST_TO_ADDR
// RemoveUnit ( i ) ;
14640: LD_VAR 0 1
14644: PPUSH
14645: CALL_OW 64
// end ;
14649: GO 14621
14651: POP
14652: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14653: LD_EXP 39
14657: PUSH
14658: EMPTY
14659: EQUAL
14660: PUSH
14661: LD_EXP 36
14665: PPUSH
14666: CALL_OW 305
14670: NOT
14671: AND
14672: IFFALSE 14567
// if farmerHumanLoseCounter = 0 then
14674: LD_EXP 20
14678: PUSH
14679: LD_INT 0
14681: EQUAL
14682: IFFALSE 14691
// SetAchievement ( ACH_BABY ) ;
14684: LD_STRING ACH_BABY
14686: PPUSH
14687: CALL_OW 543
// wait ( 1 1$00 ) ;
14691: LD_INT 2100
14693: PPUSH
14694: CALL_OW 67
// SendAttack ;
14698: CALL 6163 0 0
// Say ( Heike , DH-7-end ) ;
14702: LD_EXP 28
14706: PPUSH
14707: LD_STRING DH-7-end
14709: PPUSH
14710: CALL_OW 88
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
14714: LD_ADDR_VAR 0 1
14718: PUSH
14719: DOUBLE
14720: LD_INT 1
14722: DEC
14723: ST_TO_ADDR
14724: LD_INT 2
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: LD_INT 4
14732: PUSH
14733: LD_INT 4
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: PUSH
14742: LD_OWVAR 67
14746: ARRAY
14747: PUSH
14748: FOR_TO
14749: IFFALSE 14785
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
14751: LD_INT 4200
14753: PUSH
14754: LD_INT 3500
14756: PUSH
14757: LD_INT 3150
14759: PUSH
14760: LD_INT 2800
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: PUSH
14769: LD_OWVAR 67
14773: ARRAY
14774: PPUSH
14775: CALL_OW 67
// SendAttack ;
14779: CALL 6163 0 0
// end ;
14783: GO 14748
14785: POP
14786: POP
// end ;
14787: PPOPN 3
14789: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14790: LD_EXP 7
14794: PUSH
14795: LD_EXP 21
14799: PUSH
14800: LD_INT 0
14802: GREATER
14803: AND
14804: IFFALSE 14814
14806: GO 14808
14808: DISABLE
// begin enable ;
14809: ENABLE
// CargoEvacuation ;
14810: CALL 3660 0 0
// end ;
14814: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14815: LD_EXP 17
14819: PUSH
14820: LD_INT 18900
14822: LESSEQUAL
14823: IFFALSE 14872
14825: GO 14827
14827: DISABLE
// begin DialogueOn ;
14828: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14832: LD_EXP 36
14836: PPUSH
14837: LD_STRING DF-1-distribution-a
14839: PPUSH
14840: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14844: LD_EXP 28
14848: PPUSH
14849: LD_STRING DH-1-distribution-a
14851: PPUSH
14852: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14856: LD_EXP 36
14860: PPUSH
14861: LD_STRING DF-2-distribution-a
14863: PPUSH
14864: CALL_OW 94
// DialogueOff ;
14868: CALL_OW 7
// end ;
14872: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14873: LD_EXP 17
14877: PUSH
14878: LD_INT 0
14880: LESSEQUAL
14881: IFFALSE 14913
14883: GO 14885
14885: DISABLE
// begin DialogueOn ;
14886: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14890: LD_EXP 36
14894: PPUSH
14895: LD_STRING DF-3-distribution-a
14897: PPUSH
14898: CALL_OW 94
// YouLost ( Distribution ) ;
14902: LD_STRING Distribution
14904: PPUSH
14905: CALL_OW 104
// DialogueOff ;
14909: CALL_OW 7
// end ;
14913: END
// every 0 0$1 trigger vehCounter >= 2 do
14914: LD_EXP 22
14918: PUSH
14919: LD_INT 2
14921: GREATEREQUAL
14922: IFFALSE 14934
14924: GO 14926
14926: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14927: LD_STRING VehConstructed
14929: PPUSH
14930: CALL_OW 337
14934: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14935: LD_INT 22
14937: PUSH
14938: LD_INT 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 34
14947: PUSH
14948: LD_INT 12
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 69
14963: IFFALSE 15023
14965: GO 14967
14967: DISABLE
// begin DialogueOn ;
14968: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14972: LD_EXP 28
14976: PPUSH
14977: LD_STRING DH-1-truck
14979: PPUSH
14980: CALL_OW 88
// if IsOk ( Markov ) then
14984: LD_EXP 35
14988: PPUSH
14989: CALL_OW 302
14993: IFFALSE 15019
// begin Say ( Markov , DMar-1-truck ) ;
14995: LD_EXP 35
14999: PPUSH
15000: LD_STRING DMar-1-truck
15002: PPUSH
15003: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15007: LD_EXP 28
15011: PPUSH
15012: LD_STRING DH-2-truck
15014: PPUSH
15015: CALL_OW 88
// end ; DialogueOff ;
15019: CALL_OW 7
// end ;
15023: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15024: LD_INT 0
15026: PPUSH
15027: PPUSH
15028: PPUSH
// if IsOk ( Givi ) then
15029: LD_EXP 29
15033: PPUSH
15034: CALL_OW 302
15038: IFFALSE 15054
// begin Say ( Givi , DG-1-nocargo ) ;
15040: LD_EXP 29
15044: PPUSH
15045: LD_STRING DG-1-nocargo
15047: PPUSH
15048: CALL_OW 88
// exit ;
15052: GO 15150
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15054: LD_ADDR_VAR 0 2
15058: PUSH
15059: LD_EXP 42
15063: PPUSH
15064: LD_INT 26
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 72
15078: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15079: LD_ADDR_VAR 0 3
15083: PUSH
15084: LD_EXP 42
15088: PPUSH
15089: LD_INT 26
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PPUSH
15099: CALL_OW 72
15103: ST_TO_ADDR
// if randomMen then
15104: LD_VAR 0 2
15108: IFFALSE 15128
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15110: LD_VAR 0 2
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: PPUSH
15119: LD_STRING DArm-1-nocargo
15121: PPUSH
15122: CALL_OW 88
15126: GO 15150
// if randomWomen then
15128: LD_VAR 0 3
15132: IFFALSE 15150
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15134: LD_VAR 0 3
15138: PUSH
15139: LD_INT 1
15141: ARRAY
15142: PPUSH
15143: LD_STRING DArf-1-nocargo
15145: PPUSH
15146: CALL_OW 88
// end ;
15150: LD_VAR 0 1
15154: RET
// export function IncomingAttack ; begin
15155: LD_INT 0
15157: PPUSH
// if attackWave = 1 then
15158: LD_EXP 19
15162: PUSH
15163: LD_INT 1
15165: EQUAL
15166: IFFALSE 15237
// begin DialogueOn ;
15168: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15172: LD_EXP 37
15176: PPUSH
15177: LD_STRING DO-1-radio-1
15179: PPUSH
15180: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15184: LD_EXP 28
15188: PPUSH
15189: LD_STRING DH-1-radio-1-
15191: PPUSH
15192: CALL_OW 88
// if IsOk ( Markov ) then
15196: LD_EXP 35
15200: PPUSH
15201: CALL_OW 302
15205: IFFALSE 15231
// begin Say ( Markov , DMar-1-radio-1 ) ;
15207: LD_EXP 35
15211: PPUSH
15212: LD_STRING DMar-1-radio-1
15214: PPUSH
15215: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15219: LD_EXP 28
15223: PPUSH
15224: LD_STRING DH-2-radio-1
15226: PPUSH
15227: CALL_OW 88
// end ; DialogueOff ;
15231: CALL_OW 7
// end else
15235: GO 15261
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15237: LD_EXP 37
15241: PPUSH
15242: LD_STRING DO-1-radio-u
15244: PPUSH
15245: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15249: LD_EXP 28
15253: PPUSH
15254: LD_STRING DH-1-radio-u
15256: PPUSH
15257: CALL_OW 88
// end ; end ;
15261: LD_VAR 0 1
15265: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15266: LD_EXP 44
15270: PPUSH
15271: LD_INT 95
15273: PUSH
15274: LD_INT 8
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PPUSH
15281: CALL_OW 72
15285: IFFALSE 15388
15287: GO 15289
15289: DISABLE
15290: LD_INT 0
15292: PPUSH
// begin enable ;
15293: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15294: LD_ADDR_VAR 0 1
15298: PUSH
15299: LD_EXP 44
15303: PPUSH
15304: LD_INT 95
15306: PUSH
15307: LD_INT 8
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PPUSH
15314: CALL_OW 72
15318: PUSH
15319: FOR_IN
15320: IFFALSE 15349
// begin usForces := usForces diff i ;
15322: LD_ADDR_EXP 44
15326: PUSH
15327: LD_EXP 44
15331: PUSH
15332: LD_VAR 0 1
15336: DIFF
15337: ST_TO_ADDR
// RemoveUnit ( i ) ;
15338: LD_VAR 0 1
15342: PPUSH
15343: CALL_OW 64
// end ;
15347: GO 15319
15349: POP
15350: POP
// if not americanHasEscaped and attackWave = 1 then
15351: LD_EXP 8
15355: NOT
15356: PUSH
15357: LD_EXP 19
15361: PUSH
15362: LD_INT 1
15364: EQUAL
15365: AND
15366: IFFALSE 15388
// begin americanHasEscaped := true ;
15368: LD_ADDR_EXP 8
15372: PUSH
15373: LD_INT 1
15375: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15376: LD_EXP 28
15380: PPUSH
15381: LD_STRING DH-2-assault-a
15383: PPUSH
15384: CALL_OW 88
// end ; end ;
15388: PPOPN 1
15390: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15391: LD_INT 4
15393: PPUSH
15394: LD_INT 22
15396: PUSH
15397: LD_INT 1
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 70
15408: PUSH
15409: LD_EXP 11
15413: NOT
15414: AND
15415: IFFALSE 15432
15417: GO 15419
15419: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15420: LD_EXP 36
15424: PPUSH
15425: LD_STRING DF-1-attack
15427: PPUSH
15428: CALL_OW 94
15432: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15433: LD_INT 5
15435: PPUSH
15436: CALL_OW 255
15440: PUSH
15441: LD_INT 2
15443: EQUAL
15444: IFFALSE 15460
15446: GO 15448
15448: DISABLE
// begin enable ;
15449: ENABLE
// SetSide ( arDepot , 5 ) ;
15450: LD_INT 5
15452: PPUSH
15453: LD_INT 5
15455: PPUSH
15456: CALL_OW 235
// end ;
15460: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15461: LD_INT 22
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PPUSH
15485: CALL_OW 69
15489: NOT
15490: PUSH
15491: LD_INT 22
15493: PUSH
15494: LD_INT 4
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PPUSH
15501: CALL_OW 69
15505: NOT
15506: AND
15507: PUSH
15508: LD_EXP 11
15512: NOT
15513: AND
15514: PUSH
15515: LD_EXP 15
15519: PUSH
15520: LD_INT 90
15522: GREATER
15523: AND
15524: PUSH
15525: LD_INT 7
15527: PPUSH
15528: LD_INT 22
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 21
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PPUSH
15552: CALL_OW 70
15556: AND
15557: PUSH
15558: LD_INT 22
15560: PUSH
15561: LD_INT 2
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 50
15570: PUSH
15571: EMPTY
15572: LIST
15573: PUSH
15574: LD_INT 30
15576: PUSH
15577: LD_INT 0
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: AND
15594: IFFALSE 16387
15596: GO 15598
15598: DISABLE
15599: LD_INT 0
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
// begin depot := usDepot ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_INT 11
15613: ST_TO_ADDR
// if not depot then
15614: LD_VAR 0 5
15618: NOT
15619: IFFALSE 15659
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15621: LD_ADDR_VAR 0 5
15625: PUSH
15626: LD_INT 22
15628: PUSH
15629: LD_INT 2
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 30
15638: PUSH
15639: LD_INT 0
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PPUSH
15650: CALL_OW 69
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15659: LD_ADDR_VAR 0 1
15663: PUSH
15664: LD_EXP 42
15668: PPUSH
15669: LD_INT 26
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 72
15683: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_EXP 42
15693: PPUSH
15694: LD_INT 26
15696: PUSH
15697: LD_INT 2
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PPUSH
15704: CALL_OW 72
15708: ST_TO_ADDR
// if IsOk ( Kaia ) then
15709: LD_EXP 33
15713: PPUSH
15714: CALL_OW 302
15718: IFFALSE 15739
// speaker := [ Kaia , DK ] else
15720: LD_ADDR_VAR 0 3
15724: PUSH
15725: LD_EXP 33
15729: PUSH
15730: LD_STRING DK
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: ST_TO_ADDR
15737: GO 15819
// if randomMen then
15739: LD_VAR 0 1
15743: IFFALSE 15778
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15745: LD_ADDR_VAR 0 3
15749: PUSH
15750: LD_VAR 0 1
15754: PUSH
15755: LD_INT 1
15757: PPUSH
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 12
15767: ARRAY
15768: PUSH
15769: LD_STRING DArm
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
15776: GO 15819
// if randomWomen then
15778: LD_VAR 0 2
15782: IFFALSE 15817
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15784: LD_ADDR_VAR 0 3
15788: PUSH
15789: LD_VAR 0 2
15793: PUSH
15794: LD_INT 1
15796: PPUSH
15797: LD_VAR 0 2
15801: PPUSH
15802: CALL_OW 12
15806: ARRAY
15807: PUSH
15808: LD_STRING DArf
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: ST_TO_ADDR
15815: GO 15819
// exit ;
15817: GO 16387
// if IsInUnit ( speaker [ 1 ] ) then
15819: LD_VAR 0 3
15823: PUSH
15824: LD_INT 1
15826: ARRAY
15827: PPUSH
15828: CALL_OW 310
15832: IFFALSE 15855
// place := IsInUnit ( speaker [ 1 ] ) else
15834: LD_ADDR_VAR 0 4
15838: PUSH
15839: LD_VAR 0 3
15843: PUSH
15844: LD_INT 1
15846: ARRAY
15847: PPUSH
15848: CALL_OW 310
15852: ST_TO_ADDR
15853: GO 15869
// place := speaker [ 1 ] ;
15855: LD_ADDR_VAR 0 4
15859: PUSH
15860: LD_VAR 0 3
15864: PUSH
15865: LD_INT 1
15867: ARRAY
15868: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15869: LD_VAR 0 4
15873: PPUSH
15874: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15878: LD_VAR 0 4
15882: PPUSH
15883: CALL_OW 250
15887: PPUSH
15888: LD_VAR 0 4
15892: PPUSH
15893: CALL_OW 251
15897: PPUSH
15898: CALL 2147 0 2
// wait ( 0 0$2 ) ;
15902: LD_INT 70
15904: PPUSH
15905: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15909: LD_EXP 38
15913: PPUSH
15914: CALL_OW 305
15918: NOT
15919: IFFALSE 15923
// exit ;
15921: GO 16387
// allowConvoys := false ;
15923: LD_ADDR_EXP 12
15927: PUSH
15928: LD_INT 0
15930: ST_TO_ADDR
// InGameOn ;
15931: CALL_OW 8
// wait ( 0 0$1 ) ;
15935: LD_INT 35
15937: PPUSH
15938: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15942: LD_EXP 38
15946: PPUSH
15947: LD_STRING DI-1-land
15949: PPUSH
15950: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15954: LD_VAR 0 3
15958: PUSH
15959: LD_INT 1
15961: ARRAY
15962: PPUSH
15963: CALL_OW 310
15967: IFFALSE 15982
// ComExit ( speaker [ 1 ] ) ;
15969: LD_VAR 0 3
15973: PUSH
15974: LD_INT 1
15976: ARRAY
15977: PPUSH
15978: CALL 74505 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15982: LD_VAR 0 3
15986: PUSH
15987: LD_INT 1
15989: ARRAY
15990: PPUSH
15991: LD_EXP 38
15995: PPUSH
15996: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16000: LD_VAR 0 3
16004: PUSH
16005: LD_INT 1
16007: ARRAY
16008: PPUSH
16009: LD_EXP 38
16013: PPUSH
16014: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16018: LD_EXP 38
16022: PPUSH
16023: LD_VAR 0 3
16027: PUSH
16028: LD_INT 1
16030: ARRAY
16031: PPUSH
16032: CALL_OW 119
// wait ( 0 0$1 ) ;
16036: LD_INT 35
16038: PPUSH
16039: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16043: LD_VAR 0 3
16047: PUSH
16048: LD_INT 1
16050: ARRAY
16051: PPUSH
16052: LD_VAR 0 3
16056: PUSH
16057: LD_INT 2
16059: ARRAY
16060: PUSH
16061: LD_STRING -1-land
16063: STR
16064: PPUSH
16065: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16069: LD_EXP 38
16073: PPUSH
16074: LD_STRING DI-2-land
16076: PPUSH
16077: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16081: LD_VAR 0 3
16085: PUSH
16086: LD_INT 1
16088: ARRAY
16089: PPUSH
16090: LD_VAR 0 3
16094: PUSH
16095: LD_INT 2
16097: ARRAY
16098: PUSH
16099: LD_STRING -2-land
16101: STR
16102: PPUSH
16103: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16107: LD_VAR 0 3
16111: PUSH
16112: LD_INT 1
16114: ARRAY
16115: PPUSH
16116: LD_VAR 0 3
16120: PUSH
16121: LD_INT 2
16123: ARRAY
16124: PUSH
16125: LD_STRING -3-land
16127: STR
16128: PPUSH
16129: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16133: LD_EXP 28
16137: PPUSH
16138: LD_STRING DH-1-land
16140: PPUSH
16141: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16145: LD_VAR 0 5
16149: PPUSH
16150: CALL_OW 313
16154: PUSH
16155: LD_INT 6
16157: EQUAL
16158: IFFALSE 16178
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16160: LD_VAR 0 5
16164: PPUSH
16165: CALL_OW 313
16169: PUSH
16170: LD_INT 1
16172: ARRAY
16173: PPUSH
16174: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16178: LD_EXP 38
16182: PPUSH
16183: LD_INT 2
16185: PPUSH
16186: CALL_OW 235
// CenterOnUnits ( depot ) ;
16190: LD_VAR 0 5
16194: PPUSH
16195: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16199: LD_EXP 38
16203: PPUSH
16204: LD_VAR 0 5
16208: PPUSH
16209: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16213: LD_VAR 0 3
16217: PUSH
16218: LD_INT 1
16220: ARRAY
16221: PPUSH
16222: LD_VAR 0 5
16226: PPUSH
16227: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16231: LD_INT 35
16233: PPUSH
16234: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16238: LD_EXP 38
16242: PPUSH
16243: CALL_OW 310
16247: PUSH
16248: LD_EXP 38
16252: PPUSH
16253: CALL_OW 302
16257: NOT
16258: OR
16259: PUSH
16260: LD_VAR 0 5
16264: PPUSH
16265: CALL_OW 302
16269: NOT
16270: OR
16271: IFFALSE 16231
// InGameOff ;
16273: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16277: LD_EXP 38
16281: PPUSH
16282: CALL_OW 302
16286: NOT
16287: IFFALSE 16291
// exit ;
16289: GO 16387
// if not IsOk ( depot ) then
16291: LD_VAR 0 5
16295: PPUSH
16296: CALL_OW 302
16300: NOT
16301: IFFALSE 16364
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16303: LD_EXP 38
16307: PPUSH
16308: LD_INT 30
16310: PPUSH
16311: LD_INT 1
16313: PPUSH
16314: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16318: LD_INT 35
16320: PPUSH
16321: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16325: LD_EXP 38
16329: PPUSH
16330: LD_INT 30
16332: PPUSH
16333: LD_INT 1
16335: PPUSH
16336: CALL_OW 307
16340: PUSH
16341: LD_EXP 38
16345: PPUSH
16346: CALL_OW 301
16350: OR
16351: IFFALSE 16318
// RemoveUnit ( Ibrahim ) ;
16353: LD_EXP 38
16357: PPUSH
16358: CALL_OW 64
// exit ;
16362: GO 16387
// end ; ibrahimInDepot := true ;
16364: LD_ADDR_EXP 25
16368: PUSH
16369: LD_INT 1
16371: ST_TO_ADDR
// allowConvoys := true ;
16372: LD_ADDR_EXP 12
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16380: LD_STRING IbrahimInDepot
16382: PPUSH
16383: CALL_OW 97
// end ;
16387: PPOPN 5
16389: END
// export function IbrahimQuery ; begin
16390: LD_INT 0
16392: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16393: LD_STRING IbrahimQuery
16395: PPUSH
16396: CALL_OW 97
16400: PUSH
16401: LD_INT 1
16403: DOUBLE
16404: EQUAL
16405: IFTRUE 16409
16407: GO 16685
16409: POP
// begin allowConvoys := false ;
16410: LD_ADDR_EXP 12
16414: PUSH
16415: LD_INT 0
16417: ST_TO_ADDR
// ibrahimInDepot := false ;
16418: LD_ADDR_EXP 25
16422: PUSH
16423: LD_INT 0
16425: ST_TO_ADDR
// InGameOn ;
16426: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16430: LD_EXP 28
16434: PPUSH
16435: CALL_OW 87
// wait ( 0 0$1 ) ;
16439: LD_INT 35
16441: PPUSH
16442: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16446: LD_EXP 28
16450: PPUSH
16451: LD_STRING DH-1-interrogation
16453: PPUSH
16454: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16458: LD_EXP 38
16462: PPUSH
16463: LD_STRING DI-1-interrogation
16465: PPUSH
16466: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16470: LD_EXP 28
16474: PPUSH
16475: LD_STRING DH-2-interrogation
16477: PPUSH
16478: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16482: LD_EXP 38
16486: PPUSH
16487: LD_STRING DI-2-interrogation
16489: PPUSH
16490: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16494: LD_EXP 28
16498: PPUSH
16499: LD_STRING DH-3-interrogation
16501: PPUSH
16502: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16506: LD_EXP 38
16510: PPUSH
16511: LD_STRING DI-3-interrogation
16513: PPUSH
16514: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16518: LD_EXP 28
16522: PPUSH
16523: LD_STRING DH-4-interrogation
16525: PPUSH
16526: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16530: LD_EXP 38
16534: PPUSH
16535: LD_STRING DI-4-interrogation
16537: PPUSH
16538: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16542: LD_EXP 28
16546: PPUSH
16547: LD_STRING DH-5-interrogation
16549: PPUSH
16550: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16554: LD_EXP 38
16558: PPUSH
16559: LD_STRING DI-5-interrogation
16561: PPUSH
16562: CALL_OW 88
// wait ( 0 0$1 ) ;
16566: LD_INT 35
16568: PPUSH
16569: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16573: LD_STRING IbrahimDecisionQuery
16575: PPUSH
16576: CALL_OW 97
16580: PUSH
16581: LD_INT 1
16583: DOUBLE
16584: EQUAL
16585: IFTRUE 16589
16587: GO 16613
16589: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16590: LD_EXP 38
16594: PPUSH
16595: LD_STRING DI-1-kill
16597: PPUSH
16598: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16602: LD_EXP 38
16606: PPUSH
16607: CALL_OW 66
// end ; 2 :
16611: GO 16679
16613: LD_INT 2
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16678
16621: POP
// begin SetSide ( Ibrahim , 6 ) ;
16622: LD_EXP 38
16626: PPUSH
16627: LD_INT 6
16629: PPUSH
16630: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16634: LD_EXP 38
16638: PPUSH
16639: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16643: LD_EXP 38
16647: PPUSH
16648: LD_INT 66
16650: PPUSH
16651: LD_INT 2
16653: PPUSH
16654: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16658: LD_EXP 38
16662: PPUSH
16663: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16667: LD_EXP 28
16671: PPUSH
16672: CALL_OW 122
// end ; end ;
16676: GO 16679
16678: POP
// InGameOff ;
16679: CALL_OW 9
// end ; 2 :
16683: GO 16699
16685: LD_INT 2
16687: DOUBLE
16688: EQUAL
16689: IFTRUE 16693
16691: GO 16698
16693: POP
// exit ; end ;
16694: GO 16775
16696: GO 16699
16698: POP
// allowConvoys := true ;
16699: LD_ADDR_EXP 12
16703: PUSH
16704: LD_INT 1
16706: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16707: LD_INT 5250
16709: PPUSH
16710: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16714: LD_INT 35
16716: PPUSH
16717: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16721: LD_INT 81
16723: PUSH
16724: LD_INT 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 21
16733: PUSH
16734: LD_INT 1
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PPUSH
16745: CALL_OW 69
16749: NOT
16750: IFFALSE 16714
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
16752: LD_EXP 38
16756: PPUSH
16757: LD_INT 34
16759: PPUSH
16760: LD_INT 21
16762: PPUSH
16763: CALL_OW 111
// ibrahimIsFree := true ;
16767: LD_ADDR_EXP 26
16771: PUSH
16772: LD_INT 1
16774: ST_TO_ADDR
// end ;
16775: LD_VAR 0 1
16779: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
16780: LD_EXP 26
16784: PUSH
16785: LD_EXP 38
16789: PPUSH
16790: CALL_OW 302
16794: AND
16795: PUSH
16796: LD_INT 2
16798: PPUSH
16799: LD_EXP 38
16803: PPUSH
16804: CALL_OW 292
16808: AND
16809: IFFALSE 17576
16811: GO 16813
16813: DISABLE
16814: LD_INT 0
16816: PPUSH
16817: PPUSH
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
// begin wait ( 0 0$10 ) ;
16822: LD_INT 350
16824: PPUSH
16825: CALL_OW 67
// allowConvoys := false ;
16829: LD_ADDR_EXP 12
16833: PUSH
16834: LD_INT 0
16836: ST_TO_ADDR
// depot := usDepot ;
16837: LD_ADDR_VAR 0 4
16841: PUSH
16842: LD_INT 11
16844: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16845: LD_INT 11
16847: NOT
16848: PUSH
16849: LD_INT 22
16851: PUSH
16852: LD_INT 2
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 50
16861: PUSH
16862: EMPTY
16863: LIST
16864: PUSH
16865: LD_INT 30
16867: PUSH
16868: LD_INT 0
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: PPUSH
16880: CALL_OW 69
16884: AND
16885: IFFALSE 16932
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16887: LD_ADDR_VAR 0 4
16891: PUSH
16892: LD_INT 22
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 50
16904: PUSH
16905: EMPTY
16906: LIST
16907: PUSH
16908: LD_INT 30
16910: PUSH
16911: LD_INT 0
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: PPUSH
16923: CALL_OW 69
16927: PUSH
16928: LD_INT 1
16930: ARRAY
16931: ST_TO_ADDR
// InGameOn ;
16932: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16936: LD_EXP 38
16940: PPUSH
16941: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
16945: LD_EXP 38
16949: PPUSH
16950: LD_STRING DI-1-free
16952: PPUSH
16953: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
16957: LD_EXP 28
16961: PPUSH
16962: LD_EXP 38
16966: PPUSH
16967: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
16971: LD_EXP 28
16975: PPUSH
16976: LD_STRING DH-1-free
16978: PPUSH
16979: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
16983: LD_EXP 38
16987: PPUSH
16988: LD_EXP 28
16992: PPUSH
16993: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
16997: LD_EXP 38
17001: PPUSH
17002: LD_STRING DI-2-free
17004: PPUSH
17005: CALL_OW 88
// changeClass := 0 ;
17009: LD_ADDR_VAR 0 1
17013: PUSH
17014: LD_INT 0
17016: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17017: LD_STRING IbrahimJoinQuery
17019: PPUSH
17020: CALL_OW 97
17024: PUSH
17025: LD_INT 1
17027: DOUBLE
17028: EQUAL
17029: IFTRUE 17033
17031: GO 17044
17033: POP
// begin changeClass := 1 ;
17034: LD_ADDR_VAR 0 1
17038: PUSH
17039: LD_INT 1
17041: ST_TO_ADDR
// end ; 2 :
17042: GO 17284
17044: LD_INT 2
17046: DOUBLE
17047: EQUAL
17048: IFTRUE 17052
17050: GO 17204
17052: POP
// begin Say ( Heike , DH-1-decline ) ;
17053: LD_EXP 28
17057: PPUSH
17058: LD_STRING DH-1-decline
17060: PPUSH
17061: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17065: LD_EXP 38
17069: PPUSH
17070: LD_STRING DI-1-decline
17072: PPUSH
17073: CALL_OW 88
// InGameOff ;
17077: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17081: LD_EXP 38
17085: PPUSH
17086: LD_INT 30
17088: PPUSH
17089: LD_INT 1
17091: PPUSH
17092: CALL_OW 111
// p := 0 ;
17096: LD_ADDR_VAR 0 3
17100: PUSH
17101: LD_INT 0
17103: ST_TO_ADDR
// repeat p := p + 1 ;
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: LD_VAR 0 3
17113: PUSH
17114: LD_INT 1
17116: PLUS
17117: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17118: LD_INT 35
17120: PPUSH
17121: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17125: LD_EXP 38
17129: PPUSH
17130: LD_INT 30
17132: PPUSH
17133: LD_INT 1
17135: PPUSH
17136: CALL_OW 307
17140: PUSH
17141: LD_INT 22
17143: PUSH
17144: LD_INT 2
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 101
17153: PUSH
17154: LD_INT 6
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PPUSH
17165: CALL_OW 69
17169: NOT
17170: OR
17171: PUSH
17172: LD_VAR 0 3
17176: PUSH
17177: LD_INT 10
17179: GREATER
17180: OR
17181: IFFALSE 17104
// RemoveUnit ( Ibrahim ) ;
17183: LD_EXP 38
17187: PPUSH
17188: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17192: LD_INT 1
17194: PPUSH
17195: LD_STRING 03_IbrahimHasEscaped
17197: PPUSH
17198: CALL_OW 39
// end ; 3 :
17202: GO 17284
17204: LD_INT 3
17206: DOUBLE
17207: EQUAL
17208: IFTRUE 17212
17210: GO 17283
17212: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17213: LD_EXP 28
17217: PPUSH
17218: LD_STRING DH-1-radio-hq
17220: PPUSH
17221: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17225: LD_EXP 37
17229: PPUSH
17230: LD_STRING DO-1-radio-hq
17232: PPUSH
17233: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17237: LD_EXP 28
17241: PPUSH
17242: LD_STRING DH-2-radio-hq
17244: PPUSH
17245: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17249: LD_EXP 37
17253: PPUSH
17254: LD_STRING DO-2-radio-hq
17256: PPUSH
17257: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17261: LD_EXP 28
17265: PPUSH
17266: LD_STRING DH-3-radio-hq
17268: PPUSH
17269: CALL_OW 88
// changeClass := 1 ;
17273: LD_ADDR_VAR 0 1
17277: PUSH
17278: LD_INT 1
17280: ST_TO_ADDR
// end ; end ;
17281: GO 17284
17283: POP
// if changeClass then
17284: LD_VAR 0 1
17288: IFFALSE 17576
// begin Say ( Heike , DH-1-agree ) ;
17290: LD_EXP 28
17294: PPUSH
17295: LD_STRING DH-1-agree
17297: PPUSH
17298: CALL_OW 88
// if IsOk ( Givi ) then
17302: LD_EXP 29
17306: PPUSH
17307: CALL_OW 302
17311: IFFALSE 17349
// begin Say ( Givi , DG-1-agree ) ;
17313: LD_EXP 29
17317: PPUSH
17318: LD_STRING DG-1-agree
17320: PPUSH
17321: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17325: LD_EXP 28
17329: PPUSH
17330: LD_STRING DH-2-agree
17332: PPUSH
17333: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17337: LD_EXP 29
17341: PPUSH
17342: LD_STRING DG-2-agree
17344: PPUSH
17345: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17349: LD_VAR 0 4
17353: PPUSH
17354: CALL_OW 313
17358: PUSH
17359: LD_INT 6
17361: EQUAL
17362: IFFALSE 17382
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17364: LD_VAR 0 4
17368: PPUSH
17369: CALL_OW 313
17373: PUSH
17374: LD_INT 1
17376: ARRAY
17377: PPUSH
17378: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17382: LD_EXP 38
17386: PPUSH
17387: LD_INT 2
17389: PPUSH
17390: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17394: LD_ADDR_VAR 0 5
17398: PUSH
17399: LD_EXP 38
17403: PPUSH
17404: CALL_OW 250
17408: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17409: LD_ADDR_VAR 0 6
17413: PUSH
17414: LD_EXP 38
17418: PPUSH
17419: CALL_OW 251
17423: ST_TO_ADDR
// if depot then
17424: LD_VAR 0 4
17428: IFFALSE 17477
// begin ComEnterUnit ( Ibrahim , depot ) ;
17430: LD_EXP 38
17434: PPUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17444: LD_INT 35
17446: PPUSH
17447: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17451: LD_EXP 38
17455: PPUSH
17456: CALL_OW 310
17460: IFFALSE 17444
// b := IsInUnit ( Ibrahim ) ;
17462: LD_ADDR_VAR 0 2
17466: PUSH
17467: LD_EXP 38
17471: PPUSH
17472: CALL_OW 310
17476: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17477: LD_EXP 38
17481: PPUSH
17482: CALL_OW 64
// uc_side := 2 ;
17486: LD_ADDR_OWVAR 20
17490: PUSH
17491: LD_INT 2
17493: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17494: LD_ADDR_EXP 38
17498: PUSH
17499: LD_STRING Ibrahim
17501: PPUSH
17502: LD_INT 0
17504: PPUSH
17505: LD_STRING 
17507: PPUSH
17508: CALL 37380 0 3
17512: ST_TO_ADDR
// if depot then
17513: LD_VAR 0 4
17517: IFFALSE 17535
// PlaceHumanInUnit ( Ibrahim , b ) else
17519: LD_EXP 38
17523: PPUSH
17524: LD_VAR 0 2
17528: PPUSH
17529: CALL_OW 52
17533: GO 17557
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17535: LD_EXP 38
17539: PPUSH
17540: LD_VAR 0 5
17544: PPUSH
17545: LD_VAR 0 6
17549: PPUSH
17550: LD_INT 0
17552: PPUSH
17553: CALL_OW 48
// InGameOff ;
17557: CALL_OW 9
// allowConvoys := true ;
17561: LD_ADDR_EXP 12
17565: PUSH
17566: LD_INT 1
17568: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17569: LD_STRING ACH_IBRAHIM
17571: PPUSH
17572: CALL_OW 543
// end ; end ;
17576: PPOPN 6
17578: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17579: LD_EXP 33
17583: PPUSH
17584: CALL_OW 256
17588: PUSH
17589: LD_INT 3
17591: LESS
17592: IFFALSE 17659
17594: GO 17596
17596: DISABLE
// begin DialogueOn ;
17597: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17601: LD_EXP 33
17605: PPUSH
17606: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17610: LD_EXP 33
17614: PPUSH
17615: LD_STRING DK-keydeath-1
17617: PPUSH
17618: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17622: LD_EXP 28
17626: PPUSH
17627: LD_STRING DH-keydeath-2
17629: PPUSH
17630: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17634: LD_EXP 28
17638: PPUSH
17639: LD_STRING DH-keydeath-3
17641: PPUSH
17642: CALL_OW 88
// DialogueOff ;
17646: CALL_OW 7
// KillUnit ( Kaia ) ;
17650: LD_EXP 33
17654: PPUSH
17655: CALL_OW 66
// end ;
17659: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17660: LD_EXP 11
17664: PUSH
17665: LD_EXP 21
17669: PUSH
17670: LD_INT 1
17672: LESS
17673: AND
17674: IFFALSE 18214
17676: GO 17678
17678: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17679: LD_INT 22
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 2
17691: PUSH
17692: LD_INT 25
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 25
17704: PUSH
17705: LD_INT 3
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: IFFALSE 17803
// begin ChangeSideFog ( 1 , 2 ) ;
17727: LD_INT 1
17729: PPUSH
17730: LD_INT 2
17732: PPUSH
17733: CALL_OW 343
// Query ( DestroyEnemy ) ;
17737: LD_STRING DestroyEnemy
17739: PPUSH
17740: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17744: LD_INT 35
17746: PPUSH
17747: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
17751: LD_INT 22
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 2
17763: PUSH
17764: LD_INT 25
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 25
17776: PUSH
17777: LD_INT 3
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PPUSH
17793: CALL_OW 69
17797: PUSH
17798: LD_INT 0
17800: EQUAL
17801: IFFALSE 17744
// end ; DialogueOn ;
17803: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17807: LD_EXP 28
17811: PPUSH
17812: LD_STRING DH-1-final
17814: PPUSH
17815: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
17819: LD_OWVAR 1
17823: PUSH
17824: LD_INT 126000
17826: PUSH
17827: LD_INT 115500
17829: PUSH
17830: LD_INT 105000
17832: PUSH
17833: LD_INT 94500
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: PUSH
17842: LD_OWVAR 67
17846: ARRAY
17847: LESSEQUAL
17848: IFFALSE 17862
// AddMedal ( med1 , 1 ) else
17850: LD_STRING med1
17852: PPUSH
17853: LD_INT 1
17855: PPUSH
17856: CALL_OW 101
17860: GO 17873
// AddMedal ( med1 , - 1 ) ;
17862: LD_STRING med1
17864: PPUSH
17865: LD_INT 1
17867: NEG
17868: PPUSH
17869: CALL_OW 101
// if vehCounter >= 2 then
17873: LD_EXP 22
17877: PUSH
17878: LD_INT 2
17880: GREATEREQUAL
17881: IFFALSE 17895
// AddMedal ( med2 , 1 ) else
17883: LD_STRING med2
17885: PPUSH
17886: LD_INT 1
17888: PPUSH
17889: CALL_OW 101
17893: GO 17906
// AddMedal ( med2 , - 1 ) ;
17895: LD_STRING med2
17897: PPUSH
17898: LD_INT 1
17900: NEG
17901: PPUSH
17902: CALL_OW 101
// if deadCounter = 0 then
17906: LD_EXP 9
17910: PUSH
17911: LD_INT 0
17913: EQUAL
17914: IFFALSE 17928
// AddMedal ( med3 , 1 ) else
17916: LD_STRING med3
17918: PPUSH
17919: LD_INT 1
17921: PPUSH
17922: CALL_OW 101
17926: GO 17939
// AddMedal ( med3 , - 1 ) ;
17928: LD_STRING med3
17930: PPUSH
17931: LD_INT 1
17933: NEG
17934: PPUSH
17935: CALL_OW 101
// GiveMedals ( MAIN ) ;
17939: LD_STRING MAIN
17941: PPUSH
17942: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17946: LD_INT 22
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 23
17958: PUSH
17959: LD_INT 2
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 21
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: PPUSH
17981: CALL_OW 69
17985: PPUSH
17986: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17990: LD_EXP 28
17994: PPUSH
17995: LD_STRING 03_Heike
17997: PPUSH
17998: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18002: LD_EXP 32
18006: PPUSH
18007: LD_STRING 03_Aviradze
18009: PPUSH
18010: CALL_OW 38
// if Givi then
18014: LD_EXP 29
18018: IFFALSE 18032
// SaveCharacters ( Givi , 03_Givi ) ;
18020: LD_EXP 29
18024: PPUSH
18025: LD_STRING 03_Givi
18027: PPUSH
18028: CALL_OW 38
// if Mike then
18032: LD_EXP 30
18036: IFFALSE 18050
// SaveCharacters ( Mike , 03_Mike ) ;
18038: LD_EXP 30
18042: PPUSH
18043: LD_STRING 03_Mike
18045: PPUSH
18046: CALL_OW 38
// if Kamil then
18050: LD_EXP 31
18054: IFFALSE 18068
// SaveCharacters ( Kamil , 03_Kamil ) ;
18056: LD_EXP 31
18060: PPUSH
18061: LD_STRING 03_Kamil
18063: PPUSH
18064: CALL_OW 38
// if Kaia then
18068: LD_EXP 33
18072: IFFALSE 18086
// SaveCharacters ( Kaia , 03_Kaia ) ;
18074: LD_EXP 33
18078: PPUSH
18079: LD_STRING 03_Kaia
18081: PPUSH
18082: CALL_OW 38
// if Sophia then
18086: LD_EXP 34
18090: IFFALSE 18104
// SaveCharacters ( Sophia , 03_Sophia ) ;
18092: LD_EXP 34
18096: PPUSH
18097: LD_STRING 03_Sophia
18099: PPUSH
18100: CALL_OW 38
// if Markov then
18104: LD_EXP 35
18108: IFFALSE 18122
// SaveCharacters ( Markov , 03_Markov ) ;
18110: LD_EXP 35
18114: PPUSH
18115: LD_STRING 03_Markov
18117: PPUSH
18118: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18122: LD_EXP 38
18126: PUSH
18127: LD_EXP 38
18131: PPUSH
18132: CALL_OW 255
18136: PUSH
18137: LD_INT 2
18139: EQUAL
18140: AND
18141: IFFALSE 18162
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18143: LD_STRING enableBioCharacter(BIO_IBRA)
18145: PPUSH
18146: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18150: LD_EXP 38
18154: PPUSH
18155: LD_STRING 03_Ibrahim
18157: PPUSH
18158: CALL_OW 38
// end ; if heikeSecondSquad then
18162: LD_EXP 42
18166: IFFALSE 18180
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18168: LD_EXP 42
18172: PPUSH
18173: LD_STRING 03_others
18175: PPUSH
18176: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18180: LD_EXP 9
18184: PPUSH
18185: LD_STRING 03_DeadCounter
18187: PPUSH
18188: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18192: LD_STRING enableBioCharacter(BIO_OMAR)
18194: PPUSH
18195: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18199: LD_STRING enableBioCharacter(BIO_FARM)
18201: PPUSH
18202: CALL_OW 559
// YouWin ;
18206: CALL_OW 103
// DialogueOff ;
18210: CALL_OW 7
// end ; end_of_file
18214: END
// on UnitDestroyed ( un ) do begin if un = Heike then
18215: LD_VAR 0 1
18219: PUSH
18220: LD_EXP 28
18224: EQUAL
18225: IFFALSE 18234
// YouLost ( Heike ) ;
18227: LD_STRING Heike
18229: PPUSH
18230: CALL_OW 104
// if un = Aviradze then
18234: LD_VAR 0 1
18238: PUSH
18239: LD_EXP 32
18243: EQUAL
18244: IFFALSE 18253
// YouLost ( Aviradze ) ;
18246: LD_STRING Aviradze
18248: PPUSH
18249: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18253: LD_VAR 0 1
18257: PUSH
18258: LD_INT 11
18260: EQUAL
18261: PUSH
18262: LD_EXP 11
18266: NOT
18267: AND
18268: IFFALSE 18277
// YouLost ( Depot ) ;
18270: LD_STRING Depot
18272: PPUSH
18273: CALL_OW 104
// if un = arDepot then
18277: LD_VAR 0 1
18281: PUSH
18282: LD_INT 5
18284: EQUAL
18285: IFFALSE 18294
// YouLost ( FarmerDepot ) ;
18287: LD_STRING FarmerDepot
18289: PPUSH
18290: CALL_OW 104
// if un = Farmer then
18294: LD_VAR 0 1
18298: PUSH
18299: LD_EXP 36
18303: EQUAL
18304: IFFALSE 18313
// YouLost ( Farmer ) ;
18306: LD_STRING Farmer
18308: PPUSH
18309: CALL_OW 104
// if un in usForces then
18313: LD_VAR 0 1
18317: PUSH
18318: LD_EXP 44
18322: IN
18323: IFFALSE 18341
// usForces := usForces diff un ;
18325: LD_ADDR_EXP 44
18329: PUSH
18330: LD_EXP 44
18334: PUSH
18335: LD_VAR 0 1
18339: DIFF
18340: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18341: LD_VAR 0 1
18345: PUSH
18346: LD_INT 22
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 23
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 21
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 69
18385: IN
18386: IFFALSE 18402
// deadCounter := deadCounter + 1 ;
18388: LD_ADDR_EXP 9
18392: PUSH
18393: LD_EXP 9
18397: PUSH
18398: LD_INT 1
18400: PLUS
18401: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18402: LD_VAR 0 1
18406: PUSH
18407: LD_INT 22
18409: PUSH
18410: LD_INT 4
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 34
18419: PUSH
18420: LD_INT 12
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PPUSH
18431: CALL_OW 69
18435: IN
18436: PUSH
18437: LD_EXP 18
18441: NOT
18442: AND
18443: IFFALSE 18453
// firstConvoyDestroyed := true ;
18445: LD_ADDR_EXP 18
18449: PUSH
18450: LD_INT 1
18452: ST_TO_ADDR
// if un in usAttackers then
18453: LD_VAR 0 1
18457: PUSH
18458: LD_EXP 47
18462: IN
18463: IFFALSE 18481
// usAttackers := usAttackers diff un ;
18465: LD_ADDR_EXP 47
18469: PUSH
18470: LD_EXP 47
18474: PUSH
18475: LD_VAR 0 1
18479: DIFF
18480: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18481: LD_VAR 0 1
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_INT 5
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 21
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 69
18514: IN
18515: IFFALSE 18531
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18517: LD_ADDR_EXP 20
18521: PUSH
18522: LD_EXP 20
18526: PUSH
18527: LD_INT 1
18529: PLUS
18530: ST_TO_ADDR
// end ;
18531: PPOPN 1
18533: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18534: LD_VAR 0 2
18538: PUSH
18539: LD_EXP 38
18543: EQUAL
18544: PUSH
18545: LD_EXP 25
18549: AND
18550: IFFALSE 18735
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18552: LD_INT 22
18554: PUSH
18555: LD_INT 2
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 50
18574: PUSH
18575: EMPTY
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: PPUSH
18583: CALL_OW 69
18587: IFFALSE 18641
// begin InGameOn ;
18589: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18593: LD_EXP 38
18597: PPUSH
18598: LD_INT 11
18600: PPUSH
18601: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18605: LD_INT 35
18607: PPUSH
18608: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18612: LD_EXP 38
18616: PPUSH
18617: LD_INT 11
18619: PPUSH
18620: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18624: LD_EXP 38
18628: PPUSH
18629: CALL_OW 310
18633: IFFALSE 18605
// InGameOff ;
18635: CALL_OW 9
// end else
18639: GO 18735
// begin SetSide ( Ibrahim , 6 ) ;
18641: LD_EXP 38
18645: PPUSH
18646: LD_INT 6
18648: PPUSH
18649: CALL_OW 235
// ibrahimInDepot := false ;
18653: LD_ADDR_EXP 25
18657: PUSH
18658: LD_INT 0
18660: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18661: LD_EXP 38
18665: PPUSH
18666: LD_INT 30
18668: PPUSH
18669: LD_INT 1
18671: PPUSH
18672: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18676: LD_INT 35
18678: PPUSH
18679: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18683: LD_EXP 38
18687: PPUSH
18688: LD_INT 30
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18698: LD_EXP 38
18702: PPUSH
18703: LD_INT 30
18705: PPUSH
18706: LD_INT 1
18708: PPUSH
18709: CALL_OW 307
18713: PUSH
18714: LD_EXP 38
18718: PPUSH
18719: CALL_OW 301
18723: OR
18724: IFFALSE 18676
// RemoveUnit ( Ibrahim ) ;
18726: LD_EXP 38
18730: PPUSH
18731: CALL_OW 64
// end ; end ; end ;
18735: PPOPN 2
18737: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18738: LD_VAR 0 2
18742: PUSH
18743: LD_EXP 28
18747: EQUAL
18748: PUSH
18749: LD_VAR 0 1
18753: PUSH
18754: LD_INT 11
18756: EQUAL
18757: AND
18758: PUSH
18759: LD_EXP 25
18763: AND
18764: IFFALSE 18770
// IbrahimQuery ;
18766: CALL 16390 0 0
// end ;
18770: PPOPN 2
18772: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18773: LD_VAR 0 1
18777: PPUSH
18778: CALL_OW 141
// if oldId in usAttackers then
18782: LD_VAR 0 2
18786: PUSH
18787: LD_EXP 47
18791: IN
18792: IFFALSE 18810
// usAttackers := usAttackers diff oldId ;
18794: LD_ADDR_EXP 47
18798: PUSH
18799: LD_EXP 47
18803: PUSH
18804: LD_VAR 0 2
18808: DIFF
18809: ST_TO_ADDR
// if newId in usAttackers then
18810: LD_VAR 0 1
18814: PUSH
18815: LD_EXP 47
18819: IN
18820: IFFALSE 18838
// usAttackers := usAttackers diff newId ;
18822: LD_ADDR_EXP 47
18826: PUSH
18827: LD_EXP 47
18831: PUSH
18832: LD_VAR 0 1
18836: DIFF
18837: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18838: LD_VAR 0 3
18842: PUSH
18843: LD_INT 4
18845: EQUAL
18846: PUSH
18847: LD_EXP 18
18851: NOT
18852: AND
18853: IFFALSE 18863
// firstConvoyDestroyed := true ;
18855: LD_ADDR_EXP 18
18859: PUSH
18860: LD_INT 1
18862: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18863: LD_VAR 0 1
18867: PPUSH
18868: CALL_OW 264
18872: PUSH
18873: LD_INT 12
18875: EQUAL
18876: IFFALSE 18914
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18878: LD_ADDR_EXP 13
18882: PUSH
18883: LD_EXP 13
18887: PUSH
18888: LD_INT 1
18890: PLUS
18891: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18892: LD_VAR 0 1
18896: PPUSH
18897: LD_INT 1
18899: PPUSH
18900: CALL_OW 289
18904: PUSH
18905: LD_INT 0
18907: EQUAL
18908: IFFALSE 18914
// EmptyCargoDialog ;
18910: CALL 15024 0 0
// end ; end ;
18914: PPOPN 4
18916: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18917: LD_VAR 0 1
18921: PUSH
18922: LD_INT 2
18924: EQUAL
18925: PUSH
18926: LD_VAR 0 2
18930: PUSH
18931: LD_INT 5
18933: EQUAL
18934: AND
18935: IFFALSE 18944
// YouLost ( Attack ) ;
18937: LD_STRING Attack
18939: PPUSH
18940: CALL_OW 104
// end ;
18944: PPOPN 2
18946: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 255
18956: PUSH
18957: LD_INT 1
18959: EQUAL
18960: PUSH
18961: LD_EXP 6
18965: NOT
18966: AND
18967: IFFALSE 19101
// begin if GetBType ( b ) = b_lab then
18969: LD_VAR 0 1
18973: PPUSH
18974: CALL_OW 266
18978: PUSH
18979: LD_INT 6
18981: EQUAL
18982: IFFALSE 19022
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18984: LD_EXP 44
18988: PPUSH
18989: LD_INT 25
18991: PUSH
18992: LD_INT 4
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PPUSH
18999: CALL_OW 72
19003: PPUSH
19004: LD_VAR 0 1
19008: PPUSH
19009: CALL_OW 120
// AmLabResearch ( b ) ;
19013: LD_VAR 0 1
19017: PPUSH
19018: CALL 5203 0 1
// end ; if GetBType ( b ) = b_armoury then
19022: LD_VAR 0 1
19026: PPUSH
19027: CALL_OW 266
19031: PUSH
19032: LD_INT 4
19034: EQUAL
19035: IFFALSE 19083
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19037: LD_EXP 44
19041: PPUSH
19042: LD_INT 25
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 3
19054: PUSH
19055: LD_INT 54
19057: PUSH
19058: EMPTY
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PPUSH
19069: CALL_OW 72
19073: PPUSH
19074: LD_VAR 0 1
19078: PPUSH
19079: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19083: LD_ADDR_EXP 46
19087: PUSH
19088: LD_EXP 46
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: CALL_OW 3
19100: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL_OW 255
19110: PUSH
19111: LD_INT 5
19113: EQUAL
19114: IFFALSE 19128
// SetBLevel ( b , 5 ) ;
19116: LD_VAR 0 1
19120: PPUSH
19121: LD_INT 5
19123: PPUSH
19124: CALL_OW 241
// end ;
19128: PPOPN 1
19130: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19131: LD_VAR 0 1
19135: PPUSH
19136: CALL_OW 255
19140: PUSH
19141: LD_INT 2
19143: EQUAL
19144: IFFALSE 19160
// vehCounter := vehCounter + 1 ;
19146: LD_ADDR_EXP 22
19150: PUSH
19151: LD_EXP 22
19155: PUSH
19156: LD_INT 1
19158: PLUS
19159: ST_TO_ADDR
// end ;
19160: PPOPN 2
19162: END
// on SailEvent ( event ) do begin if event = eventAttack then
19163: LD_VAR 0 1
19167: PUSH
19168: LD_EXP 24
19172: EQUAL
19173: IFFALSE 19179
// AmericanAttack ;
19175: CALL 6698 0 0
// end ; end_of_file
19179: PPOPN 1
19181: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19182: LD_OWVAR 1
19186: PUSH
19187: LD_INT 10500
19189: PUSH
19190: LD_INT 9800
19192: PUSH
19193: LD_INT 9450
19195: PUSH
19196: LD_INT 9100
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: PUSH
19205: LD_OWVAR 67
19209: ARRAY
19210: LESSEQUAL
19211: IFFALSE 19238
19213: GO 19215
19215: DISABLE
// begin enable ;
19216: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19217: LD_INT 1
19219: PPUSH
19220: LD_INT 5
19222: PPUSH
19223: CALL_OW 12
19227: PPUSH
19228: LD_INT 9
19230: PPUSH
19231: LD_INT 1
19233: PPUSH
19234: CALL_OW 55
// end ;
19238: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 , 25 25$00 ] [ Difficulty ] do
19239: LD_EXP 6
19243: PUSH
19244: LD_OWVAR 1
19248: PUSH
19249: LD_INT 56700
19251: PUSH
19252: LD_INT 55650
19254: PUSH
19255: LD_INT 54600
19257: PUSH
19258: LD_INT 52500
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: PUSH
19267: LD_OWVAR 67
19271: ARRAY
19272: LESSEQUAL
19273: AND
19274: IFFALSE 19301
19276: GO 19278
19278: DISABLE
// begin enable ;
19279: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19280: LD_INT 3
19282: PPUSH
19283: LD_INT 5
19285: PPUSH
19286: CALL_OW 12
19290: PPUSH
19291: LD_INT 9
19293: PPUSH
19294: LD_INT 1
19296: PPUSH
19297: CALL_OW 55
// end ; end_of_file
19301: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19302: LD_EXP 11
19306: NOT
19307: PUSH
19308: LD_EXP 16
19312: AND
19313: PUSH
19314: LD_EXP 4
19318: AND
19319: PUSH
19320: LD_EXP 15
19324: PUSH
19325: LD_EXP 16
19329: LESSEQUAL
19330: AND
19331: IFFALSE 19421
19333: GO 19335
19335: DISABLE
// begin enable ;
19336: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19337: LD_ADDR_OWVAR 47
19341: PUSH
19342: LD_STRING #X103-1
19344: PUSH
19345: LD_EXP 16
19349: PUSH
19350: LD_EXP 15
19354: MINUS
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19360: LD_ADDR_EXP 15
19364: PUSH
19365: LD_INT 5
19367: PPUSH
19368: CALL_OW 274
19372: PPUSH
19373: LD_INT 1
19375: PPUSH
19376: CALL_OW 275
19380: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19381: LD_INT 10
19383: PPUSH
19384: LD_INT 1
19386: PPUSH
19387: CALL_OW 287
19391: PUSH
19392: LD_INT 0
19394: EQUAL
19395: IFFALSE 19413
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19397: LD_ADDR_EXP 17
19401: PUSH
19402: LD_EXP 17
19406: PUSH
19407: LD_INT 35
19409: MINUS
19410: ST_TO_ADDR
19411: GO 19421
// farmerCratesCounter := 30 30$00 ;
19413: LD_ADDR_EXP 17
19417: PUSH
19418: LD_INT 63000
19420: ST_TO_ADDR
// end ; end_of_file
19421: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19422: LD_INT 0
19424: PPUSH
// ar_miner := 81 ;
19425: LD_ADDR_EXP 55
19429: PUSH
19430: LD_INT 81
19432: ST_TO_ADDR
// ar_crane := 88 ;
19433: LD_ADDR_EXP 54
19437: PUSH
19438: LD_INT 88
19440: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19441: LD_ADDR_EXP 49
19445: PUSH
19446: LD_INT 89
19448: ST_TO_ADDR
// us_hack := 99 ;
19449: LD_ADDR_EXP 50
19453: PUSH
19454: LD_INT 99
19456: ST_TO_ADDR
// us_artillery := 97 ;
19457: LD_ADDR_EXP 51
19461: PUSH
19462: LD_INT 97
19464: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19465: LD_ADDR_EXP 52
19469: PUSH
19470: LD_INT 91
19472: ST_TO_ADDR
// ar_mortar := 92 ;
19473: LD_ADDR_EXP 53
19477: PUSH
19478: LD_INT 92
19480: ST_TO_ADDR
// ru_radar := 98 ;
19481: LD_ADDR_EXP 48
19485: PUSH
19486: LD_INT 98
19488: ST_TO_ADDR
// tech_Artillery := 80 ;
19489: LD_ADDR_EXP 56
19493: PUSH
19494: LD_INT 80
19496: ST_TO_ADDR
// tech_RadMat := 81 ;
19497: LD_ADDR_EXP 57
19501: PUSH
19502: LD_INT 81
19504: ST_TO_ADDR
// tech_BasicTools := 82 ;
19505: LD_ADDR_EXP 58
19509: PUSH
19510: LD_INT 82
19512: ST_TO_ADDR
// tech_Cargo := 83 ;
19513: LD_ADDR_EXP 59
19517: PUSH
19518: LD_INT 83
19520: ST_TO_ADDR
// tech_Track := 84 ;
19521: LD_ADDR_EXP 60
19525: PUSH
19526: LD_INT 84
19528: ST_TO_ADDR
// tech_Crane := 85 ;
19529: LD_ADDR_EXP 61
19533: PUSH
19534: LD_INT 85
19536: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19537: LD_ADDR_EXP 62
19541: PUSH
19542: LD_INT 86
19544: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19545: LD_ADDR_EXP 63
19549: PUSH
19550: LD_INT 87
19552: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19553: LD_ADDR_EXP 64
19557: PUSH
19558: LD_INT 88
19560: ST_TO_ADDR
// class_mastodont := 31 ;
19561: LD_ADDR_EXP 65
19565: PUSH
19566: LD_INT 31
19568: ST_TO_ADDR
// class_horse := 21 ;
19569: LD_ADDR_EXP 66
19573: PUSH
19574: LD_INT 21
19576: ST_TO_ADDR
// end ;
19577: LD_VAR 0 1
19581: RET
// every 1 do
19582: GO 19584
19584: DISABLE
// InitGlobalVariables ; end_of_file
19585: CALL 19422 0 0
19589: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19590: LD_INT 0
19592: PPUSH
// if p2 = 100 then
19593: LD_VAR 0 2
19597: PUSH
19598: LD_INT 100
19600: EQUAL
19601: IFFALSE 20604
// begin if not StreamModeActive then
19603: LD_EXP 67
19607: NOT
19608: IFFALSE 19618
// StreamModeActive := true ;
19610: LD_ADDR_EXP 67
19614: PUSH
19615: LD_INT 1
19617: ST_TO_ADDR
// if p3 = 0 then
19618: LD_VAR 0 3
19622: PUSH
19623: LD_INT 0
19625: EQUAL
19626: IFFALSE 19632
// InitStreamMode ;
19628: CALL 20764 0 0
// if p3 = 1 then
19632: LD_VAR 0 3
19636: PUSH
19637: LD_INT 1
19639: EQUAL
19640: IFFALSE 19650
// sRocket := true ;
19642: LD_ADDR_EXP 72
19646: PUSH
19647: LD_INT 1
19649: ST_TO_ADDR
// if p3 = 2 then
19650: LD_VAR 0 3
19654: PUSH
19655: LD_INT 2
19657: EQUAL
19658: IFFALSE 19668
// sSpeed := true ;
19660: LD_ADDR_EXP 71
19664: PUSH
19665: LD_INT 1
19667: ST_TO_ADDR
// if p3 = 3 then
19668: LD_VAR 0 3
19672: PUSH
19673: LD_INT 3
19675: EQUAL
19676: IFFALSE 19686
// sEngine := true ;
19678: LD_ADDR_EXP 73
19682: PUSH
19683: LD_INT 1
19685: ST_TO_ADDR
// if p3 = 4 then
19686: LD_VAR 0 3
19690: PUSH
19691: LD_INT 4
19693: EQUAL
19694: IFFALSE 19704
// sSpec := true ;
19696: LD_ADDR_EXP 70
19700: PUSH
19701: LD_INT 1
19703: ST_TO_ADDR
// if p3 = 5 then
19704: LD_VAR 0 3
19708: PUSH
19709: LD_INT 5
19711: EQUAL
19712: IFFALSE 19722
// sLevel := true ;
19714: LD_ADDR_EXP 74
19718: PUSH
19719: LD_INT 1
19721: ST_TO_ADDR
// if p3 = 6 then
19722: LD_VAR 0 3
19726: PUSH
19727: LD_INT 6
19729: EQUAL
19730: IFFALSE 19740
// sArmoury := true ;
19732: LD_ADDR_EXP 75
19736: PUSH
19737: LD_INT 1
19739: ST_TO_ADDR
// if p3 = 7 then
19740: LD_VAR 0 3
19744: PUSH
19745: LD_INT 7
19747: EQUAL
19748: IFFALSE 19758
// sRadar := true ;
19750: LD_ADDR_EXP 76
19754: PUSH
19755: LD_INT 1
19757: ST_TO_ADDR
// if p3 = 8 then
19758: LD_VAR 0 3
19762: PUSH
19763: LD_INT 8
19765: EQUAL
19766: IFFALSE 19776
// sBunker := true ;
19768: LD_ADDR_EXP 77
19772: PUSH
19773: LD_INT 1
19775: ST_TO_ADDR
// if p3 = 9 then
19776: LD_VAR 0 3
19780: PUSH
19781: LD_INT 9
19783: EQUAL
19784: IFFALSE 19794
// sHack := true ;
19786: LD_ADDR_EXP 78
19790: PUSH
19791: LD_INT 1
19793: ST_TO_ADDR
// if p3 = 10 then
19794: LD_VAR 0 3
19798: PUSH
19799: LD_INT 10
19801: EQUAL
19802: IFFALSE 19812
// sFire := true ;
19804: LD_ADDR_EXP 79
19808: PUSH
19809: LD_INT 1
19811: ST_TO_ADDR
// if p3 = 11 then
19812: LD_VAR 0 3
19816: PUSH
19817: LD_INT 11
19819: EQUAL
19820: IFFALSE 19830
// sRefresh := true ;
19822: LD_ADDR_EXP 80
19826: PUSH
19827: LD_INT 1
19829: ST_TO_ADDR
// if p3 = 12 then
19830: LD_VAR 0 3
19834: PUSH
19835: LD_INT 12
19837: EQUAL
19838: IFFALSE 19848
// sExp := true ;
19840: LD_ADDR_EXP 81
19844: PUSH
19845: LD_INT 1
19847: ST_TO_ADDR
// if p3 = 13 then
19848: LD_VAR 0 3
19852: PUSH
19853: LD_INT 13
19855: EQUAL
19856: IFFALSE 19866
// sDepot := true ;
19858: LD_ADDR_EXP 82
19862: PUSH
19863: LD_INT 1
19865: ST_TO_ADDR
// if p3 = 14 then
19866: LD_VAR 0 3
19870: PUSH
19871: LD_INT 14
19873: EQUAL
19874: IFFALSE 19884
// sFlag := true ;
19876: LD_ADDR_EXP 83
19880: PUSH
19881: LD_INT 1
19883: ST_TO_ADDR
// if p3 = 15 then
19884: LD_VAR 0 3
19888: PUSH
19889: LD_INT 15
19891: EQUAL
19892: IFFALSE 19902
// sKamikadze := true ;
19894: LD_ADDR_EXP 91
19898: PUSH
19899: LD_INT 1
19901: ST_TO_ADDR
// if p3 = 16 then
19902: LD_VAR 0 3
19906: PUSH
19907: LD_INT 16
19909: EQUAL
19910: IFFALSE 19920
// sTroll := true ;
19912: LD_ADDR_EXP 92
19916: PUSH
19917: LD_INT 1
19919: ST_TO_ADDR
// if p3 = 17 then
19920: LD_VAR 0 3
19924: PUSH
19925: LD_INT 17
19927: EQUAL
19928: IFFALSE 19938
// sSlow := true ;
19930: LD_ADDR_EXP 93
19934: PUSH
19935: LD_INT 1
19937: ST_TO_ADDR
// if p3 = 18 then
19938: LD_VAR 0 3
19942: PUSH
19943: LD_INT 18
19945: EQUAL
19946: IFFALSE 19956
// sLack := true ;
19948: LD_ADDR_EXP 94
19952: PUSH
19953: LD_INT 1
19955: ST_TO_ADDR
// if p3 = 19 then
19956: LD_VAR 0 3
19960: PUSH
19961: LD_INT 19
19963: EQUAL
19964: IFFALSE 19974
// sTank := true ;
19966: LD_ADDR_EXP 96
19970: PUSH
19971: LD_INT 1
19973: ST_TO_ADDR
// if p3 = 20 then
19974: LD_VAR 0 3
19978: PUSH
19979: LD_INT 20
19981: EQUAL
19982: IFFALSE 19992
// sRemote := true ;
19984: LD_ADDR_EXP 97
19988: PUSH
19989: LD_INT 1
19991: ST_TO_ADDR
// if p3 = 21 then
19992: LD_VAR 0 3
19996: PUSH
19997: LD_INT 21
19999: EQUAL
20000: IFFALSE 20010
// sPowell := true ;
20002: LD_ADDR_EXP 98
20006: PUSH
20007: LD_INT 1
20009: ST_TO_ADDR
// if p3 = 22 then
20010: LD_VAR 0 3
20014: PUSH
20015: LD_INT 22
20017: EQUAL
20018: IFFALSE 20028
// sTeleport := true ;
20020: LD_ADDR_EXP 101
20024: PUSH
20025: LD_INT 1
20027: ST_TO_ADDR
// if p3 = 23 then
20028: LD_VAR 0 3
20032: PUSH
20033: LD_INT 23
20035: EQUAL
20036: IFFALSE 20046
// sOilTower := true ;
20038: LD_ADDR_EXP 103
20042: PUSH
20043: LD_INT 1
20045: ST_TO_ADDR
// if p3 = 24 then
20046: LD_VAR 0 3
20050: PUSH
20051: LD_INT 24
20053: EQUAL
20054: IFFALSE 20064
// sShovel := true ;
20056: LD_ADDR_EXP 104
20060: PUSH
20061: LD_INT 1
20063: ST_TO_ADDR
// if p3 = 25 then
20064: LD_VAR 0 3
20068: PUSH
20069: LD_INT 25
20071: EQUAL
20072: IFFALSE 20082
// sSheik := true ;
20074: LD_ADDR_EXP 105
20078: PUSH
20079: LD_INT 1
20081: ST_TO_ADDR
// if p3 = 26 then
20082: LD_VAR 0 3
20086: PUSH
20087: LD_INT 26
20089: EQUAL
20090: IFFALSE 20100
// sEarthquake := true ;
20092: LD_ADDR_EXP 107
20096: PUSH
20097: LD_INT 1
20099: ST_TO_ADDR
// if p3 = 27 then
20100: LD_VAR 0 3
20104: PUSH
20105: LD_INT 27
20107: EQUAL
20108: IFFALSE 20118
// sAI := true ;
20110: LD_ADDR_EXP 108
20114: PUSH
20115: LD_INT 1
20117: ST_TO_ADDR
// if p3 = 28 then
20118: LD_VAR 0 3
20122: PUSH
20123: LD_INT 28
20125: EQUAL
20126: IFFALSE 20136
// sCargo := true ;
20128: LD_ADDR_EXP 111
20132: PUSH
20133: LD_INT 1
20135: ST_TO_ADDR
// if p3 = 29 then
20136: LD_VAR 0 3
20140: PUSH
20141: LD_INT 29
20143: EQUAL
20144: IFFALSE 20154
// sDLaser := true ;
20146: LD_ADDR_EXP 112
20150: PUSH
20151: LD_INT 1
20153: ST_TO_ADDR
// if p3 = 30 then
20154: LD_VAR 0 3
20158: PUSH
20159: LD_INT 30
20161: EQUAL
20162: IFFALSE 20172
// sExchange := true ;
20164: LD_ADDR_EXP 113
20168: PUSH
20169: LD_INT 1
20171: ST_TO_ADDR
// if p3 = 31 then
20172: LD_VAR 0 3
20176: PUSH
20177: LD_INT 31
20179: EQUAL
20180: IFFALSE 20190
// sFac := true ;
20182: LD_ADDR_EXP 114
20186: PUSH
20187: LD_INT 1
20189: ST_TO_ADDR
// if p3 = 32 then
20190: LD_VAR 0 3
20194: PUSH
20195: LD_INT 32
20197: EQUAL
20198: IFFALSE 20208
// sPower := true ;
20200: LD_ADDR_EXP 115
20204: PUSH
20205: LD_INT 1
20207: ST_TO_ADDR
// if p3 = 33 then
20208: LD_VAR 0 3
20212: PUSH
20213: LD_INT 33
20215: EQUAL
20216: IFFALSE 20226
// sRandom := true ;
20218: LD_ADDR_EXP 116
20222: PUSH
20223: LD_INT 1
20225: ST_TO_ADDR
// if p3 = 34 then
20226: LD_VAR 0 3
20230: PUSH
20231: LD_INT 34
20233: EQUAL
20234: IFFALSE 20244
// sShield := true ;
20236: LD_ADDR_EXP 117
20240: PUSH
20241: LD_INT 1
20243: ST_TO_ADDR
// if p3 = 35 then
20244: LD_VAR 0 3
20248: PUSH
20249: LD_INT 35
20251: EQUAL
20252: IFFALSE 20262
// sTime := true ;
20254: LD_ADDR_EXP 118
20258: PUSH
20259: LD_INT 1
20261: ST_TO_ADDR
// if p3 = 36 then
20262: LD_VAR 0 3
20266: PUSH
20267: LD_INT 36
20269: EQUAL
20270: IFFALSE 20280
// sTools := true ;
20272: LD_ADDR_EXP 119
20276: PUSH
20277: LD_INT 1
20279: ST_TO_ADDR
// if p3 = 101 then
20280: LD_VAR 0 3
20284: PUSH
20285: LD_INT 101
20287: EQUAL
20288: IFFALSE 20298
// sSold := true ;
20290: LD_ADDR_EXP 84
20294: PUSH
20295: LD_INT 1
20297: ST_TO_ADDR
// if p3 = 102 then
20298: LD_VAR 0 3
20302: PUSH
20303: LD_INT 102
20305: EQUAL
20306: IFFALSE 20316
// sDiff := true ;
20308: LD_ADDR_EXP 85
20312: PUSH
20313: LD_INT 1
20315: ST_TO_ADDR
// if p3 = 103 then
20316: LD_VAR 0 3
20320: PUSH
20321: LD_INT 103
20323: EQUAL
20324: IFFALSE 20334
// sFog := true ;
20326: LD_ADDR_EXP 88
20330: PUSH
20331: LD_INT 1
20333: ST_TO_ADDR
// if p3 = 104 then
20334: LD_VAR 0 3
20338: PUSH
20339: LD_INT 104
20341: EQUAL
20342: IFFALSE 20352
// sReset := true ;
20344: LD_ADDR_EXP 89
20348: PUSH
20349: LD_INT 1
20351: ST_TO_ADDR
// if p3 = 105 then
20352: LD_VAR 0 3
20356: PUSH
20357: LD_INT 105
20359: EQUAL
20360: IFFALSE 20370
// sSun := true ;
20362: LD_ADDR_EXP 90
20366: PUSH
20367: LD_INT 1
20369: ST_TO_ADDR
// if p3 = 106 then
20370: LD_VAR 0 3
20374: PUSH
20375: LD_INT 106
20377: EQUAL
20378: IFFALSE 20388
// sTiger := true ;
20380: LD_ADDR_EXP 86
20384: PUSH
20385: LD_INT 1
20387: ST_TO_ADDR
// if p3 = 107 then
20388: LD_VAR 0 3
20392: PUSH
20393: LD_INT 107
20395: EQUAL
20396: IFFALSE 20406
// sBomb := true ;
20398: LD_ADDR_EXP 87
20402: PUSH
20403: LD_INT 1
20405: ST_TO_ADDR
// if p3 = 108 then
20406: LD_VAR 0 3
20410: PUSH
20411: LD_INT 108
20413: EQUAL
20414: IFFALSE 20424
// sWound := true ;
20416: LD_ADDR_EXP 95
20420: PUSH
20421: LD_INT 1
20423: ST_TO_ADDR
// if p3 = 109 then
20424: LD_VAR 0 3
20428: PUSH
20429: LD_INT 109
20431: EQUAL
20432: IFFALSE 20442
// sBetray := true ;
20434: LD_ADDR_EXP 99
20438: PUSH
20439: LD_INT 1
20441: ST_TO_ADDR
// if p3 = 110 then
20442: LD_VAR 0 3
20446: PUSH
20447: LD_INT 110
20449: EQUAL
20450: IFFALSE 20460
// sContamin := true ;
20452: LD_ADDR_EXP 100
20456: PUSH
20457: LD_INT 1
20459: ST_TO_ADDR
// if p3 = 111 then
20460: LD_VAR 0 3
20464: PUSH
20465: LD_INT 111
20467: EQUAL
20468: IFFALSE 20478
// sOil := true ;
20470: LD_ADDR_EXP 102
20474: PUSH
20475: LD_INT 1
20477: ST_TO_ADDR
// if p3 = 112 then
20478: LD_VAR 0 3
20482: PUSH
20483: LD_INT 112
20485: EQUAL
20486: IFFALSE 20496
// sStu := true ;
20488: LD_ADDR_EXP 106
20492: PUSH
20493: LD_INT 1
20495: ST_TO_ADDR
// if p3 = 113 then
20496: LD_VAR 0 3
20500: PUSH
20501: LD_INT 113
20503: EQUAL
20504: IFFALSE 20514
// sBazooka := true ;
20506: LD_ADDR_EXP 109
20510: PUSH
20511: LD_INT 1
20513: ST_TO_ADDR
// if p3 = 114 then
20514: LD_VAR 0 3
20518: PUSH
20519: LD_INT 114
20521: EQUAL
20522: IFFALSE 20532
// sMortar := true ;
20524: LD_ADDR_EXP 110
20528: PUSH
20529: LD_INT 1
20531: ST_TO_ADDR
// if p3 = 115 then
20532: LD_VAR 0 3
20536: PUSH
20537: LD_INT 115
20539: EQUAL
20540: IFFALSE 20550
// sRanger := true ;
20542: LD_ADDR_EXP 120
20546: PUSH
20547: LD_INT 1
20549: ST_TO_ADDR
// if p3 = 116 then
20550: LD_VAR 0 3
20554: PUSH
20555: LD_INT 116
20557: EQUAL
20558: IFFALSE 20568
// sComputer := true ;
20560: LD_ADDR_EXP 121
20564: PUSH
20565: LD_INT 1
20567: ST_TO_ADDR
// if p3 = 117 then
20568: LD_VAR 0 3
20572: PUSH
20573: LD_INT 117
20575: EQUAL
20576: IFFALSE 20586
// s30 := true ;
20578: LD_ADDR_EXP 122
20582: PUSH
20583: LD_INT 1
20585: ST_TO_ADDR
// if p3 = 118 then
20586: LD_VAR 0 3
20590: PUSH
20591: LD_INT 118
20593: EQUAL
20594: IFFALSE 20604
// s60 := true ;
20596: LD_ADDR_EXP 123
20600: PUSH
20601: LD_INT 1
20603: ST_TO_ADDR
// end ; if p2 = 101 then
20604: LD_VAR 0 2
20608: PUSH
20609: LD_INT 101
20611: EQUAL
20612: IFFALSE 20740
// begin case p3 of 1 :
20614: LD_VAR 0 3
20618: PUSH
20619: LD_INT 1
20621: DOUBLE
20622: EQUAL
20623: IFTRUE 20627
20625: GO 20634
20627: POP
// hHackUnlimitedResources ; 2 :
20628: CALL 32336 0 0
20632: GO 20740
20634: LD_INT 2
20636: DOUBLE
20637: EQUAL
20638: IFTRUE 20642
20640: GO 20649
20642: POP
// hHackSetLevel10 ; 3 :
20643: CALL 32469 0 0
20647: GO 20740
20649: LD_INT 3
20651: DOUBLE
20652: EQUAL
20653: IFTRUE 20657
20655: GO 20664
20657: POP
// hHackSetLevel10YourUnits ; 4 :
20658: CALL 32554 0 0
20662: GO 20740
20664: LD_INT 4
20666: DOUBLE
20667: EQUAL
20668: IFTRUE 20672
20670: GO 20679
20672: POP
// hHackInvincible ; 5 :
20673: CALL 33002 0 0
20677: GO 20740
20679: LD_INT 5
20681: DOUBLE
20682: EQUAL
20683: IFTRUE 20687
20685: GO 20694
20687: POP
// hHackInvisible ; 6 :
20688: CALL 33113 0 0
20692: GO 20740
20694: LD_INT 6
20696: DOUBLE
20697: EQUAL
20698: IFTRUE 20702
20700: GO 20709
20702: POP
// hHackChangeYourSide ; 7 :
20703: CALL 33170 0 0
20707: GO 20740
20709: LD_INT 7
20711: DOUBLE
20712: EQUAL
20713: IFTRUE 20717
20715: GO 20724
20717: POP
// hHackChangeUnitSide ; 8 :
20718: CALL 33212 0 0
20722: GO 20740
20724: LD_INT 8
20726: DOUBLE
20727: EQUAL
20728: IFTRUE 20732
20730: GO 20739
20732: POP
// hHackFog ; end ;
20733: CALL 33313 0 0
20737: GO 20740
20739: POP
// end ; end ;
20740: LD_VAR 0 7
20744: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20745: GO 20747
20747: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20748: LD_STRING initStreamRollete();
20750: PPUSH
20751: CALL_OW 559
// InitStreamMode ;
20755: CALL 20764 0 0
// DefineStreamItems ( ) ;
20759: CALL 21228 0 0
// end ;
20763: END
// function InitStreamMode ; begin
20764: LD_INT 0
20766: PPUSH
// streamModeActive := false ;
20767: LD_ADDR_EXP 67
20771: PUSH
20772: LD_INT 0
20774: ST_TO_ADDR
// normalCounter := 36 ;
20775: LD_ADDR_EXP 68
20779: PUSH
20780: LD_INT 36
20782: ST_TO_ADDR
// hardcoreCounter := 16 ;
20783: LD_ADDR_EXP 69
20787: PUSH
20788: LD_INT 16
20790: ST_TO_ADDR
// sRocket := false ;
20791: LD_ADDR_EXP 72
20795: PUSH
20796: LD_INT 0
20798: ST_TO_ADDR
// sSpeed := false ;
20799: LD_ADDR_EXP 71
20803: PUSH
20804: LD_INT 0
20806: ST_TO_ADDR
// sEngine := false ;
20807: LD_ADDR_EXP 73
20811: PUSH
20812: LD_INT 0
20814: ST_TO_ADDR
// sSpec := false ;
20815: LD_ADDR_EXP 70
20819: PUSH
20820: LD_INT 0
20822: ST_TO_ADDR
// sLevel := false ;
20823: LD_ADDR_EXP 74
20827: PUSH
20828: LD_INT 0
20830: ST_TO_ADDR
// sArmoury := false ;
20831: LD_ADDR_EXP 75
20835: PUSH
20836: LD_INT 0
20838: ST_TO_ADDR
// sRadar := false ;
20839: LD_ADDR_EXP 76
20843: PUSH
20844: LD_INT 0
20846: ST_TO_ADDR
// sBunker := false ;
20847: LD_ADDR_EXP 77
20851: PUSH
20852: LD_INT 0
20854: ST_TO_ADDR
// sHack := false ;
20855: LD_ADDR_EXP 78
20859: PUSH
20860: LD_INT 0
20862: ST_TO_ADDR
// sFire := false ;
20863: LD_ADDR_EXP 79
20867: PUSH
20868: LD_INT 0
20870: ST_TO_ADDR
// sRefresh := false ;
20871: LD_ADDR_EXP 80
20875: PUSH
20876: LD_INT 0
20878: ST_TO_ADDR
// sExp := false ;
20879: LD_ADDR_EXP 81
20883: PUSH
20884: LD_INT 0
20886: ST_TO_ADDR
// sDepot := false ;
20887: LD_ADDR_EXP 82
20891: PUSH
20892: LD_INT 0
20894: ST_TO_ADDR
// sFlag := false ;
20895: LD_ADDR_EXP 83
20899: PUSH
20900: LD_INT 0
20902: ST_TO_ADDR
// sKamikadze := false ;
20903: LD_ADDR_EXP 91
20907: PUSH
20908: LD_INT 0
20910: ST_TO_ADDR
// sTroll := false ;
20911: LD_ADDR_EXP 92
20915: PUSH
20916: LD_INT 0
20918: ST_TO_ADDR
// sSlow := false ;
20919: LD_ADDR_EXP 93
20923: PUSH
20924: LD_INT 0
20926: ST_TO_ADDR
// sLack := false ;
20927: LD_ADDR_EXP 94
20931: PUSH
20932: LD_INT 0
20934: ST_TO_ADDR
// sTank := false ;
20935: LD_ADDR_EXP 96
20939: PUSH
20940: LD_INT 0
20942: ST_TO_ADDR
// sRemote := false ;
20943: LD_ADDR_EXP 97
20947: PUSH
20948: LD_INT 0
20950: ST_TO_ADDR
// sPowell := false ;
20951: LD_ADDR_EXP 98
20955: PUSH
20956: LD_INT 0
20958: ST_TO_ADDR
// sTeleport := false ;
20959: LD_ADDR_EXP 101
20963: PUSH
20964: LD_INT 0
20966: ST_TO_ADDR
// sOilTower := false ;
20967: LD_ADDR_EXP 103
20971: PUSH
20972: LD_INT 0
20974: ST_TO_ADDR
// sShovel := false ;
20975: LD_ADDR_EXP 104
20979: PUSH
20980: LD_INT 0
20982: ST_TO_ADDR
// sSheik := false ;
20983: LD_ADDR_EXP 105
20987: PUSH
20988: LD_INT 0
20990: ST_TO_ADDR
// sEarthquake := false ;
20991: LD_ADDR_EXP 107
20995: PUSH
20996: LD_INT 0
20998: ST_TO_ADDR
// sAI := false ;
20999: LD_ADDR_EXP 108
21003: PUSH
21004: LD_INT 0
21006: ST_TO_ADDR
// sCargo := false ;
21007: LD_ADDR_EXP 111
21011: PUSH
21012: LD_INT 0
21014: ST_TO_ADDR
// sDLaser := false ;
21015: LD_ADDR_EXP 112
21019: PUSH
21020: LD_INT 0
21022: ST_TO_ADDR
// sExchange := false ;
21023: LD_ADDR_EXP 113
21027: PUSH
21028: LD_INT 0
21030: ST_TO_ADDR
// sFac := false ;
21031: LD_ADDR_EXP 114
21035: PUSH
21036: LD_INT 0
21038: ST_TO_ADDR
// sPower := false ;
21039: LD_ADDR_EXP 115
21043: PUSH
21044: LD_INT 0
21046: ST_TO_ADDR
// sRandom := false ;
21047: LD_ADDR_EXP 116
21051: PUSH
21052: LD_INT 0
21054: ST_TO_ADDR
// sShield := false ;
21055: LD_ADDR_EXP 117
21059: PUSH
21060: LD_INT 0
21062: ST_TO_ADDR
// sTime := false ;
21063: LD_ADDR_EXP 118
21067: PUSH
21068: LD_INT 0
21070: ST_TO_ADDR
// sTools := false ;
21071: LD_ADDR_EXP 119
21075: PUSH
21076: LD_INT 0
21078: ST_TO_ADDR
// sSold := false ;
21079: LD_ADDR_EXP 84
21083: PUSH
21084: LD_INT 0
21086: ST_TO_ADDR
// sDiff := false ;
21087: LD_ADDR_EXP 85
21091: PUSH
21092: LD_INT 0
21094: ST_TO_ADDR
// sFog := false ;
21095: LD_ADDR_EXP 88
21099: PUSH
21100: LD_INT 0
21102: ST_TO_ADDR
// sReset := false ;
21103: LD_ADDR_EXP 89
21107: PUSH
21108: LD_INT 0
21110: ST_TO_ADDR
// sSun := false ;
21111: LD_ADDR_EXP 90
21115: PUSH
21116: LD_INT 0
21118: ST_TO_ADDR
// sTiger := false ;
21119: LD_ADDR_EXP 86
21123: PUSH
21124: LD_INT 0
21126: ST_TO_ADDR
// sBomb := false ;
21127: LD_ADDR_EXP 87
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
// sWound := false ;
21135: LD_ADDR_EXP 95
21139: PUSH
21140: LD_INT 0
21142: ST_TO_ADDR
// sBetray := false ;
21143: LD_ADDR_EXP 99
21147: PUSH
21148: LD_INT 0
21150: ST_TO_ADDR
// sContamin := false ;
21151: LD_ADDR_EXP 100
21155: PUSH
21156: LD_INT 0
21158: ST_TO_ADDR
// sOil := false ;
21159: LD_ADDR_EXP 102
21163: PUSH
21164: LD_INT 0
21166: ST_TO_ADDR
// sStu := false ;
21167: LD_ADDR_EXP 106
21171: PUSH
21172: LD_INT 0
21174: ST_TO_ADDR
// sBazooka := false ;
21175: LD_ADDR_EXP 109
21179: PUSH
21180: LD_INT 0
21182: ST_TO_ADDR
// sMortar := false ;
21183: LD_ADDR_EXP 110
21187: PUSH
21188: LD_INT 0
21190: ST_TO_ADDR
// sRanger := false ;
21191: LD_ADDR_EXP 120
21195: PUSH
21196: LD_INT 0
21198: ST_TO_ADDR
// sComputer := false ;
21199: LD_ADDR_EXP 121
21203: PUSH
21204: LD_INT 0
21206: ST_TO_ADDR
// s30 := false ;
21207: LD_ADDR_EXP 122
21211: PUSH
21212: LD_INT 0
21214: ST_TO_ADDR
// s60 := false ;
21215: LD_ADDR_EXP 123
21219: PUSH
21220: LD_INT 0
21222: ST_TO_ADDR
// end ;
21223: LD_VAR 0 1
21227: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21228: LD_INT 0
21230: PPUSH
21231: PPUSH
21232: PPUSH
21233: PPUSH
21234: PPUSH
// result := [ ] ;
21235: LD_ADDR_VAR 0 1
21239: PUSH
21240: EMPTY
21241: ST_TO_ADDR
// if campaign_id = 1 then
21242: LD_OWVAR 69
21246: PUSH
21247: LD_INT 1
21249: EQUAL
21250: IFFALSE 24416
// begin case mission_number of 1 :
21252: LD_OWVAR 70
21256: PUSH
21257: LD_INT 1
21259: DOUBLE
21260: EQUAL
21261: IFTRUE 21265
21263: GO 21341
21265: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21266: LD_ADDR_VAR 0 1
21270: PUSH
21271: LD_INT 2
21273: PUSH
21274: LD_INT 4
21276: PUSH
21277: LD_INT 11
21279: PUSH
21280: LD_INT 12
21282: PUSH
21283: LD_INT 15
21285: PUSH
21286: LD_INT 16
21288: PUSH
21289: LD_INT 22
21291: PUSH
21292: LD_INT 23
21294: PUSH
21295: LD_INT 26
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 101
21311: PUSH
21312: LD_INT 102
21314: PUSH
21315: LD_INT 106
21317: PUSH
21318: LD_INT 116
21320: PUSH
21321: LD_INT 117
21323: PUSH
21324: LD_INT 118
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: ST_TO_ADDR
21339: GO 24414
21341: LD_INT 2
21343: DOUBLE
21344: EQUAL
21345: IFTRUE 21349
21347: GO 21433
21349: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21350: LD_ADDR_VAR 0 1
21354: PUSH
21355: LD_INT 2
21357: PUSH
21358: LD_INT 4
21360: PUSH
21361: LD_INT 11
21363: PUSH
21364: LD_INT 12
21366: PUSH
21367: LD_INT 15
21369: PUSH
21370: LD_INT 16
21372: PUSH
21373: LD_INT 22
21375: PUSH
21376: LD_INT 23
21378: PUSH
21379: LD_INT 26
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 101
21395: PUSH
21396: LD_INT 102
21398: PUSH
21399: LD_INT 105
21401: PUSH
21402: LD_INT 106
21404: PUSH
21405: LD_INT 108
21407: PUSH
21408: LD_INT 116
21410: PUSH
21411: LD_INT 117
21413: PUSH
21414: LD_INT 118
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: ST_TO_ADDR
21431: GO 24414
21433: LD_INT 3
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 21529
21441: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21442: LD_ADDR_VAR 0 1
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 4
21452: PUSH
21453: LD_INT 5
21455: PUSH
21456: LD_INT 11
21458: PUSH
21459: LD_INT 12
21461: PUSH
21462: LD_INT 15
21464: PUSH
21465: LD_INT 16
21467: PUSH
21468: LD_INT 22
21470: PUSH
21471: LD_INT 26
21473: PUSH
21474: LD_INT 36
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 101
21491: PUSH
21492: LD_INT 102
21494: PUSH
21495: LD_INT 105
21497: PUSH
21498: LD_INT 106
21500: PUSH
21501: LD_INT 108
21503: PUSH
21504: LD_INT 116
21506: PUSH
21507: LD_INT 117
21509: PUSH
21510: LD_INT 118
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: ST_TO_ADDR
21527: GO 24414
21529: LD_INT 4
21531: DOUBLE
21532: EQUAL
21533: IFTRUE 21537
21535: GO 21633
21537: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21538: LD_ADDR_VAR 0 1
21542: PUSH
21543: LD_INT 2
21545: PUSH
21546: LD_INT 4
21548: PUSH
21549: LD_INT 5
21551: PUSH
21552: LD_INT 8
21554: PUSH
21555: LD_INT 11
21557: PUSH
21558: LD_INT 12
21560: PUSH
21561: LD_INT 15
21563: PUSH
21564: LD_INT 16
21566: PUSH
21567: LD_INT 22
21569: PUSH
21570: LD_INT 23
21572: PUSH
21573: LD_INT 26
21575: PUSH
21576: LD_INT 36
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 101
21595: PUSH
21596: LD_INT 102
21598: PUSH
21599: LD_INT 105
21601: PUSH
21602: LD_INT 106
21604: PUSH
21605: LD_INT 108
21607: PUSH
21608: LD_INT 116
21610: PUSH
21611: LD_INT 117
21613: PUSH
21614: LD_INT 118
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: ST_TO_ADDR
21631: GO 24414
21633: LD_INT 5
21635: DOUBLE
21636: EQUAL
21637: IFTRUE 21641
21639: GO 21753
21641: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21642: LD_ADDR_VAR 0 1
21646: PUSH
21647: LD_INT 2
21649: PUSH
21650: LD_INT 4
21652: PUSH
21653: LD_INT 5
21655: PUSH
21656: LD_INT 6
21658: PUSH
21659: LD_INT 8
21661: PUSH
21662: LD_INT 11
21664: PUSH
21665: LD_INT 12
21667: PUSH
21668: LD_INT 15
21670: PUSH
21671: LD_INT 16
21673: PUSH
21674: LD_INT 22
21676: PUSH
21677: LD_INT 23
21679: PUSH
21680: LD_INT 25
21682: PUSH
21683: LD_INT 26
21685: PUSH
21686: LD_INT 36
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 101
21707: PUSH
21708: LD_INT 102
21710: PUSH
21711: LD_INT 105
21713: PUSH
21714: LD_INT 106
21716: PUSH
21717: LD_INT 108
21719: PUSH
21720: LD_INT 109
21722: PUSH
21723: LD_INT 112
21725: PUSH
21726: LD_INT 116
21728: PUSH
21729: LD_INT 117
21731: PUSH
21732: LD_INT 118
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: ST_TO_ADDR
21751: GO 24414
21753: LD_INT 6
21755: DOUBLE
21756: EQUAL
21757: IFTRUE 21761
21759: GO 21893
21761: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21762: LD_ADDR_VAR 0 1
21766: PUSH
21767: LD_INT 2
21769: PUSH
21770: LD_INT 4
21772: PUSH
21773: LD_INT 5
21775: PUSH
21776: LD_INT 6
21778: PUSH
21779: LD_INT 8
21781: PUSH
21782: LD_INT 11
21784: PUSH
21785: LD_INT 12
21787: PUSH
21788: LD_INT 15
21790: PUSH
21791: LD_INT 16
21793: PUSH
21794: LD_INT 20
21796: PUSH
21797: LD_INT 21
21799: PUSH
21800: LD_INT 22
21802: PUSH
21803: LD_INT 23
21805: PUSH
21806: LD_INT 25
21808: PUSH
21809: LD_INT 26
21811: PUSH
21812: LD_INT 30
21814: PUSH
21815: LD_INT 31
21817: PUSH
21818: LD_INT 32
21820: PUSH
21821: LD_INT 36
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 101
21847: PUSH
21848: LD_INT 102
21850: PUSH
21851: LD_INT 105
21853: PUSH
21854: LD_INT 106
21856: PUSH
21857: LD_INT 108
21859: PUSH
21860: LD_INT 109
21862: PUSH
21863: LD_INT 112
21865: PUSH
21866: LD_INT 116
21868: PUSH
21869: LD_INT 117
21871: PUSH
21872: LD_INT 118
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: ST_TO_ADDR
21891: GO 24414
21893: LD_INT 7
21895: DOUBLE
21896: EQUAL
21897: IFTRUE 21901
21899: GO 22013
21901: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21902: LD_ADDR_VAR 0 1
21906: PUSH
21907: LD_INT 2
21909: PUSH
21910: LD_INT 4
21912: PUSH
21913: LD_INT 5
21915: PUSH
21916: LD_INT 7
21918: PUSH
21919: LD_INT 11
21921: PUSH
21922: LD_INT 12
21924: PUSH
21925: LD_INT 15
21927: PUSH
21928: LD_INT 16
21930: PUSH
21931: LD_INT 20
21933: PUSH
21934: LD_INT 21
21936: PUSH
21937: LD_INT 22
21939: PUSH
21940: LD_INT 23
21942: PUSH
21943: LD_INT 25
21945: PUSH
21946: LD_INT 26
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 101
21967: PUSH
21968: LD_INT 102
21970: PUSH
21971: LD_INT 103
21973: PUSH
21974: LD_INT 105
21976: PUSH
21977: LD_INT 106
21979: PUSH
21980: LD_INT 108
21982: PUSH
21983: LD_INT 112
21985: PUSH
21986: LD_INT 116
21988: PUSH
21989: LD_INT 117
21991: PUSH
21992: LD_INT 118
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: ST_TO_ADDR
22011: GO 24414
22013: LD_INT 8
22015: DOUBLE
22016: EQUAL
22017: IFTRUE 22021
22019: GO 22161
22021: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22022: LD_ADDR_VAR 0 1
22026: PUSH
22027: LD_INT 2
22029: PUSH
22030: LD_INT 4
22032: PUSH
22033: LD_INT 5
22035: PUSH
22036: LD_INT 6
22038: PUSH
22039: LD_INT 7
22041: PUSH
22042: LD_INT 8
22044: PUSH
22045: LD_INT 11
22047: PUSH
22048: LD_INT 12
22050: PUSH
22051: LD_INT 15
22053: PUSH
22054: LD_INT 16
22056: PUSH
22057: LD_INT 20
22059: PUSH
22060: LD_INT 21
22062: PUSH
22063: LD_INT 22
22065: PUSH
22066: LD_INT 23
22068: PUSH
22069: LD_INT 25
22071: PUSH
22072: LD_INT 26
22074: PUSH
22075: LD_INT 30
22077: PUSH
22078: LD_INT 31
22080: PUSH
22081: LD_INT 32
22083: PUSH
22084: LD_INT 36
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 101
22111: PUSH
22112: LD_INT 102
22114: PUSH
22115: LD_INT 103
22117: PUSH
22118: LD_INT 105
22120: PUSH
22121: LD_INT 106
22123: PUSH
22124: LD_INT 108
22126: PUSH
22127: LD_INT 109
22129: PUSH
22130: LD_INT 112
22132: PUSH
22133: LD_INT 116
22135: PUSH
22136: LD_INT 117
22138: PUSH
22139: LD_INT 118
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: ST_TO_ADDR
22159: GO 24414
22161: LD_INT 9
22163: DOUBLE
22164: EQUAL
22165: IFTRUE 22169
22167: GO 22317
22169: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22170: LD_ADDR_VAR 0 1
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: LD_INT 4
22180: PUSH
22181: LD_INT 5
22183: PUSH
22184: LD_INT 6
22186: PUSH
22187: LD_INT 7
22189: PUSH
22190: LD_INT 8
22192: PUSH
22193: LD_INT 11
22195: PUSH
22196: LD_INT 12
22198: PUSH
22199: LD_INT 15
22201: PUSH
22202: LD_INT 16
22204: PUSH
22205: LD_INT 20
22207: PUSH
22208: LD_INT 21
22210: PUSH
22211: LD_INT 22
22213: PUSH
22214: LD_INT 23
22216: PUSH
22217: LD_INT 25
22219: PUSH
22220: LD_INT 26
22222: PUSH
22223: LD_INT 28
22225: PUSH
22226: LD_INT 30
22228: PUSH
22229: LD_INT 31
22231: PUSH
22232: LD_INT 32
22234: PUSH
22235: LD_INT 36
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 101
22263: PUSH
22264: LD_INT 102
22266: PUSH
22267: LD_INT 103
22269: PUSH
22270: LD_INT 105
22272: PUSH
22273: LD_INT 106
22275: PUSH
22276: LD_INT 108
22278: PUSH
22279: LD_INT 109
22281: PUSH
22282: LD_INT 112
22284: PUSH
22285: LD_INT 114
22287: PUSH
22288: LD_INT 116
22290: PUSH
22291: LD_INT 117
22293: PUSH
22294: LD_INT 118
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: ST_TO_ADDR
22315: GO 24414
22317: LD_INT 10
22319: DOUBLE
22320: EQUAL
22321: IFTRUE 22325
22323: GO 22521
22325: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22326: LD_ADDR_VAR 0 1
22330: PUSH
22331: LD_INT 2
22333: PUSH
22334: LD_INT 4
22336: PUSH
22337: LD_INT 5
22339: PUSH
22340: LD_INT 6
22342: PUSH
22343: LD_INT 7
22345: PUSH
22346: LD_INT 8
22348: PUSH
22349: LD_INT 9
22351: PUSH
22352: LD_INT 10
22354: PUSH
22355: LD_INT 11
22357: PUSH
22358: LD_INT 12
22360: PUSH
22361: LD_INT 13
22363: PUSH
22364: LD_INT 14
22366: PUSH
22367: LD_INT 15
22369: PUSH
22370: LD_INT 16
22372: PUSH
22373: LD_INT 17
22375: PUSH
22376: LD_INT 18
22378: PUSH
22379: LD_INT 19
22381: PUSH
22382: LD_INT 20
22384: PUSH
22385: LD_INT 21
22387: PUSH
22388: LD_INT 22
22390: PUSH
22391: LD_INT 23
22393: PUSH
22394: LD_INT 24
22396: PUSH
22397: LD_INT 25
22399: PUSH
22400: LD_INT 26
22402: PUSH
22403: LD_INT 28
22405: PUSH
22406: LD_INT 30
22408: PUSH
22409: LD_INT 31
22411: PUSH
22412: LD_INT 32
22414: PUSH
22415: LD_INT 36
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 101
22451: PUSH
22452: LD_INT 102
22454: PUSH
22455: LD_INT 103
22457: PUSH
22458: LD_INT 104
22460: PUSH
22461: LD_INT 105
22463: PUSH
22464: LD_INT 106
22466: PUSH
22467: LD_INT 107
22469: PUSH
22470: LD_INT 108
22472: PUSH
22473: LD_INT 109
22475: PUSH
22476: LD_INT 110
22478: PUSH
22479: LD_INT 111
22481: PUSH
22482: LD_INT 112
22484: PUSH
22485: LD_INT 114
22487: PUSH
22488: LD_INT 116
22490: PUSH
22491: LD_INT 117
22493: PUSH
22494: LD_INT 118
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: ST_TO_ADDR
22519: GO 24414
22521: LD_INT 11
22523: DOUBLE
22524: EQUAL
22525: IFTRUE 22529
22527: GO 22733
22529: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22530: LD_ADDR_VAR 0 1
22534: PUSH
22535: LD_INT 2
22537: PUSH
22538: LD_INT 3
22540: PUSH
22541: LD_INT 4
22543: PUSH
22544: LD_INT 5
22546: PUSH
22547: LD_INT 6
22549: PUSH
22550: LD_INT 7
22552: PUSH
22553: LD_INT 8
22555: PUSH
22556: LD_INT 9
22558: PUSH
22559: LD_INT 10
22561: PUSH
22562: LD_INT 11
22564: PUSH
22565: LD_INT 12
22567: PUSH
22568: LD_INT 13
22570: PUSH
22571: LD_INT 14
22573: PUSH
22574: LD_INT 15
22576: PUSH
22577: LD_INT 16
22579: PUSH
22580: LD_INT 17
22582: PUSH
22583: LD_INT 18
22585: PUSH
22586: LD_INT 19
22588: PUSH
22589: LD_INT 20
22591: PUSH
22592: LD_INT 21
22594: PUSH
22595: LD_INT 22
22597: PUSH
22598: LD_INT 23
22600: PUSH
22601: LD_INT 24
22603: PUSH
22604: LD_INT 25
22606: PUSH
22607: LD_INT 26
22609: PUSH
22610: LD_INT 28
22612: PUSH
22613: LD_INT 30
22615: PUSH
22616: LD_INT 31
22618: PUSH
22619: LD_INT 32
22621: PUSH
22622: LD_INT 34
22624: PUSH
22625: LD_INT 36
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 101
22663: PUSH
22664: LD_INT 102
22666: PUSH
22667: LD_INT 103
22669: PUSH
22670: LD_INT 104
22672: PUSH
22673: LD_INT 105
22675: PUSH
22676: LD_INT 106
22678: PUSH
22679: LD_INT 107
22681: PUSH
22682: LD_INT 108
22684: PUSH
22685: LD_INT 109
22687: PUSH
22688: LD_INT 110
22690: PUSH
22691: LD_INT 111
22693: PUSH
22694: LD_INT 112
22696: PUSH
22697: LD_INT 114
22699: PUSH
22700: LD_INT 116
22702: PUSH
22703: LD_INT 117
22705: PUSH
22706: LD_INT 118
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: ST_TO_ADDR
22731: GO 24414
22733: LD_INT 12
22735: DOUBLE
22736: EQUAL
22737: IFTRUE 22741
22739: GO 22961
22741: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22742: LD_ADDR_VAR 0 1
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: LD_INT 2
22752: PUSH
22753: LD_INT 3
22755: PUSH
22756: LD_INT 4
22758: PUSH
22759: LD_INT 5
22761: PUSH
22762: LD_INT 6
22764: PUSH
22765: LD_INT 7
22767: PUSH
22768: LD_INT 8
22770: PUSH
22771: LD_INT 9
22773: PUSH
22774: LD_INT 10
22776: PUSH
22777: LD_INT 11
22779: PUSH
22780: LD_INT 12
22782: PUSH
22783: LD_INT 13
22785: PUSH
22786: LD_INT 14
22788: PUSH
22789: LD_INT 15
22791: PUSH
22792: LD_INT 16
22794: PUSH
22795: LD_INT 17
22797: PUSH
22798: LD_INT 18
22800: PUSH
22801: LD_INT 19
22803: PUSH
22804: LD_INT 20
22806: PUSH
22807: LD_INT 21
22809: PUSH
22810: LD_INT 22
22812: PUSH
22813: LD_INT 23
22815: PUSH
22816: LD_INT 24
22818: PUSH
22819: LD_INT 25
22821: PUSH
22822: LD_INT 26
22824: PUSH
22825: LD_INT 27
22827: PUSH
22828: LD_INT 28
22830: PUSH
22831: LD_INT 30
22833: PUSH
22834: LD_INT 31
22836: PUSH
22837: LD_INT 32
22839: PUSH
22840: LD_INT 33
22842: PUSH
22843: LD_INT 34
22845: PUSH
22846: LD_INT 36
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 101
22887: PUSH
22888: LD_INT 102
22890: PUSH
22891: LD_INT 103
22893: PUSH
22894: LD_INT 104
22896: PUSH
22897: LD_INT 105
22899: PUSH
22900: LD_INT 106
22902: PUSH
22903: LD_INT 107
22905: PUSH
22906: LD_INT 108
22908: PUSH
22909: LD_INT 109
22911: PUSH
22912: LD_INT 110
22914: PUSH
22915: LD_INT 111
22917: PUSH
22918: LD_INT 112
22920: PUSH
22921: LD_INT 113
22923: PUSH
22924: LD_INT 114
22926: PUSH
22927: LD_INT 116
22929: PUSH
22930: LD_INT 117
22932: PUSH
22933: LD_INT 118
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: ST_TO_ADDR
22959: GO 24414
22961: LD_INT 13
22963: DOUBLE
22964: EQUAL
22965: IFTRUE 22969
22967: GO 23177
22969: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22970: LD_ADDR_VAR 0 1
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: LD_INT 2
22980: PUSH
22981: LD_INT 3
22983: PUSH
22984: LD_INT 4
22986: PUSH
22987: LD_INT 5
22989: PUSH
22990: LD_INT 8
22992: PUSH
22993: LD_INT 9
22995: PUSH
22996: LD_INT 10
22998: PUSH
22999: LD_INT 11
23001: PUSH
23002: LD_INT 12
23004: PUSH
23005: LD_INT 14
23007: PUSH
23008: LD_INT 15
23010: PUSH
23011: LD_INT 16
23013: PUSH
23014: LD_INT 17
23016: PUSH
23017: LD_INT 18
23019: PUSH
23020: LD_INT 19
23022: PUSH
23023: LD_INT 20
23025: PUSH
23026: LD_INT 21
23028: PUSH
23029: LD_INT 22
23031: PUSH
23032: LD_INT 23
23034: PUSH
23035: LD_INT 24
23037: PUSH
23038: LD_INT 25
23040: PUSH
23041: LD_INT 26
23043: PUSH
23044: LD_INT 27
23046: PUSH
23047: LD_INT 28
23049: PUSH
23050: LD_INT 30
23052: PUSH
23053: LD_INT 31
23055: PUSH
23056: LD_INT 32
23058: PUSH
23059: LD_INT 33
23061: PUSH
23062: LD_INT 34
23064: PUSH
23065: LD_INT 36
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 101
23103: PUSH
23104: LD_INT 102
23106: PUSH
23107: LD_INT 103
23109: PUSH
23110: LD_INT 104
23112: PUSH
23113: LD_INT 105
23115: PUSH
23116: LD_INT 106
23118: PUSH
23119: LD_INT 107
23121: PUSH
23122: LD_INT 108
23124: PUSH
23125: LD_INT 109
23127: PUSH
23128: LD_INT 110
23130: PUSH
23131: LD_INT 111
23133: PUSH
23134: LD_INT 112
23136: PUSH
23137: LD_INT 113
23139: PUSH
23140: LD_INT 114
23142: PUSH
23143: LD_INT 116
23145: PUSH
23146: LD_INT 117
23148: PUSH
23149: LD_INT 118
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: ST_TO_ADDR
23175: GO 24414
23177: LD_INT 14
23179: DOUBLE
23180: EQUAL
23181: IFTRUE 23185
23183: GO 23409
23185: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23186: LD_ADDR_VAR 0 1
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: LD_INT 2
23196: PUSH
23197: LD_INT 3
23199: PUSH
23200: LD_INT 4
23202: PUSH
23203: LD_INT 5
23205: PUSH
23206: LD_INT 6
23208: PUSH
23209: LD_INT 7
23211: PUSH
23212: LD_INT 8
23214: PUSH
23215: LD_INT 9
23217: PUSH
23218: LD_INT 10
23220: PUSH
23221: LD_INT 11
23223: PUSH
23224: LD_INT 12
23226: PUSH
23227: LD_INT 13
23229: PUSH
23230: LD_INT 14
23232: PUSH
23233: LD_INT 15
23235: PUSH
23236: LD_INT 16
23238: PUSH
23239: LD_INT 17
23241: PUSH
23242: LD_INT 18
23244: PUSH
23245: LD_INT 19
23247: PUSH
23248: LD_INT 20
23250: PUSH
23251: LD_INT 21
23253: PUSH
23254: LD_INT 22
23256: PUSH
23257: LD_INT 23
23259: PUSH
23260: LD_INT 24
23262: PUSH
23263: LD_INT 25
23265: PUSH
23266: LD_INT 26
23268: PUSH
23269: LD_INT 27
23271: PUSH
23272: LD_INT 28
23274: PUSH
23275: LD_INT 29
23277: PUSH
23278: LD_INT 30
23280: PUSH
23281: LD_INT 31
23283: PUSH
23284: LD_INT 32
23286: PUSH
23287: LD_INT 33
23289: PUSH
23290: LD_INT 34
23292: PUSH
23293: LD_INT 36
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 101
23335: PUSH
23336: LD_INT 102
23338: PUSH
23339: LD_INT 103
23341: PUSH
23342: LD_INT 104
23344: PUSH
23345: LD_INT 105
23347: PUSH
23348: LD_INT 106
23350: PUSH
23351: LD_INT 107
23353: PUSH
23354: LD_INT 108
23356: PUSH
23357: LD_INT 109
23359: PUSH
23360: LD_INT 110
23362: PUSH
23363: LD_INT 111
23365: PUSH
23366: LD_INT 112
23368: PUSH
23369: LD_INT 113
23371: PUSH
23372: LD_INT 114
23374: PUSH
23375: LD_INT 116
23377: PUSH
23378: LD_INT 117
23380: PUSH
23381: LD_INT 118
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: ST_TO_ADDR
23407: GO 24414
23409: LD_INT 15
23411: DOUBLE
23412: EQUAL
23413: IFTRUE 23417
23415: GO 23641
23417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23418: LD_ADDR_VAR 0 1
23422: PUSH
23423: LD_INT 1
23425: PUSH
23426: LD_INT 2
23428: PUSH
23429: LD_INT 3
23431: PUSH
23432: LD_INT 4
23434: PUSH
23435: LD_INT 5
23437: PUSH
23438: LD_INT 6
23440: PUSH
23441: LD_INT 7
23443: PUSH
23444: LD_INT 8
23446: PUSH
23447: LD_INT 9
23449: PUSH
23450: LD_INT 10
23452: PUSH
23453: LD_INT 11
23455: PUSH
23456: LD_INT 12
23458: PUSH
23459: LD_INT 13
23461: PUSH
23462: LD_INT 14
23464: PUSH
23465: LD_INT 15
23467: PUSH
23468: LD_INT 16
23470: PUSH
23471: LD_INT 17
23473: PUSH
23474: LD_INT 18
23476: PUSH
23477: LD_INT 19
23479: PUSH
23480: LD_INT 20
23482: PUSH
23483: LD_INT 21
23485: PUSH
23486: LD_INT 22
23488: PUSH
23489: LD_INT 23
23491: PUSH
23492: LD_INT 24
23494: PUSH
23495: LD_INT 25
23497: PUSH
23498: LD_INT 26
23500: PUSH
23501: LD_INT 27
23503: PUSH
23504: LD_INT 28
23506: PUSH
23507: LD_INT 29
23509: PUSH
23510: LD_INT 30
23512: PUSH
23513: LD_INT 31
23515: PUSH
23516: LD_INT 32
23518: PUSH
23519: LD_INT 33
23521: PUSH
23522: LD_INT 34
23524: PUSH
23525: LD_INT 36
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 101
23567: PUSH
23568: LD_INT 102
23570: PUSH
23571: LD_INT 103
23573: PUSH
23574: LD_INT 104
23576: PUSH
23577: LD_INT 105
23579: PUSH
23580: LD_INT 106
23582: PUSH
23583: LD_INT 107
23585: PUSH
23586: LD_INT 108
23588: PUSH
23589: LD_INT 109
23591: PUSH
23592: LD_INT 110
23594: PUSH
23595: LD_INT 111
23597: PUSH
23598: LD_INT 112
23600: PUSH
23601: LD_INT 113
23603: PUSH
23604: LD_INT 114
23606: PUSH
23607: LD_INT 116
23609: PUSH
23610: LD_INT 117
23612: PUSH
23613: LD_INT 118
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: ST_TO_ADDR
23639: GO 24414
23641: LD_INT 16
23643: DOUBLE
23644: EQUAL
23645: IFTRUE 23649
23647: GO 23785
23649: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23650: LD_ADDR_VAR 0 1
23654: PUSH
23655: LD_INT 2
23657: PUSH
23658: LD_INT 4
23660: PUSH
23661: LD_INT 5
23663: PUSH
23664: LD_INT 7
23666: PUSH
23667: LD_INT 11
23669: PUSH
23670: LD_INT 12
23672: PUSH
23673: LD_INT 15
23675: PUSH
23676: LD_INT 16
23678: PUSH
23679: LD_INT 20
23681: PUSH
23682: LD_INT 21
23684: PUSH
23685: LD_INT 22
23687: PUSH
23688: LD_INT 23
23690: PUSH
23691: LD_INT 25
23693: PUSH
23694: LD_INT 26
23696: PUSH
23697: LD_INT 30
23699: PUSH
23700: LD_INT 31
23702: PUSH
23703: LD_INT 32
23705: PUSH
23706: LD_INT 33
23708: PUSH
23709: LD_INT 34
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 101
23735: PUSH
23736: LD_INT 102
23738: PUSH
23739: LD_INT 103
23741: PUSH
23742: LD_INT 106
23744: PUSH
23745: LD_INT 108
23747: PUSH
23748: LD_INT 112
23750: PUSH
23751: LD_INT 113
23753: PUSH
23754: LD_INT 114
23756: PUSH
23757: LD_INT 116
23759: PUSH
23760: LD_INT 117
23762: PUSH
23763: LD_INT 118
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: ST_TO_ADDR
23783: GO 24414
23785: LD_INT 17
23787: DOUBLE
23788: EQUAL
23789: IFTRUE 23793
23791: GO 24017
23793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23794: LD_ADDR_VAR 0 1
23798: PUSH
23799: LD_INT 1
23801: PUSH
23802: LD_INT 2
23804: PUSH
23805: LD_INT 3
23807: PUSH
23808: LD_INT 4
23810: PUSH
23811: LD_INT 5
23813: PUSH
23814: LD_INT 6
23816: PUSH
23817: LD_INT 7
23819: PUSH
23820: LD_INT 8
23822: PUSH
23823: LD_INT 9
23825: PUSH
23826: LD_INT 10
23828: PUSH
23829: LD_INT 11
23831: PUSH
23832: LD_INT 12
23834: PUSH
23835: LD_INT 13
23837: PUSH
23838: LD_INT 14
23840: PUSH
23841: LD_INT 15
23843: PUSH
23844: LD_INT 16
23846: PUSH
23847: LD_INT 17
23849: PUSH
23850: LD_INT 18
23852: PUSH
23853: LD_INT 19
23855: PUSH
23856: LD_INT 20
23858: PUSH
23859: LD_INT 21
23861: PUSH
23862: LD_INT 22
23864: PUSH
23865: LD_INT 23
23867: PUSH
23868: LD_INT 24
23870: PUSH
23871: LD_INT 25
23873: PUSH
23874: LD_INT 26
23876: PUSH
23877: LD_INT 27
23879: PUSH
23880: LD_INT 28
23882: PUSH
23883: LD_INT 29
23885: PUSH
23886: LD_INT 30
23888: PUSH
23889: LD_INT 31
23891: PUSH
23892: LD_INT 32
23894: PUSH
23895: LD_INT 33
23897: PUSH
23898: LD_INT 34
23900: PUSH
23901: LD_INT 36
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 101
23943: PUSH
23944: LD_INT 102
23946: PUSH
23947: LD_INT 103
23949: PUSH
23950: LD_INT 104
23952: PUSH
23953: LD_INT 105
23955: PUSH
23956: LD_INT 106
23958: PUSH
23959: LD_INT 107
23961: PUSH
23962: LD_INT 108
23964: PUSH
23965: LD_INT 109
23967: PUSH
23968: LD_INT 110
23970: PUSH
23971: LD_INT 111
23973: PUSH
23974: LD_INT 112
23976: PUSH
23977: LD_INT 113
23979: PUSH
23980: LD_INT 114
23982: PUSH
23983: LD_INT 116
23985: PUSH
23986: LD_INT 117
23988: PUSH
23989: LD_INT 118
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: ST_TO_ADDR
24015: GO 24414
24017: LD_INT 18
24019: DOUBLE
24020: EQUAL
24021: IFTRUE 24025
24023: GO 24173
24025: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24026: LD_ADDR_VAR 0 1
24030: PUSH
24031: LD_INT 2
24033: PUSH
24034: LD_INT 4
24036: PUSH
24037: LD_INT 5
24039: PUSH
24040: LD_INT 7
24042: PUSH
24043: LD_INT 11
24045: PUSH
24046: LD_INT 12
24048: PUSH
24049: LD_INT 15
24051: PUSH
24052: LD_INT 16
24054: PUSH
24055: LD_INT 20
24057: PUSH
24058: LD_INT 21
24060: PUSH
24061: LD_INT 22
24063: PUSH
24064: LD_INT 23
24066: PUSH
24067: LD_INT 25
24069: PUSH
24070: LD_INT 26
24072: PUSH
24073: LD_INT 30
24075: PUSH
24076: LD_INT 31
24078: PUSH
24079: LD_INT 32
24081: PUSH
24082: LD_INT 33
24084: PUSH
24085: LD_INT 34
24087: PUSH
24088: LD_INT 35
24090: PUSH
24091: LD_INT 36
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 101
24119: PUSH
24120: LD_INT 102
24122: PUSH
24123: LD_INT 103
24125: PUSH
24126: LD_INT 106
24128: PUSH
24129: LD_INT 108
24131: PUSH
24132: LD_INT 112
24134: PUSH
24135: LD_INT 113
24137: PUSH
24138: LD_INT 114
24140: PUSH
24141: LD_INT 115
24143: PUSH
24144: LD_INT 116
24146: PUSH
24147: LD_INT 117
24149: PUSH
24150: LD_INT 118
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: ST_TO_ADDR
24171: GO 24414
24173: LD_INT 19
24175: DOUBLE
24176: EQUAL
24177: IFTRUE 24181
24179: GO 24413
24181: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24182: LD_ADDR_VAR 0 1
24186: PUSH
24187: LD_INT 1
24189: PUSH
24190: LD_INT 2
24192: PUSH
24193: LD_INT 3
24195: PUSH
24196: LD_INT 4
24198: PUSH
24199: LD_INT 5
24201: PUSH
24202: LD_INT 6
24204: PUSH
24205: LD_INT 7
24207: PUSH
24208: LD_INT 8
24210: PUSH
24211: LD_INT 9
24213: PUSH
24214: LD_INT 10
24216: PUSH
24217: LD_INT 11
24219: PUSH
24220: LD_INT 12
24222: PUSH
24223: LD_INT 13
24225: PUSH
24226: LD_INT 14
24228: PUSH
24229: LD_INT 15
24231: PUSH
24232: LD_INT 16
24234: PUSH
24235: LD_INT 17
24237: PUSH
24238: LD_INT 18
24240: PUSH
24241: LD_INT 19
24243: PUSH
24244: LD_INT 20
24246: PUSH
24247: LD_INT 21
24249: PUSH
24250: LD_INT 22
24252: PUSH
24253: LD_INT 23
24255: PUSH
24256: LD_INT 24
24258: PUSH
24259: LD_INT 25
24261: PUSH
24262: LD_INT 26
24264: PUSH
24265: LD_INT 27
24267: PUSH
24268: LD_INT 28
24270: PUSH
24271: LD_INT 29
24273: PUSH
24274: LD_INT 30
24276: PUSH
24277: LD_INT 31
24279: PUSH
24280: LD_INT 32
24282: PUSH
24283: LD_INT 33
24285: PUSH
24286: LD_INT 34
24288: PUSH
24289: LD_INT 35
24291: PUSH
24292: LD_INT 36
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 101
24335: PUSH
24336: LD_INT 102
24338: PUSH
24339: LD_INT 103
24341: PUSH
24342: LD_INT 104
24344: PUSH
24345: LD_INT 105
24347: PUSH
24348: LD_INT 106
24350: PUSH
24351: LD_INT 107
24353: PUSH
24354: LD_INT 108
24356: PUSH
24357: LD_INT 109
24359: PUSH
24360: LD_INT 110
24362: PUSH
24363: LD_INT 111
24365: PUSH
24366: LD_INT 112
24368: PUSH
24369: LD_INT 113
24371: PUSH
24372: LD_INT 114
24374: PUSH
24375: LD_INT 115
24377: PUSH
24378: LD_INT 116
24380: PUSH
24381: LD_INT 117
24383: PUSH
24384: LD_INT 118
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: ST_TO_ADDR
24411: GO 24414
24413: POP
// end else
24414: GO 24645
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24416: LD_ADDR_VAR 0 1
24420: PUSH
24421: LD_INT 1
24423: PUSH
24424: LD_INT 2
24426: PUSH
24427: LD_INT 3
24429: PUSH
24430: LD_INT 4
24432: PUSH
24433: LD_INT 5
24435: PUSH
24436: LD_INT 6
24438: PUSH
24439: LD_INT 7
24441: PUSH
24442: LD_INT 8
24444: PUSH
24445: LD_INT 9
24447: PUSH
24448: LD_INT 10
24450: PUSH
24451: LD_INT 11
24453: PUSH
24454: LD_INT 12
24456: PUSH
24457: LD_INT 13
24459: PUSH
24460: LD_INT 14
24462: PUSH
24463: LD_INT 15
24465: PUSH
24466: LD_INT 16
24468: PUSH
24469: LD_INT 17
24471: PUSH
24472: LD_INT 18
24474: PUSH
24475: LD_INT 19
24477: PUSH
24478: LD_INT 20
24480: PUSH
24481: LD_INT 21
24483: PUSH
24484: LD_INT 22
24486: PUSH
24487: LD_INT 23
24489: PUSH
24490: LD_INT 24
24492: PUSH
24493: LD_INT 25
24495: PUSH
24496: LD_INT 26
24498: PUSH
24499: LD_INT 27
24501: PUSH
24502: LD_INT 28
24504: PUSH
24505: LD_INT 29
24507: PUSH
24508: LD_INT 30
24510: PUSH
24511: LD_INT 31
24513: PUSH
24514: LD_INT 32
24516: PUSH
24517: LD_INT 33
24519: PUSH
24520: LD_INT 34
24522: PUSH
24523: LD_INT 35
24525: PUSH
24526: LD_INT 36
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 101
24569: PUSH
24570: LD_INT 102
24572: PUSH
24573: LD_INT 103
24575: PUSH
24576: LD_INT 104
24578: PUSH
24579: LD_INT 105
24581: PUSH
24582: LD_INT 106
24584: PUSH
24585: LD_INT 107
24587: PUSH
24588: LD_INT 108
24590: PUSH
24591: LD_INT 109
24593: PUSH
24594: LD_INT 110
24596: PUSH
24597: LD_INT 111
24599: PUSH
24600: LD_INT 112
24602: PUSH
24603: LD_INT 113
24605: PUSH
24606: LD_INT 114
24608: PUSH
24609: LD_INT 115
24611: PUSH
24612: LD_INT 116
24614: PUSH
24615: LD_INT 117
24617: PUSH
24618: LD_INT 118
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: ST_TO_ADDR
// if result then
24645: LD_VAR 0 1
24649: IFFALSE 24938
// begin normal :=  ;
24651: LD_ADDR_VAR 0 3
24655: PUSH
24656: LD_STRING 
24658: ST_TO_ADDR
// hardcore :=  ;
24659: LD_ADDR_VAR 0 4
24663: PUSH
24664: LD_STRING 
24666: ST_TO_ADDR
// for i = 1 to normalCounter do
24667: LD_ADDR_VAR 0 5
24671: PUSH
24672: DOUBLE
24673: LD_INT 1
24675: DEC
24676: ST_TO_ADDR
24677: LD_EXP 68
24681: PUSH
24682: FOR_TO
24683: IFFALSE 24784
// begin tmp := 0 ;
24685: LD_ADDR_VAR 0 2
24689: PUSH
24690: LD_STRING 0
24692: ST_TO_ADDR
// if result [ 1 ] then
24693: LD_VAR 0 1
24697: PUSH
24698: LD_INT 1
24700: ARRAY
24701: IFFALSE 24766
// if result [ 1 ] [ 1 ] = i then
24703: LD_VAR 0 1
24707: PUSH
24708: LD_INT 1
24710: ARRAY
24711: PUSH
24712: LD_INT 1
24714: ARRAY
24715: PUSH
24716: LD_VAR 0 5
24720: EQUAL
24721: IFFALSE 24766
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24723: LD_ADDR_VAR 0 1
24727: PUSH
24728: LD_VAR 0 1
24732: PPUSH
24733: LD_INT 1
24735: PPUSH
24736: LD_VAR 0 1
24740: PUSH
24741: LD_INT 1
24743: ARRAY
24744: PPUSH
24745: LD_INT 1
24747: PPUSH
24748: CALL_OW 3
24752: PPUSH
24753: CALL_OW 1
24757: ST_TO_ADDR
// tmp := 1 ;
24758: LD_ADDR_VAR 0 2
24762: PUSH
24763: LD_STRING 1
24765: ST_TO_ADDR
// end ; normal := normal & tmp ;
24766: LD_ADDR_VAR 0 3
24770: PUSH
24771: LD_VAR 0 3
24775: PUSH
24776: LD_VAR 0 2
24780: STR
24781: ST_TO_ADDR
// end ;
24782: GO 24682
24784: POP
24785: POP
// for i = 1 to hardcoreCounter do
24786: LD_ADDR_VAR 0 5
24790: PUSH
24791: DOUBLE
24792: LD_INT 1
24794: DEC
24795: ST_TO_ADDR
24796: LD_EXP 69
24800: PUSH
24801: FOR_TO
24802: IFFALSE 24907
// begin tmp := 0 ;
24804: LD_ADDR_VAR 0 2
24808: PUSH
24809: LD_STRING 0
24811: ST_TO_ADDR
// if result [ 2 ] then
24812: LD_VAR 0 1
24816: PUSH
24817: LD_INT 2
24819: ARRAY
24820: IFFALSE 24889
// if result [ 2 ] [ 1 ] = 100 + i then
24822: LD_VAR 0 1
24826: PUSH
24827: LD_INT 2
24829: ARRAY
24830: PUSH
24831: LD_INT 1
24833: ARRAY
24834: PUSH
24835: LD_INT 100
24837: PUSH
24838: LD_VAR 0 5
24842: PLUS
24843: EQUAL
24844: IFFALSE 24889
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24846: LD_ADDR_VAR 0 1
24850: PUSH
24851: LD_VAR 0 1
24855: PPUSH
24856: LD_INT 2
24858: PPUSH
24859: LD_VAR 0 1
24863: PUSH
24864: LD_INT 2
24866: ARRAY
24867: PPUSH
24868: LD_INT 1
24870: PPUSH
24871: CALL_OW 3
24875: PPUSH
24876: CALL_OW 1
24880: ST_TO_ADDR
// tmp := 1 ;
24881: LD_ADDR_VAR 0 2
24885: PUSH
24886: LD_STRING 1
24888: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24889: LD_ADDR_VAR 0 4
24893: PUSH
24894: LD_VAR 0 4
24898: PUSH
24899: LD_VAR 0 2
24903: STR
24904: ST_TO_ADDR
// end ;
24905: GO 24801
24907: POP
24908: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24909: LD_STRING getStreamItemsFromMission("
24911: PUSH
24912: LD_VAR 0 3
24916: STR
24917: PUSH
24918: LD_STRING ","
24920: STR
24921: PUSH
24922: LD_VAR 0 4
24926: STR
24927: PUSH
24928: LD_STRING ")
24930: STR
24931: PPUSH
24932: CALL_OW 559
// end else
24936: GO 24945
// ToLua ( getStreamItemsFromMission("","") ) ;
24938: LD_STRING getStreamItemsFromMission("","")
24940: PPUSH
24941: CALL_OW 559
// end ;
24945: LD_VAR 0 1
24949: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24950: LD_EXP 67
24954: PUSH
24955: LD_EXP 72
24959: AND
24960: IFFALSE 25084
24962: GO 24964
24964: DISABLE
24965: LD_INT 0
24967: PPUSH
24968: PPUSH
// begin enable ;
24969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24970: LD_ADDR_VAR 0 2
24974: PUSH
24975: LD_INT 22
24977: PUSH
24978: LD_OWVAR 2
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: LD_INT 34
24992: PUSH
24993: LD_INT 7
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 34
25002: PUSH
25003: LD_INT 45
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 34
25012: PUSH
25013: LD_INT 28
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 34
25022: PUSH
25023: LD_INT 47
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PPUSH
25041: CALL_OW 69
25045: ST_TO_ADDR
// if not tmp then
25046: LD_VAR 0 2
25050: NOT
25051: IFFALSE 25055
// exit ;
25053: GO 25084
// for i in tmp do
25055: LD_ADDR_VAR 0 1
25059: PUSH
25060: LD_VAR 0 2
25064: PUSH
25065: FOR_IN
25066: IFFALSE 25082
// begin SetLives ( i , 0 ) ;
25068: LD_VAR 0 1
25072: PPUSH
25073: LD_INT 0
25075: PPUSH
25076: CALL_OW 234
// end ;
25080: GO 25065
25082: POP
25083: POP
// end ;
25084: PPOPN 2
25086: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25087: LD_EXP 67
25091: PUSH
25092: LD_EXP 73
25096: AND
25097: IFFALSE 25181
25099: GO 25101
25101: DISABLE
25102: LD_INT 0
25104: PPUSH
25105: PPUSH
// begin enable ;
25106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25107: LD_ADDR_VAR 0 2
25111: PUSH
25112: LD_INT 22
25114: PUSH
25115: LD_OWVAR 2
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 32
25126: PUSH
25127: LD_INT 3
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PPUSH
25138: CALL_OW 69
25142: ST_TO_ADDR
// if not tmp then
25143: LD_VAR 0 2
25147: NOT
25148: IFFALSE 25152
// exit ;
25150: GO 25181
// for i in tmp do
25152: LD_ADDR_VAR 0 1
25156: PUSH
25157: LD_VAR 0 2
25161: PUSH
25162: FOR_IN
25163: IFFALSE 25179
// begin SetLives ( i , 0 ) ;
25165: LD_VAR 0 1
25169: PPUSH
25170: LD_INT 0
25172: PPUSH
25173: CALL_OW 234
// end ;
25177: GO 25162
25179: POP
25180: POP
// end ;
25181: PPOPN 2
25183: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25184: LD_EXP 67
25188: PUSH
25189: LD_EXP 70
25193: AND
25194: IFFALSE 25287
25196: GO 25198
25198: DISABLE
25199: LD_INT 0
25201: PPUSH
// begin enable ;
25202: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25203: LD_ADDR_VAR 0 1
25207: PUSH
25208: LD_INT 22
25210: PUSH
25211: LD_OWVAR 2
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 2
25222: PUSH
25223: LD_INT 25
25225: PUSH
25226: LD_INT 5
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 25
25235: PUSH
25236: LD_INT 9
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 25
25245: PUSH
25246: LD_INT 8
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PPUSH
25263: CALL_OW 69
25267: PUSH
25268: FOR_IN
25269: IFFALSE 25285
// begin SetClass ( i , 1 ) ;
25271: LD_VAR 0 1
25275: PPUSH
25276: LD_INT 1
25278: PPUSH
25279: CALL_OW 336
// end ;
25283: GO 25268
25285: POP
25286: POP
// end ;
25287: PPOPN 1
25289: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25290: LD_EXP 67
25294: PUSH
25295: LD_EXP 71
25299: AND
25300: PUSH
25301: LD_OWVAR 65
25305: PUSH
25306: LD_INT 7
25308: LESS
25309: AND
25310: IFFALSE 25324
25312: GO 25314
25314: DISABLE
// begin enable ;
25315: ENABLE
// game_speed := 7 ;
25316: LD_ADDR_OWVAR 65
25320: PUSH
25321: LD_INT 7
25323: ST_TO_ADDR
// end ;
25324: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25325: LD_EXP 67
25329: PUSH
25330: LD_EXP 74
25334: AND
25335: IFFALSE 25537
25337: GO 25339
25339: DISABLE
25340: LD_INT 0
25342: PPUSH
25343: PPUSH
25344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25345: LD_ADDR_VAR 0 3
25349: PUSH
25350: LD_INT 81
25352: PUSH
25353: LD_OWVAR 2
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 21
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PPUSH
25376: CALL_OW 69
25380: ST_TO_ADDR
// if not tmp then
25381: LD_VAR 0 3
25385: NOT
25386: IFFALSE 25390
// exit ;
25388: GO 25537
// if tmp > 5 then
25390: LD_VAR 0 3
25394: PUSH
25395: LD_INT 5
25397: GREATER
25398: IFFALSE 25410
// k := 5 else
25400: LD_ADDR_VAR 0 2
25404: PUSH
25405: LD_INT 5
25407: ST_TO_ADDR
25408: GO 25420
// k := tmp ;
25410: LD_ADDR_VAR 0 2
25414: PUSH
25415: LD_VAR 0 3
25419: ST_TO_ADDR
// for i := 1 to k do
25420: LD_ADDR_VAR 0 1
25424: PUSH
25425: DOUBLE
25426: LD_INT 1
25428: DEC
25429: ST_TO_ADDR
25430: LD_VAR 0 2
25434: PUSH
25435: FOR_TO
25436: IFFALSE 25535
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25438: LD_VAR 0 3
25442: PUSH
25443: LD_VAR 0 1
25447: ARRAY
25448: PPUSH
25449: LD_VAR 0 1
25453: PUSH
25454: LD_INT 4
25456: MOD
25457: PUSH
25458: LD_INT 1
25460: PLUS
25461: PPUSH
25462: CALL_OW 259
25466: PUSH
25467: LD_INT 10
25469: LESS
25470: IFFALSE 25533
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25472: LD_VAR 0 3
25476: PUSH
25477: LD_VAR 0 1
25481: ARRAY
25482: PPUSH
25483: LD_VAR 0 1
25487: PUSH
25488: LD_INT 4
25490: MOD
25491: PUSH
25492: LD_INT 1
25494: PLUS
25495: PPUSH
25496: LD_VAR 0 3
25500: PUSH
25501: LD_VAR 0 1
25505: ARRAY
25506: PPUSH
25507: LD_VAR 0 1
25511: PUSH
25512: LD_INT 4
25514: MOD
25515: PUSH
25516: LD_INT 1
25518: PLUS
25519: PPUSH
25520: CALL_OW 259
25524: PUSH
25525: LD_INT 1
25527: PLUS
25528: PPUSH
25529: CALL_OW 237
25533: GO 25435
25535: POP
25536: POP
// end ;
25537: PPOPN 3
25539: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25540: LD_EXP 67
25544: PUSH
25545: LD_EXP 75
25549: AND
25550: IFFALSE 25570
25552: GO 25554
25554: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25555: LD_INT 4
25557: PPUSH
25558: LD_OWVAR 2
25562: PPUSH
25563: LD_INT 0
25565: PPUSH
25566: CALL_OW 324
25570: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25571: LD_EXP 67
25575: PUSH
25576: LD_EXP 104
25580: AND
25581: IFFALSE 25601
25583: GO 25585
25585: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25586: LD_INT 19
25588: PPUSH
25589: LD_OWVAR 2
25593: PPUSH
25594: LD_INT 0
25596: PPUSH
25597: CALL_OW 324
25601: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25602: LD_EXP 67
25606: PUSH
25607: LD_EXP 76
25611: AND
25612: IFFALSE 25714
25614: GO 25616
25616: DISABLE
25617: LD_INT 0
25619: PPUSH
25620: PPUSH
// begin enable ;
25621: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25622: LD_ADDR_VAR 0 2
25626: PUSH
25627: LD_INT 22
25629: PUSH
25630: LD_OWVAR 2
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 2
25641: PUSH
25642: LD_INT 34
25644: PUSH
25645: LD_INT 11
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 34
25654: PUSH
25655: LD_INT 30
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: LIST
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PPUSH
25671: CALL_OW 69
25675: ST_TO_ADDR
// if not tmp then
25676: LD_VAR 0 2
25680: NOT
25681: IFFALSE 25685
// exit ;
25683: GO 25714
// for i in tmp do
25685: LD_ADDR_VAR 0 1
25689: PUSH
25690: LD_VAR 0 2
25694: PUSH
25695: FOR_IN
25696: IFFALSE 25712
// begin SetLives ( i , 0 ) ;
25698: LD_VAR 0 1
25702: PPUSH
25703: LD_INT 0
25705: PPUSH
25706: CALL_OW 234
// end ;
25710: GO 25695
25712: POP
25713: POP
// end ;
25714: PPOPN 2
25716: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25717: LD_EXP 67
25721: PUSH
25722: LD_EXP 77
25726: AND
25727: IFFALSE 25747
25729: GO 25731
25731: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25732: LD_INT 32
25734: PPUSH
25735: LD_OWVAR 2
25739: PPUSH
25740: LD_INT 0
25742: PPUSH
25743: CALL_OW 324
25747: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25748: LD_EXP 67
25752: PUSH
25753: LD_EXP 78
25757: AND
25758: IFFALSE 25939
25760: GO 25762
25762: DISABLE
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
25767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25768: LD_ADDR_VAR 0 2
25772: PUSH
25773: LD_INT 22
25775: PUSH
25776: LD_OWVAR 2
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 33
25787: PUSH
25788: LD_INT 3
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PPUSH
25799: CALL_OW 69
25803: ST_TO_ADDR
// if not tmp then
25804: LD_VAR 0 2
25808: NOT
25809: IFFALSE 25813
// exit ;
25811: GO 25939
// side := 0 ;
25813: LD_ADDR_VAR 0 3
25817: PUSH
25818: LD_INT 0
25820: ST_TO_ADDR
// for i := 1 to 8 do
25821: LD_ADDR_VAR 0 1
25825: PUSH
25826: DOUBLE
25827: LD_INT 1
25829: DEC
25830: ST_TO_ADDR
25831: LD_INT 8
25833: PUSH
25834: FOR_TO
25835: IFFALSE 25883
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25837: LD_OWVAR 2
25841: PUSH
25842: LD_VAR 0 1
25846: NONEQUAL
25847: PUSH
25848: LD_OWVAR 2
25852: PPUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: CALL_OW 81
25862: PUSH
25863: LD_INT 2
25865: EQUAL
25866: AND
25867: IFFALSE 25881
// begin side := i ;
25869: LD_ADDR_VAR 0 3
25873: PUSH
25874: LD_VAR 0 1
25878: ST_TO_ADDR
// break ;
25879: GO 25883
// end ;
25881: GO 25834
25883: POP
25884: POP
// if not side then
25885: LD_VAR 0 3
25889: NOT
25890: IFFALSE 25894
// exit ;
25892: GO 25939
// for i := 1 to tmp do
25894: LD_ADDR_VAR 0 1
25898: PUSH
25899: DOUBLE
25900: LD_INT 1
25902: DEC
25903: ST_TO_ADDR
25904: LD_VAR 0 2
25908: PUSH
25909: FOR_TO
25910: IFFALSE 25937
// if Prob ( 60 ) then
25912: LD_INT 60
25914: PPUSH
25915: CALL_OW 13
25919: IFFALSE 25935
// SetSide ( i , side ) ;
25921: LD_VAR 0 1
25925: PPUSH
25926: LD_VAR 0 3
25930: PPUSH
25931: CALL_OW 235
25935: GO 25909
25937: POP
25938: POP
// end ;
25939: PPOPN 3
25941: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25942: LD_EXP 67
25946: PUSH
25947: LD_EXP 80
25951: AND
25952: IFFALSE 26071
25954: GO 25956
25956: DISABLE
25957: LD_INT 0
25959: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25960: LD_ADDR_VAR 0 1
25964: PUSH
25965: LD_INT 22
25967: PUSH
25968: LD_OWVAR 2
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 21
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 3
25989: PUSH
25990: LD_INT 23
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: LIST
26008: PPUSH
26009: CALL_OW 69
26013: PUSH
26014: FOR_IN
26015: IFFALSE 26069
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26017: LD_VAR 0 1
26021: PPUSH
26022: CALL_OW 257
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: LD_INT 3
26035: PUSH
26036: LD_INT 4
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: IN
26045: IFFALSE 26067
// SetClass ( un , rand ( 1 , 4 ) ) ;
26047: LD_VAR 0 1
26051: PPUSH
26052: LD_INT 1
26054: PPUSH
26055: LD_INT 4
26057: PPUSH
26058: CALL_OW 12
26062: PPUSH
26063: CALL_OW 336
26067: GO 26014
26069: POP
26070: POP
// end ;
26071: PPOPN 1
26073: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26074: LD_EXP 67
26078: PUSH
26079: LD_EXP 79
26083: AND
26084: IFFALSE 26163
26086: GO 26088
26088: DISABLE
26089: LD_INT 0
26091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26092: LD_ADDR_VAR 0 1
26096: PUSH
26097: LD_INT 22
26099: PUSH
26100: LD_OWVAR 2
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 21
26111: PUSH
26112: LD_INT 3
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PPUSH
26123: CALL_OW 69
26127: ST_TO_ADDR
// if not tmp then
26128: LD_VAR 0 1
26132: NOT
26133: IFFALSE 26137
// exit ;
26135: GO 26163
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26137: LD_VAR 0 1
26141: PUSH
26142: LD_INT 1
26144: PPUSH
26145: LD_VAR 0 1
26149: PPUSH
26150: CALL_OW 12
26154: ARRAY
26155: PPUSH
26156: LD_INT 100
26158: PPUSH
26159: CALL_OW 234
// end ;
26163: PPOPN 1
26165: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26166: LD_EXP 67
26170: PUSH
26171: LD_EXP 81
26175: AND
26176: IFFALSE 26274
26178: GO 26180
26180: DISABLE
26181: LD_INT 0
26183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26184: LD_ADDR_VAR 0 1
26188: PUSH
26189: LD_INT 22
26191: PUSH
26192: LD_OWVAR 2
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 21
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PPUSH
26215: CALL_OW 69
26219: ST_TO_ADDR
// if not tmp then
26220: LD_VAR 0 1
26224: NOT
26225: IFFALSE 26229
// exit ;
26227: GO 26274
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26229: LD_VAR 0 1
26233: PUSH
26234: LD_INT 1
26236: PPUSH
26237: LD_VAR 0 1
26241: PPUSH
26242: CALL_OW 12
26246: ARRAY
26247: PPUSH
26248: LD_INT 1
26250: PPUSH
26251: LD_INT 4
26253: PPUSH
26254: CALL_OW 12
26258: PPUSH
26259: LD_INT 3000
26261: PPUSH
26262: LD_INT 9000
26264: PPUSH
26265: CALL_OW 12
26269: PPUSH
26270: CALL_OW 492
// end ;
26274: PPOPN 1
26276: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26277: LD_EXP 67
26281: PUSH
26282: LD_EXP 82
26286: AND
26287: IFFALSE 26307
26289: GO 26291
26291: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26292: LD_INT 1
26294: PPUSH
26295: LD_OWVAR 2
26299: PPUSH
26300: LD_INT 0
26302: PPUSH
26303: CALL_OW 324
26307: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26308: LD_EXP 67
26312: PUSH
26313: LD_EXP 83
26317: AND
26318: IFFALSE 26401
26320: GO 26322
26322: DISABLE
26323: LD_INT 0
26325: PPUSH
26326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26327: LD_ADDR_VAR 0 2
26331: PUSH
26332: LD_INT 22
26334: PUSH
26335: LD_OWVAR 2
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 21
26346: PUSH
26347: LD_INT 3
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PPUSH
26358: CALL_OW 69
26362: ST_TO_ADDR
// if not tmp then
26363: LD_VAR 0 2
26367: NOT
26368: IFFALSE 26372
// exit ;
26370: GO 26401
// for i in tmp do
26372: LD_ADDR_VAR 0 1
26376: PUSH
26377: LD_VAR 0 2
26381: PUSH
26382: FOR_IN
26383: IFFALSE 26399
// SetBLevel ( i , 10 ) ;
26385: LD_VAR 0 1
26389: PPUSH
26390: LD_INT 10
26392: PPUSH
26393: CALL_OW 241
26397: GO 26382
26399: POP
26400: POP
// end ;
26401: PPOPN 2
26403: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26404: LD_EXP 67
26408: PUSH
26409: LD_EXP 84
26413: AND
26414: IFFALSE 26525
26416: GO 26418
26418: DISABLE
26419: LD_INT 0
26421: PPUSH
26422: PPUSH
26423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26424: LD_ADDR_VAR 0 3
26428: PUSH
26429: LD_INT 22
26431: PUSH
26432: LD_OWVAR 2
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 25
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PPUSH
26455: CALL_OW 69
26459: ST_TO_ADDR
// if not tmp then
26460: LD_VAR 0 3
26464: NOT
26465: IFFALSE 26469
// exit ;
26467: GO 26525
// un := tmp [ rand ( 1 , tmp ) ] ;
26469: LD_ADDR_VAR 0 2
26473: PUSH
26474: LD_VAR 0 3
26478: PUSH
26479: LD_INT 1
26481: PPUSH
26482: LD_VAR 0 3
26486: PPUSH
26487: CALL_OW 12
26491: ARRAY
26492: ST_TO_ADDR
// if Crawls ( un ) then
26493: LD_VAR 0 2
26497: PPUSH
26498: CALL_OW 318
26502: IFFALSE 26513
// ComWalk ( un ) ;
26504: LD_VAR 0 2
26508: PPUSH
26509: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26513: LD_VAR 0 2
26517: PPUSH
26518: LD_INT 5
26520: PPUSH
26521: CALL_OW 336
// end ;
26525: PPOPN 3
26527: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26528: LD_EXP 67
26532: PUSH
26533: LD_EXP 85
26537: AND
26538: PUSH
26539: LD_OWVAR 67
26543: PUSH
26544: LD_INT 4
26546: LESS
26547: AND
26548: IFFALSE 26567
26550: GO 26552
26552: DISABLE
// begin Difficulty := Difficulty + 1 ;
26553: LD_ADDR_OWVAR 67
26557: PUSH
26558: LD_OWVAR 67
26562: PUSH
26563: LD_INT 1
26565: PLUS
26566: ST_TO_ADDR
// end ;
26567: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26568: LD_EXP 67
26572: PUSH
26573: LD_EXP 86
26577: AND
26578: IFFALSE 26681
26580: GO 26582
26582: DISABLE
26583: LD_INT 0
26585: PPUSH
// begin for i := 1 to 5 do
26586: LD_ADDR_VAR 0 1
26590: PUSH
26591: DOUBLE
26592: LD_INT 1
26594: DEC
26595: ST_TO_ADDR
26596: LD_INT 5
26598: PUSH
26599: FOR_TO
26600: IFFALSE 26679
// begin uc_nation := nation_nature ;
26602: LD_ADDR_OWVAR 21
26606: PUSH
26607: LD_INT 0
26609: ST_TO_ADDR
// uc_side := 0 ;
26610: LD_ADDR_OWVAR 20
26614: PUSH
26615: LD_INT 0
26617: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26618: LD_ADDR_OWVAR 29
26622: PUSH
26623: LD_INT 12
26625: PUSH
26626: LD_INT 12
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: ST_TO_ADDR
// hc_agressivity := 20 ;
26633: LD_ADDR_OWVAR 35
26637: PUSH
26638: LD_INT 20
26640: ST_TO_ADDR
// hc_class := class_tiger ;
26641: LD_ADDR_OWVAR 28
26645: PUSH
26646: LD_INT 14
26648: ST_TO_ADDR
// hc_gallery :=  ;
26649: LD_ADDR_OWVAR 33
26653: PUSH
26654: LD_STRING 
26656: ST_TO_ADDR
// hc_name :=  ;
26657: LD_ADDR_OWVAR 26
26661: PUSH
26662: LD_STRING 
26664: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26665: CALL_OW 44
26669: PPUSH
26670: LD_INT 0
26672: PPUSH
26673: CALL_OW 51
// end ;
26677: GO 26599
26679: POP
26680: POP
// end ;
26681: PPOPN 1
26683: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26684: LD_EXP 67
26688: PUSH
26689: LD_EXP 87
26693: AND
26694: IFFALSE 26703
26696: GO 26698
26698: DISABLE
// StreamSibBomb ;
26699: CALL 26704 0 0
26703: END
// export function StreamSibBomb ; var i , x , y ; begin
26704: LD_INT 0
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
// result := false ;
26710: LD_ADDR_VAR 0 1
26714: PUSH
26715: LD_INT 0
26717: ST_TO_ADDR
// for i := 1 to 16 do
26718: LD_ADDR_VAR 0 2
26722: PUSH
26723: DOUBLE
26724: LD_INT 1
26726: DEC
26727: ST_TO_ADDR
26728: LD_INT 16
26730: PUSH
26731: FOR_TO
26732: IFFALSE 26931
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26734: LD_ADDR_VAR 0 3
26738: PUSH
26739: LD_INT 10
26741: PUSH
26742: LD_INT 20
26744: PUSH
26745: LD_INT 30
26747: PUSH
26748: LD_INT 40
26750: PUSH
26751: LD_INT 50
26753: PUSH
26754: LD_INT 60
26756: PUSH
26757: LD_INT 70
26759: PUSH
26760: LD_INT 80
26762: PUSH
26763: LD_INT 90
26765: PUSH
26766: LD_INT 100
26768: PUSH
26769: LD_INT 110
26771: PUSH
26772: LD_INT 120
26774: PUSH
26775: LD_INT 130
26777: PUSH
26778: LD_INT 140
26780: PUSH
26781: LD_INT 150
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: PPUSH
26804: LD_INT 15
26806: PPUSH
26807: CALL_OW 12
26811: ARRAY
26812: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26813: LD_ADDR_VAR 0 4
26817: PUSH
26818: LD_INT 10
26820: PUSH
26821: LD_INT 20
26823: PUSH
26824: LD_INT 30
26826: PUSH
26827: LD_INT 40
26829: PUSH
26830: LD_INT 50
26832: PUSH
26833: LD_INT 60
26835: PUSH
26836: LD_INT 70
26838: PUSH
26839: LD_INT 80
26841: PUSH
26842: LD_INT 90
26844: PUSH
26845: LD_INT 100
26847: PUSH
26848: LD_INT 110
26850: PUSH
26851: LD_INT 120
26853: PUSH
26854: LD_INT 130
26856: PUSH
26857: LD_INT 140
26859: PUSH
26860: LD_INT 150
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 1
26882: PPUSH
26883: LD_INT 15
26885: PPUSH
26886: CALL_OW 12
26890: ARRAY
26891: ST_TO_ADDR
// if ValidHex ( x , y ) then
26892: LD_VAR 0 3
26896: PPUSH
26897: LD_VAR 0 4
26901: PPUSH
26902: CALL_OW 488
26906: IFFALSE 26929
// begin result := [ x , y ] ;
26908: LD_ADDR_VAR 0 1
26912: PUSH
26913: LD_VAR 0 3
26917: PUSH
26918: LD_VAR 0 4
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: ST_TO_ADDR
// break ;
26927: GO 26931
// end ; end ;
26929: GO 26731
26931: POP
26932: POP
// if result then
26933: LD_VAR 0 1
26937: IFFALSE 26997
// begin ToLua ( playSibBomb() ) ;
26939: LD_STRING playSibBomb()
26941: PPUSH
26942: CALL_OW 559
// wait ( 0 0$14 ) ;
26946: LD_INT 490
26948: PPUSH
26949: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26953: LD_VAR 0 1
26957: PUSH
26958: LD_INT 1
26960: ARRAY
26961: PPUSH
26962: LD_VAR 0 1
26966: PUSH
26967: LD_INT 2
26969: ARRAY
26970: PPUSH
26971: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26975: LD_VAR 0 1
26979: PUSH
26980: LD_INT 1
26982: ARRAY
26983: PPUSH
26984: LD_VAR 0 1
26988: PUSH
26989: LD_INT 2
26991: ARRAY
26992: PPUSH
26993: CALL_OW 429
// end ; end ;
26997: LD_VAR 0 1
27001: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27002: LD_EXP 67
27006: PUSH
27007: LD_EXP 89
27011: AND
27012: IFFALSE 27024
27014: GO 27016
27016: DISABLE
// YouLost (  ) ;
27017: LD_STRING 
27019: PPUSH
27020: CALL_OW 104
27024: END
// every 0 0$1 trigger StreamModeActive and sFog do
27025: LD_EXP 67
27029: PUSH
27030: LD_EXP 88
27034: AND
27035: IFFALSE 27049
27037: GO 27039
27039: DISABLE
// FogOff ( your_side ) ;
27040: LD_OWVAR 2
27044: PPUSH
27045: CALL_OW 344
27049: END
// every 0 0$1 trigger StreamModeActive and sSun do
27050: LD_EXP 67
27054: PUSH
27055: LD_EXP 90
27059: AND
27060: IFFALSE 27088
27062: GO 27064
27064: DISABLE
// begin solar_recharge_percent := 0 ;
27065: LD_ADDR_OWVAR 79
27069: PUSH
27070: LD_INT 0
27072: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27073: LD_INT 10500
27075: PPUSH
27076: CALL_OW 67
// solar_recharge_percent := 100 ;
27080: LD_ADDR_OWVAR 79
27084: PUSH
27085: LD_INT 100
27087: ST_TO_ADDR
// end ;
27088: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27089: LD_EXP 67
27093: PUSH
27094: LD_EXP 91
27098: AND
27099: IFFALSE 27338
27101: GO 27103
27103: DISABLE
27104: LD_INT 0
27106: PPUSH
27107: PPUSH
27108: PPUSH
// begin tmp := [ ] ;
27109: LD_ADDR_VAR 0 3
27113: PUSH
27114: EMPTY
27115: ST_TO_ADDR
// for i := 1 to 6 do
27116: LD_ADDR_VAR 0 1
27120: PUSH
27121: DOUBLE
27122: LD_INT 1
27124: DEC
27125: ST_TO_ADDR
27126: LD_INT 6
27128: PUSH
27129: FOR_TO
27130: IFFALSE 27235
// begin uc_nation := nation_nature ;
27132: LD_ADDR_OWVAR 21
27136: PUSH
27137: LD_INT 0
27139: ST_TO_ADDR
// uc_side := 0 ;
27140: LD_ADDR_OWVAR 20
27144: PUSH
27145: LD_INT 0
27147: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27148: LD_ADDR_OWVAR 29
27152: PUSH
27153: LD_INT 12
27155: PUSH
27156: LD_INT 12
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: ST_TO_ADDR
// hc_agressivity := 20 ;
27163: LD_ADDR_OWVAR 35
27167: PUSH
27168: LD_INT 20
27170: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27171: LD_ADDR_OWVAR 28
27175: PUSH
27176: LD_INT 17
27178: ST_TO_ADDR
// hc_gallery :=  ;
27179: LD_ADDR_OWVAR 33
27183: PUSH
27184: LD_STRING 
27186: ST_TO_ADDR
// hc_name :=  ;
27187: LD_ADDR_OWVAR 26
27191: PUSH
27192: LD_STRING 
27194: ST_TO_ADDR
// un := CreateHuman ;
27195: LD_ADDR_VAR 0 2
27199: PUSH
27200: CALL_OW 44
27204: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27205: LD_VAR 0 2
27209: PPUSH
27210: LD_INT 1
27212: PPUSH
27213: CALL_OW 51
// tmp := tmp ^ un ;
27217: LD_ADDR_VAR 0 3
27221: PUSH
27222: LD_VAR 0 3
27226: PUSH
27227: LD_VAR 0 2
27231: ADD
27232: ST_TO_ADDR
// end ;
27233: GO 27129
27235: POP
27236: POP
// repeat wait ( 0 0$1 ) ;
27237: LD_INT 35
27239: PPUSH
27240: CALL_OW 67
// for un in tmp do
27244: LD_ADDR_VAR 0 2
27248: PUSH
27249: LD_VAR 0 3
27253: PUSH
27254: FOR_IN
27255: IFFALSE 27329
// begin if IsDead ( un ) then
27257: LD_VAR 0 2
27261: PPUSH
27262: CALL_OW 301
27266: IFFALSE 27286
// begin tmp := tmp diff un ;
27268: LD_ADDR_VAR 0 3
27272: PUSH
27273: LD_VAR 0 3
27277: PUSH
27278: LD_VAR 0 2
27282: DIFF
27283: ST_TO_ADDR
// continue ;
27284: GO 27254
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27286: LD_VAR 0 2
27290: PPUSH
27291: LD_INT 3
27293: PUSH
27294: LD_INT 22
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PPUSH
27308: CALL_OW 69
27312: PPUSH
27313: LD_VAR 0 2
27317: PPUSH
27318: CALL_OW 74
27322: PPUSH
27323: CALL_OW 115
// end ;
27327: GO 27254
27329: POP
27330: POP
// until not tmp ;
27331: LD_VAR 0 3
27335: NOT
27336: IFFALSE 27237
// end ;
27338: PPOPN 3
27340: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27341: LD_EXP 67
27345: PUSH
27346: LD_EXP 92
27350: AND
27351: IFFALSE 27405
27353: GO 27355
27355: DISABLE
// begin ToLua ( displayTroll(); ) ;
27356: LD_STRING displayTroll();
27358: PPUSH
27359: CALL_OW 559
// wait ( 3 3$00 ) ;
27363: LD_INT 6300
27365: PPUSH
27366: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27370: LD_STRING hideTroll();
27372: PPUSH
27373: CALL_OW 559
// wait ( 1 1$00 ) ;
27377: LD_INT 2100
27379: PPUSH
27380: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27384: LD_STRING displayTroll();
27386: PPUSH
27387: CALL_OW 559
// wait ( 1 1$00 ) ;
27391: LD_INT 2100
27393: PPUSH
27394: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27398: LD_STRING hideTroll();
27400: PPUSH
27401: CALL_OW 559
// end ;
27405: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27406: LD_EXP 67
27410: PUSH
27411: LD_EXP 93
27415: AND
27416: IFFALSE 27479
27418: GO 27420
27420: DISABLE
27421: LD_INT 0
27423: PPUSH
// begin p := 0 ;
27424: LD_ADDR_VAR 0 1
27428: PUSH
27429: LD_INT 0
27431: ST_TO_ADDR
// repeat game_speed := 1 ;
27432: LD_ADDR_OWVAR 65
27436: PUSH
27437: LD_INT 1
27439: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27440: LD_INT 35
27442: PPUSH
27443: CALL_OW 67
// p := p + 1 ;
27447: LD_ADDR_VAR 0 1
27451: PUSH
27452: LD_VAR 0 1
27456: PUSH
27457: LD_INT 1
27459: PLUS
27460: ST_TO_ADDR
// until p >= 60 ;
27461: LD_VAR 0 1
27465: PUSH
27466: LD_INT 60
27468: GREATEREQUAL
27469: IFFALSE 27432
// game_speed := 4 ;
27471: LD_ADDR_OWVAR 65
27475: PUSH
27476: LD_INT 4
27478: ST_TO_ADDR
// end ;
27479: PPOPN 1
27481: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27482: LD_EXP 67
27486: PUSH
27487: LD_EXP 94
27491: AND
27492: IFFALSE 27638
27494: GO 27496
27496: DISABLE
27497: LD_INT 0
27499: PPUSH
27500: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27501: LD_ADDR_VAR 0 1
27505: PUSH
27506: LD_INT 22
27508: PUSH
27509: LD_OWVAR 2
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 2
27520: PUSH
27521: LD_INT 30
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 30
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PPUSH
27550: CALL_OW 69
27554: ST_TO_ADDR
// if not depot then
27555: LD_VAR 0 1
27559: NOT
27560: IFFALSE 27564
// exit ;
27562: GO 27638
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27564: LD_ADDR_VAR 0 2
27568: PUSH
27569: LD_VAR 0 1
27573: PUSH
27574: LD_INT 1
27576: PPUSH
27577: LD_VAR 0 1
27581: PPUSH
27582: CALL_OW 12
27586: ARRAY
27587: PPUSH
27588: CALL_OW 274
27592: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27593: LD_VAR 0 2
27597: PPUSH
27598: LD_INT 1
27600: PPUSH
27601: LD_INT 0
27603: PPUSH
27604: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27608: LD_VAR 0 2
27612: PPUSH
27613: LD_INT 2
27615: PPUSH
27616: LD_INT 0
27618: PPUSH
27619: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27623: LD_VAR 0 2
27627: PPUSH
27628: LD_INT 3
27630: PPUSH
27631: LD_INT 0
27633: PPUSH
27634: CALL_OW 277
// end ;
27638: PPOPN 2
27640: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27641: LD_EXP 67
27645: PUSH
27646: LD_EXP 95
27650: AND
27651: IFFALSE 27748
27653: GO 27655
27655: DISABLE
27656: LD_INT 0
27658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27659: LD_ADDR_VAR 0 1
27663: PUSH
27664: LD_INT 22
27666: PUSH
27667: LD_OWVAR 2
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 21
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 3
27688: PUSH
27689: LD_INT 23
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: PPUSH
27708: CALL_OW 69
27712: ST_TO_ADDR
// if not tmp then
27713: LD_VAR 0 1
27717: NOT
27718: IFFALSE 27722
// exit ;
27720: GO 27748
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27722: LD_VAR 0 1
27726: PUSH
27727: LD_INT 1
27729: PPUSH
27730: LD_VAR 0 1
27734: PPUSH
27735: CALL_OW 12
27739: ARRAY
27740: PPUSH
27741: LD_INT 200
27743: PPUSH
27744: CALL_OW 234
// end ;
27748: PPOPN 1
27750: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27751: LD_EXP 67
27755: PUSH
27756: LD_EXP 96
27760: AND
27761: IFFALSE 27840
27763: GO 27765
27765: DISABLE
27766: LD_INT 0
27768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27769: LD_ADDR_VAR 0 1
27773: PUSH
27774: LD_INT 22
27776: PUSH
27777: LD_OWVAR 2
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 21
27788: PUSH
27789: LD_INT 2
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PPUSH
27800: CALL_OW 69
27804: ST_TO_ADDR
// if not tmp then
27805: LD_VAR 0 1
27809: NOT
27810: IFFALSE 27814
// exit ;
27812: GO 27840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27814: LD_VAR 0 1
27818: PUSH
27819: LD_INT 1
27821: PPUSH
27822: LD_VAR 0 1
27826: PPUSH
27827: CALL_OW 12
27831: ARRAY
27832: PPUSH
27833: LD_INT 60
27835: PPUSH
27836: CALL_OW 234
// end ;
27840: PPOPN 1
27842: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27843: LD_EXP 67
27847: PUSH
27848: LD_EXP 97
27852: AND
27853: IFFALSE 27952
27855: GO 27857
27857: DISABLE
27858: LD_INT 0
27860: PPUSH
27861: PPUSH
// begin enable ;
27862: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27863: LD_ADDR_VAR 0 1
27867: PUSH
27868: LD_INT 22
27870: PUSH
27871: LD_OWVAR 2
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 61
27882: PUSH
27883: EMPTY
27884: LIST
27885: PUSH
27886: LD_INT 33
27888: PUSH
27889: LD_INT 2
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: LIST
27900: PPUSH
27901: CALL_OW 69
27905: ST_TO_ADDR
// if not tmp then
27906: LD_VAR 0 1
27910: NOT
27911: IFFALSE 27915
// exit ;
27913: GO 27952
// for i in tmp do
27915: LD_ADDR_VAR 0 2
27919: PUSH
27920: LD_VAR 0 1
27924: PUSH
27925: FOR_IN
27926: IFFALSE 27950
// if IsControledBy ( i ) then
27928: LD_VAR 0 2
27932: PPUSH
27933: CALL_OW 312
27937: IFFALSE 27948
// ComUnlink ( i ) ;
27939: LD_VAR 0 2
27943: PPUSH
27944: CALL_OW 136
27948: GO 27925
27950: POP
27951: POP
// end ;
27952: PPOPN 2
27954: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27955: LD_EXP 67
27959: PUSH
27960: LD_EXP 98
27964: AND
27965: IFFALSE 28105
27967: GO 27969
27969: DISABLE
27970: LD_INT 0
27972: PPUSH
27973: PPUSH
// begin ToLua ( displayPowell(); ) ;
27974: LD_STRING displayPowell();
27976: PPUSH
27977: CALL_OW 559
// uc_side := 0 ;
27981: LD_ADDR_OWVAR 20
27985: PUSH
27986: LD_INT 0
27988: ST_TO_ADDR
// uc_nation := 2 ;
27989: LD_ADDR_OWVAR 21
27993: PUSH
27994: LD_INT 2
27996: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27997: LD_ADDR_OWVAR 37
28001: PUSH
28002: LD_INT 14
28004: ST_TO_ADDR
// vc_engine := engine_siberite ;
28005: LD_ADDR_OWVAR 39
28009: PUSH
28010: LD_INT 3
28012: ST_TO_ADDR
// vc_control := control_apeman ;
28013: LD_ADDR_OWVAR 38
28017: PUSH
28018: LD_INT 5
28020: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28021: LD_ADDR_OWVAR 40
28025: PUSH
28026: LD_INT 29
28028: ST_TO_ADDR
// un := CreateVehicle ;
28029: LD_ADDR_VAR 0 2
28033: PUSH
28034: CALL_OW 45
28038: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28039: LD_VAR 0 2
28043: PPUSH
28044: LD_INT 1
28046: PPUSH
28047: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28051: LD_INT 35
28053: PPUSH
28054: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28058: LD_VAR 0 2
28062: PPUSH
28063: LD_INT 22
28065: PUSH
28066: LD_OWVAR 2
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PPUSH
28075: CALL_OW 69
28079: PPUSH
28080: LD_VAR 0 2
28084: PPUSH
28085: CALL_OW 74
28089: PPUSH
28090: CALL_OW 115
// until IsDead ( un ) ;
28094: LD_VAR 0 2
28098: PPUSH
28099: CALL_OW 301
28103: IFFALSE 28051
// end ;
28105: PPOPN 2
28107: END
// every 0 0$1 trigger StreamModeActive and sStu do
28108: LD_EXP 67
28112: PUSH
28113: LD_EXP 106
28117: AND
28118: IFFALSE 28134
28120: GO 28122
28122: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28123: LD_STRING displayStucuk();
28125: PPUSH
28126: CALL_OW 559
// ResetFog ;
28130: CALL_OW 335
// end ;
28134: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28135: LD_EXP 67
28139: PUSH
28140: LD_EXP 99
28144: AND
28145: IFFALSE 28286
28147: GO 28149
28149: DISABLE
28150: LD_INT 0
28152: PPUSH
28153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28154: LD_ADDR_VAR 0 2
28158: PUSH
28159: LD_INT 22
28161: PUSH
28162: LD_OWVAR 2
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 21
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PPUSH
28185: CALL_OW 69
28189: ST_TO_ADDR
// if not tmp then
28190: LD_VAR 0 2
28194: NOT
28195: IFFALSE 28199
// exit ;
28197: GO 28286
// un := tmp [ rand ( 1 , tmp ) ] ;
28199: LD_ADDR_VAR 0 1
28203: PUSH
28204: LD_VAR 0 2
28208: PUSH
28209: LD_INT 1
28211: PPUSH
28212: LD_VAR 0 2
28216: PPUSH
28217: CALL_OW 12
28221: ARRAY
28222: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28223: LD_VAR 0 1
28227: PPUSH
28228: LD_INT 0
28230: PPUSH
28231: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28235: LD_VAR 0 1
28239: PPUSH
28240: LD_OWVAR 3
28244: PUSH
28245: LD_VAR 0 1
28249: DIFF
28250: PPUSH
28251: LD_VAR 0 1
28255: PPUSH
28256: CALL_OW 74
28260: PPUSH
28261: CALL_OW 115
// wait ( 0 0$20 ) ;
28265: LD_INT 700
28267: PPUSH
28268: CALL_OW 67
// SetSide ( un , your_side ) ;
28272: LD_VAR 0 1
28276: PPUSH
28277: LD_OWVAR 2
28281: PPUSH
28282: CALL_OW 235
// end ;
28286: PPOPN 2
28288: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28289: LD_EXP 67
28293: PUSH
28294: LD_EXP 100
28298: AND
28299: IFFALSE 28405
28301: GO 28303
28303: DISABLE
28304: LD_INT 0
28306: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28307: LD_ADDR_VAR 0 1
28311: PUSH
28312: LD_INT 22
28314: PUSH
28315: LD_OWVAR 2
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: LD_INT 30
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 30
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: LIST
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PPUSH
28356: CALL_OW 69
28360: ST_TO_ADDR
// if not depot then
28361: LD_VAR 0 1
28365: NOT
28366: IFFALSE 28370
// exit ;
28368: GO 28405
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28370: LD_VAR 0 1
28374: PUSH
28375: LD_INT 1
28377: ARRAY
28378: PPUSH
28379: CALL_OW 250
28383: PPUSH
28384: LD_VAR 0 1
28388: PUSH
28389: LD_INT 1
28391: ARRAY
28392: PPUSH
28393: CALL_OW 251
28397: PPUSH
28398: LD_INT 70
28400: PPUSH
28401: CALL_OW 495
// end ;
28405: PPOPN 1
28407: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28408: LD_EXP 67
28412: PUSH
28413: LD_EXP 101
28417: AND
28418: IFFALSE 28629
28420: GO 28422
28422: DISABLE
28423: LD_INT 0
28425: PPUSH
28426: PPUSH
28427: PPUSH
28428: PPUSH
28429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28430: LD_ADDR_VAR 0 5
28434: PUSH
28435: LD_INT 22
28437: PUSH
28438: LD_OWVAR 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 21
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: ST_TO_ADDR
// if not tmp then
28466: LD_VAR 0 5
28470: NOT
28471: IFFALSE 28475
// exit ;
28473: GO 28629
// for i in tmp do
28475: LD_ADDR_VAR 0 1
28479: PUSH
28480: LD_VAR 0 5
28484: PUSH
28485: FOR_IN
28486: IFFALSE 28627
// begin d := rand ( 0 , 5 ) ;
28488: LD_ADDR_VAR 0 4
28492: PUSH
28493: LD_INT 0
28495: PPUSH
28496: LD_INT 5
28498: PPUSH
28499: CALL_OW 12
28503: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28504: LD_ADDR_VAR 0 2
28508: PUSH
28509: LD_VAR 0 1
28513: PPUSH
28514: CALL_OW 250
28518: PPUSH
28519: LD_VAR 0 4
28523: PPUSH
28524: LD_INT 3
28526: PPUSH
28527: LD_INT 12
28529: PPUSH
28530: CALL_OW 12
28534: PPUSH
28535: CALL_OW 272
28539: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28540: LD_ADDR_VAR 0 3
28544: PUSH
28545: LD_VAR 0 1
28549: PPUSH
28550: CALL_OW 251
28554: PPUSH
28555: LD_VAR 0 4
28559: PPUSH
28560: LD_INT 3
28562: PPUSH
28563: LD_INT 12
28565: PPUSH
28566: CALL_OW 12
28570: PPUSH
28571: CALL_OW 273
28575: ST_TO_ADDR
// if ValidHex ( x , y ) then
28576: LD_VAR 0 2
28580: PPUSH
28581: LD_VAR 0 3
28585: PPUSH
28586: CALL_OW 488
28590: IFFALSE 28625
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_VAR 0 2
28601: PPUSH
28602: LD_VAR 0 3
28606: PPUSH
28607: LD_INT 3
28609: PPUSH
28610: LD_INT 6
28612: PPUSH
28613: CALL_OW 12
28617: PPUSH
28618: LD_INT 1
28620: PPUSH
28621: CALL_OW 483
// end ;
28625: GO 28485
28627: POP
28628: POP
// end ;
28629: PPOPN 5
28631: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28632: LD_EXP 67
28636: PUSH
28637: LD_EXP 102
28641: AND
28642: IFFALSE 28736
28644: GO 28646
28646: DISABLE
28647: LD_INT 0
28649: PPUSH
28650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28651: LD_ADDR_VAR 0 2
28655: PUSH
28656: LD_INT 22
28658: PUSH
28659: LD_OWVAR 2
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 32
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 21
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: LIST
28692: PPUSH
28693: CALL_OW 69
28697: ST_TO_ADDR
// if not tmp then
28698: LD_VAR 0 2
28702: NOT
28703: IFFALSE 28707
// exit ;
28705: GO 28736
// for i in tmp do
28707: LD_ADDR_VAR 0 1
28711: PUSH
28712: LD_VAR 0 2
28716: PUSH
28717: FOR_IN
28718: IFFALSE 28734
// SetFuel ( i , 0 ) ;
28720: LD_VAR 0 1
28724: PPUSH
28725: LD_INT 0
28727: PPUSH
28728: CALL_OW 240
28732: GO 28717
28734: POP
28735: POP
// end ;
28736: PPOPN 2
28738: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28739: LD_EXP 67
28743: PUSH
28744: LD_EXP 103
28748: AND
28749: IFFALSE 28815
28751: GO 28753
28753: DISABLE
28754: LD_INT 0
28756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28757: LD_ADDR_VAR 0 1
28761: PUSH
28762: LD_INT 22
28764: PUSH
28765: LD_OWVAR 2
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 30
28776: PUSH
28777: LD_INT 29
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PPUSH
28788: CALL_OW 69
28792: ST_TO_ADDR
// if not tmp then
28793: LD_VAR 0 1
28797: NOT
28798: IFFALSE 28802
// exit ;
28800: GO 28815
// DestroyUnit ( tmp [ 1 ] ) ;
28802: LD_VAR 0 1
28806: PUSH
28807: LD_INT 1
28809: ARRAY
28810: PPUSH
28811: CALL_OW 65
// end ;
28815: PPOPN 1
28817: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28818: LD_EXP 67
28822: PUSH
28823: LD_EXP 105
28827: AND
28828: IFFALSE 28957
28830: GO 28832
28832: DISABLE
28833: LD_INT 0
28835: PPUSH
// begin uc_side := 0 ;
28836: LD_ADDR_OWVAR 20
28840: PUSH
28841: LD_INT 0
28843: ST_TO_ADDR
// uc_nation := nation_arabian ;
28844: LD_ADDR_OWVAR 21
28848: PUSH
28849: LD_INT 2
28851: ST_TO_ADDR
// hc_gallery :=  ;
28852: LD_ADDR_OWVAR 33
28856: PUSH
28857: LD_STRING 
28859: ST_TO_ADDR
// hc_name :=  ;
28860: LD_ADDR_OWVAR 26
28864: PUSH
28865: LD_STRING 
28867: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28868: LD_INT 1
28870: PPUSH
28871: LD_INT 11
28873: PPUSH
28874: LD_INT 10
28876: PPUSH
28877: CALL_OW 380
// un := CreateHuman ;
28881: LD_ADDR_VAR 0 1
28885: PUSH
28886: CALL_OW 44
28890: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28891: LD_VAR 0 1
28895: PPUSH
28896: LD_INT 1
28898: PPUSH
28899: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28903: LD_INT 35
28905: PPUSH
28906: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28910: LD_VAR 0 1
28914: PPUSH
28915: LD_INT 22
28917: PUSH
28918: LD_OWVAR 2
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PPUSH
28927: CALL_OW 69
28931: PPUSH
28932: LD_VAR 0 1
28936: PPUSH
28937: CALL_OW 74
28941: PPUSH
28942: CALL_OW 115
// until IsDead ( un ) ;
28946: LD_VAR 0 1
28950: PPUSH
28951: CALL_OW 301
28955: IFFALSE 28903
// end ;
28957: PPOPN 1
28959: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28960: LD_EXP 67
28964: PUSH
28965: LD_EXP 107
28969: AND
28970: IFFALSE 28982
28972: GO 28974
28974: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28975: LD_STRING earthquake(getX(game), 0, 32)
28977: PPUSH
28978: CALL_OW 559
28982: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28983: LD_EXP 67
28987: PUSH
28988: LD_EXP 108
28992: AND
28993: IFFALSE 29084
28995: GO 28997
28997: DISABLE
28998: LD_INT 0
29000: PPUSH
// begin enable ;
29001: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29002: LD_ADDR_VAR 0 1
29006: PUSH
29007: LD_INT 22
29009: PUSH
29010: LD_OWVAR 2
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 21
29021: PUSH
29022: LD_INT 2
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 33
29031: PUSH
29032: LD_INT 3
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: PPUSH
29044: CALL_OW 69
29048: ST_TO_ADDR
// if not tmp then
29049: LD_VAR 0 1
29053: NOT
29054: IFFALSE 29058
// exit ;
29056: GO 29084
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29058: LD_VAR 0 1
29062: PUSH
29063: LD_INT 1
29065: PPUSH
29066: LD_VAR 0 1
29070: PPUSH
29071: CALL_OW 12
29075: ARRAY
29076: PPUSH
29077: LD_INT 1
29079: PPUSH
29080: CALL_OW 234
// end ;
29084: PPOPN 1
29086: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29087: LD_EXP 67
29091: PUSH
29092: LD_EXP 109
29096: AND
29097: IFFALSE 29238
29099: GO 29101
29101: DISABLE
29102: LD_INT 0
29104: PPUSH
29105: PPUSH
29106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29107: LD_ADDR_VAR 0 3
29111: PUSH
29112: LD_INT 22
29114: PUSH
29115: LD_OWVAR 2
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 25
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PPUSH
29138: CALL_OW 69
29142: ST_TO_ADDR
// if not tmp then
29143: LD_VAR 0 3
29147: NOT
29148: IFFALSE 29152
// exit ;
29150: GO 29238
// un := tmp [ rand ( 1 , tmp ) ] ;
29152: LD_ADDR_VAR 0 2
29156: PUSH
29157: LD_VAR 0 3
29161: PUSH
29162: LD_INT 1
29164: PPUSH
29165: LD_VAR 0 3
29169: PPUSH
29170: CALL_OW 12
29174: ARRAY
29175: ST_TO_ADDR
// if Crawls ( un ) then
29176: LD_VAR 0 2
29180: PPUSH
29181: CALL_OW 318
29185: IFFALSE 29196
// ComWalk ( un ) ;
29187: LD_VAR 0 2
29191: PPUSH
29192: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29196: LD_VAR 0 2
29200: PPUSH
29201: LD_INT 9
29203: PPUSH
29204: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29208: LD_INT 28
29210: PPUSH
29211: LD_OWVAR 2
29215: PPUSH
29216: LD_INT 2
29218: PPUSH
29219: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29223: LD_INT 29
29225: PPUSH
29226: LD_OWVAR 2
29230: PPUSH
29231: LD_INT 2
29233: PPUSH
29234: CALL_OW 322
// end ;
29238: PPOPN 3
29240: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29241: LD_EXP 67
29245: PUSH
29246: LD_EXP 110
29250: AND
29251: IFFALSE 29362
29253: GO 29255
29255: DISABLE
29256: LD_INT 0
29258: PPUSH
29259: PPUSH
29260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29261: LD_ADDR_VAR 0 3
29265: PUSH
29266: LD_INT 22
29268: PUSH
29269: LD_OWVAR 2
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 25
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PPUSH
29292: CALL_OW 69
29296: ST_TO_ADDR
// if not tmp then
29297: LD_VAR 0 3
29301: NOT
29302: IFFALSE 29306
// exit ;
29304: GO 29362
// un := tmp [ rand ( 1 , tmp ) ] ;
29306: LD_ADDR_VAR 0 2
29310: PUSH
29311: LD_VAR 0 3
29315: PUSH
29316: LD_INT 1
29318: PPUSH
29319: LD_VAR 0 3
29323: PPUSH
29324: CALL_OW 12
29328: ARRAY
29329: ST_TO_ADDR
// if Crawls ( un ) then
29330: LD_VAR 0 2
29334: PPUSH
29335: CALL_OW 318
29339: IFFALSE 29350
// ComWalk ( un ) ;
29341: LD_VAR 0 2
29345: PPUSH
29346: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29350: LD_VAR 0 2
29354: PPUSH
29355: LD_INT 8
29357: PPUSH
29358: CALL_OW 336
// end ;
29362: PPOPN 3
29364: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29365: LD_EXP 67
29369: PUSH
29370: LD_EXP 111
29374: AND
29375: IFFALSE 29519
29377: GO 29379
29379: DISABLE
29380: LD_INT 0
29382: PPUSH
29383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29384: LD_ADDR_VAR 0 2
29388: PUSH
29389: LD_INT 22
29391: PUSH
29392: LD_OWVAR 2
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 21
29403: PUSH
29404: LD_INT 2
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 2
29413: PUSH
29414: LD_INT 34
29416: PUSH
29417: LD_INT 12
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 34
29426: PUSH
29427: LD_INT 51
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 34
29436: PUSH
29437: LD_INT 32
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: PPUSH
29455: CALL_OW 69
29459: ST_TO_ADDR
// if not tmp then
29460: LD_VAR 0 2
29464: NOT
29465: IFFALSE 29469
// exit ;
29467: GO 29519
// for i in tmp do
29469: LD_ADDR_VAR 0 1
29473: PUSH
29474: LD_VAR 0 2
29478: PUSH
29479: FOR_IN
29480: IFFALSE 29517
// if GetCargo ( i , mat_artifact ) = 0 then
29482: LD_VAR 0 1
29486: PPUSH
29487: LD_INT 4
29489: PPUSH
29490: CALL_OW 289
29494: PUSH
29495: LD_INT 0
29497: EQUAL
29498: IFFALSE 29515
// SetCargo ( i , mat_siberit , 100 ) ;
29500: LD_VAR 0 1
29504: PPUSH
29505: LD_INT 3
29507: PPUSH
29508: LD_INT 100
29510: PPUSH
29511: CALL_OW 290
29515: GO 29479
29517: POP
29518: POP
// end ;
29519: PPOPN 2
29521: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29522: LD_EXP 67
29526: PUSH
29527: LD_EXP 112
29531: AND
29532: IFFALSE 29715
29534: GO 29536
29536: DISABLE
29537: LD_INT 0
29539: PPUSH
29540: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29541: LD_ADDR_VAR 0 2
29545: PUSH
29546: LD_INT 22
29548: PUSH
29549: LD_OWVAR 2
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PPUSH
29558: CALL_OW 69
29562: ST_TO_ADDR
// if not tmp then
29563: LD_VAR 0 2
29567: NOT
29568: IFFALSE 29572
// exit ;
29570: GO 29715
// for i := 1 to 2 do
29572: LD_ADDR_VAR 0 1
29576: PUSH
29577: DOUBLE
29578: LD_INT 1
29580: DEC
29581: ST_TO_ADDR
29582: LD_INT 2
29584: PUSH
29585: FOR_TO
29586: IFFALSE 29713
// begin uc_side := your_side ;
29588: LD_ADDR_OWVAR 20
29592: PUSH
29593: LD_OWVAR 2
29597: ST_TO_ADDR
// uc_nation := nation_american ;
29598: LD_ADDR_OWVAR 21
29602: PUSH
29603: LD_INT 1
29605: ST_TO_ADDR
// vc_chassis := us_morphling ;
29606: LD_ADDR_OWVAR 37
29610: PUSH
29611: LD_INT 5
29613: ST_TO_ADDR
// vc_engine := engine_siberite ;
29614: LD_ADDR_OWVAR 39
29618: PUSH
29619: LD_INT 3
29621: ST_TO_ADDR
// vc_control := control_computer ;
29622: LD_ADDR_OWVAR 38
29626: PUSH
29627: LD_INT 3
29629: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29630: LD_ADDR_OWVAR 40
29634: PUSH
29635: LD_INT 10
29637: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29638: LD_VAR 0 2
29642: PUSH
29643: LD_INT 1
29645: ARRAY
29646: PPUSH
29647: CALL_OW 310
29651: NOT
29652: IFFALSE 29699
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29654: CALL_OW 45
29658: PPUSH
29659: LD_VAR 0 2
29663: PUSH
29664: LD_INT 1
29666: ARRAY
29667: PPUSH
29668: CALL_OW 250
29672: PPUSH
29673: LD_VAR 0 2
29677: PUSH
29678: LD_INT 1
29680: ARRAY
29681: PPUSH
29682: CALL_OW 251
29686: PPUSH
29687: LD_INT 12
29689: PPUSH
29690: LD_INT 1
29692: PPUSH
29693: CALL_OW 50
29697: GO 29711
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29699: CALL_OW 45
29703: PPUSH
29704: LD_INT 1
29706: PPUSH
29707: CALL_OW 51
// end ;
29711: GO 29585
29713: POP
29714: POP
// end ;
29715: PPOPN 2
29717: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29718: LD_EXP 67
29722: PUSH
29723: LD_EXP 113
29727: AND
29728: IFFALSE 29950
29730: GO 29732
29732: DISABLE
29733: LD_INT 0
29735: PPUSH
29736: PPUSH
29737: PPUSH
29738: PPUSH
29739: PPUSH
29740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29741: LD_ADDR_VAR 0 6
29745: PUSH
29746: LD_INT 22
29748: PUSH
29749: LD_OWVAR 2
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 21
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 3
29770: PUSH
29771: LD_INT 23
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: LIST
29789: PPUSH
29790: CALL_OW 69
29794: ST_TO_ADDR
// if not tmp then
29795: LD_VAR 0 6
29799: NOT
29800: IFFALSE 29804
// exit ;
29802: GO 29950
// s1 := rand ( 1 , 4 ) ;
29804: LD_ADDR_VAR 0 2
29808: PUSH
29809: LD_INT 1
29811: PPUSH
29812: LD_INT 4
29814: PPUSH
29815: CALL_OW 12
29819: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29820: LD_ADDR_VAR 0 4
29824: PUSH
29825: LD_VAR 0 6
29829: PUSH
29830: LD_INT 1
29832: ARRAY
29833: PPUSH
29834: LD_VAR 0 2
29838: PPUSH
29839: CALL_OW 259
29843: ST_TO_ADDR
// if s1 = 1 then
29844: LD_VAR 0 2
29848: PUSH
29849: LD_INT 1
29851: EQUAL
29852: IFFALSE 29872
// s2 := rand ( 2 , 4 ) else
29854: LD_ADDR_VAR 0 3
29858: PUSH
29859: LD_INT 2
29861: PPUSH
29862: LD_INT 4
29864: PPUSH
29865: CALL_OW 12
29869: ST_TO_ADDR
29870: GO 29880
// s2 := 1 ;
29872: LD_ADDR_VAR 0 3
29876: PUSH
29877: LD_INT 1
29879: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29880: LD_ADDR_VAR 0 5
29884: PUSH
29885: LD_VAR 0 6
29889: PUSH
29890: LD_INT 1
29892: ARRAY
29893: PPUSH
29894: LD_VAR 0 3
29898: PPUSH
29899: CALL_OW 259
29903: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29904: LD_VAR 0 6
29908: PUSH
29909: LD_INT 1
29911: ARRAY
29912: PPUSH
29913: LD_VAR 0 2
29917: PPUSH
29918: LD_VAR 0 5
29922: PPUSH
29923: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29927: LD_VAR 0 6
29931: PUSH
29932: LD_INT 1
29934: ARRAY
29935: PPUSH
29936: LD_VAR 0 3
29940: PPUSH
29941: LD_VAR 0 4
29945: PPUSH
29946: CALL_OW 237
// end ;
29950: PPOPN 6
29952: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29953: LD_EXP 67
29957: PUSH
29958: LD_EXP 114
29962: AND
29963: IFFALSE 30042
29965: GO 29967
29967: DISABLE
29968: LD_INT 0
29970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29971: LD_ADDR_VAR 0 1
29975: PUSH
29976: LD_INT 22
29978: PUSH
29979: LD_OWVAR 2
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 30
29990: PUSH
29991: LD_INT 3
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PPUSH
30002: CALL_OW 69
30006: ST_TO_ADDR
// if not tmp then
30007: LD_VAR 0 1
30011: NOT
30012: IFFALSE 30016
// exit ;
30014: GO 30042
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30016: LD_VAR 0 1
30020: PUSH
30021: LD_INT 1
30023: PPUSH
30024: LD_VAR 0 1
30028: PPUSH
30029: CALL_OW 12
30033: ARRAY
30034: PPUSH
30035: LD_INT 1
30037: PPUSH
30038: CALL_OW 234
// end ;
30042: PPOPN 1
30044: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30045: LD_EXP 67
30049: PUSH
30050: LD_EXP 115
30054: AND
30055: IFFALSE 30167
30057: GO 30059
30059: DISABLE
30060: LD_INT 0
30062: PPUSH
30063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30064: LD_ADDR_VAR 0 2
30068: PUSH
30069: LD_INT 22
30071: PUSH
30072: LD_OWVAR 2
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 2
30083: PUSH
30084: LD_INT 30
30086: PUSH
30087: LD_INT 27
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 30
30096: PUSH
30097: LD_INT 26
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 30
30106: PUSH
30107: LD_INT 28
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PPUSH
30124: CALL_OW 69
30128: ST_TO_ADDR
// if not tmp then
30129: LD_VAR 0 2
30133: NOT
30134: IFFALSE 30138
// exit ;
30136: GO 30167
// for i in tmp do
30138: LD_ADDR_VAR 0 1
30142: PUSH
30143: LD_VAR 0 2
30147: PUSH
30148: FOR_IN
30149: IFFALSE 30165
// SetLives ( i , 1 ) ;
30151: LD_VAR 0 1
30155: PPUSH
30156: LD_INT 1
30158: PPUSH
30159: CALL_OW 234
30163: GO 30148
30165: POP
30166: POP
// end ;
30167: PPOPN 2
30169: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30170: LD_EXP 67
30174: PUSH
30175: LD_EXP 116
30179: AND
30180: IFFALSE 30467
30182: GO 30184
30184: DISABLE
30185: LD_INT 0
30187: PPUSH
30188: PPUSH
30189: PPUSH
// begin i := rand ( 1 , 7 ) ;
30190: LD_ADDR_VAR 0 1
30194: PUSH
30195: LD_INT 1
30197: PPUSH
30198: LD_INT 7
30200: PPUSH
30201: CALL_OW 12
30205: ST_TO_ADDR
// case i of 1 :
30206: LD_VAR 0 1
30210: PUSH
30211: LD_INT 1
30213: DOUBLE
30214: EQUAL
30215: IFTRUE 30219
30217: GO 30229
30219: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30220: LD_STRING earthquake(getX(game), 0, 32)
30222: PPUSH
30223: CALL_OW 559
30227: GO 30467
30229: LD_INT 2
30231: DOUBLE
30232: EQUAL
30233: IFTRUE 30237
30235: GO 30251
30237: POP
// begin ToLua ( displayStucuk(); ) ;
30238: LD_STRING displayStucuk();
30240: PPUSH
30241: CALL_OW 559
// ResetFog ;
30245: CALL_OW 335
// end ; 3 :
30249: GO 30467
30251: LD_INT 3
30253: DOUBLE
30254: EQUAL
30255: IFTRUE 30259
30257: GO 30363
30259: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30260: LD_ADDR_VAR 0 2
30264: PUSH
30265: LD_INT 22
30267: PUSH
30268: LD_OWVAR 2
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 25
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PPUSH
30291: CALL_OW 69
30295: ST_TO_ADDR
// if not tmp then
30296: LD_VAR 0 2
30300: NOT
30301: IFFALSE 30305
// exit ;
30303: GO 30467
// un := tmp [ rand ( 1 , tmp ) ] ;
30305: LD_ADDR_VAR 0 3
30309: PUSH
30310: LD_VAR 0 2
30314: PUSH
30315: LD_INT 1
30317: PPUSH
30318: LD_VAR 0 2
30322: PPUSH
30323: CALL_OW 12
30327: ARRAY
30328: ST_TO_ADDR
// if Crawls ( un ) then
30329: LD_VAR 0 3
30333: PPUSH
30334: CALL_OW 318
30338: IFFALSE 30349
// ComWalk ( un ) ;
30340: LD_VAR 0 3
30344: PPUSH
30345: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30349: LD_VAR 0 3
30353: PPUSH
30354: LD_INT 8
30356: PPUSH
30357: CALL_OW 336
// end ; 4 :
30361: GO 30467
30363: LD_INT 4
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30445
30371: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30372: LD_ADDR_VAR 0 2
30376: PUSH
30377: LD_INT 22
30379: PUSH
30380: LD_OWVAR 2
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 30
30391: PUSH
30392: LD_INT 29
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PPUSH
30403: CALL_OW 69
30407: ST_TO_ADDR
// if not tmp then
30408: LD_VAR 0 2
30412: NOT
30413: IFFALSE 30417
// exit ;
30415: GO 30467
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30417: LD_VAR 0 2
30421: PUSH
30422: LD_INT 1
30424: ARRAY
30425: PPUSH
30426: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30430: LD_VAR 0 2
30434: PUSH
30435: LD_INT 1
30437: ARRAY
30438: PPUSH
30439: CALL_OW 65
// end ; 5 .. 7 :
30443: GO 30467
30445: LD_INT 5
30447: DOUBLE
30448: GREATEREQUAL
30449: IFFALSE 30457
30451: LD_INT 7
30453: DOUBLE
30454: LESSEQUAL
30455: IFTRUE 30459
30457: GO 30466
30459: POP
// StreamSibBomb ; end ;
30460: CALL 26704 0 0
30464: GO 30467
30466: POP
// end ;
30467: PPOPN 3
30469: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30470: LD_EXP 67
30474: PUSH
30475: LD_EXP 117
30479: AND
30480: IFFALSE 30636
30482: GO 30484
30484: DISABLE
30485: LD_INT 0
30487: PPUSH
30488: PPUSH
30489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30490: LD_ADDR_VAR 0 2
30494: PUSH
30495: LD_INT 81
30497: PUSH
30498: LD_OWVAR 2
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 2
30509: PUSH
30510: LD_INT 21
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 21
30522: PUSH
30523: LD_INT 2
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PPUSH
30539: CALL_OW 69
30543: ST_TO_ADDR
// if not tmp then
30544: LD_VAR 0 2
30548: NOT
30549: IFFALSE 30553
// exit ;
30551: GO 30636
// p := 0 ;
30553: LD_ADDR_VAR 0 3
30557: PUSH
30558: LD_INT 0
30560: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30561: LD_INT 35
30563: PPUSH
30564: CALL_OW 67
// p := p + 1 ;
30568: LD_ADDR_VAR 0 3
30572: PUSH
30573: LD_VAR 0 3
30577: PUSH
30578: LD_INT 1
30580: PLUS
30581: ST_TO_ADDR
// for i in tmp do
30582: LD_ADDR_VAR 0 1
30586: PUSH
30587: LD_VAR 0 2
30591: PUSH
30592: FOR_IN
30593: IFFALSE 30624
// if GetLives ( i ) < 1000 then
30595: LD_VAR 0 1
30599: PPUSH
30600: CALL_OW 256
30604: PUSH
30605: LD_INT 1000
30607: LESS
30608: IFFALSE 30622
// SetLives ( i , 1000 ) ;
30610: LD_VAR 0 1
30614: PPUSH
30615: LD_INT 1000
30617: PPUSH
30618: CALL_OW 234
30622: GO 30592
30624: POP
30625: POP
// until p > 20 ;
30626: LD_VAR 0 3
30630: PUSH
30631: LD_INT 20
30633: GREATER
30634: IFFALSE 30561
// end ;
30636: PPOPN 3
30638: END
// every 0 0$1 trigger StreamModeActive and sTime do
30639: LD_EXP 67
30643: PUSH
30644: LD_EXP 118
30648: AND
30649: IFFALSE 30684
30651: GO 30653
30653: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30654: LD_INT 28
30656: PPUSH
30657: LD_OWVAR 2
30661: PPUSH
30662: LD_INT 2
30664: PPUSH
30665: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30669: LD_INT 30
30671: PPUSH
30672: LD_OWVAR 2
30676: PPUSH
30677: LD_INT 2
30679: PPUSH
30680: CALL_OW 322
// end ;
30684: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30685: LD_EXP 67
30689: PUSH
30690: LD_EXP 119
30694: AND
30695: IFFALSE 30816
30697: GO 30699
30699: DISABLE
30700: LD_INT 0
30702: PPUSH
30703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30704: LD_ADDR_VAR 0 2
30708: PUSH
30709: LD_INT 22
30711: PUSH
30712: LD_OWVAR 2
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 21
30723: PUSH
30724: LD_INT 1
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: LD_INT 23
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: PPUSH
30753: CALL_OW 69
30757: ST_TO_ADDR
// if not tmp then
30758: LD_VAR 0 2
30762: NOT
30763: IFFALSE 30767
// exit ;
30765: GO 30816
// for i in tmp do
30767: LD_ADDR_VAR 0 1
30771: PUSH
30772: LD_VAR 0 2
30776: PUSH
30777: FOR_IN
30778: IFFALSE 30814
// begin if Crawls ( i ) then
30780: LD_VAR 0 1
30784: PPUSH
30785: CALL_OW 318
30789: IFFALSE 30800
// ComWalk ( i ) ;
30791: LD_VAR 0 1
30795: PPUSH
30796: CALL_OW 138
// SetClass ( i , 2 ) ;
30800: LD_VAR 0 1
30804: PPUSH
30805: LD_INT 2
30807: PPUSH
30808: CALL_OW 336
// end ;
30812: GO 30777
30814: POP
30815: POP
// end ;
30816: PPOPN 2
30818: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30819: LD_EXP 67
30823: PUSH
30824: LD_EXP 120
30828: AND
30829: IFFALSE 31117
30831: GO 30833
30833: DISABLE
30834: LD_INT 0
30836: PPUSH
30837: PPUSH
30838: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30839: LD_OWVAR 2
30843: PPUSH
30844: LD_INT 9
30846: PPUSH
30847: LD_INT 1
30849: PPUSH
30850: LD_INT 1
30852: PPUSH
30853: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30857: LD_INT 9
30859: PPUSH
30860: LD_OWVAR 2
30864: PPUSH
30865: CALL_OW 343
// uc_side := 9 ;
30869: LD_ADDR_OWVAR 20
30873: PUSH
30874: LD_INT 9
30876: ST_TO_ADDR
// uc_nation := 2 ;
30877: LD_ADDR_OWVAR 21
30881: PUSH
30882: LD_INT 2
30884: ST_TO_ADDR
// hc_name := Dark Warrior ;
30885: LD_ADDR_OWVAR 26
30889: PUSH
30890: LD_STRING Dark Warrior
30892: ST_TO_ADDR
// hc_gallery :=  ;
30893: LD_ADDR_OWVAR 33
30897: PUSH
30898: LD_STRING 
30900: ST_TO_ADDR
// hc_noskilllimit := true ;
30901: LD_ADDR_OWVAR 76
30905: PUSH
30906: LD_INT 1
30908: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30909: LD_ADDR_OWVAR 31
30913: PUSH
30914: LD_INT 30
30916: PUSH
30917: LD_INT 30
30919: PUSH
30920: LD_INT 30
30922: PUSH
30923: LD_INT 30
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: ST_TO_ADDR
// un := CreateHuman ;
30932: LD_ADDR_VAR 0 3
30936: PUSH
30937: CALL_OW 44
30941: ST_TO_ADDR
// hc_noskilllimit := false ;
30942: LD_ADDR_OWVAR 76
30946: PUSH
30947: LD_INT 0
30949: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30950: LD_VAR 0 3
30954: PPUSH
30955: LD_INT 1
30957: PPUSH
30958: CALL_OW 51
// ToLua ( playRanger() ) ;
30962: LD_STRING playRanger()
30964: PPUSH
30965: CALL_OW 559
// p := 0 ;
30969: LD_ADDR_VAR 0 2
30973: PUSH
30974: LD_INT 0
30976: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30977: LD_INT 35
30979: PPUSH
30980: CALL_OW 67
// p := p + 1 ;
30984: LD_ADDR_VAR 0 2
30988: PUSH
30989: LD_VAR 0 2
30993: PUSH
30994: LD_INT 1
30996: PLUS
30997: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30998: LD_VAR 0 3
31002: PPUSH
31003: CALL_OW 256
31007: PUSH
31008: LD_INT 1000
31010: LESS
31011: IFFALSE 31025
// SetLives ( un , 1000 ) ;
31013: LD_VAR 0 3
31017: PPUSH
31018: LD_INT 1000
31020: PPUSH
31021: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31025: LD_VAR 0 3
31029: PPUSH
31030: LD_INT 81
31032: PUSH
31033: LD_OWVAR 2
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 91
31044: PUSH
31045: LD_VAR 0 3
31049: PUSH
31050: LD_INT 30
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: LIST
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PPUSH
31062: CALL_OW 69
31066: PPUSH
31067: LD_VAR 0 3
31071: PPUSH
31072: CALL_OW 74
31076: PPUSH
31077: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31081: LD_VAR 0 2
31085: PUSH
31086: LD_INT 80
31088: GREATER
31089: PUSH
31090: LD_VAR 0 3
31094: PPUSH
31095: CALL_OW 301
31099: OR
31100: IFFALSE 30977
// if un then
31102: LD_VAR 0 3
31106: IFFALSE 31117
// RemoveUnit ( un ) ;
31108: LD_VAR 0 3
31112: PPUSH
31113: CALL_OW 64
// end ;
31117: PPOPN 3
31119: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31120: LD_EXP 121
31124: IFFALSE 31240
31126: GO 31128
31128: DISABLE
31129: LD_INT 0
31131: PPUSH
31132: PPUSH
31133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31134: LD_ADDR_VAR 0 2
31138: PUSH
31139: LD_INT 81
31141: PUSH
31142: LD_OWVAR 2
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 21
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PPUSH
31165: CALL_OW 69
31169: ST_TO_ADDR
// if not tmp then
31170: LD_VAR 0 2
31174: NOT
31175: IFFALSE 31179
// exit ;
31177: GO 31240
// ToLua ( playComputer() ) ;
31179: LD_STRING playComputer()
31181: PPUSH
31182: CALL_OW 559
// for i in tmp do
31186: LD_ADDR_VAR 0 1
31190: PUSH
31191: LD_VAR 0 2
31195: PUSH
31196: FOR_IN
31197: IFFALSE 31238
// for j := 1 to 4 do
31199: LD_ADDR_VAR 0 3
31203: PUSH
31204: DOUBLE
31205: LD_INT 1
31207: DEC
31208: ST_TO_ADDR
31209: LD_INT 4
31211: PUSH
31212: FOR_TO
31213: IFFALSE 31234
// SetSkill ( i , j , 10 ) ;
31215: LD_VAR 0 1
31219: PPUSH
31220: LD_VAR 0 3
31224: PPUSH
31225: LD_INT 10
31227: PPUSH
31228: CALL_OW 237
31232: GO 31212
31234: POP
31235: POP
31236: GO 31196
31238: POP
31239: POP
// end ;
31240: PPOPN 3
31242: END
// every 0 0$1 trigger s30 do var i , tmp ;
31243: LD_EXP 122
31247: IFFALSE 31316
31249: GO 31251
31251: DISABLE
31252: LD_INT 0
31254: PPUSH
31255: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31256: LD_ADDR_VAR 0 2
31260: PUSH
31261: LD_INT 22
31263: PUSH
31264: LD_OWVAR 2
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PPUSH
31273: CALL_OW 69
31277: ST_TO_ADDR
// if not tmp then
31278: LD_VAR 0 2
31282: NOT
31283: IFFALSE 31287
// exit ;
31285: GO 31316
// for i in tmp do
31287: LD_ADDR_VAR 0 1
31291: PUSH
31292: LD_VAR 0 2
31296: PUSH
31297: FOR_IN
31298: IFFALSE 31314
// SetLives ( i , 300 ) ;
31300: LD_VAR 0 1
31304: PPUSH
31305: LD_INT 300
31307: PPUSH
31308: CALL_OW 234
31312: GO 31297
31314: POP
31315: POP
// end ;
31316: PPOPN 2
31318: END
// every 0 0$1 trigger s60 do var i , tmp ;
31319: LD_EXP 123
31323: IFFALSE 31392
31325: GO 31327
31327: DISABLE
31328: LD_INT 0
31330: PPUSH
31331: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31332: LD_ADDR_VAR 0 2
31336: PUSH
31337: LD_INT 22
31339: PUSH
31340: LD_OWVAR 2
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PPUSH
31349: CALL_OW 69
31353: ST_TO_ADDR
// if not tmp then
31354: LD_VAR 0 2
31358: NOT
31359: IFFALSE 31363
// exit ;
31361: GO 31392
// for i in tmp do
31363: LD_ADDR_VAR 0 1
31367: PUSH
31368: LD_VAR 0 2
31372: PUSH
31373: FOR_IN
31374: IFFALSE 31390
// SetLives ( i , 600 ) ;
31376: LD_VAR 0 1
31380: PPUSH
31381: LD_INT 600
31383: PPUSH
31384: CALL_OW 234
31388: GO 31373
31390: POP
31391: POP
// end ;
31392: PPOPN 2
31394: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31395: LD_INT 0
31397: PPUSH
// case cmd of 301 :
31398: LD_VAR 0 1
31402: PUSH
31403: LD_INT 301
31405: DOUBLE
31406: EQUAL
31407: IFTRUE 31411
31409: GO 31443
31411: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31412: LD_VAR 0 6
31416: PPUSH
31417: LD_VAR 0 7
31421: PPUSH
31422: LD_VAR 0 8
31426: PPUSH
31427: LD_VAR 0 4
31431: PPUSH
31432: LD_VAR 0 5
31436: PPUSH
31437: CALL 32644 0 5
31441: GO 31564
31443: LD_INT 302
31445: DOUBLE
31446: EQUAL
31447: IFTRUE 31451
31449: GO 31488
31451: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31452: LD_VAR 0 6
31456: PPUSH
31457: LD_VAR 0 7
31461: PPUSH
31462: LD_VAR 0 8
31466: PPUSH
31467: LD_VAR 0 9
31471: PPUSH
31472: LD_VAR 0 4
31476: PPUSH
31477: LD_VAR 0 5
31481: PPUSH
31482: CALL 32735 0 6
31486: GO 31564
31488: LD_INT 303
31490: DOUBLE
31491: EQUAL
31492: IFTRUE 31496
31494: GO 31533
31496: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31497: LD_VAR 0 6
31501: PPUSH
31502: LD_VAR 0 7
31506: PPUSH
31507: LD_VAR 0 8
31511: PPUSH
31512: LD_VAR 0 9
31516: PPUSH
31517: LD_VAR 0 4
31521: PPUSH
31522: LD_VAR 0 5
31526: PPUSH
31527: CALL 31569 0 6
31531: GO 31564
31533: LD_INT 304
31535: DOUBLE
31536: EQUAL
31537: IFTRUE 31541
31539: GO 31563
31541: POP
// hHackTeleport ( unit , x , y ) ; end ;
31542: LD_VAR 0 2
31546: PPUSH
31547: LD_VAR 0 4
31551: PPUSH
31552: LD_VAR 0 5
31556: PPUSH
31557: CALL 33328 0 3
31561: GO 31564
31563: POP
// end ;
31564: LD_VAR 0 12
31568: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31569: LD_INT 0
31571: PPUSH
31572: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31573: LD_VAR 0 1
31577: PUSH
31578: LD_INT 1
31580: LESS
31581: PUSH
31582: LD_VAR 0 1
31586: PUSH
31587: LD_INT 3
31589: GREATER
31590: OR
31591: PUSH
31592: LD_VAR 0 5
31596: PPUSH
31597: LD_VAR 0 6
31601: PPUSH
31602: CALL_OW 428
31606: OR
31607: IFFALSE 31611
// exit ;
31609: GO 32331
// uc_side := your_side ;
31611: LD_ADDR_OWVAR 20
31615: PUSH
31616: LD_OWVAR 2
31620: ST_TO_ADDR
// uc_nation := nation ;
31621: LD_ADDR_OWVAR 21
31625: PUSH
31626: LD_VAR 0 1
31630: ST_TO_ADDR
// bc_level = 1 ;
31631: LD_ADDR_OWVAR 43
31635: PUSH
31636: LD_INT 1
31638: ST_TO_ADDR
// case btype of 1 :
31639: LD_VAR 0 2
31643: PUSH
31644: LD_INT 1
31646: DOUBLE
31647: EQUAL
31648: IFTRUE 31652
31650: GO 31663
31652: POP
// bc_type := b_depot ; 2 :
31653: LD_ADDR_OWVAR 42
31657: PUSH
31658: LD_INT 0
31660: ST_TO_ADDR
31661: GO 32275
31663: LD_INT 2
31665: DOUBLE
31666: EQUAL
31667: IFTRUE 31671
31669: GO 31682
31671: POP
// bc_type := b_warehouse ; 3 :
31672: LD_ADDR_OWVAR 42
31676: PUSH
31677: LD_INT 1
31679: ST_TO_ADDR
31680: GO 32275
31682: LD_INT 3
31684: DOUBLE
31685: EQUAL
31686: IFTRUE 31690
31688: GO 31701
31690: POP
// bc_type := b_lab ; 4 .. 9 :
31691: LD_ADDR_OWVAR 42
31695: PUSH
31696: LD_INT 6
31698: ST_TO_ADDR
31699: GO 32275
31701: LD_INT 4
31703: DOUBLE
31704: GREATEREQUAL
31705: IFFALSE 31713
31707: LD_INT 9
31709: DOUBLE
31710: LESSEQUAL
31711: IFTRUE 31715
31713: GO 31767
31715: POP
// begin bc_type := b_lab_half ;
31716: LD_ADDR_OWVAR 42
31720: PUSH
31721: LD_INT 7
31723: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31724: LD_ADDR_OWVAR 44
31728: PUSH
31729: LD_INT 10
31731: PUSH
31732: LD_INT 11
31734: PUSH
31735: LD_INT 12
31737: PUSH
31738: LD_INT 15
31740: PUSH
31741: LD_INT 14
31743: PUSH
31744: LD_INT 13
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: PUSH
31755: LD_VAR 0 2
31759: PUSH
31760: LD_INT 3
31762: MINUS
31763: ARRAY
31764: ST_TO_ADDR
// end ; 10 .. 13 :
31765: GO 32275
31767: LD_INT 10
31769: DOUBLE
31770: GREATEREQUAL
31771: IFFALSE 31779
31773: LD_INT 13
31775: DOUBLE
31776: LESSEQUAL
31777: IFTRUE 31781
31779: GO 31858
31781: POP
// begin bc_type := b_lab_full ;
31782: LD_ADDR_OWVAR 42
31786: PUSH
31787: LD_INT 8
31789: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31790: LD_ADDR_OWVAR 44
31794: PUSH
31795: LD_INT 10
31797: PUSH
31798: LD_INT 12
31800: PUSH
31801: LD_INT 14
31803: PUSH
31804: LD_INT 13
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: PUSH
31813: LD_VAR 0 2
31817: PUSH
31818: LD_INT 9
31820: MINUS
31821: ARRAY
31822: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31823: LD_ADDR_OWVAR 45
31827: PUSH
31828: LD_INT 11
31830: PUSH
31831: LD_INT 15
31833: PUSH
31834: LD_INT 12
31836: PUSH
31837: LD_INT 15
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: PUSH
31846: LD_VAR 0 2
31850: PUSH
31851: LD_INT 9
31853: MINUS
31854: ARRAY
31855: ST_TO_ADDR
// end ; 14 :
31856: GO 32275
31858: LD_INT 14
31860: DOUBLE
31861: EQUAL
31862: IFTRUE 31866
31864: GO 31877
31866: POP
// bc_type := b_workshop ; 15 :
31867: LD_ADDR_OWVAR 42
31871: PUSH
31872: LD_INT 2
31874: ST_TO_ADDR
31875: GO 32275
31877: LD_INT 15
31879: DOUBLE
31880: EQUAL
31881: IFTRUE 31885
31883: GO 31896
31885: POP
// bc_type := b_factory ; 16 :
31886: LD_ADDR_OWVAR 42
31890: PUSH
31891: LD_INT 3
31893: ST_TO_ADDR
31894: GO 32275
31896: LD_INT 16
31898: DOUBLE
31899: EQUAL
31900: IFTRUE 31904
31902: GO 31915
31904: POP
// bc_type := b_ext_gun ; 17 :
31905: LD_ADDR_OWVAR 42
31909: PUSH
31910: LD_INT 17
31912: ST_TO_ADDR
31913: GO 32275
31915: LD_INT 17
31917: DOUBLE
31918: EQUAL
31919: IFTRUE 31923
31921: GO 31951
31923: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31924: LD_ADDR_OWVAR 42
31928: PUSH
31929: LD_INT 19
31931: PUSH
31932: LD_INT 23
31934: PUSH
31935: LD_INT 19
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: LIST
31942: PUSH
31943: LD_VAR 0 1
31947: ARRAY
31948: ST_TO_ADDR
31949: GO 32275
31951: LD_INT 18
31953: DOUBLE
31954: EQUAL
31955: IFTRUE 31959
31957: GO 31970
31959: POP
// bc_type := b_ext_radar ; 19 :
31960: LD_ADDR_OWVAR 42
31964: PUSH
31965: LD_INT 20
31967: ST_TO_ADDR
31968: GO 32275
31970: LD_INT 19
31972: DOUBLE
31973: EQUAL
31974: IFTRUE 31978
31976: GO 31989
31978: POP
// bc_type := b_ext_radio ; 20 :
31979: LD_ADDR_OWVAR 42
31983: PUSH
31984: LD_INT 22
31986: ST_TO_ADDR
31987: GO 32275
31989: LD_INT 20
31991: DOUBLE
31992: EQUAL
31993: IFTRUE 31997
31995: GO 32008
31997: POP
// bc_type := b_ext_siberium ; 21 :
31998: LD_ADDR_OWVAR 42
32002: PUSH
32003: LD_INT 21
32005: ST_TO_ADDR
32006: GO 32275
32008: LD_INT 21
32010: DOUBLE
32011: EQUAL
32012: IFTRUE 32016
32014: GO 32027
32016: POP
// bc_type := b_ext_computer ; 22 :
32017: LD_ADDR_OWVAR 42
32021: PUSH
32022: LD_INT 24
32024: ST_TO_ADDR
32025: GO 32275
32027: LD_INT 22
32029: DOUBLE
32030: EQUAL
32031: IFTRUE 32035
32033: GO 32046
32035: POP
// bc_type := b_ext_track ; 23 :
32036: LD_ADDR_OWVAR 42
32040: PUSH
32041: LD_INT 16
32043: ST_TO_ADDR
32044: GO 32275
32046: LD_INT 23
32048: DOUBLE
32049: EQUAL
32050: IFTRUE 32054
32052: GO 32065
32054: POP
// bc_type := b_ext_laser ; 24 :
32055: LD_ADDR_OWVAR 42
32059: PUSH
32060: LD_INT 25
32062: ST_TO_ADDR
32063: GO 32275
32065: LD_INT 24
32067: DOUBLE
32068: EQUAL
32069: IFTRUE 32073
32071: GO 32084
32073: POP
// bc_type := b_control_tower ; 25 :
32074: LD_ADDR_OWVAR 42
32078: PUSH
32079: LD_INT 36
32081: ST_TO_ADDR
32082: GO 32275
32084: LD_INT 25
32086: DOUBLE
32087: EQUAL
32088: IFTRUE 32092
32090: GO 32103
32092: POP
// bc_type := b_breastwork ; 26 :
32093: LD_ADDR_OWVAR 42
32097: PUSH
32098: LD_INT 31
32100: ST_TO_ADDR
32101: GO 32275
32103: LD_INT 26
32105: DOUBLE
32106: EQUAL
32107: IFTRUE 32111
32109: GO 32122
32111: POP
// bc_type := b_bunker ; 27 :
32112: LD_ADDR_OWVAR 42
32116: PUSH
32117: LD_INT 32
32119: ST_TO_ADDR
32120: GO 32275
32122: LD_INT 27
32124: DOUBLE
32125: EQUAL
32126: IFTRUE 32130
32128: GO 32141
32130: POP
// bc_type := b_turret ; 28 :
32131: LD_ADDR_OWVAR 42
32135: PUSH
32136: LD_INT 33
32138: ST_TO_ADDR
32139: GO 32275
32141: LD_INT 28
32143: DOUBLE
32144: EQUAL
32145: IFTRUE 32149
32147: GO 32160
32149: POP
// bc_type := b_armoury ; 29 :
32150: LD_ADDR_OWVAR 42
32154: PUSH
32155: LD_INT 4
32157: ST_TO_ADDR
32158: GO 32275
32160: LD_INT 29
32162: DOUBLE
32163: EQUAL
32164: IFTRUE 32168
32166: GO 32179
32168: POP
// bc_type := b_barracks ; 30 :
32169: LD_ADDR_OWVAR 42
32173: PUSH
32174: LD_INT 5
32176: ST_TO_ADDR
32177: GO 32275
32179: LD_INT 30
32181: DOUBLE
32182: EQUAL
32183: IFTRUE 32187
32185: GO 32198
32187: POP
// bc_type := b_solar_power ; 31 :
32188: LD_ADDR_OWVAR 42
32192: PUSH
32193: LD_INT 27
32195: ST_TO_ADDR
32196: GO 32275
32198: LD_INT 31
32200: DOUBLE
32201: EQUAL
32202: IFTRUE 32206
32204: GO 32217
32206: POP
// bc_type := b_oil_power ; 32 :
32207: LD_ADDR_OWVAR 42
32211: PUSH
32212: LD_INT 26
32214: ST_TO_ADDR
32215: GO 32275
32217: LD_INT 32
32219: DOUBLE
32220: EQUAL
32221: IFTRUE 32225
32223: GO 32236
32225: POP
// bc_type := b_siberite_power ; 33 :
32226: LD_ADDR_OWVAR 42
32230: PUSH
32231: LD_INT 28
32233: ST_TO_ADDR
32234: GO 32275
32236: LD_INT 33
32238: DOUBLE
32239: EQUAL
32240: IFTRUE 32244
32242: GO 32255
32244: POP
// bc_type := b_oil_mine ; 34 :
32245: LD_ADDR_OWVAR 42
32249: PUSH
32250: LD_INT 29
32252: ST_TO_ADDR
32253: GO 32275
32255: LD_INT 34
32257: DOUBLE
32258: EQUAL
32259: IFTRUE 32263
32261: GO 32274
32263: POP
// bc_type := b_siberite_mine ; end ;
32264: LD_ADDR_OWVAR 42
32268: PUSH
32269: LD_INT 30
32271: ST_TO_ADDR
32272: GO 32275
32274: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32275: LD_ADDR_VAR 0 8
32279: PUSH
32280: LD_VAR 0 5
32284: PPUSH
32285: LD_VAR 0 6
32289: PPUSH
32290: LD_VAR 0 3
32294: PPUSH
32295: CALL_OW 47
32299: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32300: LD_OWVAR 42
32304: PUSH
32305: LD_INT 32
32307: PUSH
32308: LD_INT 33
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: IN
32315: IFFALSE 32331
// PlaceWeaponTurret ( b , weapon ) ;
32317: LD_VAR 0 8
32321: PPUSH
32322: LD_VAR 0 4
32326: PPUSH
32327: CALL_OW 431
// end ;
32331: LD_VAR 0 7
32335: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32336: LD_INT 0
32338: PPUSH
32339: PPUSH
32340: PPUSH
32341: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32342: LD_ADDR_VAR 0 4
32346: PUSH
32347: LD_INT 22
32349: PUSH
32350: LD_OWVAR 2
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 2
32361: PUSH
32362: LD_INT 30
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 30
32374: PUSH
32375: LD_INT 1
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PPUSH
32391: CALL_OW 69
32395: ST_TO_ADDR
// if not tmp then
32396: LD_VAR 0 4
32400: NOT
32401: IFFALSE 32405
// exit ;
32403: GO 32464
// for i in tmp do
32405: LD_ADDR_VAR 0 2
32409: PUSH
32410: LD_VAR 0 4
32414: PUSH
32415: FOR_IN
32416: IFFALSE 32462
// for j = 1 to 3 do
32418: LD_ADDR_VAR 0 3
32422: PUSH
32423: DOUBLE
32424: LD_INT 1
32426: DEC
32427: ST_TO_ADDR
32428: LD_INT 3
32430: PUSH
32431: FOR_TO
32432: IFFALSE 32458
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32434: LD_VAR 0 2
32438: PPUSH
32439: CALL_OW 274
32443: PPUSH
32444: LD_VAR 0 3
32448: PPUSH
32449: LD_INT 99999
32451: PPUSH
32452: CALL_OW 277
32456: GO 32431
32458: POP
32459: POP
32460: GO 32415
32462: POP
32463: POP
// end ;
32464: LD_VAR 0 1
32468: RET
// export function hHackSetLevel10 ; var i , j ; begin
32469: LD_INT 0
32471: PPUSH
32472: PPUSH
32473: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32474: LD_ADDR_VAR 0 2
32478: PUSH
32479: LD_INT 21
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PPUSH
32489: CALL_OW 69
32493: PUSH
32494: FOR_IN
32495: IFFALSE 32547
// if IsSelected ( i ) then
32497: LD_VAR 0 2
32501: PPUSH
32502: CALL_OW 306
32506: IFFALSE 32545
// begin for j := 1 to 4 do
32508: LD_ADDR_VAR 0 3
32512: PUSH
32513: DOUBLE
32514: LD_INT 1
32516: DEC
32517: ST_TO_ADDR
32518: LD_INT 4
32520: PUSH
32521: FOR_TO
32522: IFFALSE 32543
// SetSkill ( i , j , 10 ) ;
32524: LD_VAR 0 2
32528: PPUSH
32529: LD_VAR 0 3
32533: PPUSH
32534: LD_INT 10
32536: PPUSH
32537: CALL_OW 237
32541: GO 32521
32543: POP
32544: POP
// end ;
32545: GO 32494
32547: POP
32548: POP
// end ;
32549: LD_VAR 0 1
32553: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32554: LD_INT 0
32556: PPUSH
32557: PPUSH
32558: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32559: LD_ADDR_VAR 0 2
32563: PUSH
32564: LD_INT 22
32566: PUSH
32567: LD_OWVAR 2
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 21
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PPUSH
32590: CALL_OW 69
32594: PUSH
32595: FOR_IN
32596: IFFALSE 32637
// begin for j := 1 to 4 do
32598: LD_ADDR_VAR 0 3
32602: PUSH
32603: DOUBLE
32604: LD_INT 1
32606: DEC
32607: ST_TO_ADDR
32608: LD_INT 4
32610: PUSH
32611: FOR_TO
32612: IFFALSE 32633
// SetSkill ( i , j , 10 ) ;
32614: LD_VAR 0 2
32618: PPUSH
32619: LD_VAR 0 3
32623: PPUSH
32624: LD_INT 10
32626: PPUSH
32627: CALL_OW 237
32631: GO 32611
32633: POP
32634: POP
// end ;
32635: GO 32595
32637: POP
32638: POP
// end ;
32639: LD_VAR 0 1
32643: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32644: LD_INT 0
32646: PPUSH
// uc_side := your_side ;
32647: LD_ADDR_OWVAR 20
32651: PUSH
32652: LD_OWVAR 2
32656: ST_TO_ADDR
// uc_nation := nation ;
32657: LD_ADDR_OWVAR 21
32661: PUSH
32662: LD_VAR 0 1
32666: ST_TO_ADDR
// InitHc ;
32667: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32671: LD_INT 0
32673: PPUSH
32674: LD_VAR 0 2
32678: PPUSH
32679: LD_VAR 0 3
32683: PPUSH
32684: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32688: LD_VAR 0 4
32692: PPUSH
32693: LD_VAR 0 5
32697: PPUSH
32698: CALL_OW 428
32702: PUSH
32703: LD_INT 0
32705: EQUAL
32706: IFFALSE 32730
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32708: CALL_OW 44
32712: PPUSH
32713: LD_VAR 0 4
32717: PPUSH
32718: LD_VAR 0 5
32722: PPUSH
32723: LD_INT 1
32725: PPUSH
32726: CALL_OW 48
// end ;
32730: LD_VAR 0 6
32734: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32735: LD_INT 0
32737: PPUSH
32738: PPUSH
// uc_side := your_side ;
32739: LD_ADDR_OWVAR 20
32743: PUSH
32744: LD_OWVAR 2
32748: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32749: LD_VAR 0 1
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: LD_INT 4
32765: PUSH
32766: LD_INT 5
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: IN
32776: IFFALSE 32788
// uc_nation := nation_american else
32778: LD_ADDR_OWVAR 21
32782: PUSH
32783: LD_INT 1
32785: ST_TO_ADDR
32786: GO 32831
// if chassis in [ 11 , 12 , 13 , 14 ] then
32788: LD_VAR 0 1
32792: PUSH
32793: LD_INT 11
32795: PUSH
32796: LD_INT 12
32798: PUSH
32799: LD_INT 13
32801: PUSH
32802: LD_INT 14
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: IN
32811: IFFALSE 32823
// uc_nation := nation_arabian else
32813: LD_ADDR_OWVAR 21
32817: PUSH
32818: LD_INT 2
32820: ST_TO_ADDR
32821: GO 32831
// uc_nation := nation_russian ;
32823: LD_ADDR_OWVAR 21
32827: PUSH
32828: LD_INT 3
32830: ST_TO_ADDR
// vc_chassis := chassis ;
32831: LD_ADDR_OWVAR 37
32835: PUSH
32836: LD_VAR 0 1
32840: ST_TO_ADDR
// vc_engine := engine ;
32841: LD_ADDR_OWVAR 39
32845: PUSH
32846: LD_VAR 0 2
32850: ST_TO_ADDR
// vc_control := control ;
32851: LD_ADDR_OWVAR 38
32855: PUSH
32856: LD_VAR 0 3
32860: ST_TO_ADDR
// vc_weapon := weapon ;
32861: LD_ADDR_OWVAR 40
32865: PUSH
32866: LD_VAR 0 4
32870: ST_TO_ADDR
// un := CreateVehicle ;
32871: LD_ADDR_VAR 0 8
32875: PUSH
32876: CALL_OW 45
32880: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32881: LD_VAR 0 8
32885: PPUSH
32886: LD_INT 0
32888: PPUSH
32889: LD_INT 5
32891: PPUSH
32892: CALL_OW 12
32896: PPUSH
32897: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32901: LD_VAR 0 8
32905: PPUSH
32906: LD_VAR 0 5
32910: PPUSH
32911: LD_VAR 0 6
32915: PPUSH
32916: LD_INT 1
32918: PPUSH
32919: CALL_OW 48
// end ;
32923: LD_VAR 0 7
32927: RET
// export hInvincible ; every 1 do
32928: GO 32930
32930: DISABLE
// hInvincible := [ ] ;
32931: LD_ADDR_EXP 124
32935: PUSH
32936: EMPTY
32937: ST_TO_ADDR
32938: END
// every 10 do var i ;
32939: GO 32941
32941: DISABLE
32942: LD_INT 0
32944: PPUSH
// begin enable ;
32945: ENABLE
// if not hInvincible then
32946: LD_EXP 124
32950: NOT
32951: IFFALSE 32955
// exit ;
32953: GO 32999
// for i in hInvincible do
32955: LD_ADDR_VAR 0 1
32959: PUSH
32960: LD_EXP 124
32964: PUSH
32965: FOR_IN
32966: IFFALSE 32997
// if GetLives ( i ) < 1000 then
32968: LD_VAR 0 1
32972: PPUSH
32973: CALL_OW 256
32977: PUSH
32978: LD_INT 1000
32980: LESS
32981: IFFALSE 32995
// SetLives ( i , 1000 ) ;
32983: LD_VAR 0 1
32987: PPUSH
32988: LD_INT 1000
32990: PPUSH
32991: CALL_OW 234
32995: GO 32965
32997: POP
32998: POP
// end ;
32999: PPOPN 1
33001: END
// export function hHackInvincible ; var i ; begin
33002: LD_INT 0
33004: PPUSH
33005: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33006: LD_ADDR_VAR 0 2
33010: PUSH
33011: LD_INT 2
33013: PUSH
33014: LD_INT 21
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 21
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: PPUSH
33039: CALL_OW 69
33043: PUSH
33044: FOR_IN
33045: IFFALSE 33106
// if IsSelected ( i ) then
33047: LD_VAR 0 2
33051: PPUSH
33052: CALL_OW 306
33056: IFFALSE 33104
// begin if i in hInvincible then
33058: LD_VAR 0 2
33062: PUSH
33063: LD_EXP 124
33067: IN
33068: IFFALSE 33088
// hInvincible := hInvincible diff i else
33070: LD_ADDR_EXP 124
33074: PUSH
33075: LD_EXP 124
33079: PUSH
33080: LD_VAR 0 2
33084: DIFF
33085: ST_TO_ADDR
33086: GO 33104
// hInvincible := hInvincible union i ;
33088: LD_ADDR_EXP 124
33092: PUSH
33093: LD_EXP 124
33097: PUSH
33098: LD_VAR 0 2
33102: UNION
33103: ST_TO_ADDR
// end ;
33104: GO 33044
33106: POP
33107: POP
// end ;
33108: LD_VAR 0 1
33112: RET
// export function hHackInvisible ; var i , j ; begin
33113: LD_INT 0
33115: PPUSH
33116: PPUSH
33117: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33118: LD_ADDR_VAR 0 2
33122: PUSH
33123: LD_INT 21
33125: PUSH
33126: LD_INT 1
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PPUSH
33133: CALL_OW 69
33137: PUSH
33138: FOR_IN
33139: IFFALSE 33163
// if IsSelected ( i ) then
33141: LD_VAR 0 2
33145: PPUSH
33146: CALL_OW 306
33150: IFFALSE 33161
// ComForceInvisible ( i ) ;
33152: LD_VAR 0 2
33156: PPUSH
33157: CALL_OW 496
33161: GO 33138
33163: POP
33164: POP
// end ;
33165: LD_VAR 0 1
33169: RET
// export function hHackChangeYourSide ; begin
33170: LD_INT 0
33172: PPUSH
// if your_side = 8 then
33173: LD_OWVAR 2
33177: PUSH
33178: LD_INT 8
33180: EQUAL
33181: IFFALSE 33193
// your_side := 0 else
33183: LD_ADDR_OWVAR 2
33187: PUSH
33188: LD_INT 0
33190: ST_TO_ADDR
33191: GO 33207
// your_side := your_side + 1 ;
33193: LD_ADDR_OWVAR 2
33197: PUSH
33198: LD_OWVAR 2
33202: PUSH
33203: LD_INT 1
33205: PLUS
33206: ST_TO_ADDR
// end ;
33207: LD_VAR 0 1
33211: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33212: LD_INT 0
33214: PPUSH
33215: PPUSH
33216: PPUSH
// for i in all_units do
33217: LD_ADDR_VAR 0 2
33221: PUSH
33222: LD_OWVAR 3
33226: PUSH
33227: FOR_IN
33228: IFFALSE 33306
// if IsSelected ( i ) then
33230: LD_VAR 0 2
33234: PPUSH
33235: CALL_OW 306
33239: IFFALSE 33304
// begin j := GetSide ( i ) ;
33241: LD_ADDR_VAR 0 3
33245: PUSH
33246: LD_VAR 0 2
33250: PPUSH
33251: CALL_OW 255
33255: ST_TO_ADDR
// if j = 8 then
33256: LD_VAR 0 3
33260: PUSH
33261: LD_INT 8
33263: EQUAL
33264: IFFALSE 33276
// j := 0 else
33266: LD_ADDR_VAR 0 3
33270: PUSH
33271: LD_INT 0
33273: ST_TO_ADDR
33274: GO 33290
// j := j + 1 ;
33276: LD_ADDR_VAR 0 3
33280: PUSH
33281: LD_VAR 0 3
33285: PUSH
33286: LD_INT 1
33288: PLUS
33289: ST_TO_ADDR
// SetSide ( i , j ) ;
33290: LD_VAR 0 2
33294: PPUSH
33295: LD_VAR 0 3
33299: PPUSH
33300: CALL_OW 235
// end ;
33304: GO 33227
33306: POP
33307: POP
// end ;
33308: LD_VAR 0 1
33312: RET
// export function hHackFog ; begin
33313: LD_INT 0
33315: PPUSH
// FogOff ( true ) ;
33316: LD_INT 1
33318: PPUSH
33319: CALL_OW 344
// end ;
33323: LD_VAR 0 1
33327: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33328: LD_INT 0
33330: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33331: LD_VAR 0 1
33335: PPUSH
33336: LD_VAR 0 2
33340: PPUSH
33341: LD_VAR 0 3
33345: PPUSH
33346: LD_INT 1
33348: PPUSH
33349: LD_INT 1
33351: PPUSH
33352: CALL_OW 483
// CenterOnXY ( x , y ) ;
33356: LD_VAR 0 2
33360: PPUSH
33361: LD_VAR 0 3
33365: PPUSH
33366: CALL_OW 84
// end ; end_of_file
33370: LD_VAR 0 4
33374: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33375: LD_INT 0
33377: PPUSH
33378: PPUSH
33379: PPUSH
33380: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33381: LD_VAR 0 1
33385: PPUSH
33386: CALL_OW 264
33390: PUSH
33391: LD_EXP 52
33395: EQUAL
33396: IFFALSE 33468
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33398: LD_INT 68
33400: PPUSH
33401: LD_VAR 0 1
33405: PPUSH
33406: CALL_OW 255
33410: PPUSH
33411: CALL_OW 321
33415: PUSH
33416: LD_INT 2
33418: EQUAL
33419: IFFALSE 33431
// eff := 70 else
33421: LD_ADDR_VAR 0 4
33425: PUSH
33426: LD_INT 70
33428: ST_TO_ADDR
33429: GO 33439
// eff := 30 ;
33431: LD_ADDR_VAR 0 4
33435: PUSH
33436: LD_INT 30
33438: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33439: LD_VAR 0 1
33443: PPUSH
33444: CALL_OW 250
33448: PPUSH
33449: LD_VAR 0 1
33453: PPUSH
33454: CALL_OW 251
33458: PPUSH
33459: LD_VAR 0 4
33463: PPUSH
33464: CALL_OW 495
// end ; end ;
33468: LD_VAR 0 2
33472: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33473: LD_INT 0
33475: PPUSH
// end ;
33476: LD_VAR 0 4
33480: RET
// export function SOS_Command ( cmd ) ; begin
33481: LD_INT 0
33483: PPUSH
// end ;
33484: LD_VAR 0 2
33488: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33489: LD_INT 0
33491: PPUSH
// end ;
33492: LD_VAR 0 6
33496: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33497: LD_INT 0
33499: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33500: LD_VAR 0 1
33504: PUSH
33505: LD_INT 250
33507: EQUAL
33508: PUSH
33509: LD_VAR 0 2
33513: PPUSH
33514: CALL_OW 264
33518: PUSH
33519: LD_EXP 55
33523: EQUAL
33524: AND
33525: IFFALSE 33546
// MinerPlaceMine ( unit , x , y ) ;
33527: LD_VAR 0 2
33531: PPUSH
33532: LD_VAR 0 4
33536: PPUSH
33537: LD_VAR 0 5
33541: PPUSH
33542: CALL 35895 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33546: LD_VAR 0 1
33550: PUSH
33551: LD_INT 251
33553: EQUAL
33554: PUSH
33555: LD_VAR 0 2
33559: PPUSH
33560: CALL_OW 264
33564: PUSH
33565: LD_EXP 55
33569: EQUAL
33570: AND
33571: IFFALSE 33592
// MinerDetonateMine ( unit , x , y ) ;
33573: LD_VAR 0 2
33577: PPUSH
33578: LD_VAR 0 4
33582: PPUSH
33583: LD_VAR 0 5
33587: PPUSH
33588: CALL 36172 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33592: LD_VAR 0 1
33596: PUSH
33597: LD_INT 252
33599: EQUAL
33600: PUSH
33601: LD_VAR 0 2
33605: PPUSH
33606: CALL_OW 264
33610: PUSH
33611: LD_EXP 55
33615: EQUAL
33616: AND
33617: IFFALSE 33638
// MinerCreateMinefield ( unit , x , y ) ;
33619: LD_VAR 0 2
33623: PPUSH
33624: LD_VAR 0 4
33628: PPUSH
33629: LD_VAR 0 5
33633: PPUSH
33634: CALL 36589 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33638: LD_VAR 0 1
33642: PUSH
33643: LD_INT 253
33645: EQUAL
33646: PUSH
33647: LD_VAR 0 2
33651: PPUSH
33652: CALL_OW 257
33656: PUSH
33657: LD_INT 5
33659: EQUAL
33660: AND
33661: IFFALSE 33682
// ComBinocular ( unit , x , y ) ;
33663: LD_VAR 0 2
33667: PPUSH
33668: LD_VAR 0 4
33672: PPUSH
33673: LD_VAR 0 5
33677: PPUSH
33678: CALL 36960 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33682: LD_VAR 0 1
33686: PUSH
33687: LD_INT 254
33689: EQUAL
33690: PUSH
33691: LD_VAR 0 2
33695: PPUSH
33696: CALL_OW 264
33700: PUSH
33701: LD_EXP 50
33705: EQUAL
33706: AND
33707: PUSH
33708: LD_VAR 0 3
33712: PPUSH
33713: CALL_OW 263
33717: PUSH
33718: LD_INT 3
33720: EQUAL
33721: AND
33722: IFFALSE 33738
// HackDestroyVehicle ( unit , selectedUnit ) ;
33724: LD_VAR 0 2
33728: PPUSH
33729: LD_VAR 0 3
33733: PPUSH
33734: CALL 35255 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33738: LD_VAR 0 1
33742: PUSH
33743: LD_INT 255
33745: EQUAL
33746: PUSH
33747: LD_VAR 0 2
33751: PPUSH
33752: CALL_OW 264
33756: PUSH
33757: LD_INT 14
33759: PUSH
33760: LD_INT 53
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: IN
33767: AND
33768: PUSH
33769: LD_VAR 0 4
33773: PPUSH
33774: LD_VAR 0 5
33778: PPUSH
33779: CALL_OW 488
33783: AND
33784: IFFALSE 33808
// CutTreeXYR ( unit , x , y , 12 ) ;
33786: LD_VAR 0 2
33790: PPUSH
33791: LD_VAR 0 4
33795: PPUSH
33796: LD_VAR 0 5
33800: PPUSH
33801: LD_INT 12
33803: PPUSH
33804: CALL 33821 0 4
// end ;
33808: LD_VAR 0 6
33812: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33813: LD_INT 0
33815: PPUSH
// end ;
33816: LD_VAR 0 4
33820: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33821: LD_INT 0
33823: PPUSH
33824: PPUSH
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
33829: PPUSH
33830: PPUSH
33831: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33832: LD_VAR 0 1
33836: NOT
33837: PUSH
33838: LD_VAR 0 2
33842: PPUSH
33843: LD_VAR 0 3
33847: PPUSH
33848: CALL_OW 488
33852: NOT
33853: OR
33854: PUSH
33855: LD_VAR 0 4
33859: NOT
33860: OR
33861: IFFALSE 33865
// exit ;
33863: GO 34205
// list := [ ] ;
33865: LD_ADDR_VAR 0 13
33869: PUSH
33870: EMPTY
33871: ST_TO_ADDR
// if x - r < 0 then
33872: LD_VAR 0 2
33876: PUSH
33877: LD_VAR 0 4
33881: MINUS
33882: PUSH
33883: LD_INT 0
33885: LESS
33886: IFFALSE 33898
// min_x := 0 else
33888: LD_ADDR_VAR 0 7
33892: PUSH
33893: LD_INT 0
33895: ST_TO_ADDR
33896: GO 33914
// min_x := x - r ;
33898: LD_ADDR_VAR 0 7
33902: PUSH
33903: LD_VAR 0 2
33907: PUSH
33908: LD_VAR 0 4
33912: MINUS
33913: ST_TO_ADDR
// if y - r < 0 then
33914: LD_VAR 0 3
33918: PUSH
33919: LD_VAR 0 4
33923: MINUS
33924: PUSH
33925: LD_INT 0
33927: LESS
33928: IFFALSE 33940
// min_y := 0 else
33930: LD_ADDR_VAR 0 8
33934: PUSH
33935: LD_INT 0
33937: ST_TO_ADDR
33938: GO 33956
// min_y := y - r ;
33940: LD_ADDR_VAR 0 8
33944: PUSH
33945: LD_VAR 0 3
33949: PUSH
33950: LD_VAR 0 4
33954: MINUS
33955: ST_TO_ADDR
// max_x := x + r ;
33956: LD_ADDR_VAR 0 9
33960: PUSH
33961: LD_VAR 0 2
33965: PUSH
33966: LD_VAR 0 4
33970: PLUS
33971: ST_TO_ADDR
// max_y := y + r ;
33972: LD_ADDR_VAR 0 10
33976: PUSH
33977: LD_VAR 0 3
33981: PUSH
33982: LD_VAR 0 4
33986: PLUS
33987: ST_TO_ADDR
// for _x = min_x to max_x do
33988: LD_ADDR_VAR 0 11
33992: PUSH
33993: DOUBLE
33994: LD_VAR 0 7
33998: DEC
33999: ST_TO_ADDR
34000: LD_VAR 0 9
34004: PUSH
34005: FOR_TO
34006: IFFALSE 34123
// for _y = min_y to max_y do
34008: LD_ADDR_VAR 0 12
34012: PUSH
34013: DOUBLE
34014: LD_VAR 0 8
34018: DEC
34019: ST_TO_ADDR
34020: LD_VAR 0 10
34024: PUSH
34025: FOR_TO
34026: IFFALSE 34119
// begin if not ValidHex ( _x , _y ) then
34028: LD_VAR 0 11
34032: PPUSH
34033: LD_VAR 0 12
34037: PPUSH
34038: CALL_OW 488
34042: NOT
34043: IFFALSE 34047
// continue ;
34045: GO 34025
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34047: LD_VAR 0 11
34051: PPUSH
34052: LD_VAR 0 12
34056: PPUSH
34057: CALL_OW 351
34061: PUSH
34062: LD_VAR 0 11
34066: PPUSH
34067: LD_VAR 0 12
34071: PPUSH
34072: CALL_OW 554
34076: AND
34077: IFFALSE 34117
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34079: LD_ADDR_VAR 0 13
34083: PUSH
34084: LD_VAR 0 13
34088: PPUSH
34089: LD_VAR 0 13
34093: PUSH
34094: LD_INT 1
34096: PLUS
34097: PPUSH
34098: LD_VAR 0 11
34102: PUSH
34103: LD_VAR 0 12
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PPUSH
34112: CALL_OW 2
34116: ST_TO_ADDR
// end ;
34117: GO 34025
34119: POP
34120: POP
34121: GO 34005
34123: POP
34124: POP
// if not list then
34125: LD_VAR 0 13
34129: NOT
34130: IFFALSE 34134
// exit ;
34132: GO 34205
// for i in list do
34134: LD_ADDR_VAR 0 6
34138: PUSH
34139: LD_VAR 0 13
34143: PUSH
34144: FOR_IN
34145: IFFALSE 34203
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34147: LD_VAR 0 1
34151: PPUSH
34152: LD_STRING M
34154: PUSH
34155: LD_VAR 0 6
34159: PUSH
34160: LD_INT 1
34162: ARRAY
34163: PUSH
34164: LD_VAR 0 6
34168: PUSH
34169: LD_INT 2
34171: ARRAY
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: LD_INT 0
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: PUSH
34194: EMPTY
34195: LIST
34196: PPUSH
34197: CALL_OW 447
34201: GO 34144
34203: POP
34204: POP
// end ;
34205: LD_VAR 0 5
34209: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34210: LD_EXP 127
34214: NOT
34215: IFFALSE 34265
34217: GO 34219
34219: DISABLE
// begin initHack := true ;
34220: LD_ADDR_EXP 127
34224: PUSH
34225: LD_INT 1
34227: ST_TO_ADDR
// hackTanks := [ ] ;
34228: LD_ADDR_EXP 128
34232: PUSH
34233: EMPTY
34234: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34235: LD_ADDR_EXP 129
34239: PUSH
34240: EMPTY
34241: ST_TO_ADDR
// hackLimit := 3 ;
34242: LD_ADDR_EXP 130
34246: PUSH
34247: LD_INT 3
34249: ST_TO_ADDR
// hackDist := 12 ;
34250: LD_ADDR_EXP 131
34254: PUSH
34255: LD_INT 12
34257: ST_TO_ADDR
// hackCounter := [ ] ;
34258: LD_ADDR_EXP 132
34262: PUSH
34263: EMPTY
34264: ST_TO_ADDR
// end ;
34265: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34266: LD_EXP 127
34270: PUSH
34271: LD_INT 34
34273: PUSH
34274: LD_EXP 50
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PPUSH
34283: CALL_OW 69
34287: AND
34288: IFFALSE 34543
34290: GO 34292
34292: DISABLE
34293: LD_INT 0
34295: PPUSH
34296: PPUSH
// begin enable ;
34297: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34298: LD_ADDR_VAR 0 1
34302: PUSH
34303: LD_INT 34
34305: PUSH
34306: LD_EXP 50
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PPUSH
34315: CALL_OW 69
34319: PUSH
34320: FOR_IN
34321: IFFALSE 34541
// begin if not i in hackTanks then
34323: LD_VAR 0 1
34327: PUSH
34328: LD_EXP 128
34332: IN
34333: NOT
34334: IFFALSE 34417
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34336: LD_ADDR_EXP 128
34340: PUSH
34341: LD_EXP 128
34345: PPUSH
34346: LD_EXP 128
34350: PUSH
34351: LD_INT 1
34353: PLUS
34354: PPUSH
34355: LD_VAR 0 1
34359: PPUSH
34360: CALL_OW 1
34364: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34365: LD_ADDR_EXP 129
34369: PUSH
34370: LD_EXP 129
34374: PPUSH
34375: LD_EXP 129
34379: PUSH
34380: LD_INT 1
34382: PLUS
34383: PPUSH
34384: EMPTY
34385: PPUSH
34386: CALL_OW 1
34390: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34391: LD_ADDR_EXP 132
34395: PUSH
34396: LD_EXP 132
34400: PPUSH
34401: LD_EXP 132
34405: PUSH
34406: LD_INT 1
34408: PLUS
34409: PPUSH
34410: EMPTY
34411: PPUSH
34412: CALL_OW 1
34416: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34417: LD_VAR 0 1
34421: PPUSH
34422: CALL_OW 302
34426: NOT
34427: IFFALSE 34440
// begin HackUnlinkAll ( i ) ;
34429: LD_VAR 0 1
34433: PPUSH
34434: CALL 34546 0 1
// continue ;
34438: GO 34320
// end ; HackCheckCapturedStatus ( i ) ;
34440: LD_VAR 0 1
34444: PPUSH
34445: CALL 34989 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34449: LD_ADDR_VAR 0 2
34453: PUSH
34454: LD_INT 81
34456: PUSH
34457: LD_VAR 0 1
34461: PPUSH
34462: CALL_OW 255
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 33
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 91
34483: PUSH
34484: LD_VAR 0 1
34488: PUSH
34489: LD_EXP 131
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 50
34501: PUSH
34502: EMPTY
34503: LIST
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: PPUSH
34511: CALL_OW 69
34515: ST_TO_ADDR
// if not tmp then
34516: LD_VAR 0 2
34520: NOT
34521: IFFALSE 34525
// continue ;
34523: GO 34320
// HackLink ( i , tmp ) ;
34525: LD_VAR 0 1
34529: PPUSH
34530: LD_VAR 0 2
34534: PPUSH
34535: CALL 34682 0 2
// end ;
34539: GO 34320
34541: POP
34542: POP
// end ;
34543: PPOPN 2
34545: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34546: LD_INT 0
34548: PPUSH
34549: PPUSH
34550: PPUSH
// if not hack in hackTanks then
34551: LD_VAR 0 1
34555: PUSH
34556: LD_EXP 128
34560: IN
34561: NOT
34562: IFFALSE 34566
// exit ;
34564: GO 34677
// index := GetElementIndex ( hackTanks , hack ) ;
34566: LD_ADDR_VAR 0 4
34570: PUSH
34571: LD_EXP 128
34575: PPUSH
34576: LD_VAR 0 1
34580: PPUSH
34581: CALL 42151 0 2
34585: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34586: LD_EXP 129
34590: PUSH
34591: LD_VAR 0 4
34595: ARRAY
34596: IFFALSE 34677
// begin for i in hackTanksCaptured [ index ] do
34598: LD_ADDR_VAR 0 3
34602: PUSH
34603: LD_EXP 129
34607: PUSH
34608: LD_VAR 0 4
34612: ARRAY
34613: PUSH
34614: FOR_IN
34615: IFFALSE 34641
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34617: LD_VAR 0 3
34621: PUSH
34622: LD_INT 1
34624: ARRAY
34625: PPUSH
34626: LD_VAR 0 3
34630: PUSH
34631: LD_INT 2
34633: ARRAY
34634: PPUSH
34635: CALL_OW 235
34639: GO 34614
34641: POP
34642: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34643: LD_ADDR_EXP 129
34647: PUSH
34648: LD_EXP 129
34652: PPUSH
34653: LD_VAR 0 4
34657: PPUSH
34658: EMPTY
34659: PPUSH
34660: CALL_OW 1
34664: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34665: LD_VAR 0 1
34669: PPUSH
34670: LD_INT 0
34672: PPUSH
34673: CALL_OW 505
// end ; end ;
34677: LD_VAR 0 2
34681: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34682: LD_INT 0
34684: PPUSH
34685: PPUSH
34686: PPUSH
// if not hack in hackTanks or not vehicles then
34687: LD_VAR 0 1
34691: PUSH
34692: LD_EXP 128
34696: IN
34697: NOT
34698: PUSH
34699: LD_VAR 0 2
34703: NOT
34704: OR
34705: IFFALSE 34709
// exit ;
34707: GO 34984
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34709: LD_ADDR_VAR 0 2
34713: PUSH
34714: LD_VAR 0 1
34718: PPUSH
34719: LD_VAR 0 2
34723: PPUSH
34724: LD_INT 1
34726: PPUSH
34727: LD_INT 1
34729: PPUSH
34730: CALL 42801 0 4
34734: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34735: LD_ADDR_VAR 0 5
34739: PUSH
34740: LD_EXP 128
34744: PPUSH
34745: LD_VAR 0 1
34749: PPUSH
34750: CALL 42151 0 2
34754: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34755: LD_EXP 129
34759: PUSH
34760: LD_VAR 0 5
34764: ARRAY
34765: PUSH
34766: LD_EXP 130
34770: LESS
34771: IFFALSE 34960
// begin for i := 1 to vehicles do
34773: LD_ADDR_VAR 0 4
34777: PUSH
34778: DOUBLE
34779: LD_INT 1
34781: DEC
34782: ST_TO_ADDR
34783: LD_VAR 0 2
34787: PUSH
34788: FOR_TO
34789: IFFALSE 34958
// begin if hackTanksCaptured [ index ] = hackLimit then
34791: LD_EXP 129
34795: PUSH
34796: LD_VAR 0 5
34800: ARRAY
34801: PUSH
34802: LD_EXP 130
34806: EQUAL
34807: IFFALSE 34811
// break ;
34809: GO 34958
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34811: LD_ADDR_EXP 132
34815: PUSH
34816: LD_EXP 132
34820: PPUSH
34821: LD_VAR 0 5
34825: PPUSH
34826: LD_EXP 132
34830: PUSH
34831: LD_VAR 0 5
34835: ARRAY
34836: PUSH
34837: LD_INT 1
34839: PLUS
34840: PPUSH
34841: CALL_OW 1
34845: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34846: LD_ADDR_EXP 129
34850: PUSH
34851: LD_EXP 129
34855: PPUSH
34856: LD_VAR 0 5
34860: PUSH
34861: LD_EXP 129
34865: PUSH
34866: LD_VAR 0 5
34870: ARRAY
34871: PUSH
34872: LD_INT 1
34874: PLUS
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PPUSH
34880: LD_VAR 0 2
34884: PUSH
34885: LD_VAR 0 4
34889: ARRAY
34890: PUSH
34891: LD_VAR 0 2
34895: PUSH
34896: LD_VAR 0 4
34900: ARRAY
34901: PPUSH
34902: CALL_OW 255
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PPUSH
34911: CALL 42366 0 3
34915: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34916: LD_VAR 0 2
34920: PUSH
34921: LD_VAR 0 4
34925: ARRAY
34926: PPUSH
34927: LD_VAR 0 1
34931: PPUSH
34932: CALL_OW 255
34936: PPUSH
34937: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34941: LD_VAR 0 2
34945: PUSH
34946: LD_VAR 0 4
34950: ARRAY
34951: PPUSH
34952: CALL_OW 141
// end ;
34956: GO 34788
34958: POP
34959: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34960: LD_VAR 0 1
34964: PPUSH
34965: LD_EXP 129
34969: PUSH
34970: LD_VAR 0 5
34974: ARRAY
34975: PUSH
34976: LD_INT 0
34978: PLUS
34979: PPUSH
34980: CALL_OW 505
// end ;
34984: LD_VAR 0 3
34988: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34989: LD_INT 0
34991: PPUSH
34992: PPUSH
34993: PPUSH
34994: PPUSH
// if not hack in hackTanks then
34995: LD_VAR 0 1
34999: PUSH
35000: LD_EXP 128
35004: IN
35005: NOT
35006: IFFALSE 35010
// exit ;
35008: GO 35250
// index := GetElementIndex ( hackTanks , hack ) ;
35010: LD_ADDR_VAR 0 4
35014: PUSH
35015: LD_EXP 128
35019: PPUSH
35020: LD_VAR 0 1
35024: PPUSH
35025: CALL 42151 0 2
35029: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35030: LD_ADDR_VAR 0 3
35034: PUSH
35035: DOUBLE
35036: LD_EXP 129
35040: PUSH
35041: LD_VAR 0 4
35045: ARRAY
35046: INC
35047: ST_TO_ADDR
35048: LD_INT 1
35050: PUSH
35051: FOR_DOWNTO
35052: IFFALSE 35224
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35054: LD_ADDR_VAR 0 5
35058: PUSH
35059: LD_EXP 129
35063: PUSH
35064: LD_VAR 0 4
35068: ARRAY
35069: PUSH
35070: LD_VAR 0 3
35074: ARRAY
35075: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35076: LD_VAR 0 5
35080: PUSH
35081: LD_INT 1
35083: ARRAY
35084: PPUSH
35085: CALL_OW 302
35089: NOT
35090: PUSH
35091: LD_VAR 0 5
35095: PUSH
35096: LD_INT 1
35098: ARRAY
35099: PPUSH
35100: CALL_OW 255
35104: PUSH
35105: LD_VAR 0 1
35109: PPUSH
35110: CALL_OW 255
35114: NONEQUAL
35115: OR
35116: IFFALSE 35222
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35118: LD_VAR 0 5
35122: PUSH
35123: LD_INT 1
35125: ARRAY
35126: PPUSH
35127: CALL_OW 305
35131: PUSH
35132: LD_VAR 0 5
35136: PUSH
35137: LD_INT 1
35139: ARRAY
35140: PPUSH
35141: CALL_OW 255
35145: PUSH
35146: LD_VAR 0 1
35150: PPUSH
35151: CALL_OW 255
35155: EQUAL
35156: AND
35157: IFFALSE 35181
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35159: LD_VAR 0 5
35163: PUSH
35164: LD_INT 1
35166: ARRAY
35167: PPUSH
35168: LD_VAR 0 5
35172: PUSH
35173: LD_INT 2
35175: ARRAY
35176: PPUSH
35177: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35181: LD_ADDR_EXP 129
35185: PUSH
35186: LD_EXP 129
35190: PPUSH
35191: LD_VAR 0 4
35195: PPUSH
35196: LD_EXP 129
35200: PUSH
35201: LD_VAR 0 4
35205: ARRAY
35206: PPUSH
35207: LD_VAR 0 3
35211: PPUSH
35212: CALL_OW 3
35216: PPUSH
35217: CALL_OW 1
35221: ST_TO_ADDR
// end ; end ;
35222: GO 35051
35224: POP
35225: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35226: LD_VAR 0 1
35230: PPUSH
35231: LD_EXP 129
35235: PUSH
35236: LD_VAR 0 4
35240: ARRAY
35241: PUSH
35242: LD_INT 0
35244: PLUS
35245: PPUSH
35246: CALL_OW 505
// end ;
35250: LD_VAR 0 2
35254: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35255: LD_INT 0
35257: PPUSH
35258: PPUSH
35259: PPUSH
35260: PPUSH
// if not hack in hackTanks then
35261: LD_VAR 0 1
35265: PUSH
35266: LD_EXP 128
35270: IN
35271: NOT
35272: IFFALSE 35276
// exit ;
35274: GO 35361
// index := GetElementIndex ( hackTanks , hack ) ;
35276: LD_ADDR_VAR 0 5
35280: PUSH
35281: LD_EXP 128
35285: PPUSH
35286: LD_VAR 0 1
35290: PPUSH
35291: CALL 42151 0 2
35295: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35296: LD_ADDR_VAR 0 4
35300: PUSH
35301: DOUBLE
35302: LD_INT 1
35304: DEC
35305: ST_TO_ADDR
35306: LD_EXP 129
35310: PUSH
35311: LD_VAR 0 5
35315: ARRAY
35316: PUSH
35317: FOR_TO
35318: IFFALSE 35359
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35320: LD_EXP 129
35324: PUSH
35325: LD_VAR 0 5
35329: ARRAY
35330: PUSH
35331: LD_VAR 0 4
35335: ARRAY
35336: PUSH
35337: LD_INT 1
35339: ARRAY
35340: PUSH
35341: LD_VAR 0 2
35345: EQUAL
35346: IFFALSE 35357
// KillUnit ( vehicle ) ;
35348: LD_VAR 0 2
35352: PPUSH
35353: CALL_OW 66
35357: GO 35317
35359: POP
35360: POP
// end ;
35361: LD_VAR 0 3
35365: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35366: LD_EXP 133
35370: NOT
35371: IFFALSE 35406
35373: GO 35375
35375: DISABLE
// begin initMiner := true ;
35376: LD_ADDR_EXP 133
35380: PUSH
35381: LD_INT 1
35383: ST_TO_ADDR
// minersList := [ ] ;
35384: LD_ADDR_EXP 134
35388: PUSH
35389: EMPTY
35390: ST_TO_ADDR
// minerMinesList := [ ] ;
35391: LD_ADDR_EXP 135
35395: PUSH
35396: EMPTY
35397: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35398: LD_ADDR_EXP 136
35402: PUSH
35403: LD_INT 5
35405: ST_TO_ADDR
// end ;
35406: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35407: LD_EXP 133
35411: PUSH
35412: LD_INT 34
35414: PUSH
35415: LD_EXP 55
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PPUSH
35424: CALL_OW 69
35428: AND
35429: IFFALSE 35892
35431: GO 35433
35433: DISABLE
35434: LD_INT 0
35436: PPUSH
35437: PPUSH
35438: PPUSH
35439: PPUSH
// begin enable ;
35440: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35441: LD_ADDR_VAR 0 1
35445: PUSH
35446: LD_INT 34
35448: PUSH
35449: LD_EXP 55
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PPUSH
35458: CALL_OW 69
35462: PUSH
35463: FOR_IN
35464: IFFALSE 35536
// begin if not i in minersList then
35466: LD_VAR 0 1
35470: PUSH
35471: LD_EXP 134
35475: IN
35476: NOT
35477: IFFALSE 35534
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35479: LD_ADDR_EXP 134
35483: PUSH
35484: LD_EXP 134
35488: PPUSH
35489: LD_EXP 134
35493: PUSH
35494: LD_INT 1
35496: PLUS
35497: PPUSH
35498: LD_VAR 0 1
35502: PPUSH
35503: CALL_OW 1
35507: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35508: LD_ADDR_EXP 135
35512: PUSH
35513: LD_EXP 135
35517: PPUSH
35518: LD_EXP 135
35522: PUSH
35523: LD_INT 1
35525: PLUS
35526: PPUSH
35527: EMPTY
35528: PPUSH
35529: CALL_OW 1
35533: ST_TO_ADDR
// end end ;
35534: GO 35463
35536: POP
35537: POP
// for i := minerMinesList downto 1 do
35538: LD_ADDR_VAR 0 1
35542: PUSH
35543: DOUBLE
35544: LD_EXP 135
35548: INC
35549: ST_TO_ADDR
35550: LD_INT 1
35552: PUSH
35553: FOR_DOWNTO
35554: IFFALSE 35890
// begin if IsLive ( minersList [ i ] ) then
35556: LD_EXP 134
35560: PUSH
35561: LD_VAR 0 1
35565: ARRAY
35566: PPUSH
35567: CALL_OW 300
35571: IFFALSE 35599
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35573: LD_EXP 134
35577: PUSH
35578: LD_VAR 0 1
35582: ARRAY
35583: PPUSH
35584: LD_EXP 135
35588: PUSH
35589: LD_VAR 0 1
35593: ARRAY
35594: PPUSH
35595: CALL_OW 505
// if not minerMinesList [ i ] then
35599: LD_EXP 135
35603: PUSH
35604: LD_VAR 0 1
35608: ARRAY
35609: NOT
35610: IFFALSE 35614
// continue ;
35612: GO 35553
// for j := minerMinesList [ i ] downto 1 do
35614: LD_ADDR_VAR 0 2
35618: PUSH
35619: DOUBLE
35620: LD_EXP 135
35624: PUSH
35625: LD_VAR 0 1
35629: ARRAY
35630: INC
35631: ST_TO_ADDR
35632: LD_INT 1
35634: PUSH
35635: FOR_DOWNTO
35636: IFFALSE 35886
// begin side := GetSide ( minersList [ i ] ) ;
35638: LD_ADDR_VAR 0 3
35642: PUSH
35643: LD_EXP 134
35647: PUSH
35648: LD_VAR 0 1
35652: ARRAY
35653: PPUSH
35654: CALL_OW 255
35658: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35659: LD_ADDR_VAR 0 4
35663: PUSH
35664: LD_EXP 135
35668: PUSH
35669: LD_VAR 0 1
35673: ARRAY
35674: PUSH
35675: LD_VAR 0 2
35679: ARRAY
35680: PUSH
35681: LD_INT 1
35683: ARRAY
35684: PPUSH
35685: LD_EXP 135
35689: PUSH
35690: LD_VAR 0 1
35694: ARRAY
35695: PUSH
35696: LD_VAR 0 2
35700: ARRAY
35701: PUSH
35702: LD_INT 2
35704: ARRAY
35705: PPUSH
35706: CALL_OW 428
35710: ST_TO_ADDR
// if not tmp then
35711: LD_VAR 0 4
35715: NOT
35716: IFFALSE 35720
// continue ;
35718: GO 35635
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35720: LD_VAR 0 4
35724: PUSH
35725: LD_INT 81
35727: PUSH
35728: LD_VAR 0 3
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PPUSH
35737: CALL_OW 69
35741: IN
35742: PUSH
35743: LD_EXP 135
35747: PUSH
35748: LD_VAR 0 1
35752: ARRAY
35753: PUSH
35754: LD_VAR 0 2
35758: ARRAY
35759: PUSH
35760: LD_INT 1
35762: ARRAY
35763: PPUSH
35764: LD_EXP 135
35768: PUSH
35769: LD_VAR 0 1
35773: ARRAY
35774: PUSH
35775: LD_VAR 0 2
35779: ARRAY
35780: PUSH
35781: LD_INT 2
35783: ARRAY
35784: PPUSH
35785: CALL_OW 458
35789: AND
35790: IFFALSE 35884
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35792: LD_EXP 135
35796: PUSH
35797: LD_VAR 0 1
35801: ARRAY
35802: PUSH
35803: LD_VAR 0 2
35807: ARRAY
35808: PUSH
35809: LD_INT 1
35811: ARRAY
35812: PPUSH
35813: LD_EXP 135
35817: PUSH
35818: LD_VAR 0 1
35822: ARRAY
35823: PUSH
35824: LD_VAR 0 2
35828: ARRAY
35829: PUSH
35830: LD_INT 2
35832: ARRAY
35833: PPUSH
35834: LD_VAR 0 3
35838: PPUSH
35839: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35843: LD_ADDR_EXP 135
35847: PUSH
35848: LD_EXP 135
35852: PPUSH
35853: LD_VAR 0 1
35857: PPUSH
35858: LD_EXP 135
35862: PUSH
35863: LD_VAR 0 1
35867: ARRAY
35868: PPUSH
35869: LD_VAR 0 2
35873: PPUSH
35874: CALL_OW 3
35878: PPUSH
35879: CALL_OW 1
35883: ST_TO_ADDR
// end ; end ;
35884: GO 35635
35886: POP
35887: POP
// end ;
35888: GO 35553
35890: POP
35891: POP
// end ;
35892: PPOPN 4
35894: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35895: LD_INT 0
35897: PPUSH
35898: PPUSH
// result := false ;
35899: LD_ADDR_VAR 0 4
35903: PUSH
35904: LD_INT 0
35906: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35907: LD_VAR 0 1
35911: PPUSH
35912: CALL_OW 264
35916: PUSH
35917: LD_EXP 55
35921: EQUAL
35922: NOT
35923: IFFALSE 35927
// exit ;
35925: GO 36167
// index := GetElementIndex ( minersList , unit ) ;
35927: LD_ADDR_VAR 0 5
35931: PUSH
35932: LD_EXP 134
35936: PPUSH
35937: LD_VAR 0 1
35941: PPUSH
35942: CALL 42151 0 2
35946: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35947: LD_EXP 135
35951: PUSH
35952: LD_VAR 0 5
35956: ARRAY
35957: PUSH
35958: LD_EXP 136
35962: GREATEREQUAL
35963: IFFALSE 35967
// exit ;
35965: GO 36167
// ComMoveXY ( unit , x , y ) ;
35967: LD_VAR 0 1
35971: PPUSH
35972: LD_VAR 0 2
35976: PPUSH
35977: LD_VAR 0 3
35981: PPUSH
35982: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35986: LD_INT 35
35988: PPUSH
35989: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35993: LD_VAR 0 1
35997: PPUSH
35998: LD_VAR 0 2
36002: PPUSH
36003: LD_VAR 0 3
36007: PPUSH
36008: CALL 72923 0 3
36012: NOT
36013: PUSH
36014: LD_VAR 0 1
36018: PPUSH
36019: CALL_OW 314
36023: AND
36024: IFFALSE 36028
// exit ;
36026: GO 36167
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36028: LD_VAR 0 2
36032: PPUSH
36033: LD_VAR 0 3
36037: PPUSH
36038: CALL_OW 428
36042: PUSH
36043: LD_VAR 0 1
36047: EQUAL
36048: PUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 314
36058: NOT
36059: AND
36060: IFFALSE 35986
// PlaySoundXY ( x , y , PlantMine ) ;
36062: LD_VAR 0 2
36066: PPUSH
36067: LD_VAR 0 3
36071: PPUSH
36072: LD_STRING PlantMine
36074: PPUSH
36075: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36079: LD_VAR 0 2
36083: PPUSH
36084: LD_VAR 0 3
36088: PPUSH
36089: LD_VAR 0 1
36093: PPUSH
36094: CALL_OW 255
36098: PPUSH
36099: LD_INT 0
36101: PPUSH
36102: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36106: LD_ADDR_EXP 135
36110: PUSH
36111: LD_EXP 135
36115: PPUSH
36116: LD_VAR 0 5
36120: PUSH
36121: LD_EXP 135
36125: PUSH
36126: LD_VAR 0 5
36130: ARRAY
36131: PUSH
36132: LD_INT 1
36134: PLUS
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PPUSH
36140: LD_VAR 0 2
36144: PUSH
36145: LD_VAR 0 3
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PPUSH
36154: CALL 42366 0 3
36158: ST_TO_ADDR
// result := true ;
36159: LD_ADDR_VAR 0 4
36163: PUSH
36164: LD_INT 1
36166: ST_TO_ADDR
// end ;
36167: LD_VAR 0 4
36171: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36172: LD_INT 0
36174: PPUSH
36175: PPUSH
36176: PPUSH
// if not unit in minersList then
36177: LD_VAR 0 1
36181: PUSH
36182: LD_EXP 134
36186: IN
36187: NOT
36188: IFFALSE 36192
// exit ;
36190: GO 36584
// index := GetElementIndex ( minersList , unit ) ;
36192: LD_ADDR_VAR 0 6
36196: PUSH
36197: LD_EXP 134
36201: PPUSH
36202: LD_VAR 0 1
36206: PPUSH
36207: CALL 42151 0 2
36211: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36212: LD_ADDR_VAR 0 5
36216: PUSH
36217: DOUBLE
36218: LD_EXP 135
36222: PUSH
36223: LD_VAR 0 6
36227: ARRAY
36228: INC
36229: ST_TO_ADDR
36230: LD_INT 1
36232: PUSH
36233: FOR_DOWNTO
36234: IFFALSE 36395
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36236: LD_EXP 135
36240: PUSH
36241: LD_VAR 0 6
36245: ARRAY
36246: PUSH
36247: LD_VAR 0 5
36251: ARRAY
36252: PUSH
36253: LD_INT 1
36255: ARRAY
36256: PUSH
36257: LD_VAR 0 2
36261: EQUAL
36262: PUSH
36263: LD_EXP 135
36267: PUSH
36268: LD_VAR 0 6
36272: ARRAY
36273: PUSH
36274: LD_VAR 0 5
36278: ARRAY
36279: PUSH
36280: LD_INT 2
36282: ARRAY
36283: PUSH
36284: LD_VAR 0 3
36288: EQUAL
36289: AND
36290: IFFALSE 36393
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36292: LD_EXP 135
36296: PUSH
36297: LD_VAR 0 6
36301: ARRAY
36302: PUSH
36303: LD_VAR 0 5
36307: ARRAY
36308: PUSH
36309: LD_INT 1
36311: ARRAY
36312: PPUSH
36313: LD_EXP 135
36317: PUSH
36318: LD_VAR 0 6
36322: ARRAY
36323: PUSH
36324: LD_VAR 0 5
36328: ARRAY
36329: PUSH
36330: LD_INT 2
36332: ARRAY
36333: PPUSH
36334: LD_VAR 0 1
36338: PPUSH
36339: CALL_OW 255
36343: PPUSH
36344: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36348: LD_ADDR_EXP 135
36352: PUSH
36353: LD_EXP 135
36357: PPUSH
36358: LD_VAR 0 6
36362: PPUSH
36363: LD_EXP 135
36367: PUSH
36368: LD_VAR 0 6
36372: ARRAY
36373: PPUSH
36374: LD_VAR 0 5
36378: PPUSH
36379: CALL_OW 3
36383: PPUSH
36384: CALL_OW 1
36388: ST_TO_ADDR
// exit ;
36389: POP
36390: POP
36391: GO 36584
// end ; end ;
36393: GO 36233
36395: POP
36396: POP
// for i := minerMinesList [ index ] downto 1 do
36397: LD_ADDR_VAR 0 5
36401: PUSH
36402: DOUBLE
36403: LD_EXP 135
36407: PUSH
36408: LD_VAR 0 6
36412: ARRAY
36413: INC
36414: ST_TO_ADDR
36415: LD_INT 1
36417: PUSH
36418: FOR_DOWNTO
36419: IFFALSE 36582
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36421: LD_EXP 135
36425: PUSH
36426: LD_VAR 0 6
36430: ARRAY
36431: PUSH
36432: LD_VAR 0 5
36436: ARRAY
36437: PUSH
36438: LD_INT 1
36440: ARRAY
36441: PPUSH
36442: LD_EXP 135
36446: PUSH
36447: LD_VAR 0 6
36451: ARRAY
36452: PUSH
36453: LD_VAR 0 5
36457: ARRAY
36458: PUSH
36459: LD_INT 2
36461: ARRAY
36462: PPUSH
36463: LD_VAR 0 2
36467: PPUSH
36468: LD_VAR 0 3
36472: PPUSH
36473: CALL_OW 298
36477: PUSH
36478: LD_INT 6
36480: LESS
36481: IFFALSE 36580
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36483: LD_EXP 135
36487: PUSH
36488: LD_VAR 0 6
36492: ARRAY
36493: PUSH
36494: LD_VAR 0 5
36498: ARRAY
36499: PUSH
36500: LD_INT 1
36502: ARRAY
36503: PPUSH
36504: LD_EXP 135
36508: PUSH
36509: LD_VAR 0 6
36513: ARRAY
36514: PUSH
36515: LD_VAR 0 5
36519: ARRAY
36520: PUSH
36521: LD_INT 2
36523: ARRAY
36524: PPUSH
36525: LD_VAR 0 1
36529: PPUSH
36530: CALL_OW 255
36534: PPUSH
36535: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36539: LD_ADDR_EXP 135
36543: PUSH
36544: LD_EXP 135
36548: PPUSH
36549: LD_VAR 0 6
36553: PPUSH
36554: LD_EXP 135
36558: PUSH
36559: LD_VAR 0 6
36563: ARRAY
36564: PPUSH
36565: LD_VAR 0 5
36569: PPUSH
36570: CALL_OW 3
36574: PPUSH
36575: CALL_OW 1
36579: ST_TO_ADDR
// end ; end ;
36580: GO 36418
36582: POP
36583: POP
// end ;
36584: LD_VAR 0 4
36588: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36589: LD_INT 0
36591: PPUSH
36592: PPUSH
36593: PPUSH
36594: PPUSH
36595: PPUSH
36596: PPUSH
36597: PPUSH
36598: PPUSH
36599: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36600: LD_VAR 0 1
36604: PPUSH
36605: CALL_OW 264
36609: PUSH
36610: LD_EXP 55
36614: EQUAL
36615: NOT
36616: PUSH
36617: LD_VAR 0 1
36621: PUSH
36622: LD_EXP 134
36626: IN
36627: NOT
36628: OR
36629: IFFALSE 36633
// exit ;
36631: GO 36955
// index := GetElementIndex ( minersList , unit ) ;
36633: LD_ADDR_VAR 0 6
36637: PUSH
36638: LD_EXP 134
36642: PPUSH
36643: LD_VAR 0 1
36647: PPUSH
36648: CALL 42151 0 2
36652: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36653: LD_ADDR_VAR 0 8
36657: PUSH
36658: LD_EXP 136
36662: PUSH
36663: LD_EXP 135
36667: PUSH
36668: LD_VAR 0 6
36672: ARRAY
36673: MINUS
36674: ST_TO_ADDR
// if not minesFreeAmount then
36675: LD_VAR 0 8
36679: NOT
36680: IFFALSE 36684
// exit ;
36682: GO 36955
// tmp := [ ] ;
36684: LD_ADDR_VAR 0 7
36688: PUSH
36689: EMPTY
36690: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36691: LD_ADDR_VAR 0 5
36695: PUSH
36696: DOUBLE
36697: LD_INT 1
36699: DEC
36700: ST_TO_ADDR
36701: LD_VAR 0 8
36705: PUSH
36706: FOR_TO
36707: IFFALSE 36902
// begin _d := rand ( 0 , 5 ) ;
36709: LD_ADDR_VAR 0 11
36713: PUSH
36714: LD_INT 0
36716: PPUSH
36717: LD_INT 5
36719: PPUSH
36720: CALL_OW 12
36724: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36725: LD_ADDR_VAR 0 12
36729: PUSH
36730: LD_INT 2
36732: PPUSH
36733: LD_INT 6
36735: PPUSH
36736: CALL_OW 12
36740: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36741: LD_ADDR_VAR 0 9
36745: PUSH
36746: LD_VAR 0 2
36750: PPUSH
36751: LD_VAR 0 11
36755: PPUSH
36756: LD_VAR 0 12
36760: PPUSH
36761: CALL_OW 272
36765: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36766: LD_ADDR_VAR 0 10
36770: PUSH
36771: LD_VAR 0 3
36775: PPUSH
36776: LD_VAR 0 11
36780: PPUSH
36781: LD_VAR 0 12
36785: PPUSH
36786: CALL_OW 273
36790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36791: LD_VAR 0 9
36795: PPUSH
36796: LD_VAR 0 10
36800: PPUSH
36801: CALL_OW 488
36805: PUSH
36806: LD_VAR 0 9
36810: PUSH
36811: LD_VAR 0 10
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_VAR 0 7
36824: IN
36825: NOT
36826: AND
36827: PUSH
36828: LD_VAR 0 9
36832: PPUSH
36833: LD_VAR 0 10
36837: PPUSH
36838: CALL_OW 458
36842: NOT
36843: AND
36844: IFFALSE 36886
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36846: LD_ADDR_VAR 0 7
36850: PUSH
36851: LD_VAR 0 7
36855: PPUSH
36856: LD_VAR 0 7
36860: PUSH
36861: LD_INT 1
36863: PLUS
36864: PPUSH
36865: LD_VAR 0 9
36869: PUSH
36870: LD_VAR 0 10
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PPUSH
36879: CALL_OW 1
36883: ST_TO_ADDR
36884: GO 36900
// i := i - 1 ;
36886: LD_ADDR_VAR 0 5
36890: PUSH
36891: LD_VAR 0 5
36895: PUSH
36896: LD_INT 1
36898: MINUS
36899: ST_TO_ADDR
// end ;
36900: GO 36706
36902: POP
36903: POP
// for i in tmp do
36904: LD_ADDR_VAR 0 5
36908: PUSH
36909: LD_VAR 0 7
36913: PUSH
36914: FOR_IN
36915: IFFALSE 36953
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36917: LD_VAR 0 1
36921: PPUSH
36922: LD_VAR 0 5
36926: PUSH
36927: LD_INT 1
36929: ARRAY
36930: PPUSH
36931: LD_VAR 0 5
36935: PUSH
36936: LD_INT 2
36938: ARRAY
36939: PPUSH
36940: CALL 35895 0 3
36944: NOT
36945: IFFALSE 36951
// exit ;
36947: POP
36948: POP
36949: GO 36955
36951: GO 36914
36953: POP
36954: POP
// end ;
36955: LD_VAR 0 4
36959: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36960: LD_INT 0
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
36966: PPUSH
36967: PPUSH
36968: PPUSH
// if not GetClass ( unit ) = class_sniper then
36969: LD_VAR 0 1
36973: PPUSH
36974: CALL_OW 257
36978: PUSH
36979: LD_INT 5
36981: EQUAL
36982: NOT
36983: IFFALSE 36987
// exit ;
36985: GO 37375
// dist := 8 ;
36987: LD_ADDR_VAR 0 5
36991: PUSH
36992: LD_INT 8
36994: ST_TO_ADDR
// viewRange := 12 ;
36995: LD_ADDR_VAR 0 7
36999: PUSH
37000: LD_INT 12
37002: ST_TO_ADDR
// side := GetSide ( unit ) ;
37003: LD_ADDR_VAR 0 6
37007: PUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: CALL_OW 255
37017: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37018: LD_INT 61
37020: PPUSH
37021: LD_VAR 0 6
37025: PPUSH
37026: CALL_OW 321
37030: PUSH
37031: LD_INT 2
37033: EQUAL
37034: IFFALSE 37044
// viewRange := 16 ;
37036: LD_ADDR_VAR 0 7
37040: PUSH
37041: LD_INT 16
37043: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37044: LD_VAR 0 1
37048: PPUSH
37049: LD_VAR 0 2
37053: PPUSH
37054: LD_VAR 0 3
37058: PPUSH
37059: CALL_OW 297
37063: PUSH
37064: LD_VAR 0 5
37068: GREATER
37069: IFFALSE 37148
// begin ComMoveXY ( unit , x , y ) ;
37071: LD_VAR 0 1
37075: PPUSH
37076: LD_VAR 0 2
37080: PPUSH
37081: LD_VAR 0 3
37085: PPUSH
37086: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37090: LD_INT 35
37092: PPUSH
37093: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37097: LD_VAR 0 1
37101: PPUSH
37102: LD_VAR 0 2
37106: PPUSH
37107: LD_VAR 0 3
37111: PPUSH
37112: CALL 72923 0 3
37116: NOT
37117: IFFALSE 37121
// exit ;
37119: GO 37375
// until GetDistUnitXY ( unit , x , y ) < dist ;
37121: LD_VAR 0 1
37125: PPUSH
37126: LD_VAR 0 2
37130: PPUSH
37131: LD_VAR 0 3
37135: PPUSH
37136: CALL_OW 297
37140: PUSH
37141: LD_VAR 0 5
37145: LESS
37146: IFFALSE 37090
// end ; ComTurnXY ( unit , x , y ) ;
37148: LD_VAR 0 1
37152: PPUSH
37153: LD_VAR 0 2
37157: PPUSH
37158: LD_VAR 0 3
37162: PPUSH
37163: CALL_OW 118
// wait ( 5 ) ;
37167: LD_INT 5
37169: PPUSH
37170: CALL_OW 67
// _d := GetDir ( unit ) ;
37174: LD_ADDR_VAR 0 10
37178: PUSH
37179: LD_VAR 0 1
37183: PPUSH
37184: CALL_OW 254
37188: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37189: LD_ADDR_VAR 0 8
37193: PUSH
37194: LD_VAR 0 1
37198: PPUSH
37199: CALL_OW 250
37203: PPUSH
37204: LD_VAR 0 10
37208: PPUSH
37209: LD_VAR 0 5
37213: PPUSH
37214: CALL_OW 272
37218: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37219: LD_ADDR_VAR 0 9
37223: PUSH
37224: LD_VAR 0 1
37228: PPUSH
37229: CALL_OW 251
37233: PPUSH
37234: LD_VAR 0 10
37238: PPUSH
37239: LD_VAR 0 5
37243: PPUSH
37244: CALL_OW 273
37248: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37249: LD_VAR 0 8
37253: PPUSH
37254: LD_VAR 0 9
37258: PPUSH
37259: CALL_OW 488
37263: NOT
37264: IFFALSE 37268
// exit ;
37266: GO 37375
// ComAnimCustom ( unit , 1 ) ;
37268: LD_VAR 0 1
37272: PPUSH
37273: LD_INT 1
37275: PPUSH
37276: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37280: LD_VAR 0 8
37284: PPUSH
37285: LD_VAR 0 9
37289: PPUSH
37290: LD_VAR 0 6
37294: PPUSH
37295: LD_VAR 0 7
37299: PPUSH
37300: CALL_OW 330
// repeat wait ( 1 ) ;
37304: LD_INT 1
37306: PPUSH
37307: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37311: LD_VAR 0 1
37315: PPUSH
37316: CALL_OW 316
37320: PUSH
37321: LD_VAR 0 1
37325: PPUSH
37326: CALL_OW 314
37330: OR
37331: PUSH
37332: LD_VAR 0 1
37336: PPUSH
37337: CALL_OW 302
37341: NOT
37342: OR
37343: PUSH
37344: LD_VAR 0 1
37348: PPUSH
37349: CALL_OW 301
37353: OR
37354: IFFALSE 37304
// RemoveSeeing ( _x , _y , side ) ;
37356: LD_VAR 0 8
37360: PPUSH
37361: LD_VAR 0 9
37365: PPUSH
37366: LD_VAR 0 6
37370: PPUSH
37371: CALL_OW 331
// end ; end_of_file
37375: LD_VAR 0 4
37379: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37380: LD_INT 0
37382: PPUSH
37383: PPUSH
// if exist_mode then
37384: LD_VAR 0 2
37388: IFFALSE 37413
// unit := CreateCharacter ( prefix & ident ) else
37390: LD_ADDR_VAR 0 5
37394: PUSH
37395: LD_VAR 0 3
37399: PUSH
37400: LD_VAR 0 1
37404: STR
37405: PPUSH
37406: CALL_OW 34
37410: ST_TO_ADDR
37411: GO 37428
// unit := NewCharacter ( ident ) ;
37413: LD_ADDR_VAR 0 5
37417: PUSH
37418: LD_VAR 0 1
37422: PPUSH
37423: CALL_OW 25
37427: ST_TO_ADDR
// result := unit ;
37428: LD_ADDR_VAR 0 4
37432: PUSH
37433: LD_VAR 0 5
37437: ST_TO_ADDR
// end ;
37438: LD_VAR 0 4
37442: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37443: LD_INT 0
37445: PPUSH
37446: PPUSH
// if not side or not nation then
37447: LD_VAR 0 1
37451: NOT
37452: PUSH
37453: LD_VAR 0 2
37457: NOT
37458: OR
37459: IFFALSE 37463
// exit ;
37461: GO 38231
// case nation of nation_american :
37463: LD_VAR 0 2
37467: PUSH
37468: LD_INT 1
37470: DOUBLE
37471: EQUAL
37472: IFTRUE 37476
37474: GO 37690
37476: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37477: LD_ADDR_VAR 0 4
37481: PUSH
37482: LD_INT 35
37484: PUSH
37485: LD_INT 45
37487: PUSH
37488: LD_INT 46
37490: PUSH
37491: LD_INT 47
37493: PUSH
37494: LD_INT 82
37496: PUSH
37497: LD_INT 83
37499: PUSH
37500: LD_INT 84
37502: PUSH
37503: LD_INT 85
37505: PUSH
37506: LD_INT 86
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: LD_INT 2
37514: PUSH
37515: LD_INT 6
37517: PUSH
37518: LD_INT 15
37520: PUSH
37521: LD_INT 16
37523: PUSH
37524: LD_INT 7
37526: PUSH
37527: LD_INT 12
37529: PUSH
37530: LD_INT 13
37532: PUSH
37533: LD_INT 10
37535: PUSH
37536: LD_INT 14
37538: PUSH
37539: LD_INT 20
37541: PUSH
37542: LD_INT 21
37544: PUSH
37545: LD_INT 22
37547: PUSH
37548: LD_INT 25
37550: PUSH
37551: LD_INT 32
37553: PUSH
37554: LD_INT 27
37556: PUSH
37557: LD_INT 36
37559: PUSH
37560: LD_INT 69
37562: PUSH
37563: LD_INT 39
37565: PUSH
37566: LD_INT 34
37568: PUSH
37569: LD_INT 40
37571: PUSH
37572: LD_INT 48
37574: PUSH
37575: LD_INT 49
37577: PUSH
37578: LD_INT 50
37580: PUSH
37581: LD_INT 51
37583: PUSH
37584: LD_INT 52
37586: PUSH
37587: LD_INT 53
37589: PUSH
37590: LD_INT 54
37592: PUSH
37593: LD_INT 55
37595: PUSH
37596: LD_INT 56
37598: PUSH
37599: LD_INT 57
37601: PUSH
37602: LD_INT 58
37604: PUSH
37605: LD_INT 59
37607: PUSH
37608: LD_INT 60
37610: PUSH
37611: LD_INT 61
37613: PUSH
37614: LD_INT 62
37616: PUSH
37617: LD_INT 80
37619: PUSH
37620: LD_INT 82
37622: PUSH
37623: LD_INT 83
37625: PUSH
37626: LD_INT 84
37628: PUSH
37629: LD_INT 85
37631: PUSH
37632: LD_INT 86
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: ST_TO_ADDR
37688: GO 38155
37690: LD_INT 2
37692: DOUBLE
37693: EQUAL
37694: IFTRUE 37698
37696: GO 37924
37698: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37699: LD_ADDR_VAR 0 4
37703: PUSH
37704: LD_INT 35
37706: PUSH
37707: LD_INT 45
37709: PUSH
37710: LD_INT 46
37712: PUSH
37713: LD_INT 47
37715: PUSH
37716: LD_INT 82
37718: PUSH
37719: LD_INT 83
37721: PUSH
37722: LD_INT 84
37724: PUSH
37725: LD_INT 85
37727: PUSH
37728: LD_INT 87
37730: PUSH
37731: LD_INT 70
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: LD_INT 11
37739: PUSH
37740: LD_INT 3
37742: PUSH
37743: LD_INT 4
37745: PUSH
37746: LD_INT 5
37748: PUSH
37749: LD_INT 6
37751: PUSH
37752: LD_INT 15
37754: PUSH
37755: LD_INT 18
37757: PUSH
37758: LD_INT 7
37760: PUSH
37761: LD_INT 17
37763: PUSH
37764: LD_INT 8
37766: PUSH
37767: LD_INT 20
37769: PUSH
37770: LD_INT 21
37772: PUSH
37773: LD_INT 22
37775: PUSH
37776: LD_INT 72
37778: PUSH
37779: LD_INT 26
37781: PUSH
37782: LD_INT 69
37784: PUSH
37785: LD_INT 39
37787: PUSH
37788: LD_INT 40
37790: PUSH
37791: LD_INT 41
37793: PUSH
37794: LD_INT 42
37796: PUSH
37797: LD_INT 43
37799: PUSH
37800: LD_INT 48
37802: PUSH
37803: LD_INT 49
37805: PUSH
37806: LD_INT 50
37808: PUSH
37809: LD_INT 51
37811: PUSH
37812: LD_INT 52
37814: PUSH
37815: LD_INT 53
37817: PUSH
37818: LD_INT 54
37820: PUSH
37821: LD_INT 55
37823: PUSH
37824: LD_INT 56
37826: PUSH
37827: LD_INT 60
37829: PUSH
37830: LD_INT 61
37832: PUSH
37833: LD_INT 62
37835: PUSH
37836: LD_INT 66
37838: PUSH
37839: LD_INT 67
37841: PUSH
37842: LD_INT 68
37844: PUSH
37845: LD_INT 81
37847: PUSH
37848: LD_INT 82
37850: PUSH
37851: LD_INT 83
37853: PUSH
37854: LD_INT 84
37856: PUSH
37857: LD_INT 85
37859: PUSH
37860: LD_INT 87
37862: PUSH
37863: LD_INT 88
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: ST_TO_ADDR
37922: GO 38155
37924: LD_INT 3
37926: DOUBLE
37927: EQUAL
37928: IFTRUE 37932
37930: GO 38154
37932: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37933: LD_ADDR_VAR 0 4
37937: PUSH
37938: LD_INT 46
37940: PUSH
37941: LD_INT 47
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: LD_INT 2
37949: PUSH
37950: LD_INT 82
37952: PUSH
37953: LD_INT 83
37955: PUSH
37956: LD_INT 84
37958: PUSH
37959: LD_INT 85
37961: PUSH
37962: LD_INT 86
37964: PUSH
37965: LD_INT 11
37967: PUSH
37968: LD_INT 9
37970: PUSH
37971: LD_INT 20
37973: PUSH
37974: LD_INT 19
37976: PUSH
37977: LD_INT 21
37979: PUSH
37980: LD_INT 24
37982: PUSH
37983: LD_INT 22
37985: PUSH
37986: LD_INT 25
37988: PUSH
37989: LD_INT 28
37991: PUSH
37992: LD_INT 29
37994: PUSH
37995: LD_INT 30
37997: PUSH
37998: LD_INT 31
38000: PUSH
38001: LD_INT 37
38003: PUSH
38004: LD_INT 38
38006: PUSH
38007: LD_INT 32
38009: PUSH
38010: LD_INT 27
38012: PUSH
38013: LD_INT 33
38015: PUSH
38016: LD_INT 69
38018: PUSH
38019: LD_INT 39
38021: PUSH
38022: LD_INT 34
38024: PUSH
38025: LD_INT 40
38027: PUSH
38028: LD_INT 71
38030: PUSH
38031: LD_INT 23
38033: PUSH
38034: LD_INT 44
38036: PUSH
38037: LD_INT 48
38039: PUSH
38040: LD_INT 49
38042: PUSH
38043: LD_INT 50
38045: PUSH
38046: LD_INT 51
38048: PUSH
38049: LD_INT 52
38051: PUSH
38052: LD_INT 53
38054: PUSH
38055: LD_INT 54
38057: PUSH
38058: LD_INT 55
38060: PUSH
38061: LD_INT 56
38063: PUSH
38064: LD_INT 57
38066: PUSH
38067: LD_INT 58
38069: PUSH
38070: LD_INT 59
38072: PUSH
38073: LD_INT 63
38075: PUSH
38076: LD_INT 64
38078: PUSH
38079: LD_INT 65
38081: PUSH
38082: LD_INT 82
38084: PUSH
38085: LD_INT 83
38087: PUSH
38088: LD_INT 84
38090: PUSH
38091: LD_INT 85
38093: PUSH
38094: LD_INT 86
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: ST_TO_ADDR
38152: GO 38155
38154: POP
// if state > - 1 and state < 3 then
38155: LD_VAR 0 3
38159: PUSH
38160: LD_INT 1
38162: NEG
38163: GREATER
38164: PUSH
38165: LD_VAR 0 3
38169: PUSH
38170: LD_INT 3
38172: LESS
38173: AND
38174: IFFALSE 38231
// for i in result do
38176: LD_ADDR_VAR 0 5
38180: PUSH
38181: LD_VAR 0 4
38185: PUSH
38186: FOR_IN
38187: IFFALSE 38229
// if GetTech ( i , side ) <> state then
38189: LD_VAR 0 5
38193: PPUSH
38194: LD_VAR 0 1
38198: PPUSH
38199: CALL_OW 321
38203: PUSH
38204: LD_VAR 0 3
38208: NONEQUAL
38209: IFFALSE 38227
// result := result diff i ;
38211: LD_ADDR_VAR 0 4
38215: PUSH
38216: LD_VAR 0 4
38220: PUSH
38221: LD_VAR 0 5
38225: DIFF
38226: ST_TO_ADDR
38227: GO 38186
38229: POP
38230: POP
// end ;
38231: LD_VAR 0 4
38235: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38236: LD_INT 0
38238: PPUSH
38239: PPUSH
38240: PPUSH
// result := true ;
38241: LD_ADDR_VAR 0 3
38245: PUSH
38246: LD_INT 1
38248: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38249: LD_ADDR_VAR 0 5
38253: PUSH
38254: LD_VAR 0 2
38258: PPUSH
38259: CALL_OW 480
38263: ST_TO_ADDR
// if not tmp then
38264: LD_VAR 0 5
38268: NOT
38269: IFFALSE 38273
// exit ;
38271: GO 38322
// for i in tmp do
38273: LD_ADDR_VAR 0 4
38277: PUSH
38278: LD_VAR 0 5
38282: PUSH
38283: FOR_IN
38284: IFFALSE 38320
// if GetTech ( i , side ) <> state_researched then
38286: LD_VAR 0 4
38290: PPUSH
38291: LD_VAR 0 1
38295: PPUSH
38296: CALL_OW 321
38300: PUSH
38301: LD_INT 2
38303: NONEQUAL
38304: IFFALSE 38318
// begin result := false ;
38306: LD_ADDR_VAR 0 3
38310: PUSH
38311: LD_INT 0
38313: ST_TO_ADDR
// exit ;
38314: POP
38315: POP
38316: GO 38322
// end ;
38318: GO 38283
38320: POP
38321: POP
// end ;
38322: LD_VAR 0 3
38326: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38327: LD_INT 0
38329: PPUSH
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
38340: PPUSH
38341: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38342: LD_VAR 0 1
38346: NOT
38347: PUSH
38348: LD_VAR 0 1
38352: PPUSH
38353: CALL_OW 257
38357: PUSH
38358: LD_INT 9
38360: NONEQUAL
38361: OR
38362: IFFALSE 38366
// exit ;
38364: GO 38939
// side := GetSide ( unit ) ;
38366: LD_ADDR_VAR 0 9
38370: PUSH
38371: LD_VAR 0 1
38375: PPUSH
38376: CALL_OW 255
38380: ST_TO_ADDR
// tech_space := tech_spacanom ;
38381: LD_ADDR_VAR 0 12
38385: PUSH
38386: LD_INT 29
38388: ST_TO_ADDR
// tech_time := tech_taurad ;
38389: LD_ADDR_VAR 0 13
38393: PUSH
38394: LD_INT 28
38396: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38397: LD_ADDR_VAR 0 11
38401: PUSH
38402: LD_VAR 0 1
38406: PPUSH
38407: CALL_OW 310
38411: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38412: LD_VAR 0 11
38416: PPUSH
38417: CALL_OW 247
38421: PUSH
38422: LD_INT 2
38424: EQUAL
38425: IFFALSE 38429
// exit ;
38427: GO 38939
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38429: LD_ADDR_VAR 0 8
38433: PUSH
38434: LD_INT 81
38436: PUSH
38437: LD_VAR 0 9
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 3
38448: PUSH
38449: LD_INT 21
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PPUSH
38467: CALL_OW 69
38471: ST_TO_ADDR
// if not tmp then
38472: LD_VAR 0 8
38476: NOT
38477: IFFALSE 38481
// exit ;
38479: GO 38939
// if in_unit then
38481: LD_VAR 0 11
38485: IFFALSE 38509
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38487: LD_ADDR_VAR 0 10
38491: PUSH
38492: LD_VAR 0 8
38496: PPUSH
38497: LD_VAR 0 11
38501: PPUSH
38502: CALL_OW 74
38506: ST_TO_ADDR
38507: GO 38529
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38509: LD_ADDR_VAR 0 10
38513: PUSH
38514: LD_VAR 0 8
38518: PPUSH
38519: LD_VAR 0 1
38523: PPUSH
38524: CALL_OW 74
38528: ST_TO_ADDR
// if not enemy then
38529: LD_VAR 0 10
38533: NOT
38534: IFFALSE 38538
// exit ;
38536: GO 38939
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38538: LD_VAR 0 11
38542: PUSH
38543: LD_VAR 0 11
38547: PPUSH
38548: LD_VAR 0 10
38552: PPUSH
38553: CALL_OW 296
38557: PUSH
38558: LD_INT 13
38560: GREATER
38561: AND
38562: PUSH
38563: LD_VAR 0 1
38567: PPUSH
38568: LD_VAR 0 10
38572: PPUSH
38573: CALL_OW 296
38577: PUSH
38578: LD_INT 12
38580: GREATER
38581: OR
38582: IFFALSE 38586
// exit ;
38584: GO 38939
// missile := [ 1 ] ;
38586: LD_ADDR_VAR 0 14
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: EMPTY
38595: LIST
38596: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38597: LD_VAR 0 9
38601: PPUSH
38602: LD_VAR 0 12
38606: PPUSH
38607: CALL_OW 325
38611: IFFALSE 38640
// missile := Insert ( missile , missile + 1 , 2 ) ;
38613: LD_ADDR_VAR 0 14
38617: PUSH
38618: LD_VAR 0 14
38622: PPUSH
38623: LD_VAR 0 14
38627: PUSH
38628: LD_INT 1
38630: PLUS
38631: PPUSH
38632: LD_INT 2
38634: PPUSH
38635: CALL_OW 2
38639: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38640: LD_VAR 0 9
38644: PPUSH
38645: LD_VAR 0 13
38649: PPUSH
38650: CALL_OW 325
38654: PUSH
38655: LD_VAR 0 10
38659: PPUSH
38660: CALL_OW 255
38664: PPUSH
38665: LD_VAR 0 13
38669: PPUSH
38670: CALL_OW 325
38674: NOT
38675: AND
38676: IFFALSE 38705
// missile := Insert ( missile , missile + 1 , 3 ) ;
38678: LD_ADDR_VAR 0 14
38682: PUSH
38683: LD_VAR 0 14
38687: PPUSH
38688: LD_VAR 0 14
38692: PUSH
38693: LD_INT 1
38695: PLUS
38696: PPUSH
38697: LD_INT 3
38699: PPUSH
38700: CALL_OW 2
38704: ST_TO_ADDR
// if missile < 2 then
38705: LD_VAR 0 14
38709: PUSH
38710: LD_INT 2
38712: LESS
38713: IFFALSE 38717
// exit ;
38715: GO 38939
// x := GetX ( enemy ) ;
38717: LD_ADDR_VAR 0 4
38721: PUSH
38722: LD_VAR 0 10
38726: PPUSH
38727: CALL_OW 250
38731: ST_TO_ADDR
// y := GetY ( enemy ) ;
38732: LD_ADDR_VAR 0 5
38736: PUSH
38737: LD_VAR 0 10
38741: PPUSH
38742: CALL_OW 251
38746: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38747: LD_ADDR_VAR 0 6
38751: PUSH
38752: LD_VAR 0 4
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PPUSH
38761: LD_INT 1
38763: PPUSH
38764: CALL_OW 12
38768: PLUS
38769: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38770: LD_ADDR_VAR 0 7
38774: PUSH
38775: LD_VAR 0 5
38779: PUSH
38780: LD_INT 1
38782: NEG
38783: PPUSH
38784: LD_INT 1
38786: PPUSH
38787: CALL_OW 12
38791: PLUS
38792: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38793: LD_VAR 0 6
38797: PPUSH
38798: LD_VAR 0 7
38802: PPUSH
38803: CALL_OW 488
38807: NOT
38808: IFFALSE 38830
// begin _x := x ;
38810: LD_ADDR_VAR 0 6
38814: PUSH
38815: LD_VAR 0 4
38819: ST_TO_ADDR
// _y := y ;
38820: LD_ADDR_VAR 0 7
38824: PUSH
38825: LD_VAR 0 5
38829: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38830: LD_ADDR_VAR 0 3
38834: PUSH
38835: LD_INT 1
38837: PPUSH
38838: LD_VAR 0 14
38842: PPUSH
38843: CALL_OW 12
38847: ST_TO_ADDR
// case i of 1 :
38848: LD_VAR 0 3
38852: PUSH
38853: LD_INT 1
38855: DOUBLE
38856: EQUAL
38857: IFTRUE 38861
38859: GO 38878
38861: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38862: LD_VAR 0 1
38866: PPUSH
38867: LD_VAR 0 10
38871: PPUSH
38872: CALL_OW 115
38876: GO 38939
38878: LD_INT 2
38880: DOUBLE
38881: EQUAL
38882: IFTRUE 38886
38884: GO 38908
38886: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38887: LD_VAR 0 1
38891: PPUSH
38892: LD_VAR 0 6
38896: PPUSH
38897: LD_VAR 0 7
38901: PPUSH
38902: CALL_OW 153
38906: GO 38939
38908: LD_INT 3
38910: DOUBLE
38911: EQUAL
38912: IFTRUE 38916
38914: GO 38938
38916: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38917: LD_VAR 0 1
38921: PPUSH
38922: LD_VAR 0 6
38926: PPUSH
38927: LD_VAR 0 7
38931: PPUSH
38932: CALL_OW 154
38936: GO 38939
38938: POP
// end ;
38939: LD_VAR 0 2
38943: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38944: LD_INT 0
38946: PPUSH
38947: PPUSH
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
// if not unit or not building then
38952: LD_VAR 0 1
38956: NOT
38957: PUSH
38958: LD_VAR 0 2
38962: NOT
38963: OR
38964: IFFALSE 38968
// exit ;
38966: GO 39126
// x := GetX ( building ) ;
38968: LD_ADDR_VAR 0 5
38972: PUSH
38973: LD_VAR 0 2
38977: PPUSH
38978: CALL_OW 250
38982: ST_TO_ADDR
// y := GetY ( building ) ;
38983: LD_ADDR_VAR 0 6
38987: PUSH
38988: LD_VAR 0 2
38992: PPUSH
38993: CALL_OW 251
38997: ST_TO_ADDR
// for i = 0 to 5 do
38998: LD_ADDR_VAR 0 4
39002: PUSH
39003: DOUBLE
39004: LD_INT 0
39006: DEC
39007: ST_TO_ADDR
39008: LD_INT 5
39010: PUSH
39011: FOR_TO
39012: IFFALSE 39124
// begin _x := ShiftX ( x , i , 3 ) ;
39014: LD_ADDR_VAR 0 7
39018: PUSH
39019: LD_VAR 0 5
39023: PPUSH
39024: LD_VAR 0 4
39028: PPUSH
39029: LD_INT 3
39031: PPUSH
39032: CALL_OW 272
39036: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39037: LD_ADDR_VAR 0 8
39041: PUSH
39042: LD_VAR 0 6
39046: PPUSH
39047: LD_VAR 0 4
39051: PPUSH
39052: LD_INT 3
39054: PPUSH
39055: CALL_OW 273
39059: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39060: LD_VAR 0 7
39064: PPUSH
39065: LD_VAR 0 8
39069: PPUSH
39070: CALL_OW 488
39074: NOT
39075: IFFALSE 39079
// continue ;
39077: GO 39011
// if HexInfo ( _x , _y ) = 0 then
39079: LD_VAR 0 7
39083: PPUSH
39084: LD_VAR 0 8
39088: PPUSH
39089: CALL_OW 428
39093: PUSH
39094: LD_INT 0
39096: EQUAL
39097: IFFALSE 39122
// begin ComMoveXY ( unit , _x , _y ) ;
39099: LD_VAR 0 1
39103: PPUSH
39104: LD_VAR 0 7
39108: PPUSH
39109: LD_VAR 0 8
39113: PPUSH
39114: CALL_OW 111
// exit ;
39118: POP
39119: POP
39120: GO 39126
// end ; end ;
39122: GO 39011
39124: POP
39125: POP
// end ;
39126: LD_VAR 0 3
39130: RET
// export function ScanBase ( side , base_area ) ; begin
39131: LD_INT 0
39133: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39134: LD_ADDR_VAR 0 3
39138: PUSH
39139: LD_VAR 0 2
39143: PPUSH
39144: LD_INT 81
39146: PUSH
39147: LD_VAR 0 1
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PPUSH
39156: CALL_OW 70
39160: ST_TO_ADDR
// end ;
39161: LD_VAR 0 3
39165: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39166: LD_INT 0
39168: PPUSH
39169: PPUSH
39170: PPUSH
39171: PPUSH
// result := false ;
39172: LD_ADDR_VAR 0 2
39176: PUSH
39177: LD_INT 0
39179: ST_TO_ADDR
// side := GetSide ( unit ) ;
39180: LD_ADDR_VAR 0 3
39184: PUSH
39185: LD_VAR 0 1
39189: PPUSH
39190: CALL_OW 255
39194: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39195: LD_ADDR_VAR 0 4
39199: PUSH
39200: LD_VAR 0 1
39204: PPUSH
39205: CALL_OW 248
39209: ST_TO_ADDR
// case nat of 1 :
39210: LD_VAR 0 4
39214: PUSH
39215: LD_INT 1
39217: DOUBLE
39218: EQUAL
39219: IFTRUE 39223
39221: GO 39234
39223: POP
// tech := tech_lassight ; 2 :
39224: LD_ADDR_VAR 0 5
39228: PUSH
39229: LD_INT 12
39231: ST_TO_ADDR
39232: GO 39273
39234: LD_INT 2
39236: DOUBLE
39237: EQUAL
39238: IFTRUE 39242
39240: GO 39253
39242: POP
// tech := tech_mortar ; 3 :
39243: LD_ADDR_VAR 0 5
39247: PUSH
39248: LD_INT 41
39250: ST_TO_ADDR
39251: GO 39273
39253: LD_INT 3
39255: DOUBLE
39256: EQUAL
39257: IFTRUE 39261
39259: GO 39272
39261: POP
// tech := tech_bazooka ; end ;
39262: LD_ADDR_VAR 0 5
39266: PUSH
39267: LD_INT 44
39269: ST_TO_ADDR
39270: GO 39273
39272: POP
// if Researched ( side , tech ) then
39273: LD_VAR 0 3
39277: PPUSH
39278: LD_VAR 0 5
39282: PPUSH
39283: CALL_OW 325
39287: IFFALSE 39314
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39289: LD_ADDR_VAR 0 2
39293: PUSH
39294: LD_INT 5
39296: PUSH
39297: LD_INT 8
39299: PUSH
39300: LD_INT 9
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: PUSH
39308: LD_VAR 0 4
39312: ARRAY
39313: ST_TO_ADDR
// end ;
39314: LD_VAR 0 2
39318: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39319: LD_INT 0
39321: PPUSH
39322: PPUSH
39323: PPUSH
// if not mines then
39324: LD_VAR 0 2
39328: NOT
39329: IFFALSE 39333
// exit ;
39331: GO 39477
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39333: LD_ADDR_VAR 0 5
39337: PUSH
39338: LD_INT 81
39340: PUSH
39341: LD_VAR 0 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 3
39352: PUSH
39353: LD_INT 21
39355: PUSH
39356: LD_INT 3
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PPUSH
39371: CALL_OW 69
39375: ST_TO_ADDR
// for i in mines do
39376: LD_ADDR_VAR 0 4
39380: PUSH
39381: LD_VAR 0 2
39385: PUSH
39386: FOR_IN
39387: IFFALSE 39475
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39389: LD_VAR 0 4
39393: PUSH
39394: LD_INT 1
39396: ARRAY
39397: PPUSH
39398: LD_VAR 0 4
39402: PUSH
39403: LD_INT 2
39405: ARRAY
39406: PPUSH
39407: CALL_OW 458
39411: NOT
39412: IFFALSE 39416
// continue ;
39414: GO 39386
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39416: LD_VAR 0 4
39420: PUSH
39421: LD_INT 1
39423: ARRAY
39424: PPUSH
39425: LD_VAR 0 4
39429: PUSH
39430: LD_INT 2
39432: ARRAY
39433: PPUSH
39434: CALL_OW 428
39438: PUSH
39439: LD_VAR 0 5
39443: IN
39444: IFFALSE 39473
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39446: LD_VAR 0 4
39450: PUSH
39451: LD_INT 1
39453: ARRAY
39454: PPUSH
39455: LD_VAR 0 4
39459: PUSH
39460: LD_INT 2
39462: ARRAY
39463: PPUSH
39464: LD_VAR 0 1
39468: PPUSH
39469: CALL_OW 456
// end ;
39473: GO 39386
39475: POP
39476: POP
// end ;
39477: LD_VAR 0 3
39481: RET
// export function Count ( array ) ; var i ; begin
39482: LD_INT 0
39484: PPUSH
39485: PPUSH
// result := 0 ;
39486: LD_ADDR_VAR 0 2
39490: PUSH
39491: LD_INT 0
39493: ST_TO_ADDR
// for i in array do
39494: LD_ADDR_VAR 0 3
39498: PUSH
39499: LD_VAR 0 1
39503: PUSH
39504: FOR_IN
39505: IFFALSE 39529
// if i then
39507: LD_VAR 0 3
39511: IFFALSE 39527
// result := result + 1 ;
39513: LD_ADDR_VAR 0 2
39517: PUSH
39518: LD_VAR 0 2
39522: PUSH
39523: LD_INT 1
39525: PLUS
39526: ST_TO_ADDR
39527: GO 39504
39529: POP
39530: POP
// end ;
39531: LD_VAR 0 2
39535: RET
// export function IsEmpty ( building ) ; begin
39536: LD_INT 0
39538: PPUSH
// if not building then
39539: LD_VAR 0 1
39543: NOT
39544: IFFALSE 39548
// exit ;
39546: GO 39591
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39548: LD_ADDR_VAR 0 2
39552: PUSH
39553: LD_VAR 0 1
39557: PUSH
39558: LD_INT 22
39560: PUSH
39561: LD_VAR 0 1
39565: PPUSH
39566: CALL_OW 255
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 58
39577: PUSH
39578: EMPTY
39579: LIST
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PPUSH
39585: CALL_OW 69
39589: IN
39590: ST_TO_ADDR
// end ;
39591: LD_VAR 0 2
39595: RET
// export function IsNotFull ( building ) ; begin
39596: LD_INT 0
39598: PPUSH
// if not building then
39599: LD_VAR 0 1
39603: NOT
39604: IFFALSE 39608
// exit ;
39606: GO 39627
// result := UnitsInside ( building ) < 6 ;
39608: LD_ADDR_VAR 0 2
39612: PUSH
39613: LD_VAR 0 1
39617: PPUSH
39618: CALL_OW 313
39622: PUSH
39623: LD_INT 6
39625: LESS
39626: ST_TO_ADDR
// end ;
39627: LD_VAR 0 2
39631: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39632: LD_INT 0
39634: PPUSH
39635: PPUSH
39636: PPUSH
39637: PPUSH
// tmp := [ ] ;
39638: LD_ADDR_VAR 0 3
39642: PUSH
39643: EMPTY
39644: ST_TO_ADDR
// list := [ ] ;
39645: LD_ADDR_VAR 0 5
39649: PUSH
39650: EMPTY
39651: ST_TO_ADDR
// for i = 16 to 25 do
39652: LD_ADDR_VAR 0 4
39656: PUSH
39657: DOUBLE
39658: LD_INT 16
39660: DEC
39661: ST_TO_ADDR
39662: LD_INT 25
39664: PUSH
39665: FOR_TO
39666: IFFALSE 39739
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39668: LD_ADDR_VAR 0 3
39672: PUSH
39673: LD_VAR 0 3
39677: PUSH
39678: LD_INT 22
39680: PUSH
39681: LD_VAR 0 1
39685: PPUSH
39686: CALL_OW 255
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 91
39697: PUSH
39698: LD_VAR 0 1
39702: PUSH
39703: LD_INT 6
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 30
39713: PUSH
39714: LD_VAR 0 4
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: LIST
39727: PUSH
39728: EMPTY
39729: LIST
39730: PPUSH
39731: CALL_OW 69
39735: ADD
39736: ST_TO_ADDR
39737: GO 39665
39739: POP
39740: POP
// for i = 1 to tmp do
39741: LD_ADDR_VAR 0 4
39745: PUSH
39746: DOUBLE
39747: LD_INT 1
39749: DEC
39750: ST_TO_ADDR
39751: LD_VAR 0 3
39755: PUSH
39756: FOR_TO
39757: IFFALSE 39845
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39759: LD_ADDR_VAR 0 5
39763: PUSH
39764: LD_VAR 0 5
39768: PUSH
39769: LD_VAR 0 3
39773: PUSH
39774: LD_VAR 0 4
39778: ARRAY
39779: PPUSH
39780: CALL_OW 266
39784: PUSH
39785: LD_VAR 0 3
39789: PUSH
39790: LD_VAR 0 4
39794: ARRAY
39795: PPUSH
39796: CALL_OW 250
39800: PUSH
39801: LD_VAR 0 3
39805: PUSH
39806: LD_VAR 0 4
39810: ARRAY
39811: PPUSH
39812: CALL_OW 251
39816: PUSH
39817: LD_VAR 0 3
39821: PUSH
39822: LD_VAR 0 4
39826: ARRAY
39827: PPUSH
39828: CALL_OW 254
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: PUSH
39839: EMPTY
39840: LIST
39841: ADD
39842: ST_TO_ADDR
39843: GO 39756
39845: POP
39846: POP
// result := list ;
39847: LD_ADDR_VAR 0 2
39851: PUSH
39852: LD_VAR 0 5
39856: ST_TO_ADDR
// end ;
39857: LD_VAR 0 2
39861: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39862: LD_INT 0
39864: PPUSH
39865: PPUSH
39866: PPUSH
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
// if not factory then
39871: LD_VAR 0 1
39875: NOT
39876: IFFALSE 39880
// exit ;
39878: GO 40473
// if control = control_apeman then
39880: LD_VAR 0 4
39884: PUSH
39885: LD_INT 5
39887: EQUAL
39888: IFFALSE 39997
// begin tmp := UnitsInside ( factory ) ;
39890: LD_ADDR_VAR 0 8
39894: PUSH
39895: LD_VAR 0 1
39899: PPUSH
39900: CALL_OW 313
39904: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39905: LD_VAR 0 8
39909: PPUSH
39910: LD_INT 25
39912: PUSH
39913: LD_INT 12
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PPUSH
39920: CALL_OW 72
39924: NOT
39925: IFFALSE 39935
// control := control_manual ;
39927: LD_ADDR_VAR 0 4
39931: PUSH
39932: LD_INT 1
39934: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39935: LD_ADDR_VAR 0 8
39939: PUSH
39940: LD_VAR 0 1
39944: PPUSH
39945: CALL 39632 0 1
39949: ST_TO_ADDR
// if tmp then
39950: LD_VAR 0 8
39954: IFFALSE 39997
// begin for i in tmp do
39956: LD_ADDR_VAR 0 7
39960: PUSH
39961: LD_VAR 0 8
39965: PUSH
39966: FOR_IN
39967: IFFALSE 39995
// if i [ 1 ] = b_ext_radio then
39969: LD_VAR 0 7
39973: PUSH
39974: LD_INT 1
39976: ARRAY
39977: PUSH
39978: LD_INT 22
39980: EQUAL
39981: IFFALSE 39993
// begin control := control_remote ;
39983: LD_ADDR_VAR 0 4
39987: PUSH
39988: LD_INT 2
39990: ST_TO_ADDR
// break ;
39991: GO 39995
// end ;
39993: GO 39966
39995: POP
39996: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39997: LD_VAR 0 1
40001: PPUSH
40002: LD_VAR 0 2
40006: PPUSH
40007: LD_VAR 0 3
40011: PPUSH
40012: LD_VAR 0 4
40016: PPUSH
40017: LD_VAR 0 5
40021: PPUSH
40022: CALL_OW 448
40026: IFFALSE 40061
// begin result := [ chassis , engine , control , weapon ] ;
40028: LD_ADDR_VAR 0 6
40032: PUSH
40033: LD_VAR 0 2
40037: PUSH
40038: LD_VAR 0 3
40042: PUSH
40043: LD_VAR 0 4
40047: PUSH
40048: LD_VAR 0 5
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: ST_TO_ADDR
// exit ;
40059: GO 40473
// end ; _chassis := AvailableChassisList ( factory ) ;
40061: LD_ADDR_VAR 0 9
40065: PUSH
40066: LD_VAR 0 1
40070: PPUSH
40071: CALL_OW 475
40075: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40076: LD_ADDR_VAR 0 11
40080: PUSH
40081: LD_VAR 0 1
40085: PPUSH
40086: CALL_OW 476
40090: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40091: LD_ADDR_VAR 0 12
40095: PUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL_OW 477
40105: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40106: LD_ADDR_VAR 0 10
40110: PUSH
40111: LD_VAR 0 1
40115: PPUSH
40116: CALL_OW 478
40120: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40121: LD_VAR 0 9
40125: NOT
40126: PUSH
40127: LD_VAR 0 11
40131: NOT
40132: OR
40133: PUSH
40134: LD_VAR 0 12
40138: NOT
40139: OR
40140: PUSH
40141: LD_VAR 0 10
40145: NOT
40146: OR
40147: IFFALSE 40182
// begin result := [ chassis , engine , control , weapon ] ;
40149: LD_ADDR_VAR 0 6
40153: PUSH
40154: LD_VAR 0 2
40158: PUSH
40159: LD_VAR 0 3
40163: PUSH
40164: LD_VAR 0 4
40168: PUSH
40169: LD_VAR 0 5
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: ST_TO_ADDR
// exit ;
40180: GO 40473
// end ; if not chassis in _chassis then
40182: LD_VAR 0 2
40186: PUSH
40187: LD_VAR 0 9
40191: IN
40192: NOT
40193: IFFALSE 40219
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40195: LD_ADDR_VAR 0 2
40199: PUSH
40200: LD_VAR 0 9
40204: PUSH
40205: LD_INT 1
40207: PPUSH
40208: LD_VAR 0 9
40212: PPUSH
40213: CALL_OW 12
40217: ARRAY
40218: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40219: LD_VAR 0 2
40223: PPUSH
40224: LD_VAR 0 3
40228: PPUSH
40229: CALL 40478 0 2
40233: NOT
40234: IFFALSE 40293
// repeat engine := _engine [ 1 ] ;
40236: LD_ADDR_VAR 0 3
40240: PUSH
40241: LD_VAR 0 11
40245: PUSH
40246: LD_INT 1
40248: ARRAY
40249: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40250: LD_ADDR_VAR 0 11
40254: PUSH
40255: LD_VAR 0 11
40259: PPUSH
40260: LD_INT 1
40262: PPUSH
40263: CALL_OW 3
40267: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40268: LD_VAR 0 2
40272: PPUSH
40273: LD_VAR 0 3
40277: PPUSH
40278: CALL 40478 0 2
40282: PUSH
40283: LD_VAR 0 11
40287: PUSH
40288: EMPTY
40289: EQUAL
40290: OR
40291: IFFALSE 40236
// if not control in _control then
40293: LD_VAR 0 4
40297: PUSH
40298: LD_VAR 0 12
40302: IN
40303: NOT
40304: IFFALSE 40330
// control := _control [ rand ( 1 , _control ) ] ;
40306: LD_ADDR_VAR 0 4
40310: PUSH
40311: LD_VAR 0 12
40315: PUSH
40316: LD_INT 1
40318: PPUSH
40319: LD_VAR 0 12
40323: PPUSH
40324: CALL_OW 12
40328: ARRAY
40329: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40330: LD_VAR 0 2
40334: PPUSH
40335: LD_VAR 0 5
40339: PPUSH
40340: CALL 40698 0 2
40344: NOT
40345: IFFALSE 40404
// repeat weapon := _weapon [ 1 ] ;
40347: LD_ADDR_VAR 0 5
40351: PUSH
40352: LD_VAR 0 10
40356: PUSH
40357: LD_INT 1
40359: ARRAY
40360: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40361: LD_ADDR_VAR 0 10
40365: PUSH
40366: LD_VAR 0 10
40370: PPUSH
40371: LD_INT 1
40373: PPUSH
40374: CALL_OW 3
40378: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40379: LD_VAR 0 2
40383: PPUSH
40384: LD_VAR 0 5
40388: PPUSH
40389: CALL 40698 0 2
40393: PUSH
40394: LD_VAR 0 10
40398: PUSH
40399: EMPTY
40400: EQUAL
40401: OR
40402: IFFALSE 40347
// result := [ ] ;
40404: LD_ADDR_VAR 0 6
40408: PUSH
40409: EMPTY
40410: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40411: LD_VAR 0 1
40415: PPUSH
40416: LD_VAR 0 2
40420: PPUSH
40421: LD_VAR 0 3
40425: PPUSH
40426: LD_VAR 0 4
40430: PPUSH
40431: LD_VAR 0 5
40435: PPUSH
40436: CALL_OW 448
40440: IFFALSE 40473
// result := [ chassis , engine , control , weapon ] ;
40442: LD_ADDR_VAR 0 6
40446: PUSH
40447: LD_VAR 0 2
40451: PUSH
40452: LD_VAR 0 3
40456: PUSH
40457: LD_VAR 0 4
40461: PUSH
40462: LD_VAR 0 5
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: ST_TO_ADDR
// end ;
40473: LD_VAR 0 6
40477: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40478: LD_INT 0
40480: PPUSH
// if not chassis or not engine then
40481: LD_VAR 0 1
40485: NOT
40486: PUSH
40487: LD_VAR 0 2
40491: NOT
40492: OR
40493: IFFALSE 40497
// exit ;
40495: GO 40693
// case engine of engine_solar :
40497: LD_VAR 0 2
40501: PUSH
40502: LD_INT 2
40504: DOUBLE
40505: EQUAL
40506: IFTRUE 40510
40508: GO 40548
40510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40511: LD_ADDR_VAR 0 3
40515: PUSH
40516: LD_INT 11
40518: PUSH
40519: LD_INT 12
40521: PUSH
40522: LD_INT 13
40524: PUSH
40525: LD_INT 14
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: LD_INT 3
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: ST_TO_ADDR
40546: GO 40677
40548: LD_INT 1
40550: DOUBLE
40551: EQUAL
40552: IFTRUE 40556
40554: GO 40618
40556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40557: LD_ADDR_VAR 0 3
40561: PUSH
40562: LD_INT 11
40564: PUSH
40565: LD_INT 12
40567: PUSH
40568: LD_INT 13
40570: PUSH
40571: LD_INT 14
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: LD_INT 3
40582: PUSH
40583: LD_INT 4
40585: PUSH
40586: LD_INT 5
40588: PUSH
40589: LD_INT 21
40591: PUSH
40592: LD_INT 23
40594: PUSH
40595: LD_INT 22
40597: PUSH
40598: LD_INT 24
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: ST_TO_ADDR
40616: GO 40677
40618: LD_INT 3
40620: DOUBLE
40621: EQUAL
40622: IFTRUE 40626
40624: GO 40676
40626: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40627: LD_ADDR_VAR 0 3
40631: PUSH
40632: LD_INT 13
40634: PUSH
40635: LD_INT 14
40637: PUSH
40638: LD_INT 2
40640: PUSH
40641: LD_INT 3
40643: PUSH
40644: LD_INT 4
40646: PUSH
40647: LD_INT 5
40649: PUSH
40650: LD_INT 21
40652: PUSH
40653: LD_INT 22
40655: PUSH
40656: LD_INT 23
40658: PUSH
40659: LD_INT 24
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: ST_TO_ADDR
40674: GO 40677
40676: POP
// result := ( chassis in result ) ;
40677: LD_ADDR_VAR 0 3
40681: PUSH
40682: LD_VAR 0 1
40686: PUSH
40687: LD_VAR 0 3
40691: IN
40692: ST_TO_ADDR
// end ;
40693: LD_VAR 0 3
40697: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40698: LD_INT 0
40700: PPUSH
// if not chassis or not weapon then
40701: LD_VAR 0 1
40705: NOT
40706: PUSH
40707: LD_VAR 0 2
40711: NOT
40712: OR
40713: IFFALSE 40717
// exit ;
40715: GO 41779
// case weapon of us_machine_gun :
40717: LD_VAR 0 2
40721: PUSH
40722: LD_INT 2
40724: DOUBLE
40725: EQUAL
40726: IFTRUE 40730
40728: GO 40760
40730: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40731: LD_ADDR_VAR 0 3
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: LD_INT 3
40744: PUSH
40745: LD_INT 4
40747: PUSH
40748: LD_INT 5
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
40758: GO 41763
40760: LD_INT 3
40762: DOUBLE
40763: EQUAL
40764: IFTRUE 40768
40766: GO 40798
40768: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40769: LD_ADDR_VAR 0 3
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 3
40782: PUSH
40783: LD_INT 4
40785: PUSH
40786: LD_INT 5
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: ST_TO_ADDR
40796: GO 41763
40798: LD_INT 11
40800: DOUBLE
40801: EQUAL
40802: IFTRUE 40806
40804: GO 40836
40806: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40807: LD_ADDR_VAR 0 3
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: LD_INT 2
40817: PUSH
40818: LD_INT 3
40820: PUSH
40821: LD_INT 4
40823: PUSH
40824: LD_INT 5
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: ST_TO_ADDR
40834: GO 41763
40836: LD_INT 4
40838: DOUBLE
40839: EQUAL
40840: IFTRUE 40844
40842: GO 40870
40844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40845: LD_ADDR_VAR 0 3
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: LD_INT 3
40855: PUSH
40856: LD_INT 4
40858: PUSH
40859: LD_INT 5
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: ST_TO_ADDR
40868: GO 41763
40870: LD_INT 5
40872: DOUBLE
40873: EQUAL
40874: IFTRUE 40878
40876: GO 40904
40878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40879: LD_ADDR_VAR 0 3
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 3
40889: PUSH
40890: LD_INT 4
40892: PUSH
40893: LD_INT 5
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
40902: GO 41763
40904: LD_INT 9
40906: DOUBLE
40907: EQUAL
40908: IFTRUE 40912
40910: GO 40938
40912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40913: LD_ADDR_VAR 0 3
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: LD_INT 3
40923: PUSH
40924: LD_INT 4
40926: PUSH
40927: LD_INT 5
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: ST_TO_ADDR
40936: GO 41763
40938: LD_INT 7
40940: DOUBLE
40941: EQUAL
40942: IFTRUE 40946
40944: GO 40972
40946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40947: LD_ADDR_VAR 0 3
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 3
40957: PUSH
40958: LD_INT 4
40960: PUSH
40961: LD_INT 5
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: ST_TO_ADDR
40970: GO 41763
40972: LD_INT 12
40974: DOUBLE
40975: EQUAL
40976: IFTRUE 40980
40978: GO 41006
40980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40981: LD_ADDR_VAR 0 3
40985: PUSH
40986: LD_INT 2
40988: PUSH
40989: LD_INT 3
40991: PUSH
40992: LD_INT 4
40994: PUSH
40995: LD_INT 5
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: ST_TO_ADDR
41004: GO 41763
41006: LD_INT 13
41008: DOUBLE
41009: EQUAL
41010: IFTRUE 41014
41012: GO 41040
41014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41015: LD_ADDR_VAR 0 3
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: LD_INT 3
41025: PUSH
41026: LD_INT 4
41028: PUSH
41029: LD_INT 5
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: ST_TO_ADDR
41038: GO 41763
41040: LD_INT 14
41042: DOUBLE
41043: EQUAL
41044: IFTRUE 41048
41046: GO 41066
41048: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41049: LD_ADDR_VAR 0 3
41053: PUSH
41054: LD_INT 4
41056: PUSH
41057: LD_INT 5
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: ST_TO_ADDR
41064: GO 41763
41066: LD_INT 6
41068: DOUBLE
41069: EQUAL
41070: IFTRUE 41074
41072: GO 41092
41074: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41075: LD_ADDR_VAR 0 3
41079: PUSH
41080: LD_INT 4
41082: PUSH
41083: LD_INT 5
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: ST_TO_ADDR
41090: GO 41763
41092: LD_INT 10
41094: DOUBLE
41095: EQUAL
41096: IFTRUE 41100
41098: GO 41118
41100: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41101: LD_ADDR_VAR 0 3
41105: PUSH
41106: LD_INT 4
41108: PUSH
41109: LD_INT 5
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: ST_TO_ADDR
41116: GO 41763
41118: LD_INT 22
41120: DOUBLE
41121: EQUAL
41122: IFTRUE 41126
41124: GO 41152
41126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41127: LD_ADDR_VAR 0 3
41131: PUSH
41132: LD_INT 11
41134: PUSH
41135: LD_INT 12
41137: PUSH
41138: LD_INT 13
41140: PUSH
41141: LD_INT 14
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: ST_TO_ADDR
41150: GO 41763
41152: LD_INT 23
41154: DOUBLE
41155: EQUAL
41156: IFTRUE 41160
41158: GO 41186
41160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41161: LD_ADDR_VAR 0 3
41165: PUSH
41166: LD_INT 11
41168: PUSH
41169: LD_INT 12
41171: PUSH
41172: LD_INT 13
41174: PUSH
41175: LD_INT 14
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: ST_TO_ADDR
41184: GO 41763
41186: LD_INT 24
41188: DOUBLE
41189: EQUAL
41190: IFTRUE 41194
41192: GO 41220
41194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41195: LD_ADDR_VAR 0 3
41199: PUSH
41200: LD_INT 11
41202: PUSH
41203: LD_INT 12
41205: PUSH
41206: LD_INT 13
41208: PUSH
41209: LD_INT 14
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: ST_TO_ADDR
41218: GO 41763
41220: LD_INT 30
41222: DOUBLE
41223: EQUAL
41224: IFTRUE 41228
41226: GO 41254
41228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41229: LD_ADDR_VAR 0 3
41233: PUSH
41234: LD_INT 11
41236: PUSH
41237: LD_INT 12
41239: PUSH
41240: LD_INT 13
41242: PUSH
41243: LD_INT 14
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: ST_TO_ADDR
41252: GO 41763
41254: LD_INT 25
41256: DOUBLE
41257: EQUAL
41258: IFTRUE 41262
41260: GO 41280
41262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41263: LD_ADDR_VAR 0 3
41267: PUSH
41268: LD_INT 13
41270: PUSH
41271: LD_INT 14
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: ST_TO_ADDR
41278: GO 41763
41280: LD_INT 27
41282: DOUBLE
41283: EQUAL
41284: IFTRUE 41288
41286: GO 41306
41288: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41289: LD_ADDR_VAR 0 3
41293: PUSH
41294: LD_INT 13
41296: PUSH
41297: LD_INT 14
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: ST_TO_ADDR
41304: GO 41763
41306: LD_EXP 53
41310: DOUBLE
41311: EQUAL
41312: IFTRUE 41316
41314: GO 41342
41316: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41317: LD_ADDR_VAR 0 3
41321: PUSH
41322: LD_INT 11
41324: PUSH
41325: LD_INT 12
41327: PUSH
41328: LD_INT 13
41330: PUSH
41331: LD_INT 14
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: ST_TO_ADDR
41340: GO 41763
41342: LD_INT 28
41344: DOUBLE
41345: EQUAL
41346: IFTRUE 41350
41348: GO 41368
41350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41351: LD_ADDR_VAR 0 3
41355: PUSH
41356: LD_INT 13
41358: PUSH
41359: LD_INT 14
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: ST_TO_ADDR
41366: GO 41763
41368: LD_INT 29
41370: DOUBLE
41371: EQUAL
41372: IFTRUE 41376
41374: GO 41394
41376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41377: LD_ADDR_VAR 0 3
41381: PUSH
41382: LD_INT 13
41384: PUSH
41385: LD_INT 14
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: ST_TO_ADDR
41392: GO 41763
41394: LD_INT 31
41396: DOUBLE
41397: EQUAL
41398: IFTRUE 41402
41400: GO 41420
41402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41403: LD_ADDR_VAR 0 3
41407: PUSH
41408: LD_INT 13
41410: PUSH
41411: LD_INT 14
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: ST_TO_ADDR
41418: GO 41763
41420: LD_INT 26
41422: DOUBLE
41423: EQUAL
41424: IFTRUE 41428
41426: GO 41446
41428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41429: LD_ADDR_VAR 0 3
41433: PUSH
41434: LD_INT 13
41436: PUSH
41437: LD_INT 14
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: ST_TO_ADDR
41444: GO 41763
41446: LD_INT 42
41448: DOUBLE
41449: EQUAL
41450: IFTRUE 41454
41452: GO 41480
41454: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41455: LD_ADDR_VAR 0 3
41459: PUSH
41460: LD_INT 21
41462: PUSH
41463: LD_INT 22
41465: PUSH
41466: LD_INT 23
41468: PUSH
41469: LD_INT 24
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: ST_TO_ADDR
41478: GO 41763
41480: LD_INT 43
41482: DOUBLE
41483: EQUAL
41484: IFTRUE 41488
41486: GO 41514
41488: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41489: LD_ADDR_VAR 0 3
41493: PUSH
41494: LD_INT 21
41496: PUSH
41497: LD_INT 22
41499: PUSH
41500: LD_INT 23
41502: PUSH
41503: LD_INT 24
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: ST_TO_ADDR
41512: GO 41763
41514: LD_INT 44
41516: DOUBLE
41517: EQUAL
41518: IFTRUE 41522
41520: GO 41548
41522: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41523: LD_ADDR_VAR 0 3
41527: PUSH
41528: LD_INT 21
41530: PUSH
41531: LD_INT 22
41533: PUSH
41534: LD_INT 23
41536: PUSH
41537: LD_INT 24
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: ST_TO_ADDR
41546: GO 41763
41548: LD_INT 45
41550: DOUBLE
41551: EQUAL
41552: IFTRUE 41556
41554: GO 41582
41556: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41557: LD_ADDR_VAR 0 3
41561: PUSH
41562: LD_INT 21
41564: PUSH
41565: LD_INT 22
41567: PUSH
41568: LD_INT 23
41570: PUSH
41571: LD_INT 24
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: ST_TO_ADDR
41580: GO 41763
41582: LD_INT 49
41584: DOUBLE
41585: EQUAL
41586: IFTRUE 41590
41588: GO 41616
41590: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41591: LD_ADDR_VAR 0 3
41595: PUSH
41596: LD_INT 21
41598: PUSH
41599: LD_INT 22
41601: PUSH
41602: LD_INT 23
41604: PUSH
41605: LD_INT 24
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: ST_TO_ADDR
41614: GO 41763
41616: LD_INT 51
41618: DOUBLE
41619: EQUAL
41620: IFTRUE 41624
41622: GO 41650
41624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41625: LD_ADDR_VAR 0 3
41629: PUSH
41630: LD_INT 21
41632: PUSH
41633: LD_INT 22
41635: PUSH
41636: LD_INT 23
41638: PUSH
41639: LD_INT 24
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: ST_TO_ADDR
41648: GO 41763
41650: LD_INT 52
41652: DOUBLE
41653: EQUAL
41654: IFTRUE 41658
41656: GO 41684
41658: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41659: LD_ADDR_VAR 0 3
41663: PUSH
41664: LD_INT 21
41666: PUSH
41667: LD_INT 22
41669: PUSH
41670: LD_INT 23
41672: PUSH
41673: LD_INT 24
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: ST_TO_ADDR
41682: GO 41763
41684: LD_INT 53
41686: DOUBLE
41687: EQUAL
41688: IFTRUE 41692
41690: GO 41710
41692: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41693: LD_ADDR_VAR 0 3
41697: PUSH
41698: LD_INT 23
41700: PUSH
41701: LD_INT 24
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: ST_TO_ADDR
41708: GO 41763
41710: LD_INT 46
41712: DOUBLE
41713: EQUAL
41714: IFTRUE 41718
41716: GO 41736
41718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41719: LD_ADDR_VAR 0 3
41723: PUSH
41724: LD_INT 23
41726: PUSH
41727: LD_INT 24
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: ST_TO_ADDR
41734: GO 41763
41736: LD_INT 47
41738: DOUBLE
41739: EQUAL
41740: IFTRUE 41744
41742: GO 41762
41744: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41745: LD_ADDR_VAR 0 3
41749: PUSH
41750: LD_INT 23
41752: PUSH
41753: LD_INT 24
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: ST_TO_ADDR
41760: GO 41763
41762: POP
// result := ( chassis in result ) ;
41763: LD_ADDR_VAR 0 3
41767: PUSH
41768: LD_VAR 0 1
41772: PUSH
41773: LD_VAR 0 3
41777: IN
41778: ST_TO_ADDR
// end ;
41779: LD_VAR 0 3
41783: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41784: LD_INT 0
41786: PPUSH
41787: PPUSH
41788: PPUSH
41789: PPUSH
41790: PPUSH
41791: PPUSH
41792: PPUSH
// result := array ;
41793: LD_ADDR_VAR 0 5
41797: PUSH
41798: LD_VAR 0 1
41802: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41803: LD_VAR 0 1
41807: NOT
41808: PUSH
41809: LD_VAR 0 2
41813: NOT
41814: OR
41815: PUSH
41816: LD_VAR 0 3
41820: NOT
41821: OR
41822: PUSH
41823: LD_VAR 0 2
41827: PUSH
41828: LD_VAR 0 1
41832: GREATER
41833: OR
41834: PUSH
41835: LD_VAR 0 3
41839: PUSH
41840: LD_VAR 0 1
41844: GREATER
41845: OR
41846: IFFALSE 41850
// exit ;
41848: GO 42146
// if direction then
41850: LD_VAR 0 4
41854: IFFALSE 41918
// begin d := 1 ;
41856: LD_ADDR_VAR 0 9
41860: PUSH
41861: LD_INT 1
41863: ST_TO_ADDR
// if i_from > i_to then
41864: LD_VAR 0 2
41868: PUSH
41869: LD_VAR 0 3
41873: GREATER
41874: IFFALSE 41900
// length := ( array - i_from ) + i_to else
41876: LD_ADDR_VAR 0 11
41880: PUSH
41881: LD_VAR 0 1
41885: PUSH
41886: LD_VAR 0 2
41890: MINUS
41891: PUSH
41892: LD_VAR 0 3
41896: PLUS
41897: ST_TO_ADDR
41898: GO 41916
// length := i_to - i_from ;
41900: LD_ADDR_VAR 0 11
41904: PUSH
41905: LD_VAR 0 3
41909: PUSH
41910: LD_VAR 0 2
41914: MINUS
41915: ST_TO_ADDR
// end else
41916: GO 41979
// begin d := - 1 ;
41918: LD_ADDR_VAR 0 9
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: ST_TO_ADDR
// if i_from > i_to then
41927: LD_VAR 0 2
41931: PUSH
41932: LD_VAR 0 3
41936: GREATER
41937: IFFALSE 41957
// length := i_from - i_to else
41939: LD_ADDR_VAR 0 11
41943: PUSH
41944: LD_VAR 0 2
41948: PUSH
41949: LD_VAR 0 3
41953: MINUS
41954: ST_TO_ADDR
41955: GO 41979
// length := ( array - i_to ) + i_from ;
41957: LD_ADDR_VAR 0 11
41961: PUSH
41962: LD_VAR 0 1
41966: PUSH
41967: LD_VAR 0 3
41971: MINUS
41972: PUSH
41973: LD_VAR 0 2
41977: PLUS
41978: ST_TO_ADDR
// end ; if not length then
41979: LD_VAR 0 11
41983: NOT
41984: IFFALSE 41988
// exit ;
41986: GO 42146
// tmp := array ;
41988: LD_ADDR_VAR 0 10
41992: PUSH
41993: LD_VAR 0 1
41997: ST_TO_ADDR
// for i = 1 to length do
41998: LD_ADDR_VAR 0 6
42002: PUSH
42003: DOUBLE
42004: LD_INT 1
42006: DEC
42007: ST_TO_ADDR
42008: LD_VAR 0 11
42012: PUSH
42013: FOR_TO
42014: IFFALSE 42134
// begin for j = 1 to array do
42016: LD_ADDR_VAR 0 7
42020: PUSH
42021: DOUBLE
42022: LD_INT 1
42024: DEC
42025: ST_TO_ADDR
42026: LD_VAR 0 1
42030: PUSH
42031: FOR_TO
42032: IFFALSE 42120
// begin k := j + d ;
42034: LD_ADDR_VAR 0 8
42038: PUSH
42039: LD_VAR 0 7
42043: PUSH
42044: LD_VAR 0 9
42048: PLUS
42049: ST_TO_ADDR
// if k > array then
42050: LD_VAR 0 8
42054: PUSH
42055: LD_VAR 0 1
42059: GREATER
42060: IFFALSE 42070
// k := 1 ;
42062: LD_ADDR_VAR 0 8
42066: PUSH
42067: LD_INT 1
42069: ST_TO_ADDR
// if not k then
42070: LD_VAR 0 8
42074: NOT
42075: IFFALSE 42087
// k := array ;
42077: LD_ADDR_VAR 0 8
42081: PUSH
42082: LD_VAR 0 1
42086: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42087: LD_ADDR_VAR 0 10
42091: PUSH
42092: LD_VAR 0 10
42096: PPUSH
42097: LD_VAR 0 8
42101: PPUSH
42102: LD_VAR 0 1
42106: PUSH
42107: LD_VAR 0 7
42111: ARRAY
42112: PPUSH
42113: CALL_OW 1
42117: ST_TO_ADDR
// end ;
42118: GO 42031
42120: POP
42121: POP
// array := tmp ;
42122: LD_ADDR_VAR 0 1
42126: PUSH
42127: LD_VAR 0 10
42131: ST_TO_ADDR
// end ;
42132: GO 42013
42134: POP
42135: POP
// result := array ;
42136: LD_ADDR_VAR 0 5
42140: PUSH
42141: LD_VAR 0 1
42145: ST_TO_ADDR
// end ;
42146: LD_VAR 0 5
42150: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42151: LD_INT 0
42153: PPUSH
42154: PPUSH
// result := 0 ;
42155: LD_ADDR_VAR 0 3
42159: PUSH
42160: LD_INT 0
42162: ST_TO_ADDR
// if not array or not value in array then
42163: LD_VAR 0 1
42167: NOT
42168: PUSH
42169: LD_VAR 0 2
42173: PUSH
42174: LD_VAR 0 1
42178: IN
42179: NOT
42180: OR
42181: IFFALSE 42185
// exit ;
42183: GO 42239
// for i = 1 to array do
42185: LD_ADDR_VAR 0 4
42189: PUSH
42190: DOUBLE
42191: LD_INT 1
42193: DEC
42194: ST_TO_ADDR
42195: LD_VAR 0 1
42199: PUSH
42200: FOR_TO
42201: IFFALSE 42237
// if value = array [ i ] then
42203: LD_VAR 0 2
42207: PUSH
42208: LD_VAR 0 1
42212: PUSH
42213: LD_VAR 0 4
42217: ARRAY
42218: EQUAL
42219: IFFALSE 42235
// begin result := i ;
42221: LD_ADDR_VAR 0 3
42225: PUSH
42226: LD_VAR 0 4
42230: ST_TO_ADDR
// exit ;
42231: POP
42232: POP
42233: GO 42239
// end ;
42235: GO 42200
42237: POP
42238: POP
// end ;
42239: LD_VAR 0 3
42243: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42244: LD_INT 0
42246: PPUSH
// vc_chassis := chassis ;
42247: LD_ADDR_OWVAR 37
42251: PUSH
42252: LD_VAR 0 1
42256: ST_TO_ADDR
// vc_engine := engine ;
42257: LD_ADDR_OWVAR 39
42261: PUSH
42262: LD_VAR 0 2
42266: ST_TO_ADDR
// vc_control := control ;
42267: LD_ADDR_OWVAR 38
42271: PUSH
42272: LD_VAR 0 3
42276: ST_TO_ADDR
// vc_weapon := weapon ;
42277: LD_ADDR_OWVAR 40
42281: PUSH
42282: LD_VAR 0 4
42286: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42287: LD_ADDR_OWVAR 41
42291: PUSH
42292: LD_VAR 0 5
42296: ST_TO_ADDR
// end ;
42297: LD_VAR 0 6
42301: RET
// export function WantPlant ( unit ) ; var task ; begin
42302: LD_INT 0
42304: PPUSH
42305: PPUSH
// result := false ;
42306: LD_ADDR_VAR 0 2
42310: PUSH
42311: LD_INT 0
42313: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_VAR 0 1
42323: PPUSH
42324: CALL_OW 437
42328: ST_TO_ADDR
// if task then
42329: LD_VAR 0 3
42333: IFFALSE 42361
// if task [ 1 ] [ 1 ] = p then
42335: LD_VAR 0 3
42339: PUSH
42340: LD_INT 1
42342: ARRAY
42343: PUSH
42344: LD_INT 1
42346: ARRAY
42347: PUSH
42348: LD_STRING p
42350: EQUAL
42351: IFFALSE 42361
// result := true ;
42353: LD_ADDR_VAR 0 2
42357: PUSH
42358: LD_INT 1
42360: ST_TO_ADDR
// end ;
42361: LD_VAR 0 2
42365: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42366: LD_INT 0
42368: PPUSH
42369: PPUSH
42370: PPUSH
42371: PPUSH
// if pos < 1 then
42372: LD_VAR 0 2
42376: PUSH
42377: LD_INT 1
42379: LESS
42380: IFFALSE 42384
// exit ;
42382: GO 42687
// if pos = 1 then
42384: LD_VAR 0 2
42388: PUSH
42389: LD_INT 1
42391: EQUAL
42392: IFFALSE 42425
// result := Replace ( arr , pos [ 1 ] , value ) else
42394: LD_ADDR_VAR 0 4
42398: PUSH
42399: LD_VAR 0 1
42403: PPUSH
42404: LD_VAR 0 2
42408: PUSH
42409: LD_INT 1
42411: ARRAY
42412: PPUSH
42413: LD_VAR 0 3
42417: PPUSH
42418: CALL_OW 1
42422: ST_TO_ADDR
42423: GO 42687
// begin tmp := arr ;
42425: LD_ADDR_VAR 0 6
42429: PUSH
42430: LD_VAR 0 1
42434: ST_TO_ADDR
// s_arr := [ tmp ] ;
42435: LD_ADDR_VAR 0 7
42439: PUSH
42440: LD_VAR 0 6
42444: PUSH
42445: EMPTY
42446: LIST
42447: ST_TO_ADDR
// for i = 1 to pos - 1 do
42448: LD_ADDR_VAR 0 5
42452: PUSH
42453: DOUBLE
42454: LD_INT 1
42456: DEC
42457: ST_TO_ADDR
42458: LD_VAR 0 2
42462: PUSH
42463: LD_INT 1
42465: MINUS
42466: PUSH
42467: FOR_TO
42468: IFFALSE 42513
// begin tmp := tmp [ pos [ i ] ] ;
42470: LD_ADDR_VAR 0 6
42474: PUSH
42475: LD_VAR 0 6
42479: PUSH
42480: LD_VAR 0 2
42484: PUSH
42485: LD_VAR 0 5
42489: ARRAY
42490: ARRAY
42491: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42492: LD_ADDR_VAR 0 7
42496: PUSH
42497: LD_VAR 0 7
42501: PUSH
42502: LD_VAR 0 6
42506: PUSH
42507: EMPTY
42508: LIST
42509: ADD
42510: ST_TO_ADDR
// end ;
42511: GO 42467
42513: POP
42514: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42515: LD_ADDR_VAR 0 6
42519: PUSH
42520: LD_VAR 0 6
42524: PPUSH
42525: LD_VAR 0 2
42529: PUSH
42530: LD_VAR 0 2
42534: ARRAY
42535: PPUSH
42536: LD_VAR 0 3
42540: PPUSH
42541: CALL_OW 1
42545: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42546: LD_ADDR_VAR 0 7
42550: PUSH
42551: LD_VAR 0 7
42555: PPUSH
42556: LD_VAR 0 7
42560: PPUSH
42561: LD_VAR 0 6
42565: PPUSH
42566: CALL_OW 1
42570: ST_TO_ADDR
// for i = s_arr downto 2 do
42571: LD_ADDR_VAR 0 5
42575: PUSH
42576: DOUBLE
42577: LD_VAR 0 7
42581: INC
42582: ST_TO_ADDR
42583: LD_INT 2
42585: PUSH
42586: FOR_DOWNTO
42587: IFFALSE 42671
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42589: LD_ADDR_VAR 0 6
42593: PUSH
42594: LD_VAR 0 7
42598: PUSH
42599: LD_VAR 0 5
42603: PUSH
42604: LD_INT 1
42606: MINUS
42607: ARRAY
42608: PPUSH
42609: LD_VAR 0 2
42613: PUSH
42614: LD_VAR 0 5
42618: PUSH
42619: LD_INT 1
42621: MINUS
42622: ARRAY
42623: PPUSH
42624: LD_VAR 0 7
42628: PUSH
42629: LD_VAR 0 5
42633: ARRAY
42634: PPUSH
42635: CALL_OW 1
42639: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42640: LD_ADDR_VAR 0 7
42644: PUSH
42645: LD_VAR 0 7
42649: PPUSH
42650: LD_VAR 0 5
42654: PUSH
42655: LD_INT 1
42657: MINUS
42658: PPUSH
42659: LD_VAR 0 6
42663: PPUSH
42664: CALL_OW 1
42668: ST_TO_ADDR
// end ;
42669: GO 42586
42671: POP
42672: POP
// result := s_arr [ 1 ] ;
42673: LD_ADDR_VAR 0 4
42677: PUSH
42678: LD_VAR 0 7
42682: PUSH
42683: LD_INT 1
42685: ARRAY
42686: ST_TO_ADDR
// end ; end ;
42687: LD_VAR 0 4
42691: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42692: LD_INT 0
42694: PPUSH
42695: PPUSH
// if not list then
42696: LD_VAR 0 1
42700: NOT
42701: IFFALSE 42705
// exit ;
42703: GO 42796
// i := list [ pos1 ] ;
42705: LD_ADDR_VAR 0 5
42709: PUSH
42710: LD_VAR 0 1
42714: PUSH
42715: LD_VAR 0 2
42719: ARRAY
42720: ST_TO_ADDR
// if not i then
42721: LD_VAR 0 5
42725: NOT
42726: IFFALSE 42730
// exit ;
42728: GO 42796
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42730: LD_ADDR_VAR 0 1
42734: PUSH
42735: LD_VAR 0 1
42739: PPUSH
42740: LD_VAR 0 2
42744: PPUSH
42745: LD_VAR 0 1
42749: PUSH
42750: LD_VAR 0 3
42754: ARRAY
42755: PPUSH
42756: CALL_OW 1
42760: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42761: LD_ADDR_VAR 0 1
42765: PUSH
42766: LD_VAR 0 1
42770: PPUSH
42771: LD_VAR 0 3
42775: PPUSH
42776: LD_VAR 0 5
42780: PPUSH
42781: CALL_OW 1
42785: ST_TO_ADDR
// result := list ;
42786: LD_ADDR_VAR 0 4
42790: PUSH
42791: LD_VAR 0 1
42795: ST_TO_ADDR
// end ;
42796: LD_VAR 0 4
42800: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42801: LD_INT 0
42803: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42804: LD_ADDR_VAR 0 5
42808: PUSH
42809: LD_VAR 0 1
42813: PPUSH
42814: CALL_OW 250
42818: PPUSH
42819: LD_VAR 0 1
42823: PPUSH
42824: CALL_OW 251
42828: PPUSH
42829: LD_VAR 0 2
42833: PPUSH
42834: LD_VAR 0 3
42838: PPUSH
42839: LD_VAR 0 4
42843: PPUSH
42844: CALL 42854 0 5
42848: ST_TO_ADDR
// end ;
42849: LD_VAR 0 5
42853: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42854: LD_INT 0
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
// if not list then
42860: LD_VAR 0 3
42864: NOT
42865: IFFALSE 42869
// exit ;
42867: GO 43257
// result := [ ] ;
42869: LD_ADDR_VAR 0 6
42873: PUSH
42874: EMPTY
42875: ST_TO_ADDR
// for i in list do
42876: LD_ADDR_VAR 0 7
42880: PUSH
42881: LD_VAR 0 3
42885: PUSH
42886: FOR_IN
42887: IFFALSE 43089
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42889: LD_ADDR_VAR 0 9
42893: PUSH
42894: LD_VAR 0 7
42898: PPUSH
42899: LD_VAR 0 1
42903: PPUSH
42904: LD_VAR 0 2
42908: PPUSH
42909: CALL_OW 297
42913: ST_TO_ADDR
// if not result then
42914: LD_VAR 0 6
42918: NOT
42919: IFFALSE 42945
// result := [ [ i , tmp ] ] else
42921: LD_ADDR_VAR 0 6
42925: PUSH
42926: LD_VAR 0 7
42930: PUSH
42931: LD_VAR 0 9
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: EMPTY
42941: LIST
42942: ST_TO_ADDR
42943: GO 43087
// begin if result [ result ] [ 2 ] < tmp then
42945: LD_VAR 0 6
42949: PUSH
42950: LD_VAR 0 6
42954: ARRAY
42955: PUSH
42956: LD_INT 2
42958: ARRAY
42959: PUSH
42960: LD_VAR 0 9
42964: LESS
42965: IFFALSE 43007
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42967: LD_ADDR_VAR 0 6
42971: PUSH
42972: LD_VAR 0 6
42976: PPUSH
42977: LD_VAR 0 6
42981: PUSH
42982: LD_INT 1
42984: PLUS
42985: PPUSH
42986: LD_VAR 0 7
42990: PUSH
42991: LD_VAR 0 9
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PPUSH
43000: CALL_OW 2
43004: ST_TO_ADDR
43005: GO 43087
// for j = 1 to result do
43007: LD_ADDR_VAR 0 8
43011: PUSH
43012: DOUBLE
43013: LD_INT 1
43015: DEC
43016: ST_TO_ADDR
43017: LD_VAR 0 6
43021: PUSH
43022: FOR_TO
43023: IFFALSE 43085
// begin if tmp < result [ j ] [ 2 ] then
43025: LD_VAR 0 9
43029: PUSH
43030: LD_VAR 0 6
43034: PUSH
43035: LD_VAR 0 8
43039: ARRAY
43040: PUSH
43041: LD_INT 2
43043: ARRAY
43044: LESS
43045: IFFALSE 43083
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43047: LD_ADDR_VAR 0 6
43051: PUSH
43052: LD_VAR 0 6
43056: PPUSH
43057: LD_VAR 0 8
43061: PPUSH
43062: LD_VAR 0 7
43066: PUSH
43067: LD_VAR 0 9
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PPUSH
43076: CALL_OW 2
43080: ST_TO_ADDR
// break ;
43081: GO 43085
// end ; end ;
43083: GO 43022
43085: POP
43086: POP
// end ; end ;
43087: GO 42886
43089: POP
43090: POP
// if result and not asc then
43091: LD_VAR 0 6
43095: PUSH
43096: LD_VAR 0 4
43100: NOT
43101: AND
43102: IFFALSE 43177
// begin tmp := result ;
43104: LD_ADDR_VAR 0 9
43108: PUSH
43109: LD_VAR 0 6
43113: ST_TO_ADDR
// for i = tmp downto 1 do
43114: LD_ADDR_VAR 0 7
43118: PUSH
43119: DOUBLE
43120: LD_VAR 0 9
43124: INC
43125: ST_TO_ADDR
43126: LD_INT 1
43128: PUSH
43129: FOR_DOWNTO
43130: IFFALSE 43175
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43132: LD_ADDR_VAR 0 6
43136: PUSH
43137: LD_VAR 0 6
43141: PPUSH
43142: LD_VAR 0 9
43146: PUSH
43147: LD_VAR 0 7
43151: MINUS
43152: PUSH
43153: LD_INT 1
43155: PLUS
43156: PPUSH
43157: LD_VAR 0 9
43161: PUSH
43162: LD_VAR 0 7
43166: ARRAY
43167: PPUSH
43168: CALL_OW 1
43172: ST_TO_ADDR
43173: GO 43129
43175: POP
43176: POP
// end ; tmp := [ ] ;
43177: LD_ADDR_VAR 0 9
43181: PUSH
43182: EMPTY
43183: ST_TO_ADDR
// if mode then
43184: LD_VAR 0 5
43188: IFFALSE 43257
// begin for i = 1 to result do
43190: LD_ADDR_VAR 0 7
43194: PUSH
43195: DOUBLE
43196: LD_INT 1
43198: DEC
43199: ST_TO_ADDR
43200: LD_VAR 0 6
43204: PUSH
43205: FOR_TO
43206: IFFALSE 43245
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43208: LD_ADDR_VAR 0 9
43212: PUSH
43213: LD_VAR 0 9
43217: PPUSH
43218: LD_VAR 0 7
43222: PPUSH
43223: LD_VAR 0 6
43227: PUSH
43228: LD_VAR 0 7
43232: ARRAY
43233: PUSH
43234: LD_INT 1
43236: ARRAY
43237: PPUSH
43238: CALL_OW 1
43242: ST_TO_ADDR
43243: GO 43205
43245: POP
43246: POP
// result := tmp ;
43247: LD_ADDR_VAR 0 6
43251: PUSH
43252: LD_VAR 0 9
43256: ST_TO_ADDR
// end ; end ;
43257: LD_VAR 0 6
43261: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43262: LD_INT 0
43264: PPUSH
43265: PPUSH
43266: PPUSH
43267: PPUSH
43268: PPUSH
43269: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43270: LD_ADDR_VAR 0 5
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: EMPTY
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: ST_TO_ADDR
// if not x or not y then
43292: LD_VAR 0 2
43296: NOT
43297: PUSH
43298: LD_VAR 0 3
43302: NOT
43303: OR
43304: IFFALSE 43308
// exit ;
43306: GO 44960
// if not range then
43308: LD_VAR 0 4
43312: NOT
43313: IFFALSE 43323
// range := 10 ;
43315: LD_ADDR_VAR 0 4
43319: PUSH
43320: LD_INT 10
43322: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43323: LD_ADDR_VAR 0 8
43327: PUSH
43328: LD_INT 81
43330: PUSH
43331: LD_VAR 0 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 92
43342: PUSH
43343: LD_VAR 0 2
43347: PUSH
43348: LD_VAR 0 3
43352: PUSH
43353: LD_VAR 0 4
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 3
43366: PUSH
43367: LD_INT 21
43369: PUSH
43370: LD_INT 3
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: PPUSH
43386: CALL_OW 69
43390: ST_TO_ADDR
// if not tmp then
43391: LD_VAR 0 8
43395: NOT
43396: IFFALSE 43400
// exit ;
43398: GO 44960
// for i in tmp do
43400: LD_ADDR_VAR 0 6
43404: PUSH
43405: LD_VAR 0 8
43409: PUSH
43410: FOR_IN
43411: IFFALSE 44935
// begin points := [ 0 , 0 , 0 ] ;
43413: LD_ADDR_VAR 0 9
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: LIST
43431: ST_TO_ADDR
// bpoints := 1 ;
43432: LD_ADDR_VAR 0 10
43436: PUSH
43437: LD_INT 1
43439: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43440: LD_VAR 0 6
43444: PPUSH
43445: CALL_OW 247
43449: PUSH
43450: LD_INT 1
43452: DOUBLE
43453: EQUAL
43454: IFTRUE 43458
43456: GO 44036
43458: POP
// begin if GetClass ( i ) = 1 then
43459: LD_VAR 0 6
43463: PPUSH
43464: CALL_OW 257
43468: PUSH
43469: LD_INT 1
43471: EQUAL
43472: IFFALSE 43493
// points := [ 10 , 5 , 3 ] ;
43474: LD_ADDR_VAR 0 9
43478: PUSH
43479: LD_INT 10
43481: PUSH
43482: LD_INT 5
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: LIST
43492: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43493: LD_VAR 0 6
43497: PPUSH
43498: CALL_OW 257
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: LD_INT 3
43508: PUSH
43509: LD_INT 4
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: LIST
43516: IN
43517: IFFALSE 43538
// points := [ 3 , 2 , 1 ] ;
43519: LD_ADDR_VAR 0 9
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43538: LD_VAR 0 6
43542: PPUSH
43543: CALL_OW 257
43547: PUSH
43548: LD_INT 5
43550: EQUAL
43551: IFFALSE 43572
// points := [ 130 , 5 , 2 ] ;
43553: LD_ADDR_VAR 0 9
43557: PUSH
43558: LD_INT 130
43560: PUSH
43561: LD_INT 5
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43572: LD_VAR 0 6
43576: PPUSH
43577: CALL_OW 257
43581: PUSH
43582: LD_INT 8
43584: EQUAL
43585: IFFALSE 43606
// points := [ 35 , 35 , 30 ] ;
43587: LD_ADDR_VAR 0 9
43591: PUSH
43592: LD_INT 35
43594: PUSH
43595: LD_INT 35
43597: PUSH
43598: LD_INT 30
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43606: LD_VAR 0 6
43610: PPUSH
43611: CALL_OW 257
43615: PUSH
43616: LD_INT 9
43618: EQUAL
43619: IFFALSE 43640
// points := [ 20 , 55 , 40 ] ;
43621: LD_ADDR_VAR 0 9
43625: PUSH
43626: LD_INT 20
43628: PUSH
43629: LD_INT 55
43631: PUSH
43632: LD_INT 40
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: LIST
43639: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43640: LD_VAR 0 6
43644: PPUSH
43645: CALL_OW 257
43649: PUSH
43650: LD_INT 12
43652: PUSH
43653: LD_INT 16
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: IN
43660: IFFALSE 43681
// points := [ 5 , 3 , 2 ] ;
43662: LD_ADDR_VAR 0 9
43666: PUSH
43667: LD_INT 5
43669: PUSH
43670: LD_INT 3
43672: PUSH
43673: LD_INT 2
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43681: LD_VAR 0 6
43685: PPUSH
43686: CALL_OW 257
43690: PUSH
43691: LD_INT 17
43693: EQUAL
43694: IFFALSE 43715
// points := [ 100 , 50 , 75 ] ;
43696: LD_ADDR_VAR 0 9
43700: PUSH
43701: LD_INT 100
43703: PUSH
43704: LD_INT 50
43706: PUSH
43707: LD_INT 75
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: LIST
43714: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43715: LD_VAR 0 6
43719: PPUSH
43720: CALL_OW 257
43724: PUSH
43725: LD_INT 15
43727: EQUAL
43728: IFFALSE 43749
// points := [ 10 , 5 , 3 ] ;
43730: LD_ADDR_VAR 0 9
43734: PUSH
43735: LD_INT 10
43737: PUSH
43738: LD_INT 5
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43749: LD_VAR 0 6
43753: PPUSH
43754: CALL_OW 257
43758: PUSH
43759: LD_INT 14
43761: EQUAL
43762: IFFALSE 43783
// points := [ 10 , 0 , 0 ] ;
43764: LD_ADDR_VAR 0 9
43768: PUSH
43769: LD_INT 10
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43783: LD_VAR 0 6
43787: PPUSH
43788: CALL_OW 257
43792: PUSH
43793: LD_INT 11
43795: EQUAL
43796: IFFALSE 43817
// points := [ 30 , 10 , 5 ] ;
43798: LD_ADDR_VAR 0 9
43802: PUSH
43803: LD_INT 30
43805: PUSH
43806: LD_INT 10
43808: PUSH
43809: LD_INT 5
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: LIST
43816: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43817: LD_VAR 0 1
43821: PPUSH
43822: LD_INT 5
43824: PPUSH
43825: CALL_OW 321
43829: PUSH
43830: LD_INT 2
43832: EQUAL
43833: IFFALSE 43850
// bpoints := bpoints * 1.8 ;
43835: LD_ADDR_VAR 0 10
43839: PUSH
43840: LD_VAR 0 10
43844: PUSH
43845: LD_REAL  1.80000000000000E+0000
43848: MUL
43849: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43850: LD_VAR 0 6
43854: PPUSH
43855: CALL_OW 257
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: LD_INT 3
43868: PUSH
43869: LD_INT 4
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: IN
43878: PUSH
43879: LD_VAR 0 1
43883: PPUSH
43884: LD_INT 51
43886: PPUSH
43887: CALL_OW 321
43891: PUSH
43892: LD_INT 2
43894: EQUAL
43895: AND
43896: IFFALSE 43913
// bpoints := bpoints * 1.2 ;
43898: LD_ADDR_VAR 0 10
43902: PUSH
43903: LD_VAR 0 10
43907: PUSH
43908: LD_REAL  1.20000000000000E+0000
43911: MUL
43912: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43913: LD_VAR 0 6
43917: PPUSH
43918: CALL_OW 257
43922: PUSH
43923: LD_INT 5
43925: PUSH
43926: LD_INT 7
43928: PUSH
43929: LD_INT 9
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: IN
43937: PUSH
43938: LD_VAR 0 1
43942: PPUSH
43943: LD_INT 52
43945: PPUSH
43946: CALL_OW 321
43950: PUSH
43951: LD_INT 2
43953: EQUAL
43954: AND
43955: IFFALSE 43972
// bpoints := bpoints * 1.5 ;
43957: LD_ADDR_VAR 0 10
43961: PUSH
43962: LD_VAR 0 10
43966: PUSH
43967: LD_REAL  1.50000000000000E+0000
43970: MUL
43971: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43972: LD_VAR 0 1
43976: PPUSH
43977: LD_INT 66
43979: PPUSH
43980: CALL_OW 321
43984: PUSH
43985: LD_INT 2
43987: EQUAL
43988: IFFALSE 44005
// bpoints := bpoints * 1.1 ;
43990: LD_ADDR_VAR 0 10
43994: PUSH
43995: LD_VAR 0 10
43999: PUSH
44000: LD_REAL  1.10000000000000E+0000
44003: MUL
44004: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44005: LD_ADDR_VAR 0 10
44009: PUSH
44010: LD_VAR 0 10
44014: PUSH
44015: LD_VAR 0 6
44019: PPUSH
44020: LD_INT 1
44022: PPUSH
44023: CALL_OW 259
44027: PUSH
44028: LD_REAL  1.15000000000000E+0000
44031: MUL
44032: MUL
44033: ST_TO_ADDR
// end ; unit_vehicle :
44034: GO 44864
44036: LD_INT 2
44038: DOUBLE
44039: EQUAL
44040: IFTRUE 44044
44042: GO 44852
44044: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44045: LD_VAR 0 6
44049: PPUSH
44050: CALL_OW 264
44054: PUSH
44055: LD_INT 2
44057: PUSH
44058: LD_INT 42
44060: PUSH
44061: LD_INT 24
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: LIST
44068: IN
44069: IFFALSE 44090
// points := [ 25 , 5 , 3 ] ;
44071: LD_ADDR_VAR 0 9
44075: PUSH
44076: LD_INT 25
44078: PUSH
44079: LD_INT 5
44081: PUSH
44082: LD_INT 3
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: LIST
44089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44090: LD_VAR 0 6
44094: PPUSH
44095: CALL_OW 264
44099: PUSH
44100: LD_INT 4
44102: PUSH
44103: LD_INT 43
44105: PUSH
44106: LD_INT 25
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: LIST
44113: IN
44114: IFFALSE 44135
// points := [ 40 , 15 , 5 ] ;
44116: LD_ADDR_VAR 0 9
44120: PUSH
44121: LD_INT 40
44123: PUSH
44124: LD_INT 15
44126: PUSH
44127: LD_INT 5
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: LIST
44134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44135: LD_VAR 0 6
44139: PPUSH
44140: CALL_OW 264
44144: PUSH
44145: LD_INT 3
44147: PUSH
44148: LD_INT 23
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: IN
44155: IFFALSE 44176
// points := [ 7 , 25 , 8 ] ;
44157: LD_ADDR_VAR 0 9
44161: PUSH
44162: LD_INT 7
44164: PUSH
44165: LD_INT 25
44167: PUSH
44168: LD_INT 8
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44176: LD_VAR 0 6
44180: PPUSH
44181: CALL_OW 264
44185: PUSH
44186: LD_INT 5
44188: PUSH
44189: LD_INT 27
44191: PUSH
44192: LD_INT 44
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: LIST
44199: IN
44200: IFFALSE 44221
// points := [ 14 , 50 , 16 ] ;
44202: LD_ADDR_VAR 0 9
44206: PUSH
44207: LD_INT 14
44209: PUSH
44210: LD_INT 50
44212: PUSH
44213: LD_INT 16
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44221: LD_VAR 0 6
44225: PPUSH
44226: CALL_OW 264
44230: PUSH
44231: LD_INT 6
44233: PUSH
44234: LD_INT 46
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: IN
44241: IFFALSE 44262
// points := [ 32 , 120 , 70 ] ;
44243: LD_ADDR_VAR 0 9
44247: PUSH
44248: LD_INT 32
44250: PUSH
44251: LD_INT 120
44253: PUSH
44254: LD_INT 70
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: LIST
44261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44262: LD_VAR 0 6
44266: PPUSH
44267: CALL_OW 264
44271: PUSH
44272: LD_INT 7
44274: PUSH
44275: LD_INT 28
44277: PUSH
44278: LD_INT 45
44280: PUSH
44281: LD_EXP 53
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: IN
44292: IFFALSE 44313
// points := [ 35 , 20 , 45 ] ;
44294: LD_ADDR_VAR 0 9
44298: PUSH
44299: LD_INT 35
44301: PUSH
44302: LD_INT 20
44304: PUSH
44305: LD_INT 45
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44313: LD_VAR 0 6
44317: PPUSH
44318: CALL_OW 264
44322: PUSH
44323: LD_INT 47
44325: PUSH
44326: EMPTY
44327: LIST
44328: IN
44329: IFFALSE 44350
// points := [ 67 , 45 , 75 ] ;
44331: LD_ADDR_VAR 0 9
44335: PUSH
44336: LD_INT 67
44338: PUSH
44339: LD_INT 45
44341: PUSH
44342: LD_INT 75
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: LIST
44349: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44350: LD_VAR 0 6
44354: PPUSH
44355: CALL_OW 264
44359: PUSH
44360: LD_INT 26
44362: PUSH
44363: EMPTY
44364: LIST
44365: IN
44366: IFFALSE 44387
// points := [ 120 , 30 , 80 ] ;
44368: LD_ADDR_VAR 0 9
44372: PUSH
44373: LD_INT 120
44375: PUSH
44376: LD_INT 30
44378: PUSH
44379: LD_INT 80
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: LIST
44386: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44387: LD_VAR 0 6
44391: PPUSH
44392: CALL_OW 264
44396: PUSH
44397: LD_INT 22
44399: PUSH
44400: EMPTY
44401: LIST
44402: IN
44403: IFFALSE 44424
// points := [ 40 , 1 , 1 ] ;
44405: LD_ADDR_VAR 0 9
44409: PUSH
44410: LD_INT 40
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44424: LD_VAR 0 6
44428: PPUSH
44429: CALL_OW 264
44433: PUSH
44434: LD_INT 29
44436: PUSH
44437: EMPTY
44438: LIST
44439: IN
44440: IFFALSE 44461
// points := [ 70 , 200 , 400 ] ;
44442: LD_ADDR_VAR 0 9
44446: PUSH
44447: LD_INT 70
44449: PUSH
44450: LD_INT 200
44452: PUSH
44453: LD_INT 400
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44461: LD_VAR 0 6
44465: PPUSH
44466: CALL_OW 264
44470: PUSH
44471: LD_INT 14
44473: PUSH
44474: LD_INT 53
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: IN
44481: IFFALSE 44502
// points := [ 40 , 10 , 20 ] ;
44483: LD_ADDR_VAR 0 9
44487: PUSH
44488: LD_INT 40
44490: PUSH
44491: LD_INT 10
44493: PUSH
44494: LD_INT 20
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44502: LD_VAR 0 6
44506: PPUSH
44507: CALL_OW 264
44511: PUSH
44512: LD_INT 9
44514: PUSH
44515: EMPTY
44516: LIST
44517: IN
44518: IFFALSE 44539
// points := [ 5 , 70 , 20 ] ;
44520: LD_ADDR_VAR 0 9
44524: PUSH
44525: LD_INT 5
44527: PUSH
44528: LD_INT 70
44530: PUSH
44531: LD_INT 20
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44539: LD_VAR 0 6
44543: PPUSH
44544: CALL_OW 264
44548: PUSH
44549: LD_INT 10
44551: PUSH
44552: EMPTY
44553: LIST
44554: IN
44555: IFFALSE 44576
// points := [ 35 , 110 , 70 ] ;
44557: LD_ADDR_VAR 0 9
44561: PUSH
44562: LD_INT 35
44564: PUSH
44565: LD_INT 110
44567: PUSH
44568: LD_INT 70
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: LIST
44575: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44576: LD_VAR 0 6
44580: PPUSH
44581: CALL_OW 265
44585: PUSH
44586: LD_INT 25
44588: EQUAL
44589: IFFALSE 44610
// points := [ 80 , 65 , 100 ] ;
44591: LD_ADDR_VAR 0 9
44595: PUSH
44596: LD_INT 80
44598: PUSH
44599: LD_INT 65
44601: PUSH
44602: LD_INT 100
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: LIST
44609: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44610: LD_VAR 0 6
44614: PPUSH
44615: CALL_OW 263
44619: PUSH
44620: LD_INT 1
44622: EQUAL
44623: IFFALSE 44658
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44625: LD_ADDR_VAR 0 10
44629: PUSH
44630: LD_VAR 0 10
44634: PUSH
44635: LD_VAR 0 6
44639: PPUSH
44640: CALL_OW 311
44644: PPUSH
44645: LD_INT 3
44647: PPUSH
44648: CALL_OW 259
44652: PUSH
44653: LD_INT 4
44655: MUL
44656: MUL
44657: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44658: LD_VAR 0 6
44662: PPUSH
44663: CALL_OW 263
44667: PUSH
44668: LD_INT 2
44670: EQUAL
44671: IFFALSE 44722
// begin j := IsControledBy ( i ) ;
44673: LD_ADDR_VAR 0 7
44677: PUSH
44678: LD_VAR 0 6
44682: PPUSH
44683: CALL_OW 312
44687: ST_TO_ADDR
// if j then
44688: LD_VAR 0 7
44692: IFFALSE 44722
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44694: LD_ADDR_VAR 0 10
44698: PUSH
44699: LD_VAR 0 10
44703: PUSH
44704: LD_VAR 0 7
44708: PPUSH
44709: LD_INT 3
44711: PPUSH
44712: CALL_OW 259
44716: PUSH
44717: LD_INT 3
44719: MUL
44720: MUL
44721: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44722: LD_VAR 0 6
44726: PPUSH
44727: CALL_OW 264
44731: PUSH
44732: LD_INT 5
44734: PUSH
44735: LD_INT 6
44737: PUSH
44738: LD_INT 46
44740: PUSH
44741: LD_INT 44
44743: PUSH
44744: LD_INT 47
44746: PUSH
44747: LD_INT 45
44749: PUSH
44750: LD_INT 28
44752: PUSH
44753: LD_INT 7
44755: PUSH
44756: LD_INT 27
44758: PUSH
44759: LD_INT 29
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: IN
44774: PUSH
44775: LD_VAR 0 1
44779: PPUSH
44780: LD_INT 52
44782: PPUSH
44783: CALL_OW 321
44787: PUSH
44788: LD_INT 2
44790: EQUAL
44791: AND
44792: IFFALSE 44809
// bpoints := bpoints * 1.2 ;
44794: LD_ADDR_VAR 0 10
44798: PUSH
44799: LD_VAR 0 10
44803: PUSH
44804: LD_REAL  1.20000000000000E+0000
44807: MUL
44808: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44809: LD_VAR 0 6
44813: PPUSH
44814: CALL_OW 264
44818: PUSH
44819: LD_INT 6
44821: PUSH
44822: LD_INT 46
44824: PUSH
44825: LD_INT 47
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: LIST
44832: IN
44833: IFFALSE 44850
// bpoints := bpoints * 1.2 ;
44835: LD_ADDR_VAR 0 10
44839: PUSH
44840: LD_VAR 0 10
44844: PUSH
44845: LD_REAL  1.20000000000000E+0000
44848: MUL
44849: ST_TO_ADDR
// end ; unit_building :
44850: GO 44864
44852: LD_INT 3
44854: DOUBLE
44855: EQUAL
44856: IFTRUE 44860
44858: GO 44863
44860: POP
// ; end ;
44861: GO 44864
44863: POP
// for j = 1 to 3 do
44864: LD_ADDR_VAR 0 7
44868: PUSH
44869: DOUBLE
44870: LD_INT 1
44872: DEC
44873: ST_TO_ADDR
44874: LD_INT 3
44876: PUSH
44877: FOR_TO
44878: IFFALSE 44931
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44880: LD_ADDR_VAR 0 5
44884: PUSH
44885: LD_VAR 0 5
44889: PPUSH
44890: LD_VAR 0 7
44894: PPUSH
44895: LD_VAR 0 5
44899: PUSH
44900: LD_VAR 0 7
44904: ARRAY
44905: PUSH
44906: LD_VAR 0 9
44910: PUSH
44911: LD_VAR 0 7
44915: ARRAY
44916: PUSH
44917: LD_VAR 0 10
44921: MUL
44922: PLUS
44923: PPUSH
44924: CALL_OW 1
44928: ST_TO_ADDR
44929: GO 44877
44931: POP
44932: POP
// end ;
44933: GO 43410
44935: POP
44936: POP
// result := Replace ( result , 4 , tmp ) ;
44937: LD_ADDR_VAR 0 5
44941: PUSH
44942: LD_VAR 0 5
44946: PPUSH
44947: LD_INT 4
44949: PPUSH
44950: LD_VAR 0 8
44954: PPUSH
44955: CALL_OW 1
44959: ST_TO_ADDR
// end ;
44960: LD_VAR 0 5
44964: RET
// export function DangerAtRange ( unit , range ) ; begin
44965: LD_INT 0
44967: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44968: LD_ADDR_VAR 0 3
44972: PUSH
44973: LD_VAR 0 1
44977: PPUSH
44978: CALL_OW 255
44982: PPUSH
44983: LD_VAR 0 1
44987: PPUSH
44988: CALL_OW 250
44992: PPUSH
44993: LD_VAR 0 1
44997: PPUSH
44998: CALL_OW 251
45002: PPUSH
45003: LD_VAR 0 2
45007: PPUSH
45008: CALL 43262 0 4
45012: ST_TO_ADDR
// end ;
45013: LD_VAR 0 3
45017: RET
// export function DangerInArea ( side , area ) ; begin
45018: LD_INT 0
45020: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45021: LD_ADDR_VAR 0 3
45025: PUSH
45026: LD_VAR 0 2
45030: PPUSH
45031: LD_INT 81
45033: PUSH
45034: LD_VAR 0 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PPUSH
45043: CALL_OW 70
45047: ST_TO_ADDR
// end ;
45048: LD_VAR 0 3
45052: RET
// export function IsExtension ( b ) ; begin
45053: LD_INT 0
45055: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45056: LD_ADDR_VAR 0 2
45060: PUSH
45061: LD_VAR 0 1
45065: PUSH
45066: LD_INT 23
45068: PUSH
45069: LD_INT 20
45071: PUSH
45072: LD_INT 22
45074: PUSH
45075: LD_INT 17
45077: PUSH
45078: LD_INT 24
45080: PUSH
45081: LD_INT 21
45083: PUSH
45084: LD_INT 19
45086: PUSH
45087: LD_INT 16
45089: PUSH
45090: LD_INT 25
45092: PUSH
45093: LD_INT 18
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: IN
45108: ST_TO_ADDR
// end ;
45109: LD_VAR 0 2
45113: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45114: LD_INT 0
45116: PPUSH
45117: PPUSH
45118: PPUSH
// result := [ ] ;
45119: LD_ADDR_VAR 0 4
45123: PUSH
45124: EMPTY
45125: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45126: LD_ADDR_VAR 0 5
45130: PUSH
45131: LD_VAR 0 2
45135: PPUSH
45136: LD_INT 21
45138: PUSH
45139: LD_INT 3
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PPUSH
45146: CALL_OW 70
45150: ST_TO_ADDR
// if not tmp then
45151: LD_VAR 0 5
45155: NOT
45156: IFFALSE 45160
// exit ;
45158: GO 45224
// if checkLink then
45160: LD_VAR 0 3
45164: IFFALSE 45214
// begin for i in tmp do
45166: LD_ADDR_VAR 0 6
45170: PUSH
45171: LD_VAR 0 5
45175: PUSH
45176: FOR_IN
45177: IFFALSE 45212
// if GetBase ( i ) <> base then
45179: LD_VAR 0 6
45183: PPUSH
45184: CALL_OW 274
45188: PUSH
45189: LD_VAR 0 1
45193: NONEQUAL
45194: IFFALSE 45210
// ComLinkToBase ( base , i ) ;
45196: LD_VAR 0 1
45200: PPUSH
45201: LD_VAR 0 6
45205: PPUSH
45206: CALL_OW 169
45210: GO 45176
45212: POP
45213: POP
// end ; result := tmp ;
45214: LD_ADDR_VAR 0 4
45218: PUSH
45219: LD_VAR 0 5
45223: ST_TO_ADDR
// end ;
45224: LD_VAR 0 4
45228: RET
// export function ComComplete ( units , b ) ; var i ; begin
45229: LD_INT 0
45231: PPUSH
45232: PPUSH
// if not units then
45233: LD_VAR 0 1
45237: NOT
45238: IFFALSE 45242
// exit ;
45240: GO 45332
// for i in units do
45242: LD_ADDR_VAR 0 4
45246: PUSH
45247: LD_VAR 0 1
45251: PUSH
45252: FOR_IN
45253: IFFALSE 45330
// if BuildingStatus ( b ) = bs_build then
45255: LD_VAR 0 2
45259: PPUSH
45260: CALL_OW 461
45264: PUSH
45265: LD_INT 1
45267: EQUAL
45268: IFFALSE 45328
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45270: LD_VAR 0 4
45274: PPUSH
45275: LD_STRING h
45277: PUSH
45278: LD_VAR 0 2
45282: PPUSH
45283: CALL_OW 250
45287: PUSH
45288: LD_VAR 0 2
45292: PPUSH
45293: CALL_OW 251
45297: PUSH
45298: LD_VAR 0 2
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: PUSH
45321: EMPTY
45322: LIST
45323: PPUSH
45324: CALL_OW 446
45328: GO 45252
45330: POP
45331: POP
// end ;
45332: LD_VAR 0 3
45336: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45337: LD_INT 0
45339: PPUSH
45340: PPUSH
45341: PPUSH
45342: PPUSH
45343: PPUSH
45344: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45345: LD_VAR 0 1
45349: NOT
45350: PUSH
45351: LD_VAR 0 1
45355: PPUSH
45356: CALL_OW 263
45360: PUSH
45361: LD_INT 2
45363: NONEQUAL
45364: OR
45365: IFFALSE 45369
// exit ;
45367: GO 45685
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45369: LD_ADDR_VAR 0 6
45373: PUSH
45374: LD_INT 22
45376: PUSH
45377: LD_VAR 0 1
45381: PPUSH
45382: CALL_OW 255
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: LD_INT 30
45396: PUSH
45397: LD_INT 36
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 34
45406: PUSH
45407: LD_INT 31
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PPUSH
45423: CALL_OW 69
45427: ST_TO_ADDR
// if not tmp then
45428: LD_VAR 0 6
45432: NOT
45433: IFFALSE 45437
// exit ;
45435: GO 45685
// result := [ ] ;
45437: LD_ADDR_VAR 0 2
45441: PUSH
45442: EMPTY
45443: ST_TO_ADDR
// for i in tmp do
45444: LD_ADDR_VAR 0 3
45448: PUSH
45449: LD_VAR 0 6
45453: PUSH
45454: FOR_IN
45455: IFFALSE 45526
// begin t := UnitsInside ( i ) ;
45457: LD_ADDR_VAR 0 4
45461: PUSH
45462: LD_VAR 0 3
45466: PPUSH
45467: CALL_OW 313
45471: ST_TO_ADDR
// if t then
45472: LD_VAR 0 4
45476: IFFALSE 45524
// for j in t do
45478: LD_ADDR_VAR 0 7
45482: PUSH
45483: LD_VAR 0 4
45487: PUSH
45488: FOR_IN
45489: IFFALSE 45522
// result := Replace ( result , result + 1 , j ) ;
45491: LD_ADDR_VAR 0 2
45495: PUSH
45496: LD_VAR 0 2
45500: PPUSH
45501: LD_VAR 0 2
45505: PUSH
45506: LD_INT 1
45508: PLUS
45509: PPUSH
45510: LD_VAR 0 7
45514: PPUSH
45515: CALL_OW 1
45519: ST_TO_ADDR
45520: GO 45488
45522: POP
45523: POP
// end ;
45524: GO 45454
45526: POP
45527: POP
// if not result then
45528: LD_VAR 0 2
45532: NOT
45533: IFFALSE 45537
// exit ;
45535: GO 45685
// mech := result [ 1 ] ;
45537: LD_ADDR_VAR 0 5
45541: PUSH
45542: LD_VAR 0 2
45546: PUSH
45547: LD_INT 1
45549: ARRAY
45550: ST_TO_ADDR
// if result > 1 then
45551: LD_VAR 0 2
45555: PUSH
45556: LD_INT 1
45558: GREATER
45559: IFFALSE 45671
// begin for i = 2 to result do
45561: LD_ADDR_VAR 0 3
45565: PUSH
45566: DOUBLE
45567: LD_INT 2
45569: DEC
45570: ST_TO_ADDR
45571: LD_VAR 0 2
45575: PUSH
45576: FOR_TO
45577: IFFALSE 45669
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45579: LD_ADDR_VAR 0 4
45583: PUSH
45584: LD_VAR 0 2
45588: PUSH
45589: LD_VAR 0 3
45593: ARRAY
45594: PPUSH
45595: LD_INT 3
45597: PPUSH
45598: CALL_OW 259
45602: PUSH
45603: LD_VAR 0 2
45607: PUSH
45608: LD_VAR 0 3
45612: ARRAY
45613: PPUSH
45614: CALL_OW 432
45618: MINUS
45619: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45620: LD_VAR 0 4
45624: PUSH
45625: LD_VAR 0 5
45629: PPUSH
45630: LD_INT 3
45632: PPUSH
45633: CALL_OW 259
45637: PUSH
45638: LD_VAR 0 5
45642: PPUSH
45643: CALL_OW 432
45647: MINUS
45648: GREATEREQUAL
45649: IFFALSE 45667
// mech := result [ i ] ;
45651: LD_ADDR_VAR 0 5
45655: PUSH
45656: LD_VAR 0 2
45660: PUSH
45661: LD_VAR 0 3
45665: ARRAY
45666: ST_TO_ADDR
// end ;
45667: GO 45576
45669: POP
45670: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45671: LD_VAR 0 1
45675: PPUSH
45676: LD_VAR 0 5
45680: PPUSH
45681: CALL_OW 135
// end ;
45685: LD_VAR 0 2
45689: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45690: LD_INT 0
45692: PPUSH
45693: PPUSH
45694: PPUSH
45695: PPUSH
45696: PPUSH
45697: PPUSH
45698: PPUSH
45699: PPUSH
45700: PPUSH
45701: PPUSH
45702: PPUSH
45703: PPUSH
45704: PPUSH
// result := [ ] ;
45705: LD_ADDR_VAR 0 7
45709: PUSH
45710: EMPTY
45711: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45712: LD_VAR 0 1
45716: PPUSH
45717: CALL_OW 266
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: IN
45732: NOT
45733: IFFALSE 45737
// exit ;
45735: GO 47371
// if name then
45737: LD_VAR 0 3
45741: IFFALSE 45757
// SetBName ( base_dep , name ) ;
45743: LD_VAR 0 1
45747: PPUSH
45748: LD_VAR 0 3
45752: PPUSH
45753: CALL_OW 500
// base := GetBase ( base_dep ) ;
45757: LD_ADDR_VAR 0 15
45761: PUSH
45762: LD_VAR 0 1
45766: PPUSH
45767: CALL_OW 274
45771: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45772: LD_ADDR_VAR 0 16
45776: PUSH
45777: LD_VAR 0 1
45781: PPUSH
45782: CALL_OW 255
45786: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45787: LD_ADDR_VAR 0 17
45791: PUSH
45792: LD_VAR 0 1
45796: PPUSH
45797: CALL_OW 248
45801: ST_TO_ADDR
// if sources then
45802: LD_VAR 0 5
45806: IFFALSE 45853
// for i = 1 to 3 do
45808: LD_ADDR_VAR 0 8
45812: PUSH
45813: DOUBLE
45814: LD_INT 1
45816: DEC
45817: ST_TO_ADDR
45818: LD_INT 3
45820: PUSH
45821: FOR_TO
45822: IFFALSE 45851
// AddResourceType ( base , i , sources [ i ] ) ;
45824: LD_VAR 0 15
45828: PPUSH
45829: LD_VAR 0 8
45833: PPUSH
45834: LD_VAR 0 5
45838: PUSH
45839: LD_VAR 0 8
45843: ARRAY
45844: PPUSH
45845: CALL_OW 276
45849: GO 45821
45851: POP
45852: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45853: LD_ADDR_VAR 0 18
45857: PUSH
45858: LD_VAR 0 15
45862: PPUSH
45863: LD_VAR 0 2
45867: PPUSH
45868: LD_INT 1
45870: PPUSH
45871: CALL 45114 0 3
45875: ST_TO_ADDR
// InitHc ;
45876: CALL_OW 19
// InitUc ;
45880: CALL_OW 18
// uc_side := side ;
45884: LD_ADDR_OWVAR 20
45888: PUSH
45889: LD_VAR 0 16
45893: ST_TO_ADDR
// uc_nation := nation ;
45894: LD_ADDR_OWVAR 21
45898: PUSH
45899: LD_VAR 0 17
45903: ST_TO_ADDR
// if buildings then
45904: LD_VAR 0 18
45908: IFFALSE 47230
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45910: LD_ADDR_VAR 0 19
45914: PUSH
45915: LD_VAR 0 18
45919: PPUSH
45920: LD_INT 2
45922: PUSH
45923: LD_INT 30
45925: PUSH
45926: LD_INT 29
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 30
45935: PUSH
45936: LD_INT 30
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: LIST
45947: PPUSH
45948: CALL_OW 72
45952: ST_TO_ADDR
// if tmp then
45953: LD_VAR 0 19
45957: IFFALSE 46005
// for i in tmp do
45959: LD_ADDR_VAR 0 8
45963: PUSH
45964: LD_VAR 0 19
45968: PUSH
45969: FOR_IN
45970: IFFALSE 46003
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45972: LD_VAR 0 8
45976: PPUSH
45977: CALL_OW 250
45981: PPUSH
45982: LD_VAR 0 8
45986: PPUSH
45987: CALL_OW 251
45991: PPUSH
45992: LD_VAR 0 16
45996: PPUSH
45997: CALL_OW 441
46001: GO 45969
46003: POP
46004: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46005: LD_VAR 0 18
46009: PPUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 30
46015: PUSH
46016: LD_INT 32
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 30
46025: PUSH
46026: LD_INT 33
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: PPUSH
46038: CALL_OW 72
46042: IFFALSE 46130
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46044: LD_ADDR_VAR 0 8
46048: PUSH
46049: LD_VAR 0 18
46053: PPUSH
46054: LD_INT 2
46056: PUSH
46057: LD_INT 30
46059: PUSH
46060: LD_INT 32
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 30
46069: PUSH
46070: LD_INT 33
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: PPUSH
46082: CALL_OW 72
46086: PUSH
46087: FOR_IN
46088: IFFALSE 46128
// begin if not GetBWeapon ( i ) then
46090: LD_VAR 0 8
46094: PPUSH
46095: CALL_OW 269
46099: NOT
46100: IFFALSE 46126
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46102: LD_VAR 0 8
46106: PPUSH
46107: LD_VAR 0 8
46111: PPUSH
46112: LD_VAR 0 2
46116: PPUSH
46117: CALL 47376 0 2
46121: PPUSH
46122: CALL_OW 431
// end ;
46126: GO 46087
46128: POP
46129: POP
// end ; for i = 1 to personel do
46130: LD_ADDR_VAR 0 8
46134: PUSH
46135: DOUBLE
46136: LD_INT 1
46138: DEC
46139: ST_TO_ADDR
46140: LD_VAR 0 6
46144: PUSH
46145: FOR_TO
46146: IFFALSE 47210
// begin if i > 4 then
46148: LD_VAR 0 8
46152: PUSH
46153: LD_INT 4
46155: GREATER
46156: IFFALSE 46160
// break ;
46158: GO 47210
// case i of 1 :
46160: LD_VAR 0 8
46164: PUSH
46165: LD_INT 1
46167: DOUBLE
46168: EQUAL
46169: IFTRUE 46173
46171: GO 46253
46173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46174: LD_ADDR_VAR 0 12
46178: PUSH
46179: LD_VAR 0 18
46183: PPUSH
46184: LD_INT 22
46186: PUSH
46187: LD_VAR 0 16
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 58
46198: PUSH
46199: EMPTY
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: LD_INT 30
46207: PUSH
46208: LD_INT 32
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 30
46217: PUSH
46218: LD_INT 4
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 30
46227: PUSH
46228: LD_INT 5
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: LIST
46245: PPUSH
46246: CALL_OW 72
46250: ST_TO_ADDR
46251: GO 46475
46253: LD_INT 2
46255: DOUBLE
46256: EQUAL
46257: IFTRUE 46261
46259: GO 46323
46261: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46262: LD_ADDR_VAR 0 12
46266: PUSH
46267: LD_VAR 0 18
46271: PPUSH
46272: LD_INT 22
46274: PUSH
46275: LD_VAR 0 16
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 30
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 30
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PPUSH
46316: CALL_OW 72
46320: ST_TO_ADDR
46321: GO 46475
46323: LD_INT 3
46325: DOUBLE
46326: EQUAL
46327: IFTRUE 46331
46329: GO 46393
46331: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46332: LD_ADDR_VAR 0 12
46336: PUSH
46337: LD_VAR 0 18
46341: PPUSH
46342: LD_INT 22
46344: PUSH
46345: LD_VAR 0 16
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: LD_INT 30
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 30
46369: PUSH
46370: LD_INT 3
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PPUSH
46386: CALL_OW 72
46390: ST_TO_ADDR
46391: GO 46475
46393: LD_INT 4
46395: DOUBLE
46396: EQUAL
46397: IFTRUE 46401
46399: GO 46474
46401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46402: LD_ADDR_VAR 0 12
46406: PUSH
46407: LD_VAR 0 18
46411: PPUSH
46412: LD_INT 22
46414: PUSH
46415: LD_VAR 0 16
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: LD_INT 30
46429: PUSH
46430: LD_INT 6
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 30
46439: PUSH
46440: LD_INT 7
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 30
46449: PUSH
46450: LD_INT 8
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PPUSH
46467: CALL_OW 72
46471: ST_TO_ADDR
46472: GO 46475
46474: POP
// if i = 1 then
46475: LD_VAR 0 8
46479: PUSH
46480: LD_INT 1
46482: EQUAL
46483: IFFALSE 46594
// begin tmp := [ ] ;
46485: LD_ADDR_VAR 0 19
46489: PUSH
46490: EMPTY
46491: ST_TO_ADDR
// for j in f do
46492: LD_ADDR_VAR 0 9
46496: PUSH
46497: LD_VAR 0 12
46501: PUSH
46502: FOR_IN
46503: IFFALSE 46576
// if GetBType ( j ) = b_bunker then
46505: LD_VAR 0 9
46509: PPUSH
46510: CALL_OW 266
46514: PUSH
46515: LD_INT 32
46517: EQUAL
46518: IFFALSE 46545
// tmp := Insert ( tmp , 1 , j ) else
46520: LD_ADDR_VAR 0 19
46524: PUSH
46525: LD_VAR 0 19
46529: PPUSH
46530: LD_INT 1
46532: PPUSH
46533: LD_VAR 0 9
46537: PPUSH
46538: CALL_OW 2
46542: ST_TO_ADDR
46543: GO 46574
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46545: LD_ADDR_VAR 0 19
46549: PUSH
46550: LD_VAR 0 19
46554: PPUSH
46555: LD_VAR 0 19
46559: PUSH
46560: LD_INT 1
46562: PLUS
46563: PPUSH
46564: LD_VAR 0 9
46568: PPUSH
46569: CALL_OW 2
46573: ST_TO_ADDR
46574: GO 46502
46576: POP
46577: POP
// if tmp then
46578: LD_VAR 0 19
46582: IFFALSE 46594
// f := tmp ;
46584: LD_ADDR_VAR 0 12
46588: PUSH
46589: LD_VAR 0 19
46593: ST_TO_ADDR
// end ; x := personel [ i ] ;
46594: LD_ADDR_VAR 0 13
46598: PUSH
46599: LD_VAR 0 6
46603: PUSH
46604: LD_VAR 0 8
46608: ARRAY
46609: ST_TO_ADDR
// if x = - 1 then
46610: LD_VAR 0 13
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: EQUAL
46619: IFFALSE 46828
// begin for j in f do
46621: LD_ADDR_VAR 0 9
46625: PUSH
46626: LD_VAR 0 12
46630: PUSH
46631: FOR_IN
46632: IFFALSE 46824
// repeat InitHc ;
46634: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46638: LD_VAR 0 9
46642: PPUSH
46643: CALL_OW 266
46647: PUSH
46648: LD_INT 5
46650: EQUAL
46651: IFFALSE 46721
// begin if UnitsInside ( j ) < 3 then
46653: LD_VAR 0 9
46657: PPUSH
46658: CALL_OW 313
46662: PUSH
46663: LD_INT 3
46665: LESS
46666: IFFALSE 46702
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46668: LD_INT 0
46670: PPUSH
46671: LD_INT 5
46673: PUSH
46674: LD_INT 8
46676: PUSH
46677: LD_INT 9
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: LIST
46684: PUSH
46685: LD_VAR 0 17
46689: ARRAY
46690: PPUSH
46691: LD_VAR 0 4
46695: PPUSH
46696: CALL_OW 380
46700: GO 46719
// PrepareHuman ( false , i , skill ) ;
46702: LD_INT 0
46704: PPUSH
46705: LD_VAR 0 8
46709: PPUSH
46710: LD_VAR 0 4
46714: PPUSH
46715: CALL_OW 380
// end else
46719: GO 46738
// PrepareHuman ( false , i , skill ) ;
46721: LD_INT 0
46723: PPUSH
46724: LD_VAR 0 8
46728: PPUSH
46729: LD_VAR 0 4
46733: PPUSH
46734: CALL_OW 380
// un := CreateHuman ;
46738: LD_ADDR_VAR 0 14
46742: PUSH
46743: CALL_OW 44
46747: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46748: LD_ADDR_VAR 0 7
46752: PUSH
46753: LD_VAR 0 7
46757: PPUSH
46758: LD_INT 1
46760: PPUSH
46761: LD_VAR 0 14
46765: PPUSH
46766: CALL_OW 2
46770: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46771: LD_VAR 0 14
46775: PPUSH
46776: LD_VAR 0 9
46780: PPUSH
46781: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46785: LD_VAR 0 9
46789: PPUSH
46790: CALL_OW 313
46794: PUSH
46795: LD_INT 6
46797: EQUAL
46798: PUSH
46799: LD_VAR 0 9
46803: PPUSH
46804: CALL_OW 266
46808: PUSH
46809: LD_INT 32
46811: PUSH
46812: LD_INT 31
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: IN
46819: OR
46820: IFFALSE 46634
46822: GO 46631
46824: POP
46825: POP
// end else
46826: GO 47208
// for j = 1 to x do
46828: LD_ADDR_VAR 0 9
46832: PUSH
46833: DOUBLE
46834: LD_INT 1
46836: DEC
46837: ST_TO_ADDR
46838: LD_VAR 0 13
46842: PUSH
46843: FOR_TO
46844: IFFALSE 47206
// begin InitHc ;
46846: CALL_OW 19
// if not f then
46850: LD_VAR 0 12
46854: NOT
46855: IFFALSE 46944
// begin PrepareHuman ( false , i , skill ) ;
46857: LD_INT 0
46859: PPUSH
46860: LD_VAR 0 8
46864: PPUSH
46865: LD_VAR 0 4
46869: PPUSH
46870: CALL_OW 380
// un := CreateHuman ;
46874: LD_ADDR_VAR 0 14
46878: PUSH
46879: CALL_OW 44
46883: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46884: LD_ADDR_VAR 0 7
46888: PUSH
46889: LD_VAR 0 7
46893: PPUSH
46894: LD_INT 1
46896: PPUSH
46897: LD_VAR 0 14
46901: PPUSH
46902: CALL_OW 2
46906: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46907: LD_VAR 0 14
46911: PPUSH
46912: LD_VAR 0 1
46916: PPUSH
46917: CALL_OW 250
46921: PPUSH
46922: LD_VAR 0 1
46926: PPUSH
46927: CALL_OW 251
46931: PPUSH
46932: LD_INT 10
46934: PPUSH
46935: LD_INT 0
46937: PPUSH
46938: CALL_OW 50
// continue ;
46942: GO 46843
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46944: LD_VAR 0 12
46948: PUSH
46949: LD_INT 1
46951: ARRAY
46952: PPUSH
46953: CALL_OW 313
46957: PUSH
46958: LD_VAR 0 12
46962: PUSH
46963: LD_INT 1
46965: ARRAY
46966: PPUSH
46967: CALL_OW 266
46971: PUSH
46972: LD_INT 32
46974: PUSH
46975: LD_INT 31
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: IN
46982: AND
46983: PUSH
46984: LD_VAR 0 12
46988: PUSH
46989: LD_INT 1
46991: ARRAY
46992: PPUSH
46993: CALL_OW 313
46997: PUSH
46998: LD_INT 6
47000: EQUAL
47001: OR
47002: IFFALSE 47022
// f := Delete ( f , 1 ) ;
47004: LD_ADDR_VAR 0 12
47008: PUSH
47009: LD_VAR 0 12
47013: PPUSH
47014: LD_INT 1
47016: PPUSH
47017: CALL_OW 3
47021: ST_TO_ADDR
// if not f then
47022: LD_VAR 0 12
47026: NOT
47027: IFFALSE 47045
// begin x := x + 2 ;
47029: LD_ADDR_VAR 0 13
47033: PUSH
47034: LD_VAR 0 13
47038: PUSH
47039: LD_INT 2
47041: PLUS
47042: ST_TO_ADDR
// continue ;
47043: GO 46843
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47045: LD_VAR 0 12
47049: PUSH
47050: LD_INT 1
47052: ARRAY
47053: PPUSH
47054: CALL_OW 266
47058: PUSH
47059: LD_INT 5
47061: EQUAL
47062: IFFALSE 47136
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47064: LD_VAR 0 12
47068: PUSH
47069: LD_INT 1
47071: ARRAY
47072: PPUSH
47073: CALL_OW 313
47077: PUSH
47078: LD_INT 3
47080: LESS
47081: IFFALSE 47117
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47083: LD_INT 0
47085: PPUSH
47086: LD_INT 5
47088: PUSH
47089: LD_INT 8
47091: PUSH
47092: LD_INT 9
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: LIST
47099: PUSH
47100: LD_VAR 0 17
47104: ARRAY
47105: PPUSH
47106: LD_VAR 0 4
47110: PPUSH
47111: CALL_OW 380
47115: GO 47134
// PrepareHuman ( false , i , skill ) ;
47117: LD_INT 0
47119: PPUSH
47120: LD_VAR 0 8
47124: PPUSH
47125: LD_VAR 0 4
47129: PPUSH
47130: CALL_OW 380
// end else
47134: GO 47153
// PrepareHuman ( false , i , skill ) ;
47136: LD_INT 0
47138: PPUSH
47139: LD_VAR 0 8
47143: PPUSH
47144: LD_VAR 0 4
47148: PPUSH
47149: CALL_OW 380
// un := CreateHuman ;
47153: LD_ADDR_VAR 0 14
47157: PUSH
47158: CALL_OW 44
47162: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47163: LD_ADDR_VAR 0 7
47167: PUSH
47168: LD_VAR 0 7
47172: PPUSH
47173: LD_INT 1
47175: PPUSH
47176: LD_VAR 0 14
47180: PPUSH
47181: CALL_OW 2
47185: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47186: LD_VAR 0 14
47190: PPUSH
47191: LD_VAR 0 12
47195: PUSH
47196: LD_INT 1
47198: ARRAY
47199: PPUSH
47200: CALL_OW 52
// end ;
47204: GO 46843
47206: POP
47207: POP
// end ;
47208: GO 46145
47210: POP
47211: POP
// result := result ^ buildings ;
47212: LD_ADDR_VAR 0 7
47216: PUSH
47217: LD_VAR 0 7
47221: PUSH
47222: LD_VAR 0 18
47226: ADD
47227: ST_TO_ADDR
// end else
47228: GO 47371
// begin for i = 1 to personel do
47230: LD_ADDR_VAR 0 8
47234: PUSH
47235: DOUBLE
47236: LD_INT 1
47238: DEC
47239: ST_TO_ADDR
47240: LD_VAR 0 6
47244: PUSH
47245: FOR_TO
47246: IFFALSE 47369
// begin if i > 4 then
47248: LD_VAR 0 8
47252: PUSH
47253: LD_INT 4
47255: GREATER
47256: IFFALSE 47260
// break ;
47258: GO 47369
// x := personel [ i ] ;
47260: LD_ADDR_VAR 0 13
47264: PUSH
47265: LD_VAR 0 6
47269: PUSH
47270: LD_VAR 0 8
47274: ARRAY
47275: ST_TO_ADDR
// if x = - 1 then
47276: LD_VAR 0 13
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: EQUAL
47285: IFFALSE 47289
// continue ;
47287: GO 47245
// PrepareHuman ( false , i , skill ) ;
47289: LD_INT 0
47291: PPUSH
47292: LD_VAR 0 8
47296: PPUSH
47297: LD_VAR 0 4
47301: PPUSH
47302: CALL_OW 380
// un := CreateHuman ;
47306: LD_ADDR_VAR 0 14
47310: PUSH
47311: CALL_OW 44
47315: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47316: LD_VAR 0 14
47320: PPUSH
47321: LD_VAR 0 1
47325: PPUSH
47326: CALL_OW 250
47330: PPUSH
47331: LD_VAR 0 1
47335: PPUSH
47336: CALL_OW 251
47340: PPUSH
47341: LD_INT 10
47343: PPUSH
47344: LD_INT 0
47346: PPUSH
47347: CALL_OW 50
// result := result ^ un ;
47351: LD_ADDR_VAR 0 7
47355: PUSH
47356: LD_VAR 0 7
47360: PUSH
47361: LD_VAR 0 14
47365: ADD
47366: ST_TO_ADDR
// end ;
47367: GO 47245
47369: POP
47370: POP
// end ; end ;
47371: LD_VAR 0 7
47375: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47376: LD_INT 0
47378: PPUSH
47379: PPUSH
47380: PPUSH
47381: PPUSH
47382: PPUSH
47383: PPUSH
47384: PPUSH
47385: PPUSH
47386: PPUSH
47387: PPUSH
47388: PPUSH
47389: PPUSH
47390: PPUSH
47391: PPUSH
47392: PPUSH
47393: PPUSH
// result := false ;
47394: LD_ADDR_VAR 0 3
47398: PUSH
47399: LD_INT 0
47401: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47402: LD_VAR 0 1
47406: NOT
47407: PUSH
47408: LD_VAR 0 1
47412: PPUSH
47413: CALL_OW 266
47417: PUSH
47418: LD_INT 32
47420: PUSH
47421: LD_INT 33
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: IN
47428: NOT
47429: OR
47430: IFFALSE 47434
// exit ;
47432: GO 48543
// nat := GetNation ( tower ) ;
47434: LD_ADDR_VAR 0 12
47438: PUSH
47439: LD_VAR 0 1
47443: PPUSH
47444: CALL_OW 248
47448: ST_TO_ADDR
// side := GetSide ( tower ) ;
47449: LD_ADDR_VAR 0 16
47453: PUSH
47454: LD_VAR 0 1
47458: PPUSH
47459: CALL_OW 255
47463: ST_TO_ADDR
// x := GetX ( tower ) ;
47464: LD_ADDR_VAR 0 10
47468: PUSH
47469: LD_VAR 0 1
47473: PPUSH
47474: CALL_OW 250
47478: ST_TO_ADDR
// y := GetY ( tower ) ;
47479: LD_ADDR_VAR 0 11
47483: PUSH
47484: LD_VAR 0 1
47488: PPUSH
47489: CALL_OW 251
47493: ST_TO_ADDR
// if not x or not y then
47494: LD_VAR 0 10
47498: NOT
47499: PUSH
47500: LD_VAR 0 11
47504: NOT
47505: OR
47506: IFFALSE 47510
// exit ;
47508: GO 48543
// weapon := 0 ;
47510: LD_ADDR_VAR 0 18
47514: PUSH
47515: LD_INT 0
47517: ST_TO_ADDR
// fac_list := [ ] ;
47518: LD_ADDR_VAR 0 17
47522: PUSH
47523: EMPTY
47524: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47525: LD_ADDR_VAR 0 6
47529: PUSH
47530: LD_VAR 0 1
47534: PPUSH
47535: CALL_OW 274
47539: PPUSH
47540: LD_VAR 0 2
47544: PPUSH
47545: LD_INT 0
47547: PPUSH
47548: CALL 45114 0 3
47552: PPUSH
47553: LD_INT 30
47555: PUSH
47556: LD_INT 3
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PPUSH
47563: CALL_OW 72
47567: ST_TO_ADDR
// if not factories then
47568: LD_VAR 0 6
47572: NOT
47573: IFFALSE 47577
// exit ;
47575: GO 48543
// for i in factories do
47577: LD_ADDR_VAR 0 8
47581: PUSH
47582: LD_VAR 0 6
47586: PUSH
47587: FOR_IN
47588: IFFALSE 47613
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47590: LD_ADDR_VAR 0 17
47594: PUSH
47595: LD_VAR 0 17
47599: PUSH
47600: LD_VAR 0 8
47604: PPUSH
47605: CALL_OW 478
47609: UNION
47610: ST_TO_ADDR
47611: GO 47587
47613: POP
47614: POP
// if not fac_list then
47615: LD_VAR 0 17
47619: NOT
47620: IFFALSE 47624
// exit ;
47622: GO 48543
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47624: LD_ADDR_VAR 0 5
47628: PUSH
47629: LD_INT 4
47631: PUSH
47632: LD_INT 5
47634: PUSH
47635: LD_INT 9
47637: PUSH
47638: LD_INT 10
47640: PUSH
47641: LD_INT 6
47643: PUSH
47644: LD_INT 7
47646: PUSH
47647: LD_INT 11
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 27
47661: PUSH
47662: LD_INT 28
47664: PUSH
47665: LD_INT 26
47667: PUSH
47668: LD_INT 30
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 43
47679: PUSH
47680: LD_INT 44
47682: PUSH
47683: LD_INT 46
47685: PUSH
47686: LD_INT 45
47688: PUSH
47689: LD_INT 47
47691: PUSH
47692: LD_INT 49
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: PUSH
47708: LD_VAR 0 12
47712: ARRAY
47713: ST_TO_ADDR
// list := list isect fac_list ;
47714: LD_ADDR_VAR 0 5
47718: PUSH
47719: LD_VAR 0 5
47723: PUSH
47724: LD_VAR 0 17
47728: ISECT
47729: ST_TO_ADDR
// if not list then
47730: LD_VAR 0 5
47734: NOT
47735: IFFALSE 47739
// exit ;
47737: GO 48543
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47739: LD_VAR 0 12
47743: PUSH
47744: LD_INT 3
47746: EQUAL
47747: PUSH
47748: LD_INT 49
47750: PUSH
47751: LD_VAR 0 5
47755: IN
47756: AND
47757: PUSH
47758: LD_INT 31
47760: PPUSH
47761: LD_VAR 0 16
47765: PPUSH
47766: CALL_OW 321
47770: PUSH
47771: LD_INT 2
47773: EQUAL
47774: AND
47775: IFFALSE 47835
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47777: LD_INT 22
47779: PUSH
47780: LD_VAR 0 16
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 35
47791: PUSH
47792: LD_INT 49
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 91
47801: PUSH
47802: LD_VAR 0 1
47806: PUSH
47807: LD_INT 10
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: LIST
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: LIST
47819: PPUSH
47820: CALL_OW 69
47824: NOT
47825: IFFALSE 47835
// weapon := ru_time_lapser ;
47827: LD_ADDR_VAR 0 18
47831: PUSH
47832: LD_INT 49
47834: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47835: LD_VAR 0 12
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: IN
47850: PUSH
47851: LD_INT 11
47853: PUSH
47854: LD_VAR 0 5
47858: IN
47859: PUSH
47860: LD_INT 30
47862: PUSH
47863: LD_VAR 0 5
47867: IN
47868: OR
47869: AND
47870: PUSH
47871: LD_INT 6
47873: PPUSH
47874: LD_VAR 0 16
47878: PPUSH
47879: CALL_OW 321
47883: PUSH
47884: LD_INT 2
47886: EQUAL
47887: AND
47888: IFFALSE 48053
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47890: LD_INT 22
47892: PUSH
47893: LD_VAR 0 16
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: LD_INT 35
47907: PUSH
47908: LD_INT 11
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 35
47917: PUSH
47918: LD_INT 30
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 91
47932: PUSH
47933: LD_VAR 0 1
47937: PUSH
47938: LD_INT 18
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: LIST
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: LIST
47950: PPUSH
47951: CALL_OW 69
47955: NOT
47956: PUSH
47957: LD_INT 22
47959: PUSH
47960: LD_VAR 0 16
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: LD_INT 30
47974: PUSH
47975: LD_INT 32
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 30
47984: PUSH
47985: LD_INT 33
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 91
47999: PUSH
48000: LD_VAR 0 1
48004: PUSH
48005: LD_INT 12
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: LIST
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: LIST
48017: PUSH
48018: EMPTY
48019: LIST
48020: PPUSH
48021: CALL_OW 69
48025: PUSH
48026: LD_INT 2
48028: GREATER
48029: AND
48030: IFFALSE 48053
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48032: LD_ADDR_VAR 0 18
48036: PUSH
48037: LD_INT 11
48039: PUSH
48040: LD_INT 30
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_VAR 0 12
48051: ARRAY
48052: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48053: LD_VAR 0 18
48057: NOT
48058: PUSH
48059: LD_INT 40
48061: PPUSH
48062: LD_VAR 0 16
48066: PPUSH
48067: CALL_OW 321
48071: PUSH
48072: LD_INT 2
48074: EQUAL
48075: AND
48076: PUSH
48077: LD_INT 7
48079: PUSH
48080: LD_VAR 0 5
48084: IN
48085: PUSH
48086: LD_INT 28
48088: PUSH
48089: LD_VAR 0 5
48093: IN
48094: OR
48095: PUSH
48096: LD_INT 45
48098: PUSH
48099: LD_VAR 0 5
48103: IN
48104: OR
48105: AND
48106: IFFALSE 48360
// begin hex := GetHexInfo ( x , y ) ;
48108: LD_ADDR_VAR 0 4
48112: PUSH
48113: LD_VAR 0 10
48117: PPUSH
48118: LD_VAR 0 11
48122: PPUSH
48123: CALL_OW 546
48127: ST_TO_ADDR
// if hex [ 1 ] then
48128: LD_VAR 0 4
48132: PUSH
48133: LD_INT 1
48135: ARRAY
48136: IFFALSE 48140
// exit ;
48138: GO 48543
// height := hex [ 2 ] ;
48140: LD_ADDR_VAR 0 15
48144: PUSH
48145: LD_VAR 0 4
48149: PUSH
48150: LD_INT 2
48152: ARRAY
48153: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48154: LD_ADDR_VAR 0 14
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 3
48167: PUSH
48168: LD_INT 5
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: ST_TO_ADDR
// for i in tmp do
48177: LD_ADDR_VAR 0 8
48181: PUSH
48182: LD_VAR 0 14
48186: PUSH
48187: FOR_IN
48188: IFFALSE 48358
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48190: LD_ADDR_VAR 0 9
48194: PUSH
48195: LD_VAR 0 10
48199: PPUSH
48200: LD_VAR 0 8
48204: PPUSH
48205: LD_INT 5
48207: PPUSH
48208: CALL_OW 272
48212: PUSH
48213: LD_VAR 0 11
48217: PPUSH
48218: LD_VAR 0 8
48222: PPUSH
48223: LD_INT 5
48225: PPUSH
48226: CALL_OW 273
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48235: LD_VAR 0 9
48239: PUSH
48240: LD_INT 1
48242: ARRAY
48243: PPUSH
48244: LD_VAR 0 9
48248: PUSH
48249: LD_INT 2
48251: ARRAY
48252: PPUSH
48253: CALL_OW 488
48257: IFFALSE 48356
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48259: LD_ADDR_VAR 0 4
48263: PUSH
48264: LD_VAR 0 9
48268: PUSH
48269: LD_INT 1
48271: ARRAY
48272: PPUSH
48273: LD_VAR 0 9
48277: PUSH
48278: LD_INT 2
48280: ARRAY
48281: PPUSH
48282: CALL_OW 546
48286: ST_TO_ADDR
// if hex [ 1 ] then
48287: LD_VAR 0 4
48291: PUSH
48292: LD_INT 1
48294: ARRAY
48295: IFFALSE 48299
// continue ;
48297: GO 48187
// h := hex [ 2 ] ;
48299: LD_ADDR_VAR 0 13
48303: PUSH
48304: LD_VAR 0 4
48308: PUSH
48309: LD_INT 2
48311: ARRAY
48312: ST_TO_ADDR
// if h + 7 < height then
48313: LD_VAR 0 13
48317: PUSH
48318: LD_INT 7
48320: PLUS
48321: PUSH
48322: LD_VAR 0 15
48326: LESS
48327: IFFALSE 48356
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48329: LD_ADDR_VAR 0 18
48333: PUSH
48334: LD_INT 7
48336: PUSH
48337: LD_INT 28
48339: PUSH
48340: LD_INT 45
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: LIST
48347: PUSH
48348: LD_VAR 0 12
48352: ARRAY
48353: ST_TO_ADDR
// break ;
48354: GO 48358
// end ; end ; end ;
48356: GO 48187
48358: POP
48359: POP
// end ; if not weapon then
48360: LD_VAR 0 18
48364: NOT
48365: IFFALSE 48425
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48367: LD_ADDR_VAR 0 5
48371: PUSH
48372: LD_VAR 0 5
48376: PUSH
48377: LD_INT 11
48379: PUSH
48380: LD_INT 30
48382: PUSH
48383: LD_INT 49
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: LIST
48390: DIFF
48391: ST_TO_ADDR
// if not list then
48392: LD_VAR 0 5
48396: NOT
48397: IFFALSE 48401
// exit ;
48399: GO 48543
// weapon := list [ rand ( 1 , list ) ] ;
48401: LD_ADDR_VAR 0 18
48405: PUSH
48406: LD_VAR 0 5
48410: PUSH
48411: LD_INT 1
48413: PPUSH
48414: LD_VAR 0 5
48418: PPUSH
48419: CALL_OW 12
48423: ARRAY
48424: ST_TO_ADDR
// end ; if weapon then
48425: LD_VAR 0 18
48429: IFFALSE 48543
// begin tmp := CostOfWeapon ( weapon ) ;
48431: LD_ADDR_VAR 0 14
48435: PUSH
48436: LD_VAR 0 18
48440: PPUSH
48441: CALL_OW 451
48445: ST_TO_ADDR
// j := GetBase ( tower ) ;
48446: LD_ADDR_VAR 0 9
48450: PUSH
48451: LD_VAR 0 1
48455: PPUSH
48456: CALL_OW 274
48460: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48461: LD_VAR 0 9
48465: PPUSH
48466: LD_INT 1
48468: PPUSH
48469: CALL_OW 275
48473: PUSH
48474: LD_VAR 0 14
48478: PUSH
48479: LD_INT 1
48481: ARRAY
48482: GREATEREQUAL
48483: PUSH
48484: LD_VAR 0 9
48488: PPUSH
48489: LD_INT 2
48491: PPUSH
48492: CALL_OW 275
48496: PUSH
48497: LD_VAR 0 14
48501: PUSH
48502: LD_INT 2
48504: ARRAY
48505: GREATEREQUAL
48506: AND
48507: PUSH
48508: LD_VAR 0 9
48512: PPUSH
48513: LD_INT 3
48515: PPUSH
48516: CALL_OW 275
48520: PUSH
48521: LD_VAR 0 14
48525: PUSH
48526: LD_INT 3
48528: ARRAY
48529: GREATEREQUAL
48530: AND
48531: IFFALSE 48543
// result := weapon ;
48533: LD_ADDR_VAR 0 3
48537: PUSH
48538: LD_VAR 0 18
48542: ST_TO_ADDR
// end ; end ;
48543: LD_VAR 0 3
48547: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48548: LD_INT 0
48550: PPUSH
48551: PPUSH
// result := true ;
48552: LD_ADDR_VAR 0 3
48556: PUSH
48557: LD_INT 1
48559: ST_TO_ADDR
// if array1 = array2 then
48560: LD_VAR 0 1
48564: PUSH
48565: LD_VAR 0 2
48569: EQUAL
48570: IFFALSE 48630
// begin for i = 1 to array1 do
48572: LD_ADDR_VAR 0 4
48576: PUSH
48577: DOUBLE
48578: LD_INT 1
48580: DEC
48581: ST_TO_ADDR
48582: LD_VAR 0 1
48586: PUSH
48587: FOR_TO
48588: IFFALSE 48626
// if array1 [ i ] <> array2 [ i ] then
48590: LD_VAR 0 1
48594: PUSH
48595: LD_VAR 0 4
48599: ARRAY
48600: PUSH
48601: LD_VAR 0 2
48605: PUSH
48606: LD_VAR 0 4
48610: ARRAY
48611: NONEQUAL
48612: IFFALSE 48624
// begin result := false ;
48614: LD_ADDR_VAR 0 3
48618: PUSH
48619: LD_INT 0
48621: ST_TO_ADDR
// break ;
48622: GO 48626
// end ;
48624: GO 48587
48626: POP
48627: POP
// end else
48628: GO 48638
// result := false ;
48630: LD_ADDR_VAR 0 3
48634: PUSH
48635: LD_INT 0
48637: ST_TO_ADDR
// end ;
48638: LD_VAR 0 3
48642: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48643: LD_INT 0
48645: PPUSH
48646: PPUSH
// if not array1 or not array2 then
48647: LD_VAR 0 1
48651: NOT
48652: PUSH
48653: LD_VAR 0 2
48657: NOT
48658: OR
48659: IFFALSE 48663
// exit ;
48661: GO 48727
// result := true ;
48663: LD_ADDR_VAR 0 3
48667: PUSH
48668: LD_INT 1
48670: ST_TO_ADDR
// for i = 1 to array1 do
48671: LD_ADDR_VAR 0 4
48675: PUSH
48676: DOUBLE
48677: LD_INT 1
48679: DEC
48680: ST_TO_ADDR
48681: LD_VAR 0 1
48685: PUSH
48686: FOR_TO
48687: IFFALSE 48725
// if array1 [ i ] <> array2 [ i ] then
48689: LD_VAR 0 1
48693: PUSH
48694: LD_VAR 0 4
48698: ARRAY
48699: PUSH
48700: LD_VAR 0 2
48704: PUSH
48705: LD_VAR 0 4
48709: ARRAY
48710: NONEQUAL
48711: IFFALSE 48723
// begin result := false ;
48713: LD_ADDR_VAR 0 3
48717: PUSH
48718: LD_INT 0
48720: ST_TO_ADDR
// break ;
48721: GO 48725
// end ;
48723: GO 48686
48725: POP
48726: POP
// end ;
48727: LD_VAR 0 3
48731: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48732: LD_INT 0
48734: PPUSH
48735: PPUSH
48736: PPUSH
// pom := GetBase ( fac ) ;
48737: LD_ADDR_VAR 0 5
48741: PUSH
48742: LD_VAR 0 1
48746: PPUSH
48747: CALL_OW 274
48751: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48752: LD_ADDR_VAR 0 4
48756: PUSH
48757: LD_VAR 0 2
48761: PUSH
48762: LD_INT 1
48764: ARRAY
48765: PPUSH
48766: LD_VAR 0 2
48770: PUSH
48771: LD_INT 2
48773: ARRAY
48774: PPUSH
48775: LD_VAR 0 2
48779: PUSH
48780: LD_INT 3
48782: ARRAY
48783: PPUSH
48784: LD_VAR 0 2
48788: PUSH
48789: LD_INT 4
48791: ARRAY
48792: PPUSH
48793: CALL_OW 449
48797: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48798: LD_ADDR_VAR 0 3
48802: PUSH
48803: LD_VAR 0 5
48807: PPUSH
48808: LD_INT 1
48810: PPUSH
48811: CALL_OW 275
48815: PUSH
48816: LD_VAR 0 4
48820: PUSH
48821: LD_INT 1
48823: ARRAY
48824: GREATEREQUAL
48825: PUSH
48826: LD_VAR 0 5
48830: PPUSH
48831: LD_INT 2
48833: PPUSH
48834: CALL_OW 275
48838: PUSH
48839: LD_VAR 0 4
48843: PUSH
48844: LD_INT 2
48846: ARRAY
48847: GREATEREQUAL
48848: AND
48849: PUSH
48850: LD_VAR 0 5
48854: PPUSH
48855: LD_INT 3
48857: PPUSH
48858: CALL_OW 275
48862: PUSH
48863: LD_VAR 0 4
48867: PUSH
48868: LD_INT 3
48870: ARRAY
48871: GREATEREQUAL
48872: AND
48873: ST_TO_ADDR
// end ;
48874: LD_VAR 0 3
48878: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48879: LD_INT 0
48881: PPUSH
48882: PPUSH
48883: PPUSH
48884: PPUSH
// pom := GetBase ( building ) ;
48885: LD_ADDR_VAR 0 3
48889: PUSH
48890: LD_VAR 0 1
48894: PPUSH
48895: CALL_OW 274
48899: ST_TO_ADDR
// if not pom then
48900: LD_VAR 0 3
48904: NOT
48905: IFFALSE 48909
// exit ;
48907: GO 49079
// btype := GetBType ( building ) ;
48909: LD_ADDR_VAR 0 5
48913: PUSH
48914: LD_VAR 0 1
48918: PPUSH
48919: CALL_OW 266
48923: ST_TO_ADDR
// if btype = b_armoury then
48924: LD_VAR 0 5
48928: PUSH
48929: LD_INT 4
48931: EQUAL
48932: IFFALSE 48942
// btype := b_barracks ;
48934: LD_ADDR_VAR 0 5
48938: PUSH
48939: LD_INT 5
48941: ST_TO_ADDR
// if btype = b_depot then
48942: LD_VAR 0 5
48946: PUSH
48947: LD_INT 0
48949: EQUAL
48950: IFFALSE 48960
// btype := b_warehouse ;
48952: LD_ADDR_VAR 0 5
48956: PUSH
48957: LD_INT 1
48959: ST_TO_ADDR
// if btype = b_workshop then
48960: LD_VAR 0 5
48964: PUSH
48965: LD_INT 2
48967: EQUAL
48968: IFFALSE 48978
// btype := b_factory ;
48970: LD_ADDR_VAR 0 5
48974: PUSH
48975: LD_INT 3
48977: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48978: LD_ADDR_VAR 0 4
48982: PUSH
48983: LD_VAR 0 5
48987: PPUSH
48988: LD_VAR 0 1
48992: PPUSH
48993: CALL_OW 248
48997: PPUSH
48998: CALL_OW 450
49002: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49003: LD_ADDR_VAR 0 2
49007: PUSH
49008: LD_VAR 0 3
49012: PPUSH
49013: LD_INT 1
49015: PPUSH
49016: CALL_OW 275
49020: PUSH
49021: LD_VAR 0 4
49025: PUSH
49026: LD_INT 1
49028: ARRAY
49029: GREATEREQUAL
49030: PUSH
49031: LD_VAR 0 3
49035: PPUSH
49036: LD_INT 2
49038: PPUSH
49039: CALL_OW 275
49043: PUSH
49044: LD_VAR 0 4
49048: PUSH
49049: LD_INT 2
49051: ARRAY
49052: GREATEREQUAL
49053: AND
49054: PUSH
49055: LD_VAR 0 3
49059: PPUSH
49060: LD_INT 3
49062: PPUSH
49063: CALL_OW 275
49067: PUSH
49068: LD_VAR 0 4
49072: PUSH
49073: LD_INT 3
49075: ARRAY
49076: GREATEREQUAL
49077: AND
49078: ST_TO_ADDR
// end ;
49079: LD_VAR 0 2
49083: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49084: LD_INT 0
49086: PPUSH
49087: PPUSH
49088: PPUSH
// pom := GetBase ( building ) ;
49089: LD_ADDR_VAR 0 4
49093: PUSH
49094: LD_VAR 0 1
49098: PPUSH
49099: CALL_OW 274
49103: ST_TO_ADDR
// if not pom then
49104: LD_VAR 0 4
49108: NOT
49109: IFFALSE 49113
// exit ;
49111: GO 49214
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49113: LD_ADDR_VAR 0 5
49117: PUSH
49118: LD_VAR 0 2
49122: PPUSH
49123: LD_VAR 0 1
49127: PPUSH
49128: CALL_OW 248
49132: PPUSH
49133: CALL_OW 450
49137: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49138: LD_ADDR_VAR 0 3
49142: PUSH
49143: LD_VAR 0 4
49147: PPUSH
49148: LD_INT 1
49150: PPUSH
49151: CALL_OW 275
49155: PUSH
49156: LD_VAR 0 5
49160: PUSH
49161: LD_INT 1
49163: ARRAY
49164: GREATEREQUAL
49165: PUSH
49166: LD_VAR 0 4
49170: PPUSH
49171: LD_INT 2
49173: PPUSH
49174: CALL_OW 275
49178: PUSH
49179: LD_VAR 0 5
49183: PUSH
49184: LD_INT 2
49186: ARRAY
49187: GREATEREQUAL
49188: AND
49189: PUSH
49190: LD_VAR 0 4
49194: PPUSH
49195: LD_INT 3
49197: PPUSH
49198: CALL_OW 275
49202: PUSH
49203: LD_VAR 0 5
49207: PUSH
49208: LD_INT 3
49210: ARRAY
49211: GREATEREQUAL
49212: AND
49213: ST_TO_ADDR
// end ;
49214: LD_VAR 0 3
49218: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49219: LD_INT 0
49221: PPUSH
49222: PPUSH
49223: PPUSH
49224: PPUSH
49225: PPUSH
49226: PPUSH
49227: PPUSH
49228: PPUSH
49229: PPUSH
49230: PPUSH
49231: PPUSH
// result := false ;
49232: LD_ADDR_VAR 0 8
49236: PUSH
49237: LD_INT 0
49239: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49240: LD_VAR 0 5
49244: NOT
49245: PUSH
49246: LD_VAR 0 1
49250: NOT
49251: OR
49252: PUSH
49253: LD_VAR 0 2
49257: NOT
49258: OR
49259: PUSH
49260: LD_VAR 0 3
49264: NOT
49265: OR
49266: IFFALSE 49270
// exit ;
49268: GO 50084
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49270: LD_ADDR_VAR 0 14
49274: PUSH
49275: LD_VAR 0 1
49279: PPUSH
49280: LD_VAR 0 2
49284: PPUSH
49285: LD_VAR 0 3
49289: PPUSH
49290: LD_VAR 0 4
49294: PPUSH
49295: LD_VAR 0 5
49299: PUSH
49300: LD_INT 1
49302: ARRAY
49303: PPUSH
49304: CALL_OW 248
49308: PPUSH
49309: LD_INT 0
49311: PPUSH
49312: CALL 51321 0 6
49316: ST_TO_ADDR
// if not hexes then
49317: LD_VAR 0 14
49321: NOT
49322: IFFALSE 49326
// exit ;
49324: GO 50084
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49326: LD_ADDR_VAR 0 17
49330: PUSH
49331: LD_VAR 0 5
49335: PPUSH
49336: LD_INT 22
49338: PUSH
49339: LD_VAR 0 13
49343: PPUSH
49344: CALL_OW 255
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: LD_INT 30
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 30
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PPUSH
49385: CALL_OW 72
49389: ST_TO_ADDR
// for i = 1 to hexes do
49390: LD_ADDR_VAR 0 9
49394: PUSH
49395: DOUBLE
49396: LD_INT 1
49398: DEC
49399: ST_TO_ADDR
49400: LD_VAR 0 14
49404: PUSH
49405: FOR_TO
49406: IFFALSE 50082
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49408: LD_ADDR_VAR 0 13
49412: PUSH
49413: LD_VAR 0 14
49417: PUSH
49418: LD_VAR 0 9
49422: ARRAY
49423: PUSH
49424: LD_INT 1
49426: ARRAY
49427: PPUSH
49428: LD_VAR 0 14
49432: PUSH
49433: LD_VAR 0 9
49437: ARRAY
49438: PUSH
49439: LD_INT 2
49441: ARRAY
49442: PPUSH
49443: CALL_OW 428
49447: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49448: LD_VAR 0 14
49452: PUSH
49453: LD_VAR 0 9
49457: ARRAY
49458: PUSH
49459: LD_INT 1
49461: ARRAY
49462: PPUSH
49463: LD_VAR 0 14
49467: PUSH
49468: LD_VAR 0 9
49472: ARRAY
49473: PUSH
49474: LD_INT 2
49476: ARRAY
49477: PPUSH
49478: CALL_OW 351
49482: PUSH
49483: LD_VAR 0 14
49487: PUSH
49488: LD_VAR 0 9
49492: ARRAY
49493: PUSH
49494: LD_INT 1
49496: ARRAY
49497: PPUSH
49498: LD_VAR 0 14
49502: PUSH
49503: LD_VAR 0 9
49507: ARRAY
49508: PUSH
49509: LD_INT 2
49511: ARRAY
49512: PPUSH
49513: CALL_OW 488
49517: NOT
49518: OR
49519: PUSH
49520: LD_VAR 0 13
49524: PPUSH
49525: CALL_OW 247
49529: PUSH
49530: LD_INT 3
49532: EQUAL
49533: OR
49534: IFFALSE 49540
// exit ;
49536: POP
49537: POP
49538: GO 50084
// if not tmp then
49540: LD_VAR 0 13
49544: NOT
49545: IFFALSE 49549
// continue ;
49547: GO 49405
// result := true ;
49549: LD_ADDR_VAR 0 8
49553: PUSH
49554: LD_INT 1
49556: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49557: LD_VAR 0 6
49561: PUSH
49562: LD_VAR 0 13
49566: PPUSH
49567: CALL_OW 247
49571: PUSH
49572: LD_INT 2
49574: EQUAL
49575: AND
49576: PUSH
49577: LD_VAR 0 13
49581: PPUSH
49582: CALL_OW 263
49586: PUSH
49587: LD_INT 1
49589: EQUAL
49590: AND
49591: IFFALSE 49755
// begin if IsDrivenBy ( tmp ) then
49593: LD_VAR 0 13
49597: PPUSH
49598: CALL_OW 311
49602: IFFALSE 49606
// continue ;
49604: GO 49405
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49606: LD_VAR 0 6
49610: PPUSH
49611: LD_INT 3
49613: PUSH
49614: LD_INT 60
49616: PUSH
49617: EMPTY
49618: LIST
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 3
49626: PUSH
49627: LD_INT 55
49629: PUSH
49630: EMPTY
49631: LIST
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PPUSH
49641: CALL_OW 72
49645: IFFALSE 49753
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49647: LD_ADDR_VAR 0 18
49651: PUSH
49652: LD_VAR 0 6
49656: PPUSH
49657: LD_INT 3
49659: PUSH
49660: LD_INT 60
49662: PUSH
49663: EMPTY
49664: LIST
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: PUSH
49673: LD_INT 55
49675: PUSH
49676: EMPTY
49677: LIST
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PPUSH
49687: CALL_OW 72
49691: PUSH
49692: LD_INT 1
49694: ARRAY
49695: ST_TO_ADDR
// if IsInUnit ( driver ) then
49696: LD_VAR 0 18
49700: PPUSH
49701: CALL_OW 310
49705: IFFALSE 49716
// ComExit ( driver ) ;
49707: LD_VAR 0 18
49711: PPUSH
49712: CALL 74505 0 1
// AddComEnterUnit ( driver , tmp ) ;
49716: LD_VAR 0 18
49720: PPUSH
49721: LD_VAR 0 13
49725: PPUSH
49726: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49730: LD_VAR 0 18
49734: PPUSH
49735: LD_VAR 0 7
49739: PPUSH
49740: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49744: LD_VAR 0 18
49748: PPUSH
49749: CALL_OW 181
// end ; continue ;
49753: GO 49405
// end ; if not cleaners or not tmp in cleaners then
49755: LD_VAR 0 6
49759: NOT
49760: PUSH
49761: LD_VAR 0 13
49765: PUSH
49766: LD_VAR 0 6
49770: IN
49771: NOT
49772: OR
49773: IFFALSE 50080
// begin if dep then
49775: LD_VAR 0 17
49779: IFFALSE 49915
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49781: LD_ADDR_VAR 0 16
49785: PUSH
49786: LD_VAR 0 17
49790: PUSH
49791: LD_INT 1
49793: ARRAY
49794: PPUSH
49795: CALL_OW 250
49799: PPUSH
49800: LD_VAR 0 17
49804: PUSH
49805: LD_INT 1
49807: ARRAY
49808: PPUSH
49809: CALL_OW 254
49813: PPUSH
49814: LD_INT 5
49816: PPUSH
49817: CALL_OW 272
49821: PUSH
49822: LD_VAR 0 17
49826: PUSH
49827: LD_INT 1
49829: ARRAY
49830: PPUSH
49831: CALL_OW 251
49835: PPUSH
49836: LD_VAR 0 17
49840: PUSH
49841: LD_INT 1
49843: ARRAY
49844: PPUSH
49845: CALL_OW 254
49849: PPUSH
49850: LD_INT 5
49852: PPUSH
49853: CALL_OW 273
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49862: LD_VAR 0 16
49866: PUSH
49867: LD_INT 1
49869: ARRAY
49870: PPUSH
49871: LD_VAR 0 16
49875: PUSH
49876: LD_INT 2
49878: ARRAY
49879: PPUSH
49880: CALL_OW 488
49884: IFFALSE 49915
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49886: LD_VAR 0 13
49890: PPUSH
49891: LD_VAR 0 16
49895: PUSH
49896: LD_INT 1
49898: ARRAY
49899: PPUSH
49900: LD_VAR 0 16
49904: PUSH
49905: LD_INT 2
49907: ARRAY
49908: PPUSH
49909: CALL_OW 111
// continue ;
49913: GO 49405
// end ; end ; r := GetDir ( tmp ) ;
49915: LD_ADDR_VAR 0 15
49919: PUSH
49920: LD_VAR 0 13
49924: PPUSH
49925: CALL_OW 254
49929: ST_TO_ADDR
// if r = 5 then
49930: LD_VAR 0 15
49934: PUSH
49935: LD_INT 5
49937: EQUAL
49938: IFFALSE 49948
// r := 0 ;
49940: LD_ADDR_VAR 0 15
49944: PUSH
49945: LD_INT 0
49947: ST_TO_ADDR
// for j = r to 5 do
49948: LD_ADDR_VAR 0 10
49952: PUSH
49953: DOUBLE
49954: LD_VAR 0 15
49958: DEC
49959: ST_TO_ADDR
49960: LD_INT 5
49962: PUSH
49963: FOR_TO
49964: IFFALSE 50078
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49966: LD_ADDR_VAR 0 11
49970: PUSH
49971: LD_VAR 0 13
49975: PPUSH
49976: CALL_OW 250
49980: PPUSH
49981: LD_VAR 0 10
49985: PPUSH
49986: LD_INT 2
49988: PPUSH
49989: CALL_OW 272
49993: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49994: LD_ADDR_VAR 0 12
49998: PUSH
49999: LD_VAR 0 13
50003: PPUSH
50004: CALL_OW 251
50008: PPUSH
50009: LD_VAR 0 10
50013: PPUSH
50014: LD_INT 2
50016: PPUSH
50017: CALL_OW 273
50021: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50022: LD_VAR 0 11
50026: PPUSH
50027: LD_VAR 0 12
50031: PPUSH
50032: CALL_OW 488
50036: PUSH
50037: LD_VAR 0 11
50041: PPUSH
50042: LD_VAR 0 12
50046: PPUSH
50047: CALL_OW 428
50051: NOT
50052: AND
50053: IFFALSE 50076
// begin ComMoveXY ( tmp , _x , _y ) ;
50055: LD_VAR 0 13
50059: PPUSH
50060: LD_VAR 0 11
50064: PPUSH
50065: LD_VAR 0 12
50069: PPUSH
50070: CALL_OW 111
// break ;
50074: GO 50078
// end ; end ;
50076: GO 49963
50078: POP
50079: POP
// end ; end ;
50080: GO 49405
50082: POP
50083: POP
// end ;
50084: LD_VAR 0 8
50088: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50089: LD_INT 0
50091: PPUSH
// result := true ;
50092: LD_ADDR_VAR 0 3
50096: PUSH
50097: LD_INT 1
50099: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50100: LD_VAR 0 2
50104: PUSH
50105: LD_INT 24
50107: DOUBLE
50108: EQUAL
50109: IFTRUE 50119
50111: LD_INT 33
50113: DOUBLE
50114: EQUAL
50115: IFTRUE 50119
50117: GO 50144
50119: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50120: LD_ADDR_VAR 0 3
50124: PUSH
50125: LD_INT 32
50127: PPUSH
50128: LD_VAR 0 1
50132: PPUSH
50133: CALL_OW 321
50137: PUSH
50138: LD_INT 2
50140: EQUAL
50141: ST_TO_ADDR
50142: GO 50464
50144: LD_INT 20
50146: DOUBLE
50147: EQUAL
50148: IFTRUE 50152
50150: GO 50177
50152: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50153: LD_ADDR_VAR 0 3
50157: PUSH
50158: LD_INT 6
50160: PPUSH
50161: LD_VAR 0 1
50165: PPUSH
50166: CALL_OW 321
50170: PUSH
50171: LD_INT 2
50173: EQUAL
50174: ST_TO_ADDR
50175: GO 50464
50177: LD_INT 22
50179: DOUBLE
50180: EQUAL
50181: IFTRUE 50191
50183: LD_INT 36
50185: DOUBLE
50186: EQUAL
50187: IFTRUE 50191
50189: GO 50216
50191: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50192: LD_ADDR_VAR 0 3
50196: PUSH
50197: LD_INT 15
50199: PPUSH
50200: LD_VAR 0 1
50204: PPUSH
50205: CALL_OW 321
50209: PUSH
50210: LD_INT 2
50212: EQUAL
50213: ST_TO_ADDR
50214: GO 50464
50216: LD_INT 30
50218: DOUBLE
50219: EQUAL
50220: IFTRUE 50224
50222: GO 50249
50224: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50225: LD_ADDR_VAR 0 3
50229: PUSH
50230: LD_INT 20
50232: PPUSH
50233: LD_VAR 0 1
50237: PPUSH
50238: CALL_OW 321
50242: PUSH
50243: LD_INT 2
50245: EQUAL
50246: ST_TO_ADDR
50247: GO 50464
50249: LD_INT 28
50251: DOUBLE
50252: EQUAL
50253: IFTRUE 50263
50255: LD_INT 21
50257: DOUBLE
50258: EQUAL
50259: IFTRUE 50263
50261: GO 50288
50263: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50264: LD_ADDR_VAR 0 3
50268: PUSH
50269: LD_INT 21
50271: PPUSH
50272: LD_VAR 0 1
50276: PPUSH
50277: CALL_OW 321
50281: PUSH
50282: LD_INT 2
50284: EQUAL
50285: ST_TO_ADDR
50286: GO 50464
50288: LD_INT 16
50290: DOUBLE
50291: EQUAL
50292: IFTRUE 50296
50294: GO 50323
50296: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50297: LD_ADDR_VAR 0 3
50301: PUSH
50302: LD_EXP 60
50306: PPUSH
50307: LD_VAR 0 1
50311: PPUSH
50312: CALL_OW 321
50316: PUSH
50317: LD_INT 2
50319: EQUAL
50320: ST_TO_ADDR
50321: GO 50464
50323: LD_INT 19
50325: DOUBLE
50326: EQUAL
50327: IFTRUE 50337
50329: LD_INT 23
50331: DOUBLE
50332: EQUAL
50333: IFTRUE 50337
50335: GO 50364
50337: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50338: LD_ADDR_VAR 0 3
50342: PUSH
50343: LD_EXP 59
50347: PPUSH
50348: LD_VAR 0 1
50352: PPUSH
50353: CALL_OW 321
50357: PUSH
50358: LD_INT 2
50360: EQUAL
50361: ST_TO_ADDR
50362: GO 50464
50364: LD_INT 17
50366: DOUBLE
50367: EQUAL
50368: IFTRUE 50372
50370: GO 50397
50372: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50373: LD_ADDR_VAR 0 3
50377: PUSH
50378: LD_INT 39
50380: PPUSH
50381: LD_VAR 0 1
50385: PPUSH
50386: CALL_OW 321
50390: PUSH
50391: LD_INT 2
50393: EQUAL
50394: ST_TO_ADDR
50395: GO 50464
50397: LD_INT 18
50399: DOUBLE
50400: EQUAL
50401: IFTRUE 50405
50403: GO 50430
50405: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50406: LD_ADDR_VAR 0 3
50410: PUSH
50411: LD_INT 40
50413: PPUSH
50414: LD_VAR 0 1
50418: PPUSH
50419: CALL_OW 321
50423: PUSH
50424: LD_INT 2
50426: EQUAL
50427: ST_TO_ADDR
50428: GO 50464
50430: LD_INT 27
50432: DOUBLE
50433: EQUAL
50434: IFTRUE 50438
50436: GO 50463
50438: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50439: LD_ADDR_VAR 0 3
50443: PUSH
50444: LD_INT 35
50446: PPUSH
50447: LD_VAR 0 1
50451: PPUSH
50452: CALL_OW 321
50456: PUSH
50457: LD_INT 2
50459: EQUAL
50460: ST_TO_ADDR
50461: GO 50464
50463: POP
// end ;
50464: LD_VAR 0 3
50468: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50469: LD_INT 0
50471: PPUSH
50472: PPUSH
50473: PPUSH
50474: PPUSH
50475: PPUSH
50476: PPUSH
50477: PPUSH
50478: PPUSH
50479: PPUSH
50480: PPUSH
50481: PPUSH
// result := false ;
50482: LD_ADDR_VAR 0 6
50486: PUSH
50487: LD_INT 0
50489: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50490: LD_VAR 0 1
50494: NOT
50495: PUSH
50496: LD_VAR 0 1
50500: PPUSH
50501: CALL_OW 266
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: IN
50516: NOT
50517: OR
50518: PUSH
50519: LD_VAR 0 2
50523: NOT
50524: OR
50525: PUSH
50526: LD_VAR 0 5
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: LD_INT 3
50542: PUSH
50543: LD_INT 4
50545: PUSH
50546: LD_INT 5
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: IN
50557: NOT
50558: OR
50559: PUSH
50560: LD_VAR 0 3
50564: PPUSH
50565: LD_VAR 0 4
50569: PPUSH
50570: CALL_OW 488
50574: NOT
50575: OR
50576: IFFALSE 50580
// exit ;
50578: GO 51316
// side := GetSide ( depot ) ;
50580: LD_ADDR_VAR 0 9
50584: PUSH
50585: LD_VAR 0 1
50589: PPUSH
50590: CALL_OW 255
50594: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50595: LD_VAR 0 9
50599: PPUSH
50600: LD_VAR 0 2
50604: PPUSH
50605: CALL 50089 0 2
50609: NOT
50610: IFFALSE 50614
// exit ;
50612: GO 51316
// pom := GetBase ( depot ) ;
50614: LD_ADDR_VAR 0 10
50618: PUSH
50619: LD_VAR 0 1
50623: PPUSH
50624: CALL_OW 274
50628: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50629: LD_ADDR_VAR 0 11
50633: PUSH
50634: LD_VAR 0 2
50638: PPUSH
50639: LD_VAR 0 1
50643: PPUSH
50644: CALL_OW 248
50648: PPUSH
50649: CALL_OW 450
50653: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50654: LD_VAR 0 10
50658: PPUSH
50659: LD_INT 1
50661: PPUSH
50662: CALL_OW 275
50666: PUSH
50667: LD_VAR 0 11
50671: PUSH
50672: LD_INT 1
50674: ARRAY
50675: GREATEREQUAL
50676: PUSH
50677: LD_VAR 0 10
50681: PPUSH
50682: LD_INT 2
50684: PPUSH
50685: CALL_OW 275
50689: PUSH
50690: LD_VAR 0 11
50694: PUSH
50695: LD_INT 2
50697: ARRAY
50698: GREATEREQUAL
50699: AND
50700: PUSH
50701: LD_VAR 0 10
50705: PPUSH
50706: LD_INT 3
50708: PPUSH
50709: CALL_OW 275
50713: PUSH
50714: LD_VAR 0 11
50718: PUSH
50719: LD_INT 3
50721: ARRAY
50722: GREATEREQUAL
50723: AND
50724: NOT
50725: IFFALSE 50729
// exit ;
50727: GO 51316
// if GetBType ( depot ) = b_depot then
50729: LD_VAR 0 1
50733: PPUSH
50734: CALL_OW 266
50738: PUSH
50739: LD_INT 0
50741: EQUAL
50742: IFFALSE 50754
// dist := 28 else
50744: LD_ADDR_VAR 0 14
50748: PUSH
50749: LD_INT 28
50751: ST_TO_ADDR
50752: GO 50762
// dist := 36 ;
50754: LD_ADDR_VAR 0 14
50758: PUSH
50759: LD_INT 36
50761: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50762: LD_VAR 0 1
50766: PPUSH
50767: LD_VAR 0 3
50771: PPUSH
50772: LD_VAR 0 4
50776: PPUSH
50777: CALL_OW 297
50781: PUSH
50782: LD_VAR 0 14
50786: GREATER
50787: IFFALSE 50791
// exit ;
50789: GO 51316
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50791: LD_ADDR_VAR 0 12
50795: PUSH
50796: LD_VAR 0 2
50800: PPUSH
50801: LD_VAR 0 3
50805: PPUSH
50806: LD_VAR 0 4
50810: PPUSH
50811: LD_VAR 0 5
50815: PPUSH
50816: LD_VAR 0 1
50820: PPUSH
50821: CALL_OW 248
50825: PPUSH
50826: LD_INT 0
50828: PPUSH
50829: CALL 51321 0 6
50833: ST_TO_ADDR
// if not hexes then
50834: LD_VAR 0 12
50838: NOT
50839: IFFALSE 50843
// exit ;
50841: GO 51316
// hex := GetHexInfo ( x , y ) ;
50843: LD_ADDR_VAR 0 15
50847: PUSH
50848: LD_VAR 0 3
50852: PPUSH
50853: LD_VAR 0 4
50857: PPUSH
50858: CALL_OW 546
50862: ST_TO_ADDR
// if hex [ 1 ] then
50863: LD_VAR 0 15
50867: PUSH
50868: LD_INT 1
50870: ARRAY
50871: IFFALSE 50875
// exit ;
50873: GO 51316
// height := hex [ 2 ] ;
50875: LD_ADDR_VAR 0 13
50879: PUSH
50880: LD_VAR 0 15
50884: PUSH
50885: LD_INT 2
50887: ARRAY
50888: ST_TO_ADDR
// for i = 1 to hexes do
50889: LD_ADDR_VAR 0 7
50893: PUSH
50894: DOUBLE
50895: LD_INT 1
50897: DEC
50898: ST_TO_ADDR
50899: LD_VAR 0 12
50903: PUSH
50904: FOR_TO
50905: IFFALSE 51235
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50907: LD_VAR 0 12
50911: PUSH
50912: LD_VAR 0 7
50916: ARRAY
50917: PUSH
50918: LD_INT 1
50920: ARRAY
50921: PPUSH
50922: LD_VAR 0 12
50926: PUSH
50927: LD_VAR 0 7
50931: ARRAY
50932: PUSH
50933: LD_INT 2
50935: ARRAY
50936: PPUSH
50937: CALL_OW 488
50941: NOT
50942: PUSH
50943: LD_VAR 0 12
50947: PUSH
50948: LD_VAR 0 7
50952: ARRAY
50953: PUSH
50954: LD_INT 1
50956: ARRAY
50957: PPUSH
50958: LD_VAR 0 12
50962: PUSH
50963: LD_VAR 0 7
50967: ARRAY
50968: PUSH
50969: LD_INT 2
50971: ARRAY
50972: PPUSH
50973: CALL_OW 428
50977: PUSH
50978: LD_INT 0
50980: GREATER
50981: OR
50982: PUSH
50983: LD_VAR 0 12
50987: PUSH
50988: LD_VAR 0 7
50992: ARRAY
50993: PUSH
50994: LD_INT 1
50996: ARRAY
50997: PPUSH
50998: LD_VAR 0 12
51002: PUSH
51003: LD_VAR 0 7
51007: ARRAY
51008: PUSH
51009: LD_INT 2
51011: ARRAY
51012: PPUSH
51013: CALL_OW 351
51017: OR
51018: IFFALSE 51024
// exit ;
51020: POP
51021: POP
51022: GO 51316
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51024: LD_ADDR_VAR 0 8
51028: PUSH
51029: LD_VAR 0 12
51033: PUSH
51034: LD_VAR 0 7
51038: ARRAY
51039: PUSH
51040: LD_INT 1
51042: ARRAY
51043: PPUSH
51044: LD_VAR 0 12
51048: PUSH
51049: LD_VAR 0 7
51053: ARRAY
51054: PUSH
51055: LD_INT 2
51057: ARRAY
51058: PPUSH
51059: CALL_OW 546
51063: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51064: LD_VAR 0 8
51068: PUSH
51069: LD_INT 1
51071: ARRAY
51072: PUSH
51073: LD_VAR 0 8
51077: PUSH
51078: LD_INT 2
51080: ARRAY
51081: PUSH
51082: LD_VAR 0 13
51086: PUSH
51087: LD_INT 2
51089: PLUS
51090: GREATER
51091: OR
51092: PUSH
51093: LD_VAR 0 8
51097: PUSH
51098: LD_INT 2
51100: ARRAY
51101: PUSH
51102: LD_VAR 0 13
51106: PUSH
51107: LD_INT 2
51109: MINUS
51110: LESS
51111: OR
51112: PUSH
51113: LD_VAR 0 8
51117: PUSH
51118: LD_INT 3
51120: ARRAY
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 8
51127: PUSH
51128: LD_INT 9
51130: PUSH
51131: LD_INT 10
51133: PUSH
51134: LD_INT 11
51136: PUSH
51137: LD_INT 12
51139: PUSH
51140: LD_INT 13
51142: PUSH
51143: LD_INT 16
51145: PUSH
51146: LD_INT 17
51148: PUSH
51149: LD_INT 18
51151: PUSH
51152: LD_INT 19
51154: PUSH
51155: LD_INT 20
51157: PUSH
51158: LD_INT 21
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: IN
51176: NOT
51177: OR
51178: PUSH
51179: LD_VAR 0 8
51183: PUSH
51184: LD_INT 5
51186: ARRAY
51187: NOT
51188: OR
51189: PUSH
51190: LD_VAR 0 8
51194: PUSH
51195: LD_INT 6
51197: ARRAY
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: LD_INT 7
51207: PUSH
51208: LD_INT 9
51210: PUSH
51211: LD_INT 10
51213: PUSH
51214: LD_INT 11
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: IN
51225: NOT
51226: OR
51227: IFFALSE 51233
// exit ;
51229: POP
51230: POP
51231: GO 51316
// end ;
51233: GO 50904
51235: POP
51236: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51237: LD_VAR 0 9
51241: PPUSH
51242: LD_VAR 0 3
51246: PPUSH
51247: LD_VAR 0 4
51251: PPUSH
51252: LD_INT 20
51254: PPUSH
51255: CALL 43262 0 4
51259: PUSH
51260: LD_INT 4
51262: ARRAY
51263: IFFALSE 51267
// exit ;
51265: GO 51316
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51267: LD_VAR 0 2
51271: PUSH
51272: LD_INT 29
51274: PUSH
51275: LD_INT 30
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: IN
51282: PUSH
51283: LD_VAR 0 3
51287: PPUSH
51288: LD_VAR 0 4
51292: PPUSH
51293: LD_VAR 0 9
51297: PPUSH
51298: CALL_OW 440
51302: NOT
51303: AND
51304: IFFALSE 51308
// exit ;
51306: GO 51316
// result := true ;
51308: LD_ADDR_VAR 0 6
51312: PUSH
51313: LD_INT 1
51315: ST_TO_ADDR
// end ;
51316: LD_VAR 0 6
51320: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51321: LD_INT 0
51323: PPUSH
51324: PPUSH
51325: PPUSH
51326: PPUSH
51327: PPUSH
51328: PPUSH
51329: PPUSH
51330: PPUSH
51331: PPUSH
51332: PPUSH
51333: PPUSH
51334: PPUSH
51335: PPUSH
51336: PPUSH
51337: PPUSH
51338: PPUSH
51339: PPUSH
51340: PPUSH
51341: PPUSH
51342: PPUSH
51343: PPUSH
51344: PPUSH
51345: PPUSH
51346: PPUSH
51347: PPUSH
51348: PPUSH
51349: PPUSH
51350: PPUSH
51351: PPUSH
51352: PPUSH
51353: PPUSH
51354: PPUSH
51355: PPUSH
51356: PPUSH
51357: PPUSH
51358: PPUSH
51359: PPUSH
51360: PPUSH
51361: PPUSH
51362: PPUSH
51363: PPUSH
51364: PPUSH
51365: PPUSH
51366: PPUSH
51367: PPUSH
51368: PPUSH
51369: PPUSH
51370: PPUSH
51371: PPUSH
51372: PPUSH
51373: PPUSH
51374: PPUSH
51375: PPUSH
51376: PPUSH
51377: PPUSH
51378: PPUSH
51379: PPUSH
51380: PPUSH
// result = [ ] ;
51381: LD_ADDR_VAR 0 7
51385: PUSH
51386: EMPTY
51387: ST_TO_ADDR
// temp_list = [ ] ;
51388: LD_ADDR_VAR 0 9
51392: PUSH
51393: EMPTY
51394: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51395: LD_VAR 0 4
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: LD_INT 3
51411: PUSH
51412: LD_INT 4
51414: PUSH
51415: LD_INT 5
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: IN
51426: NOT
51427: PUSH
51428: LD_VAR 0 1
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: IN
51443: PUSH
51444: LD_VAR 0 5
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: IN
51463: NOT
51464: AND
51465: OR
51466: IFFALSE 51470
// exit ;
51468: GO 69861
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51470: LD_VAR 0 1
51474: PUSH
51475: LD_INT 6
51477: PUSH
51478: LD_INT 7
51480: PUSH
51481: LD_INT 8
51483: PUSH
51484: LD_INT 13
51486: PUSH
51487: LD_INT 12
51489: PUSH
51490: LD_INT 15
51492: PUSH
51493: LD_INT 11
51495: PUSH
51496: LD_INT 14
51498: PUSH
51499: LD_INT 10
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: IN
51513: IFFALSE 51523
// btype = b_lab ;
51515: LD_ADDR_VAR 0 1
51519: PUSH
51520: LD_INT 6
51522: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51523: LD_VAR 0 6
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: LIST
51541: IN
51542: NOT
51543: PUSH
51544: LD_VAR 0 1
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: LD_INT 3
51560: PUSH
51561: LD_INT 6
51563: PUSH
51564: LD_INT 36
51566: PUSH
51567: LD_INT 4
51569: PUSH
51570: LD_INT 5
51572: PUSH
51573: LD_INT 31
51575: PUSH
51576: LD_INT 32
51578: PUSH
51579: LD_INT 33
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: IN
51595: NOT
51596: PUSH
51597: LD_VAR 0 6
51601: PUSH
51602: LD_INT 1
51604: EQUAL
51605: AND
51606: OR
51607: PUSH
51608: LD_VAR 0 1
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: IN
51623: NOT
51624: PUSH
51625: LD_VAR 0 6
51629: PUSH
51630: LD_INT 2
51632: EQUAL
51633: AND
51634: OR
51635: IFFALSE 51645
// mode = 0 ;
51637: LD_ADDR_VAR 0 6
51641: PUSH
51642: LD_INT 0
51644: ST_TO_ADDR
// case mode of 0 :
51645: LD_VAR 0 6
51649: PUSH
51650: LD_INT 0
51652: DOUBLE
51653: EQUAL
51654: IFTRUE 51658
51656: GO 63111
51658: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51659: LD_ADDR_VAR 0 11
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 3
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 3
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51852: LD_ADDR_VAR 0 12
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: NEG
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 3
52009: NEG
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: NEG
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52048: LD_ADDR_VAR 0 13
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 2
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 2
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 3
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 3
52207: NEG
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 3
52219: NEG
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52247: LD_ADDR_VAR 0 14
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 2
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 3
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 3
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52443: LD_ADDR_VAR 0 15
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 3
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 3
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52636: LD_ADDR_VAR 0 16
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: LD_INT 2
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 2
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 3
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: LD_INT 3
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 2
52803: PUSH
52804: LD_INT 3
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52829: LD_ADDR_VAR 0 17
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53059: LD_ADDR_VAR 0 18
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 2
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: NEG
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53289: LD_ADDR_VAR 0 19
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53519: LD_ADDR_VAR 0 20
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 2
53706: NEG
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53749: LD_ADDR_VAR 0 21
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53979: LD_ADDR_VAR 0 22
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 2
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: NEG
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54209: LD_ADDR_VAR 0 23
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 2
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: LD_INT 2
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: LD_INT 3
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 3
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54489: LD_ADDR_VAR 0 24
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54765: LD_ADDR_VAR 0 25
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: LD_INT 3
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: LD_INT 3
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55039: LD_ADDR_VAR 0 26
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: LD_INT 2
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 2
55250: PUSH
55251: LD_INT 3
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 3
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55315: LD_ADDR_VAR 0 27
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 3
55548: NEG
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55595: LD_ADDR_VAR 0 28
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 2
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 2
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 2
55794: NEG
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: LD_INT 3
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 3
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 3
55830: NEG
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 3
55842: NEG
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55877: LD_ADDR_VAR 0 29
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 3
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 3
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56156: LD_ADDR_VAR 0 30
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 2
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: LD_INT 3
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: LD_INT 3
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 3
56399: NEG
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56434: LD_ADDR_VAR 0 31
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 2
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: LD_INT 3
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: LD_INT 3
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 3
56677: NEG
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56712: LD_ADDR_VAR 0 32
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: NEG
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 2
56889: NEG
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 3
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56990: LD_ADDR_VAR 0 33
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: LD_INT 3
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 2
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 3
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57269: LD_ADDR_VAR 0 34
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 2
57425: NEG
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 2
57448: NEG
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 2
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 3
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: LD_INT 3
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57549: LD_ADDR_VAR 0 35
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57661: LD_ADDR_VAR 0 36
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 2
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57773: LD_ADDR_VAR 0 37
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57885: LD_ADDR_VAR 0 38
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57997: LD_ADDR_VAR 0 39
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: LD_INT 2
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58109: LD_ADDR_VAR 0 40
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58221: LD_ADDR_VAR 0 41
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: LD_INT 2
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: LD_INT 3
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 3
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: LD_INT 3
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: NEG
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 3
58495: NEG
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 3
58506: NEG
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 3
58518: NEG
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 3
58530: NEG
58531: PUSH
58532: LD_INT 3
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58571: LD_ADDR_VAR 0 42
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 2
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 2
58749: NEG
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: LD_INT 3
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 3
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 3
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 3
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: LD_INT 3
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: LD_INT 3
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 3
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 3
58868: NEG
58869: PUSH
58870: LD_INT 2
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: NEG
58881: PUSH
58882: LD_INT 3
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58921: LD_ADDR_VAR 0 43
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 3
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 2
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 3
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 3
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 3
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: LD_INT 3
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 3
59217: NEG
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 3
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59269: LD_ADDR_VAR 0 44
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 2
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 2
59447: NEG
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: NEG
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 3
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 3
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 3
59512: PUSH
59513: LD_INT 3
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: LD_INT 1
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 3
59543: NEG
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: NEG
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 3
59566: NEG
59567: PUSH
59568: LD_INT 2
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: NEG
59579: PUSH
59580: LD_INT 3
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59619: LD_ADDR_VAR 0 45
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: LD_INT 2
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 2
59785: NEG
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: LD_INT 2
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: LD_INT 3
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: LD_INT 3
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 3
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: LD_INT 3
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: LD_INT 3
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: NEG
59929: PUSH
59930: LD_INT 3
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59969: LD_ADDR_VAR 0 46
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 2
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 3
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 3
60265: NEG
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 3
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60317: LD_ADDR_VAR 0 47
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: LD_INT 2
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60468: LD_ADDR_VAR 0 48
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 2
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 2
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 2
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 2
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60615: LD_ADDR_VAR 0 49
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60759: LD_ADDR_VAR 0 50
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60903: LD_ADDR_VAR 0 51
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 1
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: NEG
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 2
61026: NEG
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61050: LD_ADDR_VAR 0 52
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: NEG
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 2
61165: NEG
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: NEG
61178: PUSH
61179: LD_INT 2
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61201: LD_ADDR_VAR 0 53
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 2
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: LD_INT 2
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 2
61388: NEG
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61431: LD_ADDR_VAR 0 54
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: LD_INT 2
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 2
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 2
61607: NEG
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: NEG
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61661: LD_ADDR_VAR 0 55
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: NEG
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: LD_INT 2
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 2
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: LD_INT 1
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 2
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 2
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: LD_INT 2
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: LD_INT 2
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 2
61837: NEG
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 2
61848: NEG
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61891: LD_ADDR_VAR 0 56
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: LD_INT 2
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 2
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 2
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 2
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: PUSH
62037: LD_INT 2
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: LD_INT 2
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: LD_INT 1
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 2
62067: NEG
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 2
62078: NEG
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 2
62090: NEG
62091: PUSH
62092: LD_INT 2
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62121: LD_ADDR_VAR 0 57
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 2
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_INT 2
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 2
62246: PUSH
62247: LD_INT 1
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 2
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: LD_INT 2
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 2
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 2
62297: NEG
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 2
62308: NEG
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: NEG
62321: PUSH
62322: LD_INT 2
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62351: LD_ADDR_VAR 0 58
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 1
62432: NEG
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: LD_INT 2
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 2
62486: PUSH
62487: LD_INT 2
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: LD_INT 2
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62581: LD_ADDR_VAR 0 59
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: LD_INT 1
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: LD_INT 1
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 1
62650: NEG
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62669: LD_ADDR_VAR 0 60
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 1
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 1
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: NEG
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62757: LD_ADDR_VAR 0 61
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 0
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: NEG
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62845: LD_ADDR_VAR 0 62
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62933: LD_ADDR_VAR 0 63
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63021: LD_ADDR_VAR 0 64
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: ST_TO_ADDR
// end ; 1 :
63109: GO 69006
63111: LD_INT 1
63113: DOUBLE
63114: EQUAL
63115: IFTRUE 63119
63117: GO 65742
63119: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63120: LD_ADDR_VAR 0 11
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: LD_INT 3
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: LIST
63163: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63164: LD_ADDR_VAR 0 12
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 3
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 3
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: LIST
63204: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63205: LD_ADDR_VAR 0 13
63209: PUSH
63210: LD_INT 3
63212: PUSH
63213: LD_INT 2
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 3
63222: PUSH
63223: LD_INT 3
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 2
63232: PUSH
63233: LD_INT 3
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: LIST
63244: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63245: LD_ADDR_VAR 0 14
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: LD_INT 3
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: LD_INT 3
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: LD_INT 2
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63286: LD_ADDR_VAR 0 15
63290: PUSH
63291: LD_INT 2
63293: NEG
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 3
63304: NEG
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 3
63315: NEG
63316: PUSH
63317: LD_INT 1
63319: NEG
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: LIST
63329: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63330: LD_ADDR_VAR 0 16
63334: PUSH
63335: LD_INT 2
63337: NEG
63338: PUSH
63339: LD_INT 3
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 3
63349: NEG
63350: PUSH
63351: LD_INT 2
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 3
63361: NEG
63362: PUSH
63363: LD_INT 3
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: LIST
63375: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63376: LD_ADDR_VAR 0 17
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: LD_INT 3
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: LD_INT 3
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 1
63406: PUSH
63407: LD_INT 2
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: LIST
63419: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63420: LD_ADDR_VAR 0 18
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 3
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 3
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: LIST
63460: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63461: LD_ADDR_VAR 0 19
63465: PUSH
63466: LD_INT 3
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 3
63478: PUSH
63479: LD_INT 3
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 2
63488: PUSH
63489: LD_INT 3
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: LIST
63500: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63501: LD_ADDR_VAR 0 20
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: LD_INT 2
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: LIST
63541: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63542: LD_ADDR_VAR 0 21
63546: PUSH
63547: LD_INT 2
63549: NEG
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 3
63560: NEG
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 3
63571: NEG
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: LIST
63585: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63586: LD_ADDR_VAR 0 22
63590: PUSH
63591: LD_INT 2
63593: NEG
63594: PUSH
63595: LD_INT 3
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 3
63605: NEG
63606: PUSH
63607: LD_INT 2
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 3
63617: NEG
63618: PUSH
63619: LD_INT 3
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: LIST
63631: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63632: LD_ADDR_VAR 0 23
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: LD_INT 3
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: PUSH
63652: LD_INT 4
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: LD_INT 3
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: LIST
63675: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63676: LD_ADDR_VAR 0 24
63680: PUSH
63681: LD_INT 3
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 3
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 4
63704: PUSH
63705: LD_INT 1
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63717: LD_ADDR_VAR 0 25
63721: PUSH
63722: LD_INT 3
63724: PUSH
63725: LD_INT 3
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 4
63734: PUSH
63735: LD_INT 3
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 3
63744: PUSH
63745: LD_INT 4
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63757: LD_ADDR_VAR 0 26
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 3
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: LD_INT 4
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: NEG
63785: PUSH
63786: LD_INT 3
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: LIST
63797: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63798: LD_ADDR_VAR 0 27
63802: PUSH
63803: LD_INT 3
63805: NEG
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 3
63816: NEG
63817: PUSH
63818: LD_INT 1
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 4
63827: NEG
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: LIST
63841: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63842: LD_ADDR_VAR 0 28
63846: PUSH
63847: LD_INT 3
63849: NEG
63850: PUSH
63851: LD_INT 3
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: LD_INT 4
63865: NEG
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 4
63873: NEG
63874: PUSH
63875: LD_INT 3
63877: NEG
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: LIST
63887: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63888: LD_ADDR_VAR 0 29
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: LD_INT 3
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: LD_INT 3
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: LD_INT 2
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: LD_INT 4
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: LD_INT 4
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 1
63952: PUSH
63953: LD_INT 3
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: LD_INT 5
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: LD_INT 5
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: LD_INT 4
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: LD_INT 6
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: LD_INT 6
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: LD_INT 5
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64043: LD_ADDR_VAR 0 30
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: LD_INT 1
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 3
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 3
64071: PUSH
64072: LD_INT 1
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 3
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 4
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 4
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 4
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 5
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 5
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 5
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 6
64154: PUSH
64155: LD_INT 0
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 6
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64186: LD_ADDR_VAR 0 31
64190: PUSH
64191: LD_INT 3
64193: PUSH
64194: LD_INT 2
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 3
64203: PUSH
64204: LD_INT 3
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: PUSH
64214: LD_INT 3
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 4
64223: PUSH
64224: LD_INT 3
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 4
64233: PUSH
64234: LD_INT 4
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 3
64243: PUSH
64244: LD_INT 4
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 5
64253: PUSH
64254: LD_INT 4
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 5
64263: PUSH
64264: LD_INT 5
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 4
64273: PUSH
64274: LD_INT 5
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 6
64283: PUSH
64284: LD_INT 5
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 6
64293: PUSH
64294: LD_INT 6
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 5
64303: PUSH
64304: LD_INT 6
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64325: LD_ADDR_VAR 0 32
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: LD_INT 3
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: LD_INT 3
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: NEG
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: LD_INT 4
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: LD_INT 4
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: LD_INT 3
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: LD_INT 5
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: LD_INT 5
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: LD_INT 4
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: LD_INT 6
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 6
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: LD_INT 5
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64468: LD_ADDR_VAR 0 33
64472: PUSH
64473: LD_INT 2
64475: NEG
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 3
64486: NEG
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 3
64497: NEG
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 3
64509: NEG
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 4
64520: NEG
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 4
64531: NEG
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 4
64543: NEG
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 5
64554: NEG
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 5
64565: NEG
64566: PUSH
64567: LD_INT 1
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 5
64577: NEG
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 6
64588: NEG
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 6
64599: NEG
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64623: LD_ADDR_VAR 0 34
64627: PUSH
64628: LD_INT 2
64630: NEG
64631: PUSH
64632: LD_INT 3
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 3
64642: NEG
64643: PUSH
64644: LD_INT 2
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 3
64654: NEG
64655: PUSH
64656: LD_INT 3
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 3
64666: NEG
64667: PUSH
64668: LD_INT 4
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 4
64678: NEG
64679: PUSH
64680: LD_INT 3
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 4
64690: NEG
64691: PUSH
64692: LD_INT 4
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 4
64702: NEG
64703: PUSH
64704: LD_INT 5
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 5
64714: NEG
64715: PUSH
64716: LD_INT 4
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 5
64726: NEG
64727: PUSH
64728: LD_INT 5
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 5
64738: NEG
64739: PUSH
64740: LD_INT 6
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 6
64750: NEG
64751: PUSH
64752: LD_INT 5
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 6
64762: NEG
64763: PUSH
64764: LD_INT 6
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64786: LD_ADDR_VAR 0 41
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: LD_INT 2
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: LD_INT 3
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: LD_INT 2
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: LIST
64829: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64830: LD_ADDR_VAR 0 42
64834: PUSH
64835: LD_INT 2
64837: PUSH
64838: LD_INT 0
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 2
64847: PUSH
64848: LD_INT 1
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 3
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: LIST
64870: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64871: LD_ADDR_VAR 0 43
64875: PUSH
64876: LD_INT 2
64878: PUSH
64879: LD_INT 2
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 3
64888: PUSH
64889: LD_INT 2
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 2
64898: PUSH
64899: LD_INT 3
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: LIST
64910: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64911: LD_ADDR_VAR 0 44
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: LD_INT 2
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: LD_INT 3
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: LD_INT 2
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64952: LD_ADDR_VAR 0 45
64956: PUSH
64957: LD_INT 2
64959: NEG
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 2
64970: NEG
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 3
64981: NEG
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64996: LD_ADDR_VAR 0 46
65000: PUSH
65001: LD_INT 2
65003: NEG
65004: PUSH
65005: LD_INT 2
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: LD_INT 3
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 3
65027: NEG
65028: PUSH
65029: LD_INT 2
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65042: LD_ADDR_VAR 0 47
65046: PUSH
65047: LD_INT 2
65049: NEG
65050: PUSH
65051: LD_INT 3
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: LD_INT 3
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65075: LD_ADDR_VAR 0 48
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65106: LD_ADDR_VAR 0 49
65110: PUSH
65111: LD_INT 3
65113: PUSH
65114: LD_INT 1
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 3
65123: PUSH
65124: LD_INT 2
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65135: LD_ADDR_VAR 0 50
65139: PUSH
65140: LD_INT 2
65142: PUSH
65143: LD_INT 3
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: LD_INT 3
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65164: LD_ADDR_VAR 0 51
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: LD_INT 2
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 2
65182: NEG
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65195: LD_ADDR_VAR 0 52
65199: PUSH
65200: LD_INT 3
65202: NEG
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 3
65214: NEG
65215: PUSH
65216: LD_INT 2
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65228: LD_ADDR_VAR 0 53
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: LD_INT 3
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: LD_INT 3
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: LD_INT 2
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65272: LD_ADDR_VAR 0 54
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 3
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65313: LD_ADDR_VAR 0 55
65317: PUSH
65318: LD_INT 3
65320: PUSH
65321: LD_INT 2
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: LD_INT 3
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: LIST
65352: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65353: LD_ADDR_VAR 0 56
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: LD_INT 3
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: LD_INT 3
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: LD_INT 2
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: LIST
65393: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65394: LD_ADDR_VAR 0 57
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 3
65412: NEG
65413: PUSH
65414: LD_INT 0
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 3
65423: NEG
65424: PUSH
65425: LD_INT 1
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65438: LD_ADDR_VAR 0 58
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: LD_INT 3
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 3
65457: NEG
65458: PUSH
65459: LD_INT 2
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 3
65469: NEG
65470: PUSH
65471: LD_INT 3
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: LIST
65483: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65484: LD_ADDR_VAR 0 59
65488: PUSH
65489: LD_INT 1
65491: NEG
65492: PUSH
65493: LD_INT 2
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 0
65503: PUSH
65504: LD_INT 2
65506: NEG
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: LD_INT 1
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65528: LD_ADDR_VAR 0 60
65532: PUSH
65533: LD_INT 1
65535: PUSH
65536: LD_INT 1
65538: NEG
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 2
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 2
65556: PUSH
65557: LD_INT 1
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: LIST
65568: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65569: LD_ADDR_VAR 0 61
65573: PUSH
65574: LD_INT 2
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 2
65586: PUSH
65587: LD_INT 2
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: LD_INT 2
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: LIST
65608: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65609: LD_ADDR_VAR 0 62
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: LD_INT 2
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: LIST
65649: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65650: LD_ADDR_VAR 0 63
65654: PUSH
65655: LD_INT 1
65657: NEG
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 2
65668: NEG
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 2
65679: NEG
65680: PUSH
65681: LD_INT 1
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65694: LD_ADDR_VAR 0 64
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: LD_INT 2
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 2
65713: NEG
65714: PUSH
65715: LD_INT 1
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 2
65725: NEG
65726: PUSH
65727: LD_INT 2
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: LIST
65739: ST_TO_ADDR
// end ; 2 :
65740: GO 69006
65742: LD_INT 2
65744: DOUBLE
65745: EQUAL
65746: IFTRUE 65750
65748: GO 69005
65750: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65751: LD_ADDR_VAR 0 29
65755: PUSH
65756: LD_INT 4
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 4
65768: PUSH
65769: LD_INT 1
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 5
65779: PUSH
65780: LD_INT 0
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 5
65789: PUSH
65790: LD_INT 1
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 4
65799: PUSH
65800: LD_INT 1
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 3
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 3
65819: PUSH
65820: LD_INT 1
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 3
65830: PUSH
65831: LD_INT 2
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 5
65841: PUSH
65842: LD_INT 2
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 3
65851: PUSH
65852: LD_INT 3
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 3
65861: PUSH
65862: LD_INT 2
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 4
65871: PUSH
65872: LD_INT 3
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 4
65881: PUSH
65882: LD_INT 4
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 3
65891: PUSH
65892: LD_INT 4
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 2
65901: PUSH
65902: LD_INT 3
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 2
65911: PUSH
65912: LD_INT 2
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 4
65921: PUSH
65922: LD_INT 2
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 2
65931: PUSH
65932: LD_INT 4
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: LD_INT 4
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: LD_INT 3
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 1
65961: PUSH
65962: LD_INT 4
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 1
65971: PUSH
65972: LD_INT 5
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 0
65981: PUSH
65982: LD_INT 5
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: NEG
65992: PUSH
65993: LD_INT 4
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 1
66002: NEG
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: LD_INT 5
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 2
66023: NEG
66024: PUSH
66025: LD_INT 3
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 3
66034: NEG
66035: PUSH
66036: LD_INT 0
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 3
66045: NEG
66046: PUSH
66047: LD_INT 1
66049: NEG
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 2
66057: NEG
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: LD_INT 1
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 3
66079: NEG
66080: PUSH
66081: LD_INT 1
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 4
66090: NEG
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 4
66101: NEG
66102: PUSH
66103: LD_INT 1
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 4
66113: NEG
66114: PUSH
66115: LD_INT 2
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 2
66125: NEG
66126: PUSH
66127: LD_INT 2
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 4
66136: NEG
66137: PUSH
66138: LD_INT 4
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 4
66148: NEG
66149: PUSH
66150: LD_INT 5
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: NEG
66161: PUSH
66162: LD_INT 4
66164: NEG
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 3
66172: NEG
66173: PUSH
66174: LD_INT 3
66176: NEG
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 4
66184: NEG
66185: PUSH
66186: LD_INT 3
66188: NEG
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 5
66196: NEG
66197: PUSH
66198: LD_INT 4
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 5
66208: NEG
66209: PUSH
66210: LD_INT 5
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 3
66220: NEG
66221: PUSH
66222: LD_INT 5
66224: NEG
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 5
66232: NEG
66233: PUSH
66234: LD_INT 3
66236: NEG
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66289: LD_ADDR_VAR 0 30
66293: PUSH
66294: LD_INT 4
66296: PUSH
66297: LD_INT 4
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 4
66306: PUSH
66307: LD_INT 3
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 5
66316: PUSH
66317: LD_INT 4
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 5
66326: PUSH
66327: LD_INT 5
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 4
66336: PUSH
66337: LD_INT 5
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 3
66346: PUSH
66347: LD_INT 4
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 3
66356: PUSH
66357: LD_INT 3
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 5
66366: PUSH
66367: LD_INT 3
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 3
66376: PUSH
66377: LD_INT 5
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 3
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: PUSH
66407: LD_INT 3
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: LD_INT 4
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 4
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: LD_INT 2
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 2
66458: PUSH
66459: LD_INT 4
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 2
66468: NEG
66469: PUSH
66470: LD_INT 2
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 4
66479: NEG
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 4
66490: NEG
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 3
66502: NEG
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 3
66513: NEG
66514: PUSH
66515: LD_INT 1
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 4
66524: NEG
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 5
66535: NEG
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 5
66546: NEG
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 5
66558: NEG
66559: PUSH
66560: LD_INT 2
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 3
66570: NEG
66571: PUSH
66572: LD_INT 2
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 3
66581: NEG
66582: PUSH
66583: LD_INT 3
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 3
66593: NEG
66594: PUSH
66595: LD_INT 4
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 2
66605: NEG
66606: PUSH
66607: LD_INT 3
66609: NEG
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 2
66617: NEG
66618: PUSH
66619: LD_INT 2
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 3
66629: NEG
66630: PUSH
66631: LD_INT 2
66633: NEG
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 4
66641: NEG
66642: PUSH
66643: LD_INT 3
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 4
66653: NEG
66654: PUSH
66655: LD_INT 4
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 2
66665: NEG
66666: PUSH
66667: LD_INT 4
66669: NEG
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 4
66677: NEG
66678: PUSH
66679: LD_INT 2
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: LD_INT 4
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: LD_INT 5
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 1
66711: PUSH
66712: LD_INT 4
66714: NEG
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 1
66722: PUSH
66723: LD_INT 3
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: LD_INT 3
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: LD_INT 4
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 1
66756: NEG
66757: PUSH
66758: LD_INT 5
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: LD_INT 3
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 2
66779: NEG
66780: PUSH
66781: LD_INT 5
66783: NEG
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66836: LD_ADDR_VAR 0 31
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: LD_INT 4
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 0
66853: PUSH
66854: LD_INT 3
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: PUSH
66864: LD_INT 4
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 1
66873: PUSH
66874: LD_INT 5
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 0
66883: PUSH
66884: LD_INT 5
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 1
66893: NEG
66894: PUSH
66895: LD_INT 4
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: PUSH
66906: LD_INT 3
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 2
66915: PUSH
66916: LD_INT 5
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 2
66925: NEG
66926: PUSH
66927: LD_INT 3
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 3
66936: NEG
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 3
66947: NEG
66948: PUSH
66949: LD_INT 1
66951: NEG
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 2
66959: NEG
66960: PUSH
66961: LD_INT 0
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 2
66970: NEG
66971: PUSH
66972: LD_INT 1
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 3
66981: NEG
66982: PUSH
66983: LD_INT 1
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 4
66992: NEG
66993: PUSH
66994: LD_INT 0
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 4
67003: NEG
67004: PUSH
67005: LD_INT 1
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 4
67015: NEG
67016: PUSH
67017: LD_INT 2
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 2
67027: NEG
67028: PUSH
67029: LD_INT 2
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 4
67038: NEG
67039: PUSH
67040: LD_INT 4
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 4
67050: NEG
67051: PUSH
67052: LD_INT 5
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 3
67062: NEG
67063: PUSH
67064: LD_INT 4
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 3
67074: NEG
67075: PUSH
67076: LD_INT 3
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 4
67086: NEG
67087: PUSH
67088: LD_INT 3
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 5
67098: NEG
67099: PUSH
67100: LD_INT 4
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 5
67110: NEG
67111: PUSH
67112: LD_INT 5
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: NEG
67123: PUSH
67124: LD_INT 5
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 5
67134: NEG
67135: PUSH
67136: LD_INT 3
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 0
67146: PUSH
67147: LD_INT 3
67149: NEG
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: LD_INT 4
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 1
67168: PUSH
67169: LD_INT 3
67171: NEG
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 1
67179: PUSH
67180: LD_INT 2
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 0
67190: PUSH
67191: LD_INT 2
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 1
67201: NEG
67202: PUSH
67203: LD_INT 3
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: NEG
67214: PUSH
67215: LD_INT 4
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 2
67225: PUSH
67226: LD_INT 2
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 2
67236: NEG
67237: PUSH
67238: LD_INT 4
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 4
67248: PUSH
67249: LD_INT 0
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 4
67258: PUSH
67259: LD_INT 1
67261: NEG
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 5
67269: PUSH
67270: LD_INT 0
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 5
67279: PUSH
67280: LD_INT 1
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 4
67289: PUSH
67290: LD_INT 1
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 3
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 3
67309: PUSH
67310: LD_INT 1
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 3
67320: PUSH
67321: LD_INT 2
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 5
67331: PUSH
67332: LD_INT 2
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67386: LD_ADDR_VAR 0 32
67390: PUSH
67391: LD_INT 4
67393: NEG
67394: PUSH
67395: LD_INT 0
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 4
67404: NEG
67405: PUSH
67406: LD_INT 1
67408: NEG
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 3
67416: NEG
67417: PUSH
67418: LD_INT 0
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 3
67427: NEG
67428: PUSH
67429: LD_INT 1
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 4
67438: NEG
67439: PUSH
67440: LD_INT 1
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 5
67449: NEG
67450: PUSH
67451: LD_INT 0
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 5
67460: NEG
67461: PUSH
67462: LD_INT 1
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 5
67472: NEG
67473: PUSH
67474: LD_INT 2
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 3
67484: NEG
67485: PUSH
67486: LD_INT 2
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 3
67495: NEG
67496: PUSH
67497: LD_INT 3
67499: NEG
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 3
67507: NEG
67508: PUSH
67509: LD_INT 4
67511: NEG
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 2
67519: NEG
67520: PUSH
67521: LD_INT 3
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 2
67531: NEG
67532: PUSH
67533: LD_INT 2
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 3
67543: NEG
67544: PUSH
67545: LD_INT 2
67547: NEG
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 4
67555: NEG
67556: PUSH
67557: LD_INT 3
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 4
67567: NEG
67568: PUSH
67569: LD_INT 4
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 2
67579: NEG
67580: PUSH
67581: LD_INT 4
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 4
67591: NEG
67592: PUSH
67593: LD_INT 2
67595: NEG
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_INT 4
67606: NEG
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: LD_INT 5
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 1
67625: PUSH
67626: LD_INT 4
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 1
67636: PUSH
67637: LD_INT 3
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 0
67647: PUSH
67648: LD_INT 3
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: NEG
67659: PUSH
67660: LD_INT 4
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 1
67670: NEG
67671: PUSH
67672: LD_INT 5
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 2
67682: PUSH
67683: LD_INT 3
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 2
67693: NEG
67694: PUSH
67695: LD_INT 5
67697: NEG
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 3
67705: PUSH
67706: LD_INT 0
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 3
67715: PUSH
67716: LD_INT 1
67718: NEG
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 4
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 4
67736: PUSH
67737: LD_INT 1
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 3
67746: PUSH
67747: LD_INT 1
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: LD_INT 0
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 2
67766: PUSH
67767: LD_INT 1
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 2
67777: PUSH
67778: LD_INT 2
67780: NEG
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 4
67788: PUSH
67789: LD_INT 2
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 4
67798: PUSH
67799: LD_INT 4
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 4
67808: PUSH
67809: LD_INT 3
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 5
67818: PUSH
67819: LD_INT 4
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 5
67828: PUSH
67829: LD_INT 5
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 4
67838: PUSH
67839: LD_INT 5
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 3
67848: PUSH
67849: LD_INT 4
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 3
67858: PUSH
67859: LD_INT 3
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 5
67868: PUSH
67869: LD_INT 3
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 3
67878: PUSH
67879: LD_INT 5
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67933: LD_ADDR_VAR 0 33
67937: PUSH
67938: LD_INT 4
67940: NEG
67941: PUSH
67942: LD_INT 4
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 4
67952: NEG
67953: PUSH
67954: LD_INT 5
67956: NEG
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 3
67964: NEG
67965: PUSH
67966: LD_INT 4
67968: NEG
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 3
67976: NEG
67977: PUSH
67978: LD_INT 3
67980: NEG
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 4
67988: NEG
67989: PUSH
67990: LD_INT 3
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 5
68000: NEG
68001: PUSH
68002: LD_INT 4
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 5
68012: NEG
68013: PUSH
68014: LD_INT 5
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 3
68024: NEG
68025: PUSH
68026: LD_INT 5
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 5
68036: NEG
68037: PUSH
68038: LD_INT 3
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: LD_INT 3
68051: NEG
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 0
68059: PUSH
68060: LD_INT 4
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 1
68070: PUSH
68071: LD_INT 3
68073: NEG
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 1
68081: PUSH
68082: LD_INT 2
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 0
68092: PUSH
68093: LD_INT 2
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 1
68103: NEG
68104: PUSH
68105: LD_INT 3
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 1
68115: NEG
68116: PUSH
68117: LD_INT 4
68119: NEG
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 2
68127: PUSH
68128: LD_INT 2
68130: NEG
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 2
68138: NEG
68139: PUSH
68140: LD_INT 4
68142: NEG
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 4
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 4
68160: PUSH
68161: LD_INT 1
68163: NEG
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 5
68171: PUSH
68172: LD_INT 0
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 5
68181: PUSH
68182: LD_INT 1
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 4
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 3
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 3
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 3
68222: PUSH
68223: LD_INT 2
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 5
68233: PUSH
68234: LD_INT 2
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 3
68243: PUSH
68244: LD_INT 3
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 3
68253: PUSH
68254: LD_INT 2
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 4
68263: PUSH
68264: LD_INT 3
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 4
68273: PUSH
68274: LD_INT 4
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 3
68283: PUSH
68284: LD_INT 4
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 2
68293: PUSH
68294: LD_INT 3
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: LD_INT 2
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 4
68313: PUSH
68314: LD_INT 2
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 2
68323: PUSH
68324: LD_INT 4
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 0
68333: PUSH
68334: LD_INT 4
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 0
68343: PUSH
68344: LD_INT 3
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 1
68353: PUSH
68354: LD_INT 4
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 1
68363: PUSH
68364: LD_INT 5
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 0
68373: PUSH
68374: LD_INT 5
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 1
68383: NEG
68384: PUSH
68385: LD_INT 4
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 1
68394: NEG
68395: PUSH
68396: LD_INT 3
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 2
68405: PUSH
68406: LD_INT 5
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 2
68415: NEG
68416: PUSH
68417: LD_INT 3
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68471: LD_ADDR_VAR 0 34
68475: PUSH
68476: LD_INT 0
68478: PUSH
68479: LD_INT 4
68481: NEG
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: LD_INT 5
68492: NEG
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 1
68500: PUSH
68501: LD_INT 4
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 1
68511: PUSH
68512: LD_INT 3
68514: NEG
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 0
68522: PUSH
68523: LD_INT 3
68525: NEG
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 1
68533: NEG
68534: PUSH
68535: LD_INT 4
68537: NEG
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 1
68545: NEG
68546: PUSH
68547: LD_INT 5
68549: NEG
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 2
68557: PUSH
68558: LD_INT 3
68560: NEG
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 2
68568: NEG
68569: PUSH
68570: LD_INT 5
68572: NEG
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 3
68580: PUSH
68581: LD_INT 0
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 3
68590: PUSH
68591: LD_INT 1
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 4
68601: PUSH
68602: LD_INT 0
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 4
68611: PUSH
68612: LD_INT 1
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 3
68621: PUSH
68622: LD_INT 1
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 2
68631: PUSH
68632: LD_INT 0
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 2
68641: PUSH
68642: LD_INT 1
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 2
68652: PUSH
68653: LD_INT 2
68655: NEG
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 4
68663: PUSH
68664: LD_INT 2
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 4
68673: PUSH
68674: LD_INT 4
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 4
68683: PUSH
68684: LD_INT 3
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 5
68693: PUSH
68694: LD_INT 4
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 5
68703: PUSH
68704: LD_INT 5
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 4
68713: PUSH
68714: LD_INT 5
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 3
68723: PUSH
68724: LD_INT 4
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 3
68733: PUSH
68734: LD_INT 3
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 5
68743: PUSH
68744: LD_INT 3
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 3
68753: PUSH
68754: LD_INT 5
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 0
68763: PUSH
68764: LD_INT 3
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 0
68773: PUSH
68774: LD_INT 2
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 1
68783: PUSH
68784: LD_INT 3
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 1
68793: PUSH
68794: LD_INT 4
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: LD_INT 4
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 1
68813: NEG
68814: PUSH
68815: LD_INT 3
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 1
68824: NEG
68825: PUSH
68826: LD_INT 2
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 2
68835: PUSH
68836: LD_INT 4
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 2
68845: NEG
68846: PUSH
68847: LD_INT 2
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 4
68856: NEG
68857: PUSH
68858: LD_INT 0
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 4
68867: NEG
68868: PUSH
68869: LD_INT 1
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 3
68879: NEG
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 3
68890: NEG
68891: PUSH
68892: LD_INT 1
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 4
68901: NEG
68902: PUSH
68903: LD_INT 1
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 5
68912: NEG
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 5
68923: NEG
68924: PUSH
68925: LD_INT 1
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 5
68935: NEG
68936: PUSH
68937: LD_INT 2
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 3
68947: NEG
68948: PUSH
68949: LD_INT 2
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: ST_TO_ADDR
// end ; end ;
69003: GO 69006
69005: POP
// case btype of b_depot , b_warehouse :
69006: LD_VAR 0 1
69010: PUSH
69011: LD_INT 0
69013: DOUBLE
69014: EQUAL
69015: IFTRUE 69025
69017: LD_INT 1
69019: DOUBLE
69020: EQUAL
69021: IFTRUE 69025
69023: GO 69226
69025: POP
// case nation of nation_american :
69026: LD_VAR 0 5
69030: PUSH
69031: LD_INT 1
69033: DOUBLE
69034: EQUAL
69035: IFTRUE 69039
69037: GO 69095
69039: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69040: LD_ADDR_VAR 0 9
69044: PUSH
69045: LD_VAR 0 11
69049: PUSH
69050: LD_VAR 0 12
69054: PUSH
69055: LD_VAR 0 13
69059: PUSH
69060: LD_VAR 0 14
69064: PUSH
69065: LD_VAR 0 15
69069: PUSH
69070: LD_VAR 0 16
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: PUSH
69083: LD_VAR 0 4
69087: PUSH
69088: LD_INT 1
69090: PLUS
69091: ARRAY
69092: ST_TO_ADDR
69093: GO 69224
69095: LD_INT 2
69097: DOUBLE
69098: EQUAL
69099: IFTRUE 69103
69101: GO 69159
69103: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69104: LD_ADDR_VAR 0 9
69108: PUSH
69109: LD_VAR 0 17
69113: PUSH
69114: LD_VAR 0 18
69118: PUSH
69119: LD_VAR 0 19
69123: PUSH
69124: LD_VAR 0 20
69128: PUSH
69129: LD_VAR 0 21
69133: PUSH
69134: LD_VAR 0 22
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: PUSH
69147: LD_VAR 0 4
69151: PUSH
69152: LD_INT 1
69154: PLUS
69155: ARRAY
69156: ST_TO_ADDR
69157: GO 69224
69159: LD_INT 3
69161: DOUBLE
69162: EQUAL
69163: IFTRUE 69167
69165: GO 69223
69167: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69168: LD_ADDR_VAR 0 9
69172: PUSH
69173: LD_VAR 0 23
69177: PUSH
69178: LD_VAR 0 24
69182: PUSH
69183: LD_VAR 0 25
69187: PUSH
69188: LD_VAR 0 26
69192: PUSH
69193: LD_VAR 0 27
69197: PUSH
69198: LD_VAR 0 28
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: PUSH
69211: LD_VAR 0 4
69215: PUSH
69216: LD_INT 1
69218: PLUS
69219: ARRAY
69220: ST_TO_ADDR
69221: GO 69224
69223: POP
69224: GO 69779
69226: LD_INT 2
69228: DOUBLE
69229: EQUAL
69230: IFTRUE 69240
69232: LD_INT 3
69234: DOUBLE
69235: EQUAL
69236: IFTRUE 69240
69238: GO 69296
69240: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69241: LD_ADDR_VAR 0 9
69245: PUSH
69246: LD_VAR 0 29
69250: PUSH
69251: LD_VAR 0 30
69255: PUSH
69256: LD_VAR 0 31
69260: PUSH
69261: LD_VAR 0 32
69265: PUSH
69266: LD_VAR 0 33
69270: PUSH
69271: LD_VAR 0 34
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: PUSH
69284: LD_VAR 0 4
69288: PUSH
69289: LD_INT 1
69291: PLUS
69292: ARRAY
69293: ST_TO_ADDR
69294: GO 69779
69296: LD_INT 16
69298: DOUBLE
69299: EQUAL
69300: IFTRUE 69358
69302: LD_INT 17
69304: DOUBLE
69305: EQUAL
69306: IFTRUE 69358
69308: LD_INT 18
69310: DOUBLE
69311: EQUAL
69312: IFTRUE 69358
69314: LD_INT 19
69316: DOUBLE
69317: EQUAL
69318: IFTRUE 69358
69320: LD_INT 22
69322: DOUBLE
69323: EQUAL
69324: IFTRUE 69358
69326: LD_INT 20
69328: DOUBLE
69329: EQUAL
69330: IFTRUE 69358
69332: LD_INT 21
69334: DOUBLE
69335: EQUAL
69336: IFTRUE 69358
69338: LD_INT 23
69340: DOUBLE
69341: EQUAL
69342: IFTRUE 69358
69344: LD_INT 24
69346: DOUBLE
69347: EQUAL
69348: IFTRUE 69358
69350: LD_INT 25
69352: DOUBLE
69353: EQUAL
69354: IFTRUE 69358
69356: GO 69414
69358: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69359: LD_ADDR_VAR 0 9
69363: PUSH
69364: LD_VAR 0 35
69368: PUSH
69369: LD_VAR 0 36
69373: PUSH
69374: LD_VAR 0 37
69378: PUSH
69379: LD_VAR 0 38
69383: PUSH
69384: LD_VAR 0 39
69388: PUSH
69389: LD_VAR 0 40
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: PUSH
69402: LD_VAR 0 4
69406: PUSH
69407: LD_INT 1
69409: PLUS
69410: ARRAY
69411: ST_TO_ADDR
69412: GO 69779
69414: LD_INT 6
69416: DOUBLE
69417: EQUAL
69418: IFTRUE 69470
69420: LD_INT 7
69422: DOUBLE
69423: EQUAL
69424: IFTRUE 69470
69426: LD_INT 8
69428: DOUBLE
69429: EQUAL
69430: IFTRUE 69470
69432: LD_INT 13
69434: DOUBLE
69435: EQUAL
69436: IFTRUE 69470
69438: LD_INT 12
69440: DOUBLE
69441: EQUAL
69442: IFTRUE 69470
69444: LD_INT 15
69446: DOUBLE
69447: EQUAL
69448: IFTRUE 69470
69450: LD_INT 11
69452: DOUBLE
69453: EQUAL
69454: IFTRUE 69470
69456: LD_INT 14
69458: DOUBLE
69459: EQUAL
69460: IFTRUE 69470
69462: LD_INT 10
69464: DOUBLE
69465: EQUAL
69466: IFTRUE 69470
69468: GO 69526
69470: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69471: LD_ADDR_VAR 0 9
69475: PUSH
69476: LD_VAR 0 41
69480: PUSH
69481: LD_VAR 0 42
69485: PUSH
69486: LD_VAR 0 43
69490: PUSH
69491: LD_VAR 0 44
69495: PUSH
69496: LD_VAR 0 45
69500: PUSH
69501: LD_VAR 0 46
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: PUSH
69514: LD_VAR 0 4
69518: PUSH
69519: LD_INT 1
69521: PLUS
69522: ARRAY
69523: ST_TO_ADDR
69524: GO 69779
69526: LD_INT 36
69528: DOUBLE
69529: EQUAL
69530: IFTRUE 69534
69532: GO 69590
69534: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69535: LD_ADDR_VAR 0 9
69539: PUSH
69540: LD_VAR 0 47
69544: PUSH
69545: LD_VAR 0 48
69549: PUSH
69550: LD_VAR 0 49
69554: PUSH
69555: LD_VAR 0 50
69559: PUSH
69560: LD_VAR 0 51
69564: PUSH
69565: LD_VAR 0 52
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: PUSH
69578: LD_VAR 0 4
69582: PUSH
69583: LD_INT 1
69585: PLUS
69586: ARRAY
69587: ST_TO_ADDR
69588: GO 69779
69590: LD_INT 4
69592: DOUBLE
69593: EQUAL
69594: IFTRUE 69616
69596: LD_INT 5
69598: DOUBLE
69599: EQUAL
69600: IFTRUE 69616
69602: LD_INT 34
69604: DOUBLE
69605: EQUAL
69606: IFTRUE 69616
69608: LD_INT 37
69610: DOUBLE
69611: EQUAL
69612: IFTRUE 69616
69614: GO 69672
69616: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69617: LD_ADDR_VAR 0 9
69621: PUSH
69622: LD_VAR 0 53
69626: PUSH
69627: LD_VAR 0 54
69631: PUSH
69632: LD_VAR 0 55
69636: PUSH
69637: LD_VAR 0 56
69641: PUSH
69642: LD_VAR 0 57
69646: PUSH
69647: LD_VAR 0 58
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: PUSH
69660: LD_VAR 0 4
69664: PUSH
69665: LD_INT 1
69667: PLUS
69668: ARRAY
69669: ST_TO_ADDR
69670: GO 69779
69672: LD_INT 31
69674: DOUBLE
69675: EQUAL
69676: IFTRUE 69722
69678: LD_INT 32
69680: DOUBLE
69681: EQUAL
69682: IFTRUE 69722
69684: LD_INT 33
69686: DOUBLE
69687: EQUAL
69688: IFTRUE 69722
69690: LD_INT 27
69692: DOUBLE
69693: EQUAL
69694: IFTRUE 69722
69696: LD_INT 26
69698: DOUBLE
69699: EQUAL
69700: IFTRUE 69722
69702: LD_INT 28
69704: DOUBLE
69705: EQUAL
69706: IFTRUE 69722
69708: LD_INT 29
69710: DOUBLE
69711: EQUAL
69712: IFTRUE 69722
69714: LD_INT 30
69716: DOUBLE
69717: EQUAL
69718: IFTRUE 69722
69720: GO 69778
69722: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69723: LD_ADDR_VAR 0 9
69727: PUSH
69728: LD_VAR 0 59
69732: PUSH
69733: LD_VAR 0 60
69737: PUSH
69738: LD_VAR 0 61
69742: PUSH
69743: LD_VAR 0 62
69747: PUSH
69748: LD_VAR 0 63
69752: PUSH
69753: LD_VAR 0 64
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: PUSH
69766: LD_VAR 0 4
69770: PUSH
69771: LD_INT 1
69773: PLUS
69774: ARRAY
69775: ST_TO_ADDR
69776: GO 69779
69778: POP
// temp_list2 = [ ] ;
69779: LD_ADDR_VAR 0 10
69783: PUSH
69784: EMPTY
69785: ST_TO_ADDR
// for i in temp_list do
69786: LD_ADDR_VAR 0 8
69790: PUSH
69791: LD_VAR 0 9
69795: PUSH
69796: FOR_IN
69797: IFFALSE 69849
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69799: LD_ADDR_VAR 0 10
69803: PUSH
69804: LD_VAR 0 10
69808: PUSH
69809: LD_VAR 0 8
69813: PUSH
69814: LD_INT 1
69816: ARRAY
69817: PUSH
69818: LD_VAR 0 2
69822: PLUS
69823: PUSH
69824: LD_VAR 0 8
69828: PUSH
69829: LD_INT 2
69831: ARRAY
69832: PUSH
69833: LD_VAR 0 3
69837: PLUS
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: EMPTY
69844: LIST
69845: ADD
69846: ST_TO_ADDR
69847: GO 69796
69849: POP
69850: POP
// result = temp_list2 ;
69851: LD_ADDR_VAR 0 7
69855: PUSH
69856: LD_VAR 0 10
69860: ST_TO_ADDR
// end ;
69861: LD_VAR 0 7
69865: RET
// export function EnemyInRange ( unit , dist ) ; begin
69866: LD_INT 0
69868: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69869: LD_ADDR_VAR 0 3
69873: PUSH
69874: LD_VAR 0 1
69878: PPUSH
69879: CALL_OW 255
69883: PPUSH
69884: LD_VAR 0 1
69888: PPUSH
69889: CALL_OW 250
69893: PPUSH
69894: LD_VAR 0 1
69898: PPUSH
69899: CALL_OW 251
69903: PPUSH
69904: LD_VAR 0 2
69908: PPUSH
69909: CALL 43262 0 4
69913: PUSH
69914: LD_INT 4
69916: ARRAY
69917: ST_TO_ADDR
// end ;
69918: LD_VAR 0 3
69922: RET
// export function PlayerSeeMe ( unit ) ; begin
69923: LD_INT 0
69925: PPUSH
// result := See ( your_side , unit ) ;
69926: LD_ADDR_VAR 0 2
69930: PUSH
69931: LD_OWVAR 2
69935: PPUSH
69936: LD_VAR 0 1
69940: PPUSH
69941: CALL_OW 292
69945: ST_TO_ADDR
// end ;
69946: LD_VAR 0 2
69950: RET
// export function ReverseDir ( unit ) ; begin
69951: LD_INT 0
69953: PPUSH
// if not unit then
69954: LD_VAR 0 1
69958: NOT
69959: IFFALSE 69963
// exit ;
69961: GO 69986
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69963: LD_ADDR_VAR 0 2
69967: PUSH
69968: LD_VAR 0 1
69972: PPUSH
69973: CALL_OW 254
69977: PUSH
69978: LD_INT 3
69980: PLUS
69981: PUSH
69982: LD_INT 6
69984: MOD
69985: ST_TO_ADDR
// end ;
69986: LD_VAR 0 2
69990: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69991: LD_INT 0
69993: PPUSH
69994: PPUSH
69995: PPUSH
69996: PPUSH
69997: PPUSH
// if not hexes then
69998: LD_VAR 0 2
70002: NOT
70003: IFFALSE 70007
// exit ;
70005: GO 70155
// dist := 9999 ;
70007: LD_ADDR_VAR 0 5
70011: PUSH
70012: LD_INT 9999
70014: ST_TO_ADDR
// for i = 1 to hexes do
70015: LD_ADDR_VAR 0 4
70019: PUSH
70020: DOUBLE
70021: LD_INT 1
70023: DEC
70024: ST_TO_ADDR
70025: LD_VAR 0 2
70029: PUSH
70030: FOR_TO
70031: IFFALSE 70143
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70033: LD_VAR 0 1
70037: PPUSH
70038: LD_VAR 0 2
70042: PUSH
70043: LD_VAR 0 4
70047: ARRAY
70048: PUSH
70049: LD_INT 1
70051: ARRAY
70052: PPUSH
70053: LD_VAR 0 2
70057: PUSH
70058: LD_VAR 0 4
70062: ARRAY
70063: PUSH
70064: LD_INT 2
70066: ARRAY
70067: PPUSH
70068: CALL_OW 297
70072: PUSH
70073: LD_VAR 0 5
70077: LESS
70078: IFFALSE 70141
// begin hex := hexes [ i ] ;
70080: LD_ADDR_VAR 0 7
70084: PUSH
70085: LD_VAR 0 2
70089: PUSH
70090: LD_VAR 0 4
70094: ARRAY
70095: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70096: LD_ADDR_VAR 0 5
70100: PUSH
70101: LD_VAR 0 1
70105: PPUSH
70106: LD_VAR 0 2
70110: PUSH
70111: LD_VAR 0 4
70115: ARRAY
70116: PUSH
70117: LD_INT 1
70119: ARRAY
70120: PPUSH
70121: LD_VAR 0 2
70125: PUSH
70126: LD_VAR 0 4
70130: ARRAY
70131: PUSH
70132: LD_INT 2
70134: ARRAY
70135: PPUSH
70136: CALL_OW 297
70140: ST_TO_ADDR
// end ; end ;
70141: GO 70030
70143: POP
70144: POP
// result := hex ;
70145: LD_ADDR_VAR 0 3
70149: PUSH
70150: LD_VAR 0 7
70154: ST_TO_ADDR
// end ;
70155: LD_VAR 0 3
70159: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70160: LD_INT 0
70162: PPUSH
70163: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70164: LD_VAR 0 1
70168: NOT
70169: PUSH
70170: LD_VAR 0 1
70174: PUSH
70175: LD_INT 21
70177: PUSH
70178: LD_INT 2
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 23
70187: PUSH
70188: LD_INT 2
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PPUSH
70199: CALL_OW 69
70203: IN
70204: NOT
70205: OR
70206: IFFALSE 70210
// exit ;
70208: GO 70257
// for i = 1 to 3 do
70210: LD_ADDR_VAR 0 3
70214: PUSH
70215: DOUBLE
70216: LD_INT 1
70218: DEC
70219: ST_TO_ADDR
70220: LD_INT 3
70222: PUSH
70223: FOR_TO
70224: IFFALSE 70255
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70226: LD_VAR 0 1
70230: PPUSH
70231: CALL_OW 250
70235: PPUSH
70236: LD_VAR 0 1
70240: PPUSH
70241: CALL_OW 251
70245: PPUSH
70246: LD_INT 1
70248: PPUSH
70249: CALL_OW 453
70253: GO 70223
70255: POP
70256: POP
// end ;
70257: LD_VAR 0 2
70261: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70262: LD_INT 0
70264: PPUSH
70265: PPUSH
70266: PPUSH
70267: PPUSH
70268: PPUSH
70269: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70270: LD_VAR 0 1
70274: NOT
70275: PUSH
70276: LD_VAR 0 2
70280: NOT
70281: OR
70282: PUSH
70283: LD_VAR 0 1
70287: PPUSH
70288: CALL_OW 314
70292: OR
70293: IFFALSE 70297
// exit ;
70295: GO 70738
// x := GetX ( enemy_unit ) ;
70297: LD_ADDR_VAR 0 7
70301: PUSH
70302: LD_VAR 0 2
70306: PPUSH
70307: CALL_OW 250
70311: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70312: LD_ADDR_VAR 0 8
70316: PUSH
70317: LD_VAR 0 2
70321: PPUSH
70322: CALL_OW 251
70326: ST_TO_ADDR
// if not x or not y then
70327: LD_VAR 0 7
70331: NOT
70332: PUSH
70333: LD_VAR 0 8
70337: NOT
70338: OR
70339: IFFALSE 70343
// exit ;
70341: GO 70738
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70343: LD_ADDR_VAR 0 6
70347: PUSH
70348: LD_VAR 0 7
70352: PPUSH
70353: LD_INT 0
70355: PPUSH
70356: LD_INT 4
70358: PPUSH
70359: CALL_OW 272
70363: PUSH
70364: LD_VAR 0 8
70368: PPUSH
70369: LD_INT 0
70371: PPUSH
70372: LD_INT 4
70374: PPUSH
70375: CALL_OW 273
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_VAR 0 7
70388: PPUSH
70389: LD_INT 1
70391: PPUSH
70392: LD_INT 4
70394: PPUSH
70395: CALL_OW 272
70399: PUSH
70400: LD_VAR 0 8
70404: PPUSH
70405: LD_INT 1
70407: PPUSH
70408: LD_INT 4
70410: PPUSH
70411: CALL_OW 273
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_VAR 0 7
70424: PPUSH
70425: LD_INT 2
70427: PPUSH
70428: LD_INT 4
70430: PPUSH
70431: CALL_OW 272
70435: PUSH
70436: LD_VAR 0 8
70440: PPUSH
70441: LD_INT 2
70443: PPUSH
70444: LD_INT 4
70446: PPUSH
70447: CALL_OW 273
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_VAR 0 7
70460: PPUSH
70461: LD_INT 3
70463: PPUSH
70464: LD_INT 4
70466: PPUSH
70467: CALL_OW 272
70471: PUSH
70472: LD_VAR 0 8
70476: PPUSH
70477: LD_INT 3
70479: PPUSH
70480: LD_INT 4
70482: PPUSH
70483: CALL_OW 273
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_VAR 0 7
70496: PPUSH
70497: LD_INT 4
70499: PPUSH
70500: LD_INT 4
70502: PPUSH
70503: CALL_OW 272
70507: PUSH
70508: LD_VAR 0 8
70512: PPUSH
70513: LD_INT 4
70515: PPUSH
70516: LD_INT 4
70518: PPUSH
70519: CALL_OW 273
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_VAR 0 7
70532: PPUSH
70533: LD_INT 5
70535: PPUSH
70536: LD_INT 4
70538: PPUSH
70539: CALL_OW 272
70543: PUSH
70544: LD_VAR 0 8
70548: PPUSH
70549: LD_INT 5
70551: PPUSH
70552: LD_INT 4
70554: PPUSH
70555: CALL_OW 273
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: ST_TO_ADDR
// for i = tmp downto 1 do
70572: LD_ADDR_VAR 0 4
70576: PUSH
70577: DOUBLE
70578: LD_VAR 0 6
70582: INC
70583: ST_TO_ADDR
70584: LD_INT 1
70586: PUSH
70587: FOR_DOWNTO
70588: IFFALSE 70689
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70590: LD_VAR 0 6
70594: PUSH
70595: LD_VAR 0 4
70599: ARRAY
70600: PUSH
70601: LD_INT 1
70603: ARRAY
70604: PPUSH
70605: LD_VAR 0 6
70609: PUSH
70610: LD_VAR 0 4
70614: ARRAY
70615: PUSH
70616: LD_INT 2
70618: ARRAY
70619: PPUSH
70620: CALL_OW 488
70624: NOT
70625: PUSH
70626: LD_VAR 0 6
70630: PUSH
70631: LD_VAR 0 4
70635: ARRAY
70636: PUSH
70637: LD_INT 1
70639: ARRAY
70640: PPUSH
70641: LD_VAR 0 6
70645: PUSH
70646: LD_VAR 0 4
70650: ARRAY
70651: PUSH
70652: LD_INT 2
70654: ARRAY
70655: PPUSH
70656: CALL_OW 428
70660: PUSH
70661: LD_INT 0
70663: NONEQUAL
70664: OR
70665: IFFALSE 70687
// tmp := Delete ( tmp , i ) ;
70667: LD_ADDR_VAR 0 6
70671: PUSH
70672: LD_VAR 0 6
70676: PPUSH
70677: LD_VAR 0 4
70681: PPUSH
70682: CALL_OW 3
70686: ST_TO_ADDR
70687: GO 70587
70689: POP
70690: POP
// j := GetClosestHex ( unit , tmp ) ;
70691: LD_ADDR_VAR 0 5
70695: PUSH
70696: LD_VAR 0 1
70700: PPUSH
70701: LD_VAR 0 6
70705: PPUSH
70706: CALL 69991 0 2
70710: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70711: LD_VAR 0 1
70715: PPUSH
70716: LD_VAR 0 5
70720: PUSH
70721: LD_INT 1
70723: ARRAY
70724: PPUSH
70725: LD_VAR 0 5
70729: PUSH
70730: LD_INT 2
70732: ARRAY
70733: PPUSH
70734: CALL_OW 111
// end ;
70738: LD_VAR 0 3
70742: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70743: LD_INT 0
70745: PPUSH
70746: PPUSH
70747: PPUSH
// uc_side = 0 ;
70748: LD_ADDR_OWVAR 20
70752: PUSH
70753: LD_INT 0
70755: ST_TO_ADDR
// uc_nation = 0 ;
70756: LD_ADDR_OWVAR 21
70760: PUSH
70761: LD_INT 0
70763: ST_TO_ADDR
// InitHc_All ( ) ;
70764: CALL_OW 584
// InitVc ;
70768: CALL_OW 20
// if mastodonts then
70772: LD_VAR 0 6
70776: IFFALSE 70843
// for i = 1 to mastodonts do
70778: LD_ADDR_VAR 0 11
70782: PUSH
70783: DOUBLE
70784: LD_INT 1
70786: DEC
70787: ST_TO_ADDR
70788: LD_VAR 0 6
70792: PUSH
70793: FOR_TO
70794: IFFALSE 70841
// begin vc_chassis := 31 ;
70796: LD_ADDR_OWVAR 37
70800: PUSH
70801: LD_INT 31
70803: ST_TO_ADDR
// vc_control := control_rider ;
70804: LD_ADDR_OWVAR 38
70808: PUSH
70809: LD_INT 4
70811: ST_TO_ADDR
// animal := CreateVehicle ;
70812: LD_ADDR_VAR 0 12
70816: PUSH
70817: CALL_OW 45
70821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70822: LD_VAR 0 12
70826: PPUSH
70827: LD_VAR 0 8
70831: PPUSH
70832: LD_INT 0
70834: PPUSH
70835: CALL 73031 0 3
// end ;
70839: GO 70793
70841: POP
70842: POP
// if horses then
70843: LD_VAR 0 5
70847: IFFALSE 70914
// for i = 1 to horses do
70849: LD_ADDR_VAR 0 11
70853: PUSH
70854: DOUBLE
70855: LD_INT 1
70857: DEC
70858: ST_TO_ADDR
70859: LD_VAR 0 5
70863: PUSH
70864: FOR_TO
70865: IFFALSE 70912
// begin hc_class := 21 ;
70867: LD_ADDR_OWVAR 28
70871: PUSH
70872: LD_INT 21
70874: ST_TO_ADDR
// hc_gallery :=  ;
70875: LD_ADDR_OWVAR 33
70879: PUSH
70880: LD_STRING 
70882: ST_TO_ADDR
// animal := CreateHuman ;
70883: LD_ADDR_VAR 0 12
70887: PUSH
70888: CALL_OW 44
70892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70893: LD_VAR 0 12
70897: PPUSH
70898: LD_VAR 0 8
70902: PPUSH
70903: LD_INT 0
70905: PPUSH
70906: CALL 73031 0 3
// end ;
70910: GO 70864
70912: POP
70913: POP
// if birds then
70914: LD_VAR 0 1
70918: IFFALSE 70985
// for i = 1 to birds do
70920: LD_ADDR_VAR 0 11
70924: PUSH
70925: DOUBLE
70926: LD_INT 1
70928: DEC
70929: ST_TO_ADDR
70930: LD_VAR 0 1
70934: PUSH
70935: FOR_TO
70936: IFFALSE 70983
// begin hc_class = 18 ;
70938: LD_ADDR_OWVAR 28
70942: PUSH
70943: LD_INT 18
70945: ST_TO_ADDR
// hc_gallery =  ;
70946: LD_ADDR_OWVAR 33
70950: PUSH
70951: LD_STRING 
70953: ST_TO_ADDR
// animal := CreateHuman ;
70954: LD_ADDR_VAR 0 12
70958: PUSH
70959: CALL_OW 44
70963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70964: LD_VAR 0 12
70968: PPUSH
70969: LD_VAR 0 8
70973: PPUSH
70974: LD_INT 0
70976: PPUSH
70977: CALL 73031 0 3
// end ;
70981: GO 70935
70983: POP
70984: POP
// if tigers then
70985: LD_VAR 0 2
70989: IFFALSE 71073
// for i = 1 to tigers do
70991: LD_ADDR_VAR 0 11
70995: PUSH
70996: DOUBLE
70997: LD_INT 1
70999: DEC
71000: ST_TO_ADDR
71001: LD_VAR 0 2
71005: PUSH
71006: FOR_TO
71007: IFFALSE 71071
// begin hc_class = class_tiger ;
71009: LD_ADDR_OWVAR 28
71013: PUSH
71014: LD_INT 14
71016: ST_TO_ADDR
// hc_gallery =  ;
71017: LD_ADDR_OWVAR 33
71021: PUSH
71022: LD_STRING 
71024: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71025: LD_ADDR_OWVAR 35
71029: PUSH
71030: LD_INT 7
71032: NEG
71033: PPUSH
71034: LD_INT 7
71036: PPUSH
71037: CALL_OW 12
71041: ST_TO_ADDR
// animal := CreateHuman ;
71042: LD_ADDR_VAR 0 12
71046: PUSH
71047: CALL_OW 44
71051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71052: LD_VAR 0 12
71056: PPUSH
71057: LD_VAR 0 8
71061: PPUSH
71062: LD_INT 0
71064: PPUSH
71065: CALL 73031 0 3
// end ;
71069: GO 71006
71071: POP
71072: POP
// if apemans then
71073: LD_VAR 0 3
71077: IFFALSE 71200
// for i = 1 to apemans do
71079: LD_ADDR_VAR 0 11
71083: PUSH
71084: DOUBLE
71085: LD_INT 1
71087: DEC
71088: ST_TO_ADDR
71089: LD_VAR 0 3
71093: PUSH
71094: FOR_TO
71095: IFFALSE 71198
// begin hc_class = class_apeman ;
71097: LD_ADDR_OWVAR 28
71101: PUSH
71102: LD_INT 12
71104: ST_TO_ADDR
// hc_gallery =  ;
71105: LD_ADDR_OWVAR 33
71109: PUSH
71110: LD_STRING 
71112: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71113: LD_ADDR_OWVAR 35
71117: PUSH
71118: LD_INT 2
71120: NEG
71121: PPUSH
71122: LD_INT 2
71124: PPUSH
71125: CALL_OW 12
71129: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71130: LD_ADDR_OWVAR 31
71134: PUSH
71135: LD_INT 1
71137: PPUSH
71138: LD_INT 3
71140: PPUSH
71141: CALL_OW 12
71145: PUSH
71146: LD_INT 1
71148: PPUSH
71149: LD_INT 3
71151: PPUSH
71152: CALL_OW 12
71156: PUSH
71157: LD_INT 0
71159: PUSH
71160: LD_INT 0
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: ST_TO_ADDR
// animal := CreateHuman ;
71169: LD_ADDR_VAR 0 12
71173: PUSH
71174: CALL_OW 44
71178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71179: LD_VAR 0 12
71183: PPUSH
71184: LD_VAR 0 8
71188: PPUSH
71189: LD_INT 0
71191: PPUSH
71192: CALL 73031 0 3
// end ;
71196: GO 71094
71198: POP
71199: POP
// if enchidnas then
71200: LD_VAR 0 4
71204: IFFALSE 71271
// for i = 1 to enchidnas do
71206: LD_ADDR_VAR 0 11
71210: PUSH
71211: DOUBLE
71212: LD_INT 1
71214: DEC
71215: ST_TO_ADDR
71216: LD_VAR 0 4
71220: PUSH
71221: FOR_TO
71222: IFFALSE 71269
// begin hc_class = 13 ;
71224: LD_ADDR_OWVAR 28
71228: PUSH
71229: LD_INT 13
71231: ST_TO_ADDR
// hc_gallery =  ;
71232: LD_ADDR_OWVAR 33
71236: PUSH
71237: LD_STRING 
71239: ST_TO_ADDR
// animal := CreateHuman ;
71240: LD_ADDR_VAR 0 12
71244: PUSH
71245: CALL_OW 44
71249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71250: LD_VAR 0 12
71254: PPUSH
71255: LD_VAR 0 8
71259: PPUSH
71260: LD_INT 0
71262: PPUSH
71263: CALL 73031 0 3
// end ;
71267: GO 71221
71269: POP
71270: POP
// if fishes then
71271: LD_VAR 0 7
71275: IFFALSE 71342
// for i = 1 to fishes do
71277: LD_ADDR_VAR 0 11
71281: PUSH
71282: DOUBLE
71283: LD_INT 1
71285: DEC
71286: ST_TO_ADDR
71287: LD_VAR 0 7
71291: PUSH
71292: FOR_TO
71293: IFFALSE 71340
// begin hc_class = 20 ;
71295: LD_ADDR_OWVAR 28
71299: PUSH
71300: LD_INT 20
71302: ST_TO_ADDR
// hc_gallery =  ;
71303: LD_ADDR_OWVAR 33
71307: PUSH
71308: LD_STRING 
71310: ST_TO_ADDR
// animal := CreateHuman ;
71311: LD_ADDR_VAR 0 12
71315: PUSH
71316: CALL_OW 44
71320: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71321: LD_VAR 0 12
71325: PPUSH
71326: LD_VAR 0 9
71330: PPUSH
71331: LD_INT 0
71333: PPUSH
71334: CALL 73031 0 3
// end ;
71338: GO 71292
71340: POP
71341: POP
// end ;
71342: LD_VAR 0 10
71346: RET
// export function WantHeal ( sci , unit ) ; begin
71347: LD_INT 0
71349: PPUSH
// if GetTaskList ( sci ) > 0 then
71350: LD_VAR 0 1
71354: PPUSH
71355: CALL_OW 437
71359: PUSH
71360: LD_INT 0
71362: GREATER
71363: IFFALSE 71433
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71365: LD_VAR 0 1
71369: PPUSH
71370: CALL_OW 437
71374: PUSH
71375: LD_INT 1
71377: ARRAY
71378: PUSH
71379: LD_INT 1
71381: ARRAY
71382: PUSH
71383: LD_STRING l
71385: EQUAL
71386: PUSH
71387: LD_VAR 0 1
71391: PPUSH
71392: CALL_OW 437
71396: PUSH
71397: LD_INT 1
71399: ARRAY
71400: PUSH
71401: LD_INT 4
71403: ARRAY
71404: PUSH
71405: LD_VAR 0 2
71409: EQUAL
71410: AND
71411: IFFALSE 71423
// result := true else
71413: LD_ADDR_VAR 0 3
71417: PUSH
71418: LD_INT 1
71420: ST_TO_ADDR
71421: GO 71431
// result := false ;
71423: LD_ADDR_VAR 0 3
71427: PUSH
71428: LD_INT 0
71430: ST_TO_ADDR
// end else
71431: GO 71441
// result := false ;
71433: LD_ADDR_VAR 0 3
71437: PUSH
71438: LD_INT 0
71440: ST_TO_ADDR
// end ;
71441: LD_VAR 0 3
71445: RET
// export function HealTarget ( sci ) ; begin
71446: LD_INT 0
71448: PPUSH
// if not sci then
71449: LD_VAR 0 1
71453: NOT
71454: IFFALSE 71458
// exit ;
71456: GO 71523
// result := 0 ;
71458: LD_ADDR_VAR 0 2
71462: PUSH
71463: LD_INT 0
71465: ST_TO_ADDR
// if GetTaskList ( sci ) then
71466: LD_VAR 0 1
71470: PPUSH
71471: CALL_OW 437
71475: IFFALSE 71523
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71477: LD_VAR 0 1
71481: PPUSH
71482: CALL_OW 437
71486: PUSH
71487: LD_INT 1
71489: ARRAY
71490: PUSH
71491: LD_INT 1
71493: ARRAY
71494: PUSH
71495: LD_STRING l
71497: EQUAL
71498: IFFALSE 71523
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71500: LD_ADDR_VAR 0 2
71504: PUSH
71505: LD_VAR 0 1
71509: PPUSH
71510: CALL_OW 437
71514: PUSH
71515: LD_INT 1
71517: ARRAY
71518: PUSH
71519: LD_INT 4
71521: ARRAY
71522: ST_TO_ADDR
// end ;
71523: LD_VAR 0 2
71527: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71528: LD_INT 0
71530: PPUSH
71531: PPUSH
71532: PPUSH
71533: PPUSH
// if not base_units then
71534: LD_VAR 0 1
71538: NOT
71539: IFFALSE 71543
// exit ;
71541: GO 71630
// result := false ;
71543: LD_ADDR_VAR 0 2
71547: PUSH
71548: LD_INT 0
71550: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71551: LD_ADDR_VAR 0 5
71555: PUSH
71556: LD_VAR 0 1
71560: PPUSH
71561: LD_INT 21
71563: PUSH
71564: LD_INT 3
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PPUSH
71571: CALL_OW 72
71575: ST_TO_ADDR
// if not tmp then
71576: LD_VAR 0 5
71580: NOT
71581: IFFALSE 71585
// exit ;
71583: GO 71630
// for i in tmp do
71585: LD_ADDR_VAR 0 3
71589: PUSH
71590: LD_VAR 0 5
71594: PUSH
71595: FOR_IN
71596: IFFALSE 71628
// begin result := EnemyInRange ( i , 22 ) ;
71598: LD_ADDR_VAR 0 2
71602: PUSH
71603: LD_VAR 0 3
71607: PPUSH
71608: LD_INT 22
71610: PPUSH
71611: CALL 69866 0 2
71615: ST_TO_ADDR
// if result then
71616: LD_VAR 0 2
71620: IFFALSE 71626
// exit ;
71622: POP
71623: POP
71624: GO 71630
// end ;
71626: GO 71595
71628: POP
71629: POP
// end ;
71630: LD_VAR 0 2
71634: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71635: LD_INT 0
71637: PPUSH
71638: PPUSH
// if not units then
71639: LD_VAR 0 1
71643: NOT
71644: IFFALSE 71648
// exit ;
71646: GO 71718
// result := [ ] ;
71648: LD_ADDR_VAR 0 3
71652: PUSH
71653: EMPTY
71654: ST_TO_ADDR
// for i in units do
71655: LD_ADDR_VAR 0 4
71659: PUSH
71660: LD_VAR 0 1
71664: PUSH
71665: FOR_IN
71666: IFFALSE 71716
// if GetTag ( i ) = tag then
71668: LD_VAR 0 4
71672: PPUSH
71673: CALL_OW 110
71677: PUSH
71678: LD_VAR 0 2
71682: EQUAL
71683: IFFALSE 71714
// result := Replace ( result , result + 1 , i ) ;
71685: LD_ADDR_VAR 0 3
71689: PUSH
71690: LD_VAR 0 3
71694: PPUSH
71695: LD_VAR 0 3
71699: PUSH
71700: LD_INT 1
71702: PLUS
71703: PPUSH
71704: LD_VAR 0 4
71708: PPUSH
71709: CALL_OW 1
71713: ST_TO_ADDR
71714: GO 71665
71716: POP
71717: POP
// end ;
71718: LD_VAR 0 3
71722: RET
// export function IsDriver ( un ) ; begin
71723: LD_INT 0
71725: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71726: LD_ADDR_VAR 0 2
71730: PUSH
71731: LD_VAR 0 1
71735: PUSH
71736: LD_INT 55
71738: PUSH
71739: EMPTY
71740: LIST
71741: PPUSH
71742: CALL_OW 69
71746: IN
71747: ST_TO_ADDR
// end ;
71748: LD_VAR 0 2
71752: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71753: LD_INT 0
71755: PPUSH
71756: PPUSH
// list := [ ] ;
71757: LD_ADDR_VAR 0 5
71761: PUSH
71762: EMPTY
71763: ST_TO_ADDR
// case d of 0 :
71764: LD_VAR 0 3
71768: PUSH
71769: LD_INT 0
71771: DOUBLE
71772: EQUAL
71773: IFTRUE 71777
71775: GO 71910
71777: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71778: LD_ADDR_VAR 0 5
71782: PUSH
71783: LD_VAR 0 1
71787: PUSH
71788: LD_INT 4
71790: MINUS
71791: PUSH
71792: LD_VAR 0 2
71796: PUSH
71797: LD_INT 4
71799: MINUS
71800: PUSH
71801: LD_INT 2
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: LIST
71808: PUSH
71809: LD_VAR 0 1
71813: PUSH
71814: LD_INT 3
71816: MINUS
71817: PUSH
71818: LD_VAR 0 2
71822: PUSH
71823: LD_INT 1
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: LIST
71830: PUSH
71831: LD_VAR 0 1
71835: PUSH
71836: LD_INT 4
71838: PLUS
71839: PUSH
71840: LD_VAR 0 2
71844: PUSH
71845: LD_INT 4
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: LIST
71852: PUSH
71853: LD_VAR 0 1
71857: PUSH
71858: LD_INT 3
71860: PLUS
71861: PUSH
71862: LD_VAR 0 2
71866: PUSH
71867: LD_INT 3
71869: PLUS
71870: PUSH
71871: LD_INT 5
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: LIST
71878: PUSH
71879: LD_VAR 0 1
71883: PUSH
71884: LD_VAR 0 2
71888: PUSH
71889: LD_INT 4
71891: PLUS
71892: PUSH
71893: LD_INT 0
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: LIST
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: ST_TO_ADDR
// end ; 1 :
71908: GO 72608
71910: LD_INT 1
71912: DOUBLE
71913: EQUAL
71914: IFTRUE 71918
71916: GO 72051
71918: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71919: LD_ADDR_VAR 0 5
71923: PUSH
71924: LD_VAR 0 1
71928: PUSH
71929: LD_VAR 0 2
71933: PUSH
71934: LD_INT 4
71936: MINUS
71937: PUSH
71938: LD_INT 3
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: LIST
71945: PUSH
71946: LD_VAR 0 1
71950: PUSH
71951: LD_INT 3
71953: MINUS
71954: PUSH
71955: LD_VAR 0 2
71959: PUSH
71960: LD_INT 3
71962: MINUS
71963: PUSH
71964: LD_INT 2
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: LIST
71971: PUSH
71972: LD_VAR 0 1
71976: PUSH
71977: LD_INT 4
71979: MINUS
71980: PUSH
71981: LD_VAR 0 2
71985: PUSH
71986: LD_INT 1
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: LIST
71993: PUSH
71994: LD_VAR 0 1
71998: PUSH
71999: LD_VAR 0 2
72003: PUSH
72004: LD_INT 3
72006: PLUS
72007: PUSH
72008: LD_INT 0
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: LIST
72015: PUSH
72016: LD_VAR 0 1
72020: PUSH
72021: LD_INT 4
72023: PLUS
72024: PUSH
72025: LD_VAR 0 2
72029: PUSH
72030: LD_INT 4
72032: PLUS
72033: PUSH
72034: LD_INT 5
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: LIST
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: ST_TO_ADDR
// end ; 2 :
72049: GO 72608
72051: LD_INT 2
72053: DOUBLE
72054: EQUAL
72055: IFTRUE 72059
72057: GO 72188
72059: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72060: LD_ADDR_VAR 0 5
72064: PUSH
72065: LD_VAR 0 1
72069: PUSH
72070: LD_VAR 0 2
72074: PUSH
72075: LD_INT 3
72077: MINUS
72078: PUSH
72079: LD_INT 3
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: LIST
72086: PUSH
72087: LD_VAR 0 1
72091: PUSH
72092: LD_INT 4
72094: PLUS
72095: PUSH
72096: LD_VAR 0 2
72100: PUSH
72101: LD_INT 4
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: LIST
72108: PUSH
72109: LD_VAR 0 1
72113: PUSH
72114: LD_VAR 0 2
72118: PUSH
72119: LD_INT 4
72121: PLUS
72122: PUSH
72123: LD_INT 0
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: LIST
72130: PUSH
72131: LD_VAR 0 1
72135: PUSH
72136: LD_INT 3
72138: MINUS
72139: PUSH
72140: LD_VAR 0 2
72144: PUSH
72145: LD_INT 1
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: LIST
72152: PUSH
72153: LD_VAR 0 1
72157: PUSH
72158: LD_INT 4
72160: MINUS
72161: PUSH
72162: LD_VAR 0 2
72166: PUSH
72167: LD_INT 4
72169: MINUS
72170: PUSH
72171: LD_INT 2
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: LIST
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: ST_TO_ADDR
// end ; 3 :
72186: GO 72608
72188: LD_INT 3
72190: DOUBLE
72191: EQUAL
72192: IFTRUE 72196
72194: GO 72329
72196: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72197: LD_ADDR_VAR 0 5
72201: PUSH
72202: LD_VAR 0 1
72206: PUSH
72207: LD_INT 3
72209: PLUS
72210: PUSH
72211: LD_VAR 0 2
72215: PUSH
72216: LD_INT 4
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: LIST
72223: PUSH
72224: LD_VAR 0 1
72228: PUSH
72229: LD_INT 4
72231: PLUS
72232: PUSH
72233: LD_VAR 0 2
72237: PUSH
72238: LD_INT 4
72240: PLUS
72241: PUSH
72242: LD_INT 5
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: LIST
72249: PUSH
72250: LD_VAR 0 1
72254: PUSH
72255: LD_INT 4
72257: MINUS
72258: PUSH
72259: LD_VAR 0 2
72263: PUSH
72264: LD_INT 1
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: LIST
72271: PUSH
72272: LD_VAR 0 1
72276: PUSH
72277: LD_VAR 0 2
72281: PUSH
72282: LD_INT 4
72284: MINUS
72285: PUSH
72286: LD_INT 3
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: LIST
72293: PUSH
72294: LD_VAR 0 1
72298: PUSH
72299: LD_INT 3
72301: MINUS
72302: PUSH
72303: LD_VAR 0 2
72307: PUSH
72308: LD_INT 3
72310: MINUS
72311: PUSH
72312: LD_INT 2
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: LIST
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: ST_TO_ADDR
// end ; 4 :
72327: GO 72608
72329: LD_INT 4
72331: DOUBLE
72332: EQUAL
72333: IFTRUE 72337
72335: GO 72470
72337: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72338: LD_ADDR_VAR 0 5
72342: PUSH
72343: LD_VAR 0 1
72347: PUSH
72348: LD_VAR 0 2
72352: PUSH
72353: LD_INT 4
72355: PLUS
72356: PUSH
72357: LD_INT 0
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: LIST
72364: PUSH
72365: LD_VAR 0 1
72369: PUSH
72370: LD_INT 3
72372: PLUS
72373: PUSH
72374: LD_VAR 0 2
72378: PUSH
72379: LD_INT 3
72381: PLUS
72382: PUSH
72383: LD_INT 5
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: LIST
72390: PUSH
72391: LD_VAR 0 1
72395: PUSH
72396: LD_INT 4
72398: PLUS
72399: PUSH
72400: LD_VAR 0 2
72404: PUSH
72405: LD_INT 4
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: LIST
72412: PUSH
72413: LD_VAR 0 1
72417: PUSH
72418: LD_VAR 0 2
72422: PUSH
72423: LD_INT 3
72425: MINUS
72426: PUSH
72427: LD_INT 3
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: LIST
72434: PUSH
72435: LD_VAR 0 1
72439: PUSH
72440: LD_INT 4
72442: MINUS
72443: PUSH
72444: LD_VAR 0 2
72448: PUSH
72449: LD_INT 4
72451: MINUS
72452: PUSH
72453: LD_INT 2
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: LIST
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: ST_TO_ADDR
// end ; 5 :
72468: GO 72608
72470: LD_INT 5
72472: DOUBLE
72473: EQUAL
72474: IFTRUE 72478
72476: GO 72607
72478: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72479: LD_ADDR_VAR 0 5
72483: PUSH
72484: LD_VAR 0 1
72488: PUSH
72489: LD_INT 4
72491: MINUS
72492: PUSH
72493: LD_VAR 0 2
72497: PUSH
72498: LD_INT 1
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: LIST
72505: PUSH
72506: LD_VAR 0 1
72510: PUSH
72511: LD_VAR 0 2
72515: PUSH
72516: LD_INT 4
72518: MINUS
72519: PUSH
72520: LD_INT 3
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: LIST
72527: PUSH
72528: LD_VAR 0 1
72532: PUSH
72533: LD_INT 4
72535: PLUS
72536: PUSH
72537: LD_VAR 0 2
72541: PUSH
72542: LD_INT 4
72544: PLUS
72545: PUSH
72546: LD_INT 5
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: LIST
72553: PUSH
72554: LD_VAR 0 1
72558: PUSH
72559: LD_INT 3
72561: PLUS
72562: PUSH
72563: LD_VAR 0 2
72567: PUSH
72568: LD_INT 4
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: LIST
72575: PUSH
72576: LD_VAR 0 1
72580: PUSH
72581: LD_VAR 0 2
72585: PUSH
72586: LD_INT 3
72588: PLUS
72589: PUSH
72590: LD_INT 0
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: LIST
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: ST_TO_ADDR
// end ; end ;
72605: GO 72608
72607: POP
// result := list ;
72608: LD_ADDR_VAR 0 4
72612: PUSH
72613: LD_VAR 0 5
72617: ST_TO_ADDR
// end ;
72618: LD_VAR 0 4
72622: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72623: LD_INT 0
72625: PPUSH
72626: PPUSH
72627: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72628: LD_VAR 0 1
72632: NOT
72633: PUSH
72634: LD_VAR 0 2
72638: PUSH
72639: LD_INT 1
72641: PUSH
72642: LD_INT 2
72644: PUSH
72645: LD_INT 3
72647: PUSH
72648: LD_INT 4
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: IN
72657: NOT
72658: OR
72659: IFFALSE 72663
// exit ;
72661: GO 72755
// tmp := [ ] ;
72663: LD_ADDR_VAR 0 5
72667: PUSH
72668: EMPTY
72669: ST_TO_ADDR
// for i in units do
72670: LD_ADDR_VAR 0 4
72674: PUSH
72675: LD_VAR 0 1
72679: PUSH
72680: FOR_IN
72681: IFFALSE 72724
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72683: LD_ADDR_VAR 0 5
72687: PUSH
72688: LD_VAR 0 5
72692: PPUSH
72693: LD_VAR 0 5
72697: PUSH
72698: LD_INT 1
72700: PLUS
72701: PPUSH
72702: LD_VAR 0 4
72706: PPUSH
72707: LD_VAR 0 2
72711: PPUSH
72712: CALL_OW 259
72716: PPUSH
72717: CALL_OW 2
72721: ST_TO_ADDR
72722: GO 72680
72724: POP
72725: POP
// if not tmp then
72726: LD_VAR 0 5
72730: NOT
72731: IFFALSE 72735
// exit ;
72733: GO 72755
// result := SortListByListDesc ( units , tmp ) ;
72735: LD_ADDR_VAR 0 3
72739: PUSH
72740: LD_VAR 0 1
72744: PPUSH
72745: LD_VAR 0 5
72749: PPUSH
72750: CALL_OW 77
72754: ST_TO_ADDR
// end ;
72755: LD_VAR 0 3
72759: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72760: LD_INT 0
72762: PPUSH
72763: PPUSH
72764: PPUSH
// result := false ;
72765: LD_ADDR_VAR 0 3
72769: PUSH
72770: LD_INT 0
72772: ST_TO_ADDR
// x := GetX ( building ) ;
72773: LD_ADDR_VAR 0 4
72777: PUSH
72778: LD_VAR 0 2
72782: PPUSH
72783: CALL_OW 250
72787: ST_TO_ADDR
// y := GetY ( building ) ;
72788: LD_ADDR_VAR 0 5
72792: PUSH
72793: LD_VAR 0 2
72797: PPUSH
72798: CALL_OW 251
72802: ST_TO_ADDR
// if not building or not x or not y then
72803: LD_VAR 0 2
72807: NOT
72808: PUSH
72809: LD_VAR 0 4
72813: NOT
72814: OR
72815: PUSH
72816: LD_VAR 0 5
72820: NOT
72821: OR
72822: IFFALSE 72826
// exit ;
72824: GO 72918
// if GetTaskList ( unit ) then
72826: LD_VAR 0 1
72830: PPUSH
72831: CALL_OW 437
72835: IFFALSE 72918
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72837: LD_STRING e
72839: PUSH
72840: LD_VAR 0 1
72844: PPUSH
72845: CALL_OW 437
72849: PUSH
72850: LD_INT 1
72852: ARRAY
72853: PUSH
72854: LD_INT 1
72856: ARRAY
72857: EQUAL
72858: PUSH
72859: LD_VAR 0 4
72863: PUSH
72864: LD_VAR 0 1
72868: PPUSH
72869: CALL_OW 437
72873: PUSH
72874: LD_INT 1
72876: ARRAY
72877: PUSH
72878: LD_INT 2
72880: ARRAY
72881: EQUAL
72882: AND
72883: PUSH
72884: LD_VAR 0 5
72888: PUSH
72889: LD_VAR 0 1
72893: PPUSH
72894: CALL_OW 437
72898: PUSH
72899: LD_INT 1
72901: ARRAY
72902: PUSH
72903: LD_INT 3
72905: ARRAY
72906: EQUAL
72907: AND
72908: IFFALSE 72918
// result := true end ;
72910: LD_ADDR_VAR 0 3
72914: PUSH
72915: LD_INT 1
72917: ST_TO_ADDR
// end ;
72918: LD_VAR 0 3
72922: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72923: LD_INT 0
72925: PPUSH
// result := false ;
72926: LD_ADDR_VAR 0 4
72930: PUSH
72931: LD_INT 0
72933: ST_TO_ADDR
// if GetTaskList ( unit ) then
72934: LD_VAR 0 1
72938: PPUSH
72939: CALL_OW 437
72943: IFFALSE 73026
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72945: LD_STRING M
72947: PUSH
72948: LD_VAR 0 1
72952: PPUSH
72953: CALL_OW 437
72957: PUSH
72958: LD_INT 1
72960: ARRAY
72961: PUSH
72962: LD_INT 1
72964: ARRAY
72965: EQUAL
72966: PUSH
72967: LD_VAR 0 2
72971: PUSH
72972: LD_VAR 0 1
72976: PPUSH
72977: CALL_OW 437
72981: PUSH
72982: LD_INT 1
72984: ARRAY
72985: PUSH
72986: LD_INT 2
72988: ARRAY
72989: EQUAL
72990: AND
72991: PUSH
72992: LD_VAR 0 3
72996: PUSH
72997: LD_VAR 0 1
73001: PPUSH
73002: CALL_OW 437
73006: PUSH
73007: LD_INT 1
73009: ARRAY
73010: PUSH
73011: LD_INT 3
73013: ARRAY
73014: EQUAL
73015: AND
73016: IFFALSE 73026
// result := true ;
73018: LD_ADDR_VAR 0 4
73022: PUSH
73023: LD_INT 1
73025: ST_TO_ADDR
// end ; end ;
73026: LD_VAR 0 4
73030: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73031: LD_INT 0
73033: PPUSH
73034: PPUSH
73035: PPUSH
73036: PPUSH
// if not unit or not area then
73037: LD_VAR 0 1
73041: NOT
73042: PUSH
73043: LD_VAR 0 2
73047: NOT
73048: OR
73049: IFFALSE 73053
// exit ;
73051: GO 73217
// tmp := AreaToList ( area , i ) ;
73053: LD_ADDR_VAR 0 6
73057: PUSH
73058: LD_VAR 0 2
73062: PPUSH
73063: LD_VAR 0 5
73067: PPUSH
73068: CALL_OW 517
73072: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73073: LD_ADDR_VAR 0 5
73077: PUSH
73078: DOUBLE
73079: LD_INT 1
73081: DEC
73082: ST_TO_ADDR
73083: LD_VAR 0 6
73087: PUSH
73088: LD_INT 1
73090: ARRAY
73091: PUSH
73092: FOR_TO
73093: IFFALSE 73215
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73095: LD_ADDR_VAR 0 7
73099: PUSH
73100: LD_VAR 0 6
73104: PUSH
73105: LD_INT 1
73107: ARRAY
73108: PUSH
73109: LD_VAR 0 5
73113: ARRAY
73114: PUSH
73115: LD_VAR 0 6
73119: PUSH
73120: LD_INT 2
73122: ARRAY
73123: PUSH
73124: LD_VAR 0 5
73128: ARRAY
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73134: LD_VAR 0 7
73138: PUSH
73139: LD_INT 1
73141: ARRAY
73142: PPUSH
73143: LD_VAR 0 7
73147: PUSH
73148: LD_INT 2
73150: ARRAY
73151: PPUSH
73152: CALL_OW 428
73156: PUSH
73157: LD_INT 0
73159: EQUAL
73160: IFFALSE 73213
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73162: LD_VAR 0 1
73166: PPUSH
73167: LD_VAR 0 7
73171: PUSH
73172: LD_INT 1
73174: ARRAY
73175: PPUSH
73176: LD_VAR 0 7
73180: PUSH
73181: LD_INT 2
73183: ARRAY
73184: PPUSH
73185: LD_VAR 0 3
73189: PPUSH
73190: CALL_OW 48
// result := IsPlaced ( unit ) ;
73194: LD_ADDR_VAR 0 4
73198: PUSH
73199: LD_VAR 0 1
73203: PPUSH
73204: CALL_OW 305
73208: ST_TO_ADDR
// exit ;
73209: POP
73210: POP
73211: GO 73217
// end ; end ;
73213: GO 73092
73215: POP
73216: POP
// end ;
73217: LD_VAR 0 4
73221: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73222: LD_INT 0
73224: PPUSH
73225: PPUSH
73226: PPUSH
// if not side or side > 8 then
73227: LD_VAR 0 1
73231: NOT
73232: PUSH
73233: LD_VAR 0 1
73237: PUSH
73238: LD_INT 8
73240: GREATER
73241: OR
73242: IFFALSE 73246
// exit ;
73244: GO 73433
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73246: LD_ADDR_VAR 0 4
73250: PUSH
73251: LD_INT 22
73253: PUSH
73254: LD_VAR 0 1
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 21
73265: PUSH
73266: LD_INT 3
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: PPUSH
73277: CALL_OW 69
73281: ST_TO_ADDR
// if not tmp then
73282: LD_VAR 0 4
73286: NOT
73287: IFFALSE 73291
// exit ;
73289: GO 73433
// enable_addtolog := true ;
73291: LD_ADDR_OWVAR 81
73295: PUSH
73296: LD_INT 1
73298: ST_TO_ADDR
// AddToLog ( [ ) ;
73299: LD_STRING [
73301: PPUSH
73302: CALL_OW 561
// for i in tmp do
73306: LD_ADDR_VAR 0 3
73310: PUSH
73311: LD_VAR 0 4
73315: PUSH
73316: FOR_IN
73317: IFFALSE 73424
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73319: LD_STRING [
73321: PUSH
73322: LD_VAR 0 3
73326: PPUSH
73327: CALL_OW 266
73331: STR
73332: PUSH
73333: LD_STRING , 
73335: STR
73336: PUSH
73337: LD_VAR 0 3
73341: PPUSH
73342: CALL_OW 250
73346: STR
73347: PUSH
73348: LD_STRING , 
73350: STR
73351: PUSH
73352: LD_VAR 0 3
73356: PPUSH
73357: CALL_OW 251
73361: STR
73362: PUSH
73363: LD_STRING , 
73365: STR
73366: PUSH
73367: LD_VAR 0 3
73371: PPUSH
73372: CALL_OW 254
73376: STR
73377: PUSH
73378: LD_STRING , 
73380: STR
73381: PUSH
73382: LD_VAR 0 3
73386: PPUSH
73387: LD_INT 1
73389: PPUSH
73390: CALL_OW 268
73394: STR
73395: PUSH
73396: LD_STRING , 
73398: STR
73399: PUSH
73400: LD_VAR 0 3
73404: PPUSH
73405: LD_INT 2
73407: PPUSH
73408: CALL_OW 268
73412: STR
73413: PUSH
73414: LD_STRING ],
73416: STR
73417: PPUSH
73418: CALL_OW 561
// end ;
73422: GO 73316
73424: POP
73425: POP
// AddToLog ( ]; ) ;
73426: LD_STRING ];
73428: PPUSH
73429: CALL_OW 561
// end ;
73433: LD_VAR 0 2
73437: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73438: LD_INT 0
73440: PPUSH
73441: PPUSH
73442: PPUSH
73443: PPUSH
73444: PPUSH
// if not area or not rate or not max then
73445: LD_VAR 0 1
73449: NOT
73450: PUSH
73451: LD_VAR 0 2
73455: NOT
73456: OR
73457: PUSH
73458: LD_VAR 0 4
73462: NOT
73463: OR
73464: IFFALSE 73468
// exit ;
73466: GO 73660
// while 1 do
73468: LD_INT 1
73470: IFFALSE 73660
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73472: LD_ADDR_VAR 0 9
73476: PUSH
73477: LD_VAR 0 1
73481: PPUSH
73482: LD_INT 1
73484: PPUSH
73485: CALL_OW 287
73489: PUSH
73490: LD_INT 10
73492: MUL
73493: ST_TO_ADDR
// r := rate / 10 ;
73494: LD_ADDR_VAR 0 7
73498: PUSH
73499: LD_VAR 0 2
73503: PUSH
73504: LD_INT 10
73506: DIVREAL
73507: ST_TO_ADDR
// time := 1 1$00 ;
73508: LD_ADDR_VAR 0 8
73512: PUSH
73513: LD_INT 2100
73515: ST_TO_ADDR
// if amount < min then
73516: LD_VAR 0 9
73520: PUSH
73521: LD_VAR 0 3
73525: LESS
73526: IFFALSE 73544
// r := r * 2 else
73528: LD_ADDR_VAR 0 7
73532: PUSH
73533: LD_VAR 0 7
73537: PUSH
73538: LD_INT 2
73540: MUL
73541: ST_TO_ADDR
73542: GO 73570
// if amount > max then
73544: LD_VAR 0 9
73548: PUSH
73549: LD_VAR 0 4
73553: GREATER
73554: IFFALSE 73570
// r := r / 2 ;
73556: LD_ADDR_VAR 0 7
73560: PUSH
73561: LD_VAR 0 7
73565: PUSH
73566: LD_INT 2
73568: DIVREAL
73569: ST_TO_ADDR
// time := time / r ;
73570: LD_ADDR_VAR 0 8
73574: PUSH
73575: LD_VAR 0 8
73579: PUSH
73580: LD_VAR 0 7
73584: DIVREAL
73585: ST_TO_ADDR
// if time < 0 then
73586: LD_VAR 0 8
73590: PUSH
73591: LD_INT 0
73593: LESS
73594: IFFALSE 73611
// time := time * - 1 ;
73596: LD_ADDR_VAR 0 8
73600: PUSH
73601: LD_VAR 0 8
73605: PUSH
73606: LD_INT 1
73608: NEG
73609: MUL
73610: ST_TO_ADDR
// wait ( time ) ;
73611: LD_VAR 0 8
73615: PPUSH
73616: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73620: LD_INT 35
73622: PPUSH
73623: LD_INT 875
73625: PPUSH
73626: CALL_OW 12
73630: PPUSH
73631: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73635: LD_INT 1
73637: PPUSH
73638: LD_INT 5
73640: PPUSH
73641: CALL_OW 12
73645: PPUSH
73646: LD_VAR 0 1
73650: PPUSH
73651: LD_INT 1
73653: PPUSH
73654: CALL_OW 55
// end ;
73658: GO 73468
// end ;
73660: LD_VAR 0 5
73664: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73665: LD_INT 0
73667: PPUSH
73668: PPUSH
73669: PPUSH
73670: PPUSH
73671: PPUSH
73672: PPUSH
73673: PPUSH
73674: PPUSH
// if not turrets or not factories then
73675: LD_VAR 0 1
73679: NOT
73680: PUSH
73681: LD_VAR 0 2
73685: NOT
73686: OR
73687: IFFALSE 73691
// exit ;
73689: GO 73998
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73691: LD_ADDR_VAR 0 10
73695: PUSH
73696: LD_INT 5
73698: PUSH
73699: LD_INT 6
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 2
73708: PUSH
73709: LD_INT 4
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 3
73718: PUSH
73719: LD_INT 5
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: LIST
73730: PUSH
73731: LD_INT 24
73733: PUSH
73734: LD_INT 25
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: PUSH
73741: LD_INT 23
73743: PUSH
73744: LD_INT 27
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 42
73757: PUSH
73758: LD_INT 43
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: LD_INT 44
73767: PUSH
73768: LD_INT 46
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PUSH
73775: LD_INT 45
73777: PUSH
73778: LD_INT 47
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: LIST
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: LIST
73794: ST_TO_ADDR
// result := [ ] ;
73795: LD_ADDR_VAR 0 3
73799: PUSH
73800: EMPTY
73801: ST_TO_ADDR
// for i in turrets do
73802: LD_ADDR_VAR 0 4
73806: PUSH
73807: LD_VAR 0 1
73811: PUSH
73812: FOR_IN
73813: IFFALSE 73996
// begin nat := GetNation ( i ) ;
73815: LD_ADDR_VAR 0 7
73819: PUSH
73820: LD_VAR 0 4
73824: PPUSH
73825: CALL_OW 248
73829: ST_TO_ADDR
// weapon := 0 ;
73830: LD_ADDR_VAR 0 8
73834: PUSH
73835: LD_INT 0
73837: ST_TO_ADDR
// if not nat then
73838: LD_VAR 0 7
73842: NOT
73843: IFFALSE 73847
// continue ;
73845: GO 73812
// for j in list [ nat ] do
73847: LD_ADDR_VAR 0 5
73851: PUSH
73852: LD_VAR 0 10
73856: PUSH
73857: LD_VAR 0 7
73861: ARRAY
73862: PUSH
73863: FOR_IN
73864: IFFALSE 73905
// if GetBWeapon ( i ) = j [ 1 ] then
73866: LD_VAR 0 4
73870: PPUSH
73871: CALL_OW 269
73875: PUSH
73876: LD_VAR 0 5
73880: PUSH
73881: LD_INT 1
73883: ARRAY
73884: EQUAL
73885: IFFALSE 73903
// begin weapon := j [ 2 ] ;
73887: LD_ADDR_VAR 0 8
73891: PUSH
73892: LD_VAR 0 5
73896: PUSH
73897: LD_INT 2
73899: ARRAY
73900: ST_TO_ADDR
// break ;
73901: GO 73905
// end ;
73903: GO 73863
73905: POP
73906: POP
// if not weapon then
73907: LD_VAR 0 8
73911: NOT
73912: IFFALSE 73916
// continue ;
73914: GO 73812
// for k in factories do
73916: LD_ADDR_VAR 0 6
73920: PUSH
73921: LD_VAR 0 2
73925: PUSH
73926: FOR_IN
73927: IFFALSE 73992
// begin weapons := AvailableWeaponList ( k ) ;
73929: LD_ADDR_VAR 0 9
73933: PUSH
73934: LD_VAR 0 6
73938: PPUSH
73939: CALL_OW 478
73943: ST_TO_ADDR
// if not weapons then
73944: LD_VAR 0 9
73948: NOT
73949: IFFALSE 73953
// continue ;
73951: GO 73926
// if weapon in weapons then
73953: LD_VAR 0 8
73957: PUSH
73958: LD_VAR 0 9
73962: IN
73963: IFFALSE 73990
// begin result := [ i , weapon ] ;
73965: LD_ADDR_VAR 0 3
73969: PUSH
73970: LD_VAR 0 4
73974: PUSH
73975: LD_VAR 0 8
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: ST_TO_ADDR
// exit ;
73984: POP
73985: POP
73986: POP
73987: POP
73988: GO 73998
// end ; end ;
73990: GO 73926
73992: POP
73993: POP
// end ;
73994: GO 73812
73996: POP
73997: POP
// end ;
73998: LD_VAR 0 3
74002: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74003: LD_INT 0
74005: PPUSH
// if not side or side > 8 then
74006: LD_VAR 0 3
74010: NOT
74011: PUSH
74012: LD_VAR 0 3
74016: PUSH
74017: LD_INT 8
74019: GREATER
74020: OR
74021: IFFALSE 74025
// exit ;
74023: GO 74084
// if not range then
74025: LD_VAR 0 4
74029: NOT
74030: IFFALSE 74041
// range := - 12 ;
74032: LD_ADDR_VAR 0 4
74036: PUSH
74037: LD_INT 12
74039: NEG
74040: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74041: LD_VAR 0 1
74045: PPUSH
74046: LD_VAR 0 2
74050: PPUSH
74051: LD_VAR 0 3
74055: PPUSH
74056: LD_VAR 0 4
74060: PPUSH
74061: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74065: LD_VAR 0 1
74069: PPUSH
74070: LD_VAR 0 2
74074: PPUSH
74075: LD_VAR 0 3
74079: PPUSH
74080: CALL_OW 331
// end ;
74084: LD_VAR 0 5
74088: RET
// export function Video ( mode ) ; begin
74089: LD_INT 0
74091: PPUSH
// ingame_video = mode ;
74092: LD_ADDR_OWVAR 52
74096: PUSH
74097: LD_VAR 0 1
74101: ST_TO_ADDR
// interface_hidden = mode ;
74102: LD_ADDR_OWVAR 54
74106: PUSH
74107: LD_VAR 0 1
74111: ST_TO_ADDR
// end ;
74112: LD_VAR 0 2
74116: RET
// export function Join ( array , element ) ; begin
74117: LD_INT 0
74119: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74120: LD_ADDR_VAR 0 3
74124: PUSH
74125: LD_VAR 0 1
74129: PPUSH
74130: LD_VAR 0 1
74134: PUSH
74135: LD_INT 1
74137: PLUS
74138: PPUSH
74139: LD_VAR 0 2
74143: PPUSH
74144: CALL_OW 1
74148: ST_TO_ADDR
// end ;
74149: LD_VAR 0 3
74153: RET
// export function JoinUnion ( array , element ) ; begin
74154: LD_INT 0
74156: PPUSH
// result := array union element ;
74157: LD_ADDR_VAR 0 3
74161: PUSH
74162: LD_VAR 0 1
74166: PUSH
74167: LD_VAR 0 2
74171: UNION
74172: ST_TO_ADDR
// end ;
74173: LD_VAR 0 3
74177: RET
// export function GetBehemoths ( side ) ; begin
74178: LD_INT 0
74180: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74181: LD_ADDR_VAR 0 2
74185: PUSH
74186: LD_INT 22
74188: PUSH
74189: LD_VAR 0 1
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: PUSH
74198: LD_INT 31
74200: PUSH
74201: LD_INT 25
74203: PUSH
74204: EMPTY
74205: LIST
74206: LIST
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PPUSH
74212: CALL_OW 69
74216: ST_TO_ADDR
// end ;
74217: LD_VAR 0 2
74221: RET
// export function Shuffle ( array ) ; var i , index ; begin
74222: LD_INT 0
74224: PPUSH
74225: PPUSH
74226: PPUSH
// result := [ ] ;
74227: LD_ADDR_VAR 0 2
74231: PUSH
74232: EMPTY
74233: ST_TO_ADDR
// if not array then
74234: LD_VAR 0 1
74238: NOT
74239: IFFALSE 74243
// exit ;
74241: GO 74342
// Randomize ;
74243: CALL_OW 10
// for i = array downto 1 do
74247: LD_ADDR_VAR 0 3
74251: PUSH
74252: DOUBLE
74253: LD_VAR 0 1
74257: INC
74258: ST_TO_ADDR
74259: LD_INT 1
74261: PUSH
74262: FOR_DOWNTO
74263: IFFALSE 74340
// begin index := rand ( 1 , array ) ;
74265: LD_ADDR_VAR 0 4
74269: PUSH
74270: LD_INT 1
74272: PPUSH
74273: LD_VAR 0 1
74277: PPUSH
74278: CALL_OW 12
74282: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74283: LD_ADDR_VAR 0 2
74287: PUSH
74288: LD_VAR 0 2
74292: PPUSH
74293: LD_VAR 0 2
74297: PUSH
74298: LD_INT 1
74300: PLUS
74301: PPUSH
74302: LD_VAR 0 1
74306: PUSH
74307: LD_VAR 0 4
74311: ARRAY
74312: PPUSH
74313: CALL_OW 2
74317: ST_TO_ADDR
// array := Delete ( array , index ) ;
74318: LD_ADDR_VAR 0 1
74322: PUSH
74323: LD_VAR 0 1
74327: PPUSH
74328: LD_VAR 0 4
74332: PPUSH
74333: CALL_OW 3
74337: ST_TO_ADDR
// end ;
74338: GO 74262
74340: POP
74341: POP
// end ;
74342: LD_VAR 0 2
74346: RET
// export function GetBaseMaterials ( base ) ; begin
74347: LD_INT 0
74349: PPUSH
// result := [ 0 , 0 , 0 ] ;
74350: LD_ADDR_VAR 0 2
74354: PUSH
74355: LD_INT 0
74357: PUSH
74358: LD_INT 0
74360: PUSH
74361: LD_INT 0
74363: PUSH
74364: EMPTY
74365: LIST
74366: LIST
74367: LIST
74368: ST_TO_ADDR
// if not base then
74369: LD_VAR 0 1
74373: NOT
74374: IFFALSE 74378
// exit ;
74376: GO 74427
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74378: LD_ADDR_VAR 0 2
74382: PUSH
74383: LD_VAR 0 1
74387: PPUSH
74388: LD_INT 1
74390: PPUSH
74391: CALL_OW 275
74395: PUSH
74396: LD_VAR 0 1
74400: PPUSH
74401: LD_INT 2
74403: PPUSH
74404: CALL_OW 275
74408: PUSH
74409: LD_VAR 0 1
74413: PPUSH
74414: LD_INT 3
74416: PPUSH
74417: CALL_OW 275
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: LIST
74426: ST_TO_ADDR
// end ;
74427: LD_VAR 0 2
74431: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74432: LD_INT 0
74434: PPUSH
74435: PPUSH
// result := array ;
74436: LD_ADDR_VAR 0 3
74440: PUSH
74441: LD_VAR 0 1
74445: ST_TO_ADDR
// if size > 0 then
74446: LD_VAR 0 2
74450: PUSH
74451: LD_INT 0
74453: GREATER
74454: IFFALSE 74500
// for i := array downto size do
74456: LD_ADDR_VAR 0 4
74460: PUSH
74461: DOUBLE
74462: LD_VAR 0 1
74466: INC
74467: ST_TO_ADDR
74468: LD_VAR 0 2
74472: PUSH
74473: FOR_DOWNTO
74474: IFFALSE 74498
// result := Delete ( result , result ) ;
74476: LD_ADDR_VAR 0 3
74480: PUSH
74481: LD_VAR 0 3
74485: PPUSH
74486: LD_VAR 0 3
74490: PPUSH
74491: CALL_OW 3
74495: ST_TO_ADDR
74496: GO 74473
74498: POP
74499: POP
// end ;
74500: LD_VAR 0 3
74504: RET
// export function ComExit ( unit ) ; var tmp ; begin
74505: LD_INT 0
74507: PPUSH
74508: PPUSH
// if not IsInUnit ( unit ) then
74509: LD_VAR 0 1
74513: PPUSH
74514: CALL_OW 310
74518: NOT
74519: IFFALSE 74523
// exit ;
74521: GO 74583
// tmp := IsInUnit ( unit ) ;
74523: LD_ADDR_VAR 0 3
74527: PUSH
74528: LD_VAR 0 1
74532: PPUSH
74533: CALL_OW 310
74537: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74538: LD_VAR 0 3
74542: PPUSH
74543: CALL_OW 247
74547: PUSH
74548: LD_INT 2
74550: EQUAL
74551: IFFALSE 74564
// ComExitVehicle ( unit ) else
74553: LD_VAR 0 1
74557: PPUSH
74558: CALL_OW 121
74562: GO 74573
// ComExitBuilding ( unit ) ;
74564: LD_VAR 0 1
74568: PPUSH
74569: CALL_OW 122
// result := tmp ;
74573: LD_ADDR_VAR 0 2
74577: PUSH
74578: LD_VAR 0 3
74582: ST_TO_ADDR
// end ;
74583: LD_VAR 0 2
74587: RET
// export function ComExitAll ( units ) ; var i ; begin
74588: LD_INT 0
74590: PPUSH
74591: PPUSH
// if not units then
74592: LD_VAR 0 1
74596: NOT
74597: IFFALSE 74601
// exit ;
74599: GO 74627
// for i in units do
74601: LD_ADDR_VAR 0 3
74605: PUSH
74606: LD_VAR 0 1
74610: PUSH
74611: FOR_IN
74612: IFFALSE 74625
// ComExit ( i ) ;
74614: LD_VAR 0 3
74618: PPUSH
74619: CALL 74505 0 1
74623: GO 74611
74625: POP
74626: POP
// end ;
74627: LD_VAR 0 2
74631: RET
// export function ResetHc ; begin
74632: LD_INT 0
74634: PPUSH
// InitHc ;
74635: CALL_OW 19
// hc_importance := 0 ;
74639: LD_ADDR_OWVAR 32
74643: PUSH
74644: LD_INT 0
74646: ST_TO_ADDR
// end ;
74647: LD_VAR 0 1
74651: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74652: LD_INT 0
74654: PPUSH
74655: PPUSH
74656: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74657: LD_ADDR_VAR 0 6
74661: PUSH
74662: LD_VAR 0 1
74666: PUSH
74667: LD_VAR 0 3
74671: PLUS
74672: PUSH
74673: LD_INT 2
74675: DIV
74676: ST_TO_ADDR
// if _x < 0 then
74677: LD_VAR 0 6
74681: PUSH
74682: LD_INT 0
74684: LESS
74685: IFFALSE 74702
// _x := _x * - 1 ;
74687: LD_ADDR_VAR 0 6
74691: PUSH
74692: LD_VAR 0 6
74696: PUSH
74697: LD_INT 1
74699: NEG
74700: MUL
74701: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74702: LD_ADDR_VAR 0 7
74706: PUSH
74707: LD_VAR 0 2
74711: PUSH
74712: LD_VAR 0 4
74716: PLUS
74717: PUSH
74718: LD_INT 2
74720: DIV
74721: ST_TO_ADDR
// if _y < 0 then
74722: LD_VAR 0 7
74726: PUSH
74727: LD_INT 0
74729: LESS
74730: IFFALSE 74747
// _y := _y * - 1 ;
74732: LD_ADDR_VAR 0 7
74736: PUSH
74737: LD_VAR 0 7
74741: PUSH
74742: LD_INT 1
74744: NEG
74745: MUL
74746: ST_TO_ADDR
// result := [ _x , _y ] ;
74747: LD_ADDR_VAR 0 5
74751: PUSH
74752: LD_VAR 0 6
74756: PUSH
74757: LD_VAR 0 7
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: ST_TO_ADDR
// end ;
74766: LD_VAR 0 5
74770: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74771: LD_INT 0
74773: PPUSH
74774: PPUSH
74775: PPUSH
74776: PPUSH
// task := GetTaskList ( unit ) ;
74777: LD_ADDR_VAR 0 7
74781: PUSH
74782: LD_VAR 0 1
74786: PPUSH
74787: CALL_OW 437
74791: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74792: LD_VAR 0 7
74796: NOT
74797: PUSH
74798: LD_VAR 0 1
74802: PPUSH
74803: LD_VAR 0 2
74807: PPUSH
74808: CALL_OW 308
74812: NOT
74813: AND
74814: IFFALSE 74818
// exit ;
74816: GO 74936
// if IsInArea ( unit , area ) then
74818: LD_VAR 0 1
74822: PPUSH
74823: LD_VAR 0 2
74827: PPUSH
74828: CALL_OW 308
74832: IFFALSE 74850
// begin ComMoveToArea ( unit , goAway ) ;
74834: LD_VAR 0 1
74838: PPUSH
74839: LD_VAR 0 3
74843: PPUSH
74844: CALL_OW 113
// exit ;
74848: GO 74936
// end ; if task [ 1 ] [ 1 ] <> M then
74850: LD_VAR 0 7
74854: PUSH
74855: LD_INT 1
74857: ARRAY
74858: PUSH
74859: LD_INT 1
74861: ARRAY
74862: PUSH
74863: LD_STRING M
74865: NONEQUAL
74866: IFFALSE 74870
// exit ;
74868: GO 74936
// x := task [ 1 ] [ 2 ] ;
74870: LD_ADDR_VAR 0 5
74874: PUSH
74875: LD_VAR 0 7
74879: PUSH
74880: LD_INT 1
74882: ARRAY
74883: PUSH
74884: LD_INT 2
74886: ARRAY
74887: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74888: LD_ADDR_VAR 0 6
74892: PUSH
74893: LD_VAR 0 7
74897: PUSH
74898: LD_INT 1
74900: ARRAY
74901: PUSH
74902: LD_INT 3
74904: ARRAY
74905: ST_TO_ADDR
// if InArea ( x , y , area ) then
74906: LD_VAR 0 5
74910: PPUSH
74911: LD_VAR 0 6
74915: PPUSH
74916: LD_VAR 0 2
74920: PPUSH
74921: CALL_OW 309
74925: IFFALSE 74936
// ComStop ( unit ) ;
74927: LD_VAR 0 1
74931: PPUSH
74932: CALL_OW 141
// end ;
74936: LD_VAR 0 4
74940: RET
// export function Abs ( value ) ; begin
74941: LD_INT 0
74943: PPUSH
// result := value ;
74944: LD_ADDR_VAR 0 2
74948: PUSH
74949: LD_VAR 0 1
74953: ST_TO_ADDR
// if value < 0 then
74954: LD_VAR 0 1
74958: PUSH
74959: LD_INT 0
74961: LESS
74962: IFFALSE 74979
// result := value * - 1 ;
74964: LD_ADDR_VAR 0 2
74968: PUSH
74969: LD_VAR 0 1
74973: PUSH
74974: LD_INT 1
74976: NEG
74977: MUL
74978: ST_TO_ADDR
// end ;
74979: LD_VAR 0 2
74983: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74984: LD_INT 0
74986: PPUSH
74987: PPUSH
74988: PPUSH
74989: PPUSH
74990: PPUSH
74991: PPUSH
74992: PPUSH
74993: PPUSH
// if not unit or not building then
74994: LD_VAR 0 1
74998: NOT
74999: PUSH
75000: LD_VAR 0 2
75004: NOT
75005: OR
75006: IFFALSE 75010
// exit ;
75008: GO 75236
// x := GetX ( building ) ;
75010: LD_ADDR_VAR 0 4
75014: PUSH
75015: LD_VAR 0 2
75019: PPUSH
75020: CALL_OW 250
75024: ST_TO_ADDR
// y := GetY ( building ) ;
75025: LD_ADDR_VAR 0 6
75029: PUSH
75030: LD_VAR 0 2
75034: PPUSH
75035: CALL_OW 251
75039: ST_TO_ADDR
// d := GetDir ( building ) ;
75040: LD_ADDR_VAR 0 8
75044: PUSH
75045: LD_VAR 0 2
75049: PPUSH
75050: CALL_OW 254
75054: ST_TO_ADDR
// r := 4 ;
75055: LD_ADDR_VAR 0 9
75059: PUSH
75060: LD_INT 4
75062: ST_TO_ADDR
// for i := 1 to 5 do
75063: LD_ADDR_VAR 0 10
75067: PUSH
75068: DOUBLE
75069: LD_INT 1
75071: DEC
75072: ST_TO_ADDR
75073: LD_INT 5
75075: PUSH
75076: FOR_TO
75077: IFFALSE 75234
// begin _x := ShiftX ( x , d , r + i ) ;
75079: LD_ADDR_VAR 0 5
75083: PUSH
75084: LD_VAR 0 4
75088: PPUSH
75089: LD_VAR 0 8
75093: PPUSH
75094: LD_VAR 0 9
75098: PUSH
75099: LD_VAR 0 10
75103: PLUS
75104: PPUSH
75105: CALL_OW 272
75109: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75110: LD_ADDR_VAR 0 7
75114: PUSH
75115: LD_VAR 0 6
75119: PPUSH
75120: LD_VAR 0 8
75124: PPUSH
75125: LD_VAR 0 9
75129: PUSH
75130: LD_VAR 0 10
75134: PLUS
75135: PPUSH
75136: CALL_OW 273
75140: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75141: LD_VAR 0 5
75145: PPUSH
75146: LD_VAR 0 7
75150: PPUSH
75151: CALL_OW 488
75155: PUSH
75156: LD_VAR 0 5
75160: PPUSH
75161: LD_VAR 0 7
75165: PPUSH
75166: CALL_OW 428
75170: PPUSH
75171: CALL_OW 247
75175: PUSH
75176: LD_INT 3
75178: PUSH
75179: LD_INT 2
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: IN
75186: NOT
75187: AND
75188: IFFALSE 75232
// begin ComMoveXY ( unit , _x , _y ) ;
75190: LD_VAR 0 1
75194: PPUSH
75195: LD_VAR 0 5
75199: PPUSH
75200: LD_VAR 0 7
75204: PPUSH
75205: CALL_OW 111
// result := [ _x , _y ] ;
75209: LD_ADDR_VAR 0 3
75213: PUSH
75214: LD_VAR 0 5
75218: PUSH
75219: LD_VAR 0 7
75223: PUSH
75224: EMPTY
75225: LIST
75226: LIST
75227: ST_TO_ADDR
// exit ;
75228: POP
75229: POP
75230: GO 75236
// end ; end ;
75232: GO 75076
75234: POP
75235: POP
// end ;
75236: LD_VAR 0 3
75240: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75241: LD_INT 0
75243: PPUSH
75244: PPUSH
75245: PPUSH
// result := 0 ;
75246: LD_ADDR_VAR 0 3
75250: PUSH
75251: LD_INT 0
75253: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75254: LD_VAR 0 1
75258: PUSH
75259: LD_INT 0
75261: LESS
75262: PUSH
75263: LD_VAR 0 1
75267: PUSH
75268: LD_INT 8
75270: GREATER
75271: OR
75272: PUSH
75273: LD_VAR 0 2
75277: PUSH
75278: LD_INT 0
75280: LESS
75281: OR
75282: PUSH
75283: LD_VAR 0 2
75287: PUSH
75288: LD_INT 8
75290: GREATER
75291: OR
75292: IFFALSE 75296
// exit ;
75294: GO 75371
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75296: LD_ADDR_VAR 0 4
75300: PUSH
75301: LD_INT 22
75303: PUSH
75304: LD_VAR 0 2
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PPUSH
75313: CALL_OW 69
75317: PUSH
75318: FOR_IN
75319: IFFALSE 75369
// begin un := UnitShoot ( i ) ;
75321: LD_ADDR_VAR 0 5
75325: PUSH
75326: LD_VAR 0 4
75330: PPUSH
75331: CALL_OW 504
75335: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75336: LD_VAR 0 5
75340: PPUSH
75341: CALL_OW 255
75345: PUSH
75346: LD_VAR 0 1
75350: EQUAL
75351: IFFALSE 75367
// begin result := un ;
75353: LD_ADDR_VAR 0 3
75357: PUSH
75358: LD_VAR 0 5
75362: ST_TO_ADDR
// exit ;
75363: POP
75364: POP
75365: GO 75371
// end ; end ;
75367: GO 75318
75369: POP
75370: POP
// end ;
75371: LD_VAR 0 3
75375: RET
// export function GetCargoBay ( units ) ; begin
75376: LD_INT 0
75378: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75379: LD_ADDR_VAR 0 2
75383: PUSH
75384: LD_VAR 0 1
75388: PPUSH
75389: LD_INT 2
75391: PUSH
75392: LD_INT 34
75394: PUSH
75395: LD_INT 12
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: PUSH
75402: LD_INT 34
75404: PUSH
75405: LD_INT 51
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: PUSH
75412: LD_INT 34
75414: PUSH
75415: LD_INT 32
75417: PUSH
75418: EMPTY
75419: LIST
75420: LIST
75421: PUSH
75422: LD_INT 34
75424: PUSH
75425: LD_EXP 49
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: PPUSH
75441: CALL_OW 72
75445: ST_TO_ADDR
// end ;
75446: LD_VAR 0 2
75450: RET
// export function Negate ( value ) ; begin
75451: LD_INT 0
75453: PPUSH
// result := not value ;
75454: LD_ADDR_VAR 0 2
75458: PUSH
75459: LD_VAR 0 1
75463: NOT
75464: ST_TO_ADDR
// end ;
75465: LD_VAR 0 2
75469: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
75470: LD_INT 0
75472: PPUSH
// if x1 = x2 then
75473: LD_VAR 0 1
75477: PUSH
75478: LD_VAR 0 3
75482: EQUAL
75483: IFFALSE 75517
// begin if y1 > y2 then
75485: LD_VAR 0 2
75489: PUSH
75490: LD_VAR 0 4
75494: GREATER
75495: IFFALSE 75507
// result := 0 else
75497: LD_ADDR_VAR 0 5
75501: PUSH
75502: LD_INT 0
75504: ST_TO_ADDR
75505: GO 75515
// result := 3 ;
75507: LD_ADDR_VAR 0 5
75511: PUSH
75512: LD_INT 3
75514: ST_TO_ADDR
// exit ;
75515: GO 75603
// end ; if y1 = y2 then
75517: LD_VAR 0 2
75521: PUSH
75522: LD_VAR 0 4
75526: EQUAL
75527: IFFALSE 75561
// begin if x1 > x2 then
75529: LD_VAR 0 1
75533: PUSH
75534: LD_VAR 0 3
75538: GREATER
75539: IFFALSE 75551
// result := 1 else
75541: LD_ADDR_VAR 0 5
75545: PUSH
75546: LD_INT 1
75548: ST_TO_ADDR
75549: GO 75559
// result := 4 ;
75551: LD_ADDR_VAR 0 5
75555: PUSH
75556: LD_INT 4
75558: ST_TO_ADDR
// exit ;
75559: GO 75603
// end ; if x1 > x2 and y1 > y2 then
75561: LD_VAR 0 1
75565: PUSH
75566: LD_VAR 0 3
75570: GREATER
75571: PUSH
75572: LD_VAR 0 2
75576: PUSH
75577: LD_VAR 0 4
75581: GREATER
75582: AND
75583: IFFALSE 75595
// result := 2 else
75585: LD_ADDR_VAR 0 5
75589: PUSH
75590: LD_INT 2
75592: ST_TO_ADDR
75593: GO 75603
// result := 5 ;
75595: LD_ADDR_VAR 0 5
75599: PUSH
75600: LD_INT 5
75602: ST_TO_ADDR
// end ;
75603: LD_VAR 0 5
75607: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75608: LD_INT 0
75610: PPUSH
75611: PPUSH
// if not driver or not IsInUnit ( driver ) then
75612: LD_VAR 0 1
75616: NOT
75617: PUSH
75618: LD_VAR 0 1
75622: PPUSH
75623: CALL_OW 310
75627: NOT
75628: OR
75629: IFFALSE 75633
// exit ;
75631: GO 75723
// vehicle := IsInUnit ( driver ) ;
75633: LD_ADDR_VAR 0 3
75637: PUSH
75638: LD_VAR 0 1
75642: PPUSH
75643: CALL_OW 310
75647: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75648: LD_VAR 0 1
75652: PPUSH
75653: LD_STRING \
75655: PUSH
75656: LD_INT 0
75658: PUSH
75659: LD_INT 0
75661: PUSH
75662: LD_INT 0
75664: PUSH
75665: LD_INT 0
75667: PUSH
75668: LD_INT 0
75670: PUSH
75671: LD_INT 0
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: PUSH
75683: LD_STRING E
75685: PUSH
75686: LD_INT 0
75688: PUSH
75689: LD_INT 0
75691: PUSH
75692: LD_VAR 0 3
75696: PUSH
75697: LD_INT 0
75699: PUSH
75700: LD_INT 0
75702: PUSH
75703: LD_INT 0
75705: PUSH
75706: EMPTY
75707: LIST
75708: LIST
75709: LIST
75710: LIST
75711: LIST
75712: LIST
75713: LIST
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PPUSH
75719: CALL_OW 446
// end ;
75723: LD_VAR 0 2
75727: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75728: LD_INT 0
75730: PPUSH
75731: PPUSH
// if not driver or not IsInUnit ( driver ) then
75732: LD_VAR 0 1
75736: NOT
75737: PUSH
75738: LD_VAR 0 1
75742: PPUSH
75743: CALL_OW 310
75747: NOT
75748: OR
75749: IFFALSE 75753
// exit ;
75751: GO 75843
// vehicle := IsInUnit ( driver ) ;
75753: LD_ADDR_VAR 0 3
75757: PUSH
75758: LD_VAR 0 1
75762: PPUSH
75763: CALL_OW 310
75767: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75768: LD_VAR 0 1
75772: PPUSH
75773: LD_STRING \
75775: PUSH
75776: LD_INT 0
75778: PUSH
75779: LD_INT 0
75781: PUSH
75782: LD_INT 0
75784: PUSH
75785: LD_INT 0
75787: PUSH
75788: LD_INT 0
75790: PUSH
75791: LD_INT 0
75793: PUSH
75794: EMPTY
75795: LIST
75796: LIST
75797: LIST
75798: LIST
75799: LIST
75800: LIST
75801: LIST
75802: PUSH
75803: LD_STRING E
75805: PUSH
75806: LD_INT 0
75808: PUSH
75809: LD_INT 0
75811: PUSH
75812: LD_VAR 0 3
75816: PUSH
75817: LD_INT 0
75819: PUSH
75820: LD_INT 0
75822: PUSH
75823: LD_INT 0
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: PPUSH
75839: CALL_OW 447
// end ;
75843: LD_VAR 0 2
75847: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75848: LD_INT 0
75850: PPUSH
75851: PPUSH
75852: PPUSH
// tmp := [ ] ;
75853: LD_ADDR_VAR 0 5
75857: PUSH
75858: EMPTY
75859: ST_TO_ADDR
// for i in units do
75860: LD_ADDR_VAR 0 4
75864: PUSH
75865: LD_VAR 0 1
75869: PUSH
75870: FOR_IN
75871: IFFALSE 75909
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75873: LD_ADDR_VAR 0 5
75877: PUSH
75878: LD_VAR 0 5
75882: PPUSH
75883: LD_VAR 0 5
75887: PUSH
75888: LD_INT 1
75890: PLUS
75891: PPUSH
75892: LD_VAR 0 4
75896: PPUSH
75897: CALL_OW 256
75901: PPUSH
75902: CALL_OW 2
75906: ST_TO_ADDR
75907: GO 75870
75909: POP
75910: POP
// if not tmp then
75911: LD_VAR 0 5
75915: NOT
75916: IFFALSE 75920
// exit ;
75918: GO 75968
// if asc then
75920: LD_VAR 0 2
75924: IFFALSE 75948
// result := SortListByListAsc ( units , tmp ) else
75926: LD_ADDR_VAR 0 3
75930: PUSH
75931: LD_VAR 0 1
75935: PPUSH
75936: LD_VAR 0 5
75940: PPUSH
75941: CALL_OW 76
75945: ST_TO_ADDR
75946: GO 75968
// result := SortListByListDesc ( units , tmp ) ;
75948: LD_ADDR_VAR 0 3
75952: PUSH
75953: LD_VAR 0 1
75957: PPUSH
75958: LD_VAR 0 5
75962: PPUSH
75963: CALL_OW 77
75967: ST_TO_ADDR
// end ;
75968: LD_VAR 0 3
75972: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75973: LD_INT 0
75975: PPUSH
75976: PPUSH
// task := GetTaskList ( mech ) ;
75977: LD_ADDR_VAR 0 4
75981: PUSH
75982: LD_VAR 0 1
75986: PPUSH
75987: CALL_OW 437
75991: ST_TO_ADDR
// if not task then
75992: LD_VAR 0 4
75996: NOT
75997: IFFALSE 76001
// exit ;
75999: GO 76043
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76001: LD_ADDR_VAR 0 3
76005: PUSH
76006: LD_VAR 0 4
76010: PUSH
76011: LD_INT 1
76013: ARRAY
76014: PUSH
76015: LD_INT 1
76017: ARRAY
76018: PUSH
76019: LD_STRING r
76021: EQUAL
76022: PUSH
76023: LD_VAR 0 4
76027: PUSH
76028: LD_INT 1
76030: ARRAY
76031: PUSH
76032: LD_INT 4
76034: ARRAY
76035: PUSH
76036: LD_VAR 0 2
76040: EQUAL
76041: AND
76042: ST_TO_ADDR
// end ;
76043: LD_VAR 0 3
76047: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76048: LD_INT 0
76050: PPUSH
// SetDir ( unit , d ) ;
76051: LD_VAR 0 1
76055: PPUSH
76056: LD_VAR 0 4
76060: PPUSH
76061: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76065: LD_VAR 0 1
76069: PPUSH
76070: LD_VAR 0 2
76074: PPUSH
76075: LD_VAR 0 3
76079: PPUSH
76080: LD_VAR 0 5
76084: PPUSH
76085: CALL_OW 48
// end ;
76089: LD_VAR 0 6
76093: RET
// export function ToNaturalNumber ( number ) ; begin
76094: LD_INT 0
76096: PPUSH
// result := number div 1 ;
76097: LD_ADDR_VAR 0 2
76101: PUSH
76102: LD_VAR 0 1
76106: PUSH
76107: LD_INT 1
76109: DIV
76110: ST_TO_ADDR
// if number < 0 then
76111: LD_VAR 0 1
76115: PUSH
76116: LD_INT 0
76118: LESS
76119: IFFALSE 76129
// result := 0 ;
76121: LD_ADDR_VAR 0 2
76125: PUSH
76126: LD_INT 0
76128: ST_TO_ADDR
// end ;
76129: LD_VAR 0 2
76133: RET
// export function SortByClass ( units , class ) ; var un ; begin
76134: LD_INT 0
76136: PPUSH
76137: PPUSH
// if not units or not class then
76138: LD_VAR 0 1
76142: NOT
76143: PUSH
76144: LD_VAR 0 2
76148: NOT
76149: OR
76150: IFFALSE 76154
// exit ;
76152: GO 76249
// result := [ ] ;
76154: LD_ADDR_VAR 0 3
76158: PUSH
76159: EMPTY
76160: ST_TO_ADDR
// for un in units do
76161: LD_ADDR_VAR 0 4
76165: PUSH
76166: LD_VAR 0 1
76170: PUSH
76171: FOR_IN
76172: IFFALSE 76247
// if GetClass ( un ) = class then
76174: LD_VAR 0 4
76178: PPUSH
76179: CALL_OW 257
76183: PUSH
76184: LD_VAR 0 2
76188: EQUAL
76189: IFFALSE 76216
// result := Insert ( result , 1 , un ) else
76191: LD_ADDR_VAR 0 3
76195: PUSH
76196: LD_VAR 0 3
76200: PPUSH
76201: LD_INT 1
76203: PPUSH
76204: LD_VAR 0 4
76208: PPUSH
76209: CALL_OW 2
76213: ST_TO_ADDR
76214: GO 76245
// result := Replace ( result , result + 1 , un ) ;
76216: LD_ADDR_VAR 0 3
76220: PUSH
76221: LD_VAR 0 3
76225: PPUSH
76226: LD_VAR 0 3
76230: PUSH
76231: LD_INT 1
76233: PLUS
76234: PPUSH
76235: LD_VAR 0 4
76239: PPUSH
76240: CALL_OW 1
76244: ST_TO_ADDR
76245: GO 76171
76247: POP
76248: POP
// end ;
76249: LD_VAR 0 3
76253: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76254: LD_INT 0
76256: PPUSH
76257: PPUSH
76258: PPUSH
76259: PPUSH
76260: PPUSH
76261: PPUSH
76262: PPUSH
// result := [ ] ;
76263: LD_ADDR_VAR 0 4
76267: PUSH
76268: EMPTY
76269: ST_TO_ADDR
// if x - r < 0 then
76270: LD_VAR 0 1
76274: PUSH
76275: LD_VAR 0 3
76279: MINUS
76280: PUSH
76281: LD_INT 0
76283: LESS
76284: IFFALSE 76296
// min_x := 0 else
76286: LD_ADDR_VAR 0 8
76290: PUSH
76291: LD_INT 0
76293: ST_TO_ADDR
76294: GO 76312
// min_x := x - r ;
76296: LD_ADDR_VAR 0 8
76300: PUSH
76301: LD_VAR 0 1
76305: PUSH
76306: LD_VAR 0 3
76310: MINUS
76311: ST_TO_ADDR
// if y - r < 0 then
76312: LD_VAR 0 2
76316: PUSH
76317: LD_VAR 0 3
76321: MINUS
76322: PUSH
76323: LD_INT 0
76325: LESS
76326: IFFALSE 76338
// min_y := 0 else
76328: LD_ADDR_VAR 0 7
76332: PUSH
76333: LD_INT 0
76335: ST_TO_ADDR
76336: GO 76354
// min_y := y - r ;
76338: LD_ADDR_VAR 0 7
76342: PUSH
76343: LD_VAR 0 2
76347: PUSH
76348: LD_VAR 0 3
76352: MINUS
76353: ST_TO_ADDR
// max_x := x + r ;
76354: LD_ADDR_VAR 0 9
76358: PUSH
76359: LD_VAR 0 1
76363: PUSH
76364: LD_VAR 0 3
76368: PLUS
76369: ST_TO_ADDR
// max_y := y + r ;
76370: LD_ADDR_VAR 0 10
76374: PUSH
76375: LD_VAR 0 2
76379: PUSH
76380: LD_VAR 0 3
76384: PLUS
76385: ST_TO_ADDR
// for _x = min_x to max_x do
76386: LD_ADDR_VAR 0 5
76390: PUSH
76391: DOUBLE
76392: LD_VAR 0 8
76396: DEC
76397: ST_TO_ADDR
76398: LD_VAR 0 9
76402: PUSH
76403: FOR_TO
76404: IFFALSE 76505
// for _y = min_y to max_y do
76406: LD_ADDR_VAR 0 6
76410: PUSH
76411: DOUBLE
76412: LD_VAR 0 7
76416: DEC
76417: ST_TO_ADDR
76418: LD_VAR 0 10
76422: PUSH
76423: FOR_TO
76424: IFFALSE 76501
// begin if not ValidHex ( _x , _y ) then
76426: LD_VAR 0 5
76430: PPUSH
76431: LD_VAR 0 6
76435: PPUSH
76436: CALL_OW 488
76440: NOT
76441: IFFALSE 76445
// continue ;
76443: GO 76423
// if GetResourceTypeXY ( _x , _y ) then
76445: LD_VAR 0 5
76449: PPUSH
76450: LD_VAR 0 6
76454: PPUSH
76455: CALL_OW 283
76459: IFFALSE 76499
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76461: LD_ADDR_VAR 0 4
76465: PUSH
76466: LD_VAR 0 4
76470: PPUSH
76471: LD_VAR 0 4
76475: PUSH
76476: LD_INT 1
76478: PLUS
76479: PPUSH
76480: LD_VAR 0 5
76484: PUSH
76485: LD_VAR 0 6
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: PPUSH
76494: CALL_OW 1
76498: ST_TO_ADDR
// end ;
76499: GO 76423
76501: POP
76502: POP
76503: GO 76403
76505: POP
76506: POP
// end ;
76507: LD_VAR 0 4
76511: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
76512: LD_INT 0
76514: PPUSH
76515: PPUSH
76516: PPUSH
76517: PPUSH
76518: PPUSH
76519: PPUSH
// if not units then
76520: LD_VAR 0 1
76524: NOT
76525: IFFALSE 76529
// exit ;
76527: GO 76930
// result := UnitFilter ( units , [ f_ok ] ) ;
76529: LD_ADDR_VAR 0 3
76533: PUSH
76534: LD_VAR 0 1
76538: PPUSH
76539: LD_INT 50
76541: PUSH
76542: EMPTY
76543: LIST
76544: PPUSH
76545: CALL_OW 72
76549: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76550: LD_ADDR_VAR 0 7
76554: PUSH
76555: LD_VAR 0 1
76559: PUSH
76560: LD_INT 1
76562: ARRAY
76563: PPUSH
76564: CALL_OW 255
76568: ST_TO_ADDR
// if not result then
76569: LD_VAR 0 3
76573: NOT
76574: IFFALSE 76578
// exit ;
76576: GO 76930
// for i in result do
76578: LD_ADDR_VAR 0 4
76582: PUSH
76583: LD_VAR 0 3
76587: PUSH
76588: FOR_IN
76589: IFFALSE 76928
// begin tag := GetTag ( i ) + 1 ;
76591: LD_ADDR_VAR 0 8
76595: PUSH
76596: LD_VAR 0 4
76600: PPUSH
76601: CALL_OW 110
76605: PUSH
76606: LD_INT 1
76608: PLUS
76609: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76610: LD_ADDR_VAR 0 6
76614: PUSH
76615: LD_VAR 0 4
76619: PPUSH
76620: CALL_OW 250
76624: PPUSH
76625: LD_VAR 0 4
76629: PPUSH
76630: CALL_OW 251
76634: PPUSH
76635: LD_INT 6
76637: PPUSH
76638: CALL 76254 0 3
76642: ST_TO_ADDR
// if cr then
76643: LD_VAR 0 6
76647: IFFALSE 76686
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76649: LD_VAR 0 4
76653: PPUSH
76654: LD_VAR 0 6
76658: PUSH
76659: LD_INT 1
76661: ARRAY
76662: PUSH
76663: LD_INT 1
76665: ARRAY
76666: PPUSH
76667: LD_VAR 0 6
76671: PUSH
76672: LD_INT 1
76674: ARRAY
76675: PUSH
76676: LD_INT 2
76678: ARRAY
76679: PPUSH
76680: CALL_OW 116
76684: GO 76926
// if path > tag then
76686: LD_VAR 0 2
76690: PUSH
76691: LD_VAR 0 8
76695: GREATER
76696: IFFALSE 76874
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
76698: LD_ADDR_VAR 0 5
76702: PUSH
76703: LD_INT 81
76705: PUSH
76706: LD_VAR 0 7
76710: PUSH
76711: EMPTY
76712: LIST
76713: LIST
76714: PUSH
76715: LD_INT 91
76717: PUSH
76718: LD_VAR 0 4
76722: PUSH
76723: LD_INT 12
76725: PUSH
76726: EMPTY
76727: LIST
76728: LIST
76729: LIST
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: PPUSH
76735: CALL_OW 69
76739: ST_TO_ADDR
// if enemy then
76740: LD_VAR 0 5
76744: IFFALSE 76772
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76746: LD_VAR 0 4
76750: PPUSH
76751: LD_VAR 0 5
76755: PPUSH
76756: LD_VAR 0 4
76760: PPUSH
76761: CALL_OW 74
76765: PPUSH
76766: CALL_OW 115
76770: GO 76872
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76772: LD_VAR 0 4
76776: PPUSH
76777: LD_VAR 0 2
76781: PUSH
76782: LD_VAR 0 8
76786: ARRAY
76787: PUSH
76788: LD_INT 1
76790: ARRAY
76791: PPUSH
76792: LD_VAR 0 2
76796: PUSH
76797: LD_VAR 0 8
76801: ARRAY
76802: PUSH
76803: LD_INT 2
76805: ARRAY
76806: PPUSH
76807: CALL_OW 297
76811: PUSH
76812: LD_INT 6
76814: GREATER
76815: IFFALSE 76858
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76817: LD_VAR 0 4
76821: PPUSH
76822: LD_VAR 0 2
76826: PUSH
76827: LD_VAR 0 8
76831: ARRAY
76832: PUSH
76833: LD_INT 1
76835: ARRAY
76836: PPUSH
76837: LD_VAR 0 2
76841: PUSH
76842: LD_VAR 0 8
76846: ARRAY
76847: PUSH
76848: LD_INT 2
76850: ARRAY
76851: PPUSH
76852: CALL_OW 114
76856: GO 76872
// SetTag ( i , tag ) ;
76858: LD_VAR 0 4
76862: PPUSH
76863: LD_VAR 0 8
76867: PPUSH
76868: CALL_OW 109
// end else
76872: GO 76926
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76874: LD_ADDR_VAR 0 5
76878: PUSH
76879: LD_INT 81
76881: PUSH
76882: LD_VAR 0 7
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: PPUSH
76891: CALL_OW 69
76895: ST_TO_ADDR
// if enemy then
76896: LD_VAR 0 5
76900: IFFALSE 76926
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76902: LD_VAR 0 4
76906: PPUSH
76907: LD_VAR 0 5
76911: PPUSH
76912: LD_VAR 0 4
76916: PPUSH
76917: CALL_OW 74
76921: PPUSH
76922: CALL_OW 115
// end ; end ;
76926: GO 76588
76928: POP
76929: POP
// end ; end_of_file
76930: LD_VAR 0 3
76934: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76935: LD_VAR 0 1
76939: PUSH
76940: LD_INT 200
76942: DOUBLE
76943: GREATEREQUAL
76944: IFFALSE 76952
76946: LD_INT 299
76948: DOUBLE
76949: LESSEQUAL
76950: IFTRUE 76954
76952: GO 76986
76954: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76955: LD_VAR 0 1
76959: PPUSH
76960: LD_VAR 0 2
76964: PPUSH
76965: LD_VAR 0 3
76969: PPUSH
76970: LD_VAR 0 4
76974: PPUSH
76975: LD_VAR 0 5
76979: PPUSH
76980: CALL 33497 0 5
76984: GO 77063
76986: LD_INT 300
76988: DOUBLE
76989: GREATEREQUAL
76990: IFFALSE 76998
76992: LD_INT 399
76994: DOUBLE
76995: LESSEQUAL
76996: IFTRUE 77000
76998: GO 77062
77000: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77001: LD_VAR 0 1
77005: PPUSH
77006: LD_VAR 0 2
77010: PPUSH
77011: LD_VAR 0 3
77015: PPUSH
77016: LD_VAR 0 4
77020: PPUSH
77021: LD_VAR 0 5
77025: PPUSH
77026: LD_VAR 0 6
77030: PPUSH
77031: LD_VAR 0 7
77035: PPUSH
77036: LD_VAR 0 8
77040: PPUSH
77041: LD_VAR 0 9
77045: PPUSH
77046: LD_VAR 0 10
77050: PPUSH
77051: LD_VAR 0 11
77055: PPUSH
77056: CALL 31395 0 11
77060: GO 77063
77062: POP
// end ;
77063: PPOPN 11
77065: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77066: LD_VAR 0 1
77070: PPUSH
77071: LD_VAR 0 2
77075: PPUSH
77076: LD_VAR 0 3
77080: PPUSH
77081: LD_VAR 0 4
77085: PPUSH
77086: LD_VAR 0 5
77090: PPUSH
77091: CALL 33489 0 5
// end ; end_of_file
77095: PPOPN 5
77097: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77098: LD_VAR 0 1
77102: PPUSH
77103: LD_VAR 0 2
77107: PPUSH
77108: LD_VAR 0 3
77112: PPUSH
77113: LD_VAR 0 4
77117: PPUSH
77118: LD_VAR 0 5
77122: PPUSH
77123: LD_VAR 0 6
77127: PPUSH
77128: CALL 19590 0 6
// end ;
77132: PPOPN 6
77134: END
