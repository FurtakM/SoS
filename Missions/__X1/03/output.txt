// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 637 0 0
// PrepareArabian ;
  12: CALL 996 0 0
// PrepareAmerican ;
  16: CALL 4057 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9176 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// end ; end_of_file
 336: LD_VAR 0 1
 340: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 341: LD_INT 0
 343: PPUSH
// uc_side := side ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_VAR 0 1
 353: ST_TO_ADDR
// uc_nation := nation ;
 354: LD_ADDR_OWVAR 21
 358: PUSH
 359: LD_VAR 0 2
 363: ST_TO_ADDR
// vc_chassis := chassis ;
 364: LD_ADDR_OWVAR 37
 368: PUSH
 369: LD_VAR 0 3
 373: ST_TO_ADDR
// vc_engine := engine ;
 374: LD_ADDR_OWVAR 39
 378: PUSH
 379: LD_VAR 0 4
 383: ST_TO_ADDR
// vc_control := control ;
 384: LD_ADDR_OWVAR 38
 388: PUSH
 389: LD_VAR 0 5
 393: ST_TO_ADDR
// vc_weapon := weapon ;
 394: LD_ADDR_OWVAR 40
 398: PUSH
 399: LD_VAR 0 6
 403: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 404: LD_ADDR_OWVAR 41
 408: PUSH
 409: LD_VAR 0 7
 413: ST_TO_ADDR
// result := CreateVehicle ;
 414: LD_ADDR_VAR 0 8
 418: PUSH
 419: CALL_OW 45
 423: ST_TO_ADDR
// end ;
 424: LD_VAR 0 8
 428: RET
// export function SayX ( units , ident ) ; var i ; begin
 429: LD_INT 0
 431: PPUSH
 432: PPUSH
// result := false ;
 433: LD_ADDR_VAR 0 3
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// if not units then
 441: LD_VAR 0 1
 445: NOT
 446: IFFALSE 450
// exit ;
 448: GO 504
// for i in units do
 450: LD_ADDR_VAR 0 4
 454: PUSH
 455: LD_VAR 0 1
 459: PUSH
 460: FOR_IN
 461: IFFALSE 502
// if IsOk ( i ) then
 463: LD_VAR 0 4
 467: PPUSH
 468: CALL_OW 302
 472: IFFALSE 500
// begin Say ( i , ident ) ;
 474: LD_VAR 0 4
 478: PPUSH
 479: LD_VAR 0 2
 483: PPUSH
 484: CALL_OW 88
// result := i ;
 488: LD_ADDR_VAR 0 3
 492: PUSH
 493: LD_VAR 0 4
 497: ST_TO_ADDR
// break ;
 498: GO 502
// end ;
 500: GO 460
 502: POP
 503: POP
// end ;
 504: LD_VAR 0 3
 508: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 509: LD_INT 0
 511: PPUSH
 512: PPUSH
// InitUc ;
 513: CALL_OW 18
// InitHc ;
 517: CALL_OW 19
// uc_side := 0 ;
 521: LD_ADDR_OWVAR 20
 525: PUSH
 526: LD_INT 0
 528: ST_TO_ADDR
// uc_nation := 0 ;
 529: LD_ADDR_OWVAR 21
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// for i = 1 to amount do
 537: LD_ADDR_VAR 0 4
 541: PUSH
 542: DOUBLE
 543: LD_INT 1
 545: DEC
 546: ST_TO_ADDR
 547: LD_VAR 0 2
 551: PUSH
 552: FOR_TO
 553: IFFALSE 626
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 555: LD_ADDR_OWVAR 29
 559: PUSH
 560: LD_INT 9
 562: PPUSH
 563: LD_INT 12
 565: PPUSH
 566: CALL_OW 12
 570: PUSH
 571: LD_INT 9
 573: PPUSH
 574: LD_INT 12
 576: PPUSH
 577: CALL_OW 12
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: ST_TO_ADDR
// hc_agressivity := 0 ;
 586: LD_ADDR_OWVAR 35
 590: PUSH
 591: LD_INT 0
 593: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 12
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 607: CALL_OW 44
 611: PPUSH
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 552
 626: POP
 627: POP
// InitHc ;
 628: CALL_OW 19
// end ;
 632: LD_VAR 0 3
 636: RET
// export function CreateNature ; var i ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 641: LD_INT 2
 643: PPUSH
 644: LD_INT 5
 646: PUSH
 647: LD_INT 4
 649: PUSH
 650: LD_INT 4
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_OWVAR 67
 666: ARRAY
 667: PPUSH
 668: CALL 509 0 2
// for i := 1 to 2 do
 672: LD_ADDR_VAR 0 2
 676: PUSH
 677: DOUBLE
 678: LD_INT 1
 680: DEC
 681: ST_TO_ADDR
 682: LD_INT 2
 684: PUSH
 685: FOR_TO
 686: IFFALSE 721
// begin hc_class := 21 ;
 688: LD_ADDR_OWVAR 28
 692: PUSH
 693: LD_INT 21
 695: ST_TO_ADDR
// hc_gallery :=  ;
 696: LD_ADDR_OWVAR 33
 700: PUSH
 701: LD_STRING 
 703: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 704: CALL_OW 44
 708: PPUSH
 709: LD_INT 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 685
 721: POP
 722: POP
// for i := 1 to 2 do
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 2
 735: PUSH
 736: FOR_TO
 737: IFFALSE 772
// begin hc_class := 18 ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 18
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_INT 2
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: CALL_OW 49
// end ;
 770: GO 736
 772: POP
 773: POP
// for i := 1 to 2 do
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: DOUBLE
 780: LD_INT 1
 782: DEC
 783: ST_TO_ADDR
 784: LD_INT 2
 786: PUSH
 787: FOR_TO
 788: IFFALSE 823
// begin hc_class := 13 ;
 790: LD_ADDR_OWVAR 28
 794: PUSH
 795: LD_INT 13
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 806: CALL_OW 44
 810: PPUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 49
// end ;
 821: GO 787
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 1
 829: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
// if not observer or not unit then
 835: LD_VAR 0 1
 839: NOT
 840: PUSH
 841: LD_VAR 0 2
 845: NOT
 846: OR
 847: IFFALSE 851
// exit ;
 849: GO 899
// if not See ( GetSide ( observer ) , unit ) then
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 255
 860: PPUSH
 861: LD_VAR 0 2
 865: PPUSH
 866: CALL_OW 292
 870: NOT
 871: IFFALSE 875
// exit ;
 873: GO 899
// result := GetDistUnits ( observer , unit ) < 12 ;
 875: LD_ADDR_VAR 0 3
 879: PUSH
 880: LD_VAR 0 1
 884: PPUSH
 885: LD_VAR 0 2
 889: PPUSH
 890: CALL_OW 296
 894: PUSH
 895: LD_INT 12
 897: LESS
 898: ST_TO_ADDR
// end ;
 899: LD_VAR 0 3
 903: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 904: LD_INT 0
 906: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 488
 929: PUSH
 930: LD_VAR 0 2
 934: PUSH
 935: LD_INT 1
 937: ARRAY
 938: PPUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: ARRAY
 947: PPUSH
 948: CALL_OW 428
 952: PUSH
 953: LD_INT 0
 955: EQUAL
 956: AND
 957: IFFALSE 991
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 959: LD_VAR 0 1
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: ARRAY
 981: PPUSH
 982: LD_VAR 0 3
 986: PPUSH
 987: CALL_OW 48
// end ; end_of_file
 991: LD_VAR 0 4
 995: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
 996: LD_INT 0
 998: PPUSH
 999: PPUSH
1000: PPUSH
1001: PPUSH
// uc_side := 5 ;
1002: LD_ADDR_OWVAR 20
1006: PUSH
1007: LD_INT 5
1009: ST_TO_ADDR
// uc_nation := 2 ;
1010: LD_ADDR_OWVAR 21
1014: PUSH
1015: LD_INT 2
1017: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1018: LD_INT 5
1020: PPUSH
1021: CALL_OW 274
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: LD_INT 65
1031: PPUSH
1032: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1036: LD_ADDR_EXP 38
1040: PUSH
1041: LD_STRING Farmer
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: LD_STRING 
1049: PPUSH
1050: CALL 40075 0 3
1054: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1055: LD_ADDR_EXP 39
1059: PUSH
1060: LD_STRING Omar
1062: PPUSH
1063: LD_INT 0
1065: PPUSH
1066: LD_STRING 
1068: PPUSH
1069: CALL 40075 0 3
1073: ST_TO_ADDR
// omarSquad := [ ] ;
1074: LD_ADDR_EXP 42
1078: PUSH
1079: EMPTY
1080: ST_TO_ADDR
// heikeSquad := [ ] ;
1081: LD_ADDR_EXP 43
1085: PUSH
1086: EMPTY
1087: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1088: LD_ADDR_EXP 44
1092: PUSH
1093: EMPTY
1094: ST_TO_ADDR
// omarCargo := [ ] ;
1095: LD_ADDR_EXP 45
1099: PUSH
1100: EMPTY
1101: ST_TO_ADDR
// for i := 1 to 5 do
1102: LD_ADDR_VAR 0 2
1106: PUSH
1107: DOUBLE
1108: LD_INT 1
1110: DEC
1111: ST_TO_ADDR
1112: LD_INT 5
1114: PUSH
1115: FOR_TO
1116: IFFALSE 1274
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1118: LD_INT 0
1120: PPUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 2
1129: PUSH
1130: LD_INT 1
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_VAR 0 2
1147: ARRAY
1148: PPUSH
1149: LD_INT 3
1151: PPUSH
1152: CALL_OW 380
// un := CreateHuman ;
1156: LD_ADDR_VAR 0 3
1160: PUSH
1161: CALL_OW 44
1165: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1166: LD_ADDR_EXP 42
1170: PUSH
1171: LD_EXP 42
1175: PUSH
1176: LD_VAR 0 3
1180: UNION
1181: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1182: LD_VAR 0 3
1186: PPUSH
1187: LD_INT 87
1189: PUSH
1190: LD_INT 30
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 91
1199: PUSH
1200: LD_INT 32
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 82
1209: PUSH
1210: LD_INT 15
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: LD_INT 79
1219: PUSH
1220: LD_INT 14
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 82
1229: PUSH
1230: LD_INT 13
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: LD_VAR 0 2
1248: ARRAY
1249: PPUSH
1250: LD_INT 0
1252: PPUSH
1253: CALL 904 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1257: LD_VAR 0 3
1261: PPUSH
1262: LD_INT 93
1264: PPUSH
1265: LD_INT 21
1267: PPUSH
1268: CALL_OW 118
// end ;
1272: GO 1115
1274: POP
1275: POP
// uc_side := 2 ;
1276: LD_ADDR_OWVAR 20
1280: PUSH
1281: LD_INT 2
1283: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1284: LD_ADDR_EXP 30
1288: PUSH
1289: LD_STRING Heike
1291: PPUSH
1292: LD_EXP 1
1296: NOT
1297: PPUSH
1298: LD_EXP 2
1302: PPUSH
1303: CALL 40075 0 3
1307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1308: LD_ADDR_EXP 34
1312: PUSH
1313: LD_STRING Aviradze
1315: PPUSH
1316: LD_EXP 1
1320: NOT
1321: PPUSH
1322: LD_EXP 2
1326: PPUSH
1327: CALL 40075 0 3
1331: ST_TO_ADDR
// tmp := [ ] ;
1332: LD_ADDR_VAR 0 4
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1339: LD_ADDR_EXP 31
1343: PUSH
1344: LD_STRING Givi
1346: PPUSH
1347: LD_EXP 1
1351: NOT
1352: PPUSH
1353: LD_EXP 2
1357: PPUSH
1358: CALL 40075 0 3
1362: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1363: LD_ADDR_EXP 32
1367: PUSH
1368: LD_STRING Mike
1370: PPUSH
1371: LD_EXP 1
1375: NOT
1376: PPUSH
1377: LD_EXP 2
1381: PPUSH
1382: CALL 40075 0 3
1386: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1387: LD_ADDR_EXP 33
1391: PUSH
1392: LD_STRING Kamil
1394: PPUSH
1395: LD_EXP 1
1399: NOT
1400: PPUSH
1401: LD_EXP 2
1405: PPUSH
1406: CALL 40075 0 3
1410: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1411: LD_ADDR_EXP 35
1415: PUSH
1416: LD_STRING Kaia
1418: PPUSH
1419: LD_EXP 1
1423: NOT
1424: PPUSH
1425: LD_EXP 2
1429: PPUSH
1430: CALL 40075 0 3
1434: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1435: LD_ADDR_EXP 36
1439: PUSH
1440: LD_STRING Sophia
1442: PPUSH
1443: LD_EXP 1
1447: NOT
1448: PPUSH
1449: LD_EXP 2
1453: PPUSH
1454: CALL 40075 0 3
1458: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1459: LD_ADDR_EXP 37
1463: PUSH
1464: LD_STRING Markov
1466: PPUSH
1467: LD_EXP 1
1471: NOT
1472: PPUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 40075 0 3
1482: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1483: LD_ADDR_EXP 44
1487: PUSH
1488: LD_STRING 02_others
1490: PPUSH
1491: CALL_OW 31
1495: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1496: LD_ADDR_VAR 0 4
1500: PUSH
1501: LD_EXP 32
1505: PUSH
1506: LD_EXP 33
1510: PUSH
1511: LD_EXP 35
1515: PUSH
1516: LD_EXP 36
1520: PUSH
1521: LD_EXP 37
1525: PUSH
1526: LD_EXP 31
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: PUSH
1539: LD_EXP 44
1543: ADD
1544: PUSH
1545: LD_INT 0
1547: DIFF
1548: ST_TO_ADDR
// heikeSquad := tmp ;
1549: LD_ADDR_EXP 43
1553: PUSH
1554: LD_VAR 0 4
1558: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1559: LD_EXP 43
1563: PPUSH
1564: LD_INT 25
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 72
1578: PUSH
1579: LD_INT 3
1581: LESS
1582: IFFALSE 1632
// begin SetClass ( Kaia , 1 ) ;
1584: LD_EXP 35
1588: PPUSH
1589: LD_INT 1
1591: PPUSH
1592: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1596: LD_EXP 32
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1608: LD_EXP 31
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1620: LD_EXP 30
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_VAR 0 4
1641: PUSH
1642: LD_STRING 02_ape
1644: PPUSH
1645: CALL_OW 31
1649: UNION
1650: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1651: LD_EXP 30
1655: PPUSH
1656: LD_INT 92
1658: PPUSH
1659: LD_INT 17
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1669: LD_EXP 38
1673: PPUSH
1674: LD_INT 95
1676: PPUSH
1677: LD_INT 19
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1687: LD_EXP 39
1691: PPUSH
1692: LD_INT 89
1694: PPUSH
1695: LD_INT 25
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1705: LD_EXP 34
1709: PPUSH
1710: LD_INT 92
1712: PPUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1723: LD_EXP 39
1727: PPUSH
1728: LD_EXP 34
1732: PPUSH
1733: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1737: LD_EXP 34
1741: PPUSH
1742: LD_EXP 39
1746: PPUSH
1747: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1751: LD_EXP 30
1755: PUSH
1756: LD_EXP 38
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PPUSH
1765: LD_EXP 39
1769: PPUSH
1770: CALL_OW 119
// if tmp then
1774: LD_VAR 0 4
1778: IFFALSE 1832
// for i in tmp do
1780: LD_ADDR_VAR 0 2
1784: PUSH
1785: LD_VAR 0 4
1789: PUSH
1790: FOR_IN
1791: IFFALSE 1830
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1793: LD_VAR 0 2
1797: PPUSH
1798: LD_INT 94
1800: PPUSH
1801: LD_INT 14
1803: PPUSH
1804: LD_INT 4
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1814: LD_VAR 0 2
1818: PPUSH
1819: LD_EXP 30
1823: PPUSH
1824: CALL_OW 119
// end ;
1828: GO 1790
1830: POP
1831: POP
// farmerSquad := [ ] ;
1832: LD_ADDR_EXP 41
1836: PUSH
1837: EMPTY
1838: ST_TO_ADDR
// uc_side := 5 ;
1839: LD_ADDR_OWVAR 20
1843: PUSH
1844: LD_INT 5
1846: ST_TO_ADDR
// uc_nation := 2 ;
1847: LD_ADDR_OWVAR 21
1851: PUSH
1852: LD_INT 2
1854: ST_TO_ADDR
// for i := 1 to 4 do
1855: LD_ADDR_VAR 0 2
1859: PUSH
1860: DOUBLE
1861: LD_INT 1
1863: DEC
1864: ST_TO_ADDR
1865: LD_INT 4
1867: PUSH
1868: FOR_TO
1869: IFFALSE 1947
// begin PrepareHuman ( false , 1 , 2 ) ;
1871: LD_INT 0
1873: PPUSH
1874: LD_INT 1
1876: PPUSH
1877: LD_INT 2
1879: PPUSH
1880: CALL_OW 380
// un := CreateHuman ;
1884: LD_ADDR_VAR 0 3
1888: PUSH
1889: CALL_OW 44
1893: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1894: LD_VAR 0 3
1898: PPUSH
1899: LD_INT 102
1901: PPUSH
1902: LD_INT 27
1904: PPUSH
1905: LD_INT 4
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1915: LD_ADDR_EXP 41
1919: PUSH
1920: LD_EXP 41
1924: PUSH
1925: LD_VAR 0 3
1929: UNION
1930: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_EXP 39
1940: PPUSH
1941: CALL_OW 119
// end ;
1945: GO 1868
1947: POP
1948: POP
// for i := 1 to 2 do
1949: LD_ADDR_VAR 0 2
1953: PUSH
1954: DOUBLE
1955: LD_INT 1
1957: DEC
1958: ST_TO_ADDR
1959: LD_INT 2
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2041
// begin PrepareHuman ( false , 2 , 2 ) ;
1965: LD_INT 0
1967: PPUSH
1968: LD_INT 2
1970: PPUSH
1971: LD_INT 2
1973: PPUSH
1974: CALL_OW 380
// un := CreateHuman ;
1978: LD_ADDR_VAR 0 3
1982: PUSH
1983: CALL_OW 44
1987: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1988: LD_VAR 0 3
1992: PPUSH
1993: LD_INT 108
1995: PPUSH
1996: LD_INT 62
1998: PPUSH
1999: LD_INT 2
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2009: LD_ADDR_EXP 41
2013: PUSH
2014: LD_EXP 41
2018: PUSH
2019: LD_VAR 0 3
2023: UNION
2024: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2025: LD_VAR 0 3
2029: PPUSH
2030: LD_EXP 39
2034: PPUSH
2035: CALL_OW 119
// end ;
2039: GO 1962
2041: POP
2042: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2043: LD_INT 109
2045: PPUSH
2046: LD_INT 63
2048: PPUSH
2049: LD_INT 2
2051: PPUSH
2052: LD_INT 15
2054: NEG
2055: PPUSH
2056: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2060: LD_INT 109
2062: PPUSH
2063: LD_INT 63
2065: PPUSH
2066: LD_INT 2
2068: PPUSH
2069: CALL_OW 331
// end ;
2073: LD_VAR 0 1
2077: RET
// export function PrepareIbrahim ( x , y ) ; begin
2078: LD_INT 0
2080: PPUSH
// uc_side := 6 ;
2081: LD_ADDR_OWVAR 20
2085: PUSH
2086: LD_INT 6
2088: ST_TO_ADDR
// uc_nation := 3 ;
2089: LD_ADDR_OWVAR 21
2093: PUSH
2094: LD_INT 3
2096: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2097: LD_ADDR_EXP 40
2101: PUSH
2102: LD_STRING IbrahimRu
2104: PPUSH
2105: LD_INT 0
2107: PPUSH
2108: LD_STRING 
2110: PPUSH
2111: CALL 40075 0 3
2115: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2116: LD_EXP 40
2120: PPUSH
2121: LD_VAR 0 1
2125: PPUSH
2126: LD_VAR 0 2
2130: PPUSH
2131: LD_INT 8
2133: PPUSH
2134: LD_INT 1
2136: PPUSH
2137: CALL_OW 50
// end ;
2141: LD_VAR 0 3
2145: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2146: LD_EXP 39
2150: PUSH
2151: LD_EXP 42
2155: ADD
2156: PPUSH
2157: LD_INT 95
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PPUSH
2167: CALL_OW 72
2171: IFFALSE 2227
2173: GO 2175
2175: DISABLE
2176: LD_INT 0
2178: PPUSH
// begin enable ;
2179: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_EXP 39
2189: PUSH
2190: LD_EXP 42
2194: ADD
2195: PPUSH
2196: LD_INT 95
2198: PUSH
2199: LD_INT 3
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PPUSH
2206: CALL_OW 72
2210: PUSH
2211: FOR_IN
2212: IFFALSE 2225
// RemoveUnit ( i ) ;
2214: LD_VAR 0 1
2218: PPUSH
2219: CALL_OW 64
2223: GO 2211
2225: POP
2226: POP
// end ;
2227: PPOPN 1
2229: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 38
2239: PPUSH
2240: LD_INT 4
2242: PPUSH
2243: CALL_OW 308
2247: AND
2248: IFFALSE 3052
2250: GO 2252
2252: DISABLE
2253: LD_INT 0
2255: PPUSH
2256: PPUSH
2257: PPUSH
2258: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2259: LD_EXP 38
2263: PPUSH
2264: LD_INT 110
2266: PPUSH
2267: LD_INT 60
2269: PPUSH
2270: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2274: LD_EXP 38
2278: PPUSH
2279: LD_INT 110
2281: PPUSH
2282: LD_INT 61
2284: PPUSH
2285: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_EXP 41
2298: PPUSH
2299: LD_INT 25
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PPUSH
2309: CALL_OW 72
2313: ST_TO_ADDR
// if tmp then
2314: LD_VAR 0 2
2318: IFFALSE 2412
// begin for i := 1 to 2 do
2320: LD_ADDR_VAR 0 1
2324: PUSH
2325: DOUBLE
2326: LD_INT 1
2328: DEC
2329: ST_TO_ADDR
2330: LD_INT 2
2332: PUSH
2333: FOR_TO
2334: IFFALSE 2410
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2336: LD_VAR 0 2
2340: PUSH
2341: LD_VAR 0 1
2345: ARRAY
2346: PPUSH
2347: LD_INT 5
2349: PPUSH
2350: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2354: LD_VAR 0 2
2358: PUSH
2359: LD_VAR 0 1
2363: ARRAY
2364: PPUSH
2365: LD_INT 2
2367: PPUSH
2368: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: PPUSH
2383: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2387: LD_VAR 0 2
2391: PUSH
2392: LD_VAR 0 1
2396: ARRAY
2397: PPUSH
2398: LD_INT 107
2400: PPUSH
2401: LD_INT 66
2403: PPUSH
2404: CALL_OW 171
// end ;
2408: GO 2333
2410: POP
2411: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2412: LD_ADDR_VAR 0 2
2416: PUSH
2417: LD_EXP 41
2421: PPUSH
2422: LD_INT 25
2424: PUSH
2425: LD_INT 2
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: PPUSH
2432: CALL_OW 72
2436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2437: LD_INT 35
2439: PPUSH
2440: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2444: LD_ADDR_VAR 0 2
2448: PUSH
2449: LD_EXP 41
2453: PPUSH
2454: LD_INT 25
2456: PUSH
2457: LD_INT 2
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PPUSH
2464: CALL_OW 72
2468: ST_TO_ADDR
// until tmp ;
2469: LD_VAR 0 2
2473: IFFALSE 2437
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 31
2482: PPUSH
2483: LD_INT 102
2485: PPUSH
2486: LD_INT 69
2488: PPUSH
2489: LD_INT 2
2491: PPUSH
2492: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2496: LD_INT 35
2498: PPUSH
2499: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2503: LD_EXP 41
2507: PPUSH
2508: LD_INT 3
2510: PUSH
2511: LD_INT 60
2513: PUSH
2514: EMPTY
2515: LIST
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 25
2523: PUSH
2524: LD_INT 2
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PPUSH
2535: CALL_OW 72
2539: IFFALSE 2496
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2541: LD_ADDR_VAR 0 2
2545: PUSH
2546: LD_EXP 41
2550: PPUSH
2551: LD_INT 25
2553: PUSH
2554: LD_INT 2
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PPUSH
2561: CALL_OW 72
2565: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2566: LD_VAR 0 2
2570: PPUSH
2571: LD_INT 6
2573: PPUSH
2574: LD_INT 116
2576: PPUSH
2577: LD_INT 55
2579: PPUSH
2580: LD_INT 4
2582: PPUSH
2583: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2587: LD_VAR 0 2
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 116
2597: PPUSH
2598: LD_INT 70
2600: PPUSH
2601: LD_INT 5
2603: PPUSH
2604: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2608: LD_VAR 0 2
2612: PPUSH
2613: LD_INT 31
2615: PPUSH
2616: LD_INT 109
2618: PPUSH
2619: LD_INT 50
2621: PPUSH
2622: LD_INT 2
2624: PPUSH
2625: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2629: LD_INT 35
2631: PPUSH
2632: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2636: LD_INT 22
2638: PUSH
2639: LD_INT 5
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: LD_INT 30
2648: PUSH
2649: LD_INT 4
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_INT 3
2658: PUSH
2659: LD_INT 57
2661: PUSH
2662: EMPTY
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: IFFALSE 2629
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2680: LD_ADDR_VAR 0 3
2684: PUSH
2685: LD_INT 22
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 4
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: LD_INT 3
2707: PUSH
2708: LD_INT 57
2710: PUSH
2711: EMPTY
2712: LIST
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PPUSH
2723: CALL_OW 69
2727: PUSH
2728: LD_INT 1
2730: ARRAY
2731: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2732: LD_ADDR_VAR 0 2
2736: PUSH
2737: LD_EXP 41
2741: PPUSH
2742: LD_INT 25
2744: PUSH
2745: LD_INT 1
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PPUSH
2752: CALL_OW 72
2756: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2757: LD_VAR 0 2
2761: PPUSH
2762: LD_VAR 0 3
2766: PPUSH
2767: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2771: LD_INT 35
2773: PPUSH
2774: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2778: LD_INT 22
2780: PUSH
2781: LD_INT 5
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 30
2790: PUSH
2791: LD_INT 31
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: LD_INT 3
2800: PUSH
2801: LD_INT 57
2803: PUSH
2804: EMPTY
2805: LIST
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: LIST
2815: PPUSH
2816: CALL_OW 69
2820: PUSH
2821: LD_INT 2
2823: GREATEREQUAL
2824: IFFALSE 2771
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2826: LD_ADDR_VAR 0 2
2830: PUSH
2831: LD_EXP 41
2835: PPUSH
2836: LD_INT 25
2838: PUSH
2839: LD_INT 2
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 72
2850: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2851: LD_VAR 0 2
2855: PUSH
2856: LD_INT 1
2858: ARRAY
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2867: LD_VAR 0 2
2871: PUSH
2872: LD_INT 2
2874: ARRAY
2875: PUSH
2876: LD_VAR 0 2
2880: PUSH
2881: LD_INT 3
2883: ARRAY
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: LD_VAR 0 3
2893: PPUSH
2894: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2898: LD_VAR 0 2
2902: PUSH
2903: LD_INT 2
2905: ARRAY
2906: PUSH
2907: LD_VAR 0 2
2911: PUSH
2912: LD_INT 3
2914: ARRAY
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2927: LD_VAR 0 2
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PUSH
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 3
2943: ARRAY
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PPUSH
2949: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2953: LD_ADDR_VAR 0 4
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 5
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 30
2970: PUSH
2971: LD_INT 31
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// for i := 1 to 2 do
2987: LD_ADDR_VAR 0 1
2991: PUSH
2992: DOUBLE
2993: LD_INT 1
2995: DEC
2996: ST_TO_ADDR
2997: LD_INT 2
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3035
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3003: LD_VAR 0 2
3007: PUSH
3008: LD_VAR 0 1
3012: PUSH
3013: LD_INT 1
3015: PLUS
3016: ARRAY
3017: PPUSH
3018: LD_VAR 0 4
3022: PUSH
3023: LD_VAR 0 1
3027: ARRAY
3028: PPUSH
3029: CALL_OW 180
3033: GO 3000
3035: POP
3036: POP
// wait ( 1 1$00 ) ;
3037: LD_INT 2100
3039: PPUSH
3040: CALL_OW 67
// farmerBaseReady := true ;
3044: LD_ADDR_EXP 4
3048: PUSH
3049: LD_INT 1
3051: ST_TO_ADDR
// end ;
3052: PPOPN 4
3054: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3055: LD_EXP 4
3059: PUSH
3060: LD_EXP 12
3064: NOT
3065: AND
3066: IFFALSE 3588
3068: GO 3070
3070: DISABLE
3071: LD_INT 0
3073: PPUSH
3074: PPUSH
3075: PPUSH
3076: PPUSH
3077: PPUSH
// begin enable ;
3078: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3079: LD_ADDR_VAR 0 3
3083: PUSH
3084: LD_EXP 41
3088: PPUSH
3089: LD_INT 25
3091: PUSH
3092: LD_INT 1
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 72
3103: PUSH
3104: LD_EXP 38
3108: ADD
3109: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3110: LD_ADDR_VAR 0 2
3114: PUSH
3115: LD_EXP 41
3119: PPUSH
3120: LD_INT 25
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 72
3134: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3135: LD_ADDR_VAR 0 5
3139: PUSH
3140: LD_INT 22
3142: PUSH
3143: LD_INT 5
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 21
3152: PUSH
3153: LD_INT 3
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: LD_INT 24
3165: PUSH
3166: LD_INT 1000
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3187: LD_ADDR_VAR 0 4
3191: PUSH
3192: LD_INT 22
3194: PUSH
3195: LD_INT 5
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 30
3204: PUSH
3205: LD_INT 4
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PPUSH
3216: CALL_OW 69
3220: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3221: LD_VAR 0 4
3225: PUSH
3226: LD_INT 1
3228: ARRAY
3229: PPUSH
3230: CALL_OW 302
3234: IFFALSE 3298
// for i in sol do
3236: LD_ADDR_VAR 0 1
3240: PUSH
3241: LD_VAR 0 3
3245: PUSH
3246: FOR_IN
3247: IFFALSE 3296
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3249: LD_VAR 0 1
3253: PPUSH
3254: CALL_OW 256
3258: PUSH
3259: LD_INT 999
3261: LESS
3262: PUSH
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL_OW 310
3272: NOT
3273: AND
3274: IFFALSE 3294
// ComEnterUnit ( i , arm [ 1 ] ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: CALL_OW 120
3294: GO 3246
3296: POP
3297: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3298: LD_VAR 0 2
3302: NOT
3303: PUSH
3304: LD_INT 22
3306: PUSH
3307: LD_INT 1
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 21
3316: PUSH
3317: LD_INT 1
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: NOT
3333: AND
3334: IFFALSE 3426
// begin uc_side := 5 ;
3336: LD_ADDR_OWVAR 20
3340: PUSH
3341: LD_INT 5
3343: ST_TO_ADDR
// uc_nation := 2 ;
3344: LD_ADDR_OWVAR 21
3348: PUSH
3349: LD_INT 2
3351: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3352: LD_INT 0
3354: PPUSH
3355: LD_INT 2
3357: PPUSH
3358: LD_INT 2
3360: PPUSH
3361: CALL_OW 380
// eng := CreateHuman ;
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3375: LD_VAR 0 2
3379: PPUSH
3380: LD_INT 102
3382: PPUSH
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 0
3388: PPUSH
3389: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3393: LD_VAR 0 2
3397: PPUSH
3398: LD_INT 110
3400: PPUSH
3401: LD_INT 60
3403: PPUSH
3404: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3408: LD_ADDR_EXP 41
3412: PUSH
3413: LD_EXP 41
3417: PUSH
3418: LD_VAR 0 2
3422: UNION
3423: ST_TO_ADDR
// end else
3424: GO 3588
// begin for i in eng do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_VAR 0 2
3435: PUSH
3436: FOR_IN
3437: IFFALSE 3586
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3439: LD_INT 10
3441: PPUSH
3442: LD_INT 1
3444: PPUSH
3445: CALL_OW 287
3449: IFFALSE 3500
// begin if IsInUnit ( i ) then
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 310
3460: IFFALSE 3471
// ComExitBuilding ( i ) ;
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 10
3478: PPUSH
3479: CALL_OW 308
3483: NOT
3484: IFFALSE 3498
// AddComMoveToArea ( i , collectFarmerArea ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: LD_INT 10
3493: PPUSH
3494: CALL_OW 173
// end else
3498: GO 3584
// begin if damagedBuilding then
3500: LD_VAR 0 5
3504: IFFALSE 3548
// begin if IsInUnit ( i ) then
3506: LD_VAR 0 1
3510: PPUSH
3511: CALL_OW 310
3515: IFFALSE 3528
// ComExitBuilding ( i ) else
3517: LD_VAR 0 1
3521: PPUSH
3522: CALL_OW 122
3526: GO 3546
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_VAR 0 5
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: CALL_OW 130
// end else
3546: GO 3584
// if not IsInUnit ( i ) and not HasTask ( i ) then
3548: LD_VAR 0 1
3552: PPUSH
3553: CALL_OW 310
3557: NOT
3558: PUSH
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 314
3568: NOT
3569: AND
3570: IFFALSE 3584
// ComEnterUnit ( i , arDepot ) ;
3572: LD_VAR 0 1
3576: PPUSH
3577: LD_INT 5
3579: PPUSH
3580: CALL_OW 120
// end ; end ;
3584: GO 3436
3586: POP
3587: POP
// end ; end ;
3588: PPOPN 5
3590: END
// export function CargoEvacuation ; begin
3591: LD_INT 0
3593: PPUSH
// wait ( 0 0$3 ) ;
3594: LD_INT 105
3596: PPUSH
3597: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3601: LD_ADDR_EXP 22
3605: PUSH
3606: LD_EXP 22
3610: PUSH
3611: LD_INT 1
3613: MINUS
3614: ST_TO_ADDR
// if omarCargoCounter = 0 then
3615: LD_EXP 22
3619: PUSH
3620: LD_INT 0
3622: EQUAL
3623: IFFALSE 3627
// exit ;
3625: GO 3934
// if omarCargo then
3627: LD_EXP 45
3631: IFFALSE 3642
// RemoveUnit ( omarCargo ) ;
3633: LD_EXP 45
3637: PPUSH
3638: CALL_OW 64
// omarCargo := PrepareCargo ;
3642: LD_ADDR_EXP 45
3646: PUSH
3647: CALL 3939 0 0
3651: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3652: LD_EXP 45
3656: PPUSH
3657: LD_INT 0
3659: PPUSH
3660: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3664: LD_EXP 45
3668: PPUSH
3669: LD_INT 107
3671: PPUSH
3672: LD_INT 59
3674: PPUSH
3675: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3679: LD_INT 35
3681: PPUSH
3682: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3686: LD_EXP 45
3690: PPUSH
3691: LD_INT 107
3693: PPUSH
3694: LD_INT 59
3696: PPUSH
3697: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3701: LD_EXP 45
3705: PPUSH
3706: CALL_OW 302
3710: NOT
3711: PUSH
3712: LD_EXP 45
3716: PPUSH
3717: CALL_OW 301
3721: OR
3722: IFFALSE 3726
// exit ;
3724: GO 3934
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3726: LD_EXP 45
3730: PPUSH
3731: LD_INT 107
3733: PPUSH
3734: LD_INT 59
3736: PPUSH
3737: CALL_OW 307
3741: PUSH
3742: LD_EXP 45
3746: PPUSH
3747: LD_INT 5
3749: PPUSH
3750: CALL_OW 296
3754: PUSH
3755: LD_INT 6
3757: LESS
3758: OR
3759: IFFALSE 3679
// SetTag ( omarCargo , 1 ) ;
3761: LD_EXP 45
3765: PPUSH
3766: LD_INT 1
3768: PPUSH
3769: CALL_OW 109
// wait ( 0 0$03 ) ;
3773: LD_INT 105
3775: PPUSH
3776: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3780: LD_EXP 45
3784: PPUSH
3785: LD_INT 5
3787: PPUSH
3788: LD_INT 1
3790: PPUSH
3791: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3795: LD_EXP 45
3799: PPUSH
3800: LD_INT 103
3802: PPUSH
3803: LD_INT 9
3805: PPUSH
3806: CALL_OW 171
// wait ( 0 0$1 ) ;
3810: LD_INT 35
3812: PPUSH
3813: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3817: LD_EXP 45
3821: PPUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_INT 100
3827: PPUSH
3828: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3832: LD_INT 35
3834: PPUSH
3835: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3839: LD_EXP 45
3843: PPUSH
3844: LD_INT 103
3846: PPUSH
3847: LD_INT 9
3849: PPUSH
3850: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3854: LD_EXP 45
3858: PPUSH
3859: CALL_OW 302
3863: NOT
3864: PUSH
3865: LD_EXP 45
3869: PPUSH
3870: CALL_OW 301
3874: OR
3875: IFFALSE 3879
// exit ;
3877: GO 3934
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3879: LD_EXP 45
3883: PPUSH
3884: LD_INT 103
3886: PPUSH
3887: LD_INT 9
3889: PPUSH
3890: CALL_OW 307
3894: PUSH
3895: LD_EXP 45
3899: PPUSH
3900: LD_INT 3
3902: PPUSH
3903: CALL_OW 308
3907: OR
3908: PUSH
3909: LD_EXP 45
3913: PPUSH
3914: CALL_OW 110
3918: PUSH
3919: LD_INT 0
3921: GREATER
3922: AND
3923: IFFALSE 3832
// RemoveUnit ( omarCargo ) ;
3925: LD_EXP 45
3929: PPUSH
3930: CALL_OW 64
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PrepareCargo ; var un , veh ; begin
3939: LD_INT 0
3941: PPUSH
3942: PPUSH
3943: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3944: LD_ADDR_VAR 0 3
3948: PUSH
3949: LD_INT 5
3951: PPUSH
3952: LD_INT 2
3954: PPUSH
3955: LD_INT 14
3957: PPUSH
3958: LD_INT 1
3960: PPUSH
3961: LD_INT 1
3963: PPUSH
3964: LD_INT 32
3966: PPUSH
3967: LD_INT 80
3969: PPUSH
3970: CALL 341 0 7
3974: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3975: LD_VAR 0 3
3979: PPUSH
3980: LD_INT 4
3982: PPUSH
3983: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_INT 101
3994: PPUSH
3995: LD_INT 8
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4005: LD_INT 0
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 4
4013: PPUSH
4014: CALL_OW 380
// un := CreateHuman ;
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: CALL_OW 44
4027: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4028: LD_VAR 0 2
4032: PPUSH
4033: LD_VAR 0 3
4037: PPUSH
4038: CALL_OW 52
// result := veh ;
4042: LD_ADDR_VAR 0 1
4046: PUSH
4047: LD_VAR 0 3
4051: ST_TO_ADDR
// end ; end_of_file
4052: LD_VAR 0 1
4056: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4057: LD_INT 0
4059: PPUSH
4060: PPUSH
4061: PPUSH
// usForces := [ ] ;
4062: LD_ADDR_EXP 46
4066: PUSH
4067: EMPTY
4068: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4069: LD_ADDR_EXP 48
4073: PUSH
4074: LD_INT 6
4076: PUSH
4077: LD_INT 32
4079: PUSH
4080: LD_INT 27
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 4
4094: PUSH
4095: LD_INT 43
4097: PUSH
4098: LD_INT 24
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_INT 27
4112: PUSH
4113: LD_INT 29
4115: PUSH
4116: LD_INT 21
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4133: LD_INT 11
4135: PPUSH
4136: CALL_OW 274
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_INT 150
4146: PUSH
4147: LD_INT 120
4149: PUSH
4150: LD_INT 100
4152: PUSH
4153: LD_INT 80
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: PUSH
4162: LD_OWVAR 67
4166: ARRAY
4167: PPUSH
4168: CALL_OW 277
// if Difficulty = 1 then
4172: LD_OWVAR 67
4176: PUSH
4177: LD_INT 1
4179: EQUAL
4180: IFFALSE 4189
// RemoveUnit ( hillBun ) ;
4182: LD_INT 14
4184: PPUSH
4185: CALL_OW 64
// uc_side := 1 ;
4189: LD_ADDR_OWVAR 20
4193: PUSH
4194: LD_INT 1
4196: ST_TO_ADDR
// uc_nation := 1 ;
4197: LD_ADDR_OWVAR 21
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// hc_gallery :=  ;
4205: LD_ADDR_OWVAR 33
4209: PUSH
4210: LD_STRING 
4212: ST_TO_ADDR
// hc_name :=  ;
4213: LD_ADDR_OWVAR 26
4217: PUSH
4218: LD_STRING 
4220: ST_TO_ADDR
// hc_importance := 0 ;
4221: LD_ADDR_OWVAR 32
4225: PUSH
4226: LD_INT 0
4228: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4229: LD_INT 1
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 380
// usCommander := CreateHuman ;
4242: LD_ADDR_EXP 47
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4252: LD_EXP 47
4256: PPUSH
4257: LD_INT 11
4259: PPUSH
4260: CALL_OW 52
// if Difficulty > 1 then
4264: LD_OWVAR 67
4268: PUSH
4269: LD_INT 1
4271: GREATER
4272: IFFALSE 4354
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4274: LD_INT 0
4276: PPUSH
4277: LD_INT 1
4279: PPUSH
4280: LD_INT 1
4282: PUSH
4283: LD_INT 2
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: PUSH
4294: LD_OWVAR 67
4298: ARRAY
4299: PPUSH
4300: CALL_OW 380
// un := CreateHuman ;
4304: LD_ADDR_VAR 0 3
4308: PUSH
4309: CALL_OW 44
4313: ST_TO_ADDR
// usForces := usForces union un ;
4314: LD_ADDR_EXP 46
4318: PUSH
4319: LD_EXP 46
4323: PUSH
4324: LD_VAR 0 3
4328: UNION
4329: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4330: LD_VAR 0 3
4334: PPUSH
4335: LD_INT 1
4337: PPUSH
4338: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_INT 14
4349: PPUSH
4350: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4354: LD_ADDR_VAR 0 2
4358: PUSH
4359: DOUBLE
4360: LD_INT 1
4362: DEC
4363: ST_TO_ADDR
4364: LD_INT 2
4366: PUSH
4367: LD_INT 3
4369: PUSH
4370: LD_INT 4
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: LD_OWVAR 67
4386: ARRAY
4387: PUSH
4388: FOR_TO
4389: IFFALSE 4535
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4391: LD_INT 0
4393: PPUSH
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 1
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 3
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: LD_OWVAR 67
4419: ARRAY
4420: PPUSH
4421: CALL_OW 380
// un := CreateHuman ;
4425: LD_ADDR_VAR 0 3
4429: PUSH
4430: CALL_OW 44
4434: ST_TO_ADDR
// usForces := usForces union un ;
4435: LD_ADDR_EXP 46
4439: PUSH
4440: LD_EXP 46
4444: PUSH
4445: LD_VAR 0 3
4449: UNION
4450: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4451: LD_VAR 0 3
4455: PPUSH
4456: LD_INT 39
4458: PPUSH
4459: LD_INT 24
4461: PPUSH
4462: LD_INT 4
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: CALL_OW 50
// if i < 3 then
4472: LD_VAR 0 2
4476: PUSH
4477: LD_INT 3
4479: LESS
4480: IFFALSE 4533
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4482: LD_VAR 0 3
4486: PPUSH
4487: LD_INT 22
4489: PUSH
4490: LD_INT 1
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 58
4499: PUSH
4500: EMPTY
4501: LIST
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 31
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: PUSH
4523: LD_VAR 0 2
4527: ARRAY
4528: PPUSH
4529: CALL_OW 120
// end ;
4533: GO 4388
4535: POP
4536: POP
// for i := 1 to 2 do
4537: LD_ADDR_VAR 0 2
4541: PUSH
4542: DOUBLE
4543: LD_INT 1
4545: DEC
4546: ST_TO_ADDR
4547: LD_INT 2
4549: PUSH
4550: FOR_TO
4551: IFFALSE 4615
// begin PrepareHuman ( false , 2 , 2 ) ;
4553: LD_INT 0
4555: PPUSH
4556: LD_INT 2
4558: PPUSH
4559: LD_INT 2
4561: PPUSH
4562: CALL_OW 380
// un := CreateHuman ;
4566: LD_ADDR_VAR 0 3
4570: PUSH
4571: CALL_OW 44
4575: ST_TO_ADDR
// usForces := usForces union un ;
4576: LD_ADDR_EXP 46
4580: PUSH
4581: LD_EXP 46
4585: PUSH
4586: LD_VAR 0 3
4590: UNION
4591: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4592: LD_VAR 0 3
4596: PPUSH
4597: LD_INT 39
4599: PPUSH
4600: LD_INT 24
4602: PPUSH
4603: LD_INT 4
4605: PPUSH
4606: LD_INT 0
4608: PPUSH
4609: CALL_OW 50
// end ;
4613: GO 4550
4615: POP
4616: POP
// PrepareHuman ( false , 4 , 1 ) ;
4617: LD_INT 0
4619: PPUSH
4620: LD_INT 4
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: CALL_OW 380
// un := CreateHuman ;
4630: LD_ADDR_VAR 0 3
4634: PUSH
4635: CALL_OW 44
4639: ST_TO_ADDR
// usForces := usForces union un ;
4640: LD_ADDR_EXP 46
4644: PUSH
4645: LD_EXP 46
4649: PUSH
4650: LD_VAR 0 3
4654: UNION
4655: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4656: LD_VAR 0 3
4660: PPUSH
4661: LD_INT 39
4663: PPUSH
4664: LD_INT 24
4666: PPUSH
4667: LD_INT 4
4669: PPUSH
4670: LD_INT 0
4672: PPUSH
4673: CALL_OW 50
// end ;
4677: LD_VAR 0 1
4681: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4682: LD_EXP 46
4686: PUSH
4687: LD_EXP 7
4691: NOT
4692: AND
4693: PUSH
4694: LD_EXP 15
4698: NOT
4699: AND
4700: IFFALSE 5131
4702: GO 4704
4704: DISABLE
4705: LD_INT 0
4707: PPUSH
4708: PPUSH
4709: PPUSH
4710: PPUSH
4711: PPUSH
// begin enable ;
4712: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4713: LD_ADDR_VAR 0 3
4717: PUSH
4718: LD_EXP 46
4722: PPUSH
4723: LD_INT 25
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 72
4737: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4738: LD_ADDR_VAR 0 4
4742: PUSH
4743: LD_EXP 46
4747: PPUSH
4748: LD_INT 25
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 72
4762: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4763: LD_ADDR_VAR 0 5
4767: PUSH
4768: LD_EXP 46
4772: PPUSH
4773: LD_INT 25
4775: PUSH
4776: LD_INT 4
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PPUSH
4783: CALL_OW 72
4787: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4788: LD_INT 7
4790: PPUSH
4791: LD_INT 22
4793: PUSH
4794: LD_INT 2
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 70
4805: PUSH
4806: LD_INT 1
4808: EQUAL
4809: IFFALSE 4885
// for i in sol do
4811: LD_ADDR_VAR 0 1
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: FOR_IN
4822: IFFALSE 4883
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4824: LD_VAR 0 1
4828: PPUSH
4829: CALL_OW 310
4833: NOT
4834: PUSH
4835: LD_VAR 0 1
4839: PPUSH
4840: CALL_OW 310
4844: PPUSH
4845: CALL_OW 266
4849: PUSH
4850: LD_INT 4
4852: EQUAL
4853: NOT
4854: OR
4855: IFFALSE 4881
// begin ComExitBuilding ( i ) ;
4857: LD_VAR 0 1
4861: PPUSH
4862: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4866: LD_VAR 0 1
4870: PPUSH
4871: LD_INT 37
4873: PPUSH
4874: LD_INT 23
4876: PPUSH
4877: CALL_OW 174
// end ;
4881: GO 4821
4883: POP
4884: POP
// if eng then
4885: LD_VAR 0 3
4889: IFFALSE 5131
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: LD_INT 22
4898: PUSH
4899: LD_INT 1
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 95
4908: PUSH
4909: LD_INT 7
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 21
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 24
4931: PUSH
4932: LD_INT 1000
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: PPUSH
4949: CALL_OW 69
4953: ST_TO_ADDR
// if b then
4954: LD_VAR 0 2
4958: IFFALSE 4989
// begin ComExitBuilding ( eng ) ;
4960: LD_VAR 0 3
4964: PPUSH
4965: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4969: LD_VAR 0 3
4973: PPUSH
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 190
// end else
4987: GO 5131
// begin for i in eng do
4989: LD_ADDR_VAR 0 1
4993: PUSH
4994: LD_VAR 0 3
4998: PUSH
4999: FOR_IN
5000: IFFALSE 5129
// if not HasTask ( i ) then
5002: LD_VAR 0 1
5006: PPUSH
5007: CALL_OW 314
5011: NOT
5012: IFFALSE 5127
// begin if americanBuildList then
5014: LD_EXP 48
5018: IFFALSE 5103
// begin if IsInUnit ( i ) then
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 310
5029: IFFALSE 5040
// ComExitBuilding ( i ) ;
5031: LD_VAR 0 1
5035: PPUSH
5036: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_EXP 48
5049: PUSH
5050: LD_INT 1
5052: ARRAY
5053: PUSH
5054: LD_INT 1
5056: ARRAY
5057: PPUSH
5058: LD_EXP 48
5062: PUSH
5063: LD_INT 1
5065: ARRAY
5066: PUSH
5067: LD_INT 2
5069: ARRAY
5070: PPUSH
5071: LD_EXP 48
5075: PUSH
5076: LD_INT 1
5078: ARRAY
5079: PUSH
5080: LD_INT 3
5082: ARRAY
5083: PPUSH
5084: LD_EXP 48
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: PUSH
5093: LD_INT 4
5095: ARRAY
5096: PPUSH
5097: CALL_OW 205
// end else
5101: GO 5127
// if not IsInUnit ( i ) then
5103: LD_VAR 0 1
5107: PPUSH
5108: CALL_OW 310
5112: NOT
5113: IFFALSE 5127
// ComEnterUnit ( i , usDepot ) ;
5115: LD_VAR 0 1
5119: PPUSH
5120: LD_INT 11
5122: PPUSH
5123: CALL_OW 120
// end ;
5127: GO 4999
5129: POP
5130: POP
// end ; end ; end ;
5131: PPOPN 5
5133: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5134: LD_INT 0
5136: PPUSH
5137: PPUSH
5138: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_INT 35
5146: PUSH
5147: LD_INT 45
5149: PUSH
5150: LD_INT 48
5152: PUSH
5153: LD_INT 82
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: ST_TO_ADDR
// for i in tech do
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 3
5171: PUSH
5172: FOR_IN
5173: IFFALSE 5191
// AddComResearch ( lab , i ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 4
5184: PPUSH
5185: CALL_OW 184
5189: GO 5172
5191: POP
5192: POP
// end ;
5193: LD_VAR 0 2
5197: RET
// every 4 4$00 + 4 4$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5198: LD_EXP 13
5202: PUSH
5203: LD_EXP 24
5207: PUSH
5208: LD_EXP 28
5212: LESSEQUAL
5213: AND
5214: IFFALSE 5239
5216: GO 5218
5218: DISABLE
// begin enable ;
5219: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5220: LD_INT 35
5222: PPUSH
5223: LD_INT 2065
5225: PPUSH
5226: CALL_OW 12
5230: PPUSH
5231: CALL_OW 67
// SendConvoy ;
5235: CALL 5345 0 0
// end ;
5239: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5240: LD_EXP 7
5244: PUSH
5245: LD_EXP 19
5249: AND
5250: IFFALSE 5344
5252: GO 5254
5254: DISABLE
// begin if americanHasEscaped then
5255: LD_EXP 9
5259: IFFALSE 5270
// wait ( 3 3$20 ) else
5261: LD_INT 7000
5263: PPUSH
5264: CALL_OW 67
5268: GO 5277
// wait ( 6 6$40 ) ;
5270: LD_INT 14000
5272: PPUSH
5273: CALL_OW 67
// SendAttack ;
5277: CALL 6118 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 5 5$20 , 4 4$50 ] [ Difficulty ] ) ;
5281: LD_INT 14000
5283: PUSH
5284: LD_INT 11900
5286: PUSH
5287: LD_INT 11200
5289: PUSH
5290: LD_INT 10150
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: LD_OWVAR 67
5303: ARRAY
5304: PPUSH
5305: CALL_OW 67
// SendAttack ;
5309: CALL 6118 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5313: LD_EXP 20
5317: PUSH
5318: LD_INT 5
5320: PUSH
5321: LD_INT 6
5323: PUSH
5324: LD_INT 7
5326: PUSH
5327: LD_INT 8
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: PUSH
5336: LD_OWVAR 67
5340: ARRAY
5341: LESS
5342: IFFALSE 5281
// end ;
5344: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5345: LD_INT 0
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
5353: PPUSH
5354: PPUSH
// road := rand ( 1 , 2 ) ;
5355: LD_ADDR_VAR 0 4
5359: PUSH
5360: LD_INT 1
5362: PPUSH
5363: LD_INT 2
5365: PPUSH
5366: CALL_OW 12
5370: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5371: LD_ADDR_VAR 0 8
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: LD_INT 8
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_VAR 0 4
5390: ARRAY
5391: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5392: LD_ADDR_VAR 0 5
5396: PUSH
5397: LD_INT 35
5399: PUSH
5400: LD_INT 66
5402: PUSH
5403: LD_INT 1
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: LD_INT 101
5413: PUSH
5414: LD_INT 8
5416: PUSH
5417: LD_INT 4
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5429: LD_ADDR_VAR 0 6
5433: PUSH
5434: LD_INT 34
5436: PUSH
5437: LD_INT 67
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 38
5446: PUSH
5447: LD_INT 62
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: LD_INT 43
5456: PUSH
5457: LD_INT 54
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 57
5466: PUSH
5467: LD_INT 57
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 77
5476: PUSH
5477: LD_INT 71
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 86
5486: PUSH
5487: LD_INT 60
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 89
5496: PUSH
5497: LD_INT 35
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 93
5506: PUSH
5507: LD_INT 17
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: LD_INT 97
5516: PUSH
5517: LD_INT 10
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 103
5526: PUSH
5527: LD_INT 9
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: ST_TO_ADDR
// if road = 2 then
5546: LD_VAR 0 4
5550: PUSH
5551: LD_INT 2
5553: EQUAL
5554: IFFALSE 5571
// points := ReverseArray ( points ) ;
5556: LD_ADDR_VAR 0 6
5560: PUSH
5561: LD_VAR 0 6
5565: PPUSH
5566: CALL 72831 0 1
5570: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5571: LD_INT 4
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_INT 12
5588: PPUSH
5589: LD_INT 80
5591: PPUSH
5592: CALL 341 0 7
// veh := CreateVehicle ;
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: CALL_OW 45
5605: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5606: LD_VAR 0 3
5610: PPUSH
5611: LD_VAR 0 5
5615: PUSH
5616: LD_VAR 0 4
5620: ARRAY
5621: PUSH
5622: LD_INT 3
5624: ARRAY
5625: PPUSH
5626: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5630: LD_VAR 0 3
5634: PPUSH
5635: LD_VAR 0 5
5639: PUSH
5640: LD_VAR 0 4
5644: ARRAY
5645: PUSH
5646: LD_INT 1
5648: ARRAY
5649: PPUSH
5650: LD_VAR 0 5
5654: PUSH
5655: LD_VAR 0 4
5659: ARRAY
5660: PUSH
5661: LD_INT 2
5663: ARRAY
5664: PPUSH
5665: LD_INT 0
5667: PPUSH
5668: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5672: LD_INT 0
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: LD_OWVAR 67
5682: PPUSH
5683: CALL_OW 380
// un := CreateHuman ;
5687: LD_ADDR_VAR 0 2
5691: PUSH
5692: CALL_OW 44
5696: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5697: LD_VAR 0 2
5701: PPUSH
5702: LD_VAR 0 3
5706: PPUSH
5707: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5711: LD_INT 70
5713: PUSH
5714: LD_INT 66
5716: PUSH
5717: LD_INT 62
5719: PUSH
5720: LD_INT 58
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: PUSH
5729: LD_OWVAR 67
5733: ARRAY
5734: PPUSH
5735: CALL_OW 13
5739: PUSH
5740: LD_OWVAR 1
5744: PUSH
5745: LD_INT 30
5747: MOD
5748: PLUS
5749: PUSH
5750: LD_EXP 24
5754: PUSH
5755: LD_INT 4
5757: LESS
5758: OR
5759: IFFALSE 5776
// SetCargo ( veh , mat_cans , 100 ) ;
5761: LD_VAR 0 3
5765: PPUSH
5766: LD_INT 1
5768: PPUSH
5769: LD_INT 100
5771: PPUSH
5772: CALL_OW 290
// for i := 2 to points do
5776: LD_ADDR_VAR 0 7
5780: PUSH
5781: DOUBLE
5782: LD_INT 2
5784: DEC
5785: ST_TO_ADDR
5786: LD_VAR 0 6
5790: PUSH
5791: FOR_TO
5792: IFFALSE 5835
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5794: LD_VAR 0 3
5798: PPUSH
5799: LD_VAR 0 6
5803: PUSH
5804: LD_VAR 0 7
5808: ARRAY
5809: PUSH
5810: LD_INT 1
5812: ARRAY
5813: PPUSH
5814: LD_VAR 0 6
5818: PUSH
5819: LD_VAR 0 7
5823: ARRAY
5824: PUSH
5825: LD_INT 2
5827: ARRAY
5828: PPUSH
5829: CALL_OW 171
5833: GO 5791
5835: POP
5836: POP
// convoyCounter := convoyCounter + 1 ;
5837: LD_ADDR_EXP 24
5841: PUSH
5842: LD_EXP 24
5846: PUSH
5847: LD_INT 1
5849: PLUS
5850: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5851: LD_INT 35
5853: PPUSH
5854: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5858: LD_VAR 0 3
5862: PPUSH
5863: CALL_OW 255
5867: PUSH
5868: LD_INT 4
5870: NONEQUAL
5871: IFFALSE 5884
// begin ComStop ( veh ) ;
5873: LD_VAR 0 3
5877: PPUSH
5878: CALL_OW 141
// exit ;
5882: GO 6113
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5884: LD_VAR 0 3
5888: PPUSH
5889: CALL_OW 314
5893: NOT
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: CALL_OW 302
5904: AND
5905: IFFALSE 5946
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5907: LD_VAR 0 3
5911: PPUSH
5912: LD_VAR 0 6
5916: PUSH
5917: LD_VAR 0 6
5921: ARRAY
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: LD_VAR 0 6
5931: PUSH
5932: LD_VAR 0 6
5936: ARRAY
5937: PUSH
5938: LD_INT 2
5940: ARRAY
5941: PPUSH
5942: CALL_OW 111
// if not IsInUnit ( un ) then
5946: LD_VAR 0 2
5950: PPUSH
5951: CALL_OW 310
5955: NOT
5956: IFFALSE 5997
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5958: LD_VAR 0 2
5962: PPUSH
5963: LD_VAR 0 6
5967: PUSH
5968: LD_VAR 0 6
5972: ARRAY
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: PPUSH
5978: LD_VAR 0 6
5982: PUSH
5983: LD_VAR 0 6
5987: ARRAY
5988: PUSH
5989: LD_INT 2
5991: ARRAY
5992: PPUSH
5993: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_VAR 0 8
6006: PPUSH
6007: CALL_OW 308
6011: PUSH
6012: LD_VAR 0 2
6016: PPUSH
6017: LD_VAR 0 8
6021: PPUSH
6022: CALL_OW 308
6026: OR
6027: IFFALSE 5851
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6029: LD_VAR 0 2
6033: PPUSH
6034: CALL_OW 302
6038: PUSH
6039: LD_VAR 0 3
6043: PPUSH
6044: CALL_OW 302
6048: NOT
6049: AND
6050: PUSH
6051: LD_VAR 0 2
6055: PPUSH
6056: LD_VAR 0 8
6060: PPUSH
6061: CALL_OW 308
6065: AND
6066: IFFALSE 6077
// RemoveUnit ( un ) ;
6068: LD_VAR 0 2
6072: PPUSH
6073: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6077: LD_VAR 0 3
6081: PPUSH
6082: LD_VAR 0 8
6086: PPUSH
6087: CALL_OW 308
6091: PUSH
6092: LD_VAR 0 3
6096: PPUSH
6097: CALL_OW 302
6101: AND
6102: IFFALSE 6113
// RemoveUnit ( veh ) ;
6104: LD_VAR 0 3
6108: PPUSH
6109: CALL_OW 64
// end ;
6113: LD_VAR 0 1
6117: RET
// export function SendAttack ; var un , veh , i ; begin
6118: LD_INT 0
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
// if blockAttack then
6124: LD_EXP 29
6128: IFFALSE 6151
// begin repeat wait ( 0 0$1 ) ;
6130: LD_INT 35
6132: PPUSH
6133: CALL_OW 67
// until not blockAttack ;
6137: LD_EXP 29
6141: NOT
6142: IFFALSE 6130
// wait ( 0 0$5 ) ;
6144: LD_INT 175
6146: PPUSH
6147: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 1
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: PUSH
6180: LD_INT 10
6182: GREATER
6183: IFFALSE 6226
// begin repeat wait ( 0 0$1 ) ;
6185: LD_INT 35
6187: PPUSH
6188: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6192: LD_INT 22
6194: PUSH
6195: LD_INT 1
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: LD_INT 21
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: PUSH
6221: LD_INT 10
6223: LESSEQUAL
6224: IFFALSE 6185
// end ; IncomingAttack ;
6226: CALL 15540 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6230: LD_INT 2100
6232: PPUSH
6233: LD_INT 3500
6235: PPUSH
6236: CALL_OW 12
6240: PPUSH
6241: CALL_OW 67
// if blockAttack then
6245: LD_EXP 29
6249: IFFALSE 6272
// begin repeat wait ( 0 0$1 ) ;
6251: LD_INT 35
6253: PPUSH
6254: CALL_OW 67
// until not blockAttack ;
6258: LD_EXP 29
6262: NOT
6263: IFFALSE 6251
// wait ( 0 0$5 ) ;
6265: LD_INT 175
6267: PPUSH
6268: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6272: LD_ADDR_VAR 0 4
6276: PUSH
6277: DOUBLE
6278: LD_INT 1
6280: DEC
6281: ST_TO_ADDR
6282: LD_INT 3
6284: PUSH
6285: LD_INT 4
6287: PUSH
6288: LD_INT 4
6290: PUSH
6291: LD_INT 5
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: LD_OWVAR 67
6304: ARRAY
6305: PUSH
6306: LD_EXP 20
6310: PUSH
6311: LD_INT 3
6313: DIV
6314: PLUS
6315: PUSH
6316: FOR_TO
6317: IFFALSE 6433
// begin uc_side := 1 ;
6319: LD_ADDR_OWVAR 20
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// uc_nation := 1 ;
6327: LD_ADDR_OWVAR 21
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6335: LD_INT 0
6337: PPUSH
6338: LD_INT 1
6340: PPUSH
6341: LD_INT 2
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: LD_INT 4
6349: PUSH
6350: LD_INT 4
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_OWVAR 67
6363: ARRAY
6364: PPUSH
6365: CALL_OW 380
// un := CreateHuman ;
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: CALL_OW 44
6378: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6379: LD_VAR 0 2
6383: PPUSH
6384: LD_INT 37
6386: PPUSH
6387: LD_INT 70
6389: PPUSH
6390: LD_INT 3
6392: PPUSH
6393: LD_INT 0
6395: PPUSH
6396: CALL_OW 50
// usAttackers := usAttackers union un ;
6400: LD_ADDR_EXP 49
6404: PUSH
6405: LD_EXP 49
6409: PUSH
6410: LD_VAR 0 2
6414: UNION
6415: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6416: LD_VAR 0 2
6420: PPUSH
6421: LD_INT 40
6423: PPUSH
6424: LD_INT 65
6426: PPUSH
6427: CALL_OW 111
// end ;
6431: GO 6316
6433: POP
6434: POP
// uc_side := 1 ;
6435: LD_ADDR_OWVAR 20
6439: PUSH
6440: LD_INT 1
6442: ST_TO_ADDR
// uc_nation := 1 ;
6443: LD_ADDR_OWVAR 21
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6451: LD_INT 0
6453: PPUSH
6454: LD_INT 4
6456: PPUSH
6457: LD_INT 2
6459: PPUSH
6460: CALL_OW 380
// un := CreateHuman ;
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: CALL_OW 44
6473: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6474: LD_VAR 0 2
6478: PPUSH
6479: LD_INT 37
6481: PPUSH
6482: LD_INT 70
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: LD_INT 0
6490: PPUSH
6491: CALL_OW 50
// usAttackers := usAttackers union un ;
6495: LD_ADDR_EXP 49
6499: PUSH
6500: LD_EXP 49
6504: PUSH
6505: LD_VAR 0 2
6509: UNION
6510: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6511: LD_VAR 0 2
6515: PPUSH
6516: LD_INT 40
6518: PPUSH
6519: LD_INT 65
6521: PPUSH
6522: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6526: LD_ADDR_VAR 0 4
6530: PUSH
6531: DOUBLE
6532: LD_INT 1
6534: DEC
6535: ST_TO_ADDR
6536: LD_OWVAR 67
6540: PUSH
6541: LD_EXP 20
6545: PUSH
6546: LD_INT 4
6548: DIV
6549: PLUS
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6748
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_INT 1
6561: PPUSH
6562: LD_INT 1
6564: PPUSH
6565: LD_INT 2
6567: PUSH
6568: LD_INT 2
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 1
6581: PPUSH
6582: LD_INT 3
6584: PPUSH
6585: CALL_OW 12
6589: ARRAY
6590: PPUSH
6591: LD_INT 1
6593: PPUSH
6594: LD_INT 1
6596: PPUSH
6597: LD_INT 4
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_INT 2
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 3
6616: PPUSH
6617: CALL_OW 12
6621: ARRAY
6622: PPUSH
6623: LD_INT 90
6625: PPUSH
6626: CALL 341 0 7
6630: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6631: LD_VAR 0 3
6635: PPUSH
6636: LD_INT 35
6638: PPUSH
6639: LD_INT 65
6641: PPUSH
6642: LD_INT 0
6644: PPUSH
6645: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6649: LD_INT 0
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_OWVAR 67
6659: PUSH
6660: LD_INT 1
6662: PLUS
6663: PPUSH
6664: CALL_OW 380
// un := CreateHuman ;
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: CALL_OW 44
6677: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6678: LD_VAR 0 2
6682: PPUSH
6683: LD_VAR 0 3
6687: PPUSH
6688: CALL_OW 52
// usAttackers := usAttackers union un ;
6692: LD_ADDR_EXP 49
6696: PUSH
6697: LD_EXP 49
6701: PUSH
6702: LD_VAR 0 2
6706: UNION
6707: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6708: LD_VAR 0 3
6712: PPUSH
6713: LD_INT 39
6715: PPUSH
6716: LD_INT 60
6718: PPUSH
6719: CALL_OW 111
// wait ( 0 0$3 ) ;
6723: LD_INT 105
6725: PPUSH
6726: CALL_OW 67
// usAttackers := usAttackers union veh ;
6730: LD_ADDR_EXP 49
6734: PUSH
6735: LD_EXP 49
6739: PUSH
6740: LD_VAR 0 3
6744: UNION
6745: ST_TO_ADDR
// end ;
6746: GO 6551
6748: POP
6749: POP
// attackWave := attackWave + 1 ;
6750: LD_ADDR_EXP 20
6754: PUSH
6755: LD_EXP 20
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6764: LD_EXP 25
6768: PPUSH
6769: CALL_OW 427
// end ;
6773: LD_VAR 0 1
6777: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6778: LD_INT 0
6780: PPUSH
6781: PPUSH
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
6786: PPUSH
6787: PPUSH
6788: PPUSH
6789: PPUSH
6790: PPUSH
// if retreatAllowed then
6791: LD_EXP 12
6795: IFFALSE 6807
// strategy := 2 else
6797: LD_ADDR_VAR 0 5
6801: PUSH
6802: LD_INT 2
6804: ST_TO_ADDR
6805: GO 6823
// strategy := rand ( 0 , 2 ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 0
6814: PPUSH
6815: LD_INT 2
6817: PPUSH
6818: CALL_OW 12
6822: ST_TO_ADDR
// attackFormula := [ ] ;
6823: LD_ADDR_VAR 0 6
6827: PUSH
6828: EMPTY
6829: ST_TO_ADDR
// case strategy of 0 :
6830: LD_VAR 0 5
6834: PUSH
6835: LD_INT 0
6837: DOUBLE
6838: EQUAL
6839: IFTRUE 6843
6841: GO 7173
6843: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6844: LD_INT 11
6846: PPUSH
6847: LD_INT 22
6849: PUSH
6850: LD_INT 2
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 30
6859: PUSH
6860: LD_INT 4
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 70
6875: NOT
6876: IFFALSE 6948
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6878: LD_ADDR_VAR 0 6
6882: PUSH
6883: LD_INT 41
6885: PUSH
6886: LD_INT 34
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: PUSH
6896: LD_INT 53
6898: PUSH
6899: LD_INT 62
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 37
6908: PUSH
6909: LD_INT 63
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 44
6918: PUSH
6919: LD_INT 45
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 37
6928: PUSH
6929: LD_INT 28
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
6946: GO 7171
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6948: LD_INT 12
6950: PPUSH
6951: LD_INT 22
6953: PUSH
6954: LD_INT 2
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 2
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 4
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 30
6976: PUSH
6977: LD_INT 31
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 32
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 70
7008: NOT
7009: IFFALSE 7092
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7011: LD_ADDR_VAR 0 6
7015: PUSH
7016: LD_INT 27
7018: PUSH
7019: LD_INT 42
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 27
7028: PUSH
7029: LD_INT 32
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 53
7042: PUSH
7043: LD_INT 62
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 37
7052: PUSH
7053: LD_INT 63
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 44
7062: PUSH
7063: LD_INT 45
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 37
7072: PUSH
7073: LD_INT 28
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: ST_TO_ADDR
7090: GO 7171
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7092: LD_ADDR_VAR 0 6
7096: PUSH
7097: LD_INT 71
7099: PUSH
7100: LD_INT 67
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 54
7109: PUSH
7110: LD_INT 35
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 63
7123: PUSH
7124: LD_INT 40
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 37
7133: PUSH
7134: LD_INT 63
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 44
7143: PUSH
7144: LD_INT 45
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 37
7153: PUSH
7154: LD_INT 28
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: ST_TO_ADDR
// end ; 1 :
7171: GO 7376
7173: LD_INT 1
7175: DOUBLE
7176: EQUAL
7177: IFTRUE 7181
7179: GO 7285
7181: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7182: LD_ADDR_VAR 0 6
7186: PUSH
7187: LD_INT 71
7189: PUSH
7190: LD_INT 67
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 82
7199: PUSH
7200: LD_INT 23
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 53
7209: PUSH
7210: LD_INT 7
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: LD_INT 43
7219: PUSH
7220: LD_INT 10
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 53
7235: PUSH
7236: LD_INT 62
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 37
7245: PUSH
7246: LD_INT 63
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 44
7255: PUSH
7256: LD_INT 45
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 37
7265: PUSH
7266: LD_INT 28
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: ST_TO_ADDR
7283: GO 7376
7285: LD_INT 2
7287: DOUBLE
7288: EQUAL
7289: IFTRUE 7293
7291: GO 7375
7293: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7294: LD_ADDR_VAR 0 6
7298: PUSH
7299: LD_INT 90
7301: PUSH
7302: LD_INT 59
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 108
7311: PUSH
7312: LD_INT 64
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 82
7325: PUSH
7326: LD_INT 75
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 73
7335: PUSH
7336: LD_INT 67
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 101
7345: PUSH
7346: LD_INT 65
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 108
7355: PUSH
7356: LD_INT 62
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: ST_TO_ADDR
7373: GO 7376
7375: POP
// if not attackFormula then
7376: LD_VAR 0 6
7380: NOT
7381: IFFALSE 7385
// exit ;
7383: GO 9063
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7385: LD_ADDR_VAR 0 7
7389: PUSH
7390: LD_EXP 49
7394: PPUSH
7395: LD_INT 25
7397: PUSH
7398: LD_INT 1
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PPUSH
7405: CALL_OW 72
7409: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7410: LD_ADDR_VAR 0 8
7414: PUSH
7415: LD_EXP 49
7419: PPUSH
7420: LD_INT 25
7422: PUSH
7423: LD_INT 4
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PPUSH
7430: CALL_OW 72
7434: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7435: LD_ADDR_VAR 0 9
7439: PUSH
7440: LD_EXP 49
7444: PPUSH
7445: LD_INT 25
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PPUSH
7455: CALL_OW 72
7459: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7460: LD_ADDR_VAR 0 10
7464: PUSH
7465: LD_EXP 49
7469: PPUSH
7470: LD_INT 21
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: ST_TO_ADDR
// if sci then
7485: LD_VAR 0 8
7489: IFFALSE 7526
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7491: LD_VAR 0 8
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: LD_VAR 0 6
7513: PUSH
7514: LD_INT 2
7516: ARRAY
7517: PUSH
7518: LD_INT 2
7520: ARRAY
7521: PPUSH
7522: CALL_OW 111
// repeat wait ( 10 ) ;
7526: LD_INT 10
7528: PPUSH
7529: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7533: LD_ADDR_VAR 0 7
7537: PUSH
7538: LD_EXP 49
7542: PPUSH
7543: LD_INT 25
7545: PUSH
7546: LD_INT 1
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PPUSH
7553: CALL_OW 72
7557: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7558: LD_ADDR_VAR 0 8
7562: PUSH
7563: LD_EXP 49
7567: PPUSH
7568: LD_INT 25
7570: PUSH
7571: LD_INT 4
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PPUSH
7578: CALL_OW 72
7582: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7583: LD_ADDR_VAR 0 9
7587: PUSH
7588: LD_EXP 49
7592: PPUSH
7593: LD_INT 25
7595: PUSH
7596: LD_INT 3
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PPUSH
7603: CALL_OW 72
7607: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7608: LD_ADDR_VAR 0 10
7612: PUSH
7613: LD_EXP 49
7617: PPUSH
7618: LD_INT 21
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 72
7632: ST_TO_ADDR
// if sol then
7633: LD_VAR 0 7
7637: IFFALSE 8058
// begin for i in sol do
7639: LD_ADDR_VAR 0 2
7643: PUSH
7644: LD_VAR 0 7
7648: PUSH
7649: FOR_IN
7650: IFFALSE 8056
// begin tag := GetTag ( i ) ;
7652: LD_ADDR_VAR 0 4
7656: PUSH
7657: LD_VAR 0 2
7661: PPUSH
7662: CALL_OW 110
7666: ST_TO_ADDR
// if not tag then
7667: LD_VAR 0 4
7671: NOT
7672: IFFALSE 7781
// begin if GetLives ( i ) = 1000 then
7674: LD_VAR 0 2
7678: PPUSH
7679: CALL_OW 256
7683: PUSH
7684: LD_INT 1000
7686: EQUAL
7687: IFFALSE 7703
// SetTag ( i , 1 ) else
7689: LD_VAR 0 2
7693: PPUSH
7694: LD_INT 1
7696: PPUSH
7697: CALL_OW 109
7701: GO 7779
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7703: LD_VAR 0 2
7707: PPUSH
7708: LD_VAR 0 6
7712: PUSH
7713: LD_INT 2
7715: ARRAY
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PPUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 2
7728: ARRAY
7729: PUSH
7730: LD_INT 2
7732: ARRAY
7733: PPUSH
7734: CALL_OW 297
7738: PUSH
7739: LD_INT 10
7741: GREATER
7742: IFFALSE 7779
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7744: LD_VAR 0 2
7748: PPUSH
7749: LD_VAR 0 6
7753: PUSH
7754: LD_INT 2
7756: ARRAY
7757: PUSH
7758: LD_INT 1
7760: ARRAY
7761: PPUSH
7762: LD_VAR 0 6
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PUSH
7771: LD_INT 2
7773: ARRAY
7774: PPUSH
7775: CALL_OW 111
// end else
7779: GO 8054
// begin if GetLives ( i ) < 760 then
7781: LD_VAR 0 2
7785: PPUSH
7786: CALL_OW 256
7790: PUSH
7791: LD_INT 760
7793: LESS
7794: IFFALSE 7845
// begin SetTag ( i , 0 ) ;
7796: LD_VAR 0 2
7800: PPUSH
7801: LD_INT 0
7803: PPUSH
7804: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7808: LD_VAR 0 2
7812: PPUSH
7813: LD_VAR 0 6
7817: PUSH
7818: LD_INT 2
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_VAR 0 6
7830: PUSH
7831: LD_INT 2
7833: ARRAY
7834: PUSH
7835: LD_INT 2
7837: ARRAY
7838: PPUSH
7839: CALL_OW 111
// end else
7843: GO 8054
// if tag <= attackFormula [ 1 ] then
7845: LD_VAR 0 4
7849: PUSH
7850: LD_VAR 0 6
7854: PUSH
7855: LD_INT 1
7857: ARRAY
7858: LESSEQUAL
7859: IFFALSE 8020
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7861: LD_VAR 0 2
7865: PPUSH
7866: LD_VAR 0 6
7870: PUSH
7871: LD_INT 1
7873: ARRAY
7874: PUSH
7875: LD_VAR 0 4
7879: ARRAY
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PPUSH
7885: LD_VAR 0 6
7889: PUSH
7890: LD_INT 1
7892: ARRAY
7893: PUSH
7894: LD_VAR 0 4
7898: ARRAY
7899: PUSH
7900: LD_INT 2
7902: ARRAY
7903: PPUSH
7904: CALL_OW 297
7908: PUSH
7909: LD_INT 6
7911: GREATER
7912: IFFALSE 7963
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7914: LD_VAR 0 2
7918: PPUSH
7919: LD_VAR 0 6
7923: PUSH
7924: LD_INT 1
7926: ARRAY
7927: PUSH
7928: LD_VAR 0 4
7932: ARRAY
7933: PUSH
7934: LD_INT 1
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 6
7942: PUSH
7943: LD_INT 1
7945: ARRAY
7946: PUSH
7947: LD_VAR 0 4
7951: ARRAY
7952: PUSH
7953: LD_INT 2
7955: ARRAY
7956: PPUSH
7957: CALL_OW 114
7961: GO 8018
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7963: LD_INT 81
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 91
7975: PUSH
7976: LD_VAR 0 2
7980: PUSH
7981: LD_INT 10
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PPUSH
7993: CALL_OW 69
7997: NOT
7998: IFFALSE 8018
// SetTag ( i , tag + 1 ) ;
8000: LD_VAR 0 2
8004: PPUSH
8005: LD_VAR 0 4
8009: PUSH
8010: LD_INT 1
8012: PLUS
8013: PPUSH
8014: CALL_OW 109
// end else
8018: GO 8054
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8020: LD_VAR 0 2
8024: PPUSH
8025: LD_INT 81
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PPUSH
8035: CALL_OW 69
8039: PPUSH
8040: LD_VAR 0 2
8044: PPUSH
8045: CALL_OW 74
8049: PPUSH
8050: CALL_OW 115
// end ; end ;
8054: GO 7649
8056: POP
8057: POP
// end ; if sci then
8058: LD_VAR 0 8
8062: IFFALSE 8331
// begin if not sol and not mech then
8064: LD_VAR 0 7
8068: NOT
8069: PUSH
8070: LD_VAR 0 9
8074: NOT
8075: AND
8076: IFFALSE 8128
// begin for i in sci do
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_VAR 0 8
8087: PUSH
8088: FOR_IN
8089: IFFALSE 8124
// begin usForces := usForces union i ;
8091: LD_ADDR_EXP 46
8095: PUSH
8096: LD_EXP 46
8100: PUSH
8101: LD_VAR 0 2
8105: UNION
8106: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8107: LD_VAR 0 2
8111: PPUSH
8112: LD_INT 34
8114: PPUSH
8115: LD_INT 68
8117: PPUSH
8118: CALL_OW 111
// end ;
8122: GO 8088
8124: POP
8125: POP
// end else
8126: GO 8331
// for i in sci do
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 8
8137: PUSH
8138: FOR_IN
8139: IFFALSE 8329
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8141: LD_VAR 0 2
8145: PPUSH
8146: LD_VAR 0 6
8150: PUSH
8151: LD_INT 2
8153: ARRAY
8154: PUSH
8155: LD_INT 1
8157: ARRAY
8158: PPUSH
8159: LD_VAR 0 6
8163: PUSH
8164: LD_INT 2
8166: ARRAY
8167: PUSH
8168: LD_INT 2
8170: ARRAY
8171: PPUSH
8172: CALL_OW 297
8176: PUSH
8177: LD_INT 10
8179: GREATER
8180: IFFALSE 8219
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8182: LD_VAR 0 2
8186: PPUSH
8187: LD_VAR 0 6
8191: PUSH
8192: LD_INT 2
8194: ARRAY
8195: PUSH
8196: LD_INT 1
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 6
8204: PUSH
8205: LD_INT 2
8207: ARRAY
8208: PUSH
8209: LD_INT 2
8211: ARRAY
8212: PPUSH
8213: CALL_OW 111
8217: GO 8327
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8219: LD_VAR 0 7
8223: PPUSH
8224: LD_INT 3
8226: PUSH
8227: LD_INT 24
8229: PUSH
8230: LD_INT 1000
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 91
8243: PUSH
8244: LD_VAR 0 2
8248: PUSH
8249: LD_INT 10
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PPUSH
8261: CALL_OW 72
8265: IFFALSE 8327
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8267: LD_VAR 0 2
8271: PPUSH
8272: LD_VAR 0 7
8276: PPUSH
8277: LD_INT 3
8279: PUSH
8280: LD_INT 24
8282: PUSH
8283: LD_INT 1000
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 91
8296: PUSH
8297: LD_VAR 0 2
8301: PUSH
8302: LD_INT 10
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PPUSH
8314: CALL_OW 72
8318: PUSH
8319: LD_INT 1
8321: ARRAY
8322: PPUSH
8323: CALL_OW 128
8327: GO 8138
8329: POP
8330: POP
// end ; if mech then
8331: LD_VAR 0 9
8335: IFFALSE 9045
// begin for i in mech do
8337: LD_ADDR_VAR 0 2
8341: PUSH
8342: LD_VAR 0 9
8346: PUSH
8347: FOR_IN
8348: IFFALSE 9043
// begin tag := GetTag ( i ) ;
8350: LD_ADDR_VAR 0 4
8354: PUSH
8355: LD_VAR 0 2
8359: PPUSH
8360: CALL_OW 110
8364: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8365: LD_ADDR_VAR 0 11
8369: PUSH
8370: LD_VAR 0 2
8374: PPUSH
8375: CALL_OW 310
8379: ST_TO_ADDR
// if not tag then
8380: LD_VAR 0 4
8384: NOT
8385: IFFALSE 8756
// begin if veh then
8387: LD_VAR 0 11
8391: IFFALSE 8562
// begin if GetLives ( veh ) = 1000 then
8393: LD_VAR 0 11
8397: PPUSH
8398: CALL_OW 256
8402: PUSH
8403: LD_INT 1000
8405: EQUAL
8406: IFFALSE 8422
// SetTag ( i , 1 ) else
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_INT 1
8415: PPUSH
8416: CALL_OW 109
8420: GO 8560
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8422: LD_VAR 0 11
8426: PPUSH
8427: LD_VAR 0 6
8431: PUSH
8432: LD_INT 3
8434: ARRAY
8435: PUSH
8436: LD_INT 1
8438: ARRAY
8439: PPUSH
8440: LD_VAR 0 6
8444: PUSH
8445: LD_INT 3
8447: ARRAY
8448: PUSH
8449: LD_INT 2
8451: ARRAY
8452: PPUSH
8453: CALL_OW 297
8457: PUSH
8458: LD_INT 8
8460: GREATER
8461: IFFALSE 8500
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8463: LD_VAR 0 11
8467: PPUSH
8468: LD_VAR 0 6
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: PPUSH
8481: LD_VAR 0 6
8485: PUSH
8486: LD_INT 3
8488: ARRAY
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 111
8498: GO 8560
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8500: LD_INT 81
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 91
8512: PUSH
8513: LD_VAR 0 2
8517: PUSH
8518: LD_INT 12
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 69
8534: NOT
8535: IFFALSE 8560
// begin ComExitVehicle ( i ) ;
8537: LD_VAR 0 2
8541: PPUSH
8542: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: LD_VAR 0 11
8555: PPUSH
8556: CALL_OW 189
// end ; end else
8560: GO 8754
// if GetLives ( i ) < 400 then
8562: LD_VAR 0 2
8566: PPUSH
8567: CALL_OW 256
8571: PUSH
8572: LD_INT 400
8574: LESS
8575: IFFALSE 8626
// begin usAttackers := usAttackers diff i ;
8577: LD_ADDR_EXP 49
8581: PUSH
8582: LD_EXP 49
8586: PUSH
8587: LD_VAR 0 2
8591: DIFF
8592: ST_TO_ADDR
// usForces := usForces union i ;
8593: LD_ADDR_EXP 46
8597: PUSH
8598: LD_EXP 46
8602: PUSH
8603: LD_VAR 0 2
8607: UNION
8608: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8609: LD_VAR 0 2
8613: PPUSH
8614: LD_INT 34
8616: PPUSH
8617: LD_INT 68
8619: PPUSH
8620: CALL_OW 111
// end else
8624: GO 8754
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8626: LD_VAR 0 10
8630: PPUSH
8631: LD_INT 58
8633: PUSH
8634: EMPTY
8635: LIST
8636: PUSH
8637: LD_INT 24
8639: PUSH
8640: LD_INT 1000
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 72
8655: PUSH
8656: LD_VAR 0 2
8660: PPUSH
8661: CALL_OW 314
8665: NOT
8666: AND
8667: PUSH
8668: LD_INT 81
8670: PUSH
8671: LD_INT 1
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 91
8680: PUSH
8681: LD_VAR 0 2
8685: PUSH
8686: LD_INT 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: OR
8703: IFFALSE 8754
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8705: LD_VAR 0 2
8709: PPUSH
8710: LD_VAR 0 10
8714: PPUSH
8715: LD_INT 58
8717: PUSH
8718: EMPTY
8719: LIST
8720: PUSH
8721: LD_INT 24
8723: PUSH
8724: LD_INT 250
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PPUSH
8735: CALL_OW 72
8739: PPUSH
8740: LD_VAR 0 2
8744: PPUSH
8745: CALL_OW 74
8749: PPUSH
8750: CALL_OW 120
// end else
8754: GO 9041
// begin if veh and GetLives ( veh ) < 760 then
8756: LD_VAR 0 11
8760: PUSH
8761: LD_VAR 0 11
8765: PPUSH
8766: CALL_OW 256
8770: PUSH
8771: LD_INT 760
8773: LESS
8774: AND
8775: IFFALSE 8826
// begin SetTag ( i , 0 ) ;
8777: LD_VAR 0 2
8781: PPUSH
8782: LD_INT 0
8784: PPUSH
8785: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8789: LD_VAR 0 11
8793: PPUSH
8794: LD_VAR 0 6
8798: PUSH
8799: LD_INT 3
8801: ARRAY
8802: PUSH
8803: LD_INT 1
8805: ARRAY
8806: PPUSH
8807: LD_VAR 0 6
8811: PUSH
8812: LD_INT 3
8814: ARRAY
8815: PUSH
8816: LD_INT 2
8818: ARRAY
8819: PPUSH
8820: CALL_OW 111
// end else
8824: GO 9041
// if veh then
8826: LD_VAR 0 11
8830: IFFALSE 9041
// if tag <= attackFormula [ 4 ] then
8832: LD_VAR 0 4
8836: PUSH
8837: LD_VAR 0 6
8841: PUSH
8842: LD_INT 4
8844: ARRAY
8845: LESSEQUAL
8846: IFFALSE 9007
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8848: LD_VAR 0 11
8852: PPUSH
8853: LD_VAR 0 6
8857: PUSH
8858: LD_INT 4
8860: ARRAY
8861: PUSH
8862: LD_VAR 0 4
8866: ARRAY
8867: PUSH
8868: LD_INT 1
8870: ARRAY
8871: PPUSH
8872: LD_VAR 0 6
8876: PUSH
8877: LD_INT 4
8879: ARRAY
8880: PUSH
8881: LD_VAR 0 4
8885: ARRAY
8886: PUSH
8887: LD_INT 2
8889: ARRAY
8890: PPUSH
8891: CALL_OW 297
8895: PUSH
8896: LD_INT 6
8898: GREATER
8899: IFFALSE 8950
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8901: LD_VAR 0 11
8905: PPUSH
8906: LD_VAR 0 6
8910: PUSH
8911: LD_INT 4
8913: ARRAY
8914: PUSH
8915: LD_VAR 0 4
8919: ARRAY
8920: PUSH
8921: LD_INT 1
8923: ARRAY
8924: PPUSH
8925: LD_VAR 0 6
8929: PUSH
8930: LD_INT 4
8932: ARRAY
8933: PUSH
8934: LD_VAR 0 4
8938: ARRAY
8939: PUSH
8940: LD_INT 2
8942: ARRAY
8943: PPUSH
8944: CALL_OW 114
8948: GO 9005
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8950: LD_INT 81
8952: PUSH
8953: LD_INT 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 91
8962: PUSH
8963: LD_VAR 0 11
8967: PUSH
8968: LD_INT 10
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PPUSH
8980: CALL_OW 69
8984: NOT
8985: IFFALSE 9005
// SetTag ( i , tag + 1 ) ;
8987: LD_VAR 0 2
8991: PPUSH
8992: LD_VAR 0 4
8996: PUSH
8997: LD_INT 1
8999: PLUS
9000: PPUSH
9001: CALL_OW 109
// end else
9005: GO 9041
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9007: LD_VAR 0 11
9011: PPUSH
9012: LD_INT 81
9014: PUSH
9015: LD_INT 1
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: PPUSH
9027: LD_VAR 0 2
9031: PPUSH
9032: CALL_OW 74
9036: PPUSH
9037: CALL_OW 115
// end ; end ;
9041: GO 8347
9043: POP
9044: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9045: LD_EXP 49
9049: PPUSH
9050: LD_INT 52
9052: PUSH
9053: EMPTY
9054: LIST
9055: PPUSH
9056: CALL_OW 72
9060: NOT
9061: IFFALSE 7526
// end ;
9063: LD_VAR 0 1
9067: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9068: LD_INT 22
9070: PUSH
9071: LD_INT 1
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 32
9080: PUSH
9081: LD_INT 1
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PPUSH
9092: CALL_OW 69
9096: IFFALSE 9173
9098: GO 9100
9100: DISABLE
9101: LD_INT 0
9103: PPUSH
// begin enable ;
9104: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9105: LD_ADDR_VAR 0 1
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 1
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 32
9122: PUSH
9123: LD_INT 1
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9171
// if GetFuel ( i ) < 10 then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 261
9151: PUSH
9152: LD_INT 10
9154: LESS
9155: IFFALSE 9169
// SetFuel ( i , 10 ) ;
9157: LD_VAR 0 1
9161: PPUSH
9162: LD_INT 10
9164: PPUSH
9165: CALL_OW 240
9169: GO 9139
9171: POP
9172: POP
// end ; end_of_file
9173: PPOPN 1
9175: END
// export function Action ; var hasAll , i , tmp ; begin
9176: LD_INT 0
9178: PPUSH
9179: PPUSH
9180: PPUSH
9181: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9182: LD_ADDR_VAR 0 2
9186: PUSH
9187: LD_INT 22
9189: PUSH
9190: LD_INT 2
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 21
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 23
9209: PUSH
9210: LD_INT 2
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 69
9226: PUSH
9227: LD_INT 7
9229: GREATEREQUAL
9230: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9231: LD_VAR 0 2
9235: PPUSH
9236: LD_STRING 03_HasAll
9238: PPUSH
9239: CALL_OW 39
// Video ( true ) ;
9243: LD_INT 1
9245: PPUSH
9246: CALL 77515 0 1
// CenterNowOnUnits ( Heike ) ;
9250: LD_EXP 30
9254: PPUSH
9255: CALL_OW 87
// wait ( 0 0$2 ) ;
9259: LD_INT 70
9261: PPUSH
9262: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9266: LD_EXP 38
9270: PPUSH
9271: LD_STRING DF-1-start
9273: PPUSH
9274: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9278: LD_EXP 30
9282: PPUSH
9283: LD_EXP 38
9287: PPUSH
9288: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9292: LD_EXP 30
9296: PPUSH
9297: LD_STRING DH-1-start
9299: PPUSH
9300: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9304: LD_EXP 39
9308: PPUSH
9309: LD_INT 92
9311: PPUSH
9312: LD_INT 21
9314: PPUSH
9315: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9319: LD_EXP 34
9323: PPUSH
9324: LD_INT 94
9326: PPUSH
9327: LD_INT 23
9329: PPUSH
9330: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9334: LD_EXP 42
9338: PUSH
9339: LD_INT 1
9341: ARRAY
9342: PPUSH
9343: LD_INT 90
9345: PPUSH
9346: LD_INT 23
9348: PPUSH
9349: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9353: LD_EXP 42
9357: PUSH
9358: LD_INT 2
9360: ARRAY
9361: PPUSH
9362: LD_INT 93
9364: PPUSH
9365: LD_INT 25
9367: PPUSH
9368: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9372: LD_EXP 42
9376: PPUSH
9377: LD_EXP 39
9381: PPUSH
9382: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9386: LD_EXP 39
9390: PUSH
9391: LD_EXP 34
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: LD_EXP 30
9404: PPUSH
9405: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9409: LD_EXP 30
9413: PPUSH
9414: LD_EXP 39
9418: PPUSH
9419: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9423: LD_INT 35
9425: PPUSH
9426: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9430: LD_EXP 39
9434: PPUSH
9435: LD_INT 92
9437: PPUSH
9438: LD_INT 21
9440: PPUSH
9441: CALL_OW 307
9445: IFFALSE 9423
// Say ( Omar , DO-1-start ) ;
9447: LD_EXP 39
9451: PPUSH
9452: LD_STRING DO-1-start
9454: PPUSH
9455: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9459: LD_EXP 30
9463: PPUSH
9464: LD_STRING DH-2-start
9466: PPUSH
9467: CALL_OW 88
// if hasAll then
9471: LD_VAR 0 2
9475: IFFALSE 9603
// begin Say ( Omar , DO-2-start ) ;
9477: LD_EXP 39
9481: PPUSH
9482: LD_STRING DO-2-start
9484: PPUSH
9485: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9489: LD_EXP 39
9493: PPUSH
9494: LD_STRING DO-3-start
9496: PPUSH
9497: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9501: LD_EXP 30
9505: PPUSH
9506: LD_STRING DH-3-start
9508: PPUSH
9509: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9513: LD_EXP 38
9517: PPUSH
9518: LD_STRING DF-2-start
9520: PPUSH
9521: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9525: LD_EXP 39
9529: PPUSH
9530: LD_EXP 38
9534: PPUSH
9535: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9539: LD_EXP 39
9543: PPUSH
9544: LD_STRING DO-4-start
9546: PPUSH
9547: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9551: LD_EXP 38
9555: PPUSH
9556: LD_STRING DF-3-start
9558: PPUSH
9559: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9563: LD_EXP 39
9567: PPUSH
9568: LD_STRING DO-5-start
9570: PPUSH
9571: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9575: LD_EXP 38
9579: PPUSH
9580: LD_STRING DF-4-start
9582: PPUSH
9583: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9587: LD_EXP 39
9591: PPUSH
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 119
// end else
9601: GO 9703
// begin Say ( Omar , DO-2-start-a ) ;
9603: LD_EXP 39
9607: PPUSH
9608: LD_STRING DO-2-start-a
9610: PPUSH
9611: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9615: LD_EXP 39
9619: PPUSH
9620: LD_STRING DO-3-start-a
9622: PPUSH
9623: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9627: LD_EXP 30
9631: PPUSH
9632: LD_STRING DH-3-start-a
9634: PPUSH
9635: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9639: LD_EXP 38
9643: PPUSH
9644: LD_STRING DF-2-start-a
9646: PPUSH
9647: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9651: LD_EXP 39
9655: PPUSH
9656: LD_EXP 38
9660: PPUSH
9661: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9665: LD_EXP 39
9669: PPUSH
9670: LD_STRING DO-4-start-a
9672: PPUSH
9673: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9677: LD_EXP 38
9681: PPUSH
9682: LD_STRING DF-3-start-a
9684: PPUSH
9685: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9689: LD_EXP 39
9693: PPUSH
9694: LD_EXP 30
9698: PPUSH
9699: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9703: LD_INT 10
9705: PPUSH
9706: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9710: LD_EXP 39
9714: PPUSH
9715: LD_STRING DO-1-mission
9717: PPUSH
9718: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9722: LD_EXP 39
9726: PPUSH
9727: LD_STRING DO-2-mission
9729: PPUSH
9730: CALL_OW 88
// if not hasAll then
9734: LD_VAR 0 2
9738: NOT
9739: IFFALSE 9753
// Say ( Omar , DO-3-mission ) ;
9741: LD_EXP 39
9745: PPUSH
9746: LD_STRING DO-3-mission
9748: PPUSH
9749: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9753: LD_EXP 39
9757: PPUSH
9758: LD_STRING DO-4-mission
9760: PPUSH
9761: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9765: LD_EXP 30
9769: PPUSH
9770: LD_STRING DH-1-mission
9772: PPUSH
9773: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9777: LD_EXP 38
9781: PPUSH
9782: LD_STRING DF-1-mission
9784: PPUSH
9785: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9789: LD_EXP 39
9793: PPUSH
9794: LD_STRING DO-5-mission
9796: PPUSH
9797: CALL_OW 88
// if not hasAll then
9801: LD_VAR 0 2
9805: NOT
9806: IFFALSE 9941
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9808: LD_ADDR_VAR 0 4
9812: PUSH
9813: LD_INT 22
9815: PUSH
9816: LD_INT 2
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 21
9825: PUSH
9826: LD_INT 1
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 23
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 69
9852: ST_TO_ADDR
// for i := 7 downto tmp do
9853: LD_ADDR_VAR 0 3
9857: PUSH
9858: DOUBLE
9859: LD_INT 7
9861: INC
9862: ST_TO_ADDR
9863: LD_VAR 0 4
9867: PUSH
9868: FOR_DOWNTO
9869: IFFALSE 9939
// begin if omarSquad < 3 then
9871: LD_EXP 42
9875: PUSH
9876: LD_INT 3
9878: LESS
9879: IFFALSE 9883
// break ;
9881: GO 9939
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9883: LD_EXP 42
9887: PUSH
9888: LD_INT 3
9890: ARRAY
9891: PPUSH
9892: LD_INT 2
9894: PPUSH
9895: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9899: LD_ADDR_EXP 44
9903: PUSH
9904: LD_EXP 44
9908: PUSH
9909: LD_EXP 42
9913: PUSH
9914: LD_INT 3
9916: ARRAY
9917: UNION
9918: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9919: LD_ADDR_EXP 42
9923: PUSH
9924: LD_EXP 42
9928: PPUSH
9929: LD_INT 3
9931: PPUSH
9932: CALL_OW 3
9936: ST_TO_ADDR
// end ;
9937: GO 9868
9939: POP
9940: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9941: LD_EXP 39
9945: PUSH
9946: LD_EXP 42
9950: ADD
9951: PPUSH
9952: LD_INT 103
9954: PPUSH
9955: LD_INT 9
9957: PPUSH
9958: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9962: LD_VAR 0 2
9966: PUSH
9967: LD_EXP 35
9971: PPUSH
9972: CALL_OW 302
9976: AND
9977: IFFALSE 10038
// begin wait ( 0 0$3 ) ;
9979: LD_INT 105
9981: PPUSH
9982: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9986: LD_EXP 35
9990: PPUSH
9991: LD_EXP 38
9995: PPUSH
9996: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10000: LD_EXP 35
10004: PPUSH
10005: LD_STRING DK-1-side
10007: PPUSH
10008: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10012: LD_EXP 38
10016: PPUSH
10017: LD_EXP 35
10021: PPUSH
10022: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10026: LD_EXP 38
10030: PPUSH
10031: LD_STRING DF-1-side
10033: PPUSH
10034: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10038: LD_INT 22
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: PPUSH
10053: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10057: LD_EXP 38
10061: PUSH
10062: LD_EXP 41
10066: ADD
10067: PPUSH
10068: LD_INT 108
10070: PPUSH
10071: LD_INT 62
10073: PPUSH
10074: CALL_OW 111
// gameStarted := true ;
10078: LD_ADDR_EXP 3
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10086: LD_INT 105
10088: PPUSH
10089: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10093: LD_EXP 30
10097: PPUSH
10098: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10102: LD_EXP 30
10106: PPUSH
10107: LD_EXP 34
10111: PPUSH
10112: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10116: LD_INT 22
10118: PUSH
10119: LD_INT 2
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PPUSH
10126: CALL_OW 69
10130: PUSH
10131: LD_EXP 30
10135: DIFF
10136: PPUSH
10137: LD_EXP 30
10141: PPUSH
10142: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10146: LD_EXP 30
10150: PPUSH
10151: LD_STRING DH-1-explore
10153: PPUSH
10154: CALL_OW 88
// if Givi then
10158: LD_EXP 31
10162: IFFALSE 10178
// Say ( Givi , DG-1-explore ) else
10164: LD_EXP 31
10168: PPUSH
10169: LD_STRING DG-1-explore
10171: PPUSH
10172: CALL_OW 88
10176: GO 10215
// if heikeSecondSquad then
10178: LD_EXP 44
10182: IFFALSE 10215
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10184: LD_EXP 44
10188: PPUSH
10189: LD_INT 26
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PPUSH
10199: CALL_OW 72
10203: PUSH
10204: LD_INT 1
10206: ARRAY
10207: PPUSH
10208: LD_STRING DArm-1-explore
10210: PPUSH
10211: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10215: LD_EXP 34
10219: PPUSH
10220: LD_STRING DA-1-explore
10222: PPUSH
10223: CALL_OW 88
// if Sophia then
10227: LD_EXP 36
10231: IFFALSE 10309
// begin Say ( Sophia , DS-2-explore ) ;
10233: LD_EXP 36
10237: PPUSH
10238: LD_STRING DS-2-explore
10240: PPUSH
10241: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10245: LD_EXP 34
10249: PPUSH
10250: LD_STRING DA-2-explore
10252: PPUSH
10253: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10257: LD_EXP 36
10261: PPUSH
10262: LD_EXP 34
10266: PPUSH
10267: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10271: LD_EXP 34
10275: PPUSH
10276: LD_EXP 36
10280: PPUSH
10281: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10285: LD_EXP 36
10289: PPUSH
10290: LD_STRING DS-3-explore
10292: PPUSH
10293: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10297: LD_EXP 34
10301: PPUSH
10302: LD_STRING DA-3-explore
10304: PPUSH
10305: CALL_OW 88
// end ; if Mike then
10309: LD_EXP 32
10313: IFFALSE 10369
// begin Say ( Mike , DM-1-explore ) ;
10315: LD_EXP 32
10319: PPUSH
10320: LD_STRING DM-1-explore
10322: PPUSH
10323: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10327: LD_EXP 30
10331: PPUSH
10332: LD_STRING DH-2-explore
10334: PPUSH
10335: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10339: LD_EXP 32
10343: PPUSH
10344: LD_STRING DM-2-explore
10346: PPUSH
10347: CALL_OW 88
// if Kaia then
10351: LD_EXP 35
10355: IFFALSE 10369
// Say ( Kaia , DK-1-explore ) ;
10357: LD_EXP 35
10361: PPUSH
10362: LD_STRING DK-1-explore
10364: PPUSH
10365: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10369: LD_INT 22
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: PPUSH
10384: CALL_OW 139
// Video ( false ) ;
10388: LD_INT 0
10390: PPUSH
10391: CALL 77515 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10395: LD_STRING BuildBase
10397: PPUSH
10398: CALL_OW 337
// SaveForQuickRestart ;
10402: CALL_OW 22
// end ;
10406: LD_VAR 0 1
10410: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10411: LD_EXP 5
10415: PUSH
10416: LD_EXP 7
10420: NOT
10421: AND
10422: IFFALSE 10609
10424: GO 10426
10426: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10427: LD_EXP 47
10431: PPUSH
10432: LD_STRING DUsm-4-assault
10434: PPUSH
10435: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10439: LD_INT 35
10441: PPUSH
10442: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10446: LD_INT 22
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 21
10458: PUSH
10459: LD_INT 1
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 50
10468: PUSH
10469: EMPTY
10470: LIST
10471: PUSH
10472: LD_INT 95
10474: PUSH
10475: LD_INT 7
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: PPUSH
10488: CALL_OW 69
10492: IFFALSE 10439
// if not IsOk ( usCommander ) or americanBaseCaptured then
10494: LD_EXP 47
10498: PPUSH
10499: CALL_OW 302
10503: NOT
10504: PUSH
10505: LD_EXP 7
10509: OR
10510: IFFALSE 10514
// exit ;
10512: GO 10609
// repeat wait ( 0 0$1 ) ;
10514: LD_INT 35
10516: PPUSH
10517: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10521: LD_INT 22
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 21
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 50
10543: PUSH
10544: EMPTY
10545: LIST
10546: PUSH
10547: LD_INT 95
10549: PUSH
10550: LD_INT 7
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: NOT
10568: IFFALSE 10514
// wait ( 0 0$3 ) ;
10570: LD_INT 105
10572: PPUSH
10573: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10577: LD_EXP 47
10581: PPUSH
10582: CALL_OW 302
10586: NOT
10587: PUSH
10588: LD_EXP 7
10592: OR
10593: IFFALSE 10597
// exit ;
10595: GO 10609
// Say ( usCommander , DUsm-3-assault ) ;
10597: LD_EXP 47
10601: PPUSH
10602: LD_STRING DUsm-3-assault
10604: PPUSH
10605: CALL_OW 88
// end ;
10609: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10610: LD_EXP 6
10614: NOT
10615: PUSH
10616: LD_EXP 7
10620: NOT
10621: AND
10622: PUSH
10623: LD_INT 5
10625: PPUSH
10626: LD_INT 22
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 70
10640: AND
10641: PUSH
10642: LD_EXP 7
10646: NOT
10647: AND
10648: IFFALSE 10733
10650: GO 10652
10652: DISABLE
// begin if Mike then
10653: LD_EXP 32
10657: IFFALSE 10673
// Say ( Mike , DM-1-scout ) else
10659: LD_EXP 32
10663: PPUSH
10664: LD_STRING DM-1-scout
10666: PPUSH
10667: CALL_OW 88
10671: GO 10704
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10673: LD_EXP 44
10677: PPUSH
10678: LD_INT 26
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PPUSH
10688: CALL_OW 72
10692: PUSH
10693: LD_INT 1
10695: ARRAY
10696: PPUSH
10697: LD_STRING DArm-1-explore
10699: PPUSH
10700: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10704: LD_INT 54
10706: PPUSH
10707: LD_INT 35
10709: PPUSH
10710: LD_INT 2
10712: PPUSH
10713: LD_INT 1
10715: PPUSH
10716: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10720: LD_INT 54
10722: PPUSH
10723: LD_INT 35
10725: PPUSH
10726: LD_INT 2
10728: PPUSH
10729: CALL_OW 331
// end ;
10733: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10734: LD_INT 6
10736: PPUSH
10737: LD_INT 22
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: CALL_OW 70
10751: PUSH
10752: LD_EXP 7
10756: NOT
10757: AND
10758: IFFALSE 11012
10760: GO 10762
10762: DISABLE
10763: LD_INT 0
10765: PPUSH
10766: PPUSH
10767: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10768: LD_ADDR_VAR 0 1
10772: PUSH
10773: LD_EXP 44
10777: PPUSH
10778: LD_INT 26
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 72
10792: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10793: LD_ADDR_VAR 0 2
10797: PUSH
10798: LD_EXP 44
10802: PPUSH
10803: LD_INT 26
10805: PUSH
10806: LD_INT 2
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PPUSH
10813: CALL_OW 72
10817: ST_TO_ADDR
// DialogueOn ;
10818: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10822: LD_INT 36
10824: PPUSH
10825: LD_INT 22
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: LD_INT 8
10833: PPUSH
10834: CALL_OW 330
// dwait ( 0 0$1 ) ;
10838: LD_INT 35
10840: PPUSH
10841: CALL_OW 68
// speakerOk := false ;
10845: LD_ADDR_VAR 0 3
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// if Mike then
10853: LD_EXP 32
10857: IFFALSE 10879
// speakerOk := Say ( Mike , DM-1-spot ) else
10859: LD_ADDR_VAR 0 3
10863: PUSH
10864: LD_EXP 32
10868: PPUSH
10869: LD_STRING DM-1-spot
10871: PPUSH
10872: CALL_OW 88
10876: ST_TO_ADDR
10877: GO 10907
// if randomMen then
10879: LD_VAR 0 1
10883: IFFALSE 10907
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10885: LD_ADDR_VAR 0 3
10889: PUSH
10890: LD_VAR 0 1
10894: PUSH
10895: LD_INT 1
10897: ARRAY
10898: PPUSH
10899: LD_STRING DArm-1-spot-a
10901: PPUSH
10902: CALL_OW 88
10906: ST_TO_ADDR
// if speakerOk then
10907: LD_VAR 0 3
10911: IFFALSE 10955
// begin if Givi then
10913: LD_EXP 31
10917: IFFALSE 10933
// Say ( Givi , DG-1-spot ) else
10919: LD_EXP 31
10923: PPUSH
10924: LD_STRING DG-1-spot
10926: PPUSH
10927: CALL_OW 88
10931: GO 10955
// if randomWomen then
10933: LD_VAR 0 2
10937: IFFALSE 10955
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10939: LD_VAR 0 2
10943: PUSH
10944: LD_INT 1
10946: ARRAY
10947: PPUSH
10948: LD_STRING DArf-1-spot-a
10950: PPUSH
10951: CALL_OW 88
// end ; if Mike then
10955: LD_EXP 32
10959: IFFALSE 10975
// Say ( Heike , DH-1-spot ) else
10961: LD_EXP 30
10965: PPUSH
10966: LD_STRING DH-1-spot
10968: PPUSH
10969: CALL_OW 88
10973: GO 10987
// Say ( Heike , DH-1-spot-a ) ;
10975: LD_EXP 30
10979: PPUSH
10980: LD_STRING DH-1-spot-a
10982: PPUSH
10983: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10987: LD_INT 36
10989: PPUSH
10990: LD_INT 22
10992: PPUSH
10993: LD_INT 2
10995: PPUSH
10996: CALL_OW 331
// DialogueOff ;
11000: CALL_OW 7
// americanBaseSpoted := true ;
11004: LD_ADDR_EXP 6
11008: PUSH
11009: LD_INT 1
11011: ST_TO_ADDR
// end ;
11012: PPOPN 3
11014: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11015: LD_EXP 6
11019: NOT
11020: PUSH
11021: LD_INT 22
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PPUSH
11045: CALL_OW 69
11049: AND
11050: PUSH
11051: LD_EXP 7
11055: NOT
11056: AND
11057: IFFALSE 11143
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
// begin americanBaseSpoted := true ;
11065: LD_ADDR_EXP 6
11069: PUSH
11070: LD_INT 1
11072: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11073: LD_ADDR_VAR 0 1
11077: PUSH
11078: LD_EXP 44
11082: PPUSH
11083: LD_INT 26
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PPUSH
11093: CALL_OW 72
11097: ST_TO_ADDR
// if not randomMen then
11098: LD_VAR 0 1
11102: NOT
11103: IFFALSE 11107
// exit ;
11105: GO 11143
// DialogueOn ;
11107: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11111: LD_VAR 0 1
11115: PUSH
11116: LD_INT 1
11118: ARRAY
11119: PPUSH
11120: LD_STRING DArm-1-spot-a
11122: PPUSH
11123: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11127: LD_EXP 30
11131: PPUSH
11132: LD_STRING DH-1-spot-a
11134: PPUSH
11135: CALL_OW 88
// DialogueOff ;
11139: CALL_OW 7
// end ;
11143: PPOPN 1
11145: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11146: LD_INT 11
11148: PPUSH
11149: CALL_OW 255
11153: PUSH
11154: LD_INT 2
11156: EQUAL
11157: PUSH
11158: LD_INT 7
11160: PPUSH
11161: LD_INT 22
11163: PUSH
11164: LD_INT 1
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 3
11173: PUSH
11174: LD_INT 50
11176: PUSH
11177: EMPTY
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 30
11186: PUSH
11187: LD_INT 31
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 70
11203: OR
11204: PUSH
11205: LD_INT 7
11207: PPUSH
11208: LD_INT 22
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PPUSH
11218: CALL_OW 70
11222: PUSH
11223: LD_INT 2
11225: GREATER
11226: OR
11227: PUSH
11228: LD_EXP 46
11232: PUSH
11233: LD_INT 4
11235: LESSEQUAL
11236: OR
11237: IFFALSE 11828
11239: GO 11241
11241: DISABLE
11242: LD_INT 0
11244: PPUSH
11245: PPUSH
// begin wait ( 0 0$3 ) ;
11246: LD_INT 105
11248: PPUSH
11249: CALL_OW 67
// americanStartRun := true ;
11253: LD_ADDR_EXP 15
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// if IsOk ( usCommander ) then
11261: LD_EXP 47
11265: PPUSH
11266: CALL_OW 302
11270: IFFALSE 11300
// begin usForces := usForces union usCommander ;
11272: LD_ADDR_EXP 46
11276: PUSH
11277: LD_EXP 46
11281: PUSH
11282: LD_EXP 47
11286: UNION
11287: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11288: LD_EXP 47
11292: PPUSH
11293: LD_STRING DUsm-1-assault
11295: PPUSH
11296: CALL_OW 88
// end ; for i in usForces do
11300: LD_ADDR_VAR 0 1
11304: PUSH
11305: LD_EXP 46
11309: PUSH
11310: FOR_IN
11311: IFFALSE 11357
// begin if IsInUnit ( i ) then
11313: LD_VAR 0 1
11317: PPUSH
11318: CALL_OW 310
11322: IFFALSE 11333
// ComExitBuilding ( i ) ;
11324: LD_VAR 0 1
11328: PPUSH
11329: CALL_OW 122
// wait ( 3 ) ;
11333: LD_INT 3
11335: PPUSH
11336: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11340: LD_VAR 0 1
11344: PPUSH
11345: LD_INT 34
11347: PPUSH
11348: LD_INT 67
11350: PPUSH
11351: CALL_OW 111
// end ;
11355: GO 11310
11357: POP
11358: POP
// Say ( Heike , DH-1-assault ) ;
11359: LD_EXP 30
11363: PPUSH
11364: LD_STRING DH-1-assault
11366: PPUSH
11367: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11371: LD_INT 35
11373: PPUSH
11374: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11378: LD_VAR 0 1
11382: PPUSH
11383: LD_INT 34
11385: PPUSH
11386: LD_INT 67
11388: PPUSH
11389: CALL_OW 111
// until not usForces ;
11393: LD_EXP 46
11397: NOT
11398: IFFALSE 11371
// music_nat := 2 ;
11400: LD_ADDR_OWVAR 71
11404: PUSH
11405: LD_INT 2
11407: ST_TO_ADDR
// music_class := music_victory ;
11408: LD_ADDR_OWVAR 72
11412: PUSH
11413: LD_INT 4
11415: ST_TO_ADDR
// if not americanHasEscaped then
11416: LD_EXP 9
11420: NOT
11421: IFFALSE 11442
// begin Say ( Heike , DH-2-assault ) ;
11423: LD_EXP 30
11427: PPUSH
11428: LD_STRING DH-2-assault
11430: PPUSH
11431: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11435: LD_STRING ACH_CLEAN
11437: PPUSH
11438: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11442: LD_INT 70
11444: PPUSH
11445: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11449: LD_INT 35
11451: PPUSH
11452: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11456: LD_INT 22
11458: PUSH
11459: LD_INT 2
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 21
11468: PUSH
11469: LD_INT 1
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 3
11478: PUSH
11479: LD_INT 50
11481: PUSH
11482: EMPTY
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 69
11498: NOT
11499: IFFALSE 11449
// InGameOn ;
11501: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11505: LD_INT 11
11507: PPUSH
11508: CALL_OW 255
11512: PUSH
11513: LD_INT 2
11515: EQUAL
11516: NOT
11517: IFFALSE 11529
// SetSide ( usDepot , 2 ) ;
11519: LD_INT 11
11521: PPUSH
11522: LD_INT 2
11524: PPUSH
11525: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11529: LD_INT 35
11531: PPUSH
11532: LD_INT 22
11534: PPUSH
11535: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11539: LD_EXP 30
11543: PPUSH
11544: LD_INT 35
11546: PPUSH
11547: LD_INT 22
11549: PPUSH
11550: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11554: LD_EXP 30
11558: PPUSH
11559: LD_INT 38
11561: PPUSH
11562: LD_INT 25
11564: PPUSH
11565: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11569: LD_EXP 34
11573: PUSH
11574: LD_EXP 43
11578: UNION
11579: PUSH
11580: LD_EXP 44
11584: UNION
11585: PPUSH
11586: LD_INT 39
11588: PPUSH
11589: LD_INT 26
11591: PPUSH
11592: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11596: LD_EXP 34
11600: PUSH
11601: LD_EXP 43
11605: UNION
11606: PUSH
11607: LD_EXP 44
11611: UNION
11612: PPUSH
11613: LD_EXP 30
11617: PPUSH
11618: CALL_OW 179
// p := 0 ;
11622: LD_ADDR_VAR 0 2
11626: PUSH
11627: LD_INT 0
11629: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// p := p + 1 ;
11637: LD_ADDR_VAR 0 2
11641: PUSH
11642: LD_VAR 0 2
11646: PUSH
11647: LD_INT 1
11649: PLUS
11650: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11651: LD_EXP 30
11655: PPUSH
11656: CALL_OW 314
11660: NOT
11661: PUSH
11662: LD_VAR 0 2
11666: PUSH
11667: LD_INT 10
11669: GREATER
11670: OR
11671: IFFALSE 11630
// Say ( Heike , DH-1-capture ) ;
11673: LD_EXP 30
11677: PPUSH
11678: LD_STRING DH-1-capture
11680: PPUSH
11681: CALL_OW 88
// if Markov then
11685: LD_EXP 37
11689: IFFALSE 11703
// Say ( Markov , DMar-1-capture ) ;
11691: LD_EXP 37
11695: PPUSH
11696: LD_STRING DMar-1-capture
11698: PPUSH
11699: CALL_OW 88
// if Sophia then
11703: LD_EXP 36
11707: IFFALSE 11733
// begin Say ( Heike , DH-2-capture ) ;
11709: LD_EXP 30
11713: PPUSH
11714: LD_STRING DH-2-capture
11716: PPUSH
11717: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11721: LD_EXP 36
11725: PPUSH
11726: LD_STRING DS-1-capture
11728: PPUSH
11729: CALL_OW 88
// end ; InGameOff ;
11733: CALL_OW 9
// music_nat := music_auto ;
11737: LD_ADDR_OWVAR 71
11741: PUSH
11742: LD_INT 0
11744: ST_TO_ADDR
// music_class := music_auto ;
11745: LD_ADDR_OWVAR 72
11749: PUSH
11750: LD_INT 0
11752: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11753: LD_STRING ConstructBase
11755: PPUSH
11756: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_INT 1
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 21
11777: PUSH
11778: LD_INT 3
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: PUSH
11794: FOR_IN
11795: IFFALSE 11811
// SetSide ( i , 2 ) ;
11797: LD_VAR 0 1
11801: PPUSH
11802: LD_INT 2
11804: PPUSH
11805: CALL_OW 235
11809: GO 11794
11811: POP
11812: POP
// wait ( 0 0$3 ) ;
11813: LD_INT 105
11815: PPUSH
11816: CALL_OW 67
// americanBaseCaptured := true ;
11820: LD_ADDR_EXP 7
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// end ;
11828: PPOPN 2
11830: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11831: LD_EXP 14
11835: PUSH
11836: LD_INT 3
11838: GREATEREQUAL
11839: IFFALSE 11851
11841: GO 11843
11843: DISABLE
// SetAchievement ( ACH_ENG ) ;
11844: LD_STRING ACH_ENG
11846: PPUSH
11847: CALL_OW 543
11851: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11852: LD_INT 22
11854: PUSH
11855: LD_INT 2
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 25
11864: PUSH
11865: LD_INT 15
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: PUSH
11881: LD_INT 4
11883: GREATEREQUAL
11884: IFFALSE 11896
11886: GO 11888
11888: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11889: LD_STRING ACH_APEGEN
11891: PPUSH
11892: CALL_OW 543
11896: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11897: LD_INT 22
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 30
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 3
11919: PUSH
11920: LD_INT 57
11922: PUSH
11923: EMPTY
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: IFFALSE 12204
11941: GO 11943
11943: DISABLE
// begin workshopBuilded := true ;
11944: LD_ADDR_EXP 11
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// if IsOk ( Markov ) then
11952: LD_EXP 37
11956: PPUSH
11957: CALL_OW 302
11961: IFFALSE 12020
// begin Say ( Heike , DH-1-shop-a ) ;
11963: LD_EXP 30
11967: PPUSH
11968: LD_STRING DH-1-shop-a
11970: PPUSH
11971: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11975: LD_INT 47
11977: PPUSH
11978: LD_INT 2
11980: PPUSH
11981: CALL_OW 321
11985: PUSH
11986: LD_INT 2
11988: EQUAL
11989: PUSH
11990: LD_INT 45
11992: PPUSH
11993: LD_INT 2
11995: PPUSH
11996: CALL_OW 321
12000: PUSH
12001: LD_INT 2
12003: EQUAL
12004: AND
12005: NOT
12006: IFFALSE 12020
// Say ( Markov , DMar-1-shop-a ) ;
12008: LD_EXP 37
12012: PPUSH
12013: LD_STRING DMar-1-shop-a
12015: PPUSH
12016: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12020: LD_INT 35
12022: PPUSH
12023: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12027: LD_INT 47
12029: PPUSH
12030: LD_INT 2
12032: PPUSH
12033: CALL_OW 321
12037: PUSH
12038: LD_INT 2
12040: EQUAL
12041: PUSH
12042: LD_INT 45
12044: PPUSH
12045: LD_INT 2
12047: PPUSH
12048: CALL_OW 321
12052: PUSH
12053: LD_INT 2
12055: EQUAL
12056: OR
12057: IFFALSE 12020
// if IsOk ( Markov ) and IsOk ( Heike ) then
12059: LD_EXP 37
12063: PPUSH
12064: CALL_OW 302
12068: PUSH
12069: LD_EXP 30
12073: PPUSH
12074: CALL_OW 302
12078: AND
12079: IFFALSE 12197
// begin DialogueOn ;
12081: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12085: LD_EXP 37
12089: PPUSH
12090: LD_STRING DMar-1-shop
12092: PPUSH
12093: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12097: LD_EXP 30
12101: PPUSH
12102: LD_STRING DH-1-shop
12104: PPUSH
12105: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12109: LD_EXP 37
12113: PPUSH
12114: LD_STRING DMar-2-shop
12116: PPUSH
12117: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12121: LD_EXP 37
12125: PPUSH
12126: LD_STRING DMar-3-shop
12128: PPUSH
12129: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12133: LD_EXP 30
12137: PPUSH
12138: LD_STRING DH-2-shop
12140: PPUSH
12141: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12145: LD_EXP 37
12149: PPUSH
12150: LD_STRING DMar-4-shop
12152: PPUSH
12153: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12157: LD_EXP 30
12161: PPUSH
12162: LD_STRING DH-3-shop
12164: PPUSH
12165: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12169: LD_EXP 37
12173: PPUSH
12174: LD_STRING DMar-5-shop
12176: PPUSH
12177: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12181: LD_EXP 30
12185: PPUSH
12186: LD_STRING DH-4-shop
12188: PPUSH
12189: CALL_OW 88
// DialogueOff ;
12193: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12197: LD_STRING ConstructVeh
12199: PPUSH
12200: CALL_OW 337
// end ;
12204: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12205: LD_INT 2
12207: PPUSH
12208: LD_INT 2
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL 40138 0 3
12218: PUSH
12219: LD_INT 0
12221: EQUAL
12222: IFFALSE 12234
12224: GO 12226
12226: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12227: LD_STRING Techs
12229: PPUSH
12230: CALL_OW 337
12234: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12235: LD_EXP 37
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: LD_INT 34
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 35
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 69
12291: AND
12292: IFFALSE 12399
12294: GO 12296
12296: DISABLE
// begin DialogueOn ;
12297: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12301: LD_INT 22
12303: PUSH
12304: LD_INT 2
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 34
12316: PUSH
12317: LD_INT 22
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 35
12326: PUSH
12327: LD_INT 22
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PPUSH
12343: CALL_OW 69
12347: PPUSH
12348: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12352: LD_INT 10
12354: PPUSH
12355: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12359: LD_EXP 30
12363: PPUSH
12364: LD_STRING DH-1-bal
12366: PPUSH
12367: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12371: LD_EXP 37
12375: PPUSH
12376: LD_STRING DMar-1-bal
12378: PPUSH
12379: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12383: LD_EXP 30
12387: PPUSH
12388: LD_STRING DH-2-bal
12390: PPUSH
12391: CALL_OW 88
// DialogueOff ;
12395: CALL_OW 7
// end ;
12399: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12400: LD_EXP 34
12404: PPUSH
12405: CALL_OW 302
12409: PUSH
12410: LD_INT 22
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 30
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PPUSH
12434: CALL_OW 69
12438: AND
12439: IFFALSE 12500
12441: GO 12443
12443: DISABLE
// begin DialogueOn ;
12444: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12448: LD_EXP 34
12452: PPUSH
12453: LD_STRING DA-1-lab
12455: PPUSH
12456: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12460: LD_EXP 30
12464: PPUSH
12465: LD_STRING DH-1-lab
12467: PPUSH
12468: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12472: LD_EXP 34
12476: PPUSH
12477: LD_STRING DA-2-lab
12479: PPUSH
12480: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12484: LD_EXP 30
12488: PPUSH
12489: LD_STRING DH-2-lab
12491: PPUSH
12492: CALL_OW 88
// DialogueOff ;
12496: CALL_OW 7
// end ;
12500: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12501: LD_EXP 35
12505: PPUSH
12506: CALL_OW 302
12510: PUSH
12511: LD_INT 22
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 25
12523: PUSH
12524: LD_INT 15
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PPUSH
12535: CALL_OW 69
12539: AND
12540: PUSH
12541: LD_INT 81
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: NOT
12556: AND
12557: IFFALSE 12746
12559: GO 12561
12561: DISABLE
12562: LD_INT 0
12564: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12565: LD_ADDR_VAR 0 1
12569: PUSH
12570: LD_INT 22
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 25
12582: PUSH
12583: LD_INT 15
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 69
12598: ST_TO_ADDR
// InGameOn ;
12599: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12603: LD_VAR 0 1
12607: PUSH
12608: LD_INT 1
12610: ARRAY
12611: PPUSH
12612: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12616: LD_VAR 0 1
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12629: LD_EXP 35
12633: PPUSH
12634: LD_STRING DK-1-apesol
12636: PPUSH
12637: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12641: LD_VAR 0 1
12645: PUSH
12646: LD_INT 1
12648: ARRAY
12649: PPUSH
12650: LD_INT 35
12652: PPUSH
12653: LD_INT 28
12655: PPUSH
12656: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12660: LD_VAR 0 1
12664: PUSH
12665: LD_INT 1
12667: ARRAY
12668: PPUSH
12669: LD_INT 36
12671: PPUSH
12672: LD_INT 17
12674: PPUSH
12675: CALL_OW 171
// wait ( 0 0$2 ) ;
12679: LD_INT 70
12681: PPUSH
12682: CALL_OW 67
// DialogueOn ;
12686: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12690: LD_EXP 34
12694: PPUSH
12695: LD_STRING DA-1-apesol
12697: PPUSH
12698: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12702: LD_EXP 35
12706: PPUSH
12707: LD_STRING DK-2-apesol
12709: PPUSH
12710: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12714: LD_EXP 34
12718: PPUSH
12719: LD_STRING DA-2-apesol
12721: PPUSH
12722: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12726: LD_EXP 35
12730: PPUSH
12731: LD_STRING DK-3-apesol
12733: PPUSH
12734: CALL_OW 88
// DialogueOff ;
12738: CALL_OW 7
// InGameOff ;
12742: CALL_OW 9
// end ;
12746: PPOPN 1
12748: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12749: LD_EXP 36
12753: PPUSH
12754: CALL_OW 302
12758: PUSH
12759: LD_INT 22
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 25
12771: PUSH
12772: LD_INT 16
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: AND
12788: PUSH
12789: LD_INT 81
12791: PUSH
12792: LD_INT 2
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PPUSH
12799: CALL_OW 69
12803: NOT
12804: AND
12805: IFFALSE 13119
12807: GO 12809
12809: DISABLE
12810: LD_INT 0
12812: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12813: LD_ADDR_VAR 0 1
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 16
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 69
12846: ST_TO_ADDR
// blockAttack := true ;
12847: LD_ADDR_EXP 29
12851: PUSH
12852: LD_INT 1
12854: ST_TO_ADDR
// InGameOn ;
12855: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12859: LD_INT 35
12861: PPUSH
12862: LD_INT 22
12864: PPUSH
12865: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12869: LD_INT 5
12871: PPUSH
12872: LD_INT 35
12874: PPUSH
12875: LD_INT 22
12877: PPUSH
12878: LD_INT 1
12880: PPUSH
12881: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12885: LD_EXP 36
12889: PPUSH
12890: LD_VAR 0 1
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: PPUSH
12899: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12903: LD_VAR 0 1
12907: PUSH
12908: LD_INT 1
12910: ARRAY
12911: PPUSH
12912: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12916: LD_VAR 0 1
12920: PUSH
12921: LD_INT 1
12923: ARRAY
12924: PPUSH
12925: CALL_OW 122
// wait ( 0 0$2 ) ;
12929: LD_INT 70
12931: PPUSH
12932: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12936: LD_EXP 36
12940: PPUSH
12941: LD_STRING DS-1-apeeng
12943: PPUSH
12944: CALL_OW 88
// if IsOk ( Kamil ) then
12948: LD_EXP 33
12952: PPUSH
12953: CALL_OW 302
12957: IFFALSE 13107
// begin Say ( Kamil , DKam-1-apeeng ) ;
12959: LD_EXP 33
12963: PPUSH
12964: LD_STRING DKam-1-apeeng
12966: PPUSH
12967: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12971: LD_EXP 36
12975: PPUSH
12976: LD_STRING DS-2-apeeng
12978: PPUSH
12979: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12983: LD_EXP 33
12987: PPUSH
12988: LD_STRING DKam-2-apeeng
12990: PPUSH
12991: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12995: LD_EXP 36
12999: PPUSH
13000: LD_STRING DS-3-apeeng
13002: PPUSH
13003: CALL_OW 88
// if not IsOK ( Kaia ) then
13007: LD_EXP 35
13011: PPUSH
13012: CALL_OW 302
13016: NOT
13017: IFFALSE 13033
// begin InGameOff ;
13019: CALL_OW 9
// blockAttack := false ;
13023: LD_ADDR_EXP 29
13027: PUSH
13028: LD_INT 0
13030: ST_TO_ADDR
// exit ;
13031: GO 13119
// end ; Say ( Kaia , DK-1-apeeng ) ;
13033: LD_EXP 35
13037: PPUSH
13038: LD_STRING DK-1-apeeng
13040: PPUSH
13041: CALL_OW 88
// if not IsOk ( Givi ) then
13045: LD_EXP 31
13049: PPUSH
13050: CALL_OW 302
13054: NOT
13055: IFFALSE 13071
// begin InGameOff ;
13057: CALL_OW 9
// blockAttack := false ;
13061: LD_ADDR_EXP 29
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// exit ;
13069: GO 13119
// end ; Say ( Givi , DG-1-apeeng ) ;
13071: LD_EXP 31
13075: PPUSH
13076: LD_STRING DG-1-apeeng
13078: PPUSH
13079: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13083: LD_EXP 35
13087: PPUSH
13088: LD_STRING DK-2-apeeng
13090: PPUSH
13091: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13095: LD_EXP 35
13099: PPUSH
13100: LD_STRING DK-3-apeeng
13102: PPUSH
13103: CALL_OW 88
// end ; InGameOff ;
13107: CALL_OW 9
// blockAttack := false ;
13111: LD_ADDR_EXP 29
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// end ;
13119: PPOPN 1
13121: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13122: LD_EXP 4
13126: PUSH
13127: LD_INT 22
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 30
13139: PUSH
13140: LD_INT 0
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: AND
13156: IFFALSE 13337
13158: GO 13160
13160: DISABLE
// begin blockAttack := true ;
13161: LD_ADDR_EXP 29
13165: PUSH
13166: LD_INT 1
13168: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13169: LD_INT 350
13171: PPUSH
13172: CALL_OW 67
// DialogueOn ;
13176: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13180: LD_EXP 38
13184: PPUSH
13185: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13189: LD_EXP 38
13193: PPUSH
13194: LD_STRING DF-1-distribution
13196: PPUSH
13197: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13201: LD_EXP 30
13205: PPUSH
13206: LD_STRING DH-2-distribution
13208: PPUSH
13209: CALL_OW 88
// if IsOk ( Kaia ) then
13213: LD_EXP 35
13217: PPUSH
13218: CALL_OW 302
13222: IFFALSE 13283
// begin Say ( Kaia , DK-1-distribution ) ;
13224: LD_EXP 35
13228: PPUSH
13229: LD_STRING DK-1-distribution
13231: PPUSH
13232: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13236: LD_EXP 30
13240: PPUSH
13241: LD_STRING DH-1-distribution
13243: PPUSH
13244: CALL_OW 88
// if IsOk ( Givi ) then
13248: LD_EXP 31
13252: PPUSH
13253: CALL_OW 302
13257: IFFALSE 13283
// begin Say ( Givi , DG-1-distribution ) ;
13259: LD_EXP 31
13263: PPUSH
13264: LD_STRING DG-1-distribution
13266: PPUSH
13267: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13271: LD_EXP 30
13275: PPUSH
13276: LD_STRING DH-3-distribution
13278: PPUSH
13279: CALL_OW 88
// end ; end ; DialogueOff ;
13283: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13287: LD_STRING Crates1
13289: PPUSH
13290: CALL_OW 337
// farmerRequestedCrates := 300 ;
13294: LD_ADDR_EXP 17
13298: PUSH
13299: LD_INT 300
13301: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13302: LD_STRING FarmerCrates
13304: PPUSH
13305: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13309: LD_INT 10
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 424
// blockAttack := false ;
13319: LD_ADDR_EXP 29
13323: PUSH
13324: LD_INT 0
13326: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13327: LD_INT 108
13329: PPUSH
13330: LD_INT 61
13332: PPUSH
13333: CALL_OW 86
// end ;
13337: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13338: LD_EXP 7
13342: PUSH
13343: LD_INT 22
13345: PUSH
13346: LD_INT 2
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 3
13355: PUSH
13356: LD_INT 57
13358: PUSH
13359: EMPTY
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 2
13368: PUSH
13369: LD_INT 30
13371: PUSH
13372: LD_INT 6
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: LD_INT 7
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: AND
13404: PUSH
13405: LD_INT 22
13407: PUSH
13408: LD_INT 2
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 3
13417: PUSH
13418: LD_INT 57
13420: PUSH
13421: EMPTY
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 30
13430: PUSH
13431: LD_INT 4
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: PPUSH
13443: CALL_OW 69
13447: AND
13448: IFFALSE 13612
13450: GO 13452
13452: DISABLE
13453: LD_INT 0
13455: PPUSH
// begin wait ( 0 0$10 ) ;
13456: LD_INT 350
13458: PPUSH
13459: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_EXP 44
13472: PPUSH
13473: LD_INT 26
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 25
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 72
13501: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13502: LD_EXP 30
13506: PPUSH
13507: LD_STRING DH-1-task
13509: PPUSH
13510: CALL_OW 88
// if IsOk ( Sophia ) then
13514: LD_EXP 36
13518: PPUSH
13519: CALL_OW 302
13523: IFFALSE 13563
// begin Say ( Sophia , DS-1-task ) ;
13525: LD_EXP 36
13529: PPUSH
13530: LD_STRING DS-1-task
13532: PPUSH
13533: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13537: LD_EXP 36
13541: PPUSH
13542: LD_STRING DS-2-task
13544: PPUSH
13545: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13549: LD_EXP 30
13553: PPUSH
13554: LD_STRING DH-2-task
13556: PPUSH
13557: CALL_OW 88
// end else
13561: GO 13597
// if eng then
13563: LD_VAR 0 1
13567: IFFALSE 13597
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13569: LD_VAR 0 1
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: PPUSH
13578: LD_STRING DArm-1-task
13580: PPUSH
13581: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13585: LD_EXP 30
13589: PPUSH
13590: LD_STRING DH-2-task
13592: PPUSH
13593: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13597: LD_STRING BaseConstructed
13599: PPUSH
13600: CALL_OW 337
// allowConvoys := true ;
13604: LD_ADDR_EXP 13
13608: PUSH
13609: LD_INT 1
13611: ST_TO_ADDR
// end ;
13612: PPOPN 1
13614: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13615: LD_INT 22
13617: PUSH
13618: LD_INT 4
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 34
13627: PUSH
13628: LD_INT 12
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PPUSH
13639: CALL_OW 69
13643: IFFALSE 13811
13645: GO 13647
13647: DISABLE
13648: LD_INT 0
13650: PPUSH
13651: PPUSH
13652: PPUSH
// begin wait ( 0 0$2 ) ;
13653: LD_INT 70
13655: PPUSH
13656: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13660: LD_ADDR_VAR 0 1
13664: PUSH
13665: LD_INT 22
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 34
13677: PUSH
13678: LD_INT 12
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 69
13693: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13694: LD_ADDR_VAR 0 2
13698: PUSH
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: CALL_OW 250
13712: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_VAR 0 1
13722: PUSH
13723: LD_INT 1
13725: ARRAY
13726: PPUSH
13727: CALL_OW 251
13731: ST_TO_ADDR
// DialogueOn ;
13732: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13736: LD_VAR 0 2
13740: PPUSH
13741: LD_VAR 0 3
13745: PPUSH
13746: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13750: LD_VAR 0 2
13754: PPUSH
13755: LD_VAR 0 3
13759: PPUSH
13760: LD_INT 2
13762: PPUSH
13763: LD_INT 6
13765: NEG
13766: PPUSH
13767: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13771: LD_INT 10
13773: PPUSH
13774: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13778: LD_EXP 30
13782: PPUSH
13783: LD_STRING DH-1-seecargo
13785: PPUSH
13786: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: LD_INT 2
13802: PPUSH
13803: CALL_OW 331
// DialogueOff ;
13807: CALL_OW 7
// end ;
13811: PPOPN 3
13813: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13814: LD_EXP 4
13818: PUSH
13819: LD_EXP 16
13823: PUSH
13824: LD_INT 300
13826: GREATEREQUAL
13827: AND
13828: IFFALSE 13900
13830: GO 13832
13832: DISABLE
// begin DialogueOn ;
13833: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13837: LD_EXP 38
13841: PPUSH
13842: LD_STRING DF-1-delivery-2
13844: PPUSH
13845: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13849: LD_EXP 30
13853: PPUSH
13854: LD_STRING DH-1-delivery-2
13856: PPUSH
13857: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13861: LD_EXP 38
13865: PPUSH
13866: LD_STRING DF-2-delivery-2
13868: PPUSH
13869: CALL_OW 94
// DialogueOff ;
13873: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13877: LD_STRING Crates2
13879: PPUSH
13880: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13884: LD_ADDR_EXP 18
13888: PUSH
13889: LD_INT 63000
13891: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13892: LD_ADDR_EXP 17
13896: PUSH
13897: LD_INT 600
13899: ST_TO_ADDR
// end ;
13900: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13901: LD_EXP 4
13905: PUSH
13906: LD_EXP 16
13910: PUSH
13911: LD_INT 600
13913: GREATEREQUAL
13914: AND
13915: PUSH
13916: LD_OWVAR 67
13920: PUSH
13921: LD_INT 1
13923: GREATER
13924: AND
13925: IFFALSE 14125
13927: GO 13929
13929: DISABLE
// begin DialogueOn ;
13930: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13934: LD_EXP 38
13938: PPUSH
13939: LD_STRING DF-1-delivery-3
13941: PPUSH
13942: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13946: LD_EXP 30
13950: PPUSH
13951: LD_STRING DH-1-delivery-3
13953: PPUSH
13954: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13958: LD_EXP 38
13962: PPUSH
13963: LD_STRING DF-2-delivery-3
13965: PPUSH
13966: CALL_OW 94
// if IsOk ( Kaia ) then
13970: LD_EXP 35
13974: PPUSH
13975: CALL_OW 302
13979: IFFALSE 14029
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13981: LD_EXP 35
13985: PPUSH
13986: LD_STRING DK-1-delivery-3
13988: PPUSH
13989: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13993: LD_EXP 30
13997: PPUSH
13998: LD_STRING DH-2-delivery-3
14000: PPUSH
14001: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14005: LD_EXP 31
14009: PPUSH
14010: LD_STRING DG-1-delivery-3
14012: PPUSH
14013: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14017: LD_EXP 32
14021: PPUSH
14022: LD_STRING DM-1-delivery-3
14024: PPUSH
14025: CALL_OW 88
// end ; DialogueOff ;
14029: CALL_OW 7
// case Difficulty of 2 :
14033: LD_OWVAR 67
14037: PUSH
14038: LD_INT 2
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14046
14044: GO 14064
14046: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14047: LD_STRING Crates3
14049: PPUSH
14050: CALL_OW 337
// farmerRequestedCrates := 900 ;
14054: LD_ADDR_EXP 17
14058: PUSH
14059: LD_INT 900
14061: ST_TO_ADDR
// end ; 3 :
14062: GO 14117
14064: LD_INT 3
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14090
14072: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14073: LD_STRING Crates4
14075: PPUSH
14076: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14080: LD_ADDR_EXP 17
14084: PUSH
14085: LD_INT 1200
14087: ST_TO_ADDR
// end ; 4 :
14088: GO 14117
14090: LD_INT 4
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14116
14098: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14099: LD_STRING Crates5
14101: PPUSH
14102: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14106: LD_ADDR_EXP 17
14110: PUSH
14111: LD_INT 1400
14113: ST_TO_ADDR
// end ; end ;
14114: GO 14117
14116: POP
// farmerCratesCounter := 30 30$00 ;
14117: LD_ADDR_EXP 18
14121: PUSH
14122: LD_INT 63000
14124: ST_TO_ADDR
// end ;
14125: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14126: LD_EXP 4
14130: PUSH
14131: LD_EXP 16
14135: PUSH
14136: LD_INT 600
14138: PUSH
14139: LD_INT 900
14141: PUSH
14142: LD_INT 1200
14144: PUSH
14145: LD_INT 1400
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_OWVAR 67
14158: ARRAY
14159: GREATEREQUAL
14160: AND
14161: IFFALSE 14247
14163: GO 14165
14165: DISABLE
// begin retreatAllowed := true ;
14166: LD_ADDR_EXP 12
14170: PUSH
14171: LD_INT 1
14173: ST_TO_ADDR
// display_strings := [ ] ;
14174: LD_ADDR_OWVAR 47
14178: PUSH
14179: EMPTY
14180: ST_TO_ADDR
// DialogueOn ;
14181: CALL_OW 6
// InGameOn ;
14185: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14189: LD_EXP 39
14193: PPUSH
14194: LD_STRING DO-radio-end
14196: PPUSH
14197: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14201: LD_EXP 30
14205: PPUSH
14206: LD_STRING DH-1-radio-end
14208: PPUSH
14209: CALL_OW 88
// InGameOff ;
14213: CALL_OW 9
// DialogueOff ;
14217: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14221: LD_STRING Retreat
14223: PPUSH
14224: CALL_OW 337
// wait ( 0 0$2 ) ;
14228: LD_INT 70
14230: PPUSH
14231: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14235: LD_EXP 30
14239: PPUSH
14240: LD_STRING DH-2-radio-end
14242: PPUSH
14243: CALL_OW 88
// end ;
14247: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14248: LD_EXP 12
14252: IFFALSE 14383
14254: GO 14256
14256: DISABLE
14257: LD_INT 0
14259: PPUSH
14260: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14261: LD_INT 10
14263: PPUSH
14264: LD_INT 0
14266: PPUSH
14267: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14271: LD_ADDR_VAR 0 1
14275: PUSH
14276: LD_EXP 41
14280: PPUSH
14281: LD_INT 25
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 72
14295: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14296: LD_VAR 0 1
14300: PUSH
14301: LD_INT 102
14303: PPUSH
14304: LD_INT 69
14306: PPUSH
14307: CALL_OW 428
14311: PUSH
14312: LD_INT 0
14314: EQUAL
14315: AND
14316: IFFALSE 14383
// begin for i in tmp do
14318: LD_ADDR_VAR 0 2
14322: PUSH
14323: LD_VAR 0 1
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14353
// if IsInUnit ( i ) then
14331: LD_VAR 0 2
14335: PPUSH
14336: CALL_OW 310
14340: IFFALSE 14351
// ComExitBuilding ( i ) ;
14342: LD_VAR 0 2
14346: PPUSH
14347: CALL_OW 122
14351: GO 14328
14353: POP
14354: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14355: LD_VAR 0 1
14359: PPUSH
14360: LD_INT 31
14362: PPUSH
14363: LD_INT 102
14365: PPUSH
14366: LD_INT 69
14368: PPUSH
14369: LD_INT 2
14371: PPUSH
14372: CALL_OW 205
// wait ( 0 0$3 ) ;
14376: LD_INT 105
14378: PPUSH
14379: CALL_OW 67
// end ; end ;
14383: PPOPN 2
14385: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14386: LD_EXP 12
14390: NOT
14391: PUSH
14392: LD_INT 5
14394: PPUSH
14395: CALL_OW 301
14399: AND
14400: IFFALSE 14432
14402: GO 14404
14404: DISABLE
// begin DialogueOn ;
14405: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14409: LD_EXP 38
14413: PPUSH
14414: LD_STRING DF-1-failure
14416: PPUSH
14417: CALL_OW 94
// DialogueOff ;
14421: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14425: LD_STRING FarmerDepot
14427: PPUSH
14428: CALL_OW 104
// end ;
14432: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14433: LD_EXP 12
14437: PUSH
14438: LD_EXP 30
14442: PPUSH
14443: LD_EXP 38
14447: PPUSH
14448: CALL_OW 296
14452: PUSH
14453: LD_INT 12
14455: LESS
14456: AND
14457: PUSH
14458: LD_INT 81
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 21
14470: PUSH
14471: LD_INT 1
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 69
14486: NOT
14487: AND
14488: IFFALSE 15172
14490: GO 14492
14492: DISABLE
14493: LD_INT 0
14495: PPUSH
14496: PPUSH
14497: PPUSH
// begin allowConvoys := false ;
14498: LD_ADDR_EXP 13
14502: PUSH
14503: LD_INT 0
14505: ST_TO_ADDR
// InGameOn ;
14506: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14510: LD_EXP 30
14514: PPUSH
14515: LD_EXP 38
14519: PPUSH
14520: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14524: LD_EXP 38
14528: PPUSH
14529: LD_EXP 30
14533: PPUSH
14534: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14538: LD_EXP 38
14542: PPUSH
14543: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14547: LD_EXP 30
14551: PPUSH
14552: LD_STRING DH-1-end
14554: PPUSH
14555: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14559: LD_EXP 38
14563: PPUSH
14564: LD_STRING DF-1-end
14566: PPUSH
14567: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14571: LD_EXP 38
14575: PPUSH
14576: LD_STRING DF-2-end
14578: PPUSH
14579: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14583: LD_EXP 30
14587: PPUSH
14588: LD_STRING DH-2-end
14590: PPUSH
14591: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14595: LD_EXP 38
14599: PPUSH
14600: LD_STRING DF-3-end
14602: PPUSH
14603: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14607: LD_EXP 30
14611: PPUSH
14612: LD_STRING DH-3-end
14614: PPUSH
14615: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14619: LD_EXP 31
14623: PPUSH
14624: LD_STRING DG-1-end
14626: PPUSH
14627: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14631: LD_EXP 30
14635: PPUSH
14636: LD_STRING DH-4-end
14638: PPUSH
14639: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14643: LD_EXP 38
14647: PPUSH
14648: LD_STRING DF-4-end
14650: PPUSH
14651: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14655: LD_EXP 30
14659: PPUSH
14660: LD_STRING DH-5-end
14662: PPUSH
14663: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14667: LD_EXP 38
14671: PPUSH
14672: LD_STRING DF-5-end
14674: PPUSH
14675: CALL_OW 88
// InGameOff ;
14679: CALL_OW 9
// allowCargoEvacuation := true ;
14683: LD_ADDR_EXP 8
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14691: LD_ADDR_VAR 0 2
14695: PUSH
14696: LD_INT 4
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: PUSH
14714: LD_OWVAR 67
14718: ARRAY
14719: ST_TO_ADDR
// if farmerSquad < max then
14720: LD_EXP 41
14724: PUSH
14725: LD_VAR 0 2
14729: LESS
14730: IFFALSE 14742
// max := farmerSquad ;
14732: LD_ADDR_VAR 0 2
14736: PUSH
14737: LD_EXP 41
14741: ST_TO_ADDR
// for i := 1 to max do
14742: LD_ADDR_VAR 0 1
14746: PUSH
14747: DOUBLE
14748: LD_INT 1
14750: DEC
14751: ST_TO_ADDR
14752: LD_VAR 0 2
14756: PUSH
14757: FOR_TO
14758: IFFALSE 14796
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14760: LD_EXP 41
14764: PUSH
14765: LD_INT 1
14767: ARRAY
14768: PPUSH
14769: LD_INT 2
14771: PPUSH
14772: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14776: LD_ADDR_EXP 41
14780: PUSH
14781: LD_EXP 41
14785: PPUSH
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 3
14793: ST_TO_ADDR
// end ;
14794: GO 14757
14796: POP
14797: POP
// for i in Farmer ^ farmerSquad do
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: LD_EXP 38
14807: PUSH
14808: LD_EXP 41
14812: ADD
14813: PUSH
14814: FOR_IN
14815: IFFALSE 14854
// begin if IsInUnit ( i ) then
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL_OW 310
14826: IFFALSE 14837
// ComExitBuilding ( i ) ;
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14837: LD_VAR 0 1
14841: PPUSH
14842: LD_INT 102
14844: PPUSH
14845: LD_INT 7
14847: PPUSH
14848: CALL_OW 171
// end ;
14852: GO 14814
14854: POP
14855: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 22
14863: PUSH
14864: LD_INT 5
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 21
14873: PUSH
14874: LD_INT 3
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: PUSH
14890: LD_INT 5
14892: DIFF
14893: PUSH
14894: FOR_IN
14895: IFFALSE 14911
// SetSide ( i , 2 ) ;
14897: LD_VAR 0 1
14901: PPUSH
14902: LD_INT 2
14904: PPUSH
14905: CALL_OW 235
14909: GO 14894
14911: POP
14912: POP
// wait ( 0 0$2 ) ;
14913: LD_INT 70
14915: PPUSH
14916: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14920: LD_EXP 30
14924: PPUSH
14925: LD_STRING DH-6-end
14927: PPUSH
14928: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14932: LD_INT 35
14934: PPUSH
14935: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14939: LD_ADDR_VAR 0 3
14943: PUSH
14944: LD_EXP 38
14948: PUSH
14949: LD_EXP 41
14953: ADD
14954: PPUSH
14955: LD_INT 95
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PPUSH
14965: CALL_OW 72
14969: ST_TO_ADDR
// if tmp then
14970: LD_VAR 0 3
14974: IFFALSE 15018
// for i in tmp do
14976: LD_ADDR_VAR 0 1
14980: PUSH
14981: LD_VAR 0 3
14985: PUSH
14986: FOR_IN
14987: IFFALSE 15016
// begin farmerSquad := farmerSquad diff i ;
14989: LD_ADDR_EXP 41
14993: PUSH
14994: LD_EXP 41
14998: PUSH
14999: LD_VAR 0 1
15003: DIFF
15004: ST_TO_ADDR
// RemoveUnit ( i ) ;
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 64
// end ;
15014: GO 14986
15016: POP
15017: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15018: LD_EXP 41
15022: PUSH
15023: EMPTY
15024: EQUAL
15025: PUSH
15026: LD_EXP 38
15030: PPUSH
15031: CALL_OW 305
15035: NOT
15036: AND
15037: IFFALSE 14932
// if farmerHumanLoseCounter = 0 then
15039: LD_EXP 21
15043: PUSH
15044: LD_INT 0
15046: EQUAL
15047: IFFALSE 15056
// SetAchievement ( ACH_BABY ) ;
15049: LD_STRING ACH_BABY
15051: PPUSH
15052: CALL_OW 543
// wait ( 1 1$00 ) ;
15056: LD_INT 2100
15058: PPUSH
15059: CALL_OW 67
// SendAttack ;
15063: CALL 6118 0 0
// Say ( Heike , DH-7-end ) ;
15067: LD_EXP 30
15071: PPUSH
15072: LD_STRING DH-7-end
15074: PPUSH
15075: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15079: LD_ADDR_VAR 0 1
15083: PUSH
15084: DOUBLE
15085: LD_INT 1
15087: DEC
15088: ST_TO_ADDR
15089: LD_INT 2
15091: PUSH
15092: LD_INT 3
15094: PUSH
15095: LD_INT 3
15097: PUSH
15098: LD_INT 4
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: PUSH
15107: LD_OWVAR 67
15111: ARRAY
15112: PUSH
15113: FOR_TO
15114: IFFALSE 15170
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15116: LD_INT 4200
15118: PUSH
15119: LD_INT 3500
15121: PUSH
15122: LD_INT 3150
15124: PUSH
15125: LD_INT 2800
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: PUSH
15134: LD_OWVAR 67
15138: ARRAY
15139: PPUSH
15140: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15144: LD_EXP 12
15148: PUSH
15149: LD_EXP 22
15153: PUSH
15154: LD_INT 1
15156: LESS
15157: AND
15158: IFFALSE 15164
// exit ;
15160: POP
15161: POP
15162: GO 15172
// SendAttack ;
15164: CALL 6118 0 0
// end ;
15168: GO 15113
15170: POP
15171: POP
// end ;
15172: PPOPN 3
15174: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15175: LD_EXP 8
15179: PUSH
15180: LD_EXP 22
15184: PUSH
15185: LD_INT 0
15187: GREATER
15188: AND
15189: IFFALSE 15199
15191: GO 15193
15193: DISABLE
// begin enable ;
15194: ENABLE
// CargoEvacuation ;
15195: CALL 3591 0 0
// end ;
15199: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15200: LD_EXP 18
15204: PUSH
15205: LD_INT 18900
15207: LESSEQUAL
15208: IFFALSE 15257
15210: GO 15212
15212: DISABLE
// begin DialogueOn ;
15213: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15217: LD_EXP 38
15221: PPUSH
15222: LD_STRING DF-1-distribution-a
15224: PPUSH
15225: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15229: LD_EXP 30
15233: PPUSH
15234: LD_STRING DH-1-distribution-a
15236: PPUSH
15237: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15241: LD_EXP 38
15245: PPUSH
15246: LD_STRING DF-2-distribution-a
15248: PPUSH
15249: CALL_OW 94
// DialogueOff ;
15253: CALL_OW 7
// end ;
15257: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15258: LD_EXP 18
15262: PUSH
15263: LD_INT 0
15265: LESSEQUAL
15266: IFFALSE 15298
15268: GO 15270
15270: DISABLE
// begin DialogueOn ;
15271: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15275: LD_EXP 38
15279: PPUSH
15280: LD_STRING DF-3-distribution-a
15282: PPUSH
15283: CALL_OW 94
// YouLost ( Distribution ) ;
15287: LD_STRING Distribution
15289: PPUSH
15290: CALL_OW 104
// DialogueOff ;
15294: CALL_OW 7
// end ;
15298: END
// every 0 0$1 trigger vehCounter >= 2 do
15299: LD_EXP 23
15303: PUSH
15304: LD_INT 2
15306: GREATEREQUAL
15307: IFFALSE 15319
15309: GO 15311
15311: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15312: LD_STRING VehConstructed
15314: PPUSH
15315: CALL_OW 337
15319: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15320: LD_INT 22
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 34
15332: PUSH
15333: LD_INT 12
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 69
15348: IFFALSE 15408
15350: GO 15352
15352: DISABLE
// begin DialogueOn ;
15353: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15357: LD_EXP 30
15361: PPUSH
15362: LD_STRING DH-1-truck
15364: PPUSH
15365: CALL_OW 88
// if IsOk ( Markov ) then
15369: LD_EXP 37
15373: PPUSH
15374: CALL_OW 302
15378: IFFALSE 15404
// begin Say ( Markov , DMar-1-truck ) ;
15380: LD_EXP 37
15384: PPUSH
15385: LD_STRING DMar-1-truck
15387: PPUSH
15388: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15392: LD_EXP 30
15396: PPUSH
15397: LD_STRING DH-2-truck
15399: PPUSH
15400: CALL_OW 88
// end ; DialogueOff ;
15404: CALL_OW 7
// end ;
15408: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// if IsOk ( Givi ) then
15414: LD_EXP 31
15418: PPUSH
15419: CALL_OW 302
15423: IFFALSE 15439
// begin Say ( Givi , DG-1-nocargo ) ;
15425: LD_EXP 31
15429: PPUSH
15430: LD_STRING DG-1-nocargo
15432: PPUSH
15433: CALL_OW 88
// exit ;
15437: GO 15535
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15439: LD_ADDR_VAR 0 2
15443: PUSH
15444: LD_EXP 44
15448: PPUSH
15449: LD_INT 26
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PPUSH
15459: CALL_OW 72
15463: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15464: LD_ADDR_VAR 0 3
15468: PUSH
15469: LD_EXP 44
15473: PPUSH
15474: LD_INT 26
15476: PUSH
15477: LD_INT 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 72
15488: ST_TO_ADDR
// if randomMen then
15489: LD_VAR 0 2
15493: IFFALSE 15513
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15495: LD_VAR 0 2
15499: PUSH
15500: LD_INT 1
15502: ARRAY
15503: PPUSH
15504: LD_STRING DArm-1-nocargo
15506: PPUSH
15507: CALL_OW 88
15511: GO 15535
// if randomWomen then
15513: LD_VAR 0 3
15517: IFFALSE 15535
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15519: LD_VAR 0 3
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PPUSH
15528: LD_STRING DArf-1-nocargo
15530: PPUSH
15531: CALL_OW 88
// end ;
15535: LD_VAR 0 1
15539: RET
// export function IncomingAttack ; begin
15540: LD_INT 0
15542: PPUSH
// if attackWave = 1 then
15543: LD_EXP 20
15547: PUSH
15548: LD_INT 1
15550: EQUAL
15551: IFFALSE 15622
// begin DialogueOn ;
15553: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15557: LD_EXP 39
15561: PPUSH
15562: LD_STRING DO-1-radio-1
15564: PPUSH
15565: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15569: LD_EXP 30
15573: PPUSH
15574: LD_STRING DH-1-radio-1-
15576: PPUSH
15577: CALL_OW 88
// if IsOk ( Markov ) then
15581: LD_EXP 37
15585: PPUSH
15586: CALL_OW 302
15590: IFFALSE 15616
// begin Say ( Markov , DMar-1-radio-1 ) ;
15592: LD_EXP 37
15596: PPUSH
15597: LD_STRING DMar-1-radio-1
15599: PPUSH
15600: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15604: LD_EXP 30
15608: PPUSH
15609: LD_STRING DH-2-radio-1
15611: PPUSH
15612: CALL_OW 88
// end ; DialogueOff ;
15616: CALL_OW 7
// end else
15620: GO 15646
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15622: LD_EXP 39
15626: PPUSH
15627: LD_STRING DO-1-radio-u
15629: PPUSH
15630: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15634: LD_EXP 30
15638: PPUSH
15639: LD_STRING DH-1-radio-u
15641: PPUSH
15642: CALL_OW 88
// end ; end ;
15646: LD_VAR 0 1
15650: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15651: LD_EXP 46
15655: PPUSH
15656: LD_INT 95
15658: PUSH
15659: LD_INT 8
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 72
15670: IFFALSE 15773
15672: GO 15674
15674: DISABLE
15675: LD_INT 0
15677: PPUSH
// begin enable ;
15678: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_EXP 46
15688: PPUSH
15689: LD_INT 95
15691: PUSH
15692: LD_INT 8
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 72
15703: PUSH
15704: FOR_IN
15705: IFFALSE 15734
// begin usForces := usForces diff i ;
15707: LD_ADDR_EXP 46
15711: PUSH
15712: LD_EXP 46
15716: PUSH
15717: LD_VAR 0 1
15721: DIFF
15722: ST_TO_ADDR
// RemoveUnit ( i ) ;
15723: LD_VAR 0 1
15727: PPUSH
15728: CALL_OW 64
// end ;
15732: GO 15704
15734: POP
15735: POP
// if not americanHasEscaped and attackWave = 1 then
15736: LD_EXP 9
15740: NOT
15741: PUSH
15742: LD_EXP 20
15746: PUSH
15747: LD_INT 1
15749: EQUAL
15750: AND
15751: IFFALSE 15773
// begin americanHasEscaped := true ;
15753: LD_ADDR_EXP 9
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15761: LD_EXP 30
15765: PPUSH
15766: LD_STRING DH-2-assault-a
15768: PPUSH
15769: CALL_OW 88
// end ; end ;
15773: PPOPN 1
15775: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15776: LD_INT 4
15778: PPUSH
15779: LD_INT 22
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PPUSH
15789: CALL_OW 70
15793: PUSH
15794: LD_EXP 12
15798: NOT
15799: AND
15800: IFFALSE 15817
15802: GO 15804
15804: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15805: LD_EXP 38
15809: PPUSH
15810: LD_STRING DF-1-attack
15812: PPUSH
15813: CALL_OW 94
15817: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15818: LD_INT 5
15820: PPUSH
15821: CALL_OW 255
15825: PUSH
15826: LD_INT 2
15828: EQUAL
15829: IFFALSE 15845
15831: GO 15833
15833: DISABLE
// begin enable ;
15834: ENABLE
// SetSide ( arDepot , 5 ) ;
15835: LD_INT 5
15837: PPUSH
15838: LD_INT 5
15840: PPUSH
15841: CALL_OW 235
// end ;
15845: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15846: LD_INT 22
15848: PUSH
15849: LD_INT 1
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 21
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: NOT
15875: PUSH
15876: LD_INT 22
15878: PUSH
15879: LD_INT 4
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 69
15890: NOT
15891: AND
15892: PUSH
15893: LD_EXP 12
15897: NOT
15898: AND
15899: PUSH
15900: LD_EXP 16
15904: PUSH
15905: LD_INT 90
15907: GREATER
15908: AND
15909: PUSH
15910: LD_INT 7
15912: PPUSH
15913: LD_INT 22
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 70
15941: AND
15942: PUSH
15943: LD_INT 22
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 50
15955: PUSH
15956: EMPTY
15957: LIST
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_INT 0
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: PPUSH
15974: CALL_OW 69
15978: AND
15979: IFFALSE 16788
15981: GO 15983
15983: DISABLE
15984: LD_INT 0
15986: PPUSH
15987: PPUSH
15988: PPUSH
15989: PPUSH
15990: PPUSH
// begin depot := usDepot ;
15991: LD_ADDR_VAR 0 5
15995: PUSH
15996: LD_INT 11
15998: ST_TO_ADDR
// if not depot then
15999: LD_VAR 0 5
16003: NOT
16004: IFFALSE 16044
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16006: LD_ADDR_VAR 0 5
16010: PUSH
16011: LD_INT 22
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 0
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PPUSH
16035: CALL_OW 69
16039: PUSH
16040: LD_INT 1
16042: ARRAY
16043: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16044: LD_ADDR_VAR 0 1
16048: PUSH
16049: LD_EXP 44
16053: PPUSH
16054: LD_INT 26
16056: PUSH
16057: LD_INT 1
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 72
16068: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16069: LD_ADDR_VAR 0 2
16073: PUSH
16074: LD_EXP 44
16078: PPUSH
16079: LD_INT 26
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PPUSH
16089: CALL_OW 72
16093: ST_TO_ADDR
// if IsOk ( Kaia ) then
16094: LD_EXP 35
16098: PPUSH
16099: CALL_OW 302
16103: IFFALSE 16124
// speaker := [ Kaia , DK ] else
16105: LD_ADDR_VAR 0 3
16109: PUSH
16110: LD_EXP 35
16114: PUSH
16115: LD_STRING DK
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: ST_TO_ADDR
16122: GO 16204
// if randomMen then
16124: LD_VAR 0 1
16128: IFFALSE 16163
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16130: LD_ADDR_VAR 0 3
16134: PUSH
16135: LD_VAR 0 1
16139: PUSH
16140: LD_INT 1
16142: PPUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PUSH
16154: LD_STRING DArm
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: ST_TO_ADDR
16161: GO 16204
// if randomWomen then
16163: LD_VAR 0 2
16167: IFFALSE 16202
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16169: LD_ADDR_VAR 0 3
16173: PUSH
16174: LD_VAR 0 2
16178: PUSH
16179: LD_INT 1
16181: PPUSH
16182: LD_VAR 0 2
16186: PPUSH
16187: CALL_OW 12
16191: ARRAY
16192: PUSH
16193: LD_STRING DArf
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: ST_TO_ADDR
16200: GO 16204
// exit ;
16202: GO 16788
// if IsInUnit ( speaker [ 1 ] ) then
16204: LD_VAR 0 3
16208: PUSH
16209: LD_INT 1
16211: ARRAY
16212: PPUSH
16213: CALL_OW 310
16217: IFFALSE 16240
// place := IsInUnit ( speaker [ 1 ] ) else
16219: LD_ADDR_VAR 0 4
16223: PUSH
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 1
16231: ARRAY
16232: PPUSH
16233: CALL_OW 310
16237: ST_TO_ADDR
16238: GO 16254
// place := speaker [ 1 ] ;
16240: LD_ADDR_VAR 0 4
16244: PUSH
16245: LD_VAR 0 3
16249: PUSH
16250: LD_INT 1
16252: ARRAY
16253: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16254: LD_VAR 0 4
16258: PPUSH
16259: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 250
16272: PPUSH
16273: LD_VAR 0 4
16277: PPUSH
16278: CALL_OW 251
16282: PPUSH
16283: CALL 2078 0 2
// wait ( 0 0$2 ) ;
16287: LD_INT 70
16289: PPUSH
16290: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16294: LD_EXP 40
16298: PPUSH
16299: CALL_OW 305
16303: NOT
16304: IFFALSE 16308
// exit ;
16306: GO 16788
// allowConvoys := false ;
16308: LD_ADDR_EXP 13
16312: PUSH
16313: LD_INT 0
16315: ST_TO_ADDR
// blockAttack := true ;
16316: LD_ADDR_EXP 29
16320: PUSH
16321: LD_INT 1
16323: ST_TO_ADDR
// InGameOn ;
16324: CALL_OW 8
// wait ( 0 0$1 ) ;
16328: LD_INT 35
16330: PPUSH
16331: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16335: LD_EXP 40
16339: PPUSH
16340: LD_STRING DI-1-land
16342: PPUSH
16343: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16347: LD_VAR 0 3
16351: PUSH
16352: LD_INT 1
16354: ARRAY
16355: PPUSH
16356: CALL_OW 310
16360: IFFALSE 16375
// ComExit ( speaker [ 1 ] ) ;
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 1
16369: ARRAY
16370: PPUSH
16371: CALL 77941 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16375: LD_VAR 0 3
16379: PUSH
16380: LD_INT 1
16382: ARRAY
16383: PPUSH
16384: LD_EXP 40
16388: PPUSH
16389: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16393: LD_VAR 0 3
16397: PUSH
16398: LD_INT 1
16400: ARRAY
16401: PPUSH
16402: LD_EXP 40
16406: PPUSH
16407: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16411: LD_EXP 40
16415: PPUSH
16416: LD_VAR 0 3
16420: PUSH
16421: LD_INT 1
16423: ARRAY
16424: PPUSH
16425: CALL_OW 119
// wait ( 0 0$1 ) ;
16429: LD_INT 35
16431: PPUSH
16432: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16436: LD_VAR 0 3
16440: PUSH
16441: LD_INT 1
16443: ARRAY
16444: PPUSH
16445: LD_VAR 0 3
16449: PUSH
16450: LD_INT 2
16452: ARRAY
16453: PUSH
16454: LD_STRING -1-land
16456: STR
16457: PPUSH
16458: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16462: LD_EXP 40
16466: PPUSH
16467: LD_STRING DI-2-land
16469: PPUSH
16470: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16474: LD_VAR 0 3
16478: PUSH
16479: LD_INT 1
16481: ARRAY
16482: PPUSH
16483: LD_VAR 0 3
16487: PUSH
16488: LD_INT 2
16490: ARRAY
16491: PUSH
16492: LD_STRING -2-land
16494: STR
16495: PPUSH
16496: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16500: LD_VAR 0 3
16504: PUSH
16505: LD_INT 1
16507: ARRAY
16508: PPUSH
16509: LD_VAR 0 3
16513: PUSH
16514: LD_INT 2
16516: ARRAY
16517: PUSH
16518: LD_STRING -3-land
16520: STR
16521: PPUSH
16522: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16526: LD_EXP 30
16530: PPUSH
16531: LD_STRING DH-1-land
16533: PPUSH
16534: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16538: LD_VAR 0 5
16542: PPUSH
16543: CALL_OW 313
16547: PUSH
16548: LD_INT 6
16550: EQUAL
16551: IFFALSE 16571
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16553: LD_VAR 0 5
16557: PPUSH
16558: CALL_OW 313
16562: PUSH
16563: LD_INT 1
16565: ARRAY
16566: PPUSH
16567: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16571: LD_EXP 40
16575: PPUSH
16576: LD_INT 2
16578: PPUSH
16579: CALL_OW 235
// CenterOnUnits ( depot ) ;
16583: LD_VAR 0 5
16587: PPUSH
16588: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16592: LD_EXP 40
16596: PPUSH
16597: LD_VAR 0 5
16601: PPUSH
16602: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 1
16613: ARRAY
16614: PPUSH
16615: LD_VAR 0 5
16619: PPUSH
16620: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16624: LD_INT 35
16626: PPUSH
16627: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16631: LD_EXP 40
16635: PPUSH
16636: CALL_OW 310
16640: PUSH
16641: LD_EXP 40
16645: PPUSH
16646: CALL_OW 302
16650: NOT
16651: OR
16652: PUSH
16653: LD_VAR 0 5
16657: PPUSH
16658: CALL_OW 302
16662: NOT
16663: OR
16664: IFFALSE 16624
// InGameOff ;
16666: CALL_OW 9
// blockAttack := false ;
16670: LD_ADDR_EXP 29
16674: PUSH
16675: LD_INT 0
16677: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16678: LD_EXP 40
16682: PPUSH
16683: CALL_OW 302
16687: NOT
16688: IFFALSE 16692
// exit ;
16690: GO 16788
// if not IsOk ( depot ) then
16692: LD_VAR 0 5
16696: PPUSH
16697: CALL_OW 302
16701: NOT
16702: IFFALSE 16765
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16704: LD_EXP 40
16708: PPUSH
16709: LD_INT 30
16711: PPUSH
16712: LD_INT 1
16714: PPUSH
16715: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16719: LD_INT 35
16721: PPUSH
16722: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16726: LD_EXP 40
16730: PPUSH
16731: LD_INT 30
16733: PPUSH
16734: LD_INT 1
16736: PPUSH
16737: CALL_OW 307
16741: PUSH
16742: LD_EXP 40
16746: PPUSH
16747: CALL_OW 301
16751: OR
16752: IFFALSE 16719
// RemoveUnit ( Ibrahim ) ;
16754: LD_EXP 40
16758: PPUSH
16759: CALL_OW 64
// exit ;
16763: GO 16788
// end ; ibrahimInDepot := true ;
16765: LD_ADDR_EXP 26
16769: PUSH
16770: LD_INT 1
16772: ST_TO_ADDR
// allowConvoys := true ;
16773: LD_ADDR_EXP 13
16777: PUSH
16778: LD_INT 1
16780: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16781: LD_STRING IbrahimInDepot
16783: PPUSH
16784: CALL_OW 97
// end ;
16788: PPOPN 5
16790: END
// export function IbrahimQuery ; begin
16791: LD_INT 0
16793: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16794: LD_STRING IbrahimQuery
16796: PPUSH
16797: CALL_OW 97
16801: PUSH
16802: LD_INT 1
16804: DOUBLE
16805: EQUAL
16806: IFTRUE 16810
16808: GO 17172
16810: POP
// begin allowConvoys := false ;
16811: LD_ADDR_EXP 13
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// ibrahimInDepot := false ;
16819: LD_ADDR_EXP 26
16823: PUSH
16824: LD_INT 0
16826: ST_TO_ADDR
// InGameOn ;
16827: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16831: LD_EXP 30
16835: PPUSH
16836: CALL_OW 87
// wait ( 0 0$1 ) ;
16840: LD_INT 35
16842: PPUSH
16843: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16847: LD_EXP 30
16851: PPUSH
16852: LD_STRING DH-1-interrogation
16854: PPUSH
16855: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16859: LD_EXP 40
16863: PPUSH
16864: LD_STRING DI-1-interrogation
16866: PPUSH
16867: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16871: LD_EXP 30
16875: PPUSH
16876: LD_STRING DH-2-interrogation
16878: PPUSH
16879: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16883: LD_EXP 40
16887: PPUSH
16888: LD_STRING DI-2-interrogation
16890: PPUSH
16891: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16895: LD_EXP 30
16899: PPUSH
16900: LD_STRING DH-3-interrogation
16902: PPUSH
16903: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16907: LD_EXP 40
16911: PPUSH
16912: LD_STRING DI-3-interrogation
16914: PPUSH
16915: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16919: LD_EXP 30
16923: PPUSH
16924: LD_STRING DH-4-interrogation
16926: PPUSH
16927: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16931: LD_EXP 40
16935: PPUSH
16936: LD_STRING DI-4-interrogation
16938: PPUSH
16939: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16943: LD_EXP 30
16947: PPUSH
16948: LD_STRING DH-5-interrogation
16950: PPUSH
16951: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16955: LD_EXP 40
16959: PPUSH
16960: LD_STRING DI-5-interrogation
16962: PPUSH
16963: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16967: LD_INT 10
16969: PPUSH
16970: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16974: LD_EXP 30
16978: PPUSH
16979: LD_STRING DH-6-interrogation
16981: PPUSH
16982: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16986: LD_EXP 40
16990: PPUSH
16991: LD_STRING DI-6-interrogation
16993: PPUSH
16994: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
16998: LD_EXP 40
17002: PPUSH
17003: LD_STRING DI-7-interrogation
17005: PPUSH
17006: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17010: LD_EXP 30
17014: PPUSH
17015: LD_STRING DH-7-interrogation
17017: PPUSH
17018: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17022: LD_INT 10
17024: PPUSH
17025: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17029: LD_EXP 30
17033: PPUSH
17034: LD_STRING DH-8-interrogation
17036: PPUSH
17037: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17041: LD_EXP 40
17045: PPUSH
17046: LD_STRING DI-8-interrogation
17048: PPUSH
17049: CALL_OW 88
// wait ( 0 0$1 ) ;
17053: LD_INT 35
17055: PPUSH
17056: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
17060: LD_STRING IbrahimDecisionQuery
17062: PPUSH
17063: CALL_OW 97
17067: PUSH
17068: LD_INT 1
17070: DOUBLE
17071: EQUAL
17072: IFTRUE 17076
17074: GO 17100
17076: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17077: LD_EXP 40
17081: PPUSH
17082: LD_STRING DI-1-kill
17084: PPUSH
17085: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17089: LD_EXP 40
17093: PPUSH
17094: CALL_OW 66
// end ; 2 :
17098: GO 17166
17100: LD_INT 2
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 17165
17108: POP
// begin SetSide ( Ibrahim , 6 ) ;
17109: LD_EXP 40
17113: PPUSH
17114: LD_INT 6
17116: PPUSH
17117: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17121: LD_EXP 40
17125: PPUSH
17126: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17130: LD_EXP 40
17134: PPUSH
17135: LD_INT 66
17137: PPUSH
17138: LD_INT 2
17140: PPUSH
17141: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17145: LD_EXP 40
17149: PPUSH
17150: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17154: LD_EXP 30
17158: PPUSH
17159: CALL_OW 122
// end ; end ;
17163: GO 17166
17165: POP
// InGameOff ;
17166: CALL_OW 9
// end ; 2 :
17170: GO 17186
17172: LD_INT 2
17174: DOUBLE
17175: EQUAL
17176: IFTRUE 17180
17178: GO 17185
17180: POP
// exit ; end ;
17181: GO 17270
17183: GO 17186
17185: POP
// allowConvoys := true ;
17186: LD_ADDR_EXP 13
17190: PUSH
17191: LD_INT 1
17193: ST_TO_ADDR
// blockAttack := false ;
17194: LD_ADDR_EXP 29
17198: PUSH
17199: LD_INT 0
17201: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17202: LD_INT 5250
17204: PPUSH
17205: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17209: LD_INT 35
17211: PPUSH
17212: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17216: LD_INT 81
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 21
17228: PUSH
17229: LD_INT 1
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: NOT
17245: IFFALSE 17209
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17247: LD_EXP 40
17251: PPUSH
17252: LD_INT 34
17254: PPUSH
17255: LD_INT 21
17257: PPUSH
17258: CALL_OW 111
// ibrahimIsFree := true ;
17262: LD_ADDR_EXP 27
17266: PUSH
17267: LD_INT 1
17269: ST_TO_ADDR
// end ;
17270: LD_VAR 0 1
17274: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17275: LD_EXP 27
17279: PUSH
17280: LD_EXP 40
17284: PPUSH
17285: CALL_OW 302
17289: AND
17290: PUSH
17291: LD_INT 2
17293: PPUSH
17294: LD_EXP 40
17298: PPUSH
17299: CALL_OW 292
17303: AND
17304: IFFALSE 18095
17306: GO 17308
17308: DISABLE
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
17315: PPUSH
17316: PPUSH
// begin wait ( 0 0$10 ) ;
17317: LD_INT 350
17319: PPUSH
17320: CALL_OW 67
// allowConvoys := false ;
17324: LD_ADDR_EXP 13
17328: PUSH
17329: LD_INT 0
17331: ST_TO_ADDR
// blockAttack := true ;
17332: LD_ADDR_EXP 29
17336: PUSH
17337: LD_INT 1
17339: ST_TO_ADDR
// depot := usDepot ;
17340: LD_ADDR_VAR 0 4
17344: PUSH
17345: LD_INT 11
17347: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17348: LD_INT 11
17350: NOT
17351: PUSH
17352: LD_INT 22
17354: PUSH
17355: LD_INT 2
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 50
17364: PUSH
17365: EMPTY
17366: LIST
17367: PUSH
17368: LD_INT 30
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: PPUSH
17383: CALL_OW 69
17387: AND
17388: IFFALSE 17435
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17390: LD_ADDR_VAR 0 4
17394: PUSH
17395: LD_INT 22
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 50
17407: PUSH
17408: EMPTY
17409: LIST
17410: PUSH
17411: LD_INT 30
17413: PUSH
17414: LD_INT 0
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: PPUSH
17426: CALL_OW 69
17430: PUSH
17431: LD_INT 1
17433: ARRAY
17434: ST_TO_ADDR
// InGameOn ;
17435: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17439: LD_EXP 40
17443: PPUSH
17444: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
17448: LD_EXP 40
17452: PPUSH
17453: LD_STRING DI-1-free
17455: PPUSH
17456: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
17460: LD_EXP 30
17464: PPUSH
17465: LD_EXP 40
17469: PPUSH
17470: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
17474: LD_EXP 30
17478: PPUSH
17479: LD_STRING DH-1-free
17481: PPUSH
17482: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
17486: LD_EXP 40
17490: PPUSH
17491: LD_EXP 30
17495: PPUSH
17496: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
17500: LD_EXP 40
17504: PPUSH
17505: LD_STRING DI-2-free
17507: PPUSH
17508: CALL_OW 88
// changeClass := 0 ;
17512: LD_ADDR_VAR 0 1
17516: PUSH
17517: LD_INT 0
17519: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17520: LD_STRING IbrahimJoinQuery
17522: PPUSH
17523: CALL_OW 97
17527: PUSH
17528: LD_INT 1
17530: DOUBLE
17531: EQUAL
17532: IFTRUE 17536
17534: GO 17547
17536: POP
// begin changeClass := 1 ;
17537: LD_ADDR_VAR 0 1
17541: PUSH
17542: LD_INT 1
17544: ST_TO_ADDR
// end ; 2 :
17545: GO 17795
17547: LD_INT 2
17549: DOUBLE
17550: EQUAL
17551: IFTRUE 17555
17553: GO 17715
17555: POP
// begin Say ( Heike , DH-1-decline ) ;
17556: LD_EXP 30
17560: PPUSH
17561: LD_STRING DH-1-decline
17563: PPUSH
17564: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17568: LD_EXP 40
17572: PPUSH
17573: LD_STRING DI-1-decline
17575: PPUSH
17576: CALL_OW 88
// InGameOff ;
17580: CALL_OW 9
// blockAttack := false ;
17584: LD_ADDR_EXP 29
17588: PUSH
17589: LD_INT 0
17591: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17592: LD_EXP 40
17596: PPUSH
17597: LD_INT 30
17599: PPUSH
17600: LD_INT 1
17602: PPUSH
17603: CALL_OW 111
// p := 0 ;
17607: LD_ADDR_VAR 0 3
17611: PUSH
17612: LD_INT 0
17614: ST_TO_ADDR
// repeat p := p + 1 ;
17615: LD_ADDR_VAR 0 3
17619: PUSH
17620: LD_VAR 0 3
17624: PUSH
17625: LD_INT 1
17627: PLUS
17628: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17629: LD_INT 35
17631: PPUSH
17632: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17636: LD_EXP 40
17640: PPUSH
17641: LD_INT 30
17643: PPUSH
17644: LD_INT 1
17646: PPUSH
17647: CALL_OW 307
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_INT 2
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 101
17664: PUSH
17665: LD_INT 6
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PPUSH
17676: CALL_OW 69
17680: NOT
17681: OR
17682: PUSH
17683: LD_VAR 0 3
17687: PUSH
17688: LD_INT 10
17690: GREATER
17691: OR
17692: IFFALSE 17615
// RemoveUnit ( Ibrahim ) ;
17694: LD_EXP 40
17698: PPUSH
17699: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17703: LD_INT 1
17705: PPUSH
17706: LD_STRING 03_IbrahimHasEscaped
17708: PPUSH
17709: CALL_OW 39
// end ; 3 :
17713: GO 17795
17715: LD_INT 3
17717: DOUBLE
17718: EQUAL
17719: IFTRUE 17723
17721: GO 17794
17723: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17724: LD_EXP 30
17728: PPUSH
17729: LD_STRING DH-1-radio-hq
17731: PPUSH
17732: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17736: LD_EXP 39
17740: PPUSH
17741: LD_STRING DO-1-radio-hq
17743: PPUSH
17744: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17748: LD_EXP 30
17752: PPUSH
17753: LD_STRING DH-2-radio-hq
17755: PPUSH
17756: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17760: LD_EXP 39
17764: PPUSH
17765: LD_STRING DO-2-radio-hq
17767: PPUSH
17768: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17772: LD_EXP 30
17776: PPUSH
17777: LD_STRING DH-3-radio-hq
17779: PPUSH
17780: CALL_OW 88
// changeClass := 1 ;
17784: LD_ADDR_VAR 0 1
17788: PUSH
17789: LD_INT 1
17791: ST_TO_ADDR
// end ; end ;
17792: GO 17795
17794: POP
// if changeClass then
17795: LD_VAR 0 1
17799: IFFALSE 18095
// begin Say ( Heike , DH-1-agree ) ;
17801: LD_EXP 30
17805: PPUSH
17806: LD_STRING DH-1-agree
17808: PPUSH
17809: CALL_OW 88
// if IsOk ( Givi ) then
17813: LD_EXP 31
17817: PPUSH
17818: CALL_OW 302
17822: IFFALSE 17860
// begin Say ( Givi , DG-1-agree ) ;
17824: LD_EXP 31
17828: PPUSH
17829: LD_STRING DG-1-agree
17831: PPUSH
17832: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17836: LD_EXP 30
17840: PPUSH
17841: LD_STRING DH-2-agree
17843: PPUSH
17844: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17848: LD_EXP 31
17852: PPUSH
17853: LD_STRING DG-2-agree
17855: PPUSH
17856: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17860: LD_VAR 0 4
17864: PPUSH
17865: CALL_OW 313
17869: PUSH
17870: LD_INT 6
17872: EQUAL
17873: IFFALSE 17893
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17875: LD_VAR 0 4
17879: PPUSH
17880: CALL_OW 313
17884: PUSH
17885: LD_INT 1
17887: ARRAY
17888: PPUSH
17889: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17893: LD_EXP 40
17897: PPUSH
17898: LD_INT 2
17900: PPUSH
17901: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17905: LD_ADDR_VAR 0 5
17909: PUSH
17910: LD_EXP 40
17914: PPUSH
17915: CALL_OW 250
17919: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17920: LD_ADDR_VAR 0 6
17924: PUSH
17925: LD_EXP 40
17929: PPUSH
17930: CALL_OW 251
17934: ST_TO_ADDR
// if depot then
17935: LD_VAR 0 4
17939: IFFALSE 17988
// begin ComEnterUnit ( Ibrahim , depot ) ;
17941: LD_EXP 40
17945: PPUSH
17946: LD_VAR 0 4
17950: PPUSH
17951: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17955: LD_INT 35
17957: PPUSH
17958: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17962: LD_EXP 40
17966: PPUSH
17967: CALL_OW 310
17971: IFFALSE 17955
// b := IsInUnit ( Ibrahim ) ;
17973: LD_ADDR_VAR 0 2
17977: PUSH
17978: LD_EXP 40
17982: PPUSH
17983: CALL_OW 310
17987: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17988: LD_EXP 40
17992: PPUSH
17993: CALL_OW 64
// uc_side := 2 ;
17997: LD_ADDR_OWVAR 20
18001: PUSH
18002: LD_INT 2
18004: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18005: LD_ADDR_EXP 40
18009: PUSH
18010: LD_STRING Ibrahim
18012: PPUSH
18013: LD_INT 0
18015: PPUSH
18016: LD_STRING 
18018: PPUSH
18019: CALL 40075 0 3
18023: ST_TO_ADDR
// if depot then
18024: LD_VAR 0 4
18028: IFFALSE 18046
// PlaceHumanInUnit ( Ibrahim , b ) else
18030: LD_EXP 40
18034: PPUSH
18035: LD_VAR 0 2
18039: PPUSH
18040: CALL_OW 52
18044: GO 18068
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18046: LD_EXP 40
18050: PPUSH
18051: LD_VAR 0 5
18055: PPUSH
18056: LD_VAR 0 6
18060: PPUSH
18061: LD_INT 0
18063: PPUSH
18064: CALL_OW 48
// InGameOff ;
18068: CALL_OW 9
// allowConvoys := true ;
18072: LD_ADDR_EXP 13
18076: PUSH
18077: LD_INT 1
18079: ST_TO_ADDR
// blockAttack := false ;
18080: LD_ADDR_EXP 29
18084: PUSH
18085: LD_INT 0
18087: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18088: LD_STRING ACH_IBRAHIM
18090: PPUSH
18091: CALL_OW 543
// end ; end ;
18095: PPOPN 6
18097: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18098: LD_EXP 35
18102: PPUSH
18103: CALL_OW 256
18107: PUSH
18108: LD_INT 3
18110: LESS
18111: IFFALSE 18178
18113: GO 18115
18115: DISABLE
// begin DialogueOn ;
18116: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18120: LD_EXP 35
18124: PPUSH
18125: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18129: LD_EXP 35
18133: PPUSH
18134: LD_STRING DK-keydeath-1
18136: PPUSH
18137: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18141: LD_EXP 30
18145: PPUSH
18146: LD_STRING DH-keydeath-2
18148: PPUSH
18149: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18153: LD_EXP 30
18157: PPUSH
18158: LD_STRING DH-keydeath-3
18160: PPUSH
18161: CALL_OW 88
// DialogueOff ;
18165: CALL_OW 7
// KillUnit ( Kaia ) ;
18169: LD_EXP 35
18173: PPUSH
18174: CALL_OW 66
// end ;
18178: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18179: LD_EXP 12
18183: PUSH
18184: LD_EXP 22
18188: PUSH
18189: LD_INT 1
18191: LESS
18192: AND
18193: IFFALSE 18733
18195: GO 18197
18197: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18198: LD_INT 22
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 2
18210: PUSH
18211: LD_INT 25
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 25
18223: PUSH
18224: LD_INT 3
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PPUSH
18240: CALL_OW 69
18244: IFFALSE 18322
// begin ChangeSideFog ( 1 , 2 ) ;
18246: LD_INT 1
18248: PPUSH
18249: LD_INT 2
18251: PPUSH
18252: CALL_OW 343
// Query ( DestroyEnemy ) ;
18256: LD_STRING DestroyEnemy
18258: PPUSH
18259: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18263: LD_INT 35
18265: PPUSH
18266: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18270: LD_INT 22
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: LD_INT 25
18285: PUSH
18286: LD_INT 1
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 25
18295: PUSH
18296: LD_INT 3
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PPUSH
18312: CALL_OW 69
18316: PUSH
18317: LD_INT 0
18319: EQUAL
18320: IFFALSE 18263
// end ; DialogueOn ;
18322: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18326: LD_EXP 30
18330: PPUSH
18331: LD_STRING DH-1-final
18333: PPUSH
18334: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18338: LD_OWVAR 1
18342: PUSH
18343: LD_INT 138600
18345: PUSH
18346: LD_INT 134400
18348: PUSH
18349: LD_INT 130200
18351: PUSH
18352: LD_INT 126000
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: PUSH
18361: LD_OWVAR 67
18365: ARRAY
18366: LESSEQUAL
18367: IFFALSE 18381
// AddMedal ( med1 , 1 ) else
18369: LD_STRING med1
18371: PPUSH
18372: LD_INT 1
18374: PPUSH
18375: CALL_OW 101
18379: GO 18392
// AddMedal ( med1 , - 1 ) ;
18381: LD_STRING med1
18383: PPUSH
18384: LD_INT 1
18386: NEG
18387: PPUSH
18388: CALL_OW 101
// if vehCounter >= 2 then
18392: LD_EXP 23
18396: PUSH
18397: LD_INT 2
18399: GREATEREQUAL
18400: IFFALSE 18414
// AddMedal ( med2 , 1 ) else
18402: LD_STRING med2
18404: PPUSH
18405: LD_INT 1
18407: PPUSH
18408: CALL_OW 101
18412: GO 18425
// AddMedal ( med2 , - 1 ) ;
18414: LD_STRING med2
18416: PPUSH
18417: LD_INT 1
18419: NEG
18420: PPUSH
18421: CALL_OW 101
// if deadCounter = 0 then
18425: LD_EXP 10
18429: PUSH
18430: LD_INT 0
18432: EQUAL
18433: IFFALSE 18447
// AddMedal ( med3 , 1 ) else
18435: LD_STRING med3
18437: PPUSH
18438: LD_INT 1
18440: PPUSH
18441: CALL_OW 101
18445: GO 18458
// AddMedal ( med3 , - 1 ) ;
18447: LD_STRING med3
18449: PPUSH
18450: LD_INT 1
18452: NEG
18453: PPUSH
18454: CALL_OW 101
// GiveMedals ( MAIN ) ;
18458: LD_STRING MAIN
18460: PPUSH
18461: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18465: LD_INT 22
18467: PUSH
18468: LD_INT 2
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 23
18477: PUSH
18478: LD_INT 2
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 21
18487: PUSH
18488: LD_INT 1
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: LIST
18499: PPUSH
18500: CALL_OW 69
18504: PPUSH
18505: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18509: LD_EXP 30
18513: PPUSH
18514: LD_STRING 03_Heike
18516: PPUSH
18517: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18521: LD_EXP 34
18525: PPUSH
18526: LD_STRING 03_Aviradze
18528: PPUSH
18529: CALL_OW 38
// if Givi then
18533: LD_EXP 31
18537: IFFALSE 18551
// SaveCharacters ( Givi , 03_Givi ) ;
18539: LD_EXP 31
18543: PPUSH
18544: LD_STRING 03_Givi
18546: PPUSH
18547: CALL_OW 38
// if Mike then
18551: LD_EXP 32
18555: IFFALSE 18569
// SaveCharacters ( Mike , 03_Mike ) ;
18557: LD_EXP 32
18561: PPUSH
18562: LD_STRING 03_Mike
18564: PPUSH
18565: CALL_OW 38
// if Kamil then
18569: LD_EXP 33
18573: IFFALSE 18587
// SaveCharacters ( Kamil , 03_Kamil ) ;
18575: LD_EXP 33
18579: PPUSH
18580: LD_STRING 03_Kamil
18582: PPUSH
18583: CALL_OW 38
// if Kaia then
18587: LD_EXP 35
18591: IFFALSE 18605
// SaveCharacters ( Kaia , 03_Kaia ) ;
18593: LD_EXP 35
18597: PPUSH
18598: LD_STRING 03_Kaia
18600: PPUSH
18601: CALL_OW 38
// if Sophia then
18605: LD_EXP 36
18609: IFFALSE 18623
// SaveCharacters ( Sophia , 03_Sophia ) ;
18611: LD_EXP 36
18615: PPUSH
18616: LD_STRING 03_Sophia
18618: PPUSH
18619: CALL_OW 38
// if Markov then
18623: LD_EXP 37
18627: IFFALSE 18641
// SaveCharacters ( Markov , 03_Markov ) ;
18629: LD_EXP 37
18633: PPUSH
18634: LD_STRING 03_Markov
18636: PPUSH
18637: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18641: LD_EXP 40
18645: PUSH
18646: LD_EXP 40
18650: PPUSH
18651: CALL_OW 255
18655: PUSH
18656: LD_INT 2
18658: EQUAL
18659: AND
18660: IFFALSE 18681
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18662: LD_STRING enableBioCharacter(BIO_IBRA)
18664: PPUSH
18665: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18669: LD_EXP 40
18673: PPUSH
18674: LD_STRING 03_Ibrahim
18676: PPUSH
18677: CALL_OW 38
// end ; if heikeSecondSquad then
18681: LD_EXP 44
18685: IFFALSE 18699
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18687: LD_EXP 44
18691: PPUSH
18692: LD_STRING 03_others
18694: PPUSH
18695: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18699: LD_EXP 10
18703: PPUSH
18704: LD_STRING 03_DeadCounter
18706: PPUSH
18707: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18711: LD_STRING enableBioCharacter(BIO_OMAR)
18713: PPUSH
18714: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18718: LD_STRING enableBioCharacter(BIO_FARM)
18720: PPUSH
18721: CALL_OW 559
// YouWin ;
18725: CALL_OW 103
// DialogueOff ;
18729: CALL_OW 7
// end ; end_of_file
18733: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18734: LD_VAR 0 1
18738: PPUSH
18739: CALL 35786 0 1
// if un = Heike then
18743: LD_VAR 0 1
18747: PUSH
18748: LD_EXP 30
18752: EQUAL
18753: IFFALSE 18762
// YouLost ( Heike ) ;
18755: LD_STRING Heike
18757: PPUSH
18758: CALL_OW 104
// if un = Aviradze then
18762: LD_VAR 0 1
18766: PUSH
18767: LD_EXP 34
18771: EQUAL
18772: IFFALSE 18781
// YouLost ( Aviradze ) ;
18774: LD_STRING Aviradze
18776: PPUSH
18777: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18781: LD_VAR 0 1
18785: PUSH
18786: LD_INT 11
18788: EQUAL
18789: PUSH
18790: LD_EXP 12
18794: NOT
18795: AND
18796: IFFALSE 18805
// YouLost ( Depot ) ;
18798: LD_STRING Depot
18800: PPUSH
18801: CALL_OW 104
// if un = arDepot then
18805: LD_VAR 0 1
18809: PUSH
18810: LD_INT 5
18812: EQUAL
18813: IFFALSE 18822
// YouLost ( FarmerDepot ) ;
18815: LD_STRING FarmerDepot
18817: PPUSH
18818: CALL_OW 104
// if un = Farmer then
18822: LD_VAR 0 1
18826: PUSH
18827: LD_EXP 38
18831: EQUAL
18832: IFFALSE 18841
// YouLost ( Farmer ) ;
18834: LD_STRING Farmer
18836: PPUSH
18837: CALL_OW 104
// if un in usForces then
18841: LD_VAR 0 1
18845: PUSH
18846: LD_EXP 46
18850: IN
18851: IFFALSE 18869
// usForces := usForces diff un ;
18853: LD_ADDR_EXP 46
18857: PUSH
18858: LD_EXP 46
18862: PUSH
18863: LD_VAR 0 1
18867: DIFF
18868: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18869: LD_VAR 0 1
18873: PUSH
18874: LD_INT 22
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 23
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 21
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: IN
18914: IFFALSE 18930
// deadCounter := deadCounter + 1 ;
18916: LD_ADDR_EXP 10
18920: PUSH
18921: LD_EXP 10
18925: PUSH
18926: LD_INT 1
18928: PLUS
18929: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18930: LD_VAR 0 1
18934: PUSH
18935: LD_INT 22
18937: PUSH
18938: LD_INT 4
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 34
18947: PUSH
18948: LD_INT 12
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PPUSH
18959: CALL_OW 69
18963: IN
18964: PUSH
18965: LD_EXP 19
18969: NOT
18970: AND
18971: IFFALSE 18981
// firstConvoyDestroyed := true ;
18973: LD_ADDR_EXP 19
18977: PUSH
18978: LD_INT 1
18980: ST_TO_ADDR
// if un in usAttackers then
18981: LD_VAR 0 1
18985: PUSH
18986: LD_EXP 49
18990: IN
18991: IFFALSE 19009
// usAttackers := usAttackers diff un ;
18993: LD_ADDR_EXP 49
18997: PUSH
18998: LD_EXP 49
19002: PUSH
19003: LD_VAR 0 1
19007: DIFF
19008: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19009: LD_VAR 0 1
19013: PUSH
19014: LD_INT 22
19016: PUSH
19017: LD_INT 5
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 21
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: IN
19043: IFFALSE 19059
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19045: LD_ADDR_EXP 21
19049: PUSH
19050: LD_EXP 21
19054: PUSH
19055: LD_INT 1
19057: PLUS
19058: ST_TO_ADDR
// end ;
19059: PPOPN 1
19061: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19062: LD_VAR 0 2
19066: PUSH
19067: LD_EXP 40
19071: EQUAL
19072: PUSH
19073: LD_EXP 26
19077: AND
19078: IFFALSE 19263
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19080: LD_INT 22
19082: PUSH
19083: LD_INT 2
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 30
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 50
19102: PUSH
19103: EMPTY
19104: LIST
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: PPUSH
19111: CALL_OW 69
19115: IFFALSE 19169
// begin InGameOn ;
19117: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19121: LD_EXP 40
19125: PPUSH
19126: LD_INT 11
19128: PPUSH
19129: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19133: LD_INT 35
19135: PPUSH
19136: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19140: LD_EXP 40
19144: PPUSH
19145: LD_INT 11
19147: PPUSH
19148: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19152: LD_EXP 40
19156: PPUSH
19157: CALL_OW 310
19161: IFFALSE 19133
// InGameOff ;
19163: CALL_OW 9
// end else
19167: GO 19263
// begin SetSide ( Ibrahim , 6 ) ;
19169: LD_EXP 40
19173: PPUSH
19174: LD_INT 6
19176: PPUSH
19177: CALL_OW 235
// ibrahimInDepot := false ;
19181: LD_ADDR_EXP 26
19185: PUSH
19186: LD_INT 0
19188: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19189: LD_EXP 40
19193: PPUSH
19194: LD_INT 30
19196: PPUSH
19197: LD_INT 1
19199: PPUSH
19200: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19204: LD_INT 35
19206: PPUSH
19207: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19211: LD_EXP 40
19215: PPUSH
19216: LD_INT 30
19218: PPUSH
19219: LD_INT 1
19221: PPUSH
19222: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19226: LD_EXP 40
19230: PPUSH
19231: LD_INT 30
19233: PPUSH
19234: LD_INT 1
19236: PPUSH
19237: CALL_OW 307
19241: PUSH
19242: LD_EXP 40
19246: PPUSH
19247: CALL_OW 301
19251: OR
19252: IFFALSE 19204
// RemoveUnit ( Ibrahim ) ;
19254: LD_EXP 40
19258: PPUSH
19259: CALL_OW 64
// end ; end ; end ;
19263: PPOPN 2
19265: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19266: LD_VAR 0 2
19270: PUSH
19271: LD_EXP 30
19275: EQUAL
19276: PUSH
19277: LD_VAR 0 1
19281: PUSH
19282: LD_INT 11
19284: EQUAL
19285: AND
19286: PUSH
19287: LD_EXP 26
19291: AND
19292: IFFALSE 19298
// IbrahimQuery ;
19294: CALL 16791 0 0
// end ;
19298: PPOPN 2
19300: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19301: LD_VAR 0 1
19305: PPUSH
19306: CALL_OW 141
// if oldId in usAttackers then
19310: LD_VAR 0 2
19314: PUSH
19315: LD_EXP 49
19319: IN
19320: IFFALSE 19338
// usAttackers := usAttackers diff oldId ;
19322: LD_ADDR_EXP 49
19326: PUSH
19327: LD_EXP 49
19331: PUSH
19332: LD_VAR 0 2
19336: DIFF
19337: ST_TO_ADDR
// if newId in usAttackers then
19338: LD_VAR 0 1
19342: PUSH
19343: LD_EXP 49
19347: IN
19348: IFFALSE 19366
// usAttackers := usAttackers diff newId ;
19350: LD_ADDR_EXP 49
19354: PUSH
19355: LD_EXP 49
19359: PUSH
19360: LD_VAR 0 1
19364: DIFF
19365: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19366: LD_VAR 0 3
19370: PUSH
19371: LD_INT 4
19373: EQUAL
19374: PUSH
19375: LD_EXP 19
19379: NOT
19380: AND
19381: IFFALSE 19391
// firstConvoyDestroyed := true ;
19383: LD_ADDR_EXP 19
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19391: LD_VAR 0 1
19395: PPUSH
19396: CALL_OW 264
19400: PUSH
19401: LD_INT 12
19403: EQUAL
19404: IFFALSE 19442
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19406: LD_ADDR_EXP 14
19410: PUSH
19411: LD_EXP 14
19415: PUSH
19416: LD_INT 1
19418: PLUS
19419: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19420: LD_VAR 0 1
19424: PPUSH
19425: LD_INT 1
19427: PPUSH
19428: CALL_OW 289
19432: PUSH
19433: LD_INT 0
19435: EQUAL
19436: IFFALSE 19442
// EmptyCargoDialog ;
19438: CALL 15409 0 0
// end ; end ;
19442: PPOPN 4
19444: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19445: LD_VAR 0 1
19449: PUSH
19450: LD_INT 2
19452: EQUAL
19453: PUSH
19454: LD_VAR 0 2
19458: PUSH
19459: LD_INT 5
19461: EQUAL
19462: AND
19463: IFFALSE 19472
// YouLost ( Attack ) ;
19465: LD_STRING Attack
19467: PPUSH
19468: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19472: LD_VAR 0 1
19476: PUSH
19477: LD_INT 2
19479: EQUAL
19480: PUSH
19481: LD_VAR 0 2
19485: PUSH
19486: LD_INT 1
19488: EQUAL
19489: AND
19490: IFFALSE 19500
// americanContact := true ;
19492: LD_ADDR_EXP 5
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// end ;
19500: PPOPN 2
19502: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19503: LD_VAR 0 1
19507: PPUSH
19508: CALL_OW 255
19512: PUSH
19513: LD_INT 1
19515: EQUAL
19516: PUSH
19517: LD_EXP 7
19521: NOT
19522: AND
19523: IFFALSE 19657
// begin if GetBType ( b ) = b_lab then
19525: LD_VAR 0 1
19529: PPUSH
19530: CALL_OW 266
19534: PUSH
19535: LD_INT 6
19537: EQUAL
19538: IFFALSE 19578
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19540: LD_EXP 46
19544: PPUSH
19545: LD_INT 25
19547: PUSH
19548: LD_INT 4
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PPUSH
19555: CALL_OW 72
19559: PPUSH
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL_OW 120
// AmLabResearch ( b ) ;
19569: LD_VAR 0 1
19573: PPUSH
19574: CALL 5134 0 1
// end ; if GetBType ( b ) = b_armoury then
19578: LD_VAR 0 1
19582: PPUSH
19583: CALL_OW 266
19587: PUSH
19588: LD_INT 4
19590: EQUAL
19591: IFFALSE 19639
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19593: LD_EXP 46
19597: PPUSH
19598: LD_INT 25
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 3
19610: PUSH
19611: LD_INT 54
19613: PUSH
19614: EMPTY
19615: LIST
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PPUSH
19625: CALL_OW 72
19629: PPUSH
19630: LD_VAR 0 1
19634: PPUSH
19635: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19639: LD_ADDR_EXP 48
19643: PUSH
19644: LD_EXP 48
19648: PPUSH
19649: LD_INT 1
19651: PPUSH
19652: CALL_OW 3
19656: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19657: LD_VAR 0 1
19661: PPUSH
19662: CALL_OW 255
19666: PUSH
19667: LD_INT 5
19669: EQUAL
19670: IFFALSE 19684
// SetBLevel ( b , 5 ) ;
19672: LD_VAR 0 1
19676: PPUSH
19677: LD_INT 5
19679: PPUSH
19680: CALL_OW 241
// end ;
19684: PPOPN 1
19686: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19687: LD_VAR 0 1
19691: PPUSH
19692: CALL_OW 255
19696: PUSH
19697: LD_INT 2
19699: EQUAL
19700: IFFALSE 19716
// vehCounter := vehCounter + 1 ;
19702: LD_ADDR_EXP 23
19706: PUSH
19707: LD_EXP 23
19711: PUSH
19712: LD_INT 1
19714: PLUS
19715: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19716: LD_VAR 0 1
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: CALL 35906 0 2
// end ;
19730: PPOPN 2
19732: END
// on SailEvent ( event ) do begin if event = eventAttack then
19733: LD_VAR 0 1
19737: PUSH
19738: LD_EXP 25
19742: EQUAL
19743: IFFALSE 19749
// AmericanAttack ;
19745: CALL 6778 0 0
// end ; end_of_file
19749: PPOPN 1
19751: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19752: LD_OWVAR 1
19756: PUSH
19757: LD_INT 10500
19759: PUSH
19760: LD_INT 9800
19762: PUSH
19763: LD_INT 9450
19765: PUSH
19766: LD_INT 9100
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: PUSH
19775: LD_OWVAR 67
19779: ARRAY
19780: LESSEQUAL
19781: IFFALSE 19808
19783: GO 19785
19785: DISABLE
// begin enable ;
19786: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19787: LD_INT 1
19789: PPUSH
19790: LD_INT 5
19792: PPUSH
19793: CALL_OW 12
19797: PPUSH
19798: LD_INT 9
19800: PPUSH
19801: LD_INT 1
19803: PPUSH
19804: CALL_OW 55
// end ;
19808: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19809: LD_EXP 7
19813: PUSH
19814: LD_OWVAR 1
19818: PUSH
19819: LD_INT 94500
19821: LESSEQUAL
19822: AND
19823: IFFALSE 19850
19825: GO 19827
19827: DISABLE
// begin enable ;
19828: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19829: LD_INT 3
19831: PPUSH
19832: LD_INT 5
19834: PPUSH
19835: CALL_OW 12
19839: PPUSH
19840: LD_INT 9
19842: PPUSH
19843: LD_INT 1
19845: PPUSH
19846: CALL_OW 55
// end ; end_of_file
19850: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19851: LD_EXP 12
19855: NOT
19856: PUSH
19857: LD_EXP 17
19861: AND
19862: PUSH
19863: LD_EXP 4
19867: AND
19868: PUSH
19869: LD_EXP 16
19873: PUSH
19874: LD_EXP 17
19878: LESSEQUAL
19879: AND
19880: IFFALSE 19991
19882: GO 19884
19884: DISABLE
// begin enable ;
19885: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19886: LD_ADDR_OWVAR 47
19890: PUSH
19891: LD_STRING #X103-1
19893: PUSH
19894: LD_EXP 17
19898: PUSH
19899: LD_EXP 16
19903: MINUS
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19909: LD_ADDR_EXP 16
19913: PUSH
19914: LD_INT 5
19916: PPUSH
19917: CALL_OW 274
19921: PPUSH
19922: LD_INT 1
19924: PPUSH
19925: CALL_OW 275
19929: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19930: LD_INT 10
19932: PPUSH
19933: LD_INT 1
19935: PPUSH
19936: CALL_OW 287
19940: PUSH
19941: LD_INT 0
19943: EQUAL
19944: IFFALSE 19962
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19946: LD_ADDR_EXP 18
19950: PUSH
19951: LD_EXP 18
19955: PUSH
19956: LD_INT 35
19958: MINUS
19959: ST_TO_ADDR
19960: GO 19991
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
19962: LD_ADDR_EXP 18
19966: PUSH
19967: LD_INT 42000
19969: PUSH
19970: LD_INT 31500
19972: PUSH
19973: LD_INT 25200
19975: PUSH
19976: LD_INT 21000
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: PUSH
19985: LD_OWVAR 67
19989: ARRAY
19990: ST_TO_ADDR
// end ; end_of_file
19991: END
// export globalGameSaveCounter ; every 0 0$1 do
19992: GO 19994
19994: DISABLE
// begin enable ;
19995: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19996: LD_STRING updateTimer(
19998: PUSH
19999: LD_OWVAR 1
20003: STR
20004: PUSH
20005: LD_STRING );
20007: STR
20008: PPUSH
20009: CALL_OW 559
// end ;
20013: END
// every 0 0$1 do
20014: GO 20016
20016: DISABLE
// begin globalGameSaveCounter := 0 ;
20017: LD_ADDR_EXP 50
20021: PUSH
20022: LD_INT 0
20024: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20025: LD_STRING setGameSaveCounter(0)
20027: PPUSH
20028: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20032: LD_STRING initStreamRollete();
20034: PPUSH
20035: CALL_OW 559
// InitStreamMode ;
20039: CALL 21365 0 0
// DefineStreamItems ( false ) ;
20043: LD_INT 0
20045: PPUSH
20046: CALL 21829 0 1
// end ;
20050: END
// export function SOS_MapStart ( ) ; begin
20051: LD_INT 0
20053: PPUSH
// if streamModeActive then
20054: LD_EXP 51
20058: IFFALSE 20067
// DefineStreamItems ( true ) ;
20060: LD_INT 1
20062: PPUSH
20063: CALL 21829 0 1
// UpdateLuaVariables ( ) ;
20067: CALL 20084 0 0
// UpdateFactoryWaypoints ( ) ;
20071: CALL 34690 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20075: CALL 34947 0 0
// end ;
20079: LD_VAR 0 1
20083: RET
// function UpdateLuaVariables ( ) ; begin
20084: LD_INT 0
20086: PPUSH
// if globalGameSaveCounter then
20087: LD_EXP 50
20091: IFFALSE 20125
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20093: LD_ADDR_EXP 50
20097: PUSH
20098: LD_EXP 50
20102: PPUSH
20103: CALL 78904 0 1
20107: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20108: LD_STRING setGameSaveCounter(
20110: PUSH
20111: LD_EXP 50
20115: STR
20116: PUSH
20117: LD_STRING )
20119: STR
20120: PPUSH
20121: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20125: LD_STRING setGameDifficulty(
20127: PUSH
20128: LD_OWVAR 67
20132: STR
20133: PUSH
20134: LD_STRING )
20136: STR
20137: PPUSH
20138: CALL_OW 559
// end ;
20142: LD_VAR 0 1
20146: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20147: LD_INT 0
20149: PPUSH
// if p2 = stream_mode then
20150: LD_VAR 0 2
20154: PUSH
20155: LD_INT 100
20157: EQUAL
20158: IFFALSE 21161
// begin if not StreamModeActive then
20160: LD_EXP 51
20164: NOT
20165: IFFALSE 20175
// StreamModeActive := true ;
20167: LD_ADDR_EXP 51
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if p3 = 0 then
20175: LD_VAR 0 3
20179: PUSH
20180: LD_INT 0
20182: EQUAL
20183: IFFALSE 20189
// InitStreamMode ;
20185: CALL 21365 0 0
// if p3 = 1 then
20189: LD_VAR 0 3
20193: PUSH
20194: LD_INT 1
20196: EQUAL
20197: IFFALSE 20207
// sRocket := true ;
20199: LD_ADDR_EXP 56
20203: PUSH
20204: LD_INT 1
20206: ST_TO_ADDR
// if p3 = 2 then
20207: LD_VAR 0 3
20211: PUSH
20212: LD_INT 2
20214: EQUAL
20215: IFFALSE 20225
// sSpeed := true ;
20217: LD_ADDR_EXP 55
20221: PUSH
20222: LD_INT 1
20224: ST_TO_ADDR
// if p3 = 3 then
20225: LD_VAR 0 3
20229: PUSH
20230: LD_INT 3
20232: EQUAL
20233: IFFALSE 20243
// sEngine := true ;
20235: LD_ADDR_EXP 57
20239: PUSH
20240: LD_INT 1
20242: ST_TO_ADDR
// if p3 = 4 then
20243: LD_VAR 0 3
20247: PUSH
20248: LD_INT 4
20250: EQUAL
20251: IFFALSE 20261
// sSpec := true ;
20253: LD_ADDR_EXP 54
20257: PUSH
20258: LD_INT 1
20260: ST_TO_ADDR
// if p3 = 5 then
20261: LD_VAR 0 3
20265: PUSH
20266: LD_INT 5
20268: EQUAL
20269: IFFALSE 20279
// sLevel := true ;
20271: LD_ADDR_EXP 58
20275: PUSH
20276: LD_INT 1
20278: ST_TO_ADDR
// if p3 = 6 then
20279: LD_VAR 0 3
20283: PUSH
20284: LD_INT 6
20286: EQUAL
20287: IFFALSE 20297
// sArmoury := true ;
20289: LD_ADDR_EXP 59
20293: PUSH
20294: LD_INT 1
20296: ST_TO_ADDR
// if p3 = 7 then
20297: LD_VAR 0 3
20301: PUSH
20302: LD_INT 7
20304: EQUAL
20305: IFFALSE 20315
// sRadar := true ;
20307: LD_ADDR_EXP 60
20311: PUSH
20312: LD_INT 1
20314: ST_TO_ADDR
// if p3 = 8 then
20315: LD_VAR 0 3
20319: PUSH
20320: LD_INT 8
20322: EQUAL
20323: IFFALSE 20333
// sBunker := true ;
20325: LD_ADDR_EXP 61
20329: PUSH
20330: LD_INT 1
20332: ST_TO_ADDR
// if p3 = 9 then
20333: LD_VAR 0 3
20337: PUSH
20338: LD_INT 9
20340: EQUAL
20341: IFFALSE 20351
// sHack := true ;
20343: LD_ADDR_EXP 62
20347: PUSH
20348: LD_INT 1
20350: ST_TO_ADDR
// if p3 = 10 then
20351: LD_VAR 0 3
20355: PUSH
20356: LD_INT 10
20358: EQUAL
20359: IFFALSE 20369
// sFire := true ;
20361: LD_ADDR_EXP 63
20365: PUSH
20366: LD_INT 1
20368: ST_TO_ADDR
// if p3 = 11 then
20369: LD_VAR 0 3
20373: PUSH
20374: LD_INT 11
20376: EQUAL
20377: IFFALSE 20387
// sRefresh := true ;
20379: LD_ADDR_EXP 64
20383: PUSH
20384: LD_INT 1
20386: ST_TO_ADDR
// if p3 = 12 then
20387: LD_VAR 0 3
20391: PUSH
20392: LD_INT 12
20394: EQUAL
20395: IFFALSE 20405
// sExp := true ;
20397: LD_ADDR_EXP 65
20401: PUSH
20402: LD_INT 1
20404: ST_TO_ADDR
// if p3 = 13 then
20405: LD_VAR 0 3
20409: PUSH
20410: LD_INT 13
20412: EQUAL
20413: IFFALSE 20423
// sDepot := true ;
20415: LD_ADDR_EXP 66
20419: PUSH
20420: LD_INT 1
20422: ST_TO_ADDR
// if p3 = 14 then
20423: LD_VAR 0 3
20427: PUSH
20428: LD_INT 14
20430: EQUAL
20431: IFFALSE 20441
// sFlag := true ;
20433: LD_ADDR_EXP 67
20437: PUSH
20438: LD_INT 1
20440: ST_TO_ADDR
// if p3 = 15 then
20441: LD_VAR 0 3
20445: PUSH
20446: LD_INT 15
20448: EQUAL
20449: IFFALSE 20459
// sKamikadze := true ;
20451: LD_ADDR_EXP 75
20455: PUSH
20456: LD_INT 1
20458: ST_TO_ADDR
// if p3 = 16 then
20459: LD_VAR 0 3
20463: PUSH
20464: LD_INT 16
20466: EQUAL
20467: IFFALSE 20477
// sTroll := true ;
20469: LD_ADDR_EXP 76
20473: PUSH
20474: LD_INT 1
20476: ST_TO_ADDR
// if p3 = 17 then
20477: LD_VAR 0 3
20481: PUSH
20482: LD_INT 17
20484: EQUAL
20485: IFFALSE 20495
// sSlow := true ;
20487: LD_ADDR_EXP 77
20491: PUSH
20492: LD_INT 1
20494: ST_TO_ADDR
// if p3 = 18 then
20495: LD_VAR 0 3
20499: PUSH
20500: LD_INT 18
20502: EQUAL
20503: IFFALSE 20513
// sLack := true ;
20505: LD_ADDR_EXP 78
20509: PUSH
20510: LD_INT 1
20512: ST_TO_ADDR
// if p3 = 19 then
20513: LD_VAR 0 3
20517: PUSH
20518: LD_INT 19
20520: EQUAL
20521: IFFALSE 20531
// sTank := true ;
20523: LD_ADDR_EXP 80
20527: PUSH
20528: LD_INT 1
20530: ST_TO_ADDR
// if p3 = 20 then
20531: LD_VAR 0 3
20535: PUSH
20536: LD_INT 20
20538: EQUAL
20539: IFFALSE 20549
// sRemote := true ;
20541: LD_ADDR_EXP 81
20545: PUSH
20546: LD_INT 1
20548: ST_TO_ADDR
// if p3 = 21 then
20549: LD_VAR 0 3
20553: PUSH
20554: LD_INT 21
20556: EQUAL
20557: IFFALSE 20567
// sPowell := true ;
20559: LD_ADDR_EXP 82
20563: PUSH
20564: LD_INT 1
20566: ST_TO_ADDR
// if p3 = 22 then
20567: LD_VAR 0 3
20571: PUSH
20572: LD_INT 22
20574: EQUAL
20575: IFFALSE 20585
// sTeleport := true ;
20577: LD_ADDR_EXP 85
20581: PUSH
20582: LD_INT 1
20584: ST_TO_ADDR
// if p3 = 23 then
20585: LD_VAR 0 3
20589: PUSH
20590: LD_INT 23
20592: EQUAL
20593: IFFALSE 20603
// sOilTower := true ;
20595: LD_ADDR_EXP 87
20599: PUSH
20600: LD_INT 1
20602: ST_TO_ADDR
// if p3 = 24 then
20603: LD_VAR 0 3
20607: PUSH
20608: LD_INT 24
20610: EQUAL
20611: IFFALSE 20621
// sShovel := true ;
20613: LD_ADDR_EXP 88
20617: PUSH
20618: LD_INT 1
20620: ST_TO_ADDR
// if p3 = 25 then
20621: LD_VAR 0 3
20625: PUSH
20626: LD_INT 25
20628: EQUAL
20629: IFFALSE 20639
// sSheik := true ;
20631: LD_ADDR_EXP 89
20635: PUSH
20636: LD_INT 1
20638: ST_TO_ADDR
// if p3 = 26 then
20639: LD_VAR 0 3
20643: PUSH
20644: LD_INT 26
20646: EQUAL
20647: IFFALSE 20657
// sEarthquake := true ;
20649: LD_ADDR_EXP 91
20653: PUSH
20654: LD_INT 1
20656: ST_TO_ADDR
// if p3 = 27 then
20657: LD_VAR 0 3
20661: PUSH
20662: LD_INT 27
20664: EQUAL
20665: IFFALSE 20675
// sAI := true ;
20667: LD_ADDR_EXP 92
20671: PUSH
20672: LD_INT 1
20674: ST_TO_ADDR
// if p3 = 28 then
20675: LD_VAR 0 3
20679: PUSH
20680: LD_INT 28
20682: EQUAL
20683: IFFALSE 20693
// sCargo := true ;
20685: LD_ADDR_EXP 95
20689: PUSH
20690: LD_INT 1
20692: ST_TO_ADDR
// if p3 = 29 then
20693: LD_VAR 0 3
20697: PUSH
20698: LD_INT 29
20700: EQUAL
20701: IFFALSE 20711
// sDLaser := true ;
20703: LD_ADDR_EXP 96
20707: PUSH
20708: LD_INT 1
20710: ST_TO_ADDR
// if p3 = 30 then
20711: LD_VAR 0 3
20715: PUSH
20716: LD_INT 30
20718: EQUAL
20719: IFFALSE 20729
// sExchange := true ;
20721: LD_ADDR_EXP 97
20725: PUSH
20726: LD_INT 1
20728: ST_TO_ADDR
// if p3 = 31 then
20729: LD_VAR 0 3
20733: PUSH
20734: LD_INT 31
20736: EQUAL
20737: IFFALSE 20747
// sFac := true ;
20739: LD_ADDR_EXP 98
20743: PUSH
20744: LD_INT 1
20746: ST_TO_ADDR
// if p3 = 32 then
20747: LD_VAR 0 3
20751: PUSH
20752: LD_INT 32
20754: EQUAL
20755: IFFALSE 20765
// sPower := true ;
20757: LD_ADDR_EXP 99
20761: PUSH
20762: LD_INT 1
20764: ST_TO_ADDR
// if p3 = 33 then
20765: LD_VAR 0 3
20769: PUSH
20770: LD_INT 33
20772: EQUAL
20773: IFFALSE 20783
// sRandom := true ;
20775: LD_ADDR_EXP 100
20779: PUSH
20780: LD_INT 1
20782: ST_TO_ADDR
// if p3 = 34 then
20783: LD_VAR 0 3
20787: PUSH
20788: LD_INT 34
20790: EQUAL
20791: IFFALSE 20801
// sShield := true ;
20793: LD_ADDR_EXP 101
20797: PUSH
20798: LD_INT 1
20800: ST_TO_ADDR
// if p3 = 35 then
20801: LD_VAR 0 3
20805: PUSH
20806: LD_INT 35
20808: EQUAL
20809: IFFALSE 20819
// sTime := true ;
20811: LD_ADDR_EXP 102
20815: PUSH
20816: LD_INT 1
20818: ST_TO_ADDR
// if p3 = 36 then
20819: LD_VAR 0 3
20823: PUSH
20824: LD_INT 36
20826: EQUAL
20827: IFFALSE 20837
// sTools := true ;
20829: LD_ADDR_EXP 103
20833: PUSH
20834: LD_INT 1
20836: ST_TO_ADDR
// if p3 = 101 then
20837: LD_VAR 0 3
20841: PUSH
20842: LD_INT 101
20844: EQUAL
20845: IFFALSE 20855
// sSold := true ;
20847: LD_ADDR_EXP 68
20851: PUSH
20852: LD_INT 1
20854: ST_TO_ADDR
// if p3 = 102 then
20855: LD_VAR 0 3
20859: PUSH
20860: LD_INT 102
20862: EQUAL
20863: IFFALSE 20873
// sDiff := true ;
20865: LD_ADDR_EXP 69
20869: PUSH
20870: LD_INT 1
20872: ST_TO_ADDR
// if p3 = 103 then
20873: LD_VAR 0 3
20877: PUSH
20878: LD_INT 103
20880: EQUAL
20881: IFFALSE 20891
// sFog := true ;
20883: LD_ADDR_EXP 72
20887: PUSH
20888: LD_INT 1
20890: ST_TO_ADDR
// if p3 = 104 then
20891: LD_VAR 0 3
20895: PUSH
20896: LD_INT 104
20898: EQUAL
20899: IFFALSE 20909
// sReset := true ;
20901: LD_ADDR_EXP 73
20905: PUSH
20906: LD_INT 1
20908: ST_TO_ADDR
// if p3 = 105 then
20909: LD_VAR 0 3
20913: PUSH
20914: LD_INT 105
20916: EQUAL
20917: IFFALSE 20927
// sSun := true ;
20919: LD_ADDR_EXP 74
20923: PUSH
20924: LD_INT 1
20926: ST_TO_ADDR
// if p3 = 106 then
20927: LD_VAR 0 3
20931: PUSH
20932: LD_INT 106
20934: EQUAL
20935: IFFALSE 20945
// sTiger := true ;
20937: LD_ADDR_EXP 70
20941: PUSH
20942: LD_INT 1
20944: ST_TO_ADDR
// if p3 = 107 then
20945: LD_VAR 0 3
20949: PUSH
20950: LD_INT 107
20952: EQUAL
20953: IFFALSE 20963
// sBomb := true ;
20955: LD_ADDR_EXP 71
20959: PUSH
20960: LD_INT 1
20962: ST_TO_ADDR
// if p3 = 108 then
20963: LD_VAR 0 3
20967: PUSH
20968: LD_INT 108
20970: EQUAL
20971: IFFALSE 20981
// sWound := true ;
20973: LD_ADDR_EXP 79
20977: PUSH
20978: LD_INT 1
20980: ST_TO_ADDR
// if p3 = 109 then
20981: LD_VAR 0 3
20985: PUSH
20986: LD_INT 109
20988: EQUAL
20989: IFFALSE 20999
// sBetray := true ;
20991: LD_ADDR_EXP 83
20995: PUSH
20996: LD_INT 1
20998: ST_TO_ADDR
// if p3 = 110 then
20999: LD_VAR 0 3
21003: PUSH
21004: LD_INT 110
21006: EQUAL
21007: IFFALSE 21017
// sContamin := true ;
21009: LD_ADDR_EXP 84
21013: PUSH
21014: LD_INT 1
21016: ST_TO_ADDR
// if p3 = 111 then
21017: LD_VAR 0 3
21021: PUSH
21022: LD_INT 111
21024: EQUAL
21025: IFFALSE 21035
// sOil := true ;
21027: LD_ADDR_EXP 86
21031: PUSH
21032: LD_INT 1
21034: ST_TO_ADDR
// if p3 = 112 then
21035: LD_VAR 0 3
21039: PUSH
21040: LD_INT 112
21042: EQUAL
21043: IFFALSE 21053
// sStu := true ;
21045: LD_ADDR_EXP 90
21049: PUSH
21050: LD_INT 1
21052: ST_TO_ADDR
// if p3 = 113 then
21053: LD_VAR 0 3
21057: PUSH
21058: LD_INT 113
21060: EQUAL
21061: IFFALSE 21071
// sBazooka := true ;
21063: LD_ADDR_EXP 93
21067: PUSH
21068: LD_INT 1
21070: ST_TO_ADDR
// if p3 = 114 then
21071: LD_VAR 0 3
21075: PUSH
21076: LD_INT 114
21078: EQUAL
21079: IFFALSE 21089
// sMortar := true ;
21081: LD_ADDR_EXP 94
21085: PUSH
21086: LD_INT 1
21088: ST_TO_ADDR
// if p3 = 115 then
21089: LD_VAR 0 3
21093: PUSH
21094: LD_INT 115
21096: EQUAL
21097: IFFALSE 21107
// sRanger := true ;
21099: LD_ADDR_EXP 104
21103: PUSH
21104: LD_INT 1
21106: ST_TO_ADDR
// if p3 = 116 then
21107: LD_VAR 0 3
21111: PUSH
21112: LD_INT 116
21114: EQUAL
21115: IFFALSE 21125
// sComputer := true ;
21117: LD_ADDR_EXP 105
21121: PUSH
21122: LD_INT 1
21124: ST_TO_ADDR
// if p3 = 117 then
21125: LD_VAR 0 3
21129: PUSH
21130: LD_INT 117
21132: EQUAL
21133: IFFALSE 21143
// s30 := true ;
21135: LD_ADDR_EXP 106
21139: PUSH
21140: LD_INT 1
21142: ST_TO_ADDR
// if p3 = 118 then
21143: LD_VAR 0 3
21147: PUSH
21148: LD_INT 118
21150: EQUAL
21151: IFFALSE 21161
// s60 := true ;
21153: LD_ADDR_EXP 107
21157: PUSH
21158: LD_INT 1
21160: ST_TO_ADDR
// end ; if p2 = hack_mode then
21161: LD_VAR 0 2
21165: PUSH
21166: LD_INT 101
21168: EQUAL
21169: IFFALSE 21297
// begin case p3 of 1 :
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 1
21178: DOUBLE
21179: EQUAL
21180: IFTRUE 21184
21182: GO 21191
21184: POP
// hHackUnlimitedResources ; 2 :
21185: CALL 33436 0 0
21189: GO 21297
21191: LD_INT 2
21193: DOUBLE
21194: EQUAL
21195: IFTRUE 21199
21197: GO 21206
21199: POP
// hHackSetLevel10 ; 3 :
21200: CALL 33569 0 0
21204: GO 21297
21206: LD_INT 3
21208: DOUBLE
21209: EQUAL
21210: IFTRUE 21214
21212: GO 21221
21214: POP
// hHackSetLevel10YourUnits ; 4 :
21215: CALL 33654 0 0
21219: GO 21297
21221: LD_INT 4
21223: DOUBLE
21224: EQUAL
21225: IFTRUE 21229
21227: GO 21236
21229: POP
// hHackInvincible ; 5 :
21230: CALL 34102 0 0
21234: GO 21297
21236: LD_INT 5
21238: DOUBLE
21239: EQUAL
21240: IFTRUE 21244
21242: GO 21251
21244: POP
// hHackInvisible ; 6 :
21245: CALL 34213 0 0
21249: GO 21297
21251: LD_INT 6
21253: DOUBLE
21254: EQUAL
21255: IFTRUE 21259
21257: GO 21266
21259: POP
// hHackChangeYourSide ; 7 :
21260: CALL 34270 0 0
21264: GO 21297
21266: LD_INT 7
21268: DOUBLE
21269: EQUAL
21270: IFTRUE 21274
21272: GO 21281
21274: POP
// hHackChangeUnitSide ; 8 :
21275: CALL 34312 0 0
21279: GO 21297
21281: LD_INT 8
21283: DOUBLE
21284: EQUAL
21285: IFTRUE 21289
21287: GO 21296
21289: POP
// hHackFog ; end ;
21290: CALL 34413 0 0
21294: GO 21297
21296: POP
// end ; if p2 = game_save_mode then
21297: LD_VAR 0 2
21301: PUSH
21302: LD_INT 102
21304: EQUAL
21305: IFFALSE 21360
// begin if p3 = 1 then
21307: LD_VAR 0 3
21311: PUSH
21312: LD_INT 1
21314: EQUAL
21315: IFFALSE 21327
// globalGameSaveCounter := p4 ;
21317: LD_ADDR_EXP 50
21321: PUSH
21322: LD_VAR 0 4
21326: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21327: LD_VAR 0 3
21331: PUSH
21332: LD_INT 2
21334: EQUAL
21335: PUSH
21336: LD_EXP 50
21340: AND
21341: IFFALSE 21360
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21343: LD_STRING setGameSaveCounter(
21345: PUSH
21346: LD_EXP 50
21350: STR
21351: PUSH
21352: LD_STRING )
21354: STR
21355: PPUSH
21356: CALL_OW 559
// end ; end ;
21360: LD_VAR 0 7
21364: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21365: LD_INT 0
21367: PPUSH
// streamModeActive := false ;
21368: LD_ADDR_EXP 51
21372: PUSH
21373: LD_INT 0
21375: ST_TO_ADDR
// normalCounter := 36 ;
21376: LD_ADDR_EXP 52
21380: PUSH
21381: LD_INT 36
21383: ST_TO_ADDR
// hardcoreCounter := 18 ;
21384: LD_ADDR_EXP 53
21388: PUSH
21389: LD_INT 18
21391: ST_TO_ADDR
// sRocket := false ;
21392: LD_ADDR_EXP 56
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// sSpeed := false ;
21400: LD_ADDR_EXP 55
21404: PUSH
21405: LD_INT 0
21407: ST_TO_ADDR
// sEngine := false ;
21408: LD_ADDR_EXP 57
21412: PUSH
21413: LD_INT 0
21415: ST_TO_ADDR
// sSpec := false ;
21416: LD_ADDR_EXP 54
21420: PUSH
21421: LD_INT 0
21423: ST_TO_ADDR
// sLevel := false ;
21424: LD_ADDR_EXP 58
21428: PUSH
21429: LD_INT 0
21431: ST_TO_ADDR
// sArmoury := false ;
21432: LD_ADDR_EXP 59
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// sRadar := false ;
21440: LD_ADDR_EXP 60
21444: PUSH
21445: LD_INT 0
21447: ST_TO_ADDR
// sBunker := false ;
21448: LD_ADDR_EXP 61
21452: PUSH
21453: LD_INT 0
21455: ST_TO_ADDR
// sHack := false ;
21456: LD_ADDR_EXP 62
21460: PUSH
21461: LD_INT 0
21463: ST_TO_ADDR
// sFire := false ;
21464: LD_ADDR_EXP 63
21468: PUSH
21469: LD_INT 0
21471: ST_TO_ADDR
// sRefresh := false ;
21472: LD_ADDR_EXP 64
21476: PUSH
21477: LD_INT 0
21479: ST_TO_ADDR
// sExp := false ;
21480: LD_ADDR_EXP 65
21484: PUSH
21485: LD_INT 0
21487: ST_TO_ADDR
// sDepot := false ;
21488: LD_ADDR_EXP 66
21492: PUSH
21493: LD_INT 0
21495: ST_TO_ADDR
// sFlag := false ;
21496: LD_ADDR_EXP 67
21500: PUSH
21501: LD_INT 0
21503: ST_TO_ADDR
// sKamikadze := false ;
21504: LD_ADDR_EXP 75
21508: PUSH
21509: LD_INT 0
21511: ST_TO_ADDR
// sTroll := false ;
21512: LD_ADDR_EXP 76
21516: PUSH
21517: LD_INT 0
21519: ST_TO_ADDR
// sSlow := false ;
21520: LD_ADDR_EXP 77
21524: PUSH
21525: LD_INT 0
21527: ST_TO_ADDR
// sLack := false ;
21528: LD_ADDR_EXP 78
21532: PUSH
21533: LD_INT 0
21535: ST_TO_ADDR
// sTank := false ;
21536: LD_ADDR_EXP 80
21540: PUSH
21541: LD_INT 0
21543: ST_TO_ADDR
// sRemote := false ;
21544: LD_ADDR_EXP 81
21548: PUSH
21549: LD_INT 0
21551: ST_TO_ADDR
// sPowell := false ;
21552: LD_ADDR_EXP 82
21556: PUSH
21557: LD_INT 0
21559: ST_TO_ADDR
// sTeleport := false ;
21560: LD_ADDR_EXP 85
21564: PUSH
21565: LD_INT 0
21567: ST_TO_ADDR
// sOilTower := false ;
21568: LD_ADDR_EXP 87
21572: PUSH
21573: LD_INT 0
21575: ST_TO_ADDR
// sShovel := false ;
21576: LD_ADDR_EXP 88
21580: PUSH
21581: LD_INT 0
21583: ST_TO_ADDR
// sSheik := false ;
21584: LD_ADDR_EXP 89
21588: PUSH
21589: LD_INT 0
21591: ST_TO_ADDR
// sEarthquake := false ;
21592: LD_ADDR_EXP 91
21596: PUSH
21597: LD_INT 0
21599: ST_TO_ADDR
// sAI := false ;
21600: LD_ADDR_EXP 92
21604: PUSH
21605: LD_INT 0
21607: ST_TO_ADDR
// sCargo := false ;
21608: LD_ADDR_EXP 95
21612: PUSH
21613: LD_INT 0
21615: ST_TO_ADDR
// sDLaser := false ;
21616: LD_ADDR_EXP 96
21620: PUSH
21621: LD_INT 0
21623: ST_TO_ADDR
// sExchange := false ;
21624: LD_ADDR_EXP 97
21628: PUSH
21629: LD_INT 0
21631: ST_TO_ADDR
// sFac := false ;
21632: LD_ADDR_EXP 98
21636: PUSH
21637: LD_INT 0
21639: ST_TO_ADDR
// sPower := false ;
21640: LD_ADDR_EXP 99
21644: PUSH
21645: LD_INT 0
21647: ST_TO_ADDR
// sRandom := false ;
21648: LD_ADDR_EXP 100
21652: PUSH
21653: LD_INT 0
21655: ST_TO_ADDR
// sShield := false ;
21656: LD_ADDR_EXP 101
21660: PUSH
21661: LD_INT 0
21663: ST_TO_ADDR
// sTime := false ;
21664: LD_ADDR_EXP 102
21668: PUSH
21669: LD_INT 0
21671: ST_TO_ADDR
// sTools := false ;
21672: LD_ADDR_EXP 103
21676: PUSH
21677: LD_INT 0
21679: ST_TO_ADDR
// sSold := false ;
21680: LD_ADDR_EXP 68
21684: PUSH
21685: LD_INT 0
21687: ST_TO_ADDR
// sDiff := false ;
21688: LD_ADDR_EXP 69
21692: PUSH
21693: LD_INT 0
21695: ST_TO_ADDR
// sFog := false ;
21696: LD_ADDR_EXP 72
21700: PUSH
21701: LD_INT 0
21703: ST_TO_ADDR
// sReset := false ;
21704: LD_ADDR_EXP 73
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// sSun := false ;
21712: LD_ADDR_EXP 74
21716: PUSH
21717: LD_INT 0
21719: ST_TO_ADDR
// sTiger := false ;
21720: LD_ADDR_EXP 70
21724: PUSH
21725: LD_INT 0
21727: ST_TO_ADDR
// sBomb := false ;
21728: LD_ADDR_EXP 71
21732: PUSH
21733: LD_INT 0
21735: ST_TO_ADDR
// sWound := false ;
21736: LD_ADDR_EXP 79
21740: PUSH
21741: LD_INT 0
21743: ST_TO_ADDR
// sBetray := false ;
21744: LD_ADDR_EXP 83
21748: PUSH
21749: LD_INT 0
21751: ST_TO_ADDR
// sContamin := false ;
21752: LD_ADDR_EXP 84
21756: PUSH
21757: LD_INT 0
21759: ST_TO_ADDR
// sOil := false ;
21760: LD_ADDR_EXP 86
21764: PUSH
21765: LD_INT 0
21767: ST_TO_ADDR
// sStu := false ;
21768: LD_ADDR_EXP 90
21772: PUSH
21773: LD_INT 0
21775: ST_TO_ADDR
// sBazooka := false ;
21776: LD_ADDR_EXP 93
21780: PUSH
21781: LD_INT 0
21783: ST_TO_ADDR
// sMortar := false ;
21784: LD_ADDR_EXP 94
21788: PUSH
21789: LD_INT 0
21791: ST_TO_ADDR
// sRanger := false ;
21792: LD_ADDR_EXP 104
21796: PUSH
21797: LD_INT 0
21799: ST_TO_ADDR
// sComputer := false ;
21800: LD_ADDR_EXP 105
21804: PUSH
21805: LD_INT 0
21807: ST_TO_ADDR
// s30 := false ;
21808: LD_ADDR_EXP 106
21812: PUSH
21813: LD_INT 0
21815: ST_TO_ADDR
// s60 := false ;
21816: LD_ADDR_EXP 107
21820: PUSH
21821: LD_INT 0
21823: ST_TO_ADDR
// end ;
21824: LD_VAR 0 1
21828: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21829: LD_INT 0
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
21835: PPUSH
21836: PPUSH
21837: PPUSH
// result := [ ] ;
21838: LD_ADDR_VAR 0 2
21842: PUSH
21843: EMPTY
21844: ST_TO_ADDR
// if campaign_id = 1 then
21845: LD_OWVAR 69
21849: PUSH
21850: LD_INT 1
21852: EQUAL
21853: IFFALSE 25019
// begin case mission_number of 1 :
21855: LD_OWVAR 70
21859: PUSH
21860: LD_INT 1
21862: DOUBLE
21863: EQUAL
21864: IFTRUE 21868
21866: GO 21944
21868: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21869: LD_ADDR_VAR 0 2
21873: PUSH
21874: LD_INT 2
21876: PUSH
21877: LD_INT 4
21879: PUSH
21880: LD_INT 11
21882: PUSH
21883: LD_INT 12
21885: PUSH
21886: LD_INT 15
21888: PUSH
21889: LD_INT 16
21891: PUSH
21892: LD_INT 22
21894: PUSH
21895: LD_INT 23
21897: PUSH
21898: LD_INT 26
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 101
21914: PUSH
21915: LD_INT 102
21917: PUSH
21918: LD_INT 106
21920: PUSH
21921: LD_INT 116
21923: PUSH
21924: LD_INT 117
21926: PUSH
21927: LD_INT 118
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: ST_TO_ADDR
21942: GO 25017
21944: LD_INT 2
21946: DOUBLE
21947: EQUAL
21948: IFTRUE 21952
21950: GO 22036
21952: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21953: LD_ADDR_VAR 0 2
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: LD_INT 4
21963: PUSH
21964: LD_INT 11
21966: PUSH
21967: LD_INT 12
21969: PUSH
21970: LD_INT 15
21972: PUSH
21973: LD_INT 16
21975: PUSH
21976: LD_INT 22
21978: PUSH
21979: LD_INT 23
21981: PUSH
21982: LD_INT 26
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 101
21998: PUSH
21999: LD_INT 102
22001: PUSH
22002: LD_INT 105
22004: PUSH
22005: LD_INT 106
22007: PUSH
22008: LD_INT 108
22010: PUSH
22011: LD_INT 116
22013: PUSH
22014: LD_INT 117
22016: PUSH
22017: LD_INT 118
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: ST_TO_ADDR
22034: GO 25017
22036: LD_INT 3
22038: DOUBLE
22039: EQUAL
22040: IFTRUE 22044
22042: GO 22132
22044: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22045: LD_ADDR_VAR 0 2
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 4
22055: PUSH
22056: LD_INT 5
22058: PUSH
22059: LD_INT 11
22061: PUSH
22062: LD_INT 12
22064: PUSH
22065: LD_INT 15
22067: PUSH
22068: LD_INT 16
22070: PUSH
22071: LD_INT 22
22073: PUSH
22074: LD_INT 26
22076: PUSH
22077: LD_INT 36
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 101
22094: PUSH
22095: LD_INT 102
22097: PUSH
22098: LD_INT 105
22100: PUSH
22101: LD_INT 106
22103: PUSH
22104: LD_INT 108
22106: PUSH
22107: LD_INT 116
22109: PUSH
22110: LD_INT 117
22112: PUSH
22113: LD_INT 118
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: ST_TO_ADDR
22130: GO 25017
22132: LD_INT 4
22134: DOUBLE
22135: EQUAL
22136: IFTRUE 22140
22138: GO 22236
22140: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22141: LD_ADDR_VAR 0 2
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: LD_INT 4
22151: PUSH
22152: LD_INT 5
22154: PUSH
22155: LD_INT 8
22157: PUSH
22158: LD_INT 11
22160: PUSH
22161: LD_INT 12
22163: PUSH
22164: LD_INT 15
22166: PUSH
22167: LD_INT 16
22169: PUSH
22170: LD_INT 22
22172: PUSH
22173: LD_INT 23
22175: PUSH
22176: LD_INT 26
22178: PUSH
22179: LD_INT 36
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 101
22198: PUSH
22199: LD_INT 102
22201: PUSH
22202: LD_INT 105
22204: PUSH
22205: LD_INT 106
22207: PUSH
22208: LD_INT 108
22210: PUSH
22211: LD_INT 116
22213: PUSH
22214: LD_INT 117
22216: PUSH
22217: LD_INT 118
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: ST_TO_ADDR
22234: GO 25017
22236: LD_INT 5
22238: DOUBLE
22239: EQUAL
22240: IFTRUE 22244
22242: GO 22356
22244: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22245: LD_ADDR_VAR 0 2
22249: PUSH
22250: LD_INT 2
22252: PUSH
22253: LD_INT 4
22255: PUSH
22256: LD_INT 5
22258: PUSH
22259: LD_INT 6
22261: PUSH
22262: LD_INT 8
22264: PUSH
22265: LD_INT 11
22267: PUSH
22268: LD_INT 12
22270: PUSH
22271: LD_INT 15
22273: PUSH
22274: LD_INT 16
22276: PUSH
22277: LD_INT 22
22279: PUSH
22280: LD_INT 23
22282: PUSH
22283: LD_INT 25
22285: PUSH
22286: LD_INT 26
22288: PUSH
22289: LD_INT 36
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 101
22310: PUSH
22311: LD_INT 102
22313: PUSH
22314: LD_INT 105
22316: PUSH
22317: LD_INT 106
22319: PUSH
22320: LD_INT 108
22322: PUSH
22323: LD_INT 109
22325: PUSH
22326: LD_INT 112
22328: PUSH
22329: LD_INT 116
22331: PUSH
22332: LD_INT 117
22334: PUSH
22335: LD_INT 118
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: ST_TO_ADDR
22354: GO 25017
22356: LD_INT 6
22358: DOUBLE
22359: EQUAL
22360: IFTRUE 22364
22362: GO 22496
22364: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22365: LD_ADDR_VAR 0 2
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 4
22375: PUSH
22376: LD_INT 5
22378: PUSH
22379: LD_INT 6
22381: PUSH
22382: LD_INT 8
22384: PUSH
22385: LD_INT 11
22387: PUSH
22388: LD_INT 12
22390: PUSH
22391: LD_INT 15
22393: PUSH
22394: LD_INT 16
22396: PUSH
22397: LD_INT 20
22399: PUSH
22400: LD_INT 21
22402: PUSH
22403: LD_INT 22
22405: PUSH
22406: LD_INT 23
22408: PUSH
22409: LD_INT 25
22411: PUSH
22412: LD_INT 26
22414: PUSH
22415: LD_INT 30
22417: PUSH
22418: LD_INT 31
22420: PUSH
22421: LD_INT 32
22423: PUSH
22424: LD_INT 36
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 101
22450: PUSH
22451: LD_INT 102
22453: PUSH
22454: LD_INT 105
22456: PUSH
22457: LD_INT 106
22459: PUSH
22460: LD_INT 108
22462: PUSH
22463: LD_INT 109
22465: PUSH
22466: LD_INT 112
22468: PUSH
22469: LD_INT 116
22471: PUSH
22472: LD_INT 117
22474: PUSH
22475: LD_INT 118
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: ST_TO_ADDR
22494: GO 25017
22496: LD_INT 7
22498: DOUBLE
22499: EQUAL
22500: IFTRUE 22504
22502: GO 22616
22504: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22505: LD_ADDR_VAR 0 2
22509: PUSH
22510: LD_INT 2
22512: PUSH
22513: LD_INT 4
22515: PUSH
22516: LD_INT 5
22518: PUSH
22519: LD_INT 7
22521: PUSH
22522: LD_INT 11
22524: PUSH
22525: LD_INT 12
22527: PUSH
22528: LD_INT 15
22530: PUSH
22531: LD_INT 16
22533: PUSH
22534: LD_INT 20
22536: PUSH
22537: LD_INT 21
22539: PUSH
22540: LD_INT 22
22542: PUSH
22543: LD_INT 23
22545: PUSH
22546: LD_INT 25
22548: PUSH
22549: LD_INT 26
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 101
22570: PUSH
22571: LD_INT 102
22573: PUSH
22574: LD_INT 103
22576: PUSH
22577: LD_INT 105
22579: PUSH
22580: LD_INT 106
22582: PUSH
22583: LD_INT 108
22585: PUSH
22586: LD_INT 112
22588: PUSH
22589: LD_INT 116
22591: PUSH
22592: LD_INT 117
22594: PUSH
22595: LD_INT 118
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: ST_TO_ADDR
22614: GO 25017
22616: LD_INT 8
22618: DOUBLE
22619: EQUAL
22620: IFTRUE 22624
22622: GO 22764
22624: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22625: LD_ADDR_VAR 0 2
22629: PUSH
22630: LD_INT 2
22632: PUSH
22633: LD_INT 4
22635: PUSH
22636: LD_INT 5
22638: PUSH
22639: LD_INT 6
22641: PUSH
22642: LD_INT 7
22644: PUSH
22645: LD_INT 8
22647: PUSH
22648: LD_INT 11
22650: PUSH
22651: LD_INT 12
22653: PUSH
22654: LD_INT 15
22656: PUSH
22657: LD_INT 16
22659: PUSH
22660: LD_INT 20
22662: PUSH
22663: LD_INT 21
22665: PUSH
22666: LD_INT 22
22668: PUSH
22669: LD_INT 23
22671: PUSH
22672: LD_INT 25
22674: PUSH
22675: LD_INT 26
22677: PUSH
22678: LD_INT 30
22680: PUSH
22681: LD_INT 31
22683: PUSH
22684: LD_INT 32
22686: PUSH
22687: LD_INT 36
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 101
22714: PUSH
22715: LD_INT 102
22717: PUSH
22718: LD_INT 103
22720: PUSH
22721: LD_INT 105
22723: PUSH
22724: LD_INT 106
22726: PUSH
22727: LD_INT 108
22729: PUSH
22730: LD_INT 109
22732: PUSH
22733: LD_INT 112
22735: PUSH
22736: LD_INT 116
22738: PUSH
22739: LD_INT 117
22741: PUSH
22742: LD_INT 118
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: ST_TO_ADDR
22762: GO 25017
22764: LD_INT 9
22766: DOUBLE
22767: EQUAL
22768: IFTRUE 22772
22770: GO 22920
22772: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22773: LD_ADDR_VAR 0 2
22777: PUSH
22778: LD_INT 2
22780: PUSH
22781: LD_INT 4
22783: PUSH
22784: LD_INT 5
22786: PUSH
22787: LD_INT 6
22789: PUSH
22790: LD_INT 7
22792: PUSH
22793: LD_INT 8
22795: PUSH
22796: LD_INT 11
22798: PUSH
22799: LD_INT 12
22801: PUSH
22802: LD_INT 15
22804: PUSH
22805: LD_INT 16
22807: PUSH
22808: LD_INT 20
22810: PUSH
22811: LD_INT 21
22813: PUSH
22814: LD_INT 22
22816: PUSH
22817: LD_INT 23
22819: PUSH
22820: LD_INT 25
22822: PUSH
22823: LD_INT 26
22825: PUSH
22826: LD_INT 28
22828: PUSH
22829: LD_INT 30
22831: PUSH
22832: LD_INT 31
22834: PUSH
22835: LD_INT 32
22837: PUSH
22838: LD_INT 36
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 101
22866: PUSH
22867: LD_INT 102
22869: PUSH
22870: LD_INT 103
22872: PUSH
22873: LD_INT 105
22875: PUSH
22876: LD_INT 106
22878: PUSH
22879: LD_INT 108
22881: PUSH
22882: LD_INT 109
22884: PUSH
22885: LD_INT 112
22887: PUSH
22888: LD_INT 114
22890: PUSH
22891: LD_INT 116
22893: PUSH
22894: LD_INT 117
22896: PUSH
22897: LD_INT 118
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: ST_TO_ADDR
22918: GO 25017
22920: LD_INT 10
22922: DOUBLE
22923: EQUAL
22924: IFTRUE 22928
22926: GO 23124
22928: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22929: LD_ADDR_VAR 0 2
22933: PUSH
22934: LD_INT 2
22936: PUSH
22937: LD_INT 4
22939: PUSH
22940: LD_INT 5
22942: PUSH
22943: LD_INT 6
22945: PUSH
22946: LD_INT 7
22948: PUSH
22949: LD_INT 8
22951: PUSH
22952: LD_INT 9
22954: PUSH
22955: LD_INT 10
22957: PUSH
22958: LD_INT 11
22960: PUSH
22961: LD_INT 12
22963: PUSH
22964: LD_INT 13
22966: PUSH
22967: LD_INT 14
22969: PUSH
22970: LD_INT 15
22972: PUSH
22973: LD_INT 16
22975: PUSH
22976: LD_INT 17
22978: PUSH
22979: LD_INT 18
22981: PUSH
22982: LD_INT 19
22984: PUSH
22985: LD_INT 20
22987: PUSH
22988: LD_INT 21
22990: PUSH
22991: LD_INT 22
22993: PUSH
22994: LD_INT 23
22996: PUSH
22997: LD_INT 24
22999: PUSH
23000: LD_INT 25
23002: PUSH
23003: LD_INT 26
23005: PUSH
23006: LD_INT 28
23008: PUSH
23009: LD_INT 30
23011: PUSH
23012: LD_INT 31
23014: PUSH
23015: LD_INT 32
23017: PUSH
23018: LD_INT 36
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 101
23054: PUSH
23055: LD_INT 102
23057: PUSH
23058: LD_INT 103
23060: PUSH
23061: LD_INT 104
23063: PUSH
23064: LD_INT 105
23066: PUSH
23067: LD_INT 106
23069: PUSH
23070: LD_INT 107
23072: PUSH
23073: LD_INT 108
23075: PUSH
23076: LD_INT 109
23078: PUSH
23079: LD_INT 110
23081: PUSH
23082: LD_INT 111
23084: PUSH
23085: LD_INT 112
23087: PUSH
23088: LD_INT 114
23090: PUSH
23091: LD_INT 116
23093: PUSH
23094: LD_INT 117
23096: PUSH
23097: LD_INT 118
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: ST_TO_ADDR
23122: GO 25017
23124: LD_INT 11
23126: DOUBLE
23127: EQUAL
23128: IFTRUE 23132
23130: GO 23336
23132: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23133: LD_ADDR_VAR 0 2
23137: PUSH
23138: LD_INT 2
23140: PUSH
23141: LD_INT 3
23143: PUSH
23144: LD_INT 4
23146: PUSH
23147: LD_INT 5
23149: PUSH
23150: LD_INT 6
23152: PUSH
23153: LD_INT 7
23155: PUSH
23156: LD_INT 8
23158: PUSH
23159: LD_INT 9
23161: PUSH
23162: LD_INT 10
23164: PUSH
23165: LD_INT 11
23167: PUSH
23168: LD_INT 12
23170: PUSH
23171: LD_INT 13
23173: PUSH
23174: LD_INT 14
23176: PUSH
23177: LD_INT 15
23179: PUSH
23180: LD_INT 16
23182: PUSH
23183: LD_INT 17
23185: PUSH
23186: LD_INT 18
23188: PUSH
23189: LD_INT 19
23191: PUSH
23192: LD_INT 20
23194: PUSH
23195: LD_INT 21
23197: PUSH
23198: LD_INT 22
23200: PUSH
23201: LD_INT 23
23203: PUSH
23204: LD_INT 24
23206: PUSH
23207: LD_INT 25
23209: PUSH
23210: LD_INT 26
23212: PUSH
23213: LD_INT 28
23215: PUSH
23216: LD_INT 30
23218: PUSH
23219: LD_INT 31
23221: PUSH
23222: LD_INT 32
23224: PUSH
23225: LD_INT 34
23227: PUSH
23228: LD_INT 36
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 101
23266: PUSH
23267: LD_INT 102
23269: PUSH
23270: LD_INT 103
23272: PUSH
23273: LD_INT 104
23275: PUSH
23276: LD_INT 105
23278: PUSH
23279: LD_INT 106
23281: PUSH
23282: LD_INT 107
23284: PUSH
23285: LD_INT 108
23287: PUSH
23288: LD_INT 109
23290: PUSH
23291: LD_INT 110
23293: PUSH
23294: LD_INT 111
23296: PUSH
23297: LD_INT 112
23299: PUSH
23300: LD_INT 114
23302: PUSH
23303: LD_INT 116
23305: PUSH
23306: LD_INT 117
23308: PUSH
23309: LD_INT 118
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: ST_TO_ADDR
23334: GO 25017
23336: LD_INT 12
23338: DOUBLE
23339: EQUAL
23340: IFTRUE 23344
23342: GO 23564
23344: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23345: LD_ADDR_VAR 0 2
23349: PUSH
23350: LD_INT 1
23352: PUSH
23353: LD_INT 2
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: LD_INT 4
23361: PUSH
23362: LD_INT 5
23364: PUSH
23365: LD_INT 6
23367: PUSH
23368: LD_INT 7
23370: PUSH
23371: LD_INT 8
23373: PUSH
23374: LD_INT 9
23376: PUSH
23377: LD_INT 10
23379: PUSH
23380: LD_INT 11
23382: PUSH
23383: LD_INT 12
23385: PUSH
23386: LD_INT 13
23388: PUSH
23389: LD_INT 14
23391: PUSH
23392: LD_INT 15
23394: PUSH
23395: LD_INT 16
23397: PUSH
23398: LD_INT 17
23400: PUSH
23401: LD_INT 18
23403: PUSH
23404: LD_INT 19
23406: PUSH
23407: LD_INT 20
23409: PUSH
23410: LD_INT 21
23412: PUSH
23413: LD_INT 22
23415: PUSH
23416: LD_INT 23
23418: PUSH
23419: LD_INT 24
23421: PUSH
23422: LD_INT 25
23424: PUSH
23425: LD_INT 26
23427: PUSH
23428: LD_INT 27
23430: PUSH
23431: LD_INT 28
23433: PUSH
23434: LD_INT 30
23436: PUSH
23437: LD_INT 31
23439: PUSH
23440: LD_INT 32
23442: PUSH
23443: LD_INT 33
23445: PUSH
23446: LD_INT 34
23448: PUSH
23449: LD_INT 36
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 101
23490: PUSH
23491: LD_INT 102
23493: PUSH
23494: LD_INT 103
23496: PUSH
23497: LD_INT 104
23499: PUSH
23500: LD_INT 105
23502: PUSH
23503: LD_INT 106
23505: PUSH
23506: LD_INT 107
23508: PUSH
23509: LD_INT 108
23511: PUSH
23512: LD_INT 109
23514: PUSH
23515: LD_INT 110
23517: PUSH
23518: LD_INT 111
23520: PUSH
23521: LD_INT 112
23523: PUSH
23524: LD_INT 113
23526: PUSH
23527: LD_INT 114
23529: PUSH
23530: LD_INT 116
23532: PUSH
23533: LD_INT 117
23535: PUSH
23536: LD_INT 118
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: ST_TO_ADDR
23562: GO 25017
23564: LD_INT 13
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 23780
23572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23573: LD_ADDR_VAR 0 2
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: LD_INT 3
23586: PUSH
23587: LD_INT 4
23589: PUSH
23590: LD_INT 5
23592: PUSH
23593: LD_INT 8
23595: PUSH
23596: LD_INT 9
23598: PUSH
23599: LD_INT 10
23601: PUSH
23602: LD_INT 11
23604: PUSH
23605: LD_INT 12
23607: PUSH
23608: LD_INT 14
23610: PUSH
23611: LD_INT 15
23613: PUSH
23614: LD_INT 16
23616: PUSH
23617: LD_INT 17
23619: PUSH
23620: LD_INT 18
23622: PUSH
23623: LD_INT 19
23625: PUSH
23626: LD_INT 20
23628: PUSH
23629: LD_INT 21
23631: PUSH
23632: LD_INT 22
23634: PUSH
23635: LD_INT 23
23637: PUSH
23638: LD_INT 24
23640: PUSH
23641: LD_INT 25
23643: PUSH
23644: LD_INT 26
23646: PUSH
23647: LD_INT 27
23649: PUSH
23650: LD_INT 28
23652: PUSH
23653: LD_INT 30
23655: PUSH
23656: LD_INT 31
23658: PUSH
23659: LD_INT 32
23661: PUSH
23662: LD_INT 33
23664: PUSH
23665: LD_INT 34
23667: PUSH
23668: LD_INT 36
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 101
23706: PUSH
23707: LD_INT 102
23709: PUSH
23710: LD_INT 103
23712: PUSH
23713: LD_INT 104
23715: PUSH
23716: LD_INT 105
23718: PUSH
23719: LD_INT 106
23721: PUSH
23722: LD_INT 107
23724: PUSH
23725: LD_INT 108
23727: PUSH
23728: LD_INT 109
23730: PUSH
23731: LD_INT 110
23733: PUSH
23734: LD_INT 111
23736: PUSH
23737: LD_INT 112
23739: PUSH
23740: LD_INT 113
23742: PUSH
23743: LD_INT 114
23745: PUSH
23746: LD_INT 116
23748: PUSH
23749: LD_INT 117
23751: PUSH
23752: LD_INT 118
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: ST_TO_ADDR
23778: GO 25017
23780: LD_INT 14
23782: DOUBLE
23783: EQUAL
23784: IFTRUE 23788
23786: GO 24012
23788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23789: LD_ADDR_VAR 0 2
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: LD_INT 2
23799: PUSH
23800: LD_INT 3
23802: PUSH
23803: LD_INT 4
23805: PUSH
23806: LD_INT 5
23808: PUSH
23809: LD_INT 6
23811: PUSH
23812: LD_INT 7
23814: PUSH
23815: LD_INT 8
23817: PUSH
23818: LD_INT 9
23820: PUSH
23821: LD_INT 10
23823: PUSH
23824: LD_INT 11
23826: PUSH
23827: LD_INT 12
23829: PUSH
23830: LD_INT 13
23832: PUSH
23833: LD_INT 14
23835: PUSH
23836: LD_INT 15
23838: PUSH
23839: LD_INT 16
23841: PUSH
23842: LD_INT 17
23844: PUSH
23845: LD_INT 18
23847: PUSH
23848: LD_INT 19
23850: PUSH
23851: LD_INT 20
23853: PUSH
23854: LD_INT 21
23856: PUSH
23857: LD_INT 22
23859: PUSH
23860: LD_INT 23
23862: PUSH
23863: LD_INT 24
23865: PUSH
23866: LD_INT 25
23868: PUSH
23869: LD_INT 26
23871: PUSH
23872: LD_INT 27
23874: PUSH
23875: LD_INT 28
23877: PUSH
23878: LD_INT 29
23880: PUSH
23881: LD_INT 30
23883: PUSH
23884: LD_INT 31
23886: PUSH
23887: LD_INT 32
23889: PUSH
23890: LD_INT 33
23892: PUSH
23893: LD_INT 34
23895: PUSH
23896: LD_INT 36
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 101
23938: PUSH
23939: LD_INT 102
23941: PUSH
23942: LD_INT 103
23944: PUSH
23945: LD_INT 104
23947: PUSH
23948: LD_INT 105
23950: PUSH
23951: LD_INT 106
23953: PUSH
23954: LD_INT 107
23956: PUSH
23957: LD_INT 108
23959: PUSH
23960: LD_INT 109
23962: PUSH
23963: LD_INT 110
23965: PUSH
23966: LD_INT 111
23968: PUSH
23969: LD_INT 112
23971: PUSH
23972: LD_INT 113
23974: PUSH
23975: LD_INT 114
23977: PUSH
23978: LD_INT 116
23980: PUSH
23981: LD_INT 117
23983: PUSH
23984: LD_INT 118
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: ST_TO_ADDR
24010: GO 25017
24012: LD_INT 15
24014: DOUBLE
24015: EQUAL
24016: IFTRUE 24020
24018: GO 24244
24020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24021: LD_ADDR_VAR 0 2
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: LD_INT 2
24031: PUSH
24032: LD_INT 3
24034: PUSH
24035: LD_INT 4
24037: PUSH
24038: LD_INT 5
24040: PUSH
24041: LD_INT 6
24043: PUSH
24044: LD_INT 7
24046: PUSH
24047: LD_INT 8
24049: PUSH
24050: LD_INT 9
24052: PUSH
24053: LD_INT 10
24055: PUSH
24056: LD_INT 11
24058: PUSH
24059: LD_INT 12
24061: PUSH
24062: LD_INT 13
24064: PUSH
24065: LD_INT 14
24067: PUSH
24068: LD_INT 15
24070: PUSH
24071: LD_INT 16
24073: PUSH
24074: LD_INT 17
24076: PUSH
24077: LD_INT 18
24079: PUSH
24080: LD_INT 19
24082: PUSH
24083: LD_INT 20
24085: PUSH
24086: LD_INT 21
24088: PUSH
24089: LD_INT 22
24091: PUSH
24092: LD_INT 23
24094: PUSH
24095: LD_INT 24
24097: PUSH
24098: LD_INT 25
24100: PUSH
24101: LD_INT 26
24103: PUSH
24104: LD_INT 27
24106: PUSH
24107: LD_INT 28
24109: PUSH
24110: LD_INT 29
24112: PUSH
24113: LD_INT 30
24115: PUSH
24116: LD_INT 31
24118: PUSH
24119: LD_INT 32
24121: PUSH
24122: LD_INT 33
24124: PUSH
24125: LD_INT 34
24127: PUSH
24128: LD_INT 36
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 101
24170: PUSH
24171: LD_INT 102
24173: PUSH
24174: LD_INT 103
24176: PUSH
24177: LD_INT 104
24179: PUSH
24180: LD_INT 105
24182: PUSH
24183: LD_INT 106
24185: PUSH
24186: LD_INT 107
24188: PUSH
24189: LD_INT 108
24191: PUSH
24192: LD_INT 109
24194: PUSH
24195: LD_INT 110
24197: PUSH
24198: LD_INT 111
24200: PUSH
24201: LD_INT 112
24203: PUSH
24204: LD_INT 113
24206: PUSH
24207: LD_INT 114
24209: PUSH
24210: LD_INT 116
24212: PUSH
24213: LD_INT 117
24215: PUSH
24216: LD_INT 118
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: ST_TO_ADDR
24242: GO 25017
24244: LD_INT 16
24246: DOUBLE
24247: EQUAL
24248: IFTRUE 24252
24250: GO 24388
24252: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24253: LD_ADDR_VAR 0 2
24257: PUSH
24258: LD_INT 2
24260: PUSH
24261: LD_INT 4
24263: PUSH
24264: LD_INT 5
24266: PUSH
24267: LD_INT 7
24269: PUSH
24270: LD_INT 11
24272: PUSH
24273: LD_INT 12
24275: PUSH
24276: LD_INT 15
24278: PUSH
24279: LD_INT 16
24281: PUSH
24282: LD_INT 20
24284: PUSH
24285: LD_INT 21
24287: PUSH
24288: LD_INT 22
24290: PUSH
24291: LD_INT 23
24293: PUSH
24294: LD_INT 25
24296: PUSH
24297: LD_INT 26
24299: PUSH
24300: LD_INT 30
24302: PUSH
24303: LD_INT 31
24305: PUSH
24306: LD_INT 32
24308: PUSH
24309: LD_INT 33
24311: PUSH
24312: LD_INT 34
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 101
24338: PUSH
24339: LD_INT 102
24341: PUSH
24342: LD_INT 103
24344: PUSH
24345: LD_INT 106
24347: PUSH
24348: LD_INT 108
24350: PUSH
24351: LD_INT 112
24353: PUSH
24354: LD_INT 113
24356: PUSH
24357: LD_INT 114
24359: PUSH
24360: LD_INT 116
24362: PUSH
24363: LD_INT 117
24365: PUSH
24366: LD_INT 118
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: ST_TO_ADDR
24386: GO 25017
24388: LD_INT 17
24390: DOUBLE
24391: EQUAL
24392: IFTRUE 24396
24394: GO 24620
24396: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24397: LD_ADDR_VAR 0 2
24401: PUSH
24402: LD_INT 1
24404: PUSH
24405: LD_INT 2
24407: PUSH
24408: LD_INT 3
24410: PUSH
24411: LD_INT 4
24413: PUSH
24414: LD_INT 5
24416: PUSH
24417: LD_INT 6
24419: PUSH
24420: LD_INT 7
24422: PUSH
24423: LD_INT 8
24425: PUSH
24426: LD_INT 9
24428: PUSH
24429: LD_INT 10
24431: PUSH
24432: LD_INT 11
24434: PUSH
24435: LD_INT 12
24437: PUSH
24438: LD_INT 13
24440: PUSH
24441: LD_INT 14
24443: PUSH
24444: LD_INT 15
24446: PUSH
24447: LD_INT 16
24449: PUSH
24450: LD_INT 17
24452: PUSH
24453: LD_INT 18
24455: PUSH
24456: LD_INT 19
24458: PUSH
24459: LD_INT 20
24461: PUSH
24462: LD_INT 21
24464: PUSH
24465: LD_INT 22
24467: PUSH
24468: LD_INT 23
24470: PUSH
24471: LD_INT 24
24473: PUSH
24474: LD_INT 25
24476: PUSH
24477: LD_INT 26
24479: PUSH
24480: LD_INT 27
24482: PUSH
24483: LD_INT 28
24485: PUSH
24486: LD_INT 29
24488: PUSH
24489: LD_INT 30
24491: PUSH
24492: LD_INT 31
24494: PUSH
24495: LD_INT 32
24497: PUSH
24498: LD_INT 33
24500: PUSH
24501: LD_INT 34
24503: PUSH
24504: LD_INT 36
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 101
24546: PUSH
24547: LD_INT 102
24549: PUSH
24550: LD_INT 103
24552: PUSH
24553: LD_INT 104
24555: PUSH
24556: LD_INT 105
24558: PUSH
24559: LD_INT 106
24561: PUSH
24562: LD_INT 107
24564: PUSH
24565: LD_INT 108
24567: PUSH
24568: LD_INT 109
24570: PUSH
24571: LD_INT 110
24573: PUSH
24574: LD_INT 111
24576: PUSH
24577: LD_INT 112
24579: PUSH
24580: LD_INT 113
24582: PUSH
24583: LD_INT 114
24585: PUSH
24586: LD_INT 116
24588: PUSH
24589: LD_INT 117
24591: PUSH
24592: LD_INT 118
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: ST_TO_ADDR
24618: GO 25017
24620: LD_INT 18
24622: DOUBLE
24623: EQUAL
24624: IFTRUE 24628
24626: GO 24776
24628: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24629: LD_ADDR_VAR 0 2
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: LD_INT 4
24639: PUSH
24640: LD_INT 5
24642: PUSH
24643: LD_INT 7
24645: PUSH
24646: LD_INT 11
24648: PUSH
24649: LD_INT 12
24651: PUSH
24652: LD_INT 15
24654: PUSH
24655: LD_INT 16
24657: PUSH
24658: LD_INT 20
24660: PUSH
24661: LD_INT 21
24663: PUSH
24664: LD_INT 22
24666: PUSH
24667: LD_INT 23
24669: PUSH
24670: LD_INT 25
24672: PUSH
24673: LD_INT 26
24675: PUSH
24676: LD_INT 30
24678: PUSH
24679: LD_INT 31
24681: PUSH
24682: LD_INT 32
24684: PUSH
24685: LD_INT 33
24687: PUSH
24688: LD_INT 34
24690: PUSH
24691: LD_INT 35
24693: PUSH
24694: LD_INT 36
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 101
24722: PUSH
24723: LD_INT 102
24725: PUSH
24726: LD_INT 103
24728: PUSH
24729: LD_INT 106
24731: PUSH
24732: LD_INT 108
24734: PUSH
24735: LD_INT 112
24737: PUSH
24738: LD_INT 113
24740: PUSH
24741: LD_INT 114
24743: PUSH
24744: LD_INT 115
24746: PUSH
24747: LD_INT 116
24749: PUSH
24750: LD_INT 117
24752: PUSH
24753: LD_INT 118
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: ST_TO_ADDR
24774: GO 25017
24776: LD_INT 19
24778: DOUBLE
24779: EQUAL
24780: IFTRUE 24784
24782: GO 25016
24784: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24785: LD_ADDR_VAR 0 2
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: LD_INT 2
24795: PUSH
24796: LD_INT 3
24798: PUSH
24799: LD_INT 4
24801: PUSH
24802: LD_INT 5
24804: PUSH
24805: LD_INT 6
24807: PUSH
24808: LD_INT 7
24810: PUSH
24811: LD_INT 8
24813: PUSH
24814: LD_INT 9
24816: PUSH
24817: LD_INT 10
24819: PUSH
24820: LD_INT 11
24822: PUSH
24823: LD_INT 12
24825: PUSH
24826: LD_INT 13
24828: PUSH
24829: LD_INT 14
24831: PUSH
24832: LD_INT 15
24834: PUSH
24835: LD_INT 16
24837: PUSH
24838: LD_INT 17
24840: PUSH
24841: LD_INT 18
24843: PUSH
24844: LD_INT 19
24846: PUSH
24847: LD_INT 20
24849: PUSH
24850: LD_INT 21
24852: PUSH
24853: LD_INT 22
24855: PUSH
24856: LD_INT 23
24858: PUSH
24859: LD_INT 24
24861: PUSH
24862: LD_INT 25
24864: PUSH
24865: LD_INT 26
24867: PUSH
24868: LD_INT 27
24870: PUSH
24871: LD_INT 28
24873: PUSH
24874: LD_INT 29
24876: PUSH
24877: LD_INT 30
24879: PUSH
24880: LD_INT 31
24882: PUSH
24883: LD_INT 32
24885: PUSH
24886: LD_INT 33
24888: PUSH
24889: LD_INT 34
24891: PUSH
24892: LD_INT 35
24894: PUSH
24895: LD_INT 36
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 101
24938: PUSH
24939: LD_INT 102
24941: PUSH
24942: LD_INT 103
24944: PUSH
24945: LD_INT 104
24947: PUSH
24948: LD_INT 105
24950: PUSH
24951: LD_INT 106
24953: PUSH
24954: LD_INT 107
24956: PUSH
24957: LD_INT 108
24959: PUSH
24960: LD_INT 109
24962: PUSH
24963: LD_INT 110
24965: PUSH
24966: LD_INT 111
24968: PUSH
24969: LD_INT 112
24971: PUSH
24972: LD_INT 113
24974: PUSH
24975: LD_INT 114
24977: PUSH
24978: LD_INT 115
24980: PUSH
24981: LD_INT 116
24983: PUSH
24984: LD_INT 117
24986: PUSH
24987: LD_INT 118
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: ST_TO_ADDR
25014: GO 25017
25016: POP
// end else
25017: GO 25248
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25019: LD_ADDR_VAR 0 2
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: LD_INT 2
25029: PUSH
25030: LD_INT 3
25032: PUSH
25033: LD_INT 4
25035: PUSH
25036: LD_INT 5
25038: PUSH
25039: LD_INT 6
25041: PUSH
25042: LD_INT 7
25044: PUSH
25045: LD_INT 8
25047: PUSH
25048: LD_INT 9
25050: PUSH
25051: LD_INT 10
25053: PUSH
25054: LD_INT 11
25056: PUSH
25057: LD_INT 12
25059: PUSH
25060: LD_INT 13
25062: PUSH
25063: LD_INT 14
25065: PUSH
25066: LD_INT 15
25068: PUSH
25069: LD_INT 16
25071: PUSH
25072: LD_INT 17
25074: PUSH
25075: LD_INT 18
25077: PUSH
25078: LD_INT 19
25080: PUSH
25081: LD_INT 20
25083: PUSH
25084: LD_INT 21
25086: PUSH
25087: LD_INT 22
25089: PUSH
25090: LD_INT 23
25092: PUSH
25093: LD_INT 24
25095: PUSH
25096: LD_INT 25
25098: PUSH
25099: LD_INT 26
25101: PUSH
25102: LD_INT 27
25104: PUSH
25105: LD_INT 28
25107: PUSH
25108: LD_INT 29
25110: PUSH
25111: LD_INT 30
25113: PUSH
25114: LD_INT 31
25116: PUSH
25117: LD_INT 32
25119: PUSH
25120: LD_INT 33
25122: PUSH
25123: LD_INT 34
25125: PUSH
25126: LD_INT 35
25128: PUSH
25129: LD_INT 36
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 101
25172: PUSH
25173: LD_INT 102
25175: PUSH
25176: LD_INT 103
25178: PUSH
25179: LD_INT 104
25181: PUSH
25182: LD_INT 105
25184: PUSH
25185: LD_INT 106
25187: PUSH
25188: LD_INT 107
25190: PUSH
25191: LD_INT 108
25193: PUSH
25194: LD_INT 109
25196: PUSH
25197: LD_INT 110
25199: PUSH
25200: LD_INT 111
25202: PUSH
25203: LD_INT 112
25205: PUSH
25206: LD_INT 113
25208: PUSH
25209: LD_INT 114
25211: PUSH
25212: LD_INT 115
25214: PUSH
25215: LD_INT 116
25217: PUSH
25218: LD_INT 117
25220: PUSH
25221: LD_INT 118
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: ST_TO_ADDR
// if result then
25248: LD_VAR 0 2
25252: IFFALSE 26038
// begin normal :=  ;
25254: LD_ADDR_VAR 0 5
25258: PUSH
25259: LD_STRING 
25261: ST_TO_ADDR
// hardcore :=  ;
25262: LD_ADDR_VAR 0 6
25266: PUSH
25267: LD_STRING 
25269: ST_TO_ADDR
// active :=  ;
25270: LD_ADDR_VAR 0 7
25274: PUSH
25275: LD_STRING 
25277: ST_TO_ADDR
// for i = 1 to normalCounter do
25278: LD_ADDR_VAR 0 8
25282: PUSH
25283: DOUBLE
25284: LD_INT 1
25286: DEC
25287: ST_TO_ADDR
25288: LD_EXP 52
25292: PUSH
25293: FOR_TO
25294: IFFALSE 25395
// begin tmp := 0 ;
25296: LD_ADDR_VAR 0 3
25300: PUSH
25301: LD_STRING 0
25303: ST_TO_ADDR
// if result [ 1 ] then
25304: LD_VAR 0 2
25308: PUSH
25309: LD_INT 1
25311: ARRAY
25312: IFFALSE 25377
// if result [ 1 ] [ 1 ] = i then
25314: LD_VAR 0 2
25318: PUSH
25319: LD_INT 1
25321: ARRAY
25322: PUSH
25323: LD_INT 1
25325: ARRAY
25326: PUSH
25327: LD_VAR 0 8
25331: EQUAL
25332: IFFALSE 25377
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25334: LD_ADDR_VAR 0 2
25338: PUSH
25339: LD_VAR 0 2
25343: PPUSH
25344: LD_INT 1
25346: PPUSH
25347: LD_VAR 0 2
25351: PUSH
25352: LD_INT 1
25354: ARRAY
25355: PPUSH
25356: LD_INT 1
25358: PPUSH
25359: CALL_OW 3
25363: PPUSH
25364: CALL_OW 1
25368: ST_TO_ADDR
// tmp := 1 ;
25369: LD_ADDR_VAR 0 3
25373: PUSH
25374: LD_STRING 1
25376: ST_TO_ADDR
// end ; normal := normal & tmp ;
25377: LD_ADDR_VAR 0 5
25381: PUSH
25382: LD_VAR 0 5
25386: PUSH
25387: LD_VAR 0 3
25391: STR
25392: ST_TO_ADDR
// end ;
25393: GO 25293
25395: POP
25396: POP
// for i = 1 to hardcoreCounter do
25397: LD_ADDR_VAR 0 8
25401: PUSH
25402: DOUBLE
25403: LD_INT 1
25405: DEC
25406: ST_TO_ADDR
25407: LD_EXP 53
25411: PUSH
25412: FOR_TO
25413: IFFALSE 25518
// begin tmp := 0 ;
25415: LD_ADDR_VAR 0 3
25419: PUSH
25420: LD_STRING 0
25422: ST_TO_ADDR
// if result [ 2 ] then
25423: LD_VAR 0 2
25427: PUSH
25428: LD_INT 2
25430: ARRAY
25431: IFFALSE 25500
// if result [ 2 ] [ 1 ] = 100 + i then
25433: LD_VAR 0 2
25437: PUSH
25438: LD_INT 2
25440: ARRAY
25441: PUSH
25442: LD_INT 1
25444: ARRAY
25445: PUSH
25446: LD_INT 100
25448: PUSH
25449: LD_VAR 0 8
25453: PLUS
25454: EQUAL
25455: IFFALSE 25500
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25457: LD_ADDR_VAR 0 2
25461: PUSH
25462: LD_VAR 0 2
25466: PPUSH
25467: LD_INT 2
25469: PPUSH
25470: LD_VAR 0 2
25474: PUSH
25475: LD_INT 2
25477: ARRAY
25478: PPUSH
25479: LD_INT 1
25481: PPUSH
25482: CALL_OW 3
25486: PPUSH
25487: CALL_OW 1
25491: ST_TO_ADDR
// tmp := 1 ;
25492: LD_ADDR_VAR 0 3
25496: PUSH
25497: LD_STRING 1
25499: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25500: LD_ADDR_VAR 0 6
25504: PUSH
25505: LD_VAR 0 6
25509: PUSH
25510: LD_VAR 0 3
25514: STR
25515: ST_TO_ADDR
// end ;
25516: GO 25412
25518: POP
25519: POP
// if isGameLoad then
25520: LD_VAR 0 1
25524: IFFALSE 25999
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25526: LD_ADDR_VAR 0 4
25530: PUSH
25531: LD_EXP 56
25535: PUSH
25536: LD_EXP 55
25540: PUSH
25541: LD_EXP 57
25545: PUSH
25546: LD_EXP 54
25550: PUSH
25551: LD_EXP 58
25555: PUSH
25556: LD_EXP 59
25560: PUSH
25561: LD_EXP 60
25565: PUSH
25566: LD_EXP 61
25570: PUSH
25571: LD_EXP 62
25575: PUSH
25576: LD_EXP 63
25580: PUSH
25581: LD_EXP 64
25585: PUSH
25586: LD_EXP 65
25590: PUSH
25591: LD_EXP 66
25595: PUSH
25596: LD_EXP 67
25600: PUSH
25601: LD_EXP 75
25605: PUSH
25606: LD_EXP 76
25610: PUSH
25611: LD_EXP 77
25615: PUSH
25616: LD_EXP 78
25620: PUSH
25621: LD_EXP 80
25625: PUSH
25626: LD_EXP 81
25630: PUSH
25631: LD_EXP 82
25635: PUSH
25636: LD_EXP 85
25640: PUSH
25641: LD_EXP 87
25645: PUSH
25646: LD_EXP 88
25650: PUSH
25651: LD_EXP 89
25655: PUSH
25656: LD_EXP 91
25660: PUSH
25661: LD_EXP 92
25665: PUSH
25666: LD_EXP 95
25670: PUSH
25671: LD_EXP 96
25675: PUSH
25676: LD_EXP 97
25680: PUSH
25681: LD_EXP 98
25685: PUSH
25686: LD_EXP 99
25690: PUSH
25691: LD_EXP 100
25695: PUSH
25696: LD_EXP 101
25700: PUSH
25701: LD_EXP 102
25705: PUSH
25706: LD_EXP 103
25710: PUSH
25711: LD_EXP 68
25715: PUSH
25716: LD_EXP 69
25720: PUSH
25721: LD_EXP 72
25725: PUSH
25726: LD_EXP 73
25730: PUSH
25731: LD_EXP 74
25735: PUSH
25736: LD_EXP 70
25740: PUSH
25741: LD_EXP 71
25745: PUSH
25746: LD_EXP 79
25750: PUSH
25751: LD_EXP 83
25755: PUSH
25756: LD_EXP 84
25760: PUSH
25761: LD_EXP 86
25765: PUSH
25766: LD_EXP 90
25770: PUSH
25771: LD_EXP 93
25775: PUSH
25776: LD_EXP 94
25780: PUSH
25781: LD_EXP 104
25785: PUSH
25786: LD_EXP 105
25790: PUSH
25791: LD_EXP 106
25795: PUSH
25796: LD_EXP 107
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: ST_TO_ADDR
// tmp :=  ;
25857: LD_ADDR_VAR 0 3
25861: PUSH
25862: LD_STRING 
25864: ST_TO_ADDR
// for i = 1 to normalCounter do
25865: LD_ADDR_VAR 0 8
25869: PUSH
25870: DOUBLE
25871: LD_INT 1
25873: DEC
25874: ST_TO_ADDR
25875: LD_EXP 52
25879: PUSH
25880: FOR_TO
25881: IFFALSE 25917
// begin if flags [ i ] then
25883: LD_VAR 0 4
25887: PUSH
25888: LD_VAR 0 8
25892: ARRAY
25893: IFFALSE 25915
// tmp := tmp & i & ; ;
25895: LD_ADDR_VAR 0 3
25899: PUSH
25900: LD_VAR 0 3
25904: PUSH
25905: LD_VAR 0 8
25909: STR
25910: PUSH
25911: LD_STRING ;
25913: STR
25914: ST_TO_ADDR
// end ;
25915: GO 25880
25917: POP
25918: POP
// for i = 1 to hardcoreCounter do
25919: LD_ADDR_VAR 0 8
25923: PUSH
25924: DOUBLE
25925: LD_INT 1
25927: DEC
25928: ST_TO_ADDR
25929: LD_EXP 53
25933: PUSH
25934: FOR_TO
25935: IFFALSE 25981
// begin if flags [ normalCounter + i ] then
25937: LD_VAR 0 4
25941: PUSH
25942: LD_EXP 52
25946: PUSH
25947: LD_VAR 0 8
25951: PLUS
25952: ARRAY
25953: IFFALSE 25979
// tmp := tmp & ( 100 + i ) & ; ;
25955: LD_ADDR_VAR 0 3
25959: PUSH
25960: LD_VAR 0 3
25964: PUSH
25965: LD_INT 100
25967: PUSH
25968: LD_VAR 0 8
25972: PLUS
25973: STR
25974: PUSH
25975: LD_STRING ;
25977: STR
25978: ST_TO_ADDR
// end ;
25979: GO 25934
25981: POP
25982: POP
// if tmp then
25983: LD_VAR 0 3
25987: IFFALSE 25999
// active := tmp ;
25989: LD_ADDR_VAR 0 7
25993: PUSH
25994: LD_VAR 0 3
25998: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25999: LD_STRING getStreamItemsFromMission("
26001: PUSH
26002: LD_VAR 0 5
26006: STR
26007: PUSH
26008: LD_STRING ","
26010: STR
26011: PUSH
26012: LD_VAR 0 6
26016: STR
26017: PUSH
26018: LD_STRING ","
26020: STR
26021: PUSH
26022: LD_VAR 0 7
26026: STR
26027: PUSH
26028: LD_STRING ")
26030: STR
26031: PPUSH
26032: CALL_OW 559
// end else
26036: GO 26045
// ToLua ( getStreamItemsFromMission("","","") ) ;
26038: LD_STRING getStreamItemsFromMission("","","")
26040: PPUSH
26041: CALL_OW 559
// end ;
26045: LD_VAR 0 2
26049: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26050: LD_EXP 51
26054: PUSH
26055: LD_EXP 56
26059: AND
26060: IFFALSE 26184
26062: GO 26064
26064: DISABLE
26065: LD_INT 0
26067: PPUSH
26068: PPUSH
// begin enable ;
26069: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26070: LD_ADDR_VAR 0 2
26074: PUSH
26075: LD_INT 22
26077: PUSH
26078: LD_OWVAR 2
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: LD_INT 34
26092: PUSH
26093: LD_INT 7
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 34
26102: PUSH
26103: LD_INT 45
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 34
26112: PUSH
26113: LD_INT 28
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 34
26122: PUSH
26123: LD_INT 47
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PPUSH
26141: CALL_OW 69
26145: ST_TO_ADDR
// if not tmp then
26146: LD_VAR 0 2
26150: NOT
26151: IFFALSE 26155
// exit ;
26153: GO 26184
// for i in tmp do
26155: LD_ADDR_VAR 0 1
26159: PUSH
26160: LD_VAR 0 2
26164: PUSH
26165: FOR_IN
26166: IFFALSE 26182
// begin SetLives ( i , 0 ) ;
26168: LD_VAR 0 1
26172: PPUSH
26173: LD_INT 0
26175: PPUSH
26176: CALL_OW 234
// end ;
26180: GO 26165
26182: POP
26183: POP
// end ;
26184: PPOPN 2
26186: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26187: LD_EXP 51
26191: PUSH
26192: LD_EXP 57
26196: AND
26197: IFFALSE 26281
26199: GO 26201
26201: DISABLE
26202: LD_INT 0
26204: PPUSH
26205: PPUSH
// begin enable ;
26206: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26207: LD_ADDR_VAR 0 2
26211: PUSH
26212: LD_INT 22
26214: PUSH
26215: LD_OWVAR 2
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 32
26226: PUSH
26227: LD_INT 3
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PPUSH
26238: CALL_OW 69
26242: ST_TO_ADDR
// if not tmp then
26243: LD_VAR 0 2
26247: NOT
26248: IFFALSE 26252
// exit ;
26250: GO 26281
// for i in tmp do
26252: LD_ADDR_VAR 0 1
26256: PUSH
26257: LD_VAR 0 2
26261: PUSH
26262: FOR_IN
26263: IFFALSE 26279
// begin SetLives ( i , 0 ) ;
26265: LD_VAR 0 1
26269: PPUSH
26270: LD_INT 0
26272: PPUSH
26273: CALL_OW 234
// end ;
26277: GO 26262
26279: POP
26280: POP
// end ;
26281: PPOPN 2
26283: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26284: LD_EXP 51
26288: PUSH
26289: LD_EXP 54
26293: AND
26294: IFFALSE 26387
26296: GO 26298
26298: DISABLE
26299: LD_INT 0
26301: PPUSH
// begin enable ;
26302: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26303: LD_ADDR_VAR 0 1
26307: PUSH
26308: LD_INT 22
26310: PUSH
26311: LD_OWVAR 2
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 2
26322: PUSH
26323: LD_INT 25
26325: PUSH
26326: LD_INT 5
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 25
26335: PUSH
26336: LD_INT 9
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 25
26345: PUSH
26346: LD_INT 8
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PPUSH
26363: CALL_OW 69
26367: PUSH
26368: FOR_IN
26369: IFFALSE 26385
// begin SetClass ( i , 1 ) ;
26371: LD_VAR 0 1
26375: PPUSH
26376: LD_INT 1
26378: PPUSH
26379: CALL_OW 336
// end ;
26383: GO 26368
26385: POP
26386: POP
// end ;
26387: PPOPN 1
26389: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26390: LD_EXP 51
26394: PUSH
26395: LD_EXP 55
26399: AND
26400: PUSH
26401: LD_OWVAR 65
26405: PUSH
26406: LD_INT 7
26408: LESS
26409: AND
26410: IFFALSE 26424
26412: GO 26414
26414: DISABLE
// begin enable ;
26415: ENABLE
// game_speed := 7 ;
26416: LD_ADDR_OWVAR 65
26420: PUSH
26421: LD_INT 7
26423: ST_TO_ADDR
// end ;
26424: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26425: LD_EXP 51
26429: PUSH
26430: LD_EXP 58
26434: AND
26435: IFFALSE 26637
26437: GO 26439
26439: DISABLE
26440: LD_INT 0
26442: PPUSH
26443: PPUSH
26444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26445: LD_ADDR_VAR 0 3
26449: PUSH
26450: LD_INT 81
26452: PUSH
26453: LD_OWVAR 2
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 21
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PPUSH
26476: CALL_OW 69
26480: ST_TO_ADDR
// if not tmp then
26481: LD_VAR 0 3
26485: NOT
26486: IFFALSE 26490
// exit ;
26488: GO 26637
// if tmp > 5 then
26490: LD_VAR 0 3
26494: PUSH
26495: LD_INT 5
26497: GREATER
26498: IFFALSE 26510
// k := 5 else
26500: LD_ADDR_VAR 0 2
26504: PUSH
26505: LD_INT 5
26507: ST_TO_ADDR
26508: GO 26520
// k := tmp ;
26510: LD_ADDR_VAR 0 2
26514: PUSH
26515: LD_VAR 0 3
26519: ST_TO_ADDR
// for i := 1 to k do
26520: LD_ADDR_VAR 0 1
26524: PUSH
26525: DOUBLE
26526: LD_INT 1
26528: DEC
26529: ST_TO_ADDR
26530: LD_VAR 0 2
26534: PUSH
26535: FOR_TO
26536: IFFALSE 26635
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26538: LD_VAR 0 3
26542: PUSH
26543: LD_VAR 0 1
26547: ARRAY
26548: PPUSH
26549: LD_VAR 0 1
26553: PUSH
26554: LD_INT 4
26556: MOD
26557: PUSH
26558: LD_INT 1
26560: PLUS
26561: PPUSH
26562: CALL_OW 259
26566: PUSH
26567: LD_INT 10
26569: LESS
26570: IFFALSE 26633
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26572: LD_VAR 0 3
26576: PUSH
26577: LD_VAR 0 1
26581: ARRAY
26582: PPUSH
26583: LD_VAR 0 1
26587: PUSH
26588: LD_INT 4
26590: MOD
26591: PUSH
26592: LD_INT 1
26594: PLUS
26595: PPUSH
26596: LD_VAR 0 3
26600: PUSH
26601: LD_VAR 0 1
26605: ARRAY
26606: PPUSH
26607: LD_VAR 0 1
26611: PUSH
26612: LD_INT 4
26614: MOD
26615: PUSH
26616: LD_INT 1
26618: PLUS
26619: PPUSH
26620: CALL_OW 259
26624: PUSH
26625: LD_INT 1
26627: PLUS
26628: PPUSH
26629: CALL_OW 237
26633: GO 26535
26635: POP
26636: POP
// end ;
26637: PPOPN 3
26639: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26640: LD_EXP 51
26644: PUSH
26645: LD_EXP 59
26649: AND
26650: IFFALSE 26670
26652: GO 26654
26654: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26655: LD_INT 4
26657: PPUSH
26658: LD_OWVAR 2
26662: PPUSH
26663: LD_INT 0
26665: PPUSH
26666: CALL_OW 324
26670: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26671: LD_EXP 51
26675: PUSH
26676: LD_EXP 88
26680: AND
26681: IFFALSE 26701
26683: GO 26685
26685: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26686: LD_INT 19
26688: PPUSH
26689: LD_OWVAR 2
26693: PPUSH
26694: LD_INT 0
26696: PPUSH
26697: CALL_OW 324
26701: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26702: LD_EXP 51
26706: PUSH
26707: LD_EXP 60
26711: AND
26712: IFFALSE 26814
26714: GO 26716
26716: DISABLE
26717: LD_INT 0
26719: PPUSH
26720: PPUSH
// begin enable ;
26721: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26722: LD_ADDR_VAR 0 2
26726: PUSH
26727: LD_INT 22
26729: PUSH
26730: LD_OWVAR 2
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 2
26741: PUSH
26742: LD_INT 34
26744: PUSH
26745: LD_INT 11
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 34
26754: PUSH
26755: LD_INT 30
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: LIST
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PPUSH
26771: CALL_OW 69
26775: ST_TO_ADDR
// if not tmp then
26776: LD_VAR 0 2
26780: NOT
26781: IFFALSE 26785
// exit ;
26783: GO 26814
// for i in tmp do
26785: LD_ADDR_VAR 0 1
26789: PUSH
26790: LD_VAR 0 2
26794: PUSH
26795: FOR_IN
26796: IFFALSE 26812
// begin SetLives ( i , 0 ) ;
26798: LD_VAR 0 1
26802: PPUSH
26803: LD_INT 0
26805: PPUSH
26806: CALL_OW 234
// end ;
26810: GO 26795
26812: POP
26813: POP
// end ;
26814: PPOPN 2
26816: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26817: LD_EXP 51
26821: PUSH
26822: LD_EXP 61
26826: AND
26827: IFFALSE 26847
26829: GO 26831
26831: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26832: LD_INT 32
26834: PPUSH
26835: LD_OWVAR 2
26839: PPUSH
26840: LD_INT 0
26842: PPUSH
26843: CALL_OW 324
26847: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26848: LD_EXP 51
26852: PUSH
26853: LD_EXP 62
26857: AND
26858: IFFALSE 27039
26860: GO 26862
26862: DISABLE
26863: LD_INT 0
26865: PPUSH
26866: PPUSH
26867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26868: LD_ADDR_VAR 0 2
26872: PUSH
26873: LD_INT 22
26875: PUSH
26876: LD_OWVAR 2
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 33
26887: PUSH
26888: LD_INT 3
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PPUSH
26899: CALL_OW 69
26903: ST_TO_ADDR
// if not tmp then
26904: LD_VAR 0 2
26908: NOT
26909: IFFALSE 26913
// exit ;
26911: GO 27039
// side := 0 ;
26913: LD_ADDR_VAR 0 3
26917: PUSH
26918: LD_INT 0
26920: ST_TO_ADDR
// for i := 1 to 8 do
26921: LD_ADDR_VAR 0 1
26925: PUSH
26926: DOUBLE
26927: LD_INT 1
26929: DEC
26930: ST_TO_ADDR
26931: LD_INT 8
26933: PUSH
26934: FOR_TO
26935: IFFALSE 26983
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26937: LD_OWVAR 2
26941: PUSH
26942: LD_VAR 0 1
26946: NONEQUAL
26947: PUSH
26948: LD_OWVAR 2
26952: PPUSH
26953: LD_VAR 0 1
26957: PPUSH
26958: CALL_OW 81
26962: PUSH
26963: LD_INT 2
26965: EQUAL
26966: AND
26967: IFFALSE 26981
// begin side := i ;
26969: LD_ADDR_VAR 0 3
26973: PUSH
26974: LD_VAR 0 1
26978: ST_TO_ADDR
// break ;
26979: GO 26983
// end ;
26981: GO 26934
26983: POP
26984: POP
// if not side then
26985: LD_VAR 0 3
26989: NOT
26990: IFFALSE 26994
// exit ;
26992: GO 27039
// for i := 1 to tmp do
26994: LD_ADDR_VAR 0 1
26998: PUSH
26999: DOUBLE
27000: LD_INT 1
27002: DEC
27003: ST_TO_ADDR
27004: LD_VAR 0 2
27008: PUSH
27009: FOR_TO
27010: IFFALSE 27037
// if Prob ( 60 ) then
27012: LD_INT 60
27014: PPUSH
27015: CALL_OW 13
27019: IFFALSE 27035
// SetSide ( i , side ) ;
27021: LD_VAR 0 1
27025: PPUSH
27026: LD_VAR 0 3
27030: PPUSH
27031: CALL_OW 235
27035: GO 27009
27037: POP
27038: POP
// end ;
27039: PPOPN 3
27041: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27042: LD_EXP 51
27046: PUSH
27047: LD_EXP 64
27051: AND
27052: IFFALSE 27171
27054: GO 27056
27056: DISABLE
27057: LD_INT 0
27059: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27060: LD_ADDR_VAR 0 1
27064: PUSH
27065: LD_INT 22
27067: PUSH
27068: LD_OWVAR 2
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 21
27079: PUSH
27080: LD_INT 1
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 3
27089: PUSH
27090: LD_INT 23
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: LIST
27108: PPUSH
27109: CALL_OW 69
27113: PUSH
27114: FOR_IN
27115: IFFALSE 27169
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 257
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: LD_INT 3
27135: PUSH
27136: LD_INT 4
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: IN
27145: IFFALSE 27167
// SetClass ( un , rand ( 1 , 4 ) ) ;
27147: LD_VAR 0 1
27151: PPUSH
27152: LD_INT 1
27154: PPUSH
27155: LD_INT 4
27157: PPUSH
27158: CALL_OW 12
27162: PPUSH
27163: CALL_OW 336
27167: GO 27114
27169: POP
27170: POP
// end ;
27171: PPOPN 1
27173: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27174: LD_EXP 51
27178: PUSH
27179: LD_EXP 63
27183: AND
27184: IFFALSE 27263
27186: GO 27188
27188: DISABLE
27189: LD_INT 0
27191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27192: LD_ADDR_VAR 0 1
27196: PUSH
27197: LD_INT 22
27199: PUSH
27200: LD_OWVAR 2
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 21
27211: PUSH
27212: LD_INT 3
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PPUSH
27223: CALL_OW 69
27227: ST_TO_ADDR
// if not tmp then
27228: LD_VAR 0 1
27232: NOT
27233: IFFALSE 27237
// exit ;
27235: GO 27263
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27237: LD_VAR 0 1
27241: PUSH
27242: LD_INT 1
27244: PPUSH
27245: LD_VAR 0 1
27249: PPUSH
27250: CALL_OW 12
27254: ARRAY
27255: PPUSH
27256: LD_INT 100
27258: PPUSH
27259: CALL_OW 234
// end ;
27263: PPOPN 1
27265: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27266: LD_EXP 51
27270: PUSH
27271: LD_EXP 65
27275: AND
27276: IFFALSE 27374
27278: GO 27280
27280: DISABLE
27281: LD_INT 0
27283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27284: LD_ADDR_VAR 0 1
27288: PUSH
27289: LD_INT 22
27291: PUSH
27292: LD_OWVAR 2
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 21
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PPUSH
27315: CALL_OW 69
27319: ST_TO_ADDR
// if not tmp then
27320: LD_VAR 0 1
27324: NOT
27325: IFFALSE 27329
// exit ;
27327: GO 27374
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27329: LD_VAR 0 1
27333: PUSH
27334: LD_INT 1
27336: PPUSH
27337: LD_VAR 0 1
27341: PPUSH
27342: CALL_OW 12
27346: ARRAY
27347: PPUSH
27348: LD_INT 1
27350: PPUSH
27351: LD_INT 4
27353: PPUSH
27354: CALL_OW 12
27358: PPUSH
27359: LD_INT 3000
27361: PPUSH
27362: LD_INT 9000
27364: PPUSH
27365: CALL_OW 12
27369: PPUSH
27370: CALL_OW 492
// end ;
27374: PPOPN 1
27376: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27377: LD_EXP 51
27381: PUSH
27382: LD_EXP 66
27386: AND
27387: IFFALSE 27407
27389: GO 27391
27391: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27392: LD_INT 1
27394: PPUSH
27395: LD_OWVAR 2
27399: PPUSH
27400: LD_INT 0
27402: PPUSH
27403: CALL_OW 324
27407: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27408: LD_EXP 51
27412: PUSH
27413: LD_EXP 67
27417: AND
27418: IFFALSE 27501
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27427: LD_ADDR_VAR 0 2
27431: PUSH
27432: LD_INT 22
27434: PUSH
27435: LD_OWVAR 2
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 21
27446: PUSH
27447: LD_INT 3
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PPUSH
27458: CALL_OW 69
27462: ST_TO_ADDR
// if not tmp then
27463: LD_VAR 0 2
27467: NOT
27468: IFFALSE 27472
// exit ;
27470: GO 27501
// for i in tmp do
27472: LD_ADDR_VAR 0 1
27476: PUSH
27477: LD_VAR 0 2
27481: PUSH
27482: FOR_IN
27483: IFFALSE 27499
// SetBLevel ( i , 10 ) ;
27485: LD_VAR 0 1
27489: PPUSH
27490: LD_INT 10
27492: PPUSH
27493: CALL_OW 241
27497: GO 27482
27499: POP
27500: POP
// end ;
27501: PPOPN 2
27503: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27504: LD_EXP 51
27508: PUSH
27509: LD_EXP 68
27513: AND
27514: IFFALSE 27625
27516: GO 27518
27518: DISABLE
27519: LD_INT 0
27521: PPUSH
27522: PPUSH
27523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27524: LD_ADDR_VAR 0 3
27528: PUSH
27529: LD_INT 22
27531: PUSH
27532: LD_OWVAR 2
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 25
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PPUSH
27555: CALL_OW 69
27559: ST_TO_ADDR
// if not tmp then
27560: LD_VAR 0 3
27564: NOT
27565: IFFALSE 27569
// exit ;
27567: GO 27625
// un := tmp [ rand ( 1 , tmp ) ] ;
27569: LD_ADDR_VAR 0 2
27573: PUSH
27574: LD_VAR 0 3
27578: PUSH
27579: LD_INT 1
27581: PPUSH
27582: LD_VAR 0 3
27586: PPUSH
27587: CALL_OW 12
27591: ARRAY
27592: ST_TO_ADDR
// if Crawls ( un ) then
27593: LD_VAR 0 2
27597: PPUSH
27598: CALL_OW 318
27602: IFFALSE 27613
// ComWalk ( un ) ;
27604: LD_VAR 0 2
27608: PPUSH
27609: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27613: LD_VAR 0 2
27617: PPUSH
27618: LD_INT 5
27620: PPUSH
27621: CALL_OW 336
// end ;
27625: PPOPN 3
27627: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27628: LD_EXP 51
27632: PUSH
27633: LD_EXP 69
27637: AND
27638: PUSH
27639: LD_OWVAR 67
27643: PUSH
27644: LD_INT 4
27646: LESS
27647: AND
27648: IFFALSE 27667
27650: GO 27652
27652: DISABLE
// begin Difficulty := Difficulty + 1 ;
27653: LD_ADDR_OWVAR 67
27657: PUSH
27658: LD_OWVAR 67
27662: PUSH
27663: LD_INT 1
27665: PLUS
27666: ST_TO_ADDR
// end ;
27667: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27668: LD_EXP 51
27672: PUSH
27673: LD_EXP 70
27677: AND
27678: IFFALSE 27781
27680: GO 27682
27682: DISABLE
27683: LD_INT 0
27685: PPUSH
// begin for i := 1 to 5 do
27686: LD_ADDR_VAR 0 1
27690: PUSH
27691: DOUBLE
27692: LD_INT 1
27694: DEC
27695: ST_TO_ADDR
27696: LD_INT 5
27698: PUSH
27699: FOR_TO
27700: IFFALSE 27779
// begin uc_nation := nation_nature ;
27702: LD_ADDR_OWVAR 21
27706: PUSH
27707: LD_INT 0
27709: ST_TO_ADDR
// uc_side := 0 ;
27710: LD_ADDR_OWVAR 20
27714: PUSH
27715: LD_INT 0
27717: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27718: LD_ADDR_OWVAR 29
27722: PUSH
27723: LD_INT 12
27725: PUSH
27726: LD_INT 12
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: ST_TO_ADDR
// hc_agressivity := 20 ;
27733: LD_ADDR_OWVAR 35
27737: PUSH
27738: LD_INT 20
27740: ST_TO_ADDR
// hc_class := class_tiger ;
27741: LD_ADDR_OWVAR 28
27745: PUSH
27746: LD_INT 14
27748: ST_TO_ADDR
// hc_gallery :=  ;
27749: LD_ADDR_OWVAR 33
27753: PUSH
27754: LD_STRING 
27756: ST_TO_ADDR
// hc_name :=  ;
27757: LD_ADDR_OWVAR 26
27761: PUSH
27762: LD_STRING 
27764: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27765: CALL_OW 44
27769: PPUSH
27770: LD_INT 0
27772: PPUSH
27773: CALL_OW 51
// end ;
27777: GO 27699
27779: POP
27780: POP
// end ;
27781: PPOPN 1
27783: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27784: LD_EXP 51
27788: PUSH
27789: LD_EXP 71
27793: AND
27794: IFFALSE 27803
27796: GO 27798
27798: DISABLE
// StreamSibBomb ;
27799: CALL 27804 0 0
27803: END
// export function StreamSibBomb ; var i , x , y ; begin
27804: LD_INT 0
27806: PPUSH
27807: PPUSH
27808: PPUSH
27809: PPUSH
// result := false ;
27810: LD_ADDR_VAR 0 1
27814: PUSH
27815: LD_INT 0
27817: ST_TO_ADDR
// for i := 1 to 16 do
27818: LD_ADDR_VAR 0 2
27822: PUSH
27823: DOUBLE
27824: LD_INT 1
27826: DEC
27827: ST_TO_ADDR
27828: LD_INT 16
27830: PUSH
27831: FOR_TO
27832: IFFALSE 28031
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27834: LD_ADDR_VAR 0 3
27838: PUSH
27839: LD_INT 10
27841: PUSH
27842: LD_INT 20
27844: PUSH
27845: LD_INT 30
27847: PUSH
27848: LD_INT 40
27850: PUSH
27851: LD_INT 50
27853: PUSH
27854: LD_INT 60
27856: PUSH
27857: LD_INT 70
27859: PUSH
27860: LD_INT 80
27862: PUSH
27863: LD_INT 90
27865: PUSH
27866: LD_INT 100
27868: PUSH
27869: LD_INT 110
27871: PUSH
27872: LD_INT 120
27874: PUSH
27875: LD_INT 130
27877: PUSH
27878: LD_INT 140
27880: PUSH
27881: LD_INT 150
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: PPUSH
27904: LD_INT 15
27906: PPUSH
27907: CALL_OW 12
27911: ARRAY
27912: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27913: LD_ADDR_VAR 0 4
27917: PUSH
27918: LD_INT 10
27920: PUSH
27921: LD_INT 20
27923: PUSH
27924: LD_INT 30
27926: PUSH
27927: LD_INT 40
27929: PUSH
27930: LD_INT 50
27932: PUSH
27933: LD_INT 60
27935: PUSH
27936: LD_INT 70
27938: PUSH
27939: LD_INT 80
27941: PUSH
27942: LD_INT 90
27944: PUSH
27945: LD_INT 100
27947: PUSH
27948: LD_INT 110
27950: PUSH
27951: LD_INT 120
27953: PUSH
27954: LD_INT 130
27956: PUSH
27957: LD_INT 140
27959: PUSH
27960: LD_INT 150
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: PPUSH
27983: LD_INT 15
27985: PPUSH
27986: CALL_OW 12
27990: ARRAY
27991: ST_TO_ADDR
// if ValidHex ( x , y ) then
27992: LD_VAR 0 3
27996: PPUSH
27997: LD_VAR 0 4
28001: PPUSH
28002: CALL_OW 488
28006: IFFALSE 28029
// begin result := [ x , y ] ;
28008: LD_ADDR_VAR 0 1
28012: PUSH
28013: LD_VAR 0 3
28017: PUSH
28018: LD_VAR 0 4
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: ST_TO_ADDR
// break ;
28027: GO 28031
// end ; end ;
28029: GO 27831
28031: POP
28032: POP
// if result then
28033: LD_VAR 0 1
28037: IFFALSE 28097
// begin ToLua ( playSibBomb() ) ;
28039: LD_STRING playSibBomb()
28041: PPUSH
28042: CALL_OW 559
// wait ( 0 0$14 ) ;
28046: LD_INT 490
28048: PPUSH
28049: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28053: LD_VAR 0 1
28057: PUSH
28058: LD_INT 1
28060: ARRAY
28061: PPUSH
28062: LD_VAR 0 1
28066: PUSH
28067: LD_INT 2
28069: ARRAY
28070: PPUSH
28071: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28075: LD_VAR 0 1
28079: PUSH
28080: LD_INT 1
28082: ARRAY
28083: PPUSH
28084: LD_VAR 0 1
28088: PUSH
28089: LD_INT 2
28091: ARRAY
28092: PPUSH
28093: CALL_OW 429
// end ; end ;
28097: LD_VAR 0 1
28101: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28102: LD_EXP 51
28106: PUSH
28107: LD_EXP 73
28111: AND
28112: IFFALSE 28124
28114: GO 28116
28116: DISABLE
// YouLost (  ) ;
28117: LD_STRING 
28119: PPUSH
28120: CALL_OW 104
28124: END
// every 0 0$1 trigger StreamModeActive and sFog do
28125: LD_EXP 51
28129: PUSH
28130: LD_EXP 72
28134: AND
28135: IFFALSE 28149
28137: GO 28139
28139: DISABLE
// FogOff ( your_side ) ;
28140: LD_OWVAR 2
28144: PPUSH
28145: CALL_OW 344
28149: END
// every 0 0$1 trigger StreamModeActive and sSun do
28150: LD_EXP 51
28154: PUSH
28155: LD_EXP 74
28159: AND
28160: IFFALSE 28188
28162: GO 28164
28164: DISABLE
// begin solar_recharge_percent := 0 ;
28165: LD_ADDR_OWVAR 79
28169: PUSH
28170: LD_INT 0
28172: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28173: LD_INT 10500
28175: PPUSH
28176: CALL_OW 67
// solar_recharge_percent := 100 ;
28180: LD_ADDR_OWVAR 79
28184: PUSH
28185: LD_INT 100
28187: ST_TO_ADDR
// end ;
28188: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28189: LD_EXP 51
28193: PUSH
28194: LD_EXP 75
28198: AND
28199: IFFALSE 28438
28201: GO 28203
28203: DISABLE
28204: LD_INT 0
28206: PPUSH
28207: PPUSH
28208: PPUSH
// begin tmp := [ ] ;
28209: LD_ADDR_VAR 0 3
28213: PUSH
28214: EMPTY
28215: ST_TO_ADDR
// for i := 1 to 6 do
28216: LD_ADDR_VAR 0 1
28220: PUSH
28221: DOUBLE
28222: LD_INT 1
28224: DEC
28225: ST_TO_ADDR
28226: LD_INT 6
28228: PUSH
28229: FOR_TO
28230: IFFALSE 28335
// begin uc_nation := nation_nature ;
28232: LD_ADDR_OWVAR 21
28236: PUSH
28237: LD_INT 0
28239: ST_TO_ADDR
// uc_side := 0 ;
28240: LD_ADDR_OWVAR 20
28244: PUSH
28245: LD_INT 0
28247: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28248: LD_ADDR_OWVAR 29
28252: PUSH
28253: LD_INT 12
28255: PUSH
28256: LD_INT 12
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: ST_TO_ADDR
// hc_agressivity := 20 ;
28263: LD_ADDR_OWVAR 35
28267: PUSH
28268: LD_INT 20
28270: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28271: LD_ADDR_OWVAR 28
28275: PUSH
28276: LD_INT 17
28278: ST_TO_ADDR
// hc_gallery :=  ;
28279: LD_ADDR_OWVAR 33
28283: PUSH
28284: LD_STRING 
28286: ST_TO_ADDR
// hc_name :=  ;
28287: LD_ADDR_OWVAR 26
28291: PUSH
28292: LD_STRING 
28294: ST_TO_ADDR
// un := CreateHuman ;
28295: LD_ADDR_VAR 0 2
28299: PUSH
28300: CALL_OW 44
28304: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28305: LD_VAR 0 2
28309: PPUSH
28310: LD_INT 1
28312: PPUSH
28313: CALL_OW 51
// tmp := tmp ^ un ;
28317: LD_ADDR_VAR 0 3
28321: PUSH
28322: LD_VAR 0 3
28326: PUSH
28327: LD_VAR 0 2
28331: ADD
28332: ST_TO_ADDR
// end ;
28333: GO 28229
28335: POP
28336: POP
// repeat wait ( 0 0$1 ) ;
28337: LD_INT 35
28339: PPUSH
28340: CALL_OW 67
// for un in tmp do
28344: LD_ADDR_VAR 0 2
28348: PUSH
28349: LD_VAR 0 3
28353: PUSH
28354: FOR_IN
28355: IFFALSE 28429
// begin if IsDead ( un ) then
28357: LD_VAR 0 2
28361: PPUSH
28362: CALL_OW 301
28366: IFFALSE 28386
// begin tmp := tmp diff un ;
28368: LD_ADDR_VAR 0 3
28372: PUSH
28373: LD_VAR 0 3
28377: PUSH
28378: LD_VAR 0 2
28382: DIFF
28383: ST_TO_ADDR
// continue ;
28384: GO 28354
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28386: LD_VAR 0 2
28390: PPUSH
28391: LD_INT 3
28393: PUSH
28394: LD_INT 22
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PPUSH
28408: CALL_OW 69
28412: PPUSH
28413: LD_VAR 0 2
28417: PPUSH
28418: CALL_OW 74
28422: PPUSH
28423: CALL_OW 115
// end ;
28427: GO 28354
28429: POP
28430: POP
// until not tmp ;
28431: LD_VAR 0 3
28435: NOT
28436: IFFALSE 28337
// end ;
28438: PPOPN 3
28440: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28441: LD_EXP 51
28445: PUSH
28446: LD_EXP 76
28450: AND
28451: IFFALSE 28505
28453: GO 28455
28455: DISABLE
// begin ToLua ( displayTroll(); ) ;
28456: LD_STRING displayTroll();
28458: PPUSH
28459: CALL_OW 559
// wait ( 3 3$00 ) ;
28463: LD_INT 6300
28465: PPUSH
28466: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28470: LD_STRING hideTroll();
28472: PPUSH
28473: CALL_OW 559
// wait ( 1 1$00 ) ;
28477: LD_INT 2100
28479: PPUSH
28480: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28484: LD_STRING displayTroll();
28486: PPUSH
28487: CALL_OW 559
// wait ( 1 1$00 ) ;
28491: LD_INT 2100
28493: PPUSH
28494: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28498: LD_STRING hideTroll();
28500: PPUSH
28501: CALL_OW 559
// end ;
28505: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28506: LD_EXP 51
28510: PUSH
28511: LD_EXP 77
28515: AND
28516: IFFALSE 28579
28518: GO 28520
28520: DISABLE
28521: LD_INT 0
28523: PPUSH
// begin p := 0 ;
28524: LD_ADDR_VAR 0 1
28528: PUSH
28529: LD_INT 0
28531: ST_TO_ADDR
// repeat game_speed := 1 ;
28532: LD_ADDR_OWVAR 65
28536: PUSH
28537: LD_INT 1
28539: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28540: LD_INT 35
28542: PPUSH
28543: CALL_OW 67
// p := p + 1 ;
28547: LD_ADDR_VAR 0 1
28551: PUSH
28552: LD_VAR 0 1
28556: PUSH
28557: LD_INT 1
28559: PLUS
28560: ST_TO_ADDR
// until p >= 60 ;
28561: LD_VAR 0 1
28565: PUSH
28566: LD_INT 60
28568: GREATEREQUAL
28569: IFFALSE 28532
// game_speed := 4 ;
28571: LD_ADDR_OWVAR 65
28575: PUSH
28576: LD_INT 4
28578: ST_TO_ADDR
// end ;
28579: PPOPN 1
28581: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28582: LD_EXP 51
28586: PUSH
28587: LD_EXP 78
28591: AND
28592: IFFALSE 28738
28594: GO 28596
28596: DISABLE
28597: LD_INT 0
28599: PPUSH
28600: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28601: LD_ADDR_VAR 0 1
28605: PUSH
28606: LD_INT 22
28608: PUSH
28609: LD_OWVAR 2
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: LD_INT 30
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 30
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PPUSH
28650: CALL_OW 69
28654: ST_TO_ADDR
// if not depot then
28655: LD_VAR 0 1
28659: NOT
28660: IFFALSE 28664
// exit ;
28662: GO 28738
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28664: LD_ADDR_VAR 0 2
28668: PUSH
28669: LD_VAR 0 1
28673: PUSH
28674: LD_INT 1
28676: PPUSH
28677: LD_VAR 0 1
28681: PPUSH
28682: CALL_OW 12
28686: ARRAY
28687: PPUSH
28688: CALL_OW 274
28692: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28693: LD_VAR 0 2
28697: PPUSH
28698: LD_INT 1
28700: PPUSH
28701: LD_INT 0
28703: PPUSH
28704: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28708: LD_VAR 0 2
28712: PPUSH
28713: LD_INT 2
28715: PPUSH
28716: LD_INT 0
28718: PPUSH
28719: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28723: LD_VAR 0 2
28727: PPUSH
28728: LD_INT 3
28730: PPUSH
28731: LD_INT 0
28733: PPUSH
28734: CALL_OW 277
// end ;
28738: PPOPN 2
28740: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28741: LD_EXP 51
28745: PUSH
28746: LD_EXP 79
28750: AND
28751: IFFALSE 28848
28753: GO 28755
28755: DISABLE
28756: LD_INT 0
28758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28759: LD_ADDR_VAR 0 1
28763: PUSH
28764: LD_INT 22
28766: PUSH
28767: LD_OWVAR 2
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 21
28778: PUSH
28779: LD_INT 1
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 3
28788: PUSH
28789: LD_INT 23
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: LIST
28807: PPUSH
28808: CALL_OW 69
28812: ST_TO_ADDR
// if not tmp then
28813: LD_VAR 0 1
28817: NOT
28818: IFFALSE 28822
// exit ;
28820: GO 28848
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28822: LD_VAR 0 1
28826: PUSH
28827: LD_INT 1
28829: PPUSH
28830: LD_VAR 0 1
28834: PPUSH
28835: CALL_OW 12
28839: ARRAY
28840: PPUSH
28841: LD_INT 200
28843: PPUSH
28844: CALL_OW 234
// end ;
28848: PPOPN 1
28850: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28851: LD_EXP 51
28855: PUSH
28856: LD_EXP 80
28860: AND
28861: IFFALSE 28940
28863: GO 28865
28865: DISABLE
28866: LD_INT 0
28868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28869: LD_ADDR_VAR 0 1
28873: PUSH
28874: LD_INT 22
28876: PUSH
28877: LD_OWVAR 2
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 21
28888: PUSH
28889: LD_INT 2
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PPUSH
28900: CALL_OW 69
28904: ST_TO_ADDR
// if not tmp then
28905: LD_VAR 0 1
28909: NOT
28910: IFFALSE 28914
// exit ;
28912: GO 28940
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28914: LD_VAR 0 1
28918: PUSH
28919: LD_INT 1
28921: PPUSH
28922: LD_VAR 0 1
28926: PPUSH
28927: CALL_OW 12
28931: ARRAY
28932: PPUSH
28933: LD_INT 60
28935: PPUSH
28936: CALL_OW 234
// end ;
28940: PPOPN 1
28942: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28943: LD_EXP 51
28947: PUSH
28948: LD_EXP 81
28952: AND
28953: IFFALSE 29052
28955: GO 28957
28957: DISABLE
28958: LD_INT 0
28960: PPUSH
28961: PPUSH
// begin enable ;
28962: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28963: LD_ADDR_VAR 0 1
28967: PUSH
28968: LD_INT 22
28970: PUSH
28971: LD_OWVAR 2
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 61
28982: PUSH
28983: EMPTY
28984: LIST
28985: PUSH
28986: LD_INT 33
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: PPUSH
29001: CALL_OW 69
29005: ST_TO_ADDR
// if not tmp then
29006: LD_VAR 0 1
29010: NOT
29011: IFFALSE 29015
// exit ;
29013: GO 29052
// for i in tmp do
29015: LD_ADDR_VAR 0 2
29019: PUSH
29020: LD_VAR 0 1
29024: PUSH
29025: FOR_IN
29026: IFFALSE 29050
// if IsControledBy ( i ) then
29028: LD_VAR 0 2
29032: PPUSH
29033: CALL_OW 312
29037: IFFALSE 29048
// ComUnlink ( i ) ;
29039: LD_VAR 0 2
29043: PPUSH
29044: CALL_OW 136
29048: GO 29025
29050: POP
29051: POP
// end ;
29052: PPOPN 2
29054: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29055: LD_EXP 51
29059: PUSH
29060: LD_EXP 82
29064: AND
29065: IFFALSE 29205
29067: GO 29069
29069: DISABLE
29070: LD_INT 0
29072: PPUSH
29073: PPUSH
// begin ToLua ( displayPowell(); ) ;
29074: LD_STRING displayPowell();
29076: PPUSH
29077: CALL_OW 559
// uc_side := 0 ;
29081: LD_ADDR_OWVAR 20
29085: PUSH
29086: LD_INT 0
29088: ST_TO_ADDR
// uc_nation := 2 ;
29089: LD_ADDR_OWVAR 21
29093: PUSH
29094: LD_INT 2
29096: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29097: LD_ADDR_OWVAR 37
29101: PUSH
29102: LD_INT 14
29104: ST_TO_ADDR
// vc_engine := engine_siberite ;
29105: LD_ADDR_OWVAR 39
29109: PUSH
29110: LD_INT 3
29112: ST_TO_ADDR
// vc_control := control_apeman ;
29113: LD_ADDR_OWVAR 38
29117: PUSH
29118: LD_INT 5
29120: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29121: LD_ADDR_OWVAR 40
29125: PUSH
29126: LD_INT 29
29128: ST_TO_ADDR
// un := CreateVehicle ;
29129: LD_ADDR_VAR 0 2
29133: PUSH
29134: CALL_OW 45
29138: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29139: LD_VAR 0 2
29143: PPUSH
29144: LD_INT 1
29146: PPUSH
29147: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29151: LD_INT 35
29153: PPUSH
29154: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29158: LD_VAR 0 2
29162: PPUSH
29163: LD_INT 22
29165: PUSH
29166: LD_OWVAR 2
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PPUSH
29175: CALL_OW 69
29179: PPUSH
29180: LD_VAR 0 2
29184: PPUSH
29185: CALL_OW 74
29189: PPUSH
29190: CALL_OW 115
// until IsDead ( un ) ;
29194: LD_VAR 0 2
29198: PPUSH
29199: CALL_OW 301
29203: IFFALSE 29151
// end ;
29205: PPOPN 2
29207: END
// every 0 0$1 trigger StreamModeActive and sStu do
29208: LD_EXP 51
29212: PUSH
29213: LD_EXP 90
29217: AND
29218: IFFALSE 29234
29220: GO 29222
29222: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29223: LD_STRING displayStucuk();
29225: PPUSH
29226: CALL_OW 559
// ResetFog ;
29230: CALL_OW 335
// end ;
29234: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29235: LD_EXP 51
29239: PUSH
29240: LD_EXP 83
29244: AND
29245: IFFALSE 29386
29247: GO 29249
29249: DISABLE
29250: LD_INT 0
29252: PPUSH
29253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29254: LD_ADDR_VAR 0 2
29258: PUSH
29259: LD_INT 22
29261: PUSH
29262: LD_OWVAR 2
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 21
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PPUSH
29285: CALL_OW 69
29289: ST_TO_ADDR
// if not tmp then
29290: LD_VAR 0 2
29294: NOT
29295: IFFALSE 29299
// exit ;
29297: GO 29386
// un := tmp [ rand ( 1 , tmp ) ] ;
29299: LD_ADDR_VAR 0 1
29303: PUSH
29304: LD_VAR 0 2
29308: PUSH
29309: LD_INT 1
29311: PPUSH
29312: LD_VAR 0 2
29316: PPUSH
29317: CALL_OW 12
29321: ARRAY
29322: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29323: LD_VAR 0 1
29327: PPUSH
29328: LD_INT 0
29330: PPUSH
29331: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29335: LD_VAR 0 1
29339: PPUSH
29340: LD_OWVAR 3
29344: PUSH
29345: LD_VAR 0 1
29349: DIFF
29350: PPUSH
29351: LD_VAR 0 1
29355: PPUSH
29356: CALL_OW 74
29360: PPUSH
29361: CALL_OW 115
// wait ( 0 0$20 ) ;
29365: LD_INT 700
29367: PPUSH
29368: CALL_OW 67
// SetSide ( un , your_side ) ;
29372: LD_VAR 0 1
29376: PPUSH
29377: LD_OWVAR 2
29381: PPUSH
29382: CALL_OW 235
// end ;
29386: PPOPN 2
29388: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29389: LD_EXP 51
29393: PUSH
29394: LD_EXP 84
29398: AND
29399: IFFALSE 29505
29401: GO 29403
29403: DISABLE
29404: LD_INT 0
29406: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29407: LD_ADDR_VAR 0 1
29411: PUSH
29412: LD_INT 22
29414: PUSH
29415: LD_OWVAR 2
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 2
29426: PUSH
29427: LD_INT 30
29429: PUSH
29430: LD_INT 0
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 30
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: LIST
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PPUSH
29456: CALL_OW 69
29460: ST_TO_ADDR
// if not depot then
29461: LD_VAR 0 1
29465: NOT
29466: IFFALSE 29470
// exit ;
29468: GO 29505
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29470: LD_VAR 0 1
29474: PUSH
29475: LD_INT 1
29477: ARRAY
29478: PPUSH
29479: CALL_OW 250
29483: PPUSH
29484: LD_VAR 0 1
29488: PUSH
29489: LD_INT 1
29491: ARRAY
29492: PPUSH
29493: CALL_OW 251
29497: PPUSH
29498: LD_INT 70
29500: PPUSH
29501: CALL_OW 495
// end ;
29505: PPOPN 1
29507: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29508: LD_EXP 51
29512: PUSH
29513: LD_EXP 85
29517: AND
29518: IFFALSE 29729
29520: GO 29522
29522: DISABLE
29523: LD_INT 0
29525: PPUSH
29526: PPUSH
29527: PPUSH
29528: PPUSH
29529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29530: LD_ADDR_VAR 0 5
29534: PUSH
29535: LD_INT 22
29537: PUSH
29538: LD_OWVAR 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 21
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PPUSH
29561: CALL_OW 69
29565: ST_TO_ADDR
// if not tmp then
29566: LD_VAR 0 5
29570: NOT
29571: IFFALSE 29575
// exit ;
29573: GO 29729
// for i in tmp do
29575: LD_ADDR_VAR 0 1
29579: PUSH
29580: LD_VAR 0 5
29584: PUSH
29585: FOR_IN
29586: IFFALSE 29727
// begin d := rand ( 0 , 5 ) ;
29588: LD_ADDR_VAR 0 4
29592: PUSH
29593: LD_INT 0
29595: PPUSH
29596: LD_INT 5
29598: PPUSH
29599: CALL_OW 12
29603: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29604: LD_ADDR_VAR 0 2
29608: PUSH
29609: LD_VAR 0 1
29613: PPUSH
29614: CALL_OW 250
29618: PPUSH
29619: LD_VAR 0 4
29623: PPUSH
29624: LD_INT 3
29626: PPUSH
29627: LD_INT 12
29629: PPUSH
29630: CALL_OW 12
29634: PPUSH
29635: CALL_OW 272
29639: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29640: LD_ADDR_VAR 0 3
29644: PUSH
29645: LD_VAR 0 1
29649: PPUSH
29650: CALL_OW 251
29654: PPUSH
29655: LD_VAR 0 4
29659: PPUSH
29660: LD_INT 3
29662: PPUSH
29663: LD_INT 12
29665: PPUSH
29666: CALL_OW 12
29670: PPUSH
29671: CALL_OW 273
29675: ST_TO_ADDR
// if ValidHex ( x , y ) then
29676: LD_VAR 0 2
29680: PPUSH
29681: LD_VAR 0 3
29685: PPUSH
29686: CALL_OW 488
29690: IFFALSE 29725
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29692: LD_VAR 0 1
29696: PPUSH
29697: LD_VAR 0 2
29701: PPUSH
29702: LD_VAR 0 3
29706: PPUSH
29707: LD_INT 3
29709: PPUSH
29710: LD_INT 6
29712: PPUSH
29713: CALL_OW 12
29717: PPUSH
29718: LD_INT 1
29720: PPUSH
29721: CALL_OW 483
// end ;
29725: GO 29585
29727: POP
29728: POP
// end ;
29729: PPOPN 5
29731: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29732: LD_EXP 51
29736: PUSH
29737: LD_EXP 86
29741: AND
29742: IFFALSE 29836
29744: GO 29746
29746: DISABLE
29747: LD_INT 0
29749: PPUSH
29750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29751: LD_ADDR_VAR 0 2
29755: PUSH
29756: LD_INT 22
29758: PUSH
29759: LD_OWVAR 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 32
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 21
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: PPUSH
29793: CALL_OW 69
29797: ST_TO_ADDR
// if not tmp then
29798: LD_VAR 0 2
29802: NOT
29803: IFFALSE 29807
// exit ;
29805: GO 29836
// for i in tmp do
29807: LD_ADDR_VAR 0 1
29811: PUSH
29812: LD_VAR 0 2
29816: PUSH
29817: FOR_IN
29818: IFFALSE 29834
// SetFuel ( i , 0 ) ;
29820: LD_VAR 0 1
29824: PPUSH
29825: LD_INT 0
29827: PPUSH
29828: CALL_OW 240
29832: GO 29817
29834: POP
29835: POP
// end ;
29836: PPOPN 2
29838: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29839: LD_EXP 51
29843: PUSH
29844: LD_EXP 87
29848: AND
29849: IFFALSE 29915
29851: GO 29853
29853: DISABLE
29854: LD_INT 0
29856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29857: LD_ADDR_VAR 0 1
29861: PUSH
29862: LD_INT 22
29864: PUSH
29865: LD_OWVAR 2
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 30
29876: PUSH
29877: LD_INT 29
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PPUSH
29888: CALL_OW 69
29892: ST_TO_ADDR
// if not tmp then
29893: LD_VAR 0 1
29897: NOT
29898: IFFALSE 29902
// exit ;
29900: GO 29915
// DestroyUnit ( tmp [ 1 ] ) ;
29902: LD_VAR 0 1
29906: PUSH
29907: LD_INT 1
29909: ARRAY
29910: PPUSH
29911: CALL_OW 65
// end ;
29915: PPOPN 1
29917: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29918: LD_EXP 51
29922: PUSH
29923: LD_EXP 89
29927: AND
29928: IFFALSE 30057
29930: GO 29932
29932: DISABLE
29933: LD_INT 0
29935: PPUSH
// begin uc_side := 0 ;
29936: LD_ADDR_OWVAR 20
29940: PUSH
29941: LD_INT 0
29943: ST_TO_ADDR
// uc_nation := nation_arabian ;
29944: LD_ADDR_OWVAR 21
29948: PUSH
29949: LD_INT 2
29951: ST_TO_ADDR
// hc_gallery :=  ;
29952: LD_ADDR_OWVAR 33
29956: PUSH
29957: LD_STRING 
29959: ST_TO_ADDR
// hc_name :=  ;
29960: LD_ADDR_OWVAR 26
29964: PUSH
29965: LD_STRING 
29967: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29968: LD_INT 1
29970: PPUSH
29971: LD_INT 11
29973: PPUSH
29974: LD_INT 10
29976: PPUSH
29977: CALL_OW 380
// un := CreateHuman ;
29981: LD_ADDR_VAR 0 1
29985: PUSH
29986: CALL_OW 44
29990: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29991: LD_VAR 0 1
29995: PPUSH
29996: LD_INT 1
29998: PPUSH
29999: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30003: LD_INT 35
30005: PPUSH
30006: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30010: LD_VAR 0 1
30014: PPUSH
30015: LD_INT 22
30017: PUSH
30018: LD_OWVAR 2
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PPUSH
30027: CALL_OW 69
30031: PPUSH
30032: LD_VAR 0 1
30036: PPUSH
30037: CALL_OW 74
30041: PPUSH
30042: CALL_OW 115
// until IsDead ( un ) ;
30046: LD_VAR 0 1
30050: PPUSH
30051: CALL_OW 301
30055: IFFALSE 30003
// end ;
30057: PPOPN 1
30059: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30060: LD_EXP 51
30064: PUSH
30065: LD_EXP 91
30069: AND
30070: IFFALSE 30082
30072: GO 30074
30074: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30075: LD_STRING earthquake(getX(game), 0, 32)
30077: PPUSH
30078: CALL_OW 559
30082: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30083: LD_EXP 51
30087: PUSH
30088: LD_EXP 92
30092: AND
30093: IFFALSE 30184
30095: GO 30097
30097: DISABLE
30098: LD_INT 0
30100: PPUSH
// begin enable ;
30101: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30102: LD_ADDR_VAR 0 1
30106: PUSH
30107: LD_INT 22
30109: PUSH
30110: LD_OWVAR 2
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 21
30121: PUSH
30122: LD_INT 2
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 33
30131: PUSH
30132: LD_INT 3
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: LIST
30143: PPUSH
30144: CALL_OW 69
30148: ST_TO_ADDR
// if not tmp then
30149: LD_VAR 0 1
30153: NOT
30154: IFFALSE 30158
// exit ;
30156: GO 30184
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30158: LD_VAR 0 1
30162: PUSH
30163: LD_INT 1
30165: PPUSH
30166: LD_VAR 0 1
30170: PPUSH
30171: CALL_OW 12
30175: ARRAY
30176: PPUSH
30177: LD_INT 1
30179: PPUSH
30180: CALL_OW 234
// end ;
30184: PPOPN 1
30186: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30187: LD_EXP 51
30191: PUSH
30192: LD_EXP 93
30196: AND
30197: IFFALSE 30338
30199: GO 30201
30201: DISABLE
30202: LD_INT 0
30204: PPUSH
30205: PPUSH
30206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30207: LD_ADDR_VAR 0 3
30211: PUSH
30212: LD_INT 22
30214: PUSH
30215: LD_OWVAR 2
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 25
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PPUSH
30238: CALL_OW 69
30242: ST_TO_ADDR
// if not tmp then
30243: LD_VAR 0 3
30247: NOT
30248: IFFALSE 30252
// exit ;
30250: GO 30338
// un := tmp [ rand ( 1 , tmp ) ] ;
30252: LD_ADDR_VAR 0 2
30256: PUSH
30257: LD_VAR 0 3
30261: PUSH
30262: LD_INT 1
30264: PPUSH
30265: LD_VAR 0 3
30269: PPUSH
30270: CALL_OW 12
30274: ARRAY
30275: ST_TO_ADDR
// if Crawls ( un ) then
30276: LD_VAR 0 2
30280: PPUSH
30281: CALL_OW 318
30285: IFFALSE 30296
// ComWalk ( un ) ;
30287: LD_VAR 0 2
30291: PPUSH
30292: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30296: LD_VAR 0 2
30300: PPUSH
30301: LD_INT 9
30303: PPUSH
30304: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30308: LD_INT 28
30310: PPUSH
30311: LD_OWVAR 2
30315: PPUSH
30316: LD_INT 2
30318: PPUSH
30319: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30323: LD_INT 29
30325: PPUSH
30326: LD_OWVAR 2
30330: PPUSH
30331: LD_INT 2
30333: PPUSH
30334: CALL_OW 322
// end ;
30338: PPOPN 3
30340: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30341: LD_EXP 51
30345: PUSH
30346: LD_EXP 94
30350: AND
30351: IFFALSE 30462
30353: GO 30355
30355: DISABLE
30356: LD_INT 0
30358: PPUSH
30359: PPUSH
30360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30361: LD_ADDR_VAR 0 3
30365: PUSH
30366: LD_INT 22
30368: PUSH
30369: LD_OWVAR 2
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 25
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PPUSH
30392: CALL_OW 69
30396: ST_TO_ADDR
// if not tmp then
30397: LD_VAR 0 3
30401: NOT
30402: IFFALSE 30406
// exit ;
30404: GO 30462
// un := tmp [ rand ( 1 , tmp ) ] ;
30406: LD_ADDR_VAR 0 2
30410: PUSH
30411: LD_VAR 0 3
30415: PUSH
30416: LD_INT 1
30418: PPUSH
30419: LD_VAR 0 3
30423: PPUSH
30424: CALL_OW 12
30428: ARRAY
30429: ST_TO_ADDR
// if Crawls ( un ) then
30430: LD_VAR 0 2
30434: PPUSH
30435: CALL_OW 318
30439: IFFALSE 30450
// ComWalk ( un ) ;
30441: LD_VAR 0 2
30445: PPUSH
30446: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30450: LD_VAR 0 2
30454: PPUSH
30455: LD_INT 8
30457: PPUSH
30458: CALL_OW 336
// end ;
30462: PPOPN 3
30464: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30465: LD_EXP 51
30469: PUSH
30470: LD_EXP 95
30474: AND
30475: IFFALSE 30619
30477: GO 30479
30479: DISABLE
30480: LD_INT 0
30482: PPUSH
30483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30484: LD_ADDR_VAR 0 2
30488: PUSH
30489: LD_INT 22
30491: PUSH
30492: LD_OWVAR 2
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 21
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 2
30513: PUSH
30514: LD_INT 34
30516: PUSH
30517: LD_INT 12
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 34
30526: PUSH
30527: LD_INT 51
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 34
30536: PUSH
30537: LD_INT 32
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: PPUSH
30555: CALL_OW 69
30559: ST_TO_ADDR
// if not tmp then
30560: LD_VAR 0 2
30564: NOT
30565: IFFALSE 30569
// exit ;
30567: GO 30619
// for i in tmp do
30569: LD_ADDR_VAR 0 1
30573: PUSH
30574: LD_VAR 0 2
30578: PUSH
30579: FOR_IN
30580: IFFALSE 30617
// if GetCargo ( i , mat_artifact ) = 0 then
30582: LD_VAR 0 1
30586: PPUSH
30587: LD_INT 4
30589: PPUSH
30590: CALL_OW 289
30594: PUSH
30595: LD_INT 0
30597: EQUAL
30598: IFFALSE 30615
// SetCargo ( i , mat_siberit , 100 ) ;
30600: LD_VAR 0 1
30604: PPUSH
30605: LD_INT 3
30607: PPUSH
30608: LD_INT 100
30610: PPUSH
30611: CALL_OW 290
30615: GO 30579
30617: POP
30618: POP
// end ;
30619: PPOPN 2
30621: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30622: LD_EXP 51
30626: PUSH
30627: LD_EXP 96
30631: AND
30632: IFFALSE 30815
30634: GO 30636
30636: DISABLE
30637: LD_INT 0
30639: PPUSH
30640: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30641: LD_ADDR_VAR 0 2
30645: PUSH
30646: LD_INT 22
30648: PUSH
30649: LD_OWVAR 2
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PPUSH
30658: CALL_OW 69
30662: ST_TO_ADDR
// if not tmp then
30663: LD_VAR 0 2
30667: NOT
30668: IFFALSE 30672
// exit ;
30670: GO 30815
// for i := 1 to 2 do
30672: LD_ADDR_VAR 0 1
30676: PUSH
30677: DOUBLE
30678: LD_INT 1
30680: DEC
30681: ST_TO_ADDR
30682: LD_INT 2
30684: PUSH
30685: FOR_TO
30686: IFFALSE 30813
// begin uc_side := your_side ;
30688: LD_ADDR_OWVAR 20
30692: PUSH
30693: LD_OWVAR 2
30697: ST_TO_ADDR
// uc_nation := nation_american ;
30698: LD_ADDR_OWVAR 21
30702: PUSH
30703: LD_INT 1
30705: ST_TO_ADDR
// vc_chassis := us_morphling ;
30706: LD_ADDR_OWVAR 37
30710: PUSH
30711: LD_INT 5
30713: ST_TO_ADDR
// vc_engine := engine_siberite ;
30714: LD_ADDR_OWVAR 39
30718: PUSH
30719: LD_INT 3
30721: ST_TO_ADDR
// vc_control := control_computer ;
30722: LD_ADDR_OWVAR 38
30726: PUSH
30727: LD_INT 3
30729: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30730: LD_ADDR_OWVAR 40
30734: PUSH
30735: LD_INT 10
30737: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30738: LD_VAR 0 2
30742: PUSH
30743: LD_INT 1
30745: ARRAY
30746: PPUSH
30747: CALL_OW 310
30751: NOT
30752: IFFALSE 30799
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30754: CALL_OW 45
30758: PPUSH
30759: LD_VAR 0 2
30763: PUSH
30764: LD_INT 1
30766: ARRAY
30767: PPUSH
30768: CALL_OW 250
30772: PPUSH
30773: LD_VAR 0 2
30777: PUSH
30778: LD_INT 1
30780: ARRAY
30781: PPUSH
30782: CALL_OW 251
30786: PPUSH
30787: LD_INT 12
30789: PPUSH
30790: LD_INT 1
30792: PPUSH
30793: CALL_OW 50
30797: GO 30811
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30799: CALL_OW 45
30803: PPUSH
30804: LD_INT 1
30806: PPUSH
30807: CALL_OW 51
// end ;
30811: GO 30685
30813: POP
30814: POP
// end ;
30815: PPOPN 2
30817: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30818: LD_EXP 51
30822: PUSH
30823: LD_EXP 97
30827: AND
30828: IFFALSE 31050
30830: GO 30832
30832: DISABLE
30833: LD_INT 0
30835: PPUSH
30836: PPUSH
30837: PPUSH
30838: PPUSH
30839: PPUSH
30840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30841: LD_ADDR_VAR 0 6
30845: PUSH
30846: LD_INT 22
30848: PUSH
30849: LD_OWVAR 2
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 21
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 3
30870: PUSH
30871: LD_INT 23
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: LIST
30889: PPUSH
30890: CALL_OW 69
30894: ST_TO_ADDR
// if not tmp then
30895: LD_VAR 0 6
30899: NOT
30900: IFFALSE 30904
// exit ;
30902: GO 31050
// s1 := rand ( 1 , 4 ) ;
30904: LD_ADDR_VAR 0 2
30908: PUSH
30909: LD_INT 1
30911: PPUSH
30912: LD_INT 4
30914: PPUSH
30915: CALL_OW 12
30919: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30920: LD_ADDR_VAR 0 4
30924: PUSH
30925: LD_VAR 0 6
30929: PUSH
30930: LD_INT 1
30932: ARRAY
30933: PPUSH
30934: LD_VAR 0 2
30938: PPUSH
30939: CALL_OW 259
30943: ST_TO_ADDR
// if s1 = 1 then
30944: LD_VAR 0 2
30948: PUSH
30949: LD_INT 1
30951: EQUAL
30952: IFFALSE 30972
// s2 := rand ( 2 , 4 ) else
30954: LD_ADDR_VAR 0 3
30958: PUSH
30959: LD_INT 2
30961: PPUSH
30962: LD_INT 4
30964: PPUSH
30965: CALL_OW 12
30969: ST_TO_ADDR
30970: GO 30980
// s2 := 1 ;
30972: LD_ADDR_VAR 0 3
30976: PUSH
30977: LD_INT 1
30979: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30980: LD_ADDR_VAR 0 5
30984: PUSH
30985: LD_VAR 0 6
30989: PUSH
30990: LD_INT 1
30992: ARRAY
30993: PPUSH
30994: LD_VAR 0 3
30998: PPUSH
30999: CALL_OW 259
31003: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31004: LD_VAR 0 6
31008: PUSH
31009: LD_INT 1
31011: ARRAY
31012: PPUSH
31013: LD_VAR 0 2
31017: PPUSH
31018: LD_VAR 0 5
31022: PPUSH
31023: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31027: LD_VAR 0 6
31031: PUSH
31032: LD_INT 1
31034: ARRAY
31035: PPUSH
31036: LD_VAR 0 3
31040: PPUSH
31041: LD_VAR 0 4
31045: PPUSH
31046: CALL_OW 237
// end ;
31050: PPOPN 6
31052: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31053: LD_EXP 51
31057: PUSH
31058: LD_EXP 98
31062: AND
31063: IFFALSE 31142
31065: GO 31067
31067: DISABLE
31068: LD_INT 0
31070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31071: LD_ADDR_VAR 0 1
31075: PUSH
31076: LD_INT 22
31078: PUSH
31079: LD_OWVAR 2
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 30
31090: PUSH
31091: LD_INT 3
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PPUSH
31102: CALL_OW 69
31106: ST_TO_ADDR
// if not tmp then
31107: LD_VAR 0 1
31111: NOT
31112: IFFALSE 31116
// exit ;
31114: GO 31142
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31116: LD_VAR 0 1
31120: PUSH
31121: LD_INT 1
31123: PPUSH
31124: LD_VAR 0 1
31128: PPUSH
31129: CALL_OW 12
31133: ARRAY
31134: PPUSH
31135: LD_INT 1
31137: PPUSH
31138: CALL_OW 234
// end ;
31142: PPOPN 1
31144: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31145: LD_EXP 51
31149: PUSH
31150: LD_EXP 99
31154: AND
31155: IFFALSE 31267
31157: GO 31159
31159: DISABLE
31160: LD_INT 0
31162: PPUSH
31163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31164: LD_ADDR_VAR 0 2
31168: PUSH
31169: LD_INT 22
31171: PUSH
31172: LD_OWVAR 2
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 2
31183: PUSH
31184: LD_INT 30
31186: PUSH
31187: LD_INT 27
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 30
31196: PUSH
31197: LD_INT 26
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 30
31206: PUSH
31207: LD_INT 28
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PPUSH
31224: CALL_OW 69
31228: ST_TO_ADDR
// if not tmp then
31229: LD_VAR 0 2
31233: NOT
31234: IFFALSE 31238
// exit ;
31236: GO 31267
// for i in tmp do
31238: LD_ADDR_VAR 0 1
31242: PUSH
31243: LD_VAR 0 2
31247: PUSH
31248: FOR_IN
31249: IFFALSE 31265
// SetLives ( i , 1 ) ;
31251: LD_VAR 0 1
31255: PPUSH
31256: LD_INT 1
31258: PPUSH
31259: CALL_OW 234
31263: GO 31248
31265: POP
31266: POP
// end ;
31267: PPOPN 2
31269: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31270: LD_EXP 51
31274: PUSH
31275: LD_EXP 100
31279: AND
31280: IFFALSE 31567
31282: GO 31284
31284: DISABLE
31285: LD_INT 0
31287: PPUSH
31288: PPUSH
31289: PPUSH
// begin i := rand ( 1 , 7 ) ;
31290: LD_ADDR_VAR 0 1
31294: PUSH
31295: LD_INT 1
31297: PPUSH
31298: LD_INT 7
31300: PPUSH
31301: CALL_OW 12
31305: ST_TO_ADDR
// case i of 1 :
31306: LD_VAR 0 1
31310: PUSH
31311: LD_INT 1
31313: DOUBLE
31314: EQUAL
31315: IFTRUE 31319
31317: GO 31329
31319: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31320: LD_STRING earthquake(getX(game), 0, 32)
31322: PPUSH
31323: CALL_OW 559
31327: GO 31567
31329: LD_INT 2
31331: DOUBLE
31332: EQUAL
31333: IFTRUE 31337
31335: GO 31351
31337: POP
// begin ToLua ( displayStucuk(); ) ;
31338: LD_STRING displayStucuk();
31340: PPUSH
31341: CALL_OW 559
// ResetFog ;
31345: CALL_OW 335
// end ; 3 :
31349: GO 31567
31351: LD_INT 3
31353: DOUBLE
31354: EQUAL
31355: IFTRUE 31359
31357: GO 31463
31359: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31360: LD_ADDR_VAR 0 2
31364: PUSH
31365: LD_INT 22
31367: PUSH
31368: LD_OWVAR 2
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 25
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PPUSH
31391: CALL_OW 69
31395: ST_TO_ADDR
// if not tmp then
31396: LD_VAR 0 2
31400: NOT
31401: IFFALSE 31405
// exit ;
31403: GO 31567
// un := tmp [ rand ( 1 , tmp ) ] ;
31405: LD_ADDR_VAR 0 3
31409: PUSH
31410: LD_VAR 0 2
31414: PUSH
31415: LD_INT 1
31417: PPUSH
31418: LD_VAR 0 2
31422: PPUSH
31423: CALL_OW 12
31427: ARRAY
31428: ST_TO_ADDR
// if Crawls ( un ) then
31429: LD_VAR 0 3
31433: PPUSH
31434: CALL_OW 318
31438: IFFALSE 31449
// ComWalk ( un ) ;
31440: LD_VAR 0 3
31444: PPUSH
31445: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31449: LD_VAR 0 3
31453: PPUSH
31454: LD_INT 8
31456: PPUSH
31457: CALL_OW 336
// end ; 4 :
31461: GO 31567
31463: LD_INT 4
31465: DOUBLE
31466: EQUAL
31467: IFTRUE 31471
31469: GO 31545
31471: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31472: LD_ADDR_VAR 0 2
31476: PUSH
31477: LD_INT 22
31479: PUSH
31480: LD_OWVAR 2
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 30
31491: PUSH
31492: LD_INT 29
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PPUSH
31503: CALL_OW 69
31507: ST_TO_ADDR
// if not tmp then
31508: LD_VAR 0 2
31512: NOT
31513: IFFALSE 31517
// exit ;
31515: GO 31567
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31517: LD_VAR 0 2
31521: PUSH
31522: LD_INT 1
31524: ARRAY
31525: PPUSH
31526: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31530: LD_VAR 0 2
31534: PUSH
31535: LD_INT 1
31537: ARRAY
31538: PPUSH
31539: CALL_OW 65
// end ; 5 .. 7 :
31543: GO 31567
31545: LD_INT 5
31547: DOUBLE
31548: GREATEREQUAL
31549: IFFALSE 31557
31551: LD_INT 7
31553: DOUBLE
31554: LESSEQUAL
31555: IFTRUE 31559
31557: GO 31566
31559: POP
// StreamSibBomb ; end ;
31560: CALL 27804 0 0
31564: GO 31567
31566: POP
// end ;
31567: PPOPN 3
31569: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31570: LD_EXP 51
31574: PUSH
31575: LD_EXP 101
31579: AND
31580: IFFALSE 31736
31582: GO 31584
31584: DISABLE
31585: LD_INT 0
31587: PPUSH
31588: PPUSH
31589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31590: LD_ADDR_VAR 0 2
31594: PUSH
31595: LD_INT 81
31597: PUSH
31598: LD_OWVAR 2
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: LD_INT 21
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 21
31622: PUSH
31623: LD_INT 2
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PPUSH
31639: CALL_OW 69
31643: ST_TO_ADDR
// if not tmp then
31644: LD_VAR 0 2
31648: NOT
31649: IFFALSE 31653
// exit ;
31651: GO 31736
// p := 0 ;
31653: LD_ADDR_VAR 0 3
31657: PUSH
31658: LD_INT 0
31660: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31661: LD_INT 35
31663: PPUSH
31664: CALL_OW 67
// p := p + 1 ;
31668: LD_ADDR_VAR 0 3
31672: PUSH
31673: LD_VAR 0 3
31677: PUSH
31678: LD_INT 1
31680: PLUS
31681: ST_TO_ADDR
// for i in tmp do
31682: LD_ADDR_VAR 0 1
31686: PUSH
31687: LD_VAR 0 2
31691: PUSH
31692: FOR_IN
31693: IFFALSE 31724
// if GetLives ( i ) < 1000 then
31695: LD_VAR 0 1
31699: PPUSH
31700: CALL_OW 256
31704: PUSH
31705: LD_INT 1000
31707: LESS
31708: IFFALSE 31722
// SetLives ( i , 1000 ) ;
31710: LD_VAR 0 1
31714: PPUSH
31715: LD_INT 1000
31717: PPUSH
31718: CALL_OW 234
31722: GO 31692
31724: POP
31725: POP
// until p > 20 ;
31726: LD_VAR 0 3
31730: PUSH
31731: LD_INT 20
31733: GREATER
31734: IFFALSE 31661
// end ;
31736: PPOPN 3
31738: END
// every 0 0$1 trigger StreamModeActive and sTime do
31739: LD_EXP 51
31743: PUSH
31744: LD_EXP 102
31748: AND
31749: IFFALSE 31784
31751: GO 31753
31753: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31754: LD_INT 28
31756: PPUSH
31757: LD_OWVAR 2
31761: PPUSH
31762: LD_INT 2
31764: PPUSH
31765: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31769: LD_INT 30
31771: PPUSH
31772: LD_OWVAR 2
31776: PPUSH
31777: LD_INT 2
31779: PPUSH
31780: CALL_OW 322
// end ;
31784: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31785: LD_EXP 51
31789: PUSH
31790: LD_EXP 103
31794: AND
31795: IFFALSE 31916
31797: GO 31799
31799: DISABLE
31800: LD_INT 0
31802: PPUSH
31803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31804: LD_ADDR_VAR 0 2
31808: PUSH
31809: LD_INT 22
31811: PUSH
31812: LD_OWVAR 2
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 21
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 3
31833: PUSH
31834: LD_INT 23
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: LIST
31852: PPUSH
31853: CALL_OW 69
31857: ST_TO_ADDR
// if not tmp then
31858: LD_VAR 0 2
31862: NOT
31863: IFFALSE 31867
// exit ;
31865: GO 31916
// for i in tmp do
31867: LD_ADDR_VAR 0 1
31871: PUSH
31872: LD_VAR 0 2
31876: PUSH
31877: FOR_IN
31878: IFFALSE 31914
// begin if Crawls ( i ) then
31880: LD_VAR 0 1
31884: PPUSH
31885: CALL_OW 318
31889: IFFALSE 31900
// ComWalk ( i ) ;
31891: LD_VAR 0 1
31895: PPUSH
31896: CALL_OW 138
// SetClass ( i , 2 ) ;
31900: LD_VAR 0 1
31904: PPUSH
31905: LD_INT 2
31907: PPUSH
31908: CALL_OW 336
// end ;
31912: GO 31877
31914: POP
31915: POP
// end ;
31916: PPOPN 2
31918: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31919: LD_EXP 51
31923: PUSH
31924: LD_EXP 104
31928: AND
31929: IFFALSE 32217
31931: GO 31933
31933: DISABLE
31934: LD_INT 0
31936: PPUSH
31937: PPUSH
31938: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31939: LD_OWVAR 2
31943: PPUSH
31944: LD_INT 9
31946: PPUSH
31947: LD_INT 1
31949: PPUSH
31950: LD_INT 1
31952: PPUSH
31953: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31957: LD_INT 9
31959: PPUSH
31960: LD_OWVAR 2
31964: PPUSH
31965: CALL_OW 343
// uc_side := 9 ;
31969: LD_ADDR_OWVAR 20
31973: PUSH
31974: LD_INT 9
31976: ST_TO_ADDR
// uc_nation := 2 ;
31977: LD_ADDR_OWVAR 21
31981: PUSH
31982: LD_INT 2
31984: ST_TO_ADDR
// hc_name := Dark Warrior ;
31985: LD_ADDR_OWVAR 26
31989: PUSH
31990: LD_STRING Dark Warrior
31992: ST_TO_ADDR
// hc_gallery :=  ;
31993: LD_ADDR_OWVAR 33
31997: PUSH
31998: LD_STRING 
32000: ST_TO_ADDR
// hc_noskilllimit := true ;
32001: LD_ADDR_OWVAR 76
32005: PUSH
32006: LD_INT 1
32008: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32009: LD_ADDR_OWVAR 31
32013: PUSH
32014: LD_INT 30
32016: PUSH
32017: LD_INT 30
32019: PUSH
32020: LD_INT 30
32022: PUSH
32023: LD_INT 30
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: ST_TO_ADDR
// un := CreateHuman ;
32032: LD_ADDR_VAR 0 3
32036: PUSH
32037: CALL_OW 44
32041: ST_TO_ADDR
// hc_noskilllimit := false ;
32042: LD_ADDR_OWVAR 76
32046: PUSH
32047: LD_INT 0
32049: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32050: LD_VAR 0 3
32054: PPUSH
32055: LD_INT 1
32057: PPUSH
32058: CALL_OW 51
// ToLua ( playRanger() ) ;
32062: LD_STRING playRanger()
32064: PPUSH
32065: CALL_OW 559
// p := 0 ;
32069: LD_ADDR_VAR 0 2
32073: PUSH
32074: LD_INT 0
32076: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32077: LD_INT 35
32079: PPUSH
32080: CALL_OW 67
// p := p + 1 ;
32084: LD_ADDR_VAR 0 2
32088: PUSH
32089: LD_VAR 0 2
32093: PUSH
32094: LD_INT 1
32096: PLUS
32097: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32098: LD_VAR 0 3
32102: PPUSH
32103: CALL_OW 256
32107: PUSH
32108: LD_INT 1000
32110: LESS
32111: IFFALSE 32125
// SetLives ( un , 1000 ) ;
32113: LD_VAR 0 3
32117: PPUSH
32118: LD_INT 1000
32120: PPUSH
32121: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32125: LD_VAR 0 3
32129: PPUSH
32130: LD_INT 81
32132: PUSH
32133: LD_OWVAR 2
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 91
32144: PUSH
32145: LD_VAR 0 3
32149: PUSH
32150: LD_INT 30
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PPUSH
32162: CALL_OW 69
32166: PPUSH
32167: LD_VAR 0 3
32171: PPUSH
32172: CALL_OW 74
32176: PPUSH
32177: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32181: LD_VAR 0 2
32185: PUSH
32186: LD_INT 80
32188: GREATER
32189: PUSH
32190: LD_VAR 0 3
32194: PPUSH
32195: CALL_OW 301
32199: OR
32200: IFFALSE 32077
// if un then
32202: LD_VAR 0 3
32206: IFFALSE 32217
// RemoveUnit ( un ) ;
32208: LD_VAR 0 3
32212: PPUSH
32213: CALL_OW 64
// end ;
32217: PPOPN 3
32219: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32220: LD_EXP 105
32224: IFFALSE 32340
32226: GO 32228
32228: DISABLE
32229: LD_INT 0
32231: PPUSH
32232: PPUSH
32233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32234: LD_ADDR_VAR 0 2
32238: PUSH
32239: LD_INT 81
32241: PUSH
32242: LD_OWVAR 2
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 21
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PPUSH
32265: CALL_OW 69
32269: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32270: LD_STRING playComputer()
32272: PPUSH
32273: CALL_OW 559
// if not tmp then
32277: LD_VAR 0 2
32281: NOT
32282: IFFALSE 32286
// exit ;
32284: GO 32340
// for i in tmp do
32286: LD_ADDR_VAR 0 1
32290: PUSH
32291: LD_VAR 0 2
32295: PUSH
32296: FOR_IN
32297: IFFALSE 32338
// for j := 1 to 4 do
32299: LD_ADDR_VAR 0 3
32303: PUSH
32304: DOUBLE
32305: LD_INT 1
32307: DEC
32308: ST_TO_ADDR
32309: LD_INT 4
32311: PUSH
32312: FOR_TO
32313: IFFALSE 32334
// SetSkill ( i , j , 10 ) ;
32315: LD_VAR 0 1
32319: PPUSH
32320: LD_VAR 0 3
32324: PPUSH
32325: LD_INT 10
32327: PPUSH
32328: CALL_OW 237
32332: GO 32312
32334: POP
32335: POP
32336: GO 32296
32338: POP
32339: POP
// end ;
32340: PPOPN 3
32342: END
// every 0 0$1 trigger s30 do var i , tmp ;
32343: LD_EXP 106
32347: IFFALSE 32416
32349: GO 32351
32351: DISABLE
32352: LD_INT 0
32354: PPUSH
32355: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32356: LD_ADDR_VAR 0 2
32360: PUSH
32361: LD_INT 22
32363: PUSH
32364: LD_OWVAR 2
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PPUSH
32373: CALL_OW 69
32377: ST_TO_ADDR
// if not tmp then
32378: LD_VAR 0 2
32382: NOT
32383: IFFALSE 32387
// exit ;
32385: GO 32416
// for i in tmp do
32387: LD_ADDR_VAR 0 1
32391: PUSH
32392: LD_VAR 0 2
32396: PUSH
32397: FOR_IN
32398: IFFALSE 32414
// SetLives ( i , 300 ) ;
32400: LD_VAR 0 1
32404: PPUSH
32405: LD_INT 300
32407: PPUSH
32408: CALL_OW 234
32412: GO 32397
32414: POP
32415: POP
// end ;
32416: PPOPN 2
32418: END
// every 0 0$1 trigger s60 do var i , tmp ;
32419: LD_EXP 107
32423: IFFALSE 32492
32425: GO 32427
32427: DISABLE
32428: LD_INT 0
32430: PPUSH
32431: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32432: LD_ADDR_VAR 0 2
32436: PUSH
32437: LD_INT 22
32439: PUSH
32440: LD_OWVAR 2
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PPUSH
32449: CALL_OW 69
32453: ST_TO_ADDR
// if not tmp then
32454: LD_VAR 0 2
32458: NOT
32459: IFFALSE 32463
// exit ;
32461: GO 32492
// for i in tmp do
32463: LD_ADDR_VAR 0 1
32467: PUSH
32468: LD_VAR 0 2
32472: PUSH
32473: FOR_IN
32474: IFFALSE 32490
// SetLives ( i , 600 ) ;
32476: LD_VAR 0 1
32480: PPUSH
32481: LD_INT 600
32483: PPUSH
32484: CALL_OW 234
32488: GO 32473
32490: POP
32491: POP
// end ;
32492: PPOPN 2
32494: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32495: LD_INT 0
32497: PPUSH
// case cmd of 301 :
32498: LD_VAR 0 1
32502: PUSH
32503: LD_INT 301
32505: DOUBLE
32506: EQUAL
32507: IFTRUE 32511
32509: GO 32543
32511: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32512: LD_VAR 0 6
32516: PPUSH
32517: LD_VAR 0 7
32521: PPUSH
32522: LD_VAR 0 8
32526: PPUSH
32527: LD_VAR 0 4
32531: PPUSH
32532: LD_VAR 0 5
32536: PPUSH
32537: CALL 33744 0 5
32541: GO 32664
32543: LD_INT 302
32545: DOUBLE
32546: EQUAL
32547: IFTRUE 32551
32549: GO 32588
32551: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32552: LD_VAR 0 6
32556: PPUSH
32557: LD_VAR 0 7
32561: PPUSH
32562: LD_VAR 0 8
32566: PPUSH
32567: LD_VAR 0 9
32571: PPUSH
32572: LD_VAR 0 4
32576: PPUSH
32577: LD_VAR 0 5
32581: PPUSH
32582: CALL 33835 0 6
32586: GO 32664
32588: LD_INT 303
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32596
32594: GO 32633
32596: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32597: LD_VAR 0 6
32601: PPUSH
32602: LD_VAR 0 7
32606: PPUSH
32607: LD_VAR 0 8
32611: PPUSH
32612: LD_VAR 0 9
32616: PPUSH
32617: LD_VAR 0 4
32621: PPUSH
32622: LD_VAR 0 5
32626: PPUSH
32627: CALL 32669 0 6
32631: GO 32664
32633: LD_INT 304
32635: DOUBLE
32636: EQUAL
32637: IFTRUE 32641
32639: GO 32663
32641: POP
// hHackTeleport ( unit , x , y ) ; end ;
32642: LD_VAR 0 2
32646: PPUSH
32647: LD_VAR 0 4
32651: PPUSH
32652: LD_VAR 0 5
32656: PPUSH
32657: CALL 34428 0 3
32661: GO 32664
32663: POP
// end ;
32664: LD_VAR 0 12
32668: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32669: LD_INT 0
32671: PPUSH
32672: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32673: LD_VAR 0 1
32677: PUSH
32678: LD_INT 1
32680: LESS
32681: PUSH
32682: LD_VAR 0 1
32686: PUSH
32687: LD_INT 3
32689: GREATER
32690: OR
32691: PUSH
32692: LD_VAR 0 5
32696: PPUSH
32697: LD_VAR 0 6
32701: PPUSH
32702: CALL_OW 428
32706: OR
32707: IFFALSE 32711
// exit ;
32709: GO 33431
// uc_side := your_side ;
32711: LD_ADDR_OWVAR 20
32715: PUSH
32716: LD_OWVAR 2
32720: ST_TO_ADDR
// uc_nation := nation ;
32721: LD_ADDR_OWVAR 21
32725: PUSH
32726: LD_VAR 0 1
32730: ST_TO_ADDR
// bc_level = 1 ;
32731: LD_ADDR_OWVAR 43
32735: PUSH
32736: LD_INT 1
32738: ST_TO_ADDR
// case btype of 1 :
32739: LD_VAR 0 2
32743: PUSH
32744: LD_INT 1
32746: DOUBLE
32747: EQUAL
32748: IFTRUE 32752
32750: GO 32763
32752: POP
// bc_type := b_depot ; 2 :
32753: LD_ADDR_OWVAR 42
32757: PUSH
32758: LD_INT 0
32760: ST_TO_ADDR
32761: GO 33375
32763: LD_INT 2
32765: DOUBLE
32766: EQUAL
32767: IFTRUE 32771
32769: GO 32782
32771: POP
// bc_type := b_warehouse ; 3 :
32772: LD_ADDR_OWVAR 42
32776: PUSH
32777: LD_INT 1
32779: ST_TO_ADDR
32780: GO 33375
32782: LD_INT 3
32784: DOUBLE
32785: EQUAL
32786: IFTRUE 32790
32788: GO 32801
32790: POP
// bc_type := b_lab ; 4 .. 9 :
32791: LD_ADDR_OWVAR 42
32795: PUSH
32796: LD_INT 6
32798: ST_TO_ADDR
32799: GO 33375
32801: LD_INT 4
32803: DOUBLE
32804: GREATEREQUAL
32805: IFFALSE 32813
32807: LD_INT 9
32809: DOUBLE
32810: LESSEQUAL
32811: IFTRUE 32815
32813: GO 32867
32815: POP
// begin bc_type := b_lab_half ;
32816: LD_ADDR_OWVAR 42
32820: PUSH
32821: LD_INT 7
32823: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32824: LD_ADDR_OWVAR 44
32828: PUSH
32829: LD_INT 10
32831: PUSH
32832: LD_INT 11
32834: PUSH
32835: LD_INT 12
32837: PUSH
32838: LD_INT 15
32840: PUSH
32841: LD_INT 14
32843: PUSH
32844: LD_INT 13
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: PUSH
32855: LD_VAR 0 2
32859: PUSH
32860: LD_INT 3
32862: MINUS
32863: ARRAY
32864: ST_TO_ADDR
// end ; 10 .. 13 :
32865: GO 33375
32867: LD_INT 10
32869: DOUBLE
32870: GREATEREQUAL
32871: IFFALSE 32879
32873: LD_INT 13
32875: DOUBLE
32876: LESSEQUAL
32877: IFTRUE 32881
32879: GO 32958
32881: POP
// begin bc_type := b_lab_full ;
32882: LD_ADDR_OWVAR 42
32886: PUSH
32887: LD_INT 8
32889: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32890: LD_ADDR_OWVAR 44
32894: PUSH
32895: LD_INT 10
32897: PUSH
32898: LD_INT 12
32900: PUSH
32901: LD_INT 14
32903: PUSH
32904: LD_INT 13
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: PUSH
32913: LD_VAR 0 2
32917: PUSH
32918: LD_INT 9
32920: MINUS
32921: ARRAY
32922: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32923: LD_ADDR_OWVAR 45
32927: PUSH
32928: LD_INT 11
32930: PUSH
32931: LD_INT 15
32933: PUSH
32934: LD_INT 12
32936: PUSH
32937: LD_INT 15
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: PUSH
32946: LD_VAR 0 2
32950: PUSH
32951: LD_INT 9
32953: MINUS
32954: ARRAY
32955: ST_TO_ADDR
// end ; 14 :
32956: GO 33375
32958: LD_INT 14
32960: DOUBLE
32961: EQUAL
32962: IFTRUE 32966
32964: GO 32977
32966: POP
// bc_type := b_workshop ; 15 :
32967: LD_ADDR_OWVAR 42
32971: PUSH
32972: LD_INT 2
32974: ST_TO_ADDR
32975: GO 33375
32977: LD_INT 15
32979: DOUBLE
32980: EQUAL
32981: IFTRUE 32985
32983: GO 32996
32985: POP
// bc_type := b_factory ; 16 :
32986: LD_ADDR_OWVAR 42
32990: PUSH
32991: LD_INT 3
32993: ST_TO_ADDR
32994: GO 33375
32996: LD_INT 16
32998: DOUBLE
32999: EQUAL
33000: IFTRUE 33004
33002: GO 33015
33004: POP
// bc_type := b_ext_gun ; 17 :
33005: LD_ADDR_OWVAR 42
33009: PUSH
33010: LD_INT 17
33012: ST_TO_ADDR
33013: GO 33375
33015: LD_INT 17
33017: DOUBLE
33018: EQUAL
33019: IFTRUE 33023
33021: GO 33051
33023: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33024: LD_ADDR_OWVAR 42
33028: PUSH
33029: LD_INT 19
33031: PUSH
33032: LD_INT 23
33034: PUSH
33035: LD_INT 19
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: PUSH
33043: LD_VAR 0 1
33047: ARRAY
33048: ST_TO_ADDR
33049: GO 33375
33051: LD_INT 18
33053: DOUBLE
33054: EQUAL
33055: IFTRUE 33059
33057: GO 33070
33059: POP
// bc_type := b_ext_radar ; 19 :
33060: LD_ADDR_OWVAR 42
33064: PUSH
33065: LD_INT 20
33067: ST_TO_ADDR
33068: GO 33375
33070: LD_INT 19
33072: DOUBLE
33073: EQUAL
33074: IFTRUE 33078
33076: GO 33089
33078: POP
// bc_type := b_ext_radio ; 20 :
33079: LD_ADDR_OWVAR 42
33083: PUSH
33084: LD_INT 22
33086: ST_TO_ADDR
33087: GO 33375
33089: LD_INT 20
33091: DOUBLE
33092: EQUAL
33093: IFTRUE 33097
33095: GO 33108
33097: POP
// bc_type := b_ext_siberium ; 21 :
33098: LD_ADDR_OWVAR 42
33102: PUSH
33103: LD_INT 21
33105: ST_TO_ADDR
33106: GO 33375
33108: LD_INT 21
33110: DOUBLE
33111: EQUAL
33112: IFTRUE 33116
33114: GO 33127
33116: POP
// bc_type := b_ext_computer ; 22 :
33117: LD_ADDR_OWVAR 42
33121: PUSH
33122: LD_INT 24
33124: ST_TO_ADDR
33125: GO 33375
33127: LD_INT 22
33129: DOUBLE
33130: EQUAL
33131: IFTRUE 33135
33133: GO 33146
33135: POP
// bc_type := b_ext_track ; 23 :
33136: LD_ADDR_OWVAR 42
33140: PUSH
33141: LD_INT 16
33143: ST_TO_ADDR
33144: GO 33375
33146: LD_INT 23
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33165
33154: POP
// bc_type := b_ext_laser ; 24 :
33155: LD_ADDR_OWVAR 42
33159: PUSH
33160: LD_INT 25
33162: ST_TO_ADDR
33163: GO 33375
33165: LD_INT 24
33167: DOUBLE
33168: EQUAL
33169: IFTRUE 33173
33171: GO 33184
33173: POP
// bc_type := b_control_tower ; 25 :
33174: LD_ADDR_OWVAR 42
33178: PUSH
33179: LD_INT 36
33181: ST_TO_ADDR
33182: GO 33375
33184: LD_INT 25
33186: DOUBLE
33187: EQUAL
33188: IFTRUE 33192
33190: GO 33203
33192: POP
// bc_type := b_breastwork ; 26 :
33193: LD_ADDR_OWVAR 42
33197: PUSH
33198: LD_INT 31
33200: ST_TO_ADDR
33201: GO 33375
33203: LD_INT 26
33205: DOUBLE
33206: EQUAL
33207: IFTRUE 33211
33209: GO 33222
33211: POP
// bc_type := b_bunker ; 27 :
33212: LD_ADDR_OWVAR 42
33216: PUSH
33217: LD_INT 32
33219: ST_TO_ADDR
33220: GO 33375
33222: LD_INT 27
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33241
33230: POP
// bc_type := b_turret ; 28 :
33231: LD_ADDR_OWVAR 42
33235: PUSH
33236: LD_INT 33
33238: ST_TO_ADDR
33239: GO 33375
33241: LD_INT 28
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33249
33247: GO 33260
33249: POP
// bc_type := b_armoury ; 29 :
33250: LD_ADDR_OWVAR 42
33254: PUSH
33255: LD_INT 4
33257: ST_TO_ADDR
33258: GO 33375
33260: LD_INT 29
33262: DOUBLE
33263: EQUAL
33264: IFTRUE 33268
33266: GO 33279
33268: POP
// bc_type := b_barracks ; 30 :
33269: LD_ADDR_OWVAR 42
33273: PUSH
33274: LD_INT 5
33276: ST_TO_ADDR
33277: GO 33375
33279: LD_INT 30
33281: DOUBLE
33282: EQUAL
33283: IFTRUE 33287
33285: GO 33298
33287: POP
// bc_type := b_solar_power ; 31 :
33288: LD_ADDR_OWVAR 42
33292: PUSH
33293: LD_INT 27
33295: ST_TO_ADDR
33296: GO 33375
33298: LD_INT 31
33300: DOUBLE
33301: EQUAL
33302: IFTRUE 33306
33304: GO 33317
33306: POP
// bc_type := b_oil_power ; 32 :
33307: LD_ADDR_OWVAR 42
33311: PUSH
33312: LD_INT 26
33314: ST_TO_ADDR
33315: GO 33375
33317: LD_INT 32
33319: DOUBLE
33320: EQUAL
33321: IFTRUE 33325
33323: GO 33336
33325: POP
// bc_type := b_siberite_power ; 33 :
33326: LD_ADDR_OWVAR 42
33330: PUSH
33331: LD_INT 28
33333: ST_TO_ADDR
33334: GO 33375
33336: LD_INT 33
33338: DOUBLE
33339: EQUAL
33340: IFTRUE 33344
33342: GO 33355
33344: POP
// bc_type := b_oil_mine ; 34 :
33345: LD_ADDR_OWVAR 42
33349: PUSH
33350: LD_INT 29
33352: ST_TO_ADDR
33353: GO 33375
33355: LD_INT 34
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33363
33361: GO 33374
33363: POP
// bc_type := b_siberite_mine ; end ;
33364: LD_ADDR_OWVAR 42
33368: PUSH
33369: LD_INT 30
33371: ST_TO_ADDR
33372: GO 33375
33374: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33375: LD_ADDR_VAR 0 8
33379: PUSH
33380: LD_VAR 0 5
33384: PPUSH
33385: LD_VAR 0 6
33389: PPUSH
33390: LD_VAR 0 3
33394: PPUSH
33395: CALL_OW 47
33399: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33400: LD_OWVAR 42
33404: PUSH
33405: LD_INT 32
33407: PUSH
33408: LD_INT 33
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: IN
33415: IFFALSE 33431
// PlaceWeaponTurret ( b , weapon ) ;
33417: LD_VAR 0 8
33421: PPUSH
33422: LD_VAR 0 4
33426: PPUSH
33427: CALL_OW 431
// end ;
33431: LD_VAR 0 7
33435: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33436: LD_INT 0
33438: PPUSH
33439: PPUSH
33440: PPUSH
33441: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33442: LD_ADDR_VAR 0 4
33446: PUSH
33447: LD_INT 22
33449: PUSH
33450: LD_OWVAR 2
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 2
33461: PUSH
33462: LD_INT 30
33464: PUSH
33465: LD_INT 0
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 30
33474: PUSH
33475: LD_INT 1
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: LIST
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PPUSH
33491: CALL_OW 69
33495: ST_TO_ADDR
// if not tmp then
33496: LD_VAR 0 4
33500: NOT
33501: IFFALSE 33505
// exit ;
33503: GO 33564
// for i in tmp do
33505: LD_ADDR_VAR 0 2
33509: PUSH
33510: LD_VAR 0 4
33514: PUSH
33515: FOR_IN
33516: IFFALSE 33562
// for j = 1 to 3 do
33518: LD_ADDR_VAR 0 3
33522: PUSH
33523: DOUBLE
33524: LD_INT 1
33526: DEC
33527: ST_TO_ADDR
33528: LD_INT 3
33530: PUSH
33531: FOR_TO
33532: IFFALSE 33558
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33534: LD_VAR 0 2
33538: PPUSH
33539: CALL_OW 274
33543: PPUSH
33544: LD_VAR 0 3
33548: PPUSH
33549: LD_INT 99999
33551: PPUSH
33552: CALL_OW 277
33556: GO 33531
33558: POP
33559: POP
33560: GO 33515
33562: POP
33563: POP
// end ;
33564: LD_VAR 0 1
33568: RET
// export function hHackSetLevel10 ; var i , j ; begin
33569: LD_INT 0
33571: PPUSH
33572: PPUSH
33573: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33574: LD_ADDR_VAR 0 2
33578: PUSH
33579: LD_INT 21
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PPUSH
33589: CALL_OW 69
33593: PUSH
33594: FOR_IN
33595: IFFALSE 33647
// if IsSelected ( i ) then
33597: LD_VAR 0 2
33601: PPUSH
33602: CALL_OW 306
33606: IFFALSE 33645
// begin for j := 1 to 4 do
33608: LD_ADDR_VAR 0 3
33612: PUSH
33613: DOUBLE
33614: LD_INT 1
33616: DEC
33617: ST_TO_ADDR
33618: LD_INT 4
33620: PUSH
33621: FOR_TO
33622: IFFALSE 33643
// SetSkill ( i , j , 10 ) ;
33624: LD_VAR 0 2
33628: PPUSH
33629: LD_VAR 0 3
33633: PPUSH
33634: LD_INT 10
33636: PPUSH
33637: CALL_OW 237
33641: GO 33621
33643: POP
33644: POP
// end ;
33645: GO 33594
33647: POP
33648: POP
// end ;
33649: LD_VAR 0 1
33653: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33654: LD_INT 0
33656: PPUSH
33657: PPUSH
33658: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33659: LD_ADDR_VAR 0 2
33663: PUSH
33664: LD_INT 22
33666: PUSH
33667: LD_OWVAR 2
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 21
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PPUSH
33690: CALL_OW 69
33694: PUSH
33695: FOR_IN
33696: IFFALSE 33737
// begin for j := 1 to 4 do
33698: LD_ADDR_VAR 0 3
33702: PUSH
33703: DOUBLE
33704: LD_INT 1
33706: DEC
33707: ST_TO_ADDR
33708: LD_INT 4
33710: PUSH
33711: FOR_TO
33712: IFFALSE 33733
// SetSkill ( i , j , 10 ) ;
33714: LD_VAR 0 2
33718: PPUSH
33719: LD_VAR 0 3
33723: PPUSH
33724: LD_INT 10
33726: PPUSH
33727: CALL_OW 237
33731: GO 33711
33733: POP
33734: POP
// end ;
33735: GO 33695
33737: POP
33738: POP
// end ;
33739: LD_VAR 0 1
33743: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33744: LD_INT 0
33746: PPUSH
// uc_side := your_side ;
33747: LD_ADDR_OWVAR 20
33751: PUSH
33752: LD_OWVAR 2
33756: ST_TO_ADDR
// uc_nation := nation ;
33757: LD_ADDR_OWVAR 21
33761: PUSH
33762: LD_VAR 0 1
33766: ST_TO_ADDR
// InitHc ;
33767: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33771: LD_INT 0
33773: PPUSH
33774: LD_VAR 0 2
33778: PPUSH
33779: LD_VAR 0 3
33783: PPUSH
33784: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33788: LD_VAR 0 4
33792: PPUSH
33793: LD_VAR 0 5
33797: PPUSH
33798: CALL_OW 428
33802: PUSH
33803: LD_INT 0
33805: EQUAL
33806: IFFALSE 33830
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33808: CALL_OW 44
33812: PPUSH
33813: LD_VAR 0 4
33817: PPUSH
33818: LD_VAR 0 5
33822: PPUSH
33823: LD_INT 1
33825: PPUSH
33826: CALL_OW 48
// end ;
33830: LD_VAR 0 6
33834: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33835: LD_INT 0
33837: PPUSH
33838: PPUSH
// uc_side := your_side ;
33839: LD_ADDR_OWVAR 20
33843: PUSH
33844: LD_OWVAR 2
33848: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33849: LD_VAR 0 1
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: LD_INT 3
33862: PUSH
33863: LD_INT 4
33865: PUSH
33866: LD_INT 5
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: IN
33876: IFFALSE 33888
// uc_nation := nation_american else
33878: LD_ADDR_OWVAR 21
33882: PUSH
33883: LD_INT 1
33885: ST_TO_ADDR
33886: GO 33931
// if chassis in [ 11 , 12 , 13 , 14 ] then
33888: LD_VAR 0 1
33892: PUSH
33893: LD_INT 11
33895: PUSH
33896: LD_INT 12
33898: PUSH
33899: LD_INT 13
33901: PUSH
33902: LD_INT 14
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: IN
33911: IFFALSE 33923
// uc_nation := nation_arabian else
33913: LD_ADDR_OWVAR 21
33917: PUSH
33918: LD_INT 2
33920: ST_TO_ADDR
33921: GO 33931
// uc_nation := nation_russian ;
33923: LD_ADDR_OWVAR 21
33927: PUSH
33928: LD_INT 3
33930: ST_TO_ADDR
// vc_chassis := chassis ;
33931: LD_ADDR_OWVAR 37
33935: PUSH
33936: LD_VAR 0 1
33940: ST_TO_ADDR
// vc_engine := engine ;
33941: LD_ADDR_OWVAR 39
33945: PUSH
33946: LD_VAR 0 2
33950: ST_TO_ADDR
// vc_control := control ;
33951: LD_ADDR_OWVAR 38
33955: PUSH
33956: LD_VAR 0 3
33960: ST_TO_ADDR
// vc_weapon := weapon ;
33961: LD_ADDR_OWVAR 40
33965: PUSH
33966: LD_VAR 0 4
33970: ST_TO_ADDR
// un := CreateVehicle ;
33971: LD_ADDR_VAR 0 8
33975: PUSH
33976: CALL_OW 45
33980: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33981: LD_VAR 0 8
33985: PPUSH
33986: LD_INT 0
33988: PPUSH
33989: LD_INT 5
33991: PPUSH
33992: CALL_OW 12
33996: PPUSH
33997: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34001: LD_VAR 0 8
34005: PPUSH
34006: LD_VAR 0 5
34010: PPUSH
34011: LD_VAR 0 6
34015: PPUSH
34016: LD_INT 1
34018: PPUSH
34019: CALL_OW 48
// end ;
34023: LD_VAR 0 7
34027: RET
// export hInvincible ; every 1 do
34028: GO 34030
34030: DISABLE
// hInvincible := [ ] ;
34031: LD_ADDR_EXP 108
34035: PUSH
34036: EMPTY
34037: ST_TO_ADDR
34038: END
// every 10 do var i ;
34039: GO 34041
34041: DISABLE
34042: LD_INT 0
34044: PPUSH
// begin enable ;
34045: ENABLE
// if not hInvincible then
34046: LD_EXP 108
34050: NOT
34051: IFFALSE 34055
// exit ;
34053: GO 34099
// for i in hInvincible do
34055: LD_ADDR_VAR 0 1
34059: PUSH
34060: LD_EXP 108
34064: PUSH
34065: FOR_IN
34066: IFFALSE 34097
// if GetLives ( i ) < 1000 then
34068: LD_VAR 0 1
34072: PPUSH
34073: CALL_OW 256
34077: PUSH
34078: LD_INT 1000
34080: LESS
34081: IFFALSE 34095
// SetLives ( i , 1000 ) ;
34083: LD_VAR 0 1
34087: PPUSH
34088: LD_INT 1000
34090: PPUSH
34091: CALL_OW 234
34095: GO 34065
34097: POP
34098: POP
// end ;
34099: PPOPN 1
34101: END
// export function hHackInvincible ; var i ; begin
34102: LD_INT 0
34104: PPUSH
34105: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34106: LD_ADDR_VAR 0 2
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: LD_INT 21
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 21
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: LIST
34138: PPUSH
34139: CALL_OW 69
34143: PUSH
34144: FOR_IN
34145: IFFALSE 34206
// if IsSelected ( i ) then
34147: LD_VAR 0 2
34151: PPUSH
34152: CALL_OW 306
34156: IFFALSE 34204
// begin if i in hInvincible then
34158: LD_VAR 0 2
34162: PUSH
34163: LD_EXP 108
34167: IN
34168: IFFALSE 34188
// hInvincible := hInvincible diff i else
34170: LD_ADDR_EXP 108
34174: PUSH
34175: LD_EXP 108
34179: PUSH
34180: LD_VAR 0 2
34184: DIFF
34185: ST_TO_ADDR
34186: GO 34204
// hInvincible := hInvincible union i ;
34188: LD_ADDR_EXP 108
34192: PUSH
34193: LD_EXP 108
34197: PUSH
34198: LD_VAR 0 2
34202: UNION
34203: ST_TO_ADDR
// end ;
34204: GO 34144
34206: POP
34207: POP
// end ;
34208: LD_VAR 0 1
34212: RET
// export function hHackInvisible ; var i , j ; begin
34213: LD_INT 0
34215: PPUSH
34216: PPUSH
34217: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34218: LD_ADDR_VAR 0 2
34222: PUSH
34223: LD_INT 21
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PPUSH
34233: CALL_OW 69
34237: PUSH
34238: FOR_IN
34239: IFFALSE 34263
// if IsSelected ( i ) then
34241: LD_VAR 0 2
34245: PPUSH
34246: CALL_OW 306
34250: IFFALSE 34261
// ComForceInvisible ( i ) ;
34252: LD_VAR 0 2
34256: PPUSH
34257: CALL_OW 496
34261: GO 34238
34263: POP
34264: POP
// end ;
34265: LD_VAR 0 1
34269: RET
// export function hHackChangeYourSide ; begin
34270: LD_INT 0
34272: PPUSH
// if your_side = 8 then
34273: LD_OWVAR 2
34277: PUSH
34278: LD_INT 8
34280: EQUAL
34281: IFFALSE 34293
// your_side := 0 else
34283: LD_ADDR_OWVAR 2
34287: PUSH
34288: LD_INT 0
34290: ST_TO_ADDR
34291: GO 34307
// your_side := your_side + 1 ;
34293: LD_ADDR_OWVAR 2
34297: PUSH
34298: LD_OWVAR 2
34302: PUSH
34303: LD_INT 1
34305: PLUS
34306: ST_TO_ADDR
// end ;
34307: LD_VAR 0 1
34311: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34312: LD_INT 0
34314: PPUSH
34315: PPUSH
34316: PPUSH
// for i in all_units do
34317: LD_ADDR_VAR 0 2
34321: PUSH
34322: LD_OWVAR 3
34326: PUSH
34327: FOR_IN
34328: IFFALSE 34406
// if IsSelected ( i ) then
34330: LD_VAR 0 2
34334: PPUSH
34335: CALL_OW 306
34339: IFFALSE 34404
// begin j := GetSide ( i ) ;
34341: LD_ADDR_VAR 0 3
34345: PUSH
34346: LD_VAR 0 2
34350: PPUSH
34351: CALL_OW 255
34355: ST_TO_ADDR
// if j = 8 then
34356: LD_VAR 0 3
34360: PUSH
34361: LD_INT 8
34363: EQUAL
34364: IFFALSE 34376
// j := 0 else
34366: LD_ADDR_VAR 0 3
34370: PUSH
34371: LD_INT 0
34373: ST_TO_ADDR
34374: GO 34390
// j := j + 1 ;
34376: LD_ADDR_VAR 0 3
34380: PUSH
34381: LD_VAR 0 3
34385: PUSH
34386: LD_INT 1
34388: PLUS
34389: ST_TO_ADDR
// SetSide ( i , j ) ;
34390: LD_VAR 0 2
34394: PPUSH
34395: LD_VAR 0 3
34399: PPUSH
34400: CALL_OW 235
// end ;
34404: GO 34327
34406: POP
34407: POP
// end ;
34408: LD_VAR 0 1
34412: RET
// export function hHackFog ; begin
34413: LD_INT 0
34415: PPUSH
// FogOff ( true ) ;
34416: LD_INT 1
34418: PPUSH
34419: CALL_OW 344
// end ;
34423: LD_VAR 0 1
34427: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34428: LD_INT 0
34430: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34431: LD_VAR 0 1
34435: PPUSH
34436: LD_VAR 0 2
34440: PPUSH
34441: LD_VAR 0 3
34445: PPUSH
34446: LD_INT 1
34448: PPUSH
34449: LD_INT 1
34451: PPUSH
34452: CALL_OW 483
// CenterOnXY ( x , y ) ;
34456: LD_VAR 0 2
34460: PPUSH
34461: LD_VAR 0 3
34465: PPUSH
34466: CALL_OW 84
// end ;
34470: LD_VAR 0 4
34474: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34475: LD_INT 0
34477: PPUSH
34478: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34479: LD_VAR 0 1
34483: NOT
34484: PUSH
34485: LD_VAR 0 2
34489: PPUSH
34490: LD_VAR 0 3
34494: PPUSH
34495: CALL_OW 488
34499: NOT
34500: OR
34501: PUSH
34502: LD_VAR 0 1
34506: PPUSH
34507: CALL_OW 266
34511: PUSH
34512: LD_INT 3
34514: NONEQUAL
34515: PUSH
34516: LD_VAR 0 1
34520: PPUSH
34521: CALL_OW 247
34525: PUSH
34526: LD_INT 1
34528: EQUAL
34529: NOT
34530: AND
34531: OR
34532: IFFALSE 34536
// exit ;
34534: GO 34685
// if GetType ( factory ) = unit_human then
34536: LD_VAR 0 1
34540: PPUSH
34541: CALL_OW 247
34545: PUSH
34546: LD_INT 1
34548: EQUAL
34549: IFFALSE 34566
// factory := IsInUnit ( factory ) ;
34551: LD_ADDR_VAR 0 1
34555: PUSH
34556: LD_VAR 0 1
34560: PPUSH
34561: CALL_OW 310
34565: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34566: LD_VAR 0 1
34570: PPUSH
34571: CALL_OW 266
34575: PUSH
34576: LD_INT 3
34578: NONEQUAL
34579: IFFALSE 34583
// exit ;
34581: GO 34685
// if HexInfo ( x , y ) = factory then
34583: LD_VAR 0 2
34587: PPUSH
34588: LD_VAR 0 3
34592: PPUSH
34593: CALL_OW 428
34597: PUSH
34598: LD_VAR 0 1
34602: EQUAL
34603: IFFALSE 34630
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34605: LD_ADDR_EXP 109
34609: PUSH
34610: LD_EXP 109
34614: PPUSH
34615: LD_VAR 0 1
34619: PPUSH
34620: LD_INT 0
34622: PPUSH
34623: CALL_OW 1
34627: ST_TO_ADDR
34628: GO 34681
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34630: LD_ADDR_EXP 109
34634: PUSH
34635: LD_EXP 109
34639: PPUSH
34640: LD_VAR 0 1
34644: PPUSH
34645: LD_VAR 0 1
34649: PPUSH
34650: CALL_OW 255
34654: PUSH
34655: LD_VAR 0 1
34659: PUSH
34660: LD_VAR 0 2
34664: PUSH
34665: LD_VAR 0 3
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: PPUSH
34676: CALL_OW 1
34680: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34681: CALL 34690 0 0
// end ;
34685: LD_VAR 0 4
34689: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34690: LD_INT 0
34692: PPUSH
34693: PPUSH
34694: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34695: LD_STRING resetFactoryWaypoint();
34697: PPUSH
34698: CALL_OW 559
// if factoryWaypoints then
34702: LD_EXP 109
34706: IFFALSE 34832
// begin list := PrepareArray ( factoryWaypoints ) ;
34708: LD_ADDR_VAR 0 3
34712: PUSH
34713: LD_EXP 109
34717: PPUSH
34718: CALL 81301 0 1
34722: ST_TO_ADDR
// for i := 1 to list do
34723: LD_ADDR_VAR 0 2
34727: PUSH
34728: DOUBLE
34729: LD_INT 1
34731: DEC
34732: ST_TO_ADDR
34733: LD_VAR 0 3
34737: PUSH
34738: FOR_TO
34739: IFFALSE 34830
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34741: LD_STRING setFactoryWaypointXY(
34743: PUSH
34744: LD_VAR 0 3
34748: PUSH
34749: LD_VAR 0 2
34753: ARRAY
34754: PUSH
34755: LD_INT 1
34757: ARRAY
34758: STR
34759: PUSH
34760: LD_STRING ,
34762: STR
34763: PUSH
34764: LD_VAR 0 3
34768: PUSH
34769: LD_VAR 0 2
34773: ARRAY
34774: PUSH
34775: LD_INT 2
34777: ARRAY
34778: STR
34779: PUSH
34780: LD_STRING ,
34782: STR
34783: PUSH
34784: LD_VAR 0 3
34788: PUSH
34789: LD_VAR 0 2
34793: ARRAY
34794: PUSH
34795: LD_INT 3
34797: ARRAY
34798: STR
34799: PUSH
34800: LD_STRING ,
34802: STR
34803: PUSH
34804: LD_VAR 0 3
34808: PUSH
34809: LD_VAR 0 2
34813: ARRAY
34814: PUSH
34815: LD_INT 4
34817: ARRAY
34818: STR
34819: PUSH
34820: LD_STRING )
34822: STR
34823: PPUSH
34824: CALL_OW 559
34828: GO 34738
34830: POP
34831: POP
// end ; end ;
34832: LD_VAR 0 1
34836: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34837: LD_INT 0
34839: PPUSH
// if HexInfo ( x , y ) = warehouse then
34840: LD_VAR 0 2
34844: PPUSH
34845: LD_VAR 0 3
34849: PPUSH
34850: CALL_OW 428
34854: PUSH
34855: LD_VAR 0 1
34859: EQUAL
34860: IFFALSE 34887
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34862: LD_ADDR_EXP 110
34866: PUSH
34867: LD_EXP 110
34871: PPUSH
34872: LD_VAR 0 1
34876: PPUSH
34877: LD_INT 0
34879: PPUSH
34880: CALL_OW 1
34884: ST_TO_ADDR
34885: GO 34938
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34887: LD_ADDR_EXP 110
34891: PUSH
34892: LD_EXP 110
34896: PPUSH
34897: LD_VAR 0 1
34901: PPUSH
34902: LD_VAR 0 1
34906: PPUSH
34907: CALL_OW 255
34911: PUSH
34912: LD_VAR 0 1
34916: PUSH
34917: LD_VAR 0 2
34921: PUSH
34922: LD_VAR 0 3
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: PPUSH
34933: CALL_OW 1
34937: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34938: CALL 34947 0 0
// end ;
34942: LD_VAR 0 4
34946: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34947: LD_INT 0
34949: PPUSH
34950: PPUSH
34951: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34952: LD_STRING resetWarehouseGatheringPoints();
34954: PPUSH
34955: CALL_OW 559
// if warehouseGatheringPoints then
34959: LD_EXP 110
34963: IFFALSE 35089
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34965: LD_ADDR_VAR 0 3
34969: PUSH
34970: LD_EXP 110
34974: PPUSH
34975: CALL 81301 0 1
34979: ST_TO_ADDR
// for i := 1 to list do
34980: LD_ADDR_VAR 0 2
34984: PUSH
34985: DOUBLE
34986: LD_INT 1
34988: DEC
34989: ST_TO_ADDR
34990: LD_VAR 0 3
34994: PUSH
34995: FOR_TO
34996: IFFALSE 35087
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34998: LD_STRING setWarehouseGatheringPointXY(
35000: PUSH
35001: LD_VAR 0 3
35005: PUSH
35006: LD_VAR 0 2
35010: ARRAY
35011: PUSH
35012: LD_INT 1
35014: ARRAY
35015: STR
35016: PUSH
35017: LD_STRING ,
35019: STR
35020: PUSH
35021: LD_VAR 0 3
35025: PUSH
35026: LD_VAR 0 2
35030: ARRAY
35031: PUSH
35032: LD_INT 2
35034: ARRAY
35035: STR
35036: PUSH
35037: LD_STRING ,
35039: STR
35040: PUSH
35041: LD_VAR 0 3
35045: PUSH
35046: LD_VAR 0 2
35050: ARRAY
35051: PUSH
35052: LD_INT 3
35054: ARRAY
35055: STR
35056: PUSH
35057: LD_STRING ,
35059: STR
35060: PUSH
35061: LD_VAR 0 3
35065: PUSH
35066: LD_VAR 0 2
35070: ARRAY
35071: PUSH
35072: LD_INT 4
35074: ARRAY
35075: STR
35076: PUSH
35077: LD_STRING )
35079: STR
35080: PPUSH
35081: CALL_OW 559
35085: GO 34995
35087: POP
35088: POP
// end ; end ;
35089: LD_VAR 0 1
35093: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35094: LD_EXP 110
35098: IFFALSE 35783
35100: GO 35102
35102: DISABLE
35103: LD_INT 0
35105: PPUSH
35106: PPUSH
35107: PPUSH
35108: PPUSH
35109: PPUSH
35110: PPUSH
35111: PPUSH
35112: PPUSH
35113: PPUSH
// begin enable ;
35114: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35115: LD_ADDR_VAR 0 3
35119: PUSH
35120: LD_EXP 110
35124: PPUSH
35125: CALL 81301 0 1
35129: ST_TO_ADDR
// if not list then
35130: LD_VAR 0 3
35134: NOT
35135: IFFALSE 35139
// exit ;
35137: GO 35783
// for i := 1 to list do
35139: LD_ADDR_VAR 0 1
35143: PUSH
35144: DOUBLE
35145: LD_INT 1
35147: DEC
35148: ST_TO_ADDR
35149: LD_VAR 0 3
35153: PUSH
35154: FOR_TO
35155: IFFALSE 35781
// begin depot := list [ i ] [ 2 ] ;
35157: LD_ADDR_VAR 0 8
35161: PUSH
35162: LD_VAR 0 3
35166: PUSH
35167: LD_VAR 0 1
35171: ARRAY
35172: PUSH
35173: LD_INT 2
35175: ARRAY
35176: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35177: LD_ADDR_VAR 0 5
35181: PUSH
35182: LD_VAR 0 3
35186: PUSH
35187: LD_VAR 0 1
35191: ARRAY
35192: PUSH
35193: LD_INT 1
35195: ARRAY
35196: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35197: LD_VAR 0 8
35201: PPUSH
35202: CALL_OW 301
35206: PUSH
35207: LD_VAR 0 5
35211: PUSH
35212: LD_VAR 0 8
35216: PPUSH
35217: CALL_OW 255
35221: NONEQUAL
35222: OR
35223: IFFALSE 35252
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35225: LD_ADDR_EXP 110
35229: PUSH
35230: LD_EXP 110
35234: PPUSH
35235: LD_VAR 0 8
35239: PPUSH
35240: LD_INT 0
35242: PPUSH
35243: CALL_OW 1
35247: ST_TO_ADDR
// exit ;
35248: POP
35249: POP
35250: GO 35783
// end ; x := list [ i ] [ 3 ] ;
35252: LD_ADDR_VAR 0 6
35256: PUSH
35257: LD_VAR 0 3
35261: PUSH
35262: LD_VAR 0 1
35266: ARRAY
35267: PUSH
35268: LD_INT 3
35270: ARRAY
35271: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35272: LD_ADDR_VAR 0 7
35276: PUSH
35277: LD_VAR 0 3
35281: PUSH
35282: LD_VAR 0 1
35286: ARRAY
35287: PUSH
35288: LD_INT 4
35290: ARRAY
35291: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35292: LD_ADDR_VAR 0 9
35296: PUSH
35297: LD_VAR 0 6
35301: PPUSH
35302: LD_VAR 0 7
35306: PPUSH
35307: LD_INT 16
35309: PPUSH
35310: CALL 79889 0 3
35314: ST_TO_ADDR
// if not cratesNearbyPoint then
35315: LD_VAR 0 9
35319: NOT
35320: IFFALSE 35326
// exit ;
35322: POP
35323: POP
35324: GO 35783
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35326: LD_ADDR_VAR 0 4
35330: PUSH
35331: LD_INT 22
35333: PUSH
35334: LD_VAR 0 5
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 3
35345: PUSH
35346: LD_INT 60
35348: PUSH
35349: EMPTY
35350: LIST
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 91
35358: PUSH
35359: LD_VAR 0 8
35363: PUSH
35364: LD_INT 6
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: LD_INT 25
35377: PUSH
35378: LD_INT 2
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 25
35387: PUSH
35388: LD_INT 16
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: LIST
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: PPUSH
35406: CALL_OW 69
35410: PUSH
35411: LD_VAR 0 8
35415: PPUSH
35416: CALL_OW 313
35420: PPUSH
35421: LD_INT 3
35423: PUSH
35424: LD_INT 60
35426: PUSH
35427: EMPTY
35428: LIST
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 25
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 25
35449: PUSH
35450: LD_INT 16
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PPUSH
35466: CALL_OW 72
35470: UNION
35471: ST_TO_ADDR
// if tmp then
35472: LD_VAR 0 4
35476: IFFALSE 35556
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35478: LD_ADDR_VAR 0 4
35482: PUSH
35483: LD_VAR 0 4
35487: PPUSH
35488: LD_INT 3
35490: PPUSH
35491: CALL 77858 0 2
35495: ST_TO_ADDR
// for j in tmp do
35496: LD_ADDR_VAR 0 2
35500: PUSH
35501: LD_VAR 0 4
35505: PUSH
35506: FOR_IN
35507: IFFALSE 35550
// begin if IsInUnit ( j ) then
35509: LD_VAR 0 2
35513: PPUSH
35514: CALL_OW 310
35518: IFFALSE 35529
// ComExit ( j ) ;
35520: LD_VAR 0 2
35524: PPUSH
35525: CALL 77941 0 1
// AddComCollect ( j , x , y ) ;
35529: LD_VAR 0 2
35533: PPUSH
35534: LD_VAR 0 6
35538: PPUSH
35539: LD_VAR 0 7
35543: PPUSH
35544: CALL_OW 177
// end ;
35548: GO 35506
35550: POP
35551: POP
// exit ;
35552: POP
35553: POP
35554: GO 35783
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35556: LD_ADDR_VAR 0 4
35560: PUSH
35561: LD_INT 22
35563: PUSH
35564: LD_VAR 0 5
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 91
35575: PUSH
35576: LD_VAR 0 8
35580: PUSH
35581: LD_INT 8
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: LD_INT 34
35594: PUSH
35595: LD_INT 12
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 34
35604: PUSH
35605: LD_INT 51
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 34
35614: PUSH
35615: LD_INT 32
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 34
35624: PUSH
35625: LD_INT 89
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: LIST
35643: PPUSH
35644: CALL_OW 69
35648: ST_TO_ADDR
// if tmp then
35649: LD_VAR 0 4
35653: IFFALSE 35779
// begin for j in tmp do
35655: LD_ADDR_VAR 0 2
35659: PUSH
35660: LD_VAR 0 4
35664: PUSH
35665: FOR_IN
35666: IFFALSE 35777
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35668: LD_VAR 0 2
35672: PPUSH
35673: CALL_OW 262
35677: PUSH
35678: LD_INT 3
35680: EQUAL
35681: PUSH
35682: LD_VAR 0 2
35686: PPUSH
35687: CALL_OW 261
35691: PUSH
35692: LD_INT 20
35694: GREATER
35695: OR
35696: PUSH
35697: LD_VAR 0 2
35701: PPUSH
35702: CALL_OW 314
35706: NOT
35707: AND
35708: PUSH
35709: LD_VAR 0 2
35713: PPUSH
35714: CALL_OW 263
35718: PUSH
35719: LD_INT 1
35721: NONEQUAL
35722: PUSH
35723: LD_VAR 0 2
35727: PPUSH
35728: CALL_OW 311
35732: OR
35733: AND
35734: IFFALSE 35775
// begin ComCollect ( j , x , y ) ;
35736: LD_VAR 0 2
35740: PPUSH
35741: LD_VAR 0 6
35745: PPUSH
35746: LD_VAR 0 7
35750: PPUSH
35751: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35755: LD_VAR 0 2
35759: PPUSH
35760: LD_VAR 0 8
35764: PPUSH
35765: CALL_OW 172
// exit ;
35769: POP
35770: POP
35771: POP
35772: POP
35773: GO 35783
// end ;
35775: GO 35665
35777: POP
35778: POP
// end ; end ;
35779: GO 35154
35781: POP
35782: POP
// end ; end_of_file
35783: PPOPN 9
35785: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35786: LD_INT 0
35788: PPUSH
35789: PPUSH
35790: PPUSH
35791: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35792: LD_VAR 0 1
35796: PPUSH
35797: CALL_OW 264
35801: PUSH
35802: LD_INT 91
35804: EQUAL
35805: IFFALSE 35877
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35807: LD_INT 68
35809: PPUSH
35810: LD_VAR 0 1
35814: PPUSH
35815: CALL_OW 255
35819: PPUSH
35820: CALL_OW 321
35824: PUSH
35825: LD_INT 2
35827: EQUAL
35828: IFFALSE 35840
// eff := 70 else
35830: LD_ADDR_VAR 0 4
35834: PUSH
35835: LD_INT 70
35837: ST_TO_ADDR
35838: GO 35848
// eff := 30 ;
35840: LD_ADDR_VAR 0 4
35844: PUSH
35845: LD_INT 30
35847: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35848: LD_VAR 0 1
35852: PPUSH
35853: CALL_OW 250
35857: PPUSH
35858: LD_VAR 0 1
35862: PPUSH
35863: CALL_OW 251
35867: PPUSH
35868: LD_VAR 0 4
35872: PPUSH
35873: CALL_OW 495
// end ; end ;
35877: LD_VAR 0 2
35881: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35882: LD_INT 0
35884: PPUSH
// end ;
35885: LD_VAR 0 4
35889: RET
// export function SOS_Command ( cmd ) ; begin
35890: LD_INT 0
35892: PPUSH
// end ;
35893: LD_VAR 0 2
35897: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35898: LD_INT 0
35900: PPUSH
// end ;
35901: LD_VAR 0 6
35905: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35906: LD_INT 0
35908: PPUSH
35909: PPUSH
// if not vehicle or not factory then
35910: LD_VAR 0 1
35914: NOT
35915: PUSH
35916: LD_VAR 0 2
35920: NOT
35921: OR
35922: IFFALSE 35926
// exit ;
35924: GO 36157
// if factoryWaypoints >= factory then
35926: LD_EXP 109
35930: PUSH
35931: LD_VAR 0 2
35935: GREATEREQUAL
35936: IFFALSE 36157
// if factoryWaypoints [ factory ] then
35938: LD_EXP 109
35942: PUSH
35943: LD_VAR 0 2
35947: ARRAY
35948: IFFALSE 36157
// begin if GetControl ( vehicle ) = control_manual then
35950: LD_VAR 0 1
35954: PPUSH
35955: CALL_OW 263
35959: PUSH
35960: LD_INT 1
35962: EQUAL
35963: IFFALSE 36044
// begin driver := IsDrivenBy ( vehicle ) ;
35965: LD_ADDR_VAR 0 4
35969: PUSH
35970: LD_VAR 0 1
35974: PPUSH
35975: CALL_OW 311
35979: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35980: LD_VAR 0 4
35984: PPUSH
35985: LD_EXP 109
35989: PUSH
35990: LD_VAR 0 2
35994: ARRAY
35995: PUSH
35996: LD_INT 3
35998: ARRAY
35999: PPUSH
36000: LD_EXP 109
36004: PUSH
36005: LD_VAR 0 2
36009: ARRAY
36010: PUSH
36011: LD_INT 4
36013: ARRAY
36014: PPUSH
36015: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36019: LD_VAR 0 4
36023: PPUSH
36024: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36028: LD_VAR 0 4
36032: PPUSH
36033: LD_VAR 0 2
36037: PPUSH
36038: CALL_OW 180
// end else
36042: GO 36157
// if GetControl ( vehicle ) = control_remote then
36044: LD_VAR 0 1
36048: PPUSH
36049: CALL_OW 263
36053: PUSH
36054: LD_INT 2
36056: EQUAL
36057: IFFALSE 36118
// begin wait ( 0 0$2 ) ;
36059: LD_INT 70
36061: PPUSH
36062: CALL_OW 67
// if Connect ( vehicle ) then
36066: LD_VAR 0 1
36070: PPUSH
36071: CALL 48181 0 1
36075: IFFALSE 36116
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36077: LD_VAR 0 1
36081: PPUSH
36082: LD_EXP 109
36086: PUSH
36087: LD_VAR 0 2
36091: ARRAY
36092: PUSH
36093: LD_INT 3
36095: ARRAY
36096: PPUSH
36097: LD_EXP 109
36101: PUSH
36102: LD_VAR 0 2
36106: ARRAY
36107: PUSH
36108: LD_INT 4
36110: ARRAY
36111: PPUSH
36112: CALL_OW 171
// end else
36116: GO 36157
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36118: LD_VAR 0 1
36122: PPUSH
36123: LD_EXP 109
36127: PUSH
36128: LD_VAR 0 2
36132: ARRAY
36133: PUSH
36134: LD_INT 3
36136: ARRAY
36137: PPUSH
36138: LD_EXP 109
36142: PUSH
36143: LD_VAR 0 2
36147: ARRAY
36148: PUSH
36149: LD_INT 4
36151: ARRAY
36152: PPUSH
36153: CALL_OW 171
// end ; end ;
36157: LD_VAR 0 3
36161: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36162: LD_INT 0
36164: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36165: LD_VAR 0 1
36169: PUSH
36170: LD_INT 250
36172: EQUAL
36173: PUSH
36174: LD_VAR 0 2
36178: PPUSH
36179: CALL_OW 264
36183: PUSH
36184: LD_INT 81
36186: EQUAL
36187: AND
36188: IFFALSE 36209
// MinerPlaceMine ( unit , x , y ) ;
36190: LD_VAR 0 2
36194: PPUSH
36195: LD_VAR 0 4
36199: PPUSH
36200: LD_VAR 0 5
36204: PPUSH
36205: CALL 38594 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36209: LD_VAR 0 1
36213: PUSH
36214: LD_INT 251
36216: EQUAL
36217: PUSH
36218: LD_VAR 0 2
36222: PPUSH
36223: CALL_OW 264
36227: PUSH
36228: LD_INT 81
36230: EQUAL
36231: AND
36232: IFFALSE 36253
// MinerDetonateMine ( unit , x , y ) ;
36234: LD_VAR 0 2
36238: PPUSH
36239: LD_VAR 0 4
36243: PPUSH
36244: LD_VAR 0 5
36248: PPUSH
36249: CALL 38869 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36253: LD_VAR 0 1
36257: PUSH
36258: LD_INT 252
36260: EQUAL
36261: PUSH
36262: LD_VAR 0 2
36266: PPUSH
36267: CALL_OW 264
36271: PUSH
36272: LD_INT 81
36274: EQUAL
36275: AND
36276: IFFALSE 36297
// MinerCreateMinefield ( unit , x , y ) ;
36278: LD_VAR 0 2
36282: PPUSH
36283: LD_VAR 0 4
36287: PPUSH
36288: LD_VAR 0 5
36292: PPUSH
36293: CALL 39286 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36297: LD_VAR 0 1
36301: PUSH
36302: LD_INT 253
36304: EQUAL
36305: PUSH
36306: LD_VAR 0 2
36310: PPUSH
36311: CALL_OW 257
36315: PUSH
36316: LD_INT 5
36318: EQUAL
36319: AND
36320: IFFALSE 36341
// ComBinocular ( unit , x , y ) ;
36322: LD_VAR 0 2
36326: PPUSH
36327: LD_VAR 0 4
36331: PPUSH
36332: LD_VAR 0 5
36336: PPUSH
36337: CALL 39655 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36341: LD_VAR 0 1
36345: PUSH
36346: LD_INT 254
36348: EQUAL
36349: PUSH
36350: LD_VAR 0 2
36354: PPUSH
36355: CALL_OW 264
36359: PUSH
36360: LD_INT 99
36362: EQUAL
36363: AND
36364: PUSH
36365: LD_VAR 0 3
36369: PPUSH
36370: CALL_OW 263
36374: PUSH
36375: LD_INT 3
36377: EQUAL
36378: AND
36379: IFFALSE 36395
// HackDestroyVehicle ( unit , selectedUnit ) ;
36381: LD_VAR 0 2
36385: PPUSH
36386: LD_VAR 0 3
36390: PPUSH
36391: CALL 37958 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36395: LD_VAR 0 1
36399: PUSH
36400: LD_INT 255
36402: EQUAL
36403: PUSH
36404: LD_VAR 0 2
36408: PPUSH
36409: CALL_OW 264
36413: PUSH
36414: LD_INT 14
36416: PUSH
36417: LD_INT 53
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: IN
36424: AND
36425: PUSH
36426: LD_VAR 0 4
36430: PPUSH
36431: LD_VAR 0 5
36435: PPUSH
36436: CALL_OW 488
36440: AND
36441: IFFALSE 36465
// CutTreeXYR ( unit , x , y , 12 ) ;
36443: LD_VAR 0 2
36447: PPUSH
36448: LD_VAR 0 4
36452: PPUSH
36453: LD_VAR 0 5
36457: PPUSH
36458: LD_INT 12
36460: PPUSH
36461: CALL 36528 0 4
// if cmd = 256 then
36465: LD_VAR 0 1
36469: PUSH
36470: LD_INT 256
36472: EQUAL
36473: IFFALSE 36494
// SetFactoryWaypoint ( unit , x , y ) ;
36475: LD_VAR 0 2
36479: PPUSH
36480: LD_VAR 0 4
36484: PPUSH
36485: LD_VAR 0 5
36489: PPUSH
36490: CALL 34475 0 3
// if cmd = 257 then
36494: LD_VAR 0 1
36498: PUSH
36499: LD_INT 257
36501: EQUAL
36502: IFFALSE 36523
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36504: LD_VAR 0 2
36508: PPUSH
36509: LD_VAR 0 4
36513: PPUSH
36514: LD_VAR 0 5
36518: PPUSH
36519: CALL 34837 0 3
// end ;
36523: LD_VAR 0 6
36527: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36528: LD_INT 0
36530: PPUSH
36531: PPUSH
36532: PPUSH
36533: PPUSH
36534: PPUSH
36535: PPUSH
36536: PPUSH
36537: PPUSH
36538: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36539: LD_VAR 0 1
36543: NOT
36544: PUSH
36545: LD_VAR 0 2
36549: PPUSH
36550: LD_VAR 0 3
36554: PPUSH
36555: CALL_OW 488
36559: NOT
36560: OR
36561: PUSH
36562: LD_VAR 0 4
36566: NOT
36567: OR
36568: IFFALSE 36572
// exit ;
36570: GO 36912
// list := [ ] ;
36572: LD_ADDR_VAR 0 13
36576: PUSH
36577: EMPTY
36578: ST_TO_ADDR
// if x - r < 0 then
36579: LD_VAR 0 2
36583: PUSH
36584: LD_VAR 0 4
36588: MINUS
36589: PUSH
36590: LD_INT 0
36592: LESS
36593: IFFALSE 36605
// min_x := 0 else
36595: LD_ADDR_VAR 0 7
36599: PUSH
36600: LD_INT 0
36602: ST_TO_ADDR
36603: GO 36621
// min_x := x - r ;
36605: LD_ADDR_VAR 0 7
36609: PUSH
36610: LD_VAR 0 2
36614: PUSH
36615: LD_VAR 0 4
36619: MINUS
36620: ST_TO_ADDR
// if y - r < 0 then
36621: LD_VAR 0 3
36625: PUSH
36626: LD_VAR 0 4
36630: MINUS
36631: PUSH
36632: LD_INT 0
36634: LESS
36635: IFFALSE 36647
// min_y := 0 else
36637: LD_ADDR_VAR 0 8
36641: PUSH
36642: LD_INT 0
36644: ST_TO_ADDR
36645: GO 36663
// min_y := y - r ;
36647: LD_ADDR_VAR 0 8
36651: PUSH
36652: LD_VAR 0 3
36656: PUSH
36657: LD_VAR 0 4
36661: MINUS
36662: ST_TO_ADDR
// max_x := x + r ;
36663: LD_ADDR_VAR 0 9
36667: PUSH
36668: LD_VAR 0 2
36672: PUSH
36673: LD_VAR 0 4
36677: PLUS
36678: ST_TO_ADDR
// max_y := y + r ;
36679: LD_ADDR_VAR 0 10
36683: PUSH
36684: LD_VAR 0 3
36688: PUSH
36689: LD_VAR 0 4
36693: PLUS
36694: ST_TO_ADDR
// for _x = min_x to max_x do
36695: LD_ADDR_VAR 0 11
36699: PUSH
36700: DOUBLE
36701: LD_VAR 0 7
36705: DEC
36706: ST_TO_ADDR
36707: LD_VAR 0 9
36711: PUSH
36712: FOR_TO
36713: IFFALSE 36830
// for _y = min_y to max_y do
36715: LD_ADDR_VAR 0 12
36719: PUSH
36720: DOUBLE
36721: LD_VAR 0 8
36725: DEC
36726: ST_TO_ADDR
36727: LD_VAR 0 10
36731: PUSH
36732: FOR_TO
36733: IFFALSE 36826
// begin if not ValidHex ( _x , _y ) then
36735: LD_VAR 0 11
36739: PPUSH
36740: LD_VAR 0 12
36744: PPUSH
36745: CALL_OW 488
36749: NOT
36750: IFFALSE 36754
// continue ;
36752: GO 36732
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36754: LD_VAR 0 11
36758: PPUSH
36759: LD_VAR 0 12
36763: PPUSH
36764: CALL_OW 351
36768: PUSH
36769: LD_VAR 0 11
36773: PPUSH
36774: LD_VAR 0 12
36778: PPUSH
36779: CALL_OW 554
36783: AND
36784: IFFALSE 36824
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36786: LD_ADDR_VAR 0 13
36790: PUSH
36791: LD_VAR 0 13
36795: PPUSH
36796: LD_VAR 0 13
36800: PUSH
36801: LD_INT 1
36803: PLUS
36804: PPUSH
36805: LD_VAR 0 11
36809: PUSH
36810: LD_VAR 0 12
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PPUSH
36819: CALL_OW 2
36823: ST_TO_ADDR
// end ;
36824: GO 36732
36826: POP
36827: POP
36828: GO 36712
36830: POP
36831: POP
// if not list then
36832: LD_VAR 0 13
36836: NOT
36837: IFFALSE 36841
// exit ;
36839: GO 36912
// for i in list do
36841: LD_ADDR_VAR 0 6
36845: PUSH
36846: LD_VAR 0 13
36850: PUSH
36851: FOR_IN
36852: IFFALSE 36910
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36854: LD_VAR 0 1
36858: PPUSH
36859: LD_STRING M
36861: PUSH
36862: LD_VAR 0 6
36866: PUSH
36867: LD_INT 1
36869: ARRAY
36870: PUSH
36871: LD_VAR 0 6
36875: PUSH
36876: LD_INT 2
36878: ARRAY
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: PUSH
36901: EMPTY
36902: LIST
36903: PPUSH
36904: CALL_OW 447
36908: GO 36851
36910: POP
36911: POP
// end ;
36912: LD_VAR 0 5
36916: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36917: LD_EXP 112
36921: NOT
36922: IFFALSE 36972
36924: GO 36926
36926: DISABLE
// begin initHack := true ;
36927: LD_ADDR_EXP 112
36931: PUSH
36932: LD_INT 1
36934: ST_TO_ADDR
// hackTanks := [ ] ;
36935: LD_ADDR_EXP 113
36939: PUSH
36940: EMPTY
36941: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36942: LD_ADDR_EXP 114
36946: PUSH
36947: EMPTY
36948: ST_TO_ADDR
// hackLimit := 3 ;
36949: LD_ADDR_EXP 115
36953: PUSH
36954: LD_INT 3
36956: ST_TO_ADDR
// hackDist := 12 ;
36957: LD_ADDR_EXP 116
36961: PUSH
36962: LD_INT 12
36964: ST_TO_ADDR
// hackCounter := [ ] ;
36965: LD_ADDR_EXP 117
36969: PUSH
36970: EMPTY
36971: ST_TO_ADDR
// end ;
36972: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36973: LD_EXP 112
36977: PUSH
36978: LD_INT 34
36980: PUSH
36981: LD_INT 99
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PPUSH
36988: CALL_OW 69
36992: AND
36993: IFFALSE 37246
36995: GO 36997
36997: DISABLE
36998: LD_INT 0
37000: PPUSH
37001: PPUSH
// begin enable ;
37002: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37003: LD_ADDR_VAR 0 1
37007: PUSH
37008: LD_INT 34
37010: PUSH
37011: LD_INT 99
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PPUSH
37018: CALL_OW 69
37022: PUSH
37023: FOR_IN
37024: IFFALSE 37244
// begin if not i in hackTanks then
37026: LD_VAR 0 1
37030: PUSH
37031: LD_EXP 113
37035: IN
37036: NOT
37037: IFFALSE 37120
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37039: LD_ADDR_EXP 113
37043: PUSH
37044: LD_EXP 113
37048: PPUSH
37049: LD_EXP 113
37053: PUSH
37054: LD_INT 1
37056: PLUS
37057: PPUSH
37058: LD_VAR 0 1
37062: PPUSH
37063: CALL_OW 1
37067: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37068: LD_ADDR_EXP 114
37072: PUSH
37073: LD_EXP 114
37077: PPUSH
37078: LD_EXP 114
37082: PUSH
37083: LD_INT 1
37085: PLUS
37086: PPUSH
37087: EMPTY
37088: PPUSH
37089: CALL_OW 1
37093: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37094: LD_ADDR_EXP 117
37098: PUSH
37099: LD_EXP 117
37103: PPUSH
37104: LD_EXP 117
37108: PUSH
37109: LD_INT 1
37111: PLUS
37112: PPUSH
37113: EMPTY
37114: PPUSH
37115: CALL_OW 1
37119: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37120: LD_VAR 0 1
37124: PPUSH
37125: CALL_OW 302
37129: NOT
37130: IFFALSE 37143
// begin HackUnlinkAll ( i ) ;
37132: LD_VAR 0 1
37136: PPUSH
37137: CALL 37249 0 1
// continue ;
37141: GO 37023
// end ; HackCheckCapturedStatus ( i ) ;
37143: LD_VAR 0 1
37147: PPUSH
37148: CALL 37692 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37152: LD_ADDR_VAR 0 2
37156: PUSH
37157: LD_INT 81
37159: PUSH
37160: LD_VAR 0 1
37164: PPUSH
37165: CALL_OW 255
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 33
37176: PUSH
37177: LD_INT 3
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 91
37186: PUSH
37187: LD_VAR 0 1
37191: PUSH
37192: LD_EXP 116
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 50
37204: PUSH
37205: EMPTY
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: PPUSH
37214: CALL_OW 69
37218: ST_TO_ADDR
// if not tmp then
37219: LD_VAR 0 2
37223: NOT
37224: IFFALSE 37228
// continue ;
37226: GO 37023
// HackLink ( i , tmp ) ;
37228: LD_VAR 0 1
37232: PPUSH
37233: LD_VAR 0 2
37237: PPUSH
37238: CALL 37385 0 2
// end ;
37242: GO 37023
37244: POP
37245: POP
// end ;
37246: PPOPN 2
37248: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37249: LD_INT 0
37251: PPUSH
37252: PPUSH
37253: PPUSH
// if not hack in hackTanks then
37254: LD_VAR 0 1
37258: PUSH
37259: LD_EXP 113
37263: IN
37264: NOT
37265: IFFALSE 37269
// exit ;
37267: GO 37380
// index := GetElementIndex ( hackTanks , hack ) ;
37269: LD_ADDR_VAR 0 4
37273: PUSH
37274: LD_EXP 113
37278: PPUSH
37279: LD_VAR 0 1
37283: PPUSH
37284: CALL 44997 0 2
37288: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37289: LD_EXP 114
37293: PUSH
37294: LD_VAR 0 4
37298: ARRAY
37299: IFFALSE 37380
// begin for i in hackTanksCaptured [ index ] do
37301: LD_ADDR_VAR 0 3
37305: PUSH
37306: LD_EXP 114
37310: PUSH
37311: LD_VAR 0 4
37315: ARRAY
37316: PUSH
37317: FOR_IN
37318: IFFALSE 37344
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37320: LD_VAR 0 3
37324: PUSH
37325: LD_INT 1
37327: ARRAY
37328: PPUSH
37329: LD_VAR 0 3
37333: PUSH
37334: LD_INT 2
37336: ARRAY
37337: PPUSH
37338: CALL_OW 235
37342: GO 37317
37344: POP
37345: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37346: LD_ADDR_EXP 114
37350: PUSH
37351: LD_EXP 114
37355: PPUSH
37356: LD_VAR 0 4
37360: PPUSH
37361: EMPTY
37362: PPUSH
37363: CALL_OW 1
37367: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37368: LD_VAR 0 1
37372: PPUSH
37373: LD_INT 0
37375: PPUSH
37376: CALL_OW 505
// end ; end ;
37380: LD_VAR 0 2
37384: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37385: LD_INT 0
37387: PPUSH
37388: PPUSH
37389: PPUSH
// if not hack in hackTanks or not vehicles then
37390: LD_VAR 0 1
37394: PUSH
37395: LD_EXP 113
37399: IN
37400: NOT
37401: PUSH
37402: LD_VAR 0 2
37406: NOT
37407: OR
37408: IFFALSE 37412
// exit ;
37410: GO 37687
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37412: LD_ADDR_VAR 0 2
37416: PUSH
37417: LD_VAR 0 1
37421: PPUSH
37422: LD_VAR 0 2
37426: PPUSH
37427: LD_INT 1
37429: PPUSH
37430: LD_INT 1
37432: PPUSH
37433: CALL 45647 0 4
37437: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37438: LD_ADDR_VAR 0 5
37442: PUSH
37443: LD_EXP 113
37447: PPUSH
37448: LD_VAR 0 1
37452: PPUSH
37453: CALL 44997 0 2
37457: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37458: LD_EXP 114
37462: PUSH
37463: LD_VAR 0 5
37467: ARRAY
37468: PUSH
37469: LD_EXP 115
37473: LESS
37474: IFFALSE 37663
// begin for i := 1 to vehicles do
37476: LD_ADDR_VAR 0 4
37480: PUSH
37481: DOUBLE
37482: LD_INT 1
37484: DEC
37485: ST_TO_ADDR
37486: LD_VAR 0 2
37490: PUSH
37491: FOR_TO
37492: IFFALSE 37661
// begin if hackTanksCaptured [ index ] = hackLimit then
37494: LD_EXP 114
37498: PUSH
37499: LD_VAR 0 5
37503: ARRAY
37504: PUSH
37505: LD_EXP 115
37509: EQUAL
37510: IFFALSE 37514
// break ;
37512: GO 37661
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37514: LD_ADDR_EXP 117
37518: PUSH
37519: LD_EXP 117
37523: PPUSH
37524: LD_VAR 0 5
37528: PPUSH
37529: LD_EXP 117
37533: PUSH
37534: LD_VAR 0 5
37538: ARRAY
37539: PUSH
37540: LD_INT 1
37542: PLUS
37543: PPUSH
37544: CALL_OW 1
37548: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37549: LD_ADDR_EXP 114
37553: PUSH
37554: LD_EXP 114
37558: PPUSH
37559: LD_VAR 0 5
37563: PUSH
37564: LD_EXP 114
37568: PUSH
37569: LD_VAR 0 5
37573: ARRAY
37574: PUSH
37575: LD_INT 1
37577: PLUS
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PPUSH
37583: LD_VAR 0 2
37587: PUSH
37588: LD_VAR 0 4
37592: ARRAY
37593: PUSH
37594: LD_VAR 0 2
37598: PUSH
37599: LD_VAR 0 4
37603: ARRAY
37604: PPUSH
37605: CALL_OW 255
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PPUSH
37614: CALL 45212 0 3
37618: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37619: LD_VAR 0 2
37623: PUSH
37624: LD_VAR 0 4
37628: ARRAY
37629: PPUSH
37630: LD_VAR 0 1
37634: PPUSH
37635: CALL_OW 255
37639: PPUSH
37640: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37644: LD_VAR 0 2
37648: PUSH
37649: LD_VAR 0 4
37653: ARRAY
37654: PPUSH
37655: CALL_OW 141
// end ;
37659: GO 37491
37661: POP
37662: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37663: LD_VAR 0 1
37667: PPUSH
37668: LD_EXP 114
37672: PUSH
37673: LD_VAR 0 5
37677: ARRAY
37678: PUSH
37679: LD_INT 0
37681: PLUS
37682: PPUSH
37683: CALL_OW 505
// end ;
37687: LD_VAR 0 3
37691: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37692: LD_INT 0
37694: PPUSH
37695: PPUSH
37696: PPUSH
37697: PPUSH
// if not hack in hackTanks then
37698: LD_VAR 0 1
37702: PUSH
37703: LD_EXP 113
37707: IN
37708: NOT
37709: IFFALSE 37713
// exit ;
37711: GO 37953
// index := GetElementIndex ( hackTanks , hack ) ;
37713: LD_ADDR_VAR 0 4
37717: PUSH
37718: LD_EXP 113
37722: PPUSH
37723: LD_VAR 0 1
37727: PPUSH
37728: CALL 44997 0 2
37732: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37733: LD_ADDR_VAR 0 3
37737: PUSH
37738: DOUBLE
37739: LD_EXP 114
37743: PUSH
37744: LD_VAR 0 4
37748: ARRAY
37749: INC
37750: ST_TO_ADDR
37751: LD_INT 1
37753: PUSH
37754: FOR_DOWNTO
37755: IFFALSE 37927
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37757: LD_ADDR_VAR 0 5
37761: PUSH
37762: LD_EXP 114
37766: PUSH
37767: LD_VAR 0 4
37771: ARRAY
37772: PUSH
37773: LD_VAR 0 3
37777: ARRAY
37778: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37779: LD_VAR 0 5
37783: PUSH
37784: LD_INT 1
37786: ARRAY
37787: PPUSH
37788: CALL_OW 302
37792: NOT
37793: PUSH
37794: LD_VAR 0 5
37798: PUSH
37799: LD_INT 1
37801: ARRAY
37802: PPUSH
37803: CALL_OW 255
37807: PUSH
37808: LD_VAR 0 1
37812: PPUSH
37813: CALL_OW 255
37817: NONEQUAL
37818: OR
37819: IFFALSE 37925
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37821: LD_VAR 0 5
37825: PUSH
37826: LD_INT 1
37828: ARRAY
37829: PPUSH
37830: CALL_OW 305
37834: PUSH
37835: LD_VAR 0 5
37839: PUSH
37840: LD_INT 1
37842: ARRAY
37843: PPUSH
37844: CALL_OW 255
37848: PUSH
37849: LD_VAR 0 1
37853: PPUSH
37854: CALL_OW 255
37858: EQUAL
37859: AND
37860: IFFALSE 37884
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37862: LD_VAR 0 5
37866: PUSH
37867: LD_INT 1
37869: ARRAY
37870: PPUSH
37871: LD_VAR 0 5
37875: PUSH
37876: LD_INT 2
37878: ARRAY
37879: PPUSH
37880: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37884: LD_ADDR_EXP 114
37888: PUSH
37889: LD_EXP 114
37893: PPUSH
37894: LD_VAR 0 4
37898: PPUSH
37899: LD_EXP 114
37903: PUSH
37904: LD_VAR 0 4
37908: ARRAY
37909: PPUSH
37910: LD_VAR 0 3
37914: PPUSH
37915: CALL_OW 3
37919: PPUSH
37920: CALL_OW 1
37924: ST_TO_ADDR
// end ; end ;
37925: GO 37754
37927: POP
37928: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37929: LD_VAR 0 1
37933: PPUSH
37934: LD_EXP 114
37938: PUSH
37939: LD_VAR 0 4
37943: ARRAY
37944: PUSH
37945: LD_INT 0
37947: PLUS
37948: PPUSH
37949: CALL_OW 505
// end ;
37953: LD_VAR 0 2
37957: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37958: LD_INT 0
37960: PPUSH
37961: PPUSH
37962: PPUSH
37963: PPUSH
// if not hack in hackTanks then
37964: LD_VAR 0 1
37968: PUSH
37969: LD_EXP 113
37973: IN
37974: NOT
37975: IFFALSE 37979
// exit ;
37977: GO 38064
// index := GetElementIndex ( hackTanks , hack ) ;
37979: LD_ADDR_VAR 0 5
37983: PUSH
37984: LD_EXP 113
37988: PPUSH
37989: LD_VAR 0 1
37993: PPUSH
37994: CALL 44997 0 2
37998: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37999: LD_ADDR_VAR 0 4
38003: PUSH
38004: DOUBLE
38005: LD_INT 1
38007: DEC
38008: ST_TO_ADDR
38009: LD_EXP 114
38013: PUSH
38014: LD_VAR 0 5
38018: ARRAY
38019: PUSH
38020: FOR_TO
38021: IFFALSE 38062
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38023: LD_EXP 114
38027: PUSH
38028: LD_VAR 0 5
38032: ARRAY
38033: PUSH
38034: LD_VAR 0 4
38038: ARRAY
38039: PUSH
38040: LD_INT 1
38042: ARRAY
38043: PUSH
38044: LD_VAR 0 2
38048: EQUAL
38049: IFFALSE 38060
// KillUnit ( vehicle ) ;
38051: LD_VAR 0 2
38055: PPUSH
38056: CALL_OW 66
38060: GO 38020
38062: POP
38063: POP
// end ;
38064: LD_VAR 0 3
38068: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38069: LD_EXP 118
38073: NOT
38074: IFFALSE 38109
38076: GO 38078
38078: DISABLE
// begin initMiner := true ;
38079: LD_ADDR_EXP 118
38083: PUSH
38084: LD_INT 1
38086: ST_TO_ADDR
// minersList := [ ] ;
38087: LD_ADDR_EXP 119
38091: PUSH
38092: EMPTY
38093: ST_TO_ADDR
// minerMinesList := [ ] ;
38094: LD_ADDR_EXP 120
38098: PUSH
38099: EMPTY
38100: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38101: LD_ADDR_EXP 121
38105: PUSH
38106: LD_INT 5
38108: ST_TO_ADDR
// end ;
38109: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38110: LD_EXP 118
38114: PUSH
38115: LD_INT 34
38117: PUSH
38118: LD_INT 81
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PPUSH
38125: CALL_OW 69
38129: AND
38130: IFFALSE 38591
38132: GO 38134
38134: DISABLE
38135: LD_INT 0
38137: PPUSH
38138: PPUSH
38139: PPUSH
38140: PPUSH
// begin enable ;
38141: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38142: LD_ADDR_VAR 0 1
38146: PUSH
38147: LD_INT 34
38149: PUSH
38150: LD_INT 81
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PPUSH
38157: CALL_OW 69
38161: PUSH
38162: FOR_IN
38163: IFFALSE 38235
// begin if not i in minersList then
38165: LD_VAR 0 1
38169: PUSH
38170: LD_EXP 119
38174: IN
38175: NOT
38176: IFFALSE 38233
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38178: LD_ADDR_EXP 119
38182: PUSH
38183: LD_EXP 119
38187: PPUSH
38188: LD_EXP 119
38192: PUSH
38193: LD_INT 1
38195: PLUS
38196: PPUSH
38197: LD_VAR 0 1
38201: PPUSH
38202: CALL_OW 1
38206: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38207: LD_ADDR_EXP 120
38211: PUSH
38212: LD_EXP 120
38216: PPUSH
38217: LD_EXP 120
38221: PUSH
38222: LD_INT 1
38224: PLUS
38225: PPUSH
38226: EMPTY
38227: PPUSH
38228: CALL_OW 1
38232: ST_TO_ADDR
// end end ;
38233: GO 38162
38235: POP
38236: POP
// for i := minerMinesList downto 1 do
38237: LD_ADDR_VAR 0 1
38241: PUSH
38242: DOUBLE
38243: LD_EXP 120
38247: INC
38248: ST_TO_ADDR
38249: LD_INT 1
38251: PUSH
38252: FOR_DOWNTO
38253: IFFALSE 38589
// begin if IsLive ( minersList [ i ] ) then
38255: LD_EXP 119
38259: PUSH
38260: LD_VAR 0 1
38264: ARRAY
38265: PPUSH
38266: CALL_OW 300
38270: IFFALSE 38298
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38272: LD_EXP 119
38276: PUSH
38277: LD_VAR 0 1
38281: ARRAY
38282: PPUSH
38283: LD_EXP 120
38287: PUSH
38288: LD_VAR 0 1
38292: ARRAY
38293: PPUSH
38294: CALL_OW 505
// if not minerMinesList [ i ] then
38298: LD_EXP 120
38302: PUSH
38303: LD_VAR 0 1
38307: ARRAY
38308: NOT
38309: IFFALSE 38313
// continue ;
38311: GO 38252
// for j := minerMinesList [ i ] downto 1 do
38313: LD_ADDR_VAR 0 2
38317: PUSH
38318: DOUBLE
38319: LD_EXP 120
38323: PUSH
38324: LD_VAR 0 1
38328: ARRAY
38329: INC
38330: ST_TO_ADDR
38331: LD_INT 1
38333: PUSH
38334: FOR_DOWNTO
38335: IFFALSE 38585
// begin side := GetSide ( minersList [ i ] ) ;
38337: LD_ADDR_VAR 0 3
38341: PUSH
38342: LD_EXP 119
38346: PUSH
38347: LD_VAR 0 1
38351: ARRAY
38352: PPUSH
38353: CALL_OW 255
38357: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38358: LD_ADDR_VAR 0 4
38362: PUSH
38363: LD_EXP 120
38367: PUSH
38368: LD_VAR 0 1
38372: ARRAY
38373: PUSH
38374: LD_VAR 0 2
38378: ARRAY
38379: PUSH
38380: LD_INT 1
38382: ARRAY
38383: PPUSH
38384: LD_EXP 120
38388: PUSH
38389: LD_VAR 0 1
38393: ARRAY
38394: PUSH
38395: LD_VAR 0 2
38399: ARRAY
38400: PUSH
38401: LD_INT 2
38403: ARRAY
38404: PPUSH
38405: CALL_OW 428
38409: ST_TO_ADDR
// if not tmp then
38410: LD_VAR 0 4
38414: NOT
38415: IFFALSE 38419
// continue ;
38417: GO 38334
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38419: LD_VAR 0 4
38423: PUSH
38424: LD_INT 81
38426: PUSH
38427: LD_VAR 0 3
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PPUSH
38436: CALL_OW 69
38440: IN
38441: PUSH
38442: LD_EXP 120
38446: PUSH
38447: LD_VAR 0 1
38451: ARRAY
38452: PUSH
38453: LD_VAR 0 2
38457: ARRAY
38458: PUSH
38459: LD_INT 1
38461: ARRAY
38462: PPUSH
38463: LD_EXP 120
38467: PUSH
38468: LD_VAR 0 1
38472: ARRAY
38473: PUSH
38474: LD_VAR 0 2
38478: ARRAY
38479: PUSH
38480: LD_INT 2
38482: ARRAY
38483: PPUSH
38484: CALL_OW 458
38488: AND
38489: IFFALSE 38583
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38491: LD_EXP 120
38495: PUSH
38496: LD_VAR 0 1
38500: ARRAY
38501: PUSH
38502: LD_VAR 0 2
38506: ARRAY
38507: PUSH
38508: LD_INT 1
38510: ARRAY
38511: PPUSH
38512: LD_EXP 120
38516: PUSH
38517: LD_VAR 0 1
38521: ARRAY
38522: PUSH
38523: LD_VAR 0 2
38527: ARRAY
38528: PUSH
38529: LD_INT 2
38531: ARRAY
38532: PPUSH
38533: LD_VAR 0 3
38537: PPUSH
38538: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38542: LD_ADDR_EXP 120
38546: PUSH
38547: LD_EXP 120
38551: PPUSH
38552: LD_VAR 0 1
38556: PPUSH
38557: LD_EXP 120
38561: PUSH
38562: LD_VAR 0 1
38566: ARRAY
38567: PPUSH
38568: LD_VAR 0 2
38572: PPUSH
38573: CALL_OW 3
38577: PPUSH
38578: CALL_OW 1
38582: ST_TO_ADDR
// end ; end ;
38583: GO 38334
38585: POP
38586: POP
// end ;
38587: GO 38252
38589: POP
38590: POP
// end ;
38591: PPOPN 4
38593: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38594: LD_INT 0
38596: PPUSH
38597: PPUSH
// result := false ;
38598: LD_ADDR_VAR 0 4
38602: PUSH
38603: LD_INT 0
38605: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38606: LD_VAR 0 1
38610: PPUSH
38611: CALL_OW 264
38615: PUSH
38616: LD_INT 81
38618: EQUAL
38619: NOT
38620: IFFALSE 38624
// exit ;
38622: GO 38864
// index := GetElementIndex ( minersList , unit ) ;
38624: LD_ADDR_VAR 0 5
38628: PUSH
38629: LD_EXP 119
38633: PPUSH
38634: LD_VAR 0 1
38638: PPUSH
38639: CALL 44997 0 2
38643: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38644: LD_EXP 120
38648: PUSH
38649: LD_VAR 0 5
38653: ARRAY
38654: PUSH
38655: LD_EXP 121
38659: GREATEREQUAL
38660: IFFALSE 38664
// exit ;
38662: GO 38864
// ComMoveXY ( unit , x , y ) ;
38664: LD_VAR 0 1
38668: PPUSH
38669: LD_VAR 0 2
38673: PPUSH
38674: LD_VAR 0 3
38678: PPUSH
38679: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38683: LD_INT 35
38685: PPUSH
38686: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38690: LD_VAR 0 1
38694: PPUSH
38695: LD_VAR 0 2
38699: PPUSH
38700: LD_VAR 0 3
38704: PPUSH
38705: CALL 76352 0 3
38709: NOT
38710: PUSH
38711: LD_VAR 0 1
38715: PPUSH
38716: CALL_OW 314
38720: AND
38721: IFFALSE 38725
// exit ;
38723: GO 38864
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38725: LD_VAR 0 2
38729: PPUSH
38730: LD_VAR 0 3
38734: PPUSH
38735: CALL_OW 428
38739: PUSH
38740: LD_VAR 0 1
38744: EQUAL
38745: PUSH
38746: LD_VAR 0 1
38750: PPUSH
38751: CALL_OW 314
38755: NOT
38756: AND
38757: IFFALSE 38683
// PlaySoundXY ( x , y , PlantMine ) ;
38759: LD_VAR 0 2
38763: PPUSH
38764: LD_VAR 0 3
38768: PPUSH
38769: LD_STRING PlantMine
38771: PPUSH
38772: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38776: LD_VAR 0 2
38780: PPUSH
38781: LD_VAR 0 3
38785: PPUSH
38786: LD_VAR 0 1
38790: PPUSH
38791: CALL_OW 255
38795: PPUSH
38796: LD_INT 0
38798: PPUSH
38799: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38803: LD_ADDR_EXP 120
38807: PUSH
38808: LD_EXP 120
38812: PPUSH
38813: LD_VAR 0 5
38817: PUSH
38818: LD_EXP 120
38822: PUSH
38823: LD_VAR 0 5
38827: ARRAY
38828: PUSH
38829: LD_INT 1
38831: PLUS
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PPUSH
38837: LD_VAR 0 2
38841: PUSH
38842: LD_VAR 0 3
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PPUSH
38851: CALL 45212 0 3
38855: ST_TO_ADDR
// result := true ;
38856: LD_ADDR_VAR 0 4
38860: PUSH
38861: LD_INT 1
38863: ST_TO_ADDR
// end ;
38864: LD_VAR 0 4
38868: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38869: LD_INT 0
38871: PPUSH
38872: PPUSH
38873: PPUSH
// if not unit in minersList then
38874: LD_VAR 0 1
38878: PUSH
38879: LD_EXP 119
38883: IN
38884: NOT
38885: IFFALSE 38889
// exit ;
38887: GO 39281
// index := GetElementIndex ( minersList , unit ) ;
38889: LD_ADDR_VAR 0 6
38893: PUSH
38894: LD_EXP 119
38898: PPUSH
38899: LD_VAR 0 1
38903: PPUSH
38904: CALL 44997 0 2
38908: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38909: LD_ADDR_VAR 0 5
38913: PUSH
38914: DOUBLE
38915: LD_EXP 120
38919: PUSH
38920: LD_VAR 0 6
38924: ARRAY
38925: INC
38926: ST_TO_ADDR
38927: LD_INT 1
38929: PUSH
38930: FOR_DOWNTO
38931: IFFALSE 39092
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38933: LD_EXP 120
38937: PUSH
38938: LD_VAR 0 6
38942: ARRAY
38943: PUSH
38944: LD_VAR 0 5
38948: ARRAY
38949: PUSH
38950: LD_INT 1
38952: ARRAY
38953: PUSH
38954: LD_VAR 0 2
38958: EQUAL
38959: PUSH
38960: LD_EXP 120
38964: PUSH
38965: LD_VAR 0 6
38969: ARRAY
38970: PUSH
38971: LD_VAR 0 5
38975: ARRAY
38976: PUSH
38977: LD_INT 2
38979: ARRAY
38980: PUSH
38981: LD_VAR 0 3
38985: EQUAL
38986: AND
38987: IFFALSE 39090
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38989: LD_EXP 120
38993: PUSH
38994: LD_VAR 0 6
38998: ARRAY
38999: PUSH
39000: LD_VAR 0 5
39004: ARRAY
39005: PUSH
39006: LD_INT 1
39008: ARRAY
39009: PPUSH
39010: LD_EXP 120
39014: PUSH
39015: LD_VAR 0 6
39019: ARRAY
39020: PUSH
39021: LD_VAR 0 5
39025: ARRAY
39026: PUSH
39027: LD_INT 2
39029: ARRAY
39030: PPUSH
39031: LD_VAR 0 1
39035: PPUSH
39036: CALL_OW 255
39040: PPUSH
39041: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39045: LD_ADDR_EXP 120
39049: PUSH
39050: LD_EXP 120
39054: PPUSH
39055: LD_VAR 0 6
39059: PPUSH
39060: LD_EXP 120
39064: PUSH
39065: LD_VAR 0 6
39069: ARRAY
39070: PPUSH
39071: LD_VAR 0 5
39075: PPUSH
39076: CALL_OW 3
39080: PPUSH
39081: CALL_OW 1
39085: ST_TO_ADDR
// exit ;
39086: POP
39087: POP
39088: GO 39281
// end ; end ;
39090: GO 38930
39092: POP
39093: POP
// for i := minerMinesList [ index ] downto 1 do
39094: LD_ADDR_VAR 0 5
39098: PUSH
39099: DOUBLE
39100: LD_EXP 120
39104: PUSH
39105: LD_VAR 0 6
39109: ARRAY
39110: INC
39111: ST_TO_ADDR
39112: LD_INT 1
39114: PUSH
39115: FOR_DOWNTO
39116: IFFALSE 39279
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39118: LD_EXP 120
39122: PUSH
39123: LD_VAR 0 6
39127: ARRAY
39128: PUSH
39129: LD_VAR 0 5
39133: ARRAY
39134: PUSH
39135: LD_INT 1
39137: ARRAY
39138: PPUSH
39139: LD_EXP 120
39143: PUSH
39144: LD_VAR 0 6
39148: ARRAY
39149: PUSH
39150: LD_VAR 0 5
39154: ARRAY
39155: PUSH
39156: LD_INT 2
39158: ARRAY
39159: PPUSH
39160: LD_VAR 0 2
39164: PPUSH
39165: LD_VAR 0 3
39169: PPUSH
39170: CALL_OW 298
39174: PUSH
39175: LD_INT 6
39177: LESS
39178: IFFALSE 39277
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39180: LD_EXP 120
39184: PUSH
39185: LD_VAR 0 6
39189: ARRAY
39190: PUSH
39191: LD_VAR 0 5
39195: ARRAY
39196: PUSH
39197: LD_INT 1
39199: ARRAY
39200: PPUSH
39201: LD_EXP 120
39205: PUSH
39206: LD_VAR 0 6
39210: ARRAY
39211: PUSH
39212: LD_VAR 0 5
39216: ARRAY
39217: PUSH
39218: LD_INT 2
39220: ARRAY
39221: PPUSH
39222: LD_VAR 0 1
39226: PPUSH
39227: CALL_OW 255
39231: PPUSH
39232: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39236: LD_ADDR_EXP 120
39240: PUSH
39241: LD_EXP 120
39245: PPUSH
39246: LD_VAR 0 6
39250: PPUSH
39251: LD_EXP 120
39255: PUSH
39256: LD_VAR 0 6
39260: ARRAY
39261: PPUSH
39262: LD_VAR 0 5
39266: PPUSH
39267: CALL_OW 3
39271: PPUSH
39272: CALL_OW 1
39276: ST_TO_ADDR
// end ; end ;
39277: GO 39115
39279: POP
39280: POP
// end ;
39281: LD_VAR 0 4
39285: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39286: LD_INT 0
39288: PPUSH
39289: PPUSH
39290: PPUSH
39291: PPUSH
39292: PPUSH
39293: PPUSH
39294: PPUSH
39295: PPUSH
39296: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39297: LD_VAR 0 1
39301: PPUSH
39302: CALL_OW 264
39306: PUSH
39307: LD_INT 81
39309: EQUAL
39310: NOT
39311: PUSH
39312: LD_VAR 0 1
39316: PUSH
39317: LD_EXP 119
39321: IN
39322: NOT
39323: OR
39324: IFFALSE 39328
// exit ;
39326: GO 39650
// index := GetElementIndex ( minersList , unit ) ;
39328: LD_ADDR_VAR 0 6
39332: PUSH
39333: LD_EXP 119
39337: PPUSH
39338: LD_VAR 0 1
39342: PPUSH
39343: CALL 44997 0 2
39347: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39348: LD_ADDR_VAR 0 8
39352: PUSH
39353: LD_EXP 121
39357: PUSH
39358: LD_EXP 120
39362: PUSH
39363: LD_VAR 0 6
39367: ARRAY
39368: MINUS
39369: ST_TO_ADDR
// if not minesFreeAmount then
39370: LD_VAR 0 8
39374: NOT
39375: IFFALSE 39379
// exit ;
39377: GO 39650
// tmp := [ ] ;
39379: LD_ADDR_VAR 0 7
39383: PUSH
39384: EMPTY
39385: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39386: LD_ADDR_VAR 0 5
39390: PUSH
39391: DOUBLE
39392: LD_INT 1
39394: DEC
39395: ST_TO_ADDR
39396: LD_VAR 0 8
39400: PUSH
39401: FOR_TO
39402: IFFALSE 39597
// begin _d := rand ( 0 , 5 ) ;
39404: LD_ADDR_VAR 0 11
39408: PUSH
39409: LD_INT 0
39411: PPUSH
39412: LD_INT 5
39414: PPUSH
39415: CALL_OW 12
39419: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39420: LD_ADDR_VAR 0 12
39424: PUSH
39425: LD_INT 2
39427: PPUSH
39428: LD_INT 6
39430: PPUSH
39431: CALL_OW 12
39435: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39436: LD_ADDR_VAR 0 9
39440: PUSH
39441: LD_VAR 0 2
39445: PPUSH
39446: LD_VAR 0 11
39450: PPUSH
39451: LD_VAR 0 12
39455: PPUSH
39456: CALL_OW 272
39460: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39461: LD_ADDR_VAR 0 10
39465: PUSH
39466: LD_VAR 0 3
39470: PPUSH
39471: LD_VAR 0 11
39475: PPUSH
39476: LD_VAR 0 12
39480: PPUSH
39481: CALL_OW 273
39485: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39486: LD_VAR 0 9
39490: PPUSH
39491: LD_VAR 0 10
39495: PPUSH
39496: CALL_OW 488
39500: PUSH
39501: LD_VAR 0 9
39505: PUSH
39506: LD_VAR 0 10
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_VAR 0 7
39519: IN
39520: NOT
39521: AND
39522: PUSH
39523: LD_VAR 0 9
39527: PPUSH
39528: LD_VAR 0 10
39532: PPUSH
39533: CALL_OW 458
39537: NOT
39538: AND
39539: IFFALSE 39581
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39541: LD_ADDR_VAR 0 7
39545: PUSH
39546: LD_VAR 0 7
39550: PPUSH
39551: LD_VAR 0 7
39555: PUSH
39556: LD_INT 1
39558: PLUS
39559: PPUSH
39560: LD_VAR 0 9
39564: PUSH
39565: LD_VAR 0 10
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PPUSH
39574: CALL_OW 1
39578: ST_TO_ADDR
39579: GO 39595
// i := i - 1 ;
39581: LD_ADDR_VAR 0 5
39585: PUSH
39586: LD_VAR 0 5
39590: PUSH
39591: LD_INT 1
39593: MINUS
39594: ST_TO_ADDR
// end ;
39595: GO 39401
39597: POP
39598: POP
// for i in tmp do
39599: LD_ADDR_VAR 0 5
39603: PUSH
39604: LD_VAR 0 7
39608: PUSH
39609: FOR_IN
39610: IFFALSE 39648
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39612: LD_VAR 0 1
39616: PPUSH
39617: LD_VAR 0 5
39621: PUSH
39622: LD_INT 1
39624: ARRAY
39625: PPUSH
39626: LD_VAR 0 5
39630: PUSH
39631: LD_INT 2
39633: ARRAY
39634: PPUSH
39635: CALL 38594 0 3
39639: NOT
39640: IFFALSE 39646
// exit ;
39642: POP
39643: POP
39644: GO 39650
39646: GO 39609
39648: POP
39649: POP
// end ;
39650: LD_VAR 0 4
39654: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39655: LD_INT 0
39657: PPUSH
39658: PPUSH
39659: PPUSH
39660: PPUSH
39661: PPUSH
39662: PPUSH
39663: PPUSH
// if not GetClass ( unit ) = class_sniper then
39664: LD_VAR 0 1
39668: PPUSH
39669: CALL_OW 257
39673: PUSH
39674: LD_INT 5
39676: EQUAL
39677: NOT
39678: IFFALSE 39682
// exit ;
39680: GO 40070
// dist := 8 ;
39682: LD_ADDR_VAR 0 5
39686: PUSH
39687: LD_INT 8
39689: ST_TO_ADDR
// viewRange := 12 ;
39690: LD_ADDR_VAR 0 7
39694: PUSH
39695: LD_INT 12
39697: ST_TO_ADDR
// side := GetSide ( unit ) ;
39698: LD_ADDR_VAR 0 6
39702: PUSH
39703: LD_VAR 0 1
39707: PPUSH
39708: CALL_OW 255
39712: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39713: LD_INT 61
39715: PPUSH
39716: LD_VAR 0 6
39720: PPUSH
39721: CALL_OW 321
39725: PUSH
39726: LD_INT 2
39728: EQUAL
39729: IFFALSE 39739
// viewRange := 16 ;
39731: LD_ADDR_VAR 0 7
39735: PUSH
39736: LD_INT 16
39738: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39739: LD_VAR 0 1
39743: PPUSH
39744: LD_VAR 0 2
39748: PPUSH
39749: LD_VAR 0 3
39753: PPUSH
39754: CALL_OW 297
39758: PUSH
39759: LD_VAR 0 5
39763: GREATER
39764: IFFALSE 39843
// begin ComMoveXY ( unit , x , y ) ;
39766: LD_VAR 0 1
39770: PPUSH
39771: LD_VAR 0 2
39775: PPUSH
39776: LD_VAR 0 3
39780: PPUSH
39781: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39785: LD_INT 35
39787: PPUSH
39788: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39792: LD_VAR 0 1
39796: PPUSH
39797: LD_VAR 0 2
39801: PPUSH
39802: LD_VAR 0 3
39806: PPUSH
39807: CALL 76352 0 3
39811: NOT
39812: IFFALSE 39816
// exit ;
39814: GO 40070
// until GetDistUnitXY ( unit , x , y ) < dist ;
39816: LD_VAR 0 1
39820: PPUSH
39821: LD_VAR 0 2
39825: PPUSH
39826: LD_VAR 0 3
39830: PPUSH
39831: CALL_OW 297
39835: PUSH
39836: LD_VAR 0 5
39840: LESS
39841: IFFALSE 39785
// end ; ComTurnXY ( unit , x , y ) ;
39843: LD_VAR 0 1
39847: PPUSH
39848: LD_VAR 0 2
39852: PPUSH
39853: LD_VAR 0 3
39857: PPUSH
39858: CALL_OW 118
// wait ( 5 ) ;
39862: LD_INT 5
39864: PPUSH
39865: CALL_OW 67
// _d := GetDir ( unit ) ;
39869: LD_ADDR_VAR 0 10
39873: PUSH
39874: LD_VAR 0 1
39878: PPUSH
39879: CALL_OW 254
39883: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39884: LD_ADDR_VAR 0 8
39888: PUSH
39889: LD_VAR 0 1
39893: PPUSH
39894: CALL_OW 250
39898: PPUSH
39899: LD_VAR 0 10
39903: PPUSH
39904: LD_VAR 0 5
39908: PPUSH
39909: CALL_OW 272
39913: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39914: LD_ADDR_VAR 0 9
39918: PUSH
39919: LD_VAR 0 1
39923: PPUSH
39924: CALL_OW 251
39928: PPUSH
39929: LD_VAR 0 10
39933: PPUSH
39934: LD_VAR 0 5
39938: PPUSH
39939: CALL_OW 273
39943: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39944: LD_VAR 0 8
39948: PPUSH
39949: LD_VAR 0 9
39953: PPUSH
39954: CALL_OW 488
39958: NOT
39959: IFFALSE 39963
// exit ;
39961: GO 40070
// ComAnimCustom ( unit , 1 ) ;
39963: LD_VAR 0 1
39967: PPUSH
39968: LD_INT 1
39970: PPUSH
39971: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39975: LD_VAR 0 8
39979: PPUSH
39980: LD_VAR 0 9
39984: PPUSH
39985: LD_VAR 0 6
39989: PPUSH
39990: LD_VAR 0 7
39994: PPUSH
39995: CALL_OW 330
// repeat wait ( 1 ) ;
39999: LD_INT 1
40001: PPUSH
40002: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40006: LD_VAR 0 1
40010: PPUSH
40011: CALL_OW 316
40015: PUSH
40016: LD_VAR 0 1
40020: PPUSH
40021: CALL_OW 314
40025: OR
40026: PUSH
40027: LD_VAR 0 1
40031: PPUSH
40032: CALL_OW 302
40036: NOT
40037: OR
40038: PUSH
40039: LD_VAR 0 1
40043: PPUSH
40044: CALL_OW 301
40048: OR
40049: IFFALSE 39999
// RemoveSeeing ( _x , _y , side ) ;
40051: LD_VAR 0 8
40055: PPUSH
40056: LD_VAR 0 9
40060: PPUSH
40061: LD_VAR 0 6
40065: PPUSH
40066: CALL_OW 331
// end ; end_of_file
40070: LD_VAR 0 4
40074: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40075: LD_INT 0
40077: PPUSH
40078: PPUSH
// if exist_mode then
40079: LD_VAR 0 2
40083: IFFALSE 40108
// unit := CreateCharacter ( prefix & ident ) else
40085: LD_ADDR_VAR 0 5
40089: PUSH
40090: LD_VAR 0 3
40094: PUSH
40095: LD_VAR 0 1
40099: STR
40100: PPUSH
40101: CALL_OW 34
40105: ST_TO_ADDR
40106: GO 40123
// unit := NewCharacter ( ident ) ;
40108: LD_ADDR_VAR 0 5
40112: PUSH
40113: LD_VAR 0 1
40117: PPUSH
40118: CALL_OW 25
40122: ST_TO_ADDR
// result := unit ;
40123: LD_ADDR_VAR 0 4
40127: PUSH
40128: LD_VAR 0 5
40132: ST_TO_ADDR
// end ;
40133: LD_VAR 0 4
40137: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40138: LD_INT 0
40140: PPUSH
40141: PPUSH
// if not side or not nation then
40142: LD_VAR 0 1
40146: NOT
40147: PUSH
40148: LD_VAR 0 2
40152: NOT
40153: OR
40154: IFFALSE 40158
// exit ;
40156: GO 40926
// case nation of nation_american :
40158: LD_VAR 0 2
40162: PUSH
40163: LD_INT 1
40165: DOUBLE
40166: EQUAL
40167: IFTRUE 40171
40169: GO 40385
40171: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40172: LD_ADDR_VAR 0 4
40176: PUSH
40177: LD_INT 35
40179: PUSH
40180: LD_INT 45
40182: PUSH
40183: LD_INT 46
40185: PUSH
40186: LD_INT 47
40188: PUSH
40189: LD_INT 82
40191: PUSH
40192: LD_INT 83
40194: PUSH
40195: LD_INT 84
40197: PUSH
40198: LD_INT 85
40200: PUSH
40201: LD_INT 86
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: LD_INT 6
40212: PUSH
40213: LD_INT 15
40215: PUSH
40216: LD_INT 16
40218: PUSH
40219: LD_INT 7
40221: PUSH
40222: LD_INT 12
40224: PUSH
40225: LD_INT 13
40227: PUSH
40228: LD_INT 10
40230: PUSH
40231: LD_INT 14
40233: PUSH
40234: LD_INT 20
40236: PUSH
40237: LD_INT 21
40239: PUSH
40240: LD_INT 22
40242: PUSH
40243: LD_INT 25
40245: PUSH
40246: LD_INT 32
40248: PUSH
40249: LD_INT 27
40251: PUSH
40252: LD_INT 36
40254: PUSH
40255: LD_INT 69
40257: PUSH
40258: LD_INT 39
40260: PUSH
40261: LD_INT 34
40263: PUSH
40264: LD_INT 40
40266: PUSH
40267: LD_INT 48
40269: PUSH
40270: LD_INT 49
40272: PUSH
40273: LD_INT 50
40275: PUSH
40276: LD_INT 51
40278: PUSH
40279: LD_INT 52
40281: PUSH
40282: LD_INT 53
40284: PUSH
40285: LD_INT 54
40287: PUSH
40288: LD_INT 55
40290: PUSH
40291: LD_INT 56
40293: PUSH
40294: LD_INT 57
40296: PUSH
40297: LD_INT 58
40299: PUSH
40300: LD_INT 59
40302: PUSH
40303: LD_INT 60
40305: PUSH
40306: LD_INT 61
40308: PUSH
40309: LD_INT 62
40311: PUSH
40312: LD_INT 80
40314: PUSH
40315: LD_INT 82
40317: PUSH
40318: LD_INT 83
40320: PUSH
40321: LD_INT 84
40323: PUSH
40324: LD_INT 85
40326: PUSH
40327: LD_INT 86
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: ST_TO_ADDR
40383: GO 40850
40385: LD_INT 2
40387: DOUBLE
40388: EQUAL
40389: IFTRUE 40393
40391: GO 40619
40393: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40394: LD_ADDR_VAR 0 4
40398: PUSH
40399: LD_INT 35
40401: PUSH
40402: LD_INT 45
40404: PUSH
40405: LD_INT 46
40407: PUSH
40408: LD_INT 47
40410: PUSH
40411: LD_INT 82
40413: PUSH
40414: LD_INT 83
40416: PUSH
40417: LD_INT 84
40419: PUSH
40420: LD_INT 85
40422: PUSH
40423: LD_INT 87
40425: PUSH
40426: LD_INT 70
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: LD_INT 11
40434: PUSH
40435: LD_INT 3
40437: PUSH
40438: LD_INT 4
40440: PUSH
40441: LD_INT 5
40443: PUSH
40444: LD_INT 6
40446: PUSH
40447: LD_INT 15
40449: PUSH
40450: LD_INT 18
40452: PUSH
40453: LD_INT 7
40455: PUSH
40456: LD_INT 17
40458: PUSH
40459: LD_INT 8
40461: PUSH
40462: LD_INT 20
40464: PUSH
40465: LD_INT 21
40467: PUSH
40468: LD_INT 22
40470: PUSH
40471: LD_INT 72
40473: PUSH
40474: LD_INT 26
40476: PUSH
40477: LD_INT 69
40479: PUSH
40480: LD_INT 39
40482: PUSH
40483: LD_INT 40
40485: PUSH
40486: LD_INT 41
40488: PUSH
40489: LD_INT 42
40491: PUSH
40492: LD_INT 43
40494: PUSH
40495: LD_INT 48
40497: PUSH
40498: LD_INT 49
40500: PUSH
40501: LD_INT 50
40503: PUSH
40504: LD_INT 51
40506: PUSH
40507: LD_INT 52
40509: PUSH
40510: LD_INT 53
40512: PUSH
40513: LD_INT 54
40515: PUSH
40516: LD_INT 55
40518: PUSH
40519: LD_INT 56
40521: PUSH
40522: LD_INT 60
40524: PUSH
40525: LD_INT 61
40527: PUSH
40528: LD_INT 62
40530: PUSH
40531: LD_INT 66
40533: PUSH
40534: LD_INT 67
40536: PUSH
40537: LD_INT 68
40539: PUSH
40540: LD_INT 81
40542: PUSH
40543: LD_INT 82
40545: PUSH
40546: LD_INT 83
40548: PUSH
40549: LD_INT 84
40551: PUSH
40552: LD_INT 85
40554: PUSH
40555: LD_INT 87
40557: PUSH
40558: LD_INT 88
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
40617: GO 40850
40619: LD_INT 3
40621: DOUBLE
40622: EQUAL
40623: IFTRUE 40627
40625: GO 40849
40627: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40628: LD_ADDR_VAR 0 4
40632: PUSH
40633: LD_INT 46
40635: PUSH
40636: LD_INT 47
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: LD_INT 82
40647: PUSH
40648: LD_INT 83
40650: PUSH
40651: LD_INT 84
40653: PUSH
40654: LD_INT 85
40656: PUSH
40657: LD_INT 86
40659: PUSH
40660: LD_INT 11
40662: PUSH
40663: LD_INT 9
40665: PUSH
40666: LD_INT 20
40668: PUSH
40669: LD_INT 19
40671: PUSH
40672: LD_INT 21
40674: PUSH
40675: LD_INT 24
40677: PUSH
40678: LD_INT 22
40680: PUSH
40681: LD_INT 25
40683: PUSH
40684: LD_INT 28
40686: PUSH
40687: LD_INT 29
40689: PUSH
40690: LD_INT 30
40692: PUSH
40693: LD_INT 31
40695: PUSH
40696: LD_INT 37
40698: PUSH
40699: LD_INT 38
40701: PUSH
40702: LD_INT 32
40704: PUSH
40705: LD_INT 27
40707: PUSH
40708: LD_INT 33
40710: PUSH
40711: LD_INT 69
40713: PUSH
40714: LD_INT 39
40716: PUSH
40717: LD_INT 34
40719: PUSH
40720: LD_INT 40
40722: PUSH
40723: LD_INT 71
40725: PUSH
40726: LD_INT 23
40728: PUSH
40729: LD_INT 44
40731: PUSH
40732: LD_INT 48
40734: PUSH
40735: LD_INT 49
40737: PUSH
40738: LD_INT 50
40740: PUSH
40741: LD_INT 51
40743: PUSH
40744: LD_INT 52
40746: PUSH
40747: LD_INT 53
40749: PUSH
40750: LD_INT 54
40752: PUSH
40753: LD_INT 55
40755: PUSH
40756: LD_INT 56
40758: PUSH
40759: LD_INT 57
40761: PUSH
40762: LD_INT 58
40764: PUSH
40765: LD_INT 59
40767: PUSH
40768: LD_INT 63
40770: PUSH
40771: LD_INT 64
40773: PUSH
40774: LD_INT 65
40776: PUSH
40777: LD_INT 82
40779: PUSH
40780: LD_INT 83
40782: PUSH
40783: LD_INT 84
40785: PUSH
40786: LD_INT 85
40788: PUSH
40789: LD_INT 86
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: ST_TO_ADDR
40847: GO 40850
40849: POP
// if state > - 1 and state < 3 then
40850: LD_VAR 0 3
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: GREATER
40859: PUSH
40860: LD_VAR 0 3
40864: PUSH
40865: LD_INT 3
40867: LESS
40868: AND
40869: IFFALSE 40926
// for i in result do
40871: LD_ADDR_VAR 0 5
40875: PUSH
40876: LD_VAR 0 4
40880: PUSH
40881: FOR_IN
40882: IFFALSE 40924
// if GetTech ( i , side ) <> state then
40884: LD_VAR 0 5
40888: PPUSH
40889: LD_VAR 0 1
40893: PPUSH
40894: CALL_OW 321
40898: PUSH
40899: LD_VAR 0 3
40903: NONEQUAL
40904: IFFALSE 40922
// result := result diff i ;
40906: LD_ADDR_VAR 0 4
40910: PUSH
40911: LD_VAR 0 4
40915: PUSH
40916: LD_VAR 0 5
40920: DIFF
40921: ST_TO_ADDR
40922: GO 40881
40924: POP
40925: POP
// end ;
40926: LD_VAR 0 4
40930: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40931: LD_INT 0
40933: PPUSH
40934: PPUSH
40935: PPUSH
// result := true ;
40936: LD_ADDR_VAR 0 3
40940: PUSH
40941: LD_INT 1
40943: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40944: LD_ADDR_VAR 0 5
40948: PUSH
40949: LD_VAR 0 2
40953: PPUSH
40954: CALL_OW 480
40958: ST_TO_ADDR
// if not tmp then
40959: LD_VAR 0 5
40963: NOT
40964: IFFALSE 40968
// exit ;
40966: GO 41017
// for i in tmp do
40968: LD_ADDR_VAR 0 4
40972: PUSH
40973: LD_VAR 0 5
40977: PUSH
40978: FOR_IN
40979: IFFALSE 41015
// if GetTech ( i , side ) <> state_researched then
40981: LD_VAR 0 4
40985: PPUSH
40986: LD_VAR 0 1
40990: PPUSH
40991: CALL_OW 321
40995: PUSH
40996: LD_INT 2
40998: NONEQUAL
40999: IFFALSE 41013
// begin result := false ;
41001: LD_ADDR_VAR 0 3
41005: PUSH
41006: LD_INT 0
41008: ST_TO_ADDR
// exit ;
41009: POP
41010: POP
41011: GO 41017
// end ;
41013: GO 40978
41015: POP
41016: POP
// end ;
41017: LD_VAR 0 3
41021: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41022: LD_INT 0
41024: PPUSH
41025: PPUSH
41026: PPUSH
41027: PPUSH
41028: PPUSH
41029: PPUSH
41030: PPUSH
41031: PPUSH
41032: PPUSH
41033: PPUSH
41034: PPUSH
41035: PPUSH
41036: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41037: LD_VAR 0 1
41041: NOT
41042: PUSH
41043: LD_VAR 0 1
41047: PPUSH
41048: CALL_OW 257
41052: PUSH
41053: LD_INT 9
41055: NONEQUAL
41056: OR
41057: IFFALSE 41061
// exit ;
41059: GO 41634
// side := GetSide ( unit ) ;
41061: LD_ADDR_VAR 0 9
41065: PUSH
41066: LD_VAR 0 1
41070: PPUSH
41071: CALL_OW 255
41075: ST_TO_ADDR
// tech_space := tech_spacanom ;
41076: LD_ADDR_VAR 0 12
41080: PUSH
41081: LD_INT 29
41083: ST_TO_ADDR
// tech_time := tech_taurad ;
41084: LD_ADDR_VAR 0 13
41088: PUSH
41089: LD_INT 28
41091: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41092: LD_ADDR_VAR 0 11
41096: PUSH
41097: LD_VAR 0 1
41101: PPUSH
41102: CALL_OW 310
41106: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41107: LD_VAR 0 11
41111: PPUSH
41112: CALL_OW 247
41116: PUSH
41117: LD_INT 2
41119: EQUAL
41120: IFFALSE 41124
// exit ;
41122: GO 41634
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41124: LD_ADDR_VAR 0 8
41128: PUSH
41129: LD_INT 81
41131: PUSH
41132: LD_VAR 0 9
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 3
41143: PUSH
41144: LD_INT 21
41146: PUSH
41147: LD_INT 3
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PPUSH
41162: CALL_OW 69
41166: ST_TO_ADDR
// if not tmp then
41167: LD_VAR 0 8
41171: NOT
41172: IFFALSE 41176
// exit ;
41174: GO 41634
// if in_unit then
41176: LD_VAR 0 11
41180: IFFALSE 41204
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41182: LD_ADDR_VAR 0 10
41186: PUSH
41187: LD_VAR 0 8
41191: PPUSH
41192: LD_VAR 0 11
41196: PPUSH
41197: CALL_OW 74
41201: ST_TO_ADDR
41202: GO 41224
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41204: LD_ADDR_VAR 0 10
41208: PUSH
41209: LD_VAR 0 8
41213: PPUSH
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 74
41223: ST_TO_ADDR
// if not enemy then
41224: LD_VAR 0 10
41228: NOT
41229: IFFALSE 41233
// exit ;
41231: GO 41634
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41233: LD_VAR 0 11
41237: PUSH
41238: LD_VAR 0 11
41242: PPUSH
41243: LD_VAR 0 10
41247: PPUSH
41248: CALL_OW 296
41252: PUSH
41253: LD_INT 13
41255: GREATER
41256: AND
41257: PUSH
41258: LD_VAR 0 1
41262: PPUSH
41263: LD_VAR 0 10
41267: PPUSH
41268: CALL_OW 296
41272: PUSH
41273: LD_INT 12
41275: GREATER
41276: OR
41277: IFFALSE 41281
// exit ;
41279: GO 41634
// missile := [ 1 ] ;
41281: LD_ADDR_VAR 0 14
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: EMPTY
41290: LIST
41291: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41292: LD_VAR 0 9
41296: PPUSH
41297: LD_VAR 0 12
41301: PPUSH
41302: CALL_OW 325
41306: IFFALSE 41335
// missile := Replace ( missile , missile + 1 , 2 ) ;
41308: LD_ADDR_VAR 0 14
41312: PUSH
41313: LD_VAR 0 14
41317: PPUSH
41318: LD_VAR 0 14
41322: PUSH
41323: LD_INT 1
41325: PLUS
41326: PPUSH
41327: LD_INT 2
41329: PPUSH
41330: CALL_OW 1
41334: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41335: LD_VAR 0 9
41339: PPUSH
41340: LD_VAR 0 13
41344: PPUSH
41345: CALL_OW 325
41349: PUSH
41350: LD_VAR 0 10
41354: PPUSH
41355: CALL_OW 255
41359: PPUSH
41360: LD_VAR 0 13
41364: PPUSH
41365: CALL_OW 325
41369: NOT
41370: AND
41371: IFFALSE 41400
// missile := Replace ( missile , missile + 1 , 3 ) ;
41373: LD_ADDR_VAR 0 14
41377: PUSH
41378: LD_VAR 0 14
41382: PPUSH
41383: LD_VAR 0 14
41387: PUSH
41388: LD_INT 1
41390: PLUS
41391: PPUSH
41392: LD_INT 3
41394: PPUSH
41395: CALL_OW 1
41399: ST_TO_ADDR
// if missile < 2 then
41400: LD_VAR 0 14
41404: PUSH
41405: LD_INT 2
41407: LESS
41408: IFFALSE 41412
// exit ;
41410: GO 41634
// x := GetX ( enemy ) ;
41412: LD_ADDR_VAR 0 4
41416: PUSH
41417: LD_VAR 0 10
41421: PPUSH
41422: CALL_OW 250
41426: ST_TO_ADDR
// y := GetY ( enemy ) ;
41427: LD_ADDR_VAR 0 5
41431: PUSH
41432: LD_VAR 0 10
41436: PPUSH
41437: CALL_OW 251
41441: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41442: LD_ADDR_VAR 0 6
41446: PUSH
41447: LD_VAR 0 4
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PPUSH
41456: LD_INT 1
41458: PPUSH
41459: CALL_OW 12
41463: PLUS
41464: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41465: LD_ADDR_VAR 0 7
41469: PUSH
41470: LD_VAR 0 5
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PPUSH
41479: LD_INT 1
41481: PPUSH
41482: CALL_OW 12
41486: PLUS
41487: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41488: LD_VAR 0 6
41492: PPUSH
41493: LD_VAR 0 7
41497: PPUSH
41498: CALL_OW 488
41502: NOT
41503: IFFALSE 41525
// begin _x := x ;
41505: LD_ADDR_VAR 0 6
41509: PUSH
41510: LD_VAR 0 4
41514: ST_TO_ADDR
// _y := y ;
41515: LD_ADDR_VAR 0 7
41519: PUSH
41520: LD_VAR 0 5
41524: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41525: LD_ADDR_VAR 0 3
41529: PUSH
41530: LD_INT 1
41532: PPUSH
41533: LD_VAR 0 14
41537: PPUSH
41538: CALL_OW 12
41542: ST_TO_ADDR
// case i of 1 :
41543: LD_VAR 0 3
41547: PUSH
41548: LD_INT 1
41550: DOUBLE
41551: EQUAL
41552: IFTRUE 41556
41554: GO 41573
41556: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41557: LD_VAR 0 1
41561: PPUSH
41562: LD_VAR 0 10
41566: PPUSH
41567: CALL_OW 115
41571: GO 41634
41573: LD_INT 2
41575: DOUBLE
41576: EQUAL
41577: IFTRUE 41581
41579: GO 41603
41581: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41582: LD_VAR 0 1
41586: PPUSH
41587: LD_VAR 0 6
41591: PPUSH
41592: LD_VAR 0 7
41596: PPUSH
41597: CALL_OW 153
41601: GO 41634
41603: LD_INT 3
41605: DOUBLE
41606: EQUAL
41607: IFTRUE 41611
41609: GO 41633
41611: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41612: LD_VAR 0 1
41616: PPUSH
41617: LD_VAR 0 6
41621: PPUSH
41622: LD_VAR 0 7
41626: PPUSH
41627: CALL_OW 154
41631: GO 41634
41633: POP
// end ;
41634: LD_VAR 0 2
41638: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41639: LD_INT 0
41641: PPUSH
41642: PPUSH
41643: PPUSH
41644: PPUSH
41645: PPUSH
41646: PPUSH
// if not unit or not building then
41647: LD_VAR 0 1
41651: NOT
41652: PUSH
41653: LD_VAR 0 2
41657: NOT
41658: OR
41659: IFFALSE 41663
// exit ;
41661: GO 41821
// x := GetX ( building ) ;
41663: LD_ADDR_VAR 0 5
41667: PUSH
41668: LD_VAR 0 2
41672: PPUSH
41673: CALL_OW 250
41677: ST_TO_ADDR
// y := GetY ( building ) ;
41678: LD_ADDR_VAR 0 6
41682: PUSH
41683: LD_VAR 0 2
41687: PPUSH
41688: CALL_OW 251
41692: ST_TO_ADDR
// for i = 0 to 5 do
41693: LD_ADDR_VAR 0 4
41697: PUSH
41698: DOUBLE
41699: LD_INT 0
41701: DEC
41702: ST_TO_ADDR
41703: LD_INT 5
41705: PUSH
41706: FOR_TO
41707: IFFALSE 41819
// begin _x := ShiftX ( x , i , 3 ) ;
41709: LD_ADDR_VAR 0 7
41713: PUSH
41714: LD_VAR 0 5
41718: PPUSH
41719: LD_VAR 0 4
41723: PPUSH
41724: LD_INT 3
41726: PPUSH
41727: CALL_OW 272
41731: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41732: LD_ADDR_VAR 0 8
41736: PUSH
41737: LD_VAR 0 6
41741: PPUSH
41742: LD_VAR 0 4
41746: PPUSH
41747: LD_INT 3
41749: PPUSH
41750: CALL_OW 273
41754: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41755: LD_VAR 0 7
41759: PPUSH
41760: LD_VAR 0 8
41764: PPUSH
41765: CALL_OW 488
41769: NOT
41770: IFFALSE 41774
// continue ;
41772: GO 41706
// if HexInfo ( _x , _y ) = 0 then
41774: LD_VAR 0 7
41778: PPUSH
41779: LD_VAR 0 8
41783: PPUSH
41784: CALL_OW 428
41788: PUSH
41789: LD_INT 0
41791: EQUAL
41792: IFFALSE 41817
// begin ComMoveXY ( unit , _x , _y ) ;
41794: LD_VAR 0 1
41798: PPUSH
41799: LD_VAR 0 7
41803: PPUSH
41804: LD_VAR 0 8
41808: PPUSH
41809: CALL_OW 111
// exit ;
41813: POP
41814: POP
41815: GO 41821
// end ; end ;
41817: GO 41706
41819: POP
41820: POP
// end ;
41821: LD_VAR 0 3
41825: RET
// export function ScanBase ( side , base_area ) ; begin
41826: LD_INT 0
41828: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41829: LD_ADDR_VAR 0 3
41833: PUSH
41834: LD_VAR 0 2
41838: PPUSH
41839: LD_INT 81
41841: PUSH
41842: LD_VAR 0 1
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PPUSH
41851: CALL_OW 70
41855: ST_TO_ADDR
// end ;
41856: LD_VAR 0 3
41860: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41861: LD_INT 0
41863: PPUSH
41864: PPUSH
41865: PPUSH
41866: PPUSH
// result := false ;
41867: LD_ADDR_VAR 0 2
41871: PUSH
41872: LD_INT 0
41874: ST_TO_ADDR
// side := GetSide ( unit ) ;
41875: LD_ADDR_VAR 0 3
41879: PUSH
41880: LD_VAR 0 1
41884: PPUSH
41885: CALL_OW 255
41889: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41890: LD_ADDR_VAR 0 4
41894: PUSH
41895: LD_VAR 0 1
41899: PPUSH
41900: CALL_OW 248
41904: ST_TO_ADDR
// case nat of 1 :
41905: LD_VAR 0 4
41909: PUSH
41910: LD_INT 1
41912: DOUBLE
41913: EQUAL
41914: IFTRUE 41918
41916: GO 41929
41918: POP
// tech := tech_lassight ; 2 :
41919: LD_ADDR_VAR 0 5
41923: PUSH
41924: LD_INT 12
41926: ST_TO_ADDR
41927: GO 41968
41929: LD_INT 2
41931: DOUBLE
41932: EQUAL
41933: IFTRUE 41937
41935: GO 41948
41937: POP
// tech := tech_mortar ; 3 :
41938: LD_ADDR_VAR 0 5
41942: PUSH
41943: LD_INT 41
41945: ST_TO_ADDR
41946: GO 41968
41948: LD_INT 3
41950: DOUBLE
41951: EQUAL
41952: IFTRUE 41956
41954: GO 41967
41956: POP
// tech := tech_bazooka ; end ;
41957: LD_ADDR_VAR 0 5
41961: PUSH
41962: LD_INT 44
41964: ST_TO_ADDR
41965: GO 41968
41967: POP
// if Researched ( side , tech ) then
41968: LD_VAR 0 3
41972: PPUSH
41973: LD_VAR 0 5
41977: PPUSH
41978: CALL_OW 325
41982: IFFALSE 42009
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41984: LD_ADDR_VAR 0 2
41988: PUSH
41989: LD_INT 5
41991: PUSH
41992: LD_INT 8
41994: PUSH
41995: LD_INT 9
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: PUSH
42003: LD_VAR 0 4
42007: ARRAY
42008: ST_TO_ADDR
// end ;
42009: LD_VAR 0 2
42013: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42014: LD_INT 0
42016: PPUSH
42017: PPUSH
42018: PPUSH
// if not mines then
42019: LD_VAR 0 2
42023: NOT
42024: IFFALSE 42028
// exit ;
42026: GO 42172
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42028: LD_ADDR_VAR 0 5
42032: PUSH
42033: LD_INT 81
42035: PUSH
42036: LD_VAR 0 1
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 3
42047: PUSH
42048: LD_INT 21
42050: PUSH
42051: LD_INT 3
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PPUSH
42066: CALL_OW 69
42070: ST_TO_ADDR
// for i in mines do
42071: LD_ADDR_VAR 0 4
42075: PUSH
42076: LD_VAR 0 2
42080: PUSH
42081: FOR_IN
42082: IFFALSE 42170
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42084: LD_VAR 0 4
42088: PUSH
42089: LD_INT 1
42091: ARRAY
42092: PPUSH
42093: LD_VAR 0 4
42097: PUSH
42098: LD_INT 2
42100: ARRAY
42101: PPUSH
42102: CALL_OW 458
42106: NOT
42107: IFFALSE 42111
// continue ;
42109: GO 42081
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42111: LD_VAR 0 4
42115: PUSH
42116: LD_INT 1
42118: ARRAY
42119: PPUSH
42120: LD_VAR 0 4
42124: PUSH
42125: LD_INT 2
42127: ARRAY
42128: PPUSH
42129: CALL_OW 428
42133: PUSH
42134: LD_VAR 0 5
42138: IN
42139: IFFALSE 42168
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42141: LD_VAR 0 4
42145: PUSH
42146: LD_INT 1
42148: ARRAY
42149: PPUSH
42150: LD_VAR 0 4
42154: PUSH
42155: LD_INT 2
42157: ARRAY
42158: PPUSH
42159: LD_VAR 0 1
42163: PPUSH
42164: CALL_OW 456
// end ;
42168: GO 42081
42170: POP
42171: POP
// end ;
42172: LD_VAR 0 3
42176: RET
// export function Count ( array ) ; var i ; begin
42177: LD_INT 0
42179: PPUSH
42180: PPUSH
// result := 0 ;
42181: LD_ADDR_VAR 0 2
42185: PUSH
42186: LD_INT 0
42188: ST_TO_ADDR
// for i in array do
42189: LD_ADDR_VAR 0 3
42193: PUSH
42194: LD_VAR 0 1
42198: PUSH
42199: FOR_IN
42200: IFFALSE 42224
// if i then
42202: LD_VAR 0 3
42206: IFFALSE 42222
// result := result + 1 ;
42208: LD_ADDR_VAR 0 2
42212: PUSH
42213: LD_VAR 0 2
42217: PUSH
42218: LD_INT 1
42220: PLUS
42221: ST_TO_ADDR
42222: GO 42199
42224: POP
42225: POP
// end ;
42226: LD_VAR 0 2
42230: RET
// export function IsEmpty ( building ) ; begin
42231: LD_INT 0
42233: PPUSH
// if not building then
42234: LD_VAR 0 1
42238: NOT
42239: IFFALSE 42243
// exit ;
42241: GO 42286
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42243: LD_ADDR_VAR 0 2
42247: PUSH
42248: LD_VAR 0 1
42252: PUSH
42253: LD_INT 22
42255: PUSH
42256: LD_VAR 0 1
42260: PPUSH
42261: CALL_OW 255
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 58
42272: PUSH
42273: EMPTY
42274: LIST
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PPUSH
42280: CALL_OW 69
42284: IN
42285: ST_TO_ADDR
// end ;
42286: LD_VAR 0 2
42290: RET
// export function IsNotFull ( building ) ; var places ; begin
42291: LD_INT 0
42293: PPUSH
42294: PPUSH
// if not building then
42295: LD_VAR 0 1
42299: NOT
42300: IFFALSE 42304
// exit ;
42302: GO 42475
// result := false ;
42304: LD_ADDR_VAR 0 2
42308: PUSH
42309: LD_INT 0
42311: ST_TO_ADDR
// places := 0 ;
42312: LD_ADDR_VAR 0 3
42316: PUSH
42317: LD_INT 0
42319: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42320: LD_VAR 0 1
42324: PPUSH
42325: CALL_OW 266
42329: PUSH
42330: LD_INT 0
42332: DOUBLE
42333: EQUAL
42334: IFTRUE 42392
42336: LD_INT 1
42338: DOUBLE
42339: EQUAL
42340: IFTRUE 42392
42342: LD_INT 6
42344: DOUBLE
42345: EQUAL
42346: IFTRUE 42392
42348: LD_INT 7
42350: DOUBLE
42351: EQUAL
42352: IFTRUE 42392
42354: LD_INT 8
42356: DOUBLE
42357: EQUAL
42358: IFTRUE 42392
42360: LD_INT 4
42362: DOUBLE
42363: EQUAL
42364: IFTRUE 42392
42366: LD_INT 5
42368: DOUBLE
42369: EQUAL
42370: IFTRUE 42392
42372: LD_INT 2
42374: DOUBLE
42375: EQUAL
42376: IFTRUE 42392
42378: LD_INT 3
42380: DOUBLE
42381: EQUAL
42382: IFTRUE 42392
42384: LD_INT 35
42386: DOUBLE
42387: EQUAL
42388: IFTRUE 42392
42390: GO 42403
42392: POP
// places := 6 ; b_bunker , b_breastwork :
42393: LD_ADDR_VAR 0 3
42397: PUSH
42398: LD_INT 6
42400: ST_TO_ADDR
42401: GO 42448
42403: LD_INT 32
42405: DOUBLE
42406: EQUAL
42407: IFTRUE 42417
42409: LD_INT 31
42411: DOUBLE
42412: EQUAL
42413: IFTRUE 42417
42415: GO 42428
42417: POP
// places := 1 ; b_control_tower :
42418: LD_ADDR_VAR 0 3
42422: PUSH
42423: LD_INT 1
42425: ST_TO_ADDR
42426: GO 42448
42428: LD_INT 36
42430: DOUBLE
42431: EQUAL
42432: IFTRUE 42436
42434: GO 42447
42436: POP
// places := 3 ; end ;
42437: LD_ADDR_VAR 0 3
42441: PUSH
42442: LD_INT 3
42444: ST_TO_ADDR
42445: GO 42448
42447: POP
// if places then
42448: LD_VAR 0 3
42452: IFFALSE 42475
// result := UnitsInside ( building ) < places ;
42454: LD_ADDR_VAR 0 2
42458: PUSH
42459: LD_VAR 0 1
42463: PPUSH
42464: CALL_OW 313
42468: PUSH
42469: LD_VAR 0 3
42473: LESS
42474: ST_TO_ADDR
// end ;
42475: LD_VAR 0 2
42479: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42480: LD_INT 0
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
// tmp := [ ] ;
42486: LD_ADDR_VAR 0 3
42490: PUSH
42491: EMPTY
42492: ST_TO_ADDR
// list := [ ] ;
42493: LD_ADDR_VAR 0 5
42497: PUSH
42498: EMPTY
42499: ST_TO_ADDR
// for i = 16 to 25 do
42500: LD_ADDR_VAR 0 4
42504: PUSH
42505: DOUBLE
42506: LD_INT 16
42508: DEC
42509: ST_TO_ADDR
42510: LD_INT 25
42512: PUSH
42513: FOR_TO
42514: IFFALSE 42587
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42516: LD_ADDR_VAR 0 3
42520: PUSH
42521: LD_VAR 0 3
42525: PUSH
42526: LD_INT 22
42528: PUSH
42529: LD_VAR 0 1
42533: PPUSH
42534: CALL_OW 255
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 91
42545: PUSH
42546: LD_VAR 0 1
42550: PUSH
42551: LD_INT 6
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 30
42561: PUSH
42562: LD_VAR 0 4
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: PUSH
42576: EMPTY
42577: LIST
42578: PPUSH
42579: CALL_OW 69
42583: ADD
42584: ST_TO_ADDR
42585: GO 42513
42587: POP
42588: POP
// for i = 1 to tmp do
42589: LD_ADDR_VAR 0 4
42593: PUSH
42594: DOUBLE
42595: LD_INT 1
42597: DEC
42598: ST_TO_ADDR
42599: LD_VAR 0 3
42603: PUSH
42604: FOR_TO
42605: IFFALSE 42693
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42607: LD_ADDR_VAR 0 5
42611: PUSH
42612: LD_VAR 0 5
42616: PUSH
42617: LD_VAR 0 3
42621: PUSH
42622: LD_VAR 0 4
42626: ARRAY
42627: PPUSH
42628: CALL_OW 266
42632: PUSH
42633: LD_VAR 0 3
42637: PUSH
42638: LD_VAR 0 4
42642: ARRAY
42643: PPUSH
42644: CALL_OW 250
42648: PUSH
42649: LD_VAR 0 3
42653: PUSH
42654: LD_VAR 0 4
42658: ARRAY
42659: PPUSH
42660: CALL_OW 251
42664: PUSH
42665: LD_VAR 0 3
42669: PUSH
42670: LD_VAR 0 4
42674: ARRAY
42675: PPUSH
42676: CALL_OW 254
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: PUSH
42687: EMPTY
42688: LIST
42689: ADD
42690: ST_TO_ADDR
42691: GO 42604
42693: POP
42694: POP
// result := list ;
42695: LD_ADDR_VAR 0 2
42699: PUSH
42700: LD_VAR 0 5
42704: ST_TO_ADDR
// end ;
42705: LD_VAR 0 2
42709: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42710: LD_INT 0
42712: PPUSH
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
// if not factory then
42719: LD_VAR 0 1
42723: NOT
42724: IFFALSE 42728
// exit ;
42726: GO 43321
// if control = control_apeman then
42728: LD_VAR 0 4
42732: PUSH
42733: LD_INT 5
42735: EQUAL
42736: IFFALSE 42845
// begin tmp := UnitsInside ( factory ) ;
42738: LD_ADDR_VAR 0 8
42742: PUSH
42743: LD_VAR 0 1
42747: PPUSH
42748: CALL_OW 313
42752: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42753: LD_VAR 0 8
42757: PPUSH
42758: LD_INT 25
42760: PUSH
42761: LD_INT 12
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PPUSH
42768: CALL_OW 72
42772: NOT
42773: IFFALSE 42783
// control := control_manual ;
42775: LD_ADDR_VAR 0 4
42779: PUSH
42780: LD_INT 1
42782: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42783: LD_ADDR_VAR 0 8
42787: PUSH
42788: LD_VAR 0 1
42792: PPUSH
42793: CALL 42480 0 1
42797: ST_TO_ADDR
// if tmp then
42798: LD_VAR 0 8
42802: IFFALSE 42845
// begin for i in tmp do
42804: LD_ADDR_VAR 0 7
42808: PUSH
42809: LD_VAR 0 8
42813: PUSH
42814: FOR_IN
42815: IFFALSE 42843
// if i [ 1 ] = b_ext_radio then
42817: LD_VAR 0 7
42821: PUSH
42822: LD_INT 1
42824: ARRAY
42825: PUSH
42826: LD_INT 22
42828: EQUAL
42829: IFFALSE 42841
// begin control := control_remote ;
42831: LD_ADDR_VAR 0 4
42835: PUSH
42836: LD_INT 2
42838: ST_TO_ADDR
// break ;
42839: GO 42843
// end ;
42841: GO 42814
42843: POP
42844: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42845: LD_VAR 0 1
42849: PPUSH
42850: LD_VAR 0 2
42854: PPUSH
42855: LD_VAR 0 3
42859: PPUSH
42860: LD_VAR 0 4
42864: PPUSH
42865: LD_VAR 0 5
42869: PPUSH
42870: CALL_OW 448
42874: IFFALSE 42909
// begin result := [ chassis , engine , control , weapon ] ;
42876: LD_ADDR_VAR 0 6
42880: PUSH
42881: LD_VAR 0 2
42885: PUSH
42886: LD_VAR 0 3
42890: PUSH
42891: LD_VAR 0 4
42895: PUSH
42896: LD_VAR 0 5
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: ST_TO_ADDR
// exit ;
42907: GO 43321
// end ; _chassis := AvailableChassisList ( factory ) ;
42909: LD_ADDR_VAR 0 9
42913: PUSH
42914: LD_VAR 0 1
42918: PPUSH
42919: CALL_OW 475
42923: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42924: LD_ADDR_VAR 0 11
42928: PUSH
42929: LD_VAR 0 1
42933: PPUSH
42934: CALL_OW 476
42938: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42939: LD_ADDR_VAR 0 12
42943: PUSH
42944: LD_VAR 0 1
42948: PPUSH
42949: CALL_OW 477
42953: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42954: LD_ADDR_VAR 0 10
42958: PUSH
42959: LD_VAR 0 1
42963: PPUSH
42964: CALL_OW 478
42968: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42969: LD_VAR 0 9
42973: NOT
42974: PUSH
42975: LD_VAR 0 11
42979: NOT
42980: OR
42981: PUSH
42982: LD_VAR 0 12
42986: NOT
42987: OR
42988: PUSH
42989: LD_VAR 0 10
42993: NOT
42994: OR
42995: IFFALSE 43030
// begin result := [ chassis , engine , control , weapon ] ;
42997: LD_ADDR_VAR 0 6
43001: PUSH
43002: LD_VAR 0 2
43006: PUSH
43007: LD_VAR 0 3
43011: PUSH
43012: LD_VAR 0 4
43016: PUSH
43017: LD_VAR 0 5
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: ST_TO_ADDR
// exit ;
43028: GO 43321
// end ; if not chassis in _chassis then
43030: LD_VAR 0 2
43034: PUSH
43035: LD_VAR 0 9
43039: IN
43040: NOT
43041: IFFALSE 43067
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43043: LD_ADDR_VAR 0 2
43047: PUSH
43048: LD_VAR 0 9
43052: PUSH
43053: LD_INT 1
43055: PPUSH
43056: LD_VAR 0 9
43060: PPUSH
43061: CALL_OW 12
43065: ARRAY
43066: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43067: LD_VAR 0 2
43071: PPUSH
43072: LD_VAR 0 3
43076: PPUSH
43077: CALL 43326 0 2
43081: NOT
43082: IFFALSE 43141
// repeat engine := _engine [ 1 ] ;
43084: LD_ADDR_VAR 0 3
43088: PUSH
43089: LD_VAR 0 11
43093: PUSH
43094: LD_INT 1
43096: ARRAY
43097: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43098: LD_ADDR_VAR 0 11
43102: PUSH
43103: LD_VAR 0 11
43107: PPUSH
43108: LD_INT 1
43110: PPUSH
43111: CALL_OW 3
43115: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43116: LD_VAR 0 2
43120: PPUSH
43121: LD_VAR 0 3
43125: PPUSH
43126: CALL 43326 0 2
43130: PUSH
43131: LD_VAR 0 11
43135: PUSH
43136: EMPTY
43137: EQUAL
43138: OR
43139: IFFALSE 43084
// if not control in _control then
43141: LD_VAR 0 4
43145: PUSH
43146: LD_VAR 0 12
43150: IN
43151: NOT
43152: IFFALSE 43178
// control := _control [ rand ( 1 , _control ) ] ;
43154: LD_ADDR_VAR 0 4
43158: PUSH
43159: LD_VAR 0 12
43163: PUSH
43164: LD_INT 1
43166: PPUSH
43167: LD_VAR 0 12
43171: PPUSH
43172: CALL_OW 12
43176: ARRAY
43177: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43178: LD_VAR 0 2
43182: PPUSH
43183: LD_VAR 0 5
43187: PPUSH
43188: CALL 43546 0 2
43192: NOT
43193: IFFALSE 43252
// repeat weapon := _weapon [ 1 ] ;
43195: LD_ADDR_VAR 0 5
43199: PUSH
43200: LD_VAR 0 10
43204: PUSH
43205: LD_INT 1
43207: ARRAY
43208: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43209: LD_ADDR_VAR 0 10
43213: PUSH
43214: LD_VAR 0 10
43218: PPUSH
43219: LD_INT 1
43221: PPUSH
43222: CALL_OW 3
43226: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43227: LD_VAR 0 2
43231: PPUSH
43232: LD_VAR 0 5
43236: PPUSH
43237: CALL 43546 0 2
43241: PUSH
43242: LD_VAR 0 10
43246: PUSH
43247: EMPTY
43248: EQUAL
43249: OR
43250: IFFALSE 43195
// result := [ ] ;
43252: LD_ADDR_VAR 0 6
43256: PUSH
43257: EMPTY
43258: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43259: LD_VAR 0 1
43263: PPUSH
43264: LD_VAR 0 2
43268: PPUSH
43269: LD_VAR 0 3
43273: PPUSH
43274: LD_VAR 0 4
43278: PPUSH
43279: LD_VAR 0 5
43283: PPUSH
43284: CALL_OW 448
43288: IFFALSE 43321
// result := [ chassis , engine , control , weapon ] ;
43290: LD_ADDR_VAR 0 6
43294: PUSH
43295: LD_VAR 0 2
43299: PUSH
43300: LD_VAR 0 3
43304: PUSH
43305: LD_VAR 0 4
43309: PUSH
43310: LD_VAR 0 5
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: ST_TO_ADDR
// end ;
43321: LD_VAR 0 6
43325: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43326: LD_INT 0
43328: PPUSH
// if not chassis or not engine then
43329: LD_VAR 0 1
43333: NOT
43334: PUSH
43335: LD_VAR 0 2
43339: NOT
43340: OR
43341: IFFALSE 43345
// exit ;
43343: GO 43541
// case engine of engine_solar :
43345: LD_VAR 0 2
43349: PUSH
43350: LD_INT 2
43352: DOUBLE
43353: EQUAL
43354: IFTRUE 43358
43356: GO 43396
43358: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43359: LD_ADDR_VAR 0 3
43363: PUSH
43364: LD_INT 11
43366: PUSH
43367: LD_INT 12
43369: PUSH
43370: LD_INT 13
43372: PUSH
43373: LD_INT 14
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: LD_INT 3
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: ST_TO_ADDR
43394: GO 43525
43396: LD_INT 1
43398: DOUBLE
43399: EQUAL
43400: IFTRUE 43404
43402: GO 43466
43404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43405: LD_ADDR_VAR 0 3
43409: PUSH
43410: LD_INT 11
43412: PUSH
43413: LD_INT 12
43415: PUSH
43416: LD_INT 13
43418: PUSH
43419: LD_INT 14
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: LD_INT 3
43430: PUSH
43431: LD_INT 4
43433: PUSH
43434: LD_INT 5
43436: PUSH
43437: LD_INT 21
43439: PUSH
43440: LD_INT 23
43442: PUSH
43443: LD_INT 22
43445: PUSH
43446: LD_INT 24
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: ST_TO_ADDR
43464: GO 43525
43466: LD_INT 3
43468: DOUBLE
43469: EQUAL
43470: IFTRUE 43474
43472: GO 43524
43474: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43475: LD_ADDR_VAR 0 3
43479: PUSH
43480: LD_INT 13
43482: PUSH
43483: LD_INT 14
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: LD_INT 3
43491: PUSH
43492: LD_INT 4
43494: PUSH
43495: LD_INT 5
43497: PUSH
43498: LD_INT 21
43500: PUSH
43501: LD_INT 22
43503: PUSH
43504: LD_INT 23
43506: PUSH
43507: LD_INT 24
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: ST_TO_ADDR
43522: GO 43525
43524: POP
// result := ( chassis in result ) ;
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_VAR 0 1
43534: PUSH
43535: LD_VAR 0 3
43539: IN
43540: ST_TO_ADDR
// end ;
43541: LD_VAR 0 3
43545: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43546: LD_INT 0
43548: PPUSH
// if not chassis or not weapon then
43549: LD_VAR 0 1
43553: NOT
43554: PUSH
43555: LD_VAR 0 2
43559: NOT
43560: OR
43561: IFFALSE 43565
// exit ;
43563: GO 44625
// case weapon of us_machine_gun :
43565: LD_VAR 0 2
43569: PUSH
43570: LD_INT 2
43572: DOUBLE
43573: EQUAL
43574: IFTRUE 43578
43576: GO 43608
43578: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43579: LD_ADDR_VAR 0 3
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 3
43592: PUSH
43593: LD_INT 4
43595: PUSH
43596: LD_INT 5
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: ST_TO_ADDR
43606: GO 44609
43608: LD_INT 3
43610: DOUBLE
43611: EQUAL
43612: IFTRUE 43616
43614: GO 43646
43616: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43617: LD_ADDR_VAR 0 3
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: LD_INT 3
43630: PUSH
43631: LD_INT 4
43633: PUSH
43634: LD_INT 5
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: ST_TO_ADDR
43644: GO 44609
43646: LD_INT 11
43648: DOUBLE
43649: EQUAL
43650: IFTRUE 43654
43652: GO 43684
43654: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43655: LD_ADDR_VAR 0 3
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: LD_INT 3
43668: PUSH
43669: LD_INT 4
43671: PUSH
43672: LD_INT 5
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: ST_TO_ADDR
43682: GO 44609
43684: LD_INT 4
43686: DOUBLE
43687: EQUAL
43688: IFTRUE 43692
43690: GO 43718
43692: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43693: LD_ADDR_VAR 0 3
43697: PUSH
43698: LD_INT 2
43700: PUSH
43701: LD_INT 3
43703: PUSH
43704: LD_INT 4
43706: PUSH
43707: LD_INT 5
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: ST_TO_ADDR
43716: GO 44609
43718: LD_INT 5
43720: DOUBLE
43721: EQUAL
43722: IFTRUE 43726
43724: GO 43752
43726: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43727: LD_ADDR_VAR 0 3
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: LD_INT 3
43737: PUSH
43738: LD_INT 4
43740: PUSH
43741: LD_INT 5
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: ST_TO_ADDR
43750: GO 44609
43752: LD_INT 9
43754: DOUBLE
43755: EQUAL
43756: IFTRUE 43760
43758: GO 43786
43760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43761: LD_ADDR_VAR 0 3
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: LD_INT 3
43771: PUSH
43772: LD_INT 4
43774: PUSH
43775: LD_INT 5
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: ST_TO_ADDR
43784: GO 44609
43786: LD_INT 7
43788: DOUBLE
43789: EQUAL
43790: IFTRUE 43794
43792: GO 43820
43794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43795: LD_ADDR_VAR 0 3
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: LD_INT 3
43805: PUSH
43806: LD_INT 4
43808: PUSH
43809: LD_INT 5
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
43818: GO 44609
43820: LD_INT 12
43822: DOUBLE
43823: EQUAL
43824: IFTRUE 43828
43826: GO 43854
43828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43829: LD_ADDR_VAR 0 3
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: LD_INT 3
43839: PUSH
43840: LD_INT 4
43842: PUSH
43843: LD_INT 5
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: ST_TO_ADDR
43852: GO 44609
43854: LD_INT 13
43856: DOUBLE
43857: EQUAL
43858: IFTRUE 43862
43860: GO 43888
43862: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43863: LD_ADDR_VAR 0 3
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: LD_INT 4
43876: PUSH
43877: LD_INT 5
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: ST_TO_ADDR
43886: GO 44609
43888: LD_INT 14
43890: DOUBLE
43891: EQUAL
43892: IFTRUE 43896
43894: GO 43914
43896: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43897: LD_ADDR_VAR 0 3
43901: PUSH
43902: LD_INT 4
43904: PUSH
43905: LD_INT 5
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: ST_TO_ADDR
43912: GO 44609
43914: LD_INT 6
43916: DOUBLE
43917: EQUAL
43918: IFTRUE 43922
43920: GO 43940
43922: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43923: LD_ADDR_VAR 0 3
43927: PUSH
43928: LD_INT 4
43930: PUSH
43931: LD_INT 5
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: ST_TO_ADDR
43938: GO 44609
43940: LD_INT 10
43942: DOUBLE
43943: EQUAL
43944: IFTRUE 43948
43946: GO 43966
43948: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43949: LD_ADDR_VAR 0 3
43953: PUSH
43954: LD_INT 4
43956: PUSH
43957: LD_INT 5
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: ST_TO_ADDR
43964: GO 44609
43966: LD_INT 22
43968: DOUBLE
43969: EQUAL
43970: IFTRUE 43974
43972: GO 44000
43974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43975: LD_ADDR_VAR 0 3
43979: PUSH
43980: LD_INT 11
43982: PUSH
43983: LD_INT 12
43985: PUSH
43986: LD_INT 13
43988: PUSH
43989: LD_INT 14
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: ST_TO_ADDR
43998: GO 44609
44000: LD_INT 23
44002: DOUBLE
44003: EQUAL
44004: IFTRUE 44008
44006: GO 44034
44008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44009: LD_ADDR_VAR 0 3
44013: PUSH
44014: LD_INT 11
44016: PUSH
44017: LD_INT 12
44019: PUSH
44020: LD_INT 13
44022: PUSH
44023: LD_INT 14
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: ST_TO_ADDR
44032: GO 44609
44034: LD_INT 24
44036: DOUBLE
44037: EQUAL
44038: IFTRUE 44042
44040: GO 44068
44042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44043: LD_ADDR_VAR 0 3
44047: PUSH
44048: LD_INT 11
44050: PUSH
44051: LD_INT 12
44053: PUSH
44054: LD_INT 13
44056: PUSH
44057: LD_INT 14
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: ST_TO_ADDR
44066: GO 44609
44068: LD_INT 30
44070: DOUBLE
44071: EQUAL
44072: IFTRUE 44076
44074: GO 44102
44076: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44077: LD_ADDR_VAR 0 3
44081: PUSH
44082: LD_INT 11
44084: PUSH
44085: LD_INT 12
44087: PUSH
44088: LD_INT 13
44090: PUSH
44091: LD_INT 14
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: ST_TO_ADDR
44100: GO 44609
44102: LD_INT 25
44104: DOUBLE
44105: EQUAL
44106: IFTRUE 44110
44108: GO 44128
44110: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44111: LD_ADDR_VAR 0 3
44115: PUSH
44116: LD_INT 13
44118: PUSH
44119: LD_INT 14
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: ST_TO_ADDR
44126: GO 44609
44128: LD_INT 27
44130: DOUBLE
44131: EQUAL
44132: IFTRUE 44136
44134: GO 44154
44136: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44137: LD_ADDR_VAR 0 3
44141: PUSH
44142: LD_INT 13
44144: PUSH
44145: LD_INT 14
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: ST_TO_ADDR
44152: GO 44609
44154: LD_INT 92
44156: DOUBLE
44157: EQUAL
44158: IFTRUE 44162
44160: GO 44188
44162: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44163: LD_ADDR_VAR 0 3
44167: PUSH
44168: LD_INT 11
44170: PUSH
44171: LD_INT 12
44173: PUSH
44174: LD_INT 13
44176: PUSH
44177: LD_INT 14
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: ST_TO_ADDR
44186: GO 44609
44188: LD_INT 28
44190: DOUBLE
44191: EQUAL
44192: IFTRUE 44196
44194: GO 44214
44196: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44197: LD_ADDR_VAR 0 3
44201: PUSH
44202: LD_INT 13
44204: PUSH
44205: LD_INT 14
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: ST_TO_ADDR
44212: GO 44609
44214: LD_INT 29
44216: DOUBLE
44217: EQUAL
44218: IFTRUE 44222
44220: GO 44240
44222: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44223: LD_ADDR_VAR 0 3
44227: PUSH
44228: LD_INT 13
44230: PUSH
44231: LD_INT 14
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: ST_TO_ADDR
44238: GO 44609
44240: LD_INT 31
44242: DOUBLE
44243: EQUAL
44244: IFTRUE 44248
44246: GO 44266
44248: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44249: LD_ADDR_VAR 0 3
44253: PUSH
44254: LD_INT 13
44256: PUSH
44257: LD_INT 14
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: ST_TO_ADDR
44264: GO 44609
44266: LD_INT 26
44268: DOUBLE
44269: EQUAL
44270: IFTRUE 44274
44272: GO 44292
44274: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44275: LD_ADDR_VAR 0 3
44279: PUSH
44280: LD_INT 13
44282: PUSH
44283: LD_INT 14
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: ST_TO_ADDR
44290: GO 44609
44292: LD_INT 42
44294: DOUBLE
44295: EQUAL
44296: IFTRUE 44300
44298: GO 44326
44300: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44301: LD_ADDR_VAR 0 3
44305: PUSH
44306: LD_INT 21
44308: PUSH
44309: LD_INT 22
44311: PUSH
44312: LD_INT 23
44314: PUSH
44315: LD_INT 24
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: ST_TO_ADDR
44324: GO 44609
44326: LD_INT 43
44328: DOUBLE
44329: EQUAL
44330: IFTRUE 44334
44332: GO 44360
44334: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44335: LD_ADDR_VAR 0 3
44339: PUSH
44340: LD_INT 21
44342: PUSH
44343: LD_INT 22
44345: PUSH
44346: LD_INT 23
44348: PUSH
44349: LD_INT 24
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: ST_TO_ADDR
44358: GO 44609
44360: LD_INT 44
44362: DOUBLE
44363: EQUAL
44364: IFTRUE 44368
44366: GO 44394
44368: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44369: LD_ADDR_VAR 0 3
44373: PUSH
44374: LD_INT 21
44376: PUSH
44377: LD_INT 22
44379: PUSH
44380: LD_INT 23
44382: PUSH
44383: LD_INT 24
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: ST_TO_ADDR
44392: GO 44609
44394: LD_INT 45
44396: DOUBLE
44397: EQUAL
44398: IFTRUE 44402
44400: GO 44428
44402: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44403: LD_ADDR_VAR 0 3
44407: PUSH
44408: LD_INT 21
44410: PUSH
44411: LD_INT 22
44413: PUSH
44414: LD_INT 23
44416: PUSH
44417: LD_INT 24
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: ST_TO_ADDR
44426: GO 44609
44428: LD_INT 49
44430: DOUBLE
44431: EQUAL
44432: IFTRUE 44436
44434: GO 44462
44436: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44437: LD_ADDR_VAR 0 3
44441: PUSH
44442: LD_INT 21
44444: PUSH
44445: LD_INT 22
44447: PUSH
44448: LD_INT 23
44450: PUSH
44451: LD_INT 24
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: ST_TO_ADDR
44460: GO 44609
44462: LD_INT 51
44464: DOUBLE
44465: EQUAL
44466: IFTRUE 44470
44468: GO 44496
44470: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44471: LD_ADDR_VAR 0 3
44475: PUSH
44476: LD_INT 21
44478: PUSH
44479: LD_INT 22
44481: PUSH
44482: LD_INT 23
44484: PUSH
44485: LD_INT 24
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: ST_TO_ADDR
44494: GO 44609
44496: LD_INT 52
44498: DOUBLE
44499: EQUAL
44500: IFTRUE 44504
44502: GO 44530
44504: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44505: LD_ADDR_VAR 0 3
44509: PUSH
44510: LD_INT 21
44512: PUSH
44513: LD_INT 22
44515: PUSH
44516: LD_INT 23
44518: PUSH
44519: LD_INT 24
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: ST_TO_ADDR
44528: GO 44609
44530: LD_INT 53
44532: DOUBLE
44533: EQUAL
44534: IFTRUE 44538
44536: GO 44556
44538: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44539: LD_ADDR_VAR 0 3
44543: PUSH
44544: LD_INT 23
44546: PUSH
44547: LD_INT 24
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: ST_TO_ADDR
44554: GO 44609
44556: LD_INT 46
44558: DOUBLE
44559: EQUAL
44560: IFTRUE 44564
44562: GO 44582
44564: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44565: LD_ADDR_VAR 0 3
44569: PUSH
44570: LD_INT 23
44572: PUSH
44573: LD_INT 24
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: ST_TO_ADDR
44580: GO 44609
44582: LD_INT 47
44584: DOUBLE
44585: EQUAL
44586: IFTRUE 44590
44588: GO 44608
44590: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44591: LD_ADDR_VAR 0 3
44595: PUSH
44596: LD_INT 23
44598: PUSH
44599: LD_INT 24
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: ST_TO_ADDR
44606: GO 44609
44608: POP
// result := ( chassis in result ) ;
44609: LD_ADDR_VAR 0 3
44613: PUSH
44614: LD_VAR 0 1
44618: PUSH
44619: LD_VAR 0 3
44623: IN
44624: ST_TO_ADDR
// end ;
44625: LD_VAR 0 3
44629: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44630: LD_INT 0
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
// result := array ;
44639: LD_ADDR_VAR 0 5
44643: PUSH
44644: LD_VAR 0 1
44648: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44649: LD_VAR 0 1
44653: NOT
44654: PUSH
44655: LD_VAR 0 2
44659: NOT
44660: OR
44661: PUSH
44662: LD_VAR 0 3
44666: NOT
44667: OR
44668: PUSH
44669: LD_VAR 0 2
44673: PUSH
44674: LD_VAR 0 1
44678: GREATER
44679: OR
44680: PUSH
44681: LD_VAR 0 3
44685: PUSH
44686: LD_VAR 0 1
44690: GREATER
44691: OR
44692: IFFALSE 44696
// exit ;
44694: GO 44992
// if direction then
44696: LD_VAR 0 4
44700: IFFALSE 44764
// begin d := 1 ;
44702: LD_ADDR_VAR 0 9
44706: PUSH
44707: LD_INT 1
44709: ST_TO_ADDR
// if i_from > i_to then
44710: LD_VAR 0 2
44714: PUSH
44715: LD_VAR 0 3
44719: GREATER
44720: IFFALSE 44746
// length := ( array - i_from ) + i_to else
44722: LD_ADDR_VAR 0 11
44726: PUSH
44727: LD_VAR 0 1
44731: PUSH
44732: LD_VAR 0 2
44736: MINUS
44737: PUSH
44738: LD_VAR 0 3
44742: PLUS
44743: ST_TO_ADDR
44744: GO 44762
// length := i_to - i_from ;
44746: LD_ADDR_VAR 0 11
44750: PUSH
44751: LD_VAR 0 3
44755: PUSH
44756: LD_VAR 0 2
44760: MINUS
44761: ST_TO_ADDR
// end else
44762: GO 44825
// begin d := - 1 ;
44764: LD_ADDR_VAR 0 9
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: ST_TO_ADDR
// if i_from > i_to then
44773: LD_VAR 0 2
44777: PUSH
44778: LD_VAR 0 3
44782: GREATER
44783: IFFALSE 44803
// length := i_from - i_to else
44785: LD_ADDR_VAR 0 11
44789: PUSH
44790: LD_VAR 0 2
44794: PUSH
44795: LD_VAR 0 3
44799: MINUS
44800: ST_TO_ADDR
44801: GO 44825
// length := ( array - i_to ) + i_from ;
44803: LD_ADDR_VAR 0 11
44807: PUSH
44808: LD_VAR 0 1
44812: PUSH
44813: LD_VAR 0 3
44817: MINUS
44818: PUSH
44819: LD_VAR 0 2
44823: PLUS
44824: ST_TO_ADDR
// end ; if not length then
44825: LD_VAR 0 11
44829: NOT
44830: IFFALSE 44834
// exit ;
44832: GO 44992
// tmp := array ;
44834: LD_ADDR_VAR 0 10
44838: PUSH
44839: LD_VAR 0 1
44843: ST_TO_ADDR
// for i = 1 to length do
44844: LD_ADDR_VAR 0 6
44848: PUSH
44849: DOUBLE
44850: LD_INT 1
44852: DEC
44853: ST_TO_ADDR
44854: LD_VAR 0 11
44858: PUSH
44859: FOR_TO
44860: IFFALSE 44980
// begin for j = 1 to array do
44862: LD_ADDR_VAR 0 7
44866: PUSH
44867: DOUBLE
44868: LD_INT 1
44870: DEC
44871: ST_TO_ADDR
44872: LD_VAR 0 1
44876: PUSH
44877: FOR_TO
44878: IFFALSE 44966
// begin k := j + d ;
44880: LD_ADDR_VAR 0 8
44884: PUSH
44885: LD_VAR 0 7
44889: PUSH
44890: LD_VAR 0 9
44894: PLUS
44895: ST_TO_ADDR
// if k > array then
44896: LD_VAR 0 8
44900: PUSH
44901: LD_VAR 0 1
44905: GREATER
44906: IFFALSE 44916
// k := 1 ;
44908: LD_ADDR_VAR 0 8
44912: PUSH
44913: LD_INT 1
44915: ST_TO_ADDR
// if not k then
44916: LD_VAR 0 8
44920: NOT
44921: IFFALSE 44933
// k := array ;
44923: LD_ADDR_VAR 0 8
44927: PUSH
44928: LD_VAR 0 1
44932: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44933: LD_ADDR_VAR 0 10
44937: PUSH
44938: LD_VAR 0 10
44942: PPUSH
44943: LD_VAR 0 8
44947: PPUSH
44948: LD_VAR 0 1
44952: PUSH
44953: LD_VAR 0 7
44957: ARRAY
44958: PPUSH
44959: CALL_OW 1
44963: ST_TO_ADDR
// end ;
44964: GO 44877
44966: POP
44967: POP
// array := tmp ;
44968: LD_ADDR_VAR 0 1
44972: PUSH
44973: LD_VAR 0 10
44977: ST_TO_ADDR
// end ;
44978: GO 44859
44980: POP
44981: POP
// result := array ;
44982: LD_ADDR_VAR 0 5
44986: PUSH
44987: LD_VAR 0 1
44991: ST_TO_ADDR
// end ;
44992: LD_VAR 0 5
44996: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44997: LD_INT 0
44999: PPUSH
45000: PPUSH
// result := 0 ;
45001: LD_ADDR_VAR 0 3
45005: PUSH
45006: LD_INT 0
45008: ST_TO_ADDR
// if not array or not value in array then
45009: LD_VAR 0 1
45013: NOT
45014: PUSH
45015: LD_VAR 0 2
45019: PUSH
45020: LD_VAR 0 1
45024: IN
45025: NOT
45026: OR
45027: IFFALSE 45031
// exit ;
45029: GO 45085
// for i = 1 to array do
45031: LD_ADDR_VAR 0 4
45035: PUSH
45036: DOUBLE
45037: LD_INT 1
45039: DEC
45040: ST_TO_ADDR
45041: LD_VAR 0 1
45045: PUSH
45046: FOR_TO
45047: IFFALSE 45083
// if value = array [ i ] then
45049: LD_VAR 0 2
45053: PUSH
45054: LD_VAR 0 1
45058: PUSH
45059: LD_VAR 0 4
45063: ARRAY
45064: EQUAL
45065: IFFALSE 45081
// begin result := i ;
45067: LD_ADDR_VAR 0 3
45071: PUSH
45072: LD_VAR 0 4
45076: ST_TO_ADDR
// exit ;
45077: POP
45078: POP
45079: GO 45085
// end ;
45081: GO 45046
45083: POP
45084: POP
// end ;
45085: LD_VAR 0 3
45089: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45090: LD_INT 0
45092: PPUSH
// vc_chassis := chassis ;
45093: LD_ADDR_OWVAR 37
45097: PUSH
45098: LD_VAR 0 1
45102: ST_TO_ADDR
// vc_engine := engine ;
45103: LD_ADDR_OWVAR 39
45107: PUSH
45108: LD_VAR 0 2
45112: ST_TO_ADDR
// vc_control := control ;
45113: LD_ADDR_OWVAR 38
45117: PUSH
45118: LD_VAR 0 3
45122: ST_TO_ADDR
// vc_weapon := weapon ;
45123: LD_ADDR_OWVAR 40
45127: PUSH
45128: LD_VAR 0 4
45132: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45133: LD_ADDR_OWVAR 41
45137: PUSH
45138: LD_VAR 0 5
45142: ST_TO_ADDR
// end ;
45143: LD_VAR 0 6
45147: RET
// export function WantPlant ( unit ) ; var task ; begin
45148: LD_INT 0
45150: PPUSH
45151: PPUSH
// result := false ;
45152: LD_ADDR_VAR 0 2
45156: PUSH
45157: LD_INT 0
45159: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45160: LD_ADDR_VAR 0 3
45164: PUSH
45165: LD_VAR 0 1
45169: PPUSH
45170: CALL_OW 437
45174: ST_TO_ADDR
// if task then
45175: LD_VAR 0 3
45179: IFFALSE 45207
// if task [ 1 ] [ 1 ] = p then
45181: LD_VAR 0 3
45185: PUSH
45186: LD_INT 1
45188: ARRAY
45189: PUSH
45190: LD_INT 1
45192: ARRAY
45193: PUSH
45194: LD_STRING p
45196: EQUAL
45197: IFFALSE 45207
// result := true ;
45199: LD_ADDR_VAR 0 2
45203: PUSH
45204: LD_INT 1
45206: ST_TO_ADDR
// end ;
45207: LD_VAR 0 2
45211: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45212: LD_INT 0
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
// if pos < 1 then
45218: LD_VAR 0 2
45222: PUSH
45223: LD_INT 1
45225: LESS
45226: IFFALSE 45230
// exit ;
45228: GO 45533
// if pos = 1 then
45230: LD_VAR 0 2
45234: PUSH
45235: LD_INT 1
45237: EQUAL
45238: IFFALSE 45271
// result := Replace ( arr , pos [ 1 ] , value ) else
45240: LD_ADDR_VAR 0 4
45244: PUSH
45245: LD_VAR 0 1
45249: PPUSH
45250: LD_VAR 0 2
45254: PUSH
45255: LD_INT 1
45257: ARRAY
45258: PPUSH
45259: LD_VAR 0 3
45263: PPUSH
45264: CALL_OW 1
45268: ST_TO_ADDR
45269: GO 45533
// begin tmp := arr ;
45271: LD_ADDR_VAR 0 6
45275: PUSH
45276: LD_VAR 0 1
45280: ST_TO_ADDR
// s_arr := [ tmp ] ;
45281: LD_ADDR_VAR 0 7
45285: PUSH
45286: LD_VAR 0 6
45290: PUSH
45291: EMPTY
45292: LIST
45293: ST_TO_ADDR
// for i = 1 to pos - 1 do
45294: LD_ADDR_VAR 0 5
45298: PUSH
45299: DOUBLE
45300: LD_INT 1
45302: DEC
45303: ST_TO_ADDR
45304: LD_VAR 0 2
45308: PUSH
45309: LD_INT 1
45311: MINUS
45312: PUSH
45313: FOR_TO
45314: IFFALSE 45359
// begin tmp := tmp [ pos [ i ] ] ;
45316: LD_ADDR_VAR 0 6
45320: PUSH
45321: LD_VAR 0 6
45325: PUSH
45326: LD_VAR 0 2
45330: PUSH
45331: LD_VAR 0 5
45335: ARRAY
45336: ARRAY
45337: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45338: LD_ADDR_VAR 0 7
45342: PUSH
45343: LD_VAR 0 7
45347: PUSH
45348: LD_VAR 0 6
45352: PUSH
45353: EMPTY
45354: LIST
45355: ADD
45356: ST_TO_ADDR
// end ;
45357: GO 45313
45359: POP
45360: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45361: LD_ADDR_VAR 0 6
45365: PUSH
45366: LD_VAR 0 6
45370: PPUSH
45371: LD_VAR 0 2
45375: PUSH
45376: LD_VAR 0 2
45380: ARRAY
45381: PPUSH
45382: LD_VAR 0 3
45386: PPUSH
45387: CALL_OW 1
45391: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45392: LD_ADDR_VAR 0 7
45396: PUSH
45397: LD_VAR 0 7
45401: PPUSH
45402: LD_VAR 0 7
45406: PPUSH
45407: LD_VAR 0 6
45411: PPUSH
45412: CALL_OW 1
45416: ST_TO_ADDR
// for i = s_arr downto 2 do
45417: LD_ADDR_VAR 0 5
45421: PUSH
45422: DOUBLE
45423: LD_VAR 0 7
45427: INC
45428: ST_TO_ADDR
45429: LD_INT 2
45431: PUSH
45432: FOR_DOWNTO
45433: IFFALSE 45517
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45435: LD_ADDR_VAR 0 6
45439: PUSH
45440: LD_VAR 0 7
45444: PUSH
45445: LD_VAR 0 5
45449: PUSH
45450: LD_INT 1
45452: MINUS
45453: ARRAY
45454: PPUSH
45455: LD_VAR 0 2
45459: PUSH
45460: LD_VAR 0 5
45464: PUSH
45465: LD_INT 1
45467: MINUS
45468: ARRAY
45469: PPUSH
45470: LD_VAR 0 7
45474: PUSH
45475: LD_VAR 0 5
45479: ARRAY
45480: PPUSH
45481: CALL_OW 1
45485: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45486: LD_ADDR_VAR 0 7
45490: PUSH
45491: LD_VAR 0 7
45495: PPUSH
45496: LD_VAR 0 5
45500: PUSH
45501: LD_INT 1
45503: MINUS
45504: PPUSH
45505: LD_VAR 0 6
45509: PPUSH
45510: CALL_OW 1
45514: ST_TO_ADDR
// end ;
45515: GO 45432
45517: POP
45518: POP
// result := s_arr [ 1 ] ;
45519: LD_ADDR_VAR 0 4
45523: PUSH
45524: LD_VAR 0 7
45528: PUSH
45529: LD_INT 1
45531: ARRAY
45532: ST_TO_ADDR
// end ; end ;
45533: LD_VAR 0 4
45537: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45538: LD_INT 0
45540: PPUSH
45541: PPUSH
// if not list then
45542: LD_VAR 0 1
45546: NOT
45547: IFFALSE 45551
// exit ;
45549: GO 45642
// i := list [ pos1 ] ;
45551: LD_ADDR_VAR 0 5
45555: PUSH
45556: LD_VAR 0 1
45560: PUSH
45561: LD_VAR 0 2
45565: ARRAY
45566: ST_TO_ADDR
// if not i then
45567: LD_VAR 0 5
45571: NOT
45572: IFFALSE 45576
// exit ;
45574: GO 45642
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45576: LD_ADDR_VAR 0 1
45580: PUSH
45581: LD_VAR 0 1
45585: PPUSH
45586: LD_VAR 0 2
45590: PPUSH
45591: LD_VAR 0 1
45595: PUSH
45596: LD_VAR 0 3
45600: ARRAY
45601: PPUSH
45602: CALL_OW 1
45606: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45607: LD_ADDR_VAR 0 1
45611: PUSH
45612: LD_VAR 0 1
45616: PPUSH
45617: LD_VAR 0 3
45621: PPUSH
45622: LD_VAR 0 5
45626: PPUSH
45627: CALL_OW 1
45631: ST_TO_ADDR
// result := list ;
45632: LD_ADDR_VAR 0 4
45636: PUSH
45637: LD_VAR 0 1
45641: ST_TO_ADDR
// end ;
45642: LD_VAR 0 4
45646: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45647: LD_INT 0
45649: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45650: LD_ADDR_VAR 0 5
45654: PUSH
45655: LD_VAR 0 1
45659: PPUSH
45660: CALL_OW 250
45664: PPUSH
45665: LD_VAR 0 1
45669: PPUSH
45670: CALL_OW 251
45674: PPUSH
45675: LD_VAR 0 2
45679: PPUSH
45680: LD_VAR 0 3
45684: PPUSH
45685: LD_VAR 0 4
45689: PPUSH
45690: CALL 45700 0 5
45694: ST_TO_ADDR
// end ;
45695: LD_VAR 0 5
45699: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45700: LD_INT 0
45702: PPUSH
45703: PPUSH
45704: PPUSH
45705: PPUSH
// if not list then
45706: LD_VAR 0 3
45710: NOT
45711: IFFALSE 45715
// exit ;
45713: GO 46103
// result := [ ] ;
45715: LD_ADDR_VAR 0 6
45719: PUSH
45720: EMPTY
45721: ST_TO_ADDR
// for i in list do
45722: LD_ADDR_VAR 0 7
45726: PUSH
45727: LD_VAR 0 3
45731: PUSH
45732: FOR_IN
45733: IFFALSE 45935
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45735: LD_ADDR_VAR 0 9
45739: PUSH
45740: LD_VAR 0 7
45744: PPUSH
45745: LD_VAR 0 1
45749: PPUSH
45750: LD_VAR 0 2
45754: PPUSH
45755: CALL_OW 297
45759: ST_TO_ADDR
// if not result then
45760: LD_VAR 0 6
45764: NOT
45765: IFFALSE 45791
// result := [ [ i , tmp ] ] else
45767: LD_ADDR_VAR 0 6
45771: PUSH
45772: LD_VAR 0 7
45776: PUSH
45777: LD_VAR 0 9
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: EMPTY
45787: LIST
45788: ST_TO_ADDR
45789: GO 45933
// begin if result [ result ] [ 2 ] < tmp then
45791: LD_VAR 0 6
45795: PUSH
45796: LD_VAR 0 6
45800: ARRAY
45801: PUSH
45802: LD_INT 2
45804: ARRAY
45805: PUSH
45806: LD_VAR 0 9
45810: LESS
45811: IFFALSE 45853
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45813: LD_ADDR_VAR 0 6
45817: PUSH
45818: LD_VAR 0 6
45822: PPUSH
45823: LD_VAR 0 6
45827: PUSH
45828: LD_INT 1
45830: PLUS
45831: PPUSH
45832: LD_VAR 0 7
45836: PUSH
45837: LD_VAR 0 9
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PPUSH
45846: CALL_OW 2
45850: ST_TO_ADDR
45851: GO 45933
// for j = 1 to result do
45853: LD_ADDR_VAR 0 8
45857: PUSH
45858: DOUBLE
45859: LD_INT 1
45861: DEC
45862: ST_TO_ADDR
45863: LD_VAR 0 6
45867: PUSH
45868: FOR_TO
45869: IFFALSE 45931
// begin if tmp < result [ j ] [ 2 ] then
45871: LD_VAR 0 9
45875: PUSH
45876: LD_VAR 0 6
45880: PUSH
45881: LD_VAR 0 8
45885: ARRAY
45886: PUSH
45887: LD_INT 2
45889: ARRAY
45890: LESS
45891: IFFALSE 45929
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45893: LD_ADDR_VAR 0 6
45897: PUSH
45898: LD_VAR 0 6
45902: PPUSH
45903: LD_VAR 0 8
45907: PPUSH
45908: LD_VAR 0 7
45912: PUSH
45913: LD_VAR 0 9
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PPUSH
45922: CALL_OW 2
45926: ST_TO_ADDR
// break ;
45927: GO 45931
// end ; end ;
45929: GO 45868
45931: POP
45932: POP
// end ; end ;
45933: GO 45732
45935: POP
45936: POP
// if result and not asc then
45937: LD_VAR 0 6
45941: PUSH
45942: LD_VAR 0 4
45946: NOT
45947: AND
45948: IFFALSE 46023
// begin tmp := result ;
45950: LD_ADDR_VAR 0 9
45954: PUSH
45955: LD_VAR 0 6
45959: ST_TO_ADDR
// for i = tmp downto 1 do
45960: LD_ADDR_VAR 0 7
45964: PUSH
45965: DOUBLE
45966: LD_VAR 0 9
45970: INC
45971: ST_TO_ADDR
45972: LD_INT 1
45974: PUSH
45975: FOR_DOWNTO
45976: IFFALSE 46021
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45978: LD_ADDR_VAR 0 6
45982: PUSH
45983: LD_VAR 0 6
45987: PPUSH
45988: LD_VAR 0 9
45992: PUSH
45993: LD_VAR 0 7
45997: MINUS
45998: PUSH
45999: LD_INT 1
46001: PLUS
46002: PPUSH
46003: LD_VAR 0 9
46007: PUSH
46008: LD_VAR 0 7
46012: ARRAY
46013: PPUSH
46014: CALL_OW 1
46018: ST_TO_ADDR
46019: GO 45975
46021: POP
46022: POP
// end ; tmp := [ ] ;
46023: LD_ADDR_VAR 0 9
46027: PUSH
46028: EMPTY
46029: ST_TO_ADDR
// if mode then
46030: LD_VAR 0 5
46034: IFFALSE 46103
// begin for i = 1 to result do
46036: LD_ADDR_VAR 0 7
46040: PUSH
46041: DOUBLE
46042: LD_INT 1
46044: DEC
46045: ST_TO_ADDR
46046: LD_VAR 0 6
46050: PUSH
46051: FOR_TO
46052: IFFALSE 46091
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46054: LD_ADDR_VAR 0 9
46058: PUSH
46059: LD_VAR 0 9
46063: PPUSH
46064: LD_VAR 0 7
46068: PPUSH
46069: LD_VAR 0 6
46073: PUSH
46074: LD_VAR 0 7
46078: ARRAY
46079: PUSH
46080: LD_INT 1
46082: ARRAY
46083: PPUSH
46084: CALL_OW 1
46088: ST_TO_ADDR
46089: GO 46051
46091: POP
46092: POP
// result := tmp ;
46093: LD_ADDR_VAR 0 6
46097: PUSH
46098: LD_VAR 0 9
46102: ST_TO_ADDR
// end ; end ;
46103: LD_VAR 0 6
46107: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46108: LD_INT 0
46110: PPUSH
46111: PPUSH
46112: PPUSH
46113: PPUSH
46114: PPUSH
46115: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46116: LD_ADDR_VAR 0 5
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: EMPTY
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// if not x or not y then
46138: LD_VAR 0 2
46142: NOT
46143: PUSH
46144: LD_VAR 0 3
46148: NOT
46149: OR
46150: IFFALSE 46154
// exit ;
46152: GO 47804
// if not range then
46154: LD_VAR 0 4
46158: NOT
46159: IFFALSE 46169
// range := 10 ;
46161: LD_ADDR_VAR 0 4
46165: PUSH
46166: LD_INT 10
46168: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46169: LD_ADDR_VAR 0 8
46173: PUSH
46174: LD_INT 81
46176: PUSH
46177: LD_VAR 0 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 92
46188: PUSH
46189: LD_VAR 0 2
46193: PUSH
46194: LD_VAR 0 3
46198: PUSH
46199: LD_VAR 0 4
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 3
46212: PUSH
46213: LD_INT 21
46215: PUSH
46216: LD_INT 3
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: LIST
46231: PPUSH
46232: CALL_OW 69
46236: ST_TO_ADDR
// if not tmp then
46237: LD_VAR 0 8
46241: NOT
46242: IFFALSE 46246
// exit ;
46244: GO 47804
// for i in tmp do
46246: LD_ADDR_VAR 0 6
46250: PUSH
46251: LD_VAR 0 8
46255: PUSH
46256: FOR_IN
46257: IFFALSE 47779
// begin points := [ 0 , 0 , 0 ] ;
46259: LD_ADDR_VAR 0 9
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: LIST
46277: ST_TO_ADDR
// bpoints := 1 ;
46278: LD_ADDR_VAR 0 10
46282: PUSH
46283: LD_INT 1
46285: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46286: LD_VAR 0 6
46290: PPUSH
46291: CALL_OW 247
46295: PUSH
46296: LD_INT 1
46298: DOUBLE
46299: EQUAL
46300: IFTRUE 46304
46302: GO 46882
46304: POP
// begin if GetClass ( i ) = 1 then
46305: LD_VAR 0 6
46309: PPUSH
46310: CALL_OW 257
46314: PUSH
46315: LD_INT 1
46317: EQUAL
46318: IFFALSE 46339
// points := [ 10 , 5 , 3 ] ;
46320: LD_ADDR_VAR 0 9
46324: PUSH
46325: LD_INT 10
46327: PUSH
46328: LD_INT 5
46330: PUSH
46331: LD_INT 3
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: LIST
46338: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46339: LD_VAR 0 6
46343: PPUSH
46344: CALL_OW 257
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: LD_INT 3
46354: PUSH
46355: LD_INT 4
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: LIST
46362: IN
46363: IFFALSE 46384
// points := [ 3 , 2 , 1 ] ;
46365: LD_ADDR_VAR 0 9
46369: PUSH
46370: LD_INT 3
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: LIST
46383: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46384: LD_VAR 0 6
46388: PPUSH
46389: CALL_OW 257
46393: PUSH
46394: LD_INT 5
46396: EQUAL
46397: IFFALSE 46418
// points := [ 130 , 5 , 2 ] ;
46399: LD_ADDR_VAR 0 9
46403: PUSH
46404: LD_INT 130
46406: PUSH
46407: LD_INT 5
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: LIST
46417: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46418: LD_VAR 0 6
46422: PPUSH
46423: CALL_OW 257
46427: PUSH
46428: LD_INT 8
46430: EQUAL
46431: IFFALSE 46452
// points := [ 35 , 35 , 30 ] ;
46433: LD_ADDR_VAR 0 9
46437: PUSH
46438: LD_INT 35
46440: PUSH
46441: LD_INT 35
46443: PUSH
46444: LD_INT 30
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: LIST
46451: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46452: LD_VAR 0 6
46456: PPUSH
46457: CALL_OW 257
46461: PUSH
46462: LD_INT 9
46464: EQUAL
46465: IFFALSE 46486
// points := [ 20 , 55 , 40 ] ;
46467: LD_ADDR_VAR 0 9
46471: PUSH
46472: LD_INT 20
46474: PUSH
46475: LD_INT 55
46477: PUSH
46478: LD_INT 40
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: LIST
46485: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46486: LD_VAR 0 6
46490: PPUSH
46491: CALL_OW 257
46495: PUSH
46496: LD_INT 12
46498: PUSH
46499: LD_INT 16
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: IN
46506: IFFALSE 46527
// points := [ 5 , 3 , 2 ] ;
46508: LD_ADDR_VAR 0 9
46512: PUSH
46513: LD_INT 5
46515: PUSH
46516: LD_INT 3
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: LIST
46526: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46527: LD_VAR 0 6
46531: PPUSH
46532: CALL_OW 257
46536: PUSH
46537: LD_INT 17
46539: EQUAL
46540: IFFALSE 46561
// points := [ 100 , 50 , 75 ] ;
46542: LD_ADDR_VAR 0 9
46546: PUSH
46547: LD_INT 100
46549: PUSH
46550: LD_INT 50
46552: PUSH
46553: LD_INT 75
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: LIST
46560: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46561: LD_VAR 0 6
46565: PPUSH
46566: CALL_OW 257
46570: PUSH
46571: LD_INT 15
46573: EQUAL
46574: IFFALSE 46595
// points := [ 10 , 5 , 3 ] ;
46576: LD_ADDR_VAR 0 9
46580: PUSH
46581: LD_INT 10
46583: PUSH
46584: LD_INT 5
46586: PUSH
46587: LD_INT 3
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46595: LD_VAR 0 6
46599: PPUSH
46600: CALL_OW 257
46604: PUSH
46605: LD_INT 14
46607: EQUAL
46608: IFFALSE 46629
// points := [ 10 , 0 , 0 ] ;
46610: LD_ADDR_VAR 0 9
46614: PUSH
46615: LD_INT 10
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: LIST
46628: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46629: LD_VAR 0 6
46633: PPUSH
46634: CALL_OW 257
46638: PUSH
46639: LD_INT 11
46641: EQUAL
46642: IFFALSE 46663
// points := [ 30 , 10 , 5 ] ;
46644: LD_ADDR_VAR 0 9
46648: PUSH
46649: LD_INT 30
46651: PUSH
46652: LD_INT 10
46654: PUSH
46655: LD_INT 5
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: LIST
46662: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46663: LD_VAR 0 1
46667: PPUSH
46668: LD_INT 5
46670: PPUSH
46671: CALL_OW 321
46675: PUSH
46676: LD_INT 2
46678: EQUAL
46679: IFFALSE 46696
// bpoints := bpoints * 1.8 ;
46681: LD_ADDR_VAR 0 10
46685: PUSH
46686: LD_VAR 0 10
46690: PUSH
46691: LD_REAL  1.80000000000000E+0000
46694: MUL
46695: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46696: LD_VAR 0 6
46700: PPUSH
46701: CALL_OW 257
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: LD_INT 4
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: IN
46724: PUSH
46725: LD_VAR 0 1
46729: PPUSH
46730: LD_INT 51
46732: PPUSH
46733: CALL_OW 321
46737: PUSH
46738: LD_INT 2
46740: EQUAL
46741: AND
46742: IFFALSE 46759
// bpoints := bpoints * 1.2 ;
46744: LD_ADDR_VAR 0 10
46748: PUSH
46749: LD_VAR 0 10
46753: PUSH
46754: LD_REAL  1.20000000000000E+0000
46757: MUL
46758: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46759: LD_VAR 0 6
46763: PPUSH
46764: CALL_OW 257
46768: PUSH
46769: LD_INT 5
46771: PUSH
46772: LD_INT 7
46774: PUSH
46775: LD_INT 9
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: IN
46783: PUSH
46784: LD_VAR 0 1
46788: PPUSH
46789: LD_INT 52
46791: PPUSH
46792: CALL_OW 321
46796: PUSH
46797: LD_INT 2
46799: EQUAL
46800: AND
46801: IFFALSE 46818
// bpoints := bpoints * 1.5 ;
46803: LD_ADDR_VAR 0 10
46807: PUSH
46808: LD_VAR 0 10
46812: PUSH
46813: LD_REAL  1.50000000000000E+0000
46816: MUL
46817: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46818: LD_VAR 0 1
46822: PPUSH
46823: LD_INT 66
46825: PPUSH
46826: CALL_OW 321
46830: PUSH
46831: LD_INT 2
46833: EQUAL
46834: IFFALSE 46851
// bpoints := bpoints * 1.1 ;
46836: LD_ADDR_VAR 0 10
46840: PUSH
46841: LD_VAR 0 10
46845: PUSH
46846: LD_REAL  1.10000000000000E+0000
46849: MUL
46850: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46851: LD_ADDR_VAR 0 10
46855: PUSH
46856: LD_VAR 0 10
46860: PUSH
46861: LD_VAR 0 6
46865: PPUSH
46866: LD_INT 1
46868: PPUSH
46869: CALL_OW 259
46873: PUSH
46874: LD_REAL  1.15000000000000E+0000
46877: MUL
46878: MUL
46879: ST_TO_ADDR
// end ; unit_vehicle :
46880: GO 47708
46882: LD_INT 2
46884: DOUBLE
46885: EQUAL
46886: IFTRUE 46890
46888: GO 47696
46890: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46891: LD_VAR 0 6
46895: PPUSH
46896: CALL_OW 264
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: LD_INT 42
46906: PUSH
46907: LD_INT 24
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: IN
46915: IFFALSE 46936
// points := [ 25 , 5 , 3 ] ;
46917: LD_ADDR_VAR 0 9
46921: PUSH
46922: LD_INT 25
46924: PUSH
46925: LD_INT 5
46927: PUSH
46928: LD_INT 3
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: LIST
46935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46936: LD_VAR 0 6
46940: PPUSH
46941: CALL_OW 264
46945: PUSH
46946: LD_INT 4
46948: PUSH
46949: LD_INT 43
46951: PUSH
46952: LD_INT 25
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: IN
46960: IFFALSE 46981
// points := [ 40 , 15 , 5 ] ;
46962: LD_ADDR_VAR 0 9
46966: PUSH
46967: LD_INT 40
46969: PUSH
46970: LD_INT 15
46972: PUSH
46973: LD_INT 5
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: LIST
46980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46981: LD_VAR 0 6
46985: PPUSH
46986: CALL_OW 264
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: LD_INT 23
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: IN
47001: IFFALSE 47022
// points := [ 7 , 25 , 8 ] ;
47003: LD_ADDR_VAR 0 9
47007: PUSH
47008: LD_INT 7
47010: PUSH
47011: LD_INT 25
47013: PUSH
47014: LD_INT 8
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47022: LD_VAR 0 6
47026: PPUSH
47027: CALL_OW 264
47031: PUSH
47032: LD_INT 5
47034: PUSH
47035: LD_INT 27
47037: PUSH
47038: LD_INT 44
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: IN
47046: IFFALSE 47067
// points := [ 14 , 50 , 16 ] ;
47048: LD_ADDR_VAR 0 9
47052: PUSH
47053: LD_INT 14
47055: PUSH
47056: LD_INT 50
47058: PUSH
47059: LD_INT 16
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47067: LD_VAR 0 6
47071: PPUSH
47072: CALL_OW 264
47076: PUSH
47077: LD_INT 6
47079: PUSH
47080: LD_INT 46
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: IN
47087: IFFALSE 47108
// points := [ 32 , 120 , 70 ] ;
47089: LD_ADDR_VAR 0 9
47093: PUSH
47094: LD_INT 32
47096: PUSH
47097: LD_INT 120
47099: PUSH
47100: LD_INT 70
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: LIST
47107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47108: LD_VAR 0 6
47112: PPUSH
47113: CALL_OW 264
47117: PUSH
47118: LD_INT 7
47120: PUSH
47121: LD_INT 28
47123: PUSH
47124: LD_INT 45
47126: PUSH
47127: LD_INT 92
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: IN
47136: IFFALSE 47157
// points := [ 35 , 20 , 45 ] ;
47138: LD_ADDR_VAR 0 9
47142: PUSH
47143: LD_INT 35
47145: PUSH
47146: LD_INT 20
47148: PUSH
47149: LD_INT 45
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47157: LD_VAR 0 6
47161: PPUSH
47162: CALL_OW 264
47166: PUSH
47167: LD_INT 47
47169: PUSH
47170: EMPTY
47171: LIST
47172: IN
47173: IFFALSE 47194
// points := [ 67 , 45 , 75 ] ;
47175: LD_ADDR_VAR 0 9
47179: PUSH
47180: LD_INT 67
47182: PUSH
47183: LD_INT 45
47185: PUSH
47186: LD_INT 75
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47194: LD_VAR 0 6
47198: PPUSH
47199: CALL_OW 264
47203: PUSH
47204: LD_INT 26
47206: PUSH
47207: EMPTY
47208: LIST
47209: IN
47210: IFFALSE 47231
// points := [ 120 , 30 , 80 ] ;
47212: LD_ADDR_VAR 0 9
47216: PUSH
47217: LD_INT 120
47219: PUSH
47220: LD_INT 30
47222: PUSH
47223: LD_INT 80
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: LIST
47230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47231: LD_VAR 0 6
47235: PPUSH
47236: CALL_OW 264
47240: PUSH
47241: LD_INT 22
47243: PUSH
47244: EMPTY
47245: LIST
47246: IN
47247: IFFALSE 47268
// points := [ 40 , 1 , 1 ] ;
47249: LD_ADDR_VAR 0 9
47253: PUSH
47254: LD_INT 40
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47268: LD_VAR 0 6
47272: PPUSH
47273: CALL_OW 264
47277: PUSH
47278: LD_INT 29
47280: PUSH
47281: EMPTY
47282: LIST
47283: IN
47284: IFFALSE 47305
// points := [ 70 , 200 , 400 ] ;
47286: LD_ADDR_VAR 0 9
47290: PUSH
47291: LD_INT 70
47293: PUSH
47294: LD_INT 200
47296: PUSH
47297: LD_INT 400
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: LIST
47304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47305: LD_VAR 0 6
47309: PPUSH
47310: CALL_OW 264
47314: PUSH
47315: LD_INT 14
47317: PUSH
47318: LD_INT 53
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: IN
47325: IFFALSE 47346
// points := [ 40 , 10 , 20 ] ;
47327: LD_ADDR_VAR 0 9
47331: PUSH
47332: LD_INT 40
47334: PUSH
47335: LD_INT 10
47337: PUSH
47338: LD_INT 20
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: LIST
47345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47346: LD_VAR 0 6
47350: PPUSH
47351: CALL_OW 264
47355: PUSH
47356: LD_INT 9
47358: PUSH
47359: EMPTY
47360: LIST
47361: IN
47362: IFFALSE 47383
// points := [ 5 , 70 , 20 ] ;
47364: LD_ADDR_VAR 0 9
47368: PUSH
47369: LD_INT 5
47371: PUSH
47372: LD_INT 70
47374: PUSH
47375: LD_INT 20
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47383: LD_VAR 0 6
47387: PPUSH
47388: CALL_OW 264
47392: PUSH
47393: LD_INT 10
47395: PUSH
47396: EMPTY
47397: LIST
47398: IN
47399: IFFALSE 47420
// points := [ 35 , 110 , 70 ] ;
47401: LD_ADDR_VAR 0 9
47405: PUSH
47406: LD_INT 35
47408: PUSH
47409: LD_INT 110
47411: PUSH
47412: LD_INT 70
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47420: LD_VAR 0 6
47424: PPUSH
47425: CALL_OW 265
47429: PUSH
47430: LD_INT 25
47432: EQUAL
47433: IFFALSE 47454
// points := [ 80 , 65 , 100 ] ;
47435: LD_ADDR_VAR 0 9
47439: PUSH
47440: LD_INT 80
47442: PUSH
47443: LD_INT 65
47445: PUSH
47446: LD_INT 100
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47454: LD_VAR 0 6
47458: PPUSH
47459: CALL_OW 263
47463: PUSH
47464: LD_INT 1
47466: EQUAL
47467: IFFALSE 47502
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47469: LD_ADDR_VAR 0 10
47473: PUSH
47474: LD_VAR 0 10
47478: PUSH
47479: LD_VAR 0 6
47483: PPUSH
47484: CALL_OW 311
47488: PPUSH
47489: LD_INT 3
47491: PPUSH
47492: CALL_OW 259
47496: PUSH
47497: LD_INT 4
47499: MUL
47500: MUL
47501: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47502: LD_VAR 0 6
47506: PPUSH
47507: CALL_OW 263
47511: PUSH
47512: LD_INT 2
47514: EQUAL
47515: IFFALSE 47566
// begin j := IsControledBy ( i ) ;
47517: LD_ADDR_VAR 0 7
47521: PUSH
47522: LD_VAR 0 6
47526: PPUSH
47527: CALL_OW 312
47531: ST_TO_ADDR
// if j then
47532: LD_VAR 0 7
47536: IFFALSE 47566
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47538: LD_ADDR_VAR 0 10
47542: PUSH
47543: LD_VAR 0 10
47547: PUSH
47548: LD_VAR 0 7
47552: PPUSH
47553: LD_INT 3
47555: PPUSH
47556: CALL_OW 259
47560: PUSH
47561: LD_INT 3
47563: MUL
47564: MUL
47565: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47566: LD_VAR 0 6
47570: PPUSH
47571: CALL_OW 264
47575: PUSH
47576: LD_INT 5
47578: PUSH
47579: LD_INT 6
47581: PUSH
47582: LD_INT 46
47584: PUSH
47585: LD_INT 44
47587: PUSH
47588: LD_INT 47
47590: PUSH
47591: LD_INT 45
47593: PUSH
47594: LD_INT 28
47596: PUSH
47597: LD_INT 7
47599: PUSH
47600: LD_INT 27
47602: PUSH
47603: LD_INT 29
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: IN
47618: PUSH
47619: LD_VAR 0 1
47623: PPUSH
47624: LD_INT 52
47626: PPUSH
47627: CALL_OW 321
47631: PUSH
47632: LD_INT 2
47634: EQUAL
47635: AND
47636: IFFALSE 47653
// bpoints := bpoints * 1.2 ;
47638: LD_ADDR_VAR 0 10
47642: PUSH
47643: LD_VAR 0 10
47647: PUSH
47648: LD_REAL  1.20000000000000E+0000
47651: MUL
47652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47653: LD_VAR 0 6
47657: PPUSH
47658: CALL_OW 264
47662: PUSH
47663: LD_INT 6
47665: PUSH
47666: LD_INT 46
47668: PUSH
47669: LD_INT 47
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: LIST
47676: IN
47677: IFFALSE 47694
// bpoints := bpoints * 1.2 ;
47679: LD_ADDR_VAR 0 10
47683: PUSH
47684: LD_VAR 0 10
47688: PUSH
47689: LD_REAL  1.20000000000000E+0000
47692: MUL
47693: ST_TO_ADDR
// end ; unit_building :
47694: GO 47708
47696: LD_INT 3
47698: DOUBLE
47699: EQUAL
47700: IFTRUE 47704
47702: GO 47707
47704: POP
// ; end ;
47705: GO 47708
47707: POP
// for j = 1 to 3 do
47708: LD_ADDR_VAR 0 7
47712: PUSH
47713: DOUBLE
47714: LD_INT 1
47716: DEC
47717: ST_TO_ADDR
47718: LD_INT 3
47720: PUSH
47721: FOR_TO
47722: IFFALSE 47775
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47724: LD_ADDR_VAR 0 5
47728: PUSH
47729: LD_VAR 0 5
47733: PPUSH
47734: LD_VAR 0 7
47738: PPUSH
47739: LD_VAR 0 5
47743: PUSH
47744: LD_VAR 0 7
47748: ARRAY
47749: PUSH
47750: LD_VAR 0 9
47754: PUSH
47755: LD_VAR 0 7
47759: ARRAY
47760: PUSH
47761: LD_VAR 0 10
47765: MUL
47766: PLUS
47767: PPUSH
47768: CALL_OW 1
47772: ST_TO_ADDR
47773: GO 47721
47775: POP
47776: POP
// end ;
47777: GO 46256
47779: POP
47780: POP
// result := Replace ( result , 4 , tmp ) ;
47781: LD_ADDR_VAR 0 5
47785: PUSH
47786: LD_VAR 0 5
47790: PPUSH
47791: LD_INT 4
47793: PPUSH
47794: LD_VAR 0 8
47798: PPUSH
47799: CALL_OW 1
47803: ST_TO_ADDR
// end ;
47804: LD_VAR 0 5
47808: RET
// export function DangerAtRange ( unit , range ) ; begin
47809: LD_INT 0
47811: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47812: LD_ADDR_VAR 0 3
47816: PUSH
47817: LD_VAR 0 1
47821: PPUSH
47822: CALL_OW 255
47826: PPUSH
47827: LD_VAR 0 1
47831: PPUSH
47832: CALL_OW 250
47836: PPUSH
47837: LD_VAR 0 1
47841: PPUSH
47842: CALL_OW 251
47846: PPUSH
47847: LD_VAR 0 2
47851: PPUSH
47852: CALL 46108 0 4
47856: ST_TO_ADDR
// end ;
47857: LD_VAR 0 3
47861: RET
// export function DangerInArea ( side , area ) ; begin
47862: LD_INT 0
47864: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47865: LD_ADDR_VAR 0 3
47869: PUSH
47870: LD_VAR 0 2
47874: PPUSH
47875: LD_INT 81
47877: PUSH
47878: LD_VAR 0 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PPUSH
47887: CALL_OW 70
47891: ST_TO_ADDR
// end ;
47892: LD_VAR 0 3
47896: RET
// export function IsExtension ( b ) ; begin
47897: LD_INT 0
47899: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47900: LD_ADDR_VAR 0 2
47904: PUSH
47905: LD_VAR 0 1
47909: PUSH
47910: LD_INT 23
47912: PUSH
47913: LD_INT 20
47915: PUSH
47916: LD_INT 22
47918: PUSH
47919: LD_INT 17
47921: PUSH
47922: LD_INT 24
47924: PUSH
47925: LD_INT 21
47927: PUSH
47928: LD_INT 19
47930: PUSH
47931: LD_INT 16
47933: PUSH
47934: LD_INT 25
47936: PUSH
47937: LD_INT 18
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: IN
47952: ST_TO_ADDR
// end ;
47953: LD_VAR 0 2
47957: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47958: LD_INT 0
47960: PPUSH
47961: PPUSH
47962: PPUSH
// result := [ ] ;
47963: LD_ADDR_VAR 0 4
47967: PUSH
47968: EMPTY
47969: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47970: LD_ADDR_VAR 0 5
47974: PUSH
47975: LD_VAR 0 2
47979: PPUSH
47980: LD_INT 21
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PPUSH
47990: CALL_OW 70
47994: ST_TO_ADDR
// if not tmp then
47995: LD_VAR 0 5
47999: NOT
48000: IFFALSE 48004
// exit ;
48002: GO 48068
// if checkLink then
48004: LD_VAR 0 3
48008: IFFALSE 48058
// begin for i in tmp do
48010: LD_ADDR_VAR 0 6
48014: PUSH
48015: LD_VAR 0 5
48019: PUSH
48020: FOR_IN
48021: IFFALSE 48056
// if GetBase ( i ) <> base then
48023: LD_VAR 0 6
48027: PPUSH
48028: CALL_OW 274
48032: PUSH
48033: LD_VAR 0 1
48037: NONEQUAL
48038: IFFALSE 48054
// ComLinkToBase ( base , i ) ;
48040: LD_VAR 0 1
48044: PPUSH
48045: LD_VAR 0 6
48049: PPUSH
48050: CALL_OW 169
48054: GO 48020
48056: POP
48057: POP
// end ; result := tmp ;
48058: LD_ADDR_VAR 0 4
48062: PUSH
48063: LD_VAR 0 5
48067: ST_TO_ADDR
// end ;
48068: LD_VAR 0 4
48072: RET
// export function ComComplete ( units , b ) ; var i ; begin
48073: LD_INT 0
48075: PPUSH
48076: PPUSH
// if not units then
48077: LD_VAR 0 1
48081: NOT
48082: IFFALSE 48086
// exit ;
48084: GO 48176
// for i in units do
48086: LD_ADDR_VAR 0 4
48090: PUSH
48091: LD_VAR 0 1
48095: PUSH
48096: FOR_IN
48097: IFFALSE 48174
// if BuildingStatus ( b ) = bs_build then
48099: LD_VAR 0 2
48103: PPUSH
48104: CALL_OW 461
48108: PUSH
48109: LD_INT 1
48111: EQUAL
48112: IFFALSE 48172
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48114: LD_VAR 0 4
48118: PPUSH
48119: LD_STRING h
48121: PUSH
48122: LD_VAR 0 2
48126: PPUSH
48127: CALL_OW 250
48131: PUSH
48132: LD_VAR 0 2
48136: PPUSH
48137: CALL_OW 251
48141: PUSH
48142: LD_VAR 0 2
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: PUSH
48165: EMPTY
48166: LIST
48167: PPUSH
48168: CALL_OW 446
48172: GO 48096
48174: POP
48175: POP
// end ;
48176: LD_VAR 0 3
48180: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48181: LD_INT 0
48183: PPUSH
48184: PPUSH
48185: PPUSH
48186: PPUSH
48187: PPUSH
48188: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48189: LD_VAR 0 1
48193: NOT
48194: PUSH
48195: LD_VAR 0 1
48199: PPUSH
48200: CALL_OW 263
48204: PUSH
48205: LD_INT 2
48207: NONEQUAL
48208: OR
48209: IFFALSE 48213
// exit ;
48211: GO 48529
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48213: LD_ADDR_VAR 0 6
48217: PUSH
48218: LD_INT 22
48220: PUSH
48221: LD_VAR 0 1
48225: PPUSH
48226: CALL_OW 255
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: LD_INT 30
48240: PUSH
48241: LD_INT 36
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 34
48250: PUSH
48251: LD_INT 31
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PPUSH
48267: CALL_OW 69
48271: ST_TO_ADDR
// if not tmp then
48272: LD_VAR 0 6
48276: NOT
48277: IFFALSE 48281
// exit ;
48279: GO 48529
// result := [ ] ;
48281: LD_ADDR_VAR 0 2
48285: PUSH
48286: EMPTY
48287: ST_TO_ADDR
// for i in tmp do
48288: LD_ADDR_VAR 0 3
48292: PUSH
48293: LD_VAR 0 6
48297: PUSH
48298: FOR_IN
48299: IFFALSE 48370
// begin t := UnitsInside ( i ) ;
48301: LD_ADDR_VAR 0 4
48305: PUSH
48306: LD_VAR 0 3
48310: PPUSH
48311: CALL_OW 313
48315: ST_TO_ADDR
// if t then
48316: LD_VAR 0 4
48320: IFFALSE 48368
// for j in t do
48322: LD_ADDR_VAR 0 7
48326: PUSH
48327: LD_VAR 0 4
48331: PUSH
48332: FOR_IN
48333: IFFALSE 48366
// result := Replace ( result , result + 1 , j ) ;
48335: LD_ADDR_VAR 0 2
48339: PUSH
48340: LD_VAR 0 2
48344: PPUSH
48345: LD_VAR 0 2
48349: PUSH
48350: LD_INT 1
48352: PLUS
48353: PPUSH
48354: LD_VAR 0 7
48358: PPUSH
48359: CALL_OW 1
48363: ST_TO_ADDR
48364: GO 48332
48366: POP
48367: POP
// end ;
48368: GO 48298
48370: POP
48371: POP
// if not result then
48372: LD_VAR 0 2
48376: NOT
48377: IFFALSE 48381
// exit ;
48379: GO 48529
// mech := result [ 1 ] ;
48381: LD_ADDR_VAR 0 5
48385: PUSH
48386: LD_VAR 0 2
48390: PUSH
48391: LD_INT 1
48393: ARRAY
48394: ST_TO_ADDR
// if result > 1 then
48395: LD_VAR 0 2
48399: PUSH
48400: LD_INT 1
48402: GREATER
48403: IFFALSE 48515
// begin for i = 2 to result do
48405: LD_ADDR_VAR 0 3
48409: PUSH
48410: DOUBLE
48411: LD_INT 2
48413: DEC
48414: ST_TO_ADDR
48415: LD_VAR 0 2
48419: PUSH
48420: FOR_TO
48421: IFFALSE 48513
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48423: LD_ADDR_VAR 0 4
48427: PUSH
48428: LD_VAR 0 2
48432: PUSH
48433: LD_VAR 0 3
48437: ARRAY
48438: PPUSH
48439: LD_INT 3
48441: PPUSH
48442: CALL_OW 259
48446: PUSH
48447: LD_VAR 0 2
48451: PUSH
48452: LD_VAR 0 3
48456: ARRAY
48457: PPUSH
48458: CALL_OW 432
48462: MINUS
48463: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48464: LD_VAR 0 4
48468: PUSH
48469: LD_VAR 0 5
48473: PPUSH
48474: LD_INT 3
48476: PPUSH
48477: CALL_OW 259
48481: PUSH
48482: LD_VAR 0 5
48486: PPUSH
48487: CALL_OW 432
48491: MINUS
48492: GREATEREQUAL
48493: IFFALSE 48511
// mech := result [ i ] ;
48495: LD_ADDR_VAR 0 5
48499: PUSH
48500: LD_VAR 0 2
48504: PUSH
48505: LD_VAR 0 3
48509: ARRAY
48510: ST_TO_ADDR
// end ;
48511: GO 48420
48513: POP
48514: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48515: LD_VAR 0 1
48519: PPUSH
48520: LD_VAR 0 5
48524: PPUSH
48525: CALL_OW 135
// end ;
48529: LD_VAR 0 2
48533: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48534: LD_INT 0
48536: PPUSH
48537: PPUSH
48538: PPUSH
48539: PPUSH
48540: PPUSH
48541: PPUSH
48542: PPUSH
48543: PPUSH
48544: PPUSH
48545: PPUSH
48546: PPUSH
48547: PPUSH
48548: PPUSH
// result := [ ] ;
48549: LD_ADDR_VAR 0 7
48553: PUSH
48554: EMPTY
48555: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48556: LD_VAR 0 1
48560: PPUSH
48561: CALL_OW 266
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: IN
48576: NOT
48577: IFFALSE 48581
// exit ;
48579: GO 50215
// if name then
48581: LD_VAR 0 3
48585: IFFALSE 48601
// SetBName ( base_dep , name ) ;
48587: LD_VAR 0 1
48591: PPUSH
48592: LD_VAR 0 3
48596: PPUSH
48597: CALL_OW 500
// base := GetBase ( base_dep ) ;
48601: LD_ADDR_VAR 0 15
48605: PUSH
48606: LD_VAR 0 1
48610: PPUSH
48611: CALL_OW 274
48615: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48616: LD_ADDR_VAR 0 16
48620: PUSH
48621: LD_VAR 0 1
48625: PPUSH
48626: CALL_OW 255
48630: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48631: LD_ADDR_VAR 0 17
48635: PUSH
48636: LD_VAR 0 1
48640: PPUSH
48641: CALL_OW 248
48645: ST_TO_ADDR
// if sources then
48646: LD_VAR 0 5
48650: IFFALSE 48697
// for i = 1 to 3 do
48652: LD_ADDR_VAR 0 8
48656: PUSH
48657: DOUBLE
48658: LD_INT 1
48660: DEC
48661: ST_TO_ADDR
48662: LD_INT 3
48664: PUSH
48665: FOR_TO
48666: IFFALSE 48695
// AddResourceType ( base , i , sources [ i ] ) ;
48668: LD_VAR 0 15
48672: PPUSH
48673: LD_VAR 0 8
48677: PPUSH
48678: LD_VAR 0 5
48682: PUSH
48683: LD_VAR 0 8
48687: ARRAY
48688: PPUSH
48689: CALL_OW 276
48693: GO 48665
48695: POP
48696: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48697: LD_ADDR_VAR 0 18
48701: PUSH
48702: LD_VAR 0 15
48706: PPUSH
48707: LD_VAR 0 2
48711: PPUSH
48712: LD_INT 1
48714: PPUSH
48715: CALL 47958 0 3
48719: ST_TO_ADDR
// InitHc ;
48720: CALL_OW 19
// InitUc ;
48724: CALL_OW 18
// uc_side := side ;
48728: LD_ADDR_OWVAR 20
48732: PUSH
48733: LD_VAR 0 16
48737: ST_TO_ADDR
// uc_nation := nation ;
48738: LD_ADDR_OWVAR 21
48742: PUSH
48743: LD_VAR 0 17
48747: ST_TO_ADDR
// if buildings then
48748: LD_VAR 0 18
48752: IFFALSE 50074
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48754: LD_ADDR_VAR 0 19
48758: PUSH
48759: LD_VAR 0 18
48763: PPUSH
48764: LD_INT 2
48766: PUSH
48767: LD_INT 30
48769: PUSH
48770: LD_INT 29
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 30
48779: PUSH
48780: LD_INT 30
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: LIST
48791: PPUSH
48792: CALL_OW 72
48796: ST_TO_ADDR
// if tmp then
48797: LD_VAR 0 19
48801: IFFALSE 48849
// for i in tmp do
48803: LD_ADDR_VAR 0 8
48807: PUSH
48808: LD_VAR 0 19
48812: PUSH
48813: FOR_IN
48814: IFFALSE 48847
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48816: LD_VAR 0 8
48820: PPUSH
48821: CALL_OW 250
48825: PPUSH
48826: LD_VAR 0 8
48830: PPUSH
48831: CALL_OW 251
48835: PPUSH
48836: LD_VAR 0 16
48840: PPUSH
48841: CALL_OW 441
48845: GO 48813
48847: POP
48848: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48849: LD_VAR 0 18
48853: PPUSH
48854: LD_INT 2
48856: PUSH
48857: LD_INT 30
48859: PUSH
48860: LD_INT 32
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 30
48869: PUSH
48870: LD_INT 33
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: LIST
48881: PPUSH
48882: CALL_OW 72
48886: IFFALSE 48974
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48888: LD_ADDR_VAR 0 8
48892: PUSH
48893: LD_VAR 0 18
48897: PPUSH
48898: LD_INT 2
48900: PUSH
48901: LD_INT 30
48903: PUSH
48904: LD_INT 32
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 30
48913: PUSH
48914: LD_INT 33
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: PPUSH
48926: CALL_OW 72
48930: PUSH
48931: FOR_IN
48932: IFFALSE 48972
// begin if not GetBWeapon ( i ) then
48934: LD_VAR 0 8
48938: PPUSH
48939: CALL_OW 269
48943: NOT
48944: IFFALSE 48970
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48946: LD_VAR 0 8
48950: PPUSH
48951: LD_VAR 0 8
48955: PPUSH
48956: LD_VAR 0 2
48960: PPUSH
48961: CALL 50220 0 2
48965: PPUSH
48966: CALL_OW 431
// end ;
48970: GO 48931
48972: POP
48973: POP
// end ; for i = 1 to personel do
48974: LD_ADDR_VAR 0 8
48978: PUSH
48979: DOUBLE
48980: LD_INT 1
48982: DEC
48983: ST_TO_ADDR
48984: LD_VAR 0 6
48988: PUSH
48989: FOR_TO
48990: IFFALSE 50054
// begin if i > 4 then
48992: LD_VAR 0 8
48996: PUSH
48997: LD_INT 4
48999: GREATER
49000: IFFALSE 49004
// break ;
49002: GO 50054
// case i of 1 :
49004: LD_VAR 0 8
49008: PUSH
49009: LD_INT 1
49011: DOUBLE
49012: EQUAL
49013: IFTRUE 49017
49015: GO 49097
49017: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49018: LD_ADDR_VAR 0 12
49022: PUSH
49023: LD_VAR 0 18
49027: PPUSH
49028: LD_INT 22
49030: PUSH
49031: LD_VAR 0 16
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 58
49042: PUSH
49043: EMPTY
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: LD_INT 30
49051: PUSH
49052: LD_INT 32
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 30
49061: PUSH
49062: LD_INT 4
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 30
49071: PUSH
49072: LD_INT 5
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: LIST
49089: PPUSH
49090: CALL_OW 72
49094: ST_TO_ADDR
49095: GO 49319
49097: LD_INT 2
49099: DOUBLE
49100: EQUAL
49101: IFTRUE 49105
49103: GO 49167
49105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49106: LD_ADDR_VAR 0 12
49110: PUSH
49111: LD_VAR 0 18
49115: PPUSH
49116: LD_INT 22
49118: PUSH
49119: LD_VAR 0 16
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: PUSH
49131: LD_INT 30
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 30
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PPUSH
49160: CALL_OW 72
49164: ST_TO_ADDR
49165: GO 49319
49167: LD_INT 3
49169: DOUBLE
49170: EQUAL
49171: IFTRUE 49175
49173: GO 49237
49175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49176: LD_ADDR_VAR 0 12
49180: PUSH
49181: LD_VAR 0 18
49185: PPUSH
49186: LD_INT 22
49188: PUSH
49189: LD_VAR 0 16
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 30
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 30
49213: PUSH
49214: LD_INT 3
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PPUSH
49230: CALL_OW 72
49234: ST_TO_ADDR
49235: GO 49319
49237: LD_INT 4
49239: DOUBLE
49240: EQUAL
49241: IFTRUE 49245
49243: GO 49318
49245: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49246: LD_ADDR_VAR 0 12
49250: PUSH
49251: LD_VAR 0 18
49255: PPUSH
49256: LD_INT 22
49258: PUSH
49259: LD_VAR 0 16
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: LD_INT 30
49273: PUSH
49274: LD_INT 6
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 30
49283: PUSH
49284: LD_INT 7
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 30
49293: PUSH
49294: LD_INT 8
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PPUSH
49311: CALL_OW 72
49315: ST_TO_ADDR
49316: GO 49319
49318: POP
// if i = 1 then
49319: LD_VAR 0 8
49323: PUSH
49324: LD_INT 1
49326: EQUAL
49327: IFFALSE 49438
// begin tmp := [ ] ;
49329: LD_ADDR_VAR 0 19
49333: PUSH
49334: EMPTY
49335: ST_TO_ADDR
// for j in f do
49336: LD_ADDR_VAR 0 9
49340: PUSH
49341: LD_VAR 0 12
49345: PUSH
49346: FOR_IN
49347: IFFALSE 49420
// if GetBType ( j ) = b_bunker then
49349: LD_VAR 0 9
49353: PPUSH
49354: CALL_OW 266
49358: PUSH
49359: LD_INT 32
49361: EQUAL
49362: IFFALSE 49389
// tmp := Insert ( tmp , 1 , j ) else
49364: LD_ADDR_VAR 0 19
49368: PUSH
49369: LD_VAR 0 19
49373: PPUSH
49374: LD_INT 1
49376: PPUSH
49377: LD_VAR 0 9
49381: PPUSH
49382: CALL_OW 2
49386: ST_TO_ADDR
49387: GO 49418
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49389: LD_ADDR_VAR 0 19
49393: PUSH
49394: LD_VAR 0 19
49398: PPUSH
49399: LD_VAR 0 19
49403: PUSH
49404: LD_INT 1
49406: PLUS
49407: PPUSH
49408: LD_VAR 0 9
49412: PPUSH
49413: CALL_OW 2
49417: ST_TO_ADDR
49418: GO 49346
49420: POP
49421: POP
// if tmp then
49422: LD_VAR 0 19
49426: IFFALSE 49438
// f := tmp ;
49428: LD_ADDR_VAR 0 12
49432: PUSH
49433: LD_VAR 0 19
49437: ST_TO_ADDR
// end ; x := personel [ i ] ;
49438: LD_ADDR_VAR 0 13
49442: PUSH
49443: LD_VAR 0 6
49447: PUSH
49448: LD_VAR 0 8
49452: ARRAY
49453: ST_TO_ADDR
// if x = - 1 then
49454: LD_VAR 0 13
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: EQUAL
49463: IFFALSE 49672
// begin for j in f do
49465: LD_ADDR_VAR 0 9
49469: PUSH
49470: LD_VAR 0 12
49474: PUSH
49475: FOR_IN
49476: IFFALSE 49668
// repeat InitHc ;
49478: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49482: LD_VAR 0 9
49486: PPUSH
49487: CALL_OW 266
49491: PUSH
49492: LD_INT 5
49494: EQUAL
49495: IFFALSE 49565
// begin if UnitsInside ( j ) < 3 then
49497: LD_VAR 0 9
49501: PPUSH
49502: CALL_OW 313
49506: PUSH
49507: LD_INT 3
49509: LESS
49510: IFFALSE 49546
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49512: LD_INT 0
49514: PPUSH
49515: LD_INT 5
49517: PUSH
49518: LD_INT 8
49520: PUSH
49521: LD_INT 9
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: PUSH
49529: LD_VAR 0 17
49533: ARRAY
49534: PPUSH
49535: LD_VAR 0 4
49539: PPUSH
49540: CALL_OW 380
49544: GO 49563
// PrepareHuman ( false , i , skill ) ;
49546: LD_INT 0
49548: PPUSH
49549: LD_VAR 0 8
49553: PPUSH
49554: LD_VAR 0 4
49558: PPUSH
49559: CALL_OW 380
// end else
49563: GO 49582
// PrepareHuman ( false , i , skill ) ;
49565: LD_INT 0
49567: PPUSH
49568: LD_VAR 0 8
49572: PPUSH
49573: LD_VAR 0 4
49577: PPUSH
49578: CALL_OW 380
// un := CreateHuman ;
49582: LD_ADDR_VAR 0 14
49586: PUSH
49587: CALL_OW 44
49591: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49592: LD_ADDR_VAR 0 7
49596: PUSH
49597: LD_VAR 0 7
49601: PPUSH
49602: LD_INT 1
49604: PPUSH
49605: LD_VAR 0 14
49609: PPUSH
49610: CALL_OW 2
49614: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49615: LD_VAR 0 14
49619: PPUSH
49620: LD_VAR 0 9
49624: PPUSH
49625: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49629: LD_VAR 0 9
49633: PPUSH
49634: CALL_OW 313
49638: PUSH
49639: LD_INT 6
49641: EQUAL
49642: PUSH
49643: LD_VAR 0 9
49647: PPUSH
49648: CALL_OW 266
49652: PUSH
49653: LD_INT 32
49655: PUSH
49656: LD_INT 31
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: IN
49663: OR
49664: IFFALSE 49478
49666: GO 49475
49668: POP
49669: POP
// end else
49670: GO 50052
// for j = 1 to x do
49672: LD_ADDR_VAR 0 9
49676: PUSH
49677: DOUBLE
49678: LD_INT 1
49680: DEC
49681: ST_TO_ADDR
49682: LD_VAR 0 13
49686: PUSH
49687: FOR_TO
49688: IFFALSE 50050
// begin InitHc ;
49690: CALL_OW 19
// if not f then
49694: LD_VAR 0 12
49698: NOT
49699: IFFALSE 49788
// begin PrepareHuman ( false , i , skill ) ;
49701: LD_INT 0
49703: PPUSH
49704: LD_VAR 0 8
49708: PPUSH
49709: LD_VAR 0 4
49713: PPUSH
49714: CALL_OW 380
// un := CreateHuman ;
49718: LD_ADDR_VAR 0 14
49722: PUSH
49723: CALL_OW 44
49727: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49728: LD_ADDR_VAR 0 7
49732: PUSH
49733: LD_VAR 0 7
49737: PPUSH
49738: LD_INT 1
49740: PPUSH
49741: LD_VAR 0 14
49745: PPUSH
49746: CALL_OW 2
49750: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49751: LD_VAR 0 14
49755: PPUSH
49756: LD_VAR 0 1
49760: PPUSH
49761: CALL_OW 250
49765: PPUSH
49766: LD_VAR 0 1
49770: PPUSH
49771: CALL_OW 251
49775: PPUSH
49776: LD_INT 10
49778: PPUSH
49779: LD_INT 0
49781: PPUSH
49782: CALL_OW 50
// continue ;
49786: GO 49687
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49788: LD_VAR 0 12
49792: PUSH
49793: LD_INT 1
49795: ARRAY
49796: PPUSH
49797: CALL_OW 313
49801: PUSH
49802: LD_VAR 0 12
49806: PUSH
49807: LD_INT 1
49809: ARRAY
49810: PPUSH
49811: CALL_OW 266
49815: PUSH
49816: LD_INT 32
49818: PUSH
49819: LD_INT 31
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: IN
49826: AND
49827: PUSH
49828: LD_VAR 0 12
49832: PUSH
49833: LD_INT 1
49835: ARRAY
49836: PPUSH
49837: CALL_OW 313
49841: PUSH
49842: LD_INT 6
49844: EQUAL
49845: OR
49846: IFFALSE 49866
// f := Delete ( f , 1 ) ;
49848: LD_ADDR_VAR 0 12
49852: PUSH
49853: LD_VAR 0 12
49857: PPUSH
49858: LD_INT 1
49860: PPUSH
49861: CALL_OW 3
49865: ST_TO_ADDR
// if not f then
49866: LD_VAR 0 12
49870: NOT
49871: IFFALSE 49889
// begin x := x + 2 ;
49873: LD_ADDR_VAR 0 13
49877: PUSH
49878: LD_VAR 0 13
49882: PUSH
49883: LD_INT 2
49885: PLUS
49886: ST_TO_ADDR
// continue ;
49887: GO 49687
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49889: LD_VAR 0 12
49893: PUSH
49894: LD_INT 1
49896: ARRAY
49897: PPUSH
49898: CALL_OW 266
49902: PUSH
49903: LD_INT 5
49905: EQUAL
49906: IFFALSE 49980
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49908: LD_VAR 0 12
49912: PUSH
49913: LD_INT 1
49915: ARRAY
49916: PPUSH
49917: CALL_OW 313
49921: PUSH
49922: LD_INT 3
49924: LESS
49925: IFFALSE 49961
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49927: LD_INT 0
49929: PPUSH
49930: LD_INT 5
49932: PUSH
49933: LD_INT 8
49935: PUSH
49936: LD_INT 9
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: PUSH
49944: LD_VAR 0 17
49948: ARRAY
49949: PPUSH
49950: LD_VAR 0 4
49954: PPUSH
49955: CALL_OW 380
49959: GO 49978
// PrepareHuman ( false , i , skill ) ;
49961: LD_INT 0
49963: PPUSH
49964: LD_VAR 0 8
49968: PPUSH
49969: LD_VAR 0 4
49973: PPUSH
49974: CALL_OW 380
// end else
49978: GO 49997
// PrepareHuman ( false , i , skill ) ;
49980: LD_INT 0
49982: PPUSH
49983: LD_VAR 0 8
49987: PPUSH
49988: LD_VAR 0 4
49992: PPUSH
49993: CALL_OW 380
// un := CreateHuman ;
49997: LD_ADDR_VAR 0 14
50001: PUSH
50002: CALL_OW 44
50006: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50007: LD_ADDR_VAR 0 7
50011: PUSH
50012: LD_VAR 0 7
50016: PPUSH
50017: LD_INT 1
50019: PPUSH
50020: LD_VAR 0 14
50024: PPUSH
50025: CALL_OW 2
50029: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50030: LD_VAR 0 14
50034: PPUSH
50035: LD_VAR 0 12
50039: PUSH
50040: LD_INT 1
50042: ARRAY
50043: PPUSH
50044: CALL_OW 52
// end ;
50048: GO 49687
50050: POP
50051: POP
// end ;
50052: GO 48989
50054: POP
50055: POP
// result := result ^ buildings ;
50056: LD_ADDR_VAR 0 7
50060: PUSH
50061: LD_VAR 0 7
50065: PUSH
50066: LD_VAR 0 18
50070: ADD
50071: ST_TO_ADDR
// end else
50072: GO 50215
// begin for i = 1 to personel do
50074: LD_ADDR_VAR 0 8
50078: PUSH
50079: DOUBLE
50080: LD_INT 1
50082: DEC
50083: ST_TO_ADDR
50084: LD_VAR 0 6
50088: PUSH
50089: FOR_TO
50090: IFFALSE 50213
// begin if i > 4 then
50092: LD_VAR 0 8
50096: PUSH
50097: LD_INT 4
50099: GREATER
50100: IFFALSE 50104
// break ;
50102: GO 50213
// x := personel [ i ] ;
50104: LD_ADDR_VAR 0 13
50108: PUSH
50109: LD_VAR 0 6
50113: PUSH
50114: LD_VAR 0 8
50118: ARRAY
50119: ST_TO_ADDR
// if x = - 1 then
50120: LD_VAR 0 13
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: EQUAL
50129: IFFALSE 50133
// continue ;
50131: GO 50089
// PrepareHuman ( false , i , skill ) ;
50133: LD_INT 0
50135: PPUSH
50136: LD_VAR 0 8
50140: PPUSH
50141: LD_VAR 0 4
50145: PPUSH
50146: CALL_OW 380
// un := CreateHuman ;
50150: LD_ADDR_VAR 0 14
50154: PUSH
50155: CALL_OW 44
50159: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50160: LD_VAR 0 14
50164: PPUSH
50165: LD_VAR 0 1
50169: PPUSH
50170: CALL_OW 250
50174: PPUSH
50175: LD_VAR 0 1
50179: PPUSH
50180: CALL_OW 251
50184: PPUSH
50185: LD_INT 10
50187: PPUSH
50188: LD_INT 0
50190: PPUSH
50191: CALL_OW 50
// result := result ^ un ;
50195: LD_ADDR_VAR 0 7
50199: PUSH
50200: LD_VAR 0 7
50204: PUSH
50205: LD_VAR 0 14
50209: ADD
50210: ST_TO_ADDR
// end ;
50211: GO 50089
50213: POP
50214: POP
// end ; end ;
50215: LD_VAR 0 7
50219: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50220: LD_INT 0
50222: PPUSH
50223: PPUSH
50224: PPUSH
50225: PPUSH
50226: PPUSH
50227: PPUSH
50228: PPUSH
50229: PPUSH
50230: PPUSH
50231: PPUSH
50232: PPUSH
50233: PPUSH
50234: PPUSH
50235: PPUSH
50236: PPUSH
50237: PPUSH
// result := false ;
50238: LD_ADDR_VAR 0 3
50242: PUSH
50243: LD_INT 0
50245: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50246: LD_VAR 0 1
50250: NOT
50251: PUSH
50252: LD_VAR 0 1
50256: PPUSH
50257: CALL_OW 266
50261: PUSH
50262: LD_INT 32
50264: PUSH
50265: LD_INT 33
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: IN
50272: NOT
50273: OR
50274: IFFALSE 50278
// exit ;
50276: GO 51387
// nat := GetNation ( tower ) ;
50278: LD_ADDR_VAR 0 12
50282: PUSH
50283: LD_VAR 0 1
50287: PPUSH
50288: CALL_OW 248
50292: ST_TO_ADDR
// side := GetSide ( tower ) ;
50293: LD_ADDR_VAR 0 16
50297: PUSH
50298: LD_VAR 0 1
50302: PPUSH
50303: CALL_OW 255
50307: ST_TO_ADDR
// x := GetX ( tower ) ;
50308: LD_ADDR_VAR 0 10
50312: PUSH
50313: LD_VAR 0 1
50317: PPUSH
50318: CALL_OW 250
50322: ST_TO_ADDR
// y := GetY ( tower ) ;
50323: LD_ADDR_VAR 0 11
50327: PUSH
50328: LD_VAR 0 1
50332: PPUSH
50333: CALL_OW 251
50337: ST_TO_ADDR
// if not x or not y then
50338: LD_VAR 0 10
50342: NOT
50343: PUSH
50344: LD_VAR 0 11
50348: NOT
50349: OR
50350: IFFALSE 50354
// exit ;
50352: GO 51387
// weapon := 0 ;
50354: LD_ADDR_VAR 0 18
50358: PUSH
50359: LD_INT 0
50361: ST_TO_ADDR
// fac_list := [ ] ;
50362: LD_ADDR_VAR 0 17
50366: PUSH
50367: EMPTY
50368: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50369: LD_ADDR_VAR 0 6
50373: PUSH
50374: LD_VAR 0 1
50378: PPUSH
50379: CALL_OW 274
50383: PPUSH
50384: LD_VAR 0 2
50388: PPUSH
50389: LD_INT 0
50391: PPUSH
50392: CALL 47958 0 3
50396: PPUSH
50397: LD_INT 30
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PPUSH
50407: CALL_OW 72
50411: ST_TO_ADDR
// if not factories then
50412: LD_VAR 0 6
50416: NOT
50417: IFFALSE 50421
// exit ;
50419: GO 51387
// for i in factories do
50421: LD_ADDR_VAR 0 8
50425: PUSH
50426: LD_VAR 0 6
50430: PUSH
50431: FOR_IN
50432: IFFALSE 50457
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50434: LD_ADDR_VAR 0 17
50438: PUSH
50439: LD_VAR 0 17
50443: PUSH
50444: LD_VAR 0 8
50448: PPUSH
50449: CALL_OW 478
50453: UNION
50454: ST_TO_ADDR
50455: GO 50431
50457: POP
50458: POP
// if not fac_list then
50459: LD_VAR 0 17
50463: NOT
50464: IFFALSE 50468
// exit ;
50466: GO 51387
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50468: LD_ADDR_VAR 0 5
50472: PUSH
50473: LD_INT 4
50475: PUSH
50476: LD_INT 5
50478: PUSH
50479: LD_INT 9
50481: PUSH
50482: LD_INT 10
50484: PUSH
50485: LD_INT 6
50487: PUSH
50488: LD_INT 7
50490: PUSH
50491: LD_INT 11
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 27
50505: PUSH
50506: LD_INT 28
50508: PUSH
50509: LD_INT 26
50511: PUSH
50512: LD_INT 30
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 43
50523: PUSH
50524: LD_INT 44
50526: PUSH
50527: LD_INT 46
50529: PUSH
50530: LD_INT 45
50532: PUSH
50533: LD_INT 47
50535: PUSH
50536: LD_INT 49
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: PUSH
50552: LD_VAR 0 12
50556: ARRAY
50557: ST_TO_ADDR
// list := list isect fac_list ;
50558: LD_ADDR_VAR 0 5
50562: PUSH
50563: LD_VAR 0 5
50567: PUSH
50568: LD_VAR 0 17
50572: ISECT
50573: ST_TO_ADDR
// if not list then
50574: LD_VAR 0 5
50578: NOT
50579: IFFALSE 50583
// exit ;
50581: GO 51387
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50583: LD_VAR 0 12
50587: PUSH
50588: LD_INT 3
50590: EQUAL
50591: PUSH
50592: LD_INT 49
50594: PUSH
50595: LD_VAR 0 5
50599: IN
50600: AND
50601: PUSH
50602: LD_INT 31
50604: PPUSH
50605: LD_VAR 0 16
50609: PPUSH
50610: CALL_OW 321
50614: PUSH
50615: LD_INT 2
50617: EQUAL
50618: AND
50619: IFFALSE 50679
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50621: LD_INT 22
50623: PUSH
50624: LD_VAR 0 16
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 35
50635: PUSH
50636: LD_INT 49
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 91
50645: PUSH
50646: LD_VAR 0 1
50650: PUSH
50651: LD_INT 10
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: LIST
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: PPUSH
50664: CALL_OW 69
50668: NOT
50669: IFFALSE 50679
// weapon := ru_time_lapser ;
50671: LD_ADDR_VAR 0 18
50675: PUSH
50676: LD_INT 49
50678: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50679: LD_VAR 0 12
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: IN
50694: PUSH
50695: LD_INT 11
50697: PUSH
50698: LD_VAR 0 5
50702: IN
50703: PUSH
50704: LD_INT 30
50706: PUSH
50707: LD_VAR 0 5
50711: IN
50712: OR
50713: AND
50714: PUSH
50715: LD_INT 6
50717: PPUSH
50718: LD_VAR 0 16
50722: PPUSH
50723: CALL_OW 321
50727: PUSH
50728: LD_INT 2
50730: EQUAL
50731: AND
50732: IFFALSE 50897
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50734: LD_INT 22
50736: PUSH
50737: LD_VAR 0 16
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: LD_INT 35
50751: PUSH
50752: LD_INT 11
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 35
50761: PUSH
50762: LD_INT 30
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 91
50776: PUSH
50777: LD_VAR 0 1
50781: PUSH
50782: LD_INT 18
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: PPUSH
50795: CALL_OW 69
50799: NOT
50800: PUSH
50801: LD_INT 22
50803: PUSH
50804: LD_VAR 0 16
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 30
50818: PUSH
50819: LD_INT 32
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 30
50828: PUSH
50829: LD_INT 33
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 91
50843: PUSH
50844: LD_VAR 0 1
50848: PUSH
50849: LD_INT 12
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: PPUSH
50865: CALL_OW 69
50869: PUSH
50870: LD_INT 2
50872: GREATER
50873: AND
50874: IFFALSE 50897
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50876: LD_ADDR_VAR 0 18
50880: PUSH
50881: LD_INT 11
50883: PUSH
50884: LD_INT 30
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_VAR 0 12
50895: ARRAY
50896: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50897: LD_VAR 0 18
50901: NOT
50902: PUSH
50903: LD_INT 40
50905: PPUSH
50906: LD_VAR 0 16
50910: PPUSH
50911: CALL_OW 321
50915: PUSH
50916: LD_INT 2
50918: EQUAL
50919: AND
50920: PUSH
50921: LD_INT 7
50923: PUSH
50924: LD_VAR 0 5
50928: IN
50929: PUSH
50930: LD_INT 28
50932: PUSH
50933: LD_VAR 0 5
50937: IN
50938: OR
50939: PUSH
50940: LD_INT 45
50942: PUSH
50943: LD_VAR 0 5
50947: IN
50948: OR
50949: AND
50950: IFFALSE 51204
// begin hex := GetHexInfo ( x , y ) ;
50952: LD_ADDR_VAR 0 4
50956: PUSH
50957: LD_VAR 0 10
50961: PPUSH
50962: LD_VAR 0 11
50966: PPUSH
50967: CALL_OW 546
50971: ST_TO_ADDR
// if hex [ 1 ] then
50972: LD_VAR 0 4
50976: PUSH
50977: LD_INT 1
50979: ARRAY
50980: IFFALSE 50984
// exit ;
50982: GO 51387
// height := hex [ 2 ] ;
50984: LD_ADDR_VAR 0 15
50988: PUSH
50989: LD_VAR 0 4
50993: PUSH
50994: LD_INT 2
50996: ARRAY
50997: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50998: LD_ADDR_VAR 0 14
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: LD_INT 5
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: ST_TO_ADDR
// for i in tmp do
51021: LD_ADDR_VAR 0 8
51025: PUSH
51026: LD_VAR 0 14
51030: PUSH
51031: FOR_IN
51032: IFFALSE 51202
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51034: LD_ADDR_VAR 0 9
51038: PUSH
51039: LD_VAR 0 10
51043: PPUSH
51044: LD_VAR 0 8
51048: PPUSH
51049: LD_INT 5
51051: PPUSH
51052: CALL_OW 272
51056: PUSH
51057: LD_VAR 0 11
51061: PPUSH
51062: LD_VAR 0 8
51066: PPUSH
51067: LD_INT 5
51069: PPUSH
51070: CALL_OW 273
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51079: LD_VAR 0 9
51083: PUSH
51084: LD_INT 1
51086: ARRAY
51087: PPUSH
51088: LD_VAR 0 9
51092: PUSH
51093: LD_INT 2
51095: ARRAY
51096: PPUSH
51097: CALL_OW 488
51101: IFFALSE 51200
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51103: LD_ADDR_VAR 0 4
51107: PUSH
51108: LD_VAR 0 9
51112: PUSH
51113: LD_INT 1
51115: ARRAY
51116: PPUSH
51117: LD_VAR 0 9
51121: PUSH
51122: LD_INT 2
51124: ARRAY
51125: PPUSH
51126: CALL_OW 546
51130: ST_TO_ADDR
// if hex [ 1 ] then
51131: LD_VAR 0 4
51135: PUSH
51136: LD_INT 1
51138: ARRAY
51139: IFFALSE 51143
// continue ;
51141: GO 51031
// h := hex [ 2 ] ;
51143: LD_ADDR_VAR 0 13
51147: PUSH
51148: LD_VAR 0 4
51152: PUSH
51153: LD_INT 2
51155: ARRAY
51156: ST_TO_ADDR
// if h + 7 < height then
51157: LD_VAR 0 13
51161: PUSH
51162: LD_INT 7
51164: PLUS
51165: PUSH
51166: LD_VAR 0 15
51170: LESS
51171: IFFALSE 51200
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51173: LD_ADDR_VAR 0 18
51177: PUSH
51178: LD_INT 7
51180: PUSH
51181: LD_INT 28
51183: PUSH
51184: LD_INT 45
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: PUSH
51192: LD_VAR 0 12
51196: ARRAY
51197: ST_TO_ADDR
// break ;
51198: GO 51202
// end ; end ; end ;
51200: GO 51031
51202: POP
51203: POP
// end ; if not weapon then
51204: LD_VAR 0 18
51208: NOT
51209: IFFALSE 51269
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51211: LD_ADDR_VAR 0 5
51215: PUSH
51216: LD_VAR 0 5
51220: PUSH
51221: LD_INT 11
51223: PUSH
51224: LD_INT 30
51226: PUSH
51227: LD_INT 49
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: DIFF
51235: ST_TO_ADDR
// if not list then
51236: LD_VAR 0 5
51240: NOT
51241: IFFALSE 51245
// exit ;
51243: GO 51387
// weapon := list [ rand ( 1 , list ) ] ;
51245: LD_ADDR_VAR 0 18
51249: PUSH
51250: LD_VAR 0 5
51254: PUSH
51255: LD_INT 1
51257: PPUSH
51258: LD_VAR 0 5
51262: PPUSH
51263: CALL_OW 12
51267: ARRAY
51268: ST_TO_ADDR
// end ; if weapon then
51269: LD_VAR 0 18
51273: IFFALSE 51387
// begin tmp := CostOfWeapon ( weapon ) ;
51275: LD_ADDR_VAR 0 14
51279: PUSH
51280: LD_VAR 0 18
51284: PPUSH
51285: CALL_OW 451
51289: ST_TO_ADDR
// j := GetBase ( tower ) ;
51290: LD_ADDR_VAR 0 9
51294: PUSH
51295: LD_VAR 0 1
51299: PPUSH
51300: CALL_OW 274
51304: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51305: LD_VAR 0 9
51309: PPUSH
51310: LD_INT 1
51312: PPUSH
51313: CALL_OW 275
51317: PUSH
51318: LD_VAR 0 14
51322: PUSH
51323: LD_INT 1
51325: ARRAY
51326: GREATEREQUAL
51327: PUSH
51328: LD_VAR 0 9
51332: PPUSH
51333: LD_INT 2
51335: PPUSH
51336: CALL_OW 275
51340: PUSH
51341: LD_VAR 0 14
51345: PUSH
51346: LD_INT 2
51348: ARRAY
51349: GREATEREQUAL
51350: AND
51351: PUSH
51352: LD_VAR 0 9
51356: PPUSH
51357: LD_INT 3
51359: PPUSH
51360: CALL_OW 275
51364: PUSH
51365: LD_VAR 0 14
51369: PUSH
51370: LD_INT 3
51372: ARRAY
51373: GREATEREQUAL
51374: AND
51375: IFFALSE 51387
// result := weapon ;
51377: LD_ADDR_VAR 0 3
51381: PUSH
51382: LD_VAR 0 18
51386: ST_TO_ADDR
// end ; end ;
51387: LD_VAR 0 3
51391: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51392: LD_INT 0
51394: PPUSH
51395: PPUSH
// result := true ;
51396: LD_ADDR_VAR 0 3
51400: PUSH
51401: LD_INT 1
51403: ST_TO_ADDR
// if array1 = array2 then
51404: LD_VAR 0 1
51408: PUSH
51409: LD_VAR 0 2
51413: EQUAL
51414: IFFALSE 51474
// begin for i = 1 to array1 do
51416: LD_ADDR_VAR 0 4
51420: PUSH
51421: DOUBLE
51422: LD_INT 1
51424: DEC
51425: ST_TO_ADDR
51426: LD_VAR 0 1
51430: PUSH
51431: FOR_TO
51432: IFFALSE 51470
// if array1 [ i ] <> array2 [ i ] then
51434: LD_VAR 0 1
51438: PUSH
51439: LD_VAR 0 4
51443: ARRAY
51444: PUSH
51445: LD_VAR 0 2
51449: PUSH
51450: LD_VAR 0 4
51454: ARRAY
51455: NONEQUAL
51456: IFFALSE 51468
// begin result := false ;
51458: LD_ADDR_VAR 0 3
51462: PUSH
51463: LD_INT 0
51465: ST_TO_ADDR
// break ;
51466: GO 51470
// end ;
51468: GO 51431
51470: POP
51471: POP
// end else
51472: GO 51482
// result := false ;
51474: LD_ADDR_VAR 0 3
51478: PUSH
51479: LD_INT 0
51481: ST_TO_ADDR
// end ;
51482: LD_VAR 0 3
51486: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51487: LD_INT 0
51489: PPUSH
51490: PPUSH
// if not array1 or not array2 then
51491: LD_VAR 0 1
51495: NOT
51496: PUSH
51497: LD_VAR 0 2
51501: NOT
51502: OR
51503: IFFALSE 51507
// exit ;
51505: GO 51571
// result := true ;
51507: LD_ADDR_VAR 0 3
51511: PUSH
51512: LD_INT 1
51514: ST_TO_ADDR
// for i = 1 to array1 do
51515: LD_ADDR_VAR 0 4
51519: PUSH
51520: DOUBLE
51521: LD_INT 1
51523: DEC
51524: ST_TO_ADDR
51525: LD_VAR 0 1
51529: PUSH
51530: FOR_TO
51531: IFFALSE 51569
// if array1 [ i ] <> array2 [ i ] then
51533: LD_VAR 0 1
51537: PUSH
51538: LD_VAR 0 4
51542: ARRAY
51543: PUSH
51544: LD_VAR 0 2
51548: PUSH
51549: LD_VAR 0 4
51553: ARRAY
51554: NONEQUAL
51555: IFFALSE 51567
// begin result := false ;
51557: LD_ADDR_VAR 0 3
51561: PUSH
51562: LD_INT 0
51564: ST_TO_ADDR
// break ;
51565: GO 51569
// end ;
51567: GO 51530
51569: POP
51570: POP
// end ;
51571: LD_VAR 0 3
51575: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51576: LD_INT 0
51578: PPUSH
51579: PPUSH
51580: PPUSH
// pom := GetBase ( fac ) ;
51581: LD_ADDR_VAR 0 5
51585: PUSH
51586: LD_VAR 0 1
51590: PPUSH
51591: CALL_OW 274
51595: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51596: LD_ADDR_VAR 0 4
51600: PUSH
51601: LD_VAR 0 2
51605: PUSH
51606: LD_INT 1
51608: ARRAY
51609: PPUSH
51610: LD_VAR 0 2
51614: PUSH
51615: LD_INT 2
51617: ARRAY
51618: PPUSH
51619: LD_VAR 0 2
51623: PUSH
51624: LD_INT 3
51626: ARRAY
51627: PPUSH
51628: LD_VAR 0 2
51632: PUSH
51633: LD_INT 4
51635: ARRAY
51636: PPUSH
51637: CALL_OW 449
51641: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51642: LD_ADDR_VAR 0 3
51646: PUSH
51647: LD_VAR 0 5
51651: PPUSH
51652: LD_INT 1
51654: PPUSH
51655: CALL_OW 275
51659: PUSH
51660: LD_VAR 0 4
51664: PUSH
51665: LD_INT 1
51667: ARRAY
51668: GREATEREQUAL
51669: PUSH
51670: LD_VAR 0 5
51674: PPUSH
51675: LD_INT 2
51677: PPUSH
51678: CALL_OW 275
51682: PUSH
51683: LD_VAR 0 4
51687: PUSH
51688: LD_INT 2
51690: ARRAY
51691: GREATEREQUAL
51692: AND
51693: PUSH
51694: LD_VAR 0 5
51698: PPUSH
51699: LD_INT 3
51701: PPUSH
51702: CALL_OW 275
51706: PUSH
51707: LD_VAR 0 4
51711: PUSH
51712: LD_INT 3
51714: ARRAY
51715: GREATEREQUAL
51716: AND
51717: ST_TO_ADDR
// end ;
51718: LD_VAR 0 3
51722: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51723: LD_INT 0
51725: PPUSH
51726: PPUSH
51727: PPUSH
51728: PPUSH
// pom := GetBase ( building ) ;
51729: LD_ADDR_VAR 0 3
51733: PUSH
51734: LD_VAR 0 1
51738: PPUSH
51739: CALL_OW 274
51743: ST_TO_ADDR
// if not pom then
51744: LD_VAR 0 3
51748: NOT
51749: IFFALSE 51753
// exit ;
51751: GO 51923
// btype := GetBType ( building ) ;
51753: LD_ADDR_VAR 0 5
51757: PUSH
51758: LD_VAR 0 1
51762: PPUSH
51763: CALL_OW 266
51767: ST_TO_ADDR
// if btype = b_armoury then
51768: LD_VAR 0 5
51772: PUSH
51773: LD_INT 4
51775: EQUAL
51776: IFFALSE 51786
// btype := b_barracks ;
51778: LD_ADDR_VAR 0 5
51782: PUSH
51783: LD_INT 5
51785: ST_TO_ADDR
// if btype = b_depot then
51786: LD_VAR 0 5
51790: PUSH
51791: LD_INT 0
51793: EQUAL
51794: IFFALSE 51804
// btype := b_warehouse ;
51796: LD_ADDR_VAR 0 5
51800: PUSH
51801: LD_INT 1
51803: ST_TO_ADDR
// if btype = b_workshop then
51804: LD_VAR 0 5
51808: PUSH
51809: LD_INT 2
51811: EQUAL
51812: IFFALSE 51822
// btype := b_factory ;
51814: LD_ADDR_VAR 0 5
51818: PUSH
51819: LD_INT 3
51821: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51822: LD_ADDR_VAR 0 4
51826: PUSH
51827: LD_VAR 0 5
51831: PPUSH
51832: LD_VAR 0 1
51836: PPUSH
51837: CALL_OW 248
51841: PPUSH
51842: CALL_OW 450
51846: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51847: LD_ADDR_VAR 0 2
51851: PUSH
51852: LD_VAR 0 3
51856: PPUSH
51857: LD_INT 1
51859: PPUSH
51860: CALL_OW 275
51864: PUSH
51865: LD_VAR 0 4
51869: PUSH
51870: LD_INT 1
51872: ARRAY
51873: GREATEREQUAL
51874: PUSH
51875: LD_VAR 0 3
51879: PPUSH
51880: LD_INT 2
51882: PPUSH
51883: CALL_OW 275
51887: PUSH
51888: LD_VAR 0 4
51892: PUSH
51893: LD_INT 2
51895: ARRAY
51896: GREATEREQUAL
51897: AND
51898: PUSH
51899: LD_VAR 0 3
51903: PPUSH
51904: LD_INT 3
51906: PPUSH
51907: CALL_OW 275
51911: PUSH
51912: LD_VAR 0 4
51916: PUSH
51917: LD_INT 3
51919: ARRAY
51920: GREATEREQUAL
51921: AND
51922: ST_TO_ADDR
// end ;
51923: LD_VAR 0 2
51927: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51928: LD_INT 0
51930: PPUSH
51931: PPUSH
51932: PPUSH
// pom := GetBase ( building ) ;
51933: LD_ADDR_VAR 0 4
51937: PUSH
51938: LD_VAR 0 1
51942: PPUSH
51943: CALL_OW 274
51947: ST_TO_ADDR
// if not pom then
51948: LD_VAR 0 4
51952: NOT
51953: IFFALSE 51957
// exit ;
51955: GO 52058
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51957: LD_ADDR_VAR 0 5
51961: PUSH
51962: LD_VAR 0 2
51966: PPUSH
51967: LD_VAR 0 1
51971: PPUSH
51972: CALL_OW 248
51976: PPUSH
51977: CALL_OW 450
51981: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51982: LD_ADDR_VAR 0 3
51986: PUSH
51987: LD_VAR 0 4
51991: PPUSH
51992: LD_INT 1
51994: PPUSH
51995: CALL_OW 275
51999: PUSH
52000: LD_VAR 0 5
52004: PUSH
52005: LD_INT 1
52007: ARRAY
52008: GREATEREQUAL
52009: PUSH
52010: LD_VAR 0 4
52014: PPUSH
52015: LD_INT 2
52017: PPUSH
52018: CALL_OW 275
52022: PUSH
52023: LD_VAR 0 5
52027: PUSH
52028: LD_INT 2
52030: ARRAY
52031: GREATEREQUAL
52032: AND
52033: PUSH
52034: LD_VAR 0 4
52038: PPUSH
52039: LD_INT 3
52041: PPUSH
52042: CALL_OW 275
52046: PUSH
52047: LD_VAR 0 5
52051: PUSH
52052: LD_INT 3
52054: ARRAY
52055: GREATEREQUAL
52056: AND
52057: ST_TO_ADDR
// end ;
52058: LD_VAR 0 3
52062: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52063: LD_INT 0
52065: PPUSH
52066: PPUSH
52067: PPUSH
52068: PPUSH
52069: PPUSH
52070: PPUSH
52071: PPUSH
52072: PPUSH
52073: PPUSH
52074: PPUSH
52075: PPUSH
// result := false ;
52076: LD_ADDR_VAR 0 8
52080: PUSH
52081: LD_INT 0
52083: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52084: LD_VAR 0 5
52088: NOT
52089: PUSH
52090: LD_VAR 0 1
52094: NOT
52095: OR
52096: PUSH
52097: LD_VAR 0 2
52101: NOT
52102: OR
52103: PUSH
52104: LD_VAR 0 3
52108: NOT
52109: OR
52110: IFFALSE 52114
// exit ;
52112: GO 52928
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52114: LD_ADDR_VAR 0 14
52118: PUSH
52119: LD_VAR 0 1
52123: PPUSH
52124: LD_VAR 0 2
52128: PPUSH
52129: LD_VAR 0 3
52133: PPUSH
52134: LD_VAR 0 4
52138: PPUSH
52139: LD_VAR 0 5
52143: PUSH
52144: LD_INT 1
52146: ARRAY
52147: PPUSH
52148: CALL_OW 248
52152: PPUSH
52153: LD_INT 0
52155: PPUSH
52156: CALL 54161 0 6
52160: ST_TO_ADDR
// if not hexes then
52161: LD_VAR 0 14
52165: NOT
52166: IFFALSE 52170
// exit ;
52168: GO 52928
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52170: LD_ADDR_VAR 0 17
52174: PUSH
52175: LD_VAR 0 5
52179: PPUSH
52180: LD_INT 22
52182: PUSH
52183: LD_VAR 0 13
52187: PPUSH
52188: CALL_OW 255
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: LD_INT 30
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 30
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: LIST
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PPUSH
52229: CALL_OW 72
52233: ST_TO_ADDR
// for i = 1 to hexes do
52234: LD_ADDR_VAR 0 9
52238: PUSH
52239: DOUBLE
52240: LD_INT 1
52242: DEC
52243: ST_TO_ADDR
52244: LD_VAR 0 14
52248: PUSH
52249: FOR_TO
52250: IFFALSE 52926
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52252: LD_ADDR_VAR 0 13
52256: PUSH
52257: LD_VAR 0 14
52261: PUSH
52262: LD_VAR 0 9
52266: ARRAY
52267: PUSH
52268: LD_INT 1
52270: ARRAY
52271: PPUSH
52272: LD_VAR 0 14
52276: PUSH
52277: LD_VAR 0 9
52281: ARRAY
52282: PUSH
52283: LD_INT 2
52285: ARRAY
52286: PPUSH
52287: CALL_OW 428
52291: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52292: LD_VAR 0 14
52296: PUSH
52297: LD_VAR 0 9
52301: ARRAY
52302: PUSH
52303: LD_INT 1
52305: ARRAY
52306: PPUSH
52307: LD_VAR 0 14
52311: PUSH
52312: LD_VAR 0 9
52316: ARRAY
52317: PUSH
52318: LD_INT 2
52320: ARRAY
52321: PPUSH
52322: CALL_OW 351
52326: PUSH
52327: LD_VAR 0 14
52331: PUSH
52332: LD_VAR 0 9
52336: ARRAY
52337: PUSH
52338: LD_INT 1
52340: ARRAY
52341: PPUSH
52342: LD_VAR 0 14
52346: PUSH
52347: LD_VAR 0 9
52351: ARRAY
52352: PUSH
52353: LD_INT 2
52355: ARRAY
52356: PPUSH
52357: CALL_OW 488
52361: NOT
52362: OR
52363: PUSH
52364: LD_VAR 0 13
52368: PPUSH
52369: CALL_OW 247
52373: PUSH
52374: LD_INT 3
52376: EQUAL
52377: OR
52378: IFFALSE 52384
// exit ;
52380: POP
52381: POP
52382: GO 52928
// if not tmp then
52384: LD_VAR 0 13
52388: NOT
52389: IFFALSE 52393
// continue ;
52391: GO 52249
// result := true ;
52393: LD_ADDR_VAR 0 8
52397: PUSH
52398: LD_INT 1
52400: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52401: LD_VAR 0 6
52405: PUSH
52406: LD_VAR 0 13
52410: PPUSH
52411: CALL_OW 247
52415: PUSH
52416: LD_INT 2
52418: EQUAL
52419: AND
52420: PUSH
52421: LD_VAR 0 13
52425: PPUSH
52426: CALL_OW 263
52430: PUSH
52431: LD_INT 1
52433: EQUAL
52434: AND
52435: IFFALSE 52599
// begin if IsDrivenBy ( tmp ) then
52437: LD_VAR 0 13
52441: PPUSH
52442: CALL_OW 311
52446: IFFALSE 52450
// continue ;
52448: GO 52249
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52450: LD_VAR 0 6
52454: PPUSH
52455: LD_INT 3
52457: PUSH
52458: LD_INT 60
52460: PUSH
52461: EMPTY
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 3
52470: PUSH
52471: LD_INT 55
52473: PUSH
52474: EMPTY
52475: LIST
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PPUSH
52485: CALL_OW 72
52489: IFFALSE 52597
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52491: LD_ADDR_VAR 0 18
52495: PUSH
52496: LD_VAR 0 6
52500: PPUSH
52501: LD_INT 3
52503: PUSH
52504: LD_INT 60
52506: PUSH
52507: EMPTY
52508: LIST
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: PUSH
52517: LD_INT 55
52519: PUSH
52520: EMPTY
52521: LIST
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PPUSH
52531: CALL_OW 72
52535: PUSH
52536: LD_INT 1
52538: ARRAY
52539: ST_TO_ADDR
// if IsInUnit ( driver ) then
52540: LD_VAR 0 18
52544: PPUSH
52545: CALL_OW 310
52549: IFFALSE 52560
// ComExit ( driver ) ;
52551: LD_VAR 0 18
52555: PPUSH
52556: CALL 77941 0 1
// AddComEnterUnit ( driver , tmp ) ;
52560: LD_VAR 0 18
52564: PPUSH
52565: LD_VAR 0 13
52569: PPUSH
52570: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52574: LD_VAR 0 18
52578: PPUSH
52579: LD_VAR 0 7
52583: PPUSH
52584: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52588: LD_VAR 0 18
52592: PPUSH
52593: CALL_OW 181
// end ; continue ;
52597: GO 52249
// end ; if not cleaners or not tmp in cleaners then
52599: LD_VAR 0 6
52603: NOT
52604: PUSH
52605: LD_VAR 0 13
52609: PUSH
52610: LD_VAR 0 6
52614: IN
52615: NOT
52616: OR
52617: IFFALSE 52924
// begin if dep then
52619: LD_VAR 0 17
52623: IFFALSE 52759
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52625: LD_ADDR_VAR 0 16
52629: PUSH
52630: LD_VAR 0 17
52634: PUSH
52635: LD_INT 1
52637: ARRAY
52638: PPUSH
52639: CALL_OW 250
52643: PPUSH
52644: LD_VAR 0 17
52648: PUSH
52649: LD_INT 1
52651: ARRAY
52652: PPUSH
52653: CALL_OW 254
52657: PPUSH
52658: LD_INT 5
52660: PPUSH
52661: CALL_OW 272
52665: PUSH
52666: LD_VAR 0 17
52670: PUSH
52671: LD_INT 1
52673: ARRAY
52674: PPUSH
52675: CALL_OW 251
52679: PPUSH
52680: LD_VAR 0 17
52684: PUSH
52685: LD_INT 1
52687: ARRAY
52688: PPUSH
52689: CALL_OW 254
52693: PPUSH
52694: LD_INT 5
52696: PPUSH
52697: CALL_OW 273
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52706: LD_VAR 0 16
52710: PUSH
52711: LD_INT 1
52713: ARRAY
52714: PPUSH
52715: LD_VAR 0 16
52719: PUSH
52720: LD_INT 2
52722: ARRAY
52723: PPUSH
52724: CALL_OW 488
52728: IFFALSE 52759
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52730: LD_VAR 0 13
52734: PPUSH
52735: LD_VAR 0 16
52739: PUSH
52740: LD_INT 1
52742: ARRAY
52743: PPUSH
52744: LD_VAR 0 16
52748: PUSH
52749: LD_INT 2
52751: ARRAY
52752: PPUSH
52753: CALL_OW 111
// continue ;
52757: GO 52249
// end ; end ; r := GetDir ( tmp ) ;
52759: LD_ADDR_VAR 0 15
52763: PUSH
52764: LD_VAR 0 13
52768: PPUSH
52769: CALL_OW 254
52773: ST_TO_ADDR
// if r = 5 then
52774: LD_VAR 0 15
52778: PUSH
52779: LD_INT 5
52781: EQUAL
52782: IFFALSE 52792
// r := 0 ;
52784: LD_ADDR_VAR 0 15
52788: PUSH
52789: LD_INT 0
52791: ST_TO_ADDR
// for j = r to 5 do
52792: LD_ADDR_VAR 0 10
52796: PUSH
52797: DOUBLE
52798: LD_VAR 0 15
52802: DEC
52803: ST_TO_ADDR
52804: LD_INT 5
52806: PUSH
52807: FOR_TO
52808: IFFALSE 52922
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52810: LD_ADDR_VAR 0 11
52814: PUSH
52815: LD_VAR 0 13
52819: PPUSH
52820: CALL_OW 250
52824: PPUSH
52825: LD_VAR 0 10
52829: PPUSH
52830: LD_INT 2
52832: PPUSH
52833: CALL_OW 272
52837: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52838: LD_ADDR_VAR 0 12
52842: PUSH
52843: LD_VAR 0 13
52847: PPUSH
52848: CALL_OW 251
52852: PPUSH
52853: LD_VAR 0 10
52857: PPUSH
52858: LD_INT 2
52860: PPUSH
52861: CALL_OW 273
52865: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52866: LD_VAR 0 11
52870: PPUSH
52871: LD_VAR 0 12
52875: PPUSH
52876: CALL_OW 488
52880: PUSH
52881: LD_VAR 0 11
52885: PPUSH
52886: LD_VAR 0 12
52890: PPUSH
52891: CALL_OW 428
52895: NOT
52896: AND
52897: IFFALSE 52920
// begin ComMoveXY ( tmp , _x , _y ) ;
52899: LD_VAR 0 13
52903: PPUSH
52904: LD_VAR 0 11
52908: PPUSH
52909: LD_VAR 0 12
52913: PPUSH
52914: CALL_OW 111
// break ;
52918: GO 52922
// end ; end ;
52920: GO 52807
52922: POP
52923: POP
// end ; end ;
52924: GO 52249
52926: POP
52927: POP
// end ;
52928: LD_VAR 0 8
52932: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52933: LD_INT 0
52935: PPUSH
// result := true ;
52936: LD_ADDR_VAR 0 3
52940: PUSH
52941: LD_INT 1
52943: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52944: LD_VAR 0 2
52948: PUSH
52949: LD_INT 24
52951: DOUBLE
52952: EQUAL
52953: IFTRUE 52963
52955: LD_INT 33
52957: DOUBLE
52958: EQUAL
52959: IFTRUE 52963
52961: GO 52988
52963: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52964: LD_ADDR_VAR 0 3
52968: PUSH
52969: LD_INT 32
52971: PPUSH
52972: LD_VAR 0 1
52976: PPUSH
52977: CALL_OW 321
52981: PUSH
52982: LD_INT 2
52984: EQUAL
52985: ST_TO_ADDR
52986: GO 53304
52988: LD_INT 20
52990: DOUBLE
52991: EQUAL
52992: IFTRUE 52996
52994: GO 53021
52996: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52997: LD_ADDR_VAR 0 3
53001: PUSH
53002: LD_INT 6
53004: PPUSH
53005: LD_VAR 0 1
53009: PPUSH
53010: CALL_OW 321
53014: PUSH
53015: LD_INT 2
53017: EQUAL
53018: ST_TO_ADDR
53019: GO 53304
53021: LD_INT 22
53023: DOUBLE
53024: EQUAL
53025: IFTRUE 53035
53027: LD_INT 36
53029: DOUBLE
53030: EQUAL
53031: IFTRUE 53035
53033: GO 53060
53035: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53036: LD_ADDR_VAR 0 3
53040: PUSH
53041: LD_INT 15
53043: PPUSH
53044: LD_VAR 0 1
53048: PPUSH
53049: CALL_OW 321
53053: PUSH
53054: LD_INT 2
53056: EQUAL
53057: ST_TO_ADDR
53058: GO 53304
53060: LD_INT 30
53062: DOUBLE
53063: EQUAL
53064: IFTRUE 53068
53066: GO 53093
53068: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53069: LD_ADDR_VAR 0 3
53073: PUSH
53074: LD_INT 20
53076: PPUSH
53077: LD_VAR 0 1
53081: PPUSH
53082: CALL_OW 321
53086: PUSH
53087: LD_INT 2
53089: EQUAL
53090: ST_TO_ADDR
53091: GO 53304
53093: LD_INT 28
53095: DOUBLE
53096: EQUAL
53097: IFTRUE 53107
53099: LD_INT 21
53101: DOUBLE
53102: EQUAL
53103: IFTRUE 53107
53105: GO 53132
53107: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53108: LD_ADDR_VAR 0 3
53112: PUSH
53113: LD_INT 21
53115: PPUSH
53116: LD_VAR 0 1
53120: PPUSH
53121: CALL_OW 321
53125: PUSH
53126: LD_INT 2
53128: EQUAL
53129: ST_TO_ADDR
53130: GO 53304
53132: LD_INT 16
53134: DOUBLE
53135: EQUAL
53136: IFTRUE 53140
53138: GO 53165
53140: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53141: LD_ADDR_VAR 0 3
53145: PUSH
53146: LD_INT 84
53148: PPUSH
53149: LD_VAR 0 1
53153: PPUSH
53154: CALL_OW 321
53158: PUSH
53159: LD_INT 2
53161: EQUAL
53162: ST_TO_ADDR
53163: GO 53304
53165: LD_INT 19
53167: DOUBLE
53168: EQUAL
53169: IFTRUE 53179
53171: LD_INT 23
53173: DOUBLE
53174: EQUAL
53175: IFTRUE 53179
53177: GO 53204
53179: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53180: LD_ADDR_VAR 0 3
53184: PUSH
53185: LD_INT 83
53187: PPUSH
53188: LD_VAR 0 1
53192: PPUSH
53193: CALL_OW 321
53197: PUSH
53198: LD_INT 2
53200: EQUAL
53201: ST_TO_ADDR
53202: GO 53304
53204: LD_INT 17
53206: DOUBLE
53207: EQUAL
53208: IFTRUE 53212
53210: GO 53237
53212: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53213: LD_ADDR_VAR 0 3
53217: PUSH
53218: LD_INT 39
53220: PPUSH
53221: LD_VAR 0 1
53225: PPUSH
53226: CALL_OW 321
53230: PUSH
53231: LD_INT 2
53233: EQUAL
53234: ST_TO_ADDR
53235: GO 53304
53237: LD_INT 18
53239: DOUBLE
53240: EQUAL
53241: IFTRUE 53245
53243: GO 53270
53245: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53246: LD_ADDR_VAR 0 3
53250: PUSH
53251: LD_INT 40
53253: PPUSH
53254: LD_VAR 0 1
53258: PPUSH
53259: CALL_OW 321
53263: PUSH
53264: LD_INT 2
53266: EQUAL
53267: ST_TO_ADDR
53268: GO 53304
53270: LD_INT 27
53272: DOUBLE
53273: EQUAL
53274: IFTRUE 53278
53276: GO 53303
53278: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53279: LD_ADDR_VAR 0 3
53283: PUSH
53284: LD_INT 35
53286: PPUSH
53287: LD_VAR 0 1
53291: PPUSH
53292: CALL_OW 321
53296: PUSH
53297: LD_INT 2
53299: EQUAL
53300: ST_TO_ADDR
53301: GO 53304
53303: POP
// end ;
53304: LD_VAR 0 3
53308: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53309: LD_INT 0
53311: PPUSH
53312: PPUSH
53313: PPUSH
53314: PPUSH
53315: PPUSH
53316: PPUSH
53317: PPUSH
53318: PPUSH
53319: PPUSH
53320: PPUSH
53321: PPUSH
// result := false ;
53322: LD_ADDR_VAR 0 6
53326: PUSH
53327: LD_INT 0
53329: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53330: LD_VAR 0 1
53334: NOT
53335: PUSH
53336: LD_VAR 0 1
53340: PPUSH
53341: CALL_OW 266
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: IN
53356: NOT
53357: OR
53358: PUSH
53359: LD_VAR 0 2
53363: NOT
53364: OR
53365: PUSH
53366: LD_VAR 0 5
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: LD_INT 3
53382: PUSH
53383: LD_INT 4
53385: PUSH
53386: LD_INT 5
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: IN
53397: NOT
53398: OR
53399: PUSH
53400: LD_VAR 0 3
53404: PPUSH
53405: LD_VAR 0 4
53409: PPUSH
53410: CALL_OW 488
53414: NOT
53415: OR
53416: IFFALSE 53420
// exit ;
53418: GO 54156
// side := GetSide ( depot ) ;
53420: LD_ADDR_VAR 0 9
53424: PUSH
53425: LD_VAR 0 1
53429: PPUSH
53430: CALL_OW 255
53434: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53435: LD_VAR 0 9
53439: PPUSH
53440: LD_VAR 0 2
53444: PPUSH
53445: CALL 52933 0 2
53449: NOT
53450: IFFALSE 53454
// exit ;
53452: GO 54156
// pom := GetBase ( depot ) ;
53454: LD_ADDR_VAR 0 10
53458: PUSH
53459: LD_VAR 0 1
53463: PPUSH
53464: CALL_OW 274
53468: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53469: LD_ADDR_VAR 0 11
53473: PUSH
53474: LD_VAR 0 2
53478: PPUSH
53479: LD_VAR 0 1
53483: PPUSH
53484: CALL_OW 248
53488: PPUSH
53489: CALL_OW 450
53493: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53494: LD_VAR 0 10
53498: PPUSH
53499: LD_INT 1
53501: PPUSH
53502: CALL_OW 275
53506: PUSH
53507: LD_VAR 0 11
53511: PUSH
53512: LD_INT 1
53514: ARRAY
53515: GREATEREQUAL
53516: PUSH
53517: LD_VAR 0 10
53521: PPUSH
53522: LD_INT 2
53524: PPUSH
53525: CALL_OW 275
53529: PUSH
53530: LD_VAR 0 11
53534: PUSH
53535: LD_INT 2
53537: ARRAY
53538: GREATEREQUAL
53539: AND
53540: PUSH
53541: LD_VAR 0 10
53545: PPUSH
53546: LD_INT 3
53548: PPUSH
53549: CALL_OW 275
53553: PUSH
53554: LD_VAR 0 11
53558: PUSH
53559: LD_INT 3
53561: ARRAY
53562: GREATEREQUAL
53563: AND
53564: NOT
53565: IFFALSE 53569
// exit ;
53567: GO 54156
// if GetBType ( depot ) = b_depot then
53569: LD_VAR 0 1
53573: PPUSH
53574: CALL_OW 266
53578: PUSH
53579: LD_INT 0
53581: EQUAL
53582: IFFALSE 53594
// dist := 28 else
53584: LD_ADDR_VAR 0 14
53588: PUSH
53589: LD_INT 28
53591: ST_TO_ADDR
53592: GO 53602
// dist := 36 ;
53594: LD_ADDR_VAR 0 14
53598: PUSH
53599: LD_INT 36
53601: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53602: LD_VAR 0 1
53606: PPUSH
53607: LD_VAR 0 3
53611: PPUSH
53612: LD_VAR 0 4
53616: PPUSH
53617: CALL_OW 297
53621: PUSH
53622: LD_VAR 0 14
53626: GREATER
53627: IFFALSE 53631
// exit ;
53629: GO 54156
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53631: LD_ADDR_VAR 0 12
53635: PUSH
53636: LD_VAR 0 2
53640: PPUSH
53641: LD_VAR 0 3
53645: PPUSH
53646: LD_VAR 0 4
53650: PPUSH
53651: LD_VAR 0 5
53655: PPUSH
53656: LD_VAR 0 1
53660: PPUSH
53661: CALL_OW 248
53665: PPUSH
53666: LD_INT 0
53668: PPUSH
53669: CALL 54161 0 6
53673: ST_TO_ADDR
// if not hexes then
53674: LD_VAR 0 12
53678: NOT
53679: IFFALSE 53683
// exit ;
53681: GO 54156
// hex := GetHexInfo ( x , y ) ;
53683: LD_ADDR_VAR 0 15
53687: PUSH
53688: LD_VAR 0 3
53692: PPUSH
53693: LD_VAR 0 4
53697: PPUSH
53698: CALL_OW 546
53702: ST_TO_ADDR
// if hex [ 1 ] then
53703: LD_VAR 0 15
53707: PUSH
53708: LD_INT 1
53710: ARRAY
53711: IFFALSE 53715
// exit ;
53713: GO 54156
// height := hex [ 2 ] ;
53715: LD_ADDR_VAR 0 13
53719: PUSH
53720: LD_VAR 0 15
53724: PUSH
53725: LD_INT 2
53727: ARRAY
53728: ST_TO_ADDR
// for i = 1 to hexes do
53729: LD_ADDR_VAR 0 7
53733: PUSH
53734: DOUBLE
53735: LD_INT 1
53737: DEC
53738: ST_TO_ADDR
53739: LD_VAR 0 12
53743: PUSH
53744: FOR_TO
53745: IFFALSE 54075
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53747: LD_VAR 0 12
53751: PUSH
53752: LD_VAR 0 7
53756: ARRAY
53757: PUSH
53758: LD_INT 1
53760: ARRAY
53761: PPUSH
53762: LD_VAR 0 12
53766: PUSH
53767: LD_VAR 0 7
53771: ARRAY
53772: PUSH
53773: LD_INT 2
53775: ARRAY
53776: PPUSH
53777: CALL_OW 488
53781: NOT
53782: PUSH
53783: LD_VAR 0 12
53787: PUSH
53788: LD_VAR 0 7
53792: ARRAY
53793: PUSH
53794: LD_INT 1
53796: ARRAY
53797: PPUSH
53798: LD_VAR 0 12
53802: PUSH
53803: LD_VAR 0 7
53807: ARRAY
53808: PUSH
53809: LD_INT 2
53811: ARRAY
53812: PPUSH
53813: CALL_OW 428
53817: PUSH
53818: LD_INT 0
53820: GREATER
53821: OR
53822: PUSH
53823: LD_VAR 0 12
53827: PUSH
53828: LD_VAR 0 7
53832: ARRAY
53833: PUSH
53834: LD_INT 1
53836: ARRAY
53837: PPUSH
53838: LD_VAR 0 12
53842: PUSH
53843: LD_VAR 0 7
53847: ARRAY
53848: PUSH
53849: LD_INT 2
53851: ARRAY
53852: PPUSH
53853: CALL_OW 351
53857: OR
53858: IFFALSE 53864
// exit ;
53860: POP
53861: POP
53862: GO 54156
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53864: LD_ADDR_VAR 0 8
53868: PUSH
53869: LD_VAR 0 12
53873: PUSH
53874: LD_VAR 0 7
53878: ARRAY
53879: PUSH
53880: LD_INT 1
53882: ARRAY
53883: PPUSH
53884: LD_VAR 0 12
53888: PUSH
53889: LD_VAR 0 7
53893: ARRAY
53894: PUSH
53895: LD_INT 2
53897: ARRAY
53898: PPUSH
53899: CALL_OW 546
53903: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53904: LD_VAR 0 8
53908: PUSH
53909: LD_INT 1
53911: ARRAY
53912: PUSH
53913: LD_VAR 0 8
53917: PUSH
53918: LD_INT 2
53920: ARRAY
53921: PUSH
53922: LD_VAR 0 13
53926: PUSH
53927: LD_INT 2
53929: PLUS
53930: GREATER
53931: OR
53932: PUSH
53933: LD_VAR 0 8
53937: PUSH
53938: LD_INT 2
53940: ARRAY
53941: PUSH
53942: LD_VAR 0 13
53946: PUSH
53947: LD_INT 2
53949: MINUS
53950: LESS
53951: OR
53952: PUSH
53953: LD_VAR 0 8
53957: PUSH
53958: LD_INT 3
53960: ARRAY
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 8
53967: PUSH
53968: LD_INT 9
53970: PUSH
53971: LD_INT 10
53973: PUSH
53974: LD_INT 11
53976: PUSH
53977: LD_INT 12
53979: PUSH
53980: LD_INT 13
53982: PUSH
53983: LD_INT 16
53985: PUSH
53986: LD_INT 17
53988: PUSH
53989: LD_INT 18
53991: PUSH
53992: LD_INT 19
53994: PUSH
53995: LD_INT 20
53997: PUSH
53998: LD_INT 21
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: IN
54016: NOT
54017: OR
54018: PUSH
54019: LD_VAR 0 8
54023: PUSH
54024: LD_INT 5
54026: ARRAY
54027: NOT
54028: OR
54029: PUSH
54030: LD_VAR 0 8
54034: PUSH
54035: LD_INT 6
54037: ARRAY
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 7
54047: PUSH
54048: LD_INT 9
54050: PUSH
54051: LD_INT 10
54053: PUSH
54054: LD_INT 11
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: IN
54065: NOT
54066: OR
54067: IFFALSE 54073
// exit ;
54069: POP
54070: POP
54071: GO 54156
// end ;
54073: GO 53744
54075: POP
54076: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54077: LD_VAR 0 9
54081: PPUSH
54082: LD_VAR 0 3
54086: PPUSH
54087: LD_VAR 0 4
54091: PPUSH
54092: LD_INT 20
54094: PPUSH
54095: CALL 46108 0 4
54099: PUSH
54100: LD_INT 4
54102: ARRAY
54103: IFFALSE 54107
// exit ;
54105: GO 54156
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54107: LD_VAR 0 2
54111: PUSH
54112: LD_INT 29
54114: PUSH
54115: LD_INT 30
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: IN
54122: PUSH
54123: LD_VAR 0 3
54127: PPUSH
54128: LD_VAR 0 4
54132: PPUSH
54133: LD_VAR 0 9
54137: PPUSH
54138: CALL_OW 440
54142: NOT
54143: AND
54144: IFFALSE 54148
// exit ;
54146: GO 54156
// result := true ;
54148: LD_ADDR_VAR 0 6
54152: PUSH
54153: LD_INT 1
54155: ST_TO_ADDR
// end ;
54156: LD_VAR 0 6
54160: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54161: LD_INT 0
54163: PPUSH
54164: PPUSH
54165: PPUSH
54166: PPUSH
54167: PPUSH
54168: PPUSH
54169: PPUSH
54170: PPUSH
54171: PPUSH
54172: PPUSH
54173: PPUSH
54174: PPUSH
54175: PPUSH
54176: PPUSH
54177: PPUSH
54178: PPUSH
54179: PPUSH
54180: PPUSH
54181: PPUSH
54182: PPUSH
54183: PPUSH
54184: PPUSH
54185: PPUSH
54186: PPUSH
54187: PPUSH
54188: PPUSH
54189: PPUSH
54190: PPUSH
54191: PPUSH
54192: PPUSH
54193: PPUSH
54194: PPUSH
54195: PPUSH
54196: PPUSH
54197: PPUSH
54198: PPUSH
54199: PPUSH
54200: PPUSH
54201: PPUSH
54202: PPUSH
54203: PPUSH
54204: PPUSH
54205: PPUSH
54206: PPUSH
54207: PPUSH
54208: PPUSH
54209: PPUSH
54210: PPUSH
54211: PPUSH
54212: PPUSH
54213: PPUSH
54214: PPUSH
54215: PPUSH
54216: PPUSH
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
// result = [ ] ;
54221: LD_ADDR_VAR 0 7
54225: PUSH
54226: EMPTY
54227: ST_TO_ADDR
// temp_list = [ ] ;
54228: LD_ADDR_VAR 0 9
54232: PUSH
54233: EMPTY
54234: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54235: LD_VAR 0 4
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 2
54248: PUSH
54249: LD_INT 3
54251: PUSH
54252: LD_INT 4
54254: PUSH
54255: LD_INT 5
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: IN
54266: NOT
54267: PUSH
54268: LD_VAR 0 1
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: IN
54283: PUSH
54284: LD_VAR 0 5
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: IN
54303: NOT
54304: AND
54305: OR
54306: IFFALSE 54310
// exit ;
54308: GO 72701
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54310: LD_VAR 0 1
54314: PUSH
54315: LD_INT 6
54317: PUSH
54318: LD_INT 7
54320: PUSH
54321: LD_INT 8
54323: PUSH
54324: LD_INT 13
54326: PUSH
54327: LD_INT 12
54329: PUSH
54330: LD_INT 15
54332: PUSH
54333: LD_INT 11
54335: PUSH
54336: LD_INT 14
54338: PUSH
54339: LD_INT 10
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: IN
54353: IFFALSE 54363
// btype = b_lab ;
54355: LD_ADDR_VAR 0 1
54359: PUSH
54360: LD_INT 6
54362: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54363: LD_VAR 0 6
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: LIST
54381: IN
54382: NOT
54383: PUSH
54384: LD_VAR 0 1
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: LD_INT 2
54397: PUSH
54398: LD_INT 3
54400: PUSH
54401: LD_INT 6
54403: PUSH
54404: LD_INT 36
54406: PUSH
54407: LD_INT 4
54409: PUSH
54410: LD_INT 5
54412: PUSH
54413: LD_INT 31
54415: PUSH
54416: LD_INT 32
54418: PUSH
54419: LD_INT 33
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: IN
54435: NOT
54436: PUSH
54437: LD_VAR 0 6
54441: PUSH
54442: LD_INT 1
54444: EQUAL
54445: AND
54446: OR
54447: PUSH
54448: LD_VAR 0 1
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 3
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: IN
54463: NOT
54464: PUSH
54465: LD_VAR 0 6
54469: PUSH
54470: LD_INT 2
54472: EQUAL
54473: AND
54474: OR
54475: IFFALSE 54485
// mode = 0 ;
54477: LD_ADDR_VAR 0 6
54481: PUSH
54482: LD_INT 0
54484: ST_TO_ADDR
// case mode of 0 :
54485: LD_VAR 0 6
54489: PUSH
54490: LD_INT 0
54492: DOUBLE
54493: EQUAL
54494: IFTRUE 54498
54496: GO 65951
54498: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54499: LD_ADDR_VAR 0 11
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 3
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 3
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54692: LD_ADDR_VAR 0 12
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: NEG
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 3
54849: NEG
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 3
54860: NEG
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54888: LD_ADDR_VAR 0 13
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: LD_INT 3
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 3
55059: NEG
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55087: LD_ADDR_VAR 0 14
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 2
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: LD_INT 3
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 3
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55283: LD_ADDR_VAR 0 15
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 2
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55476: LD_ADDR_VAR 0 16
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 3
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 3
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55669: LD_ADDR_VAR 0 17
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55899: LD_ADDR_VAR 0 18
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 2
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56129: LD_ADDR_VAR 0 19
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56359: LD_ADDR_VAR 0 20
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56589: LD_ADDR_VAR 0 21
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 2
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: PUSH
56725: LD_INT 2
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 2
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56819: LD_ADDR_VAR 0 22
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 2
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 2
57018: NEG
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57049: LD_ADDR_VAR 0 23
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 2
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 2
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 2
57248: NEG
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: LD_INT 3
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 3
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57329: LD_ADDR_VAR 0 24
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: LD_INT 2
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 2
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 2
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 2
57505: NEG
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57605: LD_ADDR_VAR 0 25
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: LD_INT 2
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 2
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 3
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57879: LD_ADDR_VAR 0 26
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 2
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 3
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: LD_INT 3
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 2
58121: NEG
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58155: LD_ADDR_VAR 0 27
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 2
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: NEG
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 3
58388: NEG
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: NEG
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58435: LD_ADDR_VAR 0 28
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: LD_INT 3
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 3
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 3
58670: NEG
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 3
58682: NEG
58683: PUSH
58684: LD_INT 2
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58717: LD_ADDR_VAR 0 29
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 2
58883: NEG
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: NEG
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 3
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: LD_INT 3
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58996: LD_ADDR_VAR 0 30
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: LD_INT 2
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 2
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: LD_INT 3
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: LD_INT 2
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 3
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 2
59218: PUSH
59219: LD_INT 3
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59274: LD_ADDR_VAR 0 31
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 2
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 2
59439: NEG
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 2
59463: NEG
59464: PUSH
59465: LD_INT 3
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: LD_INT 3
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 3
59517: NEG
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59552: LD_ADDR_VAR 0 32
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: NEG
59742: PUSH
59743: LD_INT 3
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 3
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: PUSH
59775: LD_INT 3
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 2
59784: NEG
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 3
59795: NEG
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59830: LD_ADDR_VAR 0 33
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 0
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 2
59996: NEG
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 2
60008: NEG
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: NEG
60021: PUSH
60022: LD_INT 3
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: LD_INT 3
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 3
60074: NEG
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60109: LD_ADDR_VAR 0 34
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: LD_INT 3
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 3
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: NEG
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 3
60354: NEG
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60389: LD_ADDR_VAR 0 35
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: LD_INT 1
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 2
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60501: LD_ADDR_VAR 0 36
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60613: LD_ADDR_VAR 0 37
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: LD_INT 1
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60725: LD_ADDR_VAR 0 38
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60837: LD_ADDR_VAR 0 39
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: LD_INT 2
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60949: LD_ADDR_VAR 0 40
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 1
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61061: LD_ADDR_VAR 0 41
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 2
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 2
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 2
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 2
61251: NEG
61252: PUSH
61253: LD_INT 3
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: LD_INT 1
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 3
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 3
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 3
61294: PUSH
61295: LD_INT 2
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 3
61304: PUSH
61305: LD_INT 3
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 3
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 2
61324: NEG
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 3
61335: NEG
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 3
61358: NEG
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 3
61370: NEG
61371: PUSH
61372: LD_INT 3
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61411: LD_ADDR_VAR 0 42
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 1
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: LD_INT 2
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 2
61536: PUSH
61537: LD_INT 2
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: LD_INT 1
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 2
61577: NEG
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: NEG
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: LD_INT 3
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 3
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 3
61657: PUSH
61658: LD_INT 3
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: LD_INT 3
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: LD_INT 3
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: LD_INT 3
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: LD_INT 2
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 3
61708: NEG
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: NEG
61721: PUSH
61722: LD_INT 3
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61761: LD_ADDR_VAR 0 43
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: LD_INT 2
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 2
61927: NEG
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 2
61938: NEG
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: LD_INT 3
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 3
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 3
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 3
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: NEG
62036: PUSH
62037: LD_INT 2
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 2
62046: NEG
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 3
62057: NEG
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 3
62068: NEG
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62109: LD_ADDR_VAR 0 44
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 1
62178: NEG
62179: PUSH
62180: LD_INT 1
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: LD_INT 2
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 2
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: LD_INT 2
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 2
62299: NEG
62300: PUSH
62301: LD_INT 3
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 3
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 3
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 3
62342: PUSH
62343: LD_INT 2
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 3
62352: PUSH
62353: LD_INT 3
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 2
62362: PUSH
62363: LD_INT 3
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 2
62372: NEG
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 3
62383: NEG
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 3
62394: NEG
62395: PUSH
62396: LD_INT 1
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 3
62406: NEG
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 3
62418: NEG
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62459: LD_ADDR_VAR 0 45
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 1
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 2
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 2
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 1
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 2
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 2
62584: PUSH
62585: LD_INT 2
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: LD_INT 2
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: NEG
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 2
62637: NEG
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 2
62649: NEG
62650: PUSH
62651: LD_INT 3
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 1
62661: NEG
62662: PUSH
62663: LD_INT 3
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: LD_INT 3
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 3
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 3
62705: PUSH
62706: LD_INT 3
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: LD_INT 3
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: LD_INT 3
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: LD_INT 3
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: LD_INT 2
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 3
62756: NEG
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 3
62768: NEG
62769: PUSH
62770: LD_INT 3
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62809: LD_ADDR_VAR 0 46
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: LD_INT 2
62894: NEG
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: LD_INT 2
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 2
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 2
62934: PUSH
62935: LD_INT 1
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: LD_INT 2
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: LD_INT 2
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 1
62964: NEG
62965: PUSH
62966: LD_INT 1
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 2
62975: NEG
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 2
62986: NEG
62987: PUSH
62988: LD_INT 1
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 1
62998: NEG
62999: PUSH
63000: LD_INT 3
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: LD_INT 3
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: LD_INT 2
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: PUSH
63033: LD_INT 1
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 3
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 3
63053: PUSH
63054: LD_INT 1
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: LD_INT 3
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 1
63083: NEG
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 2
63094: NEG
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 3
63105: NEG
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 3
63116: NEG
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63157: LD_ADDR_VAR 0 47
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: LD_INT 2
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 2
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: LD_INT 1
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 2
63272: NEG
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 2
63284: NEG
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63308: LD_ADDR_VAR 0 48
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: NEG
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: LD_INT 2
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: LD_INT 2
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: LD_INT 1
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63455: LD_ADDR_VAR 0 49
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: LD_INT 1
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 2
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 2
63567: PUSH
63568: LD_INT 2
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 2
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63599: LD_ADDR_VAR 0 50
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: LD_INT 1
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 1
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 1
63668: NEG
63669: PUSH
63670: LD_INT 1
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 2
63690: PUSH
63691: LD_INT 2
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: LD_INT 2
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: NEG
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63743: LD_ADDR_VAR 0 51
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: LD_INT 1
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: NEG
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: LD_INT 2
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: LD_INT 2
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 1
63844: NEG
63845: PUSH
63846: LD_INT 1
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63890: LD_ADDR_VAR 0 52
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 1
63928: PUSH
63929: LD_INT 1
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: LD_INT 2
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 2
63994: NEG
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 2
64005: NEG
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 2
64017: NEG
64018: PUSH
64019: LD_INT 2
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64041: LD_ADDR_VAR 0 53
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: LD_INT 1
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 1
64099: NEG
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: PUSH
64124: LD_INT 2
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: LD_INT 2
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 2
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: LD_INT 1
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 2
64176: PUSH
64177: LD_INT 2
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: PUSH
64187: LD_INT 2
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 2
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 2
64217: NEG
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 2
64228: NEG
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 2
64240: NEG
64241: PUSH
64242: LD_INT 2
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64271: LD_ADDR_VAR 0 54
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 1
64309: PUSH
64310: LD_INT 1
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: LD_INT 1
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: NEG
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: NEG
64353: PUSH
64354: LD_INT 2
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 2
64367: NEG
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 2
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 2
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 2
64406: PUSH
64407: LD_INT 2
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 2
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: LD_INT 1
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 2
64447: NEG
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 2
64470: NEG
64471: PUSH
64472: LD_INT 2
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64501: LD_ADDR_VAR 0 55
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 0
64518: PUSH
64519: LD_INT 1
64521: NEG
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 1
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 1
64539: PUSH
64540: LD_INT 1
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 0
64549: PUSH
64550: LD_INT 1
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: NEG
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: LD_INT 2
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: LD_INT 2
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 2
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 2
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: LD_INT 2
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: LD_INT 2
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: LD_INT 2
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: PUSH
64668: LD_INT 1
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 2
64677: NEG
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 2
64688: NEG
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 2
64700: NEG
64701: PUSH
64702: LD_INT 2
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64731: LD_ADDR_VAR 0 56
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 1
64789: NEG
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: LD_INT 2
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_INT 2
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 2
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 2
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 2
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 1
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 2
64907: NEG
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 2
64918: NEG
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 2
64930: NEG
64931: PUSH
64932: LD_INT 2
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64961: LD_ADDR_VAR 0 57
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 0
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 1
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 0
65009: PUSH
65010: LD_INT 1
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: NEG
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: LD_INT 2
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: LD_INT 2
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: LD_INT 1
65068: NEG
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 2
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 2
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 2
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: LD_INT 2
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 2
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 1
65126: NEG
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 2
65137: NEG
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 2
65148: NEG
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 2
65160: NEG
65161: PUSH
65162: LD_INT 2
65164: NEG
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65191: LD_ADDR_VAR 0 58
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 0
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: LD_INT 1
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 0
65239: PUSH
65240: LD_INT 1
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: NEG
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 1
65260: NEG
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: LD_INT 2
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 0
65284: PUSH
65285: LD_INT 2
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: LD_INT 1
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 2
65306: PUSH
65307: LD_INT 0
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 2
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 2
65326: PUSH
65327: LD_INT 2
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: LD_INT 2
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: NEG
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 2
65367: NEG
65368: PUSH
65369: LD_INT 0
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 2
65378: NEG
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 2
65390: NEG
65391: PUSH
65392: LD_INT 2
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65421: LD_ADDR_VAR 0 59
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: LD_INT 1
65441: NEG
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 1
65449: PUSH
65450: LD_INT 0
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: NEG
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: LD_INT 1
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65509: LD_ADDR_VAR 0 60
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 0
65526: PUSH
65527: LD_INT 1
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 0
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 1
65567: NEG
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 1
65578: NEG
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65597: LD_ADDR_VAR 0 61
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 1
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 1
65635: PUSH
65636: LD_INT 1
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: LD_INT 1
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: NEG
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: LD_INT 1
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65685: LD_ADDR_VAR 0 62
65689: PUSH
65690: LD_INT 0
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 0
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 1
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 1
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 1
65743: NEG
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: LD_INT 1
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65773: LD_ADDR_VAR 0 63
65777: PUSH
65778: LD_INT 0
65780: PUSH
65781: LD_INT 0
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: LD_INT 1
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 1
65801: PUSH
65802: LD_INT 0
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: LD_INT 1
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 0
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 1
65831: NEG
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: NEG
65843: PUSH
65844: LD_INT 1
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65861: LD_ADDR_VAR 0 64
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: LD_INT 0
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 1
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 1
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 1
65930: NEG
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: ST_TO_ADDR
// end ; 1 :
65949: GO 71846
65951: LD_INT 1
65953: DOUBLE
65954: EQUAL
65955: IFTRUE 65959
65957: GO 68582
65959: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65960: LD_ADDR_VAR 0 11
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: LD_INT 3
65971: NEG
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: LD_INT 3
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 1
65990: PUSH
65991: LD_INT 2
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: LIST
66003: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66004: LD_ADDR_VAR 0 12
66008: PUSH
66009: LD_INT 2
66011: PUSH
66012: LD_INT 1
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 3
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 3
66032: PUSH
66033: LD_INT 1
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: LIST
66044: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66045: LD_ADDR_VAR 0 13
66049: PUSH
66050: LD_INT 3
66052: PUSH
66053: LD_INT 2
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 3
66062: PUSH
66063: LD_INT 3
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 2
66072: PUSH
66073: LD_INT 3
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: LIST
66084: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66085: LD_ADDR_VAR 0 14
66089: PUSH
66090: LD_INT 1
66092: PUSH
66093: LD_INT 3
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: LD_INT 3
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 1
66112: NEG
66113: PUSH
66114: LD_INT 2
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: LIST
66125: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66126: LD_ADDR_VAR 0 15
66130: PUSH
66131: LD_INT 2
66133: NEG
66134: PUSH
66135: LD_INT 1
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 3
66144: NEG
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 3
66155: NEG
66156: PUSH
66157: LD_INT 1
66159: NEG
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: LIST
66169: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66170: LD_ADDR_VAR 0 16
66174: PUSH
66175: LD_INT 2
66177: NEG
66178: PUSH
66179: LD_INT 3
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 3
66189: NEG
66190: PUSH
66191: LD_INT 2
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 3
66201: NEG
66202: PUSH
66203: LD_INT 3
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: LIST
66215: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66216: LD_ADDR_VAR 0 17
66220: PUSH
66221: LD_INT 1
66223: NEG
66224: PUSH
66225: LD_INT 3
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: LD_INT 3
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 1
66246: PUSH
66247: LD_INT 2
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: LIST
66259: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66260: LD_ADDR_VAR 0 18
66264: PUSH
66265: LD_INT 2
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 3
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 3
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: LIST
66300: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66301: LD_ADDR_VAR 0 19
66305: PUSH
66306: LD_INT 3
66308: PUSH
66309: LD_INT 2
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 3
66318: PUSH
66319: LD_INT 3
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: PUSH
66329: LD_INT 3
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: LIST
66340: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66341: LD_ADDR_VAR 0 20
66345: PUSH
66346: LD_INT 1
66348: PUSH
66349: LD_INT 3
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: LD_INT 3
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 1
66368: NEG
66369: PUSH
66370: LD_INT 2
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: LIST
66381: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66382: LD_ADDR_VAR 0 21
66386: PUSH
66387: LD_INT 2
66389: NEG
66390: PUSH
66391: LD_INT 1
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 3
66400: NEG
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 3
66411: NEG
66412: PUSH
66413: LD_INT 1
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: LIST
66425: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66426: LD_ADDR_VAR 0 22
66430: PUSH
66431: LD_INT 2
66433: NEG
66434: PUSH
66435: LD_INT 3
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 3
66445: NEG
66446: PUSH
66447: LD_INT 2
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 3
66457: NEG
66458: PUSH
66459: LD_INT 3
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66472: LD_ADDR_VAR 0 23
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: LD_INT 3
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: LD_INT 4
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 1
66502: PUSH
66503: LD_INT 3
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: LIST
66515: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66516: LD_ADDR_VAR 0 24
66520: PUSH
66521: LD_INT 3
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 3
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 4
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: LIST
66556: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66557: LD_ADDR_VAR 0 25
66561: PUSH
66562: LD_INT 3
66564: PUSH
66565: LD_INT 3
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 4
66574: PUSH
66575: LD_INT 3
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 3
66584: PUSH
66585: LD_INT 4
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66597: LD_ADDR_VAR 0 26
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: LD_INT 4
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 1
66624: NEG
66625: PUSH
66626: LD_INT 3
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: LIST
66637: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66638: LD_ADDR_VAR 0 27
66642: PUSH
66643: LD_INT 3
66645: NEG
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 3
66656: NEG
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 4
66667: NEG
66668: PUSH
66669: LD_INT 1
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: LIST
66681: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66682: LD_ADDR_VAR 0 28
66686: PUSH
66687: LD_INT 3
66689: NEG
66690: PUSH
66691: LD_INT 3
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 3
66701: NEG
66702: PUSH
66703: LD_INT 4
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 4
66713: NEG
66714: PUSH
66715: LD_INT 3
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66728: LD_ADDR_VAR 0 29
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: LD_INT 3
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: LD_INT 3
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: LD_INT 2
66761: NEG
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: PUSH
66771: LD_INT 4
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 0
66781: PUSH
66782: LD_INT 4
66784: NEG
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 1
66792: PUSH
66793: LD_INT 3
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 1
66803: NEG
66804: PUSH
66805: LD_INT 5
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: LD_INT 5
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: LD_INT 4
66829: NEG
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 1
66837: NEG
66838: PUSH
66839: LD_INT 6
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 0
66849: PUSH
66850: LD_INT 6
66852: NEG
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 1
66860: PUSH
66861: LD_INT 5
66863: NEG
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66883: LD_ADDR_VAR 0 30
66887: PUSH
66888: LD_INT 2
66890: PUSH
66891: LD_INT 1
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 3
66901: PUSH
66902: LD_INT 0
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 3
66911: PUSH
66912: LD_INT 1
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 3
66921: PUSH
66922: LD_INT 1
66924: NEG
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 4
66932: PUSH
66933: LD_INT 0
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 4
66942: PUSH
66943: LD_INT 1
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 4
66952: PUSH
66953: LD_INT 1
66955: NEG
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 5
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 5
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 5
66983: PUSH
66984: LD_INT 1
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 6
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 6
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67026: LD_ADDR_VAR 0 31
67030: PUSH
67031: LD_INT 3
67033: PUSH
67034: LD_INT 2
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 3
67043: PUSH
67044: LD_INT 3
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 2
67053: PUSH
67054: LD_INT 3
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 4
67063: PUSH
67064: LD_INT 3
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 4
67073: PUSH
67074: LD_INT 4
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 3
67083: PUSH
67084: LD_INT 4
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 5
67093: PUSH
67094: LD_INT 4
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 5
67103: PUSH
67104: LD_INT 5
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 4
67113: PUSH
67114: LD_INT 5
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 6
67123: PUSH
67124: LD_INT 5
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 6
67133: PUSH
67134: LD_INT 6
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 5
67143: PUSH
67144: LD_INT 6
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67165: LD_ADDR_VAR 0 32
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: LD_INT 3
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 0
67182: PUSH
67183: LD_INT 3
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 1
67192: NEG
67193: PUSH
67194: LD_INT 2
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 1
67203: PUSH
67204: LD_INT 4
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 0
67213: PUSH
67214: LD_INT 4
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 1
67223: NEG
67224: PUSH
67225: LD_INT 3
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 1
67234: PUSH
67235: LD_INT 5
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 0
67244: PUSH
67245: LD_INT 5
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 1
67254: NEG
67255: PUSH
67256: LD_INT 4
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 1
67265: PUSH
67266: LD_INT 6
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: LD_INT 6
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 1
67285: NEG
67286: PUSH
67287: LD_INT 5
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67308: LD_ADDR_VAR 0 33
67312: PUSH
67313: LD_INT 2
67315: NEG
67316: PUSH
67317: LD_INT 1
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 3
67326: NEG
67327: PUSH
67328: LD_INT 0
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 3
67337: NEG
67338: PUSH
67339: LD_INT 1
67341: NEG
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 3
67349: NEG
67350: PUSH
67351: LD_INT 1
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 4
67360: NEG
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 4
67371: NEG
67372: PUSH
67373: LD_INT 1
67375: NEG
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 4
67383: NEG
67384: PUSH
67385: LD_INT 1
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 5
67394: NEG
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 5
67405: NEG
67406: PUSH
67407: LD_INT 1
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 5
67417: NEG
67418: PUSH
67419: LD_INT 1
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 6
67428: NEG
67429: PUSH
67430: LD_INT 0
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 6
67439: NEG
67440: PUSH
67441: LD_INT 1
67443: NEG
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67463: LD_ADDR_VAR 0 34
67467: PUSH
67468: LD_INT 2
67470: NEG
67471: PUSH
67472: LD_INT 3
67474: NEG
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 3
67482: NEG
67483: PUSH
67484: LD_INT 2
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 3
67494: NEG
67495: PUSH
67496: LD_INT 3
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 3
67506: NEG
67507: PUSH
67508: LD_INT 4
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 4
67518: NEG
67519: PUSH
67520: LD_INT 3
67522: NEG
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 4
67530: NEG
67531: PUSH
67532: LD_INT 4
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 4
67542: NEG
67543: PUSH
67544: LD_INT 5
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 5
67554: NEG
67555: PUSH
67556: LD_INT 4
67558: NEG
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 5
67566: NEG
67567: PUSH
67568: LD_INT 5
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 5
67578: NEG
67579: PUSH
67580: LD_INT 6
67582: NEG
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 6
67590: NEG
67591: PUSH
67592: LD_INT 5
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 6
67602: NEG
67603: PUSH
67604: LD_INT 6
67606: NEG
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67626: LD_ADDR_VAR 0 41
67630: PUSH
67631: LD_INT 0
67633: PUSH
67634: LD_INT 2
67636: NEG
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 1
67644: NEG
67645: PUSH
67646: LD_INT 3
67648: NEG
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 1
67656: PUSH
67657: LD_INT 2
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: LIST
67669: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67670: LD_ADDR_VAR 0 42
67674: PUSH
67675: LD_INT 2
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 2
67687: PUSH
67688: LD_INT 1
67690: NEG
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 3
67698: PUSH
67699: LD_INT 1
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: LIST
67710: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67711: LD_ADDR_VAR 0 43
67715: PUSH
67716: LD_INT 2
67718: PUSH
67719: LD_INT 2
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 3
67728: PUSH
67729: LD_INT 2
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 2
67738: PUSH
67739: LD_INT 3
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: LIST
67750: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67751: LD_ADDR_VAR 0 44
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: LD_INT 2
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 1
67768: PUSH
67769: LD_INT 3
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 1
67778: NEG
67779: PUSH
67780: LD_INT 2
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: LIST
67791: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67792: LD_ADDR_VAR 0 45
67796: PUSH
67797: LD_INT 2
67799: NEG
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 2
67810: NEG
67811: PUSH
67812: LD_INT 1
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 3
67821: NEG
67822: PUSH
67823: LD_INT 1
67825: NEG
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: LIST
67835: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67836: LD_ADDR_VAR 0 46
67840: PUSH
67841: LD_INT 2
67843: NEG
67844: PUSH
67845: LD_INT 2
67847: NEG
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 2
67855: NEG
67856: PUSH
67857: LD_INT 3
67859: NEG
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 3
67867: NEG
67868: PUSH
67869: LD_INT 2
67871: NEG
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: LIST
67881: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67882: LD_ADDR_VAR 0 47
67886: PUSH
67887: LD_INT 2
67889: NEG
67890: PUSH
67891: LD_INT 3
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: LD_INT 3
67905: NEG
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67915: LD_ADDR_VAR 0 48
67919: PUSH
67920: LD_INT 1
67922: PUSH
67923: LD_INT 2
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 2
67933: PUSH
67934: LD_INT 1
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67946: LD_ADDR_VAR 0 49
67950: PUSH
67951: LD_INT 3
67953: PUSH
67954: LD_INT 1
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 3
67963: PUSH
67964: LD_INT 2
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67975: LD_ADDR_VAR 0 50
67979: PUSH
67980: LD_INT 2
67982: PUSH
67983: LD_INT 3
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 1
67992: PUSH
67993: LD_INT 3
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68004: LD_ADDR_VAR 0 51
68008: PUSH
68009: LD_INT 1
68011: NEG
68012: PUSH
68013: LD_INT 2
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 2
68022: NEG
68023: PUSH
68024: LD_INT 1
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68035: LD_ADDR_VAR 0 52
68039: PUSH
68040: LD_INT 3
68042: NEG
68043: PUSH
68044: LD_INT 1
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 3
68054: NEG
68055: PUSH
68056: LD_INT 2
68058: NEG
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68068: LD_ADDR_VAR 0 53
68072: PUSH
68073: LD_INT 1
68075: NEG
68076: PUSH
68077: LD_INT 3
68079: NEG
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: LD_INT 3
68090: NEG
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 1
68098: PUSH
68099: LD_INT 2
68101: NEG
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: LIST
68111: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68112: LD_ADDR_VAR 0 54
68116: PUSH
68117: LD_INT 2
68119: PUSH
68120: LD_INT 1
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 3
68130: PUSH
68131: LD_INT 0
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: LIST
68152: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68153: LD_ADDR_VAR 0 55
68157: PUSH
68158: LD_INT 3
68160: PUSH
68161: LD_INT 2
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 3
68170: PUSH
68171: LD_INT 3
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 2
68180: PUSH
68181: LD_INT 3
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: LIST
68192: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68193: LD_ADDR_VAR 0 56
68197: PUSH
68198: LD_INT 1
68200: PUSH
68201: LD_INT 3
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 0
68210: PUSH
68211: LD_INT 3
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 1
68220: NEG
68221: PUSH
68222: LD_INT 2
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: LIST
68233: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68234: LD_ADDR_VAR 0 57
68238: PUSH
68239: LD_INT 2
68241: NEG
68242: PUSH
68243: LD_INT 1
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 3
68252: NEG
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 3
68263: NEG
68264: PUSH
68265: LD_INT 1
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: LIST
68277: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68278: LD_ADDR_VAR 0 58
68282: PUSH
68283: LD_INT 2
68285: NEG
68286: PUSH
68287: LD_INT 3
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 3
68297: NEG
68298: PUSH
68299: LD_INT 2
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 3
68309: NEG
68310: PUSH
68311: LD_INT 3
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: LIST
68323: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68324: LD_ADDR_VAR 0 59
68328: PUSH
68329: LD_INT 1
68331: NEG
68332: PUSH
68333: LD_INT 2
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 0
68343: PUSH
68344: LD_INT 2
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 1
68354: PUSH
68355: LD_INT 1
68357: NEG
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: LIST
68367: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68368: LD_ADDR_VAR 0 60
68372: PUSH
68373: LD_INT 1
68375: PUSH
68376: LD_INT 1
68378: NEG
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 2
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 2
68396: PUSH
68397: LD_INT 1
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: LIST
68408: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68409: LD_ADDR_VAR 0 61
68413: PUSH
68414: LD_INT 2
68416: PUSH
68417: LD_INT 1
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 2
68426: PUSH
68427: LD_INT 2
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 1
68436: PUSH
68437: LD_INT 2
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: LIST
68448: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68449: LD_ADDR_VAR 0 62
68453: PUSH
68454: LD_INT 1
68456: PUSH
68457: LD_INT 2
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: LD_INT 2
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 1
68476: NEG
68477: PUSH
68478: LD_INT 1
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: LIST
68489: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68490: LD_ADDR_VAR 0 63
68494: PUSH
68495: LD_INT 1
68497: NEG
68498: PUSH
68499: LD_INT 1
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 2
68508: NEG
68509: PUSH
68510: LD_INT 0
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 2
68519: NEG
68520: PUSH
68521: LD_INT 1
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: LIST
68533: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68534: LD_ADDR_VAR 0 64
68538: PUSH
68539: LD_INT 1
68541: NEG
68542: PUSH
68543: LD_INT 2
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 2
68553: NEG
68554: PUSH
68555: LD_INT 1
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 2
68565: NEG
68566: PUSH
68567: LD_INT 2
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: LIST
68579: ST_TO_ADDR
// end ; 2 :
68580: GO 71846
68582: LD_INT 2
68584: DOUBLE
68585: EQUAL
68586: IFTRUE 68590
68588: GO 71845
68590: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68591: LD_ADDR_VAR 0 29
68595: PUSH
68596: LD_INT 4
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 4
68608: PUSH
68609: LD_INT 1
68611: NEG
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 5
68619: PUSH
68620: LD_INT 0
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 5
68629: PUSH
68630: LD_INT 1
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 4
68639: PUSH
68640: LD_INT 1
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 3
68649: PUSH
68650: LD_INT 0
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 3
68659: PUSH
68660: LD_INT 1
68662: NEG
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 3
68670: PUSH
68671: LD_INT 2
68673: NEG
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 5
68681: PUSH
68682: LD_INT 2
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 3
68691: PUSH
68692: LD_INT 3
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 3
68701: PUSH
68702: LD_INT 2
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 4
68711: PUSH
68712: LD_INT 3
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 4
68721: PUSH
68722: LD_INT 4
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 3
68731: PUSH
68732: LD_INT 4
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 2
68741: PUSH
68742: LD_INT 3
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 2
68751: PUSH
68752: LD_INT 2
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 4
68761: PUSH
68762: LD_INT 2
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 2
68771: PUSH
68772: LD_INT 4
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 0
68781: PUSH
68782: LD_INT 4
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 0
68791: PUSH
68792: LD_INT 3
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 1
68801: PUSH
68802: LD_INT 4
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 1
68811: PUSH
68812: LD_INT 5
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 0
68821: PUSH
68822: LD_INT 5
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 1
68831: NEG
68832: PUSH
68833: LD_INT 4
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 1
68842: NEG
68843: PUSH
68844: LD_INT 3
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 2
68853: PUSH
68854: LD_INT 5
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 2
68863: NEG
68864: PUSH
68865: LD_INT 3
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 3
68874: NEG
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 3
68885: NEG
68886: PUSH
68887: LD_INT 1
68889: NEG
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 2
68897: NEG
68898: PUSH
68899: LD_INT 0
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 2
68908: NEG
68909: PUSH
68910: LD_INT 1
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 3
68919: NEG
68920: PUSH
68921: LD_INT 1
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 4
68930: NEG
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 4
68941: NEG
68942: PUSH
68943: LD_INT 1
68945: NEG
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 4
68953: NEG
68954: PUSH
68955: LD_INT 2
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 2
68965: NEG
68966: PUSH
68967: LD_INT 2
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 4
68976: NEG
68977: PUSH
68978: LD_INT 4
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 4
68988: NEG
68989: PUSH
68990: LD_INT 5
68992: NEG
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 3
69000: NEG
69001: PUSH
69002: LD_INT 4
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 3
69012: NEG
69013: PUSH
69014: LD_INT 3
69016: NEG
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 4
69024: NEG
69025: PUSH
69026: LD_INT 3
69028: NEG
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 5
69036: NEG
69037: PUSH
69038: LD_INT 4
69040: NEG
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 5
69048: NEG
69049: PUSH
69050: LD_INT 5
69052: NEG
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 3
69060: NEG
69061: PUSH
69062: LD_INT 5
69064: NEG
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 5
69072: NEG
69073: PUSH
69074: LD_INT 3
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69129: LD_ADDR_VAR 0 30
69133: PUSH
69134: LD_INT 4
69136: PUSH
69137: LD_INT 4
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 4
69146: PUSH
69147: LD_INT 3
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 5
69156: PUSH
69157: LD_INT 4
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 5
69166: PUSH
69167: LD_INT 5
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 4
69176: PUSH
69177: LD_INT 5
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 3
69186: PUSH
69187: LD_INT 4
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 3
69196: PUSH
69197: LD_INT 3
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 5
69206: PUSH
69207: LD_INT 3
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 3
69216: PUSH
69217: LD_INT 5
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: LD_INT 3
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 0
69236: PUSH
69237: LD_INT 2
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 1
69246: PUSH
69247: LD_INT 3
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 1
69256: PUSH
69257: LD_INT 4
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 0
69266: PUSH
69267: LD_INT 4
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 1
69276: NEG
69277: PUSH
69278: LD_INT 3
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 1
69287: NEG
69288: PUSH
69289: LD_INT 2
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 2
69298: PUSH
69299: LD_INT 4
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 2
69308: NEG
69309: PUSH
69310: LD_INT 2
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 4
69319: NEG
69320: PUSH
69321: LD_INT 0
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: LD_INT 4
69330: NEG
69331: PUSH
69332: LD_INT 1
69334: NEG
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 3
69342: NEG
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 3
69353: NEG
69354: PUSH
69355: LD_INT 1
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 4
69364: NEG
69365: PUSH
69366: LD_INT 1
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 5
69375: NEG
69376: PUSH
69377: LD_INT 0
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 5
69386: NEG
69387: PUSH
69388: LD_INT 1
69390: NEG
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 5
69398: NEG
69399: PUSH
69400: LD_INT 2
69402: NEG
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 3
69410: NEG
69411: PUSH
69412: LD_INT 2
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 3
69421: NEG
69422: PUSH
69423: LD_INT 3
69425: NEG
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 3
69433: NEG
69434: PUSH
69435: LD_INT 4
69437: NEG
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 2
69445: NEG
69446: PUSH
69447: LD_INT 3
69449: NEG
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 2
69457: NEG
69458: PUSH
69459: LD_INT 2
69461: NEG
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 3
69469: NEG
69470: PUSH
69471: LD_INT 2
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 4
69481: NEG
69482: PUSH
69483: LD_INT 3
69485: NEG
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 4
69493: NEG
69494: PUSH
69495: LD_INT 4
69497: NEG
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 2
69505: NEG
69506: PUSH
69507: LD_INT 4
69509: NEG
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 4
69517: NEG
69518: PUSH
69519: LD_INT 2
69521: NEG
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 0
69529: PUSH
69530: LD_INT 4
69532: NEG
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 0
69540: PUSH
69541: LD_INT 5
69543: NEG
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 1
69551: PUSH
69552: LD_INT 4
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 1
69562: PUSH
69563: LD_INT 3
69565: NEG
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 0
69573: PUSH
69574: LD_INT 3
69576: NEG
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 1
69584: NEG
69585: PUSH
69586: LD_INT 4
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 1
69596: NEG
69597: PUSH
69598: LD_INT 5
69600: NEG
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 2
69608: PUSH
69609: LD_INT 3
69611: NEG
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 2
69619: NEG
69620: PUSH
69621: LD_INT 5
69623: NEG
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69676: LD_ADDR_VAR 0 31
69680: PUSH
69681: LD_INT 0
69683: PUSH
69684: LD_INT 4
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 0
69693: PUSH
69694: LD_INT 3
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 1
69703: PUSH
69704: LD_INT 4
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 1
69713: PUSH
69714: LD_INT 5
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 0
69723: PUSH
69724: LD_INT 5
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 1
69733: NEG
69734: PUSH
69735: LD_INT 4
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 1
69744: NEG
69745: PUSH
69746: LD_INT 3
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 2
69755: PUSH
69756: LD_INT 5
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 2
69765: NEG
69766: PUSH
69767: LD_INT 3
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 3
69776: NEG
69777: PUSH
69778: LD_INT 0
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 3
69787: NEG
69788: PUSH
69789: LD_INT 1
69791: NEG
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 2
69799: NEG
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 2
69810: NEG
69811: PUSH
69812: LD_INT 1
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 3
69821: NEG
69822: PUSH
69823: LD_INT 1
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 4
69832: NEG
69833: PUSH
69834: LD_INT 0
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 4
69843: NEG
69844: PUSH
69845: LD_INT 1
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 4
69855: NEG
69856: PUSH
69857: LD_INT 2
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 2
69867: NEG
69868: PUSH
69869: LD_INT 2
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 4
69878: NEG
69879: PUSH
69880: LD_INT 4
69882: NEG
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 4
69890: NEG
69891: PUSH
69892: LD_INT 5
69894: NEG
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 3
69902: NEG
69903: PUSH
69904: LD_INT 4
69906: NEG
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 3
69914: NEG
69915: PUSH
69916: LD_INT 3
69918: NEG
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 4
69926: NEG
69927: PUSH
69928: LD_INT 3
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 5
69938: NEG
69939: PUSH
69940: LD_INT 4
69942: NEG
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 5
69950: NEG
69951: PUSH
69952: LD_INT 5
69954: NEG
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 3
69962: NEG
69963: PUSH
69964: LD_INT 5
69966: NEG
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 5
69974: NEG
69975: PUSH
69976: LD_INT 3
69978: NEG
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 0
69986: PUSH
69987: LD_INT 3
69989: NEG
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 0
69997: PUSH
69998: LD_INT 4
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 1
70008: PUSH
70009: LD_INT 3
70011: NEG
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 1
70019: PUSH
70020: LD_INT 2
70022: NEG
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 0
70030: PUSH
70031: LD_INT 2
70033: NEG
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 1
70041: NEG
70042: PUSH
70043: LD_INT 3
70045: NEG
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 1
70053: NEG
70054: PUSH
70055: LD_INT 4
70057: NEG
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 2
70065: PUSH
70066: LD_INT 2
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 2
70076: NEG
70077: PUSH
70078: LD_INT 4
70080: NEG
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 4
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 4
70098: PUSH
70099: LD_INT 1
70101: NEG
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 5
70109: PUSH
70110: LD_INT 0
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 5
70119: PUSH
70120: LD_INT 1
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 4
70129: PUSH
70130: LD_INT 1
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 3
70139: PUSH
70140: LD_INT 0
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 3
70149: PUSH
70150: LD_INT 1
70152: NEG
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 3
70160: PUSH
70161: LD_INT 2
70163: NEG
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 5
70171: PUSH
70172: LD_INT 2
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70226: LD_ADDR_VAR 0 32
70230: PUSH
70231: LD_INT 4
70233: NEG
70234: PUSH
70235: LD_INT 0
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 4
70244: NEG
70245: PUSH
70246: LD_INT 1
70248: NEG
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 3
70256: NEG
70257: PUSH
70258: LD_INT 0
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 3
70267: NEG
70268: PUSH
70269: LD_INT 1
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 4
70278: NEG
70279: PUSH
70280: LD_INT 1
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 5
70289: NEG
70290: PUSH
70291: LD_INT 0
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 5
70300: NEG
70301: PUSH
70302: LD_INT 1
70304: NEG
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 5
70312: NEG
70313: PUSH
70314: LD_INT 2
70316: NEG
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 3
70324: NEG
70325: PUSH
70326: LD_INT 2
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 3
70335: NEG
70336: PUSH
70337: LD_INT 3
70339: NEG
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 3
70347: NEG
70348: PUSH
70349: LD_INT 4
70351: NEG
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 2
70359: NEG
70360: PUSH
70361: LD_INT 3
70363: NEG
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 2
70371: NEG
70372: PUSH
70373: LD_INT 2
70375: NEG
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 3
70383: NEG
70384: PUSH
70385: LD_INT 2
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 4
70395: NEG
70396: PUSH
70397: LD_INT 3
70399: NEG
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 4
70407: NEG
70408: PUSH
70409: LD_INT 4
70411: NEG
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: LD_INT 2
70419: NEG
70420: PUSH
70421: LD_INT 4
70423: NEG
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 4
70431: NEG
70432: PUSH
70433: LD_INT 2
70435: NEG
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 0
70443: PUSH
70444: LD_INT 4
70446: NEG
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 0
70454: PUSH
70455: LD_INT 5
70457: NEG
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 1
70465: PUSH
70466: LD_INT 4
70468: NEG
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 1
70476: PUSH
70477: LD_INT 3
70479: NEG
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 0
70487: PUSH
70488: LD_INT 3
70490: NEG
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: LD_INT 1
70498: NEG
70499: PUSH
70500: LD_INT 4
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 1
70510: NEG
70511: PUSH
70512: LD_INT 5
70514: NEG
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 2
70522: PUSH
70523: LD_INT 3
70525: NEG
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 2
70533: NEG
70534: PUSH
70535: LD_INT 5
70537: NEG
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 3
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 3
70555: PUSH
70556: LD_INT 1
70558: NEG
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 4
70566: PUSH
70567: LD_INT 0
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 4
70576: PUSH
70577: LD_INT 1
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 3
70586: PUSH
70587: LD_INT 1
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 2
70596: PUSH
70597: LD_INT 0
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 2
70606: PUSH
70607: LD_INT 1
70609: NEG
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 2
70617: PUSH
70618: LD_INT 2
70620: NEG
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 4
70628: PUSH
70629: LD_INT 2
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 4
70638: PUSH
70639: LD_INT 4
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 4
70648: PUSH
70649: LD_INT 3
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 5
70658: PUSH
70659: LD_INT 4
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 5
70668: PUSH
70669: LD_INT 5
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 4
70678: PUSH
70679: LD_INT 5
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 3
70688: PUSH
70689: LD_INT 4
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 3
70698: PUSH
70699: LD_INT 3
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 5
70708: PUSH
70709: LD_INT 3
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 3
70718: PUSH
70719: LD_INT 5
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70773: LD_ADDR_VAR 0 33
70777: PUSH
70778: LD_INT 4
70780: NEG
70781: PUSH
70782: LD_INT 4
70784: NEG
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 4
70792: NEG
70793: PUSH
70794: LD_INT 5
70796: NEG
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 3
70804: NEG
70805: PUSH
70806: LD_INT 4
70808: NEG
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 3
70816: NEG
70817: PUSH
70818: LD_INT 3
70820: NEG
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 4
70828: NEG
70829: PUSH
70830: LD_INT 3
70832: NEG
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 5
70840: NEG
70841: PUSH
70842: LD_INT 4
70844: NEG
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 5
70852: NEG
70853: PUSH
70854: LD_INT 5
70856: NEG
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 3
70864: NEG
70865: PUSH
70866: LD_INT 5
70868: NEG
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 5
70876: NEG
70877: PUSH
70878: LD_INT 3
70880: NEG
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 0
70888: PUSH
70889: LD_INT 3
70891: NEG
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 0
70899: PUSH
70900: LD_INT 4
70902: NEG
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 1
70910: PUSH
70911: LD_INT 3
70913: NEG
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 1
70921: PUSH
70922: LD_INT 2
70924: NEG
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 0
70932: PUSH
70933: LD_INT 2
70935: NEG
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 1
70943: NEG
70944: PUSH
70945: LD_INT 3
70947: NEG
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 1
70955: NEG
70956: PUSH
70957: LD_INT 4
70959: NEG
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 2
70967: PUSH
70968: LD_INT 2
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 2
70978: NEG
70979: PUSH
70980: LD_INT 4
70982: NEG
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 4
70990: PUSH
70991: LD_INT 0
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 4
71000: PUSH
71001: LD_INT 1
71003: NEG
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 5
71011: PUSH
71012: LD_INT 0
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 5
71021: PUSH
71022: LD_INT 1
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 4
71031: PUSH
71032: LD_INT 1
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: LD_INT 3
71041: PUSH
71042: LD_INT 0
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 3
71051: PUSH
71052: LD_INT 1
71054: NEG
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 3
71062: PUSH
71063: LD_INT 2
71065: NEG
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 5
71073: PUSH
71074: LD_INT 2
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 3
71083: PUSH
71084: LD_INT 3
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 3
71093: PUSH
71094: LD_INT 2
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 4
71103: PUSH
71104: LD_INT 3
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 4
71113: PUSH
71114: LD_INT 4
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 3
71123: PUSH
71124: LD_INT 4
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 2
71133: PUSH
71134: LD_INT 3
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 2
71143: PUSH
71144: LD_INT 2
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 4
71153: PUSH
71154: LD_INT 2
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 2
71163: PUSH
71164: LD_INT 4
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 0
71173: PUSH
71174: LD_INT 4
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 0
71183: PUSH
71184: LD_INT 3
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 1
71193: PUSH
71194: LD_INT 4
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: LD_INT 1
71203: PUSH
71204: LD_INT 5
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 0
71213: PUSH
71214: LD_INT 5
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 1
71223: NEG
71224: PUSH
71225: LD_INT 4
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 1
71234: NEG
71235: PUSH
71236: LD_INT 3
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 2
71245: PUSH
71246: LD_INT 5
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 2
71255: NEG
71256: PUSH
71257: LD_INT 3
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71311: LD_ADDR_VAR 0 34
71315: PUSH
71316: LD_INT 0
71318: PUSH
71319: LD_INT 4
71321: NEG
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 0
71329: PUSH
71330: LD_INT 5
71332: NEG
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 1
71340: PUSH
71341: LD_INT 4
71343: NEG
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 1
71351: PUSH
71352: LD_INT 3
71354: NEG
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 0
71362: PUSH
71363: LD_INT 3
71365: NEG
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 1
71373: NEG
71374: PUSH
71375: LD_INT 4
71377: NEG
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: LD_INT 1
71385: NEG
71386: PUSH
71387: LD_INT 5
71389: NEG
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 2
71397: PUSH
71398: LD_INT 3
71400: NEG
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 2
71408: NEG
71409: PUSH
71410: LD_INT 5
71412: NEG
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 3
71420: PUSH
71421: LD_INT 0
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 3
71430: PUSH
71431: LD_INT 1
71433: NEG
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 4
71441: PUSH
71442: LD_INT 0
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 4
71451: PUSH
71452: LD_INT 1
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 3
71461: PUSH
71462: LD_INT 1
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 2
71471: PUSH
71472: LD_INT 0
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 2
71481: PUSH
71482: LD_INT 1
71484: NEG
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 2
71492: PUSH
71493: LD_INT 2
71495: NEG
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: LD_INT 4
71503: PUSH
71504: LD_INT 2
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 4
71513: PUSH
71514: LD_INT 4
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 4
71523: PUSH
71524: LD_INT 3
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 5
71533: PUSH
71534: LD_INT 4
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 5
71543: PUSH
71544: LD_INT 5
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 4
71553: PUSH
71554: LD_INT 5
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 3
71563: PUSH
71564: LD_INT 4
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 3
71573: PUSH
71574: LD_INT 3
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 5
71583: PUSH
71584: LD_INT 3
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 3
71593: PUSH
71594: LD_INT 5
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 0
71603: PUSH
71604: LD_INT 3
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 0
71613: PUSH
71614: LD_INT 2
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 1
71623: PUSH
71624: LD_INT 3
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 1
71633: PUSH
71634: LD_INT 4
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 0
71643: PUSH
71644: LD_INT 4
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PUSH
71651: LD_INT 1
71653: NEG
71654: PUSH
71655: LD_INT 3
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: PUSH
71662: LD_INT 1
71664: NEG
71665: PUSH
71666: LD_INT 2
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 2
71675: PUSH
71676: LD_INT 4
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 2
71685: NEG
71686: PUSH
71687: LD_INT 2
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 4
71696: NEG
71697: PUSH
71698: LD_INT 0
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 4
71707: NEG
71708: PUSH
71709: LD_INT 1
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 3
71719: NEG
71720: PUSH
71721: LD_INT 0
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 3
71730: NEG
71731: PUSH
71732: LD_INT 1
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 4
71741: NEG
71742: PUSH
71743: LD_INT 1
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 5
71752: NEG
71753: PUSH
71754: LD_INT 0
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 5
71763: NEG
71764: PUSH
71765: LD_INT 1
71767: NEG
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 5
71775: NEG
71776: PUSH
71777: LD_INT 2
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 3
71787: NEG
71788: PUSH
71789: LD_INT 2
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: ST_TO_ADDR
// end ; end ;
71843: GO 71846
71845: POP
// case btype of b_depot , b_warehouse :
71846: LD_VAR 0 1
71850: PUSH
71851: LD_INT 0
71853: DOUBLE
71854: EQUAL
71855: IFTRUE 71865
71857: LD_INT 1
71859: DOUBLE
71860: EQUAL
71861: IFTRUE 71865
71863: GO 72066
71865: POP
// case nation of nation_american :
71866: LD_VAR 0 5
71870: PUSH
71871: LD_INT 1
71873: DOUBLE
71874: EQUAL
71875: IFTRUE 71879
71877: GO 71935
71879: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71880: LD_ADDR_VAR 0 9
71884: PUSH
71885: LD_VAR 0 11
71889: PUSH
71890: LD_VAR 0 12
71894: PUSH
71895: LD_VAR 0 13
71899: PUSH
71900: LD_VAR 0 14
71904: PUSH
71905: LD_VAR 0 15
71909: PUSH
71910: LD_VAR 0 16
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: PUSH
71923: LD_VAR 0 4
71927: PUSH
71928: LD_INT 1
71930: PLUS
71931: ARRAY
71932: ST_TO_ADDR
71933: GO 72064
71935: LD_INT 2
71937: DOUBLE
71938: EQUAL
71939: IFTRUE 71943
71941: GO 71999
71943: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71944: LD_ADDR_VAR 0 9
71948: PUSH
71949: LD_VAR 0 17
71953: PUSH
71954: LD_VAR 0 18
71958: PUSH
71959: LD_VAR 0 19
71963: PUSH
71964: LD_VAR 0 20
71968: PUSH
71969: LD_VAR 0 21
71973: PUSH
71974: LD_VAR 0 22
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: PUSH
71987: LD_VAR 0 4
71991: PUSH
71992: LD_INT 1
71994: PLUS
71995: ARRAY
71996: ST_TO_ADDR
71997: GO 72064
71999: LD_INT 3
72001: DOUBLE
72002: EQUAL
72003: IFTRUE 72007
72005: GO 72063
72007: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72008: LD_ADDR_VAR 0 9
72012: PUSH
72013: LD_VAR 0 23
72017: PUSH
72018: LD_VAR 0 24
72022: PUSH
72023: LD_VAR 0 25
72027: PUSH
72028: LD_VAR 0 26
72032: PUSH
72033: LD_VAR 0 27
72037: PUSH
72038: LD_VAR 0 28
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: PUSH
72051: LD_VAR 0 4
72055: PUSH
72056: LD_INT 1
72058: PLUS
72059: ARRAY
72060: ST_TO_ADDR
72061: GO 72064
72063: POP
72064: GO 72619
72066: LD_INT 2
72068: DOUBLE
72069: EQUAL
72070: IFTRUE 72080
72072: LD_INT 3
72074: DOUBLE
72075: EQUAL
72076: IFTRUE 72080
72078: GO 72136
72080: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72081: LD_ADDR_VAR 0 9
72085: PUSH
72086: LD_VAR 0 29
72090: PUSH
72091: LD_VAR 0 30
72095: PUSH
72096: LD_VAR 0 31
72100: PUSH
72101: LD_VAR 0 32
72105: PUSH
72106: LD_VAR 0 33
72110: PUSH
72111: LD_VAR 0 34
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: PUSH
72124: LD_VAR 0 4
72128: PUSH
72129: LD_INT 1
72131: PLUS
72132: ARRAY
72133: ST_TO_ADDR
72134: GO 72619
72136: LD_INT 16
72138: DOUBLE
72139: EQUAL
72140: IFTRUE 72198
72142: LD_INT 17
72144: DOUBLE
72145: EQUAL
72146: IFTRUE 72198
72148: LD_INT 18
72150: DOUBLE
72151: EQUAL
72152: IFTRUE 72198
72154: LD_INT 19
72156: DOUBLE
72157: EQUAL
72158: IFTRUE 72198
72160: LD_INT 22
72162: DOUBLE
72163: EQUAL
72164: IFTRUE 72198
72166: LD_INT 20
72168: DOUBLE
72169: EQUAL
72170: IFTRUE 72198
72172: LD_INT 21
72174: DOUBLE
72175: EQUAL
72176: IFTRUE 72198
72178: LD_INT 23
72180: DOUBLE
72181: EQUAL
72182: IFTRUE 72198
72184: LD_INT 24
72186: DOUBLE
72187: EQUAL
72188: IFTRUE 72198
72190: LD_INT 25
72192: DOUBLE
72193: EQUAL
72194: IFTRUE 72198
72196: GO 72254
72198: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72199: LD_ADDR_VAR 0 9
72203: PUSH
72204: LD_VAR 0 35
72208: PUSH
72209: LD_VAR 0 36
72213: PUSH
72214: LD_VAR 0 37
72218: PUSH
72219: LD_VAR 0 38
72223: PUSH
72224: LD_VAR 0 39
72228: PUSH
72229: LD_VAR 0 40
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: PUSH
72242: LD_VAR 0 4
72246: PUSH
72247: LD_INT 1
72249: PLUS
72250: ARRAY
72251: ST_TO_ADDR
72252: GO 72619
72254: LD_INT 6
72256: DOUBLE
72257: EQUAL
72258: IFTRUE 72310
72260: LD_INT 7
72262: DOUBLE
72263: EQUAL
72264: IFTRUE 72310
72266: LD_INT 8
72268: DOUBLE
72269: EQUAL
72270: IFTRUE 72310
72272: LD_INT 13
72274: DOUBLE
72275: EQUAL
72276: IFTRUE 72310
72278: LD_INT 12
72280: DOUBLE
72281: EQUAL
72282: IFTRUE 72310
72284: LD_INT 15
72286: DOUBLE
72287: EQUAL
72288: IFTRUE 72310
72290: LD_INT 11
72292: DOUBLE
72293: EQUAL
72294: IFTRUE 72310
72296: LD_INT 14
72298: DOUBLE
72299: EQUAL
72300: IFTRUE 72310
72302: LD_INT 10
72304: DOUBLE
72305: EQUAL
72306: IFTRUE 72310
72308: GO 72366
72310: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72311: LD_ADDR_VAR 0 9
72315: PUSH
72316: LD_VAR 0 41
72320: PUSH
72321: LD_VAR 0 42
72325: PUSH
72326: LD_VAR 0 43
72330: PUSH
72331: LD_VAR 0 44
72335: PUSH
72336: LD_VAR 0 45
72340: PUSH
72341: LD_VAR 0 46
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: PUSH
72354: LD_VAR 0 4
72358: PUSH
72359: LD_INT 1
72361: PLUS
72362: ARRAY
72363: ST_TO_ADDR
72364: GO 72619
72366: LD_INT 36
72368: DOUBLE
72369: EQUAL
72370: IFTRUE 72374
72372: GO 72430
72374: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72375: LD_ADDR_VAR 0 9
72379: PUSH
72380: LD_VAR 0 47
72384: PUSH
72385: LD_VAR 0 48
72389: PUSH
72390: LD_VAR 0 49
72394: PUSH
72395: LD_VAR 0 50
72399: PUSH
72400: LD_VAR 0 51
72404: PUSH
72405: LD_VAR 0 52
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: PUSH
72418: LD_VAR 0 4
72422: PUSH
72423: LD_INT 1
72425: PLUS
72426: ARRAY
72427: ST_TO_ADDR
72428: GO 72619
72430: LD_INT 4
72432: DOUBLE
72433: EQUAL
72434: IFTRUE 72456
72436: LD_INT 5
72438: DOUBLE
72439: EQUAL
72440: IFTRUE 72456
72442: LD_INT 34
72444: DOUBLE
72445: EQUAL
72446: IFTRUE 72456
72448: LD_INT 37
72450: DOUBLE
72451: EQUAL
72452: IFTRUE 72456
72454: GO 72512
72456: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72457: LD_ADDR_VAR 0 9
72461: PUSH
72462: LD_VAR 0 53
72466: PUSH
72467: LD_VAR 0 54
72471: PUSH
72472: LD_VAR 0 55
72476: PUSH
72477: LD_VAR 0 56
72481: PUSH
72482: LD_VAR 0 57
72486: PUSH
72487: LD_VAR 0 58
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: PUSH
72500: LD_VAR 0 4
72504: PUSH
72505: LD_INT 1
72507: PLUS
72508: ARRAY
72509: ST_TO_ADDR
72510: GO 72619
72512: LD_INT 31
72514: DOUBLE
72515: EQUAL
72516: IFTRUE 72562
72518: LD_INT 32
72520: DOUBLE
72521: EQUAL
72522: IFTRUE 72562
72524: LD_INT 33
72526: DOUBLE
72527: EQUAL
72528: IFTRUE 72562
72530: LD_INT 27
72532: DOUBLE
72533: EQUAL
72534: IFTRUE 72562
72536: LD_INT 26
72538: DOUBLE
72539: EQUAL
72540: IFTRUE 72562
72542: LD_INT 28
72544: DOUBLE
72545: EQUAL
72546: IFTRUE 72562
72548: LD_INT 29
72550: DOUBLE
72551: EQUAL
72552: IFTRUE 72562
72554: LD_INT 30
72556: DOUBLE
72557: EQUAL
72558: IFTRUE 72562
72560: GO 72618
72562: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72563: LD_ADDR_VAR 0 9
72567: PUSH
72568: LD_VAR 0 59
72572: PUSH
72573: LD_VAR 0 60
72577: PUSH
72578: LD_VAR 0 61
72582: PUSH
72583: LD_VAR 0 62
72587: PUSH
72588: LD_VAR 0 63
72592: PUSH
72593: LD_VAR 0 64
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: PUSH
72606: LD_VAR 0 4
72610: PUSH
72611: LD_INT 1
72613: PLUS
72614: ARRAY
72615: ST_TO_ADDR
72616: GO 72619
72618: POP
// temp_list2 = [ ] ;
72619: LD_ADDR_VAR 0 10
72623: PUSH
72624: EMPTY
72625: ST_TO_ADDR
// for i in temp_list do
72626: LD_ADDR_VAR 0 8
72630: PUSH
72631: LD_VAR 0 9
72635: PUSH
72636: FOR_IN
72637: IFFALSE 72689
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72639: LD_ADDR_VAR 0 10
72643: PUSH
72644: LD_VAR 0 10
72648: PUSH
72649: LD_VAR 0 8
72653: PUSH
72654: LD_INT 1
72656: ARRAY
72657: PUSH
72658: LD_VAR 0 2
72662: PLUS
72663: PUSH
72664: LD_VAR 0 8
72668: PUSH
72669: LD_INT 2
72671: ARRAY
72672: PUSH
72673: LD_VAR 0 3
72677: PLUS
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: EMPTY
72684: LIST
72685: ADD
72686: ST_TO_ADDR
72687: GO 72636
72689: POP
72690: POP
// result = temp_list2 ;
72691: LD_ADDR_VAR 0 7
72695: PUSH
72696: LD_VAR 0 10
72700: ST_TO_ADDR
// end ;
72701: LD_VAR 0 7
72705: RET
// export function EnemyInRange ( unit , dist ) ; begin
72706: LD_INT 0
72708: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72709: LD_ADDR_VAR 0 3
72713: PUSH
72714: LD_VAR 0 1
72718: PPUSH
72719: CALL_OW 255
72723: PPUSH
72724: LD_VAR 0 1
72728: PPUSH
72729: CALL_OW 250
72733: PPUSH
72734: LD_VAR 0 1
72738: PPUSH
72739: CALL_OW 251
72743: PPUSH
72744: LD_VAR 0 2
72748: PPUSH
72749: CALL 46108 0 4
72753: PUSH
72754: LD_INT 4
72756: ARRAY
72757: ST_TO_ADDR
// end ;
72758: LD_VAR 0 3
72762: RET
// export function PlayerSeeMe ( unit ) ; begin
72763: LD_INT 0
72765: PPUSH
// result := See ( your_side , unit ) ;
72766: LD_ADDR_VAR 0 2
72770: PUSH
72771: LD_OWVAR 2
72775: PPUSH
72776: LD_VAR 0 1
72780: PPUSH
72781: CALL_OW 292
72785: ST_TO_ADDR
// end ;
72786: LD_VAR 0 2
72790: RET
// export function ReverseDir ( unit ) ; begin
72791: LD_INT 0
72793: PPUSH
// if not unit then
72794: LD_VAR 0 1
72798: NOT
72799: IFFALSE 72803
// exit ;
72801: GO 72826
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72803: LD_ADDR_VAR 0 2
72807: PUSH
72808: LD_VAR 0 1
72812: PPUSH
72813: CALL_OW 254
72817: PUSH
72818: LD_INT 3
72820: PLUS
72821: PUSH
72822: LD_INT 6
72824: MOD
72825: ST_TO_ADDR
// end ;
72826: LD_VAR 0 2
72830: RET
// export function ReverseArray ( array ) ; var i ; begin
72831: LD_INT 0
72833: PPUSH
72834: PPUSH
// if not array then
72835: LD_VAR 0 1
72839: NOT
72840: IFFALSE 72844
// exit ;
72842: GO 72899
// result := [ ] ;
72844: LD_ADDR_VAR 0 2
72848: PUSH
72849: EMPTY
72850: ST_TO_ADDR
// for i := array downto 1 do
72851: LD_ADDR_VAR 0 3
72855: PUSH
72856: DOUBLE
72857: LD_VAR 0 1
72861: INC
72862: ST_TO_ADDR
72863: LD_INT 1
72865: PUSH
72866: FOR_DOWNTO
72867: IFFALSE 72897
// result := Join ( result , array [ i ] ) ;
72869: LD_ADDR_VAR 0 2
72873: PUSH
72874: LD_VAR 0 2
72878: PPUSH
72879: LD_VAR 0 1
72883: PUSH
72884: LD_VAR 0 3
72888: ARRAY
72889: PPUSH
72890: CALL 77543 0 2
72894: ST_TO_ADDR
72895: GO 72866
72897: POP
72898: POP
// end ;
72899: LD_VAR 0 2
72903: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72904: LD_INT 0
72906: PPUSH
72907: PPUSH
72908: PPUSH
72909: PPUSH
72910: PPUSH
72911: PPUSH
// if not unit or not hexes then
72912: LD_VAR 0 1
72916: NOT
72917: PUSH
72918: LD_VAR 0 2
72922: NOT
72923: OR
72924: IFFALSE 72928
// exit ;
72926: GO 73051
// dist := 9999 ;
72928: LD_ADDR_VAR 0 5
72932: PUSH
72933: LD_INT 9999
72935: ST_TO_ADDR
// for i = 1 to hexes do
72936: LD_ADDR_VAR 0 4
72940: PUSH
72941: DOUBLE
72942: LD_INT 1
72944: DEC
72945: ST_TO_ADDR
72946: LD_VAR 0 2
72950: PUSH
72951: FOR_TO
72952: IFFALSE 73039
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72954: LD_ADDR_VAR 0 6
72958: PUSH
72959: LD_VAR 0 1
72963: PPUSH
72964: LD_VAR 0 2
72968: PUSH
72969: LD_VAR 0 4
72973: ARRAY
72974: PUSH
72975: LD_INT 1
72977: ARRAY
72978: PPUSH
72979: LD_VAR 0 2
72983: PUSH
72984: LD_VAR 0 4
72988: ARRAY
72989: PUSH
72990: LD_INT 2
72992: ARRAY
72993: PPUSH
72994: CALL_OW 297
72998: ST_TO_ADDR
// if tdist < dist then
72999: LD_VAR 0 6
73003: PUSH
73004: LD_VAR 0 5
73008: LESS
73009: IFFALSE 73037
// begin hex := hexes [ i ] ;
73011: LD_ADDR_VAR 0 8
73015: PUSH
73016: LD_VAR 0 2
73020: PUSH
73021: LD_VAR 0 4
73025: ARRAY
73026: ST_TO_ADDR
// dist := tdist ;
73027: LD_ADDR_VAR 0 5
73031: PUSH
73032: LD_VAR 0 6
73036: ST_TO_ADDR
// end ; end ;
73037: GO 72951
73039: POP
73040: POP
// result := hex ;
73041: LD_ADDR_VAR 0 3
73045: PUSH
73046: LD_VAR 0 8
73050: ST_TO_ADDR
// end ;
73051: LD_VAR 0 3
73055: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73056: LD_INT 0
73058: PPUSH
73059: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73060: LD_VAR 0 1
73064: NOT
73065: PUSH
73066: LD_VAR 0 1
73070: PUSH
73071: LD_INT 21
73073: PUSH
73074: LD_INT 2
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_INT 23
73083: PUSH
73084: LD_INT 2
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PPUSH
73095: CALL_OW 69
73099: IN
73100: NOT
73101: OR
73102: IFFALSE 73106
// exit ;
73104: GO 73153
// for i = 1 to 3 do
73106: LD_ADDR_VAR 0 3
73110: PUSH
73111: DOUBLE
73112: LD_INT 1
73114: DEC
73115: ST_TO_ADDR
73116: LD_INT 3
73118: PUSH
73119: FOR_TO
73120: IFFALSE 73151
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73122: LD_VAR 0 1
73126: PPUSH
73127: CALL_OW 250
73131: PPUSH
73132: LD_VAR 0 1
73136: PPUSH
73137: CALL_OW 251
73141: PPUSH
73142: LD_INT 1
73144: PPUSH
73145: CALL_OW 453
73149: GO 73119
73151: POP
73152: POP
// end ;
73153: LD_VAR 0 2
73157: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73158: LD_INT 0
73160: PPUSH
73161: PPUSH
73162: PPUSH
73163: PPUSH
73164: PPUSH
73165: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73166: LD_VAR 0 1
73170: NOT
73171: PUSH
73172: LD_VAR 0 2
73176: NOT
73177: OR
73178: PUSH
73179: LD_VAR 0 1
73183: PPUSH
73184: CALL_OW 314
73188: OR
73189: IFFALSE 73193
// exit ;
73191: GO 73660
// if GetLives ( i ) < 250 then
73193: LD_VAR 0 4
73197: PPUSH
73198: CALL_OW 256
73202: PUSH
73203: LD_INT 250
73205: LESS
73206: IFFALSE 73219
// begin ComAutodestruct ( i ) ;
73208: LD_VAR 0 4
73212: PPUSH
73213: CALL 73056 0 1
// exit ;
73217: GO 73660
// end ; x := GetX ( enemy_unit ) ;
73219: LD_ADDR_VAR 0 7
73223: PUSH
73224: LD_VAR 0 2
73228: PPUSH
73229: CALL_OW 250
73233: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73234: LD_ADDR_VAR 0 8
73238: PUSH
73239: LD_VAR 0 2
73243: PPUSH
73244: CALL_OW 251
73248: ST_TO_ADDR
// if not x or not y then
73249: LD_VAR 0 7
73253: NOT
73254: PUSH
73255: LD_VAR 0 8
73259: NOT
73260: OR
73261: IFFALSE 73265
// exit ;
73263: GO 73660
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73265: LD_ADDR_VAR 0 6
73269: PUSH
73270: LD_VAR 0 7
73274: PPUSH
73275: LD_INT 0
73277: PPUSH
73278: LD_INT 4
73280: PPUSH
73281: CALL_OW 272
73285: PUSH
73286: LD_VAR 0 8
73290: PPUSH
73291: LD_INT 0
73293: PPUSH
73294: LD_INT 4
73296: PPUSH
73297: CALL_OW 273
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PUSH
73306: LD_VAR 0 7
73310: PPUSH
73311: LD_INT 1
73313: PPUSH
73314: LD_INT 4
73316: PPUSH
73317: CALL_OW 272
73321: PUSH
73322: LD_VAR 0 8
73326: PPUSH
73327: LD_INT 1
73329: PPUSH
73330: LD_INT 4
73332: PPUSH
73333: CALL_OW 273
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PUSH
73342: LD_VAR 0 7
73346: PPUSH
73347: LD_INT 2
73349: PPUSH
73350: LD_INT 4
73352: PPUSH
73353: CALL_OW 272
73357: PUSH
73358: LD_VAR 0 8
73362: PPUSH
73363: LD_INT 2
73365: PPUSH
73366: LD_INT 4
73368: PPUSH
73369: CALL_OW 273
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: LD_VAR 0 7
73382: PPUSH
73383: LD_INT 3
73385: PPUSH
73386: LD_INT 4
73388: PPUSH
73389: CALL_OW 272
73393: PUSH
73394: LD_VAR 0 8
73398: PPUSH
73399: LD_INT 3
73401: PPUSH
73402: LD_INT 4
73404: PPUSH
73405: CALL_OW 273
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: LD_VAR 0 7
73418: PPUSH
73419: LD_INT 4
73421: PPUSH
73422: LD_INT 4
73424: PPUSH
73425: CALL_OW 272
73429: PUSH
73430: LD_VAR 0 8
73434: PPUSH
73435: LD_INT 4
73437: PPUSH
73438: LD_INT 4
73440: PPUSH
73441: CALL_OW 273
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: PUSH
73450: LD_VAR 0 7
73454: PPUSH
73455: LD_INT 5
73457: PPUSH
73458: LD_INT 4
73460: PPUSH
73461: CALL_OW 272
73465: PUSH
73466: LD_VAR 0 8
73470: PPUSH
73471: LD_INT 5
73473: PPUSH
73474: LD_INT 4
73476: PPUSH
73477: CALL_OW 273
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: LIST
73493: ST_TO_ADDR
// for i = tmp downto 1 do
73494: LD_ADDR_VAR 0 4
73498: PUSH
73499: DOUBLE
73500: LD_VAR 0 6
73504: INC
73505: ST_TO_ADDR
73506: LD_INT 1
73508: PUSH
73509: FOR_DOWNTO
73510: IFFALSE 73611
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73512: LD_VAR 0 6
73516: PUSH
73517: LD_VAR 0 4
73521: ARRAY
73522: PUSH
73523: LD_INT 1
73525: ARRAY
73526: PPUSH
73527: LD_VAR 0 6
73531: PUSH
73532: LD_VAR 0 4
73536: ARRAY
73537: PUSH
73538: LD_INT 2
73540: ARRAY
73541: PPUSH
73542: CALL_OW 488
73546: NOT
73547: PUSH
73548: LD_VAR 0 6
73552: PUSH
73553: LD_VAR 0 4
73557: ARRAY
73558: PUSH
73559: LD_INT 1
73561: ARRAY
73562: PPUSH
73563: LD_VAR 0 6
73567: PUSH
73568: LD_VAR 0 4
73572: ARRAY
73573: PUSH
73574: LD_INT 2
73576: ARRAY
73577: PPUSH
73578: CALL_OW 428
73582: PUSH
73583: LD_INT 0
73585: NONEQUAL
73586: OR
73587: IFFALSE 73609
// tmp := Delete ( tmp , i ) ;
73589: LD_ADDR_VAR 0 6
73593: PUSH
73594: LD_VAR 0 6
73598: PPUSH
73599: LD_VAR 0 4
73603: PPUSH
73604: CALL_OW 3
73608: ST_TO_ADDR
73609: GO 73509
73611: POP
73612: POP
// j := GetClosestHex ( unit , tmp ) ;
73613: LD_ADDR_VAR 0 5
73617: PUSH
73618: LD_VAR 0 1
73622: PPUSH
73623: LD_VAR 0 6
73627: PPUSH
73628: CALL 72904 0 2
73632: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73633: LD_VAR 0 1
73637: PPUSH
73638: LD_VAR 0 5
73642: PUSH
73643: LD_INT 1
73645: ARRAY
73646: PPUSH
73647: LD_VAR 0 5
73651: PUSH
73652: LD_INT 2
73654: ARRAY
73655: PPUSH
73656: CALL_OW 111
// end ;
73660: LD_VAR 0 3
73664: RET
// export function PrepareApemanSoldier ( ) ; begin
73665: LD_INT 0
73667: PPUSH
// uc_nation := 0 ;
73668: LD_ADDR_OWVAR 21
73672: PUSH
73673: LD_INT 0
73675: ST_TO_ADDR
// hc_sex := sex_male ;
73676: LD_ADDR_OWVAR 27
73680: PUSH
73681: LD_INT 1
73683: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73684: LD_ADDR_OWVAR 28
73688: PUSH
73689: LD_INT 15
73691: ST_TO_ADDR
// hc_gallery :=  ;
73692: LD_ADDR_OWVAR 33
73696: PUSH
73697: LD_STRING 
73699: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73700: LD_ADDR_OWVAR 31
73704: PUSH
73705: LD_INT 0
73707: PPUSH
73708: LD_INT 3
73710: PPUSH
73711: CALL_OW 12
73715: PUSH
73716: LD_INT 0
73718: PPUSH
73719: LD_INT 3
73721: PPUSH
73722: CALL_OW 12
73726: PUSH
73727: LD_INT 0
73729: PUSH
73730: LD_INT 0
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: ST_TO_ADDR
// end ;
73739: LD_VAR 0 1
73743: RET
// export function PrepareApemanEngineer ( ) ; begin
73744: LD_INT 0
73746: PPUSH
// uc_nation := 0 ;
73747: LD_ADDR_OWVAR 21
73751: PUSH
73752: LD_INT 0
73754: ST_TO_ADDR
// hc_sex := sex_male ;
73755: LD_ADDR_OWVAR 27
73759: PUSH
73760: LD_INT 1
73762: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73763: LD_ADDR_OWVAR 28
73767: PUSH
73768: LD_INT 16
73770: ST_TO_ADDR
// hc_gallery :=  ;
73771: LD_ADDR_OWVAR 33
73775: PUSH
73776: LD_STRING 
73778: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73779: LD_ADDR_OWVAR 31
73783: PUSH
73784: LD_INT 0
73786: PPUSH
73787: LD_INT 3
73789: PPUSH
73790: CALL_OW 12
73794: PUSH
73795: LD_INT 0
73797: PPUSH
73798: LD_INT 3
73800: PPUSH
73801: CALL_OW 12
73805: PUSH
73806: LD_INT 0
73808: PUSH
73809: LD_INT 0
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: ST_TO_ADDR
// end ;
73818: LD_VAR 0 1
73822: RET
// export function PrepareApeman ( agressivity ) ; begin
73823: LD_INT 0
73825: PPUSH
// uc_side := 0 ;
73826: LD_ADDR_OWVAR 20
73830: PUSH
73831: LD_INT 0
73833: ST_TO_ADDR
// uc_nation := 0 ;
73834: LD_ADDR_OWVAR 21
73838: PUSH
73839: LD_INT 0
73841: ST_TO_ADDR
// hc_sex := sex_male ;
73842: LD_ADDR_OWVAR 27
73846: PUSH
73847: LD_INT 1
73849: ST_TO_ADDR
// hc_class := class_apeman ;
73850: LD_ADDR_OWVAR 28
73854: PUSH
73855: LD_INT 12
73857: ST_TO_ADDR
// hc_gallery :=  ;
73858: LD_ADDR_OWVAR 33
73862: PUSH
73863: LD_STRING 
73865: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73866: LD_ADDR_OWVAR 35
73870: PUSH
73871: LD_VAR 0 1
73875: NEG
73876: PPUSH
73877: LD_VAR 0 1
73881: PPUSH
73882: CALL_OW 12
73886: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73887: LD_ADDR_OWVAR 31
73891: PUSH
73892: LD_INT 0
73894: PPUSH
73895: LD_INT 3
73897: PPUSH
73898: CALL_OW 12
73902: PUSH
73903: LD_INT 0
73905: PPUSH
73906: LD_INT 3
73908: PPUSH
73909: CALL_OW 12
73913: PUSH
73914: LD_INT 0
73916: PUSH
73917: LD_INT 0
73919: PUSH
73920: EMPTY
73921: LIST
73922: LIST
73923: LIST
73924: LIST
73925: ST_TO_ADDR
// end ;
73926: LD_VAR 0 2
73930: RET
// export function PrepareTiger ( agressivity ) ; begin
73931: LD_INT 0
73933: PPUSH
// uc_side := 0 ;
73934: LD_ADDR_OWVAR 20
73938: PUSH
73939: LD_INT 0
73941: ST_TO_ADDR
// uc_nation := 0 ;
73942: LD_ADDR_OWVAR 21
73946: PUSH
73947: LD_INT 0
73949: ST_TO_ADDR
// hc_class := class_tiger ;
73950: LD_ADDR_OWVAR 28
73954: PUSH
73955: LD_INT 14
73957: ST_TO_ADDR
// hc_gallery :=  ;
73958: LD_ADDR_OWVAR 33
73962: PUSH
73963: LD_STRING 
73965: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73966: LD_ADDR_OWVAR 35
73970: PUSH
73971: LD_VAR 0 1
73975: NEG
73976: PPUSH
73977: LD_VAR 0 1
73981: PPUSH
73982: CALL_OW 12
73986: ST_TO_ADDR
// end ;
73987: LD_VAR 0 2
73991: RET
// export function PrepareEnchidna ( ) ; begin
73992: LD_INT 0
73994: PPUSH
// uc_side := 0 ;
73995: LD_ADDR_OWVAR 20
73999: PUSH
74000: LD_INT 0
74002: ST_TO_ADDR
// uc_nation := 0 ;
74003: LD_ADDR_OWVAR 21
74007: PUSH
74008: LD_INT 0
74010: ST_TO_ADDR
// hc_class := class_baggie ;
74011: LD_ADDR_OWVAR 28
74015: PUSH
74016: LD_INT 13
74018: ST_TO_ADDR
// hc_gallery :=  ;
74019: LD_ADDR_OWVAR 33
74023: PUSH
74024: LD_STRING 
74026: ST_TO_ADDR
// end ;
74027: LD_VAR 0 1
74031: RET
// export function PrepareFrog ( ) ; begin
74032: LD_INT 0
74034: PPUSH
// uc_side := 0 ;
74035: LD_ADDR_OWVAR 20
74039: PUSH
74040: LD_INT 0
74042: ST_TO_ADDR
// uc_nation := 0 ;
74043: LD_ADDR_OWVAR 21
74047: PUSH
74048: LD_INT 0
74050: ST_TO_ADDR
// hc_class := class_frog ;
74051: LD_ADDR_OWVAR 28
74055: PUSH
74056: LD_INT 19
74058: ST_TO_ADDR
// hc_gallery :=  ;
74059: LD_ADDR_OWVAR 33
74063: PUSH
74064: LD_STRING 
74066: ST_TO_ADDR
// end ;
74067: LD_VAR 0 1
74071: RET
// export function PrepareFish ( ) ; begin
74072: LD_INT 0
74074: PPUSH
// uc_side := 0 ;
74075: LD_ADDR_OWVAR 20
74079: PUSH
74080: LD_INT 0
74082: ST_TO_ADDR
// uc_nation := 0 ;
74083: LD_ADDR_OWVAR 21
74087: PUSH
74088: LD_INT 0
74090: ST_TO_ADDR
// hc_class := class_fish ;
74091: LD_ADDR_OWVAR 28
74095: PUSH
74096: LD_INT 20
74098: ST_TO_ADDR
// hc_gallery :=  ;
74099: LD_ADDR_OWVAR 33
74103: PUSH
74104: LD_STRING 
74106: ST_TO_ADDR
// end ;
74107: LD_VAR 0 1
74111: RET
// export function PrepareBird ( ) ; begin
74112: LD_INT 0
74114: PPUSH
// uc_side := 0 ;
74115: LD_ADDR_OWVAR 20
74119: PUSH
74120: LD_INT 0
74122: ST_TO_ADDR
// uc_nation := 0 ;
74123: LD_ADDR_OWVAR 21
74127: PUSH
74128: LD_INT 0
74130: ST_TO_ADDR
// hc_class := class_phororhacos ;
74131: LD_ADDR_OWVAR 28
74135: PUSH
74136: LD_INT 18
74138: ST_TO_ADDR
// hc_gallery :=  ;
74139: LD_ADDR_OWVAR 33
74143: PUSH
74144: LD_STRING 
74146: ST_TO_ADDR
// end ;
74147: LD_VAR 0 1
74151: RET
// export function PrepareHorse ( ) ; begin
74152: LD_INT 0
74154: PPUSH
// uc_side := 0 ;
74155: LD_ADDR_OWVAR 20
74159: PUSH
74160: LD_INT 0
74162: ST_TO_ADDR
// uc_nation := 0 ;
74163: LD_ADDR_OWVAR 21
74167: PUSH
74168: LD_INT 0
74170: ST_TO_ADDR
// hc_class := class_horse ;
74171: LD_ADDR_OWVAR 28
74175: PUSH
74176: LD_INT 21
74178: ST_TO_ADDR
// hc_gallery :=  ;
74179: LD_ADDR_OWVAR 33
74183: PUSH
74184: LD_STRING 
74186: ST_TO_ADDR
// end ;
74187: LD_VAR 0 1
74191: RET
// export function PrepareMastodont ( ) ; begin
74192: LD_INT 0
74194: PPUSH
// uc_side := 0 ;
74195: LD_ADDR_OWVAR 20
74199: PUSH
74200: LD_INT 0
74202: ST_TO_ADDR
// uc_nation := 0 ;
74203: LD_ADDR_OWVAR 21
74207: PUSH
74208: LD_INT 0
74210: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74211: LD_ADDR_OWVAR 37
74215: PUSH
74216: LD_INT 31
74218: ST_TO_ADDR
// vc_control := control_rider ;
74219: LD_ADDR_OWVAR 38
74223: PUSH
74224: LD_INT 4
74226: ST_TO_ADDR
// end ;
74227: LD_VAR 0 1
74231: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74232: LD_INT 0
74234: PPUSH
74235: PPUSH
74236: PPUSH
// uc_side = 0 ;
74237: LD_ADDR_OWVAR 20
74241: PUSH
74242: LD_INT 0
74244: ST_TO_ADDR
// uc_nation = 0 ;
74245: LD_ADDR_OWVAR 21
74249: PUSH
74250: LD_INT 0
74252: ST_TO_ADDR
// InitHc_All ( ) ;
74253: CALL_OW 584
// InitVc ;
74257: CALL_OW 20
// if mastodonts then
74261: LD_VAR 0 6
74265: IFFALSE 74332
// for i = 1 to mastodonts do
74267: LD_ADDR_VAR 0 11
74271: PUSH
74272: DOUBLE
74273: LD_INT 1
74275: DEC
74276: ST_TO_ADDR
74277: LD_VAR 0 6
74281: PUSH
74282: FOR_TO
74283: IFFALSE 74330
// begin vc_chassis := 31 ;
74285: LD_ADDR_OWVAR 37
74289: PUSH
74290: LD_INT 31
74292: ST_TO_ADDR
// vc_control := control_rider ;
74293: LD_ADDR_OWVAR 38
74297: PUSH
74298: LD_INT 4
74300: ST_TO_ADDR
// animal := CreateVehicle ;
74301: LD_ADDR_VAR 0 12
74305: PUSH
74306: CALL_OW 45
74310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74311: LD_VAR 0 12
74315: PPUSH
74316: LD_VAR 0 8
74320: PPUSH
74321: LD_INT 0
74323: PPUSH
74324: CALL 76460 0 3
// end ;
74328: GO 74282
74330: POP
74331: POP
// if horses then
74332: LD_VAR 0 5
74336: IFFALSE 74403
// for i = 1 to horses do
74338: LD_ADDR_VAR 0 11
74342: PUSH
74343: DOUBLE
74344: LD_INT 1
74346: DEC
74347: ST_TO_ADDR
74348: LD_VAR 0 5
74352: PUSH
74353: FOR_TO
74354: IFFALSE 74401
// begin hc_class := 21 ;
74356: LD_ADDR_OWVAR 28
74360: PUSH
74361: LD_INT 21
74363: ST_TO_ADDR
// hc_gallery :=  ;
74364: LD_ADDR_OWVAR 33
74368: PUSH
74369: LD_STRING 
74371: ST_TO_ADDR
// animal := CreateHuman ;
74372: LD_ADDR_VAR 0 12
74376: PUSH
74377: CALL_OW 44
74381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74382: LD_VAR 0 12
74386: PPUSH
74387: LD_VAR 0 8
74391: PPUSH
74392: LD_INT 0
74394: PPUSH
74395: CALL 76460 0 3
// end ;
74399: GO 74353
74401: POP
74402: POP
// if birds then
74403: LD_VAR 0 1
74407: IFFALSE 74474
// for i = 1 to birds do
74409: LD_ADDR_VAR 0 11
74413: PUSH
74414: DOUBLE
74415: LD_INT 1
74417: DEC
74418: ST_TO_ADDR
74419: LD_VAR 0 1
74423: PUSH
74424: FOR_TO
74425: IFFALSE 74472
// begin hc_class = 18 ;
74427: LD_ADDR_OWVAR 28
74431: PUSH
74432: LD_INT 18
74434: ST_TO_ADDR
// hc_gallery =  ;
74435: LD_ADDR_OWVAR 33
74439: PUSH
74440: LD_STRING 
74442: ST_TO_ADDR
// animal := CreateHuman ;
74443: LD_ADDR_VAR 0 12
74447: PUSH
74448: CALL_OW 44
74452: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74453: LD_VAR 0 12
74457: PPUSH
74458: LD_VAR 0 8
74462: PPUSH
74463: LD_INT 0
74465: PPUSH
74466: CALL 76460 0 3
// end ;
74470: GO 74424
74472: POP
74473: POP
// if tigers then
74474: LD_VAR 0 2
74478: IFFALSE 74562
// for i = 1 to tigers do
74480: LD_ADDR_VAR 0 11
74484: PUSH
74485: DOUBLE
74486: LD_INT 1
74488: DEC
74489: ST_TO_ADDR
74490: LD_VAR 0 2
74494: PUSH
74495: FOR_TO
74496: IFFALSE 74560
// begin hc_class = class_tiger ;
74498: LD_ADDR_OWVAR 28
74502: PUSH
74503: LD_INT 14
74505: ST_TO_ADDR
// hc_gallery =  ;
74506: LD_ADDR_OWVAR 33
74510: PUSH
74511: LD_STRING 
74513: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74514: LD_ADDR_OWVAR 35
74518: PUSH
74519: LD_INT 7
74521: NEG
74522: PPUSH
74523: LD_INT 7
74525: PPUSH
74526: CALL_OW 12
74530: ST_TO_ADDR
// animal := CreateHuman ;
74531: LD_ADDR_VAR 0 12
74535: PUSH
74536: CALL_OW 44
74540: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74541: LD_VAR 0 12
74545: PPUSH
74546: LD_VAR 0 8
74550: PPUSH
74551: LD_INT 0
74553: PPUSH
74554: CALL 76460 0 3
// end ;
74558: GO 74495
74560: POP
74561: POP
// if apemans then
74562: LD_VAR 0 3
74566: IFFALSE 74689
// for i = 1 to apemans do
74568: LD_ADDR_VAR 0 11
74572: PUSH
74573: DOUBLE
74574: LD_INT 1
74576: DEC
74577: ST_TO_ADDR
74578: LD_VAR 0 3
74582: PUSH
74583: FOR_TO
74584: IFFALSE 74687
// begin hc_class = class_apeman ;
74586: LD_ADDR_OWVAR 28
74590: PUSH
74591: LD_INT 12
74593: ST_TO_ADDR
// hc_gallery =  ;
74594: LD_ADDR_OWVAR 33
74598: PUSH
74599: LD_STRING 
74601: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74602: LD_ADDR_OWVAR 35
74606: PUSH
74607: LD_INT 2
74609: NEG
74610: PPUSH
74611: LD_INT 2
74613: PPUSH
74614: CALL_OW 12
74618: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74619: LD_ADDR_OWVAR 31
74623: PUSH
74624: LD_INT 1
74626: PPUSH
74627: LD_INT 3
74629: PPUSH
74630: CALL_OW 12
74634: PUSH
74635: LD_INT 1
74637: PPUSH
74638: LD_INT 3
74640: PPUSH
74641: CALL_OW 12
74645: PUSH
74646: LD_INT 0
74648: PUSH
74649: LD_INT 0
74651: PUSH
74652: EMPTY
74653: LIST
74654: LIST
74655: LIST
74656: LIST
74657: ST_TO_ADDR
// animal := CreateHuman ;
74658: LD_ADDR_VAR 0 12
74662: PUSH
74663: CALL_OW 44
74667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74668: LD_VAR 0 12
74672: PPUSH
74673: LD_VAR 0 8
74677: PPUSH
74678: LD_INT 0
74680: PPUSH
74681: CALL 76460 0 3
// end ;
74685: GO 74583
74687: POP
74688: POP
// if enchidnas then
74689: LD_VAR 0 4
74693: IFFALSE 74760
// for i = 1 to enchidnas do
74695: LD_ADDR_VAR 0 11
74699: PUSH
74700: DOUBLE
74701: LD_INT 1
74703: DEC
74704: ST_TO_ADDR
74705: LD_VAR 0 4
74709: PUSH
74710: FOR_TO
74711: IFFALSE 74758
// begin hc_class = 13 ;
74713: LD_ADDR_OWVAR 28
74717: PUSH
74718: LD_INT 13
74720: ST_TO_ADDR
// hc_gallery =  ;
74721: LD_ADDR_OWVAR 33
74725: PUSH
74726: LD_STRING 
74728: ST_TO_ADDR
// animal := CreateHuman ;
74729: LD_ADDR_VAR 0 12
74733: PUSH
74734: CALL_OW 44
74738: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74739: LD_VAR 0 12
74743: PPUSH
74744: LD_VAR 0 8
74748: PPUSH
74749: LD_INT 0
74751: PPUSH
74752: CALL 76460 0 3
// end ;
74756: GO 74710
74758: POP
74759: POP
// if fishes then
74760: LD_VAR 0 7
74764: IFFALSE 74831
// for i = 1 to fishes do
74766: LD_ADDR_VAR 0 11
74770: PUSH
74771: DOUBLE
74772: LD_INT 1
74774: DEC
74775: ST_TO_ADDR
74776: LD_VAR 0 7
74780: PUSH
74781: FOR_TO
74782: IFFALSE 74829
// begin hc_class = 20 ;
74784: LD_ADDR_OWVAR 28
74788: PUSH
74789: LD_INT 20
74791: ST_TO_ADDR
// hc_gallery =  ;
74792: LD_ADDR_OWVAR 33
74796: PUSH
74797: LD_STRING 
74799: ST_TO_ADDR
// animal := CreateHuman ;
74800: LD_ADDR_VAR 0 12
74804: PUSH
74805: CALL_OW 44
74809: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74810: LD_VAR 0 12
74814: PPUSH
74815: LD_VAR 0 9
74819: PPUSH
74820: LD_INT 0
74822: PPUSH
74823: CALL 76460 0 3
// end ;
74827: GO 74781
74829: POP
74830: POP
// end ;
74831: LD_VAR 0 10
74835: RET
// export function WantHeal ( sci , unit ) ; begin
74836: LD_INT 0
74838: PPUSH
// if GetTaskList ( sci ) > 0 then
74839: LD_VAR 0 1
74843: PPUSH
74844: CALL_OW 437
74848: PUSH
74849: LD_INT 0
74851: GREATER
74852: IFFALSE 74922
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74854: LD_VAR 0 1
74858: PPUSH
74859: CALL_OW 437
74863: PUSH
74864: LD_INT 1
74866: ARRAY
74867: PUSH
74868: LD_INT 1
74870: ARRAY
74871: PUSH
74872: LD_STRING l
74874: EQUAL
74875: PUSH
74876: LD_VAR 0 1
74880: PPUSH
74881: CALL_OW 437
74885: PUSH
74886: LD_INT 1
74888: ARRAY
74889: PUSH
74890: LD_INT 4
74892: ARRAY
74893: PUSH
74894: LD_VAR 0 2
74898: EQUAL
74899: AND
74900: IFFALSE 74912
// result := true else
74902: LD_ADDR_VAR 0 3
74906: PUSH
74907: LD_INT 1
74909: ST_TO_ADDR
74910: GO 74920
// result := false ;
74912: LD_ADDR_VAR 0 3
74916: PUSH
74917: LD_INT 0
74919: ST_TO_ADDR
// end else
74920: GO 74930
// result := false ;
74922: LD_ADDR_VAR 0 3
74926: PUSH
74927: LD_INT 0
74929: ST_TO_ADDR
// end ;
74930: LD_VAR 0 3
74934: RET
// export function HealTarget ( sci ) ; begin
74935: LD_INT 0
74937: PPUSH
// if not sci then
74938: LD_VAR 0 1
74942: NOT
74943: IFFALSE 74947
// exit ;
74945: GO 75012
// result := 0 ;
74947: LD_ADDR_VAR 0 2
74951: PUSH
74952: LD_INT 0
74954: ST_TO_ADDR
// if GetTaskList ( sci ) then
74955: LD_VAR 0 1
74959: PPUSH
74960: CALL_OW 437
74964: IFFALSE 75012
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74966: LD_VAR 0 1
74970: PPUSH
74971: CALL_OW 437
74975: PUSH
74976: LD_INT 1
74978: ARRAY
74979: PUSH
74980: LD_INT 1
74982: ARRAY
74983: PUSH
74984: LD_STRING l
74986: EQUAL
74987: IFFALSE 75012
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74989: LD_ADDR_VAR 0 2
74993: PUSH
74994: LD_VAR 0 1
74998: PPUSH
74999: CALL_OW 437
75003: PUSH
75004: LD_INT 1
75006: ARRAY
75007: PUSH
75008: LD_INT 4
75010: ARRAY
75011: ST_TO_ADDR
// end ;
75012: LD_VAR 0 2
75016: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75017: LD_INT 0
75019: PPUSH
75020: PPUSH
75021: PPUSH
75022: PPUSH
// if not base_units then
75023: LD_VAR 0 1
75027: NOT
75028: IFFALSE 75032
// exit ;
75030: GO 75119
// result := false ;
75032: LD_ADDR_VAR 0 2
75036: PUSH
75037: LD_INT 0
75039: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75040: LD_ADDR_VAR 0 5
75044: PUSH
75045: LD_VAR 0 1
75049: PPUSH
75050: LD_INT 21
75052: PUSH
75053: LD_INT 3
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: PPUSH
75060: CALL_OW 72
75064: ST_TO_ADDR
// if not tmp then
75065: LD_VAR 0 5
75069: NOT
75070: IFFALSE 75074
// exit ;
75072: GO 75119
// for i in tmp do
75074: LD_ADDR_VAR 0 3
75078: PUSH
75079: LD_VAR 0 5
75083: PUSH
75084: FOR_IN
75085: IFFALSE 75117
// begin result := EnemyInRange ( i , 22 ) ;
75087: LD_ADDR_VAR 0 2
75091: PUSH
75092: LD_VAR 0 3
75096: PPUSH
75097: LD_INT 22
75099: PPUSH
75100: CALL 72706 0 2
75104: ST_TO_ADDR
// if result then
75105: LD_VAR 0 2
75109: IFFALSE 75115
// exit ;
75111: POP
75112: POP
75113: GO 75119
// end ;
75115: GO 75084
75117: POP
75118: POP
// end ;
75119: LD_VAR 0 2
75123: RET
// export function FilterByTag ( units , tag ) ; begin
75124: LD_INT 0
75126: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75127: LD_ADDR_VAR 0 3
75131: PUSH
75132: LD_VAR 0 1
75136: PPUSH
75137: LD_INT 120
75139: PUSH
75140: LD_VAR 0 2
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: PPUSH
75149: CALL_OW 72
75153: ST_TO_ADDR
// end ;
75154: LD_VAR 0 3
75158: RET
// export function IsDriver ( un ) ; begin
75159: LD_INT 0
75161: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75162: LD_ADDR_VAR 0 2
75166: PUSH
75167: LD_VAR 0 1
75171: PUSH
75172: LD_INT 55
75174: PUSH
75175: EMPTY
75176: LIST
75177: PPUSH
75178: CALL_OW 69
75182: IN
75183: ST_TO_ADDR
// end ;
75184: LD_VAR 0 2
75188: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75189: LD_INT 0
75191: PPUSH
75192: PPUSH
// list := [ ] ;
75193: LD_ADDR_VAR 0 5
75197: PUSH
75198: EMPTY
75199: ST_TO_ADDR
// case d of 0 :
75200: LD_VAR 0 3
75204: PUSH
75205: LD_INT 0
75207: DOUBLE
75208: EQUAL
75209: IFTRUE 75213
75211: GO 75346
75213: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75214: LD_ADDR_VAR 0 5
75218: PUSH
75219: LD_VAR 0 1
75223: PUSH
75224: LD_INT 4
75226: MINUS
75227: PUSH
75228: LD_VAR 0 2
75232: PUSH
75233: LD_INT 4
75235: MINUS
75236: PUSH
75237: LD_INT 2
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: LIST
75244: PUSH
75245: LD_VAR 0 1
75249: PUSH
75250: LD_INT 3
75252: MINUS
75253: PUSH
75254: LD_VAR 0 2
75258: PUSH
75259: LD_INT 1
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: LIST
75266: PUSH
75267: LD_VAR 0 1
75271: PUSH
75272: LD_INT 4
75274: PLUS
75275: PUSH
75276: LD_VAR 0 2
75280: PUSH
75281: LD_INT 4
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: LIST
75288: PUSH
75289: LD_VAR 0 1
75293: PUSH
75294: LD_INT 3
75296: PLUS
75297: PUSH
75298: LD_VAR 0 2
75302: PUSH
75303: LD_INT 3
75305: PLUS
75306: PUSH
75307: LD_INT 5
75309: PUSH
75310: EMPTY
75311: LIST
75312: LIST
75313: LIST
75314: PUSH
75315: LD_VAR 0 1
75319: PUSH
75320: LD_VAR 0 2
75324: PUSH
75325: LD_INT 4
75327: PLUS
75328: PUSH
75329: LD_INT 0
75331: PUSH
75332: EMPTY
75333: LIST
75334: LIST
75335: LIST
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: ST_TO_ADDR
// end ; 1 :
75344: GO 76044
75346: LD_INT 1
75348: DOUBLE
75349: EQUAL
75350: IFTRUE 75354
75352: GO 75487
75354: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75355: LD_ADDR_VAR 0 5
75359: PUSH
75360: LD_VAR 0 1
75364: PUSH
75365: LD_VAR 0 2
75369: PUSH
75370: LD_INT 4
75372: MINUS
75373: PUSH
75374: LD_INT 3
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: LIST
75381: PUSH
75382: LD_VAR 0 1
75386: PUSH
75387: LD_INT 3
75389: MINUS
75390: PUSH
75391: LD_VAR 0 2
75395: PUSH
75396: LD_INT 3
75398: MINUS
75399: PUSH
75400: LD_INT 2
75402: PUSH
75403: EMPTY
75404: LIST
75405: LIST
75406: LIST
75407: PUSH
75408: LD_VAR 0 1
75412: PUSH
75413: LD_INT 4
75415: MINUS
75416: PUSH
75417: LD_VAR 0 2
75421: PUSH
75422: LD_INT 1
75424: PUSH
75425: EMPTY
75426: LIST
75427: LIST
75428: LIST
75429: PUSH
75430: LD_VAR 0 1
75434: PUSH
75435: LD_VAR 0 2
75439: PUSH
75440: LD_INT 3
75442: PLUS
75443: PUSH
75444: LD_INT 0
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: LIST
75451: PUSH
75452: LD_VAR 0 1
75456: PUSH
75457: LD_INT 4
75459: PLUS
75460: PUSH
75461: LD_VAR 0 2
75465: PUSH
75466: LD_INT 4
75468: PLUS
75469: PUSH
75470: LD_INT 5
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: LIST
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: ST_TO_ADDR
// end ; 2 :
75485: GO 76044
75487: LD_INT 2
75489: DOUBLE
75490: EQUAL
75491: IFTRUE 75495
75493: GO 75624
75495: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75496: LD_ADDR_VAR 0 5
75500: PUSH
75501: LD_VAR 0 1
75505: PUSH
75506: LD_VAR 0 2
75510: PUSH
75511: LD_INT 3
75513: MINUS
75514: PUSH
75515: LD_INT 3
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: LIST
75522: PUSH
75523: LD_VAR 0 1
75527: PUSH
75528: LD_INT 4
75530: PLUS
75531: PUSH
75532: LD_VAR 0 2
75536: PUSH
75537: LD_INT 4
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: LIST
75544: PUSH
75545: LD_VAR 0 1
75549: PUSH
75550: LD_VAR 0 2
75554: PUSH
75555: LD_INT 4
75557: PLUS
75558: PUSH
75559: LD_INT 0
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: LIST
75566: PUSH
75567: LD_VAR 0 1
75571: PUSH
75572: LD_INT 3
75574: MINUS
75575: PUSH
75576: LD_VAR 0 2
75580: PUSH
75581: LD_INT 1
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: LIST
75588: PUSH
75589: LD_VAR 0 1
75593: PUSH
75594: LD_INT 4
75596: MINUS
75597: PUSH
75598: LD_VAR 0 2
75602: PUSH
75603: LD_INT 4
75605: MINUS
75606: PUSH
75607: LD_INT 2
75609: PUSH
75610: EMPTY
75611: LIST
75612: LIST
75613: LIST
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: LIST
75619: LIST
75620: LIST
75621: ST_TO_ADDR
// end ; 3 :
75622: GO 76044
75624: LD_INT 3
75626: DOUBLE
75627: EQUAL
75628: IFTRUE 75632
75630: GO 75765
75632: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75633: LD_ADDR_VAR 0 5
75637: PUSH
75638: LD_VAR 0 1
75642: PUSH
75643: LD_INT 3
75645: PLUS
75646: PUSH
75647: LD_VAR 0 2
75651: PUSH
75652: LD_INT 4
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: LIST
75659: PUSH
75660: LD_VAR 0 1
75664: PUSH
75665: LD_INT 4
75667: PLUS
75668: PUSH
75669: LD_VAR 0 2
75673: PUSH
75674: LD_INT 4
75676: PLUS
75677: PUSH
75678: LD_INT 5
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: LIST
75685: PUSH
75686: LD_VAR 0 1
75690: PUSH
75691: LD_INT 4
75693: MINUS
75694: PUSH
75695: LD_VAR 0 2
75699: PUSH
75700: LD_INT 1
75702: PUSH
75703: EMPTY
75704: LIST
75705: LIST
75706: LIST
75707: PUSH
75708: LD_VAR 0 1
75712: PUSH
75713: LD_VAR 0 2
75717: PUSH
75718: LD_INT 4
75720: MINUS
75721: PUSH
75722: LD_INT 3
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: LIST
75729: PUSH
75730: LD_VAR 0 1
75734: PUSH
75735: LD_INT 3
75737: MINUS
75738: PUSH
75739: LD_VAR 0 2
75743: PUSH
75744: LD_INT 3
75746: MINUS
75747: PUSH
75748: LD_INT 2
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: LIST
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: LIST
75760: LIST
75761: LIST
75762: ST_TO_ADDR
// end ; 4 :
75763: GO 76044
75765: LD_INT 4
75767: DOUBLE
75768: EQUAL
75769: IFTRUE 75773
75771: GO 75906
75773: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75774: LD_ADDR_VAR 0 5
75778: PUSH
75779: LD_VAR 0 1
75783: PUSH
75784: LD_VAR 0 2
75788: PUSH
75789: LD_INT 4
75791: PLUS
75792: PUSH
75793: LD_INT 0
75795: PUSH
75796: EMPTY
75797: LIST
75798: LIST
75799: LIST
75800: PUSH
75801: LD_VAR 0 1
75805: PUSH
75806: LD_INT 3
75808: PLUS
75809: PUSH
75810: LD_VAR 0 2
75814: PUSH
75815: LD_INT 3
75817: PLUS
75818: PUSH
75819: LD_INT 5
75821: PUSH
75822: EMPTY
75823: LIST
75824: LIST
75825: LIST
75826: PUSH
75827: LD_VAR 0 1
75831: PUSH
75832: LD_INT 4
75834: PLUS
75835: PUSH
75836: LD_VAR 0 2
75840: PUSH
75841: LD_INT 4
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: LIST
75848: PUSH
75849: LD_VAR 0 1
75853: PUSH
75854: LD_VAR 0 2
75858: PUSH
75859: LD_INT 3
75861: MINUS
75862: PUSH
75863: LD_INT 3
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: LIST
75870: PUSH
75871: LD_VAR 0 1
75875: PUSH
75876: LD_INT 4
75878: MINUS
75879: PUSH
75880: LD_VAR 0 2
75884: PUSH
75885: LD_INT 4
75887: MINUS
75888: PUSH
75889: LD_INT 2
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: LIST
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: ST_TO_ADDR
// end ; 5 :
75904: GO 76044
75906: LD_INT 5
75908: DOUBLE
75909: EQUAL
75910: IFTRUE 75914
75912: GO 76043
75914: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75915: LD_ADDR_VAR 0 5
75919: PUSH
75920: LD_VAR 0 1
75924: PUSH
75925: LD_INT 4
75927: MINUS
75928: PUSH
75929: LD_VAR 0 2
75933: PUSH
75934: LD_INT 1
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: LIST
75941: PUSH
75942: LD_VAR 0 1
75946: PUSH
75947: LD_VAR 0 2
75951: PUSH
75952: LD_INT 4
75954: MINUS
75955: PUSH
75956: LD_INT 3
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: LIST
75963: PUSH
75964: LD_VAR 0 1
75968: PUSH
75969: LD_INT 4
75971: PLUS
75972: PUSH
75973: LD_VAR 0 2
75977: PUSH
75978: LD_INT 4
75980: PLUS
75981: PUSH
75982: LD_INT 5
75984: PUSH
75985: EMPTY
75986: LIST
75987: LIST
75988: LIST
75989: PUSH
75990: LD_VAR 0 1
75994: PUSH
75995: LD_INT 3
75997: PLUS
75998: PUSH
75999: LD_VAR 0 2
76003: PUSH
76004: LD_INT 4
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: LIST
76011: PUSH
76012: LD_VAR 0 1
76016: PUSH
76017: LD_VAR 0 2
76021: PUSH
76022: LD_INT 3
76024: PLUS
76025: PUSH
76026: LD_INT 0
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: LIST
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: ST_TO_ADDR
// end ; end ;
76041: GO 76044
76043: POP
// result := list ;
76044: LD_ADDR_VAR 0 4
76048: PUSH
76049: LD_VAR 0 5
76053: ST_TO_ADDR
// end ;
76054: LD_VAR 0 4
76058: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76059: LD_INT 0
76061: PPUSH
76062: PPUSH
76063: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76064: LD_VAR 0 1
76068: NOT
76069: PUSH
76070: LD_VAR 0 2
76074: PUSH
76075: LD_INT 1
76077: PUSH
76078: LD_INT 2
76080: PUSH
76081: LD_INT 3
76083: PUSH
76084: LD_INT 4
76086: PUSH
76087: EMPTY
76088: LIST
76089: LIST
76090: LIST
76091: LIST
76092: IN
76093: NOT
76094: OR
76095: IFFALSE 76099
// exit ;
76097: GO 76182
// tmp := [ ] ;
76099: LD_ADDR_VAR 0 5
76103: PUSH
76104: EMPTY
76105: ST_TO_ADDR
// for i in units do
76106: LD_ADDR_VAR 0 4
76110: PUSH
76111: LD_VAR 0 1
76115: PUSH
76116: FOR_IN
76117: IFFALSE 76151
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76119: LD_ADDR_VAR 0 5
76123: PUSH
76124: LD_VAR 0 5
76128: PPUSH
76129: LD_VAR 0 4
76133: PPUSH
76134: LD_VAR 0 2
76138: PPUSH
76139: CALL_OW 259
76143: PPUSH
76144: CALL 77543 0 2
76148: ST_TO_ADDR
76149: GO 76116
76151: POP
76152: POP
// if not tmp then
76153: LD_VAR 0 5
76157: NOT
76158: IFFALSE 76162
// exit ;
76160: GO 76182
// result := SortListByListDesc ( units , tmp ) ;
76162: LD_ADDR_VAR 0 3
76166: PUSH
76167: LD_VAR 0 1
76171: PPUSH
76172: LD_VAR 0 5
76176: PPUSH
76177: CALL_OW 77
76181: ST_TO_ADDR
// end ;
76182: LD_VAR 0 3
76186: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76187: LD_INT 0
76189: PPUSH
76190: PPUSH
76191: PPUSH
// result := false ;
76192: LD_ADDR_VAR 0 3
76196: PUSH
76197: LD_INT 0
76199: ST_TO_ADDR
// if not building then
76200: LD_VAR 0 2
76204: NOT
76205: IFFALSE 76209
// exit ;
76207: GO 76347
// x := GetX ( building ) ;
76209: LD_ADDR_VAR 0 4
76213: PUSH
76214: LD_VAR 0 2
76218: PPUSH
76219: CALL_OW 250
76223: ST_TO_ADDR
// y := GetY ( building ) ;
76224: LD_ADDR_VAR 0 5
76228: PUSH
76229: LD_VAR 0 2
76233: PPUSH
76234: CALL_OW 251
76238: ST_TO_ADDR
// if not x or not y then
76239: LD_VAR 0 4
76243: NOT
76244: PUSH
76245: LD_VAR 0 5
76249: NOT
76250: OR
76251: IFFALSE 76255
// exit ;
76253: GO 76347
// if GetTaskList ( unit ) then
76255: LD_VAR 0 1
76259: PPUSH
76260: CALL_OW 437
76264: IFFALSE 76347
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76266: LD_STRING e
76268: PUSH
76269: LD_VAR 0 1
76273: PPUSH
76274: CALL_OW 437
76278: PUSH
76279: LD_INT 1
76281: ARRAY
76282: PUSH
76283: LD_INT 1
76285: ARRAY
76286: EQUAL
76287: PUSH
76288: LD_VAR 0 4
76292: PUSH
76293: LD_VAR 0 1
76297: PPUSH
76298: CALL_OW 437
76302: PUSH
76303: LD_INT 1
76305: ARRAY
76306: PUSH
76307: LD_INT 2
76309: ARRAY
76310: EQUAL
76311: AND
76312: PUSH
76313: LD_VAR 0 5
76317: PUSH
76318: LD_VAR 0 1
76322: PPUSH
76323: CALL_OW 437
76327: PUSH
76328: LD_INT 1
76330: ARRAY
76331: PUSH
76332: LD_INT 3
76334: ARRAY
76335: EQUAL
76336: AND
76337: IFFALSE 76347
// result := true end ;
76339: LD_ADDR_VAR 0 3
76343: PUSH
76344: LD_INT 1
76346: ST_TO_ADDR
// end ;
76347: LD_VAR 0 3
76351: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76352: LD_INT 0
76354: PPUSH
// result := false ;
76355: LD_ADDR_VAR 0 4
76359: PUSH
76360: LD_INT 0
76362: ST_TO_ADDR
// if GetTaskList ( unit ) then
76363: LD_VAR 0 1
76367: PPUSH
76368: CALL_OW 437
76372: IFFALSE 76455
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76374: LD_STRING M
76376: PUSH
76377: LD_VAR 0 1
76381: PPUSH
76382: CALL_OW 437
76386: PUSH
76387: LD_INT 1
76389: ARRAY
76390: PUSH
76391: LD_INT 1
76393: ARRAY
76394: EQUAL
76395: PUSH
76396: LD_VAR 0 2
76400: PUSH
76401: LD_VAR 0 1
76405: PPUSH
76406: CALL_OW 437
76410: PUSH
76411: LD_INT 1
76413: ARRAY
76414: PUSH
76415: LD_INT 2
76417: ARRAY
76418: EQUAL
76419: AND
76420: PUSH
76421: LD_VAR 0 3
76425: PUSH
76426: LD_VAR 0 1
76430: PPUSH
76431: CALL_OW 437
76435: PUSH
76436: LD_INT 1
76438: ARRAY
76439: PUSH
76440: LD_INT 3
76442: ARRAY
76443: EQUAL
76444: AND
76445: IFFALSE 76455
// result := true ;
76447: LD_ADDR_VAR 0 4
76451: PUSH
76452: LD_INT 1
76454: ST_TO_ADDR
// end ; end ;
76455: LD_VAR 0 4
76459: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76460: LD_INT 0
76462: PPUSH
76463: PPUSH
76464: PPUSH
76465: PPUSH
// if not unit or not area then
76466: LD_VAR 0 1
76470: NOT
76471: PUSH
76472: LD_VAR 0 2
76476: NOT
76477: OR
76478: IFFALSE 76482
// exit ;
76480: GO 76646
// tmp := AreaToList ( area , i ) ;
76482: LD_ADDR_VAR 0 6
76486: PUSH
76487: LD_VAR 0 2
76491: PPUSH
76492: LD_VAR 0 5
76496: PPUSH
76497: CALL_OW 517
76501: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76502: LD_ADDR_VAR 0 5
76506: PUSH
76507: DOUBLE
76508: LD_INT 1
76510: DEC
76511: ST_TO_ADDR
76512: LD_VAR 0 6
76516: PUSH
76517: LD_INT 1
76519: ARRAY
76520: PUSH
76521: FOR_TO
76522: IFFALSE 76644
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76524: LD_ADDR_VAR 0 7
76528: PUSH
76529: LD_VAR 0 6
76533: PUSH
76534: LD_INT 1
76536: ARRAY
76537: PUSH
76538: LD_VAR 0 5
76542: ARRAY
76543: PUSH
76544: LD_VAR 0 6
76548: PUSH
76549: LD_INT 2
76551: ARRAY
76552: PUSH
76553: LD_VAR 0 5
76557: ARRAY
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76563: LD_VAR 0 7
76567: PUSH
76568: LD_INT 1
76570: ARRAY
76571: PPUSH
76572: LD_VAR 0 7
76576: PUSH
76577: LD_INT 2
76579: ARRAY
76580: PPUSH
76581: CALL_OW 428
76585: PUSH
76586: LD_INT 0
76588: EQUAL
76589: IFFALSE 76642
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76591: LD_VAR 0 1
76595: PPUSH
76596: LD_VAR 0 7
76600: PUSH
76601: LD_INT 1
76603: ARRAY
76604: PPUSH
76605: LD_VAR 0 7
76609: PUSH
76610: LD_INT 2
76612: ARRAY
76613: PPUSH
76614: LD_VAR 0 3
76618: PPUSH
76619: CALL_OW 48
// result := IsPlaced ( unit ) ;
76623: LD_ADDR_VAR 0 4
76627: PUSH
76628: LD_VAR 0 1
76632: PPUSH
76633: CALL_OW 305
76637: ST_TO_ADDR
// exit ;
76638: POP
76639: POP
76640: GO 76646
// end ; end ;
76642: GO 76521
76644: POP
76645: POP
// end ;
76646: LD_VAR 0 4
76650: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76651: LD_INT 0
76653: PPUSH
76654: PPUSH
76655: PPUSH
// if not side or side > 8 then
76656: LD_VAR 0 1
76660: NOT
76661: PUSH
76662: LD_VAR 0 1
76666: PUSH
76667: LD_INT 8
76669: GREATER
76670: OR
76671: IFFALSE 76675
// exit ;
76673: GO 76862
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76675: LD_ADDR_VAR 0 4
76679: PUSH
76680: LD_INT 22
76682: PUSH
76683: LD_VAR 0 1
76687: PUSH
76688: EMPTY
76689: LIST
76690: LIST
76691: PUSH
76692: LD_INT 21
76694: PUSH
76695: LD_INT 3
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PPUSH
76706: CALL_OW 69
76710: ST_TO_ADDR
// if not tmp then
76711: LD_VAR 0 4
76715: NOT
76716: IFFALSE 76720
// exit ;
76718: GO 76862
// enable_addtolog := true ;
76720: LD_ADDR_OWVAR 81
76724: PUSH
76725: LD_INT 1
76727: ST_TO_ADDR
// AddToLog ( [ ) ;
76728: LD_STRING [
76730: PPUSH
76731: CALL_OW 561
// for i in tmp do
76735: LD_ADDR_VAR 0 3
76739: PUSH
76740: LD_VAR 0 4
76744: PUSH
76745: FOR_IN
76746: IFFALSE 76853
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76748: LD_STRING [
76750: PUSH
76751: LD_VAR 0 3
76755: PPUSH
76756: CALL_OW 266
76760: STR
76761: PUSH
76762: LD_STRING , 
76764: STR
76765: PUSH
76766: LD_VAR 0 3
76770: PPUSH
76771: CALL_OW 250
76775: STR
76776: PUSH
76777: LD_STRING , 
76779: STR
76780: PUSH
76781: LD_VAR 0 3
76785: PPUSH
76786: CALL_OW 251
76790: STR
76791: PUSH
76792: LD_STRING , 
76794: STR
76795: PUSH
76796: LD_VAR 0 3
76800: PPUSH
76801: CALL_OW 254
76805: STR
76806: PUSH
76807: LD_STRING , 
76809: STR
76810: PUSH
76811: LD_VAR 0 3
76815: PPUSH
76816: LD_INT 1
76818: PPUSH
76819: CALL_OW 268
76823: STR
76824: PUSH
76825: LD_STRING , 
76827: STR
76828: PUSH
76829: LD_VAR 0 3
76833: PPUSH
76834: LD_INT 2
76836: PPUSH
76837: CALL_OW 268
76841: STR
76842: PUSH
76843: LD_STRING ],
76845: STR
76846: PPUSH
76847: CALL_OW 561
// end ;
76851: GO 76745
76853: POP
76854: POP
// AddToLog ( ]; ) ;
76855: LD_STRING ];
76857: PPUSH
76858: CALL_OW 561
// end ;
76862: LD_VAR 0 2
76866: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76867: LD_INT 0
76869: PPUSH
76870: PPUSH
76871: PPUSH
76872: PPUSH
76873: PPUSH
// if not area or not rate or not max then
76874: LD_VAR 0 1
76878: NOT
76879: PUSH
76880: LD_VAR 0 2
76884: NOT
76885: OR
76886: PUSH
76887: LD_VAR 0 4
76891: NOT
76892: OR
76893: IFFALSE 76897
// exit ;
76895: GO 77086
// while 1 do
76897: LD_INT 1
76899: IFFALSE 77086
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76901: LD_ADDR_VAR 0 9
76905: PUSH
76906: LD_VAR 0 1
76910: PPUSH
76911: LD_INT 1
76913: PPUSH
76914: CALL_OW 287
76918: PUSH
76919: LD_INT 10
76921: MUL
76922: ST_TO_ADDR
// r := rate / 10 ;
76923: LD_ADDR_VAR 0 7
76927: PUSH
76928: LD_VAR 0 2
76932: PUSH
76933: LD_INT 10
76935: DIVREAL
76936: ST_TO_ADDR
// time := 1 1$00 ;
76937: LD_ADDR_VAR 0 8
76941: PUSH
76942: LD_INT 2100
76944: ST_TO_ADDR
// if amount < min then
76945: LD_VAR 0 9
76949: PUSH
76950: LD_VAR 0 3
76954: LESS
76955: IFFALSE 76973
// r := r * 2 else
76957: LD_ADDR_VAR 0 7
76961: PUSH
76962: LD_VAR 0 7
76966: PUSH
76967: LD_INT 2
76969: MUL
76970: ST_TO_ADDR
76971: GO 76999
// if amount > max then
76973: LD_VAR 0 9
76977: PUSH
76978: LD_VAR 0 4
76982: GREATER
76983: IFFALSE 76999
// r := r / 2 ;
76985: LD_ADDR_VAR 0 7
76989: PUSH
76990: LD_VAR 0 7
76994: PUSH
76995: LD_INT 2
76997: DIVREAL
76998: ST_TO_ADDR
// time := time / r ;
76999: LD_ADDR_VAR 0 8
77003: PUSH
77004: LD_VAR 0 8
77008: PUSH
77009: LD_VAR 0 7
77013: DIVREAL
77014: ST_TO_ADDR
// if time < 0 then
77015: LD_VAR 0 8
77019: PUSH
77020: LD_INT 0
77022: LESS
77023: IFFALSE 77040
// time := time * - 1 ;
77025: LD_ADDR_VAR 0 8
77029: PUSH
77030: LD_VAR 0 8
77034: PUSH
77035: LD_INT 1
77037: NEG
77038: MUL
77039: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77040: LD_VAR 0 8
77044: PUSH
77045: LD_INT 35
77047: PPUSH
77048: LD_INT 875
77050: PPUSH
77051: CALL_OW 12
77055: PLUS
77056: PPUSH
77057: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77061: LD_INT 1
77063: PPUSH
77064: LD_INT 5
77066: PPUSH
77067: CALL_OW 12
77071: PPUSH
77072: LD_VAR 0 1
77076: PPUSH
77077: LD_INT 1
77079: PPUSH
77080: CALL_OW 55
// end ;
77084: GO 76897
// end ;
77086: LD_VAR 0 5
77090: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77091: LD_INT 0
77093: PPUSH
77094: PPUSH
77095: PPUSH
77096: PPUSH
77097: PPUSH
77098: PPUSH
77099: PPUSH
77100: PPUSH
// if not turrets or not factories then
77101: LD_VAR 0 1
77105: NOT
77106: PUSH
77107: LD_VAR 0 2
77111: NOT
77112: OR
77113: IFFALSE 77117
// exit ;
77115: GO 77424
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77117: LD_ADDR_VAR 0 10
77121: PUSH
77122: LD_INT 5
77124: PUSH
77125: LD_INT 6
77127: PUSH
77128: EMPTY
77129: LIST
77130: LIST
77131: PUSH
77132: LD_INT 2
77134: PUSH
77135: LD_INT 4
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: PUSH
77142: LD_INT 3
77144: PUSH
77145: LD_INT 5
77147: PUSH
77148: EMPTY
77149: LIST
77150: LIST
77151: PUSH
77152: EMPTY
77153: LIST
77154: LIST
77155: LIST
77156: PUSH
77157: LD_INT 24
77159: PUSH
77160: LD_INT 25
77162: PUSH
77163: EMPTY
77164: LIST
77165: LIST
77166: PUSH
77167: LD_INT 23
77169: PUSH
77170: LD_INT 27
77172: PUSH
77173: EMPTY
77174: LIST
77175: LIST
77176: PUSH
77177: EMPTY
77178: LIST
77179: LIST
77180: PUSH
77181: LD_INT 42
77183: PUSH
77184: LD_INT 43
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: PUSH
77191: LD_INT 44
77193: PUSH
77194: LD_INT 46
77196: PUSH
77197: EMPTY
77198: LIST
77199: LIST
77200: PUSH
77201: LD_INT 45
77203: PUSH
77204: LD_INT 47
77206: PUSH
77207: EMPTY
77208: LIST
77209: LIST
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: LIST
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: LIST
77220: ST_TO_ADDR
// result := [ ] ;
77221: LD_ADDR_VAR 0 3
77225: PUSH
77226: EMPTY
77227: ST_TO_ADDR
// for i in turrets do
77228: LD_ADDR_VAR 0 4
77232: PUSH
77233: LD_VAR 0 1
77237: PUSH
77238: FOR_IN
77239: IFFALSE 77422
// begin nat := GetNation ( i ) ;
77241: LD_ADDR_VAR 0 7
77245: PUSH
77246: LD_VAR 0 4
77250: PPUSH
77251: CALL_OW 248
77255: ST_TO_ADDR
// weapon := 0 ;
77256: LD_ADDR_VAR 0 8
77260: PUSH
77261: LD_INT 0
77263: ST_TO_ADDR
// if not nat then
77264: LD_VAR 0 7
77268: NOT
77269: IFFALSE 77273
// continue ;
77271: GO 77238
// for j in list [ nat ] do
77273: LD_ADDR_VAR 0 5
77277: PUSH
77278: LD_VAR 0 10
77282: PUSH
77283: LD_VAR 0 7
77287: ARRAY
77288: PUSH
77289: FOR_IN
77290: IFFALSE 77331
// if GetBWeapon ( i ) = j [ 1 ] then
77292: LD_VAR 0 4
77296: PPUSH
77297: CALL_OW 269
77301: PUSH
77302: LD_VAR 0 5
77306: PUSH
77307: LD_INT 1
77309: ARRAY
77310: EQUAL
77311: IFFALSE 77329
// begin weapon := j [ 2 ] ;
77313: LD_ADDR_VAR 0 8
77317: PUSH
77318: LD_VAR 0 5
77322: PUSH
77323: LD_INT 2
77325: ARRAY
77326: ST_TO_ADDR
// break ;
77327: GO 77331
// end ;
77329: GO 77289
77331: POP
77332: POP
// if not weapon then
77333: LD_VAR 0 8
77337: NOT
77338: IFFALSE 77342
// continue ;
77340: GO 77238
// for k in factories do
77342: LD_ADDR_VAR 0 6
77346: PUSH
77347: LD_VAR 0 2
77351: PUSH
77352: FOR_IN
77353: IFFALSE 77418
// begin weapons := AvailableWeaponList ( k ) ;
77355: LD_ADDR_VAR 0 9
77359: PUSH
77360: LD_VAR 0 6
77364: PPUSH
77365: CALL_OW 478
77369: ST_TO_ADDR
// if not weapons then
77370: LD_VAR 0 9
77374: NOT
77375: IFFALSE 77379
// continue ;
77377: GO 77352
// if weapon in weapons then
77379: LD_VAR 0 8
77383: PUSH
77384: LD_VAR 0 9
77388: IN
77389: IFFALSE 77416
// begin result := [ i , weapon ] ;
77391: LD_ADDR_VAR 0 3
77395: PUSH
77396: LD_VAR 0 4
77400: PUSH
77401: LD_VAR 0 8
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: ST_TO_ADDR
// exit ;
77410: POP
77411: POP
77412: POP
77413: POP
77414: GO 77424
// end ; end ;
77416: GO 77352
77418: POP
77419: POP
// end ;
77420: GO 77238
77422: POP
77423: POP
// end ;
77424: LD_VAR 0 3
77428: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77429: LD_INT 0
77431: PPUSH
// if not side or side > 8 then
77432: LD_VAR 0 3
77436: NOT
77437: PUSH
77438: LD_VAR 0 3
77442: PUSH
77443: LD_INT 8
77445: GREATER
77446: OR
77447: IFFALSE 77451
// exit ;
77449: GO 77510
// if not range then
77451: LD_VAR 0 4
77455: NOT
77456: IFFALSE 77467
// range := - 12 ;
77458: LD_ADDR_VAR 0 4
77462: PUSH
77463: LD_INT 12
77465: NEG
77466: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77467: LD_VAR 0 1
77471: PPUSH
77472: LD_VAR 0 2
77476: PPUSH
77477: LD_VAR 0 3
77481: PPUSH
77482: LD_VAR 0 4
77486: PPUSH
77487: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77491: LD_VAR 0 1
77495: PPUSH
77496: LD_VAR 0 2
77500: PPUSH
77501: LD_VAR 0 3
77505: PPUSH
77506: CALL_OW 331
// end ;
77510: LD_VAR 0 5
77514: RET
// export function Video ( mode ) ; begin
77515: LD_INT 0
77517: PPUSH
// ingame_video = mode ;
77518: LD_ADDR_OWVAR 52
77522: PUSH
77523: LD_VAR 0 1
77527: ST_TO_ADDR
// interface_hidden = mode ;
77528: LD_ADDR_OWVAR 54
77532: PUSH
77533: LD_VAR 0 1
77537: ST_TO_ADDR
// end ;
77538: LD_VAR 0 2
77542: RET
// export function Join ( array , element ) ; begin
77543: LD_INT 0
77545: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77546: LD_ADDR_VAR 0 3
77550: PUSH
77551: LD_VAR 0 1
77555: PPUSH
77556: LD_VAR 0 1
77560: PUSH
77561: LD_INT 1
77563: PLUS
77564: PPUSH
77565: LD_VAR 0 2
77569: PPUSH
77570: CALL_OW 1
77574: ST_TO_ADDR
// end ;
77575: LD_VAR 0 3
77579: RET
// export function JoinUnion ( array , element ) ; begin
77580: LD_INT 0
77582: PPUSH
// result := array union element ;
77583: LD_ADDR_VAR 0 3
77587: PUSH
77588: LD_VAR 0 1
77592: PUSH
77593: LD_VAR 0 2
77597: UNION
77598: ST_TO_ADDR
// end ;
77599: LD_VAR 0 3
77603: RET
// export function GetBehemoths ( side ) ; begin
77604: LD_INT 0
77606: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77607: LD_ADDR_VAR 0 2
77611: PUSH
77612: LD_INT 22
77614: PUSH
77615: LD_VAR 0 1
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: PUSH
77624: LD_INT 31
77626: PUSH
77627: LD_INT 25
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: PUSH
77634: EMPTY
77635: LIST
77636: LIST
77637: PPUSH
77638: CALL_OW 69
77642: ST_TO_ADDR
// end ;
77643: LD_VAR 0 2
77647: RET
// export function Shuffle ( array ) ; var i , index ; begin
77648: LD_INT 0
77650: PPUSH
77651: PPUSH
77652: PPUSH
// result := [ ] ;
77653: LD_ADDR_VAR 0 2
77657: PUSH
77658: EMPTY
77659: ST_TO_ADDR
// if not array then
77660: LD_VAR 0 1
77664: NOT
77665: IFFALSE 77669
// exit ;
77667: GO 77768
// Randomize ;
77669: CALL_OW 10
// for i = array downto 1 do
77673: LD_ADDR_VAR 0 3
77677: PUSH
77678: DOUBLE
77679: LD_VAR 0 1
77683: INC
77684: ST_TO_ADDR
77685: LD_INT 1
77687: PUSH
77688: FOR_DOWNTO
77689: IFFALSE 77766
// begin index := rand ( 1 , array ) ;
77691: LD_ADDR_VAR 0 4
77695: PUSH
77696: LD_INT 1
77698: PPUSH
77699: LD_VAR 0 1
77703: PPUSH
77704: CALL_OW 12
77708: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77709: LD_ADDR_VAR 0 2
77713: PUSH
77714: LD_VAR 0 2
77718: PPUSH
77719: LD_VAR 0 2
77723: PUSH
77724: LD_INT 1
77726: PLUS
77727: PPUSH
77728: LD_VAR 0 1
77732: PUSH
77733: LD_VAR 0 4
77737: ARRAY
77738: PPUSH
77739: CALL_OW 2
77743: ST_TO_ADDR
// array := Delete ( array , index ) ;
77744: LD_ADDR_VAR 0 1
77748: PUSH
77749: LD_VAR 0 1
77753: PPUSH
77754: LD_VAR 0 4
77758: PPUSH
77759: CALL_OW 3
77763: ST_TO_ADDR
// end ;
77764: GO 77688
77766: POP
77767: POP
// end ;
77768: LD_VAR 0 2
77772: RET
// export function GetBaseMaterials ( base ) ; begin
77773: LD_INT 0
77775: PPUSH
// result := [ 0 , 0 , 0 ] ;
77776: LD_ADDR_VAR 0 2
77780: PUSH
77781: LD_INT 0
77783: PUSH
77784: LD_INT 0
77786: PUSH
77787: LD_INT 0
77789: PUSH
77790: EMPTY
77791: LIST
77792: LIST
77793: LIST
77794: ST_TO_ADDR
// if not base then
77795: LD_VAR 0 1
77799: NOT
77800: IFFALSE 77804
// exit ;
77802: GO 77853
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77804: LD_ADDR_VAR 0 2
77808: PUSH
77809: LD_VAR 0 1
77813: PPUSH
77814: LD_INT 1
77816: PPUSH
77817: CALL_OW 275
77821: PUSH
77822: LD_VAR 0 1
77826: PPUSH
77827: LD_INT 2
77829: PPUSH
77830: CALL_OW 275
77834: PUSH
77835: LD_VAR 0 1
77839: PPUSH
77840: LD_INT 3
77842: PPUSH
77843: CALL_OW 275
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: LIST
77852: ST_TO_ADDR
// end ;
77853: LD_VAR 0 2
77857: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77858: LD_INT 0
77860: PPUSH
77861: PPUSH
// result := array ;
77862: LD_ADDR_VAR 0 3
77866: PUSH
77867: LD_VAR 0 1
77871: ST_TO_ADDR
// if size >= result then
77872: LD_VAR 0 2
77876: PUSH
77877: LD_VAR 0 3
77881: GREATEREQUAL
77882: IFFALSE 77886
// exit ;
77884: GO 77936
// if size then
77886: LD_VAR 0 2
77890: IFFALSE 77936
// for i := array downto size do
77892: LD_ADDR_VAR 0 4
77896: PUSH
77897: DOUBLE
77898: LD_VAR 0 1
77902: INC
77903: ST_TO_ADDR
77904: LD_VAR 0 2
77908: PUSH
77909: FOR_DOWNTO
77910: IFFALSE 77934
// result := Delete ( result , result ) ;
77912: LD_ADDR_VAR 0 3
77916: PUSH
77917: LD_VAR 0 3
77921: PPUSH
77922: LD_VAR 0 3
77926: PPUSH
77927: CALL_OW 3
77931: ST_TO_ADDR
77932: GO 77909
77934: POP
77935: POP
// end ;
77936: LD_VAR 0 3
77940: RET
// export function ComExit ( unit ) ; var tmp ; begin
77941: LD_INT 0
77943: PPUSH
77944: PPUSH
// if not IsInUnit ( unit ) then
77945: LD_VAR 0 1
77949: PPUSH
77950: CALL_OW 310
77954: NOT
77955: IFFALSE 77959
// exit ;
77957: GO 78019
// tmp := IsInUnit ( unit ) ;
77959: LD_ADDR_VAR 0 3
77963: PUSH
77964: LD_VAR 0 1
77968: PPUSH
77969: CALL_OW 310
77973: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77974: LD_VAR 0 3
77978: PPUSH
77979: CALL_OW 247
77983: PUSH
77984: LD_INT 2
77986: EQUAL
77987: IFFALSE 78000
// ComExitVehicle ( unit ) else
77989: LD_VAR 0 1
77993: PPUSH
77994: CALL_OW 121
77998: GO 78009
// ComExitBuilding ( unit ) ;
78000: LD_VAR 0 1
78004: PPUSH
78005: CALL_OW 122
// result := tmp ;
78009: LD_ADDR_VAR 0 2
78013: PUSH
78014: LD_VAR 0 3
78018: ST_TO_ADDR
// end ;
78019: LD_VAR 0 2
78023: RET
// export function ComExitAll ( units ) ; var i ; begin
78024: LD_INT 0
78026: PPUSH
78027: PPUSH
// if not units then
78028: LD_VAR 0 1
78032: NOT
78033: IFFALSE 78037
// exit ;
78035: GO 78063
// for i in units do
78037: LD_ADDR_VAR 0 3
78041: PUSH
78042: LD_VAR 0 1
78046: PUSH
78047: FOR_IN
78048: IFFALSE 78061
// ComExit ( i ) ;
78050: LD_VAR 0 3
78054: PPUSH
78055: CALL 77941 0 1
78059: GO 78047
78061: POP
78062: POP
// end ;
78063: LD_VAR 0 2
78067: RET
// export function ResetHc ; begin
78068: LD_INT 0
78070: PPUSH
// InitHc ;
78071: CALL_OW 19
// hc_importance := 0 ;
78075: LD_ADDR_OWVAR 32
78079: PUSH
78080: LD_INT 0
78082: ST_TO_ADDR
// end ;
78083: LD_VAR 0 1
78087: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78088: LD_INT 0
78090: PPUSH
78091: PPUSH
78092: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78093: LD_ADDR_VAR 0 6
78097: PUSH
78098: LD_VAR 0 1
78102: PUSH
78103: LD_VAR 0 3
78107: PLUS
78108: PUSH
78109: LD_INT 2
78111: DIV
78112: ST_TO_ADDR
// if _x < 0 then
78113: LD_VAR 0 6
78117: PUSH
78118: LD_INT 0
78120: LESS
78121: IFFALSE 78138
// _x := _x * - 1 ;
78123: LD_ADDR_VAR 0 6
78127: PUSH
78128: LD_VAR 0 6
78132: PUSH
78133: LD_INT 1
78135: NEG
78136: MUL
78137: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78138: LD_ADDR_VAR 0 7
78142: PUSH
78143: LD_VAR 0 2
78147: PUSH
78148: LD_VAR 0 4
78152: PLUS
78153: PUSH
78154: LD_INT 2
78156: DIV
78157: ST_TO_ADDR
// if _y < 0 then
78158: LD_VAR 0 7
78162: PUSH
78163: LD_INT 0
78165: LESS
78166: IFFALSE 78183
// _y := _y * - 1 ;
78168: LD_ADDR_VAR 0 7
78172: PUSH
78173: LD_VAR 0 7
78177: PUSH
78178: LD_INT 1
78180: NEG
78181: MUL
78182: ST_TO_ADDR
// result := [ _x , _y ] ;
78183: LD_ADDR_VAR 0 5
78187: PUSH
78188: LD_VAR 0 6
78192: PUSH
78193: LD_VAR 0 7
78197: PUSH
78198: EMPTY
78199: LIST
78200: LIST
78201: ST_TO_ADDR
// end ;
78202: LD_VAR 0 5
78206: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78207: LD_INT 0
78209: PPUSH
78210: PPUSH
78211: PPUSH
78212: PPUSH
// task := GetTaskList ( unit ) ;
78213: LD_ADDR_VAR 0 7
78217: PUSH
78218: LD_VAR 0 1
78222: PPUSH
78223: CALL_OW 437
78227: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78228: LD_VAR 0 7
78232: NOT
78233: PUSH
78234: LD_VAR 0 1
78238: PPUSH
78239: LD_VAR 0 2
78243: PPUSH
78244: CALL_OW 308
78248: NOT
78249: AND
78250: IFFALSE 78254
// exit ;
78252: GO 78372
// if IsInArea ( unit , area ) then
78254: LD_VAR 0 1
78258: PPUSH
78259: LD_VAR 0 2
78263: PPUSH
78264: CALL_OW 308
78268: IFFALSE 78286
// begin ComMoveToArea ( unit , goAway ) ;
78270: LD_VAR 0 1
78274: PPUSH
78275: LD_VAR 0 3
78279: PPUSH
78280: CALL_OW 113
// exit ;
78284: GO 78372
// end ; if task [ 1 ] [ 1 ] <> M then
78286: LD_VAR 0 7
78290: PUSH
78291: LD_INT 1
78293: ARRAY
78294: PUSH
78295: LD_INT 1
78297: ARRAY
78298: PUSH
78299: LD_STRING M
78301: NONEQUAL
78302: IFFALSE 78306
// exit ;
78304: GO 78372
// x := task [ 1 ] [ 2 ] ;
78306: LD_ADDR_VAR 0 5
78310: PUSH
78311: LD_VAR 0 7
78315: PUSH
78316: LD_INT 1
78318: ARRAY
78319: PUSH
78320: LD_INT 2
78322: ARRAY
78323: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78324: LD_ADDR_VAR 0 6
78328: PUSH
78329: LD_VAR 0 7
78333: PUSH
78334: LD_INT 1
78336: ARRAY
78337: PUSH
78338: LD_INT 3
78340: ARRAY
78341: ST_TO_ADDR
// if InArea ( x , y , area ) then
78342: LD_VAR 0 5
78346: PPUSH
78347: LD_VAR 0 6
78351: PPUSH
78352: LD_VAR 0 2
78356: PPUSH
78357: CALL_OW 309
78361: IFFALSE 78372
// ComStop ( unit ) ;
78363: LD_VAR 0 1
78367: PPUSH
78368: CALL_OW 141
// end ;
78372: LD_VAR 0 4
78376: RET
// export function Abs ( value ) ; begin
78377: LD_INT 0
78379: PPUSH
// result := value ;
78380: LD_ADDR_VAR 0 2
78384: PUSH
78385: LD_VAR 0 1
78389: ST_TO_ADDR
// if value < 0 then
78390: LD_VAR 0 1
78394: PUSH
78395: LD_INT 0
78397: LESS
78398: IFFALSE 78415
// result := value * - 1 ;
78400: LD_ADDR_VAR 0 2
78404: PUSH
78405: LD_VAR 0 1
78409: PUSH
78410: LD_INT 1
78412: NEG
78413: MUL
78414: ST_TO_ADDR
// end ;
78415: LD_VAR 0 2
78419: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78420: LD_INT 0
78422: PPUSH
78423: PPUSH
78424: PPUSH
78425: PPUSH
78426: PPUSH
78427: PPUSH
78428: PPUSH
78429: PPUSH
// if not unit or not building then
78430: LD_VAR 0 1
78434: NOT
78435: PUSH
78436: LD_VAR 0 2
78440: NOT
78441: OR
78442: IFFALSE 78446
// exit ;
78444: GO 78672
// x := GetX ( building ) ;
78446: LD_ADDR_VAR 0 4
78450: PUSH
78451: LD_VAR 0 2
78455: PPUSH
78456: CALL_OW 250
78460: ST_TO_ADDR
// y := GetY ( building ) ;
78461: LD_ADDR_VAR 0 6
78465: PUSH
78466: LD_VAR 0 2
78470: PPUSH
78471: CALL_OW 251
78475: ST_TO_ADDR
// d := GetDir ( building ) ;
78476: LD_ADDR_VAR 0 8
78480: PUSH
78481: LD_VAR 0 2
78485: PPUSH
78486: CALL_OW 254
78490: ST_TO_ADDR
// r := 4 ;
78491: LD_ADDR_VAR 0 9
78495: PUSH
78496: LD_INT 4
78498: ST_TO_ADDR
// for i := 1 to 5 do
78499: LD_ADDR_VAR 0 10
78503: PUSH
78504: DOUBLE
78505: LD_INT 1
78507: DEC
78508: ST_TO_ADDR
78509: LD_INT 5
78511: PUSH
78512: FOR_TO
78513: IFFALSE 78670
// begin _x := ShiftX ( x , d , r + i ) ;
78515: LD_ADDR_VAR 0 5
78519: PUSH
78520: LD_VAR 0 4
78524: PPUSH
78525: LD_VAR 0 8
78529: PPUSH
78530: LD_VAR 0 9
78534: PUSH
78535: LD_VAR 0 10
78539: PLUS
78540: PPUSH
78541: CALL_OW 272
78545: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78546: LD_ADDR_VAR 0 7
78550: PUSH
78551: LD_VAR 0 6
78555: PPUSH
78556: LD_VAR 0 8
78560: PPUSH
78561: LD_VAR 0 9
78565: PUSH
78566: LD_VAR 0 10
78570: PLUS
78571: PPUSH
78572: CALL_OW 273
78576: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78577: LD_VAR 0 5
78581: PPUSH
78582: LD_VAR 0 7
78586: PPUSH
78587: CALL_OW 488
78591: PUSH
78592: LD_VAR 0 5
78596: PPUSH
78597: LD_VAR 0 7
78601: PPUSH
78602: CALL_OW 428
78606: PPUSH
78607: CALL_OW 247
78611: PUSH
78612: LD_INT 3
78614: PUSH
78615: LD_INT 2
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: IN
78622: NOT
78623: AND
78624: IFFALSE 78668
// begin ComMoveXY ( unit , _x , _y ) ;
78626: LD_VAR 0 1
78630: PPUSH
78631: LD_VAR 0 5
78635: PPUSH
78636: LD_VAR 0 7
78640: PPUSH
78641: CALL_OW 111
// result := [ _x , _y ] ;
78645: LD_ADDR_VAR 0 3
78649: PUSH
78650: LD_VAR 0 5
78654: PUSH
78655: LD_VAR 0 7
78659: PUSH
78660: EMPTY
78661: LIST
78662: LIST
78663: ST_TO_ADDR
// exit ;
78664: POP
78665: POP
78666: GO 78672
// end ; end ;
78668: GO 78512
78670: POP
78671: POP
// end ;
78672: LD_VAR 0 3
78676: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78677: LD_INT 0
78679: PPUSH
78680: PPUSH
78681: PPUSH
// result := 0 ;
78682: LD_ADDR_VAR 0 3
78686: PUSH
78687: LD_INT 0
78689: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78690: LD_VAR 0 1
78694: PUSH
78695: LD_INT 0
78697: LESS
78698: PUSH
78699: LD_VAR 0 1
78703: PUSH
78704: LD_INT 8
78706: GREATER
78707: OR
78708: PUSH
78709: LD_VAR 0 2
78713: PUSH
78714: LD_INT 0
78716: LESS
78717: OR
78718: PUSH
78719: LD_VAR 0 2
78723: PUSH
78724: LD_INT 8
78726: GREATER
78727: OR
78728: IFFALSE 78732
// exit ;
78730: GO 78807
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78732: LD_ADDR_VAR 0 4
78736: PUSH
78737: LD_INT 22
78739: PUSH
78740: LD_VAR 0 2
78744: PUSH
78745: EMPTY
78746: LIST
78747: LIST
78748: PPUSH
78749: CALL_OW 69
78753: PUSH
78754: FOR_IN
78755: IFFALSE 78805
// begin un := UnitShoot ( i ) ;
78757: LD_ADDR_VAR 0 5
78761: PUSH
78762: LD_VAR 0 4
78766: PPUSH
78767: CALL_OW 504
78771: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78772: LD_VAR 0 5
78776: PPUSH
78777: CALL_OW 255
78781: PUSH
78782: LD_VAR 0 1
78786: EQUAL
78787: IFFALSE 78803
// begin result := un ;
78789: LD_ADDR_VAR 0 3
78793: PUSH
78794: LD_VAR 0 5
78798: ST_TO_ADDR
// exit ;
78799: POP
78800: POP
78801: GO 78807
// end ; end ;
78803: GO 78754
78805: POP
78806: POP
// end ;
78807: LD_VAR 0 3
78811: RET
// export function GetCargoBay ( units ) ; begin
78812: LD_INT 0
78814: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78815: LD_ADDR_VAR 0 2
78819: PUSH
78820: LD_VAR 0 1
78824: PPUSH
78825: LD_INT 2
78827: PUSH
78828: LD_INT 34
78830: PUSH
78831: LD_INT 12
78833: PUSH
78834: EMPTY
78835: LIST
78836: LIST
78837: PUSH
78838: LD_INT 34
78840: PUSH
78841: LD_INT 51
78843: PUSH
78844: EMPTY
78845: LIST
78846: LIST
78847: PUSH
78848: LD_INT 34
78850: PUSH
78851: LD_INT 32
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: PUSH
78858: LD_INT 34
78860: PUSH
78861: LD_INT 89
78863: PUSH
78864: EMPTY
78865: LIST
78866: LIST
78867: PUSH
78868: EMPTY
78869: LIST
78870: LIST
78871: LIST
78872: LIST
78873: LIST
78874: PPUSH
78875: CALL_OW 72
78879: ST_TO_ADDR
// end ;
78880: LD_VAR 0 2
78884: RET
// export function Negate ( value ) ; begin
78885: LD_INT 0
78887: PPUSH
// result := not value ;
78888: LD_ADDR_VAR 0 2
78892: PUSH
78893: LD_VAR 0 1
78897: NOT
78898: ST_TO_ADDR
// end ;
78899: LD_VAR 0 2
78903: RET
// export function Inc ( value ) ; begin
78904: LD_INT 0
78906: PPUSH
// result := value + 1 ;
78907: LD_ADDR_VAR 0 2
78911: PUSH
78912: LD_VAR 0 1
78916: PUSH
78917: LD_INT 1
78919: PLUS
78920: ST_TO_ADDR
// end ;
78921: LD_VAR 0 2
78925: RET
// export function Dec ( value ) ; begin
78926: LD_INT 0
78928: PPUSH
// result := value - 1 ;
78929: LD_ADDR_VAR 0 2
78933: PUSH
78934: LD_VAR 0 1
78938: PUSH
78939: LD_INT 1
78941: MINUS
78942: ST_TO_ADDR
// end ;
78943: LD_VAR 0 2
78947: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78948: LD_INT 0
78950: PPUSH
78951: PPUSH
78952: PPUSH
78953: PPUSH
78954: PPUSH
78955: PPUSH
78956: PPUSH
78957: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78958: LD_VAR 0 1
78962: PPUSH
78963: LD_VAR 0 2
78967: PPUSH
78968: CALL_OW 488
78972: NOT
78973: PUSH
78974: LD_VAR 0 3
78978: PPUSH
78979: LD_VAR 0 4
78983: PPUSH
78984: CALL_OW 488
78988: NOT
78989: OR
78990: IFFALSE 79003
// begin result := - 1 ;
78992: LD_ADDR_VAR 0 5
78996: PUSH
78997: LD_INT 1
78999: NEG
79000: ST_TO_ADDR
// exit ;
79001: GO 79238
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79003: LD_ADDR_VAR 0 12
79007: PUSH
79008: LD_VAR 0 1
79012: PPUSH
79013: LD_VAR 0 2
79017: PPUSH
79018: LD_VAR 0 3
79022: PPUSH
79023: LD_VAR 0 4
79027: PPUSH
79028: CALL 78088 0 4
79032: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79033: LD_ADDR_VAR 0 11
79037: PUSH
79038: LD_VAR 0 1
79042: PPUSH
79043: LD_VAR 0 2
79047: PPUSH
79048: LD_VAR 0 12
79052: PUSH
79053: LD_INT 1
79055: ARRAY
79056: PPUSH
79057: LD_VAR 0 12
79061: PUSH
79062: LD_INT 2
79064: ARRAY
79065: PPUSH
79066: CALL_OW 298
79070: ST_TO_ADDR
// distance := 9999 ;
79071: LD_ADDR_VAR 0 10
79075: PUSH
79076: LD_INT 9999
79078: ST_TO_ADDR
// for i := 0 to 5 do
79079: LD_ADDR_VAR 0 6
79083: PUSH
79084: DOUBLE
79085: LD_INT 0
79087: DEC
79088: ST_TO_ADDR
79089: LD_INT 5
79091: PUSH
79092: FOR_TO
79093: IFFALSE 79236
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79095: LD_ADDR_VAR 0 7
79099: PUSH
79100: LD_VAR 0 1
79104: PPUSH
79105: LD_VAR 0 6
79109: PPUSH
79110: LD_VAR 0 11
79114: PPUSH
79115: CALL_OW 272
79119: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79120: LD_ADDR_VAR 0 8
79124: PUSH
79125: LD_VAR 0 2
79129: PPUSH
79130: LD_VAR 0 6
79134: PPUSH
79135: LD_VAR 0 11
79139: PPUSH
79140: CALL_OW 273
79144: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79145: LD_VAR 0 7
79149: PPUSH
79150: LD_VAR 0 8
79154: PPUSH
79155: CALL_OW 488
79159: NOT
79160: IFFALSE 79164
// continue ;
79162: GO 79092
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79164: LD_ADDR_VAR 0 9
79168: PUSH
79169: LD_VAR 0 12
79173: PUSH
79174: LD_INT 1
79176: ARRAY
79177: PPUSH
79178: LD_VAR 0 12
79182: PUSH
79183: LD_INT 2
79185: ARRAY
79186: PPUSH
79187: LD_VAR 0 7
79191: PPUSH
79192: LD_VAR 0 8
79196: PPUSH
79197: CALL_OW 298
79201: ST_TO_ADDR
// if tmp < distance then
79202: LD_VAR 0 9
79206: PUSH
79207: LD_VAR 0 10
79211: LESS
79212: IFFALSE 79234
// begin result := i ;
79214: LD_ADDR_VAR 0 5
79218: PUSH
79219: LD_VAR 0 6
79223: ST_TO_ADDR
// distance := tmp ;
79224: LD_ADDR_VAR 0 10
79228: PUSH
79229: LD_VAR 0 9
79233: ST_TO_ADDR
// end ; end ;
79234: GO 79092
79236: POP
79237: POP
// end ;
79238: LD_VAR 0 5
79242: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79243: LD_INT 0
79245: PPUSH
79246: PPUSH
// if not driver or not IsInUnit ( driver ) then
79247: LD_VAR 0 1
79251: NOT
79252: PUSH
79253: LD_VAR 0 1
79257: PPUSH
79258: CALL_OW 310
79262: NOT
79263: OR
79264: IFFALSE 79268
// exit ;
79266: GO 79358
// vehicle := IsInUnit ( driver ) ;
79268: LD_ADDR_VAR 0 3
79272: PUSH
79273: LD_VAR 0 1
79277: PPUSH
79278: CALL_OW 310
79282: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79283: LD_VAR 0 1
79287: PPUSH
79288: LD_STRING \
79290: PUSH
79291: LD_INT 0
79293: PUSH
79294: LD_INT 0
79296: PUSH
79297: LD_INT 0
79299: PUSH
79300: LD_INT 0
79302: PUSH
79303: LD_INT 0
79305: PUSH
79306: LD_INT 0
79308: PUSH
79309: EMPTY
79310: LIST
79311: LIST
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: PUSH
79318: LD_STRING E
79320: PUSH
79321: LD_INT 0
79323: PUSH
79324: LD_INT 0
79326: PUSH
79327: LD_VAR 0 3
79331: PUSH
79332: LD_INT 0
79334: PUSH
79335: LD_INT 0
79337: PUSH
79338: LD_INT 0
79340: PUSH
79341: EMPTY
79342: LIST
79343: LIST
79344: LIST
79345: LIST
79346: LIST
79347: LIST
79348: LIST
79349: PUSH
79350: EMPTY
79351: LIST
79352: LIST
79353: PPUSH
79354: CALL_OW 446
// end ;
79358: LD_VAR 0 2
79362: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79363: LD_INT 0
79365: PPUSH
79366: PPUSH
// if not driver or not IsInUnit ( driver ) then
79367: LD_VAR 0 1
79371: NOT
79372: PUSH
79373: LD_VAR 0 1
79377: PPUSH
79378: CALL_OW 310
79382: NOT
79383: OR
79384: IFFALSE 79388
// exit ;
79386: GO 79478
// vehicle := IsInUnit ( driver ) ;
79388: LD_ADDR_VAR 0 3
79392: PUSH
79393: LD_VAR 0 1
79397: PPUSH
79398: CALL_OW 310
79402: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79403: LD_VAR 0 1
79407: PPUSH
79408: LD_STRING \
79410: PUSH
79411: LD_INT 0
79413: PUSH
79414: LD_INT 0
79416: PUSH
79417: LD_INT 0
79419: PUSH
79420: LD_INT 0
79422: PUSH
79423: LD_INT 0
79425: PUSH
79426: LD_INT 0
79428: PUSH
79429: EMPTY
79430: LIST
79431: LIST
79432: LIST
79433: LIST
79434: LIST
79435: LIST
79436: LIST
79437: PUSH
79438: LD_STRING E
79440: PUSH
79441: LD_INT 0
79443: PUSH
79444: LD_INT 0
79446: PUSH
79447: LD_VAR 0 3
79451: PUSH
79452: LD_INT 0
79454: PUSH
79455: LD_INT 0
79457: PUSH
79458: LD_INT 0
79460: PUSH
79461: EMPTY
79462: LIST
79463: LIST
79464: LIST
79465: LIST
79466: LIST
79467: LIST
79468: LIST
79469: PUSH
79470: EMPTY
79471: LIST
79472: LIST
79473: PPUSH
79474: CALL_OW 447
// end ;
79478: LD_VAR 0 2
79482: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79483: LD_INT 0
79485: PPUSH
79486: PPUSH
79487: PPUSH
// tmp := [ ] ;
79488: LD_ADDR_VAR 0 5
79492: PUSH
79493: EMPTY
79494: ST_TO_ADDR
// for i in units do
79495: LD_ADDR_VAR 0 4
79499: PUSH
79500: LD_VAR 0 1
79504: PUSH
79505: FOR_IN
79506: IFFALSE 79544
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79508: LD_ADDR_VAR 0 5
79512: PUSH
79513: LD_VAR 0 5
79517: PPUSH
79518: LD_VAR 0 5
79522: PUSH
79523: LD_INT 1
79525: PLUS
79526: PPUSH
79527: LD_VAR 0 4
79531: PPUSH
79532: CALL_OW 256
79536: PPUSH
79537: CALL_OW 2
79541: ST_TO_ADDR
79542: GO 79505
79544: POP
79545: POP
// if not tmp then
79546: LD_VAR 0 5
79550: NOT
79551: IFFALSE 79555
// exit ;
79553: GO 79603
// if asc then
79555: LD_VAR 0 2
79559: IFFALSE 79583
// result := SortListByListAsc ( units , tmp ) else
79561: LD_ADDR_VAR 0 3
79565: PUSH
79566: LD_VAR 0 1
79570: PPUSH
79571: LD_VAR 0 5
79575: PPUSH
79576: CALL_OW 76
79580: ST_TO_ADDR
79581: GO 79603
// result := SortListByListDesc ( units , tmp ) ;
79583: LD_ADDR_VAR 0 3
79587: PUSH
79588: LD_VAR 0 1
79592: PPUSH
79593: LD_VAR 0 5
79597: PPUSH
79598: CALL_OW 77
79602: ST_TO_ADDR
// end ;
79603: LD_VAR 0 3
79607: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79608: LD_INT 0
79610: PPUSH
79611: PPUSH
// task := GetTaskList ( mech ) ;
79612: LD_ADDR_VAR 0 4
79616: PUSH
79617: LD_VAR 0 1
79621: PPUSH
79622: CALL_OW 437
79626: ST_TO_ADDR
// if not task then
79627: LD_VAR 0 4
79631: NOT
79632: IFFALSE 79636
// exit ;
79634: GO 79678
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79636: LD_ADDR_VAR 0 3
79640: PUSH
79641: LD_VAR 0 4
79645: PUSH
79646: LD_INT 1
79648: ARRAY
79649: PUSH
79650: LD_INT 1
79652: ARRAY
79653: PUSH
79654: LD_STRING r
79656: EQUAL
79657: PUSH
79658: LD_VAR 0 4
79662: PUSH
79663: LD_INT 1
79665: ARRAY
79666: PUSH
79667: LD_INT 4
79669: ARRAY
79670: PUSH
79671: LD_VAR 0 2
79675: EQUAL
79676: AND
79677: ST_TO_ADDR
// end ;
79678: LD_VAR 0 3
79682: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79683: LD_INT 0
79685: PPUSH
// SetDir ( unit , d ) ;
79686: LD_VAR 0 1
79690: PPUSH
79691: LD_VAR 0 4
79695: PPUSH
79696: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79700: LD_VAR 0 1
79704: PPUSH
79705: LD_VAR 0 2
79709: PPUSH
79710: LD_VAR 0 3
79714: PPUSH
79715: LD_VAR 0 5
79719: PPUSH
79720: CALL_OW 48
// end ;
79724: LD_VAR 0 6
79728: RET
// export function ToNaturalNumber ( number ) ; begin
79729: LD_INT 0
79731: PPUSH
// result := number div 1 ;
79732: LD_ADDR_VAR 0 2
79736: PUSH
79737: LD_VAR 0 1
79741: PUSH
79742: LD_INT 1
79744: DIV
79745: ST_TO_ADDR
// if number < 0 then
79746: LD_VAR 0 1
79750: PUSH
79751: LD_INT 0
79753: LESS
79754: IFFALSE 79764
// result := 0 ;
79756: LD_ADDR_VAR 0 2
79760: PUSH
79761: LD_INT 0
79763: ST_TO_ADDR
// end ;
79764: LD_VAR 0 2
79768: RET
// export function SortByClass ( units , class ) ; var un ; begin
79769: LD_INT 0
79771: PPUSH
79772: PPUSH
// if not units or not class then
79773: LD_VAR 0 1
79777: NOT
79778: PUSH
79779: LD_VAR 0 2
79783: NOT
79784: OR
79785: IFFALSE 79789
// exit ;
79787: GO 79884
// result := [ ] ;
79789: LD_ADDR_VAR 0 3
79793: PUSH
79794: EMPTY
79795: ST_TO_ADDR
// for un in units do
79796: LD_ADDR_VAR 0 4
79800: PUSH
79801: LD_VAR 0 1
79805: PUSH
79806: FOR_IN
79807: IFFALSE 79882
// if GetClass ( un ) = class then
79809: LD_VAR 0 4
79813: PPUSH
79814: CALL_OW 257
79818: PUSH
79819: LD_VAR 0 2
79823: EQUAL
79824: IFFALSE 79851
// result := Insert ( result , 1 , un ) else
79826: LD_ADDR_VAR 0 3
79830: PUSH
79831: LD_VAR 0 3
79835: PPUSH
79836: LD_INT 1
79838: PPUSH
79839: LD_VAR 0 4
79843: PPUSH
79844: CALL_OW 2
79848: ST_TO_ADDR
79849: GO 79880
// result := Replace ( result , result + 1 , un ) ;
79851: LD_ADDR_VAR 0 3
79855: PUSH
79856: LD_VAR 0 3
79860: PPUSH
79861: LD_VAR 0 3
79865: PUSH
79866: LD_INT 1
79868: PLUS
79869: PPUSH
79870: LD_VAR 0 4
79874: PPUSH
79875: CALL_OW 1
79879: ST_TO_ADDR
79880: GO 79806
79882: POP
79883: POP
// end ;
79884: LD_VAR 0 3
79888: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79889: LD_INT 0
79891: PPUSH
79892: PPUSH
79893: PPUSH
79894: PPUSH
79895: PPUSH
79896: PPUSH
79897: PPUSH
// result := [ ] ;
79898: LD_ADDR_VAR 0 4
79902: PUSH
79903: EMPTY
79904: ST_TO_ADDR
// if x - r < 0 then
79905: LD_VAR 0 1
79909: PUSH
79910: LD_VAR 0 3
79914: MINUS
79915: PUSH
79916: LD_INT 0
79918: LESS
79919: IFFALSE 79931
// min_x := 0 else
79921: LD_ADDR_VAR 0 8
79925: PUSH
79926: LD_INT 0
79928: ST_TO_ADDR
79929: GO 79947
// min_x := x - r ;
79931: LD_ADDR_VAR 0 8
79935: PUSH
79936: LD_VAR 0 1
79940: PUSH
79941: LD_VAR 0 3
79945: MINUS
79946: ST_TO_ADDR
// if y - r < 0 then
79947: LD_VAR 0 2
79951: PUSH
79952: LD_VAR 0 3
79956: MINUS
79957: PUSH
79958: LD_INT 0
79960: LESS
79961: IFFALSE 79973
// min_y := 0 else
79963: LD_ADDR_VAR 0 7
79967: PUSH
79968: LD_INT 0
79970: ST_TO_ADDR
79971: GO 79989
// min_y := y - r ;
79973: LD_ADDR_VAR 0 7
79977: PUSH
79978: LD_VAR 0 2
79982: PUSH
79983: LD_VAR 0 3
79987: MINUS
79988: ST_TO_ADDR
// max_x := x + r ;
79989: LD_ADDR_VAR 0 9
79993: PUSH
79994: LD_VAR 0 1
79998: PUSH
79999: LD_VAR 0 3
80003: PLUS
80004: ST_TO_ADDR
// max_y := y + r ;
80005: LD_ADDR_VAR 0 10
80009: PUSH
80010: LD_VAR 0 2
80014: PUSH
80015: LD_VAR 0 3
80019: PLUS
80020: ST_TO_ADDR
// for _x = min_x to max_x do
80021: LD_ADDR_VAR 0 5
80025: PUSH
80026: DOUBLE
80027: LD_VAR 0 8
80031: DEC
80032: ST_TO_ADDR
80033: LD_VAR 0 9
80037: PUSH
80038: FOR_TO
80039: IFFALSE 80140
// for _y = min_y to max_y do
80041: LD_ADDR_VAR 0 6
80045: PUSH
80046: DOUBLE
80047: LD_VAR 0 7
80051: DEC
80052: ST_TO_ADDR
80053: LD_VAR 0 10
80057: PUSH
80058: FOR_TO
80059: IFFALSE 80136
// begin if not ValidHex ( _x , _y ) then
80061: LD_VAR 0 5
80065: PPUSH
80066: LD_VAR 0 6
80070: PPUSH
80071: CALL_OW 488
80075: NOT
80076: IFFALSE 80080
// continue ;
80078: GO 80058
// if GetResourceTypeXY ( _x , _y ) then
80080: LD_VAR 0 5
80084: PPUSH
80085: LD_VAR 0 6
80089: PPUSH
80090: CALL_OW 283
80094: IFFALSE 80134
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80096: LD_ADDR_VAR 0 4
80100: PUSH
80101: LD_VAR 0 4
80105: PPUSH
80106: LD_VAR 0 4
80110: PUSH
80111: LD_INT 1
80113: PLUS
80114: PPUSH
80115: LD_VAR 0 5
80119: PUSH
80120: LD_VAR 0 6
80124: PUSH
80125: EMPTY
80126: LIST
80127: LIST
80128: PPUSH
80129: CALL_OW 1
80133: ST_TO_ADDR
// end ;
80134: GO 80058
80136: POP
80137: POP
80138: GO 80038
80140: POP
80141: POP
// end ;
80142: LD_VAR 0 4
80146: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80147: LD_INT 0
80149: PPUSH
80150: PPUSH
80151: PPUSH
80152: PPUSH
80153: PPUSH
80154: PPUSH
80155: PPUSH
80156: PPUSH
// if not units then
80157: LD_VAR 0 1
80161: NOT
80162: IFFALSE 80166
// exit ;
80164: GO 80690
// result := UnitFilter ( units , [ f_ok ] ) ;
80166: LD_ADDR_VAR 0 3
80170: PUSH
80171: LD_VAR 0 1
80175: PPUSH
80176: LD_INT 50
80178: PUSH
80179: EMPTY
80180: LIST
80181: PPUSH
80182: CALL_OW 72
80186: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80187: LD_ADDR_VAR 0 8
80191: PUSH
80192: LD_VAR 0 1
80196: PUSH
80197: LD_INT 1
80199: ARRAY
80200: PPUSH
80201: CALL_OW 255
80205: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80206: LD_ADDR_VAR 0 10
80210: PUSH
80211: LD_INT 29
80213: PUSH
80214: LD_INT 91
80216: PUSH
80217: LD_INT 49
80219: PUSH
80220: EMPTY
80221: LIST
80222: LIST
80223: LIST
80224: ST_TO_ADDR
// if not result then
80225: LD_VAR 0 3
80229: NOT
80230: IFFALSE 80234
// exit ;
80232: GO 80690
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80234: LD_ADDR_VAR 0 5
80238: PUSH
80239: LD_INT 81
80241: PUSH
80242: LD_VAR 0 8
80246: PUSH
80247: EMPTY
80248: LIST
80249: LIST
80250: PPUSH
80251: CALL_OW 69
80255: ST_TO_ADDR
// for i in result do
80256: LD_ADDR_VAR 0 4
80260: PUSH
80261: LD_VAR 0 3
80265: PUSH
80266: FOR_IN
80267: IFFALSE 80688
// begin tag := GetTag ( i ) + 1 ;
80269: LD_ADDR_VAR 0 9
80273: PUSH
80274: LD_VAR 0 4
80278: PPUSH
80279: CALL_OW 110
80283: PUSH
80284: LD_INT 1
80286: PLUS
80287: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80288: LD_ADDR_VAR 0 7
80292: PUSH
80293: LD_VAR 0 4
80297: PPUSH
80298: CALL_OW 250
80302: PPUSH
80303: LD_VAR 0 4
80307: PPUSH
80308: CALL_OW 251
80312: PPUSH
80313: LD_INT 6
80315: PPUSH
80316: CALL 79889 0 3
80320: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80321: LD_VAR 0 4
80325: PPUSH
80326: CALL_OW 247
80330: PUSH
80331: LD_INT 2
80333: EQUAL
80334: PUSH
80335: LD_VAR 0 7
80339: AND
80340: PUSH
80341: LD_VAR 0 4
80345: PPUSH
80346: CALL_OW 264
80350: PUSH
80351: LD_VAR 0 10
80355: IN
80356: NOT
80357: AND
80358: IFFALSE 80397
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80360: LD_VAR 0 4
80364: PPUSH
80365: LD_VAR 0 7
80369: PUSH
80370: LD_INT 1
80372: ARRAY
80373: PUSH
80374: LD_INT 1
80376: ARRAY
80377: PPUSH
80378: LD_VAR 0 7
80382: PUSH
80383: LD_INT 1
80385: ARRAY
80386: PUSH
80387: LD_INT 2
80389: ARRAY
80390: PPUSH
80391: CALL_OW 116
80395: GO 80686
// if path > tag then
80397: LD_VAR 0 2
80401: PUSH
80402: LD_VAR 0 9
80406: GREATER
80407: IFFALSE 80615
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80409: LD_ADDR_VAR 0 6
80413: PUSH
80414: LD_VAR 0 5
80418: PPUSH
80419: LD_INT 91
80421: PUSH
80422: LD_VAR 0 4
80426: PUSH
80427: LD_INT 8
80429: PUSH
80430: EMPTY
80431: LIST
80432: LIST
80433: LIST
80434: PPUSH
80435: CALL_OW 72
80439: ST_TO_ADDR
// if nearEnemy then
80440: LD_VAR 0 6
80444: IFFALSE 80513
// begin if GetWeapon ( i ) = ru_time_lapser then
80446: LD_VAR 0 4
80450: PPUSH
80451: CALL_OW 264
80455: PUSH
80456: LD_INT 49
80458: EQUAL
80459: IFFALSE 80487
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80461: LD_VAR 0 4
80465: PPUSH
80466: LD_VAR 0 6
80470: PPUSH
80471: LD_VAR 0 4
80475: PPUSH
80476: CALL_OW 74
80480: PPUSH
80481: CALL_OW 112
80485: GO 80511
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80487: LD_VAR 0 4
80491: PPUSH
80492: LD_VAR 0 6
80496: PPUSH
80497: LD_VAR 0 4
80501: PPUSH
80502: CALL_OW 74
80506: PPUSH
80507: CALL_OW 115
// end else
80511: GO 80613
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80513: LD_VAR 0 4
80517: PPUSH
80518: LD_VAR 0 2
80522: PUSH
80523: LD_VAR 0 9
80527: ARRAY
80528: PUSH
80529: LD_INT 1
80531: ARRAY
80532: PPUSH
80533: LD_VAR 0 2
80537: PUSH
80538: LD_VAR 0 9
80542: ARRAY
80543: PUSH
80544: LD_INT 2
80546: ARRAY
80547: PPUSH
80548: CALL_OW 297
80552: PUSH
80553: LD_INT 6
80555: GREATER
80556: IFFALSE 80599
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80558: LD_VAR 0 4
80562: PPUSH
80563: LD_VAR 0 2
80567: PUSH
80568: LD_VAR 0 9
80572: ARRAY
80573: PUSH
80574: LD_INT 1
80576: ARRAY
80577: PPUSH
80578: LD_VAR 0 2
80582: PUSH
80583: LD_VAR 0 9
80587: ARRAY
80588: PUSH
80589: LD_INT 2
80591: ARRAY
80592: PPUSH
80593: CALL_OW 114
80597: GO 80613
// SetTag ( i , tag ) ;
80599: LD_VAR 0 4
80603: PPUSH
80604: LD_VAR 0 9
80608: PPUSH
80609: CALL_OW 109
// end else
80613: GO 80686
// if enemy then
80615: LD_VAR 0 5
80619: IFFALSE 80686
// begin if GetWeapon ( i ) = ru_time_lapser then
80621: LD_VAR 0 4
80625: PPUSH
80626: CALL_OW 264
80630: PUSH
80631: LD_INT 49
80633: EQUAL
80634: IFFALSE 80662
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80636: LD_VAR 0 4
80640: PPUSH
80641: LD_VAR 0 5
80645: PPUSH
80646: LD_VAR 0 4
80650: PPUSH
80651: CALL_OW 74
80655: PPUSH
80656: CALL_OW 112
80660: GO 80686
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80662: LD_VAR 0 4
80666: PPUSH
80667: LD_VAR 0 5
80671: PPUSH
80672: LD_VAR 0 4
80676: PPUSH
80677: CALL_OW 74
80681: PPUSH
80682: CALL_OW 115
// end ; end ;
80686: GO 80266
80688: POP
80689: POP
// end ;
80690: LD_VAR 0 3
80694: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80695: LD_INT 0
80697: PPUSH
80698: PPUSH
80699: PPUSH
// if not unit or IsInUnit ( unit ) then
80700: LD_VAR 0 1
80704: NOT
80705: PUSH
80706: LD_VAR 0 1
80710: PPUSH
80711: CALL_OW 310
80715: OR
80716: IFFALSE 80720
// exit ;
80718: GO 80811
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80720: LD_ADDR_VAR 0 4
80724: PUSH
80725: LD_VAR 0 1
80729: PPUSH
80730: CALL_OW 250
80734: PPUSH
80735: LD_VAR 0 2
80739: PPUSH
80740: LD_INT 1
80742: PPUSH
80743: CALL_OW 272
80747: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80748: LD_ADDR_VAR 0 5
80752: PUSH
80753: LD_VAR 0 1
80757: PPUSH
80758: CALL_OW 251
80762: PPUSH
80763: LD_VAR 0 2
80767: PPUSH
80768: LD_INT 1
80770: PPUSH
80771: CALL_OW 273
80775: ST_TO_ADDR
// if ValidHex ( x , y ) then
80776: LD_VAR 0 4
80780: PPUSH
80781: LD_VAR 0 5
80785: PPUSH
80786: CALL_OW 488
80790: IFFALSE 80811
// ComTurnXY ( unit , x , y ) ;
80792: LD_VAR 0 1
80796: PPUSH
80797: LD_VAR 0 4
80801: PPUSH
80802: LD_VAR 0 5
80806: PPUSH
80807: CALL_OW 118
// end ;
80811: LD_VAR 0 3
80815: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80816: LD_INT 0
80818: PPUSH
80819: PPUSH
// result := false ;
80820: LD_ADDR_VAR 0 3
80824: PUSH
80825: LD_INT 0
80827: ST_TO_ADDR
// if not units then
80828: LD_VAR 0 2
80832: NOT
80833: IFFALSE 80837
// exit ;
80835: GO 80882
// for i in units do
80837: LD_ADDR_VAR 0 4
80841: PUSH
80842: LD_VAR 0 2
80846: PUSH
80847: FOR_IN
80848: IFFALSE 80880
// if See ( side , i ) then
80850: LD_VAR 0 1
80854: PPUSH
80855: LD_VAR 0 4
80859: PPUSH
80860: CALL_OW 292
80864: IFFALSE 80878
// begin result := true ;
80866: LD_ADDR_VAR 0 3
80870: PUSH
80871: LD_INT 1
80873: ST_TO_ADDR
// exit ;
80874: POP
80875: POP
80876: GO 80882
// end ;
80878: GO 80847
80880: POP
80881: POP
// end ;
80882: LD_VAR 0 3
80886: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80887: LD_INT 0
80889: PPUSH
80890: PPUSH
80891: PPUSH
80892: PPUSH
// if not unit or not points then
80893: LD_VAR 0 1
80897: NOT
80898: PUSH
80899: LD_VAR 0 2
80903: NOT
80904: OR
80905: IFFALSE 80909
// exit ;
80907: GO 80999
// dist := 99999 ;
80909: LD_ADDR_VAR 0 5
80913: PUSH
80914: LD_INT 99999
80916: ST_TO_ADDR
// for i in points do
80917: LD_ADDR_VAR 0 4
80921: PUSH
80922: LD_VAR 0 2
80926: PUSH
80927: FOR_IN
80928: IFFALSE 80997
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80930: LD_ADDR_VAR 0 6
80934: PUSH
80935: LD_VAR 0 1
80939: PPUSH
80940: LD_VAR 0 4
80944: PUSH
80945: LD_INT 1
80947: ARRAY
80948: PPUSH
80949: LD_VAR 0 4
80953: PUSH
80954: LD_INT 2
80956: ARRAY
80957: PPUSH
80958: CALL_OW 297
80962: ST_TO_ADDR
// if tmpDist < dist then
80963: LD_VAR 0 6
80967: PUSH
80968: LD_VAR 0 5
80972: LESS
80973: IFFALSE 80995
// begin result := i ;
80975: LD_ADDR_VAR 0 3
80979: PUSH
80980: LD_VAR 0 4
80984: ST_TO_ADDR
// dist := tmpDist ;
80985: LD_ADDR_VAR 0 5
80989: PUSH
80990: LD_VAR 0 6
80994: ST_TO_ADDR
// end ; end ;
80995: GO 80927
80997: POP
80998: POP
// end ;
80999: LD_VAR 0 3
81003: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81004: LD_INT 0
81006: PPUSH
// uc_side := side ;
81007: LD_ADDR_OWVAR 20
81011: PUSH
81012: LD_VAR 0 1
81016: ST_TO_ADDR
// uc_nation := 3 ;
81017: LD_ADDR_OWVAR 21
81021: PUSH
81022: LD_INT 3
81024: ST_TO_ADDR
// vc_chassis := 25 ;
81025: LD_ADDR_OWVAR 37
81029: PUSH
81030: LD_INT 25
81032: ST_TO_ADDR
// vc_engine := engine_siberite ;
81033: LD_ADDR_OWVAR 39
81037: PUSH
81038: LD_INT 3
81040: ST_TO_ADDR
// vc_control := control_computer ;
81041: LD_ADDR_OWVAR 38
81045: PUSH
81046: LD_INT 3
81048: ST_TO_ADDR
// vc_weapon := 59 ;
81049: LD_ADDR_OWVAR 40
81053: PUSH
81054: LD_INT 59
81056: ST_TO_ADDR
// result := CreateVehicle ;
81057: LD_ADDR_VAR 0 5
81061: PUSH
81062: CALL_OW 45
81066: ST_TO_ADDR
// SetDir ( result , d ) ;
81067: LD_VAR 0 5
81071: PPUSH
81072: LD_VAR 0 4
81076: PPUSH
81077: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81081: LD_VAR 0 5
81085: PPUSH
81086: LD_VAR 0 2
81090: PPUSH
81091: LD_VAR 0 3
81095: PPUSH
81096: LD_INT 0
81098: PPUSH
81099: CALL_OW 48
// end ;
81103: LD_VAR 0 5
81107: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81108: LD_INT 0
81110: PPUSH
81111: PPUSH
81112: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81113: LD_ADDR_VAR 0 2
81117: PUSH
81118: LD_INT 0
81120: PUSH
81121: LD_INT 0
81123: PUSH
81124: LD_INT 0
81126: PUSH
81127: LD_INT 0
81129: PUSH
81130: EMPTY
81131: LIST
81132: LIST
81133: LIST
81134: LIST
81135: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81136: LD_VAR 0 1
81140: NOT
81141: PUSH
81142: LD_VAR 0 1
81146: PPUSH
81147: CALL_OW 264
81151: PUSH
81152: LD_INT 12
81154: PUSH
81155: LD_INT 51
81157: PUSH
81158: LD_INT 32
81160: PUSH
81161: LD_INT 89
81163: PUSH
81164: EMPTY
81165: LIST
81166: LIST
81167: LIST
81168: LIST
81169: IN
81170: NOT
81171: OR
81172: IFFALSE 81176
// exit ;
81174: GO 81274
// for i := 1 to 3 do
81176: LD_ADDR_VAR 0 3
81180: PUSH
81181: DOUBLE
81182: LD_INT 1
81184: DEC
81185: ST_TO_ADDR
81186: LD_INT 3
81188: PUSH
81189: FOR_TO
81190: IFFALSE 81272
// begin tmp := GetCargo ( cargo , i ) ;
81192: LD_ADDR_VAR 0 4
81196: PUSH
81197: LD_VAR 0 1
81201: PPUSH
81202: LD_VAR 0 3
81206: PPUSH
81207: CALL_OW 289
81211: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81212: LD_ADDR_VAR 0 2
81216: PUSH
81217: LD_VAR 0 2
81221: PPUSH
81222: LD_VAR 0 3
81226: PPUSH
81227: LD_VAR 0 4
81231: PPUSH
81232: CALL_OW 1
81236: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81237: LD_ADDR_VAR 0 2
81241: PUSH
81242: LD_VAR 0 2
81246: PPUSH
81247: LD_INT 4
81249: PPUSH
81250: LD_VAR 0 2
81254: PUSH
81255: LD_INT 4
81257: ARRAY
81258: PUSH
81259: LD_VAR 0 4
81263: PLUS
81264: PPUSH
81265: CALL_OW 1
81269: ST_TO_ADDR
// end ;
81270: GO 81189
81272: POP
81273: POP
// end ;
81274: LD_VAR 0 2
81278: RET
// export function Length ( array ) ; begin
81279: LD_INT 0
81281: PPUSH
// result := array + 0 ;
81282: LD_ADDR_VAR 0 2
81286: PUSH
81287: LD_VAR 0 1
81291: PUSH
81292: LD_INT 0
81294: PLUS
81295: ST_TO_ADDR
// end ;
81296: LD_VAR 0 2
81300: RET
// export function PrepareArray ( array ) ; begin
81301: LD_INT 0
81303: PPUSH
// result := array diff 0 ;
81304: LD_ADDR_VAR 0 2
81308: PUSH
81309: LD_VAR 0 1
81313: PUSH
81314: LD_INT 0
81316: DIFF
81317: ST_TO_ADDR
// if not result [ 1 ] then
81318: LD_VAR 0 2
81322: PUSH
81323: LD_INT 1
81325: ARRAY
81326: NOT
81327: IFFALSE 81347
// result := Delete ( result , 1 ) ;
81329: LD_ADDR_VAR 0 2
81333: PUSH
81334: LD_VAR 0 2
81338: PPUSH
81339: LD_INT 1
81341: PPUSH
81342: CALL_OW 3
81346: ST_TO_ADDR
// end ;
81347: LD_VAR 0 2
81351: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81352: LD_INT 0
81354: PPUSH
81355: PPUSH
81356: PPUSH
81357: PPUSH
// sibRocketRange := 25 ;
81358: LD_ADDR_VAR 0 6
81362: PUSH
81363: LD_INT 25
81365: ST_TO_ADDR
// result := false ;
81366: LD_ADDR_VAR 0 4
81370: PUSH
81371: LD_INT 0
81373: ST_TO_ADDR
// for i := 0 to 5 do
81374: LD_ADDR_VAR 0 5
81378: PUSH
81379: DOUBLE
81380: LD_INT 0
81382: DEC
81383: ST_TO_ADDR
81384: LD_INT 5
81386: PUSH
81387: FOR_TO
81388: IFFALSE 81455
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81390: LD_VAR 0 1
81394: PPUSH
81395: LD_VAR 0 5
81399: PPUSH
81400: LD_VAR 0 6
81404: PPUSH
81405: CALL_OW 272
81409: PPUSH
81410: LD_VAR 0 2
81414: PPUSH
81415: LD_VAR 0 5
81419: PPUSH
81420: LD_VAR 0 6
81424: PPUSH
81425: CALL_OW 273
81429: PPUSH
81430: LD_VAR 0 3
81434: PPUSH
81435: CALL_OW 309
81439: IFFALSE 81453
// begin result := true ;
81441: LD_ADDR_VAR 0 4
81445: PUSH
81446: LD_INT 1
81448: ST_TO_ADDR
// exit ;
81449: POP
81450: POP
81451: GO 81457
// end ;
81453: GO 81387
81455: POP
81456: POP
// end ;
81457: LD_VAR 0 4
81461: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81462: LD_INT 0
81464: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81465: LD_VAR 0 1
81469: PPUSH
81470: LD_VAR 0 2
81474: PPUSH
81475: LD_INT 0
81477: PPUSH
81478: LD_INT 0
81480: PPUSH
81481: LD_INT 1
81483: PPUSH
81484: LD_INT 0
81486: PPUSH
81487: CALL_OW 587
// end ; end_of_file
81491: LD_VAR 0 3
81495: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81496: LD_VAR 0 1
81500: PUSH
81501: LD_INT 200
81503: DOUBLE
81504: GREATEREQUAL
81505: IFFALSE 81513
81507: LD_INT 299
81509: DOUBLE
81510: LESSEQUAL
81511: IFTRUE 81515
81513: GO 81547
81515: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81516: LD_VAR 0 1
81520: PPUSH
81521: LD_VAR 0 2
81525: PPUSH
81526: LD_VAR 0 3
81530: PPUSH
81531: LD_VAR 0 4
81535: PPUSH
81536: LD_VAR 0 5
81540: PPUSH
81541: CALL 36162 0 5
81545: GO 81624
81547: LD_INT 300
81549: DOUBLE
81550: GREATEREQUAL
81551: IFFALSE 81559
81553: LD_INT 399
81555: DOUBLE
81556: LESSEQUAL
81557: IFTRUE 81561
81559: GO 81623
81561: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81562: LD_VAR 0 1
81566: PPUSH
81567: LD_VAR 0 2
81571: PPUSH
81572: LD_VAR 0 3
81576: PPUSH
81577: LD_VAR 0 4
81581: PPUSH
81582: LD_VAR 0 5
81586: PPUSH
81587: LD_VAR 0 6
81591: PPUSH
81592: LD_VAR 0 7
81596: PPUSH
81597: LD_VAR 0 8
81601: PPUSH
81602: LD_VAR 0 9
81606: PPUSH
81607: LD_VAR 0 10
81611: PPUSH
81612: LD_VAR 0 11
81616: PPUSH
81617: CALL 32495 0 11
81621: GO 81624
81623: POP
// end ;
81624: PPOPN 11
81626: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81627: LD_VAR 0 1
81631: PPUSH
81632: LD_VAR 0 2
81636: PPUSH
81637: LD_VAR 0 3
81641: PPUSH
81642: LD_VAR 0 4
81646: PPUSH
81647: LD_VAR 0 5
81651: PPUSH
81652: CALL 35898 0 5
// end ; end_of_file
81656: PPOPN 5
81658: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81659: LD_VAR 0 1
81663: PPUSH
81664: LD_VAR 0 2
81668: PPUSH
81669: LD_VAR 0 3
81673: PPUSH
81674: LD_VAR 0 4
81678: PPUSH
81679: LD_VAR 0 5
81683: PPUSH
81684: LD_VAR 0 6
81688: PPUSH
81689: CALL 20147 0 6
// end ;
81693: PPOPN 6
81695: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81696: LD_INT 0
81698: PPUSH
// begin if not units then
81699: LD_VAR 0 1
81703: NOT
81704: IFFALSE 81708
// exit ;
81706: GO 81708
// end ;
81708: PPOPN 7
81710: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81711: CALL 20051 0 0
// end ;
81715: PPOPN 1
81717: END
