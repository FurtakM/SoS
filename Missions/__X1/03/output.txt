// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 645 0 0
// PrepareArabian ;
  12: CALL 1004 0 0
// PrepareAmerican ;
  16: CALL 4065 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9184 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack , cargoRecycled ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// cargoRecycled := false ;
 336: LD_ADDR_EXP 30
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 349: LD_INT 0
 351: PPUSH
// uc_side := side ;
 352: LD_ADDR_OWVAR 20
 356: PUSH
 357: LD_VAR 0 1
 361: ST_TO_ADDR
// uc_nation := nation ;
 362: LD_ADDR_OWVAR 21
 366: PUSH
 367: LD_VAR 0 2
 371: ST_TO_ADDR
// vc_chassis := chassis ;
 372: LD_ADDR_OWVAR 37
 376: PUSH
 377: LD_VAR 0 3
 381: ST_TO_ADDR
// vc_engine := engine ;
 382: LD_ADDR_OWVAR 39
 386: PUSH
 387: LD_VAR 0 4
 391: ST_TO_ADDR
// vc_control := control ;
 392: LD_ADDR_OWVAR 38
 396: PUSH
 397: LD_VAR 0 5
 401: ST_TO_ADDR
// vc_weapon := weapon ;
 402: LD_ADDR_OWVAR 40
 406: PUSH
 407: LD_VAR 0 6
 411: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 412: LD_ADDR_OWVAR 41
 416: PUSH
 417: LD_VAR 0 7
 421: ST_TO_ADDR
// result := CreateVehicle ;
 422: LD_ADDR_VAR 0 8
 426: PUSH
 427: CALL_OW 45
 431: ST_TO_ADDR
// end ;
 432: LD_VAR 0 8
 436: RET
// export function SayX ( units , ident ) ; var i ; begin
 437: LD_INT 0
 439: PPUSH
 440: PPUSH
// result := false ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// if not units then
 449: LD_VAR 0 1
 453: NOT
 454: IFFALSE 458
// exit ;
 456: GO 512
// for i in units do
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 1
 467: PUSH
 468: FOR_IN
 469: IFFALSE 510
// if IsOk ( i ) then
 471: LD_VAR 0 4
 475: PPUSH
 476: CALL_OW 302
 480: IFFALSE 508
// begin Say ( i , ident ) ;
 482: LD_VAR 0 4
 486: PPUSH
 487: LD_VAR 0 2
 491: PPUSH
 492: CALL_OW 88
// result := i ;
 496: LD_ADDR_VAR 0 3
 500: PUSH
 501: LD_VAR 0 4
 505: ST_TO_ADDR
// break ;
 506: GO 510
// end ;
 508: GO 468
 510: POP
 511: POP
// end ;
 512: LD_VAR 0 3
 516: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// InitUc ;
 521: CALL_OW 18
// InitHc ;
 525: CALL_OW 19
// uc_side := 0 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// uc_nation := 0 ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_INT 0
 544: ST_TO_ADDR
// for i = 1 to amount do
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: DOUBLE
 551: LD_INT 1
 553: DEC
 554: ST_TO_ADDR
 555: LD_VAR 0 2
 559: PUSH
 560: FOR_TO
 561: IFFALSE 634
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 563: LD_ADDR_OWVAR 29
 567: PUSH
 568: LD_INT 9
 570: PPUSH
 571: LD_INT 12
 573: PPUSH
 574: CALL_OW 12
 578: PUSH
 579: LD_INT 9
 581: PPUSH
 582: LD_INT 12
 584: PPUSH
 585: CALL_OW 12
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// hc_agressivity := 0 ;
 594: LD_ADDR_OWVAR 35
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 602: LD_INT 0
 604: PPUSH
 605: LD_INT 12
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 615: CALL_OW 44
 619: PPUSH
 620: LD_VAR 0 1
 624: PPUSH
 625: LD_INT 0
 627: PPUSH
 628: CALL_OW 49
// end ;
 632: GO 560
 634: POP
 635: POP
// InitHc ;
 636: CALL_OW 19
// end ;
 640: LD_VAR 0 3
 644: RET
// export function CreateNature ; var i ; begin
 645: LD_INT 0
 647: PPUSH
 648: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 649: LD_INT 2
 651: PPUSH
 652: LD_INT 5
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: LD_INT 4
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_OWVAR 67
 674: ARRAY
 675: PPUSH
 676: CALL 517 0 2
// for i := 1 to 2 do
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_INT 2
 692: PUSH
 693: FOR_TO
 694: IFFALSE 729
// begin hc_class := 21 ;
 696: LD_ADDR_OWVAR 28
 700: PUSH
 701: LD_INT 21
 703: ST_TO_ADDR
// hc_gallery :=  ;
 704: LD_ADDR_OWVAR 33
 708: PUSH
 709: LD_STRING 
 711: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 712: CALL_OW 44
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 693
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 780
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_INT 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 49
// end ;
 778: GO 744
 780: POP
 781: POP
// for i := 1 to 2 do
 782: LD_ADDR_VAR 0 2
 786: PUSH
 787: DOUBLE
 788: LD_INT 1
 790: DEC
 791: ST_TO_ADDR
 792: LD_INT 2
 794: PUSH
 795: FOR_TO
 796: IFFALSE 831
// begin hc_class := 13 ;
 798: LD_ADDR_OWVAR 28
 802: PUSH
 803: LD_INT 13
 805: ST_TO_ADDR
// hc_gallery :=  ;
 806: LD_ADDR_OWVAR 33
 810: PUSH
 811: LD_STRING 
 813: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 814: CALL_OW 44
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 795
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 1
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ; end_of_file
 999: LD_VAR 0 4
1003: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
1008: PPUSH
1009: PPUSH
// uc_side := 5 ;
1010: LD_ADDR_OWVAR 20
1014: PUSH
1015: LD_INT 5
1017: ST_TO_ADDR
// uc_nation := 2 ;
1018: LD_ADDR_OWVAR 21
1022: PUSH
1023: LD_INT 2
1025: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1026: LD_INT 5
1028: PPUSH
1029: CALL_OW 274
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 65
1039: PPUSH
1040: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1044: LD_ADDR_EXP 39
1048: PUSH
1049: LD_STRING Farmer
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: LD_STRING 
1057: PPUSH
1058: CALL 40170 0 3
1062: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Omar
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: LD_STRING 
1076: PPUSH
1077: CALL 40170 0 3
1081: ST_TO_ADDR
// omarSquad := [ ] ;
1082: LD_ADDR_EXP 43
1086: PUSH
1087: EMPTY
1088: ST_TO_ADDR
// heikeSquad := [ ] ;
1089: LD_ADDR_EXP 44
1093: PUSH
1094: EMPTY
1095: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1096: LD_ADDR_EXP 45
1100: PUSH
1101: EMPTY
1102: ST_TO_ADDR
// omarCargo := [ ] ;
1103: LD_ADDR_EXP 46
1107: PUSH
1108: EMPTY
1109: ST_TO_ADDR
// for i := 1 to 5 do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_INT 5
1122: PUSH
1123: FOR_TO
1124: IFFALSE 1282
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1126: LD_INT 0
1128: PPUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 2
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: PPUSH
1157: LD_INT 3
1159: PPUSH
1160: CALL_OW 380
// un := CreateHuman ;
1164: LD_ADDR_VAR 0 3
1168: PUSH
1169: CALL_OW 44
1173: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1174: LD_ADDR_EXP 43
1178: PUSH
1179: LD_EXP 43
1183: PUSH
1184: LD_VAR 0 3
1188: UNION
1189: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1190: LD_VAR 0 3
1194: PPUSH
1195: LD_INT 87
1197: PUSH
1198: LD_INT 30
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 91
1207: PUSH
1208: LD_INT 32
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 82
1217: PUSH
1218: LD_INT 15
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 79
1227: PUSH
1228: LD_INT 14
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: LD_INT 82
1237: PUSH
1238: LD_INT 13
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_VAR 0 2
1256: ARRAY
1257: PPUSH
1258: LD_INT 0
1260: PPUSH
1261: CALL 912 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1265: LD_VAR 0 3
1269: PPUSH
1270: LD_INT 93
1272: PPUSH
1273: LD_INT 21
1275: PPUSH
1276: CALL_OW 118
// end ;
1280: GO 1123
1282: POP
1283: POP
// uc_side := 2 ;
1284: LD_ADDR_OWVAR 20
1288: PUSH
1289: LD_INT 2
1291: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1292: LD_ADDR_EXP 31
1296: PUSH
1297: LD_STRING Heike
1299: PPUSH
1300: LD_EXP 1
1304: NOT
1305: PPUSH
1306: LD_EXP 2
1310: PPUSH
1311: CALL 40170 0 3
1315: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1316: LD_ADDR_EXP 35
1320: PUSH
1321: LD_STRING Aviradze
1323: PPUSH
1324: LD_EXP 1
1328: NOT
1329: PPUSH
1330: LD_EXP 2
1334: PPUSH
1335: CALL 40170 0 3
1339: ST_TO_ADDR
// tmp := [ ] ;
1340: LD_ADDR_VAR 0 4
1344: PUSH
1345: EMPTY
1346: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1347: LD_ADDR_EXP 32
1351: PUSH
1352: LD_STRING Givi
1354: PPUSH
1355: LD_EXP 1
1359: NOT
1360: PPUSH
1361: LD_EXP 2
1365: PPUSH
1366: CALL 40170 0 3
1370: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1371: LD_ADDR_EXP 33
1375: PUSH
1376: LD_STRING Mike
1378: PPUSH
1379: LD_EXP 1
1383: NOT
1384: PPUSH
1385: LD_EXP 2
1389: PPUSH
1390: CALL 40170 0 3
1394: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1395: LD_ADDR_EXP 34
1399: PUSH
1400: LD_STRING Kamil
1402: PPUSH
1403: LD_EXP 1
1407: NOT
1408: PPUSH
1409: LD_EXP 2
1413: PPUSH
1414: CALL 40170 0 3
1418: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1419: LD_ADDR_EXP 36
1423: PUSH
1424: LD_STRING Kaia
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_EXP 2
1437: PPUSH
1438: CALL 40170 0 3
1442: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1443: LD_ADDR_EXP 37
1447: PUSH
1448: LD_STRING Sophia
1450: PPUSH
1451: LD_EXP 1
1455: NOT
1456: PPUSH
1457: LD_EXP 2
1461: PPUSH
1462: CALL 40170 0 3
1466: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1467: LD_ADDR_EXP 38
1471: PUSH
1472: LD_STRING Markov
1474: PPUSH
1475: LD_EXP 1
1479: NOT
1480: PPUSH
1481: LD_EXP 2
1485: PPUSH
1486: CALL 40170 0 3
1490: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1491: LD_ADDR_EXP 45
1495: PUSH
1496: LD_STRING 02_others
1498: PPUSH
1499: CALL_OW 31
1503: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_EXP 33
1513: PUSH
1514: LD_EXP 34
1518: PUSH
1519: LD_EXP 36
1523: PUSH
1524: LD_EXP 37
1528: PUSH
1529: LD_EXP 38
1533: PUSH
1534: LD_EXP 32
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_EXP 45
1551: ADD
1552: PUSH
1553: LD_INT 0
1555: DIFF
1556: ST_TO_ADDR
// heikeSquad := tmp ;
1557: LD_ADDR_EXP 44
1561: PUSH
1562: LD_VAR 0 4
1566: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1567: LD_EXP 44
1571: PPUSH
1572: LD_INT 25
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 72
1586: PUSH
1587: LD_INT 3
1589: LESS
1590: IFFALSE 1640
// begin SetClass ( Kaia , 1 ) ;
1592: LD_EXP 36
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1604: LD_EXP 33
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1616: LD_EXP 32
1620: PPUSH
1621: LD_INT 1
1623: PPUSH
1624: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1628: LD_EXP 31
1632: PPUSH
1633: LD_INT 1
1635: PPUSH
1636: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1640: LD_ADDR_VAR 0 4
1644: PUSH
1645: LD_VAR 0 4
1649: PUSH
1650: LD_STRING 02_ape
1652: PPUSH
1653: CALL_OW 31
1657: UNION
1658: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1659: LD_EXP 31
1663: PPUSH
1664: LD_INT 92
1666: PPUSH
1667: LD_INT 17
1669: PPUSH
1670: LD_INT 0
1672: PPUSH
1673: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1677: LD_EXP 39
1681: PPUSH
1682: LD_INT 95
1684: PPUSH
1685: LD_INT 19
1687: PPUSH
1688: LD_INT 0
1690: PPUSH
1691: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1695: LD_EXP 40
1699: PPUSH
1700: LD_INT 89
1702: PPUSH
1703: LD_INT 25
1705: PPUSH
1706: LD_INT 0
1708: PPUSH
1709: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1713: LD_EXP 35
1717: PPUSH
1718: LD_INT 92
1720: PPUSH
1721: LD_INT 27
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1731: LD_EXP 40
1735: PPUSH
1736: LD_EXP 35
1740: PPUSH
1741: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1745: LD_EXP 35
1749: PPUSH
1750: LD_EXP 40
1754: PPUSH
1755: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1759: LD_EXP 31
1763: PUSH
1764: LD_EXP 39
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PPUSH
1773: LD_EXP 40
1777: PPUSH
1778: CALL_OW 119
// if tmp then
1782: LD_VAR 0 4
1786: IFFALSE 1840
// for i in tmp do
1788: LD_ADDR_VAR 0 2
1792: PUSH
1793: LD_VAR 0 4
1797: PUSH
1798: FOR_IN
1799: IFFALSE 1838
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1801: LD_VAR 0 2
1805: PPUSH
1806: LD_INT 94
1808: PPUSH
1809: LD_INT 14
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1822: LD_VAR 0 2
1826: PPUSH
1827: LD_EXP 31
1831: PPUSH
1832: CALL_OW 119
// end ;
1836: GO 1798
1838: POP
1839: POP
// farmerSquad := [ ] ;
1840: LD_ADDR_EXP 42
1844: PUSH
1845: EMPTY
1846: ST_TO_ADDR
// uc_side := 5 ;
1847: LD_ADDR_OWVAR 20
1851: PUSH
1852: LD_INT 5
1854: ST_TO_ADDR
// uc_nation := 2 ;
1855: LD_ADDR_OWVAR 21
1859: PUSH
1860: LD_INT 2
1862: ST_TO_ADDR
// for i := 1 to 4 do
1863: LD_ADDR_VAR 0 2
1867: PUSH
1868: DOUBLE
1869: LD_INT 1
1871: DEC
1872: ST_TO_ADDR
1873: LD_INT 4
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1955
// begin PrepareHuman ( false , 1 , 2 ) ;
1879: LD_INT 0
1881: PPUSH
1882: LD_INT 1
1884: PPUSH
1885: LD_INT 2
1887: PPUSH
1888: CALL_OW 380
// un := CreateHuman ;
1892: LD_ADDR_VAR 0 3
1896: PUSH
1897: CALL_OW 44
1901: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1902: LD_VAR 0 3
1906: PPUSH
1907: LD_INT 102
1909: PPUSH
1910: LD_INT 27
1912: PPUSH
1913: LD_INT 4
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1923: LD_ADDR_EXP 42
1927: PUSH
1928: LD_EXP 42
1932: PUSH
1933: LD_VAR 0 3
1937: UNION
1938: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1939: LD_VAR 0 3
1943: PPUSH
1944: LD_EXP 40
1948: PPUSH
1949: CALL_OW 119
// end ;
1953: GO 1876
1955: POP
1956: POP
// for i := 1 to 2 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_INT 2
1969: PUSH
1970: FOR_TO
1971: IFFALSE 2049
// begin PrepareHuman ( false , 2 , 2 ) ;
1973: LD_INT 0
1975: PPUSH
1976: LD_INT 2
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 380
// un := CreateHuman ;
1986: LD_ADDR_VAR 0 3
1990: PUSH
1991: CALL_OW 44
1995: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1996: LD_VAR 0 3
2000: PPUSH
2001: LD_INT 108
2003: PPUSH
2004: LD_INT 62
2006: PPUSH
2007: LD_INT 2
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2017: LD_ADDR_EXP 42
2021: PUSH
2022: LD_EXP 42
2026: PUSH
2027: LD_VAR 0 3
2031: UNION
2032: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2033: LD_VAR 0 3
2037: PPUSH
2038: LD_EXP 40
2042: PPUSH
2043: CALL_OW 119
// end ;
2047: GO 1970
2049: POP
2050: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2051: LD_INT 109
2053: PPUSH
2054: LD_INT 63
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: LD_INT 15
2062: NEG
2063: PPUSH
2064: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2068: LD_INT 109
2070: PPUSH
2071: LD_INT 63
2073: PPUSH
2074: LD_INT 2
2076: PPUSH
2077: CALL_OW 331
// end ;
2081: LD_VAR 0 1
2085: RET
// export function PrepareIbrahim ( x , y ) ; begin
2086: LD_INT 0
2088: PPUSH
// uc_side := 6 ;
2089: LD_ADDR_OWVAR 20
2093: PUSH
2094: LD_INT 6
2096: ST_TO_ADDR
// uc_nation := 3 ;
2097: LD_ADDR_OWVAR 21
2101: PUSH
2102: LD_INT 3
2104: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2105: LD_ADDR_EXP 41
2109: PUSH
2110: LD_STRING IbrahimRu
2112: PPUSH
2113: LD_INT 0
2115: PPUSH
2116: LD_STRING 
2118: PPUSH
2119: CALL 40170 0 3
2123: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2124: LD_EXP 41
2128: PPUSH
2129: LD_VAR 0 1
2133: PPUSH
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 50
// end ;
2149: LD_VAR 0 3
2153: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2154: LD_EXP 40
2158: PUSH
2159: LD_EXP 43
2163: ADD
2164: PPUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 3
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 72
2179: IFFALSE 2235
2181: GO 2183
2183: DISABLE
2184: LD_INT 0
2186: PPUSH
// begin enable ;
2187: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2188: LD_ADDR_VAR 0 1
2192: PUSH
2193: LD_EXP 40
2197: PUSH
2198: LD_EXP 43
2202: ADD
2203: PPUSH
2204: LD_INT 95
2206: PUSH
2207: LD_INT 3
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PPUSH
2214: CALL_OW 72
2218: PUSH
2219: FOR_IN
2220: IFFALSE 2233
// RemoveUnit ( i ) ;
2222: LD_VAR 0 1
2226: PPUSH
2227: CALL_OW 64
2231: GO 2219
2233: POP
2234: POP
// end ;
2235: PPOPN 1
2237: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2238: LD_EXP 3
2242: PUSH
2243: LD_EXP 39
2247: PPUSH
2248: LD_INT 4
2250: PPUSH
2251: CALL_OW 308
2255: AND
2256: IFFALSE 3060
2258: GO 2260
2260: DISABLE
2261: LD_INT 0
2263: PPUSH
2264: PPUSH
2265: PPUSH
2266: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2267: LD_EXP 39
2271: PPUSH
2272: LD_INT 110
2274: PPUSH
2275: LD_INT 60
2277: PPUSH
2278: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2282: LD_EXP 39
2286: PPUSH
2287: LD_INT 110
2289: PPUSH
2290: LD_INT 61
2292: PPUSH
2293: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_EXP 42
2306: PPUSH
2307: LD_INT 25
2309: PUSH
2310: LD_INT 1
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PPUSH
2317: CALL_OW 72
2321: ST_TO_ADDR
// if tmp then
2322: LD_VAR 0 2
2326: IFFALSE 2420
// begin for i := 1 to 2 do
2328: LD_ADDR_VAR 0 1
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_INT 2
2340: PUSH
2341: FOR_TO
2342: IFFALSE 2418
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2344: LD_VAR 0 2
2348: PUSH
2349: LD_VAR 0 1
2353: ARRAY
2354: PPUSH
2355: LD_INT 5
2357: PPUSH
2358: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2362: LD_VAR 0 2
2366: PUSH
2367: LD_VAR 0 1
2371: ARRAY
2372: PPUSH
2373: LD_INT 2
2375: PPUSH
2376: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2380: LD_VAR 0 2
2384: PUSH
2385: LD_VAR 0 1
2389: ARRAY
2390: PPUSH
2391: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2395: LD_VAR 0 2
2399: PUSH
2400: LD_VAR 0 1
2404: ARRAY
2405: PPUSH
2406: LD_INT 107
2408: PPUSH
2409: LD_INT 66
2411: PPUSH
2412: CALL_OW 171
// end ;
2416: GO 2341
2418: POP
2419: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2420: LD_ADDR_VAR 0 2
2424: PUSH
2425: LD_EXP 42
2429: PPUSH
2430: LD_INT 25
2432: PUSH
2433: LD_INT 2
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL_OW 72
2444: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2445: LD_INT 35
2447: PPUSH
2448: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_EXP 42
2461: PPUSH
2462: LD_INT 25
2464: PUSH
2465: LD_INT 2
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 72
2476: ST_TO_ADDR
// until tmp ;
2477: LD_VAR 0 2
2481: IFFALSE 2445
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2483: LD_VAR 0 2
2487: PPUSH
2488: LD_INT 31
2490: PPUSH
2491: LD_INT 102
2493: PPUSH
2494: LD_INT 69
2496: PPUSH
2497: LD_INT 2
2499: PPUSH
2500: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2504: LD_INT 35
2506: PPUSH
2507: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2511: LD_EXP 42
2515: PPUSH
2516: LD_INT 3
2518: PUSH
2519: LD_INT 60
2521: PUSH
2522: EMPTY
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: LD_INT 25
2531: PUSH
2532: LD_INT 2
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PPUSH
2543: CALL_OW 72
2547: IFFALSE 2504
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: LD_EXP 42
2558: PPUSH
2559: LD_INT 25
2561: PUSH
2562: LD_INT 2
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PPUSH
2569: CALL_OW 72
2573: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2574: LD_VAR 0 2
2578: PPUSH
2579: LD_INT 6
2581: PPUSH
2582: LD_INT 116
2584: PPUSH
2585: LD_INT 55
2587: PPUSH
2588: LD_INT 4
2590: PPUSH
2591: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2595: LD_VAR 0 2
2599: PPUSH
2600: LD_INT 4
2602: PPUSH
2603: LD_INT 116
2605: PPUSH
2606: LD_INT 70
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 31
2623: PPUSH
2624: LD_INT 109
2626: PPUSH
2627: LD_INT 50
2629: PPUSH
2630: LD_INT 2
2632: PPUSH
2633: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2637: LD_INT 35
2639: PPUSH
2640: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2644: LD_INT 22
2646: PUSH
2647: LD_INT 5
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PUSH
2654: LD_INT 30
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PUSH
2664: LD_INT 3
2666: PUSH
2667: LD_INT 57
2669: PUSH
2670: EMPTY
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: PPUSH
2682: CALL_OW 69
2686: IFFALSE 2637
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2688: LD_ADDR_VAR 0 3
2692: PUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 5
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 30
2705: PUSH
2706: LD_INT 4
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 57
2718: PUSH
2719: EMPTY
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 69
2735: PUSH
2736: LD_INT 1
2738: ARRAY
2739: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2740: LD_ADDR_VAR 0 2
2744: PUSH
2745: LD_EXP 42
2749: PPUSH
2750: LD_INT 25
2752: PUSH
2753: LD_INT 1
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PPUSH
2760: CALL_OW 72
2764: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_VAR 0 3
2774: PPUSH
2775: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2779: LD_INT 35
2781: PPUSH
2782: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 30
2798: PUSH
2799: LD_INT 31
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: LD_INT 3
2808: PUSH
2809: LD_INT 57
2811: PUSH
2812: EMPTY
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 69
2828: PUSH
2829: LD_INT 2
2831: GREATEREQUAL
2832: IFFALSE 2779
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2834: LD_ADDR_VAR 0 2
2838: PUSH
2839: LD_EXP 42
2843: PPUSH
2844: LD_INT 25
2846: PUSH
2847: LD_INT 2
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 72
2858: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2859: LD_VAR 0 2
2863: PUSH
2864: LD_INT 1
2866: ARRAY
2867: PPUSH
2868: LD_INT 5
2870: PPUSH
2871: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2875: LD_VAR 0 2
2879: PUSH
2880: LD_INT 2
2882: ARRAY
2883: PUSH
2884: LD_VAR 0 2
2888: PUSH
2889: LD_INT 3
2891: ARRAY
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PPUSH
2897: LD_VAR 0 3
2901: PPUSH
2902: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2906: LD_VAR 0 2
2910: PUSH
2911: LD_INT 2
2913: ARRAY
2914: PUSH
2915: LD_VAR 0 2
2919: PUSH
2920: LD_INT 3
2922: ARRAY
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2935: LD_VAR 0 2
2939: PUSH
2940: LD_INT 2
2942: ARRAY
2943: PUSH
2944: LD_VAR 0 2
2948: PUSH
2949: LD_INT 3
2951: ARRAY
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PPUSH
2957: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2961: LD_ADDR_VAR 0 4
2965: PUSH
2966: LD_INT 22
2968: PUSH
2969: LD_INT 5
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 31
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PPUSH
2990: CALL_OW 69
2994: ST_TO_ADDR
// for i := 1 to 2 do
2995: LD_ADDR_VAR 0 1
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 2
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3043
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3011: LD_VAR 0 2
3015: PUSH
3016: LD_VAR 0 1
3020: PUSH
3021: LD_INT 1
3023: PLUS
3024: ARRAY
3025: PPUSH
3026: LD_VAR 0 4
3030: PUSH
3031: LD_VAR 0 1
3035: ARRAY
3036: PPUSH
3037: CALL_OW 180
3041: GO 3008
3043: POP
3044: POP
// wait ( 1 1$00 ) ;
3045: LD_INT 2100
3047: PPUSH
3048: CALL_OW 67
// farmerBaseReady := true ;
3052: LD_ADDR_EXP 4
3056: PUSH
3057: LD_INT 1
3059: ST_TO_ADDR
// end ;
3060: PPOPN 4
3062: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3063: LD_EXP 4
3067: PUSH
3068: LD_EXP 12
3072: NOT
3073: AND
3074: IFFALSE 3596
3076: GO 3078
3078: DISABLE
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
3085: PPUSH
// begin enable ;
3086: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: LD_EXP 42
3096: PPUSH
3097: LD_INT 25
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PPUSH
3107: CALL_OW 72
3111: PUSH
3112: LD_EXP 39
3116: ADD
3117: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_EXP 42
3127: PPUSH
3128: LD_INT 25
3130: PUSH
3131: LD_INT 2
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 72
3142: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3143: LD_ADDR_VAR 0 5
3147: PUSH
3148: LD_INT 22
3150: PUSH
3151: LD_INT 5
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: LD_INT 21
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: LD_INT 24
3173: PUSH
3174: LD_INT 1000
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 69
3194: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3195: LD_ADDR_VAR 0 4
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 5
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 30
3212: PUSH
3213: LD_INT 4
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PPUSH
3224: CALL_OW 69
3228: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3229: LD_VAR 0 4
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: CALL_OW 302
3242: IFFALSE 3306
// for i in sol do
3244: LD_ADDR_VAR 0 1
3248: PUSH
3249: LD_VAR 0 3
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3304
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3257: LD_VAR 0 1
3261: PPUSH
3262: CALL_OW 256
3266: PUSH
3267: LD_INT 999
3269: LESS
3270: PUSH
3271: LD_VAR 0 1
3275: PPUSH
3276: CALL_OW 310
3280: NOT
3281: AND
3282: IFFALSE 3302
// ComEnterUnit ( i , arm [ 1 ] ) ;
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_VAR 0 4
3293: PUSH
3294: LD_INT 1
3296: ARRAY
3297: PPUSH
3298: CALL_OW 120
3302: GO 3254
3304: POP
3305: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3306: LD_VAR 0 2
3310: NOT
3311: PUSH
3312: LD_INT 22
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 21
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PPUSH
3336: CALL_OW 69
3340: NOT
3341: AND
3342: IFFALSE 3434
// begin uc_side := 5 ;
3344: LD_ADDR_OWVAR 20
3348: PUSH
3349: LD_INT 5
3351: ST_TO_ADDR
// uc_nation := 2 ;
3352: LD_ADDR_OWVAR 21
3356: PUSH
3357: LD_INT 2
3359: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3360: LD_INT 0
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_INT 2
3368: PPUSH
3369: CALL_OW 380
// eng := CreateHuman ;
3373: LD_ADDR_VAR 0 2
3377: PUSH
3378: CALL_OW 44
3382: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_INT 102
3390: PPUSH
3391: LD_INT 8
3393: PPUSH
3394: LD_INT 0
3396: PPUSH
3397: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3401: LD_VAR 0 2
3405: PPUSH
3406: LD_INT 110
3408: PPUSH
3409: LD_INT 60
3411: PPUSH
3412: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3416: LD_ADDR_EXP 42
3420: PUSH
3421: LD_EXP 42
3425: PUSH
3426: LD_VAR 0 2
3430: UNION
3431: ST_TO_ADDR
// end else
3432: GO 3596
// begin for i in eng do
3434: LD_ADDR_VAR 0 1
3438: PUSH
3439: LD_VAR 0 2
3443: PUSH
3444: FOR_IN
3445: IFFALSE 3594
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3447: LD_INT 10
3449: PPUSH
3450: LD_INT 1
3452: PPUSH
3453: CALL_OW 287
3457: IFFALSE 3508
// begin if IsInUnit ( i ) then
3459: LD_VAR 0 1
3463: PPUSH
3464: CALL_OW 310
3468: IFFALSE 3479
// ComExitBuilding ( i ) ;
3470: LD_VAR 0 1
3474: PPUSH
3475: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_INT 10
3486: PPUSH
3487: CALL_OW 308
3491: NOT
3492: IFFALSE 3506
// AddComMoveToArea ( i , collectFarmerArea ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: LD_INT 10
3501: PPUSH
3502: CALL_OW 173
// end else
3506: GO 3592
// begin if damagedBuilding then
3508: LD_VAR 0 5
3512: IFFALSE 3556
// begin if IsInUnit ( i ) then
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 310
3523: IFFALSE 3536
// ComExitBuilding ( i ) else
3525: LD_VAR 0 1
3529: PPUSH
3530: CALL_OW 122
3534: GO 3554
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3536: LD_VAR 0 1
3540: PPUSH
3541: LD_VAR 0 5
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 130
// end else
3554: GO 3592
// if not IsInUnit ( i ) and not HasTask ( i ) then
3556: LD_VAR 0 1
3560: PPUSH
3561: CALL_OW 310
3565: NOT
3566: PUSH
3567: LD_VAR 0 1
3571: PPUSH
3572: CALL_OW 314
3576: NOT
3577: AND
3578: IFFALSE 3592
// ComEnterUnit ( i , arDepot ) ;
3580: LD_VAR 0 1
3584: PPUSH
3585: LD_INT 5
3587: PPUSH
3588: CALL_OW 120
// end ; end ;
3592: GO 3444
3594: POP
3595: POP
// end ; end ;
3596: PPOPN 5
3598: END
// export function CargoEvacuation ; begin
3599: LD_INT 0
3601: PPUSH
// wait ( 0 0$3 ) ;
3602: LD_INT 105
3604: PPUSH
3605: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3609: LD_ADDR_EXP 22
3613: PUSH
3614: LD_EXP 22
3618: PUSH
3619: LD_INT 1
3621: MINUS
3622: ST_TO_ADDR
// if omarCargoCounter = 0 then
3623: LD_EXP 22
3627: PUSH
3628: LD_INT 0
3630: EQUAL
3631: IFFALSE 3635
// exit ;
3633: GO 3942
// if omarCargo then
3635: LD_EXP 46
3639: IFFALSE 3650
// RemoveUnit ( omarCargo ) ;
3641: LD_EXP 46
3645: PPUSH
3646: CALL_OW 64
// omarCargo := PrepareCargo ;
3650: LD_ADDR_EXP 46
3654: PUSH
3655: CALL 3947 0 0
3659: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3660: LD_EXP 46
3664: PPUSH
3665: LD_INT 0
3667: PPUSH
3668: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3672: LD_EXP 46
3676: PPUSH
3677: LD_INT 107
3679: PPUSH
3680: LD_INT 59
3682: PPUSH
3683: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3687: LD_INT 35
3689: PPUSH
3690: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3694: LD_EXP 46
3698: PPUSH
3699: LD_INT 107
3701: PPUSH
3702: LD_INT 59
3704: PPUSH
3705: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3709: LD_EXP 46
3713: PPUSH
3714: CALL_OW 302
3718: NOT
3719: PUSH
3720: LD_EXP 46
3724: PPUSH
3725: CALL_OW 301
3729: OR
3730: IFFALSE 3734
// exit ;
3732: GO 3942
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3734: LD_EXP 46
3738: PPUSH
3739: LD_INT 107
3741: PPUSH
3742: LD_INT 59
3744: PPUSH
3745: CALL_OW 307
3749: PUSH
3750: LD_EXP 46
3754: PPUSH
3755: LD_INT 5
3757: PPUSH
3758: CALL_OW 296
3762: PUSH
3763: LD_INT 6
3765: LESS
3766: OR
3767: IFFALSE 3687
// SetTag ( omarCargo , 1 ) ;
3769: LD_EXP 46
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: CALL_OW 109
// wait ( 0 0$03 ) ;
3781: LD_INT 105
3783: PPUSH
3784: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3788: LD_EXP 46
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3803: LD_EXP 46
3807: PPUSH
3808: LD_INT 103
3810: PPUSH
3811: LD_INT 9
3813: PPUSH
3814: CALL_OW 171
// wait ( 0 0$1 ) ;
3818: LD_INT 35
3820: PPUSH
3821: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3825: LD_EXP 46
3829: PPUSH
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 100
3835: PPUSH
3836: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3847: LD_EXP 46
3851: PPUSH
3852: LD_INT 103
3854: PPUSH
3855: LD_INT 9
3857: PPUSH
3858: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3862: LD_EXP 46
3866: PPUSH
3867: CALL_OW 302
3871: NOT
3872: PUSH
3873: LD_EXP 46
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3887
// exit ;
3885: GO 3942
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3887: LD_EXP 46
3891: PPUSH
3892: LD_INT 103
3894: PPUSH
3895: LD_INT 9
3897: PPUSH
3898: CALL_OW 307
3902: PUSH
3903: LD_EXP 46
3907: PPUSH
3908: LD_INT 3
3910: PPUSH
3911: CALL_OW 308
3915: OR
3916: PUSH
3917: LD_EXP 46
3921: PPUSH
3922: CALL_OW 110
3926: PUSH
3927: LD_INT 0
3929: GREATER
3930: AND
3931: IFFALSE 3840
// RemoveUnit ( omarCargo ) ;
3933: LD_EXP 46
3937: PPUSH
3938: CALL_OW 64
// end ;
3942: LD_VAR 0 1
3946: RET
// export function PrepareCargo ; var un , veh ; begin
3947: LD_INT 0
3949: PPUSH
3950: PPUSH
3951: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: LD_INT 5
3959: PPUSH
3960: LD_INT 2
3962: PPUSH
3963: LD_INT 14
3965: PPUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 32
3974: PPUSH
3975: LD_INT 80
3977: PPUSH
3978: CALL 349 0 7
3982: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3983: LD_VAR 0 3
3987: PPUSH
3988: LD_INT 4
3990: PPUSH
3991: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 101
4002: PPUSH
4003: LD_INT 8
4005: PPUSH
4006: LD_INT 0
4008: PPUSH
4009: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4013: LD_INT 0
4015: PPUSH
4016: LD_INT 3
4018: PPUSH
4019: LD_INT 4
4021: PPUSH
4022: CALL_OW 380
// un := CreateHuman ;
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: CALL_OW 44
4035: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4036: LD_VAR 0 2
4040: PPUSH
4041: LD_VAR 0 3
4045: PPUSH
4046: CALL_OW 52
// result := veh ;
4050: LD_ADDR_VAR 0 1
4054: PUSH
4055: LD_VAR 0 3
4059: ST_TO_ADDR
// end ; end_of_file
4060: LD_VAR 0 1
4064: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4065: LD_INT 0
4067: PPUSH
4068: PPUSH
4069: PPUSH
// usForces := [ ] ;
4070: LD_ADDR_EXP 47
4074: PUSH
4075: EMPTY
4076: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4077: LD_ADDR_EXP 49
4081: PUSH
4082: LD_INT 6
4084: PUSH
4085: LD_INT 32
4087: PUSH
4088: LD_INT 27
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: PUSH
4100: LD_INT 4
4102: PUSH
4103: LD_INT 43
4105: PUSH
4106: LD_INT 24
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 27
4120: PUSH
4121: LD_INT 29
4123: PUSH
4124: LD_INT 21
4126: PUSH
4127: LD_INT 0
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4141: LD_INT 11
4143: PPUSH
4144: CALL_OW 274
4148: PPUSH
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 150
4154: PUSH
4155: LD_INT 120
4157: PUSH
4158: LD_INT 100
4160: PUSH
4161: LD_INT 80
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: LD_OWVAR 67
4174: ARRAY
4175: PPUSH
4176: CALL_OW 277
// if Difficulty = 1 then
4180: LD_OWVAR 67
4184: PUSH
4185: LD_INT 1
4187: EQUAL
4188: IFFALSE 4197
// RemoveUnit ( hillBun ) ;
4190: LD_INT 14
4192: PPUSH
4193: CALL_OW 64
// uc_side := 1 ;
4197: LD_ADDR_OWVAR 20
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// uc_nation := 1 ;
4205: LD_ADDR_OWVAR 21
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// hc_gallery :=  ;
4213: LD_ADDR_OWVAR 33
4217: PUSH
4218: LD_STRING 
4220: ST_TO_ADDR
// hc_name :=  ;
4221: LD_ADDR_OWVAR 26
4225: PUSH
4226: LD_STRING 
4228: ST_TO_ADDR
// hc_importance := 0 ;
4229: LD_ADDR_OWVAR 32
4233: PUSH
4234: LD_INT 0
4236: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4237: LD_INT 1
4239: PPUSH
4240: LD_INT 1
4242: PPUSH
4243: LD_INT 3
4245: PPUSH
4246: CALL_OW 380
// usCommander := CreateHuman ;
4250: LD_ADDR_EXP 48
4254: PUSH
4255: CALL_OW 44
4259: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4260: LD_EXP 48
4264: PPUSH
4265: LD_INT 11
4267: PPUSH
4268: CALL_OW 52
// if Difficulty > 1 then
4272: LD_OWVAR 67
4276: PUSH
4277: LD_INT 1
4279: GREATER
4280: IFFALSE 4362
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4282: LD_INT 0
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: LD_INT 3
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: PUSH
4302: LD_OWVAR 67
4306: ARRAY
4307: PPUSH
4308: CALL_OW 380
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 3
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// usForces := usForces union un ;
4322: LD_ADDR_EXP 47
4326: PUSH
4327: LD_EXP 47
4331: PUSH
4332: LD_VAR 0 3
4336: UNION
4337: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4338: LD_VAR 0 3
4342: PPUSH
4343: LD_INT 1
4345: PPUSH
4346: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4350: LD_VAR 0 3
4354: PPUSH
4355: LD_INT 14
4357: PPUSH
4358: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: DOUBLE
4368: LD_INT 1
4370: DEC
4371: ST_TO_ADDR
4372: LD_INT 2
4374: PUSH
4375: LD_INT 3
4377: PUSH
4378: LD_INT 4
4380: PUSH
4381: LD_INT 4
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: PUSH
4390: LD_OWVAR 67
4394: ARRAY
4395: PUSH
4396: FOR_TO
4397: IFFALSE 4543
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4399: LD_INT 0
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: LD_INT 1
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: LD_INT 3
4413: PUSH
4414: LD_INT 3
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: PUSH
4423: LD_OWVAR 67
4427: ARRAY
4428: PPUSH
4429: CALL_OW 380
// un := CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// usForces := usForces union un ;
4443: LD_ADDR_EXP 47
4447: PUSH
4448: LD_EXP 47
4452: PUSH
4453: LD_VAR 0 3
4457: UNION
4458: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4459: LD_VAR 0 3
4463: PPUSH
4464: LD_INT 39
4466: PPUSH
4467: LD_INT 24
4469: PPUSH
4470: LD_INT 4
4472: PPUSH
4473: LD_INT 0
4475: PPUSH
4476: CALL_OW 50
// if i < 3 then
4480: LD_VAR 0 2
4484: PUSH
4485: LD_INT 3
4487: LESS
4488: IFFALSE 4541
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4490: LD_VAR 0 3
4494: PPUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 58
4507: PUSH
4508: EMPTY
4509: LIST
4510: PUSH
4511: LD_INT 30
4513: PUSH
4514: LD_INT 31
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: LIST
4525: PPUSH
4526: CALL_OW 69
4530: PUSH
4531: LD_VAR 0 2
4535: ARRAY
4536: PPUSH
4537: CALL_OW 120
// end ;
4541: GO 4396
4543: POP
4544: POP
// for i := 1 to 2 do
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: DOUBLE
4551: LD_INT 1
4553: DEC
4554: ST_TO_ADDR
4555: LD_INT 2
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4623
// begin PrepareHuman ( false , 2 , 2 ) ;
4561: LD_INT 0
4563: PPUSH
4564: LD_INT 2
4566: PPUSH
4567: LD_INT 2
4569: PPUSH
4570: CALL_OW 380
// un := CreateHuman ;
4574: LD_ADDR_VAR 0 3
4578: PUSH
4579: CALL_OW 44
4583: ST_TO_ADDR
// usForces := usForces union un ;
4584: LD_ADDR_EXP 47
4588: PUSH
4589: LD_EXP 47
4593: PUSH
4594: LD_VAR 0 3
4598: UNION
4599: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4600: LD_VAR 0 3
4604: PPUSH
4605: LD_INT 39
4607: PPUSH
4608: LD_INT 24
4610: PPUSH
4611: LD_INT 4
4613: PPUSH
4614: LD_INT 0
4616: PPUSH
4617: CALL_OW 50
// end ;
4621: GO 4558
4623: POP
4624: POP
// PrepareHuman ( false , 4 , 1 ) ;
4625: LD_INT 0
4627: PPUSH
4628: LD_INT 4
4630: PPUSH
4631: LD_INT 1
4633: PPUSH
4634: CALL_OW 380
// un := CreateHuman ;
4638: LD_ADDR_VAR 0 3
4642: PUSH
4643: CALL_OW 44
4647: ST_TO_ADDR
// usForces := usForces union un ;
4648: LD_ADDR_EXP 47
4652: PUSH
4653: LD_EXP 47
4657: PUSH
4658: LD_VAR 0 3
4662: UNION
4663: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4664: LD_VAR 0 3
4668: PPUSH
4669: LD_INT 39
4671: PPUSH
4672: LD_INT 24
4674: PPUSH
4675: LD_INT 4
4677: PPUSH
4678: LD_INT 0
4680: PPUSH
4681: CALL_OW 50
// end ;
4685: LD_VAR 0 1
4689: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4690: LD_EXP 47
4694: PUSH
4695: LD_EXP 7
4699: NOT
4700: AND
4701: PUSH
4702: LD_EXP 15
4706: NOT
4707: AND
4708: IFFALSE 5139
4710: GO 4712
4712: DISABLE
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
// begin enable ;
4720: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4721: LD_ADDR_VAR 0 3
4725: PUSH
4726: LD_EXP 47
4730: PPUSH
4731: LD_INT 25
4733: PUSH
4734: LD_INT 2
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 72
4745: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4746: LD_ADDR_VAR 0 4
4750: PUSH
4751: LD_EXP 47
4755: PPUSH
4756: LD_INT 25
4758: PUSH
4759: LD_INT 1
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PPUSH
4766: CALL_OW 72
4770: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4771: LD_ADDR_VAR 0 5
4775: PUSH
4776: LD_EXP 47
4780: PPUSH
4781: LD_INT 25
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PPUSH
4791: CALL_OW 72
4795: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4796: LD_INT 7
4798: PPUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 2
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PPUSH
4809: CALL_OW 70
4813: PUSH
4814: LD_INT 1
4816: EQUAL
4817: IFFALSE 4893
// for i in sol do
4819: LD_ADDR_VAR 0 1
4823: PUSH
4824: LD_VAR 0 4
4828: PUSH
4829: FOR_IN
4830: IFFALSE 4891
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4832: LD_VAR 0 1
4836: PPUSH
4837: CALL_OW 310
4841: NOT
4842: PUSH
4843: LD_VAR 0 1
4847: PPUSH
4848: CALL_OW 310
4852: PPUSH
4853: CALL_OW 266
4857: PUSH
4858: LD_INT 4
4860: EQUAL
4861: NOT
4862: OR
4863: IFFALSE 4889
// begin ComExitBuilding ( i ) ;
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4874: LD_VAR 0 1
4878: PPUSH
4879: LD_INT 37
4881: PPUSH
4882: LD_INT 23
4884: PPUSH
4885: CALL_OW 174
// end ;
4889: GO 4829
4891: POP
4892: POP
// if eng then
4893: LD_VAR 0 3
4897: IFFALSE 5139
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4899: LD_ADDR_VAR 0 2
4903: PUSH
4904: LD_INT 22
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: LD_INT 95
4916: PUSH
4917: LD_INT 7
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 21
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 3
4936: PUSH
4937: LD_INT 24
4939: PUSH
4940: LD_INT 1000
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: ST_TO_ADDR
// if b then
4962: LD_VAR 0 2
4966: IFFALSE 4997
// begin ComExitBuilding ( eng ) ;
4968: LD_VAR 0 3
4972: PPUSH
4973: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4977: LD_VAR 0 3
4981: PPUSH
4982: LD_VAR 0 2
4986: PUSH
4987: LD_INT 1
4989: ARRAY
4990: PPUSH
4991: CALL_OW 190
// end else
4995: GO 5139
// begin for i in eng do
4997: LD_ADDR_VAR 0 1
5001: PUSH
5002: LD_VAR 0 3
5006: PUSH
5007: FOR_IN
5008: IFFALSE 5137
// if not HasTask ( i ) then
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 314
5019: NOT
5020: IFFALSE 5135
// begin if americanBuildList then
5022: LD_EXP 49
5026: IFFALSE 5111
// begin if IsInUnit ( i ) then
5028: LD_VAR 0 1
5032: PPUSH
5033: CALL_OW 310
5037: IFFALSE 5048
// ComExitBuilding ( i ) ;
5039: LD_VAR 0 1
5043: PPUSH
5044: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5048: LD_VAR 0 1
5052: PPUSH
5053: LD_EXP 49
5057: PUSH
5058: LD_INT 1
5060: ARRAY
5061: PUSH
5062: LD_INT 1
5064: ARRAY
5065: PPUSH
5066: LD_EXP 49
5070: PUSH
5071: LD_INT 1
5073: ARRAY
5074: PUSH
5075: LD_INT 2
5077: ARRAY
5078: PPUSH
5079: LD_EXP 49
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PUSH
5088: LD_INT 3
5090: ARRAY
5091: PPUSH
5092: LD_EXP 49
5096: PUSH
5097: LD_INT 1
5099: ARRAY
5100: PUSH
5101: LD_INT 4
5103: ARRAY
5104: PPUSH
5105: CALL_OW 205
// end else
5109: GO 5135
// if not IsInUnit ( i ) then
5111: LD_VAR 0 1
5115: PPUSH
5116: CALL_OW 310
5120: NOT
5121: IFFALSE 5135
// ComEnterUnit ( i , usDepot ) ;
5123: LD_VAR 0 1
5127: PPUSH
5128: LD_INT 11
5130: PPUSH
5131: CALL_OW 120
// end ;
5135: GO 5007
5137: POP
5138: POP
// end ; end ; end ;
5139: PPOPN 5
5141: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5142: LD_INT 0
5144: PPUSH
5145: PPUSH
5146: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5147: LD_ADDR_VAR 0 3
5151: PUSH
5152: LD_INT 35
5154: PUSH
5155: LD_INT 45
5157: PUSH
5158: LD_INT 48
5160: PUSH
5161: LD_INT 82
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: ST_TO_ADDR
// for i in tech do
5170: LD_ADDR_VAR 0 4
5174: PUSH
5175: LD_VAR 0 3
5179: PUSH
5180: FOR_IN
5181: IFFALSE 5199
// AddComResearch ( lab , i ) ;
5183: LD_VAR 0 1
5187: PPUSH
5188: LD_VAR 0 4
5192: PPUSH
5193: CALL_OW 184
5197: GO 5180
5199: POP
5200: POP
// end ;
5201: LD_VAR 0 2
5205: RET
// every 4 4$00 + 3 3$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5206: LD_EXP 13
5210: PUSH
5211: LD_EXP 24
5215: PUSH
5216: LD_EXP 28
5220: LESSEQUAL
5221: AND
5222: IFFALSE 5247
5224: GO 5226
5226: DISABLE
// begin enable ;
5227: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5228: LD_INT 35
5230: PPUSH
5231: LD_INT 2065
5233: PPUSH
5234: CALL_OW 12
5238: PPUSH
5239: CALL_OW 67
// SendConvoy ;
5243: CALL 5353 0 0
// end ;
5247: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5248: LD_EXP 7
5252: PUSH
5253: LD_EXP 19
5257: AND
5258: IFFALSE 5352
5260: GO 5262
5262: DISABLE
// begin if americanHasEscaped then
5263: LD_EXP 9
5267: IFFALSE 5278
// wait ( 3 3$20 ) else
5269: LD_INT 7000
5271: PPUSH
5272: CALL_OW 67
5276: GO 5285
// wait ( 6 6$40 ) ;
5278: LD_INT 14000
5280: PPUSH
5281: CALL_OW 67
// SendAttack ;
5285: CALL 6126 0 0
// repeat wait ( [ 7 7$40 , 6 6$40 , 6 6$20 , 5 5$50 ] [ Difficulty ] ) ;
5289: LD_INT 16100
5291: PUSH
5292: LD_INT 14000
5294: PUSH
5295: LD_INT 13300
5297: PUSH
5298: LD_INT 12250
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: PPUSH
5313: CALL_OW 67
// SendAttack ;
5317: CALL 6126 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5321: LD_EXP 20
5325: PUSH
5326: LD_INT 5
5328: PUSH
5329: LD_INT 6
5331: PUSH
5332: LD_INT 7
5334: PUSH
5335: LD_INT 8
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: PUSH
5344: LD_OWVAR 67
5348: ARRAY
5349: LESS
5350: IFFALSE 5289
// end ;
5352: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5353: LD_INT 0
5355: PPUSH
5356: PPUSH
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
5361: PPUSH
5362: PPUSH
// road := rand ( 1 , 2 ) ;
5363: LD_ADDR_VAR 0 4
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 2
5373: PPUSH
5374: CALL_OW 12
5378: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5379: LD_ADDR_VAR 0 8
5383: PUSH
5384: LD_INT 3
5386: PUSH
5387: LD_INT 8
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: PUSH
5394: LD_VAR 0 4
5398: ARRAY
5399: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5400: LD_ADDR_VAR 0 5
5404: PUSH
5405: LD_INT 35
5407: PUSH
5408: LD_INT 66
5410: PUSH
5411: LD_INT 1
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 101
5421: PUSH
5422: LD_INT 8
5424: PUSH
5425: LD_INT 4
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5437: LD_ADDR_VAR 0 6
5441: PUSH
5442: LD_INT 34
5444: PUSH
5445: LD_INT 67
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PUSH
5452: LD_INT 38
5454: PUSH
5455: LD_INT 62
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 43
5464: PUSH
5465: LD_INT 54
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: LD_INT 57
5474: PUSH
5475: LD_INT 57
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 77
5484: PUSH
5485: LD_INT 71
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 86
5494: PUSH
5495: LD_INT 60
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 89
5504: PUSH
5505: LD_INT 35
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 93
5514: PUSH
5515: LD_INT 17
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 97
5524: PUSH
5525: LD_INT 10
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: LD_INT 103
5534: PUSH
5535: LD_INT 9
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: ST_TO_ADDR
// if road = 2 then
5554: LD_VAR 0 4
5558: PUSH
5559: LD_INT 2
5561: EQUAL
5562: IFFALSE 5579
// points := ReverseArray ( points ) ;
5564: LD_ADDR_VAR 0 6
5568: PUSH
5569: LD_VAR 0 6
5573: PPUSH
5574: CALL 72780 0 1
5578: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5579: LD_INT 4
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: LD_INT 2
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 12
5596: PPUSH
5597: LD_INT 80
5599: PPUSH
5600: CALL 349 0 7
// veh := CreateVehicle ;
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: CALL_OW 45
5613: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5614: LD_VAR 0 3
5618: PPUSH
5619: LD_VAR 0 5
5623: PUSH
5624: LD_VAR 0 4
5628: ARRAY
5629: PUSH
5630: LD_INT 3
5632: ARRAY
5633: PPUSH
5634: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_VAR 0 5
5647: PUSH
5648: LD_VAR 0 4
5652: ARRAY
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: LD_VAR 0 5
5662: PUSH
5663: LD_VAR 0 4
5667: ARRAY
5668: PUSH
5669: LD_INT 2
5671: ARRAY
5672: PPUSH
5673: LD_INT 0
5675: PPUSH
5676: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5680: LD_INT 0
5682: PPUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PPUSH
5691: CALL_OW 380
// un := CreateHuman ;
5695: LD_ADDR_VAR 0 2
5699: PUSH
5700: CALL_OW 44
5704: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5705: LD_VAR 0 2
5709: PPUSH
5710: LD_VAR 0 3
5714: PPUSH
5715: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5719: LD_INT 70
5721: PUSH
5722: LD_INT 66
5724: PUSH
5725: LD_INT 62
5727: PUSH
5728: LD_INT 58
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: LD_OWVAR 67
5741: ARRAY
5742: PPUSH
5743: CALL_OW 13
5747: PUSH
5748: LD_OWVAR 1
5752: PUSH
5753: LD_INT 30
5755: MOD
5756: PLUS
5757: PUSH
5758: LD_EXP 24
5762: PUSH
5763: LD_INT 4
5765: LESS
5766: OR
5767: IFFALSE 5784
// SetCargo ( veh , mat_cans , 100 ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: LD_INT 1
5776: PPUSH
5777: LD_INT 100
5779: PPUSH
5780: CALL_OW 290
// for i := 2 to points do
5784: LD_ADDR_VAR 0 7
5788: PUSH
5789: DOUBLE
5790: LD_INT 2
5792: DEC
5793: ST_TO_ADDR
5794: LD_VAR 0 6
5798: PUSH
5799: FOR_TO
5800: IFFALSE 5843
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5802: LD_VAR 0 3
5806: PPUSH
5807: LD_VAR 0 6
5811: PUSH
5812: LD_VAR 0 7
5816: ARRAY
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PPUSH
5822: LD_VAR 0 6
5826: PUSH
5827: LD_VAR 0 7
5831: ARRAY
5832: PUSH
5833: LD_INT 2
5835: ARRAY
5836: PPUSH
5837: CALL_OW 171
5841: GO 5799
5843: POP
5844: POP
// convoyCounter := convoyCounter + 1 ;
5845: LD_ADDR_EXP 24
5849: PUSH
5850: LD_EXP 24
5854: PUSH
5855: LD_INT 1
5857: PLUS
5858: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5859: LD_INT 35
5861: PPUSH
5862: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5866: LD_VAR 0 3
5870: PPUSH
5871: CALL_OW 255
5875: PUSH
5876: LD_INT 4
5878: NONEQUAL
5879: IFFALSE 5892
// begin ComStop ( veh ) ;
5881: LD_VAR 0 3
5885: PPUSH
5886: CALL_OW 141
// exit ;
5890: GO 6121
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5892: LD_VAR 0 3
5896: PPUSH
5897: CALL_OW 314
5901: NOT
5902: PUSH
5903: LD_VAR 0 3
5907: PPUSH
5908: CALL_OW 302
5912: AND
5913: IFFALSE 5954
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5915: LD_VAR 0 3
5919: PPUSH
5920: LD_VAR 0 6
5924: PUSH
5925: LD_VAR 0 6
5929: ARRAY
5930: PUSH
5931: LD_INT 1
5933: ARRAY
5934: PPUSH
5935: LD_VAR 0 6
5939: PUSH
5940: LD_VAR 0 6
5944: ARRAY
5945: PUSH
5946: LD_INT 2
5948: ARRAY
5949: PPUSH
5950: CALL_OW 111
// if not IsInUnit ( un ) then
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 310
5963: NOT
5964: IFFALSE 6005
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_VAR 0 6
5975: PUSH
5976: LD_VAR 0 6
5980: ARRAY
5981: PUSH
5982: LD_INT 1
5984: ARRAY
5985: PPUSH
5986: LD_VAR 0 6
5990: PUSH
5991: LD_VAR 0 6
5995: ARRAY
5996: PUSH
5997: LD_INT 2
5999: ARRAY
6000: PPUSH
6001: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6005: LD_VAR 0 3
6009: PPUSH
6010: LD_VAR 0 8
6014: PPUSH
6015: CALL_OW 308
6019: PUSH
6020: LD_VAR 0 2
6024: PPUSH
6025: LD_VAR 0 8
6029: PPUSH
6030: CALL_OW 308
6034: OR
6035: IFFALSE 5859
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6037: LD_VAR 0 2
6041: PPUSH
6042: CALL_OW 302
6046: PUSH
6047: LD_VAR 0 3
6051: PPUSH
6052: CALL_OW 302
6056: NOT
6057: AND
6058: PUSH
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_VAR 0 8
6068: PPUSH
6069: CALL_OW 308
6073: AND
6074: IFFALSE 6085
// RemoveUnit ( un ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6085: LD_VAR 0 3
6089: PPUSH
6090: LD_VAR 0 8
6094: PPUSH
6095: CALL_OW 308
6099: PUSH
6100: LD_VAR 0 3
6104: PPUSH
6105: CALL_OW 302
6109: AND
6110: IFFALSE 6121
// RemoveUnit ( veh ) ;
6112: LD_VAR 0 3
6116: PPUSH
6117: CALL_OW 64
// end ;
6121: LD_VAR 0 1
6125: RET
// export function SendAttack ; var un , veh , i ; begin
6126: LD_INT 0
6128: PPUSH
6129: PPUSH
6130: PPUSH
6131: PPUSH
// if blockAttack then
6132: LD_EXP 29
6136: IFFALSE 6159
// begin repeat wait ( 0 0$1 ) ;
6138: LD_INT 35
6140: PPUSH
6141: CALL_OW 67
// until not blockAttack ;
6145: LD_EXP 29
6149: NOT
6150: IFFALSE 6138
// wait ( 0 0$5 ) ;
6152: LD_INT 175
6154: PPUSH
6155: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 21
6171: PUSH
6172: LD_INT 1
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: PUSH
6188: LD_INT 10
6190: GREATER
6191: IFFALSE 6234
// begin repeat wait ( 0 0$1 ) ;
6193: LD_INT 35
6195: PPUSH
6196: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6200: LD_INT 22
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 21
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PPUSH
6224: CALL_OW 69
6228: PUSH
6229: LD_INT 10
6231: LESSEQUAL
6232: IFFALSE 6193
// end ; IncomingAttack ;
6234: CALL 15548 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6238: LD_INT 2100
6240: PPUSH
6241: LD_INT 3500
6243: PPUSH
6244: CALL_OW 12
6248: PPUSH
6249: CALL_OW 67
// if blockAttack then
6253: LD_EXP 29
6257: IFFALSE 6280
// begin repeat wait ( 0 0$1 ) ;
6259: LD_INT 35
6261: PPUSH
6262: CALL_OW 67
// until not blockAttack ;
6266: LD_EXP 29
6270: NOT
6271: IFFALSE 6259
// wait ( 0 0$5 ) ;
6273: LD_INT 175
6275: PPUSH
6276: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6280: LD_ADDR_VAR 0 4
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_INT 3
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 5
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_OWVAR 67
6312: ARRAY
6313: PUSH
6314: LD_EXP 20
6318: PUSH
6319: LD_INT 3
6321: DIV
6322: PLUS
6323: PUSH
6324: FOR_TO
6325: IFFALSE 6441
// begin uc_side := 1 ;
6327: LD_ADDR_OWVAR 20
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// uc_nation := 1 ;
6335: LD_ADDR_OWVAR 21
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6343: LD_INT 0
6345: PPUSH
6346: LD_INT 1
6348: PPUSH
6349: LD_INT 2
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: CALL_OW 380
// un := CreateHuman ;
6377: LD_ADDR_VAR 0 2
6381: PUSH
6382: CALL_OW 44
6386: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6387: LD_VAR 0 2
6391: PPUSH
6392: LD_INT 37
6394: PPUSH
6395: LD_INT 70
6397: PPUSH
6398: LD_INT 3
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 50
// usAttackers := usAttackers union un ;
6408: LD_ADDR_EXP 50
6412: PUSH
6413: LD_EXP 50
6417: PUSH
6418: LD_VAR 0 2
6422: UNION
6423: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6424: LD_VAR 0 2
6428: PPUSH
6429: LD_INT 40
6431: PPUSH
6432: LD_INT 65
6434: PPUSH
6435: CALL_OW 111
// end ;
6439: GO 6324
6441: POP
6442: POP
// uc_side := 1 ;
6443: LD_ADDR_OWVAR 20
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// uc_nation := 1 ;
6451: LD_ADDR_OWVAR 21
6455: PUSH
6456: LD_INT 1
6458: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6459: LD_INT 0
6461: PPUSH
6462: LD_INT 4
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: CALL_OW 380
// un := CreateHuman ;
6472: LD_ADDR_VAR 0 2
6476: PUSH
6477: CALL_OW 44
6481: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6482: LD_VAR 0 2
6486: PPUSH
6487: LD_INT 37
6489: PPUSH
6490: LD_INT 70
6492: PPUSH
6493: LD_INT 3
6495: PPUSH
6496: LD_INT 0
6498: PPUSH
6499: CALL_OW 50
// usAttackers := usAttackers union un ;
6503: LD_ADDR_EXP 50
6507: PUSH
6508: LD_EXP 50
6512: PUSH
6513: LD_VAR 0 2
6517: UNION
6518: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6519: LD_VAR 0 2
6523: PPUSH
6524: LD_INT 40
6526: PPUSH
6527: LD_INT 65
6529: PPUSH
6530: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6534: LD_ADDR_VAR 0 4
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_OWVAR 67
6548: PUSH
6549: LD_EXP 20
6553: PUSH
6554: LD_INT 4
6556: DIV
6557: PLUS
6558: PUSH
6559: FOR_TO
6560: IFFALSE 6756
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_INT 1
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: LD_INT 2
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 1
6589: PPUSH
6590: LD_INT 3
6592: PPUSH
6593: CALL_OW 12
6597: ARRAY
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 2
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: LD_INT 90
6633: PPUSH
6634: CALL 349 0 7
6638: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6639: LD_VAR 0 3
6643: PPUSH
6644: LD_INT 35
6646: PPUSH
6647: LD_INT 65
6649: PPUSH
6650: LD_INT 0
6652: PPUSH
6653: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6657: LD_INT 0
6659: PPUSH
6660: LD_INT 3
6662: PPUSH
6663: LD_OWVAR 67
6667: PUSH
6668: LD_INT 1
6670: PLUS
6671: PPUSH
6672: CALL_OW 380
// un := CreateHuman ;
6676: LD_ADDR_VAR 0 2
6680: PUSH
6681: CALL_OW 44
6685: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 3
6695: PPUSH
6696: CALL_OW 52
// usAttackers := usAttackers union un ;
6700: LD_ADDR_EXP 50
6704: PUSH
6705: LD_EXP 50
6709: PUSH
6710: LD_VAR 0 2
6714: UNION
6715: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6716: LD_VAR 0 3
6720: PPUSH
6721: LD_INT 39
6723: PPUSH
6724: LD_INT 60
6726: PPUSH
6727: CALL_OW 111
// wait ( 0 0$3 ) ;
6731: LD_INT 105
6733: PPUSH
6734: CALL_OW 67
// usAttackers := usAttackers union veh ;
6738: LD_ADDR_EXP 50
6742: PUSH
6743: LD_EXP 50
6747: PUSH
6748: LD_VAR 0 3
6752: UNION
6753: ST_TO_ADDR
// end ;
6754: GO 6559
6756: POP
6757: POP
// attackWave := attackWave + 1 ;
6758: LD_ADDR_EXP 20
6762: PUSH
6763: LD_EXP 20
6767: PUSH
6768: LD_INT 1
6770: PLUS
6771: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6772: LD_EXP 25
6776: PPUSH
6777: CALL_OW 427
// end ;
6781: LD_VAR 0 1
6785: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6786: LD_INT 0
6788: PPUSH
6789: PPUSH
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
// if retreatAllowed then
6799: LD_EXP 12
6803: IFFALSE 6815
// strategy := 2 else
6805: LD_ADDR_VAR 0 5
6809: PUSH
6810: LD_INT 2
6812: ST_TO_ADDR
6813: GO 6831
// strategy := rand ( 0 , 2 ) ;
6815: LD_ADDR_VAR 0 5
6819: PUSH
6820: LD_INT 0
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: CALL_OW 12
6830: ST_TO_ADDR
// attackFormula := [ ] ;
6831: LD_ADDR_VAR 0 6
6835: PUSH
6836: EMPTY
6837: ST_TO_ADDR
// case strategy of 0 :
6838: LD_VAR 0 5
6842: PUSH
6843: LD_INT 0
6845: DOUBLE
6846: EQUAL
6847: IFTRUE 6851
6849: GO 7181
6851: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6852: LD_INT 11
6854: PPUSH
6855: LD_INT 22
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 30
6867: PUSH
6868: LD_INT 4
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PPUSH
6879: CALL_OW 70
6883: NOT
6884: IFFALSE 6956
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6886: LD_ADDR_VAR 0 6
6890: PUSH
6891: LD_INT 41
6893: PUSH
6894: LD_INT 34
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: PUSH
6904: LD_INT 53
6906: PUSH
6907: LD_INT 62
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 37
6916: PUSH
6917: LD_INT 63
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 44
6926: PUSH
6927: LD_INT 45
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 37
6936: PUSH
6937: LD_INT 28
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: ST_TO_ADDR
6954: GO 7179
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6956: LD_INT 12
6958: PPUSH
6959: LD_INT 22
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 30
6974: PUSH
6975: LD_INT 4
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 30
6984: PUSH
6985: LD_INT 31
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 32
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PPUSH
7012: CALL_OW 70
7016: NOT
7017: IFFALSE 7100
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7019: LD_ADDR_VAR 0 6
7023: PUSH
7024: LD_INT 27
7026: PUSH
7027: LD_INT 42
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 27
7036: PUSH
7037: LD_INT 32
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 53
7050: PUSH
7051: LD_INT 62
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 37
7060: PUSH
7061: LD_INT 63
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 44
7070: PUSH
7071: LD_INT 45
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 37
7080: PUSH
7081: LD_INT 28
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: ST_TO_ADDR
7098: GO 7179
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7100: LD_ADDR_VAR 0 6
7104: PUSH
7105: LD_INT 71
7107: PUSH
7108: LD_INT 67
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 54
7117: PUSH
7118: LD_INT 35
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 63
7131: PUSH
7132: LD_INT 40
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 37
7141: PUSH
7142: LD_INT 63
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 44
7151: PUSH
7152: LD_INT 45
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 37
7161: PUSH
7162: LD_INT 28
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: ST_TO_ADDR
// end ; 1 :
7179: GO 7384
7181: LD_INT 1
7183: DOUBLE
7184: EQUAL
7185: IFTRUE 7189
7187: GO 7293
7189: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7190: LD_ADDR_VAR 0 6
7194: PUSH
7195: LD_INT 71
7197: PUSH
7198: LD_INT 67
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 82
7207: PUSH
7208: LD_INT 23
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 53
7217: PUSH
7218: LD_INT 7
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 43
7227: PUSH
7228: LD_INT 10
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 53
7243: PUSH
7244: LD_INT 62
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 37
7253: PUSH
7254: LD_INT 63
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 44
7263: PUSH
7264: LD_INT 45
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 37
7273: PUSH
7274: LD_INT 28
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: ST_TO_ADDR
7291: GO 7384
7293: LD_INT 2
7295: DOUBLE
7296: EQUAL
7297: IFTRUE 7301
7299: GO 7383
7301: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7302: LD_ADDR_VAR 0 6
7306: PUSH
7307: LD_INT 90
7309: PUSH
7310: LD_INT 59
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 108
7319: PUSH
7320: LD_INT 64
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 82
7333: PUSH
7334: LD_INT 75
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 73
7343: PUSH
7344: LD_INT 67
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 101
7353: PUSH
7354: LD_INT 65
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 108
7363: PUSH
7364: LD_INT 62
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: ST_TO_ADDR
7381: GO 7384
7383: POP
// if not attackFormula then
7384: LD_VAR 0 6
7388: NOT
7389: IFFALSE 7393
// exit ;
7391: GO 9071
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7393: LD_ADDR_VAR 0 7
7397: PUSH
7398: LD_EXP 50
7402: PPUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 1
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PPUSH
7413: CALL_OW 72
7417: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7418: LD_ADDR_VAR 0 8
7422: PUSH
7423: LD_EXP 50
7427: PPUSH
7428: LD_INT 25
7430: PUSH
7431: LD_INT 4
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PPUSH
7438: CALL_OW 72
7442: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7443: LD_ADDR_VAR 0 9
7447: PUSH
7448: LD_EXP 50
7452: PPUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 3
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PPUSH
7463: CALL_OW 72
7467: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7468: LD_ADDR_VAR 0 10
7472: PUSH
7473: LD_EXP 50
7477: PPUSH
7478: LD_INT 21
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PPUSH
7488: CALL_OW 72
7492: ST_TO_ADDR
// if sci then
7493: LD_VAR 0 8
7497: IFFALSE 7534
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7499: LD_VAR 0 8
7503: PPUSH
7504: LD_VAR 0 6
7508: PUSH
7509: LD_INT 2
7511: ARRAY
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: PPUSH
7517: LD_VAR 0 6
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PUSH
7526: LD_INT 2
7528: ARRAY
7529: PPUSH
7530: CALL_OW 111
// repeat wait ( 10 ) ;
7534: LD_INT 10
7536: PPUSH
7537: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7541: LD_ADDR_VAR 0 7
7545: PUSH
7546: LD_EXP 50
7550: PPUSH
7551: LD_INT 25
7553: PUSH
7554: LD_INT 1
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 72
7565: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7566: LD_ADDR_VAR 0 8
7570: PUSH
7571: LD_EXP 50
7575: PPUSH
7576: LD_INT 25
7578: PUSH
7579: LD_INT 4
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 72
7590: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7591: LD_ADDR_VAR 0 9
7595: PUSH
7596: LD_EXP 50
7600: PPUSH
7601: LD_INT 25
7603: PUSH
7604: LD_INT 3
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PPUSH
7611: CALL_OW 72
7615: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7616: LD_ADDR_VAR 0 10
7620: PUSH
7621: LD_EXP 50
7625: PPUSH
7626: LD_INT 21
7628: PUSH
7629: LD_INT 2
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 72
7640: ST_TO_ADDR
// if sol then
7641: LD_VAR 0 7
7645: IFFALSE 8066
// begin for i in sol do
7647: LD_ADDR_VAR 0 2
7651: PUSH
7652: LD_VAR 0 7
7656: PUSH
7657: FOR_IN
7658: IFFALSE 8064
// begin tag := GetTag ( i ) ;
7660: LD_ADDR_VAR 0 4
7664: PUSH
7665: LD_VAR 0 2
7669: PPUSH
7670: CALL_OW 110
7674: ST_TO_ADDR
// if not tag then
7675: LD_VAR 0 4
7679: NOT
7680: IFFALSE 7789
// begin if GetLives ( i ) = 1000 then
7682: LD_VAR 0 2
7686: PPUSH
7687: CALL_OW 256
7691: PUSH
7692: LD_INT 1000
7694: EQUAL
7695: IFFALSE 7711
// SetTag ( i , 1 ) else
7697: LD_VAR 0 2
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 109
7709: GO 7787
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7711: LD_VAR 0 2
7715: PPUSH
7716: LD_VAR 0 6
7720: PUSH
7721: LD_INT 2
7723: ARRAY
7724: PUSH
7725: LD_INT 1
7727: ARRAY
7728: PPUSH
7729: LD_VAR 0 6
7733: PUSH
7734: LD_INT 2
7736: ARRAY
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: PPUSH
7742: CALL_OW 297
7746: PUSH
7747: LD_INT 10
7749: GREATER
7750: IFFALSE 7787
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7752: LD_VAR 0 2
7756: PPUSH
7757: LD_VAR 0 6
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PUSH
7766: LD_INT 1
7768: ARRAY
7769: PPUSH
7770: LD_VAR 0 6
7774: PUSH
7775: LD_INT 2
7777: ARRAY
7778: PUSH
7779: LD_INT 2
7781: ARRAY
7782: PPUSH
7783: CALL_OW 111
// end else
7787: GO 8062
// begin if GetLives ( i ) < 760 then
7789: LD_VAR 0 2
7793: PPUSH
7794: CALL_OW 256
7798: PUSH
7799: LD_INT 760
7801: LESS
7802: IFFALSE 7853
// begin SetTag ( i , 0 ) ;
7804: LD_VAR 0 2
7808: PPUSH
7809: LD_INT 0
7811: PPUSH
7812: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7816: LD_VAR 0 2
7820: PPUSH
7821: LD_VAR 0 6
7825: PUSH
7826: LD_INT 2
7828: ARRAY
7829: PUSH
7830: LD_INT 1
7832: ARRAY
7833: PPUSH
7834: LD_VAR 0 6
7838: PUSH
7839: LD_INT 2
7841: ARRAY
7842: PUSH
7843: LD_INT 2
7845: ARRAY
7846: PPUSH
7847: CALL_OW 111
// end else
7851: GO 8062
// if tag <= attackFormula [ 1 ] then
7853: LD_VAR 0 4
7857: PUSH
7858: LD_VAR 0 6
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: LESSEQUAL
7867: IFFALSE 8028
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7869: LD_VAR 0 2
7873: PPUSH
7874: LD_VAR 0 6
7878: PUSH
7879: LD_INT 1
7881: ARRAY
7882: PUSH
7883: LD_VAR 0 4
7887: ARRAY
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: LD_VAR 0 6
7897: PUSH
7898: LD_INT 1
7900: ARRAY
7901: PUSH
7902: LD_VAR 0 4
7906: ARRAY
7907: PUSH
7908: LD_INT 2
7910: ARRAY
7911: PPUSH
7912: CALL_OW 297
7916: PUSH
7917: LD_INT 6
7919: GREATER
7920: IFFALSE 7971
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7922: LD_VAR 0 2
7926: PPUSH
7927: LD_VAR 0 6
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: PUSH
7936: LD_VAR 0 4
7940: ARRAY
7941: PUSH
7942: LD_INT 1
7944: ARRAY
7945: PPUSH
7946: LD_VAR 0 6
7950: PUSH
7951: LD_INT 1
7953: ARRAY
7954: PUSH
7955: LD_VAR 0 4
7959: ARRAY
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 114
7969: GO 8026
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7971: LD_INT 81
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 91
7983: PUSH
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 10
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PPUSH
8001: CALL_OW 69
8005: NOT
8006: IFFALSE 8026
// SetTag ( i , tag + 1 ) ;
8008: LD_VAR 0 2
8012: PPUSH
8013: LD_VAR 0 4
8017: PUSH
8018: LD_INT 1
8020: PLUS
8021: PPUSH
8022: CALL_OW 109
// end else
8026: GO 8062
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8028: LD_VAR 0 2
8032: PPUSH
8033: LD_INT 81
8035: PUSH
8036: LD_INT 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PPUSH
8043: CALL_OW 69
8047: PPUSH
8048: LD_VAR 0 2
8052: PPUSH
8053: CALL_OW 74
8057: PPUSH
8058: CALL_OW 115
// end ; end ;
8062: GO 7657
8064: POP
8065: POP
// end ; if sci then
8066: LD_VAR 0 8
8070: IFFALSE 8339
// begin if not sol and not mech then
8072: LD_VAR 0 7
8076: NOT
8077: PUSH
8078: LD_VAR 0 9
8082: NOT
8083: AND
8084: IFFALSE 8136
// begin for i in sci do
8086: LD_ADDR_VAR 0 2
8090: PUSH
8091: LD_VAR 0 8
8095: PUSH
8096: FOR_IN
8097: IFFALSE 8132
// begin usForces := usForces union i ;
8099: LD_ADDR_EXP 47
8103: PUSH
8104: LD_EXP 47
8108: PUSH
8109: LD_VAR 0 2
8113: UNION
8114: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_INT 34
8122: PPUSH
8123: LD_INT 68
8125: PPUSH
8126: CALL_OW 111
// end ;
8130: GO 8096
8132: POP
8133: POP
// end else
8134: GO 8339
// for i in sci do
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_VAR 0 8
8145: PUSH
8146: FOR_IN
8147: IFFALSE 8337
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8149: LD_VAR 0 2
8153: PPUSH
8154: LD_VAR 0 6
8158: PUSH
8159: LD_INT 2
8161: ARRAY
8162: PUSH
8163: LD_INT 1
8165: ARRAY
8166: PPUSH
8167: LD_VAR 0 6
8171: PUSH
8172: LD_INT 2
8174: ARRAY
8175: PUSH
8176: LD_INT 2
8178: ARRAY
8179: PPUSH
8180: CALL_OW 297
8184: PUSH
8185: LD_INT 10
8187: GREATER
8188: IFFALSE 8227
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8190: LD_VAR 0 2
8194: PPUSH
8195: LD_VAR 0 6
8199: PUSH
8200: LD_INT 2
8202: ARRAY
8203: PUSH
8204: LD_INT 1
8206: ARRAY
8207: PPUSH
8208: LD_VAR 0 6
8212: PUSH
8213: LD_INT 2
8215: ARRAY
8216: PUSH
8217: LD_INT 2
8219: ARRAY
8220: PPUSH
8221: CALL_OW 111
8225: GO 8335
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8227: LD_VAR 0 7
8231: PPUSH
8232: LD_INT 3
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 1000
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 91
8251: PUSH
8252: LD_VAR 0 2
8256: PUSH
8257: LD_INT 10
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PPUSH
8269: CALL_OW 72
8273: IFFALSE 8335
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8275: LD_VAR 0 2
8279: PPUSH
8280: LD_VAR 0 7
8284: PPUSH
8285: LD_INT 3
8287: PUSH
8288: LD_INT 24
8290: PUSH
8291: LD_INT 1000
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 91
8304: PUSH
8305: LD_VAR 0 2
8309: PUSH
8310: LD_INT 10
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PPUSH
8322: CALL_OW 72
8326: PUSH
8327: LD_INT 1
8329: ARRAY
8330: PPUSH
8331: CALL_OW 128
8335: GO 8146
8337: POP
8338: POP
// end ; if mech then
8339: LD_VAR 0 9
8343: IFFALSE 9053
// begin for i in mech do
8345: LD_ADDR_VAR 0 2
8349: PUSH
8350: LD_VAR 0 9
8354: PUSH
8355: FOR_IN
8356: IFFALSE 9051
// begin tag := GetTag ( i ) ;
8358: LD_ADDR_VAR 0 4
8362: PUSH
8363: LD_VAR 0 2
8367: PPUSH
8368: CALL_OW 110
8372: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8373: LD_ADDR_VAR 0 11
8377: PUSH
8378: LD_VAR 0 2
8382: PPUSH
8383: CALL_OW 310
8387: ST_TO_ADDR
// if not tag then
8388: LD_VAR 0 4
8392: NOT
8393: IFFALSE 8764
// begin if veh then
8395: LD_VAR 0 11
8399: IFFALSE 8570
// begin if GetLives ( veh ) = 1000 then
8401: LD_VAR 0 11
8405: PPUSH
8406: CALL_OW 256
8410: PUSH
8411: LD_INT 1000
8413: EQUAL
8414: IFFALSE 8430
// SetTag ( i , 1 ) else
8416: LD_VAR 0 2
8420: PPUSH
8421: LD_INT 1
8423: PPUSH
8424: CALL_OW 109
8428: GO 8568
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8430: LD_VAR 0 11
8434: PPUSH
8435: LD_VAR 0 6
8439: PUSH
8440: LD_INT 3
8442: ARRAY
8443: PUSH
8444: LD_INT 1
8446: ARRAY
8447: PPUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 3
8455: ARRAY
8456: PUSH
8457: LD_INT 2
8459: ARRAY
8460: PPUSH
8461: CALL_OW 297
8465: PUSH
8466: LD_INT 8
8468: GREATER
8469: IFFALSE 8508
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8471: LD_VAR 0 11
8475: PPUSH
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 3
8483: ARRAY
8484: PUSH
8485: LD_INT 1
8487: ARRAY
8488: PPUSH
8489: LD_VAR 0 6
8493: PUSH
8494: LD_INT 3
8496: ARRAY
8497: PUSH
8498: LD_INT 2
8500: ARRAY
8501: PPUSH
8502: CALL_OW 111
8506: GO 8568
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8508: LD_INT 81
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 91
8520: PUSH
8521: LD_VAR 0 2
8525: PUSH
8526: LD_INT 12
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PPUSH
8538: CALL_OW 69
8542: NOT
8543: IFFALSE 8568
// begin ComExitVehicle ( i ) ;
8545: LD_VAR 0 2
8549: PPUSH
8550: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_VAR 0 11
8563: PPUSH
8564: CALL_OW 189
// end ; end else
8568: GO 8762
// if GetLives ( i ) < 400 then
8570: LD_VAR 0 2
8574: PPUSH
8575: CALL_OW 256
8579: PUSH
8580: LD_INT 400
8582: LESS
8583: IFFALSE 8634
// begin usAttackers := usAttackers diff i ;
8585: LD_ADDR_EXP 50
8589: PUSH
8590: LD_EXP 50
8594: PUSH
8595: LD_VAR 0 2
8599: DIFF
8600: ST_TO_ADDR
// usForces := usForces union i ;
8601: LD_ADDR_EXP 47
8605: PUSH
8606: LD_EXP 47
8610: PUSH
8611: LD_VAR 0 2
8615: UNION
8616: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8617: LD_VAR 0 2
8621: PPUSH
8622: LD_INT 34
8624: PPUSH
8625: LD_INT 68
8627: PPUSH
8628: CALL_OW 111
// end else
8632: GO 8762
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8634: LD_VAR 0 10
8638: PPUSH
8639: LD_INT 58
8641: PUSH
8642: EMPTY
8643: LIST
8644: PUSH
8645: LD_INT 24
8647: PUSH
8648: LD_INT 1000
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PPUSH
8659: CALL_OW 72
8663: PUSH
8664: LD_VAR 0 2
8668: PPUSH
8669: CALL_OW 314
8673: NOT
8674: AND
8675: PUSH
8676: LD_INT 81
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 91
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: LD_INT 9
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 69
8710: OR
8711: IFFALSE 8762
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8713: LD_VAR 0 2
8717: PPUSH
8718: LD_VAR 0 10
8722: PPUSH
8723: LD_INT 58
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: LD_INT 24
8731: PUSH
8732: LD_INT 250
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PPUSH
8743: CALL_OW 72
8747: PPUSH
8748: LD_VAR 0 2
8752: PPUSH
8753: CALL_OW 74
8757: PPUSH
8758: CALL_OW 120
// end else
8762: GO 9049
// begin if veh and GetLives ( veh ) < 760 then
8764: LD_VAR 0 11
8768: PUSH
8769: LD_VAR 0 11
8773: PPUSH
8774: CALL_OW 256
8778: PUSH
8779: LD_INT 760
8781: LESS
8782: AND
8783: IFFALSE 8834
// begin SetTag ( i , 0 ) ;
8785: LD_VAR 0 2
8789: PPUSH
8790: LD_INT 0
8792: PPUSH
8793: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8797: LD_VAR 0 11
8801: PPUSH
8802: LD_VAR 0 6
8806: PUSH
8807: LD_INT 3
8809: ARRAY
8810: PUSH
8811: LD_INT 1
8813: ARRAY
8814: PPUSH
8815: LD_VAR 0 6
8819: PUSH
8820: LD_INT 3
8822: ARRAY
8823: PUSH
8824: LD_INT 2
8826: ARRAY
8827: PPUSH
8828: CALL_OW 111
// end else
8832: GO 9049
// if veh then
8834: LD_VAR 0 11
8838: IFFALSE 9049
// if tag <= attackFormula [ 4 ] then
8840: LD_VAR 0 4
8844: PUSH
8845: LD_VAR 0 6
8849: PUSH
8850: LD_INT 4
8852: ARRAY
8853: LESSEQUAL
8854: IFFALSE 9015
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8856: LD_VAR 0 11
8860: PPUSH
8861: LD_VAR 0 6
8865: PUSH
8866: LD_INT 4
8868: ARRAY
8869: PUSH
8870: LD_VAR 0 4
8874: ARRAY
8875: PUSH
8876: LD_INT 1
8878: ARRAY
8879: PPUSH
8880: LD_VAR 0 6
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PUSH
8889: LD_VAR 0 4
8893: ARRAY
8894: PUSH
8895: LD_INT 2
8897: ARRAY
8898: PPUSH
8899: CALL_OW 297
8903: PUSH
8904: LD_INT 6
8906: GREATER
8907: IFFALSE 8958
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8909: LD_VAR 0 11
8913: PPUSH
8914: LD_VAR 0 6
8918: PUSH
8919: LD_INT 4
8921: ARRAY
8922: PUSH
8923: LD_VAR 0 4
8927: ARRAY
8928: PUSH
8929: LD_INT 1
8931: ARRAY
8932: PPUSH
8933: LD_VAR 0 6
8937: PUSH
8938: LD_INT 4
8940: ARRAY
8941: PUSH
8942: LD_VAR 0 4
8946: ARRAY
8947: PUSH
8948: LD_INT 2
8950: ARRAY
8951: PPUSH
8952: CALL_OW 114
8956: GO 9013
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8958: LD_INT 81
8960: PUSH
8961: LD_INT 1
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 91
8970: PUSH
8971: LD_VAR 0 11
8975: PUSH
8976: LD_INT 10
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: NOT
8993: IFFALSE 9013
// SetTag ( i , tag + 1 ) ;
8995: LD_VAR 0 2
8999: PPUSH
9000: LD_VAR 0 4
9004: PUSH
9005: LD_INT 1
9007: PLUS
9008: PPUSH
9009: CALL_OW 109
// end else
9013: GO 9049
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9015: LD_VAR 0 11
9019: PPUSH
9020: LD_INT 81
9022: PUSH
9023: LD_INT 1
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 2
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end ; end ;
9049: GO 8355
9051: POP
9052: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9053: LD_EXP 50
9057: PPUSH
9058: LD_INT 52
9060: PUSH
9061: EMPTY
9062: LIST
9063: PPUSH
9064: CALL_OW 72
9068: NOT
9069: IFFALSE 7534
// end ;
9071: LD_VAR 0 1
9075: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9076: LD_INT 22
9078: PUSH
9079: LD_INT 1
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 32
9088: PUSH
9089: LD_INT 1
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 69
9104: IFFALSE 9181
9106: GO 9108
9108: DISABLE
9109: LD_INT 0
9111: PPUSH
// begin enable ;
9112: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_INT 22
9120: PUSH
9121: LD_INT 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 32
9130: PUSH
9131: LD_INT 1
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 69
9146: PUSH
9147: FOR_IN
9148: IFFALSE 9179
// if GetFuel ( i ) < 10 then
9150: LD_VAR 0 1
9154: PPUSH
9155: CALL_OW 261
9159: PUSH
9160: LD_INT 10
9162: LESS
9163: IFFALSE 9177
// SetFuel ( i , 10 ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: LD_INT 10
9172: PPUSH
9173: CALL_OW 240
9177: GO 9147
9179: POP
9180: POP
// end ; end_of_file
9181: PPOPN 1
9183: END
// export function Action ; var hasAll , i , tmp ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_INT 22
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: LD_INT 21
9207: PUSH
9208: LD_INT 1
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PUSH
9215: LD_INT 23
9217: PUSH
9218: LD_INT 2
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: PPUSH
9230: CALL_OW 69
9234: PUSH
9235: LD_INT 7
9237: GREATEREQUAL
9238: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9239: LD_VAR 0 2
9243: PPUSH
9244: LD_STRING 03_HasAll
9246: PPUSH
9247: CALL_OW 39
// Video ( true ) ;
9251: LD_INT 1
9253: PPUSH
9254: CALL 77463 0 1
// CenterNowOnUnits ( Heike ) ;
9258: LD_EXP 31
9262: PPUSH
9263: CALL_OW 87
// wait ( 0 0$2 ) ;
9267: LD_INT 70
9269: PPUSH
9270: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9274: LD_EXP 39
9278: PPUSH
9279: LD_STRING DF-1-start
9281: PPUSH
9282: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9286: LD_EXP 31
9290: PPUSH
9291: LD_EXP 39
9295: PPUSH
9296: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9300: LD_EXP 31
9304: PPUSH
9305: LD_STRING DH-1-start
9307: PPUSH
9308: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9312: LD_EXP 40
9316: PPUSH
9317: LD_INT 92
9319: PPUSH
9320: LD_INT 21
9322: PPUSH
9323: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9327: LD_EXP 35
9331: PPUSH
9332: LD_INT 94
9334: PPUSH
9335: LD_INT 23
9337: PPUSH
9338: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9342: LD_EXP 43
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PPUSH
9351: LD_INT 90
9353: PPUSH
9354: LD_INT 23
9356: PPUSH
9357: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9361: LD_EXP 43
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: LD_INT 93
9372: PPUSH
9373: LD_INT 25
9375: PPUSH
9376: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9380: LD_EXP 43
9384: PPUSH
9385: LD_EXP 40
9389: PPUSH
9390: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9394: LD_EXP 40
9398: PUSH
9399: LD_EXP 35
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PPUSH
9408: LD_EXP 31
9412: PPUSH
9413: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9417: LD_EXP 31
9421: PPUSH
9422: LD_EXP 40
9426: PPUSH
9427: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9431: LD_INT 35
9433: PPUSH
9434: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9438: LD_EXP 40
9442: PPUSH
9443: LD_INT 92
9445: PPUSH
9446: LD_INT 21
9448: PPUSH
9449: CALL_OW 307
9453: IFFALSE 9431
// Say ( Omar , DO-1-start ) ;
9455: LD_EXP 40
9459: PPUSH
9460: LD_STRING DO-1-start
9462: PPUSH
9463: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9467: LD_EXP 31
9471: PPUSH
9472: LD_STRING DH-2-start
9474: PPUSH
9475: CALL_OW 88
// if hasAll then
9479: LD_VAR 0 2
9483: IFFALSE 9611
// begin Say ( Omar , DO-2-start ) ;
9485: LD_EXP 40
9489: PPUSH
9490: LD_STRING DO-2-start
9492: PPUSH
9493: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9497: LD_EXP 40
9501: PPUSH
9502: LD_STRING DO-3-start
9504: PPUSH
9505: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9509: LD_EXP 31
9513: PPUSH
9514: LD_STRING DH-3-start
9516: PPUSH
9517: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9521: LD_EXP 39
9525: PPUSH
9526: LD_STRING DF-2-start
9528: PPUSH
9529: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9533: LD_EXP 40
9537: PPUSH
9538: LD_EXP 39
9542: PPUSH
9543: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9547: LD_EXP 40
9551: PPUSH
9552: LD_STRING DO-4-start
9554: PPUSH
9555: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9559: LD_EXP 39
9563: PPUSH
9564: LD_STRING DF-3-start
9566: PPUSH
9567: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9571: LD_EXP 40
9575: PPUSH
9576: LD_STRING DO-5-start
9578: PPUSH
9579: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9583: LD_EXP 39
9587: PPUSH
9588: LD_STRING DF-4-start
9590: PPUSH
9591: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9595: LD_EXP 40
9599: PPUSH
9600: LD_EXP 31
9604: PPUSH
9605: CALL_OW 119
// end else
9609: GO 9711
// begin Say ( Omar , DO-2-start-a ) ;
9611: LD_EXP 40
9615: PPUSH
9616: LD_STRING DO-2-start-a
9618: PPUSH
9619: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9623: LD_EXP 40
9627: PPUSH
9628: LD_STRING DO-3-start-a
9630: PPUSH
9631: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9635: LD_EXP 31
9639: PPUSH
9640: LD_STRING DH-3-start-a
9642: PPUSH
9643: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9647: LD_EXP 39
9651: PPUSH
9652: LD_STRING DF-2-start-a
9654: PPUSH
9655: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_EXP 39
9668: PPUSH
9669: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9673: LD_EXP 40
9677: PPUSH
9678: LD_STRING DO-4-start-a
9680: PPUSH
9681: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9685: LD_EXP 39
9689: PPUSH
9690: LD_STRING DF-3-start-a
9692: PPUSH
9693: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9697: LD_EXP 40
9701: PPUSH
9702: LD_EXP 31
9706: PPUSH
9707: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9711: LD_INT 10
9713: PPUSH
9714: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9718: LD_EXP 40
9722: PPUSH
9723: LD_STRING DO-1-mission
9725: PPUSH
9726: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9730: LD_EXP 40
9734: PPUSH
9735: LD_STRING DO-2-mission
9737: PPUSH
9738: CALL_OW 88
// if not hasAll then
9742: LD_VAR 0 2
9746: NOT
9747: IFFALSE 9761
// Say ( Omar , DO-3-mission ) ;
9749: LD_EXP 40
9753: PPUSH
9754: LD_STRING DO-3-mission
9756: PPUSH
9757: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9761: LD_EXP 40
9765: PPUSH
9766: LD_STRING DO-4-mission
9768: PPUSH
9769: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9773: LD_EXP 31
9777: PPUSH
9778: LD_STRING DH-1-mission
9780: PPUSH
9781: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9785: LD_EXP 39
9789: PPUSH
9790: LD_STRING DF-1-mission
9792: PPUSH
9793: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9797: LD_EXP 40
9801: PPUSH
9802: LD_STRING DO-5-mission
9804: PPUSH
9805: CALL_OW 88
// if not hasAll then
9809: LD_VAR 0 2
9813: NOT
9814: IFFALSE 9949
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9816: LD_ADDR_VAR 0 4
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 21
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 23
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: PPUSH
9856: CALL_OW 69
9860: ST_TO_ADDR
// for i := 7 downto tmp do
9861: LD_ADDR_VAR 0 3
9865: PUSH
9866: DOUBLE
9867: LD_INT 7
9869: INC
9870: ST_TO_ADDR
9871: LD_VAR 0 4
9875: PUSH
9876: FOR_DOWNTO
9877: IFFALSE 9947
// begin if omarSquad < 3 then
9879: LD_EXP 43
9883: PUSH
9884: LD_INT 3
9886: LESS
9887: IFFALSE 9891
// break ;
9889: GO 9947
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9891: LD_EXP 43
9895: PUSH
9896: LD_INT 3
9898: ARRAY
9899: PPUSH
9900: LD_INT 2
9902: PPUSH
9903: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9907: LD_ADDR_EXP 45
9911: PUSH
9912: LD_EXP 45
9916: PUSH
9917: LD_EXP 43
9921: PUSH
9922: LD_INT 3
9924: ARRAY
9925: UNION
9926: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9927: LD_ADDR_EXP 43
9931: PUSH
9932: LD_EXP 43
9936: PPUSH
9937: LD_INT 3
9939: PPUSH
9940: CALL_OW 3
9944: ST_TO_ADDR
// end ;
9945: GO 9876
9947: POP
9948: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9949: LD_EXP 40
9953: PUSH
9954: LD_EXP 43
9958: ADD
9959: PPUSH
9960: LD_INT 103
9962: PPUSH
9963: LD_INT 9
9965: PPUSH
9966: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9970: LD_VAR 0 2
9974: PUSH
9975: LD_EXP 36
9979: PPUSH
9980: CALL_OW 302
9984: AND
9985: IFFALSE 10046
// begin wait ( 0 0$3 ) ;
9987: LD_INT 105
9989: PPUSH
9990: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9994: LD_EXP 36
9998: PPUSH
9999: LD_EXP 39
10003: PPUSH
10004: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10008: LD_EXP 36
10012: PPUSH
10013: LD_STRING DK-1-side
10015: PPUSH
10016: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10020: LD_EXP 39
10024: PPUSH
10025: LD_EXP 36
10029: PPUSH
10030: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10034: LD_EXP 39
10038: PPUSH
10039: LD_STRING DF-1-side
10041: PPUSH
10042: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10046: LD_INT 22
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PPUSH
10056: CALL_OW 69
10060: PPUSH
10061: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10065: LD_EXP 39
10069: PUSH
10070: LD_EXP 42
10074: ADD
10075: PPUSH
10076: LD_INT 108
10078: PPUSH
10079: LD_INT 62
10081: PPUSH
10082: CALL_OW 111
// gameStarted := true ;
10086: LD_ADDR_EXP 3
10090: PUSH
10091: LD_INT 1
10093: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10094: LD_INT 105
10096: PPUSH
10097: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10101: LD_EXP 31
10105: PPUSH
10106: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10110: LD_EXP 31
10114: PPUSH
10115: LD_EXP 35
10119: PPUSH
10120: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10124: LD_INT 22
10126: PUSH
10127: LD_INT 2
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PPUSH
10134: CALL_OW 69
10138: PUSH
10139: LD_EXP 31
10143: DIFF
10144: PPUSH
10145: LD_EXP 31
10149: PPUSH
10150: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10154: LD_EXP 31
10158: PPUSH
10159: LD_STRING DH-1-explore
10161: PPUSH
10162: CALL_OW 88
// if Givi then
10166: LD_EXP 32
10170: IFFALSE 10186
// Say ( Givi , DG-1-explore ) else
10172: LD_EXP 32
10176: PPUSH
10177: LD_STRING DG-1-explore
10179: PPUSH
10180: CALL_OW 88
10184: GO 10223
// if heikeSecondSquad then
10186: LD_EXP 45
10190: IFFALSE 10223
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10192: LD_EXP 45
10196: PPUSH
10197: LD_INT 26
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PPUSH
10207: CALL_OW 72
10211: PUSH
10212: LD_INT 1
10214: ARRAY
10215: PPUSH
10216: LD_STRING DArm-1-explore
10218: PPUSH
10219: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10223: LD_EXP 35
10227: PPUSH
10228: LD_STRING DA-1-explore
10230: PPUSH
10231: CALL_OW 88
// if Sophia then
10235: LD_EXP 37
10239: IFFALSE 10317
// begin Say ( Sophia , DS-2-explore ) ;
10241: LD_EXP 37
10245: PPUSH
10246: LD_STRING DS-2-explore
10248: PPUSH
10249: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10253: LD_EXP 35
10257: PPUSH
10258: LD_STRING DA-2-explore
10260: PPUSH
10261: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10265: LD_EXP 37
10269: PPUSH
10270: LD_EXP 35
10274: PPUSH
10275: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10279: LD_EXP 35
10283: PPUSH
10284: LD_EXP 37
10288: PPUSH
10289: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10293: LD_EXP 37
10297: PPUSH
10298: LD_STRING DS-3-explore
10300: PPUSH
10301: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10305: LD_EXP 35
10309: PPUSH
10310: LD_STRING DA-3-explore
10312: PPUSH
10313: CALL_OW 88
// end ; if Mike then
10317: LD_EXP 33
10321: IFFALSE 10377
// begin Say ( Mike , DM-1-explore ) ;
10323: LD_EXP 33
10327: PPUSH
10328: LD_STRING DM-1-explore
10330: PPUSH
10331: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10335: LD_EXP 31
10339: PPUSH
10340: LD_STRING DH-2-explore
10342: PPUSH
10343: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10347: LD_EXP 33
10351: PPUSH
10352: LD_STRING DM-2-explore
10354: PPUSH
10355: CALL_OW 88
// if Kaia then
10359: LD_EXP 36
10363: IFFALSE 10377
// Say ( Kaia , DK-1-explore ) ;
10365: LD_EXP 36
10369: PPUSH
10370: LD_STRING DK-1-explore
10372: PPUSH
10373: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10377: LD_INT 22
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: PPUSH
10392: CALL_OW 139
// Video ( false ) ;
10396: LD_INT 0
10398: PPUSH
10399: CALL 77463 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10403: LD_STRING BuildBase
10405: PPUSH
10406: CALL_OW 337
// SaveForQuickRestart ;
10410: CALL_OW 22
// end ;
10414: LD_VAR 0 1
10418: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10419: LD_EXP 5
10423: PUSH
10424: LD_EXP 7
10428: NOT
10429: AND
10430: IFFALSE 10617
10432: GO 10434
10434: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10435: LD_EXP 48
10439: PPUSH
10440: LD_STRING DUsm-4-assault
10442: PPUSH
10443: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10447: LD_INT 35
10449: PPUSH
10450: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10454: LD_INT 22
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 21
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 50
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 95
10482: PUSH
10483: LD_INT 7
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 69
10500: IFFALSE 10447
// if not IsOk ( usCommander ) or americanBaseCaptured then
10502: LD_EXP 48
10506: PPUSH
10507: CALL_OW 302
10511: NOT
10512: PUSH
10513: LD_EXP 7
10517: OR
10518: IFFALSE 10522
// exit ;
10520: GO 10617
// repeat wait ( 0 0$1 ) ;
10522: LD_INT 35
10524: PPUSH
10525: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10529: LD_INT 22
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 1
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 50
10551: PUSH
10552: EMPTY
10553: LIST
10554: PUSH
10555: LD_INT 95
10557: PUSH
10558: LD_INT 7
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 69
10575: NOT
10576: IFFALSE 10522
// wait ( 0 0$3 ) ;
10578: LD_INT 105
10580: PPUSH
10581: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10585: LD_EXP 48
10589: PPUSH
10590: CALL_OW 302
10594: NOT
10595: PUSH
10596: LD_EXP 7
10600: OR
10601: IFFALSE 10605
// exit ;
10603: GO 10617
// Say ( usCommander , DUsm-3-assault ) ;
10605: LD_EXP 48
10609: PPUSH
10610: LD_STRING DUsm-3-assault
10612: PPUSH
10613: CALL_OW 88
// end ;
10617: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10618: LD_EXP 6
10622: NOT
10623: PUSH
10624: LD_EXP 7
10628: NOT
10629: AND
10630: PUSH
10631: LD_INT 5
10633: PPUSH
10634: LD_INT 22
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PPUSH
10644: CALL_OW 70
10648: AND
10649: PUSH
10650: LD_EXP 7
10654: NOT
10655: AND
10656: IFFALSE 10741
10658: GO 10660
10660: DISABLE
// begin if Mike then
10661: LD_EXP 33
10665: IFFALSE 10681
// Say ( Mike , DM-1-scout ) else
10667: LD_EXP 33
10671: PPUSH
10672: LD_STRING DM-1-scout
10674: PPUSH
10675: CALL_OW 88
10679: GO 10712
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10681: LD_EXP 45
10685: PPUSH
10686: LD_INT 26
10688: PUSH
10689: LD_INT 1
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 72
10700: PUSH
10701: LD_INT 1
10703: ARRAY
10704: PPUSH
10705: LD_STRING DArm-1-explore
10707: PPUSH
10708: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10712: LD_INT 54
10714: PPUSH
10715: LD_INT 35
10717: PPUSH
10718: LD_INT 2
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10728: LD_INT 54
10730: PPUSH
10731: LD_INT 35
10733: PPUSH
10734: LD_INT 2
10736: PPUSH
10737: CALL_OW 331
// end ;
10741: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10742: LD_INT 6
10744: PPUSH
10745: LD_INT 22
10747: PUSH
10748: LD_INT 2
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: PPUSH
10755: CALL_OW 70
10759: PUSH
10760: LD_EXP 7
10764: NOT
10765: AND
10766: IFFALSE 11020
10768: GO 10770
10770: DISABLE
10771: LD_INT 0
10773: PPUSH
10774: PPUSH
10775: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10776: LD_ADDR_VAR 0 1
10780: PUSH
10781: LD_EXP 45
10785: PPUSH
10786: LD_INT 26
10788: PUSH
10789: LD_INT 1
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 72
10800: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10801: LD_ADDR_VAR 0 2
10805: PUSH
10806: LD_EXP 45
10810: PPUSH
10811: LD_INT 26
10813: PUSH
10814: LD_INT 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 72
10825: ST_TO_ADDR
// DialogueOn ;
10826: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10830: LD_INT 36
10832: PPUSH
10833: LD_INT 22
10835: PPUSH
10836: LD_INT 2
10838: PPUSH
10839: LD_INT 8
10841: PPUSH
10842: CALL_OW 330
// dwait ( 0 0$1 ) ;
10846: LD_INT 35
10848: PPUSH
10849: CALL_OW 68
// speakerOk := false ;
10853: LD_ADDR_VAR 0 3
10857: PUSH
10858: LD_INT 0
10860: ST_TO_ADDR
// if Mike then
10861: LD_EXP 33
10865: IFFALSE 10887
// speakerOk := Say ( Mike , DM-1-spot ) else
10867: LD_ADDR_VAR 0 3
10871: PUSH
10872: LD_EXP 33
10876: PPUSH
10877: LD_STRING DM-1-spot
10879: PPUSH
10880: CALL_OW 88
10884: ST_TO_ADDR
10885: GO 10915
// if randomMen then
10887: LD_VAR 0 1
10891: IFFALSE 10915
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10893: LD_ADDR_VAR 0 3
10897: PUSH
10898: LD_VAR 0 1
10902: PUSH
10903: LD_INT 1
10905: ARRAY
10906: PPUSH
10907: LD_STRING DArm-1-spot-a
10909: PPUSH
10910: CALL_OW 88
10914: ST_TO_ADDR
// if speakerOk then
10915: LD_VAR 0 3
10919: IFFALSE 10963
// begin if Givi then
10921: LD_EXP 32
10925: IFFALSE 10941
// Say ( Givi , DG-1-spot ) else
10927: LD_EXP 32
10931: PPUSH
10932: LD_STRING DG-1-spot
10934: PPUSH
10935: CALL_OW 88
10939: GO 10963
// if randomWomen then
10941: LD_VAR 0 2
10945: IFFALSE 10963
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10947: LD_VAR 0 2
10951: PUSH
10952: LD_INT 1
10954: ARRAY
10955: PPUSH
10956: LD_STRING DArf-1-spot-a
10958: PPUSH
10959: CALL_OW 88
// end ; if Mike then
10963: LD_EXP 33
10967: IFFALSE 10983
// Say ( Heike , DH-1-spot ) else
10969: LD_EXP 31
10973: PPUSH
10974: LD_STRING DH-1-spot
10976: PPUSH
10977: CALL_OW 88
10981: GO 10995
// Say ( Heike , DH-1-spot-a ) ;
10983: LD_EXP 31
10987: PPUSH
10988: LD_STRING DH-1-spot-a
10990: PPUSH
10991: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10995: LD_INT 36
10997: PPUSH
10998: LD_INT 22
11000: PPUSH
11001: LD_INT 2
11003: PPUSH
11004: CALL_OW 331
// DialogueOff ;
11008: CALL_OW 7
// americanBaseSpoted := true ;
11012: LD_ADDR_EXP 6
11016: PUSH
11017: LD_INT 1
11019: ST_TO_ADDR
// end ;
11020: PPOPN 3
11022: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11023: LD_EXP 6
11027: NOT
11028: PUSH
11029: LD_INT 22
11031: PUSH
11032: LD_INT 2
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 101
11041: PUSH
11042: LD_INT 1
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: AND
11058: PUSH
11059: LD_EXP 7
11063: NOT
11064: AND
11065: IFFALSE 11151
11067: GO 11069
11069: DISABLE
11070: LD_INT 0
11072: PPUSH
// begin americanBaseSpoted := true ;
11073: LD_ADDR_EXP 6
11077: PUSH
11078: LD_INT 1
11080: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11081: LD_ADDR_VAR 0 1
11085: PUSH
11086: LD_EXP 45
11090: PPUSH
11091: LD_INT 26
11093: PUSH
11094: LD_INT 1
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PPUSH
11101: CALL_OW 72
11105: ST_TO_ADDR
// if not randomMen then
11106: LD_VAR 0 1
11110: NOT
11111: IFFALSE 11115
// exit ;
11113: GO 11151
// DialogueOn ;
11115: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11119: LD_VAR 0 1
11123: PUSH
11124: LD_INT 1
11126: ARRAY
11127: PPUSH
11128: LD_STRING DArm-1-spot-a
11130: PPUSH
11131: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11135: LD_EXP 31
11139: PPUSH
11140: LD_STRING DH-1-spot-a
11142: PPUSH
11143: CALL_OW 88
// DialogueOff ;
11147: CALL_OW 7
// end ;
11151: PPOPN 1
11153: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11154: LD_INT 11
11156: PPUSH
11157: CALL_OW 255
11161: PUSH
11162: LD_INT 2
11164: EQUAL
11165: PUSH
11166: LD_INT 7
11168: PPUSH
11169: LD_INT 22
11171: PUSH
11172: LD_INT 1
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 3
11181: PUSH
11182: LD_INT 50
11184: PUSH
11185: EMPTY
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 30
11194: PUSH
11195: LD_INT 31
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: PPUSH
11207: CALL_OW 70
11211: OR
11212: PUSH
11213: LD_INT 7
11215: PPUSH
11216: LD_INT 22
11218: PUSH
11219: LD_INT 2
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PPUSH
11226: CALL_OW 70
11230: PUSH
11231: LD_INT 2
11233: GREATER
11234: OR
11235: PUSH
11236: LD_EXP 47
11240: PUSH
11241: LD_INT 4
11243: LESSEQUAL
11244: OR
11245: IFFALSE 11836
11247: GO 11249
11249: DISABLE
11250: LD_INT 0
11252: PPUSH
11253: PPUSH
// begin wait ( 0 0$3 ) ;
11254: LD_INT 105
11256: PPUSH
11257: CALL_OW 67
// americanStartRun := true ;
11261: LD_ADDR_EXP 15
11265: PUSH
11266: LD_INT 1
11268: ST_TO_ADDR
// if IsOk ( usCommander ) then
11269: LD_EXP 48
11273: PPUSH
11274: CALL_OW 302
11278: IFFALSE 11308
// begin usForces := usForces union usCommander ;
11280: LD_ADDR_EXP 47
11284: PUSH
11285: LD_EXP 47
11289: PUSH
11290: LD_EXP 48
11294: UNION
11295: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11296: LD_EXP 48
11300: PPUSH
11301: LD_STRING DUsm-1-assault
11303: PPUSH
11304: CALL_OW 88
// end ; for i in usForces do
11308: LD_ADDR_VAR 0 1
11312: PUSH
11313: LD_EXP 47
11317: PUSH
11318: FOR_IN
11319: IFFALSE 11365
// begin if IsInUnit ( i ) then
11321: LD_VAR 0 1
11325: PPUSH
11326: CALL_OW 310
11330: IFFALSE 11341
// ComExitBuilding ( i ) ;
11332: LD_VAR 0 1
11336: PPUSH
11337: CALL_OW 122
// wait ( 3 ) ;
11341: LD_INT 3
11343: PPUSH
11344: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11348: LD_VAR 0 1
11352: PPUSH
11353: LD_INT 34
11355: PPUSH
11356: LD_INT 67
11358: PPUSH
11359: CALL_OW 111
// end ;
11363: GO 11318
11365: POP
11366: POP
// Say ( Heike , DH-1-assault ) ;
11367: LD_EXP 31
11371: PPUSH
11372: LD_STRING DH-1-assault
11374: PPUSH
11375: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11379: LD_INT 35
11381: PPUSH
11382: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11386: LD_VAR 0 1
11390: PPUSH
11391: LD_INT 34
11393: PPUSH
11394: LD_INT 67
11396: PPUSH
11397: CALL_OW 111
// until not usForces ;
11401: LD_EXP 47
11405: NOT
11406: IFFALSE 11379
// music_nat := 2 ;
11408: LD_ADDR_OWVAR 71
11412: PUSH
11413: LD_INT 2
11415: ST_TO_ADDR
// music_class := music_victory ;
11416: LD_ADDR_OWVAR 72
11420: PUSH
11421: LD_INT 4
11423: ST_TO_ADDR
// if not americanHasEscaped then
11424: LD_EXP 9
11428: NOT
11429: IFFALSE 11450
// begin Say ( Heike , DH-2-assault ) ;
11431: LD_EXP 31
11435: PPUSH
11436: LD_STRING DH-2-assault
11438: PPUSH
11439: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11443: LD_STRING ACH_CLEAN
11445: PPUSH
11446: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11450: LD_INT 70
11452: PPUSH
11453: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11457: LD_INT 35
11459: PPUSH
11460: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11464: LD_INT 22
11466: PUSH
11467: LD_INT 2
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 21
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 3
11486: PUSH
11487: LD_INT 50
11489: PUSH
11490: EMPTY
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 69
11506: NOT
11507: IFFALSE 11457
// InGameOn ;
11509: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11513: LD_INT 11
11515: PPUSH
11516: CALL_OW 255
11520: PUSH
11521: LD_INT 2
11523: EQUAL
11524: NOT
11525: IFFALSE 11537
// SetSide ( usDepot , 2 ) ;
11527: LD_INT 11
11529: PPUSH
11530: LD_INT 2
11532: PPUSH
11533: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11537: LD_INT 35
11539: PPUSH
11540: LD_INT 22
11542: PPUSH
11543: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11547: LD_EXP 31
11551: PPUSH
11552: LD_INT 35
11554: PPUSH
11555: LD_INT 22
11557: PPUSH
11558: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11562: LD_EXP 31
11566: PPUSH
11567: LD_INT 38
11569: PPUSH
11570: LD_INT 25
11572: PPUSH
11573: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11577: LD_EXP 35
11581: PUSH
11582: LD_EXP 44
11586: UNION
11587: PUSH
11588: LD_EXP 45
11592: UNION
11593: PPUSH
11594: LD_INT 39
11596: PPUSH
11597: LD_INT 26
11599: PPUSH
11600: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11604: LD_EXP 35
11608: PUSH
11609: LD_EXP 44
11613: UNION
11614: PUSH
11615: LD_EXP 45
11619: UNION
11620: PPUSH
11621: LD_EXP 31
11625: PPUSH
11626: CALL_OW 179
// p := 0 ;
11630: LD_ADDR_VAR 0 2
11634: PUSH
11635: LD_INT 0
11637: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11638: LD_INT 35
11640: PPUSH
11641: CALL_OW 67
// p := p + 1 ;
11645: LD_ADDR_VAR 0 2
11649: PUSH
11650: LD_VAR 0 2
11654: PUSH
11655: LD_INT 1
11657: PLUS
11658: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11659: LD_EXP 31
11663: PPUSH
11664: CALL_OW 314
11668: NOT
11669: PUSH
11670: LD_VAR 0 2
11674: PUSH
11675: LD_INT 10
11677: GREATER
11678: OR
11679: IFFALSE 11638
// Say ( Heike , DH-1-capture ) ;
11681: LD_EXP 31
11685: PPUSH
11686: LD_STRING DH-1-capture
11688: PPUSH
11689: CALL_OW 88
// if Markov then
11693: LD_EXP 38
11697: IFFALSE 11711
// Say ( Markov , DMar-1-capture ) ;
11699: LD_EXP 38
11703: PPUSH
11704: LD_STRING DMar-1-capture
11706: PPUSH
11707: CALL_OW 88
// if Sophia then
11711: LD_EXP 37
11715: IFFALSE 11741
// begin Say ( Heike , DH-2-capture ) ;
11717: LD_EXP 31
11721: PPUSH
11722: LD_STRING DH-2-capture
11724: PPUSH
11725: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11729: LD_EXP 37
11733: PPUSH
11734: LD_STRING DS-1-capture
11736: PPUSH
11737: CALL_OW 88
// end ; InGameOff ;
11741: CALL_OW 9
// music_nat := music_auto ;
11745: LD_ADDR_OWVAR 71
11749: PUSH
11750: LD_INT 0
11752: ST_TO_ADDR
// music_class := music_auto ;
11753: LD_ADDR_OWVAR 72
11757: PUSH
11758: LD_INT 0
11760: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11761: LD_STRING ConstructBase
11763: PPUSH
11764: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11768: LD_ADDR_VAR 0 1
11772: PUSH
11773: LD_INT 22
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 21
11785: PUSH
11786: LD_INT 3
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PPUSH
11797: CALL_OW 69
11801: PUSH
11802: FOR_IN
11803: IFFALSE 11819
// SetSide ( i , 2 ) ;
11805: LD_VAR 0 1
11809: PPUSH
11810: LD_INT 2
11812: PPUSH
11813: CALL_OW 235
11817: GO 11802
11819: POP
11820: POP
// wait ( 0 0$3 ) ;
11821: LD_INT 105
11823: PPUSH
11824: CALL_OW 67
// americanBaseCaptured := true ;
11828: LD_ADDR_EXP 7
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// end ;
11836: PPOPN 2
11838: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11839: LD_EXP 14
11843: PUSH
11844: LD_INT 3
11846: GREATEREQUAL
11847: IFFALSE 11859
11849: GO 11851
11851: DISABLE
// SetAchievement ( ACH_ENG ) ;
11852: LD_STRING ACH_ENG
11854: PPUSH
11855: CALL_OW 543
11859: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11860: LD_INT 22
11862: PUSH
11863: LD_INT 2
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: LD_INT 25
11872: PUSH
11873: LD_INT 15
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PPUSH
11884: CALL_OW 69
11888: PUSH
11889: LD_INT 4
11891: GREATEREQUAL
11892: IFFALSE 11904
11894: GO 11896
11896: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11897: LD_STRING ACH_APEGEN
11899: PPUSH
11900: CALL_OW 543
11904: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11905: LD_INT 22
11907: PUSH
11908: LD_INT 2
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 30
11917: PUSH
11918: LD_INT 2
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 3
11927: PUSH
11928: LD_INT 57
11930: PUSH
11931: EMPTY
11932: LIST
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: IFFALSE 12212
11949: GO 11951
11951: DISABLE
// begin workshopBuilded := true ;
11952: LD_ADDR_EXP 11
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// if IsOk ( Markov ) then
11960: LD_EXP 38
11964: PPUSH
11965: CALL_OW 302
11969: IFFALSE 12028
// begin Say ( Heike , DH-1-shop-a ) ;
11971: LD_EXP 31
11975: PPUSH
11976: LD_STRING DH-1-shop-a
11978: PPUSH
11979: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11983: LD_INT 47
11985: PPUSH
11986: LD_INT 2
11988: PPUSH
11989: CALL_OW 321
11993: PUSH
11994: LD_INT 2
11996: EQUAL
11997: PUSH
11998: LD_INT 45
12000: PPUSH
12001: LD_INT 2
12003: PPUSH
12004: CALL_OW 321
12008: PUSH
12009: LD_INT 2
12011: EQUAL
12012: AND
12013: NOT
12014: IFFALSE 12028
// Say ( Markov , DMar-1-shop-a ) ;
12016: LD_EXP 38
12020: PPUSH
12021: LD_STRING DMar-1-shop-a
12023: PPUSH
12024: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12028: LD_INT 35
12030: PPUSH
12031: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12035: LD_INT 47
12037: PPUSH
12038: LD_INT 2
12040: PPUSH
12041: CALL_OW 321
12045: PUSH
12046: LD_INT 2
12048: EQUAL
12049: PUSH
12050: LD_INT 45
12052: PPUSH
12053: LD_INT 2
12055: PPUSH
12056: CALL_OW 321
12060: PUSH
12061: LD_INT 2
12063: EQUAL
12064: OR
12065: IFFALSE 12028
// if IsOk ( Markov ) and IsOk ( Heike ) then
12067: LD_EXP 38
12071: PPUSH
12072: CALL_OW 302
12076: PUSH
12077: LD_EXP 31
12081: PPUSH
12082: CALL_OW 302
12086: AND
12087: IFFALSE 12205
// begin DialogueOn ;
12089: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12093: LD_EXP 38
12097: PPUSH
12098: LD_STRING DMar-1-shop
12100: PPUSH
12101: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12105: LD_EXP 31
12109: PPUSH
12110: LD_STRING DH-1-shop
12112: PPUSH
12113: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12117: LD_EXP 38
12121: PPUSH
12122: LD_STRING DMar-2-shop
12124: PPUSH
12125: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12129: LD_EXP 38
12133: PPUSH
12134: LD_STRING DMar-3-shop
12136: PPUSH
12137: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12141: LD_EXP 31
12145: PPUSH
12146: LD_STRING DH-2-shop
12148: PPUSH
12149: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12153: LD_EXP 38
12157: PPUSH
12158: LD_STRING DMar-4-shop
12160: PPUSH
12161: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12165: LD_EXP 31
12169: PPUSH
12170: LD_STRING DH-3-shop
12172: PPUSH
12173: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12177: LD_EXP 38
12181: PPUSH
12182: LD_STRING DMar-5-shop
12184: PPUSH
12185: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12189: LD_EXP 31
12193: PPUSH
12194: LD_STRING DH-4-shop
12196: PPUSH
12197: CALL_OW 88
// DialogueOff ;
12201: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12205: LD_STRING ConstructVeh
12207: PPUSH
12208: CALL_OW 337
// end ;
12212: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12213: LD_INT 2
12215: PPUSH
12216: LD_INT 2
12218: PPUSH
12219: LD_INT 1
12221: PPUSH
12222: CALL 40233 0 3
12226: PUSH
12227: LD_INT 0
12229: EQUAL
12230: IFFALSE 12242
12232: GO 12234
12234: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12235: LD_STRING Techs
12237: PPUSH
12238: CALL_OW 337
12242: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12243: LD_EXP 38
12247: PPUSH
12248: CALL_OW 302
12252: PUSH
12253: LD_INT 22
12255: PUSH
12256: LD_INT 2
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 2
12265: PUSH
12266: LD_INT 34
12268: PUSH
12269: LD_INT 22
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 35
12278: PUSH
12279: LD_INT 22
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 69
12299: AND
12300: IFFALSE 12407
12302: GO 12304
12304: DISABLE
// begin DialogueOn ;
12305: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12309: LD_INT 22
12311: PUSH
12312: LD_INT 2
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 2
12321: PUSH
12322: LD_INT 34
12324: PUSH
12325: LD_INT 22
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 35
12334: PUSH
12335: LD_INT 22
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 69
12355: PPUSH
12356: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12360: LD_INT 10
12362: PPUSH
12363: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12367: LD_EXP 31
12371: PPUSH
12372: LD_STRING DH-1-bal
12374: PPUSH
12375: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12379: LD_EXP 38
12383: PPUSH
12384: LD_STRING DMar-1-bal
12386: PPUSH
12387: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12391: LD_EXP 31
12395: PPUSH
12396: LD_STRING DH-2-bal
12398: PPUSH
12399: CALL_OW 88
// DialogueOff ;
12403: CALL_OW 7
// end ;
12407: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12408: LD_EXP 35
12412: PPUSH
12413: CALL_OW 302
12417: PUSH
12418: LD_INT 22
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 30
12430: PUSH
12431: LD_INT 6
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PPUSH
12442: CALL_OW 69
12446: AND
12447: IFFALSE 12508
12449: GO 12451
12451: DISABLE
// begin DialogueOn ;
12452: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12456: LD_EXP 35
12460: PPUSH
12461: LD_STRING DA-1-lab
12463: PPUSH
12464: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12468: LD_EXP 31
12472: PPUSH
12473: LD_STRING DH-1-lab
12475: PPUSH
12476: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12480: LD_EXP 35
12484: PPUSH
12485: LD_STRING DA-2-lab
12487: PPUSH
12488: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12492: LD_EXP 31
12496: PPUSH
12497: LD_STRING DH-2-lab
12499: PPUSH
12500: CALL_OW 88
// DialogueOff ;
12504: CALL_OW 7
// end ;
12508: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12509: LD_EXP 36
12513: PPUSH
12514: CALL_OW 302
12518: PUSH
12519: LD_INT 22
12521: PUSH
12522: LD_INT 2
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 25
12531: PUSH
12532: LD_INT 15
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PPUSH
12543: CALL_OW 69
12547: AND
12548: PUSH
12549: LD_INT 81
12551: PUSH
12552: LD_INT 2
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PPUSH
12559: CALL_OW 69
12563: NOT
12564: AND
12565: IFFALSE 12754
12567: GO 12569
12569: DISABLE
12570: LD_INT 0
12572: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12573: LD_ADDR_VAR 0 1
12577: PUSH
12578: LD_INT 22
12580: PUSH
12581: LD_INT 2
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 25
12590: PUSH
12591: LD_INT 15
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PPUSH
12602: CALL_OW 69
12606: ST_TO_ADDR
// InGameOn ;
12607: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12611: LD_VAR 0 1
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PPUSH
12620: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12624: LD_VAR 0 1
12628: PUSH
12629: LD_INT 1
12631: ARRAY
12632: PPUSH
12633: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12637: LD_EXP 36
12641: PPUSH
12642: LD_STRING DK-1-apesol
12644: PPUSH
12645: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12649: LD_VAR 0 1
12653: PUSH
12654: LD_INT 1
12656: ARRAY
12657: PPUSH
12658: LD_INT 35
12660: PPUSH
12661: LD_INT 28
12663: PPUSH
12664: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12668: LD_VAR 0 1
12672: PUSH
12673: LD_INT 1
12675: ARRAY
12676: PPUSH
12677: LD_INT 36
12679: PPUSH
12680: LD_INT 17
12682: PPUSH
12683: CALL_OW 171
// wait ( 0 0$2 ) ;
12687: LD_INT 70
12689: PPUSH
12690: CALL_OW 67
// DialogueOn ;
12694: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12698: LD_EXP 35
12702: PPUSH
12703: LD_STRING DA-1-apesol
12705: PPUSH
12706: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12710: LD_EXP 36
12714: PPUSH
12715: LD_STRING DK-2-apesol
12717: PPUSH
12718: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12722: LD_EXP 35
12726: PPUSH
12727: LD_STRING DA-2-apesol
12729: PPUSH
12730: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12734: LD_EXP 36
12738: PPUSH
12739: LD_STRING DK-3-apesol
12741: PPUSH
12742: CALL_OW 88
// DialogueOff ;
12746: CALL_OW 7
// InGameOff ;
12750: CALL_OW 9
// end ;
12754: PPOPN 1
12756: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12757: LD_EXP 37
12761: PPUSH
12762: CALL_OW 302
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_INT 2
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 25
12779: PUSH
12780: LD_INT 16
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: AND
12796: PUSH
12797: LD_INT 81
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PPUSH
12807: CALL_OW 69
12811: NOT
12812: AND
12813: IFFALSE 13127
12815: GO 12817
12817: DISABLE
12818: LD_INT 0
12820: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12821: LD_ADDR_VAR 0 1
12825: PUSH
12826: LD_INT 22
12828: PUSH
12829: LD_INT 2
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 25
12838: PUSH
12839: LD_INT 16
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 69
12854: ST_TO_ADDR
// blockAttack := true ;
12855: LD_ADDR_EXP 29
12859: PUSH
12860: LD_INT 1
12862: ST_TO_ADDR
// InGameOn ;
12863: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12867: LD_INT 35
12869: PPUSH
12870: LD_INT 22
12872: PPUSH
12873: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12877: LD_INT 5
12879: PPUSH
12880: LD_INT 35
12882: PPUSH
12883: LD_INT 22
12885: PPUSH
12886: LD_INT 1
12888: PPUSH
12889: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12893: LD_EXP 37
12897: PPUSH
12898: LD_VAR 0 1
12902: PUSH
12903: LD_INT 1
12905: ARRAY
12906: PPUSH
12907: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12911: LD_VAR 0 1
12915: PUSH
12916: LD_INT 1
12918: ARRAY
12919: PPUSH
12920: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12924: LD_VAR 0 1
12928: PUSH
12929: LD_INT 1
12931: ARRAY
12932: PPUSH
12933: CALL_OW 122
// wait ( 0 0$2 ) ;
12937: LD_INT 70
12939: PPUSH
12940: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12944: LD_EXP 37
12948: PPUSH
12949: LD_STRING DS-1-apeeng
12951: PPUSH
12952: CALL_OW 88
// if IsOk ( Kamil ) then
12956: LD_EXP 34
12960: PPUSH
12961: CALL_OW 302
12965: IFFALSE 13115
// begin Say ( Kamil , DKam-1-apeeng ) ;
12967: LD_EXP 34
12971: PPUSH
12972: LD_STRING DKam-1-apeeng
12974: PPUSH
12975: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12979: LD_EXP 37
12983: PPUSH
12984: LD_STRING DS-2-apeeng
12986: PPUSH
12987: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12991: LD_EXP 34
12995: PPUSH
12996: LD_STRING DKam-2-apeeng
12998: PPUSH
12999: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
13003: LD_EXP 37
13007: PPUSH
13008: LD_STRING DS-3-apeeng
13010: PPUSH
13011: CALL_OW 88
// if not IsOK ( Kaia ) then
13015: LD_EXP 36
13019: PPUSH
13020: CALL_OW 302
13024: NOT
13025: IFFALSE 13041
// begin InGameOff ;
13027: CALL_OW 9
// blockAttack := false ;
13031: LD_ADDR_EXP 29
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// exit ;
13039: GO 13127
// end ; Say ( Kaia , DK-1-apeeng ) ;
13041: LD_EXP 36
13045: PPUSH
13046: LD_STRING DK-1-apeeng
13048: PPUSH
13049: CALL_OW 88
// if not IsOk ( Givi ) then
13053: LD_EXP 32
13057: PPUSH
13058: CALL_OW 302
13062: NOT
13063: IFFALSE 13079
// begin InGameOff ;
13065: CALL_OW 9
// blockAttack := false ;
13069: LD_ADDR_EXP 29
13073: PUSH
13074: LD_INT 0
13076: ST_TO_ADDR
// exit ;
13077: GO 13127
// end ; Say ( Givi , DG-1-apeeng ) ;
13079: LD_EXP 32
13083: PPUSH
13084: LD_STRING DG-1-apeeng
13086: PPUSH
13087: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13091: LD_EXP 36
13095: PPUSH
13096: LD_STRING DK-2-apeeng
13098: PPUSH
13099: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13103: LD_EXP 36
13107: PPUSH
13108: LD_STRING DK-3-apeeng
13110: PPUSH
13111: CALL_OW 88
// end ; InGameOff ;
13115: CALL_OW 9
// blockAttack := false ;
13119: LD_ADDR_EXP 29
13123: PUSH
13124: LD_INT 0
13126: ST_TO_ADDR
// end ;
13127: PPOPN 1
13129: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13130: LD_EXP 4
13134: PUSH
13135: LD_INT 22
13137: PUSH
13138: LD_INT 2
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: LD_INT 30
13147: PUSH
13148: LD_INT 0
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PPUSH
13159: CALL_OW 69
13163: AND
13164: IFFALSE 13345
13166: GO 13168
13168: DISABLE
// begin blockAttack := true ;
13169: LD_ADDR_EXP 29
13173: PUSH
13174: LD_INT 1
13176: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13177: LD_INT 350
13179: PPUSH
13180: CALL_OW 67
// DialogueOn ;
13184: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13188: LD_EXP 39
13192: PPUSH
13193: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13197: LD_EXP 39
13201: PPUSH
13202: LD_STRING DF-1-distribution
13204: PPUSH
13205: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13209: LD_EXP 31
13213: PPUSH
13214: LD_STRING DH-2-distribution
13216: PPUSH
13217: CALL_OW 88
// if IsOk ( Kaia ) then
13221: LD_EXP 36
13225: PPUSH
13226: CALL_OW 302
13230: IFFALSE 13291
// begin Say ( Kaia , DK-1-distribution ) ;
13232: LD_EXP 36
13236: PPUSH
13237: LD_STRING DK-1-distribution
13239: PPUSH
13240: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13244: LD_EXP 31
13248: PPUSH
13249: LD_STRING DH-1-distribution
13251: PPUSH
13252: CALL_OW 88
// if IsOk ( Givi ) then
13256: LD_EXP 32
13260: PPUSH
13261: CALL_OW 302
13265: IFFALSE 13291
// begin Say ( Givi , DG-1-distribution ) ;
13267: LD_EXP 32
13271: PPUSH
13272: LD_STRING DG-1-distribution
13274: PPUSH
13275: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13279: LD_EXP 31
13283: PPUSH
13284: LD_STRING DH-3-distribution
13286: PPUSH
13287: CALL_OW 88
// end ; end ; DialogueOff ;
13291: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13295: LD_STRING Crates1
13297: PPUSH
13298: CALL_OW 337
// farmerRequestedCrates := 300 ;
13302: LD_ADDR_EXP 17
13306: PUSH
13307: LD_INT 300
13309: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13310: LD_STRING FarmerCrates
13312: PPUSH
13313: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13317: LD_INT 10
13319: PPUSH
13320: LD_INT 1
13322: PPUSH
13323: CALL_OW 424
// blockAttack := false ;
13327: LD_ADDR_EXP 29
13331: PUSH
13332: LD_INT 0
13334: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13335: LD_INT 108
13337: PPUSH
13338: LD_INT 61
13340: PPUSH
13341: CALL_OW 86
// end ;
13345: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13346: LD_EXP 7
13350: PUSH
13351: LD_INT 22
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 3
13363: PUSH
13364: LD_INT 57
13366: PUSH
13367: EMPTY
13368: LIST
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: LD_INT 30
13379: PUSH
13380: LD_INT 6
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 30
13389: PUSH
13390: LD_INT 7
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: PPUSH
13407: CALL_OW 69
13411: AND
13412: PUSH
13413: LD_INT 22
13415: PUSH
13416: LD_INT 2
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 3
13425: PUSH
13426: LD_INT 57
13428: PUSH
13429: EMPTY
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PUSH
13436: LD_INT 30
13438: PUSH
13439: LD_INT 4
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: AND
13456: IFFALSE 13620
13458: GO 13460
13460: DISABLE
13461: LD_INT 0
13463: PPUSH
// begin wait ( 0 0$10 ) ;
13464: LD_INT 350
13466: PPUSH
13467: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13471: LD_ADDR_VAR 0 1
13475: PUSH
13476: LD_EXP 45
13480: PPUSH
13481: LD_INT 26
13483: PUSH
13484: LD_INT 1
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 25
13493: PUSH
13494: LD_INT 2
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 72
13509: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13510: LD_EXP 31
13514: PPUSH
13515: LD_STRING DH-1-task
13517: PPUSH
13518: CALL_OW 88
// if IsOk ( Sophia ) then
13522: LD_EXP 37
13526: PPUSH
13527: CALL_OW 302
13531: IFFALSE 13571
// begin Say ( Sophia , DS-1-task ) ;
13533: LD_EXP 37
13537: PPUSH
13538: LD_STRING DS-1-task
13540: PPUSH
13541: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13545: LD_EXP 37
13549: PPUSH
13550: LD_STRING DS-2-task
13552: PPUSH
13553: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13557: LD_EXP 31
13561: PPUSH
13562: LD_STRING DH-2-task
13564: PPUSH
13565: CALL_OW 88
// end else
13569: GO 13605
// if eng then
13571: LD_VAR 0 1
13575: IFFALSE 13605
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13577: LD_VAR 0 1
13581: PUSH
13582: LD_INT 1
13584: ARRAY
13585: PPUSH
13586: LD_STRING DArm-1-task
13588: PPUSH
13589: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13593: LD_EXP 31
13597: PPUSH
13598: LD_STRING DH-2-task
13600: PPUSH
13601: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13605: LD_STRING BaseConstructed
13607: PPUSH
13608: CALL_OW 337
// allowConvoys := true ;
13612: LD_ADDR_EXP 13
13616: PUSH
13617: LD_INT 1
13619: ST_TO_ADDR
// end ;
13620: PPOPN 1
13622: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13623: LD_INT 22
13625: PUSH
13626: LD_INT 4
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 34
13635: PUSH
13636: LD_INT 12
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PPUSH
13647: CALL_OW 69
13651: IFFALSE 13819
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
13659: PPUSH
13660: PPUSH
// begin wait ( 0 0$2 ) ;
13661: LD_INT 70
13663: PPUSH
13664: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13668: LD_ADDR_VAR 0 1
13672: PUSH
13673: LD_INT 22
13675: PUSH
13676: LD_INT 4
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 34
13685: PUSH
13686: LD_INT 12
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PPUSH
13697: CALL_OW 69
13701: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13702: LD_ADDR_VAR 0 2
13706: PUSH
13707: LD_VAR 0 1
13711: PUSH
13712: LD_INT 1
13714: ARRAY
13715: PPUSH
13716: CALL_OW 250
13720: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13721: LD_ADDR_VAR 0 3
13725: PUSH
13726: LD_VAR 0 1
13730: PUSH
13731: LD_INT 1
13733: ARRAY
13734: PPUSH
13735: CALL_OW 251
13739: ST_TO_ADDR
// DialogueOn ;
13740: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13744: LD_VAR 0 2
13748: PPUSH
13749: LD_VAR 0 3
13753: PPUSH
13754: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13758: LD_VAR 0 2
13762: PPUSH
13763: LD_VAR 0 3
13767: PPUSH
13768: LD_INT 2
13770: PPUSH
13771: LD_INT 6
13773: NEG
13774: PPUSH
13775: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13779: LD_INT 10
13781: PPUSH
13782: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13786: LD_EXP 31
13790: PPUSH
13791: LD_STRING DH-1-seecargo
13793: PPUSH
13794: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13798: LD_VAR 0 2
13802: PPUSH
13803: LD_VAR 0 3
13807: PPUSH
13808: LD_INT 2
13810: PPUSH
13811: CALL_OW 331
// DialogueOff ;
13815: CALL_OW 7
// end ;
13819: PPOPN 3
13821: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13822: LD_EXP 4
13826: PUSH
13827: LD_EXP 16
13831: PUSH
13832: LD_INT 300
13834: GREATEREQUAL
13835: AND
13836: IFFALSE 13908
13838: GO 13840
13840: DISABLE
// begin DialogueOn ;
13841: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13845: LD_EXP 39
13849: PPUSH
13850: LD_STRING DF-1-delivery-2
13852: PPUSH
13853: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13857: LD_EXP 31
13861: PPUSH
13862: LD_STRING DH-1-delivery-2
13864: PPUSH
13865: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13869: LD_EXP 39
13873: PPUSH
13874: LD_STRING DF-2-delivery-2
13876: PPUSH
13877: CALL_OW 94
// DialogueOff ;
13881: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13885: LD_STRING Crates2
13887: PPUSH
13888: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13892: LD_ADDR_EXP 18
13896: PUSH
13897: LD_INT 63000
13899: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13900: LD_ADDR_EXP 17
13904: PUSH
13905: LD_INT 600
13907: ST_TO_ADDR
// end ;
13908: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13909: LD_EXP 4
13913: PUSH
13914: LD_EXP 16
13918: PUSH
13919: LD_INT 600
13921: GREATEREQUAL
13922: AND
13923: PUSH
13924: LD_OWVAR 67
13928: PUSH
13929: LD_INT 1
13931: GREATER
13932: AND
13933: IFFALSE 14133
13935: GO 13937
13937: DISABLE
// begin DialogueOn ;
13938: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13942: LD_EXP 39
13946: PPUSH
13947: LD_STRING DF-1-delivery-3
13949: PPUSH
13950: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13954: LD_EXP 31
13958: PPUSH
13959: LD_STRING DH-1-delivery-3
13961: PPUSH
13962: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13966: LD_EXP 39
13970: PPUSH
13971: LD_STRING DF-2-delivery-3
13973: PPUSH
13974: CALL_OW 94
// if IsOk ( Kaia ) then
13978: LD_EXP 36
13982: PPUSH
13983: CALL_OW 302
13987: IFFALSE 14037
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13989: LD_EXP 36
13993: PPUSH
13994: LD_STRING DK-1-delivery-3
13996: PPUSH
13997: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
14001: LD_EXP 31
14005: PPUSH
14006: LD_STRING DH-2-delivery-3
14008: PPUSH
14009: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14013: LD_EXP 32
14017: PPUSH
14018: LD_STRING DG-1-delivery-3
14020: PPUSH
14021: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14025: LD_EXP 33
14029: PPUSH
14030: LD_STRING DM-1-delivery-3
14032: PPUSH
14033: CALL_OW 88
// end ; DialogueOff ;
14037: CALL_OW 7
// case Difficulty of 2 :
14041: LD_OWVAR 67
14045: PUSH
14046: LD_INT 2
14048: DOUBLE
14049: EQUAL
14050: IFTRUE 14054
14052: GO 14072
14054: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14055: LD_STRING Crates3
14057: PPUSH
14058: CALL_OW 337
// farmerRequestedCrates := 900 ;
14062: LD_ADDR_EXP 17
14066: PUSH
14067: LD_INT 900
14069: ST_TO_ADDR
// end ; 3 :
14070: GO 14125
14072: LD_INT 3
14074: DOUBLE
14075: EQUAL
14076: IFTRUE 14080
14078: GO 14098
14080: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14081: LD_STRING Crates4
14083: PPUSH
14084: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14088: LD_ADDR_EXP 17
14092: PUSH
14093: LD_INT 1200
14095: ST_TO_ADDR
// end ; 4 :
14096: GO 14125
14098: LD_INT 4
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14124
14106: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14107: LD_STRING Crates5
14109: PPUSH
14110: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14114: LD_ADDR_EXP 17
14118: PUSH
14119: LD_INT 1400
14121: ST_TO_ADDR
// end ; end ;
14122: GO 14125
14124: POP
// farmerCratesCounter := 30 30$00 ;
14125: LD_ADDR_EXP 18
14129: PUSH
14130: LD_INT 63000
14132: ST_TO_ADDR
// end ;
14133: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14134: LD_EXP 4
14138: PUSH
14139: LD_EXP 16
14143: PUSH
14144: LD_INT 600
14146: PUSH
14147: LD_INT 900
14149: PUSH
14150: LD_INT 1200
14152: PUSH
14153: LD_INT 1400
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: PUSH
14162: LD_OWVAR 67
14166: ARRAY
14167: GREATEREQUAL
14168: AND
14169: IFFALSE 14255
14171: GO 14173
14173: DISABLE
// begin retreatAllowed := true ;
14174: LD_ADDR_EXP 12
14178: PUSH
14179: LD_INT 1
14181: ST_TO_ADDR
// display_strings := [ ] ;
14182: LD_ADDR_OWVAR 47
14186: PUSH
14187: EMPTY
14188: ST_TO_ADDR
// DialogueOn ;
14189: CALL_OW 6
// InGameOn ;
14193: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14197: LD_EXP 40
14201: PPUSH
14202: LD_STRING DO-radio-end
14204: PPUSH
14205: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14209: LD_EXP 31
14213: PPUSH
14214: LD_STRING DH-1-radio-end
14216: PPUSH
14217: CALL_OW 88
// InGameOff ;
14221: CALL_OW 9
// DialogueOff ;
14225: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14229: LD_STRING Retreat
14231: PPUSH
14232: CALL_OW 337
// wait ( 0 0$2 ) ;
14236: LD_INT 70
14238: PPUSH
14239: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14243: LD_EXP 31
14247: PPUSH
14248: LD_STRING DH-2-radio-end
14250: PPUSH
14251: CALL_OW 88
// end ;
14255: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14256: LD_EXP 12
14260: IFFALSE 14391
14262: GO 14264
14264: DISABLE
14265: LD_INT 0
14267: PPUSH
14268: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14269: LD_INT 10
14271: PPUSH
14272: LD_INT 0
14274: PPUSH
14275: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14279: LD_ADDR_VAR 0 1
14283: PUSH
14284: LD_EXP 42
14288: PPUSH
14289: LD_INT 25
14291: PUSH
14292: LD_INT 2
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PPUSH
14299: CALL_OW 72
14303: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14304: LD_VAR 0 1
14308: PUSH
14309: LD_INT 102
14311: PPUSH
14312: LD_INT 69
14314: PPUSH
14315: CALL_OW 428
14319: PUSH
14320: LD_INT 0
14322: EQUAL
14323: AND
14324: IFFALSE 14391
// begin for i in tmp do
14326: LD_ADDR_VAR 0 2
14330: PUSH
14331: LD_VAR 0 1
14335: PUSH
14336: FOR_IN
14337: IFFALSE 14361
// if IsInUnit ( i ) then
14339: LD_VAR 0 2
14343: PPUSH
14344: CALL_OW 310
14348: IFFALSE 14359
// ComExitBuilding ( i ) ;
14350: LD_VAR 0 2
14354: PPUSH
14355: CALL_OW 122
14359: GO 14336
14361: POP
14362: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14363: LD_VAR 0 1
14367: PPUSH
14368: LD_INT 31
14370: PPUSH
14371: LD_INT 102
14373: PPUSH
14374: LD_INT 69
14376: PPUSH
14377: LD_INT 2
14379: PPUSH
14380: CALL_OW 205
// wait ( 0 0$3 ) ;
14384: LD_INT 105
14386: PPUSH
14387: CALL_OW 67
// end ; end ;
14391: PPOPN 2
14393: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14394: LD_EXP 12
14398: NOT
14399: PUSH
14400: LD_INT 5
14402: PPUSH
14403: CALL_OW 301
14407: AND
14408: IFFALSE 14440
14410: GO 14412
14412: DISABLE
// begin DialogueOn ;
14413: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14417: LD_EXP 39
14421: PPUSH
14422: LD_STRING DF-1-failure
14424: PPUSH
14425: CALL_OW 94
// DialogueOff ;
14429: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14433: LD_STRING FarmerDepot
14435: PPUSH
14436: CALL_OW 104
// end ;
14440: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14441: LD_EXP 12
14445: PUSH
14446: LD_EXP 31
14450: PPUSH
14451: LD_EXP 39
14455: PPUSH
14456: CALL_OW 296
14460: PUSH
14461: LD_INT 12
14463: LESS
14464: AND
14465: PUSH
14466: LD_INT 81
14468: PUSH
14469: LD_INT 2
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: LD_INT 21
14478: PUSH
14479: LD_INT 1
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PPUSH
14490: CALL_OW 69
14494: NOT
14495: AND
14496: IFFALSE 15180
14498: GO 14500
14500: DISABLE
14501: LD_INT 0
14503: PPUSH
14504: PPUSH
14505: PPUSH
// begin allowConvoys := false ;
14506: LD_ADDR_EXP 13
14510: PUSH
14511: LD_INT 0
14513: ST_TO_ADDR
// InGameOn ;
14514: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14518: LD_EXP 31
14522: PPUSH
14523: LD_EXP 39
14527: PPUSH
14528: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14532: LD_EXP 39
14536: PPUSH
14537: LD_EXP 31
14541: PPUSH
14542: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14546: LD_EXP 39
14550: PPUSH
14551: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14555: LD_EXP 31
14559: PPUSH
14560: LD_STRING DH-1-end
14562: PPUSH
14563: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14567: LD_EXP 39
14571: PPUSH
14572: LD_STRING DF-1-end
14574: PPUSH
14575: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14579: LD_EXP 39
14583: PPUSH
14584: LD_STRING DF-2-end
14586: PPUSH
14587: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14591: LD_EXP 31
14595: PPUSH
14596: LD_STRING DH-2-end
14598: PPUSH
14599: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14603: LD_EXP 39
14607: PPUSH
14608: LD_STRING DF-3-end
14610: PPUSH
14611: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14615: LD_EXP 31
14619: PPUSH
14620: LD_STRING DH-3-end
14622: PPUSH
14623: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14627: LD_EXP 32
14631: PPUSH
14632: LD_STRING DG-1-end
14634: PPUSH
14635: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14639: LD_EXP 31
14643: PPUSH
14644: LD_STRING DH-4-end
14646: PPUSH
14647: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14651: LD_EXP 39
14655: PPUSH
14656: LD_STRING DF-4-end
14658: PPUSH
14659: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14663: LD_EXP 31
14667: PPUSH
14668: LD_STRING DH-5-end
14670: PPUSH
14671: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14675: LD_EXP 39
14679: PPUSH
14680: LD_STRING DF-5-end
14682: PPUSH
14683: CALL_OW 88
// InGameOff ;
14687: CALL_OW 9
// allowCargoEvacuation := true ;
14691: LD_ADDR_EXP 8
14695: PUSH
14696: LD_INT 1
14698: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14699: LD_ADDR_VAR 0 2
14703: PUSH
14704: LD_INT 4
14706: PUSH
14707: LD_INT 3
14709: PUSH
14710: LD_INT 2
14712: PUSH
14713: LD_INT 1
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: PUSH
14722: LD_OWVAR 67
14726: ARRAY
14727: ST_TO_ADDR
// if farmerSquad < max then
14728: LD_EXP 42
14732: PUSH
14733: LD_VAR 0 2
14737: LESS
14738: IFFALSE 14750
// max := farmerSquad ;
14740: LD_ADDR_VAR 0 2
14744: PUSH
14745: LD_EXP 42
14749: ST_TO_ADDR
// for i := 1 to max do
14750: LD_ADDR_VAR 0 1
14754: PUSH
14755: DOUBLE
14756: LD_INT 1
14758: DEC
14759: ST_TO_ADDR
14760: LD_VAR 0 2
14764: PUSH
14765: FOR_TO
14766: IFFALSE 14804
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14768: LD_EXP 42
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: PPUSH
14777: LD_INT 2
14779: PPUSH
14780: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14784: LD_ADDR_EXP 42
14788: PUSH
14789: LD_EXP 42
14793: PPUSH
14794: LD_INT 1
14796: PPUSH
14797: CALL_OW 3
14801: ST_TO_ADDR
// end ;
14802: GO 14765
14804: POP
14805: POP
// for i in Farmer ^ farmerSquad do
14806: LD_ADDR_VAR 0 1
14810: PUSH
14811: LD_EXP 39
14815: PUSH
14816: LD_EXP 42
14820: ADD
14821: PUSH
14822: FOR_IN
14823: IFFALSE 14862
// begin if IsInUnit ( i ) then
14825: LD_VAR 0 1
14829: PPUSH
14830: CALL_OW 310
14834: IFFALSE 14845
// ComExitBuilding ( i ) ;
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14845: LD_VAR 0 1
14849: PPUSH
14850: LD_INT 102
14852: PPUSH
14853: LD_INT 7
14855: PPUSH
14856: CALL_OW 171
// end ;
14860: GO 14822
14862: POP
14863: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14864: LD_ADDR_VAR 0 1
14868: PUSH
14869: LD_INT 22
14871: PUSH
14872: LD_INT 5
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 21
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 69
14897: PUSH
14898: LD_INT 5
14900: DIFF
14901: PUSH
14902: FOR_IN
14903: IFFALSE 14919
// SetSide ( i , 2 ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_INT 2
14912: PPUSH
14913: CALL_OW 235
14917: GO 14902
14919: POP
14920: POP
// wait ( 0 0$2 ) ;
14921: LD_INT 70
14923: PPUSH
14924: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14928: LD_EXP 31
14932: PPUSH
14933: LD_STRING DH-6-end
14935: PPUSH
14936: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14940: LD_INT 35
14942: PPUSH
14943: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14947: LD_ADDR_VAR 0 3
14951: PUSH
14952: LD_EXP 39
14956: PUSH
14957: LD_EXP 42
14961: ADD
14962: PPUSH
14963: LD_INT 95
14965: PUSH
14966: LD_INT 3
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PPUSH
14973: CALL_OW 72
14977: ST_TO_ADDR
// if tmp then
14978: LD_VAR 0 3
14982: IFFALSE 15026
// for i in tmp do
14984: LD_ADDR_VAR 0 1
14988: PUSH
14989: LD_VAR 0 3
14993: PUSH
14994: FOR_IN
14995: IFFALSE 15024
// begin farmerSquad := farmerSquad diff i ;
14997: LD_ADDR_EXP 42
15001: PUSH
15002: LD_EXP 42
15006: PUSH
15007: LD_VAR 0 1
15011: DIFF
15012: ST_TO_ADDR
// RemoveUnit ( i ) ;
15013: LD_VAR 0 1
15017: PPUSH
15018: CALL_OW 64
// end ;
15022: GO 14994
15024: POP
15025: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15026: LD_EXP 42
15030: PUSH
15031: EMPTY
15032: EQUAL
15033: PUSH
15034: LD_EXP 39
15038: PPUSH
15039: CALL_OW 305
15043: NOT
15044: AND
15045: IFFALSE 14940
// if farmerHumanLoseCounter = 0 then
15047: LD_EXP 21
15051: PUSH
15052: LD_INT 0
15054: EQUAL
15055: IFFALSE 15064
// SetAchievement ( ACH_BABY ) ;
15057: LD_STRING ACH_BABY
15059: PPUSH
15060: CALL_OW 543
// wait ( 1 1$00 ) ;
15064: LD_INT 2100
15066: PPUSH
15067: CALL_OW 67
// SendAttack ;
15071: CALL 6126 0 0
// Say ( Heike , DH-7-end ) ;
15075: LD_EXP 31
15079: PPUSH
15080: LD_STRING DH-7-end
15082: PPUSH
15083: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15087: LD_ADDR_VAR 0 1
15091: PUSH
15092: DOUBLE
15093: LD_INT 1
15095: DEC
15096: ST_TO_ADDR
15097: LD_INT 2
15099: PUSH
15100: LD_INT 3
15102: PUSH
15103: LD_INT 3
15105: PUSH
15106: LD_INT 4
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: PUSH
15115: LD_OWVAR 67
15119: ARRAY
15120: PUSH
15121: FOR_TO
15122: IFFALSE 15178
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15124: LD_INT 4200
15126: PUSH
15127: LD_INT 3500
15129: PUSH
15130: LD_INT 3150
15132: PUSH
15133: LD_INT 2800
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: PUSH
15142: LD_OWVAR 67
15146: ARRAY
15147: PPUSH
15148: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15152: LD_EXP 12
15156: PUSH
15157: LD_EXP 22
15161: PUSH
15162: LD_INT 1
15164: LESS
15165: AND
15166: IFFALSE 15172
// exit ;
15168: POP
15169: POP
15170: GO 15180
// SendAttack ;
15172: CALL 6126 0 0
// end ;
15176: GO 15121
15178: POP
15179: POP
// end ;
15180: PPOPN 3
15182: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15183: LD_EXP 8
15187: PUSH
15188: LD_EXP 22
15192: PUSH
15193: LD_INT 0
15195: GREATER
15196: AND
15197: IFFALSE 15207
15199: GO 15201
15201: DISABLE
// begin enable ;
15202: ENABLE
// CargoEvacuation ;
15203: CALL 3599 0 0
// end ;
15207: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15208: LD_EXP 18
15212: PUSH
15213: LD_INT 18900
15215: LESSEQUAL
15216: IFFALSE 15265
15218: GO 15220
15220: DISABLE
// begin DialogueOn ;
15221: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15225: LD_EXP 39
15229: PPUSH
15230: LD_STRING DF-1-distribution-a
15232: PPUSH
15233: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15237: LD_EXP 31
15241: PPUSH
15242: LD_STRING DH-1-distribution-a
15244: PPUSH
15245: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15249: LD_EXP 39
15253: PPUSH
15254: LD_STRING DF-2-distribution-a
15256: PPUSH
15257: CALL_OW 94
// DialogueOff ;
15261: CALL_OW 7
// end ;
15265: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15266: LD_EXP 18
15270: PUSH
15271: LD_INT 0
15273: LESSEQUAL
15274: IFFALSE 15306
15276: GO 15278
15278: DISABLE
// begin DialogueOn ;
15279: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15283: LD_EXP 39
15287: PPUSH
15288: LD_STRING DF-3-distribution-a
15290: PPUSH
15291: CALL_OW 94
// YouLost ( Distribution ) ;
15295: LD_STRING Distribution
15297: PPUSH
15298: CALL_OW 104
// DialogueOff ;
15302: CALL_OW 7
// end ;
15306: END
// every 0 0$1 trigger vehCounter >= 2 do
15307: LD_EXP 23
15311: PUSH
15312: LD_INT 2
15314: GREATEREQUAL
15315: IFFALSE 15327
15317: GO 15319
15319: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15320: LD_STRING VehConstructed
15322: PPUSH
15323: CALL_OW 337
15327: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15328: LD_INT 22
15330: PUSH
15331: LD_INT 2
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 34
15340: PUSH
15341: LD_INT 12
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 69
15356: IFFALSE 15416
15358: GO 15360
15360: DISABLE
// begin DialogueOn ;
15361: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15365: LD_EXP 31
15369: PPUSH
15370: LD_STRING DH-1-truck
15372: PPUSH
15373: CALL_OW 88
// if IsOk ( Markov ) then
15377: LD_EXP 38
15381: PPUSH
15382: CALL_OW 302
15386: IFFALSE 15412
// begin Say ( Markov , DMar-1-truck ) ;
15388: LD_EXP 38
15392: PPUSH
15393: LD_STRING DMar-1-truck
15395: PPUSH
15396: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15400: LD_EXP 31
15404: PPUSH
15405: LD_STRING DH-2-truck
15407: PPUSH
15408: CALL_OW 88
// end ; DialogueOff ;
15412: CALL_OW 7
// end ;
15416: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15417: LD_INT 0
15419: PPUSH
15420: PPUSH
15421: PPUSH
// if IsOk ( Givi ) then
15422: LD_EXP 32
15426: PPUSH
15427: CALL_OW 302
15431: IFFALSE 15447
// begin Say ( Givi , DG-1-nocargo ) ;
15433: LD_EXP 32
15437: PPUSH
15438: LD_STRING DG-1-nocargo
15440: PPUSH
15441: CALL_OW 88
// exit ;
15445: GO 15543
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15447: LD_ADDR_VAR 0 2
15451: PUSH
15452: LD_EXP 45
15456: PPUSH
15457: LD_INT 26
15459: PUSH
15460: LD_INT 1
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PPUSH
15467: CALL_OW 72
15471: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15472: LD_ADDR_VAR 0 3
15476: PUSH
15477: LD_EXP 45
15481: PPUSH
15482: LD_INT 26
15484: PUSH
15485: LD_INT 2
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PPUSH
15492: CALL_OW 72
15496: ST_TO_ADDR
// if randomMen then
15497: LD_VAR 0 2
15501: IFFALSE 15521
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15503: LD_VAR 0 2
15507: PUSH
15508: LD_INT 1
15510: ARRAY
15511: PPUSH
15512: LD_STRING DArm-1-nocargo
15514: PPUSH
15515: CALL_OW 88
15519: GO 15543
// if randomWomen then
15521: LD_VAR 0 3
15525: IFFALSE 15543
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15527: LD_VAR 0 3
15531: PUSH
15532: LD_INT 1
15534: ARRAY
15535: PPUSH
15536: LD_STRING DArf-1-nocargo
15538: PPUSH
15539: CALL_OW 88
// end ;
15543: LD_VAR 0 1
15547: RET
// export function IncomingAttack ; begin
15548: LD_INT 0
15550: PPUSH
// if attackWave = 1 then
15551: LD_EXP 20
15555: PUSH
15556: LD_INT 1
15558: EQUAL
15559: IFFALSE 15630
// begin DialogueOn ;
15561: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15565: LD_EXP 40
15569: PPUSH
15570: LD_STRING DO-1-radio-1
15572: PPUSH
15573: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15577: LD_EXP 31
15581: PPUSH
15582: LD_STRING DH-1-radio-1-
15584: PPUSH
15585: CALL_OW 88
// if IsOk ( Markov ) then
15589: LD_EXP 38
15593: PPUSH
15594: CALL_OW 302
15598: IFFALSE 15624
// begin Say ( Markov , DMar-1-radio-1 ) ;
15600: LD_EXP 38
15604: PPUSH
15605: LD_STRING DMar-1-radio-1
15607: PPUSH
15608: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15612: LD_EXP 31
15616: PPUSH
15617: LD_STRING DH-2-radio-1
15619: PPUSH
15620: CALL_OW 88
// end ; DialogueOff ;
15624: CALL_OW 7
// end else
15628: GO 15654
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15630: LD_EXP 40
15634: PPUSH
15635: LD_STRING DO-1-radio-u
15637: PPUSH
15638: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15642: LD_EXP 31
15646: PPUSH
15647: LD_STRING DH-1-radio-u
15649: PPUSH
15650: CALL_OW 88
// end ; end ;
15654: LD_VAR 0 1
15658: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15659: LD_EXP 47
15663: PPUSH
15664: LD_INT 95
15666: PUSH
15667: LD_INT 8
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PPUSH
15674: CALL_OW 72
15678: IFFALSE 15781
15680: GO 15682
15682: DISABLE
15683: LD_INT 0
15685: PPUSH
// begin enable ;
15686: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15687: LD_ADDR_VAR 0 1
15691: PUSH
15692: LD_EXP 47
15696: PPUSH
15697: LD_INT 95
15699: PUSH
15700: LD_INT 8
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 72
15711: PUSH
15712: FOR_IN
15713: IFFALSE 15742
// begin usForces := usForces diff i ;
15715: LD_ADDR_EXP 47
15719: PUSH
15720: LD_EXP 47
15724: PUSH
15725: LD_VAR 0 1
15729: DIFF
15730: ST_TO_ADDR
// RemoveUnit ( i ) ;
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 64
// end ;
15740: GO 15712
15742: POP
15743: POP
// if not americanHasEscaped and attackWave = 1 then
15744: LD_EXP 9
15748: NOT
15749: PUSH
15750: LD_EXP 20
15754: PUSH
15755: LD_INT 1
15757: EQUAL
15758: AND
15759: IFFALSE 15781
// begin americanHasEscaped := true ;
15761: LD_ADDR_EXP 9
15765: PUSH
15766: LD_INT 1
15768: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15769: LD_EXP 31
15773: PPUSH
15774: LD_STRING DH-2-assault-a
15776: PPUSH
15777: CALL_OW 88
// end ; end ;
15781: PPOPN 1
15783: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15784: LD_INT 4
15786: PPUSH
15787: LD_INT 22
15789: PUSH
15790: LD_INT 1
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PPUSH
15797: CALL_OW 70
15801: PUSH
15802: LD_EXP 12
15806: NOT
15807: AND
15808: IFFALSE 15825
15810: GO 15812
15812: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15813: LD_EXP 39
15817: PPUSH
15818: LD_STRING DF-1-attack
15820: PPUSH
15821: CALL_OW 94
15825: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15826: LD_INT 5
15828: PPUSH
15829: CALL_OW 255
15833: PUSH
15834: LD_INT 2
15836: EQUAL
15837: IFFALSE 15853
15839: GO 15841
15841: DISABLE
// begin enable ;
15842: ENABLE
// SetSide ( arDepot , 5 ) ;
15843: LD_INT 5
15845: PPUSH
15846: LD_INT 5
15848: PPUSH
15849: CALL_OW 235
// end ;
15853: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15854: LD_INT 22
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 21
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PPUSH
15878: CALL_OW 69
15882: NOT
15883: PUSH
15884: LD_INT 22
15886: PUSH
15887: LD_INT 4
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PPUSH
15894: CALL_OW 69
15898: NOT
15899: AND
15900: PUSH
15901: LD_EXP 12
15905: NOT
15906: AND
15907: PUSH
15908: LD_EXP 16
15912: PUSH
15913: LD_INT 90
15915: GREATER
15916: AND
15917: PUSH
15918: LD_INT 7
15920: PPUSH
15921: LD_INT 22
15923: PUSH
15924: LD_INT 2
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 21
15933: PUSH
15934: LD_INT 1
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PPUSH
15945: CALL_OW 70
15949: AND
15950: PUSH
15951: LD_INT 22
15953: PUSH
15954: LD_INT 2
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 50
15963: PUSH
15964: EMPTY
15965: LIST
15966: PUSH
15967: LD_INT 30
15969: PUSH
15970: LD_INT 0
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: PPUSH
15982: CALL_OW 69
15986: AND
15987: IFFALSE 16796
15989: GO 15991
15991: DISABLE
15992: LD_INT 0
15994: PPUSH
15995: PPUSH
15996: PPUSH
15997: PPUSH
15998: PPUSH
// begin depot := usDepot ;
15999: LD_ADDR_VAR 0 5
16003: PUSH
16004: LD_INT 11
16006: ST_TO_ADDR
// if not depot then
16007: LD_VAR 0 5
16011: NOT
16012: IFFALSE 16052
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16014: LD_ADDR_VAR 0 5
16018: PUSH
16019: LD_INT 22
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 30
16031: PUSH
16032: LD_INT 0
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PPUSH
16043: CALL_OW 69
16047: PUSH
16048: LD_INT 1
16050: ARRAY
16051: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16052: LD_ADDR_VAR 0 1
16056: PUSH
16057: LD_EXP 45
16061: PPUSH
16062: LD_INT 26
16064: PUSH
16065: LD_INT 1
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PPUSH
16072: CALL_OW 72
16076: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16077: LD_ADDR_VAR 0 2
16081: PUSH
16082: LD_EXP 45
16086: PPUSH
16087: LD_INT 26
16089: PUSH
16090: LD_INT 2
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 72
16101: ST_TO_ADDR
// if IsOk ( Kaia ) then
16102: LD_EXP 36
16106: PPUSH
16107: CALL_OW 302
16111: IFFALSE 16132
// speaker := [ Kaia , DK ] else
16113: LD_ADDR_VAR 0 3
16117: PUSH
16118: LD_EXP 36
16122: PUSH
16123: LD_STRING DK
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: ST_TO_ADDR
16130: GO 16212
// if randomMen then
16132: LD_VAR 0 1
16136: IFFALSE 16171
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_VAR 0 1
16147: PUSH
16148: LD_INT 1
16150: PPUSH
16151: LD_VAR 0 1
16155: PPUSH
16156: CALL_OW 12
16160: ARRAY
16161: PUSH
16162: LD_STRING DArm
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: ST_TO_ADDR
16169: GO 16212
// if randomWomen then
16171: LD_VAR 0 2
16175: IFFALSE 16210
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16177: LD_ADDR_VAR 0 3
16181: PUSH
16182: LD_VAR 0 2
16186: PUSH
16187: LD_INT 1
16189: PPUSH
16190: LD_VAR 0 2
16194: PPUSH
16195: CALL_OW 12
16199: ARRAY
16200: PUSH
16201: LD_STRING DArf
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: ST_TO_ADDR
16208: GO 16212
// exit ;
16210: GO 16796
// if IsInUnit ( speaker [ 1 ] ) then
16212: LD_VAR 0 3
16216: PUSH
16217: LD_INT 1
16219: ARRAY
16220: PPUSH
16221: CALL_OW 310
16225: IFFALSE 16248
// place := IsInUnit ( speaker [ 1 ] ) else
16227: LD_ADDR_VAR 0 4
16231: PUSH
16232: LD_VAR 0 3
16236: PUSH
16237: LD_INT 1
16239: ARRAY
16240: PPUSH
16241: CALL_OW 310
16245: ST_TO_ADDR
16246: GO 16262
// place := speaker [ 1 ] ;
16248: LD_ADDR_VAR 0 4
16252: PUSH
16253: LD_VAR 0 3
16257: PUSH
16258: LD_INT 1
16260: ARRAY
16261: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16262: LD_VAR 0 4
16266: PPUSH
16267: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16271: LD_VAR 0 4
16275: PPUSH
16276: CALL_OW 250
16280: PPUSH
16281: LD_VAR 0 4
16285: PPUSH
16286: CALL_OW 251
16290: PPUSH
16291: CALL 2086 0 2
// wait ( 0 0$2 ) ;
16295: LD_INT 70
16297: PPUSH
16298: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16302: LD_EXP 41
16306: PPUSH
16307: CALL_OW 305
16311: NOT
16312: IFFALSE 16316
// exit ;
16314: GO 16796
// allowConvoys := false ;
16316: LD_ADDR_EXP 13
16320: PUSH
16321: LD_INT 0
16323: ST_TO_ADDR
// blockAttack := true ;
16324: LD_ADDR_EXP 29
16328: PUSH
16329: LD_INT 1
16331: ST_TO_ADDR
// InGameOn ;
16332: CALL_OW 8
// wait ( 0 0$1 ) ;
16336: LD_INT 35
16338: PPUSH
16339: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16343: LD_EXP 41
16347: PPUSH
16348: LD_STRING DI-1-land
16350: PPUSH
16351: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16355: LD_VAR 0 3
16359: PUSH
16360: LD_INT 1
16362: ARRAY
16363: PPUSH
16364: CALL_OW 310
16368: IFFALSE 16383
// ComExit ( speaker [ 1 ] ) ;
16370: LD_VAR 0 3
16374: PUSH
16375: LD_INT 1
16377: ARRAY
16378: PPUSH
16379: CALL 77889 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16383: LD_VAR 0 3
16387: PUSH
16388: LD_INT 1
16390: ARRAY
16391: PPUSH
16392: LD_EXP 41
16396: PPUSH
16397: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16401: LD_VAR 0 3
16405: PUSH
16406: LD_INT 1
16408: ARRAY
16409: PPUSH
16410: LD_EXP 41
16414: PPUSH
16415: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16419: LD_EXP 41
16423: PPUSH
16424: LD_VAR 0 3
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: CALL_OW 119
// wait ( 0 0$1 ) ;
16437: LD_INT 35
16439: PPUSH
16440: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16444: LD_VAR 0 3
16448: PUSH
16449: LD_INT 1
16451: ARRAY
16452: PPUSH
16453: LD_VAR 0 3
16457: PUSH
16458: LD_INT 2
16460: ARRAY
16461: PUSH
16462: LD_STRING -1-land
16464: STR
16465: PPUSH
16466: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16470: LD_EXP 41
16474: PPUSH
16475: LD_STRING DI-2-land
16477: PPUSH
16478: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16482: LD_VAR 0 3
16486: PUSH
16487: LD_INT 1
16489: ARRAY
16490: PPUSH
16491: LD_VAR 0 3
16495: PUSH
16496: LD_INT 2
16498: ARRAY
16499: PUSH
16500: LD_STRING -2-land
16502: STR
16503: PPUSH
16504: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16508: LD_VAR 0 3
16512: PUSH
16513: LD_INT 1
16515: ARRAY
16516: PPUSH
16517: LD_VAR 0 3
16521: PUSH
16522: LD_INT 2
16524: ARRAY
16525: PUSH
16526: LD_STRING -3-land
16528: STR
16529: PPUSH
16530: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16534: LD_EXP 31
16538: PPUSH
16539: LD_STRING DH-1-land
16541: PPUSH
16542: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16546: LD_VAR 0 5
16550: PPUSH
16551: CALL_OW 313
16555: PUSH
16556: LD_INT 6
16558: EQUAL
16559: IFFALSE 16579
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16561: LD_VAR 0 5
16565: PPUSH
16566: CALL_OW 313
16570: PUSH
16571: LD_INT 1
16573: ARRAY
16574: PPUSH
16575: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16579: LD_EXP 41
16583: PPUSH
16584: LD_INT 2
16586: PPUSH
16587: CALL_OW 235
// CenterOnUnits ( depot ) ;
16591: LD_VAR 0 5
16595: PPUSH
16596: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16600: LD_EXP 41
16604: PPUSH
16605: LD_VAR 0 5
16609: PPUSH
16610: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16614: LD_VAR 0 3
16618: PUSH
16619: LD_INT 1
16621: ARRAY
16622: PPUSH
16623: LD_VAR 0 5
16627: PPUSH
16628: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16632: LD_INT 35
16634: PPUSH
16635: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16639: LD_EXP 41
16643: PPUSH
16644: CALL_OW 310
16648: PUSH
16649: LD_EXP 41
16653: PPUSH
16654: CALL_OW 302
16658: NOT
16659: OR
16660: PUSH
16661: LD_VAR 0 5
16665: PPUSH
16666: CALL_OW 302
16670: NOT
16671: OR
16672: IFFALSE 16632
// InGameOff ;
16674: CALL_OW 9
// blockAttack := false ;
16678: LD_ADDR_EXP 29
16682: PUSH
16683: LD_INT 0
16685: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16686: LD_EXP 41
16690: PPUSH
16691: CALL_OW 302
16695: NOT
16696: IFFALSE 16700
// exit ;
16698: GO 16796
// if not IsOk ( depot ) then
16700: LD_VAR 0 5
16704: PPUSH
16705: CALL_OW 302
16709: NOT
16710: IFFALSE 16773
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16712: LD_EXP 41
16716: PPUSH
16717: LD_INT 30
16719: PPUSH
16720: LD_INT 1
16722: PPUSH
16723: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16727: LD_INT 35
16729: PPUSH
16730: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16734: LD_EXP 41
16738: PPUSH
16739: LD_INT 30
16741: PPUSH
16742: LD_INT 1
16744: PPUSH
16745: CALL_OW 307
16749: PUSH
16750: LD_EXP 41
16754: PPUSH
16755: CALL_OW 301
16759: OR
16760: IFFALSE 16727
// RemoveUnit ( Ibrahim ) ;
16762: LD_EXP 41
16766: PPUSH
16767: CALL_OW 64
// exit ;
16771: GO 16796
// end ; ibrahimInDepot := true ;
16773: LD_ADDR_EXP 26
16777: PUSH
16778: LD_INT 1
16780: ST_TO_ADDR
// allowConvoys := true ;
16781: LD_ADDR_EXP 13
16785: PUSH
16786: LD_INT 1
16788: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16789: LD_STRING IbrahimInDepot
16791: PPUSH
16792: CALL_OW 97
// end ;
16796: PPOPN 5
16798: END
// export function IbrahimQuery ; begin
16799: LD_INT 0
16801: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16802: LD_STRING IbrahimQuery
16804: PPUSH
16805: CALL_OW 97
16809: PUSH
16810: LD_INT 1
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16818
16816: GO 17188
16818: POP
// begin allowConvoys := false ;
16819: LD_ADDR_EXP 13
16823: PUSH
16824: LD_INT 0
16826: ST_TO_ADDR
// ibrahimInDepot := false ;
16827: LD_ADDR_EXP 26
16831: PUSH
16832: LD_INT 0
16834: ST_TO_ADDR
// InGameOn ;
16835: CALL_OW 8
// DialogueOn ;
16839: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
16843: LD_EXP 31
16847: PPUSH
16848: CALL_OW 87
// wait ( 0 0$1 ) ;
16852: LD_INT 35
16854: PPUSH
16855: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16859: LD_EXP 31
16863: PPUSH
16864: LD_STRING DH-1-interrogation
16866: PPUSH
16867: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16871: LD_EXP 41
16875: PPUSH
16876: LD_STRING DI-1-interrogation
16878: PPUSH
16879: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16883: LD_EXP 31
16887: PPUSH
16888: LD_STRING DH-2-interrogation
16890: PPUSH
16891: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16895: LD_EXP 41
16899: PPUSH
16900: LD_STRING DI-2-interrogation
16902: PPUSH
16903: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16907: LD_EXP 31
16911: PPUSH
16912: LD_STRING DH-3-interrogation
16914: PPUSH
16915: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16919: LD_EXP 41
16923: PPUSH
16924: LD_STRING DI-3-interrogation
16926: PPUSH
16927: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16931: LD_EXP 31
16935: PPUSH
16936: LD_STRING DH-4-interrogation
16938: PPUSH
16939: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16943: LD_EXP 41
16947: PPUSH
16948: LD_STRING DI-4-interrogation
16950: PPUSH
16951: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16955: LD_EXP 31
16959: PPUSH
16960: LD_STRING DH-5-interrogation
16962: PPUSH
16963: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16967: LD_EXP 41
16971: PPUSH
16972: LD_STRING DI-5-interrogation
16974: PPUSH
16975: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16979: LD_INT 10
16981: PPUSH
16982: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16986: LD_EXP 31
16990: PPUSH
16991: LD_STRING DH-6-interrogation
16993: PPUSH
16994: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16998: LD_EXP 41
17002: PPUSH
17003: LD_STRING DI-6-interrogation
17005: PPUSH
17006: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
17010: LD_EXP 41
17014: PPUSH
17015: LD_STRING DI-7-interrogation
17017: PPUSH
17018: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17022: LD_EXP 31
17026: PPUSH
17027: LD_STRING DH-7-interrogation
17029: PPUSH
17030: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17034: LD_INT 10
17036: PPUSH
17037: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17041: LD_EXP 31
17045: PPUSH
17046: LD_STRING DH-8-interrogation
17048: PPUSH
17049: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17053: LD_EXP 41
17057: PPUSH
17058: LD_STRING DI-8-interrogation
17060: PPUSH
17061: CALL_OW 88
// wait ( 0 0$1 ) ;
17065: LD_INT 35
17067: PPUSH
17068: CALL_OW 67
// DialogueOff ;
17072: CALL_OW 7
// case Query ( IbrahimDecisionQuery ) of 1 :
17076: LD_STRING IbrahimDecisionQuery
17078: PPUSH
17079: CALL_OW 97
17083: PUSH
17084: LD_INT 1
17086: DOUBLE
17087: EQUAL
17088: IFTRUE 17092
17090: GO 17116
17092: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17093: LD_EXP 41
17097: PPUSH
17098: LD_STRING DI-1-kill
17100: PPUSH
17101: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17105: LD_EXP 41
17109: PPUSH
17110: CALL_OW 66
// end ; 2 :
17114: GO 17182
17116: LD_INT 2
17118: DOUBLE
17119: EQUAL
17120: IFTRUE 17124
17122: GO 17181
17124: POP
// begin SetSide ( Ibrahim , 6 ) ;
17125: LD_EXP 41
17129: PPUSH
17130: LD_INT 6
17132: PPUSH
17133: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17137: LD_EXP 41
17141: PPUSH
17142: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17146: LD_EXP 41
17150: PPUSH
17151: LD_INT 66
17153: PPUSH
17154: LD_INT 2
17156: PPUSH
17157: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17161: LD_EXP 41
17165: PPUSH
17166: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17170: LD_EXP 31
17174: PPUSH
17175: CALL_OW 122
// end ; end ;
17179: GO 17182
17181: POP
// InGameOff ;
17182: CALL_OW 9
// end ; 2 :
17186: GO 17202
17188: LD_INT 2
17190: DOUBLE
17191: EQUAL
17192: IFTRUE 17196
17194: GO 17201
17196: POP
// exit ; end ;
17197: GO 17286
17199: GO 17202
17201: POP
// allowConvoys := true ;
17202: LD_ADDR_EXP 13
17206: PUSH
17207: LD_INT 1
17209: ST_TO_ADDR
// blockAttack := false ;
17210: LD_ADDR_EXP 29
17214: PUSH
17215: LD_INT 0
17217: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17218: LD_INT 5250
17220: PPUSH
17221: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17225: LD_INT 35
17227: PPUSH
17228: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17232: LD_INT 81
17234: PUSH
17235: LD_INT 2
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 21
17244: PUSH
17245: LD_INT 1
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 69
17260: NOT
17261: IFFALSE 17225
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17263: LD_EXP 41
17267: PPUSH
17268: LD_INT 34
17270: PPUSH
17271: LD_INT 21
17273: PPUSH
17274: CALL_OW 111
// ibrahimIsFree := true ;
17278: LD_ADDR_EXP 27
17282: PUSH
17283: LD_INT 1
17285: ST_TO_ADDR
// end ;
17286: LD_VAR 0 1
17290: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17291: LD_EXP 27
17295: PUSH
17296: LD_EXP 41
17300: PPUSH
17301: CALL_OW 302
17305: AND
17306: PUSH
17307: LD_INT 2
17309: PPUSH
17310: LD_EXP 41
17314: PPUSH
17315: CALL_OW 292
17319: AND
17320: IFFALSE 18132
17322: GO 17324
17324: DISABLE
17325: LD_INT 0
17327: PPUSH
17328: PPUSH
17329: PPUSH
17330: PPUSH
17331: PPUSH
17332: PPUSH
// begin wait ( 0 0$10 ) ;
17333: LD_INT 350
17335: PPUSH
17336: CALL_OW 67
// allowConvoys := false ;
17340: LD_ADDR_EXP 13
17344: PUSH
17345: LD_INT 0
17347: ST_TO_ADDR
// blockAttack := true ;
17348: LD_ADDR_EXP 29
17352: PUSH
17353: LD_INT 1
17355: ST_TO_ADDR
// depot := usDepot ;
17356: LD_ADDR_VAR 0 4
17360: PUSH
17361: LD_INT 11
17363: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17364: LD_INT 11
17366: NOT
17367: PUSH
17368: LD_INT 22
17370: PUSH
17371: LD_INT 2
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 50
17380: PUSH
17381: EMPTY
17382: LIST
17383: PUSH
17384: LD_INT 30
17386: PUSH
17387: LD_INT 0
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: PPUSH
17399: CALL_OW 69
17403: AND
17404: IFFALSE 17451
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17406: LD_ADDR_VAR 0 4
17410: PUSH
17411: LD_INT 22
17413: PUSH
17414: LD_INT 2
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 50
17423: PUSH
17424: EMPTY
17425: LIST
17426: PUSH
17427: LD_INT 30
17429: PUSH
17430: LD_INT 0
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: PPUSH
17442: CALL_OW 69
17446: PUSH
17447: LD_INT 1
17449: ARRAY
17450: ST_TO_ADDR
// InGameOn ;
17451: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17455: LD_EXP 41
17459: PPUSH
17460: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17464: LD_EXP 31
17468: PPUSH
17469: LD_EXP 41
17473: PPUSH
17474: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17478: LD_EXP 41
17482: PPUSH
17483: LD_EXP 31
17487: PPUSH
17488: CALL_OW 119
// DialogueOn ;
17492: CALL_OW 6
// Say ( Ibrahim , DI-1-free ) ;
17496: LD_EXP 41
17500: PPUSH
17501: LD_STRING DI-1-free
17503: PPUSH
17504: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17508: LD_EXP 31
17512: PPUSH
17513: LD_STRING DH-1-free
17515: PPUSH
17516: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17520: LD_EXP 41
17524: PPUSH
17525: LD_STRING DI-2-free
17527: PPUSH
17528: CALL_OW 88
// changeClass := 0 ;
17532: LD_ADDR_VAR 0 1
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17540: LD_STRING IbrahimJoinQuery
17542: PPUSH
17543: CALL_OW 97
17547: PUSH
17548: LD_INT 1
17550: DOUBLE
17551: EQUAL
17552: IFTRUE 17556
17554: GO 17567
17556: POP
// begin changeClass := 1 ;
17557: LD_ADDR_VAR 0 1
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// end ; 2 :
17565: GO 17819
17567: LD_INT 2
17569: DOUBLE
17570: EQUAL
17571: IFTRUE 17575
17573: GO 17739
17575: POP
// begin Say ( Heike , DH-1-decline ) ;
17576: LD_EXP 31
17580: PPUSH
17581: LD_STRING DH-1-decline
17583: PPUSH
17584: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17588: LD_EXP 41
17592: PPUSH
17593: LD_STRING DI-1-decline
17595: PPUSH
17596: CALL_OW 88
// DialogueOff ;
17600: CALL_OW 7
// InGameOff ;
17604: CALL_OW 9
// blockAttack := false ;
17608: LD_ADDR_EXP 29
17612: PUSH
17613: LD_INT 0
17615: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17616: LD_EXP 41
17620: PPUSH
17621: LD_INT 30
17623: PPUSH
17624: LD_INT 1
17626: PPUSH
17627: CALL_OW 111
// p := 0 ;
17631: LD_ADDR_VAR 0 3
17635: PUSH
17636: LD_INT 0
17638: ST_TO_ADDR
// repeat p := p + 1 ;
17639: LD_ADDR_VAR 0 3
17643: PUSH
17644: LD_VAR 0 3
17648: PUSH
17649: LD_INT 1
17651: PLUS
17652: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17653: LD_INT 35
17655: PPUSH
17656: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17660: LD_EXP 41
17664: PPUSH
17665: LD_INT 30
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL_OW 307
17675: PUSH
17676: LD_INT 22
17678: PUSH
17679: LD_INT 2
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 101
17688: PUSH
17689: LD_INT 6
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: NOT
17705: OR
17706: PUSH
17707: LD_VAR 0 3
17711: PUSH
17712: LD_INT 10
17714: GREATER
17715: OR
17716: IFFALSE 17639
// RemoveUnit ( Ibrahim ) ;
17718: LD_EXP 41
17722: PPUSH
17723: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17727: LD_INT 1
17729: PPUSH
17730: LD_STRING 03_IbrahimHasEscaped
17732: PPUSH
17733: CALL_OW 39
// end ; 3 :
17737: GO 17819
17739: LD_INT 3
17741: DOUBLE
17742: EQUAL
17743: IFTRUE 17747
17745: GO 17818
17747: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17748: LD_EXP 31
17752: PPUSH
17753: LD_STRING DH-1-radio-hq
17755: PPUSH
17756: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17760: LD_EXP 40
17764: PPUSH
17765: LD_STRING DO-1-radio-hq
17767: PPUSH
17768: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17772: LD_EXP 31
17776: PPUSH
17777: LD_STRING DH-2-radio-hq
17779: PPUSH
17780: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17784: LD_EXP 40
17788: PPUSH
17789: LD_STRING DO-2-radio-hq
17791: PPUSH
17792: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17796: LD_EXP 31
17800: PPUSH
17801: LD_STRING DH-3-radio-hq
17803: PPUSH
17804: CALL_OW 88
// changeClass := 1 ;
17808: LD_ADDR_VAR 0 1
17812: PUSH
17813: LD_INT 1
17815: ST_TO_ADDR
// end ; end ;
17816: GO 17819
17818: POP
// if changeClass then
17819: LD_VAR 0 1
17823: IFFALSE 18132
// begin Say ( Heike , DH-1-agree ) ;
17825: LD_EXP 31
17829: PPUSH
17830: LD_STRING DH-1-agree
17832: PPUSH
17833: CALL_OW 88
// if IsOk ( Givi ) then
17837: LD_EXP 32
17841: PPUSH
17842: CALL_OW 302
17846: IFFALSE 17884
// begin Say ( Givi , DG-1-agree ) ;
17848: LD_EXP 32
17852: PPUSH
17853: LD_STRING DG-1-agree
17855: PPUSH
17856: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17860: LD_EXP 31
17864: PPUSH
17865: LD_STRING DH-2-agree
17867: PPUSH
17868: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17872: LD_EXP 32
17876: PPUSH
17877: LD_STRING DG-2-agree
17879: PPUSH
17880: CALL_OW 88
// end ; CenterNowOnUnits ( Ibrahim ) ;
17884: LD_EXP 41
17888: PPUSH
17889: CALL_OW 87
// DialogueOff ;
17893: CALL_OW 7
// if UnitsInside ( depot ) = 6 then
17897: LD_VAR 0 4
17901: PPUSH
17902: CALL_OW 313
17906: PUSH
17907: LD_INT 6
17909: EQUAL
17910: IFFALSE 17930
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17912: LD_VAR 0 4
17916: PPUSH
17917: CALL_OW 313
17921: PUSH
17922: LD_INT 1
17924: ARRAY
17925: PPUSH
17926: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17930: LD_EXP 41
17934: PPUSH
17935: LD_INT 2
17937: PPUSH
17938: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17942: LD_ADDR_VAR 0 5
17946: PUSH
17947: LD_EXP 41
17951: PPUSH
17952: CALL_OW 250
17956: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17957: LD_ADDR_VAR 0 6
17961: PUSH
17962: LD_EXP 41
17966: PPUSH
17967: CALL_OW 251
17971: ST_TO_ADDR
// if depot then
17972: LD_VAR 0 4
17976: IFFALSE 18025
// begin ComEnterUnit ( Ibrahim , depot ) ;
17978: LD_EXP 41
17982: PPUSH
17983: LD_VAR 0 4
17987: PPUSH
17988: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17992: LD_INT 35
17994: PPUSH
17995: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17999: LD_EXP 41
18003: PPUSH
18004: CALL_OW 310
18008: IFFALSE 17992
// b := IsInUnit ( Ibrahim ) ;
18010: LD_ADDR_VAR 0 2
18014: PUSH
18015: LD_EXP 41
18019: PPUSH
18020: CALL_OW 310
18024: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
18025: LD_EXP 41
18029: PPUSH
18030: CALL_OW 64
// uc_side := 2 ;
18034: LD_ADDR_OWVAR 20
18038: PUSH
18039: LD_INT 2
18041: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18042: LD_ADDR_EXP 41
18046: PUSH
18047: LD_STRING Ibrahim
18049: PPUSH
18050: LD_INT 0
18052: PPUSH
18053: LD_STRING 
18055: PPUSH
18056: CALL 40170 0 3
18060: ST_TO_ADDR
// if depot then
18061: LD_VAR 0 4
18065: IFFALSE 18083
// PlaceHumanInUnit ( Ibrahim , b ) else
18067: LD_EXP 41
18071: PPUSH
18072: LD_VAR 0 2
18076: PPUSH
18077: CALL_OW 52
18081: GO 18105
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18083: LD_EXP 41
18087: PPUSH
18088: LD_VAR 0 5
18092: PPUSH
18093: LD_VAR 0 6
18097: PPUSH
18098: LD_INT 0
18100: PPUSH
18101: CALL_OW 48
// InGameOff ;
18105: CALL_OW 9
// allowConvoys := true ;
18109: LD_ADDR_EXP 13
18113: PUSH
18114: LD_INT 1
18116: ST_TO_ADDR
// blockAttack := false ;
18117: LD_ADDR_EXP 29
18121: PUSH
18122: LD_INT 0
18124: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18125: LD_STRING ACH_IBRAHIM
18127: PPUSH
18128: CALL_OW 543
// end ; end ;
18132: PPOPN 6
18134: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18135: LD_EXP 36
18139: PPUSH
18140: CALL_OW 256
18144: PUSH
18145: LD_INT 3
18147: LESS
18148: IFFALSE 18215
18150: GO 18152
18152: DISABLE
// begin DialogueOn ;
18153: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18157: LD_EXP 36
18161: PPUSH
18162: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18166: LD_EXP 36
18170: PPUSH
18171: LD_STRING DK-keydeath-1
18173: PPUSH
18174: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18178: LD_EXP 31
18182: PPUSH
18183: LD_STRING DH-keydeath-2
18185: PPUSH
18186: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18190: LD_EXP 31
18194: PPUSH
18195: LD_STRING DH-keydeath-3
18197: PPUSH
18198: CALL_OW 88
// DialogueOff ;
18202: CALL_OW 7
// KillUnit ( Kaia ) ;
18206: LD_EXP 36
18210: PPUSH
18211: CALL_OW 66
// end ;
18215: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18216: LD_EXP 12
18220: PUSH
18221: LD_EXP 22
18225: PUSH
18226: LD_INT 1
18228: LESS
18229: AND
18230: IFFALSE 18799
18232: GO 18234
18234: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18235: LD_INT 22
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: LD_INT 25
18250: PUSH
18251: LD_INT 1
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 25
18260: PUSH
18261: LD_INT 3
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: LIST
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PPUSH
18277: CALL_OW 69
18281: IFFALSE 18359
// begin ChangeSideFog ( 1 , 2 ) ;
18283: LD_INT 1
18285: PPUSH
18286: LD_INT 2
18288: PPUSH
18289: CALL_OW 343
// Query ( DestroyEnemy ) ;
18293: LD_STRING DestroyEnemy
18295: PPUSH
18296: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18300: LD_INT 35
18302: PPUSH
18303: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18307: LD_INT 22
18309: PUSH
18310: LD_INT 1
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 2
18319: PUSH
18320: LD_INT 25
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 25
18332: PUSH
18333: LD_INT 3
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: LIST
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PPUSH
18349: CALL_OW 69
18353: PUSH
18354: LD_INT 0
18356: EQUAL
18357: IFFALSE 18300
// end ; if tick <= 45 45$00 then
18359: LD_OWVAR 1
18363: PUSH
18364: LD_INT 94500
18366: LESSEQUAL
18367: IFFALSE 18376
// SetAchievement ( ACH_HSPEED_3 ) ;
18369: LD_STRING ACH_HSPEED_3
18371: PPUSH
18372: CALL_OW 543
// DialogueOn ;
18376: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18380: LD_EXP 31
18384: PPUSH
18385: LD_STRING DH-1-final
18387: PPUSH
18388: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18392: LD_OWVAR 1
18396: PUSH
18397: LD_INT 138600
18399: PUSH
18400: LD_INT 134400
18402: PUSH
18403: LD_INT 130200
18405: PUSH
18406: LD_INT 126000
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: PUSH
18415: LD_OWVAR 67
18419: ARRAY
18420: LESSEQUAL
18421: IFFALSE 18435
// AddMedal ( med1 , 1 ) else
18423: LD_STRING med1
18425: PPUSH
18426: LD_INT 1
18428: PPUSH
18429: CALL_OW 101
18433: GO 18446
// AddMedal ( med1 , - 1 ) ;
18435: LD_STRING med1
18437: PPUSH
18438: LD_INT 1
18440: NEG
18441: PPUSH
18442: CALL_OW 101
// if vehCounter >= 2 then
18446: LD_EXP 23
18450: PUSH
18451: LD_INT 2
18453: GREATEREQUAL
18454: IFFALSE 18468
// AddMedal ( med2 , 1 ) else
18456: LD_STRING med2
18458: PPUSH
18459: LD_INT 1
18461: PPUSH
18462: CALL_OW 101
18466: GO 18479
// AddMedal ( med2 , - 1 ) ;
18468: LD_STRING med2
18470: PPUSH
18471: LD_INT 1
18473: NEG
18474: PPUSH
18475: CALL_OW 101
// if deadCounter = 0 then
18479: LD_EXP 10
18483: PUSH
18484: LD_INT 0
18486: EQUAL
18487: IFFALSE 18501
// AddMedal ( med3 , 1 ) else
18489: LD_STRING med3
18491: PPUSH
18492: LD_INT 1
18494: PPUSH
18495: CALL_OW 101
18499: GO 18512
// AddMedal ( med3 , - 1 ) ;
18501: LD_STRING med3
18503: PPUSH
18504: LD_INT 1
18506: NEG
18507: PPUSH
18508: CALL_OW 101
// GiveMedals ( MAIN ) ;
18512: LD_STRING MAIN
18514: PPUSH
18515: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18519: LD_INT 22
18521: PUSH
18522: LD_INT 2
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 23
18531: PUSH
18532: LD_INT 2
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 21
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: PPUSH
18554: CALL_OW 69
18558: PPUSH
18559: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18563: LD_EXP 31
18567: PPUSH
18568: LD_STRING 03_Heike
18570: PPUSH
18571: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18575: LD_EXP 35
18579: PPUSH
18580: LD_STRING 03_Aviradze
18582: PPUSH
18583: CALL_OW 38
// if Givi then
18587: LD_EXP 32
18591: IFFALSE 18605
// SaveCharacters ( Givi , 03_Givi ) ;
18593: LD_EXP 32
18597: PPUSH
18598: LD_STRING 03_Givi
18600: PPUSH
18601: CALL_OW 38
// if Mike then
18605: LD_EXP 33
18609: IFFALSE 18623
// SaveCharacters ( Mike , 03_Mike ) ;
18611: LD_EXP 33
18615: PPUSH
18616: LD_STRING 03_Mike
18618: PPUSH
18619: CALL_OW 38
// if Kamil then
18623: LD_EXP 34
18627: IFFALSE 18641
// SaveCharacters ( Kamil , 03_Kamil ) ;
18629: LD_EXP 34
18633: PPUSH
18634: LD_STRING 03_Kamil
18636: PPUSH
18637: CALL_OW 38
// if Kaia then
18641: LD_EXP 36
18645: IFFALSE 18659
// SaveCharacters ( Kaia , 03_Kaia ) ;
18647: LD_EXP 36
18651: PPUSH
18652: LD_STRING 03_Kaia
18654: PPUSH
18655: CALL_OW 38
// if Sophia then
18659: LD_EXP 37
18663: IFFALSE 18677
// SaveCharacters ( Sophia , 03_Sophia ) ;
18665: LD_EXP 37
18669: PPUSH
18670: LD_STRING 03_Sophia
18672: PPUSH
18673: CALL_OW 38
// if Markov then
18677: LD_EXP 38
18681: IFFALSE 18695
// SaveCharacters ( Markov , 03_Markov ) ;
18683: LD_EXP 38
18687: PPUSH
18688: LD_STRING 03_Markov
18690: PPUSH
18691: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18695: LD_EXP 41
18699: PUSH
18700: LD_EXP 41
18704: PPUSH
18705: CALL_OW 255
18709: PUSH
18710: LD_INT 2
18712: EQUAL
18713: AND
18714: IFFALSE 18735
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18716: LD_STRING enableBioCharacter(BIO_IBRA)
18718: PPUSH
18719: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18723: LD_EXP 41
18727: PPUSH
18728: LD_STRING 03_Ibrahim
18730: PPUSH
18731: CALL_OW 38
// end ; if heikeSecondSquad then
18735: LD_EXP 45
18739: IFFALSE 18753
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18741: LD_EXP 45
18745: PPUSH
18746: LD_STRING 03_others
18748: PPUSH
18749: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18753: LD_EXP 10
18757: PPUSH
18758: LD_STRING 03_DeadCounter
18760: PPUSH
18761: CALL_OW 39
// SaveVariable ( cargoRecycled , 03_CargoRecycled ) ;
18765: LD_EXP 30
18769: PPUSH
18770: LD_STRING 03_CargoRecycled
18772: PPUSH
18773: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18777: LD_STRING enableBioCharacter(BIO_OMAR)
18779: PPUSH
18780: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18784: LD_STRING enableBioCharacter(BIO_FARM)
18786: PPUSH
18787: CALL_OW 559
// YouWin ;
18791: CALL_OW 103
// DialogueOff ;
18795: CALL_OW 7
// end ; end_of_file
18799: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18800: LD_VAR 0 1
18804: PPUSH
18805: CALL 35881 0 1
// if un = Heike then
18809: LD_VAR 0 1
18813: PUSH
18814: LD_EXP 31
18818: EQUAL
18819: IFFALSE 18828
// YouLost ( Heike ) ;
18821: LD_STRING Heike
18823: PPUSH
18824: CALL_OW 104
// if un = Aviradze then
18828: LD_VAR 0 1
18832: PUSH
18833: LD_EXP 35
18837: EQUAL
18838: IFFALSE 18847
// YouLost ( Aviradze ) ;
18840: LD_STRING Aviradze
18842: PPUSH
18843: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18847: LD_VAR 0 1
18851: PUSH
18852: LD_INT 11
18854: EQUAL
18855: PUSH
18856: LD_EXP 12
18860: NOT
18861: AND
18862: IFFALSE 18871
// YouLost ( Depot ) ;
18864: LD_STRING Depot
18866: PPUSH
18867: CALL_OW 104
// if un = arDepot then
18871: LD_VAR 0 1
18875: PUSH
18876: LD_INT 5
18878: EQUAL
18879: IFFALSE 18888
// YouLost ( FarmerDepot ) ;
18881: LD_STRING FarmerDepot
18883: PPUSH
18884: CALL_OW 104
// if un = Farmer then
18888: LD_VAR 0 1
18892: PUSH
18893: LD_EXP 39
18897: EQUAL
18898: IFFALSE 18907
// YouLost ( Farmer ) ;
18900: LD_STRING Farmer
18902: PPUSH
18903: CALL_OW 104
// if un in usForces then
18907: LD_VAR 0 1
18911: PUSH
18912: LD_EXP 47
18916: IN
18917: IFFALSE 18935
// usForces := usForces diff un ;
18919: LD_ADDR_EXP 47
18923: PUSH
18924: LD_EXP 47
18928: PUSH
18929: LD_VAR 0 1
18933: DIFF
18934: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18935: LD_VAR 0 1
18939: PUSH
18940: LD_INT 22
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 23
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 21
18962: PUSH
18963: LD_INT 1
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: LIST
18974: PPUSH
18975: CALL_OW 69
18979: IN
18980: IFFALSE 18996
// deadCounter := deadCounter + 1 ;
18982: LD_ADDR_EXP 10
18986: PUSH
18987: LD_EXP 10
18991: PUSH
18992: LD_INT 1
18994: PLUS
18995: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18996: LD_VAR 0 1
19000: PUSH
19001: LD_INT 22
19003: PUSH
19004: LD_INT 4
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 34
19013: PUSH
19014: LD_INT 12
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PPUSH
19025: CALL_OW 69
19029: IN
19030: PUSH
19031: LD_EXP 19
19035: NOT
19036: AND
19037: IFFALSE 19047
// firstConvoyDestroyed := true ;
19039: LD_ADDR_EXP 19
19043: PUSH
19044: LD_INT 1
19046: ST_TO_ADDR
// if un in usAttackers then
19047: LD_VAR 0 1
19051: PUSH
19052: LD_EXP 50
19056: IN
19057: IFFALSE 19075
// usAttackers := usAttackers diff un ;
19059: LD_ADDR_EXP 50
19063: PUSH
19064: LD_EXP 50
19068: PUSH
19069: LD_VAR 0 1
19073: DIFF
19074: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19075: LD_VAR 0 1
19079: PUSH
19080: LD_INT 22
19082: PUSH
19083: LD_INT 5
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 21
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: IN
19109: IFFALSE 19125
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19111: LD_ADDR_EXP 21
19115: PUSH
19116: LD_EXP 21
19120: PUSH
19121: LD_INT 1
19123: PLUS
19124: ST_TO_ADDR
// end ;
19125: PPOPN 1
19127: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19128: LD_VAR 0 2
19132: PUSH
19133: LD_EXP 41
19137: EQUAL
19138: PUSH
19139: LD_EXP 26
19143: AND
19144: IFFALSE 19329
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19146: LD_INT 22
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 30
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 50
19168: PUSH
19169: EMPTY
19170: LIST
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 69
19181: IFFALSE 19235
// begin InGameOn ;
19183: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19187: LD_EXP 41
19191: PPUSH
19192: LD_INT 11
19194: PPUSH
19195: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19199: LD_INT 35
19201: PPUSH
19202: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19206: LD_EXP 41
19210: PPUSH
19211: LD_INT 11
19213: PPUSH
19214: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19218: LD_EXP 41
19222: PPUSH
19223: CALL_OW 310
19227: IFFALSE 19199
// InGameOff ;
19229: CALL_OW 9
// end else
19233: GO 19329
// begin SetSide ( Ibrahim , 6 ) ;
19235: LD_EXP 41
19239: PPUSH
19240: LD_INT 6
19242: PPUSH
19243: CALL_OW 235
// ibrahimInDepot := false ;
19247: LD_ADDR_EXP 26
19251: PUSH
19252: LD_INT 0
19254: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19255: LD_EXP 41
19259: PPUSH
19260: LD_INT 30
19262: PPUSH
19263: LD_INT 1
19265: PPUSH
19266: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19270: LD_INT 35
19272: PPUSH
19273: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19277: LD_EXP 41
19281: PPUSH
19282: LD_INT 30
19284: PPUSH
19285: LD_INT 1
19287: PPUSH
19288: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19292: LD_EXP 41
19296: PPUSH
19297: LD_INT 30
19299: PPUSH
19300: LD_INT 1
19302: PPUSH
19303: CALL_OW 307
19307: PUSH
19308: LD_EXP 41
19312: PPUSH
19313: CALL_OW 301
19317: OR
19318: IFFALSE 19270
// RemoveUnit ( Ibrahim ) ;
19320: LD_EXP 41
19324: PPUSH
19325: CALL_OW 64
// end ; end ; end ;
19329: PPOPN 2
19331: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19332: LD_VAR 0 2
19336: PUSH
19337: LD_EXP 31
19341: EQUAL
19342: PUSH
19343: LD_VAR 0 1
19347: PUSH
19348: LD_INT 11
19350: EQUAL
19351: AND
19352: PUSH
19353: LD_EXP 26
19357: AND
19358: IFFALSE 19364
// IbrahimQuery ;
19360: CALL 16799 0 0
// end ;
19364: PPOPN 2
19366: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19367: LD_VAR 0 1
19371: PPUSH
19372: CALL_OW 141
// if oldId in usAttackers then
19376: LD_VAR 0 2
19380: PUSH
19381: LD_EXP 50
19385: IN
19386: IFFALSE 19404
// usAttackers := usAttackers diff oldId ;
19388: LD_ADDR_EXP 50
19392: PUSH
19393: LD_EXP 50
19397: PUSH
19398: LD_VAR 0 2
19402: DIFF
19403: ST_TO_ADDR
// if newId in usAttackers then
19404: LD_VAR 0 1
19408: PUSH
19409: LD_EXP 50
19413: IN
19414: IFFALSE 19432
// usAttackers := usAttackers diff newId ;
19416: LD_ADDR_EXP 50
19420: PUSH
19421: LD_EXP 50
19425: PUSH
19426: LD_VAR 0 1
19430: DIFF
19431: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19432: LD_VAR 0 3
19436: PUSH
19437: LD_INT 4
19439: EQUAL
19440: PUSH
19441: LD_EXP 19
19445: NOT
19446: AND
19447: IFFALSE 19457
// firstConvoyDestroyed := true ;
19449: LD_ADDR_EXP 19
19453: PUSH
19454: LD_INT 1
19456: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19457: LD_VAR 0 1
19461: PPUSH
19462: CALL_OW 264
19466: PUSH
19467: LD_INT 12
19469: EQUAL
19470: IFFALSE 19508
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19472: LD_ADDR_EXP 14
19476: PUSH
19477: LD_EXP 14
19481: PUSH
19482: LD_INT 1
19484: PLUS
19485: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19486: LD_VAR 0 1
19490: PPUSH
19491: LD_INT 1
19493: PPUSH
19494: CALL_OW 289
19498: PUSH
19499: LD_INT 0
19501: EQUAL
19502: IFFALSE 19508
// EmptyCargoDialog ;
19504: CALL 15417 0 0
// end ; end ;
19508: PPOPN 4
19510: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19511: LD_VAR 0 1
19515: PUSH
19516: LD_INT 2
19518: EQUAL
19519: PUSH
19520: LD_VAR 0 2
19524: PUSH
19525: LD_INT 5
19527: EQUAL
19528: AND
19529: IFFALSE 19538
// YouLost ( Attack ) ;
19531: LD_STRING Attack
19533: PPUSH
19534: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19538: LD_VAR 0 1
19542: PUSH
19543: LD_INT 2
19545: EQUAL
19546: PUSH
19547: LD_VAR 0 2
19551: PUSH
19552: LD_INT 1
19554: EQUAL
19555: AND
19556: IFFALSE 19566
// americanContact := true ;
19558: LD_ADDR_EXP 5
19562: PUSH
19563: LD_INT 1
19565: ST_TO_ADDR
// end ;
19566: PPOPN 2
19568: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19569: LD_VAR 0 1
19573: PPUSH
19574: CALL_OW 255
19578: PUSH
19579: LD_INT 1
19581: EQUAL
19582: PUSH
19583: LD_EXP 7
19587: NOT
19588: AND
19589: IFFALSE 19723
// begin if GetBType ( b ) = b_lab then
19591: LD_VAR 0 1
19595: PPUSH
19596: CALL_OW 266
19600: PUSH
19601: LD_INT 6
19603: EQUAL
19604: IFFALSE 19644
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19606: LD_EXP 47
19610: PPUSH
19611: LD_INT 25
19613: PUSH
19614: LD_INT 4
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PPUSH
19621: CALL_OW 72
19625: PPUSH
19626: LD_VAR 0 1
19630: PPUSH
19631: CALL_OW 120
// AmLabResearch ( b ) ;
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL 5142 0 1
// end ; if GetBType ( b ) = b_armoury then
19644: LD_VAR 0 1
19648: PPUSH
19649: CALL_OW 266
19653: PUSH
19654: LD_INT 4
19656: EQUAL
19657: IFFALSE 19705
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19659: LD_EXP 47
19663: PPUSH
19664: LD_INT 25
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 3
19676: PUSH
19677: LD_INT 54
19679: PUSH
19680: EMPTY
19681: LIST
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PPUSH
19691: CALL_OW 72
19695: PPUSH
19696: LD_VAR 0 1
19700: PPUSH
19701: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19705: LD_ADDR_EXP 49
19709: PUSH
19710: LD_EXP 49
19714: PPUSH
19715: LD_INT 1
19717: PPUSH
19718: CALL_OW 3
19722: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19723: LD_VAR 0 1
19727: PPUSH
19728: CALL_OW 255
19732: PUSH
19733: LD_INT 5
19735: EQUAL
19736: IFFALSE 19750
// SetBLevel ( b , 5 ) ;
19738: LD_VAR 0 1
19742: PPUSH
19743: LD_INT 5
19745: PPUSH
19746: CALL_OW 241
// end ;
19750: PPOPN 1
19752: END
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin if weapon = us_cargo_bay then
19753: LD_VAR 0 11
19757: PUSH
19758: LD_INT 12
19760: EQUAL
19761: IFFALSE 19771
// cargoRecycled := true ;
19763: LD_ADDR_EXP 30
19767: PUSH
19768: LD_INT 1
19770: ST_TO_ADDR
// end ;
19771: PPOPN 11
19773: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19774: LD_VAR 0 1
19778: PPUSH
19779: CALL_OW 255
19783: PUSH
19784: LD_INT 2
19786: EQUAL
19787: IFFALSE 19803
// vehCounter := vehCounter + 1 ;
19789: LD_ADDR_EXP 23
19793: PUSH
19794: LD_EXP 23
19798: PUSH
19799: LD_INT 1
19801: PLUS
19802: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19803: LD_VAR 0 1
19807: PPUSH
19808: LD_VAR 0 2
19812: PPUSH
19813: CALL 36001 0 2
// end ;
19817: PPOPN 2
19819: END
// on SailEvent ( event ) do begin if event = eventAttack then
19820: LD_VAR 0 1
19824: PUSH
19825: LD_EXP 25
19829: EQUAL
19830: IFFALSE 19836
// AmericanAttack ;
19832: CALL 6786 0 0
// end ; end_of_file
19836: PPOPN 1
19838: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19839: LD_OWVAR 1
19843: PUSH
19844: LD_INT 10500
19846: PUSH
19847: LD_INT 9800
19849: PUSH
19850: LD_INT 9450
19852: PUSH
19853: LD_INT 9100
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: PUSH
19862: LD_OWVAR 67
19866: ARRAY
19867: LESSEQUAL
19868: IFFALSE 19895
19870: GO 19872
19872: DISABLE
// begin enable ;
19873: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19874: LD_INT 1
19876: PPUSH
19877: LD_INT 5
19879: PPUSH
19880: CALL_OW 12
19884: PPUSH
19885: LD_INT 9
19887: PPUSH
19888: LD_INT 1
19890: PPUSH
19891: CALL_OW 55
// end ;
19895: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19896: LD_EXP 7
19900: PUSH
19901: LD_OWVAR 1
19905: PUSH
19906: LD_INT 94500
19908: LESSEQUAL
19909: AND
19910: IFFALSE 19937
19912: GO 19914
19914: DISABLE
// begin enable ;
19915: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19916: LD_INT 3
19918: PPUSH
19919: LD_INT 5
19921: PPUSH
19922: CALL_OW 12
19926: PPUSH
19927: LD_INT 9
19929: PPUSH
19930: LD_INT 1
19932: PPUSH
19933: CALL_OW 55
// end ; end_of_file
19937: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19938: LD_EXP 12
19942: NOT
19943: PUSH
19944: LD_EXP 17
19948: AND
19949: PUSH
19950: LD_EXP 4
19954: AND
19955: PUSH
19956: LD_EXP 16
19960: PUSH
19961: LD_EXP 17
19965: LESSEQUAL
19966: AND
19967: IFFALSE 20078
19969: GO 19971
19971: DISABLE
// begin enable ;
19972: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19973: LD_ADDR_OWVAR 47
19977: PUSH
19978: LD_STRING #X103-1
19980: PUSH
19981: LD_EXP 17
19985: PUSH
19986: LD_EXP 16
19990: MINUS
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19996: LD_ADDR_EXP 16
20000: PUSH
20001: LD_INT 5
20003: PPUSH
20004: CALL_OW 274
20008: PPUSH
20009: LD_INT 1
20011: PPUSH
20012: CALL_OW 275
20016: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
20017: LD_INT 10
20019: PPUSH
20020: LD_INT 1
20022: PPUSH
20023: CALL_OW 287
20027: PUSH
20028: LD_INT 0
20030: EQUAL
20031: IFFALSE 20049
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
20033: LD_ADDR_EXP 18
20037: PUSH
20038: LD_EXP 18
20042: PUSH
20043: LD_INT 35
20045: MINUS
20046: ST_TO_ADDR
20047: GO 20078
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
20049: LD_ADDR_EXP 18
20053: PUSH
20054: LD_INT 42000
20056: PUSH
20057: LD_INT 31500
20059: PUSH
20060: LD_INT 25200
20062: PUSH
20063: LD_INT 21000
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: PUSH
20072: LD_OWVAR 67
20076: ARRAY
20077: ST_TO_ADDR
// end ; end_of_file
20078: END
// export globalGameSaveCounter ; every 0 0$1 do
20079: GO 20081
20081: DISABLE
// begin enable ;
20082: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20083: LD_STRING updateTimer(
20085: PUSH
20086: LD_OWVAR 1
20090: STR
20091: PUSH
20092: LD_STRING );
20094: STR
20095: PPUSH
20096: CALL_OW 559
// end ;
20100: END
// every 0 0$1 do
20101: GO 20103
20103: DISABLE
// begin globalGameSaveCounter := 0 ;
20104: LD_ADDR_EXP 51
20108: PUSH
20109: LD_INT 0
20111: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20112: LD_STRING setGameSaveCounter(0)
20114: PPUSH
20115: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20119: LD_STRING initStreamRollete();
20121: PPUSH
20122: CALL_OW 559
// InitStreamMode ;
20126: CALL 21452 0 0
// DefineStreamItems ( false ) ;
20130: LD_INT 0
20132: PPUSH
20133: CALL 21916 0 1
// end ;
20137: END
// export function SOS_MapStart ( ) ; begin
20138: LD_INT 0
20140: PPUSH
// if streamModeActive then
20141: LD_EXP 52
20145: IFFALSE 20154
// DefineStreamItems ( true ) ;
20147: LD_INT 1
20149: PPUSH
20150: CALL 21916 0 1
// UpdateLuaVariables ( ) ;
20154: CALL 20171 0 0
// UpdateFactoryWaypoints ( ) ;
20158: CALL 34785 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20162: CALL 35042 0 0
// end ;
20166: LD_VAR 0 1
20170: RET
// function UpdateLuaVariables ( ) ; begin
20171: LD_INT 0
20173: PPUSH
// if globalGameSaveCounter then
20174: LD_EXP 51
20178: IFFALSE 20212
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20180: LD_ADDR_EXP 51
20184: PUSH
20185: LD_EXP 51
20189: PPUSH
20190: CALL 78852 0 1
20194: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20195: LD_STRING setGameSaveCounter(
20197: PUSH
20198: LD_EXP 51
20202: STR
20203: PUSH
20204: LD_STRING )
20206: STR
20207: PPUSH
20208: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20212: LD_STRING setGameDifficulty(
20214: PUSH
20215: LD_OWVAR 67
20219: STR
20220: PUSH
20221: LD_STRING )
20223: STR
20224: PPUSH
20225: CALL_OW 559
// end ;
20229: LD_VAR 0 1
20233: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20234: LD_INT 0
20236: PPUSH
// if p2 = stream_mode then
20237: LD_VAR 0 2
20241: PUSH
20242: LD_INT 100
20244: EQUAL
20245: IFFALSE 21248
// begin if not StreamModeActive then
20247: LD_EXP 52
20251: NOT
20252: IFFALSE 20262
// StreamModeActive := true ;
20254: LD_ADDR_EXP 52
20258: PUSH
20259: LD_INT 1
20261: ST_TO_ADDR
// if p3 = 0 then
20262: LD_VAR 0 3
20266: PUSH
20267: LD_INT 0
20269: EQUAL
20270: IFFALSE 20276
// InitStreamMode ;
20272: CALL 21452 0 0
// if p3 = 1 then
20276: LD_VAR 0 3
20280: PUSH
20281: LD_INT 1
20283: EQUAL
20284: IFFALSE 20294
// sRocket := true ;
20286: LD_ADDR_EXP 57
20290: PUSH
20291: LD_INT 1
20293: ST_TO_ADDR
// if p3 = 2 then
20294: LD_VAR 0 3
20298: PUSH
20299: LD_INT 2
20301: EQUAL
20302: IFFALSE 20312
// sSpeed := true ;
20304: LD_ADDR_EXP 56
20308: PUSH
20309: LD_INT 1
20311: ST_TO_ADDR
// if p3 = 3 then
20312: LD_VAR 0 3
20316: PUSH
20317: LD_INT 3
20319: EQUAL
20320: IFFALSE 20330
// sEngine := true ;
20322: LD_ADDR_EXP 58
20326: PUSH
20327: LD_INT 1
20329: ST_TO_ADDR
// if p3 = 4 then
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 4
20337: EQUAL
20338: IFFALSE 20348
// sSpec := true ;
20340: LD_ADDR_EXP 55
20344: PUSH
20345: LD_INT 1
20347: ST_TO_ADDR
// if p3 = 5 then
20348: LD_VAR 0 3
20352: PUSH
20353: LD_INT 5
20355: EQUAL
20356: IFFALSE 20366
// sLevel := true ;
20358: LD_ADDR_EXP 59
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// if p3 = 6 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 6
20373: EQUAL
20374: IFFALSE 20384
// sArmoury := true ;
20376: LD_ADDR_EXP 60
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// if p3 = 7 then
20384: LD_VAR 0 3
20388: PUSH
20389: LD_INT 7
20391: EQUAL
20392: IFFALSE 20402
// sRadar := true ;
20394: LD_ADDR_EXP 61
20398: PUSH
20399: LD_INT 1
20401: ST_TO_ADDR
// if p3 = 8 then
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 8
20409: EQUAL
20410: IFFALSE 20420
// sBunker := true ;
20412: LD_ADDR_EXP 62
20416: PUSH
20417: LD_INT 1
20419: ST_TO_ADDR
// if p3 = 9 then
20420: LD_VAR 0 3
20424: PUSH
20425: LD_INT 9
20427: EQUAL
20428: IFFALSE 20438
// sHack := true ;
20430: LD_ADDR_EXP 63
20434: PUSH
20435: LD_INT 1
20437: ST_TO_ADDR
// if p3 = 10 then
20438: LD_VAR 0 3
20442: PUSH
20443: LD_INT 10
20445: EQUAL
20446: IFFALSE 20456
// sFire := true ;
20448: LD_ADDR_EXP 64
20452: PUSH
20453: LD_INT 1
20455: ST_TO_ADDR
// if p3 = 11 then
20456: LD_VAR 0 3
20460: PUSH
20461: LD_INT 11
20463: EQUAL
20464: IFFALSE 20474
// sRefresh := true ;
20466: LD_ADDR_EXP 65
20470: PUSH
20471: LD_INT 1
20473: ST_TO_ADDR
// if p3 = 12 then
20474: LD_VAR 0 3
20478: PUSH
20479: LD_INT 12
20481: EQUAL
20482: IFFALSE 20492
// sExp := true ;
20484: LD_ADDR_EXP 66
20488: PUSH
20489: LD_INT 1
20491: ST_TO_ADDR
// if p3 = 13 then
20492: LD_VAR 0 3
20496: PUSH
20497: LD_INT 13
20499: EQUAL
20500: IFFALSE 20510
// sDepot := true ;
20502: LD_ADDR_EXP 67
20506: PUSH
20507: LD_INT 1
20509: ST_TO_ADDR
// if p3 = 14 then
20510: LD_VAR 0 3
20514: PUSH
20515: LD_INT 14
20517: EQUAL
20518: IFFALSE 20528
// sFlag := true ;
20520: LD_ADDR_EXP 68
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// if p3 = 15 then
20528: LD_VAR 0 3
20532: PUSH
20533: LD_INT 15
20535: EQUAL
20536: IFFALSE 20546
// sKamikadze := true ;
20538: LD_ADDR_EXP 76
20542: PUSH
20543: LD_INT 1
20545: ST_TO_ADDR
// if p3 = 16 then
20546: LD_VAR 0 3
20550: PUSH
20551: LD_INT 16
20553: EQUAL
20554: IFFALSE 20564
// sTroll := true ;
20556: LD_ADDR_EXP 77
20560: PUSH
20561: LD_INT 1
20563: ST_TO_ADDR
// if p3 = 17 then
20564: LD_VAR 0 3
20568: PUSH
20569: LD_INT 17
20571: EQUAL
20572: IFFALSE 20582
// sSlow := true ;
20574: LD_ADDR_EXP 78
20578: PUSH
20579: LD_INT 1
20581: ST_TO_ADDR
// if p3 = 18 then
20582: LD_VAR 0 3
20586: PUSH
20587: LD_INT 18
20589: EQUAL
20590: IFFALSE 20600
// sLack := true ;
20592: LD_ADDR_EXP 79
20596: PUSH
20597: LD_INT 1
20599: ST_TO_ADDR
// if p3 = 19 then
20600: LD_VAR 0 3
20604: PUSH
20605: LD_INT 19
20607: EQUAL
20608: IFFALSE 20618
// sTank := true ;
20610: LD_ADDR_EXP 81
20614: PUSH
20615: LD_INT 1
20617: ST_TO_ADDR
// if p3 = 20 then
20618: LD_VAR 0 3
20622: PUSH
20623: LD_INT 20
20625: EQUAL
20626: IFFALSE 20636
// sRemote := true ;
20628: LD_ADDR_EXP 82
20632: PUSH
20633: LD_INT 1
20635: ST_TO_ADDR
// if p3 = 21 then
20636: LD_VAR 0 3
20640: PUSH
20641: LD_INT 21
20643: EQUAL
20644: IFFALSE 20654
// sPowell := true ;
20646: LD_ADDR_EXP 83
20650: PUSH
20651: LD_INT 1
20653: ST_TO_ADDR
// if p3 = 22 then
20654: LD_VAR 0 3
20658: PUSH
20659: LD_INT 22
20661: EQUAL
20662: IFFALSE 20672
// sTeleport := true ;
20664: LD_ADDR_EXP 86
20668: PUSH
20669: LD_INT 1
20671: ST_TO_ADDR
// if p3 = 23 then
20672: LD_VAR 0 3
20676: PUSH
20677: LD_INT 23
20679: EQUAL
20680: IFFALSE 20690
// sOilTower := true ;
20682: LD_ADDR_EXP 88
20686: PUSH
20687: LD_INT 1
20689: ST_TO_ADDR
// if p3 = 24 then
20690: LD_VAR 0 3
20694: PUSH
20695: LD_INT 24
20697: EQUAL
20698: IFFALSE 20708
// sShovel := true ;
20700: LD_ADDR_EXP 89
20704: PUSH
20705: LD_INT 1
20707: ST_TO_ADDR
// if p3 = 25 then
20708: LD_VAR 0 3
20712: PUSH
20713: LD_INT 25
20715: EQUAL
20716: IFFALSE 20726
// sSheik := true ;
20718: LD_ADDR_EXP 90
20722: PUSH
20723: LD_INT 1
20725: ST_TO_ADDR
// if p3 = 26 then
20726: LD_VAR 0 3
20730: PUSH
20731: LD_INT 26
20733: EQUAL
20734: IFFALSE 20744
// sEarthquake := true ;
20736: LD_ADDR_EXP 92
20740: PUSH
20741: LD_INT 1
20743: ST_TO_ADDR
// if p3 = 27 then
20744: LD_VAR 0 3
20748: PUSH
20749: LD_INT 27
20751: EQUAL
20752: IFFALSE 20762
// sAI := true ;
20754: LD_ADDR_EXP 93
20758: PUSH
20759: LD_INT 1
20761: ST_TO_ADDR
// if p3 = 28 then
20762: LD_VAR 0 3
20766: PUSH
20767: LD_INT 28
20769: EQUAL
20770: IFFALSE 20780
// sCargo := true ;
20772: LD_ADDR_EXP 96
20776: PUSH
20777: LD_INT 1
20779: ST_TO_ADDR
// if p3 = 29 then
20780: LD_VAR 0 3
20784: PUSH
20785: LD_INT 29
20787: EQUAL
20788: IFFALSE 20798
// sDLaser := true ;
20790: LD_ADDR_EXP 97
20794: PUSH
20795: LD_INT 1
20797: ST_TO_ADDR
// if p3 = 30 then
20798: LD_VAR 0 3
20802: PUSH
20803: LD_INT 30
20805: EQUAL
20806: IFFALSE 20816
// sExchange := true ;
20808: LD_ADDR_EXP 98
20812: PUSH
20813: LD_INT 1
20815: ST_TO_ADDR
// if p3 = 31 then
20816: LD_VAR 0 3
20820: PUSH
20821: LD_INT 31
20823: EQUAL
20824: IFFALSE 20834
// sFac := true ;
20826: LD_ADDR_EXP 99
20830: PUSH
20831: LD_INT 1
20833: ST_TO_ADDR
// if p3 = 32 then
20834: LD_VAR 0 3
20838: PUSH
20839: LD_INT 32
20841: EQUAL
20842: IFFALSE 20852
// sPower := true ;
20844: LD_ADDR_EXP 100
20848: PUSH
20849: LD_INT 1
20851: ST_TO_ADDR
// if p3 = 33 then
20852: LD_VAR 0 3
20856: PUSH
20857: LD_INT 33
20859: EQUAL
20860: IFFALSE 20870
// sRandom := true ;
20862: LD_ADDR_EXP 101
20866: PUSH
20867: LD_INT 1
20869: ST_TO_ADDR
// if p3 = 34 then
20870: LD_VAR 0 3
20874: PUSH
20875: LD_INT 34
20877: EQUAL
20878: IFFALSE 20888
// sShield := true ;
20880: LD_ADDR_EXP 102
20884: PUSH
20885: LD_INT 1
20887: ST_TO_ADDR
// if p3 = 35 then
20888: LD_VAR 0 3
20892: PUSH
20893: LD_INT 35
20895: EQUAL
20896: IFFALSE 20906
// sTime := true ;
20898: LD_ADDR_EXP 103
20902: PUSH
20903: LD_INT 1
20905: ST_TO_ADDR
// if p3 = 36 then
20906: LD_VAR 0 3
20910: PUSH
20911: LD_INT 36
20913: EQUAL
20914: IFFALSE 20924
// sTools := true ;
20916: LD_ADDR_EXP 104
20920: PUSH
20921: LD_INT 1
20923: ST_TO_ADDR
// if p3 = 101 then
20924: LD_VAR 0 3
20928: PUSH
20929: LD_INT 101
20931: EQUAL
20932: IFFALSE 20942
// sSold := true ;
20934: LD_ADDR_EXP 69
20938: PUSH
20939: LD_INT 1
20941: ST_TO_ADDR
// if p3 = 102 then
20942: LD_VAR 0 3
20946: PUSH
20947: LD_INT 102
20949: EQUAL
20950: IFFALSE 20960
// sDiff := true ;
20952: LD_ADDR_EXP 70
20956: PUSH
20957: LD_INT 1
20959: ST_TO_ADDR
// if p3 = 103 then
20960: LD_VAR 0 3
20964: PUSH
20965: LD_INT 103
20967: EQUAL
20968: IFFALSE 20978
// sFog := true ;
20970: LD_ADDR_EXP 73
20974: PUSH
20975: LD_INT 1
20977: ST_TO_ADDR
// if p3 = 104 then
20978: LD_VAR 0 3
20982: PUSH
20983: LD_INT 104
20985: EQUAL
20986: IFFALSE 20996
// sReset := true ;
20988: LD_ADDR_EXP 74
20992: PUSH
20993: LD_INT 1
20995: ST_TO_ADDR
// if p3 = 105 then
20996: LD_VAR 0 3
21000: PUSH
21001: LD_INT 105
21003: EQUAL
21004: IFFALSE 21014
// sSun := true ;
21006: LD_ADDR_EXP 75
21010: PUSH
21011: LD_INT 1
21013: ST_TO_ADDR
// if p3 = 106 then
21014: LD_VAR 0 3
21018: PUSH
21019: LD_INT 106
21021: EQUAL
21022: IFFALSE 21032
// sTiger := true ;
21024: LD_ADDR_EXP 71
21028: PUSH
21029: LD_INT 1
21031: ST_TO_ADDR
// if p3 = 107 then
21032: LD_VAR 0 3
21036: PUSH
21037: LD_INT 107
21039: EQUAL
21040: IFFALSE 21050
// sBomb := true ;
21042: LD_ADDR_EXP 72
21046: PUSH
21047: LD_INT 1
21049: ST_TO_ADDR
// if p3 = 108 then
21050: LD_VAR 0 3
21054: PUSH
21055: LD_INT 108
21057: EQUAL
21058: IFFALSE 21068
// sWound := true ;
21060: LD_ADDR_EXP 80
21064: PUSH
21065: LD_INT 1
21067: ST_TO_ADDR
// if p3 = 109 then
21068: LD_VAR 0 3
21072: PUSH
21073: LD_INT 109
21075: EQUAL
21076: IFFALSE 21086
// sBetray := true ;
21078: LD_ADDR_EXP 84
21082: PUSH
21083: LD_INT 1
21085: ST_TO_ADDR
// if p3 = 110 then
21086: LD_VAR 0 3
21090: PUSH
21091: LD_INT 110
21093: EQUAL
21094: IFFALSE 21104
// sContamin := true ;
21096: LD_ADDR_EXP 85
21100: PUSH
21101: LD_INT 1
21103: ST_TO_ADDR
// if p3 = 111 then
21104: LD_VAR 0 3
21108: PUSH
21109: LD_INT 111
21111: EQUAL
21112: IFFALSE 21122
// sOil := true ;
21114: LD_ADDR_EXP 87
21118: PUSH
21119: LD_INT 1
21121: ST_TO_ADDR
// if p3 = 112 then
21122: LD_VAR 0 3
21126: PUSH
21127: LD_INT 112
21129: EQUAL
21130: IFFALSE 21140
// sStu := true ;
21132: LD_ADDR_EXP 91
21136: PUSH
21137: LD_INT 1
21139: ST_TO_ADDR
// if p3 = 113 then
21140: LD_VAR 0 3
21144: PUSH
21145: LD_INT 113
21147: EQUAL
21148: IFFALSE 21158
// sBazooka := true ;
21150: LD_ADDR_EXP 94
21154: PUSH
21155: LD_INT 1
21157: ST_TO_ADDR
// if p3 = 114 then
21158: LD_VAR 0 3
21162: PUSH
21163: LD_INT 114
21165: EQUAL
21166: IFFALSE 21176
// sMortar := true ;
21168: LD_ADDR_EXP 95
21172: PUSH
21173: LD_INT 1
21175: ST_TO_ADDR
// if p3 = 115 then
21176: LD_VAR 0 3
21180: PUSH
21181: LD_INT 115
21183: EQUAL
21184: IFFALSE 21194
// sRanger := true ;
21186: LD_ADDR_EXP 105
21190: PUSH
21191: LD_INT 1
21193: ST_TO_ADDR
// if p3 = 116 then
21194: LD_VAR 0 3
21198: PUSH
21199: LD_INT 116
21201: EQUAL
21202: IFFALSE 21212
// sComputer := true ;
21204: LD_ADDR_EXP 106
21208: PUSH
21209: LD_INT 1
21211: ST_TO_ADDR
// if p3 = 117 then
21212: LD_VAR 0 3
21216: PUSH
21217: LD_INT 117
21219: EQUAL
21220: IFFALSE 21230
// s30 := true ;
21222: LD_ADDR_EXP 107
21226: PUSH
21227: LD_INT 1
21229: ST_TO_ADDR
// if p3 = 118 then
21230: LD_VAR 0 3
21234: PUSH
21235: LD_INT 118
21237: EQUAL
21238: IFFALSE 21248
// s60 := true ;
21240: LD_ADDR_EXP 108
21244: PUSH
21245: LD_INT 1
21247: ST_TO_ADDR
// end ; if p2 = hack_mode then
21248: LD_VAR 0 2
21252: PUSH
21253: LD_INT 101
21255: EQUAL
21256: IFFALSE 21384
// begin case p3 of 1 :
21258: LD_VAR 0 3
21262: PUSH
21263: LD_INT 1
21265: DOUBLE
21266: EQUAL
21267: IFTRUE 21271
21269: GO 21278
21271: POP
// hHackUnlimitedResources ; 2 :
21272: CALL 33531 0 0
21276: GO 21384
21278: LD_INT 2
21280: DOUBLE
21281: EQUAL
21282: IFTRUE 21286
21284: GO 21293
21286: POP
// hHackSetLevel10 ; 3 :
21287: CALL 33664 0 0
21291: GO 21384
21293: LD_INT 3
21295: DOUBLE
21296: EQUAL
21297: IFTRUE 21301
21299: GO 21308
21301: POP
// hHackSetLevel10YourUnits ; 4 :
21302: CALL 33749 0 0
21306: GO 21384
21308: LD_INT 4
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21323
21316: POP
// hHackInvincible ; 5 :
21317: CALL 34197 0 0
21321: GO 21384
21323: LD_INT 5
21325: DOUBLE
21326: EQUAL
21327: IFTRUE 21331
21329: GO 21338
21331: POP
// hHackInvisible ; 6 :
21332: CALL 34308 0 0
21336: GO 21384
21338: LD_INT 6
21340: DOUBLE
21341: EQUAL
21342: IFTRUE 21346
21344: GO 21353
21346: POP
// hHackChangeYourSide ; 7 :
21347: CALL 34365 0 0
21351: GO 21384
21353: LD_INT 7
21355: DOUBLE
21356: EQUAL
21357: IFTRUE 21361
21359: GO 21368
21361: POP
// hHackChangeUnitSide ; 8 :
21362: CALL 34407 0 0
21366: GO 21384
21368: LD_INT 8
21370: DOUBLE
21371: EQUAL
21372: IFTRUE 21376
21374: GO 21383
21376: POP
// hHackFog ; end ;
21377: CALL 34508 0 0
21381: GO 21384
21383: POP
// end ; if p2 = game_save_mode then
21384: LD_VAR 0 2
21388: PUSH
21389: LD_INT 102
21391: EQUAL
21392: IFFALSE 21447
// begin if p3 = 1 then
21394: LD_VAR 0 3
21398: PUSH
21399: LD_INT 1
21401: EQUAL
21402: IFFALSE 21414
// globalGameSaveCounter := p4 ;
21404: LD_ADDR_EXP 51
21408: PUSH
21409: LD_VAR 0 4
21413: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21414: LD_VAR 0 3
21418: PUSH
21419: LD_INT 2
21421: EQUAL
21422: PUSH
21423: LD_EXP 51
21427: AND
21428: IFFALSE 21447
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21430: LD_STRING setGameSaveCounter(
21432: PUSH
21433: LD_EXP 51
21437: STR
21438: PUSH
21439: LD_STRING )
21441: STR
21442: PPUSH
21443: CALL_OW 559
// end ; end ;
21447: LD_VAR 0 7
21451: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21452: LD_INT 0
21454: PPUSH
// streamModeActive := false ;
21455: LD_ADDR_EXP 52
21459: PUSH
21460: LD_INT 0
21462: ST_TO_ADDR
// normalCounter := 36 ;
21463: LD_ADDR_EXP 53
21467: PUSH
21468: LD_INT 36
21470: ST_TO_ADDR
// hardcoreCounter := 18 ;
21471: LD_ADDR_EXP 54
21475: PUSH
21476: LD_INT 18
21478: ST_TO_ADDR
// sRocket := false ;
21479: LD_ADDR_EXP 57
21483: PUSH
21484: LD_INT 0
21486: ST_TO_ADDR
// sSpeed := false ;
21487: LD_ADDR_EXP 56
21491: PUSH
21492: LD_INT 0
21494: ST_TO_ADDR
// sEngine := false ;
21495: LD_ADDR_EXP 58
21499: PUSH
21500: LD_INT 0
21502: ST_TO_ADDR
// sSpec := false ;
21503: LD_ADDR_EXP 55
21507: PUSH
21508: LD_INT 0
21510: ST_TO_ADDR
// sLevel := false ;
21511: LD_ADDR_EXP 59
21515: PUSH
21516: LD_INT 0
21518: ST_TO_ADDR
// sArmoury := false ;
21519: LD_ADDR_EXP 60
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// sRadar := false ;
21527: LD_ADDR_EXP 61
21531: PUSH
21532: LD_INT 0
21534: ST_TO_ADDR
// sBunker := false ;
21535: LD_ADDR_EXP 62
21539: PUSH
21540: LD_INT 0
21542: ST_TO_ADDR
// sHack := false ;
21543: LD_ADDR_EXP 63
21547: PUSH
21548: LD_INT 0
21550: ST_TO_ADDR
// sFire := false ;
21551: LD_ADDR_EXP 64
21555: PUSH
21556: LD_INT 0
21558: ST_TO_ADDR
// sRefresh := false ;
21559: LD_ADDR_EXP 65
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// sExp := false ;
21567: LD_ADDR_EXP 66
21571: PUSH
21572: LD_INT 0
21574: ST_TO_ADDR
// sDepot := false ;
21575: LD_ADDR_EXP 67
21579: PUSH
21580: LD_INT 0
21582: ST_TO_ADDR
// sFlag := false ;
21583: LD_ADDR_EXP 68
21587: PUSH
21588: LD_INT 0
21590: ST_TO_ADDR
// sKamikadze := false ;
21591: LD_ADDR_EXP 76
21595: PUSH
21596: LD_INT 0
21598: ST_TO_ADDR
// sTroll := false ;
21599: LD_ADDR_EXP 77
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
// sSlow := false ;
21607: LD_ADDR_EXP 78
21611: PUSH
21612: LD_INT 0
21614: ST_TO_ADDR
// sLack := false ;
21615: LD_ADDR_EXP 79
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// sTank := false ;
21623: LD_ADDR_EXP 81
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// sRemote := false ;
21631: LD_ADDR_EXP 82
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
// sPowell := false ;
21639: LD_ADDR_EXP 83
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
// sTeleport := false ;
21647: LD_ADDR_EXP 86
21651: PUSH
21652: LD_INT 0
21654: ST_TO_ADDR
// sOilTower := false ;
21655: LD_ADDR_EXP 88
21659: PUSH
21660: LD_INT 0
21662: ST_TO_ADDR
// sShovel := false ;
21663: LD_ADDR_EXP 89
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// sSheik := false ;
21671: LD_ADDR_EXP 90
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// sEarthquake := false ;
21679: LD_ADDR_EXP 92
21683: PUSH
21684: LD_INT 0
21686: ST_TO_ADDR
// sAI := false ;
21687: LD_ADDR_EXP 93
21691: PUSH
21692: LD_INT 0
21694: ST_TO_ADDR
// sCargo := false ;
21695: LD_ADDR_EXP 96
21699: PUSH
21700: LD_INT 0
21702: ST_TO_ADDR
// sDLaser := false ;
21703: LD_ADDR_EXP 97
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// sExchange := false ;
21711: LD_ADDR_EXP 98
21715: PUSH
21716: LD_INT 0
21718: ST_TO_ADDR
// sFac := false ;
21719: LD_ADDR_EXP 99
21723: PUSH
21724: LD_INT 0
21726: ST_TO_ADDR
// sPower := false ;
21727: LD_ADDR_EXP 100
21731: PUSH
21732: LD_INT 0
21734: ST_TO_ADDR
// sRandom := false ;
21735: LD_ADDR_EXP 101
21739: PUSH
21740: LD_INT 0
21742: ST_TO_ADDR
// sShield := false ;
21743: LD_ADDR_EXP 102
21747: PUSH
21748: LD_INT 0
21750: ST_TO_ADDR
// sTime := false ;
21751: LD_ADDR_EXP 103
21755: PUSH
21756: LD_INT 0
21758: ST_TO_ADDR
// sTools := false ;
21759: LD_ADDR_EXP 104
21763: PUSH
21764: LD_INT 0
21766: ST_TO_ADDR
// sSold := false ;
21767: LD_ADDR_EXP 69
21771: PUSH
21772: LD_INT 0
21774: ST_TO_ADDR
// sDiff := false ;
21775: LD_ADDR_EXP 70
21779: PUSH
21780: LD_INT 0
21782: ST_TO_ADDR
// sFog := false ;
21783: LD_ADDR_EXP 73
21787: PUSH
21788: LD_INT 0
21790: ST_TO_ADDR
// sReset := false ;
21791: LD_ADDR_EXP 74
21795: PUSH
21796: LD_INT 0
21798: ST_TO_ADDR
// sSun := false ;
21799: LD_ADDR_EXP 75
21803: PUSH
21804: LD_INT 0
21806: ST_TO_ADDR
// sTiger := false ;
21807: LD_ADDR_EXP 71
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
// sBomb := false ;
21815: LD_ADDR_EXP 72
21819: PUSH
21820: LD_INT 0
21822: ST_TO_ADDR
// sWound := false ;
21823: LD_ADDR_EXP 80
21827: PUSH
21828: LD_INT 0
21830: ST_TO_ADDR
// sBetray := false ;
21831: LD_ADDR_EXP 84
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
// sContamin := false ;
21839: LD_ADDR_EXP 85
21843: PUSH
21844: LD_INT 0
21846: ST_TO_ADDR
// sOil := false ;
21847: LD_ADDR_EXP 87
21851: PUSH
21852: LD_INT 0
21854: ST_TO_ADDR
// sStu := false ;
21855: LD_ADDR_EXP 91
21859: PUSH
21860: LD_INT 0
21862: ST_TO_ADDR
// sBazooka := false ;
21863: LD_ADDR_EXP 94
21867: PUSH
21868: LD_INT 0
21870: ST_TO_ADDR
// sMortar := false ;
21871: LD_ADDR_EXP 95
21875: PUSH
21876: LD_INT 0
21878: ST_TO_ADDR
// sRanger := false ;
21879: LD_ADDR_EXP 105
21883: PUSH
21884: LD_INT 0
21886: ST_TO_ADDR
// sComputer := false ;
21887: LD_ADDR_EXP 106
21891: PUSH
21892: LD_INT 0
21894: ST_TO_ADDR
// s30 := false ;
21895: LD_ADDR_EXP 107
21899: PUSH
21900: LD_INT 0
21902: ST_TO_ADDR
// s60 := false ;
21903: LD_ADDR_EXP 108
21907: PUSH
21908: LD_INT 0
21910: ST_TO_ADDR
// end ;
21911: LD_VAR 0 1
21915: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21916: LD_INT 0
21918: PPUSH
21919: PPUSH
21920: PPUSH
21921: PPUSH
21922: PPUSH
21923: PPUSH
21924: PPUSH
// result := [ ] ;
21925: LD_ADDR_VAR 0 2
21929: PUSH
21930: EMPTY
21931: ST_TO_ADDR
// if campaign_id = 1 then
21932: LD_OWVAR 69
21936: PUSH
21937: LD_INT 1
21939: EQUAL
21940: IFFALSE 25106
// begin case mission_number of 1 :
21942: LD_OWVAR 70
21946: PUSH
21947: LD_INT 1
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 22031
21955: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21956: LD_ADDR_VAR 0 2
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: LD_INT 4
21966: PUSH
21967: LD_INT 11
21969: PUSH
21970: LD_INT 12
21972: PUSH
21973: LD_INT 15
21975: PUSH
21976: LD_INT 16
21978: PUSH
21979: LD_INT 22
21981: PUSH
21982: LD_INT 23
21984: PUSH
21985: LD_INT 26
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 101
22001: PUSH
22002: LD_INT 102
22004: PUSH
22005: LD_INT 106
22007: PUSH
22008: LD_INT 116
22010: PUSH
22011: LD_INT 117
22013: PUSH
22014: LD_INT 118
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: ST_TO_ADDR
22029: GO 25104
22031: LD_INT 2
22033: DOUBLE
22034: EQUAL
22035: IFTRUE 22039
22037: GO 22123
22039: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22040: LD_ADDR_VAR 0 2
22044: PUSH
22045: LD_INT 2
22047: PUSH
22048: LD_INT 4
22050: PUSH
22051: LD_INT 11
22053: PUSH
22054: LD_INT 12
22056: PUSH
22057: LD_INT 15
22059: PUSH
22060: LD_INT 16
22062: PUSH
22063: LD_INT 22
22065: PUSH
22066: LD_INT 23
22068: PUSH
22069: LD_INT 26
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 101
22085: PUSH
22086: LD_INT 102
22088: PUSH
22089: LD_INT 105
22091: PUSH
22092: LD_INT 106
22094: PUSH
22095: LD_INT 108
22097: PUSH
22098: LD_INT 116
22100: PUSH
22101: LD_INT 117
22103: PUSH
22104: LD_INT 118
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: ST_TO_ADDR
22121: GO 25104
22123: LD_INT 3
22125: DOUBLE
22126: EQUAL
22127: IFTRUE 22131
22129: GO 22219
22131: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22132: LD_ADDR_VAR 0 2
22136: PUSH
22137: LD_INT 2
22139: PUSH
22140: LD_INT 4
22142: PUSH
22143: LD_INT 5
22145: PUSH
22146: LD_INT 11
22148: PUSH
22149: LD_INT 12
22151: PUSH
22152: LD_INT 15
22154: PUSH
22155: LD_INT 16
22157: PUSH
22158: LD_INT 22
22160: PUSH
22161: LD_INT 26
22163: PUSH
22164: LD_INT 36
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 101
22181: PUSH
22182: LD_INT 102
22184: PUSH
22185: LD_INT 105
22187: PUSH
22188: LD_INT 106
22190: PUSH
22191: LD_INT 108
22193: PUSH
22194: LD_INT 116
22196: PUSH
22197: LD_INT 117
22199: PUSH
22200: LD_INT 118
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: ST_TO_ADDR
22217: GO 25104
22219: LD_INT 4
22221: DOUBLE
22222: EQUAL
22223: IFTRUE 22227
22225: GO 22323
22227: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22228: LD_ADDR_VAR 0 2
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 4
22238: PUSH
22239: LD_INT 5
22241: PUSH
22242: LD_INT 8
22244: PUSH
22245: LD_INT 11
22247: PUSH
22248: LD_INT 12
22250: PUSH
22251: LD_INT 15
22253: PUSH
22254: LD_INT 16
22256: PUSH
22257: LD_INT 22
22259: PUSH
22260: LD_INT 23
22262: PUSH
22263: LD_INT 26
22265: PUSH
22266: LD_INT 36
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 101
22285: PUSH
22286: LD_INT 102
22288: PUSH
22289: LD_INT 105
22291: PUSH
22292: LD_INT 106
22294: PUSH
22295: LD_INT 108
22297: PUSH
22298: LD_INT 116
22300: PUSH
22301: LD_INT 117
22303: PUSH
22304: LD_INT 118
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: ST_TO_ADDR
22321: GO 25104
22323: LD_INT 5
22325: DOUBLE
22326: EQUAL
22327: IFTRUE 22331
22329: GO 22443
22331: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22332: LD_ADDR_VAR 0 2
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: LD_INT 4
22342: PUSH
22343: LD_INT 5
22345: PUSH
22346: LD_INT 6
22348: PUSH
22349: LD_INT 8
22351: PUSH
22352: LD_INT 11
22354: PUSH
22355: LD_INT 12
22357: PUSH
22358: LD_INT 15
22360: PUSH
22361: LD_INT 16
22363: PUSH
22364: LD_INT 22
22366: PUSH
22367: LD_INT 23
22369: PUSH
22370: LD_INT 25
22372: PUSH
22373: LD_INT 26
22375: PUSH
22376: LD_INT 36
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 101
22397: PUSH
22398: LD_INT 102
22400: PUSH
22401: LD_INT 105
22403: PUSH
22404: LD_INT 106
22406: PUSH
22407: LD_INT 108
22409: PUSH
22410: LD_INT 109
22412: PUSH
22413: LD_INT 112
22415: PUSH
22416: LD_INT 116
22418: PUSH
22419: LD_INT 117
22421: PUSH
22422: LD_INT 118
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: ST_TO_ADDR
22441: GO 25104
22443: LD_INT 6
22445: DOUBLE
22446: EQUAL
22447: IFTRUE 22451
22449: GO 22583
22451: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22452: LD_ADDR_VAR 0 2
22456: PUSH
22457: LD_INT 2
22459: PUSH
22460: LD_INT 4
22462: PUSH
22463: LD_INT 5
22465: PUSH
22466: LD_INT 6
22468: PUSH
22469: LD_INT 8
22471: PUSH
22472: LD_INT 11
22474: PUSH
22475: LD_INT 12
22477: PUSH
22478: LD_INT 15
22480: PUSH
22481: LD_INT 16
22483: PUSH
22484: LD_INT 20
22486: PUSH
22487: LD_INT 21
22489: PUSH
22490: LD_INT 22
22492: PUSH
22493: LD_INT 23
22495: PUSH
22496: LD_INT 25
22498: PUSH
22499: LD_INT 26
22501: PUSH
22502: LD_INT 30
22504: PUSH
22505: LD_INT 31
22507: PUSH
22508: LD_INT 32
22510: PUSH
22511: LD_INT 36
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 101
22537: PUSH
22538: LD_INT 102
22540: PUSH
22541: LD_INT 105
22543: PUSH
22544: LD_INT 106
22546: PUSH
22547: LD_INT 108
22549: PUSH
22550: LD_INT 109
22552: PUSH
22553: LD_INT 112
22555: PUSH
22556: LD_INT 116
22558: PUSH
22559: LD_INT 117
22561: PUSH
22562: LD_INT 118
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: ST_TO_ADDR
22581: GO 25104
22583: LD_INT 7
22585: DOUBLE
22586: EQUAL
22587: IFTRUE 22591
22589: GO 22703
22591: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22592: LD_ADDR_VAR 0 2
22596: PUSH
22597: LD_INT 2
22599: PUSH
22600: LD_INT 4
22602: PUSH
22603: LD_INT 5
22605: PUSH
22606: LD_INT 7
22608: PUSH
22609: LD_INT 11
22611: PUSH
22612: LD_INT 12
22614: PUSH
22615: LD_INT 15
22617: PUSH
22618: LD_INT 16
22620: PUSH
22621: LD_INT 20
22623: PUSH
22624: LD_INT 21
22626: PUSH
22627: LD_INT 22
22629: PUSH
22630: LD_INT 23
22632: PUSH
22633: LD_INT 25
22635: PUSH
22636: LD_INT 26
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 101
22657: PUSH
22658: LD_INT 102
22660: PUSH
22661: LD_INT 103
22663: PUSH
22664: LD_INT 105
22666: PUSH
22667: LD_INT 106
22669: PUSH
22670: LD_INT 108
22672: PUSH
22673: LD_INT 112
22675: PUSH
22676: LD_INT 116
22678: PUSH
22679: LD_INT 117
22681: PUSH
22682: LD_INT 118
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: ST_TO_ADDR
22701: GO 25104
22703: LD_INT 8
22705: DOUBLE
22706: EQUAL
22707: IFTRUE 22711
22709: GO 22851
22711: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22712: LD_ADDR_VAR 0 2
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: LD_INT 4
22722: PUSH
22723: LD_INT 5
22725: PUSH
22726: LD_INT 6
22728: PUSH
22729: LD_INT 7
22731: PUSH
22732: LD_INT 8
22734: PUSH
22735: LD_INT 11
22737: PUSH
22738: LD_INT 12
22740: PUSH
22741: LD_INT 15
22743: PUSH
22744: LD_INT 16
22746: PUSH
22747: LD_INT 20
22749: PUSH
22750: LD_INT 21
22752: PUSH
22753: LD_INT 22
22755: PUSH
22756: LD_INT 23
22758: PUSH
22759: LD_INT 25
22761: PUSH
22762: LD_INT 26
22764: PUSH
22765: LD_INT 30
22767: PUSH
22768: LD_INT 31
22770: PUSH
22771: LD_INT 32
22773: PUSH
22774: LD_INT 36
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 101
22801: PUSH
22802: LD_INT 102
22804: PUSH
22805: LD_INT 103
22807: PUSH
22808: LD_INT 105
22810: PUSH
22811: LD_INT 106
22813: PUSH
22814: LD_INT 108
22816: PUSH
22817: LD_INT 109
22819: PUSH
22820: LD_INT 112
22822: PUSH
22823: LD_INT 116
22825: PUSH
22826: LD_INT 117
22828: PUSH
22829: LD_INT 118
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: ST_TO_ADDR
22849: GO 25104
22851: LD_INT 9
22853: DOUBLE
22854: EQUAL
22855: IFTRUE 22859
22857: GO 23007
22859: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22860: LD_ADDR_VAR 0 2
22864: PUSH
22865: LD_INT 2
22867: PUSH
22868: LD_INT 4
22870: PUSH
22871: LD_INT 5
22873: PUSH
22874: LD_INT 6
22876: PUSH
22877: LD_INT 7
22879: PUSH
22880: LD_INT 8
22882: PUSH
22883: LD_INT 11
22885: PUSH
22886: LD_INT 12
22888: PUSH
22889: LD_INT 15
22891: PUSH
22892: LD_INT 16
22894: PUSH
22895: LD_INT 20
22897: PUSH
22898: LD_INT 21
22900: PUSH
22901: LD_INT 22
22903: PUSH
22904: LD_INT 23
22906: PUSH
22907: LD_INT 25
22909: PUSH
22910: LD_INT 26
22912: PUSH
22913: LD_INT 28
22915: PUSH
22916: LD_INT 30
22918: PUSH
22919: LD_INT 31
22921: PUSH
22922: LD_INT 32
22924: PUSH
22925: LD_INT 36
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 101
22953: PUSH
22954: LD_INT 102
22956: PUSH
22957: LD_INT 103
22959: PUSH
22960: LD_INT 105
22962: PUSH
22963: LD_INT 106
22965: PUSH
22966: LD_INT 108
22968: PUSH
22969: LD_INT 109
22971: PUSH
22972: LD_INT 112
22974: PUSH
22975: LD_INT 114
22977: PUSH
22978: LD_INT 116
22980: PUSH
22981: LD_INT 117
22983: PUSH
22984: LD_INT 118
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: ST_TO_ADDR
23005: GO 25104
23007: LD_INT 10
23009: DOUBLE
23010: EQUAL
23011: IFTRUE 23015
23013: GO 23211
23015: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23016: LD_ADDR_VAR 0 2
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: LD_INT 4
23026: PUSH
23027: LD_INT 5
23029: PUSH
23030: LD_INT 6
23032: PUSH
23033: LD_INT 7
23035: PUSH
23036: LD_INT 8
23038: PUSH
23039: LD_INT 9
23041: PUSH
23042: LD_INT 10
23044: PUSH
23045: LD_INT 11
23047: PUSH
23048: LD_INT 12
23050: PUSH
23051: LD_INT 13
23053: PUSH
23054: LD_INT 14
23056: PUSH
23057: LD_INT 15
23059: PUSH
23060: LD_INT 16
23062: PUSH
23063: LD_INT 17
23065: PUSH
23066: LD_INT 18
23068: PUSH
23069: LD_INT 19
23071: PUSH
23072: LD_INT 20
23074: PUSH
23075: LD_INT 21
23077: PUSH
23078: LD_INT 22
23080: PUSH
23081: LD_INT 23
23083: PUSH
23084: LD_INT 24
23086: PUSH
23087: LD_INT 25
23089: PUSH
23090: LD_INT 26
23092: PUSH
23093: LD_INT 28
23095: PUSH
23096: LD_INT 30
23098: PUSH
23099: LD_INT 31
23101: PUSH
23102: LD_INT 32
23104: PUSH
23105: LD_INT 36
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 101
23141: PUSH
23142: LD_INT 102
23144: PUSH
23145: LD_INT 103
23147: PUSH
23148: LD_INT 104
23150: PUSH
23151: LD_INT 105
23153: PUSH
23154: LD_INT 106
23156: PUSH
23157: LD_INT 107
23159: PUSH
23160: LD_INT 108
23162: PUSH
23163: LD_INT 109
23165: PUSH
23166: LD_INT 110
23168: PUSH
23169: LD_INT 111
23171: PUSH
23172: LD_INT 112
23174: PUSH
23175: LD_INT 114
23177: PUSH
23178: LD_INT 116
23180: PUSH
23181: LD_INT 117
23183: PUSH
23184: LD_INT 118
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: ST_TO_ADDR
23209: GO 25104
23211: LD_INT 11
23213: DOUBLE
23214: EQUAL
23215: IFTRUE 23219
23217: GO 23423
23219: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23220: LD_ADDR_VAR 0 2
23224: PUSH
23225: LD_INT 2
23227: PUSH
23228: LD_INT 3
23230: PUSH
23231: LD_INT 4
23233: PUSH
23234: LD_INT 5
23236: PUSH
23237: LD_INT 6
23239: PUSH
23240: LD_INT 7
23242: PUSH
23243: LD_INT 8
23245: PUSH
23246: LD_INT 9
23248: PUSH
23249: LD_INT 10
23251: PUSH
23252: LD_INT 11
23254: PUSH
23255: LD_INT 12
23257: PUSH
23258: LD_INT 13
23260: PUSH
23261: LD_INT 14
23263: PUSH
23264: LD_INT 15
23266: PUSH
23267: LD_INT 16
23269: PUSH
23270: LD_INT 17
23272: PUSH
23273: LD_INT 18
23275: PUSH
23276: LD_INT 19
23278: PUSH
23279: LD_INT 20
23281: PUSH
23282: LD_INT 21
23284: PUSH
23285: LD_INT 22
23287: PUSH
23288: LD_INT 23
23290: PUSH
23291: LD_INT 24
23293: PUSH
23294: LD_INT 25
23296: PUSH
23297: LD_INT 26
23299: PUSH
23300: LD_INT 28
23302: PUSH
23303: LD_INT 30
23305: PUSH
23306: LD_INT 31
23308: PUSH
23309: LD_INT 32
23311: PUSH
23312: LD_INT 34
23314: PUSH
23315: LD_INT 36
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 101
23353: PUSH
23354: LD_INT 102
23356: PUSH
23357: LD_INT 103
23359: PUSH
23360: LD_INT 104
23362: PUSH
23363: LD_INT 105
23365: PUSH
23366: LD_INT 106
23368: PUSH
23369: LD_INT 107
23371: PUSH
23372: LD_INT 108
23374: PUSH
23375: LD_INT 109
23377: PUSH
23378: LD_INT 110
23380: PUSH
23381: LD_INT 111
23383: PUSH
23384: LD_INT 112
23386: PUSH
23387: LD_INT 114
23389: PUSH
23390: LD_INT 116
23392: PUSH
23393: LD_INT 117
23395: PUSH
23396: LD_INT 118
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: ST_TO_ADDR
23421: GO 25104
23423: LD_INT 12
23425: DOUBLE
23426: EQUAL
23427: IFTRUE 23431
23429: GO 23651
23431: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23432: LD_ADDR_VAR 0 2
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: LD_INT 2
23442: PUSH
23443: LD_INT 3
23445: PUSH
23446: LD_INT 4
23448: PUSH
23449: LD_INT 5
23451: PUSH
23452: LD_INT 6
23454: PUSH
23455: LD_INT 7
23457: PUSH
23458: LD_INT 8
23460: PUSH
23461: LD_INT 9
23463: PUSH
23464: LD_INT 10
23466: PUSH
23467: LD_INT 11
23469: PUSH
23470: LD_INT 12
23472: PUSH
23473: LD_INT 13
23475: PUSH
23476: LD_INT 14
23478: PUSH
23479: LD_INT 15
23481: PUSH
23482: LD_INT 16
23484: PUSH
23485: LD_INT 17
23487: PUSH
23488: LD_INT 18
23490: PUSH
23491: LD_INT 19
23493: PUSH
23494: LD_INT 20
23496: PUSH
23497: LD_INT 21
23499: PUSH
23500: LD_INT 22
23502: PUSH
23503: LD_INT 23
23505: PUSH
23506: LD_INT 24
23508: PUSH
23509: LD_INT 25
23511: PUSH
23512: LD_INT 26
23514: PUSH
23515: LD_INT 27
23517: PUSH
23518: LD_INT 28
23520: PUSH
23521: LD_INT 30
23523: PUSH
23524: LD_INT 31
23526: PUSH
23527: LD_INT 32
23529: PUSH
23530: LD_INT 33
23532: PUSH
23533: LD_INT 34
23535: PUSH
23536: LD_INT 36
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 101
23577: PUSH
23578: LD_INT 102
23580: PUSH
23581: LD_INT 103
23583: PUSH
23584: LD_INT 104
23586: PUSH
23587: LD_INT 105
23589: PUSH
23590: LD_INT 106
23592: PUSH
23593: LD_INT 107
23595: PUSH
23596: LD_INT 108
23598: PUSH
23599: LD_INT 109
23601: PUSH
23602: LD_INT 110
23604: PUSH
23605: LD_INT 111
23607: PUSH
23608: LD_INT 112
23610: PUSH
23611: LD_INT 113
23613: PUSH
23614: LD_INT 114
23616: PUSH
23617: LD_INT 116
23619: PUSH
23620: LD_INT 117
23622: PUSH
23623: LD_INT 118
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: ST_TO_ADDR
23649: GO 25104
23651: LD_INT 13
23653: DOUBLE
23654: EQUAL
23655: IFTRUE 23659
23657: GO 23867
23659: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23660: LD_ADDR_VAR 0 2
23664: PUSH
23665: LD_INT 1
23667: PUSH
23668: LD_INT 2
23670: PUSH
23671: LD_INT 3
23673: PUSH
23674: LD_INT 4
23676: PUSH
23677: LD_INT 5
23679: PUSH
23680: LD_INT 8
23682: PUSH
23683: LD_INT 9
23685: PUSH
23686: LD_INT 10
23688: PUSH
23689: LD_INT 11
23691: PUSH
23692: LD_INT 12
23694: PUSH
23695: LD_INT 14
23697: PUSH
23698: LD_INT 15
23700: PUSH
23701: LD_INT 16
23703: PUSH
23704: LD_INT 17
23706: PUSH
23707: LD_INT 18
23709: PUSH
23710: LD_INT 19
23712: PUSH
23713: LD_INT 20
23715: PUSH
23716: LD_INT 21
23718: PUSH
23719: LD_INT 22
23721: PUSH
23722: LD_INT 23
23724: PUSH
23725: LD_INT 24
23727: PUSH
23728: LD_INT 25
23730: PUSH
23731: LD_INT 26
23733: PUSH
23734: LD_INT 27
23736: PUSH
23737: LD_INT 28
23739: PUSH
23740: LD_INT 30
23742: PUSH
23743: LD_INT 31
23745: PUSH
23746: LD_INT 32
23748: PUSH
23749: LD_INT 33
23751: PUSH
23752: LD_INT 34
23754: PUSH
23755: LD_INT 36
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 101
23793: PUSH
23794: LD_INT 102
23796: PUSH
23797: LD_INT 103
23799: PUSH
23800: LD_INT 104
23802: PUSH
23803: LD_INT 105
23805: PUSH
23806: LD_INT 106
23808: PUSH
23809: LD_INT 107
23811: PUSH
23812: LD_INT 108
23814: PUSH
23815: LD_INT 109
23817: PUSH
23818: LD_INT 110
23820: PUSH
23821: LD_INT 111
23823: PUSH
23824: LD_INT 112
23826: PUSH
23827: LD_INT 113
23829: PUSH
23830: LD_INT 114
23832: PUSH
23833: LD_INT 116
23835: PUSH
23836: LD_INT 117
23838: PUSH
23839: LD_INT 118
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: ST_TO_ADDR
23865: GO 25104
23867: LD_INT 14
23869: DOUBLE
23870: EQUAL
23871: IFTRUE 23875
23873: GO 24099
23875: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23876: LD_ADDR_VAR 0 2
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: LD_INT 3
23889: PUSH
23890: LD_INT 4
23892: PUSH
23893: LD_INT 5
23895: PUSH
23896: LD_INT 6
23898: PUSH
23899: LD_INT 7
23901: PUSH
23902: LD_INT 8
23904: PUSH
23905: LD_INT 9
23907: PUSH
23908: LD_INT 10
23910: PUSH
23911: LD_INT 11
23913: PUSH
23914: LD_INT 12
23916: PUSH
23917: LD_INT 13
23919: PUSH
23920: LD_INT 14
23922: PUSH
23923: LD_INT 15
23925: PUSH
23926: LD_INT 16
23928: PUSH
23929: LD_INT 17
23931: PUSH
23932: LD_INT 18
23934: PUSH
23935: LD_INT 19
23937: PUSH
23938: LD_INT 20
23940: PUSH
23941: LD_INT 21
23943: PUSH
23944: LD_INT 22
23946: PUSH
23947: LD_INT 23
23949: PUSH
23950: LD_INT 24
23952: PUSH
23953: LD_INT 25
23955: PUSH
23956: LD_INT 26
23958: PUSH
23959: LD_INT 27
23961: PUSH
23962: LD_INT 28
23964: PUSH
23965: LD_INT 29
23967: PUSH
23968: LD_INT 30
23970: PUSH
23971: LD_INT 31
23973: PUSH
23974: LD_INT 32
23976: PUSH
23977: LD_INT 33
23979: PUSH
23980: LD_INT 34
23982: PUSH
23983: LD_INT 36
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 101
24025: PUSH
24026: LD_INT 102
24028: PUSH
24029: LD_INT 103
24031: PUSH
24032: LD_INT 104
24034: PUSH
24035: LD_INT 105
24037: PUSH
24038: LD_INT 106
24040: PUSH
24041: LD_INT 107
24043: PUSH
24044: LD_INT 108
24046: PUSH
24047: LD_INT 109
24049: PUSH
24050: LD_INT 110
24052: PUSH
24053: LD_INT 111
24055: PUSH
24056: LD_INT 112
24058: PUSH
24059: LD_INT 113
24061: PUSH
24062: LD_INT 114
24064: PUSH
24065: LD_INT 116
24067: PUSH
24068: LD_INT 117
24070: PUSH
24071: LD_INT 118
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: ST_TO_ADDR
24097: GO 25104
24099: LD_INT 15
24101: DOUBLE
24102: EQUAL
24103: IFTRUE 24107
24105: GO 24331
24107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24108: LD_ADDR_VAR 0 2
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: LD_INT 2
24118: PUSH
24119: LD_INT 3
24121: PUSH
24122: LD_INT 4
24124: PUSH
24125: LD_INT 5
24127: PUSH
24128: LD_INT 6
24130: PUSH
24131: LD_INT 7
24133: PUSH
24134: LD_INT 8
24136: PUSH
24137: LD_INT 9
24139: PUSH
24140: LD_INT 10
24142: PUSH
24143: LD_INT 11
24145: PUSH
24146: LD_INT 12
24148: PUSH
24149: LD_INT 13
24151: PUSH
24152: LD_INT 14
24154: PUSH
24155: LD_INT 15
24157: PUSH
24158: LD_INT 16
24160: PUSH
24161: LD_INT 17
24163: PUSH
24164: LD_INT 18
24166: PUSH
24167: LD_INT 19
24169: PUSH
24170: LD_INT 20
24172: PUSH
24173: LD_INT 21
24175: PUSH
24176: LD_INT 22
24178: PUSH
24179: LD_INT 23
24181: PUSH
24182: LD_INT 24
24184: PUSH
24185: LD_INT 25
24187: PUSH
24188: LD_INT 26
24190: PUSH
24191: LD_INT 27
24193: PUSH
24194: LD_INT 28
24196: PUSH
24197: LD_INT 29
24199: PUSH
24200: LD_INT 30
24202: PUSH
24203: LD_INT 31
24205: PUSH
24206: LD_INT 32
24208: PUSH
24209: LD_INT 33
24211: PUSH
24212: LD_INT 34
24214: PUSH
24215: LD_INT 36
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 101
24257: PUSH
24258: LD_INT 102
24260: PUSH
24261: LD_INT 103
24263: PUSH
24264: LD_INT 104
24266: PUSH
24267: LD_INT 105
24269: PUSH
24270: LD_INT 106
24272: PUSH
24273: LD_INT 107
24275: PUSH
24276: LD_INT 108
24278: PUSH
24279: LD_INT 109
24281: PUSH
24282: LD_INT 110
24284: PUSH
24285: LD_INT 111
24287: PUSH
24288: LD_INT 112
24290: PUSH
24291: LD_INT 113
24293: PUSH
24294: LD_INT 114
24296: PUSH
24297: LD_INT 116
24299: PUSH
24300: LD_INT 117
24302: PUSH
24303: LD_INT 118
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: ST_TO_ADDR
24329: GO 25104
24331: LD_INT 16
24333: DOUBLE
24334: EQUAL
24335: IFTRUE 24339
24337: GO 24475
24339: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24340: LD_ADDR_VAR 0 2
24344: PUSH
24345: LD_INT 2
24347: PUSH
24348: LD_INT 4
24350: PUSH
24351: LD_INT 5
24353: PUSH
24354: LD_INT 7
24356: PUSH
24357: LD_INT 11
24359: PUSH
24360: LD_INT 12
24362: PUSH
24363: LD_INT 15
24365: PUSH
24366: LD_INT 16
24368: PUSH
24369: LD_INT 20
24371: PUSH
24372: LD_INT 21
24374: PUSH
24375: LD_INT 22
24377: PUSH
24378: LD_INT 23
24380: PUSH
24381: LD_INT 25
24383: PUSH
24384: LD_INT 26
24386: PUSH
24387: LD_INT 30
24389: PUSH
24390: LD_INT 31
24392: PUSH
24393: LD_INT 32
24395: PUSH
24396: LD_INT 33
24398: PUSH
24399: LD_INT 34
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 101
24425: PUSH
24426: LD_INT 102
24428: PUSH
24429: LD_INT 103
24431: PUSH
24432: LD_INT 106
24434: PUSH
24435: LD_INT 108
24437: PUSH
24438: LD_INT 112
24440: PUSH
24441: LD_INT 113
24443: PUSH
24444: LD_INT 114
24446: PUSH
24447: LD_INT 116
24449: PUSH
24450: LD_INT 117
24452: PUSH
24453: LD_INT 118
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: ST_TO_ADDR
24473: GO 25104
24475: LD_INT 17
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24707
24483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24484: LD_ADDR_VAR 0 2
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: LD_INT 3
24497: PUSH
24498: LD_INT 4
24500: PUSH
24501: LD_INT 5
24503: PUSH
24504: LD_INT 6
24506: PUSH
24507: LD_INT 7
24509: PUSH
24510: LD_INT 8
24512: PUSH
24513: LD_INT 9
24515: PUSH
24516: LD_INT 10
24518: PUSH
24519: LD_INT 11
24521: PUSH
24522: LD_INT 12
24524: PUSH
24525: LD_INT 13
24527: PUSH
24528: LD_INT 14
24530: PUSH
24531: LD_INT 15
24533: PUSH
24534: LD_INT 16
24536: PUSH
24537: LD_INT 17
24539: PUSH
24540: LD_INT 18
24542: PUSH
24543: LD_INT 19
24545: PUSH
24546: LD_INT 20
24548: PUSH
24549: LD_INT 21
24551: PUSH
24552: LD_INT 22
24554: PUSH
24555: LD_INT 23
24557: PUSH
24558: LD_INT 24
24560: PUSH
24561: LD_INT 25
24563: PUSH
24564: LD_INT 26
24566: PUSH
24567: LD_INT 27
24569: PUSH
24570: LD_INT 28
24572: PUSH
24573: LD_INT 29
24575: PUSH
24576: LD_INT 30
24578: PUSH
24579: LD_INT 31
24581: PUSH
24582: LD_INT 32
24584: PUSH
24585: LD_INT 33
24587: PUSH
24588: LD_INT 34
24590: PUSH
24591: LD_INT 36
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 101
24633: PUSH
24634: LD_INT 102
24636: PUSH
24637: LD_INT 103
24639: PUSH
24640: LD_INT 104
24642: PUSH
24643: LD_INT 105
24645: PUSH
24646: LD_INT 106
24648: PUSH
24649: LD_INT 107
24651: PUSH
24652: LD_INT 108
24654: PUSH
24655: LD_INT 109
24657: PUSH
24658: LD_INT 110
24660: PUSH
24661: LD_INT 111
24663: PUSH
24664: LD_INT 112
24666: PUSH
24667: LD_INT 113
24669: PUSH
24670: LD_INT 114
24672: PUSH
24673: LD_INT 116
24675: PUSH
24676: LD_INT 117
24678: PUSH
24679: LD_INT 118
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: ST_TO_ADDR
24705: GO 25104
24707: LD_INT 18
24709: DOUBLE
24710: EQUAL
24711: IFTRUE 24715
24713: GO 24863
24715: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24716: LD_ADDR_VAR 0 2
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: LD_INT 4
24726: PUSH
24727: LD_INT 5
24729: PUSH
24730: LD_INT 7
24732: PUSH
24733: LD_INT 11
24735: PUSH
24736: LD_INT 12
24738: PUSH
24739: LD_INT 15
24741: PUSH
24742: LD_INT 16
24744: PUSH
24745: LD_INT 20
24747: PUSH
24748: LD_INT 21
24750: PUSH
24751: LD_INT 22
24753: PUSH
24754: LD_INT 23
24756: PUSH
24757: LD_INT 25
24759: PUSH
24760: LD_INT 26
24762: PUSH
24763: LD_INT 30
24765: PUSH
24766: LD_INT 31
24768: PUSH
24769: LD_INT 32
24771: PUSH
24772: LD_INT 33
24774: PUSH
24775: LD_INT 34
24777: PUSH
24778: LD_INT 35
24780: PUSH
24781: LD_INT 36
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 101
24809: PUSH
24810: LD_INT 102
24812: PUSH
24813: LD_INT 103
24815: PUSH
24816: LD_INT 106
24818: PUSH
24819: LD_INT 108
24821: PUSH
24822: LD_INT 112
24824: PUSH
24825: LD_INT 113
24827: PUSH
24828: LD_INT 114
24830: PUSH
24831: LD_INT 115
24833: PUSH
24834: LD_INT 116
24836: PUSH
24837: LD_INT 117
24839: PUSH
24840: LD_INT 118
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: ST_TO_ADDR
24861: GO 25104
24863: LD_INT 19
24865: DOUBLE
24866: EQUAL
24867: IFTRUE 24871
24869: GO 25103
24871: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24872: LD_ADDR_VAR 0 2
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: LD_INT 3
24885: PUSH
24886: LD_INT 4
24888: PUSH
24889: LD_INT 5
24891: PUSH
24892: LD_INT 6
24894: PUSH
24895: LD_INT 7
24897: PUSH
24898: LD_INT 8
24900: PUSH
24901: LD_INT 9
24903: PUSH
24904: LD_INT 10
24906: PUSH
24907: LD_INT 11
24909: PUSH
24910: LD_INT 12
24912: PUSH
24913: LD_INT 13
24915: PUSH
24916: LD_INT 14
24918: PUSH
24919: LD_INT 15
24921: PUSH
24922: LD_INT 16
24924: PUSH
24925: LD_INT 17
24927: PUSH
24928: LD_INT 18
24930: PUSH
24931: LD_INT 19
24933: PUSH
24934: LD_INT 20
24936: PUSH
24937: LD_INT 21
24939: PUSH
24940: LD_INT 22
24942: PUSH
24943: LD_INT 23
24945: PUSH
24946: LD_INT 24
24948: PUSH
24949: LD_INT 25
24951: PUSH
24952: LD_INT 26
24954: PUSH
24955: LD_INT 27
24957: PUSH
24958: LD_INT 28
24960: PUSH
24961: LD_INT 29
24963: PUSH
24964: LD_INT 30
24966: PUSH
24967: LD_INT 31
24969: PUSH
24970: LD_INT 32
24972: PUSH
24973: LD_INT 33
24975: PUSH
24976: LD_INT 34
24978: PUSH
24979: LD_INT 35
24981: PUSH
24982: LD_INT 36
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 101
25025: PUSH
25026: LD_INT 102
25028: PUSH
25029: LD_INT 103
25031: PUSH
25032: LD_INT 104
25034: PUSH
25035: LD_INT 105
25037: PUSH
25038: LD_INT 106
25040: PUSH
25041: LD_INT 107
25043: PUSH
25044: LD_INT 108
25046: PUSH
25047: LD_INT 109
25049: PUSH
25050: LD_INT 110
25052: PUSH
25053: LD_INT 111
25055: PUSH
25056: LD_INT 112
25058: PUSH
25059: LD_INT 113
25061: PUSH
25062: LD_INT 114
25064: PUSH
25065: LD_INT 115
25067: PUSH
25068: LD_INT 116
25070: PUSH
25071: LD_INT 117
25073: PUSH
25074: LD_INT 118
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: ST_TO_ADDR
25101: GO 25104
25103: POP
// end else
25104: GO 25335
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25106: LD_ADDR_VAR 0 2
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: LD_INT 2
25116: PUSH
25117: LD_INT 3
25119: PUSH
25120: LD_INT 4
25122: PUSH
25123: LD_INT 5
25125: PUSH
25126: LD_INT 6
25128: PUSH
25129: LD_INT 7
25131: PUSH
25132: LD_INT 8
25134: PUSH
25135: LD_INT 9
25137: PUSH
25138: LD_INT 10
25140: PUSH
25141: LD_INT 11
25143: PUSH
25144: LD_INT 12
25146: PUSH
25147: LD_INT 13
25149: PUSH
25150: LD_INT 14
25152: PUSH
25153: LD_INT 15
25155: PUSH
25156: LD_INT 16
25158: PUSH
25159: LD_INT 17
25161: PUSH
25162: LD_INT 18
25164: PUSH
25165: LD_INT 19
25167: PUSH
25168: LD_INT 20
25170: PUSH
25171: LD_INT 21
25173: PUSH
25174: LD_INT 22
25176: PUSH
25177: LD_INT 23
25179: PUSH
25180: LD_INT 24
25182: PUSH
25183: LD_INT 25
25185: PUSH
25186: LD_INT 26
25188: PUSH
25189: LD_INT 27
25191: PUSH
25192: LD_INT 28
25194: PUSH
25195: LD_INT 29
25197: PUSH
25198: LD_INT 30
25200: PUSH
25201: LD_INT 31
25203: PUSH
25204: LD_INT 32
25206: PUSH
25207: LD_INT 33
25209: PUSH
25210: LD_INT 34
25212: PUSH
25213: LD_INT 35
25215: PUSH
25216: LD_INT 36
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 101
25259: PUSH
25260: LD_INT 102
25262: PUSH
25263: LD_INT 103
25265: PUSH
25266: LD_INT 104
25268: PUSH
25269: LD_INT 105
25271: PUSH
25272: LD_INT 106
25274: PUSH
25275: LD_INT 107
25277: PUSH
25278: LD_INT 108
25280: PUSH
25281: LD_INT 109
25283: PUSH
25284: LD_INT 110
25286: PUSH
25287: LD_INT 111
25289: PUSH
25290: LD_INT 112
25292: PUSH
25293: LD_INT 113
25295: PUSH
25296: LD_INT 114
25298: PUSH
25299: LD_INT 115
25301: PUSH
25302: LD_INT 116
25304: PUSH
25305: LD_INT 117
25307: PUSH
25308: LD_INT 118
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: ST_TO_ADDR
// if result then
25335: LD_VAR 0 2
25339: IFFALSE 26125
// begin normal :=  ;
25341: LD_ADDR_VAR 0 5
25345: PUSH
25346: LD_STRING 
25348: ST_TO_ADDR
// hardcore :=  ;
25349: LD_ADDR_VAR 0 6
25353: PUSH
25354: LD_STRING 
25356: ST_TO_ADDR
// active :=  ;
25357: LD_ADDR_VAR 0 7
25361: PUSH
25362: LD_STRING 
25364: ST_TO_ADDR
// for i = 1 to normalCounter do
25365: LD_ADDR_VAR 0 8
25369: PUSH
25370: DOUBLE
25371: LD_INT 1
25373: DEC
25374: ST_TO_ADDR
25375: LD_EXP 53
25379: PUSH
25380: FOR_TO
25381: IFFALSE 25482
// begin tmp := 0 ;
25383: LD_ADDR_VAR 0 3
25387: PUSH
25388: LD_STRING 0
25390: ST_TO_ADDR
// if result [ 1 ] then
25391: LD_VAR 0 2
25395: PUSH
25396: LD_INT 1
25398: ARRAY
25399: IFFALSE 25464
// if result [ 1 ] [ 1 ] = i then
25401: LD_VAR 0 2
25405: PUSH
25406: LD_INT 1
25408: ARRAY
25409: PUSH
25410: LD_INT 1
25412: ARRAY
25413: PUSH
25414: LD_VAR 0 8
25418: EQUAL
25419: IFFALSE 25464
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25421: LD_ADDR_VAR 0 2
25425: PUSH
25426: LD_VAR 0 2
25430: PPUSH
25431: LD_INT 1
25433: PPUSH
25434: LD_VAR 0 2
25438: PUSH
25439: LD_INT 1
25441: ARRAY
25442: PPUSH
25443: LD_INT 1
25445: PPUSH
25446: CALL_OW 3
25450: PPUSH
25451: CALL_OW 1
25455: ST_TO_ADDR
// tmp := 1 ;
25456: LD_ADDR_VAR 0 3
25460: PUSH
25461: LD_STRING 1
25463: ST_TO_ADDR
// end ; normal := normal & tmp ;
25464: LD_ADDR_VAR 0 5
25468: PUSH
25469: LD_VAR 0 5
25473: PUSH
25474: LD_VAR 0 3
25478: STR
25479: ST_TO_ADDR
// end ;
25480: GO 25380
25482: POP
25483: POP
// for i = 1 to hardcoreCounter do
25484: LD_ADDR_VAR 0 8
25488: PUSH
25489: DOUBLE
25490: LD_INT 1
25492: DEC
25493: ST_TO_ADDR
25494: LD_EXP 54
25498: PUSH
25499: FOR_TO
25500: IFFALSE 25605
// begin tmp := 0 ;
25502: LD_ADDR_VAR 0 3
25506: PUSH
25507: LD_STRING 0
25509: ST_TO_ADDR
// if result [ 2 ] then
25510: LD_VAR 0 2
25514: PUSH
25515: LD_INT 2
25517: ARRAY
25518: IFFALSE 25587
// if result [ 2 ] [ 1 ] = 100 + i then
25520: LD_VAR 0 2
25524: PUSH
25525: LD_INT 2
25527: ARRAY
25528: PUSH
25529: LD_INT 1
25531: ARRAY
25532: PUSH
25533: LD_INT 100
25535: PUSH
25536: LD_VAR 0 8
25540: PLUS
25541: EQUAL
25542: IFFALSE 25587
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25544: LD_ADDR_VAR 0 2
25548: PUSH
25549: LD_VAR 0 2
25553: PPUSH
25554: LD_INT 2
25556: PPUSH
25557: LD_VAR 0 2
25561: PUSH
25562: LD_INT 2
25564: ARRAY
25565: PPUSH
25566: LD_INT 1
25568: PPUSH
25569: CALL_OW 3
25573: PPUSH
25574: CALL_OW 1
25578: ST_TO_ADDR
// tmp := 1 ;
25579: LD_ADDR_VAR 0 3
25583: PUSH
25584: LD_STRING 1
25586: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25587: LD_ADDR_VAR 0 6
25591: PUSH
25592: LD_VAR 0 6
25596: PUSH
25597: LD_VAR 0 3
25601: STR
25602: ST_TO_ADDR
// end ;
25603: GO 25499
25605: POP
25606: POP
// if isGameLoad then
25607: LD_VAR 0 1
25611: IFFALSE 26086
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25613: LD_ADDR_VAR 0 4
25617: PUSH
25618: LD_EXP 57
25622: PUSH
25623: LD_EXP 56
25627: PUSH
25628: LD_EXP 58
25632: PUSH
25633: LD_EXP 55
25637: PUSH
25638: LD_EXP 59
25642: PUSH
25643: LD_EXP 60
25647: PUSH
25648: LD_EXP 61
25652: PUSH
25653: LD_EXP 62
25657: PUSH
25658: LD_EXP 63
25662: PUSH
25663: LD_EXP 64
25667: PUSH
25668: LD_EXP 65
25672: PUSH
25673: LD_EXP 66
25677: PUSH
25678: LD_EXP 67
25682: PUSH
25683: LD_EXP 68
25687: PUSH
25688: LD_EXP 76
25692: PUSH
25693: LD_EXP 77
25697: PUSH
25698: LD_EXP 78
25702: PUSH
25703: LD_EXP 79
25707: PUSH
25708: LD_EXP 81
25712: PUSH
25713: LD_EXP 82
25717: PUSH
25718: LD_EXP 83
25722: PUSH
25723: LD_EXP 86
25727: PUSH
25728: LD_EXP 88
25732: PUSH
25733: LD_EXP 89
25737: PUSH
25738: LD_EXP 90
25742: PUSH
25743: LD_EXP 92
25747: PUSH
25748: LD_EXP 93
25752: PUSH
25753: LD_EXP 96
25757: PUSH
25758: LD_EXP 97
25762: PUSH
25763: LD_EXP 98
25767: PUSH
25768: LD_EXP 99
25772: PUSH
25773: LD_EXP 100
25777: PUSH
25778: LD_EXP 101
25782: PUSH
25783: LD_EXP 102
25787: PUSH
25788: LD_EXP 103
25792: PUSH
25793: LD_EXP 104
25797: PUSH
25798: LD_EXP 69
25802: PUSH
25803: LD_EXP 70
25807: PUSH
25808: LD_EXP 73
25812: PUSH
25813: LD_EXP 74
25817: PUSH
25818: LD_EXP 75
25822: PUSH
25823: LD_EXP 71
25827: PUSH
25828: LD_EXP 72
25832: PUSH
25833: LD_EXP 80
25837: PUSH
25838: LD_EXP 84
25842: PUSH
25843: LD_EXP 85
25847: PUSH
25848: LD_EXP 87
25852: PUSH
25853: LD_EXP 91
25857: PUSH
25858: LD_EXP 94
25862: PUSH
25863: LD_EXP 95
25867: PUSH
25868: LD_EXP 105
25872: PUSH
25873: LD_EXP 106
25877: PUSH
25878: LD_EXP 107
25882: PUSH
25883: LD_EXP 108
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: ST_TO_ADDR
// tmp :=  ;
25944: LD_ADDR_VAR 0 3
25948: PUSH
25949: LD_STRING 
25951: ST_TO_ADDR
// for i = 1 to normalCounter do
25952: LD_ADDR_VAR 0 8
25956: PUSH
25957: DOUBLE
25958: LD_INT 1
25960: DEC
25961: ST_TO_ADDR
25962: LD_EXP 53
25966: PUSH
25967: FOR_TO
25968: IFFALSE 26004
// begin if flags [ i ] then
25970: LD_VAR 0 4
25974: PUSH
25975: LD_VAR 0 8
25979: ARRAY
25980: IFFALSE 26002
// tmp := tmp & i & ; ;
25982: LD_ADDR_VAR 0 3
25986: PUSH
25987: LD_VAR 0 3
25991: PUSH
25992: LD_VAR 0 8
25996: STR
25997: PUSH
25998: LD_STRING ;
26000: STR
26001: ST_TO_ADDR
// end ;
26002: GO 25967
26004: POP
26005: POP
// for i = 1 to hardcoreCounter do
26006: LD_ADDR_VAR 0 8
26010: PUSH
26011: DOUBLE
26012: LD_INT 1
26014: DEC
26015: ST_TO_ADDR
26016: LD_EXP 54
26020: PUSH
26021: FOR_TO
26022: IFFALSE 26068
// begin if flags [ normalCounter + i ] then
26024: LD_VAR 0 4
26028: PUSH
26029: LD_EXP 53
26033: PUSH
26034: LD_VAR 0 8
26038: PLUS
26039: ARRAY
26040: IFFALSE 26066
// tmp := tmp & ( 100 + i ) & ; ;
26042: LD_ADDR_VAR 0 3
26046: PUSH
26047: LD_VAR 0 3
26051: PUSH
26052: LD_INT 100
26054: PUSH
26055: LD_VAR 0 8
26059: PLUS
26060: STR
26061: PUSH
26062: LD_STRING ;
26064: STR
26065: ST_TO_ADDR
// end ;
26066: GO 26021
26068: POP
26069: POP
// if tmp then
26070: LD_VAR 0 3
26074: IFFALSE 26086
// active := tmp ;
26076: LD_ADDR_VAR 0 7
26080: PUSH
26081: LD_VAR 0 3
26085: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26086: LD_STRING getStreamItemsFromMission("
26088: PUSH
26089: LD_VAR 0 5
26093: STR
26094: PUSH
26095: LD_STRING ","
26097: STR
26098: PUSH
26099: LD_VAR 0 6
26103: STR
26104: PUSH
26105: LD_STRING ","
26107: STR
26108: PUSH
26109: LD_VAR 0 7
26113: STR
26114: PUSH
26115: LD_STRING ")
26117: STR
26118: PPUSH
26119: CALL_OW 559
// end else
26123: GO 26132
// ToLua ( getStreamItemsFromMission("","","") ) ;
26125: LD_STRING getStreamItemsFromMission("","","")
26127: PPUSH
26128: CALL_OW 559
// end ;
26132: LD_VAR 0 2
26136: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26137: LD_EXP 52
26141: PUSH
26142: LD_EXP 57
26146: AND
26147: IFFALSE 26271
26149: GO 26151
26151: DISABLE
26152: LD_INT 0
26154: PPUSH
26155: PPUSH
// begin enable ;
26156: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26157: LD_ADDR_VAR 0 2
26161: PUSH
26162: LD_INT 22
26164: PUSH
26165: LD_OWVAR 2
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 2
26176: PUSH
26177: LD_INT 34
26179: PUSH
26180: LD_INT 7
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 34
26189: PUSH
26190: LD_INT 45
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 34
26199: PUSH
26200: LD_INT 28
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 34
26209: PUSH
26210: LD_INT 47
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PPUSH
26228: CALL_OW 69
26232: ST_TO_ADDR
// if not tmp then
26233: LD_VAR 0 2
26237: NOT
26238: IFFALSE 26242
// exit ;
26240: GO 26271
// for i in tmp do
26242: LD_ADDR_VAR 0 1
26246: PUSH
26247: LD_VAR 0 2
26251: PUSH
26252: FOR_IN
26253: IFFALSE 26269
// begin SetLives ( i , 0 ) ;
26255: LD_VAR 0 1
26259: PPUSH
26260: LD_INT 0
26262: PPUSH
26263: CALL_OW 234
// end ;
26267: GO 26252
26269: POP
26270: POP
// end ;
26271: PPOPN 2
26273: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26274: LD_EXP 52
26278: PUSH
26279: LD_EXP 58
26283: AND
26284: IFFALSE 26368
26286: GO 26288
26288: DISABLE
26289: LD_INT 0
26291: PPUSH
26292: PPUSH
// begin enable ;
26293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26294: LD_ADDR_VAR 0 2
26298: PUSH
26299: LD_INT 22
26301: PUSH
26302: LD_OWVAR 2
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 32
26313: PUSH
26314: LD_INT 3
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PPUSH
26325: CALL_OW 69
26329: ST_TO_ADDR
// if not tmp then
26330: LD_VAR 0 2
26334: NOT
26335: IFFALSE 26339
// exit ;
26337: GO 26368
// for i in tmp do
26339: LD_ADDR_VAR 0 1
26343: PUSH
26344: LD_VAR 0 2
26348: PUSH
26349: FOR_IN
26350: IFFALSE 26366
// begin SetLives ( i , 0 ) ;
26352: LD_VAR 0 1
26356: PPUSH
26357: LD_INT 0
26359: PPUSH
26360: CALL_OW 234
// end ;
26364: GO 26349
26366: POP
26367: POP
// end ;
26368: PPOPN 2
26370: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26371: LD_EXP 52
26375: PUSH
26376: LD_EXP 55
26380: AND
26381: IFFALSE 26474
26383: GO 26385
26385: DISABLE
26386: LD_INT 0
26388: PPUSH
// begin enable ;
26389: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26390: LD_ADDR_VAR 0 1
26394: PUSH
26395: LD_INT 22
26397: PUSH
26398: LD_OWVAR 2
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: LD_INT 25
26412: PUSH
26413: LD_INT 5
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 25
26422: PUSH
26423: LD_INT 9
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 25
26432: PUSH
26433: LD_INT 8
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PPUSH
26450: CALL_OW 69
26454: PUSH
26455: FOR_IN
26456: IFFALSE 26472
// begin SetClass ( i , 1 ) ;
26458: LD_VAR 0 1
26462: PPUSH
26463: LD_INT 1
26465: PPUSH
26466: CALL_OW 336
// end ;
26470: GO 26455
26472: POP
26473: POP
// end ;
26474: PPOPN 1
26476: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26477: LD_EXP 52
26481: PUSH
26482: LD_EXP 56
26486: AND
26487: PUSH
26488: LD_OWVAR 65
26492: PUSH
26493: LD_INT 7
26495: LESS
26496: AND
26497: IFFALSE 26511
26499: GO 26501
26501: DISABLE
// begin enable ;
26502: ENABLE
// game_speed := 7 ;
26503: LD_ADDR_OWVAR 65
26507: PUSH
26508: LD_INT 7
26510: ST_TO_ADDR
// end ;
26511: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26512: LD_EXP 52
26516: PUSH
26517: LD_EXP 59
26521: AND
26522: IFFALSE 26724
26524: GO 26526
26526: DISABLE
26527: LD_INT 0
26529: PPUSH
26530: PPUSH
26531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26532: LD_ADDR_VAR 0 3
26536: PUSH
26537: LD_INT 81
26539: PUSH
26540: LD_OWVAR 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 21
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PPUSH
26563: CALL_OW 69
26567: ST_TO_ADDR
// if not tmp then
26568: LD_VAR 0 3
26572: NOT
26573: IFFALSE 26577
// exit ;
26575: GO 26724
// if tmp > 5 then
26577: LD_VAR 0 3
26581: PUSH
26582: LD_INT 5
26584: GREATER
26585: IFFALSE 26597
// k := 5 else
26587: LD_ADDR_VAR 0 2
26591: PUSH
26592: LD_INT 5
26594: ST_TO_ADDR
26595: GO 26607
// k := tmp ;
26597: LD_ADDR_VAR 0 2
26601: PUSH
26602: LD_VAR 0 3
26606: ST_TO_ADDR
// for i := 1 to k do
26607: LD_ADDR_VAR 0 1
26611: PUSH
26612: DOUBLE
26613: LD_INT 1
26615: DEC
26616: ST_TO_ADDR
26617: LD_VAR 0 2
26621: PUSH
26622: FOR_TO
26623: IFFALSE 26722
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26625: LD_VAR 0 3
26629: PUSH
26630: LD_VAR 0 1
26634: ARRAY
26635: PPUSH
26636: LD_VAR 0 1
26640: PUSH
26641: LD_INT 4
26643: MOD
26644: PUSH
26645: LD_INT 1
26647: PLUS
26648: PPUSH
26649: CALL_OW 259
26653: PUSH
26654: LD_INT 10
26656: LESS
26657: IFFALSE 26720
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26659: LD_VAR 0 3
26663: PUSH
26664: LD_VAR 0 1
26668: ARRAY
26669: PPUSH
26670: LD_VAR 0 1
26674: PUSH
26675: LD_INT 4
26677: MOD
26678: PUSH
26679: LD_INT 1
26681: PLUS
26682: PPUSH
26683: LD_VAR 0 3
26687: PUSH
26688: LD_VAR 0 1
26692: ARRAY
26693: PPUSH
26694: LD_VAR 0 1
26698: PUSH
26699: LD_INT 4
26701: MOD
26702: PUSH
26703: LD_INT 1
26705: PLUS
26706: PPUSH
26707: CALL_OW 259
26711: PUSH
26712: LD_INT 1
26714: PLUS
26715: PPUSH
26716: CALL_OW 237
26720: GO 26622
26722: POP
26723: POP
// end ;
26724: PPOPN 3
26726: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26727: LD_EXP 52
26731: PUSH
26732: LD_EXP 60
26736: AND
26737: IFFALSE 26757
26739: GO 26741
26741: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26742: LD_INT 4
26744: PPUSH
26745: LD_OWVAR 2
26749: PPUSH
26750: LD_INT 0
26752: PPUSH
26753: CALL_OW 324
26757: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26758: LD_EXP 52
26762: PUSH
26763: LD_EXP 89
26767: AND
26768: IFFALSE 26788
26770: GO 26772
26772: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26773: LD_INT 19
26775: PPUSH
26776: LD_OWVAR 2
26780: PPUSH
26781: LD_INT 0
26783: PPUSH
26784: CALL_OW 324
26788: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26789: LD_EXP 52
26793: PUSH
26794: LD_EXP 61
26798: AND
26799: IFFALSE 26901
26801: GO 26803
26803: DISABLE
26804: LD_INT 0
26806: PPUSH
26807: PPUSH
// begin enable ;
26808: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26809: LD_ADDR_VAR 0 2
26813: PUSH
26814: LD_INT 22
26816: PUSH
26817: LD_OWVAR 2
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: LD_INT 34
26831: PUSH
26832: LD_INT 11
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 34
26841: PUSH
26842: LD_INT 30
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PPUSH
26858: CALL_OW 69
26862: ST_TO_ADDR
// if not tmp then
26863: LD_VAR 0 2
26867: NOT
26868: IFFALSE 26872
// exit ;
26870: GO 26901
// for i in tmp do
26872: LD_ADDR_VAR 0 1
26876: PUSH
26877: LD_VAR 0 2
26881: PUSH
26882: FOR_IN
26883: IFFALSE 26899
// begin SetLives ( i , 0 ) ;
26885: LD_VAR 0 1
26889: PPUSH
26890: LD_INT 0
26892: PPUSH
26893: CALL_OW 234
// end ;
26897: GO 26882
26899: POP
26900: POP
// end ;
26901: PPOPN 2
26903: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26904: LD_EXP 52
26908: PUSH
26909: LD_EXP 62
26913: AND
26914: IFFALSE 26934
26916: GO 26918
26918: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26919: LD_INT 32
26921: PPUSH
26922: LD_OWVAR 2
26926: PPUSH
26927: LD_INT 0
26929: PPUSH
26930: CALL_OW 324
26934: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26935: LD_EXP 52
26939: PUSH
26940: LD_EXP 63
26944: AND
26945: IFFALSE 27126
26947: GO 26949
26949: DISABLE
26950: LD_INT 0
26952: PPUSH
26953: PPUSH
26954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26955: LD_ADDR_VAR 0 2
26959: PUSH
26960: LD_INT 22
26962: PUSH
26963: LD_OWVAR 2
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 33
26974: PUSH
26975: LD_INT 3
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PPUSH
26986: CALL_OW 69
26990: ST_TO_ADDR
// if not tmp then
26991: LD_VAR 0 2
26995: NOT
26996: IFFALSE 27000
// exit ;
26998: GO 27126
// side := 0 ;
27000: LD_ADDR_VAR 0 3
27004: PUSH
27005: LD_INT 0
27007: ST_TO_ADDR
// for i := 1 to 8 do
27008: LD_ADDR_VAR 0 1
27012: PUSH
27013: DOUBLE
27014: LD_INT 1
27016: DEC
27017: ST_TO_ADDR
27018: LD_INT 8
27020: PUSH
27021: FOR_TO
27022: IFFALSE 27070
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27024: LD_OWVAR 2
27028: PUSH
27029: LD_VAR 0 1
27033: NONEQUAL
27034: PUSH
27035: LD_OWVAR 2
27039: PPUSH
27040: LD_VAR 0 1
27044: PPUSH
27045: CALL_OW 81
27049: PUSH
27050: LD_INT 2
27052: EQUAL
27053: AND
27054: IFFALSE 27068
// begin side := i ;
27056: LD_ADDR_VAR 0 3
27060: PUSH
27061: LD_VAR 0 1
27065: ST_TO_ADDR
// break ;
27066: GO 27070
// end ;
27068: GO 27021
27070: POP
27071: POP
// if not side then
27072: LD_VAR 0 3
27076: NOT
27077: IFFALSE 27081
// exit ;
27079: GO 27126
// for i := 1 to tmp do
27081: LD_ADDR_VAR 0 1
27085: PUSH
27086: DOUBLE
27087: LD_INT 1
27089: DEC
27090: ST_TO_ADDR
27091: LD_VAR 0 2
27095: PUSH
27096: FOR_TO
27097: IFFALSE 27124
// if Prob ( 60 ) then
27099: LD_INT 60
27101: PPUSH
27102: CALL_OW 13
27106: IFFALSE 27122
// SetSide ( i , side ) ;
27108: LD_VAR 0 1
27112: PPUSH
27113: LD_VAR 0 3
27117: PPUSH
27118: CALL_OW 235
27122: GO 27096
27124: POP
27125: POP
// end ;
27126: PPOPN 3
27128: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27129: LD_EXP 52
27133: PUSH
27134: LD_EXP 65
27138: AND
27139: IFFALSE 27258
27141: GO 27143
27143: DISABLE
27144: LD_INT 0
27146: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27147: LD_ADDR_VAR 0 1
27151: PUSH
27152: LD_INT 22
27154: PUSH
27155: LD_OWVAR 2
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 21
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 3
27176: PUSH
27177: LD_INT 23
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: LIST
27195: PPUSH
27196: CALL_OW 69
27200: PUSH
27201: FOR_IN
27202: IFFALSE 27256
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 257
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: LD_INT 2
27219: PUSH
27220: LD_INT 3
27222: PUSH
27223: LD_INT 4
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: IN
27232: IFFALSE 27254
// SetClass ( un , rand ( 1 , 4 ) ) ;
27234: LD_VAR 0 1
27238: PPUSH
27239: LD_INT 1
27241: PPUSH
27242: LD_INT 4
27244: PPUSH
27245: CALL_OW 12
27249: PPUSH
27250: CALL_OW 336
27254: GO 27201
27256: POP
27257: POP
// end ;
27258: PPOPN 1
27260: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27261: LD_EXP 52
27265: PUSH
27266: LD_EXP 64
27270: AND
27271: IFFALSE 27350
27273: GO 27275
27275: DISABLE
27276: LD_INT 0
27278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27279: LD_ADDR_VAR 0 1
27283: PUSH
27284: LD_INT 22
27286: PUSH
27287: LD_OWVAR 2
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 21
27298: PUSH
27299: LD_INT 3
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PPUSH
27310: CALL_OW 69
27314: ST_TO_ADDR
// if not tmp then
27315: LD_VAR 0 1
27319: NOT
27320: IFFALSE 27324
// exit ;
27322: GO 27350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27324: LD_VAR 0 1
27328: PUSH
27329: LD_INT 1
27331: PPUSH
27332: LD_VAR 0 1
27336: PPUSH
27337: CALL_OW 12
27341: ARRAY
27342: PPUSH
27343: LD_INT 100
27345: PPUSH
27346: CALL_OW 234
// end ;
27350: PPOPN 1
27352: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27353: LD_EXP 52
27357: PUSH
27358: LD_EXP 66
27362: AND
27363: IFFALSE 27461
27365: GO 27367
27367: DISABLE
27368: LD_INT 0
27370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27371: LD_ADDR_VAR 0 1
27375: PUSH
27376: LD_INT 22
27378: PUSH
27379: LD_OWVAR 2
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 21
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PPUSH
27402: CALL_OW 69
27406: ST_TO_ADDR
// if not tmp then
27407: LD_VAR 0 1
27411: NOT
27412: IFFALSE 27416
// exit ;
27414: GO 27461
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27416: LD_VAR 0 1
27420: PUSH
27421: LD_INT 1
27423: PPUSH
27424: LD_VAR 0 1
27428: PPUSH
27429: CALL_OW 12
27433: ARRAY
27434: PPUSH
27435: LD_INT 1
27437: PPUSH
27438: LD_INT 4
27440: PPUSH
27441: CALL_OW 12
27445: PPUSH
27446: LD_INT 3000
27448: PPUSH
27449: LD_INT 9000
27451: PPUSH
27452: CALL_OW 12
27456: PPUSH
27457: CALL_OW 492
// end ;
27461: PPOPN 1
27463: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27464: LD_EXP 52
27468: PUSH
27469: LD_EXP 67
27473: AND
27474: IFFALSE 27494
27476: GO 27478
27478: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27479: LD_INT 1
27481: PPUSH
27482: LD_OWVAR 2
27486: PPUSH
27487: LD_INT 0
27489: PPUSH
27490: CALL_OW 324
27494: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27495: LD_EXP 52
27499: PUSH
27500: LD_EXP 68
27504: AND
27505: IFFALSE 27588
27507: GO 27509
27509: DISABLE
27510: LD_INT 0
27512: PPUSH
27513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27514: LD_ADDR_VAR 0 2
27518: PUSH
27519: LD_INT 22
27521: PUSH
27522: LD_OWVAR 2
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 21
27533: PUSH
27534: LD_INT 3
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PPUSH
27545: CALL_OW 69
27549: ST_TO_ADDR
// if not tmp then
27550: LD_VAR 0 2
27554: NOT
27555: IFFALSE 27559
// exit ;
27557: GO 27588
// for i in tmp do
27559: LD_ADDR_VAR 0 1
27563: PUSH
27564: LD_VAR 0 2
27568: PUSH
27569: FOR_IN
27570: IFFALSE 27586
// SetBLevel ( i , 10 ) ;
27572: LD_VAR 0 1
27576: PPUSH
27577: LD_INT 10
27579: PPUSH
27580: CALL_OW 241
27584: GO 27569
27586: POP
27587: POP
// end ;
27588: PPOPN 2
27590: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27591: LD_EXP 52
27595: PUSH
27596: LD_EXP 69
27600: AND
27601: IFFALSE 27712
27603: GO 27605
27605: DISABLE
27606: LD_INT 0
27608: PPUSH
27609: PPUSH
27610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27611: LD_ADDR_VAR 0 3
27615: PUSH
27616: LD_INT 22
27618: PUSH
27619: LD_OWVAR 2
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 25
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PPUSH
27642: CALL_OW 69
27646: ST_TO_ADDR
// if not tmp then
27647: LD_VAR 0 3
27651: NOT
27652: IFFALSE 27656
// exit ;
27654: GO 27712
// un := tmp [ rand ( 1 , tmp ) ] ;
27656: LD_ADDR_VAR 0 2
27660: PUSH
27661: LD_VAR 0 3
27665: PUSH
27666: LD_INT 1
27668: PPUSH
27669: LD_VAR 0 3
27673: PPUSH
27674: CALL_OW 12
27678: ARRAY
27679: ST_TO_ADDR
// if Crawls ( un ) then
27680: LD_VAR 0 2
27684: PPUSH
27685: CALL_OW 318
27689: IFFALSE 27700
// ComWalk ( un ) ;
27691: LD_VAR 0 2
27695: PPUSH
27696: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27700: LD_VAR 0 2
27704: PPUSH
27705: LD_INT 5
27707: PPUSH
27708: CALL_OW 336
// end ;
27712: PPOPN 3
27714: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27715: LD_EXP 52
27719: PUSH
27720: LD_EXP 70
27724: AND
27725: PUSH
27726: LD_OWVAR 67
27730: PUSH
27731: LD_INT 4
27733: LESS
27734: AND
27735: IFFALSE 27754
27737: GO 27739
27739: DISABLE
// begin Difficulty := Difficulty + 1 ;
27740: LD_ADDR_OWVAR 67
27744: PUSH
27745: LD_OWVAR 67
27749: PUSH
27750: LD_INT 1
27752: PLUS
27753: ST_TO_ADDR
// end ;
27754: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27755: LD_EXP 52
27759: PUSH
27760: LD_EXP 71
27764: AND
27765: IFFALSE 27868
27767: GO 27769
27769: DISABLE
27770: LD_INT 0
27772: PPUSH
// begin for i := 1 to 5 do
27773: LD_ADDR_VAR 0 1
27777: PUSH
27778: DOUBLE
27779: LD_INT 1
27781: DEC
27782: ST_TO_ADDR
27783: LD_INT 5
27785: PUSH
27786: FOR_TO
27787: IFFALSE 27866
// begin uc_nation := nation_nature ;
27789: LD_ADDR_OWVAR 21
27793: PUSH
27794: LD_INT 0
27796: ST_TO_ADDR
// uc_side := 0 ;
27797: LD_ADDR_OWVAR 20
27801: PUSH
27802: LD_INT 0
27804: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27805: LD_ADDR_OWVAR 29
27809: PUSH
27810: LD_INT 12
27812: PUSH
27813: LD_INT 12
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// hc_agressivity := 20 ;
27820: LD_ADDR_OWVAR 35
27824: PUSH
27825: LD_INT 20
27827: ST_TO_ADDR
// hc_class := class_tiger ;
27828: LD_ADDR_OWVAR 28
27832: PUSH
27833: LD_INT 14
27835: ST_TO_ADDR
// hc_gallery :=  ;
27836: LD_ADDR_OWVAR 33
27840: PUSH
27841: LD_STRING 
27843: ST_TO_ADDR
// hc_name :=  ;
27844: LD_ADDR_OWVAR 26
27848: PUSH
27849: LD_STRING 
27851: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27852: CALL_OW 44
27856: PPUSH
27857: LD_INT 0
27859: PPUSH
27860: CALL_OW 51
// end ;
27864: GO 27786
27866: POP
27867: POP
// end ;
27868: PPOPN 1
27870: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27871: LD_EXP 52
27875: PUSH
27876: LD_EXP 72
27880: AND
27881: IFFALSE 27890
27883: GO 27885
27885: DISABLE
// StreamSibBomb ;
27886: CALL 27891 0 0
27890: END
// export function StreamSibBomb ; var i , x , y ; begin
27891: LD_INT 0
27893: PPUSH
27894: PPUSH
27895: PPUSH
27896: PPUSH
// result := false ;
27897: LD_ADDR_VAR 0 1
27901: PUSH
27902: LD_INT 0
27904: ST_TO_ADDR
// for i := 1 to 16 do
27905: LD_ADDR_VAR 0 2
27909: PUSH
27910: DOUBLE
27911: LD_INT 1
27913: DEC
27914: ST_TO_ADDR
27915: LD_INT 16
27917: PUSH
27918: FOR_TO
27919: IFFALSE 28118
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27921: LD_ADDR_VAR 0 3
27925: PUSH
27926: LD_INT 10
27928: PUSH
27929: LD_INT 20
27931: PUSH
27932: LD_INT 30
27934: PUSH
27935: LD_INT 40
27937: PUSH
27938: LD_INT 50
27940: PUSH
27941: LD_INT 60
27943: PUSH
27944: LD_INT 70
27946: PUSH
27947: LD_INT 80
27949: PUSH
27950: LD_INT 90
27952: PUSH
27953: LD_INT 100
27955: PUSH
27956: LD_INT 110
27958: PUSH
27959: LD_INT 120
27961: PUSH
27962: LD_INT 130
27964: PUSH
27965: LD_INT 140
27967: PUSH
27968: LD_INT 150
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: PPUSH
27991: LD_INT 15
27993: PPUSH
27994: CALL_OW 12
27998: ARRAY
27999: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28000: LD_ADDR_VAR 0 4
28004: PUSH
28005: LD_INT 10
28007: PUSH
28008: LD_INT 20
28010: PUSH
28011: LD_INT 30
28013: PUSH
28014: LD_INT 40
28016: PUSH
28017: LD_INT 50
28019: PUSH
28020: LD_INT 60
28022: PUSH
28023: LD_INT 70
28025: PUSH
28026: LD_INT 80
28028: PUSH
28029: LD_INT 90
28031: PUSH
28032: LD_INT 100
28034: PUSH
28035: LD_INT 110
28037: PUSH
28038: LD_INT 120
28040: PUSH
28041: LD_INT 130
28043: PUSH
28044: LD_INT 140
28046: PUSH
28047: LD_INT 150
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: PPUSH
28070: LD_INT 15
28072: PPUSH
28073: CALL_OW 12
28077: ARRAY
28078: ST_TO_ADDR
// if ValidHex ( x , y ) then
28079: LD_VAR 0 3
28083: PPUSH
28084: LD_VAR 0 4
28088: PPUSH
28089: CALL_OW 488
28093: IFFALSE 28116
// begin result := [ x , y ] ;
28095: LD_ADDR_VAR 0 1
28099: PUSH
28100: LD_VAR 0 3
28104: PUSH
28105: LD_VAR 0 4
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: ST_TO_ADDR
// break ;
28114: GO 28118
// end ; end ;
28116: GO 27918
28118: POP
28119: POP
// if result then
28120: LD_VAR 0 1
28124: IFFALSE 28184
// begin ToLua ( playSibBomb() ) ;
28126: LD_STRING playSibBomb()
28128: PPUSH
28129: CALL_OW 559
// wait ( 0 0$14 ) ;
28133: LD_INT 490
28135: PPUSH
28136: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28140: LD_VAR 0 1
28144: PUSH
28145: LD_INT 1
28147: ARRAY
28148: PPUSH
28149: LD_VAR 0 1
28153: PUSH
28154: LD_INT 2
28156: ARRAY
28157: PPUSH
28158: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28162: LD_VAR 0 1
28166: PUSH
28167: LD_INT 1
28169: ARRAY
28170: PPUSH
28171: LD_VAR 0 1
28175: PUSH
28176: LD_INT 2
28178: ARRAY
28179: PPUSH
28180: CALL_OW 429
// end ; end ;
28184: LD_VAR 0 1
28188: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28189: LD_EXP 52
28193: PUSH
28194: LD_EXP 74
28198: AND
28199: IFFALSE 28211
28201: GO 28203
28203: DISABLE
// YouLost (  ) ;
28204: LD_STRING 
28206: PPUSH
28207: CALL_OW 104
28211: END
// every 0 0$1 trigger StreamModeActive and sFog do
28212: LD_EXP 52
28216: PUSH
28217: LD_EXP 73
28221: AND
28222: IFFALSE 28236
28224: GO 28226
28226: DISABLE
// FogOff ( your_side ) ;
28227: LD_OWVAR 2
28231: PPUSH
28232: CALL_OW 344
28236: END
// every 0 0$1 trigger StreamModeActive and sSun do
28237: LD_EXP 52
28241: PUSH
28242: LD_EXP 75
28246: AND
28247: IFFALSE 28275
28249: GO 28251
28251: DISABLE
// begin solar_recharge_percent := 0 ;
28252: LD_ADDR_OWVAR 79
28256: PUSH
28257: LD_INT 0
28259: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28260: LD_INT 10500
28262: PPUSH
28263: CALL_OW 67
// solar_recharge_percent := 100 ;
28267: LD_ADDR_OWVAR 79
28271: PUSH
28272: LD_INT 100
28274: ST_TO_ADDR
// end ;
28275: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28276: LD_EXP 52
28280: PUSH
28281: LD_EXP 76
28285: AND
28286: IFFALSE 28525
28288: GO 28290
28290: DISABLE
28291: LD_INT 0
28293: PPUSH
28294: PPUSH
28295: PPUSH
// begin tmp := [ ] ;
28296: LD_ADDR_VAR 0 3
28300: PUSH
28301: EMPTY
28302: ST_TO_ADDR
// for i := 1 to 6 do
28303: LD_ADDR_VAR 0 1
28307: PUSH
28308: DOUBLE
28309: LD_INT 1
28311: DEC
28312: ST_TO_ADDR
28313: LD_INT 6
28315: PUSH
28316: FOR_TO
28317: IFFALSE 28422
// begin uc_nation := nation_nature ;
28319: LD_ADDR_OWVAR 21
28323: PUSH
28324: LD_INT 0
28326: ST_TO_ADDR
// uc_side := 0 ;
28327: LD_ADDR_OWVAR 20
28331: PUSH
28332: LD_INT 0
28334: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28335: LD_ADDR_OWVAR 29
28339: PUSH
28340: LD_INT 12
28342: PUSH
28343: LD_INT 12
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: ST_TO_ADDR
// hc_agressivity := 20 ;
28350: LD_ADDR_OWVAR 35
28354: PUSH
28355: LD_INT 20
28357: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28358: LD_ADDR_OWVAR 28
28362: PUSH
28363: LD_INT 17
28365: ST_TO_ADDR
// hc_gallery :=  ;
28366: LD_ADDR_OWVAR 33
28370: PUSH
28371: LD_STRING 
28373: ST_TO_ADDR
// hc_name :=  ;
28374: LD_ADDR_OWVAR 26
28378: PUSH
28379: LD_STRING 
28381: ST_TO_ADDR
// un := CreateHuman ;
28382: LD_ADDR_VAR 0 2
28386: PUSH
28387: CALL_OW 44
28391: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28392: LD_VAR 0 2
28396: PPUSH
28397: LD_INT 1
28399: PPUSH
28400: CALL_OW 51
// tmp := tmp ^ un ;
28404: LD_ADDR_VAR 0 3
28408: PUSH
28409: LD_VAR 0 3
28413: PUSH
28414: LD_VAR 0 2
28418: ADD
28419: ST_TO_ADDR
// end ;
28420: GO 28316
28422: POP
28423: POP
// repeat wait ( 0 0$1 ) ;
28424: LD_INT 35
28426: PPUSH
28427: CALL_OW 67
// for un in tmp do
28431: LD_ADDR_VAR 0 2
28435: PUSH
28436: LD_VAR 0 3
28440: PUSH
28441: FOR_IN
28442: IFFALSE 28516
// begin if IsDead ( un ) then
28444: LD_VAR 0 2
28448: PPUSH
28449: CALL_OW 301
28453: IFFALSE 28473
// begin tmp := tmp diff un ;
28455: LD_ADDR_VAR 0 3
28459: PUSH
28460: LD_VAR 0 3
28464: PUSH
28465: LD_VAR 0 2
28469: DIFF
28470: ST_TO_ADDR
// continue ;
28471: GO 28441
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28473: LD_VAR 0 2
28477: PPUSH
28478: LD_INT 3
28480: PUSH
28481: LD_INT 22
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PPUSH
28495: CALL_OW 69
28499: PPUSH
28500: LD_VAR 0 2
28504: PPUSH
28505: CALL_OW 74
28509: PPUSH
28510: CALL_OW 115
// end ;
28514: GO 28441
28516: POP
28517: POP
// until not tmp ;
28518: LD_VAR 0 3
28522: NOT
28523: IFFALSE 28424
// end ;
28525: PPOPN 3
28527: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28528: LD_EXP 52
28532: PUSH
28533: LD_EXP 77
28537: AND
28538: IFFALSE 28592
28540: GO 28542
28542: DISABLE
// begin ToLua ( displayTroll(); ) ;
28543: LD_STRING displayTroll();
28545: PPUSH
28546: CALL_OW 559
// wait ( 3 3$00 ) ;
28550: LD_INT 6300
28552: PPUSH
28553: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28557: LD_STRING hideTroll();
28559: PPUSH
28560: CALL_OW 559
// wait ( 1 1$00 ) ;
28564: LD_INT 2100
28566: PPUSH
28567: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28571: LD_STRING displayTroll();
28573: PPUSH
28574: CALL_OW 559
// wait ( 1 1$00 ) ;
28578: LD_INT 2100
28580: PPUSH
28581: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28585: LD_STRING hideTroll();
28587: PPUSH
28588: CALL_OW 559
// end ;
28592: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28593: LD_EXP 52
28597: PUSH
28598: LD_EXP 78
28602: AND
28603: IFFALSE 28666
28605: GO 28607
28607: DISABLE
28608: LD_INT 0
28610: PPUSH
// begin p := 0 ;
28611: LD_ADDR_VAR 0 1
28615: PUSH
28616: LD_INT 0
28618: ST_TO_ADDR
// repeat game_speed := 1 ;
28619: LD_ADDR_OWVAR 65
28623: PUSH
28624: LD_INT 1
28626: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28627: LD_INT 35
28629: PPUSH
28630: CALL_OW 67
// p := p + 1 ;
28634: LD_ADDR_VAR 0 1
28638: PUSH
28639: LD_VAR 0 1
28643: PUSH
28644: LD_INT 1
28646: PLUS
28647: ST_TO_ADDR
// until p >= 60 ;
28648: LD_VAR 0 1
28652: PUSH
28653: LD_INT 60
28655: GREATEREQUAL
28656: IFFALSE 28619
// game_speed := 4 ;
28658: LD_ADDR_OWVAR 65
28662: PUSH
28663: LD_INT 4
28665: ST_TO_ADDR
// end ;
28666: PPOPN 1
28668: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28669: LD_EXP 52
28673: PUSH
28674: LD_EXP 79
28678: AND
28679: IFFALSE 28825
28681: GO 28683
28683: DISABLE
28684: LD_INT 0
28686: PPUSH
28687: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28688: LD_ADDR_VAR 0 1
28692: PUSH
28693: LD_INT 22
28695: PUSH
28696: LD_OWVAR 2
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: LD_INT 30
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 30
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PPUSH
28737: CALL_OW 69
28741: ST_TO_ADDR
// if not depot then
28742: LD_VAR 0 1
28746: NOT
28747: IFFALSE 28751
// exit ;
28749: GO 28825
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28751: LD_ADDR_VAR 0 2
28755: PUSH
28756: LD_VAR 0 1
28760: PUSH
28761: LD_INT 1
28763: PPUSH
28764: LD_VAR 0 1
28768: PPUSH
28769: CALL_OW 12
28773: ARRAY
28774: PPUSH
28775: CALL_OW 274
28779: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28780: LD_VAR 0 2
28784: PPUSH
28785: LD_INT 1
28787: PPUSH
28788: LD_INT 0
28790: PPUSH
28791: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28795: LD_VAR 0 2
28799: PPUSH
28800: LD_INT 2
28802: PPUSH
28803: LD_INT 0
28805: PPUSH
28806: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28810: LD_VAR 0 2
28814: PPUSH
28815: LD_INT 3
28817: PPUSH
28818: LD_INT 0
28820: PPUSH
28821: CALL_OW 277
// end ;
28825: PPOPN 2
28827: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28828: LD_EXP 52
28832: PUSH
28833: LD_EXP 80
28837: AND
28838: IFFALSE 28935
28840: GO 28842
28842: DISABLE
28843: LD_INT 0
28845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28846: LD_ADDR_VAR 0 1
28850: PUSH
28851: LD_INT 22
28853: PUSH
28854: LD_OWVAR 2
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 21
28865: PUSH
28866: LD_INT 1
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 3
28875: PUSH
28876: LD_INT 23
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: PPUSH
28895: CALL_OW 69
28899: ST_TO_ADDR
// if not tmp then
28900: LD_VAR 0 1
28904: NOT
28905: IFFALSE 28909
// exit ;
28907: GO 28935
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28909: LD_VAR 0 1
28913: PUSH
28914: LD_INT 1
28916: PPUSH
28917: LD_VAR 0 1
28921: PPUSH
28922: CALL_OW 12
28926: ARRAY
28927: PPUSH
28928: LD_INT 200
28930: PPUSH
28931: CALL_OW 234
// end ;
28935: PPOPN 1
28937: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28938: LD_EXP 52
28942: PUSH
28943: LD_EXP 81
28947: AND
28948: IFFALSE 29027
28950: GO 28952
28952: DISABLE
28953: LD_INT 0
28955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28956: LD_ADDR_VAR 0 1
28960: PUSH
28961: LD_INT 22
28963: PUSH
28964: LD_OWVAR 2
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 21
28975: PUSH
28976: LD_INT 2
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PPUSH
28987: CALL_OW 69
28991: ST_TO_ADDR
// if not tmp then
28992: LD_VAR 0 1
28996: NOT
28997: IFFALSE 29001
// exit ;
28999: GO 29027
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29001: LD_VAR 0 1
29005: PUSH
29006: LD_INT 1
29008: PPUSH
29009: LD_VAR 0 1
29013: PPUSH
29014: CALL_OW 12
29018: ARRAY
29019: PPUSH
29020: LD_INT 60
29022: PPUSH
29023: CALL_OW 234
// end ;
29027: PPOPN 1
29029: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29030: LD_EXP 52
29034: PUSH
29035: LD_EXP 82
29039: AND
29040: IFFALSE 29139
29042: GO 29044
29044: DISABLE
29045: LD_INT 0
29047: PPUSH
29048: PPUSH
// begin enable ;
29049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29050: LD_ADDR_VAR 0 1
29054: PUSH
29055: LD_INT 22
29057: PUSH
29058: LD_OWVAR 2
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 61
29069: PUSH
29070: EMPTY
29071: LIST
29072: PUSH
29073: LD_INT 33
29075: PUSH
29076: LD_INT 2
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: PPUSH
29088: CALL_OW 69
29092: ST_TO_ADDR
// if not tmp then
29093: LD_VAR 0 1
29097: NOT
29098: IFFALSE 29102
// exit ;
29100: GO 29139
// for i in tmp do
29102: LD_ADDR_VAR 0 2
29106: PUSH
29107: LD_VAR 0 1
29111: PUSH
29112: FOR_IN
29113: IFFALSE 29137
// if IsControledBy ( i ) then
29115: LD_VAR 0 2
29119: PPUSH
29120: CALL_OW 312
29124: IFFALSE 29135
// ComUnlink ( i ) ;
29126: LD_VAR 0 2
29130: PPUSH
29131: CALL_OW 136
29135: GO 29112
29137: POP
29138: POP
// end ;
29139: PPOPN 2
29141: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29142: LD_EXP 52
29146: PUSH
29147: LD_EXP 83
29151: AND
29152: IFFALSE 29292
29154: GO 29156
29156: DISABLE
29157: LD_INT 0
29159: PPUSH
29160: PPUSH
// begin ToLua ( displayPowell(); ) ;
29161: LD_STRING displayPowell();
29163: PPUSH
29164: CALL_OW 559
// uc_side := 0 ;
29168: LD_ADDR_OWVAR 20
29172: PUSH
29173: LD_INT 0
29175: ST_TO_ADDR
// uc_nation := 2 ;
29176: LD_ADDR_OWVAR 21
29180: PUSH
29181: LD_INT 2
29183: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29184: LD_ADDR_OWVAR 37
29188: PUSH
29189: LD_INT 14
29191: ST_TO_ADDR
// vc_engine := engine_siberite ;
29192: LD_ADDR_OWVAR 39
29196: PUSH
29197: LD_INT 3
29199: ST_TO_ADDR
// vc_control := control_apeman ;
29200: LD_ADDR_OWVAR 38
29204: PUSH
29205: LD_INT 5
29207: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29208: LD_ADDR_OWVAR 40
29212: PUSH
29213: LD_INT 29
29215: ST_TO_ADDR
// un := CreateVehicle ;
29216: LD_ADDR_VAR 0 2
29220: PUSH
29221: CALL_OW 45
29225: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29226: LD_VAR 0 2
29230: PPUSH
29231: LD_INT 1
29233: PPUSH
29234: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29238: LD_INT 35
29240: PPUSH
29241: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29245: LD_VAR 0 2
29249: PPUSH
29250: LD_INT 22
29252: PUSH
29253: LD_OWVAR 2
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PPUSH
29262: CALL_OW 69
29266: PPUSH
29267: LD_VAR 0 2
29271: PPUSH
29272: CALL_OW 74
29276: PPUSH
29277: CALL_OW 115
// until IsDead ( un ) ;
29281: LD_VAR 0 2
29285: PPUSH
29286: CALL_OW 301
29290: IFFALSE 29238
// end ;
29292: PPOPN 2
29294: END
// every 0 0$1 trigger StreamModeActive and sStu do
29295: LD_EXP 52
29299: PUSH
29300: LD_EXP 91
29304: AND
29305: IFFALSE 29321
29307: GO 29309
29309: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29310: LD_STRING displayStucuk();
29312: PPUSH
29313: CALL_OW 559
// ResetFog ;
29317: CALL_OW 335
// end ;
29321: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29322: LD_EXP 52
29326: PUSH
29327: LD_EXP 84
29331: AND
29332: IFFALSE 29473
29334: GO 29336
29336: DISABLE
29337: LD_INT 0
29339: PPUSH
29340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29341: LD_ADDR_VAR 0 2
29345: PUSH
29346: LD_INT 22
29348: PUSH
29349: LD_OWVAR 2
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 21
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PPUSH
29372: CALL_OW 69
29376: ST_TO_ADDR
// if not tmp then
29377: LD_VAR 0 2
29381: NOT
29382: IFFALSE 29386
// exit ;
29384: GO 29473
// un := tmp [ rand ( 1 , tmp ) ] ;
29386: LD_ADDR_VAR 0 1
29390: PUSH
29391: LD_VAR 0 2
29395: PUSH
29396: LD_INT 1
29398: PPUSH
29399: LD_VAR 0 2
29403: PPUSH
29404: CALL_OW 12
29408: ARRAY
29409: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29410: LD_VAR 0 1
29414: PPUSH
29415: LD_INT 0
29417: PPUSH
29418: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29422: LD_VAR 0 1
29426: PPUSH
29427: LD_OWVAR 3
29431: PUSH
29432: LD_VAR 0 1
29436: DIFF
29437: PPUSH
29438: LD_VAR 0 1
29442: PPUSH
29443: CALL_OW 74
29447: PPUSH
29448: CALL_OW 115
// wait ( 0 0$20 ) ;
29452: LD_INT 700
29454: PPUSH
29455: CALL_OW 67
// SetSide ( un , your_side ) ;
29459: LD_VAR 0 1
29463: PPUSH
29464: LD_OWVAR 2
29468: PPUSH
29469: CALL_OW 235
// end ;
29473: PPOPN 2
29475: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29476: LD_EXP 52
29480: PUSH
29481: LD_EXP 85
29485: AND
29486: IFFALSE 29592
29488: GO 29490
29490: DISABLE
29491: LD_INT 0
29493: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29494: LD_ADDR_VAR 0 1
29498: PUSH
29499: LD_INT 22
29501: PUSH
29502: LD_OWVAR 2
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 2
29513: PUSH
29514: LD_INT 30
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 30
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PPUSH
29543: CALL_OW 69
29547: ST_TO_ADDR
// if not depot then
29548: LD_VAR 0 1
29552: NOT
29553: IFFALSE 29557
// exit ;
29555: GO 29592
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29557: LD_VAR 0 1
29561: PUSH
29562: LD_INT 1
29564: ARRAY
29565: PPUSH
29566: CALL_OW 250
29570: PPUSH
29571: LD_VAR 0 1
29575: PUSH
29576: LD_INT 1
29578: ARRAY
29579: PPUSH
29580: CALL_OW 251
29584: PPUSH
29585: LD_INT 70
29587: PPUSH
29588: CALL_OW 495
// end ;
29592: PPOPN 1
29594: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29595: LD_EXP 52
29599: PUSH
29600: LD_EXP 86
29604: AND
29605: IFFALSE 29816
29607: GO 29609
29609: DISABLE
29610: LD_INT 0
29612: PPUSH
29613: PPUSH
29614: PPUSH
29615: PPUSH
29616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29617: LD_ADDR_VAR 0 5
29621: PUSH
29622: LD_INT 22
29624: PUSH
29625: LD_OWVAR 2
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 21
29636: PUSH
29637: LD_INT 1
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PPUSH
29648: CALL_OW 69
29652: ST_TO_ADDR
// if not tmp then
29653: LD_VAR 0 5
29657: NOT
29658: IFFALSE 29662
// exit ;
29660: GO 29816
// for i in tmp do
29662: LD_ADDR_VAR 0 1
29666: PUSH
29667: LD_VAR 0 5
29671: PUSH
29672: FOR_IN
29673: IFFALSE 29814
// begin d := rand ( 0 , 5 ) ;
29675: LD_ADDR_VAR 0 4
29679: PUSH
29680: LD_INT 0
29682: PPUSH
29683: LD_INT 5
29685: PPUSH
29686: CALL_OW 12
29690: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29691: LD_ADDR_VAR 0 2
29695: PUSH
29696: LD_VAR 0 1
29700: PPUSH
29701: CALL_OW 250
29705: PPUSH
29706: LD_VAR 0 4
29710: PPUSH
29711: LD_INT 3
29713: PPUSH
29714: LD_INT 12
29716: PPUSH
29717: CALL_OW 12
29721: PPUSH
29722: CALL_OW 272
29726: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29727: LD_ADDR_VAR 0 3
29731: PUSH
29732: LD_VAR 0 1
29736: PPUSH
29737: CALL_OW 251
29741: PPUSH
29742: LD_VAR 0 4
29746: PPUSH
29747: LD_INT 3
29749: PPUSH
29750: LD_INT 12
29752: PPUSH
29753: CALL_OW 12
29757: PPUSH
29758: CALL_OW 273
29762: ST_TO_ADDR
// if ValidHex ( x , y ) then
29763: LD_VAR 0 2
29767: PPUSH
29768: LD_VAR 0 3
29772: PPUSH
29773: CALL_OW 488
29777: IFFALSE 29812
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29779: LD_VAR 0 1
29783: PPUSH
29784: LD_VAR 0 2
29788: PPUSH
29789: LD_VAR 0 3
29793: PPUSH
29794: LD_INT 3
29796: PPUSH
29797: LD_INT 6
29799: PPUSH
29800: CALL_OW 12
29804: PPUSH
29805: LD_INT 1
29807: PPUSH
29808: CALL_OW 483
// end ;
29812: GO 29672
29814: POP
29815: POP
// end ;
29816: PPOPN 5
29818: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29819: LD_EXP 52
29823: PUSH
29824: LD_EXP 87
29828: AND
29829: IFFALSE 29923
29831: GO 29833
29833: DISABLE
29834: LD_INT 0
29836: PPUSH
29837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29838: LD_ADDR_VAR 0 2
29842: PUSH
29843: LD_INT 22
29845: PUSH
29846: LD_OWVAR 2
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 32
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 21
29867: PUSH
29868: LD_INT 2
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: PPUSH
29880: CALL_OW 69
29884: ST_TO_ADDR
// if not tmp then
29885: LD_VAR 0 2
29889: NOT
29890: IFFALSE 29894
// exit ;
29892: GO 29923
// for i in tmp do
29894: LD_ADDR_VAR 0 1
29898: PUSH
29899: LD_VAR 0 2
29903: PUSH
29904: FOR_IN
29905: IFFALSE 29921
// SetFuel ( i , 0 ) ;
29907: LD_VAR 0 1
29911: PPUSH
29912: LD_INT 0
29914: PPUSH
29915: CALL_OW 240
29919: GO 29904
29921: POP
29922: POP
// end ;
29923: PPOPN 2
29925: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29926: LD_EXP 52
29930: PUSH
29931: LD_EXP 88
29935: AND
29936: IFFALSE 30002
29938: GO 29940
29940: DISABLE
29941: LD_INT 0
29943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29944: LD_ADDR_VAR 0 1
29948: PUSH
29949: LD_INT 22
29951: PUSH
29952: LD_OWVAR 2
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 30
29963: PUSH
29964: LD_INT 29
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PPUSH
29975: CALL_OW 69
29979: ST_TO_ADDR
// if not tmp then
29980: LD_VAR 0 1
29984: NOT
29985: IFFALSE 29989
// exit ;
29987: GO 30002
// DestroyUnit ( tmp [ 1 ] ) ;
29989: LD_VAR 0 1
29993: PUSH
29994: LD_INT 1
29996: ARRAY
29997: PPUSH
29998: CALL_OW 65
// end ;
30002: PPOPN 1
30004: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30005: LD_EXP 52
30009: PUSH
30010: LD_EXP 90
30014: AND
30015: IFFALSE 30144
30017: GO 30019
30019: DISABLE
30020: LD_INT 0
30022: PPUSH
// begin uc_side := 0 ;
30023: LD_ADDR_OWVAR 20
30027: PUSH
30028: LD_INT 0
30030: ST_TO_ADDR
// uc_nation := nation_arabian ;
30031: LD_ADDR_OWVAR 21
30035: PUSH
30036: LD_INT 2
30038: ST_TO_ADDR
// hc_gallery :=  ;
30039: LD_ADDR_OWVAR 33
30043: PUSH
30044: LD_STRING 
30046: ST_TO_ADDR
// hc_name :=  ;
30047: LD_ADDR_OWVAR 26
30051: PUSH
30052: LD_STRING 
30054: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30055: LD_INT 1
30057: PPUSH
30058: LD_INT 11
30060: PPUSH
30061: LD_INT 10
30063: PPUSH
30064: CALL_OW 380
// un := CreateHuman ;
30068: LD_ADDR_VAR 0 1
30072: PUSH
30073: CALL_OW 44
30077: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30078: LD_VAR 0 1
30082: PPUSH
30083: LD_INT 1
30085: PPUSH
30086: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30090: LD_INT 35
30092: PPUSH
30093: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30097: LD_VAR 0 1
30101: PPUSH
30102: LD_INT 22
30104: PUSH
30105: LD_OWVAR 2
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PPUSH
30114: CALL_OW 69
30118: PPUSH
30119: LD_VAR 0 1
30123: PPUSH
30124: CALL_OW 74
30128: PPUSH
30129: CALL_OW 115
// until IsDead ( un ) ;
30133: LD_VAR 0 1
30137: PPUSH
30138: CALL_OW 301
30142: IFFALSE 30090
// end ;
30144: PPOPN 1
30146: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30147: LD_EXP 52
30151: PUSH
30152: LD_EXP 92
30156: AND
30157: IFFALSE 30169
30159: GO 30161
30161: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30162: LD_STRING earthquake(getX(game), 0, 32)
30164: PPUSH
30165: CALL_OW 559
30169: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30170: LD_EXP 52
30174: PUSH
30175: LD_EXP 93
30179: AND
30180: IFFALSE 30271
30182: GO 30184
30184: DISABLE
30185: LD_INT 0
30187: PPUSH
// begin enable ;
30188: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30189: LD_ADDR_VAR 0 1
30193: PUSH
30194: LD_INT 22
30196: PUSH
30197: LD_OWVAR 2
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 21
30208: PUSH
30209: LD_INT 2
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 33
30218: PUSH
30219: LD_INT 3
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: PPUSH
30231: CALL_OW 69
30235: ST_TO_ADDR
// if not tmp then
30236: LD_VAR 0 1
30240: NOT
30241: IFFALSE 30245
// exit ;
30243: GO 30271
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30245: LD_VAR 0 1
30249: PUSH
30250: LD_INT 1
30252: PPUSH
30253: LD_VAR 0 1
30257: PPUSH
30258: CALL_OW 12
30262: ARRAY
30263: PPUSH
30264: LD_INT 1
30266: PPUSH
30267: CALL_OW 234
// end ;
30271: PPOPN 1
30273: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30274: LD_EXP 52
30278: PUSH
30279: LD_EXP 94
30283: AND
30284: IFFALSE 30425
30286: GO 30288
30288: DISABLE
30289: LD_INT 0
30291: PPUSH
30292: PPUSH
30293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30294: LD_ADDR_VAR 0 3
30298: PUSH
30299: LD_INT 22
30301: PUSH
30302: LD_OWVAR 2
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 25
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PPUSH
30325: CALL_OW 69
30329: ST_TO_ADDR
// if not tmp then
30330: LD_VAR 0 3
30334: NOT
30335: IFFALSE 30339
// exit ;
30337: GO 30425
// un := tmp [ rand ( 1 , tmp ) ] ;
30339: LD_ADDR_VAR 0 2
30343: PUSH
30344: LD_VAR 0 3
30348: PUSH
30349: LD_INT 1
30351: PPUSH
30352: LD_VAR 0 3
30356: PPUSH
30357: CALL_OW 12
30361: ARRAY
30362: ST_TO_ADDR
// if Crawls ( un ) then
30363: LD_VAR 0 2
30367: PPUSH
30368: CALL_OW 318
30372: IFFALSE 30383
// ComWalk ( un ) ;
30374: LD_VAR 0 2
30378: PPUSH
30379: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30383: LD_VAR 0 2
30387: PPUSH
30388: LD_INT 9
30390: PPUSH
30391: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30395: LD_INT 28
30397: PPUSH
30398: LD_OWVAR 2
30402: PPUSH
30403: LD_INT 2
30405: PPUSH
30406: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30410: LD_INT 29
30412: PPUSH
30413: LD_OWVAR 2
30417: PPUSH
30418: LD_INT 2
30420: PPUSH
30421: CALL_OW 322
// end ;
30425: PPOPN 3
30427: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30428: LD_EXP 52
30432: PUSH
30433: LD_EXP 95
30437: AND
30438: IFFALSE 30549
30440: GO 30442
30442: DISABLE
30443: LD_INT 0
30445: PPUSH
30446: PPUSH
30447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30448: LD_ADDR_VAR 0 3
30452: PUSH
30453: LD_INT 22
30455: PUSH
30456: LD_OWVAR 2
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 25
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PPUSH
30479: CALL_OW 69
30483: ST_TO_ADDR
// if not tmp then
30484: LD_VAR 0 3
30488: NOT
30489: IFFALSE 30493
// exit ;
30491: GO 30549
// un := tmp [ rand ( 1 , tmp ) ] ;
30493: LD_ADDR_VAR 0 2
30497: PUSH
30498: LD_VAR 0 3
30502: PUSH
30503: LD_INT 1
30505: PPUSH
30506: LD_VAR 0 3
30510: PPUSH
30511: CALL_OW 12
30515: ARRAY
30516: ST_TO_ADDR
// if Crawls ( un ) then
30517: LD_VAR 0 2
30521: PPUSH
30522: CALL_OW 318
30526: IFFALSE 30537
// ComWalk ( un ) ;
30528: LD_VAR 0 2
30532: PPUSH
30533: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30537: LD_VAR 0 2
30541: PPUSH
30542: LD_INT 8
30544: PPUSH
30545: CALL_OW 336
// end ;
30549: PPOPN 3
30551: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30552: LD_EXP 52
30556: PUSH
30557: LD_EXP 96
30561: AND
30562: IFFALSE 30706
30564: GO 30566
30566: DISABLE
30567: LD_INT 0
30569: PPUSH
30570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30571: LD_ADDR_VAR 0 2
30575: PUSH
30576: LD_INT 22
30578: PUSH
30579: LD_OWVAR 2
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 21
30590: PUSH
30591: LD_INT 2
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: LD_INT 34
30603: PUSH
30604: LD_INT 12
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 34
30613: PUSH
30614: LD_INT 51
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 34
30623: PUSH
30624: LD_INT 32
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: LIST
30641: PPUSH
30642: CALL_OW 69
30646: ST_TO_ADDR
// if not tmp then
30647: LD_VAR 0 2
30651: NOT
30652: IFFALSE 30656
// exit ;
30654: GO 30706
// for i in tmp do
30656: LD_ADDR_VAR 0 1
30660: PUSH
30661: LD_VAR 0 2
30665: PUSH
30666: FOR_IN
30667: IFFALSE 30704
// if GetCargo ( i , mat_artifact ) = 0 then
30669: LD_VAR 0 1
30673: PPUSH
30674: LD_INT 4
30676: PPUSH
30677: CALL_OW 289
30681: PUSH
30682: LD_INT 0
30684: EQUAL
30685: IFFALSE 30702
// SetCargo ( i , mat_siberit , 100 ) ;
30687: LD_VAR 0 1
30691: PPUSH
30692: LD_INT 3
30694: PPUSH
30695: LD_INT 100
30697: PPUSH
30698: CALL_OW 290
30702: GO 30666
30704: POP
30705: POP
// end ;
30706: PPOPN 2
30708: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30709: LD_EXP 52
30713: PUSH
30714: LD_EXP 97
30718: AND
30719: IFFALSE 30902
30721: GO 30723
30723: DISABLE
30724: LD_INT 0
30726: PPUSH
30727: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30728: LD_ADDR_VAR 0 2
30732: PUSH
30733: LD_INT 22
30735: PUSH
30736: LD_OWVAR 2
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PPUSH
30745: CALL_OW 69
30749: ST_TO_ADDR
// if not tmp then
30750: LD_VAR 0 2
30754: NOT
30755: IFFALSE 30759
// exit ;
30757: GO 30902
// for i := 1 to 2 do
30759: LD_ADDR_VAR 0 1
30763: PUSH
30764: DOUBLE
30765: LD_INT 1
30767: DEC
30768: ST_TO_ADDR
30769: LD_INT 2
30771: PUSH
30772: FOR_TO
30773: IFFALSE 30900
// begin uc_side := your_side ;
30775: LD_ADDR_OWVAR 20
30779: PUSH
30780: LD_OWVAR 2
30784: ST_TO_ADDR
// uc_nation := nation_american ;
30785: LD_ADDR_OWVAR 21
30789: PUSH
30790: LD_INT 1
30792: ST_TO_ADDR
// vc_chassis := us_morphling ;
30793: LD_ADDR_OWVAR 37
30797: PUSH
30798: LD_INT 5
30800: ST_TO_ADDR
// vc_engine := engine_siberite ;
30801: LD_ADDR_OWVAR 39
30805: PUSH
30806: LD_INT 3
30808: ST_TO_ADDR
// vc_control := control_computer ;
30809: LD_ADDR_OWVAR 38
30813: PUSH
30814: LD_INT 3
30816: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30817: LD_ADDR_OWVAR 40
30821: PUSH
30822: LD_INT 10
30824: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30825: LD_VAR 0 2
30829: PUSH
30830: LD_INT 1
30832: ARRAY
30833: PPUSH
30834: CALL_OW 310
30838: NOT
30839: IFFALSE 30886
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30841: CALL_OW 45
30845: PPUSH
30846: LD_VAR 0 2
30850: PUSH
30851: LD_INT 1
30853: ARRAY
30854: PPUSH
30855: CALL_OW 250
30859: PPUSH
30860: LD_VAR 0 2
30864: PUSH
30865: LD_INT 1
30867: ARRAY
30868: PPUSH
30869: CALL_OW 251
30873: PPUSH
30874: LD_INT 12
30876: PPUSH
30877: LD_INT 1
30879: PPUSH
30880: CALL_OW 50
30884: GO 30898
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30886: CALL_OW 45
30890: PPUSH
30891: LD_INT 1
30893: PPUSH
30894: CALL_OW 51
// end ;
30898: GO 30772
30900: POP
30901: POP
// end ;
30902: PPOPN 2
30904: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30905: LD_EXP 52
30909: PUSH
30910: LD_EXP 98
30914: AND
30915: IFFALSE 31137
30917: GO 30919
30919: DISABLE
30920: LD_INT 0
30922: PPUSH
30923: PPUSH
30924: PPUSH
30925: PPUSH
30926: PPUSH
30927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30928: LD_ADDR_VAR 0 6
30932: PUSH
30933: LD_INT 22
30935: PUSH
30936: LD_OWVAR 2
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 21
30947: PUSH
30948: LD_INT 1
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 3
30957: PUSH
30958: LD_INT 23
30960: PUSH
30961: LD_INT 0
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: LIST
30976: PPUSH
30977: CALL_OW 69
30981: ST_TO_ADDR
// if not tmp then
30982: LD_VAR 0 6
30986: NOT
30987: IFFALSE 30991
// exit ;
30989: GO 31137
// s1 := rand ( 1 , 4 ) ;
30991: LD_ADDR_VAR 0 2
30995: PUSH
30996: LD_INT 1
30998: PPUSH
30999: LD_INT 4
31001: PPUSH
31002: CALL_OW 12
31006: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31007: LD_ADDR_VAR 0 4
31011: PUSH
31012: LD_VAR 0 6
31016: PUSH
31017: LD_INT 1
31019: ARRAY
31020: PPUSH
31021: LD_VAR 0 2
31025: PPUSH
31026: CALL_OW 259
31030: ST_TO_ADDR
// if s1 = 1 then
31031: LD_VAR 0 2
31035: PUSH
31036: LD_INT 1
31038: EQUAL
31039: IFFALSE 31059
// s2 := rand ( 2 , 4 ) else
31041: LD_ADDR_VAR 0 3
31045: PUSH
31046: LD_INT 2
31048: PPUSH
31049: LD_INT 4
31051: PPUSH
31052: CALL_OW 12
31056: ST_TO_ADDR
31057: GO 31067
// s2 := 1 ;
31059: LD_ADDR_VAR 0 3
31063: PUSH
31064: LD_INT 1
31066: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31067: LD_ADDR_VAR 0 5
31071: PUSH
31072: LD_VAR 0 6
31076: PUSH
31077: LD_INT 1
31079: ARRAY
31080: PPUSH
31081: LD_VAR 0 3
31085: PPUSH
31086: CALL_OW 259
31090: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31091: LD_VAR 0 6
31095: PUSH
31096: LD_INT 1
31098: ARRAY
31099: PPUSH
31100: LD_VAR 0 2
31104: PPUSH
31105: LD_VAR 0 5
31109: PPUSH
31110: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31114: LD_VAR 0 6
31118: PUSH
31119: LD_INT 1
31121: ARRAY
31122: PPUSH
31123: LD_VAR 0 3
31127: PPUSH
31128: LD_VAR 0 4
31132: PPUSH
31133: CALL_OW 237
// end ;
31137: PPOPN 6
31139: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31140: LD_EXP 52
31144: PUSH
31145: LD_EXP 99
31149: AND
31150: IFFALSE 31229
31152: GO 31154
31154: DISABLE
31155: LD_INT 0
31157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31158: LD_ADDR_VAR 0 1
31162: PUSH
31163: LD_INT 22
31165: PUSH
31166: LD_OWVAR 2
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 30
31177: PUSH
31178: LD_INT 3
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PPUSH
31189: CALL_OW 69
31193: ST_TO_ADDR
// if not tmp then
31194: LD_VAR 0 1
31198: NOT
31199: IFFALSE 31203
// exit ;
31201: GO 31229
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31203: LD_VAR 0 1
31207: PUSH
31208: LD_INT 1
31210: PPUSH
31211: LD_VAR 0 1
31215: PPUSH
31216: CALL_OW 12
31220: ARRAY
31221: PPUSH
31222: LD_INT 1
31224: PPUSH
31225: CALL_OW 234
// end ;
31229: PPOPN 1
31231: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31232: LD_EXP 52
31236: PUSH
31237: LD_EXP 100
31241: AND
31242: IFFALSE 31354
31244: GO 31246
31246: DISABLE
31247: LD_INT 0
31249: PPUSH
31250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31251: LD_ADDR_VAR 0 2
31255: PUSH
31256: LD_INT 22
31258: PUSH
31259: LD_OWVAR 2
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: LD_INT 30
31273: PUSH
31274: LD_INT 27
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 30
31283: PUSH
31284: LD_INT 26
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 30
31293: PUSH
31294: LD_INT 28
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PPUSH
31311: CALL_OW 69
31315: ST_TO_ADDR
// if not tmp then
31316: LD_VAR 0 2
31320: NOT
31321: IFFALSE 31325
// exit ;
31323: GO 31354
// for i in tmp do
31325: LD_ADDR_VAR 0 1
31329: PUSH
31330: LD_VAR 0 2
31334: PUSH
31335: FOR_IN
31336: IFFALSE 31352
// SetLives ( i , 1 ) ;
31338: LD_VAR 0 1
31342: PPUSH
31343: LD_INT 1
31345: PPUSH
31346: CALL_OW 234
31350: GO 31335
31352: POP
31353: POP
// end ;
31354: PPOPN 2
31356: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31357: LD_EXP 52
31361: PUSH
31362: LD_EXP 101
31366: AND
31367: IFFALSE 31654
31369: GO 31371
31371: DISABLE
31372: LD_INT 0
31374: PPUSH
31375: PPUSH
31376: PPUSH
// begin i := rand ( 1 , 7 ) ;
31377: LD_ADDR_VAR 0 1
31381: PUSH
31382: LD_INT 1
31384: PPUSH
31385: LD_INT 7
31387: PPUSH
31388: CALL_OW 12
31392: ST_TO_ADDR
// case i of 1 :
31393: LD_VAR 0 1
31397: PUSH
31398: LD_INT 1
31400: DOUBLE
31401: EQUAL
31402: IFTRUE 31406
31404: GO 31416
31406: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31407: LD_STRING earthquake(getX(game), 0, 32)
31409: PPUSH
31410: CALL_OW 559
31414: GO 31654
31416: LD_INT 2
31418: DOUBLE
31419: EQUAL
31420: IFTRUE 31424
31422: GO 31438
31424: POP
// begin ToLua ( displayStucuk(); ) ;
31425: LD_STRING displayStucuk();
31427: PPUSH
31428: CALL_OW 559
// ResetFog ;
31432: CALL_OW 335
// end ; 3 :
31436: GO 31654
31438: LD_INT 3
31440: DOUBLE
31441: EQUAL
31442: IFTRUE 31446
31444: GO 31550
31446: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31447: LD_ADDR_VAR 0 2
31451: PUSH
31452: LD_INT 22
31454: PUSH
31455: LD_OWVAR 2
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 25
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PPUSH
31478: CALL_OW 69
31482: ST_TO_ADDR
// if not tmp then
31483: LD_VAR 0 2
31487: NOT
31488: IFFALSE 31492
// exit ;
31490: GO 31654
// un := tmp [ rand ( 1 , tmp ) ] ;
31492: LD_ADDR_VAR 0 3
31496: PUSH
31497: LD_VAR 0 2
31501: PUSH
31502: LD_INT 1
31504: PPUSH
31505: LD_VAR 0 2
31509: PPUSH
31510: CALL_OW 12
31514: ARRAY
31515: ST_TO_ADDR
// if Crawls ( un ) then
31516: LD_VAR 0 3
31520: PPUSH
31521: CALL_OW 318
31525: IFFALSE 31536
// ComWalk ( un ) ;
31527: LD_VAR 0 3
31531: PPUSH
31532: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31536: LD_VAR 0 3
31540: PPUSH
31541: LD_INT 8
31543: PPUSH
31544: CALL_OW 336
// end ; 4 :
31548: GO 31654
31550: LD_INT 4
31552: DOUBLE
31553: EQUAL
31554: IFTRUE 31558
31556: GO 31632
31558: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31559: LD_ADDR_VAR 0 2
31563: PUSH
31564: LD_INT 22
31566: PUSH
31567: LD_OWVAR 2
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 30
31578: PUSH
31579: LD_INT 29
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PPUSH
31590: CALL_OW 69
31594: ST_TO_ADDR
// if not tmp then
31595: LD_VAR 0 2
31599: NOT
31600: IFFALSE 31604
// exit ;
31602: GO 31654
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31604: LD_VAR 0 2
31608: PUSH
31609: LD_INT 1
31611: ARRAY
31612: PPUSH
31613: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31617: LD_VAR 0 2
31621: PUSH
31622: LD_INT 1
31624: ARRAY
31625: PPUSH
31626: CALL_OW 65
// end ; 5 .. 7 :
31630: GO 31654
31632: LD_INT 5
31634: DOUBLE
31635: GREATEREQUAL
31636: IFFALSE 31644
31638: LD_INT 7
31640: DOUBLE
31641: LESSEQUAL
31642: IFTRUE 31646
31644: GO 31653
31646: POP
// StreamSibBomb ; end ;
31647: CALL 27891 0 0
31651: GO 31654
31653: POP
// end ;
31654: PPOPN 3
31656: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31657: LD_EXP 52
31661: PUSH
31662: LD_EXP 102
31666: AND
31667: IFFALSE 31823
31669: GO 31671
31671: DISABLE
31672: LD_INT 0
31674: PPUSH
31675: PPUSH
31676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31677: LD_ADDR_VAR 0 2
31681: PUSH
31682: LD_INT 81
31684: PUSH
31685: LD_OWVAR 2
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: LD_INT 21
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 21
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PPUSH
31726: CALL_OW 69
31730: ST_TO_ADDR
// if not tmp then
31731: LD_VAR 0 2
31735: NOT
31736: IFFALSE 31740
// exit ;
31738: GO 31823
// p := 0 ;
31740: LD_ADDR_VAR 0 3
31744: PUSH
31745: LD_INT 0
31747: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31748: LD_INT 35
31750: PPUSH
31751: CALL_OW 67
// p := p + 1 ;
31755: LD_ADDR_VAR 0 3
31759: PUSH
31760: LD_VAR 0 3
31764: PUSH
31765: LD_INT 1
31767: PLUS
31768: ST_TO_ADDR
// for i in tmp do
31769: LD_ADDR_VAR 0 1
31773: PUSH
31774: LD_VAR 0 2
31778: PUSH
31779: FOR_IN
31780: IFFALSE 31811
// if GetLives ( i ) < 1000 then
31782: LD_VAR 0 1
31786: PPUSH
31787: CALL_OW 256
31791: PUSH
31792: LD_INT 1000
31794: LESS
31795: IFFALSE 31809
// SetLives ( i , 1000 ) ;
31797: LD_VAR 0 1
31801: PPUSH
31802: LD_INT 1000
31804: PPUSH
31805: CALL_OW 234
31809: GO 31779
31811: POP
31812: POP
// until p > 20 ;
31813: LD_VAR 0 3
31817: PUSH
31818: LD_INT 20
31820: GREATER
31821: IFFALSE 31748
// end ;
31823: PPOPN 3
31825: END
// every 0 0$1 trigger StreamModeActive and sTime do
31826: LD_EXP 52
31830: PUSH
31831: LD_EXP 103
31835: AND
31836: IFFALSE 31871
31838: GO 31840
31840: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31841: LD_INT 28
31843: PPUSH
31844: LD_OWVAR 2
31848: PPUSH
31849: LD_INT 2
31851: PPUSH
31852: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31856: LD_INT 30
31858: PPUSH
31859: LD_OWVAR 2
31863: PPUSH
31864: LD_INT 2
31866: PPUSH
31867: CALL_OW 322
// end ;
31871: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31872: LD_EXP 52
31876: PUSH
31877: LD_EXP 104
31881: AND
31882: IFFALSE 32003
31884: GO 31886
31886: DISABLE
31887: LD_INT 0
31889: PPUSH
31890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31891: LD_ADDR_VAR 0 2
31895: PUSH
31896: LD_INT 22
31898: PUSH
31899: LD_OWVAR 2
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 21
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 3
31920: PUSH
31921: LD_INT 23
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: LIST
31939: PPUSH
31940: CALL_OW 69
31944: ST_TO_ADDR
// if not tmp then
31945: LD_VAR 0 2
31949: NOT
31950: IFFALSE 31954
// exit ;
31952: GO 32003
// for i in tmp do
31954: LD_ADDR_VAR 0 1
31958: PUSH
31959: LD_VAR 0 2
31963: PUSH
31964: FOR_IN
31965: IFFALSE 32001
// begin if Crawls ( i ) then
31967: LD_VAR 0 1
31971: PPUSH
31972: CALL_OW 318
31976: IFFALSE 31987
// ComWalk ( i ) ;
31978: LD_VAR 0 1
31982: PPUSH
31983: CALL_OW 138
// SetClass ( i , 2 ) ;
31987: LD_VAR 0 1
31991: PPUSH
31992: LD_INT 2
31994: PPUSH
31995: CALL_OW 336
// end ;
31999: GO 31964
32001: POP
32002: POP
// end ;
32003: PPOPN 2
32005: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32006: LD_EXP 52
32010: PUSH
32011: LD_EXP 105
32015: AND
32016: IFFALSE 32304
32018: GO 32020
32020: DISABLE
32021: LD_INT 0
32023: PPUSH
32024: PPUSH
32025: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32026: LD_OWVAR 2
32030: PPUSH
32031: LD_INT 9
32033: PPUSH
32034: LD_INT 1
32036: PPUSH
32037: LD_INT 1
32039: PPUSH
32040: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32044: LD_INT 9
32046: PPUSH
32047: LD_OWVAR 2
32051: PPUSH
32052: CALL_OW 343
// uc_side := 9 ;
32056: LD_ADDR_OWVAR 20
32060: PUSH
32061: LD_INT 9
32063: ST_TO_ADDR
// uc_nation := 2 ;
32064: LD_ADDR_OWVAR 21
32068: PUSH
32069: LD_INT 2
32071: ST_TO_ADDR
// hc_name := Dark Warrior ;
32072: LD_ADDR_OWVAR 26
32076: PUSH
32077: LD_STRING Dark Warrior
32079: ST_TO_ADDR
// hc_gallery :=  ;
32080: LD_ADDR_OWVAR 33
32084: PUSH
32085: LD_STRING 
32087: ST_TO_ADDR
// hc_noskilllimit := true ;
32088: LD_ADDR_OWVAR 76
32092: PUSH
32093: LD_INT 1
32095: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32096: LD_ADDR_OWVAR 31
32100: PUSH
32101: LD_INT 30
32103: PUSH
32104: LD_INT 30
32106: PUSH
32107: LD_INT 30
32109: PUSH
32110: LD_INT 30
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: ST_TO_ADDR
// un := CreateHuman ;
32119: LD_ADDR_VAR 0 3
32123: PUSH
32124: CALL_OW 44
32128: ST_TO_ADDR
// hc_noskilllimit := false ;
32129: LD_ADDR_OWVAR 76
32133: PUSH
32134: LD_INT 0
32136: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32137: LD_VAR 0 3
32141: PPUSH
32142: LD_INT 1
32144: PPUSH
32145: CALL_OW 51
// ToLua ( playRanger() ) ;
32149: LD_STRING playRanger()
32151: PPUSH
32152: CALL_OW 559
// p := 0 ;
32156: LD_ADDR_VAR 0 2
32160: PUSH
32161: LD_INT 0
32163: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32164: LD_INT 35
32166: PPUSH
32167: CALL_OW 67
// p := p + 1 ;
32171: LD_ADDR_VAR 0 2
32175: PUSH
32176: LD_VAR 0 2
32180: PUSH
32181: LD_INT 1
32183: PLUS
32184: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32185: LD_VAR 0 3
32189: PPUSH
32190: CALL_OW 256
32194: PUSH
32195: LD_INT 1000
32197: LESS
32198: IFFALSE 32212
// SetLives ( un , 1000 ) ;
32200: LD_VAR 0 3
32204: PPUSH
32205: LD_INT 1000
32207: PPUSH
32208: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32212: LD_VAR 0 3
32216: PPUSH
32217: LD_INT 81
32219: PUSH
32220: LD_OWVAR 2
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 91
32231: PUSH
32232: LD_VAR 0 3
32236: PUSH
32237: LD_INT 30
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: LIST
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PPUSH
32249: CALL_OW 69
32253: PPUSH
32254: LD_VAR 0 3
32258: PPUSH
32259: CALL_OW 74
32263: PPUSH
32264: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32268: LD_VAR 0 2
32272: PUSH
32273: LD_INT 80
32275: GREATER
32276: PUSH
32277: LD_VAR 0 3
32281: PPUSH
32282: CALL_OW 301
32286: OR
32287: IFFALSE 32164
// if un then
32289: LD_VAR 0 3
32293: IFFALSE 32304
// RemoveUnit ( un ) ;
32295: LD_VAR 0 3
32299: PPUSH
32300: CALL_OW 64
// end ;
32304: PPOPN 3
32306: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32307: LD_EXP 106
32311: IFFALSE 32427
32313: GO 32315
32315: DISABLE
32316: LD_INT 0
32318: PPUSH
32319: PPUSH
32320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32321: LD_ADDR_VAR 0 2
32325: PUSH
32326: LD_INT 81
32328: PUSH
32329: LD_OWVAR 2
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 21
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PPUSH
32352: CALL_OW 69
32356: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32357: LD_STRING playComputer()
32359: PPUSH
32360: CALL_OW 559
// if not tmp then
32364: LD_VAR 0 2
32368: NOT
32369: IFFALSE 32373
// exit ;
32371: GO 32427
// for i in tmp do
32373: LD_ADDR_VAR 0 1
32377: PUSH
32378: LD_VAR 0 2
32382: PUSH
32383: FOR_IN
32384: IFFALSE 32425
// for j := 1 to 4 do
32386: LD_ADDR_VAR 0 3
32390: PUSH
32391: DOUBLE
32392: LD_INT 1
32394: DEC
32395: ST_TO_ADDR
32396: LD_INT 4
32398: PUSH
32399: FOR_TO
32400: IFFALSE 32421
// SetSkill ( i , j , 10 ) ;
32402: LD_VAR 0 1
32406: PPUSH
32407: LD_VAR 0 3
32411: PPUSH
32412: LD_INT 10
32414: PPUSH
32415: CALL_OW 237
32419: GO 32399
32421: POP
32422: POP
32423: GO 32383
32425: POP
32426: POP
// end ;
32427: PPOPN 3
32429: END
// every 0 0$1 trigger s30 do var i , tmp ;
32430: LD_EXP 107
32434: IFFALSE 32503
32436: GO 32438
32438: DISABLE
32439: LD_INT 0
32441: PPUSH
32442: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32443: LD_ADDR_VAR 0 2
32447: PUSH
32448: LD_INT 22
32450: PUSH
32451: LD_OWVAR 2
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PPUSH
32460: CALL_OW 69
32464: ST_TO_ADDR
// if not tmp then
32465: LD_VAR 0 2
32469: NOT
32470: IFFALSE 32474
// exit ;
32472: GO 32503
// for i in tmp do
32474: LD_ADDR_VAR 0 1
32478: PUSH
32479: LD_VAR 0 2
32483: PUSH
32484: FOR_IN
32485: IFFALSE 32501
// SetLives ( i , 300 ) ;
32487: LD_VAR 0 1
32491: PPUSH
32492: LD_INT 300
32494: PPUSH
32495: CALL_OW 234
32499: GO 32484
32501: POP
32502: POP
// end ;
32503: PPOPN 2
32505: END
// every 0 0$1 trigger s60 do var i , tmp ;
32506: LD_EXP 108
32510: IFFALSE 32579
32512: GO 32514
32514: DISABLE
32515: LD_INT 0
32517: PPUSH
32518: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32519: LD_ADDR_VAR 0 2
32523: PUSH
32524: LD_INT 22
32526: PUSH
32527: LD_OWVAR 2
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PPUSH
32536: CALL_OW 69
32540: ST_TO_ADDR
// if not tmp then
32541: LD_VAR 0 2
32545: NOT
32546: IFFALSE 32550
// exit ;
32548: GO 32579
// for i in tmp do
32550: LD_ADDR_VAR 0 1
32554: PUSH
32555: LD_VAR 0 2
32559: PUSH
32560: FOR_IN
32561: IFFALSE 32577
// SetLives ( i , 600 ) ;
32563: LD_VAR 0 1
32567: PPUSH
32568: LD_INT 600
32570: PPUSH
32571: CALL_OW 234
32575: GO 32560
32577: POP
32578: POP
// end ;
32579: PPOPN 2
32581: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32582: LD_INT 0
32584: PPUSH
// case cmd of 301 :
32585: LD_VAR 0 1
32589: PUSH
32590: LD_INT 301
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32630
32598: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32599: LD_VAR 0 6
32603: PPUSH
32604: LD_VAR 0 7
32608: PPUSH
32609: LD_VAR 0 8
32613: PPUSH
32614: LD_VAR 0 4
32618: PPUSH
32619: LD_VAR 0 5
32623: PPUSH
32624: CALL 33839 0 5
32628: GO 32751
32630: LD_INT 302
32632: DOUBLE
32633: EQUAL
32634: IFTRUE 32638
32636: GO 32675
32638: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32639: LD_VAR 0 6
32643: PPUSH
32644: LD_VAR 0 7
32648: PPUSH
32649: LD_VAR 0 8
32653: PPUSH
32654: LD_VAR 0 9
32658: PPUSH
32659: LD_VAR 0 4
32663: PPUSH
32664: LD_VAR 0 5
32668: PPUSH
32669: CALL 33930 0 6
32673: GO 32751
32675: LD_INT 303
32677: DOUBLE
32678: EQUAL
32679: IFTRUE 32683
32681: GO 32720
32683: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32684: LD_VAR 0 6
32688: PPUSH
32689: LD_VAR 0 7
32693: PPUSH
32694: LD_VAR 0 8
32698: PPUSH
32699: LD_VAR 0 9
32703: PPUSH
32704: LD_VAR 0 4
32708: PPUSH
32709: LD_VAR 0 5
32713: PPUSH
32714: CALL 32756 0 6
32718: GO 32751
32720: LD_INT 304
32722: DOUBLE
32723: EQUAL
32724: IFTRUE 32728
32726: GO 32750
32728: POP
// hHackTeleport ( unit , x , y ) ; end ;
32729: LD_VAR 0 2
32733: PPUSH
32734: LD_VAR 0 4
32738: PPUSH
32739: LD_VAR 0 5
32743: PPUSH
32744: CALL 34523 0 3
32748: GO 32751
32750: POP
// end ;
32751: LD_VAR 0 12
32755: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32756: LD_INT 0
32758: PPUSH
32759: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32760: LD_VAR 0 1
32764: PUSH
32765: LD_INT 1
32767: LESS
32768: PUSH
32769: LD_VAR 0 1
32773: PUSH
32774: LD_INT 3
32776: GREATER
32777: OR
32778: PUSH
32779: LD_VAR 0 5
32783: PPUSH
32784: LD_VAR 0 6
32788: PPUSH
32789: CALL_OW 428
32793: OR
32794: IFFALSE 32798
// exit ;
32796: GO 33526
// uc_side := your_side ;
32798: LD_ADDR_OWVAR 20
32802: PUSH
32803: LD_OWVAR 2
32807: ST_TO_ADDR
// uc_nation := nation ;
32808: LD_ADDR_OWVAR 21
32812: PUSH
32813: LD_VAR 0 1
32817: ST_TO_ADDR
// bc_level = 1 ;
32818: LD_ADDR_OWVAR 43
32822: PUSH
32823: LD_INT 1
32825: ST_TO_ADDR
// case btype of 1 :
32826: LD_VAR 0 2
32830: PUSH
32831: LD_INT 1
32833: DOUBLE
32834: EQUAL
32835: IFTRUE 32839
32837: GO 32850
32839: POP
// bc_type := b_depot ; 2 :
32840: LD_ADDR_OWVAR 42
32844: PUSH
32845: LD_INT 0
32847: ST_TO_ADDR
32848: GO 33470
32850: LD_INT 2
32852: DOUBLE
32853: EQUAL
32854: IFTRUE 32858
32856: GO 32869
32858: POP
// bc_type := b_warehouse ; 3 :
32859: LD_ADDR_OWVAR 42
32863: PUSH
32864: LD_INT 1
32866: ST_TO_ADDR
32867: GO 33470
32869: LD_INT 3
32871: DOUBLE
32872: EQUAL
32873: IFTRUE 32877
32875: GO 32888
32877: POP
// bc_type := b_lab ; 4 .. 9 :
32878: LD_ADDR_OWVAR 42
32882: PUSH
32883: LD_INT 6
32885: ST_TO_ADDR
32886: GO 33470
32888: LD_INT 4
32890: DOUBLE
32891: GREATEREQUAL
32892: IFFALSE 32900
32894: LD_INT 9
32896: DOUBLE
32897: LESSEQUAL
32898: IFTRUE 32902
32900: GO 32962
32902: POP
// begin bc_type := b_lab_half ;
32903: LD_ADDR_OWVAR 42
32907: PUSH
32908: LD_INT 7
32910: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32911: LD_ADDR_OWVAR 44
32915: PUSH
32916: LD_INT 10
32918: PUSH
32919: LD_INT 11
32921: PUSH
32922: LD_INT 12
32924: PUSH
32925: LD_INT 15
32927: PUSH
32928: LD_INT 14
32930: PUSH
32931: LD_INT 13
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: PUSH
32942: LD_VAR 0 2
32946: PUSH
32947: LD_INT 3
32949: MINUS
32950: ARRAY
32951: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32952: LD_ADDR_OWVAR 45
32956: PUSH
32957: LD_INT 9
32959: ST_TO_ADDR
// end ; 10 .. 13 :
32960: GO 33470
32962: LD_INT 10
32964: DOUBLE
32965: GREATEREQUAL
32966: IFFALSE 32974
32968: LD_INT 13
32970: DOUBLE
32971: LESSEQUAL
32972: IFTRUE 32976
32974: GO 33053
32976: POP
// begin bc_type := b_lab_full ;
32977: LD_ADDR_OWVAR 42
32981: PUSH
32982: LD_INT 8
32984: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32985: LD_ADDR_OWVAR 44
32989: PUSH
32990: LD_INT 10
32992: PUSH
32993: LD_INT 12
32995: PUSH
32996: LD_INT 14
32998: PUSH
32999: LD_INT 13
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: PUSH
33008: LD_VAR 0 2
33012: PUSH
33013: LD_INT 9
33015: MINUS
33016: ARRAY
33017: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33018: LD_ADDR_OWVAR 45
33022: PUSH
33023: LD_INT 11
33025: PUSH
33026: LD_INT 15
33028: PUSH
33029: LD_INT 12
33031: PUSH
33032: LD_INT 15
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: PUSH
33041: LD_VAR 0 2
33045: PUSH
33046: LD_INT 9
33048: MINUS
33049: ARRAY
33050: ST_TO_ADDR
// end ; 14 :
33051: GO 33470
33053: LD_INT 14
33055: DOUBLE
33056: EQUAL
33057: IFTRUE 33061
33059: GO 33072
33061: POP
// bc_type := b_workshop ; 15 :
33062: LD_ADDR_OWVAR 42
33066: PUSH
33067: LD_INT 2
33069: ST_TO_ADDR
33070: GO 33470
33072: LD_INT 15
33074: DOUBLE
33075: EQUAL
33076: IFTRUE 33080
33078: GO 33091
33080: POP
// bc_type := b_factory ; 16 :
33081: LD_ADDR_OWVAR 42
33085: PUSH
33086: LD_INT 3
33088: ST_TO_ADDR
33089: GO 33470
33091: LD_INT 16
33093: DOUBLE
33094: EQUAL
33095: IFTRUE 33099
33097: GO 33110
33099: POP
// bc_type := b_ext_gun ; 17 :
33100: LD_ADDR_OWVAR 42
33104: PUSH
33105: LD_INT 17
33107: ST_TO_ADDR
33108: GO 33470
33110: LD_INT 17
33112: DOUBLE
33113: EQUAL
33114: IFTRUE 33118
33116: GO 33146
33118: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33119: LD_ADDR_OWVAR 42
33123: PUSH
33124: LD_INT 19
33126: PUSH
33127: LD_INT 23
33129: PUSH
33130: LD_INT 19
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: LIST
33137: PUSH
33138: LD_VAR 0 1
33142: ARRAY
33143: ST_TO_ADDR
33144: GO 33470
33146: LD_INT 18
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33165
33154: POP
// bc_type := b_ext_radar ; 19 :
33155: LD_ADDR_OWVAR 42
33159: PUSH
33160: LD_INT 20
33162: ST_TO_ADDR
33163: GO 33470
33165: LD_INT 19
33167: DOUBLE
33168: EQUAL
33169: IFTRUE 33173
33171: GO 33184
33173: POP
// bc_type := b_ext_radio ; 20 :
33174: LD_ADDR_OWVAR 42
33178: PUSH
33179: LD_INT 22
33181: ST_TO_ADDR
33182: GO 33470
33184: LD_INT 20
33186: DOUBLE
33187: EQUAL
33188: IFTRUE 33192
33190: GO 33203
33192: POP
// bc_type := b_ext_siberium ; 21 :
33193: LD_ADDR_OWVAR 42
33197: PUSH
33198: LD_INT 21
33200: ST_TO_ADDR
33201: GO 33470
33203: LD_INT 21
33205: DOUBLE
33206: EQUAL
33207: IFTRUE 33211
33209: GO 33222
33211: POP
// bc_type := b_ext_computer ; 22 :
33212: LD_ADDR_OWVAR 42
33216: PUSH
33217: LD_INT 24
33219: ST_TO_ADDR
33220: GO 33470
33222: LD_INT 22
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33241
33230: POP
// bc_type := b_ext_track ; 23 :
33231: LD_ADDR_OWVAR 42
33235: PUSH
33236: LD_INT 16
33238: ST_TO_ADDR
33239: GO 33470
33241: LD_INT 23
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33249
33247: GO 33260
33249: POP
// bc_type := b_ext_laser ; 24 :
33250: LD_ADDR_OWVAR 42
33254: PUSH
33255: LD_INT 25
33257: ST_TO_ADDR
33258: GO 33470
33260: LD_INT 24
33262: DOUBLE
33263: EQUAL
33264: IFTRUE 33268
33266: GO 33279
33268: POP
// bc_type := b_control_tower ; 25 :
33269: LD_ADDR_OWVAR 42
33273: PUSH
33274: LD_INT 36
33276: ST_TO_ADDR
33277: GO 33470
33279: LD_INT 25
33281: DOUBLE
33282: EQUAL
33283: IFTRUE 33287
33285: GO 33298
33287: POP
// bc_type := b_breastwork ; 26 :
33288: LD_ADDR_OWVAR 42
33292: PUSH
33293: LD_INT 31
33295: ST_TO_ADDR
33296: GO 33470
33298: LD_INT 26
33300: DOUBLE
33301: EQUAL
33302: IFTRUE 33306
33304: GO 33317
33306: POP
// bc_type := b_bunker ; 27 :
33307: LD_ADDR_OWVAR 42
33311: PUSH
33312: LD_INT 32
33314: ST_TO_ADDR
33315: GO 33470
33317: LD_INT 27
33319: DOUBLE
33320: EQUAL
33321: IFTRUE 33325
33323: GO 33336
33325: POP
// bc_type := b_turret ; 28 :
33326: LD_ADDR_OWVAR 42
33330: PUSH
33331: LD_INT 33
33333: ST_TO_ADDR
33334: GO 33470
33336: LD_INT 28
33338: DOUBLE
33339: EQUAL
33340: IFTRUE 33344
33342: GO 33355
33344: POP
// bc_type := b_armoury ; 29 :
33345: LD_ADDR_OWVAR 42
33349: PUSH
33350: LD_INT 4
33352: ST_TO_ADDR
33353: GO 33470
33355: LD_INT 29
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33363
33361: GO 33374
33363: POP
// bc_type := b_barracks ; 30 :
33364: LD_ADDR_OWVAR 42
33368: PUSH
33369: LD_INT 5
33371: ST_TO_ADDR
33372: GO 33470
33374: LD_INT 30
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33382
33380: GO 33393
33382: POP
// bc_type := b_solar_power ; 31 :
33383: LD_ADDR_OWVAR 42
33387: PUSH
33388: LD_INT 27
33390: ST_TO_ADDR
33391: GO 33470
33393: LD_INT 31
33395: DOUBLE
33396: EQUAL
33397: IFTRUE 33401
33399: GO 33412
33401: POP
// bc_type := b_oil_power ; 32 :
33402: LD_ADDR_OWVAR 42
33406: PUSH
33407: LD_INT 26
33409: ST_TO_ADDR
33410: GO 33470
33412: LD_INT 32
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33420
33418: GO 33431
33420: POP
// bc_type := b_siberite_power ; 33 :
33421: LD_ADDR_OWVAR 42
33425: PUSH
33426: LD_INT 28
33428: ST_TO_ADDR
33429: GO 33470
33431: LD_INT 33
33433: DOUBLE
33434: EQUAL
33435: IFTRUE 33439
33437: GO 33450
33439: POP
// bc_type := b_oil_mine ; 34 :
33440: LD_ADDR_OWVAR 42
33444: PUSH
33445: LD_INT 29
33447: ST_TO_ADDR
33448: GO 33470
33450: LD_INT 34
33452: DOUBLE
33453: EQUAL
33454: IFTRUE 33458
33456: GO 33469
33458: POP
// bc_type := b_siberite_mine ; end ;
33459: LD_ADDR_OWVAR 42
33463: PUSH
33464: LD_INT 30
33466: ST_TO_ADDR
33467: GO 33470
33469: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33470: LD_ADDR_VAR 0 8
33474: PUSH
33475: LD_VAR 0 5
33479: PPUSH
33480: LD_VAR 0 6
33484: PPUSH
33485: LD_VAR 0 3
33489: PPUSH
33490: CALL_OW 47
33494: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33495: LD_OWVAR 42
33499: PUSH
33500: LD_INT 32
33502: PUSH
33503: LD_INT 33
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: IN
33510: IFFALSE 33526
// PlaceWeaponTurret ( b , weapon ) ;
33512: LD_VAR 0 8
33516: PPUSH
33517: LD_VAR 0 4
33521: PPUSH
33522: CALL_OW 431
// end ;
33526: LD_VAR 0 7
33530: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33531: LD_INT 0
33533: PPUSH
33534: PPUSH
33535: PPUSH
33536: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33537: LD_ADDR_VAR 0 4
33541: PUSH
33542: LD_INT 22
33544: PUSH
33545: LD_OWVAR 2
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: LD_INT 30
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 30
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PPUSH
33586: CALL_OW 69
33590: ST_TO_ADDR
// if not tmp then
33591: LD_VAR 0 4
33595: NOT
33596: IFFALSE 33600
// exit ;
33598: GO 33659
// for i in tmp do
33600: LD_ADDR_VAR 0 2
33604: PUSH
33605: LD_VAR 0 4
33609: PUSH
33610: FOR_IN
33611: IFFALSE 33657
// for j = 1 to 3 do
33613: LD_ADDR_VAR 0 3
33617: PUSH
33618: DOUBLE
33619: LD_INT 1
33621: DEC
33622: ST_TO_ADDR
33623: LD_INT 3
33625: PUSH
33626: FOR_TO
33627: IFFALSE 33653
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33629: LD_VAR 0 2
33633: PPUSH
33634: CALL_OW 274
33638: PPUSH
33639: LD_VAR 0 3
33643: PPUSH
33644: LD_INT 99999
33646: PPUSH
33647: CALL_OW 277
33651: GO 33626
33653: POP
33654: POP
33655: GO 33610
33657: POP
33658: POP
// end ;
33659: LD_VAR 0 1
33663: RET
// export function hHackSetLevel10 ; var i , j ; begin
33664: LD_INT 0
33666: PPUSH
33667: PPUSH
33668: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33669: LD_ADDR_VAR 0 2
33673: PUSH
33674: LD_INT 21
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PPUSH
33684: CALL_OW 69
33688: PUSH
33689: FOR_IN
33690: IFFALSE 33742
// if IsSelected ( i ) then
33692: LD_VAR 0 2
33696: PPUSH
33697: CALL_OW 306
33701: IFFALSE 33740
// begin for j := 1 to 4 do
33703: LD_ADDR_VAR 0 3
33707: PUSH
33708: DOUBLE
33709: LD_INT 1
33711: DEC
33712: ST_TO_ADDR
33713: LD_INT 4
33715: PUSH
33716: FOR_TO
33717: IFFALSE 33738
// SetSkill ( i , j , 10 ) ;
33719: LD_VAR 0 2
33723: PPUSH
33724: LD_VAR 0 3
33728: PPUSH
33729: LD_INT 10
33731: PPUSH
33732: CALL_OW 237
33736: GO 33716
33738: POP
33739: POP
// end ;
33740: GO 33689
33742: POP
33743: POP
// end ;
33744: LD_VAR 0 1
33748: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33749: LD_INT 0
33751: PPUSH
33752: PPUSH
33753: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33754: LD_ADDR_VAR 0 2
33758: PUSH
33759: LD_INT 22
33761: PUSH
33762: LD_OWVAR 2
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 21
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PPUSH
33785: CALL_OW 69
33789: PUSH
33790: FOR_IN
33791: IFFALSE 33832
// begin for j := 1 to 4 do
33793: LD_ADDR_VAR 0 3
33797: PUSH
33798: DOUBLE
33799: LD_INT 1
33801: DEC
33802: ST_TO_ADDR
33803: LD_INT 4
33805: PUSH
33806: FOR_TO
33807: IFFALSE 33828
// SetSkill ( i , j , 10 ) ;
33809: LD_VAR 0 2
33813: PPUSH
33814: LD_VAR 0 3
33818: PPUSH
33819: LD_INT 10
33821: PPUSH
33822: CALL_OW 237
33826: GO 33806
33828: POP
33829: POP
// end ;
33830: GO 33790
33832: POP
33833: POP
// end ;
33834: LD_VAR 0 1
33838: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33839: LD_INT 0
33841: PPUSH
// uc_side := your_side ;
33842: LD_ADDR_OWVAR 20
33846: PUSH
33847: LD_OWVAR 2
33851: ST_TO_ADDR
// uc_nation := nation ;
33852: LD_ADDR_OWVAR 21
33856: PUSH
33857: LD_VAR 0 1
33861: ST_TO_ADDR
// InitHc ;
33862: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33866: LD_INT 0
33868: PPUSH
33869: LD_VAR 0 2
33873: PPUSH
33874: LD_VAR 0 3
33878: PPUSH
33879: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33883: LD_VAR 0 4
33887: PPUSH
33888: LD_VAR 0 5
33892: PPUSH
33893: CALL_OW 428
33897: PUSH
33898: LD_INT 0
33900: EQUAL
33901: IFFALSE 33925
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33903: CALL_OW 44
33907: PPUSH
33908: LD_VAR 0 4
33912: PPUSH
33913: LD_VAR 0 5
33917: PPUSH
33918: LD_INT 1
33920: PPUSH
33921: CALL_OW 48
// end ;
33925: LD_VAR 0 6
33929: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33930: LD_INT 0
33932: PPUSH
33933: PPUSH
// uc_side := your_side ;
33934: LD_ADDR_OWVAR 20
33938: PUSH
33939: LD_OWVAR 2
33943: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33944: LD_VAR 0 1
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: LD_INT 3
33957: PUSH
33958: LD_INT 4
33960: PUSH
33961: LD_INT 5
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: IN
33971: IFFALSE 33983
// uc_nation := nation_american else
33973: LD_ADDR_OWVAR 21
33977: PUSH
33978: LD_INT 1
33980: ST_TO_ADDR
33981: GO 34026
// if chassis in [ 11 , 12 , 13 , 14 ] then
33983: LD_VAR 0 1
33987: PUSH
33988: LD_INT 11
33990: PUSH
33991: LD_INT 12
33993: PUSH
33994: LD_INT 13
33996: PUSH
33997: LD_INT 14
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: IN
34006: IFFALSE 34018
// uc_nation := nation_arabian else
34008: LD_ADDR_OWVAR 21
34012: PUSH
34013: LD_INT 2
34015: ST_TO_ADDR
34016: GO 34026
// uc_nation := nation_russian ;
34018: LD_ADDR_OWVAR 21
34022: PUSH
34023: LD_INT 3
34025: ST_TO_ADDR
// vc_chassis := chassis ;
34026: LD_ADDR_OWVAR 37
34030: PUSH
34031: LD_VAR 0 1
34035: ST_TO_ADDR
// vc_engine := engine ;
34036: LD_ADDR_OWVAR 39
34040: PUSH
34041: LD_VAR 0 2
34045: ST_TO_ADDR
// vc_control := control ;
34046: LD_ADDR_OWVAR 38
34050: PUSH
34051: LD_VAR 0 3
34055: ST_TO_ADDR
// vc_weapon := weapon ;
34056: LD_ADDR_OWVAR 40
34060: PUSH
34061: LD_VAR 0 4
34065: ST_TO_ADDR
// un := CreateVehicle ;
34066: LD_ADDR_VAR 0 8
34070: PUSH
34071: CALL_OW 45
34075: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34076: LD_VAR 0 8
34080: PPUSH
34081: LD_INT 0
34083: PPUSH
34084: LD_INT 5
34086: PPUSH
34087: CALL_OW 12
34091: PPUSH
34092: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34096: LD_VAR 0 8
34100: PPUSH
34101: LD_VAR 0 5
34105: PPUSH
34106: LD_VAR 0 6
34110: PPUSH
34111: LD_INT 1
34113: PPUSH
34114: CALL_OW 48
// end ;
34118: LD_VAR 0 7
34122: RET
// export hInvincible ; every 1 do
34123: GO 34125
34125: DISABLE
// hInvincible := [ ] ;
34126: LD_ADDR_EXP 109
34130: PUSH
34131: EMPTY
34132: ST_TO_ADDR
34133: END
// every 10 do var i ;
34134: GO 34136
34136: DISABLE
34137: LD_INT 0
34139: PPUSH
// begin enable ;
34140: ENABLE
// if not hInvincible then
34141: LD_EXP 109
34145: NOT
34146: IFFALSE 34150
// exit ;
34148: GO 34194
// for i in hInvincible do
34150: LD_ADDR_VAR 0 1
34154: PUSH
34155: LD_EXP 109
34159: PUSH
34160: FOR_IN
34161: IFFALSE 34192
// if GetLives ( i ) < 1000 then
34163: LD_VAR 0 1
34167: PPUSH
34168: CALL_OW 256
34172: PUSH
34173: LD_INT 1000
34175: LESS
34176: IFFALSE 34190
// SetLives ( i , 1000 ) ;
34178: LD_VAR 0 1
34182: PPUSH
34183: LD_INT 1000
34185: PPUSH
34186: CALL_OW 234
34190: GO 34160
34192: POP
34193: POP
// end ;
34194: PPOPN 1
34196: END
// export function hHackInvincible ; var i ; begin
34197: LD_INT 0
34199: PPUSH
34200: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34201: LD_ADDR_VAR 0 2
34205: PUSH
34206: LD_INT 2
34208: PUSH
34209: LD_INT 21
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 21
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: LIST
34233: PPUSH
34234: CALL_OW 69
34238: PUSH
34239: FOR_IN
34240: IFFALSE 34301
// if IsSelected ( i ) then
34242: LD_VAR 0 2
34246: PPUSH
34247: CALL_OW 306
34251: IFFALSE 34299
// begin if i in hInvincible then
34253: LD_VAR 0 2
34257: PUSH
34258: LD_EXP 109
34262: IN
34263: IFFALSE 34283
// hInvincible := hInvincible diff i else
34265: LD_ADDR_EXP 109
34269: PUSH
34270: LD_EXP 109
34274: PUSH
34275: LD_VAR 0 2
34279: DIFF
34280: ST_TO_ADDR
34281: GO 34299
// hInvincible := hInvincible union i ;
34283: LD_ADDR_EXP 109
34287: PUSH
34288: LD_EXP 109
34292: PUSH
34293: LD_VAR 0 2
34297: UNION
34298: ST_TO_ADDR
// end ;
34299: GO 34239
34301: POP
34302: POP
// end ;
34303: LD_VAR 0 1
34307: RET
// export function hHackInvisible ; var i , j ; begin
34308: LD_INT 0
34310: PPUSH
34311: PPUSH
34312: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34313: LD_ADDR_VAR 0 2
34317: PUSH
34318: LD_INT 21
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PPUSH
34328: CALL_OW 69
34332: PUSH
34333: FOR_IN
34334: IFFALSE 34358
// if IsSelected ( i ) then
34336: LD_VAR 0 2
34340: PPUSH
34341: CALL_OW 306
34345: IFFALSE 34356
// ComForceInvisible ( i ) ;
34347: LD_VAR 0 2
34351: PPUSH
34352: CALL_OW 496
34356: GO 34333
34358: POP
34359: POP
// end ;
34360: LD_VAR 0 1
34364: RET
// export function hHackChangeYourSide ; begin
34365: LD_INT 0
34367: PPUSH
// if your_side = 8 then
34368: LD_OWVAR 2
34372: PUSH
34373: LD_INT 8
34375: EQUAL
34376: IFFALSE 34388
// your_side := 0 else
34378: LD_ADDR_OWVAR 2
34382: PUSH
34383: LD_INT 0
34385: ST_TO_ADDR
34386: GO 34402
// your_side := your_side + 1 ;
34388: LD_ADDR_OWVAR 2
34392: PUSH
34393: LD_OWVAR 2
34397: PUSH
34398: LD_INT 1
34400: PLUS
34401: ST_TO_ADDR
// end ;
34402: LD_VAR 0 1
34406: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34407: LD_INT 0
34409: PPUSH
34410: PPUSH
34411: PPUSH
// for i in all_units do
34412: LD_ADDR_VAR 0 2
34416: PUSH
34417: LD_OWVAR 3
34421: PUSH
34422: FOR_IN
34423: IFFALSE 34501
// if IsSelected ( i ) then
34425: LD_VAR 0 2
34429: PPUSH
34430: CALL_OW 306
34434: IFFALSE 34499
// begin j := GetSide ( i ) ;
34436: LD_ADDR_VAR 0 3
34440: PUSH
34441: LD_VAR 0 2
34445: PPUSH
34446: CALL_OW 255
34450: ST_TO_ADDR
// if j = 8 then
34451: LD_VAR 0 3
34455: PUSH
34456: LD_INT 8
34458: EQUAL
34459: IFFALSE 34471
// j := 0 else
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_INT 0
34468: ST_TO_ADDR
34469: GO 34485
// j := j + 1 ;
34471: LD_ADDR_VAR 0 3
34475: PUSH
34476: LD_VAR 0 3
34480: PUSH
34481: LD_INT 1
34483: PLUS
34484: ST_TO_ADDR
// SetSide ( i , j ) ;
34485: LD_VAR 0 2
34489: PPUSH
34490: LD_VAR 0 3
34494: PPUSH
34495: CALL_OW 235
// end ;
34499: GO 34422
34501: POP
34502: POP
// end ;
34503: LD_VAR 0 1
34507: RET
// export function hHackFog ; begin
34508: LD_INT 0
34510: PPUSH
// FogOff ( true ) ;
34511: LD_INT 1
34513: PPUSH
34514: CALL_OW 344
// end ;
34518: LD_VAR 0 1
34522: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34523: LD_INT 0
34525: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34526: LD_VAR 0 1
34530: PPUSH
34531: LD_VAR 0 2
34535: PPUSH
34536: LD_VAR 0 3
34540: PPUSH
34541: LD_INT 1
34543: PPUSH
34544: LD_INT 1
34546: PPUSH
34547: CALL_OW 483
// CenterOnXY ( x , y ) ;
34551: LD_VAR 0 2
34555: PPUSH
34556: LD_VAR 0 3
34560: PPUSH
34561: CALL_OW 84
// end ;
34565: LD_VAR 0 4
34569: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34570: LD_INT 0
34572: PPUSH
34573: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34574: LD_VAR 0 1
34578: NOT
34579: PUSH
34580: LD_VAR 0 2
34584: PPUSH
34585: LD_VAR 0 3
34589: PPUSH
34590: CALL_OW 488
34594: NOT
34595: OR
34596: PUSH
34597: LD_VAR 0 1
34601: PPUSH
34602: CALL_OW 266
34606: PUSH
34607: LD_INT 3
34609: NONEQUAL
34610: PUSH
34611: LD_VAR 0 1
34615: PPUSH
34616: CALL_OW 247
34620: PUSH
34621: LD_INT 1
34623: EQUAL
34624: NOT
34625: AND
34626: OR
34627: IFFALSE 34631
// exit ;
34629: GO 34780
// if GetType ( factory ) = unit_human then
34631: LD_VAR 0 1
34635: PPUSH
34636: CALL_OW 247
34640: PUSH
34641: LD_INT 1
34643: EQUAL
34644: IFFALSE 34661
// factory := IsInUnit ( factory ) ;
34646: LD_ADDR_VAR 0 1
34650: PUSH
34651: LD_VAR 0 1
34655: PPUSH
34656: CALL_OW 310
34660: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34661: LD_VAR 0 1
34665: PPUSH
34666: CALL_OW 266
34670: PUSH
34671: LD_INT 3
34673: NONEQUAL
34674: IFFALSE 34678
// exit ;
34676: GO 34780
// if HexInfo ( x , y ) = factory then
34678: LD_VAR 0 2
34682: PPUSH
34683: LD_VAR 0 3
34687: PPUSH
34688: CALL_OW 428
34692: PUSH
34693: LD_VAR 0 1
34697: EQUAL
34698: IFFALSE 34725
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34700: LD_ADDR_EXP 110
34704: PUSH
34705: LD_EXP 110
34709: PPUSH
34710: LD_VAR 0 1
34714: PPUSH
34715: LD_INT 0
34717: PPUSH
34718: CALL_OW 1
34722: ST_TO_ADDR
34723: GO 34776
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34725: LD_ADDR_EXP 110
34729: PUSH
34730: LD_EXP 110
34734: PPUSH
34735: LD_VAR 0 1
34739: PPUSH
34740: LD_VAR 0 1
34744: PPUSH
34745: CALL_OW 255
34749: PUSH
34750: LD_VAR 0 1
34754: PUSH
34755: LD_VAR 0 2
34759: PUSH
34760: LD_VAR 0 3
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: PPUSH
34771: CALL_OW 1
34775: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34776: CALL 34785 0 0
// end ;
34780: LD_VAR 0 4
34784: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34785: LD_INT 0
34787: PPUSH
34788: PPUSH
34789: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34790: LD_STRING resetFactoryWaypoint();
34792: PPUSH
34793: CALL_OW 559
// if factoryWaypoints then
34797: LD_EXP 110
34801: IFFALSE 34927
// begin list := PrepareArray ( factoryWaypoints ) ;
34803: LD_ADDR_VAR 0 3
34807: PUSH
34808: LD_EXP 110
34812: PPUSH
34813: CALL 81249 0 1
34817: ST_TO_ADDR
// for i := 1 to list do
34818: LD_ADDR_VAR 0 2
34822: PUSH
34823: DOUBLE
34824: LD_INT 1
34826: DEC
34827: ST_TO_ADDR
34828: LD_VAR 0 3
34832: PUSH
34833: FOR_TO
34834: IFFALSE 34925
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34836: LD_STRING setFactoryWaypointXY(
34838: PUSH
34839: LD_VAR 0 3
34843: PUSH
34844: LD_VAR 0 2
34848: ARRAY
34849: PUSH
34850: LD_INT 1
34852: ARRAY
34853: STR
34854: PUSH
34855: LD_STRING ,
34857: STR
34858: PUSH
34859: LD_VAR 0 3
34863: PUSH
34864: LD_VAR 0 2
34868: ARRAY
34869: PUSH
34870: LD_INT 2
34872: ARRAY
34873: STR
34874: PUSH
34875: LD_STRING ,
34877: STR
34878: PUSH
34879: LD_VAR 0 3
34883: PUSH
34884: LD_VAR 0 2
34888: ARRAY
34889: PUSH
34890: LD_INT 3
34892: ARRAY
34893: STR
34894: PUSH
34895: LD_STRING ,
34897: STR
34898: PUSH
34899: LD_VAR 0 3
34903: PUSH
34904: LD_VAR 0 2
34908: ARRAY
34909: PUSH
34910: LD_INT 4
34912: ARRAY
34913: STR
34914: PUSH
34915: LD_STRING )
34917: STR
34918: PPUSH
34919: CALL_OW 559
34923: GO 34833
34925: POP
34926: POP
// end ; end ;
34927: LD_VAR 0 1
34931: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34932: LD_INT 0
34934: PPUSH
// if HexInfo ( x , y ) = warehouse then
34935: LD_VAR 0 2
34939: PPUSH
34940: LD_VAR 0 3
34944: PPUSH
34945: CALL_OW 428
34949: PUSH
34950: LD_VAR 0 1
34954: EQUAL
34955: IFFALSE 34982
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34957: LD_ADDR_EXP 111
34961: PUSH
34962: LD_EXP 111
34966: PPUSH
34967: LD_VAR 0 1
34971: PPUSH
34972: LD_INT 0
34974: PPUSH
34975: CALL_OW 1
34979: ST_TO_ADDR
34980: GO 35033
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34982: LD_ADDR_EXP 111
34986: PUSH
34987: LD_EXP 111
34991: PPUSH
34992: LD_VAR 0 1
34996: PPUSH
34997: LD_VAR 0 1
35001: PPUSH
35002: CALL_OW 255
35006: PUSH
35007: LD_VAR 0 1
35011: PUSH
35012: LD_VAR 0 2
35016: PUSH
35017: LD_VAR 0 3
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: PPUSH
35028: CALL_OW 1
35032: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35033: CALL 35042 0 0
// end ;
35037: LD_VAR 0 4
35041: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35042: LD_INT 0
35044: PPUSH
35045: PPUSH
35046: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35047: LD_STRING resetWarehouseGatheringPoints();
35049: PPUSH
35050: CALL_OW 559
// if warehouseGatheringPoints then
35054: LD_EXP 111
35058: IFFALSE 35184
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35060: LD_ADDR_VAR 0 3
35064: PUSH
35065: LD_EXP 111
35069: PPUSH
35070: CALL 81249 0 1
35074: ST_TO_ADDR
// for i := 1 to list do
35075: LD_ADDR_VAR 0 2
35079: PUSH
35080: DOUBLE
35081: LD_INT 1
35083: DEC
35084: ST_TO_ADDR
35085: LD_VAR 0 3
35089: PUSH
35090: FOR_TO
35091: IFFALSE 35182
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35093: LD_STRING setWarehouseGatheringPointXY(
35095: PUSH
35096: LD_VAR 0 3
35100: PUSH
35101: LD_VAR 0 2
35105: ARRAY
35106: PUSH
35107: LD_INT 1
35109: ARRAY
35110: STR
35111: PUSH
35112: LD_STRING ,
35114: STR
35115: PUSH
35116: LD_VAR 0 3
35120: PUSH
35121: LD_VAR 0 2
35125: ARRAY
35126: PUSH
35127: LD_INT 2
35129: ARRAY
35130: STR
35131: PUSH
35132: LD_STRING ,
35134: STR
35135: PUSH
35136: LD_VAR 0 3
35140: PUSH
35141: LD_VAR 0 2
35145: ARRAY
35146: PUSH
35147: LD_INT 3
35149: ARRAY
35150: STR
35151: PUSH
35152: LD_STRING ,
35154: STR
35155: PUSH
35156: LD_VAR 0 3
35160: PUSH
35161: LD_VAR 0 2
35165: ARRAY
35166: PUSH
35167: LD_INT 4
35169: ARRAY
35170: STR
35171: PUSH
35172: LD_STRING )
35174: STR
35175: PPUSH
35176: CALL_OW 559
35180: GO 35090
35182: POP
35183: POP
// end ; end ;
35184: LD_VAR 0 1
35188: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35189: LD_EXP 111
35193: IFFALSE 35878
35195: GO 35197
35197: DISABLE
35198: LD_INT 0
35200: PPUSH
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
// begin enable ;
35209: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_EXP 111
35219: PPUSH
35220: CALL 81249 0 1
35224: ST_TO_ADDR
// if not list then
35225: LD_VAR 0 3
35229: NOT
35230: IFFALSE 35234
// exit ;
35232: GO 35878
// for i := 1 to list do
35234: LD_ADDR_VAR 0 1
35238: PUSH
35239: DOUBLE
35240: LD_INT 1
35242: DEC
35243: ST_TO_ADDR
35244: LD_VAR 0 3
35248: PUSH
35249: FOR_TO
35250: IFFALSE 35876
// begin depot := list [ i ] [ 2 ] ;
35252: LD_ADDR_VAR 0 8
35256: PUSH
35257: LD_VAR 0 3
35261: PUSH
35262: LD_VAR 0 1
35266: ARRAY
35267: PUSH
35268: LD_INT 2
35270: ARRAY
35271: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35272: LD_ADDR_VAR 0 5
35276: PUSH
35277: LD_VAR 0 3
35281: PUSH
35282: LD_VAR 0 1
35286: ARRAY
35287: PUSH
35288: LD_INT 1
35290: ARRAY
35291: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35292: LD_VAR 0 8
35296: PPUSH
35297: CALL_OW 301
35301: PUSH
35302: LD_VAR 0 5
35306: PUSH
35307: LD_VAR 0 8
35311: PPUSH
35312: CALL_OW 255
35316: NONEQUAL
35317: OR
35318: IFFALSE 35347
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35320: LD_ADDR_EXP 111
35324: PUSH
35325: LD_EXP 111
35329: PPUSH
35330: LD_VAR 0 8
35334: PPUSH
35335: LD_INT 0
35337: PPUSH
35338: CALL_OW 1
35342: ST_TO_ADDR
// exit ;
35343: POP
35344: POP
35345: GO 35878
// end ; x := list [ i ] [ 3 ] ;
35347: LD_ADDR_VAR 0 6
35351: PUSH
35352: LD_VAR 0 3
35356: PUSH
35357: LD_VAR 0 1
35361: ARRAY
35362: PUSH
35363: LD_INT 3
35365: ARRAY
35366: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35367: LD_ADDR_VAR 0 7
35371: PUSH
35372: LD_VAR 0 3
35376: PUSH
35377: LD_VAR 0 1
35381: ARRAY
35382: PUSH
35383: LD_INT 4
35385: ARRAY
35386: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35387: LD_ADDR_VAR 0 9
35391: PUSH
35392: LD_VAR 0 6
35396: PPUSH
35397: LD_VAR 0 7
35401: PPUSH
35402: LD_INT 16
35404: PPUSH
35405: CALL 79837 0 3
35409: ST_TO_ADDR
// if not cratesNearbyPoint then
35410: LD_VAR 0 9
35414: NOT
35415: IFFALSE 35421
// exit ;
35417: POP
35418: POP
35419: GO 35878
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35421: LD_ADDR_VAR 0 4
35425: PUSH
35426: LD_INT 22
35428: PUSH
35429: LD_VAR 0 5
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 3
35440: PUSH
35441: LD_INT 60
35443: PUSH
35444: EMPTY
35445: LIST
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 91
35453: PUSH
35454: LD_VAR 0 8
35458: PUSH
35459: LD_INT 6
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: LD_INT 25
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 25
35482: PUSH
35483: LD_INT 16
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: PPUSH
35501: CALL_OW 69
35505: PUSH
35506: LD_VAR 0 8
35510: PPUSH
35511: CALL_OW 313
35515: PPUSH
35516: LD_INT 3
35518: PUSH
35519: LD_INT 60
35521: PUSH
35522: EMPTY
35523: LIST
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: LD_INT 25
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 25
35544: PUSH
35545: LD_INT 16
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: LIST
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PPUSH
35561: CALL_OW 72
35565: UNION
35566: ST_TO_ADDR
// if tmp then
35567: LD_VAR 0 4
35571: IFFALSE 35651
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35573: LD_ADDR_VAR 0 4
35577: PUSH
35578: LD_VAR 0 4
35582: PPUSH
35583: LD_INT 3
35585: PPUSH
35586: CALL 77806 0 2
35590: ST_TO_ADDR
// for j in tmp do
35591: LD_ADDR_VAR 0 2
35595: PUSH
35596: LD_VAR 0 4
35600: PUSH
35601: FOR_IN
35602: IFFALSE 35645
// begin if IsInUnit ( j ) then
35604: LD_VAR 0 2
35608: PPUSH
35609: CALL_OW 310
35613: IFFALSE 35624
// ComExit ( j ) ;
35615: LD_VAR 0 2
35619: PPUSH
35620: CALL 77889 0 1
// AddComCollect ( j , x , y ) ;
35624: LD_VAR 0 2
35628: PPUSH
35629: LD_VAR 0 6
35633: PPUSH
35634: LD_VAR 0 7
35638: PPUSH
35639: CALL_OW 177
// end ;
35643: GO 35601
35645: POP
35646: POP
// exit ;
35647: POP
35648: POP
35649: GO 35878
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35651: LD_ADDR_VAR 0 4
35655: PUSH
35656: LD_INT 22
35658: PUSH
35659: LD_VAR 0 5
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 91
35670: PUSH
35671: LD_VAR 0 8
35675: PUSH
35676: LD_INT 8
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: LD_INT 34
35689: PUSH
35690: LD_INT 12
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 34
35699: PUSH
35700: LD_INT 51
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 34
35709: PUSH
35710: LD_INT 32
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 34
35719: PUSH
35720: LD_INT 89
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: PPUSH
35739: CALL_OW 69
35743: ST_TO_ADDR
// if tmp then
35744: LD_VAR 0 4
35748: IFFALSE 35874
// begin for j in tmp do
35750: LD_ADDR_VAR 0 2
35754: PUSH
35755: LD_VAR 0 4
35759: PUSH
35760: FOR_IN
35761: IFFALSE 35872
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35763: LD_VAR 0 2
35767: PPUSH
35768: CALL_OW 262
35772: PUSH
35773: LD_INT 3
35775: EQUAL
35776: PUSH
35777: LD_VAR 0 2
35781: PPUSH
35782: CALL_OW 261
35786: PUSH
35787: LD_INT 20
35789: GREATER
35790: OR
35791: PUSH
35792: LD_VAR 0 2
35796: PPUSH
35797: CALL_OW 314
35801: NOT
35802: AND
35803: PUSH
35804: LD_VAR 0 2
35808: PPUSH
35809: CALL_OW 263
35813: PUSH
35814: LD_INT 1
35816: NONEQUAL
35817: PUSH
35818: LD_VAR 0 2
35822: PPUSH
35823: CALL_OW 311
35827: OR
35828: AND
35829: IFFALSE 35870
// begin ComCollect ( j , x , y ) ;
35831: LD_VAR 0 2
35835: PPUSH
35836: LD_VAR 0 6
35840: PPUSH
35841: LD_VAR 0 7
35845: PPUSH
35846: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35850: LD_VAR 0 2
35854: PPUSH
35855: LD_VAR 0 8
35859: PPUSH
35860: CALL_OW 172
// exit ;
35864: POP
35865: POP
35866: POP
35867: POP
35868: GO 35878
// end ;
35870: GO 35760
35872: POP
35873: POP
// end ; end ;
35874: GO 35249
35876: POP
35877: POP
// end ; end_of_file
35878: PPOPN 9
35880: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35881: LD_INT 0
35883: PPUSH
35884: PPUSH
35885: PPUSH
35886: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL_OW 264
35896: PUSH
35897: LD_INT 91
35899: EQUAL
35900: IFFALSE 35972
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35902: LD_INT 68
35904: PPUSH
35905: LD_VAR 0 1
35909: PPUSH
35910: CALL_OW 255
35914: PPUSH
35915: CALL_OW 321
35919: PUSH
35920: LD_INT 2
35922: EQUAL
35923: IFFALSE 35935
// eff := 70 else
35925: LD_ADDR_VAR 0 4
35929: PUSH
35930: LD_INT 70
35932: ST_TO_ADDR
35933: GO 35943
// eff := 30 ;
35935: LD_ADDR_VAR 0 4
35939: PUSH
35940: LD_INT 30
35942: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35943: LD_VAR 0 1
35947: PPUSH
35948: CALL_OW 250
35952: PPUSH
35953: LD_VAR 0 1
35957: PPUSH
35958: CALL_OW 251
35962: PPUSH
35963: LD_VAR 0 4
35967: PPUSH
35968: CALL_OW 495
// end ; end ;
35972: LD_VAR 0 2
35976: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35977: LD_INT 0
35979: PPUSH
// end ;
35980: LD_VAR 0 4
35984: RET
// export function SOS_Command ( cmd ) ; begin
35985: LD_INT 0
35987: PPUSH
// end ;
35988: LD_VAR 0 2
35992: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35993: LD_INT 0
35995: PPUSH
// end ;
35996: LD_VAR 0 6
36000: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36001: LD_INT 0
36003: PPUSH
36004: PPUSH
// if not vehicle or not factory then
36005: LD_VAR 0 1
36009: NOT
36010: PUSH
36011: LD_VAR 0 2
36015: NOT
36016: OR
36017: IFFALSE 36021
// exit ;
36019: GO 36252
// if factoryWaypoints >= factory then
36021: LD_EXP 110
36025: PUSH
36026: LD_VAR 0 2
36030: GREATEREQUAL
36031: IFFALSE 36252
// if factoryWaypoints [ factory ] then
36033: LD_EXP 110
36037: PUSH
36038: LD_VAR 0 2
36042: ARRAY
36043: IFFALSE 36252
// begin if GetControl ( vehicle ) = control_manual then
36045: LD_VAR 0 1
36049: PPUSH
36050: CALL_OW 263
36054: PUSH
36055: LD_INT 1
36057: EQUAL
36058: IFFALSE 36139
// begin driver := IsDrivenBy ( vehicle ) ;
36060: LD_ADDR_VAR 0 4
36064: PUSH
36065: LD_VAR 0 1
36069: PPUSH
36070: CALL_OW 311
36074: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36075: LD_VAR 0 4
36079: PPUSH
36080: LD_EXP 110
36084: PUSH
36085: LD_VAR 0 2
36089: ARRAY
36090: PUSH
36091: LD_INT 3
36093: ARRAY
36094: PPUSH
36095: LD_EXP 110
36099: PUSH
36100: LD_VAR 0 2
36104: ARRAY
36105: PUSH
36106: LD_INT 4
36108: ARRAY
36109: PPUSH
36110: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36114: LD_VAR 0 4
36118: PPUSH
36119: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36123: LD_VAR 0 4
36127: PPUSH
36128: LD_VAR 0 2
36132: PPUSH
36133: CALL_OW 180
// end else
36137: GO 36252
// if GetControl ( vehicle ) = control_remote then
36139: LD_VAR 0 1
36143: PPUSH
36144: CALL_OW 263
36148: PUSH
36149: LD_INT 2
36151: EQUAL
36152: IFFALSE 36213
// begin wait ( 0 0$2 ) ;
36154: LD_INT 70
36156: PPUSH
36157: CALL_OW 67
// if Connect ( vehicle ) then
36161: LD_VAR 0 1
36165: PPUSH
36166: CALL 48110 0 1
36170: IFFALSE 36211
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36172: LD_VAR 0 1
36176: PPUSH
36177: LD_EXP 110
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_INT 3
36190: ARRAY
36191: PPUSH
36192: LD_EXP 110
36196: PUSH
36197: LD_VAR 0 2
36201: ARRAY
36202: PUSH
36203: LD_INT 4
36205: ARRAY
36206: PPUSH
36207: CALL_OW 171
// end else
36211: GO 36252
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36213: LD_VAR 0 1
36217: PPUSH
36218: LD_EXP 110
36222: PUSH
36223: LD_VAR 0 2
36227: ARRAY
36228: PUSH
36229: LD_INT 3
36231: ARRAY
36232: PPUSH
36233: LD_EXP 110
36237: PUSH
36238: LD_VAR 0 2
36242: ARRAY
36243: PUSH
36244: LD_INT 4
36246: ARRAY
36247: PPUSH
36248: CALL_OW 171
// end ; end ;
36252: LD_VAR 0 3
36256: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36257: LD_INT 0
36259: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36260: LD_VAR 0 1
36264: PUSH
36265: LD_INT 250
36267: EQUAL
36268: PUSH
36269: LD_VAR 0 2
36273: PPUSH
36274: CALL_OW 264
36278: PUSH
36279: LD_INT 81
36281: EQUAL
36282: AND
36283: IFFALSE 36304
// MinerPlaceMine ( unit , x , y ) ;
36285: LD_VAR 0 2
36289: PPUSH
36290: LD_VAR 0 4
36294: PPUSH
36295: LD_VAR 0 5
36299: PPUSH
36300: CALL 38689 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36304: LD_VAR 0 1
36308: PUSH
36309: LD_INT 251
36311: EQUAL
36312: PUSH
36313: LD_VAR 0 2
36317: PPUSH
36318: CALL_OW 264
36322: PUSH
36323: LD_INT 81
36325: EQUAL
36326: AND
36327: IFFALSE 36348
// MinerDetonateMine ( unit , x , y ) ;
36329: LD_VAR 0 2
36333: PPUSH
36334: LD_VAR 0 4
36338: PPUSH
36339: LD_VAR 0 5
36343: PPUSH
36344: CALL 38964 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36348: LD_VAR 0 1
36352: PUSH
36353: LD_INT 252
36355: EQUAL
36356: PUSH
36357: LD_VAR 0 2
36361: PPUSH
36362: CALL_OW 264
36366: PUSH
36367: LD_INT 81
36369: EQUAL
36370: AND
36371: IFFALSE 36392
// MinerCreateMinefield ( unit , x , y ) ;
36373: LD_VAR 0 2
36377: PPUSH
36378: LD_VAR 0 4
36382: PPUSH
36383: LD_VAR 0 5
36387: PPUSH
36388: CALL 39381 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36392: LD_VAR 0 1
36396: PUSH
36397: LD_INT 253
36399: EQUAL
36400: PUSH
36401: LD_VAR 0 2
36405: PPUSH
36406: CALL_OW 257
36410: PUSH
36411: LD_INT 5
36413: EQUAL
36414: AND
36415: IFFALSE 36436
// ComBinocular ( unit , x , y ) ;
36417: LD_VAR 0 2
36421: PPUSH
36422: LD_VAR 0 4
36426: PPUSH
36427: LD_VAR 0 5
36431: PPUSH
36432: CALL 39750 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36436: LD_VAR 0 1
36440: PUSH
36441: LD_INT 254
36443: EQUAL
36444: PUSH
36445: LD_VAR 0 2
36449: PPUSH
36450: CALL_OW 264
36454: PUSH
36455: LD_INT 99
36457: EQUAL
36458: AND
36459: PUSH
36460: LD_VAR 0 3
36464: PPUSH
36465: CALL_OW 263
36469: PUSH
36470: LD_INT 3
36472: EQUAL
36473: AND
36474: IFFALSE 36490
// HackDestroyVehicle ( unit , selectedUnit ) ;
36476: LD_VAR 0 2
36480: PPUSH
36481: LD_VAR 0 3
36485: PPUSH
36486: CALL 38053 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36490: LD_VAR 0 1
36494: PUSH
36495: LD_INT 255
36497: EQUAL
36498: PUSH
36499: LD_VAR 0 2
36503: PPUSH
36504: CALL_OW 264
36508: PUSH
36509: LD_INT 14
36511: PUSH
36512: LD_INT 53
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: IN
36519: AND
36520: PUSH
36521: LD_VAR 0 4
36525: PPUSH
36526: LD_VAR 0 5
36530: PPUSH
36531: CALL_OW 488
36535: AND
36536: IFFALSE 36560
// CutTreeXYR ( unit , x , y , 12 ) ;
36538: LD_VAR 0 2
36542: PPUSH
36543: LD_VAR 0 4
36547: PPUSH
36548: LD_VAR 0 5
36552: PPUSH
36553: LD_INT 12
36555: PPUSH
36556: CALL 36623 0 4
// if cmd = 256 then
36560: LD_VAR 0 1
36564: PUSH
36565: LD_INT 256
36567: EQUAL
36568: IFFALSE 36589
// SetFactoryWaypoint ( unit , x , y ) ;
36570: LD_VAR 0 2
36574: PPUSH
36575: LD_VAR 0 4
36579: PPUSH
36580: LD_VAR 0 5
36584: PPUSH
36585: CALL 34570 0 3
// if cmd = 257 then
36589: LD_VAR 0 1
36593: PUSH
36594: LD_INT 257
36596: EQUAL
36597: IFFALSE 36618
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36599: LD_VAR 0 2
36603: PPUSH
36604: LD_VAR 0 4
36608: PPUSH
36609: LD_VAR 0 5
36613: PPUSH
36614: CALL 34932 0 3
// end ;
36618: LD_VAR 0 6
36622: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36623: LD_INT 0
36625: PPUSH
36626: PPUSH
36627: PPUSH
36628: PPUSH
36629: PPUSH
36630: PPUSH
36631: PPUSH
36632: PPUSH
36633: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36634: LD_VAR 0 1
36638: NOT
36639: PUSH
36640: LD_VAR 0 2
36644: PPUSH
36645: LD_VAR 0 3
36649: PPUSH
36650: CALL_OW 488
36654: NOT
36655: OR
36656: PUSH
36657: LD_VAR 0 4
36661: NOT
36662: OR
36663: IFFALSE 36667
// exit ;
36665: GO 37007
// list := [ ] ;
36667: LD_ADDR_VAR 0 13
36671: PUSH
36672: EMPTY
36673: ST_TO_ADDR
// if x - r < 0 then
36674: LD_VAR 0 2
36678: PUSH
36679: LD_VAR 0 4
36683: MINUS
36684: PUSH
36685: LD_INT 0
36687: LESS
36688: IFFALSE 36700
// min_x := 0 else
36690: LD_ADDR_VAR 0 7
36694: PUSH
36695: LD_INT 0
36697: ST_TO_ADDR
36698: GO 36716
// min_x := x - r ;
36700: LD_ADDR_VAR 0 7
36704: PUSH
36705: LD_VAR 0 2
36709: PUSH
36710: LD_VAR 0 4
36714: MINUS
36715: ST_TO_ADDR
// if y - r < 0 then
36716: LD_VAR 0 3
36720: PUSH
36721: LD_VAR 0 4
36725: MINUS
36726: PUSH
36727: LD_INT 0
36729: LESS
36730: IFFALSE 36742
// min_y := 0 else
36732: LD_ADDR_VAR 0 8
36736: PUSH
36737: LD_INT 0
36739: ST_TO_ADDR
36740: GO 36758
// min_y := y - r ;
36742: LD_ADDR_VAR 0 8
36746: PUSH
36747: LD_VAR 0 3
36751: PUSH
36752: LD_VAR 0 4
36756: MINUS
36757: ST_TO_ADDR
// max_x := x + r ;
36758: LD_ADDR_VAR 0 9
36762: PUSH
36763: LD_VAR 0 2
36767: PUSH
36768: LD_VAR 0 4
36772: PLUS
36773: ST_TO_ADDR
// max_y := y + r ;
36774: LD_ADDR_VAR 0 10
36778: PUSH
36779: LD_VAR 0 3
36783: PUSH
36784: LD_VAR 0 4
36788: PLUS
36789: ST_TO_ADDR
// for _x = min_x to max_x do
36790: LD_ADDR_VAR 0 11
36794: PUSH
36795: DOUBLE
36796: LD_VAR 0 7
36800: DEC
36801: ST_TO_ADDR
36802: LD_VAR 0 9
36806: PUSH
36807: FOR_TO
36808: IFFALSE 36925
// for _y = min_y to max_y do
36810: LD_ADDR_VAR 0 12
36814: PUSH
36815: DOUBLE
36816: LD_VAR 0 8
36820: DEC
36821: ST_TO_ADDR
36822: LD_VAR 0 10
36826: PUSH
36827: FOR_TO
36828: IFFALSE 36921
// begin if not ValidHex ( _x , _y ) then
36830: LD_VAR 0 11
36834: PPUSH
36835: LD_VAR 0 12
36839: PPUSH
36840: CALL_OW 488
36844: NOT
36845: IFFALSE 36849
// continue ;
36847: GO 36827
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36849: LD_VAR 0 11
36853: PPUSH
36854: LD_VAR 0 12
36858: PPUSH
36859: CALL_OW 351
36863: PUSH
36864: LD_VAR 0 11
36868: PPUSH
36869: LD_VAR 0 12
36873: PPUSH
36874: CALL_OW 554
36878: AND
36879: IFFALSE 36919
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36881: LD_ADDR_VAR 0 13
36885: PUSH
36886: LD_VAR 0 13
36890: PPUSH
36891: LD_VAR 0 13
36895: PUSH
36896: LD_INT 1
36898: PLUS
36899: PPUSH
36900: LD_VAR 0 11
36904: PUSH
36905: LD_VAR 0 12
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PPUSH
36914: CALL_OW 2
36918: ST_TO_ADDR
// end ;
36919: GO 36827
36921: POP
36922: POP
36923: GO 36807
36925: POP
36926: POP
// if not list then
36927: LD_VAR 0 13
36931: NOT
36932: IFFALSE 36936
// exit ;
36934: GO 37007
// for i in list do
36936: LD_ADDR_VAR 0 6
36940: PUSH
36941: LD_VAR 0 13
36945: PUSH
36946: FOR_IN
36947: IFFALSE 37005
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36949: LD_VAR 0 1
36953: PPUSH
36954: LD_STRING M
36956: PUSH
36957: LD_VAR 0 6
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PUSH
36966: LD_VAR 0 6
36970: PUSH
36971: LD_INT 2
36973: ARRAY
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: PUSH
36996: EMPTY
36997: LIST
36998: PPUSH
36999: CALL_OW 447
37003: GO 36946
37005: POP
37006: POP
// end ;
37007: LD_VAR 0 5
37011: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37012: LD_EXP 113
37016: NOT
37017: IFFALSE 37067
37019: GO 37021
37021: DISABLE
// begin initHack := true ;
37022: LD_ADDR_EXP 113
37026: PUSH
37027: LD_INT 1
37029: ST_TO_ADDR
// hackTanks := [ ] ;
37030: LD_ADDR_EXP 114
37034: PUSH
37035: EMPTY
37036: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37037: LD_ADDR_EXP 115
37041: PUSH
37042: EMPTY
37043: ST_TO_ADDR
// hackLimit := 3 ;
37044: LD_ADDR_EXP 116
37048: PUSH
37049: LD_INT 3
37051: ST_TO_ADDR
// hackDist := 12 ;
37052: LD_ADDR_EXP 117
37056: PUSH
37057: LD_INT 12
37059: ST_TO_ADDR
// hackCounter := [ ] ;
37060: LD_ADDR_EXP 118
37064: PUSH
37065: EMPTY
37066: ST_TO_ADDR
// end ;
37067: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37068: LD_EXP 113
37072: PUSH
37073: LD_INT 34
37075: PUSH
37076: LD_INT 99
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PPUSH
37083: CALL_OW 69
37087: AND
37088: IFFALSE 37341
37090: GO 37092
37092: DISABLE
37093: LD_INT 0
37095: PPUSH
37096: PPUSH
// begin enable ;
37097: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37098: LD_ADDR_VAR 0 1
37102: PUSH
37103: LD_INT 34
37105: PUSH
37106: LD_INT 99
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PPUSH
37113: CALL_OW 69
37117: PUSH
37118: FOR_IN
37119: IFFALSE 37339
// begin if not i in hackTanks then
37121: LD_VAR 0 1
37125: PUSH
37126: LD_EXP 114
37130: IN
37131: NOT
37132: IFFALSE 37215
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37134: LD_ADDR_EXP 114
37138: PUSH
37139: LD_EXP 114
37143: PPUSH
37144: LD_EXP 114
37148: PUSH
37149: LD_INT 1
37151: PLUS
37152: PPUSH
37153: LD_VAR 0 1
37157: PPUSH
37158: CALL_OW 1
37162: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37163: LD_ADDR_EXP 115
37167: PUSH
37168: LD_EXP 115
37172: PPUSH
37173: LD_EXP 115
37177: PUSH
37178: LD_INT 1
37180: PLUS
37181: PPUSH
37182: EMPTY
37183: PPUSH
37184: CALL_OW 1
37188: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37189: LD_ADDR_EXP 118
37193: PUSH
37194: LD_EXP 118
37198: PPUSH
37199: LD_EXP 118
37203: PUSH
37204: LD_INT 1
37206: PLUS
37207: PPUSH
37208: EMPTY
37209: PPUSH
37210: CALL_OW 1
37214: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 302
37224: NOT
37225: IFFALSE 37238
// begin HackUnlinkAll ( i ) ;
37227: LD_VAR 0 1
37231: PPUSH
37232: CALL 37344 0 1
// continue ;
37236: GO 37118
// end ; HackCheckCapturedStatus ( i ) ;
37238: LD_VAR 0 1
37242: PPUSH
37243: CALL 37787 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37247: LD_ADDR_VAR 0 2
37251: PUSH
37252: LD_INT 81
37254: PUSH
37255: LD_VAR 0 1
37259: PPUSH
37260: CALL_OW 255
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 33
37271: PUSH
37272: LD_INT 3
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 91
37281: PUSH
37282: LD_VAR 0 1
37286: PUSH
37287: LD_EXP 117
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 50
37299: PUSH
37300: EMPTY
37301: LIST
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: PPUSH
37309: CALL_OW 69
37313: ST_TO_ADDR
// if not tmp then
37314: LD_VAR 0 2
37318: NOT
37319: IFFALSE 37323
// continue ;
37321: GO 37118
// HackLink ( i , tmp ) ;
37323: LD_VAR 0 1
37327: PPUSH
37328: LD_VAR 0 2
37332: PPUSH
37333: CALL 37480 0 2
// end ;
37337: GO 37118
37339: POP
37340: POP
// end ;
37341: PPOPN 2
37343: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37344: LD_INT 0
37346: PPUSH
37347: PPUSH
37348: PPUSH
// if not hack in hackTanks then
37349: LD_VAR 0 1
37353: PUSH
37354: LD_EXP 114
37358: IN
37359: NOT
37360: IFFALSE 37364
// exit ;
37362: GO 37475
// index := GetElementIndex ( hackTanks , hack ) ;
37364: LD_ADDR_VAR 0 4
37368: PUSH
37369: LD_EXP 114
37373: PPUSH
37374: LD_VAR 0 1
37378: PPUSH
37379: CALL 44917 0 2
37383: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37384: LD_EXP 115
37388: PUSH
37389: LD_VAR 0 4
37393: ARRAY
37394: IFFALSE 37475
// begin for i in hackTanksCaptured [ index ] do
37396: LD_ADDR_VAR 0 3
37400: PUSH
37401: LD_EXP 115
37405: PUSH
37406: LD_VAR 0 4
37410: ARRAY
37411: PUSH
37412: FOR_IN
37413: IFFALSE 37439
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37415: LD_VAR 0 3
37419: PUSH
37420: LD_INT 1
37422: ARRAY
37423: PPUSH
37424: LD_VAR 0 3
37428: PUSH
37429: LD_INT 2
37431: ARRAY
37432: PPUSH
37433: CALL_OW 235
37437: GO 37412
37439: POP
37440: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37441: LD_ADDR_EXP 115
37445: PUSH
37446: LD_EXP 115
37450: PPUSH
37451: LD_VAR 0 4
37455: PPUSH
37456: EMPTY
37457: PPUSH
37458: CALL_OW 1
37462: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37463: LD_VAR 0 1
37467: PPUSH
37468: LD_INT 0
37470: PPUSH
37471: CALL_OW 505
// end ; end ;
37475: LD_VAR 0 2
37479: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37480: LD_INT 0
37482: PPUSH
37483: PPUSH
37484: PPUSH
// if not hack in hackTanks or not vehicles then
37485: LD_VAR 0 1
37489: PUSH
37490: LD_EXP 114
37494: IN
37495: NOT
37496: PUSH
37497: LD_VAR 0 2
37501: NOT
37502: OR
37503: IFFALSE 37507
// exit ;
37505: GO 37782
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37507: LD_ADDR_VAR 0 2
37511: PUSH
37512: LD_VAR 0 1
37516: PPUSH
37517: LD_VAR 0 2
37521: PPUSH
37522: LD_INT 1
37524: PPUSH
37525: LD_INT 1
37527: PPUSH
37528: CALL 45567 0 4
37532: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37533: LD_ADDR_VAR 0 5
37537: PUSH
37538: LD_EXP 114
37542: PPUSH
37543: LD_VAR 0 1
37547: PPUSH
37548: CALL 44917 0 2
37552: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37553: LD_EXP 115
37557: PUSH
37558: LD_VAR 0 5
37562: ARRAY
37563: PUSH
37564: LD_EXP 116
37568: LESS
37569: IFFALSE 37758
// begin for i := 1 to vehicles do
37571: LD_ADDR_VAR 0 4
37575: PUSH
37576: DOUBLE
37577: LD_INT 1
37579: DEC
37580: ST_TO_ADDR
37581: LD_VAR 0 2
37585: PUSH
37586: FOR_TO
37587: IFFALSE 37756
// begin if hackTanksCaptured [ index ] = hackLimit then
37589: LD_EXP 115
37593: PUSH
37594: LD_VAR 0 5
37598: ARRAY
37599: PUSH
37600: LD_EXP 116
37604: EQUAL
37605: IFFALSE 37609
// break ;
37607: GO 37756
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37609: LD_ADDR_EXP 118
37613: PUSH
37614: LD_EXP 118
37618: PPUSH
37619: LD_VAR 0 5
37623: PPUSH
37624: LD_EXP 118
37628: PUSH
37629: LD_VAR 0 5
37633: ARRAY
37634: PUSH
37635: LD_INT 1
37637: PLUS
37638: PPUSH
37639: CALL_OW 1
37643: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37644: LD_ADDR_EXP 115
37648: PUSH
37649: LD_EXP 115
37653: PPUSH
37654: LD_VAR 0 5
37658: PUSH
37659: LD_EXP 115
37663: PUSH
37664: LD_VAR 0 5
37668: ARRAY
37669: PUSH
37670: LD_INT 1
37672: PLUS
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PPUSH
37678: LD_VAR 0 2
37682: PUSH
37683: LD_VAR 0 4
37687: ARRAY
37688: PUSH
37689: LD_VAR 0 2
37693: PUSH
37694: LD_VAR 0 4
37698: ARRAY
37699: PPUSH
37700: CALL_OW 255
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PPUSH
37709: CALL 45132 0 3
37713: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37714: LD_VAR 0 2
37718: PUSH
37719: LD_VAR 0 4
37723: ARRAY
37724: PPUSH
37725: LD_VAR 0 1
37729: PPUSH
37730: CALL_OW 255
37734: PPUSH
37735: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37739: LD_VAR 0 2
37743: PUSH
37744: LD_VAR 0 4
37748: ARRAY
37749: PPUSH
37750: CALL_OW 141
// end ;
37754: GO 37586
37756: POP
37757: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37758: LD_VAR 0 1
37762: PPUSH
37763: LD_EXP 115
37767: PUSH
37768: LD_VAR 0 5
37772: ARRAY
37773: PUSH
37774: LD_INT 0
37776: PLUS
37777: PPUSH
37778: CALL_OW 505
// end ;
37782: LD_VAR 0 3
37786: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37787: LD_INT 0
37789: PPUSH
37790: PPUSH
37791: PPUSH
37792: PPUSH
// if not hack in hackTanks then
37793: LD_VAR 0 1
37797: PUSH
37798: LD_EXP 114
37802: IN
37803: NOT
37804: IFFALSE 37808
// exit ;
37806: GO 38048
// index := GetElementIndex ( hackTanks , hack ) ;
37808: LD_ADDR_VAR 0 4
37812: PUSH
37813: LD_EXP 114
37817: PPUSH
37818: LD_VAR 0 1
37822: PPUSH
37823: CALL 44917 0 2
37827: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37828: LD_ADDR_VAR 0 3
37832: PUSH
37833: DOUBLE
37834: LD_EXP 115
37838: PUSH
37839: LD_VAR 0 4
37843: ARRAY
37844: INC
37845: ST_TO_ADDR
37846: LD_INT 1
37848: PUSH
37849: FOR_DOWNTO
37850: IFFALSE 38022
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37852: LD_ADDR_VAR 0 5
37856: PUSH
37857: LD_EXP 115
37861: PUSH
37862: LD_VAR 0 4
37866: ARRAY
37867: PUSH
37868: LD_VAR 0 3
37872: ARRAY
37873: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37874: LD_VAR 0 5
37878: PUSH
37879: LD_INT 1
37881: ARRAY
37882: PPUSH
37883: CALL_OW 302
37887: NOT
37888: PUSH
37889: LD_VAR 0 5
37893: PUSH
37894: LD_INT 1
37896: ARRAY
37897: PPUSH
37898: CALL_OW 255
37902: PUSH
37903: LD_VAR 0 1
37907: PPUSH
37908: CALL_OW 255
37912: NONEQUAL
37913: OR
37914: IFFALSE 38020
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37916: LD_VAR 0 5
37920: PUSH
37921: LD_INT 1
37923: ARRAY
37924: PPUSH
37925: CALL_OW 305
37929: PUSH
37930: LD_VAR 0 5
37934: PUSH
37935: LD_INT 1
37937: ARRAY
37938: PPUSH
37939: CALL_OW 255
37943: PUSH
37944: LD_VAR 0 1
37948: PPUSH
37949: CALL_OW 255
37953: EQUAL
37954: AND
37955: IFFALSE 37979
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37957: LD_VAR 0 5
37961: PUSH
37962: LD_INT 1
37964: ARRAY
37965: PPUSH
37966: LD_VAR 0 5
37970: PUSH
37971: LD_INT 2
37973: ARRAY
37974: PPUSH
37975: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37979: LD_ADDR_EXP 115
37983: PUSH
37984: LD_EXP 115
37988: PPUSH
37989: LD_VAR 0 4
37993: PPUSH
37994: LD_EXP 115
37998: PUSH
37999: LD_VAR 0 4
38003: ARRAY
38004: PPUSH
38005: LD_VAR 0 3
38009: PPUSH
38010: CALL_OW 3
38014: PPUSH
38015: CALL_OW 1
38019: ST_TO_ADDR
// end ; end ;
38020: GO 37849
38022: POP
38023: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38024: LD_VAR 0 1
38028: PPUSH
38029: LD_EXP 115
38033: PUSH
38034: LD_VAR 0 4
38038: ARRAY
38039: PUSH
38040: LD_INT 0
38042: PLUS
38043: PPUSH
38044: CALL_OW 505
// end ;
38048: LD_VAR 0 2
38052: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38053: LD_INT 0
38055: PPUSH
38056: PPUSH
38057: PPUSH
38058: PPUSH
// if not hack in hackTanks then
38059: LD_VAR 0 1
38063: PUSH
38064: LD_EXP 114
38068: IN
38069: NOT
38070: IFFALSE 38074
// exit ;
38072: GO 38159
// index := GetElementIndex ( hackTanks , hack ) ;
38074: LD_ADDR_VAR 0 5
38078: PUSH
38079: LD_EXP 114
38083: PPUSH
38084: LD_VAR 0 1
38088: PPUSH
38089: CALL 44917 0 2
38093: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38094: LD_ADDR_VAR 0 4
38098: PUSH
38099: DOUBLE
38100: LD_INT 1
38102: DEC
38103: ST_TO_ADDR
38104: LD_EXP 115
38108: PUSH
38109: LD_VAR 0 5
38113: ARRAY
38114: PUSH
38115: FOR_TO
38116: IFFALSE 38157
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38118: LD_EXP 115
38122: PUSH
38123: LD_VAR 0 5
38127: ARRAY
38128: PUSH
38129: LD_VAR 0 4
38133: ARRAY
38134: PUSH
38135: LD_INT 1
38137: ARRAY
38138: PUSH
38139: LD_VAR 0 2
38143: EQUAL
38144: IFFALSE 38155
// KillUnit ( vehicle ) ;
38146: LD_VAR 0 2
38150: PPUSH
38151: CALL_OW 66
38155: GO 38115
38157: POP
38158: POP
// end ;
38159: LD_VAR 0 3
38163: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38164: LD_EXP 119
38168: NOT
38169: IFFALSE 38204
38171: GO 38173
38173: DISABLE
// begin initMiner := true ;
38174: LD_ADDR_EXP 119
38178: PUSH
38179: LD_INT 1
38181: ST_TO_ADDR
// minersList := [ ] ;
38182: LD_ADDR_EXP 120
38186: PUSH
38187: EMPTY
38188: ST_TO_ADDR
// minerMinesList := [ ] ;
38189: LD_ADDR_EXP 121
38193: PUSH
38194: EMPTY
38195: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38196: LD_ADDR_EXP 122
38200: PUSH
38201: LD_INT 5
38203: ST_TO_ADDR
// end ;
38204: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38205: LD_EXP 119
38209: PUSH
38210: LD_INT 34
38212: PUSH
38213: LD_INT 81
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PPUSH
38220: CALL_OW 69
38224: AND
38225: IFFALSE 38686
38227: GO 38229
38229: DISABLE
38230: LD_INT 0
38232: PPUSH
38233: PPUSH
38234: PPUSH
38235: PPUSH
// begin enable ;
38236: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38237: LD_ADDR_VAR 0 1
38241: PUSH
38242: LD_INT 34
38244: PUSH
38245: LD_INT 81
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PPUSH
38252: CALL_OW 69
38256: PUSH
38257: FOR_IN
38258: IFFALSE 38330
// begin if not i in minersList then
38260: LD_VAR 0 1
38264: PUSH
38265: LD_EXP 120
38269: IN
38270: NOT
38271: IFFALSE 38328
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38273: LD_ADDR_EXP 120
38277: PUSH
38278: LD_EXP 120
38282: PPUSH
38283: LD_EXP 120
38287: PUSH
38288: LD_INT 1
38290: PLUS
38291: PPUSH
38292: LD_VAR 0 1
38296: PPUSH
38297: CALL_OW 1
38301: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38302: LD_ADDR_EXP 121
38306: PUSH
38307: LD_EXP 121
38311: PPUSH
38312: LD_EXP 121
38316: PUSH
38317: LD_INT 1
38319: PLUS
38320: PPUSH
38321: EMPTY
38322: PPUSH
38323: CALL_OW 1
38327: ST_TO_ADDR
// end end ;
38328: GO 38257
38330: POP
38331: POP
// for i := minerMinesList downto 1 do
38332: LD_ADDR_VAR 0 1
38336: PUSH
38337: DOUBLE
38338: LD_EXP 121
38342: INC
38343: ST_TO_ADDR
38344: LD_INT 1
38346: PUSH
38347: FOR_DOWNTO
38348: IFFALSE 38684
// begin if IsLive ( minersList [ i ] ) then
38350: LD_EXP 120
38354: PUSH
38355: LD_VAR 0 1
38359: ARRAY
38360: PPUSH
38361: CALL_OW 300
38365: IFFALSE 38393
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38367: LD_EXP 120
38371: PUSH
38372: LD_VAR 0 1
38376: ARRAY
38377: PPUSH
38378: LD_EXP 121
38382: PUSH
38383: LD_VAR 0 1
38387: ARRAY
38388: PPUSH
38389: CALL_OW 505
// if not minerMinesList [ i ] then
38393: LD_EXP 121
38397: PUSH
38398: LD_VAR 0 1
38402: ARRAY
38403: NOT
38404: IFFALSE 38408
// continue ;
38406: GO 38347
// for j := minerMinesList [ i ] downto 1 do
38408: LD_ADDR_VAR 0 2
38412: PUSH
38413: DOUBLE
38414: LD_EXP 121
38418: PUSH
38419: LD_VAR 0 1
38423: ARRAY
38424: INC
38425: ST_TO_ADDR
38426: LD_INT 1
38428: PUSH
38429: FOR_DOWNTO
38430: IFFALSE 38680
// begin side := GetSide ( minersList [ i ] ) ;
38432: LD_ADDR_VAR 0 3
38436: PUSH
38437: LD_EXP 120
38441: PUSH
38442: LD_VAR 0 1
38446: ARRAY
38447: PPUSH
38448: CALL_OW 255
38452: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38453: LD_ADDR_VAR 0 4
38457: PUSH
38458: LD_EXP 121
38462: PUSH
38463: LD_VAR 0 1
38467: ARRAY
38468: PUSH
38469: LD_VAR 0 2
38473: ARRAY
38474: PUSH
38475: LD_INT 1
38477: ARRAY
38478: PPUSH
38479: LD_EXP 121
38483: PUSH
38484: LD_VAR 0 1
38488: ARRAY
38489: PUSH
38490: LD_VAR 0 2
38494: ARRAY
38495: PUSH
38496: LD_INT 2
38498: ARRAY
38499: PPUSH
38500: CALL_OW 428
38504: ST_TO_ADDR
// if not tmp then
38505: LD_VAR 0 4
38509: NOT
38510: IFFALSE 38514
// continue ;
38512: GO 38429
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38514: LD_VAR 0 4
38518: PUSH
38519: LD_INT 81
38521: PUSH
38522: LD_VAR 0 3
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PPUSH
38531: CALL_OW 69
38535: IN
38536: PUSH
38537: LD_EXP 121
38541: PUSH
38542: LD_VAR 0 1
38546: ARRAY
38547: PUSH
38548: LD_VAR 0 2
38552: ARRAY
38553: PUSH
38554: LD_INT 1
38556: ARRAY
38557: PPUSH
38558: LD_EXP 121
38562: PUSH
38563: LD_VAR 0 1
38567: ARRAY
38568: PUSH
38569: LD_VAR 0 2
38573: ARRAY
38574: PUSH
38575: LD_INT 2
38577: ARRAY
38578: PPUSH
38579: CALL_OW 458
38583: AND
38584: IFFALSE 38678
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38586: LD_EXP 121
38590: PUSH
38591: LD_VAR 0 1
38595: ARRAY
38596: PUSH
38597: LD_VAR 0 2
38601: ARRAY
38602: PUSH
38603: LD_INT 1
38605: ARRAY
38606: PPUSH
38607: LD_EXP 121
38611: PUSH
38612: LD_VAR 0 1
38616: ARRAY
38617: PUSH
38618: LD_VAR 0 2
38622: ARRAY
38623: PUSH
38624: LD_INT 2
38626: ARRAY
38627: PPUSH
38628: LD_VAR 0 3
38632: PPUSH
38633: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38637: LD_ADDR_EXP 121
38641: PUSH
38642: LD_EXP 121
38646: PPUSH
38647: LD_VAR 0 1
38651: PPUSH
38652: LD_EXP 121
38656: PUSH
38657: LD_VAR 0 1
38661: ARRAY
38662: PPUSH
38663: LD_VAR 0 2
38667: PPUSH
38668: CALL_OW 3
38672: PPUSH
38673: CALL_OW 1
38677: ST_TO_ADDR
// end ; end ;
38678: GO 38429
38680: POP
38681: POP
// end ;
38682: GO 38347
38684: POP
38685: POP
// end ;
38686: PPOPN 4
38688: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38689: LD_INT 0
38691: PPUSH
38692: PPUSH
// result := false ;
38693: LD_ADDR_VAR 0 4
38697: PUSH
38698: LD_INT 0
38700: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38701: LD_VAR 0 1
38705: PPUSH
38706: CALL_OW 264
38710: PUSH
38711: LD_INT 81
38713: EQUAL
38714: NOT
38715: IFFALSE 38719
// exit ;
38717: GO 38959
// index := GetElementIndex ( minersList , unit ) ;
38719: LD_ADDR_VAR 0 5
38723: PUSH
38724: LD_EXP 120
38728: PPUSH
38729: LD_VAR 0 1
38733: PPUSH
38734: CALL 44917 0 2
38738: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38739: LD_EXP 121
38743: PUSH
38744: LD_VAR 0 5
38748: ARRAY
38749: PUSH
38750: LD_EXP 122
38754: GREATEREQUAL
38755: IFFALSE 38759
// exit ;
38757: GO 38959
// ComMoveXY ( unit , x , y ) ;
38759: LD_VAR 0 1
38763: PPUSH
38764: LD_VAR 0 2
38768: PPUSH
38769: LD_VAR 0 3
38773: PPUSH
38774: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38778: LD_INT 35
38780: PPUSH
38781: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38785: LD_VAR 0 1
38789: PPUSH
38790: LD_VAR 0 2
38794: PPUSH
38795: LD_VAR 0 3
38799: PPUSH
38800: CALL 76301 0 3
38804: NOT
38805: PUSH
38806: LD_VAR 0 1
38810: PPUSH
38811: CALL_OW 314
38815: AND
38816: IFFALSE 38820
// exit ;
38818: GO 38959
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38820: LD_VAR 0 2
38824: PPUSH
38825: LD_VAR 0 3
38829: PPUSH
38830: CALL_OW 428
38834: PUSH
38835: LD_VAR 0 1
38839: EQUAL
38840: PUSH
38841: LD_VAR 0 1
38845: PPUSH
38846: CALL_OW 314
38850: NOT
38851: AND
38852: IFFALSE 38778
// PlaySoundXY ( x , y , PlantMine ) ;
38854: LD_VAR 0 2
38858: PPUSH
38859: LD_VAR 0 3
38863: PPUSH
38864: LD_STRING PlantMine
38866: PPUSH
38867: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38871: LD_VAR 0 2
38875: PPUSH
38876: LD_VAR 0 3
38880: PPUSH
38881: LD_VAR 0 1
38885: PPUSH
38886: CALL_OW 255
38890: PPUSH
38891: LD_INT 0
38893: PPUSH
38894: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38898: LD_ADDR_EXP 121
38902: PUSH
38903: LD_EXP 121
38907: PPUSH
38908: LD_VAR 0 5
38912: PUSH
38913: LD_EXP 121
38917: PUSH
38918: LD_VAR 0 5
38922: ARRAY
38923: PUSH
38924: LD_INT 1
38926: PLUS
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PPUSH
38932: LD_VAR 0 2
38936: PUSH
38937: LD_VAR 0 3
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PPUSH
38946: CALL 45132 0 3
38950: ST_TO_ADDR
// result := true ;
38951: LD_ADDR_VAR 0 4
38955: PUSH
38956: LD_INT 1
38958: ST_TO_ADDR
// end ;
38959: LD_VAR 0 4
38963: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38964: LD_INT 0
38966: PPUSH
38967: PPUSH
38968: PPUSH
// if not unit in minersList then
38969: LD_VAR 0 1
38973: PUSH
38974: LD_EXP 120
38978: IN
38979: NOT
38980: IFFALSE 38984
// exit ;
38982: GO 39376
// index := GetElementIndex ( minersList , unit ) ;
38984: LD_ADDR_VAR 0 6
38988: PUSH
38989: LD_EXP 120
38993: PPUSH
38994: LD_VAR 0 1
38998: PPUSH
38999: CALL 44917 0 2
39003: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39004: LD_ADDR_VAR 0 5
39008: PUSH
39009: DOUBLE
39010: LD_EXP 121
39014: PUSH
39015: LD_VAR 0 6
39019: ARRAY
39020: INC
39021: ST_TO_ADDR
39022: LD_INT 1
39024: PUSH
39025: FOR_DOWNTO
39026: IFFALSE 39187
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39028: LD_EXP 121
39032: PUSH
39033: LD_VAR 0 6
39037: ARRAY
39038: PUSH
39039: LD_VAR 0 5
39043: ARRAY
39044: PUSH
39045: LD_INT 1
39047: ARRAY
39048: PUSH
39049: LD_VAR 0 2
39053: EQUAL
39054: PUSH
39055: LD_EXP 121
39059: PUSH
39060: LD_VAR 0 6
39064: ARRAY
39065: PUSH
39066: LD_VAR 0 5
39070: ARRAY
39071: PUSH
39072: LD_INT 2
39074: ARRAY
39075: PUSH
39076: LD_VAR 0 3
39080: EQUAL
39081: AND
39082: IFFALSE 39185
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39084: LD_EXP 121
39088: PUSH
39089: LD_VAR 0 6
39093: ARRAY
39094: PUSH
39095: LD_VAR 0 5
39099: ARRAY
39100: PUSH
39101: LD_INT 1
39103: ARRAY
39104: PPUSH
39105: LD_EXP 121
39109: PUSH
39110: LD_VAR 0 6
39114: ARRAY
39115: PUSH
39116: LD_VAR 0 5
39120: ARRAY
39121: PUSH
39122: LD_INT 2
39124: ARRAY
39125: PPUSH
39126: LD_VAR 0 1
39130: PPUSH
39131: CALL_OW 255
39135: PPUSH
39136: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39140: LD_ADDR_EXP 121
39144: PUSH
39145: LD_EXP 121
39149: PPUSH
39150: LD_VAR 0 6
39154: PPUSH
39155: LD_EXP 121
39159: PUSH
39160: LD_VAR 0 6
39164: ARRAY
39165: PPUSH
39166: LD_VAR 0 5
39170: PPUSH
39171: CALL_OW 3
39175: PPUSH
39176: CALL_OW 1
39180: ST_TO_ADDR
// exit ;
39181: POP
39182: POP
39183: GO 39376
// end ; end ;
39185: GO 39025
39187: POP
39188: POP
// for i := minerMinesList [ index ] downto 1 do
39189: LD_ADDR_VAR 0 5
39193: PUSH
39194: DOUBLE
39195: LD_EXP 121
39199: PUSH
39200: LD_VAR 0 6
39204: ARRAY
39205: INC
39206: ST_TO_ADDR
39207: LD_INT 1
39209: PUSH
39210: FOR_DOWNTO
39211: IFFALSE 39374
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39213: LD_EXP 121
39217: PUSH
39218: LD_VAR 0 6
39222: ARRAY
39223: PUSH
39224: LD_VAR 0 5
39228: ARRAY
39229: PUSH
39230: LD_INT 1
39232: ARRAY
39233: PPUSH
39234: LD_EXP 121
39238: PUSH
39239: LD_VAR 0 6
39243: ARRAY
39244: PUSH
39245: LD_VAR 0 5
39249: ARRAY
39250: PUSH
39251: LD_INT 2
39253: ARRAY
39254: PPUSH
39255: LD_VAR 0 2
39259: PPUSH
39260: LD_VAR 0 3
39264: PPUSH
39265: CALL_OW 298
39269: PUSH
39270: LD_INT 6
39272: LESS
39273: IFFALSE 39372
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39275: LD_EXP 121
39279: PUSH
39280: LD_VAR 0 6
39284: ARRAY
39285: PUSH
39286: LD_VAR 0 5
39290: ARRAY
39291: PUSH
39292: LD_INT 1
39294: ARRAY
39295: PPUSH
39296: LD_EXP 121
39300: PUSH
39301: LD_VAR 0 6
39305: ARRAY
39306: PUSH
39307: LD_VAR 0 5
39311: ARRAY
39312: PUSH
39313: LD_INT 2
39315: ARRAY
39316: PPUSH
39317: LD_VAR 0 1
39321: PPUSH
39322: CALL_OW 255
39326: PPUSH
39327: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39331: LD_ADDR_EXP 121
39335: PUSH
39336: LD_EXP 121
39340: PPUSH
39341: LD_VAR 0 6
39345: PPUSH
39346: LD_EXP 121
39350: PUSH
39351: LD_VAR 0 6
39355: ARRAY
39356: PPUSH
39357: LD_VAR 0 5
39361: PPUSH
39362: CALL_OW 3
39366: PPUSH
39367: CALL_OW 1
39371: ST_TO_ADDR
// end ; end ;
39372: GO 39210
39374: POP
39375: POP
// end ;
39376: LD_VAR 0 4
39380: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39381: LD_INT 0
39383: PPUSH
39384: PPUSH
39385: PPUSH
39386: PPUSH
39387: PPUSH
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39392: LD_VAR 0 1
39396: PPUSH
39397: CALL_OW 264
39401: PUSH
39402: LD_INT 81
39404: EQUAL
39405: NOT
39406: PUSH
39407: LD_VAR 0 1
39411: PUSH
39412: LD_EXP 120
39416: IN
39417: NOT
39418: OR
39419: IFFALSE 39423
// exit ;
39421: GO 39745
// index := GetElementIndex ( minersList , unit ) ;
39423: LD_ADDR_VAR 0 6
39427: PUSH
39428: LD_EXP 120
39432: PPUSH
39433: LD_VAR 0 1
39437: PPUSH
39438: CALL 44917 0 2
39442: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39443: LD_ADDR_VAR 0 8
39447: PUSH
39448: LD_EXP 122
39452: PUSH
39453: LD_EXP 121
39457: PUSH
39458: LD_VAR 0 6
39462: ARRAY
39463: MINUS
39464: ST_TO_ADDR
// if not minesFreeAmount then
39465: LD_VAR 0 8
39469: NOT
39470: IFFALSE 39474
// exit ;
39472: GO 39745
// tmp := [ ] ;
39474: LD_ADDR_VAR 0 7
39478: PUSH
39479: EMPTY
39480: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39481: LD_ADDR_VAR 0 5
39485: PUSH
39486: DOUBLE
39487: LD_INT 1
39489: DEC
39490: ST_TO_ADDR
39491: LD_VAR 0 8
39495: PUSH
39496: FOR_TO
39497: IFFALSE 39692
// begin _d := rand ( 0 , 5 ) ;
39499: LD_ADDR_VAR 0 11
39503: PUSH
39504: LD_INT 0
39506: PPUSH
39507: LD_INT 5
39509: PPUSH
39510: CALL_OW 12
39514: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39515: LD_ADDR_VAR 0 12
39519: PUSH
39520: LD_INT 2
39522: PPUSH
39523: LD_INT 6
39525: PPUSH
39526: CALL_OW 12
39530: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39531: LD_ADDR_VAR 0 9
39535: PUSH
39536: LD_VAR 0 2
39540: PPUSH
39541: LD_VAR 0 11
39545: PPUSH
39546: LD_VAR 0 12
39550: PPUSH
39551: CALL_OW 272
39555: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39556: LD_ADDR_VAR 0 10
39560: PUSH
39561: LD_VAR 0 3
39565: PPUSH
39566: LD_VAR 0 11
39570: PPUSH
39571: LD_VAR 0 12
39575: PPUSH
39576: CALL_OW 273
39580: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39581: LD_VAR 0 9
39585: PPUSH
39586: LD_VAR 0 10
39590: PPUSH
39591: CALL_OW 488
39595: PUSH
39596: LD_VAR 0 9
39600: PUSH
39601: LD_VAR 0 10
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_VAR 0 7
39614: IN
39615: NOT
39616: AND
39617: PUSH
39618: LD_VAR 0 9
39622: PPUSH
39623: LD_VAR 0 10
39627: PPUSH
39628: CALL_OW 458
39632: NOT
39633: AND
39634: IFFALSE 39676
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39636: LD_ADDR_VAR 0 7
39640: PUSH
39641: LD_VAR 0 7
39645: PPUSH
39646: LD_VAR 0 7
39650: PUSH
39651: LD_INT 1
39653: PLUS
39654: PPUSH
39655: LD_VAR 0 9
39659: PUSH
39660: LD_VAR 0 10
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PPUSH
39669: CALL_OW 1
39673: ST_TO_ADDR
39674: GO 39690
// i := i - 1 ;
39676: LD_ADDR_VAR 0 5
39680: PUSH
39681: LD_VAR 0 5
39685: PUSH
39686: LD_INT 1
39688: MINUS
39689: ST_TO_ADDR
// end ;
39690: GO 39496
39692: POP
39693: POP
// for i in tmp do
39694: LD_ADDR_VAR 0 5
39698: PUSH
39699: LD_VAR 0 7
39703: PUSH
39704: FOR_IN
39705: IFFALSE 39743
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39707: LD_VAR 0 1
39711: PPUSH
39712: LD_VAR 0 5
39716: PUSH
39717: LD_INT 1
39719: ARRAY
39720: PPUSH
39721: LD_VAR 0 5
39725: PUSH
39726: LD_INT 2
39728: ARRAY
39729: PPUSH
39730: CALL 38689 0 3
39734: NOT
39735: IFFALSE 39741
// exit ;
39737: POP
39738: POP
39739: GO 39745
39741: GO 39704
39743: POP
39744: POP
// end ;
39745: LD_VAR 0 4
39749: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39750: LD_INT 0
39752: PPUSH
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
39757: PPUSH
39758: PPUSH
// if not GetClass ( unit ) = class_sniper then
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 257
39768: PUSH
39769: LD_INT 5
39771: EQUAL
39772: NOT
39773: IFFALSE 39777
// exit ;
39775: GO 40165
// dist := 8 ;
39777: LD_ADDR_VAR 0 5
39781: PUSH
39782: LD_INT 8
39784: ST_TO_ADDR
// viewRange := 12 ;
39785: LD_ADDR_VAR 0 7
39789: PUSH
39790: LD_INT 12
39792: ST_TO_ADDR
// side := GetSide ( unit ) ;
39793: LD_ADDR_VAR 0 6
39797: PUSH
39798: LD_VAR 0 1
39802: PPUSH
39803: CALL_OW 255
39807: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39808: LD_INT 61
39810: PPUSH
39811: LD_VAR 0 6
39815: PPUSH
39816: CALL_OW 321
39820: PUSH
39821: LD_INT 2
39823: EQUAL
39824: IFFALSE 39834
// viewRange := 16 ;
39826: LD_ADDR_VAR 0 7
39830: PUSH
39831: LD_INT 16
39833: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39834: LD_VAR 0 1
39838: PPUSH
39839: LD_VAR 0 2
39843: PPUSH
39844: LD_VAR 0 3
39848: PPUSH
39849: CALL_OW 297
39853: PUSH
39854: LD_VAR 0 5
39858: GREATER
39859: IFFALSE 39938
// begin ComMoveXY ( unit , x , y ) ;
39861: LD_VAR 0 1
39865: PPUSH
39866: LD_VAR 0 2
39870: PPUSH
39871: LD_VAR 0 3
39875: PPUSH
39876: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39880: LD_INT 35
39882: PPUSH
39883: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39887: LD_VAR 0 1
39891: PPUSH
39892: LD_VAR 0 2
39896: PPUSH
39897: LD_VAR 0 3
39901: PPUSH
39902: CALL 76301 0 3
39906: NOT
39907: IFFALSE 39911
// exit ;
39909: GO 40165
// until GetDistUnitXY ( unit , x , y ) < dist ;
39911: LD_VAR 0 1
39915: PPUSH
39916: LD_VAR 0 2
39920: PPUSH
39921: LD_VAR 0 3
39925: PPUSH
39926: CALL_OW 297
39930: PUSH
39931: LD_VAR 0 5
39935: LESS
39936: IFFALSE 39880
// end ; ComTurnXY ( unit , x , y ) ;
39938: LD_VAR 0 1
39942: PPUSH
39943: LD_VAR 0 2
39947: PPUSH
39948: LD_VAR 0 3
39952: PPUSH
39953: CALL_OW 118
// wait ( 5 ) ;
39957: LD_INT 5
39959: PPUSH
39960: CALL_OW 67
// _d := GetDir ( unit ) ;
39964: LD_ADDR_VAR 0 10
39968: PUSH
39969: LD_VAR 0 1
39973: PPUSH
39974: CALL_OW 254
39978: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39979: LD_ADDR_VAR 0 8
39983: PUSH
39984: LD_VAR 0 1
39988: PPUSH
39989: CALL_OW 250
39993: PPUSH
39994: LD_VAR 0 10
39998: PPUSH
39999: LD_VAR 0 5
40003: PPUSH
40004: CALL_OW 272
40008: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40009: LD_ADDR_VAR 0 9
40013: PUSH
40014: LD_VAR 0 1
40018: PPUSH
40019: CALL_OW 251
40023: PPUSH
40024: LD_VAR 0 10
40028: PPUSH
40029: LD_VAR 0 5
40033: PPUSH
40034: CALL_OW 273
40038: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40039: LD_VAR 0 8
40043: PPUSH
40044: LD_VAR 0 9
40048: PPUSH
40049: CALL_OW 488
40053: NOT
40054: IFFALSE 40058
// exit ;
40056: GO 40165
// ComAnimCustom ( unit , 1 ) ;
40058: LD_VAR 0 1
40062: PPUSH
40063: LD_INT 1
40065: PPUSH
40066: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40070: LD_VAR 0 8
40074: PPUSH
40075: LD_VAR 0 9
40079: PPUSH
40080: LD_VAR 0 6
40084: PPUSH
40085: LD_VAR 0 7
40089: PPUSH
40090: CALL_OW 330
// repeat wait ( 1 ) ;
40094: LD_INT 1
40096: PPUSH
40097: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40101: LD_VAR 0 1
40105: PPUSH
40106: CALL_OW 316
40110: PUSH
40111: LD_VAR 0 1
40115: PPUSH
40116: CALL_OW 314
40120: OR
40121: PUSH
40122: LD_VAR 0 1
40126: PPUSH
40127: CALL_OW 302
40131: NOT
40132: OR
40133: PUSH
40134: LD_VAR 0 1
40138: PPUSH
40139: CALL_OW 301
40143: OR
40144: IFFALSE 40094
// RemoveSeeing ( _x , _y , side ) ;
40146: LD_VAR 0 8
40150: PPUSH
40151: LD_VAR 0 9
40155: PPUSH
40156: LD_VAR 0 6
40160: PPUSH
40161: CALL_OW 331
// end ; end_of_file
40165: LD_VAR 0 4
40169: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40170: LD_INT 0
40172: PPUSH
40173: PPUSH
// if exist_mode then
40174: LD_VAR 0 2
40178: IFFALSE 40203
// unit := CreateCharacter ( prefix & ident ) else
40180: LD_ADDR_VAR 0 5
40184: PUSH
40185: LD_VAR 0 3
40189: PUSH
40190: LD_VAR 0 1
40194: STR
40195: PPUSH
40196: CALL_OW 34
40200: ST_TO_ADDR
40201: GO 40218
// unit := NewCharacter ( ident ) ;
40203: LD_ADDR_VAR 0 5
40207: PUSH
40208: LD_VAR 0 1
40212: PPUSH
40213: CALL_OW 25
40217: ST_TO_ADDR
// result := unit ;
40218: LD_ADDR_VAR 0 4
40222: PUSH
40223: LD_VAR 0 5
40227: ST_TO_ADDR
// end ;
40228: LD_VAR 0 4
40232: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40233: LD_INT 0
40235: PPUSH
40236: PPUSH
// if not side or not nation then
40237: LD_VAR 0 1
40241: NOT
40242: PUSH
40243: LD_VAR 0 2
40247: NOT
40248: OR
40249: IFFALSE 40253
// exit ;
40251: GO 41021
// case nation of nation_american :
40253: LD_VAR 0 2
40257: PUSH
40258: LD_INT 1
40260: DOUBLE
40261: EQUAL
40262: IFTRUE 40266
40264: GO 40480
40266: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40267: LD_ADDR_VAR 0 4
40271: PUSH
40272: LD_INT 35
40274: PUSH
40275: LD_INT 45
40277: PUSH
40278: LD_INT 46
40280: PUSH
40281: LD_INT 47
40283: PUSH
40284: LD_INT 82
40286: PUSH
40287: LD_INT 83
40289: PUSH
40290: LD_INT 84
40292: PUSH
40293: LD_INT 85
40295: PUSH
40296: LD_INT 86
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: LD_INT 2
40304: PUSH
40305: LD_INT 6
40307: PUSH
40308: LD_INT 15
40310: PUSH
40311: LD_INT 16
40313: PUSH
40314: LD_INT 7
40316: PUSH
40317: LD_INT 12
40319: PUSH
40320: LD_INT 13
40322: PUSH
40323: LD_INT 10
40325: PUSH
40326: LD_INT 14
40328: PUSH
40329: LD_INT 20
40331: PUSH
40332: LD_INT 21
40334: PUSH
40335: LD_INT 22
40337: PUSH
40338: LD_INT 25
40340: PUSH
40341: LD_INT 32
40343: PUSH
40344: LD_INT 27
40346: PUSH
40347: LD_INT 36
40349: PUSH
40350: LD_INT 69
40352: PUSH
40353: LD_INT 39
40355: PUSH
40356: LD_INT 34
40358: PUSH
40359: LD_INT 40
40361: PUSH
40362: LD_INT 48
40364: PUSH
40365: LD_INT 49
40367: PUSH
40368: LD_INT 50
40370: PUSH
40371: LD_INT 51
40373: PUSH
40374: LD_INT 52
40376: PUSH
40377: LD_INT 53
40379: PUSH
40380: LD_INT 54
40382: PUSH
40383: LD_INT 55
40385: PUSH
40386: LD_INT 56
40388: PUSH
40389: LD_INT 57
40391: PUSH
40392: LD_INT 58
40394: PUSH
40395: LD_INT 59
40397: PUSH
40398: LD_INT 60
40400: PUSH
40401: LD_INT 61
40403: PUSH
40404: LD_INT 62
40406: PUSH
40407: LD_INT 80
40409: PUSH
40410: LD_INT 82
40412: PUSH
40413: LD_INT 83
40415: PUSH
40416: LD_INT 84
40418: PUSH
40419: LD_INT 85
40421: PUSH
40422: LD_INT 86
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: ST_TO_ADDR
40478: GO 40945
40480: LD_INT 2
40482: DOUBLE
40483: EQUAL
40484: IFTRUE 40488
40486: GO 40714
40488: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40489: LD_ADDR_VAR 0 4
40493: PUSH
40494: LD_INT 35
40496: PUSH
40497: LD_INT 45
40499: PUSH
40500: LD_INT 46
40502: PUSH
40503: LD_INT 47
40505: PUSH
40506: LD_INT 82
40508: PUSH
40509: LD_INT 83
40511: PUSH
40512: LD_INT 84
40514: PUSH
40515: LD_INT 85
40517: PUSH
40518: LD_INT 87
40520: PUSH
40521: LD_INT 70
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 11
40529: PUSH
40530: LD_INT 3
40532: PUSH
40533: LD_INT 4
40535: PUSH
40536: LD_INT 5
40538: PUSH
40539: LD_INT 6
40541: PUSH
40542: LD_INT 15
40544: PUSH
40545: LD_INT 18
40547: PUSH
40548: LD_INT 7
40550: PUSH
40551: LD_INT 17
40553: PUSH
40554: LD_INT 8
40556: PUSH
40557: LD_INT 20
40559: PUSH
40560: LD_INT 21
40562: PUSH
40563: LD_INT 22
40565: PUSH
40566: LD_INT 72
40568: PUSH
40569: LD_INT 26
40571: PUSH
40572: LD_INT 69
40574: PUSH
40575: LD_INT 39
40577: PUSH
40578: LD_INT 40
40580: PUSH
40581: LD_INT 41
40583: PUSH
40584: LD_INT 42
40586: PUSH
40587: LD_INT 43
40589: PUSH
40590: LD_INT 48
40592: PUSH
40593: LD_INT 49
40595: PUSH
40596: LD_INT 50
40598: PUSH
40599: LD_INT 51
40601: PUSH
40602: LD_INT 52
40604: PUSH
40605: LD_INT 53
40607: PUSH
40608: LD_INT 54
40610: PUSH
40611: LD_INT 55
40613: PUSH
40614: LD_INT 56
40616: PUSH
40617: LD_INT 60
40619: PUSH
40620: LD_INT 61
40622: PUSH
40623: LD_INT 62
40625: PUSH
40626: LD_INT 66
40628: PUSH
40629: LD_INT 67
40631: PUSH
40632: LD_INT 68
40634: PUSH
40635: LD_INT 81
40637: PUSH
40638: LD_INT 82
40640: PUSH
40641: LD_INT 83
40643: PUSH
40644: LD_INT 84
40646: PUSH
40647: LD_INT 85
40649: PUSH
40650: LD_INT 87
40652: PUSH
40653: LD_INT 88
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: ST_TO_ADDR
40712: GO 40945
40714: LD_INT 3
40716: DOUBLE
40717: EQUAL
40718: IFTRUE 40722
40720: GO 40944
40722: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40723: LD_ADDR_VAR 0 4
40727: PUSH
40728: LD_INT 46
40730: PUSH
40731: LD_INT 47
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: LD_INT 82
40742: PUSH
40743: LD_INT 83
40745: PUSH
40746: LD_INT 84
40748: PUSH
40749: LD_INT 85
40751: PUSH
40752: LD_INT 86
40754: PUSH
40755: LD_INT 11
40757: PUSH
40758: LD_INT 9
40760: PUSH
40761: LD_INT 20
40763: PUSH
40764: LD_INT 19
40766: PUSH
40767: LD_INT 21
40769: PUSH
40770: LD_INT 24
40772: PUSH
40773: LD_INT 22
40775: PUSH
40776: LD_INT 25
40778: PUSH
40779: LD_INT 28
40781: PUSH
40782: LD_INT 29
40784: PUSH
40785: LD_INT 30
40787: PUSH
40788: LD_INT 31
40790: PUSH
40791: LD_INT 37
40793: PUSH
40794: LD_INT 38
40796: PUSH
40797: LD_INT 32
40799: PUSH
40800: LD_INT 27
40802: PUSH
40803: LD_INT 33
40805: PUSH
40806: LD_INT 69
40808: PUSH
40809: LD_INT 39
40811: PUSH
40812: LD_INT 34
40814: PUSH
40815: LD_INT 40
40817: PUSH
40818: LD_INT 71
40820: PUSH
40821: LD_INT 23
40823: PUSH
40824: LD_INT 44
40826: PUSH
40827: LD_INT 48
40829: PUSH
40830: LD_INT 49
40832: PUSH
40833: LD_INT 50
40835: PUSH
40836: LD_INT 51
40838: PUSH
40839: LD_INT 52
40841: PUSH
40842: LD_INT 53
40844: PUSH
40845: LD_INT 54
40847: PUSH
40848: LD_INT 55
40850: PUSH
40851: LD_INT 56
40853: PUSH
40854: LD_INT 57
40856: PUSH
40857: LD_INT 58
40859: PUSH
40860: LD_INT 59
40862: PUSH
40863: LD_INT 63
40865: PUSH
40866: LD_INT 64
40868: PUSH
40869: LD_INT 65
40871: PUSH
40872: LD_INT 82
40874: PUSH
40875: LD_INT 83
40877: PUSH
40878: LD_INT 84
40880: PUSH
40881: LD_INT 85
40883: PUSH
40884: LD_INT 86
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: ST_TO_ADDR
40942: GO 40945
40944: POP
// if state > - 1 and state < 3 then
40945: LD_VAR 0 3
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: GREATER
40954: PUSH
40955: LD_VAR 0 3
40959: PUSH
40960: LD_INT 3
40962: LESS
40963: AND
40964: IFFALSE 41021
// for i in result do
40966: LD_ADDR_VAR 0 5
40970: PUSH
40971: LD_VAR 0 4
40975: PUSH
40976: FOR_IN
40977: IFFALSE 41019
// if GetTech ( i , side ) <> state then
40979: LD_VAR 0 5
40983: PPUSH
40984: LD_VAR 0 1
40988: PPUSH
40989: CALL_OW 321
40993: PUSH
40994: LD_VAR 0 3
40998: NONEQUAL
40999: IFFALSE 41017
// result := result diff i ;
41001: LD_ADDR_VAR 0 4
41005: PUSH
41006: LD_VAR 0 4
41010: PUSH
41011: LD_VAR 0 5
41015: DIFF
41016: ST_TO_ADDR
41017: GO 40976
41019: POP
41020: POP
// end ;
41021: LD_VAR 0 4
41025: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41026: LD_INT 0
41028: PPUSH
41029: PPUSH
41030: PPUSH
// result := true ;
41031: LD_ADDR_VAR 0 3
41035: PUSH
41036: LD_INT 1
41038: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41039: LD_ADDR_VAR 0 5
41043: PUSH
41044: LD_VAR 0 2
41048: PPUSH
41049: CALL_OW 480
41053: ST_TO_ADDR
// if not tmp then
41054: LD_VAR 0 5
41058: NOT
41059: IFFALSE 41063
// exit ;
41061: GO 41112
// for i in tmp do
41063: LD_ADDR_VAR 0 4
41067: PUSH
41068: LD_VAR 0 5
41072: PUSH
41073: FOR_IN
41074: IFFALSE 41110
// if GetTech ( i , side ) <> state_researched then
41076: LD_VAR 0 4
41080: PPUSH
41081: LD_VAR 0 1
41085: PPUSH
41086: CALL_OW 321
41090: PUSH
41091: LD_INT 2
41093: NONEQUAL
41094: IFFALSE 41108
// begin result := false ;
41096: LD_ADDR_VAR 0 3
41100: PUSH
41101: LD_INT 0
41103: ST_TO_ADDR
// exit ;
41104: POP
41105: POP
41106: GO 41112
// end ;
41108: GO 41073
41110: POP
41111: POP
// end ;
41112: LD_VAR 0 3
41116: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41117: LD_INT 0
41119: PPUSH
41120: PPUSH
41121: PPUSH
41122: PPUSH
41123: PPUSH
41124: PPUSH
41125: PPUSH
41126: PPUSH
41127: PPUSH
41128: PPUSH
41129: PPUSH
41130: PPUSH
41131: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41132: LD_VAR 0 1
41136: NOT
41137: PUSH
41138: LD_VAR 0 1
41142: PPUSH
41143: CALL_OW 257
41147: PUSH
41148: LD_INT 9
41150: NONEQUAL
41151: OR
41152: IFFALSE 41156
// exit ;
41154: GO 41729
// side := GetSide ( unit ) ;
41156: LD_ADDR_VAR 0 9
41160: PUSH
41161: LD_VAR 0 1
41165: PPUSH
41166: CALL_OW 255
41170: ST_TO_ADDR
// tech_space := tech_spacanom ;
41171: LD_ADDR_VAR 0 12
41175: PUSH
41176: LD_INT 29
41178: ST_TO_ADDR
// tech_time := tech_taurad ;
41179: LD_ADDR_VAR 0 13
41183: PUSH
41184: LD_INT 28
41186: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41187: LD_ADDR_VAR 0 11
41191: PUSH
41192: LD_VAR 0 1
41196: PPUSH
41197: CALL_OW 310
41201: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41202: LD_VAR 0 11
41206: PPUSH
41207: CALL_OW 247
41211: PUSH
41212: LD_INT 2
41214: EQUAL
41215: IFFALSE 41219
// exit ;
41217: GO 41729
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41219: LD_ADDR_VAR 0 8
41223: PUSH
41224: LD_INT 81
41226: PUSH
41227: LD_VAR 0 9
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 3
41238: PUSH
41239: LD_INT 21
41241: PUSH
41242: LD_INT 3
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PPUSH
41257: CALL_OW 69
41261: ST_TO_ADDR
// if not tmp then
41262: LD_VAR 0 8
41266: NOT
41267: IFFALSE 41271
// exit ;
41269: GO 41729
// if in_unit then
41271: LD_VAR 0 11
41275: IFFALSE 41299
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41277: LD_ADDR_VAR 0 10
41281: PUSH
41282: LD_VAR 0 8
41286: PPUSH
41287: LD_VAR 0 11
41291: PPUSH
41292: CALL_OW 74
41296: ST_TO_ADDR
41297: GO 41319
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41299: LD_ADDR_VAR 0 10
41303: PUSH
41304: LD_VAR 0 8
41308: PPUSH
41309: LD_VAR 0 1
41313: PPUSH
41314: CALL_OW 74
41318: ST_TO_ADDR
// if not enemy then
41319: LD_VAR 0 10
41323: NOT
41324: IFFALSE 41328
// exit ;
41326: GO 41729
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41328: LD_VAR 0 11
41332: PUSH
41333: LD_VAR 0 11
41337: PPUSH
41338: LD_VAR 0 10
41342: PPUSH
41343: CALL_OW 296
41347: PUSH
41348: LD_INT 13
41350: GREATER
41351: AND
41352: PUSH
41353: LD_VAR 0 1
41357: PPUSH
41358: LD_VAR 0 10
41362: PPUSH
41363: CALL_OW 296
41367: PUSH
41368: LD_INT 12
41370: GREATER
41371: OR
41372: IFFALSE 41376
// exit ;
41374: GO 41729
// missile := [ 1 ] ;
41376: LD_ADDR_VAR 0 14
41380: PUSH
41381: LD_INT 1
41383: PUSH
41384: EMPTY
41385: LIST
41386: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41387: LD_VAR 0 9
41391: PPUSH
41392: LD_VAR 0 12
41396: PPUSH
41397: CALL_OW 325
41401: IFFALSE 41430
// missile := Replace ( missile , missile + 1 , 2 ) ;
41403: LD_ADDR_VAR 0 14
41407: PUSH
41408: LD_VAR 0 14
41412: PPUSH
41413: LD_VAR 0 14
41417: PUSH
41418: LD_INT 1
41420: PLUS
41421: PPUSH
41422: LD_INT 2
41424: PPUSH
41425: CALL_OW 1
41429: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41430: LD_VAR 0 9
41434: PPUSH
41435: LD_VAR 0 13
41439: PPUSH
41440: CALL_OW 325
41444: PUSH
41445: LD_VAR 0 10
41449: PPUSH
41450: CALL_OW 255
41454: PPUSH
41455: LD_VAR 0 13
41459: PPUSH
41460: CALL_OW 325
41464: NOT
41465: AND
41466: IFFALSE 41495
// missile := Replace ( missile , missile + 1 , 3 ) ;
41468: LD_ADDR_VAR 0 14
41472: PUSH
41473: LD_VAR 0 14
41477: PPUSH
41478: LD_VAR 0 14
41482: PUSH
41483: LD_INT 1
41485: PLUS
41486: PPUSH
41487: LD_INT 3
41489: PPUSH
41490: CALL_OW 1
41494: ST_TO_ADDR
// if missile < 2 then
41495: LD_VAR 0 14
41499: PUSH
41500: LD_INT 2
41502: LESS
41503: IFFALSE 41507
// exit ;
41505: GO 41729
// x := GetX ( enemy ) ;
41507: LD_ADDR_VAR 0 4
41511: PUSH
41512: LD_VAR 0 10
41516: PPUSH
41517: CALL_OW 250
41521: ST_TO_ADDR
// y := GetY ( enemy ) ;
41522: LD_ADDR_VAR 0 5
41526: PUSH
41527: LD_VAR 0 10
41531: PPUSH
41532: CALL_OW 251
41536: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41537: LD_ADDR_VAR 0 6
41541: PUSH
41542: LD_VAR 0 4
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PPUSH
41551: LD_INT 1
41553: PPUSH
41554: CALL_OW 12
41558: PLUS
41559: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41560: LD_ADDR_VAR 0 7
41564: PUSH
41565: LD_VAR 0 5
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PPUSH
41574: LD_INT 1
41576: PPUSH
41577: CALL_OW 12
41581: PLUS
41582: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41583: LD_VAR 0 6
41587: PPUSH
41588: LD_VAR 0 7
41592: PPUSH
41593: CALL_OW 488
41597: NOT
41598: IFFALSE 41620
// begin _x := x ;
41600: LD_ADDR_VAR 0 6
41604: PUSH
41605: LD_VAR 0 4
41609: ST_TO_ADDR
// _y := y ;
41610: LD_ADDR_VAR 0 7
41614: PUSH
41615: LD_VAR 0 5
41619: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41620: LD_ADDR_VAR 0 3
41624: PUSH
41625: LD_INT 1
41627: PPUSH
41628: LD_VAR 0 14
41632: PPUSH
41633: CALL_OW 12
41637: ST_TO_ADDR
// case i of 1 :
41638: LD_VAR 0 3
41642: PUSH
41643: LD_INT 1
41645: DOUBLE
41646: EQUAL
41647: IFTRUE 41651
41649: GO 41668
41651: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41652: LD_VAR 0 1
41656: PPUSH
41657: LD_VAR 0 10
41661: PPUSH
41662: CALL_OW 115
41666: GO 41729
41668: LD_INT 2
41670: DOUBLE
41671: EQUAL
41672: IFTRUE 41676
41674: GO 41698
41676: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41677: LD_VAR 0 1
41681: PPUSH
41682: LD_VAR 0 6
41686: PPUSH
41687: LD_VAR 0 7
41691: PPUSH
41692: CALL_OW 153
41696: GO 41729
41698: LD_INT 3
41700: DOUBLE
41701: EQUAL
41702: IFTRUE 41706
41704: GO 41728
41706: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41707: LD_VAR 0 1
41711: PPUSH
41712: LD_VAR 0 6
41716: PPUSH
41717: LD_VAR 0 7
41721: PPUSH
41722: CALL_OW 154
41726: GO 41729
41728: POP
// end ;
41729: LD_VAR 0 2
41733: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41734: LD_INT 0
41736: PPUSH
41737: PPUSH
41738: PPUSH
41739: PPUSH
41740: PPUSH
41741: PPUSH
// if not unit or not building then
41742: LD_VAR 0 1
41746: NOT
41747: PUSH
41748: LD_VAR 0 2
41752: NOT
41753: OR
41754: IFFALSE 41758
// exit ;
41756: GO 41916
// x := GetX ( building ) ;
41758: LD_ADDR_VAR 0 5
41762: PUSH
41763: LD_VAR 0 2
41767: PPUSH
41768: CALL_OW 250
41772: ST_TO_ADDR
// y := GetY ( building ) ;
41773: LD_ADDR_VAR 0 6
41777: PUSH
41778: LD_VAR 0 2
41782: PPUSH
41783: CALL_OW 251
41787: ST_TO_ADDR
// for i = 0 to 5 do
41788: LD_ADDR_VAR 0 4
41792: PUSH
41793: DOUBLE
41794: LD_INT 0
41796: DEC
41797: ST_TO_ADDR
41798: LD_INT 5
41800: PUSH
41801: FOR_TO
41802: IFFALSE 41914
// begin _x := ShiftX ( x , i , 3 ) ;
41804: LD_ADDR_VAR 0 7
41808: PUSH
41809: LD_VAR 0 5
41813: PPUSH
41814: LD_VAR 0 4
41818: PPUSH
41819: LD_INT 3
41821: PPUSH
41822: CALL_OW 272
41826: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41827: LD_ADDR_VAR 0 8
41831: PUSH
41832: LD_VAR 0 6
41836: PPUSH
41837: LD_VAR 0 4
41841: PPUSH
41842: LD_INT 3
41844: PPUSH
41845: CALL_OW 273
41849: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41850: LD_VAR 0 7
41854: PPUSH
41855: LD_VAR 0 8
41859: PPUSH
41860: CALL_OW 488
41864: NOT
41865: IFFALSE 41869
// continue ;
41867: GO 41801
// if HexInfo ( _x , _y ) = 0 then
41869: LD_VAR 0 7
41873: PPUSH
41874: LD_VAR 0 8
41878: PPUSH
41879: CALL_OW 428
41883: PUSH
41884: LD_INT 0
41886: EQUAL
41887: IFFALSE 41912
// begin ComMoveXY ( unit , _x , _y ) ;
41889: LD_VAR 0 1
41893: PPUSH
41894: LD_VAR 0 7
41898: PPUSH
41899: LD_VAR 0 8
41903: PPUSH
41904: CALL_OW 111
// exit ;
41908: POP
41909: POP
41910: GO 41916
// end ; end ;
41912: GO 41801
41914: POP
41915: POP
// end ;
41916: LD_VAR 0 3
41920: RET
// export function ScanBase ( side , base_area ) ; begin
41921: LD_INT 0
41923: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41924: LD_ADDR_VAR 0 3
41928: PUSH
41929: LD_VAR 0 2
41933: PPUSH
41934: LD_INT 81
41936: PUSH
41937: LD_VAR 0 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PPUSH
41946: CALL_OW 70
41950: ST_TO_ADDR
// end ;
41951: LD_VAR 0 3
41955: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41956: LD_INT 0
41958: PPUSH
41959: PPUSH
41960: PPUSH
41961: PPUSH
// result := false ;
41962: LD_ADDR_VAR 0 2
41966: PUSH
41967: LD_INT 0
41969: ST_TO_ADDR
// side := GetSide ( unit ) ;
41970: LD_ADDR_VAR 0 3
41974: PUSH
41975: LD_VAR 0 1
41979: PPUSH
41980: CALL_OW 255
41984: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41985: LD_ADDR_VAR 0 4
41989: PUSH
41990: LD_VAR 0 1
41994: PPUSH
41995: CALL_OW 248
41999: ST_TO_ADDR
// case nat of 1 :
42000: LD_VAR 0 4
42004: PUSH
42005: LD_INT 1
42007: DOUBLE
42008: EQUAL
42009: IFTRUE 42013
42011: GO 42024
42013: POP
// tech := tech_lassight ; 2 :
42014: LD_ADDR_VAR 0 5
42018: PUSH
42019: LD_INT 12
42021: ST_TO_ADDR
42022: GO 42063
42024: LD_INT 2
42026: DOUBLE
42027: EQUAL
42028: IFTRUE 42032
42030: GO 42043
42032: POP
// tech := tech_mortar ; 3 :
42033: LD_ADDR_VAR 0 5
42037: PUSH
42038: LD_INT 41
42040: ST_TO_ADDR
42041: GO 42063
42043: LD_INT 3
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42051
42049: GO 42062
42051: POP
// tech := tech_bazooka ; end ;
42052: LD_ADDR_VAR 0 5
42056: PUSH
42057: LD_INT 44
42059: ST_TO_ADDR
42060: GO 42063
42062: POP
// if Researched ( side , tech ) then
42063: LD_VAR 0 3
42067: PPUSH
42068: LD_VAR 0 5
42072: PPUSH
42073: CALL_OW 325
42077: IFFALSE 42104
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42079: LD_ADDR_VAR 0 2
42083: PUSH
42084: LD_INT 5
42086: PUSH
42087: LD_INT 8
42089: PUSH
42090: LD_INT 9
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: LIST
42097: PUSH
42098: LD_VAR 0 4
42102: ARRAY
42103: ST_TO_ADDR
// end ;
42104: LD_VAR 0 2
42108: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42109: LD_INT 0
42111: PPUSH
42112: PPUSH
42113: PPUSH
// if not mines then
42114: LD_VAR 0 2
42118: NOT
42119: IFFALSE 42123
// exit ;
42121: GO 42267
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42123: LD_ADDR_VAR 0 5
42127: PUSH
42128: LD_INT 81
42130: PUSH
42131: LD_VAR 0 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: LD_INT 21
42145: PUSH
42146: LD_INT 3
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PPUSH
42161: CALL_OW 69
42165: ST_TO_ADDR
// for i in mines do
42166: LD_ADDR_VAR 0 4
42170: PUSH
42171: LD_VAR 0 2
42175: PUSH
42176: FOR_IN
42177: IFFALSE 42265
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42179: LD_VAR 0 4
42183: PUSH
42184: LD_INT 1
42186: ARRAY
42187: PPUSH
42188: LD_VAR 0 4
42192: PUSH
42193: LD_INT 2
42195: ARRAY
42196: PPUSH
42197: CALL_OW 458
42201: NOT
42202: IFFALSE 42206
// continue ;
42204: GO 42176
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42206: LD_VAR 0 4
42210: PUSH
42211: LD_INT 1
42213: ARRAY
42214: PPUSH
42215: LD_VAR 0 4
42219: PUSH
42220: LD_INT 2
42222: ARRAY
42223: PPUSH
42224: CALL_OW 428
42228: PUSH
42229: LD_VAR 0 5
42233: IN
42234: IFFALSE 42263
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42236: LD_VAR 0 4
42240: PUSH
42241: LD_INT 1
42243: ARRAY
42244: PPUSH
42245: LD_VAR 0 4
42249: PUSH
42250: LD_INT 2
42252: ARRAY
42253: PPUSH
42254: LD_VAR 0 1
42258: PPUSH
42259: CALL_OW 456
// end ;
42263: GO 42176
42265: POP
42266: POP
// end ;
42267: LD_VAR 0 3
42271: RET
// export function Count ( array ) ; begin
42272: LD_INT 0
42274: PPUSH
// result := array + 0 ;
42275: LD_ADDR_VAR 0 2
42279: PUSH
42280: LD_VAR 0 1
42284: PUSH
42285: LD_INT 0
42287: PLUS
42288: ST_TO_ADDR
// end ;
42289: LD_VAR 0 2
42293: RET
// export function IsEmpty ( building ) ; begin
42294: LD_INT 0
42296: PPUSH
// if not building then
42297: LD_VAR 0 1
42301: NOT
42302: IFFALSE 42306
// exit ;
42304: GO 42349
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42306: LD_ADDR_VAR 0 2
42310: PUSH
42311: LD_VAR 0 1
42315: PUSH
42316: LD_INT 22
42318: PUSH
42319: LD_VAR 0 1
42323: PPUSH
42324: CALL_OW 255
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 58
42335: PUSH
42336: EMPTY
42337: LIST
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PPUSH
42343: CALL_OW 69
42347: IN
42348: ST_TO_ADDR
// end ;
42349: LD_VAR 0 2
42353: RET
// export function IsNotFull ( building ) ; var places ; begin
42354: LD_INT 0
42356: PPUSH
42357: PPUSH
// if not building then
42358: LD_VAR 0 1
42362: NOT
42363: IFFALSE 42367
// exit ;
42365: GO 42395
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42367: LD_ADDR_VAR 0 2
42371: PUSH
42372: LD_VAR 0 1
42376: PPUSH
42377: LD_INT 3
42379: PUSH
42380: LD_INT 62
42382: PUSH
42383: EMPTY
42384: LIST
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PPUSH
42390: CALL_OW 72
42394: ST_TO_ADDR
// end ;
42395: LD_VAR 0 2
42399: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42400: LD_INT 0
42402: PPUSH
42403: PPUSH
42404: PPUSH
42405: PPUSH
// tmp := [ ] ;
42406: LD_ADDR_VAR 0 3
42410: PUSH
42411: EMPTY
42412: ST_TO_ADDR
// list := [ ] ;
42413: LD_ADDR_VAR 0 5
42417: PUSH
42418: EMPTY
42419: ST_TO_ADDR
// for i = 16 to 25 do
42420: LD_ADDR_VAR 0 4
42424: PUSH
42425: DOUBLE
42426: LD_INT 16
42428: DEC
42429: ST_TO_ADDR
42430: LD_INT 25
42432: PUSH
42433: FOR_TO
42434: IFFALSE 42507
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42436: LD_ADDR_VAR 0 3
42440: PUSH
42441: LD_VAR 0 3
42445: PUSH
42446: LD_INT 22
42448: PUSH
42449: LD_VAR 0 1
42453: PPUSH
42454: CALL_OW 255
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 91
42465: PUSH
42466: LD_VAR 0 1
42470: PUSH
42471: LD_INT 6
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 30
42481: PUSH
42482: LD_VAR 0 4
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: LIST
42495: PUSH
42496: EMPTY
42497: LIST
42498: PPUSH
42499: CALL_OW 69
42503: ADD
42504: ST_TO_ADDR
42505: GO 42433
42507: POP
42508: POP
// for i = 1 to tmp do
42509: LD_ADDR_VAR 0 4
42513: PUSH
42514: DOUBLE
42515: LD_INT 1
42517: DEC
42518: ST_TO_ADDR
42519: LD_VAR 0 3
42523: PUSH
42524: FOR_TO
42525: IFFALSE 42613
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42527: LD_ADDR_VAR 0 5
42531: PUSH
42532: LD_VAR 0 5
42536: PUSH
42537: LD_VAR 0 3
42541: PUSH
42542: LD_VAR 0 4
42546: ARRAY
42547: PPUSH
42548: CALL_OW 266
42552: PUSH
42553: LD_VAR 0 3
42557: PUSH
42558: LD_VAR 0 4
42562: ARRAY
42563: PPUSH
42564: CALL_OW 250
42568: PUSH
42569: LD_VAR 0 3
42573: PUSH
42574: LD_VAR 0 4
42578: ARRAY
42579: PPUSH
42580: CALL_OW 251
42584: PUSH
42585: LD_VAR 0 3
42589: PUSH
42590: LD_VAR 0 4
42594: ARRAY
42595: PPUSH
42596: CALL_OW 254
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: PUSH
42607: EMPTY
42608: LIST
42609: ADD
42610: ST_TO_ADDR
42611: GO 42524
42613: POP
42614: POP
// result := list ;
42615: LD_ADDR_VAR 0 2
42619: PUSH
42620: LD_VAR 0 5
42624: ST_TO_ADDR
// end ;
42625: LD_VAR 0 2
42629: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42630: LD_INT 0
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
42638: PPUSH
// if not factory then
42639: LD_VAR 0 1
42643: NOT
42644: IFFALSE 42648
// exit ;
42646: GO 43241
// if control = control_apeman then
42648: LD_VAR 0 4
42652: PUSH
42653: LD_INT 5
42655: EQUAL
42656: IFFALSE 42765
// begin tmp := UnitsInside ( factory ) ;
42658: LD_ADDR_VAR 0 8
42662: PUSH
42663: LD_VAR 0 1
42667: PPUSH
42668: CALL_OW 313
42672: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42673: LD_VAR 0 8
42677: PPUSH
42678: LD_INT 25
42680: PUSH
42681: LD_INT 12
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PPUSH
42688: CALL_OW 72
42692: NOT
42693: IFFALSE 42703
// control := control_manual ;
42695: LD_ADDR_VAR 0 4
42699: PUSH
42700: LD_INT 1
42702: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42703: LD_ADDR_VAR 0 8
42707: PUSH
42708: LD_VAR 0 1
42712: PPUSH
42713: CALL 42400 0 1
42717: ST_TO_ADDR
// if tmp then
42718: LD_VAR 0 8
42722: IFFALSE 42765
// begin for i in tmp do
42724: LD_ADDR_VAR 0 7
42728: PUSH
42729: LD_VAR 0 8
42733: PUSH
42734: FOR_IN
42735: IFFALSE 42763
// if i [ 1 ] = b_ext_radio then
42737: LD_VAR 0 7
42741: PUSH
42742: LD_INT 1
42744: ARRAY
42745: PUSH
42746: LD_INT 22
42748: EQUAL
42749: IFFALSE 42761
// begin control := control_remote ;
42751: LD_ADDR_VAR 0 4
42755: PUSH
42756: LD_INT 2
42758: ST_TO_ADDR
// break ;
42759: GO 42763
// end ;
42761: GO 42734
42763: POP
42764: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42765: LD_VAR 0 1
42769: PPUSH
42770: LD_VAR 0 2
42774: PPUSH
42775: LD_VAR 0 3
42779: PPUSH
42780: LD_VAR 0 4
42784: PPUSH
42785: LD_VAR 0 5
42789: PPUSH
42790: CALL_OW 448
42794: IFFALSE 42829
// begin result := [ chassis , engine , control , weapon ] ;
42796: LD_ADDR_VAR 0 6
42800: PUSH
42801: LD_VAR 0 2
42805: PUSH
42806: LD_VAR 0 3
42810: PUSH
42811: LD_VAR 0 4
42815: PUSH
42816: LD_VAR 0 5
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
// exit ;
42827: GO 43241
// end ; _chassis := AvailableChassisList ( factory ) ;
42829: LD_ADDR_VAR 0 9
42833: PUSH
42834: LD_VAR 0 1
42838: PPUSH
42839: CALL_OW 475
42843: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42844: LD_ADDR_VAR 0 11
42848: PUSH
42849: LD_VAR 0 1
42853: PPUSH
42854: CALL_OW 476
42858: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42859: LD_ADDR_VAR 0 12
42863: PUSH
42864: LD_VAR 0 1
42868: PPUSH
42869: CALL_OW 477
42873: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42874: LD_ADDR_VAR 0 10
42878: PUSH
42879: LD_VAR 0 1
42883: PPUSH
42884: CALL_OW 478
42888: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42889: LD_VAR 0 9
42893: NOT
42894: PUSH
42895: LD_VAR 0 11
42899: NOT
42900: OR
42901: PUSH
42902: LD_VAR 0 12
42906: NOT
42907: OR
42908: PUSH
42909: LD_VAR 0 10
42913: NOT
42914: OR
42915: IFFALSE 42950
// begin result := [ chassis , engine , control , weapon ] ;
42917: LD_ADDR_VAR 0 6
42921: PUSH
42922: LD_VAR 0 2
42926: PUSH
42927: LD_VAR 0 3
42931: PUSH
42932: LD_VAR 0 4
42936: PUSH
42937: LD_VAR 0 5
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: ST_TO_ADDR
// exit ;
42948: GO 43241
// end ; if not chassis in _chassis then
42950: LD_VAR 0 2
42954: PUSH
42955: LD_VAR 0 9
42959: IN
42960: NOT
42961: IFFALSE 42987
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42963: LD_ADDR_VAR 0 2
42967: PUSH
42968: LD_VAR 0 9
42972: PUSH
42973: LD_INT 1
42975: PPUSH
42976: LD_VAR 0 9
42980: PPUSH
42981: CALL_OW 12
42985: ARRAY
42986: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42987: LD_VAR 0 2
42991: PPUSH
42992: LD_VAR 0 3
42996: PPUSH
42997: CALL 43246 0 2
43001: NOT
43002: IFFALSE 43061
// repeat engine := _engine [ 1 ] ;
43004: LD_ADDR_VAR 0 3
43008: PUSH
43009: LD_VAR 0 11
43013: PUSH
43014: LD_INT 1
43016: ARRAY
43017: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43018: LD_ADDR_VAR 0 11
43022: PUSH
43023: LD_VAR 0 11
43027: PPUSH
43028: LD_INT 1
43030: PPUSH
43031: CALL_OW 3
43035: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43036: LD_VAR 0 2
43040: PPUSH
43041: LD_VAR 0 3
43045: PPUSH
43046: CALL 43246 0 2
43050: PUSH
43051: LD_VAR 0 11
43055: PUSH
43056: EMPTY
43057: EQUAL
43058: OR
43059: IFFALSE 43004
// if not control in _control then
43061: LD_VAR 0 4
43065: PUSH
43066: LD_VAR 0 12
43070: IN
43071: NOT
43072: IFFALSE 43098
// control := _control [ rand ( 1 , _control ) ] ;
43074: LD_ADDR_VAR 0 4
43078: PUSH
43079: LD_VAR 0 12
43083: PUSH
43084: LD_INT 1
43086: PPUSH
43087: LD_VAR 0 12
43091: PPUSH
43092: CALL_OW 12
43096: ARRAY
43097: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43098: LD_VAR 0 2
43102: PPUSH
43103: LD_VAR 0 5
43107: PPUSH
43108: CALL 43466 0 2
43112: NOT
43113: IFFALSE 43172
// repeat weapon := _weapon [ 1 ] ;
43115: LD_ADDR_VAR 0 5
43119: PUSH
43120: LD_VAR 0 10
43124: PUSH
43125: LD_INT 1
43127: ARRAY
43128: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43129: LD_ADDR_VAR 0 10
43133: PUSH
43134: LD_VAR 0 10
43138: PPUSH
43139: LD_INT 1
43141: PPUSH
43142: CALL_OW 3
43146: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43147: LD_VAR 0 2
43151: PPUSH
43152: LD_VAR 0 5
43156: PPUSH
43157: CALL 43466 0 2
43161: PUSH
43162: LD_VAR 0 10
43166: PUSH
43167: EMPTY
43168: EQUAL
43169: OR
43170: IFFALSE 43115
// result := [ ] ;
43172: LD_ADDR_VAR 0 6
43176: PUSH
43177: EMPTY
43178: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43179: LD_VAR 0 1
43183: PPUSH
43184: LD_VAR 0 2
43188: PPUSH
43189: LD_VAR 0 3
43193: PPUSH
43194: LD_VAR 0 4
43198: PPUSH
43199: LD_VAR 0 5
43203: PPUSH
43204: CALL_OW 448
43208: IFFALSE 43241
// result := [ chassis , engine , control , weapon ] ;
43210: LD_ADDR_VAR 0 6
43214: PUSH
43215: LD_VAR 0 2
43219: PUSH
43220: LD_VAR 0 3
43224: PUSH
43225: LD_VAR 0 4
43229: PUSH
43230: LD_VAR 0 5
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
// end ;
43241: LD_VAR 0 6
43245: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43246: LD_INT 0
43248: PPUSH
// if not chassis or not engine then
43249: LD_VAR 0 1
43253: NOT
43254: PUSH
43255: LD_VAR 0 2
43259: NOT
43260: OR
43261: IFFALSE 43265
// exit ;
43263: GO 43461
// case engine of engine_solar :
43265: LD_VAR 0 2
43269: PUSH
43270: LD_INT 2
43272: DOUBLE
43273: EQUAL
43274: IFTRUE 43278
43276: GO 43316
43278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43279: LD_ADDR_VAR 0 3
43283: PUSH
43284: LD_INT 11
43286: PUSH
43287: LD_INT 12
43289: PUSH
43290: LD_INT 13
43292: PUSH
43293: LD_INT 14
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: LD_INT 3
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: ST_TO_ADDR
43314: GO 43445
43316: LD_INT 1
43318: DOUBLE
43319: EQUAL
43320: IFTRUE 43324
43322: GO 43386
43324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43325: LD_ADDR_VAR 0 3
43329: PUSH
43330: LD_INT 11
43332: PUSH
43333: LD_INT 12
43335: PUSH
43336: LD_INT 13
43338: PUSH
43339: LD_INT 14
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: LD_INT 3
43350: PUSH
43351: LD_INT 4
43353: PUSH
43354: LD_INT 5
43356: PUSH
43357: LD_INT 21
43359: PUSH
43360: LD_INT 23
43362: PUSH
43363: LD_INT 22
43365: PUSH
43366: LD_INT 24
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: ST_TO_ADDR
43384: GO 43445
43386: LD_INT 3
43388: DOUBLE
43389: EQUAL
43390: IFTRUE 43394
43392: GO 43444
43394: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43395: LD_ADDR_VAR 0 3
43399: PUSH
43400: LD_INT 13
43402: PUSH
43403: LD_INT 14
43405: PUSH
43406: LD_INT 2
43408: PUSH
43409: LD_INT 3
43411: PUSH
43412: LD_INT 4
43414: PUSH
43415: LD_INT 5
43417: PUSH
43418: LD_INT 21
43420: PUSH
43421: LD_INT 22
43423: PUSH
43424: LD_INT 23
43426: PUSH
43427: LD_INT 24
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: ST_TO_ADDR
43442: GO 43445
43444: POP
// result := ( chassis in result ) ;
43445: LD_ADDR_VAR 0 3
43449: PUSH
43450: LD_VAR 0 1
43454: PUSH
43455: LD_VAR 0 3
43459: IN
43460: ST_TO_ADDR
// end ;
43461: LD_VAR 0 3
43465: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43466: LD_INT 0
43468: PPUSH
// if not chassis or not weapon then
43469: LD_VAR 0 1
43473: NOT
43474: PUSH
43475: LD_VAR 0 2
43479: NOT
43480: OR
43481: IFFALSE 43485
// exit ;
43483: GO 44545
// case weapon of us_machine_gun :
43485: LD_VAR 0 2
43489: PUSH
43490: LD_INT 2
43492: DOUBLE
43493: EQUAL
43494: IFTRUE 43498
43496: GO 43528
43498: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43499: LD_ADDR_VAR 0 3
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: LD_INT 3
43512: PUSH
43513: LD_INT 4
43515: PUSH
43516: LD_INT 5
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: ST_TO_ADDR
43526: GO 44529
43528: LD_INT 3
43530: DOUBLE
43531: EQUAL
43532: IFTRUE 43536
43534: GO 43566
43536: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43537: LD_ADDR_VAR 0 3
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: LD_INT 3
43550: PUSH
43551: LD_INT 4
43553: PUSH
43554: LD_INT 5
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: ST_TO_ADDR
43564: GO 44529
43566: LD_INT 11
43568: DOUBLE
43569: EQUAL
43570: IFTRUE 43574
43572: GO 43604
43574: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43575: LD_ADDR_VAR 0 3
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: LD_INT 3
43588: PUSH
43589: LD_INT 4
43591: PUSH
43592: LD_INT 5
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: ST_TO_ADDR
43602: GO 44529
43604: LD_INT 4
43606: DOUBLE
43607: EQUAL
43608: IFTRUE 43612
43610: GO 43638
43612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43613: LD_ADDR_VAR 0 3
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: LD_INT 3
43623: PUSH
43624: LD_INT 4
43626: PUSH
43627: LD_INT 5
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: ST_TO_ADDR
43636: GO 44529
43638: LD_INT 5
43640: DOUBLE
43641: EQUAL
43642: IFTRUE 43646
43644: GO 43672
43646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43647: LD_ADDR_VAR 0 3
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: LD_INT 3
43657: PUSH
43658: LD_INT 4
43660: PUSH
43661: LD_INT 5
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: ST_TO_ADDR
43670: GO 44529
43672: LD_INT 9
43674: DOUBLE
43675: EQUAL
43676: IFTRUE 43680
43678: GO 43706
43680: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43681: LD_ADDR_VAR 0 3
43685: PUSH
43686: LD_INT 2
43688: PUSH
43689: LD_INT 3
43691: PUSH
43692: LD_INT 4
43694: PUSH
43695: LD_INT 5
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: ST_TO_ADDR
43704: GO 44529
43706: LD_INT 7
43708: DOUBLE
43709: EQUAL
43710: IFTRUE 43714
43712: GO 43740
43714: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43715: LD_ADDR_VAR 0 3
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: LD_INT 3
43725: PUSH
43726: LD_INT 4
43728: PUSH
43729: LD_INT 5
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: ST_TO_ADDR
43738: GO 44529
43740: LD_INT 12
43742: DOUBLE
43743: EQUAL
43744: IFTRUE 43748
43746: GO 43774
43748: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43749: LD_ADDR_VAR 0 3
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: LD_INT 3
43759: PUSH
43760: LD_INT 4
43762: PUSH
43763: LD_INT 5
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: ST_TO_ADDR
43772: GO 44529
43774: LD_INT 13
43776: DOUBLE
43777: EQUAL
43778: IFTRUE 43782
43780: GO 43808
43782: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43783: LD_ADDR_VAR 0 3
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 3
43793: PUSH
43794: LD_INT 4
43796: PUSH
43797: LD_INT 5
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: ST_TO_ADDR
43806: GO 44529
43808: LD_INT 14
43810: DOUBLE
43811: EQUAL
43812: IFTRUE 43816
43814: GO 43834
43816: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43817: LD_ADDR_VAR 0 3
43821: PUSH
43822: LD_INT 4
43824: PUSH
43825: LD_INT 5
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: ST_TO_ADDR
43832: GO 44529
43834: LD_INT 6
43836: DOUBLE
43837: EQUAL
43838: IFTRUE 43842
43840: GO 43860
43842: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43843: LD_ADDR_VAR 0 3
43847: PUSH
43848: LD_INT 4
43850: PUSH
43851: LD_INT 5
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: ST_TO_ADDR
43858: GO 44529
43860: LD_INT 10
43862: DOUBLE
43863: EQUAL
43864: IFTRUE 43868
43866: GO 43886
43868: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43869: LD_ADDR_VAR 0 3
43873: PUSH
43874: LD_INT 4
43876: PUSH
43877: LD_INT 5
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: ST_TO_ADDR
43884: GO 44529
43886: LD_INT 22
43888: DOUBLE
43889: EQUAL
43890: IFTRUE 43894
43892: GO 43920
43894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43895: LD_ADDR_VAR 0 3
43899: PUSH
43900: LD_INT 11
43902: PUSH
43903: LD_INT 12
43905: PUSH
43906: LD_INT 13
43908: PUSH
43909: LD_INT 14
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: ST_TO_ADDR
43918: GO 44529
43920: LD_INT 23
43922: DOUBLE
43923: EQUAL
43924: IFTRUE 43928
43926: GO 43954
43928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43929: LD_ADDR_VAR 0 3
43933: PUSH
43934: LD_INT 11
43936: PUSH
43937: LD_INT 12
43939: PUSH
43940: LD_INT 13
43942: PUSH
43943: LD_INT 14
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: ST_TO_ADDR
43952: GO 44529
43954: LD_INT 24
43956: DOUBLE
43957: EQUAL
43958: IFTRUE 43962
43960: GO 43988
43962: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43963: LD_ADDR_VAR 0 3
43967: PUSH
43968: LD_INT 11
43970: PUSH
43971: LD_INT 12
43973: PUSH
43974: LD_INT 13
43976: PUSH
43977: LD_INT 14
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: ST_TO_ADDR
43986: GO 44529
43988: LD_INT 30
43990: DOUBLE
43991: EQUAL
43992: IFTRUE 43996
43994: GO 44022
43996: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43997: LD_ADDR_VAR 0 3
44001: PUSH
44002: LD_INT 11
44004: PUSH
44005: LD_INT 12
44007: PUSH
44008: LD_INT 13
44010: PUSH
44011: LD_INT 14
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: ST_TO_ADDR
44020: GO 44529
44022: LD_INT 25
44024: DOUBLE
44025: EQUAL
44026: IFTRUE 44030
44028: GO 44048
44030: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44031: LD_ADDR_VAR 0 3
44035: PUSH
44036: LD_INT 13
44038: PUSH
44039: LD_INT 14
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: ST_TO_ADDR
44046: GO 44529
44048: LD_INT 27
44050: DOUBLE
44051: EQUAL
44052: IFTRUE 44056
44054: GO 44074
44056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44057: LD_ADDR_VAR 0 3
44061: PUSH
44062: LD_INT 13
44064: PUSH
44065: LD_INT 14
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: ST_TO_ADDR
44072: GO 44529
44074: LD_INT 92
44076: DOUBLE
44077: EQUAL
44078: IFTRUE 44082
44080: GO 44108
44082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44083: LD_ADDR_VAR 0 3
44087: PUSH
44088: LD_INT 11
44090: PUSH
44091: LD_INT 12
44093: PUSH
44094: LD_INT 13
44096: PUSH
44097: LD_INT 14
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: ST_TO_ADDR
44106: GO 44529
44108: LD_INT 28
44110: DOUBLE
44111: EQUAL
44112: IFTRUE 44116
44114: GO 44134
44116: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44117: LD_ADDR_VAR 0 3
44121: PUSH
44122: LD_INT 13
44124: PUSH
44125: LD_INT 14
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: ST_TO_ADDR
44132: GO 44529
44134: LD_INT 29
44136: DOUBLE
44137: EQUAL
44138: IFTRUE 44142
44140: GO 44160
44142: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44143: LD_ADDR_VAR 0 3
44147: PUSH
44148: LD_INT 13
44150: PUSH
44151: LD_INT 14
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: ST_TO_ADDR
44158: GO 44529
44160: LD_INT 31
44162: DOUBLE
44163: EQUAL
44164: IFTRUE 44168
44166: GO 44186
44168: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44169: LD_ADDR_VAR 0 3
44173: PUSH
44174: LD_INT 13
44176: PUSH
44177: LD_INT 14
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: ST_TO_ADDR
44184: GO 44529
44186: LD_INT 26
44188: DOUBLE
44189: EQUAL
44190: IFTRUE 44194
44192: GO 44212
44194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44195: LD_ADDR_VAR 0 3
44199: PUSH
44200: LD_INT 13
44202: PUSH
44203: LD_INT 14
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: ST_TO_ADDR
44210: GO 44529
44212: LD_INT 42
44214: DOUBLE
44215: EQUAL
44216: IFTRUE 44220
44218: GO 44246
44220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44221: LD_ADDR_VAR 0 3
44225: PUSH
44226: LD_INT 21
44228: PUSH
44229: LD_INT 22
44231: PUSH
44232: LD_INT 23
44234: PUSH
44235: LD_INT 24
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: ST_TO_ADDR
44244: GO 44529
44246: LD_INT 43
44248: DOUBLE
44249: EQUAL
44250: IFTRUE 44254
44252: GO 44280
44254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44255: LD_ADDR_VAR 0 3
44259: PUSH
44260: LD_INT 21
44262: PUSH
44263: LD_INT 22
44265: PUSH
44266: LD_INT 23
44268: PUSH
44269: LD_INT 24
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: ST_TO_ADDR
44278: GO 44529
44280: LD_INT 44
44282: DOUBLE
44283: EQUAL
44284: IFTRUE 44288
44286: GO 44314
44288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44289: LD_ADDR_VAR 0 3
44293: PUSH
44294: LD_INT 21
44296: PUSH
44297: LD_INT 22
44299: PUSH
44300: LD_INT 23
44302: PUSH
44303: LD_INT 24
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: ST_TO_ADDR
44312: GO 44529
44314: LD_INT 45
44316: DOUBLE
44317: EQUAL
44318: IFTRUE 44322
44320: GO 44348
44322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44323: LD_ADDR_VAR 0 3
44327: PUSH
44328: LD_INT 21
44330: PUSH
44331: LD_INT 22
44333: PUSH
44334: LD_INT 23
44336: PUSH
44337: LD_INT 24
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: ST_TO_ADDR
44346: GO 44529
44348: LD_INT 49
44350: DOUBLE
44351: EQUAL
44352: IFTRUE 44356
44354: GO 44382
44356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44357: LD_ADDR_VAR 0 3
44361: PUSH
44362: LD_INT 21
44364: PUSH
44365: LD_INT 22
44367: PUSH
44368: LD_INT 23
44370: PUSH
44371: LD_INT 24
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: ST_TO_ADDR
44380: GO 44529
44382: LD_INT 51
44384: DOUBLE
44385: EQUAL
44386: IFTRUE 44390
44388: GO 44416
44390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44391: LD_ADDR_VAR 0 3
44395: PUSH
44396: LD_INT 21
44398: PUSH
44399: LD_INT 22
44401: PUSH
44402: LD_INT 23
44404: PUSH
44405: LD_INT 24
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: ST_TO_ADDR
44414: GO 44529
44416: LD_INT 52
44418: DOUBLE
44419: EQUAL
44420: IFTRUE 44424
44422: GO 44450
44424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44425: LD_ADDR_VAR 0 3
44429: PUSH
44430: LD_INT 21
44432: PUSH
44433: LD_INT 22
44435: PUSH
44436: LD_INT 23
44438: PUSH
44439: LD_INT 24
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: ST_TO_ADDR
44448: GO 44529
44450: LD_INT 53
44452: DOUBLE
44453: EQUAL
44454: IFTRUE 44458
44456: GO 44476
44458: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44459: LD_ADDR_VAR 0 3
44463: PUSH
44464: LD_INT 23
44466: PUSH
44467: LD_INT 24
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: ST_TO_ADDR
44474: GO 44529
44476: LD_INT 46
44478: DOUBLE
44479: EQUAL
44480: IFTRUE 44484
44482: GO 44502
44484: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44485: LD_ADDR_VAR 0 3
44489: PUSH
44490: LD_INT 23
44492: PUSH
44493: LD_INT 24
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: ST_TO_ADDR
44500: GO 44529
44502: LD_INT 47
44504: DOUBLE
44505: EQUAL
44506: IFTRUE 44510
44508: GO 44528
44510: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44511: LD_ADDR_VAR 0 3
44515: PUSH
44516: LD_INT 23
44518: PUSH
44519: LD_INT 24
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: ST_TO_ADDR
44526: GO 44529
44528: POP
// result := ( chassis in result ) ;
44529: LD_ADDR_VAR 0 3
44533: PUSH
44534: LD_VAR 0 1
44538: PUSH
44539: LD_VAR 0 3
44543: IN
44544: ST_TO_ADDR
// end ;
44545: LD_VAR 0 3
44549: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44550: LD_INT 0
44552: PPUSH
44553: PPUSH
44554: PPUSH
44555: PPUSH
44556: PPUSH
44557: PPUSH
44558: PPUSH
// result := array ;
44559: LD_ADDR_VAR 0 5
44563: PUSH
44564: LD_VAR 0 1
44568: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44569: LD_VAR 0 1
44573: NOT
44574: PUSH
44575: LD_VAR 0 2
44579: NOT
44580: OR
44581: PUSH
44582: LD_VAR 0 3
44586: NOT
44587: OR
44588: PUSH
44589: LD_VAR 0 2
44593: PUSH
44594: LD_VAR 0 1
44598: GREATER
44599: OR
44600: PUSH
44601: LD_VAR 0 3
44605: PUSH
44606: LD_VAR 0 1
44610: GREATER
44611: OR
44612: IFFALSE 44616
// exit ;
44614: GO 44912
// if direction then
44616: LD_VAR 0 4
44620: IFFALSE 44684
// begin d := 1 ;
44622: LD_ADDR_VAR 0 9
44626: PUSH
44627: LD_INT 1
44629: ST_TO_ADDR
// if i_from > i_to then
44630: LD_VAR 0 2
44634: PUSH
44635: LD_VAR 0 3
44639: GREATER
44640: IFFALSE 44666
// length := ( array - i_from ) + i_to else
44642: LD_ADDR_VAR 0 11
44646: PUSH
44647: LD_VAR 0 1
44651: PUSH
44652: LD_VAR 0 2
44656: MINUS
44657: PUSH
44658: LD_VAR 0 3
44662: PLUS
44663: ST_TO_ADDR
44664: GO 44682
// length := i_to - i_from ;
44666: LD_ADDR_VAR 0 11
44670: PUSH
44671: LD_VAR 0 3
44675: PUSH
44676: LD_VAR 0 2
44680: MINUS
44681: ST_TO_ADDR
// end else
44682: GO 44745
// begin d := - 1 ;
44684: LD_ADDR_VAR 0 9
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: ST_TO_ADDR
// if i_from > i_to then
44693: LD_VAR 0 2
44697: PUSH
44698: LD_VAR 0 3
44702: GREATER
44703: IFFALSE 44723
// length := i_from - i_to else
44705: LD_ADDR_VAR 0 11
44709: PUSH
44710: LD_VAR 0 2
44714: PUSH
44715: LD_VAR 0 3
44719: MINUS
44720: ST_TO_ADDR
44721: GO 44745
// length := ( array - i_to ) + i_from ;
44723: LD_ADDR_VAR 0 11
44727: PUSH
44728: LD_VAR 0 1
44732: PUSH
44733: LD_VAR 0 3
44737: MINUS
44738: PUSH
44739: LD_VAR 0 2
44743: PLUS
44744: ST_TO_ADDR
// end ; if not length then
44745: LD_VAR 0 11
44749: NOT
44750: IFFALSE 44754
// exit ;
44752: GO 44912
// tmp := array ;
44754: LD_ADDR_VAR 0 10
44758: PUSH
44759: LD_VAR 0 1
44763: ST_TO_ADDR
// for i = 1 to length do
44764: LD_ADDR_VAR 0 6
44768: PUSH
44769: DOUBLE
44770: LD_INT 1
44772: DEC
44773: ST_TO_ADDR
44774: LD_VAR 0 11
44778: PUSH
44779: FOR_TO
44780: IFFALSE 44900
// begin for j = 1 to array do
44782: LD_ADDR_VAR 0 7
44786: PUSH
44787: DOUBLE
44788: LD_INT 1
44790: DEC
44791: ST_TO_ADDR
44792: LD_VAR 0 1
44796: PUSH
44797: FOR_TO
44798: IFFALSE 44886
// begin k := j + d ;
44800: LD_ADDR_VAR 0 8
44804: PUSH
44805: LD_VAR 0 7
44809: PUSH
44810: LD_VAR 0 9
44814: PLUS
44815: ST_TO_ADDR
// if k > array then
44816: LD_VAR 0 8
44820: PUSH
44821: LD_VAR 0 1
44825: GREATER
44826: IFFALSE 44836
// k := 1 ;
44828: LD_ADDR_VAR 0 8
44832: PUSH
44833: LD_INT 1
44835: ST_TO_ADDR
// if not k then
44836: LD_VAR 0 8
44840: NOT
44841: IFFALSE 44853
// k := array ;
44843: LD_ADDR_VAR 0 8
44847: PUSH
44848: LD_VAR 0 1
44852: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44853: LD_ADDR_VAR 0 10
44857: PUSH
44858: LD_VAR 0 10
44862: PPUSH
44863: LD_VAR 0 8
44867: PPUSH
44868: LD_VAR 0 1
44872: PUSH
44873: LD_VAR 0 7
44877: ARRAY
44878: PPUSH
44879: CALL_OW 1
44883: ST_TO_ADDR
// end ;
44884: GO 44797
44886: POP
44887: POP
// array := tmp ;
44888: LD_ADDR_VAR 0 1
44892: PUSH
44893: LD_VAR 0 10
44897: ST_TO_ADDR
// end ;
44898: GO 44779
44900: POP
44901: POP
// result := array ;
44902: LD_ADDR_VAR 0 5
44906: PUSH
44907: LD_VAR 0 1
44911: ST_TO_ADDR
// end ;
44912: LD_VAR 0 5
44916: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44917: LD_INT 0
44919: PPUSH
44920: PPUSH
// result := 0 ;
44921: LD_ADDR_VAR 0 3
44925: PUSH
44926: LD_INT 0
44928: ST_TO_ADDR
// if not array or not value in array then
44929: LD_VAR 0 1
44933: NOT
44934: PUSH
44935: LD_VAR 0 2
44939: PUSH
44940: LD_VAR 0 1
44944: IN
44945: NOT
44946: OR
44947: IFFALSE 44951
// exit ;
44949: GO 45005
// for i = 1 to array do
44951: LD_ADDR_VAR 0 4
44955: PUSH
44956: DOUBLE
44957: LD_INT 1
44959: DEC
44960: ST_TO_ADDR
44961: LD_VAR 0 1
44965: PUSH
44966: FOR_TO
44967: IFFALSE 45003
// if value = array [ i ] then
44969: LD_VAR 0 2
44973: PUSH
44974: LD_VAR 0 1
44978: PUSH
44979: LD_VAR 0 4
44983: ARRAY
44984: EQUAL
44985: IFFALSE 45001
// begin result := i ;
44987: LD_ADDR_VAR 0 3
44991: PUSH
44992: LD_VAR 0 4
44996: ST_TO_ADDR
// exit ;
44997: POP
44998: POP
44999: GO 45005
// end ;
45001: GO 44966
45003: POP
45004: POP
// end ;
45005: LD_VAR 0 3
45009: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45010: LD_INT 0
45012: PPUSH
// vc_chassis := chassis ;
45013: LD_ADDR_OWVAR 37
45017: PUSH
45018: LD_VAR 0 1
45022: ST_TO_ADDR
// vc_engine := engine ;
45023: LD_ADDR_OWVAR 39
45027: PUSH
45028: LD_VAR 0 2
45032: ST_TO_ADDR
// vc_control := control ;
45033: LD_ADDR_OWVAR 38
45037: PUSH
45038: LD_VAR 0 3
45042: ST_TO_ADDR
// vc_weapon := weapon ;
45043: LD_ADDR_OWVAR 40
45047: PUSH
45048: LD_VAR 0 4
45052: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45053: LD_ADDR_OWVAR 41
45057: PUSH
45058: LD_VAR 0 5
45062: ST_TO_ADDR
// end ;
45063: LD_VAR 0 6
45067: RET
// export function WantPlant ( unit ) ; var task ; begin
45068: LD_INT 0
45070: PPUSH
45071: PPUSH
// result := false ;
45072: LD_ADDR_VAR 0 2
45076: PUSH
45077: LD_INT 0
45079: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45080: LD_ADDR_VAR 0 3
45084: PUSH
45085: LD_VAR 0 1
45089: PPUSH
45090: CALL_OW 437
45094: ST_TO_ADDR
// if task then
45095: LD_VAR 0 3
45099: IFFALSE 45127
// if task [ 1 ] [ 1 ] = p then
45101: LD_VAR 0 3
45105: PUSH
45106: LD_INT 1
45108: ARRAY
45109: PUSH
45110: LD_INT 1
45112: ARRAY
45113: PUSH
45114: LD_STRING p
45116: EQUAL
45117: IFFALSE 45127
// result := true ;
45119: LD_ADDR_VAR 0 2
45123: PUSH
45124: LD_INT 1
45126: ST_TO_ADDR
// end ;
45127: LD_VAR 0 2
45131: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45132: LD_INT 0
45134: PPUSH
45135: PPUSH
45136: PPUSH
45137: PPUSH
// if pos < 1 then
45138: LD_VAR 0 2
45142: PUSH
45143: LD_INT 1
45145: LESS
45146: IFFALSE 45150
// exit ;
45148: GO 45453
// if pos = 1 then
45150: LD_VAR 0 2
45154: PUSH
45155: LD_INT 1
45157: EQUAL
45158: IFFALSE 45191
// result := Replace ( arr , pos [ 1 ] , value ) else
45160: LD_ADDR_VAR 0 4
45164: PUSH
45165: LD_VAR 0 1
45169: PPUSH
45170: LD_VAR 0 2
45174: PUSH
45175: LD_INT 1
45177: ARRAY
45178: PPUSH
45179: LD_VAR 0 3
45183: PPUSH
45184: CALL_OW 1
45188: ST_TO_ADDR
45189: GO 45453
// begin tmp := arr ;
45191: LD_ADDR_VAR 0 6
45195: PUSH
45196: LD_VAR 0 1
45200: ST_TO_ADDR
// s_arr := [ tmp ] ;
45201: LD_ADDR_VAR 0 7
45205: PUSH
45206: LD_VAR 0 6
45210: PUSH
45211: EMPTY
45212: LIST
45213: ST_TO_ADDR
// for i = 1 to pos - 1 do
45214: LD_ADDR_VAR 0 5
45218: PUSH
45219: DOUBLE
45220: LD_INT 1
45222: DEC
45223: ST_TO_ADDR
45224: LD_VAR 0 2
45228: PUSH
45229: LD_INT 1
45231: MINUS
45232: PUSH
45233: FOR_TO
45234: IFFALSE 45279
// begin tmp := tmp [ pos [ i ] ] ;
45236: LD_ADDR_VAR 0 6
45240: PUSH
45241: LD_VAR 0 6
45245: PUSH
45246: LD_VAR 0 2
45250: PUSH
45251: LD_VAR 0 5
45255: ARRAY
45256: ARRAY
45257: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45258: LD_ADDR_VAR 0 7
45262: PUSH
45263: LD_VAR 0 7
45267: PUSH
45268: LD_VAR 0 6
45272: PUSH
45273: EMPTY
45274: LIST
45275: ADD
45276: ST_TO_ADDR
// end ;
45277: GO 45233
45279: POP
45280: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45281: LD_ADDR_VAR 0 6
45285: PUSH
45286: LD_VAR 0 6
45290: PPUSH
45291: LD_VAR 0 2
45295: PUSH
45296: LD_VAR 0 2
45300: ARRAY
45301: PPUSH
45302: LD_VAR 0 3
45306: PPUSH
45307: CALL_OW 1
45311: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45312: LD_ADDR_VAR 0 7
45316: PUSH
45317: LD_VAR 0 7
45321: PPUSH
45322: LD_VAR 0 7
45326: PPUSH
45327: LD_VAR 0 6
45331: PPUSH
45332: CALL_OW 1
45336: ST_TO_ADDR
// for i = s_arr downto 2 do
45337: LD_ADDR_VAR 0 5
45341: PUSH
45342: DOUBLE
45343: LD_VAR 0 7
45347: INC
45348: ST_TO_ADDR
45349: LD_INT 2
45351: PUSH
45352: FOR_DOWNTO
45353: IFFALSE 45437
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45355: LD_ADDR_VAR 0 6
45359: PUSH
45360: LD_VAR 0 7
45364: PUSH
45365: LD_VAR 0 5
45369: PUSH
45370: LD_INT 1
45372: MINUS
45373: ARRAY
45374: PPUSH
45375: LD_VAR 0 2
45379: PUSH
45380: LD_VAR 0 5
45384: PUSH
45385: LD_INT 1
45387: MINUS
45388: ARRAY
45389: PPUSH
45390: LD_VAR 0 7
45394: PUSH
45395: LD_VAR 0 5
45399: ARRAY
45400: PPUSH
45401: CALL_OW 1
45405: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45406: LD_ADDR_VAR 0 7
45410: PUSH
45411: LD_VAR 0 7
45415: PPUSH
45416: LD_VAR 0 5
45420: PUSH
45421: LD_INT 1
45423: MINUS
45424: PPUSH
45425: LD_VAR 0 6
45429: PPUSH
45430: CALL_OW 1
45434: ST_TO_ADDR
// end ;
45435: GO 45352
45437: POP
45438: POP
// result := s_arr [ 1 ] ;
45439: LD_ADDR_VAR 0 4
45443: PUSH
45444: LD_VAR 0 7
45448: PUSH
45449: LD_INT 1
45451: ARRAY
45452: ST_TO_ADDR
// end ; end ;
45453: LD_VAR 0 4
45457: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45458: LD_INT 0
45460: PPUSH
45461: PPUSH
// if not list then
45462: LD_VAR 0 1
45466: NOT
45467: IFFALSE 45471
// exit ;
45469: GO 45562
// i := list [ pos1 ] ;
45471: LD_ADDR_VAR 0 5
45475: PUSH
45476: LD_VAR 0 1
45480: PUSH
45481: LD_VAR 0 2
45485: ARRAY
45486: ST_TO_ADDR
// if not i then
45487: LD_VAR 0 5
45491: NOT
45492: IFFALSE 45496
// exit ;
45494: GO 45562
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45496: LD_ADDR_VAR 0 1
45500: PUSH
45501: LD_VAR 0 1
45505: PPUSH
45506: LD_VAR 0 2
45510: PPUSH
45511: LD_VAR 0 1
45515: PUSH
45516: LD_VAR 0 3
45520: ARRAY
45521: PPUSH
45522: CALL_OW 1
45526: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45527: LD_ADDR_VAR 0 1
45531: PUSH
45532: LD_VAR 0 1
45536: PPUSH
45537: LD_VAR 0 3
45541: PPUSH
45542: LD_VAR 0 5
45546: PPUSH
45547: CALL_OW 1
45551: ST_TO_ADDR
// result := list ;
45552: LD_ADDR_VAR 0 4
45556: PUSH
45557: LD_VAR 0 1
45561: ST_TO_ADDR
// end ;
45562: LD_VAR 0 4
45566: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45567: LD_INT 0
45569: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45570: LD_ADDR_VAR 0 5
45574: PUSH
45575: LD_VAR 0 1
45579: PPUSH
45580: CALL_OW 250
45584: PPUSH
45585: LD_VAR 0 1
45589: PPUSH
45590: CALL_OW 251
45594: PPUSH
45595: LD_VAR 0 2
45599: PPUSH
45600: LD_VAR 0 3
45604: PPUSH
45605: LD_VAR 0 4
45609: PPUSH
45610: CALL 45620 0 5
45614: ST_TO_ADDR
// end ;
45615: LD_VAR 0 5
45619: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45620: LD_INT 0
45622: PPUSH
45623: PPUSH
45624: PPUSH
45625: PPUSH
// if not list then
45626: LD_VAR 0 3
45630: NOT
45631: IFFALSE 45635
// exit ;
45633: GO 46023
// result := [ ] ;
45635: LD_ADDR_VAR 0 6
45639: PUSH
45640: EMPTY
45641: ST_TO_ADDR
// for i in list do
45642: LD_ADDR_VAR 0 7
45646: PUSH
45647: LD_VAR 0 3
45651: PUSH
45652: FOR_IN
45653: IFFALSE 45855
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45655: LD_ADDR_VAR 0 9
45659: PUSH
45660: LD_VAR 0 7
45664: PPUSH
45665: LD_VAR 0 1
45669: PPUSH
45670: LD_VAR 0 2
45674: PPUSH
45675: CALL_OW 297
45679: ST_TO_ADDR
// if not result then
45680: LD_VAR 0 6
45684: NOT
45685: IFFALSE 45711
// result := [ [ i , tmp ] ] else
45687: LD_ADDR_VAR 0 6
45691: PUSH
45692: LD_VAR 0 7
45696: PUSH
45697: LD_VAR 0 9
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: EMPTY
45707: LIST
45708: ST_TO_ADDR
45709: GO 45853
// begin if result [ result ] [ 2 ] < tmp then
45711: LD_VAR 0 6
45715: PUSH
45716: LD_VAR 0 6
45720: ARRAY
45721: PUSH
45722: LD_INT 2
45724: ARRAY
45725: PUSH
45726: LD_VAR 0 9
45730: LESS
45731: IFFALSE 45773
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45733: LD_ADDR_VAR 0 6
45737: PUSH
45738: LD_VAR 0 6
45742: PPUSH
45743: LD_VAR 0 6
45747: PUSH
45748: LD_INT 1
45750: PLUS
45751: PPUSH
45752: LD_VAR 0 7
45756: PUSH
45757: LD_VAR 0 9
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PPUSH
45766: CALL_OW 2
45770: ST_TO_ADDR
45771: GO 45853
// for j = 1 to result do
45773: LD_ADDR_VAR 0 8
45777: PUSH
45778: DOUBLE
45779: LD_INT 1
45781: DEC
45782: ST_TO_ADDR
45783: LD_VAR 0 6
45787: PUSH
45788: FOR_TO
45789: IFFALSE 45851
// begin if tmp < result [ j ] [ 2 ] then
45791: LD_VAR 0 9
45795: PUSH
45796: LD_VAR 0 6
45800: PUSH
45801: LD_VAR 0 8
45805: ARRAY
45806: PUSH
45807: LD_INT 2
45809: ARRAY
45810: LESS
45811: IFFALSE 45849
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45813: LD_ADDR_VAR 0 6
45817: PUSH
45818: LD_VAR 0 6
45822: PPUSH
45823: LD_VAR 0 8
45827: PPUSH
45828: LD_VAR 0 7
45832: PUSH
45833: LD_VAR 0 9
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PPUSH
45842: CALL_OW 2
45846: ST_TO_ADDR
// break ;
45847: GO 45851
// end ; end ;
45849: GO 45788
45851: POP
45852: POP
// end ; end ;
45853: GO 45652
45855: POP
45856: POP
// if result and not asc then
45857: LD_VAR 0 6
45861: PUSH
45862: LD_VAR 0 4
45866: NOT
45867: AND
45868: IFFALSE 45943
// begin tmp := result ;
45870: LD_ADDR_VAR 0 9
45874: PUSH
45875: LD_VAR 0 6
45879: ST_TO_ADDR
// for i = tmp downto 1 do
45880: LD_ADDR_VAR 0 7
45884: PUSH
45885: DOUBLE
45886: LD_VAR 0 9
45890: INC
45891: ST_TO_ADDR
45892: LD_INT 1
45894: PUSH
45895: FOR_DOWNTO
45896: IFFALSE 45941
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45898: LD_ADDR_VAR 0 6
45902: PUSH
45903: LD_VAR 0 6
45907: PPUSH
45908: LD_VAR 0 9
45912: PUSH
45913: LD_VAR 0 7
45917: MINUS
45918: PUSH
45919: LD_INT 1
45921: PLUS
45922: PPUSH
45923: LD_VAR 0 9
45927: PUSH
45928: LD_VAR 0 7
45932: ARRAY
45933: PPUSH
45934: CALL_OW 1
45938: ST_TO_ADDR
45939: GO 45895
45941: POP
45942: POP
// end ; tmp := [ ] ;
45943: LD_ADDR_VAR 0 9
45947: PUSH
45948: EMPTY
45949: ST_TO_ADDR
// if mode then
45950: LD_VAR 0 5
45954: IFFALSE 46023
// begin for i = 1 to result do
45956: LD_ADDR_VAR 0 7
45960: PUSH
45961: DOUBLE
45962: LD_INT 1
45964: DEC
45965: ST_TO_ADDR
45966: LD_VAR 0 6
45970: PUSH
45971: FOR_TO
45972: IFFALSE 46011
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45974: LD_ADDR_VAR 0 9
45978: PUSH
45979: LD_VAR 0 9
45983: PPUSH
45984: LD_VAR 0 7
45988: PPUSH
45989: LD_VAR 0 6
45993: PUSH
45994: LD_VAR 0 7
45998: ARRAY
45999: PUSH
46000: LD_INT 1
46002: ARRAY
46003: PPUSH
46004: CALL_OW 1
46008: ST_TO_ADDR
46009: GO 45971
46011: POP
46012: POP
// result := tmp ;
46013: LD_ADDR_VAR 0 6
46017: PUSH
46018: LD_VAR 0 9
46022: ST_TO_ADDR
// end ; end ;
46023: LD_VAR 0 6
46027: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46028: LD_INT 0
46030: PPUSH
46031: PPUSH
46032: PPUSH
46033: PPUSH
46034: PPUSH
46035: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46036: LD_ADDR_VAR 0 5
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
// if not x or not y then
46058: LD_VAR 0 2
46062: NOT
46063: PUSH
46064: LD_VAR 0 3
46068: NOT
46069: OR
46070: IFFALSE 46074
// exit ;
46072: GO 47724
// if not range then
46074: LD_VAR 0 4
46078: NOT
46079: IFFALSE 46089
// range := 10 ;
46081: LD_ADDR_VAR 0 4
46085: PUSH
46086: LD_INT 10
46088: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46089: LD_ADDR_VAR 0 8
46093: PUSH
46094: LD_INT 81
46096: PUSH
46097: LD_VAR 0 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 92
46108: PUSH
46109: LD_VAR 0 2
46113: PUSH
46114: LD_VAR 0 3
46118: PUSH
46119: LD_VAR 0 4
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: PUSH
46133: LD_INT 21
46135: PUSH
46136: LD_INT 3
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: PPUSH
46152: CALL_OW 69
46156: ST_TO_ADDR
// if not tmp then
46157: LD_VAR 0 8
46161: NOT
46162: IFFALSE 46166
// exit ;
46164: GO 47724
// for i in tmp do
46166: LD_ADDR_VAR 0 6
46170: PUSH
46171: LD_VAR 0 8
46175: PUSH
46176: FOR_IN
46177: IFFALSE 47699
// begin points := [ 0 , 0 , 0 ] ;
46179: LD_ADDR_VAR 0 9
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: LIST
46197: ST_TO_ADDR
// bpoints := 1 ;
46198: LD_ADDR_VAR 0 10
46202: PUSH
46203: LD_INT 1
46205: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46206: LD_VAR 0 6
46210: PPUSH
46211: CALL_OW 247
46215: PUSH
46216: LD_INT 1
46218: DOUBLE
46219: EQUAL
46220: IFTRUE 46224
46222: GO 46802
46224: POP
// begin if GetClass ( i ) = 1 then
46225: LD_VAR 0 6
46229: PPUSH
46230: CALL_OW 257
46234: PUSH
46235: LD_INT 1
46237: EQUAL
46238: IFFALSE 46259
// points := [ 10 , 5 , 3 ] ;
46240: LD_ADDR_VAR 0 9
46244: PUSH
46245: LD_INT 10
46247: PUSH
46248: LD_INT 5
46250: PUSH
46251: LD_INT 3
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46259: LD_VAR 0 6
46263: PPUSH
46264: CALL_OW 257
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 3
46274: PUSH
46275: LD_INT 4
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: LIST
46282: IN
46283: IFFALSE 46304
// points := [ 3 , 2 , 1 ] ;
46285: LD_ADDR_VAR 0 9
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46304: LD_VAR 0 6
46308: PPUSH
46309: CALL_OW 257
46313: PUSH
46314: LD_INT 5
46316: EQUAL
46317: IFFALSE 46338
// points := [ 130 , 5 , 2 ] ;
46319: LD_ADDR_VAR 0 9
46323: PUSH
46324: LD_INT 130
46326: PUSH
46327: LD_INT 5
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46338: LD_VAR 0 6
46342: PPUSH
46343: CALL_OW 257
46347: PUSH
46348: LD_INT 8
46350: EQUAL
46351: IFFALSE 46372
// points := [ 35 , 35 , 30 ] ;
46353: LD_ADDR_VAR 0 9
46357: PUSH
46358: LD_INT 35
46360: PUSH
46361: LD_INT 35
46363: PUSH
46364: LD_INT 30
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46372: LD_VAR 0 6
46376: PPUSH
46377: CALL_OW 257
46381: PUSH
46382: LD_INT 9
46384: EQUAL
46385: IFFALSE 46406
// points := [ 20 , 55 , 40 ] ;
46387: LD_ADDR_VAR 0 9
46391: PUSH
46392: LD_INT 20
46394: PUSH
46395: LD_INT 55
46397: PUSH
46398: LD_INT 40
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: LIST
46405: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46406: LD_VAR 0 6
46410: PPUSH
46411: CALL_OW 257
46415: PUSH
46416: LD_INT 12
46418: PUSH
46419: LD_INT 16
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: IN
46426: IFFALSE 46447
// points := [ 5 , 3 , 2 ] ;
46428: LD_ADDR_VAR 0 9
46432: PUSH
46433: LD_INT 5
46435: PUSH
46436: LD_INT 3
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: LIST
46446: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46447: LD_VAR 0 6
46451: PPUSH
46452: CALL_OW 257
46456: PUSH
46457: LD_INT 17
46459: EQUAL
46460: IFFALSE 46481
// points := [ 100 , 50 , 75 ] ;
46462: LD_ADDR_VAR 0 9
46466: PUSH
46467: LD_INT 100
46469: PUSH
46470: LD_INT 50
46472: PUSH
46473: LD_INT 75
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: LIST
46480: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46481: LD_VAR 0 6
46485: PPUSH
46486: CALL_OW 257
46490: PUSH
46491: LD_INT 15
46493: EQUAL
46494: IFFALSE 46515
// points := [ 10 , 5 , 3 ] ;
46496: LD_ADDR_VAR 0 9
46500: PUSH
46501: LD_INT 10
46503: PUSH
46504: LD_INT 5
46506: PUSH
46507: LD_INT 3
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: LIST
46514: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46515: LD_VAR 0 6
46519: PPUSH
46520: CALL_OW 257
46524: PUSH
46525: LD_INT 14
46527: EQUAL
46528: IFFALSE 46549
// points := [ 10 , 0 , 0 ] ;
46530: LD_ADDR_VAR 0 9
46534: PUSH
46535: LD_INT 10
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46549: LD_VAR 0 6
46553: PPUSH
46554: CALL_OW 257
46558: PUSH
46559: LD_INT 11
46561: EQUAL
46562: IFFALSE 46583
// points := [ 30 , 10 , 5 ] ;
46564: LD_ADDR_VAR 0 9
46568: PUSH
46569: LD_INT 30
46571: PUSH
46572: LD_INT 10
46574: PUSH
46575: LD_INT 5
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: LIST
46582: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46583: LD_VAR 0 1
46587: PPUSH
46588: LD_INT 5
46590: PPUSH
46591: CALL_OW 321
46595: PUSH
46596: LD_INT 2
46598: EQUAL
46599: IFFALSE 46616
// bpoints := bpoints * 1.8 ;
46601: LD_ADDR_VAR 0 10
46605: PUSH
46606: LD_VAR 0 10
46610: PUSH
46611: LD_REAL  1.80000000000000E+0000
46614: MUL
46615: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46616: LD_VAR 0 6
46620: PPUSH
46621: CALL_OW 257
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: LD_INT 3
46634: PUSH
46635: LD_INT 4
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: IN
46644: PUSH
46645: LD_VAR 0 1
46649: PPUSH
46650: LD_INT 51
46652: PPUSH
46653: CALL_OW 321
46657: PUSH
46658: LD_INT 2
46660: EQUAL
46661: AND
46662: IFFALSE 46679
// bpoints := bpoints * 1.2 ;
46664: LD_ADDR_VAR 0 10
46668: PUSH
46669: LD_VAR 0 10
46673: PUSH
46674: LD_REAL  1.20000000000000E+0000
46677: MUL
46678: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46679: LD_VAR 0 6
46683: PPUSH
46684: CALL_OW 257
46688: PUSH
46689: LD_INT 5
46691: PUSH
46692: LD_INT 7
46694: PUSH
46695: LD_INT 9
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: IN
46703: PUSH
46704: LD_VAR 0 1
46708: PPUSH
46709: LD_INT 52
46711: PPUSH
46712: CALL_OW 321
46716: PUSH
46717: LD_INT 2
46719: EQUAL
46720: AND
46721: IFFALSE 46738
// bpoints := bpoints * 1.5 ;
46723: LD_ADDR_VAR 0 10
46727: PUSH
46728: LD_VAR 0 10
46732: PUSH
46733: LD_REAL  1.50000000000000E+0000
46736: MUL
46737: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46738: LD_VAR 0 1
46742: PPUSH
46743: LD_INT 66
46745: PPUSH
46746: CALL_OW 321
46750: PUSH
46751: LD_INT 2
46753: EQUAL
46754: IFFALSE 46771
// bpoints := bpoints * 1.1 ;
46756: LD_ADDR_VAR 0 10
46760: PUSH
46761: LD_VAR 0 10
46765: PUSH
46766: LD_REAL  1.10000000000000E+0000
46769: MUL
46770: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46771: LD_ADDR_VAR 0 10
46775: PUSH
46776: LD_VAR 0 10
46780: PUSH
46781: LD_VAR 0 6
46785: PPUSH
46786: LD_INT 1
46788: PPUSH
46789: CALL_OW 259
46793: PUSH
46794: LD_REAL  1.15000000000000E+0000
46797: MUL
46798: MUL
46799: ST_TO_ADDR
// end ; unit_vehicle :
46800: GO 47628
46802: LD_INT 2
46804: DOUBLE
46805: EQUAL
46806: IFTRUE 46810
46808: GO 47616
46810: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46811: LD_VAR 0 6
46815: PPUSH
46816: CALL_OW 264
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 42
46826: PUSH
46827: LD_INT 24
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: LIST
46834: IN
46835: IFFALSE 46856
// points := [ 25 , 5 , 3 ] ;
46837: LD_ADDR_VAR 0 9
46841: PUSH
46842: LD_INT 25
46844: PUSH
46845: LD_INT 5
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: LIST
46855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46856: LD_VAR 0 6
46860: PPUSH
46861: CALL_OW 264
46865: PUSH
46866: LD_INT 4
46868: PUSH
46869: LD_INT 43
46871: PUSH
46872: LD_INT 25
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: IN
46880: IFFALSE 46901
// points := [ 40 , 15 , 5 ] ;
46882: LD_ADDR_VAR 0 9
46886: PUSH
46887: LD_INT 40
46889: PUSH
46890: LD_INT 15
46892: PUSH
46893: LD_INT 5
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: LIST
46900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46901: LD_VAR 0 6
46905: PPUSH
46906: CALL_OW 264
46910: PUSH
46911: LD_INT 3
46913: PUSH
46914: LD_INT 23
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: IN
46921: IFFALSE 46942
// points := [ 7 , 25 , 8 ] ;
46923: LD_ADDR_VAR 0 9
46927: PUSH
46928: LD_INT 7
46930: PUSH
46931: LD_INT 25
46933: PUSH
46934: LD_INT 8
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: LIST
46941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46942: LD_VAR 0 6
46946: PPUSH
46947: CALL_OW 264
46951: PUSH
46952: LD_INT 5
46954: PUSH
46955: LD_INT 27
46957: PUSH
46958: LD_INT 44
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: IN
46966: IFFALSE 46987
// points := [ 14 , 50 , 16 ] ;
46968: LD_ADDR_VAR 0 9
46972: PUSH
46973: LD_INT 14
46975: PUSH
46976: LD_INT 50
46978: PUSH
46979: LD_INT 16
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46987: LD_VAR 0 6
46991: PPUSH
46992: CALL_OW 264
46996: PUSH
46997: LD_INT 6
46999: PUSH
47000: LD_INT 46
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: IN
47007: IFFALSE 47028
// points := [ 32 , 120 , 70 ] ;
47009: LD_ADDR_VAR 0 9
47013: PUSH
47014: LD_INT 32
47016: PUSH
47017: LD_INT 120
47019: PUSH
47020: LD_INT 70
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47028: LD_VAR 0 6
47032: PPUSH
47033: CALL_OW 264
47037: PUSH
47038: LD_INT 7
47040: PUSH
47041: LD_INT 28
47043: PUSH
47044: LD_INT 45
47046: PUSH
47047: LD_INT 92
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: IN
47056: IFFALSE 47077
// points := [ 35 , 20 , 45 ] ;
47058: LD_ADDR_VAR 0 9
47062: PUSH
47063: LD_INT 35
47065: PUSH
47066: LD_INT 20
47068: PUSH
47069: LD_INT 45
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: LIST
47076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47077: LD_VAR 0 6
47081: PPUSH
47082: CALL_OW 264
47086: PUSH
47087: LD_INT 47
47089: PUSH
47090: EMPTY
47091: LIST
47092: IN
47093: IFFALSE 47114
// points := [ 67 , 45 , 75 ] ;
47095: LD_ADDR_VAR 0 9
47099: PUSH
47100: LD_INT 67
47102: PUSH
47103: LD_INT 45
47105: PUSH
47106: LD_INT 75
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: LIST
47113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47114: LD_VAR 0 6
47118: PPUSH
47119: CALL_OW 264
47123: PUSH
47124: LD_INT 26
47126: PUSH
47127: EMPTY
47128: LIST
47129: IN
47130: IFFALSE 47151
// points := [ 120 , 30 , 80 ] ;
47132: LD_ADDR_VAR 0 9
47136: PUSH
47137: LD_INT 120
47139: PUSH
47140: LD_INT 30
47142: PUSH
47143: LD_INT 80
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: LIST
47150: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47151: LD_VAR 0 6
47155: PPUSH
47156: CALL_OW 264
47160: PUSH
47161: LD_INT 22
47163: PUSH
47164: EMPTY
47165: LIST
47166: IN
47167: IFFALSE 47188
// points := [ 40 , 1 , 1 ] ;
47169: LD_ADDR_VAR 0 9
47173: PUSH
47174: LD_INT 40
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: LIST
47187: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47188: LD_VAR 0 6
47192: PPUSH
47193: CALL_OW 264
47197: PUSH
47198: LD_INT 29
47200: PUSH
47201: EMPTY
47202: LIST
47203: IN
47204: IFFALSE 47225
// points := [ 70 , 200 , 400 ] ;
47206: LD_ADDR_VAR 0 9
47210: PUSH
47211: LD_INT 70
47213: PUSH
47214: LD_INT 200
47216: PUSH
47217: LD_INT 400
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: LIST
47224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47225: LD_VAR 0 6
47229: PPUSH
47230: CALL_OW 264
47234: PUSH
47235: LD_INT 14
47237: PUSH
47238: LD_INT 53
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: IN
47245: IFFALSE 47266
// points := [ 40 , 10 , 20 ] ;
47247: LD_ADDR_VAR 0 9
47251: PUSH
47252: LD_INT 40
47254: PUSH
47255: LD_INT 10
47257: PUSH
47258: LD_INT 20
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: LIST
47265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47266: LD_VAR 0 6
47270: PPUSH
47271: CALL_OW 264
47275: PUSH
47276: LD_INT 9
47278: PUSH
47279: EMPTY
47280: LIST
47281: IN
47282: IFFALSE 47303
// points := [ 5 , 70 , 20 ] ;
47284: LD_ADDR_VAR 0 9
47288: PUSH
47289: LD_INT 5
47291: PUSH
47292: LD_INT 70
47294: PUSH
47295: LD_INT 20
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: LIST
47302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47303: LD_VAR 0 6
47307: PPUSH
47308: CALL_OW 264
47312: PUSH
47313: LD_INT 10
47315: PUSH
47316: EMPTY
47317: LIST
47318: IN
47319: IFFALSE 47340
// points := [ 35 , 110 , 70 ] ;
47321: LD_ADDR_VAR 0 9
47325: PUSH
47326: LD_INT 35
47328: PUSH
47329: LD_INT 110
47331: PUSH
47332: LD_INT 70
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: LIST
47339: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47340: LD_VAR 0 6
47344: PPUSH
47345: CALL_OW 265
47349: PUSH
47350: LD_INT 25
47352: EQUAL
47353: IFFALSE 47374
// points := [ 80 , 65 , 100 ] ;
47355: LD_ADDR_VAR 0 9
47359: PUSH
47360: LD_INT 80
47362: PUSH
47363: LD_INT 65
47365: PUSH
47366: LD_INT 100
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: LIST
47373: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47374: LD_VAR 0 6
47378: PPUSH
47379: CALL_OW 263
47383: PUSH
47384: LD_INT 1
47386: EQUAL
47387: IFFALSE 47422
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47389: LD_ADDR_VAR 0 10
47393: PUSH
47394: LD_VAR 0 10
47398: PUSH
47399: LD_VAR 0 6
47403: PPUSH
47404: CALL_OW 311
47408: PPUSH
47409: LD_INT 3
47411: PPUSH
47412: CALL_OW 259
47416: PUSH
47417: LD_INT 4
47419: MUL
47420: MUL
47421: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47422: LD_VAR 0 6
47426: PPUSH
47427: CALL_OW 263
47431: PUSH
47432: LD_INT 2
47434: EQUAL
47435: IFFALSE 47486
// begin j := IsControledBy ( i ) ;
47437: LD_ADDR_VAR 0 7
47441: PUSH
47442: LD_VAR 0 6
47446: PPUSH
47447: CALL_OW 312
47451: ST_TO_ADDR
// if j then
47452: LD_VAR 0 7
47456: IFFALSE 47486
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47458: LD_ADDR_VAR 0 10
47462: PUSH
47463: LD_VAR 0 10
47467: PUSH
47468: LD_VAR 0 7
47472: PPUSH
47473: LD_INT 3
47475: PPUSH
47476: CALL_OW 259
47480: PUSH
47481: LD_INT 3
47483: MUL
47484: MUL
47485: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47486: LD_VAR 0 6
47490: PPUSH
47491: CALL_OW 264
47495: PUSH
47496: LD_INT 5
47498: PUSH
47499: LD_INT 6
47501: PUSH
47502: LD_INT 46
47504: PUSH
47505: LD_INT 44
47507: PUSH
47508: LD_INT 47
47510: PUSH
47511: LD_INT 45
47513: PUSH
47514: LD_INT 28
47516: PUSH
47517: LD_INT 7
47519: PUSH
47520: LD_INT 27
47522: PUSH
47523: LD_INT 29
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: IN
47538: PUSH
47539: LD_VAR 0 1
47543: PPUSH
47544: LD_INT 52
47546: PPUSH
47547: CALL_OW 321
47551: PUSH
47552: LD_INT 2
47554: EQUAL
47555: AND
47556: IFFALSE 47573
// bpoints := bpoints * 1.2 ;
47558: LD_ADDR_VAR 0 10
47562: PUSH
47563: LD_VAR 0 10
47567: PUSH
47568: LD_REAL  1.20000000000000E+0000
47571: MUL
47572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47573: LD_VAR 0 6
47577: PPUSH
47578: CALL_OW 264
47582: PUSH
47583: LD_INT 6
47585: PUSH
47586: LD_INT 46
47588: PUSH
47589: LD_INT 47
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: IN
47597: IFFALSE 47614
// bpoints := bpoints * 1.2 ;
47599: LD_ADDR_VAR 0 10
47603: PUSH
47604: LD_VAR 0 10
47608: PUSH
47609: LD_REAL  1.20000000000000E+0000
47612: MUL
47613: ST_TO_ADDR
// end ; unit_building :
47614: GO 47628
47616: LD_INT 3
47618: DOUBLE
47619: EQUAL
47620: IFTRUE 47624
47622: GO 47627
47624: POP
// ; end ;
47625: GO 47628
47627: POP
// for j = 1 to 3 do
47628: LD_ADDR_VAR 0 7
47632: PUSH
47633: DOUBLE
47634: LD_INT 1
47636: DEC
47637: ST_TO_ADDR
47638: LD_INT 3
47640: PUSH
47641: FOR_TO
47642: IFFALSE 47695
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47644: LD_ADDR_VAR 0 5
47648: PUSH
47649: LD_VAR 0 5
47653: PPUSH
47654: LD_VAR 0 7
47658: PPUSH
47659: LD_VAR 0 5
47663: PUSH
47664: LD_VAR 0 7
47668: ARRAY
47669: PUSH
47670: LD_VAR 0 9
47674: PUSH
47675: LD_VAR 0 7
47679: ARRAY
47680: PUSH
47681: LD_VAR 0 10
47685: MUL
47686: PLUS
47687: PPUSH
47688: CALL_OW 1
47692: ST_TO_ADDR
47693: GO 47641
47695: POP
47696: POP
// end ;
47697: GO 46176
47699: POP
47700: POP
// result := Replace ( result , 4 , tmp ) ;
47701: LD_ADDR_VAR 0 5
47705: PUSH
47706: LD_VAR 0 5
47710: PPUSH
47711: LD_INT 4
47713: PPUSH
47714: LD_VAR 0 8
47718: PPUSH
47719: CALL_OW 1
47723: ST_TO_ADDR
// end ;
47724: LD_VAR 0 5
47728: RET
// export function DangerAtRange ( unit , range ) ; begin
47729: LD_INT 0
47731: PPUSH
// if not unit then
47732: LD_VAR 0 1
47736: NOT
47737: IFFALSE 47741
// exit ;
47739: GO 47786
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47741: LD_ADDR_VAR 0 3
47745: PUSH
47746: LD_VAR 0 1
47750: PPUSH
47751: CALL_OW 255
47755: PPUSH
47756: LD_VAR 0 1
47760: PPUSH
47761: CALL_OW 250
47765: PPUSH
47766: LD_VAR 0 1
47770: PPUSH
47771: CALL_OW 251
47775: PPUSH
47776: LD_VAR 0 2
47780: PPUSH
47781: CALL 46028 0 4
47785: ST_TO_ADDR
// end ;
47786: LD_VAR 0 3
47790: RET
// export function DangerInArea ( side , area ) ; begin
47791: LD_INT 0
47793: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47794: LD_ADDR_VAR 0 3
47798: PUSH
47799: LD_VAR 0 2
47803: PPUSH
47804: LD_INT 81
47806: PUSH
47807: LD_VAR 0 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PPUSH
47816: CALL_OW 70
47820: ST_TO_ADDR
// end ;
47821: LD_VAR 0 3
47825: RET
// export function IsExtension ( b ) ; begin
47826: LD_INT 0
47828: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47829: LD_ADDR_VAR 0 2
47833: PUSH
47834: LD_VAR 0 1
47838: PUSH
47839: LD_INT 23
47841: PUSH
47842: LD_INT 20
47844: PUSH
47845: LD_INT 22
47847: PUSH
47848: LD_INT 17
47850: PUSH
47851: LD_INT 24
47853: PUSH
47854: LD_INT 21
47856: PUSH
47857: LD_INT 19
47859: PUSH
47860: LD_INT 16
47862: PUSH
47863: LD_INT 25
47865: PUSH
47866: LD_INT 18
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: IN
47881: ST_TO_ADDR
// end ;
47882: LD_VAR 0 2
47886: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47887: LD_INT 0
47889: PPUSH
47890: PPUSH
47891: PPUSH
// result := [ ] ;
47892: LD_ADDR_VAR 0 4
47896: PUSH
47897: EMPTY
47898: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47899: LD_ADDR_VAR 0 5
47903: PUSH
47904: LD_VAR 0 2
47908: PPUSH
47909: LD_INT 21
47911: PUSH
47912: LD_INT 3
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PPUSH
47919: CALL_OW 70
47923: ST_TO_ADDR
// if not tmp then
47924: LD_VAR 0 5
47928: NOT
47929: IFFALSE 47933
// exit ;
47931: GO 47997
// if checkLink then
47933: LD_VAR 0 3
47937: IFFALSE 47987
// begin for i in tmp do
47939: LD_ADDR_VAR 0 6
47943: PUSH
47944: LD_VAR 0 5
47948: PUSH
47949: FOR_IN
47950: IFFALSE 47985
// if GetBase ( i ) <> base then
47952: LD_VAR 0 6
47956: PPUSH
47957: CALL_OW 274
47961: PUSH
47962: LD_VAR 0 1
47966: NONEQUAL
47967: IFFALSE 47983
// ComLinkToBase ( base , i ) ;
47969: LD_VAR 0 1
47973: PPUSH
47974: LD_VAR 0 6
47978: PPUSH
47979: CALL_OW 169
47983: GO 47949
47985: POP
47986: POP
// end ; result := tmp ;
47987: LD_ADDR_VAR 0 4
47991: PUSH
47992: LD_VAR 0 5
47996: ST_TO_ADDR
// end ;
47997: LD_VAR 0 4
48001: RET
// export function ComComplete ( units , b ) ; var i ; begin
48002: LD_INT 0
48004: PPUSH
48005: PPUSH
// if not units then
48006: LD_VAR 0 1
48010: NOT
48011: IFFALSE 48015
// exit ;
48013: GO 48105
// for i in units do
48015: LD_ADDR_VAR 0 4
48019: PUSH
48020: LD_VAR 0 1
48024: PUSH
48025: FOR_IN
48026: IFFALSE 48103
// if BuildingStatus ( b ) = bs_build then
48028: LD_VAR 0 2
48032: PPUSH
48033: CALL_OW 461
48037: PUSH
48038: LD_INT 1
48040: EQUAL
48041: IFFALSE 48101
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48043: LD_VAR 0 4
48047: PPUSH
48048: LD_STRING h
48050: PUSH
48051: LD_VAR 0 2
48055: PPUSH
48056: CALL_OW 250
48060: PUSH
48061: LD_VAR 0 2
48065: PPUSH
48066: CALL_OW 251
48070: PUSH
48071: LD_VAR 0 2
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: PUSH
48094: EMPTY
48095: LIST
48096: PPUSH
48097: CALL_OW 446
48101: GO 48025
48103: POP
48104: POP
// end ;
48105: LD_VAR 0 3
48109: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48110: LD_INT 0
48112: PPUSH
48113: PPUSH
48114: PPUSH
48115: PPUSH
48116: PPUSH
48117: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48118: LD_VAR 0 1
48122: NOT
48123: PUSH
48124: LD_VAR 0 1
48128: PPUSH
48129: CALL_OW 263
48133: PUSH
48134: LD_INT 2
48136: NONEQUAL
48137: OR
48138: IFFALSE 48142
// exit ;
48140: GO 48458
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48142: LD_ADDR_VAR 0 6
48146: PUSH
48147: LD_INT 22
48149: PUSH
48150: LD_VAR 0 1
48154: PPUSH
48155: CALL_OW 255
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: LD_INT 30
48169: PUSH
48170: LD_INT 36
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 34
48179: PUSH
48180: LD_INT 31
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PPUSH
48196: CALL_OW 69
48200: ST_TO_ADDR
// if not tmp then
48201: LD_VAR 0 6
48205: NOT
48206: IFFALSE 48210
// exit ;
48208: GO 48458
// result := [ ] ;
48210: LD_ADDR_VAR 0 2
48214: PUSH
48215: EMPTY
48216: ST_TO_ADDR
// for i in tmp do
48217: LD_ADDR_VAR 0 3
48221: PUSH
48222: LD_VAR 0 6
48226: PUSH
48227: FOR_IN
48228: IFFALSE 48299
// begin t := UnitsInside ( i ) ;
48230: LD_ADDR_VAR 0 4
48234: PUSH
48235: LD_VAR 0 3
48239: PPUSH
48240: CALL_OW 313
48244: ST_TO_ADDR
// if t then
48245: LD_VAR 0 4
48249: IFFALSE 48297
// for j in t do
48251: LD_ADDR_VAR 0 7
48255: PUSH
48256: LD_VAR 0 4
48260: PUSH
48261: FOR_IN
48262: IFFALSE 48295
// result := Replace ( result , result + 1 , j ) ;
48264: LD_ADDR_VAR 0 2
48268: PUSH
48269: LD_VAR 0 2
48273: PPUSH
48274: LD_VAR 0 2
48278: PUSH
48279: LD_INT 1
48281: PLUS
48282: PPUSH
48283: LD_VAR 0 7
48287: PPUSH
48288: CALL_OW 1
48292: ST_TO_ADDR
48293: GO 48261
48295: POP
48296: POP
// end ;
48297: GO 48227
48299: POP
48300: POP
// if not result then
48301: LD_VAR 0 2
48305: NOT
48306: IFFALSE 48310
// exit ;
48308: GO 48458
// mech := result [ 1 ] ;
48310: LD_ADDR_VAR 0 5
48314: PUSH
48315: LD_VAR 0 2
48319: PUSH
48320: LD_INT 1
48322: ARRAY
48323: ST_TO_ADDR
// if result > 1 then
48324: LD_VAR 0 2
48328: PUSH
48329: LD_INT 1
48331: GREATER
48332: IFFALSE 48444
// begin for i = 2 to result do
48334: LD_ADDR_VAR 0 3
48338: PUSH
48339: DOUBLE
48340: LD_INT 2
48342: DEC
48343: ST_TO_ADDR
48344: LD_VAR 0 2
48348: PUSH
48349: FOR_TO
48350: IFFALSE 48442
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48352: LD_ADDR_VAR 0 4
48356: PUSH
48357: LD_VAR 0 2
48361: PUSH
48362: LD_VAR 0 3
48366: ARRAY
48367: PPUSH
48368: LD_INT 3
48370: PPUSH
48371: CALL_OW 259
48375: PUSH
48376: LD_VAR 0 2
48380: PUSH
48381: LD_VAR 0 3
48385: ARRAY
48386: PPUSH
48387: CALL_OW 432
48391: MINUS
48392: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48393: LD_VAR 0 4
48397: PUSH
48398: LD_VAR 0 5
48402: PPUSH
48403: LD_INT 3
48405: PPUSH
48406: CALL_OW 259
48410: PUSH
48411: LD_VAR 0 5
48415: PPUSH
48416: CALL_OW 432
48420: MINUS
48421: GREATEREQUAL
48422: IFFALSE 48440
// mech := result [ i ] ;
48424: LD_ADDR_VAR 0 5
48428: PUSH
48429: LD_VAR 0 2
48433: PUSH
48434: LD_VAR 0 3
48438: ARRAY
48439: ST_TO_ADDR
// end ;
48440: GO 48349
48442: POP
48443: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48444: LD_VAR 0 1
48448: PPUSH
48449: LD_VAR 0 5
48453: PPUSH
48454: CALL_OW 135
// end ;
48458: LD_VAR 0 2
48462: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48463: LD_INT 0
48465: PPUSH
48466: PPUSH
48467: PPUSH
48468: PPUSH
48469: PPUSH
48470: PPUSH
48471: PPUSH
48472: PPUSH
48473: PPUSH
48474: PPUSH
48475: PPUSH
48476: PPUSH
48477: PPUSH
// result := [ ] ;
48478: LD_ADDR_VAR 0 7
48482: PUSH
48483: EMPTY
48484: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48485: LD_VAR 0 1
48489: PPUSH
48490: CALL_OW 266
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: IN
48505: NOT
48506: IFFALSE 48510
// exit ;
48508: GO 50144
// if name then
48510: LD_VAR 0 3
48514: IFFALSE 48530
// SetBName ( base_dep , name ) ;
48516: LD_VAR 0 1
48520: PPUSH
48521: LD_VAR 0 3
48525: PPUSH
48526: CALL_OW 500
// base := GetBase ( base_dep ) ;
48530: LD_ADDR_VAR 0 15
48534: PUSH
48535: LD_VAR 0 1
48539: PPUSH
48540: CALL_OW 274
48544: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48545: LD_ADDR_VAR 0 16
48549: PUSH
48550: LD_VAR 0 1
48554: PPUSH
48555: CALL_OW 255
48559: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48560: LD_ADDR_VAR 0 17
48564: PUSH
48565: LD_VAR 0 1
48569: PPUSH
48570: CALL_OW 248
48574: ST_TO_ADDR
// if sources then
48575: LD_VAR 0 5
48579: IFFALSE 48626
// for i = 1 to 3 do
48581: LD_ADDR_VAR 0 8
48585: PUSH
48586: DOUBLE
48587: LD_INT 1
48589: DEC
48590: ST_TO_ADDR
48591: LD_INT 3
48593: PUSH
48594: FOR_TO
48595: IFFALSE 48624
// AddResourceType ( base , i , sources [ i ] ) ;
48597: LD_VAR 0 15
48601: PPUSH
48602: LD_VAR 0 8
48606: PPUSH
48607: LD_VAR 0 5
48611: PUSH
48612: LD_VAR 0 8
48616: ARRAY
48617: PPUSH
48618: CALL_OW 276
48622: GO 48594
48624: POP
48625: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48626: LD_ADDR_VAR 0 18
48630: PUSH
48631: LD_VAR 0 15
48635: PPUSH
48636: LD_VAR 0 2
48640: PPUSH
48641: LD_INT 1
48643: PPUSH
48644: CALL 47887 0 3
48648: ST_TO_ADDR
// InitHc ;
48649: CALL_OW 19
// InitUc ;
48653: CALL_OW 18
// uc_side := side ;
48657: LD_ADDR_OWVAR 20
48661: PUSH
48662: LD_VAR 0 16
48666: ST_TO_ADDR
// uc_nation := nation ;
48667: LD_ADDR_OWVAR 21
48671: PUSH
48672: LD_VAR 0 17
48676: ST_TO_ADDR
// if buildings then
48677: LD_VAR 0 18
48681: IFFALSE 50003
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48683: LD_ADDR_VAR 0 19
48687: PUSH
48688: LD_VAR 0 18
48692: PPUSH
48693: LD_INT 2
48695: PUSH
48696: LD_INT 30
48698: PUSH
48699: LD_INT 29
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 30
48708: PUSH
48709: LD_INT 30
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: LIST
48720: PPUSH
48721: CALL_OW 72
48725: ST_TO_ADDR
// if tmp then
48726: LD_VAR 0 19
48730: IFFALSE 48778
// for i in tmp do
48732: LD_ADDR_VAR 0 8
48736: PUSH
48737: LD_VAR 0 19
48741: PUSH
48742: FOR_IN
48743: IFFALSE 48776
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48745: LD_VAR 0 8
48749: PPUSH
48750: CALL_OW 250
48754: PPUSH
48755: LD_VAR 0 8
48759: PPUSH
48760: CALL_OW 251
48764: PPUSH
48765: LD_VAR 0 16
48769: PPUSH
48770: CALL_OW 441
48774: GO 48742
48776: POP
48777: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48778: LD_VAR 0 18
48782: PPUSH
48783: LD_INT 2
48785: PUSH
48786: LD_INT 30
48788: PUSH
48789: LD_INT 32
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 30
48798: PUSH
48799: LD_INT 33
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: PPUSH
48811: CALL_OW 72
48815: IFFALSE 48903
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48817: LD_ADDR_VAR 0 8
48821: PUSH
48822: LD_VAR 0 18
48826: PPUSH
48827: LD_INT 2
48829: PUSH
48830: LD_INT 30
48832: PUSH
48833: LD_INT 32
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 30
48842: PUSH
48843: LD_INT 33
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: PPUSH
48855: CALL_OW 72
48859: PUSH
48860: FOR_IN
48861: IFFALSE 48901
// begin if not GetBWeapon ( i ) then
48863: LD_VAR 0 8
48867: PPUSH
48868: CALL_OW 269
48872: NOT
48873: IFFALSE 48899
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48875: LD_VAR 0 8
48879: PPUSH
48880: LD_VAR 0 8
48884: PPUSH
48885: LD_VAR 0 2
48889: PPUSH
48890: CALL 50149 0 2
48894: PPUSH
48895: CALL_OW 431
// end ;
48899: GO 48860
48901: POP
48902: POP
// end ; for i = 1 to personel do
48903: LD_ADDR_VAR 0 8
48907: PUSH
48908: DOUBLE
48909: LD_INT 1
48911: DEC
48912: ST_TO_ADDR
48913: LD_VAR 0 6
48917: PUSH
48918: FOR_TO
48919: IFFALSE 49983
// begin if i > 4 then
48921: LD_VAR 0 8
48925: PUSH
48926: LD_INT 4
48928: GREATER
48929: IFFALSE 48933
// break ;
48931: GO 49983
// case i of 1 :
48933: LD_VAR 0 8
48937: PUSH
48938: LD_INT 1
48940: DOUBLE
48941: EQUAL
48942: IFTRUE 48946
48944: GO 49026
48946: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48947: LD_ADDR_VAR 0 12
48951: PUSH
48952: LD_VAR 0 18
48956: PPUSH
48957: LD_INT 22
48959: PUSH
48960: LD_VAR 0 16
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 58
48971: PUSH
48972: EMPTY
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 30
48980: PUSH
48981: LD_INT 32
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 30
48990: PUSH
48991: LD_INT 4
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 30
49000: PUSH
49001: LD_INT 5
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: LIST
49018: PPUSH
49019: CALL_OW 72
49023: ST_TO_ADDR
49024: GO 49248
49026: LD_INT 2
49028: DOUBLE
49029: EQUAL
49030: IFTRUE 49034
49032: GO 49096
49034: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49035: LD_ADDR_VAR 0 12
49039: PUSH
49040: LD_VAR 0 18
49044: PPUSH
49045: LD_INT 22
49047: PUSH
49048: LD_VAR 0 16
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: LD_INT 30
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 30
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: LIST
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PPUSH
49089: CALL_OW 72
49093: ST_TO_ADDR
49094: GO 49248
49096: LD_INT 3
49098: DOUBLE
49099: EQUAL
49100: IFTRUE 49104
49102: GO 49166
49104: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49105: LD_ADDR_VAR 0 12
49109: PUSH
49110: LD_VAR 0 18
49114: PPUSH
49115: LD_INT 22
49117: PUSH
49118: LD_VAR 0 16
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: LD_INT 30
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 30
49142: PUSH
49143: LD_INT 3
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PPUSH
49159: CALL_OW 72
49163: ST_TO_ADDR
49164: GO 49248
49166: LD_INT 4
49168: DOUBLE
49169: EQUAL
49170: IFTRUE 49174
49172: GO 49247
49174: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49175: LD_ADDR_VAR 0 12
49179: PUSH
49180: LD_VAR 0 18
49184: PPUSH
49185: LD_INT 22
49187: PUSH
49188: LD_VAR 0 16
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: LD_INT 30
49202: PUSH
49203: LD_INT 6
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 30
49212: PUSH
49213: LD_INT 7
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 30
49222: PUSH
49223: LD_INT 8
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PPUSH
49240: CALL_OW 72
49244: ST_TO_ADDR
49245: GO 49248
49247: POP
// if i = 1 then
49248: LD_VAR 0 8
49252: PUSH
49253: LD_INT 1
49255: EQUAL
49256: IFFALSE 49367
// begin tmp := [ ] ;
49258: LD_ADDR_VAR 0 19
49262: PUSH
49263: EMPTY
49264: ST_TO_ADDR
// for j in f do
49265: LD_ADDR_VAR 0 9
49269: PUSH
49270: LD_VAR 0 12
49274: PUSH
49275: FOR_IN
49276: IFFALSE 49349
// if GetBType ( j ) = b_bunker then
49278: LD_VAR 0 9
49282: PPUSH
49283: CALL_OW 266
49287: PUSH
49288: LD_INT 32
49290: EQUAL
49291: IFFALSE 49318
// tmp := Insert ( tmp , 1 , j ) else
49293: LD_ADDR_VAR 0 19
49297: PUSH
49298: LD_VAR 0 19
49302: PPUSH
49303: LD_INT 1
49305: PPUSH
49306: LD_VAR 0 9
49310: PPUSH
49311: CALL_OW 2
49315: ST_TO_ADDR
49316: GO 49347
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49318: LD_ADDR_VAR 0 19
49322: PUSH
49323: LD_VAR 0 19
49327: PPUSH
49328: LD_VAR 0 19
49332: PUSH
49333: LD_INT 1
49335: PLUS
49336: PPUSH
49337: LD_VAR 0 9
49341: PPUSH
49342: CALL_OW 2
49346: ST_TO_ADDR
49347: GO 49275
49349: POP
49350: POP
// if tmp then
49351: LD_VAR 0 19
49355: IFFALSE 49367
// f := tmp ;
49357: LD_ADDR_VAR 0 12
49361: PUSH
49362: LD_VAR 0 19
49366: ST_TO_ADDR
// end ; x := personel [ i ] ;
49367: LD_ADDR_VAR 0 13
49371: PUSH
49372: LD_VAR 0 6
49376: PUSH
49377: LD_VAR 0 8
49381: ARRAY
49382: ST_TO_ADDR
// if x = - 1 then
49383: LD_VAR 0 13
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: EQUAL
49392: IFFALSE 49601
// begin for j in f do
49394: LD_ADDR_VAR 0 9
49398: PUSH
49399: LD_VAR 0 12
49403: PUSH
49404: FOR_IN
49405: IFFALSE 49597
// repeat InitHc ;
49407: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49411: LD_VAR 0 9
49415: PPUSH
49416: CALL_OW 266
49420: PUSH
49421: LD_INT 5
49423: EQUAL
49424: IFFALSE 49494
// begin if UnitsInside ( j ) < 3 then
49426: LD_VAR 0 9
49430: PPUSH
49431: CALL_OW 313
49435: PUSH
49436: LD_INT 3
49438: LESS
49439: IFFALSE 49475
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49441: LD_INT 0
49443: PPUSH
49444: LD_INT 5
49446: PUSH
49447: LD_INT 8
49449: PUSH
49450: LD_INT 9
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: LIST
49457: PUSH
49458: LD_VAR 0 17
49462: ARRAY
49463: PPUSH
49464: LD_VAR 0 4
49468: PPUSH
49469: CALL_OW 380
49473: GO 49492
// PrepareHuman ( false , i , skill ) ;
49475: LD_INT 0
49477: PPUSH
49478: LD_VAR 0 8
49482: PPUSH
49483: LD_VAR 0 4
49487: PPUSH
49488: CALL_OW 380
// end else
49492: GO 49511
// PrepareHuman ( false , i , skill ) ;
49494: LD_INT 0
49496: PPUSH
49497: LD_VAR 0 8
49501: PPUSH
49502: LD_VAR 0 4
49506: PPUSH
49507: CALL_OW 380
// un := CreateHuman ;
49511: LD_ADDR_VAR 0 14
49515: PUSH
49516: CALL_OW 44
49520: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49521: LD_ADDR_VAR 0 7
49525: PUSH
49526: LD_VAR 0 7
49530: PPUSH
49531: LD_INT 1
49533: PPUSH
49534: LD_VAR 0 14
49538: PPUSH
49539: CALL_OW 2
49543: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49544: LD_VAR 0 14
49548: PPUSH
49549: LD_VAR 0 9
49553: PPUSH
49554: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49558: LD_VAR 0 9
49562: PPUSH
49563: CALL_OW 313
49567: PUSH
49568: LD_INT 6
49570: EQUAL
49571: PUSH
49572: LD_VAR 0 9
49576: PPUSH
49577: CALL_OW 266
49581: PUSH
49582: LD_INT 32
49584: PUSH
49585: LD_INT 31
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: IN
49592: OR
49593: IFFALSE 49407
49595: GO 49404
49597: POP
49598: POP
// end else
49599: GO 49981
// for j = 1 to x do
49601: LD_ADDR_VAR 0 9
49605: PUSH
49606: DOUBLE
49607: LD_INT 1
49609: DEC
49610: ST_TO_ADDR
49611: LD_VAR 0 13
49615: PUSH
49616: FOR_TO
49617: IFFALSE 49979
// begin InitHc ;
49619: CALL_OW 19
// if not f then
49623: LD_VAR 0 12
49627: NOT
49628: IFFALSE 49717
// begin PrepareHuman ( false , i , skill ) ;
49630: LD_INT 0
49632: PPUSH
49633: LD_VAR 0 8
49637: PPUSH
49638: LD_VAR 0 4
49642: PPUSH
49643: CALL_OW 380
// un := CreateHuman ;
49647: LD_ADDR_VAR 0 14
49651: PUSH
49652: CALL_OW 44
49656: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49657: LD_ADDR_VAR 0 7
49661: PUSH
49662: LD_VAR 0 7
49666: PPUSH
49667: LD_INT 1
49669: PPUSH
49670: LD_VAR 0 14
49674: PPUSH
49675: CALL_OW 2
49679: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49680: LD_VAR 0 14
49684: PPUSH
49685: LD_VAR 0 1
49689: PPUSH
49690: CALL_OW 250
49694: PPUSH
49695: LD_VAR 0 1
49699: PPUSH
49700: CALL_OW 251
49704: PPUSH
49705: LD_INT 10
49707: PPUSH
49708: LD_INT 0
49710: PPUSH
49711: CALL_OW 50
// continue ;
49715: GO 49616
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49717: LD_VAR 0 12
49721: PUSH
49722: LD_INT 1
49724: ARRAY
49725: PPUSH
49726: CALL_OW 313
49730: PUSH
49731: LD_VAR 0 12
49735: PUSH
49736: LD_INT 1
49738: ARRAY
49739: PPUSH
49740: CALL_OW 266
49744: PUSH
49745: LD_INT 32
49747: PUSH
49748: LD_INT 31
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: IN
49755: AND
49756: PUSH
49757: LD_VAR 0 12
49761: PUSH
49762: LD_INT 1
49764: ARRAY
49765: PPUSH
49766: CALL_OW 313
49770: PUSH
49771: LD_INT 6
49773: EQUAL
49774: OR
49775: IFFALSE 49795
// f := Delete ( f , 1 ) ;
49777: LD_ADDR_VAR 0 12
49781: PUSH
49782: LD_VAR 0 12
49786: PPUSH
49787: LD_INT 1
49789: PPUSH
49790: CALL_OW 3
49794: ST_TO_ADDR
// if not f then
49795: LD_VAR 0 12
49799: NOT
49800: IFFALSE 49818
// begin x := x + 2 ;
49802: LD_ADDR_VAR 0 13
49806: PUSH
49807: LD_VAR 0 13
49811: PUSH
49812: LD_INT 2
49814: PLUS
49815: ST_TO_ADDR
// continue ;
49816: GO 49616
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49818: LD_VAR 0 12
49822: PUSH
49823: LD_INT 1
49825: ARRAY
49826: PPUSH
49827: CALL_OW 266
49831: PUSH
49832: LD_INT 5
49834: EQUAL
49835: IFFALSE 49909
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49837: LD_VAR 0 12
49841: PUSH
49842: LD_INT 1
49844: ARRAY
49845: PPUSH
49846: CALL_OW 313
49850: PUSH
49851: LD_INT 3
49853: LESS
49854: IFFALSE 49890
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49856: LD_INT 0
49858: PPUSH
49859: LD_INT 5
49861: PUSH
49862: LD_INT 8
49864: PUSH
49865: LD_INT 9
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: LIST
49872: PUSH
49873: LD_VAR 0 17
49877: ARRAY
49878: PPUSH
49879: LD_VAR 0 4
49883: PPUSH
49884: CALL_OW 380
49888: GO 49907
// PrepareHuman ( false , i , skill ) ;
49890: LD_INT 0
49892: PPUSH
49893: LD_VAR 0 8
49897: PPUSH
49898: LD_VAR 0 4
49902: PPUSH
49903: CALL_OW 380
// end else
49907: GO 49926
// PrepareHuman ( false , i , skill ) ;
49909: LD_INT 0
49911: PPUSH
49912: LD_VAR 0 8
49916: PPUSH
49917: LD_VAR 0 4
49921: PPUSH
49922: CALL_OW 380
// un := CreateHuman ;
49926: LD_ADDR_VAR 0 14
49930: PUSH
49931: CALL_OW 44
49935: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49936: LD_ADDR_VAR 0 7
49940: PUSH
49941: LD_VAR 0 7
49945: PPUSH
49946: LD_INT 1
49948: PPUSH
49949: LD_VAR 0 14
49953: PPUSH
49954: CALL_OW 2
49958: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49959: LD_VAR 0 14
49963: PPUSH
49964: LD_VAR 0 12
49968: PUSH
49969: LD_INT 1
49971: ARRAY
49972: PPUSH
49973: CALL_OW 52
// end ;
49977: GO 49616
49979: POP
49980: POP
// end ;
49981: GO 48918
49983: POP
49984: POP
// result := result ^ buildings ;
49985: LD_ADDR_VAR 0 7
49989: PUSH
49990: LD_VAR 0 7
49994: PUSH
49995: LD_VAR 0 18
49999: ADD
50000: ST_TO_ADDR
// end else
50001: GO 50144
// begin for i = 1 to personel do
50003: LD_ADDR_VAR 0 8
50007: PUSH
50008: DOUBLE
50009: LD_INT 1
50011: DEC
50012: ST_TO_ADDR
50013: LD_VAR 0 6
50017: PUSH
50018: FOR_TO
50019: IFFALSE 50142
// begin if i > 4 then
50021: LD_VAR 0 8
50025: PUSH
50026: LD_INT 4
50028: GREATER
50029: IFFALSE 50033
// break ;
50031: GO 50142
// x := personel [ i ] ;
50033: LD_ADDR_VAR 0 13
50037: PUSH
50038: LD_VAR 0 6
50042: PUSH
50043: LD_VAR 0 8
50047: ARRAY
50048: ST_TO_ADDR
// if x = - 1 then
50049: LD_VAR 0 13
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: EQUAL
50058: IFFALSE 50062
// continue ;
50060: GO 50018
// PrepareHuman ( false , i , skill ) ;
50062: LD_INT 0
50064: PPUSH
50065: LD_VAR 0 8
50069: PPUSH
50070: LD_VAR 0 4
50074: PPUSH
50075: CALL_OW 380
// un := CreateHuman ;
50079: LD_ADDR_VAR 0 14
50083: PUSH
50084: CALL_OW 44
50088: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50089: LD_VAR 0 14
50093: PPUSH
50094: LD_VAR 0 1
50098: PPUSH
50099: CALL_OW 250
50103: PPUSH
50104: LD_VAR 0 1
50108: PPUSH
50109: CALL_OW 251
50113: PPUSH
50114: LD_INT 10
50116: PPUSH
50117: LD_INT 0
50119: PPUSH
50120: CALL_OW 50
// result := result ^ un ;
50124: LD_ADDR_VAR 0 7
50128: PUSH
50129: LD_VAR 0 7
50133: PUSH
50134: LD_VAR 0 14
50138: ADD
50139: ST_TO_ADDR
// end ;
50140: GO 50018
50142: POP
50143: POP
// end ; end ;
50144: LD_VAR 0 7
50148: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50149: LD_INT 0
50151: PPUSH
50152: PPUSH
50153: PPUSH
50154: PPUSH
50155: PPUSH
50156: PPUSH
50157: PPUSH
50158: PPUSH
50159: PPUSH
50160: PPUSH
50161: PPUSH
50162: PPUSH
50163: PPUSH
50164: PPUSH
50165: PPUSH
50166: PPUSH
// result := false ;
50167: LD_ADDR_VAR 0 3
50171: PUSH
50172: LD_INT 0
50174: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50175: LD_VAR 0 1
50179: NOT
50180: PUSH
50181: LD_VAR 0 1
50185: PPUSH
50186: CALL_OW 266
50190: PUSH
50191: LD_INT 32
50193: PUSH
50194: LD_INT 33
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: IN
50201: NOT
50202: OR
50203: IFFALSE 50207
// exit ;
50205: GO 51316
// nat := GetNation ( tower ) ;
50207: LD_ADDR_VAR 0 12
50211: PUSH
50212: LD_VAR 0 1
50216: PPUSH
50217: CALL_OW 248
50221: ST_TO_ADDR
// side := GetSide ( tower ) ;
50222: LD_ADDR_VAR 0 16
50226: PUSH
50227: LD_VAR 0 1
50231: PPUSH
50232: CALL_OW 255
50236: ST_TO_ADDR
// x := GetX ( tower ) ;
50237: LD_ADDR_VAR 0 10
50241: PUSH
50242: LD_VAR 0 1
50246: PPUSH
50247: CALL_OW 250
50251: ST_TO_ADDR
// y := GetY ( tower ) ;
50252: LD_ADDR_VAR 0 11
50256: PUSH
50257: LD_VAR 0 1
50261: PPUSH
50262: CALL_OW 251
50266: ST_TO_ADDR
// if not x or not y then
50267: LD_VAR 0 10
50271: NOT
50272: PUSH
50273: LD_VAR 0 11
50277: NOT
50278: OR
50279: IFFALSE 50283
// exit ;
50281: GO 51316
// weapon := 0 ;
50283: LD_ADDR_VAR 0 18
50287: PUSH
50288: LD_INT 0
50290: ST_TO_ADDR
// fac_list := [ ] ;
50291: LD_ADDR_VAR 0 17
50295: PUSH
50296: EMPTY
50297: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50298: LD_ADDR_VAR 0 6
50302: PUSH
50303: LD_VAR 0 1
50307: PPUSH
50308: CALL_OW 274
50312: PPUSH
50313: LD_VAR 0 2
50317: PPUSH
50318: LD_INT 0
50320: PPUSH
50321: CALL 47887 0 3
50325: PPUSH
50326: LD_INT 30
50328: PUSH
50329: LD_INT 3
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PPUSH
50336: CALL_OW 72
50340: ST_TO_ADDR
// if not factories then
50341: LD_VAR 0 6
50345: NOT
50346: IFFALSE 50350
// exit ;
50348: GO 51316
// for i in factories do
50350: LD_ADDR_VAR 0 8
50354: PUSH
50355: LD_VAR 0 6
50359: PUSH
50360: FOR_IN
50361: IFFALSE 50386
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50363: LD_ADDR_VAR 0 17
50367: PUSH
50368: LD_VAR 0 17
50372: PUSH
50373: LD_VAR 0 8
50377: PPUSH
50378: CALL_OW 478
50382: UNION
50383: ST_TO_ADDR
50384: GO 50360
50386: POP
50387: POP
// if not fac_list then
50388: LD_VAR 0 17
50392: NOT
50393: IFFALSE 50397
// exit ;
50395: GO 51316
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50397: LD_ADDR_VAR 0 5
50401: PUSH
50402: LD_INT 4
50404: PUSH
50405: LD_INT 5
50407: PUSH
50408: LD_INT 9
50410: PUSH
50411: LD_INT 10
50413: PUSH
50414: LD_INT 6
50416: PUSH
50417: LD_INT 7
50419: PUSH
50420: LD_INT 11
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 27
50434: PUSH
50435: LD_INT 28
50437: PUSH
50438: LD_INT 26
50440: PUSH
50441: LD_INT 30
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 43
50452: PUSH
50453: LD_INT 44
50455: PUSH
50456: LD_INT 46
50458: PUSH
50459: LD_INT 45
50461: PUSH
50462: LD_INT 47
50464: PUSH
50465: LD_INT 49
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: PUSH
50481: LD_VAR 0 12
50485: ARRAY
50486: ST_TO_ADDR
// list := list isect fac_list ;
50487: LD_ADDR_VAR 0 5
50491: PUSH
50492: LD_VAR 0 5
50496: PUSH
50497: LD_VAR 0 17
50501: ISECT
50502: ST_TO_ADDR
// if not list then
50503: LD_VAR 0 5
50507: NOT
50508: IFFALSE 50512
// exit ;
50510: GO 51316
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50512: LD_VAR 0 12
50516: PUSH
50517: LD_INT 3
50519: EQUAL
50520: PUSH
50521: LD_INT 49
50523: PUSH
50524: LD_VAR 0 5
50528: IN
50529: AND
50530: PUSH
50531: LD_INT 31
50533: PPUSH
50534: LD_VAR 0 16
50538: PPUSH
50539: CALL_OW 321
50543: PUSH
50544: LD_INT 2
50546: EQUAL
50547: AND
50548: IFFALSE 50608
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50550: LD_INT 22
50552: PUSH
50553: LD_VAR 0 16
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 35
50564: PUSH
50565: LD_INT 49
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 91
50574: PUSH
50575: LD_VAR 0 1
50579: PUSH
50580: LD_INT 10
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: PPUSH
50593: CALL_OW 69
50597: NOT
50598: IFFALSE 50608
// weapon := ru_time_lapser ;
50600: LD_ADDR_VAR 0 18
50604: PUSH
50605: LD_INT 49
50607: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50608: LD_VAR 0 12
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: IN
50623: PUSH
50624: LD_INT 11
50626: PUSH
50627: LD_VAR 0 5
50631: IN
50632: PUSH
50633: LD_INT 30
50635: PUSH
50636: LD_VAR 0 5
50640: IN
50641: OR
50642: AND
50643: PUSH
50644: LD_INT 6
50646: PPUSH
50647: LD_VAR 0 16
50651: PPUSH
50652: CALL_OW 321
50656: PUSH
50657: LD_INT 2
50659: EQUAL
50660: AND
50661: IFFALSE 50826
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50663: LD_INT 22
50665: PUSH
50666: LD_VAR 0 16
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 35
50680: PUSH
50681: LD_INT 11
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 35
50690: PUSH
50691: LD_INT 30
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 91
50705: PUSH
50706: LD_VAR 0 1
50710: PUSH
50711: LD_INT 18
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: LIST
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: LIST
50723: PPUSH
50724: CALL_OW 69
50728: NOT
50729: PUSH
50730: LD_INT 22
50732: PUSH
50733: LD_VAR 0 16
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: LD_INT 30
50747: PUSH
50748: LD_INT 32
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 30
50757: PUSH
50758: LD_INT 33
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 91
50772: PUSH
50773: LD_VAR 0 1
50777: PUSH
50778: LD_INT 12
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: LIST
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: PUSH
50791: EMPTY
50792: LIST
50793: PPUSH
50794: CALL_OW 69
50798: PUSH
50799: LD_INT 2
50801: GREATER
50802: AND
50803: IFFALSE 50826
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50805: LD_ADDR_VAR 0 18
50809: PUSH
50810: LD_INT 11
50812: PUSH
50813: LD_INT 30
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_VAR 0 12
50824: ARRAY
50825: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50826: LD_VAR 0 18
50830: NOT
50831: PUSH
50832: LD_INT 40
50834: PPUSH
50835: LD_VAR 0 16
50839: PPUSH
50840: CALL_OW 321
50844: PUSH
50845: LD_INT 2
50847: EQUAL
50848: AND
50849: PUSH
50850: LD_INT 7
50852: PUSH
50853: LD_VAR 0 5
50857: IN
50858: PUSH
50859: LD_INT 28
50861: PUSH
50862: LD_VAR 0 5
50866: IN
50867: OR
50868: PUSH
50869: LD_INT 45
50871: PUSH
50872: LD_VAR 0 5
50876: IN
50877: OR
50878: AND
50879: IFFALSE 51133
// begin hex := GetHexInfo ( x , y ) ;
50881: LD_ADDR_VAR 0 4
50885: PUSH
50886: LD_VAR 0 10
50890: PPUSH
50891: LD_VAR 0 11
50895: PPUSH
50896: CALL_OW 546
50900: ST_TO_ADDR
// if hex [ 1 ] then
50901: LD_VAR 0 4
50905: PUSH
50906: LD_INT 1
50908: ARRAY
50909: IFFALSE 50913
// exit ;
50911: GO 51316
// height := hex [ 2 ] ;
50913: LD_ADDR_VAR 0 15
50917: PUSH
50918: LD_VAR 0 4
50922: PUSH
50923: LD_INT 2
50925: ARRAY
50926: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50927: LD_ADDR_VAR 0 14
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: LD_INT 3
50940: PUSH
50941: LD_INT 5
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: ST_TO_ADDR
// for i in tmp do
50950: LD_ADDR_VAR 0 8
50954: PUSH
50955: LD_VAR 0 14
50959: PUSH
50960: FOR_IN
50961: IFFALSE 51131
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50963: LD_ADDR_VAR 0 9
50967: PUSH
50968: LD_VAR 0 10
50972: PPUSH
50973: LD_VAR 0 8
50977: PPUSH
50978: LD_INT 5
50980: PPUSH
50981: CALL_OW 272
50985: PUSH
50986: LD_VAR 0 11
50990: PPUSH
50991: LD_VAR 0 8
50995: PPUSH
50996: LD_INT 5
50998: PPUSH
50999: CALL_OW 273
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51008: LD_VAR 0 9
51012: PUSH
51013: LD_INT 1
51015: ARRAY
51016: PPUSH
51017: LD_VAR 0 9
51021: PUSH
51022: LD_INT 2
51024: ARRAY
51025: PPUSH
51026: CALL_OW 488
51030: IFFALSE 51129
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51032: LD_ADDR_VAR 0 4
51036: PUSH
51037: LD_VAR 0 9
51041: PUSH
51042: LD_INT 1
51044: ARRAY
51045: PPUSH
51046: LD_VAR 0 9
51050: PUSH
51051: LD_INT 2
51053: ARRAY
51054: PPUSH
51055: CALL_OW 546
51059: ST_TO_ADDR
// if hex [ 1 ] then
51060: LD_VAR 0 4
51064: PUSH
51065: LD_INT 1
51067: ARRAY
51068: IFFALSE 51072
// continue ;
51070: GO 50960
// h := hex [ 2 ] ;
51072: LD_ADDR_VAR 0 13
51076: PUSH
51077: LD_VAR 0 4
51081: PUSH
51082: LD_INT 2
51084: ARRAY
51085: ST_TO_ADDR
// if h + 7 < height then
51086: LD_VAR 0 13
51090: PUSH
51091: LD_INT 7
51093: PLUS
51094: PUSH
51095: LD_VAR 0 15
51099: LESS
51100: IFFALSE 51129
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51102: LD_ADDR_VAR 0 18
51106: PUSH
51107: LD_INT 7
51109: PUSH
51110: LD_INT 28
51112: PUSH
51113: LD_INT 45
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: LIST
51120: PUSH
51121: LD_VAR 0 12
51125: ARRAY
51126: ST_TO_ADDR
// break ;
51127: GO 51131
// end ; end ; end ;
51129: GO 50960
51131: POP
51132: POP
// end ; if not weapon then
51133: LD_VAR 0 18
51137: NOT
51138: IFFALSE 51198
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51140: LD_ADDR_VAR 0 5
51144: PUSH
51145: LD_VAR 0 5
51149: PUSH
51150: LD_INT 11
51152: PUSH
51153: LD_INT 30
51155: PUSH
51156: LD_INT 49
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: DIFF
51164: ST_TO_ADDR
// if not list then
51165: LD_VAR 0 5
51169: NOT
51170: IFFALSE 51174
// exit ;
51172: GO 51316
// weapon := list [ rand ( 1 , list ) ] ;
51174: LD_ADDR_VAR 0 18
51178: PUSH
51179: LD_VAR 0 5
51183: PUSH
51184: LD_INT 1
51186: PPUSH
51187: LD_VAR 0 5
51191: PPUSH
51192: CALL_OW 12
51196: ARRAY
51197: ST_TO_ADDR
// end ; if weapon then
51198: LD_VAR 0 18
51202: IFFALSE 51316
// begin tmp := CostOfWeapon ( weapon ) ;
51204: LD_ADDR_VAR 0 14
51208: PUSH
51209: LD_VAR 0 18
51213: PPUSH
51214: CALL_OW 451
51218: ST_TO_ADDR
// j := GetBase ( tower ) ;
51219: LD_ADDR_VAR 0 9
51223: PUSH
51224: LD_VAR 0 1
51228: PPUSH
51229: CALL_OW 274
51233: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51234: LD_VAR 0 9
51238: PPUSH
51239: LD_INT 1
51241: PPUSH
51242: CALL_OW 275
51246: PUSH
51247: LD_VAR 0 14
51251: PUSH
51252: LD_INT 1
51254: ARRAY
51255: GREATEREQUAL
51256: PUSH
51257: LD_VAR 0 9
51261: PPUSH
51262: LD_INT 2
51264: PPUSH
51265: CALL_OW 275
51269: PUSH
51270: LD_VAR 0 14
51274: PUSH
51275: LD_INT 2
51277: ARRAY
51278: GREATEREQUAL
51279: AND
51280: PUSH
51281: LD_VAR 0 9
51285: PPUSH
51286: LD_INT 3
51288: PPUSH
51289: CALL_OW 275
51293: PUSH
51294: LD_VAR 0 14
51298: PUSH
51299: LD_INT 3
51301: ARRAY
51302: GREATEREQUAL
51303: AND
51304: IFFALSE 51316
// result := weapon ;
51306: LD_ADDR_VAR 0 3
51310: PUSH
51311: LD_VAR 0 18
51315: ST_TO_ADDR
// end ; end ;
51316: LD_VAR 0 3
51320: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51321: LD_INT 0
51323: PPUSH
51324: PPUSH
// result := true ;
51325: LD_ADDR_VAR 0 3
51329: PUSH
51330: LD_INT 1
51332: ST_TO_ADDR
// if array1 = array2 then
51333: LD_VAR 0 1
51337: PUSH
51338: LD_VAR 0 2
51342: EQUAL
51343: IFFALSE 51403
// begin for i = 1 to array1 do
51345: LD_ADDR_VAR 0 4
51349: PUSH
51350: DOUBLE
51351: LD_INT 1
51353: DEC
51354: ST_TO_ADDR
51355: LD_VAR 0 1
51359: PUSH
51360: FOR_TO
51361: IFFALSE 51399
// if array1 [ i ] <> array2 [ i ] then
51363: LD_VAR 0 1
51367: PUSH
51368: LD_VAR 0 4
51372: ARRAY
51373: PUSH
51374: LD_VAR 0 2
51378: PUSH
51379: LD_VAR 0 4
51383: ARRAY
51384: NONEQUAL
51385: IFFALSE 51397
// begin result := false ;
51387: LD_ADDR_VAR 0 3
51391: PUSH
51392: LD_INT 0
51394: ST_TO_ADDR
// break ;
51395: GO 51399
// end ;
51397: GO 51360
51399: POP
51400: POP
// end else
51401: GO 51411
// result := false ;
51403: LD_ADDR_VAR 0 3
51407: PUSH
51408: LD_INT 0
51410: ST_TO_ADDR
// end ;
51411: LD_VAR 0 3
51415: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51416: LD_INT 0
51418: PPUSH
51419: PPUSH
// if not array1 or not array2 then
51420: LD_VAR 0 1
51424: NOT
51425: PUSH
51426: LD_VAR 0 2
51430: NOT
51431: OR
51432: IFFALSE 51436
// exit ;
51434: GO 51500
// result := true ;
51436: LD_ADDR_VAR 0 3
51440: PUSH
51441: LD_INT 1
51443: ST_TO_ADDR
// for i = 1 to array1 do
51444: LD_ADDR_VAR 0 4
51448: PUSH
51449: DOUBLE
51450: LD_INT 1
51452: DEC
51453: ST_TO_ADDR
51454: LD_VAR 0 1
51458: PUSH
51459: FOR_TO
51460: IFFALSE 51498
// if array1 [ i ] <> array2 [ i ] then
51462: LD_VAR 0 1
51466: PUSH
51467: LD_VAR 0 4
51471: ARRAY
51472: PUSH
51473: LD_VAR 0 2
51477: PUSH
51478: LD_VAR 0 4
51482: ARRAY
51483: NONEQUAL
51484: IFFALSE 51496
// begin result := false ;
51486: LD_ADDR_VAR 0 3
51490: PUSH
51491: LD_INT 0
51493: ST_TO_ADDR
// break ;
51494: GO 51498
// end ;
51496: GO 51459
51498: POP
51499: POP
// end ;
51500: LD_VAR 0 3
51504: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51505: LD_INT 0
51507: PPUSH
51508: PPUSH
51509: PPUSH
// pom := GetBase ( fac ) ;
51510: LD_ADDR_VAR 0 5
51514: PUSH
51515: LD_VAR 0 1
51519: PPUSH
51520: CALL_OW 274
51524: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51525: LD_ADDR_VAR 0 4
51529: PUSH
51530: LD_VAR 0 2
51534: PUSH
51535: LD_INT 1
51537: ARRAY
51538: PPUSH
51539: LD_VAR 0 2
51543: PUSH
51544: LD_INT 2
51546: ARRAY
51547: PPUSH
51548: LD_VAR 0 2
51552: PUSH
51553: LD_INT 3
51555: ARRAY
51556: PPUSH
51557: LD_VAR 0 2
51561: PUSH
51562: LD_INT 4
51564: ARRAY
51565: PPUSH
51566: CALL_OW 449
51570: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51571: LD_ADDR_VAR 0 3
51575: PUSH
51576: LD_VAR 0 5
51580: PPUSH
51581: LD_INT 1
51583: PPUSH
51584: CALL_OW 275
51588: PUSH
51589: LD_VAR 0 4
51593: PUSH
51594: LD_INT 1
51596: ARRAY
51597: GREATEREQUAL
51598: PUSH
51599: LD_VAR 0 5
51603: PPUSH
51604: LD_INT 2
51606: PPUSH
51607: CALL_OW 275
51611: PUSH
51612: LD_VAR 0 4
51616: PUSH
51617: LD_INT 2
51619: ARRAY
51620: GREATEREQUAL
51621: AND
51622: PUSH
51623: LD_VAR 0 5
51627: PPUSH
51628: LD_INT 3
51630: PPUSH
51631: CALL_OW 275
51635: PUSH
51636: LD_VAR 0 4
51640: PUSH
51641: LD_INT 3
51643: ARRAY
51644: GREATEREQUAL
51645: AND
51646: ST_TO_ADDR
// end ;
51647: LD_VAR 0 3
51651: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51652: LD_INT 0
51654: PPUSH
51655: PPUSH
51656: PPUSH
51657: PPUSH
// pom := GetBase ( building ) ;
51658: LD_ADDR_VAR 0 3
51662: PUSH
51663: LD_VAR 0 1
51667: PPUSH
51668: CALL_OW 274
51672: ST_TO_ADDR
// if not pom then
51673: LD_VAR 0 3
51677: NOT
51678: IFFALSE 51682
// exit ;
51680: GO 51852
// btype := GetBType ( building ) ;
51682: LD_ADDR_VAR 0 5
51686: PUSH
51687: LD_VAR 0 1
51691: PPUSH
51692: CALL_OW 266
51696: ST_TO_ADDR
// if btype = b_armoury then
51697: LD_VAR 0 5
51701: PUSH
51702: LD_INT 4
51704: EQUAL
51705: IFFALSE 51715
// btype := b_barracks ;
51707: LD_ADDR_VAR 0 5
51711: PUSH
51712: LD_INT 5
51714: ST_TO_ADDR
// if btype = b_depot then
51715: LD_VAR 0 5
51719: PUSH
51720: LD_INT 0
51722: EQUAL
51723: IFFALSE 51733
// btype := b_warehouse ;
51725: LD_ADDR_VAR 0 5
51729: PUSH
51730: LD_INT 1
51732: ST_TO_ADDR
// if btype = b_workshop then
51733: LD_VAR 0 5
51737: PUSH
51738: LD_INT 2
51740: EQUAL
51741: IFFALSE 51751
// btype := b_factory ;
51743: LD_ADDR_VAR 0 5
51747: PUSH
51748: LD_INT 3
51750: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51751: LD_ADDR_VAR 0 4
51755: PUSH
51756: LD_VAR 0 5
51760: PPUSH
51761: LD_VAR 0 1
51765: PPUSH
51766: CALL_OW 248
51770: PPUSH
51771: CALL_OW 450
51775: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51776: LD_ADDR_VAR 0 2
51780: PUSH
51781: LD_VAR 0 3
51785: PPUSH
51786: LD_INT 1
51788: PPUSH
51789: CALL_OW 275
51793: PUSH
51794: LD_VAR 0 4
51798: PUSH
51799: LD_INT 1
51801: ARRAY
51802: GREATEREQUAL
51803: PUSH
51804: LD_VAR 0 3
51808: PPUSH
51809: LD_INT 2
51811: PPUSH
51812: CALL_OW 275
51816: PUSH
51817: LD_VAR 0 4
51821: PUSH
51822: LD_INT 2
51824: ARRAY
51825: GREATEREQUAL
51826: AND
51827: PUSH
51828: LD_VAR 0 3
51832: PPUSH
51833: LD_INT 3
51835: PPUSH
51836: CALL_OW 275
51840: PUSH
51841: LD_VAR 0 4
51845: PUSH
51846: LD_INT 3
51848: ARRAY
51849: GREATEREQUAL
51850: AND
51851: ST_TO_ADDR
// end ;
51852: LD_VAR 0 2
51856: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51857: LD_INT 0
51859: PPUSH
51860: PPUSH
51861: PPUSH
// pom := GetBase ( building ) ;
51862: LD_ADDR_VAR 0 4
51866: PUSH
51867: LD_VAR 0 1
51871: PPUSH
51872: CALL_OW 274
51876: ST_TO_ADDR
// if not pom then
51877: LD_VAR 0 4
51881: NOT
51882: IFFALSE 51886
// exit ;
51884: GO 51987
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51886: LD_ADDR_VAR 0 5
51890: PUSH
51891: LD_VAR 0 2
51895: PPUSH
51896: LD_VAR 0 1
51900: PPUSH
51901: CALL_OW 248
51905: PPUSH
51906: CALL_OW 450
51910: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51911: LD_ADDR_VAR 0 3
51915: PUSH
51916: LD_VAR 0 4
51920: PPUSH
51921: LD_INT 1
51923: PPUSH
51924: CALL_OW 275
51928: PUSH
51929: LD_VAR 0 5
51933: PUSH
51934: LD_INT 1
51936: ARRAY
51937: GREATEREQUAL
51938: PUSH
51939: LD_VAR 0 4
51943: PPUSH
51944: LD_INT 2
51946: PPUSH
51947: CALL_OW 275
51951: PUSH
51952: LD_VAR 0 5
51956: PUSH
51957: LD_INT 2
51959: ARRAY
51960: GREATEREQUAL
51961: AND
51962: PUSH
51963: LD_VAR 0 4
51967: PPUSH
51968: LD_INT 3
51970: PPUSH
51971: CALL_OW 275
51975: PUSH
51976: LD_VAR 0 5
51980: PUSH
51981: LD_INT 3
51983: ARRAY
51984: GREATEREQUAL
51985: AND
51986: ST_TO_ADDR
// end ;
51987: LD_VAR 0 3
51991: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51992: LD_INT 0
51994: PPUSH
51995: PPUSH
51996: PPUSH
51997: PPUSH
51998: PPUSH
51999: PPUSH
52000: PPUSH
52001: PPUSH
52002: PPUSH
52003: PPUSH
52004: PPUSH
// result := false ;
52005: LD_ADDR_VAR 0 8
52009: PUSH
52010: LD_INT 0
52012: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52013: LD_VAR 0 5
52017: NOT
52018: PUSH
52019: LD_VAR 0 1
52023: NOT
52024: OR
52025: PUSH
52026: LD_VAR 0 2
52030: NOT
52031: OR
52032: PUSH
52033: LD_VAR 0 3
52037: NOT
52038: OR
52039: IFFALSE 52043
// exit ;
52041: GO 52857
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52043: LD_ADDR_VAR 0 14
52047: PUSH
52048: LD_VAR 0 1
52052: PPUSH
52053: LD_VAR 0 2
52057: PPUSH
52058: LD_VAR 0 3
52062: PPUSH
52063: LD_VAR 0 4
52067: PPUSH
52068: LD_VAR 0 5
52072: PUSH
52073: LD_INT 1
52075: ARRAY
52076: PPUSH
52077: CALL_OW 248
52081: PPUSH
52082: LD_INT 0
52084: PPUSH
52085: CALL 54110 0 6
52089: ST_TO_ADDR
// if not hexes then
52090: LD_VAR 0 14
52094: NOT
52095: IFFALSE 52099
// exit ;
52097: GO 52857
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52099: LD_ADDR_VAR 0 17
52103: PUSH
52104: LD_VAR 0 5
52108: PPUSH
52109: LD_INT 22
52111: PUSH
52112: LD_VAR 0 13
52116: PPUSH
52117: CALL_OW 255
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 30
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 30
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PPUSH
52158: CALL_OW 72
52162: ST_TO_ADDR
// for i = 1 to hexes do
52163: LD_ADDR_VAR 0 9
52167: PUSH
52168: DOUBLE
52169: LD_INT 1
52171: DEC
52172: ST_TO_ADDR
52173: LD_VAR 0 14
52177: PUSH
52178: FOR_TO
52179: IFFALSE 52855
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52181: LD_ADDR_VAR 0 13
52185: PUSH
52186: LD_VAR 0 14
52190: PUSH
52191: LD_VAR 0 9
52195: ARRAY
52196: PUSH
52197: LD_INT 1
52199: ARRAY
52200: PPUSH
52201: LD_VAR 0 14
52205: PUSH
52206: LD_VAR 0 9
52210: ARRAY
52211: PUSH
52212: LD_INT 2
52214: ARRAY
52215: PPUSH
52216: CALL_OW 428
52220: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52221: LD_VAR 0 14
52225: PUSH
52226: LD_VAR 0 9
52230: ARRAY
52231: PUSH
52232: LD_INT 1
52234: ARRAY
52235: PPUSH
52236: LD_VAR 0 14
52240: PUSH
52241: LD_VAR 0 9
52245: ARRAY
52246: PUSH
52247: LD_INT 2
52249: ARRAY
52250: PPUSH
52251: CALL_OW 351
52255: PUSH
52256: LD_VAR 0 14
52260: PUSH
52261: LD_VAR 0 9
52265: ARRAY
52266: PUSH
52267: LD_INT 1
52269: ARRAY
52270: PPUSH
52271: LD_VAR 0 14
52275: PUSH
52276: LD_VAR 0 9
52280: ARRAY
52281: PUSH
52282: LD_INT 2
52284: ARRAY
52285: PPUSH
52286: CALL_OW 488
52290: NOT
52291: OR
52292: PUSH
52293: LD_VAR 0 13
52297: PPUSH
52298: CALL_OW 247
52302: PUSH
52303: LD_INT 3
52305: EQUAL
52306: OR
52307: IFFALSE 52313
// exit ;
52309: POP
52310: POP
52311: GO 52857
// if not tmp then
52313: LD_VAR 0 13
52317: NOT
52318: IFFALSE 52322
// continue ;
52320: GO 52178
// result := true ;
52322: LD_ADDR_VAR 0 8
52326: PUSH
52327: LD_INT 1
52329: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52330: LD_VAR 0 6
52334: PUSH
52335: LD_VAR 0 13
52339: PPUSH
52340: CALL_OW 247
52344: PUSH
52345: LD_INT 2
52347: EQUAL
52348: AND
52349: PUSH
52350: LD_VAR 0 13
52354: PPUSH
52355: CALL_OW 263
52359: PUSH
52360: LD_INT 1
52362: EQUAL
52363: AND
52364: IFFALSE 52528
// begin if IsDrivenBy ( tmp ) then
52366: LD_VAR 0 13
52370: PPUSH
52371: CALL_OW 311
52375: IFFALSE 52379
// continue ;
52377: GO 52178
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52379: LD_VAR 0 6
52383: PPUSH
52384: LD_INT 3
52386: PUSH
52387: LD_INT 60
52389: PUSH
52390: EMPTY
52391: LIST
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 3
52399: PUSH
52400: LD_INT 55
52402: PUSH
52403: EMPTY
52404: LIST
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PPUSH
52414: CALL_OW 72
52418: IFFALSE 52526
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52420: LD_ADDR_VAR 0 18
52424: PUSH
52425: LD_VAR 0 6
52429: PPUSH
52430: LD_INT 3
52432: PUSH
52433: LD_INT 60
52435: PUSH
52436: EMPTY
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 3
52445: PUSH
52446: LD_INT 55
52448: PUSH
52449: EMPTY
52450: LIST
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PPUSH
52460: CALL_OW 72
52464: PUSH
52465: LD_INT 1
52467: ARRAY
52468: ST_TO_ADDR
// if IsInUnit ( driver ) then
52469: LD_VAR 0 18
52473: PPUSH
52474: CALL_OW 310
52478: IFFALSE 52489
// ComExit ( driver ) ;
52480: LD_VAR 0 18
52484: PPUSH
52485: CALL 77889 0 1
// AddComEnterUnit ( driver , tmp ) ;
52489: LD_VAR 0 18
52493: PPUSH
52494: LD_VAR 0 13
52498: PPUSH
52499: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52503: LD_VAR 0 18
52507: PPUSH
52508: LD_VAR 0 7
52512: PPUSH
52513: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52517: LD_VAR 0 18
52521: PPUSH
52522: CALL_OW 181
// end ; continue ;
52526: GO 52178
// end ; if not cleaners or not tmp in cleaners then
52528: LD_VAR 0 6
52532: NOT
52533: PUSH
52534: LD_VAR 0 13
52538: PUSH
52539: LD_VAR 0 6
52543: IN
52544: NOT
52545: OR
52546: IFFALSE 52853
// begin if dep then
52548: LD_VAR 0 17
52552: IFFALSE 52688
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52554: LD_ADDR_VAR 0 16
52558: PUSH
52559: LD_VAR 0 17
52563: PUSH
52564: LD_INT 1
52566: ARRAY
52567: PPUSH
52568: CALL_OW 250
52572: PPUSH
52573: LD_VAR 0 17
52577: PUSH
52578: LD_INT 1
52580: ARRAY
52581: PPUSH
52582: CALL_OW 254
52586: PPUSH
52587: LD_INT 5
52589: PPUSH
52590: CALL_OW 272
52594: PUSH
52595: LD_VAR 0 17
52599: PUSH
52600: LD_INT 1
52602: ARRAY
52603: PPUSH
52604: CALL_OW 251
52608: PPUSH
52609: LD_VAR 0 17
52613: PUSH
52614: LD_INT 1
52616: ARRAY
52617: PPUSH
52618: CALL_OW 254
52622: PPUSH
52623: LD_INT 5
52625: PPUSH
52626: CALL_OW 273
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52635: LD_VAR 0 16
52639: PUSH
52640: LD_INT 1
52642: ARRAY
52643: PPUSH
52644: LD_VAR 0 16
52648: PUSH
52649: LD_INT 2
52651: ARRAY
52652: PPUSH
52653: CALL_OW 488
52657: IFFALSE 52688
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52659: LD_VAR 0 13
52663: PPUSH
52664: LD_VAR 0 16
52668: PUSH
52669: LD_INT 1
52671: ARRAY
52672: PPUSH
52673: LD_VAR 0 16
52677: PUSH
52678: LD_INT 2
52680: ARRAY
52681: PPUSH
52682: CALL_OW 111
// continue ;
52686: GO 52178
// end ; end ; r := GetDir ( tmp ) ;
52688: LD_ADDR_VAR 0 15
52692: PUSH
52693: LD_VAR 0 13
52697: PPUSH
52698: CALL_OW 254
52702: ST_TO_ADDR
// if r = 5 then
52703: LD_VAR 0 15
52707: PUSH
52708: LD_INT 5
52710: EQUAL
52711: IFFALSE 52721
// r := 0 ;
52713: LD_ADDR_VAR 0 15
52717: PUSH
52718: LD_INT 0
52720: ST_TO_ADDR
// for j = r to 5 do
52721: LD_ADDR_VAR 0 10
52725: PUSH
52726: DOUBLE
52727: LD_VAR 0 15
52731: DEC
52732: ST_TO_ADDR
52733: LD_INT 5
52735: PUSH
52736: FOR_TO
52737: IFFALSE 52851
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52739: LD_ADDR_VAR 0 11
52743: PUSH
52744: LD_VAR 0 13
52748: PPUSH
52749: CALL_OW 250
52753: PPUSH
52754: LD_VAR 0 10
52758: PPUSH
52759: LD_INT 2
52761: PPUSH
52762: CALL_OW 272
52766: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52767: LD_ADDR_VAR 0 12
52771: PUSH
52772: LD_VAR 0 13
52776: PPUSH
52777: CALL_OW 251
52781: PPUSH
52782: LD_VAR 0 10
52786: PPUSH
52787: LD_INT 2
52789: PPUSH
52790: CALL_OW 273
52794: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52795: LD_VAR 0 11
52799: PPUSH
52800: LD_VAR 0 12
52804: PPUSH
52805: CALL_OW 488
52809: PUSH
52810: LD_VAR 0 11
52814: PPUSH
52815: LD_VAR 0 12
52819: PPUSH
52820: CALL_OW 428
52824: NOT
52825: AND
52826: IFFALSE 52849
// begin ComMoveXY ( tmp , _x , _y ) ;
52828: LD_VAR 0 13
52832: PPUSH
52833: LD_VAR 0 11
52837: PPUSH
52838: LD_VAR 0 12
52842: PPUSH
52843: CALL_OW 111
// break ;
52847: GO 52851
// end ; end ;
52849: GO 52736
52851: POP
52852: POP
// end ; end ;
52853: GO 52178
52855: POP
52856: POP
// end ;
52857: LD_VAR 0 8
52861: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52862: LD_INT 0
52864: PPUSH
// result := true ;
52865: LD_ADDR_VAR 0 3
52869: PUSH
52870: LD_INT 1
52872: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52873: LD_VAR 0 2
52877: PUSH
52878: LD_INT 24
52880: DOUBLE
52881: EQUAL
52882: IFTRUE 52892
52884: LD_INT 33
52886: DOUBLE
52887: EQUAL
52888: IFTRUE 52892
52890: GO 52917
52892: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52893: LD_ADDR_VAR 0 3
52897: PUSH
52898: LD_INT 32
52900: PPUSH
52901: LD_VAR 0 1
52905: PPUSH
52906: CALL_OW 321
52910: PUSH
52911: LD_INT 2
52913: EQUAL
52914: ST_TO_ADDR
52915: GO 53233
52917: LD_INT 20
52919: DOUBLE
52920: EQUAL
52921: IFTRUE 52925
52923: GO 52950
52925: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52926: LD_ADDR_VAR 0 3
52930: PUSH
52931: LD_INT 6
52933: PPUSH
52934: LD_VAR 0 1
52938: PPUSH
52939: CALL_OW 321
52943: PUSH
52944: LD_INT 2
52946: EQUAL
52947: ST_TO_ADDR
52948: GO 53233
52950: LD_INT 22
52952: DOUBLE
52953: EQUAL
52954: IFTRUE 52964
52956: LD_INT 36
52958: DOUBLE
52959: EQUAL
52960: IFTRUE 52964
52962: GO 52989
52964: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52965: LD_ADDR_VAR 0 3
52969: PUSH
52970: LD_INT 15
52972: PPUSH
52973: LD_VAR 0 1
52977: PPUSH
52978: CALL_OW 321
52982: PUSH
52983: LD_INT 2
52985: EQUAL
52986: ST_TO_ADDR
52987: GO 53233
52989: LD_INT 30
52991: DOUBLE
52992: EQUAL
52993: IFTRUE 52997
52995: GO 53022
52997: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52998: LD_ADDR_VAR 0 3
53002: PUSH
53003: LD_INT 20
53005: PPUSH
53006: LD_VAR 0 1
53010: PPUSH
53011: CALL_OW 321
53015: PUSH
53016: LD_INT 2
53018: EQUAL
53019: ST_TO_ADDR
53020: GO 53233
53022: LD_INT 28
53024: DOUBLE
53025: EQUAL
53026: IFTRUE 53036
53028: LD_INT 21
53030: DOUBLE
53031: EQUAL
53032: IFTRUE 53036
53034: GO 53061
53036: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53037: LD_ADDR_VAR 0 3
53041: PUSH
53042: LD_INT 21
53044: PPUSH
53045: LD_VAR 0 1
53049: PPUSH
53050: CALL_OW 321
53054: PUSH
53055: LD_INT 2
53057: EQUAL
53058: ST_TO_ADDR
53059: GO 53233
53061: LD_INT 16
53063: DOUBLE
53064: EQUAL
53065: IFTRUE 53069
53067: GO 53094
53069: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53070: LD_ADDR_VAR 0 3
53074: PUSH
53075: LD_INT 84
53077: PPUSH
53078: LD_VAR 0 1
53082: PPUSH
53083: CALL_OW 321
53087: PUSH
53088: LD_INT 2
53090: EQUAL
53091: ST_TO_ADDR
53092: GO 53233
53094: LD_INT 19
53096: DOUBLE
53097: EQUAL
53098: IFTRUE 53108
53100: LD_INT 23
53102: DOUBLE
53103: EQUAL
53104: IFTRUE 53108
53106: GO 53133
53108: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53109: LD_ADDR_VAR 0 3
53113: PUSH
53114: LD_INT 83
53116: PPUSH
53117: LD_VAR 0 1
53121: PPUSH
53122: CALL_OW 321
53126: PUSH
53127: LD_INT 2
53129: EQUAL
53130: ST_TO_ADDR
53131: GO 53233
53133: LD_INT 17
53135: DOUBLE
53136: EQUAL
53137: IFTRUE 53141
53139: GO 53166
53141: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53142: LD_ADDR_VAR 0 3
53146: PUSH
53147: LD_INT 39
53149: PPUSH
53150: LD_VAR 0 1
53154: PPUSH
53155: CALL_OW 321
53159: PUSH
53160: LD_INT 2
53162: EQUAL
53163: ST_TO_ADDR
53164: GO 53233
53166: LD_INT 18
53168: DOUBLE
53169: EQUAL
53170: IFTRUE 53174
53172: GO 53199
53174: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53175: LD_ADDR_VAR 0 3
53179: PUSH
53180: LD_INT 40
53182: PPUSH
53183: LD_VAR 0 1
53187: PPUSH
53188: CALL_OW 321
53192: PUSH
53193: LD_INT 2
53195: EQUAL
53196: ST_TO_ADDR
53197: GO 53233
53199: LD_INT 27
53201: DOUBLE
53202: EQUAL
53203: IFTRUE 53207
53205: GO 53232
53207: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53208: LD_ADDR_VAR 0 3
53212: PUSH
53213: LD_INT 35
53215: PPUSH
53216: LD_VAR 0 1
53220: PPUSH
53221: CALL_OW 321
53225: PUSH
53226: LD_INT 2
53228: EQUAL
53229: ST_TO_ADDR
53230: GO 53233
53232: POP
// end ;
53233: LD_VAR 0 3
53237: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53238: LD_INT 0
53240: PPUSH
53241: PPUSH
53242: PPUSH
53243: PPUSH
53244: PPUSH
53245: PPUSH
53246: PPUSH
53247: PPUSH
53248: PPUSH
53249: PPUSH
53250: PPUSH
// result := false ;
53251: LD_ADDR_VAR 0 6
53255: PUSH
53256: LD_INT 0
53258: ST_TO_ADDR
// if btype = b_depot then
53259: LD_VAR 0 2
53263: PUSH
53264: LD_INT 0
53266: EQUAL
53267: IFFALSE 53279
// begin result := true ;
53269: LD_ADDR_VAR 0 6
53273: PUSH
53274: LD_INT 1
53276: ST_TO_ADDR
// exit ;
53277: GO 54105
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53279: LD_VAR 0 1
53283: NOT
53284: PUSH
53285: LD_VAR 0 1
53289: PPUSH
53290: CALL_OW 266
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: IN
53305: NOT
53306: OR
53307: PUSH
53308: LD_VAR 0 2
53312: NOT
53313: OR
53314: PUSH
53315: LD_VAR 0 5
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: LD_INT 3
53331: PUSH
53332: LD_INT 4
53334: PUSH
53335: LD_INT 5
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: IN
53346: NOT
53347: OR
53348: PUSH
53349: LD_VAR 0 3
53353: PPUSH
53354: LD_VAR 0 4
53358: PPUSH
53359: CALL_OW 488
53363: NOT
53364: OR
53365: IFFALSE 53369
// exit ;
53367: GO 54105
// side := GetSide ( depot ) ;
53369: LD_ADDR_VAR 0 9
53373: PUSH
53374: LD_VAR 0 1
53378: PPUSH
53379: CALL_OW 255
53383: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53384: LD_VAR 0 9
53388: PPUSH
53389: LD_VAR 0 2
53393: PPUSH
53394: CALL 52862 0 2
53398: NOT
53399: IFFALSE 53403
// exit ;
53401: GO 54105
// pom := GetBase ( depot ) ;
53403: LD_ADDR_VAR 0 10
53407: PUSH
53408: LD_VAR 0 1
53412: PPUSH
53413: CALL_OW 274
53417: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53418: LD_ADDR_VAR 0 11
53422: PUSH
53423: LD_VAR 0 2
53427: PPUSH
53428: LD_VAR 0 1
53432: PPUSH
53433: CALL_OW 248
53437: PPUSH
53438: CALL_OW 450
53442: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53443: LD_VAR 0 10
53447: PPUSH
53448: LD_INT 1
53450: PPUSH
53451: CALL_OW 275
53455: PUSH
53456: LD_VAR 0 11
53460: PUSH
53461: LD_INT 1
53463: ARRAY
53464: GREATEREQUAL
53465: PUSH
53466: LD_VAR 0 10
53470: PPUSH
53471: LD_INT 2
53473: PPUSH
53474: CALL_OW 275
53478: PUSH
53479: LD_VAR 0 11
53483: PUSH
53484: LD_INT 2
53486: ARRAY
53487: GREATEREQUAL
53488: AND
53489: PUSH
53490: LD_VAR 0 10
53494: PPUSH
53495: LD_INT 3
53497: PPUSH
53498: CALL_OW 275
53502: PUSH
53503: LD_VAR 0 11
53507: PUSH
53508: LD_INT 3
53510: ARRAY
53511: GREATEREQUAL
53512: AND
53513: NOT
53514: IFFALSE 53518
// exit ;
53516: GO 54105
// if GetBType ( depot ) = b_depot then
53518: LD_VAR 0 1
53522: PPUSH
53523: CALL_OW 266
53527: PUSH
53528: LD_INT 0
53530: EQUAL
53531: IFFALSE 53543
// dist := 28 else
53533: LD_ADDR_VAR 0 14
53537: PUSH
53538: LD_INT 28
53540: ST_TO_ADDR
53541: GO 53551
// dist := 36 ;
53543: LD_ADDR_VAR 0 14
53547: PUSH
53548: LD_INT 36
53550: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53551: LD_VAR 0 1
53555: PPUSH
53556: LD_VAR 0 3
53560: PPUSH
53561: LD_VAR 0 4
53565: PPUSH
53566: CALL_OW 297
53570: PUSH
53571: LD_VAR 0 14
53575: GREATER
53576: IFFALSE 53580
// exit ;
53578: GO 54105
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53580: LD_ADDR_VAR 0 12
53584: PUSH
53585: LD_VAR 0 2
53589: PPUSH
53590: LD_VAR 0 3
53594: PPUSH
53595: LD_VAR 0 4
53599: PPUSH
53600: LD_VAR 0 5
53604: PPUSH
53605: LD_VAR 0 1
53609: PPUSH
53610: CALL_OW 248
53614: PPUSH
53615: LD_INT 0
53617: PPUSH
53618: CALL 54110 0 6
53622: ST_TO_ADDR
// if not hexes then
53623: LD_VAR 0 12
53627: NOT
53628: IFFALSE 53632
// exit ;
53630: GO 54105
// hex := GetHexInfo ( x , y ) ;
53632: LD_ADDR_VAR 0 15
53636: PUSH
53637: LD_VAR 0 3
53641: PPUSH
53642: LD_VAR 0 4
53646: PPUSH
53647: CALL_OW 546
53651: ST_TO_ADDR
// if hex [ 1 ] then
53652: LD_VAR 0 15
53656: PUSH
53657: LD_INT 1
53659: ARRAY
53660: IFFALSE 53664
// exit ;
53662: GO 54105
// height := hex [ 2 ] ;
53664: LD_ADDR_VAR 0 13
53668: PUSH
53669: LD_VAR 0 15
53673: PUSH
53674: LD_INT 2
53676: ARRAY
53677: ST_TO_ADDR
// for i = 1 to hexes do
53678: LD_ADDR_VAR 0 7
53682: PUSH
53683: DOUBLE
53684: LD_INT 1
53686: DEC
53687: ST_TO_ADDR
53688: LD_VAR 0 12
53692: PUSH
53693: FOR_TO
53694: IFFALSE 54024
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53696: LD_VAR 0 12
53700: PUSH
53701: LD_VAR 0 7
53705: ARRAY
53706: PUSH
53707: LD_INT 1
53709: ARRAY
53710: PPUSH
53711: LD_VAR 0 12
53715: PUSH
53716: LD_VAR 0 7
53720: ARRAY
53721: PUSH
53722: LD_INT 2
53724: ARRAY
53725: PPUSH
53726: CALL_OW 488
53730: NOT
53731: PUSH
53732: LD_VAR 0 12
53736: PUSH
53737: LD_VAR 0 7
53741: ARRAY
53742: PUSH
53743: LD_INT 1
53745: ARRAY
53746: PPUSH
53747: LD_VAR 0 12
53751: PUSH
53752: LD_VAR 0 7
53756: ARRAY
53757: PUSH
53758: LD_INT 2
53760: ARRAY
53761: PPUSH
53762: CALL_OW 428
53766: PUSH
53767: LD_INT 0
53769: GREATER
53770: OR
53771: PUSH
53772: LD_VAR 0 12
53776: PUSH
53777: LD_VAR 0 7
53781: ARRAY
53782: PUSH
53783: LD_INT 1
53785: ARRAY
53786: PPUSH
53787: LD_VAR 0 12
53791: PUSH
53792: LD_VAR 0 7
53796: ARRAY
53797: PUSH
53798: LD_INT 2
53800: ARRAY
53801: PPUSH
53802: CALL_OW 351
53806: OR
53807: IFFALSE 53813
// exit ;
53809: POP
53810: POP
53811: GO 54105
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53813: LD_ADDR_VAR 0 8
53817: PUSH
53818: LD_VAR 0 12
53822: PUSH
53823: LD_VAR 0 7
53827: ARRAY
53828: PUSH
53829: LD_INT 1
53831: ARRAY
53832: PPUSH
53833: LD_VAR 0 12
53837: PUSH
53838: LD_VAR 0 7
53842: ARRAY
53843: PUSH
53844: LD_INT 2
53846: ARRAY
53847: PPUSH
53848: CALL_OW 546
53852: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53853: LD_VAR 0 8
53857: PUSH
53858: LD_INT 1
53860: ARRAY
53861: PUSH
53862: LD_VAR 0 8
53866: PUSH
53867: LD_INT 2
53869: ARRAY
53870: PUSH
53871: LD_VAR 0 13
53875: PUSH
53876: LD_INT 2
53878: PLUS
53879: GREATER
53880: OR
53881: PUSH
53882: LD_VAR 0 8
53886: PUSH
53887: LD_INT 2
53889: ARRAY
53890: PUSH
53891: LD_VAR 0 13
53895: PUSH
53896: LD_INT 2
53898: MINUS
53899: LESS
53900: OR
53901: PUSH
53902: LD_VAR 0 8
53906: PUSH
53907: LD_INT 3
53909: ARRAY
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 8
53916: PUSH
53917: LD_INT 9
53919: PUSH
53920: LD_INT 10
53922: PUSH
53923: LD_INT 11
53925: PUSH
53926: LD_INT 12
53928: PUSH
53929: LD_INT 13
53931: PUSH
53932: LD_INT 16
53934: PUSH
53935: LD_INT 17
53937: PUSH
53938: LD_INT 18
53940: PUSH
53941: LD_INT 19
53943: PUSH
53944: LD_INT 20
53946: PUSH
53947: LD_INT 21
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: IN
53965: NOT
53966: OR
53967: PUSH
53968: LD_VAR 0 8
53972: PUSH
53973: LD_INT 5
53975: ARRAY
53976: NOT
53977: OR
53978: PUSH
53979: LD_VAR 0 8
53983: PUSH
53984: LD_INT 6
53986: ARRAY
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 7
53996: PUSH
53997: LD_INT 9
53999: PUSH
54000: LD_INT 10
54002: PUSH
54003: LD_INT 11
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: IN
54014: NOT
54015: OR
54016: IFFALSE 54022
// exit ;
54018: POP
54019: POP
54020: GO 54105
// end ;
54022: GO 53693
54024: POP
54025: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54026: LD_VAR 0 9
54030: PPUSH
54031: LD_VAR 0 3
54035: PPUSH
54036: LD_VAR 0 4
54040: PPUSH
54041: LD_INT 20
54043: PPUSH
54044: CALL 46028 0 4
54048: PUSH
54049: LD_INT 4
54051: ARRAY
54052: IFFALSE 54056
// exit ;
54054: GO 54105
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54056: LD_VAR 0 2
54060: PUSH
54061: LD_INT 29
54063: PUSH
54064: LD_INT 30
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: IN
54071: PUSH
54072: LD_VAR 0 3
54076: PPUSH
54077: LD_VAR 0 4
54081: PPUSH
54082: LD_VAR 0 9
54086: PPUSH
54087: CALL_OW 440
54091: NOT
54092: AND
54093: IFFALSE 54097
// exit ;
54095: GO 54105
// result := true ;
54097: LD_ADDR_VAR 0 6
54101: PUSH
54102: LD_INT 1
54104: ST_TO_ADDR
// end ;
54105: LD_VAR 0 6
54109: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54110: LD_INT 0
54112: PPUSH
54113: PPUSH
54114: PPUSH
54115: PPUSH
54116: PPUSH
54117: PPUSH
54118: PPUSH
54119: PPUSH
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
54124: PPUSH
54125: PPUSH
54126: PPUSH
54127: PPUSH
54128: PPUSH
54129: PPUSH
54130: PPUSH
54131: PPUSH
54132: PPUSH
54133: PPUSH
54134: PPUSH
54135: PPUSH
54136: PPUSH
54137: PPUSH
54138: PPUSH
54139: PPUSH
54140: PPUSH
54141: PPUSH
54142: PPUSH
54143: PPUSH
54144: PPUSH
54145: PPUSH
54146: PPUSH
54147: PPUSH
54148: PPUSH
54149: PPUSH
54150: PPUSH
54151: PPUSH
54152: PPUSH
54153: PPUSH
54154: PPUSH
54155: PPUSH
54156: PPUSH
54157: PPUSH
54158: PPUSH
54159: PPUSH
54160: PPUSH
54161: PPUSH
54162: PPUSH
54163: PPUSH
54164: PPUSH
54165: PPUSH
54166: PPUSH
54167: PPUSH
54168: PPUSH
54169: PPUSH
// result = [ ] ;
54170: LD_ADDR_VAR 0 7
54174: PUSH
54175: EMPTY
54176: ST_TO_ADDR
// temp_list = [ ] ;
54177: LD_ADDR_VAR 0 9
54181: PUSH
54182: EMPTY
54183: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54184: LD_VAR 0 4
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: LD_INT 3
54200: PUSH
54201: LD_INT 4
54203: PUSH
54204: LD_INT 5
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: IN
54215: NOT
54216: PUSH
54217: LD_VAR 0 1
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: IN
54232: PUSH
54233: LD_VAR 0 5
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 3
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: LIST
54251: IN
54252: NOT
54253: AND
54254: OR
54255: IFFALSE 54259
// exit ;
54257: GO 72650
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54259: LD_VAR 0 1
54263: PUSH
54264: LD_INT 6
54266: PUSH
54267: LD_INT 7
54269: PUSH
54270: LD_INT 8
54272: PUSH
54273: LD_INT 13
54275: PUSH
54276: LD_INT 12
54278: PUSH
54279: LD_INT 15
54281: PUSH
54282: LD_INT 11
54284: PUSH
54285: LD_INT 14
54287: PUSH
54288: LD_INT 10
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: IN
54302: IFFALSE 54312
// btype = b_lab ;
54304: LD_ADDR_VAR 0 1
54308: PUSH
54309: LD_INT 6
54311: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54312: LD_VAR 0 6
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: LIST
54330: IN
54331: NOT
54332: PUSH
54333: LD_VAR 0 1
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: LD_INT 3
54349: PUSH
54350: LD_INT 6
54352: PUSH
54353: LD_INT 36
54355: PUSH
54356: LD_INT 4
54358: PUSH
54359: LD_INT 5
54361: PUSH
54362: LD_INT 31
54364: PUSH
54365: LD_INT 32
54367: PUSH
54368: LD_INT 33
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: IN
54384: NOT
54385: PUSH
54386: LD_VAR 0 6
54390: PUSH
54391: LD_INT 1
54393: EQUAL
54394: AND
54395: OR
54396: PUSH
54397: LD_VAR 0 1
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 3
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: IN
54412: NOT
54413: PUSH
54414: LD_VAR 0 6
54418: PUSH
54419: LD_INT 2
54421: EQUAL
54422: AND
54423: OR
54424: IFFALSE 54434
// mode = 0 ;
54426: LD_ADDR_VAR 0 6
54430: PUSH
54431: LD_INT 0
54433: ST_TO_ADDR
// case mode of 0 :
54434: LD_VAR 0 6
54438: PUSH
54439: LD_INT 0
54441: DOUBLE
54442: EQUAL
54443: IFTRUE 54447
54445: GO 65900
54447: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54448: LD_ADDR_VAR 0 11
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 3
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 3
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54641: LD_ADDR_VAR 0 12
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 2
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 2
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 3
54798: NEG
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 3
54809: NEG
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54837: LD_ADDR_VAR 0 13
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 3
54996: NEG
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: NEG
55009: PUSH
55010: LD_INT 3
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55036: LD_ADDR_VAR 0 14
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 3
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 3
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55232: LD_ADDR_VAR 0 15
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 3
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 3
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55425: LD_ADDR_VAR 0 16
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: NEG
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 3
55582: PUSH
55583: LD_INT 3
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 3
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55618: LD_ADDR_VAR 0 17
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: LD_INT 2
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 2
55794: NEG
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55848: LD_ADDR_VAR 0 18
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 2
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56078: LD_ADDR_VAR 0 19
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56308: LD_ADDR_VAR 0 20
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 2
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56538: LD_ADDR_VAR 0 21
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56768: LD_ADDR_VAR 0 22
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56998: LD_ADDR_VAR 0 23
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: NEG
57222: PUSH
57223: LD_INT 3
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57278: LD_ADDR_VAR 0 24
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 2
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57554: LD_ADDR_VAR 0 25
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 2
57741: NEG
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 2
57753: NEG
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: LD_INT 3
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57828: LD_ADDR_VAR 0 26
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 2
58015: NEG
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: LD_INT 3
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58104: LD_ADDR_VAR 0 27
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 3
58349: NEG
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58384: LD_ADDR_VAR 0 28
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 2
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: NEG
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: LD_INT 3
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 3
58619: NEG
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 3
58631: NEG
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58666: LD_ADDR_VAR 0 29
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: LD_INT 3
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 3
58910: NEG
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58945: LD_ADDR_VAR 0 30
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: LD_INT 2
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: LD_INT 3
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: NEG
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59223: LD_ADDR_VAR 0 31
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 2
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 2
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 2
59400: NEG
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: LD_INT 3
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 3
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: LD_INT 2
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59501: LD_ADDR_VAR 0 32
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 2
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 2
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 2
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 2
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: NEG
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: NEG
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: LD_INT 3
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 3
59713: PUSH
59714: LD_INT 2
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: LD_INT 3
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59779: LD_ADDR_VAR 0 33
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: LD_INT 2
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: LD_INT 2
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: NEG
59958: PUSH
59959: LD_INT 2
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: LD_INT 3
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 2
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 3
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 3
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60058: LD_ADDR_VAR 0 34
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: LD_INT 2
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 2
60214: NEG
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: LD_INT 2
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: LD_INT 3
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 3
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60338: LD_ADDR_VAR 0 35
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 2
60429: NEG
60430: PUSH
60431: LD_INT 1
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60450: LD_ADDR_VAR 0 36
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60562: LD_ADDR_VAR 0 37
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: NEG
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60674: LD_ADDR_VAR 0 38
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60786: LD_ADDR_VAR 0 39
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60898: LD_ADDR_VAR 0 40
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 1
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61010: LD_ADDR_VAR 0 41
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 2
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: NEG
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 2
61165: NEG
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PUSH
61202: LD_INT 3
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 3
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 3
61233: PUSH
61234: LD_INT 1
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 3
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: LD_INT 3
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: LD_INT 3
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: NEG
61274: PUSH
61275: LD_INT 1
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 3
61284: NEG
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 3
61295: NEG
61296: PUSH
61297: LD_INT 1
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 3
61307: NEG
61308: PUSH
61309: LD_INT 2
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: NEG
61320: PUSH
61321: LD_INT 3
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61360: LD_ADDR_VAR 0 42
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: NEG
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: LD_INT 2
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: LD_INT 2
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: LD_INT 1
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 2
61550: NEG
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: LD_INT 3
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 3
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 3
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 3
61606: PUSH
61607: LD_INT 3
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 2
61616: PUSH
61617: LD_INT 3
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: LD_INT 3
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: LD_INT 3
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 3
61657: NEG
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 3
61669: NEG
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61710: LD_ADDR_VAR 0 43
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 1
61768: NEG
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: LD_INT 2
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: LD_INT 2
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 2
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: LD_INT 2
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: LD_INT 3
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: LD_INT 3
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 2
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 3
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 3
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: LD_INT 3
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 3
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 3
62006: NEG
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 3
62017: NEG
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62058: LD_ADDR_VAR 0 44
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: LD_INT 2
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 2
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 2
62182: PUSH
62183: LD_INT 2
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: LD_INT 2
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: NEG
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 2
62224: NEG
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 2
62236: NEG
62237: PUSH
62238: LD_INT 2
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: LD_INT 3
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 2
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 3
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 3
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 3
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: LD_INT 3
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: LD_INT 3
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 3
62332: NEG
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 3
62343: NEG
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 3
62355: NEG
62356: PUSH
62357: LD_INT 2
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 3
62367: NEG
62368: PUSH
62369: LD_INT 3
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62408: LD_ADDR_VAR 0 45
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: LD_INT 0
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: LD_INT 2
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: LD_INT 2
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: LD_INT 2
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: LD_INT 2
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 2
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 2
62574: NEG
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 2
62586: NEG
62587: PUSH
62588: LD_INT 2
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: NEG
62599: PUSH
62600: LD_INT 3
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: LD_INT 3
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 2
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 3
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 3
62654: PUSH
62655: LD_INT 3
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 2
62664: PUSH
62665: LD_INT 3
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: PUSH
62675: LD_INT 3
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 3
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 3
62705: NEG
62706: PUSH
62707: LD_INT 2
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 3
62717: NEG
62718: PUSH
62719: LD_INT 3
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62758: LD_ADDR_VAR 0 46
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 1
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: LD_INT 0
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: LD_INT 1
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: NEG
62840: PUSH
62841: LD_INT 2
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: LD_INT 2
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 2
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: LD_INT 2
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: LD_INT 2
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 2
62924: NEG
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: LD_INT 3
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 3
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 2
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 3
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 3
63002: PUSH
63003: LD_INT 1
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: LD_INT 3
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: LD_INT 3
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: LD_INT 2
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: LD_INT 1
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 3
63054: NEG
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 3
63065: NEG
63066: PUSH
63067: LD_INT 1
63069: NEG
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63106: LD_ADDR_VAR 0 47
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 1
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 1
63187: NEG
63188: PUSH
63189: LD_INT 2
63191: NEG
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: LD_INT 2
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 2
63221: NEG
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 2
63233: NEG
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63257: LD_ADDR_VAR 0 48
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 0
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: LD_INT 2
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: LD_INT 2
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 2
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 2
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63404: LD_ADDR_VAR 0 49
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 0
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: LD_INT 1
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: NEG
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 2
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63548: LD_ADDR_VAR 0 50
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: LD_INT 1
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 1
63617: NEG
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 2
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 2
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: LD_INT 2
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63692: LD_ADDR_VAR 0 51
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: LD_INT 0
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 1
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 0
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 1
63750: NEG
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: LD_INT 2
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: LD_INT 2
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63839: LD_ADDR_VAR 0 52
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 0
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: NEG
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: LD_INT 2
63924: NEG
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: NEG
63933: PUSH
63934: LD_INT 1
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: NEG
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 2
63954: NEG
63955: PUSH
63956: LD_INT 1
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 2
63966: NEG
63967: PUSH
63968: LD_INT 2
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63990: LD_ADDR_VAR 0 53
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: LD_INT 1
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: NEG
64072: PUSH
64073: LD_INT 2
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 0
64083: PUSH
64084: LD_INT 2
64086: NEG
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: LD_INT 1
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 2
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: LD_INT 2
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: LD_INT 1
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 2
64166: NEG
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 2
64177: NEG
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: LD_INT 2
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64220: LD_ADDR_VAR 0 54
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: LD_INT 1
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: NEG
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: LD_INT 2
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 2
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 2
64355: PUSH
64356: LD_INT 2
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: LD_INT 2
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: LD_INT 1
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 2
64396: NEG
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 2
64407: NEG
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 2
64419: NEG
64420: PUSH
64421: LD_INT 2
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64450: LD_ADDR_VAR 0 55
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 1
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 1
64531: NEG
64532: PUSH
64533: LD_INT 2
64535: NEG
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: LD_INT 2
64546: NEG
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 2
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 2
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: LD_INT 1
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 2
64626: NEG
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 2
64637: NEG
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 2
64649: NEG
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64680: LD_ADDR_VAR 0 56
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: LD_INT 1
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: LD_INT 1
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 1
64761: NEG
64762: PUSH
64763: LD_INT 2
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: LD_INT 2
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 2
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 2
64815: PUSH
64816: LD_INT 2
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: LD_INT 2
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 1
64845: NEG
64846: PUSH
64847: LD_INT 1
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 2
64856: NEG
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 2
64867: NEG
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 2
64879: NEG
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64910: LD_ADDR_VAR 0 57
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: NEG
64980: PUSH
64981: LD_INT 1
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 1
64991: NEG
64992: PUSH
64993: LD_INT 2
64995: NEG
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: LD_INT 2
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 1
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 2
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 2
65035: PUSH
65036: LD_INT 1
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 2
65045: PUSH
65046: LD_INT 2
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: LD_INT 2
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: LD_INT 2
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 1
65075: NEG
65076: PUSH
65077: LD_INT 1
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 2
65086: NEG
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 2
65097: NEG
65098: PUSH
65099: LD_INT 1
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65140: LD_ADDR_VAR 0 58
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 1
65209: NEG
65210: PUSH
65211: LD_INT 1
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: LD_INT 2
65225: NEG
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: LD_INT 2
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 1
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 2
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 2
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 2
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: LD_INT 2
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 1
65305: NEG
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 2
65316: NEG
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 2
65327: NEG
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 2
65339: NEG
65340: PUSH
65341: LD_INT 2
65343: NEG
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65370: LD_ADDR_VAR 0 59
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 1
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 1
65408: PUSH
65409: LD_INT 1
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 1
65428: NEG
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 1
65439: NEG
65440: PUSH
65441: LD_INT 1
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65458: LD_ADDR_VAR 0 60
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 1
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: LD_INT 1
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: LD_INT 1
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: LD_INT 1
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65546: LD_ADDR_VAR 0 61
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: LD_INT 1
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 1
65604: NEG
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65634: LD_ADDR_VAR 0 62
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 0
65651: PUSH
65652: LD_INT 1
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 1
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 1
65672: PUSH
65673: LD_INT 1
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 1
65703: NEG
65704: PUSH
65705: LD_INT 1
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65722: LD_ADDR_VAR 0 63
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: LD_INT 1
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: LD_INT 0
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 1
65791: NEG
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65810: LD_ADDR_VAR 0 64
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: LD_INT 1
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 1
65848: PUSH
65849: LD_INT 1
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: ST_TO_ADDR
// end ; 1 :
65898: GO 71795
65900: LD_INT 1
65902: DOUBLE
65903: EQUAL
65904: IFTRUE 65908
65906: GO 68531
65908: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65909: LD_ADDR_VAR 0 11
65913: PUSH
65914: LD_INT 1
65916: NEG
65917: PUSH
65918: LD_INT 3
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: LD_INT 3
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 1
65939: PUSH
65940: LD_INT 2
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: LIST
65952: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65953: LD_ADDR_VAR 0 12
65957: PUSH
65958: LD_INT 2
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 3
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 3
65981: PUSH
65982: LD_INT 1
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: LIST
65993: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65994: LD_ADDR_VAR 0 13
65998: PUSH
65999: LD_INT 3
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 3
66011: PUSH
66012: LD_INT 3
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 2
66021: PUSH
66022: LD_INT 3
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: LIST
66033: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66034: LD_ADDR_VAR 0 14
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: LD_INT 3
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: LD_INT 3
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 1
66061: NEG
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: LIST
66074: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66075: LD_ADDR_VAR 0 15
66079: PUSH
66080: LD_INT 2
66082: NEG
66083: PUSH
66084: LD_INT 1
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 3
66093: NEG
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 3
66104: NEG
66105: PUSH
66106: LD_INT 1
66108: NEG
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: LIST
66118: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66119: LD_ADDR_VAR 0 16
66123: PUSH
66124: LD_INT 2
66126: NEG
66127: PUSH
66128: LD_INT 3
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 3
66138: NEG
66139: PUSH
66140: LD_INT 2
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 3
66150: NEG
66151: PUSH
66152: LD_INT 3
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: LIST
66164: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66165: LD_ADDR_VAR 0 17
66169: PUSH
66170: LD_INT 1
66172: NEG
66173: PUSH
66174: LD_INT 3
66176: NEG
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: LD_INT 3
66187: NEG
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 1
66195: PUSH
66196: LD_INT 2
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: LIST
66208: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66209: LD_ADDR_VAR 0 18
66213: PUSH
66214: LD_INT 2
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 3
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 3
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66250: LD_ADDR_VAR 0 19
66254: PUSH
66255: LD_INT 3
66257: PUSH
66258: LD_INT 2
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 3
66267: PUSH
66268: LD_INT 3
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 2
66277: PUSH
66278: LD_INT 3
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: LIST
66289: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66290: LD_ADDR_VAR 0 20
66294: PUSH
66295: LD_INT 1
66297: PUSH
66298: LD_INT 3
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: LD_INT 3
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 1
66317: NEG
66318: PUSH
66319: LD_INT 2
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: LIST
66330: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66331: LD_ADDR_VAR 0 21
66335: PUSH
66336: LD_INT 2
66338: NEG
66339: PUSH
66340: LD_INT 1
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 3
66349: NEG
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 3
66360: NEG
66361: PUSH
66362: LD_INT 1
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: LIST
66374: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66375: LD_ADDR_VAR 0 22
66379: PUSH
66380: LD_INT 2
66382: NEG
66383: PUSH
66384: LD_INT 3
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 3
66394: NEG
66395: PUSH
66396: LD_INT 2
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 3
66406: NEG
66407: PUSH
66408: LD_INT 3
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: LIST
66420: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66421: LD_ADDR_VAR 0 23
66425: PUSH
66426: LD_INT 0
66428: PUSH
66429: LD_INT 3
66431: NEG
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 1
66439: NEG
66440: PUSH
66441: LD_INT 4
66443: NEG
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 1
66451: PUSH
66452: LD_INT 3
66454: NEG
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: LIST
66464: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66465: LD_ADDR_VAR 0 24
66469: PUSH
66470: LD_INT 3
66472: PUSH
66473: LD_INT 0
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 3
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 4
66493: PUSH
66494: LD_INT 1
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: LIST
66505: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66506: LD_ADDR_VAR 0 25
66510: PUSH
66511: LD_INT 3
66513: PUSH
66514: LD_INT 3
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 4
66523: PUSH
66524: LD_INT 3
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 3
66533: PUSH
66534: LD_INT 4
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: LIST
66545: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66546: LD_ADDR_VAR 0 26
66550: PUSH
66551: LD_INT 0
66553: PUSH
66554: LD_INT 3
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 1
66563: PUSH
66564: LD_INT 4
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 1
66573: NEG
66574: PUSH
66575: LD_INT 3
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: LIST
66586: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66587: LD_ADDR_VAR 0 27
66591: PUSH
66592: LD_INT 3
66594: NEG
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 3
66605: NEG
66606: PUSH
66607: LD_INT 1
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 4
66616: NEG
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: LIST
66630: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66631: LD_ADDR_VAR 0 28
66635: PUSH
66636: LD_INT 3
66638: NEG
66639: PUSH
66640: LD_INT 3
66642: NEG
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 3
66650: NEG
66651: PUSH
66652: LD_INT 4
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 4
66662: NEG
66663: PUSH
66664: LD_INT 3
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: LIST
66676: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66677: LD_ADDR_VAR 0 29
66681: PUSH
66682: LD_INT 1
66684: NEG
66685: PUSH
66686: LD_INT 3
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: LD_INT 3
66699: NEG
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: LD_INT 2
66710: NEG
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 1
66718: NEG
66719: PUSH
66720: LD_INT 4
66722: NEG
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 0
66730: PUSH
66731: LD_INT 4
66733: NEG
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 1
66741: PUSH
66742: LD_INT 3
66744: NEG
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 1
66752: NEG
66753: PUSH
66754: LD_INT 5
66756: NEG
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 0
66764: PUSH
66765: LD_INT 5
66767: NEG
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 1
66775: PUSH
66776: LD_INT 4
66778: NEG
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 1
66786: NEG
66787: PUSH
66788: LD_INT 6
66790: NEG
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 0
66798: PUSH
66799: LD_INT 6
66801: NEG
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 1
66809: PUSH
66810: LD_INT 5
66812: NEG
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66832: LD_ADDR_VAR 0 30
66836: PUSH
66837: LD_INT 2
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 3
66850: PUSH
66851: LD_INT 0
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 3
66860: PUSH
66861: LD_INT 1
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 3
66870: PUSH
66871: LD_INT 1
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 4
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 4
66891: PUSH
66892: LD_INT 1
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 4
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 5
66912: PUSH
66913: LD_INT 0
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 5
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 5
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 6
66943: PUSH
66944: LD_INT 0
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 6
66953: PUSH
66954: LD_INT 1
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66975: LD_ADDR_VAR 0 31
66979: PUSH
66980: LD_INT 3
66982: PUSH
66983: LD_INT 2
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 3
66992: PUSH
66993: LD_INT 3
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 2
67002: PUSH
67003: LD_INT 3
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 4
67012: PUSH
67013: LD_INT 3
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 4
67022: PUSH
67023: LD_INT 4
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 3
67032: PUSH
67033: LD_INT 4
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 5
67042: PUSH
67043: LD_INT 4
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 5
67052: PUSH
67053: LD_INT 5
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 4
67062: PUSH
67063: LD_INT 5
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 6
67072: PUSH
67073: LD_INT 5
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 6
67082: PUSH
67083: LD_INT 6
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 5
67092: PUSH
67093: LD_INT 6
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67114: LD_ADDR_VAR 0 32
67118: PUSH
67119: LD_INT 1
67121: PUSH
67122: LD_INT 3
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: LD_INT 3
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 1
67141: NEG
67142: PUSH
67143: LD_INT 2
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: LD_INT 4
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: LD_INT 4
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 1
67172: NEG
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 1
67183: PUSH
67184: LD_INT 5
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 0
67193: PUSH
67194: LD_INT 5
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 1
67203: NEG
67204: PUSH
67205: LD_INT 4
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 1
67214: PUSH
67215: LD_INT 6
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 0
67224: PUSH
67225: LD_INT 6
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 1
67234: NEG
67235: PUSH
67236: LD_INT 5
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67257: LD_ADDR_VAR 0 33
67261: PUSH
67262: LD_INT 2
67264: NEG
67265: PUSH
67266: LD_INT 1
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 3
67286: NEG
67287: PUSH
67288: LD_INT 1
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 3
67298: NEG
67299: PUSH
67300: LD_INT 1
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 4
67309: NEG
67310: PUSH
67311: LD_INT 0
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 4
67320: NEG
67321: PUSH
67322: LD_INT 1
67324: NEG
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 4
67332: NEG
67333: PUSH
67334: LD_INT 1
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 5
67343: NEG
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 5
67354: NEG
67355: PUSH
67356: LD_INT 1
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 5
67366: NEG
67367: PUSH
67368: LD_INT 1
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 6
67377: NEG
67378: PUSH
67379: LD_INT 0
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 6
67388: NEG
67389: PUSH
67390: LD_INT 1
67392: NEG
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67412: LD_ADDR_VAR 0 34
67416: PUSH
67417: LD_INT 2
67419: NEG
67420: PUSH
67421: LD_INT 3
67423: NEG
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 3
67431: NEG
67432: PUSH
67433: LD_INT 2
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 3
67443: NEG
67444: PUSH
67445: LD_INT 3
67447: NEG
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 3
67455: NEG
67456: PUSH
67457: LD_INT 4
67459: NEG
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 4
67467: NEG
67468: PUSH
67469: LD_INT 3
67471: NEG
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 4
67479: NEG
67480: PUSH
67481: LD_INT 4
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 4
67491: NEG
67492: PUSH
67493: LD_INT 5
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 5
67503: NEG
67504: PUSH
67505: LD_INT 4
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 5
67515: NEG
67516: PUSH
67517: LD_INT 5
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 5
67527: NEG
67528: PUSH
67529: LD_INT 6
67531: NEG
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 6
67539: NEG
67540: PUSH
67541: LD_INT 5
67543: NEG
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 6
67551: NEG
67552: PUSH
67553: LD_INT 6
67555: NEG
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67575: LD_ADDR_VAR 0 41
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: LD_INT 2
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: NEG
67594: PUSH
67595: LD_INT 3
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: LD_INT 2
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: LIST
67618: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67619: LD_ADDR_VAR 0 42
67623: PUSH
67624: LD_INT 2
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 2
67636: PUSH
67637: LD_INT 1
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 3
67647: PUSH
67648: LD_INT 1
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: LIST
67659: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67660: LD_ADDR_VAR 0 43
67664: PUSH
67665: LD_INT 2
67667: PUSH
67668: LD_INT 2
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 3
67677: PUSH
67678: LD_INT 2
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 2
67687: PUSH
67688: LD_INT 3
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67700: LD_ADDR_VAR 0 44
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: LD_INT 2
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 1
67717: PUSH
67718: LD_INT 3
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: LD_INT 2
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: LIST
67740: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67741: LD_ADDR_VAR 0 45
67745: PUSH
67746: LD_INT 2
67748: NEG
67749: PUSH
67750: LD_INT 0
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 2
67759: NEG
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 3
67770: NEG
67771: PUSH
67772: LD_INT 1
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: LIST
67784: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67785: LD_ADDR_VAR 0 46
67789: PUSH
67790: LD_INT 2
67792: NEG
67793: PUSH
67794: LD_INT 2
67796: NEG
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 2
67804: NEG
67805: PUSH
67806: LD_INT 3
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 3
67816: NEG
67817: PUSH
67818: LD_INT 2
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67831: LD_ADDR_VAR 0 47
67835: PUSH
67836: LD_INT 2
67838: NEG
67839: PUSH
67840: LD_INT 3
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 1
67850: NEG
67851: PUSH
67852: LD_INT 3
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67864: LD_ADDR_VAR 0 48
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: LD_INT 2
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 2
67882: PUSH
67883: LD_INT 1
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67895: LD_ADDR_VAR 0 49
67899: PUSH
67900: LD_INT 3
67902: PUSH
67903: LD_INT 1
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 3
67912: PUSH
67913: LD_INT 2
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67924: LD_ADDR_VAR 0 50
67928: PUSH
67929: LD_INT 2
67931: PUSH
67932: LD_INT 3
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: LD_INT 3
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67953: LD_ADDR_VAR 0 51
67957: PUSH
67958: LD_INT 1
67960: NEG
67961: PUSH
67962: LD_INT 2
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 2
67971: NEG
67972: PUSH
67973: LD_INT 1
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67984: LD_ADDR_VAR 0 52
67988: PUSH
67989: LD_INT 3
67991: NEG
67992: PUSH
67993: LD_INT 1
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 3
68003: NEG
68004: PUSH
68005: LD_INT 2
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68017: LD_ADDR_VAR 0 53
68021: PUSH
68022: LD_INT 1
68024: NEG
68025: PUSH
68026: LD_INT 3
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 0
68036: PUSH
68037: LD_INT 3
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: LD_INT 2
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: LIST
68060: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68061: LD_ADDR_VAR 0 54
68065: PUSH
68066: LD_INT 2
68068: PUSH
68069: LD_INT 1
68071: NEG
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 3
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 3
68089: PUSH
68090: LD_INT 1
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: LIST
68101: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68102: LD_ADDR_VAR 0 55
68106: PUSH
68107: LD_INT 3
68109: PUSH
68110: LD_INT 2
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 3
68119: PUSH
68120: LD_INT 3
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 2
68129: PUSH
68130: LD_INT 3
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: LIST
68141: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68142: LD_ADDR_VAR 0 56
68146: PUSH
68147: LD_INT 1
68149: PUSH
68150: LD_INT 3
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: LD_INT 3
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 1
68169: NEG
68170: PUSH
68171: LD_INT 2
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: LIST
68182: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68183: LD_ADDR_VAR 0 57
68187: PUSH
68188: LD_INT 2
68190: NEG
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 3
68201: NEG
68202: PUSH
68203: LD_INT 0
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 3
68212: NEG
68213: PUSH
68214: LD_INT 1
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: LIST
68226: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68227: LD_ADDR_VAR 0 58
68231: PUSH
68232: LD_INT 2
68234: NEG
68235: PUSH
68236: LD_INT 3
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 3
68246: NEG
68247: PUSH
68248: LD_INT 2
68250: NEG
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 3
68258: NEG
68259: PUSH
68260: LD_INT 3
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: LIST
68272: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68273: LD_ADDR_VAR 0 59
68277: PUSH
68278: LD_INT 1
68280: NEG
68281: PUSH
68282: LD_INT 2
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 0
68292: PUSH
68293: LD_INT 2
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 1
68303: PUSH
68304: LD_INT 1
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: LIST
68316: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68317: LD_ADDR_VAR 0 60
68321: PUSH
68322: LD_INT 1
68324: PUSH
68325: LD_INT 1
68327: NEG
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 2
68335: PUSH
68336: LD_INT 0
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 2
68345: PUSH
68346: LD_INT 1
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: LIST
68357: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68358: LD_ADDR_VAR 0 61
68362: PUSH
68363: LD_INT 2
68365: PUSH
68366: LD_INT 1
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 2
68375: PUSH
68376: LD_INT 2
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 1
68385: PUSH
68386: LD_INT 2
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: LIST
68397: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68398: LD_ADDR_VAR 0 62
68402: PUSH
68403: LD_INT 1
68405: PUSH
68406: LD_INT 2
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 0
68415: PUSH
68416: LD_INT 2
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 1
68425: NEG
68426: PUSH
68427: LD_INT 1
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: LIST
68438: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68439: LD_ADDR_VAR 0 63
68443: PUSH
68444: LD_INT 1
68446: NEG
68447: PUSH
68448: LD_INT 1
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 2
68457: NEG
68458: PUSH
68459: LD_INT 0
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 2
68468: NEG
68469: PUSH
68470: LD_INT 1
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: LIST
68482: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68483: LD_ADDR_VAR 0 64
68487: PUSH
68488: LD_INT 1
68490: NEG
68491: PUSH
68492: LD_INT 2
68494: NEG
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 2
68502: NEG
68503: PUSH
68504: LD_INT 1
68506: NEG
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 2
68514: NEG
68515: PUSH
68516: LD_INT 2
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: LIST
68528: ST_TO_ADDR
// end ; 2 :
68529: GO 71795
68531: LD_INT 2
68533: DOUBLE
68534: EQUAL
68535: IFTRUE 68539
68537: GO 71794
68539: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68540: LD_ADDR_VAR 0 29
68544: PUSH
68545: LD_INT 4
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 4
68557: PUSH
68558: LD_INT 1
68560: NEG
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 5
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 5
68578: PUSH
68579: LD_INT 1
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 4
68588: PUSH
68589: LD_INT 1
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 3
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 3
68608: PUSH
68609: LD_INT 1
68611: NEG
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 3
68619: PUSH
68620: LD_INT 2
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 5
68630: PUSH
68631: LD_INT 2
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 3
68640: PUSH
68641: LD_INT 3
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 3
68650: PUSH
68651: LD_INT 2
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 4
68660: PUSH
68661: LD_INT 3
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 4
68670: PUSH
68671: LD_INT 4
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 3
68680: PUSH
68681: LD_INT 4
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 2
68690: PUSH
68691: LD_INT 3
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 2
68700: PUSH
68701: LD_INT 2
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 4
68710: PUSH
68711: LD_INT 2
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 2
68720: PUSH
68721: LD_INT 4
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: LD_INT 4
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 0
68740: PUSH
68741: LD_INT 3
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 1
68750: PUSH
68751: LD_INT 4
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 1
68760: PUSH
68761: LD_INT 5
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: LD_INT 5
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 1
68780: NEG
68781: PUSH
68782: LD_INT 4
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 1
68791: NEG
68792: PUSH
68793: LD_INT 3
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 2
68802: PUSH
68803: LD_INT 5
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 2
68812: NEG
68813: PUSH
68814: LD_INT 3
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 3
68823: NEG
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 3
68834: NEG
68835: PUSH
68836: LD_INT 1
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 2
68846: NEG
68847: PUSH
68848: LD_INT 0
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 2
68857: NEG
68858: PUSH
68859: LD_INT 1
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 3
68868: NEG
68869: PUSH
68870: LD_INT 1
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 4
68879: NEG
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 4
68890: NEG
68891: PUSH
68892: LD_INT 1
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 4
68902: NEG
68903: PUSH
68904: LD_INT 2
68906: NEG
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 2
68914: NEG
68915: PUSH
68916: LD_INT 2
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 4
68925: NEG
68926: PUSH
68927: LD_INT 4
68929: NEG
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 4
68937: NEG
68938: PUSH
68939: LD_INT 5
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 3
68949: NEG
68950: PUSH
68951: LD_INT 4
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 3
68961: NEG
68962: PUSH
68963: LD_INT 3
68965: NEG
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 4
68973: NEG
68974: PUSH
68975: LD_INT 3
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 5
68985: NEG
68986: PUSH
68987: LD_INT 4
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 5
68997: NEG
68998: PUSH
68999: LD_INT 5
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 3
69009: NEG
69010: PUSH
69011: LD_INT 5
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 5
69021: NEG
69022: PUSH
69023: LD_INT 3
69025: NEG
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69078: LD_ADDR_VAR 0 30
69082: PUSH
69083: LD_INT 4
69085: PUSH
69086: LD_INT 4
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 4
69095: PUSH
69096: LD_INT 3
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 5
69105: PUSH
69106: LD_INT 4
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 5
69115: PUSH
69116: LD_INT 5
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 4
69125: PUSH
69126: LD_INT 5
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 3
69135: PUSH
69136: LD_INT 4
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 3
69145: PUSH
69146: LD_INT 3
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 5
69155: PUSH
69156: LD_INT 3
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 3
69165: PUSH
69166: LD_INT 5
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: LD_INT 3
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: LD_INT 2
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 1
69195: PUSH
69196: LD_INT 3
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 1
69205: PUSH
69206: LD_INT 4
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 0
69215: PUSH
69216: LD_INT 4
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 1
69225: NEG
69226: PUSH
69227: LD_INT 3
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 1
69236: NEG
69237: PUSH
69238: LD_INT 2
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 2
69247: PUSH
69248: LD_INT 4
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 2
69257: NEG
69258: PUSH
69259: LD_INT 2
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 4
69268: NEG
69269: PUSH
69270: LD_INT 0
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 4
69279: NEG
69280: PUSH
69281: LD_INT 1
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 3
69291: NEG
69292: PUSH
69293: LD_INT 0
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 3
69302: NEG
69303: PUSH
69304: LD_INT 1
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 4
69313: NEG
69314: PUSH
69315: LD_INT 1
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 5
69324: NEG
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 5
69335: NEG
69336: PUSH
69337: LD_INT 1
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 5
69347: NEG
69348: PUSH
69349: LD_INT 2
69351: NEG
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 3
69359: NEG
69360: PUSH
69361: LD_INT 2
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 3
69370: NEG
69371: PUSH
69372: LD_INT 3
69374: NEG
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 3
69382: NEG
69383: PUSH
69384: LD_INT 4
69386: NEG
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 2
69394: NEG
69395: PUSH
69396: LD_INT 3
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 2
69406: NEG
69407: PUSH
69408: LD_INT 2
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 3
69418: NEG
69419: PUSH
69420: LD_INT 2
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 4
69430: NEG
69431: PUSH
69432: LD_INT 3
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 4
69442: NEG
69443: PUSH
69444: LD_INT 4
69446: NEG
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 2
69454: NEG
69455: PUSH
69456: LD_INT 4
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 4
69466: NEG
69467: PUSH
69468: LD_INT 2
69470: NEG
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: LD_INT 4
69481: NEG
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: LD_INT 5
69492: NEG
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 1
69500: PUSH
69501: LD_INT 4
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 1
69511: PUSH
69512: LD_INT 3
69514: NEG
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 0
69522: PUSH
69523: LD_INT 3
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 1
69533: NEG
69534: PUSH
69535: LD_INT 4
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 1
69545: NEG
69546: PUSH
69547: LD_INT 5
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 2
69557: PUSH
69558: LD_INT 3
69560: NEG
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 2
69568: NEG
69569: PUSH
69570: LD_INT 5
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69625: LD_ADDR_VAR 0 31
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: LD_INT 4
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 0
69642: PUSH
69643: LD_INT 3
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 1
69652: PUSH
69653: LD_INT 4
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 1
69662: PUSH
69663: LD_INT 5
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 0
69672: PUSH
69673: LD_INT 5
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 1
69682: NEG
69683: PUSH
69684: LD_INT 4
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 1
69693: NEG
69694: PUSH
69695: LD_INT 3
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 2
69704: PUSH
69705: LD_INT 5
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 2
69714: NEG
69715: PUSH
69716: LD_INT 3
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 3
69725: NEG
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 3
69736: NEG
69737: PUSH
69738: LD_INT 1
69740: NEG
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 2
69748: NEG
69749: PUSH
69750: LD_INT 0
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 2
69759: NEG
69760: PUSH
69761: LD_INT 1
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 3
69770: NEG
69771: PUSH
69772: LD_INT 1
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 4
69781: NEG
69782: PUSH
69783: LD_INT 0
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 4
69792: NEG
69793: PUSH
69794: LD_INT 1
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 4
69804: NEG
69805: PUSH
69806: LD_INT 2
69808: NEG
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 2
69816: NEG
69817: PUSH
69818: LD_INT 2
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 4
69827: NEG
69828: PUSH
69829: LD_INT 4
69831: NEG
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 4
69839: NEG
69840: PUSH
69841: LD_INT 5
69843: NEG
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 3
69851: NEG
69852: PUSH
69853: LD_INT 4
69855: NEG
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 3
69863: NEG
69864: PUSH
69865: LD_INT 3
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 4
69875: NEG
69876: PUSH
69877: LD_INT 3
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 5
69887: NEG
69888: PUSH
69889: LD_INT 4
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 5
69899: NEG
69900: PUSH
69901: LD_INT 5
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 3
69911: NEG
69912: PUSH
69913: LD_INT 5
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 5
69923: NEG
69924: PUSH
69925: LD_INT 3
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 0
69935: PUSH
69936: LD_INT 3
69938: NEG
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: LD_INT 4
69949: NEG
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 1
69957: PUSH
69958: LD_INT 3
69960: NEG
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 1
69968: PUSH
69969: LD_INT 2
69971: NEG
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 0
69979: PUSH
69980: LD_INT 2
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 1
69990: NEG
69991: PUSH
69992: LD_INT 3
69994: NEG
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 1
70002: NEG
70003: PUSH
70004: LD_INT 4
70006: NEG
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 2
70014: PUSH
70015: LD_INT 2
70017: NEG
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 2
70025: NEG
70026: PUSH
70027: LD_INT 4
70029: NEG
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 4
70037: PUSH
70038: LD_INT 0
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 4
70047: PUSH
70048: LD_INT 1
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 5
70058: PUSH
70059: LD_INT 0
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 5
70068: PUSH
70069: LD_INT 1
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 4
70078: PUSH
70079: LD_INT 1
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 3
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 3
70098: PUSH
70099: LD_INT 1
70101: NEG
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 3
70109: PUSH
70110: LD_INT 2
70112: NEG
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 5
70120: PUSH
70121: LD_INT 2
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70175: LD_ADDR_VAR 0 32
70179: PUSH
70180: LD_INT 4
70182: NEG
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 4
70193: NEG
70194: PUSH
70195: LD_INT 1
70197: NEG
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 3
70205: NEG
70206: PUSH
70207: LD_INT 0
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 3
70216: NEG
70217: PUSH
70218: LD_INT 1
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 4
70227: NEG
70228: PUSH
70229: LD_INT 1
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 5
70238: NEG
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 5
70249: NEG
70250: PUSH
70251: LD_INT 1
70253: NEG
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 5
70261: NEG
70262: PUSH
70263: LD_INT 2
70265: NEG
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 3
70273: NEG
70274: PUSH
70275: LD_INT 2
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 3
70284: NEG
70285: PUSH
70286: LD_INT 3
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 3
70296: NEG
70297: PUSH
70298: LD_INT 4
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 2
70308: NEG
70309: PUSH
70310: LD_INT 3
70312: NEG
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 2
70320: NEG
70321: PUSH
70322: LD_INT 2
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 3
70332: NEG
70333: PUSH
70334: LD_INT 2
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 4
70344: NEG
70345: PUSH
70346: LD_INT 3
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 4
70356: NEG
70357: PUSH
70358: LD_INT 4
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 2
70368: NEG
70369: PUSH
70370: LD_INT 4
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 4
70380: NEG
70381: PUSH
70382: LD_INT 2
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 0
70392: PUSH
70393: LD_INT 4
70395: NEG
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: LD_INT 5
70406: NEG
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 1
70414: PUSH
70415: LD_INT 4
70417: NEG
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 1
70425: PUSH
70426: LD_INT 3
70428: NEG
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 0
70436: PUSH
70437: LD_INT 3
70439: NEG
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 1
70447: NEG
70448: PUSH
70449: LD_INT 4
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 1
70459: NEG
70460: PUSH
70461: LD_INT 5
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 2
70471: PUSH
70472: LD_INT 3
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 2
70482: NEG
70483: PUSH
70484: LD_INT 5
70486: NEG
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 3
70494: PUSH
70495: LD_INT 0
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 3
70504: PUSH
70505: LD_INT 1
70507: NEG
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 4
70515: PUSH
70516: LD_INT 0
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 4
70525: PUSH
70526: LD_INT 1
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 3
70535: PUSH
70536: LD_INT 1
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 2
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 2
70555: PUSH
70556: LD_INT 1
70558: NEG
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 2
70566: PUSH
70567: LD_INT 2
70569: NEG
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 4
70577: PUSH
70578: LD_INT 2
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 4
70587: PUSH
70588: LD_INT 4
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 4
70597: PUSH
70598: LD_INT 3
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: LD_INT 5
70607: PUSH
70608: LD_INT 4
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 5
70617: PUSH
70618: LD_INT 5
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 4
70627: PUSH
70628: LD_INT 5
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 3
70637: PUSH
70638: LD_INT 4
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 3
70647: PUSH
70648: LD_INT 3
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 5
70657: PUSH
70658: LD_INT 3
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 3
70667: PUSH
70668: LD_INT 5
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70722: LD_ADDR_VAR 0 33
70726: PUSH
70727: LD_INT 4
70729: NEG
70730: PUSH
70731: LD_INT 4
70733: NEG
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 4
70741: NEG
70742: PUSH
70743: LD_INT 5
70745: NEG
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 3
70753: NEG
70754: PUSH
70755: LD_INT 4
70757: NEG
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 3
70765: NEG
70766: PUSH
70767: LD_INT 3
70769: NEG
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 4
70777: NEG
70778: PUSH
70779: LD_INT 3
70781: NEG
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 5
70789: NEG
70790: PUSH
70791: LD_INT 4
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 5
70801: NEG
70802: PUSH
70803: LD_INT 5
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 3
70813: NEG
70814: PUSH
70815: LD_INT 5
70817: NEG
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 5
70825: NEG
70826: PUSH
70827: LD_INT 3
70829: NEG
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: LD_INT 3
70840: NEG
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 0
70848: PUSH
70849: LD_INT 4
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 1
70859: PUSH
70860: LD_INT 3
70862: NEG
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 1
70870: PUSH
70871: LD_INT 2
70873: NEG
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 0
70881: PUSH
70882: LD_INT 2
70884: NEG
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 1
70892: NEG
70893: PUSH
70894: LD_INT 3
70896: NEG
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 1
70904: NEG
70905: PUSH
70906: LD_INT 4
70908: NEG
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: LD_INT 2
70916: PUSH
70917: LD_INT 2
70919: NEG
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: LD_INT 2
70927: NEG
70928: PUSH
70929: LD_INT 4
70931: NEG
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 4
70939: PUSH
70940: LD_INT 0
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 4
70949: PUSH
70950: LD_INT 1
70952: NEG
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 5
70960: PUSH
70961: LD_INT 0
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 5
70970: PUSH
70971: LD_INT 1
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 4
70980: PUSH
70981: LD_INT 1
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 3
70990: PUSH
70991: LD_INT 0
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 3
71000: PUSH
71001: LD_INT 1
71003: NEG
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 3
71011: PUSH
71012: LD_INT 2
71014: NEG
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 5
71022: PUSH
71023: LD_INT 2
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 3
71032: PUSH
71033: LD_INT 3
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 3
71042: PUSH
71043: LD_INT 2
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_INT 4
71052: PUSH
71053: LD_INT 3
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 4
71062: PUSH
71063: LD_INT 4
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 3
71072: PUSH
71073: LD_INT 4
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 2
71082: PUSH
71083: LD_INT 3
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 2
71092: PUSH
71093: LD_INT 2
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 4
71102: PUSH
71103: LD_INT 2
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 2
71112: PUSH
71113: LD_INT 4
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 0
71122: PUSH
71123: LD_INT 4
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PUSH
71130: LD_INT 0
71132: PUSH
71133: LD_INT 3
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 1
71142: PUSH
71143: LD_INT 4
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 1
71152: PUSH
71153: LD_INT 5
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 0
71162: PUSH
71163: LD_INT 5
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 1
71172: NEG
71173: PUSH
71174: LD_INT 4
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 1
71183: NEG
71184: PUSH
71185: LD_INT 3
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 2
71194: PUSH
71195: LD_INT 5
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 2
71204: NEG
71205: PUSH
71206: LD_INT 3
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71260: LD_ADDR_VAR 0 34
71264: PUSH
71265: LD_INT 0
71267: PUSH
71268: LD_INT 4
71270: NEG
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 0
71278: PUSH
71279: LD_INT 5
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 1
71289: PUSH
71290: LD_INT 4
71292: NEG
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 1
71300: PUSH
71301: LD_INT 3
71303: NEG
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: LD_INT 3
71314: NEG
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 1
71322: NEG
71323: PUSH
71324: LD_INT 4
71326: NEG
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 1
71334: NEG
71335: PUSH
71336: LD_INT 5
71338: NEG
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 2
71346: PUSH
71347: LD_INT 3
71349: NEG
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 2
71357: NEG
71358: PUSH
71359: LD_INT 5
71361: NEG
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 3
71369: PUSH
71370: LD_INT 0
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 3
71379: PUSH
71380: LD_INT 1
71382: NEG
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 4
71390: PUSH
71391: LD_INT 0
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 4
71400: PUSH
71401: LD_INT 1
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 3
71410: PUSH
71411: LD_INT 1
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 2
71420: PUSH
71421: LD_INT 0
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 2
71430: PUSH
71431: LD_INT 1
71433: NEG
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 2
71441: PUSH
71442: LD_INT 2
71444: NEG
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: LD_INT 4
71452: PUSH
71453: LD_INT 2
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 4
71462: PUSH
71463: LD_INT 4
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 4
71472: PUSH
71473: LD_INT 3
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 5
71482: PUSH
71483: LD_INT 4
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 5
71492: PUSH
71493: LD_INT 5
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 4
71502: PUSH
71503: LD_INT 5
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 3
71512: PUSH
71513: LD_INT 4
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 3
71522: PUSH
71523: LD_INT 3
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: LD_INT 5
71532: PUSH
71533: LD_INT 3
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 3
71542: PUSH
71543: LD_INT 5
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: LD_INT 0
71552: PUSH
71553: LD_INT 3
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 0
71562: PUSH
71563: LD_INT 2
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 1
71572: PUSH
71573: LD_INT 3
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: PUSH
71580: LD_INT 1
71582: PUSH
71583: LD_INT 4
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: PUSH
71590: LD_INT 0
71592: PUSH
71593: LD_INT 4
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 1
71602: NEG
71603: PUSH
71604: LD_INT 3
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 1
71613: NEG
71614: PUSH
71615: LD_INT 2
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 2
71624: PUSH
71625: LD_INT 4
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PUSH
71632: LD_INT 2
71634: NEG
71635: PUSH
71636: LD_INT 2
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 4
71645: NEG
71646: PUSH
71647: LD_INT 0
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 4
71656: NEG
71657: PUSH
71658: LD_INT 1
71660: NEG
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: LD_INT 3
71668: NEG
71669: PUSH
71670: LD_INT 0
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 3
71679: NEG
71680: PUSH
71681: LD_INT 1
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 4
71690: NEG
71691: PUSH
71692: LD_INT 1
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 5
71701: NEG
71702: PUSH
71703: LD_INT 0
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 5
71712: NEG
71713: PUSH
71714: LD_INT 1
71716: NEG
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 5
71724: NEG
71725: PUSH
71726: LD_INT 2
71728: NEG
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 3
71736: NEG
71737: PUSH
71738: LD_INT 2
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: ST_TO_ADDR
// end ; end ;
71792: GO 71795
71794: POP
// case btype of b_depot , b_warehouse :
71795: LD_VAR 0 1
71799: PUSH
71800: LD_INT 0
71802: DOUBLE
71803: EQUAL
71804: IFTRUE 71814
71806: LD_INT 1
71808: DOUBLE
71809: EQUAL
71810: IFTRUE 71814
71812: GO 72015
71814: POP
// case nation of nation_american :
71815: LD_VAR 0 5
71819: PUSH
71820: LD_INT 1
71822: DOUBLE
71823: EQUAL
71824: IFTRUE 71828
71826: GO 71884
71828: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71829: LD_ADDR_VAR 0 9
71833: PUSH
71834: LD_VAR 0 11
71838: PUSH
71839: LD_VAR 0 12
71843: PUSH
71844: LD_VAR 0 13
71848: PUSH
71849: LD_VAR 0 14
71853: PUSH
71854: LD_VAR 0 15
71858: PUSH
71859: LD_VAR 0 16
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: PUSH
71872: LD_VAR 0 4
71876: PUSH
71877: LD_INT 1
71879: PLUS
71880: ARRAY
71881: ST_TO_ADDR
71882: GO 72013
71884: LD_INT 2
71886: DOUBLE
71887: EQUAL
71888: IFTRUE 71892
71890: GO 71948
71892: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71893: LD_ADDR_VAR 0 9
71897: PUSH
71898: LD_VAR 0 17
71902: PUSH
71903: LD_VAR 0 18
71907: PUSH
71908: LD_VAR 0 19
71912: PUSH
71913: LD_VAR 0 20
71917: PUSH
71918: LD_VAR 0 21
71922: PUSH
71923: LD_VAR 0 22
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: PUSH
71936: LD_VAR 0 4
71940: PUSH
71941: LD_INT 1
71943: PLUS
71944: ARRAY
71945: ST_TO_ADDR
71946: GO 72013
71948: LD_INT 3
71950: DOUBLE
71951: EQUAL
71952: IFTRUE 71956
71954: GO 72012
71956: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71957: LD_ADDR_VAR 0 9
71961: PUSH
71962: LD_VAR 0 23
71966: PUSH
71967: LD_VAR 0 24
71971: PUSH
71972: LD_VAR 0 25
71976: PUSH
71977: LD_VAR 0 26
71981: PUSH
71982: LD_VAR 0 27
71986: PUSH
71987: LD_VAR 0 28
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: PUSH
72000: LD_VAR 0 4
72004: PUSH
72005: LD_INT 1
72007: PLUS
72008: ARRAY
72009: ST_TO_ADDR
72010: GO 72013
72012: POP
72013: GO 72568
72015: LD_INT 2
72017: DOUBLE
72018: EQUAL
72019: IFTRUE 72029
72021: LD_INT 3
72023: DOUBLE
72024: EQUAL
72025: IFTRUE 72029
72027: GO 72085
72029: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72030: LD_ADDR_VAR 0 9
72034: PUSH
72035: LD_VAR 0 29
72039: PUSH
72040: LD_VAR 0 30
72044: PUSH
72045: LD_VAR 0 31
72049: PUSH
72050: LD_VAR 0 32
72054: PUSH
72055: LD_VAR 0 33
72059: PUSH
72060: LD_VAR 0 34
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: PUSH
72073: LD_VAR 0 4
72077: PUSH
72078: LD_INT 1
72080: PLUS
72081: ARRAY
72082: ST_TO_ADDR
72083: GO 72568
72085: LD_INT 16
72087: DOUBLE
72088: EQUAL
72089: IFTRUE 72147
72091: LD_INT 17
72093: DOUBLE
72094: EQUAL
72095: IFTRUE 72147
72097: LD_INT 18
72099: DOUBLE
72100: EQUAL
72101: IFTRUE 72147
72103: LD_INT 19
72105: DOUBLE
72106: EQUAL
72107: IFTRUE 72147
72109: LD_INT 22
72111: DOUBLE
72112: EQUAL
72113: IFTRUE 72147
72115: LD_INT 20
72117: DOUBLE
72118: EQUAL
72119: IFTRUE 72147
72121: LD_INT 21
72123: DOUBLE
72124: EQUAL
72125: IFTRUE 72147
72127: LD_INT 23
72129: DOUBLE
72130: EQUAL
72131: IFTRUE 72147
72133: LD_INT 24
72135: DOUBLE
72136: EQUAL
72137: IFTRUE 72147
72139: LD_INT 25
72141: DOUBLE
72142: EQUAL
72143: IFTRUE 72147
72145: GO 72203
72147: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72148: LD_ADDR_VAR 0 9
72152: PUSH
72153: LD_VAR 0 35
72157: PUSH
72158: LD_VAR 0 36
72162: PUSH
72163: LD_VAR 0 37
72167: PUSH
72168: LD_VAR 0 38
72172: PUSH
72173: LD_VAR 0 39
72177: PUSH
72178: LD_VAR 0 40
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: PUSH
72191: LD_VAR 0 4
72195: PUSH
72196: LD_INT 1
72198: PLUS
72199: ARRAY
72200: ST_TO_ADDR
72201: GO 72568
72203: LD_INT 6
72205: DOUBLE
72206: EQUAL
72207: IFTRUE 72259
72209: LD_INT 7
72211: DOUBLE
72212: EQUAL
72213: IFTRUE 72259
72215: LD_INT 8
72217: DOUBLE
72218: EQUAL
72219: IFTRUE 72259
72221: LD_INT 13
72223: DOUBLE
72224: EQUAL
72225: IFTRUE 72259
72227: LD_INT 12
72229: DOUBLE
72230: EQUAL
72231: IFTRUE 72259
72233: LD_INT 15
72235: DOUBLE
72236: EQUAL
72237: IFTRUE 72259
72239: LD_INT 11
72241: DOUBLE
72242: EQUAL
72243: IFTRUE 72259
72245: LD_INT 14
72247: DOUBLE
72248: EQUAL
72249: IFTRUE 72259
72251: LD_INT 10
72253: DOUBLE
72254: EQUAL
72255: IFTRUE 72259
72257: GO 72315
72259: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72260: LD_ADDR_VAR 0 9
72264: PUSH
72265: LD_VAR 0 41
72269: PUSH
72270: LD_VAR 0 42
72274: PUSH
72275: LD_VAR 0 43
72279: PUSH
72280: LD_VAR 0 44
72284: PUSH
72285: LD_VAR 0 45
72289: PUSH
72290: LD_VAR 0 46
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: PUSH
72303: LD_VAR 0 4
72307: PUSH
72308: LD_INT 1
72310: PLUS
72311: ARRAY
72312: ST_TO_ADDR
72313: GO 72568
72315: LD_INT 36
72317: DOUBLE
72318: EQUAL
72319: IFTRUE 72323
72321: GO 72379
72323: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72324: LD_ADDR_VAR 0 9
72328: PUSH
72329: LD_VAR 0 47
72333: PUSH
72334: LD_VAR 0 48
72338: PUSH
72339: LD_VAR 0 49
72343: PUSH
72344: LD_VAR 0 50
72348: PUSH
72349: LD_VAR 0 51
72353: PUSH
72354: LD_VAR 0 52
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: PUSH
72367: LD_VAR 0 4
72371: PUSH
72372: LD_INT 1
72374: PLUS
72375: ARRAY
72376: ST_TO_ADDR
72377: GO 72568
72379: LD_INT 4
72381: DOUBLE
72382: EQUAL
72383: IFTRUE 72405
72385: LD_INT 5
72387: DOUBLE
72388: EQUAL
72389: IFTRUE 72405
72391: LD_INT 34
72393: DOUBLE
72394: EQUAL
72395: IFTRUE 72405
72397: LD_INT 37
72399: DOUBLE
72400: EQUAL
72401: IFTRUE 72405
72403: GO 72461
72405: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72406: LD_ADDR_VAR 0 9
72410: PUSH
72411: LD_VAR 0 53
72415: PUSH
72416: LD_VAR 0 54
72420: PUSH
72421: LD_VAR 0 55
72425: PUSH
72426: LD_VAR 0 56
72430: PUSH
72431: LD_VAR 0 57
72435: PUSH
72436: LD_VAR 0 58
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: PUSH
72449: LD_VAR 0 4
72453: PUSH
72454: LD_INT 1
72456: PLUS
72457: ARRAY
72458: ST_TO_ADDR
72459: GO 72568
72461: LD_INT 31
72463: DOUBLE
72464: EQUAL
72465: IFTRUE 72511
72467: LD_INT 32
72469: DOUBLE
72470: EQUAL
72471: IFTRUE 72511
72473: LD_INT 33
72475: DOUBLE
72476: EQUAL
72477: IFTRUE 72511
72479: LD_INT 27
72481: DOUBLE
72482: EQUAL
72483: IFTRUE 72511
72485: LD_INT 26
72487: DOUBLE
72488: EQUAL
72489: IFTRUE 72511
72491: LD_INT 28
72493: DOUBLE
72494: EQUAL
72495: IFTRUE 72511
72497: LD_INT 29
72499: DOUBLE
72500: EQUAL
72501: IFTRUE 72511
72503: LD_INT 30
72505: DOUBLE
72506: EQUAL
72507: IFTRUE 72511
72509: GO 72567
72511: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72512: LD_ADDR_VAR 0 9
72516: PUSH
72517: LD_VAR 0 59
72521: PUSH
72522: LD_VAR 0 60
72526: PUSH
72527: LD_VAR 0 61
72531: PUSH
72532: LD_VAR 0 62
72536: PUSH
72537: LD_VAR 0 63
72541: PUSH
72542: LD_VAR 0 64
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: LIST
72553: LIST
72554: PUSH
72555: LD_VAR 0 4
72559: PUSH
72560: LD_INT 1
72562: PLUS
72563: ARRAY
72564: ST_TO_ADDR
72565: GO 72568
72567: POP
// temp_list2 = [ ] ;
72568: LD_ADDR_VAR 0 10
72572: PUSH
72573: EMPTY
72574: ST_TO_ADDR
// for i in temp_list do
72575: LD_ADDR_VAR 0 8
72579: PUSH
72580: LD_VAR 0 9
72584: PUSH
72585: FOR_IN
72586: IFFALSE 72638
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72588: LD_ADDR_VAR 0 10
72592: PUSH
72593: LD_VAR 0 10
72597: PUSH
72598: LD_VAR 0 8
72602: PUSH
72603: LD_INT 1
72605: ARRAY
72606: PUSH
72607: LD_VAR 0 2
72611: PLUS
72612: PUSH
72613: LD_VAR 0 8
72617: PUSH
72618: LD_INT 2
72620: ARRAY
72621: PUSH
72622: LD_VAR 0 3
72626: PLUS
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: EMPTY
72633: LIST
72634: ADD
72635: ST_TO_ADDR
72636: GO 72585
72638: POP
72639: POP
// result = temp_list2 ;
72640: LD_ADDR_VAR 0 7
72644: PUSH
72645: LD_VAR 0 10
72649: ST_TO_ADDR
// end ;
72650: LD_VAR 0 7
72654: RET
// export function EnemyInRange ( unit , dist ) ; begin
72655: LD_INT 0
72657: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72658: LD_ADDR_VAR 0 3
72662: PUSH
72663: LD_VAR 0 1
72667: PPUSH
72668: CALL_OW 255
72672: PPUSH
72673: LD_VAR 0 1
72677: PPUSH
72678: CALL_OW 250
72682: PPUSH
72683: LD_VAR 0 1
72687: PPUSH
72688: CALL_OW 251
72692: PPUSH
72693: LD_VAR 0 2
72697: PPUSH
72698: CALL 46028 0 4
72702: PUSH
72703: LD_INT 4
72705: ARRAY
72706: ST_TO_ADDR
// end ;
72707: LD_VAR 0 3
72711: RET
// export function PlayerSeeMe ( unit ) ; begin
72712: LD_INT 0
72714: PPUSH
// result := See ( your_side , unit ) ;
72715: LD_ADDR_VAR 0 2
72719: PUSH
72720: LD_OWVAR 2
72724: PPUSH
72725: LD_VAR 0 1
72729: PPUSH
72730: CALL_OW 292
72734: ST_TO_ADDR
// end ;
72735: LD_VAR 0 2
72739: RET
// export function ReverseDir ( unit ) ; begin
72740: LD_INT 0
72742: PPUSH
// if not unit then
72743: LD_VAR 0 1
72747: NOT
72748: IFFALSE 72752
// exit ;
72750: GO 72775
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72752: LD_ADDR_VAR 0 2
72756: PUSH
72757: LD_VAR 0 1
72761: PPUSH
72762: CALL_OW 254
72766: PUSH
72767: LD_INT 3
72769: PLUS
72770: PUSH
72771: LD_INT 6
72773: MOD
72774: ST_TO_ADDR
// end ;
72775: LD_VAR 0 2
72779: RET
// export function ReverseArray ( array ) ; var i ; begin
72780: LD_INT 0
72782: PPUSH
72783: PPUSH
// if not array then
72784: LD_VAR 0 1
72788: NOT
72789: IFFALSE 72793
// exit ;
72791: GO 72848
// result := [ ] ;
72793: LD_ADDR_VAR 0 2
72797: PUSH
72798: EMPTY
72799: ST_TO_ADDR
// for i := array downto 1 do
72800: LD_ADDR_VAR 0 3
72804: PUSH
72805: DOUBLE
72806: LD_VAR 0 1
72810: INC
72811: ST_TO_ADDR
72812: LD_INT 1
72814: PUSH
72815: FOR_DOWNTO
72816: IFFALSE 72846
// result := Join ( result , array [ i ] ) ;
72818: LD_ADDR_VAR 0 2
72822: PUSH
72823: LD_VAR 0 2
72827: PPUSH
72828: LD_VAR 0 1
72832: PUSH
72833: LD_VAR 0 3
72837: ARRAY
72838: PPUSH
72839: CALL 77491 0 2
72843: ST_TO_ADDR
72844: GO 72815
72846: POP
72847: POP
// end ;
72848: LD_VAR 0 2
72852: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72853: LD_INT 0
72855: PPUSH
72856: PPUSH
72857: PPUSH
72858: PPUSH
72859: PPUSH
72860: PPUSH
// if not unit or not hexes then
72861: LD_VAR 0 1
72865: NOT
72866: PUSH
72867: LD_VAR 0 2
72871: NOT
72872: OR
72873: IFFALSE 72877
// exit ;
72875: GO 73000
// dist := 9999 ;
72877: LD_ADDR_VAR 0 5
72881: PUSH
72882: LD_INT 9999
72884: ST_TO_ADDR
// for i = 1 to hexes do
72885: LD_ADDR_VAR 0 4
72889: PUSH
72890: DOUBLE
72891: LD_INT 1
72893: DEC
72894: ST_TO_ADDR
72895: LD_VAR 0 2
72899: PUSH
72900: FOR_TO
72901: IFFALSE 72988
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72903: LD_ADDR_VAR 0 6
72907: PUSH
72908: LD_VAR 0 1
72912: PPUSH
72913: LD_VAR 0 2
72917: PUSH
72918: LD_VAR 0 4
72922: ARRAY
72923: PUSH
72924: LD_INT 1
72926: ARRAY
72927: PPUSH
72928: LD_VAR 0 2
72932: PUSH
72933: LD_VAR 0 4
72937: ARRAY
72938: PUSH
72939: LD_INT 2
72941: ARRAY
72942: PPUSH
72943: CALL_OW 297
72947: ST_TO_ADDR
// if tdist < dist then
72948: LD_VAR 0 6
72952: PUSH
72953: LD_VAR 0 5
72957: LESS
72958: IFFALSE 72986
// begin hex := hexes [ i ] ;
72960: LD_ADDR_VAR 0 8
72964: PUSH
72965: LD_VAR 0 2
72969: PUSH
72970: LD_VAR 0 4
72974: ARRAY
72975: ST_TO_ADDR
// dist := tdist ;
72976: LD_ADDR_VAR 0 5
72980: PUSH
72981: LD_VAR 0 6
72985: ST_TO_ADDR
// end ; end ;
72986: GO 72900
72988: POP
72989: POP
// result := hex ;
72990: LD_ADDR_VAR 0 3
72994: PUSH
72995: LD_VAR 0 8
72999: ST_TO_ADDR
// end ;
73000: LD_VAR 0 3
73004: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73005: LD_INT 0
73007: PPUSH
73008: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73009: LD_VAR 0 1
73013: NOT
73014: PUSH
73015: LD_VAR 0 1
73019: PUSH
73020: LD_INT 21
73022: PUSH
73023: LD_INT 2
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 23
73032: PUSH
73033: LD_INT 2
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PPUSH
73044: CALL_OW 69
73048: IN
73049: NOT
73050: OR
73051: IFFALSE 73055
// exit ;
73053: GO 73102
// for i = 1 to 3 do
73055: LD_ADDR_VAR 0 3
73059: PUSH
73060: DOUBLE
73061: LD_INT 1
73063: DEC
73064: ST_TO_ADDR
73065: LD_INT 3
73067: PUSH
73068: FOR_TO
73069: IFFALSE 73100
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73071: LD_VAR 0 1
73075: PPUSH
73076: CALL_OW 250
73080: PPUSH
73081: LD_VAR 0 1
73085: PPUSH
73086: CALL_OW 251
73090: PPUSH
73091: LD_INT 1
73093: PPUSH
73094: CALL_OW 453
73098: GO 73068
73100: POP
73101: POP
// end ;
73102: LD_VAR 0 2
73106: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73107: LD_INT 0
73109: PPUSH
73110: PPUSH
73111: PPUSH
73112: PPUSH
73113: PPUSH
73114: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73115: LD_VAR 0 1
73119: NOT
73120: PUSH
73121: LD_VAR 0 2
73125: NOT
73126: OR
73127: PUSH
73128: LD_VAR 0 1
73132: PPUSH
73133: CALL_OW 314
73137: OR
73138: IFFALSE 73142
// exit ;
73140: GO 73609
// if GetLives ( i ) < 250 then
73142: LD_VAR 0 4
73146: PPUSH
73147: CALL_OW 256
73151: PUSH
73152: LD_INT 250
73154: LESS
73155: IFFALSE 73168
// begin ComAutodestruct ( i ) ;
73157: LD_VAR 0 4
73161: PPUSH
73162: CALL 73005 0 1
// exit ;
73166: GO 73609
// end ; x := GetX ( enemy_unit ) ;
73168: LD_ADDR_VAR 0 7
73172: PUSH
73173: LD_VAR 0 2
73177: PPUSH
73178: CALL_OW 250
73182: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73183: LD_ADDR_VAR 0 8
73187: PUSH
73188: LD_VAR 0 2
73192: PPUSH
73193: CALL_OW 251
73197: ST_TO_ADDR
// if not x or not y then
73198: LD_VAR 0 7
73202: NOT
73203: PUSH
73204: LD_VAR 0 8
73208: NOT
73209: OR
73210: IFFALSE 73214
// exit ;
73212: GO 73609
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73214: LD_ADDR_VAR 0 6
73218: PUSH
73219: LD_VAR 0 7
73223: PPUSH
73224: LD_INT 0
73226: PPUSH
73227: LD_INT 4
73229: PPUSH
73230: CALL_OW 272
73234: PUSH
73235: LD_VAR 0 8
73239: PPUSH
73240: LD_INT 0
73242: PPUSH
73243: LD_INT 4
73245: PPUSH
73246: CALL_OW 273
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: LD_VAR 0 7
73259: PPUSH
73260: LD_INT 1
73262: PPUSH
73263: LD_INT 4
73265: PPUSH
73266: CALL_OW 272
73270: PUSH
73271: LD_VAR 0 8
73275: PPUSH
73276: LD_INT 1
73278: PPUSH
73279: LD_INT 4
73281: PPUSH
73282: CALL_OW 273
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_VAR 0 7
73295: PPUSH
73296: LD_INT 2
73298: PPUSH
73299: LD_INT 4
73301: PPUSH
73302: CALL_OW 272
73306: PUSH
73307: LD_VAR 0 8
73311: PPUSH
73312: LD_INT 2
73314: PPUSH
73315: LD_INT 4
73317: PPUSH
73318: CALL_OW 273
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: PUSH
73327: LD_VAR 0 7
73331: PPUSH
73332: LD_INT 3
73334: PPUSH
73335: LD_INT 4
73337: PPUSH
73338: CALL_OW 272
73342: PUSH
73343: LD_VAR 0 8
73347: PPUSH
73348: LD_INT 3
73350: PPUSH
73351: LD_INT 4
73353: PPUSH
73354: CALL_OW 273
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: PUSH
73363: LD_VAR 0 7
73367: PPUSH
73368: LD_INT 4
73370: PPUSH
73371: LD_INT 4
73373: PPUSH
73374: CALL_OW 272
73378: PUSH
73379: LD_VAR 0 8
73383: PPUSH
73384: LD_INT 4
73386: PPUSH
73387: LD_INT 4
73389: PPUSH
73390: CALL_OW 273
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_VAR 0 7
73403: PPUSH
73404: LD_INT 5
73406: PPUSH
73407: LD_INT 4
73409: PPUSH
73410: CALL_OW 272
73414: PUSH
73415: LD_VAR 0 8
73419: PPUSH
73420: LD_INT 5
73422: PPUSH
73423: LD_INT 4
73425: PPUSH
73426: CALL_OW 273
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: ST_TO_ADDR
// for i = tmp downto 1 do
73443: LD_ADDR_VAR 0 4
73447: PUSH
73448: DOUBLE
73449: LD_VAR 0 6
73453: INC
73454: ST_TO_ADDR
73455: LD_INT 1
73457: PUSH
73458: FOR_DOWNTO
73459: IFFALSE 73560
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73461: LD_VAR 0 6
73465: PUSH
73466: LD_VAR 0 4
73470: ARRAY
73471: PUSH
73472: LD_INT 1
73474: ARRAY
73475: PPUSH
73476: LD_VAR 0 6
73480: PUSH
73481: LD_VAR 0 4
73485: ARRAY
73486: PUSH
73487: LD_INT 2
73489: ARRAY
73490: PPUSH
73491: CALL_OW 488
73495: NOT
73496: PUSH
73497: LD_VAR 0 6
73501: PUSH
73502: LD_VAR 0 4
73506: ARRAY
73507: PUSH
73508: LD_INT 1
73510: ARRAY
73511: PPUSH
73512: LD_VAR 0 6
73516: PUSH
73517: LD_VAR 0 4
73521: ARRAY
73522: PUSH
73523: LD_INT 2
73525: ARRAY
73526: PPUSH
73527: CALL_OW 428
73531: PUSH
73532: LD_INT 0
73534: NONEQUAL
73535: OR
73536: IFFALSE 73558
// tmp := Delete ( tmp , i ) ;
73538: LD_ADDR_VAR 0 6
73542: PUSH
73543: LD_VAR 0 6
73547: PPUSH
73548: LD_VAR 0 4
73552: PPUSH
73553: CALL_OW 3
73557: ST_TO_ADDR
73558: GO 73458
73560: POP
73561: POP
// j := GetClosestHex ( unit , tmp ) ;
73562: LD_ADDR_VAR 0 5
73566: PUSH
73567: LD_VAR 0 1
73571: PPUSH
73572: LD_VAR 0 6
73576: PPUSH
73577: CALL 72853 0 2
73581: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73582: LD_VAR 0 1
73586: PPUSH
73587: LD_VAR 0 5
73591: PUSH
73592: LD_INT 1
73594: ARRAY
73595: PPUSH
73596: LD_VAR 0 5
73600: PUSH
73601: LD_INT 2
73603: ARRAY
73604: PPUSH
73605: CALL_OW 111
// end ;
73609: LD_VAR 0 3
73613: RET
// export function PrepareApemanSoldier ( ) ; begin
73614: LD_INT 0
73616: PPUSH
// uc_nation := 0 ;
73617: LD_ADDR_OWVAR 21
73621: PUSH
73622: LD_INT 0
73624: ST_TO_ADDR
// hc_sex := sex_male ;
73625: LD_ADDR_OWVAR 27
73629: PUSH
73630: LD_INT 1
73632: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73633: LD_ADDR_OWVAR 28
73637: PUSH
73638: LD_INT 15
73640: ST_TO_ADDR
// hc_gallery :=  ;
73641: LD_ADDR_OWVAR 33
73645: PUSH
73646: LD_STRING 
73648: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73649: LD_ADDR_OWVAR 31
73653: PUSH
73654: LD_INT 0
73656: PPUSH
73657: LD_INT 3
73659: PPUSH
73660: CALL_OW 12
73664: PUSH
73665: LD_INT 0
73667: PPUSH
73668: LD_INT 3
73670: PPUSH
73671: CALL_OW 12
73675: PUSH
73676: LD_INT 0
73678: PUSH
73679: LD_INT 0
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: ST_TO_ADDR
// end ;
73688: LD_VAR 0 1
73692: RET
// export function PrepareApemanEngineer ( ) ; begin
73693: LD_INT 0
73695: PPUSH
// uc_nation := 0 ;
73696: LD_ADDR_OWVAR 21
73700: PUSH
73701: LD_INT 0
73703: ST_TO_ADDR
// hc_sex := sex_male ;
73704: LD_ADDR_OWVAR 27
73708: PUSH
73709: LD_INT 1
73711: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73712: LD_ADDR_OWVAR 28
73716: PUSH
73717: LD_INT 16
73719: ST_TO_ADDR
// hc_gallery :=  ;
73720: LD_ADDR_OWVAR 33
73724: PUSH
73725: LD_STRING 
73727: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73728: LD_ADDR_OWVAR 31
73732: PUSH
73733: LD_INT 0
73735: PPUSH
73736: LD_INT 3
73738: PPUSH
73739: CALL_OW 12
73743: PUSH
73744: LD_INT 0
73746: PPUSH
73747: LD_INT 3
73749: PPUSH
73750: CALL_OW 12
73754: PUSH
73755: LD_INT 0
73757: PUSH
73758: LD_INT 0
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: ST_TO_ADDR
// end ;
73767: LD_VAR 0 1
73771: RET
// export function PrepareApeman ( agressivity ) ; begin
73772: LD_INT 0
73774: PPUSH
// uc_side := 0 ;
73775: LD_ADDR_OWVAR 20
73779: PUSH
73780: LD_INT 0
73782: ST_TO_ADDR
// uc_nation := 0 ;
73783: LD_ADDR_OWVAR 21
73787: PUSH
73788: LD_INT 0
73790: ST_TO_ADDR
// hc_sex := sex_male ;
73791: LD_ADDR_OWVAR 27
73795: PUSH
73796: LD_INT 1
73798: ST_TO_ADDR
// hc_class := class_apeman ;
73799: LD_ADDR_OWVAR 28
73803: PUSH
73804: LD_INT 12
73806: ST_TO_ADDR
// hc_gallery :=  ;
73807: LD_ADDR_OWVAR 33
73811: PUSH
73812: LD_STRING 
73814: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73815: LD_ADDR_OWVAR 35
73819: PUSH
73820: LD_VAR 0 1
73824: NEG
73825: PPUSH
73826: LD_VAR 0 1
73830: PPUSH
73831: CALL_OW 12
73835: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73836: LD_ADDR_OWVAR 31
73840: PUSH
73841: LD_INT 0
73843: PPUSH
73844: LD_INT 3
73846: PPUSH
73847: CALL_OW 12
73851: PUSH
73852: LD_INT 0
73854: PPUSH
73855: LD_INT 3
73857: PPUSH
73858: CALL_OW 12
73862: PUSH
73863: LD_INT 0
73865: PUSH
73866: LD_INT 0
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: ST_TO_ADDR
// end ;
73875: LD_VAR 0 2
73879: RET
// export function PrepareTiger ( agressivity ) ; begin
73880: LD_INT 0
73882: PPUSH
// uc_side := 0 ;
73883: LD_ADDR_OWVAR 20
73887: PUSH
73888: LD_INT 0
73890: ST_TO_ADDR
// uc_nation := 0 ;
73891: LD_ADDR_OWVAR 21
73895: PUSH
73896: LD_INT 0
73898: ST_TO_ADDR
// hc_class := class_tiger ;
73899: LD_ADDR_OWVAR 28
73903: PUSH
73904: LD_INT 14
73906: ST_TO_ADDR
// hc_gallery :=  ;
73907: LD_ADDR_OWVAR 33
73911: PUSH
73912: LD_STRING 
73914: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73915: LD_ADDR_OWVAR 35
73919: PUSH
73920: LD_VAR 0 1
73924: NEG
73925: PPUSH
73926: LD_VAR 0 1
73930: PPUSH
73931: CALL_OW 12
73935: ST_TO_ADDR
// end ;
73936: LD_VAR 0 2
73940: RET
// export function PrepareEnchidna ( ) ; begin
73941: LD_INT 0
73943: PPUSH
// uc_side := 0 ;
73944: LD_ADDR_OWVAR 20
73948: PUSH
73949: LD_INT 0
73951: ST_TO_ADDR
// uc_nation := 0 ;
73952: LD_ADDR_OWVAR 21
73956: PUSH
73957: LD_INT 0
73959: ST_TO_ADDR
// hc_class := class_baggie ;
73960: LD_ADDR_OWVAR 28
73964: PUSH
73965: LD_INT 13
73967: ST_TO_ADDR
// hc_gallery :=  ;
73968: LD_ADDR_OWVAR 33
73972: PUSH
73973: LD_STRING 
73975: ST_TO_ADDR
// end ;
73976: LD_VAR 0 1
73980: RET
// export function PrepareFrog ( ) ; begin
73981: LD_INT 0
73983: PPUSH
// uc_side := 0 ;
73984: LD_ADDR_OWVAR 20
73988: PUSH
73989: LD_INT 0
73991: ST_TO_ADDR
// uc_nation := 0 ;
73992: LD_ADDR_OWVAR 21
73996: PUSH
73997: LD_INT 0
73999: ST_TO_ADDR
// hc_class := class_frog ;
74000: LD_ADDR_OWVAR 28
74004: PUSH
74005: LD_INT 19
74007: ST_TO_ADDR
// hc_gallery :=  ;
74008: LD_ADDR_OWVAR 33
74012: PUSH
74013: LD_STRING 
74015: ST_TO_ADDR
// end ;
74016: LD_VAR 0 1
74020: RET
// export function PrepareFish ( ) ; begin
74021: LD_INT 0
74023: PPUSH
// uc_side := 0 ;
74024: LD_ADDR_OWVAR 20
74028: PUSH
74029: LD_INT 0
74031: ST_TO_ADDR
// uc_nation := 0 ;
74032: LD_ADDR_OWVAR 21
74036: PUSH
74037: LD_INT 0
74039: ST_TO_ADDR
// hc_class := class_fish ;
74040: LD_ADDR_OWVAR 28
74044: PUSH
74045: LD_INT 20
74047: ST_TO_ADDR
// hc_gallery :=  ;
74048: LD_ADDR_OWVAR 33
74052: PUSH
74053: LD_STRING 
74055: ST_TO_ADDR
// end ;
74056: LD_VAR 0 1
74060: RET
// export function PrepareBird ( ) ; begin
74061: LD_INT 0
74063: PPUSH
// uc_side := 0 ;
74064: LD_ADDR_OWVAR 20
74068: PUSH
74069: LD_INT 0
74071: ST_TO_ADDR
// uc_nation := 0 ;
74072: LD_ADDR_OWVAR 21
74076: PUSH
74077: LD_INT 0
74079: ST_TO_ADDR
// hc_class := class_phororhacos ;
74080: LD_ADDR_OWVAR 28
74084: PUSH
74085: LD_INT 18
74087: ST_TO_ADDR
// hc_gallery :=  ;
74088: LD_ADDR_OWVAR 33
74092: PUSH
74093: LD_STRING 
74095: ST_TO_ADDR
// end ;
74096: LD_VAR 0 1
74100: RET
// export function PrepareHorse ( ) ; begin
74101: LD_INT 0
74103: PPUSH
// uc_side := 0 ;
74104: LD_ADDR_OWVAR 20
74108: PUSH
74109: LD_INT 0
74111: ST_TO_ADDR
// uc_nation := 0 ;
74112: LD_ADDR_OWVAR 21
74116: PUSH
74117: LD_INT 0
74119: ST_TO_ADDR
// hc_class := class_horse ;
74120: LD_ADDR_OWVAR 28
74124: PUSH
74125: LD_INT 21
74127: ST_TO_ADDR
// hc_gallery :=  ;
74128: LD_ADDR_OWVAR 33
74132: PUSH
74133: LD_STRING 
74135: ST_TO_ADDR
// end ;
74136: LD_VAR 0 1
74140: RET
// export function PrepareMastodont ( ) ; begin
74141: LD_INT 0
74143: PPUSH
// uc_side := 0 ;
74144: LD_ADDR_OWVAR 20
74148: PUSH
74149: LD_INT 0
74151: ST_TO_ADDR
// uc_nation := 0 ;
74152: LD_ADDR_OWVAR 21
74156: PUSH
74157: LD_INT 0
74159: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74160: LD_ADDR_OWVAR 37
74164: PUSH
74165: LD_INT 31
74167: ST_TO_ADDR
// vc_control := control_rider ;
74168: LD_ADDR_OWVAR 38
74172: PUSH
74173: LD_INT 4
74175: ST_TO_ADDR
// end ;
74176: LD_VAR 0 1
74180: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74181: LD_INT 0
74183: PPUSH
74184: PPUSH
74185: PPUSH
// uc_side = 0 ;
74186: LD_ADDR_OWVAR 20
74190: PUSH
74191: LD_INT 0
74193: ST_TO_ADDR
// uc_nation = 0 ;
74194: LD_ADDR_OWVAR 21
74198: PUSH
74199: LD_INT 0
74201: ST_TO_ADDR
// InitHc_All ( ) ;
74202: CALL_OW 584
// InitVc ;
74206: CALL_OW 20
// if mastodonts then
74210: LD_VAR 0 6
74214: IFFALSE 74281
// for i = 1 to mastodonts do
74216: LD_ADDR_VAR 0 11
74220: PUSH
74221: DOUBLE
74222: LD_INT 1
74224: DEC
74225: ST_TO_ADDR
74226: LD_VAR 0 6
74230: PUSH
74231: FOR_TO
74232: IFFALSE 74279
// begin vc_chassis := 31 ;
74234: LD_ADDR_OWVAR 37
74238: PUSH
74239: LD_INT 31
74241: ST_TO_ADDR
// vc_control := control_rider ;
74242: LD_ADDR_OWVAR 38
74246: PUSH
74247: LD_INT 4
74249: ST_TO_ADDR
// animal := CreateVehicle ;
74250: LD_ADDR_VAR 0 12
74254: PUSH
74255: CALL_OW 45
74259: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74260: LD_VAR 0 12
74264: PPUSH
74265: LD_VAR 0 8
74269: PPUSH
74270: LD_INT 0
74272: PPUSH
74273: CALL 76409 0 3
// end ;
74277: GO 74231
74279: POP
74280: POP
// if horses then
74281: LD_VAR 0 5
74285: IFFALSE 74352
// for i = 1 to horses do
74287: LD_ADDR_VAR 0 11
74291: PUSH
74292: DOUBLE
74293: LD_INT 1
74295: DEC
74296: ST_TO_ADDR
74297: LD_VAR 0 5
74301: PUSH
74302: FOR_TO
74303: IFFALSE 74350
// begin hc_class := 21 ;
74305: LD_ADDR_OWVAR 28
74309: PUSH
74310: LD_INT 21
74312: ST_TO_ADDR
// hc_gallery :=  ;
74313: LD_ADDR_OWVAR 33
74317: PUSH
74318: LD_STRING 
74320: ST_TO_ADDR
// animal := CreateHuman ;
74321: LD_ADDR_VAR 0 12
74325: PUSH
74326: CALL_OW 44
74330: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74331: LD_VAR 0 12
74335: PPUSH
74336: LD_VAR 0 8
74340: PPUSH
74341: LD_INT 0
74343: PPUSH
74344: CALL 76409 0 3
// end ;
74348: GO 74302
74350: POP
74351: POP
// if birds then
74352: LD_VAR 0 1
74356: IFFALSE 74423
// for i = 1 to birds do
74358: LD_ADDR_VAR 0 11
74362: PUSH
74363: DOUBLE
74364: LD_INT 1
74366: DEC
74367: ST_TO_ADDR
74368: LD_VAR 0 1
74372: PUSH
74373: FOR_TO
74374: IFFALSE 74421
// begin hc_class := 18 ;
74376: LD_ADDR_OWVAR 28
74380: PUSH
74381: LD_INT 18
74383: ST_TO_ADDR
// hc_gallery =  ;
74384: LD_ADDR_OWVAR 33
74388: PUSH
74389: LD_STRING 
74391: ST_TO_ADDR
// animal := CreateHuman ;
74392: LD_ADDR_VAR 0 12
74396: PUSH
74397: CALL_OW 44
74401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74402: LD_VAR 0 12
74406: PPUSH
74407: LD_VAR 0 8
74411: PPUSH
74412: LD_INT 0
74414: PPUSH
74415: CALL 76409 0 3
// end ;
74419: GO 74373
74421: POP
74422: POP
// if tigers then
74423: LD_VAR 0 2
74427: IFFALSE 74511
// for i = 1 to tigers do
74429: LD_ADDR_VAR 0 11
74433: PUSH
74434: DOUBLE
74435: LD_INT 1
74437: DEC
74438: ST_TO_ADDR
74439: LD_VAR 0 2
74443: PUSH
74444: FOR_TO
74445: IFFALSE 74509
// begin hc_class = class_tiger ;
74447: LD_ADDR_OWVAR 28
74451: PUSH
74452: LD_INT 14
74454: ST_TO_ADDR
// hc_gallery =  ;
74455: LD_ADDR_OWVAR 33
74459: PUSH
74460: LD_STRING 
74462: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74463: LD_ADDR_OWVAR 35
74467: PUSH
74468: LD_INT 7
74470: NEG
74471: PPUSH
74472: LD_INT 7
74474: PPUSH
74475: CALL_OW 12
74479: ST_TO_ADDR
// animal := CreateHuman ;
74480: LD_ADDR_VAR 0 12
74484: PUSH
74485: CALL_OW 44
74489: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74490: LD_VAR 0 12
74494: PPUSH
74495: LD_VAR 0 8
74499: PPUSH
74500: LD_INT 0
74502: PPUSH
74503: CALL 76409 0 3
// end ;
74507: GO 74444
74509: POP
74510: POP
// if apemans then
74511: LD_VAR 0 3
74515: IFFALSE 74638
// for i = 1 to apemans do
74517: LD_ADDR_VAR 0 11
74521: PUSH
74522: DOUBLE
74523: LD_INT 1
74525: DEC
74526: ST_TO_ADDR
74527: LD_VAR 0 3
74531: PUSH
74532: FOR_TO
74533: IFFALSE 74636
// begin hc_class = class_apeman ;
74535: LD_ADDR_OWVAR 28
74539: PUSH
74540: LD_INT 12
74542: ST_TO_ADDR
// hc_gallery =  ;
74543: LD_ADDR_OWVAR 33
74547: PUSH
74548: LD_STRING 
74550: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74551: LD_ADDR_OWVAR 35
74555: PUSH
74556: LD_INT 2
74558: NEG
74559: PPUSH
74560: LD_INT 2
74562: PPUSH
74563: CALL_OW 12
74567: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74568: LD_ADDR_OWVAR 31
74572: PUSH
74573: LD_INT 1
74575: PPUSH
74576: LD_INT 3
74578: PPUSH
74579: CALL_OW 12
74583: PUSH
74584: LD_INT 1
74586: PPUSH
74587: LD_INT 3
74589: PPUSH
74590: CALL_OW 12
74594: PUSH
74595: LD_INT 0
74597: PUSH
74598: LD_INT 0
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: LIST
74605: LIST
74606: ST_TO_ADDR
// animal := CreateHuman ;
74607: LD_ADDR_VAR 0 12
74611: PUSH
74612: CALL_OW 44
74616: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74617: LD_VAR 0 12
74621: PPUSH
74622: LD_VAR 0 8
74626: PPUSH
74627: LD_INT 0
74629: PPUSH
74630: CALL 76409 0 3
// end ;
74634: GO 74532
74636: POP
74637: POP
// if enchidnas then
74638: LD_VAR 0 4
74642: IFFALSE 74709
// for i = 1 to enchidnas do
74644: LD_ADDR_VAR 0 11
74648: PUSH
74649: DOUBLE
74650: LD_INT 1
74652: DEC
74653: ST_TO_ADDR
74654: LD_VAR 0 4
74658: PUSH
74659: FOR_TO
74660: IFFALSE 74707
// begin hc_class = 13 ;
74662: LD_ADDR_OWVAR 28
74666: PUSH
74667: LD_INT 13
74669: ST_TO_ADDR
// hc_gallery =  ;
74670: LD_ADDR_OWVAR 33
74674: PUSH
74675: LD_STRING 
74677: ST_TO_ADDR
// animal := CreateHuman ;
74678: LD_ADDR_VAR 0 12
74682: PUSH
74683: CALL_OW 44
74687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74688: LD_VAR 0 12
74692: PPUSH
74693: LD_VAR 0 8
74697: PPUSH
74698: LD_INT 0
74700: PPUSH
74701: CALL 76409 0 3
// end ;
74705: GO 74659
74707: POP
74708: POP
// if fishes then
74709: LD_VAR 0 7
74713: IFFALSE 74780
// for i = 1 to fishes do
74715: LD_ADDR_VAR 0 11
74719: PUSH
74720: DOUBLE
74721: LD_INT 1
74723: DEC
74724: ST_TO_ADDR
74725: LD_VAR 0 7
74729: PUSH
74730: FOR_TO
74731: IFFALSE 74778
// begin hc_class = 20 ;
74733: LD_ADDR_OWVAR 28
74737: PUSH
74738: LD_INT 20
74740: ST_TO_ADDR
// hc_gallery =  ;
74741: LD_ADDR_OWVAR 33
74745: PUSH
74746: LD_STRING 
74748: ST_TO_ADDR
// animal := CreateHuman ;
74749: LD_ADDR_VAR 0 12
74753: PUSH
74754: CALL_OW 44
74758: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74759: LD_VAR 0 12
74763: PPUSH
74764: LD_VAR 0 9
74768: PPUSH
74769: LD_INT 0
74771: PPUSH
74772: CALL 76409 0 3
// end ;
74776: GO 74730
74778: POP
74779: POP
// end ;
74780: LD_VAR 0 10
74784: RET
// export function WantHeal ( sci , unit ) ; begin
74785: LD_INT 0
74787: PPUSH
// if GetTaskList ( sci ) > 0 then
74788: LD_VAR 0 1
74792: PPUSH
74793: CALL_OW 437
74797: PUSH
74798: LD_INT 0
74800: GREATER
74801: IFFALSE 74871
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74803: LD_VAR 0 1
74807: PPUSH
74808: CALL_OW 437
74812: PUSH
74813: LD_INT 1
74815: ARRAY
74816: PUSH
74817: LD_INT 1
74819: ARRAY
74820: PUSH
74821: LD_STRING l
74823: EQUAL
74824: PUSH
74825: LD_VAR 0 1
74829: PPUSH
74830: CALL_OW 437
74834: PUSH
74835: LD_INT 1
74837: ARRAY
74838: PUSH
74839: LD_INT 4
74841: ARRAY
74842: PUSH
74843: LD_VAR 0 2
74847: EQUAL
74848: AND
74849: IFFALSE 74861
// result := true else
74851: LD_ADDR_VAR 0 3
74855: PUSH
74856: LD_INT 1
74858: ST_TO_ADDR
74859: GO 74869
// result := false ;
74861: LD_ADDR_VAR 0 3
74865: PUSH
74866: LD_INT 0
74868: ST_TO_ADDR
// end else
74869: GO 74879
// result := false ;
74871: LD_ADDR_VAR 0 3
74875: PUSH
74876: LD_INT 0
74878: ST_TO_ADDR
// end ;
74879: LD_VAR 0 3
74883: RET
// export function HealTarget ( sci ) ; begin
74884: LD_INT 0
74886: PPUSH
// if not sci then
74887: LD_VAR 0 1
74891: NOT
74892: IFFALSE 74896
// exit ;
74894: GO 74961
// result := 0 ;
74896: LD_ADDR_VAR 0 2
74900: PUSH
74901: LD_INT 0
74903: ST_TO_ADDR
// if GetTaskList ( sci ) then
74904: LD_VAR 0 1
74908: PPUSH
74909: CALL_OW 437
74913: IFFALSE 74961
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74915: LD_VAR 0 1
74919: PPUSH
74920: CALL_OW 437
74924: PUSH
74925: LD_INT 1
74927: ARRAY
74928: PUSH
74929: LD_INT 1
74931: ARRAY
74932: PUSH
74933: LD_STRING l
74935: EQUAL
74936: IFFALSE 74961
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74938: LD_ADDR_VAR 0 2
74942: PUSH
74943: LD_VAR 0 1
74947: PPUSH
74948: CALL_OW 437
74952: PUSH
74953: LD_INT 1
74955: ARRAY
74956: PUSH
74957: LD_INT 4
74959: ARRAY
74960: ST_TO_ADDR
// end ;
74961: LD_VAR 0 2
74965: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74966: LD_INT 0
74968: PPUSH
74969: PPUSH
74970: PPUSH
74971: PPUSH
// if not base_units then
74972: LD_VAR 0 1
74976: NOT
74977: IFFALSE 74981
// exit ;
74979: GO 75068
// result := false ;
74981: LD_ADDR_VAR 0 2
74985: PUSH
74986: LD_INT 0
74988: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74989: LD_ADDR_VAR 0 5
74993: PUSH
74994: LD_VAR 0 1
74998: PPUSH
74999: LD_INT 21
75001: PUSH
75002: LD_INT 3
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: PPUSH
75009: CALL_OW 72
75013: ST_TO_ADDR
// if not tmp then
75014: LD_VAR 0 5
75018: NOT
75019: IFFALSE 75023
// exit ;
75021: GO 75068
// for i in tmp do
75023: LD_ADDR_VAR 0 3
75027: PUSH
75028: LD_VAR 0 5
75032: PUSH
75033: FOR_IN
75034: IFFALSE 75066
// begin result := EnemyInRange ( i , 22 ) ;
75036: LD_ADDR_VAR 0 2
75040: PUSH
75041: LD_VAR 0 3
75045: PPUSH
75046: LD_INT 22
75048: PPUSH
75049: CALL 72655 0 2
75053: ST_TO_ADDR
// if result then
75054: LD_VAR 0 2
75058: IFFALSE 75064
// exit ;
75060: POP
75061: POP
75062: GO 75068
// end ;
75064: GO 75033
75066: POP
75067: POP
// end ;
75068: LD_VAR 0 2
75072: RET
// export function FilterByTag ( units , tag ) ; begin
75073: LD_INT 0
75075: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75076: LD_ADDR_VAR 0 3
75080: PUSH
75081: LD_VAR 0 1
75085: PPUSH
75086: LD_INT 120
75088: PUSH
75089: LD_VAR 0 2
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PPUSH
75098: CALL_OW 72
75102: ST_TO_ADDR
// end ;
75103: LD_VAR 0 3
75107: RET
// export function IsDriver ( un ) ; begin
75108: LD_INT 0
75110: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75111: LD_ADDR_VAR 0 2
75115: PUSH
75116: LD_VAR 0 1
75120: PUSH
75121: LD_INT 55
75123: PUSH
75124: EMPTY
75125: LIST
75126: PPUSH
75127: CALL_OW 69
75131: IN
75132: ST_TO_ADDR
// end ;
75133: LD_VAR 0 2
75137: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75138: LD_INT 0
75140: PPUSH
75141: PPUSH
// list := [ ] ;
75142: LD_ADDR_VAR 0 5
75146: PUSH
75147: EMPTY
75148: ST_TO_ADDR
// case d of 0 :
75149: LD_VAR 0 3
75153: PUSH
75154: LD_INT 0
75156: DOUBLE
75157: EQUAL
75158: IFTRUE 75162
75160: GO 75295
75162: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75163: LD_ADDR_VAR 0 5
75167: PUSH
75168: LD_VAR 0 1
75172: PUSH
75173: LD_INT 4
75175: MINUS
75176: PUSH
75177: LD_VAR 0 2
75181: PUSH
75182: LD_INT 4
75184: MINUS
75185: PUSH
75186: LD_INT 2
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: LIST
75193: PUSH
75194: LD_VAR 0 1
75198: PUSH
75199: LD_INT 3
75201: MINUS
75202: PUSH
75203: LD_VAR 0 2
75207: PUSH
75208: LD_INT 1
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: LIST
75215: PUSH
75216: LD_VAR 0 1
75220: PUSH
75221: LD_INT 4
75223: PLUS
75224: PUSH
75225: LD_VAR 0 2
75229: PUSH
75230: LD_INT 4
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: LIST
75237: PUSH
75238: LD_VAR 0 1
75242: PUSH
75243: LD_INT 3
75245: PLUS
75246: PUSH
75247: LD_VAR 0 2
75251: PUSH
75252: LD_INT 3
75254: PLUS
75255: PUSH
75256: LD_INT 5
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: LIST
75263: PUSH
75264: LD_VAR 0 1
75268: PUSH
75269: LD_VAR 0 2
75273: PUSH
75274: LD_INT 4
75276: PLUS
75277: PUSH
75278: LD_INT 0
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: LIST
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: LIST
75290: LIST
75291: LIST
75292: ST_TO_ADDR
// end ; 1 :
75293: GO 75993
75295: LD_INT 1
75297: DOUBLE
75298: EQUAL
75299: IFTRUE 75303
75301: GO 75436
75303: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75304: LD_ADDR_VAR 0 5
75308: PUSH
75309: LD_VAR 0 1
75313: PUSH
75314: LD_VAR 0 2
75318: PUSH
75319: LD_INT 4
75321: MINUS
75322: PUSH
75323: LD_INT 3
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: LIST
75330: PUSH
75331: LD_VAR 0 1
75335: PUSH
75336: LD_INT 3
75338: MINUS
75339: PUSH
75340: LD_VAR 0 2
75344: PUSH
75345: LD_INT 3
75347: MINUS
75348: PUSH
75349: LD_INT 2
75351: PUSH
75352: EMPTY
75353: LIST
75354: LIST
75355: LIST
75356: PUSH
75357: LD_VAR 0 1
75361: PUSH
75362: LD_INT 4
75364: MINUS
75365: PUSH
75366: LD_VAR 0 2
75370: PUSH
75371: LD_INT 1
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: LIST
75378: PUSH
75379: LD_VAR 0 1
75383: PUSH
75384: LD_VAR 0 2
75388: PUSH
75389: LD_INT 3
75391: PLUS
75392: PUSH
75393: LD_INT 0
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: LIST
75400: PUSH
75401: LD_VAR 0 1
75405: PUSH
75406: LD_INT 4
75408: PLUS
75409: PUSH
75410: LD_VAR 0 2
75414: PUSH
75415: LD_INT 4
75417: PLUS
75418: PUSH
75419: LD_INT 5
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: LIST
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: ST_TO_ADDR
// end ; 2 :
75434: GO 75993
75436: LD_INT 2
75438: DOUBLE
75439: EQUAL
75440: IFTRUE 75444
75442: GO 75573
75444: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75445: LD_ADDR_VAR 0 5
75449: PUSH
75450: LD_VAR 0 1
75454: PUSH
75455: LD_VAR 0 2
75459: PUSH
75460: LD_INT 3
75462: MINUS
75463: PUSH
75464: LD_INT 3
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: LIST
75471: PUSH
75472: LD_VAR 0 1
75476: PUSH
75477: LD_INT 4
75479: PLUS
75480: PUSH
75481: LD_VAR 0 2
75485: PUSH
75486: LD_INT 4
75488: PUSH
75489: EMPTY
75490: LIST
75491: LIST
75492: LIST
75493: PUSH
75494: LD_VAR 0 1
75498: PUSH
75499: LD_VAR 0 2
75503: PUSH
75504: LD_INT 4
75506: PLUS
75507: PUSH
75508: LD_INT 0
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: LIST
75515: PUSH
75516: LD_VAR 0 1
75520: PUSH
75521: LD_INT 3
75523: MINUS
75524: PUSH
75525: LD_VAR 0 2
75529: PUSH
75530: LD_INT 1
75532: PUSH
75533: EMPTY
75534: LIST
75535: LIST
75536: LIST
75537: PUSH
75538: LD_VAR 0 1
75542: PUSH
75543: LD_INT 4
75545: MINUS
75546: PUSH
75547: LD_VAR 0 2
75551: PUSH
75552: LD_INT 4
75554: MINUS
75555: PUSH
75556: LD_INT 2
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: LIST
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: ST_TO_ADDR
// end ; 3 :
75571: GO 75993
75573: LD_INT 3
75575: DOUBLE
75576: EQUAL
75577: IFTRUE 75581
75579: GO 75714
75581: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75582: LD_ADDR_VAR 0 5
75586: PUSH
75587: LD_VAR 0 1
75591: PUSH
75592: LD_INT 3
75594: PLUS
75595: PUSH
75596: LD_VAR 0 2
75600: PUSH
75601: LD_INT 4
75603: PUSH
75604: EMPTY
75605: LIST
75606: LIST
75607: LIST
75608: PUSH
75609: LD_VAR 0 1
75613: PUSH
75614: LD_INT 4
75616: PLUS
75617: PUSH
75618: LD_VAR 0 2
75622: PUSH
75623: LD_INT 4
75625: PLUS
75626: PUSH
75627: LD_INT 5
75629: PUSH
75630: EMPTY
75631: LIST
75632: LIST
75633: LIST
75634: PUSH
75635: LD_VAR 0 1
75639: PUSH
75640: LD_INT 4
75642: MINUS
75643: PUSH
75644: LD_VAR 0 2
75648: PUSH
75649: LD_INT 1
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: LIST
75656: PUSH
75657: LD_VAR 0 1
75661: PUSH
75662: LD_VAR 0 2
75666: PUSH
75667: LD_INT 4
75669: MINUS
75670: PUSH
75671: LD_INT 3
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: LIST
75678: PUSH
75679: LD_VAR 0 1
75683: PUSH
75684: LD_INT 3
75686: MINUS
75687: PUSH
75688: LD_VAR 0 2
75692: PUSH
75693: LD_INT 3
75695: MINUS
75696: PUSH
75697: LD_INT 2
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: LIST
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: LIST
75709: LIST
75710: LIST
75711: ST_TO_ADDR
// end ; 4 :
75712: GO 75993
75714: LD_INT 4
75716: DOUBLE
75717: EQUAL
75718: IFTRUE 75722
75720: GO 75855
75722: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75723: LD_ADDR_VAR 0 5
75727: PUSH
75728: LD_VAR 0 1
75732: PUSH
75733: LD_VAR 0 2
75737: PUSH
75738: LD_INT 4
75740: PLUS
75741: PUSH
75742: LD_INT 0
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: LIST
75749: PUSH
75750: LD_VAR 0 1
75754: PUSH
75755: LD_INT 3
75757: PLUS
75758: PUSH
75759: LD_VAR 0 2
75763: PUSH
75764: LD_INT 3
75766: PLUS
75767: PUSH
75768: LD_INT 5
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: LIST
75775: PUSH
75776: LD_VAR 0 1
75780: PUSH
75781: LD_INT 4
75783: PLUS
75784: PUSH
75785: LD_VAR 0 2
75789: PUSH
75790: LD_INT 4
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: LIST
75797: PUSH
75798: LD_VAR 0 1
75802: PUSH
75803: LD_VAR 0 2
75807: PUSH
75808: LD_INT 3
75810: MINUS
75811: PUSH
75812: LD_INT 3
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: LIST
75819: PUSH
75820: LD_VAR 0 1
75824: PUSH
75825: LD_INT 4
75827: MINUS
75828: PUSH
75829: LD_VAR 0 2
75833: PUSH
75834: LD_INT 4
75836: MINUS
75837: PUSH
75838: LD_INT 2
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: LIST
75845: PUSH
75846: EMPTY
75847: LIST
75848: LIST
75849: LIST
75850: LIST
75851: LIST
75852: ST_TO_ADDR
// end ; 5 :
75853: GO 75993
75855: LD_INT 5
75857: DOUBLE
75858: EQUAL
75859: IFTRUE 75863
75861: GO 75992
75863: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75864: LD_ADDR_VAR 0 5
75868: PUSH
75869: LD_VAR 0 1
75873: PUSH
75874: LD_INT 4
75876: MINUS
75877: PUSH
75878: LD_VAR 0 2
75882: PUSH
75883: LD_INT 1
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: LIST
75890: PUSH
75891: LD_VAR 0 1
75895: PUSH
75896: LD_VAR 0 2
75900: PUSH
75901: LD_INT 4
75903: MINUS
75904: PUSH
75905: LD_INT 3
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: LIST
75912: PUSH
75913: LD_VAR 0 1
75917: PUSH
75918: LD_INT 4
75920: PLUS
75921: PUSH
75922: LD_VAR 0 2
75926: PUSH
75927: LD_INT 4
75929: PLUS
75930: PUSH
75931: LD_INT 5
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: LIST
75938: PUSH
75939: LD_VAR 0 1
75943: PUSH
75944: LD_INT 3
75946: PLUS
75947: PUSH
75948: LD_VAR 0 2
75952: PUSH
75953: LD_INT 4
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: LIST
75960: PUSH
75961: LD_VAR 0 1
75965: PUSH
75966: LD_VAR 0 2
75970: PUSH
75971: LD_INT 3
75973: PLUS
75974: PUSH
75975: LD_INT 0
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: LIST
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: ST_TO_ADDR
// end ; end ;
75990: GO 75993
75992: POP
// result := list ;
75993: LD_ADDR_VAR 0 4
75997: PUSH
75998: LD_VAR 0 5
76002: ST_TO_ADDR
// end ;
76003: LD_VAR 0 4
76007: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76008: LD_INT 0
76010: PPUSH
76011: PPUSH
76012: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76013: LD_VAR 0 1
76017: NOT
76018: PUSH
76019: LD_VAR 0 2
76023: PUSH
76024: LD_INT 1
76026: PUSH
76027: LD_INT 2
76029: PUSH
76030: LD_INT 3
76032: PUSH
76033: LD_INT 4
76035: PUSH
76036: EMPTY
76037: LIST
76038: LIST
76039: LIST
76040: LIST
76041: IN
76042: NOT
76043: OR
76044: IFFALSE 76048
// exit ;
76046: GO 76131
// tmp := [ ] ;
76048: LD_ADDR_VAR 0 5
76052: PUSH
76053: EMPTY
76054: ST_TO_ADDR
// for i in units do
76055: LD_ADDR_VAR 0 4
76059: PUSH
76060: LD_VAR 0 1
76064: PUSH
76065: FOR_IN
76066: IFFALSE 76100
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76068: LD_ADDR_VAR 0 5
76072: PUSH
76073: LD_VAR 0 5
76077: PPUSH
76078: LD_VAR 0 4
76082: PPUSH
76083: LD_VAR 0 2
76087: PPUSH
76088: CALL_OW 259
76092: PPUSH
76093: CALL 77491 0 2
76097: ST_TO_ADDR
76098: GO 76065
76100: POP
76101: POP
// if not tmp then
76102: LD_VAR 0 5
76106: NOT
76107: IFFALSE 76111
// exit ;
76109: GO 76131
// result := SortListByListDesc ( units , tmp ) ;
76111: LD_ADDR_VAR 0 3
76115: PUSH
76116: LD_VAR 0 1
76120: PPUSH
76121: LD_VAR 0 5
76125: PPUSH
76126: CALL_OW 77
76130: ST_TO_ADDR
// end ;
76131: LD_VAR 0 3
76135: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76136: LD_INT 0
76138: PPUSH
76139: PPUSH
76140: PPUSH
// result := false ;
76141: LD_ADDR_VAR 0 3
76145: PUSH
76146: LD_INT 0
76148: ST_TO_ADDR
// if not building then
76149: LD_VAR 0 2
76153: NOT
76154: IFFALSE 76158
// exit ;
76156: GO 76296
// x := GetX ( building ) ;
76158: LD_ADDR_VAR 0 4
76162: PUSH
76163: LD_VAR 0 2
76167: PPUSH
76168: CALL_OW 250
76172: ST_TO_ADDR
// y := GetY ( building ) ;
76173: LD_ADDR_VAR 0 5
76177: PUSH
76178: LD_VAR 0 2
76182: PPUSH
76183: CALL_OW 251
76187: ST_TO_ADDR
// if not x or not y then
76188: LD_VAR 0 4
76192: NOT
76193: PUSH
76194: LD_VAR 0 5
76198: NOT
76199: OR
76200: IFFALSE 76204
// exit ;
76202: GO 76296
// if GetTaskList ( unit ) then
76204: LD_VAR 0 1
76208: PPUSH
76209: CALL_OW 437
76213: IFFALSE 76296
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76215: LD_STRING e
76217: PUSH
76218: LD_VAR 0 1
76222: PPUSH
76223: CALL_OW 437
76227: PUSH
76228: LD_INT 1
76230: ARRAY
76231: PUSH
76232: LD_INT 1
76234: ARRAY
76235: EQUAL
76236: PUSH
76237: LD_VAR 0 4
76241: PUSH
76242: LD_VAR 0 1
76246: PPUSH
76247: CALL_OW 437
76251: PUSH
76252: LD_INT 1
76254: ARRAY
76255: PUSH
76256: LD_INT 2
76258: ARRAY
76259: EQUAL
76260: AND
76261: PUSH
76262: LD_VAR 0 5
76266: PUSH
76267: LD_VAR 0 1
76271: PPUSH
76272: CALL_OW 437
76276: PUSH
76277: LD_INT 1
76279: ARRAY
76280: PUSH
76281: LD_INT 3
76283: ARRAY
76284: EQUAL
76285: AND
76286: IFFALSE 76296
// result := true end ;
76288: LD_ADDR_VAR 0 3
76292: PUSH
76293: LD_INT 1
76295: ST_TO_ADDR
// end ;
76296: LD_VAR 0 3
76300: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76301: LD_INT 0
76303: PPUSH
// result := false ;
76304: LD_ADDR_VAR 0 4
76308: PUSH
76309: LD_INT 0
76311: ST_TO_ADDR
// if GetTaskList ( unit ) then
76312: LD_VAR 0 1
76316: PPUSH
76317: CALL_OW 437
76321: IFFALSE 76404
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76323: LD_STRING M
76325: PUSH
76326: LD_VAR 0 1
76330: PPUSH
76331: CALL_OW 437
76335: PUSH
76336: LD_INT 1
76338: ARRAY
76339: PUSH
76340: LD_INT 1
76342: ARRAY
76343: EQUAL
76344: PUSH
76345: LD_VAR 0 2
76349: PUSH
76350: LD_VAR 0 1
76354: PPUSH
76355: CALL_OW 437
76359: PUSH
76360: LD_INT 1
76362: ARRAY
76363: PUSH
76364: LD_INT 2
76366: ARRAY
76367: EQUAL
76368: AND
76369: PUSH
76370: LD_VAR 0 3
76374: PUSH
76375: LD_VAR 0 1
76379: PPUSH
76380: CALL_OW 437
76384: PUSH
76385: LD_INT 1
76387: ARRAY
76388: PUSH
76389: LD_INT 3
76391: ARRAY
76392: EQUAL
76393: AND
76394: IFFALSE 76404
// result := true ;
76396: LD_ADDR_VAR 0 4
76400: PUSH
76401: LD_INT 1
76403: ST_TO_ADDR
// end ; end ;
76404: LD_VAR 0 4
76408: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76409: LD_INT 0
76411: PPUSH
76412: PPUSH
76413: PPUSH
76414: PPUSH
// if not unit or not area then
76415: LD_VAR 0 1
76419: NOT
76420: PUSH
76421: LD_VAR 0 2
76425: NOT
76426: OR
76427: IFFALSE 76431
// exit ;
76429: GO 76594
// tmp := AreaToList ( area , i ) ;
76431: LD_ADDR_VAR 0 6
76435: PUSH
76436: LD_VAR 0 2
76440: PPUSH
76441: LD_VAR 0 5
76445: PPUSH
76446: CALL_OW 517
76450: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76451: LD_ADDR_VAR 0 5
76455: PUSH
76456: DOUBLE
76457: LD_INT 1
76459: DEC
76460: ST_TO_ADDR
76461: LD_VAR 0 6
76465: PUSH
76466: LD_INT 1
76468: ARRAY
76469: PUSH
76470: FOR_TO
76471: IFFALSE 76592
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76473: LD_ADDR_VAR 0 7
76477: PUSH
76478: LD_VAR 0 6
76482: PUSH
76483: LD_INT 1
76485: ARRAY
76486: PUSH
76487: LD_VAR 0 5
76491: ARRAY
76492: PUSH
76493: LD_VAR 0 6
76497: PUSH
76498: LD_INT 2
76500: ARRAY
76501: PUSH
76502: LD_VAR 0 5
76506: ARRAY
76507: PUSH
76508: EMPTY
76509: LIST
76510: LIST
76511: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
76512: LD_INT 92
76514: PUSH
76515: LD_VAR 0 7
76519: PUSH
76520: LD_INT 1
76522: ARRAY
76523: PUSH
76524: LD_VAR 0 7
76528: PUSH
76529: LD_INT 2
76531: ARRAY
76532: PUSH
76533: LD_INT 3
76535: PUSH
76536: EMPTY
76537: LIST
76538: LIST
76539: LIST
76540: LIST
76541: PPUSH
76542: CALL_OW 69
76546: PUSH
76547: LD_INT 0
76549: EQUAL
76550: IFFALSE 76590
// begin PlaceUnitArea ( unit , area , mode ) ;
76552: LD_VAR 0 1
76556: PPUSH
76557: LD_VAR 0 2
76561: PPUSH
76562: LD_VAR 0 3
76566: PPUSH
76567: CALL_OW 49
// result := IsPlaced ( unit ) ;
76571: LD_ADDR_VAR 0 4
76575: PUSH
76576: LD_VAR 0 1
76580: PPUSH
76581: CALL_OW 305
76585: ST_TO_ADDR
// exit ;
76586: POP
76587: POP
76588: GO 76594
// end ; end ;
76590: GO 76470
76592: POP
76593: POP
// end ;
76594: LD_VAR 0 4
76598: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76599: LD_INT 0
76601: PPUSH
76602: PPUSH
76603: PPUSH
// if not side or side > 8 then
76604: LD_VAR 0 1
76608: NOT
76609: PUSH
76610: LD_VAR 0 1
76614: PUSH
76615: LD_INT 8
76617: GREATER
76618: OR
76619: IFFALSE 76623
// exit ;
76621: GO 76810
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76623: LD_ADDR_VAR 0 4
76627: PUSH
76628: LD_INT 22
76630: PUSH
76631: LD_VAR 0 1
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: PUSH
76640: LD_INT 21
76642: PUSH
76643: LD_INT 3
76645: PUSH
76646: EMPTY
76647: LIST
76648: LIST
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: PPUSH
76654: CALL_OW 69
76658: ST_TO_ADDR
// if not tmp then
76659: LD_VAR 0 4
76663: NOT
76664: IFFALSE 76668
// exit ;
76666: GO 76810
// enable_addtolog := true ;
76668: LD_ADDR_OWVAR 81
76672: PUSH
76673: LD_INT 1
76675: ST_TO_ADDR
// AddToLog ( [ ) ;
76676: LD_STRING [
76678: PPUSH
76679: CALL_OW 561
// for i in tmp do
76683: LD_ADDR_VAR 0 3
76687: PUSH
76688: LD_VAR 0 4
76692: PUSH
76693: FOR_IN
76694: IFFALSE 76801
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76696: LD_STRING [
76698: PUSH
76699: LD_VAR 0 3
76703: PPUSH
76704: CALL_OW 266
76708: STR
76709: PUSH
76710: LD_STRING , 
76712: STR
76713: PUSH
76714: LD_VAR 0 3
76718: PPUSH
76719: CALL_OW 250
76723: STR
76724: PUSH
76725: LD_STRING , 
76727: STR
76728: PUSH
76729: LD_VAR 0 3
76733: PPUSH
76734: CALL_OW 251
76738: STR
76739: PUSH
76740: LD_STRING , 
76742: STR
76743: PUSH
76744: LD_VAR 0 3
76748: PPUSH
76749: CALL_OW 254
76753: STR
76754: PUSH
76755: LD_STRING , 
76757: STR
76758: PUSH
76759: LD_VAR 0 3
76763: PPUSH
76764: LD_INT 1
76766: PPUSH
76767: CALL_OW 268
76771: STR
76772: PUSH
76773: LD_STRING , 
76775: STR
76776: PUSH
76777: LD_VAR 0 3
76781: PPUSH
76782: LD_INT 2
76784: PPUSH
76785: CALL_OW 268
76789: STR
76790: PUSH
76791: LD_STRING ],
76793: STR
76794: PPUSH
76795: CALL_OW 561
// end ;
76799: GO 76693
76801: POP
76802: POP
// AddToLog ( ]; ) ;
76803: LD_STRING ];
76805: PPUSH
76806: CALL_OW 561
// end ;
76810: LD_VAR 0 2
76814: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76815: LD_INT 0
76817: PPUSH
76818: PPUSH
76819: PPUSH
76820: PPUSH
76821: PPUSH
// if not area or not rate or not max then
76822: LD_VAR 0 1
76826: NOT
76827: PUSH
76828: LD_VAR 0 2
76832: NOT
76833: OR
76834: PUSH
76835: LD_VAR 0 4
76839: NOT
76840: OR
76841: IFFALSE 76845
// exit ;
76843: GO 77034
// while 1 do
76845: LD_INT 1
76847: IFFALSE 77034
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76849: LD_ADDR_VAR 0 9
76853: PUSH
76854: LD_VAR 0 1
76858: PPUSH
76859: LD_INT 1
76861: PPUSH
76862: CALL_OW 287
76866: PUSH
76867: LD_INT 10
76869: MUL
76870: ST_TO_ADDR
// r := rate / 10 ;
76871: LD_ADDR_VAR 0 7
76875: PUSH
76876: LD_VAR 0 2
76880: PUSH
76881: LD_INT 10
76883: DIVREAL
76884: ST_TO_ADDR
// time := 1 1$00 ;
76885: LD_ADDR_VAR 0 8
76889: PUSH
76890: LD_INT 2100
76892: ST_TO_ADDR
// if amount < min then
76893: LD_VAR 0 9
76897: PUSH
76898: LD_VAR 0 3
76902: LESS
76903: IFFALSE 76921
// r := r * 2 else
76905: LD_ADDR_VAR 0 7
76909: PUSH
76910: LD_VAR 0 7
76914: PUSH
76915: LD_INT 2
76917: MUL
76918: ST_TO_ADDR
76919: GO 76947
// if amount > max then
76921: LD_VAR 0 9
76925: PUSH
76926: LD_VAR 0 4
76930: GREATER
76931: IFFALSE 76947
// r := r / 2 ;
76933: LD_ADDR_VAR 0 7
76937: PUSH
76938: LD_VAR 0 7
76942: PUSH
76943: LD_INT 2
76945: DIVREAL
76946: ST_TO_ADDR
// time := time / r ;
76947: LD_ADDR_VAR 0 8
76951: PUSH
76952: LD_VAR 0 8
76956: PUSH
76957: LD_VAR 0 7
76961: DIVREAL
76962: ST_TO_ADDR
// if time < 0 then
76963: LD_VAR 0 8
76967: PUSH
76968: LD_INT 0
76970: LESS
76971: IFFALSE 76988
// time := time * - 1 ;
76973: LD_ADDR_VAR 0 8
76977: PUSH
76978: LD_VAR 0 8
76982: PUSH
76983: LD_INT 1
76985: NEG
76986: MUL
76987: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76988: LD_VAR 0 8
76992: PUSH
76993: LD_INT 35
76995: PPUSH
76996: LD_INT 875
76998: PPUSH
76999: CALL_OW 12
77003: PLUS
77004: PPUSH
77005: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77009: LD_INT 1
77011: PPUSH
77012: LD_INT 5
77014: PPUSH
77015: CALL_OW 12
77019: PPUSH
77020: LD_VAR 0 1
77024: PPUSH
77025: LD_INT 1
77027: PPUSH
77028: CALL_OW 55
// end ;
77032: GO 76845
// end ;
77034: LD_VAR 0 5
77038: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77039: LD_INT 0
77041: PPUSH
77042: PPUSH
77043: PPUSH
77044: PPUSH
77045: PPUSH
77046: PPUSH
77047: PPUSH
77048: PPUSH
// if not turrets or not factories then
77049: LD_VAR 0 1
77053: NOT
77054: PUSH
77055: LD_VAR 0 2
77059: NOT
77060: OR
77061: IFFALSE 77065
// exit ;
77063: GO 77372
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77065: LD_ADDR_VAR 0 10
77069: PUSH
77070: LD_INT 5
77072: PUSH
77073: LD_INT 6
77075: PUSH
77076: EMPTY
77077: LIST
77078: LIST
77079: PUSH
77080: LD_INT 2
77082: PUSH
77083: LD_INT 4
77085: PUSH
77086: EMPTY
77087: LIST
77088: LIST
77089: PUSH
77090: LD_INT 3
77092: PUSH
77093: LD_INT 5
77095: PUSH
77096: EMPTY
77097: LIST
77098: LIST
77099: PUSH
77100: EMPTY
77101: LIST
77102: LIST
77103: LIST
77104: PUSH
77105: LD_INT 24
77107: PUSH
77108: LD_INT 25
77110: PUSH
77111: EMPTY
77112: LIST
77113: LIST
77114: PUSH
77115: LD_INT 23
77117: PUSH
77118: LD_INT 27
77120: PUSH
77121: EMPTY
77122: LIST
77123: LIST
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: PUSH
77129: LD_INT 42
77131: PUSH
77132: LD_INT 43
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PUSH
77139: LD_INT 44
77141: PUSH
77142: LD_INT 46
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: PUSH
77149: LD_INT 45
77151: PUSH
77152: LD_INT 47
77154: PUSH
77155: EMPTY
77156: LIST
77157: LIST
77158: PUSH
77159: EMPTY
77160: LIST
77161: LIST
77162: LIST
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: LIST
77168: ST_TO_ADDR
// result := [ ] ;
77169: LD_ADDR_VAR 0 3
77173: PUSH
77174: EMPTY
77175: ST_TO_ADDR
// for i in turrets do
77176: LD_ADDR_VAR 0 4
77180: PUSH
77181: LD_VAR 0 1
77185: PUSH
77186: FOR_IN
77187: IFFALSE 77370
// begin nat := GetNation ( i ) ;
77189: LD_ADDR_VAR 0 7
77193: PUSH
77194: LD_VAR 0 4
77198: PPUSH
77199: CALL_OW 248
77203: ST_TO_ADDR
// weapon := 0 ;
77204: LD_ADDR_VAR 0 8
77208: PUSH
77209: LD_INT 0
77211: ST_TO_ADDR
// if not nat then
77212: LD_VAR 0 7
77216: NOT
77217: IFFALSE 77221
// continue ;
77219: GO 77186
// for j in list [ nat ] do
77221: LD_ADDR_VAR 0 5
77225: PUSH
77226: LD_VAR 0 10
77230: PUSH
77231: LD_VAR 0 7
77235: ARRAY
77236: PUSH
77237: FOR_IN
77238: IFFALSE 77279
// if GetBWeapon ( i ) = j [ 1 ] then
77240: LD_VAR 0 4
77244: PPUSH
77245: CALL_OW 269
77249: PUSH
77250: LD_VAR 0 5
77254: PUSH
77255: LD_INT 1
77257: ARRAY
77258: EQUAL
77259: IFFALSE 77277
// begin weapon := j [ 2 ] ;
77261: LD_ADDR_VAR 0 8
77265: PUSH
77266: LD_VAR 0 5
77270: PUSH
77271: LD_INT 2
77273: ARRAY
77274: ST_TO_ADDR
// break ;
77275: GO 77279
// end ;
77277: GO 77237
77279: POP
77280: POP
// if not weapon then
77281: LD_VAR 0 8
77285: NOT
77286: IFFALSE 77290
// continue ;
77288: GO 77186
// for k in factories do
77290: LD_ADDR_VAR 0 6
77294: PUSH
77295: LD_VAR 0 2
77299: PUSH
77300: FOR_IN
77301: IFFALSE 77366
// begin weapons := AvailableWeaponList ( k ) ;
77303: LD_ADDR_VAR 0 9
77307: PUSH
77308: LD_VAR 0 6
77312: PPUSH
77313: CALL_OW 478
77317: ST_TO_ADDR
// if not weapons then
77318: LD_VAR 0 9
77322: NOT
77323: IFFALSE 77327
// continue ;
77325: GO 77300
// if weapon in weapons then
77327: LD_VAR 0 8
77331: PUSH
77332: LD_VAR 0 9
77336: IN
77337: IFFALSE 77364
// begin result := [ i , weapon ] ;
77339: LD_ADDR_VAR 0 3
77343: PUSH
77344: LD_VAR 0 4
77348: PUSH
77349: LD_VAR 0 8
77353: PUSH
77354: EMPTY
77355: LIST
77356: LIST
77357: ST_TO_ADDR
// exit ;
77358: POP
77359: POP
77360: POP
77361: POP
77362: GO 77372
// end ; end ;
77364: GO 77300
77366: POP
77367: POP
// end ;
77368: GO 77186
77370: POP
77371: POP
// end ;
77372: LD_VAR 0 3
77376: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77377: LD_INT 0
77379: PPUSH
// if not side or side > 8 then
77380: LD_VAR 0 3
77384: NOT
77385: PUSH
77386: LD_VAR 0 3
77390: PUSH
77391: LD_INT 8
77393: GREATER
77394: OR
77395: IFFALSE 77399
// exit ;
77397: GO 77458
// if not range then
77399: LD_VAR 0 4
77403: NOT
77404: IFFALSE 77415
// range := - 12 ;
77406: LD_ADDR_VAR 0 4
77410: PUSH
77411: LD_INT 12
77413: NEG
77414: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77415: LD_VAR 0 1
77419: PPUSH
77420: LD_VAR 0 2
77424: PPUSH
77425: LD_VAR 0 3
77429: PPUSH
77430: LD_VAR 0 4
77434: PPUSH
77435: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77439: LD_VAR 0 1
77443: PPUSH
77444: LD_VAR 0 2
77448: PPUSH
77449: LD_VAR 0 3
77453: PPUSH
77454: CALL_OW 331
// end ;
77458: LD_VAR 0 5
77462: RET
// export function Video ( mode ) ; begin
77463: LD_INT 0
77465: PPUSH
// ingame_video = mode ;
77466: LD_ADDR_OWVAR 52
77470: PUSH
77471: LD_VAR 0 1
77475: ST_TO_ADDR
// interface_hidden = mode ;
77476: LD_ADDR_OWVAR 54
77480: PUSH
77481: LD_VAR 0 1
77485: ST_TO_ADDR
// end ;
77486: LD_VAR 0 2
77490: RET
// export function Join ( array , element ) ; begin
77491: LD_INT 0
77493: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77494: LD_ADDR_VAR 0 3
77498: PUSH
77499: LD_VAR 0 1
77503: PPUSH
77504: LD_VAR 0 1
77508: PUSH
77509: LD_INT 1
77511: PLUS
77512: PPUSH
77513: LD_VAR 0 2
77517: PPUSH
77518: CALL_OW 1
77522: ST_TO_ADDR
// end ;
77523: LD_VAR 0 3
77527: RET
// export function JoinUnion ( array , element ) ; begin
77528: LD_INT 0
77530: PPUSH
// result := array union element ;
77531: LD_ADDR_VAR 0 3
77535: PUSH
77536: LD_VAR 0 1
77540: PUSH
77541: LD_VAR 0 2
77545: UNION
77546: ST_TO_ADDR
// end ;
77547: LD_VAR 0 3
77551: RET
// export function GetBehemoths ( side ) ; begin
77552: LD_INT 0
77554: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77555: LD_ADDR_VAR 0 2
77559: PUSH
77560: LD_INT 22
77562: PUSH
77563: LD_VAR 0 1
77567: PUSH
77568: EMPTY
77569: LIST
77570: LIST
77571: PUSH
77572: LD_INT 31
77574: PUSH
77575: LD_INT 25
77577: PUSH
77578: EMPTY
77579: LIST
77580: LIST
77581: PUSH
77582: EMPTY
77583: LIST
77584: LIST
77585: PPUSH
77586: CALL_OW 69
77590: ST_TO_ADDR
// end ;
77591: LD_VAR 0 2
77595: RET
// export function Shuffle ( array ) ; var i , index ; begin
77596: LD_INT 0
77598: PPUSH
77599: PPUSH
77600: PPUSH
// result := [ ] ;
77601: LD_ADDR_VAR 0 2
77605: PUSH
77606: EMPTY
77607: ST_TO_ADDR
// if not array then
77608: LD_VAR 0 1
77612: NOT
77613: IFFALSE 77617
// exit ;
77615: GO 77716
// Randomize ;
77617: CALL_OW 10
// for i = array downto 1 do
77621: LD_ADDR_VAR 0 3
77625: PUSH
77626: DOUBLE
77627: LD_VAR 0 1
77631: INC
77632: ST_TO_ADDR
77633: LD_INT 1
77635: PUSH
77636: FOR_DOWNTO
77637: IFFALSE 77714
// begin index := rand ( 1 , array ) ;
77639: LD_ADDR_VAR 0 4
77643: PUSH
77644: LD_INT 1
77646: PPUSH
77647: LD_VAR 0 1
77651: PPUSH
77652: CALL_OW 12
77656: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77657: LD_ADDR_VAR 0 2
77661: PUSH
77662: LD_VAR 0 2
77666: PPUSH
77667: LD_VAR 0 2
77671: PUSH
77672: LD_INT 1
77674: PLUS
77675: PPUSH
77676: LD_VAR 0 1
77680: PUSH
77681: LD_VAR 0 4
77685: ARRAY
77686: PPUSH
77687: CALL_OW 2
77691: ST_TO_ADDR
// array := Delete ( array , index ) ;
77692: LD_ADDR_VAR 0 1
77696: PUSH
77697: LD_VAR 0 1
77701: PPUSH
77702: LD_VAR 0 4
77706: PPUSH
77707: CALL_OW 3
77711: ST_TO_ADDR
// end ;
77712: GO 77636
77714: POP
77715: POP
// end ;
77716: LD_VAR 0 2
77720: RET
// export function GetBaseMaterials ( base ) ; begin
77721: LD_INT 0
77723: PPUSH
// result := [ 0 , 0 , 0 ] ;
77724: LD_ADDR_VAR 0 2
77728: PUSH
77729: LD_INT 0
77731: PUSH
77732: LD_INT 0
77734: PUSH
77735: LD_INT 0
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: LIST
77742: ST_TO_ADDR
// if not base then
77743: LD_VAR 0 1
77747: NOT
77748: IFFALSE 77752
// exit ;
77750: GO 77801
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77752: LD_ADDR_VAR 0 2
77756: PUSH
77757: LD_VAR 0 1
77761: PPUSH
77762: LD_INT 1
77764: PPUSH
77765: CALL_OW 275
77769: PUSH
77770: LD_VAR 0 1
77774: PPUSH
77775: LD_INT 2
77777: PPUSH
77778: CALL_OW 275
77782: PUSH
77783: LD_VAR 0 1
77787: PPUSH
77788: LD_INT 3
77790: PPUSH
77791: CALL_OW 275
77795: PUSH
77796: EMPTY
77797: LIST
77798: LIST
77799: LIST
77800: ST_TO_ADDR
// end ;
77801: LD_VAR 0 2
77805: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77806: LD_INT 0
77808: PPUSH
77809: PPUSH
// result := array ;
77810: LD_ADDR_VAR 0 3
77814: PUSH
77815: LD_VAR 0 1
77819: ST_TO_ADDR
// if size >= result then
77820: LD_VAR 0 2
77824: PUSH
77825: LD_VAR 0 3
77829: GREATEREQUAL
77830: IFFALSE 77834
// exit ;
77832: GO 77884
// if size then
77834: LD_VAR 0 2
77838: IFFALSE 77884
// for i := array downto size do
77840: LD_ADDR_VAR 0 4
77844: PUSH
77845: DOUBLE
77846: LD_VAR 0 1
77850: INC
77851: ST_TO_ADDR
77852: LD_VAR 0 2
77856: PUSH
77857: FOR_DOWNTO
77858: IFFALSE 77882
// result := Delete ( result , result ) ;
77860: LD_ADDR_VAR 0 3
77864: PUSH
77865: LD_VAR 0 3
77869: PPUSH
77870: LD_VAR 0 3
77874: PPUSH
77875: CALL_OW 3
77879: ST_TO_ADDR
77880: GO 77857
77882: POP
77883: POP
// end ;
77884: LD_VAR 0 3
77888: RET
// export function ComExit ( unit ) ; var tmp ; begin
77889: LD_INT 0
77891: PPUSH
77892: PPUSH
// if not IsInUnit ( unit ) then
77893: LD_VAR 0 1
77897: PPUSH
77898: CALL_OW 310
77902: NOT
77903: IFFALSE 77907
// exit ;
77905: GO 77967
// tmp := IsInUnit ( unit ) ;
77907: LD_ADDR_VAR 0 3
77911: PUSH
77912: LD_VAR 0 1
77916: PPUSH
77917: CALL_OW 310
77921: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77922: LD_VAR 0 3
77926: PPUSH
77927: CALL_OW 247
77931: PUSH
77932: LD_INT 2
77934: EQUAL
77935: IFFALSE 77948
// ComExitVehicle ( unit ) else
77937: LD_VAR 0 1
77941: PPUSH
77942: CALL_OW 121
77946: GO 77957
// ComExitBuilding ( unit ) ;
77948: LD_VAR 0 1
77952: PPUSH
77953: CALL_OW 122
// result := tmp ;
77957: LD_ADDR_VAR 0 2
77961: PUSH
77962: LD_VAR 0 3
77966: ST_TO_ADDR
// end ;
77967: LD_VAR 0 2
77971: RET
// export function ComExitAll ( units ) ; var i ; begin
77972: LD_INT 0
77974: PPUSH
77975: PPUSH
// if not units then
77976: LD_VAR 0 1
77980: NOT
77981: IFFALSE 77985
// exit ;
77983: GO 78011
// for i in units do
77985: LD_ADDR_VAR 0 3
77989: PUSH
77990: LD_VAR 0 1
77994: PUSH
77995: FOR_IN
77996: IFFALSE 78009
// ComExit ( i ) ;
77998: LD_VAR 0 3
78002: PPUSH
78003: CALL 77889 0 1
78007: GO 77995
78009: POP
78010: POP
// end ;
78011: LD_VAR 0 2
78015: RET
// export function ResetHc ; begin
78016: LD_INT 0
78018: PPUSH
// InitHc ;
78019: CALL_OW 19
// hc_importance := 0 ;
78023: LD_ADDR_OWVAR 32
78027: PUSH
78028: LD_INT 0
78030: ST_TO_ADDR
// end ;
78031: LD_VAR 0 1
78035: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78036: LD_INT 0
78038: PPUSH
78039: PPUSH
78040: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78041: LD_ADDR_VAR 0 6
78045: PUSH
78046: LD_VAR 0 1
78050: PUSH
78051: LD_VAR 0 3
78055: PLUS
78056: PUSH
78057: LD_INT 2
78059: DIV
78060: ST_TO_ADDR
// if _x < 0 then
78061: LD_VAR 0 6
78065: PUSH
78066: LD_INT 0
78068: LESS
78069: IFFALSE 78086
// _x := _x * - 1 ;
78071: LD_ADDR_VAR 0 6
78075: PUSH
78076: LD_VAR 0 6
78080: PUSH
78081: LD_INT 1
78083: NEG
78084: MUL
78085: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78086: LD_ADDR_VAR 0 7
78090: PUSH
78091: LD_VAR 0 2
78095: PUSH
78096: LD_VAR 0 4
78100: PLUS
78101: PUSH
78102: LD_INT 2
78104: DIV
78105: ST_TO_ADDR
// if _y < 0 then
78106: LD_VAR 0 7
78110: PUSH
78111: LD_INT 0
78113: LESS
78114: IFFALSE 78131
// _y := _y * - 1 ;
78116: LD_ADDR_VAR 0 7
78120: PUSH
78121: LD_VAR 0 7
78125: PUSH
78126: LD_INT 1
78128: NEG
78129: MUL
78130: ST_TO_ADDR
// result := [ _x , _y ] ;
78131: LD_ADDR_VAR 0 5
78135: PUSH
78136: LD_VAR 0 6
78140: PUSH
78141: LD_VAR 0 7
78145: PUSH
78146: EMPTY
78147: LIST
78148: LIST
78149: ST_TO_ADDR
// end ;
78150: LD_VAR 0 5
78154: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78155: LD_INT 0
78157: PPUSH
78158: PPUSH
78159: PPUSH
78160: PPUSH
// task := GetTaskList ( unit ) ;
78161: LD_ADDR_VAR 0 7
78165: PUSH
78166: LD_VAR 0 1
78170: PPUSH
78171: CALL_OW 437
78175: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78176: LD_VAR 0 7
78180: NOT
78181: PUSH
78182: LD_VAR 0 1
78186: PPUSH
78187: LD_VAR 0 2
78191: PPUSH
78192: CALL_OW 308
78196: NOT
78197: AND
78198: IFFALSE 78202
// exit ;
78200: GO 78320
// if IsInArea ( unit , area ) then
78202: LD_VAR 0 1
78206: PPUSH
78207: LD_VAR 0 2
78211: PPUSH
78212: CALL_OW 308
78216: IFFALSE 78234
// begin ComMoveToArea ( unit , goAway ) ;
78218: LD_VAR 0 1
78222: PPUSH
78223: LD_VAR 0 3
78227: PPUSH
78228: CALL_OW 113
// exit ;
78232: GO 78320
// end ; if task [ 1 ] [ 1 ] <> M then
78234: LD_VAR 0 7
78238: PUSH
78239: LD_INT 1
78241: ARRAY
78242: PUSH
78243: LD_INT 1
78245: ARRAY
78246: PUSH
78247: LD_STRING M
78249: NONEQUAL
78250: IFFALSE 78254
// exit ;
78252: GO 78320
// x := task [ 1 ] [ 2 ] ;
78254: LD_ADDR_VAR 0 5
78258: PUSH
78259: LD_VAR 0 7
78263: PUSH
78264: LD_INT 1
78266: ARRAY
78267: PUSH
78268: LD_INT 2
78270: ARRAY
78271: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78272: LD_ADDR_VAR 0 6
78276: PUSH
78277: LD_VAR 0 7
78281: PUSH
78282: LD_INT 1
78284: ARRAY
78285: PUSH
78286: LD_INT 3
78288: ARRAY
78289: ST_TO_ADDR
// if InArea ( x , y , area ) then
78290: LD_VAR 0 5
78294: PPUSH
78295: LD_VAR 0 6
78299: PPUSH
78300: LD_VAR 0 2
78304: PPUSH
78305: CALL_OW 309
78309: IFFALSE 78320
// ComStop ( unit ) ;
78311: LD_VAR 0 1
78315: PPUSH
78316: CALL_OW 141
// end ;
78320: LD_VAR 0 4
78324: RET
// export function Abs ( value ) ; begin
78325: LD_INT 0
78327: PPUSH
// result := value ;
78328: LD_ADDR_VAR 0 2
78332: PUSH
78333: LD_VAR 0 1
78337: ST_TO_ADDR
// if value < 0 then
78338: LD_VAR 0 1
78342: PUSH
78343: LD_INT 0
78345: LESS
78346: IFFALSE 78363
// result := value * - 1 ;
78348: LD_ADDR_VAR 0 2
78352: PUSH
78353: LD_VAR 0 1
78357: PUSH
78358: LD_INT 1
78360: NEG
78361: MUL
78362: ST_TO_ADDR
// end ;
78363: LD_VAR 0 2
78367: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78368: LD_INT 0
78370: PPUSH
78371: PPUSH
78372: PPUSH
78373: PPUSH
78374: PPUSH
78375: PPUSH
78376: PPUSH
78377: PPUSH
// if not unit or not building then
78378: LD_VAR 0 1
78382: NOT
78383: PUSH
78384: LD_VAR 0 2
78388: NOT
78389: OR
78390: IFFALSE 78394
// exit ;
78392: GO 78620
// x := GetX ( building ) ;
78394: LD_ADDR_VAR 0 4
78398: PUSH
78399: LD_VAR 0 2
78403: PPUSH
78404: CALL_OW 250
78408: ST_TO_ADDR
// y := GetY ( building ) ;
78409: LD_ADDR_VAR 0 6
78413: PUSH
78414: LD_VAR 0 2
78418: PPUSH
78419: CALL_OW 251
78423: ST_TO_ADDR
// d := GetDir ( building ) ;
78424: LD_ADDR_VAR 0 8
78428: PUSH
78429: LD_VAR 0 2
78433: PPUSH
78434: CALL_OW 254
78438: ST_TO_ADDR
// r := 4 ;
78439: LD_ADDR_VAR 0 9
78443: PUSH
78444: LD_INT 4
78446: ST_TO_ADDR
// for i := 1 to 5 do
78447: LD_ADDR_VAR 0 10
78451: PUSH
78452: DOUBLE
78453: LD_INT 1
78455: DEC
78456: ST_TO_ADDR
78457: LD_INT 5
78459: PUSH
78460: FOR_TO
78461: IFFALSE 78618
// begin _x := ShiftX ( x , d , r + i ) ;
78463: LD_ADDR_VAR 0 5
78467: PUSH
78468: LD_VAR 0 4
78472: PPUSH
78473: LD_VAR 0 8
78477: PPUSH
78478: LD_VAR 0 9
78482: PUSH
78483: LD_VAR 0 10
78487: PLUS
78488: PPUSH
78489: CALL_OW 272
78493: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78494: LD_ADDR_VAR 0 7
78498: PUSH
78499: LD_VAR 0 6
78503: PPUSH
78504: LD_VAR 0 8
78508: PPUSH
78509: LD_VAR 0 9
78513: PUSH
78514: LD_VAR 0 10
78518: PLUS
78519: PPUSH
78520: CALL_OW 273
78524: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78525: LD_VAR 0 5
78529: PPUSH
78530: LD_VAR 0 7
78534: PPUSH
78535: CALL_OW 488
78539: PUSH
78540: LD_VAR 0 5
78544: PPUSH
78545: LD_VAR 0 7
78549: PPUSH
78550: CALL_OW 428
78554: PPUSH
78555: CALL_OW 247
78559: PUSH
78560: LD_INT 3
78562: PUSH
78563: LD_INT 2
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: IN
78570: NOT
78571: AND
78572: IFFALSE 78616
// begin ComMoveXY ( unit , _x , _y ) ;
78574: LD_VAR 0 1
78578: PPUSH
78579: LD_VAR 0 5
78583: PPUSH
78584: LD_VAR 0 7
78588: PPUSH
78589: CALL_OW 111
// result := [ _x , _y ] ;
78593: LD_ADDR_VAR 0 3
78597: PUSH
78598: LD_VAR 0 5
78602: PUSH
78603: LD_VAR 0 7
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: ST_TO_ADDR
// exit ;
78612: POP
78613: POP
78614: GO 78620
// end ; end ;
78616: GO 78460
78618: POP
78619: POP
// end ;
78620: LD_VAR 0 3
78624: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78625: LD_INT 0
78627: PPUSH
78628: PPUSH
78629: PPUSH
// result := 0 ;
78630: LD_ADDR_VAR 0 3
78634: PUSH
78635: LD_INT 0
78637: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78638: LD_VAR 0 1
78642: PUSH
78643: LD_INT 0
78645: LESS
78646: PUSH
78647: LD_VAR 0 1
78651: PUSH
78652: LD_INT 8
78654: GREATER
78655: OR
78656: PUSH
78657: LD_VAR 0 2
78661: PUSH
78662: LD_INT 0
78664: LESS
78665: OR
78666: PUSH
78667: LD_VAR 0 2
78671: PUSH
78672: LD_INT 8
78674: GREATER
78675: OR
78676: IFFALSE 78680
// exit ;
78678: GO 78755
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78680: LD_ADDR_VAR 0 4
78684: PUSH
78685: LD_INT 22
78687: PUSH
78688: LD_VAR 0 2
78692: PUSH
78693: EMPTY
78694: LIST
78695: LIST
78696: PPUSH
78697: CALL_OW 69
78701: PUSH
78702: FOR_IN
78703: IFFALSE 78753
// begin un := UnitShoot ( i ) ;
78705: LD_ADDR_VAR 0 5
78709: PUSH
78710: LD_VAR 0 4
78714: PPUSH
78715: CALL_OW 504
78719: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78720: LD_VAR 0 5
78724: PPUSH
78725: CALL_OW 255
78729: PUSH
78730: LD_VAR 0 1
78734: EQUAL
78735: IFFALSE 78751
// begin result := un ;
78737: LD_ADDR_VAR 0 3
78741: PUSH
78742: LD_VAR 0 5
78746: ST_TO_ADDR
// exit ;
78747: POP
78748: POP
78749: GO 78755
// end ; end ;
78751: GO 78702
78753: POP
78754: POP
// end ;
78755: LD_VAR 0 3
78759: RET
// export function GetCargoBay ( units ) ; begin
78760: LD_INT 0
78762: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78763: LD_ADDR_VAR 0 2
78767: PUSH
78768: LD_VAR 0 1
78772: PPUSH
78773: LD_INT 2
78775: PUSH
78776: LD_INT 34
78778: PUSH
78779: LD_INT 12
78781: PUSH
78782: EMPTY
78783: LIST
78784: LIST
78785: PUSH
78786: LD_INT 34
78788: PUSH
78789: LD_INT 51
78791: PUSH
78792: EMPTY
78793: LIST
78794: LIST
78795: PUSH
78796: LD_INT 34
78798: PUSH
78799: LD_INT 32
78801: PUSH
78802: EMPTY
78803: LIST
78804: LIST
78805: PUSH
78806: LD_INT 34
78808: PUSH
78809: LD_INT 89
78811: PUSH
78812: EMPTY
78813: LIST
78814: LIST
78815: PUSH
78816: EMPTY
78817: LIST
78818: LIST
78819: LIST
78820: LIST
78821: LIST
78822: PPUSH
78823: CALL_OW 72
78827: ST_TO_ADDR
// end ;
78828: LD_VAR 0 2
78832: RET
// export function Negate ( value ) ; begin
78833: LD_INT 0
78835: PPUSH
// result := not value ;
78836: LD_ADDR_VAR 0 2
78840: PUSH
78841: LD_VAR 0 1
78845: NOT
78846: ST_TO_ADDR
// end ;
78847: LD_VAR 0 2
78851: RET
// export function Inc ( value ) ; begin
78852: LD_INT 0
78854: PPUSH
// result := value + 1 ;
78855: LD_ADDR_VAR 0 2
78859: PUSH
78860: LD_VAR 0 1
78864: PUSH
78865: LD_INT 1
78867: PLUS
78868: ST_TO_ADDR
// end ;
78869: LD_VAR 0 2
78873: RET
// export function Dec ( value ) ; begin
78874: LD_INT 0
78876: PPUSH
// result := value - 1 ;
78877: LD_ADDR_VAR 0 2
78881: PUSH
78882: LD_VAR 0 1
78886: PUSH
78887: LD_INT 1
78889: MINUS
78890: ST_TO_ADDR
// end ;
78891: LD_VAR 0 2
78895: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78896: LD_INT 0
78898: PPUSH
78899: PPUSH
78900: PPUSH
78901: PPUSH
78902: PPUSH
78903: PPUSH
78904: PPUSH
78905: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78906: LD_VAR 0 1
78910: PPUSH
78911: LD_VAR 0 2
78915: PPUSH
78916: CALL_OW 488
78920: NOT
78921: PUSH
78922: LD_VAR 0 3
78926: PPUSH
78927: LD_VAR 0 4
78931: PPUSH
78932: CALL_OW 488
78936: NOT
78937: OR
78938: IFFALSE 78951
// begin result := - 1 ;
78940: LD_ADDR_VAR 0 5
78944: PUSH
78945: LD_INT 1
78947: NEG
78948: ST_TO_ADDR
// exit ;
78949: GO 79186
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78951: LD_ADDR_VAR 0 12
78955: PUSH
78956: LD_VAR 0 1
78960: PPUSH
78961: LD_VAR 0 2
78965: PPUSH
78966: LD_VAR 0 3
78970: PPUSH
78971: LD_VAR 0 4
78975: PPUSH
78976: CALL 78036 0 4
78980: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78981: LD_ADDR_VAR 0 11
78985: PUSH
78986: LD_VAR 0 1
78990: PPUSH
78991: LD_VAR 0 2
78995: PPUSH
78996: LD_VAR 0 12
79000: PUSH
79001: LD_INT 1
79003: ARRAY
79004: PPUSH
79005: LD_VAR 0 12
79009: PUSH
79010: LD_INT 2
79012: ARRAY
79013: PPUSH
79014: CALL_OW 298
79018: ST_TO_ADDR
// distance := 9999 ;
79019: LD_ADDR_VAR 0 10
79023: PUSH
79024: LD_INT 9999
79026: ST_TO_ADDR
// for i := 0 to 5 do
79027: LD_ADDR_VAR 0 6
79031: PUSH
79032: DOUBLE
79033: LD_INT 0
79035: DEC
79036: ST_TO_ADDR
79037: LD_INT 5
79039: PUSH
79040: FOR_TO
79041: IFFALSE 79184
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79043: LD_ADDR_VAR 0 7
79047: PUSH
79048: LD_VAR 0 1
79052: PPUSH
79053: LD_VAR 0 6
79057: PPUSH
79058: LD_VAR 0 11
79062: PPUSH
79063: CALL_OW 272
79067: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79068: LD_ADDR_VAR 0 8
79072: PUSH
79073: LD_VAR 0 2
79077: PPUSH
79078: LD_VAR 0 6
79082: PPUSH
79083: LD_VAR 0 11
79087: PPUSH
79088: CALL_OW 273
79092: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79093: LD_VAR 0 7
79097: PPUSH
79098: LD_VAR 0 8
79102: PPUSH
79103: CALL_OW 488
79107: NOT
79108: IFFALSE 79112
// continue ;
79110: GO 79040
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79112: LD_ADDR_VAR 0 9
79116: PUSH
79117: LD_VAR 0 12
79121: PUSH
79122: LD_INT 1
79124: ARRAY
79125: PPUSH
79126: LD_VAR 0 12
79130: PUSH
79131: LD_INT 2
79133: ARRAY
79134: PPUSH
79135: LD_VAR 0 7
79139: PPUSH
79140: LD_VAR 0 8
79144: PPUSH
79145: CALL_OW 298
79149: ST_TO_ADDR
// if tmp < distance then
79150: LD_VAR 0 9
79154: PUSH
79155: LD_VAR 0 10
79159: LESS
79160: IFFALSE 79182
// begin result := i ;
79162: LD_ADDR_VAR 0 5
79166: PUSH
79167: LD_VAR 0 6
79171: ST_TO_ADDR
// distance := tmp ;
79172: LD_ADDR_VAR 0 10
79176: PUSH
79177: LD_VAR 0 9
79181: ST_TO_ADDR
// end ; end ;
79182: GO 79040
79184: POP
79185: POP
// end ;
79186: LD_VAR 0 5
79190: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79191: LD_INT 0
79193: PPUSH
79194: PPUSH
// if not driver or not IsInUnit ( driver ) then
79195: LD_VAR 0 1
79199: NOT
79200: PUSH
79201: LD_VAR 0 1
79205: PPUSH
79206: CALL_OW 310
79210: NOT
79211: OR
79212: IFFALSE 79216
// exit ;
79214: GO 79306
// vehicle := IsInUnit ( driver ) ;
79216: LD_ADDR_VAR 0 3
79220: PUSH
79221: LD_VAR 0 1
79225: PPUSH
79226: CALL_OW 310
79230: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79231: LD_VAR 0 1
79235: PPUSH
79236: LD_STRING \
79238: PUSH
79239: LD_INT 0
79241: PUSH
79242: LD_INT 0
79244: PUSH
79245: LD_INT 0
79247: PUSH
79248: LD_INT 0
79250: PUSH
79251: LD_INT 0
79253: PUSH
79254: LD_INT 0
79256: PUSH
79257: EMPTY
79258: LIST
79259: LIST
79260: LIST
79261: LIST
79262: LIST
79263: LIST
79264: LIST
79265: PUSH
79266: LD_STRING E
79268: PUSH
79269: LD_INT 0
79271: PUSH
79272: LD_INT 0
79274: PUSH
79275: LD_VAR 0 3
79279: PUSH
79280: LD_INT 0
79282: PUSH
79283: LD_INT 0
79285: PUSH
79286: LD_INT 0
79288: PUSH
79289: EMPTY
79290: LIST
79291: LIST
79292: LIST
79293: LIST
79294: LIST
79295: LIST
79296: LIST
79297: PUSH
79298: EMPTY
79299: LIST
79300: LIST
79301: PPUSH
79302: CALL_OW 446
// end ;
79306: LD_VAR 0 2
79310: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79311: LD_INT 0
79313: PPUSH
79314: PPUSH
// if not driver or not IsInUnit ( driver ) then
79315: LD_VAR 0 1
79319: NOT
79320: PUSH
79321: LD_VAR 0 1
79325: PPUSH
79326: CALL_OW 310
79330: NOT
79331: OR
79332: IFFALSE 79336
// exit ;
79334: GO 79426
// vehicle := IsInUnit ( driver ) ;
79336: LD_ADDR_VAR 0 3
79340: PUSH
79341: LD_VAR 0 1
79345: PPUSH
79346: CALL_OW 310
79350: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79351: LD_VAR 0 1
79355: PPUSH
79356: LD_STRING \
79358: PUSH
79359: LD_INT 0
79361: PUSH
79362: LD_INT 0
79364: PUSH
79365: LD_INT 0
79367: PUSH
79368: LD_INT 0
79370: PUSH
79371: LD_INT 0
79373: PUSH
79374: LD_INT 0
79376: PUSH
79377: EMPTY
79378: LIST
79379: LIST
79380: LIST
79381: LIST
79382: LIST
79383: LIST
79384: LIST
79385: PUSH
79386: LD_STRING E
79388: PUSH
79389: LD_INT 0
79391: PUSH
79392: LD_INT 0
79394: PUSH
79395: LD_VAR 0 3
79399: PUSH
79400: LD_INT 0
79402: PUSH
79403: LD_INT 0
79405: PUSH
79406: LD_INT 0
79408: PUSH
79409: EMPTY
79410: LIST
79411: LIST
79412: LIST
79413: LIST
79414: LIST
79415: LIST
79416: LIST
79417: PUSH
79418: EMPTY
79419: LIST
79420: LIST
79421: PPUSH
79422: CALL_OW 447
// end ;
79426: LD_VAR 0 2
79430: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79431: LD_INT 0
79433: PPUSH
79434: PPUSH
79435: PPUSH
// tmp := [ ] ;
79436: LD_ADDR_VAR 0 5
79440: PUSH
79441: EMPTY
79442: ST_TO_ADDR
// for i in units do
79443: LD_ADDR_VAR 0 4
79447: PUSH
79448: LD_VAR 0 1
79452: PUSH
79453: FOR_IN
79454: IFFALSE 79492
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79456: LD_ADDR_VAR 0 5
79460: PUSH
79461: LD_VAR 0 5
79465: PPUSH
79466: LD_VAR 0 5
79470: PUSH
79471: LD_INT 1
79473: PLUS
79474: PPUSH
79475: LD_VAR 0 4
79479: PPUSH
79480: CALL_OW 256
79484: PPUSH
79485: CALL_OW 2
79489: ST_TO_ADDR
79490: GO 79453
79492: POP
79493: POP
// if not tmp then
79494: LD_VAR 0 5
79498: NOT
79499: IFFALSE 79503
// exit ;
79501: GO 79551
// if asc then
79503: LD_VAR 0 2
79507: IFFALSE 79531
// result := SortListByListAsc ( units , tmp ) else
79509: LD_ADDR_VAR 0 3
79513: PUSH
79514: LD_VAR 0 1
79518: PPUSH
79519: LD_VAR 0 5
79523: PPUSH
79524: CALL_OW 76
79528: ST_TO_ADDR
79529: GO 79551
// result := SortListByListDesc ( units , tmp ) ;
79531: LD_ADDR_VAR 0 3
79535: PUSH
79536: LD_VAR 0 1
79540: PPUSH
79541: LD_VAR 0 5
79545: PPUSH
79546: CALL_OW 77
79550: ST_TO_ADDR
// end ;
79551: LD_VAR 0 3
79555: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79556: LD_INT 0
79558: PPUSH
79559: PPUSH
// task := GetTaskList ( mech ) ;
79560: LD_ADDR_VAR 0 4
79564: PUSH
79565: LD_VAR 0 1
79569: PPUSH
79570: CALL_OW 437
79574: ST_TO_ADDR
// if not task then
79575: LD_VAR 0 4
79579: NOT
79580: IFFALSE 79584
// exit ;
79582: GO 79626
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79584: LD_ADDR_VAR 0 3
79588: PUSH
79589: LD_VAR 0 4
79593: PUSH
79594: LD_INT 1
79596: ARRAY
79597: PUSH
79598: LD_INT 1
79600: ARRAY
79601: PUSH
79602: LD_STRING r
79604: EQUAL
79605: PUSH
79606: LD_VAR 0 4
79610: PUSH
79611: LD_INT 1
79613: ARRAY
79614: PUSH
79615: LD_INT 4
79617: ARRAY
79618: PUSH
79619: LD_VAR 0 2
79623: EQUAL
79624: AND
79625: ST_TO_ADDR
// end ;
79626: LD_VAR 0 3
79630: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79631: LD_INT 0
79633: PPUSH
// SetDir ( unit , d ) ;
79634: LD_VAR 0 1
79638: PPUSH
79639: LD_VAR 0 4
79643: PPUSH
79644: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79648: LD_VAR 0 1
79652: PPUSH
79653: LD_VAR 0 2
79657: PPUSH
79658: LD_VAR 0 3
79662: PPUSH
79663: LD_VAR 0 5
79667: PPUSH
79668: CALL_OW 48
// end ;
79672: LD_VAR 0 6
79676: RET
// export function ToNaturalNumber ( number ) ; begin
79677: LD_INT 0
79679: PPUSH
// result := number div 1 ;
79680: LD_ADDR_VAR 0 2
79684: PUSH
79685: LD_VAR 0 1
79689: PUSH
79690: LD_INT 1
79692: DIV
79693: ST_TO_ADDR
// if number < 0 then
79694: LD_VAR 0 1
79698: PUSH
79699: LD_INT 0
79701: LESS
79702: IFFALSE 79712
// result := 0 ;
79704: LD_ADDR_VAR 0 2
79708: PUSH
79709: LD_INT 0
79711: ST_TO_ADDR
// end ;
79712: LD_VAR 0 2
79716: RET
// export function SortByClass ( units , class ) ; var un ; begin
79717: LD_INT 0
79719: PPUSH
79720: PPUSH
// if not units or not class then
79721: LD_VAR 0 1
79725: NOT
79726: PUSH
79727: LD_VAR 0 2
79731: NOT
79732: OR
79733: IFFALSE 79737
// exit ;
79735: GO 79832
// result := [ ] ;
79737: LD_ADDR_VAR 0 3
79741: PUSH
79742: EMPTY
79743: ST_TO_ADDR
// for un in units do
79744: LD_ADDR_VAR 0 4
79748: PUSH
79749: LD_VAR 0 1
79753: PUSH
79754: FOR_IN
79755: IFFALSE 79830
// if GetClass ( un ) = class then
79757: LD_VAR 0 4
79761: PPUSH
79762: CALL_OW 257
79766: PUSH
79767: LD_VAR 0 2
79771: EQUAL
79772: IFFALSE 79799
// result := Insert ( result , 1 , un ) else
79774: LD_ADDR_VAR 0 3
79778: PUSH
79779: LD_VAR 0 3
79783: PPUSH
79784: LD_INT 1
79786: PPUSH
79787: LD_VAR 0 4
79791: PPUSH
79792: CALL_OW 2
79796: ST_TO_ADDR
79797: GO 79828
// result := Replace ( result , result + 1 , un ) ;
79799: LD_ADDR_VAR 0 3
79803: PUSH
79804: LD_VAR 0 3
79808: PPUSH
79809: LD_VAR 0 3
79813: PUSH
79814: LD_INT 1
79816: PLUS
79817: PPUSH
79818: LD_VAR 0 4
79822: PPUSH
79823: CALL_OW 1
79827: ST_TO_ADDR
79828: GO 79754
79830: POP
79831: POP
// end ;
79832: LD_VAR 0 3
79836: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79837: LD_INT 0
79839: PPUSH
79840: PPUSH
79841: PPUSH
79842: PPUSH
79843: PPUSH
79844: PPUSH
79845: PPUSH
// result := [ ] ;
79846: LD_ADDR_VAR 0 4
79850: PUSH
79851: EMPTY
79852: ST_TO_ADDR
// if x - r < 0 then
79853: LD_VAR 0 1
79857: PUSH
79858: LD_VAR 0 3
79862: MINUS
79863: PUSH
79864: LD_INT 0
79866: LESS
79867: IFFALSE 79879
// min_x := 0 else
79869: LD_ADDR_VAR 0 8
79873: PUSH
79874: LD_INT 0
79876: ST_TO_ADDR
79877: GO 79895
// min_x := x - r ;
79879: LD_ADDR_VAR 0 8
79883: PUSH
79884: LD_VAR 0 1
79888: PUSH
79889: LD_VAR 0 3
79893: MINUS
79894: ST_TO_ADDR
// if y - r < 0 then
79895: LD_VAR 0 2
79899: PUSH
79900: LD_VAR 0 3
79904: MINUS
79905: PUSH
79906: LD_INT 0
79908: LESS
79909: IFFALSE 79921
// min_y := 0 else
79911: LD_ADDR_VAR 0 7
79915: PUSH
79916: LD_INT 0
79918: ST_TO_ADDR
79919: GO 79937
// min_y := y - r ;
79921: LD_ADDR_VAR 0 7
79925: PUSH
79926: LD_VAR 0 2
79930: PUSH
79931: LD_VAR 0 3
79935: MINUS
79936: ST_TO_ADDR
// max_x := x + r ;
79937: LD_ADDR_VAR 0 9
79941: PUSH
79942: LD_VAR 0 1
79946: PUSH
79947: LD_VAR 0 3
79951: PLUS
79952: ST_TO_ADDR
// max_y := y + r ;
79953: LD_ADDR_VAR 0 10
79957: PUSH
79958: LD_VAR 0 2
79962: PUSH
79963: LD_VAR 0 3
79967: PLUS
79968: ST_TO_ADDR
// for _x = min_x to max_x do
79969: LD_ADDR_VAR 0 5
79973: PUSH
79974: DOUBLE
79975: LD_VAR 0 8
79979: DEC
79980: ST_TO_ADDR
79981: LD_VAR 0 9
79985: PUSH
79986: FOR_TO
79987: IFFALSE 80088
// for _y = min_y to max_y do
79989: LD_ADDR_VAR 0 6
79993: PUSH
79994: DOUBLE
79995: LD_VAR 0 7
79999: DEC
80000: ST_TO_ADDR
80001: LD_VAR 0 10
80005: PUSH
80006: FOR_TO
80007: IFFALSE 80084
// begin if not ValidHex ( _x , _y ) then
80009: LD_VAR 0 5
80013: PPUSH
80014: LD_VAR 0 6
80018: PPUSH
80019: CALL_OW 488
80023: NOT
80024: IFFALSE 80028
// continue ;
80026: GO 80006
// if GetResourceTypeXY ( _x , _y ) then
80028: LD_VAR 0 5
80032: PPUSH
80033: LD_VAR 0 6
80037: PPUSH
80038: CALL_OW 283
80042: IFFALSE 80082
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80044: LD_ADDR_VAR 0 4
80048: PUSH
80049: LD_VAR 0 4
80053: PPUSH
80054: LD_VAR 0 4
80058: PUSH
80059: LD_INT 1
80061: PLUS
80062: PPUSH
80063: LD_VAR 0 5
80067: PUSH
80068: LD_VAR 0 6
80072: PUSH
80073: EMPTY
80074: LIST
80075: LIST
80076: PPUSH
80077: CALL_OW 1
80081: ST_TO_ADDR
// end ;
80082: GO 80006
80084: POP
80085: POP
80086: GO 79986
80088: POP
80089: POP
// end ;
80090: LD_VAR 0 4
80094: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80095: LD_INT 0
80097: PPUSH
80098: PPUSH
80099: PPUSH
80100: PPUSH
80101: PPUSH
80102: PPUSH
80103: PPUSH
80104: PPUSH
// if not units then
80105: LD_VAR 0 1
80109: NOT
80110: IFFALSE 80114
// exit ;
80112: GO 80638
// result := UnitFilter ( units , [ f_ok ] ) ;
80114: LD_ADDR_VAR 0 3
80118: PUSH
80119: LD_VAR 0 1
80123: PPUSH
80124: LD_INT 50
80126: PUSH
80127: EMPTY
80128: LIST
80129: PPUSH
80130: CALL_OW 72
80134: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80135: LD_ADDR_VAR 0 8
80139: PUSH
80140: LD_VAR 0 1
80144: PUSH
80145: LD_INT 1
80147: ARRAY
80148: PPUSH
80149: CALL_OW 255
80153: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80154: LD_ADDR_VAR 0 10
80158: PUSH
80159: LD_INT 29
80161: PUSH
80162: LD_INT 91
80164: PUSH
80165: LD_INT 49
80167: PUSH
80168: EMPTY
80169: LIST
80170: LIST
80171: LIST
80172: ST_TO_ADDR
// if not result then
80173: LD_VAR 0 3
80177: NOT
80178: IFFALSE 80182
// exit ;
80180: GO 80638
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80182: LD_ADDR_VAR 0 5
80186: PUSH
80187: LD_INT 81
80189: PUSH
80190: LD_VAR 0 8
80194: PUSH
80195: EMPTY
80196: LIST
80197: LIST
80198: PPUSH
80199: CALL_OW 69
80203: ST_TO_ADDR
// for i in result do
80204: LD_ADDR_VAR 0 4
80208: PUSH
80209: LD_VAR 0 3
80213: PUSH
80214: FOR_IN
80215: IFFALSE 80636
// begin tag := GetTag ( i ) + 1 ;
80217: LD_ADDR_VAR 0 9
80221: PUSH
80222: LD_VAR 0 4
80226: PPUSH
80227: CALL_OW 110
80231: PUSH
80232: LD_INT 1
80234: PLUS
80235: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80236: LD_ADDR_VAR 0 7
80240: PUSH
80241: LD_VAR 0 4
80245: PPUSH
80246: CALL_OW 250
80250: PPUSH
80251: LD_VAR 0 4
80255: PPUSH
80256: CALL_OW 251
80260: PPUSH
80261: LD_INT 6
80263: PPUSH
80264: CALL 79837 0 3
80268: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80269: LD_VAR 0 4
80273: PPUSH
80274: CALL_OW 247
80278: PUSH
80279: LD_INT 2
80281: EQUAL
80282: PUSH
80283: LD_VAR 0 7
80287: AND
80288: PUSH
80289: LD_VAR 0 4
80293: PPUSH
80294: CALL_OW 264
80298: PUSH
80299: LD_VAR 0 10
80303: IN
80304: NOT
80305: AND
80306: IFFALSE 80345
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80308: LD_VAR 0 4
80312: PPUSH
80313: LD_VAR 0 7
80317: PUSH
80318: LD_INT 1
80320: ARRAY
80321: PUSH
80322: LD_INT 1
80324: ARRAY
80325: PPUSH
80326: LD_VAR 0 7
80330: PUSH
80331: LD_INT 1
80333: ARRAY
80334: PUSH
80335: LD_INT 2
80337: ARRAY
80338: PPUSH
80339: CALL_OW 116
80343: GO 80634
// if path > tag then
80345: LD_VAR 0 2
80349: PUSH
80350: LD_VAR 0 9
80354: GREATER
80355: IFFALSE 80563
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80357: LD_ADDR_VAR 0 6
80361: PUSH
80362: LD_VAR 0 5
80366: PPUSH
80367: LD_INT 91
80369: PUSH
80370: LD_VAR 0 4
80374: PUSH
80375: LD_INT 8
80377: PUSH
80378: EMPTY
80379: LIST
80380: LIST
80381: LIST
80382: PPUSH
80383: CALL_OW 72
80387: ST_TO_ADDR
// if nearEnemy then
80388: LD_VAR 0 6
80392: IFFALSE 80461
// begin if GetWeapon ( i ) = ru_time_lapser then
80394: LD_VAR 0 4
80398: PPUSH
80399: CALL_OW 264
80403: PUSH
80404: LD_INT 49
80406: EQUAL
80407: IFFALSE 80435
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80409: LD_VAR 0 4
80413: PPUSH
80414: LD_VAR 0 6
80418: PPUSH
80419: LD_VAR 0 4
80423: PPUSH
80424: CALL_OW 74
80428: PPUSH
80429: CALL_OW 112
80433: GO 80459
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80435: LD_VAR 0 4
80439: PPUSH
80440: LD_VAR 0 6
80444: PPUSH
80445: LD_VAR 0 4
80449: PPUSH
80450: CALL_OW 74
80454: PPUSH
80455: CALL 81563 0 2
// end else
80459: GO 80561
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80461: LD_VAR 0 4
80465: PPUSH
80466: LD_VAR 0 2
80470: PUSH
80471: LD_VAR 0 9
80475: ARRAY
80476: PUSH
80477: LD_INT 1
80479: ARRAY
80480: PPUSH
80481: LD_VAR 0 2
80485: PUSH
80486: LD_VAR 0 9
80490: ARRAY
80491: PUSH
80492: LD_INT 2
80494: ARRAY
80495: PPUSH
80496: CALL_OW 297
80500: PUSH
80501: LD_INT 6
80503: GREATER
80504: IFFALSE 80547
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80506: LD_VAR 0 4
80510: PPUSH
80511: LD_VAR 0 2
80515: PUSH
80516: LD_VAR 0 9
80520: ARRAY
80521: PUSH
80522: LD_INT 1
80524: ARRAY
80525: PPUSH
80526: LD_VAR 0 2
80530: PUSH
80531: LD_VAR 0 9
80535: ARRAY
80536: PUSH
80537: LD_INT 2
80539: ARRAY
80540: PPUSH
80541: CALL_OW 114
80545: GO 80561
// SetTag ( i , tag ) ;
80547: LD_VAR 0 4
80551: PPUSH
80552: LD_VAR 0 9
80556: PPUSH
80557: CALL_OW 109
// end else
80561: GO 80634
// if enemy then
80563: LD_VAR 0 5
80567: IFFALSE 80634
// begin if GetWeapon ( i ) = ru_time_lapser then
80569: LD_VAR 0 4
80573: PPUSH
80574: CALL_OW 264
80578: PUSH
80579: LD_INT 49
80581: EQUAL
80582: IFFALSE 80610
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80584: LD_VAR 0 4
80588: PPUSH
80589: LD_VAR 0 5
80593: PPUSH
80594: LD_VAR 0 4
80598: PPUSH
80599: CALL_OW 74
80603: PPUSH
80604: CALL_OW 112
80608: GO 80634
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80610: LD_VAR 0 4
80614: PPUSH
80615: LD_VAR 0 5
80619: PPUSH
80620: LD_VAR 0 4
80624: PPUSH
80625: CALL_OW 74
80629: PPUSH
80630: CALL 81563 0 2
// end ; end ;
80634: GO 80214
80636: POP
80637: POP
// end ;
80638: LD_VAR 0 3
80642: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80643: LD_INT 0
80645: PPUSH
80646: PPUSH
80647: PPUSH
// if not unit or IsInUnit ( unit ) then
80648: LD_VAR 0 1
80652: NOT
80653: PUSH
80654: LD_VAR 0 1
80658: PPUSH
80659: CALL_OW 310
80663: OR
80664: IFFALSE 80668
// exit ;
80666: GO 80759
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80668: LD_ADDR_VAR 0 4
80672: PUSH
80673: LD_VAR 0 1
80677: PPUSH
80678: CALL_OW 250
80682: PPUSH
80683: LD_VAR 0 2
80687: PPUSH
80688: LD_INT 1
80690: PPUSH
80691: CALL_OW 272
80695: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80696: LD_ADDR_VAR 0 5
80700: PUSH
80701: LD_VAR 0 1
80705: PPUSH
80706: CALL_OW 251
80710: PPUSH
80711: LD_VAR 0 2
80715: PPUSH
80716: LD_INT 1
80718: PPUSH
80719: CALL_OW 273
80723: ST_TO_ADDR
// if ValidHex ( x , y ) then
80724: LD_VAR 0 4
80728: PPUSH
80729: LD_VAR 0 5
80733: PPUSH
80734: CALL_OW 488
80738: IFFALSE 80759
// ComTurnXY ( unit , x , y ) ;
80740: LD_VAR 0 1
80744: PPUSH
80745: LD_VAR 0 4
80749: PPUSH
80750: LD_VAR 0 5
80754: PPUSH
80755: CALL_OW 118
// end ;
80759: LD_VAR 0 3
80763: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80764: LD_INT 0
80766: PPUSH
80767: PPUSH
// result := false ;
80768: LD_ADDR_VAR 0 3
80772: PUSH
80773: LD_INT 0
80775: ST_TO_ADDR
// if not units then
80776: LD_VAR 0 2
80780: NOT
80781: IFFALSE 80785
// exit ;
80783: GO 80830
// for i in units do
80785: LD_ADDR_VAR 0 4
80789: PUSH
80790: LD_VAR 0 2
80794: PUSH
80795: FOR_IN
80796: IFFALSE 80828
// if See ( side , i ) then
80798: LD_VAR 0 1
80802: PPUSH
80803: LD_VAR 0 4
80807: PPUSH
80808: CALL_OW 292
80812: IFFALSE 80826
// begin result := true ;
80814: LD_ADDR_VAR 0 3
80818: PUSH
80819: LD_INT 1
80821: ST_TO_ADDR
// exit ;
80822: POP
80823: POP
80824: GO 80830
// end ;
80826: GO 80795
80828: POP
80829: POP
// end ;
80830: LD_VAR 0 3
80834: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80835: LD_INT 0
80837: PPUSH
80838: PPUSH
80839: PPUSH
80840: PPUSH
// if not unit or not points then
80841: LD_VAR 0 1
80845: NOT
80846: PUSH
80847: LD_VAR 0 2
80851: NOT
80852: OR
80853: IFFALSE 80857
// exit ;
80855: GO 80947
// dist := 99999 ;
80857: LD_ADDR_VAR 0 5
80861: PUSH
80862: LD_INT 99999
80864: ST_TO_ADDR
// for i in points do
80865: LD_ADDR_VAR 0 4
80869: PUSH
80870: LD_VAR 0 2
80874: PUSH
80875: FOR_IN
80876: IFFALSE 80945
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80878: LD_ADDR_VAR 0 6
80882: PUSH
80883: LD_VAR 0 1
80887: PPUSH
80888: LD_VAR 0 4
80892: PUSH
80893: LD_INT 1
80895: ARRAY
80896: PPUSH
80897: LD_VAR 0 4
80901: PUSH
80902: LD_INT 2
80904: ARRAY
80905: PPUSH
80906: CALL_OW 297
80910: ST_TO_ADDR
// if tmpDist < dist then
80911: LD_VAR 0 6
80915: PUSH
80916: LD_VAR 0 5
80920: LESS
80921: IFFALSE 80943
// begin result := i ;
80923: LD_ADDR_VAR 0 3
80927: PUSH
80928: LD_VAR 0 4
80932: ST_TO_ADDR
// dist := tmpDist ;
80933: LD_ADDR_VAR 0 5
80937: PUSH
80938: LD_VAR 0 6
80942: ST_TO_ADDR
// end ; end ;
80943: GO 80875
80945: POP
80946: POP
// end ;
80947: LD_VAR 0 3
80951: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80952: LD_INT 0
80954: PPUSH
// uc_side := side ;
80955: LD_ADDR_OWVAR 20
80959: PUSH
80960: LD_VAR 0 1
80964: ST_TO_ADDR
// uc_nation := 3 ;
80965: LD_ADDR_OWVAR 21
80969: PUSH
80970: LD_INT 3
80972: ST_TO_ADDR
// vc_chassis := 25 ;
80973: LD_ADDR_OWVAR 37
80977: PUSH
80978: LD_INT 25
80980: ST_TO_ADDR
// vc_engine := engine_siberite ;
80981: LD_ADDR_OWVAR 39
80985: PUSH
80986: LD_INT 3
80988: ST_TO_ADDR
// vc_control := control_computer ;
80989: LD_ADDR_OWVAR 38
80993: PUSH
80994: LD_INT 3
80996: ST_TO_ADDR
// vc_weapon := 59 ;
80997: LD_ADDR_OWVAR 40
81001: PUSH
81002: LD_INT 59
81004: ST_TO_ADDR
// result := CreateVehicle ;
81005: LD_ADDR_VAR 0 5
81009: PUSH
81010: CALL_OW 45
81014: ST_TO_ADDR
// SetDir ( result , d ) ;
81015: LD_VAR 0 5
81019: PPUSH
81020: LD_VAR 0 4
81024: PPUSH
81025: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81029: LD_VAR 0 5
81033: PPUSH
81034: LD_VAR 0 2
81038: PPUSH
81039: LD_VAR 0 3
81043: PPUSH
81044: LD_INT 0
81046: PPUSH
81047: CALL_OW 48
// end ;
81051: LD_VAR 0 5
81055: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81056: LD_INT 0
81058: PPUSH
81059: PPUSH
81060: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81061: LD_ADDR_VAR 0 2
81065: PUSH
81066: LD_INT 0
81068: PUSH
81069: LD_INT 0
81071: PUSH
81072: LD_INT 0
81074: PUSH
81075: LD_INT 0
81077: PUSH
81078: EMPTY
81079: LIST
81080: LIST
81081: LIST
81082: LIST
81083: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81084: LD_VAR 0 1
81088: NOT
81089: PUSH
81090: LD_VAR 0 1
81094: PPUSH
81095: CALL_OW 264
81099: PUSH
81100: LD_INT 12
81102: PUSH
81103: LD_INT 51
81105: PUSH
81106: LD_INT 32
81108: PUSH
81109: LD_INT 89
81111: PUSH
81112: EMPTY
81113: LIST
81114: LIST
81115: LIST
81116: LIST
81117: IN
81118: NOT
81119: OR
81120: IFFALSE 81124
// exit ;
81122: GO 81222
// for i := 1 to 3 do
81124: LD_ADDR_VAR 0 3
81128: PUSH
81129: DOUBLE
81130: LD_INT 1
81132: DEC
81133: ST_TO_ADDR
81134: LD_INT 3
81136: PUSH
81137: FOR_TO
81138: IFFALSE 81220
// begin tmp := GetCargo ( cargo , i ) ;
81140: LD_ADDR_VAR 0 4
81144: PUSH
81145: LD_VAR 0 1
81149: PPUSH
81150: LD_VAR 0 3
81154: PPUSH
81155: CALL_OW 289
81159: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81160: LD_ADDR_VAR 0 2
81164: PUSH
81165: LD_VAR 0 2
81169: PPUSH
81170: LD_VAR 0 3
81174: PPUSH
81175: LD_VAR 0 4
81179: PPUSH
81180: CALL_OW 1
81184: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81185: LD_ADDR_VAR 0 2
81189: PUSH
81190: LD_VAR 0 2
81194: PPUSH
81195: LD_INT 4
81197: PPUSH
81198: LD_VAR 0 2
81202: PUSH
81203: LD_INT 4
81205: ARRAY
81206: PUSH
81207: LD_VAR 0 4
81211: PLUS
81212: PPUSH
81213: CALL_OW 1
81217: ST_TO_ADDR
// end ;
81218: GO 81137
81220: POP
81221: POP
// end ;
81222: LD_VAR 0 2
81226: RET
// export function Length ( array ) ; begin
81227: LD_INT 0
81229: PPUSH
// result := array + 0 ;
81230: LD_ADDR_VAR 0 2
81234: PUSH
81235: LD_VAR 0 1
81239: PUSH
81240: LD_INT 0
81242: PLUS
81243: ST_TO_ADDR
// end ;
81244: LD_VAR 0 2
81248: RET
// export function PrepareArray ( array ) ; begin
81249: LD_INT 0
81251: PPUSH
// result := array diff 0 ;
81252: LD_ADDR_VAR 0 2
81256: PUSH
81257: LD_VAR 0 1
81261: PUSH
81262: LD_INT 0
81264: DIFF
81265: ST_TO_ADDR
// if not result [ 1 ] then
81266: LD_VAR 0 2
81270: PUSH
81271: LD_INT 1
81273: ARRAY
81274: NOT
81275: IFFALSE 81295
// result := Delete ( result , 1 ) ;
81277: LD_ADDR_VAR 0 2
81281: PUSH
81282: LD_VAR 0 2
81286: PPUSH
81287: LD_INT 1
81289: PPUSH
81290: CALL_OW 3
81294: ST_TO_ADDR
// end ;
81295: LD_VAR 0 2
81299: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81300: LD_INT 0
81302: PPUSH
81303: PPUSH
81304: PPUSH
81305: PPUSH
// sibRocketRange := 25 ;
81306: LD_ADDR_VAR 0 6
81310: PUSH
81311: LD_INT 25
81313: ST_TO_ADDR
// result := false ;
81314: LD_ADDR_VAR 0 4
81318: PUSH
81319: LD_INT 0
81321: ST_TO_ADDR
// for i := 0 to 5 do
81322: LD_ADDR_VAR 0 5
81326: PUSH
81327: DOUBLE
81328: LD_INT 0
81330: DEC
81331: ST_TO_ADDR
81332: LD_INT 5
81334: PUSH
81335: FOR_TO
81336: IFFALSE 81403
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81338: LD_VAR 0 1
81342: PPUSH
81343: LD_VAR 0 5
81347: PPUSH
81348: LD_VAR 0 6
81352: PPUSH
81353: CALL_OW 272
81357: PPUSH
81358: LD_VAR 0 2
81362: PPUSH
81363: LD_VAR 0 5
81367: PPUSH
81368: LD_VAR 0 6
81372: PPUSH
81373: CALL_OW 273
81377: PPUSH
81378: LD_VAR 0 3
81382: PPUSH
81383: CALL_OW 309
81387: IFFALSE 81401
// begin result := true ;
81389: LD_ADDR_VAR 0 4
81393: PUSH
81394: LD_INT 1
81396: ST_TO_ADDR
// exit ;
81397: POP
81398: POP
81399: GO 81405
// end ;
81401: GO 81335
81403: POP
81404: POP
// end ;
81405: LD_VAR 0 4
81409: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81410: LD_INT 0
81412: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81413: LD_VAR 0 1
81417: PPUSH
81418: LD_VAR 0 2
81422: PPUSH
81423: LD_INT 0
81425: PPUSH
81426: LD_INT 0
81428: PPUSH
81429: LD_INT 1
81431: PPUSH
81432: LD_INT 0
81434: PPUSH
81435: CALL_OW 587
// end ;
81439: LD_VAR 0 3
81443: RET
// export function CenterOnNow ( unit ) ; begin
81444: LD_INT 0
81446: PPUSH
// result := IsInUnit ( unit ) ;
81447: LD_ADDR_VAR 0 2
81451: PUSH
81452: LD_VAR 0 1
81456: PPUSH
81457: CALL_OW 310
81461: ST_TO_ADDR
// if not result then
81462: LD_VAR 0 2
81466: NOT
81467: IFFALSE 81479
// result := unit ;
81469: LD_ADDR_VAR 0 2
81473: PUSH
81474: LD_VAR 0 1
81478: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81479: LD_VAR 0 1
81483: PPUSH
81484: CALL_OW 87
// end ;
81488: LD_VAR 0 2
81492: RET
// export function ComMoveHex ( unit , hex ) ; begin
81493: LD_INT 0
81495: PPUSH
// if not hex then
81496: LD_VAR 0 2
81500: NOT
81501: IFFALSE 81505
// exit ;
81503: GO 81558
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81505: LD_VAR 0 2
81509: PUSH
81510: LD_INT 1
81512: ARRAY
81513: PPUSH
81514: LD_VAR 0 2
81518: PUSH
81519: LD_INT 2
81521: ARRAY
81522: PPUSH
81523: CALL_OW 428
81527: IFFALSE 81531
// exit ;
81529: GO 81558
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81531: LD_VAR 0 1
81535: PPUSH
81536: LD_VAR 0 2
81540: PUSH
81541: LD_INT 1
81543: ARRAY
81544: PPUSH
81545: LD_VAR 0 2
81549: PUSH
81550: LD_INT 2
81552: ARRAY
81553: PPUSH
81554: CALL_OW 111
// end ;
81558: LD_VAR 0 3
81562: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81563: LD_INT 0
81565: PPUSH
81566: PPUSH
81567: PPUSH
// if not unit or not enemy then
81568: LD_VAR 0 1
81572: NOT
81573: PUSH
81574: LD_VAR 0 2
81578: NOT
81579: OR
81580: IFFALSE 81584
// exit ;
81582: GO 81708
// x := GetX ( enemy ) ;
81584: LD_ADDR_VAR 0 4
81588: PUSH
81589: LD_VAR 0 2
81593: PPUSH
81594: CALL_OW 250
81598: ST_TO_ADDR
// y := GetY ( enemy ) ;
81599: LD_ADDR_VAR 0 5
81603: PUSH
81604: LD_VAR 0 2
81608: PPUSH
81609: CALL_OW 251
81613: ST_TO_ADDR
// if ValidHex ( x , y ) then
81614: LD_VAR 0 4
81618: PPUSH
81619: LD_VAR 0 5
81623: PPUSH
81624: CALL_OW 488
81628: IFFALSE 81708
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
81630: LD_VAR 0 2
81634: PPUSH
81635: CALL_OW 247
81639: PUSH
81640: LD_INT 3
81642: PUSH
81643: LD_INT 2
81645: PUSH
81646: EMPTY
81647: LIST
81648: LIST
81649: IN
81650: PUSH
81651: LD_VAR 0 1
81655: PPUSH
81656: CALL_OW 255
81660: PPUSH
81661: LD_VAR 0 2
81665: PPUSH
81666: CALL_OW 292
81670: AND
81671: IFFALSE 81689
// ComAttackUnit ( unit , enemy ) else
81673: LD_VAR 0 1
81677: PPUSH
81678: LD_VAR 0 2
81682: PPUSH
81683: CALL_OW 115
81687: GO 81708
// ComAgressiveMove ( unit , x , y ) ;
81689: LD_VAR 0 1
81693: PPUSH
81694: LD_VAR 0 4
81698: PPUSH
81699: LD_VAR 0 5
81703: PPUSH
81704: CALL_OW 114
// end ; end_of_file
81708: LD_VAR 0 3
81712: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81713: LD_VAR 0 1
81717: PUSH
81718: LD_INT 200
81720: DOUBLE
81721: GREATEREQUAL
81722: IFFALSE 81730
81724: LD_INT 299
81726: DOUBLE
81727: LESSEQUAL
81728: IFTRUE 81732
81730: GO 81764
81732: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81733: LD_VAR 0 1
81737: PPUSH
81738: LD_VAR 0 2
81742: PPUSH
81743: LD_VAR 0 3
81747: PPUSH
81748: LD_VAR 0 4
81752: PPUSH
81753: LD_VAR 0 5
81757: PPUSH
81758: CALL 36257 0 5
81762: GO 81841
81764: LD_INT 300
81766: DOUBLE
81767: GREATEREQUAL
81768: IFFALSE 81776
81770: LD_INT 399
81772: DOUBLE
81773: LESSEQUAL
81774: IFTRUE 81778
81776: GO 81840
81778: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81779: LD_VAR 0 1
81783: PPUSH
81784: LD_VAR 0 2
81788: PPUSH
81789: LD_VAR 0 3
81793: PPUSH
81794: LD_VAR 0 4
81798: PPUSH
81799: LD_VAR 0 5
81803: PPUSH
81804: LD_VAR 0 6
81808: PPUSH
81809: LD_VAR 0 7
81813: PPUSH
81814: LD_VAR 0 8
81818: PPUSH
81819: LD_VAR 0 9
81823: PPUSH
81824: LD_VAR 0 10
81828: PPUSH
81829: LD_VAR 0 11
81833: PPUSH
81834: CALL 32582 0 11
81838: GO 81841
81840: POP
// end ;
81841: PPOPN 11
81843: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81844: LD_VAR 0 1
81848: PPUSH
81849: LD_VAR 0 2
81853: PPUSH
81854: LD_VAR 0 3
81858: PPUSH
81859: LD_VAR 0 4
81863: PPUSH
81864: LD_VAR 0 5
81868: PPUSH
81869: CALL 35993 0 5
// end ; end_of_file
81873: PPOPN 5
81875: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81876: LD_VAR 0 1
81880: PPUSH
81881: LD_VAR 0 2
81885: PPUSH
81886: LD_VAR 0 3
81890: PPUSH
81891: LD_VAR 0 4
81895: PPUSH
81896: LD_VAR 0 5
81900: PPUSH
81901: LD_VAR 0 6
81905: PPUSH
81906: CALL 20234 0 6
// end ;
81910: PPOPN 6
81912: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81913: LD_INT 0
81915: PPUSH
// begin if not units then
81916: LD_VAR 0 1
81920: NOT
81921: IFFALSE 81925
// exit ;
81923: GO 81925
// end ;
81925: PPOPN 7
81927: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81928: CALL 20138 0 0
// end ;
81932: PPOPN 1
81934: END
