// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 630 0 0
// PrepareArabian ;
  12: CALL 1065 0 0
// PrepareAmerican ;
  16: CALL 4126 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9096 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: LD_INT 42000
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 182: LD_ADDR_EXP 20
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 190: LD_ADDR_EXP 18
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// attackWave := 1 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 9 , 10 ] [ Difficulty ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 6
 213: PUSH
 214: LD_INT 8
 216: PUSH
 217: LD_INT 9
 219: PUSH
 220: LD_INT 10
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: PUSH
 229: LD_OWVAR 67
 233: ARRAY
 234: ST_TO_ADDR
// vehCounter := 0 ;
 235: LD_ADDR_EXP 22
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// convoyCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimInDepot := false ;
 251: LD_ADDR_EXP 25
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimIsFree := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 16
 274: PUSH
 275: LD_INT 16
 277: PUSH
 278: LD_INT 15
 280: PUSH
 281: LD_INT 14
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: PUSH
 290: LD_OWVAR 67
 294: ARRAY
 295: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 296: LD_ADDR_EXP 13
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// allowCargoEvacuation := false ;
 304: LD_ADDR_EXP 7
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// americanStartRun := false ;
 312: LD_ADDR_EXP 14
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// end ; end_of_file
 320: LD_VAR 0 1
 324: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 325: LD_INT 0
 327: PPUSH
// uc_side := side ;
 328: LD_ADDR_OWVAR 20
 332: PUSH
 333: LD_VAR 0 1
 337: ST_TO_ADDR
// uc_nation := nation ;
 338: LD_ADDR_OWVAR 21
 342: PUSH
 343: LD_VAR 0 2
 347: ST_TO_ADDR
// vc_chassis := chassis ;
 348: LD_ADDR_OWVAR 37
 352: PUSH
 353: LD_VAR 0 3
 357: ST_TO_ADDR
// vc_engine := engine ;
 358: LD_ADDR_OWVAR 39
 362: PUSH
 363: LD_VAR 0 4
 367: ST_TO_ADDR
// vc_control := control ;
 368: LD_ADDR_OWVAR 38
 372: PUSH
 373: LD_VAR 0 5
 377: ST_TO_ADDR
// vc_weapon := weapon ;
 378: LD_ADDR_OWVAR 40
 382: PUSH
 383: LD_VAR 0 6
 387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 388: LD_ADDR_OWVAR 41
 392: PUSH
 393: LD_VAR 0 7
 397: ST_TO_ADDR
// result := CreateVehicle ;
 398: LD_ADDR_VAR 0 8
 402: PUSH
 403: CALL_OW 45
 407: ST_TO_ADDR
// end ;
 408: LD_VAR 0 8
 412: RET
// export function SayX ( units , ident ) ; var i ; begin
 413: LD_INT 0
 415: PPUSH
 416: PPUSH
// result := false ;
 417: LD_ADDR_VAR 0 3
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// if not units then
 425: LD_VAR 0 1
 429: NOT
 430: IFFALSE 434
// exit ;
 432: GO 488
// for i in units do
 434: LD_ADDR_VAR 0 4
 438: PUSH
 439: LD_VAR 0 1
 443: PUSH
 444: FOR_IN
 445: IFFALSE 486
// if IsOk ( i ) then
 447: LD_VAR 0 4
 451: PPUSH
 452: CALL_OW 302
 456: IFFALSE 484
// begin Say ( i , ident ) ;
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 2
 467: PPUSH
 468: CALL_OW 88
// result := i ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// break ;
 482: GO 486
// end ;
 484: GO 444
 486: POP
 487: POP
// end ;
 488: LD_VAR 0 3
 492: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 493: LD_INT 0
 495: PPUSH
 496: PPUSH
// InitUc ;
 497: CALL_OW 18
// InitHc ;
 501: CALL_OW 19
// uc_side := 0 ;
 505: LD_ADDR_OWVAR 20
 509: PUSH
 510: LD_INT 0
 512: ST_TO_ADDR
// uc_nation := 0 ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_INT 0
 520: ST_TO_ADDR
// for i = 1 to amount do
 521: LD_ADDR_VAR 0 4
 525: PUSH
 526: DOUBLE
 527: LD_INT 1
 529: DEC
 530: ST_TO_ADDR
 531: LD_VAR 0 2
 535: PUSH
 536: FOR_TO
 537: IFFALSE 619
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 539: LD_ADDR_OWVAR 29
 543: PUSH
 544: LD_INT 9
 546: PPUSH
 547: LD_INT 12
 549: PPUSH
 550: CALL_OW 12
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 570: LD_ADDR_OWVAR 35
 574: PUSH
 575: LD_INT 1
 577: NEG
 578: PPUSH
 579: LD_INT 1
 581: PPUSH
 582: CALL_OW 12
 586: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 587: LD_INT 0
 589: PPUSH
 590: LD_INT 12
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 49
// end ;
 617: GO 536
 619: POP
 620: POP
// InitHc ;
 621: CALL_OW 19
// end ;
 625: LD_VAR 0 3
 629: RET
// export function CreateNature ; var i ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 634: LD_INT 2
 636: PPUSH
 637: LD_INT 5
 639: PUSH
 640: LD_INT 4
 642: PUSH
 643: LD_INT 4
 645: PUSH
 646: LD_INT 3
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: PUSH
 655: LD_OWVAR 67
 659: ARRAY
 660: PPUSH
 661: CALL 493 0 2
// for i := 1 to 2 do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_INT 2
 677: PUSH
 678: FOR_TO
 679: IFFALSE 714
// begin hc_class := 21 ;
 681: LD_ADDR_OWVAR 28
 685: PUSH
 686: LD_INT 21
 688: ST_TO_ADDR
// hc_gallery :=  ;
 689: LD_ADDR_OWVAR 33
 693: PUSH
 694: LD_STRING 
 696: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 697: CALL_OW 44
 701: PPUSH
 702: LD_INT 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// end ;
 712: GO 678
 714: POP
 715: POP
// for i := 1 to 2 do
 716: LD_ADDR_VAR 0 2
 720: PUSH
 721: DOUBLE
 722: LD_INT 1
 724: DEC
 725: ST_TO_ADDR
 726: LD_INT 2
 728: PUSH
 729: FOR_TO
 730: IFFALSE 765
// begin hc_class := 18 ;
 732: LD_ADDR_OWVAR 28
 736: PUSH
 737: LD_INT 18
 739: ST_TO_ADDR
// hc_gallery :=  ;
 740: LD_ADDR_OWVAR 33
 744: PUSH
 745: LD_STRING 
 747: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 748: CALL_OW 44
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 49
// end ;
 763: GO 729
 765: POP
 766: POP
// for i := 1 to 2 do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_INT 2
 779: PUSH
 780: FOR_TO
 781: IFFALSE 816
// begin hc_class := 13 ;
 783: LD_ADDR_OWVAR 28
 787: PUSH
 788: LD_INT 13
 790: ST_TO_ADDR
// hc_gallery :=  ;
 791: LD_ADDR_OWVAR 33
 795: PUSH
 796: LD_STRING 
 798: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 799: CALL_OW 44
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end ;
 814: GO 780
 816: POP
 817: POP
// end ;
 818: LD_VAR 0 1
 822: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 823: LD_INT 0
 825: PPUSH
 826: PPUSH
 827: PPUSH
// if not observer or not unit then
 828: LD_VAR 0 1
 832: NOT
 833: PUSH
 834: LD_VAR 0 2
 838: NOT
 839: OR
 840: IFFALSE 844
// exit ;
 842: GO 892
// if not See ( GetSide ( observer ) , unit ) then
 844: LD_VAR 0 1
 848: PPUSH
 849: CALL_OW 255
 853: PPUSH
 854: LD_VAR 0 2
 858: PPUSH
 859: CALL_OW 292
 863: NOT
 864: IFFALSE 868
// exit ;
 866: GO 892
// result := GetDistUnits ( observer , unit ) < 12 ;
 868: LD_ADDR_VAR 0 3
 872: PUSH
 873: LD_VAR 0 1
 877: PPUSH
 878: LD_VAR 0 2
 882: PPUSH
 883: CALL_OW 296
 887: PUSH
 888: LD_INT 12
 890: LESS
 891: ST_TO_ADDR
// end ;
 892: LD_VAR 0 3
 896: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 897: LD_INT 0
 899: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 900: LD_VAR 0 2
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: PPUSH
 909: LD_VAR 0 2
 913: PUSH
 914: LD_INT 2
 916: ARRAY
 917: PPUSH
 918: CALL_OW 488
 922: PUSH
 923: LD_VAR 0 2
 927: PUSH
 928: LD_INT 1
 930: ARRAY
 931: PPUSH
 932: LD_VAR 0 2
 936: PUSH
 937: LD_INT 2
 939: ARRAY
 940: PPUSH
 941: CALL_OW 428
 945: PUSH
 946: LD_INT 0
 948: EQUAL
 949: AND
 950: IFFALSE 984
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 952: LD_VAR 0 1
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: LD_VAR 0 2
 970: PUSH
 971: LD_INT 2
 973: ARRAY
 974: PPUSH
 975: LD_VAR 0 3
 979: PPUSH
 980: CALL_OW 48
// end ;
 984: LD_VAR 0 4
 988: RET
// export function ReverseArray ( array ) ; var i ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
// if not array then
 993: LD_VAR 0 1
 997: NOT
 998: IFFALSE 1002
// exit ;
1000: GO 1060
// result := [ ] ;
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: EMPTY
1008: ST_TO_ADDR
// for i := 1 to array do
1009: LD_ADDR_VAR 0 3
1013: PUSH
1014: DOUBLE
1015: LD_INT 1
1017: DEC
1018: ST_TO_ADDR
1019: LD_VAR 0 1
1023: PUSH
1024: FOR_TO
1025: IFFALSE 1058
// result := Insert ( result , 1 , array [ i ] ) ;
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_VAR 0 2
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_VAR 0 1
1044: PUSH
1045: LD_VAR 0 3
1049: ARRAY
1050: PPUSH
1051: CALL_OW 2
1055: ST_TO_ADDR
1056: GO 1024
1058: POP
1059: POP
// end ; end_of_file
1060: LD_VAR 0 2
1064: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
1069: PPUSH
1070: PPUSH
// uc_side := 5 ;
1071: LD_ADDR_OWVAR 20
1075: PUSH
1076: LD_INT 5
1078: ST_TO_ADDR
// uc_nation := 2 ;
1079: LD_ADDR_OWVAR 21
1083: PUSH
1084: LD_INT 2
1086: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1087: LD_INT 5
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 1
1097: PPUSH
1098: LD_INT 65
1100: PPUSH
1101: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1105: LD_ADDR_EXP 36
1109: PUSH
1110: LD_STRING Farmer
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 36773 0 3
1123: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1124: LD_ADDR_EXP 37
1128: PUSH
1129: LD_STRING Omar
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: LD_STRING 
1137: PPUSH
1138: CALL 36773 0 3
1142: ST_TO_ADDR
// omarSquad := [ ] ;
1143: LD_ADDR_EXP 40
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// heikeSquad := [ ] ;
1150: LD_ADDR_EXP 41
1154: PUSH
1155: EMPTY
1156: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1157: LD_ADDR_EXP 42
1161: PUSH
1162: EMPTY
1163: ST_TO_ADDR
// omarCargo := [ ] ;
1164: LD_ADDR_EXP 43
1168: PUSH
1169: EMPTY
1170: ST_TO_ADDR
// for i := 1 to 5 do
1171: LD_ADDR_VAR 0 2
1175: PUSH
1176: DOUBLE
1177: LD_INT 1
1179: DEC
1180: ST_TO_ADDR
1181: LD_INT 5
1183: PUSH
1184: FOR_TO
1185: IFFALSE 1343
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1187: LD_INT 0
1189: PPUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_VAR 0 2
1216: ARRAY
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 380
// un := CreateHuman ;
1225: LD_ADDR_VAR 0 3
1229: PUSH
1230: CALL_OW 44
1234: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1235: LD_ADDR_EXP 40
1239: PUSH
1240: LD_EXP 40
1244: PUSH
1245: LD_VAR 0 3
1249: UNION
1250: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1251: LD_VAR 0 3
1255: PPUSH
1256: LD_INT 87
1258: PUSH
1259: LD_INT 30
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 91
1268: PUSH
1269: LD_INT 32
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 82
1278: PUSH
1279: LD_INT 15
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 79
1288: PUSH
1289: LD_INT 14
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: PUSH
1296: LD_INT 82
1298: PUSH
1299: LD_INT 13
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: PPUSH
1319: LD_INT 0
1321: PPUSH
1322: CALL 897 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1326: LD_VAR 0 3
1330: PPUSH
1331: LD_INT 93
1333: PPUSH
1334: LD_INT 21
1336: PPUSH
1337: CALL_OW 118
// end ;
1341: GO 1184
1343: POP
1344: POP
// uc_side := 2 ;
1345: LD_ADDR_OWVAR 20
1349: PUSH
1350: LD_INT 2
1352: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1353: LD_ADDR_EXP 28
1357: PUSH
1358: LD_STRING Heike
1360: PPUSH
1361: LD_EXP 1
1365: NOT
1366: PPUSH
1367: LD_EXP 2
1371: PPUSH
1372: CALL 36773 0 3
1376: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1377: LD_ADDR_EXP 32
1381: PUSH
1382: LD_STRING Aviradze
1384: PPUSH
1385: LD_EXP 1
1389: NOT
1390: PPUSH
1391: LD_EXP 2
1395: PPUSH
1396: CALL 36773 0 3
1400: ST_TO_ADDR
// tmp := [ ] ;
1401: LD_ADDR_VAR 0 4
1405: PUSH
1406: EMPTY
1407: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1408: LD_ADDR_EXP 29
1412: PUSH
1413: LD_STRING Givi
1415: PPUSH
1416: LD_EXP 1
1420: NOT
1421: PPUSH
1422: LD_EXP 2
1426: PPUSH
1427: CALL 36773 0 3
1431: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1432: LD_ADDR_EXP 30
1436: PUSH
1437: LD_STRING Mike
1439: PPUSH
1440: LD_EXP 1
1444: NOT
1445: PPUSH
1446: LD_EXP 2
1450: PPUSH
1451: CALL 36773 0 3
1455: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1456: LD_ADDR_EXP 31
1460: PUSH
1461: LD_STRING Kamil
1463: PPUSH
1464: LD_EXP 1
1468: NOT
1469: PPUSH
1470: LD_EXP 2
1474: PPUSH
1475: CALL 36773 0 3
1479: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1480: LD_ADDR_EXP 33
1484: PUSH
1485: LD_STRING Kaia
1487: PPUSH
1488: LD_EXP 1
1492: NOT
1493: PPUSH
1494: LD_EXP 2
1498: PPUSH
1499: CALL 36773 0 3
1503: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1504: LD_ADDR_EXP 34
1508: PUSH
1509: LD_STRING Sophia
1511: PPUSH
1512: LD_EXP 1
1516: NOT
1517: PPUSH
1518: LD_EXP 2
1522: PPUSH
1523: CALL 36773 0 3
1527: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1528: LD_ADDR_EXP 35
1532: PUSH
1533: LD_STRING Markov
1535: PPUSH
1536: LD_EXP 1
1540: NOT
1541: PPUSH
1542: LD_EXP 2
1546: PPUSH
1547: CALL 36773 0 3
1551: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1552: LD_ADDR_EXP 42
1556: PUSH
1557: LD_STRING 02_others
1559: PPUSH
1560: CALL_OW 31
1564: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_EXP 30
1574: PUSH
1575: LD_EXP 31
1579: PUSH
1580: LD_EXP 33
1584: PUSH
1585: LD_EXP 34
1589: PUSH
1590: LD_EXP 35
1594: PUSH
1595: LD_EXP 29
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: LD_EXP 42
1612: ADD
1613: PUSH
1614: LD_INT 0
1616: DIFF
1617: ST_TO_ADDR
// heikeSquad := tmp ;
1618: LD_ADDR_EXP 41
1622: PUSH
1623: LD_VAR 0 4
1627: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1628: LD_EXP 41
1632: PPUSH
1633: LD_INT 25
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 72
1647: PUSH
1648: LD_INT 3
1650: LESS
1651: IFFALSE 1701
// begin SetClass ( Kaia , 1 ) ;
1653: LD_EXP 33
1657: PPUSH
1658: LD_INT 1
1660: PPUSH
1661: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1665: LD_EXP 30
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1677: LD_EXP 29
1681: PPUSH
1682: LD_INT 1
1684: PPUSH
1685: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1689: LD_EXP 28
1693: PPUSH
1694: LD_INT 1
1696: PPUSH
1697: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1701: LD_ADDR_VAR 0 4
1705: PUSH
1706: LD_VAR 0 4
1710: PUSH
1711: LD_STRING 02_ape
1713: PPUSH
1714: CALL_OW 31
1718: UNION
1719: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1720: LD_EXP 28
1724: PPUSH
1725: LD_INT 92
1727: PPUSH
1728: LD_INT 17
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1738: LD_EXP 36
1742: PPUSH
1743: LD_INT 95
1745: PPUSH
1746: LD_INT 19
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1756: LD_EXP 37
1760: PPUSH
1761: LD_INT 89
1763: PPUSH
1764: LD_INT 25
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1774: LD_EXP 32
1778: PPUSH
1779: LD_INT 92
1781: PPUSH
1782: LD_INT 27
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1792: LD_EXP 37
1796: PPUSH
1797: LD_EXP 32
1801: PPUSH
1802: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1806: LD_EXP 32
1810: PPUSH
1811: LD_EXP 37
1815: PPUSH
1816: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1820: LD_EXP 28
1824: PUSH
1825: LD_EXP 36
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PPUSH
1834: LD_EXP 37
1838: PPUSH
1839: CALL_OW 119
// if tmp then
1843: LD_VAR 0 4
1847: IFFALSE 1901
// for i in tmp do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: LD_VAR 0 4
1858: PUSH
1859: FOR_IN
1860: IFFALSE 1899
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1862: LD_VAR 0 2
1866: PPUSH
1867: LD_INT 94
1869: PPUSH
1870: LD_INT 14
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_EXP 28
1892: PPUSH
1893: CALL_OW 119
// end ;
1897: GO 1859
1899: POP
1900: POP
// farmerSquad := [ ] ;
1901: LD_ADDR_EXP 39
1905: PUSH
1906: EMPTY
1907: ST_TO_ADDR
// uc_side := 5 ;
1908: LD_ADDR_OWVAR 20
1912: PUSH
1913: LD_INT 5
1915: ST_TO_ADDR
// uc_nation := 2 ;
1916: LD_ADDR_OWVAR 21
1920: PUSH
1921: LD_INT 2
1923: ST_TO_ADDR
// for i := 1 to 4 do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_INT 4
1936: PUSH
1937: FOR_TO
1938: IFFALSE 2016
// begin PrepareHuman ( false , 1 , 2 ) ;
1940: LD_INT 0
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_INT 2
1948: PPUSH
1949: CALL_OW 380
// un := CreateHuman ;
1953: LD_ADDR_VAR 0 3
1957: PUSH
1958: CALL_OW 44
1962: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1963: LD_VAR 0 3
1967: PPUSH
1968: LD_INT 102
1970: PPUSH
1971: LD_INT 27
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: LD_INT 0
1979: PPUSH
1980: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1984: LD_ADDR_EXP 39
1988: PUSH
1989: LD_EXP 39
1993: PUSH
1994: LD_VAR 0 3
1998: UNION
1999: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2000: LD_VAR 0 3
2004: PPUSH
2005: LD_EXP 37
2009: PPUSH
2010: CALL_OW 119
// end ;
2014: GO 1937
2016: POP
2017: POP
// for i := 1 to 2 do
2018: LD_ADDR_VAR 0 2
2022: PUSH
2023: DOUBLE
2024: LD_INT 1
2026: DEC
2027: ST_TO_ADDR
2028: LD_INT 2
2030: PUSH
2031: FOR_TO
2032: IFFALSE 2110
// begin PrepareHuman ( false , 2 , 2 ) ;
2034: LD_INT 0
2036: PPUSH
2037: LD_INT 2
2039: PPUSH
2040: LD_INT 2
2042: PPUSH
2043: CALL_OW 380
// un := CreateHuman ;
2047: LD_ADDR_VAR 0 3
2051: PUSH
2052: CALL_OW 44
2056: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2057: LD_VAR 0 3
2061: PPUSH
2062: LD_INT 108
2064: PPUSH
2065: LD_INT 62
2067: PPUSH
2068: LD_INT 2
2070: PPUSH
2071: LD_INT 0
2073: PPUSH
2074: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2078: LD_ADDR_EXP 39
2082: PUSH
2083: LD_EXP 39
2087: PUSH
2088: LD_VAR 0 3
2092: UNION
2093: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2094: LD_VAR 0 3
2098: PPUSH
2099: LD_EXP 37
2103: PPUSH
2104: CALL_OW 119
// end ;
2108: GO 2031
2110: POP
2111: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2112: LD_INT 109
2114: PPUSH
2115: LD_INT 63
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: LD_INT 15
2123: NEG
2124: PPUSH
2125: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2129: LD_INT 109
2131: PPUSH
2132: LD_INT 63
2134: PPUSH
2135: LD_INT 2
2137: PPUSH
2138: CALL_OW 331
// end ;
2142: LD_VAR 0 1
2146: RET
// export function PrepareIbrahim ( x , y ) ; begin
2147: LD_INT 0
2149: PPUSH
// uc_side := 6 ;
2150: LD_ADDR_OWVAR 20
2154: PUSH
2155: LD_INT 6
2157: ST_TO_ADDR
// uc_nation := 3 ;
2158: LD_ADDR_OWVAR 21
2162: PUSH
2163: LD_INT 3
2165: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2166: LD_ADDR_EXP 38
2170: PUSH
2171: LD_STRING IbrahimRu
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: LD_STRING 
2179: PPUSH
2180: CALL 36773 0 3
2184: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2185: LD_EXP 38
2189: PPUSH
2190: LD_VAR 0 1
2194: PPUSH
2195: LD_VAR 0 2
2199: PPUSH
2200: LD_INT 8
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL_OW 50
// end ;
2210: LD_VAR 0 3
2214: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2215: LD_EXP 37
2219: PUSH
2220: LD_EXP 40
2224: ADD
2225: PPUSH
2226: LD_INT 95
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PPUSH
2236: CALL_OW 72
2240: IFFALSE 2296
2242: GO 2244
2244: DISABLE
2245: LD_INT 0
2247: PPUSH
// begin enable ;
2248: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2249: LD_ADDR_VAR 0 1
2253: PUSH
2254: LD_EXP 37
2258: PUSH
2259: LD_EXP 40
2263: ADD
2264: PPUSH
2265: LD_INT 95
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 72
2279: PUSH
2280: FOR_IN
2281: IFFALSE 2294
// RemoveUnit ( i ) ;
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 64
2292: GO 2280
2294: POP
2295: POP
// end ;
2296: PPOPN 1
2298: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2299: LD_EXP 3
2303: PUSH
2304: LD_EXP 36
2308: PPUSH
2309: LD_INT 4
2311: PPUSH
2312: CALL_OW 308
2316: AND
2317: IFFALSE 3121
2319: GO 2321
2321: DISABLE
2322: LD_INT 0
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2328: LD_EXP 36
2332: PPUSH
2333: LD_INT 110
2335: PPUSH
2336: LD_INT 60
2338: PPUSH
2339: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2343: LD_EXP 36
2347: PPUSH
2348: LD_INT 110
2350: PPUSH
2351: LD_INT 61
2353: PPUSH
2354: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2358: LD_ADDR_VAR 0 2
2362: PUSH
2363: LD_EXP 39
2367: PPUSH
2368: LD_INT 25
2370: PUSH
2371: LD_INT 1
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PPUSH
2378: CALL_OW 72
2382: ST_TO_ADDR
// if tmp then
2383: LD_VAR 0 2
2387: IFFALSE 2481
// begin for i := 1 to 2 do
2389: LD_ADDR_VAR 0 1
2393: PUSH
2394: DOUBLE
2395: LD_INT 1
2397: DEC
2398: ST_TO_ADDR
2399: LD_INT 2
2401: PUSH
2402: FOR_TO
2403: IFFALSE 2479
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2405: LD_VAR 0 2
2409: PUSH
2410: LD_VAR 0 1
2414: ARRAY
2415: PPUSH
2416: LD_INT 5
2418: PPUSH
2419: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 1
2432: ARRAY
2433: PPUSH
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2441: LD_VAR 0 2
2445: PUSH
2446: LD_VAR 0 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2456: LD_VAR 0 2
2460: PUSH
2461: LD_VAR 0 1
2465: ARRAY
2466: PPUSH
2467: LD_INT 107
2469: PPUSH
2470: LD_INT 66
2472: PPUSH
2473: CALL_OW 171
// end ;
2477: GO 2402
2479: POP
2480: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_EXP 39
2490: PPUSH
2491: LD_INT 25
2493: PUSH
2494: LD_INT 2
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 72
2505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2506: LD_INT 35
2508: PPUSH
2509: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: LD_EXP 39
2522: PPUSH
2523: LD_INT 25
2525: PUSH
2526: LD_INT 2
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: ST_TO_ADDR
// until tmp ;
2538: LD_VAR 0 2
2542: IFFALSE 2506
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2544: LD_VAR 0 2
2548: PPUSH
2549: LD_INT 31
2551: PPUSH
2552: LD_INT 102
2554: PPUSH
2555: LD_INT 69
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2565: LD_INT 35
2567: PPUSH
2568: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2572: LD_EXP 39
2576: PPUSH
2577: LD_INT 3
2579: PUSH
2580: LD_INT 60
2582: PUSH
2583: EMPTY
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 25
2592: PUSH
2593: LD_INT 2
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 72
2608: IFFALSE 2565
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2610: LD_ADDR_VAR 0 2
2614: PUSH
2615: LD_EXP 39
2619: PPUSH
2620: LD_INT 25
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PPUSH
2630: CALL_OW 72
2634: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2635: LD_VAR 0 2
2639: PPUSH
2640: LD_INT 6
2642: PPUSH
2643: LD_INT 116
2645: PPUSH
2646: LD_INT 55
2648: PPUSH
2649: LD_INT 4
2651: PPUSH
2652: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2656: LD_VAR 0 2
2660: PPUSH
2661: LD_INT 4
2663: PPUSH
2664: LD_INT 116
2666: PPUSH
2667: LD_INT 70
2669: PPUSH
2670: LD_INT 5
2672: PPUSH
2673: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2677: LD_VAR 0 2
2681: PPUSH
2682: LD_INT 31
2684: PPUSH
2685: LD_INT 109
2687: PPUSH
2688: LD_INT 50
2690: PPUSH
2691: LD_INT 2
2693: PPUSH
2694: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2698: LD_INT 35
2700: PPUSH
2701: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2705: LD_INT 22
2707: PUSH
2708: LD_INT 5
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 30
2717: PUSH
2718: LD_INT 4
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 3
2727: PUSH
2728: LD_INT 57
2730: PUSH
2731: EMPTY
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: PPUSH
2743: CALL_OW 69
2747: IFFALSE 2698
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: LD_INT 22
2756: PUSH
2757: LD_INT 5
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 30
2766: PUSH
2767: LD_INT 4
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 3
2776: PUSH
2777: LD_INT 57
2779: PUSH
2780: EMPTY
2781: LIST
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: PUSH
2797: LD_INT 1
2799: ARRAY
2800: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2801: LD_ADDR_VAR 0 2
2805: PUSH
2806: LD_EXP 39
2810: PPUSH
2811: LD_INT 25
2813: PUSH
2814: LD_INT 1
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PPUSH
2821: CALL_OW 72
2825: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2826: LD_VAR 0 2
2830: PPUSH
2831: LD_VAR 0 3
2835: PPUSH
2836: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2840: LD_INT 35
2842: PPUSH
2843: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2847: LD_INT 22
2849: PUSH
2850: LD_INT 5
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 30
2859: PUSH
2860: LD_INT 31
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: LD_INT 57
2872: PUSH
2873: EMPTY
2874: LIST
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 69
2889: PUSH
2890: LD_INT 2
2892: GREATEREQUAL
2893: IFFALSE 2840
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: LD_EXP 39
2904: PPUSH
2905: LD_INT 25
2907: PUSH
2908: LD_INT 2
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PPUSH
2915: CALL_OW 72
2919: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 1
2927: ARRAY
2928: PPUSH
2929: LD_INT 5
2931: PPUSH
2932: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 2
2943: ARRAY
2944: PUSH
2945: LD_VAR 0 2
2949: PUSH
2950: LD_INT 3
2952: ARRAY
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: PPUSH
2958: LD_VAR 0 3
2962: PPUSH
2963: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_INT 3
2983: ARRAY
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PPUSH
2989: LD_INT 1
2991: PPUSH
2992: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 2
3003: ARRAY
3004: PUSH
3005: LD_VAR 0 2
3009: PUSH
3010: LD_INT 3
3012: ARRAY
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3022: LD_ADDR_VAR 0 4
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_INT 5
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 30
3039: PUSH
3040: LD_INT 31
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// for i := 1 to 2 do
3056: LD_ADDR_VAR 0 1
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_INT 2
3068: PUSH
3069: FOR_TO
3070: IFFALSE 3104
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3072: LD_VAR 0 2
3076: PUSH
3077: LD_VAR 0 1
3081: PUSH
3082: LD_INT 1
3084: PLUS
3085: ARRAY
3086: PPUSH
3087: LD_VAR 0 4
3091: PUSH
3092: LD_VAR 0 1
3096: ARRAY
3097: PPUSH
3098: CALL_OW 180
3102: GO 3069
3104: POP
3105: POP
// wait ( 1 1$00 ) ;
3106: LD_INT 2100
3108: PPUSH
3109: CALL_OW 67
// farmerBaseReady := true ;
3113: LD_ADDR_EXP 4
3117: PUSH
3118: LD_INT 1
3120: ST_TO_ADDR
// end ;
3121: PPOPN 4
3123: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3124: LD_EXP 4
3128: PUSH
3129: LD_EXP 11
3133: NOT
3134: AND
3135: IFFALSE 3657
3137: GO 3139
3139: DISABLE
3140: LD_INT 0
3142: PPUSH
3143: PPUSH
3144: PPUSH
3145: PPUSH
3146: PPUSH
// begin enable ;
3147: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3148: LD_ADDR_VAR 0 3
3152: PUSH
3153: LD_EXP 39
3157: PPUSH
3158: LD_INT 25
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 72
3172: PUSH
3173: LD_EXP 36
3177: ADD
3178: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_EXP 39
3188: PPUSH
3189: LD_INT 25
3191: PUSH
3192: LD_INT 2
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 72
3203: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3204: LD_ADDR_VAR 0 5
3208: PUSH
3209: LD_INT 22
3211: PUSH
3212: LD_INT 5
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 21
3221: PUSH
3222: LD_INT 3
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 3
3231: PUSH
3232: LD_INT 24
3234: PUSH
3235: LD_INT 1000
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PPUSH
3251: CALL_OW 69
3255: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3256: LD_ADDR_VAR 0 4
3260: PUSH
3261: LD_INT 22
3263: PUSH
3264: LD_INT 5
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 30
3273: PUSH
3274: LD_INT 4
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PPUSH
3285: CALL_OW 69
3289: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3290: LD_VAR 0 4
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: CALL_OW 302
3303: IFFALSE 3367
// for i in sol do
3305: LD_ADDR_VAR 0 1
3309: PUSH
3310: LD_VAR 0 3
3314: PUSH
3315: FOR_IN
3316: IFFALSE 3365
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3318: LD_VAR 0 1
3322: PPUSH
3323: CALL_OW 256
3327: PUSH
3328: LD_INT 999
3330: LESS
3331: PUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL_OW 310
3341: NOT
3342: AND
3343: IFFALSE 3363
// ComEnterUnit ( i , arm [ 1 ] ) ;
3345: LD_VAR 0 1
3349: PPUSH
3350: LD_VAR 0 4
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PPUSH
3359: CALL_OW 120
3363: GO 3315
3365: POP
3366: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3367: LD_VAR 0 2
3371: NOT
3372: PUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 1
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: LD_INT 21
3385: PUSH
3386: LD_INT 1
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PPUSH
3397: CALL_OW 69
3401: NOT
3402: AND
3403: IFFALSE 3495
// begin uc_side := 5 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 5
3412: ST_TO_ADDR
// uc_nation := 2 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 2
3420: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3421: LD_INT 0
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 2
3429: PPUSH
3430: CALL_OW 380
// eng := CreateHuman ;
3434: LD_ADDR_VAR 0 2
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3444: LD_VAR 0 2
3448: PPUSH
3449: LD_INT 102
3451: PPUSH
3452: LD_INT 8
3454: PPUSH
3455: LD_INT 0
3457: PPUSH
3458: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3462: LD_VAR 0 2
3466: PPUSH
3467: LD_INT 110
3469: PPUSH
3470: LD_INT 60
3472: PPUSH
3473: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3477: LD_ADDR_EXP 39
3481: PUSH
3482: LD_EXP 39
3486: PUSH
3487: LD_VAR 0 2
3491: UNION
3492: ST_TO_ADDR
// end else
3493: GO 3657
// begin for i in eng do
3495: LD_ADDR_VAR 0 1
3499: PUSH
3500: LD_VAR 0 2
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3655
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3508: LD_INT 10
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: CALL_OW 287
3518: IFFALSE 3569
// begin if IsInUnit ( i ) then
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL_OW 310
3529: IFFALSE 3540
// ComExitBuilding ( i ) ;
3531: LD_VAR 0 1
3535: PPUSH
3536: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 10
3547: PPUSH
3548: CALL_OW 308
3552: NOT
3553: IFFALSE 3567
// AddComMoveToArea ( i , collectFarmerArea ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 10
3562: PPUSH
3563: CALL_OW 173
// end else
3567: GO 3653
// begin if damagedBuilding then
3569: LD_VAR 0 5
3573: IFFALSE 3617
// begin if IsInUnit ( i ) then
3575: LD_VAR 0 1
3579: PPUSH
3580: CALL_OW 310
3584: IFFALSE 3597
// ComExitBuilding ( i ) else
3586: LD_VAR 0 1
3590: PPUSH
3591: CALL_OW 122
3595: GO 3615
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3597: LD_VAR 0 1
3601: PPUSH
3602: LD_VAR 0 5
3606: PUSH
3607: LD_INT 1
3609: ARRAY
3610: PPUSH
3611: CALL_OW 130
// end else
3615: GO 3653
// if not IsInUnit ( i ) and not HasTask ( i ) then
3617: LD_VAR 0 1
3621: PPUSH
3622: CALL_OW 310
3626: NOT
3627: PUSH
3628: LD_VAR 0 1
3632: PPUSH
3633: CALL_OW 314
3637: NOT
3638: AND
3639: IFFALSE 3653
// ComEnterUnit ( i , arDepot ) ;
3641: LD_VAR 0 1
3645: PPUSH
3646: LD_INT 5
3648: PPUSH
3649: CALL_OW 120
// end ; end ;
3653: GO 3505
3655: POP
3656: POP
// end ; end ;
3657: PPOPN 5
3659: END
// export function CargoEvacuation ; begin
3660: LD_INT 0
3662: PPUSH
// wait ( 0 0$20 ) ;
3663: LD_INT 700
3665: PPUSH
3666: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3670: LD_ADDR_EXP 21
3674: PUSH
3675: LD_EXP 21
3679: PUSH
3680: LD_INT 1
3682: MINUS
3683: ST_TO_ADDR
// if omarCargoCounter = 0 then
3684: LD_EXP 21
3688: PUSH
3689: LD_INT 0
3691: EQUAL
3692: IFFALSE 3696
// exit ;
3694: GO 4003
// if omarCargo then
3696: LD_EXP 43
3700: IFFALSE 3711
// RemoveUnit ( omarCargo ) ;
3702: LD_EXP 43
3706: PPUSH
3707: CALL_OW 64
// omarCargo := PrepareCargo ;
3711: LD_ADDR_EXP 43
3715: PUSH
3716: CALL 4008 0 0
3720: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3721: LD_EXP 43
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3733: LD_EXP 43
3737: PPUSH
3738: LD_INT 107
3740: PPUSH
3741: LD_INT 59
3743: PPUSH
3744: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3748: LD_INT 35
3750: PPUSH
3751: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3755: LD_EXP 43
3759: PPUSH
3760: LD_INT 107
3762: PPUSH
3763: LD_INT 59
3765: PPUSH
3766: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3770: LD_EXP 43
3774: PPUSH
3775: CALL_OW 302
3779: NOT
3780: PUSH
3781: LD_EXP 43
3785: PPUSH
3786: CALL_OW 301
3790: OR
3791: IFFALSE 3795
// exit ;
3793: GO 4003
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3795: LD_EXP 43
3799: PPUSH
3800: LD_INT 107
3802: PPUSH
3803: LD_INT 59
3805: PPUSH
3806: CALL_OW 307
3810: PUSH
3811: LD_EXP 43
3815: PPUSH
3816: LD_INT 5
3818: PPUSH
3819: CALL_OW 296
3823: PUSH
3824: LD_INT 6
3826: LESS
3827: OR
3828: IFFALSE 3748
// SetTag ( omarCargo , 1 ) ;
3830: LD_EXP 43
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 109
// wait ( 0 0$05 ) ;
3842: LD_INT 175
3844: PPUSH
3845: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3849: LD_EXP 43
3853: PPUSH
3854: LD_INT 5
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3864: LD_EXP 43
3868: PPUSH
3869: LD_INT 103
3871: PPUSH
3872: LD_INT 9
3874: PPUSH
3875: CALL_OW 171
// wait ( 0 0$1 ) ;
3879: LD_INT 35
3881: PPUSH
3882: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3886: LD_EXP 43
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 100
3896: PPUSH
3897: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3901: LD_INT 35
3903: PPUSH
3904: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3908: LD_EXP 43
3912: PPUSH
3913: LD_INT 103
3915: PPUSH
3916: LD_INT 9
3918: PPUSH
3919: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3923: LD_EXP 43
3927: PPUSH
3928: CALL_OW 302
3932: NOT
3933: PUSH
3934: LD_EXP 43
3938: PPUSH
3939: CALL_OW 301
3943: OR
3944: IFFALSE 3948
// exit ;
3946: GO 4003
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3948: LD_EXP 43
3952: PPUSH
3953: LD_INT 103
3955: PPUSH
3956: LD_INT 9
3958: PPUSH
3959: CALL_OW 307
3963: PUSH
3964: LD_EXP 43
3968: PPUSH
3969: LD_INT 3
3971: PPUSH
3972: CALL_OW 308
3976: OR
3977: PUSH
3978: LD_EXP 43
3982: PPUSH
3983: CALL_OW 110
3987: PUSH
3988: LD_INT 0
3990: GREATER
3991: AND
3992: IFFALSE 3901
// RemoveUnit ( omarCargo ) ;
3994: LD_EXP 43
3998: PPUSH
3999: CALL_OW 64
// end ;
4003: LD_VAR 0 1
4007: RET
// export function PrepareCargo ; var un , veh ; begin
4008: LD_INT 0
4010: PPUSH
4011: PPUSH
4012: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4013: LD_ADDR_VAR 0 3
4017: PUSH
4018: LD_INT 5
4020: PPUSH
4021: LD_INT 2
4023: PPUSH
4024: LD_INT 14
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_INT 1
4032: PPUSH
4033: LD_INT 32
4035: PPUSH
4036: LD_INT 80
4038: PPUSH
4039: CALL 325 0 7
4043: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4044: LD_VAR 0 3
4048: PPUSH
4049: LD_INT 4
4051: PPUSH
4052: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_INT 101
4063: PPUSH
4064: LD_INT 8
4066: PPUSH
4067: LD_INT 0
4069: PPUSH
4070: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4074: LD_INT 0
4076: PPUSH
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 2
4082: PPUSH
4083: CALL_OW 380
// un := CreateHuman ;
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: CALL_OW 44
4096: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_VAR 0 3
4106: PPUSH
4107: CALL_OW 52
// result := veh ;
4111: LD_ADDR_VAR 0 1
4115: PUSH
4116: LD_VAR 0 3
4120: ST_TO_ADDR
// end ; end_of_file
4121: LD_VAR 0 1
4125: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
// usForces := [ ] ;
4131: LD_ADDR_EXP 44
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4138: LD_ADDR_EXP 46
4142: PUSH
4143: LD_INT 6
4145: PUSH
4146: LD_INT 32
4148: PUSH
4149: LD_INT 27
4151: PUSH
4152: LD_INT 1
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 43
4166: PUSH
4167: LD_INT 24
4169: PUSH
4170: LD_INT 5
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 27
4181: PUSH
4182: LD_INT 29
4184: PUSH
4185: LD_INT 21
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: LIST
4201: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4202: LD_INT 11
4204: PPUSH
4205: CALL_OW 274
4209: PPUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 150
4215: PUSH
4216: LD_INT 120
4218: PUSH
4219: LD_INT 100
4221: PUSH
4222: LD_INT 80
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: PUSH
4231: LD_OWVAR 67
4235: ARRAY
4236: PPUSH
4237: CALL_OW 277
// if Difficulty = 1 then
4241: LD_OWVAR 67
4245: PUSH
4246: LD_INT 1
4248: EQUAL
4249: IFFALSE 4258
// RemoveUnit ( hillBun ) ;
4251: LD_INT 14
4253: PPUSH
4254: CALL_OW 64
// uc_side := 1 ;
4258: LD_ADDR_OWVAR 20
4262: PUSH
4263: LD_INT 1
4265: ST_TO_ADDR
// uc_nation := 1 ;
4266: LD_ADDR_OWVAR 21
4270: PUSH
4271: LD_INT 1
4273: ST_TO_ADDR
// hc_gallery :=  ;
4274: LD_ADDR_OWVAR 33
4278: PUSH
4279: LD_STRING 
4281: ST_TO_ADDR
// hc_name :=  ;
4282: LD_ADDR_OWVAR 26
4286: PUSH
4287: LD_STRING 
4289: ST_TO_ADDR
// hc_importance := 0 ;
4290: LD_ADDR_OWVAR 32
4294: PUSH
4295: LD_INT 0
4297: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4298: LD_INT 1
4300: PPUSH
4301: LD_INT 1
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: CALL_OW 380
// usCommander := CreateHuman ;
4311: LD_ADDR_EXP 45
4315: PUSH
4316: CALL_OW 44
4320: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4321: LD_EXP 45
4325: PPUSH
4326: LD_INT 11
4328: PPUSH
4329: CALL_OW 52
// if Difficulty > 1 then
4333: LD_OWVAR 67
4337: PUSH
4338: LD_INT 1
4340: GREATER
4341: IFFALSE 4423
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4343: LD_INT 0
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: LD_INT 1
4351: PUSH
4352: LD_INT 2
4354: PUSH
4355: LD_INT 3
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: LIST
4362: PUSH
4363: LD_OWVAR 67
4367: ARRAY
4368: PPUSH
4369: CALL_OW 380
// un := CreateHuman ;
4373: LD_ADDR_VAR 0 3
4377: PUSH
4378: CALL_OW 44
4382: ST_TO_ADDR
// usForces := usForces union un ;
4383: LD_ADDR_EXP 44
4387: PUSH
4388: LD_EXP 44
4392: PUSH
4393: LD_VAR 0 3
4397: UNION
4398: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_INT 1
4406: PPUSH
4407: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 14
4418: PPUSH
4419: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4423: LD_ADDR_VAR 0 2
4427: PUSH
4428: DOUBLE
4429: LD_INT 1
4431: DEC
4432: ST_TO_ADDR
4433: LD_INT 2
4435: PUSH
4436: LD_INT 3
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: LD_INT 4
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_OWVAR 67
4455: ARRAY
4456: PUSH
4457: FOR_TO
4458: IFFALSE 4604
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4460: LD_INT 0
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: LD_INT 1
4468: PUSH
4469: LD_INT 2
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: PUSH
4484: LD_OWVAR 67
4488: ARRAY
4489: PPUSH
4490: CALL_OW 380
// un := CreateHuman ;
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: CALL_OW 44
4503: ST_TO_ADDR
// usForces := usForces union un ;
4504: LD_ADDR_EXP 44
4508: PUSH
4509: LD_EXP 44
4513: PUSH
4514: LD_VAR 0 3
4518: UNION
4519: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4520: LD_VAR 0 3
4524: PPUSH
4525: LD_INT 39
4527: PPUSH
4528: LD_INT 24
4530: PPUSH
4531: LD_INT 4
4533: PPUSH
4534: LD_INT 0
4536: PPUSH
4537: CALL_OW 50
// if i < 3 then
4541: LD_VAR 0 2
4545: PUSH
4546: LD_INT 3
4548: LESS
4549: IFFALSE 4602
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4551: LD_VAR 0 3
4555: PPUSH
4556: LD_INT 22
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 58
4568: PUSH
4569: EMPTY
4570: LIST
4571: PUSH
4572: LD_INT 30
4574: PUSH
4575: LD_INT 31
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: PPUSH
4587: CALL_OW 69
4591: PUSH
4592: LD_VAR 0 2
4596: ARRAY
4597: PPUSH
4598: CALL_OW 120
// end ;
4602: GO 4457
4604: POP
4605: POP
// for i := 1 to 2 do
4606: LD_ADDR_VAR 0 2
4610: PUSH
4611: DOUBLE
4612: LD_INT 1
4614: DEC
4615: ST_TO_ADDR
4616: LD_INT 2
4618: PUSH
4619: FOR_TO
4620: IFFALSE 4684
// begin PrepareHuman ( false , 2 , 2 ) ;
4622: LD_INT 0
4624: PPUSH
4625: LD_INT 2
4627: PPUSH
4628: LD_INT 2
4630: PPUSH
4631: CALL_OW 380
// un := CreateHuman ;
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: CALL_OW 44
4644: ST_TO_ADDR
// usForces := usForces union un ;
4645: LD_ADDR_EXP 44
4649: PUSH
4650: LD_EXP 44
4654: PUSH
4655: LD_VAR 0 3
4659: UNION
4660: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_INT 39
4668: PPUSH
4669: LD_INT 24
4671: PPUSH
4672: LD_INT 4
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: CALL_OW 50
// end ;
4682: GO 4619
4684: POP
4685: POP
// PrepareHuman ( false , 4 , 1 ) ;
4686: LD_INT 0
4688: PPUSH
4689: LD_INT 4
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 380
// un := CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// usForces := usForces union un ;
4709: LD_ADDR_EXP 44
4713: PUSH
4714: LD_EXP 44
4718: PUSH
4719: LD_VAR 0 3
4723: UNION
4724: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4725: LD_VAR 0 3
4729: PPUSH
4730: LD_INT 39
4732: PPUSH
4733: LD_INT 24
4735: PPUSH
4736: LD_INT 4
4738: PPUSH
4739: LD_INT 0
4741: PPUSH
4742: CALL_OW 50
// end ;
4746: LD_VAR 0 1
4750: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4751: LD_EXP 44
4755: PUSH
4756: LD_EXP 6
4760: NOT
4761: AND
4762: PUSH
4763: LD_EXP 14
4767: NOT
4768: AND
4769: IFFALSE 5200
4771: GO 4773
4773: DISABLE
4774: LD_INT 0
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// begin enable ;
4781: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4782: LD_ADDR_VAR 0 3
4786: PUSH
4787: LD_EXP 44
4791: PPUSH
4792: LD_INT 25
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 72
4806: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4807: LD_ADDR_VAR 0 4
4811: PUSH
4812: LD_EXP 44
4816: PPUSH
4817: LD_INT 25
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: CALL_OW 72
4831: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4832: LD_ADDR_VAR 0 5
4836: PUSH
4837: LD_EXP 44
4841: PPUSH
4842: LD_INT 25
4844: PUSH
4845: LD_INT 4
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 72
4856: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4857: LD_INT 7
4859: PPUSH
4860: LD_INT 22
4862: PUSH
4863: LD_INT 2
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL_OW 70
4874: PUSH
4875: LD_INT 1
4877: EQUAL
4878: IFFALSE 4954
// for i in sol do
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_VAR 0 4
4889: PUSH
4890: FOR_IN
4891: IFFALSE 4952
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4893: LD_VAR 0 1
4897: PPUSH
4898: CALL_OW 310
4902: NOT
4903: PUSH
4904: LD_VAR 0 1
4908: PPUSH
4909: CALL_OW 310
4913: PPUSH
4914: CALL_OW 266
4918: PUSH
4919: LD_INT 4
4921: EQUAL
4922: NOT
4923: OR
4924: IFFALSE 4950
// begin ComExitBuilding ( i ) ;
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4935: LD_VAR 0 1
4939: PPUSH
4940: LD_INT 37
4942: PPUSH
4943: LD_INT 23
4945: PPUSH
4946: CALL_OW 174
// end ;
4950: GO 4890
4952: POP
4953: POP
// if eng then
4954: LD_VAR 0 3
4958: IFFALSE 5200
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: LD_INT 22
4967: PUSH
4968: LD_INT 1
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PUSH
4975: LD_INT 95
4977: PUSH
4978: LD_INT 7
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PUSH
4985: LD_INT 21
4987: PUSH
4988: LD_INT 3
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 24
5000: PUSH
5001: LD_INT 1000
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: ST_TO_ADDR
// if b then
5023: LD_VAR 0 2
5027: IFFALSE 5058
// begin ComExitBuilding ( eng ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5038: LD_VAR 0 3
5042: PPUSH
5043: LD_VAR 0 2
5047: PUSH
5048: LD_INT 1
5050: ARRAY
5051: PPUSH
5052: CALL_OW 190
// end else
5056: GO 5200
// begin for i in eng do
5058: LD_ADDR_VAR 0 1
5062: PUSH
5063: LD_VAR 0 3
5067: PUSH
5068: FOR_IN
5069: IFFALSE 5198
// if not HasTask ( i ) then
5071: LD_VAR 0 1
5075: PPUSH
5076: CALL_OW 314
5080: NOT
5081: IFFALSE 5196
// begin if americanBuildList then
5083: LD_EXP 46
5087: IFFALSE 5172
// begin if IsInUnit ( i ) then
5089: LD_VAR 0 1
5093: PPUSH
5094: CALL_OW 310
5098: IFFALSE 5109
// ComExitBuilding ( i ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5109: LD_VAR 0 1
5113: PPUSH
5114: LD_EXP 46
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PPUSH
5127: LD_EXP 46
5131: PUSH
5132: LD_INT 1
5134: ARRAY
5135: PUSH
5136: LD_INT 2
5138: ARRAY
5139: PPUSH
5140: LD_EXP 46
5144: PUSH
5145: LD_INT 1
5147: ARRAY
5148: PUSH
5149: LD_INT 3
5151: ARRAY
5152: PPUSH
5153: LD_EXP 46
5157: PUSH
5158: LD_INT 1
5160: ARRAY
5161: PUSH
5162: LD_INT 4
5164: ARRAY
5165: PPUSH
5166: CALL_OW 205
// end else
5170: GO 5196
// if not IsInUnit ( i ) then
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 310
5181: NOT
5182: IFFALSE 5196
// ComEnterUnit ( i , usDepot ) ;
5184: LD_VAR 0 1
5188: PPUSH
5189: LD_INT 11
5191: PPUSH
5192: CALL_OW 120
// end ;
5196: GO 5068
5198: POP
5199: POP
// end ; end ; end ;
5200: PPOPN 5
5202: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5203: LD_INT 0
5205: PPUSH
5206: PPUSH
5207: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_INT 35
5215: PUSH
5216: LD_INT 45
5218: PUSH
5219: LD_INT 48
5221: PUSH
5222: LD_EXP 58
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: ST_TO_ADDR
// for i in tech do
5233: LD_ADDR_VAR 0 4
5237: PUSH
5238: LD_VAR 0 3
5242: PUSH
5243: FOR_IN
5244: IFFALSE 5262
// AddComResearch ( lab , i ) ;
5246: LD_VAR 0 1
5250: PPUSH
5251: LD_VAR 0 4
5255: PPUSH
5256: CALL_OW 184
5260: GO 5243
5262: POP
5263: POP
// end ;
5264: LD_VAR 0 2
5268: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5269: LD_EXP 12
5273: PUSH
5274: LD_EXP 23
5278: PUSH
5279: LD_EXP 27
5283: LESSEQUAL
5284: AND
5285: IFFALSE 5310
5287: GO 5289
5289: DISABLE
// begin enable ;
5290: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5291: LD_INT 35
5293: PPUSH
5294: LD_INT 2065
5296: PPUSH
5297: CALL_OW 12
5301: PPUSH
5302: CALL_OW 67
// SendConvoy ;
5306: CALL 5416 0 0
// end ;
5310: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5311: LD_EXP 6
5315: PUSH
5316: LD_EXP 18
5320: AND
5321: IFFALSE 5415
5323: GO 5325
5325: DISABLE
// begin if americanHasEscaped then
5326: LD_EXP 8
5330: IFFALSE 5341
// wait ( 3 3$20 ) else
5332: LD_INT 7000
5334: PPUSH
5335: CALL_OW 67
5339: GO 5348
// wait ( 6 6$40 ) ;
5341: LD_INT 14000
5343: PPUSH
5344: CALL_OW 67
// SendAttack ;
5348: CALL 6163 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 , 4 4$00 ] [ Difficulty ] ) ;
5352: LD_INT 14000
5354: PUSH
5355: LD_INT 11900
5357: PUSH
5358: LD_INT 9800
5360: PUSH
5361: LD_INT 8400
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: LD_OWVAR 67
5374: ARRAY
5375: PPUSH
5376: CALL_OW 67
// SendAttack ;
5380: CALL 6163 0 0
// until attackWave < [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5384: LD_EXP 19
5388: PUSH
5389: LD_INT 6
5391: PUSH
5392: LD_INT 7
5394: PUSH
5395: LD_INT 8
5397: PUSH
5398: LD_INT 9
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_OWVAR 67
5411: ARRAY
5412: LESS
5413: IFFALSE 5352
// end ;
5415: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
5421: PPUSH
5422: PPUSH
5423: PPUSH
5424: PPUSH
5425: PPUSH
// road := rand ( 1 , 2 ) ;
5426: LD_ADDR_VAR 0 4
5430: PUSH
5431: LD_INT 1
5433: PPUSH
5434: LD_INT 2
5436: PPUSH
5437: CALL_OW 12
5441: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5442: LD_ADDR_VAR 0 8
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: LD_INT 8
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PUSH
5457: LD_VAR 0 4
5461: ARRAY
5462: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5463: LD_ADDR_VAR 0 5
5467: PUSH
5468: LD_INT 35
5470: PUSH
5471: LD_INT 66
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 101
5484: PUSH
5485: LD_INT 8
5487: PUSH
5488: LD_INT 4
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5500: LD_ADDR_VAR 0 6
5504: PUSH
5505: LD_INT 34
5507: PUSH
5508: LD_INT 67
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 38
5517: PUSH
5518: LD_INT 62
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: LD_INT 43
5527: PUSH
5528: LD_INT 54
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 57
5537: PUSH
5538: LD_INT 57
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 77
5547: PUSH
5548: LD_INT 71
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 86
5557: PUSH
5558: LD_INT 60
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 89
5567: PUSH
5568: LD_INT 35
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 93
5577: PUSH
5578: LD_INT 17
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: LD_INT 97
5587: PUSH
5588: LD_INT 10
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 103
5597: PUSH
5598: LD_INT 9
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: ST_TO_ADDR
// if road = 2 then
5617: LD_VAR 0 4
5621: PUSH
5622: LD_INT 2
5624: EQUAL
5625: IFFALSE 5642
// points := ReverseArray ( points ) ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_VAR 0 6
5636: PPUSH
5637: CALL 989 0 1
5641: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5642: LD_INT 4
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: LD_INT 2
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 12
5659: PPUSH
5660: LD_INT 80
5662: PPUSH
5663: CALL 325 0 7
// veh := CreateVehicle ;
5667: LD_ADDR_VAR 0 3
5671: PUSH
5672: CALL_OW 45
5676: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5677: LD_VAR 0 3
5681: PPUSH
5682: LD_VAR 0 5
5686: PUSH
5687: LD_VAR 0 4
5691: ARRAY
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PPUSH
5697: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5701: LD_VAR 0 3
5705: PPUSH
5706: LD_VAR 0 5
5710: PUSH
5711: LD_VAR 0 4
5715: ARRAY
5716: PUSH
5717: LD_INT 1
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 5
5725: PUSH
5726: LD_VAR 0 4
5730: ARRAY
5731: PUSH
5732: LD_INT 2
5734: ARRAY
5735: PPUSH
5736: LD_INT 0
5738: PPUSH
5739: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5743: LD_INT 0
5745: PPUSH
5746: LD_INT 1
5748: PPUSH
5749: LD_OWVAR 67
5753: PPUSH
5754: CALL_OW 380
// un := CreateHuman ;
5758: LD_ADDR_VAR 0 2
5762: PUSH
5763: CALL_OW 44
5767: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5768: LD_VAR 0 2
5772: PPUSH
5773: LD_VAR 0 3
5777: PPUSH
5778: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 , 48 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5782: LD_INT 60
5784: PUSH
5785: LD_INT 56
5787: PUSH
5788: LD_INT 52
5790: PUSH
5791: LD_INT 48
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: LD_OWVAR 67
5804: ARRAY
5805: PPUSH
5806: CALL_OW 13
5810: PUSH
5811: LD_OWVAR 1
5815: PUSH
5816: LD_INT 30
5818: MOD
5819: PLUS
5820: PUSH
5821: LD_EXP 23
5825: PUSH
5826: LD_INT 4
5828: LESS
5829: OR
5830: IFFALSE 5847
// SetCargo ( veh , mat_cans , 100 ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: LD_INT 100
5842: PPUSH
5843: CALL_OW 290
// for i := 2 to points do
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: DOUBLE
5853: LD_INT 2
5855: DEC
5856: ST_TO_ADDR
5857: LD_VAR 0 6
5861: PUSH
5862: FOR_TO
5863: IFFALSE 5906
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5865: LD_VAR 0 3
5869: PPUSH
5870: LD_VAR 0 6
5874: PUSH
5875: LD_VAR 0 7
5879: ARRAY
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: PPUSH
5885: LD_VAR 0 6
5889: PUSH
5890: LD_VAR 0 7
5894: ARRAY
5895: PUSH
5896: LD_INT 2
5898: ARRAY
5899: PPUSH
5900: CALL_OW 171
5904: GO 5862
5906: POP
5907: POP
// convoyCounter := convoyCounter + 1 ;
5908: LD_ADDR_EXP 23
5912: PUSH
5913: LD_EXP 23
5917: PUSH
5918: LD_INT 1
5920: PLUS
5921: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5922: LD_INT 35
5924: PPUSH
5925: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5929: LD_VAR 0 3
5933: PPUSH
5934: CALL_OW 314
5938: NOT
5939: PUSH
5940: LD_VAR 0 3
5944: PPUSH
5945: CALL_OW 302
5949: AND
5950: IFFALSE 5991
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5952: LD_VAR 0 3
5956: PPUSH
5957: LD_VAR 0 6
5961: PUSH
5962: LD_VAR 0 6
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_VAR 0 6
5976: PUSH
5977: LD_VAR 0 6
5981: ARRAY
5982: PUSH
5983: LD_INT 2
5985: ARRAY
5986: PPUSH
5987: CALL_OW 111
// if not IsInUnit ( un ) then
5991: LD_VAR 0 2
5995: PPUSH
5996: CALL_OW 310
6000: NOT
6001: IFFALSE 6042
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_VAR 0 6
6012: PUSH
6013: LD_VAR 0 6
6017: ARRAY
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: LD_VAR 0 6
6027: PUSH
6028: LD_VAR 0 6
6032: ARRAY
6033: PUSH
6034: LD_INT 2
6036: ARRAY
6037: PPUSH
6038: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6042: LD_VAR 0 3
6046: PPUSH
6047: LD_VAR 0 8
6051: PPUSH
6052: CALL_OW 308
6056: PUSH
6057: LD_VAR 0 2
6061: PPUSH
6062: LD_VAR 0 8
6066: PPUSH
6067: CALL_OW 308
6071: OR
6072: IFFALSE 5922
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6074: LD_VAR 0 2
6078: PPUSH
6079: CALL_OW 302
6083: PUSH
6084: LD_VAR 0 3
6088: PPUSH
6089: CALL_OW 302
6093: NOT
6094: AND
6095: PUSH
6096: LD_VAR 0 2
6100: PPUSH
6101: LD_VAR 0 8
6105: PPUSH
6106: CALL_OW 308
6110: AND
6111: IFFALSE 6122
// RemoveUnit ( un ) ;
6113: LD_VAR 0 2
6117: PPUSH
6118: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6122: LD_VAR 0 3
6126: PPUSH
6127: LD_VAR 0 8
6131: PPUSH
6132: CALL_OW 308
6136: PUSH
6137: LD_VAR 0 3
6141: PPUSH
6142: CALL_OW 302
6146: AND
6147: IFFALSE 6158
// RemoveUnit ( veh ) ;
6149: LD_VAR 0 3
6153: PPUSH
6154: CALL_OW 64
// end ;
6158: LD_VAR 0 1
6162: RET
// export function SendAttack ; var un , veh , i ; begin
6163: LD_INT 0
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
// if ingame_video then
6169: LD_OWVAR 52
6173: IFFALSE 6196
// begin repeat wait ( 0 0$1 ) ;
6175: LD_INT 35
6177: PPUSH
6178: CALL_OW 67
// until not ingame_video ;
6182: LD_OWVAR 52
6186: NOT
6187: IFFALSE 6175
// wait ( 0 0$5 ) ;
6189: LD_INT 175
6191: PPUSH
6192: CALL_OW 67
// end ; IncomingAttack ;
6196: CALL 15155 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6200: LD_INT 2100
6202: PPUSH
6203: LD_INT 3500
6205: PPUSH
6206: CALL_OW 12
6210: PPUSH
6211: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: DOUBLE
6221: LD_INT 1
6223: DEC
6224: ST_TO_ADDR
6225: LD_INT 3
6227: PUSH
6228: LD_INT 4
6230: PUSH
6231: LD_INT 4
6233: PUSH
6234: LD_INT 5
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: PUSH
6243: LD_OWVAR 67
6247: ARRAY
6248: PUSH
6249: LD_EXP 19
6253: PUSH
6254: LD_INT 3
6256: DIV
6257: PLUS
6258: PUSH
6259: FOR_TO
6260: IFFALSE 6376
// begin uc_side := 1 ;
6262: LD_ADDR_OWVAR 20
6266: PUSH
6267: LD_INT 1
6269: ST_TO_ADDR
// uc_nation := 1 ;
6270: LD_ADDR_OWVAR 21
6274: PUSH
6275: LD_INT 1
6277: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6278: LD_INT 0
6280: PPUSH
6281: LD_INT 1
6283: PPUSH
6284: LD_INT 2
6286: PUSH
6287: LD_INT 3
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: PUSH
6302: LD_OWVAR 67
6306: ARRAY
6307: PPUSH
6308: CALL_OW 380
// un := CreateHuman ;
6312: LD_ADDR_VAR 0 2
6316: PUSH
6317: CALL_OW 44
6321: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6322: LD_VAR 0 2
6326: PPUSH
6327: LD_INT 37
6329: PPUSH
6330: LD_INT 70
6332: PPUSH
6333: LD_INT 3
6335: PPUSH
6336: LD_INT 0
6338: PPUSH
6339: CALL_OW 50
// usAttackers := usAttackers union un ;
6343: LD_ADDR_EXP 47
6347: PUSH
6348: LD_EXP 47
6352: PUSH
6353: LD_VAR 0 2
6357: UNION
6358: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6359: LD_VAR 0 2
6363: PPUSH
6364: LD_INT 40
6366: PPUSH
6367: LD_INT 65
6369: PPUSH
6370: CALL_OW 111
// end ;
6374: GO 6259
6376: POP
6377: POP
// uc_side := 1 ;
6378: LD_ADDR_OWVAR 20
6382: PUSH
6383: LD_INT 1
6385: ST_TO_ADDR
// uc_nation := 1 ;
6386: LD_ADDR_OWVAR 21
6390: PUSH
6391: LD_INT 1
6393: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6394: LD_INT 0
6396: PPUSH
6397: LD_INT 4
6399: PPUSH
6400: LD_INT 2
6402: PPUSH
6403: CALL_OW 380
// un := CreateHuman ;
6407: LD_ADDR_VAR 0 2
6411: PUSH
6412: CALL_OW 44
6416: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6417: LD_VAR 0 2
6421: PPUSH
6422: LD_INT 37
6424: PPUSH
6425: LD_INT 70
6427: PPUSH
6428: LD_INT 3
6430: PPUSH
6431: LD_INT 0
6433: PPUSH
6434: CALL_OW 50
// usAttackers := usAttackers union un ;
6438: LD_ADDR_EXP 47
6442: PUSH
6443: LD_EXP 47
6447: PUSH
6448: LD_VAR 0 2
6452: UNION
6453: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6454: LD_VAR 0 2
6458: PPUSH
6459: LD_INT 40
6461: PPUSH
6462: LD_INT 65
6464: PPUSH
6465: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6469: LD_ADDR_VAR 0 4
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_OWVAR 67
6483: PUSH
6484: LD_EXP 19
6488: PUSH
6489: LD_INT 4
6491: DIV
6492: PLUS
6493: PUSH
6494: FOR_TO
6495: IFFALSE 6668
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6497: LD_ADDR_VAR 0 3
6501: PUSH
6502: LD_INT 1
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: LD_INT 2
6510: PPUSH
6511: LD_INT 1
6513: PPUSH
6514: LD_INT 1
6516: PPUSH
6517: LD_INT 4
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: LD_INT 2
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 3
6536: PPUSH
6537: CALL_OW 12
6541: ARRAY
6542: PPUSH
6543: LD_INT 90
6545: PPUSH
6546: CALL 325 0 7
6550: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6551: LD_VAR 0 3
6555: PPUSH
6556: LD_INT 35
6558: PPUSH
6559: LD_INT 65
6561: PPUSH
6562: LD_INT 0
6564: PPUSH
6565: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6569: LD_INT 0
6571: PPUSH
6572: LD_INT 3
6574: PPUSH
6575: LD_OWVAR 67
6579: PUSH
6580: LD_INT 1
6582: PLUS
6583: PPUSH
6584: CALL_OW 380
// un := CreateHuman ;
6588: LD_ADDR_VAR 0 2
6592: PUSH
6593: CALL_OW 44
6597: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6598: LD_VAR 0 2
6602: PPUSH
6603: LD_VAR 0 3
6607: PPUSH
6608: CALL_OW 52
// usAttackers := usAttackers union un ;
6612: LD_ADDR_EXP 47
6616: PUSH
6617: LD_EXP 47
6621: PUSH
6622: LD_VAR 0 2
6626: UNION
6627: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6628: LD_VAR 0 3
6632: PPUSH
6633: LD_INT 39
6635: PPUSH
6636: LD_INT 60
6638: PPUSH
6639: CALL_OW 111
// wait ( 0 0$3 ) ;
6643: LD_INT 105
6645: PPUSH
6646: CALL_OW 67
// usAttackers := usAttackers union veh ;
6650: LD_ADDR_EXP 47
6654: PUSH
6655: LD_EXP 47
6659: PUSH
6660: LD_VAR 0 3
6664: UNION
6665: ST_TO_ADDR
// end ;
6666: GO 6494
6668: POP
6669: POP
// attackWave := attackWave + 1 ;
6670: LD_ADDR_EXP 19
6674: PUSH
6675: LD_EXP 19
6679: PUSH
6680: LD_INT 1
6682: PLUS
6683: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6684: LD_EXP 24
6688: PPUSH
6689: CALL_OW 427
// end ;
6693: LD_VAR 0 1
6697: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6698: LD_INT 0
6700: PPUSH
6701: PPUSH
6702: PPUSH
6703: PPUSH
6704: PPUSH
6705: PPUSH
6706: PPUSH
6707: PPUSH
6708: PPUSH
6709: PPUSH
6710: PPUSH
// if retreatAllowed then
6711: LD_EXP 11
6715: IFFALSE 6727
// strategy := 2 else
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: LD_INT 2
6724: ST_TO_ADDR
6725: GO 6743
// strategy := rand ( 0 , 2 ) ;
6727: LD_ADDR_VAR 0 5
6731: PUSH
6732: LD_INT 0
6734: PPUSH
6735: LD_INT 2
6737: PPUSH
6738: CALL_OW 12
6742: ST_TO_ADDR
// attackFormula := [ ] ;
6743: LD_ADDR_VAR 0 6
6747: PUSH
6748: EMPTY
6749: ST_TO_ADDR
// case strategy of 0 :
6750: LD_VAR 0 5
6754: PUSH
6755: LD_INT 0
6757: DOUBLE
6758: EQUAL
6759: IFTRUE 6763
6761: GO 7093
6763: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6764: LD_INT 11
6766: PPUSH
6767: LD_INT 22
6769: PUSH
6770: LD_INT 2
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 70
6795: NOT
6796: IFFALSE 6868
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6798: LD_ADDR_VAR 0 6
6802: PUSH
6803: LD_INT 41
6805: PUSH
6806: LD_INT 34
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: EMPTY
6814: LIST
6815: PUSH
6816: LD_INT 53
6818: PUSH
6819: LD_INT 62
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 37
6828: PUSH
6829: LD_INT 63
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 44
6838: PUSH
6839: LD_INT 45
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 37
6848: PUSH
6849: LD_INT 28
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: ST_TO_ADDR
6866: GO 7091
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6868: LD_INT 12
6870: PPUSH
6871: LD_INT 22
6873: PUSH
6874: LD_INT 2
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 2
6883: PUSH
6884: LD_INT 30
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 30
6896: PUSH
6897: LD_INT 31
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 30
6906: PUSH
6907: LD_INT 32
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 70
6928: NOT
6929: IFFALSE 7012
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6931: LD_ADDR_VAR 0 6
6935: PUSH
6936: LD_INT 27
6938: PUSH
6939: LD_INT 42
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 27
6948: PUSH
6949: LD_INT 32
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 53
6962: PUSH
6963: LD_INT 62
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 37
6972: PUSH
6973: LD_INT 63
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 44
6982: PUSH
6983: LD_INT 45
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 37
6992: PUSH
6993: LD_INT 28
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: ST_TO_ADDR
7010: GO 7091
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7012: LD_ADDR_VAR 0 6
7016: PUSH
7017: LD_INT 71
7019: PUSH
7020: LD_INT 67
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 54
7029: PUSH
7030: LD_INT 35
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 63
7043: PUSH
7044: LD_INT 40
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 37
7053: PUSH
7054: LD_INT 63
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 44
7063: PUSH
7064: LD_INT 45
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 37
7073: PUSH
7074: LD_INT 28
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: ST_TO_ADDR
// end ; 1 :
7091: GO 7296
7093: LD_INT 1
7095: DOUBLE
7096: EQUAL
7097: IFTRUE 7101
7099: GO 7205
7101: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7102: LD_ADDR_VAR 0 6
7106: PUSH
7107: LD_INT 71
7109: PUSH
7110: LD_INT 67
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 82
7119: PUSH
7120: LD_INT 23
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: LD_INT 53
7129: PUSH
7130: LD_INT 7
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 43
7139: PUSH
7140: LD_INT 10
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 53
7155: PUSH
7156: LD_INT 62
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: LD_INT 37
7165: PUSH
7166: LD_INT 63
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: LD_INT 44
7175: PUSH
7176: LD_INT 45
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 37
7185: PUSH
7186: LD_INT 28
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: ST_TO_ADDR
7203: GO 7296
7205: LD_INT 2
7207: DOUBLE
7208: EQUAL
7209: IFTRUE 7213
7211: GO 7295
7213: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7214: LD_ADDR_VAR 0 6
7218: PUSH
7219: LD_INT 90
7221: PUSH
7222: LD_INT 59
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 108
7231: PUSH
7232: LD_INT 64
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 82
7245: PUSH
7246: LD_INT 75
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 73
7255: PUSH
7256: LD_INT 67
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 101
7265: PUSH
7266: LD_INT 65
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 108
7275: PUSH
7276: LD_INT 62
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: ST_TO_ADDR
7293: GO 7296
7295: POP
// if not attackFormula then
7296: LD_VAR 0 6
7300: NOT
7301: IFFALSE 7305
// exit ;
7303: GO 8983
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7305: LD_ADDR_VAR 0 7
7309: PUSH
7310: LD_EXP 47
7314: PPUSH
7315: LD_INT 25
7317: PUSH
7318: LD_INT 1
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PPUSH
7325: CALL_OW 72
7329: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7330: LD_ADDR_VAR 0 8
7334: PUSH
7335: LD_EXP 47
7339: PPUSH
7340: LD_INT 25
7342: PUSH
7343: LD_INT 4
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PPUSH
7350: CALL_OW 72
7354: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7355: LD_ADDR_VAR 0 9
7359: PUSH
7360: LD_EXP 47
7364: PPUSH
7365: LD_INT 25
7367: PUSH
7368: LD_INT 3
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 72
7379: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7380: LD_ADDR_VAR 0 10
7384: PUSH
7385: LD_EXP 47
7389: PPUSH
7390: LD_INT 21
7392: PUSH
7393: LD_INT 2
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PPUSH
7400: CALL_OW 72
7404: ST_TO_ADDR
// if sci then
7405: LD_VAR 0 8
7409: IFFALSE 7446
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7411: LD_VAR 0 8
7415: PPUSH
7416: LD_VAR 0 6
7420: PUSH
7421: LD_INT 2
7423: ARRAY
7424: PUSH
7425: LD_INT 1
7427: ARRAY
7428: PPUSH
7429: LD_VAR 0 6
7433: PUSH
7434: LD_INT 2
7436: ARRAY
7437: PUSH
7438: LD_INT 2
7440: ARRAY
7441: PPUSH
7442: CALL_OW 111
// repeat wait ( 10 ) ;
7446: LD_INT 10
7448: PPUSH
7449: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7453: LD_ADDR_VAR 0 7
7457: PUSH
7458: LD_EXP 47
7462: PPUSH
7463: LD_INT 25
7465: PUSH
7466: LD_INT 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 72
7477: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7478: LD_ADDR_VAR 0 8
7482: PUSH
7483: LD_EXP 47
7487: PPUSH
7488: LD_INT 25
7490: PUSH
7491: LD_INT 4
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PPUSH
7498: CALL_OW 72
7502: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7503: LD_ADDR_VAR 0 9
7507: PUSH
7508: LD_EXP 47
7512: PPUSH
7513: LD_INT 25
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PPUSH
7523: CALL_OW 72
7527: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7528: LD_ADDR_VAR 0 10
7532: PUSH
7533: LD_EXP 47
7537: PPUSH
7538: LD_INT 21
7540: PUSH
7541: LD_INT 2
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 72
7552: ST_TO_ADDR
// if sol then
7553: LD_VAR 0 7
7557: IFFALSE 7978
// begin for i in sol do
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_VAR 0 7
7568: PUSH
7569: FOR_IN
7570: IFFALSE 7976
// begin tag := GetTag ( i ) ;
7572: LD_ADDR_VAR 0 4
7576: PUSH
7577: LD_VAR 0 2
7581: PPUSH
7582: CALL_OW 110
7586: ST_TO_ADDR
// if not tag then
7587: LD_VAR 0 4
7591: NOT
7592: IFFALSE 7701
// begin if GetLives ( i ) = 1000 then
7594: LD_VAR 0 2
7598: PPUSH
7599: CALL_OW 256
7603: PUSH
7604: LD_INT 1000
7606: EQUAL
7607: IFFALSE 7623
// SetTag ( i , 1 ) else
7609: LD_VAR 0 2
7613: PPUSH
7614: LD_INT 1
7616: PPUSH
7617: CALL_OW 109
7621: GO 7699
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7623: LD_VAR 0 2
7627: PPUSH
7628: LD_VAR 0 6
7632: PUSH
7633: LD_INT 2
7635: ARRAY
7636: PUSH
7637: LD_INT 1
7639: ARRAY
7640: PPUSH
7641: LD_VAR 0 6
7645: PUSH
7646: LD_INT 2
7648: ARRAY
7649: PUSH
7650: LD_INT 2
7652: ARRAY
7653: PPUSH
7654: CALL_OW 297
7658: PUSH
7659: LD_INT 10
7661: GREATER
7662: IFFALSE 7699
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7664: LD_VAR 0 2
7668: PPUSH
7669: LD_VAR 0 6
7673: PUSH
7674: LD_INT 2
7676: ARRAY
7677: PUSH
7678: LD_INT 1
7680: ARRAY
7681: PPUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_INT 2
7689: ARRAY
7690: PUSH
7691: LD_INT 2
7693: ARRAY
7694: PPUSH
7695: CALL_OW 111
// end else
7699: GO 7974
// begin if GetLives ( i ) < 760 then
7701: LD_VAR 0 2
7705: PPUSH
7706: CALL_OW 256
7710: PUSH
7711: LD_INT 760
7713: LESS
7714: IFFALSE 7765
// begin SetTag ( i , 0 ) ;
7716: LD_VAR 0 2
7720: PPUSH
7721: LD_INT 0
7723: PPUSH
7724: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7728: LD_VAR 0 2
7732: PPUSH
7733: LD_VAR 0 6
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: PUSH
7742: LD_INT 1
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 6
7750: PUSH
7751: LD_INT 2
7753: ARRAY
7754: PUSH
7755: LD_INT 2
7757: ARRAY
7758: PPUSH
7759: CALL_OW 111
// end else
7763: GO 7974
// if tag <= attackFormula [ 1 ] then
7765: LD_VAR 0 4
7769: PUSH
7770: LD_VAR 0 6
7774: PUSH
7775: LD_INT 1
7777: ARRAY
7778: LESSEQUAL
7779: IFFALSE 7940
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7781: LD_VAR 0 2
7785: PPUSH
7786: LD_VAR 0 6
7790: PUSH
7791: LD_INT 1
7793: ARRAY
7794: PUSH
7795: LD_VAR 0 4
7799: ARRAY
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PPUSH
7805: LD_VAR 0 6
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PUSH
7814: LD_VAR 0 4
7818: ARRAY
7819: PUSH
7820: LD_INT 2
7822: ARRAY
7823: PPUSH
7824: CALL_OW 297
7828: PUSH
7829: LD_INT 6
7831: GREATER
7832: IFFALSE 7883
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7834: LD_VAR 0 2
7838: PPUSH
7839: LD_VAR 0 6
7843: PUSH
7844: LD_INT 1
7846: ARRAY
7847: PUSH
7848: LD_VAR 0 4
7852: ARRAY
7853: PUSH
7854: LD_INT 1
7856: ARRAY
7857: PPUSH
7858: LD_VAR 0 6
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: PUSH
7867: LD_VAR 0 4
7871: ARRAY
7872: PUSH
7873: LD_INT 2
7875: ARRAY
7876: PPUSH
7877: CALL_OW 114
7881: GO 7938
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7883: LD_INT 81
7885: PUSH
7886: LD_INT 1
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: LD_INT 91
7895: PUSH
7896: LD_VAR 0 2
7900: PUSH
7901: LD_INT 10
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PPUSH
7913: CALL_OW 69
7917: NOT
7918: IFFALSE 7938
// SetTag ( i , tag + 1 ) ;
7920: LD_VAR 0 2
7924: PPUSH
7925: LD_VAR 0 4
7929: PUSH
7930: LD_INT 1
7932: PLUS
7933: PPUSH
7934: CALL_OW 109
// end else
7938: GO 7974
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7940: LD_VAR 0 2
7944: PPUSH
7945: LD_INT 81
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PPUSH
7955: CALL_OW 69
7959: PPUSH
7960: LD_VAR 0 2
7964: PPUSH
7965: CALL_OW 74
7969: PPUSH
7970: CALL_OW 115
// end ; end ;
7974: GO 7569
7976: POP
7977: POP
// end ; if sci then
7978: LD_VAR 0 8
7982: IFFALSE 8251
// begin if not sol and not mech then
7984: LD_VAR 0 7
7988: NOT
7989: PUSH
7990: LD_VAR 0 9
7994: NOT
7995: AND
7996: IFFALSE 8048
// begin for i in sci do
7998: LD_ADDR_VAR 0 2
8002: PUSH
8003: LD_VAR 0 8
8007: PUSH
8008: FOR_IN
8009: IFFALSE 8044
// begin usForces := usForces union i ;
8011: LD_ADDR_EXP 44
8015: PUSH
8016: LD_EXP 44
8020: PUSH
8021: LD_VAR 0 2
8025: UNION
8026: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8027: LD_VAR 0 2
8031: PPUSH
8032: LD_INT 34
8034: PPUSH
8035: LD_INT 68
8037: PPUSH
8038: CALL_OW 111
// end ;
8042: GO 8008
8044: POP
8045: POP
// end else
8046: GO 8251
// for i in sci do
8048: LD_ADDR_VAR 0 2
8052: PUSH
8053: LD_VAR 0 8
8057: PUSH
8058: FOR_IN
8059: IFFALSE 8249
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_VAR 0 6
8070: PUSH
8071: LD_INT 2
8073: ARRAY
8074: PUSH
8075: LD_INT 1
8077: ARRAY
8078: PPUSH
8079: LD_VAR 0 6
8083: PUSH
8084: LD_INT 2
8086: ARRAY
8087: PUSH
8088: LD_INT 2
8090: ARRAY
8091: PPUSH
8092: CALL_OW 297
8096: PUSH
8097: LD_INT 10
8099: GREATER
8100: IFFALSE 8139
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8102: LD_VAR 0 2
8106: PPUSH
8107: LD_VAR 0 6
8111: PUSH
8112: LD_INT 2
8114: ARRAY
8115: PUSH
8116: LD_INT 1
8118: ARRAY
8119: PPUSH
8120: LD_VAR 0 6
8124: PUSH
8125: LD_INT 2
8127: ARRAY
8128: PUSH
8129: LD_INT 2
8131: ARRAY
8132: PPUSH
8133: CALL_OW 111
8137: GO 8247
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8139: LD_VAR 0 7
8143: PPUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 24
8149: PUSH
8150: LD_INT 1000
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 91
8163: PUSH
8164: LD_VAR 0 2
8168: PUSH
8169: LD_INT 10
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PPUSH
8181: CALL_OW 72
8185: IFFALSE 8247
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: LD_VAR 0 7
8196: PPUSH
8197: LD_INT 3
8199: PUSH
8200: LD_INT 24
8202: PUSH
8203: LD_INT 1000
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 91
8216: PUSH
8217: LD_VAR 0 2
8221: PUSH
8222: LD_INT 10
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 72
8238: PUSH
8239: LD_INT 1
8241: ARRAY
8242: PPUSH
8243: CALL_OW 128
8247: GO 8058
8249: POP
8250: POP
// end ; if mech then
8251: LD_VAR 0 9
8255: IFFALSE 8965
// begin for i in mech do
8257: LD_ADDR_VAR 0 2
8261: PUSH
8262: LD_VAR 0 9
8266: PUSH
8267: FOR_IN
8268: IFFALSE 8963
// begin tag := GetTag ( i ) ;
8270: LD_ADDR_VAR 0 4
8274: PUSH
8275: LD_VAR 0 2
8279: PPUSH
8280: CALL_OW 110
8284: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8285: LD_ADDR_VAR 0 11
8289: PUSH
8290: LD_VAR 0 2
8294: PPUSH
8295: CALL_OW 310
8299: ST_TO_ADDR
// if not tag then
8300: LD_VAR 0 4
8304: NOT
8305: IFFALSE 8676
// begin if veh then
8307: LD_VAR 0 11
8311: IFFALSE 8482
// begin if GetLives ( veh ) = 1000 then
8313: LD_VAR 0 11
8317: PPUSH
8318: CALL_OW 256
8322: PUSH
8323: LD_INT 1000
8325: EQUAL
8326: IFFALSE 8342
// SetTag ( i , 1 ) else
8328: LD_VAR 0 2
8332: PPUSH
8333: LD_INT 1
8335: PPUSH
8336: CALL_OW 109
8340: GO 8480
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8342: LD_VAR 0 11
8346: PPUSH
8347: LD_VAR 0 6
8351: PUSH
8352: LD_INT 3
8354: ARRAY
8355: PUSH
8356: LD_INT 1
8358: ARRAY
8359: PPUSH
8360: LD_VAR 0 6
8364: PUSH
8365: LD_INT 3
8367: ARRAY
8368: PUSH
8369: LD_INT 2
8371: ARRAY
8372: PPUSH
8373: CALL_OW 297
8377: PUSH
8378: LD_INT 8
8380: GREATER
8381: IFFALSE 8420
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8383: LD_VAR 0 11
8387: PPUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_INT 3
8395: ARRAY
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PPUSH
8401: LD_VAR 0 6
8405: PUSH
8406: LD_INT 3
8408: ARRAY
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: CALL_OW 111
8418: GO 8480
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8420: LD_INT 81
8422: PUSH
8423: LD_INT 1
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 91
8432: PUSH
8433: LD_VAR 0 2
8437: PUSH
8438: LD_INT 10
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 69
8454: NOT
8455: IFFALSE 8480
// begin ComExitVehicle ( i ) ;
8457: LD_VAR 0 2
8461: PPUSH
8462: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8466: LD_VAR 0 2
8470: PPUSH
8471: LD_VAR 0 11
8475: PPUSH
8476: CALL_OW 189
// end ; end else
8480: GO 8674
// if GetLives ( i ) < 400 then
8482: LD_VAR 0 2
8486: PPUSH
8487: CALL_OW 256
8491: PUSH
8492: LD_INT 400
8494: LESS
8495: IFFALSE 8546
// begin usAttackers := usAttackers diff i ;
8497: LD_ADDR_EXP 47
8501: PUSH
8502: LD_EXP 47
8506: PUSH
8507: LD_VAR 0 2
8511: DIFF
8512: ST_TO_ADDR
// usForces := usForces union i ;
8513: LD_ADDR_EXP 44
8517: PUSH
8518: LD_EXP 44
8522: PUSH
8523: LD_VAR 0 2
8527: UNION
8528: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8529: LD_VAR 0 2
8533: PPUSH
8534: LD_INT 34
8536: PPUSH
8537: LD_INT 68
8539: PPUSH
8540: CALL_OW 111
// end else
8544: GO 8674
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8546: LD_VAR 0 10
8550: PPUSH
8551: LD_INT 58
8553: PUSH
8554: EMPTY
8555: LIST
8556: PUSH
8557: LD_INT 24
8559: PUSH
8560: LD_INT 1000
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 72
8575: PUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: CALL_OW 314
8585: NOT
8586: AND
8587: PUSH
8588: LD_INT 81
8590: PUSH
8591: LD_INT 1
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 91
8600: PUSH
8601: LD_VAR 0 2
8605: PUSH
8606: LD_INT 9
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 69
8622: OR
8623: IFFALSE 8674
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8625: LD_VAR 0 2
8629: PPUSH
8630: LD_VAR 0 10
8634: PPUSH
8635: LD_INT 58
8637: PUSH
8638: EMPTY
8639: LIST
8640: PUSH
8641: LD_INT 24
8643: PUSH
8644: LD_INT 250
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 72
8659: PPUSH
8660: LD_VAR 0 2
8664: PPUSH
8665: CALL_OW 74
8669: PPUSH
8670: CALL_OW 120
// end else
8674: GO 8961
// begin if veh and GetLives ( veh ) < 760 then
8676: LD_VAR 0 11
8680: PUSH
8681: LD_VAR 0 11
8685: PPUSH
8686: CALL_OW 256
8690: PUSH
8691: LD_INT 760
8693: LESS
8694: AND
8695: IFFALSE 8746
// begin SetTag ( i , 0 ) ;
8697: LD_VAR 0 2
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8709: LD_VAR 0 11
8713: PPUSH
8714: LD_VAR 0 6
8718: PUSH
8719: LD_INT 3
8721: ARRAY
8722: PUSH
8723: LD_INT 1
8725: ARRAY
8726: PPUSH
8727: LD_VAR 0 6
8731: PUSH
8732: LD_INT 3
8734: ARRAY
8735: PUSH
8736: LD_INT 2
8738: ARRAY
8739: PPUSH
8740: CALL_OW 111
// end else
8744: GO 8961
// if veh then
8746: LD_VAR 0 11
8750: IFFALSE 8961
// if tag <= attackFormula [ 4 ] then
8752: LD_VAR 0 4
8756: PUSH
8757: LD_VAR 0 6
8761: PUSH
8762: LD_INT 4
8764: ARRAY
8765: LESSEQUAL
8766: IFFALSE 8927
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8768: LD_VAR 0 11
8772: PPUSH
8773: LD_VAR 0 6
8777: PUSH
8778: LD_INT 4
8780: ARRAY
8781: PUSH
8782: LD_VAR 0 4
8786: ARRAY
8787: PUSH
8788: LD_INT 1
8790: ARRAY
8791: PPUSH
8792: LD_VAR 0 6
8796: PUSH
8797: LD_INT 4
8799: ARRAY
8800: PUSH
8801: LD_VAR 0 4
8805: ARRAY
8806: PUSH
8807: LD_INT 2
8809: ARRAY
8810: PPUSH
8811: CALL_OW 297
8815: PUSH
8816: LD_INT 6
8818: GREATER
8819: IFFALSE 8870
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8821: LD_VAR 0 11
8825: PPUSH
8826: LD_VAR 0 6
8830: PUSH
8831: LD_INT 4
8833: ARRAY
8834: PUSH
8835: LD_VAR 0 4
8839: ARRAY
8840: PUSH
8841: LD_INT 1
8843: ARRAY
8844: PPUSH
8845: LD_VAR 0 6
8849: PUSH
8850: LD_INT 4
8852: ARRAY
8853: PUSH
8854: LD_VAR 0 4
8858: ARRAY
8859: PUSH
8860: LD_INT 2
8862: ARRAY
8863: PPUSH
8864: CALL_OW 114
8868: GO 8925
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8870: LD_INT 81
8872: PUSH
8873: LD_INT 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 91
8882: PUSH
8883: LD_VAR 0 11
8887: PUSH
8888: LD_INT 10
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PPUSH
8900: CALL_OW 69
8904: NOT
8905: IFFALSE 8925
// SetTag ( i , tag + 1 ) ;
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_VAR 0 4
8916: PUSH
8917: LD_INT 1
8919: PLUS
8920: PPUSH
8921: CALL_OW 109
// end else
8925: GO 8961
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8927: LD_VAR 0 11
8931: PPUSH
8932: LD_INT 81
8934: PUSH
8935: LD_INT 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PPUSH
8942: CALL_OW 69
8946: PPUSH
8947: LD_VAR 0 2
8951: PPUSH
8952: CALL_OW 74
8956: PPUSH
8957: CALL_OW 115
// end ; end ;
8961: GO 8267
8963: POP
8964: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8965: LD_EXP 47
8969: PPUSH
8970: LD_INT 52
8972: PUSH
8973: EMPTY
8974: LIST
8975: PPUSH
8976: CALL_OW 72
8980: NOT
8981: IFFALSE 7446
// end ;
8983: LD_VAR 0 1
8987: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8988: LD_INT 22
8990: PUSH
8991: LD_INT 1
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 32
9000: PUSH
9001: LD_INT 1
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: IFFALSE 9093
9018: GO 9020
9020: DISABLE
9021: LD_INT 0
9023: PPUSH
// begin enable ;
9024: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9025: LD_ADDR_VAR 0 1
9029: PUSH
9030: LD_INT 22
9032: PUSH
9033: LD_INT 1
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 32
9042: PUSH
9043: LD_INT 1
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 69
9058: PUSH
9059: FOR_IN
9060: IFFALSE 9091
// if GetFuel ( i ) < 10 then
9062: LD_VAR 0 1
9066: PPUSH
9067: CALL_OW 261
9071: PUSH
9072: LD_INT 10
9074: LESS
9075: IFFALSE 9089
// SetFuel ( i , 10 ) ;
9077: LD_VAR 0 1
9081: PPUSH
9082: LD_INT 10
9084: PPUSH
9085: CALL_OW 240
9089: GO 9059
9091: POP
9092: POP
// end ; end_of_file
9093: PPOPN 1
9095: END
// export function Action ; var hasAll , i , tmp ; begin
9096: LD_INT 0
9098: PPUSH
9099: PPUSH
9100: PPUSH
9101: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9102: LD_ADDR_VAR 0 2
9106: PUSH
9107: LD_INT 22
9109: PUSH
9110: LD_INT 2
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 21
9119: PUSH
9120: LD_INT 1
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 23
9129: PUSH
9130: LD_INT 2
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 69
9146: PUSH
9147: LD_INT 7
9149: GREATEREQUAL
9150: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9151: LD_VAR 0 2
9155: PPUSH
9156: LD_STRING 03_HasAll
9158: PPUSH
9159: CALL_OW 39
// Video ( true ) ;
9163: LD_INT 1
9165: PPUSH
9166: CALL 73482 0 1
// CenterNowOnUnits ( Heike ) ;
9170: LD_EXP 28
9174: PPUSH
9175: CALL_OW 87
// wait ( 0 0$2 ) ;
9179: LD_INT 70
9181: PPUSH
9182: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9186: LD_EXP 36
9190: PPUSH
9191: LD_STRING DF-1-start
9193: PPUSH
9194: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9198: LD_EXP 28
9202: PPUSH
9203: LD_EXP 36
9207: PPUSH
9208: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9212: LD_EXP 28
9216: PPUSH
9217: LD_STRING DH-1-start
9219: PPUSH
9220: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9224: LD_EXP 37
9228: PPUSH
9229: LD_INT 92
9231: PPUSH
9232: LD_INT 21
9234: PPUSH
9235: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9239: LD_EXP 32
9243: PPUSH
9244: LD_INT 94
9246: PPUSH
9247: LD_INT 23
9249: PPUSH
9250: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9254: LD_EXP 40
9258: PUSH
9259: LD_INT 1
9261: ARRAY
9262: PPUSH
9263: LD_INT 90
9265: PPUSH
9266: LD_INT 23
9268: PPUSH
9269: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9273: LD_EXP 40
9277: PUSH
9278: LD_INT 2
9280: ARRAY
9281: PPUSH
9282: LD_INT 93
9284: PPUSH
9285: LD_INT 25
9287: PPUSH
9288: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9292: LD_EXP 40
9296: PPUSH
9297: LD_EXP 37
9301: PPUSH
9302: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9306: LD_EXP 37
9310: PUSH
9311: LD_EXP 32
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PPUSH
9320: LD_EXP 28
9324: PPUSH
9325: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9329: LD_EXP 28
9333: PPUSH
9334: LD_EXP 37
9338: PPUSH
9339: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9343: LD_INT 35
9345: PPUSH
9346: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9350: LD_EXP 37
9354: PPUSH
9355: LD_INT 92
9357: PPUSH
9358: LD_INT 21
9360: PPUSH
9361: CALL_OW 307
9365: IFFALSE 9343
// Say ( Omar , DO-1-start ) ;
9367: LD_EXP 37
9371: PPUSH
9372: LD_STRING DO-1-start
9374: PPUSH
9375: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9379: LD_EXP 28
9383: PPUSH
9384: LD_STRING DH-2-start
9386: PPUSH
9387: CALL_OW 88
// if hasAll then
9391: LD_VAR 0 2
9395: IFFALSE 9523
// begin Say ( Omar , DO-2-start ) ;
9397: LD_EXP 37
9401: PPUSH
9402: LD_STRING DO-2-start
9404: PPUSH
9405: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9409: LD_EXP 37
9413: PPUSH
9414: LD_STRING DO-3-start
9416: PPUSH
9417: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9421: LD_EXP 28
9425: PPUSH
9426: LD_STRING DH-3-start
9428: PPUSH
9429: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9433: LD_EXP 36
9437: PPUSH
9438: LD_STRING DF-2-start
9440: PPUSH
9441: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9445: LD_EXP 37
9449: PPUSH
9450: LD_EXP 36
9454: PPUSH
9455: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9459: LD_EXP 37
9463: PPUSH
9464: LD_STRING DO-4-start
9466: PPUSH
9467: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9471: LD_EXP 36
9475: PPUSH
9476: LD_STRING DF-3-start
9478: PPUSH
9479: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9483: LD_EXP 37
9487: PPUSH
9488: LD_STRING DO-5-start
9490: PPUSH
9491: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9495: LD_EXP 36
9499: PPUSH
9500: LD_STRING DF-4-start
9502: PPUSH
9503: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9507: LD_EXP 37
9511: PPUSH
9512: LD_EXP 28
9516: PPUSH
9517: CALL_OW 119
// end else
9521: GO 9623
// begin Say ( Omar , DO-2-start-a ) ;
9523: LD_EXP 37
9527: PPUSH
9528: LD_STRING DO-2-start-a
9530: PPUSH
9531: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9535: LD_EXP 37
9539: PPUSH
9540: LD_STRING DO-3-start-a
9542: PPUSH
9543: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9547: LD_EXP 28
9551: PPUSH
9552: LD_STRING DH-3-start-a
9554: PPUSH
9555: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9559: LD_EXP 36
9563: PPUSH
9564: LD_STRING DF-2-start-a
9566: PPUSH
9567: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9571: LD_EXP 37
9575: PPUSH
9576: LD_EXP 36
9580: PPUSH
9581: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9585: LD_EXP 37
9589: PPUSH
9590: LD_STRING DO-4-start-a
9592: PPUSH
9593: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9597: LD_EXP 36
9601: PPUSH
9602: LD_STRING DF-3-start-a
9604: PPUSH
9605: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9609: LD_EXP 37
9613: PPUSH
9614: LD_EXP 28
9618: PPUSH
9619: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9623: LD_INT 10
9625: PPUSH
9626: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9630: LD_EXP 37
9634: PPUSH
9635: LD_STRING DO-1-mission
9637: PPUSH
9638: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING DO-2-mission
9649: PPUSH
9650: CALL_OW 88
// if not hasAll then
9654: LD_VAR 0 2
9658: NOT
9659: IFFALSE 9673
// Say ( Omar , DO-3-mission ) ;
9661: LD_EXP 37
9665: PPUSH
9666: LD_STRING DO-3-mission
9668: PPUSH
9669: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9673: LD_EXP 37
9677: PPUSH
9678: LD_STRING DO-4-mission
9680: PPUSH
9681: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9685: LD_EXP 28
9689: PPUSH
9690: LD_STRING DH-1-mission
9692: PPUSH
9693: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9697: LD_EXP 36
9701: PPUSH
9702: LD_STRING DF-1-mission
9704: PPUSH
9705: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9709: LD_EXP 37
9713: PPUSH
9714: LD_STRING DO-5-mission
9716: PPUSH
9717: CALL_OW 88
// if not hasAll then
9721: LD_VAR 0 2
9725: NOT
9726: IFFALSE 9861
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9728: LD_ADDR_VAR 0 4
9732: PUSH
9733: LD_INT 22
9735: PUSH
9736: LD_INT 2
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 21
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 23
9755: PUSH
9756: LD_INT 2
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PPUSH
9768: CALL_OW 69
9772: ST_TO_ADDR
// for i := 7 downto tmp do
9773: LD_ADDR_VAR 0 3
9777: PUSH
9778: DOUBLE
9779: LD_INT 7
9781: INC
9782: ST_TO_ADDR
9783: LD_VAR 0 4
9787: PUSH
9788: FOR_DOWNTO
9789: IFFALSE 9859
// begin if omarSquad < 3 then
9791: LD_EXP 40
9795: PUSH
9796: LD_INT 3
9798: LESS
9799: IFFALSE 9803
// break ;
9801: GO 9859
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9803: LD_EXP 40
9807: PUSH
9808: LD_INT 3
9810: ARRAY
9811: PPUSH
9812: LD_INT 2
9814: PPUSH
9815: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9819: LD_ADDR_EXP 42
9823: PUSH
9824: LD_EXP 42
9828: PUSH
9829: LD_EXP 40
9833: PUSH
9834: LD_INT 3
9836: ARRAY
9837: UNION
9838: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9839: LD_ADDR_EXP 40
9843: PUSH
9844: LD_EXP 40
9848: PPUSH
9849: LD_INT 3
9851: PPUSH
9852: CALL_OW 3
9856: ST_TO_ADDR
// end ;
9857: GO 9788
9859: POP
9860: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9861: LD_EXP 37
9865: PUSH
9866: LD_EXP 40
9870: ADD
9871: PPUSH
9872: LD_INT 103
9874: PPUSH
9875: LD_INT 9
9877: PPUSH
9878: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9882: LD_VAR 0 2
9886: PUSH
9887: LD_EXP 33
9891: PPUSH
9892: CALL_OW 302
9896: AND
9897: IFFALSE 9958
// begin wait ( 0 0$3 ) ;
9899: LD_INT 105
9901: PPUSH
9902: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9906: LD_EXP 33
9910: PPUSH
9911: LD_EXP 36
9915: PPUSH
9916: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9920: LD_EXP 33
9924: PPUSH
9925: LD_STRING DK-1-side
9927: PPUSH
9928: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9932: LD_EXP 36
9936: PPUSH
9937: LD_EXP 33
9941: PPUSH
9942: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9946: LD_EXP 36
9950: PPUSH
9951: LD_STRING DF-1-side
9953: PPUSH
9954: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9958: LD_INT 22
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: PPUSH
9973: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 39
9986: ADD
9987: PPUSH
9988: LD_INT 108
9990: PPUSH
9991: LD_INT 62
9993: PPUSH
9994: CALL_OW 111
// gameStarted := true ;
9998: LD_ADDR_EXP 3
10002: PUSH
10003: LD_INT 1
10005: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10006: LD_INT 105
10008: PPUSH
10009: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10013: LD_EXP 28
10017: PPUSH
10018: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10022: LD_EXP 28
10026: PPUSH
10027: LD_EXP 32
10031: PPUSH
10032: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 2
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PPUSH
10046: CALL_OW 69
10050: PUSH
10051: LD_EXP 28
10055: DIFF
10056: PPUSH
10057: LD_EXP 28
10061: PPUSH
10062: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10066: LD_EXP 28
10070: PPUSH
10071: LD_STRING DH-1-explore
10073: PPUSH
10074: CALL_OW 88
// if Givi then
10078: LD_EXP 29
10082: IFFALSE 10098
// Say ( Givi , DG-1-explore ) else
10084: LD_EXP 29
10088: PPUSH
10089: LD_STRING DG-1-explore
10091: PPUSH
10092: CALL_OW 88
10096: GO 10135
// if heikeSecondSquad then
10098: LD_EXP 42
10102: IFFALSE 10135
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10104: LD_EXP 42
10108: PPUSH
10109: LD_INT 26
10111: PUSH
10112: LD_INT 1
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PPUSH
10119: CALL_OW 72
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PPUSH
10128: LD_STRING DArm-1-explore
10130: PPUSH
10131: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10135: LD_EXP 32
10139: PPUSH
10140: LD_STRING DA-1-explore
10142: PPUSH
10143: CALL_OW 88
// if Sophia then
10147: LD_EXP 34
10151: IFFALSE 10229
// begin Say ( Sophia , DS-2-explore ) ;
10153: LD_EXP 34
10157: PPUSH
10158: LD_STRING DS-2-explore
10160: PPUSH
10161: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10165: LD_EXP 32
10169: PPUSH
10170: LD_STRING DA-2-explore
10172: PPUSH
10173: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10177: LD_EXP 34
10181: PPUSH
10182: LD_EXP 32
10186: PPUSH
10187: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10191: LD_EXP 32
10195: PPUSH
10196: LD_EXP 34
10200: PPUSH
10201: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10205: LD_EXP 34
10209: PPUSH
10210: LD_STRING DS-3-explore
10212: PPUSH
10213: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10217: LD_EXP 32
10221: PPUSH
10222: LD_STRING DA-3-explore
10224: PPUSH
10225: CALL_OW 88
// end ; if Mike then
10229: LD_EXP 30
10233: IFFALSE 10289
// begin Say ( Mike , DM-1-explore ) ;
10235: LD_EXP 30
10239: PPUSH
10240: LD_STRING DM-1-explore
10242: PPUSH
10243: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10247: LD_EXP 28
10251: PPUSH
10252: LD_STRING DH-2-explore
10254: PPUSH
10255: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10259: LD_EXP 30
10263: PPUSH
10264: LD_STRING DM-2-explore
10266: PPUSH
10267: CALL_OW 88
// if Kaia then
10271: LD_EXP 33
10275: IFFALSE 10289
// Say ( Kaia , DK-1-explore ) ;
10277: LD_EXP 33
10281: PPUSH
10282: LD_STRING DK-1-explore
10284: PPUSH
10285: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10289: LD_INT 22
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: PPUSH
10304: CALL_OW 139
// Video ( false ) ;
10308: LD_INT 0
10310: PPUSH
10311: CALL 73482 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10315: LD_STRING BuildBase
10317: PPUSH
10318: CALL_OW 337
// SaveForQuickRestart ;
10322: CALL_OW 22
// end ;
10326: LD_VAR 0 1
10330: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10331: LD_EXP 5
10335: NOT
10336: PUSH
10337: LD_EXP 6
10341: NOT
10342: AND
10343: PUSH
10344: LD_INT 5
10346: PPUSH
10347: LD_INT 22
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 70
10361: AND
10362: PUSH
10363: LD_EXP 6
10367: NOT
10368: AND
10369: IFFALSE 10454
10371: GO 10373
10373: DISABLE
// begin if Mike then
10374: LD_EXP 30
10378: IFFALSE 10394
// Say ( Mike , DM-1-scout ) else
10380: LD_EXP 30
10384: PPUSH
10385: LD_STRING DM-1-scout
10387: PPUSH
10388: CALL_OW 88
10392: GO 10425
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10394: LD_EXP 42
10398: PPUSH
10399: LD_INT 26
10401: PUSH
10402: LD_INT 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PPUSH
10409: CALL_OW 72
10413: PUSH
10414: LD_INT 1
10416: ARRAY
10417: PPUSH
10418: LD_STRING DArm-1-explore
10420: PPUSH
10421: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10425: LD_INT 54
10427: PPUSH
10428: LD_INT 35
10430: PPUSH
10431: LD_INT 2
10433: PPUSH
10434: LD_INT 1
10436: PPUSH
10437: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10441: LD_INT 54
10443: PPUSH
10444: LD_INT 35
10446: PPUSH
10447: LD_INT 2
10449: PPUSH
10450: CALL_OW 331
// end ;
10454: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10455: LD_INT 6
10457: PPUSH
10458: LD_INT 22
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 70
10472: PUSH
10473: LD_EXP 6
10477: NOT
10478: AND
10479: IFFALSE 10733
10481: GO 10483
10483: DISABLE
10484: LD_INT 0
10486: PPUSH
10487: PPUSH
10488: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10489: LD_ADDR_VAR 0 1
10493: PUSH
10494: LD_EXP 42
10498: PPUSH
10499: LD_INT 26
10501: PUSH
10502: LD_INT 1
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PPUSH
10509: CALL_OW 72
10513: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10514: LD_ADDR_VAR 0 2
10518: PUSH
10519: LD_EXP 42
10523: PPUSH
10524: LD_INT 26
10526: PUSH
10527: LD_INT 2
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PPUSH
10534: CALL_OW 72
10538: ST_TO_ADDR
// DialogueOn ;
10539: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10543: LD_INT 36
10545: PPUSH
10546: LD_INT 22
10548: PPUSH
10549: LD_INT 2
10551: PPUSH
10552: LD_INT 8
10554: PPUSH
10555: CALL_OW 330
// dwait ( 0 0$1 ) ;
10559: LD_INT 35
10561: PPUSH
10562: CALL_OW 68
// speakerOk := false ;
10566: LD_ADDR_VAR 0 3
10570: PUSH
10571: LD_INT 0
10573: ST_TO_ADDR
// if Mike then
10574: LD_EXP 30
10578: IFFALSE 10600
// speakerOk := Say ( Mike , DM-1-spot ) else
10580: LD_ADDR_VAR 0 3
10584: PUSH
10585: LD_EXP 30
10589: PPUSH
10590: LD_STRING DM-1-spot
10592: PPUSH
10593: CALL_OW 88
10597: ST_TO_ADDR
10598: GO 10628
// if randomMen then
10600: LD_VAR 0 1
10604: IFFALSE 10628
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10606: LD_ADDR_VAR 0 3
10610: PUSH
10611: LD_VAR 0 1
10615: PUSH
10616: LD_INT 1
10618: ARRAY
10619: PPUSH
10620: LD_STRING DArm-1-spot-a
10622: PPUSH
10623: CALL_OW 88
10627: ST_TO_ADDR
// if speakerOk then
10628: LD_VAR 0 3
10632: IFFALSE 10676
// begin if Givi then
10634: LD_EXP 29
10638: IFFALSE 10654
// Say ( Givi , DG-1-spot ) else
10640: LD_EXP 29
10644: PPUSH
10645: LD_STRING DG-1-spot
10647: PPUSH
10648: CALL_OW 88
10652: GO 10676
// if randomWomen then
10654: LD_VAR 0 2
10658: IFFALSE 10676
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10660: LD_VAR 0 2
10664: PUSH
10665: LD_INT 1
10667: ARRAY
10668: PPUSH
10669: LD_STRING DArf-1-spot-a
10671: PPUSH
10672: CALL_OW 88
// end ; if Mike then
10676: LD_EXP 30
10680: IFFALSE 10696
// Say ( Heike , DH-1-spot ) else
10682: LD_EXP 28
10686: PPUSH
10687: LD_STRING DH-1-spot
10689: PPUSH
10690: CALL_OW 88
10694: GO 10708
// Say ( Heike , DH-1-spot-a ) ;
10696: LD_EXP 28
10700: PPUSH
10701: LD_STRING DH-1-spot-a
10703: PPUSH
10704: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10708: LD_INT 36
10710: PPUSH
10711: LD_INT 22
10713: PPUSH
10714: LD_INT 2
10716: PPUSH
10717: CALL_OW 331
// DialogueOff ;
10721: CALL_OW 7
// americanBaseSpoted := true ;
10725: LD_ADDR_EXP 5
10729: PUSH
10730: LD_INT 1
10732: ST_TO_ADDR
// end ;
10733: PPOPN 3
10735: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10736: LD_EXP 5
10740: NOT
10741: PUSH
10742: LD_INT 22
10744: PUSH
10745: LD_INT 2
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 101
10754: PUSH
10755: LD_INT 1
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 69
10770: AND
10771: PUSH
10772: LD_EXP 6
10776: NOT
10777: AND
10778: IFFALSE 10864
10780: GO 10782
10782: DISABLE
10783: LD_INT 0
10785: PPUSH
// begin americanBaseSpoted := true ;
10786: LD_ADDR_EXP 5
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10794: LD_ADDR_VAR 0 1
10798: PUSH
10799: LD_EXP 42
10803: PPUSH
10804: LD_INT 26
10806: PUSH
10807: LD_INT 1
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 72
10818: ST_TO_ADDR
// if not randomMen then
10819: LD_VAR 0 1
10823: NOT
10824: IFFALSE 10828
// exit ;
10826: GO 10864
// DialogueOn ;
10828: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10832: LD_VAR 0 1
10836: PUSH
10837: LD_INT 1
10839: ARRAY
10840: PPUSH
10841: LD_STRING DArm-1-spot-a
10843: PPUSH
10844: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10848: LD_EXP 28
10852: PPUSH
10853: LD_STRING DH-1-spot-a
10855: PPUSH
10856: CALL_OW 88
// DialogueOff ;
10860: CALL_OW 7
// end ;
10864: PPOPN 1
10866: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10867: LD_INT 11
10869: PPUSH
10870: CALL_OW 255
10874: PUSH
10875: LD_INT 2
10877: EQUAL
10878: PUSH
10879: LD_INT 7
10881: PPUSH
10882: LD_INT 22
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: LD_INT 50
10897: PUSH
10898: EMPTY
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 30
10907: PUSH
10908: LD_INT 31
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: PPUSH
10920: CALL_OW 70
10924: OR
10925: PUSH
10926: LD_INT 7
10928: PPUSH
10929: LD_INT 22
10931: PUSH
10932: LD_INT 2
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PPUSH
10939: CALL_OW 70
10943: PUSH
10944: LD_INT 1
10946: GREATER
10947: OR
10948: PUSH
10949: LD_EXP 44
10953: PUSH
10954: LD_INT 4
10956: LESSEQUAL
10957: OR
10958: IFFALSE 11537
10960: GO 10962
10962: DISABLE
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
// begin wait ( 0 0$3 ) ;
10967: LD_INT 105
10969: PPUSH
10970: CALL_OW 67
// americanStartRun := true ;
10974: LD_ADDR_EXP 14
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// if IsOk ( usCommander ) then
10982: LD_EXP 45
10986: PPUSH
10987: CALL_OW 302
10991: IFFALSE 11021
// begin usForces := usForces union usCommander ;
10993: LD_ADDR_EXP 44
10997: PUSH
10998: LD_EXP 44
11002: PUSH
11003: LD_EXP 45
11007: UNION
11008: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11009: LD_EXP 45
11013: PPUSH
11014: LD_STRING DUsm-1-assault
11016: PPUSH
11017: CALL_OW 88
// end ; for i in usForces do
11021: LD_ADDR_VAR 0 1
11025: PUSH
11026: LD_EXP 44
11030: PUSH
11031: FOR_IN
11032: IFFALSE 11078
// begin if IsInUnit ( i ) then
11034: LD_VAR 0 1
11038: PPUSH
11039: CALL_OW 310
11043: IFFALSE 11054
// ComExitBuilding ( i ) ;
11045: LD_VAR 0 1
11049: PPUSH
11050: CALL_OW 122
// wait ( 3 ) ;
11054: LD_INT 3
11056: PPUSH
11057: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11061: LD_VAR 0 1
11065: PPUSH
11066: LD_INT 34
11068: PPUSH
11069: LD_INT 67
11071: PPUSH
11072: CALL_OW 111
// end ;
11076: GO 11031
11078: POP
11079: POP
// Say ( Heike , DH-1-assault ) ;
11080: LD_EXP 28
11084: PPUSH
11085: LD_STRING DH-1-assault
11087: PPUSH
11088: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11092: LD_INT 35
11094: PPUSH
11095: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11099: LD_VAR 0 1
11103: PPUSH
11104: LD_INT 34
11106: PPUSH
11107: LD_INT 67
11109: PPUSH
11110: CALL_OW 111
// until not usForces ;
11114: LD_EXP 44
11118: NOT
11119: IFFALSE 11092
// music_nat := 2 ;
11121: LD_ADDR_OWVAR 71
11125: PUSH
11126: LD_INT 2
11128: ST_TO_ADDR
// music_class := music_victory ;
11129: LD_ADDR_OWVAR 72
11133: PUSH
11134: LD_INT 4
11136: ST_TO_ADDR
// if not americanHasEscaped then
11137: LD_EXP 8
11141: NOT
11142: IFFALSE 11163
// begin Say ( Heike , DH-2-assault ) ;
11144: LD_EXP 28
11148: PPUSH
11149: LD_STRING DH-2-assault
11151: PPUSH
11152: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11156: LD_STRING ACH_CLEAN
11158: PPUSH
11159: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11163: LD_INT 70
11165: PPUSH
11166: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11170: LD_INT 35
11172: PPUSH
11173: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11177: LD_INT 22
11179: PUSH
11180: LD_INT 2
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 21
11189: PUSH
11190: LD_INT 1
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 3
11199: PUSH
11200: LD_INT 50
11202: PUSH
11203: EMPTY
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: PPUSH
11215: CALL_OW 69
11219: NOT
11220: IFFALSE 11170
// InGameOn ;
11222: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11226: LD_INT 11
11228: PPUSH
11229: CALL_OW 255
11233: PUSH
11234: LD_INT 2
11236: EQUAL
11237: NOT
11238: IFFALSE 11250
// SetSide ( usDepot , 2 ) ;
11240: LD_INT 11
11242: PPUSH
11243: LD_INT 2
11245: PPUSH
11246: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11250: LD_INT 35
11252: PPUSH
11253: LD_INT 22
11255: PPUSH
11256: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11260: LD_EXP 28
11264: PPUSH
11265: LD_INT 35
11267: PPUSH
11268: LD_INT 22
11270: PPUSH
11271: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11275: LD_EXP 28
11279: PPUSH
11280: LD_INT 38
11282: PPUSH
11283: LD_INT 25
11285: PPUSH
11286: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11290: LD_EXP 41
11294: PUSH
11295: LD_EXP 42
11299: UNION
11300: PPUSH
11301: LD_INT 39
11303: PPUSH
11304: LD_INT 26
11306: PPUSH
11307: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11311: LD_EXP 41
11315: PUSH
11316: LD_EXP 42
11320: UNION
11321: PPUSH
11322: LD_EXP 28
11326: PPUSH
11327: CALL_OW 179
// p := 0 ;
11331: LD_ADDR_VAR 0 2
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11339: LD_INT 35
11341: PPUSH
11342: CALL_OW 67
// p := p + 1 ;
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: LD_VAR 0 2
11355: PUSH
11356: LD_INT 1
11358: PLUS
11359: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11360: LD_EXP 28
11364: PPUSH
11365: CALL_OW 314
11369: NOT
11370: PUSH
11371: LD_VAR 0 2
11375: PUSH
11376: LD_INT 10
11378: GREATER
11379: OR
11380: IFFALSE 11339
// Say ( Heike , DH-1-capture ) ;
11382: LD_EXP 28
11386: PPUSH
11387: LD_STRING DH-1-capture
11389: PPUSH
11390: CALL_OW 88
// if Markov then
11394: LD_EXP 35
11398: IFFALSE 11412
// Say ( Markov , DMar-1-capture ) ;
11400: LD_EXP 35
11404: PPUSH
11405: LD_STRING DMar-1-capture
11407: PPUSH
11408: CALL_OW 88
// if Sophia then
11412: LD_EXP 34
11416: IFFALSE 11442
// begin Say ( Heike , DH-2-capture ) ;
11418: LD_EXP 28
11422: PPUSH
11423: LD_STRING DH-2-capture
11425: PPUSH
11426: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11430: LD_EXP 34
11434: PPUSH
11435: LD_STRING DS-1-capture
11437: PPUSH
11438: CALL_OW 88
// end ; InGameOff ;
11442: CALL_OW 9
// music_nat := music_auto ;
11446: LD_ADDR_OWVAR 71
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// music_class := music_auto ;
11454: LD_ADDR_OWVAR 72
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11462: LD_STRING ConstructBase
11464: PPUSH
11465: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: LD_INT 22
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 21
11486: PUSH
11487: LD_INT 3
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PPUSH
11498: CALL_OW 69
11502: PUSH
11503: FOR_IN
11504: IFFALSE 11520
// SetSide ( i , 2 ) ;
11506: LD_VAR 0 1
11510: PPUSH
11511: LD_INT 2
11513: PPUSH
11514: CALL_OW 235
11518: GO 11503
11520: POP
11521: POP
// wait ( 0 0$3 ) ;
11522: LD_INT 105
11524: PPUSH
11525: CALL_OW 67
// americanBaseCaptured := true ;
11529: LD_ADDR_EXP 6
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// end ;
11537: PPOPN 2
11539: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11540: LD_EXP 13
11544: PUSH
11545: LD_INT 3
11547: GREATEREQUAL
11548: IFFALSE 11560
11550: GO 11552
11552: DISABLE
// SetAchievement ( ACH_ENG ) ;
11553: LD_STRING ACH_ENG
11555: PPUSH
11556: CALL_OW 543
11560: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11561: LD_INT 22
11563: PUSH
11564: LD_INT 2
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 25
11573: PUSH
11574: LD_INT 15
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PPUSH
11585: CALL_OW 69
11589: PUSH
11590: LD_INT 4
11592: GREATEREQUAL
11593: IFFALSE 11605
11595: GO 11597
11597: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11598: LD_STRING ACH_APEGEN
11600: PPUSH
11601: CALL_OW 543
11605: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11606: LD_INT 22
11608: PUSH
11609: LD_INT 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 30
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 3
11628: PUSH
11629: LD_INT 57
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: PPUSH
11644: CALL_OW 69
11648: IFFALSE 11913
11650: GO 11652
11652: DISABLE
// begin workshopBuilded := true ;
11653: LD_ADDR_EXP 10
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// if IsOk ( Markov ) then
11661: LD_EXP 35
11665: PPUSH
11666: CALL_OW 302
11670: IFFALSE 11729
// begin Say ( Heike , DH-1-shop-a ) ;
11672: LD_EXP 28
11676: PPUSH
11677: LD_STRING DH-1-shop-a
11679: PPUSH
11680: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11684: LD_INT 47
11686: PPUSH
11687: LD_INT 2
11689: PPUSH
11690: CALL_OW 321
11694: PUSH
11695: LD_INT 2
11697: EQUAL
11698: PUSH
11699: LD_INT 45
11701: PPUSH
11702: LD_INT 2
11704: PPUSH
11705: CALL_OW 321
11709: PUSH
11710: LD_INT 2
11712: EQUAL
11713: AND
11714: NOT
11715: IFFALSE 11729
// Say ( Markov , DMar-1-shop-a ) ;
11717: LD_EXP 35
11721: PPUSH
11722: LD_STRING DMar-1-shop-a
11724: PPUSH
11725: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11729: LD_INT 35
11731: PPUSH
11732: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11736: LD_INT 47
11738: PPUSH
11739: LD_INT 2
11741: PPUSH
11742: CALL_OW 321
11746: PUSH
11747: LD_INT 2
11749: EQUAL
11750: PUSH
11751: LD_INT 45
11753: PPUSH
11754: LD_INT 2
11756: PPUSH
11757: CALL_OW 321
11761: PUSH
11762: LD_INT 2
11764: EQUAL
11765: OR
11766: IFFALSE 11729
// if IsOk ( Markov ) and IsOk ( Heike ) then
11768: LD_EXP 35
11772: PPUSH
11773: CALL_OW 302
11777: PUSH
11778: LD_EXP 28
11782: PPUSH
11783: CALL_OW 302
11787: AND
11788: IFFALSE 11906
// begin DialogueOn ;
11790: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11794: LD_EXP 35
11798: PPUSH
11799: LD_STRING DMar-1-shop
11801: PPUSH
11802: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11806: LD_EXP 28
11810: PPUSH
11811: LD_STRING DH-1-shop
11813: PPUSH
11814: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11818: LD_EXP 35
11822: PPUSH
11823: LD_STRING DMar-2-shop
11825: PPUSH
11826: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11830: LD_EXP 35
11834: PPUSH
11835: LD_STRING DMar-3-shop
11837: PPUSH
11838: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11842: LD_EXP 28
11846: PPUSH
11847: LD_STRING DH-2-shop
11849: PPUSH
11850: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11854: LD_EXP 35
11858: PPUSH
11859: LD_STRING DMar-4-shop
11861: PPUSH
11862: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11866: LD_EXP 28
11870: PPUSH
11871: LD_STRING DH-3-shop
11873: PPUSH
11874: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11878: LD_EXP 35
11882: PPUSH
11883: LD_STRING DMar-5-shop
11885: PPUSH
11886: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11890: LD_EXP 28
11894: PPUSH
11895: LD_STRING DH-4-shop
11897: PPUSH
11898: CALL_OW 88
// DialogueOff ;
11902: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
11906: LD_STRING ConstructVeh
11908: PPUSH
11909: CALL_OW 337
// end ;
11913: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11914: LD_INT 2
11916: PPUSH
11917: LD_INT 2
11919: PPUSH
11920: LD_INT 1
11922: PPUSH
11923: CALL 36836 0 3
11927: PUSH
11928: LD_INT 0
11930: EQUAL
11931: IFFALSE 11943
11933: GO 11935
11935: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11936: LD_STRING Techs
11938: PPUSH
11939: CALL_OW 337
11943: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11944: LD_EXP 35
11948: PPUSH
11949: CALL_OW 302
11953: PUSH
11954: LD_INT 22
11956: PUSH
11957: LD_INT 2
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 2
11966: PUSH
11967: LD_INT 34
11969: PUSH
11970: LD_INT 22
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 35
11979: PUSH
11980: LD_INT 22
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PPUSH
11996: CALL_OW 69
12000: AND
12001: IFFALSE 12108
12003: GO 12005
12005: DISABLE
// begin DialogueOn ;
12006: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12010: LD_INT 22
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 2
12022: PUSH
12023: LD_INT 34
12025: PUSH
12026: LD_INT 22
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 35
12035: PUSH
12036: LD_INT 22
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PPUSH
12052: CALL_OW 69
12056: PPUSH
12057: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12061: LD_INT 10
12063: PPUSH
12064: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12068: LD_EXP 28
12072: PPUSH
12073: LD_STRING DH-1-bal
12075: PPUSH
12076: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12080: LD_EXP 35
12084: PPUSH
12085: LD_STRING DMar-1-bal
12087: PPUSH
12088: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12092: LD_EXP 28
12096: PPUSH
12097: LD_STRING DH-2-bal
12099: PPUSH
12100: CALL_OW 88
// DialogueOff ;
12104: CALL_OW 7
// end ;
12108: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12109: LD_EXP 32
12113: PPUSH
12114: CALL_OW 302
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_INT 2
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 30
12131: PUSH
12132: LD_INT 6
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: AND
12148: IFFALSE 12209
12150: GO 12152
12152: DISABLE
// begin DialogueOn ;
12153: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12157: LD_EXP 32
12161: PPUSH
12162: LD_STRING DA-1-lab
12164: PPUSH
12165: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12169: LD_EXP 28
12173: PPUSH
12174: LD_STRING DH-1-lab
12176: PPUSH
12177: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12181: LD_EXP 32
12185: PPUSH
12186: LD_STRING DA-2-lab
12188: PPUSH
12189: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12193: LD_EXP 28
12197: PPUSH
12198: LD_STRING DH-2-lab
12200: PPUSH
12201: CALL_OW 88
// DialogueOff ;
12205: CALL_OW 7
// end ;
12209: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12210: LD_EXP 33
12214: PPUSH
12215: CALL_OW 302
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 25
12232: PUSH
12233: LD_INT 15
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: AND
12249: PUSH
12250: LD_INT 81
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: NOT
12265: AND
12266: IFFALSE 12448
12268: GO 12270
12270: DISABLE
12271: LD_INT 0
12273: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12274: LD_ADDR_VAR 0 1
12278: PUSH
12279: LD_INT 22
12281: PUSH
12282: LD_INT 2
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 25
12291: PUSH
12292: LD_INT 15
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PPUSH
12303: CALL_OW 69
12307: ST_TO_ADDR
// InGameOn ;
12308: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12312: LD_VAR 0 1
12316: PUSH
12317: LD_INT 1
12319: ARRAY
12320: PPUSH
12321: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12325: LD_VAR 0 1
12329: PUSH
12330: LD_INT 1
12332: ARRAY
12333: PPUSH
12334: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12338: LD_EXP 33
12342: PPUSH
12343: LD_STRING DK-1-apesol
12345: PPUSH
12346: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12350: LD_VAR 0 1
12354: PUSH
12355: LD_INT 1
12357: ARRAY
12358: PPUSH
12359: LD_INT 35
12361: PPUSH
12362: LD_INT 28
12364: PPUSH
12365: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12369: LD_VAR 0 1
12373: PUSH
12374: LD_INT 1
12376: ARRAY
12377: PPUSH
12378: LD_INT 36
12380: PPUSH
12381: LD_INT 17
12383: PPUSH
12384: CALL_OW 171
// DialogueOn ;
12388: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12392: LD_EXP 32
12396: PPUSH
12397: LD_STRING DA-1-apesol
12399: PPUSH
12400: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12404: LD_EXP 33
12408: PPUSH
12409: LD_STRING DK-2-apesol
12411: PPUSH
12412: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12416: LD_EXP 32
12420: PPUSH
12421: LD_STRING DA-2-apesol
12423: PPUSH
12424: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12428: LD_EXP 33
12432: PPUSH
12433: LD_STRING DK-3-apesol
12435: PPUSH
12436: CALL_OW 88
// DialogueOff ;
12440: CALL_OW 7
// InGameOff ;
12444: CALL_OW 9
// end ;
12448: PPOPN 1
12450: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12451: LD_EXP 34
12455: PPUSH
12456: CALL_OW 302
12460: PUSH
12461: LD_INT 22
12463: PUSH
12464: LD_INT 2
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 25
12473: PUSH
12474: LD_INT 16
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PPUSH
12485: CALL_OW 69
12489: AND
12490: PUSH
12491: LD_INT 81
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PPUSH
12501: CALL_OW 69
12505: NOT
12506: AND
12507: IFFALSE 12792
12509: GO 12511
12511: DISABLE
12512: LD_INT 0
12514: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12515: LD_ADDR_VAR 0 1
12519: PUSH
12520: LD_INT 22
12522: PUSH
12523: LD_INT 2
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 25
12532: PUSH
12533: LD_INT 16
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PPUSH
12544: CALL_OW 69
12548: ST_TO_ADDR
// InGameOn ;
12549: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12553: LD_INT 35
12555: PPUSH
12556: LD_INT 22
12558: PPUSH
12559: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12563: LD_INT 5
12565: PPUSH
12566: LD_INT 35
12568: PPUSH
12569: LD_INT 22
12571: PPUSH
12572: LD_INT 1
12574: PPUSH
12575: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12579: LD_EXP 34
12583: PPUSH
12584: LD_VAR 0 1
12588: PUSH
12589: LD_INT 1
12591: ARRAY
12592: PPUSH
12593: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12597: LD_VAR 0 1
12601: PUSH
12602: LD_INT 1
12604: ARRAY
12605: PPUSH
12606: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12610: LD_VAR 0 1
12614: PUSH
12615: LD_INT 1
12617: ARRAY
12618: PPUSH
12619: CALL_OW 122
// wait ( 0 0$2 ) ;
12623: LD_INT 70
12625: PPUSH
12626: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12630: LD_EXP 34
12634: PPUSH
12635: LD_STRING DS-1-apeeng
12637: PPUSH
12638: CALL_OW 88
// if IsOk ( Kamil ) then
12642: LD_EXP 31
12646: PPUSH
12647: CALL_OW 302
12651: IFFALSE 12788
// begin Say ( Kamil , DKam-1-apeeng ) ;
12653: LD_EXP 31
12657: PPUSH
12658: LD_STRING DKam-1-apeeng
12660: PPUSH
12661: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12665: LD_EXP 34
12669: PPUSH
12670: LD_STRING DS-2-apeeng
12672: PPUSH
12673: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12677: LD_EXP 31
12681: PPUSH
12682: LD_STRING DKam-2-apeeng
12684: PPUSH
12685: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12689: LD_EXP 34
12693: PPUSH
12694: LD_STRING DS-3-apeeng
12696: PPUSH
12697: CALL_OW 88
// if not IsOK ( Kaia ) then
12701: LD_EXP 33
12705: PPUSH
12706: CALL_OW 302
12710: NOT
12711: IFFALSE 12719
// begin InGameOff ;
12713: CALL_OW 9
// exit ;
12717: GO 12792
// end ; Say ( Kaia , DK-1-apeeng ) ;
12719: LD_EXP 33
12723: PPUSH
12724: LD_STRING DK-1-apeeng
12726: PPUSH
12727: CALL_OW 88
// if not IsOk ( Givi ) then
12731: LD_EXP 29
12735: PPUSH
12736: CALL_OW 302
12740: NOT
12741: IFFALSE 12752
// begin Video ( false ) ;
12743: LD_INT 0
12745: PPUSH
12746: CALL 73482 0 1
// exit ;
12750: GO 12792
// end ; Say ( Givi , DG-1-apeeng ) ;
12752: LD_EXP 29
12756: PPUSH
12757: LD_STRING DG-1-apeeng
12759: PPUSH
12760: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12764: LD_EXP 33
12768: PPUSH
12769: LD_STRING DK-2-apeeng
12771: PPUSH
12772: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12776: LD_EXP 33
12780: PPUSH
12781: LD_STRING DK-3-apeeng
12783: PPUSH
12784: CALL_OW 88
// end ; InGameOff ;
12788: CALL_OW 9
// end ;
12792: PPOPN 1
12794: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12795: LD_EXP 4
12799: PUSH
12800: LD_INT 22
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 30
12812: PUSH
12813: LD_INT 0
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PPUSH
12824: CALL_OW 69
12828: AND
12829: IFFALSE 12994
12831: GO 12833
12833: DISABLE
// begin wait ( 0 0$10 ) ;
12834: LD_INT 350
12836: PPUSH
12837: CALL_OW 67
// DialogueOn ;
12841: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12845: LD_EXP 36
12849: PPUSH
12850: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12854: LD_EXP 36
12858: PPUSH
12859: LD_STRING DF-1-distribution
12861: PPUSH
12862: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12866: LD_EXP 28
12870: PPUSH
12871: LD_STRING DH-2-distribution
12873: PPUSH
12874: CALL_OW 88
// if IsOk ( Kaia ) then
12878: LD_EXP 33
12882: PPUSH
12883: CALL_OW 302
12887: IFFALSE 12948
// begin Say ( Kaia , DK-1-distribution ) ;
12889: LD_EXP 33
12893: PPUSH
12894: LD_STRING DK-1-distribution
12896: PPUSH
12897: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12901: LD_EXP 28
12905: PPUSH
12906: LD_STRING DH-1-distribution
12908: PPUSH
12909: CALL_OW 88
// if IsOk ( Givi ) then
12913: LD_EXP 29
12917: PPUSH
12918: CALL_OW 302
12922: IFFALSE 12948
// begin Say ( Givi , DG-1-distribution ) ;
12924: LD_EXP 29
12928: PPUSH
12929: LD_STRING DG-1-distribution
12931: PPUSH
12932: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12936: LD_EXP 28
12940: PPUSH
12941: LD_STRING DH-3-distribution
12943: PPUSH
12944: CALL_OW 88
// end ; end ; DialogueOff ;
12948: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12952: LD_STRING Crates1
12954: PPUSH
12955: CALL_OW 337
// farmerRequestedCrates := 300 ;
12959: LD_ADDR_EXP 16
12963: PUSH
12964: LD_INT 300
12966: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12967: LD_STRING FarmerCrates
12969: PPUSH
12970: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12974: LD_INT 10
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12984: LD_INT 108
12986: PPUSH
12987: LD_INT 61
12989: PPUSH
12990: CALL_OW 86
// end ;
12994: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12995: LD_EXP 6
12999: PUSH
13000: LD_INT 22
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 3
13012: PUSH
13013: LD_INT 57
13015: PUSH
13016: EMPTY
13017: LIST
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: LD_INT 30
13028: PUSH
13029: LD_INT 6
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 30
13038: PUSH
13039: LD_INT 7
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: PPUSH
13056: CALL_OW 69
13060: AND
13061: PUSH
13062: LD_INT 22
13064: PUSH
13065: LD_INT 2
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 3
13074: PUSH
13075: LD_INT 57
13077: PUSH
13078: EMPTY
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 30
13087: PUSH
13088: LD_INT 4
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: PPUSH
13100: CALL_OW 69
13104: AND
13105: IFFALSE 13269
13107: GO 13109
13109: DISABLE
13110: LD_INT 0
13112: PPUSH
// begin wait ( 0 0$10 ) ;
13113: LD_INT 350
13115: PPUSH
13116: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13120: LD_ADDR_VAR 0 1
13124: PUSH
13125: LD_EXP 42
13129: PPUSH
13130: LD_INT 26
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 25
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 72
13158: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13159: LD_EXP 28
13163: PPUSH
13164: LD_STRING DH-1-task
13166: PPUSH
13167: CALL_OW 88
// if IsOk ( Sophia ) then
13171: LD_EXP 34
13175: PPUSH
13176: CALL_OW 302
13180: IFFALSE 13220
// begin Say ( Sophia , DS-1-task ) ;
13182: LD_EXP 34
13186: PPUSH
13187: LD_STRING DS-1-task
13189: PPUSH
13190: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13194: LD_EXP 34
13198: PPUSH
13199: LD_STRING DS-2-task
13201: PPUSH
13202: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13206: LD_EXP 28
13210: PPUSH
13211: LD_STRING DH-2-task
13213: PPUSH
13214: CALL_OW 88
// end else
13218: GO 13254
// if eng then
13220: LD_VAR 0 1
13224: IFFALSE 13254
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13226: LD_VAR 0 1
13230: PUSH
13231: LD_INT 1
13233: ARRAY
13234: PPUSH
13235: LD_STRING DArm-1-task
13237: PPUSH
13238: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13242: LD_EXP 28
13246: PPUSH
13247: LD_STRING DH-2-task
13249: PPUSH
13250: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13254: LD_STRING BaseConstructed
13256: PPUSH
13257: CALL_OW 337
// allowConvoys := true ;
13261: LD_ADDR_EXP 12
13265: PUSH
13266: LD_INT 1
13268: ST_TO_ADDR
// end ;
13269: PPOPN 1
13271: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13272: LD_INT 22
13274: PUSH
13275: LD_INT 4
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 34
13284: PUSH
13285: LD_INT 12
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PPUSH
13296: CALL_OW 69
13300: IFFALSE 13468
13302: GO 13304
13304: DISABLE
13305: LD_INT 0
13307: PPUSH
13308: PPUSH
13309: PPUSH
// begin wait ( 0 0$2 ) ;
13310: LD_INT 70
13312: PPUSH
13313: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13317: LD_ADDR_VAR 0 1
13321: PUSH
13322: LD_INT 22
13324: PUSH
13325: LD_INT 4
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 34
13334: PUSH
13335: LD_INT 12
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13351: LD_ADDR_VAR 0 2
13355: PUSH
13356: LD_VAR 0 1
13360: PUSH
13361: LD_INT 1
13363: ARRAY
13364: PPUSH
13365: CALL_OW 250
13369: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13370: LD_ADDR_VAR 0 3
13374: PUSH
13375: LD_VAR 0 1
13379: PUSH
13380: LD_INT 1
13382: ARRAY
13383: PPUSH
13384: CALL_OW 251
13388: ST_TO_ADDR
// DialogueOn ;
13389: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13393: LD_VAR 0 2
13397: PPUSH
13398: LD_VAR 0 3
13402: PPUSH
13403: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13407: LD_VAR 0 2
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 2
13419: PPUSH
13420: LD_INT 6
13422: NEG
13423: PPUSH
13424: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13428: LD_INT 10
13430: PPUSH
13431: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13435: LD_EXP 28
13439: PPUSH
13440: LD_STRING DH-1-seecargo
13442: PPUSH
13443: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13447: LD_VAR 0 2
13451: PPUSH
13452: LD_VAR 0 3
13456: PPUSH
13457: LD_INT 2
13459: PPUSH
13460: CALL_OW 331
// DialogueOff ;
13464: CALL_OW 7
// end ;
13468: PPOPN 3
13470: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13471: LD_EXP 4
13475: PUSH
13476: LD_EXP 15
13480: PUSH
13481: LD_INT 300
13483: GREATEREQUAL
13484: AND
13485: IFFALSE 13557
13487: GO 13489
13489: DISABLE
// begin DialogueOn ;
13490: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13494: LD_EXP 36
13498: PPUSH
13499: LD_STRING DF-1-delivery-2
13501: PPUSH
13502: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13506: LD_EXP 28
13510: PPUSH
13511: LD_STRING DH-1-delivery-2
13513: PPUSH
13514: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13518: LD_EXP 36
13522: PPUSH
13523: LD_STRING DF-2-delivery-2
13525: PPUSH
13526: CALL_OW 94
// DialogueOff ;
13530: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13534: LD_STRING Crates2
13536: PPUSH
13537: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13541: LD_ADDR_EXP 17
13545: PUSH
13546: LD_INT 63000
13548: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13549: LD_ADDR_EXP 16
13553: PUSH
13554: LD_INT 600
13556: ST_TO_ADDR
// end ;
13557: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13558: LD_EXP 4
13562: PUSH
13563: LD_EXP 15
13567: PUSH
13568: LD_INT 600
13570: GREATEREQUAL
13571: AND
13572: PUSH
13573: LD_OWVAR 67
13577: PUSH
13578: LD_INT 1
13580: GREATER
13581: AND
13582: IFFALSE 13748
13584: GO 13586
13586: DISABLE
// begin DialogueOn ;
13587: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13591: LD_EXP 36
13595: PPUSH
13596: LD_STRING DF-1-delivery-3
13598: PPUSH
13599: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13603: LD_EXP 28
13607: PPUSH
13608: LD_STRING DH-1-delivery-3
13610: PPUSH
13611: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13615: LD_EXP 36
13619: PPUSH
13620: LD_STRING DF-2-delivery-3
13622: PPUSH
13623: CALL_OW 94
// if IsOk ( Kaia ) then
13627: LD_EXP 33
13631: PPUSH
13632: CALL_OW 302
13636: IFFALSE 13686
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13638: LD_EXP 33
13642: PPUSH
13643: LD_STRING DK-1-delivery-3
13645: PPUSH
13646: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13650: LD_EXP 28
13654: PPUSH
13655: LD_STRING DH-2-delivery-3
13657: PPUSH
13658: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13662: LD_EXP 29
13666: PPUSH
13667: LD_STRING DG-1-delivery-3
13669: PPUSH
13670: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13674: LD_EXP 30
13678: PPUSH
13679: LD_STRING DM-1-delivery-3
13681: PPUSH
13682: CALL_OW 88
// end ; DialogueOff ;
13686: CALL_OW 7
// if Difficulty = 2 then
13690: LD_OWVAR 67
13694: PUSH
13695: LD_INT 2
13697: EQUAL
13698: IFFALSE 13725
// begin ChangeMissionObjectives ( Crates3 ) ;
13700: LD_STRING Crates3
13702: PPUSH
13703: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13707: LD_ADDR_EXP 17
13711: PUSH
13712: LD_INT 63000
13714: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13715: LD_ADDR_EXP 16
13719: PUSH
13720: LD_INT 900
13722: ST_TO_ADDR
// end else
13723: GO 13748
// begin ChangeMissionObjectives ( Crates4 ) ;
13725: LD_STRING Crates4
13727: PPUSH
13728: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13732: LD_ADDR_EXP 17
13736: PUSH
13737: LD_INT 63000
13739: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13740: LD_ADDR_EXP 16
13744: PUSH
13745: LD_INT 1200
13747: ST_TO_ADDR
// end ; end ;
13748: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13749: LD_EXP 4
13753: PUSH
13754: LD_EXP 15
13758: PUSH
13759: LD_INT 600
13761: PUSH
13762: LD_INT 900
13764: PUSH
13765: LD_INT 1200
13767: PUSH
13768: LD_INT 1400
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: LD_OWVAR 67
13781: ARRAY
13782: GREATEREQUAL
13783: AND
13784: PUSH
13785: LD_EXP 16
13789: PUSH
13790: LD_EXP 17
13794: LESSEQUAL
13795: AND
13796: IFFALSE 13882
13798: GO 13800
13800: DISABLE
// begin retreatAllowed := true ;
13801: LD_ADDR_EXP 11
13805: PUSH
13806: LD_INT 1
13808: ST_TO_ADDR
// display_strings := [ ] ;
13809: LD_ADDR_OWVAR 47
13813: PUSH
13814: EMPTY
13815: ST_TO_ADDR
// DialogueOn ;
13816: CALL_OW 6
// InGameOn ;
13820: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13824: LD_EXP 37
13828: PPUSH
13829: LD_STRING DO-radio-end
13831: PPUSH
13832: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13836: LD_EXP 28
13840: PPUSH
13841: LD_STRING DH-1-radio-end
13843: PPUSH
13844: CALL_OW 88
// InGameOff ;
13848: CALL_OW 9
// DialogueOff ;
13852: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13856: LD_STRING Retreat
13858: PPUSH
13859: CALL_OW 337
// wait ( 0 0$2 ) ;
13863: LD_INT 70
13865: PPUSH
13866: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13870: LD_EXP 28
13874: PPUSH
13875: LD_STRING DH-2-radio-end
13877: PPUSH
13878: CALL_OW 88
// end ;
13882: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13883: LD_EXP 11
13887: IFFALSE 14018
13889: GO 13891
13891: DISABLE
13892: LD_INT 0
13894: PPUSH
13895: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13896: LD_INT 10
13898: PPUSH
13899: LD_INT 0
13901: PPUSH
13902: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13906: LD_ADDR_VAR 0 1
13910: PUSH
13911: LD_EXP 39
13915: PPUSH
13916: LD_INT 25
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PPUSH
13926: CALL_OW 72
13930: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13931: LD_VAR 0 1
13935: PUSH
13936: LD_INT 102
13938: PPUSH
13939: LD_INT 69
13941: PPUSH
13942: CALL_OW 428
13946: PUSH
13947: LD_INT 0
13949: EQUAL
13950: AND
13951: IFFALSE 14018
// begin for i in tmp do
13953: LD_ADDR_VAR 0 2
13957: PUSH
13958: LD_VAR 0 1
13962: PUSH
13963: FOR_IN
13964: IFFALSE 13988
// if IsInUnit ( i ) then
13966: LD_VAR 0 2
13970: PPUSH
13971: CALL_OW 310
13975: IFFALSE 13986
// ComExitBuilding ( i ) ;
13977: LD_VAR 0 2
13981: PPUSH
13982: CALL_OW 122
13986: GO 13963
13988: POP
13989: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13990: LD_VAR 0 1
13994: PPUSH
13995: LD_INT 31
13997: PPUSH
13998: LD_INT 102
14000: PPUSH
14001: LD_INT 69
14003: PPUSH
14004: LD_INT 2
14006: PPUSH
14007: CALL_OW 205
// wait ( 0 0$3 ) ;
14011: LD_INT 105
14013: PPUSH
14014: CALL_OW 67
// end ; end ;
14018: PPOPN 2
14020: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14021: LD_EXP 11
14025: NOT
14026: PUSH
14027: LD_INT 5
14029: PPUSH
14030: CALL_OW 301
14034: AND
14035: IFFALSE 14067
14037: GO 14039
14039: DISABLE
// begin DialogueOn ;
14040: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14044: LD_EXP 36
14048: PPUSH
14049: LD_STRING DF-1-failure
14051: PPUSH
14052: CALL_OW 94
// DialogueOff ;
14056: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14060: LD_STRING FarmerDepot
14062: PPUSH
14063: CALL_OW 104
// end ;
14067: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14068: LD_EXP 11
14072: PUSH
14073: LD_EXP 28
14077: PPUSH
14078: LD_EXP 36
14082: PPUSH
14083: CALL_OW 296
14087: PUSH
14088: LD_INT 12
14090: LESS
14091: AND
14092: PUSH
14093: LD_INT 81
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 21
14105: PUSH
14106: LD_INT 1
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 69
14121: NOT
14122: AND
14123: IFFALSE 14787
14125: GO 14127
14127: DISABLE
14128: LD_INT 0
14130: PPUSH
14131: PPUSH
14132: PPUSH
// begin allowConvoys := false ;
14133: LD_ADDR_EXP 12
14137: PUSH
14138: LD_INT 0
14140: ST_TO_ADDR
// InGameOn ;
14141: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14145: LD_EXP 28
14149: PPUSH
14150: LD_EXP 36
14154: PPUSH
14155: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14159: LD_EXP 36
14163: PPUSH
14164: LD_EXP 28
14168: PPUSH
14169: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14173: LD_EXP 36
14177: PPUSH
14178: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14182: LD_EXP 28
14186: PPUSH
14187: LD_STRING DH-1-end
14189: PPUSH
14190: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14194: LD_EXP 36
14198: PPUSH
14199: LD_STRING DF-1-end
14201: PPUSH
14202: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14206: LD_EXP 36
14210: PPUSH
14211: LD_STRING DF-2-end
14213: PPUSH
14214: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14218: LD_EXP 28
14222: PPUSH
14223: LD_STRING DH-2-end
14225: PPUSH
14226: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14230: LD_EXP 36
14234: PPUSH
14235: LD_STRING DF-3-end
14237: PPUSH
14238: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14242: LD_EXP 28
14246: PPUSH
14247: LD_STRING DH-3-end
14249: PPUSH
14250: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14254: LD_EXP 29
14258: PPUSH
14259: LD_STRING DG-1-end
14261: PPUSH
14262: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14266: LD_EXP 28
14270: PPUSH
14271: LD_STRING DH-4-end
14273: PPUSH
14274: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14278: LD_EXP 36
14282: PPUSH
14283: LD_STRING DF-4-end
14285: PPUSH
14286: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14290: LD_EXP 28
14294: PPUSH
14295: LD_STRING DH-5-end
14297: PPUSH
14298: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14302: LD_EXP 36
14306: PPUSH
14307: LD_STRING DF-5-end
14309: PPUSH
14310: CALL_OW 88
// InGameOff ;
14314: CALL_OW 9
// allowCargoEvacuation := true ;
14318: LD_ADDR_EXP 7
14322: PUSH
14323: LD_INT 1
14325: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14326: LD_ADDR_VAR 0 2
14330: PUSH
14331: LD_INT 4
14333: PUSH
14334: LD_INT 3
14336: PUSH
14337: LD_INT 2
14339: PUSH
14340: LD_INT 1
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: PUSH
14349: LD_OWVAR 67
14353: ARRAY
14354: ST_TO_ADDR
// if farmerSquad < max then
14355: LD_EXP 39
14359: PUSH
14360: LD_VAR 0 2
14364: LESS
14365: IFFALSE 14377
// max := farmerSquad ;
14367: LD_ADDR_VAR 0 2
14371: PUSH
14372: LD_EXP 39
14376: ST_TO_ADDR
// for i := 1 to max do
14377: LD_ADDR_VAR 0 1
14381: PUSH
14382: DOUBLE
14383: LD_INT 1
14385: DEC
14386: ST_TO_ADDR
14387: LD_VAR 0 2
14391: PUSH
14392: FOR_TO
14393: IFFALSE 14431
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14395: LD_EXP 39
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: LD_INT 2
14406: PPUSH
14407: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14411: LD_ADDR_EXP 39
14415: PUSH
14416: LD_EXP 39
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 3
14428: ST_TO_ADDR
// end ;
14429: GO 14392
14431: POP
14432: POP
// for i in Farmer ^ farmerSquad do
14433: LD_ADDR_VAR 0 1
14437: PUSH
14438: LD_EXP 36
14442: PUSH
14443: LD_EXP 39
14447: ADD
14448: PUSH
14449: FOR_IN
14450: IFFALSE 14489
// begin if IsInUnit ( i ) then
14452: LD_VAR 0 1
14456: PPUSH
14457: CALL_OW 310
14461: IFFALSE 14472
// ComExitBuilding ( i ) ;
14463: LD_VAR 0 1
14467: PPUSH
14468: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14472: LD_VAR 0 1
14476: PPUSH
14477: LD_INT 102
14479: PPUSH
14480: LD_INT 7
14482: PPUSH
14483: CALL_OW 171
// end ;
14487: GO 14449
14489: POP
14490: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14491: LD_ADDR_VAR 0 1
14495: PUSH
14496: LD_INT 22
14498: PUSH
14499: LD_INT 5
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 21
14508: PUSH
14509: LD_INT 3
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PPUSH
14520: CALL_OW 69
14524: PUSH
14525: LD_INT 5
14527: DIFF
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14546
// SetSide ( i , 2 ) ;
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_INT 2
14539: PPUSH
14540: CALL_OW 235
14544: GO 14529
14546: POP
14547: POP
// wait ( 0 0$2 ) ;
14548: LD_INT 70
14550: PPUSH
14551: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14555: LD_EXP 28
14559: PPUSH
14560: LD_STRING DH-6-end
14562: PPUSH
14563: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14567: LD_INT 35
14569: PPUSH
14570: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14574: LD_ADDR_VAR 0 3
14578: PUSH
14579: LD_EXP 36
14583: PUSH
14584: LD_EXP 39
14588: ADD
14589: PPUSH
14590: LD_INT 95
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PPUSH
14600: CALL_OW 72
14604: ST_TO_ADDR
// if tmp then
14605: LD_VAR 0 3
14609: IFFALSE 14653
// for i in tmp do
14611: LD_ADDR_VAR 0 1
14615: PUSH
14616: LD_VAR 0 3
14620: PUSH
14621: FOR_IN
14622: IFFALSE 14651
// begin farmerSquad := farmerSquad diff i ;
14624: LD_ADDR_EXP 39
14628: PUSH
14629: LD_EXP 39
14633: PUSH
14634: LD_VAR 0 1
14638: DIFF
14639: ST_TO_ADDR
// RemoveUnit ( i ) ;
14640: LD_VAR 0 1
14644: PPUSH
14645: CALL_OW 64
// end ;
14649: GO 14621
14651: POP
14652: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14653: LD_EXP 39
14657: PUSH
14658: EMPTY
14659: EQUAL
14660: PUSH
14661: LD_EXP 36
14665: PPUSH
14666: CALL_OW 305
14670: NOT
14671: AND
14672: IFFALSE 14567
// if farmerHumanLoseCounter = 0 then
14674: LD_EXP 20
14678: PUSH
14679: LD_INT 0
14681: EQUAL
14682: IFFALSE 14691
// SetAchievement ( ACH_BABY ) ;
14684: LD_STRING ACH_BABY
14686: PPUSH
14687: CALL_OW 543
// wait ( 1 1$00 ) ;
14691: LD_INT 2100
14693: PPUSH
14694: CALL_OW 67
// SendAttack ;
14698: CALL 6163 0 0
// Say ( Heike , DH-7-end ) ;
14702: LD_EXP 28
14706: PPUSH
14707: LD_STRING DH-7-end
14709: PPUSH
14710: CALL_OW 88
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
14714: LD_ADDR_VAR 0 1
14718: PUSH
14719: DOUBLE
14720: LD_INT 1
14722: DEC
14723: ST_TO_ADDR
14724: LD_INT 2
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: LD_INT 4
14732: PUSH
14733: LD_INT 4
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: PUSH
14742: LD_OWVAR 67
14746: ARRAY
14747: PUSH
14748: FOR_TO
14749: IFFALSE 14785
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
14751: LD_INT 4200
14753: PUSH
14754: LD_INT 3500
14756: PUSH
14757: LD_INT 3150
14759: PUSH
14760: LD_INT 2800
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: PUSH
14769: LD_OWVAR 67
14773: ARRAY
14774: PPUSH
14775: CALL_OW 67
// SendAttack ;
14779: CALL 6163 0 0
// end ;
14783: GO 14748
14785: POP
14786: POP
// end ;
14787: PPOPN 3
14789: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14790: LD_EXP 7
14794: PUSH
14795: LD_EXP 21
14799: PUSH
14800: LD_INT 0
14802: GREATER
14803: AND
14804: IFFALSE 14814
14806: GO 14808
14808: DISABLE
// begin enable ;
14809: ENABLE
// CargoEvacuation ;
14810: CALL 3660 0 0
// end ;
14814: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14815: LD_EXP 17
14819: PUSH
14820: LD_INT 18900
14822: LESSEQUAL
14823: IFFALSE 14872
14825: GO 14827
14827: DISABLE
// begin DialogueOn ;
14828: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14832: LD_EXP 36
14836: PPUSH
14837: LD_STRING DF-1-distribution-a
14839: PPUSH
14840: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14844: LD_EXP 28
14848: PPUSH
14849: LD_STRING DH-1-distribution-a
14851: PPUSH
14852: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14856: LD_EXP 36
14860: PPUSH
14861: LD_STRING DF-2-distribution-a
14863: PPUSH
14864: CALL_OW 94
// DialogueOff ;
14868: CALL_OW 7
// end ;
14872: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14873: LD_EXP 17
14877: PUSH
14878: LD_INT 0
14880: LESSEQUAL
14881: IFFALSE 14913
14883: GO 14885
14885: DISABLE
// begin DialogueOn ;
14886: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14890: LD_EXP 36
14894: PPUSH
14895: LD_STRING DF-3-distribution-a
14897: PPUSH
14898: CALL_OW 94
// YouLost ( Distribution ) ;
14902: LD_STRING Distribution
14904: PPUSH
14905: CALL_OW 104
// DialogueOff ;
14909: CALL_OW 7
// end ;
14913: END
// every 0 0$1 trigger vehCounter >= 2 do
14914: LD_EXP 22
14918: PUSH
14919: LD_INT 2
14921: GREATEREQUAL
14922: IFFALSE 14934
14924: GO 14926
14926: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14927: LD_STRING VehConstructed
14929: PPUSH
14930: CALL_OW 337
14934: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14935: LD_INT 22
14937: PUSH
14938: LD_INT 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 34
14947: PUSH
14948: LD_INT 12
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 69
14963: IFFALSE 15023
14965: GO 14967
14967: DISABLE
// begin DialogueOn ;
14968: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14972: LD_EXP 28
14976: PPUSH
14977: LD_STRING DH-1-truck
14979: PPUSH
14980: CALL_OW 88
// if IsOk ( Markov ) then
14984: LD_EXP 35
14988: PPUSH
14989: CALL_OW 302
14993: IFFALSE 15019
// begin Say ( Markov , DMar-1-truck ) ;
14995: LD_EXP 35
14999: PPUSH
15000: LD_STRING DMar-1-truck
15002: PPUSH
15003: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15007: LD_EXP 28
15011: PPUSH
15012: LD_STRING DH-2-truck
15014: PPUSH
15015: CALL_OW 88
// end ; DialogueOff ;
15019: CALL_OW 7
// end ;
15023: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15024: LD_INT 0
15026: PPUSH
15027: PPUSH
15028: PPUSH
// if IsOk ( Givi ) then
15029: LD_EXP 29
15033: PPUSH
15034: CALL_OW 302
15038: IFFALSE 15054
// begin Say ( Givi , DG-1-nocargo ) ;
15040: LD_EXP 29
15044: PPUSH
15045: LD_STRING DG-1-nocargo
15047: PPUSH
15048: CALL_OW 88
// exit ;
15052: GO 15150
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15054: LD_ADDR_VAR 0 2
15058: PUSH
15059: LD_EXP 42
15063: PPUSH
15064: LD_INT 26
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 72
15078: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15079: LD_ADDR_VAR 0 3
15083: PUSH
15084: LD_EXP 42
15088: PPUSH
15089: LD_INT 26
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PPUSH
15099: CALL_OW 72
15103: ST_TO_ADDR
// if randomMen then
15104: LD_VAR 0 2
15108: IFFALSE 15128
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15110: LD_VAR 0 2
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: PPUSH
15119: LD_STRING DArm-1-nocargo
15121: PPUSH
15122: CALL_OW 88
15126: GO 15150
// if randomWomen then
15128: LD_VAR 0 3
15132: IFFALSE 15150
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15134: LD_VAR 0 3
15138: PUSH
15139: LD_INT 1
15141: ARRAY
15142: PPUSH
15143: LD_STRING DArf-1-nocargo
15145: PPUSH
15146: CALL_OW 88
// end ;
15150: LD_VAR 0 1
15154: RET
// export function IncomingAttack ; begin
15155: LD_INT 0
15157: PPUSH
// if attackWave = 1 then
15158: LD_EXP 19
15162: PUSH
15163: LD_INT 1
15165: EQUAL
15166: IFFALSE 15237
// begin DialogueOn ;
15168: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15172: LD_EXP 37
15176: PPUSH
15177: LD_STRING DO-1-radio-1
15179: PPUSH
15180: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15184: LD_EXP 28
15188: PPUSH
15189: LD_STRING DH-1-radio-1-
15191: PPUSH
15192: CALL_OW 88
// if IsOk ( Markov ) then
15196: LD_EXP 35
15200: PPUSH
15201: CALL_OW 302
15205: IFFALSE 15231
// begin Say ( Markov , DMar-1-radio-1 ) ;
15207: LD_EXP 35
15211: PPUSH
15212: LD_STRING DMar-1-radio-1
15214: PPUSH
15215: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15219: LD_EXP 28
15223: PPUSH
15224: LD_STRING DH-2-radio-1
15226: PPUSH
15227: CALL_OW 88
// end ; DialogueOff ;
15231: CALL_OW 7
// end else
15235: GO 15261
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15237: LD_EXP 37
15241: PPUSH
15242: LD_STRING DO-1-radio-u
15244: PPUSH
15245: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15249: LD_EXP 28
15253: PPUSH
15254: LD_STRING DH-1-radio-u
15256: PPUSH
15257: CALL_OW 88
// end ; end ;
15261: LD_VAR 0 1
15265: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15266: LD_EXP 44
15270: PPUSH
15271: LD_INT 95
15273: PUSH
15274: LD_INT 8
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PPUSH
15281: CALL_OW 72
15285: IFFALSE 15388
15287: GO 15289
15289: DISABLE
15290: LD_INT 0
15292: PPUSH
// begin enable ;
15293: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15294: LD_ADDR_VAR 0 1
15298: PUSH
15299: LD_EXP 44
15303: PPUSH
15304: LD_INT 95
15306: PUSH
15307: LD_INT 8
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PPUSH
15314: CALL_OW 72
15318: PUSH
15319: FOR_IN
15320: IFFALSE 15349
// begin usForces := usForces diff i ;
15322: LD_ADDR_EXP 44
15326: PUSH
15327: LD_EXP 44
15331: PUSH
15332: LD_VAR 0 1
15336: DIFF
15337: ST_TO_ADDR
// RemoveUnit ( i ) ;
15338: LD_VAR 0 1
15342: PPUSH
15343: CALL_OW 64
// end ;
15347: GO 15319
15349: POP
15350: POP
// if not americanHasEscaped and attackWave = 1 then
15351: LD_EXP 8
15355: NOT
15356: PUSH
15357: LD_EXP 19
15361: PUSH
15362: LD_INT 1
15364: EQUAL
15365: AND
15366: IFFALSE 15388
// begin americanHasEscaped := true ;
15368: LD_ADDR_EXP 8
15372: PUSH
15373: LD_INT 1
15375: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15376: LD_EXP 28
15380: PPUSH
15381: LD_STRING DH-2-assault-a
15383: PPUSH
15384: CALL_OW 88
// end ; end ;
15388: PPOPN 1
15390: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15391: LD_INT 4
15393: PPUSH
15394: LD_INT 22
15396: PUSH
15397: LD_INT 1
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 70
15408: PUSH
15409: LD_EXP 11
15413: NOT
15414: AND
15415: IFFALSE 15432
15417: GO 15419
15419: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15420: LD_EXP 36
15424: PPUSH
15425: LD_STRING DF-1-attack
15427: PPUSH
15428: CALL_OW 94
15432: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15433: LD_INT 5
15435: PPUSH
15436: CALL_OW 255
15440: PUSH
15441: LD_INT 2
15443: EQUAL
15444: IFFALSE 15456
15446: GO 15448
15448: DISABLE
// YouLost ( Attack ) ;
15449: LD_STRING Attack
15451: PPUSH
15452: CALL_OW 104
15456: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15457: LD_INT 22
15459: PUSH
15460: LD_INT 1
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 21
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 69
15485: NOT
15486: PUSH
15487: LD_INT 22
15489: PUSH
15490: LD_INT 4
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PPUSH
15497: CALL_OW 69
15501: NOT
15502: AND
15503: PUSH
15504: LD_EXP 11
15508: NOT
15509: AND
15510: PUSH
15511: LD_EXP 15
15515: PUSH
15516: LD_INT 90
15518: GREATER
15519: AND
15520: PUSH
15521: LD_INT 7
15523: PPUSH
15524: LD_INT 22
15526: PUSH
15527: LD_INT 2
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 21
15536: PUSH
15537: LD_INT 1
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PPUSH
15548: CALL_OW 70
15552: AND
15553: PUSH
15554: LD_INT 22
15556: PUSH
15557: LD_INT 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 50
15566: PUSH
15567: EMPTY
15568: LIST
15569: PUSH
15570: LD_INT 30
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: LIST
15584: PPUSH
15585: CALL_OW 69
15589: AND
15590: IFFALSE 16383
15592: GO 15594
15594: DISABLE
15595: LD_INT 0
15597: PPUSH
15598: PPUSH
15599: PPUSH
15600: PPUSH
15601: PPUSH
// begin depot := usDepot ;
15602: LD_ADDR_VAR 0 5
15606: PUSH
15607: LD_INT 11
15609: ST_TO_ADDR
// if not depot then
15610: LD_VAR 0 5
15614: NOT
15615: IFFALSE 15655
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15617: LD_ADDR_VAR 0 5
15621: PUSH
15622: LD_INT 22
15624: PUSH
15625: LD_INT 2
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 30
15634: PUSH
15635: LD_INT 0
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PPUSH
15646: CALL_OW 69
15650: PUSH
15651: LD_INT 1
15653: ARRAY
15654: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15655: LD_ADDR_VAR 0 1
15659: PUSH
15660: LD_EXP 42
15664: PPUSH
15665: LD_INT 26
15667: PUSH
15668: LD_INT 1
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PPUSH
15675: CALL_OW 72
15679: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15680: LD_ADDR_VAR 0 2
15684: PUSH
15685: LD_EXP 42
15689: PPUSH
15690: LD_INT 26
15692: PUSH
15693: LD_INT 2
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PPUSH
15700: CALL_OW 72
15704: ST_TO_ADDR
// if IsOk ( Kaia ) then
15705: LD_EXP 33
15709: PPUSH
15710: CALL_OW 302
15714: IFFALSE 15735
// speaker := [ Kaia , DK ] else
15716: LD_ADDR_VAR 0 3
15720: PUSH
15721: LD_EXP 33
15725: PUSH
15726: LD_STRING DK
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: ST_TO_ADDR
15733: GO 15815
// if randomMen then
15735: LD_VAR 0 1
15739: IFFALSE 15774
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: LD_VAR 0 1
15750: PUSH
15751: LD_INT 1
15753: PPUSH
15754: LD_VAR 0 1
15758: PPUSH
15759: CALL_OW 12
15763: ARRAY
15764: PUSH
15765: LD_STRING DArm
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: ST_TO_ADDR
15772: GO 15815
// if randomWomen then
15774: LD_VAR 0 2
15778: IFFALSE 15813
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15780: LD_ADDR_VAR 0 3
15784: PUSH
15785: LD_VAR 0 2
15789: PUSH
15790: LD_INT 1
15792: PPUSH
15793: LD_VAR 0 2
15797: PPUSH
15798: CALL_OW 12
15802: ARRAY
15803: PUSH
15804: LD_STRING DArf
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: ST_TO_ADDR
15811: GO 15815
// exit ;
15813: GO 16383
// if IsInUnit ( speaker [ 1 ] ) then
15815: LD_VAR 0 3
15819: PUSH
15820: LD_INT 1
15822: ARRAY
15823: PPUSH
15824: CALL_OW 310
15828: IFFALSE 15851
// place := IsInUnit ( speaker [ 1 ] ) else
15830: LD_ADDR_VAR 0 4
15834: PUSH
15835: LD_VAR 0 3
15839: PUSH
15840: LD_INT 1
15842: ARRAY
15843: PPUSH
15844: CALL_OW 310
15848: ST_TO_ADDR
15849: GO 15865
// place := speaker [ 1 ] ;
15851: LD_ADDR_VAR 0 4
15855: PUSH
15856: LD_VAR 0 3
15860: PUSH
15861: LD_INT 1
15863: ARRAY
15864: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15865: LD_VAR 0 4
15869: PPUSH
15870: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15874: LD_VAR 0 4
15878: PPUSH
15879: CALL_OW 250
15883: PPUSH
15884: LD_VAR 0 4
15888: PPUSH
15889: CALL_OW 251
15893: PPUSH
15894: CALL 2147 0 2
// wait ( 0 0$2 ) ;
15898: LD_INT 70
15900: PPUSH
15901: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15905: LD_EXP 38
15909: PPUSH
15910: CALL_OW 305
15914: NOT
15915: IFFALSE 15919
// exit ;
15917: GO 16383
// allowConvoys := false ;
15919: LD_ADDR_EXP 12
15923: PUSH
15924: LD_INT 0
15926: ST_TO_ADDR
// InGameOn ;
15927: CALL_OW 8
// wait ( 0 0$1 ) ;
15931: LD_INT 35
15933: PPUSH
15934: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15938: LD_EXP 38
15942: PPUSH
15943: LD_STRING DI-1-land
15945: PPUSH
15946: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15950: LD_VAR 0 3
15954: PUSH
15955: LD_INT 1
15957: ARRAY
15958: PPUSH
15959: CALL_OW 310
15963: IFFALSE 15978
// ComExit ( speaker [ 1 ] ) ;
15965: LD_VAR 0 3
15969: PUSH
15970: LD_INT 1
15972: ARRAY
15973: PPUSH
15974: CALL 73898 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15978: LD_VAR 0 3
15982: PUSH
15983: LD_INT 1
15985: ARRAY
15986: PPUSH
15987: LD_EXP 38
15991: PPUSH
15992: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15996: LD_VAR 0 3
16000: PUSH
16001: LD_INT 1
16003: ARRAY
16004: PPUSH
16005: LD_EXP 38
16009: PPUSH
16010: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16014: LD_EXP 38
16018: PPUSH
16019: LD_VAR 0 3
16023: PUSH
16024: LD_INT 1
16026: ARRAY
16027: PPUSH
16028: CALL_OW 119
// wait ( 0 0$1 ) ;
16032: LD_INT 35
16034: PPUSH
16035: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16039: LD_VAR 0 3
16043: PUSH
16044: LD_INT 1
16046: ARRAY
16047: PPUSH
16048: LD_VAR 0 3
16052: PUSH
16053: LD_INT 2
16055: ARRAY
16056: PUSH
16057: LD_STRING -1-land
16059: STR
16060: PPUSH
16061: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16065: LD_EXP 38
16069: PPUSH
16070: LD_STRING DI-2-land
16072: PPUSH
16073: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16077: LD_VAR 0 3
16081: PUSH
16082: LD_INT 1
16084: ARRAY
16085: PPUSH
16086: LD_VAR 0 3
16090: PUSH
16091: LD_INT 2
16093: ARRAY
16094: PUSH
16095: LD_STRING -2-land
16097: STR
16098: PPUSH
16099: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16103: LD_VAR 0 3
16107: PUSH
16108: LD_INT 1
16110: ARRAY
16111: PPUSH
16112: LD_VAR 0 3
16116: PUSH
16117: LD_INT 2
16119: ARRAY
16120: PUSH
16121: LD_STRING -3-land
16123: STR
16124: PPUSH
16125: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16129: LD_EXP 28
16133: PPUSH
16134: LD_STRING DH-1-land
16136: PPUSH
16137: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16141: LD_VAR 0 5
16145: PPUSH
16146: CALL_OW 313
16150: PUSH
16151: LD_INT 6
16153: EQUAL
16154: IFFALSE 16174
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16156: LD_VAR 0 5
16160: PPUSH
16161: CALL_OW 313
16165: PUSH
16166: LD_INT 1
16168: ARRAY
16169: PPUSH
16170: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16174: LD_EXP 38
16178: PPUSH
16179: LD_INT 2
16181: PPUSH
16182: CALL_OW 235
// CenterOnUnits ( depot ) ;
16186: LD_VAR 0 5
16190: PPUSH
16191: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16195: LD_EXP 38
16199: PPUSH
16200: LD_VAR 0 5
16204: PPUSH
16205: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16209: LD_VAR 0 3
16213: PUSH
16214: LD_INT 1
16216: ARRAY
16217: PPUSH
16218: LD_VAR 0 5
16222: PPUSH
16223: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16227: LD_INT 35
16229: PPUSH
16230: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16234: LD_EXP 38
16238: PPUSH
16239: CALL_OW 310
16243: PUSH
16244: LD_EXP 38
16248: PPUSH
16249: CALL_OW 302
16253: NOT
16254: OR
16255: PUSH
16256: LD_VAR 0 5
16260: PPUSH
16261: CALL_OW 302
16265: NOT
16266: OR
16267: IFFALSE 16227
// InGameOff ;
16269: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16273: LD_EXP 38
16277: PPUSH
16278: CALL_OW 302
16282: NOT
16283: IFFALSE 16287
// exit ;
16285: GO 16383
// if not IsOk ( depot ) then
16287: LD_VAR 0 5
16291: PPUSH
16292: CALL_OW 302
16296: NOT
16297: IFFALSE 16360
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16299: LD_EXP 38
16303: PPUSH
16304: LD_INT 30
16306: PPUSH
16307: LD_INT 1
16309: PPUSH
16310: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16314: LD_INT 35
16316: PPUSH
16317: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16321: LD_EXP 38
16325: PPUSH
16326: LD_INT 30
16328: PPUSH
16329: LD_INT 1
16331: PPUSH
16332: CALL_OW 307
16336: PUSH
16337: LD_EXP 38
16341: PPUSH
16342: CALL_OW 301
16346: OR
16347: IFFALSE 16314
// RemoveUnit ( Ibrahim ) ;
16349: LD_EXP 38
16353: PPUSH
16354: CALL_OW 64
// exit ;
16358: GO 16383
// end ; ibrahimInDepot := true ;
16360: LD_ADDR_EXP 25
16364: PUSH
16365: LD_INT 1
16367: ST_TO_ADDR
// allowConvoys := true ;
16368: LD_ADDR_EXP 12
16372: PUSH
16373: LD_INT 1
16375: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16376: LD_STRING IbrahimInDepot
16378: PPUSH
16379: CALL_OW 97
// end ;
16383: PPOPN 5
16385: END
// export function IbrahimQuery ; begin
16386: LD_INT 0
16388: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16389: LD_STRING IbrahimQuery
16391: PPUSH
16392: CALL_OW 97
16396: PUSH
16397: LD_INT 1
16399: DOUBLE
16400: EQUAL
16401: IFTRUE 16405
16403: GO 16681
16405: POP
// begin allowConvoys := false ;
16406: LD_ADDR_EXP 12
16410: PUSH
16411: LD_INT 0
16413: ST_TO_ADDR
// ibrahimInDepot := false ;
16414: LD_ADDR_EXP 25
16418: PUSH
16419: LD_INT 0
16421: ST_TO_ADDR
// InGameOn ;
16422: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16426: LD_EXP 28
16430: PPUSH
16431: CALL_OW 87
// wait ( 0 0$1 ) ;
16435: LD_INT 35
16437: PPUSH
16438: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16442: LD_EXP 28
16446: PPUSH
16447: LD_STRING DH-1-interrogation
16449: PPUSH
16450: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16454: LD_EXP 38
16458: PPUSH
16459: LD_STRING DI-1-interrogation
16461: PPUSH
16462: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16466: LD_EXP 28
16470: PPUSH
16471: LD_STRING DH-2-interrogation
16473: PPUSH
16474: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16478: LD_EXP 38
16482: PPUSH
16483: LD_STRING DI-2-interrogation
16485: PPUSH
16486: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16490: LD_EXP 28
16494: PPUSH
16495: LD_STRING DH-3-interrogation
16497: PPUSH
16498: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16502: LD_EXP 38
16506: PPUSH
16507: LD_STRING DI-3-interrogation
16509: PPUSH
16510: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16514: LD_EXP 28
16518: PPUSH
16519: LD_STRING DH-4-interrogation
16521: PPUSH
16522: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16526: LD_EXP 38
16530: PPUSH
16531: LD_STRING DI-4-interrogation
16533: PPUSH
16534: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16538: LD_EXP 28
16542: PPUSH
16543: LD_STRING DH-5-interrogation
16545: PPUSH
16546: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16550: LD_EXP 38
16554: PPUSH
16555: LD_STRING DI-5-interrogation
16557: PPUSH
16558: CALL_OW 88
// wait ( 0 0$1 ) ;
16562: LD_INT 35
16564: PPUSH
16565: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16569: LD_STRING IbrahimDecisionQuery
16571: PPUSH
16572: CALL_OW 97
16576: PUSH
16577: LD_INT 1
16579: DOUBLE
16580: EQUAL
16581: IFTRUE 16585
16583: GO 16609
16585: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16586: LD_EXP 38
16590: PPUSH
16591: LD_STRING DI-1-kill
16593: PPUSH
16594: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16598: LD_EXP 38
16602: PPUSH
16603: CALL_OW 66
// end ; 2 :
16607: GO 16675
16609: LD_INT 2
16611: DOUBLE
16612: EQUAL
16613: IFTRUE 16617
16615: GO 16674
16617: POP
// begin SetSide ( Ibrahim , 6 ) ;
16618: LD_EXP 38
16622: PPUSH
16623: LD_INT 6
16625: PPUSH
16626: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16630: LD_EXP 38
16634: PPUSH
16635: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16639: LD_EXP 38
16643: PPUSH
16644: LD_INT 66
16646: PPUSH
16647: LD_INT 2
16649: PPUSH
16650: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16654: LD_EXP 38
16658: PPUSH
16659: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16663: LD_EXP 28
16667: PPUSH
16668: CALL_OW 122
// end ; end ;
16672: GO 16675
16674: POP
// InGameOff ;
16675: CALL_OW 9
// end ; 2 :
16679: GO 16695
16681: LD_INT 2
16683: DOUBLE
16684: EQUAL
16685: IFTRUE 16689
16687: GO 16694
16689: POP
// exit ; end ;
16690: GO 16771
16692: GO 16695
16694: POP
// allowConvoys := true ;
16695: LD_ADDR_EXP 12
16699: PUSH
16700: LD_INT 1
16702: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16703: LD_INT 5250
16705: PPUSH
16706: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16710: LD_INT 35
16712: PPUSH
16713: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16717: LD_INT 81
16719: PUSH
16720: LD_INT 2
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 21
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PPUSH
16741: CALL_OW 69
16745: NOT
16746: IFFALSE 16710
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
16748: LD_EXP 38
16752: PPUSH
16753: LD_INT 34
16755: PPUSH
16756: LD_INT 21
16758: PPUSH
16759: CALL_OW 111
// ibrahimIsFree := true ;
16763: LD_ADDR_EXP 26
16767: PUSH
16768: LD_INT 1
16770: ST_TO_ADDR
// end ;
16771: LD_VAR 0 1
16775: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
16776: LD_EXP 26
16780: PUSH
16781: LD_EXP 38
16785: PPUSH
16786: CALL_OW 302
16790: AND
16791: PUSH
16792: LD_INT 2
16794: PPUSH
16795: LD_EXP 38
16799: PPUSH
16800: CALL_OW 292
16804: AND
16805: IFFALSE 17572
16807: GO 16809
16809: DISABLE
16810: LD_INT 0
16812: PPUSH
16813: PPUSH
16814: PPUSH
16815: PPUSH
16816: PPUSH
16817: PPUSH
// begin wait ( 0 0$10 ) ;
16818: LD_INT 350
16820: PPUSH
16821: CALL_OW 67
// allowConvoys := false ;
16825: LD_ADDR_EXP 12
16829: PUSH
16830: LD_INT 0
16832: ST_TO_ADDR
// depot := usDepot ;
16833: LD_ADDR_VAR 0 4
16837: PUSH
16838: LD_INT 11
16840: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16841: LD_INT 11
16843: NOT
16844: PUSH
16845: LD_INT 22
16847: PUSH
16848: LD_INT 2
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 50
16857: PUSH
16858: EMPTY
16859: LIST
16860: PUSH
16861: LD_INT 30
16863: PUSH
16864: LD_INT 0
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: PPUSH
16876: CALL_OW 69
16880: AND
16881: IFFALSE 16928
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16883: LD_ADDR_VAR 0 4
16887: PUSH
16888: LD_INT 22
16890: PUSH
16891: LD_INT 2
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 50
16900: PUSH
16901: EMPTY
16902: LIST
16903: PUSH
16904: LD_INT 30
16906: PUSH
16907: LD_INT 0
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: PPUSH
16919: CALL_OW 69
16923: PUSH
16924: LD_INT 1
16926: ARRAY
16927: ST_TO_ADDR
// InGameOn ;
16928: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16932: LD_EXP 38
16936: PPUSH
16937: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
16941: LD_EXP 38
16945: PPUSH
16946: LD_STRING DI-1-free
16948: PPUSH
16949: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
16953: LD_EXP 28
16957: PPUSH
16958: LD_EXP 38
16962: PPUSH
16963: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
16967: LD_EXP 28
16971: PPUSH
16972: LD_STRING DH-1-free
16974: PPUSH
16975: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
16979: LD_EXP 38
16983: PPUSH
16984: LD_EXP 28
16988: PPUSH
16989: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
16993: LD_EXP 38
16997: PPUSH
16998: LD_STRING DI-2-free
17000: PPUSH
17001: CALL_OW 88
// changeClass := 0 ;
17005: LD_ADDR_VAR 0 1
17009: PUSH
17010: LD_INT 0
17012: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17013: LD_STRING IbrahimJoinQuery
17015: PPUSH
17016: CALL_OW 97
17020: PUSH
17021: LD_INT 1
17023: DOUBLE
17024: EQUAL
17025: IFTRUE 17029
17027: GO 17040
17029: POP
// begin changeClass := 1 ;
17030: LD_ADDR_VAR 0 1
17034: PUSH
17035: LD_INT 1
17037: ST_TO_ADDR
// end ; 2 :
17038: GO 17280
17040: LD_INT 2
17042: DOUBLE
17043: EQUAL
17044: IFTRUE 17048
17046: GO 17200
17048: POP
// begin Say ( Heike , DH-1-decline ) ;
17049: LD_EXP 28
17053: PPUSH
17054: LD_STRING DH-1-decline
17056: PPUSH
17057: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17061: LD_EXP 38
17065: PPUSH
17066: LD_STRING DI-1-decline
17068: PPUSH
17069: CALL_OW 88
// InGameOff ;
17073: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17077: LD_EXP 38
17081: PPUSH
17082: LD_INT 30
17084: PPUSH
17085: LD_INT 1
17087: PPUSH
17088: CALL_OW 111
// p := 0 ;
17092: LD_ADDR_VAR 0 3
17096: PUSH
17097: LD_INT 0
17099: ST_TO_ADDR
// repeat p := p + 1 ;
17100: LD_ADDR_VAR 0 3
17104: PUSH
17105: LD_VAR 0 3
17109: PUSH
17110: LD_INT 1
17112: PLUS
17113: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17114: LD_INT 35
17116: PPUSH
17117: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17121: LD_EXP 38
17125: PPUSH
17126: LD_INT 30
17128: PPUSH
17129: LD_INT 1
17131: PPUSH
17132: CALL_OW 307
17136: PUSH
17137: LD_INT 22
17139: PUSH
17140: LD_INT 2
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 101
17149: PUSH
17150: LD_INT 6
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PPUSH
17161: CALL_OW 69
17165: NOT
17166: OR
17167: PUSH
17168: LD_VAR 0 3
17172: PUSH
17173: LD_INT 10
17175: GREATER
17176: OR
17177: IFFALSE 17100
// RemoveUnit ( Ibrahim ) ;
17179: LD_EXP 38
17183: PPUSH
17184: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17188: LD_INT 1
17190: PPUSH
17191: LD_STRING 03_IbrahimHasEscaped
17193: PPUSH
17194: CALL_OW 39
// end ; 3 :
17198: GO 17280
17200: LD_INT 3
17202: DOUBLE
17203: EQUAL
17204: IFTRUE 17208
17206: GO 17279
17208: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17209: LD_EXP 28
17213: PPUSH
17214: LD_STRING DH-1-radio-hq
17216: PPUSH
17217: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17221: LD_EXP 37
17225: PPUSH
17226: LD_STRING DO-1-radio-hq
17228: PPUSH
17229: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17233: LD_EXP 28
17237: PPUSH
17238: LD_STRING DH-2-radio-hq
17240: PPUSH
17241: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17245: LD_EXP 37
17249: PPUSH
17250: LD_STRING DO-2-radio-hq
17252: PPUSH
17253: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17257: LD_EXP 28
17261: PPUSH
17262: LD_STRING DH-3-radio-hq
17264: PPUSH
17265: CALL_OW 88
// changeClass := 1 ;
17269: LD_ADDR_VAR 0 1
17273: PUSH
17274: LD_INT 1
17276: ST_TO_ADDR
// end ; end ;
17277: GO 17280
17279: POP
// if changeClass then
17280: LD_VAR 0 1
17284: IFFALSE 17572
// begin Say ( Heike , DH-1-agree ) ;
17286: LD_EXP 28
17290: PPUSH
17291: LD_STRING DH-1-agree
17293: PPUSH
17294: CALL_OW 88
// if IsOk ( Givi ) then
17298: LD_EXP 29
17302: PPUSH
17303: CALL_OW 302
17307: IFFALSE 17345
// begin Say ( Givi , DG-1-agree ) ;
17309: LD_EXP 29
17313: PPUSH
17314: LD_STRING DG-1-agree
17316: PPUSH
17317: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17321: LD_EXP 28
17325: PPUSH
17326: LD_STRING DH-2-agree
17328: PPUSH
17329: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17333: LD_EXP 29
17337: PPUSH
17338: LD_STRING DG-2-agree
17340: PPUSH
17341: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17345: LD_VAR 0 4
17349: PPUSH
17350: CALL_OW 313
17354: PUSH
17355: LD_INT 6
17357: EQUAL
17358: IFFALSE 17378
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17360: LD_VAR 0 4
17364: PPUSH
17365: CALL_OW 313
17369: PUSH
17370: LD_INT 1
17372: ARRAY
17373: PPUSH
17374: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17378: LD_EXP 38
17382: PPUSH
17383: LD_INT 2
17385: PPUSH
17386: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17390: LD_ADDR_VAR 0 5
17394: PUSH
17395: LD_EXP 38
17399: PPUSH
17400: CALL_OW 250
17404: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17405: LD_ADDR_VAR 0 6
17409: PUSH
17410: LD_EXP 38
17414: PPUSH
17415: CALL_OW 251
17419: ST_TO_ADDR
// if depot then
17420: LD_VAR 0 4
17424: IFFALSE 17473
// begin ComEnterUnit ( Ibrahim , depot ) ;
17426: LD_EXP 38
17430: PPUSH
17431: LD_VAR 0 4
17435: PPUSH
17436: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17440: LD_INT 35
17442: PPUSH
17443: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17447: LD_EXP 38
17451: PPUSH
17452: CALL_OW 310
17456: IFFALSE 17440
// b := IsInUnit ( Ibrahim ) ;
17458: LD_ADDR_VAR 0 2
17462: PUSH
17463: LD_EXP 38
17467: PPUSH
17468: CALL_OW 310
17472: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17473: LD_EXP 38
17477: PPUSH
17478: CALL_OW 64
// uc_side := 2 ;
17482: LD_ADDR_OWVAR 20
17486: PUSH
17487: LD_INT 2
17489: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17490: LD_ADDR_EXP 38
17494: PUSH
17495: LD_STRING Ibrahim
17497: PPUSH
17498: LD_INT 0
17500: PPUSH
17501: LD_STRING 
17503: PPUSH
17504: CALL 36773 0 3
17508: ST_TO_ADDR
// if depot then
17509: LD_VAR 0 4
17513: IFFALSE 17531
// PlaceHumanInUnit ( Ibrahim , b ) else
17515: LD_EXP 38
17519: PPUSH
17520: LD_VAR 0 2
17524: PPUSH
17525: CALL_OW 52
17529: GO 17553
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17531: LD_EXP 38
17535: PPUSH
17536: LD_VAR 0 5
17540: PPUSH
17541: LD_VAR 0 6
17545: PPUSH
17546: LD_INT 0
17548: PPUSH
17549: CALL_OW 48
// InGameOff ;
17553: CALL_OW 9
// allowConvoys := true ;
17557: LD_ADDR_EXP 12
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17565: LD_STRING ACH_IBRAHIM
17567: PPUSH
17568: CALL_OW 543
// end ; end ;
17572: PPOPN 6
17574: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17575: LD_EXP 33
17579: PPUSH
17580: CALL_OW 256
17584: PUSH
17585: LD_INT 3
17587: LESS
17588: IFFALSE 17655
17590: GO 17592
17592: DISABLE
// begin DialogueOn ;
17593: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17597: LD_EXP 33
17601: PPUSH
17602: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17606: LD_EXP 33
17610: PPUSH
17611: LD_STRING DK-keydeath-1
17613: PPUSH
17614: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17618: LD_EXP 28
17622: PPUSH
17623: LD_STRING DH-keydeath-2
17625: PPUSH
17626: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17630: LD_EXP 28
17634: PPUSH
17635: LD_STRING DH-keydeath-3
17637: PPUSH
17638: CALL_OW 88
// DialogueOff ;
17642: CALL_OW 7
// KillUnit ( Kaia ) ;
17646: LD_EXP 33
17650: PPUSH
17651: CALL_OW 66
// end ;
17655: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17656: LD_EXP 11
17660: PUSH
17661: LD_EXP 21
17665: PUSH
17666: LD_INT 1
17668: LESS
17669: AND
17670: IFFALSE 18210
17672: GO 17674
17674: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17675: LD_INT 22
17677: PUSH
17678: LD_INT 1
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 2
17687: PUSH
17688: LD_INT 25
17690: PUSH
17691: LD_INT 1
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 25
17700: PUSH
17701: LD_INT 3
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PPUSH
17717: CALL_OW 69
17721: IFFALSE 17799
// begin ChangeSideFog ( 1 , 2 ) ;
17723: LD_INT 1
17725: PPUSH
17726: LD_INT 2
17728: PPUSH
17729: CALL_OW 343
// Query ( DestroyEnemy ) ;
17733: LD_STRING DestroyEnemy
17735: PPUSH
17736: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17740: LD_INT 35
17742: PPUSH
17743: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
17747: LD_INT 22
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 2
17759: PUSH
17760: LD_INT 25
17762: PUSH
17763: LD_INT 1
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 25
17772: PUSH
17773: LD_INT 3
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PPUSH
17789: CALL_OW 69
17793: PUSH
17794: LD_INT 0
17796: EQUAL
17797: IFFALSE 17740
// end ; DialogueOn ;
17799: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17803: LD_EXP 28
17807: PPUSH
17808: LD_STRING DH-1-final
17810: PPUSH
17811: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
17815: LD_OWVAR 1
17819: PUSH
17820: LD_INT 126000
17822: PUSH
17823: LD_INT 115500
17825: PUSH
17826: LD_INT 105000
17828: PUSH
17829: LD_INT 94500
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: PUSH
17838: LD_OWVAR 67
17842: ARRAY
17843: LESSEQUAL
17844: IFFALSE 17858
// AddMedal ( med1 , 1 ) else
17846: LD_STRING med1
17848: PPUSH
17849: LD_INT 1
17851: PPUSH
17852: CALL_OW 101
17856: GO 17869
// AddMedal ( med1 , - 1 ) ;
17858: LD_STRING med1
17860: PPUSH
17861: LD_INT 1
17863: NEG
17864: PPUSH
17865: CALL_OW 101
// if vehCounter >= 2 then
17869: LD_EXP 22
17873: PUSH
17874: LD_INT 2
17876: GREATEREQUAL
17877: IFFALSE 17891
// AddMedal ( med2 , 1 ) else
17879: LD_STRING med2
17881: PPUSH
17882: LD_INT 1
17884: PPUSH
17885: CALL_OW 101
17889: GO 17902
// AddMedal ( med2 , - 1 ) ;
17891: LD_STRING med2
17893: PPUSH
17894: LD_INT 1
17896: NEG
17897: PPUSH
17898: CALL_OW 101
// if deadCounter = 0 then
17902: LD_EXP 9
17906: PUSH
17907: LD_INT 0
17909: EQUAL
17910: IFFALSE 17924
// AddMedal ( med3 , 1 ) else
17912: LD_STRING med3
17914: PPUSH
17915: LD_INT 1
17917: PPUSH
17918: CALL_OW 101
17922: GO 17935
// AddMedal ( med3 , - 1 ) ;
17924: LD_STRING med3
17926: PPUSH
17927: LD_INT 1
17929: NEG
17930: PPUSH
17931: CALL_OW 101
// GiveMedals ( MAIN ) ;
17935: LD_STRING MAIN
17937: PPUSH
17938: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17942: LD_INT 22
17944: PUSH
17945: LD_INT 2
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 23
17954: PUSH
17955: LD_INT 2
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 21
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: LIST
17976: PPUSH
17977: CALL_OW 69
17981: PPUSH
17982: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17986: LD_EXP 28
17990: PPUSH
17991: LD_STRING 03_Heike
17993: PPUSH
17994: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17998: LD_EXP 32
18002: PPUSH
18003: LD_STRING 03_Aviradze
18005: PPUSH
18006: CALL_OW 38
// if Givi then
18010: LD_EXP 29
18014: IFFALSE 18028
// SaveCharacters ( Givi , 03_Givi ) ;
18016: LD_EXP 29
18020: PPUSH
18021: LD_STRING 03_Givi
18023: PPUSH
18024: CALL_OW 38
// if Mike then
18028: LD_EXP 30
18032: IFFALSE 18046
// SaveCharacters ( Mike , 03_Mike ) ;
18034: LD_EXP 30
18038: PPUSH
18039: LD_STRING 03_Mike
18041: PPUSH
18042: CALL_OW 38
// if Kamil then
18046: LD_EXP 31
18050: IFFALSE 18064
// SaveCharacters ( Kamil , 03_Kamil ) ;
18052: LD_EXP 31
18056: PPUSH
18057: LD_STRING 03_Kamil
18059: PPUSH
18060: CALL_OW 38
// if Kaia then
18064: LD_EXP 33
18068: IFFALSE 18082
// SaveCharacters ( Kaia , 03_Kaia ) ;
18070: LD_EXP 33
18074: PPUSH
18075: LD_STRING 03_Kaia
18077: PPUSH
18078: CALL_OW 38
// if Sophia then
18082: LD_EXP 34
18086: IFFALSE 18100
// SaveCharacters ( Sophia , 03_Sophia ) ;
18088: LD_EXP 34
18092: PPUSH
18093: LD_STRING 03_Sophia
18095: PPUSH
18096: CALL_OW 38
// if Markov then
18100: LD_EXP 35
18104: IFFALSE 18118
// SaveCharacters ( Markov , 03_Markov ) ;
18106: LD_EXP 35
18110: PPUSH
18111: LD_STRING 03_Markov
18113: PPUSH
18114: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18118: LD_EXP 38
18122: PUSH
18123: LD_EXP 38
18127: PPUSH
18128: CALL_OW 255
18132: PUSH
18133: LD_INT 2
18135: EQUAL
18136: AND
18137: IFFALSE 18158
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18139: LD_STRING enableBioCharacter(BIO_IBRA)
18141: PPUSH
18142: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18146: LD_EXP 38
18150: PPUSH
18151: LD_STRING 03_Ibrahim
18153: PPUSH
18154: CALL_OW 38
// end ; if heikeSecondSquad then
18158: LD_EXP 42
18162: IFFALSE 18176
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18164: LD_EXP 42
18168: PPUSH
18169: LD_STRING 03_others
18171: PPUSH
18172: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18176: LD_EXP 9
18180: PPUSH
18181: LD_STRING 03_DeadCounter
18183: PPUSH
18184: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18188: LD_STRING enableBioCharacter(BIO_OMAR)
18190: PPUSH
18191: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18195: LD_STRING enableBioCharacter(BIO_FARM)
18197: PPUSH
18198: CALL_OW 559
// YouWin ;
18202: CALL_OW 103
// DialogueOff ;
18206: CALL_OW 7
// end ; end_of_file
18210: END
// on UnitDestroyed ( un ) do begin if un = Heike then
18211: LD_VAR 0 1
18215: PUSH
18216: LD_EXP 28
18220: EQUAL
18221: IFFALSE 18230
// YouLost ( Heike ) ;
18223: LD_STRING Heike
18225: PPUSH
18226: CALL_OW 104
// if un = Aviradze then
18230: LD_VAR 0 1
18234: PUSH
18235: LD_EXP 32
18239: EQUAL
18240: IFFALSE 18249
// YouLost ( Aviradze ) ;
18242: LD_STRING Aviradze
18244: PPUSH
18245: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18249: LD_VAR 0 1
18253: PUSH
18254: LD_INT 11
18256: EQUAL
18257: PUSH
18258: LD_EXP 11
18262: NOT
18263: AND
18264: IFFALSE 18273
// YouLost ( Depot ) ;
18266: LD_STRING Depot
18268: PPUSH
18269: CALL_OW 104
// if un = arDepot then
18273: LD_VAR 0 1
18277: PUSH
18278: LD_INT 5
18280: EQUAL
18281: IFFALSE 18290
// YouLost ( FarmerDepot ) ;
18283: LD_STRING FarmerDepot
18285: PPUSH
18286: CALL_OW 104
// if un = Farmer then
18290: LD_VAR 0 1
18294: PUSH
18295: LD_EXP 36
18299: EQUAL
18300: IFFALSE 18309
// YouLost ( Farmer ) ;
18302: LD_STRING Farmer
18304: PPUSH
18305: CALL_OW 104
// if un in usForces then
18309: LD_VAR 0 1
18313: PUSH
18314: LD_EXP 44
18318: IN
18319: IFFALSE 18337
// usForces := usForces diff un ;
18321: LD_ADDR_EXP 44
18325: PUSH
18326: LD_EXP 44
18330: PUSH
18331: LD_VAR 0 1
18335: DIFF
18336: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18337: LD_VAR 0 1
18341: PUSH
18342: LD_INT 22
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 23
18354: PUSH
18355: LD_INT 2
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 21
18364: PUSH
18365: LD_INT 1
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 69
18381: IN
18382: IFFALSE 18398
// deadCounter := deadCounter + 1 ;
18384: LD_ADDR_EXP 9
18388: PUSH
18389: LD_EXP 9
18393: PUSH
18394: LD_INT 1
18396: PLUS
18397: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18398: LD_VAR 0 1
18402: PUSH
18403: LD_INT 22
18405: PUSH
18406: LD_INT 4
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 34
18415: PUSH
18416: LD_INT 12
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 69
18431: IN
18432: PUSH
18433: LD_EXP 18
18437: NOT
18438: AND
18439: IFFALSE 18449
// firstConvoyDestroyed := true ;
18441: LD_ADDR_EXP 18
18445: PUSH
18446: LD_INT 1
18448: ST_TO_ADDR
// if un in usAttackers then
18449: LD_VAR 0 1
18453: PUSH
18454: LD_EXP 47
18458: IN
18459: IFFALSE 18477
// usAttackers := usAttackers diff un ;
18461: LD_ADDR_EXP 47
18465: PUSH
18466: LD_EXP 47
18470: PUSH
18471: LD_VAR 0 1
18475: DIFF
18476: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18477: LD_VAR 0 1
18481: PUSH
18482: LD_INT 22
18484: PUSH
18485: LD_INT 5
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 21
18494: PUSH
18495: LD_INT 1
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PPUSH
18506: CALL_OW 69
18510: IN
18511: IFFALSE 18527
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18513: LD_ADDR_EXP 20
18517: PUSH
18518: LD_EXP 20
18522: PUSH
18523: LD_INT 1
18525: PLUS
18526: ST_TO_ADDR
// end ;
18527: PPOPN 1
18529: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18530: LD_VAR 0 2
18534: PUSH
18535: LD_EXP 38
18539: EQUAL
18540: PUSH
18541: LD_EXP 25
18545: AND
18546: IFFALSE 18731
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18548: LD_INT 22
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 30
18560: PUSH
18561: LD_INT 0
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 50
18570: PUSH
18571: EMPTY
18572: LIST
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: LIST
18578: PPUSH
18579: CALL_OW 69
18583: IFFALSE 18637
// begin InGameOn ;
18585: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18589: LD_EXP 38
18593: PPUSH
18594: LD_INT 11
18596: PPUSH
18597: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18601: LD_INT 35
18603: PPUSH
18604: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18608: LD_EXP 38
18612: PPUSH
18613: LD_INT 11
18615: PPUSH
18616: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18620: LD_EXP 38
18624: PPUSH
18625: CALL_OW 310
18629: IFFALSE 18601
// InGameOff ;
18631: CALL_OW 9
// end else
18635: GO 18731
// begin SetSide ( Ibrahim , 6 ) ;
18637: LD_EXP 38
18641: PPUSH
18642: LD_INT 6
18644: PPUSH
18645: CALL_OW 235
// ibrahimInDepot := false ;
18649: LD_ADDR_EXP 25
18653: PUSH
18654: LD_INT 0
18656: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18657: LD_EXP 38
18661: PPUSH
18662: LD_INT 30
18664: PPUSH
18665: LD_INT 1
18667: PPUSH
18668: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18672: LD_INT 35
18674: PPUSH
18675: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18679: LD_EXP 38
18683: PPUSH
18684: LD_INT 30
18686: PPUSH
18687: LD_INT 1
18689: PPUSH
18690: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18694: LD_EXP 38
18698: PPUSH
18699: LD_INT 30
18701: PPUSH
18702: LD_INT 1
18704: PPUSH
18705: CALL_OW 307
18709: PUSH
18710: LD_EXP 38
18714: PPUSH
18715: CALL_OW 301
18719: OR
18720: IFFALSE 18672
// RemoveUnit ( Ibrahim ) ;
18722: LD_EXP 38
18726: PPUSH
18727: CALL_OW 64
// end ; end ; end ;
18731: PPOPN 2
18733: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18734: LD_VAR 0 2
18738: PUSH
18739: LD_EXP 28
18743: EQUAL
18744: PUSH
18745: LD_VAR 0 1
18749: PUSH
18750: LD_INT 11
18752: EQUAL
18753: AND
18754: PUSH
18755: LD_EXP 25
18759: AND
18760: IFFALSE 18766
// IbrahimQuery ;
18762: CALL 16386 0 0
// end ;
18766: PPOPN 2
18768: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18769: LD_VAR 0 1
18773: PPUSH
18774: CALL_OW 141
// if oldId in usAttackers then
18778: LD_VAR 0 2
18782: PUSH
18783: LD_EXP 47
18787: IN
18788: IFFALSE 18806
// usAttackers := usAttackers diff oldId ;
18790: LD_ADDR_EXP 47
18794: PUSH
18795: LD_EXP 47
18799: PUSH
18800: LD_VAR 0 2
18804: DIFF
18805: ST_TO_ADDR
// if newId in usAttackers then
18806: LD_VAR 0 1
18810: PUSH
18811: LD_EXP 47
18815: IN
18816: IFFALSE 18834
// usAttackers := usAttackers diff newId ;
18818: LD_ADDR_EXP 47
18822: PUSH
18823: LD_EXP 47
18827: PUSH
18828: LD_VAR 0 1
18832: DIFF
18833: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18834: LD_VAR 0 3
18838: PUSH
18839: LD_INT 4
18841: EQUAL
18842: PUSH
18843: LD_EXP 18
18847: NOT
18848: AND
18849: IFFALSE 18859
// firstConvoyDestroyed := true ;
18851: LD_ADDR_EXP 18
18855: PUSH
18856: LD_INT 1
18858: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18859: LD_VAR 0 1
18863: PPUSH
18864: CALL_OW 264
18868: PUSH
18869: LD_INT 12
18871: EQUAL
18872: IFFALSE 18910
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18874: LD_ADDR_EXP 13
18878: PUSH
18879: LD_EXP 13
18883: PUSH
18884: LD_INT 1
18886: PLUS
18887: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18888: LD_VAR 0 1
18892: PPUSH
18893: LD_INT 1
18895: PPUSH
18896: CALL_OW 289
18900: PUSH
18901: LD_INT 0
18903: EQUAL
18904: IFFALSE 18910
// EmptyCargoDialog ;
18906: CALL 15024 0 0
// end ; end ;
18910: PPOPN 4
18912: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18913: LD_VAR 0 1
18917: PUSH
18918: LD_INT 2
18920: EQUAL
18921: PUSH
18922: LD_VAR 0 2
18926: PUSH
18927: LD_INT 5
18929: EQUAL
18930: AND
18931: IFFALSE 18940
// YouLost ( Attack ) ;
18933: LD_STRING Attack
18935: PPUSH
18936: CALL_OW 104
// end ;
18940: PPOPN 2
18942: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18943: LD_VAR 0 1
18947: PPUSH
18948: CALL_OW 255
18952: PUSH
18953: LD_INT 1
18955: EQUAL
18956: PUSH
18957: LD_EXP 6
18961: NOT
18962: AND
18963: IFFALSE 19097
// begin if GetBType ( b ) = b_lab then
18965: LD_VAR 0 1
18969: PPUSH
18970: CALL_OW 266
18974: PUSH
18975: LD_INT 6
18977: EQUAL
18978: IFFALSE 19018
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18980: LD_EXP 44
18984: PPUSH
18985: LD_INT 25
18987: PUSH
18988: LD_INT 4
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PPUSH
18995: CALL_OW 72
18999: PPUSH
19000: LD_VAR 0 1
19004: PPUSH
19005: CALL_OW 120
// AmLabResearch ( b ) ;
19009: LD_VAR 0 1
19013: PPUSH
19014: CALL 5203 0 1
// end ; if GetBType ( b ) = b_armoury then
19018: LD_VAR 0 1
19022: PPUSH
19023: CALL_OW 266
19027: PUSH
19028: LD_INT 4
19030: EQUAL
19031: IFFALSE 19079
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19033: LD_EXP 44
19037: PPUSH
19038: LD_INT 25
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 3
19050: PUSH
19051: LD_INT 54
19053: PUSH
19054: EMPTY
19055: LIST
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 72
19069: PPUSH
19070: LD_VAR 0 1
19074: PPUSH
19075: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19079: LD_ADDR_EXP 46
19083: PUSH
19084: LD_EXP 46
19088: PPUSH
19089: LD_INT 1
19091: PPUSH
19092: CALL_OW 3
19096: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19097: LD_VAR 0 1
19101: PPUSH
19102: CALL_OW 255
19106: PUSH
19107: LD_INT 5
19109: EQUAL
19110: IFFALSE 19124
// SetBLevel ( b , 5 ) ;
19112: LD_VAR 0 1
19116: PPUSH
19117: LD_INT 5
19119: PPUSH
19120: CALL_OW 241
// end ;
19124: PPOPN 1
19126: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19127: LD_VAR 0 1
19131: PPUSH
19132: CALL_OW 255
19136: PUSH
19137: LD_INT 2
19139: EQUAL
19140: IFFALSE 19156
// vehCounter := vehCounter + 1 ;
19142: LD_ADDR_EXP 22
19146: PUSH
19147: LD_EXP 22
19151: PUSH
19152: LD_INT 1
19154: PLUS
19155: ST_TO_ADDR
// end ;
19156: PPOPN 2
19158: END
// on SailEvent ( event ) do begin if event = eventAttack then
19159: LD_VAR 0 1
19163: PUSH
19164: LD_EXP 24
19168: EQUAL
19169: IFFALSE 19175
// AmericanAttack ;
19171: CALL 6698 0 0
// end ; end_of_file
19175: PPOPN 1
19177: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19178: LD_OWVAR 1
19182: PUSH
19183: LD_INT 10500
19185: PUSH
19186: LD_INT 9800
19188: PUSH
19189: LD_INT 9450
19191: PUSH
19192: LD_INT 9100
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: PUSH
19201: LD_OWVAR 67
19205: ARRAY
19206: LESSEQUAL
19207: IFFALSE 19234
19209: GO 19211
19211: DISABLE
// begin enable ;
19212: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19213: LD_INT 1
19215: PPUSH
19216: LD_INT 5
19218: PPUSH
19219: CALL_OW 12
19223: PPUSH
19224: LD_INT 9
19226: PPUSH
19227: LD_INT 1
19229: PPUSH
19230: CALL_OW 55
// end ;
19234: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 , 25 25$00 ] [ Difficulty ] do
19235: LD_EXP 6
19239: PUSH
19240: LD_OWVAR 1
19244: PUSH
19245: LD_INT 56700
19247: PUSH
19248: LD_INT 55650
19250: PUSH
19251: LD_INT 54600
19253: PUSH
19254: LD_INT 52500
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: PUSH
19263: LD_OWVAR 67
19267: ARRAY
19268: LESSEQUAL
19269: AND
19270: IFFALSE 19297
19272: GO 19274
19274: DISABLE
// begin enable ;
19275: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19276: LD_INT 3
19278: PPUSH
19279: LD_INT 5
19281: PPUSH
19282: CALL_OW 12
19286: PPUSH
19287: LD_INT 9
19289: PPUSH
19290: LD_INT 1
19292: PPUSH
19293: CALL_OW 55
// end ; end_of_file
19297: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19298: LD_EXP 11
19302: NOT
19303: PUSH
19304: LD_EXP 16
19308: AND
19309: PUSH
19310: LD_EXP 4
19314: AND
19315: PUSH
19316: LD_EXP 15
19320: PUSH
19321: LD_EXP 16
19325: LESSEQUAL
19326: AND
19327: IFFALSE 19417
19329: GO 19331
19331: DISABLE
// begin enable ;
19332: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19333: LD_ADDR_OWVAR 47
19337: PUSH
19338: LD_STRING #X103-1
19340: PUSH
19341: LD_EXP 16
19345: PUSH
19346: LD_EXP 15
19350: MINUS
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19356: LD_ADDR_EXP 15
19360: PUSH
19361: LD_INT 5
19363: PPUSH
19364: CALL_OW 274
19368: PPUSH
19369: LD_INT 1
19371: PPUSH
19372: CALL_OW 275
19376: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19377: LD_INT 10
19379: PPUSH
19380: LD_INT 1
19382: PPUSH
19383: CALL_OW 287
19387: PUSH
19388: LD_INT 0
19390: EQUAL
19391: IFFALSE 19409
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19393: LD_ADDR_EXP 17
19397: PUSH
19398: LD_EXP 17
19402: PUSH
19403: LD_INT 35
19405: MINUS
19406: ST_TO_ADDR
19407: GO 19417
// farmerCratesCounter := 30 30$00 ;
19409: LD_ADDR_EXP 17
19413: PUSH
19414: LD_INT 63000
19416: ST_TO_ADDR
// end ; end_of_file
19417: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19418: LD_INT 0
19420: PPUSH
// ar_miner := 81 ;
19421: LD_ADDR_EXP 55
19425: PUSH
19426: LD_INT 81
19428: ST_TO_ADDR
// ar_crane := 88 ;
19429: LD_ADDR_EXP 54
19433: PUSH
19434: LD_INT 88
19436: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19437: LD_ADDR_EXP 49
19441: PUSH
19442: LD_INT 89
19444: ST_TO_ADDR
// us_hack := 99 ;
19445: LD_ADDR_EXP 50
19449: PUSH
19450: LD_INT 99
19452: ST_TO_ADDR
// us_artillery := 97 ;
19453: LD_ADDR_EXP 51
19457: PUSH
19458: LD_INT 97
19460: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19461: LD_ADDR_EXP 52
19465: PUSH
19466: LD_INT 91
19468: ST_TO_ADDR
// ar_mortar := 92 ;
19469: LD_ADDR_EXP 53
19473: PUSH
19474: LD_INT 92
19476: ST_TO_ADDR
// ru_radar := 98 ;
19477: LD_ADDR_EXP 48
19481: PUSH
19482: LD_INT 98
19484: ST_TO_ADDR
// tech_Artillery := 80 ;
19485: LD_ADDR_EXP 56
19489: PUSH
19490: LD_INT 80
19492: ST_TO_ADDR
// tech_RadMat := 81 ;
19493: LD_ADDR_EXP 57
19497: PUSH
19498: LD_INT 81
19500: ST_TO_ADDR
// tech_BasicTools := 82 ;
19501: LD_ADDR_EXP 58
19505: PUSH
19506: LD_INT 82
19508: ST_TO_ADDR
// tech_Cargo := 83 ;
19509: LD_ADDR_EXP 59
19513: PUSH
19514: LD_INT 83
19516: ST_TO_ADDR
// tech_Track := 84 ;
19517: LD_ADDR_EXP 60
19521: PUSH
19522: LD_INT 84
19524: ST_TO_ADDR
// tech_Crane := 85 ;
19525: LD_ADDR_EXP 61
19529: PUSH
19530: LD_INT 85
19532: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19533: LD_ADDR_EXP 62
19537: PUSH
19538: LD_INT 86
19540: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19541: LD_ADDR_EXP 63
19545: PUSH
19546: LD_INT 87
19548: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19549: LD_ADDR_EXP 64
19553: PUSH
19554: LD_INT 88
19556: ST_TO_ADDR
// class_mastodont := 31 ;
19557: LD_ADDR_EXP 65
19561: PUSH
19562: LD_INT 31
19564: ST_TO_ADDR
// class_horse := 21 ;
19565: LD_ADDR_EXP 66
19569: PUSH
19570: LD_INT 21
19572: ST_TO_ADDR
// end ;
19573: LD_VAR 0 1
19577: RET
// every 1 do
19578: GO 19580
19580: DISABLE
// InitGlobalVariables ; end_of_file
19581: CALL 19418 0 0
19585: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19586: LD_INT 0
19588: PPUSH
// if p2 = 100 then
19589: LD_VAR 0 2
19593: PUSH
19594: LD_INT 100
19596: EQUAL
19597: IFFALSE 20546
// begin if not StreamModeActive then
19599: LD_EXP 67
19603: NOT
19604: IFFALSE 19614
// StreamModeActive := true ;
19606: LD_ADDR_EXP 67
19610: PUSH
19611: LD_INT 1
19613: ST_TO_ADDR
// if p3 = 0 then
19614: LD_VAR 0 3
19618: PUSH
19619: LD_INT 0
19621: EQUAL
19622: IFFALSE 19628
// InitStreamMode ;
19624: CALL 20706 0 0
// if p3 = 1 then
19628: LD_VAR 0 3
19632: PUSH
19633: LD_INT 1
19635: EQUAL
19636: IFFALSE 19646
// sRocket := true ;
19638: LD_ADDR_EXP 72
19642: PUSH
19643: LD_INT 1
19645: ST_TO_ADDR
// if p3 = 2 then
19646: LD_VAR 0 3
19650: PUSH
19651: LD_INT 2
19653: EQUAL
19654: IFFALSE 19664
// sSpeed := true ;
19656: LD_ADDR_EXP 71
19660: PUSH
19661: LD_INT 1
19663: ST_TO_ADDR
// if p3 = 3 then
19664: LD_VAR 0 3
19668: PUSH
19669: LD_INT 3
19671: EQUAL
19672: IFFALSE 19682
// sEngine := true ;
19674: LD_ADDR_EXP 73
19678: PUSH
19679: LD_INT 1
19681: ST_TO_ADDR
// if p3 = 4 then
19682: LD_VAR 0 3
19686: PUSH
19687: LD_INT 4
19689: EQUAL
19690: IFFALSE 19700
// sSpec := true ;
19692: LD_ADDR_EXP 70
19696: PUSH
19697: LD_INT 1
19699: ST_TO_ADDR
// if p3 = 5 then
19700: LD_VAR 0 3
19704: PUSH
19705: LD_INT 5
19707: EQUAL
19708: IFFALSE 19718
// sLevel := true ;
19710: LD_ADDR_EXP 74
19714: PUSH
19715: LD_INT 1
19717: ST_TO_ADDR
// if p3 = 6 then
19718: LD_VAR 0 3
19722: PUSH
19723: LD_INT 6
19725: EQUAL
19726: IFFALSE 19736
// sArmoury := true ;
19728: LD_ADDR_EXP 75
19732: PUSH
19733: LD_INT 1
19735: ST_TO_ADDR
// if p3 = 7 then
19736: LD_VAR 0 3
19740: PUSH
19741: LD_INT 7
19743: EQUAL
19744: IFFALSE 19754
// sRadar := true ;
19746: LD_ADDR_EXP 76
19750: PUSH
19751: LD_INT 1
19753: ST_TO_ADDR
// if p3 = 8 then
19754: LD_VAR 0 3
19758: PUSH
19759: LD_INT 8
19761: EQUAL
19762: IFFALSE 19772
// sBunker := true ;
19764: LD_ADDR_EXP 77
19768: PUSH
19769: LD_INT 1
19771: ST_TO_ADDR
// if p3 = 9 then
19772: LD_VAR 0 3
19776: PUSH
19777: LD_INT 9
19779: EQUAL
19780: IFFALSE 19790
// sHack := true ;
19782: LD_ADDR_EXP 78
19786: PUSH
19787: LD_INT 1
19789: ST_TO_ADDR
// if p3 = 10 then
19790: LD_VAR 0 3
19794: PUSH
19795: LD_INT 10
19797: EQUAL
19798: IFFALSE 19808
// sFire := true ;
19800: LD_ADDR_EXP 79
19804: PUSH
19805: LD_INT 1
19807: ST_TO_ADDR
// if p3 = 11 then
19808: LD_VAR 0 3
19812: PUSH
19813: LD_INT 11
19815: EQUAL
19816: IFFALSE 19826
// sRefresh := true ;
19818: LD_ADDR_EXP 80
19822: PUSH
19823: LD_INT 1
19825: ST_TO_ADDR
// if p3 = 12 then
19826: LD_VAR 0 3
19830: PUSH
19831: LD_INT 12
19833: EQUAL
19834: IFFALSE 19844
// sExp := true ;
19836: LD_ADDR_EXP 81
19840: PUSH
19841: LD_INT 1
19843: ST_TO_ADDR
// if p3 = 13 then
19844: LD_VAR 0 3
19848: PUSH
19849: LD_INT 13
19851: EQUAL
19852: IFFALSE 19862
// sDepot := true ;
19854: LD_ADDR_EXP 82
19858: PUSH
19859: LD_INT 1
19861: ST_TO_ADDR
// if p3 = 14 then
19862: LD_VAR 0 3
19866: PUSH
19867: LD_INT 14
19869: EQUAL
19870: IFFALSE 19880
// sFlag := true ;
19872: LD_ADDR_EXP 83
19876: PUSH
19877: LD_INT 1
19879: ST_TO_ADDR
// if p3 = 15 then
19880: LD_VAR 0 3
19884: PUSH
19885: LD_INT 15
19887: EQUAL
19888: IFFALSE 19898
// sKamikadze := true ;
19890: LD_ADDR_EXP 91
19894: PUSH
19895: LD_INT 1
19897: ST_TO_ADDR
// if p3 = 16 then
19898: LD_VAR 0 3
19902: PUSH
19903: LD_INT 16
19905: EQUAL
19906: IFFALSE 19916
// sTroll := true ;
19908: LD_ADDR_EXP 92
19912: PUSH
19913: LD_INT 1
19915: ST_TO_ADDR
// if p3 = 17 then
19916: LD_VAR 0 3
19920: PUSH
19921: LD_INT 17
19923: EQUAL
19924: IFFALSE 19934
// sSlow := true ;
19926: LD_ADDR_EXP 93
19930: PUSH
19931: LD_INT 1
19933: ST_TO_ADDR
// if p3 = 18 then
19934: LD_VAR 0 3
19938: PUSH
19939: LD_INT 18
19941: EQUAL
19942: IFFALSE 19952
// sLack := true ;
19944: LD_ADDR_EXP 94
19948: PUSH
19949: LD_INT 1
19951: ST_TO_ADDR
// if p3 = 19 then
19952: LD_VAR 0 3
19956: PUSH
19957: LD_INT 19
19959: EQUAL
19960: IFFALSE 19970
// sTank := true ;
19962: LD_ADDR_EXP 96
19966: PUSH
19967: LD_INT 1
19969: ST_TO_ADDR
// if p3 = 20 then
19970: LD_VAR 0 3
19974: PUSH
19975: LD_INT 20
19977: EQUAL
19978: IFFALSE 19988
// sRemote := true ;
19980: LD_ADDR_EXP 97
19984: PUSH
19985: LD_INT 1
19987: ST_TO_ADDR
// if p3 = 21 then
19988: LD_VAR 0 3
19992: PUSH
19993: LD_INT 21
19995: EQUAL
19996: IFFALSE 20006
// sPowell := true ;
19998: LD_ADDR_EXP 98
20002: PUSH
20003: LD_INT 1
20005: ST_TO_ADDR
// if p3 = 22 then
20006: LD_VAR 0 3
20010: PUSH
20011: LD_INT 22
20013: EQUAL
20014: IFFALSE 20024
// sTeleport := true ;
20016: LD_ADDR_EXP 101
20020: PUSH
20021: LD_INT 1
20023: ST_TO_ADDR
// if p3 = 23 then
20024: LD_VAR 0 3
20028: PUSH
20029: LD_INT 23
20031: EQUAL
20032: IFFALSE 20042
// sOilTower := true ;
20034: LD_ADDR_EXP 103
20038: PUSH
20039: LD_INT 1
20041: ST_TO_ADDR
// if p3 = 24 then
20042: LD_VAR 0 3
20046: PUSH
20047: LD_INT 24
20049: EQUAL
20050: IFFALSE 20060
// sShovel := true ;
20052: LD_ADDR_EXP 104
20056: PUSH
20057: LD_INT 1
20059: ST_TO_ADDR
// if p3 = 25 then
20060: LD_VAR 0 3
20064: PUSH
20065: LD_INT 25
20067: EQUAL
20068: IFFALSE 20078
// sSheik := true ;
20070: LD_ADDR_EXP 105
20074: PUSH
20075: LD_INT 1
20077: ST_TO_ADDR
// if p3 = 26 then
20078: LD_VAR 0 3
20082: PUSH
20083: LD_INT 26
20085: EQUAL
20086: IFFALSE 20096
// sEarthquake := true ;
20088: LD_ADDR_EXP 107
20092: PUSH
20093: LD_INT 1
20095: ST_TO_ADDR
// if p3 = 27 then
20096: LD_VAR 0 3
20100: PUSH
20101: LD_INT 27
20103: EQUAL
20104: IFFALSE 20114
// sAI := true ;
20106: LD_ADDR_EXP 108
20110: PUSH
20111: LD_INT 1
20113: ST_TO_ADDR
// if p3 = 28 then
20114: LD_VAR 0 3
20118: PUSH
20119: LD_INT 28
20121: EQUAL
20122: IFFALSE 20132
// sCargo := true ;
20124: LD_ADDR_EXP 111
20128: PUSH
20129: LD_INT 1
20131: ST_TO_ADDR
// if p3 = 29 then
20132: LD_VAR 0 3
20136: PUSH
20137: LD_INT 29
20139: EQUAL
20140: IFFALSE 20150
// sDLaser := true ;
20142: LD_ADDR_EXP 112
20146: PUSH
20147: LD_INT 1
20149: ST_TO_ADDR
// if p3 = 30 then
20150: LD_VAR 0 3
20154: PUSH
20155: LD_INT 30
20157: EQUAL
20158: IFFALSE 20168
// sExchange := true ;
20160: LD_ADDR_EXP 113
20164: PUSH
20165: LD_INT 1
20167: ST_TO_ADDR
// if p3 = 31 then
20168: LD_VAR 0 3
20172: PUSH
20173: LD_INT 31
20175: EQUAL
20176: IFFALSE 20186
// sFac := true ;
20178: LD_ADDR_EXP 114
20182: PUSH
20183: LD_INT 1
20185: ST_TO_ADDR
// if p3 = 32 then
20186: LD_VAR 0 3
20190: PUSH
20191: LD_INT 32
20193: EQUAL
20194: IFFALSE 20204
// sPower := true ;
20196: LD_ADDR_EXP 115
20200: PUSH
20201: LD_INT 1
20203: ST_TO_ADDR
// if p3 = 33 then
20204: LD_VAR 0 3
20208: PUSH
20209: LD_INT 33
20211: EQUAL
20212: IFFALSE 20222
// sRandom := true ;
20214: LD_ADDR_EXP 116
20218: PUSH
20219: LD_INT 1
20221: ST_TO_ADDR
// if p3 = 34 then
20222: LD_VAR 0 3
20226: PUSH
20227: LD_INT 34
20229: EQUAL
20230: IFFALSE 20240
// sShield := true ;
20232: LD_ADDR_EXP 117
20236: PUSH
20237: LD_INT 1
20239: ST_TO_ADDR
// if p3 = 35 then
20240: LD_VAR 0 3
20244: PUSH
20245: LD_INT 35
20247: EQUAL
20248: IFFALSE 20258
// sTime := true ;
20250: LD_ADDR_EXP 118
20254: PUSH
20255: LD_INT 1
20257: ST_TO_ADDR
// if p3 = 36 then
20258: LD_VAR 0 3
20262: PUSH
20263: LD_INT 36
20265: EQUAL
20266: IFFALSE 20276
// sTools := true ;
20268: LD_ADDR_EXP 119
20272: PUSH
20273: LD_INT 1
20275: ST_TO_ADDR
// if p3 = 101 then
20276: LD_VAR 0 3
20280: PUSH
20281: LD_INT 101
20283: EQUAL
20284: IFFALSE 20294
// sSold := true ;
20286: LD_ADDR_EXP 84
20290: PUSH
20291: LD_INT 1
20293: ST_TO_ADDR
// if p3 = 102 then
20294: LD_VAR 0 3
20298: PUSH
20299: LD_INT 102
20301: EQUAL
20302: IFFALSE 20312
// sDiff := true ;
20304: LD_ADDR_EXP 85
20308: PUSH
20309: LD_INT 1
20311: ST_TO_ADDR
// if p3 = 103 then
20312: LD_VAR 0 3
20316: PUSH
20317: LD_INT 103
20319: EQUAL
20320: IFFALSE 20330
// sFog := true ;
20322: LD_ADDR_EXP 88
20326: PUSH
20327: LD_INT 1
20329: ST_TO_ADDR
// if p3 = 104 then
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 104
20337: EQUAL
20338: IFFALSE 20348
// sReset := true ;
20340: LD_ADDR_EXP 89
20344: PUSH
20345: LD_INT 1
20347: ST_TO_ADDR
// if p3 = 105 then
20348: LD_VAR 0 3
20352: PUSH
20353: LD_INT 105
20355: EQUAL
20356: IFFALSE 20366
// sSun := true ;
20358: LD_ADDR_EXP 90
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// if p3 = 106 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 106
20373: EQUAL
20374: IFFALSE 20384
// sTiger := true ;
20376: LD_ADDR_EXP 86
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// if p3 = 107 then
20384: LD_VAR 0 3
20388: PUSH
20389: LD_INT 107
20391: EQUAL
20392: IFFALSE 20402
// sBomb := true ;
20394: LD_ADDR_EXP 87
20398: PUSH
20399: LD_INT 1
20401: ST_TO_ADDR
// if p3 = 108 then
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 108
20409: EQUAL
20410: IFFALSE 20420
// sWound := true ;
20412: LD_ADDR_EXP 95
20416: PUSH
20417: LD_INT 1
20419: ST_TO_ADDR
// if p3 = 109 then
20420: LD_VAR 0 3
20424: PUSH
20425: LD_INT 109
20427: EQUAL
20428: IFFALSE 20438
// sBetray := true ;
20430: LD_ADDR_EXP 99
20434: PUSH
20435: LD_INT 1
20437: ST_TO_ADDR
// if p3 = 110 then
20438: LD_VAR 0 3
20442: PUSH
20443: LD_INT 110
20445: EQUAL
20446: IFFALSE 20456
// sContamin := true ;
20448: LD_ADDR_EXP 100
20452: PUSH
20453: LD_INT 1
20455: ST_TO_ADDR
// if p3 = 111 then
20456: LD_VAR 0 3
20460: PUSH
20461: LD_INT 111
20463: EQUAL
20464: IFFALSE 20474
// sOil := true ;
20466: LD_ADDR_EXP 102
20470: PUSH
20471: LD_INT 1
20473: ST_TO_ADDR
// if p3 = 112 then
20474: LD_VAR 0 3
20478: PUSH
20479: LD_INT 112
20481: EQUAL
20482: IFFALSE 20492
// sStu := true ;
20484: LD_ADDR_EXP 106
20488: PUSH
20489: LD_INT 1
20491: ST_TO_ADDR
// if p3 = 113 then
20492: LD_VAR 0 3
20496: PUSH
20497: LD_INT 113
20499: EQUAL
20500: IFFALSE 20510
// sBazooka := true ;
20502: LD_ADDR_EXP 109
20506: PUSH
20507: LD_INT 1
20509: ST_TO_ADDR
// if p3 = 114 then
20510: LD_VAR 0 3
20514: PUSH
20515: LD_INT 114
20517: EQUAL
20518: IFFALSE 20528
// sMortar := true ;
20520: LD_ADDR_EXP 110
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// if p3 = 115 then
20528: LD_VAR 0 3
20532: PUSH
20533: LD_INT 115
20535: EQUAL
20536: IFFALSE 20546
// sRanger := true ;
20538: LD_ADDR_EXP 120
20542: PUSH
20543: LD_INT 1
20545: ST_TO_ADDR
// end ; if p2 = 101 then
20546: LD_VAR 0 2
20550: PUSH
20551: LD_INT 101
20553: EQUAL
20554: IFFALSE 20682
// begin case p3 of 1 :
20556: LD_VAR 0 3
20560: PUSH
20561: LD_INT 1
20563: DOUBLE
20564: EQUAL
20565: IFTRUE 20569
20567: GO 20576
20569: POP
// hHackUnlimitedResources ; 2 :
20570: CALL 31719 0 0
20574: GO 20682
20576: LD_INT 2
20578: DOUBLE
20579: EQUAL
20580: IFTRUE 20584
20582: GO 20591
20584: POP
// hHackSetLevel10 ; 3 :
20585: CALL 31852 0 0
20589: GO 20682
20591: LD_INT 3
20593: DOUBLE
20594: EQUAL
20595: IFTRUE 20599
20597: GO 20606
20599: POP
// hHackSetLevel10YourUnits ; 4 :
20600: CALL 31937 0 0
20604: GO 20682
20606: LD_INT 4
20608: DOUBLE
20609: EQUAL
20610: IFTRUE 20614
20612: GO 20621
20614: POP
// hHackInvincible ; 5 :
20615: CALL 32385 0 0
20619: GO 20682
20621: LD_INT 5
20623: DOUBLE
20624: EQUAL
20625: IFTRUE 20629
20627: GO 20636
20629: POP
// hHackInvisible ; 6 :
20630: CALL 32496 0 0
20634: GO 20682
20636: LD_INT 6
20638: DOUBLE
20639: EQUAL
20640: IFTRUE 20644
20642: GO 20651
20644: POP
// hHackChangeYourSide ; 7 :
20645: CALL 32553 0 0
20649: GO 20682
20651: LD_INT 7
20653: DOUBLE
20654: EQUAL
20655: IFTRUE 20659
20657: GO 20666
20659: POP
// hHackChangeUnitSide ; 8 :
20660: CALL 32595 0 0
20664: GO 20682
20666: LD_INT 8
20668: DOUBLE
20669: EQUAL
20670: IFTRUE 20674
20672: GO 20681
20674: POP
// hHackFog ; end ;
20675: CALL 32696 0 0
20679: GO 20682
20681: POP
// end ; end ;
20682: LD_VAR 0 7
20686: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20687: GO 20689
20689: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20690: LD_STRING initStreamRollete();
20692: PPUSH
20693: CALL_OW 559
// InitStreamMode ;
20697: CALL 20706 0 0
// DefineStreamItems ( ) ;
20701: CALL 21146 0 0
// end ;
20705: END
// function InitStreamMode ; begin
20706: LD_INT 0
20708: PPUSH
// streamModeActive := false ;
20709: LD_ADDR_EXP 67
20713: PUSH
20714: LD_INT 0
20716: ST_TO_ADDR
// normalCounter := 36 ;
20717: LD_ADDR_EXP 68
20721: PUSH
20722: LD_INT 36
20724: ST_TO_ADDR
// hardcoreCounter := 16 ;
20725: LD_ADDR_EXP 69
20729: PUSH
20730: LD_INT 16
20732: ST_TO_ADDR
// sRocket := false ;
20733: LD_ADDR_EXP 72
20737: PUSH
20738: LD_INT 0
20740: ST_TO_ADDR
// sSpeed := false ;
20741: LD_ADDR_EXP 71
20745: PUSH
20746: LD_INT 0
20748: ST_TO_ADDR
// sEngine := false ;
20749: LD_ADDR_EXP 73
20753: PUSH
20754: LD_INT 0
20756: ST_TO_ADDR
// sSpec := false ;
20757: LD_ADDR_EXP 70
20761: PUSH
20762: LD_INT 0
20764: ST_TO_ADDR
// sLevel := false ;
20765: LD_ADDR_EXP 74
20769: PUSH
20770: LD_INT 0
20772: ST_TO_ADDR
// sArmoury := false ;
20773: LD_ADDR_EXP 75
20777: PUSH
20778: LD_INT 0
20780: ST_TO_ADDR
// sRadar := false ;
20781: LD_ADDR_EXP 76
20785: PUSH
20786: LD_INT 0
20788: ST_TO_ADDR
// sBunker := false ;
20789: LD_ADDR_EXP 77
20793: PUSH
20794: LD_INT 0
20796: ST_TO_ADDR
// sHack := false ;
20797: LD_ADDR_EXP 78
20801: PUSH
20802: LD_INT 0
20804: ST_TO_ADDR
// sFire := false ;
20805: LD_ADDR_EXP 79
20809: PUSH
20810: LD_INT 0
20812: ST_TO_ADDR
// sRefresh := false ;
20813: LD_ADDR_EXP 80
20817: PUSH
20818: LD_INT 0
20820: ST_TO_ADDR
// sExp := false ;
20821: LD_ADDR_EXP 81
20825: PUSH
20826: LD_INT 0
20828: ST_TO_ADDR
// sDepot := false ;
20829: LD_ADDR_EXP 82
20833: PUSH
20834: LD_INT 0
20836: ST_TO_ADDR
// sFlag := false ;
20837: LD_ADDR_EXP 83
20841: PUSH
20842: LD_INT 0
20844: ST_TO_ADDR
// sKamikadze := false ;
20845: LD_ADDR_EXP 91
20849: PUSH
20850: LD_INT 0
20852: ST_TO_ADDR
// sTroll := false ;
20853: LD_ADDR_EXP 92
20857: PUSH
20858: LD_INT 0
20860: ST_TO_ADDR
// sSlow := false ;
20861: LD_ADDR_EXP 93
20865: PUSH
20866: LD_INT 0
20868: ST_TO_ADDR
// sLack := false ;
20869: LD_ADDR_EXP 94
20873: PUSH
20874: LD_INT 0
20876: ST_TO_ADDR
// sTank := false ;
20877: LD_ADDR_EXP 96
20881: PUSH
20882: LD_INT 0
20884: ST_TO_ADDR
// sRemote := false ;
20885: LD_ADDR_EXP 97
20889: PUSH
20890: LD_INT 0
20892: ST_TO_ADDR
// sPowell := false ;
20893: LD_ADDR_EXP 98
20897: PUSH
20898: LD_INT 0
20900: ST_TO_ADDR
// sTeleport := false ;
20901: LD_ADDR_EXP 101
20905: PUSH
20906: LD_INT 0
20908: ST_TO_ADDR
// sOilTower := false ;
20909: LD_ADDR_EXP 103
20913: PUSH
20914: LD_INT 0
20916: ST_TO_ADDR
// sShovel := false ;
20917: LD_ADDR_EXP 104
20921: PUSH
20922: LD_INT 0
20924: ST_TO_ADDR
// sSheik := false ;
20925: LD_ADDR_EXP 105
20929: PUSH
20930: LD_INT 0
20932: ST_TO_ADDR
// sEarthquake := false ;
20933: LD_ADDR_EXP 107
20937: PUSH
20938: LD_INT 0
20940: ST_TO_ADDR
// sAI := false ;
20941: LD_ADDR_EXP 108
20945: PUSH
20946: LD_INT 0
20948: ST_TO_ADDR
// sCargo := false ;
20949: LD_ADDR_EXP 111
20953: PUSH
20954: LD_INT 0
20956: ST_TO_ADDR
// sDLaser := false ;
20957: LD_ADDR_EXP 112
20961: PUSH
20962: LD_INT 0
20964: ST_TO_ADDR
// sExchange := false ;
20965: LD_ADDR_EXP 113
20969: PUSH
20970: LD_INT 0
20972: ST_TO_ADDR
// sFac := false ;
20973: LD_ADDR_EXP 114
20977: PUSH
20978: LD_INT 0
20980: ST_TO_ADDR
// sPower := false ;
20981: LD_ADDR_EXP 115
20985: PUSH
20986: LD_INT 0
20988: ST_TO_ADDR
// sRandom := false ;
20989: LD_ADDR_EXP 116
20993: PUSH
20994: LD_INT 0
20996: ST_TO_ADDR
// sShield := false ;
20997: LD_ADDR_EXP 117
21001: PUSH
21002: LD_INT 0
21004: ST_TO_ADDR
// sTime := false ;
21005: LD_ADDR_EXP 118
21009: PUSH
21010: LD_INT 0
21012: ST_TO_ADDR
// sTools := false ;
21013: LD_ADDR_EXP 119
21017: PUSH
21018: LD_INT 0
21020: ST_TO_ADDR
// sSold := false ;
21021: LD_ADDR_EXP 84
21025: PUSH
21026: LD_INT 0
21028: ST_TO_ADDR
// sDiff := false ;
21029: LD_ADDR_EXP 85
21033: PUSH
21034: LD_INT 0
21036: ST_TO_ADDR
// sFog := false ;
21037: LD_ADDR_EXP 88
21041: PUSH
21042: LD_INT 0
21044: ST_TO_ADDR
// sReset := false ;
21045: LD_ADDR_EXP 89
21049: PUSH
21050: LD_INT 0
21052: ST_TO_ADDR
// sSun := false ;
21053: LD_ADDR_EXP 90
21057: PUSH
21058: LD_INT 0
21060: ST_TO_ADDR
// sTiger := false ;
21061: LD_ADDR_EXP 86
21065: PUSH
21066: LD_INT 0
21068: ST_TO_ADDR
// sBomb := false ;
21069: LD_ADDR_EXP 87
21073: PUSH
21074: LD_INT 0
21076: ST_TO_ADDR
// sWound := false ;
21077: LD_ADDR_EXP 95
21081: PUSH
21082: LD_INT 0
21084: ST_TO_ADDR
// sBetray := false ;
21085: LD_ADDR_EXP 99
21089: PUSH
21090: LD_INT 0
21092: ST_TO_ADDR
// sContamin := false ;
21093: LD_ADDR_EXP 100
21097: PUSH
21098: LD_INT 0
21100: ST_TO_ADDR
// sOil := false ;
21101: LD_ADDR_EXP 102
21105: PUSH
21106: LD_INT 0
21108: ST_TO_ADDR
// sStu := false ;
21109: LD_ADDR_EXP 106
21113: PUSH
21114: LD_INT 0
21116: ST_TO_ADDR
// sBazooka := false ;
21117: LD_ADDR_EXP 109
21121: PUSH
21122: LD_INT 0
21124: ST_TO_ADDR
// sMortar := false ;
21125: LD_ADDR_EXP 110
21129: PUSH
21130: LD_INT 0
21132: ST_TO_ADDR
// sRanger := false ;
21133: LD_ADDR_EXP 120
21137: PUSH
21138: LD_INT 0
21140: ST_TO_ADDR
// end ;
21141: LD_VAR 0 1
21145: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21146: LD_INT 0
21148: PPUSH
21149: PPUSH
21150: PPUSH
21151: PPUSH
21152: PPUSH
// result := [ ] ;
21153: LD_ADDR_VAR 0 1
21157: PUSH
21158: EMPTY
21159: ST_TO_ADDR
// if campaign_id = 1 then
21160: LD_OWVAR 69
21164: PUSH
21165: LD_INT 1
21167: EQUAL
21168: IFFALSE 24106
// begin case mission_number of 1 :
21170: LD_OWVAR 70
21174: PUSH
21175: LD_INT 1
21177: DOUBLE
21178: EQUAL
21179: IFTRUE 21183
21181: GO 21247
21183: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21184: LD_ADDR_VAR 0 1
21188: PUSH
21189: LD_INT 2
21191: PUSH
21192: LD_INT 4
21194: PUSH
21195: LD_INT 11
21197: PUSH
21198: LD_INT 12
21200: PUSH
21201: LD_INT 15
21203: PUSH
21204: LD_INT 16
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_INT 23
21212: PUSH
21213: LD_INT 26
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 101
21229: PUSH
21230: LD_INT 102
21232: PUSH
21233: LD_INT 106
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: LIST
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: ST_TO_ADDR
21245: GO 24104
21247: LD_INT 2
21249: DOUBLE
21250: EQUAL
21251: IFTRUE 21255
21253: GO 21327
21255: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21256: LD_ADDR_VAR 0 1
21260: PUSH
21261: LD_INT 2
21263: PUSH
21264: LD_INT 4
21266: PUSH
21267: LD_INT 11
21269: PUSH
21270: LD_INT 12
21272: PUSH
21273: LD_INT 15
21275: PUSH
21276: LD_INT 16
21278: PUSH
21279: LD_INT 22
21281: PUSH
21282: LD_INT 23
21284: PUSH
21285: LD_INT 26
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 101
21301: PUSH
21302: LD_INT 102
21304: PUSH
21305: LD_INT 105
21307: PUSH
21308: LD_INT 106
21310: PUSH
21311: LD_INT 108
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: ST_TO_ADDR
21325: GO 24104
21327: LD_INT 3
21329: DOUBLE
21330: EQUAL
21331: IFTRUE 21335
21333: GO 21411
21335: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21336: LD_ADDR_VAR 0 1
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: LD_INT 4
21346: PUSH
21347: LD_INT 5
21349: PUSH
21350: LD_INT 11
21352: PUSH
21353: LD_INT 12
21355: PUSH
21356: LD_INT 15
21358: PUSH
21359: LD_INT 16
21361: PUSH
21362: LD_INT 22
21364: PUSH
21365: LD_INT 26
21367: PUSH
21368: LD_INT 36
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 101
21385: PUSH
21386: LD_INT 102
21388: PUSH
21389: LD_INT 105
21391: PUSH
21392: LD_INT 106
21394: PUSH
21395: LD_INT 108
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: ST_TO_ADDR
21409: GO 24104
21411: LD_INT 4
21413: DOUBLE
21414: EQUAL
21415: IFTRUE 21419
21417: GO 21503
21419: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21420: LD_ADDR_VAR 0 1
21424: PUSH
21425: LD_INT 2
21427: PUSH
21428: LD_INT 4
21430: PUSH
21431: LD_INT 5
21433: PUSH
21434: LD_INT 8
21436: PUSH
21437: LD_INT 11
21439: PUSH
21440: LD_INT 12
21442: PUSH
21443: LD_INT 15
21445: PUSH
21446: LD_INT 16
21448: PUSH
21449: LD_INT 22
21451: PUSH
21452: LD_INT 23
21454: PUSH
21455: LD_INT 26
21457: PUSH
21458: LD_INT 36
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 101
21477: PUSH
21478: LD_INT 102
21480: PUSH
21481: LD_INT 105
21483: PUSH
21484: LD_INT 106
21486: PUSH
21487: LD_INT 108
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: ST_TO_ADDR
21501: GO 24104
21503: LD_INT 5
21505: DOUBLE
21506: EQUAL
21507: IFTRUE 21511
21509: GO 21611
21511: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21512: LD_ADDR_VAR 0 1
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: LD_INT 4
21522: PUSH
21523: LD_INT 5
21525: PUSH
21526: LD_INT 6
21528: PUSH
21529: LD_INT 8
21531: PUSH
21532: LD_INT 11
21534: PUSH
21535: LD_INT 12
21537: PUSH
21538: LD_INT 15
21540: PUSH
21541: LD_INT 16
21543: PUSH
21544: LD_INT 22
21546: PUSH
21547: LD_INT 23
21549: PUSH
21550: LD_INT 25
21552: PUSH
21553: LD_INT 26
21555: PUSH
21556: LD_INT 36
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 101
21577: PUSH
21578: LD_INT 102
21580: PUSH
21581: LD_INT 105
21583: PUSH
21584: LD_INT 106
21586: PUSH
21587: LD_INT 108
21589: PUSH
21590: LD_INT 109
21592: PUSH
21593: LD_INT 112
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: ST_TO_ADDR
21609: GO 24104
21611: LD_INT 6
21613: DOUBLE
21614: EQUAL
21615: IFTRUE 21619
21617: GO 21739
21619: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21620: LD_ADDR_VAR 0 1
21624: PUSH
21625: LD_INT 2
21627: PUSH
21628: LD_INT 4
21630: PUSH
21631: LD_INT 5
21633: PUSH
21634: LD_INT 6
21636: PUSH
21637: LD_INT 8
21639: PUSH
21640: LD_INT 11
21642: PUSH
21643: LD_INT 12
21645: PUSH
21646: LD_INT 15
21648: PUSH
21649: LD_INT 16
21651: PUSH
21652: LD_INT 20
21654: PUSH
21655: LD_INT 21
21657: PUSH
21658: LD_INT 22
21660: PUSH
21661: LD_INT 23
21663: PUSH
21664: LD_INT 25
21666: PUSH
21667: LD_INT 26
21669: PUSH
21670: LD_INT 30
21672: PUSH
21673: LD_INT 31
21675: PUSH
21676: LD_INT 32
21678: PUSH
21679: LD_INT 36
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 101
21705: PUSH
21706: LD_INT 102
21708: PUSH
21709: LD_INT 105
21711: PUSH
21712: LD_INT 106
21714: PUSH
21715: LD_INT 108
21717: PUSH
21718: LD_INT 109
21720: PUSH
21721: LD_INT 112
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: ST_TO_ADDR
21737: GO 24104
21739: LD_INT 7
21741: DOUBLE
21742: EQUAL
21743: IFTRUE 21747
21745: GO 21847
21747: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21748: LD_ADDR_VAR 0 1
21752: PUSH
21753: LD_INT 2
21755: PUSH
21756: LD_INT 4
21758: PUSH
21759: LD_INT 5
21761: PUSH
21762: LD_INT 7
21764: PUSH
21765: LD_INT 11
21767: PUSH
21768: LD_INT 12
21770: PUSH
21771: LD_INT 15
21773: PUSH
21774: LD_INT 16
21776: PUSH
21777: LD_INT 20
21779: PUSH
21780: LD_INT 21
21782: PUSH
21783: LD_INT 22
21785: PUSH
21786: LD_INT 23
21788: PUSH
21789: LD_INT 25
21791: PUSH
21792: LD_INT 26
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 101
21813: PUSH
21814: LD_INT 102
21816: PUSH
21817: LD_INT 103
21819: PUSH
21820: LD_INT 105
21822: PUSH
21823: LD_INT 106
21825: PUSH
21826: LD_INT 108
21828: PUSH
21829: LD_INT 112
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: ST_TO_ADDR
21845: GO 24104
21847: LD_INT 8
21849: DOUBLE
21850: EQUAL
21851: IFTRUE 21855
21853: GO 21983
21855: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21856: LD_ADDR_VAR 0 1
21860: PUSH
21861: LD_INT 2
21863: PUSH
21864: LD_INT 4
21866: PUSH
21867: LD_INT 5
21869: PUSH
21870: LD_INT 6
21872: PUSH
21873: LD_INT 7
21875: PUSH
21876: LD_INT 8
21878: PUSH
21879: LD_INT 11
21881: PUSH
21882: LD_INT 12
21884: PUSH
21885: LD_INT 15
21887: PUSH
21888: LD_INT 16
21890: PUSH
21891: LD_INT 20
21893: PUSH
21894: LD_INT 21
21896: PUSH
21897: LD_INT 22
21899: PUSH
21900: LD_INT 23
21902: PUSH
21903: LD_INT 25
21905: PUSH
21906: LD_INT 26
21908: PUSH
21909: LD_INT 30
21911: PUSH
21912: LD_INT 31
21914: PUSH
21915: LD_INT 32
21917: PUSH
21918: LD_INT 36
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 101
21945: PUSH
21946: LD_INT 102
21948: PUSH
21949: LD_INT 103
21951: PUSH
21952: LD_INT 105
21954: PUSH
21955: LD_INT 106
21957: PUSH
21958: LD_INT 108
21960: PUSH
21961: LD_INT 109
21963: PUSH
21964: LD_INT 112
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: ST_TO_ADDR
21981: GO 24104
21983: LD_INT 9
21985: DOUBLE
21986: EQUAL
21987: IFTRUE 21991
21989: GO 22127
21991: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21992: LD_ADDR_VAR 0 1
21996: PUSH
21997: LD_INT 2
21999: PUSH
22000: LD_INT 4
22002: PUSH
22003: LD_INT 5
22005: PUSH
22006: LD_INT 6
22008: PUSH
22009: LD_INT 7
22011: PUSH
22012: LD_INT 8
22014: PUSH
22015: LD_INT 11
22017: PUSH
22018: LD_INT 12
22020: PUSH
22021: LD_INT 15
22023: PUSH
22024: LD_INT 16
22026: PUSH
22027: LD_INT 20
22029: PUSH
22030: LD_INT 21
22032: PUSH
22033: LD_INT 22
22035: PUSH
22036: LD_INT 23
22038: PUSH
22039: LD_INT 25
22041: PUSH
22042: LD_INT 26
22044: PUSH
22045: LD_INT 28
22047: PUSH
22048: LD_INT 30
22050: PUSH
22051: LD_INT 31
22053: PUSH
22054: LD_INT 32
22056: PUSH
22057: LD_INT 36
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 101
22085: PUSH
22086: LD_INT 102
22088: PUSH
22089: LD_INT 103
22091: PUSH
22092: LD_INT 105
22094: PUSH
22095: LD_INT 106
22097: PUSH
22098: LD_INT 108
22100: PUSH
22101: LD_INT 109
22103: PUSH
22104: LD_INT 112
22106: PUSH
22107: LD_INT 114
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: ST_TO_ADDR
22125: GO 24104
22127: LD_INT 10
22129: DOUBLE
22130: EQUAL
22131: IFTRUE 22135
22133: GO 22319
22135: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22136: LD_ADDR_VAR 0 1
22140: PUSH
22141: LD_INT 2
22143: PUSH
22144: LD_INT 4
22146: PUSH
22147: LD_INT 5
22149: PUSH
22150: LD_INT 6
22152: PUSH
22153: LD_INT 7
22155: PUSH
22156: LD_INT 8
22158: PUSH
22159: LD_INT 9
22161: PUSH
22162: LD_INT 10
22164: PUSH
22165: LD_INT 11
22167: PUSH
22168: LD_INT 12
22170: PUSH
22171: LD_INT 13
22173: PUSH
22174: LD_INT 14
22176: PUSH
22177: LD_INT 15
22179: PUSH
22180: LD_INT 16
22182: PUSH
22183: LD_INT 17
22185: PUSH
22186: LD_INT 18
22188: PUSH
22189: LD_INT 19
22191: PUSH
22192: LD_INT 20
22194: PUSH
22195: LD_INT 21
22197: PUSH
22198: LD_INT 22
22200: PUSH
22201: LD_INT 23
22203: PUSH
22204: LD_INT 24
22206: PUSH
22207: LD_INT 25
22209: PUSH
22210: LD_INT 26
22212: PUSH
22213: LD_INT 28
22215: PUSH
22216: LD_INT 30
22218: PUSH
22219: LD_INT 31
22221: PUSH
22222: LD_INT 32
22224: PUSH
22225: LD_INT 36
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 101
22261: PUSH
22262: LD_INT 102
22264: PUSH
22265: LD_INT 103
22267: PUSH
22268: LD_INT 104
22270: PUSH
22271: LD_INT 105
22273: PUSH
22274: LD_INT 106
22276: PUSH
22277: LD_INT 107
22279: PUSH
22280: LD_INT 108
22282: PUSH
22283: LD_INT 109
22285: PUSH
22286: LD_INT 110
22288: PUSH
22289: LD_INT 111
22291: PUSH
22292: LD_INT 112
22294: PUSH
22295: LD_INT 114
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: ST_TO_ADDR
22317: GO 24104
22319: LD_INT 11
22321: DOUBLE
22322: EQUAL
22323: IFTRUE 22327
22325: GO 22519
22327: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22328: LD_ADDR_VAR 0 1
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: LD_INT 3
22338: PUSH
22339: LD_INT 4
22341: PUSH
22342: LD_INT 5
22344: PUSH
22345: LD_INT 6
22347: PUSH
22348: LD_INT 7
22350: PUSH
22351: LD_INT 8
22353: PUSH
22354: LD_INT 9
22356: PUSH
22357: LD_INT 10
22359: PUSH
22360: LD_INT 11
22362: PUSH
22363: LD_INT 12
22365: PUSH
22366: LD_INT 13
22368: PUSH
22369: LD_INT 14
22371: PUSH
22372: LD_INT 15
22374: PUSH
22375: LD_INT 16
22377: PUSH
22378: LD_INT 17
22380: PUSH
22381: LD_INT 18
22383: PUSH
22384: LD_INT 19
22386: PUSH
22387: LD_INT 20
22389: PUSH
22390: LD_INT 21
22392: PUSH
22393: LD_INT 22
22395: PUSH
22396: LD_INT 23
22398: PUSH
22399: LD_INT 24
22401: PUSH
22402: LD_INT 25
22404: PUSH
22405: LD_INT 26
22407: PUSH
22408: LD_INT 28
22410: PUSH
22411: LD_INT 30
22413: PUSH
22414: LD_INT 31
22416: PUSH
22417: LD_INT 32
22419: PUSH
22420: LD_INT 34
22422: PUSH
22423: LD_INT 36
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 101
22461: PUSH
22462: LD_INT 102
22464: PUSH
22465: LD_INT 103
22467: PUSH
22468: LD_INT 104
22470: PUSH
22471: LD_INT 105
22473: PUSH
22474: LD_INT 106
22476: PUSH
22477: LD_INT 107
22479: PUSH
22480: LD_INT 108
22482: PUSH
22483: LD_INT 109
22485: PUSH
22486: LD_INT 110
22488: PUSH
22489: LD_INT 111
22491: PUSH
22492: LD_INT 112
22494: PUSH
22495: LD_INT 114
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: ST_TO_ADDR
22517: GO 24104
22519: LD_INT 12
22521: DOUBLE
22522: EQUAL
22523: IFTRUE 22527
22525: GO 22735
22527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22528: LD_ADDR_VAR 0 1
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 2
22538: PUSH
22539: LD_INT 3
22541: PUSH
22542: LD_INT 4
22544: PUSH
22545: LD_INT 5
22547: PUSH
22548: LD_INT 6
22550: PUSH
22551: LD_INT 7
22553: PUSH
22554: LD_INT 8
22556: PUSH
22557: LD_INT 9
22559: PUSH
22560: LD_INT 10
22562: PUSH
22563: LD_INT 11
22565: PUSH
22566: LD_INT 12
22568: PUSH
22569: LD_INT 13
22571: PUSH
22572: LD_INT 14
22574: PUSH
22575: LD_INT 15
22577: PUSH
22578: LD_INT 16
22580: PUSH
22581: LD_INT 17
22583: PUSH
22584: LD_INT 18
22586: PUSH
22587: LD_INT 19
22589: PUSH
22590: LD_INT 20
22592: PUSH
22593: LD_INT 21
22595: PUSH
22596: LD_INT 22
22598: PUSH
22599: LD_INT 23
22601: PUSH
22602: LD_INT 24
22604: PUSH
22605: LD_INT 25
22607: PUSH
22608: LD_INT 26
22610: PUSH
22611: LD_INT 27
22613: PUSH
22614: LD_INT 28
22616: PUSH
22617: LD_INT 30
22619: PUSH
22620: LD_INT 31
22622: PUSH
22623: LD_INT 32
22625: PUSH
22626: LD_INT 33
22628: PUSH
22629: LD_INT 34
22631: PUSH
22632: LD_INT 36
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 101
22673: PUSH
22674: LD_INT 102
22676: PUSH
22677: LD_INT 103
22679: PUSH
22680: LD_INT 104
22682: PUSH
22683: LD_INT 105
22685: PUSH
22686: LD_INT 106
22688: PUSH
22689: LD_INT 107
22691: PUSH
22692: LD_INT 108
22694: PUSH
22695: LD_INT 109
22697: PUSH
22698: LD_INT 110
22700: PUSH
22701: LD_INT 111
22703: PUSH
22704: LD_INT 112
22706: PUSH
22707: LD_INT 113
22709: PUSH
22710: LD_INT 114
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: ST_TO_ADDR
22733: GO 24104
22735: LD_INT 13
22737: DOUBLE
22738: EQUAL
22739: IFTRUE 22743
22741: GO 22939
22743: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22744: LD_ADDR_VAR 0 1
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: LD_INT 3
22757: PUSH
22758: LD_INT 4
22760: PUSH
22761: LD_INT 5
22763: PUSH
22764: LD_INT 8
22766: PUSH
22767: LD_INT 9
22769: PUSH
22770: LD_INT 10
22772: PUSH
22773: LD_INT 11
22775: PUSH
22776: LD_INT 12
22778: PUSH
22779: LD_INT 14
22781: PUSH
22782: LD_INT 15
22784: PUSH
22785: LD_INT 16
22787: PUSH
22788: LD_INT 17
22790: PUSH
22791: LD_INT 18
22793: PUSH
22794: LD_INT 19
22796: PUSH
22797: LD_INT 20
22799: PUSH
22800: LD_INT 21
22802: PUSH
22803: LD_INT 22
22805: PUSH
22806: LD_INT 23
22808: PUSH
22809: LD_INT 24
22811: PUSH
22812: LD_INT 25
22814: PUSH
22815: LD_INT 26
22817: PUSH
22818: LD_INT 27
22820: PUSH
22821: LD_INT 28
22823: PUSH
22824: LD_INT 30
22826: PUSH
22827: LD_INT 31
22829: PUSH
22830: LD_INT 32
22832: PUSH
22833: LD_INT 33
22835: PUSH
22836: LD_INT 34
22838: PUSH
22839: LD_INT 36
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 101
22877: PUSH
22878: LD_INT 102
22880: PUSH
22881: LD_INT 103
22883: PUSH
22884: LD_INT 104
22886: PUSH
22887: LD_INT 105
22889: PUSH
22890: LD_INT 106
22892: PUSH
22893: LD_INT 107
22895: PUSH
22896: LD_INT 108
22898: PUSH
22899: LD_INT 109
22901: PUSH
22902: LD_INT 110
22904: PUSH
22905: LD_INT 111
22907: PUSH
22908: LD_INT 112
22910: PUSH
22911: LD_INT 113
22913: PUSH
22914: LD_INT 114
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: ST_TO_ADDR
22937: GO 24104
22939: LD_INT 14
22941: DOUBLE
22942: EQUAL
22943: IFTRUE 22947
22945: GO 23159
22947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22948: LD_ADDR_VAR 0 1
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: LD_INT 2
22958: PUSH
22959: LD_INT 3
22961: PUSH
22962: LD_INT 4
22964: PUSH
22965: LD_INT 5
22967: PUSH
22968: LD_INT 6
22970: PUSH
22971: LD_INT 7
22973: PUSH
22974: LD_INT 8
22976: PUSH
22977: LD_INT 9
22979: PUSH
22980: LD_INT 10
22982: PUSH
22983: LD_INT 11
22985: PUSH
22986: LD_INT 12
22988: PUSH
22989: LD_INT 13
22991: PUSH
22992: LD_INT 14
22994: PUSH
22995: LD_INT 15
22997: PUSH
22998: LD_INT 16
23000: PUSH
23001: LD_INT 17
23003: PUSH
23004: LD_INT 18
23006: PUSH
23007: LD_INT 19
23009: PUSH
23010: LD_INT 20
23012: PUSH
23013: LD_INT 21
23015: PUSH
23016: LD_INT 22
23018: PUSH
23019: LD_INT 23
23021: PUSH
23022: LD_INT 24
23024: PUSH
23025: LD_INT 25
23027: PUSH
23028: LD_INT 26
23030: PUSH
23031: LD_INT 27
23033: PUSH
23034: LD_INT 28
23036: PUSH
23037: LD_INT 29
23039: PUSH
23040: LD_INT 30
23042: PUSH
23043: LD_INT 31
23045: PUSH
23046: LD_INT 32
23048: PUSH
23049: LD_INT 33
23051: PUSH
23052: LD_INT 34
23054: PUSH
23055: LD_INT 36
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 101
23097: PUSH
23098: LD_INT 102
23100: PUSH
23101: LD_INT 103
23103: PUSH
23104: LD_INT 104
23106: PUSH
23107: LD_INT 105
23109: PUSH
23110: LD_INT 106
23112: PUSH
23113: LD_INT 107
23115: PUSH
23116: LD_INT 108
23118: PUSH
23119: LD_INT 109
23121: PUSH
23122: LD_INT 110
23124: PUSH
23125: LD_INT 111
23127: PUSH
23128: LD_INT 112
23130: PUSH
23131: LD_INT 113
23133: PUSH
23134: LD_INT 114
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: ST_TO_ADDR
23157: GO 24104
23159: LD_INT 15
23161: DOUBLE
23162: EQUAL
23163: IFTRUE 23167
23165: GO 23379
23167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23168: LD_ADDR_VAR 0 1
23172: PUSH
23173: LD_INT 1
23175: PUSH
23176: LD_INT 2
23178: PUSH
23179: LD_INT 3
23181: PUSH
23182: LD_INT 4
23184: PUSH
23185: LD_INT 5
23187: PUSH
23188: LD_INT 6
23190: PUSH
23191: LD_INT 7
23193: PUSH
23194: LD_INT 8
23196: PUSH
23197: LD_INT 9
23199: PUSH
23200: LD_INT 10
23202: PUSH
23203: LD_INT 11
23205: PUSH
23206: LD_INT 12
23208: PUSH
23209: LD_INT 13
23211: PUSH
23212: LD_INT 14
23214: PUSH
23215: LD_INT 15
23217: PUSH
23218: LD_INT 16
23220: PUSH
23221: LD_INT 17
23223: PUSH
23224: LD_INT 18
23226: PUSH
23227: LD_INT 19
23229: PUSH
23230: LD_INT 20
23232: PUSH
23233: LD_INT 21
23235: PUSH
23236: LD_INT 22
23238: PUSH
23239: LD_INT 23
23241: PUSH
23242: LD_INT 24
23244: PUSH
23245: LD_INT 25
23247: PUSH
23248: LD_INT 26
23250: PUSH
23251: LD_INT 27
23253: PUSH
23254: LD_INT 28
23256: PUSH
23257: LD_INT 29
23259: PUSH
23260: LD_INT 30
23262: PUSH
23263: LD_INT 31
23265: PUSH
23266: LD_INT 32
23268: PUSH
23269: LD_INT 33
23271: PUSH
23272: LD_INT 34
23274: PUSH
23275: LD_INT 36
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 101
23317: PUSH
23318: LD_INT 102
23320: PUSH
23321: LD_INT 103
23323: PUSH
23324: LD_INT 104
23326: PUSH
23327: LD_INT 105
23329: PUSH
23330: LD_INT 106
23332: PUSH
23333: LD_INT 107
23335: PUSH
23336: LD_INT 108
23338: PUSH
23339: LD_INT 109
23341: PUSH
23342: LD_INT 110
23344: PUSH
23345: LD_INT 111
23347: PUSH
23348: LD_INT 112
23350: PUSH
23351: LD_INT 113
23353: PUSH
23354: LD_INT 114
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: ST_TO_ADDR
23377: GO 24104
23379: LD_INT 16
23381: DOUBLE
23382: EQUAL
23383: IFTRUE 23387
23385: GO 23511
23387: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23388: LD_ADDR_VAR 0 1
23392: PUSH
23393: LD_INT 2
23395: PUSH
23396: LD_INT 4
23398: PUSH
23399: LD_INT 5
23401: PUSH
23402: LD_INT 7
23404: PUSH
23405: LD_INT 11
23407: PUSH
23408: LD_INT 12
23410: PUSH
23411: LD_INT 15
23413: PUSH
23414: LD_INT 16
23416: PUSH
23417: LD_INT 20
23419: PUSH
23420: LD_INT 21
23422: PUSH
23423: LD_INT 22
23425: PUSH
23426: LD_INT 23
23428: PUSH
23429: LD_INT 25
23431: PUSH
23432: LD_INT 26
23434: PUSH
23435: LD_INT 30
23437: PUSH
23438: LD_INT 31
23440: PUSH
23441: LD_INT 32
23443: PUSH
23444: LD_INT 33
23446: PUSH
23447: LD_INT 34
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 101
23473: PUSH
23474: LD_INT 102
23476: PUSH
23477: LD_INT 103
23479: PUSH
23480: LD_INT 106
23482: PUSH
23483: LD_INT 108
23485: PUSH
23486: LD_INT 112
23488: PUSH
23489: LD_INT 113
23491: PUSH
23492: LD_INT 114
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: ST_TO_ADDR
23509: GO 24104
23511: LD_INT 17
23513: DOUBLE
23514: EQUAL
23515: IFTRUE 23519
23517: GO 23731
23519: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23520: LD_ADDR_VAR 0 1
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: LD_INT 2
23530: PUSH
23531: LD_INT 3
23533: PUSH
23534: LD_INT 4
23536: PUSH
23537: LD_INT 5
23539: PUSH
23540: LD_INT 6
23542: PUSH
23543: LD_INT 7
23545: PUSH
23546: LD_INT 8
23548: PUSH
23549: LD_INT 9
23551: PUSH
23552: LD_INT 10
23554: PUSH
23555: LD_INT 11
23557: PUSH
23558: LD_INT 12
23560: PUSH
23561: LD_INT 13
23563: PUSH
23564: LD_INT 14
23566: PUSH
23567: LD_INT 15
23569: PUSH
23570: LD_INT 16
23572: PUSH
23573: LD_INT 17
23575: PUSH
23576: LD_INT 18
23578: PUSH
23579: LD_INT 19
23581: PUSH
23582: LD_INT 20
23584: PUSH
23585: LD_INT 21
23587: PUSH
23588: LD_INT 22
23590: PUSH
23591: LD_INT 23
23593: PUSH
23594: LD_INT 24
23596: PUSH
23597: LD_INT 25
23599: PUSH
23600: LD_INT 26
23602: PUSH
23603: LD_INT 27
23605: PUSH
23606: LD_INT 28
23608: PUSH
23609: LD_INT 29
23611: PUSH
23612: LD_INT 30
23614: PUSH
23615: LD_INT 31
23617: PUSH
23618: LD_INT 32
23620: PUSH
23621: LD_INT 33
23623: PUSH
23624: LD_INT 34
23626: PUSH
23627: LD_INT 36
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 101
23669: PUSH
23670: LD_INT 102
23672: PUSH
23673: LD_INT 103
23675: PUSH
23676: LD_INT 104
23678: PUSH
23679: LD_INT 105
23681: PUSH
23682: LD_INT 106
23684: PUSH
23685: LD_INT 107
23687: PUSH
23688: LD_INT 108
23690: PUSH
23691: LD_INT 109
23693: PUSH
23694: LD_INT 110
23696: PUSH
23697: LD_INT 111
23699: PUSH
23700: LD_INT 112
23702: PUSH
23703: LD_INT 113
23705: PUSH
23706: LD_INT 114
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: ST_TO_ADDR
23729: GO 24104
23731: LD_INT 18
23733: DOUBLE
23734: EQUAL
23735: IFTRUE 23739
23737: GO 23875
23739: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23740: LD_ADDR_VAR 0 1
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: LD_INT 4
23750: PUSH
23751: LD_INT 5
23753: PUSH
23754: LD_INT 7
23756: PUSH
23757: LD_INT 11
23759: PUSH
23760: LD_INT 12
23762: PUSH
23763: LD_INT 15
23765: PUSH
23766: LD_INT 16
23768: PUSH
23769: LD_INT 20
23771: PUSH
23772: LD_INT 21
23774: PUSH
23775: LD_INT 22
23777: PUSH
23778: LD_INT 23
23780: PUSH
23781: LD_INT 25
23783: PUSH
23784: LD_INT 26
23786: PUSH
23787: LD_INT 30
23789: PUSH
23790: LD_INT 31
23792: PUSH
23793: LD_INT 32
23795: PUSH
23796: LD_INT 33
23798: PUSH
23799: LD_INT 34
23801: PUSH
23802: LD_INT 35
23804: PUSH
23805: LD_INT 36
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 101
23833: PUSH
23834: LD_INT 102
23836: PUSH
23837: LD_INT 103
23839: PUSH
23840: LD_INT 106
23842: PUSH
23843: LD_INT 108
23845: PUSH
23846: LD_INT 112
23848: PUSH
23849: LD_INT 113
23851: PUSH
23852: LD_INT 114
23854: PUSH
23855: LD_INT 115
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: ST_TO_ADDR
23873: GO 24104
23875: LD_INT 19
23877: DOUBLE
23878: EQUAL
23879: IFTRUE 23883
23881: GO 24103
23883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23884: LD_ADDR_VAR 0 1
23888: PUSH
23889: LD_INT 1
23891: PUSH
23892: LD_INT 2
23894: PUSH
23895: LD_INT 3
23897: PUSH
23898: LD_INT 4
23900: PUSH
23901: LD_INT 5
23903: PUSH
23904: LD_INT 6
23906: PUSH
23907: LD_INT 7
23909: PUSH
23910: LD_INT 8
23912: PUSH
23913: LD_INT 9
23915: PUSH
23916: LD_INT 10
23918: PUSH
23919: LD_INT 11
23921: PUSH
23922: LD_INT 12
23924: PUSH
23925: LD_INT 13
23927: PUSH
23928: LD_INT 14
23930: PUSH
23931: LD_INT 15
23933: PUSH
23934: LD_INT 16
23936: PUSH
23937: LD_INT 17
23939: PUSH
23940: LD_INT 18
23942: PUSH
23943: LD_INT 19
23945: PUSH
23946: LD_INT 20
23948: PUSH
23949: LD_INT 21
23951: PUSH
23952: LD_INT 22
23954: PUSH
23955: LD_INT 23
23957: PUSH
23958: LD_INT 24
23960: PUSH
23961: LD_INT 25
23963: PUSH
23964: LD_INT 26
23966: PUSH
23967: LD_INT 27
23969: PUSH
23970: LD_INT 28
23972: PUSH
23973: LD_INT 29
23975: PUSH
23976: LD_INT 30
23978: PUSH
23979: LD_INT 31
23981: PUSH
23982: LD_INT 32
23984: PUSH
23985: LD_INT 33
23987: PUSH
23988: LD_INT 34
23990: PUSH
23991: LD_INT 35
23993: PUSH
23994: LD_INT 36
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 101
24037: PUSH
24038: LD_INT 102
24040: PUSH
24041: LD_INT 103
24043: PUSH
24044: LD_INT 104
24046: PUSH
24047: LD_INT 105
24049: PUSH
24050: LD_INT 106
24052: PUSH
24053: LD_INT 107
24055: PUSH
24056: LD_INT 108
24058: PUSH
24059: LD_INT 109
24061: PUSH
24062: LD_INT 110
24064: PUSH
24065: LD_INT 111
24067: PUSH
24068: LD_INT 112
24070: PUSH
24071: LD_INT 113
24073: PUSH
24074: LD_INT 114
24076: PUSH
24077: LD_INT 115
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: ST_TO_ADDR
24101: GO 24104
24103: POP
// end else
24104: GO 24323
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24106: LD_ADDR_VAR 0 1
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 2
24116: PUSH
24117: LD_INT 3
24119: PUSH
24120: LD_INT 4
24122: PUSH
24123: LD_INT 5
24125: PUSH
24126: LD_INT 6
24128: PUSH
24129: LD_INT 7
24131: PUSH
24132: LD_INT 8
24134: PUSH
24135: LD_INT 9
24137: PUSH
24138: LD_INT 10
24140: PUSH
24141: LD_INT 11
24143: PUSH
24144: LD_INT 12
24146: PUSH
24147: LD_INT 13
24149: PUSH
24150: LD_INT 14
24152: PUSH
24153: LD_INT 15
24155: PUSH
24156: LD_INT 16
24158: PUSH
24159: LD_INT 17
24161: PUSH
24162: LD_INT 18
24164: PUSH
24165: LD_INT 19
24167: PUSH
24168: LD_INT 20
24170: PUSH
24171: LD_INT 21
24173: PUSH
24174: LD_INT 22
24176: PUSH
24177: LD_INT 23
24179: PUSH
24180: LD_INT 24
24182: PUSH
24183: LD_INT 25
24185: PUSH
24186: LD_INT 26
24188: PUSH
24189: LD_INT 27
24191: PUSH
24192: LD_INT 28
24194: PUSH
24195: LD_INT 29
24197: PUSH
24198: LD_INT 30
24200: PUSH
24201: LD_INT 31
24203: PUSH
24204: LD_INT 32
24206: PUSH
24207: LD_INT 33
24209: PUSH
24210: LD_INT 34
24212: PUSH
24213: LD_INT 35
24215: PUSH
24216: LD_INT 36
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 101
24259: PUSH
24260: LD_INT 102
24262: PUSH
24263: LD_INT 103
24265: PUSH
24266: LD_INT 104
24268: PUSH
24269: LD_INT 105
24271: PUSH
24272: LD_INT 106
24274: PUSH
24275: LD_INT 107
24277: PUSH
24278: LD_INT 108
24280: PUSH
24281: LD_INT 109
24283: PUSH
24284: LD_INT 110
24286: PUSH
24287: LD_INT 111
24289: PUSH
24290: LD_INT 112
24292: PUSH
24293: LD_INT 113
24295: PUSH
24296: LD_INT 114
24298: PUSH
24299: LD_INT 115
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: ST_TO_ADDR
// if result then
24323: LD_VAR 0 1
24327: IFFALSE 24616
// begin normal :=  ;
24329: LD_ADDR_VAR 0 3
24333: PUSH
24334: LD_STRING 
24336: ST_TO_ADDR
// hardcore :=  ;
24337: LD_ADDR_VAR 0 4
24341: PUSH
24342: LD_STRING 
24344: ST_TO_ADDR
// for i = 1 to normalCounter do
24345: LD_ADDR_VAR 0 5
24349: PUSH
24350: DOUBLE
24351: LD_INT 1
24353: DEC
24354: ST_TO_ADDR
24355: LD_EXP 68
24359: PUSH
24360: FOR_TO
24361: IFFALSE 24462
// begin tmp := 0 ;
24363: LD_ADDR_VAR 0 2
24367: PUSH
24368: LD_STRING 0
24370: ST_TO_ADDR
// if result [ 1 ] then
24371: LD_VAR 0 1
24375: PUSH
24376: LD_INT 1
24378: ARRAY
24379: IFFALSE 24444
// if result [ 1 ] [ 1 ] = i then
24381: LD_VAR 0 1
24385: PUSH
24386: LD_INT 1
24388: ARRAY
24389: PUSH
24390: LD_INT 1
24392: ARRAY
24393: PUSH
24394: LD_VAR 0 5
24398: EQUAL
24399: IFFALSE 24444
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24401: LD_ADDR_VAR 0 1
24405: PUSH
24406: LD_VAR 0 1
24410: PPUSH
24411: LD_INT 1
24413: PPUSH
24414: LD_VAR 0 1
24418: PUSH
24419: LD_INT 1
24421: ARRAY
24422: PPUSH
24423: LD_INT 1
24425: PPUSH
24426: CALL_OW 3
24430: PPUSH
24431: CALL_OW 1
24435: ST_TO_ADDR
// tmp := 1 ;
24436: LD_ADDR_VAR 0 2
24440: PUSH
24441: LD_STRING 1
24443: ST_TO_ADDR
// end ; normal := normal & tmp ;
24444: LD_ADDR_VAR 0 3
24448: PUSH
24449: LD_VAR 0 3
24453: PUSH
24454: LD_VAR 0 2
24458: STR
24459: ST_TO_ADDR
// end ;
24460: GO 24360
24462: POP
24463: POP
// for i = 1 to hardcoreCounter do
24464: LD_ADDR_VAR 0 5
24468: PUSH
24469: DOUBLE
24470: LD_INT 1
24472: DEC
24473: ST_TO_ADDR
24474: LD_EXP 69
24478: PUSH
24479: FOR_TO
24480: IFFALSE 24585
// begin tmp := 0 ;
24482: LD_ADDR_VAR 0 2
24486: PUSH
24487: LD_STRING 0
24489: ST_TO_ADDR
// if result [ 2 ] then
24490: LD_VAR 0 1
24494: PUSH
24495: LD_INT 2
24497: ARRAY
24498: IFFALSE 24567
// if result [ 2 ] [ 1 ] = 100 + i then
24500: LD_VAR 0 1
24504: PUSH
24505: LD_INT 2
24507: ARRAY
24508: PUSH
24509: LD_INT 1
24511: ARRAY
24512: PUSH
24513: LD_INT 100
24515: PUSH
24516: LD_VAR 0 5
24520: PLUS
24521: EQUAL
24522: IFFALSE 24567
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24524: LD_ADDR_VAR 0 1
24528: PUSH
24529: LD_VAR 0 1
24533: PPUSH
24534: LD_INT 2
24536: PPUSH
24537: LD_VAR 0 1
24541: PUSH
24542: LD_INT 2
24544: ARRAY
24545: PPUSH
24546: LD_INT 1
24548: PPUSH
24549: CALL_OW 3
24553: PPUSH
24554: CALL_OW 1
24558: ST_TO_ADDR
// tmp := 1 ;
24559: LD_ADDR_VAR 0 2
24563: PUSH
24564: LD_STRING 1
24566: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24567: LD_ADDR_VAR 0 4
24571: PUSH
24572: LD_VAR 0 4
24576: PUSH
24577: LD_VAR 0 2
24581: STR
24582: ST_TO_ADDR
// end ;
24583: GO 24479
24585: POP
24586: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24587: LD_STRING getStreamItemsFromMission("
24589: PUSH
24590: LD_VAR 0 3
24594: STR
24595: PUSH
24596: LD_STRING ","
24598: STR
24599: PUSH
24600: LD_VAR 0 4
24604: STR
24605: PUSH
24606: LD_STRING ")
24608: STR
24609: PPUSH
24610: CALL_OW 559
// end else
24614: GO 24623
// ToLua ( getStreamItemsFromMission("","") ) ;
24616: LD_STRING getStreamItemsFromMission("","")
24618: PPUSH
24619: CALL_OW 559
// end ;
24623: LD_VAR 0 1
24627: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24628: LD_EXP 67
24632: PUSH
24633: LD_EXP 72
24637: AND
24638: IFFALSE 24762
24640: GO 24642
24642: DISABLE
24643: LD_INT 0
24645: PPUSH
24646: PPUSH
// begin enable ;
24647: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24648: LD_ADDR_VAR 0 2
24652: PUSH
24653: LD_INT 22
24655: PUSH
24656: LD_OWVAR 2
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 2
24667: PUSH
24668: LD_INT 34
24670: PUSH
24671: LD_INT 7
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 34
24680: PUSH
24681: LD_INT 45
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 34
24690: PUSH
24691: LD_INT 28
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 34
24700: PUSH
24701: LD_INT 47
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PPUSH
24719: CALL_OW 69
24723: ST_TO_ADDR
// if not tmp then
24724: LD_VAR 0 2
24728: NOT
24729: IFFALSE 24733
// exit ;
24731: GO 24762
// for i in tmp do
24733: LD_ADDR_VAR 0 1
24737: PUSH
24738: LD_VAR 0 2
24742: PUSH
24743: FOR_IN
24744: IFFALSE 24760
// begin SetLives ( i , 0 ) ;
24746: LD_VAR 0 1
24750: PPUSH
24751: LD_INT 0
24753: PPUSH
24754: CALL_OW 234
// end ;
24758: GO 24743
24760: POP
24761: POP
// end ;
24762: PPOPN 2
24764: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24765: LD_EXP 67
24769: PUSH
24770: LD_EXP 73
24774: AND
24775: IFFALSE 24859
24777: GO 24779
24779: DISABLE
24780: LD_INT 0
24782: PPUSH
24783: PPUSH
// begin enable ;
24784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24785: LD_ADDR_VAR 0 2
24789: PUSH
24790: LD_INT 22
24792: PUSH
24793: LD_OWVAR 2
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 32
24804: PUSH
24805: LD_INT 3
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PPUSH
24816: CALL_OW 69
24820: ST_TO_ADDR
// if not tmp then
24821: LD_VAR 0 2
24825: NOT
24826: IFFALSE 24830
// exit ;
24828: GO 24859
// for i in tmp do
24830: LD_ADDR_VAR 0 1
24834: PUSH
24835: LD_VAR 0 2
24839: PUSH
24840: FOR_IN
24841: IFFALSE 24857
// begin SetLives ( i , 0 ) ;
24843: LD_VAR 0 1
24847: PPUSH
24848: LD_INT 0
24850: PPUSH
24851: CALL_OW 234
// end ;
24855: GO 24840
24857: POP
24858: POP
// end ;
24859: PPOPN 2
24861: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24862: LD_EXP 67
24866: PUSH
24867: LD_EXP 70
24871: AND
24872: IFFALSE 24965
24874: GO 24876
24876: DISABLE
24877: LD_INT 0
24879: PPUSH
// begin enable ;
24880: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24881: LD_ADDR_VAR 0 1
24885: PUSH
24886: LD_INT 22
24888: PUSH
24889: LD_OWVAR 2
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 25
24903: PUSH
24904: LD_INT 5
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 25
24913: PUSH
24914: LD_INT 9
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 25
24923: PUSH
24924: LD_INT 8
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PPUSH
24941: CALL_OW 69
24945: PUSH
24946: FOR_IN
24947: IFFALSE 24963
// begin SetClass ( i , 1 ) ;
24949: LD_VAR 0 1
24953: PPUSH
24954: LD_INT 1
24956: PPUSH
24957: CALL_OW 336
// end ;
24961: GO 24946
24963: POP
24964: POP
// end ;
24965: PPOPN 1
24967: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24968: LD_EXP 67
24972: PUSH
24973: LD_EXP 71
24977: AND
24978: PUSH
24979: LD_OWVAR 65
24983: PUSH
24984: LD_INT 7
24986: LESS
24987: AND
24988: IFFALSE 25002
24990: GO 24992
24992: DISABLE
// begin enable ;
24993: ENABLE
// game_speed := 7 ;
24994: LD_ADDR_OWVAR 65
24998: PUSH
24999: LD_INT 7
25001: ST_TO_ADDR
// end ;
25002: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25003: LD_EXP 67
25007: PUSH
25008: LD_EXP 74
25012: AND
25013: IFFALSE 25215
25015: GO 25017
25017: DISABLE
25018: LD_INT 0
25020: PPUSH
25021: PPUSH
25022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25023: LD_ADDR_VAR 0 3
25027: PUSH
25028: LD_INT 81
25030: PUSH
25031: LD_OWVAR 2
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 21
25042: PUSH
25043: LD_INT 1
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PPUSH
25054: CALL_OW 69
25058: ST_TO_ADDR
// if not tmp then
25059: LD_VAR 0 3
25063: NOT
25064: IFFALSE 25068
// exit ;
25066: GO 25215
// if tmp > 5 then
25068: LD_VAR 0 3
25072: PUSH
25073: LD_INT 5
25075: GREATER
25076: IFFALSE 25088
// k := 5 else
25078: LD_ADDR_VAR 0 2
25082: PUSH
25083: LD_INT 5
25085: ST_TO_ADDR
25086: GO 25098
// k := tmp ;
25088: LD_ADDR_VAR 0 2
25092: PUSH
25093: LD_VAR 0 3
25097: ST_TO_ADDR
// for i := 1 to k do
25098: LD_ADDR_VAR 0 1
25102: PUSH
25103: DOUBLE
25104: LD_INT 1
25106: DEC
25107: ST_TO_ADDR
25108: LD_VAR 0 2
25112: PUSH
25113: FOR_TO
25114: IFFALSE 25213
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25116: LD_VAR 0 3
25120: PUSH
25121: LD_VAR 0 1
25125: ARRAY
25126: PPUSH
25127: LD_VAR 0 1
25131: PUSH
25132: LD_INT 4
25134: MOD
25135: PUSH
25136: LD_INT 1
25138: PLUS
25139: PPUSH
25140: CALL_OW 259
25144: PUSH
25145: LD_INT 10
25147: LESS
25148: IFFALSE 25211
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25150: LD_VAR 0 3
25154: PUSH
25155: LD_VAR 0 1
25159: ARRAY
25160: PPUSH
25161: LD_VAR 0 1
25165: PUSH
25166: LD_INT 4
25168: MOD
25169: PUSH
25170: LD_INT 1
25172: PLUS
25173: PPUSH
25174: LD_VAR 0 3
25178: PUSH
25179: LD_VAR 0 1
25183: ARRAY
25184: PPUSH
25185: LD_VAR 0 1
25189: PUSH
25190: LD_INT 4
25192: MOD
25193: PUSH
25194: LD_INT 1
25196: PLUS
25197: PPUSH
25198: CALL_OW 259
25202: PUSH
25203: LD_INT 1
25205: PLUS
25206: PPUSH
25207: CALL_OW 237
25211: GO 25113
25213: POP
25214: POP
// end ;
25215: PPOPN 3
25217: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25218: LD_EXP 67
25222: PUSH
25223: LD_EXP 75
25227: AND
25228: IFFALSE 25248
25230: GO 25232
25232: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25233: LD_INT 4
25235: PPUSH
25236: LD_OWVAR 2
25240: PPUSH
25241: LD_INT 0
25243: PPUSH
25244: CALL_OW 324
25248: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25249: LD_EXP 67
25253: PUSH
25254: LD_EXP 104
25258: AND
25259: IFFALSE 25279
25261: GO 25263
25263: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25264: LD_INT 19
25266: PPUSH
25267: LD_OWVAR 2
25271: PPUSH
25272: LD_INT 0
25274: PPUSH
25275: CALL_OW 324
25279: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25280: LD_EXP 67
25284: PUSH
25285: LD_EXP 76
25289: AND
25290: IFFALSE 25392
25292: GO 25294
25294: DISABLE
25295: LD_INT 0
25297: PPUSH
25298: PPUSH
// begin enable ;
25299: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25300: LD_ADDR_VAR 0 2
25304: PUSH
25305: LD_INT 22
25307: PUSH
25308: LD_OWVAR 2
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: LD_INT 34
25322: PUSH
25323: LD_INT 11
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 34
25332: PUSH
25333: LD_INT 30
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: LIST
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PPUSH
25349: CALL_OW 69
25353: ST_TO_ADDR
// if not tmp then
25354: LD_VAR 0 2
25358: NOT
25359: IFFALSE 25363
// exit ;
25361: GO 25392
// for i in tmp do
25363: LD_ADDR_VAR 0 1
25367: PUSH
25368: LD_VAR 0 2
25372: PUSH
25373: FOR_IN
25374: IFFALSE 25390
// begin SetLives ( i , 0 ) ;
25376: LD_VAR 0 1
25380: PPUSH
25381: LD_INT 0
25383: PPUSH
25384: CALL_OW 234
// end ;
25388: GO 25373
25390: POP
25391: POP
// end ;
25392: PPOPN 2
25394: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25395: LD_EXP 67
25399: PUSH
25400: LD_EXP 77
25404: AND
25405: IFFALSE 25425
25407: GO 25409
25409: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25410: LD_INT 32
25412: PPUSH
25413: LD_OWVAR 2
25417: PPUSH
25418: LD_INT 0
25420: PPUSH
25421: CALL_OW 324
25425: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25426: LD_EXP 67
25430: PUSH
25431: LD_EXP 78
25435: AND
25436: IFFALSE 25617
25438: GO 25440
25440: DISABLE
25441: LD_INT 0
25443: PPUSH
25444: PPUSH
25445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25446: LD_ADDR_VAR 0 2
25450: PUSH
25451: LD_INT 22
25453: PUSH
25454: LD_OWVAR 2
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 33
25465: PUSH
25466: LD_INT 3
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PPUSH
25477: CALL_OW 69
25481: ST_TO_ADDR
// if not tmp then
25482: LD_VAR 0 2
25486: NOT
25487: IFFALSE 25491
// exit ;
25489: GO 25617
// side := 0 ;
25491: LD_ADDR_VAR 0 3
25495: PUSH
25496: LD_INT 0
25498: ST_TO_ADDR
// for i := 1 to 8 do
25499: LD_ADDR_VAR 0 1
25503: PUSH
25504: DOUBLE
25505: LD_INT 1
25507: DEC
25508: ST_TO_ADDR
25509: LD_INT 8
25511: PUSH
25512: FOR_TO
25513: IFFALSE 25561
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25515: LD_OWVAR 2
25519: PUSH
25520: LD_VAR 0 1
25524: NONEQUAL
25525: PUSH
25526: LD_OWVAR 2
25530: PPUSH
25531: LD_VAR 0 1
25535: PPUSH
25536: CALL_OW 81
25540: PUSH
25541: LD_INT 2
25543: EQUAL
25544: AND
25545: IFFALSE 25559
// begin side := i ;
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: LD_VAR 0 1
25556: ST_TO_ADDR
// break ;
25557: GO 25561
// end ;
25559: GO 25512
25561: POP
25562: POP
// if not side then
25563: LD_VAR 0 3
25567: NOT
25568: IFFALSE 25572
// exit ;
25570: GO 25617
// for i := 1 to tmp do
25572: LD_ADDR_VAR 0 1
25576: PUSH
25577: DOUBLE
25578: LD_INT 1
25580: DEC
25581: ST_TO_ADDR
25582: LD_VAR 0 2
25586: PUSH
25587: FOR_TO
25588: IFFALSE 25615
// if Prob ( 60 ) then
25590: LD_INT 60
25592: PPUSH
25593: CALL_OW 13
25597: IFFALSE 25613
// SetSide ( i , side ) ;
25599: LD_VAR 0 1
25603: PPUSH
25604: LD_VAR 0 3
25608: PPUSH
25609: CALL_OW 235
25613: GO 25587
25615: POP
25616: POP
// end ;
25617: PPOPN 3
25619: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25620: LD_EXP 67
25624: PUSH
25625: LD_EXP 80
25629: AND
25630: IFFALSE 25749
25632: GO 25634
25634: DISABLE
25635: LD_INT 0
25637: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25638: LD_ADDR_VAR 0 1
25642: PUSH
25643: LD_INT 22
25645: PUSH
25646: LD_OWVAR 2
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 21
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 3
25667: PUSH
25668: LD_INT 23
25670: PUSH
25671: LD_INT 0
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: LIST
25686: PPUSH
25687: CALL_OW 69
25691: PUSH
25692: FOR_IN
25693: IFFALSE 25747
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25695: LD_VAR 0 1
25699: PPUSH
25700: CALL_OW 257
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: LD_INT 2
25710: PUSH
25711: LD_INT 3
25713: PUSH
25714: LD_INT 4
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: IN
25723: IFFALSE 25745
// SetClass ( un , rand ( 1 , 4 ) ) ;
25725: LD_VAR 0 1
25729: PPUSH
25730: LD_INT 1
25732: PPUSH
25733: LD_INT 4
25735: PPUSH
25736: CALL_OW 12
25740: PPUSH
25741: CALL_OW 336
25745: GO 25692
25747: POP
25748: POP
// end ;
25749: PPOPN 1
25751: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25752: LD_EXP 67
25756: PUSH
25757: LD_EXP 79
25761: AND
25762: IFFALSE 25841
25764: GO 25766
25766: DISABLE
25767: LD_INT 0
25769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25770: LD_ADDR_VAR 0 1
25774: PUSH
25775: LD_INT 22
25777: PUSH
25778: LD_OWVAR 2
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 21
25789: PUSH
25790: LD_INT 3
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PPUSH
25801: CALL_OW 69
25805: ST_TO_ADDR
// if not tmp then
25806: LD_VAR 0 1
25810: NOT
25811: IFFALSE 25815
// exit ;
25813: GO 25841
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25815: LD_VAR 0 1
25819: PUSH
25820: LD_INT 1
25822: PPUSH
25823: LD_VAR 0 1
25827: PPUSH
25828: CALL_OW 12
25832: ARRAY
25833: PPUSH
25834: LD_INT 100
25836: PPUSH
25837: CALL_OW 234
// end ;
25841: PPOPN 1
25843: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25844: LD_EXP 67
25848: PUSH
25849: LD_EXP 81
25853: AND
25854: IFFALSE 25952
25856: GO 25858
25858: DISABLE
25859: LD_INT 0
25861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25862: LD_ADDR_VAR 0 1
25866: PUSH
25867: LD_INT 22
25869: PUSH
25870: LD_OWVAR 2
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 21
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PPUSH
25893: CALL_OW 69
25897: ST_TO_ADDR
// if not tmp then
25898: LD_VAR 0 1
25902: NOT
25903: IFFALSE 25907
// exit ;
25905: GO 25952
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25907: LD_VAR 0 1
25911: PUSH
25912: LD_INT 1
25914: PPUSH
25915: LD_VAR 0 1
25919: PPUSH
25920: CALL_OW 12
25924: ARRAY
25925: PPUSH
25926: LD_INT 1
25928: PPUSH
25929: LD_INT 4
25931: PPUSH
25932: CALL_OW 12
25936: PPUSH
25937: LD_INT 3000
25939: PPUSH
25940: LD_INT 9000
25942: PPUSH
25943: CALL_OW 12
25947: PPUSH
25948: CALL_OW 492
// end ;
25952: PPOPN 1
25954: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25955: LD_EXP 67
25959: PUSH
25960: LD_EXP 82
25964: AND
25965: IFFALSE 25985
25967: GO 25969
25969: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25970: LD_INT 1
25972: PPUSH
25973: LD_OWVAR 2
25977: PPUSH
25978: LD_INT 0
25980: PPUSH
25981: CALL_OW 324
25985: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25986: LD_EXP 67
25990: PUSH
25991: LD_EXP 83
25995: AND
25996: IFFALSE 26079
25998: GO 26000
26000: DISABLE
26001: LD_INT 0
26003: PPUSH
26004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26005: LD_ADDR_VAR 0 2
26009: PUSH
26010: LD_INT 22
26012: PUSH
26013: LD_OWVAR 2
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 21
26024: PUSH
26025: LD_INT 3
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PPUSH
26036: CALL_OW 69
26040: ST_TO_ADDR
// if not tmp then
26041: LD_VAR 0 2
26045: NOT
26046: IFFALSE 26050
// exit ;
26048: GO 26079
// for i in tmp do
26050: LD_ADDR_VAR 0 1
26054: PUSH
26055: LD_VAR 0 2
26059: PUSH
26060: FOR_IN
26061: IFFALSE 26077
// SetBLevel ( i , 10 ) ;
26063: LD_VAR 0 1
26067: PPUSH
26068: LD_INT 10
26070: PPUSH
26071: CALL_OW 241
26075: GO 26060
26077: POP
26078: POP
// end ;
26079: PPOPN 2
26081: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26082: LD_EXP 67
26086: PUSH
26087: LD_EXP 84
26091: AND
26092: IFFALSE 26203
26094: GO 26096
26096: DISABLE
26097: LD_INT 0
26099: PPUSH
26100: PPUSH
26101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26102: LD_ADDR_VAR 0 3
26106: PUSH
26107: LD_INT 22
26109: PUSH
26110: LD_OWVAR 2
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 25
26121: PUSH
26122: LD_INT 1
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PPUSH
26133: CALL_OW 69
26137: ST_TO_ADDR
// if not tmp then
26138: LD_VAR 0 3
26142: NOT
26143: IFFALSE 26147
// exit ;
26145: GO 26203
// un := tmp [ rand ( 1 , tmp ) ] ;
26147: LD_ADDR_VAR 0 2
26151: PUSH
26152: LD_VAR 0 3
26156: PUSH
26157: LD_INT 1
26159: PPUSH
26160: LD_VAR 0 3
26164: PPUSH
26165: CALL_OW 12
26169: ARRAY
26170: ST_TO_ADDR
// if Crawls ( un ) then
26171: LD_VAR 0 2
26175: PPUSH
26176: CALL_OW 318
26180: IFFALSE 26191
// ComWalk ( un ) ;
26182: LD_VAR 0 2
26186: PPUSH
26187: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26191: LD_VAR 0 2
26195: PPUSH
26196: LD_INT 5
26198: PPUSH
26199: CALL_OW 336
// end ;
26203: PPOPN 3
26205: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26206: LD_EXP 67
26210: PUSH
26211: LD_EXP 85
26215: AND
26216: PUSH
26217: LD_OWVAR 67
26221: PUSH
26222: LD_INT 4
26224: LESS
26225: AND
26226: IFFALSE 26245
26228: GO 26230
26230: DISABLE
// begin Difficulty := Difficulty + 1 ;
26231: LD_ADDR_OWVAR 67
26235: PUSH
26236: LD_OWVAR 67
26240: PUSH
26241: LD_INT 1
26243: PLUS
26244: ST_TO_ADDR
// end ;
26245: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26246: LD_EXP 67
26250: PUSH
26251: LD_EXP 86
26255: AND
26256: IFFALSE 26359
26258: GO 26260
26260: DISABLE
26261: LD_INT 0
26263: PPUSH
// begin for i := 1 to 5 do
26264: LD_ADDR_VAR 0 1
26268: PUSH
26269: DOUBLE
26270: LD_INT 1
26272: DEC
26273: ST_TO_ADDR
26274: LD_INT 5
26276: PUSH
26277: FOR_TO
26278: IFFALSE 26357
// begin uc_nation := nation_nature ;
26280: LD_ADDR_OWVAR 21
26284: PUSH
26285: LD_INT 0
26287: ST_TO_ADDR
// uc_side := 0 ;
26288: LD_ADDR_OWVAR 20
26292: PUSH
26293: LD_INT 0
26295: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26296: LD_ADDR_OWVAR 29
26300: PUSH
26301: LD_INT 12
26303: PUSH
26304: LD_INT 12
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: ST_TO_ADDR
// hc_agressivity := 20 ;
26311: LD_ADDR_OWVAR 35
26315: PUSH
26316: LD_INT 20
26318: ST_TO_ADDR
// hc_class := class_tiger ;
26319: LD_ADDR_OWVAR 28
26323: PUSH
26324: LD_INT 14
26326: ST_TO_ADDR
// hc_gallery :=  ;
26327: LD_ADDR_OWVAR 33
26331: PUSH
26332: LD_STRING 
26334: ST_TO_ADDR
// hc_name :=  ;
26335: LD_ADDR_OWVAR 26
26339: PUSH
26340: LD_STRING 
26342: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26343: CALL_OW 44
26347: PPUSH
26348: LD_INT 0
26350: PPUSH
26351: CALL_OW 51
// end ;
26355: GO 26277
26357: POP
26358: POP
// end ;
26359: PPOPN 1
26361: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26362: LD_EXP 67
26366: PUSH
26367: LD_EXP 87
26371: AND
26372: IFFALSE 26381
26374: GO 26376
26376: DISABLE
// StreamSibBomb ;
26377: CALL 26382 0 0
26381: END
// export function StreamSibBomb ; var i , x , y ; begin
26382: LD_INT 0
26384: PPUSH
26385: PPUSH
26386: PPUSH
26387: PPUSH
// result := false ;
26388: LD_ADDR_VAR 0 1
26392: PUSH
26393: LD_INT 0
26395: ST_TO_ADDR
// for i := 1 to 16 do
26396: LD_ADDR_VAR 0 2
26400: PUSH
26401: DOUBLE
26402: LD_INT 1
26404: DEC
26405: ST_TO_ADDR
26406: LD_INT 16
26408: PUSH
26409: FOR_TO
26410: IFFALSE 26609
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26412: LD_ADDR_VAR 0 3
26416: PUSH
26417: LD_INT 10
26419: PUSH
26420: LD_INT 20
26422: PUSH
26423: LD_INT 30
26425: PUSH
26426: LD_INT 40
26428: PUSH
26429: LD_INT 50
26431: PUSH
26432: LD_INT 60
26434: PUSH
26435: LD_INT 70
26437: PUSH
26438: LD_INT 80
26440: PUSH
26441: LD_INT 90
26443: PUSH
26444: LD_INT 100
26446: PUSH
26447: LD_INT 110
26449: PUSH
26450: LD_INT 120
26452: PUSH
26453: LD_INT 130
26455: PUSH
26456: LD_INT 140
26458: PUSH
26459: LD_INT 150
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 1
26481: PPUSH
26482: LD_INT 15
26484: PPUSH
26485: CALL_OW 12
26489: ARRAY
26490: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26491: LD_ADDR_VAR 0 4
26495: PUSH
26496: LD_INT 10
26498: PUSH
26499: LD_INT 20
26501: PUSH
26502: LD_INT 30
26504: PUSH
26505: LD_INT 40
26507: PUSH
26508: LD_INT 50
26510: PUSH
26511: LD_INT 60
26513: PUSH
26514: LD_INT 70
26516: PUSH
26517: LD_INT 80
26519: PUSH
26520: LD_INT 90
26522: PUSH
26523: LD_INT 100
26525: PUSH
26526: LD_INT 110
26528: PUSH
26529: LD_INT 120
26531: PUSH
26532: LD_INT 130
26534: PUSH
26535: LD_INT 140
26537: PUSH
26538: LD_INT 150
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 1
26560: PPUSH
26561: LD_INT 15
26563: PPUSH
26564: CALL_OW 12
26568: ARRAY
26569: ST_TO_ADDR
// if ValidHex ( x , y ) then
26570: LD_VAR 0 3
26574: PPUSH
26575: LD_VAR 0 4
26579: PPUSH
26580: CALL_OW 488
26584: IFFALSE 26607
// begin result := [ x , y ] ;
26586: LD_ADDR_VAR 0 1
26590: PUSH
26591: LD_VAR 0 3
26595: PUSH
26596: LD_VAR 0 4
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: ST_TO_ADDR
// break ;
26605: GO 26609
// end ; end ;
26607: GO 26409
26609: POP
26610: POP
// if result then
26611: LD_VAR 0 1
26615: IFFALSE 26675
// begin ToLua ( playSibBomb() ) ;
26617: LD_STRING playSibBomb()
26619: PPUSH
26620: CALL_OW 559
// wait ( 0 0$14 ) ;
26624: LD_INT 490
26626: PPUSH
26627: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26631: LD_VAR 0 1
26635: PUSH
26636: LD_INT 1
26638: ARRAY
26639: PPUSH
26640: LD_VAR 0 1
26644: PUSH
26645: LD_INT 2
26647: ARRAY
26648: PPUSH
26649: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26653: LD_VAR 0 1
26657: PUSH
26658: LD_INT 1
26660: ARRAY
26661: PPUSH
26662: LD_VAR 0 1
26666: PUSH
26667: LD_INT 2
26669: ARRAY
26670: PPUSH
26671: CALL_OW 429
// end ; end ;
26675: LD_VAR 0 1
26679: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26680: LD_EXP 67
26684: PUSH
26685: LD_EXP 89
26689: AND
26690: IFFALSE 26702
26692: GO 26694
26694: DISABLE
// YouLost (  ) ;
26695: LD_STRING 
26697: PPUSH
26698: CALL_OW 104
26702: END
// every 0 0$1 trigger StreamModeActive and sFog do
26703: LD_EXP 67
26707: PUSH
26708: LD_EXP 88
26712: AND
26713: IFFALSE 26727
26715: GO 26717
26717: DISABLE
// FogOff ( your_side ) ;
26718: LD_OWVAR 2
26722: PPUSH
26723: CALL_OW 344
26727: END
// every 0 0$1 trigger StreamModeActive and sSun do
26728: LD_EXP 67
26732: PUSH
26733: LD_EXP 90
26737: AND
26738: IFFALSE 26766
26740: GO 26742
26742: DISABLE
// begin solar_recharge_percent := 0 ;
26743: LD_ADDR_OWVAR 79
26747: PUSH
26748: LD_INT 0
26750: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26751: LD_INT 10500
26753: PPUSH
26754: CALL_OW 67
// solar_recharge_percent := 100 ;
26758: LD_ADDR_OWVAR 79
26762: PUSH
26763: LD_INT 100
26765: ST_TO_ADDR
// end ;
26766: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26767: LD_EXP 67
26771: PUSH
26772: LD_EXP 91
26776: AND
26777: IFFALSE 27016
26779: GO 26781
26781: DISABLE
26782: LD_INT 0
26784: PPUSH
26785: PPUSH
26786: PPUSH
// begin tmp := [ ] ;
26787: LD_ADDR_VAR 0 3
26791: PUSH
26792: EMPTY
26793: ST_TO_ADDR
// for i := 1 to 6 do
26794: LD_ADDR_VAR 0 1
26798: PUSH
26799: DOUBLE
26800: LD_INT 1
26802: DEC
26803: ST_TO_ADDR
26804: LD_INT 6
26806: PUSH
26807: FOR_TO
26808: IFFALSE 26913
// begin uc_nation := nation_nature ;
26810: LD_ADDR_OWVAR 21
26814: PUSH
26815: LD_INT 0
26817: ST_TO_ADDR
// uc_side := 0 ;
26818: LD_ADDR_OWVAR 20
26822: PUSH
26823: LD_INT 0
26825: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26826: LD_ADDR_OWVAR 29
26830: PUSH
26831: LD_INT 12
26833: PUSH
26834: LD_INT 12
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: ST_TO_ADDR
// hc_agressivity := 20 ;
26841: LD_ADDR_OWVAR 35
26845: PUSH
26846: LD_INT 20
26848: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26849: LD_ADDR_OWVAR 28
26853: PUSH
26854: LD_INT 17
26856: ST_TO_ADDR
// hc_gallery :=  ;
26857: LD_ADDR_OWVAR 33
26861: PUSH
26862: LD_STRING 
26864: ST_TO_ADDR
// hc_name :=  ;
26865: LD_ADDR_OWVAR 26
26869: PUSH
26870: LD_STRING 
26872: ST_TO_ADDR
// un := CreateHuman ;
26873: LD_ADDR_VAR 0 2
26877: PUSH
26878: CALL_OW 44
26882: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26883: LD_VAR 0 2
26887: PPUSH
26888: LD_INT 1
26890: PPUSH
26891: CALL_OW 51
// tmp := tmp ^ un ;
26895: LD_ADDR_VAR 0 3
26899: PUSH
26900: LD_VAR 0 3
26904: PUSH
26905: LD_VAR 0 2
26909: ADD
26910: ST_TO_ADDR
// end ;
26911: GO 26807
26913: POP
26914: POP
// repeat wait ( 0 0$1 ) ;
26915: LD_INT 35
26917: PPUSH
26918: CALL_OW 67
// for un in tmp do
26922: LD_ADDR_VAR 0 2
26926: PUSH
26927: LD_VAR 0 3
26931: PUSH
26932: FOR_IN
26933: IFFALSE 27007
// begin if IsDead ( un ) then
26935: LD_VAR 0 2
26939: PPUSH
26940: CALL_OW 301
26944: IFFALSE 26964
// begin tmp := tmp diff un ;
26946: LD_ADDR_VAR 0 3
26950: PUSH
26951: LD_VAR 0 3
26955: PUSH
26956: LD_VAR 0 2
26960: DIFF
26961: ST_TO_ADDR
// continue ;
26962: GO 26932
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26964: LD_VAR 0 2
26968: PPUSH
26969: LD_INT 3
26971: PUSH
26972: LD_INT 22
26974: PUSH
26975: LD_INT 0
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PPUSH
26986: CALL_OW 69
26990: PPUSH
26991: LD_VAR 0 2
26995: PPUSH
26996: CALL_OW 74
27000: PPUSH
27001: CALL_OW 115
// end ;
27005: GO 26932
27007: POP
27008: POP
// until not tmp ;
27009: LD_VAR 0 3
27013: NOT
27014: IFFALSE 26915
// end ;
27016: PPOPN 3
27018: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27019: LD_EXP 67
27023: PUSH
27024: LD_EXP 92
27028: AND
27029: IFFALSE 27083
27031: GO 27033
27033: DISABLE
// begin ToLua ( displayTroll(); ) ;
27034: LD_STRING displayTroll();
27036: PPUSH
27037: CALL_OW 559
// wait ( 3 3$00 ) ;
27041: LD_INT 6300
27043: PPUSH
27044: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27048: LD_STRING hideTroll();
27050: PPUSH
27051: CALL_OW 559
// wait ( 1 1$00 ) ;
27055: LD_INT 2100
27057: PPUSH
27058: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27062: LD_STRING displayTroll();
27064: PPUSH
27065: CALL_OW 559
// wait ( 1 1$00 ) ;
27069: LD_INT 2100
27071: PPUSH
27072: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27076: LD_STRING hideTroll();
27078: PPUSH
27079: CALL_OW 559
// end ;
27083: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27084: LD_EXP 67
27088: PUSH
27089: LD_EXP 93
27093: AND
27094: IFFALSE 27157
27096: GO 27098
27098: DISABLE
27099: LD_INT 0
27101: PPUSH
// begin p := 0 ;
27102: LD_ADDR_VAR 0 1
27106: PUSH
27107: LD_INT 0
27109: ST_TO_ADDR
// repeat game_speed := 1 ;
27110: LD_ADDR_OWVAR 65
27114: PUSH
27115: LD_INT 1
27117: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27118: LD_INT 35
27120: PPUSH
27121: CALL_OW 67
// p := p + 1 ;
27125: LD_ADDR_VAR 0 1
27129: PUSH
27130: LD_VAR 0 1
27134: PUSH
27135: LD_INT 1
27137: PLUS
27138: ST_TO_ADDR
// until p >= 60 ;
27139: LD_VAR 0 1
27143: PUSH
27144: LD_INT 60
27146: GREATEREQUAL
27147: IFFALSE 27110
// game_speed := 4 ;
27149: LD_ADDR_OWVAR 65
27153: PUSH
27154: LD_INT 4
27156: ST_TO_ADDR
// end ;
27157: PPOPN 1
27159: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27160: LD_EXP 67
27164: PUSH
27165: LD_EXP 94
27169: AND
27170: IFFALSE 27316
27172: GO 27174
27174: DISABLE
27175: LD_INT 0
27177: PPUSH
27178: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27179: LD_ADDR_VAR 0 1
27183: PUSH
27184: LD_INT 22
27186: PUSH
27187: LD_OWVAR 2
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: LD_INT 30
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 30
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: LIST
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PPUSH
27228: CALL_OW 69
27232: ST_TO_ADDR
// if not depot then
27233: LD_VAR 0 1
27237: NOT
27238: IFFALSE 27242
// exit ;
27240: GO 27316
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27242: LD_ADDR_VAR 0 2
27246: PUSH
27247: LD_VAR 0 1
27251: PUSH
27252: LD_INT 1
27254: PPUSH
27255: LD_VAR 0 1
27259: PPUSH
27260: CALL_OW 12
27264: ARRAY
27265: PPUSH
27266: CALL_OW 274
27270: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27271: LD_VAR 0 2
27275: PPUSH
27276: LD_INT 1
27278: PPUSH
27279: LD_INT 0
27281: PPUSH
27282: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27286: LD_VAR 0 2
27290: PPUSH
27291: LD_INT 2
27293: PPUSH
27294: LD_INT 0
27296: PPUSH
27297: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27301: LD_VAR 0 2
27305: PPUSH
27306: LD_INT 3
27308: PPUSH
27309: LD_INT 0
27311: PPUSH
27312: CALL_OW 277
// end ;
27316: PPOPN 2
27318: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27319: LD_EXP 67
27323: PUSH
27324: LD_EXP 95
27328: AND
27329: IFFALSE 27426
27331: GO 27333
27333: DISABLE
27334: LD_INT 0
27336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27337: LD_ADDR_VAR 0 1
27341: PUSH
27342: LD_INT 22
27344: PUSH
27345: LD_OWVAR 2
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 21
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 3
27366: PUSH
27367: LD_INT 23
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: LIST
27385: PPUSH
27386: CALL_OW 69
27390: ST_TO_ADDR
// if not tmp then
27391: LD_VAR 0 1
27395: NOT
27396: IFFALSE 27400
// exit ;
27398: GO 27426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27400: LD_VAR 0 1
27404: PUSH
27405: LD_INT 1
27407: PPUSH
27408: LD_VAR 0 1
27412: PPUSH
27413: CALL_OW 12
27417: ARRAY
27418: PPUSH
27419: LD_INT 200
27421: PPUSH
27422: CALL_OW 234
// end ;
27426: PPOPN 1
27428: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27429: LD_EXP 67
27433: PUSH
27434: LD_EXP 96
27438: AND
27439: IFFALSE 27518
27441: GO 27443
27443: DISABLE
27444: LD_INT 0
27446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27447: LD_ADDR_VAR 0 1
27451: PUSH
27452: LD_INT 22
27454: PUSH
27455: LD_OWVAR 2
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 21
27466: PUSH
27467: LD_INT 2
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PPUSH
27478: CALL_OW 69
27482: ST_TO_ADDR
// if not tmp then
27483: LD_VAR 0 1
27487: NOT
27488: IFFALSE 27492
// exit ;
27490: GO 27518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27492: LD_VAR 0 1
27496: PUSH
27497: LD_INT 1
27499: PPUSH
27500: LD_VAR 0 1
27504: PPUSH
27505: CALL_OW 12
27509: ARRAY
27510: PPUSH
27511: LD_INT 60
27513: PPUSH
27514: CALL_OW 234
// end ;
27518: PPOPN 1
27520: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27521: LD_EXP 67
27525: PUSH
27526: LD_EXP 97
27530: AND
27531: IFFALSE 27630
27533: GO 27535
27535: DISABLE
27536: LD_INT 0
27538: PPUSH
27539: PPUSH
// begin enable ;
27540: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27541: LD_ADDR_VAR 0 1
27545: PUSH
27546: LD_INT 22
27548: PUSH
27549: LD_OWVAR 2
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 61
27560: PUSH
27561: EMPTY
27562: LIST
27563: PUSH
27564: LD_INT 33
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: LIST
27578: PPUSH
27579: CALL_OW 69
27583: ST_TO_ADDR
// if not tmp then
27584: LD_VAR 0 1
27588: NOT
27589: IFFALSE 27593
// exit ;
27591: GO 27630
// for i in tmp do
27593: LD_ADDR_VAR 0 2
27597: PUSH
27598: LD_VAR 0 1
27602: PUSH
27603: FOR_IN
27604: IFFALSE 27628
// if IsControledBy ( i ) then
27606: LD_VAR 0 2
27610: PPUSH
27611: CALL_OW 312
27615: IFFALSE 27626
// ComUnlink ( i ) ;
27617: LD_VAR 0 2
27621: PPUSH
27622: CALL_OW 136
27626: GO 27603
27628: POP
27629: POP
// end ;
27630: PPOPN 2
27632: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27633: LD_EXP 67
27637: PUSH
27638: LD_EXP 98
27642: AND
27643: IFFALSE 27783
27645: GO 27647
27647: DISABLE
27648: LD_INT 0
27650: PPUSH
27651: PPUSH
// begin ToLua ( displayPowell(); ) ;
27652: LD_STRING displayPowell();
27654: PPUSH
27655: CALL_OW 559
// uc_side := 0 ;
27659: LD_ADDR_OWVAR 20
27663: PUSH
27664: LD_INT 0
27666: ST_TO_ADDR
// uc_nation := 2 ;
27667: LD_ADDR_OWVAR 21
27671: PUSH
27672: LD_INT 2
27674: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27675: LD_ADDR_OWVAR 37
27679: PUSH
27680: LD_INT 14
27682: ST_TO_ADDR
// vc_engine := engine_siberite ;
27683: LD_ADDR_OWVAR 39
27687: PUSH
27688: LD_INT 3
27690: ST_TO_ADDR
// vc_control := control_apeman ;
27691: LD_ADDR_OWVAR 38
27695: PUSH
27696: LD_INT 5
27698: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27699: LD_ADDR_OWVAR 40
27703: PUSH
27704: LD_INT 29
27706: ST_TO_ADDR
// un := CreateVehicle ;
27707: LD_ADDR_VAR 0 2
27711: PUSH
27712: CALL_OW 45
27716: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27717: LD_VAR 0 2
27721: PPUSH
27722: LD_INT 1
27724: PPUSH
27725: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27729: LD_INT 35
27731: PPUSH
27732: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27736: LD_VAR 0 2
27740: PPUSH
27741: LD_INT 22
27743: PUSH
27744: LD_OWVAR 2
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PPUSH
27753: CALL_OW 69
27757: PPUSH
27758: LD_VAR 0 2
27762: PPUSH
27763: CALL_OW 74
27767: PPUSH
27768: CALL_OW 115
// until IsDead ( un ) ;
27772: LD_VAR 0 2
27776: PPUSH
27777: CALL_OW 301
27781: IFFALSE 27729
// end ;
27783: PPOPN 2
27785: END
// every 0 0$1 trigger StreamModeActive and sStu do
27786: LD_EXP 67
27790: PUSH
27791: LD_EXP 106
27795: AND
27796: IFFALSE 27812
27798: GO 27800
27800: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27801: LD_STRING displayStucuk();
27803: PPUSH
27804: CALL_OW 559
// ResetFog ;
27808: CALL_OW 335
// end ;
27812: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27813: LD_EXP 67
27817: PUSH
27818: LD_EXP 99
27822: AND
27823: IFFALSE 27964
27825: GO 27827
27827: DISABLE
27828: LD_INT 0
27830: PPUSH
27831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27832: LD_ADDR_VAR 0 2
27836: PUSH
27837: LD_INT 22
27839: PUSH
27840: LD_OWVAR 2
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 21
27851: PUSH
27852: LD_INT 1
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PPUSH
27863: CALL_OW 69
27867: ST_TO_ADDR
// if not tmp then
27868: LD_VAR 0 2
27872: NOT
27873: IFFALSE 27877
// exit ;
27875: GO 27964
// un := tmp [ rand ( 1 , tmp ) ] ;
27877: LD_ADDR_VAR 0 1
27881: PUSH
27882: LD_VAR 0 2
27886: PUSH
27887: LD_INT 1
27889: PPUSH
27890: LD_VAR 0 2
27894: PPUSH
27895: CALL_OW 12
27899: ARRAY
27900: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27901: LD_VAR 0 1
27905: PPUSH
27906: LD_INT 0
27908: PPUSH
27909: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27913: LD_VAR 0 1
27917: PPUSH
27918: LD_OWVAR 3
27922: PUSH
27923: LD_VAR 0 1
27927: DIFF
27928: PPUSH
27929: LD_VAR 0 1
27933: PPUSH
27934: CALL_OW 74
27938: PPUSH
27939: CALL_OW 115
// wait ( 0 0$20 ) ;
27943: LD_INT 700
27945: PPUSH
27946: CALL_OW 67
// SetSide ( un , your_side ) ;
27950: LD_VAR 0 1
27954: PPUSH
27955: LD_OWVAR 2
27959: PPUSH
27960: CALL_OW 235
// end ;
27964: PPOPN 2
27966: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27967: LD_EXP 67
27971: PUSH
27972: LD_EXP 100
27976: AND
27977: IFFALSE 28083
27979: GO 27981
27981: DISABLE
27982: LD_INT 0
27984: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27985: LD_ADDR_VAR 0 1
27989: PUSH
27990: LD_INT 22
27992: PUSH
27993: LD_OWVAR 2
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 30
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 30
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: LIST
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PPUSH
28034: CALL_OW 69
28038: ST_TO_ADDR
// if not depot then
28039: LD_VAR 0 1
28043: NOT
28044: IFFALSE 28048
// exit ;
28046: GO 28083
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28048: LD_VAR 0 1
28052: PUSH
28053: LD_INT 1
28055: ARRAY
28056: PPUSH
28057: CALL_OW 250
28061: PPUSH
28062: LD_VAR 0 1
28066: PUSH
28067: LD_INT 1
28069: ARRAY
28070: PPUSH
28071: CALL_OW 251
28075: PPUSH
28076: LD_INT 70
28078: PPUSH
28079: CALL_OW 495
// end ;
28083: PPOPN 1
28085: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28086: LD_EXP 67
28090: PUSH
28091: LD_EXP 101
28095: AND
28096: IFFALSE 28307
28098: GO 28100
28100: DISABLE
28101: LD_INT 0
28103: PPUSH
28104: PPUSH
28105: PPUSH
28106: PPUSH
28107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28108: LD_ADDR_VAR 0 5
28112: PUSH
28113: LD_INT 22
28115: PUSH
28116: LD_OWVAR 2
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 21
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PPUSH
28139: CALL_OW 69
28143: ST_TO_ADDR
// if not tmp then
28144: LD_VAR 0 5
28148: NOT
28149: IFFALSE 28153
// exit ;
28151: GO 28307
// for i in tmp do
28153: LD_ADDR_VAR 0 1
28157: PUSH
28158: LD_VAR 0 5
28162: PUSH
28163: FOR_IN
28164: IFFALSE 28305
// begin d := rand ( 0 , 5 ) ;
28166: LD_ADDR_VAR 0 4
28170: PUSH
28171: LD_INT 0
28173: PPUSH
28174: LD_INT 5
28176: PPUSH
28177: CALL_OW 12
28181: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28182: LD_ADDR_VAR 0 2
28186: PUSH
28187: LD_VAR 0 1
28191: PPUSH
28192: CALL_OW 250
28196: PPUSH
28197: LD_VAR 0 4
28201: PPUSH
28202: LD_INT 3
28204: PPUSH
28205: LD_INT 12
28207: PPUSH
28208: CALL_OW 12
28212: PPUSH
28213: CALL_OW 272
28217: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28218: LD_ADDR_VAR 0 3
28222: PUSH
28223: LD_VAR 0 1
28227: PPUSH
28228: CALL_OW 251
28232: PPUSH
28233: LD_VAR 0 4
28237: PPUSH
28238: LD_INT 3
28240: PPUSH
28241: LD_INT 12
28243: PPUSH
28244: CALL_OW 12
28248: PPUSH
28249: CALL_OW 273
28253: ST_TO_ADDR
// if ValidHex ( x , y ) then
28254: LD_VAR 0 2
28258: PPUSH
28259: LD_VAR 0 3
28263: PPUSH
28264: CALL_OW 488
28268: IFFALSE 28303
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28270: LD_VAR 0 1
28274: PPUSH
28275: LD_VAR 0 2
28279: PPUSH
28280: LD_VAR 0 3
28284: PPUSH
28285: LD_INT 3
28287: PPUSH
28288: LD_INT 6
28290: PPUSH
28291: CALL_OW 12
28295: PPUSH
28296: LD_INT 1
28298: PPUSH
28299: CALL_OW 483
// end ;
28303: GO 28163
28305: POP
28306: POP
// end ;
28307: PPOPN 5
28309: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28310: LD_EXP 67
28314: PUSH
28315: LD_EXP 102
28319: AND
28320: IFFALSE 28414
28322: GO 28324
28324: DISABLE
28325: LD_INT 0
28327: PPUSH
28328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28329: LD_ADDR_VAR 0 2
28333: PUSH
28334: LD_INT 22
28336: PUSH
28337: LD_OWVAR 2
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 32
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 21
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: LIST
28370: PPUSH
28371: CALL_OW 69
28375: ST_TO_ADDR
// if not tmp then
28376: LD_VAR 0 2
28380: NOT
28381: IFFALSE 28385
// exit ;
28383: GO 28414
// for i in tmp do
28385: LD_ADDR_VAR 0 1
28389: PUSH
28390: LD_VAR 0 2
28394: PUSH
28395: FOR_IN
28396: IFFALSE 28412
// SetFuel ( i , 0 ) ;
28398: LD_VAR 0 1
28402: PPUSH
28403: LD_INT 0
28405: PPUSH
28406: CALL_OW 240
28410: GO 28395
28412: POP
28413: POP
// end ;
28414: PPOPN 2
28416: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28417: LD_EXP 67
28421: PUSH
28422: LD_EXP 103
28426: AND
28427: IFFALSE 28493
28429: GO 28431
28431: DISABLE
28432: LD_INT 0
28434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28435: LD_ADDR_VAR 0 1
28439: PUSH
28440: LD_INT 22
28442: PUSH
28443: LD_OWVAR 2
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 30
28454: PUSH
28455: LD_INT 29
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PPUSH
28466: CALL_OW 69
28470: ST_TO_ADDR
// if not tmp then
28471: LD_VAR 0 1
28475: NOT
28476: IFFALSE 28480
// exit ;
28478: GO 28493
// DestroyUnit ( tmp [ 1 ] ) ;
28480: LD_VAR 0 1
28484: PUSH
28485: LD_INT 1
28487: ARRAY
28488: PPUSH
28489: CALL_OW 65
// end ;
28493: PPOPN 1
28495: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28496: LD_EXP 67
28500: PUSH
28501: LD_EXP 105
28505: AND
28506: IFFALSE 28635
28508: GO 28510
28510: DISABLE
28511: LD_INT 0
28513: PPUSH
// begin uc_side := 0 ;
28514: LD_ADDR_OWVAR 20
28518: PUSH
28519: LD_INT 0
28521: ST_TO_ADDR
// uc_nation := nation_arabian ;
28522: LD_ADDR_OWVAR 21
28526: PUSH
28527: LD_INT 2
28529: ST_TO_ADDR
// hc_gallery :=  ;
28530: LD_ADDR_OWVAR 33
28534: PUSH
28535: LD_STRING 
28537: ST_TO_ADDR
// hc_name :=  ;
28538: LD_ADDR_OWVAR 26
28542: PUSH
28543: LD_STRING 
28545: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28546: LD_INT 1
28548: PPUSH
28549: LD_INT 11
28551: PPUSH
28552: LD_INT 10
28554: PPUSH
28555: CALL_OW 380
// un := CreateHuman ;
28559: LD_ADDR_VAR 0 1
28563: PUSH
28564: CALL_OW 44
28568: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28569: LD_VAR 0 1
28573: PPUSH
28574: LD_INT 1
28576: PPUSH
28577: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28581: LD_INT 35
28583: PPUSH
28584: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28588: LD_VAR 0 1
28592: PPUSH
28593: LD_INT 22
28595: PUSH
28596: LD_OWVAR 2
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PPUSH
28605: CALL_OW 69
28609: PPUSH
28610: LD_VAR 0 1
28614: PPUSH
28615: CALL_OW 74
28619: PPUSH
28620: CALL_OW 115
// until IsDead ( un ) ;
28624: LD_VAR 0 1
28628: PPUSH
28629: CALL_OW 301
28633: IFFALSE 28581
// end ;
28635: PPOPN 1
28637: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28638: LD_EXP 67
28642: PUSH
28643: LD_EXP 107
28647: AND
28648: IFFALSE 28660
28650: GO 28652
28652: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28653: LD_STRING earthquake(getX(game), 0, 32)
28655: PPUSH
28656: CALL_OW 559
28660: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28661: LD_EXP 67
28665: PUSH
28666: LD_EXP 108
28670: AND
28671: IFFALSE 28762
28673: GO 28675
28675: DISABLE
28676: LD_INT 0
28678: PPUSH
// begin enable ;
28679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28680: LD_ADDR_VAR 0 1
28684: PUSH
28685: LD_INT 22
28687: PUSH
28688: LD_OWVAR 2
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 21
28699: PUSH
28700: LD_INT 2
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 33
28709: PUSH
28710: LD_INT 3
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: LIST
28721: PPUSH
28722: CALL_OW 69
28726: ST_TO_ADDR
// if not tmp then
28727: LD_VAR 0 1
28731: NOT
28732: IFFALSE 28736
// exit ;
28734: GO 28762
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28736: LD_VAR 0 1
28740: PUSH
28741: LD_INT 1
28743: PPUSH
28744: LD_VAR 0 1
28748: PPUSH
28749: CALL_OW 12
28753: ARRAY
28754: PPUSH
28755: LD_INT 1
28757: PPUSH
28758: CALL_OW 234
// end ;
28762: PPOPN 1
28764: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28765: LD_EXP 67
28769: PUSH
28770: LD_EXP 109
28774: AND
28775: IFFALSE 28916
28777: GO 28779
28779: DISABLE
28780: LD_INT 0
28782: PPUSH
28783: PPUSH
28784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28785: LD_ADDR_VAR 0 3
28789: PUSH
28790: LD_INT 22
28792: PUSH
28793: LD_OWVAR 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 25
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PPUSH
28816: CALL_OW 69
28820: ST_TO_ADDR
// if not tmp then
28821: LD_VAR 0 3
28825: NOT
28826: IFFALSE 28830
// exit ;
28828: GO 28916
// un := tmp [ rand ( 1 , tmp ) ] ;
28830: LD_ADDR_VAR 0 2
28834: PUSH
28835: LD_VAR 0 3
28839: PUSH
28840: LD_INT 1
28842: PPUSH
28843: LD_VAR 0 3
28847: PPUSH
28848: CALL_OW 12
28852: ARRAY
28853: ST_TO_ADDR
// if Crawls ( un ) then
28854: LD_VAR 0 2
28858: PPUSH
28859: CALL_OW 318
28863: IFFALSE 28874
// ComWalk ( un ) ;
28865: LD_VAR 0 2
28869: PPUSH
28870: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28874: LD_VAR 0 2
28878: PPUSH
28879: LD_INT 9
28881: PPUSH
28882: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28886: LD_INT 28
28888: PPUSH
28889: LD_OWVAR 2
28893: PPUSH
28894: LD_INT 2
28896: PPUSH
28897: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28901: LD_INT 29
28903: PPUSH
28904: LD_OWVAR 2
28908: PPUSH
28909: LD_INT 2
28911: PPUSH
28912: CALL_OW 322
// end ;
28916: PPOPN 3
28918: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28919: LD_EXP 67
28923: PUSH
28924: LD_EXP 110
28928: AND
28929: IFFALSE 29040
28931: GO 28933
28933: DISABLE
28934: LD_INT 0
28936: PPUSH
28937: PPUSH
28938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28939: LD_ADDR_VAR 0 3
28943: PUSH
28944: LD_INT 22
28946: PUSH
28947: LD_OWVAR 2
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 25
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PPUSH
28970: CALL_OW 69
28974: ST_TO_ADDR
// if not tmp then
28975: LD_VAR 0 3
28979: NOT
28980: IFFALSE 28984
// exit ;
28982: GO 29040
// un := tmp [ rand ( 1 , tmp ) ] ;
28984: LD_ADDR_VAR 0 2
28988: PUSH
28989: LD_VAR 0 3
28993: PUSH
28994: LD_INT 1
28996: PPUSH
28997: LD_VAR 0 3
29001: PPUSH
29002: CALL_OW 12
29006: ARRAY
29007: ST_TO_ADDR
// if Crawls ( un ) then
29008: LD_VAR 0 2
29012: PPUSH
29013: CALL_OW 318
29017: IFFALSE 29028
// ComWalk ( un ) ;
29019: LD_VAR 0 2
29023: PPUSH
29024: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29028: LD_VAR 0 2
29032: PPUSH
29033: LD_INT 8
29035: PPUSH
29036: CALL_OW 336
// end ;
29040: PPOPN 3
29042: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29043: LD_EXP 67
29047: PUSH
29048: LD_EXP 111
29052: AND
29053: IFFALSE 29197
29055: GO 29057
29057: DISABLE
29058: LD_INT 0
29060: PPUSH
29061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29062: LD_ADDR_VAR 0 2
29066: PUSH
29067: LD_INT 22
29069: PUSH
29070: LD_OWVAR 2
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 21
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 2
29091: PUSH
29092: LD_INT 34
29094: PUSH
29095: LD_INT 12
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 34
29104: PUSH
29105: LD_INT 51
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 34
29114: PUSH
29115: LD_INT 32
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: PPUSH
29133: CALL_OW 69
29137: ST_TO_ADDR
// if not tmp then
29138: LD_VAR 0 2
29142: NOT
29143: IFFALSE 29147
// exit ;
29145: GO 29197
// for i in tmp do
29147: LD_ADDR_VAR 0 1
29151: PUSH
29152: LD_VAR 0 2
29156: PUSH
29157: FOR_IN
29158: IFFALSE 29195
// if GetCargo ( i , mat_artifact ) = 0 then
29160: LD_VAR 0 1
29164: PPUSH
29165: LD_INT 4
29167: PPUSH
29168: CALL_OW 289
29172: PUSH
29173: LD_INT 0
29175: EQUAL
29176: IFFALSE 29193
// SetCargo ( i , mat_siberit , 100 ) ;
29178: LD_VAR 0 1
29182: PPUSH
29183: LD_INT 3
29185: PPUSH
29186: LD_INT 100
29188: PPUSH
29189: CALL_OW 290
29193: GO 29157
29195: POP
29196: POP
// end ;
29197: PPOPN 2
29199: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29200: LD_EXP 67
29204: PUSH
29205: LD_EXP 112
29209: AND
29210: IFFALSE 29393
29212: GO 29214
29214: DISABLE
29215: LD_INT 0
29217: PPUSH
29218: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29219: LD_ADDR_VAR 0 2
29223: PUSH
29224: LD_INT 22
29226: PUSH
29227: LD_OWVAR 2
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PPUSH
29236: CALL_OW 69
29240: ST_TO_ADDR
// if not tmp then
29241: LD_VAR 0 2
29245: NOT
29246: IFFALSE 29250
// exit ;
29248: GO 29393
// for i := 1 to 2 do
29250: LD_ADDR_VAR 0 1
29254: PUSH
29255: DOUBLE
29256: LD_INT 1
29258: DEC
29259: ST_TO_ADDR
29260: LD_INT 2
29262: PUSH
29263: FOR_TO
29264: IFFALSE 29391
// begin uc_side := your_side ;
29266: LD_ADDR_OWVAR 20
29270: PUSH
29271: LD_OWVAR 2
29275: ST_TO_ADDR
// uc_nation := nation_american ;
29276: LD_ADDR_OWVAR 21
29280: PUSH
29281: LD_INT 1
29283: ST_TO_ADDR
// vc_chassis := us_morphling ;
29284: LD_ADDR_OWVAR 37
29288: PUSH
29289: LD_INT 5
29291: ST_TO_ADDR
// vc_engine := engine_siberite ;
29292: LD_ADDR_OWVAR 39
29296: PUSH
29297: LD_INT 3
29299: ST_TO_ADDR
// vc_control := control_computer ;
29300: LD_ADDR_OWVAR 38
29304: PUSH
29305: LD_INT 3
29307: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29308: LD_ADDR_OWVAR 40
29312: PUSH
29313: LD_INT 10
29315: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29316: LD_VAR 0 2
29320: PUSH
29321: LD_INT 1
29323: ARRAY
29324: PPUSH
29325: CALL_OW 310
29329: NOT
29330: IFFALSE 29377
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29332: CALL_OW 45
29336: PPUSH
29337: LD_VAR 0 2
29341: PUSH
29342: LD_INT 1
29344: ARRAY
29345: PPUSH
29346: CALL_OW 250
29350: PPUSH
29351: LD_VAR 0 2
29355: PUSH
29356: LD_INT 1
29358: ARRAY
29359: PPUSH
29360: CALL_OW 251
29364: PPUSH
29365: LD_INT 12
29367: PPUSH
29368: LD_INT 1
29370: PPUSH
29371: CALL_OW 50
29375: GO 29389
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29377: CALL_OW 45
29381: PPUSH
29382: LD_INT 1
29384: PPUSH
29385: CALL_OW 51
// end ;
29389: GO 29263
29391: POP
29392: POP
// end ;
29393: PPOPN 2
29395: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29396: LD_EXP 67
29400: PUSH
29401: LD_EXP 113
29405: AND
29406: IFFALSE 29628
29408: GO 29410
29410: DISABLE
29411: LD_INT 0
29413: PPUSH
29414: PPUSH
29415: PPUSH
29416: PPUSH
29417: PPUSH
29418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29419: LD_ADDR_VAR 0 6
29423: PUSH
29424: LD_INT 22
29426: PUSH
29427: LD_OWVAR 2
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 21
29438: PUSH
29439: LD_INT 1
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 3
29448: PUSH
29449: LD_INT 23
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: PPUSH
29468: CALL_OW 69
29472: ST_TO_ADDR
// if not tmp then
29473: LD_VAR 0 6
29477: NOT
29478: IFFALSE 29482
// exit ;
29480: GO 29628
// s1 := rand ( 1 , 4 ) ;
29482: LD_ADDR_VAR 0 2
29486: PUSH
29487: LD_INT 1
29489: PPUSH
29490: LD_INT 4
29492: PPUSH
29493: CALL_OW 12
29497: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29498: LD_ADDR_VAR 0 4
29502: PUSH
29503: LD_VAR 0 6
29507: PUSH
29508: LD_INT 1
29510: ARRAY
29511: PPUSH
29512: LD_VAR 0 2
29516: PPUSH
29517: CALL_OW 259
29521: ST_TO_ADDR
// if s1 = 1 then
29522: LD_VAR 0 2
29526: PUSH
29527: LD_INT 1
29529: EQUAL
29530: IFFALSE 29550
// s2 := rand ( 2 , 4 ) else
29532: LD_ADDR_VAR 0 3
29536: PUSH
29537: LD_INT 2
29539: PPUSH
29540: LD_INT 4
29542: PPUSH
29543: CALL_OW 12
29547: ST_TO_ADDR
29548: GO 29558
// s2 := 1 ;
29550: LD_ADDR_VAR 0 3
29554: PUSH
29555: LD_INT 1
29557: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29558: LD_ADDR_VAR 0 5
29562: PUSH
29563: LD_VAR 0 6
29567: PUSH
29568: LD_INT 1
29570: ARRAY
29571: PPUSH
29572: LD_VAR 0 3
29576: PPUSH
29577: CALL_OW 259
29581: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29582: LD_VAR 0 6
29586: PUSH
29587: LD_INT 1
29589: ARRAY
29590: PPUSH
29591: LD_VAR 0 2
29595: PPUSH
29596: LD_VAR 0 5
29600: PPUSH
29601: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29605: LD_VAR 0 6
29609: PUSH
29610: LD_INT 1
29612: ARRAY
29613: PPUSH
29614: LD_VAR 0 3
29618: PPUSH
29619: LD_VAR 0 4
29623: PPUSH
29624: CALL_OW 237
// end ;
29628: PPOPN 6
29630: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29631: LD_EXP 67
29635: PUSH
29636: LD_EXP 114
29640: AND
29641: IFFALSE 29720
29643: GO 29645
29645: DISABLE
29646: LD_INT 0
29648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29649: LD_ADDR_VAR 0 1
29653: PUSH
29654: LD_INT 22
29656: PUSH
29657: LD_OWVAR 2
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 30
29668: PUSH
29669: LD_INT 3
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PPUSH
29680: CALL_OW 69
29684: ST_TO_ADDR
// if not tmp then
29685: LD_VAR 0 1
29689: NOT
29690: IFFALSE 29694
// exit ;
29692: GO 29720
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29694: LD_VAR 0 1
29698: PUSH
29699: LD_INT 1
29701: PPUSH
29702: LD_VAR 0 1
29706: PPUSH
29707: CALL_OW 12
29711: ARRAY
29712: PPUSH
29713: LD_INT 1
29715: PPUSH
29716: CALL_OW 234
// end ;
29720: PPOPN 1
29722: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29723: LD_EXP 67
29727: PUSH
29728: LD_EXP 115
29732: AND
29733: IFFALSE 29845
29735: GO 29737
29737: DISABLE
29738: LD_INT 0
29740: PPUSH
29741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29742: LD_ADDR_VAR 0 2
29746: PUSH
29747: LD_INT 22
29749: PUSH
29750: LD_OWVAR 2
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 2
29761: PUSH
29762: LD_INT 30
29764: PUSH
29765: LD_INT 27
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 30
29774: PUSH
29775: LD_INT 26
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 30
29784: PUSH
29785: LD_INT 28
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PPUSH
29802: CALL_OW 69
29806: ST_TO_ADDR
// if not tmp then
29807: LD_VAR 0 2
29811: NOT
29812: IFFALSE 29816
// exit ;
29814: GO 29845
// for i in tmp do
29816: LD_ADDR_VAR 0 1
29820: PUSH
29821: LD_VAR 0 2
29825: PUSH
29826: FOR_IN
29827: IFFALSE 29843
// SetLives ( i , 1 ) ;
29829: LD_VAR 0 1
29833: PPUSH
29834: LD_INT 1
29836: PPUSH
29837: CALL_OW 234
29841: GO 29826
29843: POP
29844: POP
// end ;
29845: PPOPN 2
29847: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29848: LD_EXP 67
29852: PUSH
29853: LD_EXP 116
29857: AND
29858: IFFALSE 30132
29860: GO 29862
29862: DISABLE
29863: LD_INT 0
29865: PPUSH
29866: PPUSH
29867: PPUSH
// begin i := rand ( 1 , 7 ) ;
29868: LD_ADDR_VAR 0 1
29872: PUSH
29873: LD_INT 1
29875: PPUSH
29876: LD_INT 7
29878: PPUSH
29879: CALL_OW 12
29883: ST_TO_ADDR
// case i of 1 :
29884: LD_VAR 0 1
29888: PUSH
29889: LD_INT 1
29891: DOUBLE
29892: EQUAL
29893: IFTRUE 29897
29895: GO 29907
29897: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29898: LD_STRING earthquake(getX(game), 0, 32)
29900: PPUSH
29901: CALL_OW 559
29905: GO 30132
29907: LD_INT 2
29909: DOUBLE
29910: EQUAL
29911: IFTRUE 29915
29913: GO 29929
29915: POP
// begin ToLua ( displayStucuk(); ) ;
29916: LD_STRING displayStucuk();
29918: PPUSH
29919: CALL_OW 559
// ResetFog ;
29923: CALL_OW 335
// end ; 3 :
29927: GO 30132
29929: LD_INT 3
29931: DOUBLE
29932: EQUAL
29933: IFTRUE 29937
29935: GO 30041
29937: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29938: LD_ADDR_VAR 0 2
29942: PUSH
29943: LD_INT 22
29945: PUSH
29946: LD_OWVAR 2
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 25
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PPUSH
29969: CALL_OW 69
29973: ST_TO_ADDR
// if not tmp then
29974: LD_VAR 0 2
29978: NOT
29979: IFFALSE 29983
// exit ;
29981: GO 30132
// un := tmp [ rand ( 1 , tmp ) ] ;
29983: LD_ADDR_VAR 0 3
29987: PUSH
29988: LD_VAR 0 2
29992: PUSH
29993: LD_INT 1
29995: PPUSH
29996: LD_VAR 0 2
30000: PPUSH
30001: CALL_OW 12
30005: ARRAY
30006: ST_TO_ADDR
// if Crawls ( un ) then
30007: LD_VAR 0 3
30011: PPUSH
30012: CALL_OW 318
30016: IFFALSE 30027
// ComWalk ( un ) ;
30018: LD_VAR 0 3
30022: PPUSH
30023: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30027: LD_VAR 0 3
30031: PPUSH
30032: LD_INT 8
30034: PPUSH
30035: CALL_OW 336
// end ; 4 :
30039: GO 30132
30041: LD_INT 4
30043: DOUBLE
30044: EQUAL
30045: IFTRUE 30049
30047: GO 30110
30049: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30050: LD_ADDR_VAR 0 2
30054: PUSH
30055: LD_INT 22
30057: PUSH
30058: LD_OWVAR 2
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 30
30069: PUSH
30070: LD_INT 29
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PPUSH
30081: CALL_OW 69
30085: ST_TO_ADDR
// if not tmp then
30086: LD_VAR 0 2
30090: NOT
30091: IFFALSE 30095
// exit ;
30093: GO 30132
// DestroyUnit ( tmp [ 1 ] ) ;
30095: LD_VAR 0 2
30099: PUSH
30100: LD_INT 1
30102: ARRAY
30103: PPUSH
30104: CALL_OW 65
// end ; 5 .. 7 :
30108: GO 30132
30110: LD_INT 5
30112: DOUBLE
30113: GREATEREQUAL
30114: IFFALSE 30122
30116: LD_INT 7
30118: DOUBLE
30119: LESSEQUAL
30120: IFTRUE 30124
30122: GO 30131
30124: POP
// StreamSibBomb ; end ;
30125: CALL 26382 0 0
30129: GO 30132
30131: POP
// end ;
30132: PPOPN 3
30134: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30135: LD_EXP 67
30139: PUSH
30140: LD_EXP 117
30144: AND
30145: IFFALSE 30301
30147: GO 30149
30149: DISABLE
30150: LD_INT 0
30152: PPUSH
30153: PPUSH
30154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30155: LD_ADDR_VAR 0 2
30159: PUSH
30160: LD_INT 81
30162: PUSH
30163: LD_OWVAR 2
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 2
30174: PUSH
30175: LD_INT 21
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 21
30187: PUSH
30188: LD_INT 2
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: LIST
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PPUSH
30204: CALL_OW 69
30208: ST_TO_ADDR
// if not tmp then
30209: LD_VAR 0 2
30213: NOT
30214: IFFALSE 30218
// exit ;
30216: GO 30301
// p := 0 ;
30218: LD_ADDR_VAR 0 3
30222: PUSH
30223: LD_INT 0
30225: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30226: LD_INT 35
30228: PPUSH
30229: CALL_OW 67
// p := p + 1 ;
30233: LD_ADDR_VAR 0 3
30237: PUSH
30238: LD_VAR 0 3
30242: PUSH
30243: LD_INT 1
30245: PLUS
30246: ST_TO_ADDR
// for i in tmp do
30247: LD_ADDR_VAR 0 1
30251: PUSH
30252: LD_VAR 0 2
30256: PUSH
30257: FOR_IN
30258: IFFALSE 30289
// if GetLives ( i ) < 1000 then
30260: LD_VAR 0 1
30264: PPUSH
30265: CALL_OW 256
30269: PUSH
30270: LD_INT 1000
30272: LESS
30273: IFFALSE 30287
// SetLives ( i , 1000 ) ;
30275: LD_VAR 0 1
30279: PPUSH
30280: LD_INT 1000
30282: PPUSH
30283: CALL_OW 234
30287: GO 30257
30289: POP
30290: POP
// until p > 20 ;
30291: LD_VAR 0 3
30295: PUSH
30296: LD_INT 20
30298: GREATER
30299: IFFALSE 30226
// end ;
30301: PPOPN 3
30303: END
// every 0 0$1 trigger StreamModeActive and sTime do
30304: LD_EXP 67
30308: PUSH
30309: LD_EXP 118
30313: AND
30314: IFFALSE 30349
30316: GO 30318
30318: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30319: LD_INT 28
30321: PPUSH
30322: LD_OWVAR 2
30326: PPUSH
30327: LD_INT 2
30329: PPUSH
30330: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30334: LD_INT 30
30336: PPUSH
30337: LD_OWVAR 2
30341: PPUSH
30342: LD_INT 2
30344: PPUSH
30345: CALL_OW 322
// end ;
30349: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30350: LD_EXP 67
30354: PUSH
30355: LD_EXP 119
30359: AND
30360: IFFALSE 30481
30362: GO 30364
30364: DISABLE
30365: LD_INT 0
30367: PPUSH
30368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30369: LD_ADDR_VAR 0 2
30373: PUSH
30374: LD_INT 22
30376: PUSH
30377: LD_OWVAR 2
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 21
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 3
30398: PUSH
30399: LD_INT 23
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: PPUSH
30418: CALL_OW 69
30422: ST_TO_ADDR
// if not tmp then
30423: LD_VAR 0 2
30427: NOT
30428: IFFALSE 30432
// exit ;
30430: GO 30481
// for i in tmp do
30432: LD_ADDR_VAR 0 1
30436: PUSH
30437: LD_VAR 0 2
30441: PUSH
30442: FOR_IN
30443: IFFALSE 30479
// begin if Crawls ( i ) then
30445: LD_VAR 0 1
30449: PPUSH
30450: CALL_OW 318
30454: IFFALSE 30465
// ComWalk ( i ) ;
30456: LD_VAR 0 1
30460: PPUSH
30461: CALL_OW 138
// SetClass ( i , 2 ) ;
30465: LD_VAR 0 1
30469: PPUSH
30470: LD_INT 2
30472: PPUSH
30473: CALL_OW 336
// end ;
30477: GO 30442
30479: POP
30480: POP
// end ;
30481: PPOPN 2
30483: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30484: LD_EXP 67
30488: PUSH
30489: LD_EXP 120
30493: AND
30494: IFFALSE 30775
30496: GO 30498
30498: DISABLE
30499: LD_INT 0
30501: PPUSH
30502: PPUSH
30503: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30504: LD_OWVAR 2
30508: PPUSH
30509: LD_INT 9
30511: PPUSH
30512: LD_INT 1
30514: PPUSH
30515: LD_INT 1
30517: PPUSH
30518: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30522: LD_INT 9
30524: PPUSH
30525: LD_OWVAR 2
30529: PPUSH
30530: CALL_OW 343
// uc_side := 9 ;
30534: LD_ADDR_OWVAR 20
30538: PUSH
30539: LD_INT 9
30541: ST_TO_ADDR
// uc_nation := 2 ;
30542: LD_ADDR_OWVAR 21
30546: PUSH
30547: LD_INT 2
30549: ST_TO_ADDR
// hc_name := Dark Warrior ;
30550: LD_ADDR_OWVAR 26
30554: PUSH
30555: LD_STRING Dark Warrior
30557: ST_TO_ADDR
// hc_gallery :=  ;
30558: LD_ADDR_OWVAR 33
30562: PUSH
30563: LD_STRING 
30565: ST_TO_ADDR
// hc_noskilllimit := true ;
30566: LD_ADDR_OWVAR 76
30570: PUSH
30571: LD_INT 1
30573: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30574: LD_ADDR_OWVAR 31
30578: PUSH
30579: LD_INT 30
30581: PUSH
30582: LD_INT 30
30584: PUSH
30585: LD_INT 30
30587: PUSH
30588: LD_INT 30
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: ST_TO_ADDR
// un := CreateHuman ;
30597: LD_ADDR_VAR 0 3
30601: PUSH
30602: CALL_OW 44
30606: ST_TO_ADDR
// hc_noskilllimit := false ;
30607: LD_ADDR_OWVAR 76
30611: PUSH
30612: LD_INT 0
30614: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30615: LD_VAR 0 3
30619: PPUSH
30620: LD_INT 1
30622: PPUSH
30623: CALL_OW 51
// p := 0 ;
30627: LD_ADDR_VAR 0 2
30631: PUSH
30632: LD_INT 0
30634: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30635: LD_INT 35
30637: PPUSH
30638: CALL_OW 67
// p := p + 1 ;
30642: LD_ADDR_VAR 0 2
30646: PUSH
30647: LD_VAR 0 2
30651: PUSH
30652: LD_INT 1
30654: PLUS
30655: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30656: LD_VAR 0 3
30660: PPUSH
30661: CALL_OW 256
30665: PUSH
30666: LD_INT 1000
30668: LESS
30669: IFFALSE 30683
// SetLives ( un , 1000 ) ;
30671: LD_VAR 0 3
30675: PPUSH
30676: LD_INT 1000
30678: PPUSH
30679: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30683: LD_VAR 0 3
30687: PPUSH
30688: LD_INT 81
30690: PUSH
30691: LD_OWVAR 2
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 91
30702: PUSH
30703: LD_VAR 0 3
30707: PUSH
30708: LD_INT 30
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: LIST
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PPUSH
30720: CALL_OW 69
30724: PPUSH
30725: LD_VAR 0 3
30729: PPUSH
30730: CALL_OW 74
30734: PPUSH
30735: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30739: LD_VAR 0 2
30743: PUSH
30744: LD_INT 60
30746: GREATER
30747: PUSH
30748: LD_VAR 0 3
30752: PPUSH
30753: CALL_OW 301
30757: OR
30758: IFFALSE 30635
// if un then
30760: LD_VAR 0 3
30764: IFFALSE 30775
// RemoveUnit ( un ) ;
30766: LD_VAR 0 3
30770: PPUSH
30771: CALL_OW 64
// end ;
30775: PPOPN 3
30777: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30778: LD_INT 0
30780: PPUSH
// case cmd of 301 :
30781: LD_VAR 0 1
30785: PUSH
30786: LD_INT 301
30788: DOUBLE
30789: EQUAL
30790: IFTRUE 30794
30792: GO 30826
30794: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30795: LD_VAR 0 6
30799: PPUSH
30800: LD_VAR 0 7
30804: PPUSH
30805: LD_VAR 0 8
30809: PPUSH
30810: LD_VAR 0 4
30814: PPUSH
30815: LD_VAR 0 5
30819: PPUSH
30820: CALL 32027 0 5
30824: GO 30947
30826: LD_INT 302
30828: DOUBLE
30829: EQUAL
30830: IFTRUE 30834
30832: GO 30871
30834: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30835: LD_VAR 0 6
30839: PPUSH
30840: LD_VAR 0 7
30844: PPUSH
30845: LD_VAR 0 8
30849: PPUSH
30850: LD_VAR 0 9
30854: PPUSH
30855: LD_VAR 0 4
30859: PPUSH
30860: LD_VAR 0 5
30864: PPUSH
30865: CALL 32118 0 6
30869: GO 30947
30871: LD_INT 303
30873: DOUBLE
30874: EQUAL
30875: IFTRUE 30879
30877: GO 30916
30879: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30880: LD_VAR 0 6
30884: PPUSH
30885: LD_VAR 0 7
30889: PPUSH
30890: LD_VAR 0 8
30894: PPUSH
30895: LD_VAR 0 9
30899: PPUSH
30900: LD_VAR 0 4
30904: PPUSH
30905: LD_VAR 0 5
30909: PPUSH
30910: CALL 30952 0 6
30914: GO 30947
30916: LD_INT 304
30918: DOUBLE
30919: EQUAL
30920: IFTRUE 30924
30922: GO 30946
30924: POP
// hHackTeleport ( unit , x , y ) ; end ;
30925: LD_VAR 0 2
30929: PPUSH
30930: LD_VAR 0 4
30934: PPUSH
30935: LD_VAR 0 5
30939: PPUSH
30940: CALL 32711 0 3
30944: GO 30947
30946: POP
// end ;
30947: LD_VAR 0 12
30951: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30952: LD_INT 0
30954: PPUSH
30955: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30956: LD_VAR 0 1
30960: PUSH
30961: LD_INT 1
30963: LESS
30964: PUSH
30965: LD_VAR 0 1
30969: PUSH
30970: LD_INT 3
30972: GREATER
30973: OR
30974: PUSH
30975: LD_VAR 0 5
30979: PPUSH
30980: LD_VAR 0 6
30984: PPUSH
30985: CALL_OW 428
30989: OR
30990: IFFALSE 30994
// exit ;
30992: GO 31714
// uc_side := your_side ;
30994: LD_ADDR_OWVAR 20
30998: PUSH
30999: LD_OWVAR 2
31003: ST_TO_ADDR
// uc_nation := nation ;
31004: LD_ADDR_OWVAR 21
31008: PUSH
31009: LD_VAR 0 1
31013: ST_TO_ADDR
// bc_level = 1 ;
31014: LD_ADDR_OWVAR 43
31018: PUSH
31019: LD_INT 1
31021: ST_TO_ADDR
// case btype of 1 :
31022: LD_VAR 0 2
31026: PUSH
31027: LD_INT 1
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31035
31033: GO 31046
31035: POP
// bc_type := b_depot ; 2 :
31036: LD_ADDR_OWVAR 42
31040: PUSH
31041: LD_INT 0
31043: ST_TO_ADDR
31044: GO 31658
31046: LD_INT 2
31048: DOUBLE
31049: EQUAL
31050: IFTRUE 31054
31052: GO 31065
31054: POP
// bc_type := b_warehouse ; 3 :
31055: LD_ADDR_OWVAR 42
31059: PUSH
31060: LD_INT 1
31062: ST_TO_ADDR
31063: GO 31658
31065: LD_INT 3
31067: DOUBLE
31068: EQUAL
31069: IFTRUE 31073
31071: GO 31084
31073: POP
// bc_type := b_lab ; 4 .. 9 :
31074: LD_ADDR_OWVAR 42
31078: PUSH
31079: LD_INT 6
31081: ST_TO_ADDR
31082: GO 31658
31084: LD_INT 4
31086: DOUBLE
31087: GREATEREQUAL
31088: IFFALSE 31096
31090: LD_INT 9
31092: DOUBLE
31093: LESSEQUAL
31094: IFTRUE 31098
31096: GO 31150
31098: POP
// begin bc_type := b_lab_half ;
31099: LD_ADDR_OWVAR 42
31103: PUSH
31104: LD_INT 7
31106: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31107: LD_ADDR_OWVAR 44
31111: PUSH
31112: LD_INT 10
31114: PUSH
31115: LD_INT 11
31117: PUSH
31118: LD_INT 12
31120: PUSH
31121: LD_INT 15
31123: PUSH
31124: LD_INT 14
31126: PUSH
31127: LD_INT 13
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: PUSH
31138: LD_VAR 0 2
31142: PUSH
31143: LD_INT 3
31145: MINUS
31146: ARRAY
31147: ST_TO_ADDR
// end ; 10 .. 13 :
31148: GO 31658
31150: LD_INT 10
31152: DOUBLE
31153: GREATEREQUAL
31154: IFFALSE 31162
31156: LD_INT 13
31158: DOUBLE
31159: LESSEQUAL
31160: IFTRUE 31164
31162: GO 31241
31164: POP
// begin bc_type := b_lab_full ;
31165: LD_ADDR_OWVAR 42
31169: PUSH
31170: LD_INT 8
31172: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31173: LD_ADDR_OWVAR 44
31177: PUSH
31178: LD_INT 10
31180: PUSH
31181: LD_INT 12
31183: PUSH
31184: LD_INT 14
31186: PUSH
31187: LD_INT 13
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: PUSH
31196: LD_VAR 0 2
31200: PUSH
31201: LD_INT 9
31203: MINUS
31204: ARRAY
31205: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31206: LD_ADDR_OWVAR 45
31210: PUSH
31211: LD_INT 11
31213: PUSH
31214: LD_INT 15
31216: PUSH
31217: LD_INT 12
31219: PUSH
31220: LD_INT 15
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: PUSH
31229: LD_VAR 0 2
31233: PUSH
31234: LD_INT 9
31236: MINUS
31237: ARRAY
31238: ST_TO_ADDR
// end ; 14 :
31239: GO 31658
31241: LD_INT 14
31243: DOUBLE
31244: EQUAL
31245: IFTRUE 31249
31247: GO 31260
31249: POP
// bc_type := b_workshop ; 15 :
31250: LD_ADDR_OWVAR 42
31254: PUSH
31255: LD_INT 2
31257: ST_TO_ADDR
31258: GO 31658
31260: LD_INT 15
31262: DOUBLE
31263: EQUAL
31264: IFTRUE 31268
31266: GO 31279
31268: POP
// bc_type := b_factory ; 16 :
31269: LD_ADDR_OWVAR 42
31273: PUSH
31274: LD_INT 3
31276: ST_TO_ADDR
31277: GO 31658
31279: LD_INT 16
31281: DOUBLE
31282: EQUAL
31283: IFTRUE 31287
31285: GO 31298
31287: POP
// bc_type := b_ext_gun ; 17 :
31288: LD_ADDR_OWVAR 42
31292: PUSH
31293: LD_INT 17
31295: ST_TO_ADDR
31296: GO 31658
31298: LD_INT 17
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31334
31306: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31307: LD_ADDR_OWVAR 42
31311: PUSH
31312: LD_INT 19
31314: PUSH
31315: LD_INT 23
31317: PUSH
31318: LD_INT 19
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: PUSH
31326: LD_VAR 0 1
31330: ARRAY
31331: ST_TO_ADDR
31332: GO 31658
31334: LD_INT 18
31336: DOUBLE
31337: EQUAL
31338: IFTRUE 31342
31340: GO 31353
31342: POP
// bc_type := b_ext_radar ; 19 :
31343: LD_ADDR_OWVAR 42
31347: PUSH
31348: LD_INT 20
31350: ST_TO_ADDR
31351: GO 31658
31353: LD_INT 19
31355: DOUBLE
31356: EQUAL
31357: IFTRUE 31361
31359: GO 31372
31361: POP
// bc_type := b_ext_radio ; 20 :
31362: LD_ADDR_OWVAR 42
31366: PUSH
31367: LD_INT 22
31369: ST_TO_ADDR
31370: GO 31658
31372: LD_INT 20
31374: DOUBLE
31375: EQUAL
31376: IFTRUE 31380
31378: GO 31391
31380: POP
// bc_type := b_ext_siberium ; 21 :
31381: LD_ADDR_OWVAR 42
31385: PUSH
31386: LD_INT 21
31388: ST_TO_ADDR
31389: GO 31658
31391: LD_INT 21
31393: DOUBLE
31394: EQUAL
31395: IFTRUE 31399
31397: GO 31410
31399: POP
// bc_type := b_ext_computer ; 22 :
31400: LD_ADDR_OWVAR 42
31404: PUSH
31405: LD_INT 24
31407: ST_TO_ADDR
31408: GO 31658
31410: LD_INT 22
31412: DOUBLE
31413: EQUAL
31414: IFTRUE 31418
31416: GO 31429
31418: POP
// bc_type := b_ext_track ; 23 :
31419: LD_ADDR_OWVAR 42
31423: PUSH
31424: LD_INT 16
31426: ST_TO_ADDR
31427: GO 31658
31429: LD_INT 23
31431: DOUBLE
31432: EQUAL
31433: IFTRUE 31437
31435: GO 31448
31437: POP
// bc_type := b_ext_laser ; 24 :
31438: LD_ADDR_OWVAR 42
31442: PUSH
31443: LD_INT 25
31445: ST_TO_ADDR
31446: GO 31658
31448: LD_INT 24
31450: DOUBLE
31451: EQUAL
31452: IFTRUE 31456
31454: GO 31467
31456: POP
// bc_type := b_control_tower ; 25 :
31457: LD_ADDR_OWVAR 42
31461: PUSH
31462: LD_INT 36
31464: ST_TO_ADDR
31465: GO 31658
31467: LD_INT 25
31469: DOUBLE
31470: EQUAL
31471: IFTRUE 31475
31473: GO 31486
31475: POP
// bc_type := b_breastwork ; 26 :
31476: LD_ADDR_OWVAR 42
31480: PUSH
31481: LD_INT 31
31483: ST_TO_ADDR
31484: GO 31658
31486: LD_INT 26
31488: DOUBLE
31489: EQUAL
31490: IFTRUE 31494
31492: GO 31505
31494: POP
// bc_type := b_bunker ; 27 :
31495: LD_ADDR_OWVAR 42
31499: PUSH
31500: LD_INT 32
31502: ST_TO_ADDR
31503: GO 31658
31505: LD_INT 27
31507: DOUBLE
31508: EQUAL
31509: IFTRUE 31513
31511: GO 31524
31513: POP
// bc_type := b_turret ; 28 :
31514: LD_ADDR_OWVAR 42
31518: PUSH
31519: LD_INT 33
31521: ST_TO_ADDR
31522: GO 31658
31524: LD_INT 28
31526: DOUBLE
31527: EQUAL
31528: IFTRUE 31532
31530: GO 31543
31532: POP
// bc_type := b_armoury ; 29 :
31533: LD_ADDR_OWVAR 42
31537: PUSH
31538: LD_INT 4
31540: ST_TO_ADDR
31541: GO 31658
31543: LD_INT 29
31545: DOUBLE
31546: EQUAL
31547: IFTRUE 31551
31549: GO 31562
31551: POP
// bc_type := b_barracks ; 30 :
31552: LD_ADDR_OWVAR 42
31556: PUSH
31557: LD_INT 5
31559: ST_TO_ADDR
31560: GO 31658
31562: LD_INT 30
31564: DOUBLE
31565: EQUAL
31566: IFTRUE 31570
31568: GO 31581
31570: POP
// bc_type := b_solar_power ; 31 :
31571: LD_ADDR_OWVAR 42
31575: PUSH
31576: LD_INT 27
31578: ST_TO_ADDR
31579: GO 31658
31581: LD_INT 31
31583: DOUBLE
31584: EQUAL
31585: IFTRUE 31589
31587: GO 31600
31589: POP
// bc_type := b_oil_power ; 32 :
31590: LD_ADDR_OWVAR 42
31594: PUSH
31595: LD_INT 26
31597: ST_TO_ADDR
31598: GO 31658
31600: LD_INT 32
31602: DOUBLE
31603: EQUAL
31604: IFTRUE 31608
31606: GO 31619
31608: POP
// bc_type := b_siberite_power ; 33 :
31609: LD_ADDR_OWVAR 42
31613: PUSH
31614: LD_INT 28
31616: ST_TO_ADDR
31617: GO 31658
31619: LD_INT 33
31621: DOUBLE
31622: EQUAL
31623: IFTRUE 31627
31625: GO 31638
31627: POP
// bc_type := b_oil_mine ; 34 :
31628: LD_ADDR_OWVAR 42
31632: PUSH
31633: LD_INT 29
31635: ST_TO_ADDR
31636: GO 31658
31638: LD_INT 34
31640: DOUBLE
31641: EQUAL
31642: IFTRUE 31646
31644: GO 31657
31646: POP
// bc_type := b_siberite_mine ; end ;
31647: LD_ADDR_OWVAR 42
31651: PUSH
31652: LD_INT 30
31654: ST_TO_ADDR
31655: GO 31658
31657: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31658: LD_ADDR_VAR 0 8
31662: PUSH
31663: LD_VAR 0 5
31667: PPUSH
31668: LD_VAR 0 6
31672: PPUSH
31673: LD_VAR 0 3
31677: PPUSH
31678: CALL_OW 47
31682: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31683: LD_OWVAR 42
31687: PUSH
31688: LD_INT 32
31690: PUSH
31691: LD_INT 33
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: IN
31698: IFFALSE 31714
// PlaceWeaponTurret ( b , weapon ) ;
31700: LD_VAR 0 8
31704: PPUSH
31705: LD_VAR 0 4
31709: PPUSH
31710: CALL_OW 431
// end ;
31714: LD_VAR 0 7
31718: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31719: LD_INT 0
31721: PPUSH
31722: PPUSH
31723: PPUSH
31724: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31725: LD_ADDR_VAR 0 4
31729: PUSH
31730: LD_INT 22
31732: PUSH
31733: LD_OWVAR 2
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: LD_INT 30
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 30
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PPUSH
31774: CALL_OW 69
31778: ST_TO_ADDR
// if not tmp then
31779: LD_VAR 0 4
31783: NOT
31784: IFFALSE 31788
// exit ;
31786: GO 31847
// for i in tmp do
31788: LD_ADDR_VAR 0 2
31792: PUSH
31793: LD_VAR 0 4
31797: PUSH
31798: FOR_IN
31799: IFFALSE 31845
// for j = 1 to 3 do
31801: LD_ADDR_VAR 0 3
31805: PUSH
31806: DOUBLE
31807: LD_INT 1
31809: DEC
31810: ST_TO_ADDR
31811: LD_INT 3
31813: PUSH
31814: FOR_TO
31815: IFFALSE 31841
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31817: LD_VAR 0 2
31821: PPUSH
31822: CALL_OW 274
31826: PPUSH
31827: LD_VAR 0 3
31831: PPUSH
31832: LD_INT 99999
31834: PPUSH
31835: CALL_OW 277
31839: GO 31814
31841: POP
31842: POP
31843: GO 31798
31845: POP
31846: POP
// end ;
31847: LD_VAR 0 1
31851: RET
// export function hHackSetLevel10 ; var i , j ; begin
31852: LD_INT 0
31854: PPUSH
31855: PPUSH
31856: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31857: LD_ADDR_VAR 0 2
31861: PUSH
31862: LD_INT 21
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PPUSH
31872: CALL_OW 69
31876: PUSH
31877: FOR_IN
31878: IFFALSE 31930
// if IsSelected ( i ) then
31880: LD_VAR 0 2
31884: PPUSH
31885: CALL_OW 306
31889: IFFALSE 31928
// begin for j := 1 to 4 do
31891: LD_ADDR_VAR 0 3
31895: PUSH
31896: DOUBLE
31897: LD_INT 1
31899: DEC
31900: ST_TO_ADDR
31901: LD_INT 4
31903: PUSH
31904: FOR_TO
31905: IFFALSE 31926
// SetSkill ( i , j , 10 ) ;
31907: LD_VAR 0 2
31911: PPUSH
31912: LD_VAR 0 3
31916: PPUSH
31917: LD_INT 10
31919: PPUSH
31920: CALL_OW 237
31924: GO 31904
31926: POP
31927: POP
// end ;
31928: GO 31877
31930: POP
31931: POP
// end ;
31932: LD_VAR 0 1
31936: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31937: LD_INT 0
31939: PPUSH
31940: PPUSH
31941: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31942: LD_ADDR_VAR 0 2
31946: PUSH
31947: LD_INT 22
31949: PUSH
31950: LD_OWVAR 2
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 21
31961: PUSH
31962: LD_INT 1
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PPUSH
31973: CALL_OW 69
31977: PUSH
31978: FOR_IN
31979: IFFALSE 32020
// begin for j := 1 to 4 do
31981: LD_ADDR_VAR 0 3
31985: PUSH
31986: DOUBLE
31987: LD_INT 1
31989: DEC
31990: ST_TO_ADDR
31991: LD_INT 4
31993: PUSH
31994: FOR_TO
31995: IFFALSE 32016
// SetSkill ( i , j , 10 ) ;
31997: LD_VAR 0 2
32001: PPUSH
32002: LD_VAR 0 3
32006: PPUSH
32007: LD_INT 10
32009: PPUSH
32010: CALL_OW 237
32014: GO 31994
32016: POP
32017: POP
// end ;
32018: GO 31978
32020: POP
32021: POP
// end ;
32022: LD_VAR 0 1
32026: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32027: LD_INT 0
32029: PPUSH
// uc_side := your_side ;
32030: LD_ADDR_OWVAR 20
32034: PUSH
32035: LD_OWVAR 2
32039: ST_TO_ADDR
// uc_nation := nation ;
32040: LD_ADDR_OWVAR 21
32044: PUSH
32045: LD_VAR 0 1
32049: ST_TO_ADDR
// InitHc ;
32050: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32054: LD_INT 0
32056: PPUSH
32057: LD_VAR 0 2
32061: PPUSH
32062: LD_VAR 0 3
32066: PPUSH
32067: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32071: LD_VAR 0 4
32075: PPUSH
32076: LD_VAR 0 5
32080: PPUSH
32081: CALL_OW 428
32085: PUSH
32086: LD_INT 0
32088: EQUAL
32089: IFFALSE 32113
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32091: CALL_OW 44
32095: PPUSH
32096: LD_VAR 0 4
32100: PPUSH
32101: LD_VAR 0 5
32105: PPUSH
32106: LD_INT 1
32108: PPUSH
32109: CALL_OW 48
// end ;
32113: LD_VAR 0 6
32117: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32118: LD_INT 0
32120: PPUSH
32121: PPUSH
// uc_side := your_side ;
32122: LD_ADDR_OWVAR 20
32126: PUSH
32127: LD_OWVAR 2
32131: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32132: LD_VAR 0 1
32136: PUSH
32137: LD_INT 1
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: LD_INT 3
32145: PUSH
32146: LD_INT 4
32148: PUSH
32149: LD_INT 5
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: IN
32159: IFFALSE 32171
// uc_nation := nation_american else
32161: LD_ADDR_OWVAR 21
32165: PUSH
32166: LD_INT 1
32168: ST_TO_ADDR
32169: GO 32214
// if chassis in [ 11 , 12 , 13 , 14 ] then
32171: LD_VAR 0 1
32175: PUSH
32176: LD_INT 11
32178: PUSH
32179: LD_INT 12
32181: PUSH
32182: LD_INT 13
32184: PUSH
32185: LD_INT 14
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: IN
32194: IFFALSE 32206
// uc_nation := nation_arabian else
32196: LD_ADDR_OWVAR 21
32200: PUSH
32201: LD_INT 2
32203: ST_TO_ADDR
32204: GO 32214
// uc_nation := nation_russian ;
32206: LD_ADDR_OWVAR 21
32210: PUSH
32211: LD_INT 3
32213: ST_TO_ADDR
// vc_chassis := chassis ;
32214: LD_ADDR_OWVAR 37
32218: PUSH
32219: LD_VAR 0 1
32223: ST_TO_ADDR
// vc_engine := engine ;
32224: LD_ADDR_OWVAR 39
32228: PUSH
32229: LD_VAR 0 2
32233: ST_TO_ADDR
// vc_control := control ;
32234: LD_ADDR_OWVAR 38
32238: PUSH
32239: LD_VAR 0 3
32243: ST_TO_ADDR
// vc_weapon := weapon ;
32244: LD_ADDR_OWVAR 40
32248: PUSH
32249: LD_VAR 0 4
32253: ST_TO_ADDR
// un := CreateVehicle ;
32254: LD_ADDR_VAR 0 8
32258: PUSH
32259: CALL_OW 45
32263: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32264: LD_VAR 0 8
32268: PPUSH
32269: LD_INT 0
32271: PPUSH
32272: LD_INT 5
32274: PPUSH
32275: CALL_OW 12
32279: PPUSH
32280: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32284: LD_VAR 0 8
32288: PPUSH
32289: LD_VAR 0 5
32293: PPUSH
32294: LD_VAR 0 6
32298: PPUSH
32299: LD_INT 1
32301: PPUSH
32302: CALL_OW 48
// end ;
32306: LD_VAR 0 7
32310: RET
// export hInvincible ; every 1 do
32311: GO 32313
32313: DISABLE
// hInvincible := [ ] ;
32314: LD_ADDR_EXP 121
32318: PUSH
32319: EMPTY
32320: ST_TO_ADDR
32321: END
// every 10 do var i ;
32322: GO 32324
32324: DISABLE
32325: LD_INT 0
32327: PPUSH
// begin enable ;
32328: ENABLE
// if not hInvincible then
32329: LD_EXP 121
32333: NOT
32334: IFFALSE 32338
// exit ;
32336: GO 32382
// for i in hInvincible do
32338: LD_ADDR_VAR 0 1
32342: PUSH
32343: LD_EXP 121
32347: PUSH
32348: FOR_IN
32349: IFFALSE 32380
// if GetLives ( i ) < 1000 then
32351: LD_VAR 0 1
32355: PPUSH
32356: CALL_OW 256
32360: PUSH
32361: LD_INT 1000
32363: LESS
32364: IFFALSE 32378
// SetLives ( i , 1000 ) ;
32366: LD_VAR 0 1
32370: PPUSH
32371: LD_INT 1000
32373: PPUSH
32374: CALL_OW 234
32378: GO 32348
32380: POP
32381: POP
// end ;
32382: PPOPN 1
32384: END
// export function hHackInvincible ; var i ; begin
32385: LD_INT 0
32387: PPUSH
32388: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32389: LD_ADDR_VAR 0 2
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: LD_INT 21
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 21
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: PPUSH
32422: CALL_OW 69
32426: PUSH
32427: FOR_IN
32428: IFFALSE 32489
// if IsSelected ( i ) then
32430: LD_VAR 0 2
32434: PPUSH
32435: CALL_OW 306
32439: IFFALSE 32487
// begin if i in hInvincible then
32441: LD_VAR 0 2
32445: PUSH
32446: LD_EXP 121
32450: IN
32451: IFFALSE 32471
// hInvincible := hInvincible diff i else
32453: LD_ADDR_EXP 121
32457: PUSH
32458: LD_EXP 121
32462: PUSH
32463: LD_VAR 0 2
32467: DIFF
32468: ST_TO_ADDR
32469: GO 32487
// hInvincible := hInvincible union i ;
32471: LD_ADDR_EXP 121
32475: PUSH
32476: LD_EXP 121
32480: PUSH
32481: LD_VAR 0 2
32485: UNION
32486: ST_TO_ADDR
// end ;
32487: GO 32427
32489: POP
32490: POP
// end ;
32491: LD_VAR 0 1
32495: RET
// export function hHackInvisible ; var i , j ; begin
32496: LD_INT 0
32498: PPUSH
32499: PPUSH
32500: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32501: LD_ADDR_VAR 0 2
32505: PUSH
32506: LD_INT 21
32508: PUSH
32509: LD_INT 1
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PPUSH
32516: CALL_OW 69
32520: PUSH
32521: FOR_IN
32522: IFFALSE 32546
// if IsSelected ( i ) then
32524: LD_VAR 0 2
32528: PPUSH
32529: CALL_OW 306
32533: IFFALSE 32544
// ComForceInvisible ( i ) ;
32535: LD_VAR 0 2
32539: PPUSH
32540: CALL_OW 496
32544: GO 32521
32546: POP
32547: POP
// end ;
32548: LD_VAR 0 1
32552: RET
// export function hHackChangeYourSide ; begin
32553: LD_INT 0
32555: PPUSH
// if your_side = 8 then
32556: LD_OWVAR 2
32560: PUSH
32561: LD_INT 8
32563: EQUAL
32564: IFFALSE 32576
// your_side := 0 else
32566: LD_ADDR_OWVAR 2
32570: PUSH
32571: LD_INT 0
32573: ST_TO_ADDR
32574: GO 32590
// your_side := your_side + 1 ;
32576: LD_ADDR_OWVAR 2
32580: PUSH
32581: LD_OWVAR 2
32585: PUSH
32586: LD_INT 1
32588: PLUS
32589: ST_TO_ADDR
// end ;
32590: LD_VAR 0 1
32594: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32595: LD_INT 0
32597: PPUSH
32598: PPUSH
32599: PPUSH
// for i in all_units do
32600: LD_ADDR_VAR 0 2
32604: PUSH
32605: LD_OWVAR 3
32609: PUSH
32610: FOR_IN
32611: IFFALSE 32689
// if IsSelected ( i ) then
32613: LD_VAR 0 2
32617: PPUSH
32618: CALL_OW 306
32622: IFFALSE 32687
// begin j := GetSide ( i ) ;
32624: LD_ADDR_VAR 0 3
32628: PUSH
32629: LD_VAR 0 2
32633: PPUSH
32634: CALL_OW 255
32638: ST_TO_ADDR
// if j = 8 then
32639: LD_VAR 0 3
32643: PUSH
32644: LD_INT 8
32646: EQUAL
32647: IFFALSE 32659
// j := 0 else
32649: LD_ADDR_VAR 0 3
32653: PUSH
32654: LD_INT 0
32656: ST_TO_ADDR
32657: GO 32673
// j := j + 1 ;
32659: LD_ADDR_VAR 0 3
32663: PUSH
32664: LD_VAR 0 3
32668: PUSH
32669: LD_INT 1
32671: PLUS
32672: ST_TO_ADDR
// SetSide ( i , j ) ;
32673: LD_VAR 0 2
32677: PPUSH
32678: LD_VAR 0 3
32682: PPUSH
32683: CALL_OW 235
// end ;
32687: GO 32610
32689: POP
32690: POP
// end ;
32691: LD_VAR 0 1
32695: RET
// export function hHackFog ; begin
32696: LD_INT 0
32698: PPUSH
// FogOff ( true ) ;
32699: LD_INT 1
32701: PPUSH
32702: CALL_OW 344
// end ;
32706: LD_VAR 0 1
32710: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32711: LD_INT 0
32713: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32714: LD_VAR 0 1
32718: PPUSH
32719: LD_VAR 0 2
32723: PPUSH
32724: LD_VAR 0 3
32728: PPUSH
32729: LD_INT 1
32731: PPUSH
32732: LD_INT 1
32734: PPUSH
32735: CALL_OW 483
// CenterOnXY ( x , y ) ;
32739: LD_VAR 0 2
32743: PPUSH
32744: LD_VAR 0 3
32748: PPUSH
32749: CALL_OW 84
// end ; end_of_file
32753: LD_VAR 0 4
32757: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32758: LD_INT 0
32760: PPUSH
32761: PPUSH
32762: PPUSH
32763: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32764: LD_VAR 0 1
32768: PPUSH
32769: CALL_OW 264
32773: PUSH
32774: LD_EXP 52
32778: EQUAL
32779: IFFALSE 32851
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32781: LD_INT 68
32783: PPUSH
32784: LD_VAR 0 1
32788: PPUSH
32789: CALL_OW 255
32793: PPUSH
32794: CALL_OW 321
32798: PUSH
32799: LD_INT 2
32801: EQUAL
32802: IFFALSE 32814
// eff := 70 else
32804: LD_ADDR_VAR 0 4
32808: PUSH
32809: LD_INT 70
32811: ST_TO_ADDR
32812: GO 32822
// eff := 30 ;
32814: LD_ADDR_VAR 0 4
32818: PUSH
32819: LD_INT 30
32821: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32822: LD_VAR 0 1
32826: PPUSH
32827: CALL_OW 250
32831: PPUSH
32832: LD_VAR 0 1
32836: PPUSH
32837: CALL_OW 251
32841: PPUSH
32842: LD_VAR 0 4
32846: PPUSH
32847: CALL_OW 495
// end ; end ;
32851: LD_VAR 0 2
32855: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32856: LD_INT 0
32858: PPUSH
// end ;
32859: LD_VAR 0 4
32863: RET
// export function SOS_Command ( cmd ) ; begin
32864: LD_INT 0
32866: PPUSH
// end ;
32867: LD_VAR 0 2
32871: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32872: LD_INT 0
32874: PPUSH
// if cmd = 121 then
32875: LD_VAR 0 1
32879: PUSH
32880: LD_INT 121
32882: EQUAL
32883: IFFALSE 32885
// end ;
32885: LD_VAR 0 6
32889: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32890: LD_INT 0
32892: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32893: LD_VAR 0 1
32897: PUSH
32898: LD_INT 250
32900: EQUAL
32901: PUSH
32902: LD_VAR 0 2
32906: PPUSH
32907: CALL_OW 264
32911: PUSH
32912: LD_EXP 55
32916: EQUAL
32917: AND
32918: IFFALSE 32939
// MinerPlaceMine ( unit , x , y ) ;
32920: LD_VAR 0 2
32924: PPUSH
32925: LD_VAR 0 4
32929: PPUSH
32930: LD_VAR 0 5
32934: PPUSH
32935: CALL 35288 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32939: LD_VAR 0 1
32943: PUSH
32944: LD_INT 251
32946: EQUAL
32947: PUSH
32948: LD_VAR 0 2
32952: PPUSH
32953: CALL_OW 264
32957: PUSH
32958: LD_EXP 55
32962: EQUAL
32963: AND
32964: IFFALSE 32985
// MinerDetonateMine ( unit , x , y ) ;
32966: LD_VAR 0 2
32970: PPUSH
32971: LD_VAR 0 4
32975: PPUSH
32976: LD_VAR 0 5
32980: PPUSH
32981: CALL 35565 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32985: LD_VAR 0 1
32989: PUSH
32990: LD_INT 252
32992: EQUAL
32993: PUSH
32994: LD_VAR 0 2
32998: PPUSH
32999: CALL_OW 264
33003: PUSH
33004: LD_EXP 55
33008: EQUAL
33009: AND
33010: IFFALSE 33031
// MinerCreateMinefield ( unit , x , y ) ;
33012: LD_VAR 0 2
33016: PPUSH
33017: LD_VAR 0 4
33021: PPUSH
33022: LD_VAR 0 5
33026: PPUSH
33027: CALL 35982 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33031: LD_VAR 0 1
33035: PUSH
33036: LD_INT 253
33038: EQUAL
33039: PUSH
33040: LD_VAR 0 2
33044: PPUSH
33045: CALL_OW 257
33049: PUSH
33050: LD_INT 5
33052: EQUAL
33053: AND
33054: IFFALSE 33075
// ComBinocular ( unit , x , y ) ;
33056: LD_VAR 0 2
33060: PPUSH
33061: LD_VAR 0 4
33065: PPUSH
33066: LD_VAR 0 5
33070: PPUSH
33071: CALL 36353 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33075: LD_VAR 0 1
33079: PUSH
33080: LD_INT 254
33082: EQUAL
33083: PUSH
33084: LD_VAR 0 2
33088: PPUSH
33089: CALL_OW 264
33093: PUSH
33094: LD_EXP 50
33098: EQUAL
33099: AND
33100: PUSH
33101: LD_VAR 0 3
33105: PPUSH
33106: CALL_OW 263
33110: PUSH
33111: LD_INT 3
33113: EQUAL
33114: AND
33115: IFFALSE 33131
// HackDestroyVehicle ( unit , selectedUnit ) ;
33117: LD_VAR 0 2
33121: PPUSH
33122: LD_VAR 0 3
33126: PPUSH
33127: CALL 34648 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33131: LD_VAR 0 1
33135: PUSH
33136: LD_INT 255
33138: EQUAL
33139: PUSH
33140: LD_VAR 0 2
33144: PPUSH
33145: CALL_OW 264
33149: PUSH
33150: LD_INT 14
33152: PUSH
33153: LD_INT 53
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: IN
33160: AND
33161: PUSH
33162: LD_VAR 0 4
33166: PPUSH
33167: LD_VAR 0 5
33171: PPUSH
33172: CALL_OW 488
33176: AND
33177: IFFALSE 33201
// CutTreeXYR ( unit , x , y , 12 ) ;
33179: LD_VAR 0 2
33183: PPUSH
33184: LD_VAR 0 4
33188: PPUSH
33189: LD_VAR 0 5
33193: PPUSH
33194: LD_INT 12
33196: PPUSH
33197: CALL 33214 0 4
// end ;
33201: LD_VAR 0 6
33205: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33206: LD_INT 0
33208: PPUSH
// end ;
33209: LD_VAR 0 4
33213: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33214: LD_INT 0
33216: PPUSH
33217: PPUSH
33218: PPUSH
33219: PPUSH
33220: PPUSH
33221: PPUSH
33222: PPUSH
33223: PPUSH
33224: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33225: LD_VAR 0 1
33229: NOT
33230: PUSH
33231: LD_VAR 0 2
33235: PPUSH
33236: LD_VAR 0 3
33240: PPUSH
33241: CALL_OW 488
33245: NOT
33246: OR
33247: PUSH
33248: LD_VAR 0 4
33252: NOT
33253: OR
33254: IFFALSE 33258
// exit ;
33256: GO 33598
// list := [ ] ;
33258: LD_ADDR_VAR 0 13
33262: PUSH
33263: EMPTY
33264: ST_TO_ADDR
// if x - r < 0 then
33265: LD_VAR 0 2
33269: PUSH
33270: LD_VAR 0 4
33274: MINUS
33275: PUSH
33276: LD_INT 0
33278: LESS
33279: IFFALSE 33291
// min_x := 0 else
33281: LD_ADDR_VAR 0 7
33285: PUSH
33286: LD_INT 0
33288: ST_TO_ADDR
33289: GO 33307
// min_x := x - r ;
33291: LD_ADDR_VAR 0 7
33295: PUSH
33296: LD_VAR 0 2
33300: PUSH
33301: LD_VAR 0 4
33305: MINUS
33306: ST_TO_ADDR
// if y - r < 0 then
33307: LD_VAR 0 3
33311: PUSH
33312: LD_VAR 0 4
33316: MINUS
33317: PUSH
33318: LD_INT 0
33320: LESS
33321: IFFALSE 33333
// min_y := 0 else
33323: LD_ADDR_VAR 0 8
33327: PUSH
33328: LD_INT 0
33330: ST_TO_ADDR
33331: GO 33349
// min_y := y - r ;
33333: LD_ADDR_VAR 0 8
33337: PUSH
33338: LD_VAR 0 3
33342: PUSH
33343: LD_VAR 0 4
33347: MINUS
33348: ST_TO_ADDR
// max_x := x + r ;
33349: LD_ADDR_VAR 0 9
33353: PUSH
33354: LD_VAR 0 2
33358: PUSH
33359: LD_VAR 0 4
33363: PLUS
33364: ST_TO_ADDR
// max_y := y + r ;
33365: LD_ADDR_VAR 0 10
33369: PUSH
33370: LD_VAR 0 3
33374: PUSH
33375: LD_VAR 0 4
33379: PLUS
33380: ST_TO_ADDR
// for _x = min_x to max_x do
33381: LD_ADDR_VAR 0 11
33385: PUSH
33386: DOUBLE
33387: LD_VAR 0 7
33391: DEC
33392: ST_TO_ADDR
33393: LD_VAR 0 9
33397: PUSH
33398: FOR_TO
33399: IFFALSE 33516
// for _y = min_y to max_y do
33401: LD_ADDR_VAR 0 12
33405: PUSH
33406: DOUBLE
33407: LD_VAR 0 8
33411: DEC
33412: ST_TO_ADDR
33413: LD_VAR 0 10
33417: PUSH
33418: FOR_TO
33419: IFFALSE 33512
// begin if not ValidHex ( _x , _y ) then
33421: LD_VAR 0 11
33425: PPUSH
33426: LD_VAR 0 12
33430: PPUSH
33431: CALL_OW 488
33435: NOT
33436: IFFALSE 33440
// continue ;
33438: GO 33418
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33440: LD_VAR 0 11
33444: PPUSH
33445: LD_VAR 0 12
33449: PPUSH
33450: CALL_OW 351
33454: PUSH
33455: LD_VAR 0 11
33459: PPUSH
33460: LD_VAR 0 12
33464: PPUSH
33465: CALL_OW 554
33469: AND
33470: IFFALSE 33510
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33472: LD_ADDR_VAR 0 13
33476: PUSH
33477: LD_VAR 0 13
33481: PPUSH
33482: LD_VAR 0 13
33486: PUSH
33487: LD_INT 1
33489: PLUS
33490: PPUSH
33491: LD_VAR 0 11
33495: PUSH
33496: LD_VAR 0 12
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PPUSH
33505: CALL_OW 2
33509: ST_TO_ADDR
// end ;
33510: GO 33418
33512: POP
33513: POP
33514: GO 33398
33516: POP
33517: POP
// if not list then
33518: LD_VAR 0 13
33522: NOT
33523: IFFALSE 33527
// exit ;
33525: GO 33598
// for i in list do
33527: LD_ADDR_VAR 0 6
33531: PUSH
33532: LD_VAR 0 13
33536: PUSH
33537: FOR_IN
33538: IFFALSE 33596
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33540: LD_VAR 0 1
33544: PPUSH
33545: LD_STRING M
33547: PUSH
33548: LD_VAR 0 6
33552: PUSH
33553: LD_INT 1
33555: ARRAY
33556: PUSH
33557: LD_VAR 0 6
33561: PUSH
33562: LD_INT 2
33564: ARRAY
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: PUSH
33587: EMPTY
33588: LIST
33589: PPUSH
33590: CALL_OW 447
33594: GO 33537
33596: POP
33597: POP
// end ;
33598: LD_VAR 0 5
33602: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33603: LD_EXP 124
33607: NOT
33608: IFFALSE 33658
33610: GO 33612
33612: DISABLE
// begin initHack := true ;
33613: LD_ADDR_EXP 124
33617: PUSH
33618: LD_INT 1
33620: ST_TO_ADDR
// hackTanks := [ ] ;
33621: LD_ADDR_EXP 125
33625: PUSH
33626: EMPTY
33627: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33628: LD_ADDR_EXP 126
33632: PUSH
33633: EMPTY
33634: ST_TO_ADDR
// hackLimit := 3 ;
33635: LD_ADDR_EXP 127
33639: PUSH
33640: LD_INT 3
33642: ST_TO_ADDR
// hackDist := 12 ;
33643: LD_ADDR_EXP 128
33647: PUSH
33648: LD_INT 12
33650: ST_TO_ADDR
// hackCounter := [ ] ;
33651: LD_ADDR_EXP 129
33655: PUSH
33656: EMPTY
33657: ST_TO_ADDR
// end ;
33658: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33659: LD_EXP 124
33663: PUSH
33664: LD_INT 34
33666: PUSH
33667: LD_EXP 50
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PPUSH
33676: CALL_OW 69
33680: AND
33681: IFFALSE 33936
33683: GO 33685
33685: DISABLE
33686: LD_INT 0
33688: PPUSH
33689: PPUSH
// begin enable ;
33690: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33691: LD_ADDR_VAR 0 1
33695: PUSH
33696: LD_INT 34
33698: PUSH
33699: LD_EXP 50
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PPUSH
33708: CALL_OW 69
33712: PUSH
33713: FOR_IN
33714: IFFALSE 33934
// begin if not i in hackTanks then
33716: LD_VAR 0 1
33720: PUSH
33721: LD_EXP 125
33725: IN
33726: NOT
33727: IFFALSE 33810
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33729: LD_ADDR_EXP 125
33733: PUSH
33734: LD_EXP 125
33738: PPUSH
33739: LD_EXP 125
33743: PUSH
33744: LD_INT 1
33746: PLUS
33747: PPUSH
33748: LD_VAR 0 1
33752: PPUSH
33753: CALL_OW 1
33757: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33758: LD_ADDR_EXP 126
33762: PUSH
33763: LD_EXP 126
33767: PPUSH
33768: LD_EXP 126
33772: PUSH
33773: LD_INT 1
33775: PLUS
33776: PPUSH
33777: EMPTY
33778: PPUSH
33779: CALL_OW 1
33783: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33784: LD_ADDR_EXP 129
33788: PUSH
33789: LD_EXP 129
33793: PPUSH
33794: LD_EXP 129
33798: PUSH
33799: LD_INT 1
33801: PLUS
33802: PPUSH
33803: EMPTY
33804: PPUSH
33805: CALL_OW 1
33809: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33810: LD_VAR 0 1
33814: PPUSH
33815: CALL_OW 302
33819: NOT
33820: IFFALSE 33833
// begin HackUnlinkAll ( i ) ;
33822: LD_VAR 0 1
33826: PPUSH
33827: CALL 33939 0 1
// continue ;
33831: GO 33713
// end ; HackCheckCapturedStatus ( i ) ;
33833: LD_VAR 0 1
33837: PPUSH
33838: CALL 34382 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33842: LD_ADDR_VAR 0 2
33846: PUSH
33847: LD_INT 81
33849: PUSH
33850: LD_VAR 0 1
33854: PPUSH
33855: CALL_OW 255
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 33
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 91
33876: PUSH
33877: LD_VAR 0 1
33881: PUSH
33882: LD_EXP 128
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 50
33894: PUSH
33895: EMPTY
33896: LIST
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: PPUSH
33904: CALL_OW 69
33908: ST_TO_ADDR
// if not tmp then
33909: LD_VAR 0 2
33913: NOT
33914: IFFALSE 33918
// continue ;
33916: GO 33713
// HackLink ( i , tmp ) ;
33918: LD_VAR 0 1
33922: PPUSH
33923: LD_VAR 0 2
33927: PPUSH
33928: CALL 34075 0 2
// end ;
33932: GO 33713
33934: POP
33935: POP
// end ;
33936: PPOPN 2
33938: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33939: LD_INT 0
33941: PPUSH
33942: PPUSH
33943: PPUSH
// if not hack in hackTanks then
33944: LD_VAR 0 1
33948: PUSH
33949: LD_EXP 125
33953: IN
33954: NOT
33955: IFFALSE 33959
// exit ;
33957: GO 34070
// index := GetElementIndex ( hackTanks , hack ) ;
33959: LD_ADDR_VAR 0 4
33963: PUSH
33964: LD_EXP 125
33968: PPUSH
33969: LD_VAR 0 1
33973: PPUSH
33974: CALL 41544 0 2
33978: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33979: LD_EXP 126
33983: PUSH
33984: LD_VAR 0 4
33988: ARRAY
33989: IFFALSE 34070
// begin for i in hackTanksCaptured [ index ] do
33991: LD_ADDR_VAR 0 3
33995: PUSH
33996: LD_EXP 126
34000: PUSH
34001: LD_VAR 0 4
34005: ARRAY
34006: PUSH
34007: FOR_IN
34008: IFFALSE 34034
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34010: LD_VAR 0 3
34014: PUSH
34015: LD_INT 1
34017: ARRAY
34018: PPUSH
34019: LD_VAR 0 3
34023: PUSH
34024: LD_INT 2
34026: ARRAY
34027: PPUSH
34028: CALL_OW 235
34032: GO 34007
34034: POP
34035: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34036: LD_ADDR_EXP 126
34040: PUSH
34041: LD_EXP 126
34045: PPUSH
34046: LD_VAR 0 4
34050: PPUSH
34051: EMPTY
34052: PPUSH
34053: CALL_OW 1
34057: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34058: LD_VAR 0 1
34062: PPUSH
34063: LD_INT 0
34065: PPUSH
34066: CALL_OW 505
// end ; end ;
34070: LD_VAR 0 2
34074: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34075: LD_INT 0
34077: PPUSH
34078: PPUSH
34079: PPUSH
// if not hack in hackTanks or not vehicles then
34080: LD_VAR 0 1
34084: PUSH
34085: LD_EXP 125
34089: IN
34090: NOT
34091: PUSH
34092: LD_VAR 0 2
34096: NOT
34097: OR
34098: IFFALSE 34102
// exit ;
34100: GO 34377
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34102: LD_ADDR_VAR 0 2
34106: PUSH
34107: LD_VAR 0 1
34111: PPUSH
34112: LD_VAR 0 2
34116: PPUSH
34117: LD_INT 1
34119: PPUSH
34120: LD_INT 1
34122: PPUSH
34123: CALL 42194 0 4
34127: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34128: LD_ADDR_VAR 0 5
34132: PUSH
34133: LD_EXP 125
34137: PPUSH
34138: LD_VAR 0 1
34142: PPUSH
34143: CALL 41544 0 2
34147: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34148: LD_EXP 126
34152: PUSH
34153: LD_VAR 0 5
34157: ARRAY
34158: PUSH
34159: LD_EXP 127
34163: LESS
34164: IFFALSE 34353
// begin for i := 1 to vehicles do
34166: LD_ADDR_VAR 0 4
34170: PUSH
34171: DOUBLE
34172: LD_INT 1
34174: DEC
34175: ST_TO_ADDR
34176: LD_VAR 0 2
34180: PUSH
34181: FOR_TO
34182: IFFALSE 34351
// begin if hackTanksCaptured [ index ] = hackLimit then
34184: LD_EXP 126
34188: PUSH
34189: LD_VAR 0 5
34193: ARRAY
34194: PUSH
34195: LD_EXP 127
34199: EQUAL
34200: IFFALSE 34204
// break ;
34202: GO 34351
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34204: LD_ADDR_EXP 129
34208: PUSH
34209: LD_EXP 129
34213: PPUSH
34214: LD_VAR 0 5
34218: PPUSH
34219: LD_EXP 129
34223: PUSH
34224: LD_VAR 0 5
34228: ARRAY
34229: PUSH
34230: LD_INT 1
34232: PLUS
34233: PPUSH
34234: CALL_OW 1
34238: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34239: LD_ADDR_EXP 126
34243: PUSH
34244: LD_EXP 126
34248: PPUSH
34249: LD_VAR 0 5
34253: PUSH
34254: LD_EXP 126
34258: PUSH
34259: LD_VAR 0 5
34263: ARRAY
34264: PUSH
34265: LD_INT 1
34267: PLUS
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PPUSH
34273: LD_VAR 0 2
34277: PUSH
34278: LD_VAR 0 4
34282: ARRAY
34283: PUSH
34284: LD_VAR 0 2
34288: PUSH
34289: LD_VAR 0 4
34293: ARRAY
34294: PPUSH
34295: CALL_OW 255
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PPUSH
34304: CALL 41759 0 3
34308: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34309: LD_VAR 0 2
34313: PUSH
34314: LD_VAR 0 4
34318: ARRAY
34319: PPUSH
34320: LD_VAR 0 1
34324: PPUSH
34325: CALL_OW 255
34329: PPUSH
34330: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34334: LD_VAR 0 2
34338: PUSH
34339: LD_VAR 0 4
34343: ARRAY
34344: PPUSH
34345: CALL_OW 141
// end ;
34349: GO 34181
34351: POP
34352: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34353: LD_VAR 0 1
34357: PPUSH
34358: LD_EXP 126
34362: PUSH
34363: LD_VAR 0 5
34367: ARRAY
34368: PUSH
34369: LD_INT 0
34371: PLUS
34372: PPUSH
34373: CALL_OW 505
// end ;
34377: LD_VAR 0 3
34381: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34382: LD_INT 0
34384: PPUSH
34385: PPUSH
34386: PPUSH
34387: PPUSH
// if not hack in hackTanks then
34388: LD_VAR 0 1
34392: PUSH
34393: LD_EXP 125
34397: IN
34398: NOT
34399: IFFALSE 34403
// exit ;
34401: GO 34643
// index := GetElementIndex ( hackTanks , hack ) ;
34403: LD_ADDR_VAR 0 4
34407: PUSH
34408: LD_EXP 125
34412: PPUSH
34413: LD_VAR 0 1
34417: PPUSH
34418: CALL 41544 0 2
34422: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34423: LD_ADDR_VAR 0 3
34427: PUSH
34428: DOUBLE
34429: LD_EXP 126
34433: PUSH
34434: LD_VAR 0 4
34438: ARRAY
34439: INC
34440: ST_TO_ADDR
34441: LD_INT 1
34443: PUSH
34444: FOR_DOWNTO
34445: IFFALSE 34617
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34447: LD_ADDR_VAR 0 5
34451: PUSH
34452: LD_EXP 126
34456: PUSH
34457: LD_VAR 0 4
34461: ARRAY
34462: PUSH
34463: LD_VAR 0 3
34467: ARRAY
34468: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34469: LD_VAR 0 5
34473: PUSH
34474: LD_INT 1
34476: ARRAY
34477: PPUSH
34478: CALL_OW 302
34482: NOT
34483: PUSH
34484: LD_VAR 0 5
34488: PUSH
34489: LD_INT 1
34491: ARRAY
34492: PPUSH
34493: CALL_OW 255
34497: PUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL_OW 255
34507: NONEQUAL
34508: OR
34509: IFFALSE 34615
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34511: LD_VAR 0 5
34515: PUSH
34516: LD_INT 1
34518: ARRAY
34519: PPUSH
34520: CALL_OW 305
34524: PUSH
34525: LD_VAR 0 5
34529: PUSH
34530: LD_INT 1
34532: ARRAY
34533: PPUSH
34534: CALL_OW 255
34538: PUSH
34539: LD_VAR 0 1
34543: PPUSH
34544: CALL_OW 255
34548: EQUAL
34549: AND
34550: IFFALSE 34574
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34552: LD_VAR 0 5
34556: PUSH
34557: LD_INT 1
34559: ARRAY
34560: PPUSH
34561: LD_VAR 0 5
34565: PUSH
34566: LD_INT 2
34568: ARRAY
34569: PPUSH
34570: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34574: LD_ADDR_EXP 126
34578: PUSH
34579: LD_EXP 126
34583: PPUSH
34584: LD_VAR 0 4
34588: PPUSH
34589: LD_EXP 126
34593: PUSH
34594: LD_VAR 0 4
34598: ARRAY
34599: PPUSH
34600: LD_VAR 0 3
34604: PPUSH
34605: CALL_OW 3
34609: PPUSH
34610: CALL_OW 1
34614: ST_TO_ADDR
// end ; end ;
34615: GO 34444
34617: POP
34618: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34619: LD_VAR 0 1
34623: PPUSH
34624: LD_EXP 126
34628: PUSH
34629: LD_VAR 0 4
34633: ARRAY
34634: PUSH
34635: LD_INT 0
34637: PLUS
34638: PPUSH
34639: CALL_OW 505
// end ;
34643: LD_VAR 0 2
34647: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34648: LD_INT 0
34650: PPUSH
34651: PPUSH
34652: PPUSH
34653: PPUSH
// if not hack in hackTanks then
34654: LD_VAR 0 1
34658: PUSH
34659: LD_EXP 125
34663: IN
34664: NOT
34665: IFFALSE 34669
// exit ;
34667: GO 34754
// index := GetElementIndex ( hackTanks , hack ) ;
34669: LD_ADDR_VAR 0 5
34673: PUSH
34674: LD_EXP 125
34678: PPUSH
34679: LD_VAR 0 1
34683: PPUSH
34684: CALL 41544 0 2
34688: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34689: LD_ADDR_VAR 0 4
34693: PUSH
34694: DOUBLE
34695: LD_INT 1
34697: DEC
34698: ST_TO_ADDR
34699: LD_EXP 126
34703: PUSH
34704: LD_VAR 0 5
34708: ARRAY
34709: PUSH
34710: FOR_TO
34711: IFFALSE 34752
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34713: LD_EXP 126
34717: PUSH
34718: LD_VAR 0 5
34722: ARRAY
34723: PUSH
34724: LD_VAR 0 4
34728: ARRAY
34729: PUSH
34730: LD_INT 1
34732: ARRAY
34733: PUSH
34734: LD_VAR 0 2
34738: EQUAL
34739: IFFALSE 34750
// KillUnit ( vehicle ) ;
34741: LD_VAR 0 2
34745: PPUSH
34746: CALL_OW 66
34750: GO 34710
34752: POP
34753: POP
// end ;
34754: LD_VAR 0 3
34758: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34759: LD_EXP 130
34763: NOT
34764: IFFALSE 34799
34766: GO 34768
34768: DISABLE
// begin initMiner := true ;
34769: LD_ADDR_EXP 130
34773: PUSH
34774: LD_INT 1
34776: ST_TO_ADDR
// minersList := [ ] ;
34777: LD_ADDR_EXP 131
34781: PUSH
34782: EMPTY
34783: ST_TO_ADDR
// minerMinesList := [ ] ;
34784: LD_ADDR_EXP 132
34788: PUSH
34789: EMPTY
34790: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34791: LD_ADDR_EXP 133
34795: PUSH
34796: LD_INT 5
34798: ST_TO_ADDR
// end ;
34799: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34800: LD_EXP 130
34804: PUSH
34805: LD_INT 34
34807: PUSH
34808: LD_EXP 55
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PPUSH
34817: CALL_OW 69
34821: AND
34822: IFFALSE 35285
34824: GO 34826
34826: DISABLE
34827: LD_INT 0
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
// begin enable ;
34833: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34834: LD_ADDR_VAR 0 1
34838: PUSH
34839: LD_INT 34
34841: PUSH
34842: LD_EXP 55
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PPUSH
34851: CALL_OW 69
34855: PUSH
34856: FOR_IN
34857: IFFALSE 34929
// begin if not i in minersList then
34859: LD_VAR 0 1
34863: PUSH
34864: LD_EXP 131
34868: IN
34869: NOT
34870: IFFALSE 34927
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34872: LD_ADDR_EXP 131
34876: PUSH
34877: LD_EXP 131
34881: PPUSH
34882: LD_EXP 131
34886: PUSH
34887: LD_INT 1
34889: PLUS
34890: PPUSH
34891: LD_VAR 0 1
34895: PPUSH
34896: CALL_OW 1
34900: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34901: LD_ADDR_EXP 132
34905: PUSH
34906: LD_EXP 132
34910: PPUSH
34911: LD_EXP 132
34915: PUSH
34916: LD_INT 1
34918: PLUS
34919: PPUSH
34920: EMPTY
34921: PPUSH
34922: CALL_OW 1
34926: ST_TO_ADDR
// end end ;
34927: GO 34856
34929: POP
34930: POP
// for i := minerMinesList downto 1 do
34931: LD_ADDR_VAR 0 1
34935: PUSH
34936: DOUBLE
34937: LD_EXP 132
34941: INC
34942: ST_TO_ADDR
34943: LD_INT 1
34945: PUSH
34946: FOR_DOWNTO
34947: IFFALSE 35283
// begin if IsLive ( minersList [ i ] ) then
34949: LD_EXP 131
34953: PUSH
34954: LD_VAR 0 1
34958: ARRAY
34959: PPUSH
34960: CALL_OW 300
34964: IFFALSE 34992
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34966: LD_EXP 131
34970: PUSH
34971: LD_VAR 0 1
34975: ARRAY
34976: PPUSH
34977: LD_EXP 132
34981: PUSH
34982: LD_VAR 0 1
34986: ARRAY
34987: PPUSH
34988: CALL_OW 505
// if not minerMinesList [ i ] then
34992: LD_EXP 132
34996: PUSH
34997: LD_VAR 0 1
35001: ARRAY
35002: NOT
35003: IFFALSE 35007
// continue ;
35005: GO 34946
// for j := minerMinesList [ i ] downto 1 do
35007: LD_ADDR_VAR 0 2
35011: PUSH
35012: DOUBLE
35013: LD_EXP 132
35017: PUSH
35018: LD_VAR 0 1
35022: ARRAY
35023: INC
35024: ST_TO_ADDR
35025: LD_INT 1
35027: PUSH
35028: FOR_DOWNTO
35029: IFFALSE 35279
// begin side := GetSide ( minersList [ i ] ) ;
35031: LD_ADDR_VAR 0 3
35035: PUSH
35036: LD_EXP 131
35040: PUSH
35041: LD_VAR 0 1
35045: ARRAY
35046: PPUSH
35047: CALL_OW 255
35051: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35052: LD_ADDR_VAR 0 4
35056: PUSH
35057: LD_EXP 132
35061: PUSH
35062: LD_VAR 0 1
35066: ARRAY
35067: PUSH
35068: LD_VAR 0 2
35072: ARRAY
35073: PUSH
35074: LD_INT 1
35076: ARRAY
35077: PPUSH
35078: LD_EXP 132
35082: PUSH
35083: LD_VAR 0 1
35087: ARRAY
35088: PUSH
35089: LD_VAR 0 2
35093: ARRAY
35094: PUSH
35095: LD_INT 2
35097: ARRAY
35098: PPUSH
35099: CALL_OW 428
35103: ST_TO_ADDR
// if not tmp then
35104: LD_VAR 0 4
35108: NOT
35109: IFFALSE 35113
// continue ;
35111: GO 35028
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35113: LD_VAR 0 4
35117: PUSH
35118: LD_INT 81
35120: PUSH
35121: LD_VAR 0 3
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PPUSH
35130: CALL_OW 69
35134: IN
35135: PUSH
35136: LD_EXP 132
35140: PUSH
35141: LD_VAR 0 1
35145: ARRAY
35146: PUSH
35147: LD_VAR 0 2
35151: ARRAY
35152: PUSH
35153: LD_INT 1
35155: ARRAY
35156: PPUSH
35157: LD_EXP 132
35161: PUSH
35162: LD_VAR 0 1
35166: ARRAY
35167: PUSH
35168: LD_VAR 0 2
35172: ARRAY
35173: PUSH
35174: LD_INT 2
35176: ARRAY
35177: PPUSH
35178: CALL_OW 458
35182: AND
35183: IFFALSE 35277
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35185: LD_EXP 132
35189: PUSH
35190: LD_VAR 0 1
35194: ARRAY
35195: PUSH
35196: LD_VAR 0 2
35200: ARRAY
35201: PUSH
35202: LD_INT 1
35204: ARRAY
35205: PPUSH
35206: LD_EXP 132
35210: PUSH
35211: LD_VAR 0 1
35215: ARRAY
35216: PUSH
35217: LD_VAR 0 2
35221: ARRAY
35222: PUSH
35223: LD_INT 2
35225: ARRAY
35226: PPUSH
35227: LD_VAR 0 3
35231: PPUSH
35232: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35236: LD_ADDR_EXP 132
35240: PUSH
35241: LD_EXP 132
35245: PPUSH
35246: LD_VAR 0 1
35250: PPUSH
35251: LD_EXP 132
35255: PUSH
35256: LD_VAR 0 1
35260: ARRAY
35261: PPUSH
35262: LD_VAR 0 2
35266: PPUSH
35267: CALL_OW 3
35271: PPUSH
35272: CALL_OW 1
35276: ST_TO_ADDR
// end ; end ;
35277: GO 35028
35279: POP
35280: POP
// end ;
35281: GO 34946
35283: POP
35284: POP
// end ;
35285: PPOPN 4
35287: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35288: LD_INT 0
35290: PPUSH
35291: PPUSH
// result := false ;
35292: LD_ADDR_VAR 0 4
35296: PUSH
35297: LD_INT 0
35299: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35300: LD_VAR 0 1
35304: PPUSH
35305: CALL_OW 264
35309: PUSH
35310: LD_EXP 55
35314: EQUAL
35315: NOT
35316: IFFALSE 35320
// exit ;
35318: GO 35560
// index := GetElementIndex ( minersList , unit ) ;
35320: LD_ADDR_VAR 0 5
35324: PUSH
35325: LD_EXP 131
35329: PPUSH
35330: LD_VAR 0 1
35334: PPUSH
35335: CALL 41544 0 2
35339: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35340: LD_EXP 132
35344: PUSH
35345: LD_VAR 0 5
35349: ARRAY
35350: PUSH
35351: LD_EXP 133
35355: GREATEREQUAL
35356: IFFALSE 35360
// exit ;
35358: GO 35560
// ComMoveXY ( unit , x , y ) ;
35360: LD_VAR 0 1
35364: PPUSH
35365: LD_VAR 0 2
35369: PPUSH
35370: LD_VAR 0 3
35374: PPUSH
35375: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35379: LD_INT 35
35381: PPUSH
35382: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35386: LD_VAR 0 1
35390: PPUSH
35391: LD_VAR 0 2
35395: PPUSH
35396: LD_VAR 0 3
35400: PPUSH
35401: CALL 72316 0 3
35405: NOT
35406: PUSH
35407: LD_VAR 0 1
35411: PPUSH
35412: CALL_OW 314
35416: AND
35417: IFFALSE 35421
// exit ;
35419: GO 35560
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35421: LD_VAR 0 2
35425: PPUSH
35426: LD_VAR 0 3
35430: PPUSH
35431: CALL_OW 428
35435: PUSH
35436: LD_VAR 0 1
35440: EQUAL
35441: PUSH
35442: LD_VAR 0 1
35446: PPUSH
35447: CALL_OW 314
35451: NOT
35452: AND
35453: IFFALSE 35379
// PlaySoundXY ( x , y , PlantMine ) ;
35455: LD_VAR 0 2
35459: PPUSH
35460: LD_VAR 0 3
35464: PPUSH
35465: LD_STRING PlantMine
35467: PPUSH
35468: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35472: LD_VAR 0 2
35476: PPUSH
35477: LD_VAR 0 3
35481: PPUSH
35482: LD_VAR 0 1
35486: PPUSH
35487: CALL_OW 255
35491: PPUSH
35492: LD_INT 0
35494: PPUSH
35495: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35499: LD_ADDR_EXP 132
35503: PUSH
35504: LD_EXP 132
35508: PPUSH
35509: LD_VAR 0 5
35513: PUSH
35514: LD_EXP 132
35518: PUSH
35519: LD_VAR 0 5
35523: ARRAY
35524: PUSH
35525: LD_INT 1
35527: PLUS
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PPUSH
35533: LD_VAR 0 2
35537: PUSH
35538: LD_VAR 0 3
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PPUSH
35547: CALL 41759 0 3
35551: ST_TO_ADDR
// result := true ;
35552: LD_ADDR_VAR 0 4
35556: PUSH
35557: LD_INT 1
35559: ST_TO_ADDR
// end ;
35560: LD_VAR 0 4
35564: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35565: LD_INT 0
35567: PPUSH
35568: PPUSH
35569: PPUSH
// if not unit in minersList then
35570: LD_VAR 0 1
35574: PUSH
35575: LD_EXP 131
35579: IN
35580: NOT
35581: IFFALSE 35585
// exit ;
35583: GO 35977
// index := GetElementIndex ( minersList , unit ) ;
35585: LD_ADDR_VAR 0 6
35589: PUSH
35590: LD_EXP 131
35594: PPUSH
35595: LD_VAR 0 1
35599: PPUSH
35600: CALL 41544 0 2
35604: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35605: LD_ADDR_VAR 0 5
35609: PUSH
35610: DOUBLE
35611: LD_EXP 132
35615: PUSH
35616: LD_VAR 0 6
35620: ARRAY
35621: INC
35622: ST_TO_ADDR
35623: LD_INT 1
35625: PUSH
35626: FOR_DOWNTO
35627: IFFALSE 35788
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35629: LD_EXP 132
35633: PUSH
35634: LD_VAR 0 6
35638: ARRAY
35639: PUSH
35640: LD_VAR 0 5
35644: ARRAY
35645: PUSH
35646: LD_INT 1
35648: ARRAY
35649: PUSH
35650: LD_VAR 0 2
35654: EQUAL
35655: PUSH
35656: LD_EXP 132
35660: PUSH
35661: LD_VAR 0 6
35665: ARRAY
35666: PUSH
35667: LD_VAR 0 5
35671: ARRAY
35672: PUSH
35673: LD_INT 2
35675: ARRAY
35676: PUSH
35677: LD_VAR 0 3
35681: EQUAL
35682: AND
35683: IFFALSE 35786
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35685: LD_EXP 132
35689: PUSH
35690: LD_VAR 0 6
35694: ARRAY
35695: PUSH
35696: LD_VAR 0 5
35700: ARRAY
35701: PUSH
35702: LD_INT 1
35704: ARRAY
35705: PPUSH
35706: LD_EXP 132
35710: PUSH
35711: LD_VAR 0 6
35715: ARRAY
35716: PUSH
35717: LD_VAR 0 5
35721: ARRAY
35722: PUSH
35723: LD_INT 2
35725: ARRAY
35726: PPUSH
35727: LD_VAR 0 1
35731: PPUSH
35732: CALL_OW 255
35736: PPUSH
35737: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35741: LD_ADDR_EXP 132
35745: PUSH
35746: LD_EXP 132
35750: PPUSH
35751: LD_VAR 0 6
35755: PPUSH
35756: LD_EXP 132
35760: PUSH
35761: LD_VAR 0 6
35765: ARRAY
35766: PPUSH
35767: LD_VAR 0 5
35771: PPUSH
35772: CALL_OW 3
35776: PPUSH
35777: CALL_OW 1
35781: ST_TO_ADDR
// exit ;
35782: POP
35783: POP
35784: GO 35977
// end ; end ;
35786: GO 35626
35788: POP
35789: POP
// for i := minerMinesList [ index ] downto 1 do
35790: LD_ADDR_VAR 0 5
35794: PUSH
35795: DOUBLE
35796: LD_EXP 132
35800: PUSH
35801: LD_VAR 0 6
35805: ARRAY
35806: INC
35807: ST_TO_ADDR
35808: LD_INT 1
35810: PUSH
35811: FOR_DOWNTO
35812: IFFALSE 35975
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35814: LD_EXP 132
35818: PUSH
35819: LD_VAR 0 6
35823: ARRAY
35824: PUSH
35825: LD_VAR 0 5
35829: ARRAY
35830: PUSH
35831: LD_INT 1
35833: ARRAY
35834: PPUSH
35835: LD_EXP 132
35839: PUSH
35840: LD_VAR 0 6
35844: ARRAY
35845: PUSH
35846: LD_VAR 0 5
35850: ARRAY
35851: PUSH
35852: LD_INT 2
35854: ARRAY
35855: PPUSH
35856: LD_VAR 0 2
35860: PPUSH
35861: LD_VAR 0 3
35865: PPUSH
35866: CALL_OW 298
35870: PUSH
35871: LD_INT 6
35873: LESS
35874: IFFALSE 35973
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35876: LD_EXP 132
35880: PUSH
35881: LD_VAR 0 6
35885: ARRAY
35886: PUSH
35887: LD_VAR 0 5
35891: ARRAY
35892: PUSH
35893: LD_INT 1
35895: ARRAY
35896: PPUSH
35897: LD_EXP 132
35901: PUSH
35902: LD_VAR 0 6
35906: ARRAY
35907: PUSH
35908: LD_VAR 0 5
35912: ARRAY
35913: PUSH
35914: LD_INT 2
35916: ARRAY
35917: PPUSH
35918: LD_VAR 0 1
35922: PPUSH
35923: CALL_OW 255
35927: PPUSH
35928: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35932: LD_ADDR_EXP 132
35936: PUSH
35937: LD_EXP 132
35941: PPUSH
35942: LD_VAR 0 6
35946: PPUSH
35947: LD_EXP 132
35951: PUSH
35952: LD_VAR 0 6
35956: ARRAY
35957: PPUSH
35958: LD_VAR 0 5
35962: PPUSH
35963: CALL_OW 3
35967: PPUSH
35968: CALL_OW 1
35972: ST_TO_ADDR
// end ; end ;
35973: GO 35811
35975: POP
35976: POP
// end ;
35977: LD_VAR 0 4
35981: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35982: LD_INT 0
35984: PPUSH
35985: PPUSH
35986: PPUSH
35987: PPUSH
35988: PPUSH
35989: PPUSH
35990: PPUSH
35991: PPUSH
35992: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35993: LD_VAR 0 1
35997: PPUSH
35998: CALL_OW 264
36002: PUSH
36003: LD_EXP 55
36007: EQUAL
36008: NOT
36009: PUSH
36010: LD_VAR 0 1
36014: PUSH
36015: LD_EXP 131
36019: IN
36020: NOT
36021: OR
36022: IFFALSE 36026
// exit ;
36024: GO 36348
// index := GetElementIndex ( minersList , unit ) ;
36026: LD_ADDR_VAR 0 6
36030: PUSH
36031: LD_EXP 131
36035: PPUSH
36036: LD_VAR 0 1
36040: PPUSH
36041: CALL 41544 0 2
36045: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36046: LD_ADDR_VAR 0 8
36050: PUSH
36051: LD_EXP 133
36055: PUSH
36056: LD_EXP 132
36060: PUSH
36061: LD_VAR 0 6
36065: ARRAY
36066: MINUS
36067: ST_TO_ADDR
// if not minesFreeAmount then
36068: LD_VAR 0 8
36072: NOT
36073: IFFALSE 36077
// exit ;
36075: GO 36348
// tmp := [ ] ;
36077: LD_ADDR_VAR 0 7
36081: PUSH
36082: EMPTY
36083: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36084: LD_ADDR_VAR 0 5
36088: PUSH
36089: DOUBLE
36090: LD_INT 1
36092: DEC
36093: ST_TO_ADDR
36094: LD_VAR 0 8
36098: PUSH
36099: FOR_TO
36100: IFFALSE 36295
// begin _d := rand ( 0 , 5 ) ;
36102: LD_ADDR_VAR 0 11
36106: PUSH
36107: LD_INT 0
36109: PPUSH
36110: LD_INT 5
36112: PPUSH
36113: CALL_OW 12
36117: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36118: LD_ADDR_VAR 0 12
36122: PUSH
36123: LD_INT 2
36125: PPUSH
36126: LD_INT 6
36128: PPUSH
36129: CALL_OW 12
36133: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36134: LD_ADDR_VAR 0 9
36138: PUSH
36139: LD_VAR 0 2
36143: PPUSH
36144: LD_VAR 0 11
36148: PPUSH
36149: LD_VAR 0 12
36153: PPUSH
36154: CALL_OW 272
36158: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36159: LD_ADDR_VAR 0 10
36163: PUSH
36164: LD_VAR 0 3
36168: PPUSH
36169: LD_VAR 0 11
36173: PPUSH
36174: LD_VAR 0 12
36178: PPUSH
36179: CALL_OW 273
36183: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36184: LD_VAR 0 9
36188: PPUSH
36189: LD_VAR 0 10
36193: PPUSH
36194: CALL_OW 488
36198: PUSH
36199: LD_VAR 0 9
36203: PUSH
36204: LD_VAR 0 10
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_VAR 0 7
36217: IN
36218: NOT
36219: AND
36220: PUSH
36221: LD_VAR 0 9
36225: PPUSH
36226: LD_VAR 0 10
36230: PPUSH
36231: CALL_OW 458
36235: NOT
36236: AND
36237: IFFALSE 36279
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36239: LD_ADDR_VAR 0 7
36243: PUSH
36244: LD_VAR 0 7
36248: PPUSH
36249: LD_VAR 0 7
36253: PUSH
36254: LD_INT 1
36256: PLUS
36257: PPUSH
36258: LD_VAR 0 9
36262: PUSH
36263: LD_VAR 0 10
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PPUSH
36272: CALL_OW 1
36276: ST_TO_ADDR
36277: GO 36293
// i := i - 1 ;
36279: LD_ADDR_VAR 0 5
36283: PUSH
36284: LD_VAR 0 5
36288: PUSH
36289: LD_INT 1
36291: MINUS
36292: ST_TO_ADDR
// end ;
36293: GO 36099
36295: POP
36296: POP
// for i in tmp do
36297: LD_ADDR_VAR 0 5
36301: PUSH
36302: LD_VAR 0 7
36306: PUSH
36307: FOR_IN
36308: IFFALSE 36346
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36310: LD_VAR 0 1
36314: PPUSH
36315: LD_VAR 0 5
36319: PUSH
36320: LD_INT 1
36322: ARRAY
36323: PPUSH
36324: LD_VAR 0 5
36328: PUSH
36329: LD_INT 2
36331: ARRAY
36332: PPUSH
36333: CALL 35288 0 3
36337: NOT
36338: IFFALSE 36344
// exit ;
36340: POP
36341: POP
36342: GO 36348
36344: GO 36307
36346: POP
36347: POP
// end ;
36348: LD_VAR 0 4
36352: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36353: LD_INT 0
36355: PPUSH
36356: PPUSH
36357: PPUSH
36358: PPUSH
36359: PPUSH
36360: PPUSH
36361: PPUSH
// if not GetClass ( unit ) = class_sniper then
36362: LD_VAR 0 1
36366: PPUSH
36367: CALL_OW 257
36371: PUSH
36372: LD_INT 5
36374: EQUAL
36375: NOT
36376: IFFALSE 36380
// exit ;
36378: GO 36768
// dist := 8 ;
36380: LD_ADDR_VAR 0 5
36384: PUSH
36385: LD_INT 8
36387: ST_TO_ADDR
// viewRange := 12 ;
36388: LD_ADDR_VAR 0 7
36392: PUSH
36393: LD_INT 12
36395: ST_TO_ADDR
// side := GetSide ( unit ) ;
36396: LD_ADDR_VAR 0 6
36400: PUSH
36401: LD_VAR 0 1
36405: PPUSH
36406: CALL_OW 255
36410: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36411: LD_INT 61
36413: PPUSH
36414: LD_VAR 0 6
36418: PPUSH
36419: CALL_OW 321
36423: PUSH
36424: LD_INT 2
36426: EQUAL
36427: IFFALSE 36437
// viewRange := 16 ;
36429: LD_ADDR_VAR 0 7
36433: PUSH
36434: LD_INT 16
36436: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36437: LD_VAR 0 1
36441: PPUSH
36442: LD_VAR 0 2
36446: PPUSH
36447: LD_VAR 0 3
36451: PPUSH
36452: CALL_OW 297
36456: PUSH
36457: LD_VAR 0 5
36461: GREATER
36462: IFFALSE 36541
// begin ComMoveXY ( unit , x , y ) ;
36464: LD_VAR 0 1
36468: PPUSH
36469: LD_VAR 0 2
36473: PPUSH
36474: LD_VAR 0 3
36478: PPUSH
36479: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36483: LD_INT 35
36485: PPUSH
36486: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36490: LD_VAR 0 1
36494: PPUSH
36495: LD_VAR 0 2
36499: PPUSH
36500: LD_VAR 0 3
36504: PPUSH
36505: CALL 72316 0 3
36509: NOT
36510: IFFALSE 36514
// exit ;
36512: GO 36768
// until GetDistUnitXY ( unit , x , y ) < dist ;
36514: LD_VAR 0 1
36518: PPUSH
36519: LD_VAR 0 2
36523: PPUSH
36524: LD_VAR 0 3
36528: PPUSH
36529: CALL_OW 297
36533: PUSH
36534: LD_VAR 0 5
36538: LESS
36539: IFFALSE 36483
// end ; ComTurnXY ( unit , x , y ) ;
36541: LD_VAR 0 1
36545: PPUSH
36546: LD_VAR 0 2
36550: PPUSH
36551: LD_VAR 0 3
36555: PPUSH
36556: CALL_OW 118
// wait ( 5 ) ;
36560: LD_INT 5
36562: PPUSH
36563: CALL_OW 67
// _d := GetDir ( unit ) ;
36567: LD_ADDR_VAR 0 10
36571: PUSH
36572: LD_VAR 0 1
36576: PPUSH
36577: CALL_OW 254
36581: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36582: LD_ADDR_VAR 0 8
36586: PUSH
36587: LD_VAR 0 1
36591: PPUSH
36592: CALL_OW 250
36596: PPUSH
36597: LD_VAR 0 10
36601: PPUSH
36602: LD_VAR 0 5
36606: PPUSH
36607: CALL_OW 272
36611: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36612: LD_ADDR_VAR 0 9
36616: PUSH
36617: LD_VAR 0 1
36621: PPUSH
36622: CALL_OW 251
36626: PPUSH
36627: LD_VAR 0 10
36631: PPUSH
36632: LD_VAR 0 5
36636: PPUSH
36637: CALL_OW 273
36641: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36642: LD_VAR 0 8
36646: PPUSH
36647: LD_VAR 0 9
36651: PPUSH
36652: CALL_OW 488
36656: NOT
36657: IFFALSE 36661
// exit ;
36659: GO 36768
// ComAnimCustom ( unit , 1 ) ;
36661: LD_VAR 0 1
36665: PPUSH
36666: LD_INT 1
36668: PPUSH
36669: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36673: LD_VAR 0 8
36677: PPUSH
36678: LD_VAR 0 9
36682: PPUSH
36683: LD_VAR 0 6
36687: PPUSH
36688: LD_VAR 0 7
36692: PPUSH
36693: CALL_OW 330
// repeat wait ( 1 ) ;
36697: LD_INT 1
36699: PPUSH
36700: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36704: LD_VAR 0 1
36708: PPUSH
36709: CALL_OW 316
36713: PUSH
36714: LD_VAR 0 1
36718: PPUSH
36719: CALL_OW 314
36723: OR
36724: PUSH
36725: LD_VAR 0 1
36729: PPUSH
36730: CALL_OW 302
36734: NOT
36735: OR
36736: PUSH
36737: LD_VAR 0 1
36741: PPUSH
36742: CALL_OW 301
36746: OR
36747: IFFALSE 36697
// RemoveSeeing ( _x , _y , side ) ;
36749: LD_VAR 0 8
36753: PPUSH
36754: LD_VAR 0 9
36758: PPUSH
36759: LD_VAR 0 6
36763: PPUSH
36764: CALL_OW 331
// end ; end_of_file
36768: LD_VAR 0 4
36772: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36773: LD_INT 0
36775: PPUSH
36776: PPUSH
// if exist_mode then
36777: LD_VAR 0 2
36781: IFFALSE 36806
// unit := CreateCharacter ( prefix & ident ) else
36783: LD_ADDR_VAR 0 5
36787: PUSH
36788: LD_VAR 0 3
36792: PUSH
36793: LD_VAR 0 1
36797: STR
36798: PPUSH
36799: CALL_OW 34
36803: ST_TO_ADDR
36804: GO 36821
// unit := NewCharacter ( ident ) ;
36806: LD_ADDR_VAR 0 5
36810: PUSH
36811: LD_VAR 0 1
36815: PPUSH
36816: CALL_OW 25
36820: ST_TO_ADDR
// result := unit ;
36821: LD_ADDR_VAR 0 4
36825: PUSH
36826: LD_VAR 0 5
36830: ST_TO_ADDR
// end ;
36831: LD_VAR 0 4
36835: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36836: LD_INT 0
36838: PPUSH
36839: PPUSH
// if not side or not nation then
36840: LD_VAR 0 1
36844: NOT
36845: PUSH
36846: LD_VAR 0 2
36850: NOT
36851: OR
36852: IFFALSE 36856
// exit ;
36854: GO 37624
// case nation of nation_american :
36856: LD_VAR 0 2
36860: PUSH
36861: LD_INT 1
36863: DOUBLE
36864: EQUAL
36865: IFTRUE 36869
36867: GO 37083
36869: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36870: LD_ADDR_VAR 0 4
36874: PUSH
36875: LD_INT 35
36877: PUSH
36878: LD_INT 45
36880: PUSH
36881: LD_INT 46
36883: PUSH
36884: LD_INT 47
36886: PUSH
36887: LD_INT 82
36889: PUSH
36890: LD_INT 83
36892: PUSH
36893: LD_INT 84
36895: PUSH
36896: LD_INT 85
36898: PUSH
36899: LD_INT 86
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: LD_INT 6
36910: PUSH
36911: LD_INT 15
36913: PUSH
36914: LD_INT 16
36916: PUSH
36917: LD_INT 7
36919: PUSH
36920: LD_INT 12
36922: PUSH
36923: LD_INT 13
36925: PUSH
36926: LD_INT 10
36928: PUSH
36929: LD_INT 14
36931: PUSH
36932: LD_INT 20
36934: PUSH
36935: LD_INT 21
36937: PUSH
36938: LD_INT 22
36940: PUSH
36941: LD_INT 25
36943: PUSH
36944: LD_INT 32
36946: PUSH
36947: LD_INT 27
36949: PUSH
36950: LD_INT 36
36952: PUSH
36953: LD_INT 69
36955: PUSH
36956: LD_INT 39
36958: PUSH
36959: LD_INT 34
36961: PUSH
36962: LD_INT 40
36964: PUSH
36965: LD_INT 48
36967: PUSH
36968: LD_INT 49
36970: PUSH
36971: LD_INT 50
36973: PUSH
36974: LD_INT 51
36976: PUSH
36977: LD_INT 52
36979: PUSH
36980: LD_INT 53
36982: PUSH
36983: LD_INT 54
36985: PUSH
36986: LD_INT 55
36988: PUSH
36989: LD_INT 56
36991: PUSH
36992: LD_INT 57
36994: PUSH
36995: LD_INT 58
36997: PUSH
36998: LD_INT 59
37000: PUSH
37001: LD_INT 60
37003: PUSH
37004: LD_INT 61
37006: PUSH
37007: LD_INT 62
37009: PUSH
37010: LD_INT 80
37012: PUSH
37013: LD_INT 82
37015: PUSH
37016: LD_INT 83
37018: PUSH
37019: LD_INT 84
37021: PUSH
37022: LD_INT 85
37024: PUSH
37025: LD_INT 86
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: ST_TO_ADDR
37081: GO 37548
37083: LD_INT 2
37085: DOUBLE
37086: EQUAL
37087: IFTRUE 37091
37089: GO 37317
37091: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37092: LD_ADDR_VAR 0 4
37096: PUSH
37097: LD_INT 35
37099: PUSH
37100: LD_INT 45
37102: PUSH
37103: LD_INT 46
37105: PUSH
37106: LD_INT 47
37108: PUSH
37109: LD_INT 82
37111: PUSH
37112: LD_INT 83
37114: PUSH
37115: LD_INT 84
37117: PUSH
37118: LD_INT 85
37120: PUSH
37121: LD_INT 87
37123: PUSH
37124: LD_INT 70
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: LD_INT 11
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: LD_INT 4
37138: PUSH
37139: LD_INT 5
37141: PUSH
37142: LD_INT 6
37144: PUSH
37145: LD_INT 15
37147: PUSH
37148: LD_INT 18
37150: PUSH
37151: LD_INT 7
37153: PUSH
37154: LD_INT 17
37156: PUSH
37157: LD_INT 8
37159: PUSH
37160: LD_INT 20
37162: PUSH
37163: LD_INT 21
37165: PUSH
37166: LD_INT 22
37168: PUSH
37169: LD_INT 72
37171: PUSH
37172: LD_INT 26
37174: PUSH
37175: LD_INT 69
37177: PUSH
37178: LD_INT 39
37180: PUSH
37181: LD_INT 40
37183: PUSH
37184: LD_INT 41
37186: PUSH
37187: LD_INT 42
37189: PUSH
37190: LD_INT 43
37192: PUSH
37193: LD_INT 48
37195: PUSH
37196: LD_INT 49
37198: PUSH
37199: LD_INT 50
37201: PUSH
37202: LD_INT 51
37204: PUSH
37205: LD_INT 52
37207: PUSH
37208: LD_INT 53
37210: PUSH
37211: LD_INT 54
37213: PUSH
37214: LD_INT 55
37216: PUSH
37217: LD_INT 56
37219: PUSH
37220: LD_INT 60
37222: PUSH
37223: LD_INT 61
37225: PUSH
37226: LD_INT 62
37228: PUSH
37229: LD_INT 66
37231: PUSH
37232: LD_INT 67
37234: PUSH
37235: LD_INT 68
37237: PUSH
37238: LD_INT 81
37240: PUSH
37241: LD_INT 82
37243: PUSH
37244: LD_INT 83
37246: PUSH
37247: LD_INT 84
37249: PUSH
37250: LD_INT 85
37252: PUSH
37253: LD_INT 87
37255: PUSH
37256: LD_INT 88
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: ST_TO_ADDR
37315: GO 37548
37317: LD_INT 3
37319: DOUBLE
37320: EQUAL
37321: IFTRUE 37325
37323: GO 37547
37325: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37326: LD_ADDR_VAR 0 4
37330: PUSH
37331: LD_INT 46
37333: PUSH
37334: LD_INT 47
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: LD_INT 2
37342: PUSH
37343: LD_INT 82
37345: PUSH
37346: LD_INT 83
37348: PUSH
37349: LD_INT 84
37351: PUSH
37352: LD_INT 85
37354: PUSH
37355: LD_INT 86
37357: PUSH
37358: LD_INT 11
37360: PUSH
37361: LD_INT 9
37363: PUSH
37364: LD_INT 20
37366: PUSH
37367: LD_INT 19
37369: PUSH
37370: LD_INT 21
37372: PUSH
37373: LD_INT 24
37375: PUSH
37376: LD_INT 22
37378: PUSH
37379: LD_INT 25
37381: PUSH
37382: LD_INT 28
37384: PUSH
37385: LD_INT 29
37387: PUSH
37388: LD_INT 30
37390: PUSH
37391: LD_INT 31
37393: PUSH
37394: LD_INT 37
37396: PUSH
37397: LD_INT 38
37399: PUSH
37400: LD_INT 32
37402: PUSH
37403: LD_INT 27
37405: PUSH
37406: LD_INT 33
37408: PUSH
37409: LD_INT 69
37411: PUSH
37412: LD_INT 39
37414: PUSH
37415: LD_INT 34
37417: PUSH
37418: LD_INT 40
37420: PUSH
37421: LD_INT 71
37423: PUSH
37424: LD_INT 23
37426: PUSH
37427: LD_INT 44
37429: PUSH
37430: LD_INT 48
37432: PUSH
37433: LD_INT 49
37435: PUSH
37436: LD_INT 50
37438: PUSH
37439: LD_INT 51
37441: PUSH
37442: LD_INT 52
37444: PUSH
37445: LD_INT 53
37447: PUSH
37448: LD_INT 54
37450: PUSH
37451: LD_INT 55
37453: PUSH
37454: LD_INT 56
37456: PUSH
37457: LD_INT 57
37459: PUSH
37460: LD_INT 58
37462: PUSH
37463: LD_INT 59
37465: PUSH
37466: LD_INT 63
37468: PUSH
37469: LD_INT 64
37471: PUSH
37472: LD_INT 65
37474: PUSH
37475: LD_INT 82
37477: PUSH
37478: LD_INT 83
37480: PUSH
37481: LD_INT 84
37483: PUSH
37484: LD_INT 85
37486: PUSH
37487: LD_INT 86
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: ST_TO_ADDR
37545: GO 37548
37547: POP
// if state > - 1 and state < 3 then
37548: LD_VAR 0 3
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: GREATER
37557: PUSH
37558: LD_VAR 0 3
37562: PUSH
37563: LD_INT 3
37565: LESS
37566: AND
37567: IFFALSE 37624
// for i in result do
37569: LD_ADDR_VAR 0 5
37573: PUSH
37574: LD_VAR 0 4
37578: PUSH
37579: FOR_IN
37580: IFFALSE 37622
// if GetTech ( i , side ) <> state then
37582: LD_VAR 0 5
37586: PPUSH
37587: LD_VAR 0 1
37591: PPUSH
37592: CALL_OW 321
37596: PUSH
37597: LD_VAR 0 3
37601: NONEQUAL
37602: IFFALSE 37620
// result := result diff i ;
37604: LD_ADDR_VAR 0 4
37608: PUSH
37609: LD_VAR 0 4
37613: PUSH
37614: LD_VAR 0 5
37618: DIFF
37619: ST_TO_ADDR
37620: GO 37579
37622: POP
37623: POP
// end ;
37624: LD_VAR 0 4
37628: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37629: LD_INT 0
37631: PPUSH
37632: PPUSH
37633: PPUSH
// result := true ;
37634: LD_ADDR_VAR 0 3
37638: PUSH
37639: LD_INT 1
37641: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37642: LD_ADDR_VAR 0 5
37646: PUSH
37647: LD_VAR 0 2
37651: PPUSH
37652: CALL_OW 480
37656: ST_TO_ADDR
// if not tmp then
37657: LD_VAR 0 5
37661: NOT
37662: IFFALSE 37666
// exit ;
37664: GO 37715
// for i in tmp do
37666: LD_ADDR_VAR 0 4
37670: PUSH
37671: LD_VAR 0 5
37675: PUSH
37676: FOR_IN
37677: IFFALSE 37713
// if GetTech ( i , side ) <> state_researched then
37679: LD_VAR 0 4
37683: PPUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 321
37693: PUSH
37694: LD_INT 2
37696: NONEQUAL
37697: IFFALSE 37711
// begin result := false ;
37699: LD_ADDR_VAR 0 3
37703: PUSH
37704: LD_INT 0
37706: ST_TO_ADDR
// exit ;
37707: POP
37708: POP
37709: GO 37715
// end ;
37711: GO 37676
37713: POP
37714: POP
// end ;
37715: LD_VAR 0 3
37719: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37720: LD_INT 0
37722: PPUSH
37723: PPUSH
37724: PPUSH
37725: PPUSH
37726: PPUSH
37727: PPUSH
37728: PPUSH
37729: PPUSH
37730: PPUSH
37731: PPUSH
37732: PPUSH
37733: PPUSH
37734: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37735: LD_VAR 0 1
37739: NOT
37740: PUSH
37741: LD_VAR 0 1
37745: PPUSH
37746: CALL_OW 257
37750: PUSH
37751: LD_INT 9
37753: NONEQUAL
37754: OR
37755: IFFALSE 37759
// exit ;
37757: GO 38332
// side := GetSide ( unit ) ;
37759: LD_ADDR_VAR 0 9
37763: PUSH
37764: LD_VAR 0 1
37768: PPUSH
37769: CALL_OW 255
37773: ST_TO_ADDR
// tech_space := tech_spacanom ;
37774: LD_ADDR_VAR 0 12
37778: PUSH
37779: LD_INT 29
37781: ST_TO_ADDR
// tech_time := tech_taurad ;
37782: LD_ADDR_VAR 0 13
37786: PUSH
37787: LD_INT 28
37789: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37790: LD_ADDR_VAR 0 11
37794: PUSH
37795: LD_VAR 0 1
37799: PPUSH
37800: CALL_OW 310
37804: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37805: LD_VAR 0 11
37809: PPUSH
37810: CALL_OW 247
37814: PUSH
37815: LD_INT 2
37817: EQUAL
37818: IFFALSE 37822
// exit ;
37820: GO 38332
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37822: LD_ADDR_VAR 0 8
37826: PUSH
37827: LD_INT 81
37829: PUSH
37830: LD_VAR 0 9
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 3
37841: PUSH
37842: LD_INT 21
37844: PUSH
37845: LD_INT 3
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PPUSH
37860: CALL_OW 69
37864: ST_TO_ADDR
// if not tmp then
37865: LD_VAR 0 8
37869: NOT
37870: IFFALSE 37874
// exit ;
37872: GO 38332
// if in_unit then
37874: LD_VAR 0 11
37878: IFFALSE 37902
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37880: LD_ADDR_VAR 0 10
37884: PUSH
37885: LD_VAR 0 8
37889: PPUSH
37890: LD_VAR 0 11
37894: PPUSH
37895: CALL_OW 74
37899: ST_TO_ADDR
37900: GO 37922
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37902: LD_ADDR_VAR 0 10
37906: PUSH
37907: LD_VAR 0 8
37911: PPUSH
37912: LD_VAR 0 1
37916: PPUSH
37917: CALL_OW 74
37921: ST_TO_ADDR
// if not enemy then
37922: LD_VAR 0 10
37926: NOT
37927: IFFALSE 37931
// exit ;
37929: GO 38332
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37931: LD_VAR 0 11
37935: PUSH
37936: LD_VAR 0 11
37940: PPUSH
37941: LD_VAR 0 10
37945: PPUSH
37946: CALL_OW 296
37950: PUSH
37951: LD_INT 13
37953: GREATER
37954: AND
37955: PUSH
37956: LD_VAR 0 1
37960: PPUSH
37961: LD_VAR 0 10
37965: PPUSH
37966: CALL_OW 296
37970: PUSH
37971: LD_INT 12
37973: GREATER
37974: OR
37975: IFFALSE 37979
// exit ;
37977: GO 38332
// missile := [ 1 ] ;
37979: LD_ADDR_VAR 0 14
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: EMPTY
37988: LIST
37989: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37990: LD_VAR 0 9
37994: PPUSH
37995: LD_VAR 0 12
37999: PPUSH
38000: CALL_OW 325
38004: IFFALSE 38033
// missile := Insert ( missile , missile + 1 , 2 ) ;
38006: LD_ADDR_VAR 0 14
38010: PUSH
38011: LD_VAR 0 14
38015: PPUSH
38016: LD_VAR 0 14
38020: PUSH
38021: LD_INT 1
38023: PLUS
38024: PPUSH
38025: LD_INT 2
38027: PPUSH
38028: CALL_OW 2
38032: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38033: LD_VAR 0 9
38037: PPUSH
38038: LD_VAR 0 13
38042: PPUSH
38043: CALL_OW 325
38047: PUSH
38048: LD_VAR 0 10
38052: PPUSH
38053: CALL_OW 255
38057: PPUSH
38058: LD_VAR 0 13
38062: PPUSH
38063: CALL_OW 325
38067: NOT
38068: AND
38069: IFFALSE 38098
// missile := Insert ( missile , missile + 1 , 3 ) ;
38071: LD_ADDR_VAR 0 14
38075: PUSH
38076: LD_VAR 0 14
38080: PPUSH
38081: LD_VAR 0 14
38085: PUSH
38086: LD_INT 1
38088: PLUS
38089: PPUSH
38090: LD_INT 3
38092: PPUSH
38093: CALL_OW 2
38097: ST_TO_ADDR
// if missile < 2 then
38098: LD_VAR 0 14
38102: PUSH
38103: LD_INT 2
38105: LESS
38106: IFFALSE 38110
// exit ;
38108: GO 38332
// x := GetX ( enemy ) ;
38110: LD_ADDR_VAR 0 4
38114: PUSH
38115: LD_VAR 0 10
38119: PPUSH
38120: CALL_OW 250
38124: ST_TO_ADDR
// y := GetY ( enemy ) ;
38125: LD_ADDR_VAR 0 5
38129: PUSH
38130: LD_VAR 0 10
38134: PPUSH
38135: CALL_OW 251
38139: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38140: LD_ADDR_VAR 0 6
38144: PUSH
38145: LD_VAR 0 4
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PPUSH
38154: LD_INT 1
38156: PPUSH
38157: CALL_OW 12
38161: PLUS
38162: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38163: LD_ADDR_VAR 0 7
38167: PUSH
38168: LD_VAR 0 5
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PPUSH
38177: LD_INT 1
38179: PPUSH
38180: CALL_OW 12
38184: PLUS
38185: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38186: LD_VAR 0 6
38190: PPUSH
38191: LD_VAR 0 7
38195: PPUSH
38196: CALL_OW 488
38200: NOT
38201: IFFALSE 38223
// begin _x := x ;
38203: LD_ADDR_VAR 0 6
38207: PUSH
38208: LD_VAR 0 4
38212: ST_TO_ADDR
// _y := y ;
38213: LD_ADDR_VAR 0 7
38217: PUSH
38218: LD_VAR 0 5
38222: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38223: LD_ADDR_VAR 0 3
38227: PUSH
38228: LD_INT 1
38230: PPUSH
38231: LD_VAR 0 14
38235: PPUSH
38236: CALL_OW 12
38240: ST_TO_ADDR
// case i of 1 :
38241: LD_VAR 0 3
38245: PUSH
38246: LD_INT 1
38248: DOUBLE
38249: EQUAL
38250: IFTRUE 38254
38252: GO 38271
38254: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38255: LD_VAR 0 1
38259: PPUSH
38260: LD_VAR 0 10
38264: PPUSH
38265: CALL_OW 115
38269: GO 38332
38271: LD_INT 2
38273: DOUBLE
38274: EQUAL
38275: IFTRUE 38279
38277: GO 38301
38279: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38280: LD_VAR 0 1
38284: PPUSH
38285: LD_VAR 0 6
38289: PPUSH
38290: LD_VAR 0 7
38294: PPUSH
38295: CALL_OW 153
38299: GO 38332
38301: LD_INT 3
38303: DOUBLE
38304: EQUAL
38305: IFTRUE 38309
38307: GO 38331
38309: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38310: LD_VAR 0 1
38314: PPUSH
38315: LD_VAR 0 6
38319: PPUSH
38320: LD_VAR 0 7
38324: PPUSH
38325: CALL_OW 154
38329: GO 38332
38331: POP
// end ;
38332: LD_VAR 0 2
38336: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38337: LD_INT 0
38339: PPUSH
38340: PPUSH
38341: PPUSH
38342: PPUSH
38343: PPUSH
38344: PPUSH
// if not unit or not building then
38345: LD_VAR 0 1
38349: NOT
38350: PUSH
38351: LD_VAR 0 2
38355: NOT
38356: OR
38357: IFFALSE 38361
// exit ;
38359: GO 38519
// x := GetX ( building ) ;
38361: LD_ADDR_VAR 0 5
38365: PUSH
38366: LD_VAR 0 2
38370: PPUSH
38371: CALL_OW 250
38375: ST_TO_ADDR
// y := GetY ( building ) ;
38376: LD_ADDR_VAR 0 6
38380: PUSH
38381: LD_VAR 0 2
38385: PPUSH
38386: CALL_OW 251
38390: ST_TO_ADDR
// for i = 0 to 5 do
38391: LD_ADDR_VAR 0 4
38395: PUSH
38396: DOUBLE
38397: LD_INT 0
38399: DEC
38400: ST_TO_ADDR
38401: LD_INT 5
38403: PUSH
38404: FOR_TO
38405: IFFALSE 38517
// begin _x := ShiftX ( x , i , 3 ) ;
38407: LD_ADDR_VAR 0 7
38411: PUSH
38412: LD_VAR 0 5
38416: PPUSH
38417: LD_VAR 0 4
38421: PPUSH
38422: LD_INT 3
38424: PPUSH
38425: CALL_OW 272
38429: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38430: LD_ADDR_VAR 0 8
38434: PUSH
38435: LD_VAR 0 6
38439: PPUSH
38440: LD_VAR 0 4
38444: PPUSH
38445: LD_INT 3
38447: PPUSH
38448: CALL_OW 273
38452: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38453: LD_VAR 0 7
38457: PPUSH
38458: LD_VAR 0 8
38462: PPUSH
38463: CALL_OW 488
38467: NOT
38468: IFFALSE 38472
// continue ;
38470: GO 38404
// if HexInfo ( _x , _y ) = 0 then
38472: LD_VAR 0 7
38476: PPUSH
38477: LD_VAR 0 8
38481: PPUSH
38482: CALL_OW 428
38486: PUSH
38487: LD_INT 0
38489: EQUAL
38490: IFFALSE 38515
// begin ComMoveXY ( unit , _x , _y ) ;
38492: LD_VAR 0 1
38496: PPUSH
38497: LD_VAR 0 7
38501: PPUSH
38502: LD_VAR 0 8
38506: PPUSH
38507: CALL_OW 111
// exit ;
38511: POP
38512: POP
38513: GO 38519
// end ; end ;
38515: GO 38404
38517: POP
38518: POP
// end ;
38519: LD_VAR 0 3
38523: RET
// export function ScanBase ( side , base_area ) ; begin
38524: LD_INT 0
38526: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38527: LD_ADDR_VAR 0 3
38531: PUSH
38532: LD_VAR 0 2
38536: PPUSH
38537: LD_INT 81
38539: PUSH
38540: LD_VAR 0 1
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PPUSH
38549: CALL_OW 70
38553: ST_TO_ADDR
// end ;
38554: LD_VAR 0 3
38558: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38559: LD_INT 0
38561: PPUSH
38562: PPUSH
38563: PPUSH
38564: PPUSH
// result := false ;
38565: LD_ADDR_VAR 0 2
38569: PUSH
38570: LD_INT 0
38572: ST_TO_ADDR
// side := GetSide ( unit ) ;
38573: LD_ADDR_VAR 0 3
38577: PUSH
38578: LD_VAR 0 1
38582: PPUSH
38583: CALL_OW 255
38587: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38588: LD_ADDR_VAR 0 4
38592: PUSH
38593: LD_VAR 0 1
38597: PPUSH
38598: CALL_OW 248
38602: ST_TO_ADDR
// case nat of 1 :
38603: LD_VAR 0 4
38607: PUSH
38608: LD_INT 1
38610: DOUBLE
38611: EQUAL
38612: IFTRUE 38616
38614: GO 38627
38616: POP
// tech := tech_lassight ; 2 :
38617: LD_ADDR_VAR 0 5
38621: PUSH
38622: LD_INT 12
38624: ST_TO_ADDR
38625: GO 38666
38627: LD_INT 2
38629: DOUBLE
38630: EQUAL
38631: IFTRUE 38635
38633: GO 38646
38635: POP
// tech := tech_mortar ; 3 :
38636: LD_ADDR_VAR 0 5
38640: PUSH
38641: LD_INT 41
38643: ST_TO_ADDR
38644: GO 38666
38646: LD_INT 3
38648: DOUBLE
38649: EQUAL
38650: IFTRUE 38654
38652: GO 38665
38654: POP
// tech := tech_bazooka ; end ;
38655: LD_ADDR_VAR 0 5
38659: PUSH
38660: LD_INT 44
38662: ST_TO_ADDR
38663: GO 38666
38665: POP
// if Researched ( side , tech ) then
38666: LD_VAR 0 3
38670: PPUSH
38671: LD_VAR 0 5
38675: PPUSH
38676: CALL_OW 325
38680: IFFALSE 38707
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38682: LD_ADDR_VAR 0 2
38686: PUSH
38687: LD_INT 5
38689: PUSH
38690: LD_INT 8
38692: PUSH
38693: LD_INT 9
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: LIST
38700: PUSH
38701: LD_VAR 0 4
38705: ARRAY
38706: ST_TO_ADDR
// end ;
38707: LD_VAR 0 2
38711: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38712: LD_INT 0
38714: PPUSH
38715: PPUSH
38716: PPUSH
// if not mines then
38717: LD_VAR 0 2
38721: NOT
38722: IFFALSE 38726
// exit ;
38724: GO 38870
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38726: LD_ADDR_VAR 0 5
38730: PUSH
38731: LD_INT 81
38733: PUSH
38734: LD_VAR 0 1
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 3
38745: PUSH
38746: LD_INT 21
38748: PUSH
38749: LD_INT 3
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PPUSH
38764: CALL_OW 69
38768: ST_TO_ADDR
// for i in mines do
38769: LD_ADDR_VAR 0 4
38773: PUSH
38774: LD_VAR 0 2
38778: PUSH
38779: FOR_IN
38780: IFFALSE 38868
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38782: LD_VAR 0 4
38786: PUSH
38787: LD_INT 1
38789: ARRAY
38790: PPUSH
38791: LD_VAR 0 4
38795: PUSH
38796: LD_INT 2
38798: ARRAY
38799: PPUSH
38800: CALL_OW 458
38804: NOT
38805: IFFALSE 38809
// continue ;
38807: GO 38779
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38809: LD_VAR 0 4
38813: PUSH
38814: LD_INT 1
38816: ARRAY
38817: PPUSH
38818: LD_VAR 0 4
38822: PUSH
38823: LD_INT 2
38825: ARRAY
38826: PPUSH
38827: CALL_OW 428
38831: PUSH
38832: LD_VAR 0 5
38836: IN
38837: IFFALSE 38866
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38839: LD_VAR 0 4
38843: PUSH
38844: LD_INT 1
38846: ARRAY
38847: PPUSH
38848: LD_VAR 0 4
38852: PUSH
38853: LD_INT 2
38855: ARRAY
38856: PPUSH
38857: LD_VAR 0 1
38861: PPUSH
38862: CALL_OW 456
// end ;
38866: GO 38779
38868: POP
38869: POP
// end ;
38870: LD_VAR 0 3
38874: RET
// export function Count ( array ) ; var i ; begin
38875: LD_INT 0
38877: PPUSH
38878: PPUSH
// result := 0 ;
38879: LD_ADDR_VAR 0 2
38883: PUSH
38884: LD_INT 0
38886: ST_TO_ADDR
// for i in array do
38887: LD_ADDR_VAR 0 3
38891: PUSH
38892: LD_VAR 0 1
38896: PUSH
38897: FOR_IN
38898: IFFALSE 38922
// if i then
38900: LD_VAR 0 3
38904: IFFALSE 38920
// result := result + 1 ;
38906: LD_ADDR_VAR 0 2
38910: PUSH
38911: LD_VAR 0 2
38915: PUSH
38916: LD_INT 1
38918: PLUS
38919: ST_TO_ADDR
38920: GO 38897
38922: POP
38923: POP
// end ;
38924: LD_VAR 0 2
38928: RET
// export function IsEmpty ( building ) ; begin
38929: LD_INT 0
38931: PPUSH
// if not building then
38932: LD_VAR 0 1
38936: NOT
38937: IFFALSE 38941
// exit ;
38939: GO 38984
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38941: LD_ADDR_VAR 0 2
38945: PUSH
38946: LD_VAR 0 1
38950: PUSH
38951: LD_INT 22
38953: PUSH
38954: LD_VAR 0 1
38958: PPUSH
38959: CALL_OW 255
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 58
38970: PUSH
38971: EMPTY
38972: LIST
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PPUSH
38978: CALL_OW 69
38982: IN
38983: ST_TO_ADDR
// end ;
38984: LD_VAR 0 2
38988: RET
// export function IsNotFull ( building ) ; begin
38989: LD_INT 0
38991: PPUSH
// if not building then
38992: LD_VAR 0 1
38996: NOT
38997: IFFALSE 39001
// exit ;
38999: GO 39020
// result := UnitsInside ( building ) < 6 ;
39001: LD_ADDR_VAR 0 2
39005: PUSH
39006: LD_VAR 0 1
39010: PPUSH
39011: CALL_OW 313
39015: PUSH
39016: LD_INT 6
39018: LESS
39019: ST_TO_ADDR
// end ;
39020: LD_VAR 0 2
39024: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39025: LD_INT 0
39027: PPUSH
39028: PPUSH
39029: PPUSH
39030: PPUSH
// tmp := [ ] ;
39031: LD_ADDR_VAR 0 3
39035: PUSH
39036: EMPTY
39037: ST_TO_ADDR
// list := [ ] ;
39038: LD_ADDR_VAR 0 5
39042: PUSH
39043: EMPTY
39044: ST_TO_ADDR
// for i = 16 to 25 do
39045: LD_ADDR_VAR 0 4
39049: PUSH
39050: DOUBLE
39051: LD_INT 16
39053: DEC
39054: ST_TO_ADDR
39055: LD_INT 25
39057: PUSH
39058: FOR_TO
39059: IFFALSE 39132
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39061: LD_ADDR_VAR 0 3
39065: PUSH
39066: LD_VAR 0 3
39070: PUSH
39071: LD_INT 22
39073: PUSH
39074: LD_VAR 0 1
39078: PPUSH
39079: CALL_OW 255
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 91
39090: PUSH
39091: LD_VAR 0 1
39095: PUSH
39096: LD_INT 6
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 30
39106: PUSH
39107: LD_VAR 0 4
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: LIST
39120: PUSH
39121: EMPTY
39122: LIST
39123: PPUSH
39124: CALL_OW 69
39128: ADD
39129: ST_TO_ADDR
39130: GO 39058
39132: POP
39133: POP
// for i = 1 to tmp do
39134: LD_ADDR_VAR 0 4
39138: PUSH
39139: DOUBLE
39140: LD_INT 1
39142: DEC
39143: ST_TO_ADDR
39144: LD_VAR 0 3
39148: PUSH
39149: FOR_TO
39150: IFFALSE 39238
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39152: LD_ADDR_VAR 0 5
39156: PUSH
39157: LD_VAR 0 5
39161: PUSH
39162: LD_VAR 0 3
39166: PUSH
39167: LD_VAR 0 4
39171: ARRAY
39172: PPUSH
39173: CALL_OW 266
39177: PUSH
39178: LD_VAR 0 3
39182: PUSH
39183: LD_VAR 0 4
39187: ARRAY
39188: PPUSH
39189: CALL_OW 250
39193: PUSH
39194: LD_VAR 0 3
39198: PUSH
39199: LD_VAR 0 4
39203: ARRAY
39204: PPUSH
39205: CALL_OW 251
39209: PUSH
39210: LD_VAR 0 3
39214: PUSH
39215: LD_VAR 0 4
39219: ARRAY
39220: PPUSH
39221: CALL_OW 254
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: PUSH
39232: EMPTY
39233: LIST
39234: ADD
39235: ST_TO_ADDR
39236: GO 39149
39238: POP
39239: POP
// result := list ;
39240: LD_ADDR_VAR 0 2
39244: PUSH
39245: LD_VAR 0 5
39249: ST_TO_ADDR
// end ;
39250: LD_VAR 0 2
39254: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39255: LD_INT 0
39257: PPUSH
39258: PPUSH
39259: PPUSH
39260: PPUSH
39261: PPUSH
39262: PPUSH
39263: PPUSH
// if not factory then
39264: LD_VAR 0 1
39268: NOT
39269: IFFALSE 39273
// exit ;
39271: GO 39866
// if control = control_apeman then
39273: LD_VAR 0 4
39277: PUSH
39278: LD_INT 5
39280: EQUAL
39281: IFFALSE 39390
// begin tmp := UnitsInside ( factory ) ;
39283: LD_ADDR_VAR 0 8
39287: PUSH
39288: LD_VAR 0 1
39292: PPUSH
39293: CALL_OW 313
39297: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39298: LD_VAR 0 8
39302: PPUSH
39303: LD_INT 25
39305: PUSH
39306: LD_INT 12
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PPUSH
39313: CALL_OW 72
39317: NOT
39318: IFFALSE 39328
// control := control_manual ;
39320: LD_ADDR_VAR 0 4
39324: PUSH
39325: LD_INT 1
39327: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39328: LD_ADDR_VAR 0 8
39332: PUSH
39333: LD_VAR 0 1
39337: PPUSH
39338: CALL 39025 0 1
39342: ST_TO_ADDR
// if tmp then
39343: LD_VAR 0 8
39347: IFFALSE 39390
// begin for i in tmp do
39349: LD_ADDR_VAR 0 7
39353: PUSH
39354: LD_VAR 0 8
39358: PUSH
39359: FOR_IN
39360: IFFALSE 39388
// if i [ 1 ] = b_ext_radio then
39362: LD_VAR 0 7
39366: PUSH
39367: LD_INT 1
39369: ARRAY
39370: PUSH
39371: LD_INT 22
39373: EQUAL
39374: IFFALSE 39386
// begin control := control_remote ;
39376: LD_ADDR_VAR 0 4
39380: PUSH
39381: LD_INT 2
39383: ST_TO_ADDR
// break ;
39384: GO 39388
// end ;
39386: GO 39359
39388: POP
39389: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39390: LD_VAR 0 1
39394: PPUSH
39395: LD_VAR 0 2
39399: PPUSH
39400: LD_VAR 0 3
39404: PPUSH
39405: LD_VAR 0 4
39409: PPUSH
39410: LD_VAR 0 5
39414: PPUSH
39415: CALL_OW 448
39419: IFFALSE 39454
// begin result := [ chassis , engine , control , weapon ] ;
39421: LD_ADDR_VAR 0 6
39425: PUSH
39426: LD_VAR 0 2
39430: PUSH
39431: LD_VAR 0 3
39435: PUSH
39436: LD_VAR 0 4
39440: PUSH
39441: LD_VAR 0 5
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: ST_TO_ADDR
// exit ;
39452: GO 39866
// end ; _chassis := AvailableChassisList ( factory ) ;
39454: LD_ADDR_VAR 0 9
39458: PUSH
39459: LD_VAR 0 1
39463: PPUSH
39464: CALL_OW 475
39468: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39469: LD_ADDR_VAR 0 11
39473: PUSH
39474: LD_VAR 0 1
39478: PPUSH
39479: CALL_OW 476
39483: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39484: LD_ADDR_VAR 0 12
39488: PUSH
39489: LD_VAR 0 1
39493: PPUSH
39494: CALL_OW 477
39498: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39499: LD_ADDR_VAR 0 10
39503: PUSH
39504: LD_VAR 0 1
39508: PPUSH
39509: CALL_OW 478
39513: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39514: LD_VAR 0 9
39518: NOT
39519: PUSH
39520: LD_VAR 0 11
39524: NOT
39525: OR
39526: PUSH
39527: LD_VAR 0 12
39531: NOT
39532: OR
39533: PUSH
39534: LD_VAR 0 10
39538: NOT
39539: OR
39540: IFFALSE 39575
// begin result := [ chassis , engine , control , weapon ] ;
39542: LD_ADDR_VAR 0 6
39546: PUSH
39547: LD_VAR 0 2
39551: PUSH
39552: LD_VAR 0 3
39556: PUSH
39557: LD_VAR 0 4
39561: PUSH
39562: LD_VAR 0 5
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: ST_TO_ADDR
// exit ;
39573: GO 39866
// end ; if not chassis in _chassis then
39575: LD_VAR 0 2
39579: PUSH
39580: LD_VAR 0 9
39584: IN
39585: NOT
39586: IFFALSE 39612
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39588: LD_ADDR_VAR 0 2
39592: PUSH
39593: LD_VAR 0 9
39597: PUSH
39598: LD_INT 1
39600: PPUSH
39601: LD_VAR 0 9
39605: PPUSH
39606: CALL_OW 12
39610: ARRAY
39611: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39612: LD_VAR 0 2
39616: PPUSH
39617: LD_VAR 0 3
39621: PPUSH
39622: CALL 39871 0 2
39626: NOT
39627: IFFALSE 39686
// repeat engine := _engine [ 1 ] ;
39629: LD_ADDR_VAR 0 3
39633: PUSH
39634: LD_VAR 0 11
39638: PUSH
39639: LD_INT 1
39641: ARRAY
39642: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39643: LD_ADDR_VAR 0 11
39647: PUSH
39648: LD_VAR 0 11
39652: PPUSH
39653: LD_INT 1
39655: PPUSH
39656: CALL_OW 3
39660: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39661: LD_VAR 0 2
39665: PPUSH
39666: LD_VAR 0 3
39670: PPUSH
39671: CALL 39871 0 2
39675: PUSH
39676: LD_VAR 0 11
39680: PUSH
39681: EMPTY
39682: EQUAL
39683: OR
39684: IFFALSE 39629
// if not control in _control then
39686: LD_VAR 0 4
39690: PUSH
39691: LD_VAR 0 12
39695: IN
39696: NOT
39697: IFFALSE 39723
// control := _control [ rand ( 1 , _control ) ] ;
39699: LD_ADDR_VAR 0 4
39703: PUSH
39704: LD_VAR 0 12
39708: PUSH
39709: LD_INT 1
39711: PPUSH
39712: LD_VAR 0 12
39716: PPUSH
39717: CALL_OW 12
39721: ARRAY
39722: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39723: LD_VAR 0 2
39727: PPUSH
39728: LD_VAR 0 5
39732: PPUSH
39733: CALL 40091 0 2
39737: NOT
39738: IFFALSE 39797
// repeat weapon := _weapon [ 1 ] ;
39740: LD_ADDR_VAR 0 5
39744: PUSH
39745: LD_VAR 0 10
39749: PUSH
39750: LD_INT 1
39752: ARRAY
39753: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39754: LD_ADDR_VAR 0 10
39758: PUSH
39759: LD_VAR 0 10
39763: PPUSH
39764: LD_INT 1
39766: PPUSH
39767: CALL_OW 3
39771: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39772: LD_VAR 0 2
39776: PPUSH
39777: LD_VAR 0 5
39781: PPUSH
39782: CALL 40091 0 2
39786: PUSH
39787: LD_VAR 0 10
39791: PUSH
39792: EMPTY
39793: EQUAL
39794: OR
39795: IFFALSE 39740
// result := [ ] ;
39797: LD_ADDR_VAR 0 6
39801: PUSH
39802: EMPTY
39803: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39804: LD_VAR 0 1
39808: PPUSH
39809: LD_VAR 0 2
39813: PPUSH
39814: LD_VAR 0 3
39818: PPUSH
39819: LD_VAR 0 4
39823: PPUSH
39824: LD_VAR 0 5
39828: PPUSH
39829: CALL_OW 448
39833: IFFALSE 39866
// result := [ chassis , engine , control , weapon ] ;
39835: LD_ADDR_VAR 0 6
39839: PUSH
39840: LD_VAR 0 2
39844: PUSH
39845: LD_VAR 0 3
39849: PUSH
39850: LD_VAR 0 4
39854: PUSH
39855: LD_VAR 0 5
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: ST_TO_ADDR
// end ;
39866: LD_VAR 0 6
39870: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39871: LD_INT 0
39873: PPUSH
// if not chassis or not engine then
39874: LD_VAR 0 1
39878: NOT
39879: PUSH
39880: LD_VAR 0 2
39884: NOT
39885: OR
39886: IFFALSE 39890
// exit ;
39888: GO 40086
// case engine of engine_solar :
39890: LD_VAR 0 2
39894: PUSH
39895: LD_INT 2
39897: DOUBLE
39898: EQUAL
39899: IFTRUE 39903
39901: GO 39941
39903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39904: LD_ADDR_VAR 0 3
39908: PUSH
39909: LD_INT 11
39911: PUSH
39912: LD_INT 12
39914: PUSH
39915: LD_INT 13
39917: PUSH
39918: LD_INT 14
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: LD_INT 3
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: ST_TO_ADDR
39939: GO 40070
39941: LD_INT 1
39943: DOUBLE
39944: EQUAL
39945: IFTRUE 39949
39947: GO 40011
39949: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39950: LD_ADDR_VAR 0 3
39954: PUSH
39955: LD_INT 11
39957: PUSH
39958: LD_INT 12
39960: PUSH
39961: LD_INT 13
39963: PUSH
39964: LD_INT 14
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: LD_INT 3
39975: PUSH
39976: LD_INT 4
39978: PUSH
39979: LD_INT 5
39981: PUSH
39982: LD_INT 21
39984: PUSH
39985: LD_INT 23
39987: PUSH
39988: LD_INT 22
39990: PUSH
39991: LD_INT 24
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: ST_TO_ADDR
40009: GO 40070
40011: LD_INT 3
40013: DOUBLE
40014: EQUAL
40015: IFTRUE 40019
40017: GO 40069
40019: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40020: LD_ADDR_VAR 0 3
40024: PUSH
40025: LD_INT 13
40027: PUSH
40028: LD_INT 14
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: LD_INT 3
40036: PUSH
40037: LD_INT 4
40039: PUSH
40040: LD_INT 5
40042: PUSH
40043: LD_INT 21
40045: PUSH
40046: LD_INT 22
40048: PUSH
40049: LD_INT 23
40051: PUSH
40052: LD_INT 24
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: ST_TO_ADDR
40067: GO 40070
40069: POP
// result := ( chassis in result ) ;
40070: LD_ADDR_VAR 0 3
40074: PUSH
40075: LD_VAR 0 1
40079: PUSH
40080: LD_VAR 0 3
40084: IN
40085: ST_TO_ADDR
// end ;
40086: LD_VAR 0 3
40090: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40091: LD_INT 0
40093: PPUSH
// if not chassis or not weapon then
40094: LD_VAR 0 1
40098: NOT
40099: PUSH
40100: LD_VAR 0 2
40104: NOT
40105: OR
40106: IFFALSE 40110
// exit ;
40108: GO 41172
// case weapon of us_machine_gun :
40110: LD_VAR 0 2
40114: PUSH
40115: LD_INT 2
40117: DOUBLE
40118: EQUAL
40119: IFTRUE 40123
40121: GO 40153
40123: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40124: LD_ADDR_VAR 0 3
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: LD_INT 4
40140: PUSH
40141: LD_INT 5
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: ST_TO_ADDR
40151: GO 41156
40153: LD_INT 3
40155: DOUBLE
40156: EQUAL
40157: IFTRUE 40161
40159: GO 40191
40161: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40162: LD_ADDR_VAR 0 3
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: LD_INT 3
40175: PUSH
40176: LD_INT 4
40178: PUSH
40179: LD_INT 5
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: ST_TO_ADDR
40189: GO 41156
40191: LD_INT 11
40193: DOUBLE
40194: EQUAL
40195: IFTRUE 40199
40197: GO 40229
40199: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40200: LD_ADDR_VAR 0 3
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: LD_INT 3
40213: PUSH
40214: LD_INT 4
40216: PUSH
40217: LD_INT 5
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: ST_TO_ADDR
40227: GO 41156
40229: LD_INT 4
40231: DOUBLE
40232: EQUAL
40233: IFTRUE 40237
40235: GO 40263
40237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40238: LD_ADDR_VAR 0 3
40242: PUSH
40243: LD_INT 2
40245: PUSH
40246: LD_INT 3
40248: PUSH
40249: LD_INT 4
40251: PUSH
40252: LD_INT 5
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: ST_TO_ADDR
40261: GO 41156
40263: LD_INT 5
40265: DOUBLE
40266: EQUAL
40267: IFTRUE 40271
40269: GO 40297
40271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40272: LD_ADDR_VAR 0 3
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: LD_INT 3
40282: PUSH
40283: LD_INT 4
40285: PUSH
40286: LD_INT 5
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: ST_TO_ADDR
40295: GO 41156
40297: LD_INT 9
40299: DOUBLE
40300: EQUAL
40301: IFTRUE 40305
40303: GO 40331
40305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40306: LD_ADDR_VAR 0 3
40310: PUSH
40311: LD_INT 2
40313: PUSH
40314: LD_INT 3
40316: PUSH
40317: LD_INT 4
40319: PUSH
40320: LD_INT 5
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: ST_TO_ADDR
40329: GO 41156
40331: LD_INT 7
40333: DOUBLE
40334: EQUAL
40335: IFTRUE 40339
40337: GO 40365
40339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40340: LD_ADDR_VAR 0 3
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: LD_INT 3
40350: PUSH
40351: LD_INT 4
40353: PUSH
40354: LD_INT 5
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: ST_TO_ADDR
40363: GO 41156
40365: LD_INT 12
40367: DOUBLE
40368: EQUAL
40369: IFTRUE 40373
40371: GO 40399
40373: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40374: LD_ADDR_VAR 0 3
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: LD_INT 3
40384: PUSH
40385: LD_INT 4
40387: PUSH
40388: LD_INT 5
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: ST_TO_ADDR
40397: GO 41156
40399: LD_INT 13
40401: DOUBLE
40402: EQUAL
40403: IFTRUE 40407
40405: GO 40433
40407: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40408: LD_ADDR_VAR 0 3
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: LD_INT 3
40418: PUSH
40419: LD_INT 4
40421: PUSH
40422: LD_INT 5
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: ST_TO_ADDR
40431: GO 41156
40433: LD_INT 14
40435: DOUBLE
40436: EQUAL
40437: IFTRUE 40441
40439: GO 40459
40441: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40442: LD_ADDR_VAR 0 3
40446: PUSH
40447: LD_INT 4
40449: PUSH
40450: LD_INT 5
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: ST_TO_ADDR
40457: GO 41156
40459: LD_INT 6
40461: DOUBLE
40462: EQUAL
40463: IFTRUE 40467
40465: GO 40485
40467: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40468: LD_ADDR_VAR 0 3
40472: PUSH
40473: LD_INT 4
40475: PUSH
40476: LD_INT 5
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: ST_TO_ADDR
40483: GO 41156
40485: LD_INT 10
40487: DOUBLE
40488: EQUAL
40489: IFTRUE 40493
40491: GO 40511
40493: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40494: LD_ADDR_VAR 0 3
40498: PUSH
40499: LD_INT 4
40501: PUSH
40502: LD_INT 5
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: ST_TO_ADDR
40509: GO 41156
40511: LD_INT 22
40513: DOUBLE
40514: EQUAL
40515: IFTRUE 40519
40517: GO 40545
40519: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40520: LD_ADDR_VAR 0 3
40524: PUSH
40525: LD_INT 11
40527: PUSH
40528: LD_INT 12
40530: PUSH
40531: LD_INT 13
40533: PUSH
40534: LD_INT 14
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: ST_TO_ADDR
40543: GO 41156
40545: LD_INT 23
40547: DOUBLE
40548: EQUAL
40549: IFTRUE 40553
40551: GO 40579
40553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40554: LD_ADDR_VAR 0 3
40558: PUSH
40559: LD_INT 11
40561: PUSH
40562: LD_INT 12
40564: PUSH
40565: LD_INT 13
40567: PUSH
40568: LD_INT 14
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: ST_TO_ADDR
40577: GO 41156
40579: LD_INT 24
40581: DOUBLE
40582: EQUAL
40583: IFTRUE 40587
40585: GO 40613
40587: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40588: LD_ADDR_VAR 0 3
40592: PUSH
40593: LD_INT 11
40595: PUSH
40596: LD_INT 12
40598: PUSH
40599: LD_INT 13
40601: PUSH
40602: LD_INT 14
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: ST_TO_ADDR
40611: GO 41156
40613: LD_INT 30
40615: DOUBLE
40616: EQUAL
40617: IFTRUE 40621
40619: GO 40647
40621: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40622: LD_ADDR_VAR 0 3
40626: PUSH
40627: LD_INT 11
40629: PUSH
40630: LD_INT 12
40632: PUSH
40633: LD_INT 13
40635: PUSH
40636: LD_INT 14
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: ST_TO_ADDR
40645: GO 41156
40647: LD_INT 25
40649: DOUBLE
40650: EQUAL
40651: IFTRUE 40655
40653: GO 40673
40655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40656: LD_ADDR_VAR 0 3
40660: PUSH
40661: LD_INT 13
40663: PUSH
40664: LD_INT 14
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: ST_TO_ADDR
40671: GO 41156
40673: LD_INT 27
40675: DOUBLE
40676: EQUAL
40677: IFTRUE 40681
40679: GO 40699
40681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40682: LD_ADDR_VAR 0 3
40686: PUSH
40687: LD_INT 13
40689: PUSH
40690: LD_INT 14
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: ST_TO_ADDR
40697: GO 41156
40699: LD_EXP 53
40703: DOUBLE
40704: EQUAL
40705: IFTRUE 40709
40707: GO 40735
40709: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40710: LD_ADDR_VAR 0 3
40714: PUSH
40715: LD_INT 11
40717: PUSH
40718: LD_INT 12
40720: PUSH
40721: LD_INT 13
40723: PUSH
40724: LD_INT 14
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: ST_TO_ADDR
40733: GO 41156
40735: LD_INT 28
40737: DOUBLE
40738: EQUAL
40739: IFTRUE 40743
40741: GO 40761
40743: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40744: LD_ADDR_VAR 0 3
40748: PUSH
40749: LD_INT 13
40751: PUSH
40752: LD_INT 14
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: ST_TO_ADDR
40759: GO 41156
40761: LD_INT 29
40763: DOUBLE
40764: EQUAL
40765: IFTRUE 40769
40767: GO 40787
40769: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40770: LD_ADDR_VAR 0 3
40774: PUSH
40775: LD_INT 13
40777: PUSH
40778: LD_INT 14
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: ST_TO_ADDR
40785: GO 41156
40787: LD_INT 31
40789: DOUBLE
40790: EQUAL
40791: IFTRUE 40795
40793: GO 40813
40795: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40796: LD_ADDR_VAR 0 3
40800: PUSH
40801: LD_INT 13
40803: PUSH
40804: LD_INT 14
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: ST_TO_ADDR
40811: GO 41156
40813: LD_INT 26
40815: DOUBLE
40816: EQUAL
40817: IFTRUE 40821
40819: GO 40839
40821: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40822: LD_ADDR_VAR 0 3
40826: PUSH
40827: LD_INT 13
40829: PUSH
40830: LD_INT 14
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: ST_TO_ADDR
40837: GO 41156
40839: LD_INT 42
40841: DOUBLE
40842: EQUAL
40843: IFTRUE 40847
40845: GO 40873
40847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40848: LD_ADDR_VAR 0 3
40852: PUSH
40853: LD_INT 21
40855: PUSH
40856: LD_INT 22
40858: PUSH
40859: LD_INT 23
40861: PUSH
40862: LD_INT 24
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: ST_TO_ADDR
40871: GO 41156
40873: LD_INT 43
40875: DOUBLE
40876: EQUAL
40877: IFTRUE 40881
40879: GO 40907
40881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40882: LD_ADDR_VAR 0 3
40886: PUSH
40887: LD_INT 21
40889: PUSH
40890: LD_INT 22
40892: PUSH
40893: LD_INT 23
40895: PUSH
40896: LD_INT 24
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: ST_TO_ADDR
40905: GO 41156
40907: LD_INT 44
40909: DOUBLE
40910: EQUAL
40911: IFTRUE 40915
40913: GO 40941
40915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40916: LD_ADDR_VAR 0 3
40920: PUSH
40921: LD_INT 21
40923: PUSH
40924: LD_INT 22
40926: PUSH
40927: LD_INT 23
40929: PUSH
40930: LD_INT 24
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: ST_TO_ADDR
40939: GO 41156
40941: LD_INT 45
40943: DOUBLE
40944: EQUAL
40945: IFTRUE 40949
40947: GO 40975
40949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40950: LD_ADDR_VAR 0 3
40954: PUSH
40955: LD_INT 21
40957: PUSH
40958: LD_INT 22
40960: PUSH
40961: LD_INT 23
40963: PUSH
40964: LD_INT 24
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: ST_TO_ADDR
40973: GO 41156
40975: LD_INT 49
40977: DOUBLE
40978: EQUAL
40979: IFTRUE 40983
40981: GO 41009
40983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40984: LD_ADDR_VAR 0 3
40988: PUSH
40989: LD_INT 21
40991: PUSH
40992: LD_INT 22
40994: PUSH
40995: LD_INT 23
40997: PUSH
40998: LD_INT 24
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: ST_TO_ADDR
41007: GO 41156
41009: LD_INT 51
41011: DOUBLE
41012: EQUAL
41013: IFTRUE 41017
41015: GO 41043
41017: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41018: LD_ADDR_VAR 0 3
41022: PUSH
41023: LD_INT 21
41025: PUSH
41026: LD_INT 22
41028: PUSH
41029: LD_INT 23
41031: PUSH
41032: LD_INT 24
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: ST_TO_ADDR
41041: GO 41156
41043: LD_INT 52
41045: DOUBLE
41046: EQUAL
41047: IFTRUE 41051
41049: GO 41077
41051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41052: LD_ADDR_VAR 0 3
41056: PUSH
41057: LD_INT 21
41059: PUSH
41060: LD_INT 22
41062: PUSH
41063: LD_INT 23
41065: PUSH
41066: LD_INT 24
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: ST_TO_ADDR
41075: GO 41156
41077: LD_INT 53
41079: DOUBLE
41080: EQUAL
41081: IFTRUE 41085
41083: GO 41103
41085: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41086: LD_ADDR_VAR 0 3
41090: PUSH
41091: LD_INT 23
41093: PUSH
41094: LD_INT 24
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: ST_TO_ADDR
41101: GO 41156
41103: LD_INT 46
41105: DOUBLE
41106: EQUAL
41107: IFTRUE 41111
41109: GO 41129
41111: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41112: LD_ADDR_VAR 0 3
41116: PUSH
41117: LD_INT 23
41119: PUSH
41120: LD_INT 24
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: ST_TO_ADDR
41127: GO 41156
41129: LD_INT 47
41131: DOUBLE
41132: EQUAL
41133: IFTRUE 41137
41135: GO 41155
41137: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41138: LD_ADDR_VAR 0 3
41142: PUSH
41143: LD_INT 23
41145: PUSH
41146: LD_INT 24
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: ST_TO_ADDR
41153: GO 41156
41155: POP
// result := ( chassis in result ) ;
41156: LD_ADDR_VAR 0 3
41160: PUSH
41161: LD_VAR 0 1
41165: PUSH
41166: LD_VAR 0 3
41170: IN
41171: ST_TO_ADDR
// end ;
41172: LD_VAR 0 3
41176: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41177: LD_INT 0
41179: PPUSH
41180: PPUSH
41181: PPUSH
41182: PPUSH
41183: PPUSH
41184: PPUSH
41185: PPUSH
// result := array ;
41186: LD_ADDR_VAR 0 5
41190: PUSH
41191: LD_VAR 0 1
41195: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41196: LD_VAR 0 1
41200: NOT
41201: PUSH
41202: LD_VAR 0 2
41206: NOT
41207: OR
41208: PUSH
41209: LD_VAR 0 3
41213: NOT
41214: OR
41215: PUSH
41216: LD_VAR 0 2
41220: PUSH
41221: LD_VAR 0 1
41225: GREATER
41226: OR
41227: PUSH
41228: LD_VAR 0 3
41232: PUSH
41233: LD_VAR 0 1
41237: GREATER
41238: OR
41239: IFFALSE 41243
// exit ;
41241: GO 41539
// if direction then
41243: LD_VAR 0 4
41247: IFFALSE 41311
// begin d := 1 ;
41249: LD_ADDR_VAR 0 9
41253: PUSH
41254: LD_INT 1
41256: ST_TO_ADDR
// if i_from > i_to then
41257: LD_VAR 0 2
41261: PUSH
41262: LD_VAR 0 3
41266: GREATER
41267: IFFALSE 41293
// length := ( array - i_from ) + i_to else
41269: LD_ADDR_VAR 0 11
41273: PUSH
41274: LD_VAR 0 1
41278: PUSH
41279: LD_VAR 0 2
41283: MINUS
41284: PUSH
41285: LD_VAR 0 3
41289: PLUS
41290: ST_TO_ADDR
41291: GO 41309
// length := i_to - i_from ;
41293: LD_ADDR_VAR 0 11
41297: PUSH
41298: LD_VAR 0 3
41302: PUSH
41303: LD_VAR 0 2
41307: MINUS
41308: ST_TO_ADDR
// end else
41309: GO 41372
// begin d := - 1 ;
41311: LD_ADDR_VAR 0 9
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: ST_TO_ADDR
// if i_from > i_to then
41320: LD_VAR 0 2
41324: PUSH
41325: LD_VAR 0 3
41329: GREATER
41330: IFFALSE 41350
// length := i_from - i_to else
41332: LD_ADDR_VAR 0 11
41336: PUSH
41337: LD_VAR 0 2
41341: PUSH
41342: LD_VAR 0 3
41346: MINUS
41347: ST_TO_ADDR
41348: GO 41372
// length := ( array - i_to ) + i_from ;
41350: LD_ADDR_VAR 0 11
41354: PUSH
41355: LD_VAR 0 1
41359: PUSH
41360: LD_VAR 0 3
41364: MINUS
41365: PUSH
41366: LD_VAR 0 2
41370: PLUS
41371: ST_TO_ADDR
// end ; if not length then
41372: LD_VAR 0 11
41376: NOT
41377: IFFALSE 41381
// exit ;
41379: GO 41539
// tmp := array ;
41381: LD_ADDR_VAR 0 10
41385: PUSH
41386: LD_VAR 0 1
41390: ST_TO_ADDR
// for i = 1 to length do
41391: LD_ADDR_VAR 0 6
41395: PUSH
41396: DOUBLE
41397: LD_INT 1
41399: DEC
41400: ST_TO_ADDR
41401: LD_VAR 0 11
41405: PUSH
41406: FOR_TO
41407: IFFALSE 41527
// begin for j = 1 to array do
41409: LD_ADDR_VAR 0 7
41413: PUSH
41414: DOUBLE
41415: LD_INT 1
41417: DEC
41418: ST_TO_ADDR
41419: LD_VAR 0 1
41423: PUSH
41424: FOR_TO
41425: IFFALSE 41513
// begin k := j + d ;
41427: LD_ADDR_VAR 0 8
41431: PUSH
41432: LD_VAR 0 7
41436: PUSH
41437: LD_VAR 0 9
41441: PLUS
41442: ST_TO_ADDR
// if k > array then
41443: LD_VAR 0 8
41447: PUSH
41448: LD_VAR 0 1
41452: GREATER
41453: IFFALSE 41463
// k := 1 ;
41455: LD_ADDR_VAR 0 8
41459: PUSH
41460: LD_INT 1
41462: ST_TO_ADDR
// if not k then
41463: LD_VAR 0 8
41467: NOT
41468: IFFALSE 41480
// k := array ;
41470: LD_ADDR_VAR 0 8
41474: PUSH
41475: LD_VAR 0 1
41479: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41480: LD_ADDR_VAR 0 10
41484: PUSH
41485: LD_VAR 0 10
41489: PPUSH
41490: LD_VAR 0 8
41494: PPUSH
41495: LD_VAR 0 1
41499: PUSH
41500: LD_VAR 0 7
41504: ARRAY
41505: PPUSH
41506: CALL_OW 1
41510: ST_TO_ADDR
// end ;
41511: GO 41424
41513: POP
41514: POP
// array := tmp ;
41515: LD_ADDR_VAR 0 1
41519: PUSH
41520: LD_VAR 0 10
41524: ST_TO_ADDR
// end ;
41525: GO 41406
41527: POP
41528: POP
// result := array ;
41529: LD_ADDR_VAR 0 5
41533: PUSH
41534: LD_VAR 0 1
41538: ST_TO_ADDR
// end ;
41539: LD_VAR 0 5
41543: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41544: LD_INT 0
41546: PPUSH
41547: PPUSH
// result := 0 ;
41548: LD_ADDR_VAR 0 3
41552: PUSH
41553: LD_INT 0
41555: ST_TO_ADDR
// if not array or not value in array then
41556: LD_VAR 0 1
41560: NOT
41561: PUSH
41562: LD_VAR 0 2
41566: PUSH
41567: LD_VAR 0 1
41571: IN
41572: NOT
41573: OR
41574: IFFALSE 41578
// exit ;
41576: GO 41632
// for i = 1 to array do
41578: LD_ADDR_VAR 0 4
41582: PUSH
41583: DOUBLE
41584: LD_INT 1
41586: DEC
41587: ST_TO_ADDR
41588: LD_VAR 0 1
41592: PUSH
41593: FOR_TO
41594: IFFALSE 41630
// if value = array [ i ] then
41596: LD_VAR 0 2
41600: PUSH
41601: LD_VAR 0 1
41605: PUSH
41606: LD_VAR 0 4
41610: ARRAY
41611: EQUAL
41612: IFFALSE 41628
// begin result := i ;
41614: LD_ADDR_VAR 0 3
41618: PUSH
41619: LD_VAR 0 4
41623: ST_TO_ADDR
// exit ;
41624: POP
41625: POP
41626: GO 41632
// end ;
41628: GO 41593
41630: POP
41631: POP
// end ;
41632: LD_VAR 0 3
41636: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41637: LD_INT 0
41639: PPUSH
// vc_chassis := chassis ;
41640: LD_ADDR_OWVAR 37
41644: PUSH
41645: LD_VAR 0 1
41649: ST_TO_ADDR
// vc_engine := engine ;
41650: LD_ADDR_OWVAR 39
41654: PUSH
41655: LD_VAR 0 2
41659: ST_TO_ADDR
// vc_control := control ;
41660: LD_ADDR_OWVAR 38
41664: PUSH
41665: LD_VAR 0 3
41669: ST_TO_ADDR
// vc_weapon := weapon ;
41670: LD_ADDR_OWVAR 40
41674: PUSH
41675: LD_VAR 0 4
41679: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41680: LD_ADDR_OWVAR 41
41684: PUSH
41685: LD_VAR 0 5
41689: ST_TO_ADDR
// end ;
41690: LD_VAR 0 6
41694: RET
// export function WantPlant ( unit ) ; var task ; begin
41695: LD_INT 0
41697: PPUSH
41698: PPUSH
// result := false ;
41699: LD_ADDR_VAR 0 2
41703: PUSH
41704: LD_INT 0
41706: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41707: LD_ADDR_VAR 0 3
41711: PUSH
41712: LD_VAR 0 1
41716: PPUSH
41717: CALL_OW 437
41721: ST_TO_ADDR
// if task then
41722: LD_VAR 0 3
41726: IFFALSE 41754
// if task [ 1 ] [ 1 ] = p then
41728: LD_VAR 0 3
41732: PUSH
41733: LD_INT 1
41735: ARRAY
41736: PUSH
41737: LD_INT 1
41739: ARRAY
41740: PUSH
41741: LD_STRING p
41743: EQUAL
41744: IFFALSE 41754
// result := true ;
41746: LD_ADDR_VAR 0 2
41750: PUSH
41751: LD_INT 1
41753: ST_TO_ADDR
// end ;
41754: LD_VAR 0 2
41758: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41759: LD_INT 0
41761: PPUSH
41762: PPUSH
41763: PPUSH
41764: PPUSH
// if pos < 1 then
41765: LD_VAR 0 2
41769: PUSH
41770: LD_INT 1
41772: LESS
41773: IFFALSE 41777
// exit ;
41775: GO 42080
// if pos = 1 then
41777: LD_VAR 0 2
41781: PUSH
41782: LD_INT 1
41784: EQUAL
41785: IFFALSE 41818
// result := Replace ( arr , pos [ 1 ] , value ) else
41787: LD_ADDR_VAR 0 4
41791: PUSH
41792: LD_VAR 0 1
41796: PPUSH
41797: LD_VAR 0 2
41801: PUSH
41802: LD_INT 1
41804: ARRAY
41805: PPUSH
41806: LD_VAR 0 3
41810: PPUSH
41811: CALL_OW 1
41815: ST_TO_ADDR
41816: GO 42080
// begin tmp := arr ;
41818: LD_ADDR_VAR 0 6
41822: PUSH
41823: LD_VAR 0 1
41827: ST_TO_ADDR
// s_arr := [ tmp ] ;
41828: LD_ADDR_VAR 0 7
41832: PUSH
41833: LD_VAR 0 6
41837: PUSH
41838: EMPTY
41839: LIST
41840: ST_TO_ADDR
// for i = 1 to pos - 1 do
41841: LD_ADDR_VAR 0 5
41845: PUSH
41846: DOUBLE
41847: LD_INT 1
41849: DEC
41850: ST_TO_ADDR
41851: LD_VAR 0 2
41855: PUSH
41856: LD_INT 1
41858: MINUS
41859: PUSH
41860: FOR_TO
41861: IFFALSE 41906
// begin tmp := tmp [ pos [ i ] ] ;
41863: LD_ADDR_VAR 0 6
41867: PUSH
41868: LD_VAR 0 6
41872: PUSH
41873: LD_VAR 0 2
41877: PUSH
41878: LD_VAR 0 5
41882: ARRAY
41883: ARRAY
41884: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41885: LD_ADDR_VAR 0 7
41889: PUSH
41890: LD_VAR 0 7
41894: PUSH
41895: LD_VAR 0 6
41899: PUSH
41900: EMPTY
41901: LIST
41902: ADD
41903: ST_TO_ADDR
// end ;
41904: GO 41860
41906: POP
41907: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41908: LD_ADDR_VAR 0 6
41912: PUSH
41913: LD_VAR 0 6
41917: PPUSH
41918: LD_VAR 0 2
41922: PUSH
41923: LD_VAR 0 2
41927: ARRAY
41928: PPUSH
41929: LD_VAR 0 3
41933: PPUSH
41934: CALL_OW 1
41938: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41939: LD_ADDR_VAR 0 7
41943: PUSH
41944: LD_VAR 0 7
41948: PPUSH
41949: LD_VAR 0 7
41953: PPUSH
41954: LD_VAR 0 6
41958: PPUSH
41959: CALL_OW 1
41963: ST_TO_ADDR
// for i = s_arr downto 2 do
41964: LD_ADDR_VAR 0 5
41968: PUSH
41969: DOUBLE
41970: LD_VAR 0 7
41974: INC
41975: ST_TO_ADDR
41976: LD_INT 2
41978: PUSH
41979: FOR_DOWNTO
41980: IFFALSE 42064
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41982: LD_ADDR_VAR 0 6
41986: PUSH
41987: LD_VAR 0 7
41991: PUSH
41992: LD_VAR 0 5
41996: PUSH
41997: LD_INT 1
41999: MINUS
42000: ARRAY
42001: PPUSH
42002: LD_VAR 0 2
42006: PUSH
42007: LD_VAR 0 5
42011: PUSH
42012: LD_INT 1
42014: MINUS
42015: ARRAY
42016: PPUSH
42017: LD_VAR 0 7
42021: PUSH
42022: LD_VAR 0 5
42026: ARRAY
42027: PPUSH
42028: CALL_OW 1
42032: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42033: LD_ADDR_VAR 0 7
42037: PUSH
42038: LD_VAR 0 7
42042: PPUSH
42043: LD_VAR 0 5
42047: PUSH
42048: LD_INT 1
42050: MINUS
42051: PPUSH
42052: LD_VAR 0 6
42056: PPUSH
42057: CALL_OW 1
42061: ST_TO_ADDR
// end ;
42062: GO 41979
42064: POP
42065: POP
// result := s_arr [ 1 ] ;
42066: LD_ADDR_VAR 0 4
42070: PUSH
42071: LD_VAR 0 7
42075: PUSH
42076: LD_INT 1
42078: ARRAY
42079: ST_TO_ADDR
// end ; end ;
42080: LD_VAR 0 4
42084: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42085: LD_INT 0
42087: PPUSH
42088: PPUSH
// if not list then
42089: LD_VAR 0 1
42093: NOT
42094: IFFALSE 42098
// exit ;
42096: GO 42189
// i := list [ pos1 ] ;
42098: LD_ADDR_VAR 0 5
42102: PUSH
42103: LD_VAR 0 1
42107: PUSH
42108: LD_VAR 0 2
42112: ARRAY
42113: ST_TO_ADDR
// if not i then
42114: LD_VAR 0 5
42118: NOT
42119: IFFALSE 42123
// exit ;
42121: GO 42189
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42123: LD_ADDR_VAR 0 1
42127: PUSH
42128: LD_VAR 0 1
42132: PPUSH
42133: LD_VAR 0 2
42137: PPUSH
42138: LD_VAR 0 1
42142: PUSH
42143: LD_VAR 0 3
42147: ARRAY
42148: PPUSH
42149: CALL_OW 1
42153: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42154: LD_ADDR_VAR 0 1
42158: PUSH
42159: LD_VAR 0 1
42163: PPUSH
42164: LD_VAR 0 3
42168: PPUSH
42169: LD_VAR 0 5
42173: PPUSH
42174: CALL_OW 1
42178: ST_TO_ADDR
// result := list ;
42179: LD_ADDR_VAR 0 4
42183: PUSH
42184: LD_VAR 0 1
42188: ST_TO_ADDR
// end ;
42189: LD_VAR 0 4
42193: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42194: LD_INT 0
42196: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42197: LD_ADDR_VAR 0 5
42201: PUSH
42202: LD_VAR 0 1
42206: PPUSH
42207: CALL_OW 250
42211: PPUSH
42212: LD_VAR 0 1
42216: PPUSH
42217: CALL_OW 251
42221: PPUSH
42222: LD_VAR 0 2
42226: PPUSH
42227: LD_VAR 0 3
42231: PPUSH
42232: LD_VAR 0 4
42236: PPUSH
42237: CALL 42247 0 5
42241: ST_TO_ADDR
// end ;
42242: LD_VAR 0 5
42246: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42247: LD_INT 0
42249: PPUSH
42250: PPUSH
42251: PPUSH
42252: PPUSH
// if not list then
42253: LD_VAR 0 3
42257: NOT
42258: IFFALSE 42262
// exit ;
42260: GO 42650
// result := [ ] ;
42262: LD_ADDR_VAR 0 6
42266: PUSH
42267: EMPTY
42268: ST_TO_ADDR
// for i in list do
42269: LD_ADDR_VAR 0 7
42273: PUSH
42274: LD_VAR 0 3
42278: PUSH
42279: FOR_IN
42280: IFFALSE 42482
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42282: LD_ADDR_VAR 0 9
42286: PUSH
42287: LD_VAR 0 7
42291: PPUSH
42292: LD_VAR 0 1
42296: PPUSH
42297: LD_VAR 0 2
42301: PPUSH
42302: CALL_OW 297
42306: ST_TO_ADDR
// if not result then
42307: LD_VAR 0 6
42311: NOT
42312: IFFALSE 42338
// result := [ [ i , tmp ] ] else
42314: LD_ADDR_VAR 0 6
42318: PUSH
42319: LD_VAR 0 7
42323: PUSH
42324: LD_VAR 0 9
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: EMPTY
42334: LIST
42335: ST_TO_ADDR
42336: GO 42480
// begin if result [ result ] [ 2 ] < tmp then
42338: LD_VAR 0 6
42342: PUSH
42343: LD_VAR 0 6
42347: ARRAY
42348: PUSH
42349: LD_INT 2
42351: ARRAY
42352: PUSH
42353: LD_VAR 0 9
42357: LESS
42358: IFFALSE 42400
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42360: LD_ADDR_VAR 0 6
42364: PUSH
42365: LD_VAR 0 6
42369: PPUSH
42370: LD_VAR 0 6
42374: PUSH
42375: LD_INT 1
42377: PLUS
42378: PPUSH
42379: LD_VAR 0 7
42383: PUSH
42384: LD_VAR 0 9
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PPUSH
42393: CALL_OW 2
42397: ST_TO_ADDR
42398: GO 42480
// for j = 1 to result do
42400: LD_ADDR_VAR 0 8
42404: PUSH
42405: DOUBLE
42406: LD_INT 1
42408: DEC
42409: ST_TO_ADDR
42410: LD_VAR 0 6
42414: PUSH
42415: FOR_TO
42416: IFFALSE 42478
// begin if tmp < result [ j ] [ 2 ] then
42418: LD_VAR 0 9
42422: PUSH
42423: LD_VAR 0 6
42427: PUSH
42428: LD_VAR 0 8
42432: ARRAY
42433: PUSH
42434: LD_INT 2
42436: ARRAY
42437: LESS
42438: IFFALSE 42476
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42440: LD_ADDR_VAR 0 6
42444: PUSH
42445: LD_VAR 0 6
42449: PPUSH
42450: LD_VAR 0 8
42454: PPUSH
42455: LD_VAR 0 7
42459: PUSH
42460: LD_VAR 0 9
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PPUSH
42469: CALL_OW 2
42473: ST_TO_ADDR
// break ;
42474: GO 42478
// end ; end ;
42476: GO 42415
42478: POP
42479: POP
// end ; end ;
42480: GO 42279
42482: POP
42483: POP
// if result and not asc then
42484: LD_VAR 0 6
42488: PUSH
42489: LD_VAR 0 4
42493: NOT
42494: AND
42495: IFFALSE 42570
// begin tmp := result ;
42497: LD_ADDR_VAR 0 9
42501: PUSH
42502: LD_VAR 0 6
42506: ST_TO_ADDR
// for i = tmp downto 1 do
42507: LD_ADDR_VAR 0 7
42511: PUSH
42512: DOUBLE
42513: LD_VAR 0 9
42517: INC
42518: ST_TO_ADDR
42519: LD_INT 1
42521: PUSH
42522: FOR_DOWNTO
42523: IFFALSE 42568
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42525: LD_ADDR_VAR 0 6
42529: PUSH
42530: LD_VAR 0 6
42534: PPUSH
42535: LD_VAR 0 9
42539: PUSH
42540: LD_VAR 0 7
42544: MINUS
42545: PUSH
42546: LD_INT 1
42548: PLUS
42549: PPUSH
42550: LD_VAR 0 9
42554: PUSH
42555: LD_VAR 0 7
42559: ARRAY
42560: PPUSH
42561: CALL_OW 1
42565: ST_TO_ADDR
42566: GO 42522
42568: POP
42569: POP
// end ; tmp := [ ] ;
42570: LD_ADDR_VAR 0 9
42574: PUSH
42575: EMPTY
42576: ST_TO_ADDR
// if mode then
42577: LD_VAR 0 5
42581: IFFALSE 42650
// begin for i = 1 to result do
42583: LD_ADDR_VAR 0 7
42587: PUSH
42588: DOUBLE
42589: LD_INT 1
42591: DEC
42592: ST_TO_ADDR
42593: LD_VAR 0 6
42597: PUSH
42598: FOR_TO
42599: IFFALSE 42638
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42601: LD_ADDR_VAR 0 9
42605: PUSH
42606: LD_VAR 0 9
42610: PPUSH
42611: LD_VAR 0 7
42615: PPUSH
42616: LD_VAR 0 6
42620: PUSH
42621: LD_VAR 0 7
42625: ARRAY
42626: PUSH
42627: LD_INT 1
42629: ARRAY
42630: PPUSH
42631: CALL_OW 1
42635: ST_TO_ADDR
42636: GO 42598
42638: POP
42639: POP
// result := tmp ;
42640: LD_ADDR_VAR 0 6
42644: PUSH
42645: LD_VAR 0 9
42649: ST_TO_ADDR
// end ; end ;
42650: LD_VAR 0 6
42654: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42655: LD_INT 0
42657: PPUSH
42658: PPUSH
42659: PPUSH
42660: PPUSH
42661: PPUSH
42662: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42663: LD_ADDR_VAR 0 5
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: ST_TO_ADDR
// if not x or not y then
42685: LD_VAR 0 2
42689: NOT
42690: PUSH
42691: LD_VAR 0 3
42695: NOT
42696: OR
42697: IFFALSE 42701
// exit ;
42699: GO 44353
// if not range then
42701: LD_VAR 0 4
42705: NOT
42706: IFFALSE 42716
// range := 10 ;
42708: LD_ADDR_VAR 0 4
42712: PUSH
42713: LD_INT 10
42715: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42716: LD_ADDR_VAR 0 8
42720: PUSH
42721: LD_INT 81
42723: PUSH
42724: LD_VAR 0 1
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 92
42735: PUSH
42736: LD_VAR 0 2
42740: PUSH
42741: LD_VAR 0 3
42745: PUSH
42746: LD_VAR 0 4
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 3
42759: PUSH
42760: LD_INT 21
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: PPUSH
42779: CALL_OW 69
42783: ST_TO_ADDR
// if not tmp then
42784: LD_VAR 0 8
42788: NOT
42789: IFFALSE 42793
// exit ;
42791: GO 44353
// for i in tmp do
42793: LD_ADDR_VAR 0 6
42797: PUSH
42798: LD_VAR 0 8
42802: PUSH
42803: FOR_IN
42804: IFFALSE 44328
// begin points := [ 0 , 0 , 0 ] ;
42806: LD_ADDR_VAR 0 9
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// bpoints := 1 ;
42825: LD_ADDR_VAR 0 10
42829: PUSH
42830: LD_INT 1
42832: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42833: LD_VAR 0 6
42837: PPUSH
42838: CALL_OW 247
42842: PUSH
42843: LD_INT 1
42845: DOUBLE
42846: EQUAL
42847: IFTRUE 42851
42849: GO 43429
42851: POP
// begin if GetClass ( i ) = 1 then
42852: LD_VAR 0 6
42856: PPUSH
42857: CALL_OW 257
42861: PUSH
42862: LD_INT 1
42864: EQUAL
42865: IFFALSE 42886
// points := [ 10 , 5 , 3 ] ;
42867: LD_ADDR_VAR 0 9
42871: PUSH
42872: LD_INT 10
42874: PUSH
42875: LD_INT 5
42877: PUSH
42878: LD_INT 3
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42886: LD_VAR 0 6
42890: PPUSH
42891: CALL_OW 257
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: LD_INT 3
42901: PUSH
42902: LD_INT 4
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: IN
42910: IFFALSE 42931
// points := [ 3 , 2 , 1 ] ;
42912: LD_ADDR_VAR 0 9
42916: PUSH
42917: LD_INT 3
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: LIST
42930: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42931: LD_VAR 0 6
42935: PPUSH
42936: CALL_OW 257
42940: PUSH
42941: LD_INT 5
42943: EQUAL
42944: IFFALSE 42965
// points := [ 130 , 5 , 2 ] ;
42946: LD_ADDR_VAR 0 9
42950: PUSH
42951: LD_INT 130
42953: PUSH
42954: LD_INT 5
42956: PUSH
42957: LD_INT 2
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: LIST
42964: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42965: LD_VAR 0 6
42969: PPUSH
42970: CALL_OW 257
42974: PUSH
42975: LD_INT 8
42977: EQUAL
42978: IFFALSE 42999
// points := [ 35 , 35 , 30 ] ;
42980: LD_ADDR_VAR 0 9
42984: PUSH
42985: LD_INT 35
42987: PUSH
42988: LD_INT 35
42990: PUSH
42991: LD_INT 30
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42999: LD_VAR 0 6
43003: PPUSH
43004: CALL_OW 257
43008: PUSH
43009: LD_INT 9
43011: EQUAL
43012: IFFALSE 43033
// points := [ 20 , 55 , 40 ] ;
43014: LD_ADDR_VAR 0 9
43018: PUSH
43019: LD_INT 20
43021: PUSH
43022: LD_INT 55
43024: PUSH
43025: LD_INT 40
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43033: LD_VAR 0 6
43037: PPUSH
43038: CALL_OW 257
43042: PUSH
43043: LD_INT 12
43045: PUSH
43046: LD_INT 16
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: IN
43053: IFFALSE 43074
// points := [ 5 , 3 , 2 ] ;
43055: LD_ADDR_VAR 0 9
43059: PUSH
43060: LD_INT 5
43062: PUSH
43063: LD_INT 3
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43074: LD_VAR 0 6
43078: PPUSH
43079: CALL_OW 257
43083: PUSH
43084: LD_INT 17
43086: EQUAL
43087: IFFALSE 43108
// points := [ 100 , 50 , 75 ] ;
43089: LD_ADDR_VAR 0 9
43093: PUSH
43094: LD_INT 100
43096: PUSH
43097: LD_INT 50
43099: PUSH
43100: LD_INT 75
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43108: LD_VAR 0 6
43112: PPUSH
43113: CALL_OW 257
43117: PUSH
43118: LD_INT 15
43120: EQUAL
43121: IFFALSE 43142
// points := [ 10 , 5 , 3 ] ;
43123: LD_ADDR_VAR 0 9
43127: PUSH
43128: LD_INT 10
43130: PUSH
43131: LD_INT 5
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: LIST
43141: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43142: LD_VAR 0 6
43146: PPUSH
43147: CALL_OW 257
43151: PUSH
43152: LD_INT 14
43154: EQUAL
43155: IFFALSE 43176
// points := [ 10 , 0 , 0 ] ;
43157: LD_ADDR_VAR 0 9
43161: PUSH
43162: LD_INT 10
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43176: LD_VAR 0 6
43180: PPUSH
43181: CALL_OW 257
43185: PUSH
43186: LD_INT 11
43188: EQUAL
43189: IFFALSE 43210
// points := [ 30 , 10 , 5 ] ;
43191: LD_ADDR_VAR 0 9
43195: PUSH
43196: LD_INT 30
43198: PUSH
43199: LD_INT 10
43201: PUSH
43202: LD_INT 5
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: LIST
43209: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43210: LD_VAR 0 1
43214: PPUSH
43215: LD_INT 5
43217: PPUSH
43218: CALL_OW 321
43222: PUSH
43223: LD_INT 2
43225: EQUAL
43226: IFFALSE 43243
// bpoints := bpoints * 1.8 ;
43228: LD_ADDR_VAR 0 10
43232: PUSH
43233: LD_VAR 0 10
43237: PUSH
43238: LD_REAL  1.80000000000000E+0000
43241: MUL
43242: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43243: LD_VAR 0 6
43247: PPUSH
43248: CALL_OW 257
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: LD_INT 3
43261: PUSH
43262: LD_INT 4
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: IN
43271: PUSH
43272: LD_VAR 0 1
43276: PPUSH
43277: LD_INT 51
43279: PPUSH
43280: CALL_OW 321
43284: PUSH
43285: LD_INT 2
43287: EQUAL
43288: AND
43289: IFFALSE 43306
// bpoints := bpoints * 1.2 ;
43291: LD_ADDR_VAR 0 10
43295: PUSH
43296: LD_VAR 0 10
43300: PUSH
43301: LD_REAL  1.20000000000000E+0000
43304: MUL
43305: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43306: LD_VAR 0 6
43310: PPUSH
43311: CALL_OW 257
43315: PUSH
43316: LD_INT 5
43318: PUSH
43319: LD_INT 7
43321: PUSH
43322: LD_INT 9
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: IN
43330: PUSH
43331: LD_VAR 0 1
43335: PPUSH
43336: LD_INT 52
43338: PPUSH
43339: CALL_OW 321
43343: PUSH
43344: LD_INT 2
43346: EQUAL
43347: AND
43348: IFFALSE 43365
// bpoints := bpoints * 1.5 ;
43350: LD_ADDR_VAR 0 10
43354: PUSH
43355: LD_VAR 0 10
43359: PUSH
43360: LD_REAL  1.50000000000000E+0000
43363: MUL
43364: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43365: LD_VAR 0 1
43369: PPUSH
43370: LD_INT 66
43372: PPUSH
43373: CALL_OW 321
43377: PUSH
43378: LD_INT 2
43380: EQUAL
43381: IFFALSE 43398
// bpoints := bpoints * 1.1 ;
43383: LD_ADDR_VAR 0 10
43387: PUSH
43388: LD_VAR 0 10
43392: PUSH
43393: LD_REAL  1.10000000000000E+0000
43396: MUL
43397: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43398: LD_ADDR_VAR 0 10
43402: PUSH
43403: LD_VAR 0 10
43407: PUSH
43408: LD_VAR 0 6
43412: PPUSH
43413: LD_INT 1
43415: PPUSH
43416: CALL_OW 259
43420: PUSH
43421: LD_REAL  1.15000000000000E+0000
43424: MUL
43425: MUL
43426: ST_TO_ADDR
// end ; unit_vehicle :
43427: GO 44257
43429: LD_INT 2
43431: DOUBLE
43432: EQUAL
43433: IFTRUE 43437
43435: GO 44245
43437: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43438: LD_VAR 0 6
43442: PPUSH
43443: CALL_OW 264
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: LD_INT 42
43453: PUSH
43454: LD_INT 24
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: IN
43462: IFFALSE 43483
// points := [ 25 , 5 , 3 ] ;
43464: LD_ADDR_VAR 0 9
43468: PUSH
43469: LD_INT 25
43471: PUSH
43472: LD_INT 5
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43483: LD_VAR 0 6
43487: PPUSH
43488: CALL_OW 264
43492: PUSH
43493: LD_INT 4
43495: PUSH
43496: LD_INT 43
43498: PUSH
43499: LD_INT 25
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: LIST
43506: IN
43507: IFFALSE 43528
// points := [ 40 , 15 , 5 ] ;
43509: LD_ADDR_VAR 0 9
43513: PUSH
43514: LD_INT 40
43516: PUSH
43517: LD_INT 15
43519: PUSH
43520: LD_INT 5
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43528: LD_VAR 0 6
43532: PPUSH
43533: CALL_OW 264
43537: PUSH
43538: LD_INT 3
43540: PUSH
43541: LD_INT 23
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: IN
43548: IFFALSE 43569
// points := [ 7 , 25 , 8 ] ;
43550: LD_ADDR_VAR 0 9
43554: PUSH
43555: LD_INT 7
43557: PUSH
43558: LD_INT 25
43560: PUSH
43561: LD_INT 8
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43569: LD_VAR 0 6
43573: PPUSH
43574: CALL_OW 264
43578: PUSH
43579: LD_INT 5
43581: PUSH
43582: LD_INT 27
43584: PUSH
43585: LD_INT 44
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: LIST
43592: IN
43593: IFFALSE 43614
// points := [ 14 , 50 , 16 ] ;
43595: LD_ADDR_VAR 0 9
43599: PUSH
43600: LD_INT 14
43602: PUSH
43603: LD_INT 50
43605: PUSH
43606: LD_INT 16
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: LIST
43613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43614: LD_VAR 0 6
43618: PPUSH
43619: CALL_OW 264
43623: PUSH
43624: LD_INT 6
43626: PUSH
43627: LD_INT 46
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: IN
43634: IFFALSE 43655
// points := [ 32 , 120 , 70 ] ;
43636: LD_ADDR_VAR 0 9
43640: PUSH
43641: LD_INT 32
43643: PUSH
43644: LD_INT 120
43646: PUSH
43647: LD_INT 70
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: LIST
43654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43655: LD_VAR 0 6
43659: PPUSH
43660: CALL_OW 264
43664: PUSH
43665: LD_INT 7
43667: PUSH
43668: LD_INT 28
43670: PUSH
43671: LD_INT 45
43673: PUSH
43674: LD_EXP 53
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: IN
43685: IFFALSE 43706
// points := [ 35 , 20 , 45 ] ;
43687: LD_ADDR_VAR 0 9
43691: PUSH
43692: LD_INT 35
43694: PUSH
43695: LD_INT 20
43697: PUSH
43698: LD_INT 45
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43706: LD_VAR 0 6
43710: PPUSH
43711: CALL_OW 264
43715: PUSH
43716: LD_INT 47
43718: PUSH
43719: EMPTY
43720: LIST
43721: IN
43722: IFFALSE 43743
// points := [ 67 , 45 , 75 ] ;
43724: LD_ADDR_VAR 0 9
43728: PUSH
43729: LD_INT 67
43731: PUSH
43732: LD_INT 45
43734: PUSH
43735: LD_INT 75
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43743: LD_VAR 0 6
43747: PPUSH
43748: CALL_OW 264
43752: PUSH
43753: LD_INT 26
43755: PUSH
43756: EMPTY
43757: LIST
43758: IN
43759: IFFALSE 43780
// points := [ 120 , 30 , 80 ] ;
43761: LD_ADDR_VAR 0 9
43765: PUSH
43766: LD_INT 120
43768: PUSH
43769: LD_INT 30
43771: PUSH
43772: LD_INT 80
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: LIST
43779: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43780: LD_VAR 0 6
43784: PPUSH
43785: CALL_OW 264
43789: PUSH
43790: LD_INT 22
43792: PUSH
43793: EMPTY
43794: LIST
43795: IN
43796: IFFALSE 43817
// points := [ 40 , 1 , 1 ] ;
43798: LD_ADDR_VAR 0 9
43802: PUSH
43803: LD_INT 40
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: LIST
43816: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43817: LD_VAR 0 6
43821: PPUSH
43822: CALL_OW 264
43826: PUSH
43827: LD_INT 29
43829: PUSH
43830: EMPTY
43831: LIST
43832: IN
43833: IFFALSE 43854
// points := [ 70 , 200 , 400 ] ;
43835: LD_ADDR_VAR 0 9
43839: PUSH
43840: LD_INT 70
43842: PUSH
43843: LD_INT 200
43845: PUSH
43846: LD_INT 400
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: LIST
43853: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43854: LD_VAR 0 6
43858: PPUSH
43859: CALL_OW 264
43863: PUSH
43864: LD_INT 14
43866: PUSH
43867: LD_INT 53
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: IN
43874: IFFALSE 43895
// points := [ 40 , 10 , 20 ] ;
43876: LD_ADDR_VAR 0 9
43880: PUSH
43881: LD_INT 40
43883: PUSH
43884: LD_INT 10
43886: PUSH
43887: LD_INT 20
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: LIST
43894: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43895: LD_VAR 0 6
43899: PPUSH
43900: CALL_OW 264
43904: PUSH
43905: LD_INT 9
43907: PUSH
43908: EMPTY
43909: LIST
43910: IN
43911: IFFALSE 43932
// points := [ 5 , 70 , 20 ] ;
43913: LD_ADDR_VAR 0 9
43917: PUSH
43918: LD_INT 5
43920: PUSH
43921: LD_INT 70
43923: PUSH
43924: LD_INT 20
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: LIST
43931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43932: LD_VAR 0 6
43936: PPUSH
43937: CALL_OW 264
43941: PUSH
43942: LD_INT 10
43944: PUSH
43945: EMPTY
43946: LIST
43947: IN
43948: IFFALSE 43969
// points := [ 35 , 110 , 70 ] ;
43950: LD_ADDR_VAR 0 9
43954: PUSH
43955: LD_INT 35
43957: PUSH
43958: LD_INT 110
43960: PUSH
43961: LD_INT 70
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: LIST
43968: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43969: LD_VAR 0 6
43973: PPUSH
43974: CALL_OW 265
43978: PUSH
43979: LD_INT 25
43981: EQUAL
43982: IFFALSE 44003
// points := [ 80 , 65 , 100 ] ;
43984: LD_ADDR_VAR 0 9
43988: PUSH
43989: LD_INT 80
43991: PUSH
43992: LD_INT 65
43994: PUSH
43995: LD_INT 100
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: LIST
44002: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44003: LD_VAR 0 6
44007: PPUSH
44008: CALL_OW 263
44012: PUSH
44013: LD_INT 1
44015: EQUAL
44016: IFFALSE 44051
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44018: LD_ADDR_VAR 0 10
44022: PUSH
44023: LD_VAR 0 10
44027: PUSH
44028: LD_VAR 0 6
44032: PPUSH
44033: CALL_OW 311
44037: PPUSH
44038: LD_INT 3
44040: PPUSH
44041: CALL_OW 259
44045: PUSH
44046: LD_INT 4
44048: MUL
44049: MUL
44050: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44051: LD_VAR 0 6
44055: PPUSH
44056: CALL_OW 263
44060: PUSH
44061: LD_INT 2
44063: EQUAL
44064: IFFALSE 44115
// begin j := IsControledBy ( i ) ;
44066: LD_ADDR_VAR 0 7
44070: PUSH
44071: LD_VAR 0 6
44075: PPUSH
44076: CALL_OW 312
44080: ST_TO_ADDR
// if j then
44081: LD_VAR 0 7
44085: IFFALSE 44115
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44087: LD_ADDR_VAR 0 10
44091: PUSH
44092: LD_VAR 0 10
44096: PUSH
44097: LD_VAR 0 7
44101: PPUSH
44102: LD_INT 3
44104: PPUSH
44105: CALL_OW 259
44109: PUSH
44110: LD_INT 3
44112: MUL
44113: MUL
44114: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44115: LD_VAR 0 6
44119: PPUSH
44120: CALL_OW 264
44124: PUSH
44125: LD_INT 5
44127: PUSH
44128: LD_INT 6
44130: PUSH
44131: LD_INT 46
44133: PUSH
44134: LD_INT 44
44136: PUSH
44137: LD_INT 47
44139: PUSH
44140: LD_INT 45
44142: PUSH
44143: LD_INT 28
44145: PUSH
44146: LD_INT 7
44148: PUSH
44149: LD_INT 27
44151: PUSH
44152: LD_INT 29
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: IN
44167: PUSH
44168: LD_VAR 0 1
44172: PPUSH
44173: LD_INT 52
44175: PPUSH
44176: CALL_OW 321
44180: PUSH
44181: LD_INT 2
44183: EQUAL
44184: AND
44185: IFFALSE 44202
// bpoints := bpoints * 1.2 ;
44187: LD_ADDR_VAR 0 10
44191: PUSH
44192: LD_VAR 0 10
44196: PUSH
44197: LD_REAL  1.20000000000000E+0000
44200: MUL
44201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44202: LD_VAR 0 6
44206: PPUSH
44207: CALL_OW 264
44211: PUSH
44212: LD_INT 6
44214: PUSH
44215: LD_INT 46
44217: PUSH
44218: LD_INT 47
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: LIST
44225: IN
44226: IFFALSE 44243
// bpoints := bpoints * 1.2 ;
44228: LD_ADDR_VAR 0 10
44232: PUSH
44233: LD_VAR 0 10
44237: PUSH
44238: LD_REAL  1.20000000000000E+0000
44241: MUL
44242: ST_TO_ADDR
// end ; unit_building :
44243: GO 44257
44245: LD_INT 3
44247: DOUBLE
44248: EQUAL
44249: IFTRUE 44253
44251: GO 44256
44253: POP
// ; end ;
44254: GO 44257
44256: POP
// for j = 1 to 3 do
44257: LD_ADDR_VAR 0 7
44261: PUSH
44262: DOUBLE
44263: LD_INT 1
44265: DEC
44266: ST_TO_ADDR
44267: LD_INT 3
44269: PUSH
44270: FOR_TO
44271: IFFALSE 44324
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44273: LD_ADDR_VAR 0 5
44277: PUSH
44278: LD_VAR 0 5
44282: PPUSH
44283: LD_VAR 0 7
44287: PPUSH
44288: LD_VAR 0 5
44292: PUSH
44293: LD_VAR 0 7
44297: ARRAY
44298: PUSH
44299: LD_VAR 0 9
44303: PUSH
44304: LD_VAR 0 7
44308: ARRAY
44309: PUSH
44310: LD_VAR 0 10
44314: MUL
44315: PLUS
44316: PPUSH
44317: CALL_OW 1
44321: ST_TO_ADDR
44322: GO 44270
44324: POP
44325: POP
// end ;
44326: GO 42803
44328: POP
44329: POP
// result := Replace ( result , 4 , tmp ) ;
44330: LD_ADDR_VAR 0 5
44334: PUSH
44335: LD_VAR 0 5
44339: PPUSH
44340: LD_INT 4
44342: PPUSH
44343: LD_VAR 0 8
44347: PPUSH
44348: CALL_OW 1
44352: ST_TO_ADDR
// end ;
44353: LD_VAR 0 5
44357: RET
// export function DangerAtRange ( unit , range ) ; begin
44358: LD_INT 0
44360: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44361: LD_ADDR_VAR 0 3
44365: PUSH
44366: LD_VAR 0 1
44370: PPUSH
44371: CALL_OW 255
44375: PPUSH
44376: LD_VAR 0 1
44380: PPUSH
44381: CALL_OW 250
44385: PPUSH
44386: LD_VAR 0 1
44390: PPUSH
44391: CALL_OW 251
44395: PPUSH
44396: LD_VAR 0 2
44400: PPUSH
44401: CALL 42655 0 4
44405: ST_TO_ADDR
// end ;
44406: LD_VAR 0 3
44410: RET
// export function DangerInArea ( side , area ) ; begin
44411: LD_INT 0
44413: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44414: LD_ADDR_VAR 0 3
44418: PUSH
44419: LD_VAR 0 2
44423: PPUSH
44424: LD_INT 81
44426: PUSH
44427: LD_VAR 0 1
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PPUSH
44436: CALL_OW 70
44440: ST_TO_ADDR
// end ;
44441: LD_VAR 0 3
44445: RET
// export function IsExtension ( b ) ; begin
44446: LD_INT 0
44448: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44449: LD_ADDR_VAR 0 2
44453: PUSH
44454: LD_VAR 0 1
44458: PUSH
44459: LD_INT 23
44461: PUSH
44462: LD_INT 20
44464: PUSH
44465: LD_INT 22
44467: PUSH
44468: LD_INT 17
44470: PUSH
44471: LD_INT 24
44473: PUSH
44474: LD_INT 21
44476: PUSH
44477: LD_INT 19
44479: PUSH
44480: LD_INT 16
44482: PUSH
44483: LD_INT 25
44485: PUSH
44486: LD_INT 18
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: IN
44501: ST_TO_ADDR
// end ;
44502: LD_VAR 0 2
44506: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44507: LD_INT 0
44509: PPUSH
44510: PPUSH
44511: PPUSH
// result := [ ] ;
44512: LD_ADDR_VAR 0 4
44516: PUSH
44517: EMPTY
44518: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44519: LD_ADDR_VAR 0 5
44523: PUSH
44524: LD_VAR 0 2
44528: PPUSH
44529: LD_INT 21
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PPUSH
44539: CALL_OW 70
44543: ST_TO_ADDR
// if not tmp then
44544: LD_VAR 0 5
44548: NOT
44549: IFFALSE 44553
// exit ;
44551: GO 44617
// if checkLink then
44553: LD_VAR 0 3
44557: IFFALSE 44607
// begin for i in tmp do
44559: LD_ADDR_VAR 0 6
44563: PUSH
44564: LD_VAR 0 5
44568: PUSH
44569: FOR_IN
44570: IFFALSE 44605
// if GetBase ( i ) <> base then
44572: LD_VAR 0 6
44576: PPUSH
44577: CALL_OW 274
44581: PUSH
44582: LD_VAR 0 1
44586: NONEQUAL
44587: IFFALSE 44603
// ComLinkToBase ( base , i ) ;
44589: LD_VAR 0 1
44593: PPUSH
44594: LD_VAR 0 6
44598: PPUSH
44599: CALL_OW 169
44603: GO 44569
44605: POP
44606: POP
// end ; result := tmp ;
44607: LD_ADDR_VAR 0 4
44611: PUSH
44612: LD_VAR 0 5
44616: ST_TO_ADDR
// end ;
44617: LD_VAR 0 4
44621: RET
// export function ComComplete ( units , b ) ; var i ; begin
44622: LD_INT 0
44624: PPUSH
44625: PPUSH
// if not units then
44626: LD_VAR 0 1
44630: NOT
44631: IFFALSE 44635
// exit ;
44633: GO 44725
// for i in units do
44635: LD_ADDR_VAR 0 4
44639: PUSH
44640: LD_VAR 0 1
44644: PUSH
44645: FOR_IN
44646: IFFALSE 44723
// if BuildingStatus ( b ) = bs_build then
44648: LD_VAR 0 2
44652: PPUSH
44653: CALL_OW 461
44657: PUSH
44658: LD_INT 1
44660: EQUAL
44661: IFFALSE 44721
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44663: LD_VAR 0 4
44667: PPUSH
44668: LD_STRING h
44670: PUSH
44671: LD_VAR 0 2
44675: PPUSH
44676: CALL_OW 250
44680: PUSH
44681: LD_VAR 0 2
44685: PPUSH
44686: CALL_OW 251
44690: PUSH
44691: LD_VAR 0 2
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: PUSH
44714: EMPTY
44715: LIST
44716: PPUSH
44717: CALL_OW 446
44721: GO 44645
44723: POP
44724: POP
// end ;
44725: LD_VAR 0 3
44729: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44730: LD_INT 0
44732: PPUSH
44733: PPUSH
44734: PPUSH
44735: PPUSH
44736: PPUSH
44737: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44738: LD_VAR 0 1
44742: NOT
44743: PUSH
44744: LD_VAR 0 1
44748: PPUSH
44749: CALL_OW 263
44753: PUSH
44754: LD_INT 2
44756: NONEQUAL
44757: OR
44758: IFFALSE 44762
// exit ;
44760: GO 45078
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44762: LD_ADDR_VAR 0 6
44766: PUSH
44767: LD_INT 22
44769: PUSH
44770: LD_VAR 0 1
44774: PPUSH
44775: CALL_OW 255
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: LD_INT 30
44789: PUSH
44790: LD_INT 36
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 34
44799: PUSH
44800: LD_INT 31
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: LIST
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PPUSH
44816: CALL_OW 69
44820: ST_TO_ADDR
// if not tmp then
44821: LD_VAR 0 6
44825: NOT
44826: IFFALSE 44830
// exit ;
44828: GO 45078
// result := [ ] ;
44830: LD_ADDR_VAR 0 2
44834: PUSH
44835: EMPTY
44836: ST_TO_ADDR
// for i in tmp do
44837: LD_ADDR_VAR 0 3
44841: PUSH
44842: LD_VAR 0 6
44846: PUSH
44847: FOR_IN
44848: IFFALSE 44919
// begin t := UnitsInside ( i ) ;
44850: LD_ADDR_VAR 0 4
44854: PUSH
44855: LD_VAR 0 3
44859: PPUSH
44860: CALL_OW 313
44864: ST_TO_ADDR
// if t then
44865: LD_VAR 0 4
44869: IFFALSE 44917
// for j in t do
44871: LD_ADDR_VAR 0 7
44875: PUSH
44876: LD_VAR 0 4
44880: PUSH
44881: FOR_IN
44882: IFFALSE 44915
// result := Replace ( result , result + 1 , j ) ;
44884: LD_ADDR_VAR 0 2
44888: PUSH
44889: LD_VAR 0 2
44893: PPUSH
44894: LD_VAR 0 2
44898: PUSH
44899: LD_INT 1
44901: PLUS
44902: PPUSH
44903: LD_VAR 0 7
44907: PPUSH
44908: CALL_OW 1
44912: ST_TO_ADDR
44913: GO 44881
44915: POP
44916: POP
// end ;
44917: GO 44847
44919: POP
44920: POP
// if not result then
44921: LD_VAR 0 2
44925: NOT
44926: IFFALSE 44930
// exit ;
44928: GO 45078
// mech := result [ 1 ] ;
44930: LD_ADDR_VAR 0 5
44934: PUSH
44935: LD_VAR 0 2
44939: PUSH
44940: LD_INT 1
44942: ARRAY
44943: ST_TO_ADDR
// if result > 1 then
44944: LD_VAR 0 2
44948: PUSH
44949: LD_INT 1
44951: GREATER
44952: IFFALSE 45064
// begin for i = 2 to result do
44954: LD_ADDR_VAR 0 3
44958: PUSH
44959: DOUBLE
44960: LD_INT 2
44962: DEC
44963: ST_TO_ADDR
44964: LD_VAR 0 2
44968: PUSH
44969: FOR_TO
44970: IFFALSE 45062
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44972: LD_ADDR_VAR 0 4
44976: PUSH
44977: LD_VAR 0 2
44981: PUSH
44982: LD_VAR 0 3
44986: ARRAY
44987: PPUSH
44988: LD_INT 3
44990: PPUSH
44991: CALL_OW 259
44995: PUSH
44996: LD_VAR 0 2
45000: PUSH
45001: LD_VAR 0 3
45005: ARRAY
45006: PPUSH
45007: CALL_OW 432
45011: MINUS
45012: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45013: LD_VAR 0 4
45017: PUSH
45018: LD_VAR 0 5
45022: PPUSH
45023: LD_INT 3
45025: PPUSH
45026: CALL_OW 259
45030: PUSH
45031: LD_VAR 0 5
45035: PPUSH
45036: CALL_OW 432
45040: MINUS
45041: GREATEREQUAL
45042: IFFALSE 45060
// mech := result [ i ] ;
45044: LD_ADDR_VAR 0 5
45048: PUSH
45049: LD_VAR 0 2
45053: PUSH
45054: LD_VAR 0 3
45058: ARRAY
45059: ST_TO_ADDR
// end ;
45060: GO 44969
45062: POP
45063: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45064: LD_VAR 0 1
45068: PPUSH
45069: LD_VAR 0 5
45073: PPUSH
45074: CALL_OW 135
// end ;
45078: LD_VAR 0 2
45082: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45083: LD_INT 0
45085: PPUSH
45086: PPUSH
45087: PPUSH
45088: PPUSH
45089: PPUSH
45090: PPUSH
45091: PPUSH
45092: PPUSH
45093: PPUSH
45094: PPUSH
45095: PPUSH
45096: PPUSH
45097: PPUSH
// result := [ ] ;
45098: LD_ADDR_VAR 0 7
45102: PUSH
45103: EMPTY
45104: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45105: LD_VAR 0 1
45109: PPUSH
45110: CALL_OW 266
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: IN
45125: NOT
45126: IFFALSE 45130
// exit ;
45128: GO 46764
// if name then
45130: LD_VAR 0 3
45134: IFFALSE 45150
// SetBName ( base_dep , name ) ;
45136: LD_VAR 0 1
45140: PPUSH
45141: LD_VAR 0 3
45145: PPUSH
45146: CALL_OW 500
// base := GetBase ( base_dep ) ;
45150: LD_ADDR_VAR 0 15
45154: PUSH
45155: LD_VAR 0 1
45159: PPUSH
45160: CALL_OW 274
45164: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45165: LD_ADDR_VAR 0 16
45169: PUSH
45170: LD_VAR 0 1
45174: PPUSH
45175: CALL_OW 255
45179: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45180: LD_ADDR_VAR 0 17
45184: PUSH
45185: LD_VAR 0 1
45189: PPUSH
45190: CALL_OW 248
45194: ST_TO_ADDR
// if sources then
45195: LD_VAR 0 5
45199: IFFALSE 45246
// for i = 1 to 3 do
45201: LD_ADDR_VAR 0 8
45205: PUSH
45206: DOUBLE
45207: LD_INT 1
45209: DEC
45210: ST_TO_ADDR
45211: LD_INT 3
45213: PUSH
45214: FOR_TO
45215: IFFALSE 45244
// AddResourceType ( base , i , sources [ i ] ) ;
45217: LD_VAR 0 15
45221: PPUSH
45222: LD_VAR 0 8
45226: PPUSH
45227: LD_VAR 0 5
45231: PUSH
45232: LD_VAR 0 8
45236: ARRAY
45237: PPUSH
45238: CALL_OW 276
45242: GO 45214
45244: POP
45245: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45246: LD_ADDR_VAR 0 18
45250: PUSH
45251: LD_VAR 0 15
45255: PPUSH
45256: LD_VAR 0 2
45260: PPUSH
45261: LD_INT 1
45263: PPUSH
45264: CALL 44507 0 3
45268: ST_TO_ADDR
// InitHc ;
45269: CALL_OW 19
// InitUc ;
45273: CALL_OW 18
// uc_side := side ;
45277: LD_ADDR_OWVAR 20
45281: PUSH
45282: LD_VAR 0 16
45286: ST_TO_ADDR
// uc_nation := nation ;
45287: LD_ADDR_OWVAR 21
45291: PUSH
45292: LD_VAR 0 17
45296: ST_TO_ADDR
// if buildings then
45297: LD_VAR 0 18
45301: IFFALSE 46623
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45303: LD_ADDR_VAR 0 19
45307: PUSH
45308: LD_VAR 0 18
45312: PPUSH
45313: LD_INT 2
45315: PUSH
45316: LD_INT 30
45318: PUSH
45319: LD_INT 29
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 30
45328: PUSH
45329: LD_INT 30
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: PPUSH
45341: CALL_OW 72
45345: ST_TO_ADDR
// if tmp then
45346: LD_VAR 0 19
45350: IFFALSE 45398
// for i in tmp do
45352: LD_ADDR_VAR 0 8
45356: PUSH
45357: LD_VAR 0 19
45361: PUSH
45362: FOR_IN
45363: IFFALSE 45396
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45365: LD_VAR 0 8
45369: PPUSH
45370: CALL_OW 250
45374: PPUSH
45375: LD_VAR 0 8
45379: PPUSH
45380: CALL_OW 251
45384: PPUSH
45385: LD_VAR 0 16
45389: PPUSH
45390: CALL_OW 441
45394: GO 45362
45396: POP
45397: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45398: LD_VAR 0 18
45402: PPUSH
45403: LD_INT 2
45405: PUSH
45406: LD_INT 30
45408: PUSH
45409: LD_INT 32
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 30
45418: PUSH
45419: LD_INT 33
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: LIST
45430: PPUSH
45431: CALL_OW 72
45435: IFFALSE 45523
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45437: LD_ADDR_VAR 0 8
45441: PUSH
45442: LD_VAR 0 18
45446: PPUSH
45447: LD_INT 2
45449: PUSH
45450: LD_INT 30
45452: PUSH
45453: LD_INT 32
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 30
45462: PUSH
45463: LD_INT 33
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: LIST
45474: PPUSH
45475: CALL_OW 72
45479: PUSH
45480: FOR_IN
45481: IFFALSE 45521
// begin if not GetBWeapon ( i ) then
45483: LD_VAR 0 8
45487: PPUSH
45488: CALL_OW 269
45492: NOT
45493: IFFALSE 45519
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45495: LD_VAR 0 8
45499: PPUSH
45500: LD_VAR 0 8
45504: PPUSH
45505: LD_VAR 0 2
45509: PPUSH
45510: CALL 46769 0 2
45514: PPUSH
45515: CALL_OW 431
// end ;
45519: GO 45480
45521: POP
45522: POP
// end ; for i = 1 to personel do
45523: LD_ADDR_VAR 0 8
45527: PUSH
45528: DOUBLE
45529: LD_INT 1
45531: DEC
45532: ST_TO_ADDR
45533: LD_VAR 0 6
45537: PUSH
45538: FOR_TO
45539: IFFALSE 46603
// begin if i > 4 then
45541: LD_VAR 0 8
45545: PUSH
45546: LD_INT 4
45548: GREATER
45549: IFFALSE 45553
// break ;
45551: GO 46603
// case i of 1 :
45553: LD_VAR 0 8
45557: PUSH
45558: LD_INT 1
45560: DOUBLE
45561: EQUAL
45562: IFTRUE 45566
45564: GO 45646
45566: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45567: LD_ADDR_VAR 0 12
45571: PUSH
45572: LD_VAR 0 18
45576: PPUSH
45577: LD_INT 22
45579: PUSH
45580: LD_VAR 0 16
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 58
45591: PUSH
45592: EMPTY
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: LD_INT 30
45600: PUSH
45601: LD_INT 32
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 30
45610: PUSH
45611: LD_INT 4
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 30
45620: PUSH
45621: LD_INT 5
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: PPUSH
45639: CALL_OW 72
45643: ST_TO_ADDR
45644: GO 45868
45646: LD_INT 2
45648: DOUBLE
45649: EQUAL
45650: IFTRUE 45654
45652: GO 45716
45654: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45655: LD_ADDR_VAR 0 12
45659: PUSH
45660: LD_VAR 0 18
45664: PPUSH
45665: LD_INT 22
45667: PUSH
45668: LD_VAR 0 16
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: LD_INT 30
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 30
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: LIST
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PPUSH
45709: CALL_OW 72
45713: ST_TO_ADDR
45714: GO 45868
45716: LD_INT 3
45718: DOUBLE
45719: EQUAL
45720: IFTRUE 45724
45722: GO 45786
45724: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45725: LD_ADDR_VAR 0 12
45729: PUSH
45730: LD_VAR 0 18
45734: PPUSH
45735: LD_INT 22
45737: PUSH
45738: LD_VAR 0 16
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 30
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 30
45762: PUSH
45763: LD_INT 3
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: LIST
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PPUSH
45779: CALL_OW 72
45783: ST_TO_ADDR
45784: GO 45868
45786: LD_INT 4
45788: DOUBLE
45789: EQUAL
45790: IFTRUE 45794
45792: GO 45867
45794: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45795: LD_ADDR_VAR 0 12
45799: PUSH
45800: LD_VAR 0 18
45804: PPUSH
45805: LD_INT 22
45807: PUSH
45808: LD_VAR 0 16
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: LD_INT 30
45822: PUSH
45823: LD_INT 6
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 30
45832: PUSH
45833: LD_INT 7
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 30
45842: PUSH
45843: LD_INT 8
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PPUSH
45860: CALL_OW 72
45864: ST_TO_ADDR
45865: GO 45868
45867: POP
// if i = 1 then
45868: LD_VAR 0 8
45872: PUSH
45873: LD_INT 1
45875: EQUAL
45876: IFFALSE 45987
// begin tmp := [ ] ;
45878: LD_ADDR_VAR 0 19
45882: PUSH
45883: EMPTY
45884: ST_TO_ADDR
// for j in f do
45885: LD_ADDR_VAR 0 9
45889: PUSH
45890: LD_VAR 0 12
45894: PUSH
45895: FOR_IN
45896: IFFALSE 45969
// if GetBType ( j ) = b_bunker then
45898: LD_VAR 0 9
45902: PPUSH
45903: CALL_OW 266
45907: PUSH
45908: LD_INT 32
45910: EQUAL
45911: IFFALSE 45938
// tmp := Insert ( tmp , 1 , j ) else
45913: LD_ADDR_VAR 0 19
45917: PUSH
45918: LD_VAR 0 19
45922: PPUSH
45923: LD_INT 1
45925: PPUSH
45926: LD_VAR 0 9
45930: PPUSH
45931: CALL_OW 2
45935: ST_TO_ADDR
45936: GO 45967
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45938: LD_ADDR_VAR 0 19
45942: PUSH
45943: LD_VAR 0 19
45947: PPUSH
45948: LD_VAR 0 19
45952: PUSH
45953: LD_INT 1
45955: PLUS
45956: PPUSH
45957: LD_VAR 0 9
45961: PPUSH
45962: CALL_OW 2
45966: ST_TO_ADDR
45967: GO 45895
45969: POP
45970: POP
// if tmp then
45971: LD_VAR 0 19
45975: IFFALSE 45987
// f := tmp ;
45977: LD_ADDR_VAR 0 12
45981: PUSH
45982: LD_VAR 0 19
45986: ST_TO_ADDR
// end ; x := personel [ i ] ;
45987: LD_ADDR_VAR 0 13
45991: PUSH
45992: LD_VAR 0 6
45996: PUSH
45997: LD_VAR 0 8
46001: ARRAY
46002: ST_TO_ADDR
// if x = - 1 then
46003: LD_VAR 0 13
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: EQUAL
46012: IFFALSE 46221
// begin for j in f do
46014: LD_ADDR_VAR 0 9
46018: PUSH
46019: LD_VAR 0 12
46023: PUSH
46024: FOR_IN
46025: IFFALSE 46217
// repeat InitHc ;
46027: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46031: LD_VAR 0 9
46035: PPUSH
46036: CALL_OW 266
46040: PUSH
46041: LD_INT 5
46043: EQUAL
46044: IFFALSE 46114
// begin if UnitsInside ( j ) < 3 then
46046: LD_VAR 0 9
46050: PPUSH
46051: CALL_OW 313
46055: PUSH
46056: LD_INT 3
46058: LESS
46059: IFFALSE 46095
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46061: LD_INT 0
46063: PPUSH
46064: LD_INT 5
46066: PUSH
46067: LD_INT 8
46069: PUSH
46070: LD_INT 9
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: PUSH
46078: LD_VAR 0 17
46082: ARRAY
46083: PPUSH
46084: LD_VAR 0 4
46088: PPUSH
46089: CALL_OW 380
46093: GO 46112
// PrepareHuman ( false , i , skill ) ;
46095: LD_INT 0
46097: PPUSH
46098: LD_VAR 0 8
46102: PPUSH
46103: LD_VAR 0 4
46107: PPUSH
46108: CALL_OW 380
// end else
46112: GO 46131
// PrepareHuman ( false , i , skill ) ;
46114: LD_INT 0
46116: PPUSH
46117: LD_VAR 0 8
46121: PPUSH
46122: LD_VAR 0 4
46126: PPUSH
46127: CALL_OW 380
// un := CreateHuman ;
46131: LD_ADDR_VAR 0 14
46135: PUSH
46136: CALL_OW 44
46140: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46141: LD_ADDR_VAR 0 7
46145: PUSH
46146: LD_VAR 0 7
46150: PPUSH
46151: LD_INT 1
46153: PPUSH
46154: LD_VAR 0 14
46158: PPUSH
46159: CALL_OW 2
46163: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46164: LD_VAR 0 14
46168: PPUSH
46169: LD_VAR 0 9
46173: PPUSH
46174: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46178: LD_VAR 0 9
46182: PPUSH
46183: CALL_OW 313
46187: PUSH
46188: LD_INT 6
46190: EQUAL
46191: PUSH
46192: LD_VAR 0 9
46196: PPUSH
46197: CALL_OW 266
46201: PUSH
46202: LD_INT 32
46204: PUSH
46205: LD_INT 31
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: IN
46212: OR
46213: IFFALSE 46027
46215: GO 46024
46217: POP
46218: POP
// end else
46219: GO 46601
// for j = 1 to x do
46221: LD_ADDR_VAR 0 9
46225: PUSH
46226: DOUBLE
46227: LD_INT 1
46229: DEC
46230: ST_TO_ADDR
46231: LD_VAR 0 13
46235: PUSH
46236: FOR_TO
46237: IFFALSE 46599
// begin InitHc ;
46239: CALL_OW 19
// if not f then
46243: LD_VAR 0 12
46247: NOT
46248: IFFALSE 46337
// begin PrepareHuman ( false , i , skill ) ;
46250: LD_INT 0
46252: PPUSH
46253: LD_VAR 0 8
46257: PPUSH
46258: LD_VAR 0 4
46262: PPUSH
46263: CALL_OW 380
// un := CreateHuman ;
46267: LD_ADDR_VAR 0 14
46271: PUSH
46272: CALL_OW 44
46276: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46277: LD_ADDR_VAR 0 7
46281: PUSH
46282: LD_VAR 0 7
46286: PPUSH
46287: LD_INT 1
46289: PPUSH
46290: LD_VAR 0 14
46294: PPUSH
46295: CALL_OW 2
46299: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46300: LD_VAR 0 14
46304: PPUSH
46305: LD_VAR 0 1
46309: PPUSH
46310: CALL_OW 250
46314: PPUSH
46315: LD_VAR 0 1
46319: PPUSH
46320: CALL_OW 251
46324: PPUSH
46325: LD_INT 10
46327: PPUSH
46328: LD_INT 0
46330: PPUSH
46331: CALL_OW 50
// continue ;
46335: GO 46236
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46337: LD_VAR 0 12
46341: PUSH
46342: LD_INT 1
46344: ARRAY
46345: PPUSH
46346: CALL_OW 313
46350: PUSH
46351: LD_VAR 0 12
46355: PUSH
46356: LD_INT 1
46358: ARRAY
46359: PPUSH
46360: CALL_OW 266
46364: PUSH
46365: LD_INT 32
46367: PUSH
46368: LD_INT 31
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: IN
46375: AND
46376: PUSH
46377: LD_VAR 0 12
46381: PUSH
46382: LD_INT 1
46384: ARRAY
46385: PPUSH
46386: CALL_OW 313
46390: PUSH
46391: LD_INT 6
46393: EQUAL
46394: OR
46395: IFFALSE 46415
// f := Delete ( f , 1 ) ;
46397: LD_ADDR_VAR 0 12
46401: PUSH
46402: LD_VAR 0 12
46406: PPUSH
46407: LD_INT 1
46409: PPUSH
46410: CALL_OW 3
46414: ST_TO_ADDR
// if not f then
46415: LD_VAR 0 12
46419: NOT
46420: IFFALSE 46438
// begin x := x + 2 ;
46422: LD_ADDR_VAR 0 13
46426: PUSH
46427: LD_VAR 0 13
46431: PUSH
46432: LD_INT 2
46434: PLUS
46435: ST_TO_ADDR
// continue ;
46436: GO 46236
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46438: LD_VAR 0 12
46442: PUSH
46443: LD_INT 1
46445: ARRAY
46446: PPUSH
46447: CALL_OW 266
46451: PUSH
46452: LD_INT 5
46454: EQUAL
46455: IFFALSE 46529
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46457: LD_VAR 0 12
46461: PUSH
46462: LD_INT 1
46464: ARRAY
46465: PPUSH
46466: CALL_OW 313
46470: PUSH
46471: LD_INT 3
46473: LESS
46474: IFFALSE 46510
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46476: LD_INT 0
46478: PPUSH
46479: LD_INT 5
46481: PUSH
46482: LD_INT 8
46484: PUSH
46485: LD_INT 9
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: LIST
46492: PUSH
46493: LD_VAR 0 17
46497: ARRAY
46498: PPUSH
46499: LD_VAR 0 4
46503: PPUSH
46504: CALL_OW 380
46508: GO 46527
// PrepareHuman ( false , i , skill ) ;
46510: LD_INT 0
46512: PPUSH
46513: LD_VAR 0 8
46517: PPUSH
46518: LD_VAR 0 4
46522: PPUSH
46523: CALL_OW 380
// end else
46527: GO 46546
// PrepareHuman ( false , i , skill ) ;
46529: LD_INT 0
46531: PPUSH
46532: LD_VAR 0 8
46536: PPUSH
46537: LD_VAR 0 4
46541: PPUSH
46542: CALL_OW 380
// un := CreateHuman ;
46546: LD_ADDR_VAR 0 14
46550: PUSH
46551: CALL_OW 44
46555: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46556: LD_ADDR_VAR 0 7
46560: PUSH
46561: LD_VAR 0 7
46565: PPUSH
46566: LD_INT 1
46568: PPUSH
46569: LD_VAR 0 14
46573: PPUSH
46574: CALL_OW 2
46578: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46579: LD_VAR 0 14
46583: PPUSH
46584: LD_VAR 0 12
46588: PUSH
46589: LD_INT 1
46591: ARRAY
46592: PPUSH
46593: CALL_OW 52
// end ;
46597: GO 46236
46599: POP
46600: POP
// end ;
46601: GO 45538
46603: POP
46604: POP
// result := result ^ buildings ;
46605: LD_ADDR_VAR 0 7
46609: PUSH
46610: LD_VAR 0 7
46614: PUSH
46615: LD_VAR 0 18
46619: ADD
46620: ST_TO_ADDR
// end else
46621: GO 46764
// begin for i = 1 to personel do
46623: LD_ADDR_VAR 0 8
46627: PUSH
46628: DOUBLE
46629: LD_INT 1
46631: DEC
46632: ST_TO_ADDR
46633: LD_VAR 0 6
46637: PUSH
46638: FOR_TO
46639: IFFALSE 46762
// begin if i > 4 then
46641: LD_VAR 0 8
46645: PUSH
46646: LD_INT 4
46648: GREATER
46649: IFFALSE 46653
// break ;
46651: GO 46762
// x := personel [ i ] ;
46653: LD_ADDR_VAR 0 13
46657: PUSH
46658: LD_VAR 0 6
46662: PUSH
46663: LD_VAR 0 8
46667: ARRAY
46668: ST_TO_ADDR
// if x = - 1 then
46669: LD_VAR 0 13
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: EQUAL
46678: IFFALSE 46682
// continue ;
46680: GO 46638
// PrepareHuman ( false , i , skill ) ;
46682: LD_INT 0
46684: PPUSH
46685: LD_VAR 0 8
46689: PPUSH
46690: LD_VAR 0 4
46694: PPUSH
46695: CALL_OW 380
// un := CreateHuman ;
46699: LD_ADDR_VAR 0 14
46703: PUSH
46704: CALL_OW 44
46708: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46709: LD_VAR 0 14
46713: PPUSH
46714: LD_VAR 0 1
46718: PPUSH
46719: CALL_OW 250
46723: PPUSH
46724: LD_VAR 0 1
46728: PPUSH
46729: CALL_OW 251
46733: PPUSH
46734: LD_INT 10
46736: PPUSH
46737: LD_INT 0
46739: PPUSH
46740: CALL_OW 50
// result := result ^ un ;
46744: LD_ADDR_VAR 0 7
46748: PUSH
46749: LD_VAR 0 7
46753: PUSH
46754: LD_VAR 0 14
46758: ADD
46759: ST_TO_ADDR
// end ;
46760: GO 46638
46762: POP
46763: POP
// end ; end ;
46764: LD_VAR 0 7
46768: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46769: LD_INT 0
46771: PPUSH
46772: PPUSH
46773: PPUSH
46774: PPUSH
46775: PPUSH
46776: PPUSH
46777: PPUSH
46778: PPUSH
46779: PPUSH
46780: PPUSH
46781: PPUSH
46782: PPUSH
46783: PPUSH
46784: PPUSH
46785: PPUSH
46786: PPUSH
// result := false ;
46787: LD_ADDR_VAR 0 3
46791: PUSH
46792: LD_INT 0
46794: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46795: LD_VAR 0 1
46799: NOT
46800: PUSH
46801: LD_VAR 0 1
46805: PPUSH
46806: CALL_OW 266
46810: PUSH
46811: LD_INT 32
46813: PUSH
46814: LD_INT 33
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: IN
46821: NOT
46822: OR
46823: IFFALSE 46827
// exit ;
46825: GO 47936
// nat := GetNation ( tower ) ;
46827: LD_ADDR_VAR 0 12
46831: PUSH
46832: LD_VAR 0 1
46836: PPUSH
46837: CALL_OW 248
46841: ST_TO_ADDR
// side := GetSide ( tower ) ;
46842: LD_ADDR_VAR 0 16
46846: PUSH
46847: LD_VAR 0 1
46851: PPUSH
46852: CALL_OW 255
46856: ST_TO_ADDR
// x := GetX ( tower ) ;
46857: LD_ADDR_VAR 0 10
46861: PUSH
46862: LD_VAR 0 1
46866: PPUSH
46867: CALL_OW 250
46871: ST_TO_ADDR
// y := GetY ( tower ) ;
46872: LD_ADDR_VAR 0 11
46876: PUSH
46877: LD_VAR 0 1
46881: PPUSH
46882: CALL_OW 251
46886: ST_TO_ADDR
// if not x or not y then
46887: LD_VAR 0 10
46891: NOT
46892: PUSH
46893: LD_VAR 0 11
46897: NOT
46898: OR
46899: IFFALSE 46903
// exit ;
46901: GO 47936
// weapon := 0 ;
46903: LD_ADDR_VAR 0 18
46907: PUSH
46908: LD_INT 0
46910: ST_TO_ADDR
// fac_list := [ ] ;
46911: LD_ADDR_VAR 0 17
46915: PUSH
46916: EMPTY
46917: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46918: LD_ADDR_VAR 0 6
46922: PUSH
46923: LD_VAR 0 1
46927: PPUSH
46928: CALL_OW 274
46932: PPUSH
46933: LD_VAR 0 2
46937: PPUSH
46938: LD_INT 0
46940: PPUSH
46941: CALL 44507 0 3
46945: PPUSH
46946: LD_INT 30
46948: PUSH
46949: LD_INT 3
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PPUSH
46956: CALL_OW 72
46960: ST_TO_ADDR
// if not factories then
46961: LD_VAR 0 6
46965: NOT
46966: IFFALSE 46970
// exit ;
46968: GO 47936
// for i in factories do
46970: LD_ADDR_VAR 0 8
46974: PUSH
46975: LD_VAR 0 6
46979: PUSH
46980: FOR_IN
46981: IFFALSE 47006
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46983: LD_ADDR_VAR 0 17
46987: PUSH
46988: LD_VAR 0 17
46992: PUSH
46993: LD_VAR 0 8
46997: PPUSH
46998: CALL_OW 478
47002: UNION
47003: ST_TO_ADDR
47004: GO 46980
47006: POP
47007: POP
// if not fac_list then
47008: LD_VAR 0 17
47012: NOT
47013: IFFALSE 47017
// exit ;
47015: GO 47936
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47017: LD_ADDR_VAR 0 5
47021: PUSH
47022: LD_INT 4
47024: PUSH
47025: LD_INT 5
47027: PUSH
47028: LD_INT 9
47030: PUSH
47031: LD_INT 10
47033: PUSH
47034: LD_INT 6
47036: PUSH
47037: LD_INT 7
47039: PUSH
47040: LD_INT 11
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 27
47054: PUSH
47055: LD_INT 28
47057: PUSH
47058: LD_INT 26
47060: PUSH
47061: LD_INT 30
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 43
47072: PUSH
47073: LD_INT 44
47075: PUSH
47076: LD_INT 46
47078: PUSH
47079: LD_INT 45
47081: PUSH
47082: LD_INT 47
47084: PUSH
47085: LD_INT 49
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: LIST
47100: PUSH
47101: LD_VAR 0 12
47105: ARRAY
47106: ST_TO_ADDR
// list := list isect fac_list ;
47107: LD_ADDR_VAR 0 5
47111: PUSH
47112: LD_VAR 0 5
47116: PUSH
47117: LD_VAR 0 17
47121: ISECT
47122: ST_TO_ADDR
// if not list then
47123: LD_VAR 0 5
47127: NOT
47128: IFFALSE 47132
// exit ;
47130: GO 47936
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47132: LD_VAR 0 12
47136: PUSH
47137: LD_INT 3
47139: EQUAL
47140: PUSH
47141: LD_INT 49
47143: PUSH
47144: LD_VAR 0 5
47148: IN
47149: AND
47150: PUSH
47151: LD_INT 31
47153: PPUSH
47154: LD_VAR 0 16
47158: PPUSH
47159: CALL_OW 321
47163: PUSH
47164: LD_INT 2
47166: EQUAL
47167: AND
47168: IFFALSE 47228
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47170: LD_INT 22
47172: PUSH
47173: LD_VAR 0 16
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 35
47184: PUSH
47185: LD_INT 49
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 91
47194: PUSH
47195: LD_VAR 0 1
47199: PUSH
47200: LD_INT 10
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: LIST
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: LIST
47212: PPUSH
47213: CALL_OW 69
47217: NOT
47218: IFFALSE 47228
// weapon := ru_time_lapser ;
47220: LD_ADDR_VAR 0 18
47224: PUSH
47225: LD_INT 49
47227: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47228: LD_VAR 0 12
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: LD_INT 2
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: IN
47243: PUSH
47244: LD_INT 11
47246: PUSH
47247: LD_VAR 0 5
47251: IN
47252: PUSH
47253: LD_INT 30
47255: PUSH
47256: LD_VAR 0 5
47260: IN
47261: OR
47262: AND
47263: PUSH
47264: LD_INT 6
47266: PPUSH
47267: LD_VAR 0 16
47271: PPUSH
47272: CALL_OW 321
47276: PUSH
47277: LD_INT 2
47279: EQUAL
47280: AND
47281: IFFALSE 47446
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47283: LD_INT 22
47285: PUSH
47286: LD_VAR 0 16
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 35
47300: PUSH
47301: LD_INT 11
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 35
47310: PUSH
47311: LD_INT 30
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 91
47325: PUSH
47326: LD_VAR 0 1
47330: PUSH
47331: LD_INT 18
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: LIST
47343: PPUSH
47344: CALL_OW 69
47348: NOT
47349: PUSH
47350: LD_INT 22
47352: PUSH
47353: LD_VAR 0 16
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: LD_INT 30
47367: PUSH
47368: LD_INT 32
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 30
47377: PUSH
47378: LD_INT 33
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 91
47392: PUSH
47393: LD_VAR 0 1
47397: PUSH
47398: LD_INT 12
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: LIST
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: PUSH
47411: EMPTY
47412: LIST
47413: PPUSH
47414: CALL_OW 69
47418: PUSH
47419: LD_INT 2
47421: GREATER
47422: AND
47423: IFFALSE 47446
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47425: LD_ADDR_VAR 0 18
47429: PUSH
47430: LD_INT 11
47432: PUSH
47433: LD_INT 30
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_VAR 0 12
47444: ARRAY
47445: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47446: LD_VAR 0 18
47450: NOT
47451: PUSH
47452: LD_INT 40
47454: PPUSH
47455: LD_VAR 0 16
47459: PPUSH
47460: CALL_OW 321
47464: PUSH
47465: LD_INT 2
47467: EQUAL
47468: AND
47469: PUSH
47470: LD_INT 7
47472: PUSH
47473: LD_VAR 0 5
47477: IN
47478: PUSH
47479: LD_INT 28
47481: PUSH
47482: LD_VAR 0 5
47486: IN
47487: OR
47488: PUSH
47489: LD_INT 45
47491: PUSH
47492: LD_VAR 0 5
47496: IN
47497: OR
47498: AND
47499: IFFALSE 47753
// begin hex := GetHexInfo ( x , y ) ;
47501: LD_ADDR_VAR 0 4
47505: PUSH
47506: LD_VAR 0 10
47510: PPUSH
47511: LD_VAR 0 11
47515: PPUSH
47516: CALL_OW 546
47520: ST_TO_ADDR
// if hex [ 1 ] then
47521: LD_VAR 0 4
47525: PUSH
47526: LD_INT 1
47528: ARRAY
47529: IFFALSE 47533
// exit ;
47531: GO 47936
// height := hex [ 2 ] ;
47533: LD_ADDR_VAR 0 15
47537: PUSH
47538: LD_VAR 0 4
47542: PUSH
47543: LD_INT 2
47545: ARRAY
47546: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47547: LD_ADDR_VAR 0 14
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: LD_INT 3
47560: PUSH
47561: LD_INT 5
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: ST_TO_ADDR
// for i in tmp do
47570: LD_ADDR_VAR 0 8
47574: PUSH
47575: LD_VAR 0 14
47579: PUSH
47580: FOR_IN
47581: IFFALSE 47751
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47583: LD_ADDR_VAR 0 9
47587: PUSH
47588: LD_VAR 0 10
47592: PPUSH
47593: LD_VAR 0 8
47597: PPUSH
47598: LD_INT 5
47600: PPUSH
47601: CALL_OW 272
47605: PUSH
47606: LD_VAR 0 11
47610: PPUSH
47611: LD_VAR 0 8
47615: PPUSH
47616: LD_INT 5
47618: PPUSH
47619: CALL_OW 273
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47628: LD_VAR 0 9
47632: PUSH
47633: LD_INT 1
47635: ARRAY
47636: PPUSH
47637: LD_VAR 0 9
47641: PUSH
47642: LD_INT 2
47644: ARRAY
47645: PPUSH
47646: CALL_OW 488
47650: IFFALSE 47749
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47652: LD_ADDR_VAR 0 4
47656: PUSH
47657: LD_VAR 0 9
47661: PUSH
47662: LD_INT 1
47664: ARRAY
47665: PPUSH
47666: LD_VAR 0 9
47670: PUSH
47671: LD_INT 2
47673: ARRAY
47674: PPUSH
47675: CALL_OW 546
47679: ST_TO_ADDR
// if hex [ 1 ] then
47680: LD_VAR 0 4
47684: PUSH
47685: LD_INT 1
47687: ARRAY
47688: IFFALSE 47692
// continue ;
47690: GO 47580
// h := hex [ 2 ] ;
47692: LD_ADDR_VAR 0 13
47696: PUSH
47697: LD_VAR 0 4
47701: PUSH
47702: LD_INT 2
47704: ARRAY
47705: ST_TO_ADDR
// if h + 7 < height then
47706: LD_VAR 0 13
47710: PUSH
47711: LD_INT 7
47713: PLUS
47714: PUSH
47715: LD_VAR 0 15
47719: LESS
47720: IFFALSE 47749
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47722: LD_ADDR_VAR 0 18
47726: PUSH
47727: LD_INT 7
47729: PUSH
47730: LD_INT 28
47732: PUSH
47733: LD_INT 45
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: LIST
47740: PUSH
47741: LD_VAR 0 12
47745: ARRAY
47746: ST_TO_ADDR
// break ;
47747: GO 47751
// end ; end ; end ;
47749: GO 47580
47751: POP
47752: POP
// end ; if not weapon then
47753: LD_VAR 0 18
47757: NOT
47758: IFFALSE 47818
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47760: LD_ADDR_VAR 0 5
47764: PUSH
47765: LD_VAR 0 5
47769: PUSH
47770: LD_INT 11
47772: PUSH
47773: LD_INT 30
47775: PUSH
47776: LD_INT 49
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: LIST
47783: DIFF
47784: ST_TO_ADDR
// if not list then
47785: LD_VAR 0 5
47789: NOT
47790: IFFALSE 47794
// exit ;
47792: GO 47936
// weapon := list [ rand ( 1 , list ) ] ;
47794: LD_ADDR_VAR 0 18
47798: PUSH
47799: LD_VAR 0 5
47803: PUSH
47804: LD_INT 1
47806: PPUSH
47807: LD_VAR 0 5
47811: PPUSH
47812: CALL_OW 12
47816: ARRAY
47817: ST_TO_ADDR
// end ; if weapon then
47818: LD_VAR 0 18
47822: IFFALSE 47936
// begin tmp := CostOfWeapon ( weapon ) ;
47824: LD_ADDR_VAR 0 14
47828: PUSH
47829: LD_VAR 0 18
47833: PPUSH
47834: CALL_OW 451
47838: ST_TO_ADDR
// j := GetBase ( tower ) ;
47839: LD_ADDR_VAR 0 9
47843: PUSH
47844: LD_VAR 0 1
47848: PPUSH
47849: CALL_OW 274
47853: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47854: LD_VAR 0 9
47858: PPUSH
47859: LD_INT 1
47861: PPUSH
47862: CALL_OW 275
47866: PUSH
47867: LD_VAR 0 14
47871: PUSH
47872: LD_INT 1
47874: ARRAY
47875: GREATEREQUAL
47876: PUSH
47877: LD_VAR 0 9
47881: PPUSH
47882: LD_INT 2
47884: PPUSH
47885: CALL_OW 275
47889: PUSH
47890: LD_VAR 0 14
47894: PUSH
47895: LD_INT 2
47897: ARRAY
47898: GREATEREQUAL
47899: AND
47900: PUSH
47901: LD_VAR 0 9
47905: PPUSH
47906: LD_INT 3
47908: PPUSH
47909: CALL_OW 275
47913: PUSH
47914: LD_VAR 0 14
47918: PUSH
47919: LD_INT 3
47921: ARRAY
47922: GREATEREQUAL
47923: AND
47924: IFFALSE 47936
// result := weapon ;
47926: LD_ADDR_VAR 0 3
47930: PUSH
47931: LD_VAR 0 18
47935: ST_TO_ADDR
// end ; end ;
47936: LD_VAR 0 3
47940: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47941: LD_INT 0
47943: PPUSH
47944: PPUSH
// result := true ;
47945: LD_ADDR_VAR 0 3
47949: PUSH
47950: LD_INT 1
47952: ST_TO_ADDR
// if array1 = array2 then
47953: LD_VAR 0 1
47957: PUSH
47958: LD_VAR 0 2
47962: EQUAL
47963: IFFALSE 48023
// begin for i = 1 to array1 do
47965: LD_ADDR_VAR 0 4
47969: PUSH
47970: DOUBLE
47971: LD_INT 1
47973: DEC
47974: ST_TO_ADDR
47975: LD_VAR 0 1
47979: PUSH
47980: FOR_TO
47981: IFFALSE 48019
// if array1 [ i ] <> array2 [ i ] then
47983: LD_VAR 0 1
47987: PUSH
47988: LD_VAR 0 4
47992: ARRAY
47993: PUSH
47994: LD_VAR 0 2
47998: PUSH
47999: LD_VAR 0 4
48003: ARRAY
48004: NONEQUAL
48005: IFFALSE 48017
// begin result := false ;
48007: LD_ADDR_VAR 0 3
48011: PUSH
48012: LD_INT 0
48014: ST_TO_ADDR
// break ;
48015: GO 48019
// end ;
48017: GO 47980
48019: POP
48020: POP
// end else
48021: GO 48031
// result := false ;
48023: LD_ADDR_VAR 0 3
48027: PUSH
48028: LD_INT 0
48030: ST_TO_ADDR
// end ;
48031: LD_VAR 0 3
48035: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48036: LD_INT 0
48038: PPUSH
48039: PPUSH
// if not array1 or not array2 then
48040: LD_VAR 0 1
48044: NOT
48045: PUSH
48046: LD_VAR 0 2
48050: NOT
48051: OR
48052: IFFALSE 48056
// exit ;
48054: GO 48120
// result := true ;
48056: LD_ADDR_VAR 0 3
48060: PUSH
48061: LD_INT 1
48063: ST_TO_ADDR
// for i = 1 to array1 do
48064: LD_ADDR_VAR 0 4
48068: PUSH
48069: DOUBLE
48070: LD_INT 1
48072: DEC
48073: ST_TO_ADDR
48074: LD_VAR 0 1
48078: PUSH
48079: FOR_TO
48080: IFFALSE 48118
// if array1 [ i ] <> array2 [ i ] then
48082: LD_VAR 0 1
48086: PUSH
48087: LD_VAR 0 4
48091: ARRAY
48092: PUSH
48093: LD_VAR 0 2
48097: PUSH
48098: LD_VAR 0 4
48102: ARRAY
48103: NONEQUAL
48104: IFFALSE 48116
// begin result := false ;
48106: LD_ADDR_VAR 0 3
48110: PUSH
48111: LD_INT 0
48113: ST_TO_ADDR
// break ;
48114: GO 48118
// end ;
48116: GO 48079
48118: POP
48119: POP
// end ;
48120: LD_VAR 0 3
48124: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48125: LD_INT 0
48127: PPUSH
48128: PPUSH
48129: PPUSH
// pom := GetBase ( fac ) ;
48130: LD_ADDR_VAR 0 5
48134: PUSH
48135: LD_VAR 0 1
48139: PPUSH
48140: CALL_OW 274
48144: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48145: LD_ADDR_VAR 0 4
48149: PUSH
48150: LD_VAR 0 2
48154: PUSH
48155: LD_INT 1
48157: ARRAY
48158: PPUSH
48159: LD_VAR 0 2
48163: PUSH
48164: LD_INT 2
48166: ARRAY
48167: PPUSH
48168: LD_VAR 0 2
48172: PUSH
48173: LD_INT 3
48175: ARRAY
48176: PPUSH
48177: LD_VAR 0 2
48181: PUSH
48182: LD_INT 4
48184: ARRAY
48185: PPUSH
48186: CALL_OW 449
48190: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48191: LD_ADDR_VAR 0 3
48195: PUSH
48196: LD_VAR 0 5
48200: PPUSH
48201: LD_INT 1
48203: PPUSH
48204: CALL_OW 275
48208: PUSH
48209: LD_VAR 0 4
48213: PUSH
48214: LD_INT 1
48216: ARRAY
48217: GREATEREQUAL
48218: PUSH
48219: LD_VAR 0 5
48223: PPUSH
48224: LD_INT 2
48226: PPUSH
48227: CALL_OW 275
48231: PUSH
48232: LD_VAR 0 4
48236: PUSH
48237: LD_INT 2
48239: ARRAY
48240: GREATEREQUAL
48241: AND
48242: PUSH
48243: LD_VAR 0 5
48247: PPUSH
48248: LD_INT 3
48250: PPUSH
48251: CALL_OW 275
48255: PUSH
48256: LD_VAR 0 4
48260: PUSH
48261: LD_INT 3
48263: ARRAY
48264: GREATEREQUAL
48265: AND
48266: ST_TO_ADDR
// end ;
48267: LD_VAR 0 3
48271: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48272: LD_INT 0
48274: PPUSH
48275: PPUSH
48276: PPUSH
48277: PPUSH
// pom := GetBase ( building ) ;
48278: LD_ADDR_VAR 0 3
48282: PUSH
48283: LD_VAR 0 1
48287: PPUSH
48288: CALL_OW 274
48292: ST_TO_ADDR
// if not pom then
48293: LD_VAR 0 3
48297: NOT
48298: IFFALSE 48302
// exit ;
48300: GO 48472
// btype := GetBType ( building ) ;
48302: LD_ADDR_VAR 0 5
48306: PUSH
48307: LD_VAR 0 1
48311: PPUSH
48312: CALL_OW 266
48316: ST_TO_ADDR
// if btype = b_armoury then
48317: LD_VAR 0 5
48321: PUSH
48322: LD_INT 4
48324: EQUAL
48325: IFFALSE 48335
// btype := b_barracks ;
48327: LD_ADDR_VAR 0 5
48331: PUSH
48332: LD_INT 5
48334: ST_TO_ADDR
// if btype = b_depot then
48335: LD_VAR 0 5
48339: PUSH
48340: LD_INT 0
48342: EQUAL
48343: IFFALSE 48353
// btype := b_warehouse ;
48345: LD_ADDR_VAR 0 5
48349: PUSH
48350: LD_INT 1
48352: ST_TO_ADDR
// if btype = b_workshop then
48353: LD_VAR 0 5
48357: PUSH
48358: LD_INT 2
48360: EQUAL
48361: IFFALSE 48371
// btype := b_factory ;
48363: LD_ADDR_VAR 0 5
48367: PUSH
48368: LD_INT 3
48370: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48371: LD_ADDR_VAR 0 4
48375: PUSH
48376: LD_VAR 0 5
48380: PPUSH
48381: LD_VAR 0 1
48385: PPUSH
48386: CALL_OW 248
48390: PPUSH
48391: CALL_OW 450
48395: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48396: LD_ADDR_VAR 0 2
48400: PUSH
48401: LD_VAR 0 3
48405: PPUSH
48406: LD_INT 1
48408: PPUSH
48409: CALL_OW 275
48413: PUSH
48414: LD_VAR 0 4
48418: PUSH
48419: LD_INT 1
48421: ARRAY
48422: GREATEREQUAL
48423: PUSH
48424: LD_VAR 0 3
48428: PPUSH
48429: LD_INT 2
48431: PPUSH
48432: CALL_OW 275
48436: PUSH
48437: LD_VAR 0 4
48441: PUSH
48442: LD_INT 2
48444: ARRAY
48445: GREATEREQUAL
48446: AND
48447: PUSH
48448: LD_VAR 0 3
48452: PPUSH
48453: LD_INT 3
48455: PPUSH
48456: CALL_OW 275
48460: PUSH
48461: LD_VAR 0 4
48465: PUSH
48466: LD_INT 3
48468: ARRAY
48469: GREATEREQUAL
48470: AND
48471: ST_TO_ADDR
// end ;
48472: LD_VAR 0 2
48476: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48477: LD_INT 0
48479: PPUSH
48480: PPUSH
48481: PPUSH
// pom := GetBase ( building ) ;
48482: LD_ADDR_VAR 0 4
48486: PUSH
48487: LD_VAR 0 1
48491: PPUSH
48492: CALL_OW 274
48496: ST_TO_ADDR
// if not pom then
48497: LD_VAR 0 4
48501: NOT
48502: IFFALSE 48506
// exit ;
48504: GO 48607
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48506: LD_ADDR_VAR 0 5
48510: PUSH
48511: LD_VAR 0 2
48515: PPUSH
48516: LD_VAR 0 1
48520: PPUSH
48521: CALL_OW 248
48525: PPUSH
48526: CALL_OW 450
48530: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48531: LD_ADDR_VAR 0 3
48535: PUSH
48536: LD_VAR 0 4
48540: PPUSH
48541: LD_INT 1
48543: PPUSH
48544: CALL_OW 275
48548: PUSH
48549: LD_VAR 0 5
48553: PUSH
48554: LD_INT 1
48556: ARRAY
48557: GREATEREQUAL
48558: PUSH
48559: LD_VAR 0 4
48563: PPUSH
48564: LD_INT 2
48566: PPUSH
48567: CALL_OW 275
48571: PUSH
48572: LD_VAR 0 5
48576: PUSH
48577: LD_INT 2
48579: ARRAY
48580: GREATEREQUAL
48581: AND
48582: PUSH
48583: LD_VAR 0 4
48587: PPUSH
48588: LD_INT 3
48590: PPUSH
48591: CALL_OW 275
48595: PUSH
48596: LD_VAR 0 5
48600: PUSH
48601: LD_INT 3
48603: ARRAY
48604: GREATEREQUAL
48605: AND
48606: ST_TO_ADDR
// end ;
48607: LD_VAR 0 3
48611: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48612: LD_INT 0
48614: PPUSH
48615: PPUSH
48616: PPUSH
48617: PPUSH
48618: PPUSH
48619: PPUSH
48620: PPUSH
48621: PPUSH
48622: PPUSH
48623: PPUSH
48624: PPUSH
// result := false ;
48625: LD_ADDR_VAR 0 8
48629: PUSH
48630: LD_INT 0
48632: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48633: LD_VAR 0 5
48637: NOT
48638: PUSH
48639: LD_VAR 0 1
48643: NOT
48644: OR
48645: PUSH
48646: LD_VAR 0 2
48650: NOT
48651: OR
48652: PUSH
48653: LD_VAR 0 3
48657: NOT
48658: OR
48659: IFFALSE 48663
// exit ;
48661: GO 49477
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48663: LD_ADDR_VAR 0 14
48667: PUSH
48668: LD_VAR 0 1
48672: PPUSH
48673: LD_VAR 0 2
48677: PPUSH
48678: LD_VAR 0 3
48682: PPUSH
48683: LD_VAR 0 4
48687: PPUSH
48688: LD_VAR 0 5
48692: PUSH
48693: LD_INT 1
48695: ARRAY
48696: PPUSH
48697: CALL_OW 248
48701: PPUSH
48702: LD_INT 0
48704: PPUSH
48705: CALL 50714 0 6
48709: ST_TO_ADDR
// if not hexes then
48710: LD_VAR 0 14
48714: NOT
48715: IFFALSE 48719
// exit ;
48717: GO 49477
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48719: LD_ADDR_VAR 0 17
48723: PUSH
48724: LD_VAR 0 5
48728: PPUSH
48729: LD_INT 22
48731: PUSH
48732: LD_VAR 0 13
48736: PPUSH
48737: CALL_OW 255
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: LD_INT 30
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 30
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: LIST
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PPUSH
48778: CALL_OW 72
48782: ST_TO_ADDR
// for i = 1 to hexes do
48783: LD_ADDR_VAR 0 9
48787: PUSH
48788: DOUBLE
48789: LD_INT 1
48791: DEC
48792: ST_TO_ADDR
48793: LD_VAR 0 14
48797: PUSH
48798: FOR_TO
48799: IFFALSE 49475
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48801: LD_ADDR_VAR 0 13
48805: PUSH
48806: LD_VAR 0 14
48810: PUSH
48811: LD_VAR 0 9
48815: ARRAY
48816: PUSH
48817: LD_INT 1
48819: ARRAY
48820: PPUSH
48821: LD_VAR 0 14
48825: PUSH
48826: LD_VAR 0 9
48830: ARRAY
48831: PUSH
48832: LD_INT 2
48834: ARRAY
48835: PPUSH
48836: CALL_OW 428
48840: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48841: LD_VAR 0 14
48845: PUSH
48846: LD_VAR 0 9
48850: ARRAY
48851: PUSH
48852: LD_INT 1
48854: ARRAY
48855: PPUSH
48856: LD_VAR 0 14
48860: PUSH
48861: LD_VAR 0 9
48865: ARRAY
48866: PUSH
48867: LD_INT 2
48869: ARRAY
48870: PPUSH
48871: CALL_OW 351
48875: PUSH
48876: LD_VAR 0 14
48880: PUSH
48881: LD_VAR 0 9
48885: ARRAY
48886: PUSH
48887: LD_INT 1
48889: ARRAY
48890: PPUSH
48891: LD_VAR 0 14
48895: PUSH
48896: LD_VAR 0 9
48900: ARRAY
48901: PUSH
48902: LD_INT 2
48904: ARRAY
48905: PPUSH
48906: CALL_OW 488
48910: NOT
48911: OR
48912: PUSH
48913: LD_VAR 0 13
48917: PPUSH
48918: CALL_OW 247
48922: PUSH
48923: LD_INT 3
48925: EQUAL
48926: OR
48927: IFFALSE 48933
// exit ;
48929: POP
48930: POP
48931: GO 49477
// if not tmp then
48933: LD_VAR 0 13
48937: NOT
48938: IFFALSE 48942
// continue ;
48940: GO 48798
// result := true ;
48942: LD_ADDR_VAR 0 8
48946: PUSH
48947: LD_INT 1
48949: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48950: LD_VAR 0 6
48954: PUSH
48955: LD_VAR 0 13
48959: PPUSH
48960: CALL_OW 247
48964: PUSH
48965: LD_INT 2
48967: EQUAL
48968: AND
48969: PUSH
48970: LD_VAR 0 13
48974: PPUSH
48975: CALL_OW 263
48979: PUSH
48980: LD_INT 1
48982: EQUAL
48983: AND
48984: IFFALSE 49148
// begin if IsDrivenBy ( tmp ) then
48986: LD_VAR 0 13
48990: PPUSH
48991: CALL_OW 311
48995: IFFALSE 48999
// continue ;
48997: GO 48798
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48999: LD_VAR 0 6
49003: PPUSH
49004: LD_INT 3
49006: PUSH
49007: LD_INT 60
49009: PUSH
49010: EMPTY
49011: LIST
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 3
49019: PUSH
49020: LD_INT 55
49022: PUSH
49023: EMPTY
49024: LIST
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PPUSH
49034: CALL_OW 72
49038: IFFALSE 49146
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49040: LD_ADDR_VAR 0 18
49044: PUSH
49045: LD_VAR 0 6
49049: PPUSH
49050: LD_INT 3
49052: PUSH
49053: LD_INT 60
49055: PUSH
49056: EMPTY
49057: LIST
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: LD_INT 55
49068: PUSH
49069: EMPTY
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PPUSH
49080: CALL_OW 72
49084: PUSH
49085: LD_INT 1
49087: ARRAY
49088: ST_TO_ADDR
// if IsInUnit ( driver ) then
49089: LD_VAR 0 18
49093: PPUSH
49094: CALL_OW 310
49098: IFFALSE 49109
// ComExit ( driver ) ;
49100: LD_VAR 0 18
49104: PPUSH
49105: CALL 73898 0 1
// AddComEnterUnit ( driver , tmp ) ;
49109: LD_VAR 0 18
49113: PPUSH
49114: LD_VAR 0 13
49118: PPUSH
49119: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49123: LD_VAR 0 18
49127: PPUSH
49128: LD_VAR 0 7
49132: PPUSH
49133: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49137: LD_VAR 0 18
49141: PPUSH
49142: CALL_OW 181
// end ; continue ;
49146: GO 48798
// end ; if not cleaners or not tmp in cleaners then
49148: LD_VAR 0 6
49152: NOT
49153: PUSH
49154: LD_VAR 0 13
49158: PUSH
49159: LD_VAR 0 6
49163: IN
49164: NOT
49165: OR
49166: IFFALSE 49473
// begin if dep then
49168: LD_VAR 0 17
49172: IFFALSE 49308
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49174: LD_ADDR_VAR 0 16
49178: PUSH
49179: LD_VAR 0 17
49183: PUSH
49184: LD_INT 1
49186: ARRAY
49187: PPUSH
49188: CALL_OW 250
49192: PPUSH
49193: LD_VAR 0 17
49197: PUSH
49198: LD_INT 1
49200: ARRAY
49201: PPUSH
49202: CALL_OW 254
49206: PPUSH
49207: LD_INT 5
49209: PPUSH
49210: CALL_OW 272
49214: PUSH
49215: LD_VAR 0 17
49219: PUSH
49220: LD_INT 1
49222: ARRAY
49223: PPUSH
49224: CALL_OW 251
49228: PPUSH
49229: LD_VAR 0 17
49233: PUSH
49234: LD_INT 1
49236: ARRAY
49237: PPUSH
49238: CALL_OW 254
49242: PPUSH
49243: LD_INT 5
49245: PPUSH
49246: CALL_OW 273
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49255: LD_VAR 0 16
49259: PUSH
49260: LD_INT 1
49262: ARRAY
49263: PPUSH
49264: LD_VAR 0 16
49268: PUSH
49269: LD_INT 2
49271: ARRAY
49272: PPUSH
49273: CALL_OW 488
49277: IFFALSE 49308
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49279: LD_VAR 0 13
49283: PPUSH
49284: LD_VAR 0 16
49288: PUSH
49289: LD_INT 1
49291: ARRAY
49292: PPUSH
49293: LD_VAR 0 16
49297: PUSH
49298: LD_INT 2
49300: ARRAY
49301: PPUSH
49302: CALL_OW 111
// continue ;
49306: GO 48798
// end ; end ; r := GetDir ( tmp ) ;
49308: LD_ADDR_VAR 0 15
49312: PUSH
49313: LD_VAR 0 13
49317: PPUSH
49318: CALL_OW 254
49322: ST_TO_ADDR
// if r = 5 then
49323: LD_VAR 0 15
49327: PUSH
49328: LD_INT 5
49330: EQUAL
49331: IFFALSE 49341
// r := 0 ;
49333: LD_ADDR_VAR 0 15
49337: PUSH
49338: LD_INT 0
49340: ST_TO_ADDR
// for j = r to 5 do
49341: LD_ADDR_VAR 0 10
49345: PUSH
49346: DOUBLE
49347: LD_VAR 0 15
49351: DEC
49352: ST_TO_ADDR
49353: LD_INT 5
49355: PUSH
49356: FOR_TO
49357: IFFALSE 49471
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49359: LD_ADDR_VAR 0 11
49363: PUSH
49364: LD_VAR 0 13
49368: PPUSH
49369: CALL_OW 250
49373: PPUSH
49374: LD_VAR 0 10
49378: PPUSH
49379: LD_INT 2
49381: PPUSH
49382: CALL_OW 272
49386: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49387: LD_ADDR_VAR 0 12
49391: PUSH
49392: LD_VAR 0 13
49396: PPUSH
49397: CALL_OW 251
49401: PPUSH
49402: LD_VAR 0 10
49406: PPUSH
49407: LD_INT 2
49409: PPUSH
49410: CALL_OW 273
49414: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49415: LD_VAR 0 11
49419: PPUSH
49420: LD_VAR 0 12
49424: PPUSH
49425: CALL_OW 488
49429: PUSH
49430: LD_VAR 0 11
49434: PPUSH
49435: LD_VAR 0 12
49439: PPUSH
49440: CALL_OW 428
49444: NOT
49445: AND
49446: IFFALSE 49469
// begin ComMoveXY ( tmp , _x , _y ) ;
49448: LD_VAR 0 13
49452: PPUSH
49453: LD_VAR 0 11
49457: PPUSH
49458: LD_VAR 0 12
49462: PPUSH
49463: CALL_OW 111
// break ;
49467: GO 49471
// end ; end ;
49469: GO 49356
49471: POP
49472: POP
// end ; end ;
49473: GO 48798
49475: POP
49476: POP
// end ;
49477: LD_VAR 0 8
49481: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49482: LD_INT 0
49484: PPUSH
// result := true ;
49485: LD_ADDR_VAR 0 3
49489: PUSH
49490: LD_INT 1
49492: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49493: LD_VAR 0 2
49497: PUSH
49498: LD_INT 24
49500: DOUBLE
49501: EQUAL
49502: IFTRUE 49512
49504: LD_INT 33
49506: DOUBLE
49507: EQUAL
49508: IFTRUE 49512
49510: GO 49537
49512: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49513: LD_ADDR_VAR 0 3
49517: PUSH
49518: LD_INT 32
49520: PPUSH
49521: LD_VAR 0 1
49525: PPUSH
49526: CALL_OW 321
49530: PUSH
49531: LD_INT 2
49533: EQUAL
49534: ST_TO_ADDR
49535: GO 49857
49537: LD_INT 20
49539: DOUBLE
49540: EQUAL
49541: IFTRUE 49545
49543: GO 49570
49545: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49546: LD_ADDR_VAR 0 3
49550: PUSH
49551: LD_INT 6
49553: PPUSH
49554: LD_VAR 0 1
49558: PPUSH
49559: CALL_OW 321
49563: PUSH
49564: LD_INT 2
49566: EQUAL
49567: ST_TO_ADDR
49568: GO 49857
49570: LD_INT 22
49572: DOUBLE
49573: EQUAL
49574: IFTRUE 49584
49576: LD_INT 36
49578: DOUBLE
49579: EQUAL
49580: IFTRUE 49584
49582: GO 49609
49584: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49585: LD_ADDR_VAR 0 3
49589: PUSH
49590: LD_INT 15
49592: PPUSH
49593: LD_VAR 0 1
49597: PPUSH
49598: CALL_OW 321
49602: PUSH
49603: LD_INT 2
49605: EQUAL
49606: ST_TO_ADDR
49607: GO 49857
49609: LD_INT 30
49611: DOUBLE
49612: EQUAL
49613: IFTRUE 49617
49615: GO 49642
49617: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49618: LD_ADDR_VAR 0 3
49622: PUSH
49623: LD_INT 20
49625: PPUSH
49626: LD_VAR 0 1
49630: PPUSH
49631: CALL_OW 321
49635: PUSH
49636: LD_INT 2
49638: EQUAL
49639: ST_TO_ADDR
49640: GO 49857
49642: LD_INT 28
49644: DOUBLE
49645: EQUAL
49646: IFTRUE 49656
49648: LD_INT 21
49650: DOUBLE
49651: EQUAL
49652: IFTRUE 49656
49654: GO 49681
49656: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49657: LD_ADDR_VAR 0 3
49661: PUSH
49662: LD_INT 21
49664: PPUSH
49665: LD_VAR 0 1
49669: PPUSH
49670: CALL_OW 321
49674: PUSH
49675: LD_INT 2
49677: EQUAL
49678: ST_TO_ADDR
49679: GO 49857
49681: LD_INT 16
49683: DOUBLE
49684: EQUAL
49685: IFTRUE 49689
49687: GO 49716
49689: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49690: LD_ADDR_VAR 0 3
49694: PUSH
49695: LD_EXP 60
49699: PPUSH
49700: LD_VAR 0 1
49704: PPUSH
49705: CALL_OW 321
49709: PUSH
49710: LD_INT 2
49712: EQUAL
49713: ST_TO_ADDR
49714: GO 49857
49716: LD_INT 19
49718: DOUBLE
49719: EQUAL
49720: IFTRUE 49730
49722: LD_INT 23
49724: DOUBLE
49725: EQUAL
49726: IFTRUE 49730
49728: GO 49757
49730: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49731: LD_ADDR_VAR 0 3
49735: PUSH
49736: LD_EXP 59
49740: PPUSH
49741: LD_VAR 0 1
49745: PPUSH
49746: CALL_OW 321
49750: PUSH
49751: LD_INT 2
49753: EQUAL
49754: ST_TO_ADDR
49755: GO 49857
49757: LD_INT 17
49759: DOUBLE
49760: EQUAL
49761: IFTRUE 49765
49763: GO 49790
49765: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49766: LD_ADDR_VAR 0 3
49770: PUSH
49771: LD_INT 39
49773: PPUSH
49774: LD_VAR 0 1
49778: PPUSH
49779: CALL_OW 321
49783: PUSH
49784: LD_INT 2
49786: EQUAL
49787: ST_TO_ADDR
49788: GO 49857
49790: LD_INT 18
49792: DOUBLE
49793: EQUAL
49794: IFTRUE 49798
49796: GO 49823
49798: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49799: LD_ADDR_VAR 0 3
49803: PUSH
49804: LD_INT 40
49806: PPUSH
49807: LD_VAR 0 1
49811: PPUSH
49812: CALL_OW 321
49816: PUSH
49817: LD_INT 2
49819: EQUAL
49820: ST_TO_ADDR
49821: GO 49857
49823: LD_INT 27
49825: DOUBLE
49826: EQUAL
49827: IFTRUE 49831
49829: GO 49856
49831: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49832: LD_ADDR_VAR 0 3
49836: PUSH
49837: LD_INT 35
49839: PPUSH
49840: LD_VAR 0 1
49844: PPUSH
49845: CALL_OW 321
49849: PUSH
49850: LD_INT 2
49852: EQUAL
49853: ST_TO_ADDR
49854: GO 49857
49856: POP
// end ;
49857: LD_VAR 0 3
49861: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49862: LD_INT 0
49864: PPUSH
49865: PPUSH
49866: PPUSH
49867: PPUSH
49868: PPUSH
49869: PPUSH
49870: PPUSH
49871: PPUSH
49872: PPUSH
49873: PPUSH
49874: PPUSH
// result := false ;
49875: LD_ADDR_VAR 0 6
49879: PUSH
49880: LD_INT 0
49882: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49883: LD_VAR 0 1
49887: NOT
49888: PUSH
49889: LD_VAR 0 1
49893: PPUSH
49894: CALL_OW 266
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: IN
49909: NOT
49910: OR
49911: PUSH
49912: LD_VAR 0 2
49916: NOT
49917: OR
49918: PUSH
49919: LD_VAR 0 5
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: LD_INT 3
49935: PUSH
49936: LD_INT 4
49938: PUSH
49939: LD_INT 5
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: IN
49950: NOT
49951: OR
49952: PUSH
49953: LD_VAR 0 3
49957: PPUSH
49958: LD_VAR 0 4
49962: PPUSH
49963: CALL_OW 488
49967: NOT
49968: OR
49969: IFFALSE 49973
// exit ;
49971: GO 50709
// side := GetSide ( depot ) ;
49973: LD_ADDR_VAR 0 9
49977: PUSH
49978: LD_VAR 0 1
49982: PPUSH
49983: CALL_OW 255
49987: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49988: LD_VAR 0 9
49992: PPUSH
49993: LD_VAR 0 2
49997: PPUSH
49998: CALL 49482 0 2
50002: NOT
50003: IFFALSE 50007
// exit ;
50005: GO 50709
// pom := GetBase ( depot ) ;
50007: LD_ADDR_VAR 0 10
50011: PUSH
50012: LD_VAR 0 1
50016: PPUSH
50017: CALL_OW 274
50021: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50022: LD_ADDR_VAR 0 11
50026: PUSH
50027: LD_VAR 0 2
50031: PPUSH
50032: LD_VAR 0 1
50036: PPUSH
50037: CALL_OW 248
50041: PPUSH
50042: CALL_OW 450
50046: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50047: LD_VAR 0 10
50051: PPUSH
50052: LD_INT 1
50054: PPUSH
50055: CALL_OW 275
50059: PUSH
50060: LD_VAR 0 11
50064: PUSH
50065: LD_INT 1
50067: ARRAY
50068: GREATEREQUAL
50069: PUSH
50070: LD_VAR 0 10
50074: PPUSH
50075: LD_INT 2
50077: PPUSH
50078: CALL_OW 275
50082: PUSH
50083: LD_VAR 0 11
50087: PUSH
50088: LD_INT 2
50090: ARRAY
50091: GREATEREQUAL
50092: AND
50093: PUSH
50094: LD_VAR 0 10
50098: PPUSH
50099: LD_INT 3
50101: PPUSH
50102: CALL_OW 275
50106: PUSH
50107: LD_VAR 0 11
50111: PUSH
50112: LD_INT 3
50114: ARRAY
50115: GREATEREQUAL
50116: AND
50117: NOT
50118: IFFALSE 50122
// exit ;
50120: GO 50709
// if GetBType ( depot ) = b_depot then
50122: LD_VAR 0 1
50126: PPUSH
50127: CALL_OW 266
50131: PUSH
50132: LD_INT 0
50134: EQUAL
50135: IFFALSE 50147
// dist := 28 else
50137: LD_ADDR_VAR 0 14
50141: PUSH
50142: LD_INT 28
50144: ST_TO_ADDR
50145: GO 50155
// dist := 36 ;
50147: LD_ADDR_VAR 0 14
50151: PUSH
50152: LD_INT 36
50154: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50155: LD_VAR 0 1
50159: PPUSH
50160: LD_VAR 0 3
50164: PPUSH
50165: LD_VAR 0 4
50169: PPUSH
50170: CALL_OW 297
50174: PUSH
50175: LD_VAR 0 14
50179: GREATER
50180: IFFALSE 50184
// exit ;
50182: GO 50709
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50184: LD_ADDR_VAR 0 12
50188: PUSH
50189: LD_VAR 0 2
50193: PPUSH
50194: LD_VAR 0 3
50198: PPUSH
50199: LD_VAR 0 4
50203: PPUSH
50204: LD_VAR 0 5
50208: PPUSH
50209: LD_VAR 0 1
50213: PPUSH
50214: CALL_OW 248
50218: PPUSH
50219: LD_INT 0
50221: PPUSH
50222: CALL 50714 0 6
50226: ST_TO_ADDR
// if not hexes then
50227: LD_VAR 0 12
50231: NOT
50232: IFFALSE 50236
// exit ;
50234: GO 50709
// hex := GetHexInfo ( x , y ) ;
50236: LD_ADDR_VAR 0 15
50240: PUSH
50241: LD_VAR 0 3
50245: PPUSH
50246: LD_VAR 0 4
50250: PPUSH
50251: CALL_OW 546
50255: ST_TO_ADDR
// if hex [ 1 ] then
50256: LD_VAR 0 15
50260: PUSH
50261: LD_INT 1
50263: ARRAY
50264: IFFALSE 50268
// exit ;
50266: GO 50709
// height := hex [ 2 ] ;
50268: LD_ADDR_VAR 0 13
50272: PUSH
50273: LD_VAR 0 15
50277: PUSH
50278: LD_INT 2
50280: ARRAY
50281: ST_TO_ADDR
// for i = 1 to hexes do
50282: LD_ADDR_VAR 0 7
50286: PUSH
50287: DOUBLE
50288: LD_INT 1
50290: DEC
50291: ST_TO_ADDR
50292: LD_VAR 0 12
50296: PUSH
50297: FOR_TO
50298: IFFALSE 50628
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50300: LD_VAR 0 12
50304: PUSH
50305: LD_VAR 0 7
50309: ARRAY
50310: PUSH
50311: LD_INT 1
50313: ARRAY
50314: PPUSH
50315: LD_VAR 0 12
50319: PUSH
50320: LD_VAR 0 7
50324: ARRAY
50325: PUSH
50326: LD_INT 2
50328: ARRAY
50329: PPUSH
50330: CALL_OW 488
50334: NOT
50335: PUSH
50336: LD_VAR 0 12
50340: PUSH
50341: LD_VAR 0 7
50345: ARRAY
50346: PUSH
50347: LD_INT 1
50349: ARRAY
50350: PPUSH
50351: LD_VAR 0 12
50355: PUSH
50356: LD_VAR 0 7
50360: ARRAY
50361: PUSH
50362: LD_INT 2
50364: ARRAY
50365: PPUSH
50366: CALL_OW 428
50370: PUSH
50371: LD_INT 0
50373: GREATER
50374: OR
50375: PUSH
50376: LD_VAR 0 12
50380: PUSH
50381: LD_VAR 0 7
50385: ARRAY
50386: PUSH
50387: LD_INT 1
50389: ARRAY
50390: PPUSH
50391: LD_VAR 0 12
50395: PUSH
50396: LD_VAR 0 7
50400: ARRAY
50401: PUSH
50402: LD_INT 2
50404: ARRAY
50405: PPUSH
50406: CALL_OW 351
50410: OR
50411: IFFALSE 50417
// exit ;
50413: POP
50414: POP
50415: GO 50709
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50417: LD_ADDR_VAR 0 8
50421: PUSH
50422: LD_VAR 0 12
50426: PUSH
50427: LD_VAR 0 7
50431: ARRAY
50432: PUSH
50433: LD_INT 1
50435: ARRAY
50436: PPUSH
50437: LD_VAR 0 12
50441: PUSH
50442: LD_VAR 0 7
50446: ARRAY
50447: PUSH
50448: LD_INT 2
50450: ARRAY
50451: PPUSH
50452: CALL_OW 546
50456: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50457: LD_VAR 0 8
50461: PUSH
50462: LD_INT 1
50464: ARRAY
50465: PUSH
50466: LD_VAR 0 8
50470: PUSH
50471: LD_INT 2
50473: ARRAY
50474: PUSH
50475: LD_VAR 0 13
50479: PUSH
50480: LD_INT 2
50482: PLUS
50483: GREATER
50484: OR
50485: PUSH
50486: LD_VAR 0 8
50490: PUSH
50491: LD_INT 2
50493: ARRAY
50494: PUSH
50495: LD_VAR 0 13
50499: PUSH
50500: LD_INT 2
50502: MINUS
50503: LESS
50504: OR
50505: PUSH
50506: LD_VAR 0 8
50510: PUSH
50511: LD_INT 3
50513: ARRAY
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 8
50520: PUSH
50521: LD_INT 9
50523: PUSH
50524: LD_INT 10
50526: PUSH
50527: LD_INT 11
50529: PUSH
50530: LD_INT 12
50532: PUSH
50533: LD_INT 13
50535: PUSH
50536: LD_INT 16
50538: PUSH
50539: LD_INT 17
50541: PUSH
50542: LD_INT 18
50544: PUSH
50545: LD_INT 19
50547: PUSH
50548: LD_INT 20
50550: PUSH
50551: LD_INT 21
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: IN
50569: NOT
50570: OR
50571: PUSH
50572: LD_VAR 0 8
50576: PUSH
50577: LD_INT 5
50579: ARRAY
50580: NOT
50581: OR
50582: PUSH
50583: LD_VAR 0 8
50587: PUSH
50588: LD_INT 6
50590: ARRAY
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 7
50600: PUSH
50601: LD_INT 9
50603: PUSH
50604: LD_INT 10
50606: PUSH
50607: LD_INT 11
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: IN
50618: NOT
50619: OR
50620: IFFALSE 50626
// exit ;
50622: POP
50623: POP
50624: GO 50709
// end ;
50626: GO 50297
50628: POP
50629: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50630: LD_VAR 0 9
50634: PPUSH
50635: LD_VAR 0 3
50639: PPUSH
50640: LD_VAR 0 4
50644: PPUSH
50645: LD_INT 20
50647: PPUSH
50648: CALL 42655 0 4
50652: PUSH
50653: LD_INT 4
50655: ARRAY
50656: IFFALSE 50660
// exit ;
50658: GO 50709
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50660: LD_VAR 0 2
50664: PUSH
50665: LD_INT 29
50667: PUSH
50668: LD_INT 30
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: IN
50675: PUSH
50676: LD_VAR 0 3
50680: PPUSH
50681: LD_VAR 0 4
50685: PPUSH
50686: LD_VAR 0 9
50690: PPUSH
50691: CALL_OW 440
50695: NOT
50696: AND
50697: IFFALSE 50701
// exit ;
50699: GO 50709
// result := true ;
50701: LD_ADDR_VAR 0 6
50705: PUSH
50706: LD_INT 1
50708: ST_TO_ADDR
// end ;
50709: LD_VAR 0 6
50713: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50714: LD_INT 0
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
50735: PPUSH
50736: PPUSH
50737: PPUSH
50738: PPUSH
50739: PPUSH
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
50750: PPUSH
50751: PPUSH
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
50758: PPUSH
50759: PPUSH
50760: PPUSH
50761: PPUSH
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
50766: PPUSH
50767: PPUSH
50768: PPUSH
50769: PPUSH
50770: PPUSH
50771: PPUSH
50772: PPUSH
50773: PPUSH
// result = [ ] ;
50774: LD_ADDR_VAR 0 7
50778: PUSH
50779: EMPTY
50780: ST_TO_ADDR
// temp_list = [ ] ;
50781: LD_ADDR_VAR 0 9
50785: PUSH
50786: EMPTY
50787: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50788: LD_VAR 0 4
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: LD_INT 4
50807: PUSH
50808: LD_INT 5
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: IN
50819: NOT
50820: PUSH
50821: LD_VAR 0 1
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: IN
50836: PUSH
50837: LD_VAR 0 5
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: LD_INT 3
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: LIST
50855: IN
50856: NOT
50857: AND
50858: OR
50859: IFFALSE 50863
// exit ;
50861: GO 69254
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50863: LD_VAR 0 1
50867: PUSH
50868: LD_INT 6
50870: PUSH
50871: LD_INT 7
50873: PUSH
50874: LD_INT 8
50876: PUSH
50877: LD_INT 13
50879: PUSH
50880: LD_INT 12
50882: PUSH
50883: LD_INT 15
50885: PUSH
50886: LD_INT 11
50888: PUSH
50889: LD_INT 14
50891: PUSH
50892: LD_INT 10
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: IN
50906: IFFALSE 50916
// btype = b_lab ;
50908: LD_ADDR_VAR 0 1
50912: PUSH
50913: LD_INT 6
50915: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50916: LD_VAR 0 6
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: LIST
50934: IN
50935: NOT
50936: PUSH
50937: LD_VAR 0 1
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: LD_INT 3
50953: PUSH
50954: LD_INT 6
50956: PUSH
50957: LD_INT 36
50959: PUSH
50960: LD_INT 4
50962: PUSH
50963: LD_INT 5
50965: PUSH
50966: LD_INT 31
50968: PUSH
50969: LD_INT 32
50971: PUSH
50972: LD_INT 33
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: IN
50988: NOT
50989: PUSH
50990: LD_VAR 0 6
50994: PUSH
50995: LD_INT 1
50997: EQUAL
50998: AND
50999: OR
51000: PUSH
51001: LD_VAR 0 1
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: IN
51016: NOT
51017: PUSH
51018: LD_VAR 0 6
51022: PUSH
51023: LD_INT 2
51025: EQUAL
51026: AND
51027: OR
51028: IFFALSE 51038
// mode = 0 ;
51030: LD_ADDR_VAR 0 6
51034: PUSH
51035: LD_INT 0
51037: ST_TO_ADDR
// case mode of 0 :
51038: LD_VAR 0 6
51042: PUSH
51043: LD_INT 0
51045: DOUBLE
51046: EQUAL
51047: IFTRUE 51051
51049: GO 62504
51051: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51052: LD_ADDR_VAR 0 11
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: LD_INT 3
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 3
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51245: LD_ADDR_VAR 0 12
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 3
51402: NEG
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 3
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51441: LD_ADDR_VAR 0 13
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 3
51600: NEG
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 3
51612: NEG
51613: PUSH
51614: LD_INT 3
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51640: LD_ADDR_VAR 0 14
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 3
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 3
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51836: LD_ADDR_VAR 0 15
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 3
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 3
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52029: LD_ADDR_VAR 0 16
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 3
52176: PUSH
52177: LD_INT 2
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: PUSH
52187: LD_INT 3
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: LD_INT 3
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52222: LD_ADDR_VAR 0 17
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: NEG
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52452: LD_ADDR_VAR 0 18
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 2
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52682: LD_ADDR_VAR 0 19
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 2
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: LD_INT 2
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52912: LD_ADDR_VAR 0 20
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53142: LD_ADDR_VAR 0 21
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 2
53318: NEG
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: NEG
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53372: LD_ADDR_VAR 0 22
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 2
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 2
53548: NEG
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 2
53571: NEG
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53602: LD_ADDR_VAR 0 23
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: LD_INT 2
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 2
53789: NEG
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 3
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53882: LD_ADDR_VAR 0 24
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 3
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 3
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54158: LD_ADDR_VAR 0 25
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 2
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 2
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 3
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: LD_INT 3
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 3
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54432: LD_ADDR_VAR 0 26
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: LD_INT 2
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: LD_INT 3
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 3
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: NEG
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54708: LD_ADDR_VAR 0 27
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 2
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 3
54941: NEG
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 3
54953: NEG
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54988: LD_ADDR_VAR 0 28
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 2
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: LD_INT 3
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 3
55223: NEG
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 3
55235: NEG
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55270: LD_ADDR_VAR 0 29
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 2
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 3
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 3
55514: NEG
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55549: LD_ADDR_VAR 0 30
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: LD_INT 3
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: LD_INT 3
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55827: LD_ADDR_VAR 0 31
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 2
56004: NEG
56005: PUSH
56006: LD_INT 2
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: LD_INT 3
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 3
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 3
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 3
56070: NEG
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56105: LD_ADDR_VAR 0 32
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 3
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: LD_INT 3
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 3
56348: NEG
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56383: LD_ADDR_VAR 0 33
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: LD_INT 3
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 3
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 3
56627: NEG
56628: PUSH
56629: LD_INT 2
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56662: LD_ADDR_VAR 0 34
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: LD_INT 2
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 3
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 3
56876: PUSH
56877: LD_INT 2
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: LD_INT 3
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 3
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56942: LD_ADDR_VAR 0 35
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: NEG
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57054: LD_ADDR_VAR 0 36
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57166: LD_ADDR_VAR 0 37
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57278: LD_ADDR_VAR 0 38
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 2
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57390: LD_ADDR_VAR 0 39
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 2
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57502: LD_ADDR_VAR 0 40
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57614: LD_ADDR_VAR 0 41
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 2
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: LD_INT 2
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 2
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: NEG
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: NEG
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: LD_INT 3
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 3
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: LD_INT 3
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: LD_INT 3
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 3
57888: NEG
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: NEG
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 3
57911: NEG
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 3
57923: NEG
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57964: LD_ADDR_VAR 0 42
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 2
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: LD_INT 1
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: LD_INT 3
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 3
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 3
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 3
58261: NEG
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 3
58273: NEG
58274: PUSH
58275: LD_INT 3
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58314: LD_ADDR_VAR 0 43
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: LD_INT 3
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: LD_INT 3
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 3
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: LD_INT 3
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: LD_INT 3
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 3
58610: NEG
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 3
58621: NEG
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58662: LD_ADDR_VAR 0 44
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 2
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: NEG
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 3
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 3
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 3
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 3
58895: PUSH
58896: LD_INT 2
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 3
58905: PUSH
58906: LD_INT 3
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: PUSH
58916: LD_INT 3
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 3
58936: NEG
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 3
58947: NEG
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59012: LD_ADDR_VAR 0 45
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: LD_INT 3
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: LD_INT 3
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: PUSH
59249: LD_INT 2
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: LD_INT 3
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: LD_INT 3
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: LD_INT 3
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: LD_INT 2
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: NEG
59310: PUSH
59311: LD_INT 2
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: LD_INT 3
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59362: LD_ADDR_VAR 0 46
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 2
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 2
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 2
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 2
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 2
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 3
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 3
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 3
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 3
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: LD_INT 2
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 3
59658: NEG
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 3
59669: NEG
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59710: LD_ADDR_VAR 0 47
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 2
59825: NEG
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59861: LD_ADDR_VAR 0 48
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: LD_INT 2
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 2
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60008: LD_ADDR_VAR 0 49
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 2
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: LD_INT 2
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60152: LD_ADDR_VAR 0 50
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: LD_INT 2
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60296: LD_ADDR_VAR 0 51
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 2
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 2
60408: NEG
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60443: LD_ADDR_VAR 0 52
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60594: LD_ADDR_VAR 0 53
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: LD_INT 2
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 2
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 2
60729: PUSH
60730: LD_INT 2
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 2
60770: NEG
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 2
60781: NEG
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 2
60793: NEG
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60824: LD_ADDR_VAR 0 54
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: LD_INT 2
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: LD_INT 2
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 2
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 2
61000: NEG
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 2
61011: NEG
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 2
61023: NEG
61024: PUSH
61025: LD_INT 2
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61054: LD_ADDR_VAR 0 55
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 2
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 2
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 2
61230: NEG
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: LD_INT 1
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: LD_INT 2
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61284: LD_ADDR_VAR 0 56
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: LD_INT 2
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 2
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 2
61460: NEG
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 2
61471: NEG
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 2
61483: NEG
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61514: LD_ADDR_VAR 0 57
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: LD_INT 1
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 2
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 2
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: LD_INT 2
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 2
61690: NEG
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 2
61701: NEG
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61744: LD_ADDR_VAR 0 58
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 1
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 1
61802: NEG
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: LD_INT 2
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 2
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 2
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: LD_INT 2
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: LD_INT 2
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: LD_INT 2
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 2
61920: NEG
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 2
61931: NEG
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61974: LD_ADDR_VAR 0 59
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: LD_INT 1
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: LD_INT 1
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62062: LD_ADDR_VAR 0 60
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 1
62120: NEG
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62150: LD_ADDR_VAR 0 61
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: LD_INT 1
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62238: LD_ADDR_VAR 0 62
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: NEG
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62326: LD_ADDR_VAR 0 63
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: NEG
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62414: LD_ADDR_VAR 0 64
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: LD_INT 1
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: ST_TO_ADDR
// end ; 1 :
62502: GO 68399
62504: LD_INT 1
62506: DOUBLE
62507: EQUAL
62508: IFTRUE 62512
62510: GO 65135
62512: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62513: LD_ADDR_VAR 0 11
62517: PUSH
62518: LD_INT 1
62520: NEG
62521: PUSH
62522: LD_INT 3
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: LD_INT 3
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: LD_INT 2
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: LIST
62556: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62557: LD_ADDR_VAR 0 12
62561: PUSH
62562: LD_INT 2
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 3
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: LIST
62597: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62598: LD_ADDR_VAR 0 13
62602: PUSH
62603: LD_INT 3
62605: PUSH
62606: LD_INT 2
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 3
62615: PUSH
62616: LD_INT 3
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: LD_INT 3
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: LIST
62637: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62638: LD_ADDR_VAR 0 14
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 3
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 3
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: LD_INT 2
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: LIST
62678: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62679: LD_ADDR_VAR 0 15
62683: PUSH
62684: LD_INT 2
62686: NEG
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 3
62697: NEG
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 3
62708: NEG
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: LIST
62722: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62723: LD_ADDR_VAR 0 16
62727: PUSH
62728: LD_INT 2
62730: NEG
62731: PUSH
62732: LD_INT 3
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 3
62742: NEG
62743: PUSH
62744: LD_INT 2
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 3
62754: NEG
62755: PUSH
62756: LD_INT 3
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: LIST
62768: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62769: LD_ADDR_VAR 0 17
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: LD_INT 3
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: LD_INT 3
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: LIST
62812: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62813: LD_ADDR_VAR 0 18
62817: PUSH
62818: LD_INT 2
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 3
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 3
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: LIST
62853: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62854: LD_ADDR_VAR 0 19
62858: PUSH
62859: LD_INT 3
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 3
62871: PUSH
62872: LD_INT 3
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 2
62881: PUSH
62882: LD_INT 3
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: LIST
62893: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62894: LD_ADDR_VAR 0 20
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: LD_INT 3
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: LD_INT 3
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: LD_INT 2
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: LIST
62934: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62935: LD_ADDR_VAR 0 21
62939: PUSH
62940: LD_INT 2
62942: NEG
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 3
62953: NEG
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 3
62964: NEG
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: LIST
62978: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62979: LD_ADDR_VAR 0 22
62983: PUSH
62984: LD_INT 2
62986: NEG
62987: PUSH
62988: LD_INT 3
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 3
62998: NEG
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 3
63010: NEG
63011: PUSH
63012: LD_INT 3
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63025: LD_ADDR_VAR 0 23
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: LD_INT 3
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: LD_INT 4
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: PUSH
63056: LD_INT 3
63058: NEG
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: LIST
63068: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63069: LD_ADDR_VAR 0 24
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 3
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 4
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: LIST
63109: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63110: LD_ADDR_VAR 0 25
63114: PUSH
63115: LD_INT 3
63117: PUSH
63118: LD_INT 3
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 4
63127: PUSH
63128: LD_INT 3
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 3
63137: PUSH
63138: LD_INT 4
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63150: LD_ADDR_VAR 0 26
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: LD_INT 3
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: LD_INT 4
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: LD_INT 3
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: LIST
63190: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63191: LD_ADDR_VAR 0 27
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 3
63209: NEG
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 4
63220: NEG
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: LIST
63234: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63235: LD_ADDR_VAR 0 28
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 3
63254: NEG
63255: PUSH
63256: LD_INT 4
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 4
63266: NEG
63267: PUSH
63268: LD_INT 3
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: LIST
63280: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63281: LD_ADDR_VAR 0 29
63285: PUSH
63286: LD_INT 1
63288: NEG
63289: PUSH
63290: LD_INT 3
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 3
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: LD_INT 2
63314: NEG
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: LD_INT 4
63326: NEG
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: LD_INT 4
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: PUSH
63346: LD_INT 3
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: LD_INT 5
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 5
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: LD_INT 4
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: LD_INT 6
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: LD_INT 6
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: LD_INT 5
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63436: LD_ADDR_VAR 0 30
63440: PUSH
63441: LD_INT 2
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 3
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 3
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 3
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 4
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 4
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 4
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 5
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 5
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 5
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 6
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 6
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63579: LD_ADDR_VAR 0 31
63583: PUSH
63584: LD_INT 3
63586: PUSH
63587: LD_INT 2
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 3
63596: PUSH
63597: LD_INT 3
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: LD_INT 3
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 4
63616: PUSH
63617: LD_INT 3
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 4
63626: PUSH
63627: LD_INT 4
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 3
63636: PUSH
63637: LD_INT 4
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 5
63646: PUSH
63647: LD_INT 4
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 5
63656: PUSH
63657: LD_INT 5
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 4
63666: PUSH
63667: LD_INT 5
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 6
63676: PUSH
63677: LD_INT 5
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 6
63686: PUSH
63687: LD_INT 6
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 5
63696: PUSH
63697: LD_INT 6
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63718: LD_ADDR_VAR 0 32
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: LD_INT 3
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: LD_INT 3
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: PUSH
63757: LD_INT 4
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 4
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: LD_INT 3
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: LD_INT 5
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: LD_INT 5
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: LD_INT 4
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: LD_INT 6
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: LD_INT 6
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: LD_INT 5
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63861: LD_ADDR_VAR 0 33
63865: PUSH
63866: LD_INT 2
63868: NEG
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 3
63879: NEG
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 3
63890: NEG
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 3
63902: NEG
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 4
63913: NEG
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 4
63924: NEG
63925: PUSH
63926: LD_INT 1
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 4
63936: NEG
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 5
63947: NEG
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 5
63958: NEG
63959: PUSH
63960: LD_INT 1
63962: NEG
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 5
63970: NEG
63971: PUSH
63972: LD_INT 1
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 6
63981: NEG
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 6
63992: NEG
63993: PUSH
63994: LD_INT 1
63996: NEG
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64016: LD_ADDR_VAR 0 34
64020: PUSH
64021: LD_INT 2
64023: NEG
64024: PUSH
64025: LD_INT 3
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 3
64035: NEG
64036: PUSH
64037: LD_INT 2
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 3
64047: NEG
64048: PUSH
64049: LD_INT 3
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 3
64059: NEG
64060: PUSH
64061: LD_INT 4
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 4
64071: NEG
64072: PUSH
64073: LD_INT 3
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 4
64083: NEG
64084: PUSH
64085: LD_INT 4
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 4
64095: NEG
64096: PUSH
64097: LD_INT 5
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 5
64107: NEG
64108: PUSH
64109: LD_INT 4
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 5
64119: NEG
64120: PUSH
64121: LD_INT 5
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 5
64131: NEG
64132: PUSH
64133: LD_INT 6
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 6
64143: NEG
64144: PUSH
64145: LD_INT 5
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 6
64155: NEG
64156: PUSH
64157: LD_INT 6
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64179: LD_ADDR_VAR 0 41
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 1
64197: NEG
64198: PUSH
64199: LD_INT 3
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: LD_INT 2
64212: NEG
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: LIST
64222: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64223: LD_ADDR_VAR 0 42
64227: PUSH
64228: LD_INT 2
64230: PUSH
64231: LD_INT 0
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 2
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 3
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: LIST
64263: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64264: LD_ADDR_VAR 0 43
64268: PUSH
64269: LD_INT 2
64271: PUSH
64272: LD_INT 2
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 3
64281: PUSH
64282: LD_INT 2
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: LD_INT 3
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: LIST
64303: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64304: LD_ADDR_VAR 0 44
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: LD_INT 2
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: LD_INT 3
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: LD_INT 2
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: LIST
64344: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64345: LD_ADDR_VAR 0 45
64349: PUSH
64350: LD_INT 2
64352: NEG
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 2
64363: NEG
64364: PUSH
64365: LD_INT 1
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 3
64374: NEG
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: LIST
64388: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64389: LD_ADDR_VAR 0 46
64393: PUSH
64394: LD_INT 2
64396: NEG
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 2
64408: NEG
64409: PUSH
64410: LD_INT 3
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 3
64420: NEG
64421: PUSH
64422: LD_INT 2
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64435: LD_ADDR_VAR 0 47
64439: PUSH
64440: LD_INT 2
64442: NEG
64443: PUSH
64444: LD_INT 3
64446: NEG
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: LD_INT 3
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64468: LD_ADDR_VAR 0 48
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: LD_INT 2
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 2
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64499: LD_ADDR_VAR 0 49
64503: PUSH
64504: LD_INT 3
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 3
64516: PUSH
64517: LD_INT 2
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64528: LD_ADDR_VAR 0 50
64532: PUSH
64533: LD_INT 2
64535: PUSH
64536: LD_INT 3
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: LD_INT 3
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64557: LD_ADDR_VAR 0 51
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: LD_INT 2
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 2
64575: NEG
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64588: LD_ADDR_VAR 0 52
64592: PUSH
64593: LD_INT 3
64595: NEG
64596: PUSH
64597: LD_INT 1
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 3
64607: NEG
64608: PUSH
64609: LD_INT 2
64611: NEG
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64621: LD_ADDR_VAR 0 53
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: LD_INT 3
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: LD_INT 3
64643: NEG
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: LD_INT 2
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64665: LD_ADDR_VAR 0 54
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: LD_INT 1
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 3
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 3
64693: PUSH
64694: LD_INT 1
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: LIST
64705: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64706: LD_ADDR_VAR 0 55
64710: PUSH
64711: LD_INT 3
64713: PUSH
64714: LD_INT 2
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 3
64723: PUSH
64724: LD_INT 3
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 2
64733: PUSH
64734: LD_INT 3
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: LIST
64745: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64746: LD_ADDR_VAR 0 56
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: LD_INT 3
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: LD_INT 3
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 1
64773: NEG
64774: PUSH
64775: LD_INT 2
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: LIST
64786: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64787: LD_ADDR_VAR 0 57
64791: PUSH
64792: LD_INT 2
64794: NEG
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 3
64805: NEG
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 3
64816: NEG
64817: PUSH
64818: LD_INT 1
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: LIST
64830: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64831: LD_ADDR_VAR 0 58
64835: PUSH
64836: LD_INT 2
64838: NEG
64839: PUSH
64840: LD_INT 3
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 3
64850: NEG
64851: PUSH
64852: LD_INT 2
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 3
64862: NEG
64863: PUSH
64864: LD_INT 3
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: LIST
64876: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64877: LD_ADDR_VAR 0 59
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: LD_INT 2
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: LD_INT 2
64899: NEG
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: LD_INT 1
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64921: LD_ADDR_VAR 0 60
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 2
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 2
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: LIST
64961: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64962: LD_ADDR_VAR 0 61
64966: PUSH
64967: LD_INT 2
64969: PUSH
64970: LD_INT 1
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 2
64979: PUSH
64980: LD_INT 2
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: LD_INT 2
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: LIST
65001: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65002: LD_ADDR_VAR 0 62
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: LD_INT 2
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: LD_INT 2
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 1
65029: NEG
65030: PUSH
65031: LD_INT 1
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: LIST
65042: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65043: LD_ADDR_VAR 0 63
65047: PUSH
65048: LD_INT 1
65050: NEG
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 2
65061: NEG
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 2
65072: NEG
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65087: LD_ADDR_VAR 0 64
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: LD_INT 2
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 2
65106: NEG
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 2
65118: NEG
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: ST_TO_ADDR
// end ; 2 :
65133: GO 68399
65135: LD_INT 2
65137: DOUBLE
65138: EQUAL
65139: IFTRUE 65143
65141: GO 68398
65143: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65144: LD_ADDR_VAR 0 29
65148: PUSH
65149: LD_INT 4
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 4
65161: PUSH
65162: LD_INT 1
65164: NEG
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 5
65172: PUSH
65173: LD_INT 0
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 5
65182: PUSH
65183: LD_INT 1
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 4
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 3
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 3
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 3
65223: PUSH
65224: LD_INT 2
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 5
65234: PUSH
65235: LD_INT 2
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 3
65244: PUSH
65245: LD_INT 3
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 3
65254: PUSH
65255: LD_INT 2
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 4
65264: PUSH
65265: LD_INT 3
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 4
65274: PUSH
65275: LD_INT 4
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 3
65284: PUSH
65285: LD_INT 4
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 2
65294: PUSH
65295: LD_INT 3
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 2
65304: PUSH
65305: LD_INT 2
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 4
65314: PUSH
65315: LD_INT 2
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 2
65324: PUSH
65325: LD_INT 4
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: LD_INT 4
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 0
65344: PUSH
65345: LD_INT 3
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: LD_INT 4
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 1
65364: PUSH
65365: LD_INT 5
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: LD_INT 5
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: LD_INT 4
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: LD_INT 3
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 2
65406: PUSH
65407: LD_INT 5
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 2
65416: NEG
65417: PUSH
65418: LD_INT 3
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 3
65427: NEG
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 3
65438: NEG
65439: PUSH
65440: LD_INT 1
65442: NEG
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 2
65450: NEG
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 2
65461: NEG
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 3
65472: NEG
65473: PUSH
65474: LD_INT 1
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 4
65483: NEG
65484: PUSH
65485: LD_INT 0
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 4
65494: NEG
65495: PUSH
65496: LD_INT 1
65498: NEG
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 4
65506: NEG
65507: PUSH
65508: LD_INT 2
65510: NEG
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 2
65518: NEG
65519: PUSH
65520: LD_INT 2
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 4
65529: NEG
65530: PUSH
65531: LD_INT 4
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 4
65541: NEG
65542: PUSH
65543: LD_INT 5
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 3
65553: NEG
65554: PUSH
65555: LD_INT 4
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 3
65565: NEG
65566: PUSH
65567: LD_INT 3
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 4
65577: NEG
65578: PUSH
65579: LD_INT 3
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 5
65589: NEG
65590: PUSH
65591: LD_INT 4
65593: NEG
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 5
65601: NEG
65602: PUSH
65603: LD_INT 5
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 3
65613: NEG
65614: PUSH
65615: LD_INT 5
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 5
65625: NEG
65626: PUSH
65627: LD_INT 3
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65682: LD_ADDR_VAR 0 30
65686: PUSH
65687: LD_INT 4
65689: PUSH
65690: LD_INT 4
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 4
65699: PUSH
65700: LD_INT 3
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 5
65709: PUSH
65710: LD_INT 4
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 5
65719: PUSH
65720: LD_INT 5
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 4
65729: PUSH
65730: LD_INT 5
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 3
65739: PUSH
65740: LD_INT 4
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 3
65749: PUSH
65750: LD_INT 3
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 5
65759: PUSH
65760: LD_INT 3
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 3
65769: PUSH
65770: LD_INT 5
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: LD_INT 3
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: LD_INT 3
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 1
65809: PUSH
65810: LD_INT 4
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: LD_INT 4
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: NEG
65830: PUSH
65831: LD_INT 3
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: LD_INT 2
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 2
65851: PUSH
65852: LD_INT 4
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 2
65861: NEG
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 4
65872: NEG
65873: PUSH
65874: LD_INT 0
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 4
65883: NEG
65884: PUSH
65885: LD_INT 1
65887: NEG
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 3
65895: NEG
65896: PUSH
65897: LD_INT 0
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 3
65906: NEG
65907: PUSH
65908: LD_INT 1
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 4
65917: NEG
65918: PUSH
65919: LD_INT 1
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 5
65928: NEG
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 5
65939: NEG
65940: PUSH
65941: LD_INT 1
65943: NEG
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 5
65951: NEG
65952: PUSH
65953: LD_INT 2
65955: NEG
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 3
65963: NEG
65964: PUSH
65965: LD_INT 2
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 3
65974: NEG
65975: PUSH
65976: LD_INT 3
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 3
65986: NEG
65987: PUSH
65988: LD_INT 4
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 2
65998: NEG
65999: PUSH
66000: LD_INT 3
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 2
66010: NEG
66011: PUSH
66012: LD_INT 2
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 3
66022: NEG
66023: PUSH
66024: LD_INT 2
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 4
66034: NEG
66035: PUSH
66036: LD_INT 3
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 4
66046: NEG
66047: PUSH
66048: LD_INT 4
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 2
66058: NEG
66059: PUSH
66060: LD_INT 4
66062: NEG
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 4
66070: NEG
66071: PUSH
66072: LD_INT 2
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 0
66082: PUSH
66083: LD_INT 4
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 0
66093: PUSH
66094: LD_INT 5
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 1
66104: PUSH
66105: LD_INT 4
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: PUSH
66116: LD_INT 3
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 0
66126: PUSH
66127: LD_INT 3
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 1
66137: NEG
66138: PUSH
66139: LD_INT 4
66141: NEG
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 1
66149: NEG
66150: PUSH
66151: LD_INT 5
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 2
66161: PUSH
66162: LD_INT 3
66164: NEG
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 2
66172: NEG
66173: PUSH
66174: LD_INT 5
66176: NEG
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66229: LD_ADDR_VAR 0 31
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: LD_INT 4
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 0
66246: PUSH
66247: LD_INT 3
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: LD_INT 4
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: LD_INT 5
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: LD_INT 5
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: LD_INT 4
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 1
66297: NEG
66298: PUSH
66299: LD_INT 3
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 2
66308: PUSH
66309: LD_INT 5
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 2
66318: NEG
66319: PUSH
66320: LD_INT 3
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 3
66329: NEG
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 3
66340: NEG
66341: PUSH
66342: LD_INT 1
66344: NEG
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 2
66352: NEG
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 2
66363: NEG
66364: PUSH
66365: LD_INT 1
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 3
66374: NEG
66375: PUSH
66376: LD_INT 1
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 4
66385: NEG
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 4
66396: NEG
66397: PUSH
66398: LD_INT 1
66400: NEG
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 4
66408: NEG
66409: PUSH
66410: LD_INT 2
66412: NEG
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 2
66420: NEG
66421: PUSH
66422: LD_INT 2
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 4
66431: NEG
66432: PUSH
66433: LD_INT 4
66435: NEG
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 4
66443: NEG
66444: PUSH
66445: LD_INT 5
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 3
66455: NEG
66456: PUSH
66457: LD_INT 4
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 3
66467: NEG
66468: PUSH
66469: LD_INT 3
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 4
66479: NEG
66480: PUSH
66481: LD_INT 3
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 5
66491: NEG
66492: PUSH
66493: LD_INT 4
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 5
66503: NEG
66504: PUSH
66505: LD_INT 5
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 3
66515: NEG
66516: PUSH
66517: LD_INT 5
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 5
66527: NEG
66528: PUSH
66529: LD_INT 3
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: LD_INT 3
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 0
66550: PUSH
66551: LD_INT 4
66553: NEG
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 1
66561: PUSH
66562: LD_INT 3
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: LD_INT 2
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: LD_INT 2
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: NEG
66595: PUSH
66596: LD_INT 3
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 1
66606: NEG
66607: PUSH
66608: LD_INT 4
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 2
66618: PUSH
66619: LD_INT 2
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 2
66629: NEG
66630: PUSH
66631: LD_INT 4
66633: NEG
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 4
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 4
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 5
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 5
66672: PUSH
66673: LD_INT 1
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 4
66682: PUSH
66683: LD_INT 1
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 3
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 3
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 3
66713: PUSH
66714: LD_INT 2
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 5
66724: PUSH
66725: LD_INT 2
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66779: LD_ADDR_VAR 0 32
66783: PUSH
66784: LD_INT 4
66786: NEG
66787: PUSH
66788: LD_INT 0
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 4
66797: NEG
66798: PUSH
66799: LD_INT 1
66801: NEG
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 3
66809: NEG
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 3
66820: NEG
66821: PUSH
66822: LD_INT 1
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 4
66831: NEG
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 5
66842: NEG
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 5
66853: NEG
66854: PUSH
66855: LD_INT 1
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 5
66865: NEG
66866: PUSH
66867: LD_INT 2
66869: NEG
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 3
66877: NEG
66878: PUSH
66879: LD_INT 2
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 3
66888: NEG
66889: PUSH
66890: LD_INT 3
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 3
66900: NEG
66901: PUSH
66902: LD_INT 4
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 2
66912: NEG
66913: PUSH
66914: LD_INT 3
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 2
66924: NEG
66925: PUSH
66926: LD_INT 2
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 3
66936: NEG
66937: PUSH
66938: LD_INT 2
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 4
66948: NEG
66949: PUSH
66950: LD_INT 3
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 4
66960: NEG
66961: PUSH
66962: LD_INT 4
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 2
66972: NEG
66973: PUSH
66974: LD_INT 4
66976: NEG
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 4
66984: NEG
66985: PUSH
66986: LD_INT 2
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 0
66996: PUSH
66997: LD_INT 4
66999: NEG
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 0
67007: PUSH
67008: LD_INT 5
67010: NEG
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 1
67018: PUSH
67019: LD_INT 4
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 1
67029: PUSH
67030: LD_INT 3
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: LD_INT 3
67043: NEG
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 1
67051: NEG
67052: PUSH
67053: LD_INT 4
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 1
67063: NEG
67064: PUSH
67065: LD_INT 5
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 2
67075: PUSH
67076: LD_INT 3
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 2
67086: NEG
67087: PUSH
67088: LD_INT 5
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 3
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 3
67108: PUSH
67109: LD_INT 1
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 4
67119: PUSH
67120: LD_INT 0
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 4
67129: PUSH
67130: LD_INT 1
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 3
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 2
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 2
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 2
67170: PUSH
67171: LD_INT 2
67173: NEG
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 4
67181: PUSH
67182: LD_INT 2
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 4
67191: PUSH
67192: LD_INT 4
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 4
67201: PUSH
67202: LD_INT 3
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 5
67211: PUSH
67212: LD_INT 4
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 5
67221: PUSH
67222: LD_INT 5
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 4
67231: PUSH
67232: LD_INT 5
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 3
67241: PUSH
67242: LD_INT 4
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: LD_INT 3
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 5
67261: PUSH
67262: LD_INT 3
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: LD_INT 5
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67326: LD_ADDR_VAR 0 33
67330: PUSH
67331: LD_INT 4
67333: NEG
67334: PUSH
67335: LD_INT 4
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 4
67345: NEG
67346: PUSH
67347: LD_INT 5
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 3
67357: NEG
67358: PUSH
67359: LD_INT 4
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 3
67369: NEG
67370: PUSH
67371: LD_INT 3
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 4
67381: NEG
67382: PUSH
67383: LD_INT 3
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 5
67393: NEG
67394: PUSH
67395: LD_INT 4
67397: NEG
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 5
67405: NEG
67406: PUSH
67407: LD_INT 5
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 3
67417: NEG
67418: PUSH
67419: LD_INT 5
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 5
67429: NEG
67430: PUSH
67431: LD_INT 3
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 0
67441: PUSH
67442: LD_INT 3
67444: NEG
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 0
67452: PUSH
67453: LD_INT 4
67455: NEG
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 1
67463: PUSH
67464: LD_INT 3
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 1
67474: PUSH
67475: LD_INT 2
67477: NEG
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 0
67485: PUSH
67486: LD_INT 2
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 1
67496: NEG
67497: PUSH
67498: LD_INT 3
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 1
67508: NEG
67509: PUSH
67510: LD_INT 4
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 2
67520: PUSH
67521: LD_INT 2
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 2
67531: NEG
67532: PUSH
67533: LD_INT 4
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 4
67543: PUSH
67544: LD_INT 0
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 4
67553: PUSH
67554: LD_INT 1
67556: NEG
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 5
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 5
67574: PUSH
67575: LD_INT 1
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 4
67584: PUSH
67585: LD_INT 1
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 3
67594: PUSH
67595: LD_INT 0
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 3
67604: PUSH
67605: LD_INT 1
67607: NEG
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 3
67615: PUSH
67616: LD_INT 2
67618: NEG
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 5
67626: PUSH
67627: LD_INT 2
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 3
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 3
67646: PUSH
67647: LD_INT 2
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 4
67656: PUSH
67657: LD_INT 3
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 4
67666: PUSH
67667: LD_INT 4
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 3
67676: PUSH
67677: LD_INT 4
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 2
67686: PUSH
67687: LD_INT 3
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 2
67696: PUSH
67697: LD_INT 2
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 4
67706: PUSH
67707: LD_INT 2
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 2
67716: PUSH
67717: LD_INT 4
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: LD_INT 4
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 0
67736: PUSH
67737: LD_INT 3
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 1
67746: PUSH
67747: LD_INT 4
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 1
67756: PUSH
67757: LD_INT 5
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 0
67766: PUSH
67767: LD_INT 5
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 1
67776: NEG
67777: PUSH
67778: LD_INT 4
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 1
67787: NEG
67788: PUSH
67789: LD_INT 3
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 2
67798: PUSH
67799: LD_INT 5
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 2
67808: NEG
67809: PUSH
67810: LD_INT 3
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67864: LD_ADDR_VAR 0 34
67868: PUSH
67869: LD_INT 0
67871: PUSH
67872: LD_INT 4
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 0
67882: PUSH
67883: LD_INT 5
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 1
67893: PUSH
67894: LD_INT 4
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 1
67904: PUSH
67905: LD_INT 3
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 0
67915: PUSH
67916: LD_INT 3
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 1
67926: NEG
67927: PUSH
67928: LD_INT 4
67930: NEG
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 1
67938: NEG
67939: PUSH
67940: LD_INT 5
67942: NEG
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 2
67950: PUSH
67951: LD_INT 3
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 2
67961: NEG
67962: PUSH
67963: LD_INT 5
67965: NEG
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 3
67973: PUSH
67974: LD_INT 0
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 3
67983: PUSH
67984: LD_INT 1
67986: NEG
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 4
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 4
68004: PUSH
68005: LD_INT 1
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 3
68014: PUSH
68015: LD_INT 1
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 2
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 2
68034: PUSH
68035: LD_INT 1
68037: NEG
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 2
68045: PUSH
68046: LD_INT 2
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 4
68056: PUSH
68057: LD_INT 2
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 4
68066: PUSH
68067: LD_INT 4
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 4
68076: PUSH
68077: LD_INT 3
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 5
68086: PUSH
68087: LD_INT 4
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 5
68096: PUSH
68097: LD_INT 5
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 4
68106: PUSH
68107: LD_INT 5
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 3
68116: PUSH
68117: LD_INT 4
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 3
68126: PUSH
68127: LD_INT 3
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 5
68136: PUSH
68137: LD_INT 3
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 3
68146: PUSH
68147: LD_INT 5
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 0
68156: PUSH
68157: LD_INT 3
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 0
68166: PUSH
68167: LD_INT 2
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 1
68176: PUSH
68177: LD_INT 3
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 1
68186: PUSH
68187: LD_INT 4
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 0
68196: PUSH
68197: LD_INT 4
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 1
68206: NEG
68207: PUSH
68208: LD_INT 3
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 1
68217: NEG
68218: PUSH
68219: LD_INT 2
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 2
68228: PUSH
68229: LD_INT 4
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 2
68238: NEG
68239: PUSH
68240: LD_INT 2
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 4
68249: NEG
68250: PUSH
68251: LD_INT 0
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 4
68260: NEG
68261: PUSH
68262: LD_INT 1
68264: NEG
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 3
68272: NEG
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 3
68283: NEG
68284: PUSH
68285: LD_INT 1
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 4
68294: NEG
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 5
68305: NEG
68306: PUSH
68307: LD_INT 0
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 5
68316: NEG
68317: PUSH
68318: LD_INT 1
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 5
68328: NEG
68329: PUSH
68330: LD_INT 2
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 3
68340: NEG
68341: PUSH
68342: LD_INT 2
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: ST_TO_ADDR
// end ; end ;
68396: GO 68399
68398: POP
// case btype of b_depot , b_warehouse :
68399: LD_VAR 0 1
68403: PUSH
68404: LD_INT 0
68406: DOUBLE
68407: EQUAL
68408: IFTRUE 68418
68410: LD_INT 1
68412: DOUBLE
68413: EQUAL
68414: IFTRUE 68418
68416: GO 68619
68418: POP
// case nation of nation_american :
68419: LD_VAR 0 5
68423: PUSH
68424: LD_INT 1
68426: DOUBLE
68427: EQUAL
68428: IFTRUE 68432
68430: GO 68488
68432: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68433: LD_ADDR_VAR 0 9
68437: PUSH
68438: LD_VAR 0 11
68442: PUSH
68443: LD_VAR 0 12
68447: PUSH
68448: LD_VAR 0 13
68452: PUSH
68453: LD_VAR 0 14
68457: PUSH
68458: LD_VAR 0 15
68462: PUSH
68463: LD_VAR 0 16
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: PUSH
68476: LD_VAR 0 4
68480: PUSH
68481: LD_INT 1
68483: PLUS
68484: ARRAY
68485: ST_TO_ADDR
68486: GO 68617
68488: LD_INT 2
68490: DOUBLE
68491: EQUAL
68492: IFTRUE 68496
68494: GO 68552
68496: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68497: LD_ADDR_VAR 0 9
68501: PUSH
68502: LD_VAR 0 17
68506: PUSH
68507: LD_VAR 0 18
68511: PUSH
68512: LD_VAR 0 19
68516: PUSH
68517: LD_VAR 0 20
68521: PUSH
68522: LD_VAR 0 21
68526: PUSH
68527: LD_VAR 0 22
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: PUSH
68540: LD_VAR 0 4
68544: PUSH
68545: LD_INT 1
68547: PLUS
68548: ARRAY
68549: ST_TO_ADDR
68550: GO 68617
68552: LD_INT 3
68554: DOUBLE
68555: EQUAL
68556: IFTRUE 68560
68558: GO 68616
68560: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68561: LD_ADDR_VAR 0 9
68565: PUSH
68566: LD_VAR 0 23
68570: PUSH
68571: LD_VAR 0 24
68575: PUSH
68576: LD_VAR 0 25
68580: PUSH
68581: LD_VAR 0 26
68585: PUSH
68586: LD_VAR 0 27
68590: PUSH
68591: LD_VAR 0 28
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: PUSH
68604: LD_VAR 0 4
68608: PUSH
68609: LD_INT 1
68611: PLUS
68612: ARRAY
68613: ST_TO_ADDR
68614: GO 68617
68616: POP
68617: GO 69172
68619: LD_INT 2
68621: DOUBLE
68622: EQUAL
68623: IFTRUE 68633
68625: LD_INT 3
68627: DOUBLE
68628: EQUAL
68629: IFTRUE 68633
68631: GO 68689
68633: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68634: LD_ADDR_VAR 0 9
68638: PUSH
68639: LD_VAR 0 29
68643: PUSH
68644: LD_VAR 0 30
68648: PUSH
68649: LD_VAR 0 31
68653: PUSH
68654: LD_VAR 0 32
68658: PUSH
68659: LD_VAR 0 33
68663: PUSH
68664: LD_VAR 0 34
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: PUSH
68677: LD_VAR 0 4
68681: PUSH
68682: LD_INT 1
68684: PLUS
68685: ARRAY
68686: ST_TO_ADDR
68687: GO 69172
68689: LD_INT 16
68691: DOUBLE
68692: EQUAL
68693: IFTRUE 68751
68695: LD_INT 17
68697: DOUBLE
68698: EQUAL
68699: IFTRUE 68751
68701: LD_INT 18
68703: DOUBLE
68704: EQUAL
68705: IFTRUE 68751
68707: LD_INT 19
68709: DOUBLE
68710: EQUAL
68711: IFTRUE 68751
68713: LD_INT 22
68715: DOUBLE
68716: EQUAL
68717: IFTRUE 68751
68719: LD_INT 20
68721: DOUBLE
68722: EQUAL
68723: IFTRUE 68751
68725: LD_INT 21
68727: DOUBLE
68728: EQUAL
68729: IFTRUE 68751
68731: LD_INT 23
68733: DOUBLE
68734: EQUAL
68735: IFTRUE 68751
68737: LD_INT 24
68739: DOUBLE
68740: EQUAL
68741: IFTRUE 68751
68743: LD_INT 25
68745: DOUBLE
68746: EQUAL
68747: IFTRUE 68751
68749: GO 68807
68751: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68752: LD_ADDR_VAR 0 9
68756: PUSH
68757: LD_VAR 0 35
68761: PUSH
68762: LD_VAR 0 36
68766: PUSH
68767: LD_VAR 0 37
68771: PUSH
68772: LD_VAR 0 38
68776: PUSH
68777: LD_VAR 0 39
68781: PUSH
68782: LD_VAR 0 40
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: PUSH
68795: LD_VAR 0 4
68799: PUSH
68800: LD_INT 1
68802: PLUS
68803: ARRAY
68804: ST_TO_ADDR
68805: GO 69172
68807: LD_INT 6
68809: DOUBLE
68810: EQUAL
68811: IFTRUE 68863
68813: LD_INT 7
68815: DOUBLE
68816: EQUAL
68817: IFTRUE 68863
68819: LD_INT 8
68821: DOUBLE
68822: EQUAL
68823: IFTRUE 68863
68825: LD_INT 13
68827: DOUBLE
68828: EQUAL
68829: IFTRUE 68863
68831: LD_INT 12
68833: DOUBLE
68834: EQUAL
68835: IFTRUE 68863
68837: LD_INT 15
68839: DOUBLE
68840: EQUAL
68841: IFTRUE 68863
68843: LD_INT 11
68845: DOUBLE
68846: EQUAL
68847: IFTRUE 68863
68849: LD_INT 14
68851: DOUBLE
68852: EQUAL
68853: IFTRUE 68863
68855: LD_INT 10
68857: DOUBLE
68858: EQUAL
68859: IFTRUE 68863
68861: GO 68919
68863: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68864: LD_ADDR_VAR 0 9
68868: PUSH
68869: LD_VAR 0 41
68873: PUSH
68874: LD_VAR 0 42
68878: PUSH
68879: LD_VAR 0 43
68883: PUSH
68884: LD_VAR 0 44
68888: PUSH
68889: LD_VAR 0 45
68893: PUSH
68894: LD_VAR 0 46
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: PUSH
68907: LD_VAR 0 4
68911: PUSH
68912: LD_INT 1
68914: PLUS
68915: ARRAY
68916: ST_TO_ADDR
68917: GO 69172
68919: LD_INT 36
68921: DOUBLE
68922: EQUAL
68923: IFTRUE 68927
68925: GO 68983
68927: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68928: LD_ADDR_VAR 0 9
68932: PUSH
68933: LD_VAR 0 47
68937: PUSH
68938: LD_VAR 0 48
68942: PUSH
68943: LD_VAR 0 49
68947: PUSH
68948: LD_VAR 0 50
68952: PUSH
68953: LD_VAR 0 51
68957: PUSH
68958: LD_VAR 0 52
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: PUSH
68971: LD_VAR 0 4
68975: PUSH
68976: LD_INT 1
68978: PLUS
68979: ARRAY
68980: ST_TO_ADDR
68981: GO 69172
68983: LD_INT 4
68985: DOUBLE
68986: EQUAL
68987: IFTRUE 69009
68989: LD_INT 5
68991: DOUBLE
68992: EQUAL
68993: IFTRUE 69009
68995: LD_INT 34
68997: DOUBLE
68998: EQUAL
68999: IFTRUE 69009
69001: LD_INT 37
69003: DOUBLE
69004: EQUAL
69005: IFTRUE 69009
69007: GO 69065
69009: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69010: LD_ADDR_VAR 0 9
69014: PUSH
69015: LD_VAR 0 53
69019: PUSH
69020: LD_VAR 0 54
69024: PUSH
69025: LD_VAR 0 55
69029: PUSH
69030: LD_VAR 0 56
69034: PUSH
69035: LD_VAR 0 57
69039: PUSH
69040: LD_VAR 0 58
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: PUSH
69053: LD_VAR 0 4
69057: PUSH
69058: LD_INT 1
69060: PLUS
69061: ARRAY
69062: ST_TO_ADDR
69063: GO 69172
69065: LD_INT 31
69067: DOUBLE
69068: EQUAL
69069: IFTRUE 69115
69071: LD_INT 32
69073: DOUBLE
69074: EQUAL
69075: IFTRUE 69115
69077: LD_INT 33
69079: DOUBLE
69080: EQUAL
69081: IFTRUE 69115
69083: LD_INT 27
69085: DOUBLE
69086: EQUAL
69087: IFTRUE 69115
69089: LD_INT 26
69091: DOUBLE
69092: EQUAL
69093: IFTRUE 69115
69095: LD_INT 28
69097: DOUBLE
69098: EQUAL
69099: IFTRUE 69115
69101: LD_INT 29
69103: DOUBLE
69104: EQUAL
69105: IFTRUE 69115
69107: LD_INT 30
69109: DOUBLE
69110: EQUAL
69111: IFTRUE 69115
69113: GO 69171
69115: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69116: LD_ADDR_VAR 0 9
69120: PUSH
69121: LD_VAR 0 59
69125: PUSH
69126: LD_VAR 0 60
69130: PUSH
69131: LD_VAR 0 61
69135: PUSH
69136: LD_VAR 0 62
69140: PUSH
69141: LD_VAR 0 63
69145: PUSH
69146: LD_VAR 0 64
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: PUSH
69159: LD_VAR 0 4
69163: PUSH
69164: LD_INT 1
69166: PLUS
69167: ARRAY
69168: ST_TO_ADDR
69169: GO 69172
69171: POP
// temp_list2 = [ ] ;
69172: LD_ADDR_VAR 0 10
69176: PUSH
69177: EMPTY
69178: ST_TO_ADDR
// for i in temp_list do
69179: LD_ADDR_VAR 0 8
69183: PUSH
69184: LD_VAR 0 9
69188: PUSH
69189: FOR_IN
69190: IFFALSE 69242
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69192: LD_ADDR_VAR 0 10
69196: PUSH
69197: LD_VAR 0 10
69201: PUSH
69202: LD_VAR 0 8
69206: PUSH
69207: LD_INT 1
69209: ARRAY
69210: PUSH
69211: LD_VAR 0 2
69215: PLUS
69216: PUSH
69217: LD_VAR 0 8
69221: PUSH
69222: LD_INT 2
69224: ARRAY
69225: PUSH
69226: LD_VAR 0 3
69230: PLUS
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: EMPTY
69237: LIST
69238: ADD
69239: ST_TO_ADDR
69240: GO 69189
69242: POP
69243: POP
// result = temp_list2 ;
69244: LD_ADDR_VAR 0 7
69248: PUSH
69249: LD_VAR 0 10
69253: ST_TO_ADDR
// end ;
69254: LD_VAR 0 7
69258: RET
// export function EnemyInRange ( unit , dist ) ; begin
69259: LD_INT 0
69261: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69262: LD_ADDR_VAR 0 3
69266: PUSH
69267: LD_VAR 0 1
69271: PPUSH
69272: CALL_OW 255
69276: PPUSH
69277: LD_VAR 0 1
69281: PPUSH
69282: CALL_OW 250
69286: PPUSH
69287: LD_VAR 0 1
69291: PPUSH
69292: CALL_OW 251
69296: PPUSH
69297: LD_VAR 0 2
69301: PPUSH
69302: CALL 42655 0 4
69306: PUSH
69307: LD_INT 4
69309: ARRAY
69310: ST_TO_ADDR
// end ;
69311: LD_VAR 0 3
69315: RET
// export function PlayerSeeMe ( unit ) ; begin
69316: LD_INT 0
69318: PPUSH
// result := See ( your_side , unit ) ;
69319: LD_ADDR_VAR 0 2
69323: PUSH
69324: LD_OWVAR 2
69328: PPUSH
69329: LD_VAR 0 1
69333: PPUSH
69334: CALL_OW 292
69338: ST_TO_ADDR
// end ;
69339: LD_VAR 0 2
69343: RET
// export function ReverseDir ( unit ) ; begin
69344: LD_INT 0
69346: PPUSH
// if not unit then
69347: LD_VAR 0 1
69351: NOT
69352: IFFALSE 69356
// exit ;
69354: GO 69379
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69356: LD_ADDR_VAR 0 2
69360: PUSH
69361: LD_VAR 0 1
69365: PPUSH
69366: CALL_OW 254
69370: PUSH
69371: LD_INT 3
69373: PLUS
69374: PUSH
69375: LD_INT 6
69377: MOD
69378: ST_TO_ADDR
// end ;
69379: LD_VAR 0 2
69383: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69384: LD_INT 0
69386: PPUSH
69387: PPUSH
69388: PPUSH
69389: PPUSH
69390: PPUSH
// if not hexes then
69391: LD_VAR 0 2
69395: NOT
69396: IFFALSE 69400
// exit ;
69398: GO 69548
// dist := 9999 ;
69400: LD_ADDR_VAR 0 5
69404: PUSH
69405: LD_INT 9999
69407: ST_TO_ADDR
// for i = 1 to hexes do
69408: LD_ADDR_VAR 0 4
69412: PUSH
69413: DOUBLE
69414: LD_INT 1
69416: DEC
69417: ST_TO_ADDR
69418: LD_VAR 0 2
69422: PUSH
69423: FOR_TO
69424: IFFALSE 69536
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69426: LD_VAR 0 1
69430: PPUSH
69431: LD_VAR 0 2
69435: PUSH
69436: LD_VAR 0 4
69440: ARRAY
69441: PUSH
69442: LD_INT 1
69444: ARRAY
69445: PPUSH
69446: LD_VAR 0 2
69450: PUSH
69451: LD_VAR 0 4
69455: ARRAY
69456: PUSH
69457: LD_INT 2
69459: ARRAY
69460: PPUSH
69461: CALL_OW 297
69465: PUSH
69466: LD_VAR 0 5
69470: LESS
69471: IFFALSE 69534
// begin hex := hexes [ i ] ;
69473: LD_ADDR_VAR 0 7
69477: PUSH
69478: LD_VAR 0 2
69482: PUSH
69483: LD_VAR 0 4
69487: ARRAY
69488: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69489: LD_ADDR_VAR 0 5
69493: PUSH
69494: LD_VAR 0 1
69498: PPUSH
69499: LD_VAR 0 2
69503: PUSH
69504: LD_VAR 0 4
69508: ARRAY
69509: PUSH
69510: LD_INT 1
69512: ARRAY
69513: PPUSH
69514: LD_VAR 0 2
69518: PUSH
69519: LD_VAR 0 4
69523: ARRAY
69524: PUSH
69525: LD_INT 2
69527: ARRAY
69528: PPUSH
69529: CALL_OW 297
69533: ST_TO_ADDR
// end ; end ;
69534: GO 69423
69536: POP
69537: POP
// result := hex ;
69538: LD_ADDR_VAR 0 3
69542: PUSH
69543: LD_VAR 0 7
69547: ST_TO_ADDR
// end ;
69548: LD_VAR 0 3
69552: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69553: LD_INT 0
69555: PPUSH
69556: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69557: LD_VAR 0 1
69561: NOT
69562: PUSH
69563: LD_VAR 0 1
69567: PUSH
69568: LD_INT 21
69570: PUSH
69571: LD_INT 2
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 23
69580: PUSH
69581: LD_INT 2
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PPUSH
69592: CALL_OW 69
69596: IN
69597: NOT
69598: OR
69599: IFFALSE 69603
// exit ;
69601: GO 69650
// for i = 1 to 3 do
69603: LD_ADDR_VAR 0 3
69607: PUSH
69608: DOUBLE
69609: LD_INT 1
69611: DEC
69612: ST_TO_ADDR
69613: LD_INT 3
69615: PUSH
69616: FOR_TO
69617: IFFALSE 69648
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69619: LD_VAR 0 1
69623: PPUSH
69624: CALL_OW 250
69628: PPUSH
69629: LD_VAR 0 1
69633: PPUSH
69634: CALL_OW 251
69638: PPUSH
69639: LD_INT 1
69641: PPUSH
69642: CALL_OW 453
69646: GO 69616
69648: POP
69649: POP
// end ;
69650: LD_VAR 0 2
69654: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69655: LD_INT 0
69657: PPUSH
69658: PPUSH
69659: PPUSH
69660: PPUSH
69661: PPUSH
69662: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69663: LD_VAR 0 1
69667: NOT
69668: PUSH
69669: LD_VAR 0 2
69673: NOT
69674: OR
69675: PUSH
69676: LD_VAR 0 1
69680: PPUSH
69681: CALL_OW 314
69685: OR
69686: IFFALSE 69690
// exit ;
69688: GO 70131
// x := GetX ( enemy_unit ) ;
69690: LD_ADDR_VAR 0 7
69694: PUSH
69695: LD_VAR 0 2
69699: PPUSH
69700: CALL_OW 250
69704: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69705: LD_ADDR_VAR 0 8
69709: PUSH
69710: LD_VAR 0 2
69714: PPUSH
69715: CALL_OW 251
69719: ST_TO_ADDR
// if not x or not y then
69720: LD_VAR 0 7
69724: NOT
69725: PUSH
69726: LD_VAR 0 8
69730: NOT
69731: OR
69732: IFFALSE 69736
// exit ;
69734: GO 70131
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69736: LD_ADDR_VAR 0 6
69740: PUSH
69741: LD_VAR 0 7
69745: PPUSH
69746: LD_INT 0
69748: PPUSH
69749: LD_INT 4
69751: PPUSH
69752: CALL_OW 272
69756: PUSH
69757: LD_VAR 0 8
69761: PPUSH
69762: LD_INT 0
69764: PPUSH
69765: LD_INT 4
69767: PPUSH
69768: CALL_OW 273
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_VAR 0 7
69781: PPUSH
69782: LD_INT 1
69784: PPUSH
69785: LD_INT 4
69787: PPUSH
69788: CALL_OW 272
69792: PUSH
69793: LD_VAR 0 8
69797: PPUSH
69798: LD_INT 1
69800: PPUSH
69801: LD_INT 4
69803: PPUSH
69804: CALL_OW 273
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_VAR 0 7
69817: PPUSH
69818: LD_INT 2
69820: PPUSH
69821: LD_INT 4
69823: PPUSH
69824: CALL_OW 272
69828: PUSH
69829: LD_VAR 0 8
69833: PPUSH
69834: LD_INT 2
69836: PPUSH
69837: LD_INT 4
69839: PPUSH
69840: CALL_OW 273
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_VAR 0 7
69853: PPUSH
69854: LD_INT 3
69856: PPUSH
69857: LD_INT 4
69859: PPUSH
69860: CALL_OW 272
69864: PUSH
69865: LD_VAR 0 8
69869: PPUSH
69870: LD_INT 3
69872: PPUSH
69873: LD_INT 4
69875: PPUSH
69876: CALL_OW 273
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_VAR 0 7
69889: PPUSH
69890: LD_INT 4
69892: PPUSH
69893: LD_INT 4
69895: PPUSH
69896: CALL_OW 272
69900: PUSH
69901: LD_VAR 0 8
69905: PPUSH
69906: LD_INT 4
69908: PPUSH
69909: LD_INT 4
69911: PPUSH
69912: CALL_OW 273
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_VAR 0 7
69925: PPUSH
69926: LD_INT 5
69928: PPUSH
69929: LD_INT 4
69931: PPUSH
69932: CALL_OW 272
69936: PUSH
69937: LD_VAR 0 8
69941: PPUSH
69942: LD_INT 5
69944: PPUSH
69945: LD_INT 4
69947: PPUSH
69948: CALL_OW 273
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: ST_TO_ADDR
// for i = tmp downto 1 do
69965: LD_ADDR_VAR 0 4
69969: PUSH
69970: DOUBLE
69971: LD_VAR 0 6
69975: INC
69976: ST_TO_ADDR
69977: LD_INT 1
69979: PUSH
69980: FOR_DOWNTO
69981: IFFALSE 70082
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69983: LD_VAR 0 6
69987: PUSH
69988: LD_VAR 0 4
69992: ARRAY
69993: PUSH
69994: LD_INT 1
69996: ARRAY
69997: PPUSH
69998: LD_VAR 0 6
70002: PUSH
70003: LD_VAR 0 4
70007: ARRAY
70008: PUSH
70009: LD_INT 2
70011: ARRAY
70012: PPUSH
70013: CALL_OW 488
70017: NOT
70018: PUSH
70019: LD_VAR 0 6
70023: PUSH
70024: LD_VAR 0 4
70028: ARRAY
70029: PUSH
70030: LD_INT 1
70032: ARRAY
70033: PPUSH
70034: LD_VAR 0 6
70038: PUSH
70039: LD_VAR 0 4
70043: ARRAY
70044: PUSH
70045: LD_INT 2
70047: ARRAY
70048: PPUSH
70049: CALL_OW 428
70053: PUSH
70054: LD_INT 0
70056: NONEQUAL
70057: OR
70058: IFFALSE 70080
// tmp := Delete ( tmp , i ) ;
70060: LD_ADDR_VAR 0 6
70064: PUSH
70065: LD_VAR 0 6
70069: PPUSH
70070: LD_VAR 0 4
70074: PPUSH
70075: CALL_OW 3
70079: ST_TO_ADDR
70080: GO 69980
70082: POP
70083: POP
// j := GetClosestHex ( unit , tmp ) ;
70084: LD_ADDR_VAR 0 5
70088: PUSH
70089: LD_VAR 0 1
70093: PPUSH
70094: LD_VAR 0 6
70098: PPUSH
70099: CALL 69384 0 2
70103: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70104: LD_VAR 0 1
70108: PPUSH
70109: LD_VAR 0 5
70113: PUSH
70114: LD_INT 1
70116: ARRAY
70117: PPUSH
70118: LD_VAR 0 5
70122: PUSH
70123: LD_INT 2
70125: ARRAY
70126: PPUSH
70127: CALL_OW 111
// end ;
70131: LD_VAR 0 3
70135: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70136: LD_INT 0
70138: PPUSH
70139: PPUSH
70140: PPUSH
// uc_side = 0 ;
70141: LD_ADDR_OWVAR 20
70145: PUSH
70146: LD_INT 0
70148: ST_TO_ADDR
// uc_nation = 0 ;
70149: LD_ADDR_OWVAR 21
70153: PUSH
70154: LD_INT 0
70156: ST_TO_ADDR
// InitHc_All ( ) ;
70157: CALL_OW 584
// InitVc ;
70161: CALL_OW 20
// if mastodonts then
70165: LD_VAR 0 6
70169: IFFALSE 70236
// for i = 1 to mastodonts do
70171: LD_ADDR_VAR 0 11
70175: PUSH
70176: DOUBLE
70177: LD_INT 1
70179: DEC
70180: ST_TO_ADDR
70181: LD_VAR 0 6
70185: PUSH
70186: FOR_TO
70187: IFFALSE 70234
// begin vc_chassis := 31 ;
70189: LD_ADDR_OWVAR 37
70193: PUSH
70194: LD_INT 31
70196: ST_TO_ADDR
// vc_control := control_rider ;
70197: LD_ADDR_OWVAR 38
70201: PUSH
70202: LD_INT 4
70204: ST_TO_ADDR
// animal := CreateVehicle ;
70205: LD_ADDR_VAR 0 12
70209: PUSH
70210: CALL_OW 45
70214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70215: LD_VAR 0 12
70219: PPUSH
70220: LD_VAR 0 8
70224: PPUSH
70225: LD_INT 0
70227: PPUSH
70228: CALL 72424 0 3
// end ;
70232: GO 70186
70234: POP
70235: POP
// if horses then
70236: LD_VAR 0 5
70240: IFFALSE 70307
// for i = 1 to horses do
70242: LD_ADDR_VAR 0 11
70246: PUSH
70247: DOUBLE
70248: LD_INT 1
70250: DEC
70251: ST_TO_ADDR
70252: LD_VAR 0 5
70256: PUSH
70257: FOR_TO
70258: IFFALSE 70305
// begin hc_class := 21 ;
70260: LD_ADDR_OWVAR 28
70264: PUSH
70265: LD_INT 21
70267: ST_TO_ADDR
// hc_gallery :=  ;
70268: LD_ADDR_OWVAR 33
70272: PUSH
70273: LD_STRING 
70275: ST_TO_ADDR
// animal := CreateHuman ;
70276: LD_ADDR_VAR 0 12
70280: PUSH
70281: CALL_OW 44
70285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70286: LD_VAR 0 12
70290: PPUSH
70291: LD_VAR 0 8
70295: PPUSH
70296: LD_INT 0
70298: PPUSH
70299: CALL 72424 0 3
// end ;
70303: GO 70257
70305: POP
70306: POP
// if birds then
70307: LD_VAR 0 1
70311: IFFALSE 70378
// for i = 1 to birds do
70313: LD_ADDR_VAR 0 11
70317: PUSH
70318: DOUBLE
70319: LD_INT 1
70321: DEC
70322: ST_TO_ADDR
70323: LD_VAR 0 1
70327: PUSH
70328: FOR_TO
70329: IFFALSE 70376
// begin hc_class = 18 ;
70331: LD_ADDR_OWVAR 28
70335: PUSH
70336: LD_INT 18
70338: ST_TO_ADDR
// hc_gallery =  ;
70339: LD_ADDR_OWVAR 33
70343: PUSH
70344: LD_STRING 
70346: ST_TO_ADDR
// animal := CreateHuman ;
70347: LD_ADDR_VAR 0 12
70351: PUSH
70352: CALL_OW 44
70356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70357: LD_VAR 0 12
70361: PPUSH
70362: LD_VAR 0 8
70366: PPUSH
70367: LD_INT 0
70369: PPUSH
70370: CALL 72424 0 3
// end ;
70374: GO 70328
70376: POP
70377: POP
// if tigers then
70378: LD_VAR 0 2
70382: IFFALSE 70466
// for i = 1 to tigers do
70384: LD_ADDR_VAR 0 11
70388: PUSH
70389: DOUBLE
70390: LD_INT 1
70392: DEC
70393: ST_TO_ADDR
70394: LD_VAR 0 2
70398: PUSH
70399: FOR_TO
70400: IFFALSE 70464
// begin hc_class = class_tiger ;
70402: LD_ADDR_OWVAR 28
70406: PUSH
70407: LD_INT 14
70409: ST_TO_ADDR
// hc_gallery =  ;
70410: LD_ADDR_OWVAR 33
70414: PUSH
70415: LD_STRING 
70417: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70418: LD_ADDR_OWVAR 35
70422: PUSH
70423: LD_INT 7
70425: NEG
70426: PPUSH
70427: LD_INT 7
70429: PPUSH
70430: CALL_OW 12
70434: ST_TO_ADDR
// animal := CreateHuman ;
70435: LD_ADDR_VAR 0 12
70439: PUSH
70440: CALL_OW 44
70444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70445: LD_VAR 0 12
70449: PPUSH
70450: LD_VAR 0 8
70454: PPUSH
70455: LD_INT 0
70457: PPUSH
70458: CALL 72424 0 3
// end ;
70462: GO 70399
70464: POP
70465: POP
// if apemans then
70466: LD_VAR 0 3
70470: IFFALSE 70593
// for i = 1 to apemans do
70472: LD_ADDR_VAR 0 11
70476: PUSH
70477: DOUBLE
70478: LD_INT 1
70480: DEC
70481: ST_TO_ADDR
70482: LD_VAR 0 3
70486: PUSH
70487: FOR_TO
70488: IFFALSE 70591
// begin hc_class = class_apeman ;
70490: LD_ADDR_OWVAR 28
70494: PUSH
70495: LD_INT 12
70497: ST_TO_ADDR
// hc_gallery =  ;
70498: LD_ADDR_OWVAR 33
70502: PUSH
70503: LD_STRING 
70505: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70506: LD_ADDR_OWVAR 35
70510: PUSH
70511: LD_INT 2
70513: NEG
70514: PPUSH
70515: LD_INT 2
70517: PPUSH
70518: CALL_OW 12
70522: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70523: LD_ADDR_OWVAR 31
70527: PUSH
70528: LD_INT 1
70530: PPUSH
70531: LD_INT 3
70533: PPUSH
70534: CALL_OW 12
70538: PUSH
70539: LD_INT 1
70541: PPUSH
70542: LD_INT 3
70544: PPUSH
70545: CALL_OW 12
70549: PUSH
70550: LD_INT 0
70552: PUSH
70553: LD_INT 0
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: ST_TO_ADDR
// animal := CreateHuman ;
70562: LD_ADDR_VAR 0 12
70566: PUSH
70567: CALL_OW 44
70571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70572: LD_VAR 0 12
70576: PPUSH
70577: LD_VAR 0 8
70581: PPUSH
70582: LD_INT 0
70584: PPUSH
70585: CALL 72424 0 3
// end ;
70589: GO 70487
70591: POP
70592: POP
// if enchidnas then
70593: LD_VAR 0 4
70597: IFFALSE 70664
// for i = 1 to enchidnas do
70599: LD_ADDR_VAR 0 11
70603: PUSH
70604: DOUBLE
70605: LD_INT 1
70607: DEC
70608: ST_TO_ADDR
70609: LD_VAR 0 4
70613: PUSH
70614: FOR_TO
70615: IFFALSE 70662
// begin hc_class = 13 ;
70617: LD_ADDR_OWVAR 28
70621: PUSH
70622: LD_INT 13
70624: ST_TO_ADDR
// hc_gallery =  ;
70625: LD_ADDR_OWVAR 33
70629: PUSH
70630: LD_STRING 
70632: ST_TO_ADDR
// animal := CreateHuman ;
70633: LD_ADDR_VAR 0 12
70637: PUSH
70638: CALL_OW 44
70642: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70643: LD_VAR 0 12
70647: PPUSH
70648: LD_VAR 0 8
70652: PPUSH
70653: LD_INT 0
70655: PPUSH
70656: CALL 72424 0 3
// end ;
70660: GO 70614
70662: POP
70663: POP
// if fishes then
70664: LD_VAR 0 7
70668: IFFALSE 70735
// for i = 1 to fishes do
70670: LD_ADDR_VAR 0 11
70674: PUSH
70675: DOUBLE
70676: LD_INT 1
70678: DEC
70679: ST_TO_ADDR
70680: LD_VAR 0 7
70684: PUSH
70685: FOR_TO
70686: IFFALSE 70733
// begin hc_class = 20 ;
70688: LD_ADDR_OWVAR 28
70692: PUSH
70693: LD_INT 20
70695: ST_TO_ADDR
// hc_gallery =  ;
70696: LD_ADDR_OWVAR 33
70700: PUSH
70701: LD_STRING 
70703: ST_TO_ADDR
// animal := CreateHuman ;
70704: LD_ADDR_VAR 0 12
70708: PUSH
70709: CALL_OW 44
70713: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70714: LD_VAR 0 12
70718: PPUSH
70719: LD_VAR 0 9
70723: PPUSH
70724: LD_INT 0
70726: PPUSH
70727: CALL 72424 0 3
// end ;
70731: GO 70685
70733: POP
70734: POP
// end ;
70735: LD_VAR 0 10
70739: RET
// export function WantHeal ( sci , unit ) ; begin
70740: LD_INT 0
70742: PPUSH
// if GetTaskList ( sci ) > 0 then
70743: LD_VAR 0 1
70747: PPUSH
70748: CALL_OW 437
70752: PUSH
70753: LD_INT 0
70755: GREATER
70756: IFFALSE 70826
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70758: LD_VAR 0 1
70762: PPUSH
70763: CALL_OW 437
70767: PUSH
70768: LD_INT 1
70770: ARRAY
70771: PUSH
70772: LD_INT 1
70774: ARRAY
70775: PUSH
70776: LD_STRING l
70778: EQUAL
70779: PUSH
70780: LD_VAR 0 1
70784: PPUSH
70785: CALL_OW 437
70789: PUSH
70790: LD_INT 1
70792: ARRAY
70793: PUSH
70794: LD_INT 4
70796: ARRAY
70797: PUSH
70798: LD_VAR 0 2
70802: EQUAL
70803: AND
70804: IFFALSE 70816
// result := true else
70806: LD_ADDR_VAR 0 3
70810: PUSH
70811: LD_INT 1
70813: ST_TO_ADDR
70814: GO 70824
// result := false ;
70816: LD_ADDR_VAR 0 3
70820: PUSH
70821: LD_INT 0
70823: ST_TO_ADDR
// end else
70824: GO 70834
// result := false ;
70826: LD_ADDR_VAR 0 3
70830: PUSH
70831: LD_INT 0
70833: ST_TO_ADDR
// end ;
70834: LD_VAR 0 3
70838: RET
// export function HealTarget ( sci ) ; begin
70839: LD_INT 0
70841: PPUSH
// if not sci then
70842: LD_VAR 0 1
70846: NOT
70847: IFFALSE 70851
// exit ;
70849: GO 70916
// result := 0 ;
70851: LD_ADDR_VAR 0 2
70855: PUSH
70856: LD_INT 0
70858: ST_TO_ADDR
// if GetTaskList ( sci ) then
70859: LD_VAR 0 1
70863: PPUSH
70864: CALL_OW 437
70868: IFFALSE 70916
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70870: LD_VAR 0 1
70874: PPUSH
70875: CALL_OW 437
70879: PUSH
70880: LD_INT 1
70882: ARRAY
70883: PUSH
70884: LD_INT 1
70886: ARRAY
70887: PUSH
70888: LD_STRING l
70890: EQUAL
70891: IFFALSE 70916
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70893: LD_ADDR_VAR 0 2
70897: PUSH
70898: LD_VAR 0 1
70902: PPUSH
70903: CALL_OW 437
70907: PUSH
70908: LD_INT 1
70910: ARRAY
70911: PUSH
70912: LD_INT 4
70914: ARRAY
70915: ST_TO_ADDR
// end ;
70916: LD_VAR 0 2
70920: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70921: LD_INT 0
70923: PPUSH
70924: PPUSH
70925: PPUSH
70926: PPUSH
// if not base_units then
70927: LD_VAR 0 1
70931: NOT
70932: IFFALSE 70936
// exit ;
70934: GO 71023
// result := false ;
70936: LD_ADDR_VAR 0 2
70940: PUSH
70941: LD_INT 0
70943: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70944: LD_ADDR_VAR 0 5
70948: PUSH
70949: LD_VAR 0 1
70953: PPUSH
70954: LD_INT 21
70956: PUSH
70957: LD_INT 3
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PPUSH
70964: CALL_OW 72
70968: ST_TO_ADDR
// if not tmp then
70969: LD_VAR 0 5
70973: NOT
70974: IFFALSE 70978
// exit ;
70976: GO 71023
// for i in tmp do
70978: LD_ADDR_VAR 0 3
70982: PUSH
70983: LD_VAR 0 5
70987: PUSH
70988: FOR_IN
70989: IFFALSE 71021
// begin result := EnemyInRange ( i , 22 ) ;
70991: LD_ADDR_VAR 0 2
70995: PUSH
70996: LD_VAR 0 3
71000: PPUSH
71001: LD_INT 22
71003: PPUSH
71004: CALL 69259 0 2
71008: ST_TO_ADDR
// if result then
71009: LD_VAR 0 2
71013: IFFALSE 71019
// exit ;
71015: POP
71016: POP
71017: GO 71023
// end ;
71019: GO 70988
71021: POP
71022: POP
// end ;
71023: LD_VAR 0 2
71027: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71028: LD_INT 0
71030: PPUSH
71031: PPUSH
// if not units then
71032: LD_VAR 0 1
71036: NOT
71037: IFFALSE 71041
// exit ;
71039: GO 71111
// result := [ ] ;
71041: LD_ADDR_VAR 0 3
71045: PUSH
71046: EMPTY
71047: ST_TO_ADDR
// for i in units do
71048: LD_ADDR_VAR 0 4
71052: PUSH
71053: LD_VAR 0 1
71057: PUSH
71058: FOR_IN
71059: IFFALSE 71109
// if GetTag ( i ) = tag then
71061: LD_VAR 0 4
71065: PPUSH
71066: CALL_OW 110
71070: PUSH
71071: LD_VAR 0 2
71075: EQUAL
71076: IFFALSE 71107
// result := Replace ( result , result + 1 , i ) ;
71078: LD_ADDR_VAR 0 3
71082: PUSH
71083: LD_VAR 0 3
71087: PPUSH
71088: LD_VAR 0 3
71092: PUSH
71093: LD_INT 1
71095: PLUS
71096: PPUSH
71097: LD_VAR 0 4
71101: PPUSH
71102: CALL_OW 1
71106: ST_TO_ADDR
71107: GO 71058
71109: POP
71110: POP
// end ;
71111: LD_VAR 0 3
71115: RET
// export function IsDriver ( un ) ; begin
71116: LD_INT 0
71118: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71119: LD_ADDR_VAR 0 2
71123: PUSH
71124: LD_VAR 0 1
71128: PUSH
71129: LD_INT 55
71131: PUSH
71132: EMPTY
71133: LIST
71134: PPUSH
71135: CALL_OW 69
71139: IN
71140: ST_TO_ADDR
// end ;
71141: LD_VAR 0 2
71145: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71146: LD_INT 0
71148: PPUSH
71149: PPUSH
// list := [ ] ;
71150: LD_ADDR_VAR 0 5
71154: PUSH
71155: EMPTY
71156: ST_TO_ADDR
// case d of 0 :
71157: LD_VAR 0 3
71161: PUSH
71162: LD_INT 0
71164: DOUBLE
71165: EQUAL
71166: IFTRUE 71170
71168: GO 71303
71170: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71171: LD_ADDR_VAR 0 5
71175: PUSH
71176: LD_VAR 0 1
71180: PUSH
71181: LD_INT 4
71183: MINUS
71184: PUSH
71185: LD_VAR 0 2
71189: PUSH
71190: LD_INT 4
71192: MINUS
71193: PUSH
71194: LD_INT 2
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: LIST
71201: PUSH
71202: LD_VAR 0 1
71206: PUSH
71207: LD_INT 3
71209: MINUS
71210: PUSH
71211: LD_VAR 0 2
71215: PUSH
71216: LD_INT 1
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: LIST
71223: PUSH
71224: LD_VAR 0 1
71228: PUSH
71229: LD_INT 4
71231: PLUS
71232: PUSH
71233: LD_VAR 0 2
71237: PUSH
71238: LD_INT 4
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: LIST
71245: PUSH
71246: LD_VAR 0 1
71250: PUSH
71251: LD_INT 3
71253: PLUS
71254: PUSH
71255: LD_VAR 0 2
71259: PUSH
71260: LD_INT 3
71262: PLUS
71263: PUSH
71264: LD_INT 5
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: LIST
71271: PUSH
71272: LD_VAR 0 1
71276: PUSH
71277: LD_VAR 0 2
71281: PUSH
71282: LD_INT 4
71284: PLUS
71285: PUSH
71286: LD_INT 0
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: LIST
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: ST_TO_ADDR
// end ; 1 :
71301: GO 72001
71303: LD_INT 1
71305: DOUBLE
71306: EQUAL
71307: IFTRUE 71311
71309: GO 71444
71311: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71312: LD_ADDR_VAR 0 5
71316: PUSH
71317: LD_VAR 0 1
71321: PUSH
71322: LD_VAR 0 2
71326: PUSH
71327: LD_INT 4
71329: MINUS
71330: PUSH
71331: LD_INT 3
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: LIST
71338: PUSH
71339: LD_VAR 0 1
71343: PUSH
71344: LD_INT 3
71346: MINUS
71347: PUSH
71348: LD_VAR 0 2
71352: PUSH
71353: LD_INT 3
71355: MINUS
71356: PUSH
71357: LD_INT 2
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: LIST
71364: PUSH
71365: LD_VAR 0 1
71369: PUSH
71370: LD_INT 4
71372: MINUS
71373: PUSH
71374: LD_VAR 0 2
71378: PUSH
71379: LD_INT 1
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: LIST
71386: PUSH
71387: LD_VAR 0 1
71391: PUSH
71392: LD_VAR 0 2
71396: PUSH
71397: LD_INT 3
71399: PLUS
71400: PUSH
71401: LD_INT 0
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: LIST
71408: PUSH
71409: LD_VAR 0 1
71413: PUSH
71414: LD_INT 4
71416: PLUS
71417: PUSH
71418: LD_VAR 0 2
71422: PUSH
71423: LD_INT 4
71425: PLUS
71426: PUSH
71427: LD_INT 5
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: LIST
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: ST_TO_ADDR
// end ; 2 :
71442: GO 72001
71444: LD_INT 2
71446: DOUBLE
71447: EQUAL
71448: IFTRUE 71452
71450: GO 71581
71452: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71453: LD_ADDR_VAR 0 5
71457: PUSH
71458: LD_VAR 0 1
71462: PUSH
71463: LD_VAR 0 2
71467: PUSH
71468: LD_INT 3
71470: MINUS
71471: PUSH
71472: LD_INT 3
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: LIST
71479: PUSH
71480: LD_VAR 0 1
71484: PUSH
71485: LD_INT 4
71487: PLUS
71488: PUSH
71489: LD_VAR 0 2
71493: PUSH
71494: LD_INT 4
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: LIST
71501: PUSH
71502: LD_VAR 0 1
71506: PUSH
71507: LD_VAR 0 2
71511: PUSH
71512: LD_INT 4
71514: PLUS
71515: PUSH
71516: LD_INT 0
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: LIST
71523: PUSH
71524: LD_VAR 0 1
71528: PUSH
71529: LD_INT 3
71531: MINUS
71532: PUSH
71533: LD_VAR 0 2
71537: PUSH
71538: LD_INT 1
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: LIST
71545: PUSH
71546: LD_VAR 0 1
71550: PUSH
71551: LD_INT 4
71553: MINUS
71554: PUSH
71555: LD_VAR 0 2
71559: PUSH
71560: LD_INT 4
71562: MINUS
71563: PUSH
71564: LD_INT 2
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: LIST
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: ST_TO_ADDR
// end ; 3 :
71579: GO 72001
71581: LD_INT 3
71583: DOUBLE
71584: EQUAL
71585: IFTRUE 71589
71587: GO 71722
71589: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71590: LD_ADDR_VAR 0 5
71594: PUSH
71595: LD_VAR 0 1
71599: PUSH
71600: LD_INT 3
71602: PLUS
71603: PUSH
71604: LD_VAR 0 2
71608: PUSH
71609: LD_INT 4
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: LIST
71616: PUSH
71617: LD_VAR 0 1
71621: PUSH
71622: LD_INT 4
71624: PLUS
71625: PUSH
71626: LD_VAR 0 2
71630: PUSH
71631: LD_INT 4
71633: PLUS
71634: PUSH
71635: LD_INT 5
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: LIST
71642: PUSH
71643: LD_VAR 0 1
71647: PUSH
71648: LD_INT 4
71650: MINUS
71651: PUSH
71652: LD_VAR 0 2
71656: PUSH
71657: LD_INT 1
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: LIST
71664: PUSH
71665: LD_VAR 0 1
71669: PUSH
71670: LD_VAR 0 2
71674: PUSH
71675: LD_INT 4
71677: MINUS
71678: PUSH
71679: LD_INT 3
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: LIST
71686: PUSH
71687: LD_VAR 0 1
71691: PUSH
71692: LD_INT 3
71694: MINUS
71695: PUSH
71696: LD_VAR 0 2
71700: PUSH
71701: LD_INT 3
71703: MINUS
71704: PUSH
71705: LD_INT 2
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: LIST
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: ST_TO_ADDR
// end ; 4 :
71720: GO 72001
71722: LD_INT 4
71724: DOUBLE
71725: EQUAL
71726: IFTRUE 71730
71728: GO 71863
71730: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71731: LD_ADDR_VAR 0 5
71735: PUSH
71736: LD_VAR 0 1
71740: PUSH
71741: LD_VAR 0 2
71745: PUSH
71746: LD_INT 4
71748: PLUS
71749: PUSH
71750: LD_INT 0
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: LIST
71757: PUSH
71758: LD_VAR 0 1
71762: PUSH
71763: LD_INT 3
71765: PLUS
71766: PUSH
71767: LD_VAR 0 2
71771: PUSH
71772: LD_INT 3
71774: PLUS
71775: PUSH
71776: LD_INT 5
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: LIST
71783: PUSH
71784: LD_VAR 0 1
71788: PUSH
71789: LD_INT 4
71791: PLUS
71792: PUSH
71793: LD_VAR 0 2
71797: PUSH
71798: LD_INT 4
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: LIST
71805: PUSH
71806: LD_VAR 0 1
71810: PUSH
71811: LD_VAR 0 2
71815: PUSH
71816: LD_INT 3
71818: MINUS
71819: PUSH
71820: LD_INT 3
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: LIST
71827: PUSH
71828: LD_VAR 0 1
71832: PUSH
71833: LD_INT 4
71835: MINUS
71836: PUSH
71837: LD_VAR 0 2
71841: PUSH
71842: LD_INT 4
71844: MINUS
71845: PUSH
71846: LD_INT 2
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: LIST
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: ST_TO_ADDR
// end ; 5 :
71861: GO 72001
71863: LD_INT 5
71865: DOUBLE
71866: EQUAL
71867: IFTRUE 71871
71869: GO 72000
71871: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71872: LD_ADDR_VAR 0 5
71876: PUSH
71877: LD_VAR 0 1
71881: PUSH
71882: LD_INT 4
71884: MINUS
71885: PUSH
71886: LD_VAR 0 2
71890: PUSH
71891: LD_INT 1
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: LIST
71898: PUSH
71899: LD_VAR 0 1
71903: PUSH
71904: LD_VAR 0 2
71908: PUSH
71909: LD_INT 4
71911: MINUS
71912: PUSH
71913: LD_INT 3
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: LIST
71920: PUSH
71921: LD_VAR 0 1
71925: PUSH
71926: LD_INT 4
71928: PLUS
71929: PUSH
71930: LD_VAR 0 2
71934: PUSH
71935: LD_INT 4
71937: PLUS
71938: PUSH
71939: LD_INT 5
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: LIST
71946: PUSH
71947: LD_VAR 0 1
71951: PUSH
71952: LD_INT 3
71954: PLUS
71955: PUSH
71956: LD_VAR 0 2
71960: PUSH
71961: LD_INT 4
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: LIST
71968: PUSH
71969: LD_VAR 0 1
71973: PUSH
71974: LD_VAR 0 2
71978: PUSH
71979: LD_INT 3
71981: PLUS
71982: PUSH
71983: LD_INT 0
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: LIST
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: ST_TO_ADDR
// end ; end ;
71998: GO 72001
72000: POP
// result := list ;
72001: LD_ADDR_VAR 0 4
72005: PUSH
72006: LD_VAR 0 5
72010: ST_TO_ADDR
// end ;
72011: LD_VAR 0 4
72015: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72016: LD_INT 0
72018: PPUSH
72019: PPUSH
72020: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72021: LD_VAR 0 1
72025: NOT
72026: PUSH
72027: LD_VAR 0 2
72031: PUSH
72032: LD_INT 1
72034: PUSH
72035: LD_INT 2
72037: PUSH
72038: LD_INT 3
72040: PUSH
72041: LD_INT 4
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: IN
72050: NOT
72051: OR
72052: IFFALSE 72056
// exit ;
72054: GO 72148
// tmp := [ ] ;
72056: LD_ADDR_VAR 0 5
72060: PUSH
72061: EMPTY
72062: ST_TO_ADDR
// for i in units do
72063: LD_ADDR_VAR 0 4
72067: PUSH
72068: LD_VAR 0 1
72072: PUSH
72073: FOR_IN
72074: IFFALSE 72117
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72076: LD_ADDR_VAR 0 5
72080: PUSH
72081: LD_VAR 0 5
72085: PPUSH
72086: LD_VAR 0 5
72090: PUSH
72091: LD_INT 1
72093: PLUS
72094: PPUSH
72095: LD_VAR 0 4
72099: PPUSH
72100: LD_VAR 0 2
72104: PPUSH
72105: CALL_OW 259
72109: PPUSH
72110: CALL_OW 2
72114: ST_TO_ADDR
72115: GO 72073
72117: POP
72118: POP
// if not tmp then
72119: LD_VAR 0 5
72123: NOT
72124: IFFALSE 72128
// exit ;
72126: GO 72148
// result := SortListByListDesc ( units , tmp ) ;
72128: LD_ADDR_VAR 0 3
72132: PUSH
72133: LD_VAR 0 1
72137: PPUSH
72138: LD_VAR 0 5
72142: PPUSH
72143: CALL_OW 77
72147: ST_TO_ADDR
// end ;
72148: LD_VAR 0 3
72152: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72153: LD_INT 0
72155: PPUSH
72156: PPUSH
72157: PPUSH
// result := false ;
72158: LD_ADDR_VAR 0 3
72162: PUSH
72163: LD_INT 0
72165: ST_TO_ADDR
// x := GetX ( building ) ;
72166: LD_ADDR_VAR 0 4
72170: PUSH
72171: LD_VAR 0 2
72175: PPUSH
72176: CALL_OW 250
72180: ST_TO_ADDR
// y := GetY ( building ) ;
72181: LD_ADDR_VAR 0 5
72185: PUSH
72186: LD_VAR 0 2
72190: PPUSH
72191: CALL_OW 251
72195: ST_TO_ADDR
// if not building or not x or not y then
72196: LD_VAR 0 2
72200: NOT
72201: PUSH
72202: LD_VAR 0 4
72206: NOT
72207: OR
72208: PUSH
72209: LD_VAR 0 5
72213: NOT
72214: OR
72215: IFFALSE 72219
// exit ;
72217: GO 72311
// if GetTaskList ( unit ) then
72219: LD_VAR 0 1
72223: PPUSH
72224: CALL_OW 437
72228: IFFALSE 72311
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72230: LD_STRING e
72232: PUSH
72233: LD_VAR 0 1
72237: PPUSH
72238: CALL_OW 437
72242: PUSH
72243: LD_INT 1
72245: ARRAY
72246: PUSH
72247: LD_INT 1
72249: ARRAY
72250: EQUAL
72251: PUSH
72252: LD_VAR 0 4
72256: PUSH
72257: LD_VAR 0 1
72261: PPUSH
72262: CALL_OW 437
72266: PUSH
72267: LD_INT 1
72269: ARRAY
72270: PUSH
72271: LD_INT 2
72273: ARRAY
72274: EQUAL
72275: AND
72276: PUSH
72277: LD_VAR 0 5
72281: PUSH
72282: LD_VAR 0 1
72286: PPUSH
72287: CALL_OW 437
72291: PUSH
72292: LD_INT 1
72294: ARRAY
72295: PUSH
72296: LD_INT 3
72298: ARRAY
72299: EQUAL
72300: AND
72301: IFFALSE 72311
// result := true end ;
72303: LD_ADDR_VAR 0 3
72307: PUSH
72308: LD_INT 1
72310: ST_TO_ADDR
// end ;
72311: LD_VAR 0 3
72315: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72316: LD_INT 0
72318: PPUSH
// result := false ;
72319: LD_ADDR_VAR 0 4
72323: PUSH
72324: LD_INT 0
72326: ST_TO_ADDR
// if GetTaskList ( unit ) then
72327: LD_VAR 0 1
72331: PPUSH
72332: CALL_OW 437
72336: IFFALSE 72419
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72338: LD_STRING M
72340: PUSH
72341: LD_VAR 0 1
72345: PPUSH
72346: CALL_OW 437
72350: PUSH
72351: LD_INT 1
72353: ARRAY
72354: PUSH
72355: LD_INT 1
72357: ARRAY
72358: EQUAL
72359: PUSH
72360: LD_VAR 0 2
72364: PUSH
72365: LD_VAR 0 1
72369: PPUSH
72370: CALL_OW 437
72374: PUSH
72375: LD_INT 1
72377: ARRAY
72378: PUSH
72379: LD_INT 2
72381: ARRAY
72382: EQUAL
72383: AND
72384: PUSH
72385: LD_VAR 0 3
72389: PUSH
72390: LD_VAR 0 1
72394: PPUSH
72395: CALL_OW 437
72399: PUSH
72400: LD_INT 1
72402: ARRAY
72403: PUSH
72404: LD_INT 3
72406: ARRAY
72407: EQUAL
72408: AND
72409: IFFALSE 72419
// result := true ;
72411: LD_ADDR_VAR 0 4
72415: PUSH
72416: LD_INT 1
72418: ST_TO_ADDR
// end ; end ;
72419: LD_VAR 0 4
72423: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72424: LD_INT 0
72426: PPUSH
72427: PPUSH
72428: PPUSH
72429: PPUSH
// if not unit or not area then
72430: LD_VAR 0 1
72434: NOT
72435: PUSH
72436: LD_VAR 0 2
72440: NOT
72441: OR
72442: IFFALSE 72446
// exit ;
72444: GO 72610
// tmp := AreaToList ( area , i ) ;
72446: LD_ADDR_VAR 0 6
72450: PUSH
72451: LD_VAR 0 2
72455: PPUSH
72456: LD_VAR 0 5
72460: PPUSH
72461: CALL_OW 517
72465: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72466: LD_ADDR_VAR 0 5
72470: PUSH
72471: DOUBLE
72472: LD_INT 1
72474: DEC
72475: ST_TO_ADDR
72476: LD_VAR 0 6
72480: PUSH
72481: LD_INT 1
72483: ARRAY
72484: PUSH
72485: FOR_TO
72486: IFFALSE 72608
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72488: LD_ADDR_VAR 0 7
72492: PUSH
72493: LD_VAR 0 6
72497: PUSH
72498: LD_INT 1
72500: ARRAY
72501: PUSH
72502: LD_VAR 0 5
72506: ARRAY
72507: PUSH
72508: LD_VAR 0 6
72512: PUSH
72513: LD_INT 2
72515: ARRAY
72516: PUSH
72517: LD_VAR 0 5
72521: ARRAY
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72527: LD_VAR 0 7
72531: PUSH
72532: LD_INT 1
72534: ARRAY
72535: PPUSH
72536: LD_VAR 0 7
72540: PUSH
72541: LD_INT 2
72543: ARRAY
72544: PPUSH
72545: CALL_OW 428
72549: PUSH
72550: LD_INT 0
72552: EQUAL
72553: IFFALSE 72606
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72555: LD_VAR 0 1
72559: PPUSH
72560: LD_VAR 0 7
72564: PUSH
72565: LD_INT 1
72567: ARRAY
72568: PPUSH
72569: LD_VAR 0 7
72573: PUSH
72574: LD_INT 2
72576: ARRAY
72577: PPUSH
72578: LD_VAR 0 3
72582: PPUSH
72583: CALL_OW 48
// result := IsPlaced ( unit ) ;
72587: LD_ADDR_VAR 0 4
72591: PUSH
72592: LD_VAR 0 1
72596: PPUSH
72597: CALL_OW 305
72601: ST_TO_ADDR
// exit ;
72602: POP
72603: POP
72604: GO 72610
// end ; end ;
72606: GO 72485
72608: POP
72609: POP
// end ;
72610: LD_VAR 0 4
72614: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72615: LD_INT 0
72617: PPUSH
72618: PPUSH
72619: PPUSH
// if not side or side > 8 then
72620: LD_VAR 0 1
72624: NOT
72625: PUSH
72626: LD_VAR 0 1
72630: PUSH
72631: LD_INT 8
72633: GREATER
72634: OR
72635: IFFALSE 72639
// exit ;
72637: GO 72826
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72639: LD_ADDR_VAR 0 4
72643: PUSH
72644: LD_INT 22
72646: PUSH
72647: LD_VAR 0 1
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 21
72658: PUSH
72659: LD_INT 3
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PPUSH
72670: CALL_OW 69
72674: ST_TO_ADDR
// if not tmp then
72675: LD_VAR 0 4
72679: NOT
72680: IFFALSE 72684
// exit ;
72682: GO 72826
// enable_addtolog := true ;
72684: LD_ADDR_OWVAR 81
72688: PUSH
72689: LD_INT 1
72691: ST_TO_ADDR
// AddToLog ( [ ) ;
72692: LD_STRING [
72694: PPUSH
72695: CALL_OW 561
// for i in tmp do
72699: LD_ADDR_VAR 0 3
72703: PUSH
72704: LD_VAR 0 4
72708: PUSH
72709: FOR_IN
72710: IFFALSE 72817
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72712: LD_STRING [
72714: PUSH
72715: LD_VAR 0 3
72719: PPUSH
72720: CALL_OW 266
72724: STR
72725: PUSH
72726: LD_STRING , 
72728: STR
72729: PUSH
72730: LD_VAR 0 3
72734: PPUSH
72735: CALL_OW 250
72739: STR
72740: PUSH
72741: LD_STRING , 
72743: STR
72744: PUSH
72745: LD_VAR 0 3
72749: PPUSH
72750: CALL_OW 251
72754: STR
72755: PUSH
72756: LD_STRING , 
72758: STR
72759: PUSH
72760: LD_VAR 0 3
72764: PPUSH
72765: CALL_OW 254
72769: STR
72770: PUSH
72771: LD_STRING , 
72773: STR
72774: PUSH
72775: LD_VAR 0 3
72779: PPUSH
72780: LD_INT 1
72782: PPUSH
72783: CALL_OW 268
72787: STR
72788: PUSH
72789: LD_STRING , 
72791: STR
72792: PUSH
72793: LD_VAR 0 3
72797: PPUSH
72798: LD_INT 2
72800: PPUSH
72801: CALL_OW 268
72805: STR
72806: PUSH
72807: LD_STRING ],
72809: STR
72810: PPUSH
72811: CALL_OW 561
// end ;
72815: GO 72709
72817: POP
72818: POP
// AddToLog ( ]; ) ;
72819: LD_STRING ];
72821: PPUSH
72822: CALL_OW 561
// end ;
72826: LD_VAR 0 2
72830: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72831: LD_INT 0
72833: PPUSH
72834: PPUSH
72835: PPUSH
72836: PPUSH
72837: PPUSH
// if not area or not rate or not max then
72838: LD_VAR 0 1
72842: NOT
72843: PUSH
72844: LD_VAR 0 2
72848: NOT
72849: OR
72850: PUSH
72851: LD_VAR 0 4
72855: NOT
72856: OR
72857: IFFALSE 72861
// exit ;
72859: GO 73053
// while 1 do
72861: LD_INT 1
72863: IFFALSE 73053
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72865: LD_ADDR_VAR 0 9
72869: PUSH
72870: LD_VAR 0 1
72874: PPUSH
72875: LD_INT 1
72877: PPUSH
72878: CALL_OW 287
72882: PUSH
72883: LD_INT 10
72885: MUL
72886: ST_TO_ADDR
// r := rate / 10 ;
72887: LD_ADDR_VAR 0 7
72891: PUSH
72892: LD_VAR 0 2
72896: PUSH
72897: LD_INT 10
72899: DIVREAL
72900: ST_TO_ADDR
// time := 1 1$00 ;
72901: LD_ADDR_VAR 0 8
72905: PUSH
72906: LD_INT 2100
72908: ST_TO_ADDR
// if amount < min then
72909: LD_VAR 0 9
72913: PUSH
72914: LD_VAR 0 3
72918: LESS
72919: IFFALSE 72937
// r := r * 2 else
72921: LD_ADDR_VAR 0 7
72925: PUSH
72926: LD_VAR 0 7
72930: PUSH
72931: LD_INT 2
72933: MUL
72934: ST_TO_ADDR
72935: GO 72963
// if amount > max then
72937: LD_VAR 0 9
72941: PUSH
72942: LD_VAR 0 4
72946: GREATER
72947: IFFALSE 72963
// r := r / 2 ;
72949: LD_ADDR_VAR 0 7
72953: PUSH
72954: LD_VAR 0 7
72958: PUSH
72959: LD_INT 2
72961: DIVREAL
72962: ST_TO_ADDR
// time := time / r ;
72963: LD_ADDR_VAR 0 8
72967: PUSH
72968: LD_VAR 0 8
72972: PUSH
72973: LD_VAR 0 7
72977: DIVREAL
72978: ST_TO_ADDR
// if time < 0 then
72979: LD_VAR 0 8
72983: PUSH
72984: LD_INT 0
72986: LESS
72987: IFFALSE 73004
// time := time * - 1 ;
72989: LD_ADDR_VAR 0 8
72993: PUSH
72994: LD_VAR 0 8
72998: PUSH
72999: LD_INT 1
73001: NEG
73002: MUL
73003: ST_TO_ADDR
// wait ( time ) ;
73004: LD_VAR 0 8
73008: PPUSH
73009: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73013: LD_INT 35
73015: PPUSH
73016: LD_INT 875
73018: PPUSH
73019: CALL_OW 12
73023: PPUSH
73024: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73028: LD_INT 1
73030: PPUSH
73031: LD_INT 5
73033: PPUSH
73034: CALL_OW 12
73038: PPUSH
73039: LD_VAR 0 1
73043: PPUSH
73044: LD_INT 1
73046: PPUSH
73047: CALL_OW 55
// end ;
73051: GO 72861
// end ;
73053: LD_VAR 0 5
73057: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73058: LD_INT 0
73060: PPUSH
73061: PPUSH
73062: PPUSH
73063: PPUSH
73064: PPUSH
73065: PPUSH
73066: PPUSH
73067: PPUSH
// if not turrets or not factories then
73068: LD_VAR 0 1
73072: NOT
73073: PUSH
73074: LD_VAR 0 2
73078: NOT
73079: OR
73080: IFFALSE 73084
// exit ;
73082: GO 73391
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73084: LD_ADDR_VAR 0 10
73088: PUSH
73089: LD_INT 5
73091: PUSH
73092: LD_INT 6
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 2
73101: PUSH
73102: LD_INT 4
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 3
73111: PUSH
73112: LD_INT 5
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 24
73126: PUSH
73127: LD_INT 25
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 23
73136: PUSH
73137: LD_INT 27
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 42
73150: PUSH
73151: LD_INT 43
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 44
73160: PUSH
73161: LD_INT 46
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 45
73170: PUSH
73171: LD_INT 47
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: LIST
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: LIST
73187: ST_TO_ADDR
// result := [ ] ;
73188: LD_ADDR_VAR 0 3
73192: PUSH
73193: EMPTY
73194: ST_TO_ADDR
// for i in turrets do
73195: LD_ADDR_VAR 0 4
73199: PUSH
73200: LD_VAR 0 1
73204: PUSH
73205: FOR_IN
73206: IFFALSE 73389
// begin nat := GetNation ( i ) ;
73208: LD_ADDR_VAR 0 7
73212: PUSH
73213: LD_VAR 0 4
73217: PPUSH
73218: CALL_OW 248
73222: ST_TO_ADDR
// weapon := 0 ;
73223: LD_ADDR_VAR 0 8
73227: PUSH
73228: LD_INT 0
73230: ST_TO_ADDR
// if not nat then
73231: LD_VAR 0 7
73235: NOT
73236: IFFALSE 73240
// continue ;
73238: GO 73205
// for j in list [ nat ] do
73240: LD_ADDR_VAR 0 5
73244: PUSH
73245: LD_VAR 0 10
73249: PUSH
73250: LD_VAR 0 7
73254: ARRAY
73255: PUSH
73256: FOR_IN
73257: IFFALSE 73298
// if GetBWeapon ( i ) = j [ 1 ] then
73259: LD_VAR 0 4
73263: PPUSH
73264: CALL_OW 269
73268: PUSH
73269: LD_VAR 0 5
73273: PUSH
73274: LD_INT 1
73276: ARRAY
73277: EQUAL
73278: IFFALSE 73296
// begin weapon := j [ 2 ] ;
73280: LD_ADDR_VAR 0 8
73284: PUSH
73285: LD_VAR 0 5
73289: PUSH
73290: LD_INT 2
73292: ARRAY
73293: ST_TO_ADDR
// break ;
73294: GO 73298
// end ;
73296: GO 73256
73298: POP
73299: POP
// if not weapon then
73300: LD_VAR 0 8
73304: NOT
73305: IFFALSE 73309
// continue ;
73307: GO 73205
// for k in factories do
73309: LD_ADDR_VAR 0 6
73313: PUSH
73314: LD_VAR 0 2
73318: PUSH
73319: FOR_IN
73320: IFFALSE 73385
// begin weapons := AvailableWeaponList ( k ) ;
73322: LD_ADDR_VAR 0 9
73326: PUSH
73327: LD_VAR 0 6
73331: PPUSH
73332: CALL_OW 478
73336: ST_TO_ADDR
// if not weapons then
73337: LD_VAR 0 9
73341: NOT
73342: IFFALSE 73346
// continue ;
73344: GO 73319
// if weapon in weapons then
73346: LD_VAR 0 8
73350: PUSH
73351: LD_VAR 0 9
73355: IN
73356: IFFALSE 73383
// begin result := [ i , weapon ] ;
73358: LD_ADDR_VAR 0 3
73362: PUSH
73363: LD_VAR 0 4
73367: PUSH
73368: LD_VAR 0 8
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: ST_TO_ADDR
// exit ;
73377: POP
73378: POP
73379: POP
73380: POP
73381: GO 73391
// end ; end ;
73383: GO 73319
73385: POP
73386: POP
// end ;
73387: GO 73205
73389: POP
73390: POP
// end ;
73391: LD_VAR 0 3
73395: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73396: LD_INT 0
73398: PPUSH
// if not side or side > 8 then
73399: LD_VAR 0 3
73403: NOT
73404: PUSH
73405: LD_VAR 0 3
73409: PUSH
73410: LD_INT 8
73412: GREATER
73413: OR
73414: IFFALSE 73418
// exit ;
73416: GO 73477
// if not range then
73418: LD_VAR 0 4
73422: NOT
73423: IFFALSE 73434
// range := - 12 ;
73425: LD_ADDR_VAR 0 4
73429: PUSH
73430: LD_INT 12
73432: NEG
73433: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73434: LD_VAR 0 1
73438: PPUSH
73439: LD_VAR 0 2
73443: PPUSH
73444: LD_VAR 0 3
73448: PPUSH
73449: LD_VAR 0 4
73453: PPUSH
73454: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73458: LD_VAR 0 1
73462: PPUSH
73463: LD_VAR 0 2
73467: PPUSH
73468: LD_VAR 0 3
73472: PPUSH
73473: CALL_OW 331
// end ;
73477: LD_VAR 0 5
73481: RET
// export function Video ( mode ) ; begin
73482: LD_INT 0
73484: PPUSH
// ingame_video = mode ;
73485: LD_ADDR_OWVAR 52
73489: PUSH
73490: LD_VAR 0 1
73494: ST_TO_ADDR
// interface_hidden = mode ;
73495: LD_ADDR_OWVAR 54
73499: PUSH
73500: LD_VAR 0 1
73504: ST_TO_ADDR
// end ;
73505: LD_VAR 0 2
73509: RET
// export function Join ( array , element ) ; begin
73510: LD_INT 0
73512: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73513: LD_ADDR_VAR 0 3
73517: PUSH
73518: LD_VAR 0 1
73522: PPUSH
73523: LD_VAR 0 1
73527: PUSH
73528: LD_INT 1
73530: PLUS
73531: PPUSH
73532: LD_VAR 0 2
73536: PPUSH
73537: CALL_OW 1
73541: ST_TO_ADDR
// end ;
73542: LD_VAR 0 3
73546: RET
// export function JoinUnion ( array , element ) ; begin
73547: LD_INT 0
73549: PPUSH
// result := array union element ;
73550: LD_ADDR_VAR 0 3
73554: PUSH
73555: LD_VAR 0 1
73559: PUSH
73560: LD_VAR 0 2
73564: UNION
73565: ST_TO_ADDR
// end ;
73566: LD_VAR 0 3
73570: RET
// export function GetBehemoths ( side ) ; begin
73571: LD_INT 0
73573: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73574: LD_ADDR_VAR 0 2
73578: PUSH
73579: LD_INT 22
73581: PUSH
73582: LD_VAR 0 1
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: PUSH
73591: LD_INT 31
73593: PUSH
73594: LD_INT 25
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PPUSH
73605: CALL_OW 69
73609: ST_TO_ADDR
// end ;
73610: LD_VAR 0 2
73614: RET
// export function Shuffle ( array ) ; var i , index ; begin
73615: LD_INT 0
73617: PPUSH
73618: PPUSH
73619: PPUSH
// result := [ ] ;
73620: LD_ADDR_VAR 0 2
73624: PUSH
73625: EMPTY
73626: ST_TO_ADDR
// if not array then
73627: LD_VAR 0 1
73631: NOT
73632: IFFALSE 73636
// exit ;
73634: GO 73735
// Randomize ;
73636: CALL_OW 10
// for i = array downto 1 do
73640: LD_ADDR_VAR 0 3
73644: PUSH
73645: DOUBLE
73646: LD_VAR 0 1
73650: INC
73651: ST_TO_ADDR
73652: LD_INT 1
73654: PUSH
73655: FOR_DOWNTO
73656: IFFALSE 73733
// begin index := rand ( 1 , array ) ;
73658: LD_ADDR_VAR 0 4
73662: PUSH
73663: LD_INT 1
73665: PPUSH
73666: LD_VAR 0 1
73670: PPUSH
73671: CALL_OW 12
73675: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73676: LD_ADDR_VAR 0 2
73680: PUSH
73681: LD_VAR 0 2
73685: PPUSH
73686: LD_VAR 0 2
73690: PUSH
73691: LD_INT 1
73693: PLUS
73694: PPUSH
73695: LD_VAR 0 1
73699: PUSH
73700: LD_VAR 0 4
73704: ARRAY
73705: PPUSH
73706: CALL_OW 2
73710: ST_TO_ADDR
// array := Delete ( array , index ) ;
73711: LD_ADDR_VAR 0 1
73715: PUSH
73716: LD_VAR 0 1
73720: PPUSH
73721: LD_VAR 0 4
73725: PPUSH
73726: CALL_OW 3
73730: ST_TO_ADDR
// end ;
73731: GO 73655
73733: POP
73734: POP
// end ;
73735: LD_VAR 0 2
73739: RET
// export function GetBaseMaterials ( base ) ; begin
73740: LD_INT 0
73742: PPUSH
// result := [ 0 , 0 , 0 ] ;
73743: LD_ADDR_VAR 0 2
73747: PUSH
73748: LD_INT 0
73750: PUSH
73751: LD_INT 0
73753: PUSH
73754: LD_INT 0
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: LIST
73761: ST_TO_ADDR
// if not base then
73762: LD_VAR 0 1
73766: NOT
73767: IFFALSE 73771
// exit ;
73769: GO 73820
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73771: LD_ADDR_VAR 0 2
73775: PUSH
73776: LD_VAR 0 1
73780: PPUSH
73781: LD_INT 1
73783: PPUSH
73784: CALL_OW 275
73788: PUSH
73789: LD_VAR 0 1
73793: PPUSH
73794: LD_INT 2
73796: PPUSH
73797: CALL_OW 275
73801: PUSH
73802: LD_VAR 0 1
73806: PPUSH
73807: LD_INT 3
73809: PPUSH
73810: CALL_OW 275
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: LIST
73819: ST_TO_ADDR
// end ;
73820: LD_VAR 0 2
73824: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73825: LD_INT 0
73827: PPUSH
73828: PPUSH
// result := array ;
73829: LD_ADDR_VAR 0 3
73833: PUSH
73834: LD_VAR 0 1
73838: ST_TO_ADDR
// if size > 0 then
73839: LD_VAR 0 2
73843: PUSH
73844: LD_INT 0
73846: GREATER
73847: IFFALSE 73893
// for i := array downto size do
73849: LD_ADDR_VAR 0 4
73853: PUSH
73854: DOUBLE
73855: LD_VAR 0 1
73859: INC
73860: ST_TO_ADDR
73861: LD_VAR 0 2
73865: PUSH
73866: FOR_DOWNTO
73867: IFFALSE 73891
// result := Delete ( result , result ) ;
73869: LD_ADDR_VAR 0 3
73873: PUSH
73874: LD_VAR 0 3
73878: PPUSH
73879: LD_VAR 0 3
73883: PPUSH
73884: CALL_OW 3
73888: ST_TO_ADDR
73889: GO 73866
73891: POP
73892: POP
// end ;
73893: LD_VAR 0 3
73897: RET
// export function ComExit ( unit ) ; var tmp ; begin
73898: LD_INT 0
73900: PPUSH
73901: PPUSH
// if not IsInUnit ( unit ) then
73902: LD_VAR 0 1
73906: PPUSH
73907: CALL_OW 310
73911: NOT
73912: IFFALSE 73916
// exit ;
73914: GO 73976
// tmp := IsInUnit ( unit ) ;
73916: LD_ADDR_VAR 0 3
73920: PUSH
73921: LD_VAR 0 1
73925: PPUSH
73926: CALL_OW 310
73930: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73931: LD_VAR 0 3
73935: PPUSH
73936: CALL_OW 247
73940: PUSH
73941: LD_INT 2
73943: EQUAL
73944: IFFALSE 73957
// ComExitVehicle ( unit ) else
73946: LD_VAR 0 1
73950: PPUSH
73951: CALL_OW 121
73955: GO 73966
// ComExitBuilding ( unit ) ;
73957: LD_VAR 0 1
73961: PPUSH
73962: CALL_OW 122
// result := tmp ;
73966: LD_ADDR_VAR 0 2
73970: PUSH
73971: LD_VAR 0 3
73975: ST_TO_ADDR
// end ;
73976: LD_VAR 0 2
73980: RET
// export function ComExitAll ( units ) ; var i ; begin
73981: LD_INT 0
73983: PPUSH
73984: PPUSH
// if not units then
73985: LD_VAR 0 1
73989: NOT
73990: IFFALSE 73994
// exit ;
73992: GO 74020
// for i in units do
73994: LD_ADDR_VAR 0 3
73998: PUSH
73999: LD_VAR 0 1
74003: PUSH
74004: FOR_IN
74005: IFFALSE 74018
// ComExit ( i ) ;
74007: LD_VAR 0 3
74011: PPUSH
74012: CALL 73898 0 1
74016: GO 74004
74018: POP
74019: POP
// end ;
74020: LD_VAR 0 2
74024: RET
// export function ResetHc ; begin
74025: LD_INT 0
74027: PPUSH
// InitHc ;
74028: CALL_OW 19
// hc_importance := 0 ;
74032: LD_ADDR_OWVAR 32
74036: PUSH
74037: LD_INT 0
74039: ST_TO_ADDR
// end ;
74040: LD_VAR 0 1
74044: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74045: LD_INT 0
74047: PPUSH
74048: PPUSH
74049: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74050: LD_ADDR_VAR 0 6
74054: PUSH
74055: LD_VAR 0 1
74059: PUSH
74060: LD_VAR 0 3
74064: PLUS
74065: PUSH
74066: LD_INT 2
74068: DIV
74069: ST_TO_ADDR
// if _x < 0 then
74070: LD_VAR 0 6
74074: PUSH
74075: LD_INT 0
74077: LESS
74078: IFFALSE 74095
// _x := _x * - 1 ;
74080: LD_ADDR_VAR 0 6
74084: PUSH
74085: LD_VAR 0 6
74089: PUSH
74090: LD_INT 1
74092: NEG
74093: MUL
74094: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74095: LD_ADDR_VAR 0 7
74099: PUSH
74100: LD_VAR 0 2
74104: PUSH
74105: LD_VAR 0 4
74109: PLUS
74110: PUSH
74111: LD_INT 2
74113: DIV
74114: ST_TO_ADDR
// if _y < 0 then
74115: LD_VAR 0 7
74119: PUSH
74120: LD_INT 0
74122: LESS
74123: IFFALSE 74140
// _y := _y * - 1 ;
74125: LD_ADDR_VAR 0 7
74129: PUSH
74130: LD_VAR 0 7
74134: PUSH
74135: LD_INT 1
74137: NEG
74138: MUL
74139: ST_TO_ADDR
// result := [ _x , _y ] ;
74140: LD_ADDR_VAR 0 5
74144: PUSH
74145: LD_VAR 0 6
74149: PUSH
74150: LD_VAR 0 7
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: ST_TO_ADDR
// end ;
74159: LD_VAR 0 5
74163: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74164: LD_INT 0
74166: PPUSH
74167: PPUSH
74168: PPUSH
74169: PPUSH
// task := GetTaskList ( unit ) ;
74170: LD_ADDR_VAR 0 7
74174: PUSH
74175: LD_VAR 0 1
74179: PPUSH
74180: CALL_OW 437
74184: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74185: LD_VAR 0 7
74189: NOT
74190: PUSH
74191: LD_VAR 0 1
74195: PPUSH
74196: LD_VAR 0 2
74200: PPUSH
74201: CALL_OW 308
74205: NOT
74206: AND
74207: IFFALSE 74211
// exit ;
74209: GO 74329
// if IsInArea ( unit , area ) then
74211: LD_VAR 0 1
74215: PPUSH
74216: LD_VAR 0 2
74220: PPUSH
74221: CALL_OW 308
74225: IFFALSE 74243
// begin ComMoveToArea ( unit , goAway ) ;
74227: LD_VAR 0 1
74231: PPUSH
74232: LD_VAR 0 3
74236: PPUSH
74237: CALL_OW 113
// exit ;
74241: GO 74329
// end ; if task [ 1 ] [ 1 ] <> M then
74243: LD_VAR 0 7
74247: PUSH
74248: LD_INT 1
74250: ARRAY
74251: PUSH
74252: LD_INT 1
74254: ARRAY
74255: PUSH
74256: LD_STRING M
74258: NONEQUAL
74259: IFFALSE 74263
// exit ;
74261: GO 74329
// x := task [ 1 ] [ 2 ] ;
74263: LD_ADDR_VAR 0 5
74267: PUSH
74268: LD_VAR 0 7
74272: PUSH
74273: LD_INT 1
74275: ARRAY
74276: PUSH
74277: LD_INT 2
74279: ARRAY
74280: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74281: LD_ADDR_VAR 0 6
74285: PUSH
74286: LD_VAR 0 7
74290: PUSH
74291: LD_INT 1
74293: ARRAY
74294: PUSH
74295: LD_INT 3
74297: ARRAY
74298: ST_TO_ADDR
// if InArea ( x , y , area ) then
74299: LD_VAR 0 5
74303: PPUSH
74304: LD_VAR 0 6
74308: PPUSH
74309: LD_VAR 0 2
74313: PPUSH
74314: CALL_OW 309
74318: IFFALSE 74329
// ComStop ( unit ) ;
74320: LD_VAR 0 1
74324: PPUSH
74325: CALL_OW 141
// end ;
74329: LD_VAR 0 4
74333: RET
// export function Abs ( value ) ; begin
74334: LD_INT 0
74336: PPUSH
// result := value ;
74337: LD_ADDR_VAR 0 2
74341: PUSH
74342: LD_VAR 0 1
74346: ST_TO_ADDR
// if value < 0 then
74347: LD_VAR 0 1
74351: PUSH
74352: LD_INT 0
74354: LESS
74355: IFFALSE 74372
// result := value * - 1 ;
74357: LD_ADDR_VAR 0 2
74361: PUSH
74362: LD_VAR 0 1
74366: PUSH
74367: LD_INT 1
74369: NEG
74370: MUL
74371: ST_TO_ADDR
// end ;
74372: LD_VAR 0 2
74376: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74377: LD_INT 0
74379: PPUSH
74380: PPUSH
74381: PPUSH
74382: PPUSH
74383: PPUSH
74384: PPUSH
74385: PPUSH
74386: PPUSH
// if not unit or not building then
74387: LD_VAR 0 1
74391: NOT
74392: PUSH
74393: LD_VAR 0 2
74397: NOT
74398: OR
74399: IFFALSE 74403
// exit ;
74401: GO 74629
// x := GetX ( building ) ;
74403: LD_ADDR_VAR 0 4
74407: PUSH
74408: LD_VAR 0 2
74412: PPUSH
74413: CALL_OW 250
74417: ST_TO_ADDR
// y := GetY ( building ) ;
74418: LD_ADDR_VAR 0 6
74422: PUSH
74423: LD_VAR 0 2
74427: PPUSH
74428: CALL_OW 251
74432: ST_TO_ADDR
// d := GetDir ( building ) ;
74433: LD_ADDR_VAR 0 8
74437: PUSH
74438: LD_VAR 0 2
74442: PPUSH
74443: CALL_OW 254
74447: ST_TO_ADDR
// r := 4 ;
74448: LD_ADDR_VAR 0 9
74452: PUSH
74453: LD_INT 4
74455: ST_TO_ADDR
// for i := 1 to 5 do
74456: LD_ADDR_VAR 0 10
74460: PUSH
74461: DOUBLE
74462: LD_INT 1
74464: DEC
74465: ST_TO_ADDR
74466: LD_INT 5
74468: PUSH
74469: FOR_TO
74470: IFFALSE 74627
// begin _x := ShiftX ( x , d , r + i ) ;
74472: LD_ADDR_VAR 0 5
74476: PUSH
74477: LD_VAR 0 4
74481: PPUSH
74482: LD_VAR 0 8
74486: PPUSH
74487: LD_VAR 0 9
74491: PUSH
74492: LD_VAR 0 10
74496: PLUS
74497: PPUSH
74498: CALL_OW 272
74502: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74503: LD_ADDR_VAR 0 7
74507: PUSH
74508: LD_VAR 0 6
74512: PPUSH
74513: LD_VAR 0 8
74517: PPUSH
74518: LD_VAR 0 9
74522: PUSH
74523: LD_VAR 0 10
74527: PLUS
74528: PPUSH
74529: CALL_OW 273
74533: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74534: LD_VAR 0 5
74538: PPUSH
74539: LD_VAR 0 7
74543: PPUSH
74544: CALL_OW 488
74548: PUSH
74549: LD_VAR 0 5
74553: PPUSH
74554: LD_VAR 0 7
74558: PPUSH
74559: CALL_OW 428
74563: PPUSH
74564: CALL_OW 247
74568: PUSH
74569: LD_INT 3
74571: PUSH
74572: LD_INT 2
74574: PUSH
74575: EMPTY
74576: LIST
74577: LIST
74578: IN
74579: NOT
74580: AND
74581: IFFALSE 74625
// begin ComMoveXY ( unit , _x , _y ) ;
74583: LD_VAR 0 1
74587: PPUSH
74588: LD_VAR 0 5
74592: PPUSH
74593: LD_VAR 0 7
74597: PPUSH
74598: CALL_OW 111
// result := [ _x , _y ] ;
74602: LD_ADDR_VAR 0 3
74606: PUSH
74607: LD_VAR 0 5
74611: PUSH
74612: LD_VAR 0 7
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: ST_TO_ADDR
// exit ;
74621: POP
74622: POP
74623: GO 74629
// end ; end ;
74625: GO 74469
74627: POP
74628: POP
// end ;
74629: LD_VAR 0 3
74633: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74634: LD_INT 0
74636: PPUSH
74637: PPUSH
74638: PPUSH
// result := 0 ;
74639: LD_ADDR_VAR 0 3
74643: PUSH
74644: LD_INT 0
74646: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74647: LD_VAR 0 1
74651: PUSH
74652: LD_INT 0
74654: LESS
74655: PUSH
74656: LD_VAR 0 1
74660: PUSH
74661: LD_INT 8
74663: GREATER
74664: OR
74665: PUSH
74666: LD_VAR 0 2
74670: PUSH
74671: LD_INT 0
74673: LESS
74674: OR
74675: PUSH
74676: LD_VAR 0 2
74680: PUSH
74681: LD_INT 8
74683: GREATER
74684: OR
74685: IFFALSE 74689
// exit ;
74687: GO 74764
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74689: LD_ADDR_VAR 0 4
74693: PUSH
74694: LD_INT 22
74696: PUSH
74697: LD_VAR 0 2
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: PPUSH
74706: CALL_OW 69
74710: PUSH
74711: FOR_IN
74712: IFFALSE 74762
// begin un := UnitShoot ( i ) ;
74714: LD_ADDR_VAR 0 5
74718: PUSH
74719: LD_VAR 0 4
74723: PPUSH
74724: CALL_OW 504
74728: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74729: LD_VAR 0 5
74733: PPUSH
74734: CALL_OW 255
74738: PUSH
74739: LD_VAR 0 1
74743: EQUAL
74744: IFFALSE 74760
// begin result := un ;
74746: LD_ADDR_VAR 0 3
74750: PUSH
74751: LD_VAR 0 5
74755: ST_TO_ADDR
// exit ;
74756: POP
74757: POP
74758: GO 74764
// end ; end ;
74760: GO 74711
74762: POP
74763: POP
// end ;
74764: LD_VAR 0 3
74768: RET
// export function GetCargoBay ( units ) ; begin
74769: LD_INT 0
74771: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74772: LD_ADDR_VAR 0 2
74776: PUSH
74777: LD_VAR 0 1
74781: PPUSH
74782: LD_INT 2
74784: PUSH
74785: LD_INT 34
74787: PUSH
74788: LD_INT 12
74790: PUSH
74791: EMPTY
74792: LIST
74793: LIST
74794: PUSH
74795: LD_INT 34
74797: PUSH
74798: LD_INT 51
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: LD_INT 34
74807: PUSH
74808: LD_INT 32
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: LD_INT 34
74817: PUSH
74818: LD_EXP 49
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: PPUSH
74834: CALL_OW 72
74838: ST_TO_ADDR
// end ;
74839: LD_VAR 0 2
74843: RET
// export function Negate ( value ) ; begin
74844: LD_INT 0
74846: PPUSH
// result := not value ;
74847: LD_ADDR_VAR 0 2
74851: PUSH
74852: LD_VAR 0 1
74856: NOT
74857: ST_TO_ADDR
// end ;
74858: LD_VAR 0 2
74862: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74863: LD_INT 0
74865: PPUSH
// if x1 = x2 then
74866: LD_VAR 0 1
74870: PUSH
74871: LD_VAR 0 3
74875: EQUAL
74876: IFFALSE 74910
// begin if y1 > y2 then
74878: LD_VAR 0 2
74882: PUSH
74883: LD_VAR 0 4
74887: GREATER
74888: IFFALSE 74900
// result := 0 else
74890: LD_ADDR_VAR 0 5
74894: PUSH
74895: LD_INT 0
74897: ST_TO_ADDR
74898: GO 74908
// result := 3 ;
74900: LD_ADDR_VAR 0 5
74904: PUSH
74905: LD_INT 3
74907: ST_TO_ADDR
// exit ;
74908: GO 74996
// end ; if y1 = y2 then
74910: LD_VAR 0 2
74914: PUSH
74915: LD_VAR 0 4
74919: EQUAL
74920: IFFALSE 74954
// begin if x1 > x2 then
74922: LD_VAR 0 1
74926: PUSH
74927: LD_VAR 0 3
74931: GREATER
74932: IFFALSE 74944
// result := 1 else
74934: LD_ADDR_VAR 0 5
74938: PUSH
74939: LD_INT 1
74941: ST_TO_ADDR
74942: GO 74952
// result := 4 ;
74944: LD_ADDR_VAR 0 5
74948: PUSH
74949: LD_INT 4
74951: ST_TO_ADDR
// exit ;
74952: GO 74996
// end ; if x1 > x2 and y1 > y2 then
74954: LD_VAR 0 1
74958: PUSH
74959: LD_VAR 0 3
74963: GREATER
74964: PUSH
74965: LD_VAR 0 2
74969: PUSH
74970: LD_VAR 0 4
74974: GREATER
74975: AND
74976: IFFALSE 74988
// result := 2 else
74978: LD_ADDR_VAR 0 5
74982: PUSH
74983: LD_INT 2
74985: ST_TO_ADDR
74986: GO 74996
// result := 5 ;
74988: LD_ADDR_VAR 0 5
74992: PUSH
74993: LD_INT 5
74995: ST_TO_ADDR
// end ;
74996: LD_VAR 0 5
75000: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75001: LD_INT 0
75003: PPUSH
75004: PPUSH
// if not driver or not IsInUnit ( driver ) then
75005: LD_VAR 0 1
75009: NOT
75010: PUSH
75011: LD_VAR 0 1
75015: PPUSH
75016: CALL_OW 310
75020: NOT
75021: OR
75022: IFFALSE 75026
// exit ;
75024: GO 75116
// vehicle := IsInUnit ( driver ) ;
75026: LD_ADDR_VAR 0 3
75030: PUSH
75031: LD_VAR 0 1
75035: PPUSH
75036: CALL_OW 310
75040: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75041: LD_VAR 0 1
75045: PPUSH
75046: LD_STRING \
75048: PUSH
75049: LD_INT 0
75051: PUSH
75052: LD_INT 0
75054: PUSH
75055: LD_INT 0
75057: PUSH
75058: LD_INT 0
75060: PUSH
75061: LD_INT 0
75063: PUSH
75064: LD_INT 0
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: LIST
75075: PUSH
75076: LD_STRING E
75078: PUSH
75079: LD_INT 0
75081: PUSH
75082: LD_INT 0
75084: PUSH
75085: LD_VAR 0 3
75089: PUSH
75090: LD_INT 0
75092: PUSH
75093: LD_INT 0
75095: PUSH
75096: LD_INT 0
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: LIST
75103: LIST
75104: LIST
75105: LIST
75106: LIST
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PPUSH
75112: CALL_OW 446
// end ;
75116: LD_VAR 0 2
75120: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75121: LD_INT 0
75123: PPUSH
75124: PPUSH
// if not driver or not IsInUnit ( driver ) then
75125: LD_VAR 0 1
75129: NOT
75130: PUSH
75131: LD_VAR 0 1
75135: PPUSH
75136: CALL_OW 310
75140: NOT
75141: OR
75142: IFFALSE 75146
// exit ;
75144: GO 75236
// vehicle := IsInUnit ( driver ) ;
75146: LD_ADDR_VAR 0 3
75150: PUSH
75151: LD_VAR 0 1
75155: PPUSH
75156: CALL_OW 310
75160: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75161: LD_VAR 0 1
75165: PPUSH
75166: LD_STRING \
75168: PUSH
75169: LD_INT 0
75171: PUSH
75172: LD_INT 0
75174: PUSH
75175: LD_INT 0
75177: PUSH
75178: LD_INT 0
75180: PUSH
75181: LD_INT 0
75183: PUSH
75184: LD_INT 0
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: LIST
75191: LIST
75192: LIST
75193: LIST
75194: LIST
75195: PUSH
75196: LD_STRING E
75198: PUSH
75199: LD_INT 0
75201: PUSH
75202: LD_INT 0
75204: PUSH
75205: LD_VAR 0 3
75209: PUSH
75210: LD_INT 0
75212: PUSH
75213: LD_INT 0
75215: PUSH
75216: LD_INT 0
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: PPUSH
75232: CALL_OW 447
// end ;
75236: LD_VAR 0 2
75240: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75241: LD_INT 0
75243: PPUSH
75244: PPUSH
75245: PPUSH
// tmp := [ ] ;
75246: LD_ADDR_VAR 0 5
75250: PUSH
75251: EMPTY
75252: ST_TO_ADDR
// for i in units do
75253: LD_ADDR_VAR 0 4
75257: PUSH
75258: LD_VAR 0 1
75262: PUSH
75263: FOR_IN
75264: IFFALSE 75302
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75266: LD_ADDR_VAR 0 5
75270: PUSH
75271: LD_VAR 0 5
75275: PPUSH
75276: LD_VAR 0 5
75280: PUSH
75281: LD_INT 1
75283: PLUS
75284: PPUSH
75285: LD_VAR 0 4
75289: PPUSH
75290: CALL_OW 256
75294: PPUSH
75295: CALL_OW 2
75299: ST_TO_ADDR
75300: GO 75263
75302: POP
75303: POP
// if not tmp then
75304: LD_VAR 0 5
75308: NOT
75309: IFFALSE 75313
// exit ;
75311: GO 75361
// if asc then
75313: LD_VAR 0 2
75317: IFFALSE 75341
// result := SortListByListAsc ( units , tmp ) else
75319: LD_ADDR_VAR 0 3
75323: PUSH
75324: LD_VAR 0 1
75328: PPUSH
75329: LD_VAR 0 5
75333: PPUSH
75334: CALL_OW 76
75338: ST_TO_ADDR
75339: GO 75361
// result := SortListByListDesc ( units , tmp ) ;
75341: LD_ADDR_VAR 0 3
75345: PUSH
75346: LD_VAR 0 1
75350: PPUSH
75351: LD_VAR 0 5
75355: PPUSH
75356: CALL_OW 77
75360: ST_TO_ADDR
// end ;
75361: LD_VAR 0 3
75365: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75366: LD_INT 0
75368: PPUSH
75369: PPUSH
// task := GetTaskList ( mech ) ;
75370: LD_ADDR_VAR 0 4
75374: PUSH
75375: LD_VAR 0 1
75379: PPUSH
75380: CALL_OW 437
75384: ST_TO_ADDR
// if not task then
75385: LD_VAR 0 4
75389: NOT
75390: IFFALSE 75394
// exit ;
75392: GO 75436
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75394: LD_ADDR_VAR 0 3
75398: PUSH
75399: LD_VAR 0 4
75403: PUSH
75404: LD_INT 1
75406: ARRAY
75407: PUSH
75408: LD_INT 1
75410: ARRAY
75411: PUSH
75412: LD_STRING r
75414: EQUAL
75415: PUSH
75416: LD_VAR 0 4
75420: PUSH
75421: LD_INT 1
75423: ARRAY
75424: PUSH
75425: LD_INT 4
75427: ARRAY
75428: PUSH
75429: LD_VAR 0 2
75433: EQUAL
75434: AND
75435: ST_TO_ADDR
// end ;
75436: LD_VAR 0 3
75440: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75441: LD_INT 0
75443: PPUSH
// SetDir ( unit , d ) ;
75444: LD_VAR 0 1
75448: PPUSH
75449: LD_VAR 0 4
75453: PPUSH
75454: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75458: LD_VAR 0 1
75462: PPUSH
75463: LD_VAR 0 2
75467: PPUSH
75468: LD_VAR 0 3
75472: PPUSH
75473: LD_VAR 0 5
75477: PPUSH
75478: CALL_OW 48
// end ;
75482: LD_VAR 0 6
75486: RET
// export function ToNaturalNumber ( number ) ; begin
75487: LD_INT 0
75489: PPUSH
// result := number div 1 ;
75490: LD_ADDR_VAR 0 2
75494: PUSH
75495: LD_VAR 0 1
75499: PUSH
75500: LD_INT 1
75502: DIV
75503: ST_TO_ADDR
// if number < 0 then
75504: LD_VAR 0 1
75508: PUSH
75509: LD_INT 0
75511: LESS
75512: IFFALSE 75522
// result := 0 ;
75514: LD_ADDR_VAR 0 2
75518: PUSH
75519: LD_INT 0
75521: ST_TO_ADDR
// end ;
75522: LD_VAR 0 2
75526: RET
// export function SortByClass ( units , class ) ; var un ; begin
75527: LD_INT 0
75529: PPUSH
75530: PPUSH
// if not units or not class then
75531: LD_VAR 0 1
75535: NOT
75536: PUSH
75537: LD_VAR 0 2
75541: NOT
75542: OR
75543: IFFALSE 75547
// exit ;
75545: GO 75642
// result := [ ] ;
75547: LD_ADDR_VAR 0 3
75551: PUSH
75552: EMPTY
75553: ST_TO_ADDR
// for un in units do
75554: LD_ADDR_VAR 0 4
75558: PUSH
75559: LD_VAR 0 1
75563: PUSH
75564: FOR_IN
75565: IFFALSE 75640
// if GetClass ( un ) = class then
75567: LD_VAR 0 4
75571: PPUSH
75572: CALL_OW 257
75576: PUSH
75577: LD_VAR 0 2
75581: EQUAL
75582: IFFALSE 75609
// result := Insert ( result , 1 , un ) else
75584: LD_ADDR_VAR 0 3
75588: PUSH
75589: LD_VAR 0 3
75593: PPUSH
75594: LD_INT 1
75596: PPUSH
75597: LD_VAR 0 4
75601: PPUSH
75602: CALL_OW 2
75606: ST_TO_ADDR
75607: GO 75638
// result := Replace ( result , result + 1 , un ) ;
75609: LD_ADDR_VAR 0 3
75613: PUSH
75614: LD_VAR 0 3
75618: PPUSH
75619: LD_VAR 0 3
75623: PUSH
75624: LD_INT 1
75626: PLUS
75627: PPUSH
75628: LD_VAR 0 4
75632: PPUSH
75633: CALL_OW 1
75637: ST_TO_ADDR
75638: GO 75564
75640: POP
75641: POP
// end ;
75642: LD_VAR 0 3
75646: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75647: LD_INT 0
75649: PPUSH
75650: PPUSH
75651: PPUSH
75652: PPUSH
75653: PPUSH
75654: PPUSH
75655: PPUSH
// result := [ ] ;
75656: LD_ADDR_VAR 0 4
75660: PUSH
75661: EMPTY
75662: ST_TO_ADDR
// if x - r < 0 then
75663: LD_VAR 0 1
75667: PUSH
75668: LD_VAR 0 3
75672: MINUS
75673: PUSH
75674: LD_INT 0
75676: LESS
75677: IFFALSE 75689
// min_x := 0 else
75679: LD_ADDR_VAR 0 8
75683: PUSH
75684: LD_INT 0
75686: ST_TO_ADDR
75687: GO 75705
// min_x := x - r ;
75689: LD_ADDR_VAR 0 8
75693: PUSH
75694: LD_VAR 0 1
75698: PUSH
75699: LD_VAR 0 3
75703: MINUS
75704: ST_TO_ADDR
// if y - r < 0 then
75705: LD_VAR 0 2
75709: PUSH
75710: LD_VAR 0 3
75714: MINUS
75715: PUSH
75716: LD_INT 0
75718: LESS
75719: IFFALSE 75731
// min_y := 0 else
75721: LD_ADDR_VAR 0 7
75725: PUSH
75726: LD_INT 0
75728: ST_TO_ADDR
75729: GO 75747
// min_y := y - r ;
75731: LD_ADDR_VAR 0 7
75735: PUSH
75736: LD_VAR 0 2
75740: PUSH
75741: LD_VAR 0 3
75745: MINUS
75746: ST_TO_ADDR
// max_x := x + r ;
75747: LD_ADDR_VAR 0 9
75751: PUSH
75752: LD_VAR 0 1
75756: PUSH
75757: LD_VAR 0 3
75761: PLUS
75762: ST_TO_ADDR
// max_y := y + r ;
75763: LD_ADDR_VAR 0 10
75767: PUSH
75768: LD_VAR 0 2
75772: PUSH
75773: LD_VAR 0 3
75777: PLUS
75778: ST_TO_ADDR
// for _x = min_x to max_x do
75779: LD_ADDR_VAR 0 5
75783: PUSH
75784: DOUBLE
75785: LD_VAR 0 8
75789: DEC
75790: ST_TO_ADDR
75791: LD_VAR 0 9
75795: PUSH
75796: FOR_TO
75797: IFFALSE 75898
// for _y = min_y to max_y do
75799: LD_ADDR_VAR 0 6
75803: PUSH
75804: DOUBLE
75805: LD_VAR 0 7
75809: DEC
75810: ST_TO_ADDR
75811: LD_VAR 0 10
75815: PUSH
75816: FOR_TO
75817: IFFALSE 75894
// begin if not ValidHex ( _x , _y ) then
75819: LD_VAR 0 5
75823: PPUSH
75824: LD_VAR 0 6
75828: PPUSH
75829: CALL_OW 488
75833: NOT
75834: IFFALSE 75838
// continue ;
75836: GO 75816
// if GetResourceTypeXY ( _x , _y ) then
75838: LD_VAR 0 5
75842: PPUSH
75843: LD_VAR 0 6
75847: PPUSH
75848: CALL_OW 283
75852: IFFALSE 75892
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75854: LD_ADDR_VAR 0 4
75858: PUSH
75859: LD_VAR 0 4
75863: PPUSH
75864: LD_VAR 0 4
75868: PUSH
75869: LD_INT 1
75871: PLUS
75872: PPUSH
75873: LD_VAR 0 5
75877: PUSH
75878: LD_VAR 0 6
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: PPUSH
75887: CALL_OW 1
75891: ST_TO_ADDR
// end ;
75892: GO 75816
75894: POP
75895: POP
75896: GO 75796
75898: POP
75899: POP
// end ;
75900: LD_VAR 0 4
75904: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
75905: LD_INT 0
75907: PPUSH
75908: PPUSH
75909: PPUSH
75910: PPUSH
75911: PPUSH
75912: PPUSH
// if not units then
75913: LD_VAR 0 1
75917: NOT
75918: IFFALSE 75922
// exit ;
75920: GO 76323
// result := UnitFilter ( units , [ f_ok ] ) ;
75922: LD_ADDR_VAR 0 3
75926: PUSH
75927: LD_VAR 0 1
75931: PPUSH
75932: LD_INT 50
75934: PUSH
75935: EMPTY
75936: LIST
75937: PPUSH
75938: CALL_OW 72
75942: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75943: LD_ADDR_VAR 0 7
75947: PUSH
75948: LD_VAR 0 1
75952: PUSH
75953: LD_INT 1
75955: ARRAY
75956: PPUSH
75957: CALL_OW 255
75961: ST_TO_ADDR
// if not result then
75962: LD_VAR 0 3
75966: NOT
75967: IFFALSE 75971
// exit ;
75969: GO 76323
// for i in result do
75971: LD_ADDR_VAR 0 4
75975: PUSH
75976: LD_VAR 0 3
75980: PUSH
75981: FOR_IN
75982: IFFALSE 76321
// begin tag := GetTag ( i ) + 1 ;
75984: LD_ADDR_VAR 0 8
75988: PUSH
75989: LD_VAR 0 4
75993: PPUSH
75994: CALL_OW 110
75998: PUSH
75999: LD_INT 1
76001: PLUS
76002: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76003: LD_ADDR_VAR 0 6
76007: PUSH
76008: LD_VAR 0 4
76012: PPUSH
76013: CALL_OW 250
76017: PPUSH
76018: LD_VAR 0 4
76022: PPUSH
76023: CALL_OW 251
76027: PPUSH
76028: LD_INT 6
76030: PPUSH
76031: CALL 75647 0 3
76035: ST_TO_ADDR
// if cr then
76036: LD_VAR 0 6
76040: IFFALSE 76079
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76042: LD_VAR 0 4
76046: PPUSH
76047: LD_VAR 0 6
76051: PUSH
76052: LD_INT 1
76054: ARRAY
76055: PUSH
76056: LD_INT 1
76058: ARRAY
76059: PPUSH
76060: LD_VAR 0 6
76064: PUSH
76065: LD_INT 1
76067: ARRAY
76068: PUSH
76069: LD_INT 2
76071: ARRAY
76072: PPUSH
76073: CALL_OW 116
76077: GO 76319
// if path > tag then
76079: LD_VAR 0 2
76083: PUSH
76084: LD_VAR 0 8
76088: GREATER
76089: IFFALSE 76267
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
76091: LD_ADDR_VAR 0 5
76095: PUSH
76096: LD_INT 81
76098: PUSH
76099: LD_VAR 0 7
76103: PUSH
76104: EMPTY
76105: LIST
76106: LIST
76107: PUSH
76108: LD_INT 91
76110: PUSH
76111: LD_VAR 0 4
76115: PUSH
76116: LD_INT 12
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: LIST
76123: PUSH
76124: EMPTY
76125: LIST
76126: LIST
76127: PPUSH
76128: CALL_OW 69
76132: ST_TO_ADDR
// if enemy then
76133: LD_VAR 0 5
76137: IFFALSE 76165
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76139: LD_VAR 0 4
76143: PPUSH
76144: LD_VAR 0 5
76148: PPUSH
76149: LD_VAR 0 4
76153: PPUSH
76154: CALL_OW 74
76158: PPUSH
76159: CALL_OW 115
76163: GO 76265
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76165: LD_VAR 0 4
76169: PPUSH
76170: LD_VAR 0 2
76174: PUSH
76175: LD_VAR 0 8
76179: ARRAY
76180: PUSH
76181: LD_INT 1
76183: ARRAY
76184: PPUSH
76185: LD_VAR 0 2
76189: PUSH
76190: LD_VAR 0 8
76194: ARRAY
76195: PUSH
76196: LD_INT 2
76198: ARRAY
76199: PPUSH
76200: CALL_OW 297
76204: PUSH
76205: LD_INT 6
76207: GREATER
76208: IFFALSE 76251
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76210: LD_VAR 0 4
76214: PPUSH
76215: LD_VAR 0 2
76219: PUSH
76220: LD_VAR 0 8
76224: ARRAY
76225: PUSH
76226: LD_INT 1
76228: ARRAY
76229: PPUSH
76230: LD_VAR 0 2
76234: PUSH
76235: LD_VAR 0 8
76239: ARRAY
76240: PUSH
76241: LD_INT 2
76243: ARRAY
76244: PPUSH
76245: CALL_OW 114
76249: GO 76265
// SetTag ( i , tag ) ;
76251: LD_VAR 0 4
76255: PPUSH
76256: LD_VAR 0 8
76260: PPUSH
76261: CALL_OW 109
// end else
76265: GO 76319
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76267: LD_ADDR_VAR 0 5
76271: PUSH
76272: LD_INT 81
76274: PUSH
76275: LD_VAR 0 7
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PPUSH
76284: CALL_OW 69
76288: ST_TO_ADDR
// if enemy then
76289: LD_VAR 0 5
76293: IFFALSE 76319
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76295: LD_VAR 0 4
76299: PPUSH
76300: LD_VAR 0 5
76304: PPUSH
76305: LD_VAR 0 4
76309: PPUSH
76310: CALL_OW 74
76314: PPUSH
76315: CALL_OW 115
// end ; end ;
76319: GO 75981
76321: POP
76322: POP
// end ; end_of_file
76323: LD_VAR 0 3
76327: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76328: LD_VAR 0 1
76332: PUSH
76333: LD_INT 200
76335: DOUBLE
76336: GREATEREQUAL
76337: IFFALSE 76345
76339: LD_INT 299
76341: DOUBLE
76342: LESSEQUAL
76343: IFTRUE 76347
76345: GO 76379
76347: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76348: LD_VAR 0 1
76352: PPUSH
76353: LD_VAR 0 2
76357: PPUSH
76358: LD_VAR 0 3
76362: PPUSH
76363: LD_VAR 0 4
76367: PPUSH
76368: LD_VAR 0 5
76372: PPUSH
76373: CALL 32890 0 5
76377: GO 76456
76379: LD_INT 300
76381: DOUBLE
76382: GREATEREQUAL
76383: IFFALSE 76391
76385: LD_INT 399
76387: DOUBLE
76388: LESSEQUAL
76389: IFTRUE 76393
76391: GO 76455
76393: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76394: LD_VAR 0 1
76398: PPUSH
76399: LD_VAR 0 2
76403: PPUSH
76404: LD_VAR 0 3
76408: PPUSH
76409: LD_VAR 0 4
76413: PPUSH
76414: LD_VAR 0 5
76418: PPUSH
76419: LD_VAR 0 6
76423: PPUSH
76424: LD_VAR 0 7
76428: PPUSH
76429: LD_VAR 0 8
76433: PPUSH
76434: LD_VAR 0 9
76438: PPUSH
76439: LD_VAR 0 10
76443: PPUSH
76444: LD_VAR 0 11
76448: PPUSH
76449: CALL 30778 0 11
76453: GO 76456
76455: POP
// end ;
76456: PPOPN 11
76458: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76459: LD_VAR 0 1
76463: PPUSH
76464: LD_VAR 0 2
76468: PPUSH
76469: LD_VAR 0 3
76473: PPUSH
76474: LD_VAR 0 4
76478: PPUSH
76479: LD_VAR 0 5
76483: PPUSH
76484: CALL 32872 0 5
// end ; end_of_file
76488: PPOPN 5
76490: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76491: LD_VAR 0 1
76495: PPUSH
76496: LD_VAR 0 2
76500: PPUSH
76501: LD_VAR 0 3
76505: PPUSH
76506: LD_VAR 0 4
76510: PPUSH
76511: LD_VAR 0 5
76515: PPUSH
76516: LD_VAR 0 6
76520: PPUSH
76521: CALL 19586 0 6
// end ;
76525: PPOPN 6
76527: END
