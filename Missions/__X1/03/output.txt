// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareNature ;
   8: CALL 417 0 0
// PrepareArabian ;
  12: CALL 772 0 0
// PrepareAmerican ;
  16: CALL 1760 0 0
// Action ;
  20: CALL 1768 0 0
// end ;
  24: END
// export debug , prefix ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := true ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// prefix := 02_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 02_
  43: ST_TO_ADDR
// end ; end_of_file
  44: LD_VAR 0 1
  48: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  49: LD_INT 0
  51: PPUSH
  52: PPUSH
// if exist_mode then
  53: LD_VAR 0 2
  57: IFFALSE 82
// unit := CreateCharacter ( prefix & ident ) else
  59: LD_ADDR_VAR 0 5
  63: PUSH
  64: LD_VAR 0 3
  68: PUSH
  69: LD_VAR 0 1
  73: STR
  74: PPUSH
  75: CALL_OW 34
  79: ST_TO_ADDR
  80: GO 97
// unit := NewCharacter ( ident ) ;
  82: LD_ADDR_VAR 0 5
  86: PUSH
  87: LD_VAR 0 1
  91: PPUSH
  92: CALL_OW 25
  96: ST_TO_ADDR
// result := unit ;
  97: LD_ADDR_VAR 0 4
 101: PUSH
 102: LD_VAR 0 5
 106: ST_TO_ADDR
// end ;
 107: LD_VAR 0 4
 111: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 112: LD_INT 0
 114: PPUSH
// uc_side := side ;
 115: LD_ADDR_OWVAR 20
 119: PUSH
 120: LD_VAR 0 1
 124: ST_TO_ADDR
// uc_nation := nation ;
 125: LD_ADDR_OWVAR 21
 129: PUSH
 130: LD_VAR 0 2
 134: ST_TO_ADDR
// vc_chassis := chassis ;
 135: LD_ADDR_OWVAR 37
 139: PUSH
 140: LD_VAR 0 3
 144: ST_TO_ADDR
// vc_engine := engine ;
 145: LD_ADDR_OWVAR 39
 149: PUSH
 150: LD_VAR 0 4
 154: ST_TO_ADDR
// vc_control := control ;
 155: LD_ADDR_OWVAR 38
 159: PUSH
 160: LD_VAR 0 5
 164: ST_TO_ADDR
// vc_weapon := weapon ;
 165: LD_ADDR_OWVAR 40
 169: PUSH
 170: LD_VAR 0 6
 174: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 175: LD_ADDR_OWVAR 41
 179: PUSH
 180: LD_VAR 0 7
 184: ST_TO_ADDR
// result := CreateVehicle ;
 185: LD_ADDR_VAR 0 8
 189: PUSH
 190: CALL_OW 45
 194: ST_TO_ADDR
// end ;
 195: LD_VAR 0 8
 199: RET
// export function SayX ( units , ident ) ; var i ; begin
 200: LD_INT 0
 202: PPUSH
 203: PPUSH
// result := false ;
 204: LD_ADDR_VAR 0 3
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// if not units then
 212: LD_VAR 0 1
 216: NOT
 217: IFFALSE 221
// exit ;
 219: GO 275
// for i in units do
 221: LD_ADDR_VAR 0 4
 225: PUSH
 226: LD_VAR 0 1
 230: PUSH
 231: FOR_IN
 232: IFFALSE 273
// if IsOk ( i ) then
 234: LD_VAR 0 4
 238: PPUSH
 239: CALL_OW 302
 243: IFFALSE 271
// begin Say ( i , ident ) ;
 245: LD_VAR 0 4
 249: PPUSH
 250: LD_VAR 0 2
 254: PPUSH
 255: CALL_OW 88
// result := i ;
 259: LD_ADDR_VAR 0 3
 263: PUSH
 264: LD_VAR 0 4
 268: ST_TO_ADDR
// break ;
 269: GO 273
// end ;
 271: GO 231
 273: POP
 274: POP
// end ;
 275: LD_VAR 0 3
 279: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 280: LD_INT 0
 282: PPUSH
 283: PPUSH
// InitUc ;
 284: CALL_OW 18
// InitHc ;
 288: CALL_OW 19
// uc_side := 0 ;
 292: LD_ADDR_OWVAR 20
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// uc_nation := 0 ;
 300: LD_ADDR_OWVAR 21
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// for i = 1 to amount do
 308: LD_ADDR_VAR 0 4
 312: PUSH
 313: DOUBLE
 314: LD_INT 1
 316: DEC
 317: ST_TO_ADDR
 318: LD_VAR 0 2
 322: PUSH
 323: FOR_TO
 324: IFFALSE 406
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 326: LD_ADDR_OWVAR 29
 330: PUSH
 331: LD_INT 9
 333: PPUSH
 334: LD_INT 12
 336: PPUSH
 337: CALL_OW 12
 341: PUSH
 342: LD_INT 9
 344: PPUSH
 345: LD_INT 12
 347: PPUSH
 348: CALL_OW 12
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 357: LD_ADDR_OWVAR 35
 361: PUSH
 362: LD_INT 1
 364: NEG
 365: PPUSH
 366: LD_INT 1
 368: PPUSH
 369: CALL_OW 12
 373: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 374: LD_INT 0
 376: PPUSH
 377: LD_INT 12
 379: PPUSH
 380: LD_INT 1
 382: PPUSH
 383: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 387: CALL_OW 44
 391: PPUSH
 392: LD_VAR 0 1
 396: PPUSH
 397: LD_INT 0
 399: PPUSH
 400: CALL_OW 49
// end ;
 404: GO 323
 406: POP
 407: POP
// InitHc ;
 408: CALL_OW 19
// end ;
 412: LD_VAR 0 3
 416: RET
// export function PrepareNature ; var i ; begin
 417: LD_INT 0
 419: PPUSH
 420: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 421: LD_INT 2
 423: PPUSH
 424: LD_INT 4
 426: PUSH
 427: LD_INT 4
 429: PUSH
 430: LD_INT 3
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: LIST
 437: PUSH
 438: LD_OWVAR 67
 442: ARRAY
 443: PPUSH
 444: CALL 280 0 2
// for i := 1 to 3 do
 448: LD_ADDR_VAR 0 2
 452: PUSH
 453: DOUBLE
 454: LD_INT 1
 456: DEC
 457: ST_TO_ADDR
 458: LD_INT 3
 460: PUSH
 461: FOR_TO
 462: IFFALSE 497
// begin hc_class := 21 ;
 464: LD_ADDR_OWVAR 28
 468: PUSH
 469: LD_INT 21
 471: ST_TO_ADDR
// hc_gallery :=  ;
 472: LD_ADDR_OWVAR 33
 476: PUSH
 477: LD_STRING 
 479: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 480: CALL_OW 44
 484: PPUSH
 485: LD_INT 2
 487: PPUSH
 488: LD_INT 0
 490: PPUSH
 491: CALL_OW 49
// end ;
 495: GO 461
 497: POP
 498: POP
// for i := 1 to 2 do
 499: LD_ADDR_VAR 0 2
 503: PUSH
 504: DOUBLE
 505: LD_INT 1
 507: DEC
 508: ST_TO_ADDR
 509: LD_INT 2
 511: PUSH
 512: FOR_TO
 513: IFFALSE 548
// begin hc_class := 18 ;
 515: LD_ADDR_OWVAR 28
 519: PUSH
 520: LD_INT 18
 522: ST_TO_ADDR
// hc_gallery :=  ;
 523: LD_ADDR_OWVAR 33
 527: PUSH
 528: LD_STRING 
 530: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 531: CALL_OW 44
 535: PPUSH
 536: LD_INT 2
 538: PPUSH
 539: LD_INT 0
 541: PPUSH
 542: CALL_OW 49
// end ;
 546: GO 512
 548: POP
 549: POP
// for i := 1 to 2 do
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: DOUBLE
 556: LD_INT 1
 558: DEC
 559: ST_TO_ADDR
 560: LD_INT 2
 562: PUSH
 563: FOR_TO
 564: IFFALSE 599
// begin hc_class := 13 ;
 566: LD_ADDR_OWVAR 28
 570: PUSH
 571: LD_INT 13
 573: ST_TO_ADDR
// hc_gallery :=  ;
 574: LD_ADDR_OWVAR 33
 578: PUSH
 579: LD_STRING 
 581: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 582: CALL_OW 44
 586: PPUSH
 587: LD_INT 2
 589: PPUSH
 590: LD_INT 0
 592: PPUSH
 593: CALL_OW 49
// end ;
 597: GO 563
 599: POP
 600: POP
// end ;
 601: LD_VAR 0 1
 605: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 606: LD_INT 0
 608: PPUSH
 609: PPUSH
 610: PPUSH
// if not observer or not unit then
 611: LD_VAR 0 1
 615: NOT
 616: PUSH
 617: LD_VAR 0 2
 621: NOT
 622: OR
 623: IFFALSE 627
// exit ;
 625: GO 675
// if not See ( GetSide ( observer ) , unit ) then
 627: LD_VAR 0 1
 631: PPUSH
 632: CALL_OW 255
 636: PPUSH
 637: LD_VAR 0 2
 641: PPUSH
 642: CALL_OW 292
 646: NOT
 647: IFFALSE 651
// exit ;
 649: GO 675
// result := GetDistUnits ( observer , unit ) < 12 ;
 651: LD_ADDR_VAR 0 3
 655: PUSH
 656: LD_VAR 0 1
 660: PPUSH
 661: LD_VAR 0 2
 665: PPUSH
 666: CALL_OW 296
 670: PUSH
 671: LD_INT 12
 673: LESS
 674: ST_TO_ADDR
// end ;
 675: LD_VAR 0 3
 679: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 680: LD_INT 0
 682: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 683: LD_VAR 0 2
 687: PUSH
 688: LD_INT 1
 690: ARRAY
 691: PPUSH
 692: LD_VAR 0 2
 696: PUSH
 697: LD_INT 2
 699: ARRAY
 700: PPUSH
 701: CALL_OW 488
 705: PUSH
 706: LD_VAR 0 2
 710: PUSH
 711: LD_INT 1
 713: ARRAY
 714: PPUSH
 715: LD_VAR 0 2
 719: PUSH
 720: LD_INT 2
 722: ARRAY
 723: PPUSH
 724: CALL_OW 428
 728: PUSH
 729: LD_INT 0
 731: EQUAL
 732: AND
 733: IFFALSE 767
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 735: LD_VAR 0 1
 739: PPUSH
 740: LD_VAR 0 2
 744: PUSH
 745: LD_INT 1
 747: ARRAY
 748: PPUSH
 749: LD_VAR 0 2
 753: PUSH
 754: LD_INT 2
 756: ARRAY
 757: PPUSH
 758: LD_VAR 0 3
 762: PPUSH
 763: CALL_OW 48
// end ; end_of_file
 767: LD_VAR 0 4
 771: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar ; export farmerSquad , omarSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 772: LD_INT 0
 774: PPUSH
 775: PPUSH
 776: PPUSH
 777: PPUSH
// uc_side := 5 ;
 778: LD_ADDR_OWVAR 20
 782: PUSH
 783: LD_INT 5
 785: ST_TO_ADDR
// uc_nation := 2 ;
 786: LD_ADDR_OWVAR 21
 790: PUSH
 791: LD_INT 2
 793: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_STRING Farmer
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: LD_STRING 
 807: PPUSH
 808: CALL 49 0 3
 812: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 813: LD_ADDR_EXP 12
 817: PUSH
 818: LD_STRING Omar
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: LD_STRING 
 826: PPUSH
 827: CALL 49 0 3
 831: ST_TO_ADDR
// omarSquad := [ ] ;
 832: LD_ADDR_EXP 14
 836: PUSH
 837: EMPTY
 838: ST_TO_ADDR
// for i := 1 to 5 do
 839: LD_ADDR_VAR 0 2
 843: PUSH
 844: DOUBLE
 845: LD_INT 1
 847: DEC
 848: ST_TO_ADDR
 849: LD_INT 5
 851: PUSH
 852: FOR_TO
 853: IFFALSE 1011
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
 855: LD_INT 0
 857: PPUSH
 858: LD_INT 1
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: LD_INT 2
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: PUSH
 880: LD_VAR 0 2
 884: ARRAY
 885: PPUSH
 886: LD_INT 3
 888: PPUSH
 889: CALL_OW 380
// un := CreateHuman ;
 893: LD_ADDR_VAR 0 3
 897: PUSH
 898: CALL_OW 44
 902: ST_TO_ADDR
// omarSquad := omarSquad union un ;
 903: LD_ADDR_EXP 14
 907: PUSH
 908: LD_EXP 14
 912: PUSH
 913: LD_VAR 0 3
 917: UNION
 918: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
 919: LD_VAR 0 3
 923: PPUSH
 924: LD_INT 87
 926: PUSH
 927: LD_INT 30
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: LD_INT 91
 936: PUSH
 937: LD_INT 32
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: LD_INT 82
 946: PUSH
 947: LD_INT 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 79
 956: PUSH
 957: LD_INT 14
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 82
 966: PUSH
 967: LD_INT 13
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_VAR 0 2
 985: ARRAY
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL 680 0 3
// ComTurnXY ( un , 93 , 21 ) ;
 994: LD_VAR 0 3
 998: PPUSH
 999: LD_INT 93
1001: PPUSH
1002: LD_INT 21
1004: PPUSH
1005: CALL_OW 118
// end ;
1009: GO 852
1011: POP
1012: POP
// uc_side := 2 ;
1013: LD_ADDR_OWVAR 20
1017: PUSH
1018: LD_INT 2
1020: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1021: LD_ADDR_EXP 3
1025: PUSH
1026: LD_STRING Heike
1028: PPUSH
1029: LD_EXP 1
1033: NOT
1034: PPUSH
1035: LD_EXP 2
1039: PPUSH
1040: CALL 49 0 3
1044: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1045: LD_ADDR_EXP 7
1049: PUSH
1050: LD_STRING Aviradze
1052: PPUSH
1053: LD_EXP 1
1057: NOT
1058: PPUSH
1059: LD_EXP 2
1063: PPUSH
1064: CALL 49 0 3
1068: ST_TO_ADDR
// tmp := [ ] ;
1069: LD_ADDR_VAR 0 4
1073: PUSH
1074: EMPTY
1075: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1076: LD_ADDR_EXP 4
1080: PUSH
1081: LD_STRING Givi
1083: PPUSH
1084: LD_EXP 1
1088: NOT
1089: PPUSH
1090: LD_EXP 2
1094: PPUSH
1095: CALL 49 0 3
1099: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1100: LD_ADDR_EXP 5
1104: PUSH
1105: LD_STRING Mike
1107: PPUSH
1108: LD_EXP 1
1112: NOT
1113: PPUSH
1114: LD_EXP 2
1118: PPUSH
1119: CALL 49 0 3
1123: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1124: LD_ADDR_EXP 6
1128: PUSH
1129: LD_STRING Kamil
1131: PPUSH
1132: LD_EXP 1
1136: NOT
1137: PPUSH
1138: LD_EXP 2
1142: PPUSH
1143: CALL 49 0 3
1147: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1148: LD_ADDR_EXP 8
1152: PUSH
1153: LD_STRING Kaia
1155: PPUSH
1156: LD_EXP 1
1160: NOT
1161: PPUSH
1162: LD_EXP 2
1166: PPUSH
1167: CALL 49 0 3
1171: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1172: LD_ADDR_EXP 9
1176: PUSH
1177: LD_STRING Sophia
1179: PPUSH
1180: LD_EXP 1
1184: NOT
1185: PPUSH
1186: LD_EXP 2
1190: PPUSH
1191: CALL 49 0 3
1195: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1196: LD_ADDR_EXP 10
1200: PUSH
1201: LD_STRING Markov
1203: PPUSH
1204: LD_EXP 1
1208: NOT
1209: PPUSH
1210: LD_EXP 2
1214: PPUSH
1215: CALL 49 0 3
1219: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi , Mike ] ^ CreateCharacterSet ( 02_others ) diff 0 ;
1220: LD_ADDR_VAR 0 4
1224: PUSH
1225: LD_EXP 5
1229: PUSH
1230: LD_EXP 6
1234: PUSH
1235: LD_EXP 8
1239: PUSH
1240: LD_EXP 9
1244: PUSH
1245: LD_EXP 10
1249: PUSH
1250: LD_EXP 4
1254: PUSH
1255: LD_EXP 5
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_STRING 02_others
1271: PPUSH
1272: CALL_OW 31
1276: ADD
1277: PUSH
1278: LD_INT 0
1280: DIFF
1281: ST_TO_ADDR
// uc_nation := 0 ;
1282: LD_ADDR_OWVAR 21
1286: PUSH
1287: LD_INT 0
1289: ST_TO_ADDR
// hc_class := class_apeman ;
1290: LD_ADDR_OWVAR 28
1294: PUSH
1295: LD_INT 12
1297: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1298: LD_ADDR_OWVAR 31
1302: PUSH
1303: LD_INT 0
1305: PUSH
1306: LD_INT 0
1308: PUSH
1309: LD_INT 0
1311: PUSH
1312: LD_INT 0
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: ST_TO_ADDR
// hc_gallery :=  ;
1321: LD_ADDR_OWVAR 33
1325: PUSH
1326: LD_STRING 
1328: ST_TO_ADDR
// hc_name :=  ;
1329: LD_ADDR_OWVAR 26
1333: PUSH
1334: LD_STRING 
1336: ST_TO_ADDR
// tmp := tmp union CreateHuman ;
1337: LD_ADDR_VAR 0 4
1341: PUSH
1342: LD_VAR 0 4
1346: PUSH
1347: CALL_OW 44
1351: UNION
1352: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1353: LD_EXP 3
1357: PPUSH
1358: LD_INT 92
1360: PPUSH
1361: LD_INT 17
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1371: LD_EXP 11
1375: PPUSH
1376: LD_INT 95
1378: PPUSH
1379: LD_INT 19
1381: PPUSH
1382: LD_INT 0
1384: PPUSH
1385: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1389: LD_EXP 12
1393: PPUSH
1394: LD_INT 89
1396: PPUSH
1397: LD_INT 25
1399: PPUSH
1400: LD_INT 0
1402: PPUSH
1403: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1407: LD_EXP 7
1411: PPUSH
1412: LD_INT 92
1414: PPUSH
1415: LD_INT 27
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1425: LD_EXP 12
1429: PPUSH
1430: LD_EXP 7
1434: PPUSH
1435: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1439: LD_EXP 7
1443: PPUSH
1444: LD_EXP 12
1448: PPUSH
1449: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1453: LD_EXP 3
1457: PUSH
1458: LD_EXP 11
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PPUSH
1467: LD_EXP 12
1471: PPUSH
1472: CALL_OW 119
// if tmp then
1476: LD_VAR 0 4
1480: IFFALSE 1534
// for i in tmp do
1482: LD_ADDR_VAR 0 2
1486: PUSH
1487: LD_VAR 0 4
1491: PUSH
1492: FOR_IN
1493: IFFALSE 1532
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1495: LD_VAR 0 2
1499: PPUSH
1500: LD_INT 94
1502: PPUSH
1503: LD_INT 14
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1516: LD_VAR 0 2
1520: PPUSH
1521: LD_EXP 3
1525: PPUSH
1526: CALL_OW 119
// end ;
1530: GO 1492
1532: POP
1533: POP
// farmerSquad := [ ] ;
1534: LD_ADDR_EXP 13
1538: PUSH
1539: EMPTY
1540: ST_TO_ADDR
// uc_side := 5 ;
1541: LD_ADDR_OWVAR 20
1545: PUSH
1546: LD_INT 5
1548: ST_TO_ADDR
// uc_nation := 2 ;
1549: LD_ADDR_OWVAR 21
1553: PUSH
1554: LD_INT 2
1556: ST_TO_ADDR
// for i := 1 to 4 do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: DOUBLE
1563: LD_INT 1
1565: DEC
1566: ST_TO_ADDR
1567: LD_INT 4
1569: PUSH
1570: FOR_TO
1571: IFFALSE 1649
// begin PrepareHuman ( false , 1 , 2 ) ;
1573: LD_INT 0
1575: PPUSH
1576: LD_INT 1
1578: PPUSH
1579: LD_INT 2
1581: PPUSH
1582: CALL_OW 380
// un := CreateHuman ;
1586: LD_ADDR_VAR 0 3
1590: PUSH
1591: CALL_OW 44
1595: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1596: LD_VAR 0 3
1600: PPUSH
1601: LD_INT 102
1603: PPUSH
1604: LD_INT 27
1606: PPUSH
1607: LD_INT 4
1609: PPUSH
1610: LD_INT 0
1612: PPUSH
1613: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1617: LD_ADDR_EXP 13
1621: PUSH
1622: LD_EXP 13
1626: PUSH
1627: LD_VAR 0 3
1631: UNION
1632: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1633: LD_VAR 0 3
1637: PPUSH
1638: LD_EXP 12
1642: PPUSH
1643: CALL_OW 119
// end ;
1647: GO 1570
1649: POP
1650: POP
// PrepareHuman ( false , 2 , 2 ) ;
1651: LD_INT 0
1653: PPUSH
1654: LD_INT 2
1656: PPUSH
1657: LD_INT 2
1659: PPUSH
1660: CALL_OW 380
// un := CreateHuman ;
1664: LD_ADDR_VAR 0 3
1668: PUSH
1669: CALL_OW 44
1673: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1674: LD_VAR 0 3
1678: PPUSH
1679: LD_INT 108
1681: PPUSH
1682: LD_INT 62
1684: PPUSH
1685: LD_INT 2
1687: PPUSH
1688: LD_INT 0
1690: PPUSH
1691: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1695: LD_ADDR_EXP 13
1699: PUSH
1700: LD_EXP 13
1704: PUSH
1705: LD_VAR 0 3
1709: UNION
1710: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1711: LD_VAR 0 3
1715: PPUSH
1716: LD_EXP 12
1720: PPUSH
1721: CALL_OW 119
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
1725: LD_INT 109
1727: PPUSH
1728: LD_INT 63
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: LD_INT 15
1736: NEG
1737: PPUSH
1738: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
1742: LD_INT 109
1744: PPUSH
1745: LD_INT 63
1747: PPUSH
1748: LD_INT 2
1750: PPUSH
1751: CALL_OW 331
// end ; end_of_file
1755: LD_VAR 0 1
1759: RET
// export function PrepareAmerican ; begin
1760: LD_INT 0
1762: PPUSH
// end ; end_of_file
1763: LD_VAR 0 1
1767: RET
// export function Action ; var hasAll , i , tmp ; begin
1768: LD_INT 0
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
1774: LD_ADDR_VAR 0 2
1778: PUSH
1779: LD_INT 22
1781: PUSH
1782: LD_INT 2
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: LD_INT 21
1791: PUSH
1792: LD_INT 1
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 23
1801: PUSH
1802: LD_INT 2
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PPUSH
1814: CALL_OW 69
1818: PUSH
1819: LD_INT 7
1821: GREATEREQUAL
1822: ST_TO_ADDR
// InGameOn ;
1823: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
1827: LD_EXP 3
1831: PPUSH
1832: CALL_OW 87
// wait ( 0 0$2 ) ;
1836: LD_INT 70
1838: PPUSH
1839: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
1843: LD_EXP 11
1847: PPUSH
1848: LD_STRING DF-1-start
1850: PPUSH
1851: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
1855: LD_EXP 3
1859: PPUSH
1860: LD_EXP 11
1864: PPUSH
1865: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
1869: LD_EXP 3
1873: PPUSH
1874: LD_STRING DH-1-start
1876: PPUSH
1877: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
1881: LD_EXP 12
1885: PPUSH
1886: LD_INT 92
1888: PPUSH
1889: LD_INT 21
1891: PPUSH
1892: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
1896: LD_EXP 7
1900: PPUSH
1901: LD_INT 94
1903: PPUSH
1904: LD_INT 23
1906: PPUSH
1907: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
1911: LD_EXP 14
1915: PUSH
1916: LD_INT 1
1918: ARRAY
1919: PPUSH
1920: LD_INT 90
1922: PPUSH
1923: LD_INT 23
1925: PPUSH
1926: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
1930: LD_EXP 14
1934: PUSH
1935: LD_INT 2
1937: ARRAY
1938: PPUSH
1939: LD_INT 93
1941: PPUSH
1942: LD_INT 25
1944: PPUSH
1945: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
1949: LD_EXP 14
1953: PPUSH
1954: LD_EXP 12
1958: PPUSH
1959: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
1963: LD_EXP 12
1967: PUSH
1968: LD_EXP 7
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: LD_EXP 3
1981: PPUSH
1982: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
1986: LD_EXP 3
1990: PPUSH
1991: LD_EXP 12
1995: PPUSH
1996: CALL_OW 179
// Say ( Omar , DO-1-start ) ;
2000: LD_EXP 12
2004: PPUSH
2005: LD_STRING DO-1-start
2007: PPUSH
2008: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
2012: LD_EXP 3
2016: PPUSH
2017: LD_STRING DH-2-start
2019: PPUSH
2020: CALL_OW 88
// if hasAll then
2024: LD_VAR 0 2
2028: IFFALSE 2156
// begin Say ( Omar , DO-2-start ) ;
2030: LD_EXP 12
2034: PPUSH
2035: LD_STRING DO-2-start
2037: PPUSH
2038: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
2042: LD_EXP 12
2046: PPUSH
2047: LD_STRING DO-3-start
2049: PPUSH
2050: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
2054: LD_EXP 3
2058: PPUSH
2059: LD_STRING DH-3-start
2061: PPUSH
2062: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
2066: LD_EXP 11
2070: PPUSH
2071: LD_STRING DF-2-start
2073: PPUSH
2074: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
2078: LD_EXP 12
2082: PPUSH
2083: LD_EXP 11
2087: PPUSH
2088: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
2092: LD_EXP 12
2096: PPUSH
2097: LD_STRING DO-4-start
2099: PPUSH
2100: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
2104: LD_EXP 11
2108: PPUSH
2109: LD_STRING DF-3-start
2111: PPUSH
2112: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
2116: LD_EXP 12
2120: PPUSH
2121: LD_STRING DO-5-start
2123: PPUSH
2124: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
2128: LD_EXP 11
2132: PPUSH
2133: LD_STRING DF-4-start
2135: PPUSH
2136: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
2140: LD_EXP 12
2144: PPUSH
2145: LD_EXP 3
2149: PPUSH
2150: CALL_OW 119
// end else
2154: GO 2256
// begin Say ( Omar , DO-2-start-a ) ;
2156: LD_EXP 12
2160: PPUSH
2161: LD_STRING DO-2-start-a
2163: PPUSH
2164: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
2168: LD_EXP 12
2172: PPUSH
2173: LD_STRING DO-3-start-a
2175: PPUSH
2176: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
2180: LD_EXP 3
2184: PPUSH
2185: LD_STRING DH-3-start-a
2187: PPUSH
2188: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
2192: LD_EXP 11
2196: PPUSH
2197: LD_STRING DF-2-start-a
2199: PPUSH
2200: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
2204: LD_EXP 12
2208: PPUSH
2209: LD_EXP 11
2213: PPUSH
2214: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
2218: LD_EXP 12
2222: PPUSH
2223: LD_STRING DO-4-start-a
2225: PPUSH
2226: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
2230: LD_EXP 11
2234: PPUSH
2235: LD_STRING DF-3-start-a
2237: PPUSH
2238: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
2242: LD_EXP 12
2246: PPUSH
2247: LD_EXP 3
2251: PPUSH
2252: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
2256: LD_INT 10
2258: PPUSH
2259: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
2263: LD_EXP 12
2267: PPUSH
2268: LD_STRING DO-1-mission
2270: PPUSH
2271: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
2275: LD_EXP 12
2279: PPUSH
2280: LD_STRING DO-2-mission
2282: PPUSH
2283: CALL_OW 88
// if not hasAll then
2287: LD_VAR 0 2
2291: NOT
2292: IFFALSE 2306
// Say ( Omar , DO-3-mission ) ;
2294: LD_EXP 12
2298: PPUSH
2299: LD_STRING DO-3-mission
2301: PPUSH
2302: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
2306: LD_EXP 12
2310: PPUSH
2311: LD_STRING DO-4-mission
2313: PPUSH
2314: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
2318: LD_EXP 3
2322: PPUSH
2323: LD_STRING DH-1-mission
2325: PPUSH
2326: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
2330: LD_EXP 11
2334: PPUSH
2335: LD_STRING DF-1-mission
2337: PPUSH
2338: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
2342: LD_EXP 12
2346: PPUSH
2347: LD_STRING DO-5-mission
2349: PPUSH
2350: CALL_OW 88
// if hasAll and IsOk ( Kaia ) then
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 8
2363: PPUSH
2364: CALL_OW 302
2368: AND
2369: IFFALSE 2423
// begin ComTurnUnit ( Kaia , Farmer ) ;
2371: LD_EXP 8
2375: PPUSH
2376: LD_EXP 11
2380: PPUSH
2381: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
2385: LD_EXP 8
2389: PPUSH
2390: LD_STRING DK-1-side
2392: PPUSH
2393: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
2397: LD_EXP 11
2401: PPUSH
2402: LD_EXP 8
2406: PPUSH
2407: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
2411: LD_EXP 11
2415: PPUSH
2416: LD_STRING DF-1-side
2418: PPUSH
2419: CALL_OW 88
// end ; InGameOff ;
2423: CALL_OW 9
// ChangeMissionObjectives ( CaptureBase ) ;
2427: LD_STRING CaptureBase
2429: PPUSH
2430: CALL_OW 337
// ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
2434: LD_INT 22
2436: PUSH
2437: LD_INT 2
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PPUSH
2444: CALL_OW 69
2448: PPUSH
2449: CALL_OW 139
// SaveForQuickRestart ;
2453: CALL_OW 22
// if not hasAll then
2457: LD_VAR 0 2
2461: NOT
2462: IFFALSE 2577
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
2464: LD_ADDR_VAR 0 4
2468: PUSH
2469: LD_INT 22
2471: PUSH
2472: LD_INT 2
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: PUSH
2479: LD_INT 21
2481: PUSH
2482: LD_INT 1
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: LD_INT 23
2491: PUSH
2492: LD_INT 2
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: PPUSH
2504: CALL_OW 69
2508: ST_TO_ADDR
// for i := 7 downto tmp do
2509: LD_ADDR_VAR 0 3
2513: PUSH
2514: DOUBLE
2515: LD_INT 7
2517: INC
2518: ST_TO_ADDR
2519: LD_VAR 0 4
2523: PUSH
2524: FOR_DOWNTO
2525: IFFALSE 2575
// begin if omarSquad < 3 then
2527: LD_EXP 14
2531: PUSH
2532: LD_INT 3
2534: LESS
2535: IFFALSE 2539
// break ;
2537: GO 2575
// SetSide ( omarSquad [ 3 ] , 2 ) ;
2539: LD_EXP 14
2543: PUSH
2544: LD_INT 3
2546: ARRAY
2547: PPUSH
2548: LD_INT 2
2550: PPUSH
2551: CALL_OW 235
// omarSquad := Delete ( omarSquad , 3 ) ;
2555: LD_ADDR_EXP 14
2559: PUSH
2560: LD_EXP 14
2564: PPUSH
2565: LD_INT 3
2567: PPUSH
2568: CALL_OW 3
2572: ST_TO_ADDR
// end ;
2573: GO 2524
2575: POP
2576: POP
// end ; ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
2577: LD_EXP 11
2581: PUSH
2582: LD_EXP 13
2586: ADD
2587: PPUSH
2588: LD_INT 108
2590: PPUSH
2591: LD_INT 62
2593: PPUSH
2594: CALL_OW 111
// ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
2598: LD_EXP 12
2602: PUSH
2603: LD_EXP 14
2607: ADD
2608: PPUSH
2609: LD_INT 103
2611: PPUSH
2612: LD_INT 9
2614: PPUSH
2615: CALL_OW 111
// end ;
2619: LD_VAR 0 1
2623: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2624: LD_EXP 12
2628: PUSH
2629: LD_EXP 14
2633: ADD
2634: PPUSH
2635: LD_INT 95
2637: PUSH
2638: LD_INT 3
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PPUSH
2645: CALL_OW 72
2649: IFFALSE 2705
2651: GO 2653
2653: DISABLE
2654: LD_INT 0
2656: PPUSH
// begin enable ;
2657: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2658: LD_ADDR_VAR 0 1
2662: PUSH
2663: LD_EXP 12
2667: PUSH
2668: LD_EXP 14
2672: ADD
2673: PPUSH
2674: LD_INT 95
2676: PUSH
2677: LD_INT 3
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PPUSH
2684: CALL_OW 72
2688: PUSH
2689: FOR_IN
2690: IFFALSE 2703
// RemoveUnit ( i ) ;
2692: LD_VAR 0 1
2696: PPUSH
2697: CALL_OW 64
2701: GO 2689
2703: POP
2704: POP
// end ; end_of_file
2705: PPOPN 1
2707: END
// on UnitDestroyed ( un ) do begin if un = Heike then
2708: LD_VAR 0 1
2712: PUSH
2713: LD_EXP 3
2717: EQUAL
2718: IFFALSE 2727
// YouLost ( Heike ) ;
2720: LD_STRING Heike
2722: PPUSH
2723: CALL_OW 104
// end ;
2727: PPOPN 1
2729: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
2730: LD_VAR 0 1
2734: PUSH
2735: LD_INT 2
2737: EQUAL
2738: PUSH
2739: LD_VAR 0 2
2743: PUSH
2744: LD_INT 5
2746: EQUAL
2747: AND
2748: IFFALSE 2757
// YouLost ( Attack ) ;
2750: LD_STRING Attack
2752: PPUSH
2753: CALL_OW 104
// end ; end_of_file
2757: PPOPN 2
2759: END
