// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 629 0 0
// PrepareArabian ;
  12: CALL 988 0 0
// PrepareAmerican ;
  16: CALL 4049 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9141 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// end ; end_of_file
 328: LD_VAR 0 1
 332: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 333: LD_INT 0
 335: PPUSH
// uc_side := side ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_VAR 0 1
 345: ST_TO_ADDR
// uc_nation := nation ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_VAR 0 2
 355: ST_TO_ADDR
// vc_chassis := chassis ;
 356: LD_ADDR_OWVAR 37
 360: PUSH
 361: LD_VAR 0 3
 365: ST_TO_ADDR
// vc_engine := engine ;
 366: LD_ADDR_OWVAR 39
 370: PUSH
 371: LD_VAR 0 4
 375: ST_TO_ADDR
// vc_control := control ;
 376: LD_ADDR_OWVAR 38
 380: PUSH
 381: LD_VAR 0 5
 385: ST_TO_ADDR
// vc_weapon := weapon ;
 386: LD_ADDR_OWVAR 40
 390: PUSH
 391: LD_VAR 0 6
 395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 396: LD_ADDR_OWVAR 41
 400: PUSH
 401: LD_VAR 0 7
 405: ST_TO_ADDR
// result := CreateVehicle ;
 406: LD_ADDR_VAR 0 8
 410: PUSH
 411: CALL_OW 45
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 8
 420: RET
// export function SayX ( units , ident ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// result := false ;
 425: LD_ADDR_VAR 0 3
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// if not units then
 433: LD_VAR 0 1
 437: NOT
 438: IFFALSE 442
// exit ;
 440: GO 496
// for i in units do
 442: LD_ADDR_VAR 0 4
 446: PUSH
 447: LD_VAR 0 1
 451: PUSH
 452: FOR_IN
 453: IFFALSE 494
// if IsOk ( i ) then
 455: LD_VAR 0 4
 459: PPUSH
 460: CALL_OW 302
 464: IFFALSE 492
// begin Say ( i , ident ) ;
 466: LD_VAR 0 4
 470: PPUSH
 471: LD_VAR 0 2
 475: PPUSH
 476: CALL_OW 88
// result := i ;
 480: LD_ADDR_VAR 0 3
 484: PUSH
 485: LD_VAR 0 4
 489: ST_TO_ADDR
// break ;
 490: GO 494
// end ;
 492: GO 452
 494: POP
 495: POP
// end ;
 496: LD_VAR 0 3
 500: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
// InitUc ;
 505: CALL_OW 18
// InitHc ;
 509: CALL_OW 19
// uc_side := 0 ;
 513: LD_ADDR_OWVAR 20
 517: PUSH
 518: LD_INT 0
 520: ST_TO_ADDR
// uc_nation := 0 ;
 521: LD_ADDR_OWVAR 21
 525: PUSH
 526: LD_INT 0
 528: ST_TO_ADDR
// for i = 1 to amount do
 529: LD_ADDR_VAR 0 4
 533: PUSH
 534: DOUBLE
 535: LD_INT 1
 537: DEC
 538: ST_TO_ADDR
 539: LD_VAR 0 2
 543: PUSH
 544: FOR_TO
 545: IFFALSE 618
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 547: LD_ADDR_OWVAR 29
 551: PUSH
 552: LD_INT 9
 554: PPUSH
 555: LD_INT 12
 557: PPUSH
 558: CALL_OW 12
 562: PUSH
 563: LD_INT 9
 565: PPUSH
 566: LD_INT 12
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: ST_TO_ADDR
// hc_agressivity := 0 ;
 578: LD_ADDR_OWVAR 35
 582: PUSH
 583: LD_INT 0
 585: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 586: LD_INT 0
 588: PPUSH
 589: LD_INT 12
 591: PPUSH
 592: LD_INT 1
 594: PPUSH
 595: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 599: CALL_OW 44
 603: PPUSH
 604: LD_VAR 0 1
 608: PPUSH
 609: LD_INT 0
 611: PPUSH
 612: CALL_OW 49
// end ;
 616: GO 544
 618: POP
 619: POP
// InitHc ;
 620: CALL_OW 19
// end ;
 624: LD_VAR 0 3
 628: RET
// export function CreateNature ; var i ; begin
 629: LD_INT 0
 631: PPUSH
 632: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 633: LD_INT 2
 635: PPUSH
 636: LD_INT 5
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 4
 644: PUSH
 645: LD_INT 3
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_OWVAR 67
 658: ARRAY
 659: PPUSH
 660: CALL 501 0 2
// for i := 1 to 2 do
 664: LD_ADDR_VAR 0 2
 668: PUSH
 669: DOUBLE
 670: LD_INT 1
 672: DEC
 673: ST_TO_ADDR
 674: LD_INT 2
 676: PUSH
 677: FOR_TO
 678: IFFALSE 713
// begin hc_class := 21 ;
 680: LD_ADDR_OWVAR 28
 684: PUSH
 685: LD_INT 21
 687: ST_TO_ADDR
// hc_gallery :=  ;
 688: LD_ADDR_OWVAR 33
 692: PUSH
 693: LD_STRING 
 695: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 696: CALL_OW 44
 700: PPUSH
 701: LD_INT 2
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 49
// end ;
 711: GO 677
 713: POP
 714: POP
// for i := 1 to 2 do
 715: LD_ADDR_VAR 0 2
 719: PUSH
 720: DOUBLE
 721: LD_INT 1
 723: DEC
 724: ST_TO_ADDR
 725: LD_INT 2
 727: PUSH
 728: FOR_TO
 729: IFFALSE 764
// begin hc_class := 18 ;
 731: LD_ADDR_OWVAR 28
 735: PUSH
 736: LD_INT 18
 738: ST_TO_ADDR
// hc_gallery :=  ;
 739: LD_ADDR_OWVAR 33
 743: PUSH
 744: LD_STRING 
 746: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 747: CALL_OW 44
 751: PPUSH
 752: LD_INT 2
 754: PPUSH
 755: LD_INT 0
 757: PPUSH
 758: CALL_OW 49
// end ;
 762: GO 728
 764: POP
 765: POP
// for i := 1 to 2 do
 766: LD_ADDR_VAR 0 2
 770: PUSH
 771: DOUBLE
 772: LD_INT 1
 774: DEC
 775: ST_TO_ADDR
 776: LD_INT 2
 778: PUSH
 779: FOR_TO
 780: IFFALSE 815
// begin hc_class := 13 ;
 782: LD_ADDR_OWVAR 28
 786: PUSH
 787: LD_INT 13
 789: ST_TO_ADDR
// hc_gallery :=  ;
 790: LD_ADDR_OWVAR 33
 794: PUSH
 795: LD_STRING 
 797: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 798: CALL_OW 44
 802: PPUSH
 803: LD_INT 2
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 779
 815: POP
 816: POP
// end ;
 817: LD_VAR 0 1
 821: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
// if not observer or not unit then
 827: LD_VAR 0 1
 831: NOT
 832: PUSH
 833: LD_VAR 0 2
 837: NOT
 838: OR
 839: IFFALSE 843
// exit ;
 841: GO 891
// if not See ( GetSide ( observer ) , unit ) then
 843: LD_VAR 0 1
 847: PPUSH
 848: CALL_OW 255
 852: PPUSH
 853: LD_VAR 0 2
 857: PPUSH
 858: CALL_OW 292
 862: NOT
 863: IFFALSE 867
// exit ;
 865: GO 891
// result := GetDistUnits ( observer , unit ) < 12 ;
 867: LD_ADDR_VAR 0 3
 871: PUSH
 872: LD_VAR 0 1
 876: PPUSH
 877: LD_VAR 0 2
 881: PPUSH
 882: CALL_OW 296
 886: PUSH
 887: LD_INT 12
 889: LESS
 890: ST_TO_ADDR
// end ;
 891: LD_VAR 0 3
 895: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 896: LD_INT 0
 898: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 899: LD_VAR 0 2
 903: PUSH
 904: LD_INT 1
 906: ARRAY
 907: PPUSH
 908: LD_VAR 0 2
 912: PUSH
 913: LD_INT 2
 915: ARRAY
 916: PPUSH
 917: CALL_OW 488
 921: PUSH
 922: LD_VAR 0 2
 926: PUSH
 927: LD_INT 1
 929: ARRAY
 930: PPUSH
 931: LD_VAR 0 2
 935: PUSH
 936: LD_INT 2
 938: ARRAY
 939: PPUSH
 940: CALL_OW 428
 944: PUSH
 945: LD_INT 0
 947: EQUAL
 948: AND
 949: IFFALSE 983
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 951: LD_VAR 0 1
 955: PPUSH
 956: LD_VAR 0 2
 960: PUSH
 961: LD_INT 1
 963: ARRAY
 964: PPUSH
 965: LD_VAR 0 2
 969: PUSH
 970: LD_INT 2
 972: ARRAY
 973: PPUSH
 974: LD_VAR 0 3
 978: PPUSH
 979: CALL_OW 48
// end ; end_of_file
 983: LD_VAR 0 4
 987: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
 988: LD_INT 0
 990: PPUSH
 991: PPUSH
 992: PPUSH
 993: PPUSH
// uc_side := 5 ;
 994: LD_ADDR_OWVAR 20
 998: PUSH
 999: LD_INT 5
1001: ST_TO_ADDR
// uc_nation := 2 ;
1002: LD_ADDR_OWVAR 21
1006: PUSH
1007: LD_INT 2
1009: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1010: LD_INT 5
1012: PPUSH
1013: CALL_OW 274
1017: PPUSH
1018: LD_INT 1
1020: PPUSH
1021: LD_INT 65
1023: PPUSH
1024: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1028: LD_ADDR_EXP 37
1032: PUSH
1033: LD_STRING Farmer
1035: PPUSH
1036: LD_INT 0
1038: PPUSH
1039: LD_STRING 
1041: PPUSH
1042: CALL 39795 0 3
1046: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1047: LD_ADDR_EXP 38
1051: PUSH
1052: LD_STRING Omar
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: LD_STRING 
1060: PPUSH
1061: CALL 39795 0 3
1065: ST_TO_ADDR
// omarSquad := [ ] ;
1066: LD_ADDR_EXP 41
1070: PUSH
1071: EMPTY
1072: ST_TO_ADDR
// heikeSquad := [ ] ;
1073: LD_ADDR_EXP 42
1077: PUSH
1078: EMPTY
1079: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1080: LD_ADDR_EXP 43
1084: PUSH
1085: EMPTY
1086: ST_TO_ADDR
// omarCargo := [ ] ;
1087: LD_ADDR_EXP 44
1091: PUSH
1092: EMPTY
1093: ST_TO_ADDR
// for i := 1 to 5 do
1094: LD_ADDR_VAR 0 2
1098: PUSH
1099: DOUBLE
1100: LD_INT 1
1102: DEC
1103: ST_TO_ADDR
1104: LD_INT 5
1106: PUSH
1107: FOR_TO
1108: IFFALSE 1266
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1110: LD_INT 0
1112: PPUSH
1113: LD_INT 1
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_VAR 0 2
1139: ARRAY
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: CALL_OW 380
// un := CreateHuman ;
1148: LD_ADDR_VAR 0 3
1152: PUSH
1153: CALL_OW 44
1157: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1158: LD_ADDR_EXP 41
1162: PUSH
1163: LD_EXP 41
1167: PUSH
1168: LD_VAR 0 3
1172: UNION
1173: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1174: LD_VAR 0 3
1178: PPUSH
1179: LD_INT 87
1181: PUSH
1182: LD_INT 30
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 91
1191: PUSH
1192: LD_INT 32
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 82
1201: PUSH
1202: LD_INT 15
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: PUSH
1209: LD_INT 79
1211: PUSH
1212: LD_INT 14
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 82
1221: PUSH
1222: LD_INT 13
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: PUSH
1236: LD_VAR 0 2
1240: ARRAY
1241: PPUSH
1242: LD_INT 0
1244: PPUSH
1245: CALL 896 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1249: LD_VAR 0 3
1253: PPUSH
1254: LD_INT 93
1256: PPUSH
1257: LD_INT 21
1259: PPUSH
1260: CALL_OW 118
// end ;
1264: GO 1107
1266: POP
1267: POP
// uc_side := 2 ;
1268: LD_ADDR_OWVAR 20
1272: PUSH
1273: LD_INT 2
1275: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1276: LD_ADDR_EXP 29
1280: PUSH
1281: LD_STRING Heike
1283: PPUSH
1284: LD_EXP 1
1288: NOT
1289: PPUSH
1290: LD_EXP 2
1294: PPUSH
1295: CALL 39795 0 3
1299: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1300: LD_ADDR_EXP 33
1304: PUSH
1305: LD_STRING Aviradze
1307: PPUSH
1308: LD_EXP 1
1312: NOT
1313: PPUSH
1314: LD_EXP 2
1318: PPUSH
1319: CALL 39795 0 3
1323: ST_TO_ADDR
// tmp := [ ] ;
1324: LD_ADDR_VAR 0 4
1328: PUSH
1329: EMPTY
1330: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1331: LD_ADDR_EXP 30
1335: PUSH
1336: LD_STRING Givi
1338: PPUSH
1339: LD_EXP 1
1343: NOT
1344: PPUSH
1345: LD_EXP 2
1349: PPUSH
1350: CALL 39795 0 3
1354: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1355: LD_ADDR_EXP 31
1359: PUSH
1360: LD_STRING Mike
1362: PPUSH
1363: LD_EXP 1
1367: NOT
1368: PPUSH
1369: LD_EXP 2
1373: PPUSH
1374: CALL 39795 0 3
1378: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1379: LD_ADDR_EXP 32
1383: PUSH
1384: LD_STRING Kamil
1386: PPUSH
1387: LD_EXP 1
1391: NOT
1392: PPUSH
1393: LD_EXP 2
1397: PPUSH
1398: CALL 39795 0 3
1402: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1403: LD_ADDR_EXP 34
1407: PUSH
1408: LD_STRING Kaia
1410: PPUSH
1411: LD_EXP 1
1415: NOT
1416: PPUSH
1417: LD_EXP 2
1421: PPUSH
1422: CALL 39795 0 3
1426: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1427: LD_ADDR_EXP 35
1431: PUSH
1432: LD_STRING Sophia
1434: PPUSH
1435: LD_EXP 1
1439: NOT
1440: PPUSH
1441: LD_EXP 2
1445: PPUSH
1446: CALL 39795 0 3
1450: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1451: LD_ADDR_EXP 36
1455: PUSH
1456: LD_STRING Markov
1458: PPUSH
1459: LD_EXP 1
1463: NOT
1464: PPUSH
1465: LD_EXP 2
1469: PPUSH
1470: CALL 39795 0 3
1474: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1475: LD_ADDR_EXP 43
1479: PUSH
1480: LD_STRING 02_others
1482: PPUSH
1483: CALL_OW 31
1487: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1488: LD_ADDR_VAR 0 4
1492: PUSH
1493: LD_EXP 31
1497: PUSH
1498: LD_EXP 32
1502: PUSH
1503: LD_EXP 34
1507: PUSH
1508: LD_EXP 35
1512: PUSH
1513: LD_EXP 36
1517: PUSH
1518: LD_EXP 30
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_EXP 43
1535: ADD
1536: PUSH
1537: LD_INT 0
1539: DIFF
1540: ST_TO_ADDR
// heikeSquad := tmp ;
1541: LD_ADDR_EXP 42
1545: PUSH
1546: LD_VAR 0 4
1550: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1551: LD_EXP 42
1555: PPUSH
1556: LD_INT 25
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PPUSH
1566: CALL_OW 72
1570: PUSH
1571: LD_INT 3
1573: LESS
1574: IFFALSE 1624
// begin SetClass ( Kaia , 1 ) ;
1576: LD_EXP 34
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1588: LD_EXP 31
1592: PPUSH
1593: LD_INT 1
1595: PPUSH
1596: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1600: LD_EXP 30
1604: PPUSH
1605: LD_INT 1
1607: PPUSH
1608: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1612: LD_EXP 29
1616: PPUSH
1617: LD_INT 1
1619: PPUSH
1620: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1624: LD_ADDR_VAR 0 4
1628: PUSH
1629: LD_VAR 0 4
1633: PUSH
1634: LD_STRING 02_ape
1636: PPUSH
1637: CALL_OW 31
1641: UNION
1642: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1643: LD_EXP 29
1647: PPUSH
1648: LD_INT 92
1650: PPUSH
1651: LD_INT 17
1653: PPUSH
1654: LD_INT 0
1656: PPUSH
1657: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1661: LD_EXP 37
1665: PPUSH
1666: LD_INT 95
1668: PPUSH
1669: LD_INT 19
1671: PPUSH
1672: LD_INT 0
1674: PPUSH
1675: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1679: LD_EXP 38
1683: PPUSH
1684: LD_INT 89
1686: PPUSH
1687: LD_INT 25
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1697: LD_EXP 33
1701: PPUSH
1702: LD_INT 92
1704: PPUSH
1705: LD_INT 27
1707: PPUSH
1708: LD_INT 0
1710: PPUSH
1711: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1715: LD_EXP 38
1719: PPUSH
1720: LD_EXP 33
1724: PPUSH
1725: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1729: LD_EXP 33
1733: PPUSH
1734: LD_EXP 38
1738: PPUSH
1739: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1743: LD_EXP 29
1747: PUSH
1748: LD_EXP 37
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PPUSH
1757: LD_EXP 38
1761: PPUSH
1762: CALL_OW 119
// if tmp then
1766: LD_VAR 0 4
1770: IFFALSE 1824
// for i in tmp do
1772: LD_ADDR_VAR 0 2
1776: PUSH
1777: LD_VAR 0 4
1781: PUSH
1782: FOR_IN
1783: IFFALSE 1822
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1785: LD_VAR 0 2
1789: PPUSH
1790: LD_INT 94
1792: PPUSH
1793: LD_INT 14
1795: PPUSH
1796: LD_INT 4
1798: PPUSH
1799: LD_INT 0
1801: PPUSH
1802: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1806: LD_VAR 0 2
1810: PPUSH
1811: LD_EXP 29
1815: PPUSH
1816: CALL_OW 119
// end ;
1820: GO 1782
1822: POP
1823: POP
// farmerSquad := [ ] ;
1824: LD_ADDR_EXP 40
1828: PUSH
1829: EMPTY
1830: ST_TO_ADDR
// uc_side := 5 ;
1831: LD_ADDR_OWVAR 20
1835: PUSH
1836: LD_INT 5
1838: ST_TO_ADDR
// uc_nation := 2 ;
1839: LD_ADDR_OWVAR 21
1843: PUSH
1844: LD_INT 2
1846: ST_TO_ADDR
// for i := 1 to 4 do
1847: LD_ADDR_VAR 0 2
1851: PUSH
1852: DOUBLE
1853: LD_INT 1
1855: DEC
1856: ST_TO_ADDR
1857: LD_INT 4
1859: PUSH
1860: FOR_TO
1861: IFFALSE 1939
// begin PrepareHuman ( false , 1 , 2 ) ;
1863: LD_INT 0
1865: PPUSH
1866: LD_INT 1
1868: PPUSH
1869: LD_INT 2
1871: PPUSH
1872: CALL_OW 380
// un := CreateHuman ;
1876: LD_ADDR_VAR 0 3
1880: PUSH
1881: CALL_OW 44
1885: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1886: LD_VAR 0 3
1890: PPUSH
1891: LD_INT 102
1893: PPUSH
1894: LD_INT 27
1896: PPUSH
1897: LD_INT 4
1899: PPUSH
1900: LD_INT 0
1902: PPUSH
1903: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1907: LD_ADDR_EXP 40
1911: PUSH
1912: LD_EXP 40
1916: PUSH
1917: LD_VAR 0 3
1921: UNION
1922: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1923: LD_VAR 0 3
1927: PPUSH
1928: LD_EXP 38
1932: PPUSH
1933: CALL_OW 119
// end ;
1937: GO 1860
1939: POP
1940: POP
// for i := 1 to 2 do
1941: LD_ADDR_VAR 0 2
1945: PUSH
1946: DOUBLE
1947: LD_INT 1
1949: DEC
1950: ST_TO_ADDR
1951: LD_INT 2
1953: PUSH
1954: FOR_TO
1955: IFFALSE 2033
// begin PrepareHuman ( false , 2 , 2 ) ;
1957: LD_INT 0
1959: PPUSH
1960: LD_INT 2
1962: PPUSH
1963: LD_INT 2
1965: PPUSH
1966: CALL_OW 380
// un := CreateHuman ;
1970: LD_ADDR_VAR 0 3
1974: PUSH
1975: CALL_OW 44
1979: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1980: LD_VAR 0 3
1984: PPUSH
1985: LD_INT 108
1987: PPUSH
1988: LD_INT 62
1990: PPUSH
1991: LD_INT 2
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2001: LD_ADDR_EXP 40
2005: PUSH
2006: LD_EXP 40
2010: PUSH
2011: LD_VAR 0 3
2015: UNION
2016: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2017: LD_VAR 0 3
2021: PPUSH
2022: LD_EXP 38
2026: PPUSH
2027: CALL_OW 119
// end ;
2031: GO 1954
2033: POP
2034: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2035: LD_INT 109
2037: PPUSH
2038: LD_INT 63
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: LD_INT 15
2046: NEG
2047: PPUSH
2048: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2052: LD_INT 109
2054: PPUSH
2055: LD_INT 63
2057: PPUSH
2058: LD_INT 2
2060: PPUSH
2061: CALL_OW 331
// end ;
2065: LD_VAR 0 1
2069: RET
// export function PrepareIbrahim ( x , y ) ; begin
2070: LD_INT 0
2072: PPUSH
// uc_side := 6 ;
2073: LD_ADDR_OWVAR 20
2077: PUSH
2078: LD_INT 6
2080: ST_TO_ADDR
// uc_nation := 3 ;
2081: LD_ADDR_OWVAR 21
2085: PUSH
2086: LD_INT 3
2088: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2089: LD_ADDR_EXP 39
2093: PUSH
2094: LD_STRING IbrahimRu
2096: PPUSH
2097: LD_INT 0
2099: PPUSH
2100: LD_STRING 
2102: PPUSH
2103: CALL 39795 0 3
2107: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2108: LD_EXP 39
2112: PPUSH
2113: LD_VAR 0 1
2117: PPUSH
2118: LD_VAR 0 2
2122: PPUSH
2123: LD_INT 8
2125: PPUSH
2126: LD_INT 1
2128: PPUSH
2129: CALL_OW 50
// end ;
2133: LD_VAR 0 3
2137: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2138: LD_EXP 38
2142: PUSH
2143: LD_EXP 41
2147: ADD
2148: PPUSH
2149: LD_INT 95
2151: PUSH
2152: LD_INT 3
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: PPUSH
2159: CALL_OW 72
2163: IFFALSE 2219
2165: GO 2167
2167: DISABLE
2168: LD_INT 0
2170: PPUSH
// begin enable ;
2171: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2172: LD_ADDR_VAR 0 1
2176: PUSH
2177: LD_EXP 38
2181: PUSH
2182: LD_EXP 41
2186: ADD
2187: PPUSH
2188: LD_INT 95
2190: PUSH
2191: LD_INT 3
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: PPUSH
2198: CALL_OW 72
2202: PUSH
2203: FOR_IN
2204: IFFALSE 2217
// RemoveUnit ( i ) ;
2206: LD_VAR 0 1
2210: PPUSH
2211: CALL_OW 64
2215: GO 2203
2217: POP
2218: POP
// end ;
2219: PPOPN 1
2221: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2222: LD_EXP 3
2226: PUSH
2227: LD_EXP 37
2231: PPUSH
2232: LD_INT 4
2234: PPUSH
2235: CALL_OW 308
2239: AND
2240: IFFALSE 3044
2242: GO 2244
2244: DISABLE
2245: LD_INT 0
2247: PPUSH
2248: PPUSH
2249: PPUSH
2250: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2251: LD_EXP 37
2255: PPUSH
2256: LD_INT 110
2258: PPUSH
2259: LD_INT 60
2261: PPUSH
2262: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2266: LD_EXP 37
2270: PPUSH
2271: LD_INT 110
2273: PPUSH
2274: LD_INT 61
2276: PPUSH
2277: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2281: LD_ADDR_VAR 0 2
2285: PUSH
2286: LD_EXP 40
2290: PPUSH
2291: LD_INT 25
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PPUSH
2301: CALL_OW 72
2305: ST_TO_ADDR
// if tmp then
2306: LD_VAR 0 2
2310: IFFALSE 2404
// begin for i := 1 to 2 do
2312: LD_ADDR_VAR 0 1
2316: PUSH
2317: DOUBLE
2318: LD_INT 1
2320: DEC
2321: ST_TO_ADDR
2322: LD_INT 2
2324: PUSH
2325: FOR_TO
2326: IFFALSE 2402
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2328: LD_VAR 0 2
2332: PUSH
2333: LD_VAR 0 1
2337: ARRAY
2338: PPUSH
2339: LD_INT 5
2341: PPUSH
2342: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2346: LD_VAR 0 2
2350: PUSH
2351: LD_VAR 0 1
2355: ARRAY
2356: PPUSH
2357: LD_INT 2
2359: PPUSH
2360: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2364: LD_VAR 0 2
2368: PUSH
2369: LD_VAR 0 1
2373: ARRAY
2374: PPUSH
2375: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2379: LD_VAR 0 2
2383: PUSH
2384: LD_VAR 0 1
2388: ARRAY
2389: PPUSH
2390: LD_INT 107
2392: PPUSH
2393: LD_INT 66
2395: PPUSH
2396: CALL_OW 171
// end ;
2400: GO 2325
2402: POP
2403: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2404: LD_ADDR_VAR 0 2
2408: PUSH
2409: LD_EXP 40
2413: PPUSH
2414: LD_INT 25
2416: PUSH
2417: LD_INT 2
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PPUSH
2424: CALL_OW 72
2428: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2429: LD_INT 35
2431: PPUSH
2432: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: LD_EXP 40
2445: PPUSH
2446: LD_INT 25
2448: PUSH
2449: LD_INT 2
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 72
2460: ST_TO_ADDR
// until tmp ;
2461: LD_VAR 0 2
2465: IFFALSE 2429
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2467: LD_VAR 0 2
2471: PPUSH
2472: LD_INT 31
2474: PPUSH
2475: LD_INT 102
2477: PPUSH
2478: LD_INT 69
2480: PPUSH
2481: LD_INT 2
2483: PPUSH
2484: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2488: LD_INT 35
2490: PPUSH
2491: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2495: LD_EXP 40
2499: PPUSH
2500: LD_INT 3
2502: PUSH
2503: LD_INT 60
2505: PUSH
2506: EMPTY
2507: LIST
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: PUSH
2513: LD_INT 25
2515: PUSH
2516: LD_INT 2
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PPUSH
2527: CALL_OW 72
2531: IFFALSE 2488
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2533: LD_ADDR_VAR 0 2
2537: PUSH
2538: LD_EXP 40
2542: PPUSH
2543: LD_INT 25
2545: PUSH
2546: LD_INT 2
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PPUSH
2553: CALL_OW 72
2557: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2558: LD_VAR 0 2
2562: PPUSH
2563: LD_INT 6
2565: PPUSH
2566: LD_INT 116
2568: PPUSH
2569: LD_INT 55
2571: PPUSH
2572: LD_INT 4
2574: PPUSH
2575: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 4
2586: PPUSH
2587: LD_INT 116
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: LD_INT 5
2595: PPUSH
2596: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2600: LD_VAR 0 2
2604: PPUSH
2605: LD_INT 31
2607: PPUSH
2608: LD_INT 109
2610: PPUSH
2611: LD_INT 50
2613: PPUSH
2614: LD_INT 2
2616: PPUSH
2617: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2621: LD_INT 35
2623: PPUSH
2624: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2628: LD_INT 22
2630: PUSH
2631: LD_INT 5
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 30
2640: PUSH
2641: LD_INT 4
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 57
2653: PUSH
2654: EMPTY
2655: LIST
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: LIST
2665: PPUSH
2666: CALL_OW 69
2670: IFFALSE 2621
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2672: LD_ADDR_VAR 0 3
2676: PUSH
2677: LD_INT 22
2679: PUSH
2680: LD_INT 5
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_INT 30
2689: PUSH
2690: LD_INT 4
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_INT 3
2699: PUSH
2700: LD_INT 57
2702: PUSH
2703: EMPTY
2704: LIST
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: LIST
2714: PPUSH
2715: CALL_OW 69
2719: PUSH
2720: LD_INT 1
2722: ARRAY
2723: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2724: LD_ADDR_VAR 0 2
2728: PUSH
2729: LD_EXP 40
2733: PPUSH
2734: LD_INT 25
2736: PUSH
2737: LD_INT 1
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PPUSH
2744: CALL_OW 72
2748: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2749: LD_VAR 0 2
2753: PPUSH
2754: LD_VAR 0 3
2758: PPUSH
2759: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2763: LD_INT 35
2765: PPUSH
2766: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2770: LD_INT 22
2772: PUSH
2773: LD_INT 5
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: LD_INT 30
2782: PUSH
2783: LD_INT 31
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PUSH
2790: LD_INT 3
2792: PUSH
2793: LD_INT 57
2795: PUSH
2796: EMPTY
2797: LIST
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: PPUSH
2808: CALL_OW 69
2812: PUSH
2813: LD_INT 2
2815: GREATEREQUAL
2816: IFFALSE 2763
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2818: LD_ADDR_VAR 0 2
2822: PUSH
2823: LD_EXP 40
2827: PPUSH
2828: LD_INT 25
2830: PUSH
2831: LD_INT 2
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 72
2842: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2843: LD_VAR 0 2
2847: PUSH
2848: LD_INT 1
2850: ARRAY
2851: PPUSH
2852: LD_INT 5
2854: PPUSH
2855: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2859: LD_VAR 0 2
2863: PUSH
2864: LD_INT 2
2866: ARRAY
2867: PUSH
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 3
2875: ARRAY
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PPUSH
2881: LD_VAR 0 3
2885: PPUSH
2886: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2890: LD_VAR 0 2
2894: PUSH
2895: LD_INT 2
2897: ARRAY
2898: PUSH
2899: LD_VAR 0 2
2903: PUSH
2904: LD_INT 3
2906: ARRAY
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PPUSH
2912: LD_INT 1
2914: PPUSH
2915: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2919: LD_VAR 0 2
2923: PUSH
2924: LD_INT 2
2926: ARRAY
2927: PUSH
2928: LD_VAR 0 2
2932: PUSH
2933: LD_INT 3
2935: ARRAY
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2945: LD_ADDR_VAR 0 4
2949: PUSH
2950: LD_INT 22
2952: PUSH
2953: LD_INT 5
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: PUSH
2960: LD_INT 30
2962: PUSH
2963: LD_INT 31
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PPUSH
2974: CALL_OW 69
2978: ST_TO_ADDR
// for i := 1 to 2 do
2979: LD_ADDR_VAR 0 1
2983: PUSH
2984: DOUBLE
2985: LD_INT 1
2987: DEC
2988: ST_TO_ADDR
2989: LD_INT 2
2991: PUSH
2992: FOR_TO
2993: IFFALSE 3027
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
2995: LD_VAR 0 2
2999: PUSH
3000: LD_VAR 0 1
3004: PUSH
3005: LD_INT 1
3007: PLUS
3008: ARRAY
3009: PPUSH
3010: LD_VAR 0 4
3014: PUSH
3015: LD_VAR 0 1
3019: ARRAY
3020: PPUSH
3021: CALL_OW 180
3025: GO 2992
3027: POP
3028: POP
// wait ( 1 1$00 ) ;
3029: LD_INT 2100
3031: PPUSH
3032: CALL_OW 67
// farmerBaseReady := true ;
3036: LD_ADDR_EXP 4
3040: PUSH
3041: LD_INT 1
3043: ST_TO_ADDR
// end ;
3044: PPOPN 4
3046: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3047: LD_EXP 4
3051: PUSH
3052: LD_EXP 12
3056: NOT
3057: AND
3058: IFFALSE 3580
3060: GO 3062
3062: DISABLE
3063: LD_INT 0
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
// begin enable ;
3070: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3071: LD_ADDR_VAR 0 3
3075: PUSH
3076: LD_EXP 40
3080: PPUSH
3081: LD_INT 25
3083: PUSH
3084: LD_INT 1
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PPUSH
3091: CALL_OW 72
3095: PUSH
3096: LD_EXP 37
3100: ADD
3101: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3102: LD_ADDR_VAR 0 2
3106: PUSH
3107: LD_EXP 40
3111: PPUSH
3112: LD_INT 25
3114: PUSH
3115: LD_INT 2
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: PPUSH
3122: CALL_OW 72
3126: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3127: LD_ADDR_VAR 0 5
3131: PUSH
3132: LD_INT 22
3134: PUSH
3135: LD_INT 5
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PUSH
3142: LD_INT 21
3144: PUSH
3145: LD_INT 3
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 3
3154: PUSH
3155: LD_INT 24
3157: PUSH
3158: LD_INT 1000
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: LIST
3173: PPUSH
3174: CALL_OW 69
3178: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3179: LD_ADDR_VAR 0 4
3183: PUSH
3184: LD_INT 22
3186: PUSH
3187: LD_INT 5
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PUSH
3194: LD_INT 30
3196: PUSH
3197: LD_INT 4
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PPUSH
3208: CALL_OW 69
3212: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3213: LD_VAR 0 4
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: CALL_OW 302
3226: IFFALSE 3290
// for i in sol do
3228: LD_ADDR_VAR 0 1
3232: PUSH
3233: LD_VAR 0 3
3237: PUSH
3238: FOR_IN
3239: IFFALSE 3288
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3241: LD_VAR 0 1
3245: PPUSH
3246: CALL_OW 256
3250: PUSH
3251: LD_INT 999
3253: LESS
3254: PUSH
3255: LD_VAR 0 1
3259: PPUSH
3260: CALL_OW 310
3264: NOT
3265: AND
3266: IFFALSE 3286
// ComEnterUnit ( i , arm [ 1 ] ) ;
3268: LD_VAR 0 1
3272: PPUSH
3273: LD_VAR 0 4
3277: PUSH
3278: LD_INT 1
3280: ARRAY
3281: PPUSH
3282: CALL_OW 120
3286: GO 3238
3288: POP
3289: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3290: LD_VAR 0 2
3294: NOT
3295: PUSH
3296: LD_INT 22
3298: PUSH
3299: LD_INT 1
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PUSH
3306: LD_INT 21
3308: PUSH
3309: LD_INT 1
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PPUSH
3320: CALL_OW 69
3324: NOT
3325: AND
3326: IFFALSE 3418
// begin uc_side := 5 ;
3328: LD_ADDR_OWVAR 20
3332: PUSH
3333: LD_INT 5
3335: ST_TO_ADDR
// uc_nation := 2 ;
3336: LD_ADDR_OWVAR 21
3340: PUSH
3341: LD_INT 2
3343: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3344: LD_INT 0
3346: PPUSH
3347: LD_INT 2
3349: PPUSH
3350: LD_INT 2
3352: PPUSH
3353: CALL_OW 380
// eng := CreateHuman ;
3357: LD_ADDR_VAR 0 2
3361: PUSH
3362: CALL_OW 44
3366: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3367: LD_VAR 0 2
3371: PPUSH
3372: LD_INT 102
3374: PPUSH
3375: LD_INT 8
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3385: LD_VAR 0 2
3389: PPUSH
3390: LD_INT 110
3392: PPUSH
3393: LD_INT 60
3395: PPUSH
3396: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3400: LD_ADDR_EXP 40
3404: PUSH
3405: LD_EXP 40
3409: PUSH
3410: LD_VAR 0 2
3414: UNION
3415: ST_TO_ADDR
// end else
3416: GO 3580
// begin for i in eng do
3418: LD_ADDR_VAR 0 1
3422: PUSH
3423: LD_VAR 0 2
3427: PUSH
3428: FOR_IN
3429: IFFALSE 3578
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3431: LD_INT 10
3433: PPUSH
3434: LD_INT 1
3436: PPUSH
3437: CALL_OW 287
3441: IFFALSE 3492
// begin if IsInUnit ( i ) then
3443: LD_VAR 0 1
3447: PPUSH
3448: CALL_OW 310
3452: IFFALSE 3463
// ComExitBuilding ( i ) ;
3454: LD_VAR 0 1
3458: PPUSH
3459: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3463: LD_VAR 0 1
3467: PPUSH
3468: LD_INT 10
3470: PPUSH
3471: CALL_OW 308
3475: NOT
3476: IFFALSE 3490
// AddComMoveToArea ( i , collectFarmerArea ) ;
3478: LD_VAR 0 1
3482: PPUSH
3483: LD_INT 10
3485: PPUSH
3486: CALL_OW 173
// end else
3490: GO 3576
// begin if damagedBuilding then
3492: LD_VAR 0 5
3496: IFFALSE 3540
// begin if IsInUnit ( i ) then
3498: LD_VAR 0 1
3502: PPUSH
3503: CALL_OW 310
3507: IFFALSE 3520
// ComExitBuilding ( i ) else
3509: LD_VAR 0 1
3513: PPUSH
3514: CALL_OW 122
3518: GO 3538
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3520: LD_VAR 0 1
3524: PPUSH
3525: LD_VAR 0 5
3529: PUSH
3530: LD_INT 1
3532: ARRAY
3533: PPUSH
3534: CALL_OW 130
// end else
3538: GO 3576
// if not IsInUnit ( i ) and not HasTask ( i ) then
3540: LD_VAR 0 1
3544: PPUSH
3545: CALL_OW 310
3549: NOT
3550: PUSH
3551: LD_VAR 0 1
3555: PPUSH
3556: CALL_OW 314
3560: NOT
3561: AND
3562: IFFALSE 3576
// ComEnterUnit ( i , arDepot ) ;
3564: LD_VAR 0 1
3568: PPUSH
3569: LD_INT 5
3571: PPUSH
3572: CALL_OW 120
// end ; end ;
3576: GO 3428
3578: POP
3579: POP
// end ; end ;
3580: PPOPN 5
3582: END
// export function CargoEvacuation ; begin
3583: LD_INT 0
3585: PPUSH
// wait ( 0 0$3 ) ;
3586: LD_INT 105
3588: PPUSH
3589: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3593: LD_ADDR_EXP 22
3597: PUSH
3598: LD_EXP 22
3602: PUSH
3603: LD_INT 1
3605: MINUS
3606: ST_TO_ADDR
// if omarCargoCounter = 0 then
3607: LD_EXP 22
3611: PUSH
3612: LD_INT 0
3614: EQUAL
3615: IFFALSE 3619
// exit ;
3617: GO 3926
// if omarCargo then
3619: LD_EXP 44
3623: IFFALSE 3634
// RemoveUnit ( omarCargo ) ;
3625: LD_EXP 44
3629: PPUSH
3630: CALL_OW 64
// omarCargo := PrepareCargo ;
3634: LD_ADDR_EXP 44
3638: PUSH
3639: CALL 3931 0 0
3643: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3644: LD_EXP 44
3648: PPUSH
3649: LD_INT 0
3651: PPUSH
3652: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3656: LD_EXP 44
3660: PPUSH
3661: LD_INT 107
3663: PPUSH
3664: LD_INT 59
3666: PPUSH
3667: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3671: LD_INT 35
3673: PPUSH
3674: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3678: LD_EXP 44
3682: PPUSH
3683: LD_INT 107
3685: PPUSH
3686: LD_INT 59
3688: PPUSH
3689: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3693: LD_EXP 44
3697: PPUSH
3698: CALL_OW 302
3702: NOT
3703: PUSH
3704: LD_EXP 44
3708: PPUSH
3709: CALL_OW 301
3713: OR
3714: IFFALSE 3718
// exit ;
3716: GO 3926
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3718: LD_EXP 44
3722: PPUSH
3723: LD_INT 107
3725: PPUSH
3726: LD_INT 59
3728: PPUSH
3729: CALL_OW 307
3733: PUSH
3734: LD_EXP 44
3738: PPUSH
3739: LD_INT 5
3741: PPUSH
3742: CALL_OW 296
3746: PUSH
3747: LD_INT 6
3749: LESS
3750: OR
3751: IFFALSE 3671
// SetTag ( omarCargo , 1 ) ;
3753: LD_EXP 44
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: CALL_OW 109
// wait ( 0 0$03 ) ;
3765: LD_INT 105
3767: PPUSH
3768: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3772: LD_EXP 44
3776: PPUSH
3777: LD_INT 5
3779: PPUSH
3780: LD_INT 1
3782: PPUSH
3783: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3787: LD_EXP 44
3791: PPUSH
3792: LD_INT 103
3794: PPUSH
3795: LD_INT 9
3797: PPUSH
3798: CALL_OW 171
// wait ( 0 0$1 ) ;
3802: LD_INT 35
3804: PPUSH
3805: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3809: LD_EXP 44
3813: PPUSH
3814: LD_INT 1
3816: PPUSH
3817: LD_INT 100
3819: PPUSH
3820: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3824: LD_INT 35
3826: PPUSH
3827: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3831: LD_EXP 44
3835: PPUSH
3836: LD_INT 103
3838: PPUSH
3839: LD_INT 9
3841: PPUSH
3842: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3846: LD_EXP 44
3850: PPUSH
3851: CALL_OW 302
3855: NOT
3856: PUSH
3857: LD_EXP 44
3861: PPUSH
3862: CALL_OW 301
3866: OR
3867: IFFALSE 3871
// exit ;
3869: GO 3926
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3871: LD_EXP 44
3875: PPUSH
3876: LD_INT 103
3878: PPUSH
3879: LD_INT 9
3881: PPUSH
3882: CALL_OW 307
3886: PUSH
3887: LD_EXP 44
3891: PPUSH
3892: LD_INT 3
3894: PPUSH
3895: CALL_OW 308
3899: OR
3900: PUSH
3901: LD_EXP 44
3905: PPUSH
3906: CALL_OW 110
3910: PUSH
3911: LD_INT 0
3913: GREATER
3914: AND
3915: IFFALSE 3824
// RemoveUnit ( omarCargo ) ;
3917: LD_EXP 44
3921: PPUSH
3922: CALL_OW 64
// end ;
3926: LD_VAR 0 1
3930: RET
// export function PrepareCargo ; var un , veh ; begin
3931: LD_INT 0
3933: PPUSH
3934: PPUSH
3935: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_INT 5
3943: PPUSH
3944: LD_INT 2
3946: PPUSH
3947: LD_INT 14
3949: PPUSH
3950: LD_INT 1
3952: PPUSH
3953: LD_INT 1
3955: PPUSH
3956: LD_INT 32
3958: PPUSH
3959: LD_INT 80
3961: PPUSH
3962: CALL 333 0 7
3966: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3967: LD_VAR 0 3
3971: PPUSH
3972: LD_INT 4
3974: PPUSH
3975: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3979: LD_VAR 0 3
3983: PPUSH
3984: LD_INT 101
3986: PPUSH
3987: LD_INT 8
3989: PPUSH
3990: LD_INT 0
3992: PPUSH
3993: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
3997: LD_INT 0
3999: PPUSH
4000: LD_INT 3
4002: PPUSH
4003: LD_INT 4
4005: PPUSH
4006: CALL_OW 380
// un := CreateHuman ;
4010: LD_ADDR_VAR 0 2
4014: PUSH
4015: CALL_OW 44
4019: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4020: LD_VAR 0 2
4024: PPUSH
4025: LD_VAR 0 3
4029: PPUSH
4030: CALL_OW 52
// result := veh ;
4034: LD_ADDR_VAR 0 1
4038: PUSH
4039: LD_VAR 0 3
4043: ST_TO_ADDR
// end ; end_of_file
4044: LD_VAR 0 1
4048: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4049: LD_INT 0
4051: PPUSH
4052: PPUSH
4053: PPUSH
// usForces := [ ] ;
4054: LD_ADDR_EXP 45
4058: PUSH
4059: EMPTY
4060: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4061: LD_ADDR_EXP 47
4065: PUSH
4066: LD_INT 6
4068: PUSH
4069: LD_INT 32
4071: PUSH
4072: LD_INT 27
4074: PUSH
4075: LD_INT 1
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_INT 4
4086: PUSH
4087: LD_INT 43
4089: PUSH
4090: LD_INT 24
4092: PUSH
4093: LD_INT 5
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 27
4104: PUSH
4105: LD_INT 29
4107: PUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 0
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4125: LD_INT 11
4127: PPUSH
4128: CALL_OW 274
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 150
4138: PUSH
4139: LD_INT 120
4141: PUSH
4142: LD_INT 100
4144: PUSH
4145: LD_INT 80
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: PUSH
4154: LD_OWVAR 67
4158: ARRAY
4159: PPUSH
4160: CALL_OW 277
// if Difficulty = 1 then
4164: LD_OWVAR 67
4168: PUSH
4169: LD_INT 1
4171: EQUAL
4172: IFFALSE 4181
// RemoveUnit ( hillBun ) ;
4174: LD_INT 14
4176: PPUSH
4177: CALL_OW 64
// uc_side := 1 ;
4181: LD_ADDR_OWVAR 20
4185: PUSH
4186: LD_INT 1
4188: ST_TO_ADDR
// uc_nation := 1 ;
4189: LD_ADDR_OWVAR 21
4193: PUSH
4194: LD_INT 1
4196: ST_TO_ADDR
// hc_gallery :=  ;
4197: LD_ADDR_OWVAR 33
4201: PUSH
4202: LD_STRING 
4204: ST_TO_ADDR
// hc_name :=  ;
4205: LD_ADDR_OWVAR 26
4209: PUSH
4210: LD_STRING 
4212: ST_TO_ADDR
// hc_importance := 0 ;
4213: LD_ADDR_OWVAR 32
4217: PUSH
4218: LD_INT 0
4220: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4221: LD_INT 1
4223: PPUSH
4224: LD_INT 1
4226: PPUSH
4227: LD_INT 3
4229: PPUSH
4230: CALL_OW 380
// usCommander := CreateHuman ;
4234: LD_ADDR_EXP 46
4238: PUSH
4239: CALL_OW 44
4243: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4244: LD_EXP 46
4248: PPUSH
4249: LD_INT 11
4251: PPUSH
4252: CALL_OW 52
// if Difficulty > 1 then
4256: LD_OWVAR 67
4260: PUSH
4261: LD_INT 1
4263: GREATER
4264: IFFALSE 4346
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4266: LD_INT 0
4268: PPUSH
4269: LD_INT 1
4271: PPUSH
4272: LD_INT 1
4274: PUSH
4275: LD_INT 2
4277: PUSH
4278: LD_INT 3
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: PUSH
4286: LD_OWVAR 67
4290: ARRAY
4291: PPUSH
4292: CALL_OW 380
// un := CreateHuman ;
4296: LD_ADDR_VAR 0 3
4300: PUSH
4301: CALL_OW 44
4305: ST_TO_ADDR
// usForces := usForces union un ;
4306: LD_ADDR_EXP 45
4310: PUSH
4311: LD_EXP 45
4315: PUSH
4316: LD_VAR 0 3
4320: UNION
4321: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4322: LD_VAR 0 3
4326: PPUSH
4327: LD_INT 1
4329: PPUSH
4330: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4334: LD_VAR 0 3
4338: PPUSH
4339: LD_INT 14
4341: PPUSH
4342: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4346: LD_ADDR_VAR 0 2
4350: PUSH
4351: DOUBLE
4352: LD_INT 1
4354: DEC
4355: ST_TO_ADDR
4356: LD_INT 2
4358: PUSH
4359: LD_INT 3
4361: PUSH
4362: LD_INT 4
4364: PUSH
4365: LD_INT 4
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: PUSH
4374: LD_OWVAR 67
4378: ARRAY
4379: PUSH
4380: FOR_TO
4381: IFFALSE 4527
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4383: LD_INT 0
4385: PPUSH
4386: LD_INT 1
4388: PPUSH
4389: LD_INT 1
4391: PUSH
4392: LD_INT 2
4394: PUSH
4395: LD_INT 3
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: PUSH
4407: LD_OWVAR 67
4411: ARRAY
4412: PPUSH
4413: CALL_OW 380
// un := CreateHuman ;
4417: LD_ADDR_VAR 0 3
4421: PUSH
4422: CALL_OW 44
4426: ST_TO_ADDR
// usForces := usForces union un ;
4427: LD_ADDR_EXP 45
4431: PUSH
4432: LD_EXP 45
4436: PUSH
4437: LD_VAR 0 3
4441: UNION
4442: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_INT 39
4450: PPUSH
4451: LD_INT 24
4453: PPUSH
4454: LD_INT 4
4456: PPUSH
4457: LD_INT 0
4459: PPUSH
4460: CALL_OW 50
// if i < 3 then
4464: LD_VAR 0 2
4468: PUSH
4469: LD_INT 3
4471: LESS
4472: IFFALSE 4525
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4474: LD_VAR 0 3
4478: PPUSH
4479: LD_INT 22
4481: PUSH
4482: LD_INT 1
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PUSH
4489: LD_INT 58
4491: PUSH
4492: EMPTY
4493: LIST
4494: PUSH
4495: LD_INT 30
4497: PUSH
4498: LD_INT 31
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_VAR 0 2
4519: ARRAY
4520: PPUSH
4521: CALL_OW 120
// end ;
4525: GO 4380
4527: POP
4528: POP
// for i := 1 to 2 do
4529: LD_ADDR_VAR 0 2
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4607
// begin PrepareHuman ( false , 2 , 2 ) ;
4545: LD_INT 0
4547: PPUSH
4548: LD_INT 2
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: CALL_OW 380
// un := CreateHuman ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: CALL_OW 44
4567: ST_TO_ADDR
// usForces := usForces union un ;
4568: LD_ADDR_EXP 45
4572: PUSH
4573: LD_EXP 45
4577: PUSH
4578: LD_VAR 0 3
4582: UNION
4583: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4584: LD_VAR 0 3
4588: PPUSH
4589: LD_INT 39
4591: PPUSH
4592: LD_INT 24
4594: PPUSH
4595: LD_INT 4
4597: PPUSH
4598: LD_INT 0
4600: PPUSH
4601: CALL_OW 50
// end ;
4605: GO 4542
4607: POP
4608: POP
// PrepareHuman ( false , 4 , 1 ) ;
4609: LD_INT 0
4611: PPUSH
4612: LD_INT 4
4614: PPUSH
4615: LD_INT 1
4617: PPUSH
4618: CALL_OW 380
// un := CreateHuman ;
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: CALL_OW 44
4631: ST_TO_ADDR
// usForces := usForces union un ;
4632: LD_ADDR_EXP 45
4636: PUSH
4637: LD_EXP 45
4641: PUSH
4642: LD_VAR 0 3
4646: UNION
4647: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4648: LD_VAR 0 3
4652: PPUSH
4653: LD_INT 39
4655: PPUSH
4656: LD_INT 24
4658: PPUSH
4659: LD_INT 4
4661: PPUSH
4662: LD_INT 0
4664: PPUSH
4665: CALL_OW 50
// end ;
4669: LD_VAR 0 1
4673: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4674: LD_EXP 45
4678: PUSH
4679: LD_EXP 7
4683: NOT
4684: AND
4685: PUSH
4686: LD_EXP 15
4690: NOT
4691: AND
4692: IFFALSE 5123
4694: GO 4696
4696: DISABLE
4697: LD_INT 0
4699: PPUSH
4700: PPUSH
4701: PPUSH
4702: PPUSH
4703: PPUSH
// begin enable ;
4704: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4705: LD_ADDR_VAR 0 3
4709: PUSH
4710: LD_EXP 45
4714: PPUSH
4715: LD_INT 25
4717: PUSH
4718: LD_INT 2
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PPUSH
4725: CALL_OW 72
4729: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4730: LD_ADDR_VAR 0 4
4734: PUSH
4735: LD_EXP 45
4739: PPUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 1
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 72
4754: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4755: LD_ADDR_VAR 0 5
4759: PUSH
4760: LD_EXP 45
4764: PPUSH
4765: LD_INT 25
4767: PUSH
4768: LD_INT 4
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PPUSH
4775: CALL_OW 72
4779: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4780: LD_INT 7
4782: PPUSH
4783: LD_INT 22
4785: PUSH
4786: LD_INT 2
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PPUSH
4793: CALL_OW 70
4797: PUSH
4798: LD_INT 1
4800: EQUAL
4801: IFFALSE 4877
// for i in sol do
4803: LD_ADDR_VAR 0 1
4807: PUSH
4808: LD_VAR 0 4
4812: PUSH
4813: FOR_IN
4814: IFFALSE 4875
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4816: LD_VAR 0 1
4820: PPUSH
4821: CALL_OW 310
4825: NOT
4826: PUSH
4827: LD_VAR 0 1
4831: PPUSH
4832: CALL_OW 310
4836: PPUSH
4837: CALL_OW 266
4841: PUSH
4842: LD_INT 4
4844: EQUAL
4845: NOT
4846: OR
4847: IFFALSE 4873
// begin ComExitBuilding ( i ) ;
4849: LD_VAR 0 1
4853: PPUSH
4854: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4858: LD_VAR 0 1
4862: PPUSH
4863: LD_INT 37
4865: PPUSH
4866: LD_INT 23
4868: PPUSH
4869: CALL_OW 174
// end ;
4873: GO 4813
4875: POP
4876: POP
// if eng then
4877: LD_VAR 0 3
4881: IFFALSE 5123
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4883: LD_ADDR_VAR 0 2
4887: PUSH
4888: LD_INT 22
4890: PUSH
4891: LD_INT 1
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 95
4900: PUSH
4901: LD_INT 7
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 3
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 3
4920: PUSH
4921: LD_INT 24
4923: PUSH
4924: LD_INT 1000
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 69
4945: ST_TO_ADDR
// if b then
4946: LD_VAR 0 2
4950: IFFALSE 4981
// begin ComExitBuilding ( eng ) ;
4952: LD_VAR 0 3
4956: PPUSH
4957: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4961: LD_VAR 0 3
4965: PPUSH
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 1
4973: ARRAY
4974: PPUSH
4975: CALL_OW 190
// end else
4979: GO 5123
// begin for i in eng do
4981: LD_ADDR_VAR 0 1
4985: PUSH
4986: LD_VAR 0 3
4990: PUSH
4991: FOR_IN
4992: IFFALSE 5121
// if not HasTask ( i ) then
4994: LD_VAR 0 1
4998: PPUSH
4999: CALL_OW 314
5003: NOT
5004: IFFALSE 5119
// begin if americanBuildList then
5006: LD_EXP 47
5010: IFFALSE 5095
// begin if IsInUnit ( i ) then
5012: LD_VAR 0 1
5016: PPUSH
5017: CALL_OW 310
5021: IFFALSE 5032
// ComExitBuilding ( i ) ;
5023: LD_VAR 0 1
5027: PPUSH
5028: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5032: LD_VAR 0 1
5036: PPUSH
5037: LD_EXP 47
5041: PUSH
5042: LD_INT 1
5044: ARRAY
5045: PUSH
5046: LD_INT 1
5048: ARRAY
5049: PPUSH
5050: LD_EXP 47
5054: PUSH
5055: LD_INT 1
5057: ARRAY
5058: PUSH
5059: LD_INT 2
5061: ARRAY
5062: PPUSH
5063: LD_EXP 47
5067: PUSH
5068: LD_INT 1
5070: ARRAY
5071: PUSH
5072: LD_INT 3
5074: ARRAY
5075: PPUSH
5076: LD_EXP 47
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PUSH
5085: LD_INT 4
5087: ARRAY
5088: PPUSH
5089: CALL_OW 205
// end else
5093: GO 5119
// if not IsInUnit ( i ) then
5095: LD_VAR 0 1
5099: PPUSH
5100: CALL_OW 310
5104: NOT
5105: IFFALSE 5119
// ComEnterUnit ( i , usDepot ) ;
5107: LD_VAR 0 1
5111: PPUSH
5112: LD_INT 11
5114: PPUSH
5115: CALL_OW 120
// end ;
5119: GO 4991
5121: POP
5122: POP
// end ; end ; end ;
5123: PPOPN 5
5125: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5126: LD_INT 0
5128: PPUSH
5129: PPUSH
5130: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5131: LD_ADDR_VAR 0 3
5135: PUSH
5136: LD_INT 35
5138: PUSH
5139: LD_INT 45
5141: PUSH
5142: LD_INT 48
5144: PUSH
5145: LD_INT 82
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: ST_TO_ADDR
// for i in tech do
5154: LD_ADDR_VAR 0 4
5158: PUSH
5159: LD_VAR 0 3
5163: PUSH
5164: FOR_IN
5165: IFFALSE 5183
// AddComResearch ( lab , i ) ;
5167: LD_VAR 0 1
5171: PPUSH
5172: LD_VAR 0 4
5176: PPUSH
5177: CALL_OW 184
5181: GO 5164
5183: POP
5184: POP
// end ;
5185: LD_VAR 0 2
5189: RET
// every 4 4$00 + 4 4$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5190: LD_EXP 13
5194: PUSH
5195: LD_EXP 24
5199: PUSH
5200: LD_EXP 28
5204: LESSEQUAL
5205: AND
5206: IFFALSE 5231
5208: GO 5210
5210: DISABLE
// begin enable ;
5211: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5212: LD_INT 35
5214: PPUSH
5215: LD_INT 2065
5217: PPUSH
5218: CALL_OW 12
5222: PPUSH
5223: CALL_OW 67
// SendConvoy ;
5227: CALL 5337 0 0
// end ;
5231: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5232: LD_EXP 7
5236: PUSH
5237: LD_EXP 19
5241: AND
5242: IFFALSE 5336
5244: GO 5246
5246: DISABLE
// begin if americanHasEscaped then
5247: LD_EXP 9
5251: IFFALSE 5262
// wait ( 3 3$20 ) else
5253: LD_INT 7000
5255: PPUSH
5256: CALL_OW 67
5260: GO 5269
// wait ( 6 6$40 ) ;
5262: LD_INT 14000
5264: PPUSH
5265: CALL_OW 67
// SendAttack ;
5269: CALL 6110 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 5 5$20 , 4 4$50 ] [ Difficulty ] ) ;
5273: LD_INT 14000
5275: PUSH
5276: LD_INT 11900
5278: PUSH
5279: LD_INT 11200
5281: PUSH
5282: LD_INT 10150
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: PUSH
5291: LD_OWVAR 67
5295: ARRAY
5296: PPUSH
5297: CALL_OW 67
// SendAttack ;
5301: CALL 6110 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5305: LD_EXP 20
5309: PUSH
5310: LD_INT 5
5312: PUSH
5313: LD_INT 6
5315: PUSH
5316: LD_INT 7
5318: PUSH
5319: LD_INT 8
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: PUSH
5328: LD_OWVAR 67
5332: ARRAY
5333: LESS
5334: IFFALSE 5273
// end ;
5336: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5337: LD_INT 0
5339: PPUSH
5340: PPUSH
5341: PPUSH
5342: PPUSH
5343: PPUSH
5344: PPUSH
5345: PPUSH
5346: PPUSH
// road := rand ( 1 , 2 ) ;
5347: LD_ADDR_VAR 0 4
5351: PUSH
5352: LD_INT 1
5354: PPUSH
5355: LD_INT 2
5357: PPUSH
5358: CALL_OW 12
5362: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5363: LD_ADDR_VAR 0 8
5367: PUSH
5368: LD_INT 3
5370: PUSH
5371: LD_INT 8
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: LD_VAR 0 4
5382: ARRAY
5383: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5384: LD_ADDR_VAR 0 5
5388: PUSH
5389: LD_INT 35
5391: PUSH
5392: LD_INT 66
5394: PUSH
5395: LD_INT 1
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: LIST
5402: PUSH
5403: LD_INT 101
5405: PUSH
5406: LD_INT 8
5408: PUSH
5409: LD_INT 4
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5421: LD_ADDR_VAR 0 6
5425: PUSH
5426: LD_INT 34
5428: PUSH
5429: LD_INT 67
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 38
5438: PUSH
5439: LD_INT 62
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 43
5448: PUSH
5449: LD_INT 54
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 57
5458: PUSH
5459: LD_INT 57
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 77
5468: PUSH
5469: LD_INT 71
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 86
5478: PUSH
5479: LD_INT 60
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 89
5488: PUSH
5489: LD_INT 35
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: LD_INT 93
5498: PUSH
5499: LD_INT 17
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 97
5508: PUSH
5509: LD_INT 10
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 103
5518: PUSH
5519: LD_INT 9
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: ST_TO_ADDR
// if road = 2 then
5538: LD_VAR 0 4
5542: PUSH
5543: LD_INT 2
5545: EQUAL
5546: IFFALSE 5563
// points := ReverseArray ( points ) ;
5548: LD_ADDR_VAR 0 6
5552: PUSH
5553: LD_VAR 0 6
5557: PPUSH
5558: CALL 72551 0 1
5562: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5563: LD_INT 4
5565: PPUSH
5566: LD_INT 1
5568: PPUSH
5569: LD_INT 2
5571: PPUSH
5572: LD_INT 1
5574: PPUSH
5575: LD_INT 1
5577: PPUSH
5578: LD_INT 12
5580: PPUSH
5581: LD_INT 80
5583: PPUSH
5584: CALL 333 0 7
// veh := CreateVehicle ;
5588: LD_ADDR_VAR 0 3
5592: PUSH
5593: CALL_OW 45
5597: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5598: LD_VAR 0 3
5602: PPUSH
5603: LD_VAR 0 5
5607: PUSH
5608: LD_VAR 0 4
5612: ARRAY
5613: PUSH
5614: LD_INT 3
5616: ARRAY
5617: PPUSH
5618: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5622: LD_VAR 0 3
5626: PPUSH
5627: LD_VAR 0 5
5631: PUSH
5632: LD_VAR 0 4
5636: ARRAY
5637: PUSH
5638: LD_INT 1
5640: ARRAY
5641: PPUSH
5642: LD_VAR 0 5
5646: PUSH
5647: LD_VAR 0 4
5651: ARRAY
5652: PUSH
5653: LD_INT 2
5655: ARRAY
5656: PPUSH
5657: LD_INT 0
5659: PPUSH
5660: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5664: LD_INT 0
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_OWVAR 67
5674: PPUSH
5675: CALL_OW 380
// un := CreateHuman ;
5679: LD_ADDR_VAR 0 2
5683: PUSH
5684: CALL_OW 44
5688: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5689: LD_VAR 0 2
5693: PPUSH
5694: LD_VAR 0 3
5698: PPUSH
5699: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5703: LD_INT 70
5705: PUSH
5706: LD_INT 66
5708: PUSH
5709: LD_INT 62
5711: PUSH
5712: LD_INT 58
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: PUSH
5721: LD_OWVAR 67
5725: ARRAY
5726: PPUSH
5727: CALL_OW 13
5731: PUSH
5732: LD_OWVAR 1
5736: PUSH
5737: LD_INT 30
5739: MOD
5740: PLUS
5741: PUSH
5742: LD_EXP 24
5746: PUSH
5747: LD_INT 4
5749: LESS
5750: OR
5751: IFFALSE 5768
// SetCargo ( veh , mat_cans , 100 ) ;
5753: LD_VAR 0 3
5757: PPUSH
5758: LD_INT 1
5760: PPUSH
5761: LD_INT 100
5763: PPUSH
5764: CALL_OW 290
// for i := 2 to points do
5768: LD_ADDR_VAR 0 7
5772: PUSH
5773: DOUBLE
5774: LD_INT 2
5776: DEC
5777: ST_TO_ADDR
5778: LD_VAR 0 6
5782: PUSH
5783: FOR_TO
5784: IFFALSE 5827
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5786: LD_VAR 0 3
5790: PPUSH
5791: LD_VAR 0 6
5795: PUSH
5796: LD_VAR 0 7
5800: ARRAY
5801: PUSH
5802: LD_INT 1
5804: ARRAY
5805: PPUSH
5806: LD_VAR 0 6
5810: PUSH
5811: LD_VAR 0 7
5815: ARRAY
5816: PUSH
5817: LD_INT 2
5819: ARRAY
5820: PPUSH
5821: CALL_OW 171
5825: GO 5783
5827: POP
5828: POP
// convoyCounter := convoyCounter + 1 ;
5829: LD_ADDR_EXP 24
5833: PUSH
5834: LD_EXP 24
5838: PUSH
5839: LD_INT 1
5841: PLUS
5842: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5843: LD_INT 35
5845: PPUSH
5846: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5850: LD_VAR 0 3
5854: PPUSH
5855: CALL_OW 255
5859: PUSH
5860: LD_INT 4
5862: NONEQUAL
5863: IFFALSE 5876
// begin ComStop ( veh ) ;
5865: LD_VAR 0 3
5869: PPUSH
5870: CALL_OW 141
// exit ;
5874: GO 6105
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5876: LD_VAR 0 3
5880: PPUSH
5881: CALL_OW 314
5885: NOT
5886: PUSH
5887: LD_VAR 0 3
5891: PPUSH
5892: CALL_OW 302
5896: AND
5897: IFFALSE 5938
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5899: LD_VAR 0 3
5903: PPUSH
5904: LD_VAR 0 6
5908: PUSH
5909: LD_VAR 0 6
5913: ARRAY
5914: PUSH
5915: LD_INT 1
5917: ARRAY
5918: PPUSH
5919: LD_VAR 0 6
5923: PUSH
5924: LD_VAR 0 6
5928: ARRAY
5929: PUSH
5930: LD_INT 2
5932: ARRAY
5933: PPUSH
5934: CALL_OW 111
// if not IsInUnit ( un ) then
5938: LD_VAR 0 2
5942: PPUSH
5943: CALL_OW 310
5947: NOT
5948: IFFALSE 5989
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5950: LD_VAR 0 2
5954: PPUSH
5955: LD_VAR 0 6
5959: PUSH
5960: LD_VAR 0 6
5964: ARRAY
5965: PUSH
5966: LD_INT 1
5968: ARRAY
5969: PPUSH
5970: LD_VAR 0 6
5974: PUSH
5975: LD_VAR 0 6
5979: ARRAY
5980: PUSH
5981: LD_INT 2
5983: ARRAY
5984: PPUSH
5985: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5989: LD_VAR 0 3
5993: PPUSH
5994: LD_VAR 0 8
5998: PPUSH
5999: CALL_OW 308
6003: PUSH
6004: LD_VAR 0 2
6008: PPUSH
6009: LD_VAR 0 8
6013: PPUSH
6014: CALL_OW 308
6018: OR
6019: IFFALSE 5843
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6021: LD_VAR 0 2
6025: PPUSH
6026: CALL_OW 302
6030: PUSH
6031: LD_VAR 0 3
6035: PPUSH
6036: CALL_OW 302
6040: NOT
6041: AND
6042: PUSH
6043: LD_VAR 0 2
6047: PPUSH
6048: LD_VAR 0 8
6052: PPUSH
6053: CALL_OW 308
6057: AND
6058: IFFALSE 6069
// RemoveUnit ( un ) ;
6060: LD_VAR 0 2
6064: PPUSH
6065: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6069: LD_VAR 0 3
6073: PPUSH
6074: LD_VAR 0 8
6078: PPUSH
6079: CALL_OW 308
6083: PUSH
6084: LD_VAR 0 3
6088: PPUSH
6089: CALL_OW 302
6093: AND
6094: IFFALSE 6105
// RemoveUnit ( veh ) ;
6096: LD_VAR 0 3
6100: PPUSH
6101: CALL_OW 64
// end ;
6105: LD_VAR 0 1
6109: RET
// export function SendAttack ; var un , veh , i ; begin
6110: LD_INT 0
6112: PPUSH
6113: PPUSH
6114: PPUSH
6115: PPUSH
// if ingame_video then
6116: LD_OWVAR 52
6120: IFFALSE 6143
// begin repeat wait ( 0 0$1 ) ;
6122: LD_INT 35
6124: PPUSH
6125: CALL_OW 67
// until not ingame_video ;
6129: LD_OWVAR 52
6133: NOT
6134: IFFALSE 6122
// wait ( 0 0$5 ) ;
6136: LD_INT 175
6138: PPUSH
6139: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6143: LD_INT 22
6145: PUSH
6146: LD_INT 1
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 21
6155: PUSH
6156: LD_INT 1
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 69
6171: PUSH
6172: LD_INT 10
6174: GREATER
6175: IFFALSE 6218
// begin repeat wait ( 0 0$1 ) ;
6177: LD_INT 35
6179: PPUSH
6180: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6184: LD_INT 22
6186: PUSH
6187: LD_INT 1
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 21
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PPUSH
6208: CALL_OW 69
6212: PUSH
6213: LD_INT 10
6215: LESSEQUAL
6216: IFFALSE 6177
// end ; IncomingAttack ;
6218: CALL 15453 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6222: LD_INT 2100
6224: PPUSH
6225: LD_INT 3500
6227: PPUSH
6228: CALL_OW 12
6232: PPUSH
6233: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6237: LD_ADDR_VAR 0 4
6241: PUSH
6242: DOUBLE
6243: LD_INT 1
6245: DEC
6246: ST_TO_ADDR
6247: LD_INT 3
6249: PUSH
6250: LD_INT 4
6252: PUSH
6253: LD_INT 4
6255: PUSH
6256: LD_INT 5
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: PUSH
6265: LD_OWVAR 67
6269: ARRAY
6270: PUSH
6271: LD_EXP 20
6275: PUSH
6276: LD_INT 3
6278: DIV
6279: PLUS
6280: PUSH
6281: FOR_TO
6282: IFFALSE 6398
// begin uc_side := 1 ;
6284: LD_ADDR_OWVAR 20
6288: PUSH
6289: LD_INT 1
6291: ST_TO_ADDR
// uc_nation := 1 ;
6292: LD_ADDR_OWVAR 21
6296: PUSH
6297: LD_INT 1
6299: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6300: LD_INT 0
6302: PPUSH
6303: LD_INT 1
6305: PPUSH
6306: LD_INT 2
6308: PUSH
6309: LD_INT 3
6311: PUSH
6312: LD_INT 4
6314: PUSH
6315: LD_INT 4
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: PUSH
6324: LD_OWVAR 67
6328: ARRAY
6329: PPUSH
6330: CALL_OW 380
// un := CreateHuman ;
6334: LD_ADDR_VAR 0 2
6338: PUSH
6339: CALL_OW 44
6343: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6344: LD_VAR 0 2
6348: PPUSH
6349: LD_INT 37
6351: PPUSH
6352: LD_INT 70
6354: PPUSH
6355: LD_INT 3
6357: PPUSH
6358: LD_INT 0
6360: PPUSH
6361: CALL_OW 50
// usAttackers := usAttackers union un ;
6365: LD_ADDR_EXP 48
6369: PUSH
6370: LD_EXP 48
6374: PUSH
6375: LD_VAR 0 2
6379: UNION
6380: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6381: LD_VAR 0 2
6385: PPUSH
6386: LD_INT 40
6388: PPUSH
6389: LD_INT 65
6391: PPUSH
6392: CALL_OW 111
// end ;
6396: GO 6281
6398: POP
6399: POP
// uc_side := 1 ;
6400: LD_ADDR_OWVAR 20
6404: PUSH
6405: LD_INT 1
6407: ST_TO_ADDR
// uc_nation := 1 ;
6408: LD_ADDR_OWVAR 21
6412: PUSH
6413: LD_INT 1
6415: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6416: LD_INT 0
6418: PPUSH
6419: LD_INT 4
6421: PPUSH
6422: LD_INT 2
6424: PPUSH
6425: CALL_OW 380
// un := CreateHuman ;
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: CALL_OW 44
6438: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6439: LD_VAR 0 2
6443: PPUSH
6444: LD_INT 37
6446: PPUSH
6447: LD_INT 70
6449: PPUSH
6450: LD_INT 3
6452: PPUSH
6453: LD_INT 0
6455: PPUSH
6456: CALL_OW 50
// usAttackers := usAttackers union un ;
6460: LD_ADDR_EXP 48
6464: PUSH
6465: LD_EXP 48
6469: PUSH
6470: LD_VAR 0 2
6474: UNION
6475: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6476: LD_VAR 0 2
6480: PPUSH
6481: LD_INT 40
6483: PPUSH
6484: LD_INT 65
6486: PPUSH
6487: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6491: LD_ADDR_VAR 0 4
6495: PUSH
6496: DOUBLE
6497: LD_INT 1
6499: DEC
6500: ST_TO_ADDR
6501: LD_OWVAR 67
6505: PUSH
6506: LD_EXP 20
6510: PUSH
6511: LD_INT 4
6513: DIV
6514: PLUS
6515: PUSH
6516: FOR_TO
6517: IFFALSE 6713
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6519: LD_ADDR_VAR 0 3
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 1
6529: PPUSH
6530: LD_INT 2
6532: PUSH
6533: LD_INT 2
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 1
6546: PPUSH
6547: LD_INT 3
6549: PPUSH
6550: CALL_OW 12
6554: ARRAY
6555: PPUSH
6556: LD_INT 1
6558: PPUSH
6559: LD_INT 1
6561: PPUSH
6562: LD_INT 4
6564: PUSH
6565: LD_INT 3
6567: PUSH
6568: LD_INT 2
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 1
6578: PPUSH
6579: LD_INT 3
6581: PPUSH
6582: CALL_OW 12
6586: ARRAY
6587: PPUSH
6588: LD_INT 90
6590: PPUSH
6591: CALL 333 0 7
6595: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6596: LD_VAR 0 3
6600: PPUSH
6601: LD_INT 35
6603: PPUSH
6604: LD_INT 65
6606: PPUSH
6607: LD_INT 0
6609: PPUSH
6610: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6614: LD_INT 0
6616: PPUSH
6617: LD_INT 3
6619: PPUSH
6620: LD_OWVAR 67
6624: PUSH
6625: LD_INT 1
6627: PLUS
6628: PPUSH
6629: CALL_OW 380
// un := CreateHuman ;
6633: LD_ADDR_VAR 0 2
6637: PUSH
6638: CALL_OW 44
6642: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6643: LD_VAR 0 2
6647: PPUSH
6648: LD_VAR 0 3
6652: PPUSH
6653: CALL_OW 52
// usAttackers := usAttackers union un ;
6657: LD_ADDR_EXP 48
6661: PUSH
6662: LD_EXP 48
6666: PUSH
6667: LD_VAR 0 2
6671: UNION
6672: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6673: LD_VAR 0 3
6677: PPUSH
6678: LD_INT 39
6680: PPUSH
6681: LD_INT 60
6683: PPUSH
6684: CALL_OW 111
// wait ( 0 0$3 ) ;
6688: LD_INT 105
6690: PPUSH
6691: CALL_OW 67
// usAttackers := usAttackers union veh ;
6695: LD_ADDR_EXP 48
6699: PUSH
6700: LD_EXP 48
6704: PUSH
6705: LD_VAR 0 3
6709: UNION
6710: ST_TO_ADDR
// end ;
6711: GO 6516
6713: POP
6714: POP
// attackWave := attackWave + 1 ;
6715: LD_ADDR_EXP 20
6719: PUSH
6720: LD_EXP 20
6724: PUSH
6725: LD_INT 1
6727: PLUS
6728: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6729: LD_EXP 25
6733: PPUSH
6734: CALL_OW 427
// end ;
6738: LD_VAR 0 1
6742: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6743: LD_INT 0
6745: PPUSH
6746: PPUSH
6747: PPUSH
6748: PPUSH
6749: PPUSH
6750: PPUSH
6751: PPUSH
6752: PPUSH
6753: PPUSH
6754: PPUSH
6755: PPUSH
// if retreatAllowed then
6756: LD_EXP 12
6760: IFFALSE 6772
// strategy := 2 else
6762: LD_ADDR_VAR 0 5
6766: PUSH
6767: LD_INT 2
6769: ST_TO_ADDR
6770: GO 6788
// strategy := rand ( 0 , 2 ) ;
6772: LD_ADDR_VAR 0 5
6776: PUSH
6777: LD_INT 0
6779: PPUSH
6780: LD_INT 2
6782: PPUSH
6783: CALL_OW 12
6787: ST_TO_ADDR
// attackFormula := [ ] ;
6788: LD_ADDR_VAR 0 6
6792: PUSH
6793: EMPTY
6794: ST_TO_ADDR
// case strategy of 0 :
6795: LD_VAR 0 5
6799: PUSH
6800: LD_INT 0
6802: DOUBLE
6803: EQUAL
6804: IFTRUE 6808
6806: GO 7138
6808: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6809: LD_INT 11
6811: PPUSH
6812: LD_INT 22
6814: PUSH
6815: LD_INT 2
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 30
6824: PUSH
6825: LD_INT 4
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PPUSH
6836: CALL_OW 70
6840: NOT
6841: IFFALSE 6913
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6843: LD_ADDR_VAR 0 6
6847: PUSH
6848: LD_INT 41
6850: PUSH
6851: LD_INT 34
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: EMPTY
6859: LIST
6860: PUSH
6861: LD_INT 53
6863: PUSH
6864: LD_INT 62
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 37
6873: PUSH
6874: LD_INT 63
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 44
6883: PUSH
6884: LD_INT 45
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: LD_INT 37
6893: PUSH
6894: LD_INT 28
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: ST_TO_ADDR
6911: GO 7136
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6913: LD_INT 12
6915: PPUSH
6916: LD_INT 22
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 2
6928: PUSH
6929: LD_INT 30
6931: PUSH
6932: LD_INT 4
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 31
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 30
6951: PUSH
6952: LD_INT 32
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PPUSH
6969: CALL_OW 70
6973: NOT
6974: IFFALSE 7057
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6976: LD_ADDR_VAR 0 6
6980: PUSH
6981: LD_INT 27
6983: PUSH
6984: LD_INT 42
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: LD_INT 27
6993: PUSH
6994: LD_INT 32
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 53
7007: PUSH
7008: LD_INT 62
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 37
7017: PUSH
7018: LD_INT 63
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 44
7027: PUSH
7028: LD_INT 45
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 37
7037: PUSH
7038: LD_INT 28
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: ST_TO_ADDR
7055: GO 7136
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7057: LD_ADDR_VAR 0 6
7061: PUSH
7062: LD_INT 71
7064: PUSH
7065: LD_INT 67
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 54
7074: PUSH
7075: LD_INT 35
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: LD_INT 63
7088: PUSH
7089: LD_INT 40
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_INT 37
7098: PUSH
7099: LD_INT 63
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 44
7108: PUSH
7109: LD_INT 45
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: LD_INT 37
7118: PUSH
7119: LD_INT 28
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: ST_TO_ADDR
// end ; 1 :
7136: GO 7341
7138: LD_INT 1
7140: DOUBLE
7141: EQUAL
7142: IFTRUE 7146
7144: GO 7250
7146: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7147: LD_ADDR_VAR 0 6
7151: PUSH
7152: LD_INT 71
7154: PUSH
7155: LD_INT 67
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 82
7164: PUSH
7165: LD_INT 23
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 53
7174: PUSH
7175: LD_INT 7
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 43
7184: PUSH
7185: LD_INT 10
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 53
7200: PUSH
7201: LD_INT 62
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 37
7210: PUSH
7211: LD_INT 63
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: LD_INT 44
7220: PUSH
7221: LD_INT 45
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: LD_INT 37
7230: PUSH
7231: LD_INT 28
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: ST_TO_ADDR
7248: GO 7341
7250: LD_INT 2
7252: DOUBLE
7253: EQUAL
7254: IFTRUE 7258
7256: GO 7340
7258: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7259: LD_ADDR_VAR 0 6
7263: PUSH
7264: LD_INT 90
7266: PUSH
7267: LD_INT 59
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 108
7276: PUSH
7277: LD_INT 64
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 82
7290: PUSH
7291: LD_INT 75
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 73
7300: PUSH
7301: LD_INT 67
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: LD_INT 101
7310: PUSH
7311: LD_INT 65
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 108
7320: PUSH
7321: LD_INT 62
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: ST_TO_ADDR
7338: GO 7341
7340: POP
// if not attackFormula then
7341: LD_VAR 0 6
7345: NOT
7346: IFFALSE 7350
// exit ;
7348: GO 9028
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7350: LD_ADDR_VAR 0 7
7354: PUSH
7355: LD_EXP 48
7359: PPUSH
7360: LD_INT 25
7362: PUSH
7363: LD_INT 1
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PPUSH
7370: CALL_OW 72
7374: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7375: LD_ADDR_VAR 0 8
7379: PUSH
7380: LD_EXP 48
7384: PPUSH
7385: LD_INT 25
7387: PUSH
7388: LD_INT 4
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PPUSH
7395: CALL_OW 72
7399: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7400: LD_ADDR_VAR 0 9
7404: PUSH
7405: LD_EXP 48
7409: PPUSH
7410: LD_INT 25
7412: PUSH
7413: LD_INT 3
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 72
7424: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7425: LD_ADDR_VAR 0 10
7429: PUSH
7430: LD_EXP 48
7434: PPUSH
7435: LD_INT 21
7437: PUSH
7438: LD_INT 2
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PPUSH
7445: CALL_OW 72
7449: ST_TO_ADDR
// if sci then
7450: LD_VAR 0 8
7454: IFFALSE 7491
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7456: LD_VAR 0 8
7460: PPUSH
7461: LD_VAR 0 6
7465: PUSH
7466: LD_INT 2
7468: ARRAY
7469: PUSH
7470: LD_INT 1
7472: ARRAY
7473: PPUSH
7474: LD_VAR 0 6
7478: PUSH
7479: LD_INT 2
7481: ARRAY
7482: PUSH
7483: LD_INT 2
7485: ARRAY
7486: PPUSH
7487: CALL_OW 111
// repeat wait ( 10 ) ;
7491: LD_INT 10
7493: PPUSH
7494: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7498: LD_ADDR_VAR 0 7
7502: PUSH
7503: LD_EXP 48
7507: PPUSH
7508: LD_INT 25
7510: PUSH
7511: LD_INT 1
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PPUSH
7518: CALL_OW 72
7522: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7523: LD_ADDR_VAR 0 8
7527: PUSH
7528: LD_EXP 48
7532: PPUSH
7533: LD_INT 25
7535: PUSH
7536: LD_INT 4
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PPUSH
7543: CALL_OW 72
7547: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7548: LD_ADDR_VAR 0 9
7552: PUSH
7553: LD_EXP 48
7557: PPUSH
7558: LD_INT 25
7560: PUSH
7561: LD_INT 3
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PPUSH
7568: CALL_OW 72
7572: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7573: LD_ADDR_VAR 0 10
7577: PUSH
7578: LD_EXP 48
7582: PPUSH
7583: LD_INT 21
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PPUSH
7593: CALL_OW 72
7597: ST_TO_ADDR
// if sol then
7598: LD_VAR 0 7
7602: IFFALSE 8023
// begin for i in sol do
7604: LD_ADDR_VAR 0 2
7608: PUSH
7609: LD_VAR 0 7
7613: PUSH
7614: FOR_IN
7615: IFFALSE 8021
// begin tag := GetTag ( i ) ;
7617: LD_ADDR_VAR 0 4
7621: PUSH
7622: LD_VAR 0 2
7626: PPUSH
7627: CALL_OW 110
7631: ST_TO_ADDR
// if not tag then
7632: LD_VAR 0 4
7636: NOT
7637: IFFALSE 7746
// begin if GetLives ( i ) = 1000 then
7639: LD_VAR 0 2
7643: PPUSH
7644: CALL_OW 256
7648: PUSH
7649: LD_INT 1000
7651: EQUAL
7652: IFFALSE 7668
// SetTag ( i , 1 ) else
7654: LD_VAR 0 2
7658: PPUSH
7659: LD_INT 1
7661: PPUSH
7662: CALL_OW 109
7666: GO 7744
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7668: LD_VAR 0 2
7672: PPUSH
7673: LD_VAR 0 6
7677: PUSH
7678: LD_INT 2
7680: ARRAY
7681: PUSH
7682: LD_INT 1
7684: ARRAY
7685: PPUSH
7686: LD_VAR 0 6
7690: PUSH
7691: LD_INT 2
7693: ARRAY
7694: PUSH
7695: LD_INT 2
7697: ARRAY
7698: PPUSH
7699: CALL_OW 297
7703: PUSH
7704: LD_INT 10
7706: GREATER
7707: IFFALSE 7744
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7709: LD_VAR 0 2
7713: PPUSH
7714: LD_VAR 0 6
7718: PUSH
7719: LD_INT 2
7721: ARRAY
7722: PUSH
7723: LD_INT 1
7725: ARRAY
7726: PPUSH
7727: LD_VAR 0 6
7731: PUSH
7732: LD_INT 2
7734: ARRAY
7735: PUSH
7736: LD_INT 2
7738: ARRAY
7739: PPUSH
7740: CALL_OW 111
// end else
7744: GO 8019
// begin if GetLives ( i ) < 760 then
7746: LD_VAR 0 2
7750: PPUSH
7751: CALL_OW 256
7755: PUSH
7756: LD_INT 760
7758: LESS
7759: IFFALSE 7810
// begin SetTag ( i , 0 ) ;
7761: LD_VAR 0 2
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7773: LD_VAR 0 2
7777: PPUSH
7778: LD_VAR 0 6
7782: PUSH
7783: LD_INT 2
7785: ARRAY
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: PPUSH
7791: LD_VAR 0 6
7795: PUSH
7796: LD_INT 2
7798: ARRAY
7799: PUSH
7800: LD_INT 2
7802: ARRAY
7803: PPUSH
7804: CALL_OW 111
// end else
7808: GO 8019
// if tag <= attackFormula [ 1 ] then
7810: LD_VAR 0 4
7814: PUSH
7815: LD_VAR 0 6
7819: PUSH
7820: LD_INT 1
7822: ARRAY
7823: LESSEQUAL
7824: IFFALSE 7985
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7826: LD_VAR 0 2
7830: PPUSH
7831: LD_VAR 0 6
7835: PUSH
7836: LD_INT 1
7838: ARRAY
7839: PUSH
7840: LD_VAR 0 4
7844: ARRAY
7845: PUSH
7846: LD_INT 1
7848: ARRAY
7849: PPUSH
7850: LD_VAR 0 6
7854: PUSH
7855: LD_INT 1
7857: ARRAY
7858: PUSH
7859: LD_VAR 0 4
7863: ARRAY
7864: PUSH
7865: LD_INT 2
7867: ARRAY
7868: PPUSH
7869: CALL_OW 297
7873: PUSH
7874: LD_INT 6
7876: GREATER
7877: IFFALSE 7928
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7879: LD_VAR 0 2
7883: PPUSH
7884: LD_VAR 0 6
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PUSH
7893: LD_VAR 0 4
7897: ARRAY
7898: PUSH
7899: LD_INT 1
7901: ARRAY
7902: PPUSH
7903: LD_VAR 0 6
7907: PUSH
7908: LD_INT 1
7910: ARRAY
7911: PUSH
7912: LD_VAR 0 4
7916: ARRAY
7917: PUSH
7918: LD_INT 2
7920: ARRAY
7921: PPUSH
7922: CALL_OW 114
7926: GO 7983
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7928: LD_INT 81
7930: PUSH
7931: LD_INT 1
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 91
7940: PUSH
7941: LD_VAR 0 2
7945: PUSH
7946: LD_INT 10
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: PPUSH
7958: CALL_OW 69
7962: NOT
7963: IFFALSE 7983
// SetTag ( i , tag + 1 ) ;
7965: LD_VAR 0 2
7969: PPUSH
7970: LD_VAR 0 4
7974: PUSH
7975: LD_INT 1
7977: PLUS
7978: PPUSH
7979: CALL_OW 109
// end else
7983: GO 8019
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7985: LD_VAR 0 2
7989: PPUSH
7990: LD_INT 81
7992: PUSH
7993: LD_INT 1
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PPUSH
8000: CALL_OW 69
8004: PPUSH
8005: LD_VAR 0 2
8009: PPUSH
8010: CALL_OW 74
8014: PPUSH
8015: CALL_OW 115
// end ; end ;
8019: GO 7614
8021: POP
8022: POP
// end ; if sci then
8023: LD_VAR 0 8
8027: IFFALSE 8296
// begin if not sol and not mech then
8029: LD_VAR 0 7
8033: NOT
8034: PUSH
8035: LD_VAR 0 9
8039: NOT
8040: AND
8041: IFFALSE 8093
// begin for i in sci do
8043: LD_ADDR_VAR 0 2
8047: PUSH
8048: LD_VAR 0 8
8052: PUSH
8053: FOR_IN
8054: IFFALSE 8089
// begin usForces := usForces union i ;
8056: LD_ADDR_EXP 45
8060: PUSH
8061: LD_EXP 45
8065: PUSH
8066: LD_VAR 0 2
8070: UNION
8071: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8072: LD_VAR 0 2
8076: PPUSH
8077: LD_INT 34
8079: PPUSH
8080: LD_INT 68
8082: PPUSH
8083: CALL_OW 111
// end ;
8087: GO 8053
8089: POP
8090: POP
// end else
8091: GO 8296
// for i in sci do
8093: LD_ADDR_VAR 0 2
8097: PUSH
8098: LD_VAR 0 8
8102: PUSH
8103: FOR_IN
8104: IFFALSE 8294
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_VAR 0 6
8115: PUSH
8116: LD_INT 2
8118: ARRAY
8119: PUSH
8120: LD_INT 1
8122: ARRAY
8123: PPUSH
8124: LD_VAR 0 6
8128: PUSH
8129: LD_INT 2
8131: ARRAY
8132: PUSH
8133: LD_INT 2
8135: ARRAY
8136: PPUSH
8137: CALL_OW 297
8141: PUSH
8142: LD_INT 10
8144: GREATER
8145: IFFALSE 8184
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8147: LD_VAR 0 2
8151: PPUSH
8152: LD_VAR 0 6
8156: PUSH
8157: LD_INT 2
8159: ARRAY
8160: PUSH
8161: LD_INT 1
8163: ARRAY
8164: PPUSH
8165: LD_VAR 0 6
8169: PUSH
8170: LD_INT 2
8172: ARRAY
8173: PUSH
8174: LD_INT 2
8176: ARRAY
8177: PPUSH
8178: CALL_OW 111
8182: GO 8292
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8184: LD_VAR 0 7
8188: PPUSH
8189: LD_INT 3
8191: PUSH
8192: LD_INT 24
8194: PUSH
8195: LD_INT 1000
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 91
8208: PUSH
8209: LD_VAR 0 2
8213: PUSH
8214: LD_INT 10
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 72
8230: IFFALSE 8292
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8232: LD_VAR 0 2
8236: PPUSH
8237: LD_VAR 0 7
8241: PPUSH
8242: LD_INT 3
8244: PUSH
8245: LD_INT 24
8247: PUSH
8248: LD_INT 1000
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 91
8261: PUSH
8262: LD_VAR 0 2
8266: PUSH
8267: LD_INT 10
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PPUSH
8279: CALL_OW 72
8283: PUSH
8284: LD_INT 1
8286: ARRAY
8287: PPUSH
8288: CALL_OW 128
8292: GO 8103
8294: POP
8295: POP
// end ; if mech then
8296: LD_VAR 0 9
8300: IFFALSE 9010
// begin for i in mech do
8302: LD_ADDR_VAR 0 2
8306: PUSH
8307: LD_VAR 0 9
8311: PUSH
8312: FOR_IN
8313: IFFALSE 9008
// begin tag := GetTag ( i ) ;
8315: LD_ADDR_VAR 0 4
8319: PUSH
8320: LD_VAR 0 2
8324: PPUSH
8325: CALL_OW 110
8329: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8330: LD_ADDR_VAR 0 11
8334: PUSH
8335: LD_VAR 0 2
8339: PPUSH
8340: CALL_OW 310
8344: ST_TO_ADDR
// if not tag then
8345: LD_VAR 0 4
8349: NOT
8350: IFFALSE 8721
// begin if veh then
8352: LD_VAR 0 11
8356: IFFALSE 8527
// begin if GetLives ( veh ) = 1000 then
8358: LD_VAR 0 11
8362: PPUSH
8363: CALL_OW 256
8367: PUSH
8368: LD_INT 1000
8370: EQUAL
8371: IFFALSE 8387
// SetTag ( i , 1 ) else
8373: LD_VAR 0 2
8377: PPUSH
8378: LD_INT 1
8380: PPUSH
8381: CALL_OW 109
8385: GO 8525
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8387: LD_VAR 0 11
8391: PPUSH
8392: LD_VAR 0 6
8396: PUSH
8397: LD_INT 3
8399: ARRAY
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PPUSH
8405: LD_VAR 0 6
8409: PUSH
8410: LD_INT 3
8412: ARRAY
8413: PUSH
8414: LD_INT 2
8416: ARRAY
8417: PPUSH
8418: CALL_OW 297
8422: PUSH
8423: LD_INT 8
8425: GREATER
8426: IFFALSE 8465
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8428: LD_VAR 0 11
8432: PPUSH
8433: LD_VAR 0 6
8437: PUSH
8438: LD_INT 3
8440: ARRAY
8441: PUSH
8442: LD_INT 1
8444: ARRAY
8445: PPUSH
8446: LD_VAR 0 6
8450: PUSH
8451: LD_INT 3
8453: ARRAY
8454: PUSH
8455: LD_INT 2
8457: ARRAY
8458: PPUSH
8459: CALL_OW 111
8463: GO 8525
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8465: LD_INT 81
8467: PUSH
8468: LD_INT 1
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 91
8477: PUSH
8478: LD_VAR 0 2
8482: PUSH
8483: LD_INT 10
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PPUSH
8495: CALL_OW 69
8499: NOT
8500: IFFALSE 8525
// begin ComExitVehicle ( i ) ;
8502: LD_VAR 0 2
8506: PPUSH
8507: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8511: LD_VAR 0 2
8515: PPUSH
8516: LD_VAR 0 11
8520: PPUSH
8521: CALL_OW 189
// end ; end else
8525: GO 8719
// if GetLives ( i ) < 400 then
8527: LD_VAR 0 2
8531: PPUSH
8532: CALL_OW 256
8536: PUSH
8537: LD_INT 400
8539: LESS
8540: IFFALSE 8591
// begin usAttackers := usAttackers diff i ;
8542: LD_ADDR_EXP 48
8546: PUSH
8547: LD_EXP 48
8551: PUSH
8552: LD_VAR 0 2
8556: DIFF
8557: ST_TO_ADDR
// usForces := usForces union i ;
8558: LD_ADDR_EXP 45
8562: PUSH
8563: LD_EXP 45
8567: PUSH
8568: LD_VAR 0 2
8572: UNION
8573: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8574: LD_VAR 0 2
8578: PPUSH
8579: LD_INT 34
8581: PPUSH
8582: LD_INT 68
8584: PPUSH
8585: CALL_OW 111
// end else
8589: GO 8719
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8591: LD_VAR 0 10
8595: PPUSH
8596: LD_INT 58
8598: PUSH
8599: EMPTY
8600: LIST
8601: PUSH
8602: LD_INT 24
8604: PUSH
8605: LD_INT 1000
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PPUSH
8616: CALL_OW 72
8620: PUSH
8621: LD_VAR 0 2
8625: PPUSH
8626: CALL_OW 314
8630: NOT
8631: AND
8632: PUSH
8633: LD_INT 81
8635: PUSH
8636: LD_INT 1
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PUSH
8643: LD_INT 91
8645: PUSH
8646: LD_VAR 0 2
8650: PUSH
8651: LD_INT 9
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PPUSH
8663: CALL_OW 69
8667: OR
8668: IFFALSE 8719
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_VAR 0 10
8679: PPUSH
8680: LD_INT 58
8682: PUSH
8683: EMPTY
8684: LIST
8685: PUSH
8686: LD_INT 24
8688: PUSH
8689: LD_INT 250
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PPUSH
8700: CALL_OW 72
8704: PPUSH
8705: LD_VAR 0 2
8709: PPUSH
8710: CALL_OW 74
8714: PPUSH
8715: CALL_OW 120
// end else
8719: GO 9006
// begin if veh and GetLives ( veh ) < 760 then
8721: LD_VAR 0 11
8725: PUSH
8726: LD_VAR 0 11
8730: PPUSH
8731: CALL_OW 256
8735: PUSH
8736: LD_INT 760
8738: LESS
8739: AND
8740: IFFALSE 8791
// begin SetTag ( i , 0 ) ;
8742: LD_VAR 0 2
8746: PPUSH
8747: LD_INT 0
8749: PPUSH
8750: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8754: LD_VAR 0 11
8758: PPUSH
8759: LD_VAR 0 6
8763: PUSH
8764: LD_INT 3
8766: ARRAY
8767: PUSH
8768: LD_INT 1
8770: ARRAY
8771: PPUSH
8772: LD_VAR 0 6
8776: PUSH
8777: LD_INT 3
8779: ARRAY
8780: PUSH
8781: LD_INT 2
8783: ARRAY
8784: PPUSH
8785: CALL_OW 111
// end else
8789: GO 9006
// if veh then
8791: LD_VAR 0 11
8795: IFFALSE 9006
// if tag <= attackFormula [ 4 ] then
8797: LD_VAR 0 4
8801: PUSH
8802: LD_VAR 0 6
8806: PUSH
8807: LD_INT 4
8809: ARRAY
8810: LESSEQUAL
8811: IFFALSE 8972
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8813: LD_VAR 0 11
8817: PPUSH
8818: LD_VAR 0 6
8822: PUSH
8823: LD_INT 4
8825: ARRAY
8826: PUSH
8827: LD_VAR 0 4
8831: ARRAY
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: LD_VAR 0 6
8841: PUSH
8842: LD_INT 4
8844: ARRAY
8845: PUSH
8846: LD_VAR 0 4
8850: ARRAY
8851: PUSH
8852: LD_INT 2
8854: ARRAY
8855: PPUSH
8856: CALL_OW 297
8860: PUSH
8861: LD_INT 6
8863: GREATER
8864: IFFALSE 8915
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8866: LD_VAR 0 11
8870: PPUSH
8871: LD_VAR 0 6
8875: PUSH
8876: LD_INT 4
8878: ARRAY
8879: PUSH
8880: LD_VAR 0 4
8884: ARRAY
8885: PUSH
8886: LD_INT 1
8888: ARRAY
8889: PPUSH
8890: LD_VAR 0 6
8894: PUSH
8895: LD_INT 4
8897: ARRAY
8898: PUSH
8899: LD_VAR 0 4
8903: ARRAY
8904: PUSH
8905: LD_INT 2
8907: ARRAY
8908: PPUSH
8909: CALL_OW 114
8913: GO 8970
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8915: LD_INT 81
8917: PUSH
8918: LD_INT 1
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: LD_INT 91
8927: PUSH
8928: LD_VAR 0 11
8932: PUSH
8933: LD_INT 10
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: LIST
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 69
8949: NOT
8950: IFFALSE 8970
// SetTag ( i , tag + 1 ) ;
8952: LD_VAR 0 2
8956: PPUSH
8957: LD_VAR 0 4
8961: PUSH
8962: LD_INT 1
8964: PLUS
8965: PPUSH
8966: CALL_OW 109
// end else
8970: GO 9006
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8972: LD_VAR 0 11
8976: PPUSH
8977: LD_INT 81
8979: PUSH
8980: LD_INT 1
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PPUSH
8987: CALL_OW 69
8991: PPUSH
8992: LD_VAR 0 2
8996: PPUSH
8997: CALL_OW 74
9001: PPUSH
9002: CALL_OW 115
// end ; end ;
9006: GO 8312
9008: POP
9009: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9010: LD_EXP 48
9014: PPUSH
9015: LD_INT 52
9017: PUSH
9018: EMPTY
9019: LIST
9020: PPUSH
9021: CALL_OW 72
9025: NOT
9026: IFFALSE 7491
// end ;
9028: LD_VAR 0 1
9032: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9033: LD_INT 22
9035: PUSH
9036: LD_INT 1
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 32
9045: PUSH
9046: LD_INT 1
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PPUSH
9057: CALL_OW 69
9061: IFFALSE 9138
9063: GO 9065
9065: DISABLE
9066: LD_INT 0
9068: PPUSH
// begin enable ;
9069: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9070: LD_ADDR_VAR 0 1
9074: PUSH
9075: LD_INT 22
9077: PUSH
9078: LD_INT 1
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: LD_INT 32
9087: PUSH
9088: LD_INT 1
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PPUSH
9099: CALL_OW 69
9103: PUSH
9104: FOR_IN
9105: IFFALSE 9136
// if GetFuel ( i ) < 10 then
9107: LD_VAR 0 1
9111: PPUSH
9112: CALL_OW 261
9116: PUSH
9117: LD_INT 10
9119: LESS
9120: IFFALSE 9134
// SetFuel ( i , 10 ) ;
9122: LD_VAR 0 1
9126: PPUSH
9127: LD_INT 10
9129: PPUSH
9130: CALL_OW 240
9134: GO 9104
9136: POP
9137: POP
// end ; end_of_file
9138: PPOPN 1
9140: END
// export function Action ; var hasAll , i , tmp ; begin
9141: LD_INT 0
9143: PPUSH
9144: PPUSH
9145: PPUSH
9146: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9147: LD_ADDR_VAR 0 2
9151: PUSH
9152: LD_INT 22
9154: PUSH
9155: LD_INT 2
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 21
9164: PUSH
9165: LD_INT 1
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 23
9174: PUSH
9175: LD_INT 2
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: LIST
9186: PPUSH
9187: CALL_OW 69
9191: PUSH
9192: LD_INT 7
9194: GREATEREQUAL
9195: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9196: LD_VAR 0 2
9200: PPUSH
9201: LD_STRING 03_HasAll
9203: PPUSH
9204: CALL_OW 39
// Video ( true ) ;
9208: LD_INT 1
9210: PPUSH
9211: CALL 77216 0 1
// CenterNowOnUnits ( Heike ) ;
9215: LD_EXP 29
9219: PPUSH
9220: CALL_OW 87
// wait ( 0 0$2 ) ;
9224: LD_INT 70
9226: PPUSH
9227: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9231: LD_EXP 37
9235: PPUSH
9236: LD_STRING DF-1-start
9238: PPUSH
9239: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9243: LD_EXP 29
9247: PPUSH
9248: LD_EXP 37
9252: PPUSH
9253: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9257: LD_EXP 29
9261: PPUSH
9262: LD_STRING DH-1-start
9264: PPUSH
9265: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9269: LD_EXP 38
9273: PPUSH
9274: LD_INT 92
9276: PPUSH
9277: LD_INT 21
9279: PPUSH
9280: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9284: LD_EXP 33
9288: PPUSH
9289: LD_INT 94
9291: PPUSH
9292: LD_INT 23
9294: PPUSH
9295: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9299: LD_EXP 41
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: PPUSH
9308: LD_INT 90
9310: PPUSH
9311: LD_INT 23
9313: PPUSH
9314: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9318: LD_EXP 41
9322: PUSH
9323: LD_INT 2
9325: ARRAY
9326: PPUSH
9327: LD_INT 93
9329: PPUSH
9330: LD_INT 25
9332: PPUSH
9333: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9337: LD_EXP 41
9341: PPUSH
9342: LD_EXP 38
9346: PPUSH
9347: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9351: LD_EXP 38
9355: PUSH
9356: LD_EXP 33
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PPUSH
9365: LD_EXP 29
9369: PPUSH
9370: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9374: LD_EXP 29
9378: PPUSH
9379: LD_EXP 38
9383: PPUSH
9384: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9388: LD_INT 35
9390: PPUSH
9391: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9395: LD_EXP 38
9399: PPUSH
9400: LD_INT 92
9402: PPUSH
9403: LD_INT 21
9405: PPUSH
9406: CALL_OW 307
9410: IFFALSE 9388
// Say ( Omar , DO-1-start ) ;
9412: LD_EXP 38
9416: PPUSH
9417: LD_STRING DO-1-start
9419: PPUSH
9420: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9424: LD_EXP 29
9428: PPUSH
9429: LD_STRING DH-2-start
9431: PPUSH
9432: CALL_OW 88
// if hasAll then
9436: LD_VAR 0 2
9440: IFFALSE 9568
// begin Say ( Omar , DO-2-start ) ;
9442: LD_EXP 38
9446: PPUSH
9447: LD_STRING DO-2-start
9449: PPUSH
9450: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9454: LD_EXP 38
9458: PPUSH
9459: LD_STRING DO-3-start
9461: PPUSH
9462: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9466: LD_EXP 29
9470: PPUSH
9471: LD_STRING DH-3-start
9473: PPUSH
9474: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9478: LD_EXP 37
9482: PPUSH
9483: LD_STRING DF-2-start
9485: PPUSH
9486: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9490: LD_EXP 38
9494: PPUSH
9495: LD_EXP 37
9499: PPUSH
9500: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9504: LD_EXP 38
9508: PPUSH
9509: LD_STRING DO-4-start
9511: PPUSH
9512: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9516: LD_EXP 37
9520: PPUSH
9521: LD_STRING DF-3-start
9523: PPUSH
9524: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9528: LD_EXP 38
9532: PPUSH
9533: LD_STRING DO-5-start
9535: PPUSH
9536: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9540: LD_EXP 37
9544: PPUSH
9545: LD_STRING DF-4-start
9547: PPUSH
9548: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9552: LD_EXP 38
9556: PPUSH
9557: LD_EXP 29
9561: PPUSH
9562: CALL_OW 119
// end else
9566: GO 9668
// begin Say ( Omar , DO-2-start-a ) ;
9568: LD_EXP 38
9572: PPUSH
9573: LD_STRING DO-2-start-a
9575: PPUSH
9576: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9580: LD_EXP 38
9584: PPUSH
9585: LD_STRING DO-3-start-a
9587: PPUSH
9588: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9592: LD_EXP 29
9596: PPUSH
9597: LD_STRING DH-3-start-a
9599: PPUSH
9600: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9604: LD_EXP 37
9608: PPUSH
9609: LD_STRING DF-2-start-a
9611: PPUSH
9612: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9616: LD_EXP 38
9620: PPUSH
9621: LD_EXP 37
9625: PPUSH
9626: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9630: LD_EXP 38
9634: PPUSH
9635: LD_STRING DO-4-start-a
9637: PPUSH
9638: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING DF-3-start-a
9649: PPUSH
9650: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9654: LD_EXP 38
9658: PPUSH
9659: LD_EXP 29
9663: PPUSH
9664: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9668: LD_INT 10
9670: PPUSH
9671: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9675: LD_EXP 38
9679: PPUSH
9680: LD_STRING DO-1-mission
9682: PPUSH
9683: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9687: LD_EXP 38
9691: PPUSH
9692: LD_STRING DO-2-mission
9694: PPUSH
9695: CALL_OW 88
// if not hasAll then
9699: LD_VAR 0 2
9703: NOT
9704: IFFALSE 9718
// Say ( Omar , DO-3-mission ) ;
9706: LD_EXP 38
9710: PPUSH
9711: LD_STRING DO-3-mission
9713: PPUSH
9714: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9718: LD_EXP 38
9722: PPUSH
9723: LD_STRING DO-4-mission
9725: PPUSH
9726: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9730: LD_EXP 29
9734: PPUSH
9735: LD_STRING DH-1-mission
9737: PPUSH
9738: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9742: LD_EXP 37
9746: PPUSH
9747: LD_STRING DF-1-mission
9749: PPUSH
9750: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9754: LD_EXP 38
9758: PPUSH
9759: LD_STRING DO-5-mission
9761: PPUSH
9762: CALL_OW 88
// if not hasAll then
9766: LD_VAR 0 2
9770: NOT
9771: IFFALSE 9906
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9773: LD_ADDR_VAR 0 4
9777: PUSH
9778: LD_INT 22
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 21
9790: PUSH
9791: LD_INT 1
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 23
9800: PUSH
9801: LD_INT 2
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 69
9817: ST_TO_ADDR
// for i := 7 downto tmp do
9818: LD_ADDR_VAR 0 3
9822: PUSH
9823: DOUBLE
9824: LD_INT 7
9826: INC
9827: ST_TO_ADDR
9828: LD_VAR 0 4
9832: PUSH
9833: FOR_DOWNTO
9834: IFFALSE 9904
// begin if omarSquad < 3 then
9836: LD_EXP 41
9840: PUSH
9841: LD_INT 3
9843: LESS
9844: IFFALSE 9848
// break ;
9846: GO 9904
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9848: LD_EXP 41
9852: PUSH
9853: LD_INT 3
9855: ARRAY
9856: PPUSH
9857: LD_INT 2
9859: PPUSH
9860: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9864: LD_ADDR_EXP 43
9868: PUSH
9869: LD_EXP 43
9873: PUSH
9874: LD_EXP 41
9878: PUSH
9879: LD_INT 3
9881: ARRAY
9882: UNION
9883: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9884: LD_ADDR_EXP 41
9888: PUSH
9889: LD_EXP 41
9893: PPUSH
9894: LD_INT 3
9896: PPUSH
9897: CALL_OW 3
9901: ST_TO_ADDR
// end ;
9902: GO 9833
9904: POP
9905: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9906: LD_EXP 38
9910: PUSH
9911: LD_EXP 41
9915: ADD
9916: PPUSH
9917: LD_INT 103
9919: PPUSH
9920: LD_INT 9
9922: PPUSH
9923: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9927: LD_VAR 0 2
9931: PUSH
9932: LD_EXP 34
9936: PPUSH
9937: CALL_OW 302
9941: AND
9942: IFFALSE 10003
// begin wait ( 0 0$3 ) ;
9944: LD_INT 105
9946: PPUSH
9947: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9951: LD_EXP 34
9955: PPUSH
9956: LD_EXP 37
9960: PPUSH
9961: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9965: LD_EXP 34
9969: PPUSH
9970: LD_STRING DK-1-side
9972: PPUSH
9973: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9977: LD_EXP 37
9981: PPUSH
9982: LD_EXP 34
9986: PPUSH
9987: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9991: LD_EXP 37
9995: PPUSH
9996: LD_STRING DF-1-side
9998: PPUSH
9999: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10003: LD_INT 22
10005: PUSH
10006: LD_INT 2
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: CALL_OW 69
10017: PPUSH
10018: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10022: LD_EXP 37
10026: PUSH
10027: LD_EXP 40
10031: ADD
10032: PPUSH
10033: LD_INT 108
10035: PPUSH
10036: LD_INT 62
10038: PPUSH
10039: CALL_OW 111
// gameStarted := true ;
10043: LD_ADDR_EXP 3
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10051: LD_INT 105
10053: PPUSH
10054: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10058: LD_EXP 29
10062: PPUSH
10063: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10067: LD_EXP 29
10071: PPUSH
10072: LD_EXP 33
10076: PPUSH
10077: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10081: LD_INT 22
10083: PUSH
10084: LD_INT 2
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PPUSH
10091: CALL_OW 69
10095: PUSH
10096: LD_EXP 29
10100: DIFF
10101: PPUSH
10102: LD_EXP 29
10106: PPUSH
10107: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10111: LD_EXP 29
10115: PPUSH
10116: LD_STRING DH-1-explore
10118: PPUSH
10119: CALL_OW 88
// if Givi then
10123: LD_EXP 30
10127: IFFALSE 10143
// Say ( Givi , DG-1-explore ) else
10129: LD_EXP 30
10133: PPUSH
10134: LD_STRING DG-1-explore
10136: PPUSH
10137: CALL_OW 88
10141: GO 10180
// if heikeSecondSquad then
10143: LD_EXP 43
10147: IFFALSE 10180
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10149: LD_EXP 43
10153: PPUSH
10154: LD_INT 26
10156: PUSH
10157: LD_INT 1
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PPUSH
10164: CALL_OW 72
10168: PUSH
10169: LD_INT 1
10171: ARRAY
10172: PPUSH
10173: LD_STRING DArm-1-explore
10175: PPUSH
10176: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10180: LD_EXP 33
10184: PPUSH
10185: LD_STRING DA-1-explore
10187: PPUSH
10188: CALL_OW 88
// if Sophia then
10192: LD_EXP 35
10196: IFFALSE 10274
// begin Say ( Sophia , DS-2-explore ) ;
10198: LD_EXP 35
10202: PPUSH
10203: LD_STRING DS-2-explore
10205: PPUSH
10206: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10210: LD_EXP 33
10214: PPUSH
10215: LD_STRING DA-2-explore
10217: PPUSH
10218: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10222: LD_EXP 35
10226: PPUSH
10227: LD_EXP 33
10231: PPUSH
10232: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10236: LD_EXP 33
10240: PPUSH
10241: LD_EXP 35
10245: PPUSH
10246: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10250: LD_EXP 35
10254: PPUSH
10255: LD_STRING DS-3-explore
10257: PPUSH
10258: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10262: LD_EXP 33
10266: PPUSH
10267: LD_STRING DA-3-explore
10269: PPUSH
10270: CALL_OW 88
// end ; if Mike then
10274: LD_EXP 31
10278: IFFALSE 10334
// begin Say ( Mike , DM-1-explore ) ;
10280: LD_EXP 31
10284: PPUSH
10285: LD_STRING DM-1-explore
10287: PPUSH
10288: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10292: LD_EXP 29
10296: PPUSH
10297: LD_STRING DH-2-explore
10299: PPUSH
10300: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10304: LD_EXP 31
10308: PPUSH
10309: LD_STRING DM-2-explore
10311: PPUSH
10312: CALL_OW 88
// if Kaia then
10316: LD_EXP 34
10320: IFFALSE 10334
// Say ( Kaia , DK-1-explore ) ;
10322: LD_EXP 34
10326: PPUSH
10327: LD_STRING DK-1-explore
10329: PPUSH
10330: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10334: LD_INT 22
10336: PUSH
10337: LD_INT 2
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PPUSH
10344: CALL_OW 69
10348: PPUSH
10349: CALL_OW 139
// Video ( false ) ;
10353: LD_INT 0
10355: PPUSH
10356: CALL 77216 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10360: LD_STRING BuildBase
10362: PPUSH
10363: CALL_OW 337
// SaveForQuickRestart ;
10367: CALL_OW 22
// end ;
10371: LD_VAR 0 1
10375: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10376: LD_EXP 5
10380: PUSH
10381: LD_EXP 7
10385: NOT
10386: AND
10387: IFFALSE 10574
10389: GO 10391
10391: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10392: LD_EXP 46
10396: PPUSH
10397: LD_STRING DUsm-4-assault
10399: PPUSH
10400: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10404: LD_INT 35
10406: PPUSH
10407: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10411: LD_INT 22
10413: PUSH
10414: LD_INT 2
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 21
10423: PUSH
10424: LD_INT 1
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 50
10433: PUSH
10434: EMPTY
10435: LIST
10436: PUSH
10437: LD_INT 95
10439: PUSH
10440: LD_INT 7
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: PPUSH
10453: CALL_OW 69
10457: IFFALSE 10404
// if not IsOk ( usCommander ) or americanBaseCaptured then
10459: LD_EXP 46
10463: PPUSH
10464: CALL_OW 302
10468: NOT
10469: PUSH
10470: LD_EXP 7
10474: OR
10475: IFFALSE 10479
// exit ;
10477: GO 10574
// repeat wait ( 0 0$1 ) ;
10479: LD_INT 35
10481: PPUSH
10482: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10486: LD_INT 22
10488: PUSH
10489: LD_INT 2
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 21
10498: PUSH
10499: LD_INT 1
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 50
10508: PUSH
10509: EMPTY
10510: LIST
10511: PUSH
10512: LD_INT 95
10514: PUSH
10515: LD_INT 7
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: NOT
10533: IFFALSE 10479
// wait ( 0 0$3 ) ;
10535: LD_INT 105
10537: PPUSH
10538: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10542: LD_EXP 46
10546: PPUSH
10547: CALL_OW 302
10551: NOT
10552: PUSH
10553: LD_EXP 7
10557: OR
10558: IFFALSE 10562
// exit ;
10560: GO 10574
// Say ( usCommander , DUsm-3-assault ) ;
10562: LD_EXP 46
10566: PPUSH
10567: LD_STRING DUsm-3-assault
10569: PPUSH
10570: CALL_OW 88
// end ;
10574: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10575: LD_EXP 6
10579: NOT
10580: PUSH
10581: LD_EXP 7
10585: NOT
10586: AND
10587: PUSH
10588: LD_INT 5
10590: PPUSH
10591: LD_INT 22
10593: PUSH
10594: LD_INT 2
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: CALL_OW 70
10605: AND
10606: PUSH
10607: LD_EXP 7
10611: NOT
10612: AND
10613: IFFALSE 10698
10615: GO 10617
10617: DISABLE
// begin if Mike then
10618: LD_EXP 31
10622: IFFALSE 10638
// Say ( Mike , DM-1-scout ) else
10624: LD_EXP 31
10628: PPUSH
10629: LD_STRING DM-1-scout
10631: PPUSH
10632: CALL_OW 88
10636: GO 10669
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10638: LD_EXP 43
10642: PPUSH
10643: LD_INT 26
10645: PUSH
10646: LD_INT 1
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PPUSH
10653: CALL_OW 72
10657: PUSH
10658: LD_INT 1
10660: ARRAY
10661: PPUSH
10662: LD_STRING DArm-1-explore
10664: PPUSH
10665: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10669: LD_INT 54
10671: PPUSH
10672: LD_INT 35
10674: PPUSH
10675: LD_INT 2
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10685: LD_INT 54
10687: PPUSH
10688: LD_INT 35
10690: PPUSH
10691: LD_INT 2
10693: PPUSH
10694: CALL_OW 331
// end ;
10698: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10699: LD_INT 6
10701: PPUSH
10702: LD_INT 22
10704: PUSH
10705: LD_INT 2
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PPUSH
10712: CALL_OW 70
10716: PUSH
10717: LD_EXP 7
10721: NOT
10722: AND
10723: IFFALSE 10977
10725: GO 10727
10727: DISABLE
10728: LD_INT 0
10730: PPUSH
10731: PPUSH
10732: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10733: LD_ADDR_VAR 0 1
10737: PUSH
10738: LD_EXP 43
10742: PPUSH
10743: LD_INT 26
10745: PUSH
10746: LD_INT 1
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PPUSH
10753: CALL_OW 72
10757: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10758: LD_ADDR_VAR 0 2
10762: PUSH
10763: LD_EXP 43
10767: PPUSH
10768: LD_INT 26
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PPUSH
10778: CALL_OW 72
10782: ST_TO_ADDR
// DialogueOn ;
10783: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10787: LD_INT 36
10789: PPUSH
10790: LD_INT 22
10792: PPUSH
10793: LD_INT 2
10795: PPUSH
10796: LD_INT 8
10798: PPUSH
10799: CALL_OW 330
// dwait ( 0 0$1 ) ;
10803: LD_INT 35
10805: PPUSH
10806: CALL_OW 68
// speakerOk := false ;
10810: LD_ADDR_VAR 0 3
10814: PUSH
10815: LD_INT 0
10817: ST_TO_ADDR
// if Mike then
10818: LD_EXP 31
10822: IFFALSE 10844
// speakerOk := Say ( Mike , DM-1-spot ) else
10824: LD_ADDR_VAR 0 3
10828: PUSH
10829: LD_EXP 31
10833: PPUSH
10834: LD_STRING DM-1-spot
10836: PPUSH
10837: CALL_OW 88
10841: ST_TO_ADDR
10842: GO 10872
// if randomMen then
10844: LD_VAR 0 1
10848: IFFALSE 10872
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10850: LD_ADDR_VAR 0 3
10854: PUSH
10855: LD_VAR 0 1
10859: PUSH
10860: LD_INT 1
10862: ARRAY
10863: PPUSH
10864: LD_STRING DArm-1-spot-a
10866: PPUSH
10867: CALL_OW 88
10871: ST_TO_ADDR
// if speakerOk then
10872: LD_VAR 0 3
10876: IFFALSE 10920
// begin if Givi then
10878: LD_EXP 30
10882: IFFALSE 10898
// Say ( Givi , DG-1-spot ) else
10884: LD_EXP 30
10888: PPUSH
10889: LD_STRING DG-1-spot
10891: PPUSH
10892: CALL_OW 88
10896: GO 10920
// if randomWomen then
10898: LD_VAR 0 2
10902: IFFALSE 10920
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10904: LD_VAR 0 2
10908: PUSH
10909: LD_INT 1
10911: ARRAY
10912: PPUSH
10913: LD_STRING DArf-1-spot-a
10915: PPUSH
10916: CALL_OW 88
// end ; if Mike then
10920: LD_EXP 31
10924: IFFALSE 10940
// Say ( Heike , DH-1-spot ) else
10926: LD_EXP 29
10930: PPUSH
10931: LD_STRING DH-1-spot
10933: PPUSH
10934: CALL_OW 88
10938: GO 10952
// Say ( Heike , DH-1-spot-a ) ;
10940: LD_EXP 29
10944: PPUSH
10945: LD_STRING DH-1-spot-a
10947: PPUSH
10948: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10952: LD_INT 36
10954: PPUSH
10955: LD_INT 22
10957: PPUSH
10958: LD_INT 2
10960: PPUSH
10961: CALL_OW 331
// DialogueOff ;
10965: CALL_OW 7
// americanBaseSpoted := true ;
10969: LD_ADDR_EXP 6
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// end ;
10977: PPOPN 3
10979: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10980: LD_EXP 6
10984: NOT
10985: PUSH
10986: LD_INT 22
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: LD_INT 101
10998: PUSH
10999: LD_INT 1
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: PPUSH
11010: CALL_OW 69
11014: AND
11015: PUSH
11016: LD_EXP 7
11020: NOT
11021: AND
11022: IFFALSE 11108
11024: GO 11026
11026: DISABLE
11027: LD_INT 0
11029: PPUSH
// begin americanBaseSpoted := true ;
11030: LD_ADDR_EXP 6
11034: PUSH
11035: LD_INT 1
11037: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11038: LD_ADDR_VAR 0 1
11042: PUSH
11043: LD_EXP 43
11047: PPUSH
11048: LD_INT 26
11050: PUSH
11051: LD_INT 1
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PPUSH
11058: CALL_OW 72
11062: ST_TO_ADDR
// if not randomMen then
11063: LD_VAR 0 1
11067: NOT
11068: IFFALSE 11072
// exit ;
11070: GO 11108
// DialogueOn ;
11072: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11076: LD_VAR 0 1
11080: PUSH
11081: LD_INT 1
11083: ARRAY
11084: PPUSH
11085: LD_STRING DArm-1-spot-a
11087: PPUSH
11088: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11092: LD_EXP 29
11096: PPUSH
11097: LD_STRING DH-1-spot-a
11099: PPUSH
11100: CALL_OW 88
// DialogueOff ;
11104: CALL_OW 7
// end ;
11108: PPOPN 1
11110: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11111: LD_INT 11
11113: PPUSH
11114: CALL_OW 255
11118: PUSH
11119: LD_INT 2
11121: EQUAL
11122: PUSH
11123: LD_INT 7
11125: PPUSH
11126: LD_INT 22
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 3
11138: PUSH
11139: LD_INT 50
11141: PUSH
11142: EMPTY
11143: LIST
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 30
11151: PUSH
11152: LD_INT 31
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: PPUSH
11164: CALL_OW 70
11168: OR
11169: PUSH
11170: LD_INT 7
11172: PPUSH
11173: LD_INT 22
11175: PUSH
11176: LD_INT 2
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PPUSH
11183: CALL_OW 70
11187: PUSH
11188: LD_INT 2
11190: GREATER
11191: OR
11192: PUSH
11193: LD_EXP 45
11197: PUSH
11198: LD_INT 4
11200: LESSEQUAL
11201: OR
11202: IFFALSE 11793
11204: GO 11206
11206: DISABLE
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
// begin wait ( 0 0$3 ) ;
11211: LD_INT 105
11213: PPUSH
11214: CALL_OW 67
// americanStartRun := true ;
11218: LD_ADDR_EXP 15
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// if IsOk ( usCommander ) then
11226: LD_EXP 46
11230: PPUSH
11231: CALL_OW 302
11235: IFFALSE 11265
// begin usForces := usForces union usCommander ;
11237: LD_ADDR_EXP 45
11241: PUSH
11242: LD_EXP 45
11246: PUSH
11247: LD_EXP 46
11251: UNION
11252: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11253: LD_EXP 46
11257: PPUSH
11258: LD_STRING DUsm-1-assault
11260: PPUSH
11261: CALL_OW 88
// end ; for i in usForces do
11265: LD_ADDR_VAR 0 1
11269: PUSH
11270: LD_EXP 45
11274: PUSH
11275: FOR_IN
11276: IFFALSE 11322
// begin if IsInUnit ( i ) then
11278: LD_VAR 0 1
11282: PPUSH
11283: CALL_OW 310
11287: IFFALSE 11298
// ComExitBuilding ( i ) ;
11289: LD_VAR 0 1
11293: PPUSH
11294: CALL_OW 122
// wait ( 3 ) ;
11298: LD_INT 3
11300: PPUSH
11301: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11305: LD_VAR 0 1
11309: PPUSH
11310: LD_INT 34
11312: PPUSH
11313: LD_INT 67
11315: PPUSH
11316: CALL_OW 111
// end ;
11320: GO 11275
11322: POP
11323: POP
// Say ( Heike , DH-1-assault ) ;
11324: LD_EXP 29
11328: PPUSH
11329: LD_STRING DH-1-assault
11331: PPUSH
11332: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11336: LD_INT 35
11338: PPUSH
11339: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11343: LD_VAR 0 1
11347: PPUSH
11348: LD_INT 34
11350: PPUSH
11351: LD_INT 67
11353: PPUSH
11354: CALL_OW 111
// until not usForces ;
11358: LD_EXP 45
11362: NOT
11363: IFFALSE 11336
// music_nat := 2 ;
11365: LD_ADDR_OWVAR 71
11369: PUSH
11370: LD_INT 2
11372: ST_TO_ADDR
// music_class := music_victory ;
11373: LD_ADDR_OWVAR 72
11377: PUSH
11378: LD_INT 4
11380: ST_TO_ADDR
// if not americanHasEscaped then
11381: LD_EXP 9
11385: NOT
11386: IFFALSE 11407
// begin Say ( Heike , DH-2-assault ) ;
11388: LD_EXP 29
11392: PPUSH
11393: LD_STRING DH-2-assault
11395: PPUSH
11396: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11400: LD_STRING ACH_CLEAN
11402: PPUSH
11403: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11407: LD_INT 70
11409: PPUSH
11410: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11414: LD_INT 35
11416: PPUSH
11417: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11421: LD_INT 22
11423: PUSH
11424: LD_INT 2
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: LD_INT 21
11433: PUSH
11434: LD_INT 1
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: PUSH
11441: LD_INT 3
11443: PUSH
11444: LD_INT 50
11446: PUSH
11447: EMPTY
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: LIST
11458: PPUSH
11459: CALL_OW 69
11463: NOT
11464: IFFALSE 11414
// InGameOn ;
11466: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11470: LD_INT 11
11472: PPUSH
11473: CALL_OW 255
11477: PUSH
11478: LD_INT 2
11480: EQUAL
11481: NOT
11482: IFFALSE 11494
// SetSide ( usDepot , 2 ) ;
11484: LD_INT 11
11486: PPUSH
11487: LD_INT 2
11489: PPUSH
11490: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11494: LD_INT 35
11496: PPUSH
11497: LD_INT 22
11499: PPUSH
11500: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11504: LD_EXP 29
11508: PPUSH
11509: LD_INT 35
11511: PPUSH
11512: LD_INT 22
11514: PPUSH
11515: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11519: LD_EXP 29
11523: PPUSH
11524: LD_INT 38
11526: PPUSH
11527: LD_INT 25
11529: PPUSH
11530: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11534: LD_EXP 33
11538: PUSH
11539: LD_EXP 42
11543: UNION
11544: PUSH
11545: LD_EXP 43
11549: UNION
11550: PPUSH
11551: LD_INT 39
11553: PPUSH
11554: LD_INT 26
11556: PPUSH
11557: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11561: LD_EXP 33
11565: PUSH
11566: LD_EXP 42
11570: UNION
11571: PUSH
11572: LD_EXP 43
11576: UNION
11577: PPUSH
11578: LD_EXP 29
11582: PPUSH
11583: CALL_OW 179
// p := 0 ;
11587: LD_ADDR_VAR 0 2
11591: PUSH
11592: LD_INT 0
11594: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11595: LD_INT 35
11597: PPUSH
11598: CALL_OW 67
// p := p + 1 ;
11602: LD_ADDR_VAR 0 2
11606: PUSH
11607: LD_VAR 0 2
11611: PUSH
11612: LD_INT 1
11614: PLUS
11615: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11616: LD_EXP 29
11620: PPUSH
11621: CALL_OW 314
11625: NOT
11626: PUSH
11627: LD_VAR 0 2
11631: PUSH
11632: LD_INT 10
11634: GREATER
11635: OR
11636: IFFALSE 11595
// Say ( Heike , DH-1-capture ) ;
11638: LD_EXP 29
11642: PPUSH
11643: LD_STRING DH-1-capture
11645: PPUSH
11646: CALL_OW 88
// if Markov then
11650: LD_EXP 36
11654: IFFALSE 11668
// Say ( Markov , DMar-1-capture ) ;
11656: LD_EXP 36
11660: PPUSH
11661: LD_STRING DMar-1-capture
11663: PPUSH
11664: CALL_OW 88
// if Sophia then
11668: LD_EXP 35
11672: IFFALSE 11698
// begin Say ( Heike , DH-2-capture ) ;
11674: LD_EXP 29
11678: PPUSH
11679: LD_STRING DH-2-capture
11681: PPUSH
11682: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11686: LD_EXP 35
11690: PPUSH
11691: LD_STRING DS-1-capture
11693: PPUSH
11694: CALL_OW 88
// end ; InGameOff ;
11698: CALL_OW 9
// music_nat := music_auto ;
11702: LD_ADDR_OWVAR 71
11706: PUSH
11707: LD_INT 0
11709: ST_TO_ADDR
// music_class := music_auto ;
11710: LD_ADDR_OWVAR 72
11714: PUSH
11715: LD_INT 0
11717: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11718: LD_STRING ConstructBase
11720: PPUSH
11721: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11725: LD_ADDR_VAR 0 1
11729: PUSH
11730: LD_INT 22
11732: PUSH
11733: LD_INT 1
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 21
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 69
11758: PUSH
11759: FOR_IN
11760: IFFALSE 11776
// SetSide ( i , 2 ) ;
11762: LD_VAR 0 1
11766: PPUSH
11767: LD_INT 2
11769: PPUSH
11770: CALL_OW 235
11774: GO 11759
11776: POP
11777: POP
// wait ( 0 0$3 ) ;
11778: LD_INT 105
11780: PPUSH
11781: CALL_OW 67
// americanBaseCaptured := true ;
11785: LD_ADDR_EXP 7
11789: PUSH
11790: LD_INT 1
11792: ST_TO_ADDR
// end ;
11793: PPOPN 2
11795: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11796: LD_EXP 14
11800: PUSH
11801: LD_INT 3
11803: GREATEREQUAL
11804: IFFALSE 11816
11806: GO 11808
11808: DISABLE
// SetAchievement ( ACH_ENG ) ;
11809: LD_STRING ACH_ENG
11811: PPUSH
11812: CALL_OW 543
11816: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11817: LD_INT 22
11819: PUSH
11820: LD_INT 2
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: LD_INT 25
11829: PUSH
11830: LD_INT 15
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PPUSH
11841: CALL_OW 69
11845: PUSH
11846: LD_INT 4
11848: GREATEREQUAL
11849: IFFALSE 11861
11851: GO 11853
11853: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11854: LD_STRING ACH_APEGEN
11856: PPUSH
11857: CALL_OW 543
11861: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11862: LD_INT 22
11864: PUSH
11865: LD_INT 2
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 30
11874: PUSH
11875: LD_INT 2
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 3
11884: PUSH
11885: LD_INT 57
11887: PUSH
11888: EMPTY
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 69
11904: IFFALSE 12169
11906: GO 11908
11908: DISABLE
// begin workshopBuilded := true ;
11909: LD_ADDR_EXP 11
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// if IsOk ( Markov ) then
11917: LD_EXP 36
11921: PPUSH
11922: CALL_OW 302
11926: IFFALSE 11985
// begin Say ( Heike , DH-1-shop-a ) ;
11928: LD_EXP 29
11932: PPUSH
11933: LD_STRING DH-1-shop-a
11935: PPUSH
11936: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11940: LD_INT 47
11942: PPUSH
11943: LD_INT 2
11945: PPUSH
11946: CALL_OW 321
11950: PUSH
11951: LD_INT 2
11953: EQUAL
11954: PUSH
11955: LD_INT 45
11957: PPUSH
11958: LD_INT 2
11960: PPUSH
11961: CALL_OW 321
11965: PUSH
11966: LD_INT 2
11968: EQUAL
11969: AND
11970: NOT
11971: IFFALSE 11985
// Say ( Markov , DMar-1-shop-a ) ;
11973: LD_EXP 36
11977: PPUSH
11978: LD_STRING DMar-1-shop-a
11980: PPUSH
11981: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11985: LD_INT 35
11987: PPUSH
11988: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11992: LD_INT 47
11994: PPUSH
11995: LD_INT 2
11997: PPUSH
11998: CALL_OW 321
12002: PUSH
12003: LD_INT 2
12005: EQUAL
12006: PUSH
12007: LD_INT 45
12009: PPUSH
12010: LD_INT 2
12012: PPUSH
12013: CALL_OW 321
12017: PUSH
12018: LD_INT 2
12020: EQUAL
12021: OR
12022: IFFALSE 11985
// if IsOk ( Markov ) and IsOk ( Heike ) then
12024: LD_EXP 36
12028: PPUSH
12029: CALL_OW 302
12033: PUSH
12034: LD_EXP 29
12038: PPUSH
12039: CALL_OW 302
12043: AND
12044: IFFALSE 12162
// begin DialogueOn ;
12046: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12050: LD_EXP 36
12054: PPUSH
12055: LD_STRING DMar-1-shop
12057: PPUSH
12058: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12062: LD_EXP 29
12066: PPUSH
12067: LD_STRING DH-1-shop
12069: PPUSH
12070: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12074: LD_EXP 36
12078: PPUSH
12079: LD_STRING DMar-2-shop
12081: PPUSH
12082: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12086: LD_EXP 36
12090: PPUSH
12091: LD_STRING DMar-3-shop
12093: PPUSH
12094: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12098: LD_EXP 29
12102: PPUSH
12103: LD_STRING DH-2-shop
12105: PPUSH
12106: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12110: LD_EXP 36
12114: PPUSH
12115: LD_STRING DMar-4-shop
12117: PPUSH
12118: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12122: LD_EXP 29
12126: PPUSH
12127: LD_STRING DH-3-shop
12129: PPUSH
12130: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12134: LD_EXP 36
12138: PPUSH
12139: LD_STRING DMar-5-shop
12141: PPUSH
12142: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12146: LD_EXP 29
12150: PPUSH
12151: LD_STRING DH-4-shop
12153: PPUSH
12154: CALL_OW 88
// DialogueOff ;
12158: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12162: LD_STRING ConstructVeh
12164: PPUSH
12165: CALL_OW 337
// end ;
12169: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12170: LD_INT 2
12172: PPUSH
12173: LD_INT 2
12175: PPUSH
12176: LD_INT 1
12178: PPUSH
12179: CALL 39858 0 3
12183: PUSH
12184: LD_INT 0
12186: EQUAL
12187: IFFALSE 12199
12189: GO 12191
12191: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12192: LD_STRING Techs
12194: PPUSH
12195: CALL_OW 337
12199: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12200: LD_EXP 36
12204: PPUSH
12205: CALL_OW 302
12209: PUSH
12210: LD_INT 22
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 2
12222: PUSH
12223: LD_INT 34
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 35
12235: PUSH
12236: LD_INT 22
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PPUSH
12252: CALL_OW 69
12256: AND
12257: IFFALSE 12364
12259: GO 12261
12261: DISABLE
// begin DialogueOn ;
12262: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12266: LD_INT 22
12268: PUSH
12269: LD_INT 2
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 2
12278: PUSH
12279: LD_INT 34
12281: PUSH
12282: LD_INT 22
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 35
12291: PUSH
12292: LD_INT 22
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL_OW 69
12312: PPUSH
12313: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12317: LD_INT 10
12319: PPUSH
12320: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12324: LD_EXP 29
12328: PPUSH
12329: LD_STRING DH-1-bal
12331: PPUSH
12332: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12336: LD_EXP 36
12340: PPUSH
12341: LD_STRING DMar-1-bal
12343: PPUSH
12344: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12348: LD_EXP 29
12352: PPUSH
12353: LD_STRING DH-2-bal
12355: PPUSH
12356: CALL_OW 88
// DialogueOff ;
12360: CALL_OW 7
// end ;
12364: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12365: LD_EXP 33
12369: PPUSH
12370: CALL_OW 302
12374: PUSH
12375: LD_INT 22
12377: PUSH
12378: LD_INT 2
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 30
12387: PUSH
12388: LD_INT 6
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PPUSH
12399: CALL_OW 69
12403: AND
12404: IFFALSE 12465
12406: GO 12408
12408: DISABLE
// begin DialogueOn ;
12409: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12413: LD_EXP 33
12417: PPUSH
12418: LD_STRING DA-1-lab
12420: PPUSH
12421: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12425: LD_EXP 29
12429: PPUSH
12430: LD_STRING DH-1-lab
12432: PPUSH
12433: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12437: LD_EXP 33
12441: PPUSH
12442: LD_STRING DA-2-lab
12444: PPUSH
12445: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12449: LD_EXP 29
12453: PPUSH
12454: LD_STRING DH-2-lab
12456: PPUSH
12457: CALL_OW 88
// DialogueOff ;
12461: CALL_OW 7
// end ;
12465: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12466: LD_EXP 34
12470: PPUSH
12471: CALL_OW 302
12475: PUSH
12476: LD_INT 22
12478: PUSH
12479: LD_INT 2
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: LD_INT 25
12488: PUSH
12489: LD_INT 15
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PPUSH
12500: CALL_OW 69
12504: AND
12505: PUSH
12506: LD_INT 81
12508: PUSH
12509: LD_INT 2
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 69
12520: NOT
12521: AND
12522: IFFALSE 12704
12524: GO 12526
12526: DISABLE
12527: LD_INT 0
12529: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12530: LD_ADDR_VAR 0 1
12534: PUSH
12535: LD_INT 22
12537: PUSH
12538: LD_INT 2
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: LD_INT 25
12547: PUSH
12548: LD_INT 15
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PPUSH
12559: CALL_OW 69
12563: ST_TO_ADDR
// InGameOn ;
12564: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12568: LD_VAR 0 1
12572: PUSH
12573: LD_INT 1
12575: ARRAY
12576: PPUSH
12577: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12581: LD_VAR 0 1
12585: PUSH
12586: LD_INT 1
12588: ARRAY
12589: PPUSH
12590: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12594: LD_EXP 34
12598: PPUSH
12599: LD_STRING DK-1-apesol
12601: PPUSH
12602: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12606: LD_VAR 0 1
12610: PUSH
12611: LD_INT 1
12613: ARRAY
12614: PPUSH
12615: LD_INT 35
12617: PPUSH
12618: LD_INT 28
12620: PPUSH
12621: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12625: LD_VAR 0 1
12629: PUSH
12630: LD_INT 1
12632: ARRAY
12633: PPUSH
12634: LD_INT 36
12636: PPUSH
12637: LD_INT 17
12639: PPUSH
12640: CALL_OW 171
// DialogueOn ;
12644: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12648: LD_EXP 33
12652: PPUSH
12653: LD_STRING DA-1-apesol
12655: PPUSH
12656: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12660: LD_EXP 34
12664: PPUSH
12665: LD_STRING DK-2-apesol
12667: PPUSH
12668: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12672: LD_EXP 33
12676: PPUSH
12677: LD_STRING DA-2-apesol
12679: PPUSH
12680: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12684: LD_EXP 34
12688: PPUSH
12689: LD_STRING DK-3-apesol
12691: PPUSH
12692: CALL_OW 88
// DialogueOff ;
12696: CALL_OW 7
// InGameOff ;
12700: CALL_OW 9
// end ;
12704: PPOPN 1
12706: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12707: LD_EXP 35
12711: PPUSH
12712: CALL_OW 302
12716: PUSH
12717: LD_INT 22
12719: PUSH
12720: LD_INT 2
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 25
12729: PUSH
12730: LD_INT 16
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 69
12745: AND
12746: PUSH
12747: LD_INT 81
12749: PUSH
12750: LD_INT 2
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PPUSH
12757: CALL_OW 69
12761: NOT
12762: AND
12763: IFFALSE 13048
12765: GO 12767
12767: DISABLE
12768: LD_INT 0
12770: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12771: LD_ADDR_VAR 0 1
12775: PUSH
12776: LD_INT 22
12778: PUSH
12779: LD_INT 2
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 25
12788: PUSH
12789: LD_INT 16
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PPUSH
12800: CALL_OW 69
12804: ST_TO_ADDR
// InGameOn ;
12805: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12809: LD_INT 35
12811: PPUSH
12812: LD_INT 22
12814: PPUSH
12815: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12819: LD_INT 5
12821: PPUSH
12822: LD_INT 35
12824: PPUSH
12825: LD_INT 22
12827: PPUSH
12828: LD_INT 1
12830: PPUSH
12831: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12835: LD_EXP 35
12839: PPUSH
12840: LD_VAR 0 1
12844: PUSH
12845: LD_INT 1
12847: ARRAY
12848: PPUSH
12849: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12853: LD_VAR 0 1
12857: PUSH
12858: LD_INT 1
12860: ARRAY
12861: PPUSH
12862: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12866: LD_VAR 0 1
12870: PUSH
12871: LD_INT 1
12873: ARRAY
12874: PPUSH
12875: CALL_OW 122
// wait ( 0 0$2 ) ;
12879: LD_INT 70
12881: PPUSH
12882: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12886: LD_EXP 35
12890: PPUSH
12891: LD_STRING DS-1-apeeng
12893: PPUSH
12894: CALL_OW 88
// if IsOk ( Kamil ) then
12898: LD_EXP 32
12902: PPUSH
12903: CALL_OW 302
12907: IFFALSE 13044
// begin Say ( Kamil , DKam-1-apeeng ) ;
12909: LD_EXP 32
12913: PPUSH
12914: LD_STRING DKam-1-apeeng
12916: PPUSH
12917: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12921: LD_EXP 35
12925: PPUSH
12926: LD_STRING DS-2-apeeng
12928: PPUSH
12929: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12933: LD_EXP 32
12937: PPUSH
12938: LD_STRING DKam-2-apeeng
12940: PPUSH
12941: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12945: LD_EXP 35
12949: PPUSH
12950: LD_STRING DS-3-apeeng
12952: PPUSH
12953: CALL_OW 88
// if not IsOK ( Kaia ) then
12957: LD_EXP 34
12961: PPUSH
12962: CALL_OW 302
12966: NOT
12967: IFFALSE 12975
// begin InGameOff ;
12969: CALL_OW 9
// exit ;
12973: GO 13048
// end ; Say ( Kaia , DK-1-apeeng ) ;
12975: LD_EXP 34
12979: PPUSH
12980: LD_STRING DK-1-apeeng
12982: PPUSH
12983: CALL_OW 88
// if not IsOk ( Givi ) then
12987: LD_EXP 30
12991: PPUSH
12992: CALL_OW 302
12996: NOT
12997: IFFALSE 13008
// begin Video ( false ) ;
12999: LD_INT 0
13001: PPUSH
13002: CALL 77216 0 1
// exit ;
13006: GO 13048
// end ; Say ( Givi , DG-1-apeeng ) ;
13008: LD_EXP 30
13012: PPUSH
13013: LD_STRING DG-1-apeeng
13015: PPUSH
13016: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13020: LD_EXP 34
13024: PPUSH
13025: LD_STRING DK-2-apeeng
13027: PPUSH
13028: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13032: LD_EXP 34
13036: PPUSH
13037: LD_STRING DK-3-apeeng
13039: PPUSH
13040: CALL_OW 88
// end ; InGameOff ;
13044: CALL_OW 9
// end ;
13048: PPOPN 1
13050: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13051: LD_EXP 4
13055: PUSH
13056: LD_INT 22
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 30
13068: PUSH
13069: LD_INT 0
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PPUSH
13080: CALL_OW 69
13084: AND
13085: IFFALSE 13250
13087: GO 13089
13089: DISABLE
// begin wait ( 0 0$10 ) ;
13090: LD_INT 350
13092: PPUSH
13093: CALL_OW 67
// DialogueOn ;
13097: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13101: LD_EXP 37
13105: PPUSH
13106: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13110: LD_EXP 37
13114: PPUSH
13115: LD_STRING DF-1-distribution
13117: PPUSH
13118: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13122: LD_EXP 29
13126: PPUSH
13127: LD_STRING DH-2-distribution
13129: PPUSH
13130: CALL_OW 88
// if IsOk ( Kaia ) then
13134: LD_EXP 34
13138: PPUSH
13139: CALL_OW 302
13143: IFFALSE 13204
// begin Say ( Kaia , DK-1-distribution ) ;
13145: LD_EXP 34
13149: PPUSH
13150: LD_STRING DK-1-distribution
13152: PPUSH
13153: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13157: LD_EXP 29
13161: PPUSH
13162: LD_STRING DH-1-distribution
13164: PPUSH
13165: CALL_OW 88
// if IsOk ( Givi ) then
13169: LD_EXP 30
13173: PPUSH
13174: CALL_OW 302
13178: IFFALSE 13204
// begin Say ( Givi , DG-1-distribution ) ;
13180: LD_EXP 30
13184: PPUSH
13185: LD_STRING DG-1-distribution
13187: PPUSH
13188: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13192: LD_EXP 29
13196: PPUSH
13197: LD_STRING DH-3-distribution
13199: PPUSH
13200: CALL_OW 88
// end ; end ; DialogueOff ;
13204: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13208: LD_STRING Crates1
13210: PPUSH
13211: CALL_OW 337
// farmerRequestedCrates := 300 ;
13215: LD_ADDR_EXP 17
13219: PUSH
13220: LD_INT 300
13222: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13223: LD_STRING FarmerCrates
13225: PPUSH
13226: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13230: LD_INT 10
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
13240: LD_INT 108
13242: PPUSH
13243: LD_INT 61
13245: PPUSH
13246: CALL_OW 86
// end ;
13250: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13251: LD_EXP 7
13255: PUSH
13256: LD_INT 22
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 3
13268: PUSH
13269: LD_INT 57
13271: PUSH
13272: EMPTY
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: LD_INT 30
13284: PUSH
13285: LD_INT 6
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 30
13294: PUSH
13295: LD_INT 7
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: LIST
13311: PPUSH
13312: CALL_OW 69
13316: AND
13317: PUSH
13318: LD_INT 22
13320: PUSH
13321: LD_INT 2
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 3
13330: PUSH
13331: LD_INT 57
13333: PUSH
13334: EMPTY
13335: LIST
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 30
13343: PUSH
13344: LD_INT 4
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: LIST
13355: PPUSH
13356: CALL_OW 69
13360: AND
13361: IFFALSE 13525
13363: GO 13365
13365: DISABLE
13366: LD_INT 0
13368: PPUSH
// begin wait ( 0 0$10 ) ;
13369: LD_INT 350
13371: PPUSH
13372: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13376: LD_ADDR_VAR 0 1
13380: PUSH
13381: LD_EXP 43
13385: PPUSH
13386: LD_INT 26
13388: PUSH
13389: LD_INT 1
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 25
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 72
13414: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13415: LD_EXP 29
13419: PPUSH
13420: LD_STRING DH-1-task
13422: PPUSH
13423: CALL_OW 88
// if IsOk ( Sophia ) then
13427: LD_EXP 35
13431: PPUSH
13432: CALL_OW 302
13436: IFFALSE 13476
// begin Say ( Sophia , DS-1-task ) ;
13438: LD_EXP 35
13442: PPUSH
13443: LD_STRING DS-1-task
13445: PPUSH
13446: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13450: LD_EXP 35
13454: PPUSH
13455: LD_STRING DS-2-task
13457: PPUSH
13458: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13462: LD_EXP 29
13466: PPUSH
13467: LD_STRING DH-2-task
13469: PPUSH
13470: CALL_OW 88
// end else
13474: GO 13510
// if eng then
13476: LD_VAR 0 1
13480: IFFALSE 13510
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13482: LD_VAR 0 1
13486: PUSH
13487: LD_INT 1
13489: ARRAY
13490: PPUSH
13491: LD_STRING DArm-1-task
13493: PPUSH
13494: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13498: LD_EXP 29
13502: PPUSH
13503: LD_STRING DH-2-task
13505: PPUSH
13506: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13510: LD_STRING BaseConstructed
13512: PPUSH
13513: CALL_OW 337
// allowConvoys := true ;
13517: LD_ADDR_EXP 13
13521: PUSH
13522: LD_INT 1
13524: ST_TO_ADDR
// end ;
13525: PPOPN 1
13527: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13528: LD_INT 22
13530: PUSH
13531: LD_INT 4
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 34
13540: PUSH
13541: LD_INT 12
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PPUSH
13552: CALL_OW 69
13556: IFFALSE 13724
13558: GO 13560
13560: DISABLE
13561: LD_INT 0
13563: PPUSH
13564: PPUSH
13565: PPUSH
// begin wait ( 0 0$2 ) ;
13566: LD_INT 70
13568: PPUSH
13569: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13573: LD_ADDR_VAR 0 1
13577: PUSH
13578: LD_INT 22
13580: PUSH
13581: LD_INT 4
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 34
13590: PUSH
13591: LD_INT 12
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PPUSH
13602: CALL_OW 69
13606: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13607: LD_ADDR_VAR 0 2
13611: PUSH
13612: LD_VAR 0 1
13616: PUSH
13617: LD_INT 1
13619: ARRAY
13620: PPUSH
13621: CALL_OW 250
13625: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13626: LD_ADDR_VAR 0 3
13630: PUSH
13631: LD_VAR 0 1
13635: PUSH
13636: LD_INT 1
13638: ARRAY
13639: PPUSH
13640: CALL_OW 251
13644: ST_TO_ADDR
// DialogueOn ;
13645: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13649: LD_VAR 0 2
13653: PPUSH
13654: LD_VAR 0 3
13658: PPUSH
13659: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13663: LD_VAR 0 2
13667: PPUSH
13668: LD_VAR 0 3
13672: PPUSH
13673: LD_INT 2
13675: PPUSH
13676: LD_INT 6
13678: NEG
13679: PPUSH
13680: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13684: LD_INT 10
13686: PPUSH
13687: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13691: LD_EXP 29
13695: PPUSH
13696: LD_STRING DH-1-seecargo
13698: PPUSH
13699: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13703: LD_VAR 0 2
13707: PPUSH
13708: LD_VAR 0 3
13712: PPUSH
13713: LD_INT 2
13715: PPUSH
13716: CALL_OW 331
// DialogueOff ;
13720: CALL_OW 7
// end ;
13724: PPOPN 3
13726: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13727: LD_EXP 4
13731: PUSH
13732: LD_EXP 16
13736: PUSH
13737: LD_INT 300
13739: GREATEREQUAL
13740: AND
13741: IFFALSE 13813
13743: GO 13745
13745: DISABLE
// begin DialogueOn ;
13746: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13750: LD_EXP 37
13754: PPUSH
13755: LD_STRING DF-1-delivery-2
13757: PPUSH
13758: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13762: LD_EXP 29
13766: PPUSH
13767: LD_STRING DH-1-delivery-2
13769: PPUSH
13770: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13774: LD_EXP 37
13778: PPUSH
13779: LD_STRING DF-2-delivery-2
13781: PPUSH
13782: CALL_OW 94
// DialogueOff ;
13786: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13790: LD_STRING Crates2
13792: PPUSH
13793: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13797: LD_ADDR_EXP 18
13801: PUSH
13802: LD_INT 63000
13804: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13805: LD_ADDR_EXP 17
13809: PUSH
13810: LD_INT 600
13812: ST_TO_ADDR
// end ;
13813: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13814: LD_EXP 4
13818: PUSH
13819: LD_EXP 16
13823: PUSH
13824: LD_INT 600
13826: GREATEREQUAL
13827: AND
13828: PUSH
13829: LD_OWVAR 67
13833: PUSH
13834: LD_INT 1
13836: GREATER
13837: AND
13838: IFFALSE 14038
13840: GO 13842
13842: DISABLE
// begin DialogueOn ;
13843: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13847: LD_EXP 37
13851: PPUSH
13852: LD_STRING DF-1-delivery-3
13854: PPUSH
13855: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13859: LD_EXP 29
13863: PPUSH
13864: LD_STRING DH-1-delivery-3
13866: PPUSH
13867: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13871: LD_EXP 37
13875: PPUSH
13876: LD_STRING DF-2-delivery-3
13878: PPUSH
13879: CALL_OW 94
// if IsOk ( Kaia ) then
13883: LD_EXP 34
13887: PPUSH
13888: CALL_OW 302
13892: IFFALSE 13942
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13894: LD_EXP 34
13898: PPUSH
13899: LD_STRING DK-1-delivery-3
13901: PPUSH
13902: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13906: LD_EXP 29
13910: PPUSH
13911: LD_STRING DH-2-delivery-3
13913: PPUSH
13914: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13918: LD_EXP 30
13922: PPUSH
13923: LD_STRING DG-1-delivery-3
13925: PPUSH
13926: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13930: LD_EXP 31
13934: PPUSH
13935: LD_STRING DM-1-delivery-3
13937: PPUSH
13938: CALL_OW 88
// end ; DialogueOff ;
13942: CALL_OW 7
// case Difficulty of 2 :
13946: LD_OWVAR 67
13950: PUSH
13951: LD_INT 2
13953: DOUBLE
13954: EQUAL
13955: IFTRUE 13959
13957: GO 13977
13959: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
13960: LD_STRING Crates3
13962: PPUSH
13963: CALL_OW 337
// farmerRequestedCrates := 900 ;
13967: LD_ADDR_EXP 17
13971: PUSH
13972: LD_INT 900
13974: ST_TO_ADDR
// end ; 3 :
13975: GO 14030
13977: LD_INT 3
13979: DOUBLE
13980: EQUAL
13981: IFTRUE 13985
13983: GO 14003
13985: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
13986: LD_STRING Crates4
13988: PPUSH
13989: CALL_OW 337
// farmerRequestedCrates := 1200 ;
13993: LD_ADDR_EXP 17
13997: PUSH
13998: LD_INT 1200
14000: ST_TO_ADDR
// end ; 4 :
14001: GO 14030
14003: LD_INT 4
14005: DOUBLE
14006: EQUAL
14007: IFTRUE 14011
14009: GO 14029
14011: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14012: LD_STRING Crates5
14014: PPUSH
14015: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14019: LD_ADDR_EXP 17
14023: PUSH
14024: LD_INT 1400
14026: ST_TO_ADDR
// end ; end ;
14027: GO 14030
14029: POP
// farmerCratesCounter := 30 30$00 ;
14030: LD_ADDR_EXP 18
14034: PUSH
14035: LD_INT 63000
14037: ST_TO_ADDR
// end ;
14038: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14039: LD_EXP 4
14043: PUSH
14044: LD_EXP 16
14048: PUSH
14049: LD_INT 600
14051: PUSH
14052: LD_INT 900
14054: PUSH
14055: LD_INT 1200
14057: PUSH
14058: LD_INT 1400
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: PUSH
14067: LD_OWVAR 67
14071: ARRAY
14072: GREATEREQUAL
14073: AND
14074: IFFALSE 14160
14076: GO 14078
14078: DISABLE
// begin retreatAllowed := true ;
14079: LD_ADDR_EXP 12
14083: PUSH
14084: LD_INT 1
14086: ST_TO_ADDR
// display_strings := [ ] ;
14087: LD_ADDR_OWVAR 47
14091: PUSH
14092: EMPTY
14093: ST_TO_ADDR
// DialogueOn ;
14094: CALL_OW 6
// InGameOn ;
14098: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14102: LD_EXP 38
14106: PPUSH
14107: LD_STRING DO-radio-end
14109: PPUSH
14110: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14114: LD_EXP 29
14118: PPUSH
14119: LD_STRING DH-1-radio-end
14121: PPUSH
14122: CALL_OW 88
// InGameOff ;
14126: CALL_OW 9
// DialogueOff ;
14130: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14134: LD_STRING Retreat
14136: PPUSH
14137: CALL_OW 337
// wait ( 0 0$2 ) ;
14141: LD_INT 70
14143: PPUSH
14144: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14148: LD_EXP 29
14152: PPUSH
14153: LD_STRING DH-2-radio-end
14155: PPUSH
14156: CALL_OW 88
// end ;
14160: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14161: LD_EXP 12
14165: IFFALSE 14296
14167: GO 14169
14169: DISABLE
14170: LD_INT 0
14172: PPUSH
14173: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14174: LD_INT 10
14176: PPUSH
14177: LD_INT 0
14179: PPUSH
14180: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14184: LD_ADDR_VAR 0 1
14188: PUSH
14189: LD_EXP 40
14193: PPUSH
14194: LD_INT 25
14196: PUSH
14197: LD_INT 2
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PPUSH
14204: CALL_OW 72
14208: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14209: LD_VAR 0 1
14213: PUSH
14214: LD_INT 102
14216: PPUSH
14217: LD_INT 69
14219: PPUSH
14220: CALL_OW 428
14224: PUSH
14225: LD_INT 0
14227: EQUAL
14228: AND
14229: IFFALSE 14296
// begin for i in tmp do
14231: LD_ADDR_VAR 0 2
14235: PUSH
14236: LD_VAR 0 1
14240: PUSH
14241: FOR_IN
14242: IFFALSE 14266
// if IsInUnit ( i ) then
14244: LD_VAR 0 2
14248: PPUSH
14249: CALL_OW 310
14253: IFFALSE 14264
// ComExitBuilding ( i ) ;
14255: LD_VAR 0 2
14259: PPUSH
14260: CALL_OW 122
14264: GO 14241
14266: POP
14267: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14268: LD_VAR 0 1
14272: PPUSH
14273: LD_INT 31
14275: PPUSH
14276: LD_INT 102
14278: PPUSH
14279: LD_INT 69
14281: PPUSH
14282: LD_INT 2
14284: PPUSH
14285: CALL_OW 205
// wait ( 0 0$3 ) ;
14289: LD_INT 105
14291: PPUSH
14292: CALL_OW 67
// end ; end ;
14296: PPOPN 2
14298: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14299: LD_EXP 12
14303: NOT
14304: PUSH
14305: LD_INT 5
14307: PPUSH
14308: CALL_OW 301
14312: AND
14313: IFFALSE 14345
14315: GO 14317
14317: DISABLE
// begin DialogueOn ;
14318: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14322: LD_EXP 37
14326: PPUSH
14327: LD_STRING DF-1-failure
14329: PPUSH
14330: CALL_OW 94
// DialogueOff ;
14334: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14338: LD_STRING FarmerDepot
14340: PPUSH
14341: CALL_OW 104
// end ;
14345: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14346: LD_EXP 12
14350: PUSH
14351: LD_EXP 29
14355: PPUSH
14356: LD_EXP 37
14360: PPUSH
14361: CALL_OW 296
14365: PUSH
14366: LD_INT 12
14368: LESS
14369: AND
14370: PUSH
14371: LD_INT 81
14373: PUSH
14374: LD_INT 2
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 21
14383: PUSH
14384: LD_INT 1
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PPUSH
14395: CALL_OW 69
14399: NOT
14400: AND
14401: IFFALSE 15085
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
14409: PPUSH
14410: PPUSH
// begin allowConvoys := false ;
14411: LD_ADDR_EXP 13
14415: PUSH
14416: LD_INT 0
14418: ST_TO_ADDR
// InGameOn ;
14419: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14423: LD_EXP 29
14427: PPUSH
14428: LD_EXP 37
14432: PPUSH
14433: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14437: LD_EXP 37
14441: PPUSH
14442: LD_EXP 29
14446: PPUSH
14447: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14451: LD_EXP 37
14455: PPUSH
14456: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14460: LD_EXP 29
14464: PPUSH
14465: LD_STRING DH-1-end
14467: PPUSH
14468: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14472: LD_EXP 37
14476: PPUSH
14477: LD_STRING DF-1-end
14479: PPUSH
14480: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14484: LD_EXP 37
14488: PPUSH
14489: LD_STRING DF-2-end
14491: PPUSH
14492: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14496: LD_EXP 29
14500: PPUSH
14501: LD_STRING DH-2-end
14503: PPUSH
14504: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14508: LD_EXP 37
14512: PPUSH
14513: LD_STRING DF-3-end
14515: PPUSH
14516: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14520: LD_EXP 29
14524: PPUSH
14525: LD_STRING DH-3-end
14527: PPUSH
14528: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14532: LD_EXP 30
14536: PPUSH
14537: LD_STRING DG-1-end
14539: PPUSH
14540: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14544: LD_EXP 29
14548: PPUSH
14549: LD_STRING DH-4-end
14551: PPUSH
14552: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14556: LD_EXP 37
14560: PPUSH
14561: LD_STRING DF-4-end
14563: PPUSH
14564: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14568: LD_EXP 29
14572: PPUSH
14573: LD_STRING DH-5-end
14575: PPUSH
14576: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14580: LD_EXP 37
14584: PPUSH
14585: LD_STRING DF-5-end
14587: PPUSH
14588: CALL_OW 88
// InGameOff ;
14592: CALL_OW 9
// allowCargoEvacuation := true ;
14596: LD_ADDR_EXP 8
14600: PUSH
14601: LD_INT 1
14603: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14604: LD_ADDR_VAR 0 2
14608: PUSH
14609: LD_INT 4
14611: PUSH
14612: LD_INT 3
14614: PUSH
14615: LD_INT 2
14617: PUSH
14618: LD_INT 1
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: PUSH
14627: LD_OWVAR 67
14631: ARRAY
14632: ST_TO_ADDR
// if farmerSquad < max then
14633: LD_EXP 40
14637: PUSH
14638: LD_VAR 0 2
14642: LESS
14643: IFFALSE 14655
// max := farmerSquad ;
14645: LD_ADDR_VAR 0 2
14649: PUSH
14650: LD_EXP 40
14654: ST_TO_ADDR
// for i := 1 to max do
14655: LD_ADDR_VAR 0 1
14659: PUSH
14660: DOUBLE
14661: LD_INT 1
14663: DEC
14664: ST_TO_ADDR
14665: LD_VAR 0 2
14669: PUSH
14670: FOR_TO
14671: IFFALSE 14709
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14673: LD_EXP 40
14677: PUSH
14678: LD_INT 1
14680: ARRAY
14681: PPUSH
14682: LD_INT 2
14684: PPUSH
14685: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14689: LD_ADDR_EXP 40
14693: PUSH
14694: LD_EXP 40
14698: PPUSH
14699: LD_INT 1
14701: PPUSH
14702: CALL_OW 3
14706: ST_TO_ADDR
// end ;
14707: GO 14670
14709: POP
14710: POP
// for i in Farmer ^ farmerSquad do
14711: LD_ADDR_VAR 0 1
14715: PUSH
14716: LD_EXP 37
14720: PUSH
14721: LD_EXP 40
14725: ADD
14726: PUSH
14727: FOR_IN
14728: IFFALSE 14767
// begin if IsInUnit ( i ) then
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 310
14739: IFFALSE 14750
// ComExitBuilding ( i ) ;
14741: LD_VAR 0 1
14745: PPUSH
14746: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14750: LD_VAR 0 1
14754: PPUSH
14755: LD_INT 102
14757: PPUSH
14758: LD_INT 7
14760: PPUSH
14761: CALL_OW 171
// end ;
14765: GO 14727
14767: POP
14768: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14769: LD_ADDR_VAR 0 1
14773: PUSH
14774: LD_INT 22
14776: PUSH
14777: LD_INT 5
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 21
14786: PUSH
14787: LD_INT 3
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PPUSH
14798: CALL_OW 69
14802: PUSH
14803: LD_INT 5
14805: DIFF
14806: PUSH
14807: FOR_IN
14808: IFFALSE 14824
// SetSide ( i , 2 ) ;
14810: LD_VAR 0 1
14814: PPUSH
14815: LD_INT 2
14817: PPUSH
14818: CALL_OW 235
14822: GO 14807
14824: POP
14825: POP
// wait ( 0 0$2 ) ;
14826: LD_INT 70
14828: PPUSH
14829: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14833: LD_EXP 29
14837: PPUSH
14838: LD_STRING DH-6-end
14840: PPUSH
14841: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14845: LD_INT 35
14847: PPUSH
14848: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_EXP 37
14861: PUSH
14862: LD_EXP 40
14866: ADD
14867: PPUSH
14868: LD_INT 95
14870: PUSH
14871: LD_INT 3
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PPUSH
14878: CALL_OW 72
14882: ST_TO_ADDR
// if tmp then
14883: LD_VAR 0 3
14887: IFFALSE 14931
// for i in tmp do
14889: LD_ADDR_VAR 0 1
14893: PUSH
14894: LD_VAR 0 3
14898: PUSH
14899: FOR_IN
14900: IFFALSE 14929
// begin farmerSquad := farmerSquad diff i ;
14902: LD_ADDR_EXP 40
14906: PUSH
14907: LD_EXP 40
14911: PUSH
14912: LD_VAR 0 1
14916: DIFF
14917: ST_TO_ADDR
// RemoveUnit ( i ) ;
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 64
// end ;
14927: GO 14899
14929: POP
14930: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14931: LD_EXP 40
14935: PUSH
14936: EMPTY
14937: EQUAL
14938: PUSH
14939: LD_EXP 37
14943: PPUSH
14944: CALL_OW 305
14948: NOT
14949: AND
14950: IFFALSE 14845
// if farmerHumanLoseCounter = 0 then
14952: LD_EXP 21
14956: PUSH
14957: LD_INT 0
14959: EQUAL
14960: IFFALSE 14969
// SetAchievement ( ACH_BABY ) ;
14962: LD_STRING ACH_BABY
14964: PPUSH
14965: CALL_OW 543
// wait ( 1 1$00 ) ;
14969: LD_INT 2100
14971: PPUSH
14972: CALL_OW 67
// SendAttack ;
14976: CALL 6110 0 0
// Say ( Heike , DH-7-end ) ;
14980: LD_EXP 29
14984: PPUSH
14985: LD_STRING DH-7-end
14987: PPUSH
14988: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
14992: LD_ADDR_VAR 0 1
14996: PUSH
14997: DOUBLE
14998: LD_INT 1
15000: DEC
15001: ST_TO_ADDR
15002: LD_INT 2
15004: PUSH
15005: LD_INT 3
15007: PUSH
15008: LD_INT 3
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: PUSH
15020: LD_OWVAR 67
15024: ARRAY
15025: PUSH
15026: FOR_TO
15027: IFFALSE 15083
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15029: LD_INT 4200
15031: PUSH
15032: LD_INT 3500
15034: PUSH
15035: LD_INT 3150
15037: PUSH
15038: LD_INT 2800
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: PUSH
15047: LD_OWVAR 67
15051: ARRAY
15052: PPUSH
15053: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15057: LD_EXP 12
15061: PUSH
15062: LD_EXP 22
15066: PUSH
15067: LD_INT 1
15069: LESS
15070: AND
15071: IFFALSE 15077
// exit ;
15073: POP
15074: POP
15075: GO 15085
// SendAttack ;
15077: CALL 6110 0 0
// end ;
15081: GO 15026
15083: POP
15084: POP
// end ;
15085: PPOPN 3
15087: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15088: LD_EXP 8
15092: PUSH
15093: LD_EXP 22
15097: PUSH
15098: LD_INT 0
15100: GREATER
15101: AND
15102: IFFALSE 15112
15104: GO 15106
15106: DISABLE
// begin enable ;
15107: ENABLE
// CargoEvacuation ;
15108: CALL 3583 0 0
// end ;
15112: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15113: LD_EXP 18
15117: PUSH
15118: LD_INT 18900
15120: LESSEQUAL
15121: IFFALSE 15170
15123: GO 15125
15125: DISABLE
// begin DialogueOn ;
15126: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15130: LD_EXP 37
15134: PPUSH
15135: LD_STRING DF-1-distribution-a
15137: PPUSH
15138: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15142: LD_EXP 29
15146: PPUSH
15147: LD_STRING DH-1-distribution-a
15149: PPUSH
15150: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15154: LD_EXP 37
15158: PPUSH
15159: LD_STRING DF-2-distribution-a
15161: PPUSH
15162: CALL_OW 94
// DialogueOff ;
15166: CALL_OW 7
// end ;
15170: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15171: LD_EXP 18
15175: PUSH
15176: LD_INT 0
15178: LESSEQUAL
15179: IFFALSE 15211
15181: GO 15183
15183: DISABLE
// begin DialogueOn ;
15184: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15188: LD_EXP 37
15192: PPUSH
15193: LD_STRING DF-3-distribution-a
15195: PPUSH
15196: CALL_OW 94
// YouLost ( Distribution ) ;
15200: LD_STRING Distribution
15202: PPUSH
15203: CALL_OW 104
// DialogueOff ;
15207: CALL_OW 7
// end ;
15211: END
// every 0 0$1 trigger vehCounter >= 2 do
15212: LD_EXP 23
15216: PUSH
15217: LD_INT 2
15219: GREATEREQUAL
15220: IFFALSE 15232
15222: GO 15224
15224: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15225: LD_STRING VehConstructed
15227: PPUSH
15228: CALL_OW 337
15232: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15233: LD_INT 22
15235: PUSH
15236: LD_INT 2
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 34
15245: PUSH
15246: LD_INT 12
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PPUSH
15257: CALL_OW 69
15261: IFFALSE 15321
15263: GO 15265
15265: DISABLE
// begin DialogueOn ;
15266: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15270: LD_EXP 29
15274: PPUSH
15275: LD_STRING DH-1-truck
15277: PPUSH
15278: CALL_OW 88
// if IsOk ( Markov ) then
15282: LD_EXP 36
15286: PPUSH
15287: CALL_OW 302
15291: IFFALSE 15317
// begin Say ( Markov , DMar-1-truck ) ;
15293: LD_EXP 36
15297: PPUSH
15298: LD_STRING DMar-1-truck
15300: PPUSH
15301: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15305: LD_EXP 29
15309: PPUSH
15310: LD_STRING DH-2-truck
15312: PPUSH
15313: CALL_OW 88
// end ; DialogueOff ;
15317: CALL_OW 7
// end ;
15321: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15322: LD_INT 0
15324: PPUSH
15325: PPUSH
15326: PPUSH
// if IsOk ( Givi ) then
15327: LD_EXP 30
15331: PPUSH
15332: CALL_OW 302
15336: IFFALSE 15352
// begin Say ( Givi , DG-1-nocargo ) ;
15338: LD_EXP 30
15342: PPUSH
15343: LD_STRING DG-1-nocargo
15345: PPUSH
15346: CALL_OW 88
// exit ;
15350: GO 15448
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15352: LD_ADDR_VAR 0 2
15356: PUSH
15357: LD_EXP 43
15361: PPUSH
15362: LD_INT 26
15364: PUSH
15365: LD_INT 1
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PPUSH
15372: CALL_OW 72
15376: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15377: LD_ADDR_VAR 0 3
15381: PUSH
15382: LD_EXP 43
15386: PPUSH
15387: LD_INT 26
15389: PUSH
15390: LD_INT 2
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PPUSH
15397: CALL_OW 72
15401: ST_TO_ADDR
// if randomMen then
15402: LD_VAR 0 2
15406: IFFALSE 15426
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15408: LD_VAR 0 2
15412: PUSH
15413: LD_INT 1
15415: ARRAY
15416: PPUSH
15417: LD_STRING DArm-1-nocargo
15419: PPUSH
15420: CALL_OW 88
15424: GO 15448
// if randomWomen then
15426: LD_VAR 0 3
15430: IFFALSE 15448
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15432: LD_VAR 0 3
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: LD_STRING DArf-1-nocargo
15443: PPUSH
15444: CALL_OW 88
// end ;
15448: LD_VAR 0 1
15452: RET
// export function IncomingAttack ; begin
15453: LD_INT 0
15455: PPUSH
// if attackWave = 1 then
15456: LD_EXP 20
15460: PUSH
15461: LD_INT 1
15463: EQUAL
15464: IFFALSE 15535
// begin DialogueOn ;
15466: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15470: LD_EXP 38
15474: PPUSH
15475: LD_STRING DO-1-radio-1
15477: PPUSH
15478: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15482: LD_EXP 29
15486: PPUSH
15487: LD_STRING DH-1-radio-1-
15489: PPUSH
15490: CALL_OW 88
// if IsOk ( Markov ) then
15494: LD_EXP 36
15498: PPUSH
15499: CALL_OW 302
15503: IFFALSE 15529
// begin Say ( Markov , DMar-1-radio-1 ) ;
15505: LD_EXP 36
15509: PPUSH
15510: LD_STRING DMar-1-radio-1
15512: PPUSH
15513: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15517: LD_EXP 29
15521: PPUSH
15522: LD_STRING DH-2-radio-1
15524: PPUSH
15525: CALL_OW 88
// end ; DialogueOff ;
15529: CALL_OW 7
// end else
15533: GO 15559
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15535: LD_EXP 38
15539: PPUSH
15540: LD_STRING DO-1-radio-u
15542: PPUSH
15543: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15547: LD_EXP 29
15551: PPUSH
15552: LD_STRING DH-1-radio-u
15554: PPUSH
15555: CALL_OW 88
// end ; end ;
15559: LD_VAR 0 1
15563: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15564: LD_EXP 45
15568: PPUSH
15569: LD_INT 95
15571: PUSH
15572: LD_INT 8
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PPUSH
15579: CALL_OW 72
15583: IFFALSE 15686
15585: GO 15587
15587: DISABLE
15588: LD_INT 0
15590: PPUSH
// begin enable ;
15591: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15592: LD_ADDR_VAR 0 1
15596: PUSH
15597: LD_EXP 45
15601: PPUSH
15602: LD_INT 95
15604: PUSH
15605: LD_INT 8
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PPUSH
15612: CALL_OW 72
15616: PUSH
15617: FOR_IN
15618: IFFALSE 15647
// begin usForces := usForces diff i ;
15620: LD_ADDR_EXP 45
15624: PUSH
15625: LD_EXP 45
15629: PUSH
15630: LD_VAR 0 1
15634: DIFF
15635: ST_TO_ADDR
// RemoveUnit ( i ) ;
15636: LD_VAR 0 1
15640: PPUSH
15641: CALL_OW 64
// end ;
15645: GO 15617
15647: POP
15648: POP
// if not americanHasEscaped and attackWave = 1 then
15649: LD_EXP 9
15653: NOT
15654: PUSH
15655: LD_EXP 20
15659: PUSH
15660: LD_INT 1
15662: EQUAL
15663: AND
15664: IFFALSE 15686
// begin americanHasEscaped := true ;
15666: LD_ADDR_EXP 9
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15674: LD_EXP 29
15678: PPUSH
15679: LD_STRING DH-2-assault-a
15681: PPUSH
15682: CALL_OW 88
// end ; end ;
15686: PPOPN 1
15688: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15689: LD_INT 4
15691: PPUSH
15692: LD_INT 22
15694: PUSH
15695: LD_INT 1
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PPUSH
15702: CALL_OW 70
15706: PUSH
15707: LD_EXP 12
15711: NOT
15712: AND
15713: IFFALSE 15730
15715: GO 15717
15717: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15718: LD_EXP 37
15722: PPUSH
15723: LD_STRING DF-1-attack
15725: PPUSH
15726: CALL_OW 94
15730: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15731: LD_INT 5
15733: PPUSH
15734: CALL_OW 255
15738: PUSH
15739: LD_INT 2
15741: EQUAL
15742: IFFALSE 15758
15744: GO 15746
15746: DISABLE
// begin enable ;
15747: ENABLE
// SetSide ( arDepot , 5 ) ;
15748: LD_INT 5
15750: PPUSH
15751: LD_INT 5
15753: PPUSH
15754: CALL_OW 235
// end ;
15758: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15759: LD_INT 22
15761: PUSH
15762: LD_INT 1
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 21
15771: PUSH
15772: LD_INT 1
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PPUSH
15783: CALL_OW 69
15787: NOT
15788: PUSH
15789: LD_INT 22
15791: PUSH
15792: LD_INT 4
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PPUSH
15799: CALL_OW 69
15803: NOT
15804: AND
15805: PUSH
15806: LD_EXP 12
15810: NOT
15811: AND
15812: PUSH
15813: LD_EXP 16
15817: PUSH
15818: LD_INT 90
15820: GREATER
15821: AND
15822: PUSH
15823: LD_INT 7
15825: PPUSH
15826: LD_INT 22
15828: PUSH
15829: LD_INT 2
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 21
15838: PUSH
15839: LD_INT 1
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PPUSH
15850: CALL_OW 70
15854: AND
15855: PUSH
15856: LD_INT 22
15858: PUSH
15859: LD_INT 2
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 50
15868: PUSH
15869: EMPTY
15870: LIST
15871: PUSH
15872: LD_INT 30
15874: PUSH
15875: LD_INT 0
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: LIST
15886: PPUSH
15887: CALL_OW 69
15891: AND
15892: IFFALSE 16685
15894: GO 15896
15896: DISABLE
15897: LD_INT 0
15899: PPUSH
15900: PPUSH
15901: PPUSH
15902: PPUSH
15903: PPUSH
// begin depot := usDepot ;
15904: LD_ADDR_VAR 0 5
15908: PUSH
15909: LD_INT 11
15911: ST_TO_ADDR
// if not depot then
15912: LD_VAR 0 5
15916: NOT
15917: IFFALSE 15957
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15919: LD_ADDR_VAR 0 5
15923: PUSH
15924: LD_INT 22
15926: PUSH
15927: LD_INT 2
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 30
15936: PUSH
15937: LD_INT 0
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PPUSH
15948: CALL_OW 69
15952: PUSH
15953: LD_INT 1
15955: ARRAY
15956: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15957: LD_ADDR_VAR 0 1
15961: PUSH
15962: LD_EXP 43
15966: PPUSH
15967: LD_INT 26
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PPUSH
15977: CALL_OW 72
15981: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15982: LD_ADDR_VAR 0 2
15986: PUSH
15987: LD_EXP 43
15991: PPUSH
15992: LD_INT 26
15994: PUSH
15995: LD_INT 2
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PPUSH
16002: CALL_OW 72
16006: ST_TO_ADDR
// if IsOk ( Kaia ) then
16007: LD_EXP 34
16011: PPUSH
16012: CALL_OW 302
16016: IFFALSE 16037
// speaker := [ Kaia , DK ] else
16018: LD_ADDR_VAR 0 3
16022: PUSH
16023: LD_EXP 34
16027: PUSH
16028: LD_STRING DK
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: ST_TO_ADDR
16035: GO 16117
// if randomMen then
16037: LD_VAR 0 1
16041: IFFALSE 16076
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16043: LD_ADDR_VAR 0 3
16047: PUSH
16048: LD_VAR 0 1
16052: PUSH
16053: LD_INT 1
16055: PPUSH
16056: LD_VAR 0 1
16060: PPUSH
16061: CALL_OW 12
16065: ARRAY
16066: PUSH
16067: LD_STRING DArm
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: ST_TO_ADDR
16074: GO 16117
// if randomWomen then
16076: LD_VAR 0 2
16080: IFFALSE 16115
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16082: LD_ADDR_VAR 0 3
16086: PUSH
16087: LD_VAR 0 2
16091: PUSH
16092: LD_INT 1
16094: PPUSH
16095: LD_VAR 0 2
16099: PPUSH
16100: CALL_OW 12
16104: ARRAY
16105: PUSH
16106: LD_STRING DArf
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: ST_TO_ADDR
16113: GO 16117
// exit ;
16115: GO 16685
// if IsInUnit ( speaker [ 1 ] ) then
16117: LD_VAR 0 3
16121: PUSH
16122: LD_INT 1
16124: ARRAY
16125: PPUSH
16126: CALL_OW 310
16130: IFFALSE 16153
// place := IsInUnit ( speaker [ 1 ] ) else
16132: LD_ADDR_VAR 0 4
16136: PUSH
16137: LD_VAR 0 3
16141: PUSH
16142: LD_INT 1
16144: ARRAY
16145: PPUSH
16146: CALL_OW 310
16150: ST_TO_ADDR
16151: GO 16167
// place := speaker [ 1 ] ;
16153: LD_ADDR_VAR 0 4
16157: PUSH
16158: LD_VAR 0 3
16162: PUSH
16163: LD_INT 1
16165: ARRAY
16166: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16167: LD_VAR 0 4
16171: PPUSH
16172: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16176: LD_VAR 0 4
16180: PPUSH
16181: CALL_OW 250
16185: PPUSH
16186: LD_VAR 0 4
16190: PPUSH
16191: CALL_OW 251
16195: PPUSH
16196: CALL 2070 0 2
// wait ( 0 0$2 ) ;
16200: LD_INT 70
16202: PPUSH
16203: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16207: LD_EXP 39
16211: PPUSH
16212: CALL_OW 305
16216: NOT
16217: IFFALSE 16221
// exit ;
16219: GO 16685
// allowConvoys := false ;
16221: LD_ADDR_EXP 13
16225: PUSH
16226: LD_INT 0
16228: ST_TO_ADDR
// InGameOn ;
16229: CALL_OW 8
// wait ( 0 0$1 ) ;
16233: LD_INT 35
16235: PPUSH
16236: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16240: LD_EXP 39
16244: PPUSH
16245: LD_STRING DI-1-land
16247: PPUSH
16248: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16252: LD_VAR 0 3
16256: PUSH
16257: LD_INT 1
16259: ARRAY
16260: PPUSH
16261: CALL_OW 310
16265: IFFALSE 16280
// ComExit ( speaker [ 1 ] ) ;
16267: LD_VAR 0 3
16271: PUSH
16272: LD_INT 1
16274: ARRAY
16275: PPUSH
16276: CALL 77642 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16280: LD_VAR 0 3
16284: PUSH
16285: LD_INT 1
16287: ARRAY
16288: PPUSH
16289: LD_EXP 39
16293: PPUSH
16294: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16298: LD_VAR 0 3
16302: PUSH
16303: LD_INT 1
16305: ARRAY
16306: PPUSH
16307: LD_EXP 39
16311: PPUSH
16312: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16316: LD_EXP 39
16320: PPUSH
16321: LD_VAR 0 3
16325: PUSH
16326: LD_INT 1
16328: ARRAY
16329: PPUSH
16330: CALL_OW 119
// wait ( 0 0$1 ) ;
16334: LD_INT 35
16336: PPUSH
16337: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16341: LD_VAR 0 3
16345: PUSH
16346: LD_INT 1
16348: ARRAY
16349: PPUSH
16350: LD_VAR 0 3
16354: PUSH
16355: LD_INT 2
16357: ARRAY
16358: PUSH
16359: LD_STRING -1-land
16361: STR
16362: PPUSH
16363: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16367: LD_EXP 39
16371: PPUSH
16372: LD_STRING DI-2-land
16374: PPUSH
16375: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16379: LD_VAR 0 3
16383: PUSH
16384: LD_INT 1
16386: ARRAY
16387: PPUSH
16388: LD_VAR 0 3
16392: PUSH
16393: LD_INT 2
16395: ARRAY
16396: PUSH
16397: LD_STRING -2-land
16399: STR
16400: PPUSH
16401: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16405: LD_VAR 0 3
16409: PUSH
16410: LD_INT 1
16412: ARRAY
16413: PPUSH
16414: LD_VAR 0 3
16418: PUSH
16419: LD_INT 2
16421: ARRAY
16422: PUSH
16423: LD_STRING -3-land
16425: STR
16426: PPUSH
16427: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16431: LD_EXP 29
16435: PPUSH
16436: LD_STRING DH-1-land
16438: PPUSH
16439: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16443: LD_VAR 0 5
16447: PPUSH
16448: CALL_OW 313
16452: PUSH
16453: LD_INT 6
16455: EQUAL
16456: IFFALSE 16476
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16458: LD_VAR 0 5
16462: PPUSH
16463: CALL_OW 313
16467: PUSH
16468: LD_INT 1
16470: ARRAY
16471: PPUSH
16472: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16476: LD_EXP 39
16480: PPUSH
16481: LD_INT 2
16483: PPUSH
16484: CALL_OW 235
// CenterOnUnits ( depot ) ;
16488: LD_VAR 0 5
16492: PPUSH
16493: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16497: LD_EXP 39
16501: PPUSH
16502: LD_VAR 0 5
16506: PPUSH
16507: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16511: LD_VAR 0 3
16515: PUSH
16516: LD_INT 1
16518: ARRAY
16519: PPUSH
16520: LD_VAR 0 5
16524: PPUSH
16525: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16529: LD_INT 35
16531: PPUSH
16532: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16536: LD_EXP 39
16540: PPUSH
16541: CALL_OW 310
16545: PUSH
16546: LD_EXP 39
16550: PPUSH
16551: CALL_OW 302
16555: NOT
16556: OR
16557: PUSH
16558: LD_VAR 0 5
16562: PPUSH
16563: CALL_OW 302
16567: NOT
16568: OR
16569: IFFALSE 16529
// InGameOff ;
16571: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16575: LD_EXP 39
16579: PPUSH
16580: CALL_OW 302
16584: NOT
16585: IFFALSE 16589
// exit ;
16587: GO 16685
// if not IsOk ( depot ) then
16589: LD_VAR 0 5
16593: PPUSH
16594: CALL_OW 302
16598: NOT
16599: IFFALSE 16662
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16601: LD_EXP 39
16605: PPUSH
16606: LD_INT 30
16608: PPUSH
16609: LD_INT 1
16611: PPUSH
16612: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16616: LD_INT 35
16618: PPUSH
16619: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16623: LD_EXP 39
16627: PPUSH
16628: LD_INT 30
16630: PPUSH
16631: LD_INT 1
16633: PPUSH
16634: CALL_OW 307
16638: PUSH
16639: LD_EXP 39
16643: PPUSH
16644: CALL_OW 301
16648: OR
16649: IFFALSE 16616
// RemoveUnit ( Ibrahim ) ;
16651: LD_EXP 39
16655: PPUSH
16656: CALL_OW 64
// exit ;
16660: GO 16685
// end ; ibrahimInDepot := true ;
16662: LD_ADDR_EXP 26
16666: PUSH
16667: LD_INT 1
16669: ST_TO_ADDR
// allowConvoys := true ;
16670: LD_ADDR_EXP 13
16674: PUSH
16675: LD_INT 1
16677: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16678: LD_STRING IbrahimInDepot
16680: PPUSH
16681: CALL_OW 97
// end ;
16685: PPOPN 5
16687: END
// export function IbrahimQuery ; begin
16688: LD_INT 0
16690: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16691: LD_STRING IbrahimQuery
16693: PPUSH
16694: CALL_OW 97
16698: PUSH
16699: LD_INT 1
16701: DOUBLE
16702: EQUAL
16703: IFTRUE 16707
16705: GO 17069
16707: POP
// begin allowConvoys := false ;
16708: LD_ADDR_EXP 13
16712: PUSH
16713: LD_INT 0
16715: ST_TO_ADDR
// ibrahimInDepot := false ;
16716: LD_ADDR_EXP 26
16720: PUSH
16721: LD_INT 0
16723: ST_TO_ADDR
// InGameOn ;
16724: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16728: LD_EXP 29
16732: PPUSH
16733: CALL_OW 87
// wait ( 0 0$1 ) ;
16737: LD_INT 35
16739: PPUSH
16740: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16744: LD_EXP 29
16748: PPUSH
16749: LD_STRING DH-1-interrogation
16751: PPUSH
16752: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16756: LD_EXP 39
16760: PPUSH
16761: LD_STRING DI-1-interrogation
16763: PPUSH
16764: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16768: LD_EXP 29
16772: PPUSH
16773: LD_STRING DH-2-interrogation
16775: PPUSH
16776: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16780: LD_EXP 39
16784: PPUSH
16785: LD_STRING DI-2-interrogation
16787: PPUSH
16788: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16792: LD_EXP 29
16796: PPUSH
16797: LD_STRING DH-3-interrogation
16799: PPUSH
16800: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16804: LD_EXP 39
16808: PPUSH
16809: LD_STRING DI-3-interrogation
16811: PPUSH
16812: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16816: LD_EXP 29
16820: PPUSH
16821: LD_STRING DH-4-interrogation
16823: PPUSH
16824: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16828: LD_EXP 39
16832: PPUSH
16833: LD_STRING DI-4-interrogation
16835: PPUSH
16836: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16840: LD_EXP 29
16844: PPUSH
16845: LD_STRING DH-5-interrogation
16847: PPUSH
16848: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16852: LD_EXP 39
16856: PPUSH
16857: LD_STRING DI-5-interrogation
16859: PPUSH
16860: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16864: LD_INT 10
16866: PPUSH
16867: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16871: LD_EXP 29
16875: PPUSH
16876: LD_STRING DH-6-interrogation
16878: PPUSH
16879: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16883: LD_EXP 39
16887: PPUSH
16888: LD_STRING DI-6-interrogation
16890: PPUSH
16891: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
16895: LD_EXP 39
16899: PPUSH
16900: LD_STRING DI-7-interrogation
16902: PPUSH
16903: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
16907: LD_EXP 29
16911: PPUSH
16912: LD_STRING DH-7-interrogation
16914: PPUSH
16915: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16919: LD_INT 10
16921: PPUSH
16922: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
16926: LD_EXP 29
16930: PPUSH
16931: LD_STRING DH-8-interrogation
16933: PPUSH
16934: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
16938: LD_EXP 39
16942: PPUSH
16943: LD_STRING DI-8-interrogation
16945: PPUSH
16946: CALL_OW 88
// wait ( 0 0$1 ) ;
16950: LD_INT 35
16952: PPUSH
16953: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16957: LD_STRING IbrahimDecisionQuery
16959: PPUSH
16960: CALL_OW 97
16964: PUSH
16965: LD_INT 1
16967: DOUBLE
16968: EQUAL
16969: IFTRUE 16973
16971: GO 16997
16973: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16974: LD_EXP 39
16978: PPUSH
16979: LD_STRING DI-1-kill
16981: PPUSH
16982: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16986: LD_EXP 39
16990: PPUSH
16991: CALL_OW 66
// end ; 2 :
16995: GO 17063
16997: LD_INT 2
16999: DOUBLE
17000: EQUAL
17001: IFTRUE 17005
17003: GO 17062
17005: POP
// begin SetSide ( Ibrahim , 6 ) ;
17006: LD_EXP 39
17010: PPUSH
17011: LD_INT 6
17013: PPUSH
17014: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17018: LD_EXP 39
17022: PPUSH
17023: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17027: LD_EXP 39
17031: PPUSH
17032: LD_INT 66
17034: PPUSH
17035: LD_INT 2
17037: PPUSH
17038: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17042: LD_EXP 39
17046: PPUSH
17047: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17051: LD_EXP 29
17055: PPUSH
17056: CALL_OW 122
// end ; end ;
17060: GO 17063
17062: POP
// InGameOff ;
17063: CALL_OW 9
// end ; 2 :
17067: GO 17083
17069: LD_INT 2
17071: DOUBLE
17072: EQUAL
17073: IFTRUE 17077
17075: GO 17082
17077: POP
// exit ; end ;
17078: GO 17159
17080: GO 17083
17082: POP
// allowConvoys := true ;
17083: LD_ADDR_EXP 13
17087: PUSH
17088: LD_INT 1
17090: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17091: LD_INT 5250
17093: PPUSH
17094: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17098: LD_INT 35
17100: PPUSH
17101: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17105: LD_INT 81
17107: PUSH
17108: LD_INT 2
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 21
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PPUSH
17129: CALL_OW 69
17133: NOT
17134: IFFALSE 17098
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17136: LD_EXP 39
17140: PPUSH
17141: LD_INT 34
17143: PPUSH
17144: LD_INT 21
17146: PPUSH
17147: CALL_OW 111
// ibrahimIsFree := true ;
17151: LD_ADDR_EXP 27
17155: PUSH
17156: LD_INT 1
17158: ST_TO_ADDR
// end ;
17159: LD_VAR 0 1
17163: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17164: LD_EXP 27
17168: PUSH
17169: LD_EXP 39
17173: PPUSH
17174: CALL_OW 302
17178: AND
17179: PUSH
17180: LD_INT 2
17182: PPUSH
17183: LD_EXP 39
17187: PPUSH
17188: CALL_OW 292
17192: AND
17193: IFFALSE 17960
17195: GO 17197
17197: DISABLE
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
17205: PPUSH
// begin wait ( 0 0$10 ) ;
17206: LD_INT 350
17208: PPUSH
17209: CALL_OW 67
// allowConvoys := false ;
17213: LD_ADDR_EXP 13
17217: PUSH
17218: LD_INT 0
17220: ST_TO_ADDR
// depot := usDepot ;
17221: LD_ADDR_VAR 0 4
17225: PUSH
17226: LD_INT 11
17228: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17229: LD_INT 11
17231: NOT
17232: PUSH
17233: LD_INT 22
17235: PUSH
17236: LD_INT 2
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 50
17245: PUSH
17246: EMPTY
17247: LIST
17248: PUSH
17249: LD_INT 30
17251: PUSH
17252: LD_INT 0
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 69
17268: AND
17269: IFFALSE 17316
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17271: LD_ADDR_VAR 0 4
17275: PUSH
17276: LD_INT 22
17278: PUSH
17279: LD_INT 2
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 50
17288: PUSH
17289: EMPTY
17290: LIST
17291: PUSH
17292: LD_INT 30
17294: PUSH
17295: LD_INT 0
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: LIST
17306: PPUSH
17307: CALL_OW 69
17311: PUSH
17312: LD_INT 1
17314: ARRAY
17315: ST_TO_ADDR
// InGameOn ;
17316: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17320: LD_EXP 39
17324: PPUSH
17325: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
17329: LD_EXP 39
17333: PPUSH
17334: LD_STRING DI-1-free
17336: PPUSH
17337: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
17341: LD_EXP 29
17345: PPUSH
17346: LD_EXP 39
17350: PPUSH
17351: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
17355: LD_EXP 29
17359: PPUSH
17360: LD_STRING DH-1-free
17362: PPUSH
17363: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
17367: LD_EXP 39
17371: PPUSH
17372: LD_EXP 29
17376: PPUSH
17377: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
17381: LD_EXP 39
17385: PPUSH
17386: LD_STRING DI-2-free
17388: PPUSH
17389: CALL_OW 88
// changeClass := 0 ;
17393: LD_ADDR_VAR 0 1
17397: PUSH
17398: LD_INT 0
17400: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17401: LD_STRING IbrahimJoinQuery
17403: PPUSH
17404: CALL_OW 97
17408: PUSH
17409: LD_INT 1
17411: DOUBLE
17412: EQUAL
17413: IFTRUE 17417
17415: GO 17428
17417: POP
// begin changeClass := 1 ;
17418: LD_ADDR_VAR 0 1
17422: PUSH
17423: LD_INT 1
17425: ST_TO_ADDR
// end ; 2 :
17426: GO 17668
17428: LD_INT 2
17430: DOUBLE
17431: EQUAL
17432: IFTRUE 17436
17434: GO 17588
17436: POP
// begin Say ( Heike , DH-1-decline ) ;
17437: LD_EXP 29
17441: PPUSH
17442: LD_STRING DH-1-decline
17444: PPUSH
17445: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17449: LD_EXP 39
17453: PPUSH
17454: LD_STRING DI-1-decline
17456: PPUSH
17457: CALL_OW 88
// InGameOff ;
17461: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17465: LD_EXP 39
17469: PPUSH
17470: LD_INT 30
17472: PPUSH
17473: LD_INT 1
17475: PPUSH
17476: CALL_OW 111
// p := 0 ;
17480: LD_ADDR_VAR 0 3
17484: PUSH
17485: LD_INT 0
17487: ST_TO_ADDR
// repeat p := p + 1 ;
17488: LD_ADDR_VAR 0 3
17492: PUSH
17493: LD_VAR 0 3
17497: PUSH
17498: LD_INT 1
17500: PLUS
17501: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17502: LD_INT 35
17504: PPUSH
17505: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17509: LD_EXP 39
17513: PPUSH
17514: LD_INT 30
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 307
17524: PUSH
17525: LD_INT 22
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 101
17537: PUSH
17538: LD_INT 6
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PPUSH
17549: CALL_OW 69
17553: NOT
17554: OR
17555: PUSH
17556: LD_VAR 0 3
17560: PUSH
17561: LD_INT 10
17563: GREATER
17564: OR
17565: IFFALSE 17488
// RemoveUnit ( Ibrahim ) ;
17567: LD_EXP 39
17571: PPUSH
17572: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17576: LD_INT 1
17578: PPUSH
17579: LD_STRING 03_IbrahimHasEscaped
17581: PPUSH
17582: CALL_OW 39
// end ; 3 :
17586: GO 17668
17588: LD_INT 3
17590: DOUBLE
17591: EQUAL
17592: IFTRUE 17596
17594: GO 17667
17596: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17597: LD_EXP 29
17601: PPUSH
17602: LD_STRING DH-1-radio-hq
17604: PPUSH
17605: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17609: LD_EXP 38
17613: PPUSH
17614: LD_STRING DO-1-radio-hq
17616: PPUSH
17617: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17621: LD_EXP 29
17625: PPUSH
17626: LD_STRING DH-2-radio-hq
17628: PPUSH
17629: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17633: LD_EXP 38
17637: PPUSH
17638: LD_STRING DO-2-radio-hq
17640: PPUSH
17641: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17645: LD_EXP 29
17649: PPUSH
17650: LD_STRING DH-3-radio-hq
17652: PPUSH
17653: CALL_OW 88
// changeClass := 1 ;
17657: LD_ADDR_VAR 0 1
17661: PUSH
17662: LD_INT 1
17664: ST_TO_ADDR
// end ; end ;
17665: GO 17668
17667: POP
// if changeClass then
17668: LD_VAR 0 1
17672: IFFALSE 17960
// begin Say ( Heike , DH-1-agree ) ;
17674: LD_EXP 29
17678: PPUSH
17679: LD_STRING DH-1-agree
17681: PPUSH
17682: CALL_OW 88
// if IsOk ( Givi ) then
17686: LD_EXP 30
17690: PPUSH
17691: CALL_OW 302
17695: IFFALSE 17733
// begin Say ( Givi , DG-1-agree ) ;
17697: LD_EXP 30
17701: PPUSH
17702: LD_STRING DG-1-agree
17704: PPUSH
17705: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17709: LD_EXP 29
17713: PPUSH
17714: LD_STRING DH-2-agree
17716: PPUSH
17717: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17721: LD_EXP 30
17725: PPUSH
17726: LD_STRING DG-2-agree
17728: PPUSH
17729: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17733: LD_VAR 0 4
17737: PPUSH
17738: CALL_OW 313
17742: PUSH
17743: LD_INT 6
17745: EQUAL
17746: IFFALSE 17766
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17748: LD_VAR 0 4
17752: PPUSH
17753: CALL_OW 313
17757: PUSH
17758: LD_INT 1
17760: ARRAY
17761: PPUSH
17762: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17766: LD_EXP 39
17770: PPUSH
17771: LD_INT 2
17773: PPUSH
17774: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17778: LD_ADDR_VAR 0 5
17782: PUSH
17783: LD_EXP 39
17787: PPUSH
17788: CALL_OW 250
17792: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17793: LD_ADDR_VAR 0 6
17797: PUSH
17798: LD_EXP 39
17802: PPUSH
17803: CALL_OW 251
17807: ST_TO_ADDR
// if depot then
17808: LD_VAR 0 4
17812: IFFALSE 17861
// begin ComEnterUnit ( Ibrahim , depot ) ;
17814: LD_EXP 39
17818: PPUSH
17819: LD_VAR 0 4
17823: PPUSH
17824: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17828: LD_INT 35
17830: PPUSH
17831: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17835: LD_EXP 39
17839: PPUSH
17840: CALL_OW 310
17844: IFFALSE 17828
// b := IsInUnit ( Ibrahim ) ;
17846: LD_ADDR_VAR 0 2
17850: PUSH
17851: LD_EXP 39
17855: PPUSH
17856: CALL_OW 310
17860: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17861: LD_EXP 39
17865: PPUSH
17866: CALL_OW 64
// uc_side := 2 ;
17870: LD_ADDR_OWVAR 20
17874: PUSH
17875: LD_INT 2
17877: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17878: LD_ADDR_EXP 39
17882: PUSH
17883: LD_STRING Ibrahim
17885: PPUSH
17886: LD_INT 0
17888: PPUSH
17889: LD_STRING 
17891: PPUSH
17892: CALL 39795 0 3
17896: ST_TO_ADDR
// if depot then
17897: LD_VAR 0 4
17901: IFFALSE 17919
// PlaceHumanInUnit ( Ibrahim , b ) else
17903: LD_EXP 39
17907: PPUSH
17908: LD_VAR 0 2
17912: PPUSH
17913: CALL_OW 52
17917: GO 17941
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17919: LD_EXP 39
17923: PPUSH
17924: LD_VAR 0 5
17928: PPUSH
17929: LD_VAR 0 6
17933: PPUSH
17934: LD_INT 0
17936: PPUSH
17937: CALL_OW 48
// InGameOff ;
17941: CALL_OW 9
// allowConvoys := true ;
17945: LD_ADDR_EXP 13
17949: PUSH
17950: LD_INT 1
17952: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17953: LD_STRING ACH_IBRAHIM
17955: PPUSH
17956: CALL_OW 543
// end ; end ;
17960: PPOPN 6
17962: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17963: LD_EXP 34
17967: PPUSH
17968: CALL_OW 256
17972: PUSH
17973: LD_INT 3
17975: LESS
17976: IFFALSE 18043
17978: GO 17980
17980: DISABLE
// begin DialogueOn ;
17981: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17985: LD_EXP 34
17989: PPUSH
17990: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17994: LD_EXP 34
17998: PPUSH
17999: LD_STRING DK-keydeath-1
18001: PPUSH
18002: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18006: LD_EXP 29
18010: PPUSH
18011: LD_STRING DH-keydeath-2
18013: PPUSH
18014: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18018: LD_EXP 29
18022: PPUSH
18023: LD_STRING DH-keydeath-3
18025: PPUSH
18026: CALL_OW 88
// DialogueOff ;
18030: CALL_OW 7
// KillUnit ( Kaia ) ;
18034: LD_EXP 34
18038: PPUSH
18039: CALL_OW 66
// end ;
18043: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18044: LD_EXP 12
18048: PUSH
18049: LD_EXP 22
18053: PUSH
18054: LD_INT 1
18056: LESS
18057: AND
18058: IFFALSE 18598
18060: GO 18062
18062: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18063: LD_INT 22
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: LD_INT 25
18078: PUSH
18079: LD_INT 1
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 25
18088: PUSH
18089: LD_INT 3
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PPUSH
18105: CALL_OW 69
18109: IFFALSE 18187
// begin ChangeSideFog ( 1 , 2 ) ;
18111: LD_INT 1
18113: PPUSH
18114: LD_INT 2
18116: PPUSH
18117: CALL_OW 343
// Query ( DestroyEnemy ) ;
18121: LD_STRING DestroyEnemy
18123: PPUSH
18124: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18128: LD_INT 35
18130: PPUSH
18131: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18135: LD_INT 22
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 2
18147: PUSH
18148: LD_INT 25
18150: PUSH
18151: LD_INT 1
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 25
18160: PUSH
18161: LD_INT 3
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PPUSH
18177: CALL_OW 69
18181: PUSH
18182: LD_INT 0
18184: EQUAL
18185: IFFALSE 18128
// end ; DialogueOn ;
18187: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18191: LD_EXP 29
18195: PPUSH
18196: LD_STRING DH-1-final
18198: PPUSH
18199: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18203: LD_OWVAR 1
18207: PUSH
18208: LD_INT 138600
18210: PUSH
18211: LD_INT 134400
18213: PUSH
18214: LD_INT 130200
18216: PUSH
18217: LD_INT 126000
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: PUSH
18226: LD_OWVAR 67
18230: ARRAY
18231: LESSEQUAL
18232: IFFALSE 18246
// AddMedal ( med1 , 1 ) else
18234: LD_STRING med1
18236: PPUSH
18237: LD_INT 1
18239: PPUSH
18240: CALL_OW 101
18244: GO 18257
// AddMedal ( med1 , - 1 ) ;
18246: LD_STRING med1
18248: PPUSH
18249: LD_INT 1
18251: NEG
18252: PPUSH
18253: CALL_OW 101
// if vehCounter >= 2 then
18257: LD_EXP 23
18261: PUSH
18262: LD_INT 2
18264: GREATEREQUAL
18265: IFFALSE 18279
// AddMedal ( med2 , 1 ) else
18267: LD_STRING med2
18269: PPUSH
18270: LD_INT 1
18272: PPUSH
18273: CALL_OW 101
18277: GO 18290
// AddMedal ( med2 , - 1 ) ;
18279: LD_STRING med2
18281: PPUSH
18282: LD_INT 1
18284: NEG
18285: PPUSH
18286: CALL_OW 101
// if deadCounter = 0 then
18290: LD_EXP 10
18294: PUSH
18295: LD_INT 0
18297: EQUAL
18298: IFFALSE 18312
// AddMedal ( med3 , 1 ) else
18300: LD_STRING med3
18302: PPUSH
18303: LD_INT 1
18305: PPUSH
18306: CALL_OW 101
18310: GO 18323
// AddMedal ( med3 , - 1 ) ;
18312: LD_STRING med3
18314: PPUSH
18315: LD_INT 1
18317: NEG
18318: PPUSH
18319: CALL_OW 101
// GiveMedals ( MAIN ) ;
18323: LD_STRING MAIN
18325: PPUSH
18326: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18330: LD_INT 22
18332: PUSH
18333: LD_INT 2
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 23
18342: PUSH
18343: LD_INT 2
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 21
18352: PUSH
18353: LD_INT 1
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: LIST
18364: PPUSH
18365: CALL_OW 69
18369: PPUSH
18370: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18374: LD_EXP 29
18378: PPUSH
18379: LD_STRING 03_Heike
18381: PPUSH
18382: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18386: LD_EXP 33
18390: PPUSH
18391: LD_STRING 03_Aviradze
18393: PPUSH
18394: CALL_OW 38
// if Givi then
18398: LD_EXP 30
18402: IFFALSE 18416
// SaveCharacters ( Givi , 03_Givi ) ;
18404: LD_EXP 30
18408: PPUSH
18409: LD_STRING 03_Givi
18411: PPUSH
18412: CALL_OW 38
// if Mike then
18416: LD_EXP 31
18420: IFFALSE 18434
// SaveCharacters ( Mike , 03_Mike ) ;
18422: LD_EXP 31
18426: PPUSH
18427: LD_STRING 03_Mike
18429: PPUSH
18430: CALL_OW 38
// if Kamil then
18434: LD_EXP 32
18438: IFFALSE 18452
// SaveCharacters ( Kamil , 03_Kamil ) ;
18440: LD_EXP 32
18444: PPUSH
18445: LD_STRING 03_Kamil
18447: PPUSH
18448: CALL_OW 38
// if Kaia then
18452: LD_EXP 34
18456: IFFALSE 18470
// SaveCharacters ( Kaia , 03_Kaia ) ;
18458: LD_EXP 34
18462: PPUSH
18463: LD_STRING 03_Kaia
18465: PPUSH
18466: CALL_OW 38
// if Sophia then
18470: LD_EXP 35
18474: IFFALSE 18488
// SaveCharacters ( Sophia , 03_Sophia ) ;
18476: LD_EXP 35
18480: PPUSH
18481: LD_STRING 03_Sophia
18483: PPUSH
18484: CALL_OW 38
// if Markov then
18488: LD_EXP 36
18492: IFFALSE 18506
// SaveCharacters ( Markov , 03_Markov ) ;
18494: LD_EXP 36
18498: PPUSH
18499: LD_STRING 03_Markov
18501: PPUSH
18502: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18506: LD_EXP 39
18510: PUSH
18511: LD_EXP 39
18515: PPUSH
18516: CALL_OW 255
18520: PUSH
18521: LD_INT 2
18523: EQUAL
18524: AND
18525: IFFALSE 18546
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18527: LD_STRING enableBioCharacter(BIO_IBRA)
18529: PPUSH
18530: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18534: LD_EXP 39
18538: PPUSH
18539: LD_STRING 03_Ibrahim
18541: PPUSH
18542: CALL_OW 38
// end ; if heikeSecondSquad then
18546: LD_EXP 43
18550: IFFALSE 18564
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18552: LD_EXP 43
18556: PPUSH
18557: LD_STRING 03_others
18559: PPUSH
18560: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18564: LD_EXP 10
18568: PPUSH
18569: LD_STRING 03_DeadCounter
18571: PPUSH
18572: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18576: LD_STRING enableBioCharacter(BIO_OMAR)
18578: PPUSH
18579: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18583: LD_STRING enableBioCharacter(BIO_FARM)
18585: PPUSH
18586: CALL_OW 559
// YouWin ;
18590: CALL_OW 103
// DialogueOff ;
18594: CALL_OW 7
// end ; end_of_file
18598: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18599: LD_VAR 0 1
18603: PPUSH
18604: CALL 35506 0 1
// if un = Heike then
18608: LD_VAR 0 1
18612: PUSH
18613: LD_EXP 29
18617: EQUAL
18618: IFFALSE 18627
// YouLost ( Heike ) ;
18620: LD_STRING Heike
18622: PPUSH
18623: CALL_OW 104
// if un = Aviradze then
18627: LD_VAR 0 1
18631: PUSH
18632: LD_EXP 33
18636: EQUAL
18637: IFFALSE 18646
// YouLost ( Aviradze ) ;
18639: LD_STRING Aviradze
18641: PPUSH
18642: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18646: LD_VAR 0 1
18650: PUSH
18651: LD_INT 11
18653: EQUAL
18654: PUSH
18655: LD_EXP 12
18659: NOT
18660: AND
18661: IFFALSE 18670
// YouLost ( Depot ) ;
18663: LD_STRING Depot
18665: PPUSH
18666: CALL_OW 104
// if un = arDepot then
18670: LD_VAR 0 1
18674: PUSH
18675: LD_INT 5
18677: EQUAL
18678: IFFALSE 18687
// YouLost ( FarmerDepot ) ;
18680: LD_STRING FarmerDepot
18682: PPUSH
18683: CALL_OW 104
// if un = Farmer then
18687: LD_VAR 0 1
18691: PUSH
18692: LD_EXP 37
18696: EQUAL
18697: IFFALSE 18706
// YouLost ( Farmer ) ;
18699: LD_STRING Farmer
18701: PPUSH
18702: CALL_OW 104
// if un in usForces then
18706: LD_VAR 0 1
18710: PUSH
18711: LD_EXP 45
18715: IN
18716: IFFALSE 18734
// usForces := usForces diff un ;
18718: LD_ADDR_EXP 45
18722: PUSH
18723: LD_EXP 45
18727: PUSH
18728: LD_VAR 0 1
18732: DIFF
18733: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18734: LD_VAR 0 1
18738: PUSH
18739: LD_INT 22
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 23
18751: PUSH
18752: LD_INT 2
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 21
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: LIST
18773: PPUSH
18774: CALL_OW 69
18778: IN
18779: IFFALSE 18795
// deadCounter := deadCounter + 1 ;
18781: LD_ADDR_EXP 10
18785: PUSH
18786: LD_EXP 10
18790: PUSH
18791: LD_INT 1
18793: PLUS
18794: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18795: LD_VAR 0 1
18799: PUSH
18800: LD_INT 22
18802: PUSH
18803: LD_INT 4
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 34
18812: PUSH
18813: LD_INT 12
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PPUSH
18824: CALL_OW 69
18828: IN
18829: PUSH
18830: LD_EXP 19
18834: NOT
18835: AND
18836: IFFALSE 18846
// firstConvoyDestroyed := true ;
18838: LD_ADDR_EXP 19
18842: PUSH
18843: LD_INT 1
18845: ST_TO_ADDR
// if un in usAttackers then
18846: LD_VAR 0 1
18850: PUSH
18851: LD_EXP 48
18855: IN
18856: IFFALSE 18874
// usAttackers := usAttackers diff un ;
18858: LD_ADDR_EXP 48
18862: PUSH
18863: LD_EXP 48
18867: PUSH
18868: LD_VAR 0 1
18872: DIFF
18873: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18874: LD_VAR 0 1
18878: PUSH
18879: LD_INT 22
18881: PUSH
18882: LD_INT 5
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 21
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PPUSH
18903: CALL_OW 69
18907: IN
18908: IFFALSE 18924
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18910: LD_ADDR_EXP 21
18914: PUSH
18915: LD_EXP 21
18919: PUSH
18920: LD_INT 1
18922: PLUS
18923: ST_TO_ADDR
// end ;
18924: PPOPN 1
18926: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18927: LD_VAR 0 2
18931: PUSH
18932: LD_EXP 39
18936: EQUAL
18937: PUSH
18938: LD_EXP 26
18942: AND
18943: IFFALSE 19128
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18945: LD_INT 22
18947: PUSH
18948: LD_INT 2
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 30
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 50
18967: PUSH
18968: EMPTY
18969: LIST
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: PPUSH
18976: CALL_OW 69
18980: IFFALSE 19034
// begin InGameOn ;
18982: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18986: LD_EXP 39
18990: PPUSH
18991: LD_INT 11
18993: PPUSH
18994: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18998: LD_INT 35
19000: PPUSH
19001: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19005: LD_EXP 39
19009: PPUSH
19010: LD_INT 11
19012: PPUSH
19013: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19017: LD_EXP 39
19021: PPUSH
19022: CALL_OW 310
19026: IFFALSE 18998
// InGameOff ;
19028: CALL_OW 9
// end else
19032: GO 19128
// begin SetSide ( Ibrahim , 6 ) ;
19034: LD_EXP 39
19038: PPUSH
19039: LD_INT 6
19041: PPUSH
19042: CALL_OW 235
// ibrahimInDepot := false ;
19046: LD_ADDR_EXP 26
19050: PUSH
19051: LD_INT 0
19053: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19054: LD_EXP 39
19058: PPUSH
19059: LD_INT 30
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19069: LD_INT 35
19071: PPUSH
19072: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19076: LD_EXP 39
19080: PPUSH
19081: LD_INT 30
19083: PPUSH
19084: LD_INT 1
19086: PPUSH
19087: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19091: LD_EXP 39
19095: PPUSH
19096: LD_INT 30
19098: PPUSH
19099: LD_INT 1
19101: PPUSH
19102: CALL_OW 307
19106: PUSH
19107: LD_EXP 39
19111: PPUSH
19112: CALL_OW 301
19116: OR
19117: IFFALSE 19069
// RemoveUnit ( Ibrahim ) ;
19119: LD_EXP 39
19123: PPUSH
19124: CALL_OW 64
// end ; end ; end ;
19128: PPOPN 2
19130: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19131: LD_VAR 0 2
19135: PUSH
19136: LD_EXP 29
19140: EQUAL
19141: PUSH
19142: LD_VAR 0 1
19146: PUSH
19147: LD_INT 11
19149: EQUAL
19150: AND
19151: PUSH
19152: LD_EXP 26
19156: AND
19157: IFFALSE 19163
// IbrahimQuery ;
19159: CALL 16688 0 0
// end ;
19163: PPOPN 2
19165: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19166: LD_VAR 0 1
19170: PPUSH
19171: CALL_OW 141
// if oldId in usAttackers then
19175: LD_VAR 0 2
19179: PUSH
19180: LD_EXP 48
19184: IN
19185: IFFALSE 19203
// usAttackers := usAttackers diff oldId ;
19187: LD_ADDR_EXP 48
19191: PUSH
19192: LD_EXP 48
19196: PUSH
19197: LD_VAR 0 2
19201: DIFF
19202: ST_TO_ADDR
// if newId in usAttackers then
19203: LD_VAR 0 1
19207: PUSH
19208: LD_EXP 48
19212: IN
19213: IFFALSE 19231
// usAttackers := usAttackers diff newId ;
19215: LD_ADDR_EXP 48
19219: PUSH
19220: LD_EXP 48
19224: PUSH
19225: LD_VAR 0 1
19229: DIFF
19230: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19231: LD_VAR 0 3
19235: PUSH
19236: LD_INT 4
19238: EQUAL
19239: PUSH
19240: LD_EXP 19
19244: NOT
19245: AND
19246: IFFALSE 19256
// firstConvoyDestroyed := true ;
19248: LD_ADDR_EXP 19
19252: PUSH
19253: LD_INT 1
19255: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19256: LD_VAR 0 1
19260: PPUSH
19261: CALL_OW 264
19265: PUSH
19266: LD_INT 12
19268: EQUAL
19269: IFFALSE 19307
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19271: LD_ADDR_EXP 14
19275: PUSH
19276: LD_EXP 14
19280: PUSH
19281: LD_INT 1
19283: PLUS
19284: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19285: LD_VAR 0 1
19289: PPUSH
19290: LD_INT 1
19292: PPUSH
19293: CALL_OW 289
19297: PUSH
19298: LD_INT 0
19300: EQUAL
19301: IFFALSE 19307
// EmptyCargoDialog ;
19303: CALL 15322 0 0
// end ; end ;
19307: PPOPN 4
19309: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19310: LD_VAR 0 1
19314: PUSH
19315: LD_INT 2
19317: EQUAL
19318: PUSH
19319: LD_VAR 0 2
19323: PUSH
19324: LD_INT 5
19326: EQUAL
19327: AND
19328: IFFALSE 19337
// YouLost ( Attack ) ;
19330: LD_STRING Attack
19332: PPUSH
19333: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19337: LD_VAR 0 1
19341: PUSH
19342: LD_INT 2
19344: EQUAL
19345: PUSH
19346: LD_VAR 0 2
19350: PUSH
19351: LD_INT 1
19353: EQUAL
19354: AND
19355: IFFALSE 19365
// americanContact := true ;
19357: LD_ADDR_EXP 5
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// end ;
19365: PPOPN 2
19367: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19368: LD_VAR 0 1
19372: PPUSH
19373: CALL_OW 255
19377: PUSH
19378: LD_INT 1
19380: EQUAL
19381: PUSH
19382: LD_EXP 7
19386: NOT
19387: AND
19388: IFFALSE 19522
// begin if GetBType ( b ) = b_lab then
19390: LD_VAR 0 1
19394: PPUSH
19395: CALL_OW 266
19399: PUSH
19400: LD_INT 6
19402: EQUAL
19403: IFFALSE 19443
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19405: LD_EXP 45
19409: PPUSH
19410: LD_INT 25
19412: PUSH
19413: LD_INT 4
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PPUSH
19420: CALL_OW 72
19424: PPUSH
19425: LD_VAR 0 1
19429: PPUSH
19430: CALL_OW 120
// AmLabResearch ( b ) ;
19434: LD_VAR 0 1
19438: PPUSH
19439: CALL 5126 0 1
// end ; if GetBType ( b ) = b_armoury then
19443: LD_VAR 0 1
19447: PPUSH
19448: CALL_OW 266
19452: PUSH
19453: LD_INT 4
19455: EQUAL
19456: IFFALSE 19504
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19458: LD_EXP 45
19462: PPUSH
19463: LD_INT 25
19465: PUSH
19466: LD_INT 1
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 3
19475: PUSH
19476: LD_INT 54
19478: PUSH
19479: EMPTY
19480: LIST
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PPUSH
19490: CALL_OW 72
19494: PPUSH
19495: LD_VAR 0 1
19499: PPUSH
19500: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19504: LD_ADDR_EXP 47
19508: PUSH
19509: LD_EXP 47
19513: PPUSH
19514: LD_INT 1
19516: PPUSH
19517: CALL_OW 3
19521: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19522: LD_VAR 0 1
19526: PPUSH
19527: CALL_OW 255
19531: PUSH
19532: LD_INT 5
19534: EQUAL
19535: IFFALSE 19549
// SetBLevel ( b , 5 ) ;
19537: LD_VAR 0 1
19541: PPUSH
19542: LD_INT 5
19544: PPUSH
19545: CALL_OW 241
// end ;
19549: PPOPN 1
19551: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19552: LD_VAR 0 1
19556: PPUSH
19557: CALL_OW 255
19561: PUSH
19562: LD_INT 2
19564: EQUAL
19565: IFFALSE 19581
// vehCounter := vehCounter + 1 ;
19567: LD_ADDR_EXP 23
19571: PUSH
19572: LD_EXP 23
19576: PUSH
19577: LD_INT 1
19579: PLUS
19580: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19581: LD_VAR 0 1
19585: PPUSH
19586: LD_VAR 0 2
19590: PPUSH
19591: CALL 35626 0 2
// end ;
19595: PPOPN 2
19597: END
// on SailEvent ( event ) do begin if event = eventAttack then
19598: LD_VAR 0 1
19602: PUSH
19603: LD_EXP 25
19607: EQUAL
19608: IFFALSE 19614
// AmericanAttack ;
19610: CALL 6743 0 0
// end ; end_of_file
19614: PPOPN 1
19616: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19617: LD_OWVAR 1
19621: PUSH
19622: LD_INT 10500
19624: PUSH
19625: LD_INT 9800
19627: PUSH
19628: LD_INT 9450
19630: PUSH
19631: LD_INT 9100
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: PUSH
19640: LD_OWVAR 67
19644: ARRAY
19645: LESSEQUAL
19646: IFFALSE 19673
19648: GO 19650
19650: DISABLE
// begin enable ;
19651: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19652: LD_INT 1
19654: PPUSH
19655: LD_INT 5
19657: PPUSH
19658: CALL_OW 12
19662: PPUSH
19663: LD_INT 9
19665: PPUSH
19666: LD_INT 1
19668: PPUSH
19669: CALL_OW 55
// end ;
19673: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19674: LD_EXP 7
19678: PUSH
19679: LD_OWVAR 1
19683: PUSH
19684: LD_INT 94500
19686: LESSEQUAL
19687: AND
19688: IFFALSE 19715
19690: GO 19692
19692: DISABLE
// begin enable ;
19693: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19694: LD_INT 3
19696: PPUSH
19697: LD_INT 5
19699: PPUSH
19700: CALL_OW 12
19704: PPUSH
19705: LD_INT 9
19707: PPUSH
19708: LD_INT 1
19710: PPUSH
19711: CALL_OW 55
// end ; end_of_file
19715: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19716: LD_EXP 12
19720: NOT
19721: PUSH
19722: LD_EXP 17
19726: AND
19727: PUSH
19728: LD_EXP 4
19732: AND
19733: PUSH
19734: LD_EXP 16
19738: PUSH
19739: LD_EXP 17
19743: LESSEQUAL
19744: AND
19745: IFFALSE 19856
19747: GO 19749
19749: DISABLE
// begin enable ;
19750: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19751: LD_ADDR_OWVAR 47
19755: PUSH
19756: LD_STRING #X103-1
19758: PUSH
19759: LD_EXP 17
19763: PUSH
19764: LD_EXP 16
19768: MINUS
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19774: LD_ADDR_EXP 16
19778: PUSH
19779: LD_INT 5
19781: PPUSH
19782: CALL_OW 274
19786: PPUSH
19787: LD_INT 1
19789: PPUSH
19790: CALL_OW 275
19794: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19795: LD_INT 10
19797: PPUSH
19798: LD_INT 1
19800: PPUSH
19801: CALL_OW 287
19805: PUSH
19806: LD_INT 0
19808: EQUAL
19809: IFFALSE 19827
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19811: LD_ADDR_EXP 18
19815: PUSH
19816: LD_EXP 18
19820: PUSH
19821: LD_INT 35
19823: MINUS
19824: ST_TO_ADDR
19825: GO 19856
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
19827: LD_ADDR_EXP 18
19831: PUSH
19832: LD_INT 42000
19834: PUSH
19835: LD_INT 31500
19837: PUSH
19838: LD_INT 25200
19840: PUSH
19841: LD_INT 21000
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: PUSH
19850: LD_OWVAR 67
19854: ARRAY
19855: ST_TO_ADDR
// end ; end_of_file
19856: END
// every 0 0$1 do
19857: GO 19859
19859: DISABLE
// begin enable ;
19860: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19861: LD_STRING updateTimer(
19863: PUSH
19864: LD_OWVAR 1
19868: STR
19869: PUSH
19870: LD_STRING );
19872: STR
19873: PPUSH
19874: CALL_OW 559
// end ;
19878: END
// export function SOS_MapStart ( ) ; begin
19879: LD_INT 0
19881: PPUSH
// if streamModeActive then
19882: LD_EXP 49
19886: IFFALSE 19895
// DefineStreamItems ( true ) ;
19888: LD_INT 1
19890: PPUSH
19891: CALL 21549 0 1
// UpdateFactoryWaypoints ( ) ;
19895: CALL 34410 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19899: CALL 34667 0 0
// end ;
19903: LD_VAR 0 1
19907: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19908: LD_INT 0
19910: PPUSH
// if p2 = hack_mode then
19911: LD_VAR 0 2
19915: PUSH
19916: LD_INT 100
19918: EQUAL
19919: IFFALSE 20922
// begin if not StreamModeActive then
19921: LD_EXP 49
19925: NOT
19926: IFFALSE 19936
// StreamModeActive := true ;
19928: LD_ADDR_EXP 49
19932: PUSH
19933: LD_INT 1
19935: ST_TO_ADDR
// if p3 = 0 then
19936: LD_VAR 0 3
19940: PUSH
19941: LD_INT 0
19943: EQUAL
19944: IFFALSE 19950
// InitStreamMode ;
19946: CALL 21085 0 0
// if p3 = 1 then
19950: LD_VAR 0 3
19954: PUSH
19955: LD_INT 1
19957: EQUAL
19958: IFFALSE 19968
// sRocket := true ;
19960: LD_ADDR_EXP 54
19964: PUSH
19965: LD_INT 1
19967: ST_TO_ADDR
// if p3 = 2 then
19968: LD_VAR 0 3
19972: PUSH
19973: LD_INT 2
19975: EQUAL
19976: IFFALSE 19986
// sSpeed := true ;
19978: LD_ADDR_EXP 53
19982: PUSH
19983: LD_INT 1
19985: ST_TO_ADDR
// if p3 = 3 then
19986: LD_VAR 0 3
19990: PUSH
19991: LD_INT 3
19993: EQUAL
19994: IFFALSE 20004
// sEngine := true ;
19996: LD_ADDR_EXP 55
20000: PUSH
20001: LD_INT 1
20003: ST_TO_ADDR
// if p3 = 4 then
20004: LD_VAR 0 3
20008: PUSH
20009: LD_INT 4
20011: EQUAL
20012: IFFALSE 20022
// sSpec := true ;
20014: LD_ADDR_EXP 52
20018: PUSH
20019: LD_INT 1
20021: ST_TO_ADDR
// if p3 = 5 then
20022: LD_VAR 0 3
20026: PUSH
20027: LD_INT 5
20029: EQUAL
20030: IFFALSE 20040
// sLevel := true ;
20032: LD_ADDR_EXP 56
20036: PUSH
20037: LD_INT 1
20039: ST_TO_ADDR
// if p3 = 6 then
20040: LD_VAR 0 3
20044: PUSH
20045: LD_INT 6
20047: EQUAL
20048: IFFALSE 20058
// sArmoury := true ;
20050: LD_ADDR_EXP 57
20054: PUSH
20055: LD_INT 1
20057: ST_TO_ADDR
// if p3 = 7 then
20058: LD_VAR 0 3
20062: PUSH
20063: LD_INT 7
20065: EQUAL
20066: IFFALSE 20076
// sRadar := true ;
20068: LD_ADDR_EXP 58
20072: PUSH
20073: LD_INT 1
20075: ST_TO_ADDR
// if p3 = 8 then
20076: LD_VAR 0 3
20080: PUSH
20081: LD_INT 8
20083: EQUAL
20084: IFFALSE 20094
// sBunker := true ;
20086: LD_ADDR_EXP 59
20090: PUSH
20091: LD_INT 1
20093: ST_TO_ADDR
// if p3 = 9 then
20094: LD_VAR 0 3
20098: PUSH
20099: LD_INT 9
20101: EQUAL
20102: IFFALSE 20112
// sHack := true ;
20104: LD_ADDR_EXP 60
20108: PUSH
20109: LD_INT 1
20111: ST_TO_ADDR
// if p3 = 10 then
20112: LD_VAR 0 3
20116: PUSH
20117: LD_INT 10
20119: EQUAL
20120: IFFALSE 20130
// sFire := true ;
20122: LD_ADDR_EXP 61
20126: PUSH
20127: LD_INT 1
20129: ST_TO_ADDR
// if p3 = 11 then
20130: LD_VAR 0 3
20134: PUSH
20135: LD_INT 11
20137: EQUAL
20138: IFFALSE 20148
// sRefresh := true ;
20140: LD_ADDR_EXP 62
20144: PUSH
20145: LD_INT 1
20147: ST_TO_ADDR
// if p3 = 12 then
20148: LD_VAR 0 3
20152: PUSH
20153: LD_INT 12
20155: EQUAL
20156: IFFALSE 20166
// sExp := true ;
20158: LD_ADDR_EXP 63
20162: PUSH
20163: LD_INT 1
20165: ST_TO_ADDR
// if p3 = 13 then
20166: LD_VAR 0 3
20170: PUSH
20171: LD_INT 13
20173: EQUAL
20174: IFFALSE 20184
// sDepot := true ;
20176: LD_ADDR_EXP 64
20180: PUSH
20181: LD_INT 1
20183: ST_TO_ADDR
// if p3 = 14 then
20184: LD_VAR 0 3
20188: PUSH
20189: LD_INT 14
20191: EQUAL
20192: IFFALSE 20202
// sFlag := true ;
20194: LD_ADDR_EXP 65
20198: PUSH
20199: LD_INT 1
20201: ST_TO_ADDR
// if p3 = 15 then
20202: LD_VAR 0 3
20206: PUSH
20207: LD_INT 15
20209: EQUAL
20210: IFFALSE 20220
// sKamikadze := true ;
20212: LD_ADDR_EXP 73
20216: PUSH
20217: LD_INT 1
20219: ST_TO_ADDR
// if p3 = 16 then
20220: LD_VAR 0 3
20224: PUSH
20225: LD_INT 16
20227: EQUAL
20228: IFFALSE 20238
// sTroll := true ;
20230: LD_ADDR_EXP 74
20234: PUSH
20235: LD_INT 1
20237: ST_TO_ADDR
// if p3 = 17 then
20238: LD_VAR 0 3
20242: PUSH
20243: LD_INT 17
20245: EQUAL
20246: IFFALSE 20256
// sSlow := true ;
20248: LD_ADDR_EXP 75
20252: PUSH
20253: LD_INT 1
20255: ST_TO_ADDR
// if p3 = 18 then
20256: LD_VAR 0 3
20260: PUSH
20261: LD_INT 18
20263: EQUAL
20264: IFFALSE 20274
// sLack := true ;
20266: LD_ADDR_EXP 76
20270: PUSH
20271: LD_INT 1
20273: ST_TO_ADDR
// if p3 = 19 then
20274: LD_VAR 0 3
20278: PUSH
20279: LD_INT 19
20281: EQUAL
20282: IFFALSE 20292
// sTank := true ;
20284: LD_ADDR_EXP 78
20288: PUSH
20289: LD_INT 1
20291: ST_TO_ADDR
// if p3 = 20 then
20292: LD_VAR 0 3
20296: PUSH
20297: LD_INT 20
20299: EQUAL
20300: IFFALSE 20310
// sRemote := true ;
20302: LD_ADDR_EXP 79
20306: PUSH
20307: LD_INT 1
20309: ST_TO_ADDR
// if p3 = 21 then
20310: LD_VAR 0 3
20314: PUSH
20315: LD_INT 21
20317: EQUAL
20318: IFFALSE 20328
// sPowell := true ;
20320: LD_ADDR_EXP 80
20324: PUSH
20325: LD_INT 1
20327: ST_TO_ADDR
// if p3 = 22 then
20328: LD_VAR 0 3
20332: PUSH
20333: LD_INT 22
20335: EQUAL
20336: IFFALSE 20346
// sTeleport := true ;
20338: LD_ADDR_EXP 83
20342: PUSH
20343: LD_INT 1
20345: ST_TO_ADDR
// if p3 = 23 then
20346: LD_VAR 0 3
20350: PUSH
20351: LD_INT 23
20353: EQUAL
20354: IFFALSE 20364
// sOilTower := true ;
20356: LD_ADDR_EXP 85
20360: PUSH
20361: LD_INT 1
20363: ST_TO_ADDR
// if p3 = 24 then
20364: LD_VAR 0 3
20368: PUSH
20369: LD_INT 24
20371: EQUAL
20372: IFFALSE 20382
// sShovel := true ;
20374: LD_ADDR_EXP 86
20378: PUSH
20379: LD_INT 1
20381: ST_TO_ADDR
// if p3 = 25 then
20382: LD_VAR 0 3
20386: PUSH
20387: LD_INT 25
20389: EQUAL
20390: IFFALSE 20400
// sSheik := true ;
20392: LD_ADDR_EXP 87
20396: PUSH
20397: LD_INT 1
20399: ST_TO_ADDR
// if p3 = 26 then
20400: LD_VAR 0 3
20404: PUSH
20405: LD_INT 26
20407: EQUAL
20408: IFFALSE 20418
// sEarthquake := true ;
20410: LD_ADDR_EXP 89
20414: PUSH
20415: LD_INT 1
20417: ST_TO_ADDR
// if p3 = 27 then
20418: LD_VAR 0 3
20422: PUSH
20423: LD_INT 27
20425: EQUAL
20426: IFFALSE 20436
// sAI := true ;
20428: LD_ADDR_EXP 90
20432: PUSH
20433: LD_INT 1
20435: ST_TO_ADDR
// if p3 = 28 then
20436: LD_VAR 0 3
20440: PUSH
20441: LD_INT 28
20443: EQUAL
20444: IFFALSE 20454
// sCargo := true ;
20446: LD_ADDR_EXP 93
20450: PUSH
20451: LD_INT 1
20453: ST_TO_ADDR
// if p3 = 29 then
20454: LD_VAR 0 3
20458: PUSH
20459: LD_INT 29
20461: EQUAL
20462: IFFALSE 20472
// sDLaser := true ;
20464: LD_ADDR_EXP 94
20468: PUSH
20469: LD_INT 1
20471: ST_TO_ADDR
// if p3 = 30 then
20472: LD_VAR 0 3
20476: PUSH
20477: LD_INT 30
20479: EQUAL
20480: IFFALSE 20490
// sExchange := true ;
20482: LD_ADDR_EXP 95
20486: PUSH
20487: LD_INT 1
20489: ST_TO_ADDR
// if p3 = 31 then
20490: LD_VAR 0 3
20494: PUSH
20495: LD_INT 31
20497: EQUAL
20498: IFFALSE 20508
// sFac := true ;
20500: LD_ADDR_EXP 96
20504: PUSH
20505: LD_INT 1
20507: ST_TO_ADDR
// if p3 = 32 then
20508: LD_VAR 0 3
20512: PUSH
20513: LD_INT 32
20515: EQUAL
20516: IFFALSE 20526
// sPower := true ;
20518: LD_ADDR_EXP 97
20522: PUSH
20523: LD_INT 1
20525: ST_TO_ADDR
// if p3 = 33 then
20526: LD_VAR 0 3
20530: PUSH
20531: LD_INT 33
20533: EQUAL
20534: IFFALSE 20544
// sRandom := true ;
20536: LD_ADDR_EXP 98
20540: PUSH
20541: LD_INT 1
20543: ST_TO_ADDR
// if p3 = 34 then
20544: LD_VAR 0 3
20548: PUSH
20549: LD_INT 34
20551: EQUAL
20552: IFFALSE 20562
// sShield := true ;
20554: LD_ADDR_EXP 99
20558: PUSH
20559: LD_INT 1
20561: ST_TO_ADDR
// if p3 = 35 then
20562: LD_VAR 0 3
20566: PUSH
20567: LD_INT 35
20569: EQUAL
20570: IFFALSE 20580
// sTime := true ;
20572: LD_ADDR_EXP 100
20576: PUSH
20577: LD_INT 1
20579: ST_TO_ADDR
// if p3 = 36 then
20580: LD_VAR 0 3
20584: PUSH
20585: LD_INT 36
20587: EQUAL
20588: IFFALSE 20598
// sTools := true ;
20590: LD_ADDR_EXP 101
20594: PUSH
20595: LD_INT 1
20597: ST_TO_ADDR
// if p3 = 101 then
20598: LD_VAR 0 3
20602: PUSH
20603: LD_INT 101
20605: EQUAL
20606: IFFALSE 20616
// sSold := true ;
20608: LD_ADDR_EXP 66
20612: PUSH
20613: LD_INT 1
20615: ST_TO_ADDR
// if p3 = 102 then
20616: LD_VAR 0 3
20620: PUSH
20621: LD_INT 102
20623: EQUAL
20624: IFFALSE 20634
// sDiff := true ;
20626: LD_ADDR_EXP 67
20630: PUSH
20631: LD_INT 1
20633: ST_TO_ADDR
// if p3 = 103 then
20634: LD_VAR 0 3
20638: PUSH
20639: LD_INT 103
20641: EQUAL
20642: IFFALSE 20652
// sFog := true ;
20644: LD_ADDR_EXP 70
20648: PUSH
20649: LD_INT 1
20651: ST_TO_ADDR
// if p3 = 104 then
20652: LD_VAR 0 3
20656: PUSH
20657: LD_INT 104
20659: EQUAL
20660: IFFALSE 20670
// sReset := true ;
20662: LD_ADDR_EXP 71
20666: PUSH
20667: LD_INT 1
20669: ST_TO_ADDR
// if p3 = 105 then
20670: LD_VAR 0 3
20674: PUSH
20675: LD_INT 105
20677: EQUAL
20678: IFFALSE 20688
// sSun := true ;
20680: LD_ADDR_EXP 72
20684: PUSH
20685: LD_INT 1
20687: ST_TO_ADDR
// if p3 = 106 then
20688: LD_VAR 0 3
20692: PUSH
20693: LD_INT 106
20695: EQUAL
20696: IFFALSE 20706
// sTiger := true ;
20698: LD_ADDR_EXP 68
20702: PUSH
20703: LD_INT 1
20705: ST_TO_ADDR
// if p3 = 107 then
20706: LD_VAR 0 3
20710: PUSH
20711: LD_INT 107
20713: EQUAL
20714: IFFALSE 20724
// sBomb := true ;
20716: LD_ADDR_EXP 69
20720: PUSH
20721: LD_INT 1
20723: ST_TO_ADDR
// if p3 = 108 then
20724: LD_VAR 0 3
20728: PUSH
20729: LD_INT 108
20731: EQUAL
20732: IFFALSE 20742
// sWound := true ;
20734: LD_ADDR_EXP 77
20738: PUSH
20739: LD_INT 1
20741: ST_TO_ADDR
// if p3 = 109 then
20742: LD_VAR 0 3
20746: PUSH
20747: LD_INT 109
20749: EQUAL
20750: IFFALSE 20760
// sBetray := true ;
20752: LD_ADDR_EXP 81
20756: PUSH
20757: LD_INT 1
20759: ST_TO_ADDR
// if p3 = 110 then
20760: LD_VAR 0 3
20764: PUSH
20765: LD_INT 110
20767: EQUAL
20768: IFFALSE 20778
// sContamin := true ;
20770: LD_ADDR_EXP 82
20774: PUSH
20775: LD_INT 1
20777: ST_TO_ADDR
// if p3 = 111 then
20778: LD_VAR 0 3
20782: PUSH
20783: LD_INT 111
20785: EQUAL
20786: IFFALSE 20796
// sOil := true ;
20788: LD_ADDR_EXP 84
20792: PUSH
20793: LD_INT 1
20795: ST_TO_ADDR
// if p3 = 112 then
20796: LD_VAR 0 3
20800: PUSH
20801: LD_INT 112
20803: EQUAL
20804: IFFALSE 20814
// sStu := true ;
20806: LD_ADDR_EXP 88
20810: PUSH
20811: LD_INT 1
20813: ST_TO_ADDR
// if p3 = 113 then
20814: LD_VAR 0 3
20818: PUSH
20819: LD_INT 113
20821: EQUAL
20822: IFFALSE 20832
// sBazooka := true ;
20824: LD_ADDR_EXP 91
20828: PUSH
20829: LD_INT 1
20831: ST_TO_ADDR
// if p3 = 114 then
20832: LD_VAR 0 3
20836: PUSH
20837: LD_INT 114
20839: EQUAL
20840: IFFALSE 20850
// sMortar := true ;
20842: LD_ADDR_EXP 92
20846: PUSH
20847: LD_INT 1
20849: ST_TO_ADDR
// if p3 = 115 then
20850: LD_VAR 0 3
20854: PUSH
20855: LD_INT 115
20857: EQUAL
20858: IFFALSE 20868
// sRanger := true ;
20860: LD_ADDR_EXP 102
20864: PUSH
20865: LD_INT 1
20867: ST_TO_ADDR
// if p3 = 116 then
20868: LD_VAR 0 3
20872: PUSH
20873: LD_INT 116
20875: EQUAL
20876: IFFALSE 20886
// sComputer := true ;
20878: LD_ADDR_EXP 103
20882: PUSH
20883: LD_INT 1
20885: ST_TO_ADDR
// if p3 = 117 then
20886: LD_VAR 0 3
20890: PUSH
20891: LD_INT 117
20893: EQUAL
20894: IFFALSE 20904
// s30 := true ;
20896: LD_ADDR_EXP 104
20900: PUSH
20901: LD_INT 1
20903: ST_TO_ADDR
// if p3 = 118 then
20904: LD_VAR 0 3
20908: PUSH
20909: LD_INT 118
20911: EQUAL
20912: IFFALSE 20922
// s60 := true ;
20914: LD_ADDR_EXP 105
20918: PUSH
20919: LD_INT 1
20921: ST_TO_ADDR
// end ; if p2 = stream_mode then
20922: LD_VAR 0 2
20926: PUSH
20927: LD_INT 101
20929: EQUAL
20930: IFFALSE 21058
// begin case p3 of 1 :
20932: LD_VAR 0 3
20936: PUSH
20937: LD_INT 1
20939: DOUBLE
20940: EQUAL
20941: IFTRUE 20945
20943: GO 20952
20945: POP
// hHackUnlimitedResources ; 2 :
20946: CALL 33156 0 0
20950: GO 21058
20952: LD_INT 2
20954: DOUBLE
20955: EQUAL
20956: IFTRUE 20960
20958: GO 20967
20960: POP
// hHackSetLevel10 ; 3 :
20961: CALL 33289 0 0
20965: GO 21058
20967: LD_INT 3
20969: DOUBLE
20970: EQUAL
20971: IFTRUE 20975
20973: GO 20982
20975: POP
// hHackSetLevel10YourUnits ; 4 :
20976: CALL 33374 0 0
20980: GO 21058
20982: LD_INT 4
20984: DOUBLE
20985: EQUAL
20986: IFTRUE 20990
20988: GO 20997
20990: POP
// hHackInvincible ; 5 :
20991: CALL 33822 0 0
20995: GO 21058
20997: LD_INT 5
20999: DOUBLE
21000: EQUAL
21001: IFTRUE 21005
21003: GO 21012
21005: POP
// hHackInvisible ; 6 :
21006: CALL 33933 0 0
21010: GO 21058
21012: LD_INT 6
21014: DOUBLE
21015: EQUAL
21016: IFTRUE 21020
21018: GO 21027
21020: POP
// hHackChangeYourSide ; 7 :
21021: CALL 33990 0 0
21025: GO 21058
21027: LD_INT 7
21029: DOUBLE
21030: EQUAL
21031: IFTRUE 21035
21033: GO 21042
21035: POP
// hHackChangeUnitSide ; 8 :
21036: CALL 34032 0 0
21040: GO 21058
21042: LD_INT 8
21044: DOUBLE
21045: EQUAL
21046: IFTRUE 21050
21048: GO 21057
21050: POP
// hHackFog ; end ;
21051: CALL 34133 0 0
21055: GO 21058
21057: POP
// end ; end ;
21058: LD_VAR 0 7
21062: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21063: GO 21065
21065: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21066: LD_STRING initStreamRollete();
21068: PPUSH
21069: CALL_OW 559
// InitStreamMode ;
21073: CALL 21085 0 0
// DefineStreamItems ( false ) ;
21077: LD_INT 0
21079: PPUSH
21080: CALL 21549 0 1
// end ;
21084: END
// function InitStreamMode ; begin
21085: LD_INT 0
21087: PPUSH
// streamModeActive := false ;
21088: LD_ADDR_EXP 49
21092: PUSH
21093: LD_INT 0
21095: ST_TO_ADDR
// normalCounter := 36 ;
21096: LD_ADDR_EXP 50
21100: PUSH
21101: LD_INT 36
21103: ST_TO_ADDR
// hardcoreCounter := 18 ;
21104: LD_ADDR_EXP 51
21108: PUSH
21109: LD_INT 18
21111: ST_TO_ADDR
// sRocket := false ;
21112: LD_ADDR_EXP 54
21116: PUSH
21117: LD_INT 0
21119: ST_TO_ADDR
// sSpeed := false ;
21120: LD_ADDR_EXP 53
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
// sEngine := false ;
21128: LD_ADDR_EXP 55
21132: PUSH
21133: LD_INT 0
21135: ST_TO_ADDR
// sSpec := false ;
21136: LD_ADDR_EXP 52
21140: PUSH
21141: LD_INT 0
21143: ST_TO_ADDR
// sLevel := false ;
21144: LD_ADDR_EXP 56
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// sArmoury := false ;
21152: LD_ADDR_EXP 57
21156: PUSH
21157: LD_INT 0
21159: ST_TO_ADDR
// sRadar := false ;
21160: LD_ADDR_EXP 58
21164: PUSH
21165: LD_INT 0
21167: ST_TO_ADDR
// sBunker := false ;
21168: LD_ADDR_EXP 59
21172: PUSH
21173: LD_INT 0
21175: ST_TO_ADDR
// sHack := false ;
21176: LD_ADDR_EXP 60
21180: PUSH
21181: LD_INT 0
21183: ST_TO_ADDR
// sFire := false ;
21184: LD_ADDR_EXP 61
21188: PUSH
21189: LD_INT 0
21191: ST_TO_ADDR
// sRefresh := false ;
21192: LD_ADDR_EXP 62
21196: PUSH
21197: LD_INT 0
21199: ST_TO_ADDR
// sExp := false ;
21200: LD_ADDR_EXP 63
21204: PUSH
21205: LD_INT 0
21207: ST_TO_ADDR
// sDepot := false ;
21208: LD_ADDR_EXP 64
21212: PUSH
21213: LD_INT 0
21215: ST_TO_ADDR
// sFlag := false ;
21216: LD_ADDR_EXP 65
21220: PUSH
21221: LD_INT 0
21223: ST_TO_ADDR
// sKamikadze := false ;
21224: LD_ADDR_EXP 73
21228: PUSH
21229: LD_INT 0
21231: ST_TO_ADDR
// sTroll := false ;
21232: LD_ADDR_EXP 74
21236: PUSH
21237: LD_INT 0
21239: ST_TO_ADDR
// sSlow := false ;
21240: LD_ADDR_EXP 75
21244: PUSH
21245: LD_INT 0
21247: ST_TO_ADDR
// sLack := false ;
21248: LD_ADDR_EXP 76
21252: PUSH
21253: LD_INT 0
21255: ST_TO_ADDR
// sTank := false ;
21256: LD_ADDR_EXP 78
21260: PUSH
21261: LD_INT 0
21263: ST_TO_ADDR
// sRemote := false ;
21264: LD_ADDR_EXP 79
21268: PUSH
21269: LD_INT 0
21271: ST_TO_ADDR
// sPowell := false ;
21272: LD_ADDR_EXP 80
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// sTeleport := false ;
21280: LD_ADDR_EXP 83
21284: PUSH
21285: LD_INT 0
21287: ST_TO_ADDR
// sOilTower := false ;
21288: LD_ADDR_EXP 85
21292: PUSH
21293: LD_INT 0
21295: ST_TO_ADDR
// sShovel := false ;
21296: LD_ADDR_EXP 86
21300: PUSH
21301: LD_INT 0
21303: ST_TO_ADDR
// sSheik := false ;
21304: LD_ADDR_EXP 87
21308: PUSH
21309: LD_INT 0
21311: ST_TO_ADDR
// sEarthquake := false ;
21312: LD_ADDR_EXP 89
21316: PUSH
21317: LD_INT 0
21319: ST_TO_ADDR
// sAI := false ;
21320: LD_ADDR_EXP 90
21324: PUSH
21325: LD_INT 0
21327: ST_TO_ADDR
// sCargo := false ;
21328: LD_ADDR_EXP 93
21332: PUSH
21333: LD_INT 0
21335: ST_TO_ADDR
// sDLaser := false ;
21336: LD_ADDR_EXP 94
21340: PUSH
21341: LD_INT 0
21343: ST_TO_ADDR
// sExchange := false ;
21344: LD_ADDR_EXP 95
21348: PUSH
21349: LD_INT 0
21351: ST_TO_ADDR
// sFac := false ;
21352: LD_ADDR_EXP 96
21356: PUSH
21357: LD_INT 0
21359: ST_TO_ADDR
// sPower := false ;
21360: LD_ADDR_EXP 97
21364: PUSH
21365: LD_INT 0
21367: ST_TO_ADDR
// sRandom := false ;
21368: LD_ADDR_EXP 98
21372: PUSH
21373: LD_INT 0
21375: ST_TO_ADDR
// sShield := false ;
21376: LD_ADDR_EXP 99
21380: PUSH
21381: LD_INT 0
21383: ST_TO_ADDR
// sTime := false ;
21384: LD_ADDR_EXP 100
21388: PUSH
21389: LD_INT 0
21391: ST_TO_ADDR
// sTools := false ;
21392: LD_ADDR_EXP 101
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// sSold := false ;
21400: LD_ADDR_EXP 66
21404: PUSH
21405: LD_INT 0
21407: ST_TO_ADDR
// sDiff := false ;
21408: LD_ADDR_EXP 67
21412: PUSH
21413: LD_INT 0
21415: ST_TO_ADDR
// sFog := false ;
21416: LD_ADDR_EXP 70
21420: PUSH
21421: LD_INT 0
21423: ST_TO_ADDR
// sReset := false ;
21424: LD_ADDR_EXP 71
21428: PUSH
21429: LD_INT 0
21431: ST_TO_ADDR
// sSun := false ;
21432: LD_ADDR_EXP 72
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// sTiger := false ;
21440: LD_ADDR_EXP 68
21444: PUSH
21445: LD_INT 0
21447: ST_TO_ADDR
// sBomb := false ;
21448: LD_ADDR_EXP 69
21452: PUSH
21453: LD_INT 0
21455: ST_TO_ADDR
// sWound := false ;
21456: LD_ADDR_EXP 77
21460: PUSH
21461: LD_INT 0
21463: ST_TO_ADDR
// sBetray := false ;
21464: LD_ADDR_EXP 81
21468: PUSH
21469: LD_INT 0
21471: ST_TO_ADDR
// sContamin := false ;
21472: LD_ADDR_EXP 82
21476: PUSH
21477: LD_INT 0
21479: ST_TO_ADDR
// sOil := false ;
21480: LD_ADDR_EXP 84
21484: PUSH
21485: LD_INT 0
21487: ST_TO_ADDR
// sStu := false ;
21488: LD_ADDR_EXP 88
21492: PUSH
21493: LD_INT 0
21495: ST_TO_ADDR
// sBazooka := false ;
21496: LD_ADDR_EXP 91
21500: PUSH
21501: LD_INT 0
21503: ST_TO_ADDR
// sMortar := false ;
21504: LD_ADDR_EXP 92
21508: PUSH
21509: LD_INT 0
21511: ST_TO_ADDR
// sRanger := false ;
21512: LD_ADDR_EXP 102
21516: PUSH
21517: LD_INT 0
21519: ST_TO_ADDR
// sComputer := false ;
21520: LD_ADDR_EXP 103
21524: PUSH
21525: LD_INT 0
21527: ST_TO_ADDR
// s30 := false ;
21528: LD_ADDR_EXP 104
21532: PUSH
21533: LD_INT 0
21535: ST_TO_ADDR
// s60 := false ;
21536: LD_ADDR_EXP 105
21540: PUSH
21541: LD_INT 0
21543: ST_TO_ADDR
// end ;
21544: LD_VAR 0 1
21548: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21549: LD_INT 0
21551: PPUSH
21552: PPUSH
21553: PPUSH
21554: PPUSH
21555: PPUSH
21556: PPUSH
21557: PPUSH
// result := [ ] ;
21558: LD_ADDR_VAR 0 2
21562: PUSH
21563: EMPTY
21564: ST_TO_ADDR
// if campaign_id = 1 then
21565: LD_OWVAR 69
21569: PUSH
21570: LD_INT 1
21572: EQUAL
21573: IFFALSE 24739
// begin case mission_number of 1 :
21575: LD_OWVAR 70
21579: PUSH
21580: LD_INT 1
21582: DOUBLE
21583: EQUAL
21584: IFTRUE 21588
21586: GO 21664
21588: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21589: LD_ADDR_VAR 0 2
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: LD_INT 4
21599: PUSH
21600: LD_INT 11
21602: PUSH
21603: LD_INT 12
21605: PUSH
21606: LD_INT 15
21608: PUSH
21609: LD_INT 16
21611: PUSH
21612: LD_INT 22
21614: PUSH
21615: LD_INT 23
21617: PUSH
21618: LD_INT 26
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 101
21634: PUSH
21635: LD_INT 102
21637: PUSH
21638: LD_INT 106
21640: PUSH
21641: LD_INT 116
21643: PUSH
21644: LD_INT 117
21646: PUSH
21647: LD_INT 118
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: ST_TO_ADDR
21662: GO 24737
21664: LD_INT 2
21666: DOUBLE
21667: EQUAL
21668: IFTRUE 21672
21670: GO 21756
21672: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21673: LD_ADDR_VAR 0 2
21677: PUSH
21678: LD_INT 2
21680: PUSH
21681: LD_INT 4
21683: PUSH
21684: LD_INT 11
21686: PUSH
21687: LD_INT 12
21689: PUSH
21690: LD_INT 15
21692: PUSH
21693: LD_INT 16
21695: PUSH
21696: LD_INT 22
21698: PUSH
21699: LD_INT 23
21701: PUSH
21702: LD_INT 26
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 101
21718: PUSH
21719: LD_INT 102
21721: PUSH
21722: LD_INT 105
21724: PUSH
21725: LD_INT 106
21727: PUSH
21728: LD_INT 108
21730: PUSH
21731: LD_INT 116
21733: PUSH
21734: LD_INT 117
21736: PUSH
21737: LD_INT 118
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: ST_TO_ADDR
21754: GO 24737
21756: LD_INT 3
21758: DOUBLE
21759: EQUAL
21760: IFTRUE 21764
21762: GO 21852
21764: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21765: LD_ADDR_VAR 0 2
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: LD_INT 4
21775: PUSH
21776: LD_INT 5
21778: PUSH
21779: LD_INT 11
21781: PUSH
21782: LD_INT 12
21784: PUSH
21785: LD_INT 15
21787: PUSH
21788: LD_INT 16
21790: PUSH
21791: LD_INT 22
21793: PUSH
21794: LD_INT 26
21796: PUSH
21797: LD_INT 36
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 101
21814: PUSH
21815: LD_INT 102
21817: PUSH
21818: LD_INT 105
21820: PUSH
21821: LD_INT 106
21823: PUSH
21824: LD_INT 108
21826: PUSH
21827: LD_INT 116
21829: PUSH
21830: LD_INT 117
21832: PUSH
21833: LD_INT 118
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: ST_TO_ADDR
21850: GO 24737
21852: LD_INT 4
21854: DOUBLE
21855: EQUAL
21856: IFTRUE 21860
21858: GO 21956
21860: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21861: LD_ADDR_VAR 0 2
21865: PUSH
21866: LD_INT 2
21868: PUSH
21869: LD_INT 4
21871: PUSH
21872: LD_INT 5
21874: PUSH
21875: LD_INT 8
21877: PUSH
21878: LD_INT 11
21880: PUSH
21881: LD_INT 12
21883: PUSH
21884: LD_INT 15
21886: PUSH
21887: LD_INT 16
21889: PUSH
21890: LD_INT 22
21892: PUSH
21893: LD_INT 23
21895: PUSH
21896: LD_INT 26
21898: PUSH
21899: LD_INT 36
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 101
21918: PUSH
21919: LD_INT 102
21921: PUSH
21922: LD_INT 105
21924: PUSH
21925: LD_INT 106
21927: PUSH
21928: LD_INT 108
21930: PUSH
21931: LD_INT 116
21933: PUSH
21934: LD_INT 117
21936: PUSH
21937: LD_INT 118
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: ST_TO_ADDR
21954: GO 24737
21956: LD_INT 5
21958: DOUBLE
21959: EQUAL
21960: IFTRUE 21964
21962: GO 22076
21964: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21965: LD_ADDR_VAR 0 2
21969: PUSH
21970: LD_INT 2
21972: PUSH
21973: LD_INT 4
21975: PUSH
21976: LD_INT 5
21978: PUSH
21979: LD_INT 6
21981: PUSH
21982: LD_INT 8
21984: PUSH
21985: LD_INT 11
21987: PUSH
21988: LD_INT 12
21990: PUSH
21991: LD_INT 15
21993: PUSH
21994: LD_INT 16
21996: PUSH
21997: LD_INT 22
21999: PUSH
22000: LD_INT 23
22002: PUSH
22003: LD_INT 25
22005: PUSH
22006: LD_INT 26
22008: PUSH
22009: LD_INT 36
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 101
22030: PUSH
22031: LD_INT 102
22033: PUSH
22034: LD_INT 105
22036: PUSH
22037: LD_INT 106
22039: PUSH
22040: LD_INT 108
22042: PUSH
22043: LD_INT 109
22045: PUSH
22046: LD_INT 112
22048: PUSH
22049: LD_INT 116
22051: PUSH
22052: LD_INT 117
22054: PUSH
22055: LD_INT 118
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: ST_TO_ADDR
22074: GO 24737
22076: LD_INT 6
22078: DOUBLE
22079: EQUAL
22080: IFTRUE 22084
22082: GO 22216
22084: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22085: LD_ADDR_VAR 0 2
22089: PUSH
22090: LD_INT 2
22092: PUSH
22093: LD_INT 4
22095: PUSH
22096: LD_INT 5
22098: PUSH
22099: LD_INT 6
22101: PUSH
22102: LD_INT 8
22104: PUSH
22105: LD_INT 11
22107: PUSH
22108: LD_INT 12
22110: PUSH
22111: LD_INT 15
22113: PUSH
22114: LD_INT 16
22116: PUSH
22117: LD_INT 20
22119: PUSH
22120: LD_INT 21
22122: PUSH
22123: LD_INT 22
22125: PUSH
22126: LD_INT 23
22128: PUSH
22129: LD_INT 25
22131: PUSH
22132: LD_INT 26
22134: PUSH
22135: LD_INT 30
22137: PUSH
22138: LD_INT 31
22140: PUSH
22141: LD_INT 32
22143: PUSH
22144: LD_INT 36
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 101
22170: PUSH
22171: LD_INT 102
22173: PUSH
22174: LD_INT 105
22176: PUSH
22177: LD_INT 106
22179: PUSH
22180: LD_INT 108
22182: PUSH
22183: LD_INT 109
22185: PUSH
22186: LD_INT 112
22188: PUSH
22189: LD_INT 116
22191: PUSH
22192: LD_INT 117
22194: PUSH
22195: LD_INT 118
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: ST_TO_ADDR
22214: GO 24737
22216: LD_INT 7
22218: DOUBLE
22219: EQUAL
22220: IFTRUE 22224
22222: GO 22336
22224: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22225: LD_ADDR_VAR 0 2
22229: PUSH
22230: LD_INT 2
22232: PUSH
22233: LD_INT 4
22235: PUSH
22236: LD_INT 5
22238: PUSH
22239: LD_INT 7
22241: PUSH
22242: LD_INT 11
22244: PUSH
22245: LD_INT 12
22247: PUSH
22248: LD_INT 15
22250: PUSH
22251: LD_INT 16
22253: PUSH
22254: LD_INT 20
22256: PUSH
22257: LD_INT 21
22259: PUSH
22260: LD_INT 22
22262: PUSH
22263: LD_INT 23
22265: PUSH
22266: LD_INT 25
22268: PUSH
22269: LD_INT 26
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 101
22290: PUSH
22291: LD_INT 102
22293: PUSH
22294: LD_INT 103
22296: PUSH
22297: LD_INT 105
22299: PUSH
22300: LD_INT 106
22302: PUSH
22303: LD_INT 108
22305: PUSH
22306: LD_INT 112
22308: PUSH
22309: LD_INT 116
22311: PUSH
22312: LD_INT 117
22314: PUSH
22315: LD_INT 118
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: ST_TO_ADDR
22334: GO 24737
22336: LD_INT 8
22338: DOUBLE
22339: EQUAL
22340: IFTRUE 22344
22342: GO 22484
22344: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22345: LD_ADDR_VAR 0 2
22349: PUSH
22350: LD_INT 2
22352: PUSH
22353: LD_INT 4
22355: PUSH
22356: LD_INT 5
22358: PUSH
22359: LD_INT 6
22361: PUSH
22362: LD_INT 7
22364: PUSH
22365: LD_INT 8
22367: PUSH
22368: LD_INT 11
22370: PUSH
22371: LD_INT 12
22373: PUSH
22374: LD_INT 15
22376: PUSH
22377: LD_INT 16
22379: PUSH
22380: LD_INT 20
22382: PUSH
22383: LD_INT 21
22385: PUSH
22386: LD_INT 22
22388: PUSH
22389: LD_INT 23
22391: PUSH
22392: LD_INT 25
22394: PUSH
22395: LD_INT 26
22397: PUSH
22398: LD_INT 30
22400: PUSH
22401: LD_INT 31
22403: PUSH
22404: LD_INT 32
22406: PUSH
22407: LD_INT 36
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 101
22434: PUSH
22435: LD_INT 102
22437: PUSH
22438: LD_INT 103
22440: PUSH
22441: LD_INT 105
22443: PUSH
22444: LD_INT 106
22446: PUSH
22447: LD_INT 108
22449: PUSH
22450: LD_INT 109
22452: PUSH
22453: LD_INT 112
22455: PUSH
22456: LD_INT 116
22458: PUSH
22459: LD_INT 117
22461: PUSH
22462: LD_INT 118
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: ST_TO_ADDR
22482: GO 24737
22484: LD_INT 9
22486: DOUBLE
22487: EQUAL
22488: IFTRUE 22492
22490: GO 22640
22492: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22493: LD_ADDR_VAR 0 2
22497: PUSH
22498: LD_INT 2
22500: PUSH
22501: LD_INT 4
22503: PUSH
22504: LD_INT 5
22506: PUSH
22507: LD_INT 6
22509: PUSH
22510: LD_INT 7
22512: PUSH
22513: LD_INT 8
22515: PUSH
22516: LD_INT 11
22518: PUSH
22519: LD_INT 12
22521: PUSH
22522: LD_INT 15
22524: PUSH
22525: LD_INT 16
22527: PUSH
22528: LD_INT 20
22530: PUSH
22531: LD_INT 21
22533: PUSH
22534: LD_INT 22
22536: PUSH
22537: LD_INT 23
22539: PUSH
22540: LD_INT 25
22542: PUSH
22543: LD_INT 26
22545: PUSH
22546: LD_INT 28
22548: PUSH
22549: LD_INT 30
22551: PUSH
22552: LD_INT 31
22554: PUSH
22555: LD_INT 32
22557: PUSH
22558: LD_INT 36
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 101
22586: PUSH
22587: LD_INT 102
22589: PUSH
22590: LD_INT 103
22592: PUSH
22593: LD_INT 105
22595: PUSH
22596: LD_INT 106
22598: PUSH
22599: LD_INT 108
22601: PUSH
22602: LD_INT 109
22604: PUSH
22605: LD_INT 112
22607: PUSH
22608: LD_INT 114
22610: PUSH
22611: LD_INT 116
22613: PUSH
22614: LD_INT 117
22616: PUSH
22617: LD_INT 118
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: ST_TO_ADDR
22638: GO 24737
22640: LD_INT 10
22642: DOUBLE
22643: EQUAL
22644: IFTRUE 22648
22646: GO 22844
22648: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22649: LD_ADDR_VAR 0 2
22653: PUSH
22654: LD_INT 2
22656: PUSH
22657: LD_INT 4
22659: PUSH
22660: LD_INT 5
22662: PUSH
22663: LD_INT 6
22665: PUSH
22666: LD_INT 7
22668: PUSH
22669: LD_INT 8
22671: PUSH
22672: LD_INT 9
22674: PUSH
22675: LD_INT 10
22677: PUSH
22678: LD_INT 11
22680: PUSH
22681: LD_INT 12
22683: PUSH
22684: LD_INT 13
22686: PUSH
22687: LD_INT 14
22689: PUSH
22690: LD_INT 15
22692: PUSH
22693: LD_INT 16
22695: PUSH
22696: LD_INT 17
22698: PUSH
22699: LD_INT 18
22701: PUSH
22702: LD_INT 19
22704: PUSH
22705: LD_INT 20
22707: PUSH
22708: LD_INT 21
22710: PUSH
22711: LD_INT 22
22713: PUSH
22714: LD_INT 23
22716: PUSH
22717: LD_INT 24
22719: PUSH
22720: LD_INT 25
22722: PUSH
22723: LD_INT 26
22725: PUSH
22726: LD_INT 28
22728: PUSH
22729: LD_INT 30
22731: PUSH
22732: LD_INT 31
22734: PUSH
22735: LD_INT 32
22737: PUSH
22738: LD_INT 36
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 101
22774: PUSH
22775: LD_INT 102
22777: PUSH
22778: LD_INT 103
22780: PUSH
22781: LD_INT 104
22783: PUSH
22784: LD_INT 105
22786: PUSH
22787: LD_INT 106
22789: PUSH
22790: LD_INT 107
22792: PUSH
22793: LD_INT 108
22795: PUSH
22796: LD_INT 109
22798: PUSH
22799: LD_INT 110
22801: PUSH
22802: LD_INT 111
22804: PUSH
22805: LD_INT 112
22807: PUSH
22808: LD_INT 114
22810: PUSH
22811: LD_INT 116
22813: PUSH
22814: LD_INT 117
22816: PUSH
22817: LD_INT 118
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: ST_TO_ADDR
22842: GO 24737
22844: LD_INT 11
22846: DOUBLE
22847: EQUAL
22848: IFTRUE 22852
22850: GO 23056
22852: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22853: LD_ADDR_VAR 0 2
22857: PUSH
22858: LD_INT 2
22860: PUSH
22861: LD_INT 3
22863: PUSH
22864: LD_INT 4
22866: PUSH
22867: LD_INT 5
22869: PUSH
22870: LD_INT 6
22872: PUSH
22873: LD_INT 7
22875: PUSH
22876: LD_INT 8
22878: PUSH
22879: LD_INT 9
22881: PUSH
22882: LD_INT 10
22884: PUSH
22885: LD_INT 11
22887: PUSH
22888: LD_INT 12
22890: PUSH
22891: LD_INT 13
22893: PUSH
22894: LD_INT 14
22896: PUSH
22897: LD_INT 15
22899: PUSH
22900: LD_INT 16
22902: PUSH
22903: LD_INT 17
22905: PUSH
22906: LD_INT 18
22908: PUSH
22909: LD_INT 19
22911: PUSH
22912: LD_INT 20
22914: PUSH
22915: LD_INT 21
22917: PUSH
22918: LD_INT 22
22920: PUSH
22921: LD_INT 23
22923: PUSH
22924: LD_INT 24
22926: PUSH
22927: LD_INT 25
22929: PUSH
22930: LD_INT 26
22932: PUSH
22933: LD_INT 28
22935: PUSH
22936: LD_INT 30
22938: PUSH
22939: LD_INT 31
22941: PUSH
22942: LD_INT 32
22944: PUSH
22945: LD_INT 34
22947: PUSH
22948: LD_INT 36
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 101
22986: PUSH
22987: LD_INT 102
22989: PUSH
22990: LD_INT 103
22992: PUSH
22993: LD_INT 104
22995: PUSH
22996: LD_INT 105
22998: PUSH
22999: LD_INT 106
23001: PUSH
23002: LD_INT 107
23004: PUSH
23005: LD_INT 108
23007: PUSH
23008: LD_INT 109
23010: PUSH
23011: LD_INT 110
23013: PUSH
23014: LD_INT 111
23016: PUSH
23017: LD_INT 112
23019: PUSH
23020: LD_INT 114
23022: PUSH
23023: LD_INT 116
23025: PUSH
23026: LD_INT 117
23028: PUSH
23029: LD_INT 118
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: ST_TO_ADDR
23054: GO 24737
23056: LD_INT 12
23058: DOUBLE
23059: EQUAL
23060: IFTRUE 23064
23062: GO 23284
23064: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23065: LD_ADDR_VAR 0 2
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: LD_INT 2
23075: PUSH
23076: LD_INT 3
23078: PUSH
23079: LD_INT 4
23081: PUSH
23082: LD_INT 5
23084: PUSH
23085: LD_INT 6
23087: PUSH
23088: LD_INT 7
23090: PUSH
23091: LD_INT 8
23093: PUSH
23094: LD_INT 9
23096: PUSH
23097: LD_INT 10
23099: PUSH
23100: LD_INT 11
23102: PUSH
23103: LD_INT 12
23105: PUSH
23106: LD_INT 13
23108: PUSH
23109: LD_INT 14
23111: PUSH
23112: LD_INT 15
23114: PUSH
23115: LD_INT 16
23117: PUSH
23118: LD_INT 17
23120: PUSH
23121: LD_INT 18
23123: PUSH
23124: LD_INT 19
23126: PUSH
23127: LD_INT 20
23129: PUSH
23130: LD_INT 21
23132: PUSH
23133: LD_INT 22
23135: PUSH
23136: LD_INT 23
23138: PUSH
23139: LD_INT 24
23141: PUSH
23142: LD_INT 25
23144: PUSH
23145: LD_INT 26
23147: PUSH
23148: LD_INT 27
23150: PUSH
23151: LD_INT 28
23153: PUSH
23154: LD_INT 30
23156: PUSH
23157: LD_INT 31
23159: PUSH
23160: LD_INT 32
23162: PUSH
23163: LD_INT 33
23165: PUSH
23166: LD_INT 34
23168: PUSH
23169: LD_INT 36
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 101
23210: PUSH
23211: LD_INT 102
23213: PUSH
23214: LD_INT 103
23216: PUSH
23217: LD_INT 104
23219: PUSH
23220: LD_INT 105
23222: PUSH
23223: LD_INT 106
23225: PUSH
23226: LD_INT 107
23228: PUSH
23229: LD_INT 108
23231: PUSH
23232: LD_INT 109
23234: PUSH
23235: LD_INT 110
23237: PUSH
23238: LD_INT 111
23240: PUSH
23241: LD_INT 112
23243: PUSH
23244: LD_INT 113
23246: PUSH
23247: LD_INT 114
23249: PUSH
23250: LD_INT 116
23252: PUSH
23253: LD_INT 117
23255: PUSH
23256: LD_INT 118
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: ST_TO_ADDR
23282: GO 24737
23284: LD_INT 13
23286: DOUBLE
23287: EQUAL
23288: IFTRUE 23292
23290: GO 23500
23292: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23293: LD_ADDR_VAR 0 2
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: LD_INT 2
23303: PUSH
23304: LD_INT 3
23306: PUSH
23307: LD_INT 4
23309: PUSH
23310: LD_INT 5
23312: PUSH
23313: LD_INT 8
23315: PUSH
23316: LD_INT 9
23318: PUSH
23319: LD_INT 10
23321: PUSH
23322: LD_INT 11
23324: PUSH
23325: LD_INT 12
23327: PUSH
23328: LD_INT 14
23330: PUSH
23331: LD_INT 15
23333: PUSH
23334: LD_INT 16
23336: PUSH
23337: LD_INT 17
23339: PUSH
23340: LD_INT 18
23342: PUSH
23343: LD_INT 19
23345: PUSH
23346: LD_INT 20
23348: PUSH
23349: LD_INT 21
23351: PUSH
23352: LD_INT 22
23354: PUSH
23355: LD_INT 23
23357: PUSH
23358: LD_INT 24
23360: PUSH
23361: LD_INT 25
23363: PUSH
23364: LD_INT 26
23366: PUSH
23367: LD_INT 27
23369: PUSH
23370: LD_INT 28
23372: PUSH
23373: LD_INT 30
23375: PUSH
23376: LD_INT 31
23378: PUSH
23379: LD_INT 32
23381: PUSH
23382: LD_INT 33
23384: PUSH
23385: LD_INT 34
23387: PUSH
23388: LD_INT 36
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 101
23426: PUSH
23427: LD_INT 102
23429: PUSH
23430: LD_INT 103
23432: PUSH
23433: LD_INT 104
23435: PUSH
23436: LD_INT 105
23438: PUSH
23439: LD_INT 106
23441: PUSH
23442: LD_INT 107
23444: PUSH
23445: LD_INT 108
23447: PUSH
23448: LD_INT 109
23450: PUSH
23451: LD_INT 110
23453: PUSH
23454: LD_INT 111
23456: PUSH
23457: LD_INT 112
23459: PUSH
23460: LD_INT 113
23462: PUSH
23463: LD_INT 114
23465: PUSH
23466: LD_INT 116
23468: PUSH
23469: LD_INT 117
23471: PUSH
23472: LD_INT 118
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: ST_TO_ADDR
23498: GO 24737
23500: LD_INT 14
23502: DOUBLE
23503: EQUAL
23504: IFTRUE 23508
23506: GO 23732
23508: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23509: LD_ADDR_VAR 0 2
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: LD_INT 2
23519: PUSH
23520: LD_INT 3
23522: PUSH
23523: LD_INT 4
23525: PUSH
23526: LD_INT 5
23528: PUSH
23529: LD_INT 6
23531: PUSH
23532: LD_INT 7
23534: PUSH
23535: LD_INT 8
23537: PUSH
23538: LD_INT 9
23540: PUSH
23541: LD_INT 10
23543: PUSH
23544: LD_INT 11
23546: PUSH
23547: LD_INT 12
23549: PUSH
23550: LD_INT 13
23552: PUSH
23553: LD_INT 14
23555: PUSH
23556: LD_INT 15
23558: PUSH
23559: LD_INT 16
23561: PUSH
23562: LD_INT 17
23564: PUSH
23565: LD_INT 18
23567: PUSH
23568: LD_INT 19
23570: PUSH
23571: LD_INT 20
23573: PUSH
23574: LD_INT 21
23576: PUSH
23577: LD_INT 22
23579: PUSH
23580: LD_INT 23
23582: PUSH
23583: LD_INT 24
23585: PUSH
23586: LD_INT 25
23588: PUSH
23589: LD_INT 26
23591: PUSH
23592: LD_INT 27
23594: PUSH
23595: LD_INT 28
23597: PUSH
23598: LD_INT 29
23600: PUSH
23601: LD_INT 30
23603: PUSH
23604: LD_INT 31
23606: PUSH
23607: LD_INT 32
23609: PUSH
23610: LD_INT 33
23612: PUSH
23613: LD_INT 34
23615: PUSH
23616: LD_INT 36
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 101
23658: PUSH
23659: LD_INT 102
23661: PUSH
23662: LD_INT 103
23664: PUSH
23665: LD_INT 104
23667: PUSH
23668: LD_INT 105
23670: PUSH
23671: LD_INT 106
23673: PUSH
23674: LD_INT 107
23676: PUSH
23677: LD_INT 108
23679: PUSH
23680: LD_INT 109
23682: PUSH
23683: LD_INT 110
23685: PUSH
23686: LD_INT 111
23688: PUSH
23689: LD_INT 112
23691: PUSH
23692: LD_INT 113
23694: PUSH
23695: LD_INT 114
23697: PUSH
23698: LD_INT 116
23700: PUSH
23701: LD_INT 117
23703: PUSH
23704: LD_INT 118
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: ST_TO_ADDR
23730: GO 24737
23732: LD_INT 15
23734: DOUBLE
23735: EQUAL
23736: IFTRUE 23740
23738: GO 23964
23740: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23741: LD_ADDR_VAR 0 2
23745: PUSH
23746: LD_INT 1
23748: PUSH
23749: LD_INT 2
23751: PUSH
23752: LD_INT 3
23754: PUSH
23755: LD_INT 4
23757: PUSH
23758: LD_INT 5
23760: PUSH
23761: LD_INT 6
23763: PUSH
23764: LD_INT 7
23766: PUSH
23767: LD_INT 8
23769: PUSH
23770: LD_INT 9
23772: PUSH
23773: LD_INT 10
23775: PUSH
23776: LD_INT 11
23778: PUSH
23779: LD_INT 12
23781: PUSH
23782: LD_INT 13
23784: PUSH
23785: LD_INT 14
23787: PUSH
23788: LD_INT 15
23790: PUSH
23791: LD_INT 16
23793: PUSH
23794: LD_INT 17
23796: PUSH
23797: LD_INT 18
23799: PUSH
23800: LD_INT 19
23802: PUSH
23803: LD_INT 20
23805: PUSH
23806: LD_INT 21
23808: PUSH
23809: LD_INT 22
23811: PUSH
23812: LD_INT 23
23814: PUSH
23815: LD_INT 24
23817: PUSH
23818: LD_INT 25
23820: PUSH
23821: LD_INT 26
23823: PUSH
23824: LD_INT 27
23826: PUSH
23827: LD_INT 28
23829: PUSH
23830: LD_INT 29
23832: PUSH
23833: LD_INT 30
23835: PUSH
23836: LD_INT 31
23838: PUSH
23839: LD_INT 32
23841: PUSH
23842: LD_INT 33
23844: PUSH
23845: LD_INT 34
23847: PUSH
23848: LD_INT 36
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 101
23890: PUSH
23891: LD_INT 102
23893: PUSH
23894: LD_INT 103
23896: PUSH
23897: LD_INT 104
23899: PUSH
23900: LD_INT 105
23902: PUSH
23903: LD_INT 106
23905: PUSH
23906: LD_INT 107
23908: PUSH
23909: LD_INT 108
23911: PUSH
23912: LD_INT 109
23914: PUSH
23915: LD_INT 110
23917: PUSH
23918: LD_INT 111
23920: PUSH
23921: LD_INT 112
23923: PUSH
23924: LD_INT 113
23926: PUSH
23927: LD_INT 114
23929: PUSH
23930: LD_INT 116
23932: PUSH
23933: LD_INT 117
23935: PUSH
23936: LD_INT 118
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: ST_TO_ADDR
23962: GO 24737
23964: LD_INT 16
23966: DOUBLE
23967: EQUAL
23968: IFTRUE 23972
23970: GO 24108
23972: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23973: LD_ADDR_VAR 0 2
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 4
23983: PUSH
23984: LD_INT 5
23986: PUSH
23987: LD_INT 7
23989: PUSH
23990: LD_INT 11
23992: PUSH
23993: LD_INT 12
23995: PUSH
23996: LD_INT 15
23998: PUSH
23999: LD_INT 16
24001: PUSH
24002: LD_INT 20
24004: PUSH
24005: LD_INT 21
24007: PUSH
24008: LD_INT 22
24010: PUSH
24011: LD_INT 23
24013: PUSH
24014: LD_INT 25
24016: PUSH
24017: LD_INT 26
24019: PUSH
24020: LD_INT 30
24022: PUSH
24023: LD_INT 31
24025: PUSH
24026: LD_INT 32
24028: PUSH
24029: LD_INT 33
24031: PUSH
24032: LD_INT 34
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 101
24058: PUSH
24059: LD_INT 102
24061: PUSH
24062: LD_INT 103
24064: PUSH
24065: LD_INT 106
24067: PUSH
24068: LD_INT 108
24070: PUSH
24071: LD_INT 112
24073: PUSH
24074: LD_INT 113
24076: PUSH
24077: LD_INT 114
24079: PUSH
24080: LD_INT 116
24082: PUSH
24083: LD_INT 117
24085: PUSH
24086: LD_INT 118
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: ST_TO_ADDR
24106: GO 24737
24108: LD_INT 17
24110: DOUBLE
24111: EQUAL
24112: IFTRUE 24116
24114: GO 24340
24116: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24117: LD_ADDR_VAR 0 2
24121: PUSH
24122: LD_INT 1
24124: PUSH
24125: LD_INT 2
24127: PUSH
24128: LD_INT 3
24130: PUSH
24131: LD_INT 4
24133: PUSH
24134: LD_INT 5
24136: PUSH
24137: LD_INT 6
24139: PUSH
24140: LD_INT 7
24142: PUSH
24143: LD_INT 8
24145: PUSH
24146: LD_INT 9
24148: PUSH
24149: LD_INT 10
24151: PUSH
24152: LD_INT 11
24154: PUSH
24155: LD_INT 12
24157: PUSH
24158: LD_INT 13
24160: PUSH
24161: LD_INT 14
24163: PUSH
24164: LD_INT 15
24166: PUSH
24167: LD_INT 16
24169: PUSH
24170: LD_INT 17
24172: PUSH
24173: LD_INT 18
24175: PUSH
24176: LD_INT 19
24178: PUSH
24179: LD_INT 20
24181: PUSH
24182: LD_INT 21
24184: PUSH
24185: LD_INT 22
24187: PUSH
24188: LD_INT 23
24190: PUSH
24191: LD_INT 24
24193: PUSH
24194: LD_INT 25
24196: PUSH
24197: LD_INT 26
24199: PUSH
24200: LD_INT 27
24202: PUSH
24203: LD_INT 28
24205: PUSH
24206: LD_INT 29
24208: PUSH
24209: LD_INT 30
24211: PUSH
24212: LD_INT 31
24214: PUSH
24215: LD_INT 32
24217: PUSH
24218: LD_INT 33
24220: PUSH
24221: LD_INT 34
24223: PUSH
24224: LD_INT 36
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 101
24266: PUSH
24267: LD_INT 102
24269: PUSH
24270: LD_INT 103
24272: PUSH
24273: LD_INT 104
24275: PUSH
24276: LD_INT 105
24278: PUSH
24279: LD_INT 106
24281: PUSH
24282: LD_INT 107
24284: PUSH
24285: LD_INT 108
24287: PUSH
24288: LD_INT 109
24290: PUSH
24291: LD_INT 110
24293: PUSH
24294: LD_INT 111
24296: PUSH
24297: LD_INT 112
24299: PUSH
24300: LD_INT 113
24302: PUSH
24303: LD_INT 114
24305: PUSH
24306: LD_INT 116
24308: PUSH
24309: LD_INT 117
24311: PUSH
24312: LD_INT 118
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: ST_TO_ADDR
24338: GO 24737
24340: LD_INT 18
24342: DOUBLE
24343: EQUAL
24344: IFTRUE 24348
24346: GO 24496
24348: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24349: LD_ADDR_VAR 0 2
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: LD_INT 4
24359: PUSH
24360: LD_INT 5
24362: PUSH
24363: LD_INT 7
24365: PUSH
24366: LD_INT 11
24368: PUSH
24369: LD_INT 12
24371: PUSH
24372: LD_INT 15
24374: PUSH
24375: LD_INT 16
24377: PUSH
24378: LD_INT 20
24380: PUSH
24381: LD_INT 21
24383: PUSH
24384: LD_INT 22
24386: PUSH
24387: LD_INT 23
24389: PUSH
24390: LD_INT 25
24392: PUSH
24393: LD_INT 26
24395: PUSH
24396: LD_INT 30
24398: PUSH
24399: LD_INT 31
24401: PUSH
24402: LD_INT 32
24404: PUSH
24405: LD_INT 33
24407: PUSH
24408: LD_INT 34
24410: PUSH
24411: LD_INT 35
24413: PUSH
24414: LD_INT 36
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 101
24442: PUSH
24443: LD_INT 102
24445: PUSH
24446: LD_INT 103
24448: PUSH
24449: LD_INT 106
24451: PUSH
24452: LD_INT 108
24454: PUSH
24455: LD_INT 112
24457: PUSH
24458: LD_INT 113
24460: PUSH
24461: LD_INT 114
24463: PUSH
24464: LD_INT 115
24466: PUSH
24467: LD_INT 116
24469: PUSH
24470: LD_INT 117
24472: PUSH
24473: LD_INT 118
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: ST_TO_ADDR
24494: GO 24737
24496: LD_INT 19
24498: DOUBLE
24499: EQUAL
24500: IFTRUE 24504
24502: GO 24736
24504: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24505: LD_ADDR_VAR 0 2
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: LD_INT 3
24518: PUSH
24519: LD_INT 4
24521: PUSH
24522: LD_INT 5
24524: PUSH
24525: LD_INT 6
24527: PUSH
24528: LD_INT 7
24530: PUSH
24531: LD_INT 8
24533: PUSH
24534: LD_INT 9
24536: PUSH
24537: LD_INT 10
24539: PUSH
24540: LD_INT 11
24542: PUSH
24543: LD_INT 12
24545: PUSH
24546: LD_INT 13
24548: PUSH
24549: LD_INT 14
24551: PUSH
24552: LD_INT 15
24554: PUSH
24555: LD_INT 16
24557: PUSH
24558: LD_INT 17
24560: PUSH
24561: LD_INT 18
24563: PUSH
24564: LD_INT 19
24566: PUSH
24567: LD_INT 20
24569: PUSH
24570: LD_INT 21
24572: PUSH
24573: LD_INT 22
24575: PUSH
24576: LD_INT 23
24578: PUSH
24579: LD_INT 24
24581: PUSH
24582: LD_INT 25
24584: PUSH
24585: LD_INT 26
24587: PUSH
24588: LD_INT 27
24590: PUSH
24591: LD_INT 28
24593: PUSH
24594: LD_INT 29
24596: PUSH
24597: LD_INT 30
24599: PUSH
24600: LD_INT 31
24602: PUSH
24603: LD_INT 32
24605: PUSH
24606: LD_INT 33
24608: PUSH
24609: LD_INT 34
24611: PUSH
24612: LD_INT 35
24614: PUSH
24615: LD_INT 36
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 101
24658: PUSH
24659: LD_INT 102
24661: PUSH
24662: LD_INT 103
24664: PUSH
24665: LD_INT 104
24667: PUSH
24668: LD_INT 105
24670: PUSH
24671: LD_INT 106
24673: PUSH
24674: LD_INT 107
24676: PUSH
24677: LD_INT 108
24679: PUSH
24680: LD_INT 109
24682: PUSH
24683: LD_INT 110
24685: PUSH
24686: LD_INT 111
24688: PUSH
24689: LD_INT 112
24691: PUSH
24692: LD_INT 113
24694: PUSH
24695: LD_INT 114
24697: PUSH
24698: LD_INT 115
24700: PUSH
24701: LD_INT 116
24703: PUSH
24704: LD_INT 117
24706: PUSH
24707: LD_INT 118
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: ST_TO_ADDR
24734: GO 24737
24736: POP
// end else
24737: GO 24968
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24739: LD_ADDR_VAR 0 2
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: LD_INT 2
24749: PUSH
24750: LD_INT 3
24752: PUSH
24753: LD_INT 4
24755: PUSH
24756: LD_INT 5
24758: PUSH
24759: LD_INT 6
24761: PUSH
24762: LD_INT 7
24764: PUSH
24765: LD_INT 8
24767: PUSH
24768: LD_INT 9
24770: PUSH
24771: LD_INT 10
24773: PUSH
24774: LD_INT 11
24776: PUSH
24777: LD_INT 12
24779: PUSH
24780: LD_INT 13
24782: PUSH
24783: LD_INT 14
24785: PUSH
24786: LD_INT 15
24788: PUSH
24789: LD_INT 16
24791: PUSH
24792: LD_INT 17
24794: PUSH
24795: LD_INT 18
24797: PUSH
24798: LD_INT 19
24800: PUSH
24801: LD_INT 20
24803: PUSH
24804: LD_INT 21
24806: PUSH
24807: LD_INT 22
24809: PUSH
24810: LD_INT 23
24812: PUSH
24813: LD_INT 24
24815: PUSH
24816: LD_INT 25
24818: PUSH
24819: LD_INT 26
24821: PUSH
24822: LD_INT 27
24824: PUSH
24825: LD_INT 28
24827: PUSH
24828: LD_INT 29
24830: PUSH
24831: LD_INT 30
24833: PUSH
24834: LD_INT 31
24836: PUSH
24837: LD_INT 32
24839: PUSH
24840: LD_INT 33
24842: PUSH
24843: LD_INT 34
24845: PUSH
24846: LD_INT 35
24848: PUSH
24849: LD_INT 36
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 101
24892: PUSH
24893: LD_INT 102
24895: PUSH
24896: LD_INT 103
24898: PUSH
24899: LD_INT 104
24901: PUSH
24902: LD_INT 105
24904: PUSH
24905: LD_INT 106
24907: PUSH
24908: LD_INT 107
24910: PUSH
24911: LD_INT 108
24913: PUSH
24914: LD_INT 109
24916: PUSH
24917: LD_INT 110
24919: PUSH
24920: LD_INT 111
24922: PUSH
24923: LD_INT 112
24925: PUSH
24926: LD_INT 113
24928: PUSH
24929: LD_INT 114
24931: PUSH
24932: LD_INT 115
24934: PUSH
24935: LD_INT 116
24937: PUSH
24938: LD_INT 117
24940: PUSH
24941: LD_INT 118
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: ST_TO_ADDR
// if result then
24968: LD_VAR 0 2
24972: IFFALSE 25758
// begin normal :=  ;
24974: LD_ADDR_VAR 0 5
24978: PUSH
24979: LD_STRING 
24981: ST_TO_ADDR
// hardcore :=  ;
24982: LD_ADDR_VAR 0 6
24986: PUSH
24987: LD_STRING 
24989: ST_TO_ADDR
// active :=  ;
24990: LD_ADDR_VAR 0 7
24994: PUSH
24995: LD_STRING 
24997: ST_TO_ADDR
// for i = 1 to normalCounter do
24998: LD_ADDR_VAR 0 8
25002: PUSH
25003: DOUBLE
25004: LD_INT 1
25006: DEC
25007: ST_TO_ADDR
25008: LD_EXP 50
25012: PUSH
25013: FOR_TO
25014: IFFALSE 25115
// begin tmp := 0 ;
25016: LD_ADDR_VAR 0 3
25020: PUSH
25021: LD_STRING 0
25023: ST_TO_ADDR
// if result [ 1 ] then
25024: LD_VAR 0 2
25028: PUSH
25029: LD_INT 1
25031: ARRAY
25032: IFFALSE 25097
// if result [ 1 ] [ 1 ] = i then
25034: LD_VAR 0 2
25038: PUSH
25039: LD_INT 1
25041: ARRAY
25042: PUSH
25043: LD_INT 1
25045: ARRAY
25046: PUSH
25047: LD_VAR 0 8
25051: EQUAL
25052: IFFALSE 25097
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25054: LD_ADDR_VAR 0 2
25058: PUSH
25059: LD_VAR 0 2
25063: PPUSH
25064: LD_INT 1
25066: PPUSH
25067: LD_VAR 0 2
25071: PUSH
25072: LD_INT 1
25074: ARRAY
25075: PPUSH
25076: LD_INT 1
25078: PPUSH
25079: CALL_OW 3
25083: PPUSH
25084: CALL_OW 1
25088: ST_TO_ADDR
// tmp := 1 ;
25089: LD_ADDR_VAR 0 3
25093: PUSH
25094: LD_STRING 1
25096: ST_TO_ADDR
// end ; normal := normal & tmp ;
25097: LD_ADDR_VAR 0 5
25101: PUSH
25102: LD_VAR 0 5
25106: PUSH
25107: LD_VAR 0 3
25111: STR
25112: ST_TO_ADDR
// end ;
25113: GO 25013
25115: POP
25116: POP
// for i = 1 to hardcoreCounter do
25117: LD_ADDR_VAR 0 8
25121: PUSH
25122: DOUBLE
25123: LD_INT 1
25125: DEC
25126: ST_TO_ADDR
25127: LD_EXP 51
25131: PUSH
25132: FOR_TO
25133: IFFALSE 25238
// begin tmp := 0 ;
25135: LD_ADDR_VAR 0 3
25139: PUSH
25140: LD_STRING 0
25142: ST_TO_ADDR
// if result [ 2 ] then
25143: LD_VAR 0 2
25147: PUSH
25148: LD_INT 2
25150: ARRAY
25151: IFFALSE 25220
// if result [ 2 ] [ 1 ] = 100 + i then
25153: LD_VAR 0 2
25157: PUSH
25158: LD_INT 2
25160: ARRAY
25161: PUSH
25162: LD_INT 1
25164: ARRAY
25165: PUSH
25166: LD_INT 100
25168: PUSH
25169: LD_VAR 0 8
25173: PLUS
25174: EQUAL
25175: IFFALSE 25220
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25177: LD_ADDR_VAR 0 2
25181: PUSH
25182: LD_VAR 0 2
25186: PPUSH
25187: LD_INT 2
25189: PPUSH
25190: LD_VAR 0 2
25194: PUSH
25195: LD_INT 2
25197: ARRAY
25198: PPUSH
25199: LD_INT 1
25201: PPUSH
25202: CALL_OW 3
25206: PPUSH
25207: CALL_OW 1
25211: ST_TO_ADDR
// tmp := 1 ;
25212: LD_ADDR_VAR 0 3
25216: PUSH
25217: LD_STRING 1
25219: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25220: LD_ADDR_VAR 0 6
25224: PUSH
25225: LD_VAR 0 6
25229: PUSH
25230: LD_VAR 0 3
25234: STR
25235: ST_TO_ADDR
// end ;
25236: GO 25132
25238: POP
25239: POP
// if isGameLoad then
25240: LD_VAR 0 1
25244: IFFALSE 25719
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25246: LD_ADDR_VAR 0 4
25250: PUSH
25251: LD_EXP 54
25255: PUSH
25256: LD_EXP 53
25260: PUSH
25261: LD_EXP 55
25265: PUSH
25266: LD_EXP 52
25270: PUSH
25271: LD_EXP 56
25275: PUSH
25276: LD_EXP 57
25280: PUSH
25281: LD_EXP 58
25285: PUSH
25286: LD_EXP 59
25290: PUSH
25291: LD_EXP 60
25295: PUSH
25296: LD_EXP 61
25300: PUSH
25301: LD_EXP 62
25305: PUSH
25306: LD_EXP 63
25310: PUSH
25311: LD_EXP 64
25315: PUSH
25316: LD_EXP 65
25320: PUSH
25321: LD_EXP 73
25325: PUSH
25326: LD_EXP 74
25330: PUSH
25331: LD_EXP 75
25335: PUSH
25336: LD_EXP 76
25340: PUSH
25341: LD_EXP 78
25345: PUSH
25346: LD_EXP 79
25350: PUSH
25351: LD_EXP 80
25355: PUSH
25356: LD_EXP 83
25360: PUSH
25361: LD_EXP 85
25365: PUSH
25366: LD_EXP 86
25370: PUSH
25371: LD_EXP 87
25375: PUSH
25376: LD_EXP 89
25380: PUSH
25381: LD_EXP 90
25385: PUSH
25386: LD_EXP 93
25390: PUSH
25391: LD_EXP 94
25395: PUSH
25396: LD_EXP 95
25400: PUSH
25401: LD_EXP 96
25405: PUSH
25406: LD_EXP 97
25410: PUSH
25411: LD_EXP 98
25415: PUSH
25416: LD_EXP 99
25420: PUSH
25421: LD_EXP 100
25425: PUSH
25426: LD_EXP 101
25430: PUSH
25431: LD_EXP 66
25435: PUSH
25436: LD_EXP 67
25440: PUSH
25441: LD_EXP 70
25445: PUSH
25446: LD_EXP 71
25450: PUSH
25451: LD_EXP 72
25455: PUSH
25456: LD_EXP 68
25460: PUSH
25461: LD_EXP 69
25465: PUSH
25466: LD_EXP 77
25470: PUSH
25471: LD_EXP 81
25475: PUSH
25476: LD_EXP 82
25480: PUSH
25481: LD_EXP 84
25485: PUSH
25486: LD_EXP 88
25490: PUSH
25491: LD_EXP 91
25495: PUSH
25496: LD_EXP 92
25500: PUSH
25501: LD_EXP 102
25505: PUSH
25506: LD_EXP 103
25510: PUSH
25511: LD_EXP 104
25515: PUSH
25516: LD_EXP 105
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: ST_TO_ADDR
// tmp :=  ;
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: LD_STRING 
25584: ST_TO_ADDR
// for i = 1 to normalCounter do
25585: LD_ADDR_VAR 0 8
25589: PUSH
25590: DOUBLE
25591: LD_INT 1
25593: DEC
25594: ST_TO_ADDR
25595: LD_EXP 50
25599: PUSH
25600: FOR_TO
25601: IFFALSE 25637
// begin if flags [ i ] then
25603: LD_VAR 0 4
25607: PUSH
25608: LD_VAR 0 8
25612: ARRAY
25613: IFFALSE 25635
// tmp := tmp & i & ; ;
25615: LD_ADDR_VAR 0 3
25619: PUSH
25620: LD_VAR 0 3
25624: PUSH
25625: LD_VAR 0 8
25629: STR
25630: PUSH
25631: LD_STRING ;
25633: STR
25634: ST_TO_ADDR
// end ;
25635: GO 25600
25637: POP
25638: POP
// for i = 1 to hardcoreCounter do
25639: LD_ADDR_VAR 0 8
25643: PUSH
25644: DOUBLE
25645: LD_INT 1
25647: DEC
25648: ST_TO_ADDR
25649: LD_EXP 51
25653: PUSH
25654: FOR_TO
25655: IFFALSE 25701
// begin if flags [ normalCounter + i ] then
25657: LD_VAR 0 4
25661: PUSH
25662: LD_EXP 50
25666: PUSH
25667: LD_VAR 0 8
25671: PLUS
25672: ARRAY
25673: IFFALSE 25699
// tmp := tmp & ( 100 + i ) & ; ;
25675: LD_ADDR_VAR 0 3
25679: PUSH
25680: LD_VAR 0 3
25684: PUSH
25685: LD_INT 100
25687: PUSH
25688: LD_VAR 0 8
25692: PLUS
25693: STR
25694: PUSH
25695: LD_STRING ;
25697: STR
25698: ST_TO_ADDR
// end ;
25699: GO 25654
25701: POP
25702: POP
// if tmp then
25703: LD_VAR 0 3
25707: IFFALSE 25719
// active := tmp ;
25709: LD_ADDR_VAR 0 7
25713: PUSH
25714: LD_VAR 0 3
25718: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25719: LD_STRING getStreamItemsFromMission("
25721: PUSH
25722: LD_VAR 0 5
25726: STR
25727: PUSH
25728: LD_STRING ","
25730: STR
25731: PUSH
25732: LD_VAR 0 6
25736: STR
25737: PUSH
25738: LD_STRING ","
25740: STR
25741: PUSH
25742: LD_VAR 0 7
25746: STR
25747: PUSH
25748: LD_STRING ")
25750: STR
25751: PPUSH
25752: CALL_OW 559
// end else
25756: GO 25765
// ToLua ( getStreamItemsFromMission("","","") ) ;
25758: LD_STRING getStreamItemsFromMission("","","")
25760: PPUSH
25761: CALL_OW 559
// end ;
25765: LD_VAR 0 2
25769: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25770: LD_EXP 49
25774: PUSH
25775: LD_EXP 54
25779: AND
25780: IFFALSE 25904
25782: GO 25784
25784: DISABLE
25785: LD_INT 0
25787: PPUSH
25788: PPUSH
// begin enable ;
25789: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25790: LD_ADDR_VAR 0 2
25794: PUSH
25795: LD_INT 22
25797: PUSH
25798: LD_OWVAR 2
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: LD_INT 34
25812: PUSH
25813: LD_INT 7
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 34
25822: PUSH
25823: LD_INT 45
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 34
25832: PUSH
25833: LD_INT 28
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 34
25842: PUSH
25843: LD_INT 47
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PPUSH
25861: CALL_OW 69
25865: ST_TO_ADDR
// if not tmp then
25866: LD_VAR 0 2
25870: NOT
25871: IFFALSE 25875
// exit ;
25873: GO 25904
// for i in tmp do
25875: LD_ADDR_VAR 0 1
25879: PUSH
25880: LD_VAR 0 2
25884: PUSH
25885: FOR_IN
25886: IFFALSE 25902
// begin SetLives ( i , 0 ) ;
25888: LD_VAR 0 1
25892: PPUSH
25893: LD_INT 0
25895: PPUSH
25896: CALL_OW 234
// end ;
25900: GO 25885
25902: POP
25903: POP
// end ;
25904: PPOPN 2
25906: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25907: LD_EXP 49
25911: PUSH
25912: LD_EXP 55
25916: AND
25917: IFFALSE 26001
25919: GO 25921
25921: DISABLE
25922: LD_INT 0
25924: PPUSH
25925: PPUSH
// begin enable ;
25926: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25927: LD_ADDR_VAR 0 2
25931: PUSH
25932: LD_INT 22
25934: PUSH
25935: LD_OWVAR 2
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 32
25946: PUSH
25947: LD_INT 3
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PPUSH
25958: CALL_OW 69
25962: ST_TO_ADDR
// if not tmp then
25963: LD_VAR 0 2
25967: NOT
25968: IFFALSE 25972
// exit ;
25970: GO 26001
// for i in tmp do
25972: LD_ADDR_VAR 0 1
25976: PUSH
25977: LD_VAR 0 2
25981: PUSH
25982: FOR_IN
25983: IFFALSE 25999
// begin SetLives ( i , 0 ) ;
25985: LD_VAR 0 1
25989: PPUSH
25990: LD_INT 0
25992: PPUSH
25993: CALL_OW 234
// end ;
25997: GO 25982
25999: POP
26000: POP
// end ;
26001: PPOPN 2
26003: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26004: LD_EXP 49
26008: PUSH
26009: LD_EXP 52
26013: AND
26014: IFFALSE 26107
26016: GO 26018
26018: DISABLE
26019: LD_INT 0
26021: PPUSH
// begin enable ;
26022: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26023: LD_ADDR_VAR 0 1
26027: PUSH
26028: LD_INT 22
26030: PUSH
26031: LD_OWVAR 2
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: LD_INT 25
26045: PUSH
26046: LD_INT 5
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 25
26055: PUSH
26056: LD_INT 9
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 25
26065: PUSH
26066: LD_INT 8
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PPUSH
26083: CALL_OW 69
26087: PUSH
26088: FOR_IN
26089: IFFALSE 26105
// begin SetClass ( i , 1 ) ;
26091: LD_VAR 0 1
26095: PPUSH
26096: LD_INT 1
26098: PPUSH
26099: CALL_OW 336
// end ;
26103: GO 26088
26105: POP
26106: POP
// end ;
26107: PPOPN 1
26109: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26110: LD_EXP 49
26114: PUSH
26115: LD_EXP 53
26119: AND
26120: PUSH
26121: LD_OWVAR 65
26125: PUSH
26126: LD_INT 7
26128: LESS
26129: AND
26130: IFFALSE 26144
26132: GO 26134
26134: DISABLE
// begin enable ;
26135: ENABLE
// game_speed := 7 ;
26136: LD_ADDR_OWVAR 65
26140: PUSH
26141: LD_INT 7
26143: ST_TO_ADDR
// end ;
26144: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26145: LD_EXP 49
26149: PUSH
26150: LD_EXP 56
26154: AND
26155: IFFALSE 26357
26157: GO 26159
26159: DISABLE
26160: LD_INT 0
26162: PPUSH
26163: PPUSH
26164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26165: LD_ADDR_VAR 0 3
26169: PUSH
26170: LD_INT 81
26172: PUSH
26173: LD_OWVAR 2
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 21
26184: PUSH
26185: LD_INT 1
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PPUSH
26196: CALL_OW 69
26200: ST_TO_ADDR
// if not tmp then
26201: LD_VAR 0 3
26205: NOT
26206: IFFALSE 26210
// exit ;
26208: GO 26357
// if tmp > 5 then
26210: LD_VAR 0 3
26214: PUSH
26215: LD_INT 5
26217: GREATER
26218: IFFALSE 26230
// k := 5 else
26220: LD_ADDR_VAR 0 2
26224: PUSH
26225: LD_INT 5
26227: ST_TO_ADDR
26228: GO 26240
// k := tmp ;
26230: LD_ADDR_VAR 0 2
26234: PUSH
26235: LD_VAR 0 3
26239: ST_TO_ADDR
// for i := 1 to k do
26240: LD_ADDR_VAR 0 1
26244: PUSH
26245: DOUBLE
26246: LD_INT 1
26248: DEC
26249: ST_TO_ADDR
26250: LD_VAR 0 2
26254: PUSH
26255: FOR_TO
26256: IFFALSE 26355
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26258: LD_VAR 0 3
26262: PUSH
26263: LD_VAR 0 1
26267: ARRAY
26268: PPUSH
26269: LD_VAR 0 1
26273: PUSH
26274: LD_INT 4
26276: MOD
26277: PUSH
26278: LD_INT 1
26280: PLUS
26281: PPUSH
26282: CALL_OW 259
26286: PUSH
26287: LD_INT 10
26289: LESS
26290: IFFALSE 26353
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26292: LD_VAR 0 3
26296: PUSH
26297: LD_VAR 0 1
26301: ARRAY
26302: PPUSH
26303: LD_VAR 0 1
26307: PUSH
26308: LD_INT 4
26310: MOD
26311: PUSH
26312: LD_INT 1
26314: PLUS
26315: PPUSH
26316: LD_VAR 0 3
26320: PUSH
26321: LD_VAR 0 1
26325: ARRAY
26326: PPUSH
26327: LD_VAR 0 1
26331: PUSH
26332: LD_INT 4
26334: MOD
26335: PUSH
26336: LD_INT 1
26338: PLUS
26339: PPUSH
26340: CALL_OW 259
26344: PUSH
26345: LD_INT 1
26347: PLUS
26348: PPUSH
26349: CALL_OW 237
26353: GO 26255
26355: POP
26356: POP
// end ;
26357: PPOPN 3
26359: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26360: LD_EXP 49
26364: PUSH
26365: LD_EXP 57
26369: AND
26370: IFFALSE 26390
26372: GO 26374
26374: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26375: LD_INT 4
26377: PPUSH
26378: LD_OWVAR 2
26382: PPUSH
26383: LD_INT 0
26385: PPUSH
26386: CALL_OW 324
26390: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26391: LD_EXP 49
26395: PUSH
26396: LD_EXP 86
26400: AND
26401: IFFALSE 26421
26403: GO 26405
26405: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26406: LD_INT 19
26408: PPUSH
26409: LD_OWVAR 2
26413: PPUSH
26414: LD_INT 0
26416: PPUSH
26417: CALL_OW 324
26421: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26422: LD_EXP 49
26426: PUSH
26427: LD_EXP 58
26431: AND
26432: IFFALSE 26534
26434: GO 26436
26436: DISABLE
26437: LD_INT 0
26439: PPUSH
26440: PPUSH
// begin enable ;
26441: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26442: LD_ADDR_VAR 0 2
26446: PUSH
26447: LD_INT 22
26449: PUSH
26450: LD_OWVAR 2
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 2
26461: PUSH
26462: LD_INT 34
26464: PUSH
26465: LD_INT 11
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 34
26474: PUSH
26475: LD_INT 30
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: LIST
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PPUSH
26491: CALL_OW 69
26495: ST_TO_ADDR
// if not tmp then
26496: LD_VAR 0 2
26500: NOT
26501: IFFALSE 26505
// exit ;
26503: GO 26534
// for i in tmp do
26505: LD_ADDR_VAR 0 1
26509: PUSH
26510: LD_VAR 0 2
26514: PUSH
26515: FOR_IN
26516: IFFALSE 26532
// begin SetLives ( i , 0 ) ;
26518: LD_VAR 0 1
26522: PPUSH
26523: LD_INT 0
26525: PPUSH
26526: CALL_OW 234
// end ;
26530: GO 26515
26532: POP
26533: POP
// end ;
26534: PPOPN 2
26536: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26537: LD_EXP 49
26541: PUSH
26542: LD_EXP 59
26546: AND
26547: IFFALSE 26567
26549: GO 26551
26551: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26552: LD_INT 32
26554: PPUSH
26555: LD_OWVAR 2
26559: PPUSH
26560: LD_INT 0
26562: PPUSH
26563: CALL_OW 324
26567: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26568: LD_EXP 49
26572: PUSH
26573: LD_EXP 60
26577: AND
26578: IFFALSE 26759
26580: GO 26582
26582: DISABLE
26583: LD_INT 0
26585: PPUSH
26586: PPUSH
26587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26588: LD_ADDR_VAR 0 2
26592: PUSH
26593: LD_INT 22
26595: PUSH
26596: LD_OWVAR 2
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 33
26607: PUSH
26608: LD_INT 3
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PPUSH
26619: CALL_OW 69
26623: ST_TO_ADDR
// if not tmp then
26624: LD_VAR 0 2
26628: NOT
26629: IFFALSE 26633
// exit ;
26631: GO 26759
// side := 0 ;
26633: LD_ADDR_VAR 0 3
26637: PUSH
26638: LD_INT 0
26640: ST_TO_ADDR
// for i := 1 to 8 do
26641: LD_ADDR_VAR 0 1
26645: PUSH
26646: DOUBLE
26647: LD_INT 1
26649: DEC
26650: ST_TO_ADDR
26651: LD_INT 8
26653: PUSH
26654: FOR_TO
26655: IFFALSE 26703
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26657: LD_OWVAR 2
26661: PUSH
26662: LD_VAR 0 1
26666: NONEQUAL
26667: PUSH
26668: LD_OWVAR 2
26672: PPUSH
26673: LD_VAR 0 1
26677: PPUSH
26678: CALL_OW 81
26682: PUSH
26683: LD_INT 2
26685: EQUAL
26686: AND
26687: IFFALSE 26701
// begin side := i ;
26689: LD_ADDR_VAR 0 3
26693: PUSH
26694: LD_VAR 0 1
26698: ST_TO_ADDR
// break ;
26699: GO 26703
// end ;
26701: GO 26654
26703: POP
26704: POP
// if not side then
26705: LD_VAR 0 3
26709: NOT
26710: IFFALSE 26714
// exit ;
26712: GO 26759
// for i := 1 to tmp do
26714: LD_ADDR_VAR 0 1
26718: PUSH
26719: DOUBLE
26720: LD_INT 1
26722: DEC
26723: ST_TO_ADDR
26724: LD_VAR 0 2
26728: PUSH
26729: FOR_TO
26730: IFFALSE 26757
// if Prob ( 60 ) then
26732: LD_INT 60
26734: PPUSH
26735: CALL_OW 13
26739: IFFALSE 26755
// SetSide ( i , side ) ;
26741: LD_VAR 0 1
26745: PPUSH
26746: LD_VAR 0 3
26750: PPUSH
26751: CALL_OW 235
26755: GO 26729
26757: POP
26758: POP
// end ;
26759: PPOPN 3
26761: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26762: LD_EXP 49
26766: PUSH
26767: LD_EXP 62
26771: AND
26772: IFFALSE 26891
26774: GO 26776
26776: DISABLE
26777: LD_INT 0
26779: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26780: LD_ADDR_VAR 0 1
26784: PUSH
26785: LD_INT 22
26787: PUSH
26788: LD_OWVAR 2
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 21
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 3
26809: PUSH
26810: LD_INT 23
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: PPUSH
26829: CALL_OW 69
26833: PUSH
26834: FOR_IN
26835: IFFALSE 26889
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26837: LD_VAR 0 1
26841: PPUSH
26842: CALL_OW 257
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: LD_INT 2
26852: PUSH
26853: LD_INT 3
26855: PUSH
26856: LD_INT 4
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: IN
26865: IFFALSE 26887
// SetClass ( un , rand ( 1 , 4 ) ) ;
26867: LD_VAR 0 1
26871: PPUSH
26872: LD_INT 1
26874: PPUSH
26875: LD_INT 4
26877: PPUSH
26878: CALL_OW 12
26882: PPUSH
26883: CALL_OW 336
26887: GO 26834
26889: POP
26890: POP
// end ;
26891: PPOPN 1
26893: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26894: LD_EXP 49
26898: PUSH
26899: LD_EXP 61
26903: AND
26904: IFFALSE 26983
26906: GO 26908
26908: DISABLE
26909: LD_INT 0
26911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26912: LD_ADDR_VAR 0 1
26916: PUSH
26917: LD_INT 22
26919: PUSH
26920: LD_OWVAR 2
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 21
26931: PUSH
26932: LD_INT 3
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PPUSH
26943: CALL_OW 69
26947: ST_TO_ADDR
// if not tmp then
26948: LD_VAR 0 1
26952: NOT
26953: IFFALSE 26957
// exit ;
26955: GO 26983
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26957: LD_VAR 0 1
26961: PUSH
26962: LD_INT 1
26964: PPUSH
26965: LD_VAR 0 1
26969: PPUSH
26970: CALL_OW 12
26974: ARRAY
26975: PPUSH
26976: LD_INT 100
26978: PPUSH
26979: CALL_OW 234
// end ;
26983: PPOPN 1
26985: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26986: LD_EXP 49
26990: PUSH
26991: LD_EXP 63
26995: AND
26996: IFFALSE 27094
26998: GO 27000
27000: DISABLE
27001: LD_INT 0
27003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27004: LD_ADDR_VAR 0 1
27008: PUSH
27009: LD_INT 22
27011: PUSH
27012: LD_OWVAR 2
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 21
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PPUSH
27035: CALL_OW 69
27039: ST_TO_ADDR
// if not tmp then
27040: LD_VAR 0 1
27044: NOT
27045: IFFALSE 27049
// exit ;
27047: GO 27094
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27049: LD_VAR 0 1
27053: PUSH
27054: LD_INT 1
27056: PPUSH
27057: LD_VAR 0 1
27061: PPUSH
27062: CALL_OW 12
27066: ARRAY
27067: PPUSH
27068: LD_INT 1
27070: PPUSH
27071: LD_INT 4
27073: PPUSH
27074: CALL_OW 12
27078: PPUSH
27079: LD_INT 3000
27081: PPUSH
27082: LD_INT 9000
27084: PPUSH
27085: CALL_OW 12
27089: PPUSH
27090: CALL_OW 492
// end ;
27094: PPOPN 1
27096: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27097: LD_EXP 49
27101: PUSH
27102: LD_EXP 64
27106: AND
27107: IFFALSE 27127
27109: GO 27111
27111: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27112: LD_INT 1
27114: PPUSH
27115: LD_OWVAR 2
27119: PPUSH
27120: LD_INT 0
27122: PPUSH
27123: CALL_OW 324
27127: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27128: LD_EXP 49
27132: PUSH
27133: LD_EXP 65
27137: AND
27138: IFFALSE 27221
27140: GO 27142
27142: DISABLE
27143: LD_INT 0
27145: PPUSH
27146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27147: LD_ADDR_VAR 0 2
27151: PUSH
27152: LD_INT 22
27154: PUSH
27155: LD_OWVAR 2
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 21
27166: PUSH
27167: LD_INT 3
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PPUSH
27178: CALL_OW 69
27182: ST_TO_ADDR
// if not tmp then
27183: LD_VAR 0 2
27187: NOT
27188: IFFALSE 27192
// exit ;
27190: GO 27221
// for i in tmp do
27192: LD_ADDR_VAR 0 1
27196: PUSH
27197: LD_VAR 0 2
27201: PUSH
27202: FOR_IN
27203: IFFALSE 27219
// SetBLevel ( i , 10 ) ;
27205: LD_VAR 0 1
27209: PPUSH
27210: LD_INT 10
27212: PPUSH
27213: CALL_OW 241
27217: GO 27202
27219: POP
27220: POP
// end ;
27221: PPOPN 2
27223: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27224: LD_EXP 49
27228: PUSH
27229: LD_EXP 66
27233: AND
27234: IFFALSE 27345
27236: GO 27238
27238: DISABLE
27239: LD_INT 0
27241: PPUSH
27242: PPUSH
27243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27244: LD_ADDR_VAR 0 3
27248: PUSH
27249: LD_INT 22
27251: PUSH
27252: LD_OWVAR 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 25
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PPUSH
27275: CALL_OW 69
27279: ST_TO_ADDR
// if not tmp then
27280: LD_VAR 0 3
27284: NOT
27285: IFFALSE 27289
// exit ;
27287: GO 27345
// un := tmp [ rand ( 1 , tmp ) ] ;
27289: LD_ADDR_VAR 0 2
27293: PUSH
27294: LD_VAR 0 3
27298: PUSH
27299: LD_INT 1
27301: PPUSH
27302: LD_VAR 0 3
27306: PPUSH
27307: CALL_OW 12
27311: ARRAY
27312: ST_TO_ADDR
// if Crawls ( un ) then
27313: LD_VAR 0 2
27317: PPUSH
27318: CALL_OW 318
27322: IFFALSE 27333
// ComWalk ( un ) ;
27324: LD_VAR 0 2
27328: PPUSH
27329: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27333: LD_VAR 0 2
27337: PPUSH
27338: LD_INT 5
27340: PPUSH
27341: CALL_OW 336
// end ;
27345: PPOPN 3
27347: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27348: LD_EXP 49
27352: PUSH
27353: LD_EXP 67
27357: AND
27358: PUSH
27359: LD_OWVAR 67
27363: PUSH
27364: LD_INT 4
27366: LESS
27367: AND
27368: IFFALSE 27387
27370: GO 27372
27372: DISABLE
// begin Difficulty := Difficulty + 1 ;
27373: LD_ADDR_OWVAR 67
27377: PUSH
27378: LD_OWVAR 67
27382: PUSH
27383: LD_INT 1
27385: PLUS
27386: ST_TO_ADDR
// end ;
27387: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27388: LD_EXP 49
27392: PUSH
27393: LD_EXP 68
27397: AND
27398: IFFALSE 27501
27400: GO 27402
27402: DISABLE
27403: LD_INT 0
27405: PPUSH
// begin for i := 1 to 5 do
27406: LD_ADDR_VAR 0 1
27410: PUSH
27411: DOUBLE
27412: LD_INT 1
27414: DEC
27415: ST_TO_ADDR
27416: LD_INT 5
27418: PUSH
27419: FOR_TO
27420: IFFALSE 27499
// begin uc_nation := nation_nature ;
27422: LD_ADDR_OWVAR 21
27426: PUSH
27427: LD_INT 0
27429: ST_TO_ADDR
// uc_side := 0 ;
27430: LD_ADDR_OWVAR 20
27434: PUSH
27435: LD_INT 0
27437: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27438: LD_ADDR_OWVAR 29
27442: PUSH
27443: LD_INT 12
27445: PUSH
27446: LD_INT 12
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: ST_TO_ADDR
// hc_agressivity := 20 ;
27453: LD_ADDR_OWVAR 35
27457: PUSH
27458: LD_INT 20
27460: ST_TO_ADDR
// hc_class := class_tiger ;
27461: LD_ADDR_OWVAR 28
27465: PUSH
27466: LD_INT 14
27468: ST_TO_ADDR
// hc_gallery :=  ;
27469: LD_ADDR_OWVAR 33
27473: PUSH
27474: LD_STRING 
27476: ST_TO_ADDR
// hc_name :=  ;
27477: LD_ADDR_OWVAR 26
27481: PUSH
27482: LD_STRING 
27484: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27485: CALL_OW 44
27489: PPUSH
27490: LD_INT 0
27492: PPUSH
27493: CALL_OW 51
// end ;
27497: GO 27419
27499: POP
27500: POP
// end ;
27501: PPOPN 1
27503: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27504: LD_EXP 49
27508: PUSH
27509: LD_EXP 69
27513: AND
27514: IFFALSE 27523
27516: GO 27518
27518: DISABLE
// StreamSibBomb ;
27519: CALL 27524 0 0
27523: END
// export function StreamSibBomb ; var i , x , y ; begin
27524: LD_INT 0
27526: PPUSH
27527: PPUSH
27528: PPUSH
27529: PPUSH
// result := false ;
27530: LD_ADDR_VAR 0 1
27534: PUSH
27535: LD_INT 0
27537: ST_TO_ADDR
// for i := 1 to 16 do
27538: LD_ADDR_VAR 0 2
27542: PUSH
27543: DOUBLE
27544: LD_INT 1
27546: DEC
27547: ST_TO_ADDR
27548: LD_INT 16
27550: PUSH
27551: FOR_TO
27552: IFFALSE 27751
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27554: LD_ADDR_VAR 0 3
27558: PUSH
27559: LD_INT 10
27561: PUSH
27562: LD_INT 20
27564: PUSH
27565: LD_INT 30
27567: PUSH
27568: LD_INT 40
27570: PUSH
27571: LD_INT 50
27573: PUSH
27574: LD_INT 60
27576: PUSH
27577: LD_INT 70
27579: PUSH
27580: LD_INT 80
27582: PUSH
27583: LD_INT 90
27585: PUSH
27586: LD_INT 100
27588: PUSH
27589: LD_INT 110
27591: PUSH
27592: LD_INT 120
27594: PUSH
27595: LD_INT 130
27597: PUSH
27598: LD_INT 140
27600: PUSH
27601: LD_INT 150
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: PPUSH
27624: LD_INT 15
27626: PPUSH
27627: CALL_OW 12
27631: ARRAY
27632: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27633: LD_ADDR_VAR 0 4
27637: PUSH
27638: LD_INT 10
27640: PUSH
27641: LD_INT 20
27643: PUSH
27644: LD_INT 30
27646: PUSH
27647: LD_INT 40
27649: PUSH
27650: LD_INT 50
27652: PUSH
27653: LD_INT 60
27655: PUSH
27656: LD_INT 70
27658: PUSH
27659: LD_INT 80
27661: PUSH
27662: LD_INT 90
27664: PUSH
27665: LD_INT 100
27667: PUSH
27668: LD_INT 110
27670: PUSH
27671: LD_INT 120
27673: PUSH
27674: LD_INT 130
27676: PUSH
27677: LD_INT 140
27679: PUSH
27680: LD_INT 150
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: PPUSH
27703: LD_INT 15
27705: PPUSH
27706: CALL_OW 12
27710: ARRAY
27711: ST_TO_ADDR
// if ValidHex ( x , y ) then
27712: LD_VAR 0 3
27716: PPUSH
27717: LD_VAR 0 4
27721: PPUSH
27722: CALL_OW 488
27726: IFFALSE 27749
// begin result := [ x , y ] ;
27728: LD_ADDR_VAR 0 1
27732: PUSH
27733: LD_VAR 0 3
27737: PUSH
27738: LD_VAR 0 4
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: ST_TO_ADDR
// break ;
27747: GO 27751
// end ; end ;
27749: GO 27551
27751: POP
27752: POP
// if result then
27753: LD_VAR 0 1
27757: IFFALSE 27817
// begin ToLua ( playSibBomb() ) ;
27759: LD_STRING playSibBomb()
27761: PPUSH
27762: CALL_OW 559
// wait ( 0 0$14 ) ;
27766: LD_INT 490
27768: PPUSH
27769: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27773: LD_VAR 0 1
27777: PUSH
27778: LD_INT 1
27780: ARRAY
27781: PPUSH
27782: LD_VAR 0 1
27786: PUSH
27787: LD_INT 2
27789: ARRAY
27790: PPUSH
27791: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27795: LD_VAR 0 1
27799: PUSH
27800: LD_INT 1
27802: ARRAY
27803: PPUSH
27804: LD_VAR 0 1
27808: PUSH
27809: LD_INT 2
27811: ARRAY
27812: PPUSH
27813: CALL_OW 429
// end ; end ;
27817: LD_VAR 0 1
27821: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27822: LD_EXP 49
27826: PUSH
27827: LD_EXP 71
27831: AND
27832: IFFALSE 27844
27834: GO 27836
27836: DISABLE
// YouLost (  ) ;
27837: LD_STRING 
27839: PPUSH
27840: CALL_OW 104
27844: END
// every 0 0$1 trigger StreamModeActive and sFog do
27845: LD_EXP 49
27849: PUSH
27850: LD_EXP 70
27854: AND
27855: IFFALSE 27869
27857: GO 27859
27859: DISABLE
// FogOff ( your_side ) ;
27860: LD_OWVAR 2
27864: PPUSH
27865: CALL_OW 344
27869: END
// every 0 0$1 trigger StreamModeActive and sSun do
27870: LD_EXP 49
27874: PUSH
27875: LD_EXP 72
27879: AND
27880: IFFALSE 27908
27882: GO 27884
27884: DISABLE
// begin solar_recharge_percent := 0 ;
27885: LD_ADDR_OWVAR 79
27889: PUSH
27890: LD_INT 0
27892: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27893: LD_INT 10500
27895: PPUSH
27896: CALL_OW 67
// solar_recharge_percent := 100 ;
27900: LD_ADDR_OWVAR 79
27904: PUSH
27905: LD_INT 100
27907: ST_TO_ADDR
// end ;
27908: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27909: LD_EXP 49
27913: PUSH
27914: LD_EXP 73
27918: AND
27919: IFFALSE 28158
27921: GO 27923
27923: DISABLE
27924: LD_INT 0
27926: PPUSH
27927: PPUSH
27928: PPUSH
// begin tmp := [ ] ;
27929: LD_ADDR_VAR 0 3
27933: PUSH
27934: EMPTY
27935: ST_TO_ADDR
// for i := 1 to 6 do
27936: LD_ADDR_VAR 0 1
27940: PUSH
27941: DOUBLE
27942: LD_INT 1
27944: DEC
27945: ST_TO_ADDR
27946: LD_INT 6
27948: PUSH
27949: FOR_TO
27950: IFFALSE 28055
// begin uc_nation := nation_nature ;
27952: LD_ADDR_OWVAR 21
27956: PUSH
27957: LD_INT 0
27959: ST_TO_ADDR
// uc_side := 0 ;
27960: LD_ADDR_OWVAR 20
27964: PUSH
27965: LD_INT 0
27967: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27968: LD_ADDR_OWVAR 29
27972: PUSH
27973: LD_INT 12
27975: PUSH
27976: LD_INT 12
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: ST_TO_ADDR
// hc_agressivity := 20 ;
27983: LD_ADDR_OWVAR 35
27987: PUSH
27988: LD_INT 20
27990: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27991: LD_ADDR_OWVAR 28
27995: PUSH
27996: LD_INT 17
27998: ST_TO_ADDR
// hc_gallery :=  ;
27999: LD_ADDR_OWVAR 33
28003: PUSH
28004: LD_STRING 
28006: ST_TO_ADDR
// hc_name :=  ;
28007: LD_ADDR_OWVAR 26
28011: PUSH
28012: LD_STRING 
28014: ST_TO_ADDR
// un := CreateHuman ;
28015: LD_ADDR_VAR 0 2
28019: PUSH
28020: CALL_OW 44
28024: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28025: LD_VAR 0 2
28029: PPUSH
28030: LD_INT 1
28032: PPUSH
28033: CALL_OW 51
// tmp := tmp ^ un ;
28037: LD_ADDR_VAR 0 3
28041: PUSH
28042: LD_VAR 0 3
28046: PUSH
28047: LD_VAR 0 2
28051: ADD
28052: ST_TO_ADDR
// end ;
28053: GO 27949
28055: POP
28056: POP
// repeat wait ( 0 0$1 ) ;
28057: LD_INT 35
28059: PPUSH
28060: CALL_OW 67
// for un in tmp do
28064: LD_ADDR_VAR 0 2
28068: PUSH
28069: LD_VAR 0 3
28073: PUSH
28074: FOR_IN
28075: IFFALSE 28149
// begin if IsDead ( un ) then
28077: LD_VAR 0 2
28081: PPUSH
28082: CALL_OW 301
28086: IFFALSE 28106
// begin tmp := tmp diff un ;
28088: LD_ADDR_VAR 0 3
28092: PUSH
28093: LD_VAR 0 3
28097: PUSH
28098: LD_VAR 0 2
28102: DIFF
28103: ST_TO_ADDR
// continue ;
28104: GO 28074
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28106: LD_VAR 0 2
28110: PPUSH
28111: LD_INT 3
28113: PUSH
28114: LD_INT 22
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PPUSH
28128: CALL_OW 69
28132: PPUSH
28133: LD_VAR 0 2
28137: PPUSH
28138: CALL_OW 74
28142: PPUSH
28143: CALL_OW 115
// end ;
28147: GO 28074
28149: POP
28150: POP
// until not tmp ;
28151: LD_VAR 0 3
28155: NOT
28156: IFFALSE 28057
// end ;
28158: PPOPN 3
28160: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28161: LD_EXP 49
28165: PUSH
28166: LD_EXP 74
28170: AND
28171: IFFALSE 28225
28173: GO 28175
28175: DISABLE
// begin ToLua ( displayTroll(); ) ;
28176: LD_STRING displayTroll();
28178: PPUSH
28179: CALL_OW 559
// wait ( 3 3$00 ) ;
28183: LD_INT 6300
28185: PPUSH
28186: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28190: LD_STRING hideTroll();
28192: PPUSH
28193: CALL_OW 559
// wait ( 1 1$00 ) ;
28197: LD_INT 2100
28199: PPUSH
28200: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28204: LD_STRING displayTroll();
28206: PPUSH
28207: CALL_OW 559
// wait ( 1 1$00 ) ;
28211: LD_INT 2100
28213: PPUSH
28214: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28218: LD_STRING hideTroll();
28220: PPUSH
28221: CALL_OW 559
// end ;
28225: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28226: LD_EXP 49
28230: PUSH
28231: LD_EXP 75
28235: AND
28236: IFFALSE 28299
28238: GO 28240
28240: DISABLE
28241: LD_INT 0
28243: PPUSH
// begin p := 0 ;
28244: LD_ADDR_VAR 0 1
28248: PUSH
28249: LD_INT 0
28251: ST_TO_ADDR
// repeat game_speed := 1 ;
28252: LD_ADDR_OWVAR 65
28256: PUSH
28257: LD_INT 1
28259: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28260: LD_INT 35
28262: PPUSH
28263: CALL_OW 67
// p := p + 1 ;
28267: LD_ADDR_VAR 0 1
28271: PUSH
28272: LD_VAR 0 1
28276: PUSH
28277: LD_INT 1
28279: PLUS
28280: ST_TO_ADDR
// until p >= 60 ;
28281: LD_VAR 0 1
28285: PUSH
28286: LD_INT 60
28288: GREATEREQUAL
28289: IFFALSE 28252
// game_speed := 4 ;
28291: LD_ADDR_OWVAR 65
28295: PUSH
28296: LD_INT 4
28298: ST_TO_ADDR
// end ;
28299: PPOPN 1
28301: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28302: LD_EXP 49
28306: PUSH
28307: LD_EXP 76
28311: AND
28312: IFFALSE 28458
28314: GO 28316
28316: DISABLE
28317: LD_INT 0
28319: PPUSH
28320: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28321: LD_ADDR_VAR 0 1
28325: PUSH
28326: LD_INT 22
28328: PUSH
28329: LD_OWVAR 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: LD_INT 30
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 30
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: LIST
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PPUSH
28370: CALL_OW 69
28374: ST_TO_ADDR
// if not depot then
28375: LD_VAR 0 1
28379: NOT
28380: IFFALSE 28384
// exit ;
28382: GO 28458
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28384: LD_ADDR_VAR 0 2
28388: PUSH
28389: LD_VAR 0 1
28393: PUSH
28394: LD_INT 1
28396: PPUSH
28397: LD_VAR 0 1
28401: PPUSH
28402: CALL_OW 12
28406: ARRAY
28407: PPUSH
28408: CALL_OW 274
28412: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28413: LD_VAR 0 2
28417: PPUSH
28418: LD_INT 1
28420: PPUSH
28421: LD_INT 0
28423: PPUSH
28424: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28428: LD_VAR 0 2
28432: PPUSH
28433: LD_INT 2
28435: PPUSH
28436: LD_INT 0
28438: PPUSH
28439: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28443: LD_VAR 0 2
28447: PPUSH
28448: LD_INT 3
28450: PPUSH
28451: LD_INT 0
28453: PPUSH
28454: CALL_OW 277
// end ;
28458: PPOPN 2
28460: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28461: LD_EXP 49
28465: PUSH
28466: LD_EXP 77
28470: AND
28471: IFFALSE 28568
28473: GO 28475
28475: DISABLE
28476: LD_INT 0
28478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28479: LD_ADDR_VAR 0 1
28483: PUSH
28484: LD_INT 22
28486: PUSH
28487: LD_OWVAR 2
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 21
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 3
28508: PUSH
28509: LD_INT 23
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: PPUSH
28528: CALL_OW 69
28532: ST_TO_ADDR
// if not tmp then
28533: LD_VAR 0 1
28537: NOT
28538: IFFALSE 28542
// exit ;
28540: GO 28568
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28542: LD_VAR 0 1
28546: PUSH
28547: LD_INT 1
28549: PPUSH
28550: LD_VAR 0 1
28554: PPUSH
28555: CALL_OW 12
28559: ARRAY
28560: PPUSH
28561: LD_INT 200
28563: PPUSH
28564: CALL_OW 234
// end ;
28568: PPOPN 1
28570: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28571: LD_EXP 49
28575: PUSH
28576: LD_EXP 78
28580: AND
28581: IFFALSE 28660
28583: GO 28585
28585: DISABLE
28586: LD_INT 0
28588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28589: LD_ADDR_VAR 0 1
28593: PUSH
28594: LD_INT 22
28596: PUSH
28597: LD_OWVAR 2
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 21
28608: PUSH
28609: LD_INT 2
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PPUSH
28620: CALL_OW 69
28624: ST_TO_ADDR
// if not tmp then
28625: LD_VAR 0 1
28629: NOT
28630: IFFALSE 28634
// exit ;
28632: GO 28660
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28634: LD_VAR 0 1
28638: PUSH
28639: LD_INT 1
28641: PPUSH
28642: LD_VAR 0 1
28646: PPUSH
28647: CALL_OW 12
28651: ARRAY
28652: PPUSH
28653: LD_INT 60
28655: PPUSH
28656: CALL_OW 234
// end ;
28660: PPOPN 1
28662: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28663: LD_EXP 49
28667: PUSH
28668: LD_EXP 79
28672: AND
28673: IFFALSE 28772
28675: GO 28677
28677: DISABLE
28678: LD_INT 0
28680: PPUSH
28681: PPUSH
// begin enable ;
28682: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28683: LD_ADDR_VAR 0 1
28687: PUSH
28688: LD_INT 22
28690: PUSH
28691: LD_OWVAR 2
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 61
28702: PUSH
28703: EMPTY
28704: LIST
28705: PUSH
28706: LD_INT 33
28708: PUSH
28709: LD_INT 2
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: LIST
28720: PPUSH
28721: CALL_OW 69
28725: ST_TO_ADDR
// if not tmp then
28726: LD_VAR 0 1
28730: NOT
28731: IFFALSE 28735
// exit ;
28733: GO 28772
// for i in tmp do
28735: LD_ADDR_VAR 0 2
28739: PUSH
28740: LD_VAR 0 1
28744: PUSH
28745: FOR_IN
28746: IFFALSE 28770
// if IsControledBy ( i ) then
28748: LD_VAR 0 2
28752: PPUSH
28753: CALL_OW 312
28757: IFFALSE 28768
// ComUnlink ( i ) ;
28759: LD_VAR 0 2
28763: PPUSH
28764: CALL_OW 136
28768: GO 28745
28770: POP
28771: POP
// end ;
28772: PPOPN 2
28774: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28775: LD_EXP 49
28779: PUSH
28780: LD_EXP 80
28784: AND
28785: IFFALSE 28925
28787: GO 28789
28789: DISABLE
28790: LD_INT 0
28792: PPUSH
28793: PPUSH
// begin ToLua ( displayPowell(); ) ;
28794: LD_STRING displayPowell();
28796: PPUSH
28797: CALL_OW 559
// uc_side := 0 ;
28801: LD_ADDR_OWVAR 20
28805: PUSH
28806: LD_INT 0
28808: ST_TO_ADDR
// uc_nation := 2 ;
28809: LD_ADDR_OWVAR 21
28813: PUSH
28814: LD_INT 2
28816: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28817: LD_ADDR_OWVAR 37
28821: PUSH
28822: LD_INT 14
28824: ST_TO_ADDR
// vc_engine := engine_siberite ;
28825: LD_ADDR_OWVAR 39
28829: PUSH
28830: LD_INT 3
28832: ST_TO_ADDR
// vc_control := control_apeman ;
28833: LD_ADDR_OWVAR 38
28837: PUSH
28838: LD_INT 5
28840: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28841: LD_ADDR_OWVAR 40
28845: PUSH
28846: LD_INT 29
28848: ST_TO_ADDR
// un := CreateVehicle ;
28849: LD_ADDR_VAR 0 2
28853: PUSH
28854: CALL_OW 45
28858: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28859: LD_VAR 0 2
28863: PPUSH
28864: LD_INT 1
28866: PPUSH
28867: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28871: LD_INT 35
28873: PPUSH
28874: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28878: LD_VAR 0 2
28882: PPUSH
28883: LD_INT 22
28885: PUSH
28886: LD_OWVAR 2
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PPUSH
28895: CALL_OW 69
28899: PPUSH
28900: LD_VAR 0 2
28904: PPUSH
28905: CALL_OW 74
28909: PPUSH
28910: CALL_OW 115
// until IsDead ( un ) ;
28914: LD_VAR 0 2
28918: PPUSH
28919: CALL_OW 301
28923: IFFALSE 28871
// end ;
28925: PPOPN 2
28927: END
// every 0 0$1 trigger StreamModeActive and sStu do
28928: LD_EXP 49
28932: PUSH
28933: LD_EXP 88
28937: AND
28938: IFFALSE 28954
28940: GO 28942
28942: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28943: LD_STRING displayStucuk();
28945: PPUSH
28946: CALL_OW 559
// ResetFog ;
28950: CALL_OW 335
// end ;
28954: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28955: LD_EXP 49
28959: PUSH
28960: LD_EXP 81
28964: AND
28965: IFFALSE 29106
28967: GO 28969
28969: DISABLE
28970: LD_INT 0
28972: PPUSH
28973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28974: LD_ADDR_VAR 0 2
28978: PUSH
28979: LD_INT 22
28981: PUSH
28982: LD_OWVAR 2
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 21
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PPUSH
29005: CALL_OW 69
29009: ST_TO_ADDR
// if not tmp then
29010: LD_VAR 0 2
29014: NOT
29015: IFFALSE 29019
// exit ;
29017: GO 29106
// un := tmp [ rand ( 1 , tmp ) ] ;
29019: LD_ADDR_VAR 0 1
29023: PUSH
29024: LD_VAR 0 2
29028: PUSH
29029: LD_INT 1
29031: PPUSH
29032: LD_VAR 0 2
29036: PPUSH
29037: CALL_OW 12
29041: ARRAY
29042: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29043: LD_VAR 0 1
29047: PPUSH
29048: LD_INT 0
29050: PPUSH
29051: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29055: LD_VAR 0 1
29059: PPUSH
29060: LD_OWVAR 3
29064: PUSH
29065: LD_VAR 0 1
29069: DIFF
29070: PPUSH
29071: LD_VAR 0 1
29075: PPUSH
29076: CALL_OW 74
29080: PPUSH
29081: CALL_OW 115
// wait ( 0 0$20 ) ;
29085: LD_INT 700
29087: PPUSH
29088: CALL_OW 67
// SetSide ( un , your_side ) ;
29092: LD_VAR 0 1
29096: PPUSH
29097: LD_OWVAR 2
29101: PPUSH
29102: CALL_OW 235
// end ;
29106: PPOPN 2
29108: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29109: LD_EXP 49
29113: PUSH
29114: LD_EXP 82
29118: AND
29119: IFFALSE 29225
29121: GO 29123
29123: DISABLE
29124: LD_INT 0
29126: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29127: LD_ADDR_VAR 0 1
29131: PUSH
29132: LD_INT 22
29134: PUSH
29135: LD_OWVAR 2
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 2
29146: PUSH
29147: LD_INT 30
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 30
29159: PUSH
29160: LD_INT 1
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PPUSH
29176: CALL_OW 69
29180: ST_TO_ADDR
// if not depot then
29181: LD_VAR 0 1
29185: NOT
29186: IFFALSE 29190
// exit ;
29188: GO 29225
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29190: LD_VAR 0 1
29194: PUSH
29195: LD_INT 1
29197: ARRAY
29198: PPUSH
29199: CALL_OW 250
29203: PPUSH
29204: LD_VAR 0 1
29208: PUSH
29209: LD_INT 1
29211: ARRAY
29212: PPUSH
29213: CALL_OW 251
29217: PPUSH
29218: LD_INT 70
29220: PPUSH
29221: CALL_OW 495
// end ;
29225: PPOPN 1
29227: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29228: LD_EXP 49
29232: PUSH
29233: LD_EXP 83
29237: AND
29238: IFFALSE 29449
29240: GO 29242
29242: DISABLE
29243: LD_INT 0
29245: PPUSH
29246: PPUSH
29247: PPUSH
29248: PPUSH
29249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29250: LD_ADDR_VAR 0 5
29254: PUSH
29255: LD_INT 22
29257: PUSH
29258: LD_OWVAR 2
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 21
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PPUSH
29281: CALL_OW 69
29285: ST_TO_ADDR
// if not tmp then
29286: LD_VAR 0 5
29290: NOT
29291: IFFALSE 29295
// exit ;
29293: GO 29449
// for i in tmp do
29295: LD_ADDR_VAR 0 1
29299: PUSH
29300: LD_VAR 0 5
29304: PUSH
29305: FOR_IN
29306: IFFALSE 29447
// begin d := rand ( 0 , 5 ) ;
29308: LD_ADDR_VAR 0 4
29312: PUSH
29313: LD_INT 0
29315: PPUSH
29316: LD_INT 5
29318: PPUSH
29319: CALL_OW 12
29323: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29324: LD_ADDR_VAR 0 2
29328: PUSH
29329: LD_VAR 0 1
29333: PPUSH
29334: CALL_OW 250
29338: PPUSH
29339: LD_VAR 0 4
29343: PPUSH
29344: LD_INT 3
29346: PPUSH
29347: LD_INT 12
29349: PPUSH
29350: CALL_OW 12
29354: PPUSH
29355: CALL_OW 272
29359: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29360: LD_ADDR_VAR 0 3
29364: PUSH
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL_OW 251
29374: PPUSH
29375: LD_VAR 0 4
29379: PPUSH
29380: LD_INT 3
29382: PPUSH
29383: LD_INT 12
29385: PPUSH
29386: CALL_OW 12
29390: PPUSH
29391: CALL_OW 273
29395: ST_TO_ADDR
// if ValidHex ( x , y ) then
29396: LD_VAR 0 2
29400: PPUSH
29401: LD_VAR 0 3
29405: PPUSH
29406: CALL_OW 488
29410: IFFALSE 29445
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29412: LD_VAR 0 1
29416: PPUSH
29417: LD_VAR 0 2
29421: PPUSH
29422: LD_VAR 0 3
29426: PPUSH
29427: LD_INT 3
29429: PPUSH
29430: LD_INT 6
29432: PPUSH
29433: CALL_OW 12
29437: PPUSH
29438: LD_INT 1
29440: PPUSH
29441: CALL_OW 483
// end ;
29445: GO 29305
29447: POP
29448: POP
// end ;
29449: PPOPN 5
29451: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29452: LD_EXP 49
29456: PUSH
29457: LD_EXP 84
29461: AND
29462: IFFALSE 29556
29464: GO 29466
29466: DISABLE
29467: LD_INT 0
29469: PPUSH
29470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29471: LD_ADDR_VAR 0 2
29475: PUSH
29476: LD_INT 22
29478: PUSH
29479: LD_OWVAR 2
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 32
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 21
29500: PUSH
29501: LD_INT 2
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: PPUSH
29513: CALL_OW 69
29517: ST_TO_ADDR
// if not tmp then
29518: LD_VAR 0 2
29522: NOT
29523: IFFALSE 29527
// exit ;
29525: GO 29556
// for i in tmp do
29527: LD_ADDR_VAR 0 1
29531: PUSH
29532: LD_VAR 0 2
29536: PUSH
29537: FOR_IN
29538: IFFALSE 29554
// SetFuel ( i , 0 ) ;
29540: LD_VAR 0 1
29544: PPUSH
29545: LD_INT 0
29547: PPUSH
29548: CALL_OW 240
29552: GO 29537
29554: POP
29555: POP
// end ;
29556: PPOPN 2
29558: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29559: LD_EXP 49
29563: PUSH
29564: LD_EXP 85
29568: AND
29569: IFFALSE 29635
29571: GO 29573
29573: DISABLE
29574: LD_INT 0
29576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29577: LD_ADDR_VAR 0 1
29581: PUSH
29582: LD_INT 22
29584: PUSH
29585: LD_OWVAR 2
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 30
29596: PUSH
29597: LD_INT 29
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PPUSH
29608: CALL_OW 69
29612: ST_TO_ADDR
// if not tmp then
29613: LD_VAR 0 1
29617: NOT
29618: IFFALSE 29622
// exit ;
29620: GO 29635
// DestroyUnit ( tmp [ 1 ] ) ;
29622: LD_VAR 0 1
29626: PUSH
29627: LD_INT 1
29629: ARRAY
29630: PPUSH
29631: CALL_OW 65
// end ;
29635: PPOPN 1
29637: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29638: LD_EXP 49
29642: PUSH
29643: LD_EXP 87
29647: AND
29648: IFFALSE 29777
29650: GO 29652
29652: DISABLE
29653: LD_INT 0
29655: PPUSH
// begin uc_side := 0 ;
29656: LD_ADDR_OWVAR 20
29660: PUSH
29661: LD_INT 0
29663: ST_TO_ADDR
// uc_nation := nation_arabian ;
29664: LD_ADDR_OWVAR 21
29668: PUSH
29669: LD_INT 2
29671: ST_TO_ADDR
// hc_gallery :=  ;
29672: LD_ADDR_OWVAR 33
29676: PUSH
29677: LD_STRING 
29679: ST_TO_ADDR
// hc_name :=  ;
29680: LD_ADDR_OWVAR 26
29684: PUSH
29685: LD_STRING 
29687: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29688: LD_INT 1
29690: PPUSH
29691: LD_INT 11
29693: PPUSH
29694: LD_INT 10
29696: PPUSH
29697: CALL_OW 380
// un := CreateHuman ;
29701: LD_ADDR_VAR 0 1
29705: PUSH
29706: CALL_OW 44
29710: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29711: LD_VAR 0 1
29715: PPUSH
29716: LD_INT 1
29718: PPUSH
29719: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29723: LD_INT 35
29725: PPUSH
29726: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29730: LD_VAR 0 1
29734: PPUSH
29735: LD_INT 22
29737: PUSH
29738: LD_OWVAR 2
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PPUSH
29747: CALL_OW 69
29751: PPUSH
29752: LD_VAR 0 1
29756: PPUSH
29757: CALL_OW 74
29761: PPUSH
29762: CALL_OW 115
// until IsDead ( un ) ;
29766: LD_VAR 0 1
29770: PPUSH
29771: CALL_OW 301
29775: IFFALSE 29723
// end ;
29777: PPOPN 1
29779: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29780: LD_EXP 49
29784: PUSH
29785: LD_EXP 89
29789: AND
29790: IFFALSE 29802
29792: GO 29794
29794: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29795: LD_STRING earthquake(getX(game), 0, 32)
29797: PPUSH
29798: CALL_OW 559
29802: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29803: LD_EXP 49
29807: PUSH
29808: LD_EXP 90
29812: AND
29813: IFFALSE 29904
29815: GO 29817
29817: DISABLE
29818: LD_INT 0
29820: PPUSH
// begin enable ;
29821: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29822: LD_ADDR_VAR 0 1
29826: PUSH
29827: LD_INT 22
29829: PUSH
29830: LD_OWVAR 2
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 21
29841: PUSH
29842: LD_INT 2
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 33
29851: PUSH
29852: LD_INT 3
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: PPUSH
29864: CALL_OW 69
29868: ST_TO_ADDR
// if not tmp then
29869: LD_VAR 0 1
29873: NOT
29874: IFFALSE 29878
// exit ;
29876: GO 29904
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29878: LD_VAR 0 1
29882: PUSH
29883: LD_INT 1
29885: PPUSH
29886: LD_VAR 0 1
29890: PPUSH
29891: CALL_OW 12
29895: ARRAY
29896: PPUSH
29897: LD_INT 1
29899: PPUSH
29900: CALL_OW 234
// end ;
29904: PPOPN 1
29906: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29907: LD_EXP 49
29911: PUSH
29912: LD_EXP 91
29916: AND
29917: IFFALSE 30058
29919: GO 29921
29921: DISABLE
29922: LD_INT 0
29924: PPUSH
29925: PPUSH
29926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29927: LD_ADDR_VAR 0 3
29931: PUSH
29932: LD_INT 22
29934: PUSH
29935: LD_OWVAR 2
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 25
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PPUSH
29958: CALL_OW 69
29962: ST_TO_ADDR
// if not tmp then
29963: LD_VAR 0 3
29967: NOT
29968: IFFALSE 29972
// exit ;
29970: GO 30058
// un := tmp [ rand ( 1 , tmp ) ] ;
29972: LD_ADDR_VAR 0 2
29976: PUSH
29977: LD_VAR 0 3
29981: PUSH
29982: LD_INT 1
29984: PPUSH
29985: LD_VAR 0 3
29989: PPUSH
29990: CALL_OW 12
29994: ARRAY
29995: ST_TO_ADDR
// if Crawls ( un ) then
29996: LD_VAR 0 2
30000: PPUSH
30001: CALL_OW 318
30005: IFFALSE 30016
// ComWalk ( un ) ;
30007: LD_VAR 0 2
30011: PPUSH
30012: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30016: LD_VAR 0 2
30020: PPUSH
30021: LD_INT 9
30023: PPUSH
30024: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30028: LD_INT 28
30030: PPUSH
30031: LD_OWVAR 2
30035: PPUSH
30036: LD_INT 2
30038: PPUSH
30039: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30043: LD_INT 29
30045: PPUSH
30046: LD_OWVAR 2
30050: PPUSH
30051: LD_INT 2
30053: PPUSH
30054: CALL_OW 322
// end ;
30058: PPOPN 3
30060: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30061: LD_EXP 49
30065: PUSH
30066: LD_EXP 92
30070: AND
30071: IFFALSE 30182
30073: GO 30075
30075: DISABLE
30076: LD_INT 0
30078: PPUSH
30079: PPUSH
30080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30081: LD_ADDR_VAR 0 3
30085: PUSH
30086: LD_INT 22
30088: PUSH
30089: LD_OWVAR 2
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 25
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PPUSH
30112: CALL_OW 69
30116: ST_TO_ADDR
// if not tmp then
30117: LD_VAR 0 3
30121: NOT
30122: IFFALSE 30126
// exit ;
30124: GO 30182
// un := tmp [ rand ( 1 , tmp ) ] ;
30126: LD_ADDR_VAR 0 2
30130: PUSH
30131: LD_VAR 0 3
30135: PUSH
30136: LD_INT 1
30138: PPUSH
30139: LD_VAR 0 3
30143: PPUSH
30144: CALL_OW 12
30148: ARRAY
30149: ST_TO_ADDR
// if Crawls ( un ) then
30150: LD_VAR 0 2
30154: PPUSH
30155: CALL_OW 318
30159: IFFALSE 30170
// ComWalk ( un ) ;
30161: LD_VAR 0 2
30165: PPUSH
30166: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30170: LD_VAR 0 2
30174: PPUSH
30175: LD_INT 8
30177: PPUSH
30178: CALL_OW 336
// end ;
30182: PPOPN 3
30184: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30185: LD_EXP 49
30189: PUSH
30190: LD_EXP 93
30194: AND
30195: IFFALSE 30339
30197: GO 30199
30199: DISABLE
30200: LD_INT 0
30202: PPUSH
30203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30204: LD_ADDR_VAR 0 2
30208: PUSH
30209: LD_INT 22
30211: PUSH
30212: LD_OWVAR 2
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 21
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: LD_INT 34
30236: PUSH
30237: LD_INT 12
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 34
30246: PUSH
30247: LD_INT 51
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 34
30256: PUSH
30257: LD_INT 32
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: LIST
30274: PPUSH
30275: CALL_OW 69
30279: ST_TO_ADDR
// if not tmp then
30280: LD_VAR 0 2
30284: NOT
30285: IFFALSE 30289
// exit ;
30287: GO 30339
// for i in tmp do
30289: LD_ADDR_VAR 0 1
30293: PUSH
30294: LD_VAR 0 2
30298: PUSH
30299: FOR_IN
30300: IFFALSE 30337
// if GetCargo ( i , mat_artifact ) = 0 then
30302: LD_VAR 0 1
30306: PPUSH
30307: LD_INT 4
30309: PPUSH
30310: CALL_OW 289
30314: PUSH
30315: LD_INT 0
30317: EQUAL
30318: IFFALSE 30335
// SetCargo ( i , mat_siberit , 100 ) ;
30320: LD_VAR 0 1
30324: PPUSH
30325: LD_INT 3
30327: PPUSH
30328: LD_INT 100
30330: PPUSH
30331: CALL_OW 290
30335: GO 30299
30337: POP
30338: POP
// end ;
30339: PPOPN 2
30341: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30342: LD_EXP 49
30346: PUSH
30347: LD_EXP 94
30351: AND
30352: IFFALSE 30535
30354: GO 30356
30356: DISABLE
30357: LD_INT 0
30359: PPUSH
30360: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30361: LD_ADDR_VAR 0 2
30365: PUSH
30366: LD_INT 22
30368: PUSH
30369: LD_OWVAR 2
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PPUSH
30378: CALL_OW 69
30382: ST_TO_ADDR
// if not tmp then
30383: LD_VAR 0 2
30387: NOT
30388: IFFALSE 30392
// exit ;
30390: GO 30535
// for i := 1 to 2 do
30392: LD_ADDR_VAR 0 1
30396: PUSH
30397: DOUBLE
30398: LD_INT 1
30400: DEC
30401: ST_TO_ADDR
30402: LD_INT 2
30404: PUSH
30405: FOR_TO
30406: IFFALSE 30533
// begin uc_side := your_side ;
30408: LD_ADDR_OWVAR 20
30412: PUSH
30413: LD_OWVAR 2
30417: ST_TO_ADDR
// uc_nation := nation_american ;
30418: LD_ADDR_OWVAR 21
30422: PUSH
30423: LD_INT 1
30425: ST_TO_ADDR
// vc_chassis := us_morphling ;
30426: LD_ADDR_OWVAR 37
30430: PUSH
30431: LD_INT 5
30433: ST_TO_ADDR
// vc_engine := engine_siberite ;
30434: LD_ADDR_OWVAR 39
30438: PUSH
30439: LD_INT 3
30441: ST_TO_ADDR
// vc_control := control_computer ;
30442: LD_ADDR_OWVAR 38
30446: PUSH
30447: LD_INT 3
30449: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30450: LD_ADDR_OWVAR 40
30454: PUSH
30455: LD_INT 10
30457: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30458: LD_VAR 0 2
30462: PUSH
30463: LD_INT 1
30465: ARRAY
30466: PPUSH
30467: CALL_OW 310
30471: NOT
30472: IFFALSE 30519
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30474: CALL_OW 45
30478: PPUSH
30479: LD_VAR 0 2
30483: PUSH
30484: LD_INT 1
30486: ARRAY
30487: PPUSH
30488: CALL_OW 250
30492: PPUSH
30493: LD_VAR 0 2
30497: PUSH
30498: LD_INT 1
30500: ARRAY
30501: PPUSH
30502: CALL_OW 251
30506: PPUSH
30507: LD_INT 12
30509: PPUSH
30510: LD_INT 1
30512: PPUSH
30513: CALL_OW 50
30517: GO 30531
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30519: CALL_OW 45
30523: PPUSH
30524: LD_INT 1
30526: PPUSH
30527: CALL_OW 51
// end ;
30531: GO 30405
30533: POP
30534: POP
// end ;
30535: PPOPN 2
30537: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30538: LD_EXP 49
30542: PUSH
30543: LD_EXP 95
30547: AND
30548: IFFALSE 30770
30550: GO 30552
30552: DISABLE
30553: LD_INT 0
30555: PPUSH
30556: PPUSH
30557: PPUSH
30558: PPUSH
30559: PPUSH
30560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30561: LD_ADDR_VAR 0 6
30565: PUSH
30566: LD_INT 22
30568: PUSH
30569: LD_OWVAR 2
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 21
30580: PUSH
30581: LD_INT 1
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 3
30590: PUSH
30591: LD_INT 23
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: PPUSH
30610: CALL_OW 69
30614: ST_TO_ADDR
// if not tmp then
30615: LD_VAR 0 6
30619: NOT
30620: IFFALSE 30624
// exit ;
30622: GO 30770
// s1 := rand ( 1 , 4 ) ;
30624: LD_ADDR_VAR 0 2
30628: PUSH
30629: LD_INT 1
30631: PPUSH
30632: LD_INT 4
30634: PPUSH
30635: CALL_OW 12
30639: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30640: LD_ADDR_VAR 0 4
30644: PUSH
30645: LD_VAR 0 6
30649: PUSH
30650: LD_INT 1
30652: ARRAY
30653: PPUSH
30654: LD_VAR 0 2
30658: PPUSH
30659: CALL_OW 259
30663: ST_TO_ADDR
// if s1 = 1 then
30664: LD_VAR 0 2
30668: PUSH
30669: LD_INT 1
30671: EQUAL
30672: IFFALSE 30692
// s2 := rand ( 2 , 4 ) else
30674: LD_ADDR_VAR 0 3
30678: PUSH
30679: LD_INT 2
30681: PPUSH
30682: LD_INT 4
30684: PPUSH
30685: CALL_OW 12
30689: ST_TO_ADDR
30690: GO 30700
// s2 := 1 ;
30692: LD_ADDR_VAR 0 3
30696: PUSH
30697: LD_INT 1
30699: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30700: LD_ADDR_VAR 0 5
30704: PUSH
30705: LD_VAR 0 6
30709: PUSH
30710: LD_INT 1
30712: ARRAY
30713: PPUSH
30714: LD_VAR 0 3
30718: PPUSH
30719: CALL_OW 259
30723: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30724: LD_VAR 0 6
30728: PUSH
30729: LD_INT 1
30731: ARRAY
30732: PPUSH
30733: LD_VAR 0 2
30737: PPUSH
30738: LD_VAR 0 5
30742: PPUSH
30743: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30747: LD_VAR 0 6
30751: PUSH
30752: LD_INT 1
30754: ARRAY
30755: PPUSH
30756: LD_VAR 0 3
30760: PPUSH
30761: LD_VAR 0 4
30765: PPUSH
30766: CALL_OW 237
// end ;
30770: PPOPN 6
30772: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30773: LD_EXP 49
30777: PUSH
30778: LD_EXP 96
30782: AND
30783: IFFALSE 30862
30785: GO 30787
30787: DISABLE
30788: LD_INT 0
30790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30791: LD_ADDR_VAR 0 1
30795: PUSH
30796: LD_INT 22
30798: PUSH
30799: LD_OWVAR 2
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 30
30810: PUSH
30811: LD_INT 3
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PPUSH
30822: CALL_OW 69
30826: ST_TO_ADDR
// if not tmp then
30827: LD_VAR 0 1
30831: NOT
30832: IFFALSE 30836
// exit ;
30834: GO 30862
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30836: LD_VAR 0 1
30840: PUSH
30841: LD_INT 1
30843: PPUSH
30844: LD_VAR 0 1
30848: PPUSH
30849: CALL_OW 12
30853: ARRAY
30854: PPUSH
30855: LD_INT 1
30857: PPUSH
30858: CALL_OW 234
// end ;
30862: PPOPN 1
30864: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30865: LD_EXP 49
30869: PUSH
30870: LD_EXP 97
30874: AND
30875: IFFALSE 30987
30877: GO 30879
30879: DISABLE
30880: LD_INT 0
30882: PPUSH
30883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30884: LD_ADDR_VAR 0 2
30888: PUSH
30889: LD_INT 22
30891: PUSH
30892: LD_OWVAR 2
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 2
30903: PUSH
30904: LD_INT 30
30906: PUSH
30907: LD_INT 27
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 30
30916: PUSH
30917: LD_INT 26
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 30
30926: PUSH
30927: LD_INT 28
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PPUSH
30944: CALL_OW 69
30948: ST_TO_ADDR
// if not tmp then
30949: LD_VAR 0 2
30953: NOT
30954: IFFALSE 30958
// exit ;
30956: GO 30987
// for i in tmp do
30958: LD_ADDR_VAR 0 1
30962: PUSH
30963: LD_VAR 0 2
30967: PUSH
30968: FOR_IN
30969: IFFALSE 30985
// SetLives ( i , 1 ) ;
30971: LD_VAR 0 1
30975: PPUSH
30976: LD_INT 1
30978: PPUSH
30979: CALL_OW 234
30983: GO 30968
30985: POP
30986: POP
// end ;
30987: PPOPN 2
30989: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30990: LD_EXP 49
30994: PUSH
30995: LD_EXP 98
30999: AND
31000: IFFALSE 31287
31002: GO 31004
31004: DISABLE
31005: LD_INT 0
31007: PPUSH
31008: PPUSH
31009: PPUSH
// begin i := rand ( 1 , 7 ) ;
31010: LD_ADDR_VAR 0 1
31014: PUSH
31015: LD_INT 1
31017: PPUSH
31018: LD_INT 7
31020: PPUSH
31021: CALL_OW 12
31025: ST_TO_ADDR
// case i of 1 :
31026: LD_VAR 0 1
31030: PUSH
31031: LD_INT 1
31033: DOUBLE
31034: EQUAL
31035: IFTRUE 31039
31037: GO 31049
31039: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31040: LD_STRING earthquake(getX(game), 0, 32)
31042: PPUSH
31043: CALL_OW 559
31047: GO 31287
31049: LD_INT 2
31051: DOUBLE
31052: EQUAL
31053: IFTRUE 31057
31055: GO 31071
31057: POP
// begin ToLua ( displayStucuk(); ) ;
31058: LD_STRING displayStucuk();
31060: PPUSH
31061: CALL_OW 559
// ResetFog ;
31065: CALL_OW 335
// end ; 3 :
31069: GO 31287
31071: LD_INT 3
31073: DOUBLE
31074: EQUAL
31075: IFTRUE 31079
31077: GO 31183
31079: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31080: LD_ADDR_VAR 0 2
31084: PUSH
31085: LD_INT 22
31087: PUSH
31088: LD_OWVAR 2
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 25
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PPUSH
31111: CALL_OW 69
31115: ST_TO_ADDR
// if not tmp then
31116: LD_VAR 0 2
31120: NOT
31121: IFFALSE 31125
// exit ;
31123: GO 31287
// un := tmp [ rand ( 1 , tmp ) ] ;
31125: LD_ADDR_VAR 0 3
31129: PUSH
31130: LD_VAR 0 2
31134: PUSH
31135: LD_INT 1
31137: PPUSH
31138: LD_VAR 0 2
31142: PPUSH
31143: CALL_OW 12
31147: ARRAY
31148: ST_TO_ADDR
// if Crawls ( un ) then
31149: LD_VAR 0 3
31153: PPUSH
31154: CALL_OW 318
31158: IFFALSE 31169
// ComWalk ( un ) ;
31160: LD_VAR 0 3
31164: PPUSH
31165: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31169: LD_VAR 0 3
31173: PPUSH
31174: LD_INT 8
31176: PPUSH
31177: CALL_OW 336
// end ; 4 :
31181: GO 31287
31183: LD_INT 4
31185: DOUBLE
31186: EQUAL
31187: IFTRUE 31191
31189: GO 31265
31191: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31192: LD_ADDR_VAR 0 2
31196: PUSH
31197: LD_INT 22
31199: PUSH
31200: LD_OWVAR 2
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 30
31211: PUSH
31212: LD_INT 29
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PPUSH
31223: CALL_OW 69
31227: ST_TO_ADDR
// if not tmp then
31228: LD_VAR 0 2
31232: NOT
31233: IFFALSE 31237
// exit ;
31235: GO 31287
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31237: LD_VAR 0 2
31241: PUSH
31242: LD_INT 1
31244: ARRAY
31245: PPUSH
31246: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31250: LD_VAR 0 2
31254: PUSH
31255: LD_INT 1
31257: ARRAY
31258: PPUSH
31259: CALL_OW 65
// end ; 5 .. 7 :
31263: GO 31287
31265: LD_INT 5
31267: DOUBLE
31268: GREATEREQUAL
31269: IFFALSE 31277
31271: LD_INT 7
31273: DOUBLE
31274: LESSEQUAL
31275: IFTRUE 31279
31277: GO 31286
31279: POP
// StreamSibBomb ; end ;
31280: CALL 27524 0 0
31284: GO 31287
31286: POP
// end ;
31287: PPOPN 3
31289: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31290: LD_EXP 49
31294: PUSH
31295: LD_EXP 99
31299: AND
31300: IFFALSE 31456
31302: GO 31304
31304: DISABLE
31305: LD_INT 0
31307: PPUSH
31308: PPUSH
31309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31310: LD_ADDR_VAR 0 2
31314: PUSH
31315: LD_INT 81
31317: PUSH
31318: LD_OWVAR 2
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 2
31329: PUSH
31330: LD_INT 21
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 21
31342: PUSH
31343: LD_INT 2
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PPUSH
31359: CALL_OW 69
31363: ST_TO_ADDR
// if not tmp then
31364: LD_VAR 0 2
31368: NOT
31369: IFFALSE 31373
// exit ;
31371: GO 31456
// p := 0 ;
31373: LD_ADDR_VAR 0 3
31377: PUSH
31378: LD_INT 0
31380: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31381: LD_INT 35
31383: PPUSH
31384: CALL_OW 67
// p := p + 1 ;
31388: LD_ADDR_VAR 0 3
31392: PUSH
31393: LD_VAR 0 3
31397: PUSH
31398: LD_INT 1
31400: PLUS
31401: ST_TO_ADDR
// for i in tmp do
31402: LD_ADDR_VAR 0 1
31406: PUSH
31407: LD_VAR 0 2
31411: PUSH
31412: FOR_IN
31413: IFFALSE 31444
// if GetLives ( i ) < 1000 then
31415: LD_VAR 0 1
31419: PPUSH
31420: CALL_OW 256
31424: PUSH
31425: LD_INT 1000
31427: LESS
31428: IFFALSE 31442
// SetLives ( i , 1000 ) ;
31430: LD_VAR 0 1
31434: PPUSH
31435: LD_INT 1000
31437: PPUSH
31438: CALL_OW 234
31442: GO 31412
31444: POP
31445: POP
// until p > 20 ;
31446: LD_VAR 0 3
31450: PUSH
31451: LD_INT 20
31453: GREATER
31454: IFFALSE 31381
// end ;
31456: PPOPN 3
31458: END
// every 0 0$1 trigger StreamModeActive and sTime do
31459: LD_EXP 49
31463: PUSH
31464: LD_EXP 100
31468: AND
31469: IFFALSE 31504
31471: GO 31473
31473: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31474: LD_INT 28
31476: PPUSH
31477: LD_OWVAR 2
31481: PPUSH
31482: LD_INT 2
31484: PPUSH
31485: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31489: LD_INT 30
31491: PPUSH
31492: LD_OWVAR 2
31496: PPUSH
31497: LD_INT 2
31499: PPUSH
31500: CALL_OW 322
// end ;
31504: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31505: LD_EXP 49
31509: PUSH
31510: LD_EXP 101
31514: AND
31515: IFFALSE 31636
31517: GO 31519
31519: DISABLE
31520: LD_INT 0
31522: PPUSH
31523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31524: LD_ADDR_VAR 0 2
31528: PUSH
31529: LD_INT 22
31531: PUSH
31532: LD_OWVAR 2
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 21
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 3
31553: PUSH
31554: LD_INT 23
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: PPUSH
31573: CALL_OW 69
31577: ST_TO_ADDR
// if not tmp then
31578: LD_VAR 0 2
31582: NOT
31583: IFFALSE 31587
// exit ;
31585: GO 31636
// for i in tmp do
31587: LD_ADDR_VAR 0 1
31591: PUSH
31592: LD_VAR 0 2
31596: PUSH
31597: FOR_IN
31598: IFFALSE 31634
// begin if Crawls ( i ) then
31600: LD_VAR 0 1
31604: PPUSH
31605: CALL_OW 318
31609: IFFALSE 31620
// ComWalk ( i ) ;
31611: LD_VAR 0 1
31615: PPUSH
31616: CALL_OW 138
// SetClass ( i , 2 ) ;
31620: LD_VAR 0 1
31624: PPUSH
31625: LD_INT 2
31627: PPUSH
31628: CALL_OW 336
// end ;
31632: GO 31597
31634: POP
31635: POP
// end ;
31636: PPOPN 2
31638: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31639: LD_EXP 49
31643: PUSH
31644: LD_EXP 102
31648: AND
31649: IFFALSE 31937
31651: GO 31653
31653: DISABLE
31654: LD_INT 0
31656: PPUSH
31657: PPUSH
31658: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31659: LD_OWVAR 2
31663: PPUSH
31664: LD_INT 9
31666: PPUSH
31667: LD_INT 1
31669: PPUSH
31670: LD_INT 1
31672: PPUSH
31673: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31677: LD_INT 9
31679: PPUSH
31680: LD_OWVAR 2
31684: PPUSH
31685: CALL_OW 343
// uc_side := 9 ;
31689: LD_ADDR_OWVAR 20
31693: PUSH
31694: LD_INT 9
31696: ST_TO_ADDR
// uc_nation := 2 ;
31697: LD_ADDR_OWVAR 21
31701: PUSH
31702: LD_INT 2
31704: ST_TO_ADDR
// hc_name := Dark Warrior ;
31705: LD_ADDR_OWVAR 26
31709: PUSH
31710: LD_STRING Dark Warrior
31712: ST_TO_ADDR
// hc_gallery :=  ;
31713: LD_ADDR_OWVAR 33
31717: PUSH
31718: LD_STRING 
31720: ST_TO_ADDR
// hc_noskilllimit := true ;
31721: LD_ADDR_OWVAR 76
31725: PUSH
31726: LD_INT 1
31728: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31729: LD_ADDR_OWVAR 31
31733: PUSH
31734: LD_INT 30
31736: PUSH
31737: LD_INT 30
31739: PUSH
31740: LD_INT 30
31742: PUSH
31743: LD_INT 30
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: ST_TO_ADDR
// un := CreateHuman ;
31752: LD_ADDR_VAR 0 3
31756: PUSH
31757: CALL_OW 44
31761: ST_TO_ADDR
// hc_noskilllimit := false ;
31762: LD_ADDR_OWVAR 76
31766: PUSH
31767: LD_INT 0
31769: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31770: LD_VAR 0 3
31774: PPUSH
31775: LD_INT 1
31777: PPUSH
31778: CALL_OW 51
// ToLua ( playRanger() ) ;
31782: LD_STRING playRanger()
31784: PPUSH
31785: CALL_OW 559
// p := 0 ;
31789: LD_ADDR_VAR 0 2
31793: PUSH
31794: LD_INT 0
31796: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31797: LD_INT 35
31799: PPUSH
31800: CALL_OW 67
// p := p + 1 ;
31804: LD_ADDR_VAR 0 2
31808: PUSH
31809: LD_VAR 0 2
31813: PUSH
31814: LD_INT 1
31816: PLUS
31817: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31818: LD_VAR 0 3
31822: PPUSH
31823: CALL_OW 256
31827: PUSH
31828: LD_INT 1000
31830: LESS
31831: IFFALSE 31845
// SetLives ( un , 1000 ) ;
31833: LD_VAR 0 3
31837: PPUSH
31838: LD_INT 1000
31840: PPUSH
31841: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31845: LD_VAR 0 3
31849: PPUSH
31850: LD_INT 81
31852: PUSH
31853: LD_OWVAR 2
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 91
31864: PUSH
31865: LD_VAR 0 3
31869: PUSH
31870: LD_INT 30
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: LIST
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PPUSH
31882: CALL_OW 69
31886: PPUSH
31887: LD_VAR 0 3
31891: PPUSH
31892: CALL_OW 74
31896: PPUSH
31897: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31901: LD_VAR 0 2
31905: PUSH
31906: LD_INT 80
31908: GREATER
31909: PUSH
31910: LD_VAR 0 3
31914: PPUSH
31915: CALL_OW 301
31919: OR
31920: IFFALSE 31797
// if un then
31922: LD_VAR 0 3
31926: IFFALSE 31937
// RemoveUnit ( un ) ;
31928: LD_VAR 0 3
31932: PPUSH
31933: CALL_OW 64
// end ;
31937: PPOPN 3
31939: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31940: LD_EXP 103
31944: IFFALSE 32060
31946: GO 31948
31948: DISABLE
31949: LD_INT 0
31951: PPUSH
31952: PPUSH
31953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31954: LD_ADDR_VAR 0 2
31958: PUSH
31959: LD_INT 81
31961: PUSH
31962: LD_OWVAR 2
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 21
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PPUSH
31985: CALL_OW 69
31989: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31990: LD_STRING playComputer()
31992: PPUSH
31993: CALL_OW 559
// if not tmp then
31997: LD_VAR 0 2
32001: NOT
32002: IFFALSE 32006
// exit ;
32004: GO 32060
// for i in tmp do
32006: LD_ADDR_VAR 0 1
32010: PUSH
32011: LD_VAR 0 2
32015: PUSH
32016: FOR_IN
32017: IFFALSE 32058
// for j := 1 to 4 do
32019: LD_ADDR_VAR 0 3
32023: PUSH
32024: DOUBLE
32025: LD_INT 1
32027: DEC
32028: ST_TO_ADDR
32029: LD_INT 4
32031: PUSH
32032: FOR_TO
32033: IFFALSE 32054
// SetSkill ( i , j , 10 ) ;
32035: LD_VAR 0 1
32039: PPUSH
32040: LD_VAR 0 3
32044: PPUSH
32045: LD_INT 10
32047: PPUSH
32048: CALL_OW 237
32052: GO 32032
32054: POP
32055: POP
32056: GO 32016
32058: POP
32059: POP
// end ;
32060: PPOPN 3
32062: END
// every 0 0$1 trigger s30 do var i , tmp ;
32063: LD_EXP 104
32067: IFFALSE 32136
32069: GO 32071
32071: DISABLE
32072: LD_INT 0
32074: PPUSH
32075: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32076: LD_ADDR_VAR 0 2
32080: PUSH
32081: LD_INT 22
32083: PUSH
32084: LD_OWVAR 2
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PPUSH
32093: CALL_OW 69
32097: ST_TO_ADDR
// if not tmp then
32098: LD_VAR 0 2
32102: NOT
32103: IFFALSE 32107
// exit ;
32105: GO 32136
// for i in tmp do
32107: LD_ADDR_VAR 0 1
32111: PUSH
32112: LD_VAR 0 2
32116: PUSH
32117: FOR_IN
32118: IFFALSE 32134
// SetLives ( i , 300 ) ;
32120: LD_VAR 0 1
32124: PPUSH
32125: LD_INT 300
32127: PPUSH
32128: CALL_OW 234
32132: GO 32117
32134: POP
32135: POP
// end ;
32136: PPOPN 2
32138: END
// every 0 0$1 trigger s60 do var i , tmp ;
32139: LD_EXP 105
32143: IFFALSE 32212
32145: GO 32147
32147: DISABLE
32148: LD_INT 0
32150: PPUSH
32151: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32152: LD_ADDR_VAR 0 2
32156: PUSH
32157: LD_INT 22
32159: PUSH
32160: LD_OWVAR 2
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PPUSH
32169: CALL_OW 69
32173: ST_TO_ADDR
// if not tmp then
32174: LD_VAR 0 2
32178: NOT
32179: IFFALSE 32183
// exit ;
32181: GO 32212
// for i in tmp do
32183: LD_ADDR_VAR 0 1
32187: PUSH
32188: LD_VAR 0 2
32192: PUSH
32193: FOR_IN
32194: IFFALSE 32210
// SetLives ( i , 600 ) ;
32196: LD_VAR 0 1
32200: PPUSH
32201: LD_INT 600
32203: PPUSH
32204: CALL_OW 234
32208: GO 32193
32210: POP
32211: POP
// end ;
32212: PPOPN 2
32214: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32215: LD_INT 0
32217: PPUSH
// case cmd of 301 :
32218: LD_VAR 0 1
32222: PUSH
32223: LD_INT 301
32225: DOUBLE
32226: EQUAL
32227: IFTRUE 32231
32229: GO 32263
32231: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32232: LD_VAR 0 6
32236: PPUSH
32237: LD_VAR 0 7
32241: PPUSH
32242: LD_VAR 0 8
32246: PPUSH
32247: LD_VAR 0 4
32251: PPUSH
32252: LD_VAR 0 5
32256: PPUSH
32257: CALL 33464 0 5
32261: GO 32384
32263: LD_INT 302
32265: DOUBLE
32266: EQUAL
32267: IFTRUE 32271
32269: GO 32308
32271: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32272: LD_VAR 0 6
32276: PPUSH
32277: LD_VAR 0 7
32281: PPUSH
32282: LD_VAR 0 8
32286: PPUSH
32287: LD_VAR 0 9
32291: PPUSH
32292: LD_VAR 0 4
32296: PPUSH
32297: LD_VAR 0 5
32301: PPUSH
32302: CALL 33555 0 6
32306: GO 32384
32308: LD_INT 303
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32316
32314: GO 32353
32316: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32317: LD_VAR 0 6
32321: PPUSH
32322: LD_VAR 0 7
32326: PPUSH
32327: LD_VAR 0 8
32331: PPUSH
32332: LD_VAR 0 9
32336: PPUSH
32337: LD_VAR 0 4
32341: PPUSH
32342: LD_VAR 0 5
32346: PPUSH
32347: CALL 32389 0 6
32351: GO 32384
32353: LD_INT 304
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32383
32361: POP
// hHackTeleport ( unit , x , y ) ; end ;
32362: LD_VAR 0 2
32366: PPUSH
32367: LD_VAR 0 4
32371: PPUSH
32372: LD_VAR 0 5
32376: PPUSH
32377: CALL 34148 0 3
32381: GO 32384
32383: POP
// end ;
32384: LD_VAR 0 12
32388: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32389: LD_INT 0
32391: PPUSH
32392: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32393: LD_VAR 0 1
32397: PUSH
32398: LD_INT 1
32400: LESS
32401: PUSH
32402: LD_VAR 0 1
32406: PUSH
32407: LD_INT 3
32409: GREATER
32410: OR
32411: PUSH
32412: LD_VAR 0 5
32416: PPUSH
32417: LD_VAR 0 6
32421: PPUSH
32422: CALL_OW 428
32426: OR
32427: IFFALSE 32431
// exit ;
32429: GO 33151
// uc_side := your_side ;
32431: LD_ADDR_OWVAR 20
32435: PUSH
32436: LD_OWVAR 2
32440: ST_TO_ADDR
// uc_nation := nation ;
32441: LD_ADDR_OWVAR 21
32445: PUSH
32446: LD_VAR 0 1
32450: ST_TO_ADDR
// bc_level = 1 ;
32451: LD_ADDR_OWVAR 43
32455: PUSH
32456: LD_INT 1
32458: ST_TO_ADDR
// case btype of 1 :
32459: LD_VAR 0 2
32463: PUSH
32464: LD_INT 1
32466: DOUBLE
32467: EQUAL
32468: IFTRUE 32472
32470: GO 32483
32472: POP
// bc_type := b_depot ; 2 :
32473: LD_ADDR_OWVAR 42
32477: PUSH
32478: LD_INT 0
32480: ST_TO_ADDR
32481: GO 33095
32483: LD_INT 2
32485: DOUBLE
32486: EQUAL
32487: IFTRUE 32491
32489: GO 32502
32491: POP
// bc_type := b_warehouse ; 3 :
32492: LD_ADDR_OWVAR 42
32496: PUSH
32497: LD_INT 1
32499: ST_TO_ADDR
32500: GO 33095
32502: LD_INT 3
32504: DOUBLE
32505: EQUAL
32506: IFTRUE 32510
32508: GO 32521
32510: POP
// bc_type := b_lab ; 4 .. 9 :
32511: LD_ADDR_OWVAR 42
32515: PUSH
32516: LD_INT 6
32518: ST_TO_ADDR
32519: GO 33095
32521: LD_INT 4
32523: DOUBLE
32524: GREATEREQUAL
32525: IFFALSE 32533
32527: LD_INT 9
32529: DOUBLE
32530: LESSEQUAL
32531: IFTRUE 32535
32533: GO 32587
32535: POP
// begin bc_type := b_lab_half ;
32536: LD_ADDR_OWVAR 42
32540: PUSH
32541: LD_INT 7
32543: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32544: LD_ADDR_OWVAR 44
32548: PUSH
32549: LD_INT 10
32551: PUSH
32552: LD_INT 11
32554: PUSH
32555: LD_INT 12
32557: PUSH
32558: LD_INT 15
32560: PUSH
32561: LD_INT 14
32563: PUSH
32564: LD_INT 13
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: PUSH
32575: LD_VAR 0 2
32579: PUSH
32580: LD_INT 3
32582: MINUS
32583: ARRAY
32584: ST_TO_ADDR
// end ; 10 .. 13 :
32585: GO 33095
32587: LD_INT 10
32589: DOUBLE
32590: GREATEREQUAL
32591: IFFALSE 32599
32593: LD_INT 13
32595: DOUBLE
32596: LESSEQUAL
32597: IFTRUE 32601
32599: GO 32678
32601: POP
// begin bc_type := b_lab_full ;
32602: LD_ADDR_OWVAR 42
32606: PUSH
32607: LD_INT 8
32609: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32610: LD_ADDR_OWVAR 44
32614: PUSH
32615: LD_INT 10
32617: PUSH
32618: LD_INT 12
32620: PUSH
32621: LD_INT 14
32623: PUSH
32624: LD_INT 13
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: PUSH
32633: LD_VAR 0 2
32637: PUSH
32638: LD_INT 9
32640: MINUS
32641: ARRAY
32642: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32643: LD_ADDR_OWVAR 45
32647: PUSH
32648: LD_INT 11
32650: PUSH
32651: LD_INT 15
32653: PUSH
32654: LD_INT 12
32656: PUSH
32657: LD_INT 15
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: PUSH
32666: LD_VAR 0 2
32670: PUSH
32671: LD_INT 9
32673: MINUS
32674: ARRAY
32675: ST_TO_ADDR
// end ; 14 :
32676: GO 33095
32678: LD_INT 14
32680: DOUBLE
32681: EQUAL
32682: IFTRUE 32686
32684: GO 32697
32686: POP
// bc_type := b_workshop ; 15 :
32687: LD_ADDR_OWVAR 42
32691: PUSH
32692: LD_INT 2
32694: ST_TO_ADDR
32695: GO 33095
32697: LD_INT 15
32699: DOUBLE
32700: EQUAL
32701: IFTRUE 32705
32703: GO 32716
32705: POP
// bc_type := b_factory ; 16 :
32706: LD_ADDR_OWVAR 42
32710: PUSH
32711: LD_INT 3
32713: ST_TO_ADDR
32714: GO 33095
32716: LD_INT 16
32718: DOUBLE
32719: EQUAL
32720: IFTRUE 32724
32722: GO 32735
32724: POP
// bc_type := b_ext_gun ; 17 :
32725: LD_ADDR_OWVAR 42
32729: PUSH
32730: LD_INT 17
32732: ST_TO_ADDR
32733: GO 33095
32735: LD_INT 17
32737: DOUBLE
32738: EQUAL
32739: IFTRUE 32743
32741: GO 32771
32743: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32744: LD_ADDR_OWVAR 42
32748: PUSH
32749: LD_INT 19
32751: PUSH
32752: LD_INT 23
32754: PUSH
32755: LD_INT 19
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: LIST
32762: PUSH
32763: LD_VAR 0 1
32767: ARRAY
32768: ST_TO_ADDR
32769: GO 33095
32771: LD_INT 18
32773: DOUBLE
32774: EQUAL
32775: IFTRUE 32779
32777: GO 32790
32779: POP
// bc_type := b_ext_radar ; 19 :
32780: LD_ADDR_OWVAR 42
32784: PUSH
32785: LD_INT 20
32787: ST_TO_ADDR
32788: GO 33095
32790: LD_INT 19
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32809
32798: POP
// bc_type := b_ext_radio ; 20 :
32799: LD_ADDR_OWVAR 42
32803: PUSH
32804: LD_INT 22
32806: ST_TO_ADDR
32807: GO 33095
32809: LD_INT 20
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32828
32817: POP
// bc_type := b_ext_siberium ; 21 :
32818: LD_ADDR_OWVAR 42
32822: PUSH
32823: LD_INT 21
32825: ST_TO_ADDR
32826: GO 33095
32828: LD_INT 21
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32847
32836: POP
// bc_type := b_ext_computer ; 22 :
32837: LD_ADDR_OWVAR 42
32841: PUSH
32842: LD_INT 24
32844: ST_TO_ADDR
32845: GO 33095
32847: LD_INT 22
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32866
32855: POP
// bc_type := b_ext_track ; 23 :
32856: LD_ADDR_OWVAR 42
32860: PUSH
32861: LD_INT 16
32863: ST_TO_ADDR
32864: GO 33095
32866: LD_INT 23
32868: DOUBLE
32869: EQUAL
32870: IFTRUE 32874
32872: GO 32885
32874: POP
// bc_type := b_ext_laser ; 24 :
32875: LD_ADDR_OWVAR 42
32879: PUSH
32880: LD_INT 25
32882: ST_TO_ADDR
32883: GO 33095
32885: LD_INT 24
32887: DOUBLE
32888: EQUAL
32889: IFTRUE 32893
32891: GO 32904
32893: POP
// bc_type := b_control_tower ; 25 :
32894: LD_ADDR_OWVAR 42
32898: PUSH
32899: LD_INT 36
32901: ST_TO_ADDR
32902: GO 33095
32904: LD_INT 25
32906: DOUBLE
32907: EQUAL
32908: IFTRUE 32912
32910: GO 32923
32912: POP
// bc_type := b_breastwork ; 26 :
32913: LD_ADDR_OWVAR 42
32917: PUSH
32918: LD_INT 31
32920: ST_TO_ADDR
32921: GO 33095
32923: LD_INT 26
32925: DOUBLE
32926: EQUAL
32927: IFTRUE 32931
32929: GO 32942
32931: POP
// bc_type := b_bunker ; 27 :
32932: LD_ADDR_OWVAR 42
32936: PUSH
32937: LD_INT 32
32939: ST_TO_ADDR
32940: GO 33095
32942: LD_INT 27
32944: DOUBLE
32945: EQUAL
32946: IFTRUE 32950
32948: GO 32961
32950: POP
// bc_type := b_turret ; 28 :
32951: LD_ADDR_OWVAR 42
32955: PUSH
32956: LD_INT 33
32958: ST_TO_ADDR
32959: GO 33095
32961: LD_INT 28
32963: DOUBLE
32964: EQUAL
32965: IFTRUE 32969
32967: GO 32980
32969: POP
// bc_type := b_armoury ; 29 :
32970: LD_ADDR_OWVAR 42
32974: PUSH
32975: LD_INT 4
32977: ST_TO_ADDR
32978: GO 33095
32980: LD_INT 29
32982: DOUBLE
32983: EQUAL
32984: IFTRUE 32988
32986: GO 32999
32988: POP
// bc_type := b_barracks ; 30 :
32989: LD_ADDR_OWVAR 42
32993: PUSH
32994: LD_INT 5
32996: ST_TO_ADDR
32997: GO 33095
32999: LD_INT 30
33001: DOUBLE
33002: EQUAL
33003: IFTRUE 33007
33005: GO 33018
33007: POP
// bc_type := b_solar_power ; 31 :
33008: LD_ADDR_OWVAR 42
33012: PUSH
33013: LD_INT 27
33015: ST_TO_ADDR
33016: GO 33095
33018: LD_INT 31
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33026
33024: GO 33037
33026: POP
// bc_type := b_oil_power ; 32 :
33027: LD_ADDR_OWVAR 42
33031: PUSH
33032: LD_INT 26
33034: ST_TO_ADDR
33035: GO 33095
33037: LD_INT 32
33039: DOUBLE
33040: EQUAL
33041: IFTRUE 33045
33043: GO 33056
33045: POP
// bc_type := b_siberite_power ; 33 :
33046: LD_ADDR_OWVAR 42
33050: PUSH
33051: LD_INT 28
33053: ST_TO_ADDR
33054: GO 33095
33056: LD_INT 33
33058: DOUBLE
33059: EQUAL
33060: IFTRUE 33064
33062: GO 33075
33064: POP
// bc_type := b_oil_mine ; 34 :
33065: LD_ADDR_OWVAR 42
33069: PUSH
33070: LD_INT 29
33072: ST_TO_ADDR
33073: GO 33095
33075: LD_INT 34
33077: DOUBLE
33078: EQUAL
33079: IFTRUE 33083
33081: GO 33094
33083: POP
// bc_type := b_siberite_mine ; end ;
33084: LD_ADDR_OWVAR 42
33088: PUSH
33089: LD_INT 30
33091: ST_TO_ADDR
33092: GO 33095
33094: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33095: LD_ADDR_VAR 0 8
33099: PUSH
33100: LD_VAR 0 5
33104: PPUSH
33105: LD_VAR 0 6
33109: PPUSH
33110: LD_VAR 0 3
33114: PPUSH
33115: CALL_OW 47
33119: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33120: LD_OWVAR 42
33124: PUSH
33125: LD_INT 32
33127: PUSH
33128: LD_INT 33
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: IN
33135: IFFALSE 33151
// PlaceWeaponTurret ( b , weapon ) ;
33137: LD_VAR 0 8
33141: PPUSH
33142: LD_VAR 0 4
33146: PPUSH
33147: CALL_OW 431
// end ;
33151: LD_VAR 0 7
33155: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33156: LD_INT 0
33158: PPUSH
33159: PPUSH
33160: PPUSH
33161: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33162: LD_ADDR_VAR 0 4
33166: PUSH
33167: LD_INT 22
33169: PUSH
33170: LD_OWVAR 2
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 30
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 30
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: LIST
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PPUSH
33211: CALL_OW 69
33215: ST_TO_ADDR
// if not tmp then
33216: LD_VAR 0 4
33220: NOT
33221: IFFALSE 33225
// exit ;
33223: GO 33284
// for i in tmp do
33225: LD_ADDR_VAR 0 2
33229: PUSH
33230: LD_VAR 0 4
33234: PUSH
33235: FOR_IN
33236: IFFALSE 33282
// for j = 1 to 3 do
33238: LD_ADDR_VAR 0 3
33242: PUSH
33243: DOUBLE
33244: LD_INT 1
33246: DEC
33247: ST_TO_ADDR
33248: LD_INT 3
33250: PUSH
33251: FOR_TO
33252: IFFALSE 33278
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33254: LD_VAR 0 2
33258: PPUSH
33259: CALL_OW 274
33263: PPUSH
33264: LD_VAR 0 3
33268: PPUSH
33269: LD_INT 99999
33271: PPUSH
33272: CALL_OW 277
33276: GO 33251
33278: POP
33279: POP
33280: GO 33235
33282: POP
33283: POP
// end ;
33284: LD_VAR 0 1
33288: RET
// export function hHackSetLevel10 ; var i , j ; begin
33289: LD_INT 0
33291: PPUSH
33292: PPUSH
33293: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33294: LD_ADDR_VAR 0 2
33298: PUSH
33299: LD_INT 21
33301: PUSH
33302: LD_INT 1
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PPUSH
33309: CALL_OW 69
33313: PUSH
33314: FOR_IN
33315: IFFALSE 33367
// if IsSelected ( i ) then
33317: LD_VAR 0 2
33321: PPUSH
33322: CALL_OW 306
33326: IFFALSE 33365
// begin for j := 1 to 4 do
33328: LD_ADDR_VAR 0 3
33332: PUSH
33333: DOUBLE
33334: LD_INT 1
33336: DEC
33337: ST_TO_ADDR
33338: LD_INT 4
33340: PUSH
33341: FOR_TO
33342: IFFALSE 33363
// SetSkill ( i , j , 10 ) ;
33344: LD_VAR 0 2
33348: PPUSH
33349: LD_VAR 0 3
33353: PPUSH
33354: LD_INT 10
33356: PPUSH
33357: CALL_OW 237
33361: GO 33341
33363: POP
33364: POP
// end ;
33365: GO 33314
33367: POP
33368: POP
// end ;
33369: LD_VAR 0 1
33373: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33374: LD_INT 0
33376: PPUSH
33377: PPUSH
33378: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33379: LD_ADDR_VAR 0 2
33383: PUSH
33384: LD_INT 22
33386: PUSH
33387: LD_OWVAR 2
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 21
33398: PUSH
33399: LD_INT 1
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PPUSH
33410: CALL_OW 69
33414: PUSH
33415: FOR_IN
33416: IFFALSE 33457
// begin for j := 1 to 4 do
33418: LD_ADDR_VAR 0 3
33422: PUSH
33423: DOUBLE
33424: LD_INT 1
33426: DEC
33427: ST_TO_ADDR
33428: LD_INT 4
33430: PUSH
33431: FOR_TO
33432: IFFALSE 33453
// SetSkill ( i , j , 10 ) ;
33434: LD_VAR 0 2
33438: PPUSH
33439: LD_VAR 0 3
33443: PPUSH
33444: LD_INT 10
33446: PPUSH
33447: CALL_OW 237
33451: GO 33431
33453: POP
33454: POP
// end ;
33455: GO 33415
33457: POP
33458: POP
// end ;
33459: LD_VAR 0 1
33463: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33464: LD_INT 0
33466: PPUSH
// uc_side := your_side ;
33467: LD_ADDR_OWVAR 20
33471: PUSH
33472: LD_OWVAR 2
33476: ST_TO_ADDR
// uc_nation := nation ;
33477: LD_ADDR_OWVAR 21
33481: PUSH
33482: LD_VAR 0 1
33486: ST_TO_ADDR
// InitHc ;
33487: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33491: LD_INT 0
33493: PPUSH
33494: LD_VAR 0 2
33498: PPUSH
33499: LD_VAR 0 3
33503: PPUSH
33504: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33508: LD_VAR 0 4
33512: PPUSH
33513: LD_VAR 0 5
33517: PPUSH
33518: CALL_OW 428
33522: PUSH
33523: LD_INT 0
33525: EQUAL
33526: IFFALSE 33550
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33528: CALL_OW 44
33532: PPUSH
33533: LD_VAR 0 4
33537: PPUSH
33538: LD_VAR 0 5
33542: PPUSH
33543: LD_INT 1
33545: PPUSH
33546: CALL_OW 48
// end ;
33550: LD_VAR 0 6
33554: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33555: LD_INT 0
33557: PPUSH
33558: PPUSH
// uc_side := your_side ;
33559: LD_ADDR_OWVAR 20
33563: PUSH
33564: LD_OWVAR 2
33568: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33569: LD_VAR 0 1
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: LD_INT 2
33579: PUSH
33580: LD_INT 3
33582: PUSH
33583: LD_INT 4
33585: PUSH
33586: LD_INT 5
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: IN
33596: IFFALSE 33608
// uc_nation := nation_american else
33598: LD_ADDR_OWVAR 21
33602: PUSH
33603: LD_INT 1
33605: ST_TO_ADDR
33606: GO 33651
// if chassis in [ 11 , 12 , 13 , 14 ] then
33608: LD_VAR 0 1
33612: PUSH
33613: LD_INT 11
33615: PUSH
33616: LD_INT 12
33618: PUSH
33619: LD_INT 13
33621: PUSH
33622: LD_INT 14
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: IN
33631: IFFALSE 33643
// uc_nation := nation_arabian else
33633: LD_ADDR_OWVAR 21
33637: PUSH
33638: LD_INT 2
33640: ST_TO_ADDR
33641: GO 33651
// uc_nation := nation_russian ;
33643: LD_ADDR_OWVAR 21
33647: PUSH
33648: LD_INT 3
33650: ST_TO_ADDR
// vc_chassis := chassis ;
33651: LD_ADDR_OWVAR 37
33655: PUSH
33656: LD_VAR 0 1
33660: ST_TO_ADDR
// vc_engine := engine ;
33661: LD_ADDR_OWVAR 39
33665: PUSH
33666: LD_VAR 0 2
33670: ST_TO_ADDR
// vc_control := control ;
33671: LD_ADDR_OWVAR 38
33675: PUSH
33676: LD_VAR 0 3
33680: ST_TO_ADDR
// vc_weapon := weapon ;
33681: LD_ADDR_OWVAR 40
33685: PUSH
33686: LD_VAR 0 4
33690: ST_TO_ADDR
// un := CreateVehicle ;
33691: LD_ADDR_VAR 0 8
33695: PUSH
33696: CALL_OW 45
33700: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33701: LD_VAR 0 8
33705: PPUSH
33706: LD_INT 0
33708: PPUSH
33709: LD_INT 5
33711: PPUSH
33712: CALL_OW 12
33716: PPUSH
33717: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33721: LD_VAR 0 8
33725: PPUSH
33726: LD_VAR 0 5
33730: PPUSH
33731: LD_VAR 0 6
33735: PPUSH
33736: LD_INT 1
33738: PPUSH
33739: CALL_OW 48
// end ;
33743: LD_VAR 0 7
33747: RET
// export hInvincible ; every 1 do
33748: GO 33750
33750: DISABLE
// hInvincible := [ ] ;
33751: LD_ADDR_EXP 106
33755: PUSH
33756: EMPTY
33757: ST_TO_ADDR
33758: END
// every 10 do var i ;
33759: GO 33761
33761: DISABLE
33762: LD_INT 0
33764: PPUSH
// begin enable ;
33765: ENABLE
// if not hInvincible then
33766: LD_EXP 106
33770: NOT
33771: IFFALSE 33775
// exit ;
33773: GO 33819
// for i in hInvincible do
33775: LD_ADDR_VAR 0 1
33779: PUSH
33780: LD_EXP 106
33784: PUSH
33785: FOR_IN
33786: IFFALSE 33817
// if GetLives ( i ) < 1000 then
33788: LD_VAR 0 1
33792: PPUSH
33793: CALL_OW 256
33797: PUSH
33798: LD_INT 1000
33800: LESS
33801: IFFALSE 33815
// SetLives ( i , 1000 ) ;
33803: LD_VAR 0 1
33807: PPUSH
33808: LD_INT 1000
33810: PPUSH
33811: CALL_OW 234
33815: GO 33785
33817: POP
33818: POP
// end ;
33819: PPOPN 1
33821: END
// export function hHackInvincible ; var i ; begin
33822: LD_INT 0
33824: PPUSH
33825: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33826: LD_ADDR_VAR 0 2
33830: PUSH
33831: LD_INT 2
33833: PUSH
33834: LD_INT 21
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 21
33846: PUSH
33847: LD_INT 2
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: PPUSH
33859: CALL_OW 69
33863: PUSH
33864: FOR_IN
33865: IFFALSE 33926
// if IsSelected ( i ) then
33867: LD_VAR 0 2
33871: PPUSH
33872: CALL_OW 306
33876: IFFALSE 33924
// begin if i in hInvincible then
33878: LD_VAR 0 2
33882: PUSH
33883: LD_EXP 106
33887: IN
33888: IFFALSE 33908
// hInvincible := hInvincible diff i else
33890: LD_ADDR_EXP 106
33894: PUSH
33895: LD_EXP 106
33899: PUSH
33900: LD_VAR 0 2
33904: DIFF
33905: ST_TO_ADDR
33906: GO 33924
// hInvincible := hInvincible union i ;
33908: LD_ADDR_EXP 106
33912: PUSH
33913: LD_EXP 106
33917: PUSH
33918: LD_VAR 0 2
33922: UNION
33923: ST_TO_ADDR
// end ;
33924: GO 33864
33926: POP
33927: POP
// end ;
33928: LD_VAR 0 1
33932: RET
// export function hHackInvisible ; var i , j ; begin
33933: LD_INT 0
33935: PPUSH
33936: PPUSH
33937: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33938: LD_ADDR_VAR 0 2
33942: PUSH
33943: LD_INT 21
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PPUSH
33953: CALL_OW 69
33957: PUSH
33958: FOR_IN
33959: IFFALSE 33983
// if IsSelected ( i ) then
33961: LD_VAR 0 2
33965: PPUSH
33966: CALL_OW 306
33970: IFFALSE 33981
// ComForceInvisible ( i ) ;
33972: LD_VAR 0 2
33976: PPUSH
33977: CALL_OW 496
33981: GO 33958
33983: POP
33984: POP
// end ;
33985: LD_VAR 0 1
33989: RET
// export function hHackChangeYourSide ; begin
33990: LD_INT 0
33992: PPUSH
// if your_side = 8 then
33993: LD_OWVAR 2
33997: PUSH
33998: LD_INT 8
34000: EQUAL
34001: IFFALSE 34013
// your_side := 0 else
34003: LD_ADDR_OWVAR 2
34007: PUSH
34008: LD_INT 0
34010: ST_TO_ADDR
34011: GO 34027
// your_side := your_side + 1 ;
34013: LD_ADDR_OWVAR 2
34017: PUSH
34018: LD_OWVAR 2
34022: PUSH
34023: LD_INT 1
34025: PLUS
34026: ST_TO_ADDR
// end ;
34027: LD_VAR 0 1
34031: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34032: LD_INT 0
34034: PPUSH
34035: PPUSH
34036: PPUSH
// for i in all_units do
34037: LD_ADDR_VAR 0 2
34041: PUSH
34042: LD_OWVAR 3
34046: PUSH
34047: FOR_IN
34048: IFFALSE 34126
// if IsSelected ( i ) then
34050: LD_VAR 0 2
34054: PPUSH
34055: CALL_OW 306
34059: IFFALSE 34124
// begin j := GetSide ( i ) ;
34061: LD_ADDR_VAR 0 3
34065: PUSH
34066: LD_VAR 0 2
34070: PPUSH
34071: CALL_OW 255
34075: ST_TO_ADDR
// if j = 8 then
34076: LD_VAR 0 3
34080: PUSH
34081: LD_INT 8
34083: EQUAL
34084: IFFALSE 34096
// j := 0 else
34086: LD_ADDR_VAR 0 3
34090: PUSH
34091: LD_INT 0
34093: ST_TO_ADDR
34094: GO 34110
// j := j + 1 ;
34096: LD_ADDR_VAR 0 3
34100: PUSH
34101: LD_VAR 0 3
34105: PUSH
34106: LD_INT 1
34108: PLUS
34109: ST_TO_ADDR
// SetSide ( i , j ) ;
34110: LD_VAR 0 2
34114: PPUSH
34115: LD_VAR 0 3
34119: PPUSH
34120: CALL_OW 235
// end ;
34124: GO 34047
34126: POP
34127: POP
// end ;
34128: LD_VAR 0 1
34132: RET
// export function hHackFog ; begin
34133: LD_INT 0
34135: PPUSH
// FogOff ( true ) ;
34136: LD_INT 1
34138: PPUSH
34139: CALL_OW 344
// end ;
34143: LD_VAR 0 1
34147: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34148: LD_INT 0
34150: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34151: LD_VAR 0 1
34155: PPUSH
34156: LD_VAR 0 2
34160: PPUSH
34161: LD_VAR 0 3
34165: PPUSH
34166: LD_INT 1
34168: PPUSH
34169: LD_INT 1
34171: PPUSH
34172: CALL_OW 483
// CenterOnXY ( x , y ) ;
34176: LD_VAR 0 2
34180: PPUSH
34181: LD_VAR 0 3
34185: PPUSH
34186: CALL_OW 84
// end ;
34190: LD_VAR 0 4
34194: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34195: LD_INT 0
34197: PPUSH
34198: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34199: LD_VAR 0 1
34203: NOT
34204: PUSH
34205: LD_VAR 0 2
34209: PPUSH
34210: LD_VAR 0 3
34214: PPUSH
34215: CALL_OW 488
34219: NOT
34220: OR
34221: PUSH
34222: LD_VAR 0 1
34226: PPUSH
34227: CALL_OW 266
34231: PUSH
34232: LD_INT 3
34234: NONEQUAL
34235: PUSH
34236: LD_VAR 0 1
34240: PPUSH
34241: CALL_OW 247
34245: PUSH
34246: LD_INT 1
34248: EQUAL
34249: NOT
34250: AND
34251: OR
34252: IFFALSE 34256
// exit ;
34254: GO 34405
// if GetType ( factory ) = unit_human then
34256: LD_VAR 0 1
34260: PPUSH
34261: CALL_OW 247
34265: PUSH
34266: LD_INT 1
34268: EQUAL
34269: IFFALSE 34286
// factory := IsInUnit ( factory ) ;
34271: LD_ADDR_VAR 0 1
34275: PUSH
34276: LD_VAR 0 1
34280: PPUSH
34281: CALL_OW 310
34285: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34286: LD_VAR 0 1
34290: PPUSH
34291: CALL_OW 266
34295: PUSH
34296: LD_INT 3
34298: NONEQUAL
34299: IFFALSE 34303
// exit ;
34301: GO 34405
// if HexInfo ( x , y ) = factory then
34303: LD_VAR 0 2
34307: PPUSH
34308: LD_VAR 0 3
34312: PPUSH
34313: CALL_OW 428
34317: PUSH
34318: LD_VAR 0 1
34322: EQUAL
34323: IFFALSE 34350
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34325: LD_ADDR_EXP 107
34329: PUSH
34330: LD_EXP 107
34334: PPUSH
34335: LD_VAR 0 1
34339: PPUSH
34340: LD_INT 0
34342: PPUSH
34343: CALL_OW 1
34347: ST_TO_ADDR
34348: GO 34401
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34350: LD_ADDR_EXP 107
34354: PUSH
34355: LD_EXP 107
34359: PPUSH
34360: LD_VAR 0 1
34364: PPUSH
34365: LD_VAR 0 1
34369: PPUSH
34370: CALL_OW 255
34374: PUSH
34375: LD_VAR 0 1
34379: PUSH
34380: LD_VAR 0 2
34384: PUSH
34385: LD_VAR 0 3
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: PPUSH
34396: CALL_OW 1
34400: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34401: CALL 34410 0 0
// end ;
34405: LD_VAR 0 4
34409: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34410: LD_INT 0
34412: PPUSH
34413: PPUSH
34414: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34415: LD_STRING resetFactoryWaypoint();
34417: PPUSH
34418: CALL_OW 559
// if factoryWaypoints then
34422: LD_EXP 107
34426: IFFALSE 34552
// begin list := PrepareArray ( factoryWaypoints ) ;
34428: LD_ADDR_VAR 0 3
34432: PUSH
34433: LD_EXP 107
34437: PPUSH
34438: CALL 81002 0 1
34442: ST_TO_ADDR
// for i := 1 to list do
34443: LD_ADDR_VAR 0 2
34447: PUSH
34448: DOUBLE
34449: LD_INT 1
34451: DEC
34452: ST_TO_ADDR
34453: LD_VAR 0 3
34457: PUSH
34458: FOR_TO
34459: IFFALSE 34550
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34461: LD_STRING setFactoryWaypointXY(
34463: PUSH
34464: LD_VAR 0 3
34468: PUSH
34469: LD_VAR 0 2
34473: ARRAY
34474: PUSH
34475: LD_INT 1
34477: ARRAY
34478: STR
34479: PUSH
34480: LD_STRING ,
34482: STR
34483: PUSH
34484: LD_VAR 0 3
34488: PUSH
34489: LD_VAR 0 2
34493: ARRAY
34494: PUSH
34495: LD_INT 2
34497: ARRAY
34498: STR
34499: PUSH
34500: LD_STRING ,
34502: STR
34503: PUSH
34504: LD_VAR 0 3
34508: PUSH
34509: LD_VAR 0 2
34513: ARRAY
34514: PUSH
34515: LD_INT 3
34517: ARRAY
34518: STR
34519: PUSH
34520: LD_STRING ,
34522: STR
34523: PUSH
34524: LD_VAR 0 3
34528: PUSH
34529: LD_VAR 0 2
34533: ARRAY
34534: PUSH
34535: LD_INT 4
34537: ARRAY
34538: STR
34539: PUSH
34540: LD_STRING )
34542: STR
34543: PPUSH
34544: CALL_OW 559
34548: GO 34458
34550: POP
34551: POP
// end ; end ;
34552: LD_VAR 0 1
34556: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34557: LD_INT 0
34559: PPUSH
// if HexInfo ( x , y ) = warehouse then
34560: LD_VAR 0 2
34564: PPUSH
34565: LD_VAR 0 3
34569: PPUSH
34570: CALL_OW 428
34574: PUSH
34575: LD_VAR 0 1
34579: EQUAL
34580: IFFALSE 34607
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34582: LD_ADDR_EXP 108
34586: PUSH
34587: LD_EXP 108
34591: PPUSH
34592: LD_VAR 0 1
34596: PPUSH
34597: LD_INT 0
34599: PPUSH
34600: CALL_OW 1
34604: ST_TO_ADDR
34605: GO 34658
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34607: LD_ADDR_EXP 108
34611: PUSH
34612: LD_EXP 108
34616: PPUSH
34617: LD_VAR 0 1
34621: PPUSH
34622: LD_VAR 0 1
34626: PPUSH
34627: CALL_OW 255
34631: PUSH
34632: LD_VAR 0 1
34636: PUSH
34637: LD_VAR 0 2
34641: PUSH
34642: LD_VAR 0 3
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: PPUSH
34653: CALL_OW 1
34657: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34658: CALL 34667 0 0
// end ;
34662: LD_VAR 0 4
34666: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34667: LD_INT 0
34669: PPUSH
34670: PPUSH
34671: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34672: LD_STRING resetWarehouseGatheringPoints();
34674: PPUSH
34675: CALL_OW 559
// if warehouseGatheringPoints then
34679: LD_EXP 108
34683: IFFALSE 34809
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34685: LD_ADDR_VAR 0 3
34689: PUSH
34690: LD_EXP 108
34694: PPUSH
34695: CALL 81002 0 1
34699: ST_TO_ADDR
// for i := 1 to list do
34700: LD_ADDR_VAR 0 2
34704: PUSH
34705: DOUBLE
34706: LD_INT 1
34708: DEC
34709: ST_TO_ADDR
34710: LD_VAR 0 3
34714: PUSH
34715: FOR_TO
34716: IFFALSE 34807
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34718: LD_STRING setWarehouseGatheringPointXY(
34720: PUSH
34721: LD_VAR 0 3
34725: PUSH
34726: LD_VAR 0 2
34730: ARRAY
34731: PUSH
34732: LD_INT 1
34734: ARRAY
34735: STR
34736: PUSH
34737: LD_STRING ,
34739: STR
34740: PUSH
34741: LD_VAR 0 3
34745: PUSH
34746: LD_VAR 0 2
34750: ARRAY
34751: PUSH
34752: LD_INT 2
34754: ARRAY
34755: STR
34756: PUSH
34757: LD_STRING ,
34759: STR
34760: PUSH
34761: LD_VAR 0 3
34765: PUSH
34766: LD_VAR 0 2
34770: ARRAY
34771: PUSH
34772: LD_INT 3
34774: ARRAY
34775: STR
34776: PUSH
34777: LD_STRING ,
34779: STR
34780: PUSH
34781: LD_VAR 0 3
34785: PUSH
34786: LD_VAR 0 2
34790: ARRAY
34791: PUSH
34792: LD_INT 4
34794: ARRAY
34795: STR
34796: PUSH
34797: LD_STRING )
34799: STR
34800: PPUSH
34801: CALL_OW 559
34805: GO 34715
34807: POP
34808: POP
// end ; end ;
34809: LD_VAR 0 1
34813: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34814: LD_EXP 108
34818: IFFALSE 35503
34820: GO 34822
34822: DISABLE
34823: LD_INT 0
34825: PPUSH
34826: PPUSH
34827: PPUSH
34828: PPUSH
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
34833: PPUSH
// begin enable ;
34834: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34835: LD_ADDR_VAR 0 3
34839: PUSH
34840: LD_EXP 108
34844: PPUSH
34845: CALL 81002 0 1
34849: ST_TO_ADDR
// if not list then
34850: LD_VAR 0 3
34854: NOT
34855: IFFALSE 34859
// exit ;
34857: GO 35503
// for i := 1 to list do
34859: LD_ADDR_VAR 0 1
34863: PUSH
34864: DOUBLE
34865: LD_INT 1
34867: DEC
34868: ST_TO_ADDR
34869: LD_VAR 0 3
34873: PUSH
34874: FOR_TO
34875: IFFALSE 35501
// begin depot := list [ i ] [ 2 ] ;
34877: LD_ADDR_VAR 0 8
34881: PUSH
34882: LD_VAR 0 3
34886: PUSH
34887: LD_VAR 0 1
34891: ARRAY
34892: PUSH
34893: LD_INT 2
34895: ARRAY
34896: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34897: LD_ADDR_VAR 0 5
34901: PUSH
34902: LD_VAR 0 3
34906: PUSH
34907: LD_VAR 0 1
34911: ARRAY
34912: PUSH
34913: LD_INT 1
34915: ARRAY
34916: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34917: LD_VAR 0 8
34921: PPUSH
34922: CALL_OW 301
34926: PUSH
34927: LD_VAR 0 5
34931: PUSH
34932: LD_VAR 0 8
34936: PPUSH
34937: CALL_OW 255
34941: NONEQUAL
34942: OR
34943: IFFALSE 34972
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34945: LD_ADDR_EXP 108
34949: PUSH
34950: LD_EXP 108
34954: PPUSH
34955: LD_VAR 0 8
34959: PPUSH
34960: LD_INT 0
34962: PPUSH
34963: CALL_OW 1
34967: ST_TO_ADDR
// exit ;
34968: POP
34969: POP
34970: GO 35503
// end ; x := list [ i ] [ 3 ] ;
34972: LD_ADDR_VAR 0 6
34976: PUSH
34977: LD_VAR 0 3
34981: PUSH
34982: LD_VAR 0 1
34986: ARRAY
34987: PUSH
34988: LD_INT 3
34990: ARRAY
34991: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34992: LD_ADDR_VAR 0 7
34996: PUSH
34997: LD_VAR 0 3
35001: PUSH
35002: LD_VAR 0 1
35006: ARRAY
35007: PUSH
35008: LD_INT 4
35010: ARRAY
35011: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35012: LD_ADDR_VAR 0 9
35016: PUSH
35017: LD_VAR 0 6
35021: PPUSH
35022: LD_VAR 0 7
35026: PPUSH
35027: LD_INT 16
35029: PPUSH
35030: CALL 79590 0 3
35034: ST_TO_ADDR
// if not cratesNearbyPoint then
35035: LD_VAR 0 9
35039: NOT
35040: IFFALSE 35046
// exit ;
35042: POP
35043: POP
35044: GO 35503
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35046: LD_ADDR_VAR 0 4
35050: PUSH
35051: LD_INT 22
35053: PUSH
35054: LD_VAR 0 5
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: LD_INT 60
35068: PUSH
35069: EMPTY
35070: LIST
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 91
35078: PUSH
35079: LD_VAR 0 8
35083: PUSH
35084: LD_INT 6
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: LD_INT 25
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 25
35107: PUSH
35108: LD_INT 16
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: PPUSH
35126: CALL_OW 69
35130: PUSH
35131: LD_VAR 0 8
35135: PPUSH
35136: CALL_OW 313
35140: PPUSH
35141: LD_INT 3
35143: PUSH
35144: LD_INT 60
35146: PUSH
35147: EMPTY
35148: LIST
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: LD_INT 25
35159: PUSH
35160: LD_INT 2
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 25
35169: PUSH
35170: LD_INT 16
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: LIST
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PPUSH
35186: CALL_OW 72
35190: UNION
35191: ST_TO_ADDR
// if tmp then
35192: LD_VAR 0 4
35196: IFFALSE 35276
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35198: LD_ADDR_VAR 0 4
35202: PUSH
35203: LD_VAR 0 4
35207: PPUSH
35208: LD_INT 3
35210: PPUSH
35211: CALL 77559 0 2
35215: ST_TO_ADDR
// for j in tmp do
35216: LD_ADDR_VAR 0 2
35220: PUSH
35221: LD_VAR 0 4
35225: PUSH
35226: FOR_IN
35227: IFFALSE 35270
// begin if IsInUnit ( j ) then
35229: LD_VAR 0 2
35233: PPUSH
35234: CALL_OW 310
35238: IFFALSE 35249
// ComExit ( j ) ;
35240: LD_VAR 0 2
35244: PPUSH
35245: CALL 77642 0 1
// AddComCollect ( j , x , y ) ;
35249: LD_VAR 0 2
35253: PPUSH
35254: LD_VAR 0 6
35258: PPUSH
35259: LD_VAR 0 7
35263: PPUSH
35264: CALL_OW 177
// end ;
35268: GO 35226
35270: POP
35271: POP
// exit ;
35272: POP
35273: POP
35274: GO 35503
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35276: LD_ADDR_VAR 0 4
35280: PUSH
35281: LD_INT 22
35283: PUSH
35284: LD_VAR 0 5
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 91
35295: PUSH
35296: LD_VAR 0 8
35300: PUSH
35301: LD_INT 8
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 2
35311: PUSH
35312: LD_INT 34
35314: PUSH
35315: LD_INT 12
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 34
35324: PUSH
35325: LD_INT 51
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 34
35334: PUSH
35335: LD_INT 32
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 34
35344: PUSH
35345: LD_INT 89
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: PPUSH
35364: CALL_OW 69
35368: ST_TO_ADDR
// if tmp then
35369: LD_VAR 0 4
35373: IFFALSE 35499
// begin for j in tmp do
35375: LD_ADDR_VAR 0 2
35379: PUSH
35380: LD_VAR 0 4
35384: PUSH
35385: FOR_IN
35386: IFFALSE 35497
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35388: LD_VAR 0 2
35392: PPUSH
35393: CALL_OW 262
35397: PUSH
35398: LD_INT 3
35400: EQUAL
35401: PUSH
35402: LD_VAR 0 2
35406: PPUSH
35407: CALL_OW 261
35411: PUSH
35412: LD_INT 20
35414: GREATER
35415: OR
35416: PUSH
35417: LD_VAR 0 2
35421: PPUSH
35422: CALL_OW 314
35426: NOT
35427: AND
35428: PUSH
35429: LD_VAR 0 2
35433: PPUSH
35434: CALL_OW 263
35438: PUSH
35439: LD_INT 1
35441: NONEQUAL
35442: PUSH
35443: LD_VAR 0 2
35447: PPUSH
35448: CALL_OW 311
35452: OR
35453: AND
35454: IFFALSE 35495
// begin ComCollect ( j , x , y ) ;
35456: LD_VAR 0 2
35460: PPUSH
35461: LD_VAR 0 6
35465: PPUSH
35466: LD_VAR 0 7
35470: PPUSH
35471: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35475: LD_VAR 0 2
35479: PPUSH
35480: LD_VAR 0 8
35484: PPUSH
35485: CALL_OW 172
// exit ;
35489: POP
35490: POP
35491: POP
35492: POP
35493: GO 35503
// end ;
35495: GO 35385
35497: POP
35498: POP
// end ; end ;
35499: GO 34874
35501: POP
35502: POP
// end ; end_of_file
35503: PPOPN 9
35505: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35506: LD_INT 0
35508: PPUSH
35509: PPUSH
35510: PPUSH
35511: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35512: LD_VAR 0 1
35516: PPUSH
35517: CALL_OW 264
35521: PUSH
35522: LD_INT 91
35524: EQUAL
35525: IFFALSE 35597
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35527: LD_INT 68
35529: PPUSH
35530: LD_VAR 0 1
35534: PPUSH
35535: CALL_OW 255
35539: PPUSH
35540: CALL_OW 321
35544: PUSH
35545: LD_INT 2
35547: EQUAL
35548: IFFALSE 35560
// eff := 70 else
35550: LD_ADDR_VAR 0 4
35554: PUSH
35555: LD_INT 70
35557: ST_TO_ADDR
35558: GO 35568
// eff := 30 ;
35560: LD_ADDR_VAR 0 4
35564: PUSH
35565: LD_INT 30
35567: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35568: LD_VAR 0 1
35572: PPUSH
35573: CALL_OW 250
35577: PPUSH
35578: LD_VAR 0 1
35582: PPUSH
35583: CALL_OW 251
35587: PPUSH
35588: LD_VAR 0 4
35592: PPUSH
35593: CALL_OW 495
// end ; end ;
35597: LD_VAR 0 2
35601: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35602: LD_INT 0
35604: PPUSH
// end ;
35605: LD_VAR 0 4
35609: RET
// export function SOS_Command ( cmd ) ; begin
35610: LD_INT 0
35612: PPUSH
// end ;
35613: LD_VAR 0 2
35617: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35618: LD_INT 0
35620: PPUSH
// end ;
35621: LD_VAR 0 6
35625: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35626: LD_INT 0
35628: PPUSH
35629: PPUSH
// if not vehicle or not factory then
35630: LD_VAR 0 1
35634: NOT
35635: PUSH
35636: LD_VAR 0 2
35640: NOT
35641: OR
35642: IFFALSE 35646
// exit ;
35644: GO 35877
// if factoryWaypoints >= factory then
35646: LD_EXP 107
35650: PUSH
35651: LD_VAR 0 2
35655: GREATEREQUAL
35656: IFFALSE 35877
// if factoryWaypoints [ factory ] then
35658: LD_EXP 107
35662: PUSH
35663: LD_VAR 0 2
35667: ARRAY
35668: IFFALSE 35877
// begin if GetControl ( vehicle ) = control_manual then
35670: LD_VAR 0 1
35674: PPUSH
35675: CALL_OW 263
35679: PUSH
35680: LD_INT 1
35682: EQUAL
35683: IFFALSE 35764
// begin driver := IsDrivenBy ( vehicle ) ;
35685: LD_ADDR_VAR 0 4
35689: PUSH
35690: LD_VAR 0 1
35694: PPUSH
35695: CALL_OW 311
35699: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35700: LD_VAR 0 4
35704: PPUSH
35705: LD_EXP 107
35709: PUSH
35710: LD_VAR 0 2
35714: ARRAY
35715: PUSH
35716: LD_INT 3
35718: ARRAY
35719: PPUSH
35720: LD_EXP 107
35724: PUSH
35725: LD_VAR 0 2
35729: ARRAY
35730: PUSH
35731: LD_INT 4
35733: ARRAY
35734: PPUSH
35735: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35739: LD_VAR 0 4
35743: PPUSH
35744: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35748: LD_VAR 0 4
35752: PPUSH
35753: LD_VAR 0 2
35757: PPUSH
35758: CALL_OW 180
// end else
35762: GO 35877
// if GetControl ( vehicle ) = control_remote then
35764: LD_VAR 0 1
35768: PPUSH
35769: CALL_OW 263
35773: PUSH
35774: LD_INT 2
35776: EQUAL
35777: IFFALSE 35838
// begin wait ( 0 0$2 ) ;
35779: LD_INT 70
35781: PPUSH
35782: CALL_OW 67
// if Connect ( vehicle ) then
35786: LD_VAR 0 1
35790: PPUSH
35791: CALL 47901 0 1
35795: IFFALSE 35836
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35797: LD_VAR 0 1
35801: PPUSH
35802: LD_EXP 107
35806: PUSH
35807: LD_VAR 0 2
35811: ARRAY
35812: PUSH
35813: LD_INT 3
35815: ARRAY
35816: PPUSH
35817: LD_EXP 107
35821: PUSH
35822: LD_VAR 0 2
35826: ARRAY
35827: PUSH
35828: LD_INT 4
35830: ARRAY
35831: PPUSH
35832: CALL_OW 171
// end else
35836: GO 35877
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35838: LD_VAR 0 1
35842: PPUSH
35843: LD_EXP 107
35847: PUSH
35848: LD_VAR 0 2
35852: ARRAY
35853: PUSH
35854: LD_INT 3
35856: ARRAY
35857: PPUSH
35858: LD_EXP 107
35862: PUSH
35863: LD_VAR 0 2
35867: ARRAY
35868: PUSH
35869: LD_INT 4
35871: ARRAY
35872: PPUSH
35873: CALL_OW 171
// end ; end ;
35877: LD_VAR 0 3
35881: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35882: LD_INT 0
35884: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35885: LD_VAR 0 1
35889: PUSH
35890: LD_INT 250
35892: EQUAL
35893: PUSH
35894: LD_VAR 0 2
35898: PPUSH
35899: CALL_OW 264
35903: PUSH
35904: LD_INT 81
35906: EQUAL
35907: AND
35908: IFFALSE 35929
// MinerPlaceMine ( unit , x , y ) ;
35910: LD_VAR 0 2
35914: PPUSH
35915: LD_VAR 0 4
35919: PPUSH
35920: LD_VAR 0 5
35924: PPUSH
35925: CALL 38314 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35929: LD_VAR 0 1
35933: PUSH
35934: LD_INT 251
35936: EQUAL
35937: PUSH
35938: LD_VAR 0 2
35942: PPUSH
35943: CALL_OW 264
35947: PUSH
35948: LD_INT 81
35950: EQUAL
35951: AND
35952: IFFALSE 35973
// MinerDetonateMine ( unit , x , y ) ;
35954: LD_VAR 0 2
35958: PPUSH
35959: LD_VAR 0 4
35963: PPUSH
35964: LD_VAR 0 5
35968: PPUSH
35969: CALL 38589 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35973: LD_VAR 0 1
35977: PUSH
35978: LD_INT 252
35980: EQUAL
35981: PUSH
35982: LD_VAR 0 2
35986: PPUSH
35987: CALL_OW 264
35991: PUSH
35992: LD_INT 81
35994: EQUAL
35995: AND
35996: IFFALSE 36017
// MinerCreateMinefield ( unit , x , y ) ;
35998: LD_VAR 0 2
36002: PPUSH
36003: LD_VAR 0 4
36007: PPUSH
36008: LD_VAR 0 5
36012: PPUSH
36013: CALL 39006 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36017: LD_VAR 0 1
36021: PUSH
36022: LD_INT 253
36024: EQUAL
36025: PUSH
36026: LD_VAR 0 2
36030: PPUSH
36031: CALL_OW 257
36035: PUSH
36036: LD_INT 5
36038: EQUAL
36039: AND
36040: IFFALSE 36061
// ComBinocular ( unit , x , y ) ;
36042: LD_VAR 0 2
36046: PPUSH
36047: LD_VAR 0 4
36051: PPUSH
36052: LD_VAR 0 5
36056: PPUSH
36057: CALL 39375 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36061: LD_VAR 0 1
36065: PUSH
36066: LD_INT 254
36068: EQUAL
36069: PUSH
36070: LD_VAR 0 2
36074: PPUSH
36075: CALL_OW 264
36079: PUSH
36080: LD_INT 99
36082: EQUAL
36083: AND
36084: PUSH
36085: LD_VAR 0 3
36089: PPUSH
36090: CALL_OW 263
36094: PUSH
36095: LD_INT 3
36097: EQUAL
36098: AND
36099: IFFALSE 36115
// HackDestroyVehicle ( unit , selectedUnit ) ;
36101: LD_VAR 0 2
36105: PPUSH
36106: LD_VAR 0 3
36110: PPUSH
36111: CALL 37678 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36115: LD_VAR 0 1
36119: PUSH
36120: LD_INT 255
36122: EQUAL
36123: PUSH
36124: LD_VAR 0 2
36128: PPUSH
36129: CALL_OW 264
36133: PUSH
36134: LD_INT 14
36136: PUSH
36137: LD_INT 53
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: IN
36144: AND
36145: PUSH
36146: LD_VAR 0 4
36150: PPUSH
36151: LD_VAR 0 5
36155: PPUSH
36156: CALL_OW 488
36160: AND
36161: IFFALSE 36185
// CutTreeXYR ( unit , x , y , 12 ) ;
36163: LD_VAR 0 2
36167: PPUSH
36168: LD_VAR 0 4
36172: PPUSH
36173: LD_VAR 0 5
36177: PPUSH
36178: LD_INT 12
36180: PPUSH
36181: CALL 36248 0 4
// if cmd = 256 then
36185: LD_VAR 0 1
36189: PUSH
36190: LD_INT 256
36192: EQUAL
36193: IFFALSE 36214
// SetFactoryWaypoint ( unit , x , y ) ;
36195: LD_VAR 0 2
36199: PPUSH
36200: LD_VAR 0 4
36204: PPUSH
36205: LD_VAR 0 5
36209: PPUSH
36210: CALL 34195 0 3
// if cmd = 257 then
36214: LD_VAR 0 1
36218: PUSH
36219: LD_INT 257
36221: EQUAL
36222: IFFALSE 36243
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36224: LD_VAR 0 2
36228: PPUSH
36229: LD_VAR 0 4
36233: PPUSH
36234: LD_VAR 0 5
36238: PPUSH
36239: CALL 34557 0 3
// end ;
36243: LD_VAR 0 6
36247: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36248: LD_INT 0
36250: PPUSH
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
36255: PPUSH
36256: PPUSH
36257: PPUSH
36258: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36259: LD_VAR 0 1
36263: NOT
36264: PUSH
36265: LD_VAR 0 2
36269: PPUSH
36270: LD_VAR 0 3
36274: PPUSH
36275: CALL_OW 488
36279: NOT
36280: OR
36281: PUSH
36282: LD_VAR 0 4
36286: NOT
36287: OR
36288: IFFALSE 36292
// exit ;
36290: GO 36632
// list := [ ] ;
36292: LD_ADDR_VAR 0 13
36296: PUSH
36297: EMPTY
36298: ST_TO_ADDR
// if x - r < 0 then
36299: LD_VAR 0 2
36303: PUSH
36304: LD_VAR 0 4
36308: MINUS
36309: PUSH
36310: LD_INT 0
36312: LESS
36313: IFFALSE 36325
// min_x := 0 else
36315: LD_ADDR_VAR 0 7
36319: PUSH
36320: LD_INT 0
36322: ST_TO_ADDR
36323: GO 36341
// min_x := x - r ;
36325: LD_ADDR_VAR 0 7
36329: PUSH
36330: LD_VAR 0 2
36334: PUSH
36335: LD_VAR 0 4
36339: MINUS
36340: ST_TO_ADDR
// if y - r < 0 then
36341: LD_VAR 0 3
36345: PUSH
36346: LD_VAR 0 4
36350: MINUS
36351: PUSH
36352: LD_INT 0
36354: LESS
36355: IFFALSE 36367
// min_y := 0 else
36357: LD_ADDR_VAR 0 8
36361: PUSH
36362: LD_INT 0
36364: ST_TO_ADDR
36365: GO 36383
// min_y := y - r ;
36367: LD_ADDR_VAR 0 8
36371: PUSH
36372: LD_VAR 0 3
36376: PUSH
36377: LD_VAR 0 4
36381: MINUS
36382: ST_TO_ADDR
// max_x := x + r ;
36383: LD_ADDR_VAR 0 9
36387: PUSH
36388: LD_VAR 0 2
36392: PUSH
36393: LD_VAR 0 4
36397: PLUS
36398: ST_TO_ADDR
// max_y := y + r ;
36399: LD_ADDR_VAR 0 10
36403: PUSH
36404: LD_VAR 0 3
36408: PUSH
36409: LD_VAR 0 4
36413: PLUS
36414: ST_TO_ADDR
// for _x = min_x to max_x do
36415: LD_ADDR_VAR 0 11
36419: PUSH
36420: DOUBLE
36421: LD_VAR 0 7
36425: DEC
36426: ST_TO_ADDR
36427: LD_VAR 0 9
36431: PUSH
36432: FOR_TO
36433: IFFALSE 36550
// for _y = min_y to max_y do
36435: LD_ADDR_VAR 0 12
36439: PUSH
36440: DOUBLE
36441: LD_VAR 0 8
36445: DEC
36446: ST_TO_ADDR
36447: LD_VAR 0 10
36451: PUSH
36452: FOR_TO
36453: IFFALSE 36546
// begin if not ValidHex ( _x , _y ) then
36455: LD_VAR 0 11
36459: PPUSH
36460: LD_VAR 0 12
36464: PPUSH
36465: CALL_OW 488
36469: NOT
36470: IFFALSE 36474
// continue ;
36472: GO 36452
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36474: LD_VAR 0 11
36478: PPUSH
36479: LD_VAR 0 12
36483: PPUSH
36484: CALL_OW 351
36488: PUSH
36489: LD_VAR 0 11
36493: PPUSH
36494: LD_VAR 0 12
36498: PPUSH
36499: CALL_OW 554
36503: AND
36504: IFFALSE 36544
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36506: LD_ADDR_VAR 0 13
36510: PUSH
36511: LD_VAR 0 13
36515: PPUSH
36516: LD_VAR 0 13
36520: PUSH
36521: LD_INT 1
36523: PLUS
36524: PPUSH
36525: LD_VAR 0 11
36529: PUSH
36530: LD_VAR 0 12
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PPUSH
36539: CALL_OW 2
36543: ST_TO_ADDR
// end ;
36544: GO 36452
36546: POP
36547: POP
36548: GO 36432
36550: POP
36551: POP
// if not list then
36552: LD_VAR 0 13
36556: NOT
36557: IFFALSE 36561
// exit ;
36559: GO 36632
// for i in list do
36561: LD_ADDR_VAR 0 6
36565: PUSH
36566: LD_VAR 0 13
36570: PUSH
36571: FOR_IN
36572: IFFALSE 36630
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36574: LD_VAR 0 1
36578: PPUSH
36579: LD_STRING M
36581: PUSH
36582: LD_VAR 0 6
36586: PUSH
36587: LD_INT 1
36589: ARRAY
36590: PUSH
36591: LD_VAR 0 6
36595: PUSH
36596: LD_INT 2
36598: ARRAY
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: PUSH
36621: EMPTY
36622: LIST
36623: PPUSH
36624: CALL_OW 447
36628: GO 36571
36630: POP
36631: POP
// end ;
36632: LD_VAR 0 5
36636: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36637: LD_EXP 110
36641: NOT
36642: IFFALSE 36692
36644: GO 36646
36646: DISABLE
// begin initHack := true ;
36647: LD_ADDR_EXP 110
36651: PUSH
36652: LD_INT 1
36654: ST_TO_ADDR
// hackTanks := [ ] ;
36655: LD_ADDR_EXP 111
36659: PUSH
36660: EMPTY
36661: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36662: LD_ADDR_EXP 112
36666: PUSH
36667: EMPTY
36668: ST_TO_ADDR
// hackLimit := 3 ;
36669: LD_ADDR_EXP 113
36673: PUSH
36674: LD_INT 3
36676: ST_TO_ADDR
// hackDist := 12 ;
36677: LD_ADDR_EXP 114
36681: PUSH
36682: LD_INT 12
36684: ST_TO_ADDR
// hackCounter := [ ] ;
36685: LD_ADDR_EXP 115
36689: PUSH
36690: EMPTY
36691: ST_TO_ADDR
// end ;
36692: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36693: LD_EXP 110
36697: PUSH
36698: LD_INT 34
36700: PUSH
36701: LD_INT 99
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PPUSH
36708: CALL_OW 69
36712: AND
36713: IFFALSE 36966
36715: GO 36717
36717: DISABLE
36718: LD_INT 0
36720: PPUSH
36721: PPUSH
// begin enable ;
36722: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36723: LD_ADDR_VAR 0 1
36727: PUSH
36728: LD_INT 34
36730: PUSH
36731: LD_INT 99
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PPUSH
36738: CALL_OW 69
36742: PUSH
36743: FOR_IN
36744: IFFALSE 36964
// begin if not i in hackTanks then
36746: LD_VAR 0 1
36750: PUSH
36751: LD_EXP 111
36755: IN
36756: NOT
36757: IFFALSE 36840
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36759: LD_ADDR_EXP 111
36763: PUSH
36764: LD_EXP 111
36768: PPUSH
36769: LD_EXP 111
36773: PUSH
36774: LD_INT 1
36776: PLUS
36777: PPUSH
36778: LD_VAR 0 1
36782: PPUSH
36783: CALL_OW 1
36787: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36788: LD_ADDR_EXP 112
36792: PUSH
36793: LD_EXP 112
36797: PPUSH
36798: LD_EXP 112
36802: PUSH
36803: LD_INT 1
36805: PLUS
36806: PPUSH
36807: EMPTY
36808: PPUSH
36809: CALL_OW 1
36813: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36814: LD_ADDR_EXP 115
36818: PUSH
36819: LD_EXP 115
36823: PPUSH
36824: LD_EXP 115
36828: PUSH
36829: LD_INT 1
36831: PLUS
36832: PPUSH
36833: EMPTY
36834: PPUSH
36835: CALL_OW 1
36839: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36840: LD_VAR 0 1
36844: PPUSH
36845: CALL_OW 302
36849: NOT
36850: IFFALSE 36863
// begin HackUnlinkAll ( i ) ;
36852: LD_VAR 0 1
36856: PPUSH
36857: CALL 36969 0 1
// continue ;
36861: GO 36743
// end ; HackCheckCapturedStatus ( i ) ;
36863: LD_VAR 0 1
36867: PPUSH
36868: CALL 37412 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36872: LD_ADDR_VAR 0 2
36876: PUSH
36877: LD_INT 81
36879: PUSH
36880: LD_VAR 0 1
36884: PPUSH
36885: CALL_OW 255
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 33
36896: PUSH
36897: LD_INT 3
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 91
36906: PUSH
36907: LD_VAR 0 1
36911: PUSH
36912: LD_EXP 114
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 50
36924: PUSH
36925: EMPTY
36926: LIST
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: PPUSH
36934: CALL_OW 69
36938: ST_TO_ADDR
// if not tmp then
36939: LD_VAR 0 2
36943: NOT
36944: IFFALSE 36948
// continue ;
36946: GO 36743
// HackLink ( i , tmp ) ;
36948: LD_VAR 0 1
36952: PPUSH
36953: LD_VAR 0 2
36957: PPUSH
36958: CALL 37105 0 2
// end ;
36962: GO 36743
36964: POP
36965: POP
// end ;
36966: PPOPN 2
36968: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36969: LD_INT 0
36971: PPUSH
36972: PPUSH
36973: PPUSH
// if not hack in hackTanks then
36974: LD_VAR 0 1
36978: PUSH
36979: LD_EXP 111
36983: IN
36984: NOT
36985: IFFALSE 36989
// exit ;
36987: GO 37100
// index := GetElementIndex ( hackTanks , hack ) ;
36989: LD_ADDR_VAR 0 4
36993: PUSH
36994: LD_EXP 111
36998: PPUSH
36999: LD_VAR 0 1
37003: PPUSH
37004: CALL 44717 0 2
37008: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37009: LD_EXP 112
37013: PUSH
37014: LD_VAR 0 4
37018: ARRAY
37019: IFFALSE 37100
// begin for i in hackTanksCaptured [ index ] do
37021: LD_ADDR_VAR 0 3
37025: PUSH
37026: LD_EXP 112
37030: PUSH
37031: LD_VAR 0 4
37035: ARRAY
37036: PUSH
37037: FOR_IN
37038: IFFALSE 37064
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37040: LD_VAR 0 3
37044: PUSH
37045: LD_INT 1
37047: ARRAY
37048: PPUSH
37049: LD_VAR 0 3
37053: PUSH
37054: LD_INT 2
37056: ARRAY
37057: PPUSH
37058: CALL_OW 235
37062: GO 37037
37064: POP
37065: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37066: LD_ADDR_EXP 112
37070: PUSH
37071: LD_EXP 112
37075: PPUSH
37076: LD_VAR 0 4
37080: PPUSH
37081: EMPTY
37082: PPUSH
37083: CALL_OW 1
37087: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37088: LD_VAR 0 1
37092: PPUSH
37093: LD_INT 0
37095: PPUSH
37096: CALL_OW 505
// end ; end ;
37100: LD_VAR 0 2
37104: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37105: LD_INT 0
37107: PPUSH
37108: PPUSH
37109: PPUSH
// if not hack in hackTanks or not vehicles then
37110: LD_VAR 0 1
37114: PUSH
37115: LD_EXP 111
37119: IN
37120: NOT
37121: PUSH
37122: LD_VAR 0 2
37126: NOT
37127: OR
37128: IFFALSE 37132
// exit ;
37130: GO 37407
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37132: LD_ADDR_VAR 0 2
37136: PUSH
37137: LD_VAR 0 1
37141: PPUSH
37142: LD_VAR 0 2
37146: PPUSH
37147: LD_INT 1
37149: PPUSH
37150: LD_INT 1
37152: PPUSH
37153: CALL 45367 0 4
37157: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37158: LD_ADDR_VAR 0 5
37162: PUSH
37163: LD_EXP 111
37167: PPUSH
37168: LD_VAR 0 1
37172: PPUSH
37173: CALL 44717 0 2
37177: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37178: LD_EXP 112
37182: PUSH
37183: LD_VAR 0 5
37187: ARRAY
37188: PUSH
37189: LD_EXP 113
37193: LESS
37194: IFFALSE 37383
// begin for i := 1 to vehicles do
37196: LD_ADDR_VAR 0 4
37200: PUSH
37201: DOUBLE
37202: LD_INT 1
37204: DEC
37205: ST_TO_ADDR
37206: LD_VAR 0 2
37210: PUSH
37211: FOR_TO
37212: IFFALSE 37381
// begin if hackTanksCaptured [ index ] = hackLimit then
37214: LD_EXP 112
37218: PUSH
37219: LD_VAR 0 5
37223: ARRAY
37224: PUSH
37225: LD_EXP 113
37229: EQUAL
37230: IFFALSE 37234
// break ;
37232: GO 37381
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37234: LD_ADDR_EXP 115
37238: PUSH
37239: LD_EXP 115
37243: PPUSH
37244: LD_VAR 0 5
37248: PPUSH
37249: LD_EXP 115
37253: PUSH
37254: LD_VAR 0 5
37258: ARRAY
37259: PUSH
37260: LD_INT 1
37262: PLUS
37263: PPUSH
37264: CALL_OW 1
37268: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37269: LD_ADDR_EXP 112
37273: PUSH
37274: LD_EXP 112
37278: PPUSH
37279: LD_VAR 0 5
37283: PUSH
37284: LD_EXP 112
37288: PUSH
37289: LD_VAR 0 5
37293: ARRAY
37294: PUSH
37295: LD_INT 1
37297: PLUS
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PPUSH
37303: LD_VAR 0 2
37307: PUSH
37308: LD_VAR 0 4
37312: ARRAY
37313: PUSH
37314: LD_VAR 0 2
37318: PUSH
37319: LD_VAR 0 4
37323: ARRAY
37324: PPUSH
37325: CALL_OW 255
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PPUSH
37334: CALL 44932 0 3
37338: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37339: LD_VAR 0 2
37343: PUSH
37344: LD_VAR 0 4
37348: ARRAY
37349: PPUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 255
37359: PPUSH
37360: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37364: LD_VAR 0 2
37368: PUSH
37369: LD_VAR 0 4
37373: ARRAY
37374: PPUSH
37375: CALL_OW 141
// end ;
37379: GO 37211
37381: POP
37382: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37383: LD_VAR 0 1
37387: PPUSH
37388: LD_EXP 112
37392: PUSH
37393: LD_VAR 0 5
37397: ARRAY
37398: PUSH
37399: LD_INT 0
37401: PLUS
37402: PPUSH
37403: CALL_OW 505
// end ;
37407: LD_VAR 0 3
37411: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37412: LD_INT 0
37414: PPUSH
37415: PPUSH
37416: PPUSH
37417: PPUSH
// if not hack in hackTanks then
37418: LD_VAR 0 1
37422: PUSH
37423: LD_EXP 111
37427: IN
37428: NOT
37429: IFFALSE 37433
// exit ;
37431: GO 37673
// index := GetElementIndex ( hackTanks , hack ) ;
37433: LD_ADDR_VAR 0 4
37437: PUSH
37438: LD_EXP 111
37442: PPUSH
37443: LD_VAR 0 1
37447: PPUSH
37448: CALL 44717 0 2
37452: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37453: LD_ADDR_VAR 0 3
37457: PUSH
37458: DOUBLE
37459: LD_EXP 112
37463: PUSH
37464: LD_VAR 0 4
37468: ARRAY
37469: INC
37470: ST_TO_ADDR
37471: LD_INT 1
37473: PUSH
37474: FOR_DOWNTO
37475: IFFALSE 37647
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37477: LD_ADDR_VAR 0 5
37481: PUSH
37482: LD_EXP 112
37486: PUSH
37487: LD_VAR 0 4
37491: ARRAY
37492: PUSH
37493: LD_VAR 0 3
37497: ARRAY
37498: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37499: LD_VAR 0 5
37503: PUSH
37504: LD_INT 1
37506: ARRAY
37507: PPUSH
37508: CALL_OW 302
37512: NOT
37513: PUSH
37514: LD_VAR 0 5
37518: PUSH
37519: LD_INT 1
37521: ARRAY
37522: PPUSH
37523: CALL_OW 255
37527: PUSH
37528: LD_VAR 0 1
37532: PPUSH
37533: CALL_OW 255
37537: NONEQUAL
37538: OR
37539: IFFALSE 37645
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37541: LD_VAR 0 5
37545: PUSH
37546: LD_INT 1
37548: ARRAY
37549: PPUSH
37550: CALL_OW 305
37554: PUSH
37555: LD_VAR 0 5
37559: PUSH
37560: LD_INT 1
37562: ARRAY
37563: PPUSH
37564: CALL_OW 255
37568: PUSH
37569: LD_VAR 0 1
37573: PPUSH
37574: CALL_OW 255
37578: EQUAL
37579: AND
37580: IFFALSE 37604
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37582: LD_VAR 0 5
37586: PUSH
37587: LD_INT 1
37589: ARRAY
37590: PPUSH
37591: LD_VAR 0 5
37595: PUSH
37596: LD_INT 2
37598: ARRAY
37599: PPUSH
37600: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37604: LD_ADDR_EXP 112
37608: PUSH
37609: LD_EXP 112
37613: PPUSH
37614: LD_VAR 0 4
37618: PPUSH
37619: LD_EXP 112
37623: PUSH
37624: LD_VAR 0 4
37628: ARRAY
37629: PPUSH
37630: LD_VAR 0 3
37634: PPUSH
37635: CALL_OW 3
37639: PPUSH
37640: CALL_OW 1
37644: ST_TO_ADDR
// end ; end ;
37645: GO 37474
37647: POP
37648: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37649: LD_VAR 0 1
37653: PPUSH
37654: LD_EXP 112
37658: PUSH
37659: LD_VAR 0 4
37663: ARRAY
37664: PUSH
37665: LD_INT 0
37667: PLUS
37668: PPUSH
37669: CALL_OW 505
// end ;
37673: LD_VAR 0 2
37677: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37678: LD_INT 0
37680: PPUSH
37681: PPUSH
37682: PPUSH
37683: PPUSH
// if not hack in hackTanks then
37684: LD_VAR 0 1
37688: PUSH
37689: LD_EXP 111
37693: IN
37694: NOT
37695: IFFALSE 37699
// exit ;
37697: GO 37784
// index := GetElementIndex ( hackTanks , hack ) ;
37699: LD_ADDR_VAR 0 5
37703: PUSH
37704: LD_EXP 111
37708: PPUSH
37709: LD_VAR 0 1
37713: PPUSH
37714: CALL 44717 0 2
37718: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37719: LD_ADDR_VAR 0 4
37723: PUSH
37724: DOUBLE
37725: LD_INT 1
37727: DEC
37728: ST_TO_ADDR
37729: LD_EXP 112
37733: PUSH
37734: LD_VAR 0 5
37738: ARRAY
37739: PUSH
37740: FOR_TO
37741: IFFALSE 37782
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37743: LD_EXP 112
37747: PUSH
37748: LD_VAR 0 5
37752: ARRAY
37753: PUSH
37754: LD_VAR 0 4
37758: ARRAY
37759: PUSH
37760: LD_INT 1
37762: ARRAY
37763: PUSH
37764: LD_VAR 0 2
37768: EQUAL
37769: IFFALSE 37780
// KillUnit ( vehicle ) ;
37771: LD_VAR 0 2
37775: PPUSH
37776: CALL_OW 66
37780: GO 37740
37782: POP
37783: POP
// end ;
37784: LD_VAR 0 3
37788: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37789: LD_EXP 116
37793: NOT
37794: IFFALSE 37829
37796: GO 37798
37798: DISABLE
// begin initMiner := true ;
37799: LD_ADDR_EXP 116
37803: PUSH
37804: LD_INT 1
37806: ST_TO_ADDR
// minersList := [ ] ;
37807: LD_ADDR_EXP 117
37811: PUSH
37812: EMPTY
37813: ST_TO_ADDR
// minerMinesList := [ ] ;
37814: LD_ADDR_EXP 118
37818: PUSH
37819: EMPTY
37820: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37821: LD_ADDR_EXP 119
37825: PUSH
37826: LD_INT 5
37828: ST_TO_ADDR
// end ;
37829: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37830: LD_EXP 116
37834: PUSH
37835: LD_INT 34
37837: PUSH
37838: LD_INT 81
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PPUSH
37845: CALL_OW 69
37849: AND
37850: IFFALSE 38311
37852: GO 37854
37854: DISABLE
37855: LD_INT 0
37857: PPUSH
37858: PPUSH
37859: PPUSH
37860: PPUSH
// begin enable ;
37861: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37862: LD_ADDR_VAR 0 1
37866: PUSH
37867: LD_INT 34
37869: PUSH
37870: LD_INT 81
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PPUSH
37877: CALL_OW 69
37881: PUSH
37882: FOR_IN
37883: IFFALSE 37955
// begin if not i in minersList then
37885: LD_VAR 0 1
37889: PUSH
37890: LD_EXP 117
37894: IN
37895: NOT
37896: IFFALSE 37953
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37898: LD_ADDR_EXP 117
37902: PUSH
37903: LD_EXP 117
37907: PPUSH
37908: LD_EXP 117
37912: PUSH
37913: LD_INT 1
37915: PLUS
37916: PPUSH
37917: LD_VAR 0 1
37921: PPUSH
37922: CALL_OW 1
37926: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37927: LD_ADDR_EXP 118
37931: PUSH
37932: LD_EXP 118
37936: PPUSH
37937: LD_EXP 118
37941: PUSH
37942: LD_INT 1
37944: PLUS
37945: PPUSH
37946: EMPTY
37947: PPUSH
37948: CALL_OW 1
37952: ST_TO_ADDR
// end end ;
37953: GO 37882
37955: POP
37956: POP
// for i := minerMinesList downto 1 do
37957: LD_ADDR_VAR 0 1
37961: PUSH
37962: DOUBLE
37963: LD_EXP 118
37967: INC
37968: ST_TO_ADDR
37969: LD_INT 1
37971: PUSH
37972: FOR_DOWNTO
37973: IFFALSE 38309
// begin if IsLive ( minersList [ i ] ) then
37975: LD_EXP 117
37979: PUSH
37980: LD_VAR 0 1
37984: ARRAY
37985: PPUSH
37986: CALL_OW 300
37990: IFFALSE 38018
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37992: LD_EXP 117
37996: PUSH
37997: LD_VAR 0 1
38001: ARRAY
38002: PPUSH
38003: LD_EXP 118
38007: PUSH
38008: LD_VAR 0 1
38012: ARRAY
38013: PPUSH
38014: CALL_OW 505
// if not minerMinesList [ i ] then
38018: LD_EXP 118
38022: PUSH
38023: LD_VAR 0 1
38027: ARRAY
38028: NOT
38029: IFFALSE 38033
// continue ;
38031: GO 37972
// for j := minerMinesList [ i ] downto 1 do
38033: LD_ADDR_VAR 0 2
38037: PUSH
38038: DOUBLE
38039: LD_EXP 118
38043: PUSH
38044: LD_VAR 0 1
38048: ARRAY
38049: INC
38050: ST_TO_ADDR
38051: LD_INT 1
38053: PUSH
38054: FOR_DOWNTO
38055: IFFALSE 38305
// begin side := GetSide ( minersList [ i ] ) ;
38057: LD_ADDR_VAR 0 3
38061: PUSH
38062: LD_EXP 117
38066: PUSH
38067: LD_VAR 0 1
38071: ARRAY
38072: PPUSH
38073: CALL_OW 255
38077: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38078: LD_ADDR_VAR 0 4
38082: PUSH
38083: LD_EXP 118
38087: PUSH
38088: LD_VAR 0 1
38092: ARRAY
38093: PUSH
38094: LD_VAR 0 2
38098: ARRAY
38099: PUSH
38100: LD_INT 1
38102: ARRAY
38103: PPUSH
38104: LD_EXP 118
38108: PUSH
38109: LD_VAR 0 1
38113: ARRAY
38114: PUSH
38115: LD_VAR 0 2
38119: ARRAY
38120: PUSH
38121: LD_INT 2
38123: ARRAY
38124: PPUSH
38125: CALL_OW 428
38129: ST_TO_ADDR
// if not tmp then
38130: LD_VAR 0 4
38134: NOT
38135: IFFALSE 38139
// continue ;
38137: GO 38054
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38139: LD_VAR 0 4
38143: PUSH
38144: LD_INT 81
38146: PUSH
38147: LD_VAR 0 3
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PPUSH
38156: CALL_OW 69
38160: IN
38161: PUSH
38162: LD_EXP 118
38166: PUSH
38167: LD_VAR 0 1
38171: ARRAY
38172: PUSH
38173: LD_VAR 0 2
38177: ARRAY
38178: PUSH
38179: LD_INT 1
38181: ARRAY
38182: PPUSH
38183: LD_EXP 118
38187: PUSH
38188: LD_VAR 0 1
38192: ARRAY
38193: PUSH
38194: LD_VAR 0 2
38198: ARRAY
38199: PUSH
38200: LD_INT 2
38202: ARRAY
38203: PPUSH
38204: CALL_OW 458
38208: AND
38209: IFFALSE 38303
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38211: LD_EXP 118
38215: PUSH
38216: LD_VAR 0 1
38220: ARRAY
38221: PUSH
38222: LD_VAR 0 2
38226: ARRAY
38227: PUSH
38228: LD_INT 1
38230: ARRAY
38231: PPUSH
38232: LD_EXP 118
38236: PUSH
38237: LD_VAR 0 1
38241: ARRAY
38242: PUSH
38243: LD_VAR 0 2
38247: ARRAY
38248: PUSH
38249: LD_INT 2
38251: ARRAY
38252: PPUSH
38253: LD_VAR 0 3
38257: PPUSH
38258: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38262: LD_ADDR_EXP 118
38266: PUSH
38267: LD_EXP 118
38271: PPUSH
38272: LD_VAR 0 1
38276: PPUSH
38277: LD_EXP 118
38281: PUSH
38282: LD_VAR 0 1
38286: ARRAY
38287: PPUSH
38288: LD_VAR 0 2
38292: PPUSH
38293: CALL_OW 3
38297: PPUSH
38298: CALL_OW 1
38302: ST_TO_ADDR
// end ; end ;
38303: GO 38054
38305: POP
38306: POP
// end ;
38307: GO 37972
38309: POP
38310: POP
// end ;
38311: PPOPN 4
38313: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38314: LD_INT 0
38316: PPUSH
38317: PPUSH
// result := false ;
38318: LD_ADDR_VAR 0 4
38322: PUSH
38323: LD_INT 0
38325: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38326: LD_VAR 0 1
38330: PPUSH
38331: CALL_OW 264
38335: PUSH
38336: LD_INT 81
38338: EQUAL
38339: NOT
38340: IFFALSE 38344
// exit ;
38342: GO 38584
// index := GetElementIndex ( minersList , unit ) ;
38344: LD_ADDR_VAR 0 5
38348: PUSH
38349: LD_EXP 117
38353: PPUSH
38354: LD_VAR 0 1
38358: PPUSH
38359: CALL 44717 0 2
38363: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38364: LD_EXP 118
38368: PUSH
38369: LD_VAR 0 5
38373: ARRAY
38374: PUSH
38375: LD_EXP 119
38379: GREATEREQUAL
38380: IFFALSE 38384
// exit ;
38382: GO 38584
// ComMoveXY ( unit , x , y ) ;
38384: LD_VAR 0 1
38388: PPUSH
38389: LD_VAR 0 2
38393: PPUSH
38394: LD_VAR 0 3
38398: PPUSH
38399: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38403: LD_INT 35
38405: PPUSH
38406: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38410: LD_VAR 0 1
38414: PPUSH
38415: LD_VAR 0 2
38419: PPUSH
38420: LD_VAR 0 3
38424: PPUSH
38425: CALL 76053 0 3
38429: NOT
38430: PUSH
38431: LD_VAR 0 1
38435: PPUSH
38436: CALL_OW 314
38440: AND
38441: IFFALSE 38445
// exit ;
38443: GO 38584
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38445: LD_VAR 0 2
38449: PPUSH
38450: LD_VAR 0 3
38454: PPUSH
38455: CALL_OW 428
38459: PUSH
38460: LD_VAR 0 1
38464: EQUAL
38465: PUSH
38466: LD_VAR 0 1
38470: PPUSH
38471: CALL_OW 314
38475: NOT
38476: AND
38477: IFFALSE 38403
// PlaySoundXY ( x , y , PlantMine ) ;
38479: LD_VAR 0 2
38483: PPUSH
38484: LD_VAR 0 3
38488: PPUSH
38489: LD_STRING PlantMine
38491: PPUSH
38492: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38496: LD_VAR 0 2
38500: PPUSH
38501: LD_VAR 0 3
38505: PPUSH
38506: LD_VAR 0 1
38510: PPUSH
38511: CALL_OW 255
38515: PPUSH
38516: LD_INT 0
38518: PPUSH
38519: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38523: LD_ADDR_EXP 118
38527: PUSH
38528: LD_EXP 118
38532: PPUSH
38533: LD_VAR 0 5
38537: PUSH
38538: LD_EXP 118
38542: PUSH
38543: LD_VAR 0 5
38547: ARRAY
38548: PUSH
38549: LD_INT 1
38551: PLUS
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PPUSH
38557: LD_VAR 0 2
38561: PUSH
38562: LD_VAR 0 3
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PPUSH
38571: CALL 44932 0 3
38575: ST_TO_ADDR
// result := true ;
38576: LD_ADDR_VAR 0 4
38580: PUSH
38581: LD_INT 1
38583: ST_TO_ADDR
// end ;
38584: LD_VAR 0 4
38588: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38589: LD_INT 0
38591: PPUSH
38592: PPUSH
38593: PPUSH
// if not unit in minersList then
38594: LD_VAR 0 1
38598: PUSH
38599: LD_EXP 117
38603: IN
38604: NOT
38605: IFFALSE 38609
// exit ;
38607: GO 39001
// index := GetElementIndex ( minersList , unit ) ;
38609: LD_ADDR_VAR 0 6
38613: PUSH
38614: LD_EXP 117
38618: PPUSH
38619: LD_VAR 0 1
38623: PPUSH
38624: CALL 44717 0 2
38628: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38629: LD_ADDR_VAR 0 5
38633: PUSH
38634: DOUBLE
38635: LD_EXP 118
38639: PUSH
38640: LD_VAR 0 6
38644: ARRAY
38645: INC
38646: ST_TO_ADDR
38647: LD_INT 1
38649: PUSH
38650: FOR_DOWNTO
38651: IFFALSE 38812
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38653: LD_EXP 118
38657: PUSH
38658: LD_VAR 0 6
38662: ARRAY
38663: PUSH
38664: LD_VAR 0 5
38668: ARRAY
38669: PUSH
38670: LD_INT 1
38672: ARRAY
38673: PUSH
38674: LD_VAR 0 2
38678: EQUAL
38679: PUSH
38680: LD_EXP 118
38684: PUSH
38685: LD_VAR 0 6
38689: ARRAY
38690: PUSH
38691: LD_VAR 0 5
38695: ARRAY
38696: PUSH
38697: LD_INT 2
38699: ARRAY
38700: PUSH
38701: LD_VAR 0 3
38705: EQUAL
38706: AND
38707: IFFALSE 38810
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38709: LD_EXP 118
38713: PUSH
38714: LD_VAR 0 6
38718: ARRAY
38719: PUSH
38720: LD_VAR 0 5
38724: ARRAY
38725: PUSH
38726: LD_INT 1
38728: ARRAY
38729: PPUSH
38730: LD_EXP 118
38734: PUSH
38735: LD_VAR 0 6
38739: ARRAY
38740: PUSH
38741: LD_VAR 0 5
38745: ARRAY
38746: PUSH
38747: LD_INT 2
38749: ARRAY
38750: PPUSH
38751: LD_VAR 0 1
38755: PPUSH
38756: CALL_OW 255
38760: PPUSH
38761: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38765: LD_ADDR_EXP 118
38769: PUSH
38770: LD_EXP 118
38774: PPUSH
38775: LD_VAR 0 6
38779: PPUSH
38780: LD_EXP 118
38784: PUSH
38785: LD_VAR 0 6
38789: ARRAY
38790: PPUSH
38791: LD_VAR 0 5
38795: PPUSH
38796: CALL_OW 3
38800: PPUSH
38801: CALL_OW 1
38805: ST_TO_ADDR
// exit ;
38806: POP
38807: POP
38808: GO 39001
// end ; end ;
38810: GO 38650
38812: POP
38813: POP
// for i := minerMinesList [ index ] downto 1 do
38814: LD_ADDR_VAR 0 5
38818: PUSH
38819: DOUBLE
38820: LD_EXP 118
38824: PUSH
38825: LD_VAR 0 6
38829: ARRAY
38830: INC
38831: ST_TO_ADDR
38832: LD_INT 1
38834: PUSH
38835: FOR_DOWNTO
38836: IFFALSE 38999
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38838: LD_EXP 118
38842: PUSH
38843: LD_VAR 0 6
38847: ARRAY
38848: PUSH
38849: LD_VAR 0 5
38853: ARRAY
38854: PUSH
38855: LD_INT 1
38857: ARRAY
38858: PPUSH
38859: LD_EXP 118
38863: PUSH
38864: LD_VAR 0 6
38868: ARRAY
38869: PUSH
38870: LD_VAR 0 5
38874: ARRAY
38875: PUSH
38876: LD_INT 2
38878: ARRAY
38879: PPUSH
38880: LD_VAR 0 2
38884: PPUSH
38885: LD_VAR 0 3
38889: PPUSH
38890: CALL_OW 298
38894: PUSH
38895: LD_INT 6
38897: LESS
38898: IFFALSE 38997
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38900: LD_EXP 118
38904: PUSH
38905: LD_VAR 0 6
38909: ARRAY
38910: PUSH
38911: LD_VAR 0 5
38915: ARRAY
38916: PUSH
38917: LD_INT 1
38919: ARRAY
38920: PPUSH
38921: LD_EXP 118
38925: PUSH
38926: LD_VAR 0 6
38930: ARRAY
38931: PUSH
38932: LD_VAR 0 5
38936: ARRAY
38937: PUSH
38938: LD_INT 2
38940: ARRAY
38941: PPUSH
38942: LD_VAR 0 1
38946: PPUSH
38947: CALL_OW 255
38951: PPUSH
38952: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38956: LD_ADDR_EXP 118
38960: PUSH
38961: LD_EXP 118
38965: PPUSH
38966: LD_VAR 0 6
38970: PPUSH
38971: LD_EXP 118
38975: PUSH
38976: LD_VAR 0 6
38980: ARRAY
38981: PPUSH
38982: LD_VAR 0 5
38986: PPUSH
38987: CALL_OW 3
38991: PPUSH
38992: CALL_OW 1
38996: ST_TO_ADDR
// end ; end ;
38997: GO 38835
38999: POP
39000: POP
// end ;
39001: LD_VAR 0 4
39005: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39006: LD_INT 0
39008: PPUSH
39009: PPUSH
39010: PPUSH
39011: PPUSH
39012: PPUSH
39013: PPUSH
39014: PPUSH
39015: PPUSH
39016: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39017: LD_VAR 0 1
39021: PPUSH
39022: CALL_OW 264
39026: PUSH
39027: LD_INT 81
39029: EQUAL
39030: NOT
39031: PUSH
39032: LD_VAR 0 1
39036: PUSH
39037: LD_EXP 117
39041: IN
39042: NOT
39043: OR
39044: IFFALSE 39048
// exit ;
39046: GO 39370
// index := GetElementIndex ( minersList , unit ) ;
39048: LD_ADDR_VAR 0 6
39052: PUSH
39053: LD_EXP 117
39057: PPUSH
39058: LD_VAR 0 1
39062: PPUSH
39063: CALL 44717 0 2
39067: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39068: LD_ADDR_VAR 0 8
39072: PUSH
39073: LD_EXP 119
39077: PUSH
39078: LD_EXP 118
39082: PUSH
39083: LD_VAR 0 6
39087: ARRAY
39088: MINUS
39089: ST_TO_ADDR
// if not minesFreeAmount then
39090: LD_VAR 0 8
39094: NOT
39095: IFFALSE 39099
// exit ;
39097: GO 39370
// tmp := [ ] ;
39099: LD_ADDR_VAR 0 7
39103: PUSH
39104: EMPTY
39105: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39106: LD_ADDR_VAR 0 5
39110: PUSH
39111: DOUBLE
39112: LD_INT 1
39114: DEC
39115: ST_TO_ADDR
39116: LD_VAR 0 8
39120: PUSH
39121: FOR_TO
39122: IFFALSE 39317
// begin _d := rand ( 0 , 5 ) ;
39124: LD_ADDR_VAR 0 11
39128: PUSH
39129: LD_INT 0
39131: PPUSH
39132: LD_INT 5
39134: PPUSH
39135: CALL_OW 12
39139: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39140: LD_ADDR_VAR 0 12
39144: PUSH
39145: LD_INT 2
39147: PPUSH
39148: LD_INT 6
39150: PPUSH
39151: CALL_OW 12
39155: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39156: LD_ADDR_VAR 0 9
39160: PUSH
39161: LD_VAR 0 2
39165: PPUSH
39166: LD_VAR 0 11
39170: PPUSH
39171: LD_VAR 0 12
39175: PPUSH
39176: CALL_OW 272
39180: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39181: LD_ADDR_VAR 0 10
39185: PUSH
39186: LD_VAR 0 3
39190: PPUSH
39191: LD_VAR 0 11
39195: PPUSH
39196: LD_VAR 0 12
39200: PPUSH
39201: CALL_OW 273
39205: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39206: LD_VAR 0 9
39210: PPUSH
39211: LD_VAR 0 10
39215: PPUSH
39216: CALL_OW 488
39220: PUSH
39221: LD_VAR 0 9
39225: PUSH
39226: LD_VAR 0 10
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_VAR 0 7
39239: IN
39240: NOT
39241: AND
39242: PUSH
39243: LD_VAR 0 9
39247: PPUSH
39248: LD_VAR 0 10
39252: PPUSH
39253: CALL_OW 458
39257: NOT
39258: AND
39259: IFFALSE 39301
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39261: LD_ADDR_VAR 0 7
39265: PUSH
39266: LD_VAR 0 7
39270: PPUSH
39271: LD_VAR 0 7
39275: PUSH
39276: LD_INT 1
39278: PLUS
39279: PPUSH
39280: LD_VAR 0 9
39284: PUSH
39285: LD_VAR 0 10
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PPUSH
39294: CALL_OW 1
39298: ST_TO_ADDR
39299: GO 39315
// i := i - 1 ;
39301: LD_ADDR_VAR 0 5
39305: PUSH
39306: LD_VAR 0 5
39310: PUSH
39311: LD_INT 1
39313: MINUS
39314: ST_TO_ADDR
// end ;
39315: GO 39121
39317: POP
39318: POP
// for i in tmp do
39319: LD_ADDR_VAR 0 5
39323: PUSH
39324: LD_VAR 0 7
39328: PUSH
39329: FOR_IN
39330: IFFALSE 39368
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39332: LD_VAR 0 1
39336: PPUSH
39337: LD_VAR 0 5
39341: PUSH
39342: LD_INT 1
39344: ARRAY
39345: PPUSH
39346: LD_VAR 0 5
39350: PUSH
39351: LD_INT 2
39353: ARRAY
39354: PPUSH
39355: CALL 38314 0 3
39359: NOT
39360: IFFALSE 39366
// exit ;
39362: POP
39363: POP
39364: GO 39370
39366: GO 39329
39368: POP
39369: POP
// end ;
39370: LD_VAR 0 4
39374: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39375: LD_INT 0
39377: PPUSH
39378: PPUSH
39379: PPUSH
39380: PPUSH
39381: PPUSH
39382: PPUSH
39383: PPUSH
// if not GetClass ( unit ) = class_sniper then
39384: LD_VAR 0 1
39388: PPUSH
39389: CALL_OW 257
39393: PUSH
39394: LD_INT 5
39396: EQUAL
39397: NOT
39398: IFFALSE 39402
// exit ;
39400: GO 39790
// dist := 8 ;
39402: LD_ADDR_VAR 0 5
39406: PUSH
39407: LD_INT 8
39409: ST_TO_ADDR
// viewRange := 12 ;
39410: LD_ADDR_VAR 0 7
39414: PUSH
39415: LD_INT 12
39417: ST_TO_ADDR
// side := GetSide ( unit ) ;
39418: LD_ADDR_VAR 0 6
39422: PUSH
39423: LD_VAR 0 1
39427: PPUSH
39428: CALL_OW 255
39432: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39433: LD_INT 61
39435: PPUSH
39436: LD_VAR 0 6
39440: PPUSH
39441: CALL_OW 321
39445: PUSH
39446: LD_INT 2
39448: EQUAL
39449: IFFALSE 39459
// viewRange := 16 ;
39451: LD_ADDR_VAR 0 7
39455: PUSH
39456: LD_INT 16
39458: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39459: LD_VAR 0 1
39463: PPUSH
39464: LD_VAR 0 2
39468: PPUSH
39469: LD_VAR 0 3
39473: PPUSH
39474: CALL_OW 297
39478: PUSH
39479: LD_VAR 0 5
39483: GREATER
39484: IFFALSE 39563
// begin ComMoveXY ( unit , x , y ) ;
39486: LD_VAR 0 1
39490: PPUSH
39491: LD_VAR 0 2
39495: PPUSH
39496: LD_VAR 0 3
39500: PPUSH
39501: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39505: LD_INT 35
39507: PPUSH
39508: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39512: LD_VAR 0 1
39516: PPUSH
39517: LD_VAR 0 2
39521: PPUSH
39522: LD_VAR 0 3
39526: PPUSH
39527: CALL 76053 0 3
39531: NOT
39532: IFFALSE 39536
// exit ;
39534: GO 39790
// until GetDistUnitXY ( unit , x , y ) < dist ;
39536: LD_VAR 0 1
39540: PPUSH
39541: LD_VAR 0 2
39545: PPUSH
39546: LD_VAR 0 3
39550: PPUSH
39551: CALL_OW 297
39555: PUSH
39556: LD_VAR 0 5
39560: LESS
39561: IFFALSE 39505
// end ; ComTurnXY ( unit , x , y ) ;
39563: LD_VAR 0 1
39567: PPUSH
39568: LD_VAR 0 2
39572: PPUSH
39573: LD_VAR 0 3
39577: PPUSH
39578: CALL_OW 118
// wait ( 5 ) ;
39582: LD_INT 5
39584: PPUSH
39585: CALL_OW 67
// _d := GetDir ( unit ) ;
39589: LD_ADDR_VAR 0 10
39593: PUSH
39594: LD_VAR 0 1
39598: PPUSH
39599: CALL_OW 254
39603: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39604: LD_ADDR_VAR 0 8
39608: PUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: CALL_OW 250
39618: PPUSH
39619: LD_VAR 0 10
39623: PPUSH
39624: LD_VAR 0 5
39628: PPUSH
39629: CALL_OW 272
39633: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39634: LD_ADDR_VAR 0 9
39638: PUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: CALL_OW 251
39648: PPUSH
39649: LD_VAR 0 10
39653: PPUSH
39654: LD_VAR 0 5
39658: PPUSH
39659: CALL_OW 273
39663: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39664: LD_VAR 0 8
39668: PPUSH
39669: LD_VAR 0 9
39673: PPUSH
39674: CALL_OW 488
39678: NOT
39679: IFFALSE 39683
// exit ;
39681: GO 39790
// ComAnimCustom ( unit , 1 ) ;
39683: LD_VAR 0 1
39687: PPUSH
39688: LD_INT 1
39690: PPUSH
39691: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39695: LD_VAR 0 8
39699: PPUSH
39700: LD_VAR 0 9
39704: PPUSH
39705: LD_VAR 0 6
39709: PPUSH
39710: LD_VAR 0 7
39714: PPUSH
39715: CALL_OW 330
// repeat wait ( 1 ) ;
39719: LD_INT 1
39721: PPUSH
39722: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39726: LD_VAR 0 1
39730: PPUSH
39731: CALL_OW 316
39735: PUSH
39736: LD_VAR 0 1
39740: PPUSH
39741: CALL_OW 314
39745: OR
39746: PUSH
39747: LD_VAR 0 1
39751: PPUSH
39752: CALL_OW 302
39756: NOT
39757: OR
39758: PUSH
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 301
39768: OR
39769: IFFALSE 39719
// RemoveSeeing ( _x , _y , side ) ;
39771: LD_VAR 0 8
39775: PPUSH
39776: LD_VAR 0 9
39780: PPUSH
39781: LD_VAR 0 6
39785: PPUSH
39786: CALL_OW 331
// end ; end_of_file
39790: LD_VAR 0 4
39794: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39795: LD_INT 0
39797: PPUSH
39798: PPUSH
// if exist_mode then
39799: LD_VAR 0 2
39803: IFFALSE 39828
// unit := CreateCharacter ( prefix & ident ) else
39805: LD_ADDR_VAR 0 5
39809: PUSH
39810: LD_VAR 0 3
39814: PUSH
39815: LD_VAR 0 1
39819: STR
39820: PPUSH
39821: CALL_OW 34
39825: ST_TO_ADDR
39826: GO 39843
// unit := NewCharacter ( ident ) ;
39828: LD_ADDR_VAR 0 5
39832: PUSH
39833: LD_VAR 0 1
39837: PPUSH
39838: CALL_OW 25
39842: ST_TO_ADDR
// result := unit ;
39843: LD_ADDR_VAR 0 4
39847: PUSH
39848: LD_VAR 0 5
39852: ST_TO_ADDR
// end ;
39853: LD_VAR 0 4
39857: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39858: LD_INT 0
39860: PPUSH
39861: PPUSH
// if not side or not nation then
39862: LD_VAR 0 1
39866: NOT
39867: PUSH
39868: LD_VAR 0 2
39872: NOT
39873: OR
39874: IFFALSE 39878
// exit ;
39876: GO 40646
// case nation of nation_american :
39878: LD_VAR 0 2
39882: PUSH
39883: LD_INT 1
39885: DOUBLE
39886: EQUAL
39887: IFTRUE 39891
39889: GO 40105
39891: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39892: LD_ADDR_VAR 0 4
39896: PUSH
39897: LD_INT 35
39899: PUSH
39900: LD_INT 45
39902: PUSH
39903: LD_INT 46
39905: PUSH
39906: LD_INT 47
39908: PUSH
39909: LD_INT 82
39911: PUSH
39912: LD_INT 83
39914: PUSH
39915: LD_INT 84
39917: PUSH
39918: LD_INT 85
39920: PUSH
39921: LD_INT 86
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: LD_INT 6
39932: PUSH
39933: LD_INT 15
39935: PUSH
39936: LD_INT 16
39938: PUSH
39939: LD_INT 7
39941: PUSH
39942: LD_INT 12
39944: PUSH
39945: LD_INT 13
39947: PUSH
39948: LD_INT 10
39950: PUSH
39951: LD_INT 14
39953: PUSH
39954: LD_INT 20
39956: PUSH
39957: LD_INT 21
39959: PUSH
39960: LD_INT 22
39962: PUSH
39963: LD_INT 25
39965: PUSH
39966: LD_INT 32
39968: PUSH
39969: LD_INT 27
39971: PUSH
39972: LD_INT 36
39974: PUSH
39975: LD_INT 69
39977: PUSH
39978: LD_INT 39
39980: PUSH
39981: LD_INT 34
39983: PUSH
39984: LD_INT 40
39986: PUSH
39987: LD_INT 48
39989: PUSH
39990: LD_INT 49
39992: PUSH
39993: LD_INT 50
39995: PUSH
39996: LD_INT 51
39998: PUSH
39999: LD_INT 52
40001: PUSH
40002: LD_INT 53
40004: PUSH
40005: LD_INT 54
40007: PUSH
40008: LD_INT 55
40010: PUSH
40011: LD_INT 56
40013: PUSH
40014: LD_INT 57
40016: PUSH
40017: LD_INT 58
40019: PUSH
40020: LD_INT 59
40022: PUSH
40023: LD_INT 60
40025: PUSH
40026: LD_INT 61
40028: PUSH
40029: LD_INT 62
40031: PUSH
40032: LD_INT 80
40034: PUSH
40035: LD_INT 82
40037: PUSH
40038: LD_INT 83
40040: PUSH
40041: LD_INT 84
40043: PUSH
40044: LD_INT 85
40046: PUSH
40047: LD_INT 86
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: ST_TO_ADDR
40103: GO 40570
40105: LD_INT 2
40107: DOUBLE
40108: EQUAL
40109: IFTRUE 40113
40111: GO 40339
40113: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40114: LD_ADDR_VAR 0 4
40118: PUSH
40119: LD_INT 35
40121: PUSH
40122: LD_INT 45
40124: PUSH
40125: LD_INT 46
40127: PUSH
40128: LD_INT 47
40130: PUSH
40131: LD_INT 82
40133: PUSH
40134: LD_INT 83
40136: PUSH
40137: LD_INT 84
40139: PUSH
40140: LD_INT 85
40142: PUSH
40143: LD_INT 87
40145: PUSH
40146: LD_INT 70
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: LD_INT 11
40154: PUSH
40155: LD_INT 3
40157: PUSH
40158: LD_INT 4
40160: PUSH
40161: LD_INT 5
40163: PUSH
40164: LD_INT 6
40166: PUSH
40167: LD_INT 15
40169: PUSH
40170: LD_INT 18
40172: PUSH
40173: LD_INT 7
40175: PUSH
40176: LD_INT 17
40178: PUSH
40179: LD_INT 8
40181: PUSH
40182: LD_INT 20
40184: PUSH
40185: LD_INT 21
40187: PUSH
40188: LD_INT 22
40190: PUSH
40191: LD_INT 72
40193: PUSH
40194: LD_INT 26
40196: PUSH
40197: LD_INT 69
40199: PUSH
40200: LD_INT 39
40202: PUSH
40203: LD_INT 40
40205: PUSH
40206: LD_INT 41
40208: PUSH
40209: LD_INT 42
40211: PUSH
40212: LD_INT 43
40214: PUSH
40215: LD_INT 48
40217: PUSH
40218: LD_INT 49
40220: PUSH
40221: LD_INT 50
40223: PUSH
40224: LD_INT 51
40226: PUSH
40227: LD_INT 52
40229: PUSH
40230: LD_INT 53
40232: PUSH
40233: LD_INT 54
40235: PUSH
40236: LD_INT 55
40238: PUSH
40239: LD_INT 56
40241: PUSH
40242: LD_INT 60
40244: PUSH
40245: LD_INT 61
40247: PUSH
40248: LD_INT 62
40250: PUSH
40251: LD_INT 66
40253: PUSH
40254: LD_INT 67
40256: PUSH
40257: LD_INT 68
40259: PUSH
40260: LD_INT 81
40262: PUSH
40263: LD_INT 82
40265: PUSH
40266: LD_INT 83
40268: PUSH
40269: LD_INT 84
40271: PUSH
40272: LD_INT 85
40274: PUSH
40275: LD_INT 87
40277: PUSH
40278: LD_INT 88
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: ST_TO_ADDR
40337: GO 40570
40339: LD_INT 3
40341: DOUBLE
40342: EQUAL
40343: IFTRUE 40347
40345: GO 40569
40347: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40348: LD_ADDR_VAR 0 4
40352: PUSH
40353: LD_INT 46
40355: PUSH
40356: LD_INT 47
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 82
40367: PUSH
40368: LD_INT 83
40370: PUSH
40371: LD_INT 84
40373: PUSH
40374: LD_INT 85
40376: PUSH
40377: LD_INT 86
40379: PUSH
40380: LD_INT 11
40382: PUSH
40383: LD_INT 9
40385: PUSH
40386: LD_INT 20
40388: PUSH
40389: LD_INT 19
40391: PUSH
40392: LD_INT 21
40394: PUSH
40395: LD_INT 24
40397: PUSH
40398: LD_INT 22
40400: PUSH
40401: LD_INT 25
40403: PUSH
40404: LD_INT 28
40406: PUSH
40407: LD_INT 29
40409: PUSH
40410: LD_INT 30
40412: PUSH
40413: LD_INT 31
40415: PUSH
40416: LD_INT 37
40418: PUSH
40419: LD_INT 38
40421: PUSH
40422: LD_INT 32
40424: PUSH
40425: LD_INT 27
40427: PUSH
40428: LD_INT 33
40430: PUSH
40431: LD_INT 69
40433: PUSH
40434: LD_INT 39
40436: PUSH
40437: LD_INT 34
40439: PUSH
40440: LD_INT 40
40442: PUSH
40443: LD_INT 71
40445: PUSH
40446: LD_INT 23
40448: PUSH
40449: LD_INT 44
40451: PUSH
40452: LD_INT 48
40454: PUSH
40455: LD_INT 49
40457: PUSH
40458: LD_INT 50
40460: PUSH
40461: LD_INT 51
40463: PUSH
40464: LD_INT 52
40466: PUSH
40467: LD_INT 53
40469: PUSH
40470: LD_INT 54
40472: PUSH
40473: LD_INT 55
40475: PUSH
40476: LD_INT 56
40478: PUSH
40479: LD_INT 57
40481: PUSH
40482: LD_INT 58
40484: PUSH
40485: LD_INT 59
40487: PUSH
40488: LD_INT 63
40490: PUSH
40491: LD_INT 64
40493: PUSH
40494: LD_INT 65
40496: PUSH
40497: LD_INT 82
40499: PUSH
40500: LD_INT 83
40502: PUSH
40503: LD_INT 84
40505: PUSH
40506: LD_INT 85
40508: PUSH
40509: LD_INT 86
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: ST_TO_ADDR
40567: GO 40570
40569: POP
// if state > - 1 and state < 3 then
40570: LD_VAR 0 3
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: GREATER
40579: PUSH
40580: LD_VAR 0 3
40584: PUSH
40585: LD_INT 3
40587: LESS
40588: AND
40589: IFFALSE 40646
// for i in result do
40591: LD_ADDR_VAR 0 5
40595: PUSH
40596: LD_VAR 0 4
40600: PUSH
40601: FOR_IN
40602: IFFALSE 40644
// if GetTech ( i , side ) <> state then
40604: LD_VAR 0 5
40608: PPUSH
40609: LD_VAR 0 1
40613: PPUSH
40614: CALL_OW 321
40618: PUSH
40619: LD_VAR 0 3
40623: NONEQUAL
40624: IFFALSE 40642
// result := result diff i ;
40626: LD_ADDR_VAR 0 4
40630: PUSH
40631: LD_VAR 0 4
40635: PUSH
40636: LD_VAR 0 5
40640: DIFF
40641: ST_TO_ADDR
40642: GO 40601
40644: POP
40645: POP
// end ;
40646: LD_VAR 0 4
40650: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40651: LD_INT 0
40653: PPUSH
40654: PPUSH
40655: PPUSH
// result := true ;
40656: LD_ADDR_VAR 0 3
40660: PUSH
40661: LD_INT 1
40663: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40664: LD_ADDR_VAR 0 5
40668: PUSH
40669: LD_VAR 0 2
40673: PPUSH
40674: CALL_OW 480
40678: ST_TO_ADDR
// if not tmp then
40679: LD_VAR 0 5
40683: NOT
40684: IFFALSE 40688
// exit ;
40686: GO 40737
// for i in tmp do
40688: LD_ADDR_VAR 0 4
40692: PUSH
40693: LD_VAR 0 5
40697: PUSH
40698: FOR_IN
40699: IFFALSE 40735
// if GetTech ( i , side ) <> state_researched then
40701: LD_VAR 0 4
40705: PPUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 321
40715: PUSH
40716: LD_INT 2
40718: NONEQUAL
40719: IFFALSE 40733
// begin result := false ;
40721: LD_ADDR_VAR 0 3
40725: PUSH
40726: LD_INT 0
40728: ST_TO_ADDR
// exit ;
40729: POP
40730: POP
40731: GO 40737
// end ;
40733: GO 40698
40735: POP
40736: POP
// end ;
40737: LD_VAR 0 3
40741: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40742: LD_INT 0
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40757: LD_VAR 0 1
40761: NOT
40762: PUSH
40763: LD_VAR 0 1
40767: PPUSH
40768: CALL_OW 257
40772: PUSH
40773: LD_INT 9
40775: NONEQUAL
40776: OR
40777: IFFALSE 40781
// exit ;
40779: GO 41354
// side := GetSide ( unit ) ;
40781: LD_ADDR_VAR 0 9
40785: PUSH
40786: LD_VAR 0 1
40790: PPUSH
40791: CALL_OW 255
40795: ST_TO_ADDR
// tech_space := tech_spacanom ;
40796: LD_ADDR_VAR 0 12
40800: PUSH
40801: LD_INT 29
40803: ST_TO_ADDR
// tech_time := tech_taurad ;
40804: LD_ADDR_VAR 0 13
40808: PUSH
40809: LD_INT 28
40811: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40812: LD_ADDR_VAR 0 11
40816: PUSH
40817: LD_VAR 0 1
40821: PPUSH
40822: CALL_OW 310
40826: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40827: LD_VAR 0 11
40831: PPUSH
40832: CALL_OW 247
40836: PUSH
40837: LD_INT 2
40839: EQUAL
40840: IFFALSE 40844
// exit ;
40842: GO 41354
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40844: LD_ADDR_VAR 0 8
40848: PUSH
40849: LD_INT 81
40851: PUSH
40852: LD_VAR 0 9
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 3
40863: PUSH
40864: LD_INT 21
40866: PUSH
40867: LD_INT 3
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PPUSH
40882: CALL_OW 69
40886: ST_TO_ADDR
// if not tmp then
40887: LD_VAR 0 8
40891: NOT
40892: IFFALSE 40896
// exit ;
40894: GO 41354
// if in_unit then
40896: LD_VAR 0 11
40900: IFFALSE 40924
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40902: LD_ADDR_VAR 0 10
40906: PUSH
40907: LD_VAR 0 8
40911: PPUSH
40912: LD_VAR 0 11
40916: PPUSH
40917: CALL_OW 74
40921: ST_TO_ADDR
40922: GO 40944
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40924: LD_ADDR_VAR 0 10
40928: PUSH
40929: LD_VAR 0 8
40933: PPUSH
40934: LD_VAR 0 1
40938: PPUSH
40939: CALL_OW 74
40943: ST_TO_ADDR
// if not enemy then
40944: LD_VAR 0 10
40948: NOT
40949: IFFALSE 40953
// exit ;
40951: GO 41354
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40953: LD_VAR 0 11
40957: PUSH
40958: LD_VAR 0 11
40962: PPUSH
40963: LD_VAR 0 10
40967: PPUSH
40968: CALL_OW 296
40972: PUSH
40973: LD_INT 13
40975: GREATER
40976: AND
40977: PUSH
40978: LD_VAR 0 1
40982: PPUSH
40983: LD_VAR 0 10
40987: PPUSH
40988: CALL_OW 296
40992: PUSH
40993: LD_INT 12
40995: GREATER
40996: OR
40997: IFFALSE 41001
// exit ;
40999: GO 41354
// missile := [ 1 ] ;
41001: LD_ADDR_VAR 0 14
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41012: LD_VAR 0 9
41016: PPUSH
41017: LD_VAR 0 12
41021: PPUSH
41022: CALL_OW 325
41026: IFFALSE 41055
// missile := Replace ( missile , missile + 1 , 2 ) ;
41028: LD_ADDR_VAR 0 14
41032: PUSH
41033: LD_VAR 0 14
41037: PPUSH
41038: LD_VAR 0 14
41042: PUSH
41043: LD_INT 1
41045: PLUS
41046: PPUSH
41047: LD_INT 2
41049: PPUSH
41050: CALL_OW 1
41054: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41055: LD_VAR 0 9
41059: PPUSH
41060: LD_VAR 0 13
41064: PPUSH
41065: CALL_OW 325
41069: PUSH
41070: LD_VAR 0 10
41074: PPUSH
41075: CALL_OW 255
41079: PPUSH
41080: LD_VAR 0 13
41084: PPUSH
41085: CALL_OW 325
41089: NOT
41090: AND
41091: IFFALSE 41120
// missile := Replace ( missile , missile + 1 , 3 ) ;
41093: LD_ADDR_VAR 0 14
41097: PUSH
41098: LD_VAR 0 14
41102: PPUSH
41103: LD_VAR 0 14
41107: PUSH
41108: LD_INT 1
41110: PLUS
41111: PPUSH
41112: LD_INT 3
41114: PPUSH
41115: CALL_OW 1
41119: ST_TO_ADDR
// if missile < 2 then
41120: LD_VAR 0 14
41124: PUSH
41125: LD_INT 2
41127: LESS
41128: IFFALSE 41132
// exit ;
41130: GO 41354
// x := GetX ( enemy ) ;
41132: LD_ADDR_VAR 0 4
41136: PUSH
41137: LD_VAR 0 10
41141: PPUSH
41142: CALL_OW 250
41146: ST_TO_ADDR
// y := GetY ( enemy ) ;
41147: LD_ADDR_VAR 0 5
41151: PUSH
41152: LD_VAR 0 10
41156: PPUSH
41157: CALL_OW 251
41161: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41162: LD_ADDR_VAR 0 6
41166: PUSH
41167: LD_VAR 0 4
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PPUSH
41176: LD_INT 1
41178: PPUSH
41179: CALL_OW 12
41183: PLUS
41184: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41185: LD_ADDR_VAR 0 7
41189: PUSH
41190: LD_VAR 0 5
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PPUSH
41199: LD_INT 1
41201: PPUSH
41202: CALL_OW 12
41206: PLUS
41207: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41208: LD_VAR 0 6
41212: PPUSH
41213: LD_VAR 0 7
41217: PPUSH
41218: CALL_OW 488
41222: NOT
41223: IFFALSE 41245
// begin _x := x ;
41225: LD_ADDR_VAR 0 6
41229: PUSH
41230: LD_VAR 0 4
41234: ST_TO_ADDR
// _y := y ;
41235: LD_ADDR_VAR 0 7
41239: PUSH
41240: LD_VAR 0 5
41244: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41245: LD_ADDR_VAR 0 3
41249: PUSH
41250: LD_INT 1
41252: PPUSH
41253: LD_VAR 0 14
41257: PPUSH
41258: CALL_OW 12
41262: ST_TO_ADDR
// case i of 1 :
41263: LD_VAR 0 3
41267: PUSH
41268: LD_INT 1
41270: DOUBLE
41271: EQUAL
41272: IFTRUE 41276
41274: GO 41293
41276: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41277: LD_VAR 0 1
41281: PPUSH
41282: LD_VAR 0 10
41286: PPUSH
41287: CALL_OW 115
41291: GO 41354
41293: LD_INT 2
41295: DOUBLE
41296: EQUAL
41297: IFTRUE 41301
41299: GO 41323
41301: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41302: LD_VAR 0 1
41306: PPUSH
41307: LD_VAR 0 6
41311: PPUSH
41312: LD_VAR 0 7
41316: PPUSH
41317: CALL_OW 153
41321: GO 41354
41323: LD_INT 3
41325: DOUBLE
41326: EQUAL
41327: IFTRUE 41331
41329: GO 41353
41331: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41332: LD_VAR 0 1
41336: PPUSH
41337: LD_VAR 0 6
41341: PPUSH
41342: LD_VAR 0 7
41346: PPUSH
41347: CALL_OW 154
41351: GO 41354
41353: POP
// end ;
41354: LD_VAR 0 2
41358: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41359: LD_INT 0
41361: PPUSH
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
// if not unit or not building then
41367: LD_VAR 0 1
41371: NOT
41372: PUSH
41373: LD_VAR 0 2
41377: NOT
41378: OR
41379: IFFALSE 41383
// exit ;
41381: GO 41541
// x := GetX ( building ) ;
41383: LD_ADDR_VAR 0 5
41387: PUSH
41388: LD_VAR 0 2
41392: PPUSH
41393: CALL_OW 250
41397: ST_TO_ADDR
// y := GetY ( building ) ;
41398: LD_ADDR_VAR 0 6
41402: PUSH
41403: LD_VAR 0 2
41407: PPUSH
41408: CALL_OW 251
41412: ST_TO_ADDR
// for i = 0 to 5 do
41413: LD_ADDR_VAR 0 4
41417: PUSH
41418: DOUBLE
41419: LD_INT 0
41421: DEC
41422: ST_TO_ADDR
41423: LD_INT 5
41425: PUSH
41426: FOR_TO
41427: IFFALSE 41539
// begin _x := ShiftX ( x , i , 3 ) ;
41429: LD_ADDR_VAR 0 7
41433: PUSH
41434: LD_VAR 0 5
41438: PPUSH
41439: LD_VAR 0 4
41443: PPUSH
41444: LD_INT 3
41446: PPUSH
41447: CALL_OW 272
41451: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41452: LD_ADDR_VAR 0 8
41456: PUSH
41457: LD_VAR 0 6
41461: PPUSH
41462: LD_VAR 0 4
41466: PPUSH
41467: LD_INT 3
41469: PPUSH
41470: CALL_OW 273
41474: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41475: LD_VAR 0 7
41479: PPUSH
41480: LD_VAR 0 8
41484: PPUSH
41485: CALL_OW 488
41489: NOT
41490: IFFALSE 41494
// continue ;
41492: GO 41426
// if HexInfo ( _x , _y ) = 0 then
41494: LD_VAR 0 7
41498: PPUSH
41499: LD_VAR 0 8
41503: PPUSH
41504: CALL_OW 428
41508: PUSH
41509: LD_INT 0
41511: EQUAL
41512: IFFALSE 41537
// begin ComMoveXY ( unit , _x , _y ) ;
41514: LD_VAR 0 1
41518: PPUSH
41519: LD_VAR 0 7
41523: PPUSH
41524: LD_VAR 0 8
41528: PPUSH
41529: CALL_OW 111
// exit ;
41533: POP
41534: POP
41535: GO 41541
// end ; end ;
41537: GO 41426
41539: POP
41540: POP
// end ;
41541: LD_VAR 0 3
41545: RET
// export function ScanBase ( side , base_area ) ; begin
41546: LD_INT 0
41548: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41549: LD_ADDR_VAR 0 3
41553: PUSH
41554: LD_VAR 0 2
41558: PPUSH
41559: LD_INT 81
41561: PUSH
41562: LD_VAR 0 1
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PPUSH
41571: CALL_OW 70
41575: ST_TO_ADDR
// end ;
41576: LD_VAR 0 3
41580: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41581: LD_INT 0
41583: PPUSH
41584: PPUSH
41585: PPUSH
41586: PPUSH
// result := false ;
41587: LD_ADDR_VAR 0 2
41591: PUSH
41592: LD_INT 0
41594: ST_TO_ADDR
// side := GetSide ( unit ) ;
41595: LD_ADDR_VAR 0 3
41599: PUSH
41600: LD_VAR 0 1
41604: PPUSH
41605: CALL_OW 255
41609: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41610: LD_ADDR_VAR 0 4
41614: PUSH
41615: LD_VAR 0 1
41619: PPUSH
41620: CALL_OW 248
41624: ST_TO_ADDR
// case nat of 1 :
41625: LD_VAR 0 4
41629: PUSH
41630: LD_INT 1
41632: DOUBLE
41633: EQUAL
41634: IFTRUE 41638
41636: GO 41649
41638: POP
// tech := tech_lassight ; 2 :
41639: LD_ADDR_VAR 0 5
41643: PUSH
41644: LD_INT 12
41646: ST_TO_ADDR
41647: GO 41688
41649: LD_INT 2
41651: DOUBLE
41652: EQUAL
41653: IFTRUE 41657
41655: GO 41668
41657: POP
// tech := tech_mortar ; 3 :
41658: LD_ADDR_VAR 0 5
41662: PUSH
41663: LD_INT 41
41665: ST_TO_ADDR
41666: GO 41688
41668: LD_INT 3
41670: DOUBLE
41671: EQUAL
41672: IFTRUE 41676
41674: GO 41687
41676: POP
// tech := tech_bazooka ; end ;
41677: LD_ADDR_VAR 0 5
41681: PUSH
41682: LD_INT 44
41684: ST_TO_ADDR
41685: GO 41688
41687: POP
// if Researched ( side , tech ) then
41688: LD_VAR 0 3
41692: PPUSH
41693: LD_VAR 0 5
41697: PPUSH
41698: CALL_OW 325
41702: IFFALSE 41729
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41704: LD_ADDR_VAR 0 2
41708: PUSH
41709: LD_INT 5
41711: PUSH
41712: LD_INT 8
41714: PUSH
41715: LD_INT 9
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: LIST
41722: PUSH
41723: LD_VAR 0 4
41727: ARRAY
41728: ST_TO_ADDR
// end ;
41729: LD_VAR 0 2
41733: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41734: LD_INT 0
41736: PPUSH
41737: PPUSH
41738: PPUSH
// if not mines then
41739: LD_VAR 0 2
41743: NOT
41744: IFFALSE 41748
// exit ;
41746: GO 41892
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41748: LD_ADDR_VAR 0 5
41752: PUSH
41753: LD_INT 81
41755: PUSH
41756: LD_VAR 0 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 3
41767: PUSH
41768: LD_INT 21
41770: PUSH
41771: LD_INT 3
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PPUSH
41786: CALL_OW 69
41790: ST_TO_ADDR
// for i in mines do
41791: LD_ADDR_VAR 0 4
41795: PUSH
41796: LD_VAR 0 2
41800: PUSH
41801: FOR_IN
41802: IFFALSE 41890
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41804: LD_VAR 0 4
41808: PUSH
41809: LD_INT 1
41811: ARRAY
41812: PPUSH
41813: LD_VAR 0 4
41817: PUSH
41818: LD_INT 2
41820: ARRAY
41821: PPUSH
41822: CALL_OW 458
41826: NOT
41827: IFFALSE 41831
// continue ;
41829: GO 41801
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41831: LD_VAR 0 4
41835: PUSH
41836: LD_INT 1
41838: ARRAY
41839: PPUSH
41840: LD_VAR 0 4
41844: PUSH
41845: LD_INT 2
41847: ARRAY
41848: PPUSH
41849: CALL_OW 428
41853: PUSH
41854: LD_VAR 0 5
41858: IN
41859: IFFALSE 41888
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41861: LD_VAR 0 4
41865: PUSH
41866: LD_INT 1
41868: ARRAY
41869: PPUSH
41870: LD_VAR 0 4
41874: PUSH
41875: LD_INT 2
41877: ARRAY
41878: PPUSH
41879: LD_VAR 0 1
41883: PPUSH
41884: CALL_OW 456
// end ;
41888: GO 41801
41890: POP
41891: POP
// end ;
41892: LD_VAR 0 3
41896: RET
// export function Count ( array ) ; var i ; begin
41897: LD_INT 0
41899: PPUSH
41900: PPUSH
// result := 0 ;
41901: LD_ADDR_VAR 0 2
41905: PUSH
41906: LD_INT 0
41908: ST_TO_ADDR
// for i in array do
41909: LD_ADDR_VAR 0 3
41913: PUSH
41914: LD_VAR 0 1
41918: PUSH
41919: FOR_IN
41920: IFFALSE 41944
// if i then
41922: LD_VAR 0 3
41926: IFFALSE 41942
// result := result + 1 ;
41928: LD_ADDR_VAR 0 2
41932: PUSH
41933: LD_VAR 0 2
41937: PUSH
41938: LD_INT 1
41940: PLUS
41941: ST_TO_ADDR
41942: GO 41919
41944: POP
41945: POP
// end ;
41946: LD_VAR 0 2
41950: RET
// export function IsEmpty ( building ) ; begin
41951: LD_INT 0
41953: PPUSH
// if not building then
41954: LD_VAR 0 1
41958: NOT
41959: IFFALSE 41963
// exit ;
41961: GO 42006
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41963: LD_ADDR_VAR 0 2
41967: PUSH
41968: LD_VAR 0 1
41972: PUSH
41973: LD_INT 22
41975: PUSH
41976: LD_VAR 0 1
41980: PPUSH
41981: CALL_OW 255
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 58
41992: PUSH
41993: EMPTY
41994: LIST
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PPUSH
42000: CALL_OW 69
42004: IN
42005: ST_TO_ADDR
// end ;
42006: LD_VAR 0 2
42010: RET
// export function IsNotFull ( building ) ; var places ; begin
42011: LD_INT 0
42013: PPUSH
42014: PPUSH
// if not building then
42015: LD_VAR 0 1
42019: NOT
42020: IFFALSE 42024
// exit ;
42022: GO 42195
// result := false ;
42024: LD_ADDR_VAR 0 2
42028: PUSH
42029: LD_INT 0
42031: ST_TO_ADDR
// places := 0 ;
42032: LD_ADDR_VAR 0 3
42036: PUSH
42037: LD_INT 0
42039: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42040: LD_VAR 0 1
42044: PPUSH
42045: CALL_OW 266
42049: PUSH
42050: LD_INT 0
42052: DOUBLE
42053: EQUAL
42054: IFTRUE 42112
42056: LD_INT 1
42058: DOUBLE
42059: EQUAL
42060: IFTRUE 42112
42062: LD_INT 6
42064: DOUBLE
42065: EQUAL
42066: IFTRUE 42112
42068: LD_INT 7
42070: DOUBLE
42071: EQUAL
42072: IFTRUE 42112
42074: LD_INT 8
42076: DOUBLE
42077: EQUAL
42078: IFTRUE 42112
42080: LD_INT 4
42082: DOUBLE
42083: EQUAL
42084: IFTRUE 42112
42086: LD_INT 5
42088: DOUBLE
42089: EQUAL
42090: IFTRUE 42112
42092: LD_INT 2
42094: DOUBLE
42095: EQUAL
42096: IFTRUE 42112
42098: LD_INT 3
42100: DOUBLE
42101: EQUAL
42102: IFTRUE 42112
42104: LD_INT 35
42106: DOUBLE
42107: EQUAL
42108: IFTRUE 42112
42110: GO 42123
42112: POP
// places := 6 ; b_bunker , b_breastwork :
42113: LD_ADDR_VAR 0 3
42117: PUSH
42118: LD_INT 6
42120: ST_TO_ADDR
42121: GO 42168
42123: LD_INT 32
42125: DOUBLE
42126: EQUAL
42127: IFTRUE 42137
42129: LD_INT 31
42131: DOUBLE
42132: EQUAL
42133: IFTRUE 42137
42135: GO 42148
42137: POP
// places := 1 ; b_control_tower :
42138: LD_ADDR_VAR 0 3
42142: PUSH
42143: LD_INT 1
42145: ST_TO_ADDR
42146: GO 42168
42148: LD_INT 36
42150: DOUBLE
42151: EQUAL
42152: IFTRUE 42156
42154: GO 42167
42156: POP
// places := 3 ; end ;
42157: LD_ADDR_VAR 0 3
42161: PUSH
42162: LD_INT 3
42164: ST_TO_ADDR
42165: GO 42168
42167: POP
// if places then
42168: LD_VAR 0 3
42172: IFFALSE 42195
// result := UnitsInside ( building ) < places ;
42174: LD_ADDR_VAR 0 2
42178: PUSH
42179: LD_VAR 0 1
42183: PPUSH
42184: CALL_OW 313
42188: PUSH
42189: LD_VAR 0 3
42193: LESS
42194: ST_TO_ADDR
// end ;
42195: LD_VAR 0 2
42199: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42200: LD_INT 0
42202: PPUSH
42203: PPUSH
42204: PPUSH
42205: PPUSH
// tmp := [ ] ;
42206: LD_ADDR_VAR 0 3
42210: PUSH
42211: EMPTY
42212: ST_TO_ADDR
// list := [ ] ;
42213: LD_ADDR_VAR 0 5
42217: PUSH
42218: EMPTY
42219: ST_TO_ADDR
// for i = 16 to 25 do
42220: LD_ADDR_VAR 0 4
42224: PUSH
42225: DOUBLE
42226: LD_INT 16
42228: DEC
42229: ST_TO_ADDR
42230: LD_INT 25
42232: PUSH
42233: FOR_TO
42234: IFFALSE 42307
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42236: LD_ADDR_VAR 0 3
42240: PUSH
42241: LD_VAR 0 3
42245: PUSH
42246: LD_INT 22
42248: PUSH
42249: LD_VAR 0 1
42253: PPUSH
42254: CALL_OW 255
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 91
42265: PUSH
42266: LD_VAR 0 1
42270: PUSH
42271: LD_INT 6
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 30
42281: PUSH
42282: LD_VAR 0 4
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: LIST
42295: PUSH
42296: EMPTY
42297: LIST
42298: PPUSH
42299: CALL_OW 69
42303: ADD
42304: ST_TO_ADDR
42305: GO 42233
42307: POP
42308: POP
// for i = 1 to tmp do
42309: LD_ADDR_VAR 0 4
42313: PUSH
42314: DOUBLE
42315: LD_INT 1
42317: DEC
42318: ST_TO_ADDR
42319: LD_VAR 0 3
42323: PUSH
42324: FOR_TO
42325: IFFALSE 42413
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42327: LD_ADDR_VAR 0 5
42331: PUSH
42332: LD_VAR 0 5
42336: PUSH
42337: LD_VAR 0 3
42341: PUSH
42342: LD_VAR 0 4
42346: ARRAY
42347: PPUSH
42348: CALL_OW 266
42352: PUSH
42353: LD_VAR 0 3
42357: PUSH
42358: LD_VAR 0 4
42362: ARRAY
42363: PPUSH
42364: CALL_OW 250
42368: PUSH
42369: LD_VAR 0 3
42373: PUSH
42374: LD_VAR 0 4
42378: ARRAY
42379: PPUSH
42380: CALL_OW 251
42384: PUSH
42385: LD_VAR 0 3
42389: PUSH
42390: LD_VAR 0 4
42394: ARRAY
42395: PPUSH
42396: CALL_OW 254
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: PUSH
42407: EMPTY
42408: LIST
42409: ADD
42410: ST_TO_ADDR
42411: GO 42324
42413: POP
42414: POP
// result := list ;
42415: LD_ADDR_VAR 0 2
42419: PUSH
42420: LD_VAR 0 5
42424: ST_TO_ADDR
// end ;
42425: LD_VAR 0 2
42429: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42430: LD_INT 0
42432: PPUSH
42433: PPUSH
42434: PPUSH
42435: PPUSH
42436: PPUSH
42437: PPUSH
42438: PPUSH
// if not factory then
42439: LD_VAR 0 1
42443: NOT
42444: IFFALSE 42448
// exit ;
42446: GO 43041
// if control = control_apeman then
42448: LD_VAR 0 4
42452: PUSH
42453: LD_INT 5
42455: EQUAL
42456: IFFALSE 42565
// begin tmp := UnitsInside ( factory ) ;
42458: LD_ADDR_VAR 0 8
42462: PUSH
42463: LD_VAR 0 1
42467: PPUSH
42468: CALL_OW 313
42472: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42473: LD_VAR 0 8
42477: PPUSH
42478: LD_INT 25
42480: PUSH
42481: LD_INT 12
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PPUSH
42488: CALL_OW 72
42492: NOT
42493: IFFALSE 42503
// control := control_manual ;
42495: LD_ADDR_VAR 0 4
42499: PUSH
42500: LD_INT 1
42502: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42503: LD_ADDR_VAR 0 8
42507: PUSH
42508: LD_VAR 0 1
42512: PPUSH
42513: CALL 42200 0 1
42517: ST_TO_ADDR
// if tmp then
42518: LD_VAR 0 8
42522: IFFALSE 42565
// begin for i in tmp do
42524: LD_ADDR_VAR 0 7
42528: PUSH
42529: LD_VAR 0 8
42533: PUSH
42534: FOR_IN
42535: IFFALSE 42563
// if i [ 1 ] = b_ext_radio then
42537: LD_VAR 0 7
42541: PUSH
42542: LD_INT 1
42544: ARRAY
42545: PUSH
42546: LD_INT 22
42548: EQUAL
42549: IFFALSE 42561
// begin control := control_remote ;
42551: LD_ADDR_VAR 0 4
42555: PUSH
42556: LD_INT 2
42558: ST_TO_ADDR
// break ;
42559: GO 42563
// end ;
42561: GO 42534
42563: POP
42564: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42565: LD_VAR 0 1
42569: PPUSH
42570: LD_VAR 0 2
42574: PPUSH
42575: LD_VAR 0 3
42579: PPUSH
42580: LD_VAR 0 4
42584: PPUSH
42585: LD_VAR 0 5
42589: PPUSH
42590: CALL_OW 448
42594: IFFALSE 42629
// begin result := [ chassis , engine , control , weapon ] ;
42596: LD_ADDR_VAR 0 6
42600: PUSH
42601: LD_VAR 0 2
42605: PUSH
42606: LD_VAR 0 3
42610: PUSH
42611: LD_VAR 0 4
42615: PUSH
42616: LD_VAR 0 5
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: ST_TO_ADDR
// exit ;
42627: GO 43041
// end ; _chassis := AvailableChassisList ( factory ) ;
42629: LD_ADDR_VAR 0 9
42633: PUSH
42634: LD_VAR 0 1
42638: PPUSH
42639: CALL_OW 475
42643: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42644: LD_ADDR_VAR 0 11
42648: PUSH
42649: LD_VAR 0 1
42653: PPUSH
42654: CALL_OW 476
42658: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42659: LD_ADDR_VAR 0 12
42663: PUSH
42664: LD_VAR 0 1
42668: PPUSH
42669: CALL_OW 477
42673: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42674: LD_ADDR_VAR 0 10
42678: PUSH
42679: LD_VAR 0 1
42683: PPUSH
42684: CALL_OW 478
42688: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42689: LD_VAR 0 9
42693: NOT
42694: PUSH
42695: LD_VAR 0 11
42699: NOT
42700: OR
42701: PUSH
42702: LD_VAR 0 12
42706: NOT
42707: OR
42708: PUSH
42709: LD_VAR 0 10
42713: NOT
42714: OR
42715: IFFALSE 42750
// begin result := [ chassis , engine , control , weapon ] ;
42717: LD_ADDR_VAR 0 6
42721: PUSH
42722: LD_VAR 0 2
42726: PUSH
42727: LD_VAR 0 3
42731: PUSH
42732: LD_VAR 0 4
42736: PUSH
42737: LD_VAR 0 5
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: ST_TO_ADDR
// exit ;
42748: GO 43041
// end ; if not chassis in _chassis then
42750: LD_VAR 0 2
42754: PUSH
42755: LD_VAR 0 9
42759: IN
42760: NOT
42761: IFFALSE 42787
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42763: LD_ADDR_VAR 0 2
42767: PUSH
42768: LD_VAR 0 9
42772: PUSH
42773: LD_INT 1
42775: PPUSH
42776: LD_VAR 0 9
42780: PPUSH
42781: CALL_OW 12
42785: ARRAY
42786: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42787: LD_VAR 0 2
42791: PPUSH
42792: LD_VAR 0 3
42796: PPUSH
42797: CALL 43046 0 2
42801: NOT
42802: IFFALSE 42861
// repeat engine := _engine [ 1 ] ;
42804: LD_ADDR_VAR 0 3
42808: PUSH
42809: LD_VAR 0 11
42813: PUSH
42814: LD_INT 1
42816: ARRAY
42817: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42818: LD_ADDR_VAR 0 11
42822: PUSH
42823: LD_VAR 0 11
42827: PPUSH
42828: LD_INT 1
42830: PPUSH
42831: CALL_OW 3
42835: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42836: LD_VAR 0 2
42840: PPUSH
42841: LD_VAR 0 3
42845: PPUSH
42846: CALL 43046 0 2
42850: PUSH
42851: LD_VAR 0 11
42855: PUSH
42856: EMPTY
42857: EQUAL
42858: OR
42859: IFFALSE 42804
// if not control in _control then
42861: LD_VAR 0 4
42865: PUSH
42866: LD_VAR 0 12
42870: IN
42871: NOT
42872: IFFALSE 42898
// control := _control [ rand ( 1 , _control ) ] ;
42874: LD_ADDR_VAR 0 4
42878: PUSH
42879: LD_VAR 0 12
42883: PUSH
42884: LD_INT 1
42886: PPUSH
42887: LD_VAR 0 12
42891: PPUSH
42892: CALL_OW 12
42896: ARRAY
42897: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42898: LD_VAR 0 2
42902: PPUSH
42903: LD_VAR 0 5
42907: PPUSH
42908: CALL 43266 0 2
42912: NOT
42913: IFFALSE 42972
// repeat weapon := _weapon [ 1 ] ;
42915: LD_ADDR_VAR 0 5
42919: PUSH
42920: LD_VAR 0 10
42924: PUSH
42925: LD_INT 1
42927: ARRAY
42928: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42929: LD_ADDR_VAR 0 10
42933: PUSH
42934: LD_VAR 0 10
42938: PPUSH
42939: LD_INT 1
42941: PPUSH
42942: CALL_OW 3
42946: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42947: LD_VAR 0 2
42951: PPUSH
42952: LD_VAR 0 5
42956: PPUSH
42957: CALL 43266 0 2
42961: PUSH
42962: LD_VAR 0 10
42966: PUSH
42967: EMPTY
42968: EQUAL
42969: OR
42970: IFFALSE 42915
// result := [ ] ;
42972: LD_ADDR_VAR 0 6
42976: PUSH
42977: EMPTY
42978: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42979: LD_VAR 0 1
42983: PPUSH
42984: LD_VAR 0 2
42988: PPUSH
42989: LD_VAR 0 3
42993: PPUSH
42994: LD_VAR 0 4
42998: PPUSH
42999: LD_VAR 0 5
43003: PPUSH
43004: CALL_OW 448
43008: IFFALSE 43041
// result := [ chassis , engine , control , weapon ] ;
43010: LD_ADDR_VAR 0 6
43014: PUSH
43015: LD_VAR 0 2
43019: PUSH
43020: LD_VAR 0 3
43024: PUSH
43025: LD_VAR 0 4
43029: PUSH
43030: LD_VAR 0 5
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: ST_TO_ADDR
// end ;
43041: LD_VAR 0 6
43045: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43046: LD_INT 0
43048: PPUSH
// if not chassis or not engine then
43049: LD_VAR 0 1
43053: NOT
43054: PUSH
43055: LD_VAR 0 2
43059: NOT
43060: OR
43061: IFFALSE 43065
// exit ;
43063: GO 43261
// case engine of engine_solar :
43065: LD_VAR 0 2
43069: PUSH
43070: LD_INT 2
43072: DOUBLE
43073: EQUAL
43074: IFTRUE 43078
43076: GO 43116
43078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43079: LD_ADDR_VAR 0 3
43083: PUSH
43084: LD_INT 11
43086: PUSH
43087: LD_INT 12
43089: PUSH
43090: LD_INT 13
43092: PUSH
43093: LD_INT 14
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: LD_INT 3
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: ST_TO_ADDR
43114: GO 43245
43116: LD_INT 1
43118: DOUBLE
43119: EQUAL
43120: IFTRUE 43124
43122: GO 43186
43124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: LD_INT 11
43132: PUSH
43133: LD_INT 12
43135: PUSH
43136: LD_INT 13
43138: PUSH
43139: LD_INT 14
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: LD_INT 3
43150: PUSH
43151: LD_INT 4
43153: PUSH
43154: LD_INT 5
43156: PUSH
43157: LD_INT 21
43159: PUSH
43160: LD_INT 23
43162: PUSH
43163: LD_INT 22
43165: PUSH
43166: LD_INT 24
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
43184: GO 43245
43186: LD_INT 3
43188: DOUBLE
43189: EQUAL
43190: IFTRUE 43194
43192: GO 43244
43194: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43195: LD_ADDR_VAR 0 3
43199: PUSH
43200: LD_INT 13
43202: PUSH
43203: LD_INT 14
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: LD_INT 4
43214: PUSH
43215: LD_INT 5
43217: PUSH
43218: LD_INT 21
43220: PUSH
43221: LD_INT 22
43223: PUSH
43224: LD_INT 23
43226: PUSH
43227: LD_INT 24
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: ST_TO_ADDR
43242: GO 43245
43244: POP
// result := ( chassis in result ) ;
43245: LD_ADDR_VAR 0 3
43249: PUSH
43250: LD_VAR 0 1
43254: PUSH
43255: LD_VAR 0 3
43259: IN
43260: ST_TO_ADDR
// end ;
43261: LD_VAR 0 3
43265: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43266: LD_INT 0
43268: PPUSH
// if not chassis or not weapon then
43269: LD_VAR 0 1
43273: NOT
43274: PUSH
43275: LD_VAR 0 2
43279: NOT
43280: OR
43281: IFFALSE 43285
// exit ;
43283: GO 44345
// case weapon of us_machine_gun :
43285: LD_VAR 0 2
43289: PUSH
43290: LD_INT 2
43292: DOUBLE
43293: EQUAL
43294: IFTRUE 43298
43296: GO 43328
43298: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43299: LD_ADDR_VAR 0 3
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: LD_INT 3
43312: PUSH
43313: LD_INT 4
43315: PUSH
43316: LD_INT 5
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: ST_TO_ADDR
43326: GO 44329
43328: LD_INT 3
43330: DOUBLE
43331: EQUAL
43332: IFTRUE 43336
43334: GO 43366
43336: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43337: LD_ADDR_VAR 0 3
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: LD_INT 3
43350: PUSH
43351: LD_INT 4
43353: PUSH
43354: LD_INT 5
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: ST_TO_ADDR
43364: GO 44329
43366: LD_INT 11
43368: DOUBLE
43369: EQUAL
43370: IFTRUE 43374
43372: GO 43404
43374: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: LD_INT 4
43391: PUSH
43392: LD_INT 5
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: ST_TO_ADDR
43402: GO 44329
43404: LD_INT 4
43406: DOUBLE
43407: EQUAL
43408: IFTRUE 43412
43410: GO 43438
43412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43413: LD_ADDR_VAR 0 3
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 3
43423: PUSH
43424: LD_INT 4
43426: PUSH
43427: LD_INT 5
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: ST_TO_ADDR
43436: GO 44329
43438: LD_INT 5
43440: DOUBLE
43441: EQUAL
43442: IFTRUE 43446
43444: GO 43472
43446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43447: LD_ADDR_VAR 0 3
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: LD_INT 3
43457: PUSH
43458: LD_INT 4
43460: PUSH
43461: LD_INT 5
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: ST_TO_ADDR
43470: GO 44329
43472: LD_INT 9
43474: DOUBLE
43475: EQUAL
43476: IFTRUE 43480
43478: GO 43506
43480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43481: LD_ADDR_VAR 0 3
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: LD_INT 3
43491: PUSH
43492: LD_INT 4
43494: PUSH
43495: LD_INT 5
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: ST_TO_ADDR
43504: GO 44329
43506: LD_INT 7
43508: DOUBLE
43509: EQUAL
43510: IFTRUE 43514
43512: GO 43540
43514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43515: LD_ADDR_VAR 0 3
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 3
43525: PUSH
43526: LD_INT 4
43528: PUSH
43529: LD_INT 5
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
43538: GO 44329
43540: LD_INT 12
43542: DOUBLE
43543: EQUAL
43544: IFTRUE 43548
43546: GO 43574
43548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43549: LD_ADDR_VAR 0 3
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 3
43559: PUSH
43560: LD_INT 4
43562: PUSH
43563: LD_INT 5
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: ST_TO_ADDR
43572: GO 44329
43574: LD_INT 13
43576: DOUBLE
43577: EQUAL
43578: IFTRUE 43582
43580: GO 43608
43582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43583: LD_ADDR_VAR 0 3
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: LD_INT 3
43593: PUSH
43594: LD_INT 4
43596: PUSH
43597: LD_INT 5
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: ST_TO_ADDR
43606: GO 44329
43608: LD_INT 14
43610: DOUBLE
43611: EQUAL
43612: IFTRUE 43616
43614: GO 43634
43616: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43617: LD_ADDR_VAR 0 3
43621: PUSH
43622: LD_INT 4
43624: PUSH
43625: LD_INT 5
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: ST_TO_ADDR
43632: GO 44329
43634: LD_INT 6
43636: DOUBLE
43637: EQUAL
43638: IFTRUE 43642
43640: GO 43660
43642: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43643: LD_ADDR_VAR 0 3
43647: PUSH
43648: LD_INT 4
43650: PUSH
43651: LD_INT 5
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: ST_TO_ADDR
43658: GO 44329
43660: LD_INT 10
43662: DOUBLE
43663: EQUAL
43664: IFTRUE 43668
43666: GO 43686
43668: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43669: LD_ADDR_VAR 0 3
43673: PUSH
43674: LD_INT 4
43676: PUSH
43677: LD_INT 5
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: ST_TO_ADDR
43684: GO 44329
43686: LD_INT 22
43688: DOUBLE
43689: EQUAL
43690: IFTRUE 43694
43692: GO 43720
43694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43695: LD_ADDR_VAR 0 3
43699: PUSH
43700: LD_INT 11
43702: PUSH
43703: LD_INT 12
43705: PUSH
43706: LD_INT 13
43708: PUSH
43709: LD_INT 14
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: ST_TO_ADDR
43718: GO 44329
43720: LD_INT 23
43722: DOUBLE
43723: EQUAL
43724: IFTRUE 43728
43726: GO 43754
43728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43729: LD_ADDR_VAR 0 3
43733: PUSH
43734: LD_INT 11
43736: PUSH
43737: LD_INT 12
43739: PUSH
43740: LD_INT 13
43742: PUSH
43743: LD_INT 14
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: ST_TO_ADDR
43752: GO 44329
43754: LD_INT 24
43756: DOUBLE
43757: EQUAL
43758: IFTRUE 43762
43760: GO 43788
43762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43763: LD_ADDR_VAR 0 3
43767: PUSH
43768: LD_INT 11
43770: PUSH
43771: LD_INT 12
43773: PUSH
43774: LD_INT 13
43776: PUSH
43777: LD_INT 14
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: ST_TO_ADDR
43786: GO 44329
43788: LD_INT 30
43790: DOUBLE
43791: EQUAL
43792: IFTRUE 43796
43794: GO 43822
43796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43797: LD_ADDR_VAR 0 3
43801: PUSH
43802: LD_INT 11
43804: PUSH
43805: LD_INT 12
43807: PUSH
43808: LD_INT 13
43810: PUSH
43811: LD_INT 14
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: ST_TO_ADDR
43820: GO 44329
43822: LD_INT 25
43824: DOUBLE
43825: EQUAL
43826: IFTRUE 43830
43828: GO 43848
43830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43831: LD_ADDR_VAR 0 3
43835: PUSH
43836: LD_INT 13
43838: PUSH
43839: LD_INT 14
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: ST_TO_ADDR
43846: GO 44329
43848: LD_INT 27
43850: DOUBLE
43851: EQUAL
43852: IFTRUE 43856
43854: GO 43874
43856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43857: LD_ADDR_VAR 0 3
43861: PUSH
43862: LD_INT 13
43864: PUSH
43865: LD_INT 14
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: ST_TO_ADDR
43872: GO 44329
43874: LD_INT 92
43876: DOUBLE
43877: EQUAL
43878: IFTRUE 43882
43880: GO 43908
43882: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43883: LD_ADDR_VAR 0 3
43887: PUSH
43888: LD_INT 11
43890: PUSH
43891: LD_INT 12
43893: PUSH
43894: LD_INT 13
43896: PUSH
43897: LD_INT 14
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: ST_TO_ADDR
43906: GO 44329
43908: LD_INT 28
43910: DOUBLE
43911: EQUAL
43912: IFTRUE 43916
43914: GO 43934
43916: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43917: LD_ADDR_VAR 0 3
43921: PUSH
43922: LD_INT 13
43924: PUSH
43925: LD_INT 14
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: ST_TO_ADDR
43932: GO 44329
43934: LD_INT 29
43936: DOUBLE
43937: EQUAL
43938: IFTRUE 43942
43940: GO 43960
43942: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43943: LD_ADDR_VAR 0 3
43947: PUSH
43948: LD_INT 13
43950: PUSH
43951: LD_INT 14
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: ST_TO_ADDR
43958: GO 44329
43960: LD_INT 31
43962: DOUBLE
43963: EQUAL
43964: IFTRUE 43968
43966: GO 43986
43968: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43969: LD_ADDR_VAR 0 3
43973: PUSH
43974: LD_INT 13
43976: PUSH
43977: LD_INT 14
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: ST_TO_ADDR
43984: GO 44329
43986: LD_INT 26
43988: DOUBLE
43989: EQUAL
43990: IFTRUE 43994
43992: GO 44012
43994: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43995: LD_ADDR_VAR 0 3
43999: PUSH
44000: LD_INT 13
44002: PUSH
44003: LD_INT 14
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: ST_TO_ADDR
44010: GO 44329
44012: LD_INT 42
44014: DOUBLE
44015: EQUAL
44016: IFTRUE 44020
44018: GO 44046
44020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44021: LD_ADDR_VAR 0 3
44025: PUSH
44026: LD_INT 21
44028: PUSH
44029: LD_INT 22
44031: PUSH
44032: LD_INT 23
44034: PUSH
44035: LD_INT 24
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
44044: GO 44329
44046: LD_INT 43
44048: DOUBLE
44049: EQUAL
44050: IFTRUE 44054
44052: GO 44080
44054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44055: LD_ADDR_VAR 0 3
44059: PUSH
44060: LD_INT 21
44062: PUSH
44063: LD_INT 22
44065: PUSH
44066: LD_INT 23
44068: PUSH
44069: LD_INT 24
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: ST_TO_ADDR
44078: GO 44329
44080: LD_INT 44
44082: DOUBLE
44083: EQUAL
44084: IFTRUE 44088
44086: GO 44114
44088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44089: LD_ADDR_VAR 0 3
44093: PUSH
44094: LD_INT 21
44096: PUSH
44097: LD_INT 22
44099: PUSH
44100: LD_INT 23
44102: PUSH
44103: LD_INT 24
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: ST_TO_ADDR
44112: GO 44329
44114: LD_INT 45
44116: DOUBLE
44117: EQUAL
44118: IFTRUE 44122
44120: GO 44148
44122: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44123: LD_ADDR_VAR 0 3
44127: PUSH
44128: LD_INT 21
44130: PUSH
44131: LD_INT 22
44133: PUSH
44134: LD_INT 23
44136: PUSH
44137: LD_INT 24
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: ST_TO_ADDR
44146: GO 44329
44148: LD_INT 49
44150: DOUBLE
44151: EQUAL
44152: IFTRUE 44156
44154: GO 44182
44156: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44157: LD_ADDR_VAR 0 3
44161: PUSH
44162: LD_INT 21
44164: PUSH
44165: LD_INT 22
44167: PUSH
44168: LD_INT 23
44170: PUSH
44171: LD_INT 24
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: ST_TO_ADDR
44180: GO 44329
44182: LD_INT 51
44184: DOUBLE
44185: EQUAL
44186: IFTRUE 44190
44188: GO 44216
44190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44191: LD_ADDR_VAR 0 3
44195: PUSH
44196: LD_INT 21
44198: PUSH
44199: LD_INT 22
44201: PUSH
44202: LD_INT 23
44204: PUSH
44205: LD_INT 24
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: ST_TO_ADDR
44214: GO 44329
44216: LD_INT 52
44218: DOUBLE
44219: EQUAL
44220: IFTRUE 44224
44222: GO 44250
44224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44225: LD_ADDR_VAR 0 3
44229: PUSH
44230: LD_INT 21
44232: PUSH
44233: LD_INT 22
44235: PUSH
44236: LD_INT 23
44238: PUSH
44239: LD_INT 24
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: ST_TO_ADDR
44248: GO 44329
44250: LD_INT 53
44252: DOUBLE
44253: EQUAL
44254: IFTRUE 44258
44256: GO 44276
44258: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44259: LD_ADDR_VAR 0 3
44263: PUSH
44264: LD_INT 23
44266: PUSH
44267: LD_INT 24
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: ST_TO_ADDR
44274: GO 44329
44276: LD_INT 46
44278: DOUBLE
44279: EQUAL
44280: IFTRUE 44284
44282: GO 44302
44284: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44285: LD_ADDR_VAR 0 3
44289: PUSH
44290: LD_INT 23
44292: PUSH
44293: LD_INT 24
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: ST_TO_ADDR
44300: GO 44329
44302: LD_INT 47
44304: DOUBLE
44305: EQUAL
44306: IFTRUE 44310
44308: GO 44328
44310: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44311: LD_ADDR_VAR 0 3
44315: PUSH
44316: LD_INT 23
44318: PUSH
44319: LD_INT 24
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: ST_TO_ADDR
44326: GO 44329
44328: POP
// result := ( chassis in result ) ;
44329: LD_ADDR_VAR 0 3
44333: PUSH
44334: LD_VAR 0 1
44338: PUSH
44339: LD_VAR 0 3
44343: IN
44344: ST_TO_ADDR
// end ;
44345: LD_VAR 0 3
44349: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44350: LD_INT 0
44352: PPUSH
44353: PPUSH
44354: PPUSH
44355: PPUSH
44356: PPUSH
44357: PPUSH
44358: PPUSH
// result := array ;
44359: LD_ADDR_VAR 0 5
44363: PUSH
44364: LD_VAR 0 1
44368: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44369: LD_VAR 0 1
44373: NOT
44374: PUSH
44375: LD_VAR 0 2
44379: NOT
44380: OR
44381: PUSH
44382: LD_VAR 0 3
44386: NOT
44387: OR
44388: PUSH
44389: LD_VAR 0 2
44393: PUSH
44394: LD_VAR 0 1
44398: GREATER
44399: OR
44400: PUSH
44401: LD_VAR 0 3
44405: PUSH
44406: LD_VAR 0 1
44410: GREATER
44411: OR
44412: IFFALSE 44416
// exit ;
44414: GO 44712
// if direction then
44416: LD_VAR 0 4
44420: IFFALSE 44484
// begin d := 1 ;
44422: LD_ADDR_VAR 0 9
44426: PUSH
44427: LD_INT 1
44429: ST_TO_ADDR
// if i_from > i_to then
44430: LD_VAR 0 2
44434: PUSH
44435: LD_VAR 0 3
44439: GREATER
44440: IFFALSE 44466
// length := ( array - i_from ) + i_to else
44442: LD_ADDR_VAR 0 11
44446: PUSH
44447: LD_VAR 0 1
44451: PUSH
44452: LD_VAR 0 2
44456: MINUS
44457: PUSH
44458: LD_VAR 0 3
44462: PLUS
44463: ST_TO_ADDR
44464: GO 44482
// length := i_to - i_from ;
44466: LD_ADDR_VAR 0 11
44470: PUSH
44471: LD_VAR 0 3
44475: PUSH
44476: LD_VAR 0 2
44480: MINUS
44481: ST_TO_ADDR
// end else
44482: GO 44545
// begin d := - 1 ;
44484: LD_ADDR_VAR 0 9
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: ST_TO_ADDR
// if i_from > i_to then
44493: LD_VAR 0 2
44497: PUSH
44498: LD_VAR 0 3
44502: GREATER
44503: IFFALSE 44523
// length := i_from - i_to else
44505: LD_ADDR_VAR 0 11
44509: PUSH
44510: LD_VAR 0 2
44514: PUSH
44515: LD_VAR 0 3
44519: MINUS
44520: ST_TO_ADDR
44521: GO 44545
// length := ( array - i_to ) + i_from ;
44523: LD_ADDR_VAR 0 11
44527: PUSH
44528: LD_VAR 0 1
44532: PUSH
44533: LD_VAR 0 3
44537: MINUS
44538: PUSH
44539: LD_VAR 0 2
44543: PLUS
44544: ST_TO_ADDR
// end ; if not length then
44545: LD_VAR 0 11
44549: NOT
44550: IFFALSE 44554
// exit ;
44552: GO 44712
// tmp := array ;
44554: LD_ADDR_VAR 0 10
44558: PUSH
44559: LD_VAR 0 1
44563: ST_TO_ADDR
// for i = 1 to length do
44564: LD_ADDR_VAR 0 6
44568: PUSH
44569: DOUBLE
44570: LD_INT 1
44572: DEC
44573: ST_TO_ADDR
44574: LD_VAR 0 11
44578: PUSH
44579: FOR_TO
44580: IFFALSE 44700
// begin for j = 1 to array do
44582: LD_ADDR_VAR 0 7
44586: PUSH
44587: DOUBLE
44588: LD_INT 1
44590: DEC
44591: ST_TO_ADDR
44592: LD_VAR 0 1
44596: PUSH
44597: FOR_TO
44598: IFFALSE 44686
// begin k := j + d ;
44600: LD_ADDR_VAR 0 8
44604: PUSH
44605: LD_VAR 0 7
44609: PUSH
44610: LD_VAR 0 9
44614: PLUS
44615: ST_TO_ADDR
// if k > array then
44616: LD_VAR 0 8
44620: PUSH
44621: LD_VAR 0 1
44625: GREATER
44626: IFFALSE 44636
// k := 1 ;
44628: LD_ADDR_VAR 0 8
44632: PUSH
44633: LD_INT 1
44635: ST_TO_ADDR
// if not k then
44636: LD_VAR 0 8
44640: NOT
44641: IFFALSE 44653
// k := array ;
44643: LD_ADDR_VAR 0 8
44647: PUSH
44648: LD_VAR 0 1
44652: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44653: LD_ADDR_VAR 0 10
44657: PUSH
44658: LD_VAR 0 10
44662: PPUSH
44663: LD_VAR 0 8
44667: PPUSH
44668: LD_VAR 0 1
44672: PUSH
44673: LD_VAR 0 7
44677: ARRAY
44678: PPUSH
44679: CALL_OW 1
44683: ST_TO_ADDR
// end ;
44684: GO 44597
44686: POP
44687: POP
// array := tmp ;
44688: LD_ADDR_VAR 0 1
44692: PUSH
44693: LD_VAR 0 10
44697: ST_TO_ADDR
// end ;
44698: GO 44579
44700: POP
44701: POP
// result := array ;
44702: LD_ADDR_VAR 0 5
44706: PUSH
44707: LD_VAR 0 1
44711: ST_TO_ADDR
// end ;
44712: LD_VAR 0 5
44716: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44717: LD_INT 0
44719: PPUSH
44720: PPUSH
// result := 0 ;
44721: LD_ADDR_VAR 0 3
44725: PUSH
44726: LD_INT 0
44728: ST_TO_ADDR
// if not array or not value in array then
44729: LD_VAR 0 1
44733: NOT
44734: PUSH
44735: LD_VAR 0 2
44739: PUSH
44740: LD_VAR 0 1
44744: IN
44745: NOT
44746: OR
44747: IFFALSE 44751
// exit ;
44749: GO 44805
// for i = 1 to array do
44751: LD_ADDR_VAR 0 4
44755: PUSH
44756: DOUBLE
44757: LD_INT 1
44759: DEC
44760: ST_TO_ADDR
44761: LD_VAR 0 1
44765: PUSH
44766: FOR_TO
44767: IFFALSE 44803
// if value = array [ i ] then
44769: LD_VAR 0 2
44773: PUSH
44774: LD_VAR 0 1
44778: PUSH
44779: LD_VAR 0 4
44783: ARRAY
44784: EQUAL
44785: IFFALSE 44801
// begin result := i ;
44787: LD_ADDR_VAR 0 3
44791: PUSH
44792: LD_VAR 0 4
44796: ST_TO_ADDR
// exit ;
44797: POP
44798: POP
44799: GO 44805
// end ;
44801: GO 44766
44803: POP
44804: POP
// end ;
44805: LD_VAR 0 3
44809: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44810: LD_INT 0
44812: PPUSH
// vc_chassis := chassis ;
44813: LD_ADDR_OWVAR 37
44817: PUSH
44818: LD_VAR 0 1
44822: ST_TO_ADDR
// vc_engine := engine ;
44823: LD_ADDR_OWVAR 39
44827: PUSH
44828: LD_VAR 0 2
44832: ST_TO_ADDR
// vc_control := control ;
44833: LD_ADDR_OWVAR 38
44837: PUSH
44838: LD_VAR 0 3
44842: ST_TO_ADDR
// vc_weapon := weapon ;
44843: LD_ADDR_OWVAR 40
44847: PUSH
44848: LD_VAR 0 4
44852: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44853: LD_ADDR_OWVAR 41
44857: PUSH
44858: LD_VAR 0 5
44862: ST_TO_ADDR
// end ;
44863: LD_VAR 0 6
44867: RET
// export function WantPlant ( unit ) ; var task ; begin
44868: LD_INT 0
44870: PPUSH
44871: PPUSH
// result := false ;
44872: LD_ADDR_VAR 0 2
44876: PUSH
44877: LD_INT 0
44879: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44880: LD_ADDR_VAR 0 3
44884: PUSH
44885: LD_VAR 0 1
44889: PPUSH
44890: CALL_OW 437
44894: ST_TO_ADDR
// if task then
44895: LD_VAR 0 3
44899: IFFALSE 44927
// if task [ 1 ] [ 1 ] = p then
44901: LD_VAR 0 3
44905: PUSH
44906: LD_INT 1
44908: ARRAY
44909: PUSH
44910: LD_INT 1
44912: ARRAY
44913: PUSH
44914: LD_STRING p
44916: EQUAL
44917: IFFALSE 44927
// result := true ;
44919: LD_ADDR_VAR 0 2
44923: PUSH
44924: LD_INT 1
44926: ST_TO_ADDR
// end ;
44927: LD_VAR 0 2
44931: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44932: LD_INT 0
44934: PPUSH
44935: PPUSH
44936: PPUSH
44937: PPUSH
// if pos < 1 then
44938: LD_VAR 0 2
44942: PUSH
44943: LD_INT 1
44945: LESS
44946: IFFALSE 44950
// exit ;
44948: GO 45253
// if pos = 1 then
44950: LD_VAR 0 2
44954: PUSH
44955: LD_INT 1
44957: EQUAL
44958: IFFALSE 44991
// result := Replace ( arr , pos [ 1 ] , value ) else
44960: LD_ADDR_VAR 0 4
44964: PUSH
44965: LD_VAR 0 1
44969: PPUSH
44970: LD_VAR 0 2
44974: PUSH
44975: LD_INT 1
44977: ARRAY
44978: PPUSH
44979: LD_VAR 0 3
44983: PPUSH
44984: CALL_OW 1
44988: ST_TO_ADDR
44989: GO 45253
// begin tmp := arr ;
44991: LD_ADDR_VAR 0 6
44995: PUSH
44996: LD_VAR 0 1
45000: ST_TO_ADDR
// s_arr := [ tmp ] ;
45001: LD_ADDR_VAR 0 7
45005: PUSH
45006: LD_VAR 0 6
45010: PUSH
45011: EMPTY
45012: LIST
45013: ST_TO_ADDR
// for i = 1 to pos - 1 do
45014: LD_ADDR_VAR 0 5
45018: PUSH
45019: DOUBLE
45020: LD_INT 1
45022: DEC
45023: ST_TO_ADDR
45024: LD_VAR 0 2
45028: PUSH
45029: LD_INT 1
45031: MINUS
45032: PUSH
45033: FOR_TO
45034: IFFALSE 45079
// begin tmp := tmp [ pos [ i ] ] ;
45036: LD_ADDR_VAR 0 6
45040: PUSH
45041: LD_VAR 0 6
45045: PUSH
45046: LD_VAR 0 2
45050: PUSH
45051: LD_VAR 0 5
45055: ARRAY
45056: ARRAY
45057: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45058: LD_ADDR_VAR 0 7
45062: PUSH
45063: LD_VAR 0 7
45067: PUSH
45068: LD_VAR 0 6
45072: PUSH
45073: EMPTY
45074: LIST
45075: ADD
45076: ST_TO_ADDR
// end ;
45077: GO 45033
45079: POP
45080: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45081: LD_ADDR_VAR 0 6
45085: PUSH
45086: LD_VAR 0 6
45090: PPUSH
45091: LD_VAR 0 2
45095: PUSH
45096: LD_VAR 0 2
45100: ARRAY
45101: PPUSH
45102: LD_VAR 0 3
45106: PPUSH
45107: CALL_OW 1
45111: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45112: LD_ADDR_VAR 0 7
45116: PUSH
45117: LD_VAR 0 7
45121: PPUSH
45122: LD_VAR 0 7
45126: PPUSH
45127: LD_VAR 0 6
45131: PPUSH
45132: CALL_OW 1
45136: ST_TO_ADDR
// for i = s_arr downto 2 do
45137: LD_ADDR_VAR 0 5
45141: PUSH
45142: DOUBLE
45143: LD_VAR 0 7
45147: INC
45148: ST_TO_ADDR
45149: LD_INT 2
45151: PUSH
45152: FOR_DOWNTO
45153: IFFALSE 45237
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45155: LD_ADDR_VAR 0 6
45159: PUSH
45160: LD_VAR 0 7
45164: PUSH
45165: LD_VAR 0 5
45169: PUSH
45170: LD_INT 1
45172: MINUS
45173: ARRAY
45174: PPUSH
45175: LD_VAR 0 2
45179: PUSH
45180: LD_VAR 0 5
45184: PUSH
45185: LD_INT 1
45187: MINUS
45188: ARRAY
45189: PPUSH
45190: LD_VAR 0 7
45194: PUSH
45195: LD_VAR 0 5
45199: ARRAY
45200: PPUSH
45201: CALL_OW 1
45205: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45206: LD_ADDR_VAR 0 7
45210: PUSH
45211: LD_VAR 0 7
45215: PPUSH
45216: LD_VAR 0 5
45220: PUSH
45221: LD_INT 1
45223: MINUS
45224: PPUSH
45225: LD_VAR 0 6
45229: PPUSH
45230: CALL_OW 1
45234: ST_TO_ADDR
// end ;
45235: GO 45152
45237: POP
45238: POP
// result := s_arr [ 1 ] ;
45239: LD_ADDR_VAR 0 4
45243: PUSH
45244: LD_VAR 0 7
45248: PUSH
45249: LD_INT 1
45251: ARRAY
45252: ST_TO_ADDR
// end ; end ;
45253: LD_VAR 0 4
45257: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45258: LD_INT 0
45260: PPUSH
45261: PPUSH
// if not list then
45262: LD_VAR 0 1
45266: NOT
45267: IFFALSE 45271
// exit ;
45269: GO 45362
// i := list [ pos1 ] ;
45271: LD_ADDR_VAR 0 5
45275: PUSH
45276: LD_VAR 0 1
45280: PUSH
45281: LD_VAR 0 2
45285: ARRAY
45286: ST_TO_ADDR
// if not i then
45287: LD_VAR 0 5
45291: NOT
45292: IFFALSE 45296
// exit ;
45294: GO 45362
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45296: LD_ADDR_VAR 0 1
45300: PUSH
45301: LD_VAR 0 1
45305: PPUSH
45306: LD_VAR 0 2
45310: PPUSH
45311: LD_VAR 0 1
45315: PUSH
45316: LD_VAR 0 3
45320: ARRAY
45321: PPUSH
45322: CALL_OW 1
45326: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45327: LD_ADDR_VAR 0 1
45331: PUSH
45332: LD_VAR 0 1
45336: PPUSH
45337: LD_VAR 0 3
45341: PPUSH
45342: LD_VAR 0 5
45346: PPUSH
45347: CALL_OW 1
45351: ST_TO_ADDR
// result := list ;
45352: LD_ADDR_VAR 0 4
45356: PUSH
45357: LD_VAR 0 1
45361: ST_TO_ADDR
// end ;
45362: LD_VAR 0 4
45366: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45367: LD_INT 0
45369: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45370: LD_ADDR_VAR 0 5
45374: PUSH
45375: LD_VAR 0 1
45379: PPUSH
45380: CALL_OW 250
45384: PPUSH
45385: LD_VAR 0 1
45389: PPUSH
45390: CALL_OW 251
45394: PPUSH
45395: LD_VAR 0 2
45399: PPUSH
45400: LD_VAR 0 3
45404: PPUSH
45405: LD_VAR 0 4
45409: PPUSH
45410: CALL 45420 0 5
45414: ST_TO_ADDR
// end ;
45415: LD_VAR 0 5
45419: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45420: LD_INT 0
45422: PPUSH
45423: PPUSH
45424: PPUSH
45425: PPUSH
// if not list then
45426: LD_VAR 0 3
45430: NOT
45431: IFFALSE 45435
// exit ;
45433: GO 45823
// result := [ ] ;
45435: LD_ADDR_VAR 0 6
45439: PUSH
45440: EMPTY
45441: ST_TO_ADDR
// for i in list do
45442: LD_ADDR_VAR 0 7
45446: PUSH
45447: LD_VAR 0 3
45451: PUSH
45452: FOR_IN
45453: IFFALSE 45655
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45455: LD_ADDR_VAR 0 9
45459: PUSH
45460: LD_VAR 0 7
45464: PPUSH
45465: LD_VAR 0 1
45469: PPUSH
45470: LD_VAR 0 2
45474: PPUSH
45475: CALL_OW 297
45479: ST_TO_ADDR
// if not result then
45480: LD_VAR 0 6
45484: NOT
45485: IFFALSE 45511
// result := [ [ i , tmp ] ] else
45487: LD_ADDR_VAR 0 6
45491: PUSH
45492: LD_VAR 0 7
45496: PUSH
45497: LD_VAR 0 9
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: EMPTY
45507: LIST
45508: ST_TO_ADDR
45509: GO 45653
// begin if result [ result ] [ 2 ] < tmp then
45511: LD_VAR 0 6
45515: PUSH
45516: LD_VAR 0 6
45520: ARRAY
45521: PUSH
45522: LD_INT 2
45524: ARRAY
45525: PUSH
45526: LD_VAR 0 9
45530: LESS
45531: IFFALSE 45573
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45533: LD_ADDR_VAR 0 6
45537: PUSH
45538: LD_VAR 0 6
45542: PPUSH
45543: LD_VAR 0 6
45547: PUSH
45548: LD_INT 1
45550: PLUS
45551: PPUSH
45552: LD_VAR 0 7
45556: PUSH
45557: LD_VAR 0 9
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PPUSH
45566: CALL_OW 2
45570: ST_TO_ADDR
45571: GO 45653
// for j = 1 to result do
45573: LD_ADDR_VAR 0 8
45577: PUSH
45578: DOUBLE
45579: LD_INT 1
45581: DEC
45582: ST_TO_ADDR
45583: LD_VAR 0 6
45587: PUSH
45588: FOR_TO
45589: IFFALSE 45651
// begin if tmp < result [ j ] [ 2 ] then
45591: LD_VAR 0 9
45595: PUSH
45596: LD_VAR 0 6
45600: PUSH
45601: LD_VAR 0 8
45605: ARRAY
45606: PUSH
45607: LD_INT 2
45609: ARRAY
45610: LESS
45611: IFFALSE 45649
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45613: LD_ADDR_VAR 0 6
45617: PUSH
45618: LD_VAR 0 6
45622: PPUSH
45623: LD_VAR 0 8
45627: PPUSH
45628: LD_VAR 0 7
45632: PUSH
45633: LD_VAR 0 9
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PPUSH
45642: CALL_OW 2
45646: ST_TO_ADDR
// break ;
45647: GO 45651
// end ; end ;
45649: GO 45588
45651: POP
45652: POP
// end ; end ;
45653: GO 45452
45655: POP
45656: POP
// if result and not asc then
45657: LD_VAR 0 6
45661: PUSH
45662: LD_VAR 0 4
45666: NOT
45667: AND
45668: IFFALSE 45743
// begin tmp := result ;
45670: LD_ADDR_VAR 0 9
45674: PUSH
45675: LD_VAR 0 6
45679: ST_TO_ADDR
// for i = tmp downto 1 do
45680: LD_ADDR_VAR 0 7
45684: PUSH
45685: DOUBLE
45686: LD_VAR 0 9
45690: INC
45691: ST_TO_ADDR
45692: LD_INT 1
45694: PUSH
45695: FOR_DOWNTO
45696: IFFALSE 45741
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45698: LD_ADDR_VAR 0 6
45702: PUSH
45703: LD_VAR 0 6
45707: PPUSH
45708: LD_VAR 0 9
45712: PUSH
45713: LD_VAR 0 7
45717: MINUS
45718: PUSH
45719: LD_INT 1
45721: PLUS
45722: PPUSH
45723: LD_VAR 0 9
45727: PUSH
45728: LD_VAR 0 7
45732: ARRAY
45733: PPUSH
45734: CALL_OW 1
45738: ST_TO_ADDR
45739: GO 45695
45741: POP
45742: POP
// end ; tmp := [ ] ;
45743: LD_ADDR_VAR 0 9
45747: PUSH
45748: EMPTY
45749: ST_TO_ADDR
// if mode then
45750: LD_VAR 0 5
45754: IFFALSE 45823
// begin for i = 1 to result do
45756: LD_ADDR_VAR 0 7
45760: PUSH
45761: DOUBLE
45762: LD_INT 1
45764: DEC
45765: ST_TO_ADDR
45766: LD_VAR 0 6
45770: PUSH
45771: FOR_TO
45772: IFFALSE 45811
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45774: LD_ADDR_VAR 0 9
45778: PUSH
45779: LD_VAR 0 9
45783: PPUSH
45784: LD_VAR 0 7
45788: PPUSH
45789: LD_VAR 0 6
45793: PUSH
45794: LD_VAR 0 7
45798: ARRAY
45799: PUSH
45800: LD_INT 1
45802: ARRAY
45803: PPUSH
45804: CALL_OW 1
45808: ST_TO_ADDR
45809: GO 45771
45811: POP
45812: POP
// result := tmp ;
45813: LD_ADDR_VAR 0 6
45817: PUSH
45818: LD_VAR 0 9
45822: ST_TO_ADDR
// end ; end ;
45823: LD_VAR 0 6
45827: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45828: LD_INT 0
45830: PPUSH
45831: PPUSH
45832: PPUSH
45833: PPUSH
45834: PPUSH
45835: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45836: LD_ADDR_VAR 0 5
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: ST_TO_ADDR
// if not x or not y then
45858: LD_VAR 0 2
45862: NOT
45863: PUSH
45864: LD_VAR 0 3
45868: NOT
45869: OR
45870: IFFALSE 45874
// exit ;
45872: GO 47524
// if not range then
45874: LD_VAR 0 4
45878: NOT
45879: IFFALSE 45889
// range := 10 ;
45881: LD_ADDR_VAR 0 4
45885: PUSH
45886: LD_INT 10
45888: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45889: LD_ADDR_VAR 0 8
45893: PUSH
45894: LD_INT 81
45896: PUSH
45897: LD_VAR 0 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 92
45908: PUSH
45909: LD_VAR 0 2
45913: PUSH
45914: LD_VAR 0 3
45918: PUSH
45919: LD_VAR 0 4
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 3
45932: PUSH
45933: LD_INT 21
45935: PUSH
45936: LD_INT 3
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: LIST
45951: PPUSH
45952: CALL_OW 69
45956: ST_TO_ADDR
// if not tmp then
45957: LD_VAR 0 8
45961: NOT
45962: IFFALSE 45966
// exit ;
45964: GO 47524
// for i in tmp do
45966: LD_ADDR_VAR 0 6
45970: PUSH
45971: LD_VAR 0 8
45975: PUSH
45976: FOR_IN
45977: IFFALSE 47499
// begin points := [ 0 , 0 , 0 ] ;
45979: LD_ADDR_VAR 0 9
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// bpoints := 1 ;
45998: LD_ADDR_VAR 0 10
46002: PUSH
46003: LD_INT 1
46005: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46006: LD_VAR 0 6
46010: PPUSH
46011: CALL_OW 247
46015: PUSH
46016: LD_INT 1
46018: DOUBLE
46019: EQUAL
46020: IFTRUE 46024
46022: GO 46602
46024: POP
// begin if GetClass ( i ) = 1 then
46025: LD_VAR 0 6
46029: PPUSH
46030: CALL_OW 257
46034: PUSH
46035: LD_INT 1
46037: EQUAL
46038: IFFALSE 46059
// points := [ 10 , 5 , 3 ] ;
46040: LD_ADDR_VAR 0 9
46044: PUSH
46045: LD_INT 10
46047: PUSH
46048: LD_INT 5
46050: PUSH
46051: LD_INT 3
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46059: LD_VAR 0 6
46063: PPUSH
46064: CALL_OW 257
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: LD_INT 3
46074: PUSH
46075: LD_INT 4
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: IN
46083: IFFALSE 46104
// points := [ 3 , 2 , 1 ] ;
46085: LD_ADDR_VAR 0 9
46089: PUSH
46090: LD_INT 3
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46104: LD_VAR 0 6
46108: PPUSH
46109: CALL_OW 257
46113: PUSH
46114: LD_INT 5
46116: EQUAL
46117: IFFALSE 46138
// points := [ 130 , 5 , 2 ] ;
46119: LD_ADDR_VAR 0 9
46123: PUSH
46124: LD_INT 130
46126: PUSH
46127: LD_INT 5
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46138: LD_VAR 0 6
46142: PPUSH
46143: CALL_OW 257
46147: PUSH
46148: LD_INT 8
46150: EQUAL
46151: IFFALSE 46172
// points := [ 35 , 35 , 30 ] ;
46153: LD_ADDR_VAR 0 9
46157: PUSH
46158: LD_INT 35
46160: PUSH
46161: LD_INT 35
46163: PUSH
46164: LD_INT 30
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46172: LD_VAR 0 6
46176: PPUSH
46177: CALL_OW 257
46181: PUSH
46182: LD_INT 9
46184: EQUAL
46185: IFFALSE 46206
// points := [ 20 , 55 , 40 ] ;
46187: LD_ADDR_VAR 0 9
46191: PUSH
46192: LD_INT 20
46194: PUSH
46195: LD_INT 55
46197: PUSH
46198: LD_INT 40
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: LIST
46205: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46206: LD_VAR 0 6
46210: PPUSH
46211: CALL_OW 257
46215: PUSH
46216: LD_INT 12
46218: PUSH
46219: LD_INT 16
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: IN
46226: IFFALSE 46247
// points := [ 5 , 3 , 2 ] ;
46228: LD_ADDR_VAR 0 9
46232: PUSH
46233: LD_INT 5
46235: PUSH
46236: LD_INT 3
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: LIST
46246: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46247: LD_VAR 0 6
46251: PPUSH
46252: CALL_OW 257
46256: PUSH
46257: LD_INT 17
46259: EQUAL
46260: IFFALSE 46281
// points := [ 100 , 50 , 75 ] ;
46262: LD_ADDR_VAR 0 9
46266: PUSH
46267: LD_INT 100
46269: PUSH
46270: LD_INT 50
46272: PUSH
46273: LD_INT 75
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: LIST
46280: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46281: LD_VAR 0 6
46285: PPUSH
46286: CALL_OW 257
46290: PUSH
46291: LD_INT 15
46293: EQUAL
46294: IFFALSE 46315
// points := [ 10 , 5 , 3 ] ;
46296: LD_ADDR_VAR 0 9
46300: PUSH
46301: LD_INT 10
46303: PUSH
46304: LD_INT 5
46306: PUSH
46307: LD_INT 3
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46315: LD_VAR 0 6
46319: PPUSH
46320: CALL_OW 257
46324: PUSH
46325: LD_INT 14
46327: EQUAL
46328: IFFALSE 46349
// points := [ 10 , 0 , 0 ] ;
46330: LD_ADDR_VAR 0 9
46334: PUSH
46335: LD_INT 10
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: LIST
46348: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46349: LD_VAR 0 6
46353: PPUSH
46354: CALL_OW 257
46358: PUSH
46359: LD_INT 11
46361: EQUAL
46362: IFFALSE 46383
// points := [ 30 , 10 , 5 ] ;
46364: LD_ADDR_VAR 0 9
46368: PUSH
46369: LD_INT 30
46371: PUSH
46372: LD_INT 10
46374: PUSH
46375: LD_INT 5
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: LIST
46382: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46383: LD_VAR 0 1
46387: PPUSH
46388: LD_INT 5
46390: PPUSH
46391: CALL_OW 321
46395: PUSH
46396: LD_INT 2
46398: EQUAL
46399: IFFALSE 46416
// bpoints := bpoints * 1.8 ;
46401: LD_ADDR_VAR 0 10
46405: PUSH
46406: LD_VAR 0 10
46410: PUSH
46411: LD_REAL  1.80000000000000E+0000
46414: MUL
46415: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46416: LD_VAR 0 6
46420: PPUSH
46421: CALL_OW 257
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: LD_INT 3
46434: PUSH
46435: LD_INT 4
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: IN
46444: PUSH
46445: LD_VAR 0 1
46449: PPUSH
46450: LD_INT 51
46452: PPUSH
46453: CALL_OW 321
46457: PUSH
46458: LD_INT 2
46460: EQUAL
46461: AND
46462: IFFALSE 46479
// bpoints := bpoints * 1.2 ;
46464: LD_ADDR_VAR 0 10
46468: PUSH
46469: LD_VAR 0 10
46473: PUSH
46474: LD_REAL  1.20000000000000E+0000
46477: MUL
46478: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46479: LD_VAR 0 6
46483: PPUSH
46484: CALL_OW 257
46488: PUSH
46489: LD_INT 5
46491: PUSH
46492: LD_INT 7
46494: PUSH
46495: LD_INT 9
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: LIST
46502: IN
46503: PUSH
46504: LD_VAR 0 1
46508: PPUSH
46509: LD_INT 52
46511: PPUSH
46512: CALL_OW 321
46516: PUSH
46517: LD_INT 2
46519: EQUAL
46520: AND
46521: IFFALSE 46538
// bpoints := bpoints * 1.5 ;
46523: LD_ADDR_VAR 0 10
46527: PUSH
46528: LD_VAR 0 10
46532: PUSH
46533: LD_REAL  1.50000000000000E+0000
46536: MUL
46537: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46538: LD_VAR 0 1
46542: PPUSH
46543: LD_INT 66
46545: PPUSH
46546: CALL_OW 321
46550: PUSH
46551: LD_INT 2
46553: EQUAL
46554: IFFALSE 46571
// bpoints := bpoints * 1.1 ;
46556: LD_ADDR_VAR 0 10
46560: PUSH
46561: LD_VAR 0 10
46565: PUSH
46566: LD_REAL  1.10000000000000E+0000
46569: MUL
46570: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46571: LD_ADDR_VAR 0 10
46575: PUSH
46576: LD_VAR 0 10
46580: PUSH
46581: LD_VAR 0 6
46585: PPUSH
46586: LD_INT 1
46588: PPUSH
46589: CALL_OW 259
46593: PUSH
46594: LD_REAL  1.15000000000000E+0000
46597: MUL
46598: MUL
46599: ST_TO_ADDR
// end ; unit_vehicle :
46600: GO 47428
46602: LD_INT 2
46604: DOUBLE
46605: EQUAL
46606: IFTRUE 46610
46608: GO 47416
46610: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46611: LD_VAR 0 6
46615: PPUSH
46616: CALL_OW 264
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: LD_INT 42
46626: PUSH
46627: LD_INT 24
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: IN
46635: IFFALSE 46656
// points := [ 25 , 5 , 3 ] ;
46637: LD_ADDR_VAR 0 9
46641: PUSH
46642: LD_INT 25
46644: PUSH
46645: LD_INT 5
46647: PUSH
46648: LD_INT 3
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: LIST
46655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46656: LD_VAR 0 6
46660: PPUSH
46661: CALL_OW 264
46665: PUSH
46666: LD_INT 4
46668: PUSH
46669: LD_INT 43
46671: PUSH
46672: LD_INT 25
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: IN
46680: IFFALSE 46701
// points := [ 40 , 15 , 5 ] ;
46682: LD_ADDR_VAR 0 9
46686: PUSH
46687: LD_INT 40
46689: PUSH
46690: LD_INT 15
46692: PUSH
46693: LD_INT 5
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: LIST
46700: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46701: LD_VAR 0 6
46705: PPUSH
46706: CALL_OW 264
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: LD_INT 23
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: IN
46721: IFFALSE 46742
// points := [ 7 , 25 , 8 ] ;
46723: LD_ADDR_VAR 0 9
46727: PUSH
46728: LD_INT 7
46730: PUSH
46731: LD_INT 25
46733: PUSH
46734: LD_INT 8
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46742: LD_VAR 0 6
46746: PPUSH
46747: CALL_OW 264
46751: PUSH
46752: LD_INT 5
46754: PUSH
46755: LD_INT 27
46757: PUSH
46758: LD_INT 44
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: IN
46766: IFFALSE 46787
// points := [ 14 , 50 , 16 ] ;
46768: LD_ADDR_VAR 0 9
46772: PUSH
46773: LD_INT 14
46775: PUSH
46776: LD_INT 50
46778: PUSH
46779: LD_INT 16
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: LIST
46786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46787: LD_VAR 0 6
46791: PPUSH
46792: CALL_OW 264
46796: PUSH
46797: LD_INT 6
46799: PUSH
46800: LD_INT 46
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: IN
46807: IFFALSE 46828
// points := [ 32 , 120 , 70 ] ;
46809: LD_ADDR_VAR 0 9
46813: PUSH
46814: LD_INT 32
46816: PUSH
46817: LD_INT 120
46819: PUSH
46820: LD_INT 70
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: LIST
46827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46828: LD_VAR 0 6
46832: PPUSH
46833: CALL_OW 264
46837: PUSH
46838: LD_INT 7
46840: PUSH
46841: LD_INT 28
46843: PUSH
46844: LD_INT 45
46846: PUSH
46847: LD_INT 92
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: IN
46856: IFFALSE 46877
// points := [ 35 , 20 , 45 ] ;
46858: LD_ADDR_VAR 0 9
46862: PUSH
46863: LD_INT 35
46865: PUSH
46866: LD_INT 20
46868: PUSH
46869: LD_INT 45
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: LIST
46876: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46877: LD_VAR 0 6
46881: PPUSH
46882: CALL_OW 264
46886: PUSH
46887: LD_INT 47
46889: PUSH
46890: EMPTY
46891: LIST
46892: IN
46893: IFFALSE 46914
// points := [ 67 , 45 , 75 ] ;
46895: LD_ADDR_VAR 0 9
46899: PUSH
46900: LD_INT 67
46902: PUSH
46903: LD_INT 45
46905: PUSH
46906: LD_INT 75
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: LIST
46913: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46914: LD_VAR 0 6
46918: PPUSH
46919: CALL_OW 264
46923: PUSH
46924: LD_INT 26
46926: PUSH
46927: EMPTY
46928: LIST
46929: IN
46930: IFFALSE 46951
// points := [ 120 , 30 , 80 ] ;
46932: LD_ADDR_VAR 0 9
46936: PUSH
46937: LD_INT 120
46939: PUSH
46940: LD_INT 30
46942: PUSH
46943: LD_INT 80
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46951: LD_VAR 0 6
46955: PPUSH
46956: CALL_OW 264
46960: PUSH
46961: LD_INT 22
46963: PUSH
46964: EMPTY
46965: LIST
46966: IN
46967: IFFALSE 46988
// points := [ 40 , 1 , 1 ] ;
46969: LD_ADDR_VAR 0 9
46973: PUSH
46974: LD_INT 40
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: LIST
46987: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46988: LD_VAR 0 6
46992: PPUSH
46993: CALL_OW 264
46997: PUSH
46998: LD_INT 29
47000: PUSH
47001: EMPTY
47002: LIST
47003: IN
47004: IFFALSE 47025
// points := [ 70 , 200 , 400 ] ;
47006: LD_ADDR_VAR 0 9
47010: PUSH
47011: LD_INT 70
47013: PUSH
47014: LD_INT 200
47016: PUSH
47017: LD_INT 400
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: LIST
47024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47025: LD_VAR 0 6
47029: PPUSH
47030: CALL_OW 264
47034: PUSH
47035: LD_INT 14
47037: PUSH
47038: LD_INT 53
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: IN
47045: IFFALSE 47066
// points := [ 40 , 10 , 20 ] ;
47047: LD_ADDR_VAR 0 9
47051: PUSH
47052: LD_INT 40
47054: PUSH
47055: LD_INT 10
47057: PUSH
47058: LD_INT 20
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47066: LD_VAR 0 6
47070: PPUSH
47071: CALL_OW 264
47075: PUSH
47076: LD_INT 9
47078: PUSH
47079: EMPTY
47080: LIST
47081: IN
47082: IFFALSE 47103
// points := [ 5 , 70 , 20 ] ;
47084: LD_ADDR_VAR 0 9
47088: PUSH
47089: LD_INT 5
47091: PUSH
47092: LD_INT 70
47094: PUSH
47095: LD_INT 20
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47103: LD_VAR 0 6
47107: PPUSH
47108: CALL_OW 264
47112: PUSH
47113: LD_INT 10
47115: PUSH
47116: EMPTY
47117: LIST
47118: IN
47119: IFFALSE 47140
// points := [ 35 , 110 , 70 ] ;
47121: LD_ADDR_VAR 0 9
47125: PUSH
47126: LD_INT 35
47128: PUSH
47129: LD_INT 110
47131: PUSH
47132: LD_INT 70
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: LIST
47139: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47140: LD_VAR 0 6
47144: PPUSH
47145: CALL_OW 265
47149: PUSH
47150: LD_INT 25
47152: EQUAL
47153: IFFALSE 47174
// points := [ 80 , 65 , 100 ] ;
47155: LD_ADDR_VAR 0 9
47159: PUSH
47160: LD_INT 80
47162: PUSH
47163: LD_INT 65
47165: PUSH
47166: LD_INT 100
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47174: LD_VAR 0 6
47178: PPUSH
47179: CALL_OW 263
47183: PUSH
47184: LD_INT 1
47186: EQUAL
47187: IFFALSE 47222
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47189: LD_ADDR_VAR 0 10
47193: PUSH
47194: LD_VAR 0 10
47198: PUSH
47199: LD_VAR 0 6
47203: PPUSH
47204: CALL_OW 311
47208: PPUSH
47209: LD_INT 3
47211: PPUSH
47212: CALL_OW 259
47216: PUSH
47217: LD_INT 4
47219: MUL
47220: MUL
47221: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47222: LD_VAR 0 6
47226: PPUSH
47227: CALL_OW 263
47231: PUSH
47232: LD_INT 2
47234: EQUAL
47235: IFFALSE 47286
// begin j := IsControledBy ( i ) ;
47237: LD_ADDR_VAR 0 7
47241: PUSH
47242: LD_VAR 0 6
47246: PPUSH
47247: CALL_OW 312
47251: ST_TO_ADDR
// if j then
47252: LD_VAR 0 7
47256: IFFALSE 47286
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47258: LD_ADDR_VAR 0 10
47262: PUSH
47263: LD_VAR 0 10
47267: PUSH
47268: LD_VAR 0 7
47272: PPUSH
47273: LD_INT 3
47275: PPUSH
47276: CALL_OW 259
47280: PUSH
47281: LD_INT 3
47283: MUL
47284: MUL
47285: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47286: LD_VAR 0 6
47290: PPUSH
47291: CALL_OW 264
47295: PUSH
47296: LD_INT 5
47298: PUSH
47299: LD_INT 6
47301: PUSH
47302: LD_INT 46
47304: PUSH
47305: LD_INT 44
47307: PUSH
47308: LD_INT 47
47310: PUSH
47311: LD_INT 45
47313: PUSH
47314: LD_INT 28
47316: PUSH
47317: LD_INT 7
47319: PUSH
47320: LD_INT 27
47322: PUSH
47323: LD_INT 29
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: IN
47338: PUSH
47339: LD_VAR 0 1
47343: PPUSH
47344: LD_INT 52
47346: PPUSH
47347: CALL_OW 321
47351: PUSH
47352: LD_INT 2
47354: EQUAL
47355: AND
47356: IFFALSE 47373
// bpoints := bpoints * 1.2 ;
47358: LD_ADDR_VAR 0 10
47362: PUSH
47363: LD_VAR 0 10
47367: PUSH
47368: LD_REAL  1.20000000000000E+0000
47371: MUL
47372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47373: LD_VAR 0 6
47377: PPUSH
47378: CALL_OW 264
47382: PUSH
47383: LD_INT 6
47385: PUSH
47386: LD_INT 46
47388: PUSH
47389: LD_INT 47
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: IN
47397: IFFALSE 47414
// bpoints := bpoints * 1.2 ;
47399: LD_ADDR_VAR 0 10
47403: PUSH
47404: LD_VAR 0 10
47408: PUSH
47409: LD_REAL  1.20000000000000E+0000
47412: MUL
47413: ST_TO_ADDR
// end ; unit_building :
47414: GO 47428
47416: LD_INT 3
47418: DOUBLE
47419: EQUAL
47420: IFTRUE 47424
47422: GO 47427
47424: POP
// ; end ;
47425: GO 47428
47427: POP
// for j = 1 to 3 do
47428: LD_ADDR_VAR 0 7
47432: PUSH
47433: DOUBLE
47434: LD_INT 1
47436: DEC
47437: ST_TO_ADDR
47438: LD_INT 3
47440: PUSH
47441: FOR_TO
47442: IFFALSE 47495
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47444: LD_ADDR_VAR 0 5
47448: PUSH
47449: LD_VAR 0 5
47453: PPUSH
47454: LD_VAR 0 7
47458: PPUSH
47459: LD_VAR 0 5
47463: PUSH
47464: LD_VAR 0 7
47468: ARRAY
47469: PUSH
47470: LD_VAR 0 9
47474: PUSH
47475: LD_VAR 0 7
47479: ARRAY
47480: PUSH
47481: LD_VAR 0 10
47485: MUL
47486: PLUS
47487: PPUSH
47488: CALL_OW 1
47492: ST_TO_ADDR
47493: GO 47441
47495: POP
47496: POP
// end ;
47497: GO 45976
47499: POP
47500: POP
// result := Replace ( result , 4 , tmp ) ;
47501: LD_ADDR_VAR 0 5
47505: PUSH
47506: LD_VAR 0 5
47510: PPUSH
47511: LD_INT 4
47513: PPUSH
47514: LD_VAR 0 8
47518: PPUSH
47519: CALL_OW 1
47523: ST_TO_ADDR
// end ;
47524: LD_VAR 0 5
47528: RET
// export function DangerAtRange ( unit , range ) ; begin
47529: LD_INT 0
47531: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47532: LD_ADDR_VAR 0 3
47536: PUSH
47537: LD_VAR 0 1
47541: PPUSH
47542: CALL_OW 255
47546: PPUSH
47547: LD_VAR 0 1
47551: PPUSH
47552: CALL_OW 250
47556: PPUSH
47557: LD_VAR 0 1
47561: PPUSH
47562: CALL_OW 251
47566: PPUSH
47567: LD_VAR 0 2
47571: PPUSH
47572: CALL 45828 0 4
47576: ST_TO_ADDR
// end ;
47577: LD_VAR 0 3
47581: RET
// export function DangerInArea ( side , area ) ; begin
47582: LD_INT 0
47584: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47585: LD_ADDR_VAR 0 3
47589: PUSH
47590: LD_VAR 0 2
47594: PPUSH
47595: LD_INT 81
47597: PUSH
47598: LD_VAR 0 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PPUSH
47607: CALL_OW 70
47611: ST_TO_ADDR
// end ;
47612: LD_VAR 0 3
47616: RET
// export function IsExtension ( b ) ; begin
47617: LD_INT 0
47619: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47620: LD_ADDR_VAR 0 2
47624: PUSH
47625: LD_VAR 0 1
47629: PUSH
47630: LD_INT 23
47632: PUSH
47633: LD_INT 20
47635: PUSH
47636: LD_INT 22
47638: PUSH
47639: LD_INT 17
47641: PUSH
47642: LD_INT 24
47644: PUSH
47645: LD_INT 21
47647: PUSH
47648: LD_INT 19
47650: PUSH
47651: LD_INT 16
47653: PUSH
47654: LD_INT 25
47656: PUSH
47657: LD_INT 18
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: IN
47672: ST_TO_ADDR
// end ;
47673: LD_VAR 0 2
47677: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47678: LD_INT 0
47680: PPUSH
47681: PPUSH
47682: PPUSH
// result := [ ] ;
47683: LD_ADDR_VAR 0 4
47687: PUSH
47688: EMPTY
47689: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47690: LD_ADDR_VAR 0 5
47694: PUSH
47695: LD_VAR 0 2
47699: PPUSH
47700: LD_INT 21
47702: PUSH
47703: LD_INT 3
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PPUSH
47710: CALL_OW 70
47714: ST_TO_ADDR
// if not tmp then
47715: LD_VAR 0 5
47719: NOT
47720: IFFALSE 47724
// exit ;
47722: GO 47788
// if checkLink then
47724: LD_VAR 0 3
47728: IFFALSE 47778
// begin for i in tmp do
47730: LD_ADDR_VAR 0 6
47734: PUSH
47735: LD_VAR 0 5
47739: PUSH
47740: FOR_IN
47741: IFFALSE 47776
// if GetBase ( i ) <> base then
47743: LD_VAR 0 6
47747: PPUSH
47748: CALL_OW 274
47752: PUSH
47753: LD_VAR 0 1
47757: NONEQUAL
47758: IFFALSE 47774
// ComLinkToBase ( base , i ) ;
47760: LD_VAR 0 1
47764: PPUSH
47765: LD_VAR 0 6
47769: PPUSH
47770: CALL_OW 169
47774: GO 47740
47776: POP
47777: POP
// end ; result := tmp ;
47778: LD_ADDR_VAR 0 4
47782: PUSH
47783: LD_VAR 0 5
47787: ST_TO_ADDR
// end ;
47788: LD_VAR 0 4
47792: RET
// export function ComComplete ( units , b ) ; var i ; begin
47793: LD_INT 0
47795: PPUSH
47796: PPUSH
// if not units then
47797: LD_VAR 0 1
47801: NOT
47802: IFFALSE 47806
// exit ;
47804: GO 47896
// for i in units do
47806: LD_ADDR_VAR 0 4
47810: PUSH
47811: LD_VAR 0 1
47815: PUSH
47816: FOR_IN
47817: IFFALSE 47894
// if BuildingStatus ( b ) = bs_build then
47819: LD_VAR 0 2
47823: PPUSH
47824: CALL_OW 461
47828: PUSH
47829: LD_INT 1
47831: EQUAL
47832: IFFALSE 47892
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47834: LD_VAR 0 4
47838: PPUSH
47839: LD_STRING h
47841: PUSH
47842: LD_VAR 0 2
47846: PPUSH
47847: CALL_OW 250
47851: PUSH
47852: LD_VAR 0 2
47856: PPUSH
47857: CALL_OW 251
47861: PUSH
47862: LD_VAR 0 2
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: PUSH
47885: EMPTY
47886: LIST
47887: PPUSH
47888: CALL_OW 446
47892: GO 47816
47894: POP
47895: POP
// end ;
47896: LD_VAR 0 3
47900: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47901: LD_INT 0
47903: PPUSH
47904: PPUSH
47905: PPUSH
47906: PPUSH
47907: PPUSH
47908: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47909: LD_VAR 0 1
47913: NOT
47914: PUSH
47915: LD_VAR 0 1
47919: PPUSH
47920: CALL_OW 263
47924: PUSH
47925: LD_INT 2
47927: NONEQUAL
47928: OR
47929: IFFALSE 47933
// exit ;
47931: GO 48249
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47933: LD_ADDR_VAR 0 6
47937: PUSH
47938: LD_INT 22
47940: PUSH
47941: LD_VAR 0 1
47945: PPUSH
47946: CALL_OW 255
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: LD_INT 30
47960: PUSH
47961: LD_INT 36
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 34
47970: PUSH
47971: LD_INT 31
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PPUSH
47987: CALL_OW 69
47991: ST_TO_ADDR
// if not tmp then
47992: LD_VAR 0 6
47996: NOT
47997: IFFALSE 48001
// exit ;
47999: GO 48249
// result := [ ] ;
48001: LD_ADDR_VAR 0 2
48005: PUSH
48006: EMPTY
48007: ST_TO_ADDR
// for i in tmp do
48008: LD_ADDR_VAR 0 3
48012: PUSH
48013: LD_VAR 0 6
48017: PUSH
48018: FOR_IN
48019: IFFALSE 48090
// begin t := UnitsInside ( i ) ;
48021: LD_ADDR_VAR 0 4
48025: PUSH
48026: LD_VAR 0 3
48030: PPUSH
48031: CALL_OW 313
48035: ST_TO_ADDR
// if t then
48036: LD_VAR 0 4
48040: IFFALSE 48088
// for j in t do
48042: LD_ADDR_VAR 0 7
48046: PUSH
48047: LD_VAR 0 4
48051: PUSH
48052: FOR_IN
48053: IFFALSE 48086
// result := Replace ( result , result + 1 , j ) ;
48055: LD_ADDR_VAR 0 2
48059: PUSH
48060: LD_VAR 0 2
48064: PPUSH
48065: LD_VAR 0 2
48069: PUSH
48070: LD_INT 1
48072: PLUS
48073: PPUSH
48074: LD_VAR 0 7
48078: PPUSH
48079: CALL_OW 1
48083: ST_TO_ADDR
48084: GO 48052
48086: POP
48087: POP
// end ;
48088: GO 48018
48090: POP
48091: POP
// if not result then
48092: LD_VAR 0 2
48096: NOT
48097: IFFALSE 48101
// exit ;
48099: GO 48249
// mech := result [ 1 ] ;
48101: LD_ADDR_VAR 0 5
48105: PUSH
48106: LD_VAR 0 2
48110: PUSH
48111: LD_INT 1
48113: ARRAY
48114: ST_TO_ADDR
// if result > 1 then
48115: LD_VAR 0 2
48119: PUSH
48120: LD_INT 1
48122: GREATER
48123: IFFALSE 48235
// begin for i = 2 to result do
48125: LD_ADDR_VAR 0 3
48129: PUSH
48130: DOUBLE
48131: LD_INT 2
48133: DEC
48134: ST_TO_ADDR
48135: LD_VAR 0 2
48139: PUSH
48140: FOR_TO
48141: IFFALSE 48233
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48143: LD_ADDR_VAR 0 4
48147: PUSH
48148: LD_VAR 0 2
48152: PUSH
48153: LD_VAR 0 3
48157: ARRAY
48158: PPUSH
48159: LD_INT 3
48161: PPUSH
48162: CALL_OW 259
48166: PUSH
48167: LD_VAR 0 2
48171: PUSH
48172: LD_VAR 0 3
48176: ARRAY
48177: PPUSH
48178: CALL_OW 432
48182: MINUS
48183: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48184: LD_VAR 0 4
48188: PUSH
48189: LD_VAR 0 5
48193: PPUSH
48194: LD_INT 3
48196: PPUSH
48197: CALL_OW 259
48201: PUSH
48202: LD_VAR 0 5
48206: PPUSH
48207: CALL_OW 432
48211: MINUS
48212: GREATEREQUAL
48213: IFFALSE 48231
// mech := result [ i ] ;
48215: LD_ADDR_VAR 0 5
48219: PUSH
48220: LD_VAR 0 2
48224: PUSH
48225: LD_VAR 0 3
48229: ARRAY
48230: ST_TO_ADDR
// end ;
48231: GO 48140
48233: POP
48234: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48235: LD_VAR 0 1
48239: PPUSH
48240: LD_VAR 0 5
48244: PPUSH
48245: CALL_OW 135
// end ;
48249: LD_VAR 0 2
48253: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48254: LD_INT 0
48256: PPUSH
48257: PPUSH
48258: PPUSH
48259: PPUSH
48260: PPUSH
48261: PPUSH
48262: PPUSH
48263: PPUSH
48264: PPUSH
48265: PPUSH
48266: PPUSH
48267: PPUSH
48268: PPUSH
// result := [ ] ;
48269: LD_ADDR_VAR 0 7
48273: PUSH
48274: EMPTY
48275: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48276: LD_VAR 0 1
48280: PPUSH
48281: CALL_OW 266
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: IN
48296: NOT
48297: IFFALSE 48301
// exit ;
48299: GO 49935
// if name then
48301: LD_VAR 0 3
48305: IFFALSE 48321
// SetBName ( base_dep , name ) ;
48307: LD_VAR 0 1
48311: PPUSH
48312: LD_VAR 0 3
48316: PPUSH
48317: CALL_OW 500
// base := GetBase ( base_dep ) ;
48321: LD_ADDR_VAR 0 15
48325: PUSH
48326: LD_VAR 0 1
48330: PPUSH
48331: CALL_OW 274
48335: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48336: LD_ADDR_VAR 0 16
48340: PUSH
48341: LD_VAR 0 1
48345: PPUSH
48346: CALL_OW 255
48350: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48351: LD_ADDR_VAR 0 17
48355: PUSH
48356: LD_VAR 0 1
48360: PPUSH
48361: CALL_OW 248
48365: ST_TO_ADDR
// if sources then
48366: LD_VAR 0 5
48370: IFFALSE 48417
// for i = 1 to 3 do
48372: LD_ADDR_VAR 0 8
48376: PUSH
48377: DOUBLE
48378: LD_INT 1
48380: DEC
48381: ST_TO_ADDR
48382: LD_INT 3
48384: PUSH
48385: FOR_TO
48386: IFFALSE 48415
// AddResourceType ( base , i , sources [ i ] ) ;
48388: LD_VAR 0 15
48392: PPUSH
48393: LD_VAR 0 8
48397: PPUSH
48398: LD_VAR 0 5
48402: PUSH
48403: LD_VAR 0 8
48407: ARRAY
48408: PPUSH
48409: CALL_OW 276
48413: GO 48385
48415: POP
48416: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48417: LD_ADDR_VAR 0 18
48421: PUSH
48422: LD_VAR 0 15
48426: PPUSH
48427: LD_VAR 0 2
48431: PPUSH
48432: LD_INT 1
48434: PPUSH
48435: CALL 47678 0 3
48439: ST_TO_ADDR
// InitHc ;
48440: CALL_OW 19
// InitUc ;
48444: CALL_OW 18
// uc_side := side ;
48448: LD_ADDR_OWVAR 20
48452: PUSH
48453: LD_VAR 0 16
48457: ST_TO_ADDR
// uc_nation := nation ;
48458: LD_ADDR_OWVAR 21
48462: PUSH
48463: LD_VAR 0 17
48467: ST_TO_ADDR
// if buildings then
48468: LD_VAR 0 18
48472: IFFALSE 49794
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48474: LD_ADDR_VAR 0 19
48478: PUSH
48479: LD_VAR 0 18
48483: PPUSH
48484: LD_INT 2
48486: PUSH
48487: LD_INT 30
48489: PUSH
48490: LD_INT 29
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 30
48499: PUSH
48500: LD_INT 30
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: LIST
48511: PPUSH
48512: CALL_OW 72
48516: ST_TO_ADDR
// if tmp then
48517: LD_VAR 0 19
48521: IFFALSE 48569
// for i in tmp do
48523: LD_ADDR_VAR 0 8
48527: PUSH
48528: LD_VAR 0 19
48532: PUSH
48533: FOR_IN
48534: IFFALSE 48567
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48536: LD_VAR 0 8
48540: PPUSH
48541: CALL_OW 250
48545: PPUSH
48546: LD_VAR 0 8
48550: PPUSH
48551: CALL_OW 251
48555: PPUSH
48556: LD_VAR 0 16
48560: PPUSH
48561: CALL_OW 441
48565: GO 48533
48567: POP
48568: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48569: LD_VAR 0 18
48573: PPUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 30
48579: PUSH
48580: LD_INT 32
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 30
48589: PUSH
48590: LD_INT 33
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: LIST
48601: PPUSH
48602: CALL_OW 72
48606: IFFALSE 48694
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48608: LD_ADDR_VAR 0 8
48612: PUSH
48613: LD_VAR 0 18
48617: PPUSH
48618: LD_INT 2
48620: PUSH
48621: LD_INT 30
48623: PUSH
48624: LD_INT 32
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 30
48633: PUSH
48634: LD_INT 33
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: LIST
48645: PPUSH
48646: CALL_OW 72
48650: PUSH
48651: FOR_IN
48652: IFFALSE 48692
// begin if not GetBWeapon ( i ) then
48654: LD_VAR 0 8
48658: PPUSH
48659: CALL_OW 269
48663: NOT
48664: IFFALSE 48690
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48666: LD_VAR 0 8
48670: PPUSH
48671: LD_VAR 0 8
48675: PPUSH
48676: LD_VAR 0 2
48680: PPUSH
48681: CALL 49940 0 2
48685: PPUSH
48686: CALL_OW 431
// end ;
48690: GO 48651
48692: POP
48693: POP
// end ; for i = 1 to personel do
48694: LD_ADDR_VAR 0 8
48698: PUSH
48699: DOUBLE
48700: LD_INT 1
48702: DEC
48703: ST_TO_ADDR
48704: LD_VAR 0 6
48708: PUSH
48709: FOR_TO
48710: IFFALSE 49774
// begin if i > 4 then
48712: LD_VAR 0 8
48716: PUSH
48717: LD_INT 4
48719: GREATER
48720: IFFALSE 48724
// break ;
48722: GO 49774
// case i of 1 :
48724: LD_VAR 0 8
48728: PUSH
48729: LD_INT 1
48731: DOUBLE
48732: EQUAL
48733: IFTRUE 48737
48735: GO 48817
48737: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48738: LD_ADDR_VAR 0 12
48742: PUSH
48743: LD_VAR 0 18
48747: PPUSH
48748: LD_INT 22
48750: PUSH
48751: LD_VAR 0 16
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 58
48762: PUSH
48763: EMPTY
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: LD_INT 30
48771: PUSH
48772: LD_INT 32
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 30
48781: PUSH
48782: LD_INT 4
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 30
48791: PUSH
48792: LD_INT 5
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: LIST
48809: PPUSH
48810: CALL_OW 72
48814: ST_TO_ADDR
48815: GO 49039
48817: LD_INT 2
48819: DOUBLE
48820: EQUAL
48821: IFTRUE 48825
48823: GO 48887
48825: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48826: LD_ADDR_VAR 0 12
48830: PUSH
48831: LD_VAR 0 18
48835: PPUSH
48836: LD_INT 22
48838: PUSH
48839: LD_VAR 0 16
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: LD_INT 30
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 30
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: LIST
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PPUSH
48880: CALL_OW 72
48884: ST_TO_ADDR
48885: GO 49039
48887: LD_INT 3
48889: DOUBLE
48890: EQUAL
48891: IFTRUE 48895
48893: GO 48957
48895: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48896: LD_ADDR_VAR 0 12
48900: PUSH
48901: LD_VAR 0 18
48905: PPUSH
48906: LD_INT 22
48908: PUSH
48909: LD_VAR 0 16
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: LD_INT 30
48923: PUSH
48924: LD_INT 2
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 30
48933: PUSH
48934: LD_INT 3
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PPUSH
48950: CALL_OW 72
48954: ST_TO_ADDR
48955: GO 49039
48957: LD_INT 4
48959: DOUBLE
48960: EQUAL
48961: IFTRUE 48965
48963: GO 49038
48965: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48966: LD_ADDR_VAR 0 12
48970: PUSH
48971: LD_VAR 0 18
48975: PPUSH
48976: LD_INT 22
48978: PUSH
48979: LD_VAR 0 16
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: LD_INT 30
48993: PUSH
48994: LD_INT 6
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 30
49003: PUSH
49004: LD_INT 7
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 30
49013: PUSH
49014: LD_INT 8
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PPUSH
49031: CALL_OW 72
49035: ST_TO_ADDR
49036: GO 49039
49038: POP
// if i = 1 then
49039: LD_VAR 0 8
49043: PUSH
49044: LD_INT 1
49046: EQUAL
49047: IFFALSE 49158
// begin tmp := [ ] ;
49049: LD_ADDR_VAR 0 19
49053: PUSH
49054: EMPTY
49055: ST_TO_ADDR
// for j in f do
49056: LD_ADDR_VAR 0 9
49060: PUSH
49061: LD_VAR 0 12
49065: PUSH
49066: FOR_IN
49067: IFFALSE 49140
// if GetBType ( j ) = b_bunker then
49069: LD_VAR 0 9
49073: PPUSH
49074: CALL_OW 266
49078: PUSH
49079: LD_INT 32
49081: EQUAL
49082: IFFALSE 49109
// tmp := Insert ( tmp , 1 , j ) else
49084: LD_ADDR_VAR 0 19
49088: PUSH
49089: LD_VAR 0 19
49093: PPUSH
49094: LD_INT 1
49096: PPUSH
49097: LD_VAR 0 9
49101: PPUSH
49102: CALL_OW 2
49106: ST_TO_ADDR
49107: GO 49138
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49109: LD_ADDR_VAR 0 19
49113: PUSH
49114: LD_VAR 0 19
49118: PPUSH
49119: LD_VAR 0 19
49123: PUSH
49124: LD_INT 1
49126: PLUS
49127: PPUSH
49128: LD_VAR 0 9
49132: PPUSH
49133: CALL_OW 2
49137: ST_TO_ADDR
49138: GO 49066
49140: POP
49141: POP
// if tmp then
49142: LD_VAR 0 19
49146: IFFALSE 49158
// f := tmp ;
49148: LD_ADDR_VAR 0 12
49152: PUSH
49153: LD_VAR 0 19
49157: ST_TO_ADDR
// end ; x := personel [ i ] ;
49158: LD_ADDR_VAR 0 13
49162: PUSH
49163: LD_VAR 0 6
49167: PUSH
49168: LD_VAR 0 8
49172: ARRAY
49173: ST_TO_ADDR
// if x = - 1 then
49174: LD_VAR 0 13
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: EQUAL
49183: IFFALSE 49392
// begin for j in f do
49185: LD_ADDR_VAR 0 9
49189: PUSH
49190: LD_VAR 0 12
49194: PUSH
49195: FOR_IN
49196: IFFALSE 49388
// repeat InitHc ;
49198: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49202: LD_VAR 0 9
49206: PPUSH
49207: CALL_OW 266
49211: PUSH
49212: LD_INT 5
49214: EQUAL
49215: IFFALSE 49285
// begin if UnitsInside ( j ) < 3 then
49217: LD_VAR 0 9
49221: PPUSH
49222: CALL_OW 313
49226: PUSH
49227: LD_INT 3
49229: LESS
49230: IFFALSE 49266
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49232: LD_INT 0
49234: PPUSH
49235: LD_INT 5
49237: PUSH
49238: LD_INT 8
49240: PUSH
49241: LD_INT 9
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: PUSH
49249: LD_VAR 0 17
49253: ARRAY
49254: PPUSH
49255: LD_VAR 0 4
49259: PPUSH
49260: CALL_OW 380
49264: GO 49283
// PrepareHuman ( false , i , skill ) ;
49266: LD_INT 0
49268: PPUSH
49269: LD_VAR 0 8
49273: PPUSH
49274: LD_VAR 0 4
49278: PPUSH
49279: CALL_OW 380
// end else
49283: GO 49302
// PrepareHuman ( false , i , skill ) ;
49285: LD_INT 0
49287: PPUSH
49288: LD_VAR 0 8
49292: PPUSH
49293: LD_VAR 0 4
49297: PPUSH
49298: CALL_OW 380
// un := CreateHuman ;
49302: LD_ADDR_VAR 0 14
49306: PUSH
49307: CALL_OW 44
49311: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49312: LD_ADDR_VAR 0 7
49316: PUSH
49317: LD_VAR 0 7
49321: PPUSH
49322: LD_INT 1
49324: PPUSH
49325: LD_VAR 0 14
49329: PPUSH
49330: CALL_OW 2
49334: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49335: LD_VAR 0 14
49339: PPUSH
49340: LD_VAR 0 9
49344: PPUSH
49345: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49349: LD_VAR 0 9
49353: PPUSH
49354: CALL_OW 313
49358: PUSH
49359: LD_INT 6
49361: EQUAL
49362: PUSH
49363: LD_VAR 0 9
49367: PPUSH
49368: CALL_OW 266
49372: PUSH
49373: LD_INT 32
49375: PUSH
49376: LD_INT 31
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: IN
49383: OR
49384: IFFALSE 49198
49386: GO 49195
49388: POP
49389: POP
// end else
49390: GO 49772
// for j = 1 to x do
49392: LD_ADDR_VAR 0 9
49396: PUSH
49397: DOUBLE
49398: LD_INT 1
49400: DEC
49401: ST_TO_ADDR
49402: LD_VAR 0 13
49406: PUSH
49407: FOR_TO
49408: IFFALSE 49770
// begin InitHc ;
49410: CALL_OW 19
// if not f then
49414: LD_VAR 0 12
49418: NOT
49419: IFFALSE 49508
// begin PrepareHuman ( false , i , skill ) ;
49421: LD_INT 0
49423: PPUSH
49424: LD_VAR 0 8
49428: PPUSH
49429: LD_VAR 0 4
49433: PPUSH
49434: CALL_OW 380
// un := CreateHuman ;
49438: LD_ADDR_VAR 0 14
49442: PUSH
49443: CALL_OW 44
49447: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49448: LD_ADDR_VAR 0 7
49452: PUSH
49453: LD_VAR 0 7
49457: PPUSH
49458: LD_INT 1
49460: PPUSH
49461: LD_VAR 0 14
49465: PPUSH
49466: CALL_OW 2
49470: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49471: LD_VAR 0 14
49475: PPUSH
49476: LD_VAR 0 1
49480: PPUSH
49481: CALL_OW 250
49485: PPUSH
49486: LD_VAR 0 1
49490: PPUSH
49491: CALL_OW 251
49495: PPUSH
49496: LD_INT 10
49498: PPUSH
49499: LD_INT 0
49501: PPUSH
49502: CALL_OW 50
// continue ;
49506: GO 49407
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49508: LD_VAR 0 12
49512: PUSH
49513: LD_INT 1
49515: ARRAY
49516: PPUSH
49517: CALL_OW 313
49521: PUSH
49522: LD_VAR 0 12
49526: PUSH
49527: LD_INT 1
49529: ARRAY
49530: PPUSH
49531: CALL_OW 266
49535: PUSH
49536: LD_INT 32
49538: PUSH
49539: LD_INT 31
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: IN
49546: AND
49547: PUSH
49548: LD_VAR 0 12
49552: PUSH
49553: LD_INT 1
49555: ARRAY
49556: PPUSH
49557: CALL_OW 313
49561: PUSH
49562: LD_INT 6
49564: EQUAL
49565: OR
49566: IFFALSE 49586
// f := Delete ( f , 1 ) ;
49568: LD_ADDR_VAR 0 12
49572: PUSH
49573: LD_VAR 0 12
49577: PPUSH
49578: LD_INT 1
49580: PPUSH
49581: CALL_OW 3
49585: ST_TO_ADDR
// if not f then
49586: LD_VAR 0 12
49590: NOT
49591: IFFALSE 49609
// begin x := x + 2 ;
49593: LD_ADDR_VAR 0 13
49597: PUSH
49598: LD_VAR 0 13
49602: PUSH
49603: LD_INT 2
49605: PLUS
49606: ST_TO_ADDR
// continue ;
49607: GO 49407
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49609: LD_VAR 0 12
49613: PUSH
49614: LD_INT 1
49616: ARRAY
49617: PPUSH
49618: CALL_OW 266
49622: PUSH
49623: LD_INT 5
49625: EQUAL
49626: IFFALSE 49700
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49628: LD_VAR 0 12
49632: PUSH
49633: LD_INT 1
49635: ARRAY
49636: PPUSH
49637: CALL_OW 313
49641: PUSH
49642: LD_INT 3
49644: LESS
49645: IFFALSE 49681
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49647: LD_INT 0
49649: PPUSH
49650: LD_INT 5
49652: PUSH
49653: LD_INT 8
49655: PUSH
49656: LD_INT 9
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: LIST
49663: PUSH
49664: LD_VAR 0 17
49668: ARRAY
49669: PPUSH
49670: LD_VAR 0 4
49674: PPUSH
49675: CALL_OW 380
49679: GO 49698
// PrepareHuman ( false , i , skill ) ;
49681: LD_INT 0
49683: PPUSH
49684: LD_VAR 0 8
49688: PPUSH
49689: LD_VAR 0 4
49693: PPUSH
49694: CALL_OW 380
// end else
49698: GO 49717
// PrepareHuman ( false , i , skill ) ;
49700: LD_INT 0
49702: PPUSH
49703: LD_VAR 0 8
49707: PPUSH
49708: LD_VAR 0 4
49712: PPUSH
49713: CALL_OW 380
// un := CreateHuman ;
49717: LD_ADDR_VAR 0 14
49721: PUSH
49722: CALL_OW 44
49726: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49727: LD_ADDR_VAR 0 7
49731: PUSH
49732: LD_VAR 0 7
49736: PPUSH
49737: LD_INT 1
49739: PPUSH
49740: LD_VAR 0 14
49744: PPUSH
49745: CALL_OW 2
49749: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49750: LD_VAR 0 14
49754: PPUSH
49755: LD_VAR 0 12
49759: PUSH
49760: LD_INT 1
49762: ARRAY
49763: PPUSH
49764: CALL_OW 52
// end ;
49768: GO 49407
49770: POP
49771: POP
// end ;
49772: GO 48709
49774: POP
49775: POP
// result := result ^ buildings ;
49776: LD_ADDR_VAR 0 7
49780: PUSH
49781: LD_VAR 0 7
49785: PUSH
49786: LD_VAR 0 18
49790: ADD
49791: ST_TO_ADDR
// end else
49792: GO 49935
// begin for i = 1 to personel do
49794: LD_ADDR_VAR 0 8
49798: PUSH
49799: DOUBLE
49800: LD_INT 1
49802: DEC
49803: ST_TO_ADDR
49804: LD_VAR 0 6
49808: PUSH
49809: FOR_TO
49810: IFFALSE 49933
// begin if i > 4 then
49812: LD_VAR 0 8
49816: PUSH
49817: LD_INT 4
49819: GREATER
49820: IFFALSE 49824
// break ;
49822: GO 49933
// x := personel [ i ] ;
49824: LD_ADDR_VAR 0 13
49828: PUSH
49829: LD_VAR 0 6
49833: PUSH
49834: LD_VAR 0 8
49838: ARRAY
49839: ST_TO_ADDR
// if x = - 1 then
49840: LD_VAR 0 13
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: EQUAL
49849: IFFALSE 49853
// continue ;
49851: GO 49809
// PrepareHuman ( false , i , skill ) ;
49853: LD_INT 0
49855: PPUSH
49856: LD_VAR 0 8
49860: PPUSH
49861: LD_VAR 0 4
49865: PPUSH
49866: CALL_OW 380
// un := CreateHuman ;
49870: LD_ADDR_VAR 0 14
49874: PUSH
49875: CALL_OW 44
49879: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49880: LD_VAR 0 14
49884: PPUSH
49885: LD_VAR 0 1
49889: PPUSH
49890: CALL_OW 250
49894: PPUSH
49895: LD_VAR 0 1
49899: PPUSH
49900: CALL_OW 251
49904: PPUSH
49905: LD_INT 10
49907: PPUSH
49908: LD_INT 0
49910: PPUSH
49911: CALL_OW 50
// result := result ^ un ;
49915: LD_ADDR_VAR 0 7
49919: PUSH
49920: LD_VAR 0 7
49924: PUSH
49925: LD_VAR 0 14
49929: ADD
49930: ST_TO_ADDR
// end ;
49931: GO 49809
49933: POP
49934: POP
// end ; end ;
49935: LD_VAR 0 7
49939: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49940: LD_INT 0
49942: PPUSH
49943: PPUSH
49944: PPUSH
49945: PPUSH
49946: PPUSH
49947: PPUSH
49948: PPUSH
49949: PPUSH
49950: PPUSH
49951: PPUSH
49952: PPUSH
49953: PPUSH
49954: PPUSH
49955: PPUSH
49956: PPUSH
49957: PPUSH
// result := false ;
49958: LD_ADDR_VAR 0 3
49962: PUSH
49963: LD_INT 0
49965: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49966: LD_VAR 0 1
49970: NOT
49971: PUSH
49972: LD_VAR 0 1
49976: PPUSH
49977: CALL_OW 266
49981: PUSH
49982: LD_INT 32
49984: PUSH
49985: LD_INT 33
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: IN
49992: NOT
49993: OR
49994: IFFALSE 49998
// exit ;
49996: GO 51107
// nat := GetNation ( tower ) ;
49998: LD_ADDR_VAR 0 12
50002: PUSH
50003: LD_VAR 0 1
50007: PPUSH
50008: CALL_OW 248
50012: ST_TO_ADDR
// side := GetSide ( tower ) ;
50013: LD_ADDR_VAR 0 16
50017: PUSH
50018: LD_VAR 0 1
50022: PPUSH
50023: CALL_OW 255
50027: ST_TO_ADDR
// x := GetX ( tower ) ;
50028: LD_ADDR_VAR 0 10
50032: PUSH
50033: LD_VAR 0 1
50037: PPUSH
50038: CALL_OW 250
50042: ST_TO_ADDR
// y := GetY ( tower ) ;
50043: LD_ADDR_VAR 0 11
50047: PUSH
50048: LD_VAR 0 1
50052: PPUSH
50053: CALL_OW 251
50057: ST_TO_ADDR
// if not x or not y then
50058: LD_VAR 0 10
50062: NOT
50063: PUSH
50064: LD_VAR 0 11
50068: NOT
50069: OR
50070: IFFALSE 50074
// exit ;
50072: GO 51107
// weapon := 0 ;
50074: LD_ADDR_VAR 0 18
50078: PUSH
50079: LD_INT 0
50081: ST_TO_ADDR
// fac_list := [ ] ;
50082: LD_ADDR_VAR 0 17
50086: PUSH
50087: EMPTY
50088: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50089: LD_ADDR_VAR 0 6
50093: PUSH
50094: LD_VAR 0 1
50098: PPUSH
50099: CALL_OW 274
50103: PPUSH
50104: LD_VAR 0 2
50108: PPUSH
50109: LD_INT 0
50111: PPUSH
50112: CALL 47678 0 3
50116: PPUSH
50117: LD_INT 30
50119: PUSH
50120: LD_INT 3
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PPUSH
50127: CALL_OW 72
50131: ST_TO_ADDR
// if not factories then
50132: LD_VAR 0 6
50136: NOT
50137: IFFALSE 50141
// exit ;
50139: GO 51107
// for i in factories do
50141: LD_ADDR_VAR 0 8
50145: PUSH
50146: LD_VAR 0 6
50150: PUSH
50151: FOR_IN
50152: IFFALSE 50177
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50154: LD_ADDR_VAR 0 17
50158: PUSH
50159: LD_VAR 0 17
50163: PUSH
50164: LD_VAR 0 8
50168: PPUSH
50169: CALL_OW 478
50173: UNION
50174: ST_TO_ADDR
50175: GO 50151
50177: POP
50178: POP
// if not fac_list then
50179: LD_VAR 0 17
50183: NOT
50184: IFFALSE 50188
// exit ;
50186: GO 51107
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50188: LD_ADDR_VAR 0 5
50192: PUSH
50193: LD_INT 4
50195: PUSH
50196: LD_INT 5
50198: PUSH
50199: LD_INT 9
50201: PUSH
50202: LD_INT 10
50204: PUSH
50205: LD_INT 6
50207: PUSH
50208: LD_INT 7
50210: PUSH
50211: LD_INT 11
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 27
50225: PUSH
50226: LD_INT 28
50228: PUSH
50229: LD_INT 26
50231: PUSH
50232: LD_INT 30
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 43
50243: PUSH
50244: LD_INT 44
50246: PUSH
50247: LD_INT 46
50249: PUSH
50250: LD_INT 45
50252: PUSH
50253: LD_INT 47
50255: PUSH
50256: LD_INT 49
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: LIST
50271: PUSH
50272: LD_VAR 0 12
50276: ARRAY
50277: ST_TO_ADDR
// list := list isect fac_list ;
50278: LD_ADDR_VAR 0 5
50282: PUSH
50283: LD_VAR 0 5
50287: PUSH
50288: LD_VAR 0 17
50292: ISECT
50293: ST_TO_ADDR
// if not list then
50294: LD_VAR 0 5
50298: NOT
50299: IFFALSE 50303
// exit ;
50301: GO 51107
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50303: LD_VAR 0 12
50307: PUSH
50308: LD_INT 3
50310: EQUAL
50311: PUSH
50312: LD_INT 49
50314: PUSH
50315: LD_VAR 0 5
50319: IN
50320: AND
50321: PUSH
50322: LD_INT 31
50324: PPUSH
50325: LD_VAR 0 16
50329: PPUSH
50330: CALL_OW 321
50334: PUSH
50335: LD_INT 2
50337: EQUAL
50338: AND
50339: IFFALSE 50399
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50341: LD_INT 22
50343: PUSH
50344: LD_VAR 0 16
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 35
50355: PUSH
50356: LD_INT 49
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 91
50365: PUSH
50366: LD_VAR 0 1
50370: PUSH
50371: LD_INT 10
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: LIST
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: LIST
50383: PPUSH
50384: CALL_OW 69
50388: NOT
50389: IFFALSE 50399
// weapon := ru_time_lapser ;
50391: LD_ADDR_VAR 0 18
50395: PUSH
50396: LD_INT 49
50398: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50399: LD_VAR 0 12
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: IN
50414: PUSH
50415: LD_INT 11
50417: PUSH
50418: LD_VAR 0 5
50422: IN
50423: PUSH
50424: LD_INT 30
50426: PUSH
50427: LD_VAR 0 5
50431: IN
50432: OR
50433: AND
50434: PUSH
50435: LD_INT 6
50437: PPUSH
50438: LD_VAR 0 16
50442: PPUSH
50443: CALL_OW 321
50447: PUSH
50448: LD_INT 2
50450: EQUAL
50451: AND
50452: IFFALSE 50617
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50454: LD_INT 22
50456: PUSH
50457: LD_VAR 0 16
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 35
50471: PUSH
50472: LD_INT 11
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 35
50481: PUSH
50482: LD_INT 30
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 91
50496: PUSH
50497: LD_VAR 0 1
50501: PUSH
50502: LD_INT 18
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: PPUSH
50515: CALL_OW 69
50519: NOT
50520: PUSH
50521: LD_INT 22
50523: PUSH
50524: LD_VAR 0 16
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 30
50538: PUSH
50539: LD_INT 32
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 30
50548: PUSH
50549: LD_INT 33
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 91
50563: PUSH
50564: LD_VAR 0 1
50568: PUSH
50569: LD_INT 12
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: PUSH
50582: EMPTY
50583: LIST
50584: PPUSH
50585: CALL_OW 69
50589: PUSH
50590: LD_INT 2
50592: GREATER
50593: AND
50594: IFFALSE 50617
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50596: LD_ADDR_VAR 0 18
50600: PUSH
50601: LD_INT 11
50603: PUSH
50604: LD_INT 30
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_VAR 0 12
50615: ARRAY
50616: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50617: LD_VAR 0 18
50621: NOT
50622: PUSH
50623: LD_INT 40
50625: PPUSH
50626: LD_VAR 0 16
50630: PPUSH
50631: CALL_OW 321
50635: PUSH
50636: LD_INT 2
50638: EQUAL
50639: AND
50640: PUSH
50641: LD_INT 7
50643: PUSH
50644: LD_VAR 0 5
50648: IN
50649: PUSH
50650: LD_INT 28
50652: PUSH
50653: LD_VAR 0 5
50657: IN
50658: OR
50659: PUSH
50660: LD_INT 45
50662: PUSH
50663: LD_VAR 0 5
50667: IN
50668: OR
50669: AND
50670: IFFALSE 50924
// begin hex := GetHexInfo ( x , y ) ;
50672: LD_ADDR_VAR 0 4
50676: PUSH
50677: LD_VAR 0 10
50681: PPUSH
50682: LD_VAR 0 11
50686: PPUSH
50687: CALL_OW 546
50691: ST_TO_ADDR
// if hex [ 1 ] then
50692: LD_VAR 0 4
50696: PUSH
50697: LD_INT 1
50699: ARRAY
50700: IFFALSE 50704
// exit ;
50702: GO 51107
// height := hex [ 2 ] ;
50704: LD_ADDR_VAR 0 15
50708: PUSH
50709: LD_VAR 0 4
50713: PUSH
50714: LD_INT 2
50716: ARRAY
50717: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50718: LD_ADDR_VAR 0 14
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: LD_INT 3
50731: PUSH
50732: LD_INT 5
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: ST_TO_ADDR
// for i in tmp do
50741: LD_ADDR_VAR 0 8
50745: PUSH
50746: LD_VAR 0 14
50750: PUSH
50751: FOR_IN
50752: IFFALSE 50922
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50754: LD_ADDR_VAR 0 9
50758: PUSH
50759: LD_VAR 0 10
50763: PPUSH
50764: LD_VAR 0 8
50768: PPUSH
50769: LD_INT 5
50771: PPUSH
50772: CALL_OW 272
50776: PUSH
50777: LD_VAR 0 11
50781: PPUSH
50782: LD_VAR 0 8
50786: PPUSH
50787: LD_INT 5
50789: PPUSH
50790: CALL_OW 273
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50799: LD_VAR 0 9
50803: PUSH
50804: LD_INT 1
50806: ARRAY
50807: PPUSH
50808: LD_VAR 0 9
50812: PUSH
50813: LD_INT 2
50815: ARRAY
50816: PPUSH
50817: CALL_OW 488
50821: IFFALSE 50920
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50823: LD_ADDR_VAR 0 4
50827: PUSH
50828: LD_VAR 0 9
50832: PUSH
50833: LD_INT 1
50835: ARRAY
50836: PPUSH
50837: LD_VAR 0 9
50841: PUSH
50842: LD_INT 2
50844: ARRAY
50845: PPUSH
50846: CALL_OW 546
50850: ST_TO_ADDR
// if hex [ 1 ] then
50851: LD_VAR 0 4
50855: PUSH
50856: LD_INT 1
50858: ARRAY
50859: IFFALSE 50863
// continue ;
50861: GO 50751
// h := hex [ 2 ] ;
50863: LD_ADDR_VAR 0 13
50867: PUSH
50868: LD_VAR 0 4
50872: PUSH
50873: LD_INT 2
50875: ARRAY
50876: ST_TO_ADDR
// if h + 7 < height then
50877: LD_VAR 0 13
50881: PUSH
50882: LD_INT 7
50884: PLUS
50885: PUSH
50886: LD_VAR 0 15
50890: LESS
50891: IFFALSE 50920
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50893: LD_ADDR_VAR 0 18
50897: PUSH
50898: LD_INT 7
50900: PUSH
50901: LD_INT 28
50903: PUSH
50904: LD_INT 45
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: LIST
50911: PUSH
50912: LD_VAR 0 12
50916: ARRAY
50917: ST_TO_ADDR
// break ;
50918: GO 50922
// end ; end ; end ;
50920: GO 50751
50922: POP
50923: POP
// end ; if not weapon then
50924: LD_VAR 0 18
50928: NOT
50929: IFFALSE 50989
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50931: LD_ADDR_VAR 0 5
50935: PUSH
50936: LD_VAR 0 5
50940: PUSH
50941: LD_INT 11
50943: PUSH
50944: LD_INT 30
50946: PUSH
50947: LD_INT 49
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: LIST
50954: DIFF
50955: ST_TO_ADDR
// if not list then
50956: LD_VAR 0 5
50960: NOT
50961: IFFALSE 50965
// exit ;
50963: GO 51107
// weapon := list [ rand ( 1 , list ) ] ;
50965: LD_ADDR_VAR 0 18
50969: PUSH
50970: LD_VAR 0 5
50974: PUSH
50975: LD_INT 1
50977: PPUSH
50978: LD_VAR 0 5
50982: PPUSH
50983: CALL_OW 12
50987: ARRAY
50988: ST_TO_ADDR
// end ; if weapon then
50989: LD_VAR 0 18
50993: IFFALSE 51107
// begin tmp := CostOfWeapon ( weapon ) ;
50995: LD_ADDR_VAR 0 14
50999: PUSH
51000: LD_VAR 0 18
51004: PPUSH
51005: CALL_OW 451
51009: ST_TO_ADDR
// j := GetBase ( tower ) ;
51010: LD_ADDR_VAR 0 9
51014: PUSH
51015: LD_VAR 0 1
51019: PPUSH
51020: CALL_OW 274
51024: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51025: LD_VAR 0 9
51029: PPUSH
51030: LD_INT 1
51032: PPUSH
51033: CALL_OW 275
51037: PUSH
51038: LD_VAR 0 14
51042: PUSH
51043: LD_INT 1
51045: ARRAY
51046: GREATEREQUAL
51047: PUSH
51048: LD_VAR 0 9
51052: PPUSH
51053: LD_INT 2
51055: PPUSH
51056: CALL_OW 275
51060: PUSH
51061: LD_VAR 0 14
51065: PUSH
51066: LD_INT 2
51068: ARRAY
51069: GREATEREQUAL
51070: AND
51071: PUSH
51072: LD_VAR 0 9
51076: PPUSH
51077: LD_INT 3
51079: PPUSH
51080: CALL_OW 275
51084: PUSH
51085: LD_VAR 0 14
51089: PUSH
51090: LD_INT 3
51092: ARRAY
51093: GREATEREQUAL
51094: AND
51095: IFFALSE 51107
// result := weapon ;
51097: LD_ADDR_VAR 0 3
51101: PUSH
51102: LD_VAR 0 18
51106: ST_TO_ADDR
// end ; end ;
51107: LD_VAR 0 3
51111: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51112: LD_INT 0
51114: PPUSH
51115: PPUSH
// result := true ;
51116: LD_ADDR_VAR 0 3
51120: PUSH
51121: LD_INT 1
51123: ST_TO_ADDR
// if array1 = array2 then
51124: LD_VAR 0 1
51128: PUSH
51129: LD_VAR 0 2
51133: EQUAL
51134: IFFALSE 51194
// begin for i = 1 to array1 do
51136: LD_ADDR_VAR 0 4
51140: PUSH
51141: DOUBLE
51142: LD_INT 1
51144: DEC
51145: ST_TO_ADDR
51146: LD_VAR 0 1
51150: PUSH
51151: FOR_TO
51152: IFFALSE 51190
// if array1 [ i ] <> array2 [ i ] then
51154: LD_VAR 0 1
51158: PUSH
51159: LD_VAR 0 4
51163: ARRAY
51164: PUSH
51165: LD_VAR 0 2
51169: PUSH
51170: LD_VAR 0 4
51174: ARRAY
51175: NONEQUAL
51176: IFFALSE 51188
// begin result := false ;
51178: LD_ADDR_VAR 0 3
51182: PUSH
51183: LD_INT 0
51185: ST_TO_ADDR
// break ;
51186: GO 51190
// end ;
51188: GO 51151
51190: POP
51191: POP
// end else
51192: GO 51202
// result := false ;
51194: LD_ADDR_VAR 0 3
51198: PUSH
51199: LD_INT 0
51201: ST_TO_ADDR
// end ;
51202: LD_VAR 0 3
51206: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51207: LD_INT 0
51209: PPUSH
51210: PPUSH
// if not array1 or not array2 then
51211: LD_VAR 0 1
51215: NOT
51216: PUSH
51217: LD_VAR 0 2
51221: NOT
51222: OR
51223: IFFALSE 51227
// exit ;
51225: GO 51291
// result := true ;
51227: LD_ADDR_VAR 0 3
51231: PUSH
51232: LD_INT 1
51234: ST_TO_ADDR
// for i = 1 to array1 do
51235: LD_ADDR_VAR 0 4
51239: PUSH
51240: DOUBLE
51241: LD_INT 1
51243: DEC
51244: ST_TO_ADDR
51245: LD_VAR 0 1
51249: PUSH
51250: FOR_TO
51251: IFFALSE 51289
// if array1 [ i ] <> array2 [ i ] then
51253: LD_VAR 0 1
51257: PUSH
51258: LD_VAR 0 4
51262: ARRAY
51263: PUSH
51264: LD_VAR 0 2
51268: PUSH
51269: LD_VAR 0 4
51273: ARRAY
51274: NONEQUAL
51275: IFFALSE 51287
// begin result := false ;
51277: LD_ADDR_VAR 0 3
51281: PUSH
51282: LD_INT 0
51284: ST_TO_ADDR
// break ;
51285: GO 51289
// end ;
51287: GO 51250
51289: POP
51290: POP
// end ;
51291: LD_VAR 0 3
51295: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51296: LD_INT 0
51298: PPUSH
51299: PPUSH
51300: PPUSH
// pom := GetBase ( fac ) ;
51301: LD_ADDR_VAR 0 5
51305: PUSH
51306: LD_VAR 0 1
51310: PPUSH
51311: CALL_OW 274
51315: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51316: LD_ADDR_VAR 0 4
51320: PUSH
51321: LD_VAR 0 2
51325: PUSH
51326: LD_INT 1
51328: ARRAY
51329: PPUSH
51330: LD_VAR 0 2
51334: PUSH
51335: LD_INT 2
51337: ARRAY
51338: PPUSH
51339: LD_VAR 0 2
51343: PUSH
51344: LD_INT 3
51346: ARRAY
51347: PPUSH
51348: LD_VAR 0 2
51352: PUSH
51353: LD_INT 4
51355: ARRAY
51356: PPUSH
51357: CALL_OW 449
51361: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51362: LD_ADDR_VAR 0 3
51366: PUSH
51367: LD_VAR 0 5
51371: PPUSH
51372: LD_INT 1
51374: PPUSH
51375: CALL_OW 275
51379: PUSH
51380: LD_VAR 0 4
51384: PUSH
51385: LD_INT 1
51387: ARRAY
51388: GREATEREQUAL
51389: PUSH
51390: LD_VAR 0 5
51394: PPUSH
51395: LD_INT 2
51397: PPUSH
51398: CALL_OW 275
51402: PUSH
51403: LD_VAR 0 4
51407: PUSH
51408: LD_INT 2
51410: ARRAY
51411: GREATEREQUAL
51412: AND
51413: PUSH
51414: LD_VAR 0 5
51418: PPUSH
51419: LD_INT 3
51421: PPUSH
51422: CALL_OW 275
51426: PUSH
51427: LD_VAR 0 4
51431: PUSH
51432: LD_INT 3
51434: ARRAY
51435: GREATEREQUAL
51436: AND
51437: ST_TO_ADDR
// end ;
51438: LD_VAR 0 3
51442: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51443: LD_INT 0
51445: PPUSH
51446: PPUSH
51447: PPUSH
51448: PPUSH
// pom := GetBase ( building ) ;
51449: LD_ADDR_VAR 0 3
51453: PUSH
51454: LD_VAR 0 1
51458: PPUSH
51459: CALL_OW 274
51463: ST_TO_ADDR
// if not pom then
51464: LD_VAR 0 3
51468: NOT
51469: IFFALSE 51473
// exit ;
51471: GO 51643
// btype := GetBType ( building ) ;
51473: LD_ADDR_VAR 0 5
51477: PUSH
51478: LD_VAR 0 1
51482: PPUSH
51483: CALL_OW 266
51487: ST_TO_ADDR
// if btype = b_armoury then
51488: LD_VAR 0 5
51492: PUSH
51493: LD_INT 4
51495: EQUAL
51496: IFFALSE 51506
// btype := b_barracks ;
51498: LD_ADDR_VAR 0 5
51502: PUSH
51503: LD_INT 5
51505: ST_TO_ADDR
// if btype = b_depot then
51506: LD_VAR 0 5
51510: PUSH
51511: LD_INT 0
51513: EQUAL
51514: IFFALSE 51524
// btype := b_warehouse ;
51516: LD_ADDR_VAR 0 5
51520: PUSH
51521: LD_INT 1
51523: ST_TO_ADDR
// if btype = b_workshop then
51524: LD_VAR 0 5
51528: PUSH
51529: LD_INT 2
51531: EQUAL
51532: IFFALSE 51542
// btype := b_factory ;
51534: LD_ADDR_VAR 0 5
51538: PUSH
51539: LD_INT 3
51541: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51542: LD_ADDR_VAR 0 4
51546: PUSH
51547: LD_VAR 0 5
51551: PPUSH
51552: LD_VAR 0 1
51556: PPUSH
51557: CALL_OW 248
51561: PPUSH
51562: CALL_OW 450
51566: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51567: LD_ADDR_VAR 0 2
51571: PUSH
51572: LD_VAR 0 3
51576: PPUSH
51577: LD_INT 1
51579: PPUSH
51580: CALL_OW 275
51584: PUSH
51585: LD_VAR 0 4
51589: PUSH
51590: LD_INT 1
51592: ARRAY
51593: GREATEREQUAL
51594: PUSH
51595: LD_VAR 0 3
51599: PPUSH
51600: LD_INT 2
51602: PPUSH
51603: CALL_OW 275
51607: PUSH
51608: LD_VAR 0 4
51612: PUSH
51613: LD_INT 2
51615: ARRAY
51616: GREATEREQUAL
51617: AND
51618: PUSH
51619: LD_VAR 0 3
51623: PPUSH
51624: LD_INT 3
51626: PPUSH
51627: CALL_OW 275
51631: PUSH
51632: LD_VAR 0 4
51636: PUSH
51637: LD_INT 3
51639: ARRAY
51640: GREATEREQUAL
51641: AND
51642: ST_TO_ADDR
// end ;
51643: LD_VAR 0 2
51647: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51648: LD_INT 0
51650: PPUSH
51651: PPUSH
51652: PPUSH
// pom := GetBase ( building ) ;
51653: LD_ADDR_VAR 0 4
51657: PUSH
51658: LD_VAR 0 1
51662: PPUSH
51663: CALL_OW 274
51667: ST_TO_ADDR
// if not pom then
51668: LD_VAR 0 4
51672: NOT
51673: IFFALSE 51677
// exit ;
51675: GO 51778
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51677: LD_ADDR_VAR 0 5
51681: PUSH
51682: LD_VAR 0 2
51686: PPUSH
51687: LD_VAR 0 1
51691: PPUSH
51692: CALL_OW 248
51696: PPUSH
51697: CALL_OW 450
51701: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51702: LD_ADDR_VAR 0 3
51706: PUSH
51707: LD_VAR 0 4
51711: PPUSH
51712: LD_INT 1
51714: PPUSH
51715: CALL_OW 275
51719: PUSH
51720: LD_VAR 0 5
51724: PUSH
51725: LD_INT 1
51727: ARRAY
51728: GREATEREQUAL
51729: PUSH
51730: LD_VAR 0 4
51734: PPUSH
51735: LD_INT 2
51737: PPUSH
51738: CALL_OW 275
51742: PUSH
51743: LD_VAR 0 5
51747: PUSH
51748: LD_INT 2
51750: ARRAY
51751: GREATEREQUAL
51752: AND
51753: PUSH
51754: LD_VAR 0 4
51758: PPUSH
51759: LD_INT 3
51761: PPUSH
51762: CALL_OW 275
51766: PUSH
51767: LD_VAR 0 5
51771: PUSH
51772: LD_INT 3
51774: ARRAY
51775: GREATEREQUAL
51776: AND
51777: ST_TO_ADDR
// end ;
51778: LD_VAR 0 3
51782: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51783: LD_INT 0
51785: PPUSH
51786: PPUSH
51787: PPUSH
51788: PPUSH
51789: PPUSH
51790: PPUSH
51791: PPUSH
51792: PPUSH
51793: PPUSH
51794: PPUSH
51795: PPUSH
// result := false ;
51796: LD_ADDR_VAR 0 8
51800: PUSH
51801: LD_INT 0
51803: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51804: LD_VAR 0 5
51808: NOT
51809: PUSH
51810: LD_VAR 0 1
51814: NOT
51815: OR
51816: PUSH
51817: LD_VAR 0 2
51821: NOT
51822: OR
51823: PUSH
51824: LD_VAR 0 3
51828: NOT
51829: OR
51830: IFFALSE 51834
// exit ;
51832: GO 52648
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51834: LD_ADDR_VAR 0 14
51838: PUSH
51839: LD_VAR 0 1
51843: PPUSH
51844: LD_VAR 0 2
51848: PPUSH
51849: LD_VAR 0 3
51853: PPUSH
51854: LD_VAR 0 4
51858: PPUSH
51859: LD_VAR 0 5
51863: PUSH
51864: LD_INT 1
51866: ARRAY
51867: PPUSH
51868: CALL_OW 248
51872: PPUSH
51873: LD_INT 0
51875: PPUSH
51876: CALL 53881 0 6
51880: ST_TO_ADDR
// if not hexes then
51881: LD_VAR 0 14
51885: NOT
51886: IFFALSE 51890
// exit ;
51888: GO 52648
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51890: LD_ADDR_VAR 0 17
51894: PUSH
51895: LD_VAR 0 5
51899: PPUSH
51900: LD_INT 22
51902: PUSH
51903: LD_VAR 0 13
51907: PPUSH
51908: CALL_OW 255
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: LD_INT 30
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 30
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: LIST
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PPUSH
51949: CALL_OW 72
51953: ST_TO_ADDR
// for i = 1 to hexes do
51954: LD_ADDR_VAR 0 9
51958: PUSH
51959: DOUBLE
51960: LD_INT 1
51962: DEC
51963: ST_TO_ADDR
51964: LD_VAR 0 14
51968: PUSH
51969: FOR_TO
51970: IFFALSE 52646
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51972: LD_ADDR_VAR 0 13
51976: PUSH
51977: LD_VAR 0 14
51981: PUSH
51982: LD_VAR 0 9
51986: ARRAY
51987: PUSH
51988: LD_INT 1
51990: ARRAY
51991: PPUSH
51992: LD_VAR 0 14
51996: PUSH
51997: LD_VAR 0 9
52001: ARRAY
52002: PUSH
52003: LD_INT 2
52005: ARRAY
52006: PPUSH
52007: CALL_OW 428
52011: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52012: LD_VAR 0 14
52016: PUSH
52017: LD_VAR 0 9
52021: ARRAY
52022: PUSH
52023: LD_INT 1
52025: ARRAY
52026: PPUSH
52027: LD_VAR 0 14
52031: PUSH
52032: LD_VAR 0 9
52036: ARRAY
52037: PUSH
52038: LD_INT 2
52040: ARRAY
52041: PPUSH
52042: CALL_OW 351
52046: PUSH
52047: LD_VAR 0 14
52051: PUSH
52052: LD_VAR 0 9
52056: ARRAY
52057: PUSH
52058: LD_INT 1
52060: ARRAY
52061: PPUSH
52062: LD_VAR 0 14
52066: PUSH
52067: LD_VAR 0 9
52071: ARRAY
52072: PUSH
52073: LD_INT 2
52075: ARRAY
52076: PPUSH
52077: CALL_OW 488
52081: NOT
52082: OR
52083: PUSH
52084: LD_VAR 0 13
52088: PPUSH
52089: CALL_OW 247
52093: PUSH
52094: LD_INT 3
52096: EQUAL
52097: OR
52098: IFFALSE 52104
// exit ;
52100: POP
52101: POP
52102: GO 52648
// if not tmp then
52104: LD_VAR 0 13
52108: NOT
52109: IFFALSE 52113
// continue ;
52111: GO 51969
// result := true ;
52113: LD_ADDR_VAR 0 8
52117: PUSH
52118: LD_INT 1
52120: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52121: LD_VAR 0 6
52125: PUSH
52126: LD_VAR 0 13
52130: PPUSH
52131: CALL_OW 247
52135: PUSH
52136: LD_INT 2
52138: EQUAL
52139: AND
52140: PUSH
52141: LD_VAR 0 13
52145: PPUSH
52146: CALL_OW 263
52150: PUSH
52151: LD_INT 1
52153: EQUAL
52154: AND
52155: IFFALSE 52319
// begin if IsDrivenBy ( tmp ) then
52157: LD_VAR 0 13
52161: PPUSH
52162: CALL_OW 311
52166: IFFALSE 52170
// continue ;
52168: GO 51969
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52170: LD_VAR 0 6
52174: PPUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 60
52180: PUSH
52181: EMPTY
52182: LIST
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: LD_INT 55
52193: PUSH
52194: EMPTY
52195: LIST
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PPUSH
52205: CALL_OW 72
52209: IFFALSE 52317
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52211: LD_ADDR_VAR 0 18
52215: PUSH
52216: LD_VAR 0 6
52220: PPUSH
52221: LD_INT 3
52223: PUSH
52224: LD_INT 60
52226: PUSH
52227: EMPTY
52228: LIST
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 3
52236: PUSH
52237: LD_INT 55
52239: PUSH
52240: EMPTY
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PPUSH
52251: CALL_OW 72
52255: PUSH
52256: LD_INT 1
52258: ARRAY
52259: ST_TO_ADDR
// if IsInUnit ( driver ) then
52260: LD_VAR 0 18
52264: PPUSH
52265: CALL_OW 310
52269: IFFALSE 52280
// ComExit ( driver ) ;
52271: LD_VAR 0 18
52275: PPUSH
52276: CALL 77642 0 1
// AddComEnterUnit ( driver , tmp ) ;
52280: LD_VAR 0 18
52284: PPUSH
52285: LD_VAR 0 13
52289: PPUSH
52290: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52294: LD_VAR 0 18
52298: PPUSH
52299: LD_VAR 0 7
52303: PPUSH
52304: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52308: LD_VAR 0 18
52312: PPUSH
52313: CALL_OW 181
// end ; continue ;
52317: GO 51969
// end ; if not cleaners or not tmp in cleaners then
52319: LD_VAR 0 6
52323: NOT
52324: PUSH
52325: LD_VAR 0 13
52329: PUSH
52330: LD_VAR 0 6
52334: IN
52335: NOT
52336: OR
52337: IFFALSE 52644
// begin if dep then
52339: LD_VAR 0 17
52343: IFFALSE 52479
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52345: LD_ADDR_VAR 0 16
52349: PUSH
52350: LD_VAR 0 17
52354: PUSH
52355: LD_INT 1
52357: ARRAY
52358: PPUSH
52359: CALL_OW 250
52363: PPUSH
52364: LD_VAR 0 17
52368: PUSH
52369: LD_INT 1
52371: ARRAY
52372: PPUSH
52373: CALL_OW 254
52377: PPUSH
52378: LD_INT 5
52380: PPUSH
52381: CALL_OW 272
52385: PUSH
52386: LD_VAR 0 17
52390: PUSH
52391: LD_INT 1
52393: ARRAY
52394: PPUSH
52395: CALL_OW 251
52399: PPUSH
52400: LD_VAR 0 17
52404: PUSH
52405: LD_INT 1
52407: ARRAY
52408: PPUSH
52409: CALL_OW 254
52413: PPUSH
52414: LD_INT 5
52416: PPUSH
52417: CALL_OW 273
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52426: LD_VAR 0 16
52430: PUSH
52431: LD_INT 1
52433: ARRAY
52434: PPUSH
52435: LD_VAR 0 16
52439: PUSH
52440: LD_INT 2
52442: ARRAY
52443: PPUSH
52444: CALL_OW 488
52448: IFFALSE 52479
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52450: LD_VAR 0 13
52454: PPUSH
52455: LD_VAR 0 16
52459: PUSH
52460: LD_INT 1
52462: ARRAY
52463: PPUSH
52464: LD_VAR 0 16
52468: PUSH
52469: LD_INT 2
52471: ARRAY
52472: PPUSH
52473: CALL_OW 111
// continue ;
52477: GO 51969
// end ; end ; r := GetDir ( tmp ) ;
52479: LD_ADDR_VAR 0 15
52483: PUSH
52484: LD_VAR 0 13
52488: PPUSH
52489: CALL_OW 254
52493: ST_TO_ADDR
// if r = 5 then
52494: LD_VAR 0 15
52498: PUSH
52499: LD_INT 5
52501: EQUAL
52502: IFFALSE 52512
// r := 0 ;
52504: LD_ADDR_VAR 0 15
52508: PUSH
52509: LD_INT 0
52511: ST_TO_ADDR
// for j = r to 5 do
52512: LD_ADDR_VAR 0 10
52516: PUSH
52517: DOUBLE
52518: LD_VAR 0 15
52522: DEC
52523: ST_TO_ADDR
52524: LD_INT 5
52526: PUSH
52527: FOR_TO
52528: IFFALSE 52642
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52530: LD_ADDR_VAR 0 11
52534: PUSH
52535: LD_VAR 0 13
52539: PPUSH
52540: CALL_OW 250
52544: PPUSH
52545: LD_VAR 0 10
52549: PPUSH
52550: LD_INT 2
52552: PPUSH
52553: CALL_OW 272
52557: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52558: LD_ADDR_VAR 0 12
52562: PUSH
52563: LD_VAR 0 13
52567: PPUSH
52568: CALL_OW 251
52572: PPUSH
52573: LD_VAR 0 10
52577: PPUSH
52578: LD_INT 2
52580: PPUSH
52581: CALL_OW 273
52585: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52586: LD_VAR 0 11
52590: PPUSH
52591: LD_VAR 0 12
52595: PPUSH
52596: CALL_OW 488
52600: PUSH
52601: LD_VAR 0 11
52605: PPUSH
52606: LD_VAR 0 12
52610: PPUSH
52611: CALL_OW 428
52615: NOT
52616: AND
52617: IFFALSE 52640
// begin ComMoveXY ( tmp , _x , _y ) ;
52619: LD_VAR 0 13
52623: PPUSH
52624: LD_VAR 0 11
52628: PPUSH
52629: LD_VAR 0 12
52633: PPUSH
52634: CALL_OW 111
// break ;
52638: GO 52642
// end ; end ;
52640: GO 52527
52642: POP
52643: POP
// end ; end ;
52644: GO 51969
52646: POP
52647: POP
// end ;
52648: LD_VAR 0 8
52652: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52653: LD_INT 0
52655: PPUSH
// result := true ;
52656: LD_ADDR_VAR 0 3
52660: PUSH
52661: LD_INT 1
52663: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52664: LD_VAR 0 2
52668: PUSH
52669: LD_INT 24
52671: DOUBLE
52672: EQUAL
52673: IFTRUE 52683
52675: LD_INT 33
52677: DOUBLE
52678: EQUAL
52679: IFTRUE 52683
52681: GO 52708
52683: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52684: LD_ADDR_VAR 0 3
52688: PUSH
52689: LD_INT 32
52691: PPUSH
52692: LD_VAR 0 1
52696: PPUSH
52697: CALL_OW 321
52701: PUSH
52702: LD_INT 2
52704: EQUAL
52705: ST_TO_ADDR
52706: GO 53024
52708: LD_INT 20
52710: DOUBLE
52711: EQUAL
52712: IFTRUE 52716
52714: GO 52741
52716: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52717: LD_ADDR_VAR 0 3
52721: PUSH
52722: LD_INT 6
52724: PPUSH
52725: LD_VAR 0 1
52729: PPUSH
52730: CALL_OW 321
52734: PUSH
52735: LD_INT 2
52737: EQUAL
52738: ST_TO_ADDR
52739: GO 53024
52741: LD_INT 22
52743: DOUBLE
52744: EQUAL
52745: IFTRUE 52755
52747: LD_INT 36
52749: DOUBLE
52750: EQUAL
52751: IFTRUE 52755
52753: GO 52780
52755: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52756: LD_ADDR_VAR 0 3
52760: PUSH
52761: LD_INT 15
52763: PPUSH
52764: LD_VAR 0 1
52768: PPUSH
52769: CALL_OW 321
52773: PUSH
52774: LD_INT 2
52776: EQUAL
52777: ST_TO_ADDR
52778: GO 53024
52780: LD_INT 30
52782: DOUBLE
52783: EQUAL
52784: IFTRUE 52788
52786: GO 52813
52788: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52789: LD_ADDR_VAR 0 3
52793: PUSH
52794: LD_INT 20
52796: PPUSH
52797: LD_VAR 0 1
52801: PPUSH
52802: CALL_OW 321
52806: PUSH
52807: LD_INT 2
52809: EQUAL
52810: ST_TO_ADDR
52811: GO 53024
52813: LD_INT 28
52815: DOUBLE
52816: EQUAL
52817: IFTRUE 52827
52819: LD_INT 21
52821: DOUBLE
52822: EQUAL
52823: IFTRUE 52827
52825: GO 52852
52827: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52828: LD_ADDR_VAR 0 3
52832: PUSH
52833: LD_INT 21
52835: PPUSH
52836: LD_VAR 0 1
52840: PPUSH
52841: CALL_OW 321
52845: PUSH
52846: LD_INT 2
52848: EQUAL
52849: ST_TO_ADDR
52850: GO 53024
52852: LD_INT 16
52854: DOUBLE
52855: EQUAL
52856: IFTRUE 52860
52858: GO 52885
52860: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52861: LD_ADDR_VAR 0 3
52865: PUSH
52866: LD_INT 84
52868: PPUSH
52869: LD_VAR 0 1
52873: PPUSH
52874: CALL_OW 321
52878: PUSH
52879: LD_INT 2
52881: EQUAL
52882: ST_TO_ADDR
52883: GO 53024
52885: LD_INT 19
52887: DOUBLE
52888: EQUAL
52889: IFTRUE 52899
52891: LD_INT 23
52893: DOUBLE
52894: EQUAL
52895: IFTRUE 52899
52897: GO 52924
52899: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52900: LD_ADDR_VAR 0 3
52904: PUSH
52905: LD_INT 83
52907: PPUSH
52908: LD_VAR 0 1
52912: PPUSH
52913: CALL_OW 321
52917: PUSH
52918: LD_INT 2
52920: EQUAL
52921: ST_TO_ADDR
52922: GO 53024
52924: LD_INT 17
52926: DOUBLE
52927: EQUAL
52928: IFTRUE 52932
52930: GO 52957
52932: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52933: LD_ADDR_VAR 0 3
52937: PUSH
52938: LD_INT 39
52940: PPUSH
52941: LD_VAR 0 1
52945: PPUSH
52946: CALL_OW 321
52950: PUSH
52951: LD_INT 2
52953: EQUAL
52954: ST_TO_ADDR
52955: GO 53024
52957: LD_INT 18
52959: DOUBLE
52960: EQUAL
52961: IFTRUE 52965
52963: GO 52990
52965: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52966: LD_ADDR_VAR 0 3
52970: PUSH
52971: LD_INT 40
52973: PPUSH
52974: LD_VAR 0 1
52978: PPUSH
52979: CALL_OW 321
52983: PUSH
52984: LD_INT 2
52986: EQUAL
52987: ST_TO_ADDR
52988: GO 53024
52990: LD_INT 27
52992: DOUBLE
52993: EQUAL
52994: IFTRUE 52998
52996: GO 53023
52998: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52999: LD_ADDR_VAR 0 3
53003: PUSH
53004: LD_INT 35
53006: PPUSH
53007: LD_VAR 0 1
53011: PPUSH
53012: CALL_OW 321
53016: PUSH
53017: LD_INT 2
53019: EQUAL
53020: ST_TO_ADDR
53021: GO 53024
53023: POP
// end ;
53024: LD_VAR 0 3
53028: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53029: LD_INT 0
53031: PPUSH
53032: PPUSH
53033: PPUSH
53034: PPUSH
53035: PPUSH
53036: PPUSH
53037: PPUSH
53038: PPUSH
53039: PPUSH
53040: PPUSH
53041: PPUSH
// result := false ;
53042: LD_ADDR_VAR 0 6
53046: PUSH
53047: LD_INT 0
53049: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53050: LD_VAR 0 1
53054: NOT
53055: PUSH
53056: LD_VAR 0 1
53060: PPUSH
53061: CALL_OW 266
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: IN
53076: NOT
53077: OR
53078: PUSH
53079: LD_VAR 0 2
53083: NOT
53084: OR
53085: PUSH
53086: LD_VAR 0 5
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 4
53105: PUSH
53106: LD_INT 5
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: IN
53117: NOT
53118: OR
53119: PUSH
53120: LD_VAR 0 3
53124: PPUSH
53125: LD_VAR 0 4
53129: PPUSH
53130: CALL_OW 488
53134: NOT
53135: OR
53136: IFFALSE 53140
// exit ;
53138: GO 53876
// side := GetSide ( depot ) ;
53140: LD_ADDR_VAR 0 9
53144: PUSH
53145: LD_VAR 0 1
53149: PPUSH
53150: CALL_OW 255
53154: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53155: LD_VAR 0 9
53159: PPUSH
53160: LD_VAR 0 2
53164: PPUSH
53165: CALL 52653 0 2
53169: NOT
53170: IFFALSE 53174
// exit ;
53172: GO 53876
// pom := GetBase ( depot ) ;
53174: LD_ADDR_VAR 0 10
53178: PUSH
53179: LD_VAR 0 1
53183: PPUSH
53184: CALL_OW 274
53188: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53189: LD_ADDR_VAR 0 11
53193: PUSH
53194: LD_VAR 0 2
53198: PPUSH
53199: LD_VAR 0 1
53203: PPUSH
53204: CALL_OW 248
53208: PPUSH
53209: CALL_OW 450
53213: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53214: LD_VAR 0 10
53218: PPUSH
53219: LD_INT 1
53221: PPUSH
53222: CALL_OW 275
53226: PUSH
53227: LD_VAR 0 11
53231: PUSH
53232: LD_INT 1
53234: ARRAY
53235: GREATEREQUAL
53236: PUSH
53237: LD_VAR 0 10
53241: PPUSH
53242: LD_INT 2
53244: PPUSH
53245: CALL_OW 275
53249: PUSH
53250: LD_VAR 0 11
53254: PUSH
53255: LD_INT 2
53257: ARRAY
53258: GREATEREQUAL
53259: AND
53260: PUSH
53261: LD_VAR 0 10
53265: PPUSH
53266: LD_INT 3
53268: PPUSH
53269: CALL_OW 275
53273: PUSH
53274: LD_VAR 0 11
53278: PUSH
53279: LD_INT 3
53281: ARRAY
53282: GREATEREQUAL
53283: AND
53284: NOT
53285: IFFALSE 53289
// exit ;
53287: GO 53876
// if GetBType ( depot ) = b_depot then
53289: LD_VAR 0 1
53293: PPUSH
53294: CALL_OW 266
53298: PUSH
53299: LD_INT 0
53301: EQUAL
53302: IFFALSE 53314
// dist := 28 else
53304: LD_ADDR_VAR 0 14
53308: PUSH
53309: LD_INT 28
53311: ST_TO_ADDR
53312: GO 53322
// dist := 36 ;
53314: LD_ADDR_VAR 0 14
53318: PUSH
53319: LD_INT 36
53321: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53322: LD_VAR 0 1
53326: PPUSH
53327: LD_VAR 0 3
53331: PPUSH
53332: LD_VAR 0 4
53336: PPUSH
53337: CALL_OW 297
53341: PUSH
53342: LD_VAR 0 14
53346: GREATER
53347: IFFALSE 53351
// exit ;
53349: GO 53876
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53351: LD_ADDR_VAR 0 12
53355: PUSH
53356: LD_VAR 0 2
53360: PPUSH
53361: LD_VAR 0 3
53365: PPUSH
53366: LD_VAR 0 4
53370: PPUSH
53371: LD_VAR 0 5
53375: PPUSH
53376: LD_VAR 0 1
53380: PPUSH
53381: CALL_OW 248
53385: PPUSH
53386: LD_INT 0
53388: PPUSH
53389: CALL 53881 0 6
53393: ST_TO_ADDR
// if not hexes then
53394: LD_VAR 0 12
53398: NOT
53399: IFFALSE 53403
// exit ;
53401: GO 53876
// hex := GetHexInfo ( x , y ) ;
53403: LD_ADDR_VAR 0 15
53407: PUSH
53408: LD_VAR 0 3
53412: PPUSH
53413: LD_VAR 0 4
53417: PPUSH
53418: CALL_OW 546
53422: ST_TO_ADDR
// if hex [ 1 ] then
53423: LD_VAR 0 15
53427: PUSH
53428: LD_INT 1
53430: ARRAY
53431: IFFALSE 53435
// exit ;
53433: GO 53876
// height := hex [ 2 ] ;
53435: LD_ADDR_VAR 0 13
53439: PUSH
53440: LD_VAR 0 15
53444: PUSH
53445: LD_INT 2
53447: ARRAY
53448: ST_TO_ADDR
// for i = 1 to hexes do
53449: LD_ADDR_VAR 0 7
53453: PUSH
53454: DOUBLE
53455: LD_INT 1
53457: DEC
53458: ST_TO_ADDR
53459: LD_VAR 0 12
53463: PUSH
53464: FOR_TO
53465: IFFALSE 53795
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53467: LD_VAR 0 12
53471: PUSH
53472: LD_VAR 0 7
53476: ARRAY
53477: PUSH
53478: LD_INT 1
53480: ARRAY
53481: PPUSH
53482: LD_VAR 0 12
53486: PUSH
53487: LD_VAR 0 7
53491: ARRAY
53492: PUSH
53493: LD_INT 2
53495: ARRAY
53496: PPUSH
53497: CALL_OW 488
53501: NOT
53502: PUSH
53503: LD_VAR 0 12
53507: PUSH
53508: LD_VAR 0 7
53512: ARRAY
53513: PUSH
53514: LD_INT 1
53516: ARRAY
53517: PPUSH
53518: LD_VAR 0 12
53522: PUSH
53523: LD_VAR 0 7
53527: ARRAY
53528: PUSH
53529: LD_INT 2
53531: ARRAY
53532: PPUSH
53533: CALL_OW 428
53537: PUSH
53538: LD_INT 0
53540: GREATER
53541: OR
53542: PUSH
53543: LD_VAR 0 12
53547: PUSH
53548: LD_VAR 0 7
53552: ARRAY
53553: PUSH
53554: LD_INT 1
53556: ARRAY
53557: PPUSH
53558: LD_VAR 0 12
53562: PUSH
53563: LD_VAR 0 7
53567: ARRAY
53568: PUSH
53569: LD_INT 2
53571: ARRAY
53572: PPUSH
53573: CALL_OW 351
53577: OR
53578: IFFALSE 53584
// exit ;
53580: POP
53581: POP
53582: GO 53876
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53584: LD_ADDR_VAR 0 8
53588: PUSH
53589: LD_VAR 0 12
53593: PUSH
53594: LD_VAR 0 7
53598: ARRAY
53599: PUSH
53600: LD_INT 1
53602: ARRAY
53603: PPUSH
53604: LD_VAR 0 12
53608: PUSH
53609: LD_VAR 0 7
53613: ARRAY
53614: PUSH
53615: LD_INT 2
53617: ARRAY
53618: PPUSH
53619: CALL_OW 546
53623: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53624: LD_VAR 0 8
53628: PUSH
53629: LD_INT 1
53631: ARRAY
53632: PUSH
53633: LD_VAR 0 8
53637: PUSH
53638: LD_INT 2
53640: ARRAY
53641: PUSH
53642: LD_VAR 0 13
53646: PUSH
53647: LD_INT 2
53649: PLUS
53650: GREATER
53651: OR
53652: PUSH
53653: LD_VAR 0 8
53657: PUSH
53658: LD_INT 2
53660: ARRAY
53661: PUSH
53662: LD_VAR 0 13
53666: PUSH
53667: LD_INT 2
53669: MINUS
53670: LESS
53671: OR
53672: PUSH
53673: LD_VAR 0 8
53677: PUSH
53678: LD_INT 3
53680: ARRAY
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 8
53687: PUSH
53688: LD_INT 9
53690: PUSH
53691: LD_INT 10
53693: PUSH
53694: LD_INT 11
53696: PUSH
53697: LD_INT 12
53699: PUSH
53700: LD_INT 13
53702: PUSH
53703: LD_INT 16
53705: PUSH
53706: LD_INT 17
53708: PUSH
53709: LD_INT 18
53711: PUSH
53712: LD_INT 19
53714: PUSH
53715: LD_INT 20
53717: PUSH
53718: LD_INT 21
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: IN
53736: NOT
53737: OR
53738: PUSH
53739: LD_VAR 0 8
53743: PUSH
53744: LD_INT 5
53746: ARRAY
53747: NOT
53748: OR
53749: PUSH
53750: LD_VAR 0 8
53754: PUSH
53755: LD_INT 6
53757: ARRAY
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: LD_INT 7
53767: PUSH
53768: LD_INT 9
53770: PUSH
53771: LD_INT 10
53773: PUSH
53774: LD_INT 11
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: IN
53785: NOT
53786: OR
53787: IFFALSE 53793
// exit ;
53789: POP
53790: POP
53791: GO 53876
// end ;
53793: GO 53464
53795: POP
53796: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53797: LD_VAR 0 9
53801: PPUSH
53802: LD_VAR 0 3
53806: PPUSH
53807: LD_VAR 0 4
53811: PPUSH
53812: LD_INT 20
53814: PPUSH
53815: CALL 45828 0 4
53819: PUSH
53820: LD_INT 4
53822: ARRAY
53823: IFFALSE 53827
// exit ;
53825: GO 53876
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53827: LD_VAR 0 2
53831: PUSH
53832: LD_INT 29
53834: PUSH
53835: LD_INT 30
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: IN
53842: PUSH
53843: LD_VAR 0 3
53847: PPUSH
53848: LD_VAR 0 4
53852: PPUSH
53853: LD_VAR 0 9
53857: PPUSH
53858: CALL_OW 440
53862: NOT
53863: AND
53864: IFFALSE 53868
// exit ;
53866: GO 53876
// result := true ;
53868: LD_ADDR_VAR 0 6
53872: PUSH
53873: LD_INT 1
53875: ST_TO_ADDR
// end ;
53876: LD_VAR 0 6
53880: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53881: LD_INT 0
53883: PPUSH
53884: PPUSH
53885: PPUSH
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
53892: PPUSH
53893: PPUSH
53894: PPUSH
53895: PPUSH
53896: PPUSH
53897: PPUSH
53898: PPUSH
53899: PPUSH
53900: PPUSH
53901: PPUSH
53902: PPUSH
53903: PPUSH
53904: PPUSH
53905: PPUSH
53906: PPUSH
53907: PPUSH
53908: PPUSH
53909: PPUSH
53910: PPUSH
53911: PPUSH
53912: PPUSH
53913: PPUSH
53914: PPUSH
53915: PPUSH
53916: PPUSH
53917: PPUSH
53918: PPUSH
53919: PPUSH
53920: PPUSH
53921: PPUSH
53922: PPUSH
53923: PPUSH
53924: PPUSH
53925: PPUSH
53926: PPUSH
53927: PPUSH
53928: PPUSH
53929: PPUSH
53930: PPUSH
53931: PPUSH
53932: PPUSH
53933: PPUSH
53934: PPUSH
53935: PPUSH
53936: PPUSH
53937: PPUSH
53938: PPUSH
53939: PPUSH
53940: PPUSH
// result = [ ] ;
53941: LD_ADDR_VAR 0 7
53945: PUSH
53946: EMPTY
53947: ST_TO_ADDR
// temp_list = [ ] ;
53948: LD_ADDR_VAR 0 9
53952: PUSH
53953: EMPTY
53954: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53955: LD_VAR 0 4
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: LD_INT 4
53974: PUSH
53975: LD_INT 5
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: IN
53986: NOT
53987: PUSH
53988: LD_VAR 0 1
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: IN
54003: PUSH
54004: LD_VAR 0 5
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 3
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: LIST
54022: IN
54023: NOT
54024: AND
54025: OR
54026: IFFALSE 54030
// exit ;
54028: GO 72421
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54030: LD_VAR 0 1
54034: PUSH
54035: LD_INT 6
54037: PUSH
54038: LD_INT 7
54040: PUSH
54041: LD_INT 8
54043: PUSH
54044: LD_INT 13
54046: PUSH
54047: LD_INT 12
54049: PUSH
54050: LD_INT 15
54052: PUSH
54053: LD_INT 11
54055: PUSH
54056: LD_INT 14
54058: PUSH
54059: LD_INT 10
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: IN
54073: IFFALSE 54083
// btype = b_lab ;
54075: LD_ADDR_VAR 0 1
54079: PUSH
54080: LD_INT 6
54082: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54083: LD_VAR 0 6
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: IN
54102: NOT
54103: PUSH
54104: LD_VAR 0 1
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: LD_INT 3
54120: PUSH
54121: LD_INT 6
54123: PUSH
54124: LD_INT 36
54126: PUSH
54127: LD_INT 4
54129: PUSH
54130: LD_INT 5
54132: PUSH
54133: LD_INT 31
54135: PUSH
54136: LD_INT 32
54138: PUSH
54139: LD_INT 33
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: IN
54155: NOT
54156: PUSH
54157: LD_VAR 0 6
54161: PUSH
54162: LD_INT 1
54164: EQUAL
54165: AND
54166: OR
54167: PUSH
54168: LD_VAR 0 1
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: LD_INT 3
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: IN
54183: NOT
54184: PUSH
54185: LD_VAR 0 6
54189: PUSH
54190: LD_INT 2
54192: EQUAL
54193: AND
54194: OR
54195: IFFALSE 54205
// mode = 0 ;
54197: LD_ADDR_VAR 0 6
54201: PUSH
54202: LD_INT 0
54204: ST_TO_ADDR
// case mode of 0 :
54205: LD_VAR 0 6
54209: PUSH
54210: LD_INT 0
54212: DOUBLE
54213: EQUAL
54214: IFTRUE 54218
54216: GO 65671
54218: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54219: LD_ADDR_VAR 0 11
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 3
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54412: LD_ADDR_VAR 0 12
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 3
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 3
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54608: LD_ADDR_VAR 0 13
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: LD_INT 3
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 3
54767: NEG
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 3
54779: NEG
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54807: LD_ADDR_VAR 0 14
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55003: LD_ADDR_VAR 0 15
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 3
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55196: LD_ADDR_VAR 0 16
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 3
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 3
55353: PUSH
55354: LD_INT 3
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: LD_INT 3
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55389: LD_ADDR_VAR 0 17
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55619: LD_ADDR_VAR 0 18
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55849: LD_ADDR_VAR 0 19
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 2
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56079: LD_ADDR_VAR 0 20
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56309: LD_ADDR_VAR 0 21
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: LD_INT 2
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56539: LD_ADDR_VAR 0 22
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 2
56715: NEG
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: NEG
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56769: LD_ADDR_VAR 0 23
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57049: LD_ADDR_VAR 0 24
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 2
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 2
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 2
57248: NEG
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 2
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57325: LD_ADDR_VAR 0 25
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: LD_INT 2
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 2
57524: NEG
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 3
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 3
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: LD_INT 3
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57599: LD_ADDR_VAR 0 26
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 2
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: NEG
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: LD_INT 3
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: LD_INT 3
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 2
57841: NEG
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57875: LD_ADDR_VAR 0 27
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: LD_INT 2
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 3
58108: NEG
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 3
58120: NEG
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58155: LD_ADDR_VAR 0 28
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 2
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: NEG
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: NEG
58367: PUSH
58368: LD_INT 3
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: LD_INT 3
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 3
58390: NEG
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 3
58402: NEG
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58437: LD_ADDR_VAR 0 29
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: LD_INT 2
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: LD_INT 3
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: LD_INT 3
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 3
58681: NEG
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58716: LD_ADDR_VAR 0 30
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58994: LD_ADDR_VAR 0 31
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: LD_INT 2
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: NEG
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: LD_INT 3
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 3
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: LD_INT 3
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 3
59237: NEG
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59272: LD_ADDR_VAR 0 32
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: LD_INT 2
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: NEG
59462: PUSH
59463: LD_INT 3
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 3
59484: PUSH
59485: LD_INT 2
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: LD_INT 3
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 3
59515: NEG
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59550: LD_ADDR_VAR 0 33
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 2
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 3
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 3
59794: NEG
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59829: LD_ADDR_VAR 0 34
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: LD_INT 2
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 2
59996: NEG
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 2
60008: NEG
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: LD_INT 3
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 2
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: LD_INT 3
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 3
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60109: LD_ADDR_VAR 0 35
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60221: LD_ADDR_VAR 0 36
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: LD_INT 2
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60333: LD_ADDR_VAR 0 37
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 1
60402: NEG
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60445: LD_ADDR_VAR 0 38
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 2
60536: NEG
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60557: LD_ADDR_VAR 0 39
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: LD_INT 2
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60669: LD_ADDR_VAR 0 40
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60781: LD_ADDR_VAR 0 41
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_INT 1
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: LD_INT 2
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 2
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 2
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 2
60905: PUSH
60906: LD_INT 2
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 2
60936: NEG
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: NEG
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 2
60971: NEG
60972: PUSH
60973: LD_INT 3
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 3
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 3
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 3
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 3
61024: PUSH
61025: LD_INT 3
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: LD_INT 1
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 3
61055: NEG
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 3
61078: NEG
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 3
61090: NEG
61091: PUSH
61092: LD_INT 3
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61131: LD_ADDR_VAR 0 42
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 2
61321: NEG
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: LD_INT 3
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: LD_INT 2
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: LD_INT 2
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 2
61387: PUSH
61388: LD_INT 3
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 3
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: LD_INT 3
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 3
61440: NEG
61441: PUSH
61442: LD_INT 3
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61481: LD_ADDR_VAR 0 43
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: LD_INT 2
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 2
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: LD_INT 2
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 2
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: LD_INT 3
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 3
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: LD_INT 2
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 2
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 3
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 3
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: LD_INT 3
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 3
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: LD_INT 2
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 2
61766: NEG
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 3
61777: NEG
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 3
61788: NEG
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61829: LD_ADDR_VAR 0 44
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: LD_INT 1
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: LD_INT 2
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: LD_INT 1
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 2
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 2
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 2
61953: PUSH
61954: LD_INT 2
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: NEG
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: NEG
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 3
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 3
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 3
62062: PUSH
62063: LD_INT 2
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 3
62072: PUSH
62073: LD_INT 3
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 2
62082: PUSH
62083: LD_INT 3
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: NEG
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 3
62103: NEG
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 3
62126: NEG
62127: PUSH
62128: LD_INT 2
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 3
62138: NEG
62139: PUSH
62140: LD_INT 3
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62179: LD_ADDR_VAR 0 45
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 2
62345: NEG
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: NEG
62358: PUSH
62359: LD_INT 2
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 2
62369: NEG
62370: PUSH
62371: LD_INT 3
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: LD_INT 3
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: LD_INT 3
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: LD_INT 3
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 2
62435: PUSH
62436: LD_INT 3
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: LD_INT 3
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: LD_INT 3
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: LD_INT 2
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: NEG
62477: PUSH
62478: LD_INT 2
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 3
62488: NEG
62489: PUSH
62490: LD_INT 3
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62529: LD_ADDR_VAR 0 46
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: LD_INT 2
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: LD_INT 2
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 2
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 2
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: LD_INT 2
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 2
62706: NEG
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: LD_INT 3
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: LD_INT 3
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: LD_INT 2
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: LD_INT 1
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 3
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 3
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: LD_INT 3
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: LD_INT 3
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: LD_INT 2
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 2
62814: NEG
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 3
62825: NEG
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 3
62836: NEG
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62877: LD_ADDR_VAR 0 47
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: LD_INT 1
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: LD_INT 2
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 2
62992: NEG
62993: PUSH
62994: LD_INT 1
62996: NEG
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 2
63004: NEG
63005: PUSH
63006: LD_INT 2
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63028: LD_ADDR_VAR 0 48
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: LD_INT 1
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 1
63066: PUSH
63067: LD_INT 1
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: LD_INT 2
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 2
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 2
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63175: LD_ADDR_VAR 0 49
63179: PUSH
63180: LD_INT 0
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: LD_INT 1
63195: NEG
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 2
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 2
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: LD_INT 2
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63319: LD_ADDR_VAR 0 50
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: LD_INT 1
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: NEG
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: NEG
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 2
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 2
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63463: LD_ADDR_VAR 0 51
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: LD_INT 2
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 2
63575: NEG
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 2
63586: NEG
63587: PUSH
63588: LD_INT 1
63590: NEG
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63610: LD_ADDR_VAR 0 52
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 1
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 1
63668: NEG
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: NEG
63692: PUSH
63693: LD_INT 2
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 1
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 2
63714: NEG
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 2
63725: NEG
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 2
63737: NEG
63738: PUSH
63739: LD_INT 2
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63761: LD_ADDR_VAR 0 53
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 0
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: LD_INT 2
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: LD_INT 2
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 2
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 2
63896: PUSH
63897: LD_INT 2
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 2
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 2
63937: NEG
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 2
63948: NEG
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 2
63960: NEG
63961: PUSH
63962: LD_INT 2
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63991: LD_ADDR_VAR 0 54
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: LD_INT 2
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: LD_INT 2
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 2
64116: PUSH
64117: LD_INT 1
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 2
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: LD_INT 2
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: LD_INT 2
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 1
64156: NEG
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 2
64167: NEG
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 2
64178: NEG
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: LD_INT 2
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64221: LD_ADDR_VAR 0 55
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 1
64302: NEG
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: LD_INT 2
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 1
64325: PUSH
64326: LD_INT 1
64328: NEG
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: LD_INT 2
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: LD_INT 2
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: LD_INT 1
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 2
64397: NEG
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 2
64408: NEG
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: LD_INT 2
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64451: LD_ADDR_VAR 0 56
64455: PUSH
64456: LD_INT 0
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: LD_INT 1
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: LD_INT 1
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 1
64520: NEG
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: LD_INT 2
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: LD_INT 2
64547: NEG
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 2
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 2
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 2
64586: PUSH
64587: LD_INT 2
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: LD_INT 2
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: LD_INT 2
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 1
64616: NEG
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 2
64627: NEG
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 2
64638: NEG
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 2
64650: NEG
64651: PUSH
64652: LD_INT 2
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64681: LD_ADDR_VAR 0 57
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 1
64719: PUSH
64720: LD_INT 1
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 1
64762: NEG
64763: PUSH
64764: LD_INT 2
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: LD_INT 2
64777: NEG
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 1
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 2
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 2
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 2
64816: PUSH
64817: LD_INT 2
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: LD_INT 2
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: LD_INT 2
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 1
64846: NEG
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 2
64857: NEG
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 2
64868: NEG
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 2
64880: NEG
64881: PUSH
64882: LD_INT 2
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64911: LD_ADDR_VAR 0 58
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: LD_INT 0
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 0
64959: PUSH
64960: LD_INT 1
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 1
64969: NEG
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 1
64980: NEG
64981: PUSH
64982: LD_INT 1
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: LD_INT 2
64996: NEG
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: LD_INT 2
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 2
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 2
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 2
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 1
65056: PUSH
65057: LD_INT 2
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: LD_INT 2
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 2
65087: NEG
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 2
65098: NEG
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: LD_INT 2
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65141: LD_ADDR_VAR 0 59
65145: PUSH
65146: LD_INT 0
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: LD_INT 1
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 1
65179: PUSH
65180: LD_INT 1
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: LD_INT 1
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: NEG
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 1
65210: NEG
65211: PUSH
65212: LD_INT 1
65214: NEG
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65229: LD_ADDR_VAR 0 60
65233: PUSH
65234: LD_INT 0
65236: PUSH
65237: LD_INT 0
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 0
65246: PUSH
65247: LD_INT 1
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 1
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: PUSH
65268: LD_INT 1
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 0
65277: PUSH
65278: LD_INT 1
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 1
65287: NEG
65288: PUSH
65289: LD_INT 0
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 1
65298: NEG
65299: PUSH
65300: LD_INT 1
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65317: LD_ADDR_VAR 0 61
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: LD_INT 0
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 1
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 0
65365: PUSH
65366: LD_INT 1
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 1
65375: NEG
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65405: LD_ADDR_VAR 0 62
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 0
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 1
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 1
65443: PUSH
65444: LD_INT 1
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 1
65463: NEG
65464: PUSH
65465: LD_INT 0
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65493: LD_ADDR_VAR 0 63
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: LD_INT 0
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 1
65531: PUSH
65532: LD_INT 1
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: LD_INT 1
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: NEG
65552: PUSH
65553: LD_INT 0
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 1
65562: NEG
65563: PUSH
65564: LD_INT 1
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65581: LD_ADDR_VAR 0 64
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 1
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 1
65619: PUSH
65620: LD_INT 1
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 0
65629: PUSH
65630: LD_INT 1
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 1
65639: NEG
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 1
65650: NEG
65651: PUSH
65652: LD_INT 1
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: ST_TO_ADDR
// end ; 1 :
65669: GO 71566
65671: LD_INT 1
65673: DOUBLE
65674: EQUAL
65675: IFTRUE 65679
65677: GO 68302
65679: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65680: LD_ADDR_VAR 0 11
65684: PUSH
65685: LD_INT 1
65687: NEG
65688: PUSH
65689: LD_INT 3
65691: NEG
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 0
65699: PUSH
65700: LD_INT 3
65702: NEG
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 1
65710: PUSH
65711: LD_INT 2
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: LIST
65723: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65724: LD_ADDR_VAR 0 12
65728: PUSH
65729: LD_INT 2
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 3
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 3
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: LIST
65764: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65765: LD_ADDR_VAR 0 13
65769: PUSH
65770: LD_INT 3
65772: PUSH
65773: LD_INT 2
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 3
65782: PUSH
65783: LD_INT 3
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65805: LD_ADDR_VAR 0 14
65809: PUSH
65810: LD_INT 1
65812: PUSH
65813: LD_INT 3
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: LD_INT 3
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 1
65832: NEG
65833: PUSH
65834: LD_INT 2
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: LIST
65845: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65846: LD_ADDR_VAR 0 15
65850: PUSH
65851: LD_INT 2
65853: NEG
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 3
65864: NEG
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 3
65875: NEG
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65890: LD_ADDR_VAR 0 16
65894: PUSH
65895: LD_INT 2
65897: NEG
65898: PUSH
65899: LD_INT 3
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 3
65909: NEG
65910: PUSH
65911: LD_INT 2
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 3
65921: NEG
65922: PUSH
65923: LD_INT 3
65925: NEG
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: LIST
65935: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65936: LD_ADDR_VAR 0 17
65940: PUSH
65941: LD_INT 1
65943: NEG
65944: PUSH
65945: LD_INT 3
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 3
65958: NEG
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: LD_INT 2
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: LIST
65979: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65980: LD_ADDR_VAR 0 18
65984: PUSH
65985: LD_INT 2
65987: PUSH
65988: LD_INT 1
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 3
65998: PUSH
65999: LD_INT 0
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 3
66008: PUSH
66009: LD_INT 1
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: LIST
66020: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66021: LD_ADDR_VAR 0 19
66025: PUSH
66026: LD_INT 3
66028: PUSH
66029: LD_INT 2
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 3
66038: PUSH
66039: LD_INT 3
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 2
66048: PUSH
66049: LD_INT 3
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: LIST
66060: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66061: LD_ADDR_VAR 0 20
66065: PUSH
66066: LD_INT 1
66068: PUSH
66069: LD_INT 3
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 0
66078: PUSH
66079: LD_INT 3
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: PUSH
66090: LD_INT 2
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: LIST
66101: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66102: LD_ADDR_VAR 0 21
66106: PUSH
66107: LD_INT 2
66109: NEG
66110: PUSH
66111: LD_INT 1
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 3
66120: NEG
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 3
66131: NEG
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66146: LD_ADDR_VAR 0 22
66150: PUSH
66151: LD_INT 2
66153: NEG
66154: PUSH
66155: LD_INT 3
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 3
66165: NEG
66166: PUSH
66167: LD_INT 2
66169: NEG
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 3
66177: NEG
66178: PUSH
66179: LD_INT 3
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: LIST
66191: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66192: LD_ADDR_VAR 0 23
66196: PUSH
66197: LD_INT 0
66199: PUSH
66200: LD_INT 3
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: LD_INT 4
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: PUSH
66223: LD_INT 3
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: LIST
66235: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66236: LD_ADDR_VAR 0 24
66240: PUSH
66241: LD_INT 3
66243: PUSH
66244: LD_INT 0
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 3
66253: PUSH
66254: LD_INT 1
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 4
66264: PUSH
66265: LD_INT 1
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: LIST
66276: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66277: LD_ADDR_VAR 0 25
66281: PUSH
66282: LD_INT 3
66284: PUSH
66285: LD_INT 3
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 4
66294: PUSH
66295: LD_INT 3
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 3
66304: PUSH
66305: LD_INT 4
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: LIST
66316: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66317: LD_ADDR_VAR 0 26
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: LD_INT 3
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 1
66334: PUSH
66335: LD_INT 4
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 1
66344: NEG
66345: PUSH
66346: LD_INT 3
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: LIST
66357: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66358: LD_ADDR_VAR 0 27
66362: PUSH
66363: LD_INT 3
66365: NEG
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 3
66376: NEG
66377: PUSH
66378: LD_INT 1
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 4
66387: NEG
66388: PUSH
66389: LD_INT 1
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: LIST
66401: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66402: LD_ADDR_VAR 0 28
66406: PUSH
66407: LD_INT 3
66409: NEG
66410: PUSH
66411: LD_INT 3
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 3
66421: NEG
66422: PUSH
66423: LD_INT 4
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 4
66433: NEG
66434: PUSH
66435: LD_INT 3
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: LIST
66447: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66448: LD_ADDR_VAR 0 29
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: LD_INT 3
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: LD_INT 3
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: NEG
66490: PUSH
66491: LD_INT 4
66493: NEG
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 0
66501: PUSH
66502: LD_INT 4
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: LD_INT 3
66515: NEG
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 1
66523: NEG
66524: PUSH
66525: LD_INT 5
66527: NEG
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 0
66535: PUSH
66536: LD_INT 5
66538: NEG
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 1
66546: PUSH
66547: LD_INT 4
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 1
66557: NEG
66558: PUSH
66559: LD_INT 6
66561: NEG
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: LD_INT 6
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 1
66580: PUSH
66581: LD_INT 5
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66603: LD_ADDR_VAR 0 30
66607: PUSH
66608: LD_INT 2
66610: PUSH
66611: LD_INT 1
66613: NEG
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 3
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 3
66631: PUSH
66632: LD_INT 1
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 3
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 4
66652: PUSH
66653: LD_INT 0
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 4
66662: PUSH
66663: LD_INT 1
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 4
66672: PUSH
66673: LD_INT 1
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 5
66683: PUSH
66684: LD_INT 0
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 5
66693: PUSH
66694: LD_INT 1
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 5
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 6
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 6
66724: PUSH
66725: LD_INT 1
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66746: LD_ADDR_VAR 0 31
66750: PUSH
66751: LD_INT 3
66753: PUSH
66754: LD_INT 2
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 3
66763: PUSH
66764: LD_INT 3
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 2
66773: PUSH
66774: LD_INT 3
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 4
66783: PUSH
66784: LD_INT 3
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 4
66793: PUSH
66794: LD_INT 4
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 3
66803: PUSH
66804: LD_INT 4
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 5
66813: PUSH
66814: LD_INT 4
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 5
66823: PUSH
66824: LD_INT 5
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 4
66833: PUSH
66834: LD_INT 5
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 6
66843: PUSH
66844: LD_INT 5
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 6
66853: PUSH
66854: LD_INT 6
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 5
66863: PUSH
66864: LD_INT 6
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66885: LD_ADDR_VAR 0 32
66889: PUSH
66890: LD_INT 1
66892: PUSH
66893: LD_INT 3
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: LD_INT 3
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 1
66912: NEG
66913: PUSH
66914: LD_INT 2
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 1
66923: PUSH
66924: LD_INT 4
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: LD_INT 4
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 1
66943: NEG
66944: PUSH
66945: LD_INT 3
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: PUSH
66955: LD_INT 5
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: LD_INT 5
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: LD_INT 4
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 1
66985: PUSH
66986: LD_INT 6
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 0
66995: PUSH
66996: LD_INT 6
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 1
67005: NEG
67006: PUSH
67007: LD_INT 5
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67028: LD_ADDR_VAR 0 33
67032: PUSH
67033: LD_INT 2
67035: NEG
67036: PUSH
67037: LD_INT 1
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 3
67046: NEG
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 3
67057: NEG
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 3
67069: NEG
67070: PUSH
67071: LD_INT 1
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 4
67080: NEG
67081: PUSH
67082: LD_INT 0
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 4
67091: NEG
67092: PUSH
67093: LD_INT 1
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 4
67103: NEG
67104: PUSH
67105: LD_INT 1
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 5
67114: NEG
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 5
67125: NEG
67126: PUSH
67127: LD_INT 1
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 5
67137: NEG
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 6
67148: NEG
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 6
67159: NEG
67160: PUSH
67161: LD_INT 1
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67183: LD_ADDR_VAR 0 34
67187: PUSH
67188: LD_INT 2
67190: NEG
67191: PUSH
67192: LD_INT 3
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 3
67202: NEG
67203: PUSH
67204: LD_INT 2
67206: NEG
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 3
67214: NEG
67215: PUSH
67216: LD_INT 3
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 3
67226: NEG
67227: PUSH
67228: LD_INT 4
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 4
67238: NEG
67239: PUSH
67240: LD_INT 3
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 4
67250: NEG
67251: PUSH
67252: LD_INT 4
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 4
67262: NEG
67263: PUSH
67264: LD_INT 5
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 5
67274: NEG
67275: PUSH
67276: LD_INT 4
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 5
67286: NEG
67287: PUSH
67288: LD_INT 5
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 5
67298: NEG
67299: PUSH
67300: LD_INT 6
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 6
67310: NEG
67311: PUSH
67312: LD_INT 5
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 6
67322: NEG
67323: PUSH
67324: LD_INT 6
67326: NEG
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67346: LD_ADDR_VAR 0 41
67350: PUSH
67351: LD_INT 0
67353: PUSH
67354: LD_INT 2
67356: NEG
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 1
67364: NEG
67365: PUSH
67366: LD_INT 3
67368: NEG
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 1
67376: PUSH
67377: LD_INT 2
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: LIST
67389: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67390: LD_ADDR_VAR 0 42
67394: PUSH
67395: LD_INT 2
67397: PUSH
67398: LD_INT 0
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 2
67407: PUSH
67408: LD_INT 1
67410: NEG
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 3
67418: PUSH
67419: LD_INT 1
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: LIST
67430: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67431: LD_ADDR_VAR 0 43
67435: PUSH
67436: LD_INT 2
67438: PUSH
67439: LD_INT 2
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 3
67448: PUSH
67449: LD_INT 2
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 2
67458: PUSH
67459: LD_INT 3
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: LIST
67470: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67471: LD_ADDR_VAR 0 44
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: LD_INT 2
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 1
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 1
67498: NEG
67499: PUSH
67500: LD_INT 2
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: LIST
67511: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67512: LD_ADDR_VAR 0 45
67516: PUSH
67517: LD_INT 2
67519: NEG
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 2
67530: NEG
67531: PUSH
67532: LD_INT 1
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 3
67541: NEG
67542: PUSH
67543: LD_INT 1
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: LIST
67555: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67556: LD_ADDR_VAR 0 46
67560: PUSH
67561: LD_INT 2
67563: NEG
67564: PUSH
67565: LD_INT 2
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 2
67575: NEG
67576: PUSH
67577: LD_INT 3
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: LD_INT 2
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: LIST
67601: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67602: LD_ADDR_VAR 0 47
67606: PUSH
67607: LD_INT 2
67609: NEG
67610: PUSH
67611: LD_INT 3
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 1
67621: NEG
67622: PUSH
67623: LD_INT 3
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67635: LD_ADDR_VAR 0 48
67639: PUSH
67640: LD_INT 1
67642: PUSH
67643: LD_INT 2
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: LD_INT 1
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67666: LD_ADDR_VAR 0 49
67670: PUSH
67671: LD_INT 3
67673: PUSH
67674: LD_INT 1
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 3
67683: PUSH
67684: LD_INT 2
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67695: LD_ADDR_VAR 0 50
67699: PUSH
67700: LD_INT 2
67702: PUSH
67703: LD_INT 3
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: PUSH
67713: LD_INT 3
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67724: LD_ADDR_VAR 0 51
67728: PUSH
67729: LD_INT 1
67731: NEG
67732: PUSH
67733: LD_INT 2
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 2
67742: NEG
67743: PUSH
67744: LD_INT 1
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67755: LD_ADDR_VAR 0 52
67759: PUSH
67760: LD_INT 3
67762: NEG
67763: PUSH
67764: LD_INT 1
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 3
67774: NEG
67775: PUSH
67776: LD_INT 2
67778: NEG
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67788: LD_ADDR_VAR 0 53
67792: PUSH
67793: LD_INT 1
67795: NEG
67796: PUSH
67797: LD_INT 3
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: LD_INT 3
67810: NEG
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 1
67818: PUSH
67819: LD_INT 2
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: LIST
67831: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67832: LD_ADDR_VAR 0 54
67836: PUSH
67837: LD_INT 2
67839: PUSH
67840: LD_INT 1
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 3
67850: PUSH
67851: LD_INT 0
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 3
67860: PUSH
67861: LD_INT 1
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: LIST
67872: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67873: LD_ADDR_VAR 0 55
67877: PUSH
67878: LD_INT 3
67880: PUSH
67881: LD_INT 2
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 3
67890: PUSH
67891: LD_INT 3
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 2
67900: PUSH
67901: LD_INT 3
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: LIST
67912: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67913: LD_ADDR_VAR 0 56
67917: PUSH
67918: LD_INT 1
67920: PUSH
67921: LD_INT 3
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: LD_INT 3
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 1
67940: NEG
67941: PUSH
67942: LD_INT 2
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: LIST
67953: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67954: LD_ADDR_VAR 0 57
67958: PUSH
67959: LD_INT 2
67961: NEG
67962: PUSH
67963: LD_INT 1
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 3
67972: NEG
67973: PUSH
67974: LD_INT 0
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 3
67983: NEG
67984: PUSH
67985: LD_INT 1
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: LIST
67997: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67998: LD_ADDR_VAR 0 58
68002: PUSH
68003: LD_INT 2
68005: NEG
68006: PUSH
68007: LD_INT 3
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 3
68017: NEG
68018: PUSH
68019: LD_INT 2
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 3
68029: NEG
68030: PUSH
68031: LD_INT 3
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: LIST
68043: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68044: LD_ADDR_VAR 0 59
68048: PUSH
68049: LD_INT 1
68051: NEG
68052: PUSH
68053: LD_INT 2
68055: NEG
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 0
68063: PUSH
68064: LD_INT 2
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 1
68074: PUSH
68075: LD_INT 1
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68088: LD_ADDR_VAR 0 60
68092: PUSH
68093: LD_INT 1
68095: PUSH
68096: LD_INT 1
68098: NEG
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 2
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 2
68116: PUSH
68117: LD_INT 1
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: LIST
68128: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68129: LD_ADDR_VAR 0 61
68133: PUSH
68134: LD_INT 2
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 2
68146: PUSH
68147: LD_INT 2
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 1
68156: PUSH
68157: LD_INT 2
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: LIST
68168: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68169: LD_ADDR_VAR 0 62
68173: PUSH
68174: LD_INT 1
68176: PUSH
68177: LD_INT 2
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: LD_INT 2
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 1
68196: NEG
68197: PUSH
68198: LD_INT 1
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: LIST
68209: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68210: LD_ADDR_VAR 0 63
68214: PUSH
68215: LD_INT 1
68217: NEG
68218: PUSH
68219: LD_INT 1
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 2
68228: NEG
68229: PUSH
68230: LD_INT 0
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 2
68239: NEG
68240: PUSH
68241: LD_INT 1
68243: NEG
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: LIST
68253: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68254: LD_ADDR_VAR 0 64
68258: PUSH
68259: LD_INT 1
68261: NEG
68262: PUSH
68263: LD_INT 2
68265: NEG
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 2
68273: NEG
68274: PUSH
68275: LD_INT 1
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 2
68285: NEG
68286: PUSH
68287: LD_INT 2
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: LIST
68299: ST_TO_ADDR
// end ; 2 :
68300: GO 71566
68302: LD_INT 2
68304: DOUBLE
68305: EQUAL
68306: IFTRUE 68310
68308: GO 71565
68310: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68311: LD_ADDR_VAR 0 29
68315: PUSH
68316: LD_INT 4
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 4
68328: PUSH
68329: LD_INT 1
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 5
68339: PUSH
68340: LD_INT 0
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 5
68349: PUSH
68350: LD_INT 1
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 4
68359: PUSH
68360: LD_INT 1
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 3
68369: PUSH
68370: LD_INT 0
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 3
68379: PUSH
68380: LD_INT 1
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 3
68390: PUSH
68391: LD_INT 2
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 5
68401: PUSH
68402: LD_INT 2
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 3
68411: PUSH
68412: LD_INT 3
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 3
68421: PUSH
68422: LD_INT 2
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 4
68431: PUSH
68432: LD_INT 3
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 4
68441: PUSH
68442: LD_INT 4
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 3
68451: PUSH
68452: LD_INT 4
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 2
68461: PUSH
68462: LD_INT 3
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 2
68471: PUSH
68472: LD_INT 2
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 4
68481: PUSH
68482: LD_INT 2
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 2
68491: PUSH
68492: LD_INT 4
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 0
68501: PUSH
68502: LD_INT 4
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 0
68511: PUSH
68512: LD_INT 3
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 1
68521: PUSH
68522: LD_INT 4
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 1
68531: PUSH
68532: LD_INT 5
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: LD_INT 5
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 1
68551: NEG
68552: PUSH
68553: LD_INT 4
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 1
68562: NEG
68563: PUSH
68564: LD_INT 3
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 2
68573: PUSH
68574: LD_INT 5
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 2
68583: NEG
68584: PUSH
68585: LD_INT 3
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 3
68594: NEG
68595: PUSH
68596: LD_INT 0
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 3
68605: NEG
68606: PUSH
68607: LD_INT 1
68609: NEG
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 2
68617: NEG
68618: PUSH
68619: LD_INT 0
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 2
68628: NEG
68629: PUSH
68630: LD_INT 1
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 3
68639: NEG
68640: PUSH
68641: LD_INT 1
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 4
68650: NEG
68651: PUSH
68652: LD_INT 0
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 4
68661: NEG
68662: PUSH
68663: LD_INT 1
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 4
68673: NEG
68674: PUSH
68675: LD_INT 2
68677: NEG
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 2
68685: NEG
68686: PUSH
68687: LD_INT 2
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 4
68696: NEG
68697: PUSH
68698: LD_INT 4
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 4
68708: NEG
68709: PUSH
68710: LD_INT 5
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: NEG
68721: PUSH
68722: LD_INT 4
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 3
68732: NEG
68733: PUSH
68734: LD_INT 3
68736: NEG
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 4
68744: NEG
68745: PUSH
68746: LD_INT 3
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 5
68756: NEG
68757: PUSH
68758: LD_INT 4
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 5
68768: NEG
68769: PUSH
68770: LD_INT 5
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 3
68780: NEG
68781: PUSH
68782: LD_INT 5
68784: NEG
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 5
68792: NEG
68793: PUSH
68794: LD_INT 3
68796: NEG
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68849: LD_ADDR_VAR 0 30
68853: PUSH
68854: LD_INT 4
68856: PUSH
68857: LD_INT 4
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 4
68866: PUSH
68867: LD_INT 3
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 5
68876: PUSH
68877: LD_INT 4
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 5
68886: PUSH
68887: LD_INT 5
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 4
68896: PUSH
68897: LD_INT 5
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 3
68906: PUSH
68907: LD_INT 4
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 3
68916: PUSH
68917: LD_INT 3
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 5
68926: PUSH
68927: LD_INT 3
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 3
68936: PUSH
68937: LD_INT 5
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 0
68946: PUSH
68947: LD_INT 3
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 0
68956: PUSH
68957: LD_INT 2
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 1
68966: PUSH
68967: LD_INT 3
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: LD_INT 4
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: LD_INT 4
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 1
68996: NEG
68997: PUSH
68998: LD_INT 3
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 1
69007: NEG
69008: PUSH
69009: LD_INT 2
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 2
69018: PUSH
69019: LD_INT 4
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 2
69028: NEG
69029: PUSH
69030: LD_INT 2
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 4
69039: NEG
69040: PUSH
69041: LD_INT 0
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 4
69050: NEG
69051: PUSH
69052: LD_INT 1
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 3
69062: NEG
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 3
69073: NEG
69074: PUSH
69075: LD_INT 1
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 4
69084: NEG
69085: PUSH
69086: LD_INT 1
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 5
69095: NEG
69096: PUSH
69097: LD_INT 0
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 5
69106: NEG
69107: PUSH
69108: LD_INT 1
69110: NEG
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 5
69118: NEG
69119: PUSH
69120: LD_INT 2
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 3
69130: NEG
69131: PUSH
69132: LD_INT 2
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 3
69141: NEG
69142: PUSH
69143: LD_INT 3
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 3
69153: NEG
69154: PUSH
69155: LD_INT 4
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 2
69165: NEG
69166: PUSH
69167: LD_INT 3
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 2
69177: NEG
69178: PUSH
69179: LD_INT 2
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 3
69189: NEG
69190: PUSH
69191: LD_INT 2
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 4
69201: NEG
69202: PUSH
69203: LD_INT 3
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 4
69213: NEG
69214: PUSH
69215: LD_INT 4
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 2
69225: NEG
69226: PUSH
69227: LD_INT 4
69229: NEG
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 4
69237: NEG
69238: PUSH
69239: LD_INT 2
69241: NEG
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: LD_INT 4
69252: NEG
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 0
69260: PUSH
69261: LD_INT 5
69263: NEG
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 1
69271: PUSH
69272: LD_INT 4
69274: NEG
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 1
69282: PUSH
69283: LD_INT 3
69285: NEG
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: LD_INT 3
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 1
69304: NEG
69305: PUSH
69306: LD_INT 4
69308: NEG
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: LD_INT 5
69320: NEG
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 2
69328: PUSH
69329: LD_INT 3
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 2
69339: NEG
69340: PUSH
69341: LD_INT 5
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69396: LD_ADDR_VAR 0 31
69400: PUSH
69401: LD_INT 0
69403: PUSH
69404: LD_INT 4
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 0
69413: PUSH
69414: LD_INT 3
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 1
69423: PUSH
69424: LD_INT 4
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 1
69433: PUSH
69434: LD_INT 5
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 0
69443: PUSH
69444: LD_INT 5
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 1
69453: NEG
69454: PUSH
69455: LD_INT 4
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 1
69464: NEG
69465: PUSH
69466: LD_INT 3
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 2
69475: PUSH
69476: LD_INT 5
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 2
69485: NEG
69486: PUSH
69487: LD_INT 3
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 3
69496: NEG
69497: PUSH
69498: LD_INT 0
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 3
69507: NEG
69508: PUSH
69509: LD_INT 1
69511: NEG
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 2
69519: NEG
69520: PUSH
69521: LD_INT 0
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 2
69530: NEG
69531: PUSH
69532: LD_INT 1
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 3
69541: NEG
69542: PUSH
69543: LD_INT 1
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 4
69552: NEG
69553: PUSH
69554: LD_INT 0
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 4
69563: NEG
69564: PUSH
69565: LD_INT 1
69567: NEG
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 4
69575: NEG
69576: PUSH
69577: LD_INT 2
69579: NEG
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 2
69587: NEG
69588: PUSH
69589: LD_INT 2
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 4
69598: NEG
69599: PUSH
69600: LD_INT 4
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 4
69610: NEG
69611: PUSH
69612: LD_INT 5
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 3
69622: NEG
69623: PUSH
69624: LD_INT 4
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 3
69634: NEG
69635: PUSH
69636: LD_INT 3
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 4
69646: NEG
69647: PUSH
69648: LD_INT 3
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 5
69658: NEG
69659: PUSH
69660: LD_INT 4
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 5
69670: NEG
69671: PUSH
69672: LD_INT 5
69674: NEG
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 3
69682: NEG
69683: PUSH
69684: LD_INT 5
69686: NEG
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 5
69694: NEG
69695: PUSH
69696: LD_INT 3
69698: NEG
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 0
69706: PUSH
69707: LD_INT 3
69709: NEG
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 0
69717: PUSH
69718: LD_INT 4
69720: NEG
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 1
69728: PUSH
69729: LD_INT 3
69731: NEG
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 1
69739: PUSH
69740: LD_INT 2
69742: NEG
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 0
69750: PUSH
69751: LD_INT 2
69753: NEG
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 1
69761: NEG
69762: PUSH
69763: LD_INT 3
69765: NEG
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 1
69773: NEG
69774: PUSH
69775: LD_INT 4
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 2
69785: PUSH
69786: LD_INT 2
69788: NEG
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 2
69796: NEG
69797: PUSH
69798: LD_INT 4
69800: NEG
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 4
69808: PUSH
69809: LD_INT 0
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 4
69818: PUSH
69819: LD_INT 1
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 5
69829: PUSH
69830: LD_INT 0
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 5
69839: PUSH
69840: LD_INT 1
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 4
69849: PUSH
69850: LD_INT 1
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 3
69859: PUSH
69860: LD_INT 0
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 3
69869: PUSH
69870: LD_INT 1
69872: NEG
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 3
69880: PUSH
69881: LD_INT 2
69883: NEG
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 5
69891: PUSH
69892: LD_INT 2
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69946: LD_ADDR_VAR 0 32
69950: PUSH
69951: LD_INT 4
69953: NEG
69954: PUSH
69955: LD_INT 0
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 4
69964: NEG
69965: PUSH
69966: LD_INT 1
69968: NEG
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 3
69976: NEG
69977: PUSH
69978: LD_INT 0
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 3
69987: NEG
69988: PUSH
69989: LD_INT 1
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 4
69998: NEG
69999: PUSH
70000: LD_INT 1
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 5
70009: NEG
70010: PUSH
70011: LD_INT 0
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 5
70020: NEG
70021: PUSH
70022: LD_INT 1
70024: NEG
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 5
70032: NEG
70033: PUSH
70034: LD_INT 2
70036: NEG
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 3
70044: NEG
70045: PUSH
70046: LD_INT 2
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 3
70055: NEG
70056: PUSH
70057: LD_INT 3
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 3
70067: NEG
70068: PUSH
70069: LD_INT 4
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 2
70079: NEG
70080: PUSH
70081: LD_INT 3
70083: NEG
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 2
70091: NEG
70092: PUSH
70093: LD_INT 2
70095: NEG
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 3
70103: NEG
70104: PUSH
70105: LD_INT 2
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 4
70115: NEG
70116: PUSH
70117: LD_INT 3
70119: NEG
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 4
70127: NEG
70128: PUSH
70129: LD_INT 4
70131: NEG
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 2
70139: NEG
70140: PUSH
70141: LD_INT 4
70143: NEG
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 4
70151: NEG
70152: PUSH
70153: LD_INT 2
70155: NEG
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 0
70163: PUSH
70164: LD_INT 4
70166: NEG
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 0
70174: PUSH
70175: LD_INT 5
70177: NEG
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 1
70185: PUSH
70186: LD_INT 4
70188: NEG
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 1
70196: PUSH
70197: LD_INT 3
70199: NEG
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: LD_INT 3
70210: NEG
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 1
70218: NEG
70219: PUSH
70220: LD_INT 4
70222: NEG
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 1
70230: NEG
70231: PUSH
70232: LD_INT 5
70234: NEG
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 2
70242: PUSH
70243: LD_INT 3
70245: NEG
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 2
70253: NEG
70254: PUSH
70255: LD_INT 5
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 3
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 3
70275: PUSH
70276: LD_INT 1
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 4
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 4
70296: PUSH
70297: LD_INT 1
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 3
70306: PUSH
70307: LD_INT 1
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 2
70316: PUSH
70317: LD_INT 0
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 2
70326: PUSH
70327: LD_INT 1
70329: NEG
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 2
70337: PUSH
70338: LD_INT 2
70340: NEG
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 4
70348: PUSH
70349: LD_INT 2
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 4
70358: PUSH
70359: LD_INT 4
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 4
70368: PUSH
70369: LD_INT 3
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 5
70378: PUSH
70379: LD_INT 4
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 5
70388: PUSH
70389: LD_INT 5
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 4
70398: PUSH
70399: LD_INT 5
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 3
70408: PUSH
70409: LD_INT 4
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 3
70418: PUSH
70419: LD_INT 3
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 5
70428: PUSH
70429: LD_INT 3
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 3
70438: PUSH
70439: LD_INT 5
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70493: LD_ADDR_VAR 0 33
70497: PUSH
70498: LD_INT 4
70500: NEG
70501: PUSH
70502: LD_INT 4
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 4
70512: NEG
70513: PUSH
70514: LD_INT 5
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 3
70524: NEG
70525: PUSH
70526: LD_INT 4
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 3
70536: NEG
70537: PUSH
70538: LD_INT 3
70540: NEG
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 4
70548: NEG
70549: PUSH
70550: LD_INT 3
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 5
70560: NEG
70561: PUSH
70562: LD_INT 4
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 5
70572: NEG
70573: PUSH
70574: LD_INT 5
70576: NEG
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 3
70584: NEG
70585: PUSH
70586: LD_INT 5
70588: NEG
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 5
70596: NEG
70597: PUSH
70598: LD_INT 3
70600: NEG
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 0
70608: PUSH
70609: LD_INT 3
70611: NEG
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 0
70619: PUSH
70620: LD_INT 4
70622: NEG
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: LD_INT 1
70630: PUSH
70631: LD_INT 3
70633: NEG
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 1
70641: PUSH
70642: LD_INT 2
70644: NEG
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 0
70652: PUSH
70653: LD_INT 2
70655: NEG
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 1
70663: NEG
70664: PUSH
70665: LD_INT 3
70667: NEG
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 1
70675: NEG
70676: PUSH
70677: LD_INT 4
70679: NEG
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 2
70687: PUSH
70688: LD_INT 2
70690: NEG
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 2
70698: NEG
70699: PUSH
70700: LD_INT 4
70702: NEG
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 4
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 4
70720: PUSH
70721: LD_INT 1
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 5
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 5
70741: PUSH
70742: LD_INT 1
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 4
70751: PUSH
70752: LD_INT 1
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 3
70761: PUSH
70762: LD_INT 0
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 3
70771: PUSH
70772: LD_INT 1
70774: NEG
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 3
70782: PUSH
70783: LD_INT 2
70785: NEG
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 5
70793: PUSH
70794: LD_INT 2
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 3
70803: PUSH
70804: LD_INT 3
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 3
70813: PUSH
70814: LD_INT 2
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 4
70823: PUSH
70824: LD_INT 3
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 4
70833: PUSH
70834: LD_INT 4
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 3
70843: PUSH
70844: LD_INT 4
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 2
70853: PUSH
70854: LD_INT 3
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 2
70863: PUSH
70864: LD_INT 2
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 4
70873: PUSH
70874: LD_INT 2
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 2
70883: PUSH
70884: LD_INT 4
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 0
70893: PUSH
70894: LD_INT 4
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 0
70903: PUSH
70904: LD_INT 3
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 1
70913: PUSH
70914: LD_INT 4
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 1
70923: PUSH
70924: LD_INT 5
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 0
70933: PUSH
70934: LD_INT 5
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 1
70943: NEG
70944: PUSH
70945: LD_INT 4
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 1
70954: NEG
70955: PUSH
70956: LD_INT 3
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 2
70965: PUSH
70966: LD_INT 5
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 2
70975: NEG
70976: PUSH
70977: LD_INT 3
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71031: LD_ADDR_VAR 0 34
71035: PUSH
71036: LD_INT 0
71038: PUSH
71039: LD_INT 4
71041: NEG
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 0
71049: PUSH
71050: LD_INT 5
71052: NEG
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 1
71060: PUSH
71061: LD_INT 4
71063: NEG
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 1
71071: PUSH
71072: LD_INT 3
71074: NEG
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 0
71082: PUSH
71083: LD_INT 3
71085: NEG
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 1
71093: NEG
71094: PUSH
71095: LD_INT 4
71097: NEG
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 1
71105: NEG
71106: PUSH
71107: LD_INT 5
71109: NEG
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 2
71117: PUSH
71118: LD_INT 3
71120: NEG
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 2
71128: NEG
71129: PUSH
71130: LD_INT 5
71132: NEG
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 3
71140: PUSH
71141: LD_INT 0
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 3
71150: PUSH
71151: LD_INT 1
71153: NEG
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 4
71161: PUSH
71162: LD_INT 0
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 4
71171: PUSH
71172: LD_INT 1
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: LD_INT 3
71181: PUSH
71182: LD_INT 1
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: LD_INT 2
71191: PUSH
71192: LD_INT 0
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 2
71201: PUSH
71202: LD_INT 1
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 2
71212: PUSH
71213: LD_INT 2
71215: NEG
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 4
71223: PUSH
71224: LD_INT 2
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 4
71233: PUSH
71234: LD_INT 4
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 4
71243: PUSH
71244: LD_INT 3
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 5
71253: PUSH
71254: LD_INT 4
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: LD_INT 5
71263: PUSH
71264: LD_INT 5
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 4
71273: PUSH
71274: LD_INT 5
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 3
71283: PUSH
71284: LD_INT 4
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: LD_INT 3
71293: PUSH
71294: LD_INT 3
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 5
71303: PUSH
71304: LD_INT 3
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 3
71313: PUSH
71314: LD_INT 5
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 0
71323: PUSH
71324: LD_INT 3
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 0
71333: PUSH
71334: LD_INT 2
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 1
71343: PUSH
71344: LD_INT 3
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 1
71353: PUSH
71354: LD_INT 4
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 0
71363: PUSH
71364: LD_INT 4
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 1
71373: NEG
71374: PUSH
71375: LD_INT 3
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 1
71384: NEG
71385: PUSH
71386: LD_INT 2
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PUSH
71393: LD_INT 2
71395: PUSH
71396: LD_INT 4
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: LD_INT 2
71405: NEG
71406: PUSH
71407: LD_INT 2
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 4
71416: NEG
71417: PUSH
71418: LD_INT 0
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 4
71427: NEG
71428: PUSH
71429: LD_INT 1
71431: NEG
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 3
71439: NEG
71440: PUSH
71441: LD_INT 0
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 3
71450: NEG
71451: PUSH
71452: LD_INT 1
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 4
71461: NEG
71462: PUSH
71463: LD_INT 1
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 5
71472: NEG
71473: PUSH
71474: LD_INT 0
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 5
71483: NEG
71484: PUSH
71485: LD_INT 1
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 5
71495: NEG
71496: PUSH
71497: LD_INT 2
71499: NEG
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 3
71507: NEG
71508: PUSH
71509: LD_INT 2
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: ST_TO_ADDR
// end ; end ;
71563: GO 71566
71565: POP
// case btype of b_depot , b_warehouse :
71566: LD_VAR 0 1
71570: PUSH
71571: LD_INT 0
71573: DOUBLE
71574: EQUAL
71575: IFTRUE 71585
71577: LD_INT 1
71579: DOUBLE
71580: EQUAL
71581: IFTRUE 71585
71583: GO 71786
71585: POP
// case nation of nation_american :
71586: LD_VAR 0 5
71590: PUSH
71591: LD_INT 1
71593: DOUBLE
71594: EQUAL
71595: IFTRUE 71599
71597: GO 71655
71599: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71600: LD_ADDR_VAR 0 9
71604: PUSH
71605: LD_VAR 0 11
71609: PUSH
71610: LD_VAR 0 12
71614: PUSH
71615: LD_VAR 0 13
71619: PUSH
71620: LD_VAR 0 14
71624: PUSH
71625: LD_VAR 0 15
71629: PUSH
71630: LD_VAR 0 16
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: PUSH
71643: LD_VAR 0 4
71647: PUSH
71648: LD_INT 1
71650: PLUS
71651: ARRAY
71652: ST_TO_ADDR
71653: GO 71784
71655: LD_INT 2
71657: DOUBLE
71658: EQUAL
71659: IFTRUE 71663
71661: GO 71719
71663: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71664: LD_ADDR_VAR 0 9
71668: PUSH
71669: LD_VAR 0 17
71673: PUSH
71674: LD_VAR 0 18
71678: PUSH
71679: LD_VAR 0 19
71683: PUSH
71684: LD_VAR 0 20
71688: PUSH
71689: LD_VAR 0 21
71693: PUSH
71694: LD_VAR 0 22
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: PUSH
71707: LD_VAR 0 4
71711: PUSH
71712: LD_INT 1
71714: PLUS
71715: ARRAY
71716: ST_TO_ADDR
71717: GO 71784
71719: LD_INT 3
71721: DOUBLE
71722: EQUAL
71723: IFTRUE 71727
71725: GO 71783
71727: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71728: LD_ADDR_VAR 0 9
71732: PUSH
71733: LD_VAR 0 23
71737: PUSH
71738: LD_VAR 0 24
71742: PUSH
71743: LD_VAR 0 25
71747: PUSH
71748: LD_VAR 0 26
71752: PUSH
71753: LD_VAR 0 27
71757: PUSH
71758: LD_VAR 0 28
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: PUSH
71771: LD_VAR 0 4
71775: PUSH
71776: LD_INT 1
71778: PLUS
71779: ARRAY
71780: ST_TO_ADDR
71781: GO 71784
71783: POP
71784: GO 72339
71786: LD_INT 2
71788: DOUBLE
71789: EQUAL
71790: IFTRUE 71800
71792: LD_INT 3
71794: DOUBLE
71795: EQUAL
71796: IFTRUE 71800
71798: GO 71856
71800: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71801: LD_ADDR_VAR 0 9
71805: PUSH
71806: LD_VAR 0 29
71810: PUSH
71811: LD_VAR 0 30
71815: PUSH
71816: LD_VAR 0 31
71820: PUSH
71821: LD_VAR 0 32
71825: PUSH
71826: LD_VAR 0 33
71830: PUSH
71831: LD_VAR 0 34
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: PUSH
71844: LD_VAR 0 4
71848: PUSH
71849: LD_INT 1
71851: PLUS
71852: ARRAY
71853: ST_TO_ADDR
71854: GO 72339
71856: LD_INT 16
71858: DOUBLE
71859: EQUAL
71860: IFTRUE 71918
71862: LD_INT 17
71864: DOUBLE
71865: EQUAL
71866: IFTRUE 71918
71868: LD_INT 18
71870: DOUBLE
71871: EQUAL
71872: IFTRUE 71918
71874: LD_INT 19
71876: DOUBLE
71877: EQUAL
71878: IFTRUE 71918
71880: LD_INT 22
71882: DOUBLE
71883: EQUAL
71884: IFTRUE 71918
71886: LD_INT 20
71888: DOUBLE
71889: EQUAL
71890: IFTRUE 71918
71892: LD_INT 21
71894: DOUBLE
71895: EQUAL
71896: IFTRUE 71918
71898: LD_INT 23
71900: DOUBLE
71901: EQUAL
71902: IFTRUE 71918
71904: LD_INT 24
71906: DOUBLE
71907: EQUAL
71908: IFTRUE 71918
71910: LD_INT 25
71912: DOUBLE
71913: EQUAL
71914: IFTRUE 71918
71916: GO 71974
71918: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71919: LD_ADDR_VAR 0 9
71923: PUSH
71924: LD_VAR 0 35
71928: PUSH
71929: LD_VAR 0 36
71933: PUSH
71934: LD_VAR 0 37
71938: PUSH
71939: LD_VAR 0 38
71943: PUSH
71944: LD_VAR 0 39
71948: PUSH
71949: LD_VAR 0 40
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: PUSH
71962: LD_VAR 0 4
71966: PUSH
71967: LD_INT 1
71969: PLUS
71970: ARRAY
71971: ST_TO_ADDR
71972: GO 72339
71974: LD_INT 6
71976: DOUBLE
71977: EQUAL
71978: IFTRUE 72030
71980: LD_INT 7
71982: DOUBLE
71983: EQUAL
71984: IFTRUE 72030
71986: LD_INT 8
71988: DOUBLE
71989: EQUAL
71990: IFTRUE 72030
71992: LD_INT 13
71994: DOUBLE
71995: EQUAL
71996: IFTRUE 72030
71998: LD_INT 12
72000: DOUBLE
72001: EQUAL
72002: IFTRUE 72030
72004: LD_INT 15
72006: DOUBLE
72007: EQUAL
72008: IFTRUE 72030
72010: LD_INT 11
72012: DOUBLE
72013: EQUAL
72014: IFTRUE 72030
72016: LD_INT 14
72018: DOUBLE
72019: EQUAL
72020: IFTRUE 72030
72022: LD_INT 10
72024: DOUBLE
72025: EQUAL
72026: IFTRUE 72030
72028: GO 72086
72030: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72031: LD_ADDR_VAR 0 9
72035: PUSH
72036: LD_VAR 0 41
72040: PUSH
72041: LD_VAR 0 42
72045: PUSH
72046: LD_VAR 0 43
72050: PUSH
72051: LD_VAR 0 44
72055: PUSH
72056: LD_VAR 0 45
72060: PUSH
72061: LD_VAR 0 46
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: PUSH
72074: LD_VAR 0 4
72078: PUSH
72079: LD_INT 1
72081: PLUS
72082: ARRAY
72083: ST_TO_ADDR
72084: GO 72339
72086: LD_INT 36
72088: DOUBLE
72089: EQUAL
72090: IFTRUE 72094
72092: GO 72150
72094: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72095: LD_ADDR_VAR 0 9
72099: PUSH
72100: LD_VAR 0 47
72104: PUSH
72105: LD_VAR 0 48
72109: PUSH
72110: LD_VAR 0 49
72114: PUSH
72115: LD_VAR 0 50
72119: PUSH
72120: LD_VAR 0 51
72124: PUSH
72125: LD_VAR 0 52
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: PUSH
72138: LD_VAR 0 4
72142: PUSH
72143: LD_INT 1
72145: PLUS
72146: ARRAY
72147: ST_TO_ADDR
72148: GO 72339
72150: LD_INT 4
72152: DOUBLE
72153: EQUAL
72154: IFTRUE 72176
72156: LD_INT 5
72158: DOUBLE
72159: EQUAL
72160: IFTRUE 72176
72162: LD_INT 34
72164: DOUBLE
72165: EQUAL
72166: IFTRUE 72176
72168: LD_INT 37
72170: DOUBLE
72171: EQUAL
72172: IFTRUE 72176
72174: GO 72232
72176: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72177: LD_ADDR_VAR 0 9
72181: PUSH
72182: LD_VAR 0 53
72186: PUSH
72187: LD_VAR 0 54
72191: PUSH
72192: LD_VAR 0 55
72196: PUSH
72197: LD_VAR 0 56
72201: PUSH
72202: LD_VAR 0 57
72206: PUSH
72207: LD_VAR 0 58
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: PUSH
72220: LD_VAR 0 4
72224: PUSH
72225: LD_INT 1
72227: PLUS
72228: ARRAY
72229: ST_TO_ADDR
72230: GO 72339
72232: LD_INT 31
72234: DOUBLE
72235: EQUAL
72236: IFTRUE 72282
72238: LD_INT 32
72240: DOUBLE
72241: EQUAL
72242: IFTRUE 72282
72244: LD_INT 33
72246: DOUBLE
72247: EQUAL
72248: IFTRUE 72282
72250: LD_INT 27
72252: DOUBLE
72253: EQUAL
72254: IFTRUE 72282
72256: LD_INT 26
72258: DOUBLE
72259: EQUAL
72260: IFTRUE 72282
72262: LD_INT 28
72264: DOUBLE
72265: EQUAL
72266: IFTRUE 72282
72268: LD_INT 29
72270: DOUBLE
72271: EQUAL
72272: IFTRUE 72282
72274: LD_INT 30
72276: DOUBLE
72277: EQUAL
72278: IFTRUE 72282
72280: GO 72338
72282: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72283: LD_ADDR_VAR 0 9
72287: PUSH
72288: LD_VAR 0 59
72292: PUSH
72293: LD_VAR 0 60
72297: PUSH
72298: LD_VAR 0 61
72302: PUSH
72303: LD_VAR 0 62
72307: PUSH
72308: LD_VAR 0 63
72312: PUSH
72313: LD_VAR 0 64
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: PUSH
72326: LD_VAR 0 4
72330: PUSH
72331: LD_INT 1
72333: PLUS
72334: ARRAY
72335: ST_TO_ADDR
72336: GO 72339
72338: POP
// temp_list2 = [ ] ;
72339: LD_ADDR_VAR 0 10
72343: PUSH
72344: EMPTY
72345: ST_TO_ADDR
// for i in temp_list do
72346: LD_ADDR_VAR 0 8
72350: PUSH
72351: LD_VAR 0 9
72355: PUSH
72356: FOR_IN
72357: IFFALSE 72409
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72359: LD_ADDR_VAR 0 10
72363: PUSH
72364: LD_VAR 0 10
72368: PUSH
72369: LD_VAR 0 8
72373: PUSH
72374: LD_INT 1
72376: ARRAY
72377: PUSH
72378: LD_VAR 0 2
72382: PLUS
72383: PUSH
72384: LD_VAR 0 8
72388: PUSH
72389: LD_INT 2
72391: ARRAY
72392: PUSH
72393: LD_VAR 0 3
72397: PLUS
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: PUSH
72403: EMPTY
72404: LIST
72405: ADD
72406: ST_TO_ADDR
72407: GO 72356
72409: POP
72410: POP
// result = temp_list2 ;
72411: LD_ADDR_VAR 0 7
72415: PUSH
72416: LD_VAR 0 10
72420: ST_TO_ADDR
// end ;
72421: LD_VAR 0 7
72425: RET
// export function EnemyInRange ( unit , dist ) ; begin
72426: LD_INT 0
72428: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72429: LD_ADDR_VAR 0 3
72433: PUSH
72434: LD_VAR 0 1
72438: PPUSH
72439: CALL_OW 255
72443: PPUSH
72444: LD_VAR 0 1
72448: PPUSH
72449: CALL_OW 250
72453: PPUSH
72454: LD_VAR 0 1
72458: PPUSH
72459: CALL_OW 251
72463: PPUSH
72464: LD_VAR 0 2
72468: PPUSH
72469: CALL 45828 0 4
72473: PUSH
72474: LD_INT 4
72476: ARRAY
72477: ST_TO_ADDR
// end ;
72478: LD_VAR 0 3
72482: RET
// export function PlayerSeeMe ( unit ) ; begin
72483: LD_INT 0
72485: PPUSH
// result := See ( your_side , unit ) ;
72486: LD_ADDR_VAR 0 2
72490: PUSH
72491: LD_OWVAR 2
72495: PPUSH
72496: LD_VAR 0 1
72500: PPUSH
72501: CALL_OW 292
72505: ST_TO_ADDR
// end ;
72506: LD_VAR 0 2
72510: RET
// export function ReverseDir ( unit ) ; begin
72511: LD_INT 0
72513: PPUSH
// if not unit then
72514: LD_VAR 0 1
72518: NOT
72519: IFFALSE 72523
// exit ;
72521: GO 72546
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72523: LD_ADDR_VAR 0 2
72527: PUSH
72528: LD_VAR 0 1
72532: PPUSH
72533: CALL_OW 254
72537: PUSH
72538: LD_INT 3
72540: PLUS
72541: PUSH
72542: LD_INT 6
72544: MOD
72545: ST_TO_ADDR
// end ;
72546: LD_VAR 0 2
72550: RET
// export function ReverseArray ( array ) ; var i ; begin
72551: LD_INT 0
72553: PPUSH
72554: PPUSH
// if not array then
72555: LD_VAR 0 1
72559: NOT
72560: IFFALSE 72564
// exit ;
72562: GO 72619
// result := [ ] ;
72564: LD_ADDR_VAR 0 2
72568: PUSH
72569: EMPTY
72570: ST_TO_ADDR
// for i := array downto 1 do
72571: LD_ADDR_VAR 0 3
72575: PUSH
72576: DOUBLE
72577: LD_VAR 0 1
72581: INC
72582: ST_TO_ADDR
72583: LD_INT 1
72585: PUSH
72586: FOR_DOWNTO
72587: IFFALSE 72617
// result := Join ( result , array [ i ] ) ;
72589: LD_ADDR_VAR 0 2
72593: PUSH
72594: LD_VAR 0 2
72598: PPUSH
72599: LD_VAR 0 1
72603: PUSH
72604: LD_VAR 0 3
72608: ARRAY
72609: PPUSH
72610: CALL 77244 0 2
72614: ST_TO_ADDR
72615: GO 72586
72617: POP
72618: POP
// end ;
72619: LD_VAR 0 2
72623: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72624: LD_INT 0
72626: PPUSH
72627: PPUSH
72628: PPUSH
72629: PPUSH
72630: PPUSH
72631: PPUSH
// if not unit or not hexes then
72632: LD_VAR 0 1
72636: NOT
72637: PUSH
72638: LD_VAR 0 2
72642: NOT
72643: OR
72644: IFFALSE 72648
// exit ;
72646: GO 72771
// dist := 9999 ;
72648: LD_ADDR_VAR 0 5
72652: PUSH
72653: LD_INT 9999
72655: ST_TO_ADDR
// for i = 1 to hexes do
72656: LD_ADDR_VAR 0 4
72660: PUSH
72661: DOUBLE
72662: LD_INT 1
72664: DEC
72665: ST_TO_ADDR
72666: LD_VAR 0 2
72670: PUSH
72671: FOR_TO
72672: IFFALSE 72759
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72674: LD_ADDR_VAR 0 6
72678: PUSH
72679: LD_VAR 0 1
72683: PPUSH
72684: LD_VAR 0 2
72688: PUSH
72689: LD_VAR 0 4
72693: ARRAY
72694: PUSH
72695: LD_INT 1
72697: ARRAY
72698: PPUSH
72699: LD_VAR 0 2
72703: PUSH
72704: LD_VAR 0 4
72708: ARRAY
72709: PUSH
72710: LD_INT 2
72712: ARRAY
72713: PPUSH
72714: CALL_OW 297
72718: ST_TO_ADDR
// if tdist < dist then
72719: LD_VAR 0 6
72723: PUSH
72724: LD_VAR 0 5
72728: LESS
72729: IFFALSE 72757
// begin hex := hexes [ i ] ;
72731: LD_ADDR_VAR 0 8
72735: PUSH
72736: LD_VAR 0 2
72740: PUSH
72741: LD_VAR 0 4
72745: ARRAY
72746: ST_TO_ADDR
// dist := tdist ;
72747: LD_ADDR_VAR 0 5
72751: PUSH
72752: LD_VAR 0 6
72756: ST_TO_ADDR
// end ; end ;
72757: GO 72671
72759: POP
72760: POP
// result := hex ;
72761: LD_ADDR_VAR 0 3
72765: PUSH
72766: LD_VAR 0 8
72770: ST_TO_ADDR
// end ;
72771: LD_VAR 0 3
72775: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72776: LD_INT 0
72778: PPUSH
72779: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72780: LD_VAR 0 1
72784: NOT
72785: PUSH
72786: LD_VAR 0 1
72790: PUSH
72791: LD_INT 21
72793: PUSH
72794: LD_INT 2
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 23
72803: PUSH
72804: LD_INT 2
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PPUSH
72815: CALL_OW 69
72819: IN
72820: NOT
72821: OR
72822: IFFALSE 72826
// exit ;
72824: GO 72873
// for i = 1 to 3 do
72826: LD_ADDR_VAR 0 3
72830: PUSH
72831: DOUBLE
72832: LD_INT 1
72834: DEC
72835: ST_TO_ADDR
72836: LD_INT 3
72838: PUSH
72839: FOR_TO
72840: IFFALSE 72871
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72842: LD_VAR 0 1
72846: PPUSH
72847: CALL_OW 250
72851: PPUSH
72852: LD_VAR 0 1
72856: PPUSH
72857: CALL_OW 251
72861: PPUSH
72862: LD_INT 1
72864: PPUSH
72865: CALL_OW 453
72869: GO 72839
72871: POP
72872: POP
// end ;
72873: LD_VAR 0 2
72877: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72878: LD_INT 0
72880: PPUSH
72881: PPUSH
72882: PPUSH
72883: PPUSH
72884: PPUSH
72885: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72886: LD_VAR 0 1
72890: NOT
72891: PUSH
72892: LD_VAR 0 2
72896: NOT
72897: OR
72898: PUSH
72899: LD_VAR 0 1
72903: PPUSH
72904: CALL_OW 314
72908: OR
72909: IFFALSE 72913
// exit ;
72911: GO 73354
// x := GetX ( enemy_unit ) ;
72913: LD_ADDR_VAR 0 7
72917: PUSH
72918: LD_VAR 0 2
72922: PPUSH
72923: CALL_OW 250
72927: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72928: LD_ADDR_VAR 0 8
72932: PUSH
72933: LD_VAR 0 2
72937: PPUSH
72938: CALL_OW 251
72942: ST_TO_ADDR
// if not x or not y then
72943: LD_VAR 0 7
72947: NOT
72948: PUSH
72949: LD_VAR 0 8
72953: NOT
72954: OR
72955: IFFALSE 72959
// exit ;
72957: GO 73354
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72959: LD_ADDR_VAR 0 6
72963: PUSH
72964: LD_VAR 0 7
72968: PPUSH
72969: LD_INT 0
72971: PPUSH
72972: LD_INT 4
72974: PPUSH
72975: CALL_OW 272
72979: PUSH
72980: LD_VAR 0 8
72984: PPUSH
72985: LD_INT 0
72987: PPUSH
72988: LD_INT 4
72990: PPUSH
72991: CALL_OW 273
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PUSH
73000: LD_VAR 0 7
73004: PPUSH
73005: LD_INT 1
73007: PPUSH
73008: LD_INT 4
73010: PPUSH
73011: CALL_OW 272
73015: PUSH
73016: LD_VAR 0 8
73020: PPUSH
73021: LD_INT 1
73023: PPUSH
73024: LD_INT 4
73026: PPUSH
73027: CALL_OW 273
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: PUSH
73036: LD_VAR 0 7
73040: PPUSH
73041: LD_INT 2
73043: PPUSH
73044: LD_INT 4
73046: PPUSH
73047: CALL_OW 272
73051: PUSH
73052: LD_VAR 0 8
73056: PPUSH
73057: LD_INT 2
73059: PPUSH
73060: LD_INT 4
73062: PPUSH
73063: CALL_OW 273
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PUSH
73072: LD_VAR 0 7
73076: PPUSH
73077: LD_INT 3
73079: PPUSH
73080: LD_INT 4
73082: PPUSH
73083: CALL_OW 272
73087: PUSH
73088: LD_VAR 0 8
73092: PPUSH
73093: LD_INT 3
73095: PPUSH
73096: LD_INT 4
73098: PPUSH
73099: CALL_OW 273
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: PUSH
73108: LD_VAR 0 7
73112: PPUSH
73113: LD_INT 4
73115: PPUSH
73116: LD_INT 4
73118: PPUSH
73119: CALL_OW 272
73123: PUSH
73124: LD_VAR 0 8
73128: PPUSH
73129: LD_INT 4
73131: PPUSH
73132: LD_INT 4
73134: PPUSH
73135: CALL_OW 273
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_VAR 0 7
73148: PPUSH
73149: LD_INT 5
73151: PPUSH
73152: LD_INT 4
73154: PPUSH
73155: CALL_OW 272
73159: PUSH
73160: LD_VAR 0 8
73164: PPUSH
73165: LD_INT 5
73167: PPUSH
73168: LD_INT 4
73170: PPUSH
73171: CALL_OW 273
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: ST_TO_ADDR
// for i = tmp downto 1 do
73188: LD_ADDR_VAR 0 4
73192: PUSH
73193: DOUBLE
73194: LD_VAR 0 6
73198: INC
73199: ST_TO_ADDR
73200: LD_INT 1
73202: PUSH
73203: FOR_DOWNTO
73204: IFFALSE 73305
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73206: LD_VAR 0 6
73210: PUSH
73211: LD_VAR 0 4
73215: ARRAY
73216: PUSH
73217: LD_INT 1
73219: ARRAY
73220: PPUSH
73221: LD_VAR 0 6
73225: PUSH
73226: LD_VAR 0 4
73230: ARRAY
73231: PUSH
73232: LD_INT 2
73234: ARRAY
73235: PPUSH
73236: CALL_OW 488
73240: NOT
73241: PUSH
73242: LD_VAR 0 6
73246: PUSH
73247: LD_VAR 0 4
73251: ARRAY
73252: PUSH
73253: LD_INT 1
73255: ARRAY
73256: PPUSH
73257: LD_VAR 0 6
73261: PUSH
73262: LD_VAR 0 4
73266: ARRAY
73267: PUSH
73268: LD_INT 2
73270: ARRAY
73271: PPUSH
73272: CALL_OW 428
73276: PUSH
73277: LD_INT 0
73279: NONEQUAL
73280: OR
73281: IFFALSE 73303
// tmp := Delete ( tmp , i ) ;
73283: LD_ADDR_VAR 0 6
73287: PUSH
73288: LD_VAR 0 6
73292: PPUSH
73293: LD_VAR 0 4
73297: PPUSH
73298: CALL_OW 3
73302: ST_TO_ADDR
73303: GO 73203
73305: POP
73306: POP
// j := GetClosestHex ( unit , tmp ) ;
73307: LD_ADDR_VAR 0 5
73311: PUSH
73312: LD_VAR 0 1
73316: PPUSH
73317: LD_VAR 0 6
73321: PPUSH
73322: CALL 72624 0 2
73326: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73327: LD_VAR 0 1
73331: PPUSH
73332: LD_VAR 0 5
73336: PUSH
73337: LD_INT 1
73339: ARRAY
73340: PPUSH
73341: LD_VAR 0 5
73345: PUSH
73346: LD_INT 2
73348: ARRAY
73349: PPUSH
73350: CALL_OW 111
// end ;
73354: LD_VAR 0 3
73358: RET
// export function PrepareApemanSoldier ( ) ; begin
73359: LD_INT 0
73361: PPUSH
// uc_nation := 0 ;
73362: LD_ADDR_OWVAR 21
73366: PUSH
73367: LD_INT 0
73369: ST_TO_ADDR
// hc_sex := sex_male ;
73370: LD_ADDR_OWVAR 27
73374: PUSH
73375: LD_INT 1
73377: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73378: LD_ADDR_OWVAR 28
73382: PUSH
73383: LD_INT 15
73385: ST_TO_ADDR
// hc_gallery :=  ;
73386: LD_ADDR_OWVAR 33
73390: PUSH
73391: LD_STRING 
73393: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73394: LD_ADDR_OWVAR 31
73398: PUSH
73399: LD_INT 0
73401: PPUSH
73402: LD_INT 3
73404: PPUSH
73405: CALL_OW 12
73409: PUSH
73410: LD_INT 0
73412: PPUSH
73413: LD_INT 3
73415: PPUSH
73416: CALL_OW 12
73420: PUSH
73421: LD_INT 0
73423: PUSH
73424: LD_INT 0
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: ST_TO_ADDR
// end ;
73433: LD_VAR 0 1
73437: RET
// export function PrepareApemanEngineer ( ) ; begin
73438: LD_INT 0
73440: PPUSH
// uc_nation := 0 ;
73441: LD_ADDR_OWVAR 21
73445: PUSH
73446: LD_INT 0
73448: ST_TO_ADDR
// hc_sex := sex_male ;
73449: LD_ADDR_OWVAR 27
73453: PUSH
73454: LD_INT 1
73456: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73457: LD_ADDR_OWVAR 28
73461: PUSH
73462: LD_INT 16
73464: ST_TO_ADDR
// hc_gallery :=  ;
73465: LD_ADDR_OWVAR 33
73469: PUSH
73470: LD_STRING 
73472: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73473: LD_ADDR_OWVAR 31
73477: PUSH
73478: LD_INT 0
73480: PPUSH
73481: LD_INT 3
73483: PPUSH
73484: CALL_OW 12
73488: PUSH
73489: LD_INT 0
73491: PPUSH
73492: LD_INT 3
73494: PPUSH
73495: CALL_OW 12
73499: PUSH
73500: LD_INT 0
73502: PUSH
73503: LD_INT 0
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: LIST
73510: LIST
73511: ST_TO_ADDR
// end ;
73512: LD_VAR 0 1
73516: RET
// export function PrepareApeman ( agressivity ) ; begin
73517: LD_INT 0
73519: PPUSH
// uc_side := 0 ;
73520: LD_ADDR_OWVAR 20
73524: PUSH
73525: LD_INT 0
73527: ST_TO_ADDR
// uc_nation := 0 ;
73528: LD_ADDR_OWVAR 21
73532: PUSH
73533: LD_INT 0
73535: ST_TO_ADDR
// hc_sex := sex_male ;
73536: LD_ADDR_OWVAR 27
73540: PUSH
73541: LD_INT 1
73543: ST_TO_ADDR
// hc_class := class_apeman ;
73544: LD_ADDR_OWVAR 28
73548: PUSH
73549: LD_INT 12
73551: ST_TO_ADDR
// hc_gallery :=  ;
73552: LD_ADDR_OWVAR 33
73556: PUSH
73557: LD_STRING 
73559: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73560: LD_ADDR_OWVAR 35
73564: PUSH
73565: LD_VAR 0 1
73569: NEG
73570: PPUSH
73571: LD_VAR 0 1
73575: PPUSH
73576: CALL_OW 12
73580: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73581: LD_ADDR_OWVAR 31
73585: PUSH
73586: LD_INT 0
73588: PPUSH
73589: LD_INT 3
73591: PPUSH
73592: CALL_OW 12
73596: PUSH
73597: LD_INT 0
73599: PPUSH
73600: LD_INT 3
73602: PPUSH
73603: CALL_OW 12
73607: PUSH
73608: LD_INT 0
73610: PUSH
73611: LD_INT 0
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: LIST
73618: LIST
73619: ST_TO_ADDR
// end ;
73620: LD_VAR 0 2
73624: RET
// export function PrepareTiger ( agressivity ) ; begin
73625: LD_INT 0
73627: PPUSH
// uc_side := 0 ;
73628: LD_ADDR_OWVAR 20
73632: PUSH
73633: LD_INT 0
73635: ST_TO_ADDR
// uc_nation := 0 ;
73636: LD_ADDR_OWVAR 21
73640: PUSH
73641: LD_INT 0
73643: ST_TO_ADDR
// hc_class := class_tiger ;
73644: LD_ADDR_OWVAR 28
73648: PUSH
73649: LD_INT 14
73651: ST_TO_ADDR
// hc_gallery :=  ;
73652: LD_ADDR_OWVAR 33
73656: PUSH
73657: LD_STRING 
73659: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73660: LD_ADDR_OWVAR 35
73664: PUSH
73665: LD_VAR 0 1
73669: NEG
73670: PPUSH
73671: LD_VAR 0 1
73675: PPUSH
73676: CALL_OW 12
73680: ST_TO_ADDR
// end ;
73681: LD_VAR 0 2
73685: RET
// export function PrepareEnchidna ( ) ; begin
73686: LD_INT 0
73688: PPUSH
// uc_side := 0 ;
73689: LD_ADDR_OWVAR 20
73693: PUSH
73694: LD_INT 0
73696: ST_TO_ADDR
// uc_nation := 0 ;
73697: LD_ADDR_OWVAR 21
73701: PUSH
73702: LD_INT 0
73704: ST_TO_ADDR
// hc_class := class_baggie ;
73705: LD_ADDR_OWVAR 28
73709: PUSH
73710: LD_INT 13
73712: ST_TO_ADDR
// hc_gallery :=  ;
73713: LD_ADDR_OWVAR 33
73717: PUSH
73718: LD_STRING 
73720: ST_TO_ADDR
// end ;
73721: LD_VAR 0 1
73725: RET
// export function PrepareFrog ( ) ; begin
73726: LD_INT 0
73728: PPUSH
// uc_side := 0 ;
73729: LD_ADDR_OWVAR 20
73733: PUSH
73734: LD_INT 0
73736: ST_TO_ADDR
// uc_nation := 0 ;
73737: LD_ADDR_OWVAR 21
73741: PUSH
73742: LD_INT 0
73744: ST_TO_ADDR
// hc_class := class_frog ;
73745: LD_ADDR_OWVAR 28
73749: PUSH
73750: LD_INT 19
73752: ST_TO_ADDR
// hc_gallery :=  ;
73753: LD_ADDR_OWVAR 33
73757: PUSH
73758: LD_STRING 
73760: ST_TO_ADDR
// end ;
73761: LD_VAR 0 1
73765: RET
// export function PrepareFish ( ) ; begin
73766: LD_INT 0
73768: PPUSH
// uc_side := 0 ;
73769: LD_ADDR_OWVAR 20
73773: PUSH
73774: LD_INT 0
73776: ST_TO_ADDR
// uc_nation := 0 ;
73777: LD_ADDR_OWVAR 21
73781: PUSH
73782: LD_INT 0
73784: ST_TO_ADDR
// hc_class := class_fish ;
73785: LD_ADDR_OWVAR 28
73789: PUSH
73790: LD_INT 20
73792: ST_TO_ADDR
// hc_gallery :=  ;
73793: LD_ADDR_OWVAR 33
73797: PUSH
73798: LD_STRING 
73800: ST_TO_ADDR
// end ;
73801: LD_VAR 0 1
73805: RET
// export function PrepareBird ( ) ; begin
73806: LD_INT 0
73808: PPUSH
// uc_side := 0 ;
73809: LD_ADDR_OWVAR 20
73813: PUSH
73814: LD_INT 0
73816: ST_TO_ADDR
// uc_nation := 0 ;
73817: LD_ADDR_OWVAR 21
73821: PUSH
73822: LD_INT 0
73824: ST_TO_ADDR
// hc_class := class_phororhacos ;
73825: LD_ADDR_OWVAR 28
73829: PUSH
73830: LD_INT 18
73832: ST_TO_ADDR
// hc_gallery :=  ;
73833: LD_ADDR_OWVAR 33
73837: PUSH
73838: LD_STRING 
73840: ST_TO_ADDR
// end ;
73841: LD_VAR 0 1
73845: RET
// export function PrepareHorse ( ) ; begin
73846: LD_INT 0
73848: PPUSH
// uc_side := 0 ;
73849: LD_ADDR_OWVAR 20
73853: PUSH
73854: LD_INT 0
73856: ST_TO_ADDR
// uc_nation := 0 ;
73857: LD_ADDR_OWVAR 21
73861: PUSH
73862: LD_INT 0
73864: ST_TO_ADDR
// hc_class := class_horse ;
73865: LD_ADDR_OWVAR 28
73869: PUSH
73870: LD_INT 21
73872: ST_TO_ADDR
// hc_gallery :=  ;
73873: LD_ADDR_OWVAR 33
73877: PUSH
73878: LD_STRING 
73880: ST_TO_ADDR
// end ;
73881: LD_VAR 0 1
73885: RET
// export function PrepareMastodont ( ) ; begin
73886: LD_INT 0
73888: PPUSH
// uc_side := 0 ;
73889: LD_ADDR_OWVAR 20
73893: PUSH
73894: LD_INT 0
73896: ST_TO_ADDR
// uc_nation := 0 ;
73897: LD_ADDR_OWVAR 21
73901: PUSH
73902: LD_INT 0
73904: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73905: LD_ADDR_OWVAR 37
73909: PUSH
73910: LD_INT 31
73912: ST_TO_ADDR
// vc_control := control_rider ;
73913: LD_ADDR_OWVAR 38
73917: PUSH
73918: LD_INT 4
73920: ST_TO_ADDR
// end ;
73921: LD_VAR 0 1
73925: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73926: LD_INT 0
73928: PPUSH
73929: PPUSH
73930: PPUSH
// uc_side = 0 ;
73931: LD_ADDR_OWVAR 20
73935: PUSH
73936: LD_INT 0
73938: ST_TO_ADDR
// uc_nation = 0 ;
73939: LD_ADDR_OWVAR 21
73943: PUSH
73944: LD_INT 0
73946: ST_TO_ADDR
// InitHc_All ( ) ;
73947: CALL_OW 584
// InitVc ;
73951: CALL_OW 20
// if mastodonts then
73955: LD_VAR 0 6
73959: IFFALSE 74026
// for i = 1 to mastodonts do
73961: LD_ADDR_VAR 0 11
73965: PUSH
73966: DOUBLE
73967: LD_INT 1
73969: DEC
73970: ST_TO_ADDR
73971: LD_VAR 0 6
73975: PUSH
73976: FOR_TO
73977: IFFALSE 74024
// begin vc_chassis := 31 ;
73979: LD_ADDR_OWVAR 37
73983: PUSH
73984: LD_INT 31
73986: ST_TO_ADDR
// vc_control := control_rider ;
73987: LD_ADDR_OWVAR 38
73991: PUSH
73992: LD_INT 4
73994: ST_TO_ADDR
// animal := CreateVehicle ;
73995: LD_ADDR_VAR 0 12
73999: PUSH
74000: CALL_OW 45
74004: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74005: LD_VAR 0 12
74009: PPUSH
74010: LD_VAR 0 8
74014: PPUSH
74015: LD_INT 0
74017: PPUSH
74018: CALL 76161 0 3
// end ;
74022: GO 73976
74024: POP
74025: POP
// if horses then
74026: LD_VAR 0 5
74030: IFFALSE 74097
// for i = 1 to horses do
74032: LD_ADDR_VAR 0 11
74036: PUSH
74037: DOUBLE
74038: LD_INT 1
74040: DEC
74041: ST_TO_ADDR
74042: LD_VAR 0 5
74046: PUSH
74047: FOR_TO
74048: IFFALSE 74095
// begin hc_class := 21 ;
74050: LD_ADDR_OWVAR 28
74054: PUSH
74055: LD_INT 21
74057: ST_TO_ADDR
// hc_gallery :=  ;
74058: LD_ADDR_OWVAR 33
74062: PUSH
74063: LD_STRING 
74065: ST_TO_ADDR
// animal := CreateHuman ;
74066: LD_ADDR_VAR 0 12
74070: PUSH
74071: CALL_OW 44
74075: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74076: LD_VAR 0 12
74080: PPUSH
74081: LD_VAR 0 8
74085: PPUSH
74086: LD_INT 0
74088: PPUSH
74089: CALL 76161 0 3
// end ;
74093: GO 74047
74095: POP
74096: POP
// if birds then
74097: LD_VAR 0 1
74101: IFFALSE 74168
// for i = 1 to birds do
74103: LD_ADDR_VAR 0 11
74107: PUSH
74108: DOUBLE
74109: LD_INT 1
74111: DEC
74112: ST_TO_ADDR
74113: LD_VAR 0 1
74117: PUSH
74118: FOR_TO
74119: IFFALSE 74166
// begin hc_class = 18 ;
74121: LD_ADDR_OWVAR 28
74125: PUSH
74126: LD_INT 18
74128: ST_TO_ADDR
// hc_gallery =  ;
74129: LD_ADDR_OWVAR 33
74133: PUSH
74134: LD_STRING 
74136: ST_TO_ADDR
// animal := CreateHuman ;
74137: LD_ADDR_VAR 0 12
74141: PUSH
74142: CALL_OW 44
74146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74147: LD_VAR 0 12
74151: PPUSH
74152: LD_VAR 0 8
74156: PPUSH
74157: LD_INT 0
74159: PPUSH
74160: CALL 76161 0 3
// end ;
74164: GO 74118
74166: POP
74167: POP
// if tigers then
74168: LD_VAR 0 2
74172: IFFALSE 74256
// for i = 1 to tigers do
74174: LD_ADDR_VAR 0 11
74178: PUSH
74179: DOUBLE
74180: LD_INT 1
74182: DEC
74183: ST_TO_ADDR
74184: LD_VAR 0 2
74188: PUSH
74189: FOR_TO
74190: IFFALSE 74254
// begin hc_class = class_tiger ;
74192: LD_ADDR_OWVAR 28
74196: PUSH
74197: LD_INT 14
74199: ST_TO_ADDR
// hc_gallery =  ;
74200: LD_ADDR_OWVAR 33
74204: PUSH
74205: LD_STRING 
74207: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74208: LD_ADDR_OWVAR 35
74212: PUSH
74213: LD_INT 7
74215: NEG
74216: PPUSH
74217: LD_INT 7
74219: PPUSH
74220: CALL_OW 12
74224: ST_TO_ADDR
// animal := CreateHuman ;
74225: LD_ADDR_VAR 0 12
74229: PUSH
74230: CALL_OW 44
74234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74235: LD_VAR 0 12
74239: PPUSH
74240: LD_VAR 0 8
74244: PPUSH
74245: LD_INT 0
74247: PPUSH
74248: CALL 76161 0 3
// end ;
74252: GO 74189
74254: POP
74255: POP
// if apemans then
74256: LD_VAR 0 3
74260: IFFALSE 74383
// for i = 1 to apemans do
74262: LD_ADDR_VAR 0 11
74266: PUSH
74267: DOUBLE
74268: LD_INT 1
74270: DEC
74271: ST_TO_ADDR
74272: LD_VAR 0 3
74276: PUSH
74277: FOR_TO
74278: IFFALSE 74381
// begin hc_class = class_apeman ;
74280: LD_ADDR_OWVAR 28
74284: PUSH
74285: LD_INT 12
74287: ST_TO_ADDR
// hc_gallery =  ;
74288: LD_ADDR_OWVAR 33
74292: PUSH
74293: LD_STRING 
74295: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74296: LD_ADDR_OWVAR 35
74300: PUSH
74301: LD_INT 2
74303: NEG
74304: PPUSH
74305: LD_INT 2
74307: PPUSH
74308: CALL_OW 12
74312: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74313: LD_ADDR_OWVAR 31
74317: PUSH
74318: LD_INT 1
74320: PPUSH
74321: LD_INT 3
74323: PPUSH
74324: CALL_OW 12
74328: PUSH
74329: LD_INT 1
74331: PPUSH
74332: LD_INT 3
74334: PPUSH
74335: CALL_OW 12
74339: PUSH
74340: LD_INT 0
74342: PUSH
74343: LD_INT 0
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: ST_TO_ADDR
// animal := CreateHuman ;
74352: LD_ADDR_VAR 0 12
74356: PUSH
74357: CALL_OW 44
74361: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74362: LD_VAR 0 12
74366: PPUSH
74367: LD_VAR 0 8
74371: PPUSH
74372: LD_INT 0
74374: PPUSH
74375: CALL 76161 0 3
// end ;
74379: GO 74277
74381: POP
74382: POP
// if enchidnas then
74383: LD_VAR 0 4
74387: IFFALSE 74454
// for i = 1 to enchidnas do
74389: LD_ADDR_VAR 0 11
74393: PUSH
74394: DOUBLE
74395: LD_INT 1
74397: DEC
74398: ST_TO_ADDR
74399: LD_VAR 0 4
74403: PUSH
74404: FOR_TO
74405: IFFALSE 74452
// begin hc_class = 13 ;
74407: LD_ADDR_OWVAR 28
74411: PUSH
74412: LD_INT 13
74414: ST_TO_ADDR
// hc_gallery =  ;
74415: LD_ADDR_OWVAR 33
74419: PUSH
74420: LD_STRING 
74422: ST_TO_ADDR
// animal := CreateHuman ;
74423: LD_ADDR_VAR 0 12
74427: PUSH
74428: CALL_OW 44
74432: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74433: LD_VAR 0 12
74437: PPUSH
74438: LD_VAR 0 8
74442: PPUSH
74443: LD_INT 0
74445: PPUSH
74446: CALL 76161 0 3
// end ;
74450: GO 74404
74452: POP
74453: POP
// if fishes then
74454: LD_VAR 0 7
74458: IFFALSE 74525
// for i = 1 to fishes do
74460: LD_ADDR_VAR 0 11
74464: PUSH
74465: DOUBLE
74466: LD_INT 1
74468: DEC
74469: ST_TO_ADDR
74470: LD_VAR 0 7
74474: PUSH
74475: FOR_TO
74476: IFFALSE 74523
// begin hc_class = 20 ;
74478: LD_ADDR_OWVAR 28
74482: PUSH
74483: LD_INT 20
74485: ST_TO_ADDR
// hc_gallery =  ;
74486: LD_ADDR_OWVAR 33
74490: PUSH
74491: LD_STRING 
74493: ST_TO_ADDR
// animal := CreateHuman ;
74494: LD_ADDR_VAR 0 12
74498: PUSH
74499: CALL_OW 44
74503: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74504: LD_VAR 0 12
74508: PPUSH
74509: LD_VAR 0 9
74513: PPUSH
74514: LD_INT 0
74516: PPUSH
74517: CALL 76161 0 3
// end ;
74521: GO 74475
74523: POP
74524: POP
// end ;
74525: LD_VAR 0 10
74529: RET
// export function WantHeal ( sci , unit ) ; begin
74530: LD_INT 0
74532: PPUSH
// if GetTaskList ( sci ) > 0 then
74533: LD_VAR 0 1
74537: PPUSH
74538: CALL_OW 437
74542: PUSH
74543: LD_INT 0
74545: GREATER
74546: IFFALSE 74616
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74548: LD_VAR 0 1
74552: PPUSH
74553: CALL_OW 437
74557: PUSH
74558: LD_INT 1
74560: ARRAY
74561: PUSH
74562: LD_INT 1
74564: ARRAY
74565: PUSH
74566: LD_STRING l
74568: EQUAL
74569: PUSH
74570: LD_VAR 0 1
74574: PPUSH
74575: CALL_OW 437
74579: PUSH
74580: LD_INT 1
74582: ARRAY
74583: PUSH
74584: LD_INT 4
74586: ARRAY
74587: PUSH
74588: LD_VAR 0 2
74592: EQUAL
74593: AND
74594: IFFALSE 74606
// result := true else
74596: LD_ADDR_VAR 0 3
74600: PUSH
74601: LD_INT 1
74603: ST_TO_ADDR
74604: GO 74614
// result := false ;
74606: LD_ADDR_VAR 0 3
74610: PUSH
74611: LD_INT 0
74613: ST_TO_ADDR
// end else
74614: GO 74624
// result := false ;
74616: LD_ADDR_VAR 0 3
74620: PUSH
74621: LD_INT 0
74623: ST_TO_ADDR
// end ;
74624: LD_VAR 0 3
74628: RET
// export function HealTarget ( sci ) ; begin
74629: LD_INT 0
74631: PPUSH
// if not sci then
74632: LD_VAR 0 1
74636: NOT
74637: IFFALSE 74641
// exit ;
74639: GO 74706
// result := 0 ;
74641: LD_ADDR_VAR 0 2
74645: PUSH
74646: LD_INT 0
74648: ST_TO_ADDR
// if GetTaskList ( sci ) then
74649: LD_VAR 0 1
74653: PPUSH
74654: CALL_OW 437
74658: IFFALSE 74706
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74660: LD_VAR 0 1
74664: PPUSH
74665: CALL_OW 437
74669: PUSH
74670: LD_INT 1
74672: ARRAY
74673: PUSH
74674: LD_INT 1
74676: ARRAY
74677: PUSH
74678: LD_STRING l
74680: EQUAL
74681: IFFALSE 74706
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74683: LD_ADDR_VAR 0 2
74687: PUSH
74688: LD_VAR 0 1
74692: PPUSH
74693: CALL_OW 437
74697: PUSH
74698: LD_INT 1
74700: ARRAY
74701: PUSH
74702: LD_INT 4
74704: ARRAY
74705: ST_TO_ADDR
// end ;
74706: LD_VAR 0 2
74710: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74711: LD_INT 0
74713: PPUSH
74714: PPUSH
74715: PPUSH
74716: PPUSH
// if not base_units then
74717: LD_VAR 0 1
74721: NOT
74722: IFFALSE 74726
// exit ;
74724: GO 74813
// result := false ;
74726: LD_ADDR_VAR 0 2
74730: PUSH
74731: LD_INT 0
74733: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74734: LD_ADDR_VAR 0 5
74738: PUSH
74739: LD_VAR 0 1
74743: PPUSH
74744: LD_INT 21
74746: PUSH
74747: LD_INT 3
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: PPUSH
74754: CALL_OW 72
74758: ST_TO_ADDR
// if not tmp then
74759: LD_VAR 0 5
74763: NOT
74764: IFFALSE 74768
// exit ;
74766: GO 74813
// for i in tmp do
74768: LD_ADDR_VAR 0 3
74772: PUSH
74773: LD_VAR 0 5
74777: PUSH
74778: FOR_IN
74779: IFFALSE 74811
// begin result := EnemyInRange ( i , 22 ) ;
74781: LD_ADDR_VAR 0 2
74785: PUSH
74786: LD_VAR 0 3
74790: PPUSH
74791: LD_INT 22
74793: PPUSH
74794: CALL 72426 0 2
74798: ST_TO_ADDR
// if result then
74799: LD_VAR 0 2
74803: IFFALSE 74809
// exit ;
74805: POP
74806: POP
74807: GO 74813
// end ;
74809: GO 74778
74811: POP
74812: POP
// end ;
74813: LD_VAR 0 2
74817: RET
// export function FilterByTag ( units , tag ) ; begin
74818: LD_INT 0
74820: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74821: LD_ADDR_VAR 0 3
74825: PUSH
74826: LD_VAR 0 1
74830: PPUSH
74831: LD_INT 120
74833: PUSH
74834: LD_VAR 0 2
74838: PUSH
74839: EMPTY
74840: LIST
74841: LIST
74842: PPUSH
74843: CALL_OW 72
74847: ST_TO_ADDR
// end ;
74848: LD_VAR 0 3
74852: RET
// export function IsDriver ( un ) ; begin
74853: LD_INT 0
74855: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74856: LD_ADDR_VAR 0 2
74860: PUSH
74861: LD_VAR 0 1
74865: PUSH
74866: LD_INT 55
74868: PUSH
74869: EMPTY
74870: LIST
74871: PPUSH
74872: CALL_OW 69
74876: IN
74877: ST_TO_ADDR
// end ;
74878: LD_VAR 0 2
74882: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74883: LD_INT 0
74885: PPUSH
74886: PPUSH
// list := [ ] ;
74887: LD_ADDR_VAR 0 5
74891: PUSH
74892: EMPTY
74893: ST_TO_ADDR
// case d of 0 :
74894: LD_VAR 0 3
74898: PUSH
74899: LD_INT 0
74901: DOUBLE
74902: EQUAL
74903: IFTRUE 74907
74905: GO 75040
74907: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74908: LD_ADDR_VAR 0 5
74912: PUSH
74913: LD_VAR 0 1
74917: PUSH
74918: LD_INT 4
74920: MINUS
74921: PUSH
74922: LD_VAR 0 2
74926: PUSH
74927: LD_INT 4
74929: MINUS
74930: PUSH
74931: LD_INT 2
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: LIST
74938: PUSH
74939: LD_VAR 0 1
74943: PUSH
74944: LD_INT 3
74946: MINUS
74947: PUSH
74948: LD_VAR 0 2
74952: PUSH
74953: LD_INT 1
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: LIST
74960: PUSH
74961: LD_VAR 0 1
74965: PUSH
74966: LD_INT 4
74968: PLUS
74969: PUSH
74970: LD_VAR 0 2
74974: PUSH
74975: LD_INT 4
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: LIST
74982: PUSH
74983: LD_VAR 0 1
74987: PUSH
74988: LD_INT 3
74990: PLUS
74991: PUSH
74992: LD_VAR 0 2
74996: PUSH
74997: LD_INT 3
74999: PLUS
75000: PUSH
75001: LD_INT 5
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: LIST
75008: PUSH
75009: LD_VAR 0 1
75013: PUSH
75014: LD_VAR 0 2
75018: PUSH
75019: LD_INT 4
75021: PLUS
75022: PUSH
75023: LD_INT 0
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: LIST
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: ST_TO_ADDR
// end ; 1 :
75038: GO 75738
75040: LD_INT 1
75042: DOUBLE
75043: EQUAL
75044: IFTRUE 75048
75046: GO 75181
75048: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75049: LD_ADDR_VAR 0 5
75053: PUSH
75054: LD_VAR 0 1
75058: PUSH
75059: LD_VAR 0 2
75063: PUSH
75064: LD_INT 4
75066: MINUS
75067: PUSH
75068: LD_INT 3
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: LIST
75075: PUSH
75076: LD_VAR 0 1
75080: PUSH
75081: LD_INT 3
75083: MINUS
75084: PUSH
75085: LD_VAR 0 2
75089: PUSH
75090: LD_INT 3
75092: MINUS
75093: PUSH
75094: LD_INT 2
75096: PUSH
75097: EMPTY
75098: LIST
75099: LIST
75100: LIST
75101: PUSH
75102: LD_VAR 0 1
75106: PUSH
75107: LD_INT 4
75109: MINUS
75110: PUSH
75111: LD_VAR 0 2
75115: PUSH
75116: LD_INT 1
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: LIST
75123: PUSH
75124: LD_VAR 0 1
75128: PUSH
75129: LD_VAR 0 2
75133: PUSH
75134: LD_INT 3
75136: PLUS
75137: PUSH
75138: LD_INT 0
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: LIST
75145: PUSH
75146: LD_VAR 0 1
75150: PUSH
75151: LD_INT 4
75153: PLUS
75154: PUSH
75155: LD_VAR 0 2
75159: PUSH
75160: LD_INT 4
75162: PLUS
75163: PUSH
75164: LD_INT 5
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: LIST
75171: PUSH
75172: EMPTY
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: ST_TO_ADDR
// end ; 2 :
75179: GO 75738
75181: LD_INT 2
75183: DOUBLE
75184: EQUAL
75185: IFTRUE 75189
75187: GO 75318
75189: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75190: LD_ADDR_VAR 0 5
75194: PUSH
75195: LD_VAR 0 1
75199: PUSH
75200: LD_VAR 0 2
75204: PUSH
75205: LD_INT 3
75207: MINUS
75208: PUSH
75209: LD_INT 3
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: LIST
75216: PUSH
75217: LD_VAR 0 1
75221: PUSH
75222: LD_INT 4
75224: PLUS
75225: PUSH
75226: LD_VAR 0 2
75230: PUSH
75231: LD_INT 4
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: LIST
75238: PUSH
75239: LD_VAR 0 1
75243: PUSH
75244: LD_VAR 0 2
75248: PUSH
75249: LD_INT 4
75251: PLUS
75252: PUSH
75253: LD_INT 0
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: LIST
75260: PUSH
75261: LD_VAR 0 1
75265: PUSH
75266: LD_INT 3
75268: MINUS
75269: PUSH
75270: LD_VAR 0 2
75274: PUSH
75275: LD_INT 1
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: LIST
75282: PUSH
75283: LD_VAR 0 1
75287: PUSH
75288: LD_INT 4
75290: MINUS
75291: PUSH
75292: LD_VAR 0 2
75296: PUSH
75297: LD_INT 4
75299: MINUS
75300: PUSH
75301: LD_INT 2
75303: PUSH
75304: EMPTY
75305: LIST
75306: LIST
75307: LIST
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: LIST
75313: LIST
75314: LIST
75315: ST_TO_ADDR
// end ; 3 :
75316: GO 75738
75318: LD_INT 3
75320: DOUBLE
75321: EQUAL
75322: IFTRUE 75326
75324: GO 75459
75326: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75327: LD_ADDR_VAR 0 5
75331: PUSH
75332: LD_VAR 0 1
75336: PUSH
75337: LD_INT 3
75339: PLUS
75340: PUSH
75341: LD_VAR 0 2
75345: PUSH
75346: LD_INT 4
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: LIST
75353: PUSH
75354: LD_VAR 0 1
75358: PUSH
75359: LD_INT 4
75361: PLUS
75362: PUSH
75363: LD_VAR 0 2
75367: PUSH
75368: LD_INT 4
75370: PLUS
75371: PUSH
75372: LD_INT 5
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: LIST
75379: PUSH
75380: LD_VAR 0 1
75384: PUSH
75385: LD_INT 4
75387: MINUS
75388: PUSH
75389: LD_VAR 0 2
75393: PUSH
75394: LD_INT 1
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: LIST
75401: PUSH
75402: LD_VAR 0 1
75406: PUSH
75407: LD_VAR 0 2
75411: PUSH
75412: LD_INT 4
75414: MINUS
75415: PUSH
75416: LD_INT 3
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: LIST
75423: PUSH
75424: LD_VAR 0 1
75428: PUSH
75429: LD_INT 3
75431: MINUS
75432: PUSH
75433: LD_VAR 0 2
75437: PUSH
75438: LD_INT 3
75440: MINUS
75441: PUSH
75442: LD_INT 2
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: LIST
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: ST_TO_ADDR
// end ; 4 :
75457: GO 75738
75459: LD_INT 4
75461: DOUBLE
75462: EQUAL
75463: IFTRUE 75467
75465: GO 75600
75467: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75468: LD_ADDR_VAR 0 5
75472: PUSH
75473: LD_VAR 0 1
75477: PUSH
75478: LD_VAR 0 2
75482: PUSH
75483: LD_INT 4
75485: PLUS
75486: PUSH
75487: LD_INT 0
75489: PUSH
75490: EMPTY
75491: LIST
75492: LIST
75493: LIST
75494: PUSH
75495: LD_VAR 0 1
75499: PUSH
75500: LD_INT 3
75502: PLUS
75503: PUSH
75504: LD_VAR 0 2
75508: PUSH
75509: LD_INT 3
75511: PLUS
75512: PUSH
75513: LD_INT 5
75515: PUSH
75516: EMPTY
75517: LIST
75518: LIST
75519: LIST
75520: PUSH
75521: LD_VAR 0 1
75525: PUSH
75526: LD_INT 4
75528: PLUS
75529: PUSH
75530: LD_VAR 0 2
75534: PUSH
75535: LD_INT 4
75537: PUSH
75538: EMPTY
75539: LIST
75540: LIST
75541: LIST
75542: PUSH
75543: LD_VAR 0 1
75547: PUSH
75548: LD_VAR 0 2
75552: PUSH
75553: LD_INT 3
75555: MINUS
75556: PUSH
75557: LD_INT 3
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: LIST
75564: PUSH
75565: LD_VAR 0 1
75569: PUSH
75570: LD_INT 4
75572: MINUS
75573: PUSH
75574: LD_VAR 0 2
75578: PUSH
75579: LD_INT 4
75581: MINUS
75582: PUSH
75583: LD_INT 2
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: LIST
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: ST_TO_ADDR
// end ; 5 :
75598: GO 75738
75600: LD_INT 5
75602: DOUBLE
75603: EQUAL
75604: IFTRUE 75608
75606: GO 75737
75608: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75609: LD_ADDR_VAR 0 5
75613: PUSH
75614: LD_VAR 0 1
75618: PUSH
75619: LD_INT 4
75621: MINUS
75622: PUSH
75623: LD_VAR 0 2
75627: PUSH
75628: LD_INT 1
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: LIST
75635: PUSH
75636: LD_VAR 0 1
75640: PUSH
75641: LD_VAR 0 2
75645: PUSH
75646: LD_INT 4
75648: MINUS
75649: PUSH
75650: LD_INT 3
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: LIST
75657: PUSH
75658: LD_VAR 0 1
75662: PUSH
75663: LD_INT 4
75665: PLUS
75666: PUSH
75667: LD_VAR 0 2
75671: PUSH
75672: LD_INT 4
75674: PLUS
75675: PUSH
75676: LD_INT 5
75678: PUSH
75679: EMPTY
75680: LIST
75681: LIST
75682: LIST
75683: PUSH
75684: LD_VAR 0 1
75688: PUSH
75689: LD_INT 3
75691: PLUS
75692: PUSH
75693: LD_VAR 0 2
75697: PUSH
75698: LD_INT 4
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: LIST
75705: PUSH
75706: LD_VAR 0 1
75710: PUSH
75711: LD_VAR 0 2
75715: PUSH
75716: LD_INT 3
75718: PLUS
75719: PUSH
75720: LD_INT 0
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: LIST
75727: PUSH
75728: EMPTY
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: LIST
75734: ST_TO_ADDR
// end ; end ;
75735: GO 75738
75737: POP
// result := list ;
75738: LD_ADDR_VAR 0 4
75742: PUSH
75743: LD_VAR 0 5
75747: ST_TO_ADDR
// end ;
75748: LD_VAR 0 4
75752: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75753: LD_INT 0
75755: PPUSH
75756: PPUSH
75757: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75758: LD_VAR 0 1
75762: NOT
75763: PUSH
75764: LD_VAR 0 2
75768: PUSH
75769: LD_INT 1
75771: PUSH
75772: LD_INT 2
75774: PUSH
75775: LD_INT 3
75777: PUSH
75778: LD_INT 4
75780: PUSH
75781: EMPTY
75782: LIST
75783: LIST
75784: LIST
75785: LIST
75786: IN
75787: NOT
75788: OR
75789: IFFALSE 75793
// exit ;
75791: GO 75885
// tmp := [ ] ;
75793: LD_ADDR_VAR 0 5
75797: PUSH
75798: EMPTY
75799: ST_TO_ADDR
// for i in units do
75800: LD_ADDR_VAR 0 4
75804: PUSH
75805: LD_VAR 0 1
75809: PUSH
75810: FOR_IN
75811: IFFALSE 75854
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75813: LD_ADDR_VAR 0 5
75817: PUSH
75818: LD_VAR 0 5
75822: PPUSH
75823: LD_VAR 0 5
75827: PUSH
75828: LD_INT 1
75830: PLUS
75831: PPUSH
75832: LD_VAR 0 4
75836: PPUSH
75837: LD_VAR 0 2
75841: PPUSH
75842: CALL_OW 259
75846: PPUSH
75847: CALL_OW 2
75851: ST_TO_ADDR
75852: GO 75810
75854: POP
75855: POP
// if not tmp then
75856: LD_VAR 0 5
75860: NOT
75861: IFFALSE 75865
// exit ;
75863: GO 75885
// result := SortListByListDesc ( units , tmp ) ;
75865: LD_ADDR_VAR 0 3
75869: PUSH
75870: LD_VAR 0 1
75874: PPUSH
75875: LD_VAR 0 5
75879: PPUSH
75880: CALL_OW 77
75884: ST_TO_ADDR
// end ;
75885: LD_VAR 0 3
75889: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75890: LD_INT 0
75892: PPUSH
75893: PPUSH
75894: PPUSH
// result := false ;
75895: LD_ADDR_VAR 0 3
75899: PUSH
75900: LD_INT 0
75902: ST_TO_ADDR
// x := GetX ( building ) ;
75903: LD_ADDR_VAR 0 4
75907: PUSH
75908: LD_VAR 0 2
75912: PPUSH
75913: CALL_OW 250
75917: ST_TO_ADDR
// y := GetY ( building ) ;
75918: LD_ADDR_VAR 0 5
75922: PUSH
75923: LD_VAR 0 2
75927: PPUSH
75928: CALL_OW 251
75932: ST_TO_ADDR
// if not building or not x or not y then
75933: LD_VAR 0 2
75937: NOT
75938: PUSH
75939: LD_VAR 0 4
75943: NOT
75944: OR
75945: PUSH
75946: LD_VAR 0 5
75950: NOT
75951: OR
75952: IFFALSE 75956
// exit ;
75954: GO 76048
// if GetTaskList ( unit ) then
75956: LD_VAR 0 1
75960: PPUSH
75961: CALL_OW 437
75965: IFFALSE 76048
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75967: LD_STRING e
75969: PUSH
75970: LD_VAR 0 1
75974: PPUSH
75975: CALL_OW 437
75979: PUSH
75980: LD_INT 1
75982: ARRAY
75983: PUSH
75984: LD_INT 1
75986: ARRAY
75987: EQUAL
75988: PUSH
75989: LD_VAR 0 4
75993: PUSH
75994: LD_VAR 0 1
75998: PPUSH
75999: CALL_OW 437
76003: PUSH
76004: LD_INT 1
76006: ARRAY
76007: PUSH
76008: LD_INT 2
76010: ARRAY
76011: EQUAL
76012: AND
76013: PUSH
76014: LD_VAR 0 5
76018: PUSH
76019: LD_VAR 0 1
76023: PPUSH
76024: CALL_OW 437
76028: PUSH
76029: LD_INT 1
76031: ARRAY
76032: PUSH
76033: LD_INT 3
76035: ARRAY
76036: EQUAL
76037: AND
76038: IFFALSE 76048
// result := true end ;
76040: LD_ADDR_VAR 0 3
76044: PUSH
76045: LD_INT 1
76047: ST_TO_ADDR
// end ;
76048: LD_VAR 0 3
76052: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76053: LD_INT 0
76055: PPUSH
// result := false ;
76056: LD_ADDR_VAR 0 4
76060: PUSH
76061: LD_INT 0
76063: ST_TO_ADDR
// if GetTaskList ( unit ) then
76064: LD_VAR 0 1
76068: PPUSH
76069: CALL_OW 437
76073: IFFALSE 76156
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76075: LD_STRING M
76077: PUSH
76078: LD_VAR 0 1
76082: PPUSH
76083: CALL_OW 437
76087: PUSH
76088: LD_INT 1
76090: ARRAY
76091: PUSH
76092: LD_INT 1
76094: ARRAY
76095: EQUAL
76096: PUSH
76097: LD_VAR 0 2
76101: PUSH
76102: LD_VAR 0 1
76106: PPUSH
76107: CALL_OW 437
76111: PUSH
76112: LD_INT 1
76114: ARRAY
76115: PUSH
76116: LD_INT 2
76118: ARRAY
76119: EQUAL
76120: AND
76121: PUSH
76122: LD_VAR 0 3
76126: PUSH
76127: LD_VAR 0 1
76131: PPUSH
76132: CALL_OW 437
76136: PUSH
76137: LD_INT 1
76139: ARRAY
76140: PUSH
76141: LD_INT 3
76143: ARRAY
76144: EQUAL
76145: AND
76146: IFFALSE 76156
// result := true ;
76148: LD_ADDR_VAR 0 4
76152: PUSH
76153: LD_INT 1
76155: ST_TO_ADDR
// end ; end ;
76156: LD_VAR 0 4
76160: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76161: LD_INT 0
76163: PPUSH
76164: PPUSH
76165: PPUSH
76166: PPUSH
// if not unit or not area then
76167: LD_VAR 0 1
76171: NOT
76172: PUSH
76173: LD_VAR 0 2
76177: NOT
76178: OR
76179: IFFALSE 76183
// exit ;
76181: GO 76347
// tmp := AreaToList ( area , i ) ;
76183: LD_ADDR_VAR 0 6
76187: PUSH
76188: LD_VAR 0 2
76192: PPUSH
76193: LD_VAR 0 5
76197: PPUSH
76198: CALL_OW 517
76202: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76203: LD_ADDR_VAR 0 5
76207: PUSH
76208: DOUBLE
76209: LD_INT 1
76211: DEC
76212: ST_TO_ADDR
76213: LD_VAR 0 6
76217: PUSH
76218: LD_INT 1
76220: ARRAY
76221: PUSH
76222: FOR_TO
76223: IFFALSE 76345
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76225: LD_ADDR_VAR 0 7
76229: PUSH
76230: LD_VAR 0 6
76234: PUSH
76235: LD_INT 1
76237: ARRAY
76238: PUSH
76239: LD_VAR 0 5
76243: ARRAY
76244: PUSH
76245: LD_VAR 0 6
76249: PUSH
76250: LD_INT 2
76252: ARRAY
76253: PUSH
76254: LD_VAR 0 5
76258: ARRAY
76259: PUSH
76260: EMPTY
76261: LIST
76262: LIST
76263: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76264: LD_VAR 0 7
76268: PUSH
76269: LD_INT 1
76271: ARRAY
76272: PPUSH
76273: LD_VAR 0 7
76277: PUSH
76278: LD_INT 2
76280: ARRAY
76281: PPUSH
76282: CALL_OW 428
76286: PUSH
76287: LD_INT 0
76289: EQUAL
76290: IFFALSE 76343
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76292: LD_VAR 0 1
76296: PPUSH
76297: LD_VAR 0 7
76301: PUSH
76302: LD_INT 1
76304: ARRAY
76305: PPUSH
76306: LD_VAR 0 7
76310: PUSH
76311: LD_INT 2
76313: ARRAY
76314: PPUSH
76315: LD_VAR 0 3
76319: PPUSH
76320: CALL_OW 48
// result := IsPlaced ( unit ) ;
76324: LD_ADDR_VAR 0 4
76328: PUSH
76329: LD_VAR 0 1
76333: PPUSH
76334: CALL_OW 305
76338: ST_TO_ADDR
// exit ;
76339: POP
76340: POP
76341: GO 76347
// end ; end ;
76343: GO 76222
76345: POP
76346: POP
// end ;
76347: LD_VAR 0 4
76351: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76352: LD_INT 0
76354: PPUSH
76355: PPUSH
76356: PPUSH
// if not side or side > 8 then
76357: LD_VAR 0 1
76361: NOT
76362: PUSH
76363: LD_VAR 0 1
76367: PUSH
76368: LD_INT 8
76370: GREATER
76371: OR
76372: IFFALSE 76376
// exit ;
76374: GO 76563
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76376: LD_ADDR_VAR 0 4
76380: PUSH
76381: LD_INT 22
76383: PUSH
76384: LD_VAR 0 1
76388: PUSH
76389: EMPTY
76390: LIST
76391: LIST
76392: PUSH
76393: LD_INT 21
76395: PUSH
76396: LD_INT 3
76398: PUSH
76399: EMPTY
76400: LIST
76401: LIST
76402: PUSH
76403: EMPTY
76404: LIST
76405: LIST
76406: PPUSH
76407: CALL_OW 69
76411: ST_TO_ADDR
// if not tmp then
76412: LD_VAR 0 4
76416: NOT
76417: IFFALSE 76421
// exit ;
76419: GO 76563
// enable_addtolog := true ;
76421: LD_ADDR_OWVAR 81
76425: PUSH
76426: LD_INT 1
76428: ST_TO_ADDR
// AddToLog ( [ ) ;
76429: LD_STRING [
76431: PPUSH
76432: CALL_OW 561
// for i in tmp do
76436: LD_ADDR_VAR 0 3
76440: PUSH
76441: LD_VAR 0 4
76445: PUSH
76446: FOR_IN
76447: IFFALSE 76554
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76449: LD_STRING [
76451: PUSH
76452: LD_VAR 0 3
76456: PPUSH
76457: CALL_OW 266
76461: STR
76462: PUSH
76463: LD_STRING , 
76465: STR
76466: PUSH
76467: LD_VAR 0 3
76471: PPUSH
76472: CALL_OW 250
76476: STR
76477: PUSH
76478: LD_STRING , 
76480: STR
76481: PUSH
76482: LD_VAR 0 3
76486: PPUSH
76487: CALL_OW 251
76491: STR
76492: PUSH
76493: LD_STRING , 
76495: STR
76496: PUSH
76497: LD_VAR 0 3
76501: PPUSH
76502: CALL_OW 254
76506: STR
76507: PUSH
76508: LD_STRING , 
76510: STR
76511: PUSH
76512: LD_VAR 0 3
76516: PPUSH
76517: LD_INT 1
76519: PPUSH
76520: CALL_OW 268
76524: STR
76525: PUSH
76526: LD_STRING , 
76528: STR
76529: PUSH
76530: LD_VAR 0 3
76534: PPUSH
76535: LD_INT 2
76537: PPUSH
76538: CALL_OW 268
76542: STR
76543: PUSH
76544: LD_STRING ],
76546: STR
76547: PPUSH
76548: CALL_OW 561
// end ;
76552: GO 76446
76554: POP
76555: POP
// AddToLog ( ]; ) ;
76556: LD_STRING ];
76558: PPUSH
76559: CALL_OW 561
// end ;
76563: LD_VAR 0 2
76567: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76568: LD_INT 0
76570: PPUSH
76571: PPUSH
76572: PPUSH
76573: PPUSH
76574: PPUSH
// if not area or not rate or not max then
76575: LD_VAR 0 1
76579: NOT
76580: PUSH
76581: LD_VAR 0 2
76585: NOT
76586: OR
76587: PUSH
76588: LD_VAR 0 4
76592: NOT
76593: OR
76594: IFFALSE 76598
// exit ;
76596: GO 76787
// while 1 do
76598: LD_INT 1
76600: IFFALSE 76787
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76602: LD_ADDR_VAR 0 9
76606: PUSH
76607: LD_VAR 0 1
76611: PPUSH
76612: LD_INT 1
76614: PPUSH
76615: CALL_OW 287
76619: PUSH
76620: LD_INT 10
76622: MUL
76623: ST_TO_ADDR
// r := rate / 10 ;
76624: LD_ADDR_VAR 0 7
76628: PUSH
76629: LD_VAR 0 2
76633: PUSH
76634: LD_INT 10
76636: DIVREAL
76637: ST_TO_ADDR
// time := 1 1$00 ;
76638: LD_ADDR_VAR 0 8
76642: PUSH
76643: LD_INT 2100
76645: ST_TO_ADDR
// if amount < min then
76646: LD_VAR 0 9
76650: PUSH
76651: LD_VAR 0 3
76655: LESS
76656: IFFALSE 76674
// r := r * 2 else
76658: LD_ADDR_VAR 0 7
76662: PUSH
76663: LD_VAR 0 7
76667: PUSH
76668: LD_INT 2
76670: MUL
76671: ST_TO_ADDR
76672: GO 76700
// if amount > max then
76674: LD_VAR 0 9
76678: PUSH
76679: LD_VAR 0 4
76683: GREATER
76684: IFFALSE 76700
// r := r / 2 ;
76686: LD_ADDR_VAR 0 7
76690: PUSH
76691: LD_VAR 0 7
76695: PUSH
76696: LD_INT 2
76698: DIVREAL
76699: ST_TO_ADDR
// time := time / r ;
76700: LD_ADDR_VAR 0 8
76704: PUSH
76705: LD_VAR 0 8
76709: PUSH
76710: LD_VAR 0 7
76714: DIVREAL
76715: ST_TO_ADDR
// if time < 0 then
76716: LD_VAR 0 8
76720: PUSH
76721: LD_INT 0
76723: LESS
76724: IFFALSE 76741
// time := time * - 1 ;
76726: LD_ADDR_VAR 0 8
76730: PUSH
76731: LD_VAR 0 8
76735: PUSH
76736: LD_INT 1
76738: NEG
76739: MUL
76740: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76741: LD_VAR 0 8
76745: PUSH
76746: LD_INT 35
76748: PPUSH
76749: LD_INT 875
76751: PPUSH
76752: CALL_OW 12
76756: PLUS
76757: PPUSH
76758: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76762: LD_INT 1
76764: PPUSH
76765: LD_INT 5
76767: PPUSH
76768: CALL_OW 12
76772: PPUSH
76773: LD_VAR 0 1
76777: PPUSH
76778: LD_INT 1
76780: PPUSH
76781: CALL_OW 55
// end ;
76785: GO 76598
// end ;
76787: LD_VAR 0 5
76791: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76792: LD_INT 0
76794: PPUSH
76795: PPUSH
76796: PPUSH
76797: PPUSH
76798: PPUSH
76799: PPUSH
76800: PPUSH
76801: PPUSH
// if not turrets or not factories then
76802: LD_VAR 0 1
76806: NOT
76807: PUSH
76808: LD_VAR 0 2
76812: NOT
76813: OR
76814: IFFALSE 76818
// exit ;
76816: GO 77125
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76818: LD_ADDR_VAR 0 10
76822: PUSH
76823: LD_INT 5
76825: PUSH
76826: LD_INT 6
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PUSH
76833: LD_INT 2
76835: PUSH
76836: LD_INT 4
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: PUSH
76843: LD_INT 3
76845: PUSH
76846: LD_INT 5
76848: PUSH
76849: EMPTY
76850: LIST
76851: LIST
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: LIST
76857: PUSH
76858: LD_INT 24
76860: PUSH
76861: LD_INT 25
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: PUSH
76868: LD_INT 23
76870: PUSH
76871: LD_INT 27
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: EMPTY
76879: LIST
76880: LIST
76881: PUSH
76882: LD_INT 42
76884: PUSH
76885: LD_INT 43
76887: PUSH
76888: EMPTY
76889: LIST
76890: LIST
76891: PUSH
76892: LD_INT 44
76894: PUSH
76895: LD_INT 46
76897: PUSH
76898: EMPTY
76899: LIST
76900: LIST
76901: PUSH
76902: LD_INT 45
76904: PUSH
76905: LD_INT 47
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: LIST
76916: PUSH
76917: EMPTY
76918: LIST
76919: LIST
76920: LIST
76921: ST_TO_ADDR
// result := [ ] ;
76922: LD_ADDR_VAR 0 3
76926: PUSH
76927: EMPTY
76928: ST_TO_ADDR
// for i in turrets do
76929: LD_ADDR_VAR 0 4
76933: PUSH
76934: LD_VAR 0 1
76938: PUSH
76939: FOR_IN
76940: IFFALSE 77123
// begin nat := GetNation ( i ) ;
76942: LD_ADDR_VAR 0 7
76946: PUSH
76947: LD_VAR 0 4
76951: PPUSH
76952: CALL_OW 248
76956: ST_TO_ADDR
// weapon := 0 ;
76957: LD_ADDR_VAR 0 8
76961: PUSH
76962: LD_INT 0
76964: ST_TO_ADDR
// if not nat then
76965: LD_VAR 0 7
76969: NOT
76970: IFFALSE 76974
// continue ;
76972: GO 76939
// for j in list [ nat ] do
76974: LD_ADDR_VAR 0 5
76978: PUSH
76979: LD_VAR 0 10
76983: PUSH
76984: LD_VAR 0 7
76988: ARRAY
76989: PUSH
76990: FOR_IN
76991: IFFALSE 77032
// if GetBWeapon ( i ) = j [ 1 ] then
76993: LD_VAR 0 4
76997: PPUSH
76998: CALL_OW 269
77002: PUSH
77003: LD_VAR 0 5
77007: PUSH
77008: LD_INT 1
77010: ARRAY
77011: EQUAL
77012: IFFALSE 77030
// begin weapon := j [ 2 ] ;
77014: LD_ADDR_VAR 0 8
77018: PUSH
77019: LD_VAR 0 5
77023: PUSH
77024: LD_INT 2
77026: ARRAY
77027: ST_TO_ADDR
// break ;
77028: GO 77032
// end ;
77030: GO 76990
77032: POP
77033: POP
// if not weapon then
77034: LD_VAR 0 8
77038: NOT
77039: IFFALSE 77043
// continue ;
77041: GO 76939
// for k in factories do
77043: LD_ADDR_VAR 0 6
77047: PUSH
77048: LD_VAR 0 2
77052: PUSH
77053: FOR_IN
77054: IFFALSE 77119
// begin weapons := AvailableWeaponList ( k ) ;
77056: LD_ADDR_VAR 0 9
77060: PUSH
77061: LD_VAR 0 6
77065: PPUSH
77066: CALL_OW 478
77070: ST_TO_ADDR
// if not weapons then
77071: LD_VAR 0 9
77075: NOT
77076: IFFALSE 77080
// continue ;
77078: GO 77053
// if weapon in weapons then
77080: LD_VAR 0 8
77084: PUSH
77085: LD_VAR 0 9
77089: IN
77090: IFFALSE 77117
// begin result := [ i , weapon ] ;
77092: LD_ADDR_VAR 0 3
77096: PUSH
77097: LD_VAR 0 4
77101: PUSH
77102: LD_VAR 0 8
77106: PUSH
77107: EMPTY
77108: LIST
77109: LIST
77110: ST_TO_ADDR
// exit ;
77111: POP
77112: POP
77113: POP
77114: POP
77115: GO 77125
// end ; end ;
77117: GO 77053
77119: POP
77120: POP
// end ;
77121: GO 76939
77123: POP
77124: POP
// end ;
77125: LD_VAR 0 3
77129: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77130: LD_INT 0
77132: PPUSH
// if not side or side > 8 then
77133: LD_VAR 0 3
77137: NOT
77138: PUSH
77139: LD_VAR 0 3
77143: PUSH
77144: LD_INT 8
77146: GREATER
77147: OR
77148: IFFALSE 77152
// exit ;
77150: GO 77211
// if not range then
77152: LD_VAR 0 4
77156: NOT
77157: IFFALSE 77168
// range := - 12 ;
77159: LD_ADDR_VAR 0 4
77163: PUSH
77164: LD_INT 12
77166: NEG
77167: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77168: LD_VAR 0 1
77172: PPUSH
77173: LD_VAR 0 2
77177: PPUSH
77178: LD_VAR 0 3
77182: PPUSH
77183: LD_VAR 0 4
77187: PPUSH
77188: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77192: LD_VAR 0 1
77196: PPUSH
77197: LD_VAR 0 2
77201: PPUSH
77202: LD_VAR 0 3
77206: PPUSH
77207: CALL_OW 331
// end ;
77211: LD_VAR 0 5
77215: RET
// export function Video ( mode ) ; begin
77216: LD_INT 0
77218: PPUSH
// ingame_video = mode ;
77219: LD_ADDR_OWVAR 52
77223: PUSH
77224: LD_VAR 0 1
77228: ST_TO_ADDR
// interface_hidden = mode ;
77229: LD_ADDR_OWVAR 54
77233: PUSH
77234: LD_VAR 0 1
77238: ST_TO_ADDR
// end ;
77239: LD_VAR 0 2
77243: RET
// export function Join ( array , element ) ; begin
77244: LD_INT 0
77246: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77247: LD_ADDR_VAR 0 3
77251: PUSH
77252: LD_VAR 0 1
77256: PPUSH
77257: LD_VAR 0 1
77261: PUSH
77262: LD_INT 1
77264: PLUS
77265: PPUSH
77266: LD_VAR 0 2
77270: PPUSH
77271: CALL_OW 1
77275: ST_TO_ADDR
// end ;
77276: LD_VAR 0 3
77280: RET
// export function JoinUnion ( array , element ) ; begin
77281: LD_INT 0
77283: PPUSH
// result := array union element ;
77284: LD_ADDR_VAR 0 3
77288: PUSH
77289: LD_VAR 0 1
77293: PUSH
77294: LD_VAR 0 2
77298: UNION
77299: ST_TO_ADDR
// end ;
77300: LD_VAR 0 3
77304: RET
// export function GetBehemoths ( side ) ; begin
77305: LD_INT 0
77307: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77308: LD_ADDR_VAR 0 2
77312: PUSH
77313: LD_INT 22
77315: PUSH
77316: LD_VAR 0 1
77320: PUSH
77321: EMPTY
77322: LIST
77323: LIST
77324: PUSH
77325: LD_INT 31
77327: PUSH
77328: LD_INT 25
77330: PUSH
77331: EMPTY
77332: LIST
77333: LIST
77334: PUSH
77335: EMPTY
77336: LIST
77337: LIST
77338: PPUSH
77339: CALL_OW 69
77343: ST_TO_ADDR
// end ;
77344: LD_VAR 0 2
77348: RET
// export function Shuffle ( array ) ; var i , index ; begin
77349: LD_INT 0
77351: PPUSH
77352: PPUSH
77353: PPUSH
// result := [ ] ;
77354: LD_ADDR_VAR 0 2
77358: PUSH
77359: EMPTY
77360: ST_TO_ADDR
// if not array then
77361: LD_VAR 0 1
77365: NOT
77366: IFFALSE 77370
// exit ;
77368: GO 77469
// Randomize ;
77370: CALL_OW 10
// for i = array downto 1 do
77374: LD_ADDR_VAR 0 3
77378: PUSH
77379: DOUBLE
77380: LD_VAR 0 1
77384: INC
77385: ST_TO_ADDR
77386: LD_INT 1
77388: PUSH
77389: FOR_DOWNTO
77390: IFFALSE 77467
// begin index := rand ( 1 , array ) ;
77392: LD_ADDR_VAR 0 4
77396: PUSH
77397: LD_INT 1
77399: PPUSH
77400: LD_VAR 0 1
77404: PPUSH
77405: CALL_OW 12
77409: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77410: LD_ADDR_VAR 0 2
77414: PUSH
77415: LD_VAR 0 2
77419: PPUSH
77420: LD_VAR 0 2
77424: PUSH
77425: LD_INT 1
77427: PLUS
77428: PPUSH
77429: LD_VAR 0 1
77433: PUSH
77434: LD_VAR 0 4
77438: ARRAY
77439: PPUSH
77440: CALL_OW 2
77444: ST_TO_ADDR
// array := Delete ( array , index ) ;
77445: LD_ADDR_VAR 0 1
77449: PUSH
77450: LD_VAR 0 1
77454: PPUSH
77455: LD_VAR 0 4
77459: PPUSH
77460: CALL_OW 3
77464: ST_TO_ADDR
// end ;
77465: GO 77389
77467: POP
77468: POP
// end ;
77469: LD_VAR 0 2
77473: RET
// export function GetBaseMaterials ( base ) ; begin
77474: LD_INT 0
77476: PPUSH
// result := [ 0 , 0 , 0 ] ;
77477: LD_ADDR_VAR 0 2
77481: PUSH
77482: LD_INT 0
77484: PUSH
77485: LD_INT 0
77487: PUSH
77488: LD_INT 0
77490: PUSH
77491: EMPTY
77492: LIST
77493: LIST
77494: LIST
77495: ST_TO_ADDR
// if not base then
77496: LD_VAR 0 1
77500: NOT
77501: IFFALSE 77505
// exit ;
77503: GO 77554
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77505: LD_ADDR_VAR 0 2
77509: PUSH
77510: LD_VAR 0 1
77514: PPUSH
77515: LD_INT 1
77517: PPUSH
77518: CALL_OW 275
77522: PUSH
77523: LD_VAR 0 1
77527: PPUSH
77528: LD_INT 2
77530: PPUSH
77531: CALL_OW 275
77535: PUSH
77536: LD_VAR 0 1
77540: PPUSH
77541: LD_INT 3
77543: PPUSH
77544: CALL_OW 275
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: LIST
77553: ST_TO_ADDR
// end ;
77554: LD_VAR 0 2
77558: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77559: LD_INT 0
77561: PPUSH
77562: PPUSH
// result := array ;
77563: LD_ADDR_VAR 0 3
77567: PUSH
77568: LD_VAR 0 1
77572: ST_TO_ADDR
// if size >= result then
77573: LD_VAR 0 2
77577: PUSH
77578: LD_VAR 0 3
77582: GREATEREQUAL
77583: IFFALSE 77587
// exit ;
77585: GO 77637
// if size then
77587: LD_VAR 0 2
77591: IFFALSE 77637
// for i := array downto size do
77593: LD_ADDR_VAR 0 4
77597: PUSH
77598: DOUBLE
77599: LD_VAR 0 1
77603: INC
77604: ST_TO_ADDR
77605: LD_VAR 0 2
77609: PUSH
77610: FOR_DOWNTO
77611: IFFALSE 77635
// result := Delete ( result , result ) ;
77613: LD_ADDR_VAR 0 3
77617: PUSH
77618: LD_VAR 0 3
77622: PPUSH
77623: LD_VAR 0 3
77627: PPUSH
77628: CALL_OW 3
77632: ST_TO_ADDR
77633: GO 77610
77635: POP
77636: POP
// end ;
77637: LD_VAR 0 3
77641: RET
// export function ComExit ( unit ) ; var tmp ; begin
77642: LD_INT 0
77644: PPUSH
77645: PPUSH
// if not IsInUnit ( unit ) then
77646: LD_VAR 0 1
77650: PPUSH
77651: CALL_OW 310
77655: NOT
77656: IFFALSE 77660
// exit ;
77658: GO 77720
// tmp := IsInUnit ( unit ) ;
77660: LD_ADDR_VAR 0 3
77664: PUSH
77665: LD_VAR 0 1
77669: PPUSH
77670: CALL_OW 310
77674: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77675: LD_VAR 0 3
77679: PPUSH
77680: CALL_OW 247
77684: PUSH
77685: LD_INT 2
77687: EQUAL
77688: IFFALSE 77701
// ComExitVehicle ( unit ) else
77690: LD_VAR 0 1
77694: PPUSH
77695: CALL_OW 121
77699: GO 77710
// ComExitBuilding ( unit ) ;
77701: LD_VAR 0 1
77705: PPUSH
77706: CALL_OW 122
// result := tmp ;
77710: LD_ADDR_VAR 0 2
77714: PUSH
77715: LD_VAR 0 3
77719: ST_TO_ADDR
// end ;
77720: LD_VAR 0 2
77724: RET
// export function ComExitAll ( units ) ; var i ; begin
77725: LD_INT 0
77727: PPUSH
77728: PPUSH
// if not units then
77729: LD_VAR 0 1
77733: NOT
77734: IFFALSE 77738
// exit ;
77736: GO 77764
// for i in units do
77738: LD_ADDR_VAR 0 3
77742: PUSH
77743: LD_VAR 0 1
77747: PUSH
77748: FOR_IN
77749: IFFALSE 77762
// ComExit ( i ) ;
77751: LD_VAR 0 3
77755: PPUSH
77756: CALL 77642 0 1
77760: GO 77748
77762: POP
77763: POP
// end ;
77764: LD_VAR 0 2
77768: RET
// export function ResetHc ; begin
77769: LD_INT 0
77771: PPUSH
// InitHc ;
77772: CALL_OW 19
// hc_importance := 0 ;
77776: LD_ADDR_OWVAR 32
77780: PUSH
77781: LD_INT 0
77783: ST_TO_ADDR
// end ;
77784: LD_VAR 0 1
77788: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77789: LD_INT 0
77791: PPUSH
77792: PPUSH
77793: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77794: LD_ADDR_VAR 0 6
77798: PUSH
77799: LD_VAR 0 1
77803: PUSH
77804: LD_VAR 0 3
77808: PLUS
77809: PUSH
77810: LD_INT 2
77812: DIV
77813: ST_TO_ADDR
// if _x < 0 then
77814: LD_VAR 0 6
77818: PUSH
77819: LD_INT 0
77821: LESS
77822: IFFALSE 77839
// _x := _x * - 1 ;
77824: LD_ADDR_VAR 0 6
77828: PUSH
77829: LD_VAR 0 6
77833: PUSH
77834: LD_INT 1
77836: NEG
77837: MUL
77838: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77839: LD_ADDR_VAR 0 7
77843: PUSH
77844: LD_VAR 0 2
77848: PUSH
77849: LD_VAR 0 4
77853: PLUS
77854: PUSH
77855: LD_INT 2
77857: DIV
77858: ST_TO_ADDR
// if _y < 0 then
77859: LD_VAR 0 7
77863: PUSH
77864: LD_INT 0
77866: LESS
77867: IFFALSE 77884
// _y := _y * - 1 ;
77869: LD_ADDR_VAR 0 7
77873: PUSH
77874: LD_VAR 0 7
77878: PUSH
77879: LD_INT 1
77881: NEG
77882: MUL
77883: ST_TO_ADDR
// result := [ _x , _y ] ;
77884: LD_ADDR_VAR 0 5
77888: PUSH
77889: LD_VAR 0 6
77893: PUSH
77894: LD_VAR 0 7
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: ST_TO_ADDR
// end ;
77903: LD_VAR 0 5
77907: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77908: LD_INT 0
77910: PPUSH
77911: PPUSH
77912: PPUSH
77913: PPUSH
// task := GetTaskList ( unit ) ;
77914: LD_ADDR_VAR 0 7
77918: PUSH
77919: LD_VAR 0 1
77923: PPUSH
77924: CALL_OW 437
77928: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77929: LD_VAR 0 7
77933: NOT
77934: PUSH
77935: LD_VAR 0 1
77939: PPUSH
77940: LD_VAR 0 2
77944: PPUSH
77945: CALL_OW 308
77949: NOT
77950: AND
77951: IFFALSE 77955
// exit ;
77953: GO 78073
// if IsInArea ( unit , area ) then
77955: LD_VAR 0 1
77959: PPUSH
77960: LD_VAR 0 2
77964: PPUSH
77965: CALL_OW 308
77969: IFFALSE 77987
// begin ComMoveToArea ( unit , goAway ) ;
77971: LD_VAR 0 1
77975: PPUSH
77976: LD_VAR 0 3
77980: PPUSH
77981: CALL_OW 113
// exit ;
77985: GO 78073
// end ; if task [ 1 ] [ 1 ] <> M then
77987: LD_VAR 0 7
77991: PUSH
77992: LD_INT 1
77994: ARRAY
77995: PUSH
77996: LD_INT 1
77998: ARRAY
77999: PUSH
78000: LD_STRING M
78002: NONEQUAL
78003: IFFALSE 78007
// exit ;
78005: GO 78073
// x := task [ 1 ] [ 2 ] ;
78007: LD_ADDR_VAR 0 5
78011: PUSH
78012: LD_VAR 0 7
78016: PUSH
78017: LD_INT 1
78019: ARRAY
78020: PUSH
78021: LD_INT 2
78023: ARRAY
78024: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78025: LD_ADDR_VAR 0 6
78029: PUSH
78030: LD_VAR 0 7
78034: PUSH
78035: LD_INT 1
78037: ARRAY
78038: PUSH
78039: LD_INT 3
78041: ARRAY
78042: ST_TO_ADDR
// if InArea ( x , y , area ) then
78043: LD_VAR 0 5
78047: PPUSH
78048: LD_VAR 0 6
78052: PPUSH
78053: LD_VAR 0 2
78057: PPUSH
78058: CALL_OW 309
78062: IFFALSE 78073
// ComStop ( unit ) ;
78064: LD_VAR 0 1
78068: PPUSH
78069: CALL_OW 141
// end ;
78073: LD_VAR 0 4
78077: RET
// export function Abs ( value ) ; begin
78078: LD_INT 0
78080: PPUSH
// result := value ;
78081: LD_ADDR_VAR 0 2
78085: PUSH
78086: LD_VAR 0 1
78090: ST_TO_ADDR
// if value < 0 then
78091: LD_VAR 0 1
78095: PUSH
78096: LD_INT 0
78098: LESS
78099: IFFALSE 78116
// result := value * - 1 ;
78101: LD_ADDR_VAR 0 2
78105: PUSH
78106: LD_VAR 0 1
78110: PUSH
78111: LD_INT 1
78113: NEG
78114: MUL
78115: ST_TO_ADDR
// end ;
78116: LD_VAR 0 2
78120: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78121: LD_INT 0
78123: PPUSH
78124: PPUSH
78125: PPUSH
78126: PPUSH
78127: PPUSH
78128: PPUSH
78129: PPUSH
78130: PPUSH
// if not unit or not building then
78131: LD_VAR 0 1
78135: NOT
78136: PUSH
78137: LD_VAR 0 2
78141: NOT
78142: OR
78143: IFFALSE 78147
// exit ;
78145: GO 78373
// x := GetX ( building ) ;
78147: LD_ADDR_VAR 0 4
78151: PUSH
78152: LD_VAR 0 2
78156: PPUSH
78157: CALL_OW 250
78161: ST_TO_ADDR
// y := GetY ( building ) ;
78162: LD_ADDR_VAR 0 6
78166: PUSH
78167: LD_VAR 0 2
78171: PPUSH
78172: CALL_OW 251
78176: ST_TO_ADDR
// d := GetDir ( building ) ;
78177: LD_ADDR_VAR 0 8
78181: PUSH
78182: LD_VAR 0 2
78186: PPUSH
78187: CALL_OW 254
78191: ST_TO_ADDR
// r := 4 ;
78192: LD_ADDR_VAR 0 9
78196: PUSH
78197: LD_INT 4
78199: ST_TO_ADDR
// for i := 1 to 5 do
78200: LD_ADDR_VAR 0 10
78204: PUSH
78205: DOUBLE
78206: LD_INT 1
78208: DEC
78209: ST_TO_ADDR
78210: LD_INT 5
78212: PUSH
78213: FOR_TO
78214: IFFALSE 78371
// begin _x := ShiftX ( x , d , r + i ) ;
78216: LD_ADDR_VAR 0 5
78220: PUSH
78221: LD_VAR 0 4
78225: PPUSH
78226: LD_VAR 0 8
78230: PPUSH
78231: LD_VAR 0 9
78235: PUSH
78236: LD_VAR 0 10
78240: PLUS
78241: PPUSH
78242: CALL_OW 272
78246: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78247: LD_ADDR_VAR 0 7
78251: PUSH
78252: LD_VAR 0 6
78256: PPUSH
78257: LD_VAR 0 8
78261: PPUSH
78262: LD_VAR 0 9
78266: PUSH
78267: LD_VAR 0 10
78271: PLUS
78272: PPUSH
78273: CALL_OW 273
78277: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78278: LD_VAR 0 5
78282: PPUSH
78283: LD_VAR 0 7
78287: PPUSH
78288: CALL_OW 488
78292: PUSH
78293: LD_VAR 0 5
78297: PPUSH
78298: LD_VAR 0 7
78302: PPUSH
78303: CALL_OW 428
78307: PPUSH
78308: CALL_OW 247
78312: PUSH
78313: LD_INT 3
78315: PUSH
78316: LD_INT 2
78318: PUSH
78319: EMPTY
78320: LIST
78321: LIST
78322: IN
78323: NOT
78324: AND
78325: IFFALSE 78369
// begin ComMoveXY ( unit , _x , _y ) ;
78327: LD_VAR 0 1
78331: PPUSH
78332: LD_VAR 0 5
78336: PPUSH
78337: LD_VAR 0 7
78341: PPUSH
78342: CALL_OW 111
// result := [ _x , _y ] ;
78346: LD_ADDR_VAR 0 3
78350: PUSH
78351: LD_VAR 0 5
78355: PUSH
78356: LD_VAR 0 7
78360: PUSH
78361: EMPTY
78362: LIST
78363: LIST
78364: ST_TO_ADDR
// exit ;
78365: POP
78366: POP
78367: GO 78373
// end ; end ;
78369: GO 78213
78371: POP
78372: POP
// end ;
78373: LD_VAR 0 3
78377: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78378: LD_INT 0
78380: PPUSH
78381: PPUSH
78382: PPUSH
// result := 0 ;
78383: LD_ADDR_VAR 0 3
78387: PUSH
78388: LD_INT 0
78390: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78391: LD_VAR 0 1
78395: PUSH
78396: LD_INT 0
78398: LESS
78399: PUSH
78400: LD_VAR 0 1
78404: PUSH
78405: LD_INT 8
78407: GREATER
78408: OR
78409: PUSH
78410: LD_VAR 0 2
78414: PUSH
78415: LD_INT 0
78417: LESS
78418: OR
78419: PUSH
78420: LD_VAR 0 2
78424: PUSH
78425: LD_INT 8
78427: GREATER
78428: OR
78429: IFFALSE 78433
// exit ;
78431: GO 78508
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78433: LD_ADDR_VAR 0 4
78437: PUSH
78438: LD_INT 22
78440: PUSH
78441: LD_VAR 0 2
78445: PUSH
78446: EMPTY
78447: LIST
78448: LIST
78449: PPUSH
78450: CALL_OW 69
78454: PUSH
78455: FOR_IN
78456: IFFALSE 78506
// begin un := UnitShoot ( i ) ;
78458: LD_ADDR_VAR 0 5
78462: PUSH
78463: LD_VAR 0 4
78467: PPUSH
78468: CALL_OW 504
78472: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78473: LD_VAR 0 5
78477: PPUSH
78478: CALL_OW 255
78482: PUSH
78483: LD_VAR 0 1
78487: EQUAL
78488: IFFALSE 78504
// begin result := un ;
78490: LD_ADDR_VAR 0 3
78494: PUSH
78495: LD_VAR 0 5
78499: ST_TO_ADDR
// exit ;
78500: POP
78501: POP
78502: GO 78508
// end ; end ;
78504: GO 78455
78506: POP
78507: POP
// end ;
78508: LD_VAR 0 3
78512: RET
// export function GetCargoBay ( units ) ; begin
78513: LD_INT 0
78515: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78516: LD_ADDR_VAR 0 2
78520: PUSH
78521: LD_VAR 0 1
78525: PPUSH
78526: LD_INT 2
78528: PUSH
78529: LD_INT 34
78531: PUSH
78532: LD_INT 12
78534: PUSH
78535: EMPTY
78536: LIST
78537: LIST
78538: PUSH
78539: LD_INT 34
78541: PUSH
78542: LD_INT 51
78544: PUSH
78545: EMPTY
78546: LIST
78547: LIST
78548: PUSH
78549: LD_INT 34
78551: PUSH
78552: LD_INT 32
78554: PUSH
78555: EMPTY
78556: LIST
78557: LIST
78558: PUSH
78559: LD_INT 34
78561: PUSH
78562: LD_INT 89
78564: PUSH
78565: EMPTY
78566: LIST
78567: LIST
78568: PUSH
78569: EMPTY
78570: LIST
78571: LIST
78572: LIST
78573: LIST
78574: LIST
78575: PPUSH
78576: CALL_OW 72
78580: ST_TO_ADDR
// end ;
78581: LD_VAR 0 2
78585: RET
// export function Negate ( value ) ; begin
78586: LD_INT 0
78588: PPUSH
// result := not value ;
78589: LD_ADDR_VAR 0 2
78593: PUSH
78594: LD_VAR 0 1
78598: NOT
78599: ST_TO_ADDR
// end ;
78600: LD_VAR 0 2
78604: RET
// export function Inc ( value ) ; begin
78605: LD_INT 0
78607: PPUSH
// result := value + 1 ;
78608: LD_ADDR_VAR 0 2
78612: PUSH
78613: LD_VAR 0 1
78617: PUSH
78618: LD_INT 1
78620: PLUS
78621: ST_TO_ADDR
// end ;
78622: LD_VAR 0 2
78626: RET
// export function Dec ( value ) ; begin
78627: LD_INT 0
78629: PPUSH
// result := value - 1 ;
78630: LD_ADDR_VAR 0 2
78634: PUSH
78635: LD_VAR 0 1
78639: PUSH
78640: LD_INT 1
78642: MINUS
78643: ST_TO_ADDR
// end ;
78644: LD_VAR 0 2
78648: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78649: LD_INT 0
78651: PPUSH
78652: PPUSH
78653: PPUSH
78654: PPUSH
78655: PPUSH
78656: PPUSH
78657: PPUSH
78658: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78659: LD_VAR 0 1
78663: PPUSH
78664: LD_VAR 0 2
78668: PPUSH
78669: CALL_OW 488
78673: NOT
78674: PUSH
78675: LD_VAR 0 3
78679: PPUSH
78680: LD_VAR 0 4
78684: PPUSH
78685: CALL_OW 488
78689: NOT
78690: OR
78691: IFFALSE 78704
// begin result := - 1 ;
78693: LD_ADDR_VAR 0 5
78697: PUSH
78698: LD_INT 1
78700: NEG
78701: ST_TO_ADDR
// exit ;
78702: GO 78939
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78704: LD_ADDR_VAR 0 12
78708: PUSH
78709: LD_VAR 0 1
78713: PPUSH
78714: LD_VAR 0 2
78718: PPUSH
78719: LD_VAR 0 3
78723: PPUSH
78724: LD_VAR 0 4
78728: PPUSH
78729: CALL 77789 0 4
78733: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78734: LD_ADDR_VAR 0 11
78738: PUSH
78739: LD_VAR 0 1
78743: PPUSH
78744: LD_VAR 0 2
78748: PPUSH
78749: LD_VAR 0 12
78753: PUSH
78754: LD_INT 1
78756: ARRAY
78757: PPUSH
78758: LD_VAR 0 12
78762: PUSH
78763: LD_INT 2
78765: ARRAY
78766: PPUSH
78767: CALL_OW 298
78771: ST_TO_ADDR
// distance := 9999 ;
78772: LD_ADDR_VAR 0 10
78776: PUSH
78777: LD_INT 9999
78779: ST_TO_ADDR
// for i := 0 to 5 do
78780: LD_ADDR_VAR 0 6
78784: PUSH
78785: DOUBLE
78786: LD_INT 0
78788: DEC
78789: ST_TO_ADDR
78790: LD_INT 5
78792: PUSH
78793: FOR_TO
78794: IFFALSE 78937
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78796: LD_ADDR_VAR 0 7
78800: PUSH
78801: LD_VAR 0 1
78805: PPUSH
78806: LD_VAR 0 6
78810: PPUSH
78811: LD_VAR 0 11
78815: PPUSH
78816: CALL_OW 272
78820: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78821: LD_ADDR_VAR 0 8
78825: PUSH
78826: LD_VAR 0 2
78830: PPUSH
78831: LD_VAR 0 6
78835: PPUSH
78836: LD_VAR 0 11
78840: PPUSH
78841: CALL_OW 273
78845: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78846: LD_VAR 0 7
78850: PPUSH
78851: LD_VAR 0 8
78855: PPUSH
78856: CALL_OW 488
78860: NOT
78861: IFFALSE 78865
// continue ;
78863: GO 78793
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78865: LD_ADDR_VAR 0 9
78869: PUSH
78870: LD_VAR 0 12
78874: PUSH
78875: LD_INT 1
78877: ARRAY
78878: PPUSH
78879: LD_VAR 0 12
78883: PUSH
78884: LD_INT 2
78886: ARRAY
78887: PPUSH
78888: LD_VAR 0 7
78892: PPUSH
78893: LD_VAR 0 8
78897: PPUSH
78898: CALL_OW 298
78902: ST_TO_ADDR
// if tmp < distance then
78903: LD_VAR 0 9
78907: PUSH
78908: LD_VAR 0 10
78912: LESS
78913: IFFALSE 78935
// begin result := i ;
78915: LD_ADDR_VAR 0 5
78919: PUSH
78920: LD_VAR 0 6
78924: ST_TO_ADDR
// distance := tmp ;
78925: LD_ADDR_VAR 0 10
78929: PUSH
78930: LD_VAR 0 9
78934: ST_TO_ADDR
// end ; end ;
78935: GO 78793
78937: POP
78938: POP
// end ;
78939: LD_VAR 0 5
78943: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78944: LD_INT 0
78946: PPUSH
78947: PPUSH
// if not driver or not IsInUnit ( driver ) then
78948: LD_VAR 0 1
78952: NOT
78953: PUSH
78954: LD_VAR 0 1
78958: PPUSH
78959: CALL_OW 310
78963: NOT
78964: OR
78965: IFFALSE 78969
// exit ;
78967: GO 79059
// vehicle := IsInUnit ( driver ) ;
78969: LD_ADDR_VAR 0 3
78973: PUSH
78974: LD_VAR 0 1
78978: PPUSH
78979: CALL_OW 310
78983: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78984: LD_VAR 0 1
78988: PPUSH
78989: LD_STRING \
78991: PUSH
78992: LD_INT 0
78994: PUSH
78995: LD_INT 0
78997: PUSH
78998: LD_INT 0
79000: PUSH
79001: LD_INT 0
79003: PUSH
79004: LD_INT 0
79006: PUSH
79007: LD_INT 0
79009: PUSH
79010: EMPTY
79011: LIST
79012: LIST
79013: LIST
79014: LIST
79015: LIST
79016: LIST
79017: LIST
79018: PUSH
79019: LD_STRING E
79021: PUSH
79022: LD_INT 0
79024: PUSH
79025: LD_INT 0
79027: PUSH
79028: LD_VAR 0 3
79032: PUSH
79033: LD_INT 0
79035: PUSH
79036: LD_INT 0
79038: PUSH
79039: LD_INT 0
79041: PUSH
79042: EMPTY
79043: LIST
79044: LIST
79045: LIST
79046: LIST
79047: LIST
79048: LIST
79049: LIST
79050: PUSH
79051: EMPTY
79052: LIST
79053: LIST
79054: PPUSH
79055: CALL_OW 446
// end ;
79059: LD_VAR 0 2
79063: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79064: LD_INT 0
79066: PPUSH
79067: PPUSH
// if not driver or not IsInUnit ( driver ) then
79068: LD_VAR 0 1
79072: NOT
79073: PUSH
79074: LD_VAR 0 1
79078: PPUSH
79079: CALL_OW 310
79083: NOT
79084: OR
79085: IFFALSE 79089
// exit ;
79087: GO 79179
// vehicle := IsInUnit ( driver ) ;
79089: LD_ADDR_VAR 0 3
79093: PUSH
79094: LD_VAR 0 1
79098: PPUSH
79099: CALL_OW 310
79103: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79104: LD_VAR 0 1
79108: PPUSH
79109: LD_STRING \
79111: PUSH
79112: LD_INT 0
79114: PUSH
79115: LD_INT 0
79117: PUSH
79118: LD_INT 0
79120: PUSH
79121: LD_INT 0
79123: PUSH
79124: LD_INT 0
79126: PUSH
79127: LD_INT 0
79129: PUSH
79130: EMPTY
79131: LIST
79132: LIST
79133: LIST
79134: LIST
79135: LIST
79136: LIST
79137: LIST
79138: PUSH
79139: LD_STRING E
79141: PUSH
79142: LD_INT 0
79144: PUSH
79145: LD_INT 0
79147: PUSH
79148: LD_VAR 0 3
79152: PUSH
79153: LD_INT 0
79155: PUSH
79156: LD_INT 0
79158: PUSH
79159: LD_INT 0
79161: PUSH
79162: EMPTY
79163: LIST
79164: LIST
79165: LIST
79166: LIST
79167: LIST
79168: LIST
79169: LIST
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: PPUSH
79175: CALL_OW 447
// end ;
79179: LD_VAR 0 2
79183: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79184: LD_INT 0
79186: PPUSH
79187: PPUSH
79188: PPUSH
// tmp := [ ] ;
79189: LD_ADDR_VAR 0 5
79193: PUSH
79194: EMPTY
79195: ST_TO_ADDR
// for i in units do
79196: LD_ADDR_VAR 0 4
79200: PUSH
79201: LD_VAR 0 1
79205: PUSH
79206: FOR_IN
79207: IFFALSE 79245
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79209: LD_ADDR_VAR 0 5
79213: PUSH
79214: LD_VAR 0 5
79218: PPUSH
79219: LD_VAR 0 5
79223: PUSH
79224: LD_INT 1
79226: PLUS
79227: PPUSH
79228: LD_VAR 0 4
79232: PPUSH
79233: CALL_OW 256
79237: PPUSH
79238: CALL_OW 2
79242: ST_TO_ADDR
79243: GO 79206
79245: POP
79246: POP
// if not tmp then
79247: LD_VAR 0 5
79251: NOT
79252: IFFALSE 79256
// exit ;
79254: GO 79304
// if asc then
79256: LD_VAR 0 2
79260: IFFALSE 79284
// result := SortListByListAsc ( units , tmp ) else
79262: LD_ADDR_VAR 0 3
79266: PUSH
79267: LD_VAR 0 1
79271: PPUSH
79272: LD_VAR 0 5
79276: PPUSH
79277: CALL_OW 76
79281: ST_TO_ADDR
79282: GO 79304
// result := SortListByListDesc ( units , tmp ) ;
79284: LD_ADDR_VAR 0 3
79288: PUSH
79289: LD_VAR 0 1
79293: PPUSH
79294: LD_VAR 0 5
79298: PPUSH
79299: CALL_OW 77
79303: ST_TO_ADDR
// end ;
79304: LD_VAR 0 3
79308: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79309: LD_INT 0
79311: PPUSH
79312: PPUSH
// task := GetTaskList ( mech ) ;
79313: LD_ADDR_VAR 0 4
79317: PUSH
79318: LD_VAR 0 1
79322: PPUSH
79323: CALL_OW 437
79327: ST_TO_ADDR
// if not task then
79328: LD_VAR 0 4
79332: NOT
79333: IFFALSE 79337
// exit ;
79335: GO 79379
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79337: LD_ADDR_VAR 0 3
79341: PUSH
79342: LD_VAR 0 4
79346: PUSH
79347: LD_INT 1
79349: ARRAY
79350: PUSH
79351: LD_INT 1
79353: ARRAY
79354: PUSH
79355: LD_STRING r
79357: EQUAL
79358: PUSH
79359: LD_VAR 0 4
79363: PUSH
79364: LD_INT 1
79366: ARRAY
79367: PUSH
79368: LD_INT 4
79370: ARRAY
79371: PUSH
79372: LD_VAR 0 2
79376: EQUAL
79377: AND
79378: ST_TO_ADDR
// end ;
79379: LD_VAR 0 3
79383: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79384: LD_INT 0
79386: PPUSH
// SetDir ( unit , d ) ;
79387: LD_VAR 0 1
79391: PPUSH
79392: LD_VAR 0 4
79396: PPUSH
79397: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79401: LD_VAR 0 1
79405: PPUSH
79406: LD_VAR 0 2
79410: PPUSH
79411: LD_VAR 0 3
79415: PPUSH
79416: LD_VAR 0 5
79420: PPUSH
79421: CALL_OW 48
// end ;
79425: LD_VAR 0 6
79429: RET
// export function ToNaturalNumber ( number ) ; begin
79430: LD_INT 0
79432: PPUSH
// result := number div 1 ;
79433: LD_ADDR_VAR 0 2
79437: PUSH
79438: LD_VAR 0 1
79442: PUSH
79443: LD_INT 1
79445: DIV
79446: ST_TO_ADDR
// if number < 0 then
79447: LD_VAR 0 1
79451: PUSH
79452: LD_INT 0
79454: LESS
79455: IFFALSE 79465
// result := 0 ;
79457: LD_ADDR_VAR 0 2
79461: PUSH
79462: LD_INT 0
79464: ST_TO_ADDR
// end ;
79465: LD_VAR 0 2
79469: RET
// export function SortByClass ( units , class ) ; var un ; begin
79470: LD_INT 0
79472: PPUSH
79473: PPUSH
// if not units or not class then
79474: LD_VAR 0 1
79478: NOT
79479: PUSH
79480: LD_VAR 0 2
79484: NOT
79485: OR
79486: IFFALSE 79490
// exit ;
79488: GO 79585
// result := [ ] ;
79490: LD_ADDR_VAR 0 3
79494: PUSH
79495: EMPTY
79496: ST_TO_ADDR
// for un in units do
79497: LD_ADDR_VAR 0 4
79501: PUSH
79502: LD_VAR 0 1
79506: PUSH
79507: FOR_IN
79508: IFFALSE 79583
// if GetClass ( un ) = class then
79510: LD_VAR 0 4
79514: PPUSH
79515: CALL_OW 257
79519: PUSH
79520: LD_VAR 0 2
79524: EQUAL
79525: IFFALSE 79552
// result := Insert ( result , 1 , un ) else
79527: LD_ADDR_VAR 0 3
79531: PUSH
79532: LD_VAR 0 3
79536: PPUSH
79537: LD_INT 1
79539: PPUSH
79540: LD_VAR 0 4
79544: PPUSH
79545: CALL_OW 2
79549: ST_TO_ADDR
79550: GO 79581
// result := Replace ( result , result + 1 , un ) ;
79552: LD_ADDR_VAR 0 3
79556: PUSH
79557: LD_VAR 0 3
79561: PPUSH
79562: LD_VAR 0 3
79566: PUSH
79567: LD_INT 1
79569: PLUS
79570: PPUSH
79571: LD_VAR 0 4
79575: PPUSH
79576: CALL_OW 1
79580: ST_TO_ADDR
79581: GO 79507
79583: POP
79584: POP
// end ;
79585: LD_VAR 0 3
79589: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79590: LD_INT 0
79592: PPUSH
79593: PPUSH
79594: PPUSH
79595: PPUSH
79596: PPUSH
79597: PPUSH
79598: PPUSH
// result := [ ] ;
79599: LD_ADDR_VAR 0 4
79603: PUSH
79604: EMPTY
79605: ST_TO_ADDR
// if x - r < 0 then
79606: LD_VAR 0 1
79610: PUSH
79611: LD_VAR 0 3
79615: MINUS
79616: PUSH
79617: LD_INT 0
79619: LESS
79620: IFFALSE 79632
// min_x := 0 else
79622: LD_ADDR_VAR 0 8
79626: PUSH
79627: LD_INT 0
79629: ST_TO_ADDR
79630: GO 79648
// min_x := x - r ;
79632: LD_ADDR_VAR 0 8
79636: PUSH
79637: LD_VAR 0 1
79641: PUSH
79642: LD_VAR 0 3
79646: MINUS
79647: ST_TO_ADDR
// if y - r < 0 then
79648: LD_VAR 0 2
79652: PUSH
79653: LD_VAR 0 3
79657: MINUS
79658: PUSH
79659: LD_INT 0
79661: LESS
79662: IFFALSE 79674
// min_y := 0 else
79664: LD_ADDR_VAR 0 7
79668: PUSH
79669: LD_INT 0
79671: ST_TO_ADDR
79672: GO 79690
// min_y := y - r ;
79674: LD_ADDR_VAR 0 7
79678: PUSH
79679: LD_VAR 0 2
79683: PUSH
79684: LD_VAR 0 3
79688: MINUS
79689: ST_TO_ADDR
// max_x := x + r ;
79690: LD_ADDR_VAR 0 9
79694: PUSH
79695: LD_VAR 0 1
79699: PUSH
79700: LD_VAR 0 3
79704: PLUS
79705: ST_TO_ADDR
// max_y := y + r ;
79706: LD_ADDR_VAR 0 10
79710: PUSH
79711: LD_VAR 0 2
79715: PUSH
79716: LD_VAR 0 3
79720: PLUS
79721: ST_TO_ADDR
// for _x = min_x to max_x do
79722: LD_ADDR_VAR 0 5
79726: PUSH
79727: DOUBLE
79728: LD_VAR 0 8
79732: DEC
79733: ST_TO_ADDR
79734: LD_VAR 0 9
79738: PUSH
79739: FOR_TO
79740: IFFALSE 79841
// for _y = min_y to max_y do
79742: LD_ADDR_VAR 0 6
79746: PUSH
79747: DOUBLE
79748: LD_VAR 0 7
79752: DEC
79753: ST_TO_ADDR
79754: LD_VAR 0 10
79758: PUSH
79759: FOR_TO
79760: IFFALSE 79837
// begin if not ValidHex ( _x , _y ) then
79762: LD_VAR 0 5
79766: PPUSH
79767: LD_VAR 0 6
79771: PPUSH
79772: CALL_OW 488
79776: NOT
79777: IFFALSE 79781
// continue ;
79779: GO 79759
// if GetResourceTypeXY ( _x , _y ) then
79781: LD_VAR 0 5
79785: PPUSH
79786: LD_VAR 0 6
79790: PPUSH
79791: CALL_OW 283
79795: IFFALSE 79835
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79797: LD_ADDR_VAR 0 4
79801: PUSH
79802: LD_VAR 0 4
79806: PPUSH
79807: LD_VAR 0 4
79811: PUSH
79812: LD_INT 1
79814: PLUS
79815: PPUSH
79816: LD_VAR 0 5
79820: PUSH
79821: LD_VAR 0 6
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: PPUSH
79830: CALL_OW 1
79834: ST_TO_ADDR
// end ;
79835: GO 79759
79837: POP
79838: POP
79839: GO 79739
79841: POP
79842: POP
// end ;
79843: LD_VAR 0 4
79847: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79848: LD_INT 0
79850: PPUSH
79851: PPUSH
79852: PPUSH
79853: PPUSH
79854: PPUSH
79855: PPUSH
79856: PPUSH
79857: PPUSH
// if not units then
79858: LD_VAR 0 1
79862: NOT
79863: IFFALSE 79867
// exit ;
79865: GO 80391
// result := UnitFilter ( units , [ f_ok ] ) ;
79867: LD_ADDR_VAR 0 3
79871: PUSH
79872: LD_VAR 0 1
79876: PPUSH
79877: LD_INT 50
79879: PUSH
79880: EMPTY
79881: LIST
79882: PPUSH
79883: CALL_OW 72
79887: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79888: LD_ADDR_VAR 0 8
79892: PUSH
79893: LD_VAR 0 1
79897: PUSH
79898: LD_INT 1
79900: ARRAY
79901: PPUSH
79902: CALL_OW 255
79906: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79907: LD_ADDR_VAR 0 10
79911: PUSH
79912: LD_INT 29
79914: PUSH
79915: LD_INT 91
79917: PUSH
79918: LD_INT 49
79920: PUSH
79921: EMPTY
79922: LIST
79923: LIST
79924: LIST
79925: ST_TO_ADDR
// if not result then
79926: LD_VAR 0 3
79930: NOT
79931: IFFALSE 79935
// exit ;
79933: GO 80391
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79935: LD_ADDR_VAR 0 5
79939: PUSH
79940: LD_INT 81
79942: PUSH
79943: LD_VAR 0 8
79947: PUSH
79948: EMPTY
79949: LIST
79950: LIST
79951: PPUSH
79952: CALL_OW 69
79956: ST_TO_ADDR
// for i in result do
79957: LD_ADDR_VAR 0 4
79961: PUSH
79962: LD_VAR 0 3
79966: PUSH
79967: FOR_IN
79968: IFFALSE 80389
// begin tag := GetTag ( i ) + 1 ;
79970: LD_ADDR_VAR 0 9
79974: PUSH
79975: LD_VAR 0 4
79979: PPUSH
79980: CALL_OW 110
79984: PUSH
79985: LD_INT 1
79987: PLUS
79988: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79989: LD_ADDR_VAR 0 7
79993: PUSH
79994: LD_VAR 0 4
79998: PPUSH
79999: CALL_OW 250
80003: PPUSH
80004: LD_VAR 0 4
80008: PPUSH
80009: CALL_OW 251
80013: PPUSH
80014: LD_INT 6
80016: PPUSH
80017: CALL 79590 0 3
80021: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80022: LD_VAR 0 4
80026: PPUSH
80027: CALL_OW 247
80031: PUSH
80032: LD_INT 2
80034: EQUAL
80035: PUSH
80036: LD_VAR 0 7
80040: AND
80041: PUSH
80042: LD_VAR 0 4
80046: PPUSH
80047: CALL_OW 264
80051: PUSH
80052: LD_VAR 0 10
80056: IN
80057: NOT
80058: AND
80059: IFFALSE 80098
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80061: LD_VAR 0 4
80065: PPUSH
80066: LD_VAR 0 7
80070: PUSH
80071: LD_INT 1
80073: ARRAY
80074: PUSH
80075: LD_INT 1
80077: ARRAY
80078: PPUSH
80079: LD_VAR 0 7
80083: PUSH
80084: LD_INT 1
80086: ARRAY
80087: PUSH
80088: LD_INT 2
80090: ARRAY
80091: PPUSH
80092: CALL_OW 116
80096: GO 80387
// if path > tag then
80098: LD_VAR 0 2
80102: PUSH
80103: LD_VAR 0 9
80107: GREATER
80108: IFFALSE 80316
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80110: LD_ADDR_VAR 0 6
80114: PUSH
80115: LD_VAR 0 5
80119: PPUSH
80120: LD_INT 91
80122: PUSH
80123: LD_VAR 0 4
80127: PUSH
80128: LD_INT 8
80130: PUSH
80131: EMPTY
80132: LIST
80133: LIST
80134: LIST
80135: PPUSH
80136: CALL_OW 72
80140: ST_TO_ADDR
// if nearEnemy then
80141: LD_VAR 0 6
80145: IFFALSE 80214
// begin if GetWeapon ( i ) = ru_time_lapser then
80147: LD_VAR 0 4
80151: PPUSH
80152: CALL_OW 264
80156: PUSH
80157: LD_INT 49
80159: EQUAL
80160: IFFALSE 80188
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80162: LD_VAR 0 4
80166: PPUSH
80167: LD_VAR 0 6
80171: PPUSH
80172: LD_VAR 0 4
80176: PPUSH
80177: CALL_OW 74
80181: PPUSH
80182: CALL_OW 112
80186: GO 80212
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80188: LD_VAR 0 4
80192: PPUSH
80193: LD_VAR 0 6
80197: PPUSH
80198: LD_VAR 0 4
80202: PPUSH
80203: CALL_OW 74
80207: PPUSH
80208: CALL_OW 115
// end else
80212: GO 80314
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80214: LD_VAR 0 4
80218: PPUSH
80219: LD_VAR 0 2
80223: PUSH
80224: LD_VAR 0 9
80228: ARRAY
80229: PUSH
80230: LD_INT 1
80232: ARRAY
80233: PPUSH
80234: LD_VAR 0 2
80238: PUSH
80239: LD_VAR 0 9
80243: ARRAY
80244: PUSH
80245: LD_INT 2
80247: ARRAY
80248: PPUSH
80249: CALL_OW 297
80253: PUSH
80254: LD_INT 6
80256: GREATER
80257: IFFALSE 80300
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80259: LD_VAR 0 4
80263: PPUSH
80264: LD_VAR 0 2
80268: PUSH
80269: LD_VAR 0 9
80273: ARRAY
80274: PUSH
80275: LD_INT 1
80277: ARRAY
80278: PPUSH
80279: LD_VAR 0 2
80283: PUSH
80284: LD_VAR 0 9
80288: ARRAY
80289: PUSH
80290: LD_INT 2
80292: ARRAY
80293: PPUSH
80294: CALL_OW 114
80298: GO 80314
// SetTag ( i , tag ) ;
80300: LD_VAR 0 4
80304: PPUSH
80305: LD_VAR 0 9
80309: PPUSH
80310: CALL_OW 109
// end else
80314: GO 80387
// if enemy then
80316: LD_VAR 0 5
80320: IFFALSE 80387
// begin if GetWeapon ( i ) = ru_time_lapser then
80322: LD_VAR 0 4
80326: PPUSH
80327: CALL_OW 264
80331: PUSH
80332: LD_INT 49
80334: EQUAL
80335: IFFALSE 80363
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80337: LD_VAR 0 4
80341: PPUSH
80342: LD_VAR 0 5
80346: PPUSH
80347: LD_VAR 0 4
80351: PPUSH
80352: CALL_OW 74
80356: PPUSH
80357: CALL_OW 112
80361: GO 80387
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80363: LD_VAR 0 4
80367: PPUSH
80368: LD_VAR 0 5
80372: PPUSH
80373: LD_VAR 0 4
80377: PPUSH
80378: CALL_OW 74
80382: PPUSH
80383: CALL_OW 115
// end ; end ;
80387: GO 79967
80389: POP
80390: POP
// end ;
80391: LD_VAR 0 3
80395: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80396: LD_INT 0
80398: PPUSH
80399: PPUSH
80400: PPUSH
// if not unit or IsInUnit ( unit ) then
80401: LD_VAR 0 1
80405: NOT
80406: PUSH
80407: LD_VAR 0 1
80411: PPUSH
80412: CALL_OW 310
80416: OR
80417: IFFALSE 80421
// exit ;
80419: GO 80512
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80421: LD_ADDR_VAR 0 4
80425: PUSH
80426: LD_VAR 0 1
80430: PPUSH
80431: CALL_OW 250
80435: PPUSH
80436: LD_VAR 0 2
80440: PPUSH
80441: LD_INT 1
80443: PPUSH
80444: CALL_OW 272
80448: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80449: LD_ADDR_VAR 0 5
80453: PUSH
80454: LD_VAR 0 1
80458: PPUSH
80459: CALL_OW 251
80463: PPUSH
80464: LD_VAR 0 2
80468: PPUSH
80469: LD_INT 1
80471: PPUSH
80472: CALL_OW 273
80476: ST_TO_ADDR
// if ValidHex ( x , y ) then
80477: LD_VAR 0 4
80481: PPUSH
80482: LD_VAR 0 5
80486: PPUSH
80487: CALL_OW 488
80491: IFFALSE 80512
// ComTurnXY ( unit , x , y ) ;
80493: LD_VAR 0 1
80497: PPUSH
80498: LD_VAR 0 4
80502: PPUSH
80503: LD_VAR 0 5
80507: PPUSH
80508: CALL_OW 118
// end ;
80512: LD_VAR 0 3
80516: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80517: LD_INT 0
80519: PPUSH
80520: PPUSH
// result := false ;
80521: LD_ADDR_VAR 0 3
80525: PUSH
80526: LD_INT 0
80528: ST_TO_ADDR
// if not units then
80529: LD_VAR 0 2
80533: NOT
80534: IFFALSE 80538
// exit ;
80536: GO 80583
// for i in units do
80538: LD_ADDR_VAR 0 4
80542: PUSH
80543: LD_VAR 0 2
80547: PUSH
80548: FOR_IN
80549: IFFALSE 80581
// if See ( side , i ) then
80551: LD_VAR 0 1
80555: PPUSH
80556: LD_VAR 0 4
80560: PPUSH
80561: CALL_OW 292
80565: IFFALSE 80579
// begin result := true ;
80567: LD_ADDR_VAR 0 3
80571: PUSH
80572: LD_INT 1
80574: ST_TO_ADDR
// exit ;
80575: POP
80576: POP
80577: GO 80583
// end ;
80579: GO 80548
80581: POP
80582: POP
// end ;
80583: LD_VAR 0 3
80587: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80588: LD_INT 0
80590: PPUSH
80591: PPUSH
80592: PPUSH
80593: PPUSH
// if not unit or not points then
80594: LD_VAR 0 1
80598: NOT
80599: PUSH
80600: LD_VAR 0 2
80604: NOT
80605: OR
80606: IFFALSE 80610
// exit ;
80608: GO 80700
// dist := 99999 ;
80610: LD_ADDR_VAR 0 5
80614: PUSH
80615: LD_INT 99999
80617: ST_TO_ADDR
// for i in points do
80618: LD_ADDR_VAR 0 4
80622: PUSH
80623: LD_VAR 0 2
80627: PUSH
80628: FOR_IN
80629: IFFALSE 80698
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80631: LD_ADDR_VAR 0 6
80635: PUSH
80636: LD_VAR 0 1
80640: PPUSH
80641: LD_VAR 0 4
80645: PUSH
80646: LD_INT 1
80648: ARRAY
80649: PPUSH
80650: LD_VAR 0 4
80654: PUSH
80655: LD_INT 2
80657: ARRAY
80658: PPUSH
80659: CALL_OW 297
80663: ST_TO_ADDR
// if tmpDist < dist then
80664: LD_VAR 0 6
80668: PUSH
80669: LD_VAR 0 5
80673: LESS
80674: IFFALSE 80696
// begin result := i ;
80676: LD_ADDR_VAR 0 3
80680: PUSH
80681: LD_VAR 0 4
80685: ST_TO_ADDR
// dist := tmpDist ;
80686: LD_ADDR_VAR 0 5
80690: PUSH
80691: LD_VAR 0 6
80695: ST_TO_ADDR
// end ; end ;
80696: GO 80628
80698: POP
80699: POP
// end ;
80700: LD_VAR 0 3
80704: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80705: LD_INT 0
80707: PPUSH
// uc_side := side ;
80708: LD_ADDR_OWVAR 20
80712: PUSH
80713: LD_VAR 0 1
80717: ST_TO_ADDR
// uc_nation := 3 ;
80718: LD_ADDR_OWVAR 21
80722: PUSH
80723: LD_INT 3
80725: ST_TO_ADDR
// vc_chassis := 25 ;
80726: LD_ADDR_OWVAR 37
80730: PUSH
80731: LD_INT 25
80733: ST_TO_ADDR
// vc_engine := engine_siberite ;
80734: LD_ADDR_OWVAR 39
80738: PUSH
80739: LD_INT 3
80741: ST_TO_ADDR
// vc_control := control_computer ;
80742: LD_ADDR_OWVAR 38
80746: PUSH
80747: LD_INT 3
80749: ST_TO_ADDR
// vc_weapon := 59 ;
80750: LD_ADDR_OWVAR 40
80754: PUSH
80755: LD_INT 59
80757: ST_TO_ADDR
// result := CreateVehicle ;
80758: LD_ADDR_VAR 0 5
80762: PUSH
80763: CALL_OW 45
80767: ST_TO_ADDR
// SetDir ( result , d ) ;
80768: LD_VAR 0 5
80772: PPUSH
80773: LD_VAR 0 4
80777: PPUSH
80778: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80782: LD_VAR 0 5
80786: PPUSH
80787: LD_VAR 0 2
80791: PPUSH
80792: LD_VAR 0 3
80796: PPUSH
80797: LD_INT 0
80799: PPUSH
80800: CALL_OW 48
// end ;
80804: LD_VAR 0 5
80808: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80809: LD_INT 0
80811: PPUSH
80812: PPUSH
80813: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80814: LD_ADDR_VAR 0 2
80818: PUSH
80819: LD_INT 0
80821: PUSH
80822: LD_INT 0
80824: PUSH
80825: LD_INT 0
80827: PUSH
80828: LD_INT 0
80830: PUSH
80831: EMPTY
80832: LIST
80833: LIST
80834: LIST
80835: LIST
80836: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80837: LD_VAR 0 1
80841: NOT
80842: PUSH
80843: LD_VAR 0 1
80847: PPUSH
80848: CALL_OW 264
80852: PUSH
80853: LD_INT 12
80855: PUSH
80856: LD_INT 51
80858: PUSH
80859: LD_INT 32
80861: PUSH
80862: LD_INT 89
80864: PUSH
80865: EMPTY
80866: LIST
80867: LIST
80868: LIST
80869: LIST
80870: IN
80871: NOT
80872: OR
80873: IFFALSE 80877
// exit ;
80875: GO 80975
// for i := 1 to 3 do
80877: LD_ADDR_VAR 0 3
80881: PUSH
80882: DOUBLE
80883: LD_INT 1
80885: DEC
80886: ST_TO_ADDR
80887: LD_INT 3
80889: PUSH
80890: FOR_TO
80891: IFFALSE 80973
// begin tmp := GetCargo ( cargo , i ) ;
80893: LD_ADDR_VAR 0 4
80897: PUSH
80898: LD_VAR 0 1
80902: PPUSH
80903: LD_VAR 0 3
80907: PPUSH
80908: CALL_OW 289
80912: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80913: LD_ADDR_VAR 0 2
80917: PUSH
80918: LD_VAR 0 2
80922: PPUSH
80923: LD_VAR 0 3
80927: PPUSH
80928: LD_VAR 0 4
80932: PPUSH
80933: CALL_OW 1
80937: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80938: LD_ADDR_VAR 0 2
80942: PUSH
80943: LD_VAR 0 2
80947: PPUSH
80948: LD_INT 4
80950: PPUSH
80951: LD_VAR 0 2
80955: PUSH
80956: LD_INT 4
80958: ARRAY
80959: PUSH
80960: LD_VAR 0 4
80964: PLUS
80965: PPUSH
80966: CALL_OW 1
80970: ST_TO_ADDR
// end ;
80971: GO 80890
80973: POP
80974: POP
// end ;
80975: LD_VAR 0 2
80979: RET
// export function Length ( array ) ; begin
80980: LD_INT 0
80982: PPUSH
// result := array + 0 ;
80983: LD_ADDR_VAR 0 2
80987: PUSH
80988: LD_VAR 0 1
80992: PUSH
80993: LD_INT 0
80995: PLUS
80996: ST_TO_ADDR
// end ;
80997: LD_VAR 0 2
81001: RET
// export function PrepareArray ( array ) ; begin
81002: LD_INT 0
81004: PPUSH
// result := array diff 0 ;
81005: LD_ADDR_VAR 0 2
81009: PUSH
81010: LD_VAR 0 1
81014: PUSH
81015: LD_INT 0
81017: DIFF
81018: ST_TO_ADDR
// if not result [ 1 ] then
81019: LD_VAR 0 2
81023: PUSH
81024: LD_INT 1
81026: ARRAY
81027: NOT
81028: IFFALSE 81048
// result := Delete ( result , 1 ) ;
81030: LD_ADDR_VAR 0 2
81034: PUSH
81035: LD_VAR 0 2
81039: PPUSH
81040: LD_INT 1
81042: PPUSH
81043: CALL_OW 3
81047: ST_TO_ADDR
// end ;
81048: LD_VAR 0 2
81052: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81053: LD_INT 0
81055: PPUSH
81056: PPUSH
81057: PPUSH
81058: PPUSH
// sibRocketRange := 25 ;
81059: LD_ADDR_VAR 0 6
81063: PUSH
81064: LD_INT 25
81066: ST_TO_ADDR
// result := false ;
81067: LD_ADDR_VAR 0 4
81071: PUSH
81072: LD_INT 0
81074: ST_TO_ADDR
// for i := 0 to 5 do
81075: LD_ADDR_VAR 0 5
81079: PUSH
81080: DOUBLE
81081: LD_INT 0
81083: DEC
81084: ST_TO_ADDR
81085: LD_INT 5
81087: PUSH
81088: FOR_TO
81089: IFFALSE 81156
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81091: LD_VAR 0 1
81095: PPUSH
81096: LD_VAR 0 5
81100: PPUSH
81101: LD_VAR 0 6
81105: PPUSH
81106: CALL_OW 272
81110: PPUSH
81111: LD_VAR 0 2
81115: PPUSH
81116: LD_VAR 0 5
81120: PPUSH
81121: LD_VAR 0 6
81125: PPUSH
81126: CALL_OW 273
81130: PPUSH
81131: LD_VAR 0 3
81135: PPUSH
81136: CALL_OW 309
81140: IFFALSE 81154
// begin result := true ;
81142: LD_ADDR_VAR 0 4
81146: PUSH
81147: LD_INT 1
81149: ST_TO_ADDR
// exit ;
81150: POP
81151: POP
81152: GO 81158
// end ;
81154: GO 81088
81156: POP
81157: POP
// end ; end_of_file
81158: LD_VAR 0 4
81162: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81163: LD_VAR 0 1
81167: PUSH
81168: LD_INT 200
81170: DOUBLE
81171: GREATEREQUAL
81172: IFFALSE 81180
81174: LD_INT 299
81176: DOUBLE
81177: LESSEQUAL
81178: IFTRUE 81182
81180: GO 81214
81182: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81183: LD_VAR 0 1
81187: PPUSH
81188: LD_VAR 0 2
81192: PPUSH
81193: LD_VAR 0 3
81197: PPUSH
81198: LD_VAR 0 4
81202: PPUSH
81203: LD_VAR 0 5
81207: PPUSH
81208: CALL 35882 0 5
81212: GO 81291
81214: LD_INT 300
81216: DOUBLE
81217: GREATEREQUAL
81218: IFFALSE 81226
81220: LD_INT 399
81222: DOUBLE
81223: LESSEQUAL
81224: IFTRUE 81228
81226: GO 81290
81228: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81229: LD_VAR 0 1
81233: PPUSH
81234: LD_VAR 0 2
81238: PPUSH
81239: LD_VAR 0 3
81243: PPUSH
81244: LD_VAR 0 4
81248: PPUSH
81249: LD_VAR 0 5
81253: PPUSH
81254: LD_VAR 0 6
81258: PPUSH
81259: LD_VAR 0 7
81263: PPUSH
81264: LD_VAR 0 8
81268: PPUSH
81269: LD_VAR 0 9
81273: PPUSH
81274: LD_VAR 0 10
81278: PPUSH
81279: LD_VAR 0 11
81283: PPUSH
81284: CALL 32215 0 11
81288: GO 81291
81290: POP
// end ;
81291: PPOPN 11
81293: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81294: LD_VAR 0 1
81298: PPUSH
81299: LD_VAR 0 2
81303: PPUSH
81304: LD_VAR 0 3
81308: PPUSH
81309: LD_VAR 0 4
81313: PPUSH
81314: LD_VAR 0 5
81318: PPUSH
81319: CALL 35618 0 5
// end ; end_of_file
81323: PPOPN 5
81325: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81326: LD_VAR 0 1
81330: PPUSH
81331: LD_VAR 0 2
81335: PPUSH
81336: LD_VAR 0 3
81340: PPUSH
81341: LD_VAR 0 4
81345: PPUSH
81346: LD_VAR 0 5
81350: PPUSH
81351: LD_VAR 0 6
81355: PPUSH
81356: CALL 19908 0 6
// end ;
81360: PPOPN 6
81362: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81363: LD_INT 0
81365: PPUSH
// begin if not units then
81366: LD_VAR 0 1
81370: NOT
81371: IFFALSE 81375
// exit ;
81373: GO 81375
// end ;
81375: PPOPN 7
81377: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81378: CALL 19879 0 0
// end ;
81382: PPOPN 1
81384: END
