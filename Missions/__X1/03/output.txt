// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// PrepareNature ;
   8: CALL 575 0 0
// PrepareArabian ;
  12: CALL 958 0 0
// PrepareAmerican ;
  16: CALL 3672 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 4616 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , omarCargoCounter , vehCounter ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := true ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 1
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// deadCounter := 0 ;
  57: LD_ADDR_EXP 8
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// gameStarted := false ;
  65: LD_ADDR_EXP 3
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// farmerBaseReady := false ;
  73: LD_ADDR_EXP 4
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// americanBaseSpoted := false ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseCaptured := false ;
  89: LD_ADDR_EXP 6
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanHasEscaped := false ;
  97: LD_ADDR_EXP 7
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// workshopBuilded := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// retreatAllowed := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// allowConvoys := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// farmerCrates := 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCratesCounter := 4 4$00 ;
 145: LD_ADDR_EXP 14
 149: PUSH
 150: LD_INT 8400
 152: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 153: LD_ADDR_EXP 15
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// attackWave := 1 ;
 161: LD_ADDR_EXP 16
 165: PUSH
 166: LD_INT 1
 168: ST_TO_ADDR
// omarCargoCounter := [ 6 , 9 , 12 ] [ Difficulty ] ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 6
 176: PUSH
 177: LD_INT 9
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_OWVAR 67
 192: ARRAY
 193: ST_TO_ADDR
// vehCounter := 0 ;
 194: LD_ADDR_EXP 18
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// end ; end_of_file
 202: LD_VAR 0 1
 206: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 207: LD_INT 0
 209: PPUSH
 210: PPUSH
// if exist_mode then
 211: LD_VAR 0 2
 215: IFFALSE 240
// unit := CreateCharacter ( prefix & ident ) else
 217: LD_ADDR_VAR 0 5
 221: PUSH
 222: LD_VAR 0 3
 226: PUSH
 227: LD_VAR 0 1
 231: STR
 232: PPUSH
 233: CALL_OW 34
 237: ST_TO_ADDR
 238: GO 255
// unit := NewCharacter ( ident ) ;
 240: LD_ADDR_VAR 0 5
 244: PUSH
 245: LD_VAR 0 1
 249: PPUSH
 250: CALL_OW 25
 254: ST_TO_ADDR
// result := unit ;
 255: LD_ADDR_VAR 0 4
 259: PUSH
 260: LD_VAR 0 5
 264: ST_TO_ADDR
// end ;
 265: LD_VAR 0 4
 269: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 270: LD_INT 0
 272: PPUSH
// uc_side := side ;
 273: LD_ADDR_OWVAR 20
 277: PUSH
 278: LD_VAR 0 1
 282: ST_TO_ADDR
// uc_nation := nation ;
 283: LD_ADDR_OWVAR 21
 287: PUSH
 288: LD_VAR 0 2
 292: ST_TO_ADDR
// vc_chassis := chassis ;
 293: LD_ADDR_OWVAR 37
 297: PUSH
 298: LD_VAR 0 3
 302: ST_TO_ADDR
// vc_engine := engine ;
 303: LD_ADDR_OWVAR 39
 307: PUSH
 308: LD_VAR 0 4
 312: ST_TO_ADDR
// vc_control := control ;
 313: LD_ADDR_OWVAR 38
 317: PUSH
 318: LD_VAR 0 5
 322: ST_TO_ADDR
// vc_weapon := weapon ;
 323: LD_ADDR_OWVAR 40
 327: PUSH
 328: LD_VAR 0 6
 332: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 333: LD_ADDR_OWVAR 41
 337: PUSH
 338: LD_VAR 0 7
 342: ST_TO_ADDR
// result := CreateVehicle ;
 343: LD_ADDR_VAR 0 8
 347: PUSH
 348: CALL_OW 45
 352: ST_TO_ADDR
// end ;
 353: LD_VAR 0 8
 357: RET
// export function SayX ( units , ident ) ; var i ; begin
 358: LD_INT 0
 360: PPUSH
 361: PPUSH
// result := false ;
 362: LD_ADDR_VAR 0 3
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// if not units then
 370: LD_VAR 0 1
 374: NOT
 375: IFFALSE 379
// exit ;
 377: GO 433
// for i in units do
 379: LD_ADDR_VAR 0 4
 383: PUSH
 384: LD_VAR 0 1
 388: PUSH
 389: FOR_IN
 390: IFFALSE 431
// if IsOk ( i ) then
 392: LD_VAR 0 4
 396: PPUSH
 397: CALL_OW 302
 401: IFFALSE 429
// begin Say ( i , ident ) ;
 403: LD_VAR 0 4
 407: PPUSH
 408: LD_VAR 0 2
 412: PPUSH
 413: CALL_OW 88
// result := i ;
 417: LD_ADDR_VAR 0 3
 421: PUSH
 422: LD_VAR 0 4
 426: ST_TO_ADDR
// break ;
 427: GO 431
// end ;
 429: GO 389
 431: POP
 432: POP
// end ;
 433: LD_VAR 0 3
 437: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 438: LD_INT 0
 440: PPUSH
 441: PPUSH
// InitUc ;
 442: CALL_OW 18
// InitHc ;
 446: CALL_OW 19
// uc_side := 0 ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_INT 0
 457: ST_TO_ADDR
// uc_nation := 0 ;
 458: LD_ADDR_OWVAR 21
 462: PUSH
 463: LD_INT 0
 465: ST_TO_ADDR
// for i = 1 to amount do
 466: LD_ADDR_VAR 0 4
 470: PUSH
 471: DOUBLE
 472: LD_INT 1
 474: DEC
 475: ST_TO_ADDR
 476: LD_VAR 0 2
 480: PUSH
 481: FOR_TO
 482: IFFALSE 564
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 484: LD_ADDR_OWVAR 29
 488: PUSH
 489: LD_INT 9
 491: PPUSH
 492: LD_INT 12
 494: PPUSH
 495: CALL_OW 12
 499: PUSH
 500: LD_INT 9
 502: PPUSH
 503: LD_INT 12
 505: PPUSH
 506: CALL_OW 12
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 515: LD_ADDR_OWVAR 35
 519: PUSH
 520: LD_INT 1
 522: NEG
 523: PPUSH
 524: LD_INT 1
 526: PPUSH
 527: CALL_OW 12
 531: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 532: LD_INT 0
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: LD_INT 1
 540: PPUSH
 541: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 545: CALL_OW 44
 549: PPUSH
 550: LD_VAR 0 1
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 49
// end ;
 562: GO 481
 564: POP
 565: POP
// InitHc ;
 566: CALL_OW 19
// end ;
 570: LD_VAR 0 3
 574: RET
// export function PrepareNature ; var i ; begin
 575: LD_INT 0
 577: PPUSH
 578: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 579: LD_INT 2
 581: PPUSH
 582: LD_INT 4
 584: PUSH
 585: LD_INT 4
 587: PUSH
 588: LD_INT 3
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: LIST
 595: PUSH
 596: LD_OWVAR 67
 600: ARRAY
 601: PPUSH
 602: CALL 438 0 2
// for i := 1 to 3 do
 606: LD_ADDR_VAR 0 2
 610: PUSH
 611: DOUBLE
 612: LD_INT 1
 614: DEC
 615: ST_TO_ADDR
 616: LD_INT 3
 618: PUSH
 619: FOR_TO
 620: IFFALSE 655
// begin hc_class := 21 ;
 622: LD_ADDR_OWVAR 28
 626: PUSH
 627: LD_INT 21
 629: ST_TO_ADDR
// hc_gallery :=  ;
 630: LD_ADDR_OWVAR 33
 634: PUSH
 635: LD_STRING 
 637: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 638: CALL_OW 44
 642: PPUSH
 643: LD_INT 2
 645: PPUSH
 646: LD_INT 0
 648: PPUSH
 649: CALL_OW 49
// end ;
 653: GO 619
 655: POP
 656: POP
// for i := 1 to 2 do
 657: LD_ADDR_VAR 0 2
 661: PUSH
 662: DOUBLE
 663: LD_INT 1
 665: DEC
 666: ST_TO_ADDR
 667: LD_INT 2
 669: PUSH
 670: FOR_TO
 671: IFFALSE 706
// begin hc_class := 18 ;
 673: LD_ADDR_OWVAR 28
 677: PUSH
 678: LD_INT 18
 680: ST_TO_ADDR
// hc_gallery :=  ;
 681: LD_ADDR_OWVAR 33
 685: PUSH
 686: LD_STRING 
 688: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 689: CALL_OW 44
 693: PPUSH
 694: LD_INT 2
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 49
// end ;
 704: GO 670
 706: POP
 707: POP
// for i := 1 to 2 do
 708: LD_ADDR_VAR 0 2
 712: PUSH
 713: DOUBLE
 714: LD_INT 1
 716: DEC
 717: ST_TO_ADDR
 718: LD_INT 2
 720: PUSH
 721: FOR_TO
 722: IFFALSE 757
// begin hc_class := 13 ;
 724: LD_ADDR_OWVAR 28
 728: PUSH
 729: LD_INT 13
 731: ST_TO_ADDR
// hc_gallery :=  ;
 732: LD_ADDR_OWVAR 33
 736: PUSH
 737: LD_STRING 
 739: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 740: CALL_OW 44
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 49
// end ;
 755: GO 721
 757: POP
 758: POP
// end ;
 759: LD_VAR 0 1
 763: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 764: LD_INT 0
 766: PPUSH
 767: PPUSH
 768: PPUSH
// if not observer or not unit then
 769: LD_VAR 0 1
 773: NOT
 774: PUSH
 775: LD_VAR 0 2
 779: NOT
 780: OR
 781: IFFALSE 785
// exit ;
 783: GO 833
// if not See ( GetSide ( observer ) , unit ) then
 785: LD_VAR 0 1
 789: PPUSH
 790: CALL_OW 255
 794: PPUSH
 795: LD_VAR 0 2
 799: PPUSH
 800: CALL_OW 292
 804: NOT
 805: IFFALSE 809
// exit ;
 807: GO 833
// result := GetDistUnits ( observer , unit ) < 12 ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_VAR 0 1
 818: PPUSH
 819: LD_VAR 0 2
 823: PPUSH
 824: CALL_OW 296
 828: PUSH
 829: LD_INT 12
 831: LESS
 832: ST_TO_ADDR
// end ;
 833: LD_VAR 0 3
 837: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 838: LD_INT 0
 840: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 841: LD_VAR 0 2
 845: PUSH
 846: LD_INT 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_INT 2
 857: ARRAY
 858: PPUSH
 859: CALL_OW 488
 863: PUSH
 864: LD_VAR 0 2
 868: PUSH
 869: LD_INT 1
 871: ARRAY
 872: PPUSH
 873: LD_VAR 0 2
 877: PUSH
 878: LD_INT 2
 880: ARRAY
 881: PPUSH
 882: CALL_OW 428
 886: PUSH
 887: LD_INT 0
 889: EQUAL
 890: AND
 891: IFFALSE 925
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 893: LD_VAR 0 1
 897: PPUSH
 898: LD_VAR 0 2
 902: PUSH
 903: LD_INT 1
 905: ARRAY
 906: PPUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 2
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 3
 920: PPUSH
 921: CALL_OW 48
// end ;
 925: LD_VAR 0 4
 929: RET
// export function Video ( mode ) ; begin
 930: LD_INT 0
 932: PPUSH
// ingame_video = mode ;
 933: LD_ADDR_OWVAR 52
 937: PUSH
 938: LD_VAR 0 1
 942: ST_TO_ADDR
// interface_hidden = mode ;
 943: LD_ADDR_OWVAR 54
 947: PUSH
 948: LD_VAR 0 1
 952: ST_TO_ADDR
// end ; end_of_file
 953: LD_VAR 0 2
 957: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
 958: LD_INT 0
 960: PPUSH
 961: PPUSH
 962: PPUSH
 963: PPUSH
// uc_side := 5 ;
 964: LD_ADDR_OWVAR 20
 968: PUSH
 969: LD_INT 5
 971: ST_TO_ADDR
// uc_nation := 2 ;
 972: LD_ADDR_OWVAR 21
 976: PUSH
 977: LD_INT 2
 979: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
 980: LD_INT 5
 982: PPUSH
 983: CALL_OW 274
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: LD_INT 45
 993: PPUSH
 994: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
 998: LD_ADDR_EXP 27
1002: PUSH
1003: LD_STRING Farmer
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: LD_STRING 
1011: PPUSH
1012: CALL 207 0 3
1016: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1017: LD_ADDR_EXP 28
1021: PUSH
1022: LD_STRING Omar
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: LD_STRING 
1030: PPUSH
1031: CALL 207 0 3
1035: ST_TO_ADDR
// omarSquad := [ ] ;
1036: LD_ADDR_EXP 30
1040: PUSH
1041: EMPTY
1042: ST_TO_ADDR
// heikeSquad := [ ] ;
1043: LD_ADDR_EXP 31
1047: PUSH
1048: EMPTY
1049: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1050: LD_ADDR_EXP 32
1054: PUSH
1055: EMPTY
1056: ST_TO_ADDR
// omarCargo := [ ] ;
1057: LD_ADDR_EXP 33
1061: PUSH
1062: EMPTY
1063: ST_TO_ADDR
// for i := 1 to 5 do
1064: LD_ADDR_VAR 0 2
1068: PUSH
1069: DOUBLE
1070: LD_INT 1
1072: DEC
1073: ST_TO_ADDR
1074: LD_INT 5
1076: PUSH
1077: FOR_TO
1078: IFFALSE 1236
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1080: LD_INT 0
1082: PPUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 1
1088: PUSH
1089: LD_INT 2
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 1
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: PUSH
1105: LD_VAR 0 2
1109: ARRAY
1110: PPUSH
1111: LD_INT 3
1113: PPUSH
1114: CALL_OW 380
// un := CreateHuman ;
1118: LD_ADDR_VAR 0 3
1122: PUSH
1123: CALL_OW 44
1127: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1128: LD_ADDR_EXP 30
1132: PUSH
1133: LD_EXP 30
1137: PUSH
1138: LD_VAR 0 3
1142: UNION
1143: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1144: LD_VAR 0 3
1148: PPUSH
1149: LD_INT 87
1151: PUSH
1152: LD_INT 30
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: PUSH
1159: LD_INT 91
1161: PUSH
1162: LD_INT 32
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: PUSH
1169: LD_INT 82
1171: PUSH
1172: LD_INT 15
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PUSH
1179: LD_INT 79
1181: PUSH
1182: LD_INT 14
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 82
1191: PUSH
1192: LD_INT 13
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_INT 0
1214: PPUSH
1215: CALL 838 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1219: LD_VAR 0 3
1223: PPUSH
1224: LD_INT 93
1226: PPUSH
1227: LD_INT 21
1229: PPUSH
1230: CALL_OW 118
// end ;
1234: GO 1077
1236: POP
1237: POP
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1246: LD_ADDR_EXP 19
1250: PUSH
1251: LD_STRING Heike
1253: PPUSH
1254: LD_EXP 1
1258: NOT
1259: PPUSH
1260: LD_EXP 2
1264: PPUSH
1265: CALL 207 0 3
1269: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 23
1274: PUSH
1275: LD_STRING Aviradze
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 207 0 3
1293: ST_TO_ADDR
// tmp := [ ] ;
1294: LD_ADDR_VAR 0 4
1298: PUSH
1299: EMPTY
1300: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1301: LD_ADDR_EXP 20
1305: PUSH
1306: LD_STRING Givi
1308: PPUSH
1309: LD_EXP 1
1313: NOT
1314: PPUSH
1315: LD_EXP 2
1319: PPUSH
1320: CALL 207 0 3
1324: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1325: LD_ADDR_EXP 21
1329: PUSH
1330: LD_STRING Mike
1332: PPUSH
1333: LD_EXP 1
1337: NOT
1338: PPUSH
1339: LD_EXP 2
1343: PPUSH
1344: CALL 207 0 3
1348: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1349: LD_ADDR_EXP 22
1353: PUSH
1354: LD_STRING Kamil
1356: PPUSH
1357: LD_EXP 1
1361: NOT
1362: PPUSH
1363: LD_EXP 2
1367: PPUSH
1368: CALL 207 0 3
1372: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1373: LD_ADDR_EXP 24
1377: PUSH
1378: LD_STRING Kaia
1380: PPUSH
1381: LD_EXP 1
1385: NOT
1386: PPUSH
1387: LD_EXP 2
1391: PPUSH
1392: CALL 207 0 3
1396: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1397: LD_ADDR_EXP 25
1401: PUSH
1402: LD_STRING Sophia
1404: PPUSH
1405: LD_EXP 1
1409: NOT
1410: PPUSH
1411: LD_EXP 2
1415: PPUSH
1416: CALL 207 0 3
1420: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1421: LD_ADDR_EXP 26
1425: PUSH
1426: LD_STRING Markov
1428: PPUSH
1429: LD_EXP 1
1433: NOT
1434: PPUSH
1435: LD_EXP 2
1439: PPUSH
1440: CALL 207 0 3
1444: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1445: LD_ADDR_EXP 32
1449: PUSH
1450: LD_STRING 02_others
1452: PPUSH
1453: CALL_OW 31
1457: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1458: LD_ADDR_VAR 0 4
1462: PUSH
1463: LD_EXP 21
1467: PUSH
1468: LD_EXP 22
1472: PUSH
1473: LD_EXP 24
1477: PUSH
1478: LD_EXP 25
1482: PUSH
1483: LD_EXP 26
1487: PUSH
1488: LD_EXP 20
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: PUSH
1501: LD_EXP 32
1505: ADD
1506: PUSH
1507: LD_INT 0
1509: DIFF
1510: ST_TO_ADDR
// heikeSquad := tmp ;
1511: LD_ADDR_EXP 31
1515: PUSH
1516: LD_VAR 0 4
1520: ST_TO_ADDR
// uc_nation := 0 ;
1521: LD_ADDR_OWVAR 21
1525: PUSH
1526: LD_INT 0
1528: ST_TO_ADDR
// hc_class := class_apeman ;
1529: LD_ADDR_OWVAR 28
1533: PUSH
1534: LD_INT 12
1536: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1537: LD_ADDR_OWVAR 31
1541: PUSH
1542: LD_INT 0
1544: PUSH
1545: LD_INT 0
1547: PUSH
1548: LD_INT 0
1550: PUSH
1551: LD_INT 0
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: ST_TO_ADDR
// hc_gallery :=  ;
1560: LD_ADDR_OWVAR 33
1564: PUSH
1565: LD_STRING 
1567: ST_TO_ADDR
// hc_name :=  ;
1568: LD_ADDR_OWVAR 26
1572: PUSH
1573: LD_STRING 
1575: ST_TO_ADDR
// tmp := tmp union CreateHuman ;
1576: LD_ADDR_VAR 0 4
1580: PUSH
1581: LD_VAR 0 4
1585: PUSH
1586: CALL_OW 44
1590: UNION
1591: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1592: LD_EXP 19
1596: PPUSH
1597: LD_INT 92
1599: PPUSH
1600: LD_INT 17
1602: PPUSH
1603: LD_INT 0
1605: PPUSH
1606: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1610: LD_EXP 27
1614: PPUSH
1615: LD_INT 95
1617: PPUSH
1618: LD_INT 19
1620: PPUSH
1621: LD_INT 0
1623: PPUSH
1624: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1628: LD_EXP 28
1632: PPUSH
1633: LD_INT 89
1635: PPUSH
1636: LD_INT 25
1638: PPUSH
1639: LD_INT 0
1641: PPUSH
1642: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1646: LD_EXP 23
1650: PPUSH
1651: LD_INT 92
1653: PPUSH
1654: LD_INT 27
1656: PPUSH
1657: LD_INT 0
1659: PPUSH
1660: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1664: LD_EXP 28
1668: PPUSH
1669: LD_EXP 23
1673: PPUSH
1674: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1678: LD_EXP 23
1682: PPUSH
1683: LD_EXP 28
1687: PPUSH
1688: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1692: LD_EXP 19
1696: PUSH
1697: LD_EXP 27
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PPUSH
1706: LD_EXP 28
1710: PPUSH
1711: CALL_OW 119
// if tmp then
1715: LD_VAR 0 4
1719: IFFALSE 1773
// for i in tmp do
1721: LD_ADDR_VAR 0 2
1725: PUSH
1726: LD_VAR 0 4
1730: PUSH
1731: FOR_IN
1732: IFFALSE 1771
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1734: LD_VAR 0 2
1738: PPUSH
1739: LD_INT 94
1741: PPUSH
1742: LD_INT 14
1744: PPUSH
1745: LD_INT 4
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1755: LD_VAR 0 2
1759: PPUSH
1760: LD_EXP 19
1764: PPUSH
1765: CALL_OW 119
// end ;
1769: GO 1731
1771: POP
1772: POP
// farmerSquad := [ ] ;
1773: LD_ADDR_EXP 29
1777: PUSH
1778: EMPTY
1779: ST_TO_ADDR
// uc_side := 5 ;
1780: LD_ADDR_OWVAR 20
1784: PUSH
1785: LD_INT 5
1787: ST_TO_ADDR
// uc_nation := 2 ;
1788: LD_ADDR_OWVAR 21
1792: PUSH
1793: LD_INT 2
1795: ST_TO_ADDR
// for i := 1 to 4 do
1796: LD_ADDR_VAR 0 2
1800: PUSH
1801: DOUBLE
1802: LD_INT 1
1804: DEC
1805: ST_TO_ADDR
1806: LD_INT 4
1808: PUSH
1809: FOR_TO
1810: IFFALSE 1888
// begin PrepareHuman ( false , 1 , 2 ) ;
1812: LD_INT 0
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: LD_INT 2
1820: PPUSH
1821: CALL_OW 380
// un := CreateHuman ;
1825: LD_ADDR_VAR 0 3
1829: PUSH
1830: CALL_OW 44
1834: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1835: LD_VAR 0 3
1839: PPUSH
1840: LD_INT 102
1842: PPUSH
1843: LD_INT 27
1845: PPUSH
1846: LD_INT 4
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1856: LD_ADDR_EXP 29
1860: PUSH
1861: LD_EXP 29
1865: PUSH
1866: LD_VAR 0 3
1870: UNION
1871: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1872: LD_VAR 0 3
1876: PPUSH
1877: LD_EXP 28
1881: PPUSH
1882: CALL_OW 119
// end ;
1886: GO 1809
1888: POP
1889: POP
// PrepareHuman ( false , 2 , 2 ) ;
1890: LD_INT 0
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: LD_INT 2
1898: PPUSH
1899: CALL_OW 380
// un := CreateHuman ;
1903: LD_ADDR_VAR 0 3
1907: PUSH
1908: CALL_OW 44
1912: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1913: LD_VAR 0 3
1917: PPUSH
1918: LD_INT 108
1920: PPUSH
1921: LD_INT 62
1923: PPUSH
1924: LD_INT 2
1926: PPUSH
1927: LD_INT 0
1929: PPUSH
1930: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1934: LD_ADDR_EXP 29
1938: PUSH
1939: LD_EXP 29
1943: PUSH
1944: LD_VAR 0 3
1948: UNION
1949: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1950: LD_VAR 0 3
1954: PPUSH
1955: LD_EXP 28
1959: PPUSH
1960: CALL_OW 119
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
1964: LD_INT 109
1966: PPUSH
1967: LD_INT 63
1969: PPUSH
1970: LD_INT 2
1972: PPUSH
1973: LD_INT 15
1975: NEG
1976: PPUSH
1977: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
1981: LD_INT 109
1983: PPUSH
1984: LD_INT 63
1986: PPUSH
1987: LD_INT 2
1989: PPUSH
1990: CALL_OW 331
// end ;
1994: LD_VAR 0 1
1998: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
1999: LD_EXP 28
2003: PUSH
2004: LD_EXP 30
2008: ADD
2009: PPUSH
2010: LD_INT 95
2012: PUSH
2013: LD_INT 3
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PPUSH
2020: CALL_OW 72
2024: IFFALSE 2080
2026: GO 2028
2028: DISABLE
2029: LD_INT 0
2031: PPUSH
// begin enable ;
2032: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2033: LD_ADDR_VAR 0 1
2037: PUSH
2038: LD_EXP 28
2042: PUSH
2043: LD_EXP 30
2047: ADD
2048: PPUSH
2049: LD_INT 95
2051: PUSH
2052: LD_INT 3
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 72
2063: PUSH
2064: FOR_IN
2065: IFFALSE 2078
// RemoveUnit ( i ) ;
2067: LD_VAR 0 1
2071: PPUSH
2072: CALL_OW 64
2076: GO 2064
2078: POP
2079: POP
// end ;
2080: PPOPN 1
2082: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2083: LD_EXP 3
2087: PUSH
2088: LD_EXP 27
2092: PPUSH
2093: LD_INT 4
2095: PPUSH
2096: CALL_OW 308
2100: AND
2101: IFFALSE 2884
2103: GO 2105
2105: DISABLE
2106: LD_INT 0
2108: PPUSH
2109: PPUSH
2110: PPUSH
2111: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2112: LD_EXP 27
2116: PPUSH
2117: LD_INT 110
2119: PPUSH
2120: LD_INT 60
2122: PPUSH
2123: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2127: LD_EXP 27
2131: PPUSH
2132: LD_INT 110
2134: PPUSH
2135: LD_INT 61
2137: PPUSH
2138: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2142: LD_ADDR_VAR 0 2
2146: PUSH
2147: LD_EXP 29
2151: PPUSH
2152: LD_INT 25
2154: PUSH
2155: LD_INT 1
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PPUSH
2162: CALL_OW 72
2166: ST_TO_ADDR
// if tmp then
2167: LD_VAR 0 2
2171: IFFALSE 2265
// begin for i := 1 to 2 do
2173: LD_ADDR_VAR 0 1
2177: PUSH
2178: DOUBLE
2179: LD_INT 1
2181: DEC
2182: ST_TO_ADDR
2183: LD_INT 2
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2263
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2189: LD_VAR 0 2
2193: PUSH
2194: LD_VAR 0 1
2198: ARRAY
2199: PPUSH
2200: LD_INT 5
2202: PPUSH
2203: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2207: LD_VAR 0 2
2211: PUSH
2212: LD_VAR 0 1
2216: ARRAY
2217: PPUSH
2218: LD_INT 2
2220: PPUSH
2221: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2225: LD_VAR 0 2
2229: PUSH
2230: LD_VAR 0 1
2234: ARRAY
2235: PPUSH
2236: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2240: LD_VAR 0 2
2244: PUSH
2245: LD_VAR 0 1
2249: ARRAY
2250: PPUSH
2251: LD_INT 107
2253: PPUSH
2254: LD_INT 66
2256: PPUSH
2257: CALL_OW 171
// end ;
2261: GO 2186
2263: POP
2264: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_EXP 29
2274: PPUSH
2275: LD_INT 25
2277: PUSH
2278: LD_INT 2
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PPUSH
2285: CALL_OW 72
2289: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2290: LD_INT 35
2292: PPUSH
2293: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_EXP 29
2306: PPUSH
2307: LD_INT 25
2309: PUSH
2310: LD_INT 2
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PPUSH
2317: CALL_OW 72
2321: ST_TO_ADDR
// until tmp ;
2322: LD_VAR 0 2
2326: IFFALSE 2290
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 31
2335: PPUSH
2336: LD_INT 102
2338: PPUSH
2339: LD_INT 69
2341: PPUSH
2342: LD_INT 2
2344: PPUSH
2345: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2349: LD_INT 35
2351: PPUSH
2352: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2356: LD_EXP 29
2360: PPUSH
2361: LD_INT 3
2363: PUSH
2364: LD_INT 60
2366: PUSH
2367: EMPTY
2368: LIST
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: PUSH
2374: LD_INT 25
2376: PUSH
2377: LD_INT 2
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PPUSH
2388: CALL_OW 72
2392: IFFALSE 2349
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2394: LD_ADDR_VAR 0 2
2398: PUSH
2399: LD_EXP 29
2403: PPUSH
2404: LD_INT 25
2406: PUSH
2407: LD_INT 2
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PPUSH
2414: CALL_OW 72
2418: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2419: LD_VAR 0 2
2423: PPUSH
2424: LD_INT 4
2426: PPUSH
2427: LD_INT 116
2429: PPUSH
2430: LD_INT 70
2432: PPUSH
2433: LD_INT 5
2435: PPUSH
2436: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
2440: LD_VAR 0 2
2444: PPUSH
2445: LD_INT 31
2447: PPUSH
2448: LD_INT 108
2450: PPUSH
2451: LD_INT 50
2453: PPUSH
2454: LD_INT 2
2456: PPUSH
2457: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2461: LD_INT 35
2463: PPUSH
2464: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2468: LD_INT 22
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PUSH
2478: LD_INT 30
2480: PUSH
2481: LD_INT 4
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 57
2493: PUSH
2494: EMPTY
2495: LIST
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: PPUSH
2506: CALL_OW 69
2510: IFFALSE 2461
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2512: LD_ADDR_VAR 0 3
2516: PUSH
2517: LD_INT 22
2519: PUSH
2520: LD_INT 5
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 30
2529: PUSH
2530: LD_INT 4
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PUSH
2537: LD_INT 3
2539: PUSH
2540: LD_INT 57
2542: PUSH
2543: EMPTY
2544: LIST
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: PPUSH
2555: CALL_OW 69
2559: PUSH
2560: LD_INT 1
2562: ARRAY
2563: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_EXP 29
2573: PPUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 1
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PPUSH
2584: CALL_OW 72
2588: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2589: LD_VAR 0 2
2593: PPUSH
2594: LD_VAR 0 3
2598: PPUSH
2599: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2603: LD_INT 35
2605: PPUSH
2606: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2610: LD_INT 22
2612: PUSH
2613: LD_INT 5
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 30
2622: PUSH
2623: LD_INT 31
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PUSH
2630: LD_INT 3
2632: PUSH
2633: LD_INT 57
2635: PUSH
2636: EMPTY
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: LIST
2647: PPUSH
2648: CALL_OW 69
2652: PUSH
2653: LD_INT 2
2655: GREATEREQUAL
2656: IFFALSE 2603
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2658: LD_ADDR_VAR 0 2
2662: PUSH
2663: LD_EXP 29
2667: PPUSH
2668: LD_INT 25
2670: PUSH
2671: LD_INT 2
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 72
2682: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 1
2690: ARRAY
2691: PPUSH
2692: LD_INT 5
2694: PPUSH
2695: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2699: LD_VAR 0 2
2703: PUSH
2704: LD_INT 2
2706: ARRAY
2707: PUSH
2708: LD_VAR 0 2
2712: PUSH
2713: LD_INT 3
2715: ARRAY
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: LD_VAR 0 3
2725: PPUSH
2726: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2730: LD_VAR 0 2
2734: PUSH
2735: LD_INT 2
2737: ARRAY
2738: PUSH
2739: LD_VAR 0 2
2743: PUSH
2744: LD_INT 3
2746: ARRAY
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PPUSH
2752: LD_INT 1
2754: PPUSH
2755: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2759: LD_VAR 0 2
2763: PUSH
2764: LD_INT 2
2766: ARRAY
2767: PUSH
2768: LD_VAR 0 2
2772: PUSH
2773: LD_INT 3
2775: ARRAY
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2785: LD_ADDR_VAR 0 4
2789: PUSH
2790: LD_INT 22
2792: PUSH
2793: LD_INT 5
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 30
2802: PUSH
2803: LD_INT 31
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PPUSH
2814: CALL_OW 69
2818: ST_TO_ADDR
// for i := 1 to 2 do
2819: LD_ADDR_VAR 0 1
2823: PUSH
2824: DOUBLE
2825: LD_INT 1
2827: DEC
2828: ST_TO_ADDR
2829: LD_INT 2
2831: PUSH
2832: FOR_TO
2833: IFFALSE 2867
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
2835: LD_VAR 0 2
2839: PUSH
2840: LD_VAR 0 1
2844: PUSH
2845: LD_INT 1
2847: PLUS
2848: ARRAY
2849: PPUSH
2850: LD_VAR 0 4
2854: PUSH
2855: LD_VAR 0 1
2859: ARRAY
2860: PPUSH
2861: CALL_OW 180
2865: GO 2832
2867: POP
2868: POP
// wait ( 1 1$00 ) ;
2869: LD_INT 2100
2871: PPUSH
2872: CALL_OW 67
// farmerBaseReady := true ;
2876: LD_ADDR_EXP 4
2880: PUSH
2881: LD_INT 1
2883: ST_TO_ADDR
// end ;
2884: PPOPN 4
2886: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , damagedBuilding ;
2887: LD_EXP 4
2891: PUSH
2892: LD_EXP 10
2896: NOT
2897: AND
2898: IFFALSE 3218
2900: GO 2902
2902: DISABLE
2903: LD_INT 0
2905: PPUSH
2906: PPUSH
2907: PPUSH
// begin enable ;
2908: ENABLE
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2909: LD_ADDR_VAR 0 2
2913: PUSH
2914: LD_EXP 29
2918: PPUSH
2919: LD_INT 25
2921: PUSH
2922: LD_INT 2
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PPUSH
2929: CALL_OW 72
2933: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2934: LD_ADDR_VAR 0 3
2938: PUSH
2939: LD_INT 22
2941: PUSH
2942: LD_INT 5
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PUSH
2949: LD_INT 21
2951: PUSH
2952: LD_INT 3
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 3
2961: PUSH
2962: LD_INT 24
2964: PUSH
2965: LD_INT 1000
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: PPUSH
2981: CALL_OW 69
2985: ST_TO_ADDR
// if not eng then
2986: LD_VAR 0 2
2990: NOT
2991: IFFALSE 3083
// begin uc_side := 5 ;
2993: LD_ADDR_OWVAR 20
2997: PUSH
2998: LD_INT 5
3000: ST_TO_ADDR
// uc_nation := 2 ;
3001: LD_ADDR_OWVAR 21
3005: PUSH
3006: LD_INT 2
3008: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3009: LD_INT 0
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: LD_INT 2
3017: PPUSH
3018: CALL_OW 380
// eng := CreateHuman ;
3022: LD_ADDR_VAR 0 2
3026: PUSH
3027: CALL_OW 44
3031: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3032: LD_VAR 0 2
3036: PPUSH
3037: LD_INT 102
3039: PPUSH
3040: LD_INT 8
3042: PPUSH
3043: LD_INT 0
3045: PPUSH
3046: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3050: LD_VAR 0 2
3054: PPUSH
3055: LD_INT 110
3057: PPUSH
3058: LD_INT 60
3060: PPUSH
3061: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3065: LD_ADDR_EXP 29
3069: PUSH
3070: LD_EXP 29
3074: PUSH
3075: LD_VAR 0 2
3079: UNION
3080: ST_TO_ADDR
// end else
3081: GO 3218
// begin for i in eng do
3083: LD_ADDR_VAR 0 1
3087: PUSH
3088: LD_VAR 0 2
3092: PUSH
3093: FOR_IN
3094: IFFALSE 3216
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3096: LD_INT 10
3098: PPUSH
3099: LD_INT 1
3101: PPUSH
3102: CALL_OW 287
3106: IFFALSE 3130
// begin if IsInUnit ( i ) then
3108: LD_VAR 0 1
3112: PPUSH
3113: CALL_OW 310
3117: IFFALSE 3128
// ComExitBuilding ( i ) ;
3119: LD_VAR 0 1
3123: PPUSH
3124: CALL_OW 122
// end else
3128: GO 3214
// begin if damagedBuilding then
3130: LD_VAR 0 3
3134: IFFALSE 3178
// begin if IsInUnit ( i ) then
3136: LD_VAR 0 1
3140: PPUSH
3141: CALL_OW 310
3145: IFFALSE 3158
// ComExitBuilding ( i ) else
3147: LD_VAR 0 1
3151: PPUSH
3152: CALL_OW 122
3156: GO 3176
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3158: LD_VAR 0 1
3162: PPUSH
3163: LD_VAR 0 3
3167: PUSH
3168: LD_INT 1
3170: ARRAY
3171: PPUSH
3172: CALL_OW 130
// end else
3176: GO 3214
// if not IsInUnit ( i ) and not HasTask ( i ) then
3178: LD_VAR 0 1
3182: PPUSH
3183: CALL_OW 310
3187: NOT
3188: PUSH
3189: LD_VAR 0 1
3193: PPUSH
3194: CALL_OW 314
3198: NOT
3199: AND
3200: IFFALSE 3214
// ComEnterUnit ( i , arDepot ) ;
3202: LD_VAR 0 1
3206: PPUSH
3207: LD_INT 5
3209: PPUSH
3210: CALL_OW 120
// end ; end ;
3214: GO 3093
3216: POP
3217: POP
// end ; end ;
3218: PPOPN 3
3220: END
// export function StartCargoEvacuation ; begin
3221: LD_INT 0
3223: PPUSH
// while GetResourceType ( GetBase ( arDepot ) , mat_cans ) > 0 and omarCargoCounter > 0 do
3224: LD_INT 5
3226: PPUSH
3227: CALL_OW 274
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: CALL_OW 275
3239: PUSH
3240: LD_INT 0
3242: GREATER
3243: PUSH
3244: LD_EXP 17
3248: PUSH
3249: LD_INT 0
3251: GREATER
3252: AND
3253: IFFALSE 3545
// begin wait ( 1 1$20 ) ;
3255: LD_INT 2800
3257: PPUSH
3258: CALL_OW 67
// omarCargo := PrepareCargo ;
3262: LD_ADDR_EXP 33
3266: PUSH
3267: CALL 3550 0 0
3271: ST_TO_ADDR
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3272: LD_EXP 33
3276: PPUSH
3277: LD_INT 107
3279: PPUSH
3280: LD_INT 59
3282: PPUSH
3283: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3287: LD_INT 35
3289: PPUSH
3290: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3294: LD_EXP 33
3298: PPUSH
3299: LD_INT 107
3301: PPUSH
3302: LD_INT 59
3304: PPUSH
3305: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3309: LD_EXP 33
3313: PPUSH
3314: CALL_OW 302
3318: NOT
3319: PUSH
3320: LD_EXP 33
3324: PPUSH
3325: CALL_OW 301
3329: OR
3330: IFFALSE 3334
// continue ;
3332: GO 3287
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3334: LD_EXP 33
3338: PPUSH
3339: LD_INT 107
3341: PPUSH
3342: LD_INT 59
3344: PPUSH
3345: CALL_OW 307
3349: PUSH
3350: LD_EXP 33
3354: PPUSH
3355: LD_INT 5
3357: PPUSH
3358: CALL_OW 296
3362: PUSH
3363: LD_INT 6
3365: LESS
3366: OR
3367: IFFALSE 3287
// wait ( 0 0$05 ) ;
3369: LD_INT 175
3371: PPUSH
3372: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3376: LD_EXP 33
3380: PPUSH
3381: LD_INT 1
3383: PPUSH
3384: LD_INT 100
3386: PPUSH
3387: CALL_OW 290
// SetResourceType ( GetBase ( arDepot ) , mat_cans , GetResourceType ( GetBase ( arDepot ) , mat_cans ) - 100 ) ;
3391: LD_INT 5
3393: PPUSH
3394: CALL_OW 274
3398: PPUSH
3399: LD_INT 1
3401: PPUSH
3402: LD_INT 5
3404: PPUSH
3405: CALL_OW 274
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: CALL_OW 275
3417: PUSH
3418: LD_INT 100
3420: MINUS
3421: PPUSH
3422: CALL_OW 277
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3426: LD_EXP 33
3430: PPUSH
3431: LD_INT 103
3433: PPUSH
3434: LD_INT 9
3436: PPUSH
3437: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
3441: LD_INT 35
3443: PPUSH
3444: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3448: LD_EXP 33
3452: PPUSH
3453: LD_INT 103
3455: PPUSH
3456: LD_INT 9
3458: PPUSH
3459: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3463: LD_EXP 33
3467: PPUSH
3468: CALL_OW 302
3472: NOT
3473: PUSH
3474: LD_EXP 33
3478: PPUSH
3479: CALL_OW 301
3483: OR
3484: IFFALSE 3488
// continue ;
3486: GO 3441
// until IsInArea ( omarCargo , northRoad ) and GetCargo ( omarCargo , mat_cans ) > 0 ;
3488: LD_EXP 33
3492: PPUSH
3493: LD_INT 3
3495: PPUSH
3496: CALL_OW 308
3500: PUSH
3501: LD_EXP 33
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 289
3513: PUSH
3514: LD_INT 0
3516: GREATER
3517: AND
3518: IFFALSE 3441
// RemoveUnit ( omarCargo ) ;
3520: LD_EXP 33
3524: PPUSH
3525: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
3529: LD_ADDR_EXP 17
3533: PUSH
3534: LD_EXP 17
3538: PUSH
3539: LD_INT 1
3541: MINUS
3542: ST_TO_ADDR
// end ;
3543: GO 3224
// end ;
3545: LD_VAR 0 1
3549: RET
// export function PrepareCargo ; var un , veh ; begin
3550: LD_INT 0
3552: PPUSH
3553: PPUSH
3554: PPUSH
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3555: LD_INT 5
3557: PPUSH
3558: LD_INT 2
3560: PPUSH
3561: LD_INT 13
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: LD_INT 32
3572: PPUSH
3573: LD_INT 80
3575: PPUSH
3576: CALL 270 0 7
// veh := CreateVehicle ;
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: CALL_OW 45
3589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3590: LD_VAR 0 3
3594: PPUSH
3595: LD_INT 4
3597: PPUSH
3598: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_INT 101
3609: PPUSH
3610: LD_INT 8
3612: PPUSH
3613: LD_INT 0
3615: PPUSH
3616: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
3620: LD_INT 0
3622: PPUSH
3623: LD_INT 3
3625: PPUSH
3626: LD_INT 2
3628: PPUSH
3629: CALL_OW 380
// un := CreateHuman ;
3633: LD_ADDR_VAR 0 2
3637: PUSH
3638: CALL_OW 44
3642: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3643: LD_VAR 0 2
3647: PPUSH
3648: LD_VAR 0 3
3652: PPUSH
3653: CALL_OW 52
// result := veh ;
3657: LD_ADDR_VAR 0 1
3661: PUSH
3662: LD_VAR 0 3
3666: ST_TO_ADDR
// end ; end_of_file
3667: LD_VAR 0 1
3671: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
3672: LD_INT 0
3674: PPUSH
3675: PPUSH
3676: PPUSH
// usForces := [ ] ;
3677: LD_ADDR_EXP 34
3681: PUSH
3682: EMPTY
3683: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
3684: LD_ADDR_EXP 36
3688: PUSH
3689: LD_INT 6
3691: PUSH
3692: LD_INT 32
3694: PUSH
3695: LD_INT 27
3697: PUSH
3698: LD_INT 1
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 4
3709: PUSH
3710: LD_INT 43
3712: PUSH
3713: LD_INT 24
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: PUSH
3725: LD_INT 27
3727: PUSH
3728: LD_INT 29
3730: PUSH
3731: LD_INT 21
3733: PUSH
3734: LD_INT 0
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
3748: LD_INT 11
3750: PPUSH
3751: CALL_OW 274
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 150
3761: PUSH
3762: LD_INT 120
3764: PUSH
3765: LD_INT 100
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: PPUSH
3779: CALL_OW 277
// uc_side := 1 ;
3783: LD_ADDR_OWVAR 20
3787: PUSH
3788: LD_INT 1
3790: ST_TO_ADDR
// uc_nation := 1 ;
3791: LD_ADDR_OWVAR 21
3795: PUSH
3796: LD_INT 1
3798: ST_TO_ADDR
// hc_gallery :=  ;
3799: LD_ADDR_OWVAR 33
3803: PUSH
3804: LD_STRING 
3806: ST_TO_ADDR
// hc_name :=  ;
3807: LD_ADDR_OWVAR 26
3811: PUSH
3812: LD_STRING 
3814: ST_TO_ADDR
// hc_importance := 0 ;
3815: LD_ADDR_OWVAR 32
3819: PUSH
3820: LD_INT 0
3822: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 1
3828: PPUSH
3829: LD_INT 3
3831: PPUSH
3832: CALL_OW 380
// usCommander := CreateHuman ;
3836: LD_ADDR_EXP 35
3840: PUSH
3841: CALL_OW 44
3845: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3846: LD_EXP 35
3850: PPUSH
3851: LD_INT 11
3853: PPUSH
3854: CALL_OW 52
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3858: LD_ADDR_VAR 0 2
3862: PUSH
3863: DOUBLE
3864: LD_INT 1
3866: DEC
3867: ST_TO_ADDR
3868: LD_INT 2
3870: PUSH
3871: LD_INT 3
3873: PUSH
3874: LD_INT 4
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: LD_OWVAR 67
3886: ARRAY
3887: PUSH
3888: FOR_TO
3889: IFFALSE 4024
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
3891: LD_INT 0
3893: PPUSH
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 1
3899: PUSH
3900: LD_INT 2
3902: PUSH
3903: LD_INT 3
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: LIST
3910: PUSH
3911: LD_OWVAR 67
3915: ARRAY
3916: PPUSH
3917: CALL_OW 380
// un := CreateHuman ;
3921: LD_ADDR_VAR 0 3
3925: PUSH
3926: CALL_OW 44
3930: ST_TO_ADDR
// usForces := usForces union un ;
3931: LD_ADDR_EXP 34
3935: PUSH
3936: LD_EXP 34
3940: PUSH
3941: LD_VAR 0 3
3945: UNION
3946: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
3947: LD_VAR 0 3
3951: PPUSH
3952: LD_INT 39
3954: PPUSH
3955: LD_INT 24
3957: PPUSH
3958: LD_INT 4
3960: PPUSH
3961: LD_INT 0
3963: PPUSH
3964: CALL_OW 50
// if i < 3 then
3968: LD_VAR 0 2
3972: PUSH
3973: LD_INT 3
3975: LESS
3976: IFFALSE 4022
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
3978: LD_VAR 0 3
3982: PPUSH
3983: LD_INT 22
3985: PUSH
3986: LD_INT 1
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 30
3995: PUSH
3996: LD_INT 31
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: CALL_OW 69
4011: PUSH
4012: LD_VAR 0 2
4016: ARRAY
4017: PPUSH
4018: CALL_OW 120
// end ;
4022: GO 3888
4024: POP
4025: POP
// for i := 1 to 2 do
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: DOUBLE
4032: LD_INT 1
4034: DEC
4035: ST_TO_ADDR
4036: LD_INT 2
4038: PUSH
4039: FOR_TO
4040: IFFALSE 4104
// begin PrepareHuman ( false , 2 , 2 ) ;
4042: LD_INT 0
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: LD_INT 2
4050: PPUSH
4051: CALL_OW 380
// un := CreateHuman ;
4055: LD_ADDR_VAR 0 3
4059: PUSH
4060: CALL_OW 44
4064: ST_TO_ADDR
// usForces := usForces union un ;
4065: LD_ADDR_EXP 34
4069: PUSH
4070: LD_EXP 34
4074: PUSH
4075: LD_VAR 0 3
4079: UNION
4080: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4081: LD_VAR 0 3
4085: PPUSH
4086: LD_INT 39
4088: PPUSH
4089: LD_INT 24
4091: PPUSH
4092: LD_INT 4
4094: PPUSH
4095: LD_INT 0
4097: PPUSH
4098: CALL_OW 50
// end ;
4102: GO 4039
4104: POP
4105: POP
// PrepareHuman ( false , 4 , 1 ) ;
4106: LD_INT 0
4108: PPUSH
4109: LD_INT 4
4111: PPUSH
4112: LD_INT 1
4114: PPUSH
4115: CALL_OW 380
// un := CreateHuman ;
4119: LD_ADDR_VAR 0 3
4123: PUSH
4124: CALL_OW 44
4128: ST_TO_ADDR
// usForces := usForces union un ;
4129: LD_ADDR_EXP 34
4133: PUSH
4134: LD_EXP 34
4138: PUSH
4139: LD_VAR 0 3
4143: UNION
4144: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4145: LD_VAR 0 3
4149: PPUSH
4150: LD_INT 39
4152: PPUSH
4153: LD_INT 24
4155: PPUSH
4156: LD_INT 4
4158: PPUSH
4159: LD_INT 0
4161: PPUSH
4162: CALL_OW 50
// end ;
4166: LD_VAR 0 1
4170: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured do var i , b , eng , sol , sci ;
4171: LD_EXP 34
4175: PUSH
4176: LD_EXP 6
4180: NOT
4181: AND
4182: IFFALSE 4505
4184: GO 4186
4186: DISABLE
4187: LD_INT 0
4189: PPUSH
4190: PPUSH
4191: PPUSH
4192: PPUSH
4193: PPUSH
// begin enable ;
4194: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4195: LD_ADDR_VAR 0 3
4199: PUSH
4200: LD_EXP 34
4204: PPUSH
4205: LD_INT 25
4207: PUSH
4208: LD_INT 2
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PPUSH
4215: CALL_OW 72
4219: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4220: LD_ADDR_VAR 0 4
4224: PUSH
4225: LD_EXP 34
4229: PPUSH
4230: LD_INT 25
4232: PUSH
4233: LD_INT 1
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PPUSH
4240: CALL_OW 72
4244: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4245: LD_ADDR_VAR 0 5
4249: PUSH
4250: LD_EXP 34
4254: PPUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 4
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 72
4269: ST_TO_ADDR
// if eng then
4270: LD_VAR 0 3
4274: IFFALSE 4505
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4276: LD_ADDR_VAR 0 2
4280: PUSH
4281: LD_INT 22
4283: PUSH
4284: LD_INT 1
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PUSH
4291: LD_INT 21
4293: PUSH
4294: LD_INT 3
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: LD_INT 3
4303: PUSH
4304: LD_INT 24
4306: PUSH
4307: LD_INT 1000
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: PPUSH
4323: CALL_OW 69
4327: ST_TO_ADDR
// if b then
4328: LD_VAR 0 2
4332: IFFALSE 4363
// begin ComExitBuilding ( eng ) ;
4334: LD_VAR 0 3
4338: PPUSH
4339: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4343: LD_VAR 0 3
4347: PPUSH
4348: LD_VAR 0 2
4352: PUSH
4353: LD_INT 1
4355: ARRAY
4356: PPUSH
4357: CALL_OW 190
// end else
4361: GO 4505
// begin for i in eng do
4363: LD_ADDR_VAR 0 1
4367: PUSH
4368: LD_VAR 0 3
4372: PUSH
4373: FOR_IN
4374: IFFALSE 4503
// if not HasTask ( i ) then
4376: LD_VAR 0 1
4380: PPUSH
4381: CALL_OW 314
4385: NOT
4386: IFFALSE 4501
// begin if americanBuildList then
4388: LD_EXP 36
4392: IFFALSE 4477
// begin if IsInUnit ( i ) then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 310
4403: IFFALSE 4414
// ComExitBuilding ( i ) ;
4405: LD_VAR 0 1
4409: PPUSH
4410: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_EXP 36
4423: PUSH
4424: LD_INT 1
4426: ARRAY
4427: PUSH
4428: LD_INT 1
4430: ARRAY
4431: PPUSH
4432: LD_EXP 36
4436: PUSH
4437: LD_INT 1
4439: ARRAY
4440: PUSH
4441: LD_INT 2
4443: ARRAY
4444: PPUSH
4445: LD_EXP 36
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PUSH
4454: LD_INT 3
4456: ARRAY
4457: PPUSH
4458: LD_EXP 36
4462: PUSH
4463: LD_INT 1
4465: ARRAY
4466: PUSH
4467: LD_INT 4
4469: ARRAY
4470: PPUSH
4471: CALL_OW 205
// end else
4475: GO 4501
// if not IsInUnit ( i ) then
4477: LD_VAR 0 1
4481: PPUSH
4482: CALL_OW 310
4486: NOT
4487: IFFALSE 4501
// ComEnterUnit ( i , usDepot ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_INT 11
4496: PPUSH
4497: CALL_OW 120
// end ;
4501: GO 4373
4503: POP
4504: POP
// end ; end ; end ;
4505: PPOPN 5
4507: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
4508: LD_INT 0
4510: PPUSH
4511: PPUSH
4512: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
4513: LD_ADDR_VAR 0 3
4517: PUSH
4518: LD_INT 35
4520: PUSH
4521: LD_INT 45
4523: PUSH
4524: LD_INT 48
4526: PUSH
4527: LD_EXP 45
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: ST_TO_ADDR
// for i in tech do
4538: LD_ADDR_VAR 0 4
4542: PUSH
4543: LD_VAR 0 3
4547: PUSH
4548: FOR_IN
4549: IFFALSE 4567
// AddComResearch ( lab , i ) ;
4551: LD_VAR 0 1
4555: PPUSH
4556: LD_VAR 0 4
4560: PPUSH
4561: CALL_OW 184
4565: GO 4548
4567: POP
4568: POP
// end ;
4569: LD_VAR 0 2
4573: RET
// every 6 6$00 + 2 2$00 trigger americanBaseCaptured do
4574: LD_EXP 6
4578: IFFALSE 4588
4580: GO 4582
4582: DISABLE
// begin enable ;
4583: ENABLE
// SendConvoy ;
4584: CALL 4589 0 0
// end ;
4588: END
// export function SendConvoy ; begin
4589: LD_INT 0
4591: PPUSH
// end ;
4592: LD_VAR 0 1
4596: RET
// export function SendAttack ; begin
4597: LD_INT 0
4599: PPUSH
// IncomingAttack ;
4600: CALL 9626 0 0
// wait ( 1 1$30 ) ;
4604: LD_INT 3150
4606: PPUSH
4607: CALL_OW 67
// end ; end_of_file
4611: LD_VAR 0 1
4615: RET
// export function Action ; var hasAll , i , tmp ; begin
4616: LD_INT 0
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
4622: LD_ADDR_VAR 0 2
4626: PUSH
4627: LD_INT 22
4629: PUSH
4630: LD_INT 2
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: PUSH
4637: LD_INT 21
4639: PUSH
4640: LD_INT 1
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: PUSH
4647: LD_INT 23
4649: PUSH
4650: LD_INT 2
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: LIST
4661: PPUSH
4662: CALL_OW 69
4666: PUSH
4667: LD_INT 7
4669: GREATEREQUAL
4670: ST_TO_ADDR
// InGameOn ;
4671: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
4675: LD_EXP 19
4679: PPUSH
4680: CALL_OW 87
// wait ( 0 0$2 ) ;
4684: LD_INT 70
4686: PPUSH
4687: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
4691: LD_EXP 27
4695: PPUSH
4696: LD_STRING DF-1-start
4698: PPUSH
4699: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
4703: LD_EXP 19
4707: PPUSH
4708: LD_EXP 27
4712: PPUSH
4713: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
4717: LD_EXP 19
4721: PPUSH
4722: LD_STRING DH-1-start
4724: PPUSH
4725: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
4729: LD_EXP 28
4733: PPUSH
4734: LD_INT 92
4736: PPUSH
4737: LD_INT 21
4739: PPUSH
4740: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
4744: LD_EXP 23
4748: PPUSH
4749: LD_INT 94
4751: PPUSH
4752: LD_INT 23
4754: PPUSH
4755: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
4759: LD_EXP 30
4763: PUSH
4764: LD_INT 1
4766: ARRAY
4767: PPUSH
4768: LD_INT 90
4770: PPUSH
4771: LD_INT 23
4773: PPUSH
4774: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
4778: LD_EXP 30
4782: PUSH
4783: LD_INT 2
4785: ARRAY
4786: PPUSH
4787: LD_INT 93
4789: PPUSH
4790: LD_INT 25
4792: PPUSH
4793: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
4797: LD_EXP 30
4801: PPUSH
4802: LD_EXP 28
4806: PPUSH
4807: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
4811: LD_EXP 28
4815: PUSH
4816: LD_EXP 23
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PPUSH
4825: LD_EXP 19
4829: PPUSH
4830: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
4834: LD_EXP 19
4838: PPUSH
4839: LD_EXP 28
4843: PPUSH
4844: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4848: LD_INT 35
4850: PPUSH
4851: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
4855: LD_EXP 28
4859: PPUSH
4860: LD_INT 92
4862: PPUSH
4863: LD_INT 21
4865: PPUSH
4866: CALL_OW 307
4870: IFFALSE 4848
// Say ( Omar , DO-1-start ) ;
4872: LD_EXP 28
4876: PPUSH
4877: LD_STRING DO-1-start
4879: PPUSH
4880: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4884: LD_EXP 19
4888: PPUSH
4889: LD_STRING DH-2-start
4891: PPUSH
4892: CALL_OW 88
// if hasAll then
4896: LD_VAR 0 2
4900: IFFALSE 5028
// begin Say ( Omar , DO-2-start ) ;
4902: LD_EXP 28
4906: PPUSH
4907: LD_STRING DO-2-start
4909: PPUSH
4910: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
4914: LD_EXP 28
4918: PPUSH
4919: LD_STRING DO-3-start
4921: PPUSH
4922: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4926: LD_EXP 19
4930: PPUSH
4931: LD_STRING DH-3-start
4933: PPUSH
4934: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
4938: LD_EXP 27
4942: PPUSH
4943: LD_STRING DF-2-start
4945: PPUSH
4946: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
4950: LD_EXP 28
4954: PPUSH
4955: LD_EXP 27
4959: PPUSH
4960: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
4964: LD_EXP 28
4968: PPUSH
4969: LD_STRING DO-4-start
4971: PPUSH
4972: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
4976: LD_EXP 27
4980: PPUSH
4981: LD_STRING DF-3-start
4983: PPUSH
4984: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
4988: LD_EXP 28
4992: PPUSH
4993: LD_STRING DO-5-start
4995: PPUSH
4996: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
5000: LD_EXP 27
5004: PPUSH
5005: LD_STRING DF-4-start
5007: PPUSH
5008: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
5012: LD_EXP 28
5016: PPUSH
5017: LD_EXP 19
5021: PPUSH
5022: CALL_OW 119
// end else
5026: GO 5128
// begin Say ( Omar , DO-2-start-a ) ;
5028: LD_EXP 28
5032: PPUSH
5033: LD_STRING DO-2-start-a
5035: PPUSH
5036: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
5040: LD_EXP 28
5044: PPUSH
5045: LD_STRING DO-3-start-a
5047: PPUSH
5048: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
5052: LD_EXP 19
5056: PPUSH
5057: LD_STRING DH-3-start-a
5059: PPUSH
5060: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
5064: LD_EXP 27
5068: PPUSH
5069: LD_STRING DF-2-start-a
5071: PPUSH
5072: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
5076: LD_EXP 28
5080: PPUSH
5081: LD_EXP 27
5085: PPUSH
5086: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
5090: LD_EXP 28
5094: PPUSH
5095: LD_STRING DO-4-start-a
5097: PPUSH
5098: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
5102: LD_EXP 27
5106: PPUSH
5107: LD_STRING DF-3-start-a
5109: PPUSH
5110: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
5114: LD_EXP 28
5118: PPUSH
5119: LD_EXP 19
5123: PPUSH
5124: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
5128: LD_INT 10
5130: PPUSH
5131: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
5135: LD_EXP 28
5139: PPUSH
5140: LD_STRING DO-1-mission
5142: PPUSH
5143: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
5147: LD_EXP 28
5151: PPUSH
5152: LD_STRING DO-2-mission
5154: PPUSH
5155: CALL_OW 88
// if not hasAll then
5159: LD_VAR 0 2
5163: NOT
5164: IFFALSE 5178
// Say ( Omar , DO-3-mission ) ;
5166: LD_EXP 28
5170: PPUSH
5171: LD_STRING DO-3-mission
5173: PPUSH
5174: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
5178: LD_EXP 28
5182: PPUSH
5183: LD_STRING DO-4-mission
5185: PPUSH
5186: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
5190: LD_EXP 19
5194: PPUSH
5195: LD_STRING DH-1-mission
5197: PPUSH
5198: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
5202: LD_EXP 27
5206: PPUSH
5207: LD_STRING DF-1-mission
5209: PPUSH
5210: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
5214: LD_EXP 28
5218: PPUSH
5219: LD_STRING DO-5-mission
5221: PPUSH
5222: CALL_OW 88
// if not hasAll then
5226: LD_VAR 0 2
5230: NOT
5231: IFFALSE 5346
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
5233: LD_ADDR_VAR 0 4
5237: PUSH
5238: LD_INT 22
5240: PUSH
5241: LD_INT 2
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 21
5250: PUSH
5251: LD_INT 1
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: LD_INT 23
5260: PUSH
5261: LD_INT 2
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PPUSH
5273: CALL_OW 69
5277: ST_TO_ADDR
// for i := 7 downto tmp do
5278: LD_ADDR_VAR 0 3
5282: PUSH
5283: DOUBLE
5284: LD_INT 7
5286: INC
5287: ST_TO_ADDR
5288: LD_VAR 0 4
5292: PUSH
5293: FOR_DOWNTO
5294: IFFALSE 5344
// begin if omarSquad < 3 then
5296: LD_EXP 30
5300: PUSH
5301: LD_INT 3
5303: LESS
5304: IFFALSE 5308
// break ;
5306: GO 5344
// SetSide ( omarSquad [ 3 ] , 2 ) ;
5308: LD_EXP 30
5312: PUSH
5313: LD_INT 3
5315: ARRAY
5316: PPUSH
5317: LD_INT 2
5319: PPUSH
5320: CALL_OW 235
// omarSquad := Delete ( omarSquad , 3 ) ;
5324: LD_ADDR_EXP 30
5328: PUSH
5329: LD_EXP 30
5333: PPUSH
5334: LD_INT 3
5336: PPUSH
5337: CALL_OW 3
5341: ST_TO_ADDR
// end ;
5342: GO 5293
5344: POP
5345: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
5346: LD_EXP 28
5350: PUSH
5351: LD_EXP 30
5355: ADD
5356: PPUSH
5357: LD_INT 103
5359: PPUSH
5360: LD_INT 9
5362: PPUSH
5363: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
5367: LD_VAR 0 2
5371: PUSH
5372: LD_EXP 24
5376: PPUSH
5377: CALL_OW 302
5381: AND
5382: IFFALSE 5443
// begin wait ( 0 0$3 ) ;
5384: LD_INT 105
5386: PPUSH
5387: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
5391: LD_EXP 24
5395: PPUSH
5396: LD_EXP 27
5400: PPUSH
5401: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
5405: LD_EXP 24
5409: PPUSH
5410: LD_STRING DK-1-side
5412: PPUSH
5413: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
5417: LD_EXP 27
5421: PPUSH
5422: LD_EXP 24
5426: PPUSH
5427: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
5431: LD_EXP 27
5435: PPUSH
5436: LD_STRING DF-1-side
5438: PPUSH
5439: CALL_OW 88
// end ; InGameOff ;
5443: CALL_OW 9
// ChangeMissionObjectives ( BuildBase ) ;
5447: LD_STRING BuildBase
5449: PPUSH
5450: CALL_OW 337
// ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
5454: LD_INT 22
5456: PUSH
5457: LD_INT 2
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PPUSH
5464: CALL_OW 69
5468: PPUSH
5469: CALL_OW 139
// SaveForQuickRestart ;
5473: CALL_OW 22
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
5477: LD_EXP 27
5481: PUSH
5482: LD_EXP 29
5486: ADD
5487: PPUSH
5488: LD_INT 108
5490: PPUSH
5491: LD_INT 62
5493: PPUSH
5494: CALL_OW 111
// gameStarted := true ;
5498: LD_ADDR_EXP 3
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// end ;
5506: LD_VAR 0 1
5510: RET
// every 0 0$3 trigger gameStarted do
5511: LD_EXP 3
5515: IFFALSE 5829
5517: GO 5519
5519: DISABLE
// begin Video ( true ) ;
5520: LD_INT 1
5522: PPUSH
5523: CALL 930 0 1
// CenterOnUnits ( Heike ) ;
5527: LD_EXP 19
5531: PPUSH
5532: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
5536: LD_EXP 19
5540: PPUSH
5541: LD_EXP 23
5545: PPUSH
5546: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
5550: LD_INT 22
5552: PUSH
5553: LD_INT 2
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: PPUSH
5560: CALL_OW 69
5564: PUSH
5565: LD_EXP 19
5569: DIFF
5570: PPUSH
5571: LD_EXP 19
5575: PPUSH
5576: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
5580: LD_EXP 19
5584: PPUSH
5585: LD_STRING DH-1-explore
5587: PPUSH
5588: CALL_OW 88
// if Givi then
5592: LD_EXP 20
5596: IFFALSE 5612
// Say ( Givi , DG-1-explore ) else
5598: LD_EXP 20
5602: PPUSH
5603: LD_STRING DG-1-explore
5605: PPUSH
5606: CALL_OW 88
5610: GO 5649
// if heikeSecondSquad then
5612: LD_EXP 32
5616: IFFALSE 5649
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
5618: LD_EXP 32
5622: PPUSH
5623: LD_INT 26
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PPUSH
5633: CALL_OW 72
5637: PUSH
5638: LD_INT 1
5640: ARRAY
5641: PPUSH
5642: LD_STRING DArm-1-explore
5644: PPUSH
5645: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
5649: LD_EXP 23
5653: PPUSH
5654: LD_STRING DA-1-explore
5656: PPUSH
5657: CALL_OW 88
// if Sophia then
5661: LD_EXP 25
5665: IFFALSE 5743
// begin Say ( Sophia , DS-2-explore ) ;
5667: LD_EXP 25
5671: PPUSH
5672: LD_STRING DS-2-explore
5674: PPUSH
5675: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
5679: LD_EXP 23
5683: PPUSH
5684: LD_STRING DA-2-explore
5686: PPUSH
5687: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
5691: LD_EXP 25
5695: PPUSH
5696: LD_EXP 23
5700: PPUSH
5701: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
5705: LD_EXP 23
5709: PPUSH
5710: LD_EXP 25
5714: PPUSH
5715: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
5719: LD_EXP 25
5723: PPUSH
5724: LD_STRING DS-3-explore
5726: PPUSH
5727: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
5731: LD_EXP 23
5735: PPUSH
5736: LD_STRING DA-3-explore
5738: PPUSH
5739: CALL_OW 88
// end ; if Mike then
5743: LD_EXP 21
5747: IFFALSE 5803
// begin Say ( Mike , DM-1-explore ) ;
5749: LD_EXP 21
5753: PPUSH
5754: LD_STRING DM-1-explore
5756: PPUSH
5757: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
5761: LD_EXP 19
5765: PPUSH
5766: LD_STRING DH-2-explore
5768: PPUSH
5769: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
5773: LD_EXP 21
5777: PPUSH
5778: LD_STRING DM-2-explore
5780: PPUSH
5781: CALL_OW 88
// if Kaia then
5785: LD_EXP 24
5789: IFFALSE 5803
// Say ( Kaia , DK-1-explore ) ;
5791: LD_EXP 24
5795: PPUSH
5796: LD_STRING DK-1-explore
5798: PPUSH
5799: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
5803: LD_INT 22
5805: PUSH
5806: LD_INT 2
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PPUSH
5813: CALL_OW 69
5817: PPUSH
5818: CALL_OW 139
// Video ( false ) ;
5822: LD_INT 0
5824: PPUSH
5825: CALL 930 0 1
// end ;
5829: END
// every 0 0$1 trigger not americanBaseSpoted and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
5830: LD_EXP 5
5834: NOT
5835: PUSH
5836: LD_INT 5
5838: PPUSH
5839: LD_INT 22
5841: PUSH
5842: LD_INT 2
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: PPUSH
5849: CALL_OW 70
5853: AND
5854: PUSH
5855: LD_EXP 6
5859: NOT
5860: AND
5861: IFFALSE 5946
5863: GO 5865
5865: DISABLE
// begin if Mike then
5866: LD_EXP 21
5870: IFFALSE 5886
// Say ( Mike , DM-1-scout ) else
5872: LD_EXP 21
5876: PPUSH
5877: LD_STRING DM-1-scout
5879: PPUSH
5880: CALL_OW 88
5884: GO 5917
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
5886: LD_EXP 32
5890: PPUSH
5891: LD_INT 26
5893: PUSH
5894: LD_INT 1
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PPUSH
5901: CALL_OW 72
5905: PUSH
5906: LD_INT 1
5908: ARRAY
5909: PPUSH
5910: LD_STRING DArm-1-explore
5912: PPUSH
5913: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
5917: LD_INT 54
5919: PPUSH
5920: LD_INT 35
5922: PPUSH
5923: LD_INT 2
5925: PPUSH
5926: LD_INT 1
5928: PPUSH
5929: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
5933: LD_INT 54
5935: PPUSH
5936: LD_INT 35
5938: PPUSH
5939: LD_INT 2
5941: PPUSH
5942: CALL_OW 331
// end ;
5946: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) do var randomMen , randomWomen , speakerOk ;
5947: LD_INT 6
5949: PPUSH
5950: LD_INT 22
5952: PUSH
5953: LD_INT 2
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PPUSH
5960: CALL_OW 70
5964: IFFALSE 6189
5966: GO 5968
5968: DISABLE
5969: LD_INT 0
5971: PPUSH
5972: PPUSH
5973: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
5974: LD_ADDR_VAR 0 1
5978: PUSH
5979: LD_EXP 32
5983: PPUSH
5984: LD_INT 26
5986: PUSH
5987: LD_INT 1
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: PPUSH
5994: CALL_OW 72
5998: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
5999: LD_ADDR_VAR 0 2
6003: PUSH
6004: LD_EXP 32
6008: PPUSH
6009: LD_INT 26
6011: PUSH
6012: LD_INT 2
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PPUSH
6019: CALL_OW 72
6023: ST_TO_ADDR
// DialogueOn ;
6024: CALL_OW 6
// dwait ( 0 0$1 ) ;
6028: LD_INT 35
6030: PPUSH
6031: CALL_OW 68
// speakerOk := false ;
6035: LD_ADDR_VAR 0 3
6039: PUSH
6040: LD_INT 0
6042: ST_TO_ADDR
// if Mike then
6043: LD_EXP 21
6047: IFFALSE 6069
// speakerOk := Say ( Mike , DM-1-spot ) else
6049: LD_ADDR_VAR 0 3
6053: PUSH
6054: LD_EXP 21
6058: PPUSH
6059: LD_STRING DM-1-spot
6061: PPUSH
6062: CALL_OW 88
6066: ST_TO_ADDR
6067: GO 6097
// if randomMen then
6069: LD_VAR 0 1
6073: IFFALSE 6097
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
6075: LD_ADDR_VAR 0 3
6079: PUSH
6080: LD_VAR 0 1
6084: PUSH
6085: LD_INT 1
6087: ARRAY
6088: PPUSH
6089: LD_STRING DArm-1-spot-a
6091: PPUSH
6092: CALL_OW 88
6096: ST_TO_ADDR
// if speakerOk then
6097: LD_VAR 0 3
6101: IFFALSE 6145
// begin if Givi then
6103: LD_EXP 20
6107: IFFALSE 6123
// Say ( Givi , DG-1-spot ) else
6109: LD_EXP 20
6113: PPUSH
6114: LD_STRING DG-1-spot
6116: PPUSH
6117: CALL_OW 88
6121: GO 6145
// if randomWomen then
6123: LD_VAR 0 2
6127: IFFALSE 6145
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
6129: LD_VAR 0 2
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: LD_STRING DArf-1-spot-a
6140: PPUSH
6141: CALL_OW 88
// end ; if Mike then
6145: LD_EXP 21
6149: IFFALSE 6165
// Say ( Heike , DH-1-spot ) else
6151: LD_EXP 19
6155: PPUSH
6156: LD_STRING DH-1-spot
6158: PPUSH
6159: CALL_OW 88
6163: GO 6177
// Say ( Heike , DH-1-spot-a ) ;
6165: LD_EXP 19
6169: PPUSH
6170: LD_STRING DH-1-spot-a
6172: PPUSH
6173: CALL_OW 88
// DialogueOff ;
6177: CALL_OW 7
// americanBaseSpoted := true ;
6181: LD_ADDR_EXP 5
6185: PUSH
6186: LD_INT 1
6188: ST_TO_ADDR
// end ;
6189: PPOPN 3
6191: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
6192: LD_EXP 5
6196: NOT
6197: PUSH
6198: LD_INT 22
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 101
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PPUSH
6222: CALL_OW 69
6226: AND
6227: PUSH
6228: LD_EXP 6
6232: NOT
6233: AND
6234: IFFALSE 6320
6236: GO 6238
6238: DISABLE
6239: LD_INT 0
6241: PPUSH
// begin americanBaseSpoted := true ;
6242: LD_ADDR_EXP 5
6246: PUSH
6247: LD_INT 1
6249: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
6250: LD_ADDR_VAR 0 1
6254: PUSH
6255: LD_EXP 32
6259: PPUSH
6260: LD_INT 26
6262: PUSH
6263: LD_INT 1
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 72
6274: ST_TO_ADDR
// if not randomMen then
6275: LD_VAR 0 1
6279: NOT
6280: IFFALSE 6284
// exit ;
6282: GO 6320
// DialogueOn ;
6284: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
6288: LD_VAR 0 1
6292: PUSH
6293: LD_INT 1
6295: ARRAY
6296: PPUSH
6297: LD_STRING DArm-1-spot-a
6299: PPUSH
6300: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
6304: LD_EXP 19
6308: PPUSH
6309: LD_STRING DH-1-spot-a
6311: PPUSH
6312: CALL_OW 88
// DialogueOff ;
6316: CALL_OW 7
// end ;
6320: PPOPN 1
6322: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 do var i , p ;
6323: LD_INT 11
6325: PPUSH
6326: CALL_OW 255
6330: PUSH
6331: LD_INT 2
6333: EQUAL
6334: PUSH
6335: LD_INT 22
6337: PUSH
6338: LD_INT 1
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 3
6347: PUSH
6348: LD_INT 50
6350: PUSH
6351: EMPTY
6352: LIST
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: LD_INT 30
6360: PUSH
6361: LD_INT 31
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: PPUSH
6373: CALL_OW 69
6377: OR
6378: PUSH
6379: LD_INT 7
6381: PPUSH
6382: LD_INT 22
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PPUSH
6392: CALL_OW 70
6396: PUSH
6397: LD_INT 1
6399: GREATER
6400: OR
6401: IFFALSE 6857
6403: GO 6405
6405: DISABLE
6406: LD_INT 0
6408: PPUSH
6409: PPUSH
// begin americanBaseCaptured := true ;
6410: LD_ADDR_EXP 6
6414: PUSH
6415: LD_INT 1
6417: ST_TO_ADDR
// wait ( 0 0$2 ) ;
6418: LD_INT 70
6420: PPUSH
6421: CALL_OW 67
// if IsOk ( usCommander ) then
6425: LD_EXP 35
6429: PPUSH
6430: CALL_OW 302
6434: IFFALSE 6464
// begin usForces := usForces union usCommander ;
6436: LD_ADDR_EXP 34
6440: PUSH
6441: LD_EXP 34
6445: PUSH
6446: LD_EXP 35
6450: UNION
6451: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
6452: LD_EXP 35
6456: PPUSH
6457: LD_STRING DUsm-1-assault
6459: PPUSH
6460: CALL_OW 88
// end ; for i in usForces do
6464: LD_ADDR_VAR 0 1
6468: PUSH
6469: LD_EXP 34
6473: PUSH
6474: FOR_IN
6475: IFFALSE 6514
// begin if IsInUnit ( i ) then
6477: LD_VAR 0 1
6481: PPUSH
6482: CALL_OW 310
6486: IFFALSE 6497
// ComExitBuilding ( i ) ;
6488: LD_VAR 0 1
6492: PPUSH
6493: CALL_OW 122
// AddComMoveXY ( i , 34 , 67 ) ;
6497: LD_VAR 0 1
6501: PPUSH
6502: LD_INT 34
6504: PPUSH
6505: LD_INT 67
6507: PPUSH
6508: CALL_OW 171
// end ;
6512: GO 6474
6514: POP
6515: POP
// Say ( Heike , DH-1-assault ) ;
6516: LD_EXP 19
6520: PPUSH
6521: LD_STRING DH-1-assault
6523: PPUSH
6524: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6528: LD_INT 35
6530: PPUSH
6531: CALL_OW 67
// until not usForces ;
6535: LD_EXP 34
6539: NOT
6540: IFFALSE 6528
// if not americanHasEscaped then
6542: LD_EXP 7
6546: NOT
6547: IFFALSE 6561
// Say ( Heike , DH-2-assault ) ;
6549: LD_EXP 19
6553: PPUSH
6554: LD_STRING DH-2-assault
6556: PPUSH
6557: CALL_OW 88
// wait ( 0 0$2 ) ;
6561: LD_INT 70
6563: PPUSH
6564: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6568: LD_INT 35
6570: PPUSH
6571: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
6575: LD_INT 22
6577: PUSH
6578: LD_INT 2
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PUSH
6585: LD_INT 21
6587: PUSH
6588: LD_INT 1
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PUSH
6595: LD_INT 3
6597: PUSH
6598: LD_INT 50
6600: PUSH
6601: EMPTY
6602: LIST
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PPUSH
6613: CALL_OW 69
6617: NOT
6618: IFFALSE 6568
// Video ( true ) ;
6620: LD_INT 1
6622: PPUSH
6623: CALL 930 0 1
// if not GetSide ( usDepot ) = 2 then
6627: LD_INT 11
6629: PPUSH
6630: CALL_OW 255
6634: PUSH
6635: LD_INT 2
6637: EQUAL
6638: NOT
6639: IFFALSE 6651
// SetSide ( usDepot , 2 ) ;
6641: LD_INT 11
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
6651: LD_INT 35
6653: PPUSH
6654: LD_INT 22
6656: PPUSH
6657: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
6661: LD_EXP 19
6665: PPUSH
6666: LD_INT 35
6668: PPUSH
6669: LD_INT 22
6671: PPUSH
6672: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
6676: LD_EXP 19
6680: PPUSH
6681: LD_INT 38
6683: PPUSH
6684: LD_INT 25
6686: PPUSH
6687: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
6691: LD_EXP 31
6695: PUSH
6696: LD_EXP 32
6700: UNION
6701: PPUSH
6702: LD_INT 39
6704: PPUSH
6705: LD_INT 26
6707: PPUSH
6708: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
6712: LD_EXP 31
6716: PUSH
6717: LD_EXP 32
6721: UNION
6722: PPUSH
6723: LD_EXP 19
6727: PPUSH
6728: CALL_OW 179
// p := 0 ;
6732: LD_ADDR_VAR 0 2
6736: PUSH
6737: LD_INT 0
6739: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6740: LD_INT 35
6742: PPUSH
6743: CALL_OW 67
// p := p + 1 ;
6747: LD_ADDR_VAR 0 2
6751: PUSH
6752: LD_VAR 0 2
6756: PUSH
6757: LD_INT 1
6759: PLUS
6760: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
6761: LD_EXP 19
6765: PPUSH
6766: CALL_OW 314
6770: NOT
6771: PUSH
6772: LD_VAR 0 2
6776: PUSH
6777: LD_INT 10
6779: GREATER
6780: OR
6781: IFFALSE 6740
// Say ( Heike , DH-1-capture ) ;
6783: LD_EXP 19
6787: PPUSH
6788: LD_STRING DH-1-capture
6790: PPUSH
6791: CALL_OW 88
// if Markov then
6795: LD_EXP 26
6799: IFFALSE 6813
// Say ( Markov , DMar-1-capture ) ;
6801: LD_EXP 26
6805: PPUSH
6806: LD_STRING DMar-1-capture
6808: PPUSH
6809: CALL_OW 88
// if Sophia then
6813: LD_EXP 25
6817: IFFALSE 6843
// begin Say ( Heike , DH-2-capture ) ;
6819: LD_EXP 19
6823: PPUSH
6824: LD_STRING DH-2-capture
6826: PPUSH
6827: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
6831: LD_EXP 25
6835: PPUSH
6836: LD_STRING DS-1-capture
6838: PPUSH
6839: CALL_OW 88
// end ; Video ( false ) ;
6843: LD_INT 0
6845: PPUSH
6846: CALL 930 0 1
// ChangeMissionObjectives ( ConstructBase ) ;
6850: LD_STRING ConstructBase
6852: PPUSH
6853: CALL_OW 337
// end ;
6857: PPOPN 2
6859: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
6860: LD_INT 22
6862: PUSH
6863: LD_INT 2
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 30
6872: PUSH
6873: LD_INT 2
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: LD_INT 57
6885: PUSH
6886: EMPTY
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PPUSH
6898: CALL_OW 69
6902: IFFALSE 6993
6904: GO 6906
6906: DISABLE
// begin workshopBuilded := true ;
6907: LD_ADDR_EXP 9
6911: PUSH
6912: LD_INT 1
6914: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructVeh ) ;
6915: LD_STRING ConstructVeh
6917: PPUSH
6918: CALL_OW 337
// if not IsOk ( Markov ) then
6922: LD_EXP 26
6926: PPUSH
6927: CALL_OW 302
6931: NOT
6932: IFFALSE 6936
// exit ;
6934: GO 6993
// Say ( Heike , DH-1-shop ) ;
6936: LD_EXP 19
6940: PPUSH
6941: LD_STRING DH-1-shop
6943: PPUSH
6944: CALL_OW 88
// if not ( GetTech ( 2 , tech_OilEng ) = state_researched and GetTech ( 2 , tech_SolEng ) = state_researched ) then
6948: LD_INT 2
6950: PPUSH
6951: LD_INT 47
6953: PPUSH
6954: CALL_OW 321
6958: PUSH
6959: LD_INT 2
6961: EQUAL
6962: PUSH
6963: LD_INT 2
6965: PPUSH
6966: LD_INT 45
6968: PPUSH
6969: CALL_OW 321
6973: PUSH
6974: LD_INT 2
6976: EQUAL
6977: AND
6978: NOT
6979: IFFALSE 6993
// Say ( Markov , DMar-1-shop-a ) ;
6981: LD_EXP 26
6985: PPUSH
6986: LD_STRING DMar-1-shop-a
6988: PPUSH
6989: CALL_OW 88
// end ;
6993: END
// every 0 0$1 trigger IsOk ( Markov ) and workshopBuilded and GetTech ( 2 , tech_OilEng ) = state_researched and GetTech ( 2 , tech_SolEng ) = state_researched do
6994: LD_EXP 26
6998: PPUSH
6999: CALL_OW 302
7003: PUSH
7004: LD_EXP 9
7008: AND
7009: PUSH
7010: LD_INT 2
7012: PPUSH
7013: LD_INT 47
7015: PPUSH
7016: CALL_OW 321
7020: PUSH
7021: LD_INT 2
7023: EQUAL
7024: AND
7025: PUSH
7026: LD_INT 2
7028: PPUSH
7029: LD_INT 45
7031: PPUSH
7032: CALL_OW 321
7036: PUSH
7037: LD_INT 2
7039: EQUAL
7040: AND
7041: IFFALSE 7162
7043: GO 7045
7045: DISABLE
// begin DialogueOn ;
7046: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
7050: LD_EXP 26
7054: PPUSH
7055: LD_STRING DMar-1-shop
7057: PPUSH
7058: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
7062: LD_EXP 19
7066: PPUSH
7067: LD_STRING DH-1-shop
7069: PPUSH
7070: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
7074: LD_EXP 26
7078: PPUSH
7079: LD_STRING DMar-2-shop
7081: PPUSH
7082: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
7086: LD_EXP 26
7090: PPUSH
7091: LD_STRING DMar-3-shop
7093: PPUSH
7094: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
7098: LD_EXP 19
7102: PPUSH
7103: LD_STRING DH-2-shop
7105: PPUSH
7106: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
7110: LD_EXP 26
7114: PPUSH
7115: LD_STRING DMar-4-shop
7117: PPUSH
7118: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
7122: LD_EXP 19
7126: PPUSH
7127: LD_STRING DH-3-shop
7129: PPUSH
7130: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
7134: LD_EXP 26
7138: PPUSH
7139: LD_STRING DMar-5-shop
7141: PPUSH
7142: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
7146: LD_EXP 19
7150: PPUSH
7151: LD_STRING DH-4-shop
7153: PPUSH
7154: CALL_OW 88
// DialogueOff ;
7158: CALL_OW 7
// end ;
7162: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
7163: LD_EXP 26
7167: PPUSH
7168: CALL_OW 302
7172: PUSH
7173: LD_INT 22
7175: PUSH
7176: LD_INT 2
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 2
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: LD_INT 22
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 35
7198: PUSH
7199: LD_INT 22
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 69
7219: AND
7220: IFFALSE 7327
7222: GO 7224
7224: DISABLE
// begin DialogueOn ;
7225: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
7229: LD_INT 22
7231: PUSH
7232: LD_INT 2
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 2
7241: PUSH
7242: LD_INT 34
7244: PUSH
7245: LD_INT 22
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 35
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: PPUSH
7276: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
7280: LD_INT 10
7282: PPUSH
7283: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
7287: LD_EXP 19
7291: PPUSH
7292: LD_STRING DH-1-bal
7294: PPUSH
7295: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
7299: LD_EXP 26
7303: PPUSH
7304: LD_STRING DMar-1-bal
7306: PPUSH
7307: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
7311: LD_EXP 19
7315: PPUSH
7316: LD_STRING DH-2-bal
7318: PPUSH
7319: CALL_OW 88
// DialogueOff ;
7323: CALL_OW 7
// end ;
7327: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
7328: LD_EXP 23
7332: PPUSH
7333: CALL_OW 302
7337: PUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 30
7350: PUSH
7351: LD_INT 6
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 69
7366: AND
7367: IFFALSE 7428
7369: GO 7371
7371: DISABLE
// begin DialogueOn ;
7372: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
7376: LD_EXP 23
7380: PPUSH
7381: LD_STRING DA-1-lab
7383: PPUSH
7384: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
7388: LD_EXP 19
7392: PPUSH
7393: LD_STRING DH-1-lab
7395: PPUSH
7396: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
7400: LD_EXP 23
7404: PPUSH
7405: LD_STRING DA-2-lab
7407: PPUSH
7408: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
7412: LD_EXP 19
7416: PPUSH
7417: LD_STRING DH-2-lab
7419: PPUSH
7420: CALL_OW 88
// DialogueOff ;
7424: CALL_OW 7
// end ;
7428: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) do var ape ;
7429: LD_EXP 24
7433: PPUSH
7434: CALL_OW 302
7438: PUSH
7439: LD_INT 22
7441: PUSH
7442: LD_INT 2
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: LD_INT 25
7451: PUSH
7452: LD_INT 15
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PPUSH
7463: CALL_OW 69
7467: AND
7468: IFFALSE 7648
7470: GO 7472
7472: DISABLE
7473: LD_INT 0
7475: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
7476: LD_ADDR_VAR 0 1
7480: PUSH
7481: LD_INT 22
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 25
7493: PUSH
7494: LD_INT 15
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PPUSH
7505: CALL_OW 69
7509: ST_TO_ADDR
// Video ( true ) ;
7510: LD_INT 1
7512: PPUSH
7513: CALL 930 0 1
// CenterNowOnUnits ( ape [ 1 ] ) ;
7517: LD_VAR 0 1
7521: PUSH
7522: LD_INT 1
7524: ARRAY
7525: PPUSH
7526: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
7530: LD_VAR 0 1
7534: PUSH
7535: LD_INT 1
7537: ARRAY
7538: PPUSH
7539: CALL_OW 122
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
7543: LD_VAR 0 1
7547: PUSH
7548: LD_INT 1
7550: ARRAY
7551: PPUSH
7552: LD_INT 35
7554: PPUSH
7555: LD_INT 28
7557: PPUSH
7558: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
7562: LD_VAR 0 1
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: LD_INT 36
7573: PPUSH
7574: LD_INT 17
7576: PPUSH
7577: CALL_OW 171
// Say ( Kaia , DK-1-apesol ) ;
7581: LD_EXP 24
7585: PPUSH
7586: LD_STRING DK-1-apesol
7588: PPUSH
7589: CALL_OW 88
// Say ( Aviradze , DA-1-apesol ) ;
7593: LD_EXP 23
7597: PPUSH
7598: LD_STRING DA-1-apesol
7600: PPUSH
7601: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
7605: LD_EXP 24
7609: PPUSH
7610: LD_STRING DK-2-apesol
7612: PPUSH
7613: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
7617: LD_EXP 23
7621: PPUSH
7622: LD_STRING DA-2-apesol
7624: PPUSH
7625: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
7629: LD_EXP 24
7633: PPUSH
7634: LD_STRING DK-3-apesol
7636: PPUSH
7637: CALL_OW 88
// Video ( false ) ;
7641: LD_INT 0
7643: PPUSH
7644: CALL 930 0 1
// end ;
7648: PPOPN 1
7650: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) do var ape ;
7651: LD_EXP 25
7655: PPUSH
7656: CALL_OW 302
7660: PUSH
7661: LD_INT 22
7663: PUSH
7664: LD_INT 2
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 25
7673: PUSH
7674: LD_INT 16
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PPUSH
7685: CALL_OW 69
7689: AND
7690: IFFALSE 7962
7692: GO 7694
7694: DISABLE
7695: LD_INT 0
7697: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
7698: LD_ADDR_VAR 0 1
7702: PUSH
7703: LD_INT 22
7705: PUSH
7706: LD_INT 2
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 25
7715: PUSH
7716: LD_INT 16
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PPUSH
7727: CALL_OW 69
7731: ST_TO_ADDR
// Video ( true ) ;
7732: LD_INT 1
7734: PPUSH
7735: CALL 930 0 1
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
7739: LD_INT 5
7741: PPUSH
7742: LD_INT 35
7744: PPUSH
7745: LD_INT 22
7747: PPUSH
7748: LD_INT 1
7750: PPUSH
7751: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
7755: LD_EXP 25
7759: PPUSH
7760: LD_VAR 0 1
7764: PUSH
7765: LD_INT 1
7767: ARRAY
7768: PPUSH
7769: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
7773: LD_VAR 0 1
7777: PUSH
7778: LD_INT 1
7780: ARRAY
7781: PPUSH
7782: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
7786: LD_VAR 0 1
7790: PUSH
7791: LD_INT 1
7793: ARRAY
7794: PPUSH
7795: CALL_OW 122
// wait ( 0 0$2 ) ;
7799: LD_INT 70
7801: PPUSH
7802: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
7806: LD_EXP 25
7810: PPUSH
7811: LD_STRING DS-1-apeeng
7813: PPUSH
7814: CALL_OW 88
// if IsOk ( Kamil ) then
7818: LD_EXP 22
7822: PPUSH
7823: CALL_OW 302
7827: IFFALSE 7955
// begin Say ( Kamil , DKam-1-apeeng ) ;
7829: LD_EXP 22
7833: PPUSH
7834: LD_STRING DKam-1-apeeng
7836: PPUSH
7837: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
7841: LD_EXP 25
7845: PPUSH
7846: LD_STRING DS-2-apeeng
7848: PPUSH
7849: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
7853: LD_EXP 22
7857: PPUSH
7858: LD_STRING DKam-2-apeeng
7860: PPUSH
7861: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
7865: LD_EXP 25
7869: PPUSH
7870: LD_STRING DS-3-apeeng
7872: PPUSH
7873: CALL_OW 88
// if not IsOK ( Kaia ) then
7877: LD_EXP 24
7881: PPUSH
7882: CALL_OW 302
7886: NOT
7887: IFFALSE 7898
// begin Video ( false ) ;
7889: LD_INT 0
7891: PPUSH
7892: CALL 930 0 1
// exit ;
7896: GO 7962
// end ; Say ( Kaia , DK-1-apeeng ) ;
7898: LD_EXP 24
7902: PPUSH
7903: LD_STRING DK-1-apeeng
7905: PPUSH
7906: CALL_OW 88
// if not IsOk ( Givi ) then
7910: LD_EXP 20
7914: PPUSH
7915: CALL_OW 302
7919: NOT
7920: IFFALSE 7931
// begin Video ( false ) ;
7922: LD_INT 0
7924: PPUSH
7925: CALL 930 0 1
// exit ;
7929: GO 7962
// end ; Say ( Givi , DG-1-apeeng ) ;
7931: LD_EXP 20
7935: PPUSH
7936: LD_STRING DG-1-apeeng
7938: PPUSH
7939: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
7943: LD_EXP 24
7947: PPUSH
7948: LD_STRING DK-2-apeeng
7950: PPUSH
7951: CALL_OW 88
// end ; Video ( false ) ;
7955: LD_INT 0
7957: PPUSH
7958: CALL 930 0 1
// end ;
7962: PPOPN 1
7964: END
// every 0 0$1 trigger farmerBaseReady do
7965: LD_EXP 4
7969: IFFALSE 8127
7971: GO 7973
7973: DISABLE
// begin DialogueOn ;
7974: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
7978: LD_EXP 27
7982: PPUSH
7983: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
7987: LD_EXP 27
7991: PPUSH
7992: LD_STRING DF-1-distribution
7994: PPUSH
7995: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
7999: LD_EXP 19
8003: PPUSH
8004: LD_STRING DH-2-distribution
8006: PPUSH
8007: CALL_OW 88
// if IsOk ( Kaia ) then
8011: LD_EXP 24
8015: PPUSH
8016: CALL_OW 302
8020: IFFALSE 8081
// begin Say ( Kaia , DK-1-distribution ) ;
8022: LD_EXP 24
8026: PPUSH
8027: LD_STRING DK-1-distribution
8029: PPUSH
8030: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
8034: LD_EXP 19
8038: PPUSH
8039: LD_STRING DH-1-distribution
8041: PPUSH
8042: CALL_OW 88
// if IsOk ( Givi ) then
8046: LD_EXP 20
8050: PPUSH
8051: CALL_OW 302
8055: IFFALSE 8081
// begin Say ( Givi , DG-1-distribution ) ;
8057: LD_EXP 20
8061: PPUSH
8062: LD_STRING DG-1-distribution
8064: PPUSH
8065: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
8069: LD_EXP 19
8073: PPUSH
8074: LD_STRING DH-3-distribution
8076: PPUSH
8077: CALL_OW 88
// end ; end ; DialogueOff ;
8081: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
8085: LD_STRING Crates1
8087: PPUSH
8088: CALL_OW 337
// farmerRequestedCrates := 300 ;
8092: LD_ADDR_EXP 13
8096: PUSH
8097: LD_INT 300
8099: ST_TO_ADDR
// Query ( FarmerCrates ) ;
8100: LD_STRING FarmerCrates
8102: PPUSH
8103: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
8107: LD_INT 10
8109: PPUSH
8110: LD_INT 1
8112: PPUSH
8113: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
8117: LD_INT 108
8119: PPUSH
8120: LD_INT 61
8122: PPUSH
8123: CALL_OW 86
// end ;
8127: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_lab ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
8128: LD_EXP 6
8132: PUSH
8133: LD_INT 22
8135: PUSH
8136: LD_INT 2
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 3
8145: PUSH
8146: LD_INT 57
8148: PUSH
8149: EMPTY
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 30
8158: PUSH
8159: LD_INT 6
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: LIST
8170: PPUSH
8171: CALL_OW 69
8175: AND
8176: PUSH
8177: LD_INT 22
8179: PUSH
8180: LD_INT 2
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 3
8189: PUSH
8190: LD_INT 57
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PUSH
8200: LD_INT 30
8202: PUSH
8203: LD_INT 4
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PPUSH
8215: CALL_OW 69
8219: AND
8220: IFFALSE 8372
8222: GO 8224
8224: DISABLE
8225: LD_INT 0
8227: PPUSH
// begin wait ( 0 0$10 ) ;
8228: LD_INT 350
8230: PPUSH
8231: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
8235: LD_ADDR_VAR 0 1
8239: PUSH
8240: LD_EXP 32
8244: PPUSH
8245: LD_INT 26
8247: PUSH
8248: LD_INT 1
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PUSH
8255: LD_INT 25
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PPUSH
8269: CALL_OW 72
8273: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
8274: LD_EXP 19
8278: PPUSH
8279: LD_STRING DH-1-task
8281: PPUSH
8282: CALL_OW 88
// if IsOk ( Sophia ) then
8286: LD_EXP 25
8290: PPUSH
8291: CALL_OW 302
8295: IFFALSE 8323
// begin Say ( Sophia , DS-1-task ) ;
8297: LD_EXP 25
8301: PPUSH
8302: LD_STRING DS-1-task
8304: PPUSH
8305: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
8309: LD_EXP 19
8313: PPUSH
8314: LD_STRING DH-2-task
8316: PPUSH
8317: CALL_OW 88
// end else
8321: GO 8357
// if eng then
8323: LD_VAR 0 1
8327: IFFALSE 8357
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
8329: LD_VAR 0 1
8333: PUSH
8334: LD_INT 1
8336: ARRAY
8337: PPUSH
8338: LD_STRING DArm-1-task
8340: PPUSH
8341: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
8345: LD_EXP 19
8349: PPUSH
8350: LD_STRING DH-2-task
8352: PPUSH
8353: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
8357: LD_STRING BaseConstructed
8359: PPUSH
8360: CALL_OW 337
// allowConvoys := true ;
8364: LD_ADDR_EXP 11
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// end ;
8372: PPOPN 1
8374: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
8375: LD_EXP 4
8379: PUSH
8380: LD_EXP 12
8384: PUSH
8385: LD_INT 300
8387: GREATEREQUAL
8388: AND
8389: IFFALSE 8461
8391: GO 8393
8393: DISABLE
// begin DialogueOn ;
8394: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
8398: LD_EXP 27
8402: PPUSH
8403: LD_STRING DF-1-delivery-2
8405: PPUSH
8406: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
8410: LD_EXP 19
8414: PPUSH
8415: LD_STRING DH-1-delivery-2
8417: PPUSH
8418: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
8422: LD_EXP 27
8426: PPUSH
8427: LD_STRING DF-2-delivery-2
8429: PPUSH
8430: CALL_OW 94
// DialogueOff ;
8434: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
8438: LD_STRING Crates2
8440: PPUSH
8441: CALL_OW 337
// farmerCratesCounter := 4 4$00 ;
8445: LD_ADDR_EXP 14
8449: PUSH
8450: LD_INT 8400
8452: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
8453: LD_ADDR_EXP 13
8457: PUSH
8458: LD_INT 600
8460: ST_TO_ADDR
// end ;
8461: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
8462: LD_EXP 4
8466: PUSH
8467: LD_EXP 12
8471: PUSH
8472: LD_INT 600
8474: GREATEREQUAL
8475: AND
8476: PUSH
8477: LD_OWVAR 67
8481: PUSH
8482: LD_INT 1
8484: GREATER
8485: AND
8486: IFFALSE 8652
8488: GO 8490
8490: DISABLE
// begin DialogueOn ;
8491: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
8495: LD_EXP 27
8499: PPUSH
8500: LD_STRING DF-1-delivery-3
8502: PPUSH
8503: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
8507: LD_EXP 19
8511: PPUSH
8512: LD_STRING DH-1-delivery-3
8514: PPUSH
8515: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
8519: LD_EXP 27
8523: PPUSH
8524: LD_STRING DF-2-delivery-3
8526: PPUSH
8527: CALL_OW 94
// if IsOk ( Kaia ) then
8531: LD_EXP 24
8535: PPUSH
8536: CALL_OW 302
8540: IFFALSE 8590
// begin Say ( Kaia , DK-1-delivery-3 ) ;
8542: LD_EXP 24
8546: PPUSH
8547: LD_STRING DK-1-delivery-3
8549: PPUSH
8550: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
8554: LD_EXP 19
8558: PPUSH
8559: LD_STRING DH-2-delivery-3
8561: PPUSH
8562: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
8566: LD_EXP 20
8570: PPUSH
8571: LD_STRING DG-1-delivery-3
8573: PPUSH
8574: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
8578: LD_EXP 21
8582: PPUSH
8583: LD_STRING DM-1-delivery-3
8585: PPUSH
8586: CALL_OW 88
// end ; DialogueOff ;
8590: CALL_OW 7
// if Difficulty = 2 then
8594: LD_OWVAR 67
8598: PUSH
8599: LD_INT 2
8601: EQUAL
8602: IFFALSE 8629
// begin ChangeMissionObjectives ( Crates3 ) ;
8604: LD_STRING Crates3
8606: PPUSH
8607: CALL_OW 337
// farmerCratesCounter := 5 5$00 ;
8611: LD_ADDR_EXP 14
8615: PUSH
8616: LD_INT 10500
8618: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
8619: LD_ADDR_EXP 13
8623: PUSH
8624: LD_INT 900
8626: ST_TO_ADDR
// end else
8627: GO 8652
// begin ChangeMissionObjectives ( Crates4 ) ;
8629: LD_STRING Crates4
8631: PPUSH
8632: CALL_OW 337
// farmerCratesCounter := 6 6$00 ;
8636: LD_ADDR_EXP 14
8640: PUSH
8641: LD_INT 12600
8643: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
8644: LD_ADDR_EXP 13
8648: PUSH
8649: LD_INT 1200
8651: ST_TO_ADDR
// end ; end ;
8652: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
8653: LD_EXP 4
8657: PUSH
8658: LD_EXP 12
8662: PUSH
8663: LD_INT 600
8665: PUSH
8666: LD_INT 900
8668: PUSH
8669: LD_INT 1200
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: PUSH
8677: LD_OWVAR 67
8681: ARRAY
8682: GREATEREQUAL
8683: AND
8684: PUSH
8685: LD_EXP 13
8689: PUSH
8690: LD_EXP 14
8694: LESSEQUAL
8695: AND
8696: IFFALSE 8769
8698: GO 8700
8700: DISABLE
// begin retreatAllowed := true ;
8701: LD_ADDR_EXP 10
8705: PUSH
8706: LD_INT 1
8708: ST_TO_ADDR
// display_strings := [ ] ;
8709: LD_ADDR_OWVAR 47
8713: PUSH
8714: EMPTY
8715: ST_TO_ADDR
// DialogueOn ;
8716: CALL_OW 6
// Video ( true ) ;
8720: LD_INT 1
8722: PPUSH
8723: CALL 930 0 1
// SayRadio ( Omar , DO-radio-end ) ;
8727: LD_EXP 28
8731: PPUSH
8732: LD_STRING DO-radio-end
8734: PPUSH
8735: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
8739: LD_EXP 19
8743: PPUSH
8744: LD_STRING DH-1-radio-end
8746: PPUSH
8747: CALL_OW 88
// Video ( false ) ;
8751: LD_INT 0
8753: PPUSH
8754: CALL 930 0 1
// DialogueOff ;
8758: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
8762: LD_STRING Retreat
8764: PPUSH
8765: CALL_OW 337
// end ;
8769: END
// every 0 0$1 trigger retreatAllowed do
8770: LD_EXP 10
8774: IFFALSE 8783
8776: GO 8778
8778: DISABLE
// StartCargoEvacuation ;
8779: CALL 3221 0 0
8783: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
8784: LD_EXP 10
8788: NOT
8789: PUSH
8790: LD_INT 5
8792: PPUSH
8793: CALL_OW 301
8797: AND
8798: IFFALSE 8822
8800: GO 8802
8802: DISABLE
// begin SayRadio ( Farmer , DF-1-failure ) ;
8803: LD_EXP 27
8807: PPUSH
8808: LD_STRING DF-1-failure
8810: PPUSH
8811: CALL_OW 94
// YouLost ( FarmerDepot ) ;
8815: LD_STRING FarmerDepot
8817: PPUSH
8818: CALL_OW 104
// end ;
8822: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 do var i , max , tmp ;
8823: LD_EXP 10
8827: PUSH
8828: LD_EXP 19
8832: PPUSH
8833: LD_EXP 27
8837: PPUSH
8838: CALL_OW 296
8842: PUSH
8843: LD_INT 6
8845: LESS
8846: AND
8847: IFFALSE 9370
8849: GO 8851
8851: DISABLE
8852: LD_INT 0
8854: PPUSH
8855: PPUSH
8856: PPUSH
// begin Video ( true ) ;
8857: LD_INT 1
8859: PPUSH
8860: CALL 930 0 1
// ComTurnUnit ( Heike , Farmer ) ;
8864: LD_EXP 19
8868: PPUSH
8869: LD_EXP 27
8873: PPUSH
8874: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
8878: LD_EXP 27
8882: PPUSH
8883: LD_EXP 19
8887: PPUSH
8888: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
8892: LD_EXP 27
8896: PPUSH
8897: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
8901: LD_EXP 19
8905: PPUSH
8906: LD_STRING DH-1-end
8908: PPUSH
8909: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
8913: LD_EXP 27
8917: PPUSH
8918: LD_STRING DF-1-end
8920: PPUSH
8921: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
8925: LD_EXP 27
8929: PPUSH
8930: LD_STRING DF-2-end
8932: PPUSH
8933: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
8937: LD_EXP 19
8941: PPUSH
8942: LD_STRING DH-2-end
8944: PPUSH
8945: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
8949: LD_EXP 27
8953: PPUSH
8954: LD_STRING DF-3-end
8956: PPUSH
8957: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
8961: LD_EXP 19
8965: PPUSH
8966: LD_STRING DH-3-end
8968: PPUSH
8969: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
8973: LD_EXP 20
8977: PPUSH
8978: LD_STRING DG-1-end
8980: PPUSH
8981: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
8985: LD_EXP 19
8989: PPUSH
8990: LD_STRING DH-4-end
8992: PPUSH
8993: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
8997: LD_EXP 27
9001: PPUSH
9002: LD_STRING DF-4-end
9004: PPUSH
9005: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
9009: LD_EXP 19
9013: PPUSH
9014: LD_STRING DH-5-end
9016: PPUSH
9017: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
9021: LD_EXP 27
9025: PPUSH
9026: LD_STRING DF-5-end
9028: PPUSH
9029: CALL_OW 88
// Video ( false ) ;
9033: LD_INT 0
9035: PPUSH
9036: CALL 930 0 1
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
9040: LD_ADDR_VAR 0 2
9044: PUSH
9045: LD_INT 4
9047: PUSH
9048: LD_INT 3
9050: PUSH
9051: LD_INT 2
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_OWVAR 67
9063: ARRAY
9064: ST_TO_ADDR
// if farmerSquad < max then
9065: LD_EXP 29
9069: PUSH
9070: LD_VAR 0 2
9074: LESS
9075: IFFALSE 9087
// max := farmerSquad ;
9077: LD_ADDR_VAR 0 2
9081: PUSH
9082: LD_EXP 29
9086: ST_TO_ADDR
// for i := 1 to max do
9087: LD_ADDR_VAR 0 1
9091: PUSH
9092: DOUBLE
9093: LD_INT 1
9095: DEC
9096: ST_TO_ADDR
9097: LD_VAR 0 2
9101: PUSH
9102: FOR_TO
9103: IFFALSE 9141
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
9105: LD_EXP 29
9109: PUSH
9110: LD_INT 1
9112: ARRAY
9113: PPUSH
9114: LD_INT 2
9116: PPUSH
9117: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
9121: LD_ADDR_EXP 29
9125: PUSH
9126: LD_EXP 29
9130: PPUSH
9131: LD_INT 1
9133: PPUSH
9134: CALL_OW 3
9138: ST_TO_ADDR
// end ;
9139: GO 9102
9141: POP
9142: POP
// for i in Farmer ^ farmerSquad do
9143: LD_ADDR_VAR 0 1
9147: PUSH
9148: LD_EXP 27
9152: PUSH
9153: LD_EXP 29
9157: ADD
9158: PUSH
9159: FOR_IN
9160: IFFALSE 9199
// begin if IsInUnit ( i ) then
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL_OW 310
9171: IFFALSE 9182
// ComExitBuilding ( i ) ;
9173: LD_VAR 0 1
9177: PPUSH
9178: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
9182: LD_VAR 0 1
9186: PPUSH
9187: LD_INT 102
9189: PPUSH
9190: LD_INT 7
9192: PPUSH
9193: CALL_OW 171
// end ;
9197: GO 9159
9199: POP
9200: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
9201: LD_ADDR_VAR 0 1
9205: PUSH
9206: LD_INT 22
9208: PUSH
9209: LD_INT 5
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 21
9218: PUSH
9219: LD_INT 3
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PPUSH
9230: CALL_OW 69
9234: PUSH
9235: LD_INT 5
9237: DIFF
9238: PUSH
9239: FOR_IN
9240: IFFALSE 9256
// SetSide ( i , 2 ) ;
9242: LD_VAR 0 1
9246: PPUSH
9247: LD_INT 2
9249: PPUSH
9250: CALL_OW 235
9254: GO 9239
9256: POP
9257: POP
// repeat wait ( 0 0$1 ) ;
9258: LD_INT 35
9260: PPUSH
9261: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
9265: LD_ADDR_VAR 0 3
9269: PUSH
9270: LD_EXP 27
9274: PUSH
9275: LD_EXP 29
9279: ADD
9280: PPUSH
9281: LD_INT 95
9283: PUSH
9284: LD_INT 3
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PPUSH
9291: CALL_OW 72
9295: ST_TO_ADDR
// if tmp then
9296: LD_VAR 0 3
9300: IFFALSE 9356
// for i in tmp do
9302: LD_ADDR_VAR 0 1
9306: PUSH
9307: LD_VAR 0 3
9311: PUSH
9312: FOR_IN
9313: IFFALSE 9354
// begin if i in farmerSquad then
9315: LD_VAR 0 1
9319: PUSH
9320: LD_EXP 29
9324: IN
9325: IFFALSE 9343
// farmerSquad := farmerSquad diff i ;
9327: LD_ADDR_EXP 29
9331: PUSH
9332: LD_EXP 29
9336: PUSH
9337: LD_VAR 0 1
9341: DIFF
9342: ST_TO_ADDR
// RemoveUnit ( i ) ;
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 64
// end ;
9352: GO 9312
9354: POP
9355: POP
// until not Farmer and not farmerSquad ;
9356: LD_EXP 27
9360: NOT
9361: PUSH
9362: LD_EXP 29
9366: NOT
9367: AND
9368: IFFALSE 9258
// end ;
9370: PPOPN 3
9372: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
9373: LD_EXP 14
9377: PUSH
9378: LD_INT 0
9380: LESSEQUAL
9381: IFFALSE 9430
9383: GO 9385
9385: DISABLE
// begin DialogueOn ;
9386: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
9390: LD_EXP 27
9394: PPUSH
9395: LD_STRING DF-1-distribution-a
9397: PPUSH
9398: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
9402: LD_EXP 19
9406: PPUSH
9407: LD_STRING DH-1-distribution-a
9409: PPUSH
9410: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
9414: LD_EXP 27
9418: PPUSH
9419: LD_STRING DF-2-distribution-a
9421: PPUSH
9422: CALL_OW 94
// DialogueOff ;
9426: CALL_OW 7
// end ;
9430: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
9431: LD_INT 22
9433: PUSH
9434: LD_INT 2
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 34
9443: PUSH
9444: LD_INT 12
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PPUSH
9455: CALL_OW 69
9459: IFFALSE 9519
9461: GO 9463
9463: DISABLE
// begin DialogueOn ;
9464: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
9468: LD_EXP 19
9472: PPUSH
9473: LD_STRING DH-1-truck
9475: PPUSH
9476: CALL_OW 88
// if IsOk ( Markov ) then
9480: LD_EXP 26
9484: PPUSH
9485: CALL_OW 302
9489: IFFALSE 9515
// begin Say ( Markov , DMar-1-truck ) ;
9491: LD_EXP 26
9495: PPUSH
9496: LD_STRING DMar-1-truck
9498: PPUSH
9499: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
9503: LD_EXP 19
9507: PPUSH
9508: LD_STRING DH-2-truck
9510: PPUSH
9511: CALL_OW 88
// end ; DialogueOff ;
9515: CALL_OW 7
// end ;
9519: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
9520: LD_INT 0
9522: PPUSH
9523: PPUSH
9524: PPUSH
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
9525: LD_ADDR_VAR 0 2
9529: PUSH
9530: LD_EXP 32
9534: PPUSH
9535: LD_INT 26
9537: PUSH
9538: LD_INT 1
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PPUSH
9545: CALL_OW 72
9549: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
9550: LD_ADDR_VAR 0 3
9554: PUSH
9555: LD_EXP 32
9559: PPUSH
9560: LD_INT 26
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PPUSH
9570: CALL_OW 72
9574: ST_TO_ADDR
// if randomMen then
9575: LD_VAR 0 2
9579: IFFALSE 9599
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
9581: LD_VAR 0 2
9585: PUSH
9586: LD_INT 1
9588: ARRAY
9589: PPUSH
9590: LD_STRING DArm-1-nocargo
9592: PPUSH
9593: CALL_OW 88
9597: GO 9621
// if randomWomen then
9599: LD_VAR 0 3
9603: IFFALSE 9621
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
9605: LD_VAR 0 3
9609: PUSH
9610: LD_INT 1
9612: ARRAY
9613: PPUSH
9614: LD_STRING DArf-1-nocargo
9616: PPUSH
9617: CALL_OW 88
// end ;
9621: LD_VAR 0 1
9625: RET
// export function IncomingAttack ; begin
9626: LD_INT 0
9628: PPUSH
// if attackWave = 1 then
9629: LD_EXP 16
9633: PUSH
9634: LD_INT 1
9636: EQUAL
9637: IFFALSE 9708
// begin DialogueOn ;
9639: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
9643: LD_EXP 28
9647: PPUSH
9648: LD_STRING DO-1-radio-1
9650: PPUSH
9651: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
9655: LD_EXP 19
9659: PPUSH
9660: LD_STRING DH-1-radio-1-
9662: PPUSH
9663: CALL_OW 88
// if IsOk ( Markov ) then
9667: LD_EXP 26
9671: PPUSH
9672: CALL_OW 302
9676: IFFALSE 9702
// begin Say ( Markov , DMar-1-radio-1 ) ;
9678: LD_EXP 26
9682: PPUSH
9683: LD_STRING DMar-1-radio-1
9685: PPUSH
9686: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
9690: LD_EXP 19
9694: PPUSH
9695: LD_STRING DH-2-radio-1
9697: PPUSH
9698: CALL_OW 88
// end ; DialogueOff ;
9702: CALL_OW 7
// end else
9706: GO 9732
// begin SayRadio ( Omar , DO-1-radio-u ) ;
9708: LD_EXP 28
9712: PPUSH
9713: LD_STRING DO-1-radio-u
9715: PPUSH
9716: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
9720: LD_EXP 19
9724: PPUSH
9725: LD_STRING DH-1-radio-u
9727: PPUSH
9728: CALL_OW 88
// end ; end ;
9732: LD_VAR 0 1
9736: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
9737: LD_EXP 34
9741: PPUSH
9742: LD_INT 95
9744: PUSH
9745: LD_INT 8
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PPUSH
9752: CALL_OW 72
9756: IFFALSE 9849
9758: GO 9760
9760: DISABLE
9761: LD_INT 0
9763: PPUSH
// begin enable ;
9764: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
9765: LD_ADDR_VAR 0 1
9769: PUSH
9770: LD_EXP 34
9774: PPUSH
9775: LD_INT 95
9777: PUSH
9778: LD_INT 8
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PPUSH
9785: CALL_OW 72
9789: PUSH
9790: FOR_IN
9791: IFFALSE 9820
// begin usForces := usForces diff i ;
9793: LD_ADDR_EXP 34
9797: PUSH
9798: LD_EXP 34
9802: PUSH
9803: LD_VAR 0 1
9807: DIFF
9808: ST_TO_ADDR
// RemoveUnit ( i ) ;
9809: LD_VAR 0 1
9813: PPUSH
9814: CALL_OW 64
// end ;
9818: GO 9790
9820: POP
9821: POP
// if not americanHasEscaped then
9822: LD_EXP 7
9826: NOT
9827: IFFALSE 9849
// begin americanHasEscaped := true ;
9829: LD_ADDR_EXP 7
9833: PUSH
9834: LD_INT 1
9836: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
9837: LD_EXP 19
9841: PPUSH
9842: LD_STRING DH-2-assault-a
9844: PPUSH
9845: CALL_OW 88
// end ; end ;
9849: PPOPN 1
9851: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
9852: LD_INT 5
9854: PPUSH
9855: CALL_OW 255
9859: PUSH
9860: LD_INT 2
9862: EQUAL
9863: IFFALSE 9875
9865: GO 9867
9867: DISABLE
// YouLost ( Attack ) ;
9868: LD_STRING Attack
9870: PPUSH
9871: CALL_OW 104
9875: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
9876: LD_EXP 10
9880: PUSH
9881: LD_EXP 17
9885: PUSH
9886: LD_INT 1
9888: LESS
9889: AND
9890: IFFALSE 10086
9892: GO 9894
9894: DISABLE
// begin DialogueOn ;
9895: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
9899: LD_EXP 19
9903: PPUSH
9904: LD_STRING DH-1-final
9906: PPUSH
9907: CALL_OW 88
// if tick <= [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
9911: LD_OWVAR 1
9915: PUSH
9916: LD_INT 126000
9918: PUSH
9919: LD_INT 105000
9921: PUSH
9922: LD_INT 94500
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: PUSH
9930: LD_OWVAR 67
9934: ARRAY
9935: LESSEQUAL
9936: IFFALSE 9950
// AddMedal ( med1 , 1 ) else
9938: LD_STRING med1
9940: PPUSH
9941: LD_INT 1
9943: PPUSH
9944: CALL_OW 101
9948: GO 9961
// AddMedal ( med1 , - 1 ) ;
9950: LD_STRING med1
9952: PPUSH
9953: LD_INT 1
9955: NEG
9956: PPUSH
9957: CALL_OW 101
// if vehCounter >= 2 then
9961: LD_EXP 18
9965: PUSH
9966: LD_INT 2
9968: GREATEREQUAL
9969: IFFALSE 9983
// AddMedal ( med2 , 1 ) else
9971: LD_STRING med2
9973: PPUSH
9974: LD_INT 1
9976: PPUSH
9977: CALL_OW 101
9981: GO 9994
// AddMedal ( med2 , - 1 ) ;
9983: LD_STRING med2
9985: PPUSH
9986: LD_INT 1
9988: NEG
9989: PPUSH
9990: CALL_OW 101
// if deadCounter = 0 then
9994: LD_EXP 8
9998: PUSH
9999: LD_INT 0
10001: EQUAL
10002: IFFALSE 10016
// AddMedal ( med3 , 1 ) else
10004: LD_STRING med3
10006: PPUSH
10007: LD_INT 1
10009: PPUSH
10010: CALL_OW 101
10014: GO 10027
// AddMedal ( med3 , - 1 ) ;
10016: LD_STRING med3
10018: PPUSH
10019: LD_INT 1
10021: NEG
10022: PPUSH
10023: CALL_OW 101
// GiveMedals ( MAIN ) ;
10027: LD_STRING MAIN
10029: PPUSH
10030: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
10034: LD_INT 22
10036: PUSH
10037: LD_INT 2
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 23
10046: PUSH
10047: LD_INT 2
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 21
10056: PUSH
10057: LD_INT 1
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: PPUSH
10069: CALL_OW 69
10073: PPUSH
10074: CALL_OW 43
// YouWin ;
10078: CALL_OW 103
// DialogueOff ;
10082: CALL_OW 7
// end ; end_of_file
10086: END
// on UnitDestroyed ( un ) do begin if un = Heike then
10087: LD_VAR 0 1
10091: PUSH
10092: LD_EXP 19
10096: EQUAL
10097: IFFALSE 10106
// YouLost ( Heike ) ;
10099: LD_STRING Heike
10101: PPUSH
10102: CALL_OW 104
// if un = Aviradze then
10106: LD_VAR 0 1
10110: PUSH
10111: LD_EXP 23
10115: EQUAL
10116: IFFALSE 10125
// YouLost ( Aviradze ) ;
10118: LD_STRING Aviradze
10120: PPUSH
10121: CALL_OW 104
// if un = usDepot and not retreatAllowed then
10125: LD_VAR 0 1
10129: PUSH
10130: LD_INT 11
10132: EQUAL
10133: PUSH
10134: LD_EXP 10
10138: NOT
10139: AND
10140: IFFALSE 10149
// YouLost ( Depot ) ;
10142: LD_STRING Depot
10144: PPUSH
10145: CALL_OW 104
// if un = Farmer then
10149: LD_VAR 0 1
10153: PUSH
10154: LD_EXP 27
10158: EQUAL
10159: IFFALSE 10168
// YouLost ( Farmer ) ;
10161: LD_STRING Farmer
10163: PPUSH
10164: CALL_OW 104
// if un in usForces then
10168: LD_VAR 0 1
10172: PUSH
10173: LD_EXP 34
10177: IN
10178: IFFALSE 10196
// usForces := usForces diff un ;
10180: LD_ADDR_EXP 34
10184: PUSH
10185: LD_EXP 34
10189: PUSH
10190: LD_VAR 0 1
10194: DIFF
10195: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
10196: LD_VAR 0 1
10200: PUSH
10201: LD_INT 22
10203: PUSH
10204: LD_INT 2
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 23
10213: PUSH
10214: LD_INT 2
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 21
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: PPUSH
10236: CALL_OW 69
10240: IN
10241: IFFALSE 10257
// deadCounter := deadCounter + 1 ;
10243: LD_ADDR_EXP 8
10247: PUSH
10248: LD_EXP 8
10252: PUSH
10253: LD_INT 1
10255: PLUS
10256: ST_TO_ADDR
// end ;
10257: PPOPN 1
10259: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin if GetWeapon ( oldId ) = us_cargo_bay and GetCargo ( oldId , mat_cans ) = 0 then
10260: LD_VAR 0 2
10264: PPUSH
10265: CALL_OW 264
10269: PUSH
10270: LD_INT 12
10272: EQUAL
10273: PUSH
10274: LD_VAR 0 2
10278: PPUSH
10279: LD_INT 1
10281: PPUSH
10282: CALL_OW 289
10286: PUSH
10287: LD_INT 0
10289: EQUAL
10290: AND
10291: IFFALSE 10297
// EmptyCargoDialog ;
10293: CALL 9520 0 0
// end ;
10297: PPOPN 4
10299: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
10300: LD_VAR 0 1
10304: PUSH
10305: LD_INT 2
10307: EQUAL
10308: PUSH
10309: LD_VAR 0 2
10313: PUSH
10314: LD_INT 5
10316: EQUAL
10317: AND
10318: IFFALSE 10327
// YouLost ( Attack ) ;
10320: LD_STRING Attack
10322: PPUSH
10323: CALL_OW 104
// end ;
10327: PPOPN 2
10329: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 then
10330: LD_VAR 0 1
10334: PPUSH
10335: CALL_OW 255
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10477
// begin if GetBType ( b ) = b_lab then
10345: LD_VAR 0 1
10349: PPUSH
10350: CALL_OW 266
10354: PUSH
10355: LD_INT 6
10357: EQUAL
10358: IFFALSE 10398
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
10360: LD_EXP 34
10364: PPUSH
10365: LD_INT 25
10367: PUSH
10368: LD_INT 4
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PPUSH
10375: CALL_OW 72
10379: PPUSH
10380: LD_VAR 0 1
10384: PPUSH
10385: CALL_OW 120
// AmLabResearch ( b ) ;
10389: LD_VAR 0 1
10393: PPUSH
10394: CALL 4508 0 1
// end ; if GetBType ( b ) = b_armoury then
10398: LD_VAR 0 1
10402: PPUSH
10403: CALL_OW 266
10407: PUSH
10408: LD_INT 4
10410: EQUAL
10411: IFFALSE 10459
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
10413: LD_EXP 34
10417: PPUSH
10418: LD_INT 25
10420: PUSH
10421: LD_INT 1
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PUSH
10428: LD_INT 3
10430: PUSH
10431: LD_INT 54
10433: PUSH
10434: EMPTY
10435: LIST
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 72
10449: PPUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
10459: LD_ADDR_EXP 36
10463: PUSH
10464: LD_EXP 36
10468: PPUSH
10469: LD_INT 1
10471: PPUSH
10472: CALL_OW 3
10476: ST_TO_ADDR
// end ; end ;
10477: PPOPN 1
10479: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
10480: LD_VAR 0 1
10484: PPUSH
10485: CALL_OW 255
10489: PUSH
10490: LD_INT 2
10492: EQUAL
10493: IFFALSE 10509
// vehCounter := vehCounter + 1 ;
10495: LD_ADDR_EXP 18
10499: PUSH
10500: LD_EXP 18
10504: PUSH
10505: LD_INT 1
10507: PLUS
10508: ST_TO_ADDR
// end ; end_of_file
10509: PPOPN 2
10511: END
// every 0 0$40 + 0 0$10 trigger tick <= [ 3 3$00 , 2 2$00 , 1 1$30 ] [ Difficulty ] do
10512: LD_OWVAR 1
10516: PUSH
10517: LD_INT 6300
10519: PUSH
10520: LD_INT 4200
10522: PUSH
10523: LD_INT 3150
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: LIST
10530: PUSH
10531: LD_OWVAR 67
10535: ARRAY
10536: LESSEQUAL
10537: IFFALSE 10564
10539: GO 10541
10541: DISABLE
// begin enable ;
10542: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
10543: LD_INT 1
10545: PPUSH
10546: LD_INT 5
10548: PPUSH
10549: CALL_OW 12
10553: PPUSH
10554: LD_INT 9
10556: PPUSH
10557: LD_INT 1
10559: PPUSH
10560: CALL_OW 55
// end ;
10564: END
// every 1 1$30 + 0 0$20 trigger americanBaseCaptured and tick <= [ 25 25$00 , 20 20$00 , 18 18$00 ] [ Difficulty ] do
10565: LD_EXP 6
10569: PUSH
10570: LD_OWVAR 1
10574: PUSH
10575: LD_INT 52500
10577: PUSH
10578: LD_INT 42000
10580: PUSH
10581: LD_INT 37800
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: PUSH
10589: LD_OWVAR 67
10593: ARRAY
10594: LESSEQUAL
10595: AND
10596: IFFALSE 10623
10598: GO 10600
10600: DISABLE
// begin enable ;
10601: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
10602: LD_INT 1
10604: PPUSH
10605: LD_INT 5
10607: PPUSH
10608: CALL_OW 12
10612: PPUSH
10613: LD_INT 9
10615: PPUSH
10616: LD_INT 1
10618: PPUSH
10619: CALL_OW 55
// end ; end_of_file
10623: END
// every 0 0$1 trigger not retreatAllowed and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
10624: LD_EXP 10
10628: NOT
10629: PUSH
10630: LD_EXP 4
10634: AND
10635: PUSH
10636: LD_EXP 12
10640: PUSH
10641: LD_EXP 13
10645: LESSEQUAL
10646: AND
10647: IFFALSE 10727
10649: GO 10651
10651: DISABLE
// begin enable ;
10652: ENABLE
// display_strings := [ #X103-1 , farmerCrates , farmerRequestedCrates ] ;
10653: LD_ADDR_OWVAR 47
10657: PUSH
10658: LD_STRING #X103-1
10660: PUSH
10661: LD_EXP 12
10665: PUSH
10666: LD_EXP 13
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: LIST
10675: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
10676: LD_ADDR_EXP 12
10680: PUSH
10681: LD_INT 5
10683: PPUSH
10684: CALL_OW 274
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 275
10696: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
10697: LD_INT 10
10699: PPUSH
10700: LD_INT 1
10702: PPUSH
10703: CALL_OW 287
10707: PUSH
10708: LD_INT 0
10710: EQUAL
10711: IFFALSE 10727
// farmerCratesCounter := farmerCratesCounter - 0 0$1 ;
10713: LD_ADDR_EXP 14
10717: PUSH
10718: LD_EXP 14
10722: PUSH
10723: LD_INT 35
10725: MINUS
10726: ST_TO_ADDR
// end ; end_of_file
10727: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
10728: GO 10730
10730: DISABLE
// begin ru_radar := 98 ;
10731: LD_ADDR_EXP 38
10735: PUSH
10736: LD_INT 98
10738: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10739: LD_ADDR_EXP 39
10743: PUSH
10744: LD_INT 89
10746: ST_TO_ADDR
// us_hack := 99 ;
10747: LD_ADDR_EXP 40
10751: PUSH
10752: LD_INT 99
10754: ST_TO_ADDR
// us_artillery := 97 ;
10755: LD_ADDR_EXP 41
10759: PUSH
10760: LD_INT 97
10762: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10763: LD_ADDR_EXP 42
10767: PUSH
10768: LD_INT 91
10770: ST_TO_ADDR
// tech_Artillery := 80 ;
10771: LD_ADDR_EXP 43
10775: PUSH
10776: LD_INT 80
10778: ST_TO_ADDR
// tech_RadMat := 81 ;
10779: LD_ADDR_EXP 44
10783: PUSH
10784: LD_INT 81
10786: ST_TO_ADDR
// tech_BasicTools := 82 ;
10787: LD_ADDR_EXP 45
10791: PUSH
10792: LD_INT 82
10794: ST_TO_ADDR
// tech_Cargo := 83 ;
10795: LD_ADDR_EXP 46
10799: PUSH
10800: LD_INT 83
10802: ST_TO_ADDR
// tech_Track := 84 ;
10803: LD_ADDR_EXP 47
10807: PUSH
10808: LD_INT 84
10810: ST_TO_ADDR
// tech_Crane := 85 ;
10811: LD_ADDR_EXP 48
10815: PUSH
10816: LD_INT 85
10818: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10819: LD_ADDR_EXP 49
10823: PUSH
10824: LD_INT 86
10826: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10827: LD_ADDR_EXP 50
10831: PUSH
10832: LD_INT 87
10834: ST_TO_ADDR
// end ;
10835: END
