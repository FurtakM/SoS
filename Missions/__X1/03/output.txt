// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 621 0 0
// PrepareArabian ;
  12: CALL 1056 0 0
// PrepareAmerican ;
  16: CALL 4117 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9209 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 42000
 166: PUSH
 167: LD_INT 31500
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 182: LD_ADDR_EXP 20
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 190: LD_ADDR_EXP 18
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// attackWave := 1 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 5
 213: PUSH
 214: LD_INT 6
 216: PUSH
 217: LD_INT 7
 219: PUSH
 220: LD_INT 8
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: PUSH
 229: LD_OWVAR 67
 233: ARRAY
 234: ST_TO_ADDR
// vehCounter := 0 ;
 235: LD_ADDR_EXP 22
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// convoyCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimInDepot := false ;
 251: LD_ADDR_EXP 25
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimIsFree := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 16
 274: PUSH
 275: LD_INT 16
 277: PUSH
 278: LD_INT 15
 280: PUSH
 281: LD_INT 14
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: PUSH
 290: LD_OWVAR 67
 294: ARRAY
 295: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 296: LD_ADDR_EXP 13
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// allowCargoEvacuation := false ;
 304: LD_ADDR_EXP 7
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// americanStartRun := false ;
 312: LD_ADDR_EXP 14
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// end ; end_of_file
 320: LD_VAR 0 1
 324: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 325: LD_INT 0
 327: PPUSH
// uc_side := side ;
 328: LD_ADDR_OWVAR 20
 332: PUSH
 333: LD_VAR 0 1
 337: ST_TO_ADDR
// uc_nation := nation ;
 338: LD_ADDR_OWVAR 21
 342: PUSH
 343: LD_VAR 0 2
 347: ST_TO_ADDR
// vc_chassis := chassis ;
 348: LD_ADDR_OWVAR 37
 352: PUSH
 353: LD_VAR 0 3
 357: ST_TO_ADDR
// vc_engine := engine ;
 358: LD_ADDR_OWVAR 39
 362: PUSH
 363: LD_VAR 0 4
 367: ST_TO_ADDR
// vc_control := control ;
 368: LD_ADDR_OWVAR 38
 372: PUSH
 373: LD_VAR 0 5
 377: ST_TO_ADDR
// vc_weapon := weapon ;
 378: LD_ADDR_OWVAR 40
 382: PUSH
 383: LD_VAR 0 6
 387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 388: LD_ADDR_OWVAR 41
 392: PUSH
 393: LD_VAR 0 7
 397: ST_TO_ADDR
// result := CreateVehicle ;
 398: LD_ADDR_VAR 0 8
 402: PUSH
 403: CALL_OW 45
 407: ST_TO_ADDR
// end ;
 408: LD_VAR 0 8
 412: RET
// export function SayX ( units , ident ) ; var i ; begin
 413: LD_INT 0
 415: PPUSH
 416: PPUSH
// result := false ;
 417: LD_ADDR_VAR 0 3
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// if not units then
 425: LD_VAR 0 1
 429: NOT
 430: IFFALSE 434
// exit ;
 432: GO 488
// for i in units do
 434: LD_ADDR_VAR 0 4
 438: PUSH
 439: LD_VAR 0 1
 443: PUSH
 444: FOR_IN
 445: IFFALSE 486
// if IsOk ( i ) then
 447: LD_VAR 0 4
 451: PPUSH
 452: CALL_OW 302
 456: IFFALSE 484
// begin Say ( i , ident ) ;
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 2
 467: PPUSH
 468: CALL_OW 88
// result := i ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// break ;
 482: GO 486
// end ;
 484: GO 444
 486: POP
 487: POP
// end ;
 488: LD_VAR 0 3
 492: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 493: LD_INT 0
 495: PPUSH
 496: PPUSH
// InitUc ;
 497: CALL_OW 18
// InitHc ;
 501: CALL_OW 19
// uc_side := 0 ;
 505: LD_ADDR_OWVAR 20
 509: PUSH
 510: LD_INT 0
 512: ST_TO_ADDR
// uc_nation := 0 ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_INT 0
 520: ST_TO_ADDR
// for i = 1 to amount do
 521: LD_ADDR_VAR 0 4
 525: PUSH
 526: DOUBLE
 527: LD_INT 1
 529: DEC
 530: ST_TO_ADDR
 531: LD_VAR 0 2
 535: PUSH
 536: FOR_TO
 537: IFFALSE 610
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 539: LD_ADDR_OWVAR 29
 543: PUSH
 544: LD_INT 9
 546: PPUSH
 547: LD_INT 12
 549: PPUSH
 550: CALL_OW 12
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: ST_TO_ADDR
// hc_agressivity := 0 ;
 570: LD_ADDR_OWVAR 35
 574: PUSH
 575: LD_INT 0
 577: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 578: LD_INT 0
 580: PPUSH
 581: LD_INT 12
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 591: CALL_OW 44
 595: PPUSH
 596: LD_VAR 0 1
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 49
// end ;
 608: GO 536
 610: POP
 611: POP
// InitHc ;
 612: CALL_OW 19
// end ;
 616: LD_VAR 0 3
 620: RET
// export function CreateNature ; var i ; begin
 621: LD_INT 0
 623: PPUSH
 624: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 625: LD_INT 2
 627: PPUSH
 628: LD_INT 5
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: LD_INT 4
 636: PUSH
 637: LD_INT 3
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: PUSH
 646: LD_OWVAR 67
 650: ARRAY
 651: PPUSH
 652: CALL 493 0 2
// for i := 1 to 2 do
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: DOUBLE
 662: LD_INT 1
 664: DEC
 665: ST_TO_ADDR
 666: LD_INT 2
 668: PUSH
 669: FOR_TO
 670: IFFALSE 705
// begin hc_class := 21 ;
 672: LD_ADDR_OWVAR 28
 676: PUSH
 677: LD_INT 21
 679: ST_TO_ADDR
// hc_gallery :=  ;
 680: LD_ADDR_OWVAR 33
 684: PUSH
 685: LD_STRING 
 687: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 688: CALL_OW 44
 692: PPUSH
 693: LD_INT 2
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 49
// end ;
 703: GO 669
 705: POP
 706: POP
// for i := 1 to 2 do
 707: LD_ADDR_VAR 0 2
 711: PUSH
 712: DOUBLE
 713: LD_INT 1
 715: DEC
 716: ST_TO_ADDR
 717: LD_INT 2
 719: PUSH
 720: FOR_TO
 721: IFFALSE 756
// begin hc_class := 18 ;
 723: LD_ADDR_OWVAR 28
 727: PUSH
 728: LD_INT 18
 730: ST_TO_ADDR
// hc_gallery :=  ;
 731: LD_ADDR_OWVAR 33
 735: PUSH
 736: LD_STRING 
 738: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 739: CALL_OW 44
 743: PPUSH
 744: LD_INT 2
 746: PPUSH
 747: LD_INT 0
 749: PPUSH
 750: CALL_OW 49
// end ;
 754: GO 720
 756: POP
 757: POP
// for i := 1 to 2 do
 758: LD_ADDR_VAR 0 2
 762: PUSH
 763: DOUBLE
 764: LD_INT 1
 766: DEC
 767: ST_TO_ADDR
 768: LD_INT 2
 770: PUSH
 771: FOR_TO
 772: IFFALSE 807
// begin hc_class := 13 ;
 774: LD_ADDR_OWVAR 28
 778: PUSH
 779: LD_INT 13
 781: ST_TO_ADDR
// hc_gallery :=  ;
 782: LD_ADDR_OWVAR 33
 786: PUSH
 787: LD_STRING 
 789: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 790: CALL_OW 44
 794: PPUSH
 795: LD_INT 2
 797: PPUSH
 798: LD_INT 0
 800: PPUSH
 801: CALL_OW 49
// end ;
 805: GO 771
 807: POP
 808: POP
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 814: LD_INT 0
 816: PPUSH
 817: PPUSH
 818: PPUSH
// if not observer or not unit then
 819: LD_VAR 0 1
 823: NOT
 824: PUSH
 825: LD_VAR 0 2
 829: NOT
 830: OR
 831: IFFALSE 835
// exit ;
 833: GO 883
// if not See ( GetSide ( observer ) , unit ) then
 835: LD_VAR 0 1
 839: PPUSH
 840: CALL_OW 255
 844: PPUSH
 845: LD_VAR 0 2
 849: PPUSH
 850: CALL_OW 292
 854: NOT
 855: IFFALSE 859
// exit ;
 857: GO 883
// result := GetDistUnits ( observer , unit ) < 12 ;
 859: LD_ADDR_VAR 0 3
 863: PUSH
 864: LD_VAR 0 1
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 296
 878: PUSH
 879: LD_INT 12
 881: LESS
 882: ST_TO_ADDR
// end ;
 883: LD_VAR 0 3
 887: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 888: LD_INT 0
 890: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 891: LD_VAR 0 2
 895: PUSH
 896: LD_INT 1
 898: ARRAY
 899: PPUSH
 900: LD_VAR 0 2
 904: PUSH
 905: LD_INT 2
 907: ARRAY
 908: PPUSH
 909: CALL_OW 488
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_INT 1
 921: ARRAY
 922: PPUSH
 923: LD_VAR 0 2
 927: PUSH
 928: LD_INT 2
 930: ARRAY
 931: PPUSH
 932: CALL_OW 428
 936: PUSH
 937: LD_INT 0
 939: EQUAL
 940: AND
 941: IFFALSE 975
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 943: LD_VAR 0 1
 947: PPUSH
 948: LD_VAR 0 2
 952: PUSH
 953: LD_INT 1
 955: ARRAY
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 2
 964: ARRAY
 965: PPUSH
 966: LD_VAR 0 3
 970: PPUSH
 971: CALL_OW 48
// end ;
 975: LD_VAR 0 4
 979: RET
// export function ReverseArray ( array ) ; var i ; begin
 980: LD_INT 0
 982: PPUSH
 983: PPUSH
// if not array then
 984: LD_VAR 0 1
 988: NOT
 989: IFFALSE 993
// exit ;
 991: GO 1051
// result := [ ] ;
 993: LD_ADDR_VAR 0 2
 997: PUSH
 998: EMPTY
 999: ST_TO_ADDR
// for i := 1 to array do
1000: LD_ADDR_VAR 0 3
1004: PUSH
1005: DOUBLE
1006: LD_INT 1
1008: DEC
1009: ST_TO_ADDR
1010: LD_VAR 0 1
1014: PUSH
1015: FOR_TO
1016: IFFALSE 1049
// result := Insert ( result , 1 , array [ i ] ) ;
1018: LD_ADDR_VAR 0 2
1022: PUSH
1023: LD_VAR 0 2
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: LD_VAR 0 1
1035: PUSH
1036: LD_VAR 0 3
1040: ARRAY
1041: PPUSH
1042: CALL_OW 2
1046: ST_TO_ADDR
1047: GO 1015
1049: POP
1050: POP
// end ; end_of_file
1051: LD_VAR 0 2
1055: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1056: LD_INT 0
1058: PPUSH
1059: PPUSH
1060: PPUSH
1061: PPUSH
// uc_side := 5 ;
1062: LD_ADDR_OWVAR 20
1066: PUSH
1067: LD_INT 5
1069: ST_TO_ADDR
// uc_nation := 2 ;
1070: LD_ADDR_OWVAR 21
1074: PUSH
1075: LD_INT 2
1077: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1078: LD_INT 5
1080: PPUSH
1081: CALL_OW 274
1085: PPUSH
1086: LD_INT 1
1088: PPUSH
1089: LD_INT 65
1091: PPUSH
1092: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1096: LD_ADDR_EXP 36
1100: PUSH
1101: LD_STRING Farmer
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: LD_STRING 
1109: PPUSH
1110: CALL 39636 0 3
1114: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1115: LD_ADDR_EXP 37
1119: PUSH
1120: LD_STRING Omar
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: LD_STRING 
1128: PPUSH
1129: CALL 39636 0 3
1133: ST_TO_ADDR
// omarSquad := [ ] ;
1134: LD_ADDR_EXP 40
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSquad := [ ] ;
1141: LD_ADDR_EXP 41
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1148: LD_ADDR_EXP 42
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// omarCargo := [ ] ;
1155: LD_ADDR_EXP 43
1159: PUSH
1160: EMPTY
1161: ST_TO_ADDR
// for i := 1 to 5 do
1162: LD_ADDR_VAR 0 2
1166: PUSH
1167: DOUBLE
1168: LD_INT 1
1170: DEC
1171: ST_TO_ADDR
1172: LD_INT 5
1174: PUSH
1175: FOR_TO
1176: IFFALSE 1334
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1178: LD_INT 0
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 2
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_VAR 0 2
1207: ARRAY
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: CALL_OW 380
// un := CreateHuman ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: CALL_OW 44
1225: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1226: LD_ADDR_EXP 40
1230: PUSH
1231: LD_EXP 40
1235: PUSH
1236: LD_VAR 0 3
1240: UNION
1241: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1242: LD_VAR 0 3
1246: PPUSH
1247: LD_INT 87
1249: PUSH
1250: LD_INT 30
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: LD_INT 91
1259: PUSH
1260: LD_INT 32
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 82
1269: PUSH
1270: LD_INT 15
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 79
1279: PUSH
1280: LD_INT 14
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 82
1289: PUSH
1290: LD_INT 13
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_VAR 0 2
1308: ARRAY
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL 888 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1317: LD_VAR 0 3
1321: PPUSH
1322: LD_INT 93
1324: PPUSH
1325: LD_INT 21
1327: PPUSH
1328: CALL_OW 118
// end ;
1332: GO 1175
1334: POP
1335: POP
// uc_side := 2 ;
1336: LD_ADDR_OWVAR 20
1340: PUSH
1341: LD_INT 2
1343: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 28
1348: PUSH
1349: LD_STRING Heike
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 39636 0 3
1367: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 32
1372: PUSH
1373: LD_STRING Aviradze
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 39636 0 3
1391: ST_TO_ADDR
// tmp := [ ] ;
1392: LD_ADDR_VAR 0 4
1396: PUSH
1397: EMPTY
1398: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1399: LD_ADDR_EXP 29
1403: PUSH
1404: LD_STRING Givi
1406: PPUSH
1407: LD_EXP 1
1411: NOT
1412: PPUSH
1413: LD_EXP 2
1417: PPUSH
1418: CALL 39636 0 3
1422: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1423: LD_ADDR_EXP 30
1427: PUSH
1428: LD_STRING Mike
1430: PPUSH
1431: LD_EXP 1
1435: NOT
1436: PPUSH
1437: LD_EXP 2
1441: PPUSH
1442: CALL 39636 0 3
1446: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1447: LD_ADDR_EXP 31
1451: PUSH
1452: LD_STRING Kamil
1454: PPUSH
1455: LD_EXP 1
1459: NOT
1460: PPUSH
1461: LD_EXP 2
1465: PPUSH
1466: CALL 39636 0 3
1470: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1471: LD_ADDR_EXP 33
1475: PUSH
1476: LD_STRING Kaia
1478: PPUSH
1479: LD_EXP 1
1483: NOT
1484: PPUSH
1485: LD_EXP 2
1489: PPUSH
1490: CALL 39636 0 3
1494: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1495: LD_ADDR_EXP 34
1499: PUSH
1500: LD_STRING Sophia
1502: PPUSH
1503: LD_EXP 1
1507: NOT
1508: PPUSH
1509: LD_EXP 2
1513: PPUSH
1514: CALL 39636 0 3
1518: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1519: LD_ADDR_EXP 35
1523: PUSH
1524: LD_STRING Markov
1526: PPUSH
1527: LD_EXP 1
1531: NOT
1532: PPUSH
1533: LD_EXP 2
1537: PPUSH
1538: CALL 39636 0 3
1542: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1543: LD_ADDR_EXP 42
1547: PUSH
1548: LD_STRING 02_others
1550: PPUSH
1551: CALL_OW 31
1555: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1556: LD_ADDR_VAR 0 4
1560: PUSH
1561: LD_EXP 30
1565: PUSH
1566: LD_EXP 31
1570: PUSH
1571: LD_EXP 33
1575: PUSH
1576: LD_EXP 34
1580: PUSH
1581: LD_EXP 35
1585: PUSH
1586: LD_EXP 29
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_EXP 42
1603: ADD
1604: PUSH
1605: LD_INT 0
1607: DIFF
1608: ST_TO_ADDR
// heikeSquad := tmp ;
1609: LD_ADDR_EXP 41
1613: PUSH
1614: LD_VAR 0 4
1618: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1619: LD_EXP 41
1623: PPUSH
1624: LD_INT 25
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PPUSH
1634: CALL_OW 72
1638: PUSH
1639: LD_INT 3
1641: LESS
1642: IFFALSE 1692
// begin SetClass ( Kaia , 1 ) ;
1644: LD_EXP 33
1648: PPUSH
1649: LD_INT 1
1651: PPUSH
1652: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1656: LD_EXP 30
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1668: LD_EXP 29
1672: PPUSH
1673: LD_INT 1
1675: PPUSH
1676: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1680: LD_EXP 28
1684: PPUSH
1685: LD_INT 1
1687: PPUSH
1688: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1692: LD_ADDR_VAR 0 4
1696: PUSH
1697: LD_VAR 0 4
1701: PUSH
1702: LD_STRING 02_ape
1704: PPUSH
1705: CALL_OW 31
1709: UNION
1710: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1711: LD_EXP 28
1715: PPUSH
1716: LD_INT 92
1718: PPUSH
1719: LD_INT 17
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1729: LD_EXP 36
1733: PPUSH
1734: LD_INT 95
1736: PPUSH
1737: LD_INT 19
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1747: LD_EXP 37
1751: PPUSH
1752: LD_INT 89
1754: PPUSH
1755: LD_INT 25
1757: PPUSH
1758: LD_INT 0
1760: PPUSH
1761: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1765: LD_EXP 32
1769: PPUSH
1770: LD_INT 92
1772: PPUSH
1773: LD_INT 27
1775: PPUSH
1776: LD_INT 0
1778: PPUSH
1779: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1783: LD_EXP 37
1787: PPUSH
1788: LD_EXP 32
1792: PPUSH
1793: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1797: LD_EXP 32
1801: PPUSH
1802: LD_EXP 37
1806: PPUSH
1807: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1811: LD_EXP 28
1815: PUSH
1816: LD_EXP 36
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PPUSH
1825: LD_EXP 37
1829: PPUSH
1830: CALL_OW 119
// if tmp then
1834: LD_VAR 0 4
1838: IFFALSE 1892
// for i in tmp do
1840: LD_ADDR_VAR 0 2
1844: PUSH
1845: LD_VAR 0 4
1849: PUSH
1850: FOR_IN
1851: IFFALSE 1890
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1853: LD_VAR 0 2
1857: PPUSH
1858: LD_INT 94
1860: PPUSH
1861: LD_INT 14
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: LD_INT 0
1869: PPUSH
1870: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1874: LD_VAR 0 2
1878: PPUSH
1879: LD_EXP 28
1883: PPUSH
1884: CALL_OW 119
// end ;
1888: GO 1850
1890: POP
1891: POP
// farmerSquad := [ ] ;
1892: LD_ADDR_EXP 39
1896: PUSH
1897: EMPTY
1898: ST_TO_ADDR
// uc_side := 5 ;
1899: LD_ADDR_OWVAR 20
1903: PUSH
1904: LD_INT 5
1906: ST_TO_ADDR
// uc_nation := 2 ;
1907: LD_ADDR_OWVAR 21
1911: PUSH
1912: LD_INT 2
1914: ST_TO_ADDR
// for i := 1 to 4 do
1915: LD_ADDR_VAR 0 2
1919: PUSH
1920: DOUBLE
1921: LD_INT 1
1923: DEC
1924: ST_TO_ADDR
1925: LD_INT 4
1927: PUSH
1928: FOR_TO
1929: IFFALSE 2007
// begin PrepareHuman ( false , 1 , 2 ) ;
1931: LD_INT 0
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 2
1939: PPUSH
1940: CALL_OW 380
// un := CreateHuman ;
1944: LD_ADDR_VAR 0 3
1948: PUSH
1949: CALL_OW 44
1953: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1954: LD_VAR 0 3
1958: PPUSH
1959: LD_INT 102
1961: PPUSH
1962: LD_INT 27
1964: PPUSH
1965: LD_INT 4
1967: PPUSH
1968: LD_INT 0
1970: PPUSH
1971: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1975: LD_ADDR_EXP 39
1979: PUSH
1980: LD_EXP 39
1984: PUSH
1985: LD_VAR 0 3
1989: UNION
1990: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_EXP 37
2000: PPUSH
2001: CALL_OW 119
// end ;
2005: GO 1928
2007: POP
2008: POP
// for i := 1 to 2 do
2009: LD_ADDR_VAR 0 2
2013: PUSH
2014: DOUBLE
2015: LD_INT 1
2017: DEC
2018: ST_TO_ADDR
2019: LD_INT 2
2021: PUSH
2022: FOR_TO
2023: IFFALSE 2101
// begin PrepareHuman ( false , 2 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 3
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2048: LD_VAR 0 3
2052: PPUSH
2053: LD_INT 108
2055: PPUSH
2056: LD_INT 62
2058: PPUSH
2059: LD_INT 2
2061: PPUSH
2062: LD_INT 0
2064: PPUSH
2065: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2069: LD_ADDR_EXP 39
2073: PUSH
2074: LD_EXP 39
2078: PUSH
2079: LD_VAR 0 3
2083: UNION
2084: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_EXP 37
2094: PPUSH
2095: CALL_OW 119
// end ;
2099: GO 2022
2101: POP
2102: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2103: LD_INT 109
2105: PPUSH
2106: LD_INT 63
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 15
2114: NEG
2115: PPUSH
2116: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2120: LD_INT 109
2122: PPUSH
2123: LD_INT 63
2125: PPUSH
2126: LD_INT 2
2128: PPUSH
2129: CALL_OW 331
// end ;
2133: LD_VAR 0 1
2137: RET
// export function PrepareIbrahim ( x , y ) ; begin
2138: LD_INT 0
2140: PPUSH
// uc_side := 6 ;
2141: LD_ADDR_OWVAR 20
2145: PUSH
2146: LD_INT 6
2148: ST_TO_ADDR
// uc_nation := 3 ;
2149: LD_ADDR_OWVAR 21
2153: PUSH
2154: LD_INT 3
2156: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2157: LD_ADDR_EXP 38
2161: PUSH
2162: LD_STRING IbrahimRu
2164: PPUSH
2165: LD_INT 0
2167: PPUSH
2168: LD_STRING 
2170: PPUSH
2171: CALL 39636 0 3
2175: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2176: LD_EXP 38
2180: PPUSH
2181: LD_VAR 0 1
2185: PPUSH
2186: LD_VAR 0 2
2190: PPUSH
2191: LD_INT 8
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: CALL_OW 50
// end ;
2201: LD_VAR 0 3
2205: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2206: LD_EXP 37
2210: PUSH
2211: LD_EXP 40
2215: ADD
2216: PPUSH
2217: LD_INT 95
2219: PUSH
2220: LD_INT 3
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PPUSH
2227: CALL_OW 72
2231: IFFALSE 2287
2233: GO 2235
2235: DISABLE
2236: LD_INT 0
2238: PPUSH
// begin enable ;
2239: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2240: LD_ADDR_VAR 0 1
2244: PUSH
2245: LD_EXP 37
2249: PUSH
2250: LD_EXP 40
2254: ADD
2255: PPUSH
2256: LD_INT 95
2258: PUSH
2259: LD_INT 3
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 72
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2285
// RemoveUnit ( i ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 64
2283: GO 2271
2285: POP
2286: POP
// end ;
2287: PPOPN 1
2289: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2290: LD_EXP 3
2294: PUSH
2295: LD_EXP 36
2299: PPUSH
2300: LD_INT 4
2302: PPUSH
2303: CALL_OW 308
2307: AND
2308: IFFALSE 3112
2310: GO 2312
2312: DISABLE
2313: LD_INT 0
2315: PPUSH
2316: PPUSH
2317: PPUSH
2318: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2319: LD_EXP 36
2323: PPUSH
2324: LD_INT 110
2326: PPUSH
2327: LD_INT 60
2329: PPUSH
2330: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2334: LD_EXP 36
2338: PPUSH
2339: LD_INT 110
2341: PPUSH
2342: LD_INT 61
2344: PPUSH
2345: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_EXP 39
2358: PPUSH
2359: LD_INT 25
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PPUSH
2369: CALL_OW 72
2373: ST_TO_ADDR
// if tmp then
2374: LD_VAR 0 2
2378: IFFALSE 2472
// begin for i := 1 to 2 do
2380: LD_ADDR_VAR 0 1
2384: PUSH
2385: DOUBLE
2386: LD_INT 1
2388: DEC
2389: ST_TO_ADDR
2390: LD_INT 2
2392: PUSH
2393: FOR_TO
2394: IFFALSE 2470
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2396: LD_VAR 0 2
2400: PUSH
2401: LD_VAR 0 1
2405: ARRAY
2406: PPUSH
2407: LD_INT 5
2409: PPUSH
2410: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2414: LD_VAR 0 2
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: PPUSH
2425: LD_INT 2
2427: PPUSH
2428: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2432: LD_VAR 0 2
2436: PUSH
2437: LD_VAR 0 1
2441: ARRAY
2442: PPUSH
2443: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2447: LD_VAR 0 2
2451: PUSH
2452: LD_VAR 0 1
2456: ARRAY
2457: PPUSH
2458: LD_INT 107
2460: PPUSH
2461: LD_INT 66
2463: PPUSH
2464: CALL_OW 171
// end ;
2468: GO 2393
2470: POP
2471: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2472: LD_ADDR_VAR 0 2
2476: PUSH
2477: LD_EXP 39
2481: PPUSH
2482: LD_INT 25
2484: PUSH
2485: LD_INT 2
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 72
2496: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2497: LD_INT 35
2499: PPUSH
2500: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: LD_EXP 39
2513: PPUSH
2514: LD_INT 25
2516: PUSH
2517: LD_INT 2
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PPUSH
2524: CALL_OW 72
2528: ST_TO_ADDR
// until tmp ;
2529: LD_VAR 0 2
2533: IFFALSE 2497
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2535: LD_VAR 0 2
2539: PPUSH
2540: LD_INT 31
2542: PPUSH
2543: LD_INT 102
2545: PPUSH
2546: LD_INT 69
2548: PPUSH
2549: LD_INT 2
2551: PPUSH
2552: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2556: LD_INT 35
2558: PPUSH
2559: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2563: LD_EXP 39
2567: PPUSH
2568: LD_INT 3
2570: PUSH
2571: LD_INT 60
2573: PUSH
2574: EMPTY
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 25
2583: PUSH
2584: LD_INT 2
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 72
2599: IFFALSE 2556
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2601: LD_ADDR_VAR 0 2
2605: PUSH
2606: LD_EXP 39
2610: PPUSH
2611: LD_INT 25
2613: PUSH
2614: LD_INT 2
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 72
2625: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2626: LD_VAR 0 2
2630: PPUSH
2631: LD_INT 6
2633: PPUSH
2634: LD_INT 116
2636: PPUSH
2637: LD_INT 55
2639: PPUSH
2640: LD_INT 4
2642: PPUSH
2643: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2647: LD_VAR 0 2
2651: PPUSH
2652: LD_INT 4
2654: PPUSH
2655: LD_INT 116
2657: PPUSH
2658: LD_INT 70
2660: PPUSH
2661: LD_INT 5
2663: PPUSH
2664: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2668: LD_VAR 0 2
2672: PPUSH
2673: LD_INT 31
2675: PPUSH
2676: LD_INT 109
2678: PPUSH
2679: LD_INT 50
2681: PPUSH
2682: LD_INT 2
2684: PPUSH
2685: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2689: LD_INT 35
2691: PPUSH
2692: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2696: LD_INT 22
2698: PUSH
2699: LD_INT 5
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 30
2708: PUSH
2709: LD_INT 4
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: LD_INT 3
2718: PUSH
2719: LD_INT 57
2721: PUSH
2722: EMPTY
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: IFFALSE 2689
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2740: LD_ADDR_VAR 0 3
2744: PUSH
2745: LD_INT 22
2747: PUSH
2748: LD_INT 5
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 30
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PUSH
2765: LD_INT 3
2767: PUSH
2768: LD_INT 57
2770: PUSH
2771: EMPTY
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: PUSH
2788: LD_INT 1
2790: ARRAY
2791: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2792: LD_ADDR_VAR 0 2
2796: PUSH
2797: LD_EXP 39
2801: PPUSH
2802: LD_INT 25
2804: PUSH
2805: LD_INT 1
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PPUSH
2812: CALL_OW 72
2816: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2817: LD_VAR 0 2
2821: PPUSH
2822: LD_VAR 0 3
2826: PPUSH
2827: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2838: LD_INT 22
2840: PUSH
2841: LD_INT 5
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: LD_INT 30
2850: PUSH
2851: LD_INT 31
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 57
2863: PUSH
2864: EMPTY
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: LIST
2875: PPUSH
2876: CALL_OW 69
2880: PUSH
2881: LD_INT 2
2883: GREATEREQUAL
2884: IFFALSE 2831
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2886: LD_ADDR_VAR 0 2
2890: PUSH
2891: LD_EXP 39
2895: PPUSH
2896: LD_INT 25
2898: PUSH
2899: LD_INT 2
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 72
2910: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2911: LD_VAR 0 2
2915: PUSH
2916: LD_INT 1
2918: ARRAY
2919: PPUSH
2920: LD_INT 5
2922: PPUSH
2923: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2927: LD_VAR 0 2
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PUSH
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 3
2943: ARRAY
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PPUSH
2949: LD_VAR 0 3
2953: PPUSH
2954: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2958: LD_VAR 0 2
2962: PUSH
2963: LD_INT 2
2965: ARRAY
2966: PUSH
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 3
2974: ARRAY
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PPUSH
2980: LD_INT 1
2982: PPUSH
2983: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2987: LD_VAR 0 2
2991: PUSH
2992: LD_INT 2
2994: ARRAY
2995: PUSH
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 3
3003: ARRAY
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PPUSH
3009: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3013: LD_ADDR_VAR 0 4
3017: PUSH
3018: LD_INT 22
3020: PUSH
3021: LD_INT 5
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 30
3030: PUSH
3031: LD_INT 31
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: ST_TO_ADDR
// for i := 1 to 2 do
3047: LD_ADDR_VAR 0 1
3051: PUSH
3052: DOUBLE
3053: LD_INT 1
3055: DEC
3056: ST_TO_ADDR
3057: LD_INT 2
3059: PUSH
3060: FOR_TO
3061: IFFALSE 3095
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3063: LD_VAR 0 2
3067: PUSH
3068: LD_VAR 0 1
3072: PUSH
3073: LD_INT 1
3075: PLUS
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 4
3082: PUSH
3083: LD_VAR 0 1
3087: ARRAY
3088: PPUSH
3089: CALL_OW 180
3093: GO 3060
3095: POP
3096: POP
// wait ( 1 1$00 ) ;
3097: LD_INT 2100
3099: PPUSH
3100: CALL_OW 67
// farmerBaseReady := true ;
3104: LD_ADDR_EXP 4
3108: PUSH
3109: LD_INT 1
3111: ST_TO_ADDR
// end ;
3112: PPOPN 4
3114: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3115: LD_EXP 4
3119: PUSH
3120: LD_EXP 11
3124: NOT
3125: AND
3126: IFFALSE 3648
3128: GO 3130
3130: DISABLE
3131: LD_INT 0
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
// begin enable ;
3138: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3139: LD_ADDR_VAR 0 3
3143: PUSH
3144: LD_EXP 39
3148: PPUSH
3149: LD_INT 25
3151: PUSH
3152: LD_INT 1
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PPUSH
3159: CALL_OW 72
3163: PUSH
3164: LD_EXP 36
3168: ADD
3169: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3170: LD_ADDR_VAR 0 2
3174: PUSH
3175: LD_EXP 39
3179: PPUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 72
3194: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3195: LD_ADDR_VAR 0 5
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 5
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 21
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_INT 3
3222: PUSH
3223: LD_INT 24
3225: PUSH
3226: LD_INT 1000
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3247: LD_ADDR_VAR 0 4
3251: PUSH
3252: LD_INT 22
3254: PUSH
3255: LD_INT 5
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: LD_INT 30
3264: PUSH
3265: LD_INT 4
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: PPUSH
3276: CALL_OW 69
3280: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: CALL_OW 302
3294: IFFALSE 3358
// for i in sol do
3296: LD_ADDR_VAR 0 1
3300: PUSH
3301: LD_VAR 0 3
3305: PUSH
3306: FOR_IN
3307: IFFALSE 3356
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3309: LD_VAR 0 1
3313: PPUSH
3314: CALL_OW 256
3318: PUSH
3319: LD_INT 999
3321: LESS
3322: PUSH
3323: LD_VAR 0 1
3327: PPUSH
3328: CALL_OW 310
3332: NOT
3333: AND
3334: IFFALSE 3354
// ComEnterUnit ( i , arm [ 1 ] ) ;
3336: LD_VAR 0 1
3340: PPUSH
3341: LD_VAR 0 4
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: CALL_OW 120
3354: GO 3306
3356: POP
3357: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3358: LD_VAR 0 2
3362: NOT
3363: PUSH
3364: LD_INT 22
3366: PUSH
3367: LD_INT 1
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: LD_INT 21
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: EMPTY
3385: LIST
3386: LIST
3387: PPUSH
3388: CALL_OW 69
3392: NOT
3393: AND
3394: IFFALSE 3486
// begin uc_side := 5 ;
3396: LD_ADDR_OWVAR 20
3400: PUSH
3401: LD_INT 5
3403: ST_TO_ADDR
// uc_nation := 2 ;
3404: LD_ADDR_OWVAR 21
3408: PUSH
3409: LD_INT 2
3411: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3412: LD_INT 0
3414: PPUSH
3415: LD_INT 2
3417: PPUSH
3418: LD_INT 2
3420: PPUSH
3421: CALL_OW 380
// eng := CreateHuman ;
3425: LD_ADDR_VAR 0 2
3429: PUSH
3430: CALL_OW 44
3434: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3435: LD_VAR 0 2
3439: PPUSH
3440: LD_INT 102
3442: PPUSH
3443: LD_INT 8
3445: PPUSH
3446: LD_INT 0
3448: PPUSH
3449: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3453: LD_VAR 0 2
3457: PPUSH
3458: LD_INT 110
3460: PPUSH
3461: LD_INT 60
3463: PPUSH
3464: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3468: LD_ADDR_EXP 39
3472: PUSH
3473: LD_EXP 39
3477: PUSH
3478: LD_VAR 0 2
3482: UNION
3483: ST_TO_ADDR
// end else
3484: GO 3648
// begin for i in eng do
3486: LD_ADDR_VAR 0 1
3490: PUSH
3491: LD_VAR 0 2
3495: PUSH
3496: FOR_IN
3497: IFFALSE 3646
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3499: LD_INT 10
3501: PPUSH
3502: LD_INT 1
3504: PPUSH
3505: CALL_OW 287
3509: IFFALSE 3560
// begin if IsInUnit ( i ) then
3511: LD_VAR 0 1
3515: PPUSH
3516: CALL_OW 310
3520: IFFALSE 3531
// ComExitBuilding ( i ) ;
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3531: LD_VAR 0 1
3535: PPUSH
3536: LD_INT 10
3538: PPUSH
3539: CALL_OW 308
3543: NOT
3544: IFFALSE 3558
// AddComMoveToArea ( i , collectFarmerArea ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 10
3553: PPUSH
3554: CALL_OW 173
// end else
3558: GO 3644
// begin if damagedBuilding then
3560: LD_VAR 0 5
3564: IFFALSE 3608
// begin if IsInUnit ( i ) then
3566: LD_VAR 0 1
3570: PPUSH
3571: CALL_OW 310
3575: IFFALSE 3588
// ComExitBuilding ( i ) else
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 122
3586: GO 3606
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3588: LD_VAR 0 1
3592: PPUSH
3593: LD_VAR 0 5
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PPUSH
3602: CALL_OW 130
// end else
3606: GO 3644
// if not IsInUnit ( i ) and not HasTask ( i ) then
3608: LD_VAR 0 1
3612: PPUSH
3613: CALL_OW 310
3617: NOT
3618: PUSH
3619: LD_VAR 0 1
3623: PPUSH
3624: CALL_OW 314
3628: NOT
3629: AND
3630: IFFALSE 3644
// ComEnterUnit ( i , arDepot ) ;
3632: LD_VAR 0 1
3636: PPUSH
3637: LD_INT 5
3639: PPUSH
3640: CALL_OW 120
// end ; end ;
3644: GO 3496
3646: POP
3647: POP
// end ; end ;
3648: PPOPN 5
3650: END
// export function CargoEvacuation ; begin
3651: LD_INT 0
3653: PPUSH
// wait ( 0 0$3 ) ;
3654: LD_INT 105
3656: PPUSH
3657: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3661: LD_ADDR_EXP 21
3665: PUSH
3666: LD_EXP 21
3670: PUSH
3671: LD_INT 1
3673: MINUS
3674: ST_TO_ADDR
// if omarCargoCounter = 0 then
3675: LD_EXP 21
3679: PUSH
3680: LD_INT 0
3682: EQUAL
3683: IFFALSE 3687
// exit ;
3685: GO 3994
// if omarCargo then
3687: LD_EXP 43
3691: IFFALSE 3702
// RemoveUnit ( omarCargo ) ;
3693: LD_EXP 43
3697: PPUSH
3698: CALL_OW 64
// omarCargo := PrepareCargo ;
3702: LD_ADDR_EXP 43
3706: PUSH
3707: CALL 3999 0 0
3711: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3712: LD_EXP 43
3716: PPUSH
3717: LD_INT 0
3719: PPUSH
3720: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3724: LD_EXP 43
3728: PPUSH
3729: LD_INT 107
3731: PPUSH
3732: LD_INT 59
3734: PPUSH
3735: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3739: LD_INT 35
3741: PPUSH
3742: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3746: LD_EXP 43
3750: PPUSH
3751: LD_INT 107
3753: PPUSH
3754: LD_INT 59
3756: PPUSH
3757: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3761: LD_EXP 43
3765: PPUSH
3766: CALL_OW 302
3770: NOT
3771: PUSH
3772: LD_EXP 43
3776: PPUSH
3777: CALL_OW 301
3781: OR
3782: IFFALSE 3786
// exit ;
3784: GO 3994
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3786: LD_EXP 43
3790: PPUSH
3791: LD_INT 107
3793: PPUSH
3794: LD_INT 59
3796: PPUSH
3797: CALL_OW 307
3801: PUSH
3802: LD_EXP 43
3806: PPUSH
3807: LD_INT 5
3809: PPUSH
3810: CALL_OW 296
3814: PUSH
3815: LD_INT 6
3817: LESS
3818: OR
3819: IFFALSE 3739
// SetTag ( omarCargo , 1 ) ;
3821: LD_EXP 43
3825: PPUSH
3826: LD_INT 1
3828: PPUSH
3829: CALL_OW 109
// wait ( 0 0$03 ) ;
3833: LD_INT 105
3835: PPUSH
3836: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3840: LD_EXP 43
3844: PPUSH
3845: LD_INT 5
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3855: LD_EXP 43
3859: PPUSH
3860: LD_INT 103
3862: PPUSH
3863: LD_INT 9
3865: PPUSH
3866: CALL_OW 171
// wait ( 0 0$1 ) ;
3870: LD_INT 35
3872: PPUSH
3873: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3877: LD_EXP 43
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 100
3887: PPUSH
3888: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3892: LD_INT 35
3894: PPUSH
3895: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3899: LD_EXP 43
3903: PPUSH
3904: LD_INT 103
3906: PPUSH
3907: LD_INT 9
3909: PPUSH
3910: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3914: LD_EXP 43
3918: PPUSH
3919: CALL_OW 302
3923: NOT
3924: PUSH
3925: LD_EXP 43
3929: PPUSH
3930: CALL_OW 301
3934: OR
3935: IFFALSE 3939
// exit ;
3937: GO 3994
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3939: LD_EXP 43
3943: PPUSH
3944: LD_INT 103
3946: PPUSH
3947: LD_INT 9
3949: PPUSH
3950: CALL_OW 307
3954: PUSH
3955: LD_EXP 43
3959: PPUSH
3960: LD_INT 3
3962: PPUSH
3963: CALL_OW 308
3967: OR
3968: PUSH
3969: LD_EXP 43
3973: PPUSH
3974: CALL_OW 110
3978: PUSH
3979: LD_INT 0
3981: GREATER
3982: AND
3983: IFFALSE 3892
// RemoveUnit ( omarCargo ) ;
3985: LD_EXP 43
3989: PPUSH
3990: CALL_OW 64
// end ;
3994: LD_VAR 0 1
3998: RET
// export function PrepareCargo ; var un , veh ; begin
3999: LD_INT 0
4001: PPUSH
4002: PPUSH
4003: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4004: LD_ADDR_VAR 0 3
4008: PUSH
4009: LD_INT 5
4011: PPUSH
4012: LD_INT 2
4014: PPUSH
4015: LD_INT 14
4017: PPUSH
4018: LD_INT 1
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: LD_INT 32
4026: PPUSH
4027: LD_INT 80
4029: PPUSH
4030: CALL 325 0 7
4034: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4035: LD_VAR 0 3
4039: PPUSH
4040: LD_INT 4
4042: PPUSH
4043: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 101
4054: PPUSH
4055: LD_INT 8
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4065: LD_INT 0
4067: PPUSH
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 4
4073: PPUSH
4074: CALL_OW 380
// un := CreateHuman ;
4078: LD_ADDR_VAR 0 2
4082: PUSH
4083: CALL_OW 44
4087: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4088: LD_VAR 0 2
4092: PPUSH
4093: LD_VAR 0 3
4097: PPUSH
4098: CALL_OW 52
// result := veh ;
4102: LD_ADDR_VAR 0 1
4106: PUSH
4107: LD_VAR 0 3
4111: ST_TO_ADDR
// end ; end_of_file
4112: LD_VAR 0 1
4116: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
4121: PPUSH
// usForces := [ ] ;
4122: LD_ADDR_EXP 44
4126: PUSH
4127: EMPTY
4128: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4129: LD_ADDR_EXP 46
4133: PUSH
4134: LD_INT 6
4136: PUSH
4137: LD_INT 32
4139: PUSH
4140: LD_INT 27
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: LD_INT 43
4157: PUSH
4158: LD_INT 24
4160: PUSH
4161: LD_INT 5
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 27
4172: PUSH
4173: LD_INT 29
4175: PUSH
4176: LD_INT 21
4178: PUSH
4179: LD_INT 0
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: LIST
4192: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4193: LD_INT 11
4195: PPUSH
4196: CALL_OW 274
4200: PPUSH
4201: LD_INT 1
4203: PPUSH
4204: LD_INT 150
4206: PUSH
4207: LD_INT 120
4209: PUSH
4210: LD_INT 100
4212: PUSH
4213: LD_INT 80
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: PUSH
4222: LD_OWVAR 67
4226: ARRAY
4227: PPUSH
4228: CALL_OW 277
// if Difficulty = 1 then
4232: LD_OWVAR 67
4236: PUSH
4237: LD_INT 1
4239: EQUAL
4240: IFFALSE 4249
// RemoveUnit ( hillBun ) ;
4242: LD_INT 14
4244: PPUSH
4245: CALL_OW 64
// uc_side := 1 ;
4249: LD_ADDR_OWVAR 20
4253: PUSH
4254: LD_INT 1
4256: ST_TO_ADDR
// uc_nation := 1 ;
4257: LD_ADDR_OWVAR 21
4261: PUSH
4262: LD_INT 1
4264: ST_TO_ADDR
// hc_gallery :=  ;
4265: LD_ADDR_OWVAR 33
4269: PUSH
4270: LD_STRING 
4272: ST_TO_ADDR
// hc_name :=  ;
4273: LD_ADDR_OWVAR 26
4277: PUSH
4278: LD_STRING 
4280: ST_TO_ADDR
// hc_importance := 0 ;
4281: LD_ADDR_OWVAR 32
4285: PUSH
4286: LD_INT 0
4288: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 1
4294: PPUSH
4295: LD_INT 3
4297: PPUSH
4298: CALL_OW 380
// usCommander := CreateHuman ;
4302: LD_ADDR_EXP 45
4306: PUSH
4307: CALL_OW 44
4311: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4312: LD_EXP 45
4316: PPUSH
4317: LD_INT 11
4319: PPUSH
4320: CALL_OW 52
// if Difficulty > 1 then
4324: LD_OWVAR 67
4328: PUSH
4329: LD_INT 1
4331: GREATER
4332: IFFALSE 4414
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4334: LD_INT 0
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: LD_INT 1
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: LD_INT 3
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: LIST
4353: PUSH
4354: LD_OWVAR 67
4358: ARRAY
4359: PPUSH
4360: CALL_OW 380
// un := CreateHuman ;
4364: LD_ADDR_VAR 0 3
4368: PUSH
4369: CALL_OW 44
4373: ST_TO_ADDR
// usForces := usForces union un ;
4374: LD_ADDR_EXP 44
4378: PUSH
4379: LD_EXP 44
4383: PUSH
4384: LD_VAR 0 3
4388: UNION
4389: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4390: LD_VAR 0 3
4394: PPUSH
4395: LD_INT 1
4397: PPUSH
4398: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4402: LD_VAR 0 3
4406: PPUSH
4407: LD_INT 14
4409: PPUSH
4410: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4414: LD_ADDR_VAR 0 2
4418: PUSH
4419: DOUBLE
4420: LD_INT 1
4422: DEC
4423: ST_TO_ADDR
4424: LD_INT 2
4426: PUSH
4427: LD_INT 3
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: LD_INT 4
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: PUSH
4442: LD_OWVAR 67
4446: ARRAY
4447: PUSH
4448: FOR_TO
4449: IFFALSE 4595
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4451: LD_INT 0
4453: PPUSH
4454: LD_INT 1
4456: PPUSH
4457: LD_INT 1
4459: PUSH
4460: LD_INT 2
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 3
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: PUSH
4475: LD_OWVAR 67
4479: ARRAY
4480: PPUSH
4481: CALL_OW 380
// un := CreateHuman ;
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: CALL_OW 44
4494: ST_TO_ADDR
// usForces := usForces union un ;
4495: LD_ADDR_EXP 44
4499: PUSH
4500: LD_EXP 44
4504: PUSH
4505: LD_VAR 0 3
4509: UNION
4510: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4511: LD_VAR 0 3
4515: PPUSH
4516: LD_INT 39
4518: PPUSH
4519: LD_INT 24
4521: PPUSH
4522: LD_INT 4
4524: PPUSH
4525: LD_INT 0
4527: PPUSH
4528: CALL_OW 50
// if i < 3 then
4532: LD_VAR 0 2
4536: PUSH
4537: LD_INT 3
4539: LESS
4540: IFFALSE 4593
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4542: LD_VAR 0 3
4546: PPUSH
4547: LD_INT 22
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: LD_INT 58
4559: PUSH
4560: EMPTY
4561: LIST
4562: PUSH
4563: LD_INT 30
4565: PUSH
4566: LD_INT 31
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: PPUSH
4578: CALL_OW 69
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: PPUSH
4589: CALL_OW 120
// end ;
4593: GO 4448
4595: POP
4596: POP
// for i := 1 to 2 do
4597: LD_ADDR_VAR 0 2
4601: PUSH
4602: DOUBLE
4603: LD_INT 1
4605: DEC
4606: ST_TO_ADDR
4607: LD_INT 2
4609: PUSH
4610: FOR_TO
4611: IFFALSE 4675
// begin PrepareHuman ( false , 2 , 2 ) ;
4613: LD_INT 0
4615: PPUSH
4616: LD_INT 2
4618: PPUSH
4619: LD_INT 2
4621: PPUSH
4622: CALL_OW 380
// un := CreateHuman ;
4626: LD_ADDR_VAR 0 3
4630: PUSH
4631: CALL_OW 44
4635: ST_TO_ADDR
// usForces := usForces union un ;
4636: LD_ADDR_EXP 44
4640: PUSH
4641: LD_EXP 44
4645: PUSH
4646: LD_VAR 0 3
4650: UNION
4651: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4652: LD_VAR 0 3
4656: PPUSH
4657: LD_INT 39
4659: PPUSH
4660: LD_INT 24
4662: PPUSH
4663: LD_INT 4
4665: PPUSH
4666: LD_INT 0
4668: PPUSH
4669: CALL_OW 50
// end ;
4673: GO 4610
4675: POP
4676: POP
// PrepareHuman ( false , 4 , 1 ) ;
4677: LD_INT 0
4679: PPUSH
4680: LD_INT 4
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 380
// un := CreateHuman ;
4690: LD_ADDR_VAR 0 3
4694: PUSH
4695: CALL_OW 44
4699: ST_TO_ADDR
// usForces := usForces union un ;
4700: LD_ADDR_EXP 44
4704: PUSH
4705: LD_EXP 44
4709: PUSH
4710: LD_VAR 0 3
4714: UNION
4715: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4716: LD_VAR 0 3
4720: PPUSH
4721: LD_INT 39
4723: PPUSH
4724: LD_INT 24
4726: PPUSH
4727: LD_INT 4
4729: PPUSH
4730: LD_INT 0
4732: PPUSH
4733: CALL_OW 50
// end ;
4737: LD_VAR 0 1
4741: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4742: LD_EXP 44
4746: PUSH
4747: LD_EXP 6
4751: NOT
4752: AND
4753: PUSH
4754: LD_EXP 14
4758: NOT
4759: AND
4760: IFFALSE 5191
4762: GO 4764
4764: DISABLE
4765: LD_INT 0
4767: PPUSH
4768: PPUSH
4769: PPUSH
4770: PPUSH
4771: PPUSH
// begin enable ;
4772: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: LD_EXP 44
4782: PPUSH
4783: LD_INT 25
4785: PUSH
4786: LD_INT 2
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PPUSH
4793: CALL_OW 72
4797: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4798: LD_ADDR_VAR 0 4
4802: PUSH
4803: LD_EXP 44
4807: PPUSH
4808: LD_INT 25
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PPUSH
4818: CALL_OW 72
4822: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4823: LD_ADDR_VAR 0 5
4827: PUSH
4828: LD_EXP 44
4832: PPUSH
4833: LD_INT 25
4835: PUSH
4836: LD_INT 4
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PPUSH
4843: CALL_OW 72
4847: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4848: LD_INT 7
4850: PPUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 2
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PPUSH
4861: CALL_OW 70
4865: PUSH
4866: LD_INT 1
4868: EQUAL
4869: IFFALSE 4945
// for i in sol do
4871: LD_ADDR_VAR 0 1
4875: PUSH
4876: LD_VAR 0 4
4880: PUSH
4881: FOR_IN
4882: IFFALSE 4943
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4884: LD_VAR 0 1
4888: PPUSH
4889: CALL_OW 310
4893: NOT
4894: PUSH
4895: LD_VAR 0 1
4899: PPUSH
4900: CALL_OW 310
4904: PPUSH
4905: CALL_OW 266
4909: PUSH
4910: LD_INT 4
4912: EQUAL
4913: NOT
4914: OR
4915: IFFALSE 4941
// begin ComExitBuilding ( i ) ;
4917: LD_VAR 0 1
4921: PPUSH
4922: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4926: LD_VAR 0 1
4930: PPUSH
4931: LD_INT 37
4933: PPUSH
4934: LD_INT 23
4936: PPUSH
4937: CALL_OW 174
// end ;
4941: GO 4881
4943: POP
4944: POP
// if eng then
4945: LD_VAR 0 3
4949: IFFALSE 5191
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4951: LD_ADDR_VAR 0 2
4955: PUSH
4956: LD_INT 22
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 95
4968: PUSH
4969: LD_INT 7
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 21
4978: PUSH
4979: LD_INT 3
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: LD_INT 24
4991: PUSH
4992: LD_INT 1000
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: PPUSH
5009: CALL_OW 69
5013: ST_TO_ADDR
// if b then
5014: LD_VAR 0 2
5018: IFFALSE 5049
// begin ComExitBuilding ( eng ) ;
5020: LD_VAR 0 3
5024: PPUSH
5025: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: LD_VAR 0 2
5038: PUSH
5039: LD_INT 1
5041: ARRAY
5042: PPUSH
5043: CALL_OW 190
// end else
5047: GO 5191
// begin for i in eng do
5049: LD_ADDR_VAR 0 1
5053: PUSH
5054: LD_VAR 0 3
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5189
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5187
// begin if americanBuildList then
5074: LD_EXP 46
5078: IFFALSE 5163
// begin if IsInUnit ( i ) then
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 310
5089: IFFALSE 5100
// ComExitBuilding ( i ) ;
5091: LD_VAR 0 1
5095: PPUSH
5096: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_EXP 46
5109: PUSH
5110: LD_INT 1
5112: ARRAY
5113: PUSH
5114: LD_INT 1
5116: ARRAY
5117: PPUSH
5118: LD_EXP 46
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PUSH
5127: LD_INT 2
5129: ARRAY
5130: PPUSH
5131: LD_EXP 46
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_INT 3
5142: ARRAY
5143: PPUSH
5144: LD_EXP 46
5148: PUSH
5149: LD_INT 1
5151: ARRAY
5152: PUSH
5153: LD_INT 4
5155: ARRAY
5156: PPUSH
5157: CALL_OW 205
// end else
5161: GO 5187
// if not IsInUnit ( i ) then
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL_OW 310
5172: NOT
5173: IFFALSE 5187
// ComEnterUnit ( i , usDepot ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_INT 11
5182: PPUSH
5183: CALL_OW 120
// end ;
5187: GO 5059
5189: POP
5190: POP
// end ; end ; end ;
5191: PPOPN 5
5193: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5194: LD_INT 0
5196: PPUSH
5197: PPUSH
5198: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5199: LD_ADDR_VAR 0 3
5203: PUSH
5204: LD_INT 35
5206: PUSH
5207: LD_INT 45
5209: PUSH
5210: LD_INT 48
5212: PUSH
5213: LD_INT 82
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: ST_TO_ADDR
// for i in tech do
5222: LD_ADDR_VAR 0 4
5226: PUSH
5227: LD_VAR 0 3
5231: PUSH
5232: FOR_IN
5233: IFFALSE 5251
// AddComResearch ( lab , i ) ;
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_VAR 0 4
5244: PPUSH
5245: CALL_OW 184
5249: GO 5232
5251: POP
5252: POP
// end ;
5253: LD_VAR 0 2
5257: RET
// every 4 4$00 + 4 4$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5258: LD_EXP 12
5262: PUSH
5263: LD_EXP 23
5267: PUSH
5268: LD_EXP 27
5272: LESSEQUAL
5273: AND
5274: IFFALSE 5299
5276: GO 5278
5278: DISABLE
// begin enable ;
5279: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5280: LD_INT 35
5282: PPUSH
5283: LD_INT 2065
5285: PPUSH
5286: CALL_OW 12
5290: PPUSH
5291: CALL_OW 67
// SendConvoy ;
5295: CALL 5405 0 0
// end ;
5299: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5300: LD_EXP 6
5304: PUSH
5305: LD_EXP 18
5309: AND
5310: IFFALSE 5404
5312: GO 5314
5314: DISABLE
// begin if americanHasEscaped then
5315: LD_EXP 8
5319: IFFALSE 5330
// wait ( 3 3$20 ) else
5321: LD_INT 7000
5323: PPUSH
5324: CALL_OW 67
5328: GO 5337
// wait ( 6 6$40 ) ;
5330: LD_INT 14000
5332: PPUSH
5333: CALL_OW 67
// SendAttack ;
5337: CALL 6178 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 5 5$20 , 4 4$50 ] [ Difficulty ] ) ;
5341: LD_INT 14000
5343: PUSH
5344: LD_INT 11900
5346: PUSH
5347: LD_INT 11200
5349: PUSH
5350: LD_INT 10150
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: PUSH
5359: LD_OWVAR 67
5363: ARRAY
5364: PPUSH
5365: CALL_OW 67
// SendAttack ;
5369: CALL 6178 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5373: LD_EXP 19
5377: PUSH
5378: LD_INT 5
5380: PUSH
5381: LD_INT 6
5383: PUSH
5384: LD_INT 7
5386: PUSH
5387: LD_INT 8
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: PUSH
5396: LD_OWVAR 67
5400: ARRAY
5401: LESS
5402: IFFALSE 5341
// end ;
5404: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5405: LD_INT 0
5407: PPUSH
5408: PPUSH
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
5414: PPUSH
// road := rand ( 1 , 2 ) ;
5415: LD_ADDR_VAR 0 4
5419: PUSH
5420: LD_INT 1
5422: PPUSH
5423: LD_INT 2
5425: PPUSH
5426: CALL_OW 12
5430: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5431: LD_ADDR_VAR 0 8
5435: PUSH
5436: LD_INT 3
5438: PUSH
5439: LD_INT 8
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: LD_VAR 0 4
5450: ARRAY
5451: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5452: LD_ADDR_VAR 0 5
5456: PUSH
5457: LD_INT 35
5459: PUSH
5460: LD_INT 66
5462: PUSH
5463: LD_INT 1
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: PUSH
5471: LD_INT 101
5473: PUSH
5474: LD_INT 8
5476: PUSH
5477: LD_INT 4
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5489: LD_ADDR_VAR 0 6
5493: PUSH
5494: LD_INT 34
5496: PUSH
5497: LD_INT 67
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 38
5506: PUSH
5507: LD_INT 62
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: LD_INT 43
5516: PUSH
5517: LD_INT 54
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 57
5526: PUSH
5527: LD_INT 57
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PUSH
5534: LD_INT 77
5536: PUSH
5537: LD_INT 71
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PUSH
5544: LD_INT 86
5546: PUSH
5547: LD_INT 60
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PUSH
5554: LD_INT 89
5556: PUSH
5557: LD_INT 35
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 93
5566: PUSH
5567: LD_INT 17
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: LD_INT 97
5576: PUSH
5577: LD_INT 10
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 103
5586: PUSH
5587: LD_INT 9
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: ST_TO_ADDR
// if road = 2 then
5606: LD_VAR 0 4
5610: PUSH
5611: LD_INT 2
5613: EQUAL
5614: IFFALSE 5631
// points := ReverseArray ( points ) ;
5616: LD_ADDR_VAR 0 6
5620: PUSH
5621: LD_VAR 0 6
5625: PPUSH
5626: CALL 980 0 1
5630: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5631: LD_INT 4
5633: PPUSH
5634: LD_INT 1
5636: PPUSH
5637: LD_INT 2
5639: PPUSH
5640: LD_INT 1
5642: PPUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_INT 12
5648: PPUSH
5649: LD_INT 80
5651: PPUSH
5652: CALL 325 0 7
// veh := CreateVehicle ;
5656: LD_ADDR_VAR 0 3
5660: PUSH
5661: CALL_OW 45
5665: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5666: LD_VAR 0 3
5670: PPUSH
5671: LD_VAR 0 5
5675: PUSH
5676: LD_VAR 0 4
5680: ARRAY
5681: PUSH
5682: LD_INT 3
5684: ARRAY
5685: PPUSH
5686: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5690: LD_VAR 0 3
5694: PPUSH
5695: LD_VAR 0 5
5699: PUSH
5700: LD_VAR 0 4
5704: ARRAY
5705: PUSH
5706: LD_INT 1
5708: ARRAY
5709: PPUSH
5710: LD_VAR 0 5
5714: PUSH
5715: LD_VAR 0 4
5719: ARRAY
5720: PUSH
5721: LD_INT 2
5723: ARRAY
5724: PPUSH
5725: LD_INT 0
5727: PPUSH
5728: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5732: LD_INT 0
5734: PPUSH
5735: LD_INT 1
5737: PPUSH
5738: LD_OWVAR 67
5742: PPUSH
5743: CALL_OW 380
// un := CreateHuman ;
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: CALL_OW 44
5756: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5757: LD_VAR 0 2
5761: PPUSH
5762: LD_VAR 0 3
5766: PPUSH
5767: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5771: LD_INT 70
5773: PUSH
5774: LD_INT 66
5776: PUSH
5777: LD_INT 62
5779: PUSH
5780: LD_INT 58
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: PUSH
5789: LD_OWVAR 67
5793: ARRAY
5794: PPUSH
5795: CALL_OW 13
5799: PUSH
5800: LD_OWVAR 1
5804: PUSH
5805: LD_INT 30
5807: MOD
5808: PLUS
5809: PUSH
5810: LD_EXP 23
5814: PUSH
5815: LD_INT 4
5817: LESS
5818: OR
5819: IFFALSE 5836
// SetCargo ( veh , mat_cans , 100 ) ;
5821: LD_VAR 0 3
5825: PPUSH
5826: LD_INT 1
5828: PPUSH
5829: LD_INT 100
5831: PPUSH
5832: CALL_OW 290
// for i := 2 to points do
5836: LD_ADDR_VAR 0 7
5840: PUSH
5841: DOUBLE
5842: LD_INT 2
5844: DEC
5845: ST_TO_ADDR
5846: LD_VAR 0 6
5850: PUSH
5851: FOR_TO
5852: IFFALSE 5895
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5854: LD_VAR 0 3
5858: PPUSH
5859: LD_VAR 0 6
5863: PUSH
5864: LD_VAR 0 7
5868: ARRAY
5869: PUSH
5870: LD_INT 1
5872: ARRAY
5873: PPUSH
5874: LD_VAR 0 6
5878: PUSH
5879: LD_VAR 0 7
5883: ARRAY
5884: PUSH
5885: LD_INT 2
5887: ARRAY
5888: PPUSH
5889: CALL_OW 171
5893: GO 5851
5895: POP
5896: POP
// convoyCounter := convoyCounter + 1 ;
5897: LD_ADDR_EXP 23
5901: PUSH
5902: LD_EXP 23
5906: PUSH
5907: LD_INT 1
5909: PLUS
5910: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5911: LD_INT 35
5913: PPUSH
5914: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5918: LD_VAR 0 3
5922: PPUSH
5923: CALL_OW 255
5927: PUSH
5928: LD_INT 4
5930: NONEQUAL
5931: IFFALSE 5944
// begin ComStop ( veh ) ;
5933: LD_VAR 0 3
5937: PPUSH
5938: CALL_OW 141
// exit ;
5942: GO 6173
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5944: LD_VAR 0 3
5948: PPUSH
5949: CALL_OW 314
5953: NOT
5954: PUSH
5955: LD_VAR 0 3
5959: PPUSH
5960: CALL_OW 302
5964: AND
5965: IFFALSE 6006
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5967: LD_VAR 0 3
5971: PPUSH
5972: LD_VAR 0 6
5976: PUSH
5977: LD_VAR 0 6
5981: ARRAY
5982: PUSH
5983: LD_INT 1
5985: ARRAY
5986: PPUSH
5987: LD_VAR 0 6
5991: PUSH
5992: LD_VAR 0 6
5996: ARRAY
5997: PUSH
5998: LD_INT 2
6000: ARRAY
6001: PPUSH
6002: CALL_OW 111
// if not IsInUnit ( un ) then
6006: LD_VAR 0 2
6010: PPUSH
6011: CALL_OW 310
6015: NOT
6016: IFFALSE 6057
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6018: LD_VAR 0 2
6022: PPUSH
6023: LD_VAR 0 6
6027: PUSH
6028: LD_VAR 0 6
6032: ARRAY
6033: PUSH
6034: LD_INT 1
6036: ARRAY
6037: PPUSH
6038: LD_VAR 0 6
6042: PUSH
6043: LD_VAR 0 6
6047: ARRAY
6048: PUSH
6049: LD_INT 2
6051: ARRAY
6052: PPUSH
6053: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_VAR 0 8
6066: PPUSH
6067: CALL_OW 308
6071: PUSH
6072: LD_VAR 0 2
6076: PPUSH
6077: LD_VAR 0 8
6081: PPUSH
6082: CALL_OW 308
6086: OR
6087: IFFALSE 5911
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6089: LD_VAR 0 2
6093: PPUSH
6094: CALL_OW 302
6098: PUSH
6099: LD_VAR 0 3
6103: PPUSH
6104: CALL_OW 302
6108: NOT
6109: AND
6110: PUSH
6111: LD_VAR 0 2
6115: PPUSH
6116: LD_VAR 0 8
6120: PPUSH
6121: CALL_OW 308
6125: AND
6126: IFFALSE 6137
// RemoveUnit ( un ) ;
6128: LD_VAR 0 2
6132: PPUSH
6133: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6137: LD_VAR 0 3
6141: PPUSH
6142: LD_VAR 0 8
6146: PPUSH
6147: CALL_OW 308
6151: PUSH
6152: LD_VAR 0 3
6156: PPUSH
6157: CALL_OW 302
6161: AND
6162: IFFALSE 6173
// RemoveUnit ( veh ) ;
6164: LD_VAR 0 3
6168: PPUSH
6169: CALL_OW 64
// end ;
6173: LD_VAR 0 1
6177: RET
// export function SendAttack ; var un , veh , i ; begin
6178: LD_INT 0
6180: PPUSH
6181: PPUSH
6182: PPUSH
6183: PPUSH
// if ingame_video then
6184: LD_OWVAR 52
6188: IFFALSE 6211
// begin repeat wait ( 0 0$1 ) ;
6190: LD_INT 35
6192: PPUSH
6193: CALL_OW 67
// until not ingame_video ;
6197: LD_OWVAR 52
6201: NOT
6202: IFFALSE 6190
// wait ( 0 0$5 ) ;
6204: LD_INT 175
6206: PPUSH
6207: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6211: LD_INT 22
6213: PUSH
6214: LD_INT 1
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 21
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PPUSH
6235: CALL_OW 69
6239: PUSH
6240: LD_INT 10
6242: GREATER
6243: IFFALSE 6286
// begin repeat wait ( 0 0$1 ) ;
6245: LD_INT 35
6247: PPUSH
6248: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6252: LD_INT 22
6254: PUSH
6255: LD_INT 1
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PUSH
6262: LD_INT 21
6264: PUSH
6265: LD_INT 1
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PPUSH
6276: CALL_OW 69
6280: PUSH
6281: LD_INT 10
6283: LESSEQUAL
6284: IFFALSE 6245
// end ; IncomingAttack ;
6286: CALL 15322 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6290: LD_INT 2100
6292: PPUSH
6293: LD_INT 3500
6295: PPUSH
6296: CALL_OW 12
6300: PPUSH
6301: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6305: LD_ADDR_VAR 0 4
6309: PUSH
6310: DOUBLE
6311: LD_INT 1
6313: DEC
6314: ST_TO_ADDR
6315: LD_INT 3
6317: PUSH
6318: LD_INT 4
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 5
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: PUSH
6333: LD_OWVAR 67
6337: ARRAY
6338: PUSH
6339: LD_EXP 19
6343: PUSH
6344: LD_INT 3
6346: DIV
6347: PLUS
6348: PUSH
6349: FOR_TO
6350: IFFALSE 6466
// begin uc_side := 1 ;
6352: LD_ADDR_OWVAR 20
6356: PUSH
6357: LD_INT 1
6359: ST_TO_ADDR
// uc_nation := 1 ;
6360: LD_ADDR_OWVAR 21
6364: PUSH
6365: LD_INT 1
6367: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6368: LD_INT 0
6370: PPUSH
6371: LD_INT 1
6373: PPUSH
6374: LD_INT 2
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 4
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: PUSH
6392: LD_OWVAR 67
6396: ARRAY
6397: PPUSH
6398: CALL_OW 380
// un := CreateHuman ;
6402: LD_ADDR_VAR 0 2
6406: PUSH
6407: CALL_OW 44
6411: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6412: LD_VAR 0 2
6416: PPUSH
6417: LD_INT 37
6419: PPUSH
6420: LD_INT 70
6422: PPUSH
6423: LD_INT 3
6425: PPUSH
6426: LD_INT 0
6428: PPUSH
6429: CALL_OW 50
// usAttackers := usAttackers union un ;
6433: LD_ADDR_EXP 47
6437: PUSH
6438: LD_EXP 47
6442: PUSH
6443: LD_VAR 0 2
6447: UNION
6448: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_INT 40
6456: PPUSH
6457: LD_INT 65
6459: PPUSH
6460: CALL_OW 111
// end ;
6464: GO 6349
6466: POP
6467: POP
// uc_side := 1 ;
6468: LD_ADDR_OWVAR 20
6472: PUSH
6473: LD_INT 1
6475: ST_TO_ADDR
// uc_nation := 1 ;
6476: LD_ADDR_OWVAR 21
6480: PUSH
6481: LD_INT 1
6483: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6484: LD_INT 0
6486: PPUSH
6487: LD_INT 4
6489: PPUSH
6490: LD_INT 2
6492: PPUSH
6493: CALL_OW 380
// un := CreateHuman ;
6497: LD_ADDR_VAR 0 2
6501: PUSH
6502: CALL_OW 44
6506: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6507: LD_VAR 0 2
6511: PPUSH
6512: LD_INT 37
6514: PPUSH
6515: LD_INT 70
6517: PPUSH
6518: LD_INT 3
6520: PPUSH
6521: LD_INT 0
6523: PPUSH
6524: CALL_OW 50
// usAttackers := usAttackers union un ;
6528: LD_ADDR_EXP 47
6532: PUSH
6533: LD_EXP 47
6537: PUSH
6538: LD_VAR 0 2
6542: UNION
6543: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6544: LD_VAR 0 2
6548: PPUSH
6549: LD_INT 40
6551: PPUSH
6552: LD_INT 65
6554: PPUSH
6555: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6559: LD_ADDR_VAR 0 4
6563: PUSH
6564: DOUBLE
6565: LD_INT 1
6567: DEC
6568: ST_TO_ADDR
6569: LD_OWVAR 67
6573: PUSH
6574: LD_EXP 19
6578: PUSH
6579: LD_INT 4
6581: DIV
6582: PLUS
6583: PUSH
6584: FOR_TO
6585: IFFALSE 6781
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6587: LD_ADDR_VAR 0 3
6591: PUSH
6592: LD_INT 1
6594: PPUSH
6595: LD_INT 1
6597: PPUSH
6598: LD_INT 2
6600: PUSH
6601: LD_INT 2
6603: PUSH
6604: LD_INT 3
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: LIST
6611: PUSH
6612: LD_INT 1
6614: PPUSH
6615: LD_INT 3
6617: PPUSH
6618: CALL_OW 12
6622: ARRAY
6623: PPUSH
6624: LD_INT 1
6626: PPUSH
6627: LD_INT 1
6629: PPUSH
6630: LD_INT 4
6632: PUSH
6633: LD_INT 3
6635: PUSH
6636: LD_INT 2
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 1
6646: PPUSH
6647: LD_INT 3
6649: PPUSH
6650: CALL_OW 12
6654: ARRAY
6655: PPUSH
6656: LD_INT 90
6658: PPUSH
6659: CALL 325 0 7
6663: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6664: LD_VAR 0 3
6668: PPUSH
6669: LD_INT 35
6671: PPUSH
6672: LD_INT 65
6674: PPUSH
6675: LD_INT 0
6677: PPUSH
6678: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6682: LD_INT 0
6684: PPUSH
6685: LD_INT 3
6687: PPUSH
6688: LD_OWVAR 67
6692: PUSH
6693: LD_INT 1
6695: PLUS
6696: PPUSH
6697: CALL_OW 380
// un := CreateHuman ;
6701: LD_ADDR_VAR 0 2
6705: PUSH
6706: CALL_OW 44
6710: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 3
6720: PPUSH
6721: CALL_OW 52
// usAttackers := usAttackers union un ;
6725: LD_ADDR_EXP 47
6729: PUSH
6730: LD_EXP 47
6734: PUSH
6735: LD_VAR 0 2
6739: UNION
6740: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6741: LD_VAR 0 3
6745: PPUSH
6746: LD_INT 39
6748: PPUSH
6749: LD_INT 60
6751: PPUSH
6752: CALL_OW 111
// wait ( 0 0$3 ) ;
6756: LD_INT 105
6758: PPUSH
6759: CALL_OW 67
// usAttackers := usAttackers union veh ;
6763: LD_ADDR_EXP 47
6767: PUSH
6768: LD_EXP 47
6772: PUSH
6773: LD_VAR 0 3
6777: UNION
6778: ST_TO_ADDR
// end ;
6779: GO 6584
6781: POP
6782: POP
// attackWave := attackWave + 1 ;
6783: LD_ADDR_EXP 19
6787: PUSH
6788: LD_EXP 19
6792: PUSH
6793: LD_INT 1
6795: PLUS
6796: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6797: LD_EXP 24
6801: PPUSH
6802: CALL_OW 427
// end ;
6806: LD_VAR 0 1
6810: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6811: LD_INT 0
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
6820: PPUSH
6821: PPUSH
6822: PPUSH
6823: PPUSH
// if retreatAllowed then
6824: LD_EXP 11
6828: IFFALSE 6840
// strategy := 2 else
6830: LD_ADDR_VAR 0 5
6834: PUSH
6835: LD_INT 2
6837: ST_TO_ADDR
6838: GO 6856
// strategy := rand ( 0 , 2 ) ;
6840: LD_ADDR_VAR 0 5
6844: PUSH
6845: LD_INT 0
6847: PPUSH
6848: LD_INT 2
6850: PPUSH
6851: CALL_OW 12
6855: ST_TO_ADDR
// attackFormula := [ ] ;
6856: LD_ADDR_VAR 0 6
6860: PUSH
6861: EMPTY
6862: ST_TO_ADDR
// case strategy of 0 :
6863: LD_VAR 0 5
6867: PUSH
6868: LD_INT 0
6870: DOUBLE
6871: EQUAL
6872: IFTRUE 6876
6874: GO 7206
6876: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6877: LD_INT 11
6879: PPUSH
6880: LD_INT 22
6882: PUSH
6883: LD_INT 2
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 4
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PPUSH
6904: CALL_OW 70
6908: NOT
6909: IFFALSE 6981
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6911: LD_ADDR_VAR 0 6
6915: PUSH
6916: LD_INT 41
6918: PUSH
6919: LD_INT 34
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: PUSH
6929: LD_INT 53
6931: PUSH
6932: LD_INT 62
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 37
6941: PUSH
6942: LD_INT 63
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 44
6951: PUSH
6952: LD_INT 45
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: LD_INT 37
6961: PUSH
6962: LD_INT 28
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: ST_TO_ADDR
6979: GO 7204
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6981: LD_INT 12
6983: PPUSH
6984: LD_INT 22
6986: PUSH
6987: LD_INT 2
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 2
6996: PUSH
6997: LD_INT 30
6999: PUSH
7000: LD_INT 4
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 30
7009: PUSH
7010: LD_INT 31
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 30
7019: PUSH
7020: LD_INT 32
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PPUSH
7037: CALL_OW 70
7041: NOT
7042: IFFALSE 7125
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7044: LD_ADDR_VAR 0 6
7048: PUSH
7049: LD_INT 27
7051: PUSH
7052: LD_INT 42
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 27
7061: PUSH
7062: LD_INT 32
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 53
7075: PUSH
7076: LD_INT 62
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 37
7085: PUSH
7086: LD_INT 63
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PUSH
7093: LD_INT 44
7095: PUSH
7096: LD_INT 45
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 37
7105: PUSH
7106: LD_INT 28
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: ST_TO_ADDR
7123: GO 7204
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7125: LD_ADDR_VAR 0 6
7129: PUSH
7130: LD_INT 71
7132: PUSH
7133: LD_INT 67
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 54
7142: PUSH
7143: LD_INT 35
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PUSH
7154: LD_INT 63
7156: PUSH
7157: LD_INT 40
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 37
7166: PUSH
7167: LD_INT 63
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 44
7176: PUSH
7177: LD_INT 45
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 37
7186: PUSH
7187: LD_INT 28
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: ST_TO_ADDR
// end ; 1 :
7204: GO 7409
7206: LD_INT 1
7208: DOUBLE
7209: EQUAL
7210: IFTRUE 7214
7212: GO 7318
7214: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7215: LD_ADDR_VAR 0 6
7219: PUSH
7220: LD_INT 71
7222: PUSH
7223: LD_INT 67
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: LD_INT 82
7232: PUSH
7233: LD_INT 23
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 53
7242: PUSH
7243: LD_INT 7
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 43
7252: PUSH
7253: LD_INT 10
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 53
7268: PUSH
7269: LD_INT 62
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: LD_INT 37
7278: PUSH
7279: LD_INT 63
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: LD_INT 44
7288: PUSH
7289: LD_INT 45
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 37
7298: PUSH
7299: LD_INT 28
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: ST_TO_ADDR
7316: GO 7409
7318: LD_INT 2
7320: DOUBLE
7321: EQUAL
7322: IFTRUE 7326
7324: GO 7408
7326: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7327: LD_ADDR_VAR 0 6
7331: PUSH
7332: LD_INT 90
7334: PUSH
7335: LD_INT 59
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 108
7344: PUSH
7345: LD_INT 64
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 82
7358: PUSH
7359: LD_INT 75
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PUSH
7366: LD_INT 73
7368: PUSH
7369: LD_INT 67
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 101
7378: PUSH
7379: LD_INT 65
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: LD_INT 108
7388: PUSH
7389: LD_INT 62
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: ST_TO_ADDR
7406: GO 7409
7408: POP
// if not attackFormula then
7409: LD_VAR 0 6
7413: NOT
7414: IFFALSE 7418
// exit ;
7416: GO 9096
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7418: LD_ADDR_VAR 0 7
7422: PUSH
7423: LD_EXP 47
7427: PPUSH
7428: LD_INT 25
7430: PUSH
7431: LD_INT 1
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PPUSH
7438: CALL_OW 72
7442: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7443: LD_ADDR_VAR 0 8
7447: PUSH
7448: LD_EXP 47
7452: PPUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 4
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PPUSH
7463: CALL_OW 72
7467: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7468: LD_ADDR_VAR 0 9
7472: PUSH
7473: LD_EXP 47
7477: PPUSH
7478: LD_INT 25
7480: PUSH
7481: LD_INT 3
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PPUSH
7488: CALL_OW 72
7492: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7493: LD_ADDR_VAR 0 10
7497: PUSH
7498: LD_EXP 47
7502: PPUSH
7503: LD_INT 21
7505: PUSH
7506: LD_INT 2
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 72
7517: ST_TO_ADDR
// if sci then
7518: LD_VAR 0 8
7522: IFFALSE 7559
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7524: LD_VAR 0 8
7528: PPUSH
7529: LD_VAR 0 6
7533: PUSH
7534: LD_INT 2
7536: ARRAY
7537: PUSH
7538: LD_INT 1
7540: ARRAY
7541: PPUSH
7542: LD_VAR 0 6
7546: PUSH
7547: LD_INT 2
7549: ARRAY
7550: PUSH
7551: LD_INT 2
7553: ARRAY
7554: PPUSH
7555: CALL_OW 111
// repeat wait ( 10 ) ;
7559: LD_INT 10
7561: PPUSH
7562: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7566: LD_ADDR_VAR 0 7
7570: PUSH
7571: LD_EXP 47
7575: PPUSH
7576: LD_INT 25
7578: PUSH
7579: LD_INT 1
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 72
7590: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7591: LD_ADDR_VAR 0 8
7595: PUSH
7596: LD_EXP 47
7600: PPUSH
7601: LD_INT 25
7603: PUSH
7604: LD_INT 4
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PPUSH
7611: CALL_OW 72
7615: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7616: LD_ADDR_VAR 0 9
7620: PUSH
7621: LD_EXP 47
7625: PPUSH
7626: LD_INT 25
7628: PUSH
7629: LD_INT 3
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 72
7640: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7641: LD_ADDR_VAR 0 10
7645: PUSH
7646: LD_EXP 47
7650: PPUSH
7651: LD_INT 21
7653: PUSH
7654: LD_INT 2
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: ST_TO_ADDR
// if sol then
7666: LD_VAR 0 7
7670: IFFALSE 8091
// begin for i in sol do
7672: LD_ADDR_VAR 0 2
7676: PUSH
7677: LD_VAR 0 7
7681: PUSH
7682: FOR_IN
7683: IFFALSE 8089
// begin tag := GetTag ( i ) ;
7685: LD_ADDR_VAR 0 4
7689: PUSH
7690: LD_VAR 0 2
7694: PPUSH
7695: CALL_OW 110
7699: ST_TO_ADDR
// if not tag then
7700: LD_VAR 0 4
7704: NOT
7705: IFFALSE 7814
// begin if GetLives ( i ) = 1000 then
7707: LD_VAR 0 2
7711: PPUSH
7712: CALL_OW 256
7716: PUSH
7717: LD_INT 1000
7719: EQUAL
7720: IFFALSE 7736
// SetTag ( i , 1 ) else
7722: LD_VAR 0 2
7726: PPUSH
7727: LD_INT 1
7729: PPUSH
7730: CALL_OW 109
7734: GO 7812
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7736: LD_VAR 0 2
7740: PPUSH
7741: LD_VAR 0 6
7745: PUSH
7746: LD_INT 2
7748: ARRAY
7749: PUSH
7750: LD_INT 1
7752: ARRAY
7753: PPUSH
7754: LD_VAR 0 6
7758: PUSH
7759: LD_INT 2
7761: ARRAY
7762: PUSH
7763: LD_INT 2
7765: ARRAY
7766: PPUSH
7767: CALL_OW 297
7771: PUSH
7772: LD_INT 10
7774: GREATER
7775: IFFALSE 7812
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7777: LD_VAR 0 2
7781: PPUSH
7782: LD_VAR 0 6
7786: PUSH
7787: LD_INT 2
7789: ARRAY
7790: PUSH
7791: LD_INT 1
7793: ARRAY
7794: PPUSH
7795: LD_VAR 0 6
7799: PUSH
7800: LD_INT 2
7802: ARRAY
7803: PUSH
7804: LD_INT 2
7806: ARRAY
7807: PPUSH
7808: CALL_OW 111
// end else
7812: GO 8087
// begin if GetLives ( i ) < 760 then
7814: LD_VAR 0 2
7818: PPUSH
7819: CALL_OW 256
7823: PUSH
7824: LD_INT 760
7826: LESS
7827: IFFALSE 7878
// begin SetTag ( i , 0 ) ;
7829: LD_VAR 0 2
7833: PPUSH
7834: LD_INT 0
7836: PPUSH
7837: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7841: LD_VAR 0 2
7845: PPUSH
7846: LD_VAR 0 6
7850: PUSH
7851: LD_INT 2
7853: ARRAY
7854: PUSH
7855: LD_INT 1
7857: ARRAY
7858: PPUSH
7859: LD_VAR 0 6
7863: PUSH
7864: LD_INT 2
7866: ARRAY
7867: PUSH
7868: LD_INT 2
7870: ARRAY
7871: PPUSH
7872: CALL_OW 111
// end else
7876: GO 8087
// if tag <= attackFormula [ 1 ] then
7878: LD_VAR 0 4
7882: PUSH
7883: LD_VAR 0 6
7887: PUSH
7888: LD_INT 1
7890: ARRAY
7891: LESSEQUAL
7892: IFFALSE 8053
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7894: LD_VAR 0 2
7898: PPUSH
7899: LD_VAR 0 6
7903: PUSH
7904: LD_INT 1
7906: ARRAY
7907: PUSH
7908: LD_VAR 0 4
7912: ARRAY
7913: PUSH
7914: LD_INT 1
7916: ARRAY
7917: PPUSH
7918: LD_VAR 0 6
7922: PUSH
7923: LD_INT 1
7925: ARRAY
7926: PUSH
7927: LD_VAR 0 4
7931: ARRAY
7932: PUSH
7933: LD_INT 2
7935: ARRAY
7936: PPUSH
7937: CALL_OW 297
7941: PUSH
7942: LD_INT 6
7944: GREATER
7945: IFFALSE 7996
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7947: LD_VAR 0 2
7951: PPUSH
7952: LD_VAR 0 6
7956: PUSH
7957: LD_INT 1
7959: ARRAY
7960: PUSH
7961: LD_VAR 0 4
7965: ARRAY
7966: PUSH
7967: LD_INT 1
7969: ARRAY
7970: PPUSH
7971: LD_VAR 0 6
7975: PUSH
7976: LD_INT 1
7978: ARRAY
7979: PUSH
7980: LD_VAR 0 4
7984: ARRAY
7985: PUSH
7986: LD_INT 2
7988: ARRAY
7989: PPUSH
7990: CALL_OW 114
7994: GO 8051
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7996: LD_INT 81
7998: PUSH
7999: LD_INT 1
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 91
8008: PUSH
8009: LD_VAR 0 2
8013: PUSH
8014: LD_INT 10
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PPUSH
8026: CALL_OW 69
8030: NOT
8031: IFFALSE 8051
// SetTag ( i , tag + 1 ) ;
8033: LD_VAR 0 2
8037: PPUSH
8038: LD_VAR 0 4
8042: PUSH
8043: LD_INT 1
8045: PLUS
8046: PPUSH
8047: CALL_OW 109
// end else
8051: GO 8087
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8053: LD_VAR 0 2
8057: PPUSH
8058: LD_INT 81
8060: PUSH
8061: LD_INT 1
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: PPUSH
8068: CALL_OW 69
8072: PPUSH
8073: LD_VAR 0 2
8077: PPUSH
8078: CALL_OW 74
8082: PPUSH
8083: CALL_OW 115
// end ; end ;
8087: GO 7682
8089: POP
8090: POP
// end ; if sci then
8091: LD_VAR 0 8
8095: IFFALSE 8364
// begin if not sol and not mech then
8097: LD_VAR 0 7
8101: NOT
8102: PUSH
8103: LD_VAR 0 9
8107: NOT
8108: AND
8109: IFFALSE 8161
// begin for i in sci do
8111: LD_ADDR_VAR 0 2
8115: PUSH
8116: LD_VAR 0 8
8120: PUSH
8121: FOR_IN
8122: IFFALSE 8157
// begin usForces := usForces union i ;
8124: LD_ADDR_EXP 44
8128: PUSH
8129: LD_EXP 44
8133: PUSH
8134: LD_VAR 0 2
8138: UNION
8139: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8140: LD_VAR 0 2
8144: PPUSH
8145: LD_INT 34
8147: PPUSH
8148: LD_INT 68
8150: PPUSH
8151: CALL_OW 111
// end ;
8155: GO 8121
8157: POP
8158: POP
// end else
8159: GO 8364
// for i in sci do
8161: LD_ADDR_VAR 0 2
8165: PUSH
8166: LD_VAR 0 8
8170: PUSH
8171: FOR_IN
8172: IFFALSE 8362
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8174: LD_VAR 0 2
8178: PPUSH
8179: LD_VAR 0 6
8183: PUSH
8184: LD_INT 2
8186: ARRAY
8187: PUSH
8188: LD_INT 1
8190: ARRAY
8191: PPUSH
8192: LD_VAR 0 6
8196: PUSH
8197: LD_INT 2
8199: ARRAY
8200: PUSH
8201: LD_INT 2
8203: ARRAY
8204: PPUSH
8205: CALL_OW 297
8209: PUSH
8210: LD_INT 10
8212: GREATER
8213: IFFALSE 8252
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8215: LD_VAR 0 2
8219: PPUSH
8220: LD_VAR 0 6
8224: PUSH
8225: LD_INT 2
8227: ARRAY
8228: PUSH
8229: LD_INT 1
8231: ARRAY
8232: PPUSH
8233: LD_VAR 0 6
8237: PUSH
8238: LD_INT 2
8240: ARRAY
8241: PUSH
8242: LD_INT 2
8244: ARRAY
8245: PPUSH
8246: CALL_OW 111
8250: GO 8360
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8252: LD_VAR 0 7
8256: PPUSH
8257: LD_INT 3
8259: PUSH
8260: LD_INT 24
8262: PUSH
8263: LD_INT 1000
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PUSH
8274: LD_INT 91
8276: PUSH
8277: LD_VAR 0 2
8281: PUSH
8282: LD_INT 10
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PPUSH
8294: CALL_OW 72
8298: IFFALSE 8360
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8300: LD_VAR 0 2
8304: PPUSH
8305: LD_VAR 0 7
8309: PPUSH
8310: LD_INT 3
8312: PUSH
8313: LD_INT 24
8315: PUSH
8316: LD_INT 1000
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PUSH
8327: LD_INT 91
8329: PUSH
8330: LD_VAR 0 2
8334: PUSH
8335: LD_INT 10
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PPUSH
8347: CALL_OW 72
8351: PUSH
8352: LD_INT 1
8354: ARRAY
8355: PPUSH
8356: CALL_OW 128
8360: GO 8171
8362: POP
8363: POP
// end ; if mech then
8364: LD_VAR 0 9
8368: IFFALSE 9078
// begin for i in mech do
8370: LD_ADDR_VAR 0 2
8374: PUSH
8375: LD_VAR 0 9
8379: PUSH
8380: FOR_IN
8381: IFFALSE 9076
// begin tag := GetTag ( i ) ;
8383: LD_ADDR_VAR 0 4
8387: PUSH
8388: LD_VAR 0 2
8392: PPUSH
8393: CALL_OW 110
8397: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8398: LD_ADDR_VAR 0 11
8402: PUSH
8403: LD_VAR 0 2
8407: PPUSH
8408: CALL_OW 310
8412: ST_TO_ADDR
// if not tag then
8413: LD_VAR 0 4
8417: NOT
8418: IFFALSE 8789
// begin if veh then
8420: LD_VAR 0 11
8424: IFFALSE 8595
// begin if GetLives ( veh ) = 1000 then
8426: LD_VAR 0 11
8430: PPUSH
8431: CALL_OW 256
8435: PUSH
8436: LD_INT 1000
8438: EQUAL
8439: IFFALSE 8455
// SetTag ( i , 1 ) else
8441: LD_VAR 0 2
8445: PPUSH
8446: LD_INT 1
8448: PPUSH
8449: CALL_OW 109
8453: GO 8593
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8455: LD_VAR 0 11
8459: PPUSH
8460: LD_VAR 0 6
8464: PUSH
8465: LD_INT 3
8467: ARRAY
8468: PUSH
8469: LD_INT 1
8471: ARRAY
8472: PPUSH
8473: LD_VAR 0 6
8477: PUSH
8478: LD_INT 3
8480: ARRAY
8481: PUSH
8482: LD_INT 2
8484: ARRAY
8485: PPUSH
8486: CALL_OW 297
8490: PUSH
8491: LD_INT 8
8493: GREATER
8494: IFFALSE 8533
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8496: LD_VAR 0 11
8500: PPUSH
8501: LD_VAR 0 6
8505: PUSH
8506: LD_INT 3
8508: ARRAY
8509: PUSH
8510: LD_INT 1
8512: ARRAY
8513: PPUSH
8514: LD_VAR 0 6
8518: PUSH
8519: LD_INT 3
8521: ARRAY
8522: PUSH
8523: LD_INT 2
8525: ARRAY
8526: PPUSH
8527: CALL_OW 111
8531: GO 8593
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8533: LD_INT 81
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 91
8545: PUSH
8546: LD_VAR 0 2
8550: PUSH
8551: LD_INT 10
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PPUSH
8563: CALL_OW 69
8567: NOT
8568: IFFALSE 8593
// begin ComExitVehicle ( i ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8579: LD_VAR 0 2
8583: PPUSH
8584: LD_VAR 0 11
8588: PPUSH
8589: CALL_OW 189
// end ; end else
8593: GO 8787
// if GetLives ( i ) < 400 then
8595: LD_VAR 0 2
8599: PPUSH
8600: CALL_OW 256
8604: PUSH
8605: LD_INT 400
8607: LESS
8608: IFFALSE 8659
// begin usAttackers := usAttackers diff i ;
8610: LD_ADDR_EXP 47
8614: PUSH
8615: LD_EXP 47
8619: PUSH
8620: LD_VAR 0 2
8624: DIFF
8625: ST_TO_ADDR
// usForces := usForces union i ;
8626: LD_ADDR_EXP 44
8630: PUSH
8631: LD_EXP 44
8635: PUSH
8636: LD_VAR 0 2
8640: UNION
8641: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8642: LD_VAR 0 2
8646: PPUSH
8647: LD_INT 34
8649: PPUSH
8650: LD_INT 68
8652: PPUSH
8653: CALL_OW 111
// end else
8657: GO 8787
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8659: LD_VAR 0 10
8663: PPUSH
8664: LD_INT 58
8666: PUSH
8667: EMPTY
8668: LIST
8669: PUSH
8670: LD_INT 24
8672: PUSH
8673: LD_INT 1000
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PPUSH
8684: CALL_OW 72
8688: PUSH
8689: LD_VAR 0 2
8693: PPUSH
8694: CALL_OW 314
8698: NOT
8699: AND
8700: PUSH
8701: LD_INT 81
8703: PUSH
8704: LD_INT 1
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: LD_INT 91
8713: PUSH
8714: LD_VAR 0 2
8718: PUSH
8719: LD_INT 9
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 69
8735: OR
8736: IFFALSE 8787
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8738: LD_VAR 0 2
8742: PPUSH
8743: LD_VAR 0 10
8747: PPUSH
8748: LD_INT 58
8750: PUSH
8751: EMPTY
8752: LIST
8753: PUSH
8754: LD_INT 24
8756: PUSH
8757: LD_INT 250
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PPUSH
8768: CALL_OW 72
8772: PPUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 74
8782: PPUSH
8783: CALL_OW 120
// end else
8787: GO 9074
// begin if veh and GetLives ( veh ) < 760 then
8789: LD_VAR 0 11
8793: PUSH
8794: LD_VAR 0 11
8798: PPUSH
8799: CALL_OW 256
8803: PUSH
8804: LD_INT 760
8806: LESS
8807: AND
8808: IFFALSE 8859
// begin SetTag ( i , 0 ) ;
8810: LD_VAR 0 2
8814: PPUSH
8815: LD_INT 0
8817: PPUSH
8818: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8822: LD_VAR 0 11
8826: PPUSH
8827: LD_VAR 0 6
8831: PUSH
8832: LD_INT 3
8834: ARRAY
8835: PUSH
8836: LD_INT 1
8838: ARRAY
8839: PPUSH
8840: LD_VAR 0 6
8844: PUSH
8845: LD_INT 3
8847: ARRAY
8848: PUSH
8849: LD_INT 2
8851: ARRAY
8852: PPUSH
8853: CALL_OW 111
// end else
8857: GO 9074
// if veh then
8859: LD_VAR 0 11
8863: IFFALSE 9074
// if tag <= attackFormula [ 4 ] then
8865: LD_VAR 0 4
8869: PUSH
8870: LD_VAR 0 6
8874: PUSH
8875: LD_INT 4
8877: ARRAY
8878: LESSEQUAL
8879: IFFALSE 9040
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8881: LD_VAR 0 11
8885: PPUSH
8886: LD_VAR 0 6
8890: PUSH
8891: LD_INT 4
8893: ARRAY
8894: PUSH
8895: LD_VAR 0 4
8899: ARRAY
8900: PUSH
8901: LD_INT 1
8903: ARRAY
8904: PPUSH
8905: LD_VAR 0 6
8909: PUSH
8910: LD_INT 4
8912: ARRAY
8913: PUSH
8914: LD_VAR 0 4
8918: ARRAY
8919: PUSH
8920: LD_INT 2
8922: ARRAY
8923: PPUSH
8924: CALL_OW 297
8928: PUSH
8929: LD_INT 6
8931: GREATER
8932: IFFALSE 8983
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8934: LD_VAR 0 11
8938: PPUSH
8939: LD_VAR 0 6
8943: PUSH
8944: LD_INT 4
8946: ARRAY
8947: PUSH
8948: LD_VAR 0 4
8952: ARRAY
8953: PUSH
8954: LD_INT 1
8956: ARRAY
8957: PPUSH
8958: LD_VAR 0 6
8962: PUSH
8963: LD_INT 4
8965: ARRAY
8966: PUSH
8967: LD_VAR 0 4
8971: ARRAY
8972: PUSH
8973: LD_INT 2
8975: ARRAY
8976: PPUSH
8977: CALL_OW 114
8981: GO 9038
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8983: LD_INT 81
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 91
8995: PUSH
8996: LD_VAR 0 11
9000: PUSH
9001: LD_INT 10
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: LIST
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PPUSH
9013: CALL_OW 69
9017: NOT
9018: IFFALSE 9038
// SetTag ( i , tag + 1 ) ;
9020: LD_VAR 0 2
9024: PPUSH
9025: LD_VAR 0 4
9029: PUSH
9030: LD_INT 1
9032: PLUS
9033: PPUSH
9034: CALL_OW 109
// end else
9038: GO 9074
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9040: LD_VAR 0 11
9044: PPUSH
9045: LD_INT 81
9047: PUSH
9048: LD_INT 1
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 69
9059: PPUSH
9060: LD_VAR 0 2
9064: PPUSH
9065: CALL_OW 74
9069: PPUSH
9070: CALL_OW 115
// end ; end ;
9074: GO 8380
9076: POP
9077: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9078: LD_EXP 47
9082: PPUSH
9083: LD_INT 52
9085: PUSH
9086: EMPTY
9087: LIST
9088: PPUSH
9089: CALL_OW 72
9093: NOT
9094: IFFALSE 7559
// end ;
9096: LD_VAR 0 1
9100: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9101: LD_INT 22
9103: PUSH
9104: LD_INT 1
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 32
9113: PUSH
9114: LD_INT 1
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PPUSH
9125: CALL_OW 69
9129: IFFALSE 9206
9131: GO 9133
9133: DISABLE
9134: LD_INT 0
9136: PPUSH
// begin enable ;
9137: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9138: LD_ADDR_VAR 0 1
9142: PUSH
9143: LD_INT 22
9145: PUSH
9146: LD_INT 1
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PUSH
9153: LD_INT 32
9155: PUSH
9156: LD_INT 1
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: PPUSH
9167: CALL_OW 69
9171: PUSH
9172: FOR_IN
9173: IFFALSE 9204
// if GetFuel ( i ) < 10 then
9175: LD_VAR 0 1
9179: PPUSH
9180: CALL_OW 261
9184: PUSH
9185: LD_INT 10
9187: LESS
9188: IFFALSE 9202
// SetFuel ( i , 10 ) ;
9190: LD_VAR 0 1
9194: PPUSH
9195: LD_INT 10
9197: PPUSH
9198: CALL_OW 240
9202: GO 9172
9204: POP
9205: POP
// end ; end_of_file
9206: PPOPN 1
9208: END
// export function Action ; var hasAll , i , tmp ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9215: LD_ADDR_VAR 0 2
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_INT 2
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 21
9232: PUSH
9233: LD_INT 1
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 23
9242: PUSH
9243: LD_INT 2
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: LIST
9254: PPUSH
9255: CALL_OW 69
9259: PUSH
9260: LD_INT 7
9262: GREATEREQUAL
9263: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9264: LD_VAR 0 2
9268: PPUSH
9269: LD_STRING 03_HasAll
9271: PPUSH
9272: CALL_OW 39
// Video ( true ) ;
9276: LD_INT 1
9278: PPUSH
9279: CALL 76984 0 1
// CenterNowOnUnits ( Heike ) ;
9283: LD_EXP 28
9287: PPUSH
9288: CALL_OW 87
// wait ( 0 0$2 ) ;
9292: LD_INT 70
9294: PPUSH
9295: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9299: LD_EXP 36
9303: PPUSH
9304: LD_STRING DF-1-start
9306: PPUSH
9307: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9311: LD_EXP 28
9315: PPUSH
9316: LD_EXP 36
9320: PPUSH
9321: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9325: LD_EXP 28
9329: PPUSH
9330: LD_STRING DH-1-start
9332: PPUSH
9333: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9337: LD_EXP 37
9341: PPUSH
9342: LD_INT 92
9344: PPUSH
9345: LD_INT 21
9347: PPUSH
9348: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9352: LD_EXP 32
9356: PPUSH
9357: LD_INT 94
9359: PPUSH
9360: LD_INT 23
9362: PPUSH
9363: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9367: LD_EXP 40
9371: PUSH
9372: LD_INT 1
9374: ARRAY
9375: PPUSH
9376: LD_INT 90
9378: PPUSH
9379: LD_INT 23
9381: PPUSH
9382: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9386: LD_EXP 40
9390: PUSH
9391: LD_INT 2
9393: ARRAY
9394: PPUSH
9395: LD_INT 93
9397: PPUSH
9398: LD_INT 25
9400: PPUSH
9401: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9405: LD_EXP 40
9409: PPUSH
9410: LD_EXP 37
9414: PPUSH
9415: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9419: LD_EXP 37
9423: PUSH
9424: LD_EXP 32
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PPUSH
9433: LD_EXP 28
9437: PPUSH
9438: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9442: LD_EXP 28
9446: PPUSH
9447: LD_EXP 37
9451: PPUSH
9452: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9456: LD_INT 35
9458: PPUSH
9459: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9463: LD_EXP 37
9467: PPUSH
9468: LD_INT 92
9470: PPUSH
9471: LD_INT 21
9473: PPUSH
9474: CALL_OW 307
9478: IFFALSE 9456
// Say ( Omar , DO-1-start ) ;
9480: LD_EXP 37
9484: PPUSH
9485: LD_STRING DO-1-start
9487: PPUSH
9488: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9492: LD_EXP 28
9496: PPUSH
9497: LD_STRING DH-2-start
9499: PPUSH
9500: CALL_OW 88
// if hasAll then
9504: LD_VAR 0 2
9508: IFFALSE 9636
// begin Say ( Omar , DO-2-start ) ;
9510: LD_EXP 37
9514: PPUSH
9515: LD_STRING DO-2-start
9517: PPUSH
9518: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9522: LD_EXP 37
9526: PPUSH
9527: LD_STRING DO-3-start
9529: PPUSH
9530: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9534: LD_EXP 28
9538: PPUSH
9539: LD_STRING DH-3-start
9541: PPUSH
9542: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9546: LD_EXP 36
9550: PPUSH
9551: LD_STRING DF-2-start
9553: PPUSH
9554: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9558: LD_EXP 37
9562: PPUSH
9563: LD_EXP 36
9567: PPUSH
9568: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9572: LD_EXP 37
9576: PPUSH
9577: LD_STRING DO-4-start
9579: PPUSH
9580: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9584: LD_EXP 36
9588: PPUSH
9589: LD_STRING DF-3-start
9591: PPUSH
9592: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9596: LD_EXP 37
9600: PPUSH
9601: LD_STRING DO-5-start
9603: PPUSH
9604: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9608: LD_EXP 36
9612: PPUSH
9613: LD_STRING DF-4-start
9615: PPUSH
9616: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9620: LD_EXP 37
9624: PPUSH
9625: LD_EXP 28
9629: PPUSH
9630: CALL_OW 119
// end else
9634: GO 9736
// begin Say ( Omar , DO-2-start-a ) ;
9636: LD_EXP 37
9640: PPUSH
9641: LD_STRING DO-2-start-a
9643: PPUSH
9644: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9648: LD_EXP 37
9652: PPUSH
9653: LD_STRING DO-3-start-a
9655: PPUSH
9656: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9660: LD_EXP 28
9664: PPUSH
9665: LD_STRING DH-3-start-a
9667: PPUSH
9668: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9672: LD_EXP 36
9676: PPUSH
9677: LD_STRING DF-2-start-a
9679: PPUSH
9680: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9684: LD_EXP 37
9688: PPUSH
9689: LD_EXP 36
9693: PPUSH
9694: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9698: LD_EXP 37
9702: PPUSH
9703: LD_STRING DO-4-start-a
9705: PPUSH
9706: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9710: LD_EXP 36
9714: PPUSH
9715: LD_STRING DF-3-start-a
9717: PPUSH
9718: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9722: LD_EXP 37
9726: PPUSH
9727: LD_EXP 28
9731: PPUSH
9732: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9736: LD_INT 10
9738: PPUSH
9739: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9743: LD_EXP 37
9747: PPUSH
9748: LD_STRING DO-1-mission
9750: PPUSH
9751: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9755: LD_EXP 37
9759: PPUSH
9760: LD_STRING DO-2-mission
9762: PPUSH
9763: CALL_OW 88
// if not hasAll then
9767: LD_VAR 0 2
9771: NOT
9772: IFFALSE 9786
// Say ( Omar , DO-3-mission ) ;
9774: LD_EXP 37
9778: PPUSH
9779: LD_STRING DO-3-mission
9781: PPUSH
9782: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9786: LD_EXP 37
9790: PPUSH
9791: LD_STRING DO-4-mission
9793: PPUSH
9794: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9798: LD_EXP 28
9802: PPUSH
9803: LD_STRING DH-1-mission
9805: PPUSH
9806: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9810: LD_EXP 36
9814: PPUSH
9815: LD_STRING DF-1-mission
9817: PPUSH
9818: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9822: LD_EXP 37
9826: PPUSH
9827: LD_STRING DO-5-mission
9829: PPUSH
9830: CALL_OW 88
// if not hasAll then
9834: LD_VAR 0 2
9838: NOT
9839: IFFALSE 9974
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9841: LD_ADDR_VAR 0 4
9845: PUSH
9846: LD_INT 22
9848: PUSH
9849: LD_INT 2
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 21
9858: PUSH
9859: LD_INT 1
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 23
9868: PUSH
9869: LD_INT 2
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: ST_TO_ADDR
// for i := 7 downto tmp do
9886: LD_ADDR_VAR 0 3
9890: PUSH
9891: DOUBLE
9892: LD_INT 7
9894: INC
9895: ST_TO_ADDR
9896: LD_VAR 0 4
9900: PUSH
9901: FOR_DOWNTO
9902: IFFALSE 9972
// begin if omarSquad < 3 then
9904: LD_EXP 40
9908: PUSH
9909: LD_INT 3
9911: LESS
9912: IFFALSE 9916
// break ;
9914: GO 9972
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9916: LD_EXP 40
9920: PUSH
9921: LD_INT 3
9923: ARRAY
9924: PPUSH
9925: LD_INT 2
9927: PPUSH
9928: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9932: LD_ADDR_EXP 42
9936: PUSH
9937: LD_EXP 42
9941: PUSH
9942: LD_EXP 40
9946: PUSH
9947: LD_INT 3
9949: ARRAY
9950: UNION
9951: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9952: LD_ADDR_EXP 40
9956: PUSH
9957: LD_EXP 40
9961: PPUSH
9962: LD_INT 3
9964: PPUSH
9965: CALL_OW 3
9969: ST_TO_ADDR
// end ;
9970: GO 9901
9972: POP
9973: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9974: LD_EXP 37
9978: PUSH
9979: LD_EXP 40
9983: ADD
9984: PPUSH
9985: LD_INT 103
9987: PPUSH
9988: LD_INT 9
9990: PPUSH
9991: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9995: LD_VAR 0 2
9999: PUSH
10000: LD_EXP 33
10004: PPUSH
10005: CALL_OW 302
10009: AND
10010: IFFALSE 10071
// begin wait ( 0 0$3 ) ;
10012: LD_INT 105
10014: PPUSH
10015: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
10019: LD_EXP 33
10023: PPUSH
10024: LD_EXP 36
10028: PPUSH
10029: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10033: LD_EXP 33
10037: PPUSH
10038: LD_STRING DK-1-side
10040: PPUSH
10041: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10045: LD_EXP 36
10049: PPUSH
10050: LD_EXP 33
10054: PPUSH
10055: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10059: LD_EXP 36
10063: PPUSH
10064: LD_STRING DF-1-side
10066: PPUSH
10067: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10071: LD_INT 22
10073: PUSH
10074: LD_INT 2
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PPUSH
10081: CALL_OW 69
10085: PPUSH
10086: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10090: LD_EXP 36
10094: PUSH
10095: LD_EXP 39
10099: ADD
10100: PPUSH
10101: LD_INT 108
10103: PPUSH
10104: LD_INT 62
10106: PPUSH
10107: CALL_OW 111
// gameStarted := true ;
10111: LD_ADDR_EXP 3
10115: PUSH
10116: LD_INT 1
10118: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10119: LD_INT 105
10121: PPUSH
10122: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10126: LD_EXP 28
10130: PPUSH
10131: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10135: LD_EXP 28
10139: PPUSH
10140: LD_EXP 32
10144: PPUSH
10145: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10149: LD_INT 22
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PPUSH
10159: CALL_OW 69
10163: PUSH
10164: LD_EXP 28
10168: DIFF
10169: PPUSH
10170: LD_EXP 28
10174: PPUSH
10175: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10179: LD_EXP 28
10183: PPUSH
10184: LD_STRING DH-1-explore
10186: PPUSH
10187: CALL_OW 88
// if Givi then
10191: LD_EXP 29
10195: IFFALSE 10211
// Say ( Givi , DG-1-explore ) else
10197: LD_EXP 29
10201: PPUSH
10202: LD_STRING DG-1-explore
10204: PPUSH
10205: CALL_OW 88
10209: GO 10248
// if heikeSecondSquad then
10211: LD_EXP 42
10215: IFFALSE 10248
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10217: LD_EXP 42
10221: PPUSH
10222: LD_INT 26
10224: PUSH
10225: LD_INT 1
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 72
10236: PUSH
10237: LD_INT 1
10239: ARRAY
10240: PPUSH
10241: LD_STRING DArm-1-explore
10243: PPUSH
10244: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10248: LD_EXP 32
10252: PPUSH
10253: LD_STRING DA-1-explore
10255: PPUSH
10256: CALL_OW 88
// if Sophia then
10260: LD_EXP 34
10264: IFFALSE 10342
// begin Say ( Sophia , DS-2-explore ) ;
10266: LD_EXP 34
10270: PPUSH
10271: LD_STRING DS-2-explore
10273: PPUSH
10274: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10278: LD_EXP 32
10282: PPUSH
10283: LD_STRING DA-2-explore
10285: PPUSH
10286: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10290: LD_EXP 34
10294: PPUSH
10295: LD_EXP 32
10299: PPUSH
10300: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10304: LD_EXP 32
10308: PPUSH
10309: LD_EXP 34
10313: PPUSH
10314: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10318: LD_EXP 34
10322: PPUSH
10323: LD_STRING DS-3-explore
10325: PPUSH
10326: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10330: LD_EXP 32
10334: PPUSH
10335: LD_STRING DA-3-explore
10337: PPUSH
10338: CALL_OW 88
// end ; if Mike then
10342: LD_EXP 30
10346: IFFALSE 10402
// begin Say ( Mike , DM-1-explore ) ;
10348: LD_EXP 30
10352: PPUSH
10353: LD_STRING DM-1-explore
10355: PPUSH
10356: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10360: LD_EXP 28
10364: PPUSH
10365: LD_STRING DH-2-explore
10367: PPUSH
10368: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10372: LD_EXP 30
10376: PPUSH
10377: LD_STRING DM-2-explore
10379: PPUSH
10380: CALL_OW 88
// if Kaia then
10384: LD_EXP 33
10388: IFFALSE 10402
// Say ( Kaia , DK-1-explore ) ;
10390: LD_EXP 33
10394: PPUSH
10395: LD_STRING DK-1-explore
10397: PPUSH
10398: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10402: LD_INT 22
10404: PUSH
10405: LD_INT 2
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 69
10416: PPUSH
10417: CALL_OW 139
// Video ( false ) ;
10421: LD_INT 0
10423: PPUSH
10424: CALL 76984 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10428: LD_STRING BuildBase
10430: PPUSH
10431: CALL_OW 337
// SaveForQuickRestart ;
10435: CALL_OW 22
// end ;
10439: LD_VAR 0 1
10443: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10444: LD_EXP 5
10448: NOT
10449: PUSH
10450: LD_EXP 6
10454: NOT
10455: AND
10456: PUSH
10457: LD_INT 5
10459: PPUSH
10460: LD_INT 22
10462: PUSH
10463: LD_INT 2
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PPUSH
10470: CALL_OW 70
10474: AND
10475: PUSH
10476: LD_EXP 6
10480: NOT
10481: AND
10482: IFFALSE 10567
10484: GO 10486
10486: DISABLE
// begin if Mike then
10487: LD_EXP 30
10491: IFFALSE 10507
// Say ( Mike , DM-1-scout ) else
10493: LD_EXP 30
10497: PPUSH
10498: LD_STRING DM-1-scout
10500: PPUSH
10501: CALL_OW 88
10505: GO 10538
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10507: LD_EXP 42
10511: PPUSH
10512: LD_INT 26
10514: PUSH
10515: LD_INT 1
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PPUSH
10522: CALL_OW 72
10526: PUSH
10527: LD_INT 1
10529: ARRAY
10530: PPUSH
10531: LD_STRING DArm-1-explore
10533: PPUSH
10534: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10538: LD_INT 54
10540: PPUSH
10541: LD_INT 35
10543: PPUSH
10544: LD_INT 2
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10554: LD_INT 54
10556: PPUSH
10557: LD_INT 35
10559: PPUSH
10560: LD_INT 2
10562: PPUSH
10563: CALL_OW 331
// end ;
10567: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10568: LD_INT 6
10570: PPUSH
10571: LD_INT 22
10573: PUSH
10574: LD_INT 2
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PPUSH
10581: CALL_OW 70
10585: PUSH
10586: LD_EXP 6
10590: NOT
10591: AND
10592: IFFALSE 10846
10594: GO 10596
10596: DISABLE
10597: LD_INT 0
10599: PPUSH
10600: PPUSH
10601: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10602: LD_ADDR_VAR 0 1
10606: PUSH
10607: LD_EXP 42
10611: PPUSH
10612: LD_INT 26
10614: PUSH
10615: LD_INT 1
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PPUSH
10622: CALL_OW 72
10626: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10627: LD_ADDR_VAR 0 2
10631: PUSH
10632: LD_EXP 42
10636: PPUSH
10637: LD_INT 26
10639: PUSH
10640: LD_INT 2
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 72
10651: ST_TO_ADDR
// DialogueOn ;
10652: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10656: LD_INT 36
10658: PPUSH
10659: LD_INT 22
10661: PPUSH
10662: LD_INT 2
10664: PPUSH
10665: LD_INT 8
10667: PPUSH
10668: CALL_OW 330
// dwait ( 0 0$1 ) ;
10672: LD_INT 35
10674: PPUSH
10675: CALL_OW 68
// speakerOk := false ;
10679: LD_ADDR_VAR 0 3
10683: PUSH
10684: LD_INT 0
10686: ST_TO_ADDR
// if Mike then
10687: LD_EXP 30
10691: IFFALSE 10713
// speakerOk := Say ( Mike , DM-1-spot ) else
10693: LD_ADDR_VAR 0 3
10697: PUSH
10698: LD_EXP 30
10702: PPUSH
10703: LD_STRING DM-1-spot
10705: PPUSH
10706: CALL_OW 88
10710: ST_TO_ADDR
10711: GO 10741
// if randomMen then
10713: LD_VAR 0 1
10717: IFFALSE 10741
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10719: LD_ADDR_VAR 0 3
10723: PUSH
10724: LD_VAR 0 1
10728: PUSH
10729: LD_INT 1
10731: ARRAY
10732: PPUSH
10733: LD_STRING DArm-1-spot-a
10735: PPUSH
10736: CALL_OW 88
10740: ST_TO_ADDR
// if speakerOk then
10741: LD_VAR 0 3
10745: IFFALSE 10789
// begin if Givi then
10747: LD_EXP 29
10751: IFFALSE 10767
// Say ( Givi , DG-1-spot ) else
10753: LD_EXP 29
10757: PPUSH
10758: LD_STRING DG-1-spot
10760: PPUSH
10761: CALL_OW 88
10765: GO 10789
// if randomWomen then
10767: LD_VAR 0 2
10771: IFFALSE 10789
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10773: LD_VAR 0 2
10777: PUSH
10778: LD_INT 1
10780: ARRAY
10781: PPUSH
10782: LD_STRING DArf-1-spot-a
10784: PPUSH
10785: CALL_OW 88
// end ; if Mike then
10789: LD_EXP 30
10793: IFFALSE 10809
// Say ( Heike , DH-1-spot ) else
10795: LD_EXP 28
10799: PPUSH
10800: LD_STRING DH-1-spot
10802: PPUSH
10803: CALL_OW 88
10807: GO 10821
// Say ( Heike , DH-1-spot-a ) ;
10809: LD_EXP 28
10813: PPUSH
10814: LD_STRING DH-1-spot-a
10816: PPUSH
10817: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10821: LD_INT 36
10823: PPUSH
10824: LD_INT 22
10826: PPUSH
10827: LD_INT 2
10829: PPUSH
10830: CALL_OW 331
// DialogueOff ;
10834: CALL_OW 7
// americanBaseSpoted := true ;
10838: LD_ADDR_EXP 5
10842: PUSH
10843: LD_INT 1
10845: ST_TO_ADDR
// end ;
10846: PPOPN 3
10848: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10849: LD_EXP 5
10853: NOT
10854: PUSH
10855: LD_INT 22
10857: PUSH
10858: LD_INT 2
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 101
10867: PUSH
10868: LD_INT 1
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PPUSH
10879: CALL_OW 69
10883: AND
10884: PUSH
10885: LD_EXP 6
10889: NOT
10890: AND
10891: IFFALSE 10977
10893: GO 10895
10895: DISABLE
10896: LD_INT 0
10898: PPUSH
// begin americanBaseSpoted := true ;
10899: LD_ADDR_EXP 5
10903: PUSH
10904: LD_INT 1
10906: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10907: LD_ADDR_VAR 0 1
10911: PUSH
10912: LD_EXP 42
10916: PPUSH
10917: LD_INT 26
10919: PUSH
10920: LD_INT 1
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PPUSH
10927: CALL_OW 72
10931: ST_TO_ADDR
// if not randomMen then
10932: LD_VAR 0 1
10936: NOT
10937: IFFALSE 10941
// exit ;
10939: GO 10977
// DialogueOn ;
10941: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10945: LD_VAR 0 1
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PPUSH
10954: LD_STRING DArm-1-spot-a
10956: PPUSH
10957: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10961: LD_EXP 28
10965: PPUSH
10966: LD_STRING DH-1-spot-a
10968: PPUSH
10969: CALL_OW 88
// DialogueOff ;
10973: CALL_OW 7
// end ;
10977: PPOPN 1
10979: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10980: LD_INT 11
10982: PPUSH
10983: CALL_OW 255
10987: PUSH
10988: LD_INT 2
10990: EQUAL
10991: PUSH
10992: LD_INT 7
10994: PPUSH
10995: LD_INT 22
10997: PUSH
10998: LD_INT 1
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 3
11007: PUSH
11008: LD_INT 50
11010: PUSH
11011: EMPTY
11012: LIST
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 30
11020: PUSH
11021: LD_INT 31
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: LIST
11032: PPUSH
11033: CALL_OW 70
11037: OR
11038: PUSH
11039: LD_INT 7
11041: PPUSH
11042: LD_INT 22
11044: PUSH
11045: LD_INT 2
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PPUSH
11052: CALL_OW 70
11056: PUSH
11057: LD_INT 1
11059: GREATER
11060: OR
11061: PUSH
11062: LD_EXP 44
11066: PUSH
11067: LD_INT 4
11069: LESSEQUAL
11070: OR
11071: IFFALSE 11662
11073: GO 11075
11075: DISABLE
11076: LD_INT 0
11078: PPUSH
11079: PPUSH
// begin wait ( 0 0$3 ) ;
11080: LD_INT 105
11082: PPUSH
11083: CALL_OW 67
// americanStartRun := true ;
11087: LD_ADDR_EXP 14
11091: PUSH
11092: LD_INT 1
11094: ST_TO_ADDR
// if IsOk ( usCommander ) then
11095: LD_EXP 45
11099: PPUSH
11100: CALL_OW 302
11104: IFFALSE 11134
// begin usForces := usForces union usCommander ;
11106: LD_ADDR_EXP 44
11110: PUSH
11111: LD_EXP 44
11115: PUSH
11116: LD_EXP 45
11120: UNION
11121: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11122: LD_EXP 45
11126: PPUSH
11127: LD_STRING DUsm-1-assault
11129: PPUSH
11130: CALL_OW 88
// end ; for i in usForces do
11134: LD_ADDR_VAR 0 1
11138: PUSH
11139: LD_EXP 44
11143: PUSH
11144: FOR_IN
11145: IFFALSE 11191
// begin if IsInUnit ( i ) then
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 310
11156: IFFALSE 11167
// ComExitBuilding ( i ) ;
11158: LD_VAR 0 1
11162: PPUSH
11163: CALL_OW 122
// wait ( 3 ) ;
11167: LD_INT 3
11169: PPUSH
11170: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11174: LD_VAR 0 1
11178: PPUSH
11179: LD_INT 34
11181: PPUSH
11182: LD_INT 67
11184: PPUSH
11185: CALL_OW 111
// end ;
11189: GO 11144
11191: POP
11192: POP
// Say ( Heike , DH-1-assault ) ;
11193: LD_EXP 28
11197: PPUSH
11198: LD_STRING DH-1-assault
11200: PPUSH
11201: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11205: LD_INT 35
11207: PPUSH
11208: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11212: LD_VAR 0 1
11216: PPUSH
11217: LD_INT 34
11219: PPUSH
11220: LD_INT 67
11222: PPUSH
11223: CALL_OW 111
// until not usForces ;
11227: LD_EXP 44
11231: NOT
11232: IFFALSE 11205
// music_nat := 2 ;
11234: LD_ADDR_OWVAR 71
11238: PUSH
11239: LD_INT 2
11241: ST_TO_ADDR
// music_class := music_victory ;
11242: LD_ADDR_OWVAR 72
11246: PUSH
11247: LD_INT 4
11249: ST_TO_ADDR
// if not americanHasEscaped then
11250: LD_EXP 8
11254: NOT
11255: IFFALSE 11276
// begin Say ( Heike , DH-2-assault ) ;
11257: LD_EXP 28
11261: PPUSH
11262: LD_STRING DH-2-assault
11264: PPUSH
11265: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11269: LD_STRING ACH_CLEAN
11271: PPUSH
11272: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11276: LD_INT 70
11278: PPUSH
11279: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11283: LD_INT 35
11285: PPUSH
11286: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11290: LD_INT 22
11292: PUSH
11293: LD_INT 2
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 21
11302: PUSH
11303: LD_INT 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 3
11312: PUSH
11313: LD_INT 50
11315: PUSH
11316: EMPTY
11317: LIST
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: NOT
11333: IFFALSE 11283
// InGameOn ;
11335: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11339: LD_INT 11
11341: PPUSH
11342: CALL_OW 255
11346: PUSH
11347: LD_INT 2
11349: EQUAL
11350: NOT
11351: IFFALSE 11363
// SetSide ( usDepot , 2 ) ;
11353: LD_INT 11
11355: PPUSH
11356: LD_INT 2
11358: PPUSH
11359: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11363: LD_INT 35
11365: PPUSH
11366: LD_INT 22
11368: PPUSH
11369: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11373: LD_EXP 28
11377: PPUSH
11378: LD_INT 35
11380: PPUSH
11381: LD_INT 22
11383: PPUSH
11384: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11388: LD_EXP 28
11392: PPUSH
11393: LD_INT 38
11395: PPUSH
11396: LD_INT 25
11398: PPUSH
11399: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11403: LD_EXP 32
11407: PUSH
11408: LD_EXP 41
11412: UNION
11413: PUSH
11414: LD_EXP 42
11418: UNION
11419: PPUSH
11420: LD_INT 39
11422: PPUSH
11423: LD_INT 26
11425: PPUSH
11426: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11430: LD_EXP 32
11434: PUSH
11435: LD_EXP 41
11439: UNION
11440: PUSH
11441: LD_EXP 42
11445: UNION
11446: PPUSH
11447: LD_EXP 28
11451: PPUSH
11452: CALL_OW 179
// p := 0 ;
11456: LD_ADDR_VAR 0 2
11460: PUSH
11461: LD_INT 0
11463: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11464: LD_INT 35
11466: PPUSH
11467: CALL_OW 67
// p := p + 1 ;
11471: LD_ADDR_VAR 0 2
11475: PUSH
11476: LD_VAR 0 2
11480: PUSH
11481: LD_INT 1
11483: PLUS
11484: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11485: LD_EXP 28
11489: PPUSH
11490: CALL_OW 314
11494: NOT
11495: PUSH
11496: LD_VAR 0 2
11500: PUSH
11501: LD_INT 10
11503: GREATER
11504: OR
11505: IFFALSE 11464
// Say ( Heike , DH-1-capture ) ;
11507: LD_EXP 28
11511: PPUSH
11512: LD_STRING DH-1-capture
11514: PPUSH
11515: CALL_OW 88
// if Markov then
11519: LD_EXP 35
11523: IFFALSE 11537
// Say ( Markov , DMar-1-capture ) ;
11525: LD_EXP 35
11529: PPUSH
11530: LD_STRING DMar-1-capture
11532: PPUSH
11533: CALL_OW 88
// if Sophia then
11537: LD_EXP 34
11541: IFFALSE 11567
// begin Say ( Heike , DH-2-capture ) ;
11543: LD_EXP 28
11547: PPUSH
11548: LD_STRING DH-2-capture
11550: PPUSH
11551: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11555: LD_EXP 34
11559: PPUSH
11560: LD_STRING DS-1-capture
11562: PPUSH
11563: CALL_OW 88
// end ; InGameOff ;
11567: CALL_OW 9
// music_nat := music_auto ;
11571: LD_ADDR_OWVAR 71
11575: PUSH
11576: LD_INT 0
11578: ST_TO_ADDR
// music_class := music_auto ;
11579: LD_ADDR_OWVAR 72
11583: PUSH
11584: LD_INT 0
11586: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11587: LD_STRING ConstructBase
11589: PPUSH
11590: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11594: LD_ADDR_VAR 0 1
11598: PUSH
11599: LD_INT 22
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 21
11611: PUSH
11612: LD_INT 3
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PPUSH
11623: CALL_OW 69
11627: PUSH
11628: FOR_IN
11629: IFFALSE 11645
// SetSide ( i , 2 ) ;
11631: LD_VAR 0 1
11635: PPUSH
11636: LD_INT 2
11638: PPUSH
11639: CALL_OW 235
11643: GO 11628
11645: POP
11646: POP
// wait ( 0 0$3 ) ;
11647: LD_INT 105
11649: PPUSH
11650: CALL_OW 67
// americanBaseCaptured := true ;
11654: LD_ADDR_EXP 6
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// end ;
11662: PPOPN 2
11664: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11665: LD_EXP 13
11669: PUSH
11670: LD_INT 3
11672: GREATEREQUAL
11673: IFFALSE 11685
11675: GO 11677
11677: DISABLE
// SetAchievement ( ACH_ENG ) ;
11678: LD_STRING ACH_ENG
11680: PPUSH
11681: CALL_OW 543
11685: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11686: LD_INT 22
11688: PUSH
11689: LD_INT 2
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: LD_INT 25
11698: PUSH
11699: LD_INT 15
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PPUSH
11710: CALL_OW 69
11714: PUSH
11715: LD_INT 4
11717: GREATEREQUAL
11718: IFFALSE 11730
11720: GO 11722
11722: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11723: LD_STRING ACH_APEGEN
11725: PPUSH
11726: CALL_OW 543
11730: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11731: LD_INT 22
11733: PUSH
11734: LD_INT 2
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 30
11743: PUSH
11744: LD_INT 2
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: LD_INT 3
11753: PUSH
11754: LD_INT 57
11756: PUSH
11757: EMPTY
11758: LIST
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PPUSH
11769: CALL_OW 69
11773: IFFALSE 12038
11775: GO 11777
11777: DISABLE
// begin workshopBuilded := true ;
11778: LD_ADDR_EXP 10
11782: PUSH
11783: LD_INT 1
11785: ST_TO_ADDR
// if IsOk ( Markov ) then
11786: LD_EXP 35
11790: PPUSH
11791: CALL_OW 302
11795: IFFALSE 11854
// begin Say ( Heike , DH-1-shop-a ) ;
11797: LD_EXP 28
11801: PPUSH
11802: LD_STRING DH-1-shop-a
11804: PPUSH
11805: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11809: LD_INT 47
11811: PPUSH
11812: LD_INT 2
11814: PPUSH
11815: CALL_OW 321
11819: PUSH
11820: LD_INT 2
11822: EQUAL
11823: PUSH
11824: LD_INT 45
11826: PPUSH
11827: LD_INT 2
11829: PPUSH
11830: CALL_OW 321
11834: PUSH
11835: LD_INT 2
11837: EQUAL
11838: AND
11839: NOT
11840: IFFALSE 11854
// Say ( Markov , DMar-1-shop-a ) ;
11842: LD_EXP 35
11846: PPUSH
11847: LD_STRING DMar-1-shop-a
11849: PPUSH
11850: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11854: LD_INT 35
11856: PPUSH
11857: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11861: LD_INT 47
11863: PPUSH
11864: LD_INT 2
11866: PPUSH
11867: CALL_OW 321
11871: PUSH
11872: LD_INT 2
11874: EQUAL
11875: PUSH
11876: LD_INT 45
11878: PPUSH
11879: LD_INT 2
11881: PPUSH
11882: CALL_OW 321
11886: PUSH
11887: LD_INT 2
11889: EQUAL
11890: OR
11891: IFFALSE 11854
// if IsOk ( Markov ) and IsOk ( Heike ) then
11893: LD_EXP 35
11897: PPUSH
11898: CALL_OW 302
11902: PUSH
11903: LD_EXP 28
11907: PPUSH
11908: CALL_OW 302
11912: AND
11913: IFFALSE 12031
// begin DialogueOn ;
11915: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11919: LD_EXP 35
11923: PPUSH
11924: LD_STRING DMar-1-shop
11926: PPUSH
11927: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11931: LD_EXP 28
11935: PPUSH
11936: LD_STRING DH-1-shop
11938: PPUSH
11939: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11943: LD_EXP 35
11947: PPUSH
11948: LD_STRING DMar-2-shop
11950: PPUSH
11951: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11955: LD_EXP 35
11959: PPUSH
11960: LD_STRING DMar-3-shop
11962: PPUSH
11963: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11967: LD_EXP 28
11971: PPUSH
11972: LD_STRING DH-2-shop
11974: PPUSH
11975: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11979: LD_EXP 35
11983: PPUSH
11984: LD_STRING DMar-4-shop
11986: PPUSH
11987: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11991: LD_EXP 28
11995: PPUSH
11996: LD_STRING DH-3-shop
11998: PPUSH
11999: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12003: LD_EXP 35
12007: PPUSH
12008: LD_STRING DMar-5-shop
12010: PPUSH
12011: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12015: LD_EXP 28
12019: PPUSH
12020: LD_STRING DH-4-shop
12022: PPUSH
12023: CALL_OW 88
// DialogueOff ;
12027: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12031: LD_STRING ConstructVeh
12033: PPUSH
12034: CALL_OW 337
// end ;
12038: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12039: LD_INT 2
12041: PPUSH
12042: LD_INT 2
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL 39699 0 3
12052: PUSH
12053: LD_INT 0
12055: EQUAL
12056: IFFALSE 12068
12058: GO 12060
12060: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12061: LD_STRING Techs
12063: PPUSH
12064: CALL_OW 337
12068: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12069: LD_EXP 35
12073: PPUSH
12074: CALL_OW 302
12078: PUSH
12079: LD_INT 22
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: LD_INT 2
12091: PUSH
12092: LD_INT 34
12094: PUSH
12095: LD_INT 22
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 35
12104: PUSH
12105: LD_INT 22
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PPUSH
12121: CALL_OW 69
12125: AND
12126: IFFALSE 12233
12128: GO 12130
12130: DISABLE
// begin DialogueOn ;
12131: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12135: LD_INT 22
12137: PUSH
12138: LD_INT 2
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 2
12147: PUSH
12148: LD_INT 34
12150: PUSH
12151: LD_INT 22
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 35
12160: PUSH
12161: LD_INT 22
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PPUSH
12177: CALL_OW 69
12181: PPUSH
12182: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12186: LD_INT 10
12188: PPUSH
12189: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12193: LD_EXP 28
12197: PPUSH
12198: LD_STRING DH-1-bal
12200: PPUSH
12201: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12205: LD_EXP 35
12209: PPUSH
12210: LD_STRING DMar-1-bal
12212: PPUSH
12213: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12217: LD_EXP 28
12221: PPUSH
12222: LD_STRING DH-2-bal
12224: PPUSH
12225: CALL_OW 88
// DialogueOff ;
12229: CALL_OW 7
// end ;
12233: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12234: LD_EXP 32
12238: PPUSH
12239: CALL_OW 302
12243: PUSH
12244: LD_INT 22
12246: PUSH
12247: LD_INT 2
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 30
12256: PUSH
12257: LD_INT 6
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PPUSH
12268: CALL_OW 69
12272: AND
12273: IFFALSE 12334
12275: GO 12277
12277: DISABLE
// begin DialogueOn ;
12278: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12282: LD_EXP 32
12286: PPUSH
12287: LD_STRING DA-1-lab
12289: PPUSH
12290: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12294: LD_EXP 28
12298: PPUSH
12299: LD_STRING DH-1-lab
12301: PPUSH
12302: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12306: LD_EXP 32
12310: PPUSH
12311: LD_STRING DA-2-lab
12313: PPUSH
12314: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12318: LD_EXP 28
12322: PPUSH
12323: LD_STRING DH-2-lab
12325: PPUSH
12326: CALL_OW 88
// DialogueOff ;
12330: CALL_OW 7
// end ;
12334: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12335: LD_EXP 33
12339: PPUSH
12340: CALL_OW 302
12344: PUSH
12345: LD_INT 22
12347: PUSH
12348: LD_INT 2
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 25
12357: PUSH
12358: LD_INT 15
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PPUSH
12369: CALL_OW 69
12373: AND
12374: PUSH
12375: LD_INT 81
12377: PUSH
12378: LD_INT 2
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PPUSH
12385: CALL_OW 69
12389: NOT
12390: AND
12391: IFFALSE 12573
12393: GO 12395
12395: DISABLE
12396: LD_INT 0
12398: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12399: LD_ADDR_VAR 0 1
12403: PUSH
12404: LD_INT 22
12406: PUSH
12407: LD_INT 2
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 25
12416: PUSH
12417: LD_INT 15
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PPUSH
12428: CALL_OW 69
12432: ST_TO_ADDR
// InGameOn ;
12433: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12437: LD_VAR 0 1
12441: PUSH
12442: LD_INT 1
12444: ARRAY
12445: PPUSH
12446: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12450: LD_VAR 0 1
12454: PUSH
12455: LD_INT 1
12457: ARRAY
12458: PPUSH
12459: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12463: LD_EXP 33
12467: PPUSH
12468: LD_STRING DK-1-apesol
12470: PPUSH
12471: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12475: LD_VAR 0 1
12479: PUSH
12480: LD_INT 1
12482: ARRAY
12483: PPUSH
12484: LD_INT 35
12486: PPUSH
12487: LD_INT 28
12489: PPUSH
12490: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12494: LD_VAR 0 1
12498: PUSH
12499: LD_INT 1
12501: ARRAY
12502: PPUSH
12503: LD_INT 36
12505: PPUSH
12506: LD_INT 17
12508: PPUSH
12509: CALL_OW 171
// DialogueOn ;
12513: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12517: LD_EXP 32
12521: PPUSH
12522: LD_STRING DA-1-apesol
12524: PPUSH
12525: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12529: LD_EXP 33
12533: PPUSH
12534: LD_STRING DK-2-apesol
12536: PPUSH
12537: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12541: LD_EXP 32
12545: PPUSH
12546: LD_STRING DA-2-apesol
12548: PPUSH
12549: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12553: LD_EXP 33
12557: PPUSH
12558: LD_STRING DK-3-apesol
12560: PPUSH
12561: CALL_OW 88
// DialogueOff ;
12565: CALL_OW 7
// InGameOff ;
12569: CALL_OW 9
// end ;
12573: PPOPN 1
12575: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12576: LD_EXP 34
12580: PPUSH
12581: CALL_OW 302
12585: PUSH
12586: LD_INT 22
12588: PUSH
12589: LD_INT 2
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 25
12598: PUSH
12599: LD_INT 16
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PPUSH
12610: CALL_OW 69
12614: AND
12615: PUSH
12616: LD_INT 81
12618: PUSH
12619: LD_INT 2
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PPUSH
12626: CALL_OW 69
12630: NOT
12631: AND
12632: IFFALSE 12917
12634: GO 12636
12636: DISABLE
12637: LD_INT 0
12639: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12640: LD_ADDR_VAR 0 1
12644: PUSH
12645: LD_INT 22
12647: PUSH
12648: LD_INT 2
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 25
12657: PUSH
12658: LD_INT 16
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PPUSH
12669: CALL_OW 69
12673: ST_TO_ADDR
// InGameOn ;
12674: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12678: LD_INT 35
12680: PPUSH
12681: LD_INT 22
12683: PPUSH
12684: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12688: LD_INT 5
12690: PPUSH
12691: LD_INT 35
12693: PPUSH
12694: LD_INT 22
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12704: LD_EXP 34
12708: PPUSH
12709: LD_VAR 0 1
12713: PUSH
12714: LD_INT 1
12716: ARRAY
12717: PPUSH
12718: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12722: LD_VAR 0 1
12726: PUSH
12727: LD_INT 1
12729: ARRAY
12730: PPUSH
12731: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12735: LD_VAR 0 1
12739: PUSH
12740: LD_INT 1
12742: ARRAY
12743: PPUSH
12744: CALL_OW 122
// wait ( 0 0$2 ) ;
12748: LD_INT 70
12750: PPUSH
12751: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12755: LD_EXP 34
12759: PPUSH
12760: LD_STRING DS-1-apeeng
12762: PPUSH
12763: CALL_OW 88
// if IsOk ( Kamil ) then
12767: LD_EXP 31
12771: PPUSH
12772: CALL_OW 302
12776: IFFALSE 12913
// begin Say ( Kamil , DKam-1-apeeng ) ;
12778: LD_EXP 31
12782: PPUSH
12783: LD_STRING DKam-1-apeeng
12785: PPUSH
12786: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12790: LD_EXP 34
12794: PPUSH
12795: LD_STRING DS-2-apeeng
12797: PPUSH
12798: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12802: LD_EXP 31
12806: PPUSH
12807: LD_STRING DKam-2-apeeng
12809: PPUSH
12810: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12814: LD_EXP 34
12818: PPUSH
12819: LD_STRING DS-3-apeeng
12821: PPUSH
12822: CALL_OW 88
// if not IsOK ( Kaia ) then
12826: LD_EXP 33
12830: PPUSH
12831: CALL_OW 302
12835: NOT
12836: IFFALSE 12844
// begin InGameOff ;
12838: CALL_OW 9
// exit ;
12842: GO 12917
// end ; Say ( Kaia , DK-1-apeeng ) ;
12844: LD_EXP 33
12848: PPUSH
12849: LD_STRING DK-1-apeeng
12851: PPUSH
12852: CALL_OW 88
// if not IsOk ( Givi ) then
12856: LD_EXP 29
12860: PPUSH
12861: CALL_OW 302
12865: NOT
12866: IFFALSE 12877
// begin Video ( false ) ;
12868: LD_INT 0
12870: PPUSH
12871: CALL 76984 0 1
// exit ;
12875: GO 12917
// end ; Say ( Givi , DG-1-apeeng ) ;
12877: LD_EXP 29
12881: PPUSH
12882: LD_STRING DG-1-apeeng
12884: PPUSH
12885: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12889: LD_EXP 33
12893: PPUSH
12894: LD_STRING DK-2-apeeng
12896: PPUSH
12897: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12901: LD_EXP 33
12905: PPUSH
12906: LD_STRING DK-3-apeeng
12908: PPUSH
12909: CALL_OW 88
// end ; InGameOff ;
12913: CALL_OW 9
// end ;
12917: PPOPN 1
12919: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12920: LD_EXP 4
12924: PUSH
12925: LD_INT 22
12927: PUSH
12928: LD_INT 2
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 30
12937: PUSH
12938: LD_INT 0
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PPUSH
12949: CALL_OW 69
12953: AND
12954: IFFALSE 13119
12956: GO 12958
12958: DISABLE
// begin wait ( 0 0$10 ) ;
12959: LD_INT 350
12961: PPUSH
12962: CALL_OW 67
// DialogueOn ;
12966: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12970: LD_EXP 36
12974: PPUSH
12975: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12979: LD_EXP 36
12983: PPUSH
12984: LD_STRING DF-1-distribution
12986: PPUSH
12987: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12991: LD_EXP 28
12995: PPUSH
12996: LD_STRING DH-2-distribution
12998: PPUSH
12999: CALL_OW 88
// if IsOk ( Kaia ) then
13003: LD_EXP 33
13007: PPUSH
13008: CALL_OW 302
13012: IFFALSE 13073
// begin Say ( Kaia , DK-1-distribution ) ;
13014: LD_EXP 33
13018: PPUSH
13019: LD_STRING DK-1-distribution
13021: PPUSH
13022: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13026: LD_EXP 28
13030: PPUSH
13031: LD_STRING DH-1-distribution
13033: PPUSH
13034: CALL_OW 88
// if IsOk ( Givi ) then
13038: LD_EXP 29
13042: PPUSH
13043: CALL_OW 302
13047: IFFALSE 13073
// begin Say ( Givi , DG-1-distribution ) ;
13049: LD_EXP 29
13053: PPUSH
13054: LD_STRING DG-1-distribution
13056: PPUSH
13057: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13061: LD_EXP 28
13065: PPUSH
13066: LD_STRING DH-3-distribution
13068: PPUSH
13069: CALL_OW 88
// end ; end ; DialogueOff ;
13073: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13077: LD_STRING Crates1
13079: PPUSH
13080: CALL_OW 337
// farmerRequestedCrates := 300 ;
13084: LD_ADDR_EXP 16
13088: PUSH
13089: LD_INT 300
13091: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13092: LD_STRING FarmerCrates
13094: PPUSH
13095: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13099: LD_INT 10
13101: PPUSH
13102: LD_INT 1
13104: PPUSH
13105: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
13109: LD_INT 108
13111: PPUSH
13112: LD_INT 61
13114: PPUSH
13115: CALL_OW 86
// end ;
13119: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13120: LD_EXP 6
13124: PUSH
13125: LD_INT 22
13127: PUSH
13128: LD_INT 2
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 3
13137: PUSH
13138: LD_INT 57
13140: PUSH
13141: EMPTY
13142: LIST
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 2
13150: PUSH
13151: LD_INT 30
13153: PUSH
13154: LD_INT 6
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 30
13163: PUSH
13164: LD_INT 7
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: LIST
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: PPUSH
13181: CALL_OW 69
13185: AND
13186: PUSH
13187: LD_INT 22
13189: PUSH
13190: LD_INT 2
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 3
13199: PUSH
13200: LD_INT 57
13202: PUSH
13203: EMPTY
13204: LIST
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 30
13212: PUSH
13213: LD_INT 4
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 69
13229: AND
13230: IFFALSE 13394
13232: GO 13234
13234: DISABLE
13235: LD_INT 0
13237: PPUSH
// begin wait ( 0 0$10 ) ;
13238: LD_INT 350
13240: PPUSH
13241: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13245: LD_ADDR_VAR 0 1
13249: PUSH
13250: LD_EXP 42
13254: PPUSH
13255: LD_INT 26
13257: PUSH
13258: LD_INT 1
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: LD_INT 25
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PPUSH
13279: CALL_OW 72
13283: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13284: LD_EXP 28
13288: PPUSH
13289: LD_STRING DH-1-task
13291: PPUSH
13292: CALL_OW 88
// if IsOk ( Sophia ) then
13296: LD_EXP 34
13300: PPUSH
13301: CALL_OW 302
13305: IFFALSE 13345
// begin Say ( Sophia , DS-1-task ) ;
13307: LD_EXP 34
13311: PPUSH
13312: LD_STRING DS-1-task
13314: PPUSH
13315: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13319: LD_EXP 34
13323: PPUSH
13324: LD_STRING DS-2-task
13326: PPUSH
13327: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13331: LD_EXP 28
13335: PPUSH
13336: LD_STRING DH-2-task
13338: PPUSH
13339: CALL_OW 88
// end else
13343: GO 13379
// if eng then
13345: LD_VAR 0 1
13349: IFFALSE 13379
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13351: LD_VAR 0 1
13355: PUSH
13356: LD_INT 1
13358: ARRAY
13359: PPUSH
13360: LD_STRING DArm-1-task
13362: PPUSH
13363: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13367: LD_EXP 28
13371: PPUSH
13372: LD_STRING DH-2-task
13374: PPUSH
13375: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13379: LD_STRING BaseConstructed
13381: PPUSH
13382: CALL_OW 337
// allowConvoys := true ;
13386: LD_ADDR_EXP 12
13390: PUSH
13391: LD_INT 1
13393: ST_TO_ADDR
// end ;
13394: PPOPN 1
13396: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13397: LD_INT 22
13399: PUSH
13400: LD_INT 4
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 34
13409: PUSH
13410: LD_INT 12
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PPUSH
13421: CALL_OW 69
13425: IFFALSE 13593
13427: GO 13429
13429: DISABLE
13430: LD_INT 0
13432: PPUSH
13433: PPUSH
13434: PPUSH
// begin wait ( 0 0$2 ) ;
13435: LD_INT 70
13437: PPUSH
13438: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13442: LD_ADDR_VAR 0 1
13446: PUSH
13447: LD_INT 22
13449: PUSH
13450: LD_INT 4
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 34
13459: PUSH
13460: LD_INT 12
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL_OW 69
13475: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13476: LD_ADDR_VAR 0 2
13480: PUSH
13481: LD_VAR 0 1
13485: PUSH
13486: LD_INT 1
13488: ARRAY
13489: PPUSH
13490: CALL_OW 250
13494: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13495: LD_ADDR_VAR 0 3
13499: PUSH
13500: LD_VAR 0 1
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PPUSH
13509: CALL_OW 251
13513: ST_TO_ADDR
// DialogueOn ;
13514: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13518: LD_VAR 0 2
13522: PPUSH
13523: LD_VAR 0 3
13527: PPUSH
13528: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13532: LD_VAR 0 2
13536: PPUSH
13537: LD_VAR 0 3
13541: PPUSH
13542: LD_INT 2
13544: PPUSH
13545: LD_INT 6
13547: NEG
13548: PPUSH
13549: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13553: LD_INT 10
13555: PPUSH
13556: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13560: LD_EXP 28
13564: PPUSH
13565: LD_STRING DH-1-seecargo
13567: PPUSH
13568: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13572: LD_VAR 0 2
13576: PPUSH
13577: LD_VAR 0 3
13581: PPUSH
13582: LD_INT 2
13584: PPUSH
13585: CALL_OW 331
// DialogueOff ;
13589: CALL_OW 7
// end ;
13593: PPOPN 3
13595: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13596: LD_EXP 4
13600: PUSH
13601: LD_EXP 15
13605: PUSH
13606: LD_INT 300
13608: GREATEREQUAL
13609: AND
13610: IFFALSE 13682
13612: GO 13614
13614: DISABLE
// begin DialogueOn ;
13615: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13619: LD_EXP 36
13623: PPUSH
13624: LD_STRING DF-1-delivery-2
13626: PPUSH
13627: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13631: LD_EXP 28
13635: PPUSH
13636: LD_STRING DH-1-delivery-2
13638: PPUSH
13639: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13643: LD_EXP 36
13647: PPUSH
13648: LD_STRING DF-2-delivery-2
13650: PPUSH
13651: CALL_OW 94
// DialogueOff ;
13655: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13659: LD_STRING Crates2
13661: PPUSH
13662: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13666: LD_ADDR_EXP 17
13670: PUSH
13671: LD_INT 63000
13673: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13674: LD_ADDR_EXP 16
13678: PUSH
13679: LD_INT 600
13681: ST_TO_ADDR
// end ;
13682: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13683: LD_EXP 4
13687: PUSH
13688: LD_EXP 15
13692: PUSH
13693: LD_INT 600
13695: GREATEREQUAL
13696: AND
13697: PUSH
13698: LD_OWVAR 67
13702: PUSH
13703: LD_INT 1
13705: GREATER
13706: AND
13707: IFFALSE 13907
13709: GO 13711
13711: DISABLE
// begin DialogueOn ;
13712: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13716: LD_EXP 36
13720: PPUSH
13721: LD_STRING DF-1-delivery-3
13723: PPUSH
13724: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13728: LD_EXP 28
13732: PPUSH
13733: LD_STRING DH-1-delivery-3
13735: PPUSH
13736: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13740: LD_EXP 36
13744: PPUSH
13745: LD_STRING DF-2-delivery-3
13747: PPUSH
13748: CALL_OW 94
// if IsOk ( Kaia ) then
13752: LD_EXP 33
13756: PPUSH
13757: CALL_OW 302
13761: IFFALSE 13811
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13763: LD_EXP 33
13767: PPUSH
13768: LD_STRING DK-1-delivery-3
13770: PPUSH
13771: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13775: LD_EXP 28
13779: PPUSH
13780: LD_STRING DH-2-delivery-3
13782: PPUSH
13783: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13787: LD_EXP 29
13791: PPUSH
13792: LD_STRING DG-1-delivery-3
13794: PPUSH
13795: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13799: LD_EXP 30
13803: PPUSH
13804: LD_STRING DM-1-delivery-3
13806: PPUSH
13807: CALL_OW 88
// end ; DialogueOff ;
13811: CALL_OW 7
// case Difficulty of 2 :
13815: LD_OWVAR 67
13819: PUSH
13820: LD_INT 2
13822: DOUBLE
13823: EQUAL
13824: IFTRUE 13828
13826: GO 13846
13828: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
13829: LD_STRING Crates3
13831: PPUSH
13832: CALL_OW 337
// farmerRequestedCrates := 900 ;
13836: LD_ADDR_EXP 16
13840: PUSH
13841: LD_INT 900
13843: ST_TO_ADDR
// end ; 3 :
13844: GO 13899
13846: LD_INT 3
13848: DOUBLE
13849: EQUAL
13850: IFTRUE 13854
13852: GO 13872
13854: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
13855: LD_STRING Crates4
13857: PPUSH
13858: CALL_OW 337
// farmerRequestedCrates := 1200 ;
13862: LD_ADDR_EXP 16
13866: PUSH
13867: LD_INT 1200
13869: ST_TO_ADDR
// end ; 4 :
13870: GO 13899
13872: LD_INT 4
13874: DOUBLE
13875: EQUAL
13876: IFTRUE 13880
13878: GO 13898
13880: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
13881: LD_STRING Crates5
13883: PPUSH
13884: CALL_OW 337
// farmerRequestedCrates := 1400 ;
13888: LD_ADDR_EXP 16
13892: PUSH
13893: LD_INT 1400
13895: ST_TO_ADDR
// end ; end ;
13896: GO 13899
13898: POP
// farmerCratesCounter := 30 30$00 ;
13899: LD_ADDR_EXP 17
13903: PUSH
13904: LD_INT 63000
13906: ST_TO_ADDR
// end ;
13907: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
13908: LD_EXP 4
13912: PUSH
13913: LD_EXP 15
13917: PUSH
13918: LD_INT 600
13920: PUSH
13921: LD_INT 900
13923: PUSH
13924: LD_INT 1200
13926: PUSH
13927: LD_INT 1400
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: LD_OWVAR 67
13940: ARRAY
13941: GREATEREQUAL
13942: AND
13943: IFFALSE 14029
13945: GO 13947
13947: DISABLE
// begin retreatAllowed := true ;
13948: LD_ADDR_EXP 11
13952: PUSH
13953: LD_INT 1
13955: ST_TO_ADDR
// display_strings := [ ] ;
13956: LD_ADDR_OWVAR 47
13960: PUSH
13961: EMPTY
13962: ST_TO_ADDR
// DialogueOn ;
13963: CALL_OW 6
// InGameOn ;
13967: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13971: LD_EXP 37
13975: PPUSH
13976: LD_STRING DO-radio-end
13978: PPUSH
13979: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13983: LD_EXP 28
13987: PPUSH
13988: LD_STRING DH-1-radio-end
13990: PPUSH
13991: CALL_OW 88
// InGameOff ;
13995: CALL_OW 9
// DialogueOff ;
13999: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14003: LD_STRING Retreat
14005: PPUSH
14006: CALL_OW 337
// wait ( 0 0$2 ) ;
14010: LD_INT 70
14012: PPUSH
14013: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14017: LD_EXP 28
14021: PPUSH
14022: LD_STRING DH-2-radio-end
14024: PPUSH
14025: CALL_OW 88
// end ;
14029: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14030: LD_EXP 11
14034: IFFALSE 14165
14036: GO 14038
14038: DISABLE
14039: LD_INT 0
14041: PPUSH
14042: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14043: LD_INT 10
14045: PPUSH
14046: LD_INT 0
14048: PPUSH
14049: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14053: LD_ADDR_VAR 0 1
14057: PUSH
14058: LD_EXP 39
14062: PPUSH
14063: LD_INT 25
14065: PUSH
14066: LD_INT 2
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PPUSH
14073: CALL_OW 72
14077: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14078: LD_VAR 0 1
14082: PUSH
14083: LD_INT 102
14085: PPUSH
14086: LD_INT 69
14088: PPUSH
14089: CALL_OW 428
14093: PUSH
14094: LD_INT 0
14096: EQUAL
14097: AND
14098: IFFALSE 14165
// begin for i in tmp do
14100: LD_ADDR_VAR 0 2
14104: PUSH
14105: LD_VAR 0 1
14109: PUSH
14110: FOR_IN
14111: IFFALSE 14135
// if IsInUnit ( i ) then
14113: LD_VAR 0 2
14117: PPUSH
14118: CALL_OW 310
14122: IFFALSE 14133
// ComExitBuilding ( i ) ;
14124: LD_VAR 0 2
14128: PPUSH
14129: CALL_OW 122
14133: GO 14110
14135: POP
14136: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14137: LD_VAR 0 1
14141: PPUSH
14142: LD_INT 31
14144: PPUSH
14145: LD_INT 102
14147: PPUSH
14148: LD_INT 69
14150: PPUSH
14151: LD_INT 2
14153: PPUSH
14154: CALL_OW 205
// wait ( 0 0$3 ) ;
14158: LD_INT 105
14160: PPUSH
14161: CALL_OW 67
// end ; end ;
14165: PPOPN 2
14167: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14168: LD_EXP 11
14172: NOT
14173: PUSH
14174: LD_INT 5
14176: PPUSH
14177: CALL_OW 301
14181: AND
14182: IFFALSE 14214
14184: GO 14186
14186: DISABLE
// begin DialogueOn ;
14187: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14191: LD_EXP 36
14195: PPUSH
14196: LD_STRING DF-1-failure
14198: PPUSH
14199: CALL_OW 94
// DialogueOff ;
14203: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14207: LD_STRING FarmerDepot
14209: PPUSH
14210: CALL_OW 104
// end ;
14214: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14215: LD_EXP 11
14219: PUSH
14220: LD_EXP 28
14224: PPUSH
14225: LD_EXP 36
14229: PPUSH
14230: CALL_OW 296
14234: PUSH
14235: LD_INT 12
14237: LESS
14238: AND
14239: PUSH
14240: LD_INT 81
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PPUSH
14264: CALL_OW 69
14268: NOT
14269: AND
14270: IFFALSE 14954
14272: GO 14274
14274: DISABLE
14275: LD_INT 0
14277: PPUSH
14278: PPUSH
14279: PPUSH
// begin allowConvoys := false ;
14280: LD_ADDR_EXP 12
14284: PUSH
14285: LD_INT 0
14287: ST_TO_ADDR
// InGameOn ;
14288: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14292: LD_EXP 28
14296: PPUSH
14297: LD_EXP 36
14301: PPUSH
14302: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14306: LD_EXP 36
14310: PPUSH
14311: LD_EXP 28
14315: PPUSH
14316: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14320: LD_EXP 36
14324: PPUSH
14325: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14329: LD_EXP 28
14333: PPUSH
14334: LD_STRING DH-1-end
14336: PPUSH
14337: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14341: LD_EXP 36
14345: PPUSH
14346: LD_STRING DF-1-end
14348: PPUSH
14349: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14353: LD_EXP 36
14357: PPUSH
14358: LD_STRING DF-2-end
14360: PPUSH
14361: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14365: LD_EXP 28
14369: PPUSH
14370: LD_STRING DH-2-end
14372: PPUSH
14373: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14377: LD_EXP 36
14381: PPUSH
14382: LD_STRING DF-3-end
14384: PPUSH
14385: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14389: LD_EXP 28
14393: PPUSH
14394: LD_STRING DH-3-end
14396: PPUSH
14397: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14401: LD_EXP 29
14405: PPUSH
14406: LD_STRING DG-1-end
14408: PPUSH
14409: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14413: LD_EXP 28
14417: PPUSH
14418: LD_STRING DH-4-end
14420: PPUSH
14421: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14425: LD_EXP 36
14429: PPUSH
14430: LD_STRING DF-4-end
14432: PPUSH
14433: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14437: LD_EXP 28
14441: PPUSH
14442: LD_STRING DH-5-end
14444: PPUSH
14445: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14449: LD_EXP 36
14453: PPUSH
14454: LD_STRING DF-5-end
14456: PPUSH
14457: CALL_OW 88
// InGameOff ;
14461: CALL_OW 9
// allowCargoEvacuation := true ;
14465: LD_ADDR_EXP 7
14469: PUSH
14470: LD_INT 1
14472: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: LD_INT 4
14480: PUSH
14481: LD_INT 3
14483: PUSH
14484: LD_INT 2
14486: PUSH
14487: LD_INT 1
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: PUSH
14496: LD_OWVAR 67
14500: ARRAY
14501: ST_TO_ADDR
// if farmerSquad < max then
14502: LD_EXP 39
14506: PUSH
14507: LD_VAR 0 2
14511: LESS
14512: IFFALSE 14524
// max := farmerSquad ;
14514: LD_ADDR_VAR 0 2
14518: PUSH
14519: LD_EXP 39
14523: ST_TO_ADDR
// for i := 1 to max do
14524: LD_ADDR_VAR 0 1
14528: PUSH
14529: DOUBLE
14530: LD_INT 1
14532: DEC
14533: ST_TO_ADDR
14534: LD_VAR 0 2
14538: PUSH
14539: FOR_TO
14540: IFFALSE 14578
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14542: LD_EXP 39
14546: PUSH
14547: LD_INT 1
14549: ARRAY
14550: PPUSH
14551: LD_INT 2
14553: PPUSH
14554: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14558: LD_ADDR_EXP 39
14562: PUSH
14563: LD_EXP 39
14567: PPUSH
14568: LD_INT 1
14570: PPUSH
14571: CALL_OW 3
14575: ST_TO_ADDR
// end ;
14576: GO 14539
14578: POP
14579: POP
// for i in Farmer ^ farmerSquad do
14580: LD_ADDR_VAR 0 1
14584: PUSH
14585: LD_EXP 36
14589: PUSH
14590: LD_EXP 39
14594: ADD
14595: PUSH
14596: FOR_IN
14597: IFFALSE 14636
// begin if IsInUnit ( i ) then
14599: LD_VAR 0 1
14603: PPUSH
14604: CALL_OW 310
14608: IFFALSE 14619
// ComExitBuilding ( i ) ;
14610: LD_VAR 0 1
14614: PPUSH
14615: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14619: LD_VAR 0 1
14623: PPUSH
14624: LD_INT 102
14626: PPUSH
14627: LD_INT 7
14629: PPUSH
14630: CALL_OW 171
// end ;
14634: GO 14596
14636: POP
14637: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14638: LD_ADDR_VAR 0 1
14642: PUSH
14643: LD_INT 22
14645: PUSH
14646: LD_INT 5
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 21
14655: PUSH
14656: LD_INT 3
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PPUSH
14667: CALL_OW 69
14671: PUSH
14672: LD_INT 5
14674: DIFF
14675: PUSH
14676: FOR_IN
14677: IFFALSE 14693
// SetSide ( i , 2 ) ;
14679: LD_VAR 0 1
14683: PPUSH
14684: LD_INT 2
14686: PPUSH
14687: CALL_OW 235
14691: GO 14676
14693: POP
14694: POP
// wait ( 0 0$2 ) ;
14695: LD_INT 70
14697: PPUSH
14698: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14702: LD_EXP 28
14706: PPUSH
14707: LD_STRING DH-6-end
14709: PPUSH
14710: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14714: LD_INT 35
14716: PPUSH
14717: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14721: LD_ADDR_VAR 0 3
14725: PUSH
14726: LD_EXP 36
14730: PUSH
14731: LD_EXP 39
14735: ADD
14736: PPUSH
14737: LD_INT 95
14739: PUSH
14740: LD_INT 3
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PPUSH
14747: CALL_OW 72
14751: ST_TO_ADDR
// if tmp then
14752: LD_VAR 0 3
14756: IFFALSE 14800
// for i in tmp do
14758: LD_ADDR_VAR 0 1
14762: PUSH
14763: LD_VAR 0 3
14767: PUSH
14768: FOR_IN
14769: IFFALSE 14798
// begin farmerSquad := farmerSquad diff i ;
14771: LD_ADDR_EXP 39
14775: PUSH
14776: LD_EXP 39
14780: PUSH
14781: LD_VAR 0 1
14785: DIFF
14786: ST_TO_ADDR
// RemoveUnit ( i ) ;
14787: LD_VAR 0 1
14791: PPUSH
14792: CALL_OW 64
// end ;
14796: GO 14768
14798: POP
14799: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14800: LD_EXP 39
14804: PUSH
14805: EMPTY
14806: EQUAL
14807: PUSH
14808: LD_EXP 36
14812: PPUSH
14813: CALL_OW 305
14817: NOT
14818: AND
14819: IFFALSE 14714
// if farmerHumanLoseCounter = 0 then
14821: LD_EXP 20
14825: PUSH
14826: LD_INT 0
14828: EQUAL
14829: IFFALSE 14838
// SetAchievement ( ACH_BABY ) ;
14831: LD_STRING ACH_BABY
14833: PPUSH
14834: CALL_OW 543
// wait ( 1 1$00 ) ;
14838: LD_INT 2100
14840: PPUSH
14841: CALL_OW 67
// SendAttack ;
14845: CALL 6178 0 0
// Say ( Heike , DH-7-end ) ;
14849: LD_EXP 28
14853: PPUSH
14854: LD_STRING DH-7-end
14856: PPUSH
14857: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
14861: LD_ADDR_VAR 0 1
14865: PUSH
14866: DOUBLE
14867: LD_INT 1
14869: DEC
14870: ST_TO_ADDR
14871: LD_INT 2
14873: PUSH
14874: LD_INT 3
14876: PUSH
14877: LD_INT 3
14879: PUSH
14880: LD_INT 4
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: PUSH
14889: LD_OWVAR 67
14893: ARRAY
14894: PUSH
14895: FOR_TO
14896: IFFALSE 14952
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
14898: LD_INT 4200
14900: PUSH
14901: LD_INT 3500
14903: PUSH
14904: LD_INT 3150
14906: PUSH
14907: LD_INT 2800
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: PUSH
14916: LD_OWVAR 67
14920: ARRAY
14921: PPUSH
14922: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
14926: LD_EXP 11
14930: PUSH
14931: LD_EXP 21
14935: PUSH
14936: LD_INT 1
14938: LESS
14939: AND
14940: IFFALSE 14946
// exit ;
14942: POP
14943: POP
14944: GO 14954
// SendAttack ;
14946: CALL 6178 0 0
// end ;
14950: GO 14895
14952: POP
14953: POP
// end ;
14954: PPOPN 3
14956: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14957: LD_EXP 7
14961: PUSH
14962: LD_EXP 21
14966: PUSH
14967: LD_INT 0
14969: GREATER
14970: AND
14971: IFFALSE 14981
14973: GO 14975
14975: DISABLE
// begin enable ;
14976: ENABLE
// CargoEvacuation ;
14977: CALL 3651 0 0
// end ;
14981: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14982: LD_EXP 17
14986: PUSH
14987: LD_INT 18900
14989: LESSEQUAL
14990: IFFALSE 15039
14992: GO 14994
14994: DISABLE
// begin DialogueOn ;
14995: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14999: LD_EXP 36
15003: PPUSH
15004: LD_STRING DF-1-distribution-a
15006: PPUSH
15007: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15011: LD_EXP 28
15015: PPUSH
15016: LD_STRING DH-1-distribution-a
15018: PPUSH
15019: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15023: LD_EXP 36
15027: PPUSH
15028: LD_STRING DF-2-distribution-a
15030: PPUSH
15031: CALL_OW 94
// DialogueOff ;
15035: CALL_OW 7
// end ;
15039: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15040: LD_EXP 17
15044: PUSH
15045: LD_INT 0
15047: LESSEQUAL
15048: IFFALSE 15080
15050: GO 15052
15052: DISABLE
// begin DialogueOn ;
15053: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15057: LD_EXP 36
15061: PPUSH
15062: LD_STRING DF-3-distribution-a
15064: PPUSH
15065: CALL_OW 94
// YouLost ( Distribution ) ;
15069: LD_STRING Distribution
15071: PPUSH
15072: CALL_OW 104
// DialogueOff ;
15076: CALL_OW 7
// end ;
15080: END
// every 0 0$1 trigger vehCounter >= 2 do
15081: LD_EXP 22
15085: PUSH
15086: LD_INT 2
15088: GREATEREQUAL
15089: IFFALSE 15101
15091: GO 15093
15093: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15094: LD_STRING VehConstructed
15096: PPUSH
15097: CALL_OW 337
15101: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15102: LD_INT 22
15104: PUSH
15105: LD_INT 2
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PUSH
15112: LD_INT 34
15114: PUSH
15115: LD_INT 12
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PPUSH
15126: CALL_OW 69
15130: IFFALSE 15190
15132: GO 15134
15134: DISABLE
// begin DialogueOn ;
15135: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15139: LD_EXP 28
15143: PPUSH
15144: LD_STRING DH-1-truck
15146: PPUSH
15147: CALL_OW 88
// if IsOk ( Markov ) then
15151: LD_EXP 35
15155: PPUSH
15156: CALL_OW 302
15160: IFFALSE 15186
// begin Say ( Markov , DMar-1-truck ) ;
15162: LD_EXP 35
15166: PPUSH
15167: LD_STRING DMar-1-truck
15169: PPUSH
15170: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15174: LD_EXP 28
15178: PPUSH
15179: LD_STRING DH-2-truck
15181: PPUSH
15182: CALL_OW 88
// end ; DialogueOff ;
15186: CALL_OW 7
// end ;
15190: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15191: LD_INT 0
15193: PPUSH
15194: PPUSH
15195: PPUSH
// if IsOk ( Givi ) then
15196: LD_EXP 29
15200: PPUSH
15201: CALL_OW 302
15205: IFFALSE 15221
// begin Say ( Givi , DG-1-nocargo ) ;
15207: LD_EXP 29
15211: PPUSH
15212: LD_STRING DG-1-nocargo
15214: PPUSH
15215: CALL_OW 88
// exit ;
15219: GO 15317
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15221: LD_ADDR_VAR 0 2
15225: PUSH
15226: LD_EXP 42
15230: PPUSH
15231: LD_INT 26
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PPUSH
15241: CALL_OW 72
15245: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15246: LD_ADDR_VAR 0 3
15250: PUSH
15251: LD_EXP 42
15255: PPUSH
15256: LD_INT 26
15258: PUSH
15259: LD_INT 2
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PPUSH
15266: CALL_OW 72
15270: ST_TO_ADDR
// if randomMen then
15271: LD_VAR 0 2
15275: IFFALSE 15295
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15277: LD_VAR 0 2
15281: PUSH
15282: LD_INT 1
15284: ARRAY
15285: PPUSH
15286: LD_STRING DArm-1-nocargo
15288: PPUSH
15289: CALL_OW 88
15293: GO 15317
// if randomWomen then
15295: LD_VAR 0 3
15299: IFFALSE 15317
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15301: LD_VAR 0 3
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: LD_STRING DArf-1-nocargo
15312: PPUSH
15313: CALL_OW 88
// end ;
15317: LD_VAR 0 1
15321: RET
// export function IncomingAttack ; begin
15322: LD_INT 0
15324: PPUSH
// if attackWave = 1 then
15325: LD_EXP 19
15329: PUSH
15330: LD_INT 1
15332: EQUAL
15333: IFFALSE 15404
// begin DialogueOn ;
15335: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15339: LD_EXP 37
15343: PPUSH
15344: LD_STRING DO-1-radio-1
15346: PPUSH
15347: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15351: LD_EXP 28
15355: PPUSH
15356: LD_STRING DH-1-radio-1-
15358: PPUSH
15359: CALL_OW 88
// if IsOk ( Markov ) then
15363: LD_EXP 35
15367: PPUSH
15368: CALL_OW 302
15372: IFFALSE 15398
// begin Say ( Markov , DMar-1-radio-1 ) ;
15374: LD_EXP 35
15378: PPUSH
15379: LD_STRING DMar-1-radio-1
15381: PPUSH
15382: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15386: LD_EXP 28
15390: PPUSH
15391: LD_STRING DH-2-radio-1
15393: PPUSH
15394: CALL_OW 88
// end ; DialogueOff ;
15398: CALL_OW 7
// end else
15402: GO 15428
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15404: LD_EXP 37
15408: PPUSH
15409: LD_STRING DO-1-radio-u
15411: PPUSH
15412: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15416: LD_EXP 28
15420: PPUSH
15421: LD_STRING DH-1-radio-u
15423: PPUSH
15424: CALL_OW 88
// end ; end ;
15428: LD_VAR 0 1
15432: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15433: LD_EXP 44
15437: PPUSH
15438: LD_INT 95
15440: PUSH
15441: LD_INT 8
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PPUSH
15448: CALL_OW 72
15452: IFFALSE 15555
15454: GO 15456
15456: DISABLE
15457: LD_INT 0
15459: PPUSH
// begin enable ;
15460: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15461: LD_ADDR_VAR 0 1
15465: PUSH
15466: LD_EXP 44
15470: PPUSH
15471: LD_INT 95
15473: PUSH
15474: LD_INT 8
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 72
15485: PUSH
15486: FOR_IN
15487: IFFALSE 15516
// begin usForces := usForces diff i ;
15489: LD_ADDR_EXP 44
15493: PUSH
15494: LD_EXP 44
15498: PUSH
15499: LD_VAR 0 1
15503: DIFF
15504: ST_TO_ADDR
// RemoveUnit ( i ) ;
15505: LD_VAR 0 1
15509: PPUSH
15510: CALL_OW 64
// end ;
15514: GO 15486
15516: POP
15517: POP
// if not americanHasEscaped and attackWave = 1 then
15518: LD_EXP 8
15522: NOT
15523: PUSH
15524: LD_EXP 19
15528: PUSH
15529: LD_INT 1
15531: EQUAL
15532: AND
15533: IFFALSE 15555
// begin americanHasEscaped := true ;
15535: LD_ADDR_EXP 8
15539: PUSH
15540: LD_INT 1
15542: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15543: LD_EXP 28
15547: PPUSH
15548: LD_STRING DH-2-assault-a
15550: PPUSH
15551: CALL_OW 88
// end ; end ;
15555: PPOPN 1
15557: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15558: LD_INT 4
15560: PPUSH
15561: LD_INT 22
15563: PUSH
15564: LD_INT 1
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PPUSH
15571: CALL_OW 70
15575: PUSH
15576: LD_EXP 11
15580: NOT
15581: AND
15582: IFFALSE 15599
15584: GO 15586
15586: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15587: LD_EXP 36
15591: PPUSH
15592: LD_STRING DF-1-attack
15594: PPUSH
15595: CALL_OW 94
15599: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15600: LD_INT 5
15602: PPUSH
15603: CALL_OW 255
15607: PUSH
15608: LD_INT 2
15610: EQUAL
15611: IFFALSE 15627
15613: GO 15615
15615: DISABLE
// begin enable ;
15616: ENABLE
// SetSide ( arDepot , 5 ) ;
15617: LD_INT 5
15619: PPUSH
15620: LD_INT 5
15622: PPUSH
15623: CALL_OW 235
// end ;
15627: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15628: LD_INT 22
15630: PUSH
15631: LD_INT 1
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 21
15640: PUSH
15641: LD_INT 1
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PPUSH
15652: CALL_OW 69
15656: NOT
15657: PUSH
15658: LD_INT 22
15660: PUSH
15661: LD_INT 4
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PPUSH
15668: CALL_OW 69
15672: NOT
15673: AND
15674: PUSH
15675: LD_EXP 11
15679: NOT
15680: AND
15681: PUSH
15682: LD_EXP 15
15686: PUSH
15687: LD_INT 90
15689: GREATER
15690: AND
15691: PUSH
15692: LD_INT 7
15694: PPUSH
15695: LD_INT 22
15697: PUSH
15698: LD_INT 2
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 21
15707: PUSH
15708: LD_INT 1
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PPUSH
15719: CALL_OW 70
15723: AND
15724: PUSH
15725: LD_INT 22
15727: PUSH
15728: LD_INT 2
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 50
15737: PUSH
15738: EMPTY
15739: LIST
15740: PUSH
15741: LD_INT 30
15743: PUSH
15744: LD_INT 0
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 69
15760: AND
15761: IFFALSE 16554
15763: GO 15765
15765: DISABLE
15766: LD_INT 0
15768: PPUSH
15769: PPUSH
15770: PPUSH
15771: PPUSH
15772: PPUSH
// begin depot := usDepot ;
15773: LD_ADDR_VAR 0 5
15777: PUSH
15778: LD_INT 11
15780: ST_TO_ADDR
// if not depot then
15781: LD_VAR 0 5
15785: NOT
15786: IFFALSE 15826
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15788: LD_ADDR_VAR 0 5
15792: PUSH
15793: LD_INT 22
15795: PUSH
15796: LD_INT 2
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 30
15805: PUSH
15806: LD_INT 0
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PPUSH
15817: CALL_OW 69
15821: PUSH
15822: LD_INT 1
15824: ARRAY
15825: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15826: LD_ADDR_VAR 0 1
15830: PUSH
15831: LD_EXP 42
15835: PPUSH
15836: LD_INT 26
15838: PUSH
15839: LD_INT 1
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PPUSH
15846: CALL_OW 72
15850: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15851: LD_ADDR_VAR 0 2
15855: PUSH
15856: LD_EXP 42
15860: PPUSH
15861: LD_INT 26
15863: PUSH
15864: LD_INT 2
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PPUSH
15871: CALL_OW 72
15875: ST_TO_ADDR
// if IsOk ( Kaia ) then
15876: LD_EXP 33
15880: PPUSH
15881: CALL_OW 302
15885: IFFALSE 15906
// speaker := [ Kaia , DK ] else
15887: LD_ADDR_VAR 0 3
15891: PUSH
15892: LD_EXP 33
15896: PUSH
15897: LD_STRING DK
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: ST_TO_ADDR
15904: GO 15986
// if randomMen then
15906: LD_VAR 0 1
15910: IFFALSE 15945
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15912: LD_ADDR_VAR 0 3
15916: PUSH
15917: LD_VAR 0 1
15921: PUSH
15922: LD_INT 1
15924: PPUSH
15925: LD_VAR 0 1
15929: PPUSH
15930: CALL_OW 12
15934: ARRAY
15935: PUSH
15936: LD_STRING DArm
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: ST_TO_ADDR
15943: GO 15986
// if randomWomen then
15945: LD_VAR 0 2
15949: IFFALSE 15984
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15951: LD_ADDR_VAR 0 3
15955: PUSH
15956: LD_VAR 0 2
15960: PUSH
15961: LD_INT 1
15963: PPUSH
15964: LD_VAR 0 2
15968: PPUSH
15969: CALL_OW 12
15973: ARRAY
15974: PUSH
15975: LD_STRING DArf
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: ST_TO_ADDR
15982: GO 15986
// exit ;
15984: GO 16554
// if IsInUnit ( speaker [ 1 ] ) then
15986: LD_VAR 0 3
15990: PUSH
15991: LD_INT 1
15993: ARRAY
15994: PPUSH
15995: CALL_OW 310
15999: IFFALSE 16022
// place := IsInUnit ( speaker [ 1 ] ) else
16001: LD_ADDR_VAR 0 4
16005: PUSH
16006: LD_VAR 0 3
16010: PUSH
16011: LD_INT 1
16013: ARRAY
16014: PPUSH
16015: CALL_OW 310
16019: ST_TO_ADDR
16020: GO 16036
// place := speaker [ 1 ] ;
16022: LD_ADDR_VAR 0 4
16026: PUSH
16027: LD_VAR 0 3
16031: PUSH
16032: LD_INT 1
16034: ARRAY
16035: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16036: LD_VAR 0 4
16040: PPUSH
16041: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16045: LD_VAR 0 4
16049: PPUSH
16050: CALL_OW 250
16054: PPUSH
16055: LD_VAR 0 4
16059: PPUSH
16060: CALL_OW 251
16064: PPUSH
16065: CALL 2138 0 2
// wait ( 0 0$2 ) ;
16069: LD_INT 70
16071: PPUSH
16072: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16076: LD_EXP 38
16080: PPUSH
16081: CALL_OW 305
16085: NOT
16086: IFFALSE 16090
// exit ;
16088: GO 16554
// allowConvoys := false ;
16090: LD_ADDR_EXP 12
16094: PUSH
16095: LD_INT 0
16097: ST_TO_ADDR
// InGameOn ;
16098: CALL_OW 8
// wait ( 0 0$1 ) ;
16102: LD_INT 35
16104: PPUSH
16105: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16109: LD_EXP 38
16113: PPUSH
16114: LD_STRING DI-1-land
16116: PPUSH
16117: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16121: LD_VAR 0 3
16125: PUSH
16126: LD_INT 1
16128: ARRAY
16129: PPUSH
16130: CALL_OW 310
16134: IFFALSE 16149
// ComExit ( speaker [ 1 ] ) ;
16136: LD_VAR 0 3
16140: PUSH
16141: LD_INT 1
16143: ARRAY
16144: PPUSH
16145: CALL 77410 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16149: LD_VAR 0 3
16153: PUSH
16154: LD_INT 1
16156: ARRAY
16157: PPUSH
16158: LD_EXP 38
16162: PPUSH
16163: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16167: LD_VAR 0 3
16171: PUSH
16172: LD_INT 1
16174: ARRAY
16175: PPUSH
16176: LD_EXP 38
16180: PPUSH
16181: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16185: LD_EXP 38
16189: PPUSH
16190: LD_VAR 0 3
16194: PUSH
16195: LD_INT 1
16197: ARRAY
16198: PPUSH
16199: CALL_OW 119
// wait ( 0 0$1 ) ;
16203: LD_INT 35
16205: PPUSH
16206: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16210: LD_VAR 0 3
16214: PUSH
16215: LD_INT 1
16217: ARRAY
16218: PPUSH
16219: LD_VAR 0 3
16223: PUSH
16224: LD_INT 2
16226: ARRAY
16227: PUSH
16228: LD_STRING -1-land
16230: STR
16231: PPUSH
16232: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16236: LD_EXP 38
16240: PPUSH
16241: LD_STRING DI-2-land
16243: PPUSH
16244: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16248: LD_VAR 0 3
16252: PUSH
16253: LD_INT 1
16255: ARRAY
16256: PPUSH
16257: LD_VAR 0 3
16261: PUSH
16262: LD_INT 2
16264: ARRAY
16265: PUSH
16266: LD_STRING -2-land
16268: STR
16269: PPUSH
16270: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16274: LD_VAR 0 3
16278: PUSH
16279: LD_INT 1
16281: ARRAY
16282: PPUSH
16283: LD_VAR 0 3
16287: PUSH
16288: LD_INT 2
16290: ARRAY
16291: PUSH
16292: LD_STRING -3-land
16294: STR
16295: PPUSH
16296: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16300: LD_EXP 28
16304: PPUSH
16305: LD_STRING DH-1-land
16307: PPUSH
16308: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16312: LD_VAR 0 5
16316: PPUSH
16317: CALL_OW 313
16321: PUSH
16322: LD_INT 6
16324: EQUAL
16325: IFFALSE 16345
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16327: LD_VAR 0 5
16331: PPUSH
16332: CALL_OW 313
16336: PUSH
16337: LD_INT 1
16339: ARRAY
16340: PPUSH
16341: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16345: LD_EXP 38
16349: PPUSH
16350: LD_INT 2
16352: PPUSH
16353: CALL_OW 235
// CenterOnUnits ( depot ) ;
16357: LD_VAR 0 5
16361: PPUSH
16362: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16366: LD_EXP 38
16370: PPUSH
16371: LD_VAR 0 5
16375: PPUSH
16376: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16380: LD_VAR 0 3
16384: PUSH
16385: LD_INT 1
16387: ARRAY
16388: PPUSH
16389: LD_VAR 0 5
16393: PPUSH
16394: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16398: LD_INT 35
16400: PPUSH
16401: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16405: LD_EXP 38
16409: PPUSH
16410: CALL_OW 310
16414: PUSH
16415: LD_EXP 38
16419: PPUSH
16420: CALL_OW 302
16424: NOT
16425: OR
16426: PUSH
16427: LD_VAR 0 5
16431: PPUSH
16432: CALL_OW 302
16436: NOT
16437: OR
16438: IFFALSE 16398
// InGameOff ;
16440: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16444: LD_EXP 38
16448: PPUSH
16449: CALL_OW 302
16453: NOT
16454: IFFALSE 16458
// exit ;
16456: GO 16554
// if not IsOk ( depot ) then
16458: LD_VAR 0 5
16462: PPUSH
16463: CALL_OW 302
16467: NOT
16468: IFFALSE 16531
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16470: LD_EXP 38
16474: PPUSH
16475: LD_INT 30
16477: PPUSH
16478: LD_INT 1
16480: PPUSH
16481: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16485: LD_INT 35
16487: PPUSH
16488: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16492: LD_EXP 38
16496: PPUSH
16497: LD_INT 30
16499: PPUSH
16500: LD_INT 1
16502: PPUSH
16503: CALL_OW 307
16507: PUSH
16508: LD_EXP 38
16512: PPUSH
16513: CALL_OW 301
16517: OR
16518: IFFALSE 16485
// RemoveUnit ( Ibrahim ) ;
16520: LD_EXP 38
16524: PPUSH
16525: CALL_OW 64
// exit ;
16529: GO 16554
// end ; ibrahimInDepot := true ;
16531: LD_ADDR_EXP 25
16535: PUSH
16536: LD_INT 1
16538: ST_TO_ADDR
// allowConvoys := true ;
16539: LD_ADDR_EXP 12
16543: PUSH
16544: LD_INT 1
16546: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16547: LD_STRING IbrahimInDepot
16549: PPUSH
16550: CALL_OW 97
// end ;
16554: PPOPN 5
16556: END
// export function IbrahimQuery ; begin
16557: LD_INT 0
16559: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16560: LD_STRING IbrahimQuery
16562: PPUSH
16563: CALL_OW 97
16567: PUSH
16568: LD_INT 1
16570: DOUBLE
16571: EQUAL
16572: IFTRUE 16576
16574: GO 16938
16576: POP
// begin allowConvoys := false ;
16577: LD_ADDR_EXP 12
16581: PUSH
16582: LD_INT 0
16584: ST_TO_ADDR
// ibrahimInDepot := false ;
16585: LD_ADDR_EXP 25
16589: PUSH
16590: LD_INT 0
16592: ST_TO_ADDR
// InGameOn ;
16593: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16597: LD_EXP 28
16601: PPUSH
16602: CALL_OW 87
// wait ( 0 0$1 ) ;
16606: LD_INT 35
16608: PPUSH
16609: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16613: LD_EXP 28
16617: PPUSH
16618: LD_STRING DH-1-interrogation
16620: PPUSH
16621: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16625: LD_EXP 38
16629: PPUSH
16630: LD_STRING DI-1-interrogation
16632: PPUSH
16633: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16637: LD_EXP 28
16641: PPUSH
16642: LD_STRING DH-2-interrogation
16644: PPUSH
16645: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16649: LD_EXP 38
16653: PPUSH
16654: LD_STRING DI-2-interrogation
16656: PPUSH
16657: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16661: LD_EXP 28
16665: PPUSH
16666: LD_STRING DH-3-interrogation
16668: PPUSH
16669: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16673: LD_EXP 38
16677: PPUSH
16678: LD_STRING DI-3-interrogation
16680: PPUSH
16681: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16685: LD_EXP 28
16689: PPUSH
16690: LD_STRING DH-4-interrogation
16692: PPUSH
16693: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16697: LD_EXP 38
16701: PPUSH
16702: LD_STRING DI-4-interrogation
16704: PPUSH
16705: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16709: LD_EXP 28
16713: PPUSH
16714: LD_STRING DH-5-interrogation
16716: PPUSH
16717: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16721: LD_EXP 38
16725: PPUSH
16726: LD_STRING DI-5-interrogation
16728: PPUSH
16729: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16733: LD_INT 10
16735: PPUSH
16736: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16740: LD_EXP 28
16744: PPUSH
16745: LD_STRING DH-6-interrogation
16747: PPUSH
16748: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16752: LD_EXP 38
16756: PPUSH
16757: LD_STRING DI-6-interrogation
16759: PPUSH
16760: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
16764: LD_EXP 38
16768: PPUSH
16769: LD_STRING DI-7-interrogation
16771: PPUSH
16772: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
16776: LD_EXP 28
16780: PPUSH
16781: LD_STRING DH-7-interrogation
16783: PPUSH
16784: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16788: LD_INT 10
16790: PPUSH
16791: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
16795: LD_EXP 28
16799: PPUSH
16800: LD_STRING DH-8-interrogation
16802: PPUSH
16803: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
16807: LD_EXP 38
16811: PPUSH
16812: LD_STRING DI-8-interrogation
16814: PPUSH
16815: CALL_OW 88
// wait ( 0 0$1 ) ;
16819: LD_INT 35
16821: PPUSH
16822: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16826: LD_STRING IbrahimDecisionQuery
16828: PPUSH
16829: CALL_OW 97
16833: PUSH
16834: LD_INT 1
16836: DOUBLE
16837: EQUAL
16838: IFTRUE 16842
16840: GO 16866
16842: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16843: LD_EXP 38
16847: PPUSH
16848: LD_STRING DI-1-kill
16850: PPUSH
16851: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16855: LD_EXP 38
16859: PPUSH
16860: CALL_OW 66
// end ; 2 :
16864: GO 16932
16866: LD_INT 2
16868: DOUBLE
16869: EQUAL
16870: IFTRUE 16874
16872: GO 16931
16874: POP
// begin SetSide ( Ibrahim , 6 ) ;
16875: LD_EXP 38
16879: PPUSH
16880: LD_INT 6
16882: PPUSH
16883: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16887: LD_EXP 38
16891: PPUSH
16892: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16896: LD_EXP 38
16900: PPUSH
16901: LD_INT 66
16903: PPUSH
16904: LD_INT 2
16906: PPUSH
16907: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16911: LD_EXP 38
16915: PPUSH
16916: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16920: LD_EXP 28
16924: PPUSH
16925: CALL_OW 122
// end ; end ;
16929: GO 16932
16931: POP
// InGameOff ;
16932: CALL_OW 9
// end ; 2 :
16936: GO 16952
16938: LD_INT 2
16940: DOUBLE
16941: EQUAL
16942: IFTRUE 16946
16944: GO 16951
16946: POP
// exit ; end ;
16947: GO 17028
16949: GO 16952
16951: POP
// allowConvoys := true ;
16952: LD_ADDR_EXP 12
16956: PUSH
16957: LD_INT 1
16959: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16960: LD_INT 5250
16962: PPUSH
16963: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16967: LD_INT 35
16969: PPUSH
16970: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16974: LD_INT 81
16976: PUSH
16977: LD_INT 2
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 21
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PPUSH
16998: CALL_OW 69
17002: NOT
17003: IFFALSE 16967
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17005: LD_EXP 38
17009: PPUSH
17010: LD_INT 34
17012: PPUSH
17013: LD_INT 21
17015: PPUSH
17016: CALL_OW 111
// ibrahimIsFree := true ;
17020: LD_ADDR_EXP 26
17024: PUSH
17025: LD_INT 1
17027: ST_TO_ADDR
// end ;
17028: LD_VAR 0 1
17032: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17033: LD_EXP 26
17037: PUSH
17038: LD_EXP 38
17042: PPUSH
17043: CALL_OW 302
17047: AND
17048: PUSH
17049: LD_INT 2
17051: PPUSH
17052: LD_EXP 38
17056: PPUSH
17057: CALL_OW 292
17061: AND
17062: IFFALSE 17829
17064: GO 17066
17066: DISABLE
17067: LD_INT 0
17069: PPUSH
17070: PPUSH
17071: PPUSH
17072: PPUSH
17073: PPUSH
17074: PPUSH
// begin wait ( 0 0$10 ) ;
17075: LD_INT 350
17077: PPUSH
17078: CALL_OW 67
// allowConvoys := false ;
17082: LD_ADDR_EXP 12
17086: PUSH
17087: LD_INT 0
17089: ST_TO_ADDR
// depot := usDepot ;
17090: LD_ADDR_VAR 0 4
17094: PUSH
17095: LD_INT 11
17097: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17098: LD_INT 11
17100: NOT
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_INT 2
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 50
17114: PUSH
17115: EMPTY
17116: LIST
17117: PUSH
17118: LD_INT 30
17120: PUSH
17121: LD_INT 0
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: LIST
17132: PPUSH
17133: CALL_OW 69
17137: AND
17138: IFFALSE 17185
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17140: LD_ADDR_VAR 0 4
17144: PUSH
17145: LD_INT 22
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 50
17157: PUSH
17158: EMPTY
17159: LIST
17160: PUSH
17161: LD_INT 30
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: LIST
17175: PPUSH
17176: CALL_OW 69
17180: PUSH
17181: LD_INT 1
17183: ARRAY
17184: ST_TO_ADDR
// InGameOn ;
17185: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17189: LD_EXP 38
17193: PPUSH
17194: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
17198: LD_EXP 38
17202: PPUSH
17203: LD_STRING DI-1-free
17205: PPUSH
17206: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
17210: LD_EXP 28
17214: PPUSH
17215: LD_EXP 38
17219: PPUSH
17220: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
17224: LD_EXP 28
17228: PPUSH
17229: LD_STRING DH-1-free
17231: PPUSH
17232: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
17236: LD_EXP 38
17240: PPUSH
17241: LD_EXP 28
17245: PPUSH
17246: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
17250: LD_EXP 38
17254: PPUSH
17255: LD_STRING DI-2-free
17257: PPUSH
17258: CALL_OW 88
// changeClass := 0 ;
17262: LD_ADDR_VAR 0 1
17266: PUSH
17267: LD_INT 0
17269: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17270: LD_STRING IbrahimJoinQuery
17272: PPUSH
17273: CALL_OW 97
17277: PUSH
17278: LD_INT 1
17280: DOUBLE
17281: EQUAL
17282: IFTRUE 17286
17284: GO 17297
17286: POP
// begin changeClass := 1 ;
17287: LD_ADDR_VAR 0 1
17291: PUSH
17292: LD_INT 1
17294: ST_TO_ADDR
// end ; 2 :
17295: GO 17537
17297: LD_INT 2
17299: DOUBLE
17300: EQUAL
17301: IFTRUE 17305
17303: GO 17457
17305: POP
// begin Say ( Heike , DH-1-decline ) ;
17306: LD_EXP 28
17310: PPUSH
17311: LD_STRING DH-1-decline
17313: PPUSH
17314: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17318: LD_EXP 38
17322: PPUSH
17323: LD_STRING DI-1-decline
17325: PPUSH
17326: CALL_OW 88
// InGameOff ;
17330: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17334: LD_EXP 38
17338: PPUSH
17339: LD_INT 30
17341: PPUSH
17342: LD_INT 1
17344: PPUSH
17345: CALL_OW 111
// p := 0 ;
17349: LD_ADDR_VAR 0 3
17353: PUSH
17354: LD_INT 0
17356: ST_TO_ADDR
// repeat p := p + 1 ;
17357: LD_ADDR_VAR 0 3
17361: PUSH
17362: LD_VAR 0 3
17366: PUSH
17367: LD_INT 1
17369: PLUS
17370: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17371: LD_INT 35
17373: PPUSH
17374: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17378: LD_EXP 38
17382: PPUSH
17383: LD_INT 30
17385: PPUSH
17386: LD_INT 1
17388: PPUSH
17389: CALL_OW 307
17393: PUSH
17394: LD_INT 22
17396: PUSH
17397: LD_INT 2
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: LD_INT 101
17406: PUSH
17407: LD_INT 6
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PPUSH
17418: CALL_OW 69
17422: NOT
17423: OR
17424: PUSH
17425: LD_VAR 0 3
17429: PUSH
17430: LD_INT 10
17432: GREATER
17433: OR
17434: IFFALSE 17357
// RemoveUnit ( Ibrahim ) ;
17436: LD_EXP 38
17440: PPUSH
17441: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17445: LD_INT 1
17447: PPUSH
17448: LD_STRING 03_IbrahimHasEscaped
17450: PPUSH
17451: CALL_OW 39
// end ; 3 :
17455: GO 17537
17457: LD_INT 3
17459: DOUBLE
17460: EQUAL
17461: IFTRUE 17465
17463: GO 17536
17465: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17466: LD_EXP 28
17470: PPUSH
17471: LD_STRING DH-1-radio-hq
17473: PPUSH
17474: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17478: LD_EXP 37
17482: PPUSH
17483: LD_STRING DO-1-radio-hq
17485: PPUSH
17486: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17490: LD_EXP 28
17494: PPUSH
17495: LD_STRING DH-2-radio-hq
17497: PPUSH
17498: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17502: LD_EXP 37
17506: PPUSH
17507: LD_STRING DO-2-radio-hq
17509: PPUSH
17510: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17514: LD_EXP 28
17518: PPUSH
17519: LD_STRING DH-3-radio-hq
17521: PPUSH
17522: CALL_OW 88
// changeClass := 1 ;
17526: LD_ADDR_VAR 0 1
17530: PUSH
17531: LD_INT 1
17533: ST_TO_ADDR
// end ; end ;
17534: GO 17537
17536: POP
// if changeClass then
17537: LD_VAR 0 1
17541: IFFALSE 17829
// begin Say ( Heike , DH-1-agree ) ;
17543: LD_EXP 28
17547: PPUSH
17548: LD_STRING DH-1-agree
17550: PPUSH
17551: CALL_OW 88
// if IsOk ( Givi ) then
17555: LD_EXP 29
17559: PPUSH
17560: CALL_OW 302
17564: IFFALSE 17602
// begin Say ( Givi , DG-1-agree ) ;
17566: LD_EXP 29
17570: PPUSH
17571: LD_STRING DG-1-agree
17573: PPUSH
17574: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17578: LD_EXP 28
17582: PPUSH
17583: LD_STRING DH-2-agree
17585: PPUSH
17586: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17590: LD_EXP 29
17594: PPUSH
17595: LD_STRING DG-2-agree
17597: PPUSH
17598: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17602: LD_VAR 0 4
17606: PPUSH
17607: CALL_OW 313
17611: PUSH
17612: LD_INT 6
17614: EQUAL
17615: IFFALSE 17635
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17617: LD_VAR 0 4
17621: PPUSH
17622: CALL_OW 313
17626: PUSH
17627: LD_INT 1
17629: ARRAY
17630: PPUSH
17631: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17635: LD_EXP 38
17639: PPUSH
17640: LD_INT 2
17642: PPUSH
17643: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17647: LD_ADDR_VAR 0 5
17651: PUSH
17652: LD_EXP 38
17656: PPUSH
17657: CALL_OW 250
17661: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17662: LD_ADDR_VAR 0 6
17666: PUSH
17667: LD_EXP 38
17671: PPUSH
17672: CALL_OW 251
17676: ST_TO_ADDR
// if depot then
17677: LD_VAR 0 4
17681: IFFALSE 17730
// begin ComEnterUnit ( Ibrahim , depot ) ;
17683: LD_EXP 38
17687: PPUSH
17688: LD_VAR 0 4
17692: PPUSH
17693: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17697: LD_INT 35
17699: PPUSH
17700: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17704: LD_EXP 38
17708: PPUSH
17709: CALL_OW 310
17713: IFFALSE 17697
// b := IsInUnit ( Ibrahim ) ;
17715: LD_ADDR_VAR 0 2
17719: PUSH
17720: LD_EXP 38
17724: PPUSH
17725: CALL_OW 310
17729: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17730: LD_EXP 38
17734: PPUSH
17735: CALL_OW 64
// uc_side := 2 ;
17739: LD_ADDR_OWVAR 20
17743: PUSH
17744: LD_INT 2
17746: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17747: LD_ADDR_EXP 38
17751: PUSH
17752: LD_STRING Ibrahim
17754: PPUSH
17755: LD_INT 0
17757: PPUSH
17758: LD_STRING 
17760: PPUSH
17761: CALL 39636 0 3
17765: ST_TO_ADDR
// if depot then
17766: LD_VAR 0 4
17770: IFFALSE 17788
// PlaceHumanInUnit ( Ibrahim , b ) else
17772: LD_EXP 38
17776: PPUSH
17777: LD_VAR 0 2
17781: PPUSH
17782: CALL_OW 52
17786: GO 17810
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17788: LD_EXP 38
17792: PPUSH
17793: LD_VAR 0 5
17797: PPUSH
17798: LD_VAR 0 6
17802: PPUSH
17803: LD_INT 0
17805: PPUSH
17806: CALL_OW 48
// InGameOff ;
17810: CALL_OW 9
// allowConvoys := true ;
17814: LD_ADDR_EXP 12
17818: PUSH
17819: LD_INT 1
17821: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17822: LD_STRING ACH_IBRAHIM
17824: PPUSH
17825: CALL_OW 543
// end ; end ;
17829: PPOPN 6
17831: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17832: LD_EXP 33
17836: PPUSH
17837: CALL_OW 256
17841: PUSH
17842: LD_INT 3
17844: LESS
17845: IFFALSE 17912
17847: GO 17849
17849: DISABLE
// begin DialogueOn ;
17850: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17854: LD_EXP 33
17858: PPUSH
17859: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17863: LD_EXP 33
17867: PPUSH
17868: LD_STRING DK-keydeath-1
17870: PPUSH
17871: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17875: LD_EXP 28
17879: PPUSH
17880: LD_STRING DH-keydeath-2
17882: PPUSH
17883: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17887: LD_EXP 28
17891: PPUSH
17892: LD_STRING DH-keydeath-3
17894: PPUSH
17895: CALL_OW 88
// DialogueOff ;
17899: CALL_OW 7
// KillUnit ( Kaia ) ;
17903: LD_EXP 33
17907: PPUSH
17908: CALL_OW 66
// end ;
17912: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17913: LD_EXP 11
17917: PUSH
17918: LD_EXP 21
17922: PUSH
17923: LD_INT 1
17925: LESS
17926: AND
17927: IFFALSE 18467
17929: GO 17931
17931: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17932: LD_INT 22
17934: PUSH
17935: LD_INT 1
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: LD_INT 25
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 25
17957: PUSH
17958: LD_INT 3
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PPUSH
17974: CALL_OW 69
17978: IFFALSE 18056
// begin ChangeSideFog ( 1 , 2 ) ;
17980: LD_INT 1
17982: PPUSH
17983: LD_INT 2
17985: PPUSH
17986: CALL_OW 343
// Query ( DestroyEnemy ) ;
17990: LD_STRING DestroyEnemy
17992: PPUSH
17993: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17997: LD_INT 35
17999: PPUSH
18000: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18004: LD_INT 22
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 2
18016: PUSH
18017: LD_INT 25
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 25
18029: PUSH
18030: LD_INT 3
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: LIST
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PPUSH
18046: CALL_OW 69
18050: PUSH
18051: LD_INT 0
18053: EQUAL
18054: IFFALSE 17997
// end ; DialogueOn ;
18056: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18060: LD_EXP 28
18064: PPUSH
18065: LD_STRING DH-1-final
18067: PPUSH
18068: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18072: LD_OWVAR 1
18076: PUSH
18077: LD_INT 138600
18079: PUSH
18080: LD_INT 134400
18082: PUSH
18083: LD_INT 130200
18085: PUSH
18086: LD_INT 126000
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: PUSH
18095: LD_OWVAR 67
18099: ARRAY
18100: LESSEQUAL
18101: IFFALSE 18115
// AddMedal ( med1 , 1 ) else
18103: LD_STRING med1
18105: PPUSH
18106: LD_INT 1
18108: PPUSH
18109: CALL_OW 101
18113: GO 18126
// AddMedal ( med1 , - 1 ) ;
18115: LD_STRING med1
18117: PPUSH
18118: LD_INT 1
18120: NEG
18121: PPUSH
18122: CALL_OW 101
// if vehCounter >= 2 then
18126: LD_EXP 22
18130: PUSH
18131: LD_INT 2
18133: GREATEREQUAL
18134: IFFALSE 18148
// AddMedal ( med2 , 1 ) else
18136: LD_STRING med2
18138: PPUSH
18139: LD_INT 1
18141: PPUSH
18142: CALL_OW 101
18146: GO 18159
// AddMedal ( med2 , - 1 ) ;
18148: LD_STRING med2
18150: PPUSH
18151: LD_INT 1
18153: NEG
18154: PPUSH
18155: CALL_OW 101
// if deadCounter = 0 then
18159: LD_EXP 9
18163: PUSH
18164: LD_INT 0
18166: EQUAL
18167: IFFALSE 18181
// AddMedal ( med3 , 1 ) else
18169: LD_STRING med3
18171: PPUSH
18172: LD_INT 1
18174: PPUSH
18175: CALL_OW 101
18179: GO 18192
// AddMedal ( med3 , - 1 ) ;
18181: LD_STRING med3
18183: PPUSH
18184: LD_INT 1
18186: NEG
18187: PPUSH
18188: CALL_OW 101
// GiveMedals ( MAIN ) ;
18192: LD_STRING MAIN
18194: PPUSH
18195: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18199: LD_INT 22
18201: PUSH
18202: LD_INT 2
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 23
18211: PUSH
18212: LD_INT 2
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 21
18221: PUSH
18222: LD_INT 1
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: LIST
18233: PPUSH
18234: CALL_OW 69
18238: PPUSH
18239: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18243: LD_EXP 28
18247: PPUSH
18248: LD_STRING 03_Heike
18250: PPUSH
18251: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18255: LD_EXP 32
18259: PPUSH
18260: LD_STRING 03_Aviradze
18262: PPUSH
18263: CALL_OW 38
// if Givi then
18267: LD_EXP 29
18271: IFFALSE 18285
// SaveCharacters ( Givi , 03_Givi ) ;
18273: LD_EXP 29
18277: PPUSH
18278: LD_STRING 03_Givi
18280: PPUSH
18281: CALL_OW 38
// if Mike then
18285: LD_EXP 30
18289: IFFALSE 18303
// SaveCharacters ( Mike , 03_Mike ) ;
18291: LD_EXP 30
18295: PPUSH
18296: LD_STRING 03_Mike
18298: PPUSH
18299: CALL_OW 38
// if Kamil then
18303: LD_EXP 31
18307: IFFALSE 18321
// SaveCharacters ( Kamil , 03_Kamil ) ;
18309: LD_EXP 31
18313: PPUSH
18314: LD_STRING 03_Kamil
18316: PPUSH
18317: CALL_OW 38
// if Kaia then
18321: LD_EXP 33
18325: IFFALSE 18339
// SaveCharacters ( Kaia , 03_Kaia ) ;
18327: LD_EXP 33
18331: PPUSH
18332: LD_STRING 03_Kaia
18334: PPUSH
18335: CALL_OW 38
// if Sophia then
18339: LD_EXP 34
18343: IFFALSE 18357
// SaveCharacters ( Sophia , 03_Sophia ) ;
18345: LD_EXP 34
18349: PPUSH
18350: LD_STRING 03_Sophia
18352: PPUSH
18353: CALL_OW 38
// if Markov then
18357: LD_EXP 35
18361: IFFALSE 18375
// SaveCharacters ( Markov , 03_Markov ) ;
18363: LD_EXP 35
18367: PPUSH
18368: LD_STRING 03_Markov
18370: PPUSH
18371: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18375: LD_EXP 38
18379: PUSH
18380: LD_EXP 38
18384: PPUSH
18385: CALL_OW 255
18389: PUSH
18390: LD_INT 2
18392: EQUAL
18393: AND
18394: IFFALSE 18415
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18396: LD_STRING enableBioCharacter(BIO_IBRA)
18398: PPUSH
18399: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18403: LD_EXP 38
18407: PPUSH
18408: LD_STRING 03_Ibrahim
18410: PPUSH
18411: CALL_OW 38
// end ; if heikeSecondSquad then
18415: LD_EXP 42
18419: IFFALSE 18433
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18421: LD_EXP 42
18425: PPUSH
18426: LD_STRING 03_others
18428: PPUSH
18429: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18433: LD_EXP 9
18437: PPUSH
18438: LD_STRING 03_DeadCounter
18440: PPUSH
18441: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18445: LD_STRING enableBioCharacter(BIO_OMAR)
18447: PPUSH
18448: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18452: LD_STRING enableBioCharacter(BIO_FARM)
18454: PPUSH
18455: CALL_OW 559
// YouWin ;
18459: CALL_OW 103
// DialogueOff ;
18463: CALL_OW 7
// end ; end_of_file
18467: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18468: LD_VAR 0 1
18472: PPUSH
18473: CALL 35347 0 1
// if un = Heike then
18477: LD_VAR 0 1
18481: PUSH
18482: LD_EXP 28
18486: EQUAL
18487: IFFALSE 18496
// YouLost ( Heike ) ;
18489: LD_STRING Heike
18491: PPUSH
18492: CALL_OW 104
// if un = Aviradze then
18496: LD_VAR 0 1
18500: PUSH
18501: LD_EXP 32
18505: EQUAL
18506: IFFALSE 18515
// YouLost ( Aviradze ) ;
18508: LD_STRING Aviradze
18510: PPUSH
18511: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18515: LD_VAR 0 1
18519: PUSH
18520: LD_INT 11
18522: EQUAL
18523: PUSH
18524: LD_EXP 11
18528: NOT
18529: AND
18530: IFFALSE 18539
// YouLost ( Depot ) ;
18532: LD_STRING Depot
18534: PPUSH
18535: CALL_OW 104
// if un = arDepot then
18539: LD_VAR 0 1
18543: PUSH
18544: LD_INT 5
18546: EQUAL
18547: IFFALSE 18556
// YouLost ( FarmerDepot ) ;
18549: LD_STRING FarmerDepot
18551: PPUSH
18552: CALL_OW 104
// if un = Farmer then
18556: LD_VAR 0 1
18560: PUSH
18561: LD_EXP 36
18565: EQUAL
18566: IFFALSE 18575
// YouLost ( Farmer ) ;
18568: LD_STRING Farmer
18570: PPUSH
18571: CALL_OW 104
// if un in usForces then
18575: LD_VAR 0 1
18579: PUSH
18580: LD_EXP 44
18584: IN
18585: IFFALSE 18603
// usForces := usForces diff un ;
18587: LD_ADDR_EXP 44
18591: PUSH
18592: LD_EXP 44
18596: PUSH
18597: LD_VAR 0 1
18601: DIFF
18602: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18603: LD_VAR 0 1
18607: PUSH
18608: LD_INT 22
18610: PUSH
18611: LD_INT 2
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 23
18620: PUSH
18621: LD_INT 2
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 21
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: IN
18648: IFFALSE 18664
// deadCounter := deadCounter + 1 ;
18650: LD_ADDR_EXP 9
18654: PUSH
18655: LD_EXP 9
18659: PUSH
18660: LD_INT 1
18662: PLUS
18663: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18664: LD_VAR 0 1
18668: PUSH
18669: LD_INT 22
18671: PUSH
18672: LD_INT 4
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 34
18681: PUSH
18682: LD_INT 12
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PPUSH
18693: CALL_OW 69
18697: IN
18698: PUSH
18699: LD_EXP 18
18703: NOT
18704: AND
18705: IFFALSE 18715
// firstConvoyDestroyed := true ;
18707: LD_ADDR_EXP 18
18711: PUSH
18712: LD_INT 1
18714: ST_TO_ADDR
// if un in usAttackers then
18715: LD_VAR 0 1
18719: PUSH
18720: LD_EXP 47
18724: IN
18725: IFFALSE 18743
// usAttackers := usAttackers diff un ;
18727: LD_ADDR_EXP 47
18731: PUSH
18732: LD_EXP 47
18736: PUSH
18737: LD_VAR 0 1
18741: DIFF
18742: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18743: LD_VAR 0 1
18747: PUSH
18748: LD_INT 22
18750: PUSH
18751: LD_INT 5
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 21
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PPUSH
18772: CALL_OW 69
18776: IN
18777: IFFALSE 18793
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18779: LD_ADDR_EXP 20
18783: PUSH
18784: LD_EXP 20
18788: PUSH
18789: LD_INT 1
18791: PLUS
18792: ST_TO_ADDR
// end ;
18793: PPOPN 1
18795: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18796: LD_VAR 0 2
18800: PUSH
18801: LD_EXP 38
18805: EQUAL
18806: PUSH
18807: LD_EXP 25
18811: AND
18812: IFFALSE 18997
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18814: LD_INT 22
18816: PUSH
18817: LD_INT 2
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 30
18826: PUSH
18827: LD_INT 0
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 50
18836: PUSH
18837: EMPTY
18838: LIST
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: LIST
18844: PPUSH
18845: CALL_OW 69
18849: IFFALSE 18903
// begin InGameOn ;
18851: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18855: LD_EXP 38
18859: PPUSH
18860: LD_INT 11
18862: PPUSH
18863: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18867: LD_INT 35
18869: PPUSH
18870: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18874: LD_EXP 38
18878: PPUSH
18879: LD_INT 11
18881: PPUSH
18882: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18886: LD_EXP 38
18890: PPUSH
18891: CALL_OW 310
18895: IFFALSE 18867
// InGameOff ;
18897: CALL_OW 9
// end else
18901: GO 18997
// begin SetSide ( Ibrahim , 6 ) ;
18903: LD_EXP 38
18907: PPUSH
18908: LD_INT 6
18910: PPUSH
18911: CALL_OW 235
// ibrahimInDepot := false ;
18915: LD_ADDR_EXP 25
18919: PUSH
18920: LD_INT 0
18922: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18923: LD_EXP 38
18927: PPUSH
18928: LD_INT 30
18930: PPUSH
18931: LD_INT 1
18933: PPUSH
18934: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18938: LD_INT 35
18940: PPUSH
18941: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18945: LD_EXP 38
18949: PPUSH
18950: LD_INT 30
18952: PPUSH
18953: LD_INT 1
18955: PPUSH
18956: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18960: LD_EXP 38
18964: PPUSH
18965: LD_INT 30
18967: PPUSH
18968: LD_INT 1
18970: PPUSH
18971: CALL_OW 307
18975: PUSH
18976: LD_EXP 38
18980: PPUSH
18981: CALL_OW 301
18985: OR
18986: IFFALSE 18938
// RemoveUnit ( Ibrahim ) ;
18988: LD_EXP 38
18992: PPUSH
18993: CALL_OW 64
// end ; end ; end ;
18997: PPOPN 2
18999: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19000: LD_VAR 0 2
19004: PUSH
19005: LD_EXP 28
19009: EQUAL
19010: PUSH
19011: LD_VAR 0 1
19015: PUSH
19016: LD_INT 11
19018: EQUAL
19019: AND
19020: PUSH
19021: LD_EXP 25
19025: AND
19026: IFFALSE 19032
// IbrahimQuery ;
19028: CALL 16557 0 0
// end ;
19032: PPOPN 2
19034: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19035: LD_VAR 0 1
19039: PPUSH
19040: CALL_OW 141
// if oldId in usAttackers then
19044: LD_VAR 0 2
19048: PUSH
19049: LD_EXP 47
19053: IN
19054: IFFALSE 19072
// usAttackers := usAttackers diff oldId ;
19056: LD_ADDR_EXP 47
19060: PUSH
19061: LD_EXP 47
19065: PUSH
19066: LD_VAR 0 2
19070: DIFF
19071: ST_TO_ADDR
// if newId in usAttackers then
19072: LD_VAR 0 1
19076: PUSH
19077: LD_EXP 47
19081: IN
19082: IFFALSE 19100
// usAttackers := usAttackers diff newId ;
19084: LD_ADDR_EXP 47
19088: PUSH
19089: LD_EXP 47
19093: PUSH
19094: LD_VAR 0 1
19098: DIFF
19099: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19100: LD_VAR 0 3
19104: PUSH
19105: LD_INT 4
19107: EQUAL
19108: PUSH
19109: LD_EXP 18
19113: NOT
19114: AND
19115: IFFALSE 19125
// firstConvoyDestroyed := true ;
19117: LD_ADDR_EXP 18
19121: PUSH
19122: LD_INT 1
19124: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19125: LD_VAR 0 1
19129: PPUSH
19130: CALL_OW 264
19134: PUSH
19135: LD_INT 12
19137: EQUAL
19138: IFFALSE 19176
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19140: LD_ADDR_EXP 13
19144: PUSH
19145: LD_EXP 13
19149: PUSH
19150: LD_INT 1
19152: PLUS
19153: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19154: LD_VAR 0 1
19158: PPUSH
19159: LD_INT 1
19161: PPUSH
19162: CALL_OW 289
19166: PUSH
19167: LD_INT 0
19169: EQUAL
19170: IFFALSE 19176
// EmptyCargoDialog ;
19172: CALL 15191 0 0
// end ; end ;
19176: PPOPN 4
19178: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19179: LD_VAR 0 1
19183: PUSH
19184: LD_INT 2
19186: EQUAL
19187: PUSH
19188: LD_VAR 0 2
19192: PUSH
19193: LD_INT 5
19195: EQUAL
19196: AND
19197: IFFALSE 19206
// YouLost ( Attack ) ;
19199: LD_STRING Attack
19201: PPUSH
19202: CALL_OW 104
// end ;
19206: PPOPN 2
19208: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19209: LD_VAR 0 1
19213: PPUSH
19214: CALL_OW 255
19218: PUSH
19219: LD_INT 1
19221: EQUAL
19222: PUSH
19223: LD_EXP 6
19227: NOT
19228: AND
19229: IFFALSE 19363
// begin if GetBType ( b ) = b_lab then
19231: LD_VAR 0 1
19235: PPUSH
19236: CALL_OW 266
19240: PUSH
19241: LD_INT 6
19243: EQUAL
19244: IFFALSE 19284
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19246: LD_EXP 44
19250: PPUSH
19251: LD_INT 25
19253: PUSH
19254: LD_INT 4
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PPUSH
19261: CALL_OW 72
19265: PPUSH
19266: LD_VAR 0 1
19270: PPUSH
19271: CALL_OW 120
// AmLabResearch ( b ) ;
19275: LD_VAR 0 1
19279: PPUSH
19280: CALL 5194 0 1
// end ; if GetBType ( b ) = b_armoury then
19284: LD_VAR 0 1
19288: PPUSH
19289: CALL_OW 266
19293: PUSH
19294: LD_INT 4
19296: EQUAL
19297: IFFALSE 19345
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19299: LD_EXP 44
19303: PPUSH
19304: LD_INT 25
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 3
19316: PUSH
19317: LD_INT 54
19319: PUSH
19320: EMPTY
19321: LIST
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PPUSH
19331: CALL_OW 72
19335: PPUSH
19336: LD_VAR 0 1
19340: PPUSH
19341: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19345: LD_ADDR_EXP 46
19349: PUSH
19350: LD_EXP 46
19354: PPUSH
19355: LD_INT 1
19357: PPUSH
19358: CALL_OW 3
19362: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19363: LD_VAR 0 1
19367: PPUSH
19368: CALL_OW 255
19372: PUSH
19373: LD_INT 5
19375: EQUAL
19376: IFFALSE 19390
// SetBLevel ( b , 5 ) ;
19378: LD_VAR 0 1
19382: PPUSH
19383: LD_INT 5
19385: PPUSH
19386: CALL_OW 241
// end ;
19390: PPOPN 1
19392: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19393: LD_VAR 0 1
19397: PPUSH
19398: CALL_OW 255
19402: PUSH
19403: LD_INT 2
19405: EQUAL
19406: IFFALSE 19422
// vehCounter := vehCounter + 1 ;
19408: LD_ADDR_EXP 22
19412: PUSH
19413: LD_EXP 22
19417: PUSH
19418: LD_INT 1
19420: PLUS
19421: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19422: LD_VAR 0 1
19426: PPUSH
19427: LD_VAR 0 2
19431: PPUSH
19432: CALL 35467 0 2
// end ;
19436: PPOPN 2
19438: END
// on SailEvent ( event ) do begin if event = eventAttack then
19439: LD_VAR 0 1
19443: PUSH
19444: LD_EXP 24
19448: EQUAL
19449: IFFALSE 19455
// AmericanAttack ;
19451: CALL 6811 0 0
// end ; end_of_file
19455: PPOPN 1
19457: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19458: LD_OWVAR 1
19462: PUSH
19463: LD_INT 10500
19465: PUSH
19466: LD_INT 9800
19468: PUSH
19469: LD_INT 9450
19471: PUSH
19472: LD_INT 9100
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: PUSH
19481: LD_OWVAR 67
19485: ARRAY
19486: LESSEQUAL
19487: IFFALSE 19514
19489: GO 19491
19491: DISABLE
// begin enable ;
19492: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19493: LD_INT 1
19495: PPUSH
19496: LD_INT 5
19498: PPUSH
19499: CALL_OW 12
19503: PPUSH
19504: LD_INT 9
19506: PPUSH
19507: LD_INT 1
19509: PPUSH
19510: CALL_OW 55
// end ;
19514: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19515: LD_EXP 6
19519: PUSH
19520: LD_OWVAR 1
19524: PUSH
19525: LD_INT 94500
19527: LESSEQUAL
19528: AND
19529: IFFALSE 19556
19531: GO 19533
19533: DISABLE
// begin enable ;
19534: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19535: LD_INT 3
19537: PPUSH
19538: LD_INT 5
19540: PPUSH
19541: CALL_OW 12
19545: PPUSH
19546: LD_INT 9
19548: PPUSH
19549: LD_INT 1
19551: PPUSH
19552: CALL_OW 55
// end ; end_of_file
19556: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19557: LD_EXP 11
19561: NOT
19562: PUSH
19563: LD_EXP 16
19567: AND
19568: PUSH
19569: LD_EXP 4
19573: AND
19574: PUSH
19575: LD_EXP 15
19579: PUSH
19580: LD_EXP 16
19584: LESSEQUAL
19585: AND
19586: IFFALSE 19697
19588: GO 19590
19590: DISABLE
// begin enable ;
19591: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19592: LD_ADDR_OWVAR 47
19596: PUSH
19597: LD_STRING #X103-1
19599: PUSH
19600: LD_EXP 16
19604: PUSH
19605: LD_EXP 15
19609: MINUS
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19615: LD_ADDR_EXP 15
19619: PUSH
19620: LD_INT 5
19622: PPUSH
19623: CALL_OW 274
19627: PPUSH
19628: LD_INT 1
19630: PPUSH
19631: CALL_OW 275
19635: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19636: LD_INT 10
19638: PPUSH
19639: LD_INT 1
19641: PPUSH
19642: CALL_OW 287
19646: PUSH
19647: LD_INT 0
19649: EQUAL
19650: IFFALSE 19668
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19652: LD_ADDR_EXP 17
19656: PUSH
19657: LD_EXP 17
19661: PUSH
19662: LD_INT 35
19664: MINUS
19665: ST_TO_ADDR
19666: GO 19697
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
19668: LD_ADDR_EXP 17
19672: PUSH
19673: LD_INT 42000
19675: PUSH
19676: LD_INT 31500
19678: PUSH
19679: LD_INT 25200
19681: PUSH
19682: LD_INT 21000
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: PUSH
19691: LD_OWVAR 67
19695: ARRAY
19696: ST_TO_ADDR
// end ; end_of_file
19697: END
// every 0 0$1 do
19698: GO 19700
19700: DISABLE
// begin enable ;
19701: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19702: LD_STRING updateTimer(
19704: PUSH
19705: LD_OWVAR 1
19709: STR
19710: PUSH
19711: LD_STRING );
19713: STR
19714: PPUSH
19715: CALL_OW 559
// end ;
19719: END
// export function SOS_MapStart ( ) ; begin
19720: LD_INT 0
19722: PPUSH
// if streamModeActive then
19723: LD_EXP 48
19727: IFFALSE 19736
// DefineStreamItems ( true ) ;
19729: LD_INT 1
19731: PPUSH
19732: CALL 21390 0 1
// UpdateFactoryWaypoints ( ) ;
19736: CALL 34251 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19740: CALL 34508 0 0
// end ;
19744: LD_VAR 0 1
19748: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19749: LD_INT 0
19751: PPUSH
// if p2 = 100 then
19752: LD_VAR 0 2
19756: PUSH
19757: LD_INT 100
19759: EQUAL
19760: IFFALSE 20763
// begin if not StreamModeActive then
19762: LD_EXP 48
19766: NOT
19767: IFFALSE 19777
// StreamModeActive := true ;
19769: LD_ADDR_EXP 48
19773: PUSH
19774: LD_INT 1
19776: ST_TO_ADDR
// if p3 = 0 then
19777: LD_VAR 0 3
19781: PUSH
19782: LD_INT 0
19784: EQUAL
19785: IFFALSE 19791
// InitStreamMode ;
19787: CALL 20926 0 0
// if p3 = 1 then
19791: LD_VAR 0 3
19795: PUSH
19796: LD_INT 1
19798: EQUAL
19799: IFFALSE 19809
// sRocket := true ;
19801: LD_ADDR_EXP 53
19805: PUSH
19806: LD_INT 1
19808: ST_TO_ADDR
// if p3 = 2 then
19809: LD_VAR 0 3
19813: PUSH
19814: LD_INT 2
19816: EQUAL
19817: IFFALSE 19827
// sSpeed := true ;
19819: LD_ADDR_EXP 52
19823: PUSH
19824: LD_INT 1
19826: ST_TO_ADDR
// if p3 = 3 then
19827: LD_VAR 0 3
19831: PUSH
19832: LD_INT 3
19834: EQUAL
19835: IFFALSE 19845
// sEngine := true ;
19837: LD_ADDR_EXP 54
19841: PUSH
19842: LD_INT 1
19844: ST_TO_ADDR
// if p3 = 4 then
19845: LD_VAR 0 3
19849: PUSH
19850: LD_INT 4
19852: EQUAL
19853: IFFALSE 19863
// sSpec := true ;
19855: LD_ADDR_EXP 51
19859: PUSH
19860: LD_INT 1
19862: ST_TO_ADDR
// if p3 = 5 then
19863: LD_VAR 0 3
19867: PUSH
19868: LD_INT 5
19870: EQUAL
19871: IFFALSE 19881
// sLevel := true ;
19873: LD_ADDR_EXP 55
19877: PUSH
19878: LD_INT 1
19880: ST_TO_ADDR
// if p3 = 6 then
19881: LD_VAR 0 3
19885: PUSH
19886: LD_INT 6
19888: EQUAL
19889: IFFALSE 19899
// sArmoury := true ;
19891: LD_ADDR_EXP 56
19895: PUSH
19896: LD_INT 1
19898: ST_TO_ADDR
// if p3 = 7 then
19899: LD_VAR 0 3
19903: PUSH
19904: LD_INT 7
19906: EQUAL
19907: IFFALSE 19917
// sRadar := true ;
19909: LD_ADDR_EXP 57
19913: PUSH
19914: LD_INT 1
19916: ST_TO_ADDR
// if p3 = 8 then
19917: LD_VAR 0 3
19921: PUSH
19922: LD_INT 8
19924: EQUAL
19925: IFFALSE 19935
// sBunker := true ;
19927: LD_ADDR_EXP 58
19931: PUSH
19932: LD_INT 1
19934: ST_TO_ADDR
// if p3 = 9 then
19935: LD_VAR 0 3
19939: PUSH
19940: LD_INT 9
19942: EQUAL
19943: IFFALSE 19953
// sHack := true ;
19945: LD_ADDR_EXP 59
19949: PUSH
19950: LD_INT 1
19952: ST_TO_ADDR
// if p3 = 10 then
19953: LD_VAR 0 3
19957: PUSH
19958: LD_INT 10
19960: EQUAL
19961: IFFALSE 19971
// sFire := true ;
19963: LD_ADDR_EXP 60
19967: PUSH
19968: LD_INT 1
19970: ST_TO_ADDR
// if p3 = 11 then
19971: LD_VAR 0 3
19975: PUSH
19976: LD_INT 11
19978: EQUAL
19979: IFFALSE 19989
// sRefresh := true ;
19981: LD_ADDR_EXP 61
19985: PUSH
19986: LD_INT 1
19988: ST_TO_ADDR
// if p3 = 12 then
19989: LD_VAR 0 3
19993: PUSH
19994: LD_INT 12
19996: EQUAL
19997: IFFALSE 20007
// sExp := true ;
19999: LD_ADDR_EXP 62
20003: PUSH
20004: LD_INT 1
20006: ST_TO_ADDR
// if p3 = 13 then
20007: LD_VAR 0 3
20011: PUSH
20012: LD_INT 13
20014: EQUAL
20015: IFFALSE 20025
// sDepot := true ;
20017: LD_ADDR_EXP 63
20021: PUSH
20022: LD_INT 1
20024: ST_TO_ADDR
// if p3 = 14 then
20025: LD_VAR 0 3
20029: PUSH
20030: LD_INT 14
20032: EQUAL
20033: IFFALSE 20043
// sFlag := true ;
20035: LD_ADDR_EXP 64
20039: PUSH
20040: LD_INT 1
20042: ST_TO_ADDR
// if p3 = 15 then
20043: LD_VAR 0 3
20047: PUSH
20048: LD_INT 15
20050: EQUAL
20051: IFFALSE 20061
// sKamikadze := true ;
20053: LD_ADDR_EXP 72
20057: PUSH
20058: LD_INT 1
20060: ST_TO_ADDR
// if p3 = 16 then
20061: LD_VAR 0 3
20065: PUSH
20066: LD_INT 16
20068: EQUAL
20069: IFFALSE 20079
// sTroll := true ;
20071: LD_ADDR_EXP 73
20075: PUSH
20076: LD_INT 1
20078: ST_TO_ADDR
// if p3 = 17 then
20079: LD_VAR 0 3
20083: PUSH
20084: LD_INT 17
20086: EQUAL
20087: IFFALSE 20097
// sSlow := true ;
20089: LD_ADDR_EXP 74
20093: PUSH
20094: LD_INT 1
20096: ST_TO_ADDR
// if p3 = 18 then
20097: LD_VAR 0 3
20101: PUSH
20102: LD_INT 18
20104: EQUAL
20105: IFFALSE 20115
// sLack := true ;
20107: LD_ADDR_EXP 75
20111: PUSH
20112: LD_INT 1
20114: ST_TO_ADDR
// if p3 = 19 then
20115: LD_VAR 0 3
20119: PUSH
20120: LD_INT 19
20122: EQUAL
20123: IFFALSE 20133
// sTank := true ;
20125: LD_ADDR_EXP 77
20129: PUSH
20130: LD_INT 1
20132: ST_TO_ADDR
// if p3 = 20 then
20133: LD_VAR 0 3
20137: PUSH
20138: LD_INT 20
20140: EQUAL
20141: IFFALSE 20151
// sRemote := true ;
20143: LD_ADDR_EXP 78
20147: PUSH
20148: LD_INT 1
20150: ST_TO_ADDR
// if p3 = 21 then
20151: LD_VAR 0 3
20155: PUSH
20156: LD_INT 21
20158: EQUAL
20159: IFFALSE 20169
// sPowell := true ;
20161: LD_ADDR_EXP 79
20165: PUSH
20166: LD_INT 1
20168: ST_TO_ADDR
// if p3 = 22 then
20169: LD_VAR 0 3
20173: PUSH
20174: LD_INT 22
20176: EQUAL
20177: IFFALSE 20187
// sTeleport := true ;
20179: LD_ADDR_EXP 82
20183: PUSH
20184: LD_INT 1
20186: ST_TO_ADDR
// if p3 = 23 then
20187: LD_VAR 0 3
20191: PUSH
20192: LD_INT 23
20194: EQUAL
20195: IFFALSE 20205
// sOilTower := true ;
20197: LD_ADDR_EXP 84
20201: PUSH
20202: LD_INT 1
20204: ST_TO_ADDR
// if p3 = 24 then
20205: LD_VAR 0 3
20209: PUSH
20210: LD_INT 24
20212: EQUAL
20213: IFFALSE 20223
// sShovel := true ;
20215: LD_ADDR_EXP 85
20219: PUSH
20220: LD_INT 1
20222: ST_TO_ADDR
// if p3 = 25 then
20223: LD_VAR 0 3
20227: PUSH
20228: LD_INT 25
20230: EQUAL
20231: IFFALSE 20241
// sSheik := true ;
20233: LD_ADDR_EXP 86
20237: PUSH
20238: LD_INT 1
20240: ST_TO_ADDR
// if p3 = 26 then
20241: LD_VAR 0 3
20245: PUSH
20246: LD_INT 26
20248: EQUAL
20249: IFFALSE 20259
// sEarthquake := true ;
20251: LD_ADDR_EXP 88
20255: PUSH
20256: LD_INT 1
20258: ST_TO_ADDR
// if p3 = 27 then
20259: LD_VAR 0 3
20263: PUSH
20264: LD_INT 27
20266: EQUAL
20267: IFFALSE 20277
// sAI := true ;
20269: LD_ADDR_EXP 89
20273: PUSH
20274: LD_INT 1
20276: ST_TO_ADDR
// if p3 = 28 then
20277: LD_VAR 0 3
20281: PUSH
20282: LD_INT 28
20284: EQUAL
20285: IFFALSE 20295
// sCargo := true ;
20287: LD_ADDR_EXP 92
20291: PUSH
20292: LD_INT 1
20294: ST_TO_ADDR
// if p3 = 29 then
20295: LD_VAR 0 3
20299: PUSH
20300: LD_INT 29
20302: EQUAL
20303: IFFALSE 20313
// sDLaser := true ;
20305: LD_ADDR_EXP 93
20309: PUSH
20310: LD_INT 1
20312: ST_TO_ADDR
// if p3 = 30 then
20313: LD_VAR 0 3
20317: PUSH
20318: LD_INT 30
20320: EQUAL
20321: IFFALSE 20331
// sExchange := true ;
20323: LD_ADDR_EXP 94
20327: PUSH
20328: LD_INT 1
20330: ST_TO_ADDR
// if p3 = 31 then
20331: LD_VAR 0 3
20335: PUSH
20336: LD_INT 31
20338: EQUAL
20339: IFFALSE 20349
// sFac := true ;
20341: LD_ADDR_EXP 95
20345: PUSH
20346: LD_INT 1
20348: ST_TO_ADDR
// if p3 = 32 then
20349: LD_VAR 0 3
20353: PUSH
20354: LD_INT 32
20356: EQUAL
20357: IFFALSE 20367
// sPower := true ;
20359: LD_ADDR_EXP 96
20363: PUSH
20364: LD_INT 1
20366: ST_TO_ADDR
// if p3 = 33 then
20367: LD_VAR 0 3
20371: PUSH
20372: LD_INT 33
20374: EQUAL
20375: IFFALSE 20385
// sRandom := true ;
20377: LD_ADDR_EXP 97
20381: PUSH
20382: LD_INT 1
20384: ST_TO_ADDR
// if p3 = 34 then
20385: LD_VAR 0 3
20389: PUSH
20390: LD_INT 34
20392: EQUAL
20393: IFFALSE 20403
// sShield := true ;
20395: LD_ADDR_EXP 98
20399: PUSH
20400: LD_INT 1
20402: ST_TO_ADDR
// if p3 = 35 then
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 35
20410: EQUAL
20411: IFFALSE 20421
// sTime := true ;
20413: LD_ADDR_EXP 99
20417: PUSH
20418: LD_INT 1
20420: ST_TO_ADDR
// if p3 = 36 then
20421: LD_VAR 0 3
20425: PUSH
20426: LD_INT 36
20428: EQUAL
20429: IFFALSE 20439
// sTools := true ;
20431: LD_ADDR_EXP 100
20435: PUSH
20436: LD_INT 1
20438: ST_TO_ADDR
// if p3 = 101 then
20439: LD_VAR 0 3
20443: PUSH
20444: LD_INT 101
20446: EQUAL
20447: IFFALSE 20457
// sSold := true ;
20449: LD_ADDR_EXP 65
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// if p3 = 102 then
20457: LD_VAR 0 3
20461: PUSH
20462: LD_INT 102
20464: EQUAL
20465: IFFALSE 20475
// sDiff := true ;
20467: LD_ADDR_EXP 66
20471: PUSH
20472: LD_INT 1
20474: ST_TO_ADDR
// if p3 = 103 then
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 103
20482: EQUAL
20483: IFFALSE 20493
// sFog := true ;
20485: LD_ADDR_EXP 69
20489: PUSH
20490: LD_INT 1
20492: ST_TO_ADDR
// if p3 = 104 then
20493: LD_VAR 0 3
20497: PUSH
20498: LD_INT 104
20500: EQUAL
20501: IFFALSE 20511
// sReset := true ;
20503: LD_ADDR_EXP 70
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if p3 = 105 then
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 105
20518: EQUAL
20519: IFFALSE 20529
// sSun := true ;
20521: LD_ADDR_EXP 71
20525: PUSH
20526: LD_INT 1
20528: ST_TO_ADDR
// if p3 = 106 then
20529: LD_VAR 0 3
20533: PUSH
20534: LD_INT 106
20536: EQUAL
20537: IFFALSE 20547
// sTiger := true ;
20539: LD_ADDR_EXP 67
20543: PUSH
20544: LD_INT 1
20546: ST_TO_ADDR
// if p3 = 107 then
20547: LD_VAR 0 3
20551: PUSH
20552: LD_INT 107
20554: EQUAL
20555: IFFALSE 20565
// sBomb := true ;
20557: LD_ADDR_EXP 68
20561: PUSH
20562: LD_INT 1
20564: ST_TO_ADDR
// if p3 = 108 then
20565: LD_VAR 0 3
20569: PUSH
20570: LD_INT 108
20572: EQUAL
20573: IFFALSE 20583
// sWound := true ;
20575: LD_ADDR_EXP 76
20579: PUSH
20580: LD_INT 1
20582: ST_TO_ADDR
// if p3 = 109 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 109
20590: EQUAL
20591: IFFALSE 20601
// sBetray := true ;
20593: LD_ADDR_EXP 80
20597: PUSH
20598: LD_INT 1
20600: ST_TO_ADDR
// if p3 = 110 then
20601: LD_VAR 0 3
20605: PUSH
20606: LD_INT 110
20608: EQUAL
20609: IFFALSE 20619
// sContamin := true ;
20611: LD_ADDR_EXP 81
20615: PUSH
20616: LD_INT 1
20618: ST_TO_ADDR
// if p3 = 111 then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 111
20626: EQUAL
20627: IFFALSE 20637
// sOil := true ;
20629: LD_ADDR_EXP 83
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// if p3 = 112 then
20637: LD_VAR 0 3
20641: PUSH
20642: LD_INT 112
20644: EQUAL
20645: IFFALSE 20655
// sStu := true ;
20647: LD_ADDR_EXP 87
20651: PUSH
20652: LD_INT 1
20654: ST_TO_ADDR
// if p3 = 113 then
20655: LD_VAR 0 3
20659: PUSH
20660: LD_INT 113
20662: EQUAL
20663: IFFALSE 20673
// sBazooka := true ;
20665: LD_ADDR_EXP 90
20669: PUSH
20670: LD_INT 1
20672: ST_TO_ADDR
// if p3 = 114 then
20673: LD_VAR 0 3
20677: PUSH
20678: LD_INT 114
20680: EQUAL
20681: IFFALSE 20691
// sMortar := true ;
20683: LD_ADDR_EXP 91
20687: PUSH
20688: LD_INT 1
20690: ST_TO_ADDR
// if p3 = 115 then
20691: LD_VAR 0 3
20695: PUSH
20696: LD_INT 115
20698: EQUAL
20699: IFFALSE 20709
// sRanger := true ;
20701: LD_ADDR_EXP 101
20705: PUSH
20706: LD_INT 1
20708: ST_TO_ADDR
// if p3 = 116 then
20709: LD_VAR 0 3
20713: PUSH
20714: LD_INT 116
20716: EQUAL
20717: IFFALSE 20727
// sComputer := true ;
20719: LD_ADDR_EXP 102
20723: PUSH
20724: LD_INT 1
20726: ST_TO_ADDR
// if p3 = 117 then
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 117
20734: EQUAL
20735: IFFALSE 20745
// s30 := true ;
20737: LD_ADDR_EXP 103
20741: PUSH
20742: LD_INT 1
20744: ST_TO_ADDR
// if p3 = 118 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_INT 118
20752: EQUAL
20753: IFFALSE 20763
// s60 := true ;
20755: LD_ADDR_EXP 104
20759: PUSH
20760: LD_INT 1
20762: ST_TO_ADDR
// end ; if p2 = 101 then
20763: LD_VAR 0 2
20767: PUSH
20768: LD_INT 101
20770: EQUAL
20771: IFFALSE 20899
// begin case p3 of 1 :
20773: LD_VAR 0 3
20777: PUSH
20778: LD_INT 1
20780: DOUBLE
20781: EQUAL
20782: IFTRUE 20786
20784: GO 20793
20786: POP
// hHackUnlimitedResources ; 2 :
20787: CALL 32997 0 0
20791: GO 20899
20793: LD_INT 2
20795: DOUBLE
20796: EQUAL
20797: IFTRUE 20801
20799: GO 20808
20801: POP
// hHackSetLevel10 ; 3 :
20802: CALL 33130 0 0
20806: GO 20899
20808: LD_INT 3
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20816
20814: GO 20823
20816: POP
// hHackSetLevel10YourUnits ; 4 :
20817: CALL 33215 0 0
20821: GO 20899
20823: LD_INT 4
20825: DOUBLE
20826: EQUAL
20827: IFTRUE 20831
20829: GO 20838
20831: POP
// hHackInvincible ; 5 :
20832: CALL 33663 0 0
20836: GO 20899
20838: LD_INT 5
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20853
20846: POP
// hHackInvisible ; 6 :
20847: CALL 33774 0 0
20851: GO 20899
20853: LD_INT 6
20855: DOUBLE
20856: EQUAL
20857: IFTRUE 20861
20859: GO 20868
20861: POP
// hHackChangeYourSide ; 7 :
20862: CALL 33831 0 0
20866: GO 20899
20868: LD_INT 7
20870: DOUBLE
20871: EQUAL
20872: IFTRUE 20876
20874: GO 20883
20876: POP
// hHackChangeUnitSide ; 8 :
20877: CALL 33873 0 0
20881: GO 20899
20883: LD_INT 8
20885: DOUBLE
20886: EQUAL
20887: IFTRUE 20891
20889: GO 20898
20891: POP
// hHackFog ; end ;
20892: CALL 33974 0 0
20896: GO 20899
20898: POP
// end ; end ;
20899: LD_VAR 0 7
20903: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20904: GO 20906
20906: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20907: LD_STRING initStreamRollete();
20909: PPUSH
20910: CALL_OW 559
// InitStreamMode ;
20914: CALL 20926 0 0
// DefineStreamItems ( false ) ;
20918: LD_INT 0
20920: PPUSH
20921: CALL 21390 0 1
// end ;
20925: END
// function InitStreamMode ; begin
20926: LD_INT 0
20928: PPUSH
// streamModeActive := false ;
20929: LD_ADDR_EXP 48
20933: PUSH
20934: LD_INT 0
20936: ST_TO_ADDR
// normalCounter := 36 ;
20937: LD_ADDR_EXP 49
20941: PUSH
20942: LD_INT 36
20944: ST_TO_ADDR
// hardcoreCounter := 18 ;
20945: LD_ADDR_EXP 50
20949: PUSH
20950: LD_INT 18
20952: ST_TO_ADDR
// sRocket := false ;
20953: LD_ADDR_EXP 53
20957: PUSH
20958: LD_INT 0
20960: ST_TO_ADDR
// sSpeed := false ;
20961: LD_ADDR_EXP 52
20965: PUSH
20966: LD_INT 0
20968: ST_TO_ADDR
// sEngine := false ;
20969: LD_ADDR_EXP 54
20973: PUSH
20974: LD_INT 0
20976: ST_TO_ADDR
// sSpec := false ;
20977: LD_ADDR_EXP 51
20981: PUSH
20982: LD_INT 0
20984: ST_TO_ADDR
// sLevel := false ;
20985: LD_ADDR_EXP 55
20989: PUSH
20990: LD_INT 0
20992: ST_TO_ADDR
// sArmoury := false ;
20993: LD_ADDR_EXP 56
20997: PUSH
20998: LD_INT 0
21000: ST_TO_ADDR
// sRadar := false ;
21001: LD_ADDR_EXP 57
21005: PUSH
21006: LD_INT 0
21008: ST_TO_ADDR
// sBunker := false ;
21009: LD_ADDR_EXP 58
21013: PUSH
21014: LD_INT 0
21016: ST_TO_ADDR
// sHack := false ;
21017: LD_ADDR_EXP 59
21021: PUSH
21022: LD_INT 0
21024: ST_TO_ADDR
// sFire := false ;
21025: LD_ADDR_EXP 60
21029: PUSH
21030: LD_INT 0
21032: ST_TO_ADDR
// sRefresh := false ;
21033: LD_ADDR_EXP 61
21037: PUSH
21038: LD_INT 0
21040: ST_TO_ADDR
// sExp := false ;
21041: LD_ADDR_EXP 62
21045: PUSH
21046: LD_INT 0
21048: ST_TO_ADDR
// sDepot := false ;
21049: LD_ADDR_EXP 63
21053: PUSH
21054: LD_INT 0
21056: ST_TO_ADDR
// sFlag := false ;
21057: LD_ADDR_EXP 64
21061: PUSH
21062: LD_INT 0
21064: ST_TO_ADDR
// sKamikadze := false ;
21065: LD_ADDR_EXP 72
21069: PUSH
21070: LD_INT 0
21072: ST_TO_ADDR
// sTroll := false ;
21073: LD_ADDR_EXP 73
21077: PUSH
21078: LD_INT 0
21080: ST_TO_ADDR
// sSlow := false ;
21081: LD_ADDR_EXP 74
21085: PUSH
21086: LD_INT 0
21088: ST_TO_ADDR
// sLack := false ;
21089: LD_ADDR_EXP 75
21093: PUSH
21094: LD_INT 0
21096: ST_TO_ADDR
// sTank := false ;
21097: LD_ADDR_EXP 77
21101: PUSH
21102: LD_INT 0
21104: ST_TO_ADDR
// sRemote := false ;
21105: LD_ADDR_EXP 78
21109: PUSH
21110: LD_INT 0
21112: ST_TO_ADDR
// sPowell := false ;
21113: LD_ADDR_EXP 79
21117: PUSH
21118: LD_INT 0
21120: ST_TO_ADDR
// sTeleport := false ;
21121: LD_ADDR_EXP 82
21125: PUSH
21126: LD_INT 0
21128: ST_TO_ADDR
// sOilTower := false ;
21129: LD_ADDR_EXP 84
21133: PUSH
21134: LD_INT 0
21136: ST_TO_ADDR
// sShovel := false ;
21137: LD_ADDR_EXP 85
21141: PUSH
21142: LD_INT 0
21144: ST_TO_ADDR
// sSheik := false ;
21145: LD_ADDR_EXP 86
21149: PUSH
21150: LD_INT 0
21152: ST_TO_ADDR
// sEarthquake := false ;
21153: LD_ADDR_EXP 88
21157: PUSH
21158: LD_INT 0
21160: ST_TO_ADDR
// sAI := false ;
21161: LD_ADDR_EXP 89
21165: PUSH
21166: LD_INT 0
21168: ST_TO_ADDR
// sCargo := false ;
21169: LD_ADDR_EXP 92
21173: PUSH
21174: LD_INT 0
21176: ST_TO_ADDR
// sDLaser := false ;
21177: LD_ADDR_EXP 93
21181: PUSH
21182: LD_INT 0
21184: ST_TO_ADDR
// sExchange := false ;
21185: LD_ADDR_EXP 94
21189: PUSH
21190: LD_INT 0
21192: ST_TO_ADDR
// sFac := false ;
21193: LD_ADDR_EXP 95
21197: PUSH
21198: LD_INT 0
21200: ST_TO_ADDR
// sPower := false ;
21201: LD_ADDR_EXP 96
21205: PUSH
21206: LD_INT 0
21208: ST_TO_ADDR
// sRandom := false ;
21209: LD_ADDR_EXP 97
21213: PUSH
21214: LD_INT 0
21216: ST_TO_ADDR
// sShield := false ;
21217: LD_ADDR_EXP 98
21221: PUSH
21222: LD_INT 0
21224: ST_TO_ADDR
// sTime := false ;
21225: LD_ADDR_EXP 99
21229: PUSH
21230: LD_INT 0
21232: ST_TO_ADDR
// sTools := false ;
21233: LD_ADDR_EXP 100
21237: PUSH
21238: LD_INT 0
21240: ST_TO_ADDR
// sSold := false ;
21241: LD_ADDR_EXP 65
21245: PUSH
21246: LD_INT 0
21248: ST_TO_ADDR
// sDiff := false ;
21249: LD_ADDR_EXP 66
21253: PUSH
21254: LD_INT 0
21256: ST_TO_ADDR
// sFog := false ;
21257: LD_ADDR_EXP 69
21261: PUSH
21262: LD_INT 0
21264: ST_TO_ADDR
// sReset := false ;
21265: LD_ADDR_EXP 70
21269: PUSH
21270: LD_INT 0
21272: ST_TO_ADDR
// sSun := false ;
21273: LD_ADDR_EXP 71
21277: PUSH
21278: LD_INT 0
21280: ST_TO_ADDR
// sTiger := false ;
21281: LD_ADDR_EXP 67
21285: PUSH
21286: LD_INT 0
21288: ST_TO_ADDR
// sBomb := false ;
21289: LD_ADDR_EXP 68
21293: PUSH
21294: LD_INT 0
21296: ST_TO_ADDR
// sWound := false ;
21297: LD_ADDR_EXP 76
21301: PUSH
21302: LD_INT 0
21304: ST_TO_ADDR
// sBetray := false ;
21305: LD_ADDR_EXP 80
21309: PUSH
21310: LD_INT 0
21312: ST_TO_ADDR
// sContamin := false ;
21313: LD_ADDR_EXP 81
21317: PUSH
21318: LD_INT 0
21320: ST_TO_ADDR
// sOil := false ;
21321: LD_ADDR_EXP 83
21325: PUSH
21326: LD_INT 0
21328: ST_TO_ADDR
// sStu := false ;
21329: LD_ADDR_EXP 87
21333: PUSH
21334: LD_INT 0
21336: ST_TO_ADDR
// sBazooka := false ;
21337: LD_ADDR_EXP 90
21341: PUSH
21342: LD_INT 0
21344: ST_TO_ADDR
// sMortar := false ;
21345: LD_ADDR_EXP 91
21349: PUSH
21350: LD_INT 0
21352: ST_TO_ADDR
// sRanger := false ;
21353: LD_ADDR_EXP 101
21357: PUSH
21358: LD_INT 0
21360: ST_TO_ADDR
// sComputer := false ;
21361: LD_ADDR_EXP 102
21365: PUSH
21366: LD_INT 0
21368: ST_TO_ADDR
// s30 := false ;
21369: LD_ADDR_EXP 103
21373: PUSH
21374: LD_INT 0
21376: ST_TO_ADDR
// s60 := false ;
21377: LD_ADDR_EXP 104
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
// end ;
21385: LD_VAR 0 1
21389: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21390: LD_INT 0
21392: PPUSH
21393: PPUSH
21394: PPUSH
21395: PPUSH
21396: PPUSH
21397: PPUSH
21398: PPUSH
// result := [ ] ;
21399: LD_ADDR_VAR 0 2
21403: PUSH
21404: EMPTY
21405: ST_TO_ADDR
// if campaign_id = 1 then
21406: LD_OWVAR 69
21410: PUSH
21411: LD_INT 1
21413: EQUAL
21414: IFFALSE 24580
// begin case mission_number of 1 :
21416: LD_OWVAR 70
21420: PUSH
21421: LD_INT 1
21423: DOUBLE
21424: EQUAL
21425: IFTRUE 21429
21427: GO 21505
21429: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21430: LD_ADDR_VAR 0 2
21434: PUSH
21435: LD_INT 2
21437: PUSH
21438: LD_INT 4
21440: PUSH
21441: LD_INT 11
21443: PUSH
21444: LD_INT 12
21446: PUSH
21447: LD_INT 15
21449: PUSH
21450: LD_INT 16
21452: PUSH
21453: LD_INT 22
21455: PUSH
21456: LD_INT 23
21458: PUSH
21459: LD_INT 26
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 101
21475: PUSH
21476: LD_INT 102
21478: PUSH
21479: LD_INT 106
21481: PUSH
21482: LD_INT 116
21484: PUSH
21485: LD_INT 117
21487: PUSH
21488: LD_INT 118
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: ST_TO_ADDR
21503: GO 24578
21505: LD_INT 2
21507: DOUBLE
21508: EQUAL
21509: IFTRUE 21513
21511: GO 21597
21513: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21514: LD_ADDR_VAR 0 2
21518: PUSH
21519: LD_INT 2
21521: PUSH
21522: LD_INT 4
21524: PUSH
21525: LD_INT 11
21527: PUSH
21528: LD_INT 12
21530: PUSH
21531: LD_INT 15
21533: PUSH
21534: LD_INT 16
21536: PUSH
21537: LD_INT 22
21539: PUSH
21540: LD_INT 23
21542: PUSH
21543: LD_INT 26
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 101
21559: PUSH
21560: LD_INT 102
21562: PUSH
21563: LD_INT 105
21565: PUSH
21566: LD_INT 106
21568: PUSH
21569: LD_INT 108
21571: PUSH
21572: LD_INT 116
21574: PUSH
21575: LD_INT 117
21577: PUSH
21578: LD_INT 118
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: ST_TO_ADDR
21595: GO 24578
21597: LD_INT 3
21599: DOUBLE
21600: EQUAL
21601: IFTRUE 21605
21603: GO 21693
21605: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21606: LD_ADDR_VAR 0 2
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: LD_INT 4
21616: PUSH
21617: LD_INT 5
21619: PUSH
21620: LD_INT 11
21622: PUSH
21623: LD_INT 12
21625: PUSH
21626: LD_INT 15
21628: PUSH
21629: LD_INT 16
21631: PUSH
21632: LD_INT 22
21634: PUSH
21635: LD_INT 26
21637: PUSH
21638: LD_INT 36
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 101
21655: PUSH
21656: LD_INT 102
21658: PUSH
21659: LD_INT 105
21661: PUSH
21662: LD_INT 106
21664: PUSH
21665: LD_INT 108
21667: PUSH
21668: LD_INT 116
21670: PUSH
21671: LD_INT 117
21673: PUSH
21674: LD_INT 118
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: ST_TO_ADDR
21691: GO 24578
21693: LD_INT 4
21695: DOUBLE
21696: EQUAL
21697: IFTRUE 21701
21699: GO 21797
21701: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21702: LD_ADDR_VAR 0 2
21706: PUSH
21707: LD_INT 2
21709: PUSH
21710: LD_INT 4
21712: PUSH
21713: LD_INT 5
21715: PUSH
21716: LD_INT 8
21718: PUSH
21719: LD_INT 11
21721: PUSH
21722: LD_INT 12
21724: PUSH
21725: LD_INT 15
21727: PUSH
21728: LD_INT 16
21730: PUSH
21731: LD_INT 22
21733: PUSH
21734: LD_INT 23
21736: PUSH
21737: LD_INT 26
21739: PUSH
21740: LD_INT 36
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 101
21759: PUSH
21760: LD_INT 102
21762: PUSH
21763: LD_INT 105
21765: PUSH
21766: LD_INT 106
21768: PUSH
21769: LD_INT 108
21771: PUSH
21772: LD_INT 116
21774: PUSH
21775: LD_INT 117
21777: PUSH
21778: LD_INT 118
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: ST_TO_ADDR
21795: GO 24578
21797: LD_INT 5
21799: DOUBLE
21800: EQUAL
21801: IFTRUE 21805
21803: GO 21917
21805: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21806: LD_ADDR_VAR 0 2
21810: PUSH
21811: LD_INT 2
21813: PUSH
21814: LD_INT 4
21816: PUSH
21817: LD_INT 5
21819: PUSH
21820: LD_INT 6
21822: PUSH
21823: LD_INT 8
21825: PUSH
21826: LD_INT 11
21828: PUSH
21829: LD_INT 12
21831: PUSH
21832: LD_INT 15
21834: PUSH
21835: LD_INT 16
21837: PUSH
21838: LD_INT 22
21840: PUSH
21841: LD_INT 23
21843: PUSH
21844: LD_INT 25
21846: PUSH
21847: LD_INT 26
21849: PUSH
21850: LD_INT 36
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 101
21871: PUSH
21872: LD_INT 102
21874: PUSH
21875: LD_INT 105
21877: PUSH
21878: LD_INT 106
21880: PUSH
21881: LD_INT 108
21883: PUSH
21884: LD_INT 109
21886: PUSH
21887: LD_INT 112
21889: PUSH
21890: LD_INT 116
21892: PUSH
21893: LD_INT 117
21895: PUSH
21896: LD_INT 118
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: ST_TO_ADDR
21915: GO 24578
21917: LD_INT 6
21919: DOUBLE
21920: EQUAL
21921: IFTRUE 21925
21923: GO 22057
21925: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21926: LD_ADDR_VAR 0 2
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: LD_INT 4
21936: PUSH
21937: LD_INT 5
21939: PUSH
21940: LD_INT 6
21942: PUSH
21943: LD_INT 8
21945: PUSH
21946: LD_INT 11
21948: PUSH
21949: LD_INT 12
21951: PUSH
21952: LD_INT 15
21954: PUSH
21955: LD_INT 16
21957: PUSH
21958: LD_INT 20
21960: PUSH
21961: LD_INT 21
21963: PUSH
21964: LD_INT 22
21966: PUSH
21967: LD_INT 23
21969: PUSH
21970: LD_INT 25
21972: PUSH
21973: LD_INT 26
21975: PUSH
21976: LD_INT 30
21978: PUSH
21979: LD_INT 31
21981: PUSH
21982: LD_INT 32
21984: PUSH
21985: LD_INT 36
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 101
22011: PUSH
22012: LD_INT 102
22014: PUSH
22015: LD_INT 105
22017: PUSH
22018: LD_INT 106
22020: PUSH
22021: LD_INT 108
22023: PUSH
22024: LD_INT 109
22026: PUSH
22027: LD_INT 112
22029: PUSH
22030: LD_INT 116
22032: PUSH
22033: LD_INT 117
22035: PUSH
22036: LD_INT 118
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: ST_TO_ADDR
22055: GO 24578
22057: LD_INT 7
22059: DOUBLE
22060: EQUAL
22061: IFTRUE 22065
22063: GO 22177
22065: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22066: LD_ADDR_VAR 0 2
22070: PUSH
22071: LD_INT 2
22073: PUSH
22074: LD_INT 4
22076: PUSH
22077: LD_INT 5
22079: PUSH
22080: LD_INT 7
22082: PUSH
22083: LD_INT 11
22085: PUSH
22086: LD_INT 12
22088: PUSH
22089: LD_INT 15
22091: PUSH
22092: LD_INT 16
22094: PUSH
22095: LD_INT 20
22097: PUSH
22098: LD_INT 21
22100: PUSH
22101: LD_INT 22
22103: PUSH
22104: LD_INT 23
22106: PUSH
22107: LD_INT 25
22109: PUSH
22110: LD_INT 26
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 101
22131: PUSH
22132: LD_INT 102
22134: PUSH
22135: LD_INT 103
22137: PUSH
22138: LD_INT 105
22140: PUSH
22141: LD_INT 106
22143: PUSH
22144: LD_INT 108
22146: PUSH
22147: LD_INT 112
22149: PUSH
22150: LD_INT 116
22152: PUSH
22153: LD_INT 117
22155: PUSH
22156: LD_INT 118
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: ST_TO_ADDR
22175: GO 24578
22177: LD_INT 8
22179: DOUBLE
22180: EQUAL
22181: IFTRUE 22185
22183: GO 22325
22185: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22186: LD_ADDR_VAR 0 2
22190: PUSH
22191: LD_INT 2
22193: PUSH
22194: LD_INT 4
22196: PUSH
22197: LD_INT 5
22199: PUSH
22200: LD_INT 6
22202: PUSH
22203: LD_INT 7
22205: PUSH
22206: LD_INT 8
22208: PUSH
22209: LD_INT 11
22211: PUSH
22212: LD_INT 12
22214: PUSH
22215: LD_INT 15
22217: PUSH
22218: LD_INT 16
22220: PUSH
22221: LD_INT 20
22223: PUSH
22224: LD_INT 21
22226: PUSH
22227: LD_INT 22
22229: PUSH
22230: LD_INT 23
22232: PUSH
22233: LD_INT 25
22235: PUSH
22236: LD_INT 26
22238: PUSH
22239: LD_INT 30
22241: PUSH
22242: LD_INT 31
22244: PUSH
22245: LD_INT 32
22247: PUSH
22248: LD_INT 36
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 101
22275: PUSH
22276: LD_INT 102
22278: PUSH
22279: LD_INT 103
22281: PUSH
22282: LD_INT 105
22284: PUSH
22285: LD_INT 106
22287: PUSH
22288: LD_INT 108
22290: PUSH
22291: LD_INT 109
22293: PUSH
22294: LD_INT 112
22296: PUSH
22297: LD_INT 116
22299: PUSH
22300: LD_INT 117
22302: PUSH
22303: LD_INT 118
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: ST_TO_ADDR
22323: GO 24578
22325: LD_INT 9
22327: DOUBLE
22328: EQUAL
22329: IFTRUE 22333
22331: GO 22481
22333: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22334: LD_ADDR_VAR 0 2
22338: PUSH
22339: LD_INT 2
22341: PUSH
22342: LD_INT 4
22344: PUSH
22345: LD_INT 5
22347: PUSH
22348: LD_INT 6
22350: PUSH
22351: LD_INT 7
22353: PUSH
22354: LD_INT 8
22356: PUSH
22357: LD_INT 11
22359: PUSH
22360: LD_INT 12
22362: PUSH
22363: LD_INT 15
22365: PUSH
22366: LD_INT 16
22368: PUSH
22369: LD_INT 20
22371: PUSH
22372: LD_INT 21
22374: PUSH
22375: LD_INT 22
22377: PUSH
22378: LD_INT 23
22380: PUSH
22381: LD_INT 25
22383: PUSH
22384: LD_INT 26
22386: PUSH
22387: LD_INT 28
22389: PUSH
22390: LD_INT 30
22392: PUSH
22393: LD_INT 31
22395: PUSH
22396: LD_INT 32
22398: PUSH
22399: LD_INT 36
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 101
22427: PUSH
22428: LD_INT 102
22430: PUSH
22431: LD_INT 103
22433: PUSH
22434: LD_INT 105
22436: PUSH
22437: LD_INT 106
22439: PUSH
22440: LD_INT 108
22442: PUSH
22443: LD_INT 109
22445: PUSH
22446: LD_INT 112
22448: PUSH
22449: LD_INT 114
22451: PUSH
22452: LD_INT 116
22454: PUSH
22455: LD_INT 117
22457: PUSH
22458: LD_INT 118
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: ST_TO_ADDR
22479: GO 24578
22481: LD_INT 10
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22685
22489: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22490: LD_ADDR_VAR 0 2
22494: PUSH
22495: LD_INT 2
22497: PUSH
22498: LD_INT 4
22500: PUSH
22501: LD_INT 5
22503: PUSH
22504: LD_INT 6
22506: PUSH
22507: LD_INT 7
22509: PUSH
22510: LD_INT 8
22512: PUSH
22513: LD_INT 9
22515: PUSH
22516: LD_INT 10
22518: PUSH
22519: LD_INT 11
22521: PUSH
22522: LD_INT 12
22524: PUSH
22525: LD_INT 13
22527: PUSH
22528: LD_INT 14
22530: PUSH
22531: LD_INT 15
22533: PUSH
22534: LD_INT 16
22536: PUSH
22537: LD_INT 17
22539: PUSH
22540: LD_INT 18
22542: PUSH
22543: LD_INT 19
22545: PUSH
22546: LD_INT 20
22548: PUSH
22549: LD_INT 21
22551: PUSH
22552: LD_INT 22
22554: PUSH
22555: LD_INT 23
22557: PUSH
22558: LD_INT 24
22560: PUSH
22561: LD_INT 25
22563: PUSH
22564: LD_INT 26
22566: PUSH
22567: LD_INT 28
22569: PUSH
22570: LD_INT 30
22572: PUSH
22573: LD_INT 31
22575: PUSH
22576: LD_INT 32
22578: PUSH
22579: LD_INT 36
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 101
22615: PUSH
22616: LD_INT 102
22618: PUSH
22619: LD_INT 103
22621: PUSH
22622: LD_INT 104
22624: PUSH
22625: LD_INT 105
22627: PUSH
22628: LD_INT 106
22630: PUSH
22631: LD_INT 107
22633: PUSH
22634: LD_INT 108
22636: PUSH
22637: LD_INT 109
22639: PUSH
22640: LD_INT 110
22642: PUSH
22643: LD_INT 111
22645: PUSH
22646: LD_INT 112
22648: PUSH
22649: LD_INT 114
22651: PUSH
22652: LD_INT 116
22654: PUSH
22655: LD_INT 117
22657: PUSH
22658: LD_INT 118
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: ST_TO_ADDR
22683: GO 24578
22685: LD_INT 11
22687: DOUBLE
22688: EQUAL
22689: IFTRUE 22693
22691: GO 22897
22693: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22694: LD_ADDR_VAR 0 2
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: LD_INT 3
22704: PUSH
22705: LD_INT 4
22707: PUSH
22708: LD_INT 5
22710: PUSH
22711: LD_INT 6
22713: PUSH
22714: LD_INT 7
22716: PUSH
22717: LD_INT 8
22719: PUSH
22720: LD_INT 9
22722: PUSH
22723: LD_INT 10
22725: PUSH
22726: LD_INT 11
22728: PUSH
22729: LD_INT 12
22731: PUSH
22732: LD_INT 13
22734: PUSH
22735: LD_INT 14
22737: PUSH
22738: LD_INT 15
22740: PUSH
22741: LD_INT 16
22743: PUSH
22744: LD_INT 17
22746: PUSH
22747: LD_INT 18
22749: PUSH
22750: LD_INT 19
22752: PUSH
22753: LD_INT 20
22755: PUSH
22756: LD_INT 21
22758: PUSH
22759: LD_INT 22
22761: PUSH
22762: LD_INT 23
22764: PUSH
22765: LD_INT 24
22767: PUSH
22768: LD_INT 25
22770: PUSH
22771: LD_INT 26
22773: PUSH
22774: LD_INT 28
22776: PUSH
22777: LD_INT 30
22779: PUSH
22780: LD_INT 31
22782: PUSH
22783: LD_INT 32
22785: PUSH
22786: LD_INT 34
22788: PUSH
22789: LD_INT 36
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 101
22827: PUSH
22828: LD_INT 102
22830: PUSH
22831: LD_INT 103
22833: PUSH
22834: LD_INT 104
22836: PUSH
22837: LD_INT 105
22839: PUSH
22840: LD_INT 106
22842: PUSH
22843: LD_INT 107
22845: PUSH
22846: LD_INT 108
22848: PUSH
22849: LD_INT 109
22851: PUSH
22852: LD_INT 110
22854: PUSH
22855: LD_INT 111
22857: PUSH
22858: LD_INT 112
22860: PUSH
22861: LD_INT 114
22863: PUSH
22864: LD_INT 116
22866: PUSH
22867: LD_INT 117
22869: PUSH
22870: LD_INT 118
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: ST_TO_ADDR
22895: GO 24578
22897: LD_INT 12
22899: DOUBLE
22900: EQUAL
22901: IFTRUE 22905
22903: GO 23125
22905: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22906: LD_ADDR_VAR 0 2
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: LD_INT 2
22916: PUSH
22917: LD_INT 3
22919: PUSH
22920: LD_INT 4
22922: PUSH
22923: LD_INT 5
22925: PUSH
22926: LD_INT 6
22928: PUSH
22929: LD_INT 7
22931: PUSH
22932: LD_INT 8
22934: PUSH
22935: LD_INT 9
22937: PUSH
22938: LD_INT 10
22940: PUSH
22941: LD_INT 11
22943: PUSH
22944: LD_INT 12
22946: PUSH
22947: LD_INT 13
22949: PUSH
22950: LD_INT 14
22952: PUSH
22953: LD_INT 15
22955: PUSH
22956: LD_INT 16
22958: PUSH
22959: LD_INT 17
22961: PUSH
22962: LD_INT 18
22964: PUSH
22965: LD_INT 19
22967: PUSH
22968: LD_INT 20
22970: PUSH
22971: LD_INT 21
22973: PUSH
22974: LD_INT 22
22976: PUSH
22977: LD_INT 23
22979: PUSH
22980: LD_INT 24
22982: PUSH
22983: LD_INT 25
22985: PUSH
22986: LD_INT 26
22988: PUSH
22989: LD_INT 27
22991: PUSH
22992: LD_INT 28
22994: PUSH
22995: LD_INT 30
22997: PUSH
22998: LD_INT 31
23000: PUSH
23001: LD_INT 32
23003: PUSH
23004: LD_INT 33
23006: PUSH
23007: LD_INT 34
23009: PUSH
23010: LD_INT 36
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 101
23051: PUSH
23052: LD_INT 102
23054: PUSH
23055: LD_INT 103
23057: PUSH
23058: LD_INT 104
23060: PUSH
23061: LD_INT 105
23063: PUSH
23064: LD_INT 106
23066: PUSH
23067: LD_INT 107
23069: PUSH
23070: LD_INT 108
23072: PUSH
23073: LD_INT 109
23075: PUSH
23076: LD_INT 110
23078: PUSH
23079: LD_INT 111
23081: PUSH
23082: LD_INT 112
23084: PUSH
23085: LD_INT 113
23087: PUSH
23088: LD_INT 114
23090: PUSH
23091: LD_INT 116
23093: PUSH
23094: LD_INT 117
23096: PUSH
23097: LD_INT 118
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: ST_TO_ADDR
23123: GO 24578
23125: LD_INT 13
23127: DOUBLE
23128: EQUAL
23129: IFTRUE 23133
23131: GO 23341
23133: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23134: LD_ADDR_VAR 0 2
23138: PUSH
23139: LD_INT 1
23141: PUSH
23142: LD_INT 2
23144: PUSH
23145: LD_INT 3
23147: PUSH
23148: LD_INT 4
23150: PUSH
23151: LD_INT 5
23153: PUSH
23154: LD_INT 8
23156: PUSH
23157: LD_INT 9
23159: PUSH
23160: LD_INT 10
23162: PUSH
23163: LD_INT 11
23165: PUSH
23166: LD_INT 12
23168: PUSH
23169: LD_INT 14
23171: PUSH
23172: LD_INT 15
23174: PUSH
23175: LD_INT 16
23177: PUSH
23178: LD_INT 17
23180: PUSH
23181: LD_INT 18
23183: PUSH
23184: LD_INT 19
23186: PUSH
23187: LD_INT 20
23189: PUSH
23190: LD_INT 21
23192: PUSH
23193: LD_INT 22
23195: PUSH
23196: LD_INT 23
23198: PUSH
23199: LD_INT 24
23201: PUSH
23202: LD_INT 25
23204: PUSH
23205: LD_INT 26
23207: PUSH
23208: LD_INT 27
23210: PUSH
23211: LD_INT 28
23213: PUSH
23214: LD_INT 30
23216: PUSH
23217: LD_INT 31
23219: PUSH
23220: LD_INT 32
23222: PUSH
23223: LD_INT 33
23225: PUSH
23226: LD_INT 34
23228: PUSH
23229: LD_INT 36
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 101
23267: PUSH
23268: LD_INT 102
23270: PUSH
23271: LD_INT 103
23273: PUSH
23274: LD_INT 104
23276: PUSH
23277: LD_INT 105
23279: PUSH
23280: LD_INT 106
23282: PUSH
23283: LD_INT 107
23285: PUSH
23286: LD_INT 108
23288: PUSH
23289: LD_INT 109
23291: PUSH
23292: LD_INT 110
23294: PUSH
23295: LD_INT 111
23297: PUSH
23298: LD_INT 112
23300: PUSH
23301: LD_INT 113
23303: PUSH
23304: LD_INT 114
23306: PUSH
23307: LD_INT 116
23309: PUSH
23310: LD_INT 117
23312: PUSH
23313: LD_INT 118
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: ST_TO_ADDR
23339: GO 24578
23341: LD_INT 14
23343: DOUBLE
23344: EQUAL
23345: IFTRUE 23349
23347: GO 23573
23349: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23350: LD_ADDR_VAR 0 2
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: LD_INT 3
23363: PUSH
23364: LD_INT 4
23366: PUSH
23367: LD_INT 5
23369: PUSH
23370: LD_INT 6
23372: PUSH
23373: LD_INT 7
23375: PUSH
23376: LD_INT 8
23378: PUSH
23379: LD_INT 9
23381: PUSH
23382: LD_INT 10
23384: PUSH
23385: LD_INT 11
23387: PUSH
23388: LD_INT 12
23390: PUSH
23391: LD_INT 13
23393: PUSH
23394: LD_INT 14
23396: PUSH
23397: LD_INT 15
23399: PUSH
23400: LD_INT 16
23402: PUSH
23403: LD_INT 17
23405: PUSH
23406: LD_INT 18
23408: PUSH
23409: LD_INT 19
23411: PUSH
23412: LD_INT 20
23414: PUSH
23415: LD_INT 21
23417: PUSH
23418: LD_INT 22
23420: PUSH
23421: LD_INT 23
23423: PUSH
23424: LD_INT 24
23426: PUSH
23427: LD_INT 25
23429: PUSH
23430: LD_INT 26
23432: PUSH
23433: LD_INT 27
23435: PUSH
23436: LD_INT 28
23438: PUSH
23439: LD_INT 29
23441: PUSH
23442: LD_INT 30
23444: PUSH
23445: LD_INT 31
23447: PUSH
23448: LD_INT 32
23450: PUSH
23451: LD_INT 33
23453: PUSH
23454: LD_INT 34
23456: PUSH
23457: LD_INT 36
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 101
23499: PUSH
23500: LD_INT 102
23502: PUSH
23503: LD_INT 103
23505: PUSH
23506: LD_INT 104
23508: PUSH
23509: LD_INT 105
23511: PUSH
23512: LD_INT 106
23514: PUSH
23515: LD_INT 107
23517: PUSH
23518: LD_INT 108
23520: PUSH
23521: LD_INT 109
23523: PUSH
23524: LD_INT 110
23526: PUSH
23527: LD_INT 111
23529: PUSH
23530: LD_INT 112
23532: PUSH
23533: LD_INT 113
23535: PUSH
23536: LD_INT 114
23538: PUSH
23539: LD_INT 116
23541: PUSH
23542: LD_INT 117
23544: PUSH
23545: LD_INT 118
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: ST_TO_ADDR
23571: GO 24578
23573: LD_INT 15
23575: DOUBLE
23576: EQUAL
23577: IFTRUE 23581
23579: GO 23805
23581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23582: LD_ADDR_VAR 0 2
23586: PUSH
23587: LD_INT 1
23589: PUSH
23590: LD_INT 2
23592: PUSH
23593: LD_INT 3
23595: PUSH
23596: LD_INT 4
23598: PUSH
23599: LD_INT 5
23601: PUSH
23602: LD_INT 6
23604: PUSH
23605: LD_INT 7
23607: PUSH
23608: LD_INT 8
23610: PUSH
23611: LD_INT 9
23613: PUSH
23614: LD_INT 10
23616: PUSH
23617: LD_INT 11
23619: PUSH
23620: LD_INT 12
23622: PUSH
23623: LD_INT 13
23625: PUSH
23626: LD_INT 14
23628: PUSH
23629: LD_INT 15
23631: PUSH
23632: LD_INT 16
23634: PUSH
23635: LD_INT 17
23637: PUSH
23638: LD_INT 18
23640: PUSH
23641: LD_INT 19
23643: PUSH
23644: LD_INT 20
23646: PUSH
23647: LD_INT 21
23649: PUSH
23650: LD_INT 22
23652: PUSH
23653: LD_INT 23
23655: PUSH
23656: LD_INT 24
23658: PUSH
23659: LD_INT 25
23661: PUSH
23662: LD_INT 26
23664: PUSH
23665: LD_INT 27
23667: PUSH
23668: LD_INT 28
23670: PUSH
23671: LD_INT 29
23673: PUSH
23674: LD_INT 30
23676: PUSH
23677: LD_INT 31
23679: PUSH
23680: LD_INT 32
23682: PUSH
23683: LD_INT 33
23685: PUSH
23686: LD_INT 34
23688: PUSH
23689: LD_INT 36
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 101
23731: PUSH
23732: LD_INT 102
23734: PUSH
23735: LD_INT 103
23737: PUSH
23738: LD_INT 104
23740: PUSH
23741: LD_INT 105
23743: PUSH
23744: LD_INT 106
23746: PUSH
23747: LD_INT 107
23749: PUSH
23750: LD_INT 108
23752: PUSH
23753: LD_INT 109
23755: PUSH
23756: LD_INT 110
23758: PUSH
23759: LD_INT 111
23761: PUSH
23762: LD_INT 112
23764: PUSH
23765: LD_INT 113
23767: PUSH
23768: LD_INT 114
23770: PUSH
23771: LD_INT 116
23773: PUSH
23774: LD_INT 117
23776: PUSH
23777: LD_INT 118
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: ST_TO_ADDR
23803: GO 24578
23805: LD_INT 16
23807: DOUBLE
23808: EQUAL
23809: IFTRUE 23813
23811: GO 23949
23813: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23814: LD_ADDR_VAR 0 2
23818: PUSH
23819: LD_INT 2
23821: PUSH
23822: LD_INT 4
23824: PUSH
23825: LD_INT 5
23827: PUSH
23828: LD_INT 7
23830: PUSH
23831: LD_INT 11
23833: PUSH
23834: LD_INT 12
23836: PUSH
23837: LD_INT 15
23839: PUSH
23840: LD_INT 16
23842: PUSH
23843: LD_INT 20
23845: PUSH
23846: LD_INT 21
23848: PUSH
23849: LD_INT 22
23851: PUSH
23852: LD_INT 23
23854: PUSH
23855: LD_INT 25
23857: PUSH
23858: LD_INT 26
23860: PUSH
23861: LD_INT 30
23863: PUSH
23864: LD_INT 31
23866: PUSH
23867: LD_INT 32
23869: PUSH
23870: LD_INT 33
23872: PUSH
23873: LD_INT 34
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 101
23899: PUSH
23900: LD_INT 102
23902: PUSH
23903: LD_INT 103
23905: PUSH
23906: LD_INT 106
23908: PUSH
23909: LD_INT 108
23911: PUSH
23912: LD_INT 112
23914: PUSH
23915: LD_INT 113
23917: PUSH
23918: LD_INT 114
23920: PUSH
23921: LD_INT 116
23923: PUSH
23924: LD_INT 117
23926: PUSH
23927: LD_INT 118
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: ST_TO_ADDR
23947: GO 24578
23949: LD_INT 17
23951: DOUBLE
23952: EQUAL
23953: IFTRUE 23957
23955: GO 24181
23957: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23958: LD_ADDR_VAR 0 2
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: LD_INT 2
23968: PUSH
23969: LD_INT 3
23971: PUSH
23972: LD_INT 4
23974: PUSH
23975: LD_INT 5
23977: PUSH
23978: LD_INT 6
23980: PUSH
23981: LD_INT 7
23983: PUSH
23984: LD_INT 8
23986: PUSH
23987: LD_INT 9
23989: PUSH
23990: LD_INT 10
23992: PUSH
23993: LD_INT 11
23995: PUSH
23996: LD_INT 12
23998: PUSH
23999: LD_INT 13
24001: PUSH
24002: LD_INT 14
24004: PUSH
24005: LD_INT 15
24007: PUSH
24008: LD_INT 16
24010: PUSH
24011: LD_INT 17
24013: PUSH
24014: LD_INT 18
24016: PUSH
24017: LD_INT 19
24019: PUSH
24020: LD_INT 20
24022: PUSH
24023: LD_INT 21
24025: PUSH
24026: LD_INT 22
24028: PUSH
24029: LD_INT 23
24031: PUSH
24032: LD_INT 24
24034: PUSH
24035: LD_INT 25
24037: PUSH
24038: LD_INT 26
24040: PUSH
24041: LD_INT 27
24043: PUSH
24044: LD_INT 28
24046: PUSH
24047: LD_INT 29
24049: PUSH
24050: LD_INT 30
24052: PUSH
24053: LD_INT 31
24055: PUSH
24056: LD_INT 32
24058: PUSH
24059: LD_INT 33
24061: PUSH
24062: LD_INT 34
24064: PUSH
24065: LD_INT 36
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 101
24107: PUSH
24108: LD_INT 102
24110: PUSH
24111: LD_INT 103
24113: PUSH
24114: LD_INT 104
24116: PUSH
24117: LD_INT 105
24119: PUSH
24120: LD_INT 106
24122: PUSH
24123: LD_INT 107
24125: PUSH
24126: LD_INT 108
24128: PUSH
24129: LD_INT 109
24131: PUSH
24132: LD_INT 110
24134: PUSH
24135: LD_INT 111
24137: PUSH
24138: LD_INT 112
24140: PUSH
24141: LD_INT 113
24143: PUSH
24144: LD_INT 114
24146: PUSH
24147: LD_INT 116
24149: PUSH
24150: LD_INT 117
24152: PUSH
24153: LD_INT 118
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: ST_TO_ADDR
24179: GO 24578
24181: LD_INT 18
24183: DOUBLE
24184: EQUAL
24185: IFTRUE 24189
24187: GO 24337
24189: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24190: LD_ADDR_VAR 0 2
24194: PUSH
24195: LD_INT 2
24197: PUSH
24198: LD_INT 4
24200: PUSH
24201: LD_INT 5
24203: PUSH
24204: LD_INT 7
24206: PUSH
24207: LD_INT 11
24209: PUSH
24210: LD_INT 12
24212: PUSH
24213: LD_INT 15
24215: PUSH
24216: LD_INT 16
24218: PUSH
24219: LD_INT 20
24221: PUSH
24222: LD_INT 21
24224: PUSH
24225: LD_INT 22
24227: PUSH
24228: LD_INT 23
24230: PUSH
24231: LD_INT 25
24233: PUSH
24234: LD_INT 26
24236: PUSH
24237: LD_INT 30
24239: PUSH
24240: LD_INT 31
24242: PUSH
24243: LD_INT 32
24245: PUSH
24246: LD_INT 33
24248: PUSH
24249: LD_INT 34
24251: PUSH
24252: LD_INT 35
24254: PUSH
24255: LD_INT 36
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 101
24283: PUSH
24284: LD_INT 102
24286: PUSH
24287: LD_INT 103
24289: PUSH
24290: LD_INT 106
24292: PUSH
24293: LD_INT 108
24295: PUSH
24296: LD_INT 112
24298: PUSH
24299: LD_INT 113
24301: PUSH
24302: LD_INT 114
24304: PUSH
24305: LD_INT 115
24307: PUSH
24308: LD_INT 116
24310: PUSH
24311: LD_INT 117
24313: PUSH
24314: LD_INT 118
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: ST_TO_ADDR
24335: GO 24578
24337: LD_INT 19
24339: DOUBLE
24340: EQUAL
24341: IFTRUE 24345
24343: GO 24577
24345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24346: LD_ADDR_VAR 0 2
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: LD_INT 3
24359: PUSH
24360: LD_INT 4
24362: PUSH
24363: LD_INT 5
24365: PUSH
24366: LD_INT 6
24368: PUSH
24369: LD_INT 7
24371: PUSH
24372: LD_INT 8
24374: PUSH
24375: LD_INT 9
24377: PUSH
24378: LD_INT 10
24380: PUSH
24381: LD_INT 11
24383: PUSH
24384: LD_INT 12
24386: PUSH
24387: LD_INT 13
24389: PUSH
24390: LD_INT 14
24392: PUSH
24393: LD_INT 15
24395: PUSH
24396: LD_INT 16
24398: PUSH
24399: LD_INT 17
24401: PUSH
24402: LD_INT 18
24404: PUSH
24405: LD_INT 19
24407: PUSH
24408: LD_INT 20
24410: PUSH
24411: LD_INT 21
24413: PUSH
24414: LD_INT 22
24416: PUSH
24417: LD_INT 23
24419: PUSH
24420: LD_INT 24
24422: PUSH
24423: LD_INT 25
24425: PUSH
24426: LD_INT 26
24428: PUSH
24429: LD_INT 27
24431: PUSH
24432: LD_INT 28
24434: PUSH
24435: LD_INT 29
24437: PUSH
24438: LD_INT 30
24440: PUSH
24441: LD_INT 31
24443: PUSH
24444: LD_INT 32
24446: PUSH
24447: LD_INT 33
24449: PUSH
24450: LD_INT 34
24452: PUSH
24453: LD_INT 35
24455: PUSH
24456: LD_INT 36
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 101
24499: PUSH
24500: LD_INT 102
24502: PUSH
24503: LD_INT 103
24505: PUSH
24506: LD_INT 104
24508: PUSH
24509: LD_INT 105
24511: PUSH
24512: LD_INT 106
24514: PUSH
24515: LD_INT 107
24517: PUSH
24518: LD_INT 108
24520: PUSH
24521: LD_INT 109
24523: PUSH
24524: LD_INT 110
24526: PUSH
24527: LD_INT 111
24529: PUSH
24530: LD_INT 112
24532: PUSH
24533: LD_INT 113
24535: PUSH
24536: LD_INT 114
24538: PUSH
24539: LD_INT 115
24541: PUSH
24542: LD_INT 116
24544: PUSH
24545: LD_INT 117
24547: PUSH
24548: LD_INT 118
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: ST_TO_ADDR
24575: GO 24578
24577: POP
// end else
24578: GO 24809
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24580: LD_ADDR_VAR 0 2
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: LD_INT 2
24590: PUSH
24591: LD_INT 3
24593: PUSH
24594: LD_INT 4
24596: PUSH
24597: LD_INT 5
24599: PUSH
24600: LD_INT 6
24602: PUSH
24603: LD_INT 7
24605: PUSH
24606: LD_INT 8
24608: PUSH
24609: LD_INT 9
24611: PUSH
24612: LD_INT 10
24614: PUSH
24615: LD_INT 11
24617: PUSH
24618: LD_INT 12
24620: PUSH
24621: LD_INT 13
24623: PUSH
24624: LD_INT 14
24626: PUSH
24627: LD_INT 15
24629: PUSH
24630: LD_INT 16
24632: PUSH
24633: LD_INT 17
24635: PUSH
24636: LD_INT 18
24638: PUSH
24639: LD_INT 19
24641: PUSH
24642: LD_INT 20
24644: PUSH
24645: LD_INT 21
24647: PUSH
24648: LD_INT 22
24650: PUSH
24651: LD_INT 23
24653: PUSH
24654: LD_INT 24
24656: PUSH
24657: LD_INT 25
24659: PUSH
24660: LD_INT 26
24662: PUSH
24663: LD_INT 27
24665: PUSH
24666: LD_INT 28
24668: PUSH
24669: LD_INT 29
24671: PUSH
24672: LD_INT 30
24674: PUSH
24675: LD_INT 31
24677: PUSH
24678: LD_INT 32
24680: PUSH
24681: LD_INT 33
24683: PUSH
24684: LD_INT 34
24686: PUSH
24687: LD_INT 35
24689: PUSH
24690: LD_INT 36
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 101
24733: PUSH
24734: LD_INT 102
24736: PUSH
24737: LD_INT 103
24739: PUSH
24740: LD_INT 104
24742: PUSH
24743: LD_INT 105
24745: PUSH
24746: LD_INT 106
24748: PUSH
24749: LD_INT 107
24751: PUSH
24752: LD_INT 108
24754: PUSH
24755: LD_INT 109
24757: PUSH
24758: LD_INT 110
24760: PUSH
24761: LD_INT 111
24763: PUSH
24764: LD_INT 112
24766: PUSH
24767: LD_INT 113
24769: PUSH
24770: LD_INT 114
24772: PUSH
24773: LD_INT 115
24775: PUSH
24776: LD_INT 116
24778: PUSH
24779: LD_INT 117
24781: PUSH
24782: LD_INT 118
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: ST_TO_ADDR
// if result then
24809: LD_VAR 0 2
24813: IFFALSE 25599
// begin normal :=  ;
24815: LD_ADDR_VAR 0 5
24819: PUSH
24820: LD_STRING 
24822: ST_TO_ADDR
// hardcore :=  ;
24823: LD_ADDR_VAR 0 6
24827: PUSH
24828: LD_STRING 
24830: ST_TO_ADDR
// active :=  ;
24831: LD_ADDR_VAR 0 7
24835: PUSH
24836: LD_STRING 
24838: ST_TO_ADDR
// for i = 1 to normalCounter do
24839: LD_ADDR_VAR 0 8
24843: PUSH
24844: DOUBLE
24845: LD_INT 1
24847: DEC
24848: ST_TO_ADDR
24849: LD_EXP 49
24853: PUSH
24854: FOR_TO
24855: IFFALSE 24956
// begin tmp := 0 ;
24857: LD_ADDR_VAR 0 3
24861: PUSH
24862: LD_STRING 0
24864: ST_TO_ADDR
// if result [ 1 ] then
24865: LD_VAR 0 2
24869: PUSH
24870: LD_INT 1
24872: ARRAY
24873: IFFALSE 24938
// if result [ 1 ] [ 1 ] = i then
24875: LD_VAR 0 2
24879: PUSH
24880: LD_INT 1
24882: ARRAY
24883: PUSH
24884: LD_INT 1
24886: ARRAY
24887: PUSH
24888: LD_VAR 0 8
24892: EQUAL
24893: IFFALSE 24938
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24895: LD_ADDR_VAR 0 2
24899: PUSH
24900: LD_VAR 0 2
24904: PPUSH
24905: LD_INT 1
24907: PPUSH
24908: LD_VAR 0 2
24912: PUSH
24913: LD_INT 1
24915: ARRAY
24916: PPUSH
24917: LD_INT 1
24919: PPUSH
24920: CALL_OW 3
24924: PPUSH
24925: CALL_OW 1
24929: ST_TO_ADDR
// tmp := 1 ;
24930: LD_ADDR_VAR 0 3
24934: PUSH
24935: LD_STRING 1
24937: ST_TO_ADDR
// end ; normal := normal & tmp ;
24938: LD_ADDR_VAR 0 5
24942: PUSH
24943: LD_VAR 0 5
24947: PUSH
24948: LD_VAR 0 3
24952: STR
24953: ST_TO_ADDR
// end ;
24954: GO 24854
24956: POP
24957: POP
// for i = 1 to hardcoreCounter do
24958: LD_ADDR_VAR 0 8
24962: PUSH
24963: DOUBLE
24964: LD_INT 1
24966: DEC
24967: ST_TO_ADDR
24968: LD_EXP 50
24972: PUSH
24973: FOR_TO
24974: IFFALSE 25079
// begin tmp := 0 ;
24976: LD_ADDR_VAR 0 3
24980: PUSH
24981: LD_STRING 0
24983: ST_TO_ADDR
// if result [ 2 ] then
24984: LD_VAR 0 2
24988: PUSH
24989: LD_INT 2
24991: ARRAY
24992: IFFALSE 25061
// if result [ 2 ] [ 1 ] = 100 + i then
24994: LD_VAR 0 2
24998: PUSH
24999: LD_INT 2
25001: ARRAY
25002: PUSH
25003: LD_INT 1
25005: ARRAY
25006: PUSH
25007: LD_INT 100
25009: PUSH
25010: LD_VAR 0 8
25014: PLUS
25015: EQUAL
25016: IFFALSE 25061
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25018: LD_ADDR_VAR 0 2
25022: PUSH
25023: LD_VAR 0 2
25027: PPUSH
25028: LD_INT 2
25030: PPUSH
25031: LD_VAR 0 2
25035: PUSH
25036: LD_INT 2
25038: ARRAY
25039: PPUSH
25040: LD_INT 1
25042: PPUSH
25043: CALL_OW 3
25047: PPUSH
25048: CALL_OW 1
25052: ST_TO_ADDR
// tmp := 1 ;
25053: LD_ADDR_VAR 0 3
25057: PUSH
25058: LD_STRING 1
25060: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25061: LD_ADDR_VAR 0 6
25065: PUSH
25066: LD_VAR 0 6
25070: PUSH
25071: LD_VAR 0 3
25075: STR
25076: ST_TO_ADDR
// end ;
25077: GO 24973
25079: POP
25080: POP
// if isGameLoad then
25081: LD_VAR 0 1
25085: IFFALSE 25560
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25087: LD_ADDR_VAR 0 4
25091: PUSH
25092: LD_EXP 53
25096: PUSH
25097: LD_EXP 52
25101: PUSH
25102: LD_EXP 54
25106: PUSH
25107: LD_EXP 51
25111: PUSH
25112: LD_EXP 55
25116: PUSH
25117: LD_EXP 56
25121: PUSH
25122: LD_EXP 57
25126: PUSH
25127: LD_EXP 58
25131: PUSH
25132: LD_EXP 59
25136: PUSH
25137: LD_EXP 60
25141: PUSH
25142: LD_EXP 61
25146: PUSH
25147: LD_EXP 62
25151: PUSH
25152: LD_EXP 63
25156: PUSH
25157: LD_EXP 64
25161: PUSH
25162: LD_EXP 72
25166: PUSH
25167: LD_EXP 73
25171: PUSH
25172: LD_EXP 74
25176: PUSH
25177: LD_EXP 75
25181: PUSH
25182: LD_EXP 77
25186: PUSH
25187: LD_EXP 78
25191: PUSH
25192: LD_EXP 79
25196: PUSH
25197: LD_EXP 82
25201: PUSH
25202: LD_EXP 84
25206: PUSH
25207: LD_EXP 85
25211: PUSH
25212: LD_EXP 86
25216: PUSH
25217: LD_EXP 88
25221: PUSH
25222: LD_EXP 89
25226: PUSH
25227: LD_EXP 92
25231: PUSH
25232: LD_EXP 93
25236: PUSH
25237: LD_EXP 94
25241: PUSH
25242: LD_EXP 95
25246: PUSH
25247: LD_EXP 96
25251: PUSH
25252: LD_EXP 97
25256: PUSH
25257: LD_EXP 98
25261: PUSH
25262: LD_EXP 99
25266: PUSH
25267: LD_EXP 100
25271: PUSH
25272: LD_EXP 65
25276: PUSH
25277: LD_EXP 66
25281: PUSH
25282: LD_EXP 69
25286: PUSH
25287: LD_EXP 70
25291: PUSH
25292: LD_EXP 71
25296: PUSH
25297: LD_EXP 67
25301: PUSH
25302: LD_EXP 68
25306: PUSH
25307: LD_EXP 76
25311: PUSH
25312: LD_EXP 80
25316: PUSH
25317: LD_EXP 81
25321: PUSH
25322: LD_EXP 83
25326: PUSH
25327: LD_EXP 87
25331: PUSH
25332: LD_EXP 90
25336: PUSH
25337: LD_EXP 91
25341: PUSH
25342: LD_EXP 101
25346: PUSH
25347: LD_EXP 102
25351: PUSH
25352: LD_EXP 103
25356: PUSH
25357: LD_EXP 104
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: ST_TO_ADDR
// tmp :=  ;
25418: LD_ADDR_VAR 0 3
25422: PUSH
25423: LD_STRING 
25425: ST_TO_ADDR
// for i = 1 to normalCounter do
25426: LD_ADDR_VAR 0 8
25430: PUSH
25431: DOUBLE
25432: LD_INT 1
25434: DEC
25435: ST_TO_ADDR
25436: LD_EXP 49
25440: PUSH
25441: FOR_TO
25442: IFFALSE 25478
// begin if flags [ i ] then
25444: LD_VAR 0 4
25448: PUSH
25449: LD_VAR 0 8
25453: ARRAY
25454: IFFALSE 25476
// tmp := tmp & i & ; ;
25456: LD_ADDR_VAR 0 3
25460: PUSH
25461: LD_VAR 0 3
25465: PUSH
25466: LD_VAR 0 8
25470: STR
25471: PUSH
25472: LD_STRING ;
25474: STR
25475: ST_TO_ADDR
// end ;
25476: GO 25441
25478: POP
25479: POP
// for i = 1 to hardcoreCounter do
25480: LD_ADDR_VAR 0 8
25484: PUSH
25485: DOUBLE
25486: LD_INT 1
25488: DEC
25489: ST_TO_ADDR
25490: LD_EXP 50
25494: PUSH
25495: FOR_TO
25496: IFFALSE 25542
// begin if flags [ normalCounter + i ] then
25498: LD_VAR 0 4
25502: PUSH
25503: LD_EXP 49
25507: PUSH
25508: LD_VAR 0 8
25512: PLUS
25513: ARRAY
25514: IFFALSE 25540
// tmp := tmp & ( 100 + i ) & ; ;
25516: LD_ADDR_VAR 0 3
25520: PUSH
25521: LD_VAR 0 3
25525: PUSH
25526: LD_INT 100
25528: PUSH
25529: LD_VAR 0 8
25533: PLUS
25534: STR
25535: PUSH
25536: LD_STRING ;
25538: STR
25539: ST_TO_ADDR
// end ;
25540: GO 25495
25542: POP
25543: POP
// if tmp then
25544: LD_VAR 0 3
25548: IFFALSE 25560
// active := tmp ;
25550: LD_ADDR_VAR 0 7
25554: PUSH
25555: LD_VAR 0 3
25559: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25560: LD_STRING getStreamItemsFromMission("
25562: PUSH
25563: LD_VAR 0 5
25567: STR
25568: PUSH
25569: LD_STRING ","
25571: STR
25572: PUSH
25573: LD_VAR 0 6
25577: STR
25578: PUSH
25579: LD_STRING ","
25581: STR
25582: PUSH
25583: LD_VAR 0 7
25587: STR
25588: PUSH
25589: LD_STRING ")
25591: STR
25592: PPUSH
25593: CALL_OW 559
// end else
25597: GO 25606
// ToLua ( getStreamItemsFromMission("","","") ) ;
25599: LD_STRING getStreamItemsFromMission("","","")
25601: PPUSH
25602: CALL_OW 559
// end ;
25606: LD_VAR 0 2
25610: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25611: LD_EXP 48
25615: PUSH
25616: LD_EXP 53
25620: AND
25621: IFFALSE 25745
25623: GO 25625
25625: DISABLE
25626: LD_INT 0
25628: PPUSH
25629: PPUSH
// begin enable ;
25630: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25631: LD_ADDR_VAR 0 2
25635: PUSH
25636: LD_INT 22
25638: PUSH
25639: LD_OWVAR 2
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 2
25650: PUSH
25651: LD_INT 34
25653: PUSH
25654: LD_INT 7
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 34
25663: PUSH
25664: LD_INT 45
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 34
25673: PUSH
25674: LD_INT 28
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 34
25683: PUSH
25684: LD_INT 47
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PPUSH
25702: CALL_OW 69
25706: ST_TO_ADDR
// if not tmp then
25707: LD_VAR 0 2
25711: NOT
25712: IFFALSE 25716
// exit ;
25714: GO 25745
// for i in tmp do
25716: LD_ADDR_VAR 0 1
25720: PUSH
25721: LD_VAR 0 2
25725: PUSH
25726: FOR_IN
25727: IFFALSE 25743
// begin SetLives ( i , 0 ) ;
25729: LD_VAR 0 1
25733: PPUSH
25734: LD_INT 0
25736: PPUSH
25737: CALL_OW 234
// end ;
25741: GO 25726
25743: POP
25744: POP
// end ;
25745: PPOPN 2
25747: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25748: LD_EXP 48
25752: PUSH
25753: LD_EXP 54
25757: AND
25758: IFFALSE 25842
25760: GO 25762
25762: DISABLE
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
// begin enable ;
25767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25768: LD_ADDR_VAR 0 2
25772: PUSH
25773: LD_INT 22
25775: PUSH
25776: LD_OWVAR 2
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 32
25787: PUSH
25788: LD_INT 3
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PPUSH
25799: CALL_OW 69
25803: ST_TO_ADDR
// if not tmp then
25804: LD_VAR 0 2
25808: NOT
25809: IFFALSE 25813
// exit ;
25811: GO 25842
// for i in tmp do
25813: LD_ADDR_VAR 0 1
25817: PUSH
25818: LD_VAR 0 2
25822: PUSH
25823: FOR_IN
25824: IFFALSE 25840
// begin SetLives ( i , 0 ) ;
25826: LD_VAR 0 1
25830: PPUSH
25831: LD_INT 0
25833: PPUSH
25834: CALL_OW 234
// end ;
25838: GO 25823
25840: POP
25841: POP
// end ;
25842: PPOPN 2
25844: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25845: LD_EXP 48
25849: PUSH
25850: LD_EXP 51
25854: AND
25855: IFFALSE 25948
25857: GO 25859
25859: DISABLE
25860: LD_INT 0
25862: PPUSH
// begin enable ;
25863: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25864: LD_ADDR_VAR 0 1
25868: PUSH
25869: LD_INT 22
25871: PUSH
25872: LD_OWVAR 2
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 2
25883: PUSH
25884: LD_INT 25
25886: PUSH
25887: LD_INT 5
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 25
25896: PUSH
25897: LD_INT 9
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 25
25906: PUSH
25907: LD_INT 8
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PPUSH
25924: CALL_OW 69
25928: PUSH
25929: FOR_IN
25930: IFFALSE 25946
// begin SetClass ( i , 1 ) ;
25932: LD_VAR 0 1
25936: PPUSH
25937: LD_INT 1
25939: PPUSH
25940: CALL_OW 336
// end ;
25944: GO 25929
25946: POP
25947: POP
// end ;
25948: PPOPN 1
25950: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25951: LD_EXP 48
25955: PUSH
25956: LD_EXP 52
25960: AND
25961: PUSH
25962: LD_OWVAR 65
25966: PUSH
25967: LD_INT 7
25969: LESS
25970: AND
25971: IFFALSE 25985
25973: GO 25975
25975: DISABLE
// begin enable ;
25976: ENABLE
// game_speed := 7 ;
25977: LD_ADDR_OWVAR 65
25981: PUSH
25982: LD_INT 7
25984: ST_TO_ADDR
// end ;
25985: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25986: LD_EXP 48
25990: PUSH
25991: LD_EXP 55
25995: AND
25996: IFFALSE 26198
25998: GO 26000
26000: DISABLE
26001: LD_INT 0
26003: PPUSH
26004: PPUSH
26005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26006: LD_ADDR_VAR 0 3
26010: PUSH
26011: LD_INT 81
26013: PUSH
26014: LD_OWVAR 2
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 21
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PPUSH
26037: CALL_OW 69
26041: ST_TO_ADDR
// if not tmp then
26042: LD_VAR 0 3
26046: NOT
26047: IFFALSE 26051
// exit ;
26049: GO 26198
// if tmp > 5 then
26051: LD_VAR 0 3
26055: PUSH
26056: LD_INT 5
26058: GREATER
26059: IFFALSE 26071
// k := 5 else
26061: LD_ADDR_VAR 0 2
26065: PUSH
26066: LD_INT 5
26068: ST_TO_ADDR
26069: GO 26081
// k := tmp ;
26071: LD_ADDR_VAR 0 2
26075: PUSH
26076: LD_VAR 0 3
26080: ST_TO_ADDR
// for i := 1 to k do
26081: LD_ADDR_VAR 0 1
26085: PUSH
26086: DOUBLE
26087: LD_INT 1
26089: DEC
26090: ST_TO_ADDR
26091: LD_VAR 0 2
26095: PUSH
26096: FOR_TO
26097: IFFALSE 26196
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26099: LD_VAR 0 3
26103: PUSH
26104: LD_VAR 0 1
26108: ARRAY
26109: PPUSH
26110: LD_VAR 0 1
26114: PUSH
26115: LD_INT 4
26117: MOD
26118: PUSH
26119: LD_INT 1
26121: PLUS
26122: PPUSH
26123: CALL_OW 259
26127: PUSH
26128: LD_INT 10
26130: LESS
26131: IFFALSE 26194
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26133: LD_VAR 0 3
26137: PUSH
26138: LD_VAR 0 1
26142: ARRAY
26143: PPUSH
26144: LD_VAR 0 1
26148: PUSH
26149: LD_INT 4
26151: MOD
26152: PUSH
26153: LD_INT 1
26155: PLUS
26156: PPUSH
26157: LD_VAR 0 3
26161: PUSH
26162: LD_VAR 0 1
26166: ARRAY
26167: PPUSH
26168: LD_VAR 0 1
26172: PUSH
26173: LD_INT 4
26175: MOD
26176: PUSH
26177: LD_INT 1
26179: PLUS
26180: PPUSH
26181: CALL_OW 259
26185: PUSH
26186: LD_INT 1
26188: PLUS
26189: PPUSH
26190: CALL_OW 237
26194: GO 26096
26196: POP
26197: POP
// end ;
26198: PPOPN 3
26200: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26201: LD_EXP 48
26205: PUSH
26206: LD_EXP 56
26210: AND
26211: IFFALSE 26231
26213: GO 26215
26215: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26216: LD_INT 4
26218: PPUSH
26219: LD_OWVAR 2
26223: PPUSH
26224: LD_INT 0
26226: PPUSH
26227: CALL_OW 324
26231: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26232: LD_EXP 48
26236: PUSH
26237: LD_EXP 85
26241: AND
26242: IFFALSE 26262
26244: GO 26246
26246: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26247: LD_INT 19
26249: PPUSH
26250: LD_OWVAR 2
26254: PPUSH
26255: LD_INT 0
26257: PPUSH
26258: CALL_OW 324
26262: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26263: LD_EXP 48
26267: PUSH
26268: LD_EXP 57
26272: AND
26273: IFFALSE 26375
26275: GO 26277
26277: DISABLE
26278: LD_INT 0
26280: PPUSH
26281: PPUSH
// begin enable ;
26282: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26283: LD_ADDR_VAR 0 2
26287: PUSH
26288: LD_INT 22
26290: PUSH
26291: LD_OWVAR 2
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: LD_INT 34
26305: PUSH
26306: LD_INT 11
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 34
26315: PUSH
26316: LD_INT 30
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: LIST
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PPUSH
26332: CALL_OW 69
26336: ST_TO_ADDR
// if not tmp then
26337: LD_VAR 0 2
26341: NOT
26342: IFFALSE 26346
// exit ;
26344: GO 26375
// for i in tmp do
26346: LD_ADDR_VAR 0 1
26350: PUSH
26351: LD_VAR 0 2
26355: PUSH
26356: FOR_IN
26357: IFFALSE 26373
// begin SetLives ( i , 0 ) ;
26359: LD_VAR 0 1
26363: PPUSH
26364: LD_INT 0
26366: PPUSH
26367: CALL_OW 234
// end ;
26371: GO 26356
26373: POP
26374: POP
// end ;
26375: PPOPN 2
26377: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26378: LD_EXP 48
26382: PUSH
26383: LD_EXP 58
26387: AND
26388: IFFALSE 26408
26390: GO 26392
26392: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26393: LD_INT 32
26395: PPUSH
26396: LD_OWVAR 2
26400: PPUSH
26401: LD_INT 0
26403: PPUSH
26404: CALL_OW 324
26408: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26409: LD_EXP 48
26413: PUSH
26414: LD_EXP 59
26418: AND
26419: IFFALSE 26600
26421: GO 26423
26423: DISABLE
26424: LD_INT 0
26426: PPUSH
26427: PPUSH
26428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26429: LD_ADDR_VAR 0 2
26433: PUSH
26434: LD_INT 22
26436: PUSH
26437: LD_OWVAR 2
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 33
26448: PUSH
26449: LD_INT 3
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PPUSH
26460: CALL_OW 69
26464: ST_TO_ADDR
// if not tmp then
26465: LD_VAR 0 2
26469: NOT
26470: IFFALSE 26474
// exit ;
26472: GO 26600
// side := 0 ;
26474: LD_ADDR_VAR 0 3
26478: PUSH
26479: LD_INT 0
26481: ST_TO_ADDR
// for i := 1 to 8 do
26482: LD_ADDR_VAR 0 1
26486: PUSH
26487: DOUBLE
26488: LD_INT 1
26490: DEC
26491: ST_TO_ADDR
26492: LD_INT 8
26494: PUSH
26495: FOR_TO
26496: IFFALSE 26544
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26498: LD_OWVAR 2
26502: PUSH
26503: LD_VAR 0 1
26507: NONEQUAL
26508: PUSH
26509: LD_OWVAR 2
26513: PPUSH
26514: LD_VAR 0 1
26518: PPUSH
26519: CALL_OW 81
26523: PUSH
26524: LD_INT 2
26526: EQUAL
26527: AND
26528: IFFALSE 26542
// begin side := i ;
26530: LD_ADDR_VAR 0 3
26534: PUSH
26535: LD_VAR 0 1
26539: ST_TO_ADDR
// break ;
26540: GO 26544
// end ;
26542: GO 26495
26544: POP
26545: POP
// if not side then
26546: LD_VAR 0 3
26550: NOT
26551: IFFALSE 26555
// exit ;
26553: GO 26600
// for i := 1 to tmp do
26555: LD_ADDR_VAR 0 1
26559: PUSH
26560: DOUBLE
26561: LD_INT 1
26563: DEC
26564: ST_TO_ADDR
26565: LD_VAR 0 2
26569: PUSH
26570: FOR_TO
26571: IFFALSE 26598
// if Prob ( 60 ) then
26573: LD_INT 60
26575: PPUSH
26576: CALL_OW 13
26580: IFFALSE 26596
// SetSide ( i , side ) ;
26582: LD_VAR 0 1
26586: PPUSH
26587: LD_VAR 0 3
26591: PPUSH
26592: CALL_OW 235
26596: GO 26570
26598: POP
26599: POP
// end ;
26600: PPOPN 3
26602: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26603: LD_EXP 48
26607: PUSH
26608: LD_EXP 61
26612: AND
26613: IFFALSE 26732
26615: GO 26617
26617: DISABLE
26618: LD_INT 0
26620: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26621: LD_ADDR_VAR 0 1
26625: PUSH
26626: LD_INT 22
26628: PUSH
26629: LD_OWVAR 2
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 21
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 3
26650: PUSH
26651: LD_INT 23
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: LIST
26669: PPUSH
26670: CALL_OW 69
26674: PUSH
26675: FOR_IN
26676: IFFALSE 26730
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26678: LD_VAR 0 1
26682: PPUSH
26683: CALL_OW 257
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: LD_INT 3
26696: PUSH
26697: LD_INT 4
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: IN
26706: IFFALSE 26728
// SetClass ( un , rand ( 1 , 4 ) ) ;
26708: LD_VAR 0 1
26712: PPUSH
26713: LD_INT 1
26715: PPUSH
26716: LD_INT 4
26718: PPUSH
26719: CALL_OW 12
26723: PPUSH
26724: CALL_OW 336
26728: GO 26675
26730: POP
26731: POP
// end ;
26732: PPOPN 1
26734: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26735: LD_EXP 48
26739: PUSH
26740: LD_EXP 60
26744: AND
26745: IFFALSE 26824
26747: GO 26749
26749: DISABLE
26750: LD_INT 0
26752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26753: LD_ADDR_VAR 0 1
26757: PUSH
26758: LD_INT 22
26760: PUSH
26761: LD_OWVAR 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 21
26772: PUSH
26773: LD_INT 3
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PPUSH
26784: CALL_OW 69
26788: ST_TO_ADDR
// if not tmp then
26789: LD_VAR 0 1
26793: NOT
26794: IFFALSE 26798
// exit ;
26796: GO 26824
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26798: LD_VAR 0 1
26802: PUSH
26803: LD_INT 1
26805: PPUSH
26806: LD_VAR 0 1
26810: PPUSH
26811: CALL_OW 12
26815: ARRAY
26816: PPUSH
26817: LD_INT 100
26819: PPUSH
26820: CALL_OW 234
// end ;
26824: PPOPN 1
26826: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26827: LD_EXP 48
26831: PUSH
26832: LD_EXP 62
26836: AND
26837: IFFALSE 26935
26839: GO 26841
26841: DISABLE
26842: LD_INT 0
26844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26845: LD_ADDR_VAR 0 1
26849: PUSH
26850: LD_INT 22
26852: PUSH
26853: LD_OWVAR 2
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 21
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PPUSH
26876: CALL_OW 69
26880: ST_TO_ADDR
// if not tmp then
26881: LD_VAR 0 1
26885: NOT
26886: IFFALSE 26890
// exit ;
26888: GO 26935
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26890: LD_VAR 0 1
26894: PUSH
26895: LD_INT 1
26897: PPUSH
26898: LD_VAR 0 1
26902: PPUSH
26903: CALL_OW 12
26907: ARRAY
26908: PPUSH
26909: LD_INT 1
26911: PPUSH
26912: LD_INT 4
26914: PPUSH
26915: CALL_OW 12
26919: PPUSH
26920: LD_INT 3000
26922: PPUSH
26923: LD_INT 9000
26925: PPUSH
26926: CALL_OW 12
26930: PPUSH
26931: CALL_OW 492
// end ;
26935: PPOPN 1
26937: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26938: LD_EXP 48
26942: PUSH
26943: LD_EXP 63
26947: AND
26948: IFFALSE 26968
26950: GO 26952
26952: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26953: LD_INT 1
26955: PPUSH
26956: LD_OWVAR 2
26960: PPUSH
26961: LD_INT 0
26963: PPUSH
26964: CALL_OW 324
26968: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26969: LD_EXP 48
26973: PUSH
26974: LD_EXP 64
26978: AND
26979: IFFALSE 27062
26981: GO 26983
26983: DISABLE
26984: LD_INT 0
26986: PPUSH
26987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26988: LD_ADDR_VAR 0 2
26992: PUSH
26993: LD_INT 22
26995: PUSH
26996: LD_OWVAR 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 21
27007: PUSH
27008: LD_INT 3
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PPUSH
27019: CALL_OW 69
27023: ST_TO_ADDR
// if not tmp then
27024: LD_VAR 0 2
27028: NOT
27029: IFFALSE 27033
// exit ;
27031: GO 27062
// for i in tmp do
27033: LD_ADDR_VAR 0 1
27037: PUSH
27038: LD_VAR 0 2
27042: PUSH
27043: FOR_IN
27044: IFFALSE 27060
// SetBLevel ( i , 10 ) ;
27046: LD_VAR 0 1
27050: PPUSH
27051: LD_INT 10
27053: PPUSH
27054: CALL_OW 241
27058: GO 27043
27060: POP
27061: POP
// end ;
27062: PPOPN 2
27064: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27065: LD_EXP 48
27069: PUSH
27070: LD_EXP 65
27074: AND
27075: IFFALSE 27186
27077: GO 27079
27079: DISABLE
27080: LD_INT 0
27082: PPUSH
27083: PPUSH
27084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27085: LD_ADDR_VAR 0 3
27089: PUSH
27090: LD_INT 22
27092: PUSH
27093: LD_OWVAR 2
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 25
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PPUSH
27116: CALL_OW 69
27120: ST_TO_ADDR
// if not tmp then
27121: LD_VAR 0 3
27125: NOT
27126: IFFALSE 27130
// exit ;
27128: GO 27186
// un := tmp [ rand ( 1 , tmp ) ] ;
27130: LD_ADDR_VAR 0 2
27134: PUSH
27135: LD_VAR 0 3
27139: PUSH
27140: LD_INT 1
27142: PPUSH
27143: LD_VAR 0 3
27147: PPUSH
27148: CALL_OW 12
27152: ARRAY
27153: ST_TO_ADDR
// if Crawls ( un ) then
27154: LD_VAR 0 2
27158: PPUSH
27159: CALL_OW 318
27163: IFFALSE 27174
// ComWalk ( un ) ;
27165: LD_VAR 0 2
27169: PPUSH
27170: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27174: LD_VAR 0 2
27178: PPUSH
27179: LD_INT 5
27181: PPUSH
27182: CALL_OW 336
// end ;
27186: PPOPN 3
27188: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27189: LD_EXP 48
27193: PUSH
27194: LD_EXP 66
27198: AND
27199: PUSH
27200: LD_OWVAR 67
27204: PUSH
27205: LD_INT 4
27207: LESS
27208: AND
27209: IFFALSE 27228
27211: GO 27213
27213: DISABLE
// begin Difficulty := Difficulty + 1 ;
27214: LD_ADDR_OWVAR 67
27218: PUSH
27219: LD_OWVAR 67
27223: PUSH
27224: LD_INT 1
27226: PLUS
27227: ST_TO_ADDR
// end ;
27228: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27229: LD_EXP 48
27233: PUSH
27234: LD_EXP 67
27238: AND
27239: IFFALSE 27342
27241: GO 27243
27243: DISABLE
27244: LD_INT 0
27246: PPUSH
// begin for i := 1 to 5 do
27247: LD_ADDR_VAR 0 1
27251: PUSH
27252: DOUBLE
27253: LD_INT 1
27255: DEC
27256: ST_TO_ADDR
27257: LD_INT 5
27259: PUSH
27260: FOR_TO
27261: IFFALSE 27340
// begin uc_nation := nation_nature ;
27263: LD_ADDR_OWVAR 21
27267: PUSH
27268: LD_INT 0
27270: ST_TO_ADDR
// uc_side := 0 ;
27271: LD_ADDR_OWVAR 20
27275: PUSH
27276: LD_INT 0
27278: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27279: LD_ADDR_OWVAR 29
27283: PUSH
27284: LD_INT 12
27286: PUSH
27287: LD_INT 12
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: ST_TO_ADDR
// hc_agressivity := 20 ;
27294: LD_ADDR_OWVAR 35
27298: PUSH
27299: LD_INT 20
27301: ST_TO_ADDR
// hc_class := class_tiger ;
27302: LD_ADDR_OWVAR 28
27306: PUSH
27307: LD_INT 14
27309: ST_TO_ADDR
// hc_gallery :=  ;
27310: LD_ADDR_OWVAR 33
27314: PUSH
27315: LD_STRING 
27317: ST_TO_ADDR
// hc_name :=  ;
27318: LD_ADDR_OWVAR 26
27322: PUSH
27323: LD_STRING 
27325: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27326: CALL_OW 44
27330: PPUSH
27331: LD_INT 0
27333: PPUSH
27334: CALL_OW 51
// end ;
27338: GO 27260
27340: POP
27341: POP
// end ;
27342: PPOPN 1
27344: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27345: LD_EXP 48
27349: PUSH
27350: LD_EXP 68
27354: AND
27355: IFFALSE 27364
27357: GO 27359
27359: DISABLE
// StreamSibBomb ;
27360: CALL 27365 0 0
27364: END
// export function StreamSibBomb ; var i , x , y ; begin
27365: LD_INT 0
27367: PPUSH
27368: PPUSH
27369: PPUSH
27370: PPUSH
// result := false ;
27371: LD_ADDR_VAR 0 1
27375: PUSH
27376: LD_INT 0
27378: ST_TO_ADDR
// for i := 1 to 16 do
27379: LD_ADDR_VAR 0 2
27383: PUSH
27384: DOUBLE
27385: LD_INT 1
27387: DEC
27388: ST_TO_ADDR
27389: LD_INT 16
27391: PUSH
27392: FOR_TO
27393: IFFALSE 27592
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27395: LD_ADDR_VAR 0 3
27399: PUSH
27400: LD_INT 10
27402: PUSH
27403: LD_INT 20
27405: PUSH
27406: LD_INT 30
27408: PUSH
27409: LD_INT 40
27411: PUSH
27412: LD_INT 50
27414: PUSH
27415: LD_INT 60
27417: PUSH
27418: LD_INT 70
27420: PUSH
27421: LD_INT 80
27423: PUSH
27424: LD_INT 90
27426: PUSH
27427: LD_INT 100
27429: PUSH
27430: LD_INT 110
27432: PUSH
27433: LD_INT 120
27435: PUSH
27436: LD_INT 130
27438: PUSH
27439: LD_INT 140
27441: PUSH
27442: LD_INT 150
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 1
27464: PPUSH
27465: LD_INT 15
27467: PPUSH
27468: CALL_OW 12
27472: ARRAY
27473: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27474: LD_ADDR_VAR 0 4
27478: PUSH
27479: LD_INT 10
27481: PUSH
27482: LD_INT 20
27484: PUSH
27485: LD_INT 30
27487: PUSH
27488: LD_INT 40
27490: PUSH
27491: LD_INT 50
27493: PUSH
27494: LD_INT 60
27496: PUSH
27497: LD_INT 70
27499: PUSH
27500: LD_INT 80
27502: PUSH
27503: LD_INT 90
27505: PUSH
27506: LD_INT 100
27508: PUSH
27509: LD_INT 110
27511: PUSH
27512: LD_INT 120
27514: PUSH
27515: LD_INT 130
27517: PUSH
27518: LD_INT 140
27520: PUSH
27521: LD_INT 150
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: PPUSH
27544: LD_INT 15
27546: PPUSH
27547: CALL_OW 12
27551: ARRAY
27552: ST_TO_ADDR
// if ValidHex ( x , y ) then
27553: LD_VAR 0 3
27557: PPUSH
27558: LD_VAR 0 4
27562: PPUSH
27563: CALL_OW 488
27567: IFFALSE 27590
// begin result := [ x , y ] ;
27569: LD_ADDR_VAR 0 1
27573: PUSH
27574: LD_VAR 0 3
27578: PUSH
27579: LD_VAR 0 4
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: ST_TO_ADDR
// break ;
27588: GO 27592
// end ; end ;
27590: GO 27392
27592: POP
27593: POP
// if result then
27594: LD_VAR 0 1
27598: IFFALSE 27658
// begin ToLua ( playSibBomb() ) ;
27600: LD_STRING playSibBomb()
27602: PPUSH
27603: CALL_OW 559
// wait ( 0 0$14 ) ;
27607: LD_INT 490
27609: PPUSH
27610: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27614: LD_VAR 0 1
27618: PUSH
27619: LD_INT 1
27621: ARRAY
27622: PPUSH
27623: LD_VAR 0 1
27627: PUSH
27628: LD_INT 2
27630: ARRAY
27631: PPUSH
27632: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27636: LD_VAR 0 1
27640: PUSH
27641: LD_INT 1
27643: ARRAY
27644: PPUSH
27645: LD_VAR 0 1
27649: PUSH
27650: LD_INT 2
27652: ARRAY
27653: PPUSH
27654: CALL_OW 429
// end ; end ;
27658: LD_VAR 0 1
27662: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27663: LD_EXP 48
27667: PUSH
27668: LD_EXP 70
27672: AND
27673: IFFALSE 27685
27675: GO 27677
27677: DISABLE
// YouLost (  ) ;
27678: LD_STRING 
27680: PPUSH
27681: CALL_OW 104
27685: END
// every 0 0$1 trigger StreamModeActive and sFog do
27686: LD_EXP 48
27690: PUSH
27691: LD_EXP 69
27695: AND
27696: IFFALSE 27710
27698: GO 27700
27700: DISABLE
// FogOff ( your_side ) ;
27701: LD_OWVAR 2
27705: PPUSH
27706: CALL_OW 344
27710: END
// every 0 0$1 trigger StreamModeActive and sSun do
27711: LD_EXP 48
27715: PUSH
27716: LD_EXP 71
27720: AND
27721: IFFALSE 27749
27723: GO 27725
27725: DISABLE
// begin solar_recharge_percent := 0 ;
27726: LD_ADDR_OWVAR 79
27730: PUSH
27731: LD_INT 0
27733: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27734: LD_INT 10500
27736: PPUSH
27737: CALL_OW 67
// solar_recharge_percent := 100 ;
27741: LD_ADDR_OWVAR 79
27745: PUSH
27746: LD_INT 100
27748: ST_TO_ADDR
// end ;
27749: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27750: LD_EXP 48
27754: PUSH
27755: LD_EXP 72
27759: AND
27760: IFFALSE 27999
27762: GO 27764
27764: DISABLE
27765: LD_INT 0
27767: PPUSH
27768: PPUSH
27769: PPUSH
// begin tmp := [ ] ;
27770: LD_ADDR_VAR 0 3
27774: PUSH
27775: EMPTY
27776: ST_TO_ADDR
// for i := 1 to 6 do
27777: LD_ADDR_VAR 0 1
27781: PUSH
27782: DOUBLE
27783: LD_INT 1
27785: DEC
27786: ST_TO_ADDR
27787: LD_INT 6
27789: PUSH
27790: FOR_TO
27791: IFFALSE 27896
// begin uc_nation := nation_nature ;
27793: LD_ADDR_OWVAR 21
27797: PUSH
27798: LD_INT 0
27800: ST_TO_ADDR
// uc_side := 0 ;
27801: LD_ADDR_OWVAR 20
27805: PUSH
27806: LD_INT 0
27808: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27809: LD_ADDR_OWVAR 29
27813: PUSH
27814: LD_INT 12
27816: PUSH
27817: LD_INT 12
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: ST_TO_ADDR
// hc_agressivity := 20 ;
27824: LD_ADDR_OWVAR 35
27828: PUSH
27829: LD_INT 20
27831: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27832: LD_ADDR_OWVAR 28
27836: PUSH
27837: LD_INT 17
27839: ST_TO_ADDR
// hc_gallery :=  ;
27840: LD_ADDR_OWVAR 33
27844: PUSH
27845: LD_STRING 
27847: ST_TO_ADDR
// hc_name :=  ;
27848: LD_ADDR_OWVAR 26
27852: PUSH
27853: LD_STRING 
27855: ST_TO_ADDR
// un := CreateHuman ;
27856: LD_ADDR_VAR 0 2
27860: PUSH
27861: CALL_OW 44
27865: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27866: LD_VAR 0 2
27870: PPUSH
27871: LD_INT 1
27873: PPUSH
27874: CALL_OW 51
// tmp := tmp ^ un ;
27878: LD_ADDR_VAR 0 3
27882: PUSH
27883: LD_VAR 0 3
27887: PUSH
27888: LD_VAR 0 2
27892: ADD
27893: ST_TO_ADDR
// end ;
27894: GO 27790
27896: POP
27897: POP
// repeat wait ( 0 0$1 ) ;
27898: LD_INT 35
27900: PPUSH
27901: CALL_OW 67
// for un in tmp do
27905: LD_ADDR_VAR 0 2
27909: PUSH
27910: LD_VAR 0 3
27914: PUSH
27915: FOR_IN
27916: IFFALSE 27990
// begin if IsDead ( un ) then
27918: LD_VAR 0 2
27922: PPUSH
27923: CALL_OW 301
27927: IFFALSE 27947
// begin tmp := tmp diff un ;
27929: LD_ADDR_VAR 0 3
27933: PUSH
27934: LD_VAR 0 3
27938: PUSH
27939: LD_VAR 0 2
27943: DIFF
27944: ST_TO_ADDR
// continue ;
27945: GO 27915
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27947: LD_VAR 0 2
27951: PPUSH
27952: LD_INT 3
27954: PUSH
27955: LD_INT 22
27957: PUSH
27958: LD_INT 0
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PPUSH
27969: CALL_OW 69
27973: PPUSH
27974: LD_VAR 0 2
27978: PPUSH
27979: CALL_OW 74
27983: PPUSH
27984: CALL_OW 115
// end ;
27988: GO 27915
27990: POP
27991: POP
// until not tmp ;
27992: LD_VAR 0 3
27996: NOT
27997: IFFALSE 27898
// end ;
27999: PPOPN 3
28001: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28002: LD_EXP 48
28006: PUSH
28007: LD_EXP 73
28011: AND
28012: IFFALSE 28066
28014: GO 28016
28016: DISABLE
// begin ToLua ( displayTroll(); ) ;
28017: LD_STRING displayTroll();
28019: PPUSH
28020: CALL_OW 559
// wait ( 3 3$00 ) ;
28024: LD_INT 6300
28026: PPUSH
28027: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28031: LD_STRING hideTroll();
28033: PPUSH
28034: CALL_OW 559
// wait ( 1 1$00 ) ;
28038: LD_INT 2100
28040: PPUSH
28041: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28045: LD_STRING displayTroll();
28047: PPUSH
28048: CALL_OW 559
// wait ( 1 1$00 ) ;
28052: LD_INT 2100
28054: PPUSH
28055: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28059: LD_STRING hideTroll();
28061: PPUSH
28062: CALL_OW 559
// end ;
28066: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28067: LD_EXP 48
28071: PUSH
28072: LD_EXP 74
28076: AND
28077: IFFALSE 28140
28079: GO 28081
28081: DISABLE
28082: LD_INT 0
28084: PPUSH
// begin p := 0 ;
28085: LD_ADDR_VAR 0 1
28089: PUSH
28090: LD_INT 0
28092: ST_TO_ADDR
// repeat game_speed := 1 ;
28093: LD_ADDR_OWVAR 65
28097: PUSH
28098: LD_INT 1
28100: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28101: LD_INT 35
28103: PPUSH
28104: CALL_OW 67
// p := p + 1 ;
28108: LD_ADDR_VAR 0 1
28112: PUSH
28113: LD_VAR 0 1
28117: PUSH
28118: LD_INT 1
28120: PLUS
28121: ST_TO_ADDR
// until p >= 60 ;
28122: LD_VAR 0 1
28126: PUSH
28127: LD_INT 60
28129: GREATEREQUAL
28130: IFFALSE 28093
// game_speed := 4 ;
28132: LD_ADDR_OWVAR 65
28136: PUSH
28137: LD_INT 4
28139: ST_TO_ADDR
// end ;
28140: PPOPN 1
28142: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28143: LD_EXP 48
28147: PUSH
28148: LD_EXP 75
28152: AND
28153: IFFALSE 28299
28155: GO 28157
28157: DISABLE
28158: LD_INT 0
28160: PPUSH
28161: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28162: LD_ADDR_VAR 0 1
28166: PUSH
28167: LD_INT 22
28169: PUSH
28170: LD_OWVAR 2
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 2
28181: PUSH
28182: LD_INT 30
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 30
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PPUSH
28211: CALL_OW 69
28215: ST_TO_ADDR
// if not depot then
28216: LD_VAR 0 1
28220: NOT
28221: IFFALSE 28225
// exit ;
28223: GO 28299
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28225: LD_ADDR_VAR 0 2
28229: PUSH
28230: LD_VAR 0 1
28234: PUSH
28235: LD_INT 1
28237: PPUSH
28238: LD_VAR 0 1
28242: PPUSH
28243: CALL_OW 12
28247: ARRAY
28248: PPUSH
28249: CALL_OW 274
28253: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28254: LD_VAR 0 2
28258: PPUSH
28259: LD_INT 1
28261: PPUSH
28262: LD_INT 0
28264: PPUSH
28265: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28269: LD_VAR 0 2
28273: PPUSH
28274: LD_INT 2
28276: PPUSH
28277: LD_INT 0
28279: PPUSH
28280: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28284: LD_VAR 0 2
28288: PPUSH
28289: LD_INT 3
28291: PPUSH
28292: LD_INT 0
28294: PPUSH
28295: CALL_OW 277
// end ;
28299: PPOPN 2
28301: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28302: LD_EXP 48
28306: PUSH
28307: LD_EXP 76
28311: AND
28312: IFFALSE 28409
28314: GO 28316
28316: DISABLE
28317: LD_INT 0
28319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28320: LD_ADDR_VAR 0 1
28324: PUSH
28325: LD_INT 22
28327: PUSH
28328: LD_OWVAR 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 21
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 3
28349: PUSH
28350: LD_INT 23
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: LIST
28368: PPUSH
28369: CALL_OW 69
28373: ST_TO_ADDR
// if not tmp then
28374: LD_VAR 0 1
28378: NOT
28379: IFFALSE 28383
// exit ;
28381: GO 28409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28383: LD_VAR 0 1
28387: PUSH
28388: LD_INT 1
28390: PPUSH
28391: LD_VAR 0 1
28395: PPUSH
28396: CALL_OW 12
28400: ARRAY
28401: PPUSH
28402: LD_INT 200
28404: PPUSH
28405: CALL_OW 234
// end ;
28409: PPOPN 1
28411: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28412: LD_EXP 48
28416: PUSH
28417: LD_EXP 77
28421: AND
28422: IFFALSE 28501
28424: GO 28426
28426: DISABLE
28427: LD_INT 0
28429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28430: LD_ADDR_VAR 0 1
28434: PUSH
28435: LD_INT 22
28437: PUSH
28438: LD_OWVAR 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 21
28449: PUSH
28450: LD_INT 2
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: ST_TO_ADDR
// if not tmp then
28466: LD_VAR 0 1
28470: NOT
28471: IFFALSE 28475
// exit ;
28473: GO 28501
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28475: LD_VAR 0 1
28479: PUSH
28480: LD_INT 1
28482: PPUSH
28483: LD_VAR 0 1
28487: PPUSH
28488: CALL_OW 12
28492: ARRAY
28493: PPUSH
28494: LD_INT 60
28496: PPUSH
28497: CALL_OW 234
// end ;
28501: PPOPN 1
28503: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28504: LD_EXP 48
28508: PUSH
28509: LD_EXP 78
28513: AND
28514: IFFALSE 28613
28516: GO 28518
28518: DISABLE
28519: LD_INT 0
28521: PPUSH
28522: PPUSH
// begin enable ;
28523: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28524: LD_ADDR_VAR 0 1
28528: PUSH
28529: LD_INT 22
28531: PUSH
28532: LD_OWVAR 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 61
28543: PUSH
28544: EMPTY
28545: LIST
28546: PUSH
28547: LD_INT 33
28549: PUSH
28550: LD_INT 2
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: LIST
28561: PPUSH
28562: CALL_OW 69
28566: ST_TO_ADDR
// if not tmp then
28567: LD_VAR 0 1
28571: NOT
28572: IFFALSE 28576
// exit ;
28574: GO 28613
// for i in tmp do
28576: LD_ADDR_VAR 0 2
28580: PUSH
28581: LD_VAR 0 1
28585: PUSH
28586: FOR_IN
28587: IFFALSE 28611
// if IsControledBy ( i ) then
28589: LD_VAR 0 2
28593: PPUSH
28594: CALL_OW 312
28598: IFFALSE 28609
// ComUnlink ( i ) ;
28600: LD_VAR 0 2
28604: PPUSH
28605: CALL_OW 136
28609: GO 28586
28611: POP
28612: POP
// end ;
28613: PPOPN 2
28615: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28616: LD_EXP 48
28620: PUSH
28621: LD_EXP 79
28625: AND
28626: IFFALSE 28766
28628: GO 28630
28630: DISABLE
28631: LD_INT 0
28633: PPUSH
28634: PPUSH
// begin ToLua ( displayPowell(); ) ;
28635: LD_STRING displayPowell();
28637: PPUSH
28638: CALL_OW 559
// uc_side := 0 ;
28642: LD_ADDR_OWVAR 20
28646: PUSH
28647: LD_INT 0
28649: ST_TO_ADDR
// uc_nation := 2 ;
28650: LD_ADDR_OWVAR 21
28654: PUSH
28655: LD_INT 2
28657: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28658: LD_ADDR_OWVAR 37
28662: PUSH
28663: LD_INT 14
28665: ST_TO_ADDR
// vc_engine := engine_siberite ;
28666: LD_ADDR_OWVAR 39
28670: PUSH
28671: LD_INT 3
28673: ST_TO_ADDR
// vc_control := control_apeman ;
28674: LD_ADDR_OWVAR 38
28678: PUSH
28679: LD_INT 5
28681: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28682: LD_ADDR_OWVAR 40
28686: PUSH
28687: LD_INT 29
28689: ST_TO_ADDR
// un := CreateVehicle ;
28690: LD_ADDR_VAR 0 2
28694: PUSH
28695: CALL_OW 45
28699: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28700: LD_VAR 0 2
28704: PPUSH
28705: LD_INT 1
28707: PPUSH
28708: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28712: LD_INT 35
28714: PPUSH
28715: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28719: LD_VAR 0 2
28723: PPUSH
28724: LD_INT 22
28726: PUSH
28727: LD_OWVAR 2
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PPUSH
28736: CALL_OW 69
28740: PPUSH
28741: LD_VAR 0 2
28745: PPUSH
28746: CALL_OW 74
28750: PPUSH
28751: CALL_OW 115
// until IsDead ( un ) ;
28755: LD_VAR 0 2
28759: PPUSH
28760: CALL_OW 301
28764: IFFALSE 28712
// end ;
28766: PPOPN 2
28768: END
// every 0 0$1 trigger StreamModeActive and sStu do
28769: LD_EXP 48
28773: PUSH
28774: LD_EXP 87
28778: AND
28779: IFFALSE 28795
28781: GO 28783
28783: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28784: LD_STRING displayStucuk();
28786: PPUSH
28787: CALL_OW 559
// ResetFog ;
28791: CALL_OW 335
// end ;
28795: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28796: LD_EXP 48
28800: PUSH
28801: LD_EXP 80
28805: AND
28806: IFFALSE 28947
28808: GO 28810
28810: DISABLE
28811: LD_INT 0
28813: PPUSH
28814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28815: LD_ADDR_VAR 0 2
28819: PUSH
28820: LD_INT 22
28822: PUSH
28823: LD_OWVAR 2
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 21
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PPUSH
28846: CALL_OW 69
28850: ST_TO_ADDR
// if not tmp then
28851: LD_VAR 0 2
28855: NOT
28856: IFFALSE 28860
// exit ;
28858: GO 28947
// un := tmp [ rand ( 1 , tmp ) ] ;
28860: LD_ADDR_VAR 0 1
28864: PUSH
28865: LD_VAR 0 2
28869: PUSH
28870: LD_INT 1
28872: PPUSH
28873: LD_VAR 0 2
28877: PPUSH
28878: CALL_OW 12
28882: ARRAY
28883: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28884: LD_VAR 0 1
28888: PPUSH
28889: LD_INT 0
28891: PPUSH
28892: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28896: LD_VAR 0 1
28900: PPUSH
28901: LD_OWVAR 3
28905: PUSH
28906: LD_VAR 0 1
28910: DIFF
28911: PPUSH
28912: LD_VAR 0 1
28916: PPUSH
28917: CALL_OW 74
28921: PPUSH
28922: CALL_OW 115
// wait ( 0 0$20 ) ;
28926: LD_INT 700
28928: PPUSH
28929: CALL_OW 67
// SetSide ( un , your_side ) ;
28933: LD_VAR 0 1
28937: PPUSH
28938: LD_OWVAR 2
28942: PPUSH
28943: CALL_OW 235
// end ;
28947: PPOPN 2
28949: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28950: LD_EXP 48
28954: PUSH
28955: LD_EXP 81
28959: AND
28960: IFFALSE 29066
28962: GO 28964
28964: DISABLE
28965: LD_INT 0
28967: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28968: LD_ADDR_VAR 0 1
28972: PUSH
28973: LD_INT 22
28975: PUSH
28976: LD_OWVAR 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 2
28987: PUSH
28988: LD_INT 30
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 30
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: LIST
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PPUSH
29017: CALL_OW 69
29021: ST_TO_ADDR
// if not depot then
29022: LD_VAR 0 1
29026: NOT
29027: IFFALSE 29031
// exit ;
29029: GO 29066
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29031: LD_VAR 0 1
29035: PUSH
29036: LD_INT 1
29038: ARRAY
29039: PPUSH
29040: CALL_OW 250
29044: PPUSH
29045: LD_VAR 0 1
29049: PUSH
29050: LD_INT 1
29052: ARRAY
29053: PPUSH
29054: CALL_OW 251
29058: PPUSH
29059: LD_INT 70
29061: PPUSH
29062: CALL_OW 495
// end ;
29066: PPOPN 1
29068: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29069: LD_EXP 48
29073: PUSH
29074: LD_EXP 82
29078: AND
29079: IFFALSE 29290
29081: GO 29083
29083: DISABLE
29084: LD_INT 0
29086: PPUSH
29087: PPUSH
29088: PPUSH
29089: PPUSH
29090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29091: LD_ADDR_VAR 0 5
29095: PUSH
29096: LD_INT 22
29098: PUSH
29099: LD_OWVAR 2
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 21
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PPUSH
29122: CALL_OW 69
29126: ST_TO_ADDR
// if not tmp then
29127: LD_VAR 0 5
29131: NOT
29132: IFFALSE 29136
// exit ;
29134: GO 29290
// for i in tmp do
29136: LD_ADDR_VAR 0 1
29140: PUSH
29141: LD_VAR 0 5
29145: PUSH
29146: FOR_IN
29147: IFFALSE 29288
// begin d := rand ( 0 , 5 ) ;
29149: LD_ADDR_VAR 0 4
29153: PUSH
29154: LD_INT 0
29156: PPUSH
29157: LD_INT 5
29159: PPUSH
29160: CALL_OW 12
29164: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29165: LD_ADDR_VAR 0 2
29169: PUSH
29170: LD_VAR 0 1
29174: PPUSH
29175: CALL_OW 250
29179: PPUSH
29180: LD_VAR 0 4
29184: PPUSH
29185: LD_INT 3
29187: PPUSH
29188: LD_INT 12
29190: PPUSH
29191: CALL_OW 12
29195: PPUSH
29196: CALL_OW 272
29200: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29201: LD_ADDR_VAR 0 3
29205: PUSH
29206: LD_VAR 0 1
29210: PPUSH
29211: CALL_OW 251
29215: PPUSH
29216: LD_VAR 0 4
29220: PPUSH
29221: LD_INT 3
29223: PPUSH
29224: LD_INT 12
29226: PPUSH
29227: CALL_OW 12
29231: PPUSH
29232: CALL_OW 273
29236: ST_TO_ADDR
// if ValidHex ( x , y ) then
29237: LD_VAR 0 2
29241: PPUSH
29242: LD_VAR 0 3
29246: PPUSH
29247: CALL_OW 488
29251: IFFALSE 29286
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29253: LD_VAR 0 1
29257: PPUSH
29258: LD_VAR 0 2
29262: PPUSH
29263: LD_VAR 0 3
29267: PPUSH
29268: LD_INT 3
29270: PPUSH
29271: LD_INT 6
29273: PPUSH
29274: CALL_OW 12
29278: PPUSH
29279: LD_INT 1
29281: PPUSH
29282: CALL_OW 483
// end ;
29286: GO 29146
29288: POP
29289: POP
// end ;
29290: PPOPN 5
29292: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29293: LD_EXP 48
29297: PUSH
29298: LD_EXP 83
29302: AND
29303: IFFALSE 29397
29305: GO 29307
29307: DISABLE
29308: LD_INT 0
29310: PPUSH
29311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29312: LD_ADDR_VAR 0 2
29316: PUSH
29317: LD_INT 22
29319: PUSH
29320: LD_OWVAR 2
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 32
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 21
29341: PUSH
29342: LD_INT 2
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: LIST
29353: PPUSH
29354: CALL_OW 69
29358: ST_TO_ADDR
// if not tmp then
29359: LD_VAR 0 2
29363: NOT
29364: IFFALSE 29368
// exit ;
29366: GO 29397
// for i in tmp do
29368: LD_ADDR_VAR 0 1
29372: PUSH
29373: LD_VAR 0 2
29377: PUSH
29378: FOR_IN
29379: IFFALSE 29395
// SetFuel ( i , 0 ) ;
29381: LD_VAR 0 1
29385: PPUSH
29386: LD_INT 0
29388: PPUSH
29389: CALL_OW 240
29393: GO 29378
29395: POP
29396: POP
// end ;
29397: PPOPN 2
29399: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29400: LD_EXP 48
29404: PUSH
29405: LD_EXP 84
29409: AND
29410: IFFALSE 29476
29412: GO 29414
29414: DISABLE
29415: LD_INT 0
29417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29418: LD_ADDR_VAR 0 1
29422: PUSH
29423: LD_INT 22
29425: PUSH
29426: LD_OWVAR 2
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 30
29437: PUSH
29438: LD_INT 29
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PPUSH
29449: CALL_OW 69
29453: ST_TO_ADDR
// if not tmp then
29454: LD_VAR 0 1
29458: NOT
29459: IFFALSE 29463
// exit ;
29461: GO 29476
// DestroyUnit ( tmp [ 1 ] ) ;
29463: LD_VAR 0 1
29467: PUSH
29468: LD_INT 1
29470: ARRAY
29471: PPUSH
29472: CALL_OW 65
// end ;
29476: PPOPN 1
29478: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29479: LD_EXP 48
29483: PUSH
29484: LD_EXP 86
29488: AND
29489: IFFALSE 29618
29491: GO 29493
29493: DISABLE
29494: LD_INT 0
29496: PPUSH
// begin uc_side := 0 ;
29497: LD_ADDR_OWVAR 20
29501: PUSH
29502: LD_INT 0
29504: ST_TO_ADDR
// uc_nation := nation_arabian ;
29505: LD_ADDR_OWVAR 21
29509: PUSH
29510: LD_INT 2
29512: ST_TO_ADDR
// hc_gallery :=  ;
29513: LD_ADDR_OWVAR 33
29517: PUSH
29518: LD_STRING 
29520: ST_TO_ADDR
// hc_name :=  ;
29521: LD_ADDR_OWVAR 26
29525: PUSH
29526: LD_STRING 
29528: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29529: LD_INT 1
29531: PPUSH
29532: LD_INT 11
29534: PPUSH
29535: LD_INT 10
29537: PPUSH
29538: CALL_OW 380
// un := CreateHuman ;
29542: LD_ADDR_VAR 0 1
29546: PUSH
29547: CALL_OW 44
29551: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29552: LD_VAR 0 1
29556: PPUSH
29557: LD_INT 1
29559: PPUSH
29560: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29564: LD_INT 35
29566: PPUSH
29567: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29571: LD_VAR 0 1
29575: PPUSH
29576: LD_INT 22
29578: PUSH
29579: LD_OWVAR 2
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PPUSH
29588: CALL_OW 69
29592: PPUSH
29593: LD_VAR 0 1
29597: PPUSH
29598: CALL_OW 74
29602: PPUSH
29603: CALL_OW 115
// until IsDead ( un ) ;
29607: LD_VAR 0 1
29611: PPUSH
29612: CALL_OW 301
29616: IFFALSE 29564
// end ;
29618: PPOPN 1
29620: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29621: LD_EXP 48
29625: PUSH
29626: LD_EXP 88
29630: AND
29631: IFFALSE 29643
29633: GO 29635
29635: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29636: LD_STRING earthquake(getX(game), 0, 32)
29638: PPUSH
29639: CALL_OW 559
29643: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29644: LD_EXP 48
29648: PUSH
29649: LD_EXP 89
29653: AND
29654: IFFALSE 29745
29656: GO 29658
29658: DISABLE
29659: LD_INT 0
29661: PPUSH
// begin enable ;
29662: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29663: LD_ADDR_VAR 0 1
29667: PUSH
29668: LD_INT 22
29670: PUSH
29671: LD_OWVAR 2
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 21
29682: PUSH
29683: LD_INT 2
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 33
29692: PUSH
29693: LD_INT 3
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: LIST
29704: PPUSH
29705: CALL_OW 69
29709: ST_TO_ADDR
// if not tmp then
29710: LD_VAR 0 1
29714: NOT
29715: IFFALSE 29719
// exit ;
29717: GO 29745
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29719: LD_VAR 0 1
29723: PUSH
29724: LD_INT 1
29726: PPUSH
29727: LD_VAR 0 1
29731: PPUSH
29732: CALL_OW 12
29736: ARRAY
29737: PPUSH
29738: LD_INT 1
29740: PPUSH
29741: CALL_OW 234
// end ;
29745: PPOPN 1
29747: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29748: LD_EXP 48
29752: PUSH
29753: LD_EXP 90
29757: AND
29758: IFFALSE 29899
29760: GO 29762
29762: DISABLE
29763: LD_INT 0
29765: PPUSH
29766: PPUSH
29767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29768: LD_ADDR_VAR 0 3
29772: PUSH
29773: LD_INT 22
29775: PUSH
29776: LD_OWVAR 2
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 25
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PPUSH
29799: CALL_OW 69
29803: ST_TO_ADDR
// if not tmp then
29804: LD_VAR 0 3
29808: NOT
29809: IFFALSE 29813
// exit ;
29811: GO 29899
// un := tmp [ rand ( 1 , tmp ) ] ;
29813: LD_ADDR_VAR 0 2
29817: PUSH
29818: LD_VAR 0 3
29822: PUSH
29823: LD_INT 1
29825: PPUSH
29826: LD_VAR 0 3
29830: PPUSH
29831: CALL_OW 12
29835: ARRAY
29836: ST_TO_ADDR
// if Crawls ( un ) then
29837: LD_VAR 0 2
29841: PPUSH
29842: CALL_OW 318
29846: IFFALSE 29857
// ComWalk ( un ) ;
29848: LD_VAR 0 2
29852: PPUSH
29853: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29857: LD_VAR 0 2
29861: PPUSH
29862: LD_INT 9
29864: PPUSH
29865: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29869: LD_INT 28
29871: PPUSH
29872: LD_OWVAR 2
29876: PPUSH
29877: LD_INT 2
29879: PPUSH
29880: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29884: LD_INT 29
29886: PPUSH
29887: LD_OWVAR 2
29891: PPUSH
29892: LD_INT 2
29894: PPUSH
29895: CALL_OW 322
// end ;
29899: PPOPN 3
29901: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29902: LD_EXP 48
29906: PUSH
29907: LD_EXP 91
29911: AND
29912: IFFALSE 30023
29914: GO 29916
29916: DISABLE
29917: LD_INT 0
29919: PPUSH
29920: PPUSH
29921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29922: LD_ADDR_VAR 0 3
29926: PUSH
29927: LD_INT 22
29929: PUSH
29930: LD_OWVAR 2
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 25
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PPUSH
29953: CALL_OW 69
29957: ST_TO_ADDR
// if not tmp then
29958: LD_VAR 0 3
29962: NOT
29963: IFFALSE 29967
// exit ;
29965: GO 30023
// un := tmp [ rand ( 1 , tmp ) ] ;
29967: LD_ADDR_VAR 0 2
29971: PUSH
29972: LD_VAR 0 3
29976: PUSH
29977: LD_INT 1
29979: PPUSH
29980: LD_VAR 0 3
29984: PPUSH
29985: CALL_OW 12
29989: ARRAY
29990: ST_TO_ADDR
// if Crawls ( un ) then
29991: LD_VAR 0 2
29995: PPUSH
29996: CALL_OW 318
30000: IFFALSE 30011
// ComWalk ( un ) ;
30002: LD_VAR 0 2
30006: PPUSH
30007: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30011: LD_VAR 0 2
30015: PPUSH
30016: LD_INT 8
30018: PPUSH
30019: CALL_OW 336
// end ;
30023: PPOPN 3
30025: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30026: LD_EXP 48
30030: PUSH
30031: LD_EXP 92
30035: AND
30036: IFFALSE 30180
30038: GO 30040
30040: DISABLE
30041: LD_INT 0
30043: PPUSH
30044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30045: LD_ADDR_VAR 0 2
30049: PUSH
30050: LD_INT 22
30052: PUSH
30053: LD_OWVAR 2
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 21
30064: PUSH
30065: LD_INT 2
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 2
30074: PUSH
30075: LD_INT 34
30077: PUSH
30078: LD_INT 12
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 34
30087: PUSH
30088: LD_INT 51
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 34
30097: PUSH
30098: LD_INT 32
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: PPUSH
30116: CALL_OW 69
30120: ST_TO_ADDR
// if not tmp then
30121: LD_VAR 0 2
30125: NOT
30126: IFFALSE 30130
// exit ;
30128: GO 30180
// for i in tmp do
30130: LD_ADDR_VAR 0 1
30134: PUSH
30135: LD_VAR 0 2
30139: PUSH
30140: FOR_IN
30141: IFFALSE 30178
// if GetCargo ( i , mat_artifact ) = 0 then
30143: LD_VAR 0 1
30147: PPUSH
30148: LD_INT 4
30150: PPUSH
30151: CALL_OW 289
30155: PUSH
30156: LD_INT 0
30158: EQUAL
30159: IFFALSE 30176
// SetCargo ( i , mat_siberit , 100 ) ;
30161: LD_VAR 0 1
30165: PPUSH
30166: LD_INT 3
30168: PPUSH
30169: LD_INT 100
30171: PPUSH
30172: CALL_OW 290
30176: GO 30140
30178: POP
30179: POP
// end ;
30180: PPOPN 2
30182: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30183: LD_EXP 48
30187: PUSH
30188: LD_EXP 93
30192: AND
30193: IFFALSE 30376
30195: GO 30197
30197: DISABLE
30198: LD_INT 0
30200: PPUSH
30201: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30202: LD_ADDR_VAR 0 2
30206: PUSH
30207: LD_INT 22
30209: PUSH
30210: LD_OWVAR 2
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PPUSH
30219: CALL_OW 69
30223: ST_TO_ADDR
// if not tmp then
30224: LD_VAR 0 2
30228: NOT
30229: IFFALSE 30233
// exit ;
30231: GO 30376
// for i := 1 to 2 do
30233: LD_ADDR_VAR 0 1
30237: PUSH
30238: DOUBLE
30239: LD_INT 1
30241: DEC
30242: ST_TO_ADDR
30243: LD_INT 2
30245: PUSH
30246: FOR_TO
30247: IFFALSE 30374
// begin uc_side := your_side ;
30249: LD_ADDR_OWVAR 20
30253: PUSH
30254: LD_OWVAR 2
30258: ST_TO_ADDR
// uc_nation := nation_american ;
30259: LD_ADDR_OWVAR 21
30263: PUSH
30264: LD_INT 1
30266: ST_TO_ADDR
// vc_chassis := us_morphling ;
30267: LD_ADDR_OWVAR 37
30271: PUSH
30272: LD_INT 5
30274: ST_TO_ADDR
// vc_engine := engine_siberite ;
30275: LD_ADDR_OWVAR 39
30279: PUSH
30280: LD_INT 3
30282: ST_TO_ADDR
// vc_control := control_computer ;
30283: LD_ADDR_OWVAR 38
30287: PUSH
30288: LD_INT 3
30290: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30291: LD_ADDR_OWVAR 40
30295: PUSH
30296: LD_INT 10
30298: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30299: LD_VAR 0 2
30303: PUSH
30304: LD_INT 1
30306: ARRAY
30307: PPUSH
30308: CALL_OW 310
30312: NOT
30313: IFFALSE 30360
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30315: CALL_OW 45
30319: PPUSH
30320: LD_VAR 0 2
30324: PUSH
30325: LD_INT 1
30327: ARRAY
30328: PPUSH
30329: CALL_OW 250
30333: PPUSH
30334: LD_VAR 0 2
30338: PUSH
30339: LD_INT 1
30341: ARRAY
30342: PPUSH
30343: CALL_OW 251
30347: PPUSH
30348: LD_INT 12
30350: PPUSH
30351: LD_INT 1
30353: PPUSH
30354: CALL_OW 50
30358: GO 30372
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30360: CALL_OW 45
30364: PPUSH
30365: LD_INT 1
30367: PPUSH
30368: CALL_OW 51
// end ;
30372: GO 30246
30374: POP
30375: POP
// end ;
30376: PPOPN 2
30378: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30379: LD_EXP 48
30383: PUSH
30384: LD_EXP 94
30388: AND
30389: IFFALSE 30611
30391: GO 30393
30393: DISABLE
30394: LD_INT 0
30396: PPUSH
30397: PPUSH
30398: PPUSH
30399: PPUSH
30400: PPUSH
30401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30402: LD_ADDR_VAR 0 6
30406: PUSH
30407: LD_INT 22
30409: PUSH
30410: LD_OWVAR 2
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 21
30421: PUSH
30422: LD_INT 1
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: LD_INT 23
30434: PUSH
30435: LD_INT 0
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: PPUSH
30451: CALL_OW 69
30455: ST_TO_ADDR
// if not tmp then
30456: LD_VAR 0 6
30460: NOT
30461: IFFALSE 30465
// exit ;
30463: GO 30611
// s1 := rand ( 1 , 4 ) ;
30465: LD_ADDR_VAR 0 2
30469: PUSH
30470: LD_INT 1
30472: PPUSH
30473: LD_INT 4
30475: PPUSH
30476: CALL_OW 12
30480: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30481: LD_ADDR_VAR 0 4
30485: PUSH
30486: LD_VAR 0 6
30490: PUSH
30491: LD_INT 1
30493: ARRAY
30494: PPUSH
30495: LD_VAR 0 2
30499: PPUSH
30500: CALL_OW 259
30504: ST_TO_ADDR
// if s1 = 1 then
30505: LD_VAR 0 2
30509: PUSH
30510: LD_INT 1
30512: EQUAL
30513: IFFALSE 30533
// s2 := rand ( 2 , 4 ) else
30515: LD_ADDR_VAR 0 3
30519: PUSH
30520: LD_INT 2
30522: PPUSH
30523: LD_INT 4
30525: PPUSH
30526: CALL_OW 12
30530: ST_TO_ADDR
30531: GO 30541
// s2 := 1 ;
30533: LD_ADDR_VAR 0 3
30537: PUSH
30538: LD_INT 1
30540: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30541: LD_ADDR_VAR 0 5
30545: PUSH
30546: LD_VAR 0 6
30550: PUSH
30551: LD_INT 1
30553: ARRAY
30554: PPUSH
30555: LD_VAR 0 3
30559: PPUSH
30560: CALL_OW 259
30564: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30565: LD_VAR 0 6
30569: PUSH
30570: LD_INT 1
30572: ARRAY
30573: PPUSH
30574: LD_VAR 0 2
30578: PPUSH
30579: LD_VAR 0 5
30583: PPUSH
30584: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30588: LD_VAR 0 6
30592: PUSH
30593: LD_INT 1
30595: ARRAY
30596: PPUSH
30597: LD_VAR 0 3
30601: PPUSH
30602: LD_VAR 0 4
30606: PPUSH
30607: CALL_OW 237
// end ;
30611: PPOPN 6
30613: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30614: LD_EXP 48
30618: PUSH
30619: LD_EXP 95
30623: AND
30624: IFFALSE 30703
30626: GO 30628
30628: DISABLE
30629: LD_INT 0
30631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30632: LD_ADDR_VAR 0 1
30636: PUSH
30637: LD_INT 22
30639: PUSH
30640: LD_OWVAR 2
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 30
30651: PUSH
30652: LD_INT 3
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PPUSH
30663: CALL_OW 69
30667: ST_TO_ADDR
// if not tmp then
30668: LD_VAR 0 1
30672: NOT
30673: IFFALSE 30677
// exit ;
30675: GO 30703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30677: LD_VAR 0 1
30681: PUSH
30682: LD_INT 1
30684: PPUSH
30685: LD_VAR 0 1
30689: PPUSH
30690: CALL_OW 12
30694: ARRAY
30695: PPUSH
30696: LD_INT 1
30698: PPUSH
30699: CALL_OW 234
// end ;
30703: PPOPN 1
30705: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30706: LD_EXP 48
30710: PUSH
30711: LD_EXP 96
30715: AND
30716: IFFALSE 30828
30718: GO 30720
30720: DISABLE
30721: LD_INT 0
30723: PPUSH
30724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30725: LD_ADDR_VAR 0 2
30729: PUSH
30730: LD_INT 22
30732: PUSH
30733: LD_OWVAR 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 2
30744: PUSH
30745: LD_INT 30
30747: PUSH
30748: LD_INT 27
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 30
30757: PUSH
30758: LD_INT 26
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 30
30767: PUSH
30768: LD_INT 28
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PPUSH
30785: CALL_OW 69
30789: ST_TO_ADDR
// if not tmp then
30790: LD_VAR 0 2
30794: NOT
30795: IFFALSE 30799
// exit ;
30797: GO 30828
// for i in tmp do
30799: LD_ADDR_VAR 0 1
30803: PUSH
30804: LD_VAR 0 2
30808: PUSH
30809: FOR_IN
30810: IFFALSE 30826
// SetLives ( i , 1 ) ;
30812: LD_VAR 0 1
30816: PPUSH
30817: LD_INT 1
30819: PPUSH
30820: CALL_OW 234
30824: GO 30809
30826: POP
30827: POP
// end ;
30828: PPOPN 2
30830: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30831: LD_EXP 48
30835: PUSH
30836: LD_EXP 97
30840: AND
30841: IFFALSE 31128
30843: GO 30845
30845: DISABLE
30846: LD_INT 0
30848: PPUSH
30849: PPUSH
30850: PPUSH
// begin i := rand ( 1 , 7 ) ;
30851: LD_ADDR_VAR 0 1
30855: PUSH
30856: LD_INT 1
30858: PPUSH
30859: LD_INT 7
30861: PPUSH
30862: CALL_OW 12
30866: ST_TO_ADDR
// case i of 1 :
30867: LD_VAR 0 1
30871: PUSH
30872: LD_INT 1
30874: DOUBLE
30875: EQUAL
30876: IFTRUE 30880
30878: GO 30890
30880: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30881: LD_STRING earthquake(getX(game), 0, 32)
30883: PPUSH
30884: CALL_OW 559
30888: GO 31128
30890: LD_INT 2
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30898
30896: GO 30912
30898: POP
// begin ToLua ( displayStucuk(); ) ;
30899: LD_STRING displayStucuk();
30901: PPUSH
30902: CALL_OW 559
// ResetFog ;
30906: CALL_OW 335
// end ; 3 :
30910: GO 31128
30912: LD_INT 3
30914: DOUBLE
30915: EQUAL
30916: IFTRUE 30920
30918: GO 31024
30920: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30921: LD_ADDR_VAR 0 2
30925: PUSH
30926: LD_INT 22
30928: PUSH
30929: LD_OWVAR 2
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 25
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PPUSH
30952: CALL_OW 69
30956: ST_TO_ADDR
// if not tmp then
30957: LD_VAR 0 2
30961: NOT
30962: IFFALSE 30966
// exit ;
30964: GO 31128
// un := tmp [ rand ( 1 , tmp ) ] ;
30966: LD_ADDR_VAR 0 3
30970: PUSH
30971: LD_VAR 0 2
30975: PUSH
30976: LD_INT 1
30978: PPUSH
30979: LD_VAR 0 2
30983: PPUSH
30984: CALL_OW 12
30988: ARRAY
30989: ST_TO_ADDR
// if Crawls ( un ) then
30990: LD_VAR 0 3
30994: PPUSH
30995: CALL_OW 318
30999: IFFALSE 31010
// ComWalk ( un ) ;
31001: LD_VAR 0 3
31005: PPUSH
31006: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31010: LD_VAR 0 3
31014: PPUSH
31015: LD_INT 8
31017: PPUSH
31018: CALL_OW 336
// end ; 4 :
31022: GO 31128
31024: LD_INT 4
31026: DOUBLE
31027: EQUAL
31028: IFTRUE 31032
31030: GO 31106
31032: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31033: LD_ADDR_VAR 0 2
31037: PUSH
31038: LD_INT 22
31040: PUSH
31041: LD_OWVAR 2
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 30
31052: PUSH
31053: LD_INT 29
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PPUSH
31064: CALL_OW 69
31068: ST_TO_ADDR
// if not tmp then
31069: LD_VAR 0 2
31073: NOT
31074: IFFALSE 31078
// exit ;
31076: GO 31128
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31078: LD_VAR 0 2
31082: PUSH
31083: LD_INT 1
31085: ARRAY
31086: PPUSH
31087: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31091: LD_VAR 0 2
31095: PUSH
31096: LD_INT 1
31098: ARRAY
31099: PPUSH
31100: CALL_OW 65
// end ; 5 .. 7 :
31104: GO 31128
31106: LD_INT 5
31108: DOUBLE
31109: GREATEREQUAL
31110: IFFALSE 31118
31112: LD_INT 7
31114: DOUBLE
31115: LESSEQUAL
31116: IFTRUE 31120
31118: GO 31127
31120: POP
// StreamSibBomb ; end ;
31121: CALL 27365 0 0
31125: GO 31128
31127: POP
// end ;
31128: PPOPN 3
31130: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31131: LD_EXP 48
31135: PUSH
31136: LD_EXP 98
31140: AND
31141: IFFALSE 31297
31143: GO 31145
31145: DISABLE
31146: LD_INT 0
31148: PPUSH
31149: PPUSH
31150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31151: LD_ADDR_VAR 0 2
31155: PUSH
31156: LD_INT 81
31158: PUSH
31159: LD_OWVAR 2
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 2
31170: PUSH
31171: LD_INT 21
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 21
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: LIST
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PPUSH
31200: CALL_OW 69
31204: ST_TO_ADDR
// if not tmp then
31205: LD_VAR 0 2
31209: NOT
31210: IFFALSE 31214
// exit ;
31212: GO 31297
// p := 0 ;
31214: LD_ADDR_VAR 0 3
31218: PUSH
31219: LD_INT 0
31221: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31222: LD_INT 35
31224: PPUSH
31225: CALL_OW 67
// p := p + 1 ;
31229: LD_ADDR_VAR 0 3
31233: PUSH
31234: LD_VAR 0 3
31238: PUSH
31239: LD_INT 1
31241: PLUS
31242: ST_TO_ADDR
// for i in tmp do
31243: LD_ADDR_VAR 0 1
31247: PUSH
31248: LD_VAR 0 2
31252: PUSH
31253: FOR_IN
31254: IFFALSE 31285
// if GetLives ( i ) < 1000 then
31256: LD_VAR 0 1
31260: PPUSH
31261: CALL_OW 256
31265: PUSH
31266: LD_INT 1000
31268: LESS
31269: IFFALSE 31283
// SetLives ( i , 1000 ) ;
31271: LD_VAR 0 1
31275: PPUSH
31276: LD_INT 1000
31278: PPUSH
31279: CALL_OW 234
31283: GO 31253
31285: POP
31286: POP
// until p > 20 ;
31287: LD_VAR 0 3
31291: PUSH
31292: LD_INT 20
31294: GREATER
31295: IFFALSE 31222
// end ;
31297: PPOPN 3
31299: END
// every 0 0$1 trigger StreamModeActive and sTime do
31300: LD_EXP 48
31304: PUSH
31305: LD_EXP 99
31309: AND
31310: IFFALSE 31345
31312: GO 31314
31314: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31315: LD_INT 28
31317: PPUSH
31318: LD_OWVAR 2
31322: PPUSH
31323: LD_INT 2
31325: PPUSH
31326: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31330: LD_INT 30
31332: PPUSH
31333: LD_OWVAR 2
31337: PPUSH
31338: LD_INT 2
31340: PPUSH
31341: CALL_OW 322
// end ;
31345: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31346: LD_EXP 48
31350: PUSH
31351: LD_EXP 100
31355: AND
31356: IFFALSE 31477
31358: GO 31360
31360: DISABLE
31361: LD_INT 0
31363: PPUSH
31364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31365: LD_ADDR_VAR 0 2
31369: PUSH
31370: LD_INT 22
31372: PUSH
31373: LD_OWVAR 2
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 21
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 3
31394: PUSH
31395: LD_INT 23
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: PPUSH
31414: CALL_OW 69
31418: ST_TO_ADDR
// if not tmp then
31419: LD_VAR 0 2
31423: NOT
31424: IFFALSE 31428
// exit ;
31426: GO 31477
// for i in tmp do
31428: LD_ADDR_VAR 0 1
31432: PUSH
31433: LD_VAR 0 2
31437: PUSH
31438: FOR_IN
31439: IFFALSE 31475
// begin if Crawls ( i ) then
31441: LD_VAR 0 1
31445: PPUSH
31446: CALL_OW 318
31450: IFFALSE 31461
// ComWalk ( i ) ;
31452: LD_VAR 0 1
31456: PPUSH
31457: CALL_OW 138
// SetClass ( i , 2 ) ;
31461: LD_VAR 0 1
31465: PPUSH
31466: LD_INT 2
31468: PPUSH
31469: CALL_OW 336
// end ;
31473: GO 31438
31475: POP
31476: POP
// end ;
31477: PPOPN 2
31479: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31480: LD_EXP 48
31484: PUSH
31485: LD_EXP 101
31489: AND
31490: IFFALSE 31778
31492: GO 31494
31494: DISABLE
31495: LD_INT 0
31497: PPUSH
31498: PPUSH
31499: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31500: LD_OWVAR 2
31504: PPUSH
31505: LD_INT 9
31507: PPUSH
31508: LD_INT 1
31510: PPUSH
31511: LD_INT 1
31513: PPUSH
31514: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31518: LD_INT 9
31520: PPUSH
31521: LD_OWVAR 2
31525: PPUSH
31526: CALL_OW 343
// uc_side := 9 ;
31530: LD_ADDR_OWVAR 20
31534: PUSH
31535: LD_INT 9
31537: ST_TO_ADDR
// uc_nation := 2 ;
31538: LD_ADDR_OWVAR 21
31542: PUSH
31543: LD_INT 2
31545: ST_TO_ADDR
// hc_name := Dark Warrior ;
31546: LD_ADDR_OWVAR 26
31550: PUSH
31551: LD_STRING Dark Warrior
31553: ST_TO_ADDR
// hc_gallery :=  ;
31554: LD_ADDR_OWVAR 33
31558: PUSH
31559: LD_STRING 
31561: ST_TO_ADDR
// hc_noskilllimit := true ;
31562: LD_ADDR_OWVAR 76
31566: PUSH
31567: LD_INT 1
31569: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31570: LD_ADDR_OWVAR 31
31574: PUSH
31575: LD_INT 30
31577: PUSH
31578: LD_INT 30
31580: PUSH
31581: LD_INT 30
31583: PUSH
31584: LD_INT 30
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: ST_TO_ADDR
// un := CreateHuman ;
31593: LD_ADDR_VAR 0 3
31597: PUSH
31598: CALL_OW 44
31602: ST_TO_ADDR
// hc_noskilllimit := false ;
31603: LD_ADDR_OWVAR 76
31607: PUSH
31608: LD_INT 0
31610: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31611: LD_VAR 0 3
31615: PPUSH
31616: LD_INT 1
31618: PPUSH
31619: CALL_OW 51
// ToLua ( playRanger() ) ;
31623: LD_STRING playRanger()
31625: PPUSH
31626: CALL_OW 559
// p := 0 ;
31630: LD_ADDR_VAR 0 2
31634: PUSH
31635: LD_INT 0
31637: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31638: LD_INT 35
31640: PPUSH
31641: CALL_OW 67
// p := p + 1 ;
31645: LD_ADDR_VAR 0 2
31649: PUSH
31650: LD_VAR 0 2
31654: PUSH
31655: LD_INT 1
31657: PLUS
31658: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31659: LD_VAR 0 3
31663: PPUSH
31664: CALL_OW 256
31668: PUSH
31669: LD_INT 1000
31671: LESS
31672: IFFALSE 31686
// SetLives ( un , 1000 ) ;
31674: LD_VAR 0 3
31678: PPUSH
31679: LD_INT 1000
31681: PPUSH
31682: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31686: LD_VAR 0 3
31690: PPUSH
31691: LD_INT 81
31693: PUSH
31694: LD_OWVAR 2
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 91
31705: PUSH
31706: LD_VAR 0 3
31710: PUSH
31711: LD_INT 30
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: LIST
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PPUSH
31723: CALL_OW 69
31727: PPUSH
31728: LD_VAR 0 3
31732: PPUSH
31733: CALL_OW 74
31737: PPUSH
31738: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31742: LD_VAR 0 2
31746: PUSH
31747: LD_INT 80
31749: GREATER
31750: PUSH
31751: LD_VAR 0 3
31755: PPUSH
31756: CALL_OW 301
31760: OR
31761: IFFALSE 31638
// if un then
31763: LD_VAR 0 3
31767: IFFALSE 31778
// RemoveUnit ( un ) ;
31769: LD_VAR 0 3
31773: PPUSH
31774: CALL_OW 64
// end ;
31778: PPOPN 3
31780: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31781: LD_EXP 102
31785: IFFALSE 31901
31787: GO 31789
31789: DISABLE
31790: LD_INT 0
31792: PPUSH
31793: PPUSH
31794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31795: LD_ADDR_VAR 0 2
31799: PUSH
31800: LD_INT 81
31802: PUSH
31803: LD_OWVAR 2
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 21
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PPUSH
31826: CALL_OW 69
31830: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31831: LD_STRING playComputer()
31833: PPUSH
31834: CALL_OW 559
// if not tmp then
31838: LD_VAR 0 2
31842: NOT
31843: IFFALSE 31847
// exit ;
31845: GO 31901
// for i in tmp do
31847: LD_ADDR_VAR 0 1
31851: PUSH
31852: LD_VAR 0 2
31856: PUSH
31857: FOR_IN
31858: IFFALSE 31899
// for j := 1 to 4 do
31860: LD_ADDR_VAR 0 3
31864: PUSH
31865: DOUBLE
31866: LD_INT 1
31868: DEC
31869: ST_TO_ADDR
31870: LD_INT 4
31872: PUSH
31873: FOR_TO
31874: IFFALSE 31895
// SetSkill ( i , j , 10 ) ;
31876: LD_VAR 0 1
31880: PPUSH
31881: LD_VAR 0 3
31885: PPUSH
31886: LD_INT 10
31888: PPUSH
31889: CALL_OW 237
31893: GO 31873
31895: POP
31896: POP
31897: GO 31857
31899: POP
31900: POP
// end ;
31901: PPOPN 3
31903: END
// every 0 0$1 trigger s30 do var i , tmp ;
31904: LD_EXP 103
31908: IFFALSE 31977
31910: GO 31912
31912: DISABLE
31913: LD_INT 0
31915: PPUSH
31916: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31917: LD_ADDR_VAR 0 2
31921: PUSH
31922: LD_INT 22
31924: PUSH
31925: LD_OWVAR 2
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PPUSH
31934: CALL_OW 69
31938: ST_TO_ADDR
// if not tmp then
31939: LD_VAR 0 2
31943: NOT
31944: IFFALSE 31948
// exit ;
31946: GO 31977
// for i in tmp do
31948: LD_ADDR_VAR 0 1
31952: PUSH
31953: LD_VAR 0 2
31957: PUSH
31958: FOR_IN
31959: IFFALSE 31975
// SetLives ( i , 300 ) ;
31961: LD_VAR 0 1
31965: PPUSH
31966: LD_INT 300
31968: PPUSH
31969: CALL_OW 234
31973: GO 31958
31975: POP
31976: POP
// end ;
31977: PPOPN 2
31979: END
// every 0 0$1 trigger s60 do var i , tmp ;
31980: LD_EXP 104
31984: IFFALSE 32053
31986: GO 31988
31988: DISABLE
31989: LD_INT 0
31991: PPUSH
31992: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31993: LD_ADDR_VAR 0 2
31997: PUSH
31998: LD_INT 22
32000: PUSH
32001: LD_OWVAR 2
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PPUSH
32010: CALL_OW 69
32014: ST_TO_ADDR
// if not tmp then
32015: LD_VAR 0 2
32019: NOT
32020: IFFALSE 32024
// exit ;
32022: GO 32053
// for i in tmp do
32024: LD_ADDR_VAR 0 1
32028: PUSH
32029: LD_VAR 0 2
32033: PUSH
32034: FOR_IN
32035: IFFALSE 32051
// SetLives ( i , 600 ) ;
32037: LD_VAR 0 1
32041: PPUSH
32042: LD_INT 600
32044: PPUSH
32045: CALL_OW 234
32049: GO 32034
32051: POP
32052: POP
// end ;
32053: PPOPN 2
32055: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32056: LD_INT 0
32058: PPUSH
// case cmd of 301 :
32059: LD_VAR 0 1
32063: PUSH
32064: LD_INT 301
32066: DOUBLE
32067: EQUAL
32068: IFTRUE 32072
32070: GO 32104
32072: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32073: LD_VAR 0 6
32077: PPUSH
32078: LD_VAR 0 7
32082: PPUSH
32083: LD_VAR 0 8
32087: PPUSH
32088: LD_VAR 0 4
32092: PPUSH
32093: LD_VAR 0 5
32097: PPUSH
32098: CALL 33305 0 5
32102: GO 32225
32104: LD_INT 302
32106: DOUBLE
32107: EQUAL
32108: IFTRUE 32112
32110: GO 32149
32112: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32113: LD_VAR 0 6
32117: PPUSH
32118: LD_VAR 0 7
32122: PPUSH
32123: LD_VAR 0 8
32127: PPUSH
32128: LD_VAR 0 9
32132: PPUSH
32133: LD_VAR 0 4
32137: PPUSH
32138: LD_VAR 0 5
32142: PPUSH
32143: CALL 33396 0 6
32147: GO 32225
32149: LD_INT 303
32151: DOUBLE
32152: EQUAL
32153: IFTRUE 32157
32155: GO 32194
32157: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32158: LD_VAR 0 6
32162: PPUSH
32163: LD_VAR 0 7
32167: PPUSH
32168: LD_VAR 0 8
32172: PPUSH
32173: LD_VAR 0 9
32177: PPUSH
32178: LD_VAR 0 4
32182: PPUSH
32183: LD_VAR 0 5
32187: PPUSH
32188: CALL 32230 0 6
32192: GO 32225
32194: LD_INT 304
32196: DOUBLE
32197: EQUAL
32198: IFTRUE 32202
32200: GO 32224
32202: POP
// hHackTeleport ( unit , x , y ) ; end ;
32203: LD_VAR 0 2
32207: PPUSH
32208: LD_VAR 0 4
32212: PPUSH
32213: LD_VAR 0 5
32217: PPUSH
32218: CALL 33989 0 3
32222: GO 32225
32224: POP
// end ;
32225: LD_VAR 0 12
32229: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32230: LD_INT 0
32232: PPUSH
32233: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32234: LD_VAR 0 1
32238: PUSH
32239: LD_INT 1
32241: LESS
32242: PUSH
32243: LD_VAR 0 1
32247: PUSH
32248: LD_INT 3
32250: GREATER
32251: OR
32252: PUSH
32253: LD_VAR 0 5
32257: PPUSH
32258: LD_VAR 0 6
32262: PPUSH
32263: CALL_OW 428
32267: OR
32268: IFFALSE 32272
// exit ;
32270: GO 32992
// uc_side := your_side ;
32272: LD_ADDR_OWVAR 20
32276: PUSH
32277: LD_OWVAR 2
32281: ST_TO_ADDR
// uc_nation := nation ;
32282: LD_ADDR_OWVAR 21
32286: PUSH
32287: LD_VAR 0 1
32291: ST_TO_ADDR
// bc_level = 1 ;
32292: LD_ADDR_OWVAR 43
32296: PUSH
32297: LD_INT 1
32299: ST_TO_ADDR
// case btype of 1 :
32300: LD_VAR 0 2
32304: PUSH
32305: LD_INT 1
32307: DOUBLE
32308: EQUAL
32309: IFTRUE 32313
32311: GO 32324
32313: POP
// bc_type := b_depot ; 2 :
32314: LD_ADDR_OWVAR 42
32318: PUSH
32319: LD_INT 0
32321: ST_TO_ADDR
32322: GO 32936
32324: LD_INT 2
32326: DOUBLE
32327: EQUAL
32328: IFTRUE 32332
32330: GO 32343
32332: POP
// bc_type := b_warehouse ; 3 :
32333: LD_ADDR_OWVAR 42
32337: PUSH
32338: LD_INT 1
32340: ST_TO_ADDR
32341: GO 32936
32343: LD_INT 3
32345: DOUBLE
32346: EQUAL
32347: IFTRUE 32351
32349: GO 32362
32351: POP
// bc_type := b_lab ; 4 .. 9 :
32352: LD_ADDR_OWVAR 42
32356: PUSH
32357: LD_INT 6
32359: ST_TO_ADDR
32360: GO 32936
32362: LD_INT 4
32364: DOUBLE
32365: GREATEREQUAL
32366: IFFALSE 32374
32368: LD_INT 9
32370: DOUBLE
32371: LESSEQUAL
32372: IFTRUE 32376
32374: GO 32428
32376: POP
// begin bc_type := b_lab_half ;
32377: LD_ADDR_OWVAR 42
32381: PUSH
32382: LD_INT 7
32384: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32385: LD_ADDR_OWVAR 44
32389: PUSH
32390: LD_INT 10
32392: PUSH
32393: LD_INT 11
32395: PUSH
32396: LD_INT 12
32398: PUSH
32399: LD_INT 15
32401: PUSH
32402: LD_INT 14
32404: PUSH
32405: LD_INT 13
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: PUSH
32416: LD_VAR 0 2
32420: PUSH
32421: LD_INT 3
32423: MINUS
32424: ARRAY
32425: ST_TO_ADDR
// end ; 10 .. 13 :
32426: GO 32936
32428: LD_INT 10
32430: DOUBLE
32431: GREATEREQUAL
32432: IFFALSE 32440
32434: LD_INT 13
32436: DOUBLE
32437: LESSEQUAL
32438: IFTRUE 32442
32440: GO 32519
32442: POP
// begin bc_type := b_lab_full ;
32443: LD_ADDR_OWVAR 42
32447: PUSH
32448: LD_INT 8
32450: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32451: LD_ADDR_OWVAR 44
32455: PUSH
32456: LD_INT 10
32458: PUSH
32459: LD_INT 12
32461: PUSH
32462: LD_INT 14
32464: PUSH
32465: LD_INT 13
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: PUSH
32474: LD_VAR 0 2
32478: PUSH
32479: LD_INT 9
32481: MINUS
32482: ARRAY
32483: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32484: LD_ADDR_OWVAR 45
32488: PUSH
32489: LD_INT 11
32491: PUSH
32492: LD_INT 15
32494: PUSH
32495: LD_INT 12
32497: PUSH
32498: LD_INT 15
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: PUSH
32507: LD_VAR 0 2
32511: PUSH
32512: LD_INT 9
32514: MINUS
32515: ARRAY
32516: ST_TO_ADDR
// end ; 14 :
32517: GO 32936
32519: LD_INT 14
32521: DOUBLE
32522: EQUAL
32523: IFTRUE 32527
32525: GO 32538
32527: POP
// bc_type := b_workshop ; 15 :
32528: LD_ADDR_OWVAR 42
32532: PUSH
32533: LD_INT 2
32535: ST_TO_ADDR
32536: GO 32936
32538: LD_INT 15
32540: DOUBLE
32541: EQUAL
32542: IFTRUE 32546
32544: GO 32557
32546: POP
// bc_type := b_factory ; 16 :
32547: LD_ADDR_OWVAR 42
32551: PUSH
32552: LD_INT 3
32554: ST_TO_ADDR
32555: GO 32936
32557: LD_INT 16
32559: DOUBLE
32560: EQUAL
32561: IFTRUE 32565
32563: GO 32576
32565: POP
// bc_type := b_ext_gun ; 17 :
32566: LD_ADDR_OWVAR 42
32570: PUSH
32571: LD_INT 17
32573: ST_TO_ADDR
32574: GO 32936
32576: LD_INT 17
32578: DOUBLE
32579: EQUAL
32580: IFTRUE 32584
32582: GO 32612
32584: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32585: LD_ADDR_OWVAR 42
32589: PUSH
32590: LD_INT 19
32592: PUSH
32593: LD_INT 23
32595: PUSH
32596: LD_INT 19
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: LIST
32603: PUSH
32604: LD_VAR 0 1
32608: ARRAY
32609: ST_TO_ADDR
32610: GO 32936
32612: LD_INT 18
32614: DOUBLE
32615: EQUAL
32616: IFTRUE 32620
32618: GO 32631
32620: POP
// bc_type := b_ext_radar ; 19 :
32621: LD_ADDR_OWVAR 42
32625: PUSH
32626: LD_INT 20
32628: ST_TO_ADDR
32629: GO 32936
32631: LD_INT 19
32633: DOUBLE
32634: EQUAL
32635: IFTRUE 32639
32637: GO 32650
32639: POP
// bc_type := b_ext_radio ; 20 :
32640: LD_ADDR_OWVAR 42
32644: PUSH
32645: LD_INT 22
32647: ST_TO_ADDR
32648: GO 32936
32650: LD_INT 20
32652: DOUBLE
32653: EQUAL
32654: IFTRUE 32658
32656: GO 32669
32658: POP
// bc_type := b_ext_siberium ; 21 :
32659: LD_ADDR_OWVAR 42
32663: PUSH
32664: LD_INT 21
32666: ST_TO_ADDR
32667: GO 32936
32669: LD_INT 21
32671: DOUBLE
32672: EQUAL
32673: IFTRUE 32677
32675: GO 32688
32677: POP
// bc_type := b_ext_computer ; 22 :
32678: LD_ADDR_OWVAR 42
32682: PUSH
32683: LD_INT 24
32685: ST_TO_ADDR
32686: GO 32936
32688: LD_INT 22
32690: DOUBLE
32691: EQUAL
32692: IFTRUE 32696
32694: GO 32707
32696: POP
// bc_type := b_ext_track ; 23 :
32697: LD_ADDR_OWVAR 42
32701: PUSH
32702: LD_INT 16
32704: ST_TO_ADDR
32705: GO 32936
32707: LD_INT 23
32709: DOUBLE
32710: EQUAL
32711: IFTRUE 32715
32713: GO 32726
32715: POP
// bc_type := b_ext_laser ; 24 :
32716: LD_ADDR_OWVAR 42
32720: PUSH
32721: LD_INT 25
32723: ST_TO_ADDR
32724: GO 32936
32726: LD_INT 24
32728: DOUBLE
32729: EQUAL
32730: IFTRUE 32734
32732: GO 32745
32734: POP
// bc_type := b_control_tower ; 25 :
32735: LD_ADDR_OWVAR 42
32739: PUSH
32740: LD_INT 36
32742: ST_TO_ADDR
32743: GO 32936
32745: LD_INT 25
32747: DOUBLE
32748: EQUAL
32749: IFTRUE 32753
32751: GO 32764
32753: POP
// bc_type := b_breastwork ; 26 :
32754: LD_ADDR_OWVAR 42
32758: PUSH
32759: LD_INT 31
32761: ST_TO_ADDR
32762: GO 32936
32764: LD_INT 26
32766: DOUBLE
32767: EQUAL
32768: IFTRUE 32772
32770: GO 32783
32772: POP
// bc_type := b_bunker ; 27 :
32773: LD_ADDR_OWVAR 42
32777: PUSH
32778: LD_INT 32
32780: ST_TO_ADDR
32781: GO 32936
32783: LD_INT 27
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32791
32789: GO 32802
32791: POP
// bc_type := b_turret ; 28 :
32792: LD_ADDR_OWVAR 42
32796: PUSH
32797: LD_INT 33
32799: ST_TO_ADDR
32800: GO 32936
32802: LD_INT 28
32804: DOUBLE
32805: EQUAL
32806: IFTRUE 32810
32808: GO 32821
32810: POP
// bc_type := b_armoury ; 29 :
32811: LD_ADDR_OWVAR 42
32815: PUSH
32816: LD_INT 4
32818: ST_TO_ADDR
32819: GO 32936
32821: LD_INT 29
32823: DOUBLE
32824: EQUAL
32825: IFTRUE 32829
32827: GO 32840
32829: POP
// bc_type := b_barracks ; 30 :
32830: LD_ADDR_OWVAR 42
32834: PUSH
32835: LD_INT 5
32837: ST_TO_ADDR
32838: GO 32936
32840: LD_INT 30
32842: DOUBLE
32843: EQUAL
32844: IFTRUE 32848
32846: GO 32859
32848: POP
// bc_type := b_solar_power ; 31 :
32849: LD_ADDR_OWVAR 42
32853: PUSH
32854: LD_INT 27
32856: ST_TO_ADDR
32857: GO 32936
32859: LD_INT 31
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32867
32865: GO 32878
32867: POP
// bc_type := b_oil_power ; 32 :
32868: LD_ADDR_OWVAR 42
32872: PUSH
32873: LD_INT 26
32875: ST_TO_ADDR
32876: GO 32936
32878: LD_INT 32
32880: DOUBLE
32881: EQUAL
32882: IFTRUE 32886
32884: GO 32897
32886: POP
// bc_type := b_siberite_power ; 33 :
32887: LD_ADDR_OWVAR 42
32891: PUSH
32892: LD_INT 28
32894: ST_TO_ADDR
32895: GO 32936
32897: LD_INT 33
32899: DOUBLE
32900: EQUAL
32901: IFTRUE 32905
32903: GO 32916
32905: POP
// bc_type := b_oil_mine ; 34 :
32906: LD_ADDR_OWVAR 42
32910: PUSH
32911: LD_INT 29
32913: ST_TO_ADDR
32914: GO 32936
32916: LD_INT 34
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 32935
32924: POP
// bc_type := b_siberite_mine ; end ;
32925: LD_ADDR_OWVAR 42
32929: PUSH
32930: LD_INT 30
32932: ST_TO_ADDR
32933: GO 32936
32935: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32936: LD_ADDR_VAR 0 8
32940: PUSH
32941: LD_VAR 0 5
32945: PPUSH
32946: LD_VAR 0 6
32950: PPUSH
32951: LD_VAR 0 3
32955: PPUSH
32956: CALL_OW 47
32960: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32961: LD_OWVAR 42
32965: PUSH
32966: LD_INT 32
32968: PUSH
32969: LD_INT 33
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: IN
32976: IFFALSE 32992
// PlaceWeaponTurret ( b , weapon ) ;
32978: LD_VAR 0 8
32982: PPUSH
32983: LD_VAR 0 4
32987: PPUSH
32988: CALL_OW 431
// end ;
32992: LD_VAR 0 7
32996: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32997: LD_INT 0
32999: PPUSH
33000: PPUSH
33001: PPUSH
33002: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33003: LD_ADDR_VAR 0 4
33007: PUSH
33008: LD_INT 22
33010: PUSH
33011: LD_OWVAR 2
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: LD_INT 30
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 30
33035: PUSH
33036: LD_INT 1
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PPUSH
33052: CALL_OW 69
33056: ST_TO_ADDR
// if not tmp then
33057: LD_VAR 0 4
33061: NOT
33062: IFFALSE 33066
// exit ;
33064: GO 33125
// for i in tmp do
33066: LD_ADDR_VAR 0 2
33070: PUSH
33071: LD_VAR 0 4
33075: PUSH
33076: FOR_IN
33077: IFFALSE 33123
// for j = 1 to 3 do
33079: LD_ADDR_VAR 0 3
33083: PUSH
33084: DOUBLE
33085: LD_INT 1
33087: DEC
33088: ST_TO_ADDR
33089: LD_INT 3
33091: PUSH
33092: FOR_TO
33093: IFFALSE 33119
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33095: LD_VAR 0 2
33099: PPUSH
33100: CALL_OW 274
33104: PPUSH
33105: LD_VAR 0 3
33109: PPUSH
33110: LD_INT 99999
33112: PPUSH
33113: CALL_OW 277
33117: GO 33092
33119: POP
33120: POP
33121: GO 33076
33123: POP
33124: POP
// end ;
33125: LD_VAR 0 1
33129: RET
// export function hHackSetLevel10 ; var i , j ; begin
33130: LD_INT 0
33132: PPUSH
33133: PPUSH
33134: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33135: LD_ADDR_VAR 0 2
33139: PUSH
33140: LD_INT 21
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PPUSH
33150: CALL_OW 69
33154: PUSH
33155: FOR_IN
33156: IFFALSE 33208
// if IsSelected ( i ) then
33158: LD_VAR 0 2
33162: PPUSH
33163: CALL_OW 306
33167: IFFALSE 33206
// begin for j := 1 to 4 do
33169: LD_ADDR_VAR 0 3
33173: PUSH
33174: DOUBLE
33175: LD_INT 1
33177: DEC
33178: ST_TO_ADDR
33179: LD_INT 4
33181: PUSH
33182: FOR_TO
33183: IFFALSE 33204
// SetSkill ( i , j , 10 ) ;
33185: LD_VAR 0 2
33189: PPUSH
33190: LD_VAR 0 3
33194: PPUSH
33195: LD_INT 10
33197: PPUSH
33198: CALL_OW 237
33202: GO 33182
33204: POP
33205: POP
// end ;
33206: GO 33155
33208: POP
33209: POP
// end ;
33210: LD_VAR 0 1
33214: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33215: LD_INT 0
33217: PPUSH
33218: PPUSH
33219: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33220: LD_ADDR_VAR 0 2
33224: PUSH
33225: LD_INT 22
33227: PUSH
33228: LD_OWVAR 2
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 21
33239: PUSH
33240: LD_INT 1
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PPUSH
33251: CALL_OW 69
33255: PUSH
33256: FOR_IN
33257: IFFALSE 33298
// begin for j := 1 to 4 do
33259: LD_ADDR_VAR 0 3
33263: PUSH
33264: DOUBLE
33265: LD_INT 1
33267: DEC
33268: ST_TO_ADDR
33269: LD_INT 4
33271: PUSH
33272: FOR_TO
33273: IFFALSE 33294
// SetSkill ( i , j , 10 ) ;
33275: LD_VAR 0 2
33279: PPUSH
33280: LD_VAR 0 3
33284: PPUSH
33285: LD_INT 10
33287: PPUSH
33288: CALL_OW 237
33292: GO 33272
33294: POP
33295: POP
// end ;
33296: GO 33256
33298: POP
33299: POP
// end ;
33300: LD_VAR 0 1
33304: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33305: LD_INT 0
33307: PPUSH
// uc_side := your_side ;
33308: LD_ADDR_OWVAR 20
33312: PUSH
33313: LD_OWVAR 2
33317: ST_TO_ADDR
// uc_nation := nation ;
33318: LD_ADDR_OWVAR 21
33322: PUSH
33323: LD_VAR 0 1
33327: ST_TO_ADDR
// InitHc ;
33328: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33332: LD_INT 0
33334: PPUSH
33335: LD_VAR 0 2
33339: PPUSH
33340: LD_VAR 0 3
33344: PPUSH
33345: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33349: LD_VAR 0 4
33353: PPUSH
33354: LD_VAR 0 5
33358: PPUSH
33359: CALL_OW 428
33363: PUSH
33364: LD_INT 0
33366: EQUAL
33367: IFFALSE 33391
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33369: CALL_OW 44
33373: PPUSH
33374: LD_VAR 0 4
33378: PPUSH
33379: LD_VAR 0 5
33383: PPUSH
33384: LD_INT 1
33386: PPUSH
33387: CALL_OW 48
// end ;
33391: LD_VAR 0 6
33395: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33396: LD_INT 0
33398: PPUSH
33399: PPUSH
// uc_side := your_side ;
33400: LD_ADDR_OWVAR 20
33404: PUSH
33405: LD_OWVAR 2
33409: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33410: LD_VAR 0 1
33414: PUSH
33415: LD_INT 1
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: LD_INT 4
33426: PUSH
33427: LD_INT 5
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: IN
33437: IFFALSE 33449
// uc_nation := nation_american else
33439: LD_ADDR_OWVAR 21
33443: PUSH
33444: LD_INT 1
33446: ST_TO_ADDR
33447: GO 33492
// if chassis in [ 11 , 12 , 13 , 14 ] then
33449: LD_VAR 0 1
33453: PUSH
33454: LD_INT 11
33456: PUSH
33457: LD_INT 12
33459: PUSH
33460: LD_INT 13
33462: PUSH
33463: LD_INT 14
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: IN
33472: IFFALSE 33484
// uc_nation := nation_arabian else
33474: LD_ADDR_OWVAR 21
33478: PUSH
33479: LD_INT 2
33481: ST_TO_ADDR
33482: GO 33492
// uc_nation := nation_russian ;
33484: LD_ADDR_OWVAR 21
33488: PUSH
33489: LD_INT 3
33491: ST_TO_ADDR
// vc_chassis := chassis ;
33492: LD_ADDR_OWVAR 37
33496: PUSH
33497: LD_VAR 0 1
33501: ST_TO_ADDR
// vc_engine := engine ;
33502: LD_ADDR_OWVAR 39
33506: PUSH
33507: LD_VAR 0 2
33511: ST_TO_ADDR
// vc_control := control ;
33512: LD_ADDR_OWVAR 38
33516: PUSH
33517: LD_VAR 0 3
33521: ST_TO_ADDR
// vc_weapon := weapon ;
33522: LD_ADDR_OWVAR 40
33526: PUSH
33527: LD_VAR 0 4
33531: ST_TO_ADDR
// un := CreateVehicle ;
33532: LD_ADDR_VAR 0 8
33536: PUSH
33537: CALL_OW 45
33541: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33542: LD_VAR 0 8
33546: PPUSH
33547: LD_INT 0
33549: PPUSH
33550: LD_INT 5
33552: PPUSH
33553: CALL_OW 12
33557: PPUSH
33558: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33562: LD_VAR 0 8
33566: PPUSH
33567: LD_VAR 0 5
33571: PPUSH
33572: LD_VAR 0 6
33576: PPUSH
33577: LD_INT 1
33579: PPUSH
33580: CALL_OW 48
// end ;
33584: LD_VAR 0 7
33588: RET
// export hInvincible ; every 1 do
33589: GO 33591
33591: DISABLE
// hInvincible := [ ] ;
33592: LD_ADDR_EXP 105
33596: PUSH
33597: EMPTY
33598: ST_TO_ADDR
33599: END
// every 10 do var i ;
33600: GO 33602
33602: DISABLE
33603: LD_INT 0
33605: PPUSH
// begin enable ;
33606: ENABLE
// if not hInvincible then
33607: LD_EXP 105
33611: NOT
33612: IFFALSE 33616
// exit ;
33614: GO 33660
// for i in hInvincible do
33616: LD_ADDR_VAR 0 1
33620: PUSH
33621: LD_EXP 105
33625: PUSH
33626: FOR_IN
33627: IFFALSE 33658
// if GetLives ( i ) < 1000 then
33629: LD_VAR 0 1
33633: PPUSH
33634: CALL_OW 256
33638: PUSH
33639: LD_INT 1000
33641: LESS
33642: IFFALSE 33656
// SetLives ( i , 1000 ) ;
33644: LD_VAR 0 1
33648: PPUSH
33649: LD_INT 1000
33651: PPUSH
33652: CALL_OW 234
33656: GO 33626
33658: POP
33659: POP
// end ;
33660: PPOPN 1
33662: END
// export function hHackInvincible ; var i ; begin
33663: LD_INT 0
33665: PPUSH
33666: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33667: LD_ADDR_VAR 0 2
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: LD_INT 21
33677: PUSH
33678: LD_INT 1
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 21
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: LIST
33699: PPUSH
33700: CALL_OW 69
33704: PUSH
33705: FOR_IN
33706: IFFALSE 33767
// if IsSelected ( i ) then
33708: LD_VAR 0 2
33712: PPUSH
33713: CALL_OW 306
33717: IFFALSE 33765
// begin if i in hInvincible then
33719: LD_VAR 0 2
33723: PUSH
33724: LD_EXP 105
33728: IN
33729: IFFALSE 33749
// hInvincible := hInvincible diff i else
33731: LD_ADDR_EXP 105
33735: PUSH
33736: LD_EXP 105
33740: PUSH
33741: LD_VAR 0 2
33745: DIFF
33746: ST_TO_ADDR
33747: GO 33765
// hInvincible := hInvincible union i ;
33749: LD_ADDR_EXP 105
33753: PUSH
33754: LD_EXP 105
33758: PUSH
33759: LD_VAR 0 2
33763: UNION
33764: ST_TO_ADDR
// end ;
33765: GO 33705
33767: POP
33768: POP
// end ;
33769: LD_VAR 0 1
33773: RET
// export function hHackInvisible ; var i , j ; begin
33774: LD_INT 0
33776: PPUSH
33777: PPUSH
33778: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33779: LD_ADDR_VAR 0 2
33783: PUSH
33784: LD_INT 21
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PPUSH
33794: CALL_OW 69
33798: PUSH
33799: FOR_IN
33800: IFFALSE 33824
// if IsSelected ( i ) then
33802: LD_VAR 0 2
33806: PPUSH
33807: CALL_OW 306
33811: IFFALSE 33822
// ComForceInvisible ( i ) ;
33813: LD_VAR 0 2
33817: PPUSH
33818: CALL_OW 496
33822: GO 33799
33824: POP
33825: POP
// end ;
33826: LD_VAR 0 1
33830: RET
// export function hHackChangeYourSide ; begin
33831: LD_INT 0
33833: PPUSH
// if your_side = 8 then
33834: LD_OWVAR 2
33838: PUSH
33839: LD_INT 8
33841: EQUAL
33842: IFFALSE 33854
// your_side := 0 else
33844: LD_ADDR_OWVAR 2
33848: PUSH
33849: LD_INT 0
33851: ST_TO_ADDR
33852: GO 33868
// your_side := your_side + 1 ;
33854: LD_ADDR_OWVAR 2
33858: PUSH
33859: LD_OWVAR 2
33863: PUSH
33864: LD_INT 1
33866: PLUS
33867: ST_TO_ADDR
// end ;
33868: LD_VAR 0 1
33872: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33873: LD_INT 0
33875: PPUSH
33876: PPUSH
33877: PPUSH
// for i in all_units do
33878: LD_ADDR_VAR 0 2
33882: PUSH
33883: LD_OWVAR 3
33887: PUSH
33888: FOR_IN
33889: IFFALSE 33967
// if IsSelected ( i ) then
33891: LD_VAR 0 2
33895: PPUSH
33896: CALL_OW 306
33900: IFFALSE 33965
// begin j := GetSide ( i ) ;
33902: LD_ADDR_VAR 0 3
33906: PUSH
33907: LD_VAR 0 2
33911: PPUSH
33912: CALL_OW 255
33916: ST_TO_ADDR
// if j = 8 then
33917: LD_VAR 0 3
33921: PUSH
33922: LD_INT 8
33924: EQUAL
33925: IFFALSE 33937
// j := 0 else
33927: LD_ADDR_VAR 0 3
33931: PUSH
33932: LD_INT 0
33934: ST_TO_ADDR
33935: GO 33951
// j := j + 1 ;
33937: LD_ADDR_VAR 0 3
33941: PUSH
33942: LD_VAR 0 3
33946: PUSH
33947: LD_INT 1
33949: PLUS
33950: ST_TO_ADDR
// SetSide ( i , j ) ;
33951: LD_VAR 0 2
33955: PPUSH
33956: LD_VAR 0 3
33960: PPUSH
33961: CALL_OW 235
// end ;
33965: GO 33888
33967: POP
33968: POP
// end ;
33969: LD_VAR 0 1
33973: RET
// export function hHackFog ; begin
33974: LD_INT 0
33976: PPUSH
// FogOff ( true ) ;
33977: LD_INT 1
33979: PPUSH
33980: CALL_OW 344
// end ;
33984: LD_VAR 0 1
33988: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33989: LD_INT 0
33991: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33992: LD_VAR 0 1
33996: PPUSH
33997: LD_VAR 0 2
34001: PPUSH
34002: LD_VAR 0 3
34006: PPUSH
34007: LD_INT 1
34009: PPUSH
34010: LD_INT 1
34012: PPUSH
34013: CALL_OW 483
// CenterOnXY ( x , y ) ;
34017: LD_VAR 0 2
34021: PPUSH
34022: LD_VAR 0 3
34026: PPUSH
34027: CALL_OW 84
// end ;
34031: LD_VAR 0 4
34035: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34036: LD_INT 0
34038: PPUSH
34039: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34040: LD_VAR 0 1
34044: NOT
34045: PUSH
34046: LD_VAR 0 2
34050: PPUSH
34051: LD_VAR 0 3
34055: PPUSH
34056: CALL_OW 488
34060: NOT
34061: OR
34062: PUSH
34063: LD_VAR 0 1
34067: PPUSH
34068: CALL_OW 266
34072: PUSH
34073: LD_INT 3
34075: NONEQUAL
34076: PUSH
34077: LD_VAR 0 1
34081: PPUSH
34082: CALL_OW 247
34086: PUSH
34087: LD_INT 1
34089: EQUAL
34090: NOT
34091: AND
34092: OR
34093: IFFALSE 34097
// exit ;
34095: GO 34246
// if GetType ( factory ) = unit_human then
34097: LD_VAR 0 1
34101: PPUSH
34102: CALL_OW 247
34106: PUSH
34107: LD_INT 1
34109: EQUAL
34110: IFFALSE 34127
// factory := IsInUnit ( factory ) ;
34112: LD_ADDR_VAR 0 1
34116: PUSH
34117: LD_VAR 0 1
34121: PPUSH
34122: CALL_OW 310
34126: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34127: LD_VAR 0 1
34131: PPUSH
34132: CALL_OW 266
34136: PUSH
34137: LD_INT 3
34139: NONEQUAL
34140: IFFALSE 34144
// exit ;
34142: GO 34246
// if HexInfo ( x , y ) = factory then
34144: LD_VAR 0 2
34148: PPUSH
34149: LD_VAR 0 3
34153: PPUSH
34154: CALL_OW 428
34158: PUSH
34159: LD_VAR 0 1
34163: EQUAL
34164: IFFALSE 34191
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34166: LD_ADDR_EXP 106
34170: PUSH
34171: LD_EXP 106
34175: PPUSH
34176: LD_VAR 0 1
34180: PPUSH
34181: LD_INT 0
34183: PPUSH
34184: CALL_OW 1
34188: ST_TO_ADDR
34189: GO 34242
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34191: LD_ADDR_EXP 106
34195: PUSH
34196: LD_EXP 106
34200: PPUSH
34201: LD_VAR 0 1
34205: PPUSH
34206: LD_VAR 0 1
34210: PPUSH
34211: CALL_OW 255
34215: PUSH
34216: LD_VAR 0 1
34220: PUSH
34221: LD_VAR 0 2
34225: PUSH
34226: LD_VAR 0 3
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: PPUSH
34237: CALL_OW 1
34241: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34242: CALL 34251 0 0
// end ;
34246: LD_VAR 0 4
34250: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34251: LD_INT 0
34253: PPUSH
34254: PPUSH
34255: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34256: LD_STRING resetFactoryWaypoint();
34258: PPUSH
34259: CALL_OW 559
// if factoryWaypoints then
34263: LD_EXP 106
34267: IFFALSE 34393
// begin list := PrepareArray ( factoryWaypoints ) ;
34269: LD_ADDR_VAR 0 3
34273: PUSH
34274: LD_EXP 106
34278: PPUSH
34279: CALL 80770 0 1
34283: ST_TO_ADDR
// for i := 1 to list do
34284: LD_ADDR_VAR 0 2
34288: PUSH
34289: DOUBLE
34290: LD_INT 1
34292: DEC
34293: ST_TO_ADDR
34294: LD_VAR 0 3
34298: PUSH
34299: FOR_TO
34300: IFFALSE 34391
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34302: LD_STRING setFactoryWaypointXY(
34304: PUSH
34305: LD_VAR 0 3
34309: PUSH
34310: LD_VAR 0 2
34314: ARRAY
34315: PUSH
34316: LD_INT 1
34318: ARRAY
34319: STR
34320: PUSH
34321: LD_STRING ,
34323: STR
34324: PUSH
34325: LD_VAR 0 3
34329: PUSH
34330: LD_VAR 0 2
34334: ARRAY
34335: PUSH
34336: LD_INT 2
34338: ARRAY
34339: STR
34340: PUSH
34341: LD_STRING ,
34343: STR
34344: PUSH
34345: LD_VAR 0 3
34349: PUSH
34350: LD_VAR 0 2
34354: ARRAY
34355: PUSH
34356: LD_INT 3
34358: ARRAY
34359: STR
34360: PUSH
34361: LD_STRING ,
34363: STR
34364: PUSH
34365: LD_VAR 0 3
34369: PUSH
34370: LD_VAR 0 2
34374: ARRAY
34375: PUSH
34376: LD_INT 4
34378: ARRAY
34379: STR
34380: PUSH
34381: LD_STRING )
34383: STR
34384: PPUSH
34385: CALL_OW 559
34389: GO 34299
34391: POP
34392: POP
// end ; end ;
34393: LD_VAR 0 1
34397: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34398: LD_INT 0
34400: PPUSH
// if HexInfo ( x , y ) = warehouse then
34401: LD_VAR 0 2
34405: PPUSH
34406: LD_VAR 0 3
34410: PPUSH
34411: CALL_OW 428
34415: PUSH
34416: LD_VAR 0 1
34420: EQUAL
34421: IFFALSE 34448
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34423: LD_ADDR_EXP 107
34427: PUSH
34428: LD_EXP 107
34432: PPUSH
34433: LD_VAR 0 1
34437: PPUSH
34438: LD_INT 0
34440: PPUSH
34441: CALL_OW 1
34445: ST_TO_ADDR
34446: GO 34499
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34448: LD_ADDR_EXP 107
34452: PUSH
34453: LD_EXP 107
34457: PPUSH
34458: LD_VAR 0 1
34462: PPUSH
34463: LD_VAR 0 1
34467: PPUSH
34468: CALL_OW 255
34472: PUSH
34473: LD_VAR 0 1
34477: PUSH
34478: LD_VAR 0 2
34482: PUSH
34483: LD_VAR 0 3
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: PPUSH
34494: CALL_OW 1
34498: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34499: CALL 34508 0 0
// end ;
34503: LD_VAR 0 4
34507: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34508: LD_INT 0
34510: PPUSH
34511: PPUSH
34512: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34513: LD_STRING resetWarehouseGatheringPoints();
34515: PPUSH
34516: CALL_OW 559
// if warehouseGatheringPoints then
34520: LD_EXP 107
34524: IFFALSE 34650
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34526: LD_ADDR_VAR 0 3
34530: PUSH
34531: LD_EXP 107
34535: PPUSH
34536: CALL 80770 0 1
34540: ST_TO_ADDR
// for i := 1 to list do
34541: LD_ADDR_VAR 0 2
34545: PUSH
34546: DOUBLE
34547: LD_INT 1
34549: DEC
34550: ST_TO_ADDR
34551: LD_VAR 0 3
34555: PUSH
34556: FOR_TO
34557: IFFALSE 34648
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34559: LD_STRING setWarehouseGatheringPointXY(
34561: PUSH
34562: LD_VAR 0 3
34566: PUSH
34567: LD_VAR 0 2
34571: ARRAY
34572: PUSH
34573: LD_INT 1
34575: ARRAY
34576: STR
34577: PUSH
34578: LD_STRING ,
34580: STR
34581: PUSH
34582: LD_VAR 0 3
34586: PUSH
34587: LD_VAR 0 2
34591: ARRAY
34592: PUSH
34593: LD_INT 2
34595: ARRAY
34596: STR
34597: PUSH
34598: LD_STRING ,
34600: STR
34601: PUSH
34602: LD_VAR 0 3
34606: PUSH
34607: LD_VAR 0 2
34611: ARRAY
34612: PUSH
34613: LD_INT 3
34615: ARRAY
34616: STR
34617: PUSH
34618: LD_STRING ,
34620: STR
34621: PUSH
34622: LD_VAR 0 3
34626: PUSH
34627: LD_VAR 0 2
34631: ARRAY
34632: PUSH
34633: LD_INT 4
34635: ARRAY
34636: STR
34637: PUSH
34638: LD_STRING )
34640: STR
34641: PPUSH
34642: CALL_OW 559
34646: GO 34556
34648: POP
34649: POP
// end ; end ;
34650: LD_VAR 0 1
34654: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34655: LD_EXP 107
34659: IFFALSE 35344
34661: GO 34663
34663: DISABLE
34664: LD_INT 0
34666: PPUSH
34667: PPUSH
34668: PPUSH
34669: PPUSH
34670: PPUSH
34671: PPUSH
34672: PPUSH
34673: PPUSH
34674: PPUSH
// begin enable ;
34675: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34676: LD_ADDR_VAR 0 3
34680: PUSH
34681: LD_EXP 107
34685: PPUSH
34686: CALL 80770 0 1
34690: ST_TO_ADDR
// if not list then
34691: LD_VAR 0 3
34695: NOT
34696: IFFALSE 34700
// exit ;
34698: GO 35344
// for i := 1 to list do
34700: LD_ADDR_VAR 0 1
34704: PUSH
34705: DOUBLE
34706: LD_INT 1
34708: DEC
34709: ST_TO_ADDR
34710: LD_VAR 0 3
34714: PUSH
34715: FOR_TO
34716: IFFALSE 35342
// begin depot := list [ i ] [ 2 ] ;
34718: LD_ADDR_VAR 0 8
34722: PUSH
34723: LD_VAR 0 3
34727: PUSH
34728: LD_VAR 0 1
34732: ARRAY
34733: PUSH
34734: LD_INT 2
34736: ARRAY
34737: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34738: LD_ADDR_VAR 0 5
34742: PUSH
34743: LD_VAR 0 3
34747: PUSH
34748: LD_VAR 0 1
34752: ARRAY
34753: PUSH
34754: LD_INT 1
34756: ARRAY
34757: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34758: LD_VAR 0 8
34762: PPUSH
34763: CALL_OW 301
34767: PUSH
34768: LD_VAR 0 5
34772: PUSH
34773: LD_VAR 0 8
34777: PPUSH
34778: CALL_OW 255
34782: NONEQUAL
34783: OR
34784: IFFALSE 34813
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34786: LD_ADDR_EXP 107
34790: PUSH
34791: LD_EXP 107
34795: PPUSH
34796: LD_VAR 0 8
34800: PPUSH
34801: LD_INT 0
34803: PPUSH
34804: CALL_OW 1
34808: ST_TO_ADDR
// exit ;
34809: POP
34810: POP
34811: GO 35344
// end ; x := list [ i ] [ 3 ] ;
34813: LD_ADDR_VAR 0 6
34817: PUSH
34818: LD_VAR 0 3
34822: PUSH
34823: LD_VAR 0 1
34827: ARRAY
34828: PUSH
34829: LD_INT 3
34831: ARRAY
34832: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34833: LD_ADDR_VAR 0 7
34837: PUSH
34838: LD_VAR 0 3
34842: PUSH
34843: LD_VAR 0 1
34847: ARRAY
34848: PUSH
34849: LD_INT 4
34851: ARRAY
34852: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34853: LD_ADDR_VAR 0 9
34857: PUSH
34858: LD_VAR 0 6
34862: PPUSH
34863: LD_VAR 0 7
34867: PPUSH
34868: LD_INT 16
34870: PPUSH
34871: CALL 79358 0 3
34875: ST_TO_ADDR
// if not cratesNearbyPoint then
34876: LD_VAR 0 9
34880: NOT
34881: IFFALSE 34887
// exit ;
34883: POP
34884: POP
34885: GO 35344
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34887: LD_ADDR_VAR 0 4
34891: PUSH
34892: LD_INT 22
34894: PUSH
34895: LD_VAR 0 5
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 3
34906: PUSH
34907: LD_INT 60
34909: PUSH
34910: EMPTY
34911: LIST
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 91
34919: PUSH
34920: LD_VAR 0 8
34924: PUSH
34925: LD_INT 6
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 2
34935: PUSH
34936: LD_INT 25
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 25
34948: PUSH
34949: LD_INT 16
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: LIST
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: PPUSH
34967: CALL_OW 69
34971: PUSH
34972: LD_VAR 0 8
34976: PPUSH
34977: CALL_OW 313
34981: PPUSH
34982: LD_INT 3
34984: PUSH
34985: LD_INT 60
34987: PUSH
34988: EMPTY
34989: LIST
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: PUSH
34998: LD_INT 25
35000: PUSH
35001: LD_INT 2
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 25
35010: PUSH
35011: LD_INT 16
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: LIST
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PPUSH
35027: CALL_OW 72
35031: UNION
35032: ST_TO_ADDR
// if tmp then
35033: LD_VAR 0 4
35037: IFFALSE 35117
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35039: LD_ADDR_VAR 0 4
35043: PUSH
35044: LD_VAR 0 4
35048: PPUSH
35049: LD_INT 3
35051: PPUSH
35052: CALL 77327 0 2
35056: ST_TO_ADDR
// for j in tmp do
35057: LD_ADDR_VAR 0 2
35061: PUSH
35062: LD_VAR 0 4
35066: PUSH
35067: FOR_IN
35068: IFFALSE 35111
// begin if IsInUnit ( j ) then
35070: LD_VAR 0 2
35074: PPUSH
35075: CALL_OW 310
35079: IFFALSE 35090
// ComExit ( j ) ;
35081: LD_VAR 0 2
35085: PPUSH
35086: CALL 77410 0 1
// AddComCollect ( j , x , y ) ;
35090: LD_VAR 0 2
35094: PPUSH
35095: LD_VAR 0 6
35099: PPUSH
35100: LD_VAR 0 7
35104: PPUSH
35105: CALL_OW 177
// end ;
35109: GO 35067
35111: POP
35112: POP
// exit ;
35113: POP
35114: POP
35115: GO 35344
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35117: LD_ADDR_VAR 0 4
35121: PUSH
35122: LD_INT 22
35124: PUSH
35125: LD_VAR 0 5
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 91
35136: PUSH
35137: LD_VAR 0 8
35141: PUSH
35142: LD_INT 8
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 2
35152: PUSH
35153: LD_INT 34
35155: PUSH
35156: LD_INT 12
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 34
35165: PUSH
35166: LD_INT 51
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 34
35175: PUSH
35176: LD_INT 32
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 34
35185: PUSH
35186: LD_INT 89
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: PPUSH
35205: CALL_OW 69
35209: ST_TO_ADDR
// if tmp then
35210: LD_VAR 0 4
35214: IFFALSE 35340
// begin for j in tmp do
35216: LD_ADDR_VAR 0 2
35220: PUSH
35221: LD_VAR 0 4
35225: PUSH
35226: FOR_IN
35227: IFFALSE 35338
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35229: LD_VAR 0 2
35233: PPUSH
35234: CALL_OW 262
35238: PUSH
35239: LD_INT 3
35241: EQUAL
35242: PUSH
35243: LD_VAR 0 2
35247: PPUSH
35248: CALL_OW 261
35252: PUSH
35253: LD_INT 20
35255: GREATER
35256: OR
35257: PUSH
35258: LD_VAR 0 2
35262: PPUSH
35263: CALL_OW 314
35267: NOT
35268: AND
35269: PUSH
35270: LD_VAR 0 2
35274: PPUSH
35275: CALL_OW 263
35279: PUSH
35280: LD_INT 1
35282: NONEQUAL
35283: PUSH
35284: LD_VAR 0 2
35288: PPUSH
35289: CALL_OW 311
35293: OR
35294: AND
35295: IFFALSE 35336
// begin ComCollect ( j , x , y ) ;
35297: LD_VAR 0 2
35301: PPUSH
35302: LD_VAR 0 6
35306: PPUSH
35307: LD_VAR 0 7
35311: PPUSH
35312: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35316: LD_VAR 0 2
35320: PPUSH
35321: LD_VAR 0 8
35325: PPUSH
35326: CALL_OW 172
// exit ;
35330: POP
35331: POP
35332: POP
35333: POP
35334: GO 35344
// end ;
35336: GO 35226
35338: POP
35339: POP
// end ; end ;
35340: GO 34715
35342: POP
35343: POP
// end ; end_of_file
35344: PPOPN 9
35346: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35347: LD_INT 0
35349: PPUSH
35350: PPUSH
35351: PPUSH
35352: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35353: LD_VAR 0 1
35357: PPUSH
35358: CALL_OW 264
35362: PUSH
35363: LD_INT 91
35365: EQUAL
35366: IFFALSE 35438
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35368: LD_INT 68
35370: PPUSH
35371: LD_VAR 0 1
35375: PPUSH
35376: CALL_OW 255
35380: PPUSH
35381: CALL_OW 321
35385: PUSH
35386: LD_INT 2
35388: EQUAL
35389: IFFALSE 35401
// eff := 70 else
35391: LD_ADDR_VAR 0 4
35395: PUSH
35396: LD_INT 70
35398: ST_TO_ADDR
35399: GO 35409
// eff := 30 ;
35401: LD_ADDR_VAR 0 4
35405: PUSH
35406: LD_INT 30
35408: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35409: LD_VAR 0 1
35413: PPUSH
35414: CALL_OW 250
35418: PPUSH
35419: LD_VAR 0 1
35423: PPUSH
35424: CALL_OW 251
35428: PPUSH
35429: LD_VAR 0 4
35433: PPUSH
35434: CALL_OW 495
// end ; end ;
35438: LD_VAR 0 2
35442: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35443: LD_INT 0
35445: PPUSH
// end ;
35446: LD_VAR 0 4
35450: RET
// export function SOS_Command ( cmd ) ; begin
35451: LD_INT 0
35453: PPUSH
// end ;
35454: LD_VAR 0 2
35458: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35459: LD_INT 0
35461: PPUSH
// end ;
35462: LD_VAR 0 6
35466: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35467: LD_INT 0
35469: PPUSH
35470: PPUSH
// if not vehicle or not factory then
35471: LD_VAR 0 1
35475: NOT
35476: PUSH
35477: LD_VAR 0 2
35481: NOT
35482: OR
35483: IFFALSE 35487
// exit ;
35485: GO 35718
// if factoryWaypoints >= factory then
35487: LD_EXP 106
35491: PUSH
35492: LD_VAR 0 2
35496: GREATEREQUAL
35497: IFFALSE 35718
// if factoryWaypoints [ factory ] then
35499: LD_EXP 106
35503: PUSH
35504: LD_VAR 0 2
35508: ARRAY
35509: IFFALSE 35718
// begin if GetControl ( vehicle ) = control_manual then
35511: LD_VAR 0 1
35515: PPUSH
35516: CALL_OW 263
35520: PUSH
35521: LD_INT 1
35523: EQUAL
35524: IFFALSE 35605
// begin driver := IsDrivenBy ( vehicle ) ;
35526: LD_ADDR_VAR 0 4
35530: PUSH
35531: LD_VAR 0 1
35535: PPUSH
35536: CALL_OW 311
35540: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35541: LD_VAR 0 4
35545: PPUSH
35546: LD_EXP 106
35550: PUSH
35551: LD_VAR 0 2
35555: ARRAY
35556: PUSH
35557: LD_INT 3
35559: ARRAY
35560: PPUSH
35561: LD_EXP 106
35565: PUSH
35566: LD_VAR 0 2
35570: ARRAY
35571: PUSH
35572: LD_INT 4
35574: ARRAY
35575: PPUSH
35576: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35580: LD_VAR 0 4
35584: PPUSH
35585: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35589: LD_VAR 0 4
35593: PPUSH
35594: LD_VAR 0 2
35598: PPUSH
35599: CALL_OW 180
// end else
35603: GO 35718
// if GetControl ( vehicle ) = control_remote then
35605: LD_VAR 0 1
35609: PPUSH
35610: CALL_OW 263
35614: PUSH
35615: LD_INT 2
35617: EQUAL
35618: IFFALSE 35679
// begin wait ( 0 0$2 ) ;
35620: LD_INT 70
35622: PPUSH
35623: CALL_OW 67
// if Connect ( vehicle ) then
35627: LD_VAR 0 1
35631: PPUSH
35632: CALL 47742 0 1
35636: IFFALSE 35677
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35638: LD_VAR 0 1
35642: PPUSH
35643: LD_EXP 106
35647: PUSH
35648: LD_VAR 0 2
35652: ARRAY
35653: PUSH
35654: LD_INT 3
35656: ARRAY
35657: PPUSH
35658: LD_EXP 106
35662: PUSH
35663: LD_VAR 0 2
35667: ARRAY
35668: PUSH
35669: LD_INT 4
35671: ARRAY
35672: PPUSH
35673: CALL_OW 171
// end else
35677: GO 35718
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35679: LD_VAR 0 1
35683: PPUSH
35684: LD_EXP 106
35688: PUSH
35689: LD_VAR 0 2
35693: ARRAY
35694: PUSH
35695: LD_INT 3
35697: ARRAY
35698: PPUSH
35699: LD_EXP 106
35703: PUSH
35704: LD_VAR 0 2
35708: ARRAY
35709: PUSH
35710: LD_INT 4
35712: ARRAY
35713: PPUSH
35714: CALL_OW 171
// end ; end ;
35718: LD_VAR 0 3
35722: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35723: LD_INT 0
35725: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35726: LD_VAR 0 1
35730: PUSH
35731: LD_INT 250
35733: EQUAL
35734: PUSH
35735: LD_VAR 0 2
35739: PPUSH
35740: CALL_OW 264
35744: PUSH
35745: LD_INT 81
35747: EQUAL
35748: AND
35749: IFFALSE 35770
// MinerPlaceMine ( unit , x , y ) ;
35751: LD_VAR 0 2
35755: PPUSH
35756: LD_VAR 0 4
35760: PPUSH
35761: LD_VAR 0 5
35765: PPUSH
35766: CALL 38155 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35770: LD_VAR 0 1
35774: PUSH
35775: LD_INT 251
35777: EQUAL
35778: PUSH
35779: LD_VAR 0 2
35783: PPUSH
35784: CALL_OW 264
35788: PUSH
35789: LD_INT 81
35791: EQUAL
35792: AND
35793: IFFALSE 35814
// MinerDetonateMine ( unit , x , y ) ;
35795: LD_VAR 0 2
35799: PPUSH
35800: LD_VAR 0 4
35804: PPUSH
35805: LD_VAR 0 5
35809: PPUSH
35810: CALL 38430 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35814: LD_VAR 0 1
35818: PUSH
35819: LD_INT 252
35821: EQUAL
35822: PUSH
35823: LD_VAR 0 2
35827: PPUSH
35828: CALL_OW 264
35832: PUSH
35833: LD_INT 81
35835: EQUAL
35836: AND
35837: IFFALSE 35858
// MinerCreateMinefield ( unit , x , y ) ;
35839: LD_VAR 0 2
35843: PPUSH
35844: LD_VAR 0 4
35848: PPUSH
35849: LD_VAR 0 5
35853: PPUSH
35854: CALL 38847 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35858: LD_VAR 0 1
35862: PUSH
35863: LD_INT 253
35865: EQUAL
35866: PUSH
35867: LD_VAR 0 2
35871: PPUSH
35872: CALL_OW 257
35876: PUSH
35877: LD_INT 5
35879: EQUAL
35880: AND
35881: IFFALSE 35902
// ComBinocular ( unit , x , y ) ;
35883: LD_VAR 0 2
35887: PPUSH
35888: LD_VAR 0 4
35892: PPUSH
35893: LD_VAR 0 5
35897: PPUSH
35898: CALL 39216 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35902: LD_VAR 0 1
35906: PUSH
35907: LD_INT 254
35909: EQUAL
35910: PUSH
35911: LD_VAR 0 2
35915: PPUSH
35916: CALL_OW 264
35920: PUSH
35921: LD_INT 99
35923: EQUAL
35924: AND
35925: PUSH
35926: LD_VAR 0 3
35930: PPUSH
35931: CALL_OW 263
35935: PUSH
35936: LD_INT 3
35938: EQUAL
35939: AND
35940: IFFALSE 35956
// HackDestroyVehicle ( unit , selectedUnit ) ;
35942: LD_VAR 0 2
35946: PPUSH
35947: LD_VAR 0 3
35951: PPUSH
35952: CALL 37519 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35956: LD_VAR 0 1
35960: PUSH
35961: LD_INT 255
35963: EQUAL
35964: PUSH
35965: LD_VAR 0 2
35969: PPUSH
35970: CALL_OW 264
35974: PUSH
35975: LD_INT 14
35977: PUSH
35978: LD_INT 53
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: IN
35985: AND
35986: PUSH
35987: LD_VAR 0 4
35991: PPUSH
35992: LD_VAR 0 5
35996: PPUSH
35997: CALL_OW 488
36001: AND
36002: IFFALSE 36026
// CutTreeXYR ( unit , x , y , 12 ) ;
36004: LD_VAR 0 2
36008: PPUSH
36009: LD_VAR 0 4
36013: PPUSH
36014: LD_VAR 0 5
36018: PPUSH
36019: LD_INT 12
36021: PPUSH
36022: CALL 36089 0 4
// if cmd = 256 then
36026: LD_VAR 0 1
36030: PUSH
36031: LD_INT 256
36033: EQUAL
36034: IFFALSE 36055
// SetFactoryWaypoint ( unit , x , y ) ;
36036: LD_VAR 0 2
36040: PPUSH
36041: LD_VAR 0 4
36045: PPUSH
36046: LD_VAR 0 5
36050: PPUSH
36051: CALL 34036 0 3
// if cmd = 257 then
36055: LD_VAR 0 1
36059: PUSH
36060: LD_INT 257
36062: EQUAL
36063: IFFALSE 36084
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36065: LD_VAR 0 2
36069: PPUSH
36070: LD_VAR 0 4
36074: PPUSH
36075: LD_VAR 0 5
36079: PPUSH
36080: CALL 34398 0 3
// end ;
36084: LD_VAR 0 6
36088: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36089: LD_INT 0
36091: PPUSH
36092: PPUSH
36093: PPUSH
36094: PPUSH
36095: PPUSH
36096: PPUSH
36097: PPUSH
36098: PPUSH
36099: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36100: LD_VAR 0 1
36104: NOT
36105: PUSH
36106: LD_VAR 0 2
36110: PPUSH
36111: LD_VAR 0 3
36115: PPUSH
36116: CALL_OW 488
36120: NOT
36121: OR
36122: PUSH
36123: LD_VAR 0 4
36127: NOT
36128: OR
36129: IFFALSE 36133
// exit ;
36131: GO 36473
// list := [ ] ;
36133: LD_ADDR_VAR 0 13
36137: PUSH
36138: EMPTY
36139: ST_TO_ADDR
// if x - r < 0 then
36140: LD_VAR 0 2
36144: PUSH
36145: LD_VAR 0 4
36149: MINUS
36150: PUSH
36151: LD_INT 0
36153: LESS
36154: IFFALSE 36166
// min_x := 0 else
36156: LD_ADDR_VAR 0 7
36160: PUSH
36161: LD_INT 0
36163: ST_TO_ADDR
36164: GO 36182
// min_x := x - r ;
36166: LD_ADDR_VAR 0 7
36170: PUSH
36171: LD_VAR 0 2
36175: PUSH
36176: LD_VAR 0 4
36180: MINUS
36181: ST_TO_ADDR
// if y - r < 0 then
36182: LD_VAR 0 3
36186: PUSH
36187: LD_VAR 0 4
36191: MINUS
36192: PUSH
36193: LD_INT 0
36195: LESS
36196: IFFALSE 36208
// min_y := 0 else
36198: LD_ADDR_VAR 0 8
36202: PUSH
36203: LD_INT 0
36205: ST_TO_ADDR
36206: GO 36224
// min_y := y - r ;
36208: LD_ADDR_VAR 0 8
36212: PUSH
36213: LD_VAR 0 3
36217: PUSH
36218: LD_VAR 0 4
36222: MINUS
36223: ST_TO_ADDR
// max_x := x + r ;
36224: LD_ADDR_VAR 0 9
36228: PUSH
36229: LD_VAR 0 2
36233: PUSH
36234: LD_VAR 0 4
36238: PLUS
36239: ST_TO_ADDR
// max_y := y + r ;
36240: LD_ADDR_VAR 0 10
36244: PUSH
36245: LD_VAR 0 3
36249: PUSH
36250: LD_VAR 0 4
36254: PLUS
36255: ST_TO_ADDR
// for _x = min_x to max_x do
36256: LD_ADDR_VAR 0 11
36260: PUSH
36261: DOUBLE
36262: LD_VAR 0 7
36266: DEC
36267: ST_TO_ADDR
36268: LD_VAR 0 9
36272: PUSH
36273: FOR_TO
36274: IFFALSE 36391
// for _y = min_y to max_y do
36276: LD_ADDR_VAR 0 12
36280: PUSH
36281: DOUBLE
36282: LD_VAR 0 8
36286: DEC
36287: ST_TO_ADDR
36288: LD_VAR 0 10
36292: PUSH
36293: FOR_TO
36294: IFFALSE 36387
// begin if not ValidHex ( _x , _y ) then
36296: LD_VAR 0 11
36300: PPUSH
36301: LD_VAR 0 12
36305: PPUSH
36306: CALL_OW 488
36310: NOT
36311: IFFALSE 36315
// continue ;
36313: GO 36293
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36315: LD_VAR 0 11
36319: PPUSH
36320: LD_VAR 0 12
36324: PPUSH
36325: CALL_OW 351
36329: PUSH
36330: LD_VAR 0 11
36334: PPUSH
36335: LD_VAR 0 12
36339: PPUSH
36340: CALL_OW 554
36344: AND
36345: IFFALSE 36385
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36347: LD_ADDR_VAR 0 13
36351: PUSH
36352: LD_VAR 0 13
36356: PPUSH
36357: LD_VAR 0 13
36361: PUSH
36362: LD_INT 1
36364: PLUS
36365: PPUSH
36366: LD_VAR 0 11
36370: PUSH
36371: LD_VAR 0 12
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PPUSH
36380: CALL_OW 2
36384: ST_TO_ADDR
// end ;
36385: GO 36293
36387: POP
36388: POP
36389: GO 36273
36391: POP
36392: POP
// if not list then
36393: LD_VAR 0 13
36397: NOT
36398: IFFALSE 36402
// exit ;
36400: GO 36473
// for i in list do
36402: LD_ADDR_VAR 0 6
36406: PUSH
36407: LD_VAR 0 13
36411: PUSH
36412: FOR_IN
36413: IFFALSE 36471
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36415: LD_VAR 0 1
36419: PPUSH
36420: LD_STRING M
36422: PUSH
36423: LD_VAR 0 6
36427: PUSH
36428: LD_INT 1
36430: ARRAY
36431: PUSH
36432: LD_VAR 0 6
36436: PUSH
36437: LD_INT 2
36439: ARRAY
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: PUSH
36462: EMPTY
36463: LIST
36464: PPUSH
36465: CALL_OW 447
36469: GO 36412
36471: POP
36472: POP
// end ;
36473: LD_VAR 0 5
36477: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36478: LD_EXP 109
36482: NOT
36483: IFFALSE 36533
36485: GO 36487
36487: DISABLE
// begin initHack := true ;
36488: LD_ADDR_EXP 109
36492: PUSH
36493: LD_INT 1
36495: ST_TO_ADDR
// hackTanks := [ ] ;
36496: LD_ADDR_EXP 110
36500: PUSH
36501: EMPTY
36502: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36503: LD_ADDR_EXP 111
36507: PUSH
36508: EMPTY
36509: ST_TO_ADDR
// hackLimit := 3 ;
36510: LD_ADDR_EXP 112
36514: PUSH
36515: LD_INT 3
36517: ST_TO_ADDR
// hackDist := 12 ;
36518: LD_ADDR_EXP 113
36522: PUSH
36523: LD_INT 12
36525: ST_TO_ADDR
// hackCounter := [ ] ;
36526: LD_ADDR_EXP 114
36530: PUSH
36531: EMPTY
36532: ST_TO_ADDR
// end ;
36533: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36534: LD_EXP 109
36538: PUSH
36539: LD_INT 34
36541: PUSH
36542: LD_INT 99
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PPUSH
36549: CALL_OW 69
36553: AND
36554: IFFALSE 36807
36556: GO 36558
36558: DISABLE
36559: LD_INT 0
36561: PPUSH
36562: PPUSH
// begin enable ;
36563: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36564: LD_ADDR_VAR 0 1
36568: PUSH
36569: LD_INT 34
36571: PUSH
36572: LD_INT 99
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PPUSH
36579: CALL_OW 69
36583: PUSH
36584: FOR_IN
36585: IFFALSE 36805
// begin if not i in hackTanks then
36587: LD_VAR 0 1
36591: PUSH
36592: LD_EXP 110
36596: IN
36597: NOT
36598: IFFALSE 36681
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36600: LD_ADDR_EXP 110
36604: PUSH
36605: LD_EXP 110
36609: PPUSH
36610: LD_EXP 110
36614: PUSH
36615: LD_INT 1
36617: PLUS
36618: PPUSH
36619: LD_VAR 0 1
36623: PPUSH
36624: CALL_OW 1
36628: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36629: LD_ADDR_EXP 111
36633: PUSH
36634: LD_EXP 111
36638: PPUSH
36639: LD_EXP 111
36643: PUSH
36644: LD_INT 1
36646: PLUS
36647: PPUSH
36648: EMPTY
36649: PPUSH
36650: CALL_OW 1
36654: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36655: LD_ADDR_EXP 114
36659: PUSH
36660: LD_EXP 114
36664: PPUSH
36665: LD_EXP 114
36669: PUSH
36670: LD_INT 1
36672: PLUS
36673: PPUSH
36674: EMPTY
36675: PPUSH
36676: CALL_OW 1
36680: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36681: LD_VAR 0 1
36685: PPUSH
36686: CALL_OW 302
36690: NOT
36691: IFFALSE 36704
// begin HackUnlinkAll ( i ) ;
36693: LD_VAR 0 1
36697: PPUSH
36698: CALL 36810 0 1
// continue ;
36702: GO 36584
// end ; HackCheckCapturedStatus ( i ) ;
36704: LD_VAR 0 1
36708: PPUSH
36709: CALL 37253 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36713: LD_ADDR_VAR 0 2
36717: PUSH
36718: LD_INT 81
36720: PUSH
36721: LD_VAR 0 1
36725: PPUSH
36726: CALL_OW 255
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 33
36737: PUSH
36738: LD_INT 3
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 91
36747: PUSH
36748: LD_VAR 0 1
36752: PUSH
36753: LD_EXP 113
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 50
36765: PUSH
36766: EMPTY
36767: LIST
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: PPUSH
36775: CALL_OW 69
36779: ST_TO_ADDR
// if not tmp then
36780: LD_VAR 0 2
36784: NOT
36785: IFFALSE 36789
// continue ;
36787: GO 36584
// HackLink ( i , tmp ) ;
36789: LD_VAR 0 1
36793: PPUSH
36794: LD_VAR 0 2
36798: PPUSH
36799: CALL 36946 0 2
// end ;
36803: GO 36584
36805: POP
36806: POP
// end ;
36807: PPOPN 2
36809: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36810: LD_INT 0
36812: PPUSH
36813: PPUSH
36814: PPUSH
// if not hack in hackTanks then
36815: LD_VAR 0 1
36819: PUSH
36820: LD_EXP 110
36824: IN
36825: NOT
36826: IFFALSE 36830
// exit ;
36828: GO 36941
// index := GetElementIndex ( hackTanks , hack ) ;
36830: LD_ADDR_VAR 0 4
36834: PUSH
36835: LD_EXP 110
36839: PPUSH
36840: LD_VAR 0 1
36844: PPUSH
36845: CALL 44558 0 2
36849: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36850: LD_EXP 111
36854: PUSH
36855: LD_VAR 0 4
36859: ARRAY
36860: IFFALSE 36941
// begin for i in hackTanksCaptured [ index ] do
36862: LD_ADDR_VAR 0 3
36866: PUSH
36867: LD_EXP 111
36871: PUSH
36872: LD_VAR 0 4
36876: ARRAY
36877: PUSH
36878: FOR_IN
36879: IFFALSE 36905
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36881: LD_VAR 0 3
36885: PUSH
36886: LD_INT 1
36888: ARRAY
36889: PPUSH
36890: LD_VAR 0 3
36894: PUSH
36895: LD_INT 2
36897: ARRAY
36898: PPUSH
36899: CALL_OW 235
36903: GO 36878
36905: POP
36906: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36907: LD_ADDR_EXP 111
36911: PUSH
36912: LD_EXP 111
36916: PPUSH
36917: LD_VAR 0 4
36921: PPUSH
36922: EMPTY
36923: PPUSH
36924: CALL_OW 1
36928: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36929: LD_VAR 0 1
36933: PPUSH
36934: LD_INT 0
36936: PPUSH
36937: CALL_OW 505
// end ; end ;
36941: LD_VAR 0 2
36945: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36946: LD_INT 0
36948: PPUSH
36949: PPUSH
36950: PPUSH
// if not hack in hackTanks or not vehicles then
36951: LD_VAR 0 1
36955: PUSH
36956: LD_EXP 110
36960: IN
36961: NOT
36962: PUSH
36963: LD_VAR 0 2
36967: NOT
36968: OR
36969: IFFALSE 36973
// exit ;
36971: GO 37248
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36973: LD_ADDR_VAR 0 2
36977: PUSH
36978: LD_VAR 0 1
36982: PPUSH
36983: LD_VAR 0 2
36987: PPUSH
36988: LD_INT 1
36990: PPUSH
36991: LD_INT 1
36993: PPUSH
36994: CALL 45208 0 4
36998: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36999: LD_ADDR_VAR 0 5
37003: PUSH
37004: LD_EXP 110
37008: PPUSH
37009: LD_VAR 0 1
37013: PPUSH
37014: CALL 44558 0 2
37018: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37019: LD_EXP 111
37023: PUSH
37024: LD_VAR 0 5
37028: ARRAY
37029: PUSH
37030: LD_EXP 112
37034: LESS
37035: IFFALSE 37224
// begin for i := 1 to vehicles do
37037: LD_ADDR_VAR 0 4
37041: PUSH
37042: DOUBLE
37043: LD_INT 1
37045: DEC
37046: ST_TO_ADDR
37047: LD_VAR 0 2
37051: PUSH
37052: FOR_TO
37053: IFFALSE 37222
// begin if hackTanksCaptured [ index ] = hackLimit then
37055: LD_EXP 111
37059: PUSH
37060: LD_VAR 0 5
37064: ARRAY
37065: PUSH
37066: LD_EXP 112
37070: EQUAL
37071: IFFALSE 37075
// break ;
37073: GO 37222
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37075: LD_ADDR_EXP 114
37079: PUSH
37080: LD_EXP 114
37084: PPUSH
37085: LD_VAR 0 5
37089: PPUSH
37090: LD_EXP 114
37094: PUSH
37095: LD_VAR 0 5
37099: ARRAY
37100: PUSH
37101: LD_INT 1
37103: PLUS
37104: PPUSH
37105: CALL_OW 1
37109: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37110: LD_ADDR_EXP 111
37114: PUSH
37115: LD_EXP 111
37119: PPUSH
37120: LD_VAR 0 5
37124: PUSH
37125: LD_EXP 111
37129: PUSH
37130: LD_VAR 0 5
37134: ARRAY
37135: PUSH
37136: LD_INT 1
37138: PLUS
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PPUSH
37144: LD_VAR 0 2
37148: PUSH
37149: LD_VAR 0 4
37153: ARRAY
37154: PUSH
37155: LD_VAR 0 2
37159: PUSH
37160: LD_VAR 0 4
37164: ARRAY
37165: PPUSH
37166: CALL_OW 255
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PPUSH
37175: CALL 44773 0 3
37179: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37180: LD_VAR 0 2
37184: PUSH
37185: LD_VAR 0 4
37189: ARRAY
37190: PPUSH
37191: LD_VAR 0 1
37195: PPUSH
37196: CALL_OW 255
37200: PPUSH
37201: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37205: LD_VAR 0 2
37209: PUSH
37210: LD_VAR 0 4
37214: ARRAY
37215: PPUSH
37216: CALL_OW 141
// end ;
37220: GO 37052
37222: POP
37223: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37224: LD_VAR 0 1
37228: PPUSH
37229: LD_EXP 111
37233: PUSH
37234: LD_VAR 0 5
37238: ARRAY
37239: PUSH
37240: LD_INT 0
37242: PLUS
37243: PPUSH
37244: CALL_OW 505
// end ;
37248: LD_VAR 0 3
37252: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37253: LD_INT 0
37255: PPUSH
37256: PPUSH
37257: PPUSH
37258: PPUSH
// if not hack in hackTanks then
37259: LD_VAR 0 1
37263: PUSH
37264: LD_EXP 110
37268: IN
37269: NOT
37270: IFFALSE 37274
// exit ;
37272: GO 37514
// index := GetElementIndex ( hackTanks , hack ) ;
37274: LD_ADDR_VAR 0 4
37278: PUSH
37279: LD_EXP 110
37283: PPUSH
37284: LD_VAR 0 1
37288: PPUSH
37289: CALL 44558 0 2
37293: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37294: LD_ADDR_VAR 0 3
37298: PUSH
37299: DOUBLE
37300: LD_EXP 111
37304: PUSH
37305: LD_VAR 0 4
37309: ARRAY
37310: INC
37311: ST_TO_ADDR
37312: LD_INT 1
37314: PUSH
37315: FOR_DOWNTO
37316: IFFALSE 37488
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37318: LD_ADDR_VAR 0 5
37322: PUSH
37323: LD_EXP 111
37327: PUSH
37328: LD_VAR 0 4
37332: ARRAY
37333: PUSH
37334: LD_VAR 0 3
37338: ARRAY
37339: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37340: LD_VAR 0 5
37344: PUSH
37345: LD_INT 1
37347: ARRAY
37348: PPUSH
37349: CALL_OW 302
37353: NOT
37354: PUSH
37355: LD_VAR 0 5
37359: PUSH
37360: LD_INT 1
37362: ARRAY
37363: PPUSH
37364: CALL_OW 255
37368: PUSH
37369: LD_VAR 0 1
37373: PPUSH
37374: CALL_OW 255
37378: NONEQUAL
37379: OR
37380: IFFALSE 37486
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37382: LD_VAR 0 5
37386: PUSH
37387: LD_INT 1
37389: ARRAY
37390: PPUSH
37391: CALL_OW 305
37395: PUSH
37396: LD_VAR 0 5
37400: PUSH
37401: LD_INT 1
37403: ARRAY
37404: PPUSH
37405: CALL_OW 255
37409: PUSH
37410: LD_VAR 0 1
37414: PPUSH
37415: CALL_OW 255
37419: EQUAL
37420: AND
37421: IFFALSE 37445
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37423: LD_VAR 0 5
37427: PUSH
37428: LD_INT 1
37430: ARRAY
37431: PPUSH
37432: LD_VAR 0 5
37436: PUSH
37437: LD_INT 2
37439: ARRAY
37440: PPUSH
37441: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37445: LD_ADDR_EXP 111
37449: PUSH
37450: LD_EXP 111
37454: PPUSH
37455: LD_VAR 0 4
37459: PPUSH
37460: LD_EXP 111
37464: PUSH
37465: LD_VAR 0 4
37469: ARRAY
37470: PPUSH
37471: LD_VAR 0 3
37475: PPUSH
37476: CALL_OW 3
37480: PPUSH
37481: CALL_OW 1
37485: ST_TO_ADDR
// end ; end ;
37486: GO 37315
37488: POP
37489: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37490: LD_VAR 0 1
37494: PPUSH
37495: LD_EXP 111
37499: PUSH
37500: LD_VAR 0 4
37504: ARRAY
37505: PUSH
37506: LD_INT 0
37508: PLUS
37509: PPUSH
37510: CALL_OW 505
// end ;
37514: LD_VAR 0 2
37518: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37519: LD_INT 0
37521: PPUSH
37522: PPUSH
37523: PPUSH
37524: PPUSH
// if not hack in hackTanks then
37525: LD_VAR 0 1
37529: PUSH
37530: LD_EXP 110
37534: IN
37535: NOT
37536: IFFALSE 37540
// exit ;
37538: GO 37625
// index := GetElementIndex ( hackTanks , hack ) ;
37540: LD_ADDR_VAR 0 5
37544: PUSH
37545: LD_EXP 110
37549: PPUSH
37550: LD_VAR 0 1
37554: PPUSH
37555: CALL 44558 0 2
37559: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37560: LD_ADDR_VAR 0 4
37564: PUSH
37565: DOUBLE
37566: LD_INT 1
37568: DEC
37569: ST_TO_ADDR
37570: LD_EXP 111
37574: PUSH
37575: LD_VAR 0 5
37579: ARRAY
37580: PUSH
37581: FOR_TO
37582: IFFALSE 37623
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37584: LD_EXP 111
37588: PUSH
37589: LD_VAR 0 5
37593: ARRAY
37594: PUSH
37595: LD_VAR 0 4
37599: ARRAY
37600: PUSH
37601: LD_INT 1
37603: ARRAY
37604: PUSH
37605: LD_VAR 0 2
37609: EQUAL
37610: IFFALSE 37621
// KillUnit ( vehicle ) ;
37612: LD_VAR 0 2
37616: PPUSH
37617: CALL_OW 66
37621: GO 37581
37623: POP
37624: POP
// end ;
37625: LD_VAR 0 3
37629: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37630: LD_EXP 115
37634: NOT
37635: IFFALSE 37670
37637: GO 37639
37639: DISABLE
// begin initMiner := true ;
37640: LD_ADDR_EXP 115
37644: PUSH
37645: LD_INT 1
37647: ST_TO_ADDR
// minersList := [ ] ;
37648: LD_ADDR_EXP 116
37652: PUSH
37653: EMPTY
37654: ST_TO_ADDR
// minerMinesList := [ ] ;
37655: LD_ADDR_EXP 117
37659: PUSH
37660: EMPTY
37661: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37662: LD_ADDR_EXP 118
37666: PUSH
37667: LD_INT 5
37669: ST_TO_ADDR
// end ;
37670: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37671: LD_EXP 115
37675: PUSH
37676: LD_INT 34
37678: PUSH
37679: LD_INT 81
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PPUSH
37686: CALL_OW 69
37690: AND
37691: IFFALSE 38152
37693: GO 37695
37695: DISABLE
37696: LD_INT 0
37698: PPUSH
37699: PPUSH
37700: PPUSH
37701: PPUSH
// begin enable ;
37702: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37703: LD_ADDR_VAR 0 1
37707: PUSH
37708: LD_INT 34
37710: PUSH
37711: LD_INT 81
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PPUSH
37718: CALL_OW 69
37722: PUSH
37723: FOR_IN
37724: IFFALSE 37796
// begin if not i in minersList then
37726: LD_VAR 0 1
37730: PUSH
37731: LD_EXP 116
37735: IN
37736: NOT
37737: IFFALSE 37794
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37739: LD_ADDR_EXP 116
37743: PUSH
37744: LD_EXP 116
37748: PPUSH
37749: LD_EXP 116
37753: PUSH
37754: LD_INT 1
37756: PLUS
37757: PPUSH
37758: LD_VAR 0 1
37762: PPUSH
37763: CALL_OW 1
37767: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37768: LD_ADDR_EXP 117
37772: PUSH
37773: LD_EXP 117
37777: PPUSH
37778: LD_EXP 117
37782: PUSH
37783: LD_INT 1
37785: PLUS
37786: PPUSH
37787: EMPTY
37788: PPUSH
37789: CALL_OW 1
37793: ST_TO_ADDR
// end end ;
37794: GO 37723
37796: POP
37797: POP
// for i := minerMinesList downto 1 do
37798: LD_ADDR_VAR 0 1
37802: PUSH
37803: DOUBLE
37804: LD_EXP 117
37808: INC
37809: ST_TO_ADDR
37810: LD_INT 1
37812: PUSH
37813: FOR_DOWNTO
37814: IFFALSE 38150
// begin if IsLive ( minersList [ i ] ) then
37816: LD_EXP 116
37820: PUSH
37821: LD_VAR 0 1
37825: ARRAY
37826: PPUSH
37827: CALL_OW 300
37831: IFFALSE 37859
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37833: LD_EXP 116
37837: PUSH
37838: LD_VAR 0 1
37842: ARRAY
37843: PPUSH
37844: LD_EXP 117
37848: PUSH
37849: LD_VAR 0 1
37853: ARRAY
37854: PPUSH
37855: CALL_OW 505
// if not minerMinesList [ i ] then
37859: LD_EXP 117
37863: PUSH
37864: LD_VAR 0 1
37868: ARRAY
37869: NOT
37870: IFFALSE 37874
// continue ;
37872: GO 37813
// for j := minerMinesList [ i ] downto 1 do
37874: LD_ADDR_VAR 0 2
37878: PUSH
37879: DOUBLE
37880: LD_EXP 117
37884: PUSH
37885: LD_VAR 0 1
37889: ARRAY
37890: INC
37891: ST_TO_ADDR
37892: LD_INT 1
37894: PUSH
37895: FOR_DOWNTO
37896: IFFALSE 38146
// begin side := GetSide ( minersList [ i ] ) ;
37898: LD_ADDR_VAR 0 3
37902: PUSH
37903: LD_EXP 116
37907: PUSH
37908: LD_VAR 0 1
37912: ARRAY
37913: PPUSH
37914: CALL_OW 255
37918: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37919: LD_ADDR_VAR 0 4
37923: PUSH
37924: LD_EXP 117
37928: PUSH
37929: LD_VAR 0 1
37933: ARRAY
37934: PUSH
37935: LD_VAR 0 2
37939: ARRAY
37940: PUSH
37941: LD_INT 1
37943: ARRAY
37944: PPUSH
37945: LD_EXP 117
37949: PUSH
37950: LD_VAR 0 1
37954: ARRAY
37955: PUSH
37956: LD_VAR 0 2
37960: ARRAY
37961: PUSH
37962: LD_INT 2
37964: ARRAY
37965: PPUSH
37966: CALL_OW 428
37970: ST_TO_ADDR
// if not tmp then
37971: LD_VAR 0 4
37975: NOT
37976: IFFALSE 37980
// continue ;
37978: GO 37895
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37980: LD_VAR 0 4
37984: PUSH
37985: LD_INT 81
37987: PUSH
37988: LD_VAR 0 3
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PPUSH
37997: CALL_OW 69
38001: IN
38002: PUSH
38003: LD_EXP 117
38007: PUSH
38008: LD_VAR 0 1
38012: ARRAY
38013: PUSH
38014: LD_VAR 0 2
38018: ARRAY
38019: PUSH
38020: LD_INT 1
38022: ARRAY
38023: PPUSH
38024: LD_EXP 117
38028: PUSH
38029: LD_VAR 0 1
38033: ARRAY
38034: PUSH
38035: LD_VAR 0 2
38039: ARRAY
38040: PUSH
38041: LD_INT 2
38043: ARRAY
38044: PPUSH
38045: CALL_OW 458
38049: AND
38050: IFFALSE 38144
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38052: LD_EXP 117
38056: PUSH
38057: LD_VAR 0 1
38061: ARRAY
38062: PUSH
38063: LD_VAR 0 2
38067: ARRAY
38068: PUSH
38069: LD_INT 1
38071: ARRAY
38072: PPUSH
38073: LD_EXP 117
38077: PUSH
38078: LD_VAR 0 1
38082: ARRAY
38083: PUSH
38084: LD_VAR 0 2
38088: ARRAY
38089: PUSH
38090: LD_INT 2
38092: ARRAY
38093: PPUSH
38094: LD_VAR 0 3
38098: PPUSH
38099: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38103: LD_ADDR_EXP 117
38107: PUSH
38108: LD_EXP 117
38112: PPUSH
38113: LD_VAR 0 1
38117: PPUSH
38118: LD_EXP 117
38122: PUSH
38123: LD_VAR 0 1
38127: ARRAY
38128: PPUSH
38129: LD_VAR 0 2
38133: PPUSH
38134: CALL_OW 3
38138: PPUSH
38139: CALL_OW 1
38143: ST_TO_ADDR
// end ; end ;
38144: GO 37895
38146: POP
38147: POP
// end ;
38148: GO 37813
38150: POP
38151: POP
// end ;
38152: PPOPN 4
38154: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38155: LD_INT 0
38157: PPUSH
38158: PPUSH
// result := false ;
38159: LD_ADDR_VAR 0 4
38163: PUSH
38164: LD_INT 0
38166: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38167: LD_VAR 0 1
38171: PPUSH
38172: CALL_OW 264
38176: PUSH
38177: LD_INT 81
38179: EQUAL
38180: NOT
38181: IFFALSE 38185
// exit ;
38183: GO 38425
// index := GetElementIndex ( minersList , unit ) ;
38185: LD_ADDR_VAR 0 5
38189: PUSH
38190: LD_EXP 116
38194: PPUSH
38195: LD_VAR 0 1
38199: PPUSH
38200: CALL 44558 0 2
38204: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38205: LD_EXP 117
38209: PUSH
38210: LD_VAR 0 5
38214: ARRAY
38215: PUSH
38216: LD_EXP 118
38220: GREATEREQUAL
38221: IFFALSE 38225
// exit ;
38223: GO 38425
// ComMoveXY ( unit , x , y ) ;
38225: LD_VAR 0 1
38229: PPUSH
38230: LD_VAR 0 2
38234: PPUSH
38235: LD_VAR 0 3
38239: PPUSH
38240: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38244: LD_INT 35
38246: PPUSH
38247: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38251: LD_VAR 0 1
38255: PPUSH
38256: LD_VAR 0 2
38260: PPUSH
38261: LD_VAR 0 3
38265: PPUSH
38266: CALL 75821 0 3
38270: NOT
38271: PUSH
38272: LD_VAR 0 1
38276: PPUSH
38277: CALL_OW 314
38281: AND
38282: IFFALSE 38286
// exit ;
38284: GO 38425
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38286: LD_VAR 0 2
38290: PPUSH
38291: LD_VAR 0 3
38295: PPUSH
38296: CALL_OW 428
38300: PUSH
38301: LD_VAR 0 1
38305: EQUAL
38306: PUSH
38307: LD_VAR 0 1
38311: PPUSH
38312: CALL_OW 314
38316: NOT
38317: AND
38318: IFFALSE 38244
// PlaySoundXY ( x , y , PlantMine ) ;
38320: LD_VAR 0 2
38324: PPUSH
38325: LD_VAR 0 3
38329: PPUSH
38330: LD_STRING PlantMine
38332: PPUSH
38333: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38337: LD_VAR 0 2
38341: PPUSH
38342: LD_VAR 0 3
38346: PPUSH
38347: LD_VAR 0 1
38351: PPUSH
38352: CALL_OW 255
38356: PPUSH
38357: LD_INT 0
38359: PPUSH
38360: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38364: LD_ADDR_EXP 117
38368: PUSH
38369: LD_EXP 117
38373: PPUSH
38374: LD_VAR 0 5
38378: PUSH
38379: LD_EXP 117
38383: PUSH
38384: LD_VAR 0 5
38388: ARRAY
38389: PUSH
38390: LD_INT 1
38392: PLUS
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PPUSH
38398: LD_VAR 0 2
38402: PUSH
38403: LD_VAR 0 3
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PPUSH
38412: CALL 44773 0 3
38416: ST_TO_ADDR
// result := true ;
38417: LD_ADDR_VAR 0 4
38421: PUSH
38422: LD_INT 1
38424: ST_TO_ADDR
// end ;
38425: LD_VAR 0 4
38429: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38430: LD_INT 0
38432: PPUSH
38433: PPUSH
38434: PPUSH
// if not unit in minersList then
38435: LD_VAR 0 1
38439: PUSH
38440: LD_EXP 116
38444: IN
38445: NOT
38446: IFFALSE 38450
// exit ;
38448: GO 38842
// index := GetElementIndex ( minersList , unit ) ;
38450: LD_ADDR_VAR 0 6
38454: PUSH
38455: LD_EXP 116
38459: PPUSH
38460: LD_VAR 0 1
38464: PPUSH
38465: CALL 44558 0 2
38469: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38470: LD_ADDR_VAR 0 5
38474: PUSH
38475: DOUBLE
38476: LD_EXP 117
38480: PUSH
38481: LD_VAR 0 6
38485: ARRAY
38486: INC
38487: ST_TO_ADDR
38488: LD_INT 1
38490: PUSH
38491: FOR_DOWNTO
38492: IFFALSE 38653
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38494: LD_EXP 117
38498: PUSH
38499: LD_VAR 0 6
38503: ARRAY
38504: PUSH
38505: LD_VAR 0 5
38509: ARRAY
38510: PUSH
38511: LD_INT 1
38513: ARRAY
38514: PUSH
38515: LD_VAR 0 2
38519: EQUAL
38520: PUSH
38521: LD_EXP 117
38525: PUSH
38526: LD_VAR 0 6
38530: ARRAY
38531: PUSH
38532: LD_VAR 0 5
38536: ARRAY
38537: PUSH
38538: LD_INT 2
38540: ARRAY
38541: PUSH
38542: LD_VAR 0 3
38546: EQUAL
38547: AND
38548: IFFALSE 38651
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38550: LD_EXP 117
38554: PUSH
38555: LD_VAR 0 6
38559: ARRAY
38560: PUSH
38561: LD_VAR 0 5
38565: ARRAY
38566: PUSH
38567: LD_INT 1
38569: ARRAY
38570: PPUSH
38571: LD_EXP 117
38575: PUSH
38576: LD_VAR 0 6
38580: ARRAY
38581: PUSH
38582: LD_VAR 0 5
38586: ARRAY
38587: PUSH
38588: LD_INT 2
38590: ARRAY
38591: PPUSH
38592: LD_VAR 0 1
38596: PPUSH
38597: CALL_OW 255
38601: PPUSH
38602: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38606: LD_ADDR_EXP 117
38610: PUSH
38611: LD_EXP 117
38615: PPUSH
38616: LD_VAR 0 6
38620: PPUSH
38621: LD_EXP 117
38625: PUSH
38626: LD_VAR 0 6
38630: ARRAY
38631: PPUSH
38632: LD_VAR 0 5
38636: PPUSH
38637: CALL_OW 3
38641: PPUSH
38642: CALL_OW 1
38646: ST_TO_ADDR
// exit ;
38647: POP
38648: POP
38649: GO 38842
// end ; end ;
38651: GO 38491
38653: POP
38654: POP
// for i := minerMinesList [ index ] downto 1 do
38655: LD_ADDR_VAR 0 5
38659: PUSH
38660: DOUBLE
38661: LD_EXP 117
38665: PUSH
38666: LD_VAR 0 6
38670: ARRAY
38671: INC
38672: ST_TO_ADDR
38673: LD_INT 1
38675: PUSH
38676: FOR_DOWNTO
38677: IFFALSE 38840
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38679: LD_EXP 117
38683: PUSH
38684: LD_VAR 0 6
38688: ARRAY
38689: PUSH
38690: LD_VAR 0 5
38694: ARRAY
38695: PUSH
38696: LD_INT 1
38698: ARRAY
38699: PPUSH
38700: LD_EXP 117
38704: PUSH
38705: LD_VAR 0 6
38709: ARRAY
38710: PUSH
38711: LD_VAR 0 5
38715: ARRAY
38716: PUSH
38717: LD_INT 2
38719: ARRAY
38720: PPUSH
38721: LD_VAR 0 2
38725: PPUSH
38726: LD_VAR 0 3
38730: PPUSH
38731: CALL_OW 298
38735: PUSH
38736: LD_INT 6
38738: LESS
38739: IFFALSE 38838
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38741: LD_EXP 117
38745: PUSH
38746: LD_VAR 0 6
38750: ARRAY
38751: PUSH
38752: LD_VAR 0 5
38756: ARRAY
38757: PUSH
38758: LD_INT 1
38760: ARRAY
38761: PPUSH
38762: LD_EXP 117
38766: PUSH
38767: LD_VAR 0 6
38771: ARRAY
38772: PUSH
38773: LD_VAR 0 5
38777: ARRAY
38778: PUSH
38779: LD_INT 2
38781: ARRAY
38782: PPUSH
38783: LD_VAR 0 1
38787: PPUSH
38788: CALL_OW 255
38792: PPUSH
38793: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38797: LD_ADDR_EXP 117
38801: PUSH
38802: LD_EXP 117
38806: PPUSH
38807: LD_VAR 0 6
38811: PPUSH
38812: LD_EXP 117
38816: PUSH
38817: LD_VAR 0 6
38821: ARRAY
38822: PPUSH
38823: LD_VAR 0 5
38827: PPUSH
38828: CALL_OW 3
38832: PPUSH
38833: CALL_OW 1
38837: ST_TO_ADDR
// end ; end ;
38838: GO 38676
38840: POP
38841: POP
// end ;
38842: LD_VAR 0 4
38846: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38847: LD_INT 0
38849: PPUSH
38850: PPUSH
38851: PPUSH
38852: PPUSH
38853: PPUSH
38854: PPUSH
38855: PPUSH
38856: PPUSH
38857: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38858: LD_VAR 0 1
38862: PPUSH
38863: CALL_OW 264
38867: PUSH
38868: LD_INT 81
38870: EQUAL
38871: NOT
38872: PUSH
38873: LD_VAR 0 1
38877: PUSH
38878: LD_EXP 116
38882: IN
38883: NOT
38884: OR
38885: IFFALSE 38889
// exit ;
38887: GO 39211
// index := GetElementIndex ( minersList , unit ) ;
38889: LD_ADDR_VAR 0 6
38893: PUSH
38894: LD_EXP 116
38898: PPUSH
38899: LD_VAR 0 1
38903: PPUSH
38904: CALL 44558 0 2
38908: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38909: LD_ADDR_VAR 0 8
38913: PUSH
38914: LD_EXP 118
38918: PUSH
38919: LD_EXP 117
38923: PUSH
38924: LD_VAR 0 6
38928: ARRAY
38929: MINUS
38930: ST_TO_ADDR
// if not minesFreeAmount then
38931: LD_VAR 0 8
38935: NOT
38936: IFFALSE 38940
// exit ;
38938: GO 39211
// tmp := [ ] ;
38940: LD_ADDR_VAR 0 7
38944: PUSH
38945: EMPTY
38946: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38947: LD_ADDR_VAR 0 5
38951: PUSH
38952: DOUBLE
38953: LD_INT 1
38955: DEC
38956: ST_TO_ADDR
38957: LD_VAR 0 8
38961: PUSH
38962: FOR_TO
38963: IFFALSE 39158
// begin _d := rand ( 0 , 5 ) ;
38965: LD_ADDR_VAR 0 11
38969: PUSH
38970: LD_INT 0
38972: PPUSH
38973: LD_INT 5
38975: PPUSH
38976: CALL_OW 12
38980: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38981: LD_ADDR_VAR 0 12
38985: PUSH
38986: LD_INT 2
38988: PPUSH
38989: LD_INT 6
38991: PPUSH
38992: CALL_OW 12
38996: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38997: LD_ADDR_VAR 0 9
39001: PUSH
39002: LD_VAR 0 2
39006: PPUSH
39007: LD_VAR 0 11
39011: PPUSH
39012: LD_VAR 0 12
39016: PPUSH
39017: CALL_OW 272
39021: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39022: LD_ADDR_VAR 0 10
39026: PUSH
39027: LD_VAR 0 3
39031: PPUSH
39032: LD_VAR 0 11
39036: PPUSH
39037: LD_VAR 0 12
39041: PPUSH
39042: CALL_OW 273
39046: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39047: LD_VAR 0 9
39051: PPUSH
39052: LD_VAR 0 10
39056: PPUSH
39057: CALL_OW 488
39061: PUSH
39062: LD_VAR 0 9
39066: PUSH
39067: LD_VAR 0 10
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_VAR 0 7
39080: IN
39081: NOT
39082: AND
39083: PUSH
39084: LD_VAR 0 9
39088: PPUSH
39089: LD_VAR 0 10
39093: PPUSH
39094: CALL_OW 458
39098: NOT
39099: AND
39100: IFFALSE 39142
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39102: LD_ADDR_VAR 0 7
39106: PUSH
39107: LD_VAR 0 7
39111: PPUSH
39112: LD_VAR 0 7
39116: PUSH
39117: LD_INT 1
39119: PLUS
39120: PPUSH
39121: LD_VAR 0 9
39125: PUSH
39126: LD_VAR 0 10
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PPUSH
39135: CALL_OW 1
39139: ST_TO_ADDR
39140: GO 39156
// i := i - 1 ;
39142: LD_ADDR_VAR 0 5
39146: PUSH
39147: LD_VAR 0 5
39151: PUSH
39152: LD_INT 1
39154: MINUS
39155: ST_TO_ADDR
// end ;
39156: GO 38962
39158: POP
39159: POP
// for i in tmp do
39160: LD_ADDR_VAR 0 5
39164: PUSH
39165: LD_VAR 0 7
39169: PUSH
39170: FOR_IN
39171: IFFALSE 39209
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39173: LD_VAR 0 1
39177: PPUSH
39178: LD_VAR 0 5
39182: PUSH
39183: LD_INT 1
39185: ARRAY
39186: PPUSH
39187: LD_VAR 0 5
39191: PUSH
39192: LD_INT 2
39194: ARRAY
39195: PPUSH
39196: CALL 38155 0 3
39200: NOT
39201: IFFALSE 39207
// exit ;
39203: POP
39204: POP
39205: GO 39211
39207: GO 39170
39209: POP
39210: POP
// end ;
39211: LD_VAR 0 4
39215: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39216: LD_INT 0
39218: PPUSH
39219: PPUSH
39220: PPUSH
39221: PPUSH
39222: PPUSH
39223: PPUSH
39224: PPUSH
// if not GetClass ( unit ) = class_sniper then
39225: LD_VAR 0 1
39229: PPUSH
39230: CALL_OW 257
39234: PUSH
39235: LD_INT 5
39237: EQUAL
39238: NOT
39239: IFFALSE 39243
// exit ;
39241: GO 39631
// dist := 8 ;
39243: LD_ADDR_VAR 0 5
39247: PUSH
39248: LD_INT 8
39250: ST_TO_ADDR
// viewRange := 12 ;
39251: LD_ADDR_VAR 0 7
39255: PUSH
39256: LD_INT 12
39258: ST_TO_ADDR
// side := GetSide ( unit ) ;
39259: LD_ADDR_VAR 0 6
39263: PUSH
39264: LD_VAR 0 1
39268: PPUSH
39269: CALL_OW 255
39273: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39274: LD_INT 61
39276: PPUSH
39277: LD_VAR 0 6
39281: PPUSH
39282: CALL_OW 321
39286: PUSH
39287: LD_INT 2
39289: EQUAL
39290: IFFALSE 39300
// viewRange := 16 ;
39292: LD_ADDR_VAR 0 7
39296: PUSH
39297: LD_INT 16
39299: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39300: LD_VAR 0 1
39304: PPUSH
39305: LD_VAR 0 2
39309: PPUSH
39310: LD_VAR 0 3
39314: PPUSH
39315: CALL_OW 297
39319: PUSH
39320: LD_VAR 0 5
39324: GREATER
39325: IFFALSE 39404
// begin ComMoveXY ( unit , x , y ) ;
39327: LD_VAR 0 1
39331: PPUSH
39332: LD_VAR 0 2
39336: PPUSH
39337: LD_VAR 0 3
39341: PPUSH
39342: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39346: LD_INT 35
39348: PPUSH
39349: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39353: LD_VAR 0 1
39357: PPUSH
39358: LD_VAR 0 2
39362: PPUSH
39363: LD_VAR 0 3
39367: PPUSH
39368: CALL 75821 0 3
39372: NOT
39373: IFFALSE 39377
// exit ;
39375: GO 39631
// until GetDistUnitXY ( unit , x , y ) < dist ;
39377: LD_VAR 0 1
39381: PPUSH
39382: LD_VAR 0 2
39386: PPUSH
39387: LD_VAR 0 3
39391: PPUSH
39392: CALL_OW 297
39396: PUSH
39397: LD_VAR 0 5
39401: LESS
39402: IFFALSE 39346
// end ; ComTurnXY ( unit , x , y ) ;
39404: LD_VAR 0 1
39408: PPUSH
39409: LD_VAR 0 2
39413: PPUSH
39414: LD_VAR 0 3
39418: PPUSH
39419: CALL_OW 118
// wait ( 5 ) ;
39423: LD_INT 5
39425: PPUSH
39426: CALL_OW 67
// _d := GetDir ( unit ) ;
39430: LD_ADDR_VAR 0 10
39434: PUSH
39435: LD_VAR 0 1
39439: PPUSH
39440: CALL_OW 254
39444: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39445: LD_ADDR_VAR 0 8
39449: PUSH
39450: LD_VAR 0 1
39454: PPUSH
39455: CALL_OW 250
39459: PPUSH
39460: LD_VAR 0 10
39464: PPUSH
39465: LD_VAR 0 5
39469: PPUSH
39470: CALL_OW 272
39474: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39475: LD_ADDR_VAR 0 9
39479: PUSH
39480: LD_VAR 0 1
39484: PPUSH
39485: CALL_OW 251
39489: PPUSH
39490: LD_VAR 0 10
39494: PPUSH
39495: LD_VAR 0 5
39499: PPUSH
39500: CALL_OW 273
39504: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39505: LD_VAR 0 8
39509: PPUSH
39510: LD_VAR 0 9
39514: PPUSH
39515: CALL_OW 488
39519: NOT
39520: IFFALSE 39524
// exit ;
39522: GO 39631
// ComAnimCustom ( unit , 1 ) ;
39524: LD_VAR 0 1
39528: PPUSH
39529: LD_INT 1
39531: PPUSH
39532: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39536: LD_VAR 0 8
39540: PPUSH
39541: LD_VAR 0 9
39545: PPUSH
39546: LD_VAR 0 6
39550: PPUSH
39551: LD_VAR 0 7
39555: PPUSH
39556: CALL_OW 330
// repeat wait ( 1 ) ;
39560: LD_INT 1
39562: PPUSH
39563: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39567: LD_VAR 0 1
39571: PPUSH
39572: CALL_OW 316
39576: PUSH
39577: LD_VAR 0 1
39581: PPUSH
39582: CALL_OW 314
39586: OR
39587: PUSH
39588: LD_VAR 0 1
39592: PPUSH
39593: CALL_OW 302
39597: NOT
39598: OR
39599: PUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: CALL_OW 301
39609: OR
39610: IFFALSE 39560
// RemoveSeeing ( _x , _y , side ) ;
39612: LD_VAR 0 8
39616: PPUSH
39617: LD_VAR 0 9
39621: PPUSH
39622: LD_VAR 0 6
39626: PPUSH
39627: CALL_OW 331
// end ; end_of_file
39631: LD_VAR 0 4
39635: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39636: LD_INT 0
39638: PPUSH
39639: PPUSH
// if exist_mode then
39640: LD_VAR 0 2
39644: IFFALSE 39669
// unit := CreateCharacter ( prefix & ident ) else
39646: LD_ADDR_VAR 0 5
39650: PUSH
39651: LD_VAR 0 3
39655: PUSH
39656: LD_VAR 0 1
39660: STR
39661: PPUSH
39662: CALL_OW 34
39666: ST_TO_ADDR
39667: GO 39684
// unit := NewCharacter ( ident ) ;
39669: LD_ADDR_VAR 0 5
39673: PUSH
39674: LD_VAR 0 1
39678: PPUSH
39679: CALL_OW 25
39683: ST_TO_ADDR
// result := unit ;
39684: LD_ADDR_VAR 0 4
39688: PUSH
39689: LD_VAR 0 5
39693: ST_TO_ADDR
// end ;
39694: LD_VAR 0 4
39698: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39699: LD_INT 0
39701: PPUSH
39702: PPUSH
// if not side or not nation then
39703: LD_VAR 0 1
39707: NOT
39708: PUSH
39709: LD_VAR 0 2
39713: NOT
39714: OR
39715: IFFALSE 39719
// exit ;
39717: GO 40487
// case nation of nation_american :
39719: LD_VAR 0 2
39723: PUSH
39724: LD_INT 1
39726: DOUBLE
39727: EQUAL
39728: IFTRUE 39732
39730: GO 39946
39732: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39733: LD_ADDR_VAR 0 4
39737: PUSH
39738: LD_INT 35
39740: PUSH
39741: LD_INT 45
39743: PUSH
39744: LD_INT 46
39746: PUSH
39747: LD_INT 47
39749: PUSH
39750: LD_INT 82
39752: PUSH
39753: LD_INT 83
39755: PUSH
39756: LD_INT 84
39758: PUSH
39759: LD_INT 85
39761: PUSH
39762: LD_INT 86
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 2
39770: PUSH
39771: LD_INT 6
39773: PUSH
39774: LD_INT 15
39776: PUSH
39777: LD_INT 16
39779: PUSH
39780: LD_INT 7
39782: PUSH
39783: LD_INT 12
39785: PUSH
39786: LD_INT 13
39788: PUSH
39789: LD_INT 10
39791: PUSH
39792: LD_INT 14
39794: PUSH
39795: LD_INT 20
39797: PUSH
39798: LD_INT 21
39800: PUSH
39801: LD_INT 22
39803: PUSH
39804: LD_INT 25
39806: PUSH
39807: LD_INT 32
39809: PUSH
39810: LD_INT 27
39812: PUSH
39813: LD_INT 36
39815: PUSH
39816: LD_INT 69
39818: PUSH
39819: LD_INT 39
39821: PUSH
39822: LD_INT 34
39824: PUSH
39825: LD_INT 40
39827: PUSH
39828: LD_INT 48
39830: PUSH
39831: LD_INT 49
39833: PUSH
39834: LD_INT 50
39836: PUSH
39837: LD_INT 51
39839: PUSH
39840: LD_INT 52
39842: PUSH
39843: LD_INT 53
39845: PUSH
39846: LD_INT 54
39848: PUSH
39849: LD_INT 55
39851: PUSH
39852: LD_INT 56
39854: PUSH
39855: LD_INT 57
39857: PUSH
39858: LD_INT 58
39860: PUSH
39861: LD_INT 59
39863: PUSH
39864: LD_INT 60
39866: PUSH
39867: LD_INT 61
39869: PUSH
39870: LD_INT 62
39872: PUSH
39873: LD_INT 80
39875: PUSH
39876: LD_INT 82
39878: PUSH
39879: LD_INT 83
39881: PUSH
39882: LD_INT 84
39884: PUSH
39885: LD_INT 85
39887: PUSH
39888: LD_INT 86
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: ST_TO_ADDR
39944: GO 40411
39946: LD_INT 2
39948: DOUBLE
39949: EQUAL
39950: IFTRUE 39954
39952: GO 40180
39954: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39955: LD_ADDR_VAR 0 4
39959: PUSH
39960: LD_INT 35
39962: PUSH
39963: LD_INT 45
39965: PUSH
39966: LD_INT 46
39968: PUSH
39969: LD_INT 47
39971: PUSH
39972: LD_INT 82
39974: PUSH
39975: LD_INT 83
39977: PUSH
39978: LD_INT 84
39980: PUSH
39981: LD_INT 85
39983: PUSH
39984: LD_INT 87
39986: PUSH
39987: LD_INT 70
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: LD_INT 11
39995: PUSH
39996: LD_INT 3
39998: PUSH
39999: LD_INT 4
40001: PUSH
40002: LD_INT 5
40004: PUSH
40005: LD_INT 6
40007: PUSH
40008: LD_INT 15
40010: PUSH
40011: LD_INT 18
40013: PUSH
40014: LD_INT 7
40016: PUSH
40017: LD_INT 17
40019: PUSH
40020: LD_INT 8
40022: PUSH
40023: LD_INT 20
40025: PUSH
40026: LD_INT 21
40028: PUSH
40029: LD_INT 22
40031: PUSH
40032: LD_INT 72
40034: PUSH
40035: LD_INT 26
40037: PUSH
40038: LD_INT 69
40040: PUSH
40041: LD_INT 39
40043: PUSH
40044: LD_INT 40
40046: PUSH
40047: LD_INT 41
40049: PUSH
40050: LD_INT 42
40052: PUSH
40053: LD_INT 43
40055: PUSH
40056: LD_INT 48
40058: PUSH
40059: LD_INT 49
40061: PUSH
40062: LD_INT 50
40064: PUSH
40065: LD_INT 51
40067: PUSH
40068: LD_INT 52
40070: PUSH
40071: LD_INT 53
40073: PUSH
40074: LD_INT 54
40076: PUSH
40077: LD_INT 55
40079: PUSH
40080: LD_INT 56
40082: PUSH
40083: LD_INT 60
40085: PUSH
40086: LD_INT 61
40088: PUSH
40089: LD_INT 62
40091: PUSH
40092: LD_INT 66
40094: PUSH
40095: LD_INT 67
40097: PUSH
40098: LD_INT 68
40100: PUSH
40101: LD_INT 81
40103: PUSH
40104: LD_INT 82
40106: PUSH
40107: LD_INT 83
40109: PUSH
40110: LD_INT 84
40112: PUSH
40113: LD_INT 85
40115: PUSH
40116: LD_INT 87
40118: PUSH
40119: LD_INT 88
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: ST_TO_ADDR
40178: GO 40411
40180: LD_INT 3
40182: DOUBLE
40183: EQUAL
40184: IFTRUE 40188
40186: GO 40410
40188: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40189: LD_ADDR_VAR 0 4
40193: PUSH
40194: LD_INT 46
40196: PUSH
40197: LD_INT 47
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: LD_INT 82
40208: PUSH
40209: LD_INT 83
40211: PUSH
40212: LD_INT 84
40214: PUSH
40215: LD_INT 85
40217: PUSH
40218: LD_INT 86
40220: PUSH
40221: LD_INT 11
40223: PUSH
40224: LD_INT 9
40226: PUSH
40227: LD_INT 20
40229: PUSH
40230: LD_INT 19
40232: PUSH
40233: LD_INT 21
40235: PUSH
40236: LD_INT 24
40238: PUSH
40239: LD_INT 22
40241: PUSH
40242: LD_INT 25
40244: PUSH
40245: LD_INT 28
40247: PUSH
40248: LD_INT 29
40250: PUSH
40251: LD_INT 30
40253: PUSH
40254: LD_INT 31
40256: PUSH
40257: LD_INT 37
40259: PUSH
40260: LD_INT 38
40262: PUSH
40263: LD_INT 32
40265: PUSH
40266: LD_INT 27
40268: PUSH
40269: LD_INT 33
40271: PUSH
40272: LD_INT 69
40274: PUSH
40275: LD_INT 39
40277: PUSH
40278: LD_INT 34
40280: PUSH
40281: LD_INT 40
40283: PUSH
40284: LD_INT 71
40286: PUSH
40287: LD_INT 23
40289: PUSH
40290: LD_INT 44
40292: PUSH
40293: LD_INT 48
40295: PUSH
40296: LD_INT 49
40298: PUSH
40299: LD_INT 50
40301: PUSH
40302: LD_INT 51
40304: PUSH
40305: LD_INT 52
40307: PUSH
40308: LD_INT 53
40310: PUSH
40311: LD_INT 54
40313: PUSH
40314: LD_INT 55
40316: PUSH
40317: LD_INT 56
40319: PUSH
40320: LD_INT 57
40322: PUSH
40323: LD_INT 58
40325: PUSH
40326: LD_INT 59
40328: PUSH
40329: LD_INT 63
40331: PUSH
40332: LD_INT 64
40334: PUSH
40335: LD_INT 65
40337: PUSH
40338: LD_INT 82
40340: PUSH
40341: LD_INT 83
40343: PUSH
40344: LD_INT 84
40346: PUSH
40347: LD_INT 85
40349: PUSH
40350: LD_INT 86
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: ST_TO_ADDR
40408: GO 40411
40410: POP
// if state > - 1 and state < 3 then
40411: LD_VAR 0 3
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: GREATER
40420: PUSH
40421: LD_VAR 0 3
40425: PUSH
40426: LD_INT 3
40428: LESS
40429: AND
40430: IFFALSE 40487
// for i in result do
40432: LD_ADDR_VAR 0 5
40436: PUSH
40437: LD_VAR 0 4
40441: PUSH
40442: FOR_IN
40443: IFFALSE 40485
// if GetTech ( i , side ) <> state then
40445: LD_VAR 0 5
40449: PPUSH
40450: LD_VAR 0 1
40454: PPUSH
40455: CALL_OW 321
40459: PUSH
40460: LD_VAR 0 3
40464: NONEQUAL
40465: IFFALSE 40483
// result := result diff i ;
40467: LD_ADDR_VAR 0 4
40471: PUSH
40472: LD_VAR 0 4
40476: PUSH
40477: LD_VAR 0 5
40481: DIFF
40482: ST_TO_ADDR
40483: GO 40442
40485: POP
40486: POP
// end ;
40487: LD_VAR 0 4
40491: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40492: LD_INT 0
40494: PPUSH
40495: PPUSH
40496: PPUSH
// result := true ;
40497: LD_ADDR_VAR 0 3
40501: PUSH
40502: LD_INT 1
40504: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40505: LD_ADDR_VAR 0 5
40509: PUSH
40510: LD_VAR 0 2
40514: PPUSH
40515: CALL_OW 480
40519: ST_TO_ADDR
// if not tmp then
40520: LD_VAR 0 5
40524: NOT
40525: IFFALSE 40529
// exit ;
40527: GO 40578
// for i in tmp do
40529: LD_ADDR_VAR 0 4
40533: PUSH
40534: LD_VAR 0 5
40538: PUSH
40539: FOR_IN
40540: IFFALSE 40576
// if GetTech ( i , side ) <> state_researched then
40542: LD_VAR 0 4
40546: PPUSH
40547: LD_VAR 0 1
40551: PPUSH
40552: CALL_OW 321
40556: PUSH
40557: LD_INT 2
40559: NONEQUAL
40560: IFFALSE 40574
// begin result := false ;
40562: LD_ADDR_VAR 0 3
40566: PUSH
40567: LD_INT 0
40569: ST_TO_ADDR
// exit ;
40570: POP
40571: POP
40572: GO 40578
// end ;
40574: GO 40539
40576: POP
40577: POP
// end ;
40578: LD_VAR 0 3
40582: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40583: LD_INT 0
40585: PPUSH
40586: PPUSH
40587: PPUSH
40588: PPUSH
40589: PPUSH
40590: PPUSH
40591: PPUSH
40592: PPUSH
40593: PPUSH
40594: PPUSH
40595: PPUSH
40596: PPUSH
40597: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40598: LD_VAR 0 1
40602: NOT
40603: PUSH
40604: LD_VAR 0 1
40608: PPUSH
40609: CALL_OW 257
40613: PUSH
40614: LD_INT 9
40616: NONEQUAL
40617: OR
40618: IFFALSE 40622
// exit ;
40620: GO 41195
// side := GetSide ( unit ) ;
40622: LD_ADDR_VAR 0 9
40626: PUSH
40627: LD_VAR 0 1
40631: PPUSH
40632: CALL_OW 255
40636: ST_TO_ADDR
// tech_space := tech_spacanom ;
40637: LD_ADDR_VAR 0 12
40641: PUSH
40642: LD_INT 29
40644: ST_TO_ADDR
// tech_time := tech_taurad ;
40645: LD_ADDR_VAR 0 13
40649: PUSH
40650: LD_INT 28
40652: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40653: LD_ADDR_VAR 0 11
40657: PUSH
40658: LD_VAR 0 1
40662: PPUSH
40663: CALL_OW 310
40667: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40668: LD_VAR 0 11
40672: PPUSH
40673: CALL_OW 247
40677: PUSH
40678: LD_INT 2
40680: EQUAL
40681: IFFALSE 40685
// exit ;
40683: GO 41195
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40685: LD_ADDR_VAR 0 8
40689: PUSH
40690: LD_INT 81
40692: PUSH
40693: LD_VAR 0 9
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 3
40704: PUSH
40705: LD_INT 21
40707: PUSH
40708: LD_INT 3
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PPUSH
40723: CALL_OW 69
40727: ST_TO_ADDR
// if not tmp then
40728: LD_VAR 0 8
40732: NOT
40733: IFFALSE 40737
// exit ;
40735: GO 41195
// if in_unit then
40737: LD_VAR 0 11
40741: IFFALSE 40765
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40743: LD_ADDR_VAR 0 10
40747: PUSH
40748: LD_VAR 0 8
40752: PPUSH
40753: LD_VAR 0 11
40757: PPUSH
40758: CALL_OW 74
40762: ST_TO_ADDR
40763: GO 40785
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40765: LD_ADDR_VAR 0 10
40769: PUSH
40770: LD_VAR 0 8
40774: PPUSH
40775: LD_VAR 0 1
40779: PPUSH
40780: CALL_OW 74
40784: ST_TO_ADDR
// if not enemy then
40785: LD_VAR 0 10
40789: NOT
40790: IFFALSE 40794
// exit ;
40792: GO 41195
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40794: LD_VAR 0 11
40798: PUSH
40799: LD_VAR 0 11
40803: PPUSH
40804: LD_VAR 0 10
40808: PPUSH
40809: CALL_OW 296
40813: PUSH
40814: LD_INT 13
40816: GREATER
40817: AND
40818: PUSH
40819: LD_VAR 0 1
40823: PPUSH
40824: LD_VAR 0 10
40828: PPUSH
40829: CALL_OW 296
40833: PUSH
40834: LD_INT 12
40836: GREATER
40837: OR
40838: IFFALSE 40842
// exit ;
40840: GO 41195
// missile := [ 1 ] ;
40842: LD_ADDR_VAR 0 14
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40853: LD_VAR 0 9
40857: PPUSH
40858: LD_VAR 0 12
40862: PPUSH
40863: CALL_OW 325
40867: IFFALSE 40896
// missile := Replace ( missile , missile + 1 , 2 ) ;
40869: LD_ADDR_VAR 0 14
40873: PUSH
40874: LD_VAR 0 14
40878: PPUSH
40879: LD_VAR 0 14
40883: PUSH
40884: LD_INT 1
40886: PLUS
40887: PPUSH
40888: LD_INT 2
40890: PPUSH
40891: CALL_OW 1
40895: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40896: LD_VAR 0 9
40900: PPUSH
40901: LD_VAR 0 13
40905: PPUSH
40906: CALL_OW 325
40910: PUSH
40911: LD_VAR 0 10
40915: PPUSH
40916: CALL_OW 255
40920: PPUSH
40921: LD_VAR 0 13
40925: PPUSH
40926: CALL_OW 325
40930: NOT
40931: AND
40932: IFFALSE 40961
// missile := Replace ( missile , missile + 1 , 3 ) ;
40934: LD_ADDR_VAR 0 14
40938: PUSH
40939: LD_VAR 0 14
40943: PPUSH
40944: LD_VAR 0 14
40948: PUSH
40949: LD_INT 1
40951: PLUS
40952: PPUSH
40953: LD_INT 3
40955: PPUSH
40956: CALL_OW 1
40960: ST_TO_ADDR
// if missile < 2 then
40961: LD_VAR 0 14
40965: PUSH
40966: LD_INT 2
40968: LESS
40969: IFFALSE 40973
// exit ;
40971: GO 41195
// x := GetX ( enemy ) ;
40973: LD_ADDR_VAR 0 4
40977: PUSH
40978: LD_VAR 0 10
40982: PPUSH
40983: CALL_OW 250
40987: ST_TO_ADDR
// y := GetY ( enemy ) ;
40988: LD_ADDR_VAR 0 5
40992: PUSH
40993: LD_VAR 0 10
40997: PPUSH
40998: CALL_OW 251
41002: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41003: LD_ADDR_VAR 0 6
41007: PUSH
41008: LD_VAR 0 4
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PPUSH
41017: LD_INT 1
41019: PPUSH
41020: CALL_OW 12
41024: PLUS
41025: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41026: LD_ADDR_VAR 0 7
41030: PUSH
41031: LD_VAR 0 5
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PPUSH
41040: LD_INT 1
41042: PPUSH
41043: CALL_OW 12
41047: PLUS
41048: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41049: LD_VAR 0 6
41053: PPUSH
41054: LD_VAR 0 7
41058: PPUSH
41059: CALL_OW 488
41063: NOT
41064: IFFALSE 41086
// begin _x := x ;
41066: LD_ADDR_VAR 0 6
41070: PUSH
41071: LD_VAR 0 4
41075: ST_TO_ADDR
// _y := y ;
41076: LD_ADDR_VAR 0 7
41080: PUSH
41081: LD_VAR 0 5
41085: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41086: LD_ADDR_VAR 0 3
41090: PUSH
41091: LD_INT 1
41093: PPUSH
41094: LD_VAR 0 14
41098: PPUSH
41099: CALL_OW 12
41103: ST_TO_ADDR
// case i of 1 :
41104: LD_VAR 0 3
41108: PUSH
41109: LD_INT 1
41111: DOUBLE
41112: EQUAL
41113: IFTRUE 41117
41115: GO 41134
41117: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41118: LD_VAR 0 1
41122: PPUSH
41123: LD_VAR 0 10
41127: PPUSH
41128: CALL_OW 115
41132: GO 41195
41134: LD_INT 2
41136: DOUBLE
41137: EQUAL
41138: IFTRUE 41142
41140: GO 41164
41142: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41143: LD_VAR 0 1
41147: PPUSH
41148: LD_VAR 0 6
41152: PPUSH
41153: LD_VAR 0 7
41157: PPUSH
41158: CALL_OW 153
41162: GO 41195
41164: LD_INT 3
41166: DOUBLE
41167: EQUAL
41168: IFTRUE 41172
41170: GO 41194
41172: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41173: LD_VAR 0 1
41177: PPUSH
41178: LD_VAR 0 6
41182: PPUSH
41183: LD_VAR 0 7
41187: PPUSH
41188: CALL_OW 154
41192: GO 41195
41194: POP
// end ;
41195: LD_VAR 0 2
41199: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41200: LD_INT 0
41202: PPUSH
41203: PPUSH
41204: PPUSH
41205: PPUSH
41206: PPUSH
41207: PPUSH
// if not unit or not building then
41208: LD_VAR 0 1
41212: NOT
41213: PUSH
41214: LD_VAR 0 2
41218: NOT
41219: OR
41220: IFFALSE 41224
// exit ;
41222: GO 41382
// x := GetX ( building ) ;
41224: LD_ADDR_VAR 0 5
41228: PUSH
41229: LD_VAR 0 2
41233: PPUSH
41234: CALL_OW 250
41238: ST_TO_ADDR
// y := GetY ( building ) ;
41239: LD_ADDR_VAR 0 6
41243: PUSH
41244: LD_VAR 0 2
41248: PPUSH
41249: CALL_OW 251
41253: ST_TO_ADDR
// for i = 0 to 5 do
41254: LD_ADDR_VAR 0 4
41258: PUSH
41259: DOUBLE
41260: LD_INT 0
41262: DEC
41263: ST_TO_ADDR
41264: LD_INT 5
41266: PUSH
41267: FOR_TO
41268: IFFALSE 41380
// begin _x := ShiftX ( x , i , 3 ) ;
41270: LD_ADDR_VAR 0 7
41274: PUSH
41275: LD_VAR 0 5
41279: PPUSH
41280: LD_VAR 0 4
41284: PPUSH
41285: LD_INT 3
41287: PPUSH
41288: CALL_OW 272
41292: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41293: LD_ADDR_VAR 0 8
41297: PUSH
41298: LD_VAR 0 6
41302: PPUSH
41303: LD_VAR 0 4
41307: PPUSH
41308: LD_INT 3
41310: PPUSH
41311: CALL_OW 273
41315: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41316: LD_VAR 0 7
41320: PPUSH
41321: LD_VAR 0 8
41325: PPUSH
41326: CALL_OW 488
41330: NOT
41331: IFFALSE 41335
// continue ;
41333: GO 41267
// if HexInfo ( _x , _y ) = 0 then
41335: LD_VAR 0 7
41339: PPUSH
41340: LD_VAR 0 8
41344: PPUSH
41345: CALL_OW 428
41349: PUSH
41350: LD_INT 0
41352: EQUAL
41353: IFFALSE 41378
// begin ComMoveXY ( unit , _x , _y ) ;
41355: LD_VAR 0 1
41359: PPUSH
41360: LD_VAR 0 7
41364: PPUSH
41365: LD_VAR 0 8
41369: PPUSH
41370: CALL_OW 111
// exit ;
41374: POP
41375: POP
41376: GO 41382
// end ; end ;
41378: GO 41267
41380: POP
41381: POP
// end ;
41382: LD_VAR 0 3
41386: RET
// export function ScanBase ( side , base_area ) ; begin
41387: LD_INT 0
41389: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41390: LD_ADDR_VAR 0 3
41394: PUSH
41395: LD_VAR 0 2
41399: PPUSH
41400: LD_INT 81
41402: PUSH
41403: LD_VAR 0 1
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PPUSH
41412: CALL_OW 70
41416: ST_TO_ADDR
// end ;
41417: LD_VAR 0 3
41421: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41422: LD_INT 0
41424: PPUSH
41425: PPUSH
41426: PPUSH
41427: PPUSH
// result := false ;
41428: LD_ADDR_VAR 0 2
41432: PUSH
41433: LD_INT 0
41435: ST_TO_ADDR
// side := GetSide ( unit ) ;
41436: LD_ADDR_VAR 0 3
41440: PUSH
41441: LD_VAR 0 1
41445: PPUSH
41446: CALL_OW 255
41450: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41451: LD_ADDR_VAR 0 4
41455: PUSH
41456: LD_VAR 0 1
41460: PPUSH
41461: CALL_OW 248
41465: ST_TO_ADDR
// case nat of 1 :
41466: LD_VAR 0 4
41470: PUSH
41471: LD_INT 1
41473: DOUBLE
41474: EQUAL
41475: IFTRUE 41479
41477: GO 41490
41479: POP
// tech := tech_lassight ; 2 :
41480: LD_ADDR_VAR 0 5
41484: PUSH
41485: LD_INT 12
41487: ST_TO_ADDR
41488: GO 41529
41490: LD_INT 2
41492: DOUBLE
41493: EQUAL
41494: IFTRUE 41498
41496: GO 41509
41498: POP
// tech := tech_mortar ; 3 :
41499: LD_ADDR_VAR 0 5
41503: PUSH
41504: LD_INT 41
41506: ST_TO_ADDR
41507: GO 41529
41509: LD_INT 3
41511: DOUBLE
41512: EQUAL
41513: IFTRUE 41517
41515: GO 41528
41517: POP
// tech := tech_bazooka ; end ;
41518: LD_ADDR_VAR 0 5
41522: PUSH
41523: LD_INT 44
41525: ST_TO_ADDR
41526: GO 41529
41528: POP
// if Researched ( side , tech ) then
41529: LD_VAR 0 3
41533: PPUSH
41534: LD_VAR 0 5
41538: PPUSH
41539: CALL_OW 325
41543: IFFALSE 41570
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41545: LD_ADDR_VAR 0 2
41549: PUSH
41550: LD_INT 5
41552: PUSH
41553: LD_INT 8
41555: PUSH
41556: LD_INT 9
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: LIST
41563: PUSH
41564: LD_VAR 0 4
41568: ARRAY
41569: ST_TO_ADDR
// end ;
41570: LD_VAR 0 2
41574: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41575: LD_INT 0
41577: PPUSH
41578: PPUSH
41579: PPUSH
// if not mines then
41580: LD_VAR 0 2
41584: NOT
41585: IFFALSE 41589
// exit ;
41587: GO 41733
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41589: LD_ADDR_VAR 0 5
41593: PUSH
41594: LD_INT 81
41596: PUSH
41597: LD_VAR 0 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 3
41608: PUSH
41609: LD_INT 21
41611: PUSH
41612: LD_INT 3
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PPUSH
41627: CALL_OW 69
41631: ST_TO_ADDR
// for i in mines do
41632: LD_ADDR_VAR 0 4
41636: PUSH
41637: LD_VAR 0 2
41641: PUSH
41642: FOR_IN
41643: IFFALSE 41731
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41645: LD_VAR 0 4
41649: PUSH
41650: LD_INT 1
41652: ARRAY
41653: PPUSH
41654: LD_VAR 0 4
41658: PUSH
41659: LD_INT 2
41661: ARRAY
41662: PPUSH
41663: CALL_OW 458
41667: NOT
41668: IFFALSE 41672
// continue ;
41670: GO 41642
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41672: LD_VAR 0 4
41676: PUSH
41677: LD_INT 1
41679: ARRAY
41680: PPUSH
41681: LD_VAR 0 4
41685: PUSH
41686: LD_INT 2
41688: ARRAY
41689: PPUSH
41690: CALL_OW 428
41694: PUSH
41695: LD_VAR 0 5
41699: IN
41700: IFFALSE 41729
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41702: LD_VAR 0 4
41706: PUSH
41707: LD_INT 1
41709: ARRAY
41710: PPUSH
41711: LD_VAR 0 4
41715: PUSH
41716: LD_INT 2
41718: ARRAY
41719: PPUSH
41720: LD_VAR 0 1
41724: PPUSH
41725: CALL_OW 456
// end ;
41729: GO 41642
41731: POP
41732: POP
// end ;
41733: LD_VAR 0 3
41737: RET
// export function Count ( array ) ; var i ; begin
41738: LD_INT 0
41740: PPUSH
41741: PPUSH
// result := 0 ;
41742: LD_ADDR_VAR 0 2
41746: PUSH
41747: LD_INT 0
41749: ST_TO_ADDR
// for i in array do
41750: LD_ADDR_VAR 0 3
41754: PUSH
41755: LD_VAR 0 1
41759: PUSH
41760: FOR_IN
41761: IFFALSE 41785
// if i then
41763: LD_VAR 0 3
41767: IFFALSE 41783
// result := result + 1 ;
41769: LD_ADDR_VAR 0 2
41773: PUSH
41774: LD_VAR 0 2
41778: PUSH
41779: LD_INT 1
41781: PLUS
41782: ST_TO_ADDR
41783: GO 41760
41785: POP
41786: POP
// end ;
41787: LD_VAR 0 2
41791: RET
// export function IsEmpty ( building ) ; begin
41792: LD_INT 0
41794: PPUSH
// if not building then
41795: LD_VAR 0 1
41799: NOT
41800: IFFALSE 41804
// exit ;
41802: GO 41847
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41804: LD_ADDR_VAR 0 2
41808: PUSH
41809: LD_VAR 0 1
41813: PUSH
41814: LD_INT 22
41816: PUSH
41817: LD_VAR 0 1
41821: PPUSH
41822: CALL_OW 255
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 58
41833: PUSH
41834: EMPTY
41835: LIST
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PPUSH
41841: CALL_OW 69
41845: IN
41846: ST_TO_ADDR
// end ;
41847: LD_VAR 0 2
41851: RET
// export function IsNotFull ( building ) ; var places ; begin
41852: LD_INT 0
41854: PPUSH
41855: PPUSH
// if not building then
41856: LD_VAR 0 1
41860: NOT
41861: IFFALSE 41865
// exit ;
41863: GO 42036
// result := false ;
41865: LD_ADDR_VAR 0 2
41869: PUSH
41870: LD_INT 0
41872: ST_TO_ADDR
// places := 0 ;
41873: LD_ADDR_VAR 0 3
41877: PUSH
41878: LD_INT 0
41880: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41881: LD_VAR 0 1
41885: PPUSH
41886: CALL_OW 266
41890: PUSH
41891: LD_INT 0
41893: DOUBLE
41894: EQUAL
41895: IFTRUE 41953
41897: LD_INT 1
41899: DOUBLE
41900: EQUAL
41901: IFTRUE 41953
41903: LD_INT 6
41905: DOUBLE
41906: EQUAL
41907: IFTRUE 41953
41909: LD_INT 7
41911: DOUBLE
41912: EQUAL
41913: IFTRUE 41953
41915: LD_INT 8
41917: DOUBLE
41918: EQUAL
41919: IFTRUE 41953
41921: LD_INT 4
41923: DOUBLE
41924: EQUAL
41925: IFTRUE 41953
41927: LD_INT 5
41929: DOUBLE
41930: EQUAL
41931: IFTRUE 41953
41933: LD_INT 2
41935: DOUBLE
41936: EQUAL
41937: IFTRUE 41953
41939: LD_INT 3
41941: DOUBLE
41942: EQUAL
41943: IFTRUE 41953
41945: LD_INT 35
41947: DOUBLE
41948: EQUAL
41949: IFTRUE 41953
41951: GO 41964
41953: POP
// places := 6 ; b_bunker , b_breastwork :
41954: LD_ADDR_VAR 0 3
41958: PUSH
41959: LD_INT 6
41961: ST_TO_ADDR
41962: GO 42009
41964: LD_INT 32
41966: DOUBLE
41967: EQUAL
41968: IFTRUE 41978
41970: LD_INT 31
41972: DOUBLE
41973: EQUAL
41974: IFTRUE 41978
41976: GO 41989
41978: POP
// places := 1 ; b_control_tower :
41979: LD_ADDR_VAR 0 3
41983: PUSH
41984: LD_INT 1
41986: ST_TO_ADDR
41987: GO 42009
41989: LD_INT 36
41991: DOUBLE
41992: EQUAL
41993: IFTRUE 41997
41995: GO 42008
41997: POP
// places := 3 ; end ;
41998: LD_ADDR_VAR 0 3
42002: PUSH
42003: LD_INT 3
42005: ST_TO_ADDR
42006: GO 42009
42008: POP
// if places then
42009: LD_VAR 0 3
42013: IFFALSE 42036
// result := UnitsInside ( building ) < places ;
42015: LD_ADDR_VAR 0 2
42019: PUSH
42020: LD_VAR 0 1
42024: PPUSH
42025: CALL_OW 313
42029: PUSH
42030: LD_VAR 0 3
42034: LESS
42035: ST_TO_ADDR
// end ;
42036: LD_VAR 0 2
42040: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42041: LD_INT 0
42043: PPUSH
42044: PPUSH
42045: PPUSH
42046: PPUSH
// tmp := [ ] ;
42047: LD_ADDR_VAR 0 3
42051: PUSH
42052: EMPTY
42053: ST_TO_ADDR
// list := [ ] ;
42054: LD_ADDR_VAR 0 5
42058: PUSH
42059: EMPTY
42060: ST_TO_ADDR
// for i = 16 to 25 do
42061: LD_ADDR_VAR 0 4
42065: PUSH
42066: DOUBLE
42067: LD_INT 16
42069: DEC
42070: ST_TO_ADDR
42071: LD_INT 25
42073: PUSH
42074: FOR_TO
42075: IFFALSE 42148
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42077: LD_ADDR_VAR 0 3
42081: PUSH
42082: LD_VAR 0 3
42086: PUSH
42087: LD_INT 22
42089: PUSH
42090: LD_VAR 0 1
42094: PPUSH
42095: CALL_OW 255
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 91
42106: PUSH
42107: LD_VAR 0 1
42111: PUSH
42112: LD_INT 6
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 30
42122: PUSH
42123: LD_VAR 0 4
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: LIST
42136: PUSH
42137: EMPTY
42138: LIST
42139: PPUSH
42140: CALL_OW 69
42144: ADD
42145: ST_TO_ADDR
42146: GO 42074
42148: POP
42149: POP
// for i = 1 to tmp do
42150: LD_ADDR_VAR 0 4
42154: PUSH
42155: DOUBLE
42156: LD_INT 1
42158: DEC
42159: ST_TO_ADDR
42160: LD_VAR 0 3
42164: PUSH
42165: FOR_TO
42166: IFFALSE 42254
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42168: LD_ADDR_VAR 0 5
42172: PUSH
42173: LD_VAR 0 5
42177: PUSH
42178: LD_VAR 0 3
42182: PUSH
42183: LD_VAR 0 4
42187: ARRAY
42188: PPUSH
42189: CALL_OW 266
42193: PUSH
42194: LD_VAR 0 3
42198: PUSH
42199: LD_VAR 0 4
42203: ARRAY
42204: PPUSH
42205: CALL_OW 250
42209: PUSH
42210: LD_VAR 0 3
42214: PUSH
42215: LD_VAR 0 4
42219: ARRAY
42220: PPUSH
42221: CALL_OW 251
42225: PUSH
42226: LD_VAR 0 3
42230: PUSH
42231: LD_VAR 0 4
42235: ARRAY
42236: PPUSH
42237: CALL_OW 254
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: PUSH
42248: EMPTY
42249: LIST
42250: ADD
42251: ST_TO_ADDR
42252: GO 42165
42254: POP
42255: POP
// result := list ;
42256: LD_ADDR_VAR 0 2
42260: PUSH
42261: LD_VAR 0 5
42265: ST_TO_ADDR
// end ;
42266: LD_VAR 0 2
42270: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42271: LD_INT 0
42273: PPUSH
42274: PPUSH
42275: PPUSH
42276: PPUSH
42277: PPUSH
42278: PPUSH
42279: PPUSH
// if not factory then
42280: LD_VAR 0 1
42284: NOT
42285: IFFALSE 42289
// exit ;
42287: GO 42882
// if control = control_apeman then
42289: LD_VAR 0 4
42293: PUSH
42294: LD_INT 5
42296: EQUAL
42297: IFFALSE 42406
// begin tmp := UnitsInside ( factory ) ;
42299: LD_ADDR_VAR 0 8
42303: PUSH
42304: LD_VAR 0 1
42308: PPUSH
42309: CALL_OW 313
42313: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42314: LD_VAR 0 8
42318: PPUSH
42319: LD_INT 25
42321: PUSH
42322: LD_INT 12
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PPUSH
42329: CALL_OW 72
42333: NOT
42334: IFFALSE 42344
// control := control_manual ;
42336: LD_ADDR_VAR 0 4
42340: PUSH
42341: LD_INT 1
42343: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42344: LD_ADDR_VAR 0 8
42348: PUSH
42349: LD_VAR 0 1
42353: PPUSH
42354: CALL 42041 0 1
42358: ST_TO_ADDR
// if tmp then
42359: LD_VAR 0 8
42363: IFFALSE 42406
// begin for i in tmp do
42365: LD_ADDR_VAR 0 7
42369: PUSH
42370: LD_VAR 0 8
42374: PUSH
42375: FOR_IN
42376: IFFALSE 42404
// if i [ 1 ] = b_ext_radio then
42378: LD_VAR 0 7
42382: PUSH
42383: LD_INT 1
42385: ARRAY
42386: PUSH
42387: LD_INT 22
42389: EQUAL
42390: IFFALSE 42402
// begin control := control_remote ;
42392: LD_ADDR_VAR 0 4
42396: PUSH
42397: LD_INT 2
42399: ST_TO_ADDR
// break ;
42400: GO 42404
// end ;
42402: GO 42375
42404: POP
42405: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42406: LD_VAR 0 1
42410: PPUSH
42411: LD_VAR 0 2
42415: PPUSH
42416: LD_VAR 0 3
42420: PPUSH
42421: LD_VAR 0 4
42425: PPUSH
42426: LD_VAR 0 5
42430: PPUSH
42431: CALL_OW 448
42435: IFFALSE 42470
// begin result := [ chassis , engine , control , weapon ] ;
42437: LD_ADDR_VAR 0 6
42441: PUSH
42442: LD_VAR 0 2
42446: PUSH
42447: LD_VAR 0 3
42451: PUSH
42452: LD_VAR 0 4
42456: PUSH
42457: LD_VAR 0 5
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: ST_TO_ADDR
// exit ;
42468: GO 42882
// end ; _chassis := AvailableChassisList ( factory ) ;
42470: LD_ADDR_VAR 0 9
42474: PUSH
42475: LD_VAR 0 1
42479: PPUSH
42480: CALL_OW 475
42484: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42485: LD_ADDR_VAR 0 11
42489: PUSH
42490: LD_VAR 0 1
42494: PPUSH
42495: CALL_OW 476
42499: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42500: LD_ADDR_VAR 0 12
42504: PUSH
42505: LD_VAR 0 1
42509: PPUSH
42510: CALL_OW 477
42514: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42515: LD_ADDR_VAR 0 10
42519: PUSH
42520: LD_VAR 0 1
42524: PPUSH
42525: CALL_OW 478
42529: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42530: LD_VAR 0 9
42534: NOT
42535: PUSH
42536: LD_VAR 0 11
42540: NOT
42541: OR
42542: PUSH
42543: LD_VAR 0 12
42547: NOT
42548: OR
42549: PUSH
42550: LD_VAR 0 10
42554: NOT
42555: OR
42556: IFFALSE 42591
// begin result := [ chassis , engine , control , weapon ] ;
42558: LD_ADDR_VAR 0 6
42562: PUSH
42563: LD_VAR 0 2
42567: PUSH
42568: LD_VAR 0 3
42572: PUSH
42573: LD_VAR 0 4
42577: PUSH
42578: LD_VAR 0 5
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: ST_TO_ADDR
// exit ;
42589: GO 42882
// end ; if not chassis in _chassis then
42591: LD_VAR 0 2
42595: PUSH
42596: LD_VAR 0 9
42600: IN
42601: NOT
42602: IFFALSE 42628
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42604: LD_ADDR_VAR 0 2
42608: PUSH
42609: LD_VAR 0 9
42613: PUSH
42614: LD_INT 1
42616: PPUSH
42617: LD_VAR 0 9
42621: PPUSH
42622: CALL_OW 12
42626: ARRAY
42627: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42628: LD_VAR 0 2
42632: PPUSH
42633: LD_VAR 0 3
42637: PPUSH
42638: CALL 42887 0 2
42642: NOT
42643: IFFALSE 42702
// repeat engine := _engine [ 1 ] ;
42645: LD_ADDR_VAR 0 3
42649: PUSH
42650: LD_VAR 0 11
42654: PUSH
42655: LD_INT 1
42657: ARRAY
42658: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42659: LD_ADDR_VAR 0 11
42663: PUSH
42664: LD_VAR 0 11
42668: PPUSH
42669: LD_INT 1
42671: PPUSH
42672: CALL_OW 3
42676: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42677: LD_VAR 0 2
42681: PPUSH
42682: LD_VAR 0 3
42686: PPUSH
42687: CALL 42887 0 2
42691: PUSH
42692: LD_VAR 0 11
42696: PUSH
42697: EMPTY
42698: EQUAL
42699: OR
42700: IFFALSE 42645
// if not control in _control then
42702: LD_VAR 0 4
42706: PUSH
42707: LD_VAR 0 12
42711: IN
42712: NOT
42713: IFFALSE 42739
// control := _control [ rand ( 1 , _control ) ] ;
42715: LD_ADDR_VAR 0 4
42719: PUSH
42720: LD_VAR 0 12
42724: PUSH
42725: LD_INT 1
42727: PPUSH
42728: LD_VAR 0 12
42732: PPUSH
42733: CALL_OW 12
42737: ARRAY
42738: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42739: LD_VAR 0 2
42743: PPUSH
42744: LD_VAR 0 5
42748: PPUSH
42749: CALL 43107 0 2
42753: NOT
42754: IFFALSE 42813
// repeat weapon := _weapon [ 1 ] ;
42756: LD_ADDR_VAR 0 5
42760: PUSH
42761: LD_VAR 0 10
42765: PUSH
42766: LD_INT 1
42768: ARRAY
42769: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42770: LD_ADDR_VAR 0 10
42774: PUSH
42775: LD_VAR 0 10
42779: PPUSH
42780: LD_INT 1
42782: PPUSH
42783: CALL_OW 3
42787: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42788: LD_VAR 0 2
42792: PPUSH
42793: LD_VAR 0 5
42797: PPUSH
42798: CALL 43107 0 2
42802: PUSH
42803: LD_VAR 0 10
42807: PUSH
42808: EMPTY
42809: EQUAL
42810: OR
42811: IFFALSE 42756
// result := [ ] ;
42813: LD_ADDR_VAR 0 6
42817: PUSH
42818: EMPTY
42819: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42820: LD_VAR 0 1
42824: PPUSH
42825: LD_VAR 0 2
42829: PPUSH
42830: LD_VAR 0 3
42834: PPUSH
42835: LD_VAR 0 4
42839: PPUSH
42840: LD_VAR 0 5
42844: PPUSH
42845: CALL_OW 448
42849: IFFALSE 42882
// result := [ chassis , engine , control , weapon ] ;
42851: LD_ADDR_VAR 0 6
42855: PUSH
42856: LD_VAR 0 2
42860: PUSH
42861: LD_VAR 0 3
42865: PUSH
42866: LD_VAR 0 4
42870: PUSH
42871: LD_VAR 0 5
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: ST_TO_ADDR
// end ;
42882: LD_VAR 0 6
42886: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42887: LD_INT 0
42889: PPUSH
// if not chassis or not engine then
42890: LD_VAR 0 1
42894: NOT
42895: PUSH
42896: LD_VAR 0 2
42900: NOT
42901: OR
42902: IFFALSE 42906
// exit ;
42904: GO 43102
// case engine of engine_solar :
42906: LD_VAR 0 2
42910: PUSH
42911: LD_INT 2
42913: DOUBLE
42914: EQUAL
42915: IFTRUE 42919
42917: GO 42957
42919: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42920: LD_ADDR_VAR 0 3
42924: PUSH
42925: LD_INT 11
42927: PUSH
42928: LD_INT 12
42930: PUSH
42931: LD_INT 13
42933: PUSH
42934: LD_INT 14
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: LD_INT 3
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: ST_TO_ADDR
42955: GO 43086
42957: LD_INT 1
42959: DOUBLE
42960: EQUAL
42961: IFTRUE 42965
42963: GO 43027
42965: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42966: LD_ADDR_VAR 0 3
42970: PUSH
42971: LD_INT 11
42973: PUSH
42974: LD_INT 12
42976: PUSH
42977: LD_INT 13
42979: PUSH
42980: LD_INT 14
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: LD_INT 4
42994: PUSH
42995: LD_INT 5
42997: PUSH
42998: LD_INT 21
43000: PUSH
43001: LD_INT 23
43003: PUSH
43004: LD_INT 22
43006: PUSH
43007: LD_INT 24
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: ST_TO_ADDR
43025: GO 43086
43027: LD_INT 3
43029: DOUBLE
43030: EQUAL
43031: IFTRUE 43035
43033: GO 43085
43035: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43036: LD_ADDR_VAR 0 3
43040: PUSH
43041: LD_INT 13
43043: PUSH
43044: LD_INT 14
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: LD_INT 3
43052: PUSH
43053: LD_INT 4
43055: PUSH
43056: LD_INT 5
43058: PUSH
43059: LD_INT 21
43061: PUSH
43062: LD_INT 22
43064: PUSH
43065: LD_INT 23
43067: PUSH
43068: LD_INT 24
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: ST_TO_ADDR
43083: GO 43086
43085: POP
// result := ( chassis in result ) ;
43086: LD_ADDR_VAR 0 3
43090: PUSH
43091: LD_VAR 0 1
43095: PUSH
43096: LD_VAR 0 3
43100: IN
43101: ST_TO_ADDR
// end ;
43102: LD_VAR 0 3
43106: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43107: LD_INT 0
43109: PPUSH
// if not chassis or not weapon then
43110: LD_VAR 0 1
43114: NOT
43115: PUSH
43116: LD_VAR 0 2
43120: NOT
43121: OR
43122: IFFALSE 43126
// exit ;
43124: GO 44186
// case weapon of us_machine_gun :
43126: LD_VAR 0 2
43130: PUSH
43131: LD_INT 2
43133: DOUBLE
43134: EQUAL
43135: IFTRUE 43139
43137: GO 43169
43139: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43140: LD_ADDR_VAR 0 3
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: LD_INT 3
43153: PUSH
43154: LD_INT 4
43156: PUSH
43157: LD_INT 5
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: ST_TO_ADDR
43167: GO 44170
43169: LD_INT 3
43171: DOUBLE
43172: EQUAL
43173: IFTRUE 43177
43175: GO 43207
43177: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43178: LD_ADDR_VAR 0 3
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 3
43191: PUSH
43192: LD_INT 4
43194: PUSH
43195: LD_INT 5
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: ST_TO_ADDR
43205: GO 44170
43207: LD_INT 11
43209: DOUBLE
43210: EQUAL
43211: IFTRUE 43215
43213: GO 43245
43215: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43216: LD_ADDR_VAR 0 3
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: LD_INT 2
43226: PUSH
43227: LD_INT 3
43229: PUSH
43230: LD_INT 4
43232: PUSH
43233: LD_INT 5
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: ST_TO_ADDR
43243: GO 44170
43245: LD_INT 4
43247: DOUBLE
43248: EQUAL
43249: IFTRUE 43253
43251: GO 43279
43253: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43254: LD_ADDR_VAR 0 3
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: LD_INT 3
43264: PUSH
43265: LD_INT 4
43267: PUSH
43268: LD_INT 5
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
43277: GO 44170
43279: LD_INT 5
43281: DOUBLE
43282: EQUAL
43283: IFTRUE 43287
43285: GO 43313
43287: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43288: LD_ADDR_VAR 0 3
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: LD_INT 3
43298: PUSH
43299: LD_INT 4
43301: PUSH
43302: LD_INT 5
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: ST_TO_ADDR
43311: GO 44170
43313: LD_INT 9
43315: DOUBLE
43316: EQUAL
43317: IFTRUE 43321
43319: GO 43347
43321: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43322: LD_ADDR_VAR 0 3
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: LD_INT 3
43332: PUSH
43333: LD_INT 4
43335: PUSH
43336: LD_INT 5
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: ST_TO_ADDR
43345: GO 44170
43347: LD_INT 7
43349: DOUBLE
43350: EQUAL
43351: IFTRUE 43355
43353: GO 43381
43355: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43356: LD_ADDR_VAR 0 3
43360: PUSH
43361: LD_INT 2
43363: PUSH
43364: LD_INT 3
43366: PUSH
43367: LD_INT 4
43369: PUSH
43370: LD_INT 5
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: ST_TO_ADDR
43379: GO 44170
43381: LD_INT 12
43383: DOUBLE
43384: EQUAL
43385: IFTRUE 43389
43387: GO 43415
43389: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43390: LD_ADDR_VAR 0 3
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: LD_INT 3
43400: PUSH
43401: LD_INT 4
43403: PUSH
43404: LD_INT 5
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: ST_TO_ADDR
43413: GO 44170
43415: LD_INT 13
43417: DOUBLE
43418: EQUAL
43419: IFTRUE 43423
43421: GO 43449
43423: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43424: LD_ADDR_VAR 0 3
43428: PUSH
43429: LD_INT 2
43431: PUSH
43432: LD_INT 3
43434: PUSH
43435: LD_INT 4
43437: PUSH
43438: LD_INT 5
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: ST_TO_ADDR
43447: GO 44170
43449: LD_INT 14
43451: DOUBLE
43452: EQUAL
43453: IFTRUE 43457
43455: GO 43475
43457: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43458: LD_ADDR_VAR 0 3
43462: PUSH
43463: LD_INT 4
43465: PUSH
43466: LD_INT 5
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: ST_TO_ADDR
43473: GO 44170
43475: LD_INT 6
43477: DOUBLE
43478: EQUAL
43479: IFTRUE 43483
43481: GO 43501
43483: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43484: LD_ADDR_VAR 0 3
43488: PUSH
43489: LD_INT 4
43491: PUSH
43492: LD_INT 5
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: ST_TO_ADDR
43499: GO 44170
43501: LD_INT 10
43503: DOUBLE
43504: EQUAL
43505: IFTRUE 43509
43507: GO 43527
43509: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43510: LD_ADDR_VAR 0 3
43514: PUSH
43515: LD_INT 4
43517: PUSH
43518: LD_INT 5
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: ST_TO_ADDR
43525: GO 44170
43527: LD_INT 22
43529: DOUBLE
43530: EQUAL
43531: IFTRUE 43535
43533: GO 43561
43535: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43536: LD_ADDR_VAR 0 3
43540: PUSH
43541: LD_INT 11
43543: PUSH
43544: LD_INT 12
43546: PUSH
43547: LD_INT 13
43549: PUSH
43550: LD_INT 14
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: ST_TO_ADDR
43559: GO 44170
43561: LD_INT 23
43563: DOUBLE
43564: EQUAL
43565: IFTRUE 43569
43567: GO 43595
43569: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43570: LD_ADDR_VAR 0 3
43574: PUSH
43575: LD_INT 11
43577: PUSH
43578: LD_INT 12
43580: PUSH
43581: LD_INT 13
43583: PUSH
43584: LD_INT 14
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: ST_TO_ADDR
43593: GO 44170
43595: LD_INT 24
43597: DOUBLE
43598: EQUAL
43599: IFTRUE 43603
43601: GO 43629
43603: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43604: LD_ADDR_VAR 0 3
43608: PUSH
43609: LD_INT 11
43611: PUSH
43612: LD_INT 12
43614: PUSH
43615: LD_INT 13
43617: PUSH
43618: LD_INT 14
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: ST_TO_ADDR
43627: GO 44170
43629: LD_INT 30
43631: DOUBLE
43632: EQUAL
43633: IFTRUE 43637
43635: GO 43663
43637: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43638: LD_ADDR_VAR 0 3
43642: PUSH
43643: LD_INT 11
43645: PUSH
43646: LD_INT 12
43648: PUSH
43649: LD_INT 13
43651: PUSH
43652: LD_INT 14
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: ST_TO_ADDR
43661: GO 44170
43663: LD_INT 25
43665: DOUBLE
43666: EQUAL
43667: IFTRUE 43671
43669: GO 43689
43671: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43672: LD_ADDR_VAR 0 3
43676: PUSH
43677: LD_INT 13
43679: PUSH
43680: LD_INT 14
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: ST_TO_ADDR
43687: GO 44170
43689: LD_INT 27
43691: DOUBLE
43692: EQUAL
43693: IFTRUE 43697
43695: GO 43715
43697: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43698: LD_ADDR_VAR 0 3
43702: PUSH
43703: LD_INT 13
43705: PUSH
43706: LD_INT 14
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: ST_TO_ADDR
43713: GO 44170
43715: LD_INT 92
43717: DOUBLE
43718: EQUAL
43719: IFTRUE 43723
43721: GO 43749
43723: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43724: LD_ADDR_VAR 0 3
43728: PUSH
43729: LD_INT 11
43731: PUSH
43732: LD_INT 12
43734: PUSH
43735: LD_INT 13
43737: PUSH
43738: LD_INT 14
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
43747: GO 44170
43749: LD_INT 28
43751: DOUBLE
43752: EQUAL
43753: IFTRUE 43757
43755: GO 43775
43757: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43758: LD_ADDR_VAR 0 3
43762: PUSH
43763: LD_INT 13
43765: PUSH
43766: LD_INT 14
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: ST_TO_ADDR
43773: GO 44170
43775: LD_INT 29
43777: DOUBLE
43778: EQUAL
43779: IFTRUE 43783
43781: GO 43801
43783: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43784: LD_ADDR_VAR 0 3
43788: PUSH
43789: LD_INT 13
43791: PUSH
43792: LD_INT 14
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: ST_TO_ADDR
43799: GO 44170
43801: LD_INT 31
43803: DOUBLE
43804: EQUAL
43805: IFTRUE 43809
43807: GO 43827
43809: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43810: LD_ADDR_VAR 0 3
43814: PUSH
43815: LD_INT 13
43817: PUSH
43818: LD_INT 14
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: ST_TO_ADDR
43825: GO 44170
43827: LD_INT 26
43829: DOUBLE
43830: EQUAL
43831: IFTRUE 43835
43833: GO 43853
43835: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43836: LD_ADDR_VAR 0 3
43840: PUSH
43841: LD_INT 13
43843: PUSH
43844: LD_INT 14
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: ST_TO_ADDR
43851: GO 44170
43853: LD_INT 42
43855: DOUBLE
43856: EQUAL
43857: IFTRUE 43861
43859: GO 43887
43861: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43862: LD_ADDR_VAR 0 3
43866: PUSH
43867: LD_INT 21
43869: PUSH
43870: LD_INT 22
43872: PUSH
43873: LD_INT 23
43875: PUSH
43876: LD_INT 24
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: ST_TO_ADDR
43885: GO 44170
43887: LD_INT 43
43889: DOUBLE
43890: EQUAL
43891: IFTRUE 43895
43893: GO 43921
43895: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43896: LD_ADDR_VAR 0 3
43900: PUSH
43901: LD_INT 21
43903: PUSH
43904: LD_INT 22
43906: PUSH
43907: LD_INT 23
43909: PUSH
43910: LD_INT 24
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: ST_TO_ADDR
43919: GO 44170
43921: LD_INT 44
43923: DOUBLE
43924: EQUAL
43925: IFTRUE 43929
43927: GO 43955
43929: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43930: LD_ADDR_VAR 0 3
43934: PUSH
43935: LD_INT 21
43937: PUSH
43938: LD_INT 22
43940: PUSH
43941: LD_INT 23
43943: PUSH
43944: LD_INT 24
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: ST_TO_ADDR
43953: GO 44170
43955: LD_INT 45
43957: DOUBLE
43958: EQUAL
43959: IFTRUE 43963
43961: GO 43989
43963: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43964: LD_ADDR_VAR 0 3
43968: PUSH
43969: LD_INT 21
43971: PUSH
43972: LD_INT 22
43974: PUSH
43975: LD_INT 23
43977: PUSH
43978: LD_INT 24
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: ST_TO_ADDR
43987: GO 44170
43989: LD_INT 49
43991: DOUBLE
43992: EQUAL
43993: IFTRUE 43997
43995: GO 44023
43997: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43998: LD_ADDR_VAR 0 3
44002: PUSH
44003: LD_INT 21
44005: PUSH
44006: LD_INT 22
44008: PUSH
44009: LD_INT 23
44011: PUSH
44012: LD_INT 24
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: ST_TO_ADDR
44021: GO 44170
44023: LD_INT 51
44025: DOUBLE
44026: EQUAL
44027: IFTRUE 44031
44029: GO 44057
44031: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44032: LD_ADDR_VAR 0 3
44036: PUSH
44037: LD_INT 21
44039: PUSH
44040: LD_INT 22
44042: PUSH
44043: LD_INT 23
44045: PUSH
44046: LD_INT 24
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: ST_TO_ADDR
44055: GO 44170
44057: LD_INT 52
44059: DOUBLE
44060: EQUAL
44061: IFTRUE 44065
44063: GO 44091
44065: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44066: LD_ADDR_VAR 0 3
44070: PUSH
44071: LD_INT 21
44073: PUSH
44074: LD_INT 22
44076: PUSH
44077: LD_INT 23
44079: PUSH
44080: LD_INT 24
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: ST_TO_ADDR
44089: GO 44170
44091: LD_INT 53
44093: DOUBLE
44094: EQUAL
44095: IFTRUE 44099
44097: GO 44117
44099: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44100: LD_ADDR_VAR 0 3
44104: PUSH
44105: LD_INT 23
44107: PUSH
44108: LD_INT 24
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: ST_TO_ADDR
44115: GO 44170
44117: LD_INT 46
44119: DOUBLE
44120: EQUAL
44121: IFTRUE 44125
44123: GO 44143
44125: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44126: LD_ADDR_VAR 0 3
44130: PUSH
44131: LD_INT 23
44133: PUSH
44134: LD_INT 24
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: ST_TO_ADDR
44141: GO 44170
44143: LD_INT 47
44145: DOUBLE
44146: EQUAL
44147: IFTRUE 44151
44149: GO 44169
44151: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44152: LD_ADDR_VAR 0 3
44156: PUSH
44157: LD_INT 23
44159: PUSH
44160: LD_INT 24
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: ST_TO_ADDR
44167: GO 44170
44169: POP
// result := ( chassis in result ) ;
44170: LD_ADDR_VAR 0 3
44174: PUSH
44175: LD_VAR 0 1
44179: PUSH
44180: LD_VAR 0 3
44184: IN
44185: ST_TO_ADDR
// end ;
44186: LD_VAR 0 3
44190: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44191: LD_INT 0
44193: PPUSH
44194: PPUSH
44195: PPUSH
44196: PPUSH
44197: PPUSH
44198: PPUSH
44199: PPUSH
// result := array ;
44200: LD_ADDR_VAR 0 5
44204: PUSH
44205: LD_VAR 0 1
44209: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44210: LD_VAR 0 1
44214: NOT
44215: PUSH
44216: LD_VAR 0 2
44220: NOT
44221: OR
44222: PUSH
44223: LD_VAR 0 3
44227: NOT
44228: OR
44229: PUSH
44230: LD_VAR 0 2
44234: PUSH
44235: LD_VAR 0 1
44239: GREATER
44240: OR
44241: PUSH
44242: LD_VAR 0 3
44246: PUSH
44247: LD_VAR 0 1
44251: GREATER
44252: OR
44253: IFFALSE 44257
// exit ;
44255: GO 44553
// if direction then
44257: LD_VAR 0 4
44261: IFFALSE 44325
// begin d := 1 ;
44263: LD_ADDR_VAR 0 9
44267: PUSH
44268: LD_INT 1
44270: ST_TO_ADDR
// if i_from > i_to then
44271: LD_VAR 0 2
44275: PUSH
44276: LD_VAR 0 3
44280: GREATER
44281: IFFALSE 44307
// length := ( array - i_from ) + i_to else
44283: LD_ADDR_VAR 0 11
44287: PUSH
44288: LD_VAR 0 1
44292: PUSH
44293: LD_VAR 0 2
44297: MINUS
44298: PUSH
44299: LD_VAR 0 3
44303: PLUS
44304: ST_TO_ADDR
44305: GO 44323
// length := i_to - i_from ;
44307: LD_ADDR_VAR 0 11
44311: PUSH
44312: LD_VAR 0 3
44316: PUSH
44317: LD_VAR 0 2
44321: MINUS
44322: ST_TO_ADDR
// end else
44323: GO 44386
// begin d := - 1 ;
44325: LD_ADDR_VAR 0 9
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: ST_TO_ADDR
// if i_from > i_to then
44334: LD_VAR 0 2
44338: PUSH
44339: LD_VAR 0 3
44343: GREATER
44344: IFFALSE 44364
// length := i_from - i_to else
44346: LD_ADDR_VAR 0 11
44350: PUSH
44351: LD_VAR 0 2
44355: PUSH
44356: LD_VAR 0 3
44360: MINUS
44361: ST_TO_ADDR
44362: GO 44386
// length := ( array - i_to ) + i_from ;
44364: LD_ADDR_VAR 0 11
44368: PUSH
44369: LD_VAR 0 1
44373: PUSH
44374: LD_VAR 0 3
44378: MINUS
44379: PUSH
44380: LD_VAR 0 2
44384: PLUS
44385: ST_TO_ADDR
// end ; if not length then
44386: LD_VAR 0 11
44390: NOT
44391: IFFALSE 44395
// exit ;
44393: GO 44553
// tmp := array ;
44395: LD_ADDR_VAR 0 10
44399: PUSH
44400: LD_VAR 0 1
44404: ST_TO_ADDR
// for i = 1 to length do
44405: LD_ADDR_VAR 0 6
44409: PUSH
44410: DOUBLE
44411: LD_INT 1
44413: DEC
44414: ST_TO_ADDR
44415: LD_VAR 0 11
44419: PUSH
44420: FOR_TO
44421: IFFALSE 44541
// begin for j = 1 to array do
44423: LD_ADDR_VAR 0 7
44427: PUSH
44428: DOUBLE
44429: LD_INT 1
44431: DEC
44432: ST_TO_ADDR
44433: LD_VAR 0 1
44437: PUSH
44438: FOR_TO
44439: IFFALSE 44527
// begin k := j + d ;
44441: LD_ADDR_VAR 0 8
44445: PUSH
44446: LD_VAR 0 7
44450: PUSH
44451: LD_VAR 0 9
44455: PLUS
44456: ST_TO_ADDR
// if k > array then
44457: LD_VAR 0 8
44461: PUSH
44462: LD_VAR 0 1
44466: GREATER
44467: IFFALSE 44477
// k := 1 ;
44469: LD_ADDR_VAR 0 8
44473: PUSH
44474: LD_INT 1
44476: ST_TO_ADDR
// if not k then
44477: LD_VAR 0 8
44481: NOT
44482: IFFALSE 44494
// k := array ;
44484: LD_ADDR_VAR 0 8
44488: PUSH
44489: LD_VAR 0 1
44493: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44494: LD_ADDR_VAR 0 10
44498: PUSH
44499: LD_VAR 0 10
44503: PPUSH
44504: LD_VAR 0 8
44508: PPUSH
44509: LD_VAR 0 1
44513: PUSH
44514: LD_VAR 0 7
44518: ARRAY
44519: PPUSH
44520: CALL_OW 1
44524: ST_TO_ADDR
// end ;
44525: GO 44438
44527: POP
44528: POP
// array := tmp ;
44529: LD_ADDR_VAR 0 1
44533: PUSH
44534: LD_VAR 0 10
44538: ST_TO_ADDR
// end ;
44539: GO 44420
44541: POP
44542: POP
// result := array ;
44543: LD_ADDR_VAR 0 5
44547: PUSH
44548: LD_VAR 0 1
44552: ST_TO_ADDR
// end ;
44553: LD_VAR 0 5
44557: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44558: LD_INT 0
44560: PPUSH
44561: PPUSH
// result := 0 ;
44562: LD_ADDR_VAR 0 3
44566: PUSH
44567: LD_INT 0
44569: ST_TO_ADDR
// if not array or not value in array then
44570: LD_VAR 0 1
44574: NOT
44575: PUSH
44576: LD_VAR 0 2
44580: PUSH
44581: LD_VAR 0 1
44585: IN
44586: NOT
44587: OR
44588: IFFALSE 44592
// exit ;
44590: GO 44646
// for i = 1 to array do
44592: LD_ADDR_VAR 0 4
44596: PUSH
44597: DOUBLE
44598: LD_INT 1
44600: DEC
44601: ST_TO_ADDR
44602: LD_VAR 0 1
44606: PUSH
44607: FOR_TO
44608: IFFALSE 44644
// if value = array [ i ] then
44610: LD_VAR 0 2
44614: PUSH
44615: LD_VAR 0 1
44619: PUSH
44620: LD_VAR 0 4
44624: ARRAY
44625: EQUAL
44626: IFFALSE 44642
// begin result := i ;
44628: LD_ADDR_VAR 0 3
44632: PUSH
44633: LD_VAR 0 4
44637: ST_TO_ADDR
// exit ;
44638: POP
44639: POP
44640: GO 44646
// end ;
44642: GO 44607
44644: POP
44645: POP
// end ;
44646: LD_VAR 0 3
44650: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44651: LD_INT 0
44653: PPUSH
// vc_chassis := chassis ;
44654: LD_ADDR_OWVAR 37
44658: PUSH
44659: LD_VAR 0 1
44663: ST_TO_ADDR
// vc_engine := engine ;
44664: LD_ADDR_OWVAR 39
44668: PUSH
44669: LD_VAR 0 2
44673: ST_TO_ADDR
// vc_control := control ;
44674: LD_ADDR_OWVAR 38
44678: PUSH
44679: LD_VAR 0 3
44683: ST_TO_ADDR
// vc_weapon := weapon ;
44684: LD_ADDR_OWVAR 40
44688: PUSH
44689: LD_VAR 0 4
44693: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44694: LD_ADDR_OWVAR 41
44698: PUSH
44699: LD_VAR 0 5
44703: ST_TO_ADDR
// end ;
44704: LD_VAR 0 6
44708: RET
// export function WantPlant ( unit ) ; var task ; begin
44709: LD_INT 0
44711: PPUSH
44712: PPUSH
// result := false ;
44713: LD_ADDR_VAR 0 2
44717: PUSH
44718: LD_INT 0
44720: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44721: LD_ADDR_VAR 0 3
44725: PUSH
44726: LD_VAR 0 1
44730: PPUSH
44731: CALL_OW 437
44735: ST_TO_ADDR
// if task then
44736: LD_VAR 0 3
44740: IFFALSE 44768
// if task [ 1 ] [ 1 ] = p then
44742: LD_VAR 0 3
44746: PUSH
44747: LD_INT 1
44749: ARRAY
44750: PUSH
44751: LD_INT 1
44753: ARRAY
44754: PUSH
44755: LD_STRING p
44757: EQUAL
44758: IFFALSE 44768
// result := true ;
44760: LD_ADDR_VAR 0 2
44764: PUSH
44765: LD_INT 1
44767: ST_TO_ADDR
// end ;
44768: LD_VAR 0 2
44772: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44773: LD_INT 0
44775: PPUSH
44776: PPUSH
44777: PPUSH
44778: PPUSH
// if pos < 1 then
44779: LD_VAR 0 2
44783: PUSH
44784: LD_INT 1
44786: LESS
44787: IFFALSE 44791
// exit ;
44789: GO 45094
// if pos = 1 then
44791: LD_VAR 0 2
44795: PUSH
44796: LD_INT 1
44798: EQUAL
44799: IFFALSE 44832
// result := Replace ( arr , pos [ 1 ] , value ) else
44801: LD_ADDR_VAR 0 4
44805: PUSH
44806: LD_VAR 0 1
44810: PPUSH
44811: LD_VAR 0 2
44815: PUSH
44816: LD_INT 1
44818: ARRAY
44819: PPUSH
44820: LD_VAR 0 3
44824: PPUSH
44825: CALL_OW 1
44829: ST_TO_ADDR
44830: GO 45094
// begin tmp := arr ;
44832: LD_ADDR_VAR 0 6
44836: PUSH
44837: LD_VAR 0 1
44841: ST_TO_ADDR
// s_arr := [ tmp ] ;
44842: LD_ADDR_VAR 0 7
44846: PUSH
44847: LD_VAR 0 6
44851: PUSH
44852: EMPTY
44853: LIST
44854: ST_TO_ADDR
// for i = 1 to pos - 1 do
44855: LD_ADDR_VAR 0 5
44859: PUSH
44860: DOUBLE
44861: LD_INT 1
44863: DEC
44864: ST_TO_ADDR
44865: LD_VAR 0 2
44869: PUSH
44870: LD_INT 1
44872: MINUS
44873: PUSH
44874: FOR_TO
44875: IFFALSE 44920
// begin tmp := tmp [ pos [ i ] ] ;
44877: LD_ADDR_VAR 0 6
44881: PUSH
44882: LD_VAR 0 6
44886: PUSH
44887: LD_VAR 0 2
44891: PUSH
44892: LD_VAR 0 5
44896: ARRAY
44897: ARRAY
44898: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44899: LD_ADDR_VAR 0 7
44903: PUSH
44904: LD_VAR 0 7
44908: PUSH
44909: LD_VAR 0 6
44913: PUSH
44914: EMPTY
44915: LIST
44916: ADD
44917: ST_TO_ADDR
// end ;
44918: GO 44874
44920: POP
44921: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44922: LD_ADDR_VAR 0 6
44926: PUSH
44927: LD_VAR 0 6
44931: PPUSH
44932: LD_VAR 0 2
44936: PUSH
44937: LD_VAR 0 2
44941: ARRAY
44942: PPUSH
44943: LD_VAR 0 3
44947: PPUSH
44948: CALL_OW 1
44952: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44953: LD_ADDR_VAR 0 7
44957: PUSH
44958: LD_VAR 0 7
44962: PPUSH
44963: LD_VAR 0 7
44967: PPUSH
44968: LD_VAR 0 6
44972: PPUSH
44973: CALL_OW 1
44977: ST_TO_ADDR
// for i = s_arr downto 2 do
44978: LD_ADDR_VAR 0 5
44982: PUSH
44983: DOUBLE
44984: LD_VAR 0 7
44988: INC
44989: ST_TO_ADDR
44990: LD_INT 2
44992: PUSH
44993: FOR_DOWNTO
44994: IFFALSE 45078
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44996: LD_ADDR_VAR 0 6
45000: PUSH
45001: LD_VAR 0 7
45005: PUSH
45006: LD_VAR 0 5
45010: PUSH
45011: LD_INT 1
45013: MINUS
45014: ARRAY
45015: PPUSH
45016: LD_VAR 0 2
45020: PUSH
45021: LD_VAR 0 5
45025: PUSH
45026: LD_INT 1
45028: MINUS
45029: ARRAY
45030: PPUSH
45031: LD_VAR 0 7
45035: PUSH
45036: LD_VAR 0 5
45040: ARRAY
45041: PPUSH
45042: CALL_OW 1
45046: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45047: LD_ADDR_VAR 0 7
45051: PUSH
45052: LD_VAR 0 7
45056: PPUSH
45057: LD_VAR 0 5
45061: PUSH
45062: LD_INT 1
45064: MINUS
45065: PPUSH
45066: LD_VAR 0 6
45070: PPUSH
45071: CALL_OW 1
45075: ST_TO_ADDR
// end ;
45076: GO 44993
45078: POP
45079: POP
// result := s_arr [ 1 ] ;
45080: LD_ADDR_VAR 0 4
45084: PUSH
45085: LD_VAR 0 7
45089: PUSH
45090: LD_INT 1
45092: ARRAY
45093: ST_TO_ADDR
// end ; end ;
45094: LD_VAR 0 4
45098: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45099: LD_INT 0
45101: PPUSH
45102: PPUSH
// if not list then
45103: LD_VAR 0 1
45107: NOT
45108: IFFALSE 45112
// exit ;
45110: GO 45203
// i := list [ pos1 ] ;
45112: LD_ADDR_VAR 0 5
45116: PUSH
45117: LD_VAR 0 1
45121: PUSH
45122: LD_VAR 0 2
45126: ARRAY
45127: ST_TO_ADDR
// if not i then
45128: LD_VAR 0 5
45132: NOT
45133: IFFALSE 45137
// exit ;
45135: GO 45203
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45137: LD_ADDR_VAR 0 1
45141: PUSH
45142: LD_VAR 0 1
45146: PPUSH
45147: LD_VAR 0 2
45151: PPUSH
45152: LD_VAR 0 1
45156: PUSH
45157: LD_VAR 0 3
45161: ARRAY
45162: PPUSH
45163: CALL_OW 1
45167: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45168: LD_ADDR_VAR 0 1
45172: PUSH
45173: LD_VAR 0 1
45177: PPUSH
45178: LD_VAR 0 3
45182: PPUSH
45183: LD_VAR 0 5
45187: PPUSH
45188: CALL_OW 1
45192: ST_TO_ADDR
// result := list ;
45193: LD_ADDR_VAR 0 4
45197: PUSH
45198: LD_VAR 0 1
45202: ST_TO_ADDR
// end ;
45203: LD_VAR 0 4
45207: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45208: LD_INT 0
45210: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45211: LD_ADDR_VAR 0 5
45215: PUSH
45216: LD_VAR 0 1
45220: PPUSH
45221: CALL_OW 250
45225: PPUSH
45226: LD_VAR 0 1
45230: PPUSH
45231: CALL_OW 251
45235: PPUSH
45236: LD_VAR 0 2
45240: PPUSH
45241: LD_VAR 0 3
45245: PPUSH
45246: LD_VAR 0 4
45250: PPUSH
45251: CALL 45261 0 5
45255: ST_TO_ADDR
// end ;
45256: LD_VAR 0 5
45260: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45261: LD_INT 0
45263: PPUSH
45264: PPUSH
45265: PPUSH
45266: PPUSH
// if not list then
45267: LD_VAR 0 3
45271: NOT
45272: IFFALSE 45276
// exit ;
45274: GO 45664
// result := [ ] ;
45276: LD_ADDR_VAR 0 6
45280: PUSH
45281: EMPTY
45282: ST_TO_ADDR
// for i in list do
45283: LD_ADDR_VAR 0 7
45287: PUSH
45288: LD_VAR 0 3
45292: PUSH
45293: FOR_IN
45294: IFFALSE 45496
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45296: LD_ADDR_VAR 0 9
45300: PUSH
45301: LD_VAR 0 7
45305: PPUSH
45306: LD_VAR 0 1
45310: PPUSH
45311: LD_VAR 0 2
45315: PPUSH
45316: CALL_OW 297
45320: ST_TO_ADDR
// if not result then
45321: LD_VAR 0 6
45325: NOT
45326: IFFALSE 45352
// result := [ [ i , tmp ] ] else
45328: LD_ADDR_VAR 0 6
45332: PUSH
45333: LD_VAR 0 7
45337: PUSH
45338: LD_VAR 0 9
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: EMPTY
45348: LIST
45349: ST_TO_ADDR
45350: GO 45494
// begin if result [ result ] [ 2 ] < tmp then
45352: LD_VAR 0 6
45356: PUSH
45357: LD_VAR 0 6
45361: ARRAY
45362: PUSH
45363: LD_INT 2
45365: ARRAY
45366: PUSH
45367: LD_VAR 0 9
45371: LESS
45372: IFFALSE 45414
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45374: LD_ADDR_VAR 0 6
45378: PUSH
45379: LD_VAR 0 6
45383: PPUSH
45384: LD_VAR 0 6
45388: PUSH
45389: LD_INT 1
45391: PLUS
45392: PPUSH
45393: LD_VAR 0 7
45397: PUSH
45398: LD_VAR 0 9
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PPUSH
45407: CALL_OW 2
45411: ST_TO_ADDR
45412: GO 45494
// for j = 1 to result do
45414: LD_ADDR_VAR 0 8
45418: PUSH
45419: DOUBLE
45420: LD_INT 1
45422: DEC
45423: ST_TO_ADDR
45424: LD_VAR 0 6
45428: PUSH
45429: FOR_TO
45430: IFFALSE 45492
// begin if tmp < result [ j ] [ 2 ] then
45432: LD_VAR 0 9
45436: PUSH
45437: LD_VAR 0 6
45441: PUSH
45442: LD_VAR 0 8
45446: ARRAY
45447: PUSH
45448: LD_INT 2
45450: ARRAY
45451: LESS
45452: IFFALSE 45490
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45454: LD_ADDR_VAR 0 6
45458: PUSH
45459: LD_VAR 0 6
45463: PPUSH
45464: LD_VAR 0 8
45468: PPUSH
45469: LD_VAR 0 7
45473: PUSH
45474: LD_VAR 0 9
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PPUSH
45483: CALL_OW 2
45487: ST_TO_ADDR
// break ;
45488: GO 45492
// end ; end ;
45490: GO 45429
45492: POP
45493: POP
// end ; end ;
45494: GO 45293
45496: POP
45497: POP
// if result and not asc then
45498: LD_VAR 0 6
45502: PUSH
45503: LD_VAR 0 4
45507: NOT
45508: AND
45509: IFFALSE 45584
// begin tmp := result ;
45511: LD_ADDR_VAR 0 9
45515: PUSH
45516: LD_VAR 0 6
45520: ST_TO_ADDR
// for i = tmp downto 1 do
45521: LD_ADDR_VAR 0 7
45525: PUSH
45526: DOUBLE
45527: LD_VAR 0 9
45531: INC
45532: ST_TO_ADDR
45533: LD_INT 1
45535: PUSH
45536: FOR_DOWNTO
45537: IFFALSE 45582
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45539: LD_ADDR_VAR 0 6
45543: PUSH
45544: LD_VAR 0 6
45548: PPUSH
45549: LD_VAR 0 9
45553: PUSH
45554: LD_VAR 0 7
45558: MINUS
45559: PUSH
45560: LD_INT 1
45562: PLUS
45563: PPUSH
45564: LD_VAR 0 9
45568: PUSH
45569: LD_VAR 0 7
45573: ARRAY
45574: PPUSH
45575: CALL_OW 1
45579: ST_TO_ADDR
45580: GO 45536
45582: POP
45583: POP
// end ; tmp := [ ] ;
45584: LD_ADDR_VAR 0 9
45588: PUSH
45589: EMPTY
45590: ST_TO_ADDR
// if mode then
45591: LD_VAR 0 5
45595: IFFALSE 45664
// begin for i = 1 to result do
45597: LD_ADDR_VAR 0 7
45601: PUSH
45602: DOUBLE
45603: LD_INT 1
45605: DEC
45606: ST_TO_ADDR
45607: LD_VAR 0 6
45611: PUSH
45612: FOR_TO
45613: IFFALSE 45652
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45615: LD_ADDR_VAR 0 9
45619: PUSH
45620: LD_VAR 0 9
45624: PPUSH
45625: LD_VAR 0 7
45629: PPUSH
45630: LD_VAR 0 6
45634: PUSH
45635: LD_VAR 0 7
45639: ARRAY
45640: PUSH
45641: LD_INT 1
45643: ARRAY
45644: PPUSH
45645: CALL_OW 1
45649: ST_TO_ADDR
45650: GO 45612
45652: POP
45653: POP
// result := tmp ;
45654: LD_ADDR_VAR 0 6
45658: PUSH
45659: LD_VAR 0 9
45663: ST_TO_ADDR
// end ; end ;
45664: LD_VAR 0 6
45668: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45669: LD_INT 0
45671: PPUSH
45672: PPUSH
45673: PPUSH
45674: PPUSH
45675: PPUSH
45676: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45677: LD_ADDR_VAR 0 5
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: ST_TO_ADDR
// if not x or not y then
45699: LD_VAR 0 2
45703: NOT
45704: PUSH
45705: LD_VAR 0 3
45709: NOT
45710: OR
45711: IFFALSE 45715
// exit ;
45713: GO 47365
// if not range then
45715: LD_VAR 0 4
45719: NOT
45720: IFFALSE 45730
// range := 10 ;
45722: LD_ADDR_VAR 0 4
45726: PUSH
45727: LD_INT 10
45729: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45730: LD_ADDR_VAR 0 8
45734: PUSH
45735: LD_INT 81
45737: PUSH
45738: LD_VAR 0 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 92
45749: PUSH
45750: LD_VAR 0 2
45754: PUSH
45755: LD_VAR 0 3
45759: PUSH
45760: LD_VAR 0 4
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 3
45773: PUSH
45774: LD_INT 21
45776: PUSH
45777: LD_INT 3
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: PPUSH
45793: CALL_OW 69
45797: ST_TO_ADDR
// if not tmp then
45798: LD_VAR 0 8
45802: NOT
45803: IFFALSE 45807
// exit ;
45805: GO 47365
// for i in tmp do
45807: LD_ADDR_VAR 0 6
45811: PUSH
45812: LD_VAR 0 8
45816: PUSH
45817: FOR_IN
45818: IFFALSE 47340
// begin points := [ 0 , 0 , 0 ] ;
45820: LD_ADDR_VAR 0 9
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: LIST
45838: ST_TO_ADDR
// bpoints := 1 ;
45839: LD_ADDR_VAR 0 10
45843: PUSH
45844: LD_INT 1
45846: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45847: LD_VAR 0 6
45851: PPUSH
45852: CALL_OW 247
45856: PUSH
45857: LD_INT 1
45859: DOUBLE
45860: EQUAL
45861: IFTRUE 45865
45863: GO 46443
45865: POP
// begin if GetClass ( i ) = 1 then
45866: LD_VAR 0 6
45870: PPUSH
45871: CALL_OW 257
45875: PUSH
45876: LD_INT 1
45878: EQUAL
45879: IFFALSE 45900
// points := [ 10 , 5 , 3 ] ;
45881: LD_ADDR_VAR 0 9
45885: PUSH
45886: LD_INT 10
45888: PUSH
45889: LD_INT 5
45891: PUSH
45892: LD_INT 3
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: LIST
45899: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45900: LD_VAR 0 6
45904: PPUSH
45905: CALL_OW 257
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 3
45915: PUSH
45916: LD_INT 4
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: LIST
45923: IN
45924: IFFALSE 45945
// points := [ 3 , 2 , 1 ] ;
45926: LD_ADDR_VAR 0 9
45930: PUSH
45931: LD_INT 3
45933: PUSH
45934: LD_INT 2
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45945: LD_VAR 0 6
45949: PPUSH
45950: CALL_OW 257
45954: PUSH
45955: LD_INT 5
45957: EQUAL
45958: IFFALSE 45979
// points := [ 130 , 5 , 2 ] ;
45960: LD_ADDR_VAR 0 9
45964: PUSH
45965: LD_INT 130
45967: PUSH
45968: LD_INT 5
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: LIST
45978: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45979: LD_VAR 0 6
45983: PPUSH
45984: CALL_OW 257
45988: PUSH
45989: LD_INT 8
45991: EQUAL
45992: IFFALSE 46013
// points := [ 35 , 35 , 30 ] ;
45994: LD_ADDR_VAR 0 9
45998: PUSH
45999: LD_INT 35
46001: PUSH
46002: LD_INT 35
46004: PUSH
46005: LD_INT 30
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: LIST
46012: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46013: LD_VAR 0 6
46017: PPUSH
46018: CALL_OW 257
46022: PUSH
46023: LD_INT 9
46025: EQUAL
46026: IFFALSE 46047
// points := [ 20 , 55 , 40 ] ;
46028: LD_ADDR_VAR 0 9
46032: PUSH
46033: LD_INT 20
46035: PUSH
46036: LD_INT 55
46038: PUSH
46039: LD_INT 40
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: LIST
46046: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46047: LD_VAR 0 6
46051: PPUSH
46052: CALL_OW 257
46056: PUSH
46057: LD_INT 12
46059: PUSH
46060: LD_INT 16
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: IN
46067: IFFALSE 46088
// points := [ 5 , 3 , 2 ] ;
46069: LD_ADDR_VAR 0 9
46073: PUSH
46074: LD_INT 5
46076: PUSH
46077: LD_INT 3
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46088: LD_VAR 0 6
46092: PPUSH
46093: CALL_OW 257
46097: PUSH
46098: LD_INT 17
46100: EQUAL
46101: IFFALSE 46122
// points := [ 100 , 50 , 75 ] ;
46103: LD_ADDR_VAR 0 9
46107: PUSH
46108: LD_INT 100
46110: PUSH
46111: LD_INT 50
46113: PUSH
46114: LD_INT 75
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: LIST
46121: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46122: LD_VAR 0 6
46126: PPUSH
46127: CALL_OW 257
46131: PUSH
46132: LD_INT 15
46134: EQUAL
46135: IFFALSE 46156
// points := [ 10 , 5 , 3 ] ;
46137: LD_ADDR_VAR 0 9
46141: PUSH
46142: LD_INT 10
46144: PUSH
46145: LD_INT 5
46147: PUSH
46148: LD_INT 3
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: LIST
46155: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46156: LD_VAR 0 6
46160: PPUSH
46161: CALL_OW 257
46165: PUSH
46166: LD_INT 14
46168: EQUAL
46169: IFFALSE 46190
// points := [ 10 , 0 , 0 ] ;
46171: LD_ADDR_VAR 0 9
46175: PUSH
46176: LD_INT 10
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: LIST
46189: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46190: LD_VAR 0 6
46194: PPUSH
46195: CALL_OW 257
46199: PUSH
46200: LD_INT 11
46202: EQUAL
46203: IFFALSE 46224
// points := [ 30 , 10 , 5 ] ;
46205: LD_ADDR_VAR 0 9
46209: PUSH
46210: LD_INT 30
46212: PUSH
46213: LD_INT 10
46215: PUSH
46216: LD_INT 5
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46224: LD_VAR 0 1
46228: PPUSH
46229: LD_INT 5
46231: PPUSH
46232: CALL_OW 321
46236: PUSH
46237: LD_INT 2
46239: EQUAL
46240: IFFALSE 46257
// bpoints := bpoints * 1.8 ;
46242: LD_ADDR_VAR 0 10
46246: PUSH
46247: LD_VAR 0 10
46251: PUSH
46252: LD_REAL  1.80000000000000E+0000
46255: MUL
46256: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46257: LD_VAR 0 6
46261: PPUSH
46262: CALL_OW 257
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: LD_INT 3
46275: PUSH
46276: LD_INT 4
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: IN
46285: PUSH
46286: LD_VAR 0 1
46290: PPUSH
46291: LD_INT 51
46293: PPUSH
46294: CALL_OW 321
46298: PUSH
46299: LD_INT 2
46301: EQUAL
46302: AND
46303: IFFALSE 46320
// bpoints := bpoints * 1.2 ;
46305: LD_ADDR_VAR 0 10
46309: PUSH
46310: LD_VAR 0 10
46314: PUSH
46315: LD_REAL  1.20000000000000E+0000
46318: MUL
46319: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46320: LD_VAR 0 6
46324: PPUSH
46325: CALL_OW 257
46329: PUSH
46330: LD_INT 5
46332: PUSH
46333: LD_INT 7
46335: PUSH
46336: LD_INT 9
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: IN
46344: PUSH
46345: LD_VAR 0 1
46349: PPUSH
46350: LD_INT 52
46352: PPUSH
46353: CALL_OW 321
46357: PUSH
46358: LD_INT 2
46360: EQUAL
46361: AND
46362: IFFALSE 46379
// bpoints := bpoints * 1.5 ;
46364: LD_ADDR_VAR 0 10
46368: PUSH
46369: LD_VAR 0 10
46373: PUSH
46374: LD_REAL  1.50000000000000E+0000
46377: MUL
46378: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46379: LD_VAR 0 1
46383: PPUSH
46384: LD_INT 66
46386: PPUSH
46387: CALL_OW 321
46391: PUSH
46392: LD_INT 2
46394: EQUAL
46395: IFFALSE 46412
// bpoints := bpoints * 1.1 ;
46397: LD_ADDR_VAR 0 10
46401: PUSH
46402: LD_VAR 0 10
46406: PUSH
46407: LD_REAL  1.10000000000000E+0000
46410: MUL
46411: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46412: LD_ADDR_VAR 0 10
46416: PUSH
46417: LD_VAR 0 10
46421: PUSH
46422: LD_VAR 0 6
46426: PPUSH
46427: LD_INT 1
46429: PPUSH
46430: CALL_OW 259
46434: PUSH
46435: LD_REAL  1.15000000000000E+0000
46438: MUL
46439: MUL
46440: ST_TO_ADDR
// end ; unit_vehicle :
46441: GO 47269
46443: LD_INT 2
46445: DOUBLE
46446: EQUAL
46447: IFTRUE 46451
46449: GO 47257
46451: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46452: LD_VAR 0 6
46456: PPUSH
46457: CALL_OW 264
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: LD_INT 42
46467: PUSH
46468: LD_INT 24
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: LIST
46475: IN
46476: IFFALSE 46497
// points := [ 25 , 5 , 3 ] ;
46478: LD_ADDR_VAR 0 9
46482: PUSH
46483: LD_INT 25
46485: PUSH
46486: LD_INT 5
46488: PUSH
46489: LD_INT 3
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: LIST
46496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46497: LD_VAR 0 6
46501: PPUSH
46502: CALL_OW 264
46506: PUSH
46507: LD_INT 4
46509: PUSH
46510: LD_INT 43
46512: PUSH
46513: LD_INT 25
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: IN
46521: IFFALSE 46542
// points := [ 40 , 15 , 5 ] ;
46523: LD_ADDR_VAR 0 9
46527: PUSH
46528: LD_INT 40
46530: PUSH
46531: LD_INT 15
46533: PUSH
46534: LD_INT 5
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: LIST
46541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46542: LD_VAR 0 6
46546: PPUSH
46547: CALL_OW 264
46551: PUSH
46552: LD_INT 3
46554: PUSH
46555: LD_INT 23
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: IN
46562: IFFALSE 46583
// points := [ 7 , 25 , 8 ] ;
46564: LD_ADDR_VAR 0 9
46568: PUSH
46569: LD_INT 7
46571: PUSH
46572: LD_INT 25
46574: PUSH
46575: LD_INT 8
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: LIST
46582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46583: LD_VAR 0 6
46587: PPUSH
46588: CALL_OW 264
46592: PUSH
46593: LD_INT 5
46595: PUSH
46596: LD_INT 27
46598: PUSH
46599: LD_INT 44
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: IN
46607: IFFALSE 46628
// points := [ 14 , 50 , 16 ] ;
46609: LD_ADDR_VAR 0 9
46613: PUSH
46614: LD_INT 14
46616: PUSH
46617: LD_INT 50
46619: PUSH
46620: LD_INT 16
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46628: LD_VAR 0 6
46632: PPUSH
46633: CALL_OW 264
46637: PUSH
46638: LD_INT 6
46640: PUSH
46641: LD_INT 46
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: IN
46648: IFFALSE 46669
// points := [ 32 , 120 , 70 ] ;
46650: LD_ADDR_VAR 0 9
46654: PUSH
46655: LD_INT 32
46657: PUSH
46658: LD_INT 120
46660: PUSH
46661: LD_INT 70
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: LIST
46668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46669: LD_VAR 0 6
46673: PPUSH
46674: CALL_OW 264
46678: PUSH
46679: LD_INT 7
46681: PUSH
46682: LD_INT 28
46684: PUSH
46685: LD_INT 45
46687: PUSH
46688: LD_INT 92
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: IN
46697: IFFALSE 46718
// points := [ 35 , 20 , 45 ] ;
46699: LD_ADDR_VAR 0 9
46703: PUSH
46704: LD_INT 35
46706: PUSH
46707: LD_INT 20
46709: PUSH
46710: LD_INT 45
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: LIST
46717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46718: LD_VAR 0 6
46722: PPUSH
46723: CALL_OW 264
46727: PUSH
46728: LD_INT 47
46730: PUSH
46731: EMPTY
46732: LIST
46733: IN
46734: IFFALSE 46755
// points := [ 67 , 45 , 75 ] ;
46736: LD_ADDR_VAR 0 9
46740: PUSH
46741: LD_INT 67
46743: PUSH
46744: LD_INT 45
46746: PUSH
46747: LD_INT 75
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46755: LD_VAR 0 6
46759: PPUSH
46760: CALL_OW 264
46764: PUSH
46765: LD_INT 26
46767: PUSH
46768: EMPTY
46769: LIST
46770: IN
46771: IFFALSE 46792
// points := [ 120 , 30 , 80 ] ;
46773: LD_ADDR_VAR 0 9
46777: PUSH
46778: LD_INT 120
46780: PUSH
46781: LD_INT 30
46783: PUSH
46784: LD_INT 80
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46792: LD_VAR 0 6
46796: PPUSH
46797: CALL_OW 264
46801: PUSH
46802: LD_INT 22
46804: PUSH
46805: EMPTY
46806: LIST
46807: IN
46808: IFFALSE 46829
// points := [ 40 , 1 , 1 ] ;
46810: LD_ADDR_VAR 0 9
46814: PUSH
46815: LD_INT 40
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: LIST
46828: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46829: LD_VAR 0 6
46833: PPUSH
46834: CALL_OW 264
46838: PUSH
46839: LD_INT 29
46841: PUSH
46842: EMPTY
46843: LIST
46844: IN
46845: IFFALSE 46866
// points := [ 70 , 200 , 400 ] ;
46847: LD_ADDR_VAR 0 9
46851: PUSH
46852: LD_INT 70
46854: PUSH
46855: LD_INT 200
46857: PUSH
46858: LD_INT 400
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: LIST
46865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46866: LD_VAR 0 6
46870: PPUSH
46871: CALL_OW 264
46875: PUSH
46876: LD_INT 14
46878: PUSH
46879: LD_INT 53
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: IN
46886: IFFALSE 46907
// points := [ 40 , 10 , 20 ] ;
46888: LD_ADDR_VAR 0 9
46892: PUSH
46893: LD_INT 40
46895: PUSH
46896: LD_INT 10
46898: PUSH
46899: LD_INT 20
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: LIST
46906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46907: LD_VAR 0 6
46911: PPUSH
46912: CALL_OW 264
46916: PUSH
46917: LD_INT 9
46919: PUSH
46920: EMPTY
46921: LIST
46922: IN
46923: IFFALSE 46944
// points := [ 5 , 70 , 20 ] ;
46925: LD_ADDR_VAR 0 9
46929: PUSH
46930: LD_INT 5
46932: PUSH
46933: LD_INT 70
46935: PUSH
46936: LD_INT 20
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: LIST
46943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46944: LD_VAR 0 6
46948: PPUSH
46949: CALL_OW 264
46953: PUSH
46954: LD_INT 10
46956: PUSH
46957: EMPTY
46958: LIST
46959: IN
46960: IFFALSE 46981
// points := [ 35 , 110 , 70 ] ;
46962: LD_ADDR_VAR 0 9
46966: PUSH
46967: LD_INT 35
46969: PUSH
46970: LD_INT 110
46972: PUSH
46973: LD_INT 70
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: LIST
46980: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46981: LD_VAR 0 6
46985: PPUSH
46986: CALL_OW 265
46990: PUSH
46991: LD_INT 25
46993: EQUAL
46994: IFFALSE 47015
// points := [ 80 , 65 , 100 ] ;
46996: LD_ADDR_VAR 0 9
47000: PUSH
47001: LD_INT 80
47003: PUSH
47004: LD_INT 65
47006: PUSH
47007: LD_INT 100
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: LIST
47014: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47015: LD_VAR 0 6
47019: PPUSH
47020: CALL_OW 263
47024: PUSH
47025: LD_INT 1
47027: EQUAL
47028: IFFALSE 47063
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47030: LD_ADDR_VAR 0 10
47034: PUSH
47035: LD_VAR 0 10
47039: PUSH
47040: LD_VAR 0 6
47044: PPUSH
47045: CALL_OW 311
47049: PPUSH
47050: LD_INT 3
47052: PPUSH
47053: CALL_OW 259
47057: PUSH
47058: LD_INT 4
47060: MUL
47061: MUL
47062: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47063: LD_VAR 0 6
47067: PPUSH
47068: CALL_OW 263
47072: PUSH
47073: LD_INT 2
47075: EQUAL
47076: IFFALSE 47127
// begin j := IsControledBy ( i ) ;
47078: LD_ADDR_VAR 0 7
47082: PUSH
47083: LD_VAR 0 6
47087: PPUSH
47088: CALL_OW 312
47092: ST_TO_ADDR
// if j then
47093: LD_VAR 0 7
47097: IFFALSE 47127
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47099: LD_ADDR_VAR 0 10
47103: PUSH
47104: LD_VAR 0 10
47108: PUSH
47109: LD_VAR 0 7
47113: PPUSH
47114: LD_INT 3
47116: PPUSH
47117: CALL_OW 259
47121: PUSH
47122: LD_INT 3
47124: MUL
47125: MUL
47126: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47127: LD_VAR 0 6
47131: PPUSH
47132: CALL_OW 264
47136: PUSH
47137: LD_INT 5
47139: PUSH
47140: LD_INT 6
47142: PUSH
47143: LD_INT 46
47145: PUSH
47146: LD_INT 44
47148: PUSH
47149: LD_INT 47
47151: PUSH
47152: LD_INT 45
47154: PUSH
47155: LD_INT 28
47157: PUSH
47158: LD_INT 7
47160: PUSH
47161: LD_INT 27
47163: PUSH
47164: LD_INT 29
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: IN
47179: PUSH
47180: LD_VAR 0 1
47184: PPUSH
47185: LD_INT 52
47187: PPUSH
47188: CALL_OW 321
47192: PUSH
47193: LD_INT 2
47195: EQUAL
47196: AND
47197: IFFALSE 47214
// bpoints := bpoints * 1.2 ;
47199: LD_ADDR_VAR 0 10
47203: PUSH
47204: LD_VAR 0 10
47208: PUSH
47209: LD_REAL  1.20000000000000E+0000
47212: MUL
47213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47214: LD_VAR 0 6
47218: PPUSH
47219: CALL_OW 264
47223: PUSH
47224: LD_INT 6
47226: PUSH
47227: LD_INT 46
47229: PUSH
47230: LD_INT 47
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: IN
47238: IFFALSE 47255
// bpoints := bpoints * 1.2 ;
47240: LD_ADDR_VAR 0 10
47244: PUSH
47245: LD_VAR 0 10
47249: PUSH
47250: LD_REAL  1.20000000000000E+0000
47253: MUL
47254: ST_TO_ADDR
// end ; unit_building :
47255: GO 47269
47257: LD_INT 3
47259: DOUBLE
47260: EQUAL
47261: IFTRUE 47265
47263: GO 47268
47265: POP
// ; end ;
47266: GO 47269
47268: POP
// for j = 1 to 3 do
47269: LD_ADDR_VAR 0 7
47273: PUSH
47274: DOUBLE
47275: LD_INT 1
47277: DEC
47278: ST_TO_ADDR
47279: LD_INT 3
47281: PUSH
47282: FOR_TO
47283: IFFALSE 47336
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47285: LD_ADDR_VAR 0 5
47289: PUSH
47290: LD_VAR 0 5
47294: PPUSH
47295: LD_VAR 0 7
47299: PPUSH
47300: LD_VAR 0 5
47304: PUSH
47305: LD_VAR 0 7
47309: ARRAY
47310: PUSH
47311: LD_VAR 0 9
47315: PUSH
47316: LD_VAR 0 7
47320: ARRAY
47321: PUSH
47322: LD_VAR 0 10
47326: MUL
47327: PLUS
47328: PPUSH
47329: CALL_OW 1
47333: ST_TO_ADDR
47334: GO 47282
47336: POP
47337: POP
// end ;
47338: GO 45817
47340: POP
47341: POP
// result := Replace ( result , 4 , tmp ) ;
47342: LD_ADDR_VAR 0 5
47346: PUSH
47347: LD_VAR 0 5
47351: PPUSH
47352: LD_INT 4
47354: PPUSH
47355: LD_VAR 0 8
47359: PPUSH
47360: CALL_OW 1
47364: ST_TO_ADDR
// end ;
47365: LD_VAR 0 5
47369: RET
// export function DangerAtRange ( unit , range ) ; begin
47370: LD_INT 0
47372: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47373: LD_ADDR_VAR 0 3
47377: PUSH
47378: LD_VAR 0 1
47382: PPUSH
47383: CALL_OW 255
47387: PPUSH
47388: LD_VAR 0 1
47392: PPUSH
47393: CALL_OW 250
47397: PPUSH
47398: LD_VAR 0 1
47402: PPUSH
47403: CALL_OW 251
47407: PPUSH
47408: LD_VAR 0 2
47412: PPUSH
47413: CALL 45669 0 4
47417: ST_TO_ADDR
// end ;
47418: LD_VAR 0 3
47422: RET
// export function DangerInArea ( side , area ) ; begin
47423: LD_INT 0
47425: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47426: LD_ADDR_VAR 0 3
47430: PUSH
47431: LD_VAR 0 2
47435: PPUSH
47436: LD_INT 81
47438: PUSH
47439: LD_VAR 0 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PPUSH
47448: CALL_OW 70
47452: ST_TO_ADDR
// end ;
47453: LD_VAR 0 3
47457: RET
// export function IsExtension ( b ) ; begin
47458: LD_INT 0
47460: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47461: LD_ADDR_VAR 0 2
47465: PUSH
47466: LD_VAR 0 1
47470: PUSH
47471: LD_INT 23
47473: PUSH
47474: LD_INT 20
47476: PUSH
47477: LD_INT 22
47479: PUSH
47480: LD_INT 17
47482: PUSH
47483: LD_INT 24
47485: PUSH
47486: LD_INT 21
47488: PUSH
47489: LD_INT 19
47491: PUSH
47492: LD_INT 16
47494: PUSH
47495: LD_INT 25
47497: PUSH
47498: LD_INT 18
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: IN
47513: ST_TO_ADDR
// end ;
47514: LD_VAR 0 2
47518: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47519: LD_INT 0
47521: PPUSH
47522: PPUSH
47523: PPUSH
// result := [ ] ;
47524: LD_ADDR_VAR 0 4
47528: PUSH
47529: EMPTY
47530: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47531: LD_ADDR_VAR 0 5
47535: PUSH
47536: LD_VAR 0 2
47540: PPUSH
47541: LD_INT 21
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PPUSH
47551: CALL_OW 70
47555: ST_TO_ADDR
// if not tmp then
47556: LD_VAR 0 5
47560: NOT
47561: IFFALSE 47565
// exit ;
47563: GO 47629
// if checkLink then
47565: LD_VAR 0 3
47569: IFFALSE 47619
// begin for i in tmp do
47571: LD_ADDR_VAR 0 6
47575: PUSH
47576: LD_VAR 0 5
47580: PUSH
47581: FOR_IN
47582: IFFALSE 47617
// if GetBase ( i ) <> base then
47584: LD_VAR 0 6
47588: PPUSH
47589: CALL_OW 274
47593: PUSH
47594: LD_VAR 0 1
47598: NONEQUAL
47599: IFFALSE 47615
// ComLinkToBase ( base , i ) ;
47601: LD_VAR 0 1
47605: PPUSH
47606: LD_VAR 0 6
47610: PPUSH
47611: CALL_OW 169
47615: GO 47581
47617: POP
47618: POP
// end ; result := tmp ;
47619: LD_ADDR_VAR 0 4
47623: PUSH
47624: LD_VAR 0 5
47628: ST_TO_ADDR
// end ;
47629: LD_VAR 0 4
47633: RET
// export function ComComplete ( units , b ) ; var i ; begin
47634: LD_INT 0
47636: PPUSH
47637: PPUSH
// if not units then
47638: LD_VAR 0 1
47642: NOT
47643: IFFALSE 47647
// exit ;
47645: GO 47737
// for i in units do
47647: LD_ADDR_VAR 0 4
47651: PUSH
47652: LD_VAR 0 1
47656: PUSH
47657: FOR_IN
47658: IFFALSE 47735
// if BuildingStatus ( b ) = bs_build then
47660: LD_VAR 0 2
47664: PPUSH
47665: CALL_OW 461
47669: PUSH
47670: LD_INT 1
47672: EQUAL
47673: IFFALSE 47733
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47675: LD_VAR 0 4
47679: PPUSH
47680: LD_STRING h
47682: PUSH
47683: LD_VAR 0 2
47687: PPUSH
47688: CALL_OW 250
47692: PUSH
47693: LD_VAR 0 2
47697: PPUSH
47698: CALL_OW 251
47702: PUSH
47703: LD_VAR 0 2
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: PUSH
47726: EMPTY
47727: LIST
47728: PPUSH
47729: CALL_OW 446
47733: GO 47657
47735: POP
47736: POP
// end ;
47737: LD_VAR 0 3
47741: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47742: LD_INT 0
47744: PPUSH
47745: PPUSH
47746: PPUSH
47747: PPUSH
47748: PPUSH
47749: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47750: LD_VAR 0 1
47754: NOT
47755: PUSH
47756: LD_VAR 0 1
47760: PPUSH
47761: CALL_OW 263
47765: PUSH
47766: LD_INT 2
47768: NONEQUAL
47769: OR
47770: IFFALSE 47774
// exit ;
47772: GO 48090
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47774: LD_ADDR_VAR 0 6
47778: PUSH
47779: LD_INT 22
47781: PUSH
47782: LD_VAR 0 1
47786: PPUSH
47787: CALL_OW 255
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: LD_INT 30
47801: PUSH
47802: LD_INT 36
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 34
47811: PUSH
47812: LD_INT 31
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: LIST
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PPUSH
47828: CALL_OW 69
47832: ST_TO_ADDR
// if not tmp then
47833: LD_VAR 0 6
47837: NOT
47838: IFFALSE 47842
// exit ;
47840: GO 48090
// result := [ ] ;
47842: LD_ADDR_VAR 0 2
47846: PUSH
47847: EMPTY
47848: ST_TO_ADDR
// for i in tmp do
47849: LD_ADDR_VAR 0 3
47853: PUSH
47854: LD_VAR 0 6
47858: PUSH
47859: FOR_IN
47860: IFFALSE 47931
// begin t := UnitsInside ( i ) ;
47862: LD_ADDR_VAR 0 4
47866: PUSH
47867: LD_VAR 0 3
47871: PPUSH
47872: CALL_OW 313
47876: ST_TO_ADDR
// if t then
47877: LD_VAR 0 4
47881: IFFALSE 47929
// for j in t do
47883: LD_ADDR_VAR 0 7
47887: PUSH
47888: LD_VAR 0 4
47892: PUSH
47893: FOR_IN
47894: IFFALSE 47927
// result := Replace ( result , result + 1 , j ) ;
47896: LD_ADDR_VAR 0 2
47900: PUSH
47901: LD_VAR 0 2
47905: PPUSH
47906: LD_VAR 0 2
47910: PUSH
47911: LD_INT 1
47913: PLUS
47914: PPUSH
47915: LD_VAR 0 7
47919: PPUSH
47920: CALL_OW 1
47924: ST_TO_ADDR
47925: GO 47893
47927: POP
47928: POP
// end ;
47929: GO 47859
47931: POP
47932: POP
// if not result then
47933: LD_VAR 0 2
47937: NOT
47938: IFFALSE 47942
// exit ;
47940: GO 48090
// mech := result [ 1 ] ;
47942: LD_ADDR_VAR 0 5
47946: PUSH
47947: LD_VAR 0 2
47951: PUSH
47952: LD_INT 1
47954: ARRAY
47955: ST_TO_ADDR
// if result > 1 then
47956: LD_VAR 0 2
47960: PUSH
47961: LD_INT 1
47963: GREATER
47964: IFFALSE 48076
// begin for i = 2 to result do
47966: LD_ADDR_VAR 0 3
47970: PUSH
47971: DOUBLE
47972: LD_INT 2
47974: DEC
47975: ST_TO_ADDR
47976: LD_VAR 0 2
47980: PUSH
47981: FOR_TO
47982: IFFALSE 48074
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47984: LD_ADDR_VAR 0 4
47988: PUSH
47989: LD_VAR 0 2
47993: PUSH
47994: LD_VAR 0 3
47998: ARRAY
47999: PPUSH
48000: LD_INT 3
48002: PPUSH
48003: CALL_OW 259
48007: PUSH
48008: LD_VAR 0 2
48012: PUSH
48013: LD_VAR 0 3
48017: ARRAY
48018: PPUSH
48019: CALL_OW 432
48023: MINUS
48024: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48025: LD_VAR 0 4
48029: PUSH
48030: LD_VAR 0 5
48034: PPUSH
48035: LD_INT 3
48037: PPUSH
48038: CALL_OW 259
48042: PUSH
48043: LD_VAR 0 5
48047: PPUSH
48048: CALL_OW 432
48052: MINUS
48053: GREATEREQUAL
48054: IFFALSE 48072
// mech := result [ i ] ;
48056: LD_ADDR_VAR 0 5
48060: PUSH
48061: LD_VAR 0 2
48065: PUSH
48066: LD_VAR 0 3
48070: ARRAY
48071: ST_TO_ADDR
// end ;
48072: GO 47981
48074: POP
48075: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48076: LD_VAR 0 1
48080: PPUSH
48081: LD_VAR 0 5
48085: PPUSH
48086: CALL_OW 135
// end ;
48090: LD_VAR 0 2
48094: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48095: LD_INT 0
48097: PPUSH
48098: PPUSH
48099: PPUSH
48100: PPUSH
48101: PPUSH
48102: PPUSH
48103: PPUSH
48104: PPUSH
48105: PPUSH
48106: PPUSH
48107: PPUSH
48108: PPUSH
48109: PPUSH
// result := [ ] ;
48110: LD_ADDR_VAR 0 7
48114: PUSH
48115: EMPTY
48116: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48117: LD_VAR 0 1
48121: PPUSH
48122: CALL_OW 266
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: IN
48137: NOT
48138: IFFALSE 48142
// exit ;
48140: GO 49776
// if name then
48142: LD_VAR 0 3
48146: IFFALSE 48162
// SetBName ( base_dep , name ) ;
48148: LD_VAR 0 1
48152: PPUSH
48153: LD_VAR 0 3
48157: PPUSH
48158: CALL_OW 500
// base := GetBase ( base_dep ) ;
48162: LD_ADDR_VAR 0 15
48166: PUSH
48167: LD_VAR 0 1
48171: PPUSH
48172: CALL_OW 274
48176: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48177: LD_ADDR_VAR 0 16
48181: PUSH
48182: LD_VAR 0 1
48186: PPUSH
48187: CALL_OW 255
48191: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48192: LD_ADDR_VAR 0 17
48196: PUSH
48197: LD_VAR 0 1
48201: PPUSH
48202: CALL_OW 248
48206: ST_TO_ADDR
// if sources then
48207: LD_VAR 0 5
48211: IFFALSE 48258
// for i = 1 to 3 do
48213: LD_ADDR_VAR 0 8
48217: PUSH
48218: DOUBLE
48219: LD_INT 1
48221: DEC
48222: ST_TO_ADDR
48223: LD_INT 3
48225: PUSH
48226: FOR_TO
48227: IFFALSE 48256
// AddResourceType ( base , i , sources [ i ] ) ;
48229: LD_VAR 0 15
48233: PPUSH
48234: LD_VAR 0 8
48238: PPUSH
48239: LD_VAR 0 5
48243: PUSH
48244: LD_VAR 0 8
48248: ARRAY
48249: PPUSH
48250: CALL_OW 276
48254: GO 48226
48256: POP
48257: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48258: LD_ADDR_VAR 0 18
48262: PUSH
48263: LD_VAR 0 15
48267: PPUSH
48268: LD_VAR 0 2
48272: PPUSH
48273: LD_INT 1
48275: PPUSH
48276: CALL 47519 0 3
48280: ST_TO_ADDR
// InitHc ;
48281: CALL_OW 19
// InitUc ;
48285: CALL_OW 18
// uc_side := side ;
48289: LD_ADDR_OWVAR 20
48293: PUSH
48294: LD_VAR 0 16
48298: ST_TO_ADDR
// uc_nation := nation ;
48299: LD_ADDR_OWVAR 21
48303: PUSH
48304: LD_VAR 0 17
48308: ST_TO_ADDR
// if buildings then
48309: LD_VAR 0 18
48313: IFFALSE 49635
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48315: LD_ADDR_VAR 0 19
48319: PUSH
48320: LD_VAR 0 18
48324: PPUSH
48325: LD_INT 2
48327: PUSH
48328: LD_INT 30
48330: PUSH
48331: LD_INT 29
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 30
48340: PUSH
48341: LD_INT 30
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: PPUSH
48353: CALL_OW 72
48357: ST_TO_ADDR
// if tmp then
48358: LD_VAR 0 19
48362: IFFALSE 48410
// for i in tmp do
48364: LD_ADDR_VAR 0 8
48368: PUSH
48369: LD_VAR 0 19
48373: PUSH
48374: FOR_IN
48375: IFFALSE 48408
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48377: LD_VAR 0 8
48381: PPUSH
48382: CALL_OW 250
48386: PPUSH
48387: LD_VAR 0 8
48391: PPUSH
48392: CALL_OW 251
48396: PPUSH
48397: LD_VAR 0 16
48401: PPUSH
48402: CALL_OW 441
48406: GO 48374
48408: POP
48409: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48410: LD_VAR 0 18
48414: PPUSH
48415: LD_INT 2
48417: PUSH
48418: LD_INT 30
48420: PUSH
48421: LD_INT 32
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 30
48430: PUSH
48431: LD_INT 33
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: PPUSH
48443: CALL_OW 72
48447: IFFALSE 48535
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48449: LD_ADDR_VAR 0 8
48453: PUSH
48454: LD_VAR 0 18
48458: PPUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 30
48464: PUSH
48465: LD_INT 32
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 30
48474: PUSH
48475: LD_INT 33
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: LIST
48486: PPUSH
48487: CALL_OW 72
48491: PUSH
48492: FOR_IN
48493: IFFALSE 48533
// begin if not GetBWeapon ( i ) then
48495: LD_VAR 0 8
48499: PPUSH
48500: CALL_OW 269
48504: NOT
48505: IFFALSE 48531
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48507: LD_VAR 0 8
48511: PPUSH
48512: LD_VAR 0 8
48516: PPUSH
48517: LD_VAR 0 2
48521: PPUSH
48522: CALL 49781 0 2
48526: PPUSH
48527: CALL_OW 431
// end ;
48531: GO 48492
48533: POP
48534: POP
// end ; for i = 1 to personel do
48535: LD_ADDR_VAR 0 8
48539: PUSH
48540: DOUBLE
48541: LD_INT 1
48543: DEC
48544: ST_TO_ADDR
48545: LD_VAR 0 6
48549: PUSH
48550: FOR_TO
48551: IFFALSE 49615
// begin if i > 4 then
48553: LD_VAR 0 8
48557: PUSH
48558: LD_INT 4
48560: GREATER
48561: IFFALSE 48565
// break ;
48563: GO 49615
// case i of 1 :
48565: LD_VAR 0 8
48569: PUSH
48570: LD_INT 1
48572: DOUBLE
48573: EQUAL
48574: IFTRUE 48578
48576: GO 48658
48578: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48579: LD_ADDR_VAR 0 12
48583: PUSH
48584: LD_VAR 0 18
48588: PPUSH
48589: LD_INT 22
48591: PUSH
48592: LD_VAR 0 16
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 58
48603: PUSH
48604: EMPTY
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 30
48612: PUSH
48613: LD_INT 32
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 30
48622: PUSH
48623: LD_INT 4
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 30
48632: PUSH
48633: LD_INT 5
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: LIST
48650: PPUSH
48651: CALL_OW 72
48655: ST_TO_ADDR
48656: GO 48880
48658: LD_INT 2
48660: DOUBLE
48661: EQUAL
48662: IFTRUE 48666
48664: GO 48728
48666: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48667: LD_ADDR_VAR 0 12
48671: PUSH
48672: LD_VAR 0 18
48676: PPUSH
48677: LD_INT 22
48679: PUSH
48680: LD_VAR 0 16
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 30
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 30
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: LIST
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PPUSH
48721: CALL_OW 72
48725: ST_TO_ADDR
48726: GO 48880
48728: LD_INT 3
48730: DOUBLE
48731: EQUAL
48732: IFTRUE 48736
48734: GO 48798
48736: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48737: LD_ADDR_VAR 0 12
48741: PUSH
48742: LD_VAR 0 18
48746: PPUSH
48747: LD_INT 22
48749: PUSH
48750: LD_VAR 0 16
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 30
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 30
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PPUSH
48791: CALL_OW 72
48795: ST_TO_ADDR
48796: GO 48880
48798: LD_INT 4
48800: DOUBLE
48801: EQUAL
48802: IFTRUE 48806
48804: GO 48879
48806: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48807: LD_ADDR_VAR 0 12
48811: PUSH
48812: LD_VAR 0 18
48816: PPUSH
48817: LD_INT 22
48819: PUSH
48820: LD_VAR 0 16
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: LD_INT 30
48834: PUSH
48835: LD_INT 6
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 30
48844: PUSH
48845: LD_INT 7
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 30
48854: PUSH
48855: LD_INT 8
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PPUSH
48872: CALL_OW 72
48876: ST_TO_ADDR
48877: GO 48880
48879: POP
// if i = 1 then
48880: LD_VAR 0 8
48884: PUSH
48885: LD_INT 1
48887: EQUAL
48888: IFFALSE 48999
// begin tmp := [ ] ;
48890: LD_ADDR_VAR 0 19
48894: PUSH
48895: EMPTY
48896: ST_TO_ADDR
// for j in f do
48897: LD_ADDR_VAR 0 9
48901: PUSH
48902: LD_VAR 0 12
48906: PUSH
48907: FOR_IN
48908: IFFALSE 48981
// if GetBType ( j ) = b_bunker then
48910: LD_VAR 0 9
48914: PPUSH
48915: CALL_OW 266
48919: PUSH
48920: LD_INT 32
48922: EQUAL
48923: IFFALSE 48950
// tmp := Insert ( tmp , 1 , j ) else
48925: LD_ADDR_VAR 0 19
48929: PUSH
48930: LD_VAR 0 19
48934: PPUSH
48935: LD_INT 1
48937: PPUSH
48938: LD_VAR 0 9
48942: PPUSH
48943: CALL_OW 2
48947: ST_TO_ADDR
48948: GO 48979
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48950: LD_ADDR_VAR 0 19
48954: PUSH
48955: LD_VAR 0 19
48959: PPUSH
48960: LD_VAR 0 19
48964: PUSH
48965: LD_INT 1
48967: PLUS
48968: PPUSH
48969: LD_VAR 0 9
48973: PPUSH
48974: CALL_OW 2
48978: ST_TO_ADDR
48979: GO 48907
48981: POP
48982: POP
// if tmp then
48983: LD_VAR 0 19
48987: IFFALSE 48999
// f := tmp ;
48989: LD_ADDR_VAR 0 12
48993: PUSH
48994: LD_VAR 0 19
48998: ST_TO_ADDR
// end ; x := personel [ i ] ;
48999: LD_ADDR_VAR 0 13
49003: PUSH
49004: LD_VAR 0 6
49008: PUSH
49009: LD_VAR 0 8
49013: ARRAY
49014: ST_TO_ADDR
// if x = - 1 then
49015: LD_VAR 0 13
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: EQUAL
49024: IFFALSE 49233
// begin for j in f do
49026: LD_ADDR_VAR 0 9
49030: PUSH
49031: LD_VAR 0 12
49035: PUSH
49036: FOR_IN
49037: IFFALSE 49229
// repeat InitHc ;
49039: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49043: LD_VAR 0 9
49047: PPUSH
49048: CALL_OW 266
49052: PUSH
49053: LD_INT 5
49055: EQUAL
49056: IFFALSE 49126
// begin if UnitsInside ( j ) < 3 then
49058: LD_VAR 0 9
49062: PPUSH
49063: CALL_OW 313
49067: PUSH
49068: LD_INT 3
49070: LESS
49071: IFFALSE 49107
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49073: LD_INT 0
49075: PPUSH
49076: LD_INT 5
49078: PUSH
49079: LD_INT 8
49081: PUSH
49082: LD_INT 9
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: LIST
49089: PUSH
49090: LD_VAR 0 17
49094: ARRAY
49095: PPUSH
49096: LD_VAR 0 4
49100: PPUSH
49101: CALL_OW 380
49105: GO 49124
// PrepareHuman ( false , i , skill ) ;
49107: LD_INT 0
49109: PPUSH
49110: LD_VAR 0 8
49114: PPUSH
49115: LD_VAR 0 4
49119: PPUSH
49120: CALL_OW 380
// end else
49124: GO 49143
// PrepareHuman ( false , i , skill ) ;
49126: LD_INT 0
49128: PPUSH
49129: LD_VAR 0 8
49133: PPUSH
49134: LD_VAR 0 4
49138: PPUSH
49139: CALL_OW 380
// un := CreateHuman ;
49143: LD_ADDR_VAR 0 14
49147: PUSH
49148: CALL_OW 44
49152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49153: LD_ADDR_VAR 0 7
49157: PUSH
49158: LD_VAR 0 7
49162: PPUSH
49163: LD_INT 1
49165: PPUSH
49166: LD_VAR 0 14
49170: PPUSH
49171: CALL_OW 2
49175: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49176: LD_VAR 0 14
49180: PPUSH
49181: LD_VAR 0 9
49185: PPUSH
49186: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49190: LD_VAR 0 9
49194: PPUSH
49195: CALL_OW 313
49199: PUSH
49200: LD_INT 6
49202: EQUAL
49203: PUSH
49204: LD_VAR 0 9
49208: PPUSH
49209: CALL_OW 266
49213: PUSH
49214: LD_INT 32
49216: PUSH
49217: LD_INT 31
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: IN
49224: OR
49225: IFFALSE 49039
49227: GO 49036
49229: POP
49230: POP
// end else
49231: GO 49613
// for j = 1 to x do
49233: LD_ADDR_VAR 0 9
49237: PUSH
49238: DOUBLE
49239: LD_INT 1
49241: DEC
49242: ST_TO_ADDR
49243: LD_VAR 0 13
49247: PUSH
49248: FOR_TO
49249: IFFALSE 49611
// begin InitHc ;
49251: CALL_OW 19
// if not f then
49255: LD_VAR 0 12
49259: NOT
49260: IFFALSE 49349
// begin PrepareHuman ( false , i , skill ) ;
49262: LD_INT 0
49264: PPUSH
49265: LD_VAR 0 8
49269: PPUSH
49270: LD_VAR 0 4
49274: PPUSH
49275: CALL_OW 380
// un := CreateHuman ;
49279: LD_ADDR_VAR 0 14
49283: PUSH
49284: CALL_OW 44
49288: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49289: LD_ADDR_VAR 0 7
49293: PUSH
49294: LD_VAR 0 7
49298: PPUSH
49299: LD_INT 1
49301: PPUSH
49302: LD_VAR 0 14
49306: PPUSH
49307: CALL_OW 2
49311: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49312: LD_VAR 0 14
49316: PPUSH
49317: LD_VAR 0 1
49321: PPUSH
49322: CALL_OW 250
49326: PPUSH
49327: LD_VAR 0 1
49331: PPUSH
49332: CALL_OW 251
49336: PPUSH
49337: LD_INT 10
49339: PPUSH
49340: LD_INT 0
49342: PPUSH
49343: CALL_OW 50
// continue ;
49347: GO 49248
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49349: LD_VAR 0 12
49353: PUSH
49354: LD_INT 1
49356: ARRAY
49357: PPUSH
49358: CALL_OW 313
49362: PUSH
49363: LD_VAR 0 12
49367: PUSH
49368: LD_INT 1
49370: ARRAY
49371: PPUSH
49372: CALL_OW 266
49376: PUSH
49377: LD_INT 32
49379: PUSH
49380: LD_INT 31
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: IN
49387: AND
49388: PUSH
49389: LD_VAR 0 12
49393: PUSH
49394: LD_INT 1
49396: ARRAY
49397: PPUSH
49398: CALL_OW 313
49402: PUSH
49403: LD_INT 6
49405: EQUAL
49406: OR
49407: IFFALSE 49427
// f := Delete ( f , 1 ) ;
49409: LD_ADDR_VAR 0 12
49413: PUSH
49414: LD_VAR 0 12
49418: PPUSH
49419: LD_INT 1
49421: PPUSH
49422: CALL_OW 3
49426: ST_TO_ADDR
// if not f then
49427: LD_VAR 0 12
49431: NOT
49432: IFFALSE 49450
// begin x := x + 2 ;
49434: LD_ADDR_VAR 0 13
49438: PUSH
49439: LD_VAR 0 13
49443: PUSH
49444: LD_INT 2
49446: PLUS
49447: ST_TO_ADDR
// continue ;
49448: GO 49248
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49450: LD_VAR 0 12
49454: PUSH
49455: LD_INT 1
49457: ARRAY
49458: PPUSH
49459: CALL_OW 266
49463: PUSH
49464: LD_INT 5
49466: EQUAL
49467: IFFALSE 49541
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49469: LD_VAR 0 12
49473: PUSH
49474: LD_INT 1
49476: ARRAY
49477: PPUSH
49478: CALL_OW 313
49482: PUSH
49483: LD_INT 3
49485: LESS
49486: IFFALSE 49522
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49488: LD_INT 0
49490: PPUSH
49491: LD_INT 5
49493: PUSH
49494: LD_INT 8
49496: PUSH
49497: LD_INT 9
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: LIST
49504: PUSH
49505: LD_VAR 0 17
49509: ARRAY
49510: PPUSH
49511: LD_VAR 0 4
49515: PPUSH
49516: CALL_OW 380
49520: GO 49539
// PrepareHuman ( false , i , skill ) ;
49522: LD_INT 0
49524: PPUSH
49525: LD_VAR 0 8
49529: PPUSH
49530: LD_VAR 0 4
49534: PPUSH
49535: CALL_OW 380
// end else
49539: GO 49558
// PrepareHuman ( false , i , skill ) ;
49541: LD_INT 0
49543: PPUSH
49544: LD_VAR 0 8
49548: PPUSH
49549: LD_VAR 0 4
49553: PPUSH
49554: CALL_OW 380
// un := CreateHuman ;
49558: LD_ADDR_VAR 0 14
49562: PUSH
49563: CALL_OW 44
49567: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49568: LD_ADDR_VAR 0 7
49572: PUSH
49573: LD_VAR 0 7
49577: PPUSH
49578: LD_INT 1
49580: PPUSH
49581: LD_VAR 0 14
49585: PPUSH
49586: CALL_OW 2
49590: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49591: LD_VAR 0 14
49595: PPUSH
49596: LD_VAR 0 12
49600: PUSH
49601: LD_INT 1
49603: ARRAY
49604: PPUSH
49605: CALL_OW 52
// end ;
49609: GO 49248
49611: POP
49612: POP
// end ;
49613: GO 48550
49615: POP
49616: POP
// result := result ^ buildings ;
49617: LD_ADDR_VAR 0 7
49621: PUSH
49622: LD_VAR 0 7
49626: PUSH
49627: LD_VAR 0 18
49631: ADD
49632: ST_TO_ADDR
// end else
49633: GO 49776
// begin for i = 1 to personel do
49635: LD_ADDR_VAR 0 8
49639: PUSH
49640: DOUBLE
49641: LD_INT 1
49643: DEC
49644: ST_TO_ADDR
49645: LD_VAR 0 6
49649: PUSH
49650: FOR_TO
49651: IFFALSE 49774
// begin if i > 4 then
49653: LD_VAR 0 8
49657: PUSH
49658: LD_INT 4
49660: GREATER
49661: IFFALSE 49665
// break ;
49663: GO 49774
// x := personel [ i ] ;
49665: LD_ADDR_VAR 0 13
49669: PUSH
49670: LD_VAR 0 6
49674: PUSH
49675: LD_VAR 0 8
49679: ARRAY
49680: ST_TO_ADDR
// if x = - 1 then
49681: LD_VAR 0 13
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: EQUAL
49690: IFFALSE 49694
// continue ;
49692: GO 49650
// PrepareHuman ( false , i , skill ) ;
49694: LD_INT 0
49696: PPUSH
49697: LD_VAR 0 8
49701: PPUSH
49702: LD_VAR 0 4
49706: PPUSH
49707: CALL_OW 380
// un := CreateHuman ;
49711: LD_ADDR_VAR 0 14
49715: PUSH
49716: CALL_OW 44
49720: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49721: LD_VAR 0 14
49725: PPUSH
49726: LD_VAR 0 1
49730: PPUSH
49731: CALL_OW 250
49735: PPUSH
49736: LD_VAR 0 1
49740: PPUSH
49741: CALL_OW 251
49745: PPUSH
49746: LD_INT 10
49748: PPUSH
49749: LD_INT 0
49751: PPUSH
49752: CALL_OW 50
// result := result ^ un ;
49756: LD_ADDR_VAR 0 7
49760: PUSH
49761: LD_VAR 0 7
49765: PUSH
49766: LD_VAR 0 14
49770: ADD
49771: ST_TO_ADDR
// end ;
49772: GO 49650
49774: POP
49775: POP
// end ; end ;
49776: LD_VAR 0 7
49780: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49781: LD_INT 0
49783: PPUSH
49784: PPUSH
49785: PPUSH
49786: PPUSH
49787: PPUSH
49788: PPUSH
49789: PPUSH
49790: PPUSH
49791: PPUSH
49792: PPUSH
49793: PPUSH
49794: PPUSH
49795: PPUSH
49796: PPUSH
49797: PPUSH
49798: PPUSH
// result := false ;
49799: LD_ADDR_VAR 0 3
49803: PUSH
49804: LD_INT 0
49806: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49807: LD_VAR 0 1
49811: NOT
49812: PUSH
49813: LD_VAR 0 1
49817: PPUSH
49818: CALL_OW 266
49822: PUSH
49823: LD_INT 32
49825: PUSH
49826: LD_INT 33
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: IN
49833: NOT
49834: OR
49835: IFFALSE 49839
// exit ;
49837: GO 50948
// nat := GetNation ( tower ) ;
49839: LD_ADDR_VAR 0 12
49843: PUSH
49844: LD_VAR 0 1
49848: PPUSH
49849: CALL_OW 248
49853: ST_TO_ADDR
// side := GetSide ( tower ) ;
49854: LD_ADDR_VAR 0 16
49858: PUSH
49859: LD_VAR 0 1
49863: PPUSH
49864: CALL_OW 255
49868: ST_TO_ADDR
// x := GetX ( tower ) ;
49869: LD_ADDR_VAR 0 10
49873: PUSH
49874: LD_VAR 0 1
49878: PPUSH
49879: CALL_OW 250
49883: ST_TO_ADDR
// y := GetY ( tower ) ;
49884: LD_ADDR_VAR 0 11
49888: PUSH
49889: LD_VAR 0 1
49893: PPUSH
49894: CALL_OW 251
49898: ST_TO_ADDR
// if not x or not y then
49899: LD_VAR 0 10
49903: NOT
49904: PUSH
49905: LD_VAR 0 11
49909: NOT
49910: OR
49911: IFFALSE 49915
// exit ;
49913: GO 50948
// weapon := 0 ;
49915: LD_ADDR_VAR 0 18
49919: PUSH
49920: LD_INT 0
49922: ST_TO_ADDR
// fac_list := [ ] ;
49923: LD_ADDR_VAR 0 17
49927: PUSH
49928: EMPTY
49929: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49930: LD_ADDR_VAR 0 6
49934: PUSH
49935: LD_VAR 0 1
49939: PPUSH
49940: CALL_OW 274
49944: PPUSH
49945: LD_VAR 0 2
49949: PPUSH
49950: LD_INT 0
49952: PPUSH
49953: CALL 47519 0 3
49957: PPUSH
49958: LD_INT 30
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PPUSH
49968: CALL_OW 72
49972: ST_TO_ADDR
// if not factories then
49973: LD_VAR 0 6
49977: NOT
49978: IFFALSE 49982
// exit ;
49980: GO 50948
// for i in factories do
49982: LD_ADDR_VAR 0 8
49986: PUSH
49987: LD_VAR 0 6
49991: PUSH
49992: FOR_IN
49993: IFFALSE 50018
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49995: LD_ADDR_VAR 0 17
49999: PUSH
50000: LD_VAR 0 17
50004: PUSH
50005: LD_VAR 0 8
50009: PPUSH
50010: CALL_OW 478
50014: UNION
50015: ST_TO_ADDR
50016: GO 49992
50018: POP
50019: POP
// if not fac_list then
50020: LD_VAR 0 17
50024: NOT
50025: IFFALSE 50029
// exit ;
50027: GO 50948
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50029: LD_ADDR_VAR 0 5
50033: PUSH
50034: LD_INT 4
50036: PUSH
50037: LD_INT 5
50039: PUSH
50040: LD_INT 9
50042: PUSH
50043: LD_INT 10
50045: PUSH
50046: LD_INT 6
50048: PUSH
50049: LD_INT 7
50051: PUSH
50052: LD_INT 11
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 27
50066: PUSH
50067: LD_INT 28
50069: PUSH
50070: LD_INT 26
50072: PUSH
50073: LD_INT 30
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 43
50084: PUSH
50085: LD_INT 44
50087: PUSH
50088: LD_INT 46
50090: PUSH
50091: LD_INT 45
50093: PUSH
50094: LD_INT 47
50096: PUSH
50097: LD_INT 49
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: LIST
50112: PUSH
50113: LD_VAR 0 12
50117: ARRAY
50118: ST_TO_ADDR
// list := list isect fac_list ;
50119: LD_ADDR_VAR 0 5
50123: PUSH
50124: LD_VAR 0 5
50128: PUSH
50129: LD_VAR 0 17
50133: ISECT
50134: ST_TO_ADDR
// if not list then
50135: LD_VAR 0 5
50139: NOT
50140: IFFALSE 50144
// exit ;
50142: GO 50948
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50144: LD_VAR 0 12
50148: PUSH
50149: LD_INT 3
50151: EQUAL
50152: PUSH
50153: LD_INT 49
50155: PUSH
50156: LD_VAR 0 5
50160: IN
50161: AND
50162: PUSH
50163: LD_INT 31
50165: PPUSH
50166: LD_VAR 0 16
50170: PPUSH
50171: CALL_OW 321
50175: PUSH
50176: LD_INT 2
50178: EQUAL
50179: AND
50180: IFFALSE 50240
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50182: LD_INT 22
50184: PUSH
50185: LD_VAR 0 16
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 35
50196: PUSH
50197: LD_INT 49
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 91
50206: PUSH
50207: LD_VAR 0 1
50211: PUSH
50212: LD_INT 10
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: LIST
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: PPUSH
50225: CALL_OW 69
50229: NOT
50230: IFFALSE 50240
// weapon := ru_time_lapser ;
50232: LD_ADDR_VAR 0 18
50236: PUSH
50237: LD_INT 49
50239: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50240: LD_VAR 0 12
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: IN
50255: PUSH
50256: LD_INT 11
50258: PUSH
50259: LD_VAR 0 5
50263: IN
50264: PUSH
50265: LD_INT 30
50267: PUSH
50268: LD_VAR 0 5
50272: IN
50273: OR
50274: AND
50275: PUSH
50276: LD_INT 6
50278: PPUSH
50279: LD_VAR 0 16
50283: PPUSH
50284: CALL_OW 321
50288: PUSH
50289: LD_INT 2
50291: EQUAL
50292: AND
50293: IFFALSE 50458
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50295: LD_INT 22
50297: PUSH
50298: LD_VAR 0 16
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: PUSH
50310: LD_INT 35
50312: PUSH
50313: LD_INT 11
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 35
50322: PUSH
50323: LD_INT 30
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 91
50337: PUSH
50338: LD_VAR 0 1
50342: PUSH
50343: LD_INT 18
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: LIST
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: LIST
50355: PPUSH
50356: CALL_OW 69
50360: NOT
50361: PUSH
50362: LD_INT 22
50364: PUSH
50365: LD_VAR 0 16
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: LD_INT 30
50379: PUSH
50380: LD_INT 32
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 30
50389: PUSH
50390: LD_INT 33
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 91
50404: PUSH
50405: LD_VAR 0 1
50409: PUSH
50410: LD_INT 12
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: PUSH
50423: EMPTY
50424: LIST
50425: PPUSH
50426: CALL_OW 69
50430: PUSH
50431: LD_INT 2
50433: GREATER
50434: AND
50435: IFFALSE 50458
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50437: LD_ADDR_VAR 0 18
50441: PUSH
50442: LD_INT 11
50444: PUSH
50445: LD_INT 30
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_VAR 0 12
50456: ARRAY
50457: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50458: LD_VAR 0 18
50462: NOT
50463: PUSH
50464: LD_INT 40
50466: PPUSH
50467: LD_VAR 0 16
50471: PPUSH
50472: CALL_OW 321
50476: PUSH
50477: LD_INT 2
50479: EQUAL
50480: AND
50481: PUSH
50482: LD_INT 7
50484: PUSH
50485: LD_VAR 0 5
50489: IN
50490: PUSH
50491: LD_INT 28
50493: PUSH
50494: LD_VAR 0 5
50498: IN
50499: OR
50500: PUSH
50501: LD_INT 45
50503: PUSH
50504: LD_VAR 0 5
50508: IN
50509: OR
50510: AND
50511: IFFALSE 50765
// begin hex := GetHexInfo ( x , y ) ;
50513: LD_ADDR_VAR 0 4
50517: PUSH
50518: LD_VAR 0 10
50522: PPUSH
50523: LD_VAR 0 11
50527: PPUSH
50528: CALL_OW 546
50532: ST_TO_ADDR
// if hex [ 1 ] then
50533: LD_VAR 0 4
50537: PUSH
50538: LD_INT 1
50540: ARRAY
50541: IFFALSE 50545
// exit ;
50543: GO 50948
// height := hex [ 2 ] ;
50545: LD_ADDR_VAR 0 15
50549: PUSH
50550: LD_VAR 0 4
50554: PUSH
50555: LD_INT 2
50557: ARRAY
50558: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50559: LD_ADDR_VAR 0 14
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: LD_INT 3
50572: PUSH
50573: LD_INT 5
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: ST_TO_ADDR
// for i in tmp do
50582: LD_ADDR_VAR 0 8
50586: PUSH
50587: LD_VAR 0 14
50591: PUSH
50592: FOR_IN
50593: IFFALSE 50763
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50595: LD_ADDR_VAR 0 9
50599: PUSH
50600: LD_VAR 0 10
50604: PPUSH
50605: LD_VAR 0 8
50609: PPUSH
50610: LD_INT 5
50612: PPUSH
50613: CALL_OW 272
50617: PUSH
50618: LD_VAR 0 11
50622: PPUSH
50623: LD_VAR 0 8
50627: PPUSH
50628: LD_INT 5
50630: PPUSH
50631: CALL_OW 273
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50640: LD_VAR 0 9
50644: PUSH
50645: LD_INT 1
50647: ARRAY
50648: PPUSH
50649: LD_VAR 0 9
50653: PUSH
50654: LD_INT 2
50656: ARRAY
50657: PPUSH
50658: CALL_OW 488
50662: IFFALSE 50761
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50664: LD_ADDR_VAR 0 4
50668: PUSH
50669: LD_VAR 0 9
50673: PUSH
50674: LD_INT 1
50676: ARRAY
50677: PPUSH
50678: LD_VAR 0 9
50682: PUSH
50683: LD_INT 2
50685: ARRAY
50686: PPUSH
50687: CALL_OW 546
50691: ST_TO_ADDR
// if hex [ 1 ] then
50692: LD_VAR 0 4
50696: PUSH
50697: LD_INT 1
50699: ARRAY
50700: IFFALSE 50704
// continue ;
50702: GO 50592
// h := hex [ 2 ] ;
50704: LD_ADDR_VAR 0 13
50708: PUSH
50709: LD_VAR 0 4
50713: PUSH
50714: LD_INT 2
50716: ARRAY
50717: ST_TO_ADDR
// if h + 7 < height then
50718: LD_VAR 0 13
50722: PUSH
50723: LD_INT 7
50725: PLUS
50726: PUSH
50727: LD_VAR 0 15
50731: LESS
50732: IFFALSE 50761
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50734: LD_ADDR_VAR 0 18
50738: PUSH
50739: LD_INT 7
50741: PUSH
50742: LD_INT 28
50744: PUSH
50745: LD_INT 45
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: LIST
50752: PUSH
50753: LD_VAR 0 12
50757: ARRAY
50758: ST_TO_ADDR
// break ;
50759: GO 50763
// end ; end ; end ;
50761: GO 50592
50763: POP
50764: POP
// end ; if not weapon then
50765: LD_VAR 0 18
50769: NOT
50770: IFFALSE 50830
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50772: LD_ADDR_VAR 0 5
50776: PUSH
50777: LD_VAR 0 5
50781: PUSH
50782: LD_INT 11
50784: PUSH
50785: LD_INT 30
50787: PUSH
50788: LD_INT 49
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: LIST
50795: DIFF
50796: ST_TO_ADDR
// if not list then
50797: LD_VAR 0 5
50801: NOT
50802: IFFALSE 50806
// exit ;
50804: GO 50948
// weapon := list [ rand ( 1 , list ) ] ;
50806: LD_ADDR_VAR 0 18
50810: PUSH
50811: LD_VAR 0 5
50815: PUSH
50816: LD_INT 1
50818: PPUSH
50819: LD_VAR 0 5
50823: PPUSH
50824: CALL_OW 12
50828: ARRAY
50829: ST_TO_ADDR
// end ; if weapon then
50830: LD_VAR 0 18
50834: IFFALSE 50948
// begin tmp := CostOfWeapon ( weapon ) ;
50836: LD_ADDR_VAR 0 14
50840: PUSH
50841: LD_VAR 0 18
50845: PPUSH
50846: CALL_OW 451
50850: ST_TO_ADDR
// j := GetBase ( tower ) ;
50851: LD_ADDR_VAR 0 9
50855: PUSH
50856: LD_VAR 0 1
50860: PPUSH
50861: CALL_OW 274
50865: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50866: LD_VAR 0 9
50870: PPUSH
50871: LD_INT 1
50873: PPUSH
50874: CALL_OW 275
50878: PUSH
50879: LD_VAR 0 14
50883: PUSH
50884: LD_INT 1
50886: ARRAY
50887: GREATEREQUAL
50888: PUSH
50889: LD_VAR 0 9
50893: PPUSH
50894: LD_INT 2
50896: PPUSH
50897: CALL_OW 275
50901: PUSH
50902: LD_VAR 0 14
50906: PUSH
50907: LD_INT 2
50909: ARRAY
50910: GREATEREQUAL
50911: AND
50912: PUSH
50913: LD_VAR 0 9
50917: PPUSH
50918: LD_INT 3
50920: PPUSH
50921: CALL_OW 275
50925: PUSH
50926: LD_VAR 0 14
50930: PUSH
50931: LD_INT 3
50933: ARRAY
50934: GREATEREQUAL
50935: AND
50936: IFFALSE 50948
// result := weapon ;
50938: LD_ADDR_VAR 0 3
50942: PUSH
50943: LD_VAR 0 18
50947: ST_TO_ADDR
// end ; end ;
50948: LD_VAR 0 3
50952: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50953: LD_INT 0
50955: PPUSH
50956: PPUSH
// result := true ;
50957: LD_ADDR_VAR 0 3
50961: PUSH
50962: LD_INT 1
50964: ST_TO_ADDR
// if array1 = array2 then
50965: LD_VAR 0 1
50969: PUSH
50970: LD_VAR 0 2
50974: EQUAL
50975: IFFALSE 51035
// begin for i = 1 to array1 do
50977: LD_ADDR_VAR 0 4
50981: PUSH
50982: DOUBLE
50983: LD_INT 1
50985: DEC
50986: ST_TO_ADDR
50987: LD_VAR 0 1
50991: PUSH
50992: FOR_TO
50993: IFFALSE 51031
// if array1 [ i ] <> array2 [ i ] then
50995: LD_VAR 0 1
50999: PUSH
51000: LD_VAR 0 4
51004: ARRAY
51005: PUSH
51006: LD_VAR 0 2
51010: PUSH
51011: LD_VAR 0 4
51015: ARRAY
51016: NONEQUAL
51017: IFFALSE 51029
// begin result := false ;
51019: LD_ADDR_VAR 0 3
51023: PUSH
51024: LD_INT 0
51026: ST_TO_ADDR
// break ;
51027: GO 51031
// end ;
51029: GO 50992
51031: POP
51032: POP
// end else
51033: GO 51043
// result := false ;
51035: LD_ADDR_VAR 0 3
51039: PUSH
51040: LD_INT 0
51042: ST_TO_ADDR
// end ;
51043: LD_VAR 0 3
51047: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51048: LD_INT 0
51050: PPUSH
51051: PPUSH
// if not array1 or not array2 then
51052: LD_VAR 0 1
51056: NOT
51057: PUSH
51058: LD_VAR 0 2
51062: NOT
51063: OR
51064: IFFALSE 51068
// exit ;
51066: GO 51132
// result := true ;
51068: LD_ADDR_VAR 0 3
51072: PUSH
51073: LD_INT 1
51075: ST_TO_ADDR
// for i = 1 to array1 do
51076: LD_ADDR_VAR 0 4
51080: PUSH
51081: DOUBLE
51082: LD_INT 1
51084: DEC
51085: ST_TO_ADDR
51086: LD_VAR 0 1
51090: PUSH
51091: FOR_TO
51092: IFFALSE 51130
// if array1 [ i ] <> array2 [ i ] then
51094: LD_VAR 0 1
51098: PUSH
51099: LD_VAR 0 4
51103: ARRAY
51104: PUSH
51105: LD_VAR 0 2
51109: PUSH
51110: LD_VAR 0 4
51114: ARRAY
51115: NONEQUAL
51116: IFFALSE 51128
// begin result := false ;
51118: LD_ADDR_VAR 0 3
51122: PUSH
51123: LD_INT 0
51125: ST_TO_ADDR
// break ;
51126: GO 51130
// end ;
51128: GO 51091
51130: POP
51131: POP
// end ;
51132: LD_VAR 0 3
51136: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51137: LD_INT 0
51139: PPUSH
51140: PPUSH
51141: PPUSH
// pom := GetBase ( fac ) ;
51142: LD_ADDR_VAR 0 5
51146: PUSH
51147: LD_VAR 0 1
51151: PPUSH
51152: CALL_OW 274
51156: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51157: LD_ADDR_VAR 0 4
51161: PUSH
51162: LD_VAR 0 2
51166: PUSH
51167: LD_INT 1
51169: ARRAY
51170: PPUSH
51171: LD_VAR 0 2
51175: PUSH
51176: LD_INT 2
51178: ARRAY
51179: PPUSH
51180: LD_VAR 0 2
51184: PUSH
51185: LD_INT 3
51187: ARRAY
51188: PPUSH
51189: LD_VAR 0 2
51193: PUSH
51194: LD_INT 4
51196: ARRAY
51197: PPUSH
51198: CALL_OW 449
51202: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51203: LD_ADDR_VAR 0 3
51207: PUSH
51208: LD_VAR 0 5
51212: PPUSH
51213: LD_INT 1
51215: PPUSH
51216: CALL_OW 275
51220: PUSH
51221: LD_VAR 0 4
51225: PUSH
51226: LD_INT 1
51228: ARRAY
51229: GREATEREQUAL
51230: PUSH
51231: LD_VAR 0 5
51235: PPUSH
51236: LD_INT 2
51238: PPUSH
51239: CALL_OW 275
51243: PUSH
51244: LD_VAR 0 4
51248: PUSH
51249: LD_INT 2
51251: ARRAY
51252: GREATEREQUAL
51253: AND
51254: PUSH
51255: LD_VAR 0 5
51259: PPUSH
51260: LD_INT 3
51262: PPUSH
51263: CALL_OW 275
51267: PUSH
51268: LD_VAR 0 4
51272: PUSH
51273: LD_INT 3
51275: ARRAY
51276: GREATEREQUAL
51277: AND
51278: ST_TO_ADDR
// end ;
51279: LD_VAR 0 3
51283: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51284: LD_INT 0
51286: PPUSH
51287: PPUSH
51288: PPUSH
51289: PPUSH
// pom := GetBase ( building ) ;
51290: LD_ADDR_VAR 0 3
51294: PUSH
51295: LD_VAR 0 1
51299: PPUSH
51300: CALL_OW 274
51304: ST_TO_ADDR
// if not pom then
51305: LD_VAR 0 3
51309: NOT
51310: IFFALSE 51314
// exit ;
51312: GO 51484
// btype := GetBType ( building ) ;
51314: LD_ADDR_VAR 0 5
51318: PUSH
51319: LD_VAR 0 1
51323: PPUSH
51324: CALL_OW 266
51328: ST_TO_ADDR
// if btype = b_armoury then
51329: LD_VAR 0 5
51333: PUSH
51334: LD_INT 4
51336: EQUAL
51337: IFFALSE 51347
// btype := b_barracks ;
51339: LD_ADDR_VAR 0 5
51343: PUSH
51344: LD_INT 5
51346: ST_TO_ADDR
// if btype = b_depot then
51347: LD_VAR 0 5
51351: PUSH
51352: LD_INT 0
51354: EQUAL
51355: IFFALSE 51365
// btype := b_warehouse ;
51357: LD_ADDR_VAR 0 5
51361: PUSH
51362: LD_INT 1
51364: ST_TO_ADDR
// if btype = b_workshop then
51365: LD_VAR 0 5
51369: PUSH
51370: LD_INT 2
51372: EQUAL
51373: IFFALSE 51383
// btype := b_factory ;
51375: LD_ADDR_VAR 0 5
51379: PUSH
51380: LD_INT 3
51382: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51383: LD_ADDR_VAR 0 4
51387: PUSH
51388: LD_VAR 0 5
51392: PPUSH
51393: LD_VAR 0 1
51397: PPUSH
51398: CALL_OW 248
51402: PPUSH
51403: CALL_OW 450
51407: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51408: LD_ADDR_VAR 0 2
51412: PUSH
51413: LD_VAR 0 3
51417: PPUSH
51418: LD_INT 1
51420: PPUSH
51421: CALL_OW 275
51425: PUSH
51426: LD_VAR 0 4
51430: PUSH
51431: LD_INT 1
51433: ARRAY
51434: GREATEREQUAL
51435: PUSH
51436: LD_VAR 0 3
51440: PPUSH
51441: LD_INT 2
51443: PPUSH
51444: CALL_OW 275
51448: PUSH
51449: LD_VAR 0 4
51453: PUSH
51454: LD_INT 2
51456: ARRAY
51457: GREATEREQUAL
51458: AND
51459: PUSH
51460: LD_VAR 0 3
51464: PPUSH
51465: LD_INT 3
51467: PPUSH
51468: CALL_OW 275
51472: PUSH
51473: LD_VAR 0 4
51477: PUSH
51478: LD_INT 3
51480: ARRAY
51481: GREATEREQUAL
51482: AND
51483: ST_TO_ADDR
// end ;
51484: LD_VAR 0 2
51488: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51489: LD_INT 0
51491: PPUSH
51492: PPUSH
51493: PPUSH
// pom := GetBase ( building ) ;
51494: LD_ADDR_VAR 0 4
51498: PUSH
51499: LD_VAR 0 1
51503: PPUSH
51504: CALL_OW 274
51508: ST_TO_ADDR
// if not pom then
51509: LD_VAR 0 4
51513: NOT
51514: IFFALSE 51518
// exit ;
51516: GO 51619
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51518: LD_ADDR_VAR 0 5
51522: PUSH
51523: LD_VAR 0 2
51527: PPUSH
51528: LD_VAR 0 1
51532: PPUSH
51533: CALL_OW 248
51537: PPUSH
51538: CALL_OW 450
51542: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51543: LD_ADDR_VAR 0 3
51547: PUSH
51548: LD_VAR 0 4
51552: PPUSH
51553: LD_INT 1
51555: PPUSH
51556: CALL_OW 275
51560: PUSH
51561: LD_VAR 0 5
51565: PUSH
51566: LD_INT 1
51568: ARRAY
51569: GREATEREQUAL
51570: PUSH
51571: LD_VAR 0 4
51575: PPUSH
51576: LD_INT 2
51578: PPUSH
51579: CALL_OW 275
51583: PUSH
51584: LD_VAR 0 5
51588: PUSH
51589: LD_INT 2
51591: ARRAY
51592: GREATEREQUAL
51593: AND
51594: PUSH
51595: LD_VAR 0 4
51599: PPUSH
51600: LD_INT 3
51602: PPUSH
51603: CALL_OW 275
51607: PUSH
51608: LD_VAR 0 5
51612: PUSH
51613: LD_INT 3
51615: ARRAY
51616: GREATEREQUAL
51617: AND
51618: ST_TO_ADDR
// end ;
51619: LD_VAR 0 3
51623: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51624: LD_INT 0
51626: PPUSH
51627: PPUSH
51628: PPUSH
51629: PPUSH
51630: PPUSH
51631: PPUSH
51632: PPUSH
51633: PPUSH
51634: PPUSH
51635: PPUSH
51636: PPUSH
// result := false ;
51637: LD_ADDR_VAR 0 8
51641: PUSH
51642: LD_INT 0
51644: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51645: LD_VAR 0 5
51649: NOT
51650: PUSH
51651: LD_VAR 0 1
51655: NOT
51656: OR
51657: PUSH
51658: LD_VAR 0 2
51662: NOT
51663: OR
51664: PUSH
51665: LD_VAR 0 3
51669: NOT
51670: OR
51671: IFFALSE 51675
// exit ;
51673: GO 52489
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51675: LD_ADDR_VAR 0 14
51679: PUSH
51680: LD_VAR 0 1
51684: PPUSH
51685: LD_VAR 0 2
51689: PPUSH
51690: LD_VAR 0 3
51694: PPUSH
51695: LD_VAR 0 4
51699: PPUSH
51700: LD_VAR 0 5
51704: PUSH
51705: LD_INT 1
51707: ARRAY
51708: PPUSH
51709: CALL_OW 248
51713: PPUSH
51714: LD_INT 0
51716: PPUSH
51717: CALL 53722 0 6
51721: ST_TO_ADDR
// if not hexes then
51722: LD_VAR 0 14
51726: NOT
51727: IFFALSE 51731
// exit ;
51729: GO 52489
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51731: LD_ADDR_VAR 0 17
51735: PUSH
51736: LD_VAR 0 5
51740: PPUSH
51741: LD_INT 22
51743: PUSH
51744: LD_VAR 0 13
51748: PPUSH
51749: CALL_OW 255
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: LD_INT 30
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 30
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: LIST
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PPUSH
51790: CALL_OW 72
51794: ST_TO_ADDR
// for i = 1 to hexes do
51795: LD_ADDR_VAR 0 9
51799: PUSH
51800: DOUBLE
51801: LD_INT 1
51803: DEC
51804: ST_TO_ADDR
51805: LD_VAR 0 14
51809: PUSH
51810: FOR_TO
51811: IFFALSE 52487
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51813: LD_ADDR_VAR 0 13
51817: PUSH
51818: LD_VAR 0 14
51822: PUSH
51823: LD_VAR 0 9
51827: ARRAY
51828: PUSH
51829: LD_INT 1
51831: ARRAY
51832: PPUSH
51833: LD_VAR 0 14
51837: PUSH
51838: LD_VAR 0 9
51842: ARRAY
51843: PUSH
51844: LD_INT 2
51846: ARRAY
51847: PPUSH
51848: CALL_OW 428
51852: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51853: LD_VAR 0 14
51857: PUSH
51858: LD_VAR 0 9
51862: ARRAY
51863: PUSH
51864: LD_INT 1
51866: ARRAY
51867: PPUSH
51868: LD_VAR 0 14
51872: PUSH
51873: LD_VAR 0 9
51877: ARRAY
51878: PUSH
51879: LD_INT 2
51881: ARRAY
51882: PPUSH
51883: CALL_OW 351
51887: PUSH
51888: LD_VAR 0 14
51892: PUSH
51893: LD_VAR 0 9
51897: ARRAY
51898: PUSH
51899: LD_INT 1
51901: ARRAY
51902: PPUSH
51903: LD_VAR 0 14
51907: PUSH
51908: LD_VAR 0 9
51912: ARRAY
51913: PUSH
51914: LD_INT 2
51916: ARRAY
51917: PPUSH
51918: CALL_OW 488
51922: NOT
51923: OR
51924: PUSH
51925: LD_VAR 0 13
51929: PPUSH
51930: CALL_OW 247
51934: PUSH
51935: LD_INT 3
51937: EQUAL
51938: OR
51939: IFFALSE 51945
// exit ;
51941: POP
51942: POP
51943: GO 52489
// if not tmp then
51945: LD_VAR 0 13
51949: NOT
51950: IFFALSE 51954
// continue ;
51952: GO 51810
// result := true ;
51954: LD_ADDR_VAR 0 8
51958: PUSH
51959: LD_INT 1
51961: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51962: LD_VAR 0 6
51966: PUSH
51967: LD_VAR 0 13
51971: PPUSH
51972: CALL_OW 247
51976: PUSH
51977: LD_INT 2
51979: EQUAL
51980: AND
51981: PUSH
51982: LD_VAR 0 13
51986: PPUSH
51987: CALL_OW 263
51991: PUSH
51992: LD_INT 1
51994: EQUAL
51995: AND
51996: IFFALSE 52160
// begin if IsDrivenBy ( tmp ) then
51998: LD_VAR 0 13
52002: PPUSH
52003: CALL_OW 311
52007: IFFALSE 52011
// continue ;
52009: GO 51810
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52011: LD_VAR 0 6
52015: PPUSH
52016: LD_INT 3
52018: PUSH
52019: LD_INT 60
52021: PUSH
52022: EMPTY
52023: LIST
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 3
52031: PUSH
52032: LD_INT 55
52034: PUSH
52035: EMPTY
52036: LIST
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PPUSH
52046: CALL_OW 72
52050: IFFALSE 52158
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52052: LD_ADDR_VAR 0 18
52056: PUSH
52057: LD_VAR 0 6
52061: PPUSH
52062: LD_INT 3
52064: PUSH
52065: LD_INT 60
52067: PUSH
52068: EMPTY
52069: LIST
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 3
52077: PUSH
52078: LD_INT 55
52080: PUSH
52081: EMPTY
52082: LIST
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PPUSH
52092: CALL_OW 72
52096: PUSH
52097: LD_INT 1
52099: ARRAY
52100: ST_TO_ADDR
// if IsInUnit ( driver ) then
52101: LD_VAR 0 18
52105: PPUSH
52106: CALL_OW 310
52110: IFFALSE 52121
// ComExit ( driver ) ;
52112: LD_VAR 0 18
52116: PPUSH
52117: CALL 77410 0 1
// AddComEnterUnit ( driver , tmp ) ;
52121: LD_VAR 0 18
52125: PPUSH
52126: LD_VAR 0 13
52130: PPUSH
52131: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52135: LD_VAR 0 18
52139: PPUSH
52140: LD_VAR 0 7
52144: PPUSH
52145: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52149: LD_VAR 0 18
52153: PPUSH
52154: CALL_OW 181
// end ; continue ;
52158: GO 51810
// end ; if not cleaners or not tmp in cleaners then
52160: LD_VAR 0 6
52164: NOT
52165: PUSH
52166: LD_VAR 0 13
52170: PUSH
52171: LD_VAR 0 6
52175: IN
52176: NOT
52177: OR
52178: IFFALSE 52485
// begin if dep then
52180: LD_VAR 0 17
52184: IFFALSE 52320
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52186: LD_ADDR_VAR 0 16
52190: PUSH
52191: LD_VAR 0 17
52195: PUSH
52196: LD_INT 1
52198: ARRAY
52199: PPUSH
52200: CALL_OW 250
52204: PPUSH
52205: LD_VAR 0 17
52209: PUSH
52210: LD_INT 1
52212: ARRAY
52213: PPUSH
52214: CALL_OW 254
52218: PPUSH
52219: LD_INT 5
52221: PPUSH
52222: CALL_OW 272
52226: PUSH
52227: LD_VAR 0 17
52231: PUSH
52232: LD_INT 1
52234: ARRAY
52235: PPUSH
52236: CALL_OW 251
52240: PPUSH
52241: LD_VAR 0 17
52245: PUSH
52246: LD_INT 1
52248: ARRAY
52249: PPUSH
52250: CALL_OW 254
52254: PPUSH
52255: LD_INT 5
52257: PPUSH
52258: CALL_OW 273
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52267: LD_VAR 0 16
52271: PUSH
52272: LD_INT 1
52274: ARRAY
52275: PPUSH
52276: LD_VAR 0 16
52280: PUSH
52281: LD_INT 2
52283: ARRAY
52284: PPUSH
52285: CALL_OW 488
52289: IFFALSE 52320
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52291: LD_VAR 0 13
52295: PPUSH
52296: LD_VAR 0 16
52300: PUSH
52301: LD_INT 1
52303: ARRAY
52304: PPUSH
52305: LD_VAR 0 16
52309: PUSH
52310: LD_INT 2
52312: ARRAY
52313: PPUSH
52314: CALL_OW 111
// continue ;
52318: GO 51810
// end ; end ; r := GetDir ( tmp ) ;
52320: LD_ADDR_VAR 0 15
52324: PUSH
52325: LD_VAR 0 13
52329: PPUSH
52330: CALL_OW 254
52334: ST_TO_ADDR
// if r = 5 then
52335: LD_VAR 0 15
52339: PUSH
52340: LD_INT 5
52342: EQUAL
52343: IFFALSE 52353
// r := 0 ;
52345: LD_ADDR_VAR 0 15
52349: PUSH
52350: LD_INT 0
52352: ST_TO_ADDR
// for j = r to 5 do
52353: LD_ADDR_VAR 0 10
52357: PUSH
52358: DOUBLE
52359: LD_VAR 0 15
52363: DEC
52364: ST_TO_ADDR
52365: LD_INT 5
52367: PUSH
52368: FOR_TO
52369: IFFALSE 52483
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52371: LD_ADDR_VAR 0 11
52375: PUSH
52376: LD_VAR 0 13
52380: PPUSH
52381: CALL_OW 250
52385: PPUSH
52386: LD_VAR 0 10
52390: PPUSH
52391: LD_INT 2
52393: PPUSH
52394: CALL_OW 272
52398: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52399: LD_ADDR_VAR 0 12
52403: PUSH
52404: LD_VAR 0 13
52408: PPUSH
52409: CALL_OW 251
52413: PPUSH
52414: LD_VAR 0 10
52418: PPUSH
52419: LD_INT 2
52421: PPUSH
52422: CALL_OW 273
52426: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52427: LD_VAR 0 11
52431: PPUSH
52432: LD_VAR 0 12
52436: PPUSH
52437: CALL_OW 488
52441: PUSH
52442: LD_VAR 0 11
52446: PPUSH
52447: LD_VAR 0 12
52451: PPUSH
52452: CALL_OW 428
52456: NOT
52457: AND
52458: IFFALSE 52481
// begin ComMoveXY ( tmp , _x , _y ) ;
52460: LD_VAR 0 13
52464: PPUSH
52465: LD_VAR 0 11
52469: PPUSH
52470: LD_VAR 0 12
52474: PPUSH
52475: CALL_OW 111
// break ;
52479: GO 52483
// end ; end ;
52481: GO 52368
52483: POP
52484: POP
// end ; end ;
52485: GO 51810
52487: POP
52488: POP
// end ;
52489: LD_VAR 0 8
52493: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52494: LD_INT 0
52496: PPUSH
// result := true ;
52497: LD_ADDR_VAR 0 3
52501: PUSH
52502: LD_INT 1
52504: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52505: LD_VAR 0 2
52509: PUSH
52510: LD_INT 24
52512: DOUBLE
52513: EQUAL
52514: IFTRUE 52524
52516: LD_INT 33
52518: DOUBLE
52519: EQUAL
52520: IFTRUE 52524
52522: GO 52549
52524: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52525: LD_ADDR_VAR 0 3
52529: PUSH
52530: LD_INT 32
52532: PPUSH
52533: LD_VAR 0 1
52537: PPUSH
52538: CALL_OW 321
52542: PUSH
52543: LD_INT 2
52545: EQUAL
52546: ST_TO_ADDR
52547: GO 52865
52549: LD_INT 20
52551: DOUBLE
52552: EQUAL
52553: IFTRUE 52557
52555: GO 52582
52557: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52558: LD_ADDR_VAR 0 3
52562: PUSH
52563: LD_INT 6
52565: PPUSH
52566: LD_VAR 0 1
52570: PPUSH
52571: CALL_OW 321
52575: PUSH
52576: LD_INT 2
52578: EQUAL
52579: ST_TO_ADDR
52580: GO 52865
52582: LD_INT 22
52584: DOUBLE
52585: EQUAL
52586: IFTRUE 52596
52588: LD_INT 36
52590: DOUBLE
52591: EQUAL
52592: IFTRUE 52596
52594: GO 52621
52596: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52597: LD_ADDR_VAR 0 3
52601: PUSH
52602: LD_INT 15
52604: PPUSH
52605: LD_VAR 0 1
52609: PPUSH
52610: CALL_OW 321
52614: PUSH
52615: LD_INT 2
52617: EQUAL
52618: ST_TO_ADDR
52619: GO 52865
52621: LD_INT 30
52623: DOUBLE
52624: EQUAL
52625: IFTRUE 52629
52627: GO 52654
52629: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52630: LD_ADDR_VAR 0 3
52634: PUSH
52635: LD_INT 20
52637: PPUSH
52638: LD_VAR 0 1
52642: PPUSH
52643: CALL_OW 321
52647: PUSH
52648: LD_INT 2
52650: EQUAL
52651: ST_TO_ADDR
52652: GO 52865
52654: LD_INT 28
52656: DOUBLE
52657: EQUAL
52658: IFTRUE 52668
52660: LD_INT 21
52662: DOUBLE
52663: EQUAL
52664: IFTRUE 52668
52666: GO 52693
52668: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52669: LD_ADDR_VAR 0 3
52673: PUSH
52674: LD_INT 21
52676: PPUSH
52677: LD_VAR 0 1
52681: PPUSH
52682: CALL_OW 321
52686: PUSH
52687: LD_INT 2
52689: EQUAL
52690: ST_TO_ADDR
52691: GO 52865
52693: LD_INT 16
52695: DOUBLE
52696: EQUAL
52697: IFTRUE 52701
52699: GO 52726
52701: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52702: LD_ADDR_VAR 0 3
52706: PUSH
52707: LD_INT 84
52709: PPUSH
52710: LD_VAR 0 1
52714: PPUSH
52715: CALL_OW 321
52719: PUSH
52720: LD_INT 2
52722: EQUAL
52723: ST_TO_ADDR
52724: GO 52865
52726: LD_INT 19
52728: DOUBLE
52729: EQUAL
52730: IFTRUE 52740
52732: LD_INT 23
52734: DOUBLE
52735: EQUAL
52736: IFTRUE 52740
52738: GO 52765
52740: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52741: LD_ADDR_VAR 0 3
52745: PUSH
52746: LD_INT 83
52748: PPUSH
52749: LD_VAR 0 1
52753: PPUSH
52754: CALL_OW 321
52758: PUSH
52759: LD_INT 2
52761: EQUAL
52762: ST_TO_ADDR
52763: GO 52865
52765: LD_INT 17
52767: DOUBLE
52768: EQUAL
52769: IFTRUE 52773
52771: GO 52798
52773: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52774: LD_ADDR_VAR 0 3
52778: PUSH
52779: LD_INT 39
52781: PPUSH
52782: LD_VAR 0 1
52786: PPUSH
52787: CALL_OW 321
52791: PUSH
52792: LD_INT 2
52794: EQUAL
52795: ST_TO_ADDR
52796: GO 52865
52798: LD_INT 18
52800: DOUBLE
52801: EQUAL
52802: IFTRUE 52806
52804: GO 52831
52806: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52807: LD_ADDR_VAR 0 3
52811: PUSH
52812: LD_INT 40
52814: PPUSH
52815: LD_VAR 0 1
52819: PPUSH
52820: CALL_OW 321
52824: PUSH
52825: LD_INT 2
52827: EQUAL
52828: ST_TO_ADDR
52829: GO 52865
52831: LD_INT 27
52833: DOUBLE
52834: EQUAL
52835: IFTRUE 52839
52837: GO 52864
52839: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52840: LD_ADDR_VAR 0 3
52844: PUSH
52845: LD_INT 35
52847: PPUSH
52848: LD_VAR 0 1
52852: PPUSH
52853: CALL_OW 321
52857: PUSH
52858: LD_INT 2
52860: EQUAL
52861: ST_TO_ADDR
52862: GO 52865
52864: POP
// end ;
52865: LD_VAR 0 3
52869: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52870: LD_INT 0
52872: PPUSH
52873: PPUSH
52874: PPUSH
52875: PPUSH
52876: PPUSH
52877: PPUSH
52878: PPUSH
52879: PPUSH
52880: PPUSH
52881: PPUSH
52882: PPUSH
// result := false ;
52883: LD_ADDR_VAR 0 6
52887: PUSH
52888: LD_INT 0
52890: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52891: LD_VAR 0 1
52895: NOT
52896: PUSH
52897: LD_VAR 0 1
52901: PPUSH
52902: CALL_OW 266
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: IN
52917: NOT
52918: OR
52919: PUSH
52920: LD_VAR 0 2
52924: NOT
52925: OR
52926: PUSH
52927: LD_VAR 0 5
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: LD_INT 4
52946: PUSH
52947: LD_INT 5
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: IN
52958: NOT
52959: OR
52960: PUSH
52961: LD_VAR 0 3
52965: PPUSH
52966: LD_VAR 0 4
52970: PPUSH
52971: CALL_OW 488
52975: NOT
52976: OR
52977: IFFALSE 52981
// exit ;
52979: GO 53717
// side := GetSide ( depot ) ;
52981: LD_ADDR_VAR 0 9
52985: PUSH
52986: LD_VAR 0 1
52990: PPUSH
52991: CALL_OW 255
52995: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52996: LD_VAR 0 9
53000: PPUSH
53001: LD_VAR 0 2
53005: PPUSH
53006: CALL 52494 0 2
53010: NOT
53011: IFFALSE 53015
// exit ;
53013: GO 53717
// pom := GetBase ( depot ) ;
53015: LD_ADDR_VAR 0 10
53019: PUSH
53020: LD_VAR 0 1
53024: PPUSH
53025: CALL_OW 274
53029: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53030: LD_ADDR_VAR 0 11
53034: PUSH
53035: LD_VAR 0 2
53039: PPUSH
53040: LD_VAR 0 1
53044: PPUSH
53045: CALL_OW 248
53049: PPUSH
53050: CALL_OW 450
53054: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53055: LD_VAR 0 10
53059: PPUSH
53060: LD_INT 1
53062: PPUSH
53063: CALL_OW 275
53067: PUSH
53068: LD_VAR 0 11
53072: PUSH
53073: LD_INT 1
53075: ARRAY
53076: GREATEREQUAL
53077: PUSH
53078: LD_VAR 0 10
53082: PPUSH
53083: LD_INT 2
53085: PPUSH
53086: CALL_OW 275
53090: PUSH
53091: LD_VAR 0 11
53095: PUSH
53096: LD_INT 2
53098: ARRAY
53099: GREATEREQUAL
53100: AND
53101: PUSH
53102: LD_VAR 0 10
53106: PPUSH
53107: LD_INT 3
53109: PPUSH
53110: CALL_OW 275
53114: PUSH
53115: LD_VAR 0 11
53119: PUSH
53120: LD_INT 3
53122: ARRAY
53123: GREATEREQUAL
53124: AND
53125: NOT
53126: IFFALSE 53130
// exit ;
53128: GO 53717
// if GetBType ( depot ) = b_depot then
53130: LD_VAR 0 1
53134: PPUSH
53135: CALL_OW 266
53139: PUSH
53140: LD_INT 0
53142: EQUAL
53143: IFFALSE 53155
// dist := 28 else
53145: LD_ADDR_VAR 0 14
53149: PUSH
53150: LD_INT 28
53152: ST_TO_ADDR
53153: GO 53163
// dist := 36 ;
53155: LD_ADDR_VAR 0 14
53159: PUSH
53160: LD_INT 36
53162: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53163: LD_VAR 0 1
53167: PPUSH
53168: LD_VAR 0 3
53172: PPUSH
53173: LD_VAR 0 4
53177: PPUSH
53178: CALL_OW 297
53182: PUSH
53183: LD_VAR 0 14
53187: GREATER
53188: IFFALSE 53192
// exit ;
53190: GO 53717
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53192: LD_ADDR_VAR 0 12
53196: PUSH
53197: LD_VAR 0 2
53201: PPUSH
53202: LD_VAR 0 3
53206: PPUSH
53207: LD_VAR 0 4
53211: PPUSH
53212: LD_VAR 0 5
53216: PPUSH
53217: LD_VAR 0 1
53221: PPUSH
53222: CALL_OW 248
53226: PPUSH
53227: LD_INT 0
53229: PPUSH
53230: CALL 53722 0 6
53234: ST_TO_ADDR
// if not hexes then
53235: LD_VAR 0 12
53239: NOT
53240: IFFALSE 53244
// exit ;
53242: GO 53717
// hex := GetHexInfo ( x , y ) ;
53244: LD_ADDR_VAR 0 15
53248: PUSH
53249: LD_VAR 0 3
53253: PPUSH
53254: LD_VAR 0 4
53258: PPUSH
53259: CALL_OW 546
53263: ST_TO_ADDR
// if hex [ 1 ] then
53264: LD_VAR 0 15
53268: PUSH
53269: LD_INT 1
53271: ARRAY
53272: IFFALSE 53276
// exit ;
53274: GO 53717
// height := hex [ 2 ] ;
53276: LD_ADDR_VAR 0 13
53280: PUSH
53281: LD_VAR 0 15
53285: PUSH
53286: LD_INT 2
53288: ARRAY
53289: ST_TO_ADDR
// for i = 1 to hexes do
53290: LD_ADDR_VAR 0 7
53294: PUSH
53295: DOUBLE
53296: LD_INT 1
53298: DEC
53299: ST_TO_ADDR
53300: LD_VAR 0 12
53304: PUSH
53305: FOR_TO
53306: IFFALSE 53636
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53308: LD_VAR 0 12
53312: PUSH
53313: LD_VAR 0 7
53317: ARRAY
53318: PUSH
53319: LD_INT 1
53321: ARRAY
53322: PPUSH
53323: LD_VAR 0 12
53327: PUSH
53328: LD_VAR 0 7
53332: ARRAY
53333: PUSH
53334: LD_INT 2
53336: ARRAY
53337: PPUSH
53338: CALL_OW 488
53342: NOT
53343: PUSH
53344: LD_VAR 0 12
53348: PUSH
53349: LD_VAR 0 7
53353: ARRAY
53354: PUSH
53355: LD_INT 1
53357: ARRAY
53358: PPUSH
53359: LD_VAR 0 12
53363: PUSH
53364: LD_VAR 0 7
53368: ARRAY
53369: PUSH
53370: LD_INT 2
53372: ARRAY
53373: PPUSH
53374: CALL_OW 428
53378: PUSH
53379: LD_INT 0
53381: GREATER
53382: OR
53383: PUSH
53384: LD_VAR 0 12
53388: PUSH
53389: LD_VAR 0 7
53393: ARRAY
53394: PUSH
53395: LD_INT 1
53397: ARRAY
53398: PPUSH
53399: LD_VAR 0 12
53403: PUSH
53404: LD_VAR 0 7
53408: ARRAY
53409: PUSH
53410: LD_INT 2
53412: ARRAY
53413: PPUSH
53414: CALL_OW 351
53418: OR
53419: IFFALSE 53425
// exit ;
53421: POP
53422: POP
53423: GO 53717
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53425: LD_ADDR_VAR 0 8
53429: PUSH
53430: LD_VAR 0 12
53434: PUSH
53435: LD_VAR 0 7
53439: ARRAY
53440: PUSH
53441: LD_INT 1
53443: ARRAY
53444: PPUSH
53445: LD_VAR 0 12
53449: PUSH
53450: LD_VAR 0 7
53454: ARRAY
53455: PUSH
53456: LD_INT 2
53458: ARRAY
53459: PPUSH
53460: CALL_OW 546
53464: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53465: LD_VAR 0 8
53469: PUSH
53470: LD_INT 1
53472: ARRAY
53473: PUSH
53474: LD_VAR 0 8
53478: PUSH
53479: LD_INT 2
53481: ARRAY
53482: PUSH
53483: LD_VAR 0 13
53487: PUSH
53488: LD_INT 2
53490: PLUS
53491: GREATER
53492: OR
53493: PUSH
53494: LD_VAR 0 8
53498: PUSH
53499: LD_INT 2
53501: ARRAY
53502: PUSH
53503: LD_VAR 0 13
53507: PUSH
53508: LD_INT 2
53510: MINUS
53511: LESS
53512: OR
53513: PUSH
53514: LD_VAR 0 8
53518: PUSH
53519: LD_INT 3
53521: ARRAY
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 8
53528: PUSH
53529: LD_INT 9
53531: PUSH
53532: LD_INT 10
53534: PUSH
53535: LD_INT 11
53537: PUSH
53538: LD_INT 12
53540: PUSH
53541: LD_INT 13
53543: PUSH
53544: LD_INT 16
53546: PUSH
53547: LD_INT 17
53549: PUSH
53550: LD_INT 18
53552: PUSH
53553: LD_INT 19
53555: PUSH
53556: LD_INT 20
53558: PUSH
53559: LD_INT 21
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: IN
53577: NOT
53578: OR
53579: PUSH
53580: LD_VAR 0 8
53584: PUSH
53585: LD_INT 5
53587: ARRAY
53588: NOT
53589: OR
53590: PUSH
53591: LD_VAR 0 8
53595: PUSH
53596: LD_INT 6
53598: ARRAY
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 7
53608: PUSH
53609: LD_INT 9
53611: PUSH
53612: LD_INT 10
53614: PUSH
53615: LD_INT 11
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: IN
53626: NOT
53627: OR
53628: IFFALSE 53634
// exit ;
53630: POP
53631: POP
53632: GO 53717
// end ;
53634: GO 53305
53636: POP
53637: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53638: LD_VAR 0 9
53642: PPUSH
53643: LD_VAR 0 3
53647: PPUSH
53648: LD_VAR 0 4
53652: PPUSH
53653: LD_INT 20
53655: PPUSH
53656: CALL 45669 0 4
53660: PUSH
53661: LD_INT 4
53663: ARRAY
53664: IFFALSE 53668
// exit ;
53666: GO 53717
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53668: LD_VAR 0 2
53672: PUSH
53673: LD_INT 29
53675: PUSH
53676: LD_INT 30
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: IN
53683: PUSH
53684: LD_VAR 0 3
53688: PPUSH
53689: LD_VAR 0 4
53693: PPUSH
53694: LD_VAR 0 9
53698: PPUSH
53699: CALL_OW 440
53703: NOT
53704: AND
53705: IFFALSE 53709
// exit ;
53707: GO 53717
// result := true ;
53709: LD_ADDR_VAR 0 6
53713: PUSH
53714: LD_INT 1
53716: ST_TO_ADDR
// end ;
53717: LD_VAR 0 6
53721: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53722: LD_INT 0
53724: PPUSH
53725: PPUSH
53726: PPUSH
53727: PPUSH
53728: PPUSH
53729: PPUSH
53730: PPUSH
53731: PPUSH
53732: PPUSH
53733: PPUSH
53734: PPUSH
53735: PPUSH
53736: PPUSH
53737: PPUSH
53738: PPUSH
53739: PPUSH
53740: PPUSH
53741: PPUSH
53742: PPUSH
53743: PPUSH
53744: PPUSH
53745: PPUSH
53746: PPUSH
53747: PPUSH
53748: PPUSH
53749: PPUSH
53750: PPUSH
53751: PPUSH
53752: PPUSH
53753: PPUSH
53754: PPUSH
53755: PPUSH
53756: PPUSH
53757: PPUSH
53758: PPUSH
53759: PPUSH
53760: PPUSH
53761: PPUSH
53762: PPUSH
53763: PPUSH
53764: PPUSH
53765: PPUSH
53766: PPUSH
53767: PPUSH
53768: PPUSH
53769: PPUSH
53770: PPUSH
53771: PPUSH
53772: PPUSH
53773: PPUSH
53774: PPUSH
53775: PPUSH
53776: PPUSH
53777: PPUSH
53778: PPUSH
53779: PPUSH
53780: PPUSH
53781: PPUSH
// result = [ ] ;
53782: LD_ADDR_VAR 0 7
53786: PUSH
53787: EMPTY
53788: ST_TO_ADDR
// temp_list = [ ] ;
53789: LD_ADDR_VAR 0 9
53793: PUSH
53794: EMPTY
53795: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53796: LD_VAR 0 4
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: LD_INT 3
53812: PUSH
53813: LD_INT 4
53815: PUSH
53816: LD_INT 5
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: IN
53827: NOT
53828: PUSH
53829: LD_VAR 0 1
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: IN
53844: PUSH
53845: LD_VAR 0 5
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: LD_INT 3
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: LIST
53863: IN
53864: NOT
53865: AND
53866: OR
53867: IFFALSE 53871
// exit ;
53869: GO 72262
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53871: LD_VAR 0 1
53875: PUSH
53876: LD_INT 6
53878: PUSH
53879: LD_INT 7
53881: PUSH
53882: LD_INT 8
53884: PUSH
53885: LD_INT 13
53887: PUSH
53888: LD_INT 12
53890: PUSH
53891: LD_INT 15
53893: PUSH
53894: LD_INT 11
53896: PUSH
53897: LD_INT 14
53899: PUSH
53900: LD_INT 10
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: IN
53914: IFFALSE 53924
// btype = b_lab ;
53916: LD_ADDR_VAR 0 1
53920: PUSH
53921: LD_INT 6
53923: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53924: LD_VAR 0 6
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: LIST
53942: IN
53943: NOT
53944: PUSH
53945: LD_VAR 0 1
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 3
53961: PUSH
53962: LD_INT 6
53964: PUSH
53965: LD_INT 36
53967: PUSH
53968: LD_INT 4
53970: PUSH
53971: LD_INT 5
53973: PUSH
53974: LD_INT 31
53976: PUSH
53977: LD_INT 32
53979: PUSH
53980: LD_INT 33
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: IN
53996: NOT
53997: PUSH
53998: LD_VAR 0 6
54002: PUSH
54003: LD_INT 1
54005: EQUAL
54006: AND
54007: OR
54008: PUSH
54009: LD_VAR 0 1
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: LD_INT 3
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: IN
54024: NOT
54025: PUSH
54026: LD_VAR 0 6
54030: PUSH
54031: LD_INT 2
54033: EQUAL
54034: AND
54035: OR
54036: IFFALSE 54046
// mode = 0 ;
54038: LD_ADDR_VAR 0 6
54042: PUSH
54043: LD_INT 0
54045: ST_TO_ADDR
// case mode of 0 :
54046: LD_VAR 0 6
54050: PUSH
54051: LD_INT 0
54053: DOUBLE
54054: EQUAL
54055: IFTRUE 54059
54057: GO 65512
54059: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54060: LD_ADDR_VAR 0 11
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 3
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: LD_INT 3
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54253: LD_ADDR_VAR 0 12
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 3
54410: NEG
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54449: LD_ADDR_VAR 0 13
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 2
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: LD_INT 3
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 3
54608: NEG
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: NEG
54621: PUSH
54622: LD_INT 3
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54648: LD_ADDR_VAR 0 14
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: LD_INT 3
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 3
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54844: LD_ADDR_VAR 0 15
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 3
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55037: LD_ADDR_VAR 0 16
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 3
55194: PUSH
55195: LD_INT 3
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: PUSH
55205: LD_INT 3
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55230: LD_ADDR_VAR 0 17
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 2
55429: NEG
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55460: LD_ADDR_VAR 0 18
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55690: LD_ADDR_VAR 0 19
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55920: LD_ADDR_VAR 0 20
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: NEG
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 2
56107: NEG
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: NEG
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56150: LD_ADDR_VAR 0 21
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56380: LD_ADDR_VAR 0 22
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 2
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56610: LD_ADDR_VAR 0 23
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 2
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: LD_INT 3
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: LD_INT 3
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56890: LD_ADDR_VAR 0 24
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: LD_INT 2
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 2
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 2
57066: NEG
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 2
57089: NEG
57090: PUSH
57091: LD_INT 2
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 3
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 3
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57166: LD_ADDR_VAR 0 25
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 2
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: PUSH
57302: LD_INT 2
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: NEG
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 3
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57440: LD_ADDR_VAR 0 26
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 2
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: LD_INT 2
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 2
57627: NEG
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57716: LD_ADDR_VAR 0 27
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 2
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 2
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 2
57938: NEG
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 3
57949: NEG
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 3
57961: NEG
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57996: LD_ADDR_VAR 0 28
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: NEG
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 2
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 2
58172: NEG
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: LD_INT 2
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 2
58207: NEG
58208: PUSH
58209: LD_INT 3
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: LD_INT 3
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: LD_INT 2
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58278: LD_ADDR_VAR 0 29
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 2
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: LD_INT 3
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 3
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58557: LD_ADDR_VAR 0 30
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 2
58734: NEG
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 3
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: LD_INT 2
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: NEG
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58835: LD_ADDR_VAR 0 31
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: LD_INT 2
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: LD_INT 3
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 3
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 3
59078: NEG
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59113: LD_ADDR_VAR 0 32
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: LD_INT 2
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: NEG
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: LD_INT 3
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 3
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 3
59356: NEG
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59391: LD_ADDR_VAR 0 33
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: NEG
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 2
59581: NEG
59582: PUSH
59583: LD_INT 3
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 2
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 3
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: LD_INT 3
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: LD_INT 2
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 3
59635: NEG
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59670: LD_ADDR_VAR 0 34
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 2
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 1
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: NEG
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: LD_INT 3
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 3
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: LD_INT 3
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 2
59904: NEG
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 3
59915: NEG
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59950: LD_ADDR_VAR 0 35
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: LD_INT 1
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60062: LD_ADDR_VAR 0 36
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 2
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60174: LD_ADDR_VAR 0 37
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60286: LD_ADDR_VAR 0 38
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60398: LD_ADDR_VAR 0 39
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60510: LD_ADDR_VAR 0 40
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60622: LD_ADDR_VAR 0 41
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: LD_INT 2
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: NEG
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 2
60812: NEG
60813: PUSH
60814: LD_INT 3
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 3
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: LD_INT 3
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 2
60885: NEG
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 3
60896: NEG
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 3
60907: NEG
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 3
60919: NEG
60920: PUSH
60921: LD_INT 2
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 3
60931: NEG
60932: PUSH
60933: LD_INT 3
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60972: LD_ADDR_VAR 0 42
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: LD_INT 1
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: LD_INT 2
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: LD_INT 3
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: LD_INT 3
61178: NEG
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: LD_INT 3
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 3
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 3
61218: PUSH
61219: LD_INT 3
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: LD_INT 3
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: LD_INT 3
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 3
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: LD_INT 2
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 3
61269: NEG
61270: PUSH
61271: LD_INT 2
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 3
61281: NEG
61282: PUSH
61283: LD_INT 3
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61322: LD_ADDR_VAR 0 43
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: LD_INT 2
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: LD_INT 2
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: NEG
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 2
61499: NEG
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: LD_INT 3
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: LD_INT 3
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: LD_INT 2
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 3
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: LD_INT 3
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: LD_INT 3
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 2
61607: NEG
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 3
61618: NEG
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 3
61629: NEG
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61670: LD_ADDR_VAR 0 44
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: LD_INT 2
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 2
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 2
61825: NEG
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 2
61848: NEG
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: LD_INT 3
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 2
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 3
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 3
61903: PUSH
61904: LD_INT 2
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: PUSH
61914: LD_INT 3
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 2
61933: NEG
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 3
61944: NEG
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 3
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 3
61967: NEG
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 3
61979: NEG
61980: PUSH
61981: LD_INT 3
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62020: LD_ADDR_VAR 0 45
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 2
62135: PUSH
62136: LD_INT 1
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 2
62145: PUSH
62146: LD_INT 2
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: LD_INT 2
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 2
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 2
62198: NEG
62199: PUSH
62200: LD_INT 2
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: LD_INT 3
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: LD_INT 3
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: LD_INT 3
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 3
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 2
62276: PUSH
62277: LD_INT 3
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: PUSH
62287: LD_INT 3
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: LD_INT 3
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 2
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 3
62317: NEG
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 3
62329: NEG
62330: PUSH
62331: LD_INT 3
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62370: LD_ADDR_VAR 0 46
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: LD_INT 1
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: LD_INT 1
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: LD_INT 2
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: LD_INT 2
62466: NEG
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 2
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 2
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: LD_INT 2
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 2
62536: NEG
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 2
62547: NEG
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: LD_INT 3
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: LD_INT 3
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: PUSH
62583: LD_INT 2
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 3
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 3
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: LD_INT 3
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 3
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 2
62655: NEG
62656: PUSH
62657: LD_INT 1
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 3
62666: NEG
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 3
62677: NEG
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62718: LD_ADDR_VAR 0 47
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: LD_INT 1
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: LD_INT 1
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: LD_INT 2
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: LD_INT 2
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: LD_INT 1
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 2
62833: NEG
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 2
62845: NEG
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62869: LD_ADDR_VAR 0 48
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: LD_INT 1
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 1
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: NEG
62951: PUSH
62952: LD_INT 2
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: LD_INT 2
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: LD_INT 1
62976: NEG
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 2
62984: PUSH
62985: LD_INT 0
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 2
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63016: LD_ADDR_VAR 0 49
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: NEG
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: PUSH
63129: LD_INT 2
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: LD_INT 2
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63160: LD_ADDR_VAR 0 50
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: LD_INT 1
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 1
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 1
63229: NEG
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 2
63251: PUSH
63252: LD_INT 2
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: LD_INT 2
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: LD_INT 2
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: LD_INT 1
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63304: LD_ADDR_VAR 0 51
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: LD_INT 1
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 1
63362: NEG
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: LD_INT 1
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 2
63416: NEG
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: NEG
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63451: LD_ADDR_VAR 0 52
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: LD_INT 2
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 2
63555: NEG
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 2
63578: NEG
63579: PUSH
63580: LD_INT 2
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63602: LD_ADDR_VAR 0 53
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: LD_INT 1
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 1
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 1
63660: NEG
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 2
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: LD_INT 2
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: LD_INT 1
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 2
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: LD_INT 2
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: LD_INT 2
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 1
63767: NEG
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 2
63778: NEG
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 2
63789: NEG
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 2
63801: NEG
63802: PUSH
63803: LD_INT 2
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63832: LD_ADDR_VAR 0 54
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: LD_INT 1
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: LD_INT 0
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 1
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: LD_INT 0
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: LD_INT 2
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 0
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 1
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: LD_INT 1
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 2
63967: PUSH
63968: LD_INT 2
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: LD_INT 2
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: LD_INT 2
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 2
64008: NEG
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 2
64019: NEG
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 2
64031: NEG
64032: PUSH
64033: LD_INT 2
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64062: LD_ADDR_VAR 0 55
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: LD_INT 1
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: LD_INT 1
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 1
64120: NEG
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 1
64131: NEG
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: LD_INT 2
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 2
64158: NEG
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 1
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 2
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 2
64197: PUSH
64198: LD_INT 2
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: LD_INT 2
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: LD_INT 2
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 2
64238: NEG
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 2
64249: NEG
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 2
64261: NEG
64262: PUSH
64263: LD_INT 2
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64292: LD_ADDR_VAR 0 56
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: LD_INT 1
64312: NEG
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: NEG
64362: PUSH
64363: LD_INT 1
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: LD_INT 2
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: LD_INT 2
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 2
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 2
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 2
64427: PUSH
64428: LD_INT 2
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 2
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 0
64447: PUSH
64448: LD_INT 2
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 2
64468: NEG
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 2
64479: NEG
64480: PUSH
64481: LD_INT 1
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 2
64491: NEG
64492: PUSH
64493: LD_INT 2
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64522: LD_ADDR_VAR 0 57
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: LD_INT 1
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: LD_INT 1
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 1
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 1
64580: NEG
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: LD_INT 1
64595: NEG
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: LD_INT 2
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 2
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 2
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 2
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: LD_INT 2
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: LD_INT 2
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: LD_INT 2
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 2
64698: NEG
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 2
64709: NEG
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 2
64721: NEG
64722: PUSH
64723: LD_INT 2
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64752: LD_ADDR_VAR 0 58
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: NEG
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 1
64833: NEG
64834: PUSH
64835: LD_INT 2
64837: NEG
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 0
64845: PUSH
64846: LD_INT 2
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: LD_INT 1
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 2
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 2
64887: PUSH
64888: LD_INT 2
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: PUSH
64898: LD_INT 2
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 0
64907: PUSH
64908: LD_INT 2
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 1
64917: NEG
64918: PUSH
64919: LD_INT 1
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 2
64928: NEG
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 2
64939: NEG
64940: PUSH
64941: LD_INT 1
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 2
64951: NEG
64952: PUSH
64953: LD_INT 2
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64982: LD_ADDR_VAR 0 59
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: LD_INT 1
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: LD_INT 1
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: LD_INT 1
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: NEG
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65070: LD_ADDR_VAR 0 60
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: LD_INT 1
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: LD_INT 1
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65158: LD_ADDR_VAR 0 61
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 0
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: LD_INT 1
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 1
65216: NEG
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 1
65227: NEG
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65246: LD_ADDR_VAR 0 62
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: LD_INT 1
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: LD_INT 0
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: LD_INT 1
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: LD_INT 1
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: NEG
65316: PUSH
65317: LD_INT 1
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65334: LD_ADDR_VAR 0 63
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: LD_INT 0
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: LD_INT 1
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: LD_INT 0
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: LD_INT 1
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: LD_INT 1
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 1
65392: NEG
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65422: LD_ADDR_VAR 0 64
65426: PUSH
65427: LD_INT 0
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 0
65439: PUSH
65440: LD_INT 1
65442: NEG
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 1
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 1
65460: PUSH
65461: LD_INT 1
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: LD_INT 1
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: NEG
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: ST_TO_ADDR
// end ; 1 :
65510: GO 71407
65512: LD_INT 1
65514: DOUBLE
65515: EQUAL
65516: IFTRUE 65520
65518: GO 68143
65520: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65521: LD_ADDR_VAR 0 11
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: LD_INT 3
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: LD_INT 3
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: LD_INT 2
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: LIST
65564: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65565: LD_ADDR_VAR 0 12
65569: PUSH
65570: LD_INT 2
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 3
65583: PUSH
65584: LD_INT 0
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 3
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: LIST
65605: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65606: LD_ADDR_VAR 0 13
65610: PUSH
65611: LD_INT 3
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 3
65623: PUSH
65624: LD_INT 3
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 2
65633: PUSH
65634: LD_INT 3
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65646: LD_ADDR_VAR 0 14
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: LD_INT 3
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: LD_INT 3
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: LD_INT 2
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: LIST
65686: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65687: LD_ADDR_VAR 0 15
65691: PUSH
65692: LD_INT 2
65694: NEG
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 3
65705: NEG
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 3
65716: NEG
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: LIST
65730: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65731: LD_ADDR_VAR 0 16
65735: PUSH
65736: LD_INT 2
65738: NEG
65739: PUSH
65740: LD_INT 3
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 3
65750: NEG
65751: PUSH
65752: LD_INT 2
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 3
65762: NEG
65763: PUSH
65764: LD_INT 3
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: LIST
65776: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65777: LD_ADDR_VAR 0 17
65781: PUSH
65782: LD_INT 1
65784: NEG
65785: PUSH
65786: LD_INT 3
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: LD_INT 3
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: LD_INT 2
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: LIST
65820: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65821: LD_ADDR_VAR 0 18
65825: PUSH
65826: LD_INT 2
65828: PUSH
65829: LD_INT 1
65831: NEG
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 3
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 3
65849: PUSH
65850: LD_INT 1
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65862: LD_ADDR_VAR 0 19
65866: PUSH
65867: LD_INT 3
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 3
65879: PUSH
65880: LD_INT 3
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 2
65889: PUSH
65890: LD_INT 3
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: LIST
65901: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65902: LD_ADDR_VAR 0 20
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: LD_INT 3
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: LD_INT 3
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 1
65929: NEG
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: LIST
65942: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65943: LD_ADDR_VAR 0 21
65947: PUSH
65948: LD_INT 2
65950: NEG
65951: PUSH
65952: LD_INT 1
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 3
65961: NEG
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 3
65972: NEG
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: LIST
65986: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65987: LD_ADDR_VAR 0 22
65991: PUSH
65992: LD_INT 2
65994: NEG
65995: PUSH
65996: LD_INT 3
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 3
66006: NEG
66007: PUSH
66008: LD_INT 2
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 3
66018: NEG
66019: PUSH
66020: LD_INT 3
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: LIST
66032: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66033: LD_ADDR_VAR 0 23
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: LD_INT 3
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: LD_INT 4
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 1
66063: PUSH
66064: LD_INT 3
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: LIST
66076: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66077: LD_ADDR_VAR 0 24
66081: PUSH
66082: LD_INT 3
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 3
66094: PUSH
66095: LD_INT 1
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 4
66105: PUSH
66106: LD_INT 1
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: LIST
66117: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66118: LD_ADDR_VAR 0 25
66122: PUSH
66123: LD_INT 3
66125: PUSH
66126: LD_INT 3
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 4
66135: PUSH
66136: LD_INT 3
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 3
66145: PUSH
66146: LD_INT 4
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: LIST
66157: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66158: LD_ADDR_VAR 0 26
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: LD_INT 3
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: PUSH
66176: LD_INT 4
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: LD_INT 3
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: LIST
66198: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66199: LD_ADDR_VAR 0 27
66203: PUSH
66204: LD_INT 3
66206: NEG
66207: PUSH
66208: LD_INT 0
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 3
66217: NEG
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 4
66228: NEG
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: LIST
66242: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66243: LD_ADDR_VAR 0 28
66247: PUSH
66248: LD_INT 3
66250: NEG
66251: PUSH
66252: LD_INT 3
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 3
66262: NEG
66263: PUSH
66264: LD_INT 4
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 4
66274: NEG
66275: PUSH
66276: LD_INT 3
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: LIST
66288: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66289: LD_ADDR_VAR 0 29
66293: PUSH
66294: LD_INT 1
66296: NEG
66297: PUSH
66298: LD_INT 3
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 0
66308: PUSH
66309: LD_INT 3
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: PUSH
66320: LD_INT 2
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 1
66330: NEG
66331: PUSH
66332: LD_INT 4
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: LD_INT 4
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 1
66353: PUSH
66354: LD_INT 3
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 1
66364: NEG
66365: PUSH
66366: LD_INT 5
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: LD_INT 5
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 1
66387: PUSH
66388: LD_INT 4
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: LD_INT 6
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: LD_INT 6
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 1
66421: PUSH
66422: LD_INT 5
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66444: LD_ADDR_VAR 0 30
66448: PUSH
66449: LD_INT 2
66451: PUSH
66452: LD_INT 1
66454: NEG
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 3
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 3
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 3
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 4
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 4
66503: PUSH
66504: LD_INT 1
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 4
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 5
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 5
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 5
66544: PUSH
66545: LD_INT 1
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 6
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 6
66565: PUSH
66566: LD_INT 1
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66587: LD_ADDR_VAR 0 31
66591: PUSH
66592: LD_INT 3
66594: PUSH
66595: LD_INT 2
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 3
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 2
66614: PUSH
66615: LD_INT 3
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 4
66624: PUSH
66625: LD_INT 3
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 4
66634: PUSH
66635: LD_INT 4
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 3
66644: PUSH
66645: LD_INT 4
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 5
66654: PUSH
66655: LD_INT 4
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 5
66664: PUSH
66665: LD_INT 5
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 4
66674: PUSH
66675: LD_INT 5
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 6
66684: PUSH
66685: LD_INT 5
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 6
66694: PUSH
66695: LD_INT 6
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 5
66704: PUSH
66705: LD_INT 6
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66726: LD_ADDR_VAR 0 32
66730: PUSH
66731: LD_INT 1
66733: PUSH
66734: LD_INT 3
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: LD_INT 3
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: NEG
66754: PUSH
66755: LD_INT 2
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 1
66764: PUSH
66765: LD_INT 4
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: LD_INT 4
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 1
66784: NEG
66785: PUSH
66786: LD_INT 3
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 1
66795: PUSH
66796: LD_INT 5
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 0
66805: PUSH
66806: LD_INT 5
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 1
66815: NEG
66816: PUSH
66817: LD_INT 4
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: LD_INT 6
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: LD_INT 6
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 1
66846: NEG
66847: PUSH
66848: LD_INT 5
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66869: LD_ADDR_VAR 0 33
66873: PUSH
66874: LD_INT 2
66876: NEG
66877: PUSH
66878: LD_INT 1
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 3
66887: NEG
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 3
66898: NEG
66899: PUSH
66900: LD_INT 1
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 3
66910: NEG
66911: PUSH
66912: LD_INT 1
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 4
66921: NEG
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 4
66932: NEG
66933: PUSH
66934: LD_INT 1
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 4
66944: NEG
66945: PUSH
66946: LD_INT 1
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 5
66955: NEG
66956: PUSH
66957: LD_INT 0
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 5
66966: NEG
66967: PUSH
66968: LD_INT 1
66970: NEG
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 5
66978: NEG
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 6
66989: NEG
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 6
67000: NEG
67001: PUSH
67002: LD_INT 1
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67024: LD_ADDR_VAR 0 34
67028: PUSH
67029: LD_INT 2
67031: NEG
67032: PUSH
67033: LD_INT 3
67035: NEG
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 3
67043: NEG
67044: PUSH
67045: LD_INT 2
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 3
67055: NEG
67056: PUSH
67057: LD_INT 3
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: LD_INT 4
67071: NEG
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 4
67079: NEG
67080: PUSH
67081: LD_INT 3
67083: NEG
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 4
67091: NEG
67092: PUSH
67093: LD_INT 4
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 4
67103: NEG
67104: PUSH
67105: LD_INT 5
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 5
67115: NEG
67116: PUSH
67117: LD_INT 4
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 5
67127: NEG
67128: PUSH
67129: LD_INT 5
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 5
67139: NEG
67140: PUSH
67141: LD_INT 6
67143: NEG
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 6
67151: NEG
67152: PUSH
67153: LD_INT 5
67155: NEG
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 6
67163: NEG
67164: PUSH
67165: LD_INT 6
67167: NEG
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67187: LD_ADDR_VAR 0 41
67191: PUSH
67192: LD_INT 0
67194: PUSH
67195: LD_INT 2
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 1
67205: NEG
67206: PUSH
67207: LD_INT 3
67209: NEG
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: LD_INT 2
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: LIST
67230: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67231: LD_ADDR_VAR 0 42
67235: PUSH
67236: LD_INT 2
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 2
67248: PUSH
67249: LD_INT 1
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 3
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67272: LD_ADDR_VAR 0 43
67276: PUSH
67277: LD_INT 2
67279: PUSH
67280: LD_INT 2
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 3
67289: PUSH
67290: LD_INT 2
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 2
67299: PUSH
67300: LD_INT 3
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: LIST
67311: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67312: LD_ADDR_VAR 0 44
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: LD_INT 2
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 1
67329: PUSH
67330: LD_INT 3
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 1
67339: NEG
67340: PUSH
67341: LD_INT 2
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: LIST
67352: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67353: LD_ADDR_VAR 0 45
67357: PUSH
67358: LD_INT 2
67360: NEG
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 2
67371: NEG
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 3
67382: NEG
67383: PUSH
67384: LD_INT 1
67386: NEG
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: LIST
67396: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67397: LD_ADDR_VAR 0 46
67401: PUSH
67402: LD_INT 2
67404: NEG
67405: PUSH
67406: LD_INT 2
67408: NEG
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 2
67416: NEG
67417: PUSH
67418: LD_INT 3
67420: NEG
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 3
67428: NEG
67429: PUSH
67430: LD_INT 2
67432: NEG
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: LIST
67442: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67443: LD_ADDR_VAR 0 47
67447: PUSH
67448: LD_INT 2
67450: NEG
67451: PUSH
67452: LD_INT 3
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 1
67462: NEG
67463: PUSH
67464: LD_INT 3
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67476: LD_ADDR_VAR 0 48
67480: PUSH
67481: LD_INT 1
67483: PUSH
67484: LD_INT 2
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 2
67494: PUSH
67495: LD_INT 1
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67507: LD_ADDR_VAR 0 49
67511: PUSH
67512: LD_INT 3
67514: PUSH
67515: LD_INT 1
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 3
67524: PUSH
67525: LD_INT 2
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67536: LD_ADDR_VAR 0 50
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: LD_INT 3
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 1
67553: PUSH
67554: LD_INT 3
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67565: LD_ADDR_VAR 0 51
67569: PUSH
67570: LD_INT 1
67572: NEG
67573: PUSH
67574: LD_INT 2
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 2
67583: NEG
67584: PUSH
67585: LD_INT 1
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67596: LD_ADDR_VAR 0 52
67600: PUSH
67601: LD_INT 3
67603: NEG
67604: PUSH
67605: LD_INT 1
67607: NEG
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 3
67615: NEG
67616: PUSH
67617: LD_INT 2
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67629: LD_ADDR_VAR 0 53
67633: PUSH
67634: LD_INT 1
67636: NEG
67637: PUSH
67638: LD_INT 3
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: LD_INT 3
67651: NEG
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 1
67659: PUSH
67660: LD_INT 2
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: LIST
67672: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67673: LD_ADDR_VAR 0 54
67677: PUSH
67678: LD_INT 2
67680: PUSH
67681: LD_INT 1
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 3
67691: PUSH
67692: LD_INT 0
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 3
67701: PUSH
67702: LD_INT 1
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: LIST
67713: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67714: LD_ADDR_VAR 0 55
67718: PUSH
67719: LD_INT 3
67721: PUSH
67722: LD_INT 2
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 3
67731: PUSH
67732: LD_INT 3
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 2
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: LIST
67753: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67754: LD_ADDR_VAR 0 56
67758: PUSH
67759: LD_INT 1
67761: PUSH
67762: LD_INT 3
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 0
67771: PUSH
67772: LD_INT 3
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 1
67781: NEG
67782: PUSH
67783: LD_INT 2
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: LIST
67794: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67795: LD_ADDR_VAR 0 57
67799: PUSH
67800: LD_INT 2
67802: NEG
67803: PUSH
67804: LD_INT 1
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 3
67813: NEG
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 3
67824: NEG
67825: PUSH
67826: LD_INT 1
67828: NEG
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67839: LD_ADDR_VAR 0 58
67843: PUSH
67844: LD_INT 2
67846: NEG
67847: PUSH
67848: LD_INT 3
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 3
67858: NEG
67859: PUSH
67860: LD_INT 2
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 3
67870: NEG
67871: PUSH
67872: LD_INT 3
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: LIST
67884: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67885: LD_ADDR_VAR 0 59
67889: PUSH
67890: LD_INT 1
67892: NEG
67893: PUSH
67894: LD_INT 2
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 0
67904: PUSH
67905: LD_INT 2
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 1
67915: PUSH
67916: LD_INT 1
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: LIST
67928: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67929: LD_ADDR_VAR 0 60
67933: PUSH
67934: LD_INT 1
67936: PUSH
67937: LD_INT 1
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 2
67947: PUSH
67948: LD_INT 0
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 2
67957: PUSH
67958: LD_INT 1
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: LIST
67969: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67970: LD_ADDR_VAR 0 61
67974: PUSH
67975: LD_INT 2
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 2
67987: PUSH
67988: LD_INT 2
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 1
67997: PUSH
67998: LD_INT 2
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: LIST
68009: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68010: LD_ADDR_VAR 0 62
68014: PUSH
68015: LD_INT 1
68017: PUSH
68018: LD_INT 2
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: LD_INT 2
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 1
68037: NEG
68038: PUSH
68039: LD_INT 1
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: LIST
68050: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68051: LD_ADDR_VAR 0 63
68055: PUSH
68056: LD_INT 1
68058: NEG
68059: PUSH
68060: LD_INT 1
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 2
68069: NEG
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 2
68080: NEG
68081: PUSH
68082: LD_INT 1
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: LIST
68094: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68095: LD_ADDR_VAR 0 64
68099: PUSH
68100: LD_INT 1
68102: NEG
68103: PUSH
68104: LD_INT 2
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 2
68114: NEG
68115: PUSH
68116: LD_INT 1
68118: NEG
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 2
68126: NEG
68127: PUSH
68128: LD_INT 2
68130: NEG
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: LIST
68140: ST_TO_ADDR
// end ; 2 :
68141: GO 71407
68143: LD_INT 2
68145: DOUBLE
68146: EQUAL
68147: IFTRUE 68151
68149: GO 71406
68151: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68152: LD_ADDR_VAR 0 29
68156: PUSH
68157: LD_INT 4
68159: PUSH
68160: LD_INT 0
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 4
68169: PUSH
68170: LD_INT 1
68172: NEG
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 5
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 5
68190: PUSH
68191: LD_INT 1
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 4
68200: PUSH
68201: LD_INT 1
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 3
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 3
68220: PUSH
68221: LD_INT 1
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 3
68231: PUSH
68232: LD_INT 2
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 5
68242: PUSH
68243: LD_INT 2
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 3
68252: PUSH
68253: LD_INT 3
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 3
68262: PUSH
68263: LD_INT 2
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 4
68272: PUSH
68273: LD_INT 3
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 4
68282: PUSH
68283: LD_INT 4
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 3
68292: PUSH
68293: LD_INT 4
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 2
68302: PUSH
68303: LD_INT 3
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 2
68312: PUSH
68313: LD_INT 2
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 4
68322: PUSH
68323: LD_INT 2
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 2
68332: PUSH
68333: LD_INT 4
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 0
68342: PUSH
68343: LD_INT 4
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 0
68352: PUSH
68353: LD_INT 3
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 1
68362: PUSH
68363: LD_INT 4
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 1
68372: PUSH
68373: LD_INT 5
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 0
68382: PUSH
68383: LD_INT 5
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 1
68392: NEG
68393: PUSH
68394: LD_INT 4
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 1
68403: NEG
68404: PUSH
68405: LD_INT 3
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 2
68414: PUSH
68415: LD_INT 5
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 2
68424: NEG
68425: PUSH
68426: LD_INT 3
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 3
68435: NEG
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 3
68446: NEG
68447: PUSH
68448: LD_INT 1
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 2
68458: NEG
68459: PUSH
68460: LD_INT 0
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 2
68469: NEG
68470: PUSH
68471: LD_INT 1
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 3
68480: NEG
68481: PUSH
68482: LD_INT 1
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 4
68491: NEG
68492: PUSH
68493: LD_INT 0
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 4
68502: NEG
68503: PUSH
68504: LD_INT 1
68506: NEG
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 4
68514: NEG
68515: PUSH
68516: LD_INT 2
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 2
68526: NEG
68527: PUSH
68528: LD_INT 2
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 4
68537: NEG
68538: PUSH
68539: LD_INT 4
68541: NEG
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 4
68549: NEG
68550: PUSH
68551: LD_INT 5
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 3
68561: NEG
68562: PUSH
68563: LD_INT 4
68565: NEG
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 3
68573: NEG
68574: PUSH
68575: LD_INT 3
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 4
68585: NEG
68586: PUSH
68587: LD_INT 3
68589: NEG
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 5
68597: NEG
68598: PUSH
68599: LD_INT 4
68601: NEG
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 5
68609: NEG
68610: PUSH
68611: LD_INT 5
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 3
68621: NEG
68622: PUSH
68623: LD_INT 5
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 5
68633: NEG
68634: PUSH
68635: LD_INT 3
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68690: LD_ADDR_VAR 0 30
68694: PUSH
68695: LD_INT 4
68697: PUSH
68698: LD_INT 4
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 4
68707: PUSH
68708: LD_INT 3
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 5
68717: PUSH
68718: LD_INT 4
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 5
68727: PUSH
68728: LD_INT 5
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 4
68737: PUSH
68738: LD_INT 5
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: LD_INT 4
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 3
68757: PUSH
68758: LD_INT 3
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 5
68767: PUSH
68768: LD_INT 3
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 3
68777: PUSH
68778: LD_INT 5
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 0
68787: PUSH
68788: LD_INT 3
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 0
68797: PUSH
68798: LD_INT 2
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 1
68807: PUSH
68808: LD_INT 3
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 1
68817: PUSH
68818: LD_INT 4
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: LD_INT 4
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 1
68837: NEG
68838: PUSH
68839: LD_INT 3
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 1
68848: NEG
68849: PUSH
68850: LD_INT 2
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 2
68859: PUSH
68860: LD_INT 4
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 2
68869: NEG
68870: PUSH
68871: LD_INT 2
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 4
68880: NEG
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 4
68891: NEG
68892: PUSH
68893: LD_INT 1
68895: NEG
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 3
68903: NEG
68904: PUSH
68905: LD_INT 0
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 3
68914: NEG
68915: PUSH
68916: LD_INT 1
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 4
68925: NEG
68926: PUSH
68927: LD_INT 1
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 5
68936: NEG
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 5
68947: NEG
68948: PUSH
68949: LD_INT 1
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 5
68959: NEG
68960: PUSH
68961: LD_INT 2
68963: NEG
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 3
68971: NEG
68972: PUSH
68973: LD_INT 2
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 3
68982: NEG
68983: PUSH
68984: LD_INT 3
68986: NEG
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 3
68994: NEG
68995: PUSH
68996: LD_INT 4
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 2
69006: NEG
69007: PUSH
69008: LD_INT 3
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 2
69018: NEG
69019: PUSH
69020: LD_INT 2
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: NEG
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 4
69042: NEG
69043: PUSH
69044: LD_INT 3
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 4
69054: NEG
69055: PUSH
69056: LD_INT 4
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 2
69066: NEG
69067: PUSH
69068: LD_INT 4
69070: NEG
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 4
69078: NEG
69079: PUSH
69080: LD_INT 2
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 0
69090: PUSH
69091: LD_INT 4
69093: NEG
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: LD_INT 5
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: LD_INT 4
69115: NEG
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 1
69123: PUSH
69124: LD_INT 3
69126: NEG
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 0
69134: PUSH
69135: LD_INT 3
69137: NEG
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 1
69145: NEG
69146: PUSH
69147: LD_INT 4
69149: NEG
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 1
69157: NEG
69158: PUSH
69159: LD_INT 5
69161: NEG
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 2
69169: PUSH
69170: LD_INT 3
69172: NEG
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 2
69180: NEG
69181: PUSH
69182: LD_INT 5
69184: NEG
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69237: LD_ADDR_VAR 0 31
69241: PUSH
69242: LD_INT 0
69244: PUSH
69245: LD_INT 4
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 0
69254: PUSH
69255: LD_INT 3
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 1
69264: PUSH
69265: LD_INT 4
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 1
69274: PUSH
69275: LD_INT 5
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 0
69284: PUSH
69285: LD_INT 5
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 1
69294: NEG
69295: PUSH
69296: LD_INT 4
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 1
69305: NEG
69306: PUSH
69307: LD_INT 3
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 2
69316: PUSH
69317: LD_INT 5
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 2
69326: NEG
69327: PUSH
69328: LD_INT 3
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 3
69337: NEG
69338: PUSH
69339: LD_INT 0
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 3
69348: NEG
69349: PUSH
69350: LD_INT 1
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 2
69360: NEG
69361: PUSH
69362: LD_INT 0
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 2
69371: NEG
69372: PUSH
69373: LD_INT 1
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 3
69382: NEG
69383: PUSH
69384: LD_INT 1
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 4
69393: NEG
69394: PUSH
69395: LD_INT 0
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 4
69404: NEG
69405: PUSH
69406: LD_INT 1
69408: NEG
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 4
69416: NEG
69417: PUSH
69418: LD_INT 2
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 2
69428: NEG
69429: PUSH
69430: LD_INT 2
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 4
69439: NEG
69440: PUSH
69441: LD_INT 4
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 4
69451: NEG
69452: PUSH
69453: LD_INT 5
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 3
69463: NEG
69464: PUSH
69465: LD_INT 4
69467: NEG
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 3
69475: NEG
69476: PUSH
69477: LD_INT 3
69479: NEG
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 4
69487: NEG
69488: PUSH
69489: LD_INT 3
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 5
69499: NEG
69500: PUSH
69501: LD_INT 4
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 5
69511: NEG
69512: PUSH
69513: LD_INT 5
69515: NEG
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 3
69523: NEG
69524: PUSH
69525: LD_INT 5
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 5
69535: NEG
69536: PUSH
69537: LD_INT 3
69539: NEG
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 0
69547: PUSH
69548: LD_INT 3
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 0
69558: PUSH
69559: LD_INT 4
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: LD_INT 3
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 1
69580: PUSH
69581: LD_INT 2
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 0
69591: PUSH
69592: LD_INT 2
69594: NEG
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 1
69602: NEG
69603: PUSH
69604: LD_INT 3
69606: NEG
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 1
69614: NEG
69615: PUSH
69616: LD_INT 4
69618: NEG
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 2
69626: PUSH
69627: LD_INT 2
69629: NEG
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 2
69637: NEG
69638: PUSH
69639: LD_INT 4
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 4
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 4
69659: PUSH
69660: LD_INT 1
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 5
69670: PUSH
69671: LD_INT 0
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 5
69680: PUSH
69681: LD_INT 1
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 4
69690: PUSH
69691: LD_INT 1
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 3
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 3
69710: PUSH
69711: LD_INT 1
69713: NEG
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 3
69721: PUSH
69722: LD_INT 2
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 5
69732: PUSH
69733: LD_INT 2
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69787: LD_ADDR_VAR 0 32
69791: PUSH
69792: LD_INT 4
69794: NEG
69795: PUSH
69796: LD_INT 0
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 4
69805: NEG
69806: PUSH
69807: LD_INT 1
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 3
69817: NEG
69818: PUSH
69819: LD_INT 0
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 3
69828: NEG
69829: PUSH
69830: LD_INT 1
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 4
69839: NEG
69840: PUSH
69841: LD_INT 1
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 5
69850: NEG
69851: PUSH
69852: LD_INT 0
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 5
69861: NEG
69862: PUSH
69863: LD_INT 1
69865: NEG
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 5
69873: NEG
69874: PUSH
69875: LD_INT 2
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 3
69885: NEG
69886: PUSH
69887: LD_INT 2
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 3
69896: NEG
69897: PUSH
69898: LD_INT 3
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 3
69908: NEG
69909: PUSH
69910: LD_INT 4
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 2
69920: NEG
69921: PUSH
69922: LD_INT 3
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 2
69932: NEG
69933: PUSH
69934: LD_INT 2
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 3
69944: NEG
69945: PUSH
69946: LD_INT 2
69948: NEG
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 4
69956: NEG
69957: PUSH
69958: LD_INT 3
69960: NEG
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 4
69968: NEG
69969: PUSH
69970: LD_INT 4
69972: NEG
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 2
69980: NEG
69981: PUSH
69982: LD_INT 4
69984: NEG
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 4
69992: NEG
69993: PUSH
69994: LD_INT 2
69996: NEG
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 0
70004: PUSH
70005: LD_INT 4
70007: NEG
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 0
70015: PUSH
70016: LD_INT 5
70018: NEG
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 1
70026: PUSH
70027: LD_INT 4
70029: NEG
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 1
70037: PUSH
70038: LD_INT 3
70040: NEG
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 0
70048: PUSH
70049: LD_INT 3
70051: NEG
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 1
70059: NEG
70060: PUSH
70061: LD_INT 4
70063: NEG
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 1
70071: NEG
70072: PUSH
70073: LD_INT 5
70075: NEG
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 2
70083: PUSH
70084: LD_INT 3
70086: NEG
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 2
70094: NEG
70095: PUSH
70096: LD_INT 5
70098: NEG
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 3
70106: PUSH
70107: LD_INT 0
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 3
70116: PUSH
70117: LD_INT 1
70119: NEG
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 4
70127: PUSH
70128: LD_INT 0
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 4
70137: PUSH
70138: LD_INT 1
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 3
70147: PUSH
70148: LD_INT 1
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 2
70157: PUSH
70158: LD_INT 0
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 2
70167: PUSH
70168: LD_INT 1
70170: NEG
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 2
70178: PUSH
70179: LD_INT 2
70181: NEG
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 4
70189: PUSH
70190: LD_INT 2
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 4
70199: PUSH
70200: LD_INT 4
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 4
70209: PUSH
70210: LD_INT 3
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 5
70219: PUSH
70220: LD_INT 4
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 5
70229: PUSH
70230: LD_INT 5
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 4
70239: PUSH
70240: LD_INT 5
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 3
70249: PUSH
70250: LD_INT 4
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 3
70259: PUSH
70260: LD_INT 3
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 5
70269: PUSH
70270: LD_INT 3
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 3
70279: PUSH
70280: LD_INT 5
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70334: LD_ADDR_VAR 0 33
70338: PUSH
70339: LD_INT 4
70341: NEG
70342: PUSH
70343: LD_INT 4
70345: NEG
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 4
70353: NEG
70354: PUSH
70355: LD_INT 5
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 3
70365: NEG
70366: PUSH
70367: LD_INT 4
70369: NEG
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 3
70377: NEG
70378: PUSH
70379: LD_INT 3
70381: NEG
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 4
70389: NEG
70390: PUSH
70391: LD_INT 3
70393: NEG
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 5
70401: NEG
70402: PUSH
70403: LD_INT 4
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 5
70413: NEG
70414: PUSH
70415: LD_INT 5
70417: NEG
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 3
70425: NEG
70426: PUSH
70427: LD_INT 5
70429: NEG
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 5
70437: NEG
70438: PUSH
70439: LD_INT 3
70441: NEG
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 0
70449: PUSH
70450: LD_INT 3
70452: NEG
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: LD_INT 4
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 1
70471: PUSH
70472: LD_INT 3
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 1
70482: PUSH
70483: LD_INT 2
70485: NEG
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 0
70493: PUSH
70494: LD_INT 2
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 1
70504: NEG
70505: PUSH
70506: LD_INT 3
70508: NEG
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 1
70516: NEG
70517: PUSH
70518: LD_INT 4
70520: NEG
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 2
70528: PUSH
70529: LD_INT 2
70531: NEG
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 2
70539: NEG
70540: PUSH
70541: LD_INT 4
70543: NEG
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 4
70551: PUSH
70552: LD_INT 0
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 4
70561: PUSH
70562: LD_INT 1
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 5
70572: PUSH
70573: LD_INT 0
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 5
70582: PUSH
70583: LD_INT 1
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 4
70592: PUSH
70593: LD_INT 1
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 3
70602: PUSH
70603: LD_INT 0
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 3
70612: PUSH
70613: LD_INT 1
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 3
70623: PUSH
70624: LD_INT 2
70626: NEG
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 5
70634: PUSH
70635: LD_INT 2
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 3
70644: PUSH
70645: LD_INT 3
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 3
70654: PUSH
70655: LD_INT 2
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 4
70664: PUSH
70665: LD_INT 3
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 4
70674: PUSH
70675: LD_INT 4
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 3
70684: PUSH
70685: LD_INT 4
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 2
70694: PUSH
70695: LD_INT 3
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 2
70704: PUSH
70705: LD_INT 2
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 4
70714: PUSH
70715: LD_INT 2
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 2
70724: PUSH
70725: LD_INT 4
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: LD_INT 4
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 0
70744: PUSH
70745: LD_INT 3
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 1
70754: PUSH
70755: LD_INT 4
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 1
70764: PUSH
70765: LD_INT 5
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 0
70774: PUSH
70775: LD_INT 5
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 1
70784: NEG
70785: PUSH
70786: LD_INT 4
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 1
70795: NEG
70796: PUSH
70797: LD_INT 3
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 2
70806: PUSH
70807: LD_INT 5
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 2
70816: NEG
70817: PUSH
70818: LD_INT 3
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70872: LD_ADDR_VAR 0 34
70876: PUSH
70877: LD_INT 0
70879: PUSH
70880: LD_INT 4
70882: NEG
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 0
70890: PUSH
70891: LD_INT 5
70893: NEG
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 1
70901: PUSH
70902: LD_INT 4
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 1
70912: PUSH
70913: LD_INT 3
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 0
70923: PUSH
70924: LD_INT 3
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 1
70934: NEG
70935: PUSH
70936: LD_INT 4
70938: NEG
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 1
70946: NEG
70947: PUSH
70948: LD_INT 5
70950: NEG
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 2
70958: PUSH
70959: LD_INT 3
70961: NEG
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 2
70969: NEG
70970: PUSH
70971: LD_INT 5
70973: NEG
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 3
70981: PUSH
70982: LD_INT 0
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 3
70991: PUSH
70992: LD_INT 1
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 4
71002: PUSH
71003: LD_INT 0
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 4
71012: PUSH
71013: LD_INT 1
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 3
71022: PUSH
71023: LD_INT 1
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 2
71032: PUSH
71033: LD_INT 0
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 2
71042: PUSH
71043: LD_INT 1
71045: NEG
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 2
71053: PUSH
71054: LD_INT 2
71056: NEG
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 4
71064: PUSH
71065: LD_INT 2
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 4
71074: PUSH
71075: LD_INT 4
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 4
71084: PUSH
71085: LD_INT 3
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 5
71094: PUSH
71095: LD_INT 4
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 5
71104: PUSH
71105: LD_INT 5
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 4
71114: PUSH
71115: LD_INT 5
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 3
71124: PUSH
71125: LD_INT 4
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 3
71134: PUSH
71135: LD_INT 3
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 5
71144: PUSH
71145: LD_INT 3
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: LD_INT 3
71154: PUSH
71155: LD_INT 5
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 0
71164: PUSH
71165: LD_INT 3
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 0
71174: PUSH
71175: LD_INT 2
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 1
71184: PUSH
71185: LD_INT 3
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 1
71194: PUSH
71195: LD_INT 4
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 0
71204: PUSH
71205: LD_INT 4
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 1
71214: NEG
71215: PUSH
71216: LD_INT 3
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 1
71225: NEG
71226: PUSH
71227: LD_INT 2
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 2
71236: PUSH
71237: LD_INT 4
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 2
71246: NEG
71247: PUSH
71248: LD_INT 2
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 4
71257: NEG
71258: PUSH
71259: LD_INT 0
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 4
71268: NEG
71269: PUSH
71270: LD_INT 1
71272: NEG
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 3
71280: NEG
71281: PUSH
71282: LD_INT 0
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 3
71291: NEG
71292: PUSH
71293: LD_INT 1
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 4
71302: NEG
71303: PUSH
71304: LD_INT 1
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 5
71313: NEG
71314: PUSH
71315: LD_INT 0
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 5
71324: NEG
71325: PUSH
71326: LD_INT 1
71328: NEG
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 5
71336: NEG
71337: PUSH
71338: LD_INT 2
71340: NEG
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 3
71348: NEG
71349: PUSH
71350: LD_INT 2
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: ST_TO_ADDR
// end ; end ;
71404: GO 71407
71406: POP
// case btype of b_depot , b_warehouse :
71407: LD_VAR 0 1
71411: PUSH
71412: LD_INT 0
71414: DOUBLE
71415: EQUAL
71416: IFTRUE 71426
71418: LD_INT 1
71420: DOUBLE
71421: EQUAL
71422: IFTRUE 71426
71424: GO 71627
71426: POP
// case nation of nation_american :
71427: LD_VAR 0 5
71431: PUSH
71432: LD_INT 1
71434: DOUBLE
71435: EQUAL
71436: IFTRUE 71440
71438: GO 71496
71440: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71441: LD_ADDR_VAR 0 9
71445: PUSH
71446: LD_VAR 0 11
71450: PUSH
71451: LD_VAR 0 12
71455: PUSH
71456: LD_VAR 0 13
71460: PUSH
71461: LD_VAR 0 14
71465: PUSH
71466: LD_VAR 0 15
71470: PUSH
71471: LD_VAR 0 16
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: PUSH
71484: LD_VAR 0 4
71488: PUSH
71489: LD_INT 1
71491: PLUS
71492: ARRAY
71493: ST_TO_ADDR
71494: GO 71625
71496: LD_INT 2
71498: DOUBLE
71499: EQUAL
71500: IFTRUE 71504
71502: GO 71560
71504: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71505: LD_ADDR_VAR 0 9
71509: PUSH
71510: LD_VAR 0 17
71514: PUSH
71515: LD_VAR 0 18
71519: PUSH
71520: LD_VAR 0 19
71524: PUSH
71525: LD_VAR 0 20
71529: PUSH
71530: LD_VAR 0 21
71534: PUSH
71535: LD_VAR 0 22
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: PUSH
71548: LD_VAR 0 4
71552: PUSH
71553: LD_INT 1
71555: PLUS
71556: ARRAY
71557: ST_TO_ADDR
71558: GO 71625
71560: LD_INT 3
71562: DOUBLE
71563: EQUAL
71564: IFTRUE 71568
71566: GO 71624
71568: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71569: LD_ADDR_VAR 0 9
71573: PUSH
71574: LD_VAR 0 23
71578: PUSH
71579: LD_VAR 0 24
71583: PUSH
71584: LD_VAR 0 25
71588: PUSH
71589: LD_VAR 0 26
71593: PUSH
71594: LD_VAR 0 27
71598: PUSH
71599: LD_VAR 0 28
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: PUSH
71612: LD_VAR 0 4
71616: PUSH
71617: LD_INT 1
71619: PLUS
71620: ARRAY
71621: ST_TO_ADDR
71622: GO 71625
71624: POP
71625: GO 72180
71627: LD_INT 2
71629: DOUBLE
71630: EQUAL
71631: IFTRUE 71641
71633: LD_INT 3
71635: DOUBLE
71636: EQUAL
71637: IFTRUE 71641
71639: GO 71697
71641: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71642: LD_ADDR_VAR 0 9
71646: PUSH
71647: LD_VAR 0 29
71651: PUSH
71652: LD_VAR 0 30
71656: PUSH
71657: LD_VAR 0 31
71661: PUSH
71662: LD_VAR 0 32
71666: PUSH
71667: LD_VAR 0 33
71671: PUSH
71672: LD_VAR 0 34
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: PUSH
71685: LD_VAR 0 4
71689: PUSH
71690: LD_INT 1
71692: PLUS
71693: ARRAY
71694: ST_TO_ADDR
71695: GO 72180
71697: LD_INT 16
71699: DOUBLE
71700: EQUAL
71701: IFTRUE 71759
71703: LD_INT 17
71705: DOUBLE
71706: EQUAL
71707: IFTRUE 71759
71709: LD_INT 18
71711: DOUBLE
71712: EQUAL
71713: IFTRUE 71759
71715: LD_INT 19
71717: DOUBLE
71718: EQUAL
71719: IFTRUE 71759
71721: LD_INT 22
71723: DOUBLE
71724: EQUAL
71725: IFTRUE 71759
71727: LD_INT 20
71729: DOUBLE
71730: EQUAL
71731: IFTRUE 71759
71733: LD_INT 21
71735: DOUBLE
71736: EQUAL
71737: IFTRUE 71759
71739: LD_INT 23
71741: DOUBLE
71742: EQUAL
71743: IFTRUE 71759
71745: LD_INT 24
71747: DOUBLE
71748: EQUAL
71749: IFTRUE 71759
71751: LD_INT 25
71753: DOUBLE
71754: EQUAL
71755: IFTRUE 71759
71757: GO 71815
71759: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71760: LD_ADDR_VAR 0 9
71764: PUSH
71765: LD_VAR 0 35
71769: PUSH
71770: LD_VAR 0 36
71774: PUSH
71775: LD_VAR 0 37
71779: PUSH
71780: LD_VAR 0 38
71784: PUSH
71785: LD_VAR 0 39
71789: PUSH
71790: LD_VAR 0 40
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: PUSH
71803: LD_VAR 0 4
71807: PUSH
71808: LD_INT 1
71810: PLUS
71811: ARRAY
71812: ST_TO_ADDR
71813: GO 72180
71815: LD_INT 6
71817: DOUBLE
71818: EQUAL
71819: IFTRUE 71871
71821: LD_INT 7
71823: DOUBLE
71824: EQUAL
71825: IFTRUE 71871
71827: LD_INT 8
71829: DOUBLE
71830: EQUAL
71831: IFTRUE 71871
71833: LD_INT 13
71835: DOUBLE
71836: EQUAL
71837: IFTRUE 71871
71839: LD_INT 12
71841: DOUBLE
71842: EQUAL
71843: IFTRUE 71871
71845: LD_INT 15
71847: DOUBLE
71848: EQUAL
71849: IFTRUE 71871
71851: LD_INT 11
71853: DOUBLE
71854: EQUAL
71855: IFTRUE 71871
71857: LD_INT 14
71859: DOUBLE
71860: EQUAL
71861: IFTRUE 71871
71863: LD_INT 10
71865: DOUBLE
71866: EQUAL
71867: IFTRUE 71871
71869: GO 71927
71871: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71872: LD_ADDR_VAR 0 9
71876: PUSH
71877: LD_VAR 0 41
71881: PUSH
71882: LD_VAR 0 42
71886: PUSH
71887: LD_VAR 0 43
71891: PUSH
71892: LD_VAR 0 44
71896: PUSH
71897: LD_VAR 0 45
71901: PUSH
71902: LD_VAR 0 46
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: PUSH
71915: LD_VAR 0 4
71919: PUSH
71920: LD_INT 1
71922: PLUS
71923: ARRAY
71924: ST_TO_ADDR
71925: GO 72180
71927: LD_INT 36
71929: DOUBLE
71930: EQUAL
71931: IFTRUE 71935
71933: GO 71991
71935: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71936: LD_ADDR_VAR 0 9
71940: PUSH
71941: LD_VAR 0 47
71945: PUSH
71946: LD_VAR 0 48
71950: PUSH
71951: LD_VAR 0 49
71955: PUSH
71956: LD_VAR 0 50
71960: PUSH
71961: LD_VAR 0 51
71965: PUSH
71966: LD_VAR 0 52
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: PUSH
71979: LD_VAR 0 4
71983: PUSH
71984: LD_INT 1
71986: PLUS
71987: ARRAY
71988: ST_TO_ADDR
71989: GO 72180
71991: LD_INT 4
71993: DOUBLE
71994: EQUAL
71995: IFTRUE 72017
71997: LD_INT 5
71999: DOUBLE
72000: EQUAL
72001: IFTRUE 72017
72003: LD_INT 34
72005: DOUBLE
72006: EQUAL
72007: IFTRUE 72017
72009: LD_INT 37
72011: DOUBLE
72012: EQUAL
72013: IFTRUE 72017
72015: GO 72073
72017: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72018: LD_ADDR_VAR 0 9
72022: PUSH
72023: LD_VAR 0 53
72027: PUSH
72028: LD_VAR 0 54
72032: PUSH
72033: LD_VAR 0 55
72037: PUSH
72038: LD_VAR 0 56
72042: PUSH
72043: LD_VAR 0 57
72047: PUSH
72048: LD_VAR 0 58
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: PUSH
72061: LD_VAR 0 4
72065: PUSH
72066: LD_INT 1
72068: PLUS
72069: ARRAY
72070: ST_TO_ADDR
72071: GO 72180
72073: LD_INT 31
72075: DOUBLE
72076: EQUAL
72077: IFTRUE 72123
72079: LD_INT 32
72081: DOUBLE
72082: EQUAL
72083: IFTRUE 72123
72085: LD_INT 33
72087: DOUBLE
72088: EQUAL
72089: IFTRUE 72123
72091: LD_INT 27
72093: DOUBLE
72094: EQUAL
72095: IFTRUE 72123
72097: LD_INT 26
72099: DOUBLE
72100: EQUAL
72101: IFTRUE 72123
72103: LD_INT 28
72105: DOUBLE
72106: EQUAL
72107: IFTRUE 72123
72109: LD_INT 29
72111: DOUBLE
72112: EQUAL
72113: IFTRUE 72123
72115: LD_INT 30
72117: DOUBLE
72118: EQUAL
72119: IFTRUE 72123
72121: GO 72179
72123: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72124: LD_ADDR_VAR 0 9
72128: PUSH
72129: LD_VAR 0 59
72133: PUSH
72134: LD_VAR 0 60
72138: PUSH
72139: LD_VAR 0 61
72143: PUSH
72144: LD_VAR 0 62
72148: PUSH
72149: LD_VAR 0 63
72153: PUSH
72154: LD_VAR 0 64
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: PUSH
72167: LD_VAR 0 4
72171: PUSH
72172: LD_INT 1
72174: PLUS
72175: ARRAY
72176: ST_TO_ADDR
72177: GO 72180
72179: POP
// temp_list2 = [ ] ;
72180: LD_ADDR_VAR 0 10
72184: PUSH
72185: EMPTY
72186: ST_TO_ADDR
// for i in temp_list do
72187: LD_ADDR_VAR 0 8
72191: PUSH
72192: LD_VAR 0 9
72196: PUSH
72197: FOR_IN
72198: IFFALSE 72250
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72200: LD_ADDR_VAR 0 10
72204: PUSH
72205: LD_VAR 0 10
72209: PUSH
72210: LD_VAR 0 8
72214: PUSH
72215: LD_INT 1
72217: ARRAY
72218: PUSH
72219: LD_VAR 0 2
72223: PLUS
72224: PUSH
72225: LD_VAR 0 8
72229: PUSH
72230: LD_INT 2
72232: ARRAY
72233: PUSH
72234: LD_VAR 0 3
72238: PLUS
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: EMPTY
72245: LIST
72246: ADD
72247: ST_TO_ADDR
72248: GO 72197
72250: POP
72251: POP
// result = temp_list2 ;
72252: LD_ADDR_VAR 0 7
72256: PUSH
72257: LD_VAR 0 10
72261: ST_TO_ADDR
// end ;
72262: LD_VAR 0 7
72266: RET
// export function EnemyInRange ( unit , dist ) ; begin
72267: LD_INT 0
72269: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72270: LD_ADDR_VAR 0 3
72274: PUSH
72275: LD_VAR 0 1
72279: PPUSH
72280: CALL_OW 255
72284: PPUSH
72285: LD_VAR 0 1
72289: PPUSH
72290: CALL_OW 250
72294: PPUSH
72295: LD_VAR 0 1
72299: PPUSH
72300: CALL_OW 251
72304: PPUSH
72305: LD_VAR 0 2
72309: PPUSH
72310: CALL 45669 0 4
72314: PUSH
72315: LD_INT 4
72317: ARRAY
72318: ST_TO_ADDR
// end ;
72319: LD_VAR 0 3
72323: RET
// export function PlayerSeeMe ( unit ) ; begin
72324: LD_INT 0
72326: PPUSH
// result := See ( your_side , unit ) ;
72327: LD_ADDR_VAR 0 2
72331: PUSH
72332: LD_OWVAR 2
72336: PPUSH
72337: LD_VAR 0 1
72341: PPUSH
72342: CALL_OW 292
72346: ST_TO_ADDR
// end ;
72347: LD_VAR 0 2
72351: RET
// export function ReverseDir ( unit ) ; begin
72352: LD_INT 0
72354: PPUSH
// if not unit then
72355: LD_VAR 0 1
72359: NOT
72360: IFFALSE 72364
// exit ;
72362: GO 72387
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72364: LD_ADDR_VAR 0 2
72368: PUSH
72369: LD_VAR 0 1
72373: PPUSH
72374: CALL_OW 254
72378: PUSH
72379: LD_INT 3
72381: PLUS
72382: PUSH
72383: LD_INT 6
72385: MOD
72386: ST_TO_ADDR
// end ;
72387: LD_VAR 0 2
72391: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72392: LD_INT 0
72394: PPUSH
72395: PPUSH
72396: PPUSH
72397: PPUSH
72398: PPUSH
72399: PPUSH
// if not unit or not hexes then
72400: LD_VAR 0 1
72404: NOT
72405: PUSH
72406: LD_VAR 0 2
72410: NOT
72411: OR
72412: IFFALSE 72416
// exit ;
72414: GO 72539
// dist := 9999 ;
72416: LD_ADDR_VAR 0 5
72420: PUSH
72421: LD_INT 9999
72423: ST_TO_ADDR
// for i = 1 to hexes do
72424: LD_ADDR_VAR 0 4
72428: PUSH
72429: DOUBLE
72430: LD_INT 1
72432: DEC
72433: ST_TO_ADDR
72434: LD_VAR 0 2
72438: PUSH
72439: FOR_TO
72440: IFFALSE 72527
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72442: LD_ADDR_VAR 0 6
72446: PUSH
72447: LD_VAR 0 1
72451: PPUSH
72452: LD_VAR 0 2
72456: PUSH
72457: LD_VAR 0 4
72461: ARRAY
72462: PUSH
72463: LD_INT 1
72465: ARRAY
72466: PPUSH
72467: LD_VAR 0 2
72471: PUSH
72472: LD_VAR 0 4
72476: ARRAY
72477: PUSH
72478: LD_INT 2
72480: ARRAY
72481: PPUSH
72482: CALL_OW 297
72486: ST_TO_ADDR
// if tdist < dist then
72487: LD_VAR 0 6
72491: PUSH
72492: LD_VAR 0 5
72496: LESS
72497: IFFALSE 72525
// begin hex := hexes [ i ] ;
72499: LD_ADDR_VAR 0 8
72503: PUSH
72504: LD_VAR 0 2
72508: PUSH
72509: LD_VAR 0 4
72513: ARRAY
72514: ST_TO_ADDR
// dist := tdist ;
72515: LD_ADDR_VAR 0 5
72519: PUSH
72520: LD_VAR 0 6
72524: ST_TO_ADDR
// end ; end ;
72525: GO 72439
72527: POP
72528: POP
// result := hex ;
72529: LD_ADDR_VAR 0 3
72533: PUSH
72534: LD_VAR 0 8
72538: ST_TO_ADDR
// end ;
72539: LD_VAR 0 3
72543: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72544: LD_INT 0
72546: PPUSH
72547: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72548: LD_VAR 0 1
72552: NOT
72553: PUSH
72554: LD_VAR 0 1
72558: PUSH
72559: LD_INT 21
72561: PUSH
72562: LD_INT 2
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 23
72571: PUSH
72572: LD_INT 2
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PPUSH
72583: CALL_OW 69
72587: IN
72588: NOT
72589: OR
72590: IFFALSE 72594
// exit ;
72592: GO 72641
// for i = 1 to 3 do
72594: LD_ADDR_VAR 0 3
72598: PUSH
72599: DOUBLE
72600: LD_INT 1
72602: DEC
72603: ST_TO_ADDR
72604: LD_INT 3
72606: PUSH
72607: FOR_TO
72608: IFFALSE 72639
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72610: LD_VAR 0 1
72614: PPUSH
72615: CALL_OW 250
72619: PPUSH
72620: LD_VAR 0 1
72624: PPUSH
72625: CALL_OW 251
72629: PPUSH
72630: LD_INT 1
72632: PPUSH
72633: CALL_OW 453
72637: GO 72607
72639: POP
72640: POP
// end ;
72641: LD_VAR 0 2
72645: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72646: LD_INT 0
72648: PPUSH
72649: PPUSH
72650: PPUSH
72651: PPUSH
72652: PPUSH
72653: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72654: LD_VAR 0 1
72658: NOT
72659: PUSH
72660: LD_VAR 0 2
72664: NOT
72665: OR
72666: PUSH
72667: LD_VAR 0 1
72671: PPUSH
72672: CALL_OW 314
72676: OR
72677: IFFALSE 72681
// exit ;
72679: GO 73122
// x := GetX ( enemy_unit ) ;
72681: LD_ADDR_VAR 0 7
72685: PUSH
72686: LD_VAR 0 2
72690: PPUSH
72691: CALL_OW 250
72695: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72696: LD_ADDR_VAR 0 8
72700: PUSH
72701: LD_VAR 0 2
72705: PPUSH
72706: CALL_OW 251
72710: ST_TO_ADDR
// if not x or not y then
72711: LD_VAR 0 7
72715: NOT
72716: PUSH
72717: LD_VAR 0 8
72721: NOT
72722: OR
72723: IFFALSE 72727
// exit ;
72725: GO 73122
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72727: LD_ADDR_VAR 0 6
72731: PUSH
72732: LD_VAR 0 7
72736: PPUSH
72737: LD_INT 0
72739: PPUSH
72740: LD_INT 4
72742: PPUSH
72743: CALL_OW 272
72747: PUSH
72748: LD_VAR 0 8
72752: PPUSH
72753: LD_INT 0
72755: PPUSH
72756: LD_INT 4
72758: PPUSH
72759: CALL_OW 273
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: LD_VAR 0 7
72772: PPUSH
72773: LD_INT 1
72775: PPUSH
72776: LD_INT 4
72778: PPUSH
72779: CALL_OW 272
72783: PUSH
72784: LD_VAR 0 8
72788: PPUSH
72789: LD_INT 1
72791: PPUSH
72792: LD_INT 4
72794: PPUSH
72795: CALL_OW 273
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: LD_VAR 0 7
72808: PPUSH
72809: LD_INT 2
72811: PPUSH
72812: LD_INT 4
72814: PPUSH
72815: CALL_OW 272
72819: PUSH
72820: LD_VAR 0 8
72824: PPUSH
72825: LD_INT 2
72827: PPUSH
72828: LD_INT 4
72830: PPUSH
72831: CALL_OW 273
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_VAR 0 7
72844: PPUSH
72845: LD_INT 3
72847: PPUSH
72848: LD_INT 4
72850: PPUSH
72851: CALL_OW 272
72855: PUSH
72856: LD_VAR 0 8
72860: PPUSH
72861: LD_INT 3
72863: PPUSH
72864: LD_INT 4
72866: PPUSH
72867: CALL_OW 273
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_VAR 0 7
72880: PPUSH
72881: LD_INT 4
72883: PPUSH
72884: LD_INT 4
72886: PPUSH
72887: CALL_OW 272
72891: PUSH
72892: LD_VAR 0 8
72896: PPUSH
72897: LD_INT 4
72899: PPUSH
72900: LD_INT 4
72902: PPUSH
72903: CALL_OW 273
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: LD_VAR 0 7
72916: PPUSH
72917: LD_INT 5
72919: PPUSH
72920: LD_INT 4
72922: PPUSH
72923: CALL_OW 272
72927: PUSH
72928: LD_VAR 0 8
72932: PPUSH
72933: LD_INT 5
72935: PPUSH
72936: LD_INT 4
72938: PPUSH
72939: CALL_OW 273
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: ST_TO_ADDR
// for i = tmp downto 1 do
72956: LD_ADDR_VAR 0 4
72960: PUSH
72961: DOUBLE
72962: LD_VAR 0 6
72966: INC
72967: ST_TO_ADDR
72968: LD_INT 1
72970: PUSH
72971: FOR_DOWNTO
72972: IFFALSE 73073
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72974: LD_VAR 0 6
72978: PUSH
72979: LD_VAR 0 4
72983: ARRAY
72984: PUSH
72985: LD_INT 1
72987: ARRAY
72988: PPUSH
72989: LD_VAR 0 6
72993: PUSH
72994: LD_VAR 0 4
72998: ARRAY
72999: PUSH
73000: LD_INT 2
73002: ARRAY
73003: PPUSH
73004: CALL_OW 488
73008: NOT
73009: PUSH
73010: LD_VAR 0 6
73014: PUSH
73015: LD_VAR 0 4
73019: ARRAY
73020: PUSH
73021: LD_INT 1
73023: ARRAY
73024: PPUSH
73025: LD_VAR 0 6
73029: PUSH
73030: LD_VAR 0 4
73034: ARRAY
73035: PUSH
73036: LD_INT 2
73038: ARRAY
73039: PPUSH
73040: CALL_OW 428
73044: PUSH
73045: LD_INT 0
73047: NONEQUAL
73048: OR
73049: IFFALSE 73071
// tmp := Delete ( tmp , i ) ;
73051: LD_ADDR_VAR 0 6
73055: PUSH
73056: LD_VAR 0 6
73060: PPUSH
73061: LD_VAR 0 4
73065: PPUSH
73066: CALL_OW 3
73070: ST_TO_ADDR
73071: GO 72971
73073: POP
73074: POP
// j := GetClosestHex ( unit , tmp ) ;
73075: LD_ADDR_VAR 0 5
73079: PUSH
73080: LD_VAR 0 1
73084: PPUSH
73085: LD_VAR 0 6
73089: PPUSH
73090: CALL 72392 0 2
73094: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73095: LD_VAR 0 1
73099: PPUSH
73100: LD_VAR 0 5
73104: PUSH
73105: LD_INT 1
73107: ARRAY
73108: PPUSH
73109: LD_VAR 0 5
73113: PUSH
73114: LD_INT 2
73116: ARRAY
73117: PPUSH
73118: CALL_OW 111
// end ;
73122: LD_VAR 0 3
73126: RET
// export function PrepareApemanSoldier ( ) ; begin
73127: LD_INT 0
73129: PPUSH
// uc_nation := 0 ;
73130: LD_ADDR_OWVAR 21
73134: PUSH
73135: LD_INT 0
73137: ST_TO_ADDR
// hc_sex := sex_male ;
73138: LD_ADDR_OWVAR 27
73142: PUSH
73143: LD_INT 1
73145: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73146: LD_ADDR_OWVAR 28
73150: PUSH
73151: LD_INT 15
73153: ST_TO_ADDR
// hc_gallery :=  ;
73154: LD_ADDR_OWVAR 33
73158: PUSH
73159: LD_STRING 
73161: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73162: LD_ADDR_OWVAR 31
73166: PUSH
73167: LD_INT 0
73169: PPUSH
73170: LD_INT 3
73172: PPUSH
73173: CALL_OW 12
73177: PUSH
73178: LD_INT 0
73180: PPUSH
73181: LD_INT 3
73183: PPUSH
73184: CALL_OW 12
73188: PUSH
73189: LD_INT 0
73191: PUSH
73192: LD_INT 0
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: ST_TO_ADDR
// end ;
73201: LD_VAR 0 1
73205: RET
// export function PrepareApemanEngineer ( ) ; begin
73206: LD_INT 0
73208: PPUSH
// uc_nation := 0 ;
73209: LD_ADDR_OWVAR 21
73213: PUSH
73214: LD_INT 0
73216: ST_TO_ADDR
// hc_sex := sex_male ;
73217: LD_ADDR_OWVAR 27
73221: PUSH
73222: LD_INT 1
73224: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73225: LD_ADDR_OWVAR 28
73229: PUSH
73230: LD_INT 16
73232: ST_TO_ADDR
// hc_gallery :=  ;
73233: LD_ADDR_OWVAR 33
73237: PUSH
73238: LD_STRING 
73240: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73241: LD_ADDR_OWVAR 31
73245: PUSH
73246: LD_INT 0
73248: PPUSH
73249: LD_INT 3
73251: PPUSH
73252: CALL_OW 12
73256: PUSH
73257: LD_INT 0
73259: PPUSH
73260: LD_INT 3
73262: PPUSH
73263: CALL_OW 12
73267: PUSH
73268: LD_INT 0
73270: PUSH
73271: LD_INT 0
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: ST_TO_ADDR
// end ;
73280: LD_VAR 0 1
73284: RET
// export function PrepareApeman ( agressivity ) ; begin
73285: LD_INT 0
73287: PPUSH
// uc_side := 0 ;
73288: LD_ADDR_OWVAR 20
73292: PUSH
73293: LD_INT 0
73295: ST_TO_ADDR
// uc_nation := 0 ;
73296: LD_ADDR_OWVAR 21
73300: PUSH
73301: LD_INT 0
73303: ST_TO_ADDR
// hc_sex := sex_male ;
73304: LD_ADDR_OWVAR 27
73308: PUSH
73309: LD_INT 1
73311: ST_TO_ADDR
// hc_class := class_apeman ;
73312: LD_ADDR_OWVAR 28
73316: PUSH
73317: LD_INT 12
73319: ST_TO_ADDR
// hc_gallery :=  ;
73320: LD_ADDR_OWVAR 33
73324: PUSH
73325: LD_STRING 
73327: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73328: LD_ADDR_OWVAR 35
73332: PUSH
73333: LD_VAR 0 1
73337: NEG
73338: PPUSH
73339: LD_VAR 0 1
73343: PPUSH
73344: CALL_OW 12
73348: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73349: LD_ADDR_OWVAR 31
73353: PUSH
73354: LD_INT 0
73356: PPUSH
73357: LD_INT 3
73359: PPUSH
73360: CALL_OW 12
73364: PUSH
73365: LD_INT 0
73367: PPUSH
73368: LD_INT 3
73370: PPUSH
73371: CALL_OW 12
73375: PUSH
73376: LD_INT 0
73378: PUSH
73379: LD_INT 0
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: LIST
73386: LIST
73387: ST_TO_ADDR
// end ;
73388: LD_VAR 0 2
73392: RET
// export function PrepareTiger ( agressivity ) ; begin
73393: LD_INT 0
73395: PPUSH
// uc_side := 0 ;
73396: LD_ADDR_OWVAR 20
73400: PUSH
73401: LD_INT 0
73403: ST_TO_ADDR
// uc_nation := 0 ;
73404: LD_ADDR_OWVAR 21
73408: PUSH
73409: LD_INT 0
73411: ST_TO_ADDR
// hc_class := class_tiger ;
73412: LD_ADDR_OWVAR 28
73416: PUSH
73417: LD_INT 14
73419: ST_TO_ADDR
// hc_gallery :=  ;
73420: LD_ADDR_OWVAR 33
73424: PUSH
73425: LD_STRING 
73427: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73428: LD_ADDR_OWVAR 35
73432: PUSH
73433: LD_VAR 0 1
73437: NEG
73438: PPUSH
73439: LD_VAR 0 1
73443: PPUSH
73444: CALL_OW 12
73448: ST_TO_ADDR
// end ;
73449: LD_VAR 0 2
73453: RET
// export function PrepareEnchidna ( ) ; begin
73454: LD_INT 0
73456: PPUSH
// uc_side := 0 ;
73457: LD_ADDR_OWVAR 20
73461: PUSH
73462: LD_INT 0
73464: ST_TO_ADDR
// uc_nation := 0 ;
73465: LD_ADDR_OWVAR 21
73469: PUSH
73470: LD_INT 0
73472: ST_TO_ADDR
// hc_class := class_baggie ;
73473: LD_ADDR_OWVAR 28
73477: PUSH
73478: LD_INT 13
73480: ST_TO_ADDR
// hc_gallery :=  ;
73481: LD_ADDR_OWVAR 33
73485: PUSH
73486: LD_STRING 
73488: ST_TO_ADDR
// end ;
73489: LD_VAR 0 1
73493: RET
// export function PrepareFrog ( ) ; begin
73494: LD_INT 0
73496: PPUSH
// uc_side := 0 ;
73497: LD_ADDR_OWVAR 20
73501: PUSH
73502: LD_INT 0
73504: ST_TO_ADDR
// uc_nation := 0 ;
73505: LD_ADDR_OWVAR 21
73509: PUSH
73510: LD_INT 0
73512: ST_TO_ADDR
// hc_class := class_frog ;
73513: LD_ADDR_OWVAR 28
73517: PUSH
73518: LD_INT 19
73520: ST_TO_ADDR
// hc_gallery :=  ;
73521: LD_ADDR_OWVAR 33
73525: PUSH
73526: LD_STRING 
73528: ST_TO_ADDR
// end ;
73529: LD_VAR 0 1
73533: RET
// export function PrepareFish ( ) ; begin
73534: LD_INT 0
73536: PPUSH
// uc_side := 0 ;
73537: LD_ADDR_OWVAR 20
73541: PUSH
73542: LD_INT 0
73544: ST_TO_ADDR
// uc_nation := 0 ;
73545: LD_ADDR_OWVAR 21
73549: PUSH
73550: LD_INT 0
73552: ST_TO_ADDR
// hc_class := class_fish ;
73553: LD_ADDR_OWVAR 28
73557: PUSH
73558: LD_INT 20
73560: ST_TO_ADDR
// hc_gallery :=  ;
73561: LD_ADDR_OWVAR 33
73565: PUSH
73566: LD_STRING 
73568: ST_TO_ADDR
// end ;
73569: LD_VAR 0 1
73573: RET
// export function PrepareBird ( ) ; begin
73574: LD_INT 0
73576: PPUSH
// uc_side := 0 ;
73577: LD_ADDR_OWVAR 20
73581: PUSH
73582: LD_INT 0
73584: ST_TO_ADDR
// uc_nation := 0 ;
73585: LD_ADDR_OWVAR 21
73589: PUSH
73590: LD_INT 0
73592: ST_TO_ADDR
// hc_class := class_phororhacos ;
73593: LD_ADDR_OWVAR 28
73597: PUSH
73598: LD_INT 18
73600: ST_TO_ADDR
// hc_gallery :=  ;
73601: LD_ADDR_OWVAR 33
73605: PUSH
73606: LD_STRING 
73608: ST_TO_ADDR
// end ;
73609: LD_VAR 0 1
73613: RET
// export function PrepareHorse ( ) ; begin
73614: LD_INT 0
73616: PPUSH
// uc_side := 0 ;
73617: LD_ADDR_OWVAR 20
73621: PUSH
73622: LD_INT 0
73624: ST_TO_ADDR
// uc_nation := 0 ;
73625: LD_ADDR_OWVAR 21
73629: PUSH
73630: LD_INT 0
73632: ST_TO_ADDR
// hc_class := class_horse ;
73633: LD_ADDR_OWVAR 28
73637: PUSH
73638: LD_INT 21
73640: ST_TO_ADDR
// hc_gallery :=  ;
73641: LD_ADDR_OWVAR 33
73645: PUSH
73646: LD_STRING 
73648: ST_TO_ADDR
// end ;
73649: LD_VAR 0 1
73653: RET
// export function PrepareMastodont ( ) ; begin
73654: LD_INT 0
73656: PPUSH
// uc_side := 0 ;
73657: LD_ADDR_OWVAR 20
73661: PUSH
73662: LD_INT 0
73664: ST_TO_ADDR
// uc_nation := 0 ;
73665: LD_ADDR_OWVAR 21
73669: PUSH
73670: LD_INT 0
73672: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73673: LD_ADDR_OWVAR 37
73677: PUSH
73678: LD_INT 31
73680: ST_TO_ADDR
// vc_control := control_rider ;
73681: LD_ADDR_OWVAR 38
73685: PUSH
73686: LD_INT 4
73688: ST_TO_ADDR
// end ;
73689: LD_VAR 0 1
73693: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73694: LD_INT 0
73696: PPUSH
73697: PPUSH
73698: PPUSH
// uc_side = 0 ;
73699: LD_ADDR_OWVAR 20
73703: PUSH
73704: LD_INT 0
73706: ST_TO_ADDR
// uc_nation = 0 ;
73707: LD_ADDR_OWVAR 21
73711: PUSH
73712: LD_INT 0
73714: ST_TO_ADDR
// InitHc_All ( ) ;
73715: CALL_OW 584
// InitVc ;
73719: CALL_OW 20
// if mastodonts then
73723: LD_VAR 0 6
73727: IFFALSE 73794
// for i = 1 to mastodonts do
73729: LD_ADDR_VAR 0 11
73733: PUSH
73734: DOUBLE
73735: LD_INT 1
73737: DEC
73738: ST_TO_ADDR
73739: LD_VAR 0 6
73743: PUSH
73744: FOR_TO
73745: IFFALSE 73792
// begin vc_chassis := 31 ;
73747: LD_ADDR_OWVAR 37
73751: PUSH
73752: LD_INT 31
73754: ST_TO_ADDR
// vc_control := control_rider ;
73755: LD_ADDR_OWVAR 38
73759: PUSH
73760: LD_INT 4
73762: ST_TO_ADDR
// animal := CreateVehicle ;
73763: LD_ADDR_VAR 0 12
73767: PUSH
73768: CALL_OW 45
73772: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73773: LD_VAR 0 12
73777: PPUSH
73778: LD_VAR 0 8
73782: PPUSH
73783: LD_INT 0
73785: PPUSH
73786: CALL 75929 0 3
// end ;
73790: GO 73744
73792: POP
73793: POP
// if horses then
73794: LD_VAR 0 5
73798: IFFALSE 73865
// for i = 1 to horses do
73800: LD_ADDR_VAR 0 11
73804: PUSH
73805: DOUBLE
73806: LD_INT 1
73808: DEC
73809: ST_TO_ADDR
73810: LD_VAR 0 5
73814: PUSH
73815: FOR_TO
73816: IFFALSE 73863
// begin hc_class := 21 ;
73818: LD_ADDR_OWVAR 28
73822: PUSH
73823: LD_INT 21
73825: ST_TO_ADDR
// hc_gallery :=  ;
73826: LD_ADDR_OWVAR 33
73830: PUSH
73831: LD_STRING 
73833: ST_TO_ADDR
// animal := CreateHuman ;
73834: LD_ADDR_VAR 0 12
73838: PUSH
73839: CALL_OW 44
73843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73844: LD_VAR 0 12
73848: PPUSH
73849: LD_VAR 0 8
73853: PPUSH
73854: LD_INT 0
73856: PPUSH
73857: CALL 75929 0 3
// end ;
73861: GO 73815
73863: POP
73864: POP
// if birds then
73865: LD_VAR 0 1
73869: IFFALSE 73936
// for i = 1 to birds do
73871: LD_ADDR_VAR 0 11
73875: PUSH
73876: DOUBLE
73877: LD_INT 1
73879: DEC
73880: ST_TO_ADDR
73881: LD_VAR 0 1
73885: PUSH
73886: FOR_TO
73887: IFFALSE 73934
// begin hc_class = 18 ;
73889: LD_ADDR_OWVAR 28
73893: PUSH
73894: LD_INT 18
73896: ST_TO_ADDR
// hc_gallery =  ;
73897: LD_ADDR_OWVAR 33
73901: PUSH
73902: LD_STRING 
73904: ST_TO_ADDR
// animal := CreateHuman ;
73905: LD_ADDR_VAR 0 12
73909: PUSH
73910: CALL_OW 44
73914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73915: LD_VAR 0 12
73919: PPUSH
73920: LD_VAR 0 8
73924: PPUSH
73925: LD_INT 0
73927: PPUSH
73928: CALL 75929 0 3
// end ;
73932: GO 73886
73934: POP
73935: POP
// if tigers then
73936: LD_VAR 0 2
73940: IFFALSE 74024
// for i = 1 to tigers do
73942: LD_ADDR_VAR 0 11
73946: PUSH
73947: DOUBLE
73948: LD_INT 1
73950: DEC
73951: ST_TO_ADDR
73952: LD_VAR 0 2
73956: PUSH
73957: FOR_TO
73958: IFFALSE 74022
// begin hc_class = class_tiger ;
73960: LD_ADDR_OWVAR 28
73964: PUSH
73965: LD_INT 14
73967: ST_TO_ADDR
// hc_gallery =  ;
73968: LD_ADDR_OWVAR 33
73972: PUSH
73973: LD_STRING 
73975: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73976: LD_ADDR_OWVAR 35
73980: PUSH
73981: LD_INT 7
73983: NEG
73984: PPUSH
73985: LD_INT 7
73987: PPUSH
73988: CALL_OW 12
73992: ST_TO_ADDR
// animal := CreateHuman ;
73993: LD_ADDR_VAR 0 12
73997: PUSH
73998: CALL_OW 44
74002: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74003: LD_VAR 0 12
74007: PPUSH
74008: LD_VAR 0 8
74012: PPUSH
74013: LD_INT 0
74015: PPUSH
74016: CALL 75929 0 3
// end ;
74020: GO 73957
74022: POP
74023: POP
// if apemans then
74024: LD_VAR 0 3
74028: IFFALSE 74151
// for i = 1 to apemans do
74030: LD_ADDR_VAR 0 11
74034: PUSH
74035: DOUBLE
74036: LD_INT 1
74038: DEC
74039: ST_TO_ADDR
74040: LD_VAR 0 3
74044: PUSH
74045: FOR_TO
74046: IFFALSE 74149
// begin hc_class = class_apeman ;
74048: LD_ADDR_OWVAR 28
74052: PUSH
74053: LD_INT 12
74055: ST_TO_ADDR
// hc_gallery =  ;
74056: LD_ADDR_OWVAR 33
74060: PUSH
74061: LD_STRING 
74063: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74064: LD_ADDR_OWVAR 35
74068: PUSH
74069: LD_INT 2
74071: NEG
74072: PPUSH
74073: LD_INT 2
74075: PPUSH
74076: CALL_OW 12
74080: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74081: LD_ADDR_OWVAR 31
74085: PUSH
74086: LD_INT 1
74088: PPUSH
74089: LD_INT 3
74091: PPUSH
74092: CALL_OW 12
74096: PUSH
74097: LD_INT 1
74099: PPUSH
74100: LD_INT 3
74102: PPUSH
74103: CALL_OW 12
74107: PUSH
74108: LD_INT 0
74110: PUSH
74111: LD_INT 0
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: ST_TO_ADDR
// animal := CreateHuman ;
74120: LD_ADDR_VAR 0 12
74124: PUSH
74125: CALL_OW 44
74129: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74130: LD_VAR 0 12
74134: PPUSH
74135: LD_VAR 0 8
74139: PPUSH
74140: LD_INT 0
74142: PPUSH
74143: CALL 75929 0 3
// end ;
74147: GO 74045
74149: POP
74150: POP
// if enchidnas then
74151: LD_VAR 0 4
74155: IFFALSE 74222
// for i = 1 to enchidnas do
74157: LD_ADDR_VAR 0 11
74161: PUSH
74162: DOUBLE
74163: LD_INT 1
74165: DEC
74166: ST_TO_ADDR
74167: LD_VAR 0 4
74171: PUSH
74172: FOR_TO
74173: IFFALSE 74220
// begin hc_class = 13 ;
74175: LD_ADDR_OWVAR 28
74179: PUSH
74180: LD_INT 13
74182: ST_TO_ADDR
// hc_gallery =  ;
74183: LD_ADDR_OWVAR 33
74187: PUSH
74188: LD_STRING 
74190: ST_TO_ADDR
// animal := CreateHuman ;
74191: LD_ADDR_VAR 0 12
74195: PUSH
74196: CALL_OW 44
74200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74201: LD_VAR 0 12
74205: PPUSH
74206: LD_VAR 0 8
74210: PPUSH
74211: LD_INT 0
74213: PPUSH
74214: CALL 75929 0 3
// end ;
74218: GO 74172
74220: POP
74221: POP
// if fishes then
74222: LD_VAR 0 7
74226: IFFALSE 74293
// for i = 1 to fishes do
74228: LD_ADDR_VAR 0 11
74232: PUSH
74233: DOUBLE
74234: LD_INT 1
74236: DEC
74237: ST_TO_ADDR
74238: LD_VAR 0 7
74242: PUSH
74243: FOR_TO
74244: IFFALSE 74291
// begin hc_class = 20 ;
74246: LD_ADDR_OWVAR 28
74250: PUSH
74251: LD_INT 20
74253: ST_TO_ADDR
// hc_gallery =  ;
74254: LD_ADDR_OWVAR 33
74258: PUSH
74259: LD_STRING 
74261: ST_TO_ADDR
// animal := CreateHuman ;
74262: LD_ADDR_VAR 0 12
74266: PUSH
74267: CALL_OW 44
74271: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74272: LD_VAR 0 12
74276: PPUSH
74277: LD_VAR 0 9
74281: PPUSH
74282: LD_INT 0
74284: PPUSH
74285: CALL 75929 0 3
// end ;
74289: GO 74243
74291: POP
74292: POP
// end ;
74293: LD_VAR 0 10
74297: RET
// export function WantHeal ( sci , unit ) ; begin
74298: LD_INT 0
74300: PPUSH
// if GetTaskList ( sci ) > 0 then
74301: LD_VAR 0 1
74305: PPUSH
74306: CALL_OW 437
74310: PUSH
74311: LD_INT 0
74313: GREATER
74314: IFFALSE 74384
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74316: LD_VAR 0 1
74320: PPUSH
74321: CALL_OW 437
74325: PUSH
74326: LD_INT 1
74328: ARRAY
74329: PUSH
74330: LD_INT 1
74332: ARRAY
74333: PUSH
74334: LD_STRING l
74336: EQUAL
74337: PUSH
74338: LD_VAR 0 1
74342: PPUSH
74343: CALL_OW 437
74347: PUSH
74348: LD_INT 1
74350: ARRAY
74351: PUSH
74352: LD_INT 4
74354: ARRAY
74355: PUSH
74356: LD_VAR 0 2
74360: EQUAL
74361: AND
74362: IFFALSE 74374
// result := true else
74364: LD_ADDR_VAR 0 3
74368: PUSH
74369: LD_INT 1
74371: ST_TO_ADDR
74372: GO 74382
// result := false ;
74374: LD_ADDR_VAR 0 3
74378: PUSH
74379: LD_INT 0
74381: ST_TO_ADDR
// end else
74382: GO 74392
// result := false ;
74384: LD_ADDR_VAR 0 3
74388: PUSH
74389: LD_INT 0
74391: ST_TO_ADDR
// end ;
74392: LD_VAR 0 3
74396: RET
// export function HealTarget ( sci ) ; begin
74397: LD_INT 0
74399: PPUSH
// if not sci then
74400: LD_VAR 0 1
74404: NOT
74405: IFFALSE 74409
// exit ;
74407: GO 74474
// result := 0 ;
74409: LD_ADDR_VAR 0 2
74413: PUSH
74414: LD_INT 0
74416: ST_TO_ADDR
// if GetTaskList ( sci ) then
74417: LD_VAR 0 1
74421: PPUSH
74422: CALL_OW 437
74426: IFFALSE 74474
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74428: LD_VAR 0 1
74432: PPUSH
74433: CALL_OW 437
74437: PUSH
74438: LD_INT 1
74440: ARRAY
74441: PUSH
74442: LD_INT 1
74444: ARRAY
74445: PUSH
74446: LD_STRING l
74448: EQUAL
74449: IFFALSE 74474
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74451: LD_ADDR_VAR 0 2
74455: PUSH
74456: LD_VAR 0 1
74460: PPUSH
74461: CALL_OW 437
74465: PUSH
74466: LD_INT 1
74468: ARRAY
74469: PUSH
74470: LD_INT 4
74472: ARRAY
74473: ST_TO_ADDR
// end ;
74474: LD_VAR 0 2
74478: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74479: LD_INT 0
74481: PPUSH
74482: PPUSH
74483: PPUSH
74484: PPUSH
// if not base_units then
74485: LD_VAR 0 1
74489: NOT
74490: IFFALSE 74494
// exit ;
74492: GO 74581
// result := false ;
74494: LD_ADDR_VAR 0 2
74498: PUSH
74499: LD_INT 0
74501: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74502: LD_ADDR_VAR 0 5
74506: PUSH
74507: LD_VAR 0 1
74511: PPUSH
74512: LD_INT 21
74514: PUSH
74515: LD_INT 3
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: PPUSH
74522: CALL_OW 72
74526: ST_TO_ADDR
// if not tmp then
74527: LD_VAR 0 5
74531: NOT
74532: IFFALSE 74536
// exit ;
74534: GO 74581
// for i in tmp do
74536: LD_ADDR_VAR 0 3
74540: PUSH
74541: LD_VAR 0 5
74545: PUSH
74546: FOR_IN
74547: IFFALSE 74579
// begin result := EnemyInRange ( i , 22 ) ;
74549: LD_ADDR_VAR 0 2
74553: PUSH
74554: LD_VAR 0 3
74558: PPUSH
74559: LD_INT 22
74561: PPUSH
74562: CALL 72267 0 2
74566: ST_TO_ADDR
// if result then
74567: LD_VAR 0 2
74571: IFFALSE 74577
// exit ;
74573: POP
74574: POP
74575: GO 74581
// end ;
74577: GO 74546
74579: POP
74580: POP
// end ;
74581: LD_VAR 0 2
74585: RET
// export function FilterByTag ( units , tag ) ; begin
74586: LD_INT 0
74588: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74589: LD_ADDR_VAR 0 3
74593: PUSH
74594: LD_VAR 0 1
74598: PPUSH
74599: LD_INT 120
74601: PUSH
74602: LD_VAR 0 2
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PPUSH
74611: CALL_OW 72
74615: ST_TO_ADDR
// end ;
74616: LD_VAR 0 3
74620: RET
// export function IsDriver ( un ) ; begin
74621: LD_INT 0
74623: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74624: LD_ADDR_VAR 0 2
74628: PUSH
74629: LD_VAR 0 1
74633: PUSH
74634: LD_INT 55
74636: PUSH
74637: EMPTY
74638: LIST
74639: PPUSH
74640: CALL_OW 69
74644: IN
74645: ST_TO_ADDR
// end ;
74646: LD_VAR 0 2
74650: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74651: LD_INT 0
74653: PPUSH
74654: PPUSH
// list := [ ] ;
74655: LD_ADDR_VAR 0 5
74659: PUSH
74660: EMPTY
74661: ST_TO_ADDR
// case d of 0 :
74662: LD_VAR 0 3
74666: PUSH
74667: LD_INT 0
74669: DOUBLE
74670: EQUAL
74671: IFTRUE 74675
74673: GO 74808
74675: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74676: LD_ADDR_VAR 0 5
74680: PUSH
74681: LD_VAR 0 1
74685: PUSH
74686: LD_INT 4
74688: MINUS
74689: PUSH
74690: LD_VAR 0 2
74694: PUSH
74695: LD_INT 4
74697: MINUS
74698: PUSH
74699: LD_INT 2
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: LIST
74706: PUSH
74707: LD_VAR 0 1
74711: PUSH
74712: LD_INT 3
74714: MINUS
74715: PUSH
74716: LD_VAR 0 2
74720: PUSH
74721: LD_INT 1
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: LIST
74728: PUSH
74729: LD_VAR 0 1
74733: PUSH
74734: LD_INT 4
74736: PLUS
74737: PUSH
74738: LD_VAR 0 2
74742: PUSH
74743: LD_INT 4
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: LIST
74750: PUSH
74751: LD_VAR 0 1
74755: PUSH
74756: LD_INT 3
74758: PLUS
74759: PUSH
74760: LD_VAR 0 2
74764: PUSH
74765: LD_INT 3
74767: PLUS
74768: PUSH
74769: LD_INT 5
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: LIST
74776: PUSH
74777: LD_VAR 0 1
74781: PUSH
74782: LD_VAR 0 2
74786: PUSH
74787: LD_INT 4
74789: PLUS
74790: PUSH
74791: LD_INT 0
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: LIST
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: ST_TO_ADDR
// end ; 1 :
74806: GO 75506
74808: LD_INT 1
74810: DOUBLE
74811: EQUAL
74812: IFTRUE 74816
74814: GO 74949
74816: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74817: LD_ADDR_VAR 0 5
74821: PUSH
74822: LD_VAR 0 1
74826: PUSH
74827: LD_VAR 0 2
74831: PUSH
74832: LD_INT 4
74834: MINUS
74835: PUSH
74836: LD_INT 3
74838: PUSH
74839: EMPTY
74840: LIST
74841: LIST
74842: LIST
74843: PUSH
74844: LD_VAR 0 1
74848: PUSH
74849: LD_INT 3
74851: MINUS
74852: PUSH
74853: LD_VAR 0 2
74857: PUSH
74858: LD_INT 3
74860: MINUS
74861: PUSH
74862: LD_INT 2
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: LIST
74869: PUSH
74870: LD_VAR 0 1
74874: PUSH
74875: LD_INT 4
74877: MINUS
74878: PUSH
74879: LD_VAR 0 2
74883: PUSH
74884: LD_INT 1
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: LIST
74891: PUSH
74892: LD_VAR 0 1
74896: PUSH
74897: LD_VAR 0 2
74901: PUSH
74902: LD_INT 3
74904: PLUS
74905: PUSH
74906: LD_INT 0
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: LIST
74913: PUSH
74914: LD_VAR 0 1
74918: PUSH
74919: LD_INT 4
74921: PLUS
74922: PUSH
74923: LD_VAR 0 2
74927: PUSH
74928: LD_INT 4
74930: PLUS
74931: PUSH
74932: LD_INT 5
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: LIST
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: ST_TO_ADDR
// end ; 2 :
74947: GO 75506
74949: LD_INT 2
74951: DOUBLE
74952: EQUAL
74953: IFTRUE 74957
74955: GO 75086
74957: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74958: LD_ADDR_VAR 0 5
74962: PUSH
74963: LD_VAR 0 1
74967: PUSH
74968: LD_VAR 0 2
74972: PUSH
74973: LD_INT 3
74975: MINUS
74976: PUSH
74977: LD_INT 3
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: LIST
74984: PUSH
74985: LD_VAR 0 1
74989: PUSH
74990: LD_INT 4
74992: PLUS
74993: PUSH
74994: LD_VAR 0 2
74998: PUSH
74999: LD_INT 4
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: LIST
75006: PUSH
75007: LD_VAR 0 1
75011: PUSH
75012: LD_VAR 0 2
75016: PUSH
75017: LD_INT 4
75019: PLUS
75020: PUSH
75021: LD_INT 0
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: LIST
75028: PUSH
75029: LD_VAR 0 1
75033: PUSH
75034: LD_INT 3
75036: MINUS
75037: PUSH
75038: LD_VAR 0 2
75042: PUSH
75043: LD_INT 1
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: LIST
75050: PUSH
75051: LD_VAR 0 1
75055: PUSH
75056: LD_INT 4
75058: MINUS
75059: PUSH
75060: LD_VAR 0 2
75064: PUSH
75065: LD_INT 4
75067: MINUS
75068: PUSH
75069: LD_INT 2
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: LIST
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: ST_TO_ADDR
// end ; 3 :
75084: GO 75506
75086: LD_INT 3
75088: DOUBLE
75089: EQUAL
75090: IFTRUE 75094
75092: GO 75227
75094: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75095: LD_ADDR_VAR 0 5
75099: PUSH
75100: LD_VAR 0 1
75104: PUSH
75105: LD_INT 3
75107: PLUS
75108: PUSH
75109: LD_VAR 0 2
75113: PUSH
75114: LD_INT 4
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: LIST
75121: PUSH
75122: LD_VAR 0 1
75126: PUSH
75127: LD_INT 4
75129: PLUS
75130: PUSH
75131: LD_VAR 0 2
75135: PUSH
75136: LD_INT 4
75138: PLUS
75139: PUSH
75140: LD_INT 5
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: LIST
75147: PUSH
75148: LD_VAR 0 1
75152: PUSH
75153: LD_INT 4
75155: MINUS
75156: PUSH
75157: LD_VAR 0 2
75161: PUSH
75162: LD_INT 1
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: LIST
75169: PUSH
75170: LD_VAR 0 1
75174: PUSH
75175: LD_VAR 0 2
75179: PUSH
75180: LD_INT 4
75182: MINUS
75183: PUSH
75184: LD_INT 3
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: LIST
75191: PUSH
75192: LD_VAR 0 1
75196: PUSH
75197: LD_INT 3
75199: MINUS
75200: PUSH
75201: LD_VAR 0 2
75205: PUSH
75206: LD_INT 3
75208: MINUS
75209: PUSH
75210: LD_INT 2
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: LIST
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: ST_TO_ADDR
// end ; 4 :
75225: GO 75506
75227: LD_INT 4
75229: DOUBLE
75230: EQUAL
75231: IFTRUE 75235
75233: GO 75368
75235: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75236: LD_ADDR_VAR 0 5
75240: PUSH
75241: LD_VAR 0 1
75245: PUSH
75246: LD_VAR 0 2
75250: PUSH
75251: LD_INT 4
75253: PLUS
75254: PUSH
75255: LD_INT 0
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: LIST
75262: PUSH
75263: LD_VAR 0 1
75267: PUSH
75268: LD_INT 3
75270: PLUS
75271: PUSH
75272: LD_VAR 0 2
75276: PUSH
75277: LD_INT 3
75279: PLUS
75280: PUSH
75281: LD_INT 5
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: LIST
75288: PUSH
75289: LD_VAR 0 1
75293: PUSH
75294: LD_INT 4
75296: PLUS
75297: PUSH
75298: LD_VAR 0 2
75302: PUSH
75303: LD_INT 4
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: LIST
75310: PUSH
75311: LD_VAR 0 1
75315: PUSH
75316: LD_VAR 0 2
75320: PUSH
75321: LD_INT 3
75323: MINUS
75324: PUSH
75325: LD_INT 3
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: LIST
75332: PUSH
75333: LD_VAR 0 1
75337: PUSH
75338: LD_INT 4
75340: MINUS
75341: PUSH
75342: LD_VAR 0 2
75346: PUSH
75347: LD_INT 4
75349: MINUS
75350: PUSH
75351: LD_INT 2
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: LIST
75358: PUSH
75359: EMPTY
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: ST_TO_ADDR
// end ; 5 :
75366: GO 75506
75368: LD_INT 5
75370: DOUBLE
75371: EQUAL
75372: IFTRUE 75376
75374: GO 75505
75376: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75377: LD_ADDR_VAR 0 5
75381: PUSH
75382: LD_VAR 0 1
75386: PUSH
75387: LD_INT 4
75389: MINUS
75390: PUSH
75391: LD_VAR 0 2
75395: PUSH
75396: LD_INT 1
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: LIST
75403: PUSH
75404: LD_VAR 0 1
75408: PUSH
75409: LD_VAR 0 2
75413: PUSH
75414: LD_INT 4
75416: MINUS
75417: PUSH
75418: LD_INT 3
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: LIST
75425: PUSH
75426: LD_VAR 0 1
75430: PUSH
75431: LD_INT 4
75433: PLUS
75434: PUSH
75435: LD_VAR 0 2
75439: PUSH
75440: LD_INT 4
75442: PLUS
75443: PUSH
75444: LD_INT 5
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: LIST
75451: PUSH
75452: LD_VAR 0 1
75456: PUSH
75457: LD_INT 3
75459: PLUS
75460: PUSH
75461: LD_VAR 0 2
75465: PUSH
75466: LD_INT 4
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: LIST
75473: PUSH
75474: LD_VAR 0 1
75478: PUSH
75479: LD_VAR 0 2
75483: PUSH
75484: LD_INT 3
75486: PLUS
75487: PUSH
75488: LD_INT 0
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: LIST
75495: PUSH
75496: EMPTY
75497: LIST
75498: LIST
75499: LIST
75500: LIST
75501: LIST
75502: ST_TO_ADDR
// end ; end ;
75503: GO 75506
75505: POP
// result := list ;
75506: LD_ADDR_VAR 0 4
75510: PUSH
75511: LD_VAR 0 5
75515: ST_TO_ADDR
// end ;
75516: LD_VAR 0 4
75520: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75521: LD_INT 0
75523: PPUSH
75524: PPUSH
75525: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75526: LD_VAR 0 1
75530: NOT
75531: PUSH
75532: LD_VAR 0 2
75536: PUSH
75537: LD_INT 1
75539: PUSH
75540: LD_INT 2
75542: PUSH
75543: LD_INT 3
75545: PUSH
75546: LD_INT 4
75548: PUSH
75549: EMPTY
75550: LIST
75551: LIST
75552: LIST
75553: LIST
75554: IN
75555: NOT
75556: OR
75557: IFFALSE 75561
// exit ;
75559: GO 75653
// tmp := [ ] ;
75561: LD_ADDR_VAR 0 5
75565: PUSH
75566: EMPTY
75567: ST_TO_ADDR
// for i in units do
75568: LD_ADDR_VAR 0 4
75572: PUSH
75573: LD_VAR 0 1
75577: PUSH
75578: FOR_IN
75579: IFFALSE 75622
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75581: LD_ADDR_VAR 0 5
75585: PUSH
75586: LD_VAR 0 5
75590: PPUSH
75591: LD_VAR 0 5
75595: PUSH
75596: LD_INT 1
75598: PLUS
75599: PPUSH
75600: LD_VAR 0 4
75604: PPUSH
75605: LD_VAR 0 2
75609: PPUSH
75610: CALL_OW 259
75614: PPUSH
75615: CALL_OW 2
75619: ST_TO_ADDR
75620: GO 75578
75622: POP
75623: POP
// if not tmp then
75624: LD_VAR 0 5
75628: NOT
75629: IFFALSE 75633
// exit ;
75631: GO 75653
// result := SortListByListDesc ( units , tmp ) ;
75633: LD_ADDR_VAR 0 3
75637: PUSH
75638: LD_VAR 0 1
75642: PPUSH
75643: LD_VAR 0 5
75647: PPUSH
75648: CALL_OW 77
75652: ST_TO_ADDR
// end ;
75653: LD_VAR 0 3
75657: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75658: LD_INT 0
75660: PPUSH
75661: PPUSH
75662: PPUSH
// result := false ;
75663: LD_ADDR_VAR 0 3
75667: PUSH
75668: LD_INT 0
75670: ST_TO_ADDR
// x := GetX ( building ) ;
75671: LD_ADDR_VAR 0 4
75675: PUSH
75676: LD_VAR 0 2
75680: PPUSH
75681: CALL_OW 250
75685: ST_TO_ADDR
// y := GetY ( building ) ;
75686: LD_ADDR_VAR 0 5
75690: PUSH
75691: LD_VAR 0 2
75695: PPUSH
75696: CALL_OW 251
75700: ST_TO_ADDR
// if not building or not x or not y then
75701: LD_VAR 0 2
75705: NOT
75706: PUSH
75707: LD_VAR 0 4
75711: NOT
75712: OR
75713: PUSH
75714: LD_VAR 0 5
75718: NOT
75719: OR
75720: IFFALSE 75724
// exit ;
75722: GO 75816
// if GetTaskList ( unit ) then
75724: LD_VAR 0 1
75728: PPUSH
75729: CALL_OW 437
75733: IFFALSE 75816
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75735: LD_STRING e
75737: PUSH
75738: LD_VAR 0 1
75742: PPUSH
75743: CALL_OW 437
75747: PUSH
75748: LD_INT 1
75750: ARRAY
75751: PUSH
75752: LD_INT 1
75754: ARRAY
75755: EQUAL
75756: PUSH
75757: LD_VAR 0 4
75761: PUSH
75762: LD_VAR 0 1
75766: PPUSH
75767: CALL_OW 437
75771: PUSH
75772: LD_INT 1
75774: ARRAY
75775: PUSH
75776: LD_INT 2
75778: ARRAY
75779: EQUAL
75780: AND
75781: PUSH
75782: LD_VAR 0 5
75786: PUSH
75787: LD_VAR 0 1
75791: PPUSH
75792: CALL_OW 437
75796: PUSH
75797: LD_INT 1
75799: ARRAY
75800: PUSH
75801: LD_INT 3
75803: ARRAY
75804: EQUAL
75805: AND
75806: IFFALSE 75816
// result := true end ;
75808: LD_ADDR_VAR 0 3
75812: PUSH
75813: LD_INT 1
75815: ST_TO_ADDR
// end ;
75816: LD_VAR 0 3
75820: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75821: LD_INT 0
75823: PPUSH
// result := false ;
75824: LD_ADDR_VAR 0 4
75828: PUSH
75829: LD_INT 0
75831: ST_TO_ADDR
// if GetTaskList ( unit ) then
75832: LD_VAR 0 1
75836: PPUSH
75837: CALL_OW 437
75841: IFFALSE 75924
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75843: LD_STRING M
75845: PUSH
75846: LD_VAR 0 1
75850: PPUSH
75851: CALL_OW 437
75855: PUSH
75856: LD_INT 1
75858: ARRAY
75859: PUSH
75860: LD_INT 1
75862: ARRAY
75863: EQUAL
75864: PUSH
75865: LD_VAR 0 2
75869: PUSH
75870: LD_VAR 0 1
75874: PPUSH
75875: CALL_OW 437
75879: PUSH
75880: LD_INT 1
75882: ARRAY
75883: PUSH
75884: LD_INT 2
75886: ARRAY
75887: EQUAL
75888: AND
75889: PUSH
75890: LD_VAR 0 3
75894: PUSH
75895: LD_VAR 0 1
75899: PPUSH
75900: CALL_OW 437
75904: PUSH
75905: LD_INT 1
75907: ARRAY
75908: PUSH
75909: LD_INT 3
75911: ARRAY
75912: EQUAL
75913: AND
75914: IFFALSE 75924
// result := true ;
75916: LD_ADDR_VAR 0 4
75920: PUSH
75921: LD_INT 1
75923: ST_TO_ADDR
// end ; end ;
75924: LD_VAR 0 4
75928: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75929: LD_INT 0
75931: PPUSH
75932: PPUSH
75933: PPUSH
75934: PPUSH
// if not unit or not area then
75935: LD_VAR 0 1
75939: NOT
75940: PUSH
75941: LD_VAR 0 2
75945: NOT
75946: OR
75947: IFFALSE 75951
// exit ;
75949: GO 76115
// tmp := AreaToList ( area , i ) ;
75951: LD_ADDR_VAR 0 6
75955: PUSH
75956: LD_VAR 0 2
75960: PPUSH
75961: LD_VAR 0 5
75965: PPUSH
75966: CALL_OW 517
75970: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75971: LD_ADDR_VAR 0 5
75975: PUSH
75976: DOUBLE
75977: LD_INT 1
75979: DEC
75980: ST_TO_ADDR
75981: LD_VAR 0 6
75985: PUSH
75986: LD_INT 1
75988: ARRAY
75989: PUSH
75990: FOR_TO
75991: IFFALSE 76113
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75993: LD_ADDR_VAR 0 7
75997: PUSH
75998: LD_VAR 0 6
76002: PUSH
76003: LD_INT 1
76005: ARRAY
76006: PUSH
76007: LD_VAR 0 5
76011: ARRAY
76012: PUSH
76013: LD_VAR 0 6
76017: PUSH
76018: LD_INT 2
76020: ARRAY
76021: PUSH
76022: LD_VAR 0 5
76026: ARRAY
76027: PUSH
76028: EMPTY
76029: LIST
76030: LIST
76031: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76032: LD_VAR 0 7
76036: PUSH
76037: LD_INT 1
76039: ARRAY
76040: PPUSH
76041: LD_VAR 0 7
76045: PUSH
76046: LD_INT 2
76048: ARRAY
76049: PPUSH
76050: CALL_OW 428
76054: PUSH
76055: LD_INT 0
76057: EQUAL
76058: IFFALSE 76111
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76060: LD_VAR 0 1
76064: PPUSH
76065: LD_VAR 0 7
76069: PUSH
76070: LD_INT 1
76072: ARRAY
76073: PPUSH
76074: LD_VAR 0 7
76078: PUSH
76079: LD_INT 2
76081: ARRAY
76082: PPUSH
76083: LD_VAR 0 3
76087: PPUSH
76088: CALL_OW 48
// result := IsPlaced ( unit ) ;
76092: LD_ADDR_VAR 0 4
76096: PUSH
76097: LD_VAR 0 1
76101: PPUSH
76102: CALL_OW 305
76106: ST_TO_ADDR
// exit ;
76107: POP
76108: POP
76109: GO 76115
// end ; end ;
76111: GO 75990
76113: POP
76114: POP
// end ;
76115: LD_VAR 0 4
76119: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76120: LD_INT 0
76122: PPUSH
76123: PPUSH
76124: PPUSH
// if not side or side > 8 then
76125: LD_VAR 0 1
76129: NOT
76130: PUSH
76131: LD_VAR 0 1
76135: PUSH
76136: LD_INT 8
76138: GREATER
76139: OR
76140: IFFALSE 76144
// exit ;
76142: GO 76331
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76144: LD_ADDR_VAR 0 4
76148: PUSH
76149: LD_INT 22
76151: PUSH
76152: LD_VAR 0 1
76156: PUSH
76157: EMPTY
76158: LIST
76159: LIST
76160: PUSH
76161: LD_INT 21
76163: PUSH
76164: LD_INT 3
76166: PUSH
76167: EMPTY
76168: LIST
76169: LIST
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: PPUSH
76175: CALL_OW 69
76179: ST_TO_ADDR
// if not tmp then
76180: LD_VAR 0 4
76184: NOT
76185: IFFALSE 76189
// exit ;
76187: GO 76331
// enable_addtolog := true ;
76189: LD_ADDR_OWVAR 81
76193: PUSH
76194: LD_INT 1
76196: ST_TO_ADDR
// AddToLog ( [ ) ;
76197: LD_STRING [
76199: PPUSH
76200: CALL_OW 561
// for i in tmp do
76204: LD_ADDR_VAR 0 3
76208: PUSH
76209: LD_VAR 0 4
76213: PUSH
76214: FOR_IN
76215: IFFALSE 76322
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76217: LD_STRING [
76219: PUSH
76220: LD_VAR 0 3
76224: PPUSH
76225: CALL_OW 266
76229: STR
76230: PUSH
76231: LD_STRING , 
76233: STR
76234: PUSH
76235: LD_VAR 0 3
76239: PPUSH
76240: CALL_OW 250
76244: STR
76245: PUSH
76246: LD_STRING , 
76248: STR
76249: PUSH
76250: LD_VAR 0 3
76254: PPUSH
76255: CALL_OW 251
76259: STR
76260: PUSH
76261: LD_STRING , 
76263: STR
76264: PUSH
76265: LD_VAR 0 3
76269: PPUSH
76270: CALL_OW 254
76274: STR
76275: PUSH
76276: LD_STRING , 
76278: STR
76279: PUSH
76280: LD_VAR 0 3
76284: PPUSH
76285: LD_INT 1
76287: PPUSH
76288: CALL_OW 268
76292: STR
76293: PUSH
76294: LD_STRING , 
76296: STR
76297: PUSH
76298: LD_VAR 0 3
76302: PPUSH
76303: LD_INT 2
76305: PPUSH
76306: CALL_OW 268
76310: STR
76311: PUSH
76312: LD_STRING ],
76314: STR
76315: PPUSH
76316: CALL_OW 561
// end ;
76320: GO 76214
76322: POP
76323: POP
// AddToLog ( ]; ) ;
76324: LD_STRING ];
76326: PPUSH
76327: CALL_OW 561
// end ;
76331: LD_VAR 0 2
76335: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76336: LD_INT 0
76338: PPUSH
76339: PPUSH
76340: PPUSH
76341: PPUSH
76342: PPUSH
// if not area or not rate or not max then
76343: LD_VAR 0 1
76347: NOT
76348: PUSH
76349: LD_VAR 0 2
76353: NOT
76354: OR
76355: PUSH
76356: LD_VAR 0 4
76360: NOT
76361: OR
76362: IFFALSE 76366
// exit ;
76364: GO 76555
// while 1 do
76366: LD_INT 1
76368: IFFALSE 76555
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76370: LD_ADDR_VAR 0 9
76374: PUSH
76375: LD_VAR 0 1
76379: PPUSH
76380: LD_INT 1
76382: PPUSH
76383: CALL_OW 287
76387: PUSH
76388: LD_INT 10
76390: MUL
76391: ST_TO_ADDR
// r := rate / 10 ;
76392: LD_ADDR_VAR 0 7
76396: PUSH
76397: LD_VAR 0 2
76401: PUSH
76402: LD_INT 10
76404: DIVREAL
76405: ST_TO_ADDR
// time := 1 1$00 ;
76406: LD_ADDR_VAR 0 8
76410: PUSH
76411: LD_INT 2100
76413: ST_TO_ADDR
// if amount < min then
76414: LD_VAR 0 9
76418: PUSH
76419: LD_VAR 0 3
76423: LESS
76424: IFFALSE 76442
// r := r * 2 else
76426: LD_ADDR_VAR 0 7
76430: PUSH
76431: LD_VAR 0 7
76435: PUSH
76436: LD_INT 2
76438: MUL
76439: ST_TO_ADDR
76440: GO 76468
// if amount > max then
76442: LD_VAR 0 9
76446: PUSH
76447: LD_VAR 0 4
76451: GREATER
76452: IFFALSE 76468
// r := r / 2 ;
76454: LD_ADDR_VAR 0 7
76458: PUSH
76459: LD_VAR 0 7
76463: PUSH
76464: LD_INT 2
76466: DIVREAL
76467: ST_TO_ADDR
// time := time / r ;
76468: LD_ADDR_VAR 0 8
76472: PUSH
76473: LD_VAR 0 8
76477: PUSH
76478: LD_VAR 0 7
76482: DIVREAL
76483: ST_TO_ADDR
// if time < 0 then
76484: LD_VAR 0 8
76488: PUSH
76489: LD_INT 0
76491: LESS
76492: IFFALSE 76509
// time := time * - 1 ;
76494: LD_ADDR_VAR 0 8
76498: PUSH
76499: LD_VAR 0 8
76503: PUSH
76504: LD_INT 1
76506: NEG
76507: MUL
76508: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76509: LD_VAR 0 8
76513: PUSH
76514: LD_INT 35
76516: PPUSH
76517: LD_INT 875
76519: PPUSH
76520: CALL_OW 12
76524: PLUS
76525: PPUSH
76526: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76530: LD_INT 1
76532: PPUSH
76533: LD_INT 5
76535: PPUSH
76536: CALL_OW 12
76540: PPUSH
76541: LD_VAR 0 1
76545: PPUSH
76546: LD_INT 1
76548: PPUSH
76549: CALL_OW 55
// end ;
76553: GO 76366
// end ;
76555: LD_VAR 0 5
76559: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76560: LD_INT 0
76562: PPUSH
76563: PPUSH
76564: PPUSH
76565: PPUSH
76566: PPUSH
76567: PPUSH
76568: PPUSH
76569: PPUSH
// if not turrets or not factories then
76570: LD_VAR 0 1
76574: NOT
76575: PUSH
76576: LD_VAR 0 2
76580: NOT
76581: OR
76582: IFFALSE 76586
// exit ;
76584: GO 76893
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76586: LD_ADDR_VAR 0 10
76590: PUSH
76591: LD_INT 5
76593: PUSH
76594: LD_INT 6
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: PUSH
76601: LD_INT 2
76603: PUSH
76604: LD_INT 4
76606: PUSH
76607: EMPTY
76608: LIST
76609: LIST
76610: PUSH
76611: LD_INT 3
76613: PUSH
76614: LD_INT 5
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: LIST
76625: PUSH
76626: LD_INT 24
76628: PUSH
76629: LD_INT 25
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: PUSH
76636: LD_INT 23
76638: PUSH
76639: LD_INT 27
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: EMPTY
76647: LIST
76648: LIST
76649: PUSH
76650: LD_INT 42
76652: PUSH
76653: LD_INT 43
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: PUSH
76660: LD_INT 44
76662: PUSH
76663: LD_INT 46
76665: PUSH
76666: EMPTY
76667: LIST
76668: LIST
76669: PUSH
76670: LD_INT 45
76672: PUSH
76673: LD_INT 47
76675: PUSH
76676: EMPTY
76677: LIST
76678: LIST
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: LIST
76684: PUSH
76685: EMPTY
76686: LIST
76687: LIST
76688: LIST
76689: ST_TO_ADDR
// result := [ ] ;
76690: LD_ADDR_VAR 0 3
76694: PUSH
76695: EMPTY
76696: ST_TO_ADDR
// for i in turrets do
76697: LD_ADDR_VAR 0 4
76701: PUSH
76702: LD_VAR 0 1
76706: PUSH
76707: FOR_IN
76708: IFFALSE 76891
// begin nat := GetNation ( i ) ;
76710: LD_ADDR_VAR 0 7
76714: PUSH
76715: LD_VAR 0 4
76719: PPUSH
76720: CALL_OW 248
76724: ST_TO_ADDR
// weapon := 0 ;
76725: LD_ADDR_VAR 0 8
76729: PUSH
76730: LD_INT 0
76732: ST_TO_ADDR
// if not nat then
76733: LD_VAR 0 7
76737: NOT
76738: IFFALSE 76742
// continue ;
76740: GO 76707
// for j in list [ nat ] do
76742: LD_ADDR_VAR 0 5
76746: PUSH
76747: LD_VAR 0 10
76751: PUSH
76752: LD_VAR 0 7
76756: ARRAY
76757: PUSH
76758: FOR_IN
76759: IFFALSE 76800
// if GetBWeapon ( i ) = j [ 1 ] then
76761: LD_VAR 0 4
76765: PPUSH
76766: CALL_OW 269
76770: PUSH
76771: LD_VAR 0 5
76775: PUSH
76776: LD_INT 1
76778: ARRAY
76779: EQUAL
76780: IFFALSE 76798
// begin weapon := j [ 2 ] ;
76782: LD_ADDR_VAR 0 8
76786: PUSH
76787: LD_VAR 0 5
76791: PUSH
76792: LD_INT 2
76794: ARRAY
76795: ST_TO_ADDR
// break ;
76796: GO 76800
// end ;
76798: GO 76758
76800: POP
76801: POP
// if not weapon then
76802: LD_VAR 0 8
76806: NOT
76807: IFFALSE 76811
// continue ;
76809: GO 76707
// for k in factories do
76811: LD_ADDR_VAR 0 6
76815: PUSH
76816: LD_VAR 0 2
76820: PUSH
76821: FOR_IN
76822: IFFALSE 76887
// begin weapons := AvailableWeaponList ( k ) ;
76824: LD_ADDR_VAR 0 9
76828: PUSH
76829: LD_VAR 0 6
76833: PPUSH
76834: CALL_OW 478
76838: ST_TO_ADDR
// if not weapons then
76839: LD_VAR 0 9
76843: NOT
76844: IFFALSE 76848
// continue ;
76846: GO 76821
// if weapon in weapons then
76848: LD_VAR 0 8
76852: PUSH
76853: LD_VAR 0 9
76857: IN
76858: IFFALSE 76885
// begin result := [ i , weapon ] ;
76860: LD_ADDR_VAR 0 3
76864: PUSH
76865: LD_VAR 0 4
76869: PUSH
76870: LD_VAR 0 8
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: ST_TO_ADDR
// exit ;
76879: POP
76880: POP
76881: POP
76882: POP
76883: GO 76893
// end ; end ;
76885: GO 76821
76887: POP
76888: POP
// end ;
76889: GO 76707
76891: POP
76892: POP
// end ;
76893: LD_VAR 0 3
76897: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76898: LD_INT 0
76900: PPUSH
// if not side or side > 8 then
76901: LD_VAR 0 3
76905: NOT
76906: PUSH
76907: LD_VAR 0 3
76911: PUSH
76912: LD_INT 8
76914: GREATER
76915: OR
76916: IFFALSE 76920
// exit ;
76918: GO 76979
// if not range then
76920: LD_VAR 0 4
76924: NOT
76925: IFFALSE 76936
// range := - 12 ;
76927: LD_ADDR_VAR 0 4
76931: PUSH
76932: LD_INT 12
76934: NEG
76935: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76936: LD_VAR 0 1
76940: PPUSH
76941: LD_VAR 0 2
76945: PPUSH
76946: LD_VAR 0 3
76950: PPUSH
76951: LD_VAR 0 4
76955: PPUSH
76956: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76960: LD_VAR 0 1
76964: PPUSH
76965: LD_VAR 0 2
76969: PPUSH
76970: LD_VAR 0 3
76974: PPUSH
76975: CALL_OW 331
// end ;
76979: LD_VAR 0 5
76983: RET
// export function Video ( mode ) ; begin
76984: LD_INT 0
76986: PPUSH
// ingame_video = mode ;
76987: LD_ADDR_OWVAR 52
76991: PUSH
76992: LD_VAR 0 1
76996: ST_TO_ADDR
// interface_hidden = mode ;
76997: LD_ADDR_OWVAR 54
77001: PUSH
77002: LD_VAR 0 1
77006: ST_TO_ADDR
// end ;
77007: LD_VAR 0 2
77011: RET
// export function Join ( array , element ) ; begin
77012: LD_INT 0
77014: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77015: LD_ADDR_VAR 0 3
77019: PUSH
77020: LD_VAR 0 1
77024: PPUSH
77025: LD_VAR 0 1
77029: PUSH
77030: LD_INT 1
77032: PLUS
77033: PPUSH
77034: LD_VAR 0 2
77038: PPUSH
77039: CALL_OW 1
77043: ST_TO_ADDR
// end ;
77044: LD_VAR 0 3
77048: RET
// export function JoinUnion ( array , element ) ; begin
77049: LD_INT 0
77051: PPUSH
// result := array union element ;
77052: LD_ADDR_VAR 0 3
77056: PUSH
77057: LD_VAR 0 1
77061: PUSH
77062: LD_VAR 0 2
77066: UNION
77067: ST_TO_ADDR
// end ;
77068: LD_VAR 0 3
77072: RET
// export function GetBehemoths ( side ) ; begin
77073: LD_INT 0
77075: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77076: LD_ADDR_VAR 0 2
77080: PUSH
77081: LD_INT 22
77083: PUSH
77084: LD_VAR 0 1
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: PUSH
77093: LD_INT 31
77095: PUSH
77096: LD_INT 25
77098: PUSH
77099: EMPTY
77100: LIST
77101: LIST
77102: PUSH
77103: EMPTY
77104: LIST
77105: LIST
77106: PPUSH
77107: CALL_OW 69
77111: ST_TO_ADDR
// end ;
77112: LD_VAR 0 2
77116: RET
// export function Shuffle ( array ) ; var i , index ; begin
77117: LD_INT 0
77119: PPUSH
77120: PPUSH
77121: PPUSH
// result := [ ] ;
77122: LD_ADDR_VAR 0 2
77126: PUSH
77127: EMPTY
77128: ST_TO_ADDR
// if not array then
77129: LD_VAR 0 1
77133: NOT
77134: IFFALSE 77138
// exit ;
77136: GO 77237
// Randomize ;
77138: CALL_OW 10
// for i = array downto 1 do
77142: LD_ADDR_VAR 0 3
77146: PUSH
77147: DOUBLE
77148: LD_VAR 0 1
77152: INC
77153: ST_TO_ADDR
77154: LD_INT 1
77156: PUSH
77157: FOR_DOWNTO
77158: IFFALSE 77235
// begin index := rand ( 1 , array ) ;
77160: LD_ADDR_VAR 0 4
77164: PUSH
77165: LD_INT 1
77167: PPUSH
77168: LD_VAR 0 1
77172: PPUSH
77173: CALL_OW 12
77177: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77178: LD_ADDR_VAR 0 2
77182: PUSH
77183: LD_VAR 0 2
77187: PPUSH
77188: LD_VAR 0 2
77192: PUSH
77193: LD_INT 1
77195: PLUS
77196: PPUSH
77197: LD_VAR 0 1
77201: PUSH
77202: LD_VAR 0 4
77206: ARRAY
77207: PPUSH
77208: CALL_OW 2
77212: ST_TO_ADDR
// array := Delete ( array , index ) ;
77213: LD_ADDR_VAR 0 1
77217: PUSH
77218: LD_VAR 0 1
77222: PPUSH
77223: LD_VAR 0 4
77227: PPUSH
77228: CALL_OW 3
77232: ST_TO_ADDR
// end ;
77233: GO 77157
77235: POP
77236: POP
// end ;
77237: LD_VAR 0 2
77241: RET
// export function GetBaseMaterials ( base ) ; begin
77242: LD_INT 0
77244: PPUSH
// result := [ 0 , 0 , 0 ] ;
77245: LD_ADDR_VAR 0 2
77249: PUSH
77250: LD_INT 0
77252: PUSH
77253: LD_INT 0
77255: PUSH
77256: LD_INT 0
77258: PUSH
77259: EMPTY
77260: LIST
77261: LIST
77262: LIST
77263: ST_TO_ADDR
// if not base then
77264: LD_VAR 0 1
77268: NOT
77269: IFFALSE 77273
// exit ;
77271: GO 77322
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77273: LD_ADDR_VAR 0 2
77277: PUSH
77278: LD_VAR 0 1
77282: PPUSH
77283: LD_INT 1
77285: PPUSH
77286: CALL_OW 275
77290: PUSH
77291: LD_VAR 0 1
77295: PPUSH
77296: LD_INT 2
77298: PPUSH
77299: CALL_OW 275
77303: PUSH
77304: LD_VAR 0 1
77308: PPUSH
77309: LD_INT 3
77311: PPUSH
77312: CALL_OW 275
77316: PUSH
77317: EMPTY
77318: LIST
77319: LIST
77320: LIST
77321: ST_TO_ADDR
// end ;
77322: LD_VAR 0 2
77326: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77327: LD_INT 0
77329: PPUSH
77330: PPUSH
// result := array ;
77331: LD_ADDR_VAR 0 3
77335: PUSH
77336: LD_VAR 0 1
77340: ST_TO_ADDR
// if size >= result then
77341: LD_VAR 0 2
77345: PUSH
77346: LD_VAR 0 3
77350: GREATEREQUAL
77351: IFFALSE 77355
// exit ;
77353: GO 77405
// if size then
77355: LD_VAR 0 2
77359: IFFALSE 77405
// for i := array downto size do
77361: LD_ADDR_VAR 0 4
77365: PUSH
77366: DOUBLE
77367: LD_VAR 0 1
77371: INC
77372: ST_TO_ADDR
77373: LD_VAR 0 2
77377: PUSH
77378: FOR_DOWNTO
77379: IFFALSE 77403
// result := Delete ( result , result ) ;
77381: LD_ADDR_VAR 0 3
77385: PUSH
77386: LD_VAR 0 3
77390: PPUSH
77391: LD_VAR 0 3
77395: PPUSH
77396: CALL_OW 3
77400: ST_TO_ADDR
77401: GO 77378
77403: POP
77404: POP
// end ;
77405: LD_VAR 0 3
77409: RET
// export function ComExit ( unit ) ; var tmp ; begin
77410: LD_INT 0
77412: PPUSH
77413: PPUSH
// if not IsInUnit ( unit ) then
77414: LD_VAR 0 1
77418: PPUSH
77419: CALL_OW 310
77423: NOT
77424: IFFALSE 77428
// exit ;
77426: GO 77488
// tmp := IsInUnit ( unit ) ;
77428: LD_ADDR_VAR 0 3
77432: PUSH
77433: LD_VAR 0 1
77437: PPUSH
77438: CALL_OW 310
77442: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77443: LD_VAR 0 3
77447: PPUSH
77448: CALL_OW 247
77452: PUSH
77453: LD_INT 2
77455: EQUAL
77456: IFFALSE 77469
// ComExitVehicle ( unit ) else
77458: LD_VAR 0 1
77462: PPUSH
77463: CALL_OW 121
77467: GO 77478
// ComExitBuilding ( unit ) ;
77469: LD_VAR 0 1
77473: PPUSH
77474: CALL_OW 122
// result := tmp ;
77478: LD_ADDR_VAR 0 2
77482: PUSH
77483: LD_VAR 0 3
77487: ST_TO_ADDR
// end ;
77488: LD_VAR 0 2
77492: RET
// export function ComExitAll ( units ) ; var i ; begin
77493: LD_INT 0
77495: PPUSH
77496: PPUSH
// if not units then
77497: LD_VAR 0 1
77501: NOT
77502: IFFALSE 77506
// exit ;
77504: GO 77532
// for i in units do
77506: LD_ADDR_VAR 0 3
77510: PUSH
77511: LD_VAR 0 1
77515: PUSH
77516: FOR_IN
77517: IFFALSE 77530
// ComExit ( i ) ;
77519: LD_VAR 0 3
77523: PPUSH
77524: CALL 77410 0 1
77528: GO 77516
77530: POP
77531: POP
// end ;
77532: LD_VAR 0 2
77536: RET
// export function ResetHc ; begin
77537: LD_INT 0
77539: PPUSH
// InitHc ;
77540: CALL_OW 19
// hc_importance := 0 ;
77544: LD_ADDR_OWVAR 32
77548: PUSH
77549: LD_INT 0
77551: ST_TO_ADDR
// end ;
77552: LD_VAR 0 1
77556: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77557: LD_INT 0
77559: PPUSH
77560: PPUSH
77561: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77562: LD_ADDR_VAR 0 6
77566: PUSH
77567: LD_VAR 0 1
77571: PUSH
77572: LD_VAR 0 3
77576: PLUS
77577: PUSH
77578: LD_INT 2
77580: DIV
77581: ST_TO_ADDR
// if _x < 0 then
77582: LD_VAR 0 6
77586: PUSH
77587: LD_INT 0
77589: LESS
77590: IFFALSE 77607
// _x := _x * - 1 ;
77592: LD_ADDR_VAR 0 6
77596: PUSH
77597: LD_VAR 0 6
77601: PUSH
77602: LD_INT 1
77604: NEG
77605: MUL
77606: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77607: LD_ADDR_VAR 0 7
77611: PUSH
77612: LD_VAR 0 2
77616: PUSH
77617: LD_VAR 0 4
77621: PLUS
77622: PUSH
77623: LD_INT 2
77625: DIV
77626: ST_TO_ADDR
// if _y < 0 then
77627: LD_VAR 0 7
77631: PUSH
77632: LD_INT 0
77634: LESS
77635: IFFALSE 77652
// _y := _y * - 1 ;
77637: LD_ADDR_VAR 0 7
77641: PUSH
77642: LD_VAR 0 7
77646: PUSH
77647: LD_INT 1
77649: NEG
77650: MUL
77651: ST_TO_ADDR
// result := [ _x , _y ] ;
77652: LD_ADDR_VAR 0 5
77656: PUSH
77657: LD_VAR 0 6
77661: PUSH
77662: LD_VAR 0 7
77666: PUSH
77667: EMPTY
77668: LIST
77669: LIST
77670: ST_TO_ADDR
// end ;
77671: LD_VAR 0 5
77675: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77676: LD_INT 0
77678: PPUSH
77679: PPUSH
77680: PPUSH
77681: PPUSH
// task := GetTaskList ( unit ) ;
77682: LD_ADDR_VAR 0 7
77686: PUSH
77687: LD_VAR 0 1
77691: PPUSH
77692: CALL_OW 437
77696: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77697: LD_VAR 0 7
77701: NOT
77702: PUSH
77703: LD_VAR 0 1
77707: PPUSH
77708: LD_VAR 0 2
77712: PPUSH
77713: CALL_OW 308
77717: NOT
77718: AND
77719: IFFALSE 77723
// exit ;
77721: GO 77841
// if IsInArea ( unit , area ) then
77723: LD_VAR 0 1
77727: PPUSH
77728: LD_VAR 0 2
77732: PPUSH
77733: CALL_OW 308
77737: IFFALSE 77755
// begin ComMoveToArea ( unit , goAway ) ;
77739: LD_VAR 0 1
77743: PPUSH
77744: LD_VAR 0 3
77748: PPUSH
77749: CALL_OW 113
// exit ;
77753: GO 77841
// end ; if task [ 1 ] [ 1 ] <> M then
77755: LD_VAR 0 7
77759: PUSH
77760: LD_INT 1
77762: ARRAY
77763: PUSH
77764: LD_INT 1
77766: ARRAY
77767: PUSH
77768: LD_STRING M
77770: NONEQUAL
77771: IFFALSE 77775
// exit ;
77773: GO 77841
// x := task [ 1 ] [ 2 ] ;
77775: LD_ADDR_VAR 0 5
77779: PUSH
77780: LD_VAR 0 7
77784: PUSH
77785: LD_INT 1
77787: ARRAY
77788: PUSH
77789: LD_INT 2
77791: ARRAY
77792: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77793: LD_ADDR_VAR 0 6
77797: PUSH
77798: LD_VAR 0 7
77802: PUSH
77803: LD_INT 1
77805: ARRAY
77806: PUSH
77807: LD_INT 3
77809: ARRAY
77810: ST_TO_ADDR
// if InArea ( x , y , area ) then
77811: LD_VAR 0 5
77815: PPUSH
77816: LD_VAR 0 6
77820: PPUSH
77821: LD_VAR 0 2
77825: PPUSH
77826: CALL_OW 309
77830: IFFALSE 77841
// ComStop ( unit ) ;
77832: LD_VAR 0 1
77836: PPUSH
77837: CALL_OW 141
// end ;
77841: LD_VAR 0 4
77845: RET
// export function Abs ( value ) ; begin
77846: LD_INT 0
77848: PPUSH
// result := value ;
77849: LD_ADDR_VAR 0 2
77853: PUSH
77854: LD_VAR 0 1
77858: ST_TO_ADDR
// if value < 0 then
77859: LD_VAR 0 1
77863: PUSH
77864: LD_INT 0
77866: LESS
77867: IFFALSE 77884
// result := value * - 1 ;
77869: LD_ADDR_VAR 0 2
77873: PUSH
77874: LD_VAR 0 1
77878: PUSH
77879: LD_INT 1
77881: NEG
77882: MUL
77883: ST_TO_ADDR
// end ;
77884: LD_VAR 0 2
77888: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77889: LD_INT 0
77891: PPUSH
77892: PPUSH
77893: PPUSH
77894: PPUSH
77895: PPUSH
77896: PPUSH
77897: PPUSH
77898: PPUSH
// if not unit or not building then
77899: LD_VAR 0 1
77903: NOT
77904: PUSH
77905: LD_VAR 0 2
77909: NOT
77910: OR
77911: IFFALSE 77915
// exit ;
77913: GO 78141
// x := GetX ( building ) ;
77915: LD_ADDR_VAR 0 4
77919: PUSH
77920: LD_VAR 0 2
77924: PPUSH
77925: CALL_OW 250
77929: ST_TO_ADDR
// y := GetY ( building ) ;
77930: LD_ADDR_VAR 0 6
77934: PUSH
77935: LD_VAR 0 2
77939: PPUSH
77940: CALL_OW 251
77944: ST_TO_ADDR
// d := GetDir ( building ) ;
77945: LD_ADDR_VAR 0 8
77949: PUSH
77950: LD_VAR 0 2
77954: PPUSH
77955: CALL_OW 254
77959: ST_TO_ADDR
// r := 4 ;
77960: LD_ADDR_VAR 0 9
77964: PUSH
77965: LD_INT 4
77967: ST_TO_ADDR
// for i := 1 to 5 do
77968: LD_ADDR_VAR 0 10
77972: PUSH
77973: DOUBLE
77974: LD_INT 1
77976: DEC
77977: ST_TO_ADDR
77978: LD_INT 5
77980: PUSH
77981: FOR_TO
77982: IFFALSE 78139
// begin _x := ShiftX ( x , d , r + i ) ;
77984: LD_ADDR_VAR 0 5
77988: PUSH
77989: LD_VAR 0 4
77993: PPUSH
77994: LD_VAR 0 8
77998: PPUSH
77999: LD_VAR 0 9
78003: PUSH
78004: LD_VAR 0 10
78008: PLUS
78009: PPUSH
78010: CALL_OW 272
78014: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78015: LD_ADDR_VAR 0 7
78019: PUSH
78020: LD_VAR 0 6
78024: PPUSH
78025: LD_VAR 0 8
78029: PPUSH
78030: LD_VAR 0 9
78034: PUSH
78035: LD_VAR 0 10
78039: PLUS
78040: PPUSH
78041: CALL_OW 273
78045: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78046: LD_VAR 0 5
78050: PPUSH
78051: LD_VAR 0 7
78055: PPUSH
78056: CALL_OW 488
78060: PUSH
78061: LD_VAR 0 5
78065: PPUSH
78066: LD_VAR 0 7
78070: PPUSH
78071: CALL_OW 428
78075: PPUSH
78076: CALL_OW 247
78080: PUSH
78081: LD_INT 3
78083: PUSH
78084: LD_INT 2
78086: PUSH
78087: EMPTY
78088: LIST
78089: LIST
78090: IN
78091: NOT
78092: AND
78093: IFFALSE 78137
// begin ComMoveXY ( unit , _x , _y ) ;
78095: LD_VAR 0 1
78099: PPUSH
78100: LD_VAR 0 5
78104: PPUSH
78105: LD_VAR 0 7
78109: PPUSH
78110: CALL_OW 111
// result := [ _x , _y ] ;
78114: LD_ADDR_VAR 0 3
78118: PUSH
78119: LD_VAR 0 5
78123: PUSH
78124: LD_VAR 0 7
78128: PUSH
78129: EMPTY
78130: LIST
78131: LIST
78132: ST_TO_ADDR
// exit ;
78133: POP
78134: POP
78135: GO 78141
// end ; end ;
78137: GO 77981
78139: POP
78140: POP
// end ;
78141: LD_VAR 0 3
78145: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78146: LD_INT 0
78148: PPUSH
78149: PPUSH
78150: PPUSH
// result := 0 ;
78151: LD_ADDR_VAR 0 3
78155: PUSH
78156: LD_INT 0
78158: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78159: LD_VAR 0 1
78163: PUSH
78164: LD_INT 0
78166: LESS
78167: PUSH
78168: LD_VAR 0 1
78172: PUSH
78173: LD_INT 8
78175: GREATER
78176: OR
78177: PUSH
78178: LD_VAR 0 2
78182: PUSH
78183: LD_INT 0
78185: LESS
78186: OR
78187: PUSH
78188: LD_VAR 0 2
78192: PUSH
78193: LD_INT 8
78195: GREATER
78196: OR
78197: IFFALSE 78201
// exit ;
78199: GO 78276
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78201: LD_ADDR_VAR 0 4
78205: PUSH
78206: LD_INT 22
78208: PUSH
78209: LD_VAR 0 2
78213: PUSH
78214: EMPTY
78215: LIST
78216: LIST
78217: PPUSH
78218: CALL_OW 69
78222: PUSH
78223: FOR_IN
78224: IFFALSE 78274
// begin un := UnitShoot ( i ) ;
78226: LD_ADDR_VAR 0 5
78230: PUSH
78231: LD_VAR 0 4
78235: PPUSH
78236: CALL_OW 504
78240: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78241: LD_VAR 0 5
78245: PPUSH
78246: CALL_OW 255
78250: PUSH
78251: LD_VAR 0 1
78255: EQUAL
78256: IFFALSE 78272
// begin result := un ;
78258: LD_ADDR_VAR 0 3
78262: PUSH
78263: LD_VAR 0 5
78267: ST_TO_ADDR
// exit ;
78268: POP
78269: POP
78270: GO 78276
// end ; end ;
78272: GO 78223
78274: POP
78275: POP
// end ;
78276: LD_VAR 0 3
78280: RET
// export function GetCargoBay ( units ) ; begin
78281: LD_INT 0
78283: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78284: LD_ADDR_VAR 0 2
78288: PUSH
78289: LD_VAR 0 1
78293: PPUSH
78294: LD_INT 2
78296: PUSH
78297: LD_INT 34
78299: PUSH
78300: LD_INT 12
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: PUSH
78307: LD_INT 34
78309: PUSH
78310: LD_INT 51
78312: PUSH
78313: EMPTY
78314: LIST
78315: LIST
78316: PUSH
78317: LD_INT 34
78319: PUSH
78320: LD_INT 32
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: PUSH
78327: LD_INT 34
78329: PUSH
78330: LD_INT 89
78332: PUSH
78333: EMPTY
78334: LIST
78335: LIST
78336: PUSH
78337: EMPTY
78338: LIST
78339: LIST
78340: LIST
78341: LIST
78342: LIST
78343: PPUSH
78344: CALL_OW 72
78348: ST_TO_ADDR
// end ;
78349: LD_VAR 0 2
78353: RET
// export function Negate ( value ) ; begin
78354: LD_INT 0
78356: PPUSH
// result := not value ;
78357: LD_ADDR_VAR 0 2
78361: PUSH
78362: LD_VAR 0 1
78366: NOT
78367: ST_TO_ADDR
// end ;
78368: LD_VAR 0 2
78372: RET
// export function Inc ( value ) ; begin
78373: LD_INT 0
78375: PPUSH
// result := value + 1 ;
78376: LD_ADDR_VAR 0 2
78380: PUSH
78381: LD_VAR 0 1
78385: PUSH
78386: LD_INT 1
78388: PLUS
78389: ST_TO_ADDR
// end ;
78390: LD_VAR 0 2
78394: RET
// export function Dec ( value ) ; begin
78395: LD_INT 0
78397: PPUSH
// result := value - 1 ;
78398: LD_ADDR_VAR 0 2
78402: PUSH
78403: LD_VAR 0 1
78407: PUSH
78408: LD_INT 1
78410: MINUS
78411: ST_TO_ADDR
// end ;
78412: LD_VAR 0 2
78416: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78417: LD_INT 0
78419: PPUSH
78420: PPUSH
78421: PPUSH
78422: PPUSH
78423: PPUSH
78424: PPUSH
78425: PPUSH
78426: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78427: LD_VAR 0 1
78431: PPUSH
78432: LD_VAR 0 2
78436: PPUSH
78437: CALL_OW 488
78441: NOT
78442: PUSH
78443: LD_VAR 0 3
78447: PPUSH
78448: LD_VAR 0 4
78452: PPUSH
78453: CALL_OW 488
78457: NOT
78458: OR
78459: IFFALSE 78472
// begin result := - 1 ;
78461: LD_ADDR_VAR 0 5
78465: PUSH
78466: LD_INT 1
78468: NEG
78469: ST_TO_ADDR
// exit ;
78470: GO 78707
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78472: LD_ADDR_VAR 0 12
78476: PUSH
78477: LD_VAR 0 1
78481: PPUSH
78482: LD_VAR 0 2
78486: PPUSH
78487: LD_VAR 0 3
78491: PPUSH
78492: LD_VAR 0 4
78496: PPUSH
78497: CALL 77557 0 4
78501: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78502: LD_ADDR_VAR 0 11
78506: PUSH
78507: LD_VAR 0 1
78511: PPUSH
78512: LD_VAR 0 2
78516: PPUSH
78517: LD_VAR 0 12
78521: PUSH
78522: LD_INT 1
78524: ARRAY
78525: PPUSH
78526: LD_VAR 0 12
78530: PUSH
78531: LD_INT 2
78533: ARRAY
78534: PPUSH
78535: CALL_OW 298
78539: ST_TO_ADDR
// distance := 9999 ;
78540: LD_ADDR_VAR 0 10
78544: PUSH
78545: LD_INT 9999
78547: ST_TO_ADDR
// for i := 0 to 5 do
78548: LD_ADDR_VAR 0 6
78552: PUSH
78553: DOUBLE
78554: LD_INT 0
78556: DEC
78557: ST_TO_ADDR
78558: LD_INT 5
78560: PUSH
78561: FOR_TO
78562: IFFALSE 78705
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78564: LD_ADDR_VAR 0 7
78568: PUSH
78569: LD_VAR 0 1
78573: PPUSH
78574: LD_VAR 0 6
78578: PPUSH
78579: LD_VAR 0 11
78583: PPUSH
78584: CALL_OW 272
78588: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78589: LD_ADDR_VAR 0 8
78593: PUSH
78594: LD_VAR 0 2
78598: PPUSH
78599: LD_VAR 0 6
78603: PPUSH
78604: LD_VAR 0 11
78608: PPUSH
78609: CALL_OW 273
78613: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78614: LD_VAR 0 7
78618: PPUSH
78619: LD_VAR 0 8
78623: PPUSH
78624: CALL_OW 488
78628: NOT
78629: IFFALSE 78633
// continue ;
78631: GO 78561
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78633: LD_ADDR_VAR 0 9
78637: PUSH
78638: LD_VAR 0 12
78642: PUSH
78643: LD_INT 1
78645: ARRAY
78646: PPUSH
78647: LD_VAR 0 12
78651: PUSH
78652: LD_INT 2
78654: ARRAY
78655: PPUSH
78656: LD_VAR 0 7
78660: PPUSH
78661: LD_VAR 0 8
78665: PPUSH
78666: CALL_OW 298
78670: ST_TO_ADDR
// if tmp < distance then
78671: LD_VAR 0 9
78675: PUSH
78676: LD_VAR 0 10
78680: LESS
78681: IFFALSE 78703
// begin result := i ;
78683: LD_ADDR_VAR 0 5
78687: PUSH
78688: LD_VAR 0 6
78692: ST_TO_ADDR
// distance := tmp ;
78693: LD_ADDR_VAR 0 10
78697: PUSH
78698: LD_VAR 0 9
78702: ST_TO_ADDR
// end ; end ;
78703: GO 78561
78705: POP
78706: POP
// end ;
78707: LD_VAR 0 5
78711: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78712: LD_INT 0
78714: PPUSH
78715: PPUSH
// if not driver or not IsInUnit ( driver ) then
78716: LD_VAR 0 1
78720: NOT
78721: PUSH
78722: LD_VAR 0 1
78726: PPUSH
78727: CALL_OW 310
78731: NOT
78732: OR
78733: IFFALSE 78737
// exit ;
78735: GO 78827
// vehicle := IsInUnit ( driver ) ;
78737: LD_ADDR_VAR 0 3
78741: PUSH
78742: LD_VAR 0 1
78746: PPUSH
78747: CALL_OW 310
78751: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78752: LD_VAR 0 1
78756: PPUSH
78757: LD_STRING \
78759: PUSH
78760: LD_INT 0
78762: PUSH
78763: LD_INT 0
78765: PUSH
78766: LD_INT 0
78768: PUSH
78769: LD_INT 0
78771: PUSH
78772: LD_INT 0
78774: PUSH
78775: LD_INT 0
78777: PUSH
78778: EMPTY
78779: LIST
78780: LIST
78781: LIST
78782: LIST
78783: LIST
78784: LIST
78785: LIST
78786: PUSH
78787: LD_STRING E
78789: PUSH
78790: LD_INT 0
78792: PUSH
78793: LD_INT 0
78795: PUSH
78796: LD_VAR 0 3
78800: PUSH
78801: LD_INT 0
78803: PUSH
78804: LD_INT 0
78806: PUSH
78807: LD_INT 0
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: LIST
78814: LIST
78815: LIST
78816: LIST
78817: LIST
78818: PUSH
78819: EMPTY
78820: LIST
78821: LIST
78822: PPUSH
78823: CALL_OW 446
// end ;
78827: LD_VAR 0 2
78831: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78832: LD_INT 0
78834: PPUSH
78835: PPUSH
// if not driver or not IsInUnit ( driver ) then
78836: LD_VAR 0 1
78840: NOT
78841: PUSH
78842: LD_VAR 0 1
78846: PPUSH
78847: CALL_OW 310
78851: NOT
78852: OR
78853: IFFALSE 78857
// exit ;
78855: GO 78947
// vehicle := IsInUnit ( driver ) ;
78857: LD_ADDR_VAR 0 3
78861: PUSH
78862: LD_VAR 0 1
78866: PPUSH
78867: CALL_OW 310
78871: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78872: LD_VAR 0 1
78876: PPUSH
78877: LD_STRING \
78879: PUSH
78880: LD_INT 0
78882: PUSH
78883: LD_INT 0
78885: PUSH
78886: LD_INT 0
78888: PUSH
78889: LD_INT 0
78891: PUSH
78892: LD_INT 0
78894: PUSH
78895: LD_INT 0
78897: PUSH
78898: EMPTY
78899: LIST
78900: LIST
78901: LIST
78902: LIST
78903: LIST
78904: LIST
78905: LIST
78906: PUSH
78907: LD_STRING E
78909: PUSH
78910: LD_INT 0
78912: PUSH
78913: LD_INT 0
78915: PUSH
78916: LD_VAR 0 3
78920: PUSH
78921: LD_INT 0
78923: PUSH
78924: LD_INT 0
78926: PUSH
78927: LD_INT 0
78929: PUSH
78930: EMPTY
78931: LIST
78932: LIST
78933: LIST
78934: LIST
78935: LIST
78936: LIST
78937: LIST
78938: PUSH
78939: EMPTY
78940: LIST
78941: LIST
78942: PPUSH
78943: CALL_OW 447
// end ;
78947: LD_VAR 0 2
78951: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78952: LD_INT 0
78954: PPUSH
78955: PPUSH
78956: PPUSH
// tmp := [ ] ;
78957: LD_ADDR_VAR 0 5
78961: PUSH
78962: EMPTY
78963: ST_TO_ADDR
// for i in units do
78964: LD_ADDR_VAR 0 4
78968: PUSH
78969: LD_VAR 0 1
78973: PUSH
78974: FOR_IN
78975: IFFALSE 79013
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78977: LD_ADDR_VAR 0 5
78981: PUSH
78982: LD_VAR 0 5
78986: PPUSH
78987: LD_VAR 0 5
78991: PUSH
78992: LD_INT 1
78994: PLUS
78995: PPUSH
78996: LD_VAR 0 4
79000: PPUSH
79001: CALL_OW 256
79005: PPUSH
79006: CALL_OW 2
79010: ST_TO_ADDR
79011: GO 78974
79013: POP
79014: POP
// if not tmp then
79015: LD_VAR 0 5
79019: NOT
79020: IFFALSE 79024
// exit ;
79022: GO 79072
// if asc then
79024: LD_VAR 0 2
79028: IFFALSE 79052
// result := SortListByListAsc ( units , tmp ) else
79030: LD_ADDR_VAR 0 3
79034: PUSH
79035: LD_VAR 0 1
79039: PPUSH
79040: LD_VAR 0 5
79044: PPUSH
79045: CALL_OW 76
79049: ST_TO_ADDR
79050: GO 79072
// result := SortListByListDesc ( units , tmp ) ;
79052: LD_ADDR_VAR 0 3
79056: PUSH
79057: LD_VAR 0 1
79061: PPUSH
79062: LD_VAR 0 5
79066: PPUSH
79067: CALL_OW 77
79071: ST_TO_ADDR
// end ;
79072: LD_VAR 0 3
79076: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79077: LD_INT 0
79079: PPUSH
79080: PPUSH
// task := GetTaskList ( mech ) ;
79081: LD_ADDR_VAR 0 4
79085: PUSH
79086: LD_VAR 0 1
79090: PPUSH
79091: CALL_OW 437
79095: ST_TO_ADDR
// if not task then
79096: LD_VAR 0 4
79100: NOT
79101: IFFALSE 79105
// exit ;
79103: GO 79147
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79105: LD_ADDR_VAR 0 3
79109: PUSH
79110: LD_VAR 0 4
79114: PUSH
79115: LD_INT 1
79117: ARRAY
79118: PUSH
79119: LD_INT 1
79121: ARRAY
79122: PUSH
79123: LD_STRING r
79125: EQUAL
79126: PUSH
79127: LD_VAR 0 4
79131: PUSH
79132: LD_INT 1
79134: ARRAY
79135: PUSH
79136: LD_INT 4
79138: ARRAY
79139: PUSH
79140: LD_VAR 0 2
79144: EQUAL
79145: AND
79146: ST_TO_ADDR
// end ;
79147: LD_VAR 0 3
79151: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79152: LD_INT 0
79154: PPUSH
// SetDir ( unit , d ) ;
79155: LD_VAR 0 1
79159: PPUSH
79160: LD_VAR 0 4
79164: PPUSH
79165: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79169: LD_VAR 0 1
79173: PPUSH
79174: LD_VAR 0 2
79178: PPUSH
79179: LD_VAR 0 3
79183: PPUSH
79184: LD_VAR 0 5
79188: PPUSH
79189: CALL_OW 48
// end ;
79193: LD_VAR 0 6
79197: RET
// export function ToNaturalNumber ( number ) ; begin
79198: LD_INT 0
79200: PPUSH
// result := number div 1 ;
79201: LD_ADDR_VAR 0 2
79205: PUSH
79206: LD_VAR 0 1
79210: PUSH
79211: LD_INT 1
79213: DIV
79214: ST_TO_ADDR
// if number < 0 then
79215: LD_VAR 0 1
79219: PUSH
79220: LD_INT 0
79222: LESS
79223: IFFALSE 79233
// result := 0 ;
79225: LD_ADDR_VAR 0 2
79229: PUSH
79230: LD_INT 0
79232: ST_TO_ADDR
// end ;
79233: LD_VAR 0 2
79237: RET
// export function SortByClass ( units , class ) ; var un ; begin
79238: LD_INT 0
79240: PPUSH
79241: PPUSH
// if not units or not class then
79242: LD_VAR 0 1
79246: NOT
79247: PUSH
79248: LD_VAR 0 2
79252: NOT
79253: OR
79254: IFFALSE 79258
// exit ;
79256: GO 79353
// result := [ ] ;
79258: LD_ADDR_VAR 0 3
79262: PUSH
79263: EMPTY
79264: ST_TO_ADDR
// for un in units do
79265: LD_ADDR_VAR 0 4
79269: PUSH
79270: LD_VAR 0 1
79274: PUSH
79275: FOR_IN
79276: IFFALSE 79351
// if GetClass ( un ) = class then
79278: LD_VAR 0 4
79282: PPUSH
79283: CALL_OW 257
79287: PUSH
79288: LD_VAR 0 2
79292: EQUAL
79293: IFFALSE 79320
// result := Insert ( result , 1 , un ) else
79295: LD_ADDR_VAR 0 3
79299: PUSH
79300: LD_VAR 0 3
79304: PPUSH
79305: LD_INT 1
79307: PPUSH
79308: LD_VAR 0 4
79312: PPUSH
79313: CALL_OW 2
79317: ST_TO_ADDR
79318: GO 79349
// result := Replace ( result , result + 1 , un ) ;
79320: LD_ADDR_VAR 0 3
79324: PUSH
79325: LD_VAR 0 3
79329: PPUSH
79330: LD_VAR 0 3
79334: PUSH
79335: LD_INT 1
79337: PLUS
79338: PPUSH
79339: LD_VAR 0 4
79343: PPUSH
79344: CALL_OW 1
79348: ST_TO_ADDR
79349: GO 79275
79351: POP
79352: POP
// end ;
79353: LD_VAR 0 3
79357: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79358: LD_INT 0
79360: PPUSH
79361: PPUSH
79362: PPUSH
79363: PPUSH
79364: PPUSH
79365: PPUSH
79366: PPUSH
// result := [ ] ;
79367: LD_ADDR_VAR 0 4
79371: PUSH
79372: EMPTY
79373: ST_TO_ADDR
// if x - r < 0 then
79374: LD_VAR 0 1
79378: PUSH
79379: LD_VAR 0 3
79383: MINUS
79384: PUSH
79385: LD_INT 0
79387: LESS
79388: IFFALSE 79400
// min_x := 0 else
79390: LD_ADDR_VAR 0 8
79394: PUSH
79395: LD_INT 0
79397: ST_TO_ADDR
79398: GO 79416
// min_x := x - r ;
79400: LD_ADDR_VAR 0 8
79404: PUSH
79405: LD_VAR 0 1
79409: PUSH
79410: LD_VAR 0 3
79414: MINUS
79415: ST_TO_ADDR
// if y - r < 0 then
79416: LD_VAR 0 2
79420: PUSH
79421: LD_VAR 0 3
79425: MINUS
79426: PUSH
79427: LD_INT 0
79429: LESS
79430: IFFALSE 79442
// min_y := 0 else
79432: LD_ADDR_VAR 0 7
79436: PUSH
79437: LD_INT 0
79439: ST_TO_ADDR
79440: GO 79458
// min_y := y - r ;
79442: LD_ADDR_VAR 0 7
79446: PUSH
79447: LD_VAR 0 2
79451: PUSH
79452: LD_VAR 0 3
79456: MINUS
79457: ST_TO_ADDR
// max_x := x + r ;
79458: LD_ADDR_VAR 0 9
79462: PUSH
79463: LD_VAR 0 1
79467: PUSH
79468: LD_VAR 0 3
79472: PLUS
79473: ST_TO_ADDR
// max_y := y + r ;
79474: LD_ADDR_VAR 0 10
79478: PUSH
79479: LD_VAR 0 2
79483: PUSH
79484: LD_VAR 0 3
79488: PLUS
79489: ST_TO_ADDR
// for _x = min_x to max_x do
79490: LD_ADDR_VAR 0 5
79494: PUSH
79495: DOUBLE
79496: LD_VAR 0 8
79500: DEC
79501: ST_TO_ADDR
79502: LD_VAR 0 9
79506: PUSH
79507: FOR_TO
79508: IFFALSE 79609
// for _y = min_y to max_y do
79510: LD_ADDR_VAR 0 6
79514: PUSH
79515: DOUBLE
79516: LD_VAR 0 7
79520: DEC
79521: ST_TO_ADDR
79522: LD_VAR 0 10
79526: PUSH
79527: FOR_TO
79528: IFFALSE 79605
// begin if not ValidHex ( _x , _y ) then
79530: LD_VAR 0 5
79534: PPUSH
79535: LD_VAR 0 6
79539: PPUSH
79540: CALL_OW 488
79544: NOT
79545: IFFALSE 79549
// continue ;
79547: GO 79527
// if GetResourceTypeXY ( _x , _y ) then
79549: LD_VAR 0 5
79553: PPUSH
79554: LD_VAR 0 6
79558: PPUSH
79559: CALL_OW 283
79563: IFFALSE 79603
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79565: LD_ADDR_VAR 0 4
79569: PUSH
79570: LD_VAR 0 4
79574: PPUSH
79575: LD_VAR 0 4
79579: PUSH
79580: LD_INT 1
79582: PLUS
79583: PPUSH
79584: LD_VAR 0 5
79588: PUSH
79589: LD_VAR 0 6
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: PPUSH
79598: CALL_OW 1
79602: ST_TO_ADDR
// end ;
79603: GO 79527
79605: POP
79606: POP
79607: GO 79507
79609: POP
79610: POP
// end ;
79611: LD_VAR 0 4
79615: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79616: LD_INT 0
79618: PPUSH
79619: PPUSH
79620: PPUSH
79621: PPUSH
79622: PPUSH
79623: PPUSH
79624: PPUSH
79625: PPUSH
// if not units then
79626: LD_VAR 0 1
79630: NOT
79631: IFFALSE 79635
// exit ;
79633: GO 80159
// result := UnitFilter ( units , [ f_ok ] ) ;
79635: LD_ADDR_VAR 0 3
79639: PUSH
79640: LD_VAR 0 1
79644: PPUSH
79645: LD_INT 50
79647: PUSH
79648: EMPTY
79649: LIST
79650: PPUSH
79651: CALL_OW 72
79655: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79656: LD_ADDR_VAR 0 8
79660: PUSH
79661: LD_VAR 0 1
79665: PUSH
79666: LD_INT 1
79668: ARRAY
79669: PPUSH
79670: CALL_OW 255
79674: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79675: LD_ADDR_VAR 0 10
79679: PUSH
79680: LD_INT 29
79682: PUSH
79683: LD_INT 91
79685: PUSH
79686: LD_INT 49
79688: PUSH
79689: EMPTY
79690: LIST
79691: LIST
79692: LIST
79693: ST_TO_ADDR
// if not result then
79694: LD_VAR 0 3
79698: NOT
79699: IFFALSE 79703
// exit ;
79701: GO 80159
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79703: LD_ADDR_VAR 0 5
79707: PUSH
79708: LD_INT 81
79710: PUSH
79711: LD_VAR 0 8
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: PPUSH
79720: CALL_OW 69
79724: ST_TO_ADDR
// for i in result do
79725: LD_ADDR_VAR 0 4
79729: PUSH
79730: LD_VAR 0 3
79734: PUSH
79735: FOR_IN
79736: IFFALSE 80157
// begin tag := GetTag ( i ) + 1 ;
79738: LD_ADDR_VAR 0 9
79742: PUSH
79743: LD_VAR 0 4
79747: PPUSH
79748: CALL_OW 110
79752: PUSH
79753: LD_INT 1
79755: PLUS
79756: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79757: LD_ADDR_VAR 0 7
79761: PUSH
79762: LD_VAR 0 4
79766: PPUSH
79767: CALL_OW 250
79771: PPUSH
79772: LD_VAR 0 4
79776: PPUSH
79777: CALL_OW 251
79781: PPUSH
79782: LD_INT 6
79784: PPUSH
79785: CALL 79358 0 3
79789: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79790: LD_VAR 0 4
79794: PPUSH
79795: CALL_OW 247
79799: PUSH
79800: LD_INT 2
79802: EQUAL
79803: PUSH
79804: LD_VAR 0 7
79808: AND
79809: PUSH
79810: LD_VAR 0 4
79814: PPUSH
79815: CALL_OW 264
79819: PUSH
79820: LD_VAR 0 10
79824: IN
79825: NOT
79826: AND
79827: IFFALSE 79866
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79829: LD_VAR 0 4
79833: PPUSH
79834: LD_VAR 0 7
79838: PUSH
79839: LD_INT 1
79841: ARRAY
79842: PUSH
79843: LD_INT 1
79845: ARRAY
79846: PPUSH
79847: LD_VAR 0 7
79851: PUSH
79852: LD_INT 1
79854: ARRAY
79855: PUSH
79856: LD_INT 2
79858: ARRAY
79859: PPUSH
79860: CALL_OW 116
79864: GO 80155
// if path > tag then
79866: LD_VAR 0 2
79870: PUSH
79871: LD_VAR 0 9
79875: GREATER
79876: IFFALSE 80084
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79878: LD_ADDR_VAR 0 6
79882: PUSH
79883: LD_VAR 0 5
79887: PPUSH
79888: LD_INT 91
79890: PUSH
79891: LD_VAR 0 4
79895: PUSH
79896: LD_INT 8
79898: PUSH
79899: EMPTY
79900: LIST
79901: LIST
79902: LIST
79903: PPUSH
79904: CALL_OW 72
79908: ST_TO_ADDR
// if nearEnemy then
79909: LD_VAR 0 6
79913: IFFALSE 79982
// begin if GetWeapon ( i ) = ru_time_lapser then
79915: LD_VAR 0 4
79919: PPUSH
79920: CALL_OW 264
79924: PUSH
79925: LD_INT 49
79927: EQUAL
79928: IFFALSE 79956
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79930: LD_VAR 0 4
79934: PPUSH
79935: LD_VAR 0 6
79939: PPUSH
79940: LD_VAR 0 4
79944: PPUSH
79945: CALL_OW 74
79949: PPUSH
79950: CALL_OW 112
79954: GO 79980
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79956: LD_VAR 0 4
79960: PPUSH
79961: LD_VAR 0 6
79965: PPUSH
79966: LD_VAR 0 4
79970: PPUSH
79971: CALL_OW 74
79975: PPUSH
79976: CALL_OW 115
// end else
79980: GO 80082
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79982: LD_VAR 0 4
79986: PPUSH
79987: LD_VAR 0 2
79991: PUSH
79992: LD_VAR 0 9
79996: ARRAY
79997: PUSH
79998: LD_INT 1
80000: ARRAY
80001: PPUSH
80002: LD_VAR 0 2
80006: PUSH
80007: LD_VAR 0 9
80011: ARRAY
80012: PUSH
80013: LD_INT 2
80015: ARRAY
80016: PPUSH
80017: CALL_OW 297
80021: PUSH
80022: LD_INT 6
80024: GREATER
80025: IFFALSE 80068
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80027: LD_VAR 0 4
80031: PPUSH
80032: LD_VAR 0 2
80036: PUSH
80037: LD_VAR 0 9
80041: ARRAY
80042: PUSH
80043: LD_INT 1
80045: ARRAY
80046: PPUSH
80047: LD_VAR 0 2
80051: PUSH
80052: LD_VAR 0 9
80056: ARRAY
80057: PUSH
80058: LD_INT 2
80060: ARRAY
80061: PPUSH
80062: CALL_OW 114
80066: GO 80082
// SetTag ( i , tag ) ;
80068: LD_VAR 0 4
80072: PPUSH
80073: LD_VAR 0 9
80077: PPUSH
80078: CALL_OW 109
// end else
80082: GO 80155
// if enemy then
80084: LD_VAR 0 5
80088: IFFALSE 80155
// begin if GetWeapon ( i ) = ru_time_lapser then
80090: LD_VAR 0 4
80094: PPUSH
80095: CALL_OW 264
80099: PUSH
80100: LD_INT 49
80102: EQUAL
80103: IFFALSE 80131
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80105: LD_VAR 0 4
80109: PPUSH
80110: LD_VAR 0 5
80114: PPUSH
80115: LD_VAR 0 4
80119: PPUSH
80120: CALL_OW 74
80124: PPUSH
80125: CALL_OW 112
80129: GO 80155
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80131: LD_VAR 0 4
80135: PPUSH
80136: LD_VAR 0 5
80140: PPUSH
80141: LD_VAR 0 4
80145: PPUSH
80146: CALL_OW 74
80150: PPUSH
80151: CALL_OW 115
// end ; end ;
80155: GO 79735
80157: POP
80158: POP
// end ;
80159: LD_VAR 0 3
80163: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80164: LD_INT 0
80166: PPUSH
80167: PPUSH
80168: PPUSH
// if not unit or IsInUnit ( unit ) then
80169: LD_VAR 0 1
80173: NOT
80174: PUSH
80175: LD_VAR 0 1
80179: PPUSH
80180: CALL_OW 310
80184: OR
80185: IFFALSE 80189
// exit ;
80187: GO 80280
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80189: LD_ADDR_VAR 0 4
80193: PUSH
80194: LD_VAR 0 1
80198: PPUSH
80199: CALL_OW 250
80203: PPUSH
80204: LD_VAR 0 2
80208: PPUSH
80209: LD_INT 1
80211: PPUSH
80212: CALL_OW 272
80216: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80217: LD_ADDR_VAR 0 5
80221: PUSH
80222: LD_VAR 0 1
80226: PPUSH
80227: CALL_OW 251
80231: PPUSH
80232: LD_VAR 0 2
80236: PPUSH
80237: LD_INT 1
80239: PPUSH
80240: CALL_OW 273
80244: ST_TO_ADDR
// if ValidHex ( x , y ) then
80245: LD_VAR 0 4
80249: PPUSH
80250: LD_VAR 0 5
80254: PPUSH
80255: CALL_OW 488
80259: IFFALSE 80280
// ComTurnXY ( unit , x , y ) ;
80261: LD_VAR 0 1
80265: PPUSH
80266: LD_VAR 0 4
80270: PPUSH
80271: LD_VAR 0 5
80275: PPUSH
80276: CALL_OW 118
// end ;
80280: LD_VAR 0 3
80284: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80285: LD_INT 0
80287: PPUSH
80288: PPUSH
// result := false ;
80289: LD_ADDR_VAR 0 3
80293: PUSH
80294: LD_INT 0
80296: ST_TO_ADDR
// if not units then
80297: LD_VAR 0 2
80301: NOT
80302: IFFALSE 80306
// exit ;
80304: GO 80351
// for i in units do
80306: LD_ADDR_VAR 0 4
80310: PUSH
80311: LD_VAR 0 2
80315: PUSH
80316: FOR_IN
80317: IFFALSE 80349
// if See ( side , i ) then
80319: LD_VAR 0 1
80323: PPUSH
80324: LD_VAR 0 4
80328: PPUSH
80329: CALL_OW 292
80333: IFFALSE 80347
// begin result := true ;
80335: LD_ADDR_VAR 0 3
80339: PUSH
80340: LD_INT 1
80342: ST_TO_ADDR
// exit ;
80343: POP
80344: POP
80345: GO 80351
// end ;
80347: GO 80316
80349: POP
80350: POP
// end ;
80351: LD_VAR 0 3
80355: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80356: LD_INT 0
80358: PPUSH
80359: PPUSH
80360: PPUSH
80361: PPUSH
// if not unit or not points then
80362: LD_VAR 0 1
80366: NOT
80367: PUSH
80368: LD_VAR 0 2
80372: NOT
80373: OR
80374: IFFALSE 80378
// exit ;
80376: GO 80468
// dist := 99999 ;
80378: LD_ADDR_VAR 0 5
80382: PUSH
80383: LD_INT 99999
80385: ST_TO_ADDR
// for i in points do
80386: LD_ADDR_VAR 0 4
80390: PUSH
80391: LD_VAR 0 2
80395: PUSH
80396: FOR_IN
80397: IFFALSE 80466
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80399: LD_ADDR_VAR 0 6
80403: PUSH
80404: LD_VAR 0 1
80408: PPUSH
80409: LD_VAR 0 4
80413: PUSH
80414: LD_INT 1
80416: ARRAY
80417: PPUSH
80418: LD_VAR 0 4
80422: PUSH
80423: LD_INT 2
80425: ARRAY
80426: PPUSH
80427: CALL_OW 297
80431: ST_TO_ADDR
// if tmpDist < dist then
80432: LD_VAR 0 6
80436: PUSH
80437: LD_VAR 0 5
80441: LESS
80442: IFFALSE 80464
// begin result := i ;
80444: LD_ADDR_VAR 0 3
80448: PUSH
80449: LD_VAR 0 4
80453: ST_TO_ADDR
// dist := tmpDist ;
80454: LD_ADDR_VAR 0 5
80458: PUSH
80459: LD_VAR 0 6
80463: ST_TO_ADDR
// end ; end ;
80464: GO 80396
80466: POP
80467: POP
// end ;
80468: LD_VAR 0 3
80472: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80473: LD_INT 0
80475: PPUSH
// uc_side := side ;
80476: LD_ADDR_OWVAR 20
80480: PUSH
80481: LD_VAR 0 1
80485: ST_TO_ADDR
// uc_nation := 3 ;
80486: LD_ADDR_OWVAR 21
80490: PUSH
80491: LD_INT 3
80493: ST_TO_ADDR
// vc_chassis := 25 ;
80494: LD_ADDR_OWVAR 37
80498: PUSH
80499: LD_INT 25
80501: ST_TO_ADDR
// vc_engine := engine_siberite ;
80502: LD_ADDR_OWVAR 39
80506: PUSH
80507: LD_INT 3
80509: ST_TO_ADDR
// vc_control := control_computer ;
80510: LD_ADDR_OWVAR 38
80514: PUSH
80515: LD_INT 3
80517: ST_TO_ADDR
// vc_weapon := 59 ;
80518: LD_ADDR_OWVAR 40
80522: PUSH
80523: LD_INT 59
80525: ST_TO_ADDR
// result := CreateVehicle ;
80526: LD_ADDR_VAR 0 5
80530: PUSH
80531: CALL_OW 45
80535: ST_TO_ADDR
// SetDir ( result , d ) ;
80536: LD_VAR 0 5
80540: PPUSH
80541: LD_VAR 0 4
80545: PPUSH
80546: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80550: LD_VAR 0 5
80554: PPUSH
80555: LD_VAR 0 2
80559: PPUSH
80560: LD_VAR 0 3
80564: PPUSH
80565: LD_INT 0
80567: PPUSH
80568: CALL_OW 48
// end ;
80572: LD_VAR 0 5
80576: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80577: LD_INT 0
80579: PPUSH
80580: PPUSH
80581: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80582: LD_ADDR_VAR 0 2
80586: PUSH
80587: LD_INT 0
80589: PUSH
80590: LD_INT 0
80592: PUSH
80593: LD_INT 0
80595: PUSH
80596: LD_INT 0
80598: PUSH
80599: EMPTY
80600: LIST
80601: LIST
80602: LIST
80603: LIST
80604: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80605: LD_VAR 0 1
80609: NOT
80610: PUSH
80611: LD_VAR 0 1
80615: PPUSH
80616: CALL_OW 264
80620: PUSH
80621: LD_INT 12
80623: PUSH
80624: LD_INT 51
80626: PUSH
80627: LD_INT 32
80629: PUSH
80630: LD_INT 89
80632: PUSH
80633: EMPTY
80634: LIST
80635: LIST
80636: LIST
80637: LIST
80638: IN
80639: NOT
80640: OR
80641: IFFALSE 80645
// exit ;
80643: GO 80743
// for i := 1 to 3 do
80645: LD_ADDR_VAR 0 3
80649: PUSH
80650: DOUBLE
80651: LD_INT 1
80653: DEC
80654: ST_TO_ADDR
80655: LD_INT 3
80657: PUSH
80658: FOR_TO
80659: IFFALSE 80741
// begin tmp := GetCargo ( cargo , i ) ;
80661: LD_ADDR_VAR 0 4
80665: PUSH
80666: LD_VAR 0 1
80670: PPUSH
80671: LD_VAR 0 3
80675: PPUSH
80676: CALL_OW 289
80680: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80681: LD_ADDR_VAR 0 2
80685: PUSH
80686: LD_VAR 0 2
80690: PPUSH
80691: LD_VAR 0 3
80695: PPUSH
80696: LD_VAR 0 4
80700: PPUSH
80701: CALL_OW 1
80705: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80706: LD_ADDR_VAR 0 2
80710: PUSH
80711: LD_VAR 0 2
80715: PPUSH
80716: LD_INT 4
80718: PPUSH
80719: LD_VAR 0 2
80723: PUSH
80724: LD_INT 4
80726: ARRAY
80727: PUSH
80728: LD_VAR 0 4
80732: PLUS
80733: PPUSH
80734: CALL_OW 1
80738: ST_TO_ADDR
// end ;
80739: GO 80658
80741: POP
80742: POP
// end ;
80743: LD_VAR 0 2
80747: RET
// export function Length ( array ) ; begin
80748: LD_INT 0
80750: PPUSH
// result := array + 0 ;
80751: LD_ADDR_VAR 0 2
80755: PUSH
80756: LD_VAR 0 1
80760: PUSH
80761: LD_INT 0
80763: PLUS
80764: ST_TO_ADDR
// end ;
80765: LD_VAR 0 2
80769: RET
// export function PrepareArray ( array ) ; begin
80770: LD_INT 0
80772: PPUSH
// result := array diff 0 ;
80773: LD_ADDR_VAR 0 2
80777: PUSH
80778: LD_VAR 0 1
80782: PUSH
80783: LD_INT 0
80785: DIFF
80786: ST_TO_ADDR
// if not result [ 1 ] then
80787: LD_VAR 0 2
80791: PUSH
80792: LD_INT 1
80794: ARRAY
80795: NOT
80796: IFFALSE 80816
// result := Delete ( result , 1 ) ;
80798: LD_ADDR_VAR 0 2
80802: PUSH
80803: LD_VAR 0 2
80807: PPUSH
80808: LD_INT 1
80810: PPUSH
80811: CALL_OW 3
80815: ST_TO_ADDR
// end ; end_of_file
80816: LD_VAR 0 2
80820: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80821: LD_VAR 0 1
80825: PUSH
80826: LD_INT 200
80828: DOUBLE
80829: GREATEREQUAL
80830: IFFALSE 80838
80832: LD_INT 299
80834: DOUBLE
80835: LESSEQUAL
80836: IFTRUE 80840
80838: GO 80872
80840: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80841: LD_VAR 0 1
80845: PPUSH
80846: LD_VAR 0 2
80850: PPUSH
80851: LD_VAR 0 3
80855: PPUSH
80856: LD_VAR 0 4
80860: PPUSH
80861: LD_VAR 0 5
80865: PPUSH
80866: CALL 35723 0 5
80870: GO 80949
80872: LD_INT 300
80874: DOUBLE
80875: GREATEREQUAL
80876: IFFALSE 80884
80878: LD_INT 399
80880: DOUBLE
80881: LESSEQUAL
80882: IFTRUE 80886
80884: GO 80948
80886: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80887: LD_VAR 0 1
80891: PPUSH
80892: LD_VAR 0 2
80896: PPUSH
80897: LD_VAR 0 3
80901: PPUSH
80902: LD_VAR 0 4
80906: PPUSH
80907: LD_VAR 0 5
80911: PPUSH
80912: LD_VAR 0 6
80916: PPUSH
80917: LD_VAR 0 7
80921: PPUSH
80922: LD_VAR 0 8
80926: PPUSH
80927: LD_VAR 0 9
80931: PPUSH
80932: LD_VAR 0 10
80936: PPUSH
80937: LD_VAR 0 11
80941: PPUSH
80942: CALL 32056 0 11
80946: GO 80949
80948: POP
// end ;
80949: PPOPN 11
80951: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80952: LD_VAR 0 1
80956: PPUSH
80957: LD_VAR 0 2
80961: PPUSH
80962: LD_VAR 0 3
80966: PPUSH
80967: LD_VAR 0 4
80971: PPUSH
80972: LD_VAR 0 5
80976: PPUSH
80977: CALL 35459 0 5
// end ; end_of_file
80981: PPOPN 5
80983: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80984: LD_VAR 0 1
80988: PPUSH
80989: LD_VAR 0 2
80993: PPUSH
80994: LD_VAR 0 3
80998: PPUSH
80999: LD_VAR 0 4
81003: PPUSH
81004: LD_VAR 0 5
81008: PPUSH
81009: LD_VAR 0 6
81013: PPUSH
81014: CALL 19749 0 6
// end ;
81018: PPOPN 6
81020: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81021: LD_INT 0
81023: PPUSH
// begin if not units then
81024: LD_VAR 0 1
81028: NOT
81029: IFFALSE 81033
// exit ;
81031: GO 81033
// end ;
81033: PPOPN 7
81035: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81036: CALL 19720 0 0
// end ;
81040: PPOPN 1
81042: END
