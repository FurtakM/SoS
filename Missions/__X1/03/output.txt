// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 618 0 0
// PrepareArabian ;
  12: CALL 1049 0 0
// PrepareAmerican ;
  16: CALL 4074 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 8912 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 20
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 19
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 23
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 25
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 26
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 27
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 15
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 13
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// allowCargoEvacuation := false ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// americanStartRun := false ;
 300: LD_ADDR_EXP 14
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// end ; end_of_file
 308: LD_VAR 0 1
 312: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 313: LD_INT 0
 315: PPUSH
// uc_side := side ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_VAR 0 1
 325: ST_TO_ADDR
// uc_nation := nation ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_VAR 0 2
 335: ST_TO_ADDR
// vc_chassis := chassis ;
 336: LD_ADDR_OWVAR 37
 340: PUSH
 341: LD_VAR 0 3
 345: ST_TO_ADDR
// vc_engine := engine ;
 346: LD_ADDR_OWVAR 39
 350: PUSH
 351: LD_VAR 0 4
 355: ST_TO_ADDR
// vc_control := control ;
 356: LD_ADDR_OWVAR 38
 360: PUSH
 361: LD_VAR 0 5
 365: ST_TO_ADDR
// vc_weapon := weapon ;
 366: LD_ADDR_OWVAR 40
 370: PUSH
 371: LD_VAR 0 6
 375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 376: LD_ADDR_OWVAR 41
 380: PUSH
 381: LD_VAR 0 7
 385: ST_TO_ADDR
// result := CreateVehicle ;
 386: LD_ADDR_VAR 0 8
 390: PUSH
 391: CALL_OW 45
 395: ST_TO_ADDR
// end ;
 396: LD_VAR 0 8
 400: RET
// export function SayX ( units , ident ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// result := false ;
 405: LD_ADDR_VAR 0 3
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
// if not units then
 413: LD_VAR 0 1
 417: NOT
 418: IFFALSE 422
// exit ;
 420: GO 476
// for i in units do
 422: LD_ADDR_VAR 0 4
 426: PUSH
 427: LD_VAR 0 1
 431: PUSH
 432: FOR_IN
 433: IFFALSE 474
// if IsOk ( i ) then
 435: LD_VAR 0 4
 439: PPUSH
 440: CALL_OW 302
 444: IFFALSE 472
// begin Say ( i , ident ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_VAR 0 2
 455: PPUSH
 456: CALL_OW 88
// result := i ;
 460: LD_ADDR_VAR 0 3
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// break ;
 470: GO 474
// end ;
 472: GO 432
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// InitUc ;
 485: CALL_OW 18
// InitHc ;
 489: CALL_OW 19
// uc_side := 0 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 0
 500: ST_TO_ADDR
// uc_nation := 0 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 0
 508: ST_TO_ADDR
// for i = 1 to amount do
 509: LD_ADDR_VAR 0 4
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 2
 523: PUSH
 524: FOR_TO
 525: IFFALSE 607
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 527: LD_ADDR_OWVAR 29
 531: PUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: LD_INT 9
 545: PPUSH
 546: LD_INT 12
 548: PPUSH
 549: CALL_OW 12
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 558: LD_ADDR_OWVAR 35
 562: PUSH
 563: LD_INT 1
 565: NEG
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 12
 574: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_INT 12
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// end ;
 605: GO 524
 607: POP
 608: POP
// InitHc ;
 609: CALL_OW 19
// end ;
 613: LD_VAR 0 3
 617: RET
// export function CreateNature ; var i ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 4
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_OWVAR 67
 643: ARRAY
 644: PPUSH
 645: CALL 481 0 2
// for i := 1 to 2 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 2
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 21 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 21
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 2 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 2
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := 18 ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 18
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// for i := 1 to 2 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_INT 2
 763: PUSH
 764: FOR_TO
 765: IFFALSE 800
// begin hc_class := 13 ;
 767: LD_ADDR_OWVAR 28
 771: PUSH
 772: LD_INT 13
 774: ST_TO_ADDR
// hc_gallery :=  ;
 775: LD_ADDR_OWVAR 33
 779: PUSH
 780: LD_STRING 
 782: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 783: CALL_OW 44
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 764
 800: POP
 801: POP
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not observer or not unit then
 812: LD_VAR 0 1
 816: NOT
 817: PUSH
 818: LD_VAR 0 2
 822: NOT
 823: OR
 824: IFFALSE 828
// exit ;
 826: GO 876
// if not See ( GetSide ( observer ) , unit ) then
 828: LD_VAR 0 1
 832: PPUSH
 833: CALL_OW 255
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 292
 847: NOT
 848: IFFALSE 852
// exit ;
 850: GO 876
// result := GetDistUnits ( observer , unit ) < 12 ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: LD_VAR 0 1
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 12
 874: LESS
 875: ST_TO_ADDR
// end ;
 876: LD_VAR 0 3
 880: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 881: LD_INT 0
 883: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: CALL_OW 488
 906: PUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 428
 929: PUSH
 930: LD_INT 0
 932: EQUAL
 933: AND
 934: IFFALSE 968
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 936: LD_VAR 0 1
 940: PPUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 3
 963: PPUSH
 964: CALL_OW 48
// end ;
 968: LD_VAR 0 4
 972: RET
// export function ReverseArray ( array ) ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// if not array then
 977: LD_VAR 0 1
 981: NOT
 982: IFFALSE 986
// exit ;
 984: GO 1044
// result := [ ] ;
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: EMPTY
 992: ST_TO_ADDR
// for i := 1 to array do
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_VAR 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1042
// result := Insert ( result , 1 , array [ i ] ) ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_VAR 0 3
1033: ARRAY
1034: PPUSH
1035: CALL_OW 2
1039: ST_TO_ADDR
1040: GO 1008
1042: POP
1043: POP
// end ; end_of_file
1044: LD_VAR 0 2
1048: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
// uc_side := 5 ;
1055: LD_ADDR_OWVAR 20
1059: PUSH
1060: LD_INT 5
1062: ST_TO_ADDR
// uc_nation := 2 ;
1063: LD_ADDR_OWVAR 21
1067: PUSH
1068: LD_INT 2
1070: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
1071: LD_INT 5
1073: PPUSH
1074: CALL_OW 274
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 45
1084: PPUSH
1085: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_STRING Farmer
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 33520 0 3
1107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1108: LD_ADDR_EXP 37
1112: PUSH
1113: LD_STRING Omar
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 33520 0 3
1126: ST_TO_ADDR
// omarSquad := [ ] ;
1127: LD_ADDR_EXP 40
1131: PUSH
1132: EMPTY
1133: ST_TO_ADDR
// heikeSquad := [ ] ;
1134: LD_ADDR_EXP 41
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1141: LD_ADDR_EXP 42
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// omarCargo := [ ] ;
1148: LD_ADDR_EXP 43
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to 5 do
1155: LD_ADDR_VAR 0 2
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_INT 5
1167: PUSH
1168: FOR_TO
1169: IFFALSE 1327
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_VAR 0 2
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 380
// un := CreateHuman ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: CALL_OW 44
1218: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1219: LD_ADDR_EXP 40
1223: PUSH
1224: LD_EXP 40
1228: PUSH
1229: LD_VAR 0 3
1233: UNION
1234: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1235: LD_VAR 0 3
1239: PPUSH
1240: LD_INT 87
1242: PUSH
1243: LD_INT 30
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 91
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 15
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 79
1272: PUSH
1273: LD_INT 14
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 82
1282: PUSH
1283: LD_INT 13
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_VAR 0 2
1301: ARRAY
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL 881 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 93
1317: PPUSH
1318: LD_INT 21
1320: PPUSH
1321: CALL_OW 118
// end ;
1325: GO 1168
1327: POP
1328: POP
// uc_side := 2 ;
1329: LD_ADDR_OWVAR 20
1333: PUSH
1334: LD_INT 2
1336: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1337: LD_ADDR_EXP 28
1341: PUSH
1342: LD_STRING Heike
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_EXP 2
1355: PPUSH
1356: CALL 33520 0 3
1360: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1361: LD_ADDR_EXP 32
1365: PUSH
1366: LD_STRING Aviradze
1368: PPUSH
1369: LD_EXP 1
1373: NOT
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL 33520 0 3
1384: ST_TO_ADDR
// tmp := [ ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: EMPTY
1391: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 29
1396: PUSH
1397: LD_STRING Givi
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 33520 0 3
1415: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 30
1420: PUSH
1421: LD_STRING Mike
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 33520 0 3
1439: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 31
1444: PUSH
1445: LD_STRING Kamil
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 33520 0 3
1463: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 33
1468: PUSH
1469: LD_STRING Kaia
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 33520 0 3
1487: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 34
1492: PUSH
1493: LD_STRING Sophia
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 33520 0 3
1511: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1512: LD_ADDR_EXP 35
1516: PUSH
1517: LD_STRING Markov
1519: PPUSH
1520: LD_EXP 1
1524: NOT
1525: PPUSH
1526: LD_EXP 2
1530: PPUSH
1531: CALL 33520 0 3
1535: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1536: LD_ADDR_EXP 42
1540: PUSH
1541: LD_STRING 02_others
1543: PPUSH
1544: CALL_OW 31
1548: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_EXP 30
1558: PUSH
1559: LD_EXP 31
1563: PUSH
1564: LD_EXP 33
1568: PUSH
1569: LD_EXP 34
1573: PUSH
1574: LD_EXP 35
1578: PUSH
1579: LD_EXP 29
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_EXP 42
1596: ADD
1597: PUSH
1598: LD_INT 0
1600: DIFF
1601: ST_TO_ADDR
// heikeSquad := tmp ;
1602: LD_ADDR_EXP 41
1606: PUSH
1607: LD_VAR 0 4
1611: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1612: LD_EXP 41
1616: PPUSH
1617: LD_INT 25
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PPUSH
1627: CALL_OW 72
1631: PUSH
1632: LD_INT 3
1634: LESS
1635: IFFALSE 1685
// begin SetClass ( Kaia , 1 ) ;
1637: LD_EXP 33
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1649: LD_EXP 30
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1661: LD_EXP 29
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1673: LD_EXP 28
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_STRING 02_ape
1697: PPUSH
1698: CALL_OW 31
1702: UNION
1703: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1704: LD_EXP 28
1708: PPUSH
1709: LD_INT 92
1711: PPUSH
1712: LD_INT 17
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1722: LD_EXP 36
1726: PPUSH
1727: LD_INT 95
1729: PPUSH
1730: LD_INT 19
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1740: LD_EXP 37
1744: PPUSH
1745: LD_INT 89
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1758: LD_EXP 32
1762: PPUSH
1763: LD_INT 92
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1776: LD_EXP 37
1780: PPUSH
1781: LD_EXP 32
1785: PPUSH
1786: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1790: LD_EXP 32
1794: PPUSH
1795: LD_EXP 37
1799: PPUSH
1800: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1804: LD_EXP 28
1808: PUSH
1809: LD_EXP 36
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_EXP 37
1822: PPUSH
1823: CALL_OW 119
// if tmp then
1827: LD_VAR 0 4
1831: IFFALSE 1885
// for i in tmp do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1883
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 94
1853: PPUSH
1854: LD_INT 14
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_EXP 28
1876: PPUSH
1877: CALL_OW 119
// end ;
1881: GO 1843
1883: POP
1884: POP
// farmerSquad := [ ] ;
1885: LD_ADDR_EXP 39
1889: PUSH
1890: EMPTY
1891: ST_TO_ADDR
// uc_side := 5 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 5
1899: ST_TO_ADDR
// uc_nation := 2 ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// for i := 1 to 4 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 4
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// begin PrepareHuman ( false , 1 , 2 ) ;
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 380
// un := CreateHuman ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1947: LD_VAR 0 3
1951: PPUSH
1952: LD_INT 102
1954: PPUSH
1955: LD_INT 27
1957: PPUSH
1958: LD_INT 4
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1968: LD_ADDR_EXP 39
1972: PUSH
1973: LD_EXP 39
1977: PUSH
1978: LD_VAR 0 3
1982: UNION
1983: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_EXP 37
1993: PPUSH
1994: CALL_OW 119
// end ;
1998: GO 1921
2000: POP
2001: POP
// for i := 1 to 2 do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 2
2014: PUSH
2015: FOR_TO
2016: IFFALSE 2094
// begin PrepareHuman ( false , 2 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 108
2048: PPUSH
2049: LD_INT 62
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2062: LD_ADDR_EXP 39
2066: PUSH
2067: LD_EXP 39
2071: PUSH
2072: LD_VAR 0 3
2076: UNION
2077: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2078: LD_VAR 0 3
2082: PPUSH
2083: LD_EXP 37
2087: PPUSH
2088: CALL_OW 119
// end ;
2092: GO 2015
2094: POP
2095: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2096: LD_INT 109
2098: PPUSH
2099: LD_INT 63
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 15
2107: NEG
2108: PPUSH
2109: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2113: LD_INT 109
2115: PPUSH
2116: LD_INT 63
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL_OW 331
// end ;
2126: LD_VAR 0 1
2130: RET
// export function PrepareIbrahim ( x , y ) ; begin
2131: LD_INT 0
2133: PPUSH
// uc_side := 6 ;
2134: LD_ADDR_OWVAR 20
2138: PUSH
2139: LD_INT 6
2141: ST_TO_ADDR
// uc_nation := 3 ;
2142: LD_ADDR_OWVAR 21
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_STRING IbrahimRu
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 33520 0 3
2168: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2169: LD_EXP 38
2173: PPUSH
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_INT 8
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 50
// end ;
2194: LD_VAR 0 3
2198: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2199: LD_EXP 37
2203: PUSH
2204: LD_EXP 40
2208: ADD
2209: PPUSH
2210: LD_INT 95
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 72
2224: IFFALSE 2280
2226: GO 2228
2228: DISABLE
2229: LD_INT 0
2231: PPUSH
// begin enable ;
2232: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_EXP 37
2242: PUSH
2243: LD_EXP 40
2247: ADD
2248: PPUSH
2249: LD_INT 95
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 72
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2278
// RemoveUnit ( i ) ;
2267: LD_VAR 0 1
2271: PPUSH
2272: CALL_OW 64
2276: GO 2264
2278: POP
2279: POP
// end ;
2280: PPOPN 1
2282: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2283: LD_EXP 3
2287: PUSH
2288: LD_EXP 36
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: CALL_OW 308
2300: AND
2301: IFFALSE 3084
2303: GO 2305
2305: DISABLE
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2312: LD_EXP 36
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 60
2322: PPUSH
2323: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2327: LD_EXP 36
2331: PPUSH
2332: LD_INT 110
2334: PPUSH
2335: LD_INT 61
2337: PPUSH
2338: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 39
2351: PPUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 72
2366: ST_TO_ADDR
// if tmp then
2367: LD_VAR 0 2
2371: IFFALSE 2465
// begin for i := 1 to 2 do
2373: LD_ADDR_VAR 0 1
2377: PUSH
2378: DOUBLE
2379: LD_INT 1
2381: DEC
2382: ST_TO_ADDR
2383: LD_INT 2
2385: PUSH
2386: FOR_TO
2387: IFFALSE 2463
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PPUSH
2400: LD_INT 5
2402: PPUSH
2403: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2407: LD_VAR 0 2
2411: PUSH
2412: LD_VAR 0 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2440: LD_VAR 0 2
2444: PUSH
2445: LD_VAR 0 1
2449: ARRAY
2450: PPUSH
2451: LD_INT 107
2453: PPUSH
2454: LD_INT 66
2456: PPUSH
2457: CALL_OW 171
// end ;
2461: GO 2386
2463: POP
2464: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_EXP 39
2474: PPUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 72
2489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 39
2506: PPUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: ST_TO_ADDR
// until tmp ;
2522: LD_VAR 0 2
2526: IFFALSE 2490
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 31
2535: PPUSH
2536: LD_INT 102
2538: PPUSH
2539: LD_INT 69
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2556: LD_EXP 39
2560: PPUSH
2561: LD_INT 3
2563: PUSH
2564: LD_INT 60
2566: PUSH
2567: EMPTY
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 72
2592: IFFALSE 2549
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: LD_EXP 39
2603: PPUSH
2604: LD_INT 25
2606: PUSH
2607: LD_INT 2
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2619: LD_VAR 0 2
2623: PPUSH
2624: LD_INT 4
2626: PPUSH
2627: LD_INT 116
2629: PPUSH
2630: LD_INT 70
2632: PPUSH
2633: LD_INT 5
2635: PPUSH
2636: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
2640: LD_VAR 0 2
2644: PPUSH
2645: LD_INT 31
2647: PPUSH
2648: LD_INT 108
2650: PPUSH
2651: LD_INT 50
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2661: LD_INT 35
2663: PPUSH
2664: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2668: LD_INT 22
2670: PUSH
2671: LD_INT 5
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 30
2680: PUSH
2681: LD_INT 4
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 57
2693: PUSH
2694: EMPTY
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: IFFALSE 2661
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2712: LD_ADDR_VAR 0 3
2716: PUSH
2717: LD_INT 22
2719: PUSH
2720: LD_INT 5
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 30
2729: PUSH
2730: LD_INT 4
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 3
2739: PUSH
2740: LD_INT 57
2742: PUSH
2743: EMPTY
2744: LIST
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: PPUSH
2755: CALL_OW 69
2759: PUSH
2760: LD_INT 1
2762: ARRAY
2763: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2764: LD_ADDR_VAR 0 2
2768: PUSH
2769: LD_EXP 39
2773: PPUSH
2774: LD_INT 25
2776: PUSH
2777: LD_INT 1
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PPUSH
2784: CALL_OW 72
2788: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2789: LD_VAR 0 2
2793: PPUSH
2794: LD_VAR 0 3
2798: PPUSH
2799: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2803: LD_INT 35
2805: PPUSH
2806: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2810: LD_INT 22
2812: PUSH
2813: LD_INT 5
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: LD_INT 31
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 57
2835: PUSH
2836: EMPTY
2837: LIST
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: LIST
2847: PPUSH
2848: CALL_OW 69
2852: PUSH
2853: LD_INT 2
2855: GREATEREQUAL
2856: IFFALSE 2803
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2858: LD_ADDR_VAR 0 2
2862: PUSH
2863: LD_EXP 39
2867: PPUSH
2868: LD_INT 25
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 72
2882: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2883: LD_VAR 0 2
2887: PUSH
2888: LD_INT 1
2890: ARRAY
2891: PPUSH
2892: LD_INT 5
2894: PPUSH
2895: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2899: LD_VAR 0 2
2903: PUSH
2904: LD_INT 2
2906: ARRAY
2907: PUSH
2908: LD_VAR 0 2
2912: PUSH
2913: LD_INT 3
2915: ARRAY
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PPUSH
2921: LD_VAR 0 3
2925: PPUSH
2926: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2930: LD_VAR 0 2
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PUSH
2939: LD_VAR 0 2
2943: PUSH
2944: LD_INT 3
2946: ARRAY
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2959: LD_VAR 0 2
2963: PUSH
2964: LD_INT 2
2966: ARRAY
2967: PUSH
2968: LD_VAR 0 2
2972: PUSH
2973: LD_INT 3
2975: ARRAY
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PPUSH
2981: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2985: LD_ADDR_VAR 0 4
2989: PUSH
2990: LD_INT 22
2992: PUSH
2993: LD_INT 5
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: LD_INT 30
3002: PUSH
3003: LD_INT 31
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 69
3018: ST_TO_ADDR
// for i := 1 to 2 do
3019: LD_ADDR_VAR 0 1
3023: PUSH
3024: DOUBLE
3025: LD_INT 1
3027: DEC
3028: ST_TO_ADDR
3029: LD_INT 2
3031: PUSH
3032: FOR_TO
3033: IFFALSE 3067
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3035: LD_VAR 0 2
3039: PUSH
3040: LD_VAR 0 1
3044: PUSH
3045: LD_INT 1
3047: PLUS
3048: ARRAY
3049: PPUSH
3050: LD_VAR 0 4
3054: PUSH
3055: LD_VAR 0 1
3059: ARRAY
3060: PPUSH
3061: CALL_OW 180
3065: GO 3032
3067: POP
3068: POP
// wait ( 1 1$00 ) ;
3069: LD_INT 2100
3071: PPUSH
3072: CALL_OW 67
// farmerBaseReady := true ;
3076: LD_ADDR_EXP 4
3080: PUSH
3081: LD_INT 1
3083: ST_TO_ADDR
// end ;
3084: PPOPN 4
3086: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3087: LD_EXP 4
3091: PUSH
3092: LD_EXP 11
3096: NOT
3097: AND
3098: IFFALSE 3620
3100: GO 3102
3102: DISABLE
3103: LD_INT 0
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
// begin enable ;
3110: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3111: LD_ADDR_VAR 0 3
3115: PUSH
3116: LD_EXP 39
3120: PPUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 72
3135: PUSH
3136: LD_EXP 36
3140: ADD
3141: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3142: LD_ADDR_VAR 0 2
3146: PUSH
3147: LD_EXP 39
3151: PPUSH
3152: LD_INT 25
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PPUSH
3162: CALL_OW 72
3166: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3167: LD_ADDR_VAR 0 5
3171: PUSH
3172: LD_INT 22
3174: PUSH
3175: LD_INT 5
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 21
3184: PUSH
3185: LD_INT 3
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 24
3197: PUSH
3198: LD_INT 1000
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3219: LD_ADDR_VAR 0 4
3223: PUSH
3224: LD_INT 22
3226: PUSH
3227: LD_INT 5
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 30
3236: PUSH
3237: LD_INT 4
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3253: LD_VAR 0 4
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: CALL_OW 302
3266: IFFALSE 3330
// for i in sol do
3268: LD_ADDR_VAR 0 1
3272: PUSH
3273: LD_VAR 0 3
3277: PUSH
3278: FOR_IN
3279: IFFALSE 3328
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 256
3290: PUSH
3291: LD_INT 999
3293: LESS
3294: PUSH
3295: LD_VAR 0 1
3299: PPUSH
3300: CALL_OW 310
3304: NOT
3305: AND
3306: IFFALSE 3326
// ComEnterUnit ( i , arm [ 1 ] ) ;
3308: LD_VAR 0 1
3312: PPUSH
3313: LD_VAR 0 4
3317: PUSH
3318: LD_INT 1
3320: ARRAY
3321: PPUSH
3322: CALL_OW 120
3326: GO 3278
3328: POP
3329: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3330: LD_VAR 0 2
3334: NOT
3335: PUSH
3336: LD_INT 22
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 21
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PPUSH
3360: CALL_OW 69
3364: NOT
3365: AND
3366: IFFALSE 3458
// begin uc_side := 5 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 5
3375: ST_TO_ADDR
// uc_nation := 2 ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 2
3383: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3384: LD_INT 0
3386: PPUSH
3387: LD_INT 2
3389: PPUSH
3390: LD_INT 2
3392: PPUSH
3393: CALL_OW 380
// eng := CreateHuman ;
3397: LD_ADDR_VAR 0 2
3401: PUSH
3402: CALL_OW 44
3406: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3407: LD_VAR 0 2
3411: PPUSH
3412: LD_INT 102
3414: PPUSH
3415: LD_INT 8
3417: PPUSH
3418: LD_INT 0
3420: PPUSH
3421: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3425: LD_VAR 0 2
3429: PPUSH
3430: LD_INT 110
3432: PPUSH
3433: LD_INT 60
3435: PPUSH
3436: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3440: LD_ADDR_EXP 39
3444: PUSH
3445: LD_EXP 39
3449: PUSH
3450: LD_VAR 0 2
3454: UNION
3455: ST_TO_ADDR
// end else
3456: GO 3620
// begin for i in eng do
3458: LD_ADDR_VAR 0 1
3462: PUSH
3463: LD_VAR 0 2
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3618
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3471: LD_INT 10
3473: PPUSH
3474: LD_INT 1
3476: PPUSH
3477: CALL_OW 287
3481: IFFALSE 3532
// begin if IsInUnit ( i ) then
3483: LD_VAR 0 1
3487: PPUSH
3488: CALL_OW 310
3492: IFFALSE 3503
// ComExitBuilding ( i ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3503: LD_VAR 0 1
3507: PPUSH
3508: LD_INT 10
3510: PPUSH
3511: CALL_OW 308
3515: NOT
3516: IFFALSE 3530
// AddComMoveToArea ( i , collectFarmerArea ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_INT 10
3525: PPUSH
3526: CALL_OW 173
// end else
3530: GO 3616
// begin if damagedBuilding then
3532: LD_VAR 0 5
3536: IFFALSE 3580
// begin if IsInUnit ( i ) then
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 310
3547: IFFALSE 3560
// ComExitBuilding ( i ) else
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL_OW 122
3558: GO 3578
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3560: LD_VAR 0 1
3564: PPUSH
3565: LD_VAR 0 5
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: CALL_OW 130
// end else
3578: GO 3616
// if not IsInUnit ( i ) and not HasTask ( i ) then
3580: LD_VAR 0 1
3584: PPUSH
3585: CALL_OW 310
3589: NOT
3590: PUSH
3591: LD_VAR 0 1
3595: PPUSH
3596: CALL_OW 314
3600: NOT
3601: AND
3602: IFFALSE 3616
// ComEnterUnit ( i , arDepot ) ;
3604: LD_VAR 0 1
3608: PPUSH
3609: LD_INT 5
3611: PPUSH
3612: CALL_OW 120
// end ; end ;
3616: GO 3468
3618: POP
3619: POP
// end ; end ;
3620: PPOPN 5
3622: END
// export function StartCargoEvacuation ; begin
3623: LD_INT 0
3625: PPUSH
// while omarCargoCounter > 0 do
3626: LD_EXP 21
3630: PUSH
3631: LD_INT 0
3633: GREATER
3634: IFFALSE 3951
// begin wait ( 0 0$40 ) ;
3636: LD_INT 1400
3638: PPUSH
3639: CALL_OW 67
// omarCargo := PrepareCargo ;
3643: LD_ADDR_EXP 43
3647: PUSH
3648: CALL 3956 0 0
3652: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3653: LD_EXP 43
3657: PPUSH
3658: LD_INT 0
3660: PPUSH
3661: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3665: LD_EXP 43
3669: PPUSH
3670: LD_INT 107
3672: PPUSH
3673: LD_INT 59
3675: PPUSH
3676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3680: LD_INT 35
3682: PPUSH
3683: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3687: LD_EXP 43
3691: PPUSH
3692: LD_INT 107
3694: PPUSH
3695: LD_INT 59
3697: PPUSH
3698: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3702: LD_EXP 43
3706: PPUSH
3707: CALL_OW 302
3711: NOT
3712: PUSH
3713: LD_EXP 43
3717: PPUSH
3718: CALL_OW 301
3722: OR
3723: IFFALSE 3727
// continue ;
3725: GO 3680
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3727: LD_EXP 43
3731: PPUSH
3732: LD_INT 107
3734: PPUSH
3735: LD_INT 59
3737: PPUSH
3738: CALL_OW 307
3742: PUSH
3743: LD_EXP 43
3747: PPUSH
3748: LD_INT 5
3750: PPUSH
3751: CALL_OW 296
3755: PUSH
3756: LD_INT 6
3758: LESS
3759: OR
3760: IFFALSE 3680
// SetTag ( omarCargo , 1 ) ;
3762: LD_EXP 43
3766: PPUSH
3767: LD_INT 1
3769: PPUSH
3770: CALL_OW 109
// wait ( 0 0$05 ) ;
3774: LD_INT 175
3776: PPUSH
3777: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3781: LD_EXP 43
3785: PPUSH
3786: LD_INT 5
3788: PPUSH
3789: LD_INT 1
3791: PPUSH
3792: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3796: LD_EXP 43
3800: PPUSH
3801: LD_INT 103
3803: PPUSH
3804: LD_INT 9
3806: PPUSH
3807: CALL_OW 171
// wait ( 0 0$1 ) ;
3811: LD_INT 35
3813: PPUSH
3814: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3818: LD_EXP 43
3822: PPUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 100
3828: PPUSH
3829: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3840: LD_EXP 43
3844: PPUSH
3845: LD_INT 103
3847: PPUSH
3848: LD_INT 9
3850: PPUSH
3851: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3855: LD_EXP 43
3859: PPUSH
3860: CALL_OW 302
3864: NOT
3865: PUSH
3866: LD_EXP 43
3870: PPUSH
3871: CALL_OW 301
3875: OR
3876: IFFALSE 3880
// continue ;
3878: GO 3833
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3880: LD_EXP 43
3884: PPUSH
3885: LD_INT 103
3887: PPUSH
3888: LD_INT 9
3890: PPUSH
3891: CALL_OW 307
3895: PUSH
3896: LD_EXP 43
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: CALL_OW 308
3908: OR
3909: PUSH
3910: LD_EXP 43
3914: PPUSH
3915: CALL_OW 110
3919: PUSH
3920: LD_INT 0
3922: GREATER
3923: AND
3924: IFFALSE 3833
// RemoveUnit ( omarCargo ) ;
3926: LD_EXP 43
3930: PPUSH
3931: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
3935: LD_ADDR_EXP 21
3939: PUSH
3940: LD_EXP 21
3944: PUSH
3945: LD_INT 1
3947: MINUS
3948: ST_TO_ADDR
// end ;
3949: GO 3626
// end ;
3951: LD_VAR 0 1
3955: RET
// export function PrepareCargo ; var un , veh ; begin
3956: LD_INT 0
3958: PPUSH
3959: PPUSH
3960: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3961: LD_ADDR_VAR 0 3
3965: PUSH
3966: LD_INT 5
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: LD_INT 13
3974: PPUSH
3975: LD_INT 1
3977: PPUSH
3978: LD_INT 1
3980: PPUSH
3981: LD_INT 32
3983: PPUSH
3984: LD_INT 80
3986: PPUSH
3987: CALL 313 0 7
3991: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3992: LD_VAR 0 3
3996: PPUSH
3997: LD_INT 4
3999: PPUSH
4000: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4004: LD_VAR 0 3
4008: PPUSH
4009: LD_INT 101
4011: PPUSH
4012: LD_INT 8
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4022: LD_INT 0
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: LD_INT 2
4030: PPUSH
4031: CALL_OW 380
// un := CreateHuman ;
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: CALL_OW 44
4044: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4045: LD_VAR 0 2
4049: PPUSH
4050: LD_VAR 0 3
4054: PPUSH
4055: CALL_OW 52
// result := veh ;
4059: LD_ADDR_VAR 0 1
4063: PUSH
4064: LD_VAR 0 3
4068: ST_TO_ADDR
// end ; end_of_file
4069: LD_VAR 0 1
4073: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4074: LD_INT 0
4076: PPUSH
4077: PPUSH
4078: PPUSH
// usForces := [ ] ;
4079: LD_ADDR_EXP 44
4083: PUSH
4084: EMPTY
4085: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4086: LD_ADDR_EXP 46
4090: PUSH
4091: LD_INT 6
4093: PUSH
4094: LD_INT 32
4096: PUSH
4097: LD_INT 27
4099: PUSH
4100: LD_INT 1
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 4
4111: PUSH
4112: LD_INT 43
4114: PUSH
4115: LD_INT 24
4117: PUSH
4118: LD_INT 5
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: PUSH
4127: LD_INT 27
4129: PUSH
4130: LD_INT 29
4132: PUSH
4133: LD_INT 21
4135: PUSH
4136: LD_INT 0
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4150: LD_INT 11
4152: PPUSH
4153: CALL_OW 274
4157: PPUSH
4158: LD_INT 1
4160: PPUSH
4161: LD_INT 150
4163: PUSH
4164: LD_INT 120
4166: PUSH
4167: LD_INT 100
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: PUSH
4175: LD_OWVAR 67
4179: ARRAY
4180: PPUSH
4181: CALL_OW 277
// if Difficulty = 1 then
4185: LD_OWVAR 67
4189: PUSH
4190: LD_INT 1
4192: EQUAL
4193: IFFALSE 4202
// RemoveUnit ( hillBun ) ;
4195: LD_INT 14
4197: PPUSH
4198: CALL_OW 64
// uc_side := 1 ;
4202: LD_ADDR_OWVAR 20
4206: PUSH
4207: LD_INT 1
4209: ST_TO_ADDR
// uc_nation := 1 ;
4210: LD_ADDR_OWVAR 21
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// hc_gallery :=  ;
4218: LD_ADDR_OWVAR 33
4222: PUSH
4223: LD_STRING 
4225: ST_TO_ADDR
// hc_name :=  ;
4226: LD_ADDR_OWVAR 26
4230: PUSH
4231: LD_STRING 
4233: ST_TO_ADDR
// hc_importance := 0 ;
4234: LD_ADDR_OWVAR 32
4238: PUSH
4239: LD_INT 0
4241: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4242: LD_INT 1
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 3
4250: PPUSH
4251: CALL_OW 380
// usCommander := CreateHuman ;
4255: LD_ADDR_EXP 45
4259: PUSH
4260: CALL_OW 44
4264: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4265: LD_EXP 45
4269: PPUSH
4270: LD_INT 11
4272: PPUSH
4273: CALL_OW 52
// if Difficulty > 1 then
4277: LD_OWVAR 67
4281: PUSH
4282: LD_INT 1
4284: GREATER
4285: IFFALSE 4367
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4287: LD_INT 0
4289: PPUSH
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 1
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: LD_INT 3
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: PUSH
4307: LD_OWVAR 67
4311: ARRAY
4312: PPUSH
4313: CALL_OW 380
// un := CreateHuman ;
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: CALL_OW 44
4326: ST_TO_ADDR
// usForces := usForces union un ;
4327: LD_ADDR_EXP 44
4331: PUSH
4332: LD_EXP 44
4336: PUSH
4337: LD_VAR 0 3
4341: UNION
4342: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4343: LD_VAR 0 3
4347: PPUSH
4348: LD_INT 1
4350: PPUSH
4351: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4355: LD_VAR 0 3
4359: PPUSH
4360: LD_INT 14
4362: PPUSH
4363: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4367: LD_ADDR_VAR 0 2
4371: PUSH
4372: DOUBLE
4373: LD_INT 1
4375: DEC
4376: ST_TO_ADDR
4377: LD_INT 2
4379: PUSH
4380: LD_INT 3
4382: PUSH
4383: LD_INT 4
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_OWVAR 67
4395: ARRAY
4396: PUSH
4397: FOR_TO
4398: IFFALSE 4540
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4400: LD_INT 0
4402: PPUSH
4403: LD_INT 1
4405: PPUSH
4406: LD_INT 1
4408: PUSH
4409: LD_INT 2
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_OWVAR 67
4424: ARRAY
4425: PPUSH
4426: CALL_OW 380
// un := CreateHuman ;
4430: LD_ADDR_VAR 0 3
4434: PUSH
4435: CALL_OW 44
4439: ST_TO_ADDR
// usForces := usForces union un ;
4440: LD_ADDR_EXP 44
4444: PUSH
4445: LD_EXP 44
4449: PUSH
4450: LD_VAR 0 3
4454: UNION
4455: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4456: LD_VAR 0 3
4460: PPUSH
4461: LD_INT 39
4463: PPUSH
4464: LD_INT 24
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 50
// if i < 3 then
4477: LD_VAR 0 2
4481: PUSH
4482: LD_INT 3
4484: LESS
4485: IFFALSE 4538
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_INT 22
4494: PUSH
4495: LD_INT 1
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 58
4504: PUSH
4505: EMPTY
4506: LIST
4507: PUSH
4508: LD_INT 30
4510: PUSH
4511: LD_INT 31
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: LIST
4522: PPUSH
4523: CALL_OW 69
4527: PUSH
4528: LD_VAR 0 2
4532: ARRAY
4533: PPUSH
4534: CALL_OW 120
// end ;
4538: GO 4397
4540: POP
4541: POP
// for i := 1 to 2 do
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: DOUBLE
4548: LD_INT 1
4550: DEC
4551: ST_TO_ADDR
4552: LD_INT 2
4554: PUSH
4555: FOR_TO
4556: IFFALSE 4620
// begin PrepareHuman ( false , 2 , 2 ) ;
4558: LD_INT 0
4560: PPUSH
4561: LD_INT 2
4563: PPUSH
4564: LD_INT 2
4566: PPUSH
4567: CALL_OW 380
// un := CreateHuman ;
4571: LD_ADDR_VAR 0 3
4575: PUSH
4576: CALL_OW 44
4580: ST_TO_ADDR
// usForces := usForces union un ;
4581: LD_ADDR_EXP 44
4585: PUSH
4586: LD_EXP 44
4590: PUSH
4591: LD_VAR 0 3
4595: UNION
4596: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: LD_INT 39
4604: PPUSH
4605: LD_INT 24
4607: PPUSH
4608: LD_INT 4
4610: PPUSH
4611: LD_INT 0
4613: PPUSH
4614: CALL_OW 50
// end ;
4618: GO 4555
4620: POP
4621: POP
// PrepareHuman ( false , 4 , 1 ) ;
4622: LD_INT 0
4624: PPUSH
4625: LD_INT 4
4627: PPUSH
4628: LD_INT 1
4630: PPUSH
4631: CALL_OW 380
// un := CreateHuman ;
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: CALL_OW 44
4644: ST_TO_ADDR
// usForces := usForces union un ;
4645: LD_ADDR_EXP 44
4649: PUSH
4650: LD_EXP 44
4654: PUSH
4655: LD_VAR 0 3
4659: UNION
4660: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_INT 39
4668: PPUSH
4669: LD_INT 24
4671: PPUSH
4672: LD_INT 4
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: CALL_OW 50
// end ;
4682: LD_VAR 0 1
4686: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4687: LD_EXP 44
4691: PUSH
4692: LD_EXP 6
4696: NOT
4697: AND
4698: PUSH
4699: LD_EXP 14
4703: NOT
4704: AND
4705: IFFALSE 5136
4707: GO 4709
4709: DISABLE
4710: LD_INT 0
4712: PPUSH
4713: PPUSH
4714: PPUSH
4715: PPUSH
4716: PPUSH
// begin enable ;
4717: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4718: LD_ADDR_VAR 0 3
4722: PUSH
4723: LD_EXP 44
4727: PPUSH
4728: LD_INT 25
4730: PUSH
4731: LD_INT 2
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PPUSH
4738: CALL_OW 72
4742: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: LD_EXP 44
4752: PPUSH
4753: LD_INT 25
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PPUSH
4763: CALL_OW 72
4767: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4768: LD_ADDR_VAR 0 5
4772: PUSH
4773: LD_EXP 44
4777: PPUSH
4778: LD_INT 25
4780: PUSH
4781: LD_INT 4
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PPUSH
4788: CALL_OW 72
4792: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4793: LD_INT 7
4795: PPUSH
4796: LD_INT 22
4798: PUSH
4799: LD_INT 2
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PUSH
4811: LD_INT 1
4813: EQUAL
4814: IFFALSE 4890
// for i in sol do
4816: LD_ADDR_VAR 0 1
4820: PUSH
4821: LD_VAR 0 4
4825: PUSH
4826: FOR_IN
4827: IFFALSE 4888
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4829: LD_VAR 0 1
4833: PPUSH
4834: CALL_OW 310
4838: NOT
4839: PUSH
4840: LD_VAR 0 1
4844: PPUSH
4845: CALL_OW 310
4849: PPUSH
4850: CALL_OW 266
4854: PUSH
4855: LD_INT 4
4857: EQUAL
4858: NOT
4859: OR
4860: IFFALSE 4886
// begin ComExitBuilding ( i ) ;
4862: LD_VAR 0 1
4866: PPUSH
4867: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4871: LD_VAR 0 1
4875: PPUSH
4876: LD_INT 37
4878: PPUSH
4879: LD_INT 23
4881: PPUSH
4882: CALL_OW 174
// end ;
4886: GO 4826
4888: POP
4889: POP
// if eng then
4890: LD_VAR 0 3
4894: IFFALSE 5136
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4896: LD_ADDR_VAR 0 2
4900: PUSH
4901: LD_INT 22
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 95
4913: PUSH
4914: LD_INT 7
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 3
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 3
4933: PUSH
4934: LD_INT 24
4936: PUSH
4937: LD_INT 1000
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: PPUSH
4954: CALL_OW 69
4958: ST_TO_ADDR
// if b then
4959: LD_VAR 0 2
4963: IFFALSE 4994
// begin ComExitBuilding ( eng ) ;
4965: LD_VAR 0 3
4969: PPUSH
4970: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4974: LD_VAR 0 3
4978: PPUSH
4979: LD_VAR 0 2
4983: PUSH
4984: LD_INT 1
4986: ARRAY
4987: PPUSH
4988: CALL_OW 190
// end else
4992: GO 5136
// begin for i in eng do
4994: LD_ADDR_VAR 0 1
4998: PUSH
4999: LD_VAR 0 3
5003: PUSH
5004: FOR_IN
5005: IFFALSE 5134
// if not HasTask ( i ) then
5007: LD_VAR 0 1
5011: PPUSH
5012: CALL_OW 314
5016: NOT
5017: IFFALSE 5132
// begin if americanBuildList then
5019: LD_EXP 46
5023: IFFALSE 5108
// begin if IsInUnit ( i ) then
5025: LD_VAR 0 1
5029: PPUSH
5030: CALL_OW 310
5034: IFFALSE 5045
// ComExitBuilding ( i ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5045: LD_VAR 0 1
5049: PPUSH
5050: LD_EXP 46
5054: PUSH
5055: LD_INT 1
5057: ARRAY
5058: PUSH
5059: LD_INT 1
5061: ARRAY
5062: PPUSH
5063: LD_EXP 46
5067: PUSH
5068: LD_INT 1
5070: ARRAY
5071: PUSH
5072: LD_INT 2
5074: ARRAY
5075: PPUSH
5076: LD_EXP 46
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PUSH
5085: LD_INT 3
5087: ARRAY
5088: PPUSH
5089: LD_EXP 46
5093: PUSH
5094: LD_INT 1
5096: ARRAY
5097: PUSH
5098: LD_INT 4
5100: ARRAY
5101: PPUSH
5102: CALL_OW 205
// end else
5106: GO 5132
// if not IsInUnit ( i ) then
5108: LD_VAR 0 1
5112: PPUSH
5113: CALL_OW 310
5117: NOT
5118: IFFALSE 5132
// ComEnterUnit ( i , usDepot ) ;
5120: LD_VAR 0 1
5124: PPUSH
5125: LD_INT 11
5127: PPUSH
5128: CALL_OW 120
// end ;
5132: GO 5004
5134: POP
5135: POP
// end ; end ; end ;
5136: PPOPN 5
5138: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5139: LD_INT 0
5141: PPUSH
5142: PPUSH
5143: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5144: LD_ADDR_VAR 0 3
5148: PUSH
5149: LD_INT 35
5151: PUSH
5152: LD_INT 45
5154: PUSH
5155: LD_INT 48
5157: PUSH
5158: LD_EXP 57
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
// for i in tech do
5169: LD_ADDR_VAR 0 4
5173: PUSH
5174: LD_VAR 0 3
5178: PUSH
5179: FOR_IN
5180: IFFALSE 5198
// AddComResearch ( lab , i ) ;
5182: LD_VAR 0 1
5186: PPUSH
5187: LD_VAR 0 4
5191: PPUSH
5192: CALL_OW 184
5196: GO 5179
5198: POP
5199: POP
// end ;
5200: LD_VAR 0 2
5204: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5205: LD_EXP 12
5209: PUSH
5210: LD_EXP 23
5214: PUSH
5215: LD_EXP 27
5219: LESSEQUAL
5220: AND
5221: IFFALSE 5246
5223: GO 5225
5225: DISABLE
// begin enable ;
5226: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5227: LD_INT 35
5229: PPUSH
5230: LD_INT 2065
5232: PPUSH
5233: CALL_OW 12
5237: PPUSH
5238: CALL_OW 67
// SendConvoy ;
5242: CALL 5344 0 0
// end ;
5246: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5247: LD_EXP 6
5251: PUSH
5252: LD_EXP 18
5256: AND
5257: IFFALSE 5343
5259: GO 5261
5261: DISABLE
// begin if americanHasEscaped then
5262: LD_EXP 8
5266: IFFALSE 5277
// wait ( 3 3$20 ) else
5268: LD_INT 7000
5270: PPUSH
5271: CALL_OW 67
5275: GO 5284
// wait ( 6 6$40 ) ;
5277: LD_INT 14000
5279: PPUSH
5280: CALL_OW 67
// SendAttack ;
5284: CALL 6087 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5288: LD_INT 14000
5290: PUSH
5291: LD_INT 11900
5293: PUSH
5294: LD_INT 9800
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: LD_OWVAR 67
5306: ARRAY
5307: PPUSH
5308: CALL_OW 67
// SendAttack ;
5312: CALL 6087 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5316: LD_EXP 19
5320: PUSH
5321: LD_INT 6
5323: PUSH
5324: LD_INT 7
5326: PUSH
5327: LD_INT 8
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PUSH
5335: LD_OWVAR 67
5339: ARRAY
5340: LESS
5341: IFFALSE 5288
// end ;
5343: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5344: LD_INT 0
5346: PPUSH
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
5353: PPUSH
// road := rand ( 1 , 2 ) ;
5354: LD_ADDR_VAR 0 4
5358: PUSH
5359: LD_INT 1
5361: PPUSH
5362: LD_INT 2
5364: PPUSH
5365: CALL_OW 12
5369: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5370: LD_ADDR_VAR 0 8
5374: PUSH
5375: LD_INT 3
5377: PUSH
5378: LD_INT 8
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: LD_VAR 0 4
5389: ARRAY
5390: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5391: LD_ADDR_VAR 0 5
5395: PUSH
5396: LD_INT 35
5398: PUSH
5399: LD_INT 66
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: PUSH
5410: LD_INT 101
5412: PUSH
5413: LD_INT 8
5415: PUSH
5416: LD_INT 4
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5428: LD_ADDR_VAR 0 6
5432: PUSH
5433: LD_INT 34
5435: PUSH
5436: LD_INT 67
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 38
5445: PUSH
5446: LD_INT 62
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 43
5455: PUSH
5456: LD_INT 54
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: LD_INT 57
5465: PUSH
5466: LD_INT 57
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: PUSH
5473: LD_INT 77
5475: PUSH
5476: LD_INT 71
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PUSH
5483: LD_INT 86
5485: PUSH
5486: LD_INT 60
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 89
5495: PUSH
5496: LD_INT 35
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PUSH
5503: LD_INT 93
5505: PUSH
5506: LD_INT 17
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 97
5515: PUSH
5516: LD_INT 10
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 103
5525: PUSH
5526: LD_INT 9
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: ST_TO_ADDR
// if road = 2 then
5545: LD_VAR 0 4
5549: PUSH
5550: LD_INT 2
5552: EQUAL
5553: IFFALSE 5570
// points := ReverseArray ( points ) ;
5555: LD_ADDR_VAR 0 6
5559: PUSH
5560: LD_VAR 0 6
5564: PPUSH
5565: CALL 973 0 1
5569: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5570: LD_INT 4
5572: PPUSH
5573: LD_INT 1
5575: PPUSH
5576: LD_INT 2
5578: PPUSH
5579: LD_INT 1
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: LD_INT 12
5587: PPUSH
5588: LD_INT 80
5590: PPUSH
5591: CALL 313 0 7
// veh := CreateVehicle ;
5595: LD_ADDR_VAR 0 3
5599: PUSH
5600: CALL_OW 45
5604: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5605: LD_VAR 0 3
5609: PPUSH
5610: LD_VAR 0 5
5614: PUSH
5615: LD_VAR 0 4
5619: ARRAY
5620: PUSH
5621: LD_INT 3
5623: ARRAY
5624: PPUSH
5625: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5629: LD_VAR 0 3
5633: PPUSH
5634: LD_VAR 0 5
5638: PUSH
5639: LD_VAR 0 4
5643: ARRAY
5644: PUSH
5645: LD_INT 1
5647: ARRAY
5648: PPUSH
5649: LD_VAR 0 5
5653: PUSH
5654: LD_VAR 0 4
5658: ARRAY
5659: PUSH
5660: LD_INT 2
5662: ARRAY
5663: PPUSH
5664: LD_INT 0
5666: PPUSH
5667: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5671: LD_INT 0
5673: PPUSH
5674: LD_INT 1
5676: PPUSH
5677: LD_OWVAR 67
5681: PPUSH
5682: CALL_OW 380
// un := CreateHuman ;
5686: LD_ADDR_VAR 0 2
5690: PUSH
5691: CALL_OW 44
5695: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5710: LD_INT 60
5712: PUSH
5713: LD_INT 56
5715: PUSH
5716: LD_INT 52
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: PUSH
5724: LD_OWVAR 67
5728: ARRAY
5729: PPUSH
5730: CALL_OW 13
5734: PUSH
5735: LD_OWVAR 1
5739: PUSH
5740: LD_INT 30
5742: MOD
5743: PLUS
5744: PUSH
5745: LD_EXP 23
5749: PUSH
5750: LD_INT 4
5752: LESS
5753: OR
5754: IFFALSE 5771
// SetCargo ( veh , mat_cans , 100 ) ;
5756: LD_VAR 0 3
5760: PPUSH
5761: LD_INT 1
5763: PPUSH
5764: LD_INT 100
5766: PPUSH
5767: CALL_OW 290
// for i := 2 to points do
5771: LD_ADDR_VAR 0 7
5775: PUSH
5776: DOUBLE
5777: LD_INT 2
5779: DEC
5780: ST_TO_ADDR
5781: LD_VAR 0 6
5785: PUSH
5786: FOR_TO
5787: IFFALSE 5830
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5789: LD_VAR 0 3
5793: PPUSH
5794: LD_VAR 0 6
5798: PUSH
5799: LD_VAR 0 7
5803: ARRAY
5804: PUSH
5805: LD_INT 1
5807: ARRAY
5808: PPUSH
5809: LD_VAR 0 6
5813: PUSH
5814: LD_VAR 0 7
5818: ARRAY
5819: PUSH
5820: LD_INT 2
5822: ARRAY
5823: PPUSH
5824: CALL_OW 171
5828: GO 5786
5830: POP
5831: POP
// convoyCounter := convoyCounter + 1 ;
5832: LD_ADDR_EXP 23
5836: PUSH
5837: LD_EXP 23
5841: PUSH
5842: LD_INT 1
5844: PLUS
5845: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5846: LD_INT 35
5848: PPUSH
5849: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5853: LD_VAR 0 3
5857: PPUSH
5858: CALL_OW 314
5862: NOT
5863: PUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 302
5873: AND
5874: IFFALSE 5915
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5876: LD_VAR 0 3
5880: PPUSH
5881: LD_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: ARRAY
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PPUSH
5896: LD_VAR 0 6
5900: PUSH
5901: LD_VAR 0 6
5905: ARRAY
5906: PUSH
5907: LD_INT 2
5909: ARRAY
5910: PPUSH
5911: CALL_OW 111
// if not IsInUnit ( un ) then
5915: LD_VAR 0 2
5919: PPUSH
5920: CALL_OW 310
5924: NOT
5925: IFFALSE 5966
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5927: LD_VAR 0 2
5931: PPUSH
5932: LD_VAR 0 6
5936: PUSH
5937: LD_VAR 0 6
5941: ARRAY
5942: PUSH
5943: LD_INT 1
5945: ARRAY
5946: PPUSH
5947: LD_VAR 0 6
5951: PUSH
5952: LD_VAR 0 6
5956: ARRAY
5957: PUSH
5958: LD_INT 2
5960: ARRAY
5961: PPUSH
5962: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5966: LD_VAR 0 3
5970: PPUSH
5971: LD_VAR 0 8
5975: PPUSH
5976: CALL_OW 308
5980: PUSH
5981: LD_VAR 0 2
5985: PPUSH
5986: LD_VAR 0 8
5990: PPUSH
5991: CALL_OW 308
5995: OR
5996: IFFALSE 5846
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
5998: LD_VAR 0 2
6002: PPUSH
6003: CALL_OW 302
6007: PUSH
6008: LD_VAR 0 3
6012: PPUSH
6013: CALL_OW 302
6017: NOT
6018: AND
6019: PUSH
6020: LD_VAR 0 2
6024: PPUSH
6025: LD_VAR 0 8
6029: PPUSH
6030: CALL_OW 308
6034: AND
6035: IFFALSE 6046
// RemoveUnit ( un ) ;
6037: LD_VAR 0 2
6041: PPUSH
6042: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6046: LD_VAR 0 3
6050: PPUSH
6051: LD_VAR 0 8
6055: PPUSH
6056: CALL_OW 308
6060: PUSH
6061: LD_VAR 0 3
6065: PPUSH
6066: CALL_OW 302
6070: AND
6071: IFFALSE 6082
// RemoveUnit ( veh ) ;
6073: LD_VAR 0 3
6077: PPUSH
6078: CALL_OW 64
// end ;
6082: LD_VAR 0 1
6086: RET
// export function SendAttack ; var un , veh , i ; begin
6087: LD_INT 0
6089: PPUSH
6090: PPUSH
6091: PPUSH
6092: PPUSH
// IncomingAttack ;
6093: CALL 14797 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6097: LD_INT 2100
6099: PPUSH
6100: LD_INT 3500
6102: PPUSH
6103: CALL_OW 12
6107: PPUSH
6108: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
6112: LD_ADDR_VAR 0 4
6116: PUSH
6117: DOUBLE
6118: LD_INT 1
6120: DEC
6121: ST_TO_ADDR
6122: LD_INT 3
6124: PUSH
6125: LD_INT 4
6127: PUSH
6128: LD_INT 4
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_OWVAR 67
6140: ARRAY
6141: PUSH
6142: LD_EXP 19
6146: PUSH
6147: LD_INT 3
6149: DIV
6150: PLUS
6151: PUSH
6152: FOR_TO
6153: IFFALSE 6265
// begin uc_side := 1 ;
6155: LD_ADDR_OWVAR 20
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// uc_nation := 1 ;
6163: LD_ADDR_OWVAR 21
6167: PUSH
6168: LD_INT 1
6170: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6171: LD_INT 0
6173: PPUSH
6174: LD_INT 1
6176: PPUSH
6177: LD_INT 2
6179: PUSH
6180: LD_INT 3
6182: PUSH
6183: LD_INT 4
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PUSH
6191: LD_OWVAR 67
6195: ARRAY
6196: PPUSH
6197: CALL_OW 380
// un := CreateHuman ;
6201: LD_ADDR_VAR 0 2
6205: PUSH
6206: CALL_OW 44
6210: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6211: LD_VAR 0 2
6215: PPUSH
6216: LD_INT 37
6218: PPUSH
6219: LD_INT 70
6221: PPUSH
6222: LD_INT 3
6224: PPUSH
6225: LD_INT 0
6227: PPUSH
6228: CALL_OW 50
// usAttackers := usAttackers union un ;
6232: LD_ADDR_EXP 47
6236: PUSH
6237: LD_EXP 47
6241: PUSH
6242: LD_VAR 0 2
6246: UNION
6247: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6248: LD_VAR 0 2
6252: PPUSH
6253: LD_INT 40
6255: PPUSH
6256: LD_INT 65
6258: PPUSH
6259: CALL_OW 111
// end ;
6263: GO 6152
6265: POP
6266: POP
// uc_side := 1 ;
6267: LD_ADDR_OWVAR 20
6271: PUSH
6272: LD_INT 1
6274: ST_TO_ADDR
// uc_nation := 1 ;
6275: LD_ADDR_OWVAR 21
6279: PUSH
6280: LD_INT 1
6282: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6283: LD_INT 0
6285: PPUSH
6286: LD_INT 4
6288: PPUSH
6289: LD_INT 2
6291: PPUSH
6292: CALL_OW 380
// un := CreateHuman ;
6296: LD_ADDR_VAR 0 2
6300: PUSH
6301: CALL_OW 44
6305: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6306: LD_VAR 0 2
6310: PPUSH
6311: LD_INT 37
6313: PPUSH
6314: LD_INT 70
6316: PPUSH
6317: LD_INT 3
6319: PPUSH
6320: LD_INT 0
6322: PPUSH
6323: CALL_OW 50
// usAttackers := usAttackers union un ;
6327: LD_ADDR_EXP 47
6331: PUSH
6332: LD_EXP 47
6336: PUSH
6337: LD_VAR 0 2
6341: UNION
6342: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6343: LD_VAR 0 2
6347: PPUSH
6348: LD_INT 40
6350: PPUSH
6351: LD_INT 65
6353: PPUSH
6354: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6358: LD_ADDR_VAR 0 4
6362: PUSH
6363: DOUBLE
6364: LD_INT 1
6366: DEC
6367: ST_TO_ADDR
6368: LD_OWVAR 67
6372: PUSH
6373: LD_EXP 19
6377: PUSH
6378: LD_INT 4
6380: DIV
6381: PLUS
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6557
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6386: LD_ADDR_VAR 0 3
6390: PUSH
6391: LD_INT 1
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: LD_INT 2
6399: PPUSH
6400: LD_INT 1
6402: PPUSH
6403: LD_INT 1
6405: PPUSH
6406: LD_INT 4
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 1
6422: PPUSH
6423: LD_INT 3
6425: PPUSH
6426: CALL_OW 12
6430: ARRAY
6431: PPUSH
6432: LD_INT 90
6434: PPUSH
6435: CALL 313 0 7
6439: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6440: LD_VAR 0 3
6444: PPUSH
6445: LD_INT 35
6447: PPUSH
6448: LD_INT 65
6450: PPUSH
6451: LD_INT 0
6453: PPUSH
6454: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6458: LD_INT 0
6460: PPUSH
6461: LD_INT 3
6463: PPUSH
6464: LD_OWVAR 67
6468: PUSH
6469: LD_INT 1
6471: PLUS
6472: PPUSH
6473: CALL_OW 380
// un := CreateHuman ;
6477: LD_ADDR_VAR 0 2
6481: PUSH
6482: CALL_OW 44
6486: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6487: LD_VAR 0 2
6491: PPUSH
6492: LD_VAR 0 3
6496: PPUSH
6497: CALL_OW 52
// usAttackers := usAttackers union un ;
6501: LD_ADDR_EXP 47
6505: PUSH
6506: LD_EXP 47
6510: PUSH
6511: LD_VAR 0 2
6515: UNION
6516: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6517: LD_VAR 0 3
6521: PPUSH
6522: LD_INT 39
6524: PPUSH
6525: LD_INT 60
6527: PPUSH
6528: CALL_OW 111
// wait ( 0 0$3 ) ;
6532: LD_INT 105
6534: PPUSH
6535: CALL_OW 67
// usAttackers := usAttackers union veh ;
6539: LD_ADDR_EXP 47
6543: PUSH
6544: LD_EXP 47
6548: PUSH
6549: LD_VAR 0 3
6553: UNION
6554: ST_TO_ADDR
// end ;
6555: GO 6383
6557: POP
6558: POP
// attackWave := attackWave + 1 ;
6559: LD_ADDR_EXP 19
6563: PUSH
6564: LD_EXP 19
6568: PUSH
6569: LD_INT 1
6571: PLUS
6572: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6573: LD_EXP 24
6577: PPUSH
6578: CALL_OW 427
// end ;
6582: LD_VAR 0 1
6586: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6587: LD_INT 0
6589: PPUSH
6590: PPUSH
6591: PPUSH
6592: PPUSH
6593: PPUSH
6594: PPUSH
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
6599: PPUSH
// if retreatAllowed then
6600: LD_EXP 11
6604: IFFALSE 6616
// strategy := 2 else
6606: LD_ADDR_VAR 0 5
6610: PUSH
6611: LD_INT 2
6613: ST_TO_ADDR
6614: GO 6632
// strategy := rand ( 0 , 2 ) ;
6616: LD_ADDR_VAR 0 5
6620: PUSH
6621: LD_INT 0
6623: PPUSH
6624: LD_INT 2
6626: PPUSH
6627: CALL_OW 12
6631: ST_TO_ADDR
// attackFormula := [ ] ;
6632: LD_ADDR_VAR 0 6
6636: PUSH
6637: EMPTY
6638: ST_TO_ADDR
// case strategy of 0 :
6639: LD_VAR 0 5
6643: PUSH
6644: LD_INT 0
6646: DOUBLE
6647: EQUAL
6648: IFTRUE 6652
6650: GO 6982
6652: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6653: LD_INT 11
6655: PPUSH
6656: LD_INT 22
6658: PUSH
6659: LD_INT 2
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 30
6668: PUSH
6669: LD_INT 4
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PPUSH
6680: CALL_OW 70
6684: NOT
6685: IFFALSE 6757
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6687: LD_ADDR_VAR 0 6
6691: PUSH
6692: LD_INT 41
6694: PUSH
6695: LD_INT 34
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: PUSH
6705: LD_INT 53
6707: PUSH
6708: LD_INT 62
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PUSH
6715: LD_INT 37
6717: PUSH
6718: LD_INT 63
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 44
6727: PUSH
6728: LD_INT 45
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 37
6737: PUSH
6738: LD_INT 28
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: ST_TO_ADDR
6755: GO 6980
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6757: LD_INT 12
6759: PPUSH
6760: LD_INT 22
6762: PUSH
6763: LD_INT 2
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: LD_INT 2
6772: PUSH
6773: LD_INT 30
6775: PUSH
6776: LD_INT 4
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: LD_INT 30
6785: PUSH
6786: LD_INT 31
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 30
6795: PUSH
6796: LD_INT 32
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PPUSH
6813: CALL_OW 70
6817: NOT
6818: IFFALSE 6901
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6820: LD_ADDR_VAR 0 6
6824: PUSH
6825: LD_INT 27
6827: PUSH
6828: LD_INT 42
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 27
6837: PUSH
6838: LD_INT 32
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 53
6851: PUSH
6852: LD_INT 62
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 37
6861: PUSH
6862: LD_INT 63
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: LD_INT 44
6871: PUSH
6872: LD_INT 45
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 37
6881: PUSH
6882: LD_INT 28
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: ST_TO_ADDR
6899: GO 6980
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
6901: LD_ADDR_VAR 0 6
6905: PUSH
6906: LD_INT 71
6908: PUSH
6909: LD_INT 67
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 54
6918: PUSH
6919: LD_INT 35
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 63
6932: PUSH
6933: LD_INT 40
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 37
6942: PUSH
6943: LD_INT 63
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 44
6952: PUSH
6953: LD_INT 45
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 37
6962: PUSH
6963: LD_INT 28
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: ST_TO_ADDR
// end ; 1 :
6980: GO 7185
6982: LD_INT 1
6984: DOUBLE
6985: EQUAL
6986: IFTRUE 6990
6988: GO 7094
6990: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
6991: LD_ADDR_VAR 0 6
6995: PUSH
6996: LD_INT 71
6998: PUSH
6999: LD_INT 67
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 82
7008: PUSH
7009: LD_INT 23
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 53
7018: PUSH
7019: LD_INT 7
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 43
7028: PUSH
7029: LD_INT 10
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 53
7044: PUSH
7045: LD_INT 62
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 37
7054: PUSH
7055: LD_INT 63
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 44
7064: PUSH
7065: LD_INT 45
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 37
7074: PUSH
7075: LD_INT 28
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: ST_TO_ADDR
7092: GO 7185
7094: LD_INT 2
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7184
7102: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_INT 90
7110: PUSH
7111: LD_INT 59
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 108
7120: PUSH
7121: LD_INT 64
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 82
7134: PUSH
7135: LD_INT 75
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 73
7144: PUSH
7145: LD_INT 67
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 101
7154: PUSH
7155: LD_INT 65
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 108
7164: PUSH
7165: LD_INT 62
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: ST_TO_ADDR
7182: GO 7185
7184: POP
// if not attackFormula then
7185: LD_VAR 0 6
7189: NOT
7190: IFFALSE 7194
// exit ;
7192: GO 8799
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7194: LD_ADDR_VAR 0 7
7198: PUSH
7199: LD_EXP 47
7203: PPUSH
7204: LD_INT 25
7206: PUSH
7207: LD_INT 1
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 72
7218: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7219: LD_ADDR_VAR 0 8
7223: PUSH
7224: LD_EXP 47
7228: PPUSH
7229: LD_INT 25
7231: PUSH
7232: LD_INT 4
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PPUSH
7239: CALL_OW 72
7243: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7244: LD_ADDR_VAR 0 9
7248: PUSH
7249: LD_EXP 47
7253: PPUSH
7254: LD_INT 25
7256: PUSH
7257: LD_INT 3
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 72
7268: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7269: LD_ADDR_VAR 0 10
7273: PUSH
7274: LD_EXP 47
7278: PPUSH
7279: LD_INT 21
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PPUSH
7289: CALL_OW 72
7293: ST_TO_ADDR
// if sci then
7294: LD_VAR 0 8
7298: IFFALSE 7335
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7300: LD_VAR 0 8
7304: PPUSH
7305: LD_VAR 0 6
7309: PUSH
7310: LD_INT 2
7312: ARRAY
7313: PUSH
7314: LD_INT 1
7316: ARRAY
7317: PPUSH
7318: LD_VAR 0 6
7322: PUSH
7323: LD_INT 2
7325: ARRAY
7326: PUSH
7327: LD_INT 2
7329: ARRAY
7330: PPUSH
7331: CALL_OW 111
// repeat wait ( 10 ) ;
7335: LD_INT 10
7337: PPUSH
7338: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7342: LD_ADDR_VAR 0 7
7346: PUSH
7347: LD_EXP 47
7351: PPUSH
7352: LD_INT 25
7354: PUSH
7355: LD_INT 1
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 72
7366: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7367: LD_ADDR_VAR 0 8
7371: PUSH
7372: LD_EXP 47
7376: PPUSH
7377: LD_INT 25
7379: PUSH
7380: LD_INT 4
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PPUSH
7387: CALL_OW 72
7391: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7392: LD_ADDR_VAR 0 9
7396: PUSH
7397: LD_EXP 47
7401: PPUSH
7402: LD_INT 25
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PPUSH
7412: CALL_OW 72
7416: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7417: LD_ADDR_VAR 0 10
7421: PUSH
7422: LD_EXP 47
7426: PPUSH
7427: LD_INT 21
7429: PUSH
7430: LD_INT 2
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PPUSH
7437: CALL_OW 72
7441: ST_TO_ADDR
// if sol then
7442: LD_VAR 0 7
7446: IFFALSE 7867
// begin for i in sol do
7448: LD_ADDR_VAR 0 2
7452: PUSH
7453: LD_VAR 0 7
7457: PUSH
7458: FOR_IN
7459: IFFALSE 7865
// begin tag := GetTag ( i ) ;
7461: LD_ADDR_VAR 0 4
7465: PUSH
7466: LD_VAR 0 2
7470: PPUSH
7471: CALL_OW 110
7475: ST_TO_ADDR
// if not tag then
7476: LD_VAR 0 4
7480: NOT
7481: IFFALSE 7590
// begin if GetLives ( i ) = 1000 then
7483: LD_VAR 0 2
7487: PPUSH
7488: CALL_OW 256
7492: PUSH
7493: LD_INT 1000
7495: EQUAL
7496: IFFALSE 7512
// SetTag ( i , 1 ) else
7498: LD_VAR 0 2
7502: PPUSH
7503: LD_INT 1
7505: PPUSH
7506: CALL_OW 109
7510: GO 7588
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7512: LD_VAR 0 2
7516: PPUSH
7517: LD_VAR 0 6
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PUSH
7526: LD_INT 1
7528: ARRAY
7529: PPUSH
7530: LD_VAR 0 6
7534: PUSH
7535: LD_INT 2
7537: ARRAY
7538: PUSH
7539: LD_INT 2
7541: ARRAY
7542: PPUSH
7543: CALL_OW 297
7547: PUSH
7548: LD_INT 10
7550: GREATER
7551: IFFALSE 7588
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7553: LD_VAR 0 2
7557: PPUSH
7558: LD_VAR 0 6
7562: PUSH
7563: LD_INT 2
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: LD_VAR 0 6
7575: PUSH
7576: LD_INT 2
7578: ARRAY
7579: PUSH
7580: LD_INT 2
7582: ARRAY
7583: PPUSH
7584: CALL_OW 111
// end else
7588: GO 7863
// begin if GetLives ( i ) < 720 then
7590: LD_VAR 0 2
7594: PPUSH
7595: CALL_OW 256
7599: PUSH
7600: LD_INT 720
7602: LESS
7603: IFFALSE 7654
// begin SetTag ( i , 0 ) ;
7605: LD_VAR 0 2
7609: PPUSH
7610: LD_INT 0
7612: PPUSH
7613: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7617: LD_VAR 0 2
7621: PPUSH
7622: LD_VAR 0 6
7626: PUSH
7627: LD_INT 2
7629: ARRAY
7630: PUSH
7631: LD_INT 1
7633: ARRAY
7634: PPUSH
7635: LD_VAR 0 6
7639: PUSH
7640: LD_INT 2
7642: ARRAY
7643: PUSH
7644: LD_INT 2
7646: ARRAY
7647: PPUSH
7648: CALL_OW 111
// end else
7652: GO 7863
// if tag <= attackFormula [ 1 ] then
7654: LD_VAR 0 4
7658: PUSH
7659: LD_VAR 0 6
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: LESSEQUAL
7668: IFFALSE 7829
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_VAR 0 6
7679: PUSH
7680: LD_INT 1
7682: ARRAY
7683: PUSH
7684: LD_VAR 0 4
7688: ARRAY
7689: PUSH
7690: LD_INT 1
7692: ARRAY
7693: PPUSH
7694: LD_VAR 0 6
7698: PUSH
7699: LD_INT 1
7701: ARRAY
7702: PUSH
7703: LD_VAR 0 4
7707: ARRAY
7708: PUSH
7709: LD_INT 2
7711: ARRAY
7712: PPUSH
7713: CALL_OW 297
7717: PUSH
7718: LD_INT 6
7720: GREATER
7721: IFFALSE 7772
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7723: LD_VAR 0 2
7727: PPUSH
7728: LD_VAR 0 6
7732: PUSH
7733: LD_INT 1
7735: ARRAY
7736: PUSH
7737: LD_VAR 0 4
7741: ARRAY
7742: PUSH
7743: LD_INT 1
7745: ARRAY
7746: PPUSH
7747: LD_VAR 0 6
7751: PUSH
7752: LD_INT 1
7754: ARRAY
7755: PUSH
7756: LD_VAR 0 4
7760: ARRAY
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PPUSH
7766: CALL_OW 114
7770: GO 7827
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7772: LD_INT 81
7774: PUSH
7775: LD_INT 1
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: LD_INT 91
7784: PUSH
7785: LD_VAR 0 2
7789: PUSH
7790: LD_INT 10
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 69
7806: NOT
7807: IFFALSE 7827
// SetTag ( i , tag + 1 ) ;
7809: LD_VAR 0 2
7813: PPUSH
7814: LD_VAR 0 4
7818: PUSH
7819: LD_INT 1
7821: PLUS
7822: PPUSH
7823: CALL_OW 109
// end else
7827: GO 7863
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7829: LD_VAR 0 2
7833: PPUSH
7834: LD_INT 81
7836: PUSH
7837: LD_INT 1
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PPUSH
7844: CALL_OW 69
7848: PPUSH
7849: LD_VAR 0 2
7853: PPUSH
7854: CALL_OW 74
7858: PPUSH
7859: CALL_OW 115
// end ; end ;
7863: GO 7458
7865: POP
7866: POP
// end ; if sci then
7867: LD_VAR 0 8
7871: IFFALSE 8140
// begin if not sol and not mech then
7873: LD_VAR 0 7
7877: NOT
7878: PUSH
7879: LD_VAR 0 9
7883: NOT
7884: AND
7885: IFFALSE 7937
// begin for i in sci do
7887: LD_ADDR_VAR 0 2
7891: PUSH
7892: LD_VAR 0 8
7896: PUSH
7897: FOR_IN
7898: IFFALSE 7933
// begin usForces := usForces union i ;
7900: LD_ADDR_EXP 44
7904: PUSH
7905: LD_EXP 44
7909: PUSH
7910: LD_VAR 0 2
7914: UNION
7915: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
7916: LD_VAR 0 2
7920: PPUSH
7921: LD_INT 34
7923: PPUSH
7924: LD_INT 68
7926: PPUSH
7927: CALL_OW 111
// end ;
7931: GO 7897
7933: POP
7934: POP
// end else
7935: GO 8140
// for i in sci do
7937: LD_ADDR_VAR 0 2
7941: PUSH
7942: LD_VAR 0 8
7946: PUSH
7947: FOR_IN
7948: IFFALSE 8138
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7950: LD_VAR 0 2
7954: PPUSH
7955: LD_VAR 0 6
7959: PUSH
7960: LD_INT 2
7962: ARRAY
7963: PUSH
7964: LD_INT 1
7966: ARRAY
7967: PPUSH
7968: LD_VAR 0 6
7972: PUSH
7973: LD_INT 2
7975: ARRAY
7976: PUSH
7977: LD_INT 2
7979: ARRAY
7980: PPUSH
7981: CALL_OW 297
7985: PUSH
7986: LD_INT 10
7988: GREATER
7989: IFFALSE 8028
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
7991: LD_VAR 0 2
7995: PPUSH
7996: LD_VAR 0 6
8000: PUSH
8001: LD_INT 2
8003: ARRAY
8004: PUSH
8005: LD_INT 1
8007: ARRAY
8008: PPUSH
8009: LD_VAR 0 6
8013: PUSH
8014: LD_INT 2
8016: ARRAY
8017: PUSH
8018: LD_INT 2
8020: ARRAY
8021: PPUSH
8022: CALL_OW 111
8026: GO 8136
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8028: LD_VAR 0 7
8032: PPUSH
8033: LD_INT 3
8035: PUSH
8036: LD_INT 24
8038: PUSH
8039: LD_INT 1000
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 91
8052: PUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 10
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 72
8074: IFFALSE 8136
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8076: LD_VAR 0 2
8080: PPUSH
8081: LD_VAR 0 7
8085: PPUSH
8086: LD_INT 3
8088: PUSH
8089: LD_INT 24
8091: PUSH
8092: LD_INT 1000
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 91
8105: PUSH
8106: LD_VAR 0 2
8110: PUSH
8111: LD_INT 10
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PPUSH
8123: CALL_OW 72
8127: PUSH
8128: LD_INT 1
8130: ARRAY
8131: PPUSH
8132: CALL_OW 128
8136: GO 7947
8138: POP
8139: POP
// end ; if mech then
8140: LD_VAR 0 9
8144: IFFALSE 8781
// begin for i in mech do
8146: LD_ADDR_VAR 0 2
8150: PUSH
8151: LD_VAR 0 9
8155: PUSH
8156: FOR_IN
8157: IFFALSE 8779
// begin tag := GetTag ( i ) ;
8159: LD_ADDR_VAR 0 4
8163: PUSH
8164: LD_VAR 0 2
8168: PPUSH
8169: CALL_OW 110
8173: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8174: LD_ADDR_VAR 0 11
8178: PUSH
8179: LD_VAR 0 2
8183: PPUSH
8184: CALL_OW 310
8188: ST_TO_ADDR
// if not tag then
8189: LD_VAR 0 4
8193: NOT
8194: IFFALSE 8492
// begin if veh then
8196: LD_VAR 0 11
8200: IFFALSE 8334
// begin if GetLives ( veh ) = 1000 then
8202: LD_VAR 0 11
8206: PPUSH
8207: CALL_OW 256
8211: PUSH
8212: LD_INT 1000
8214: EQUAL
8215: IFFALSE 8231
// SetTag ( i , 1 ) else
8217: LD_VAR 0 2
8221: PPUSH
8222: LD_INT 1
8224: PPUSH
8225: CALL_OW 109
8229: GO 8332
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8231: LD_VAR 0 11
8235: PPUSH
8236: LD_VAR 0 6
8240: PUSH
8241: LD_INT 3
8243: ARRAY
8244: PUSH
8245: LD_INT 1
8247: ARRAY
8248: PPUSH
8249: LD_VAR 0 6
8253: PUSH
8254: LD_INT 3
8256: ARRAY
8257: PUSH
8258: LD_INT 2
8260: ARRAY
8261: PPUSH
8262: CALL_OW 297
8266: PUSH
8267: LD_INT 7
8269: GREATER
8270: IFFALSE 8309
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8272: LD_VAR 0 11
8276: PPUSH
8277: LD_VAR 0 6
8281: PUSH
8282: LD_INT 3
8284: ARRAY
8285: PUSH
8286: LD_INT 1
8288: ARRAY
8289: PPUSH
8290: LD_VAR 0 6
8294: PUSH
8295: LD_INT 3
8297: ARRAY
8298: PUSH
8299: LD_INT 2
8301: ARRAY
8302: PPUSH
8303: CALL_OW 111
8307: GO 8332
// begin ComExitVehicle ( i ) ;
8309: LD_VAR 0 2
8313: PPUSH
8314: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8318: LD_VAR 0 2
8322: PPUSH
8323: LD_VAR 0 11
8327: PPUSH
8328: CALL_OW 189
// end ; end else
8332: GO 8490
// if GetLives ( i ) < 400 then
8334: LD_VAR 0 2
8338: PPUSH
8339: CALL_OW 256
8343: PUSH
8344: LD_INT 400
8346: LESS
8347: IFFALSE 8398
// begin usAttackers := usAttackers diff i ;
8349: LD_ADDR_EXP 47
8353: PUSH
8354: LD_EXP 47
8358: PUSH
8359: LD_VAR 0 2
8363: DIFF
8364: ST_TO_ADDR
// usForces := usForces union i ;
8365: LD_ADDR_EXP 44
8369: PUSH
8370: LD_EXP 44
8374: PUSH
8375: LD_VAR 0 2
8379: UNION
8380: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8381: LD_VAR 0 2
8385: PPUSH
8386: LD_INT 34
8388: PPUSH
8389: LD_INT 68
8391: PPUSH
8392: CALL_OW 111
// end else
8396: GO 8490
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
8398: LD_VAR 0 10
8402: PPUSH
8403: LD_INT 58
8405: PUSH
8406: EMPTY
8407: LIST
8408: PUSH
8409: LD_INT 24
8411: PUSH
8412: LD_INT 1000
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PPUSH
8423: CALL_OW 72
8427: PUSH
8428: LD_VAR 0 2
8432: PPUSH
8433: CALL_OW 314
8437: NOT
8438: AND
8439: IFFALSE 8490
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8441: LD_VAR 0 2
8445: PPUSH
8446: LD_VAR 0 10
8450: PPUSH
8451: LD_INT 58
8453: PUSH
8454: EMPTY
8455: LIST
8456: PUSH
8457: LD_INT 24
8459: PUSH
8460: LD_INT 250
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 72
8475: PPUSH
8476: LD_VAR 0 2
8480: PPUSH
8481: CALL_OW 74
8485: PPUSH
8486: CALL_OW 120
// end else
8490: GO 8777
// begin if veh and GetLives ( veh ) < 720 then
8492: LD_VAR 0 11
8496: PUSH
8497: LD_VAR 0 11
8501: PPUSH
8502: CALL_OW 256
8506: PUSH
8507: LD_INT 720
8509: LESS
8510: AND
8511: IFFALSE 8562
// begin SetTag ( i , 0 ) ;
8513: LD_VAR 0 2
8517: PPUSH
8518: LD_INT 0
8520: PPUSH
8521: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8525: LD_VAR 0 11
8529: PPUSH
8530: LD_VAR 0 6
8534: PUSH
8535: LD_INT 3
8537: ARRAY
8538: PUSH
8539: LD_INT 1
8541: ARRAY
8542: PPUSH
8543: LD_VAR 0 6
8547: PUSH
8548: LD_INT 3
8550: ARRAY
8551: PUSH
8552: LD_INT 2
8554: ARRAY
8555: PPUSH
8556: CALL_OW 111
// end else
8560: GO 8777
// if veh then
8562: LD_VAR 0 11
8566: IFFALSE 8777
// if tag <= attackFormula [ 4 ] then
8568: LD_VAR 0 4
8572: PUSH
8573: LD_VAR 0 6
8577: PUSH
8578: LD_INT 4
8580: ARRAY
8581: LESSEQUAL
8582: IFFALSE 8743
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8584: LD_VAR 0 11
8588: PPUSH
8589: LD_VAR 0 6
8593: PUSH
8594: LD_INT 4
8596: ARRAY
8597: PUSH
8598: LD_VAR 0 4
8602: ARRAY
8603: PUSH
8604: LD_INT 1
8606: ARRAY
8607: PPUSH
8608: LD_VAR 0 6
8612: PUSH
8613: LD_INT 4
8615: ARRAY
8616: PUSH
8617: LD_VAR 0 4
8621: ARRAY
8622: PUSH
8623: LD_INT 2
8625: ARRAY
8626: PPUSH
8627: CALL_OW 297
8631: PUSH
8632: LD_INT 6
8634: GREATER
8635: IFFALSE 8686
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8637: LD_VAR 0 11
8641: PPUSH
8642: LD_VAR 0 6
8646: PUSH
8647: LD_INT 4
8649: ARRAY
8650: PUSH
8651: LD_VAR 0 4
8655: ARRAY
8656: PUSH
8657: LD_INT 1
8659: ARRAY
8660: PPUSH
8661: LD_VAR 0 6
8665: PUSH
8666: LD_INT 4
8668: ARRAY
8669: PUSH
8670: LD_VAR 0 4
8674: ARRAY
8675: PUSH
8676: LD_INT 2
8678: ARRAY
8679: PPUSH
8680: CALL_OW 114
8684: GO 8741
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8686: LD_INT 81
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 91
8698: PUSH
8699: LD_VAR 0 11
8703: PUSH
8704: LD_INT 10
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PPUSH
8716: CALL_OW 69
8720: NOT
8721: IFFALSE 8741
// SetTag ( i , tag + 1 ) ;
8723: LD_VAR 0 2
8727: PPUSH
8728: LD_VAR 0 4
8732: PUSH
8733: LD_INT 1
8735: PLUS
8736: PPUSH
8737: CALL_OW 109
// end else
8741: GO 8777
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8743: LD_VAR 0 11
8747: PPUSH
8748: LD_INT 81
8750: PUSH
8751: LD_INT 1
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 69
8762: PPUSH
8763: LD_VAR 0 2
8767: PPUSH
8768: CALL_OW 74
8772: PPUSH
8773: CALL_OW 115
// end ; end ;
8777: GO 8156
8779: POP
8780: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8781: LD_EXP 47
8785: PPUSH
8786: LD_INT 52
8788: PUSH
8789: EMPTY
8790: LIST
8791: PPUSH
8792: CALL_OW 72
8796: NOT
8797: IFFALSE 7335
// end ;
8799: LD_VAR 0 1
8803: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8804: LD_INT 22
8806: PUSH
8807: LD_INT 1
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 32
8816: PUSH
8817: LD_INT 1
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PPUSH
8828: CALL_OW 69
8832: IFFALSE 8909
8834: GO 8836
8836: DISABLE
8837: LD_INT 0
8839: PPUSH
// begin enable ;
8840: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
8841: LD_ADDR_VAR 0 1
8845: PUSH
8846: LD_INT 22
8848: PUSH
8849: LD_INT 1
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 32
8858: PUSH
8859: LD_INT 1
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PPUSH
8870: CALL_OW 69
8874: PUSH
8875: FOR_IN
8876: IFFALSE 8907
// if GetFuel ( i ) < 10 then
8878: LD_VAR 0 1
8882: PPUSH
8883: CALL_OW 261
8887: PUSH
8888: LD_INT 10
8890: LESS
8891: IFFALSE 8905
// SetFuel ( i , 10 ) ;
8893: LD_VAR 0 1
8897: PPUSH
8898: LD_INT 10
8900: PPUSH
8901: CALL_OW 240
8905: GO 8875
8907: POP
8908: POP
// end ; end_of_file
8909: PPOPN 1
8911: END
// export function Action ; var hasAll , i , tmp ; begin
8912: LD_INT 0
8914: PPUSH
8915: PPUSH
8916: PPUSH
8917: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
8918: LD_ADDR_VAR 0 2
8922: PUSH
8923: LD_INT 22
8925: PUSH
8926: LD_INT 2
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 21
8935: PUSH
8936: LD_INT 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 23
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: PPUSH
8958: CALL_OW 69
8962: PUSH
8963: LD_INT 7
8965: GREATEREQUAL
8966: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
8967: LD_VAR 0 2
8971: PPUSH
8972: LD_STRING 03_HasAll
8974: PPUSH
8975: CALL_OW 39
// Video ( true ) ;
8979: LD_INT 1
8981: PPUSH
8982: CALL 69362 0 1
// CenterNowOnUnits ( Heike ) ;
8986: LD_EXP 28
8990: PPUSH
8991: CALL_OW 87
// wait ( 0 0$2 ) ;
8995: LD_INT 70
8997: PPUSH
8998: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9002: LD_EXP 36
9006: PPUSH
9007: LD_STRING DF-1-start
9009: PPUSH
9010: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9014: LD_EXP 28
9018: PPUSH
9019: LD_EXP 36
9023: PPUSH
9024: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9028: LD_EXP 28
9032: PPUSH
9033: LD_STRING DH-1-start
9035: PPUSH
9036: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9040: LD_EXP 37
9044: PPUSH
9045: LD_INT 92
9047: PPUSH
9048: LD_INT 21
9050: PPUSH
9051: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9055: LD_EXP 32
9059: PPUSH
9060: LD_INT 94
9062: PPUSH
9063: LD_INT 23
9065: PPUSH
9066: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9070: LD_EXP 40
9074: PUSH
9075: LD_INT 1
9077: ARRAY
9078: PPUSH
9079: LD_INT 90
9081: PPUSH
9082: LD_INT 23
9084: PPUSH
9085: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9089: LD_EXP 40
9093: PUSH
9094: LD_INT 2
9096: ARRAY
9097: PPUSH
9098: LD_INT 93
9100: PPUSH
9101: LD_INT 25
9103: PPUSH
9104: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9108: LD_EXP 40
9112: PPUSH
9113: LD_EXP 37
9117: PPUSH
9118: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9122: LD_EXP 37
9126: PUSH
9127: LD_EXP 32
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PPUSH
9136: LD_EXP 28
9140: PPUSH
9141: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9145: LD_EXP 28
9149: PPUSH
9150: LD_EXP 37
9154: PPUSH
9155: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9159: LD_INT 35
9161: PPUSH
9162: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9166: LD_EXP 37
9170: PPUSH
9171: LD_INT 92
9173: PPUSH
9174: LD_INT 21
9176: PPUSH
9177: CALL_OW 307
9181: IFFALSE 9159
// Say ( Omar , DO-1-start ) ;
9183: LD_EXP 37
9187: PPUSH
9188: LD_STRING DO-1-start
9190: PPUSH
9191: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9195: LD_EXP 28
9199: PPUSH
9200: LD_STRING DH-2-start
9202: PPUSH
9203: CALL_OW 88
// if hasAll then
9207: LD_VAR 0 2
9211: IFFALSE 9339
// begin Say ( Omar , DO-2-start ) ;
9213: LD_EXP 37
9217: PPUSH
9218: LD_STRING DO-2-start
9220: PPUSH
9221: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9225: LD_EXP 37
9229: PPUSH
9230: LD_STRING DO-3-start
9232: PPUSH
9233: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9237: LD_EXP 28
9241: PPUSH
9242: LD_STRING DH-3-start
9244: PPUSH
9245: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9249: LD_EXP 36
9253: PPUSH
9254: LD_STRING DF-2-start
9256: PPUSH
9257: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9261: LD_EXP 37
9265: PPUSH
9266: LD_EXP 36
9270: PPUSH
9271: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9275: LD_EXP 37
9279: PPUSH
9280: LD_STRING DO-4-start
9282: PPUSH
9283: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9287: LD_EXP 36
9291: PPUSH
9292: LD_STRING DF-3-start
9294: PPUSH
9295: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9299: LD_EXP 37
9303: PPUSH
9304: LD_STRING DO-5-start
9306: PPUSH
9307: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9311: LD_EXP 36
9315: PPUSH
9316: LD_STRING DF-4-start
9318: PPUSH
9319: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9323: LD_EXP 37
9327: PPUSH
9328: LD_EXP 28
9332: PPUSH
9333: CALL_OW 119
// end else
9337: GO 9439
// begin Say ( Omar , DO-2-start-a ) ;
9339: LD_EXP 37
9343: PPUSH
9344: LD_STRING DO-2-start-a
9346: PPUSH
9347: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9351: LD_EXP 37
9355: PPUSH
9356: LD_STRING DO-3-start-a
9358: PPUSH
9359: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9363: LD_EXP 28
9367: PPUSH
9368: LD_STRING DH-3-start-a
9370: PPUSH
9371: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9375: LD_EXP 36
9379: PPUSH
9380: LD_STRING DF-2-start-a
9382: PPUSH
9383: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9387: LD_EXP 37
9391: PPUSH
9392: LD_EXP 36
9396: PPUSH
9397: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9401: LD_EXP 37
9405: PPUSH
9406: LD_STRING DO-4-start-a
9408: PPUSH
9409: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9413: LD_EXP 36
9417: PPUSH
9418: LD_STRING DF-3-start-a
9420: PPUSH
9421: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9425: LD_EXP 37
9429: PPUSH
9430: LD_EXP 28
9434: PPUSH
9435: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9439: LD_INT 10
9441: PPUSH
9442: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9446: LD_EXP 37
9450: PPUSH
9451: LD_STRING DO-1-mission
9453: PPUSH
9454: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9458: LD_EXP 37
9462: PPUSH
9463: LD_STRING DO-2-mission
9465: PPUSH
9466: CALL_OW 88
// if not hasAll then
9470: LD_VAR 0 2
9474: NOT
9475: IFFALSE 9489
// Say ( Omar , DO-3-mission ) ;
9477: LD_EXP 37
9481: PPUSH
9482: LD_STRING DO-3-mission
9484: PPUSH
9485: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9489: LD_EXP 37
9493: PPUSH
9494: LD_STRING DO-4-mission
9496: PPUSH
9497: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9501: LD_EXP 28
9505: PPUSH
9506: LD_STRING DH-1-mission
9508: PPUSH
9509: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9513: LD_EXP 36
9517: PPUSH
9518: LD_STRING DF-1-mission
9520: PPUSH
9521: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9525: LD_EXP 37
9529: PPUSH
9530: LD_STRING DO-5-mission
9532: PPUSH
9533: CALL_OW 88
// if not hasAll then
9537: LD_VAR 0 2
9541: NOT
9542: IFFALSE 9677
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9544: LD_ADDR_VAR 0 4
9548: PUSH
9549: LD_INT 22
9551: PUSH
9552: LD_INT 2
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 21
9561: PUSH
9562: LD_INT 1
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 23
9571: PUSH
9572: LD_INT 2
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: LIST
9583: PPUSH
9584: CALL_OW 69
9588: ST_TO_ADDR
// for i := 7 downto tmp do
9589: LD_ADDR_VAR 0 3
9593: PUSH
9594: DOUBLE
9595: LD_INT 7
9597: INC
9598: ST_TO_ADDR
9599: LD_VAR 0 4
9603: PUSH
9604: FOR_DOWNTO
9605: IFFALSE 9675
// begin if omarSquad < 3 then
9607: LD_EXP 40
9611: PUSH
9612: LD_INT 3
9614: LESS
9615: IFFALSE 9619
// break ;
9617: GO 9675
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9619: LD_EXP 40
9623: PUSH
9624: LD_INT 3
9626: ARRAY
9627: PPUSH
9628: LD_INT 2
9630: PPUSH
9631: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9635: LD_ADDR_EXP 42
9639: PUSH
9640: LD_EXP 42
9644: PUSH
9645: LD_EXP 40
9649: PUSH
9650: LD_INT 3
9652: ARRAY
9653: UNION
9654: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9655: LD_ADDR_EXP 40
9659: PUSH
9660: LD_EXP 40
9664: PPUSH
9665: LD_INT 3
9667: PPUSH
9668: CALL_OW 3
9672: ST_TO_ADDR
// end ;
9673: GO 9604
9675: POP
9676: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9677: LD_EXP 37
9681: PUSH
9682: LD_EXP 40
9686: ADD
9687: PPUSH
9688: LD_INT 103
9690: PPUSH
9691: LD_INT 9
9693: PPUSH
9694: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9698: LD_VAR 0 2
9702: PUSH
9703: LD_EXP 33
9707: PPUSH
9708: CALL_OW 302
9712: AND
9713: IFFALSE 9774
// begin wait ( 0 0$3 ) ;
9715: LD_INT 105
9717: PPUSH
9718: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9722: LD_EXP 33
9726: PPUSH
9727: LD_EXP 36
9731: PPUSH
9732: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9736: LD_EXP 33
9740: PPUSH
9741: LD_STRING DK-1-side
9743: PPUSH
9744: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9748: LD_EXP 36
9752: PPUSH
9753: LD_EXP 33
9757: PPUSH
9758: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9762: LD_EXP 36
9766: PPUSH
9767: LD_STRING DF-1-side
9769: PPUSH
9770: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9774: LD_INT 22
9776: PUSH
9777: LD_INT 2
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PPUSH
9784: CALL_OW 69
9788: PPUSH
9789: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9793: LD_EXP 36
9797: PUSH
9798: LD_EXP 39
9802: ADD
9803: PPUSH
9804: LD_INT 108
9806: PPUSH
9807: LD_INT 62
9809: PPUSH
9810: CALL_OW 111
// gameStarted := true ;
9814: LD_ADDR_EXP 3
9818: PUSH
9819: LD_INT 1
9821: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9822: LD_INT 105
9824: PPUSH
9825: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9829: LD_EXP 28
9833: PPUSH
9834: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
9838: LD_EXP 28
9842: PPUSH
9843: LD_EXP 32
9847: PPUSH
9848: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
9852: LD_INT 22
9854: PUSH
9855: LD_INT 2
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PPUSH
9862: CALL_OW 69
9866: PUSH
9867: LD_EXP 28
9871: DIFF
9872: PPUSH
9873: LD_EXP 28
9877: PPUSH
9878: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
9882: LD_EXP 28
9886: PPUSH
9887: LD_STRING DH-1-explore
9889: PPUSH
9890: CALL_OW 88
// if Givi then
9894: LD_EXP 29
9898: IFFALSE 9914
// Say ( Givi , DG-1-explore ) else
9900: LD_EXP 29
9904: PPUSH
9905: LD_STRING DG-1-explore
9907: PPUSH
9908: CALL_OW 88
9912: GO 9951
// if heikeSecondSquad then
9914: LD_EXP 42
9918: IFFALSE 9951
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
9920: LD_EXP 42
9924: PPUSH
9925: LD_INT 26
9927: PUSH
9928: LD_INT 1
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PPUSH
9935: CALL_OW 72
9939: PUSH
9940: LD_INT 1
9942: ARRAY
9943: PPUSH
9944: LD_STRING DArm-1-explore
9946: PPUSH
9947: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
9951: LD_EXP 32
9955: PPUSH
9956: LD_STRING DA-1-explore
9958: PPUSH
9959: CALL_OW 88
// if Sophia then
9963: LD_EXP 34
9967: IFFALSE 10045
// begin Say ( Sophia , DS-2-explore ) ;
9969: LD_EXP 34
9973: PPUSH
9974: LD_STRING DS-2-explore
9976: PPUSH
9977: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
9981: LD_EXP 32
9985: PPUSH
9986: LD_STRING DA-2-explore
9988: PPUSH
9989: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
9993: LD_EXP 34
9997: PPUSH
9998: LD_EXP 32
10002: PPUSH
10003: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10007: LD_EXP 32
10011: PPUSH
10012: LD_EXP 34
10016: PPUSH
10017: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10021: LD_EXP 34
10025: PPUSH
10026: LD_STRING DS-3-explore
10028: PPUSH
10029: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10033: LD_EXP 32
10037: PPUSH
10038: LD_STRING DA-3-explore
10040: PPUSH
10041: CALL_OW 88
// end ; if Mike then
10045: LD_EXP 30
10049: IFFALSE 10105
// begin Say ( Mike , DM-1-explore ) ;
10051: LD_EXP 30
10055: PPUSH
10056: LD_STRING DM-1-explore
10058: PPUSH
10059: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10063: LD_EXP 28
10067: PPUSH
10068: LD_STRING DH-2-explore
10070: PPUSH
10071: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10075: LD_EXP 30
10079: PPUSH
10080: LD_STRING DM-2-explore
10082: PPUSH
10083: CALL_OW 88
// if Kaia then
10087: LD_EXP 33
10091: IFFALSE 10105
// Say ( Kaia , DK-1-explore ) ;
10093: LD_EXP 33
10097: PPUSH
10098: LD_STRING DK-1-explore
10100: PPUSH
10101: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10105: LD_INT 22
10107: PUSH
10108: LD_INT 2
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PPUSH
10115: CALL_OW 69
10119: PPUSH
10120: CALL_OW 139
// Video ( false ) ;
10124: LD_INT 0
10126: PPUSH
10127: CALL 69362 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10131: LD_STRING BuildBase
10133: PPUSH
10134: CALL_OW 337
// SaveForQuickRestart ;
10138: CALL_OW 22
// end ;
10142: LD_VAR 0 1
10146: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10147: LD_EXP 5
10151: NOT
10152: PUSH
10153: LD_EXP 6
10157: NOT
10158: AND
10159: PUSH
10160: LD_INT 5
10162: PPUSH
10163: LD_INT 22
10165: PUSH
10166: LD_INT 2
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PPUSH
10173: CALL_OW 70
10177: AND
10178: PUSH
10179: LD_EXP 6
10183: NOT
10184: AND
10185: IFFALSE 10270
10187: GO 10189
10189: DISABLE
// begin if Mike then
10190: LD_EXP 30
10194: IFFALSE 10210
// Say ( Mike , DM-1-scout ) else
10196: LD_EXP 30
10200: PPUSH
10201: LD_STRING DM-1-scout
10203: PPUSH
10204: CALL_OW 88
10208: GO 10241
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10210: LD_EXP 42
10214: PPUSH
10215: LD_INT 26
10217: PUSH
10218: LD_INT 1
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PPUSH
10225: CALL_OW 72
10229: PUSH
10230: LD_INT 1
10232: ARRAY
10233: PPUSH
10234: LD_STRING DArm-1-explore
10236: PPUSH
10237: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10241: LD_INT 54
10243: PPUSH
10244: LD_INT 35
10246: PPUSH
10247: LD_INT 2
10249: PPUSH
10250: LD_INT 1
10252: PPUSH
10253: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10257: LD_INT 54
10259: PPUSH
10260: LD_INT 35
10262: PPUSH
10263: LD_INT 2
10265: PPUSH
10266: CALL_OW 331
// end ;
10270: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10271: LD_INT 6
10273: PPUSH
10274: LD_INT 22
10276: PUSH
10277: LD_INT 2
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 70
10288: PUSH
10289: LD_EXP 6
10293: NOT
10294: AND
10295: IFFALSE 10549
10297: GO 10299
10299: DISABLE
10300: LD_INT 0
10302: PPUSH
10303: PPUSH
10304: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10305: LD_ADDR_VAR 0 1
10309: PUSH
10310: LD_EXP 42
10314: PPUSH
10315: LD_INT 26
10317: PUSH
10318: LD_INT 1
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PPUSH
10325: CALL_OW 72
10329: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10330: LD_ADDR_VAR 0 2
10334: PUSH
10335: LD_EXP 42
10339: PPUSH
10340: LD_INT 26
10342: PUSH
10343: LD_INT 2
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PPUSH
10350: CALL_OW 72
10354: ST_TO_ADDR
// DialogueOn ;
10355: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10359: LD_INT 36
10361: PPUSH
10362: LD_INT 22
10364: PPUSH
10365: LD_INT 2
10367: PPUSH
10368: LD_INT 8
10370: PPUSH
10371: CALL_OW 330
// dwait ( 0 0$1 ) ;
10375: LD_INT 35
10377: PPUSH
10378: CALL_OW 68
// speakerOk := false ;
10382: LD_ADDR_VAR 0 3
10386: PUSH
10387: LD_INT 0
10389: ST_TO_ADDR
// if Mike then
10390: LD_EXP 30
10394: IFFALSE 10416
// speakerOk := Say ( Mike , DM-1-spot ) else
10396: LD_ADDR_VAR 0 3
10400: PUSH
10401: LD_EXP 30
10405: PPUSH
10406: LD_STRING DM-1-spot
10408: PPUSH
10409: CALL_OW 88
10413: ST_TO_ADDR
10414: GO 10444
// if randomMen then
10416: LD_VAR 0 1
10420: IFFALSE 10444
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10422: LD_ADDR_VAR 0 3
10426: PUSH
10427: LD_VAR 0 1
10431: PUSH
10432: LD_INT 1
10434: ARRAY
10435: PPUSH
10436: LD_STRING DArm-1-spot-a
10438: PPUSH
10439: CALL_OW 88
10443: ST_TO_ADDR
// if speakerOk then
10444: LD_VAR 0 3
10448: IFFALSE 10492
// begin if Givi then
10450: LD_EXP 29
10454: IFFALSE 10470
// Say ( Givi , DG-1-spot ) else
10456: LD_EXP 29
10460: PPUSH
10461: LD_STRING DG-1-spot
10463: PPUSH
10464: CALL_OW 88
10468: GO 10492
// if randomWomen then
10470: LD_VAR 0 2
10474: IFFALSE 10492
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10476: LD_VAR 0 2
10480: PUSH
10481: LD_INT 1
10483: ARRAY
10484: PPUSH
10485: LD_STRING DArf-1-spot-a
10487: PPUSH
10488: CALL_OW 88
// end ; if Mike then
10492: LD_EXP 30
10496: IFFALSE 10512
// Say ( Heike , DH-1-spot ) else
10498: LD_EXP 28
10502: PPUSH
10503: LD_STRING DH-1-spot
10505: PPUSH
10506: CALL_OW 88
10510: GO 10524
// Say ( Heike , DH-1-spot-a ) ;
10512: LD_EXP 28
10516: PPUSH
10517: LD_STRING DH-1-spot-a
10519: PPUSH
10520: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10524: LD_INT 36
10526: PPUSH
10527: LD_INT 22
10529: PPUSH
10530: LD_INT 2
10532: PPUSH
10533: CALL_OW 331
// DialogueOff ;
10537: CALL_OW 7
// americanBaseSpoted := true ;
10541: LD_ADDR_EXP 5
10545: PUSH
10546: LD_INT 1
10548: ST_TO_ADDR
// end ;
10549: PPOPN 3
10551: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10552: LD_EXP 5
10556: NOT
10557: PUSH
10558: LD_INT 22
10560: PUSH
10561: LD_INT 2
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 101
10570: PUSH
10571: LD_INT 1
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 69
10586: AND
10587: PUSH
10588: LD_EXP 6
10592: NOT
10593: AND
10594: IFFALSE 10680
10596: GO 10598
10598: DISABLE
10599: LD_INT 0
10601: PPUSH
// begin americanBaseSpoted := true ;
10602: LD_ADDR_EXP 5
10606: PUSH
10607: LD_INT 1
10609: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10610: LD_ADDR_VAR 0 1
10614: PUSH
10615: LD_EXP 42
10619: PPUSH
10620: LD_INT 26
10622: PUSH
10623: LD_INT 1
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PPUSH
10630: CALL_OW 72
10634: ST_TO_ADDR
// if not randomMen then
10635: LD_VAR 0 1
10639: NOT
10640: IFFALSE 10644
// exit ;
10642: GO 10680
// DialogueOn ;
10644: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10648: LD_VAR 0 1
10652: PUSH
10653: LD_INT 1
10655: ARRAY
10656: PPUSH
10657: LD_STRING DArm-1-spot-a
10659: PPUSH
10660: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10664: LD_EXP 28
10668: PPUSH
10669: LD_STRING DH-1-spot-a
10671: PPUSH
10672: CALL_OW 88
// DialogueOff ;
10676: CALL_OW 7
// end ;
10680: PPOPN 1
10682: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10683: LD_INT 11
10685: PPUSH
10686: CALL_OW 255
10690: PUSH
10691: LD_INT 2
10693: EQUAL
10694: PUSH
10695: LD_INT 7
10697: PPUSH
10698: LD_INT 22
10700: PUSH
10701: LD_INT 1
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 3
10710: PUSH
10711: LD_INT 50
10713: PUSH
10714: EMPTY
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 30
10723: PUSH
10724: LD_INT 31
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: LIST
10735: PPUSH
10736: CALL_OW 70
10740: OR
10741: PUSH
10742: LD_INT 7
10744: PPUSH
10745: LD_INT 22
10747: PUSH
10748: LD_INT 2
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: PPUSH
10755: CALL_OW 70
10759: PUSH
10760: LD_INT 1
10762: GREATER
10763: OR
10764: PUSH
10765: LD_EXP 44
10769: PUSH
10770: LD_INT 4
10772: LESSEQUAL
10773: OR
10774: IFFALSE 11300
10776: GO 10778
10778: DISABLE
10779: LD_INT 0
10781: PPUSH
10782: PPUSH
// begin wait ( 0 0$3 ) ;
10783: LD_INT 105
10785: PPUSH
10786: CALL_OW 67
// americanStartRun := true ;
10790: LD_ADDR_EXP 14
10794: PUSH
10795: LD_INT 1
10797: ST_TO_ADDR
// if IsOk ( usCommander ) then
10798: LD_EXP 45
10802: PPUSH
10803: CALL_OW 302
10807: IFFALSE 10837
// begin usForces := usForces union usCommander ;
10809: LD_ADDR_EXP 44
10813: PUSH
10814: LD_EXP 44
10818: PUSH
10819: LD_EXP 45
10823: UNION
10824: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
10825: LD_EXP 45
10829: PPUSH
10830: LD_STRING DUsm-1-assault
10832: PPUSH
10833: CALL_OW 88
// end ; for i in usForces do
10837: LD_ADDR_VAR 0 1
10841: PUSH
10842: LD_EXP 44
10846: PUSH
10847: FOR_IN
10848: IFFALSE 10894
// begin if IsInUnit ( i ) then
10850: LD_VAR 0 1
10854: PPUSH
10855: CALL_OW 310
10859: IFFALSE 10870
// ComExitBuilding ( i ) ;
10861: LD_VAR 0 1
10865: PPUSH
10866: CALL_OW 122
// wait ( 3 ) ;
10870: LD_INT 3
10872: PPUSH
10873: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10877: LD_VAR 0 1
10881: PPUSH
10882: LD_INT 34
10884: PPUSH
10885: LD_INT 67
10887: PPUSH
10888: CALL_OW 111
// end ;
10892: GO 10847
10894: POP
10895: POP
// Say ( Heike , DH-1-assault ) ;
10896: LD_EXP 28
10900: PPUSH
10901: LD_STRING DH-1-assault
10903: PPUSH
10904: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10908: LD_INT 35
10910: PPUSH
10911: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10915: LD_VAR 0 1
10919: PPUSH
10920: LD_INT 34
10922: PPUSH
10923: LD_INT 67
10925: PPUSH
10926: CALL_OW 111
// until not usForces ;
10930: LD_EXP 44
10934: NOT
10935: IFFALSE 10908
// music_nat := 2 ;
10937: LD_ADDR_OWVAR 71
10941: PUSH
10942: LD_INT 2
10944: ST_TO_ADDR
// music_class := music_victory ;
10945: LD_ADDR_OWVAR 72
10949: PUSH
10950: LD_INT 4
10952: ST_TO_ADDR
// if not americanHasEscaped then
10953: LD_EXP 8
10957: NOT
10958: IFFALSE 10979
// begin Say ( Heike , DH-2-assault ) ;
10960: LD_EXP 28
10964: PPUSH
10965: LD_STRING DH-2-assault
10967: PPUSH
10968: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
10972: LD_STRING ACH_CLEAN
10974: PPUSH
10975: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
10979: LD_INT 70
10981: PPUSH
10982: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10986: LD_INT 35
10988: PPUSH
10989: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
10993: LD_INT 22
10995: PUSH
10996: LD_INT 2
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 21
11005: PUSH
11006: LD_INT 1
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 3
11015: PUSH
11016: LD_INT 50
11018: PUSH
11019: EMPTY
11020: LIST
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: LIST
11030: PPUSH
11031: CALL_OW 69
11035: NOT
11036: IFFALSE 10986
// InGameOn ;
11038: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11042: LD_INT 11
11044: PPUSH
11045: CALL_OW 255
11049: PUSH
11050: LD_INT 2
11052: EQUAL
11053: NOT
11054: IFFALSE 11066
// SetSide ( usDepot , 2 ) ;
11056: LD_INT 11
11058: PPUSH
11059: LD_INT 2
11061: PPUSH
11062: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11066: LD_INT 35
11068: PPUSH
11069: LD_INT 22
11071: PPUSH
11072: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11076: LD_EXP 28
11080: PPUSH
11081: LD_INT 35
11083: PPUSH
11084: LD_INT 22
11086: PPUSH
11087: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11091: LD_EXP 28
11095: PPUSH
11096: LD_INT 38
11098: PPUSH
11099: LD_INT 25
11101: PPUSH
11102: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11106: LD_EXP 41
11110: PUSH
11111: LD_EXP 42
11115: UNION
11116: PPUSH
11117: LD_INT 39
11119: PPUSH
11120: LD_INT 26
11122: PPUSH
11123: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11127: LD_EXP 41
11131: PUSH
11132: LD_EXP 42
11136: UNION
11137: PPUSH
11138: LD_EXP 28
11142: PPUSH
11143: CALL_OW 179
// p := 0 ;
11147: LD_ADDR_VAR 0 2
11151: PUSH
11152: LD_INT 0
11154: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11155: LD_INT 35
11157: PPUSH
11158: CALL_OW 67
// p := p + 1 ;
11162: LD_ADDR_VAR 0 2
11166: PUSH
11167: LD_VAR 0 2
11171: PUSH
11172: LD_INT 1
11174: PLUS
11175: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11176: LD_EXP 28
11180: PPUSH
11181: CALL_OW 314
11185: NOT
11186: PUSH
11187: LD_VAR 0 2
11191: PUSH
11192: LD_INT 10
11194: GREATER
11195: OR
11196: IFFALSE 11155
// Say ( Heike , DH-1-capture ) ;
11198: LD_EXP 28
11202: PPUSH
11203: LD_STRING DH-1-capture
11205: PPUSH
11206: CALL_OW 88
// if Markov then
11210: LD_EXP 35
11214: IFFALSE 11228
// Say ( Markov , DMar-1-capture ) ;
11216: LD_EXP 35
11220: PPUSH
11221: LD_STRING DMar-1-capture
11223: PPUSH
11224: CALL_OW 88
// if Sophia then
11228: LD_EXP 34
11232: IFFALSE 11258
// begin Say ( Heike , DH-2-capture ) ;
11234: LD_EXP 28
11238: PPUSH
11239: LD_STRING DH-2-capture
11241: PPUSH
11242: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11246: LD_EXP 34
11250: PPUSH
11251: LD_STRING DS-1-capture
11253: PPUSH
11254: CALL_OW 88
// end ; InGameOff ;
11258: CALL_OW 9
// music_nat := music_auto ;
11262: LD_ADDR_OWVAR 71
11266: PUSH
11267: LD_INT 0
11269: ST_TO_ADDR
// music_class := music_auto ;
11270: LD_ADDR_OWVAR 72
11274: PUSH
11275: LD_INT 0
11277: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11278: LD_STRING ConstructBase
11280: PPUSH
11281: CALL_OW 337
// wait ( 0 0$3 ) ;
11285: LD_INT 105
11287: PPUSH
11288: CALL_OW 67
// americanBaseCaptured := true ;
11292: LD_ADDR_EXP 6
11296: PUSH
11297: LD_INT 1
11299: ST_TO_ADDR
// end ;
11300: PPOPN 2
11302: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11303: LD_EXP 13
11307: PUSH
11308: LD_INT 3
11310: GREATEREQUAL
11311: IFFALSE 11323
11313: GO 11315
11315: DISABLE
// SetAchievement ( ACH_ENG ) ;
11316: LD_STRING ACH_ENG
11318: PPUSH
11319: CALL_OW 543
11323: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11324: LD_INT 22
11326: PUSH
11327: LD_INT 2
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: LD_INT 25
11336: PUSH
11337: LD_INT 15
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PPUSH
11348: CALL_OW 69
11352: PUSH
11353: LD_INT 4
11355: GREATEREQUAL
11356: IFFALSE 11368
11358: GO 11360
11360: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11361: LD_STRING ACH_APEGEN
11363: PPUSH
11364: CALL_OW 543
11368: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11369: LD_INT 22
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: LD_INT 30
11381: PUSH
11382: LD_INT 2
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 3
11391: PUSH
11392: LD_INT 57
11394: PUSH
11395: EMPTY
11396: LIST
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: PPUSH
11407: CALL_OW 69
11411: IFFALSE 11654
11413: GO 11415
11415: DISABLE
// begin workshopBuilded := true ;
11416: LD_ADDR_EXP 10
11420: PUSH
11421: LD_INT 1
11423: ST_TO_ADDR
// if IsOk ( Markov ) then
11424: LD_EXP 35
11428: PPUSH
11429: CALL_OW 302
11433: IFFALSE 11492
// begin Say ( Heike , DH-1-shop-a ) ;
11435: LD_EXP 28
11439: PPUSH
11440: LD_STRING DH-1-shop-a
11442: PPUSH
11443: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11447: LD_INT 47
11449: PPUSH
11450: LD_INT 2
11452: PPUSH
11453: CALL_OW 321
11457: PUSH
11458: LD_INT 2
11460: EQUAL
11461: PUSH
11462: LD_INT 45
11464: PPUSH
11465: LD_INT 2
11467: PPUSH
11468: CALL_OW 321
11472: PUSH
11473: LD_INT 2
11475: EQUAL
11476: AND
11477: NOT
11478: IFFALSE 11492
// Say ( Markov , DMar-1-shop-a ) ;
11480: LD_EXP 35
11484: PPUSH
11485: LD_STRING DMar-1-shop-a
11487: PPUSH
11488: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11492: LD_INT 35
11494: PPUSH
11495: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11499: LD_INT 47
11501: PPUSH
11502: LD_INT 2
11504: PPUSH
11505: CALL_OW 321
11509: PUSH
11510: LD_INT 2
11512: EQUAL
11513: PUSH
11514: LD_INT 45
11516: PPUSH
11517: LD_INT 2
11519: PPUSH
11520: CALL_OW 321
11524: PUSH
11525: LD_INT 2
11527: EQUAL
11528: OR
11529: IFFALSE 11492
// DialogueOn ;
11531: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11535: LD_EXP 35
11539: PPUSH
11540: LD_STRING DMar-1-shop
11542: PPUSH
11543: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11547: LD_EXP 28
11551: PPUSH
11552: LD_STRING DH-1-shop
11554: PPUSH
11555: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11559: LD_EXP 35
11563: PPUSH
11564: LD_STRING DMar-2-shop
11566: PPUSH
11567: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11571: LD_EXP 35
11575: PPUSH
11576: LD_STRING DMar-3-shop
11578: PPUSH
11579: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11583: LD_EXP 28
11587: PPUSH
11588: LD_STRING DH-2-shop
11590: PPUSH
11591: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11595: LD_EXP 35
11599: PPUSH
11600: LD_STRING DMar-4-shop
11602: PPUSH
11603: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11607: LD_EXP 28
11611: PPUSH
11612: LD_STRING DH-3-shop
11614: PPUSH
11615: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11619: LD_EXP 35
11623: PPUSH
11624: LD_STRING DMar-5-shop
11626: PPUSH
11627: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11631: LD_EXP 28
11635: PPUSH
11636: LD_STRING DH-4-shop
11638: PPUSH
11639: CALL_OW 88
// DialogueOff ;
11643: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
11647: LD_STRING ConstructVeh
11649: PPUSH
11650: CALL_OW 337
// end ;
11654: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11655: LD_INT 2
11657: PPUSH
11658: LD_INT 2
11660: PPUSH
11661: LD_INT 1
11663: PPUSH
11664: CALL 33583 0 3
11668: PUSH
11669: LD_INT 0
11671: EQUAL
11672: IFFALSE 11684
11674: GO 11676
11676: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11677: LD_STRING Techs
11679: PPUSH
11680: CALL_OW 337
11684: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11685: LD_EXP 35
11689: PPUSH
11690: CALL_OW 302
11694: PUSH
11695: LD_INT 22
11697: PUSH
11698: LD_INT 2
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 2
11707: PUSH
11708: LD_INT 34
11710: PUSH
11711: LD_INT 22
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: LD_INT 35
11720: PUSH
11721: LD_INT 22
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PPUSH
11737: CALL_OW 69
11741: AND
11742: IFFALSE 11849
11744: GO 11746
11746: DISABLE
// begin DialogueOn ;
11747: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11751: LD_INT 22
11753: PUSH
11754: LD_INT 2
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: LD_INT 2
11763: PUSH
11764: LD_INT 34
11766: PUSH
11767: LD_INT 22
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 35
11776: PUSH
11777: LD_INT 22
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PPUSH
11793: CALL_OW 69
11797: PPUSH
11798: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11802: LD_INT 10
11804: PPUSH
11805: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
11809: LD_EXP 28
11813: PPUSH
11814: LD_STRING DH-1-bal
11816: PPUSH
11817: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
11821: LD_EXP 35
11825: PPUSH
11826: LD_STRING DMar-1-bal
11828: PPUSH
11829: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
11833: LD_EXP 28
11837: PPUSH
11838: LD_STRING DH-2-bal
11840: PPUSH
11841: CALL_OW 88
// DialogueOff ;
11845: CALL_OW 7
// end ;
11849: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
11850: LD_EXP 32
11854: PPUSH
11855: CALL_OW 302
11859: PUSH
11860: LD_INT 22
11862: PUSH
11863: LD_INT 2
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: LD_INT 30
11872: PUSH
11873: LD_INT 6
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PPUSH
11884: CALL_OW 69
11888: AND
11889: IFFALSE 11950
11891: GO 11893
11893: DISABLE
// begin DialogueOn ;
11894: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
11898: LD_EXP 32
11902: PPUSH
11903: LD_STRING DA-1-lab
11905: PPUSH
11906: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
11910: LD_EXP 28
11914: PPUSH
11915: LD_STRING DH-1-lab
11917: PPUSH
11918: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
11922: LD_EXP 32
11926: PPUSH
11927: LD_STRING DA-2-lab
11929: PPUSH
11930: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
11934: LD_EXP 28
11938: PPUSH
11939: LD_STRING DH-2-lab
11941: PPUSH
11942: CALL_OW 88
// DialogueOff ;
11946: CALL_OW 7
// end ;
11950: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
11951: LD_EXP 33
11955: PPUSH
11956: CALL_OW 302
11960: PUSH
11961: LD_INT 22
11963: PUSH
11964: LD_INT 2
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PUSH
11971: LD_INT 25
11973: PUSH
11974: LD_INT 15
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PPUSH
11985: CALL_OW 69
11989: AND
11990: PUSH
11991: LD_INT 81
11993: PUSH
11994: LD_INT 2
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PPUSH
12001: CALL_OW 69
12005: NOT
12006: AND
12007: IFFALSE 12189
12009: GO 12011
12011: DISABLE
12012: LD_INT 0
12014: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12015: LD_ADDR_VAR 0 1
12019: PUSH
12020: LD_INT 22
12022: PUSH
12023: LD_INT 2
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 25
12032: PUSH
12033: LD_INT 15
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PPUSH
12044: CALL_OW 69
12048: ST_TO_ADDR
// InGameOn ;
12049: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12053: LD_VAR 0 1
12057: PUSH
12058: LD_INT 1
12060: ARRAY
12061: PPUSH
12062: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12066: LD_VAR 0 1
12070: PUSH
12071: LD_INT 1
12073: ARRAY
12074: PPUSH
12075: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12079: LD_EXP 33
12083: PPUSH
12084: LD_STRING DK-1-apesol
12086: PPUSH
12087: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12091: LD_VAR 0 1
12095: PUSH
12096: LD_INT 1
12098: ARRAY
12099: PPUSH
12100: LD_INT 35
12102: PPUSH
12103: LD_INT 28
12105: PPUSH
12106: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12110: LD_VAR 0 1
12114: PUSH
12115: LD_INT 1
12117: ARRAY
12118: PPUSH
12119: LD_INT 36
12121: PPUSH
12122: LD_INT 17
12124: PPUSH
12125: CALL_OW 171
// DialogueOn ;
12129: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12133: LD_EXP 32
12137: PPUSH
12138: LD_STRING DA-1-apesol
12140: PPUSH
12141: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12145: LD_EXP 33
12149: PPUSH
12150: LD_STRING DK-2-apesol
12152: PPUSH
12153: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12157: LD_EXP 32
12161: PPUSH
12162: LD_STRING DA-2-apesol
12164: PPUSH
12165: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12169: LD_EXP 33
12173: PPUSH
12174: LD_STRING DK-3-apesol
12176: PPUSH
12177: CALL_OW 88
// DialogueOff ;
12181: CALL_OW 7
// InGameOff ;
12185: CALL_OW 9
// end ;
12189: PPOPN 1
12191: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12192: LD_EXP 34
12196: PPUSH
12197: CALL_OW 302
12201: PUSH
12202: LD_INT 22
12204: PUSH
12205: LD_INT 2
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 25
12214: PUSH
12215: LD_INT 16
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PPUSH
12226: CALL_OW 69
12230: AND
12231: PUSH
12232: LD_INT 81
12234: PUSH
12235: LD_INT 2
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 69
12246: NOT
12247: AND
12248: IFFALSE 12511
12250: GO 12252
12252: DISABLE
12253: LD_INT 0
12255: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12256: LD_ADDR_VAR 0 1
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: LD_INT 2
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 25
12273: PUSH
12274: LD_INT 16
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PPUSH
12285: CALL_OW 69
12289: ST_TO_ADDR
// InGameOn ;
12290: CALL_OW 8
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12294: LD_INT 5
12296: PPUSH
12297: LD_INT 35
12299: PPUSH
12300: LD_INT 22
12302: PPUSH
12303: LD_INT 1
12305: PPUSH
12306: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12310: LD_EXP 34
12314: PPUSH
12315: LD_VAR 0 1
12319: PUSH
12320: LD_INT 1
12322: ARRAY
12323: PPUSH
12324: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12328: LD_VAR 0 1
12332: PUSH
12333: LD_INT 1
12335: ARRAY
12336: PPUSH
12337: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12341: LD_VAR 0 1
12345: PUSH
12346: LD_INT 1
12348: ARRAY
12349: PPUSH
12350: CALL_OW 122
// wait ( 0 0$2 ) ;
12354: LD_INT 70
12356: PPUSH
12357: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12361: LD_EXP 34
12365: PPUSH
12366: LD_STRING DS-1-apeeng
12368: PPUSH
12369: CALL_OW 88
// if IsOk ( Kamil ) then
12373: LD_EXP 31
12377: PPUSH
12378: CALL_OW 302
12382: IFFALSE 12507
// begin Say ( Kamil , DKam-1-apeeng ) ;
12384: LD_EXP 31
12388: PPUSH
12389: LD_STRING DKam-1-apeeng
12391: PPUSH
12392: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12396: LD_EXP 34
12400: PPUSH
12401: LD_STRING DS-2-apeeng
12403: PPUSH
12404: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12408: LD_EXP 31
12412: PPUSH
12413: LD_STRING DKam-2-apeeng
12415: PPUSH
12416: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12420: LD_EXP 34
12424: PPUSH
12425: LD_STRING DS-3-apeeng
12427: PPUSH
12428: CALL_OW 88
// if not IsOK ( Kaia ) then
12432: LD_EXP 33
12436: PPUSH
12437: CALL_OW 302
12441: NOT
12442: IFFALSE 12450
// begin InGameOff ;
12444: CALL_OW 9
// exit ;
12448: GO 12511
// end ; Say ( Kaia , DK-1-apeeng ) ;
12450: LD_EXP 33
12454: PPUSH
12455: LD_STRING DK-1-apeeng
12457: PPUSH
12458: CALL_OW 88
// if not IsOk ( Givi ) then
12462: LD_EXP 29
12466: PPUSH
12467: CALL_OW 302
12471: NOT
12472: IFFALSE 12483
// begin Video ( false ) ;
12474: LD_INT 0
12476: PPUSH
12477: CALL 69362 0 1
// exit ;
12481: GO 12511
// end ; Say ( Givi , DG-1-apeeng ) ;
12483: LD_EXP 29
12487: PPUSH
12488: LD_STRING DG-1-apeeng
12490: PPUSH
12491: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12495: LD_EXP 33
12499: PPUSH
12500: LD_STRING DK-2-apeeng
12502: PPUSH
12503: CALL_OW 88
// end ; InGameOff ;
12507: CALL_OW 9
// end ;
12511: PPOPN 1
12513: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12514: LD_EXP 4
12518: PUSH
12519: LD_INT 22
12521: PUSH
12522: LD_INT 2
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 30
12531: PUSH
12532: LD_INT 0
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PPUSH
12543: CALL_OW 69
12547: AND
12548: IFFALSE 12713
12550: GO 12552
12552: DISABLE
// begin wait ( 0 0$10 ) ;
12553: LD_INT 350
12555: PPUSH
12556: CALL_OW 67
// DialogueOn ;
12560: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12564: LD_EXP 36
12568: PPUSH
12569: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12573: LD_EXP 36
12577: PPUSH
12578: LD_STRING DF-1-distribution
12580: PPUSH
12581: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12585: LD_EXP 28
12589: PPUSH
12590: LD_STRING DH-2-distribution
12592: PPUSH
12593: CALL_OW 88
// if IsOk ( Kaia ) then
12597: LD_EXP 33
12601: PPUSH
12602: CALL_OW 302
12606: IFFALSE 12667
// begin Say ( Kaia , DK-1-distribution ) ;
12608: LD_EXP 33
12612: PPUSH
12613: LD_STRING DK-1-distribution
12615: PPUSH
12616: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12620: LD_EXP 28
12624: PPUSH
12625: LD_STRING DH-1-distribution
12627: PPUSH
12628: CALL_OW 88
// if IsOk ( Givi ) then
12632: LD_EXP 29
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12667
// begin Say ( Givi , DG-1-distribution ) ;
12643: LD_EXP 29
12647: PPUSH
12648: LD_STRING DG-1-distribution
12650: PPUSH
12651: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12655: LD_EXP 28
12659: PPUSH
12660: LD_STRING DH-3-distribution
12662: PPUSH
12663: CALL_OW 88
// end ; end ; DialogueOff ;
12667: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12671: LD_STRING Crates1
12673: PPUSH
12674: CALL_OW 337
// farmerRequestedCrates := 300 ;
12678: LD_ADDR_EXP 16
12682: PUSH
12683: LD_INT 300
12685: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12686: LD_STRING FarmerCrates
12688: PPUSH
12689: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12693: LD_INT 10
12695: PPUSH
12696: LD_INT 1
12698: PPUSH
12699: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12703: LD_INT 108
12705: PPUSH
12706: LD_INT 61
12708: PPUSH
12709: CALL_OW 86
// end ;
12713: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12714: LD_EXP 6
12718: PUSH
12719: LD_INT 22
12721: PUSH
12722: LD_INT 2
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 3
12731: PUSH
12732: LD_INT 57
12734: PUSH
12735: EMPTY
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 2
12744: PUSH
12745: LD_INT 30
12747: PUSH
12748: LD_INT 6
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 30
12757: PUSH
12758: LD_INT 7
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: PPUSH
12775: CALL_OW 69
12779: AND
12780: PUSH
12781: LD_INT 22
12783: PUSH
12784: LD_INT 2
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 3
12793: PUSH
12794: LD_INT 57
12796: PUSH
12797: EMPTY
12798: LIST
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 30
12806: PUSH
12807: LD_INT 4
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: PPUSH
12819: CALL_OW 69
12823: AND
12824: IFFALSE 12988
12826: GO 12828
12828: DISABLE
12829: LD_INT 0
12831: PPUSH
// begin wait ( 0 0$10 ) ;
12832: LD_INT 350
12834: PPUSH
12835: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
12839: LD_ADDR_VAR 0 1
12843: PUSH
12844: LD_EXP 42
12848: PPUSH
12849: LD_INT 26
12851: PUSH
12852: LD_INT 1
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 25
12861: PUSH
12862: LD_INT 2
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PPUSH
12873: CALL_OW 72
12877: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
12878: LD_EXP 28
12882: PPUSH
12883: LD_STRING DH-1-task
12885: PPUSH
12886: CALL_OW 88
// if IsOk ( Sophia ) then
12890: LD_EXP 34
12894: PPUSH
12895: CALL_OW 302
12899: IFFALSE 12939
// begin Say ( Sophia , DS-1-task ) ;
12901: LD_EXP 34
12905: PPUSH
12906: LD_STRING DS-1-task
12908: PPUSH
12909: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
12913: LD_EXP 34
12917: PPUSH
12918: LD_STRING DS-2-task
12920: PPUSH
12921: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
12925: LD_EXP 28
12929: PPUSH
12930: LD_STRING DH-2-task
12932: PPUSH
12933: CALL_OW 88
// end else
12937: GO 12973
// if eng then
12939: LD_VAR 0 1
12943: IFFALSE 12973
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
12945: LD_VAR 0 1
12949: PUSH
12950: LD_INT 1
12952: ARRAY
12953: PPUSH
12954: LD_STRING DArm-1-task
12956: PPUSH
12957: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
12961: LD_EXP 28
12965: PPUSH
12966: LD_STRING DH-2-task
12968: PPUSH
12969: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
12973: LD_STRING BaseConstructed
12975: PPUSH
12976: CALL_OW 337
// allowConvoys := true ;
12980: LD_ADDR_EXP 12
12984: PUSH
12985: LD_INT 1
12987: ST_TO_ADDR
// end ;
12988: PPOPN 1
12990: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
12991: LD_INT 22
12993: PUSH
12994: LD_INT 4
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 34
13003: PUSH
13004: LD_INT 12
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PPUSH
13015: CALL_OW 69
13019: IFFALSE 13187
13021: GO 13023
13023: DISABLE
13024: LD_INT 0
13026: PPUSH
13027: PPUSH
13028: PPUSH
// begin wait ( 0 0$2 ) ;
13029: LD_INT 70
13031: PPUSH
13032: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13036: LD_ADDR_VAR 0 1
13040: PUSH
13041: LD_INT 22
13043: PUSH
13044: LD_INT 4
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 34
13053: PUSH
13054: LD_INT 12
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PPUSH
13065: CALL_OW 69
13069: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13070: LD_ADDR_VAR 0 2
13074: PUSH
13075: LD_VAR 0 1
13079: PUSH
13080: LD_INT 1
13082: ARRAY
13083: PPUSH
13084: CALL_OW 250
13088: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13089: LD_ADDR_VAR 0 3
13093: PUSH
13094: LD_VAR 0 1
13098: PUSH
13099: LD_INT 1
13101: ARRAY
13102: PPUSH
13103: CALL_OW 251
13107: ST_TO_ADDR
// DialogueOn ;
13108: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13112: LD_VAR 0 2
13116: PPUSH
13117: LD_VAR 0 3
13121: PPUSH
13122: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13126: LD_VAR 0 2
13130: PPUSH
13131: LD_VAR 0 3
13135: PPUSH
13136: LD_INT 2
13138: PPUSH
13139: LD_INT 6
13141: NEG
13142: PPUSH
13143: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13147: LD_INT 10
13149: PPUSH
13150: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13154: LD_EXP 28
13158: PPUSH
13159: LD_STRING DH-1-seecargo
13161: PPUSH
13162: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13166: LD_VAR 0 2
13170: PPUSH
13171: LD_VAR 0 3
13175: PPUSH
13176: LD_INT 2
13178: PPUSH
13179: CALL_OW 331
// DialogueOff ;
13183: CALL_OW 7
// end ;
13187: PPOPN 3
13189: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13190: LD_EXP 4
13194: PUSH
13195: LD_EXP 15
13199: PUSH
13200: LD_INT 300
13202: GREATEREQUAL
13203: AND
13204: IFFALSE 13276
13206: GO 13208
13208: DISABLE
// begin DialogueOn ;
13209: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13213: LD_EXP 36
13217: PPUSH
13218: LD_STRING DF-1-delivery-2
13220: PPUSH
13221: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13225: LD_EXP 28
13229: PPUSH
13230: LD_STRING DH-1-delivery-2
13232: PPUSH
13233: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13237: LD_EXP 36
13241: PPUSH
13242: LD_STRING DF-2-delivery-2
13244: PPUSH
13245: CALL_OW 94
// DialogueOff ;
13249: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13253: LD_STRING Crates2
13255: PPUSH
13256: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13260: LD_ADDR_EXP 17
13264: PUSH
13265: LD_INT 63000
13267: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13268: LD_ADDR_EXP 16
13272: PUSH
13273: LD_INT 600
13275: ST_TO_ADDR
// end ;
13276: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13277: LD_EXP 4
13281: PUSH
13282: LD_EXP 15
13286: PUSH
13287: LD_INT 600
13289: GREATEREQUAL
13290: AND
13291: PUSH
13292: LD_OWVAR 67
13296: PUSH
13297: LD_INT 1
13299: GREATER
13300: AND
13301: IFFALSE 13467
13303: GO 13305
13305: DISABLE
// begin DialogueOn ;
13306: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13310: LD_EXP 36
13314: PPUSH
13315: LD_STRING DF-1-delivery-3
13317: PPUSH
13318: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13322: LD_EXP 28
13326: PPUSH
13327: LD_STRING DH-1-delivery-3
13329: PPUSH
13330: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13334: LD_EXP 36
13338: PPUSH
13339: LD_STRING DF-2-delivery-3
13341: PPUSH
13342: CALL_OW 94
// if IsOk ( Kaia ) then
13346: LD_EXP 33
13350: PPUSH
13351: CALL_OW 302
13355: IFFALSE 13405
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13357: LD_EXP 33
13361: PPUSH
13362: LD_STRING DK-1-delivery-3
13364: PPUSH
13365: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13369: LD_EXP 28
13373: PPUSH
13374: LD_STRING DH-2-delivery-3
13376: PPUSH
13377: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13381: LD_EXP 29
13385: PPUSH
13386: LD_STRING DG-1-delivery-3
13388: PPUSH
13389: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13393: LD_EXP 30
13397: PPUSH
13398: LD_STRING DM-1-delivery-3
13400: PPUSH
13401: CALL_OW 88
// end ; DialogueOff ;
13405: CALL_OW 7
// if Difficulty = 2 then
13409: LD_OWVAR 67
13413: PUSH
13414: LD_INT 2
13416: EQUAL
13417: IFFALSE 13444
// begin ChangeMissionObjectives ( Crates3 ) ;
13419: LD_STRING Crates3
13421: PPUSH
13422: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13426: LD_ADDR_EXP 17
13430: PUSH
13431: LD_INT 63000
13433: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13434: LD_ADDR_EXP 16
13438: PUSH
13439: LD_INT 900
13441: ST_TO_ADDR
// end else
13442: GO 13467
// begin ChangeMissionObjectives ( Crates4 ) ;
13444: LD_STRING Crates4
13446: PPUSH
13447: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13451: LD_ADDR_EXP 17
13455: PUSH
13456: LD_INT 63000
13458: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13459: LD_ADDR_EXP 16
13463: PUSH
13464: LD_INT 1200
13466: ST_TO_ADDR
// end ; end ;
13467: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13468: LD_EXP 4
13472: PUSH
13473: LD_EXP 15
13477: PUSH
13478: LD_INT 600
13480: PUSH
13481: LD_INT 900
13483: PUSH
13484: LD_INT 1200
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: PUSH
13492: LD_OWVAR 67
13496: ARRAY
13497: GREATEREQUAL
13498: AND
13499: PUSH
13500: LD_EXP 16
13504: PUSH
13505: LD_EXP 17
13509: LESSEQUAL
13510: AND
13511: IFFALSE 13578
13513: GO 13515
13515: DISABLE
// begin retreatAllowed := true ;
13516: LD_ADDR_EXP 11
13520: PUSH
13521: LD_INT 1
13523: ST_TO_ADDR
// display_strings := [ ] ;
13524: LD_ADDR_OWVAR 47
13528: PUSH
13529: EMPTY
13530: ST_TO_ADDR
// DialogueOn ;
13531: CALL_OW 6
// InGameOn ;
13535: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13539: LD_EXP 37
13543: PPUSH
13544: LD_STRING DO-radio-end
13546: PPUSH
13547: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13551: LD_EXP 28
13555: PPUSH
13556: LD_STRING DH-1-radio-end
13558: PPUSH
13559: CALL_OW 88
// InGameOff ;
13563: CALL_OW 9
// DialogueOff ;
13567: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13571: LD_STRING Retreat
13573: PPUSH
13574: CALL_OW 337
// end ;
13578: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13579: LD_EXP 11
13583: IFFALSE 13714
13585: GO 13587
13587: DISABLE
13588: LD_INT 0
13590: PPUSH
13591: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13592: LD_INT 10
13594: PPUSH
13595: LD_INT 0
13597: PPUSH
13598: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13602: LD_ADDR_VAR 0 1
13606: PUSH
13607: LD_EXP 39
13611: PPUSH
13612: LD_INT 25
13614: PUSH
13615: LD_INT 2
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PPUSH
13622: CALL_OW 72
13626: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13627: LD_VAR 0 1
13631: PUSH
13632: LD_INT 102
13634: PPUSH
13635: LD_INT 69
13637: PPUSH
13638: CALL_OW 428
13642: PUSH
13643: LD_INT 0
13645: EQUAL
13646: AND
13647: IFFALSE 13714
// begin for i in tmp do
13649: LD_ADDR_VAR 0 2
13653: PUSH
13654: LD_VAR 0 1
13658: PUSH
13659: FOR_IN
13660: IFFALSE 13684
// if IsInUnit ( i ) then
13662: LD_VAR 0 2
13666: PPUSH
13667: CALL_OW 310
13671: IFFALSE 13682
// ComExitBuilding ( i ) ;
13673: LD_VAR 0 2
13677: PPUSH
13678: CALL_OW 122
13682: GO 13659
13684: POP
13685: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13686: LD_VAR 0 1
13690: PPUSH
13691: LD_INT 31
13693: PPUSH
13694: LD_INT 102
13696: PPUSH
13697: LD_INT 69
13699: PPUSH
13700: LD_INT 2
13702: PPUSH
13703: CALL_OW 205
// wait ( 0 0$3 ) ;
13707: LD_INT 105
13709: PPUSH
13710: CALL_OW 67
// end ; end ;
13714: PPOPN 2
13716: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13717: LD_EXP 11
13721: NOT
13722: PUSH
13723: LD_INT 5
13725: PPUSH
13726: CALL_OW 301
13730: AND
13731: IFFALSE 13763
13733: GO 13735
13735: DISABLE
// begin DialogueOn ;
13736: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
13740: LD_EXP 36
13744: PPUSH
13745: LD_STRING DF-1-failure
13747: PPUSH
13748: CALL_OW 94
// DialogueOff ;
13752: CALL_OW 7
// YouLost ( FarmerDepot ) ;
13756: LD_STRING FarmerDepot
13758: PPUSH
13759: CALL_OW 104
// end ;
13763: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
13764: LD_EXP 11
13768: PUSH
13769: LD_EXP 28
13773: PPUSH
13774: LD_EXP 36
13778: PPUSH
13779: CALL_OW 296
13783: PUSH
13784: LD_INT 6
13786: LESS
13787: AND
13788: PUSH
13789: LD_INT 81
13791: PUSH
13792: LD_INT 2
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 21
13801: PUSH
13802: LD_INT 1
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PPUSH
13813: CALL_OW 69
13817: NOT
13818: AND
13819: IFFALSE 14440
13821: GO 13823
13823: DISABLE
13824: LD_INT 0
13826: PPUSH
13827: PPUSH
13828: PPUSH
// begin allowConvoys := false ;
13829: LD_ADDR_EXP 12
13833: PUSH
13834: LD_INT 0
13836: ST_TO_ADDR
// InGameOn ;
13837: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
13841: LD_EXP 28
13845: PPUSH
13846: LD_EXP 36
13850: PPUSH
13851: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
13855: LD_EXP 36
13859: PPUSH
13860: LD_EXP 28
13864: PPUSH
13865: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
13869: LD_EXP 36
13873: PPUSH
13874: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
13878: LD_EXP 28
13882: PPUSH
13883: LD_STRING DH-1-end
13885: PPUSH
13886: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
13890: LD_EXP 36
13894: PPUSH
13895: LD_STRING DF-1-end
13897: PPUSH
13898: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
13902: LD_EXP 36
13906: PPUSH
13907: LD_STRING DF-2-end
13909: PPUSH
13910: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
13914: LD_EXP 28
13918: PPUSH
13919: LD_STRING DH-2-end
13921: PPUSH
13922: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
13926: LD_EXP 36
13930: PPUSH
13931: LD_STRING DF-3-end
13933: PPUSH
13934: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
13938: LD_EXP 28
13942: PPUSH
13943: LD_STRING DH-3-end
13945: PPUSH
13946: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
13950: LD_EXP 29
13954: PPUSH
13955: LD_STRING DG-1-end
13957: PPUSH
13958: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
13962: LD_EXP 28
13966: PPUSH
13967: LD_STRING DH-4-end
13969: PPUSH
13970: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
13974: LD_EXP 36
13978: PPUSH
13979: LD_STRING DF-4-end
13981: PPUSH
13982: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
13986: LD_EXP 28
13990: PPUSH
13991: LD_STRING DH-5-end
13993: PPUSH
13994: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
13998: LD_EXP 36
14002: PPUSH
14003: LD_STRING DF-5-end
14005: PPUSH
14006: CALL_OW 88
// InGameOff ;
14010: CALL_OW 9
// allowCargoEvacuation := true ;
14014: LD_ADDR_EXP 7
14018: PUSH
14019: LD_INT 1
14021: ST_TO_ADDR
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14022: LD_ADDR_VAR 0 2
14026: PUSH
14027: LD_INT 4
14029: PUSH
14030: LD_INT 3
14032: PUSH
14033: LD_INT 2
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: LIST
14040: PUSH
14041: LD_OWVAR 67
14045: ARRAY
14046: ST_TO_ADDR
// if farmerSquad < max then
14047: LD_EXP 39
14051: PUSH
14052: LD_VAR 0 2
14056: LESS
14057: IFFALSE 14069
// max := farmerSquad ;
14059: LD_ADDR_VAR 0 2
14063: PUSH
14064: LD_EXP 39
14068: ST_TO_ADDR
// for i := 1 to max do
14069: LD_ADDR_VAR 0 1
14073: PUSH
14074: DOUBLE
14075: LD_INT 1
14077: DEC
14078: ST_TO_ADDR
14079: LD_VAR 0 2
14083: PUSH
14084: FOR_TO
14085: IFFALSE 14123
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14087: LD_EXP 39
14091: PUSH
14092: LD_INT 1
14094: ARRAY
14095: PPUSH
14096: LD_INT 2
14098: PPUSH
14099: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14103: LD_ADDR_EXP 39
14107: PUSH
14108: LD_EXP 39
14112: PPUSH
14113: LD_INT 1
14115: PPUSH
14116: CALL_OW 3
14120: ST_TO_ADDR
// end ;
14121: GO 14084
14123: POP
14124: POP
// for i in Farmer ^ farmerSquad do
14125: LD_ADDR_VAR 0 1
14129: PUSH
14130: LD_EXP 36
14134: PUSH
14135: LD_EXP 39
14139: ADD
14140: PUSH
14141: FOR_IN
14142: IFFALSE 14181
// begin if IsInUnit ( i ) then
14144: LD_VAR 0 1
14148: PPUSH
14149: CALL_OW 310
14153: IFFALSE 14164
// ComExitBuilding ( i ) ;
14155: LD_VAR 0 1
14159: PPUSH
14160: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14164: LD_VAR 0 1
14168: PPUSH
14169: LD_INT 102
14171: PPUSH
14172: LD_INT 7
14174: PPUSH
14175: CALL_OW 171
// end ;
14179: GO 14141
14181: POP
14182: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14183: LD_ADDR_VAR 0 1
14187: PUSH
14188: LD_INT 22
14190: PUSH
14191: LD_INT 5
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 3
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PPUSH
14212: CALL_OW 69
14216: PUSH
14217: LD_INT 5
14219: DIFF
14220: PUSH
14221: FOR_IN
14222: IFFALSE 14238
// SetSide ( i , 2 ) ;
14224: LD_VAR 0 1
14228: PPUSH
14229: LD_INT 2
14231: PPUSH
14232: CALL_OW 235
14236: GO 14221
14238: POP
14239: POP
// repeat wait ( 0 0$1 ) ;
14240: LD_INT 35
14242: PPUSH
14243: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14247: LD_ADDR_VAR 0 3
14251: PUSH
14252: LD_EXP 36
14256: PUSH
14257: LD_EXP 39
14261: ADD
14262: PPUSH
14263: LD_INT 95
14265: PUSH
14266: LD_INT 3
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 72
14277: ST_TO_ADDR
// if tmp then
14278: LD_VAR 0 3
14282: IFFALSE 14326
// for i in tmp do
14284: LD_ADDR_VAR 0 1
14288: PUSH
14289: LD_VAR 0 3
14293: PUSH
14294: FOR_IN
14295: IFFALSE 14324
// begin farmerSquad := farmerSquad diff i ;
14297: LD_ADDR_EXP 39
14301: PUSH
14302: LD_EXP 39
14306: PUSH
14307: LD_VAR 0 1
14311: DIFF
14312: ST_TO_ADDR
// RemoveUnit ( i ) ;
14313: LD_VAR 0 1
14317: PPUSH
14318: CALL_OW 64
// end ;
14322: GO 14294
14324: POP
14325: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14326: LD_EXP 39
14330: PUSH
14331: EMPTY
14332: EQUAL
14333: PUSH
14334: LD_EXP 36
14338: PPUSH
14339: CALL_OW 305
14343: NOT
14344: AND
14345: IFFALSE 14240
// if farmerHumanLoseCounter = 0 then
14347: LD_EXP 20
14351: PUSH
14352: LD_INT 0
14354: EQUAL
14355: IFFALSE 14364
// SetAchievement ( ACH_BABY ) ;
14357: LD_STRING ACH_BABY
14359: PPUSH
14360: CALL_OW 543
// wait ( 1 1$00 ) ;
14364: LD_INT 2100
14366: PPUSH
14367: CALL_OW 67
// SendAttack ;
14371: CALL 6087 0 0
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
14375: LD_ADDR_VAR 0 1
14379: PUSH
14380: DOUBLE
14381: LD_INT 1
14383: DEC
14384: ST_TO_ADDR
14385: LD_INT 2
14387: PUSH
14388: LD_INT 3
14390: PUSH
14391: LD_INT 4
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: LIST
14398: PUSH
14399: LD_OWVAR 67
14403: ARRAY
14404: PUSH
14405: FOR_TO
14406: IFFALSE 14438
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 ] [ Difficulty ] ) ;
14408: LD_INT 4200
14410: PUSH
14411: LD_INT 3500
14413: PUSH
14414: LD_INT 3150
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: LIST
14421: PUSH
14422: LD_OWVAR 67
14426: ARRAY
14427: PPUSH
14428: CALL_OW 67
// SendAttack ;
14432: CALL 6087 0 0
// end ;
14436: GO 14405
14438: POP
14439: POP
// end ;
14440: PPOPN 3
14442: END
// every 0 0$1 trigger allowCargoEvacuation do
14443: LD_EXP 7
14447: IFFALSE 14456
14449: GO 14451
14451: DISABLE
// StartCargoEvacuation ;
14452: CALL 3623 0 0
14456: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14457: LD_EXP 17
14461: PUSH
14462: LD_INT 18900
14464: LESSEQUAL
14465: IFFALSE 14514
14467: GO 14469
14469: DISABLE
// begin DialogueOn ;
14470: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14474: LD_EXP 36
14478: PPUSH
14479: LD_STRING DF-1-distribution-a
14481: PPUSH
14482: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14486: LD_EXP 28
14490: PPUSH
14491: LD_STRING DH-1-distribution-a
14493: PPUSH
14494: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14498: LD_EXP 36
14502: PPUSH
14503: LD_STRING DF-2-distribution-a
14505: PPUSH
14506: CALL_OW 94
// DialogueOff ;
14510: CALL_OW 7
// end ;
14514: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14515: LD_EXP 17
14519: PUSH
14520: LD_INT 0
14522: LESSEQUAL
14523: IFFALSE 14555
14525: GO 14527
14527: DISABLE
// begin DialogueOn ;
14528: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14532: LD_EXP 36
14536: PPUSH
14537: LD_STRING DF-3-distribution-a
14539: PPUSH
14540: CALL_OW 94
// YouLost ( Distribution ) ;
14544: LD_STRING Distribution
14546: PPUSH
14547: CALL_OW 104
// DialogueOff ;
14551: CALL_OW 7
// end ;
14555: END
// every 0 0$1 trigger vehCounter >= 2 do
14556: LD_EXP 22
14560: PUSH
14561: LD_INT 2
14563: GREATEREQUAL
14564: IFFALSE 14576
14566: GO 14568
14568: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14569: LD_STRING VehConstructed
14571: PPUSH
14572: CALL_OW 337
14576: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14577: LD_INT 22
14579: PUSH
14580: LD_INT 2
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: LD_INT 34
14589: PUSH
14590: LD_INT 12
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PPUSH
14601: CALL_OW 69
14605: IFFALSE 14665
14607: GO 14609
14609: DISABLE
// begin DialogueOn ;
14610: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14614: LD_EXP 28
14618: PPUSH
14619: LD_STRING DH-1-truck
14621: PPUSH
14622: CALL_OW 88
// if IsOk ( Markov ) then
14626: LD_EXP 35
14630: PPUSH
14631: CALL_OW 302
14635: IFFALSE 14661
// begin Say ( Markov , DMar-1-truck ) ;
14637: LD_EXP 35
14641: PPUSH
14642: LD_STRING DMar-1-truck
14644: PPUSH
14645: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14649: LD_EXP 28
14653: PPUSH
14654: LD_STRING DH-2-truck
14656: PPUSH
14657: CALL_OW 88
// end ; DialogueOff ;
14661: CALL_OW 7
// end ;
14665: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14666: LD_INT 0
14668: PPUSH
14669: PPUSH
14670: PPUSH
// if IsOk ( Givi ) then
14671: LD_EXP 29
14675: PPUSH
14676: CALL_OW 302
14680: IFFALSE 14696
// begin Say ( Givi , DG-1-nocargo ) ;
14682: LD_EXP 29
14686: PPUSH
14687: LD_STRING DG-1-nocargo
14689: PPUSH
14690: CALL_OW 88
// exit ;
14694: GO 14792
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14696: LD_ADDR_VAR 0 2
14700: PUSH
14701: LD_EXP 42
14705: PPUSH
14706: LD_INT 26
14708: PUSH
14709: LD_INT 1
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PPUSH
14716: CALL_OW 72
14720: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14721: LD_ADDR_VAR 0 3
14725: PUSH
14726: LD_EXP 42
14730: PPUSH
14731: LD_INT 26
14733: PUSH
14734: LD_INT 2
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PPUSH
14741: CALL_OW 72
14745: ST_TO_ADDR
// if randomMen then
14746: LD_VAR 0 2
14750: IFFALSE 14770
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
14752: LD_VAR 0 2
14756: PUSH
14757: LD_INT 1
14759: ARRAY
14760: PPUSH
14761: LD_STRING DArm-1-nocargo
14763: PPUSH
14764: CALL_OW 88
14768: GO 14792
// if randomWomen then
14770: LD_VAR 0 3
14774: IFFALSE 14792
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
14776: LD_VAR 0 3
14780: PUSH
14781: LD_INT 1
14783: ARRAY
14784: PPUSH
14785: LD_STRING DArf-1-nocargo
14787: PPUSH
14788: CALL_OW 88
// end ;
14792: LD_VAR 0 1
14796: RET
// export function IncomingAttack ; begin
14797: LD_INT 0
14799: PPUSH
// if attackWave = 1 then
14800: LD_EXP 19
14804: PUSH
14805: LD_INT 1
14807: EQUAL
14808: IFFALSE 14879
// begin DialogueOn ;
14810: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
14814: LD_EXP 37
14818: PPUSH
14819: LD_STRING DO-1-radio-1
14821: PPUSH
14822: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
14826: LD_EXP 28
14830: PPUSH
14831: LD_STRING DH-1-radio-1-
14833: PPUSH
14834: CALL_OW 88
// if IsOk ( Markov ) then
14838: LD_EXP 35
14842: PPUSH
14843: CALL_OW 302
14847: IFFALSE 14873
// begin Say ( Markov , DMar-1-radio-1 ) ;
14849: LD_EXP 35
14853: PPUSH
14854: LD_STRING DMar-1-radio-1
14856: PPUSH
14857: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
14861: LD_EXP 28
14865: PPUSH
14866: LD_STRING DH-2-radio-1
14868: PPUSH
14869: CALL_OW 88
// end ; DialogueOff ;
14873: CALL_OW 7
// end else
14877: GO 14903
// begin SayRadio ( Omar , DO-1-radio-u ) ;
14879: LD_EXP 37
14883: PPUSH
14884: LD_STRING DO-1-radio-u
14886: PPUSH
14887: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
14891: LD_EXP 28
14895: PPUSH
14896: LD_STRING DH-1-radio-u
14898: PPUSH
14899: CALL_OW 88
// end ; end ;
14903: LD_VAR 0 1
14907: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
14908: LD_EXP 44
14912: PPUSH
14913: LD_INT 95
14915: PUSH
14916: LD_INT 8
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PPUSH
14923: CALL_OW 72
14927: IFFALSE 15030
14929: GO 14931
14931: DISABLE
14932: LD_INT 0
14934: PPUSH
// begin enable ;
14935: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
14936: LD_ADDR_VAR 0 1
14940: PUSH
14941: LD_EXP 44
14945: PPUSH
14946: LD_INT 95
14948: PUSH
14949: LD_INT 8
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PPUSH
14956: CALL_OW 72
14960: PUSH
14961: FOR_IN
14962: IFFALSE 14991
// begin usForces := usForces diff i ;
14964: LD_ADDR_EXP 44
14968: PUSH
14969: LD_EXP 44
14973: PUSH
14974: LD_VAR 0 1
14978: DIFF
14979: ST_TO_ADDR
// RemoveUnit ( i ) ;
14980: LD_VAR 0 1
14984: PPUSH
14985: CALL_OW 64
// end ;
14989: GO 14961
14991: POP
14992: POP
// if not americanHasEscaped and attackWave = 1 then
14993: LD_EXP 8
14997: NOT
14998: PUSH
14999: LD_EXP 19
15003: PUSH
15004: LD_INT 1
15006: EQUAL
15007: AND
15008: IFFALSE 15030
// begin americanHasEscaped := true ;
15010: LD_ADDR_EXP 8
15014: PUSH
15015: LD_INT 1
15017: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15018: LD_EXP 28
15022: PPUSH
15023: LD_STRING DH-2-assault-a
15025: PPUSH
15026: CALL_OW 88
// end ; end ;
15030: PPOPN 1
15032: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15033: LD_INT 4
15035: PPUSH
15036: LD_INT 22
15038: PUSH
15039: LD_INT 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PPUSH
15046: CALL_OW 70
15050: PUSH
15051: LD_EXP 11
15055: NOT
15056: AND
15057: IFFALSE 15074
15059: GO 15061
15061: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15062: LD_EXP 36
15066: PPUSH
15067: LD_STRING DF-1-attack
15069: PPUSH
15070: CALL_OW 94
15074: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15075: LD_INT 5
15077: PPUSH
15078: CALL_OW 255
15082: PUSH
15083: LD_INT 2
15085: EQUAL
15086: IFFALSE 15098
15088: GO 15090
15090: DISABLE
// YouLost ( Attack ) ;
15091: LD_STRING Attack
15093: PPUSH
15094: CALL_OW 104
15098: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15099: LD_INT 22
15101: PUSH
15102: LD_INT 1
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 21
15111: PUSH
15112: LD_INT 1
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PPUSH
15123: CALL_OW 69
15127: NOT
15128: PUSH
15129: LD_INT 22
15131: PUSH
15132: LD_INT 4
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PPUSH
15139: CALL_OW 69
15143: NOT
15144: AND
15145: PUSH
15146: LD_EXP 11
15150: NOT
15151: AND
15152: PUSH
15153: LD_EXP 15
15157: PUSH
15158: LD_INT 90
15160: GREATER
15161: AND
15162: PUSH
15163: LD_INT 7
15165: PPUSH
15166: LD_INT 22
15168: PUSH
15169: LD_INT 2
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 21
15178: PUSH
15179: LD_INT 1
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PPUSH
15190: CALL_OW 70
15194: AND
15195: PUSH
15196: LD_INT 22
15198: PUSH
15199: LD_INT 2
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 50
15208: PUSH
15209: EMPTY
15210: LIST
15211: PUSH
15212: LD_INT 30
15214: PUSH
15215: LD_INT 0
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: LIST
15226: PPUSH
15227: CALL_OW 69
15231: AND
15232: IFFALSE 16025
15234: GO 15236
15236: DISABLE
15237: LD_INT 0
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
// begin depot := usDepot ;
15244: LD_ADDR_VAR 0 5
15248: PUSH
15249: LD_INT 11
15251: ST_TO_ADDR
// if not depot then
15252: LD_VAR 0 5
15256: NOT
15257: IFFALSE 15297
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15259: LD_ADDR_VAR 0 5
15263: PUSH
15264: LD_INT 22
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 30
15276: PUSH
15277: LD_INT 0
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PPUSH
15288: CALL_OW 69
15292: PUSH
15293: LD_INT 1
15295: ARRAY
15296: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15297: LD_ADDR_VAR 0 1
15301: PUSH
15302: LD_EXP 42
15306: PPUSH
15307: LD_INT 26
15309: PUSH
15310: LD_INT 1
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PPUSH
15317: CALL_OW 72
15321: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15322: LD_ADDR_VAR 0 2
15326: PUSH
15327: LD_EXP 42
15331: PPUSH
15332: LD_INT 26
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PPUSH
15342: CALL_OW 72
15346: ST_TO_ADDR
// if IsOk ( Kaia ) then
15347: LD_EXP 33
15351: PPUSH
15352: CALL_OW 302
15356: IFFALSE 15377
// speaker := [ Kaia , DK ] else
15358: LD_ADDR_VAR 0 3
15362: PUSH
15363: LD_EXP 33
15367: PUSH
15368: LD_STRING DK
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: ST_TO_ADDR
15375: GO 15457
// if randomMen then
15377: LD_VAR 0 1
15381: IFFALSE 15416
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15383: LD_ADDR_VAR 0 3
15387: PUSH
15388: LD_VAR 0 1
15392: PUSH
15393: LD_INT 1
15395: PPUSH
15396: LD_VAR 0 1
15400: PPUSH
15401: CALL_OW 12
15405: ARRAY
15406: PUSH
15407: LD_STRING DArm
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: ST_TO_ADDR
15414: GO 15457
// if randomWomen then
15416: LD_VAR 0 2
15420: IFFALSE 15455
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15422: LD_ADDR_VAR 0 3
15426: PUSH
15427: LD_VAR 0 2
15431: PUSH
15432: LD_INT 1
15434: PPUSH
15435: LD_VAR 0 2
15439: PPUSH
15440: CALL_OW 12
15444: ARRAY
15445: PUSH
15446: LD_STRING DArf
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: ST_TO_ADDR
15453: GO 15457
// exit ;
15455: GO 16025
// if IsInUnit ( speaker [ 1 ] ) then
15457: LD_VAR 0 3
15461: PUSH
15462: LD_INT 1
15464: ARRAY
15465: PPUSH
15466: CALL_OW 310
15470: IFFALSE 15493
// place := IsInUnit ( speaker [ 1 ] ) else
15472: LD_ADDR_VAR 0 4
15476: PUSH
15477: LD_VAR 0 3
15481: PUSH
15482: LD_INT 1
15484: ARRAY
15485: PPUSH
15486: CALL_OW 310
15490: ST_TO_ADDR
15491: GO 15507
// place := speaker [ 1 ] ;
15493: LD_ADDR_VAR 0 4
15497: PUSH
15498: LD_VAR 0 3
15502: PUSH
15503: LD_INT 1
15505: ARRAY
15506: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15507: LD_VAR 0 4
15511: PPUSH
15512: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15516: LD_VAR 0 4
15520: PPUSH
15521: CALL_OW 250
15525: PPUSH
15526: LD_VAR 0 4
15530: PPUSH
15531: CALL_OW 251
15535: PPUSH
15536: CALL 2131 0 2
// wait ( 0 0$2 ) ;
15540: LD_INT 70
15542: PPUSH
15543: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15547: LD_EXP 38
15551: PPUSH
15552: CALL_OW 305
15556: NOT
15557: IFFALSE 15561
// exit ;
15559: GO 16025
// allowConvoys := false ;
15561: LD_ADDR_EXP 12
15565: PUSH
15566: LD_INT 0
15568: ST_TO_ADDR
// InGameOn ;
15569: CALL_OW 8
// wait ( 0 0$1 ) ;
15573: LD_INT 35
15575: PPUSH
15576: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15580: LD_EXP 38
15584: PPUSH
15585: LD_STRING DI-1-land
15587: PPUSH
15588: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15592: LD_VAR 0 3
15596: PUSH
15597: LD_INT 1
15599: ARRAY
15600: PPUSH
15601: CALL_OW 310
15605: IFFALSE 15620
// ComExit ( speaker [ 1 ] ) ;
15607: LD_VAR 0 3
15611: PUSH
15612: LD_INT 1
15614: ARRAY
15615: PPUSH
15616: CALL 69778 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 1
15627: ARRAY
15628: PPUSH
15629: LD_EXP 38
15633: PPUSH
15634: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15638: LD_VAR 0 3
15642: PUSH
15643: LD_INT 1
15645: ARRAY
15646: PPUSH
15647: LD_EXP 38
15651: PPUSH
15652: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15656: LD_EXP 38
15660: PPUSH
15661: LD_VAR 0 3
15665: PUSH
15666: LD_INT 1
15668: ARRAY
15669: PPUSH
15670: CALL_OW 119
// wait ( 0 0$1 ) ;
15674: LD_INT 35
15676: PPUSH
15677: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15681: LD_VAR 0 3
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: PPUSH
15690: LD_VAR 0 3
15694: PUSH
15695: LD_INT 2
15697: ARRAY
15698: PUSH
15699: LD_STRING -1-land
15701: STR
15702: PPUSH
15703: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15707: LD_EXP 38
15711: PPUSH
15712: LD_STRING DI-2-land
15714: PPUSH
15715: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15719: LD_VAR 0 3
15723: PUSH
15724: LD_INT 1
15726: ARRAY
15727: PPUSH
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 2
15735: ARRAY
15736: PUSH
15737: LD_STRING -2-land
15739: STR
15740: PPUSH
15741: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
15745: LD_VAR 0 3
15749: PUSH
15750: LD_INT 1
15752: ARRAY
15753: PPUSH
15754: LD_VAR 0 3
15758: PUSH
15759: LD_INT 2
15761: ARRAY
15762: PUSH
15763: LD_STRING -3-land
15765: STR
15766: PPUSH
15767: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
15771: LD_EXP 28
15775: PPUSH
15776: LD_STRING DH-1-land
15778: PPUSH
15779: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
15783: LD_VAR 0 5
15787: PPUSH
15788: CALL_OW 313
15792: PUSH
15793: LD_INT 6
15795: EQUAL
15796: IFFALSE 15816
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
15798: LD_VAR 0 5
15802: PPUSH
15803: CALL_OW 313
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
15816: LD_EXP 38
15820: PPUSH
15821: LD_INT 2
15823: PPUSH
15824: CALL_OW 235
// CenterOnUnits ( depot ) ;
15828: LD_VAR 0 5
15832: PPUSH
15833: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
15837: LD_EXP 38
15841: PPUSH
15842: LD_VAR 0 5
15846: PPUSH
15847: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
15851: LD_VAR 0 3
15855: PUSH
15856: LD_INT 1
15858: ARRAY
15859: PPUSH
15860: LD_VAR 0 5
15864: PPUSH
15865: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15869: LD_INT 35
15871: PPUSH
15872: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
15876: LD_EXP 38
15880: PPUSH
15881: CALL_OW 310
15885: PUSH
15886: LD_EXP 38
15890: PPUSH
15891: CALL_OW 302
15895: NOT
15896: OR
15897: PUSH
15898: LD_VAR 0 5
15902: PPUSH
15903: CALL_OW 302
15907: NOT
15908: OR
15909: IFFALSE 15869
// InGameOff ;
15911: CALL_OW 9
// if not IsOk ( Ibrahim ) then
15915: LD_EXP 38
15919: PPUSH
15920: CALL_OW 302
15924: NOT
15925: IFFALSE 15929
// exit ;
15927: GO 16025
// if not IsOk ( depot ) then
15929: LD_VAR 0 5
15933: PPUSH
15934: CALL_OW 302
15938: NOT
15939: IFFALSE 16002
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
15941: LD_EXP 38
15945: PPUSH
15946: LD_INT 30
15948: PPUSH
15949: LD_INT 1
15951: PPUSH
15952: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15956: LD_INT 35
15958: PPUSH
15959: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
15963: LD_EXP 38
15967: PPUSH
15968: LD_INT 30
15970: PPUSH
15971: LD_INT 1
15973: PPUSH
15974: CALL_OW 307
15978: PUSH
15979: LD_EXP 38
15983: PPUSH
15984: CALL_OW 301
15988: OR
15989: IFFALSE 15956
// RemoveUnit ( Ibrahim ) ;
15991: LD_EXP 38
15995: PPUSH
15996: CALL_OW 64
// exit ;
16000: GO 16025
// end ; ibrahimInDepot := true ;
16002: LD_ADDR_EXP 25
16006: PUSH
16007: LD_INT 1
16009: ST_TO_ADDR
// allowConvoys := true ;
16010: LD_ADDR_EXP 12
16014: PUSH
16015: LD_INT 1
16017: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16018: LD_STRING IbrahimInDepot
16020: PPUSH
16021: CALL_OW 97
// end ;
16025: PPOPN 5
16027: END
// export function IbrahimQuery ; begin
16028: LD_INT 0
16030: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16031: LD_STRING IbrahimQuery
16033: PPUSH
16034: CALL_OW 97
16038: PUSH
16039: LD_INT 1
16041: DOUBLE
16042: EQUAL
16043: IFTRUE 16047
16045: GO 16323
16047: POP
// begin allowConvoys := false ;
16048: LD_ADDR_EXP 12
16052: PUSH
16053: LD_INT 0
16055: ST_TO_ADDR
// ibrahimInDepot := false ;
16056: LD_ADDR_EXP 25
16060: PUSH
16061: LD_INT 0
16063: ST_TO_ADDR
// InGameOn ;
16064: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16068: LD_EXP 28
16072: PPUSH
16073: CALL_OW 87
// wait ( 0 0$1 ) ;
16077: LD_INT 35
16079: PPUSH
16080: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16084: LD_EXP 28
16088: PPUSH
16089: LD_STRING DH-1-interrogation
16091: PPUSH
16092: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16096: LD_EXP 38
16100: PPUSH
16101: LD_STRING DI-1-interrogation
16103: PPUSH
16104: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16108: LD_EXP 28
16112: PPUSH
16113: LD_STRING DH-2-interrogation
16115: PPUSH
16116: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16120: LD_EXP 38
16124: PPUSH
16125: LD_STRING DI-2-interrogation
16127: PPUSH
16128: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16132: LD_EXP 28
16136: PPUSH
16137: LD_STRING DH-3-interrogation
16139: PPUSH
16140: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16144: LD_EXP 38
16148: PPUSH
16149: LD_STRING DI-3-interrogation
16151: PPUSH
16152: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16156: LD_EXP 28
16160: PPUSH
16161: LD_STRING DH-4-interrogation
16163: PPUSH
16164: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16168: LD_EXP 38
16172: PPUSH
16173: LD_STRING DI-4-interrogation
16175: PPUSH
16176: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16180: LD_EXP 28
16184: PPUSH
16185: LD_STRING DH-5-interrogation
16187: PPUSH
16188: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16192: LD_EXP 38
16196: PPUSH
16197: LD_STRING DI-5-interrogation
16199: PPUSH
16200: CALL_OW 88
// wait ( 0 0$1 ) ;
16204: LD_INT 35
16206: PPUSH
16207: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16211: LD_STRING IbrahimDecisionQuery
16213: PPUSH
16214: CALL_OW 97
16218: PUSH
16219: LD_INT 1
16221: DOUBLE
16222: EQUAL
16223: IFTRUE 16227
16225: GO 16251
16227: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16228: LD_EXP 38
16232: PPUSH
16233: LD_STRING DI-1-kill
16235: PPUSH
16236: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16240: LD_EXP 38
16244: PPUSH
16245: CALL_OW 66
// end ; 2 :
16249: GO 16317
16251: LD_INT 2
16253: DOUBLE
16254: EQUAL
16255: IFTRUE 16259
16257: GO 16316
16259: POP
// begin SetSide ( Ibrahim , 6 ) ;
16260: LD_EXP 38
16264: PPUSH
16265: LD_INT 6
16267: PPUSH
16268: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16272: LD_EXP 38
16276: PPUSH
16277: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16281: LD_EXP 38
16285: PPUSH
16286: LD_INT 66
16288: PPUSH
16289: LD_INT 2
16291: PPUSH
16292: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16296: LD_EXP 38
16300: PPUSH
16301: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16305: LD_EXP 28
16309: PPUSH
16310: CALL_OW 122
// end ; end ;
16314: GO 16317
16316: POP
// InGameOff ;
16317: CALL_OW 9
// end ; 2 :
16321: GO 16337
16323: LD_INT 2
16325: DOUBLE
16326: EQUAL
16327: IFTRUE 16331
16329: GO 16336
16331: POP
// exit ; end ;
16332: GO 16375
16334: GO 16337
16336: POP
// allowConvoys := true ;
16337: LD_ADDR_EXP 12
16341: PUSH
16342: LD_INT 1
16344: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16345: LD_INT 5250
16347: PPUSH
16348: CALL_OW 67
// ComMoveXY ( Ibrahim , 38 , 28 ) ;
16352: LD_EXP 38
16356: PPUSH
16357: LD_INT 38
16359: PPUSH
16360: LD_INT 28
16362: PPUSH
16363: CALL_OW 111
// ibrahimIsFree := true ;
16367: LD_ADDR_EXP 26
16371: PUSH
16372: LD_INT 1
16374: ST_TO_ADDR
// end ;
16375: LD_VAR 0 1
16379: RET
// every 0 0$1 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b , p , depot , x , y ;
16380: LD_EXP 26
16384: PUSH
16385: LD_EXP 38
16389: PPUSH
16390: CALL_OW 302
16394: AND
16395: PUSH
16396: LD_INT 6
16398: PPUSH
16399: LD_EXP 28
16403: PPUSH
16404: CALL_OW 292
16408: AND
16409: PUSH
16410: LD_INT 22
16412: PUSH
16413: LD_INT 4
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PPUSH
16420: CALL_OW 69
16424: NOT
16425: AND
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_INT 1
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 21
16439: PUSH
16440: LD_INT 1
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PPUSH
16451: CALL_OW 69
16455: NOT
16456: AND
16457: IFFALSE 17217
16459: GO 16461
16461: DISABLE
16462: LD_INT 0
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
16468: PPUSH
16469: PPUSH
// begin allowConvoys := false ;
16470: LD_ADDR_EXP 12
16474: PUSH
16475: LD_INT 0
16477: ST_TO_ADDR
// depot := usDepot ;
16478: LD_ADDR_VAR 0 4
16482: PUSH
16483: LD_INT 11
16485: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16486: LD_INT 11
16488: NOT
16489: PUSH
16490: LD_INT 22
16492: PUSH
16493: LD_INT 2
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 50
16502: PUSH
16503: EMPTY
16504: LIST
16505: PUSH
16506: LD_INT 30
16508: PUSH
16509: LD_INT 0
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: LIST
16520: PPUSH
16521: CALL_OW 69
16525: AND
16526: IFFALSE 16573
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16528: LD_ADDR_VAR 0 4
16532: PUSH
16533: LD_INT 22
16535: PUSH
16536: LD_INT 2
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 50
16545: PUSH
16546: EMPTY
16547: LIST
16548: PUSH
16549: LD_INT 30
16551: PUSH
16552: LD_INT 0
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: PPUSH
16564: CALL_OW 69
16568: PUSH
16569: LD_INT 1
16571: ARRAY
16572: ST_TO_ADDR
// InGameOn ;
16573: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16577: LD_EXP 38
16581: PPUSH
16582: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16586: LD_EXP 28
16590: PPUSH
16591: LD_EXP 38
16595: PPUSH
16596: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16600: LD_EXP 38
16604: PPUSH
16605: LD_EXP 28
16609: PPUSH
16610: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16614: LD_EXP 38
16618: PPUSH
16619: LD_STRING DI-1-free
16621: PPUSH
16622: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16626: LD_EXP 28
16630: PPUSH
16631: LD_STRING DH-1-free
16633: PPUSH
16634: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16638: LD_EXP 38
16642: PPUSH
16643: LD_STRING DI-2-free
16645: PPUSH
16646: CALL_OW 88
// changeClass := 0 ;
16650: LD_ADDR_VAR 0 1
16654: PUSH
16655: LD_INT 0
16657: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16658: LD_STRING IbrahimJoinQuery
16660: PPUSH
16661: CALL_OW 97
16665: PUSH
16666: LD_INT 1
16668: DOUBLE
16669: EQUAL
16670: IFTRUE 16674
16672: GO 16685
16674: POP
// begin changeClass := 1 ;
16675: LD_ADDR_VAR 0 1
16679: PUSH
16680: LD_INT 1
16682: ST_TO_ADDR
// end ; 2 :
16683: GO 16925
16685: LD_INT 2
16687: DOUBLE
16688: EQUAL
16689: IFTRUE 16693
16691: GO 16845
16693: POP
// begin Say ( Heike , DH-1-decline ) ;
16694: LD_EXP 28
16698: PPUSH
16699: LD_STRING DH-1-decline
16701: PPUSH
16702: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16706: LD_EXP 38
16710: PPUSH
16711: LD_STRING DI-1-decline
16713: PPUSH
16714: CALL_OW 88
// InGameOff ;
16718: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16722: LD_EXP 38
16726: PPUSH
16727: LD_INT 30
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: CALL_OW 111
// p := 0 ;
16737: LD_ADDR_VAR 0 3
16741: PUSH
16742: LD_INT 0
16744: ST_TO_ADDR
// repeat p := p + 1 ;
16745: LD_ADDR_VAR 0 3
16749: PUSH
16750: LD_VAR 0 3
16754: PUSH
16755: LD_INT 1
16757: PLUS
16758: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16759: LD_INT 35
16761: PPUSH
16762: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
16766: LD_EXP 38
16770: PPUSH
16771: LD_INT 30
16773: PPUSH
16774: LD_INT 1
16776: PPUSH
16777: CALL_OW 307
16781: PUSH
16782: LD_INT 22
16784: PUSH
16785: LD_INT 2
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 101
16794: PUSH
16795: LD_INT 6
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PPUSH
16806: CALL_OW 69
16810: NOT
16811: OR
16812: PUSH
16813: LD_VAR 0 3
16817: PUSH
16818: LD_INT 10
16820: GREATER
16821: OR
16822: IFFALSE 16745
// RemoveUnit ( Ibrahim ) ;
16824: LD_EXP 38
16828: PPUSH
16829: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
16833: LD_INT 1
16835: PPUSH
16836: LD_STRING 03_IbrahimHasEscaped
16838: PPUSH
16839: CALL_OW 39
// end ; 3 :
16843: GO 16925
16845: LD_INT 3
16847: DOUBLE
16848: EQUAL
16849: IFTRUE 16853
16851: GO 16924
16853: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
16854: LD_EXP 28
16858: PPUSH
16859: LD_STRING DH-1-radio-hq
16861: PPUSH
16862: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
16866: LD_EXP 37
16870: PPUSH
16871: LD_STRING DO-1-radio-hq
16873: PPUSH
16874: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
16878: LD_EXP 28
16882: PPUSH
16883: LD_STRING DH-2-radio-hq
16885: PPUSH
16886: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
16890: LD_EXP 37
16894: PPUSH
16895: LD_STRING DO-2-radio-hq
16897: PPUSH
16898: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
16902: LD_EXP 28
16906: PPUSH
16907: LD_STRING DH-3-radio-hq
16909: PPUSH
16910: CALL_OW 88
// changeClass := 1 ;
16914: LD_ADDR_VAR 0 1
16918: PUSH
16919: LD_INT 1
16921: ST_TO_ADDR
// end ; end ;
16922: GO 16925
16924: POP
// if changeClass then
16925: LD_VAR 0 1
16929: IFFALSE 17217
// begin Say ( Heike , DH-1-agree ) ;
16931: LD_EXP 28
16935: PPUSH
16936: LD_STRING DH-1-agree
16938: PPUSH
16939: CALL_OW 88
// if IsOk ( Givi ) then
16943: LD_EXP 29
16947: PPUSH
16948: CALL_OW 302
16952: IFFALSE 16990
// begin Say ( Givi , DG-1-agree ) ;
16954: LD_EXP 29
16958: PPUSH
16959: LD_STRING DG-1-agree
16961: PPUSH
16962: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
16966: LD_EXP 28
16970: PPUSH
16971: LD_STRING DH-2-agree
16973: PPUSH
16974: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
16978: LD_EXP 29
16982: PPUSH
16983: LD_STRING DG-2-agree
16985: PPUSH
16986: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
16990: LD_VAR 0 4
16994: PPUSH
16995: CALL_OW 313
16999: PUSH
17000: LD_INT 6
17002: EQUAL
17003: IFFALSE 17023
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17005: LD_VAR 0 4
17009: PPUSH
17010: CALL_OW 313
17014: PUSH
17015: LD_INT 1
17017: ARRAY
17018: PPUSH
17019: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17023: LD_EXP 38
17027: PPUSH
17028: LD_INT 2
17030: PPUSH
17031: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17035: LD_ADDR_VAR 0 5
17039: PUSH
17040: LD_EXP 38
17044: PPUSH
17045: CALL_OW 250
17049: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17050: LD_ADDR_VAR 0 6
17054: PUSH
17055: LD_EXP 38
17059: PPUSH
17060: CALL_OW 251
17064: ST_TO_ADDR
// if depot then
17065: LD_VAR 0 4
17069: IFFALSE 17118
// begin ComEnterUnit ( Ibrahim , depot ) ;
17071: LD_EXP 38
17075: PPUSH
17076: LD_VAR 0 4
17080: PPUSH
17081: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17085: LD_INT 35
17087: PPUSH
17088: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17092: LD_EXP 38
17096: PPUSH
17097: CALL_OW 310
17101: IFFALSE 17085
// b := IsInUnit ( Ibrahim ) ;
17103: LD_ADDR_VAR 0 2
17107: PUSH
17108: LD_EXP 38
17112: PPUSH
17113: CALL_OW 310
17117: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17118: LD_EXP 38
17122: PPUSH
17123: CALL_OW 64
// uc_side := 2 ;
17127: LD_ADDR_OWVAR 20
17131: PUSH
17132: LD_INT 2
17134: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17135: LD_ADDR_EXP 38
17139: PUSH
17140: LD_STRING Ibrahim
17142: PPUSH
17143: LD_INT 0
17145: PPUSH
17146: LD_STRING 
17148: PPUSH
17149: CALL 33520 0 3
17153: ST_TO_ADDR
// if depot then
17154: LD_VAR 0 4
17158: IFFALSE 17176
// PlaceHumanInUnit ( Ibrahim , b ) else
17160: LD_EXP 38
17164: PPUSH
17165: LD_VAR 0 2
17169: PPUSH
17170: CALL_OW 52
17174: GO 17198
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17176: LD_EXP 38
17180: PPUSH
17181: LD_VAR 0 5
17185: PPUSH
17186: LD_VAR 0 6
17190: PPUSH
17191: LD_INT 0
17193: PPUSH
17194: CALL_OW 48
// InGameOff ;
17198: CALL_OW 9
// allowConvoys := true ;
17202: LD_ADDR_EXP 12
17206: PUSH
17207: LD_INT 1
17209: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17210: LD_STRING ACH_IBRAHIM
17212: PPUSH
17213: CALL_OW 543
// end ; end ;
17217: PPOPN 6
17219: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17220: LD_EXP 33
17224: PPUSH
17225: CALL_OW 256
17229: PUSH
17230: LD_INT 3
17232: LESS
17233: IFFALSE 17300
17235: GO 17237
17237: DISABLE
// begin DialogueOn ;
17238: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17242: LD_EXP 33
17246: PPUSH
17247: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17251: LD_EXP 33
17255: PPUSH
17256: LD_STRING DK-keydeath-1
17258: PPUSH
17259: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17263: LD_EXP 28
17267: PPUSH
17268: LD_STRING DH-keydeath-2
17270: PPUSH
17271: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17275: LD_EXP 28
17279: PPUSH
17280: LD_STRING DH-keydeath-3
17282: PPUSH
17283: CALL_OW 88
// DialogueOff ;
17287: CALL_OW 7
// KillUnit ( Kaia ) ;
17291: LD_EXP 33
17295: PPUSH
17296: CALL_OW 66
// end ;
17300: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 do
17301: LD_EXP 11
17305: PUSH
17306: LD_EXP 21
17310: PUSH
17311: LD_INT 1
17313: LESS
17314: AND
17315: PUSH
17316: LD_INT 22
17318: PUSH
17319: LD_INT 1
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 25
17328: PUSH
17329: LD_INT 1
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PPUSH
17340: CALL_OW 69
17344: PUSH
17345: LD_INT 0
17347: EQUAL
17348: AND
17349: IFFALSE 17740
17351: GO 17353
17353: DISABLE
// begin DialogueOn ;
17354: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17358: LD_EXP 28
17362: PPUSH
17363: LD_STRING DH-1-final
17365: PPUSH
17366: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17370: LD_OWVAR 1
17374: PUSH
17375: LD_INT 126000
17377: PUSH
17378: LD_INT 115500
17380: PUSH
17381: LD_INT 105000
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: LIST
17388: PUSH
17389: LD_OWVAR 67
17393: ARRAY
17394: LESSEQUAL
17395: IFFALSE 17409
// AddMedal ( med1 , 1 ) else
17397: LD_STRING med1
17399: PPUSH
17400: LD_INT 1
17402: PPUSH
17403: CALL_OW 101
17407: GO 17420
// AddMedal ( med1 , - 1 ) ;
17409: LD_STRING med1
17411: PPUSH
17412: LD_INT 1
17414: NEG
17415: PPUSH
17416: CALL_OW 101
// if vehCounter >= 2 then
17420: LD_EXP 22
17424: PUSH
17425: LD_INT 2
17427: GREATEREQUAL
17428: IFFALSE 17442
// AddMedal ( med2 , 1 ) else
17430: LD_STRING med2
17432: PPUSH
17433: LD_INT 1
17435: PPUSH
17436: CALL_OW 101
17440: GO 17453
// AddMedal ( med2 , - 1 ) ;
17442: LD_STRING med2
17444: PPUSH
17445: LD_INT 1
17447: NEG
17448: PPUSH
17449: CALL_OW 101
// if deadCounter = 0 then
17453: LD_EXP 9
17457: PUSH
17458: LD_INT 0
17460: EQUAL
17461: IFFALSE 17475
// AddMedal ( med3 , 1 ) else
17463: LD_STRING med3
17465: PPUSH
17466: LD_INT 1
17468: PPUSH
17469: CALL_OW 101
17473: GO 17486
// AddMedal ( med3 , - 1 ) ;
17475: LD_STRING med3
17477: PPUSH
17478: LD_INT 1
17480: NEG
17481: PPUSH
17482: CALL_OW 101
// GiveMedals ( MAIN ) ;
17486: LD_STRING MAIN
17488: PPUSH
17489: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17493: LD_INT 22
17495: PUSH
17496: LD_INT 2
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 23
17505: PUSH
17506: LD_INT 2
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 21
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: LIST
17527: PPUSH
17528: CALL_OW 69
17532: PPUSH
17533: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17537: LD_EXP 28
17541: PPUSH
17542: LD_STRING 03_Heike
17544: PPUSH
17545: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17549: LD_EXP 32
17553: PPUSH
17554: LD_STRING 03_Aviradze
17556: PPUSH
17557: CALL_OW 38
// if Givi then
17561: LD_EXP 29
17565: IFFALSE 17579
// SaveCharacters ( Givi , 03_Givi ) ;
17567: LD_EXP 29
17571: PPUSH
17572: LD_STRING 03_Givi
17574: PPUSH
17575: CALL_OW 38
// if Mike then
17579: LD_EXP 30
17583: IFFALSE 17597
// SaveCharacters ( Mike , 03_Mike ) ;
17585: LD_EXP 30
17589: PPUSH
17590: LD_STRING 03_Mike
17592: PPUSH
17593: CALL_OW 38
// if Kamil then
17597: LD_EXP 31
17601: IFFALSE 17615
// SaveCharacters ( Kamil , 03_Kamil ) ;
17603: LD_EXP 31
17607: PPUSH
17608: LD_STRING 03_Kamil
17610: PPUSH
17611: CALL_OW 38
// if Kaia then
17615: LD_EXP 33
17619: IFFALSE 17633
// SaveCharacters ( Kaia , 03_Kaia ) ;
17621: LD_EXP 33
17625: PPUSH
17626: LD_STRING 03_Kaia
17628: PPUSH
17629: CALL_OW 38
// if Sophia then
17633: LD_EXP 34
17637: IFFALSE 17651
// SaveCharacters ( Sophia , 03_Sophia ) ;
17639: LD_EXP 34
17643: PPUSH
17644: LD_STRING 03_Sophia
17646: PPUSH
17647: CALL_OW 38
// if Markov then
17651: LD_EXP 35
17655: IFFALSE 17669
// SaveCharacters ( Markov , 03_Markov ) ;
17657: LD_EXP 35
17661: PPUSH
17662: LD_STRING 03_Markov
17664: PPUSH
17665: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17669: LD_EXP 38
17673: PUSH
17674: LD_EXP 38
17678: PPUSH
17679: CALL_OW 255
17683: PUSH
17684: LD_INT 2
17686: EQUAL
17687: AND
17688: IFFALSE 17702
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
17690: LD_EXP 38
17694: PPUSH
17695: LD_STRING 03_Ibrahim
17697: PPUSH
17698: CALL_OW 38
// if heikeSecondSquad then
17702: LD_EXP 42
17706: IFFALSE 17720
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17708: LD_EXP 42
17712: PPUSH
17713: LD_STRING 03_others
17715: PPUSH
17716: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
17720: LD_EXP 9
17724: PPUSH
17725: LD_STRING 03_DeadCounter
17727: PPUSH
17728: CALL_OW 39
// YouWin ;
17732: CALL_OW 103
// DialogueOff ;
17736: CALL_OW 7
// end ; end_of_file
17740: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17741: LD_VAR 0 1
17745: PUSH
17746: LD_EXP 28
17750: EQUAL
17751: IFFALSE 17760
// YouLost ( Heike ) ;
17753: LD_STRING Heike
17755: PPUSH
17756: CALL_OW 104
// if un = Aviradze then
17760: LD_VAR 0 1
17764: PUSH
17765: LD_EXP 32
17769: EQUAL
17770: IFFALSE 17779
// YouLost ( Aviradze ) ;
17772: LD_STRING Aviradze
17774: PPUSH
17775: CALL_OW 104
// if un = usDepot and not retreatAllowed then
17779: LD_VAR 0 1
17783: PUSH
17784: LD_INT 11
17786: EQUAL
17787: PUSH
17788: LD_EXP 11
17792: NOT
17793: AND
17794: IFFALSE 17803
// YouLost ( Depot ) ;
17796: LD_STRING Depot
17798: PPUSH
17799: CALL_OW 104
// if un = arDepot then
17803: LD_VAR 0 1
17807: PUSH
17808: LD_INT 5
17810: EQUAL
17811: IFFALSE 17820
// YouLost ( FarmerDepot ) ;
17813: LD_STRING FarmerDepot
17815: PPUSH
17816: CALL_OW 104
// if un = Farmer then
17820: LD_VAR 0 1
17824: PUSH
17825: LD_EXP 36
17829: EQUAL
17830: IFFALSE 17839
// YouLost ( Farmer ) ;
17832: LD_STRING Farmer
17834: PPUSH
17835: CALL_OW 104
// if un in usForces then
17839: LD_VAR 0 1
17843: PUSH
17844: LD_EXP 44
17848: IN
17849: IFFALSE 17867
// usForces := usForces diff un ;
17851: LD_ADDR_EXP 44
17855: PUSH
17856: LD_EXP 44
17860: PUSH
17861: LD_VAR 0 1
17865: DIFF
17866: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17867: LD_VAR 0 1
17871: PUSH
17872: LD_INT 22
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 23
17884: PUSH
17885: LD_INT 2
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 21
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: LIST
17906: PPUSH
17907: CALL_OW 69
17911: IN
17912: IFFALSE 17928
// deadCounter := deadCounter + 1 ;
17914: LD_ADDR_EXP 9
17918: PUSH
17919: LD_EXP 9
17923: PUSH
17924: LD_INT 1
17926: PLUS
17927: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
17928: LD_VAR 0 1
17932: PUSH
17933: LD_INT 22
17935: PUSH
17936: LD_INT 4
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 34
17945: PUSH
17946: LD_INT 12
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PPUSH
17957: CALL_OW 69
17961: IN
17962: PUSH
17963: LD_EXP 18
17967: NOT
17968: AND
17969: IFFALSE 17979
// firstConvoyDestroyed := true ;
17971: LD_ADDR_EXP 18
17975: PUSH
17976: LD_INT 1
17978: ST_TO_ADDR
// if un in usAttackers then
17979: LD_VAR 0 1
17983: PUSH
17984: LD_EXP 47
17988: IN
17989: IFFALSE 18007
// usAttackers := usAttackers diff un ;
17991: LD_ADDR_EXP 47
17995: PUSH
17996: LD_EXP 47
18000: PUSH
18001: LD_VAR 0 1
18005: DIFF
18006: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18007: LD_VAR 0 1
18011: PUSH
18012: LD_INT 22
18014: PUSH
18015: LD_INT 5
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 21
18024: PUSH
18025: LD_INT 1
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PPUSH
18036: CALL_OW 69
18040: IN
18041: IFFALSE 18057
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18043: LD_ADDR_EXP 20
18047: PUSH
18048: LD_EXP 20
18052: PUSH
18053: LD_INT 1
18055: PLUS
18056: ST_TO_ADDR
// end ;
18057: PPOPN 1
18059: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18060: LD_VAR 0 2
18064: PUSH
18065: LD_EXP 38
18069: EQUAL
18070: PUSH
18071: LD_EXP 25
18075: AND
18076: IFFALSE 18222
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18078: LD_INT 22
18080: PUSH
18081: LD_INT 2
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 30
18090: PUSH
18091: LD_INT 0
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 50
18100: PUSH
18101: EMPTY
18102: LIST
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: IFFALSE 18155
// begin InGameOn ;
18115: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18119: LD_EXP 38
18123: PPUSH
18124: LD_INT 11
18126: PPUSH
18127: CALL_OW 120
// repeat wait ( 3 ) ;
18131: LD_INT 3
18133: PPUSH
18134: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18138: LD_EXP 38
18142: PPUSH
18143: CALL_OW 310
18147: IFFALSE 18131
// InGameOff ;
18149: CALL_OW 9
// end else
18153: GO 18222
// begin ibrahimInDepot := false ;
18155: LD_ADDR_EXP 25
18159: PUSH
18160: LD_INT 0
18162: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18163: LD_EXP 38
18167: PPUSH
18168: LD_INT 30
18170: PPUSH
18171: LD_INT 1
18173: PPUSH
18174: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18178: LD_INT 35
18180: PPUSH
18181: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18185: LD_EXP 38
18189: PPUSH
18190: LD_INT 30
18192: PPUSH
18193: LD_INT 1
18195: PPUSH
18196: CALL_OW 307
18200: PUSH
18201: LD_EXP 38
18205: PPUSH
18206: CALL_OW 301
18210: OR
18211: IFFALSE 18178
// RemoveUnit ( Ibrahim ) ;
18213: LD_EXP 38
18217: PPUSH
18218: CALL_OW 64
// end ; end ; end ;
18222: PPOPN 2
18224: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18225: LD_VAR 0 2
18229: PUSH
18230: LD_EXP 28
18234: EQUAL
18235: PUSH
18236: LD_VAR 0 1
18240: PUSH
18241: LD_INT 11
18243: EQUAL
18244: AND
18245: PUSH
18246: LD_EXP 25
18250: AND
18251: IFFALSE 18257
// IbrahimQuery ;
18253: CALL 16028 0 0
// end ;
18257: PPOPN 2
18259: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18260: LD_VAR 0 1
18264: PPUSH
18265: CALL_OW 141
// if oldId in usAttackers then
18269: LD_VAR 0 2
18273: PUSH
18274: LD_EXP 47
18278: IN
18279: IFFALSE 18297
// usAttackers := usAttackers diff oldId ;
18281: LD_ADDR_EXP 47
18285: PUSH
18286: LD_EXP 47
18290: PUSH
18291: LD_VAR 0 2
18295: DIFF
18296: ST_TO_ADDR
// if newId in usAttackers then
18297: LD_VAR 0 1
18301: PUSH
18302: LD_EXP 47
18306: IN
18307: IFFALSE 18325
// usAttackers := usAttackers diff newId ;
18309: LD_ADDR_EXP 47
18313: PUSH
18314: LD_EXP 47
18318: PUSH
18319: LD_VAR 0 1
18323: DIFF
18324: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18325: LD_VAR 0 3
18329: PUSH
18330: LD_INT 4
18332: EQUAL
18333: PUSH
18334: LD_EXP 18
18338: NOT
18339: AND
18340: IFFALSE 18350
// firstConvoyDestroyed := true ;
18342: LD_ADDR_EXP 18
18346: PUSH
18347: LD_INT 1
18349: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18350: LD_VAR 0 1
18354: PPUSH
18355: CALL_OW 264
18359: PUSH
18360: LD_INT 12
18362: EQUAL
18363: IFFALSE 18401
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18365: LD_ADDR_EXP 13
18369: PUSH
18370: LD_EXP 13
18374: PUSH
18375: LD_INT 1
18377: PLUS
18378: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18379: LD_VAR 0 1
18383: PPUSH
18384: LD_INT 1
18386: PPUSH
18387: CALL_OW 289
18391: PUSH
18392: LD_INT 0
18394: EQUAL
18395: IFFALSE 18401
// EmptyCargoDialog ;
18397: CALL 14666 0 0
// end ; end ;
18401: PPOPN 4
18403: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18404: LD_VAR 0 1
18408: PUSH
18409: LD_INT 2
18411: EQUAL
18412: PUSH
18413: LD_VAR 0 2
18417: PUSH
18418: LD_INT 5
18420: EQUAL
18421: AND
18422: IFFALSE 18431
// YouLost ( Attack ) ;
18424: LD_STRING Attack
18426: PPUSH
18427: CALL_OW 104
// end ;
18431: PPOPN 2
18433: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18434: LD_VAR 0 1
18438: PPUSH
18439: CALL_OW 255
18443: PUSH
18444: LD_INT 1
18446: EQUAL
18447: PUSH
18448: LD_EXP 6
18452: NOT
18453: AND
18454: IFFALSE 18588
// begin if GetBType ( b ) = b_lab then
18456: LD_VAR 0 1
18460: PPUSH
18461: CALL_OW 266
18465: PUSH
18466: LD_INT 6
18468: EQUAL
18469: IFFALSE 18509
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18471: LD_EXP 44
18475: PPUSH
18476: LD_INT 25
18478: PUSH
18479: LD_INT 4
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PPUSH
18486: CALL_OW 72
18490: PPUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 120
// AmLabResearch ( b ) ;
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL 5139 0 1
// end ; if GetBType ( b ) = b_armoury then
18509: LD_VAR 0 1
18513: PPUSH
18514: CALL_OW 266
18518: PUSH
18519: LD_INT 4
18521: EQUAL
18522: IFFALSE 18570
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18524: LD_EXP 44
18528: PPUSH
18529: LD_INT 25
18531: PUSH
18532: LD_INT 1
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 3
18541: PUSH
18542: LD_INT 54
18544: PUSH
18545: EMPTY
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PPUSH
18556: CALL_OW 72
18560: PPUSH
18561: LD_VAR 0 1
18565: PPUSH
18566: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18570: LD_ADDR_EXP 46
18574: PUSH
18575: LD_EXP 46
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: CALL_OW 3
18587: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18588: LD_VAR 0 1
18592: PPUSH
18593: CALL_OW 255
18597: PUSH
18598: LD_INT 5
18600: EQUAL
18601: IFFALSE 18615
// SetBLevel ( b , 5 ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: LD_INT 5
18610: PPUSH
18611: CALL_OW 241
// end ;
18615: PPOPN 1
18617: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18618: LD_VAR 0 1
18622: PPUSH
18623: CALL_OW 255
18627: PUSH
18628: LD_INT 2
18630: EQUAL
18631: IFFALSE 18647
// vehCounter := vehCounter + 1 ;
18633: LD_ADDR_EXP 22
18637: PUSH
18638: LD_EXP 22
18642: PUSH
18643: LD_INT 1
18645: PLUS
18646: ST_TO_ADDR
// end ;
18647: PPOPN 2
18649: END
// on SailEvent ( event ) do begin if event = eventAttack then
18650: LD_VAR 0 1
18654: PUSH
18655: LD_EXP 24
18659: EQUAL
18660: IFFALSE 18666
// AmericanAttack ;
18662: CALL 6587 0 0
// end ; end_of_file
18666: PPOPN 1
18668: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 ] [ Difficulty ] do
18669: LD_OWVAR 1
18673: PUSH
18674: LD_INT 10500
18676: PUSH
18677: LD_INT 9800
18679: PUSH
18680: LD_INT 9450
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: PUSH
18688: LD_OWVAR 67
18692: ARRAY
18693: LESSEQUAL
18694: IFFALSE 18721
18696: GO 18698
18698: DISABLE
// begin enable ;
18699: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18700: LD_INT 1
18702: PPUSH
18703: LD_INT 5
18705: PPUSH
18706: CALL_OW 12
18710: PPUSH
18711: LD_INT 9
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: CALL_OW 55
// end ;
18721: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 ] [ Difficulty ] do
18722: LD_EXP 6
18726: PUSH
18727: LD_OWVAR 1
18731: PUSH
18732: LD_INT 56700
18734: PUSH
18735: LD_INT 55650
18737: PUSH
18738: LD_INT 54600
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: PUSH
18746: LD_OWVAR 67
18750: ARRAY
18751: LESSEQUAL
18752: AND
18753: IFFALSE 18780
18755: GO 18757
18757: DISABLE
// begin enable ;
18758: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
18759: LD_INT 3
18761: PPUSH
18762: LD_INT 5
18764: PPUSH
18765: CALL_OW 12
18769: PPUSH
18770: LD_INT 9
18772: PPUSH
18773: LD_INT 1
18775: PPUSH
18776: CALL_OW 55
// end ; end_of_file
18780: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
18781: LD_EXP 11
18785: NOT
18786: PUSH
18787: LD_EXP 16
18791: AND
18792: PUSH
18793: LD_EXP 4
18797: AND
18798: PUSH
18799: LD_EXP 15
18803: PUSH
18804: LD_EXP 16
18808: LESSEQUAL
18809: AND
18810: IFFALSE 18900
18812: GO 18814
18814: DISABLE
// begin enable ;
18815: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
18816: LD_ADDR_OWVAR 47
18820: PUSH
18821: LD_STRING #X103-1
18823: PUSH
18824: LD_EXP 16
18828: PUSH
18829: LD_EXP 15
18833: MINUS
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
18839: LD_ADDR_EXP 15
18843: PUSH
18844: LD_INT 5
18846: PPUSH
18847: CALL_OW 274
18851: PPUSH
18852: LD_INT 1
18854: PPUSH
18855: CALL_OW 275
18859: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
18860: LD_INT 10
18862: PPUSH
18863: LD_INT 1
18865: PPUSH
18866: CALL_OW 287
18870: PUSH
18871: LD_INT 0
18873: EQUAL
18874: IFFALSE 18892
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
18876: LD_ADDR_EXP 17
18880: PUSH
18881: LD_EXP 17
18885: PUSH
18886: LD_INT 35
18888: MINUS
18889: ST_TO_ADDR
18890: GO 18900
// farmerCratesCounter := 30 30$00 ;
18892: LD_ADDR_EXP 17
18896: PUSH
18897: LD_INT 63000
18899: ST_TO_ADDR
// end ; end_of_file
18900: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
18901: LD_INT 0
18903: PPUSH
// ar_crane := 88 ;
18904: LD_ADDR_EXP 54
18908: PUSH
18909: LD_INT 88
18911: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18912: LD_ADDR_EXP 49
18916: PUSH
18917: LD_INT 89
18919: ST_TO_ADDR
// us_hack := 99 ;
18920: LD_ADDR_EXP 50
18924: PUSH
18925: LD_INT 99
18927: ST_TO_ADDR
// us_artillery := 97 ;
18928: LD_ADDR_EXP 51
18932: PUSH
18933: LD_INT 97
18935: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18936: LD_ADDR_EXP 52
18940: PUSH
18941: LD_INT 91
18943: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18944: LD_ADDR_EXP 53
18948: PUSH
18949: LD_INT 92
18951: ST_TO_ADDR
// ru_radar := 98 ;
18952: LD_ADDR_EXP 48
18956: PUSH
18957: LD_INT 98
18959: ST_TO_ADDR
// tech_Artillery := 80 ;
18960: LD_ADDR_EXP 55
18964: PUSH
18965: LD_INT 80
18967: ST_TO_ADDR
// tech_RadMat := 81 ;
18968: LD_ADDR_EXP 56
18972: PUSH
18973: LD_INT 81
18975: ST_TO_ADDR
// tech_BasicTools := 82 ;
18976: LD_ADDR_EXP 57
18980: PUSH
18981: LD_INT 82
18983: ST_TO_ADDR
// tech_Cargo := 83 ;
18984: LD_ADDR_EXP 58
18988: PUSH
18989: LD_INT 83
18991: ST_TO_ADDR
// tech_Track := 84 ;
18992: LD_ADDR_EXP 59
18996: PUSH
18997: LD_INT 84
18999: ST_TO_ADDR
// tech_Crane := 85 ;
19000: LD_ADDR_EXP 60
19004: PUSH
19005: LD_INT 85
19007: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19008: LD_ADDR_EXP 61
19012: PUSH
19013: LD_INT 86
19015: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19016: LD_ADDR_EXP 62
19020: PUSH
19021: LD_INT 87
19023: ST_TO_ADDR
// end ;
19024: LD_VAR 0 1
19028: RET
// every 1 do
19029: GO 19031
19031: DISABLE
// InitGlobalVariables ; end_of_file
19032: CALL 18901 0 0
19036: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ;
19037: LD_VAR 0 1
19041: PPUSH
19042: LD_VAR 0 2
19046: PPUSH
19047: LD_VAR 0 3
19051: PPUSH
19052: LD_VAR 0 4
19056: PPUSH
19057: LD_VAR 0 5
19061: PPUSH
19062: CALL 31841 0 5
// end ;
19066: PPOPN 5
19068: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19069: LD_VAR 0 2
19073: PUSH
19074: LD_INT 100
19076: EQUAL
19077: IFFALSE 20026
// begin if not StreamModeActive then
19079: LD_EXP 63
19083: NOT
19084: IFFALSE 19094
// StreamModeActive := true ;
19086: LD_ADDR_EXP 63
19090: PUSH
19091: LD_INT 1
19093: ST_TO_ADDR
// if p3 = 0 then
19094: LD_VAR 0 3
19098: PUSH
19099: LD_INT 0
19101: EQUAL
19102: IFFALSE 19108
// InitStreamMode ;
19104: CALL 20259 0 0
// if p3 = 1 then
19108: LD_VAR 0 3
19112: PUSH
19113: LD_INT 1
19115: EQUAL
19116: IFFALSE 19126
// sRocket := true ;
19118: LD_ADDR_EXP 68
19122: PUSH
19123: LD_INT 1
19125: ST_TO_ADDR
// if p3 = 2 then
19126: LD_VAR 0 3
19130: PUSH
19131: LD_INT 2
19133: EQUAL
19134: IFFALSE 19144
// sSpeed := true ;
19136: LD_ADDR_EXP 67
19140: PUSH
19141: LD_INT 1
19143: ST_TO_ADDR
// if p3 = 3 then
19144: LD_VAR 0 3
19148: PUSH
19149: LD_INT 3
19151: EQUAL
19152: IFFALSE 19162
// sEngine := true ;
19154: LD_ADDR_EXP 69
19158: PUSH
19159: LD_INT 1
19161: ST_TO_ADDR
// if p3 = 4 then
19162: LD_VAR 0 3
19166: PUSH
19167: LD_INT 4
19169: EQUAL
19170: IFFALSE 19180
// sSpec := true ;
19172: LD_ADDR_EXP 66
19176: PUSH
19177: LD_INT 1
19179: ST_TO_ADDR
// if p3 = 5 then
19180: LD_VAR 0 3
19184: PUSH
19185: LD_INT 5
19187: EQUAL
19188: IFFALSE 19198
// sLevel := true ;
19190: LD_ADDR_EXP 70
19194: PUSH
19195: LD_INT 1
19197: ST_TO_ADDR
// if p3 = 6 then
19198: LD_VAR 0 3
19202: PUSH
19203: LD_INT 6
19205: EQUAL
19206: IFFALSE 19216
// sArmoury := true ;
19208: LD_ADDR_EXP 71
19212: PUSH
19213: LD_INT 1
19215: ST_TO_ADDR
// if p3 = 7 then
19216: LD_VAR 0 3
19220: PUSH
19221: LD_INT 7
19223: EQUAL
19224: IFFALSE 19234
// sRadar := true ;
19226: LD_ADDR_EXP 72
19230: PUSH
19231: LD_INT 1
19233: ST_TO_ADDR
// if p3 = 8 then
19234: LD_VAR 0 3
19238: PUSH
19239: LD_INT 8
19241: EQUAL
19242: IFFALSE 19252
// sBunker := true ;
19244: LD_ADDR_EXP 73
19248: PUSH
19249: LD_INT 1
19251: ST_TO_ADDR
// if p3 = 9 then
19252: LD_VAR 0 3
19256: PUSH
19257: LD_INT 9
19259: EQUAL
19260: IFFALSE 19270
// sHack := true ;
19262: LD_ADDR_EXP 74
19266: PUSH
19267: LD_INT 1
19269: ST_TO_ADDR
// if p3 = 10 then
19270: LD_VAR 0 3
19274: PUSH
19275: LD_INT 10
19277: EQUAL
19278: IFFALSE 19288
// sFire := true ;
19280: LD_ADDR_EXP 75
19284: PUSH
19285: LD_INT 1
19287: ST_TO_ADDR
// if p3 = 11 then
19288: LD_VAR 0 3
19292: PUSH
19293: LD_INT 11
19295: EQUAL
19296: IFFALSE 19306
// sRefresh := true ;
19298: LD_ADDR_EXP 76
19302: PUSH
19303: LD_INT 1
19305: ST_TO_ADDR
// if p3 = 12 then
19306: LD_VAR 0 3
19310: PUSH
19311: LD_INT 12
19313: EQUAL
19314: IFFALSE 19324
// sExp := true ;
19316: LD_ADDR_EXP 77
19320: PUSH
19321: LD_INT 1
19323: ST_TO_ADDR
// if p3 = 13 then
19324: LD_VAR 0 3
19328: PUSH
19329: LD_INT 13
19331: EQUAL
19332: IFFALSE 19342
// sDepot := true ;
19334: LD_ADDR_EXP 78
19338: PUSH
19339: LD_INT 1
19341: ST_TO_ADDR
// if p3 = 14 then
19342: LD_VAR 0 3
19346: PUSH
19347: LD_INT 14
19349: EQUAL
19350: IFFALSE 19360
// sFlag := true ;
19352: LD_ADDR_EXP 79
19356: PUSH
19357: LD_INT 1
19359: ST_TO_ADDR
// if p3 = 15 then
19360: LD_VAR 0 3
19364: PUSH
19365: LD_INT 15
19367: EQUAL
19368: IFFALSE 19378
// sKamikadze := true ;
19370: LD_ADDR_EXP 87
19374: PUSH
19375: LD_INT 1
19377: ST_TO_ADDR
// if p3 = 16 then
19378: LD_VAR 0 3
19382: PUSH
19383: LD_INT 16
19385: EQUAL
19386: IFFALSE 19396
// sTroll := true ;
19388: LD_ADDR_EXP 88
19392: PUSH
19393: LD_INT 1
19395: ST_TO_ADDR
// if p3 = 17 then
19396: LD_VAR 0 3
19400: PUSH
19401: LD_INT 17
19403: EQUAL
19404: IFFALSE 19414
// sSlow := true ;
19406: LD_ADDR_EXP 89
19410: PUSH
19411: LD_INT 1
19413: ST_TO_ADDR
// if p3 = 18 then
19414: LD_VAR 0 3
19418: PUSH
19419: LD_INT 18
19421: EQUAL
19422: IFFALSE 19432
// sLack := true ;
19424: LD_ADDR_EXP 90
19428: PUSH
19429: LD_INT 1
19431: ST_TO_ADDR
// if p3 = 19 then
19432: LD_VAR 0 3
19436: PUSH
19437: LD_INT 19
19439: EQUAL
19440: IFFALSE 19450
// sTank := true ;
19442: LD_ADDR_EXP 92
19446: PUSH
19447: LD_INT 1
19449: ST_TO_ADDR
// if p3 = 20 then
19450: LD_VAR 0 3
19454: PUSH
19455: LD_INT 20
19457: EQUAL
19458: IFFALSE 19468
// sRemote := true ;
19460: LD_ADDR_EXP 93
19464: PUSH
19465: LD_INT 1
19467: ST_TO_ADDR
// if p3 = 21 then
19468: LD_VAR 0 3
19472: PUSH
19473: LD_INT 21
19475: EQUAL
19476: IFFALSE 19486
// sPowell := true ;
19478: LD_ADDR_EXP 94
19482: PUSH
19483: LD_INT 1
19485: ST_TO_ADDR
// if p3 = 22 then
19486: LD_VAR 0 3
19490: PUSH
19491: LD_INT 22
19493: EQUAL
19494: IFFALSE 19504
// sTeleport := true ;
19496: LD_ADDR_EXP 97
19500: PUSH
19501: LD_INT 1
19503: ST_TO_ADDR
// if p3 = 23 then
19504: LD_VAR 0 3
19508: PUSH
19509: LD_INT 23
19511: EQUAL
19512: IFFALSE 19522
// sOilTower := true ;
19514: LD_ADDR_EXP 99
19518: PUSH
19519: LD_INT 1
19521: ST_TO_ADDR
// if p3 = 24 then
19522: LD_VAR 0 3
19526: PUSH
19527: LD_INT 24
19529: EQUAL
19530: IFFALSE 19540
// sShovel := true ;
19532: LD_ADDR_EXP 100
19536: PUSH
19537: LD_INT 1
19539: ST_TO_ADDR
// if p3 = 25 then
19540: LD_VAR 0 3
19544: PUSH
19545: LD_INT 25
19547: EQUAL
19548: IFFALSE 19558
// sSheik := true ;
19550: LD_ADDR_EXP 101
19554: PUSH
19555: LD_INT 1
19557: ST_TO_ADDR
// if p3 = 26 then
19558: LD_VAR 0 3
19562: PUSH
19563: LD_INT 26
19565: EQUAL
19566: IFFALSE 19576
// sEarthquake := true ;
19568: LD_ADDR_EXP 103
19572: PUSH
19573: LD_INT 1
19575: ST_TO_ADDR
// if p3 = 27 then
19576: LD_VAR 0 3
19580: PUSH
19581: LD_INT 27
19583: EQUAL
19584: IFFALSE 19594
// sAI := true ;
19586: LD_ADDR_EXP 104
19590: PUSH
19591: LD_INT 1
19593: ST_TO_ADDR
// if p3 = 28 then
19594: LD_VAR 0 3
19598: PUSH
19599: LD_INT 28
19601: EQUAL
19602: IFFALSE 19612
// sCargo := true ;
19604: LD_ADDR_EXP 107
19608: PUSH
19609: LD_INT 1
19611: ST_TO_ADDR
// if p3 = 29 then
19612: LD_VAR 0 3
19616: PUSH
19617: LD_INT 29
19619: EQUAL
19620: IFFALSE 19630
// sDLaser := true ;
19622: LD_ADDR_EXP 108
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// if p3 = 30 then
19630: LD_VAR 0 3
19634: PUSH
19635: LD_INT 30
19637: EQUAL
19638: IFFALSE 19648
// sExchange := true ;
19640: LD_ADDR_EXP 109
19644: PUSH
19645: LD_INT 1
19647: ST_TO_ADDR
// if p3 = 31 then
19648: LD_VAR 0 3
19652: PUSH
19653: LD_INT 31
19655: EQUAL
19656: IFFALSE 19666
// sFac := true ;
19658: LD_ADDR_EXP 110
19662: PUSH
19663: LD_INT 1
19665: ST_TO_ADDR
// if p3 = 32 then
19666: LD_VAR 0 3
19670: PUSH
19671: LD_INT 32
19673: EQUAL
19674: IFFALSE 19684
// sPower := true ;
19676: LD_ADDR_EXP 111
19680: PUSH
19681: LD_INT 1
19683: ST_TO_ADDR
// if p3 = 33 then
19684: LD_VAR 0 3
19688: PUSH
19689: LD_INT 33
19691: EQUAL
19692: IFFALSE 19702
// sRandom := true ;
19694: LD_ADDR_EXP 112
19698: PUSH
19699: LD_INT 1
19701: ST_TO_ADDR
// if p3 = 34 then
19702: LD_VAR 0 3
19706: PUSH
19707: LD_INT 34
19709: EQUAL
19710: IFFALSE 19720
// sShield := true ;
19712: LD_ADDR_EXP 113
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// if p3 = 35 then
19720: LD_VAR 0 3
19724: PUSH
19725: LD_INT 35
19727: EQUAL
19728: IFFALSE 19738
// sTime := true ;
19730: LD_ADDR_EXP 114
19734: PUSH
19735: LD_INT 1
19737: ST_TO_ADDR
// if p3 = 36 then
19738: LD_VAR 0 3
19742: PUSH
19743: LD_INT 36
19745: EQUAL
19746: IFFALSE 19756
// sTools := true ;
19748: LD_ADDR_EXP 115
19752: PUSH
19753: LD_INT 1
19755: ST_TO_ADDR
// if p3 = 101 then
19756: LD_VAR 0 3
19760: PUSH
19761: LD_INT 101
19763: EQUAL
19764: IFFALSE 19774
// sSold := true ;
19766: LD_ADDR_EXP 80
19770: PUSH
19771: LD_INT 1
19773: ST_TO_ADDR
// if p3 = 102 then
19774: LD_VAR 0 3
19778: PUSH
19779: LD_INT 102
19781: EQUAL
19782: IFFALSE 19792
// sDiff := true ;
19784: LD_ADDR_EXP 81
19788: PUSH
19789: LD_INT 1
19791: ST_TO_ADDR
// if p3 = 103 then
19792: LD_VAR 0 3
19796: PUSH
19797: LD_INT 103
19799: EQUAL
19800: IFFALSE 19810
// sFog := true ;
19802: LD_ADDR_EXP 84
19806: PUSH
19807: LD_INT 1
19809: ST_TO_ADDR
// if p3 = 104 then
19810: LD_VAR 0 3
19814: PUSH
19815: LD_INT 104
19817: EQUAL
19818: IFFALSE 19828
// sReset := true ;
19820: LD_ADDR_EXP 85
19824: PUSH
19825: LD_INT 1
19827: ST_TO_ADDR
// if p3 = 105 then
19828: LD_VAR 0 3
19832: PUSH
19833: LD_INT 105
19835: EQUAL
19836: IFFALSE 19846
// sSun := true ;
19838: LD_ADDR_EXP 86
19842: PUSH
19843: LD_INT 1
19845: ST_TO_ADDR
// if p3 = 106 then
19846: LD_VAR 0 3
19850: PUSH
19851: LD_INT 106
19853: EQUAL
19854: IFFALSE 19864
// sTiger := true ;
19856: LD_ADDR_EXP 82
19860: PUSH
19861: LD_INT 1
19863: ST_TO_ADDR
// if p3 = 107 then
19864: LD_VAR 0 3
19868: PUSH
19869: LD_INT 107
19871: EQUAL
19872: IFFALSE 19882
// sBomb := true ;
19874: LD_ADDR_EXP 83
19878: PUSH
19879: LD_INT 1
19881: ST_TO_ADDR
// if p3 = 108 then
19882: LD_VAR 0 3
19886: PUSH
19887: LD_INT 108
19889: EQUAL
19890: IFFALSE 19900
// sWound := true ;
19892: LD_ADDR_EXP 91
19896: PUSH
19897: LD_INT 1
19899: ST_TO_ADDR
// if p3 = 109 then
19900: LD_VAR 0 3
19904: PUSH
19905: LD_INT 109
19907: EQUAL
19908: IFFALSE 19918
// sBetray := true ;
19910: LD_ADDR_EXP 95
19914: PUSH
19915: LD_INT 1
19917: ST_TO_ADDR
// if p3 = 110 then
19918: LD_VAR 0 3
19922: PUSH
19923: LD_INT 110
19925: EQUAL
19926: IFFALSE 19936
// sContamin := true ;
19928: LD_ADDR_EXP 96
19932: PUSH
19933: LD_INT 1
19935: ST_TO_ADDR
// if p3 = 111 then
19936: LD_VAR 0 3
19940: PUSH
19941: LD_INT 111
19943: EQUAL
19944: IFFALSE 19954
// sOil := true ;
19946: LD_ADDR_EXP 98
19950: PUSH
19951: LD_INT 1
19953: ST_TO_ADDR
// if p3 = 112 then
19954: LD_VAR 0 3
19958: PUSH
19959: LD_INT 112
19961: EQUAL
19962: IFFALSE 19972
// sStu := true ;
19964: LD_ADDR_EXP 102
19968: PUSH
19969: LD_INT 1
19971: ST_TO_ADDR
// if p3 = 113 then
19972: LD_VAR 0 3
19976: PUSH
19977: LD_INT 113
19979: EQUAL
19980: IFFALSE 19990
// sBazooka := true ;
19982: LD_ADDR_EXP 105
19986: PUSH
19987: LD_INT 1
19989: ST_TO_ADDR
// if p3 = 114 then
19990: LD_VAR 0 3
19994: PUSH
19995: LD_INT 114
19997: EQUAL
19998: IFFALSE 20008
// sMortar := true ;
20000: LD_ADDR_EXP 106
20004: PUSH
20005: LD_INT 1
20007: ST_TO_ADDR
// if p3 = 115 then
20008: LD_VAR 0 3
20012: PUSH
20013: LD_INT 115
20015: EQUAL
20016: IFFALSE 20026
// sRanger := true ;
20018: LD_ADDR_EXP 116
20022: PUSH
20023: LD_INT 1
20025: ST_TO_ADDR
// end ; if p2 = 101 then
20026: LD_VAR 0 2
20030: PUSH
20031: LD_INT 101
20033: EQUAL
20034: IFFALSE 20237
// begin case p3 of 1 :
20036: LD_VAR 0 3
20040: PUSH
20041: LD_INT 1
20043: DOUBLE
20044: EQUAL
20045: IFTRUE 20049
20047: GO 20056
20049: POP
// hHackUnlimitedResources ; 2 :
20050: CALL 30331 0 0
20054: GO 20237
20056: LD_INT 2
20058: DOUBLE
20059: EQUAL
20060: IFTRUE 20064
20062: GO 20071
20064: POP
// hHackSetLevel10 ; 3 :
20065: CALL 30464 0 0
20069: GO 20237
20071: LD_INT 3
20073: DOUBLE
20074: EQUAL
20075: IFTRUE 20079
20077: GO 20086
20079: POP
// hHackSetLevel10YourUnits ; 4 :
20080: CALL 30549 0 0
20084: GO 20237
20086: LD_INT 4
20088: DOUBLE
20089: EQUAL
20090: IFTRUE 20094
20092: GO 20116
20094: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
20095: LD_VAR 0 4
20099: PPUSH
20100: LD_VAR 0 5
20104: PPUSH
20105: LD_VAR 0 6
20109: PPUSH
20110: CALL 30639 0 3
20114: GO 20237
20116: LD_INT 5
20118: DOUBLE
20119: EQUAL
20120: IFTRUE 20124
20122: GO 20131
20124: POP
// hHackSpawnVehicle ; 6 :
20125: CALL 30700 0 0
20129: GO 20237
20131: LD_INT 6
20133: DOUBLE
20134: EQUAL
20135: IFTRUE 20139
20137: GO 20146
20139: POP
// hHackInvincible ; 7 :
20140: CALL 31246 0 0
20144: GO 20237
20146: LD_INT 7
20148: DOUBLE
20149: EQUAL
20150: IFTRUE 20154
20152: GO 20161
20154: POP
// hHackInvisible ; 8 :
20155: CALL 31357 0 0
20159: GO 20237
20161: LD_INT 8
20163: DOUBLE
20164: EQUAL
20165: IFTRUE 20169
20167: GO 20176
20169: POP
// hHackChangeYourSide ; 9 :
20170: CALL 31414 0 0
20174: GO 20237
20176: LD_INT 9
20178: DOUBLE
20179: EQUAL
20180: IFTRUE 20184
20182: GO 20191
20184: POP
// hHackChangeUnitSide ; 10 :
20185: CALL 31456 0 0
20189: GO 20237
20191: LD_INT 10
20193: DOUBLE
20194: EQUAL
20195: IFTRUE 20199
20197: GO 20206
20199: POP
// hHackFog ; 11 :
20200: CALL 31557 0 0
20204: GO 20237
20206: LD_INT 11
20208: DOUBLE
20209: EQUAL
20210: IFTRUE 20214
20212: GO 20221
20214: POP
// hHackApeman ; 12 :
20215: CALL 31572 0 0
20219: GO 20237
20221: LD_INT 12
20223: DOUBLE
20224: EQUAL
20225: IFTRUE 20229
20227: GO 20236
20229: POP
// hHackBoom ; end ;
20230: CALL 31657 0 0
20234: GO 20237
20236: POP
// end ; end ;
20237: PPOPN 6
20239: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20240: GO 20242
20242: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20243: LD_STRING initStreamRollete();
20245: PPUSH
20246: CALL_OW 559
// InitStreamMode ;
20250: CALL 20259 0 0
// DefineStreamItems ( ) ;
20254: CALL 20699 0 0
// end ;
20258: END
// function InitStreamMode ; begin
20259: LD_INT 0
20261: PPUSH
// streamModeActive := false ;
20262: LD_ADDR_EXP 63
20266: PUSH
20267: LD_INT 0
20269: ST_TO_ADDR
// normalCounter := 36 ;
20270: LD_ADDR_EXP 64
20274: PUSH
20275: LD_INT 36
20277: ST_TO_ADDR
// hardcoreCounter := 16 ;
20278: LD_ADDR_EXP 65
20282: PUSH
20283: LD_INT 16
20285: ST_TO_ADDR
// sRocket := false ;
20286: LD_ADDR_EXP 68
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// sSpeed := false ;
20294: LD_ADDR_EXP 67
20298: PUSH
20299: LD_INT 0
20301: ST_TO_ADDR
// sEngine := false ;
20302: LD_ADDR_EXP 69
20306: PUSH
20307: LD_INT 0
20309: ST_TO_ADDR
// sSpec := false ;
20310: LD_ADDR_EXP 66
20314: PUSH
20315: LD_INT 0
20317: ST_TO_ADDR
// sLevel := false ;
20318: LD_ADDR_EXP 70
20322: PUSH
20323: LD_INT 0
20325: ST_TO_ADDR
// sArmoury := false ;
20326: LD_ADDR_EXP 71
20330: PUSH
20331: LD_INT 0
20333: ST_TO_ADDR
// sRadar := false ;
20334: LD_ADDR_EXP 72
20338: PUSH
20339: LD_INT 0
20341: ST_TO_ADDR
// sBunker := false ;
20342: LD_ADDR_EXP 73
20346: PUSH
20347: LD_INT 0
20349: ST_TO_ADDR
// sHack := false ;
20350: LD_ADDR_EXP 74
20354: PUSH
20355: LD_INT 0
20357: ST_TO_ADDR
// sFire := false ;
20358: LD_ADDR_EXP 75
20362: PUSH
20363: LD_INT 0
20365: ST_TO_ADDR
// sRefresh := false ;
20366: LD_ADDR_EXP 76
20370: PUSH
20371: LD_INT 0
20373: ST_TO_ADDR
// sExp := false ;
20374: LD_ADDR_EXP 77
20378: PUSH
20379: LD_INT 0
20381: ST_TO_ADDR
// sDepot := false ;
20382: LD_ADDR_EXP 78
20386: PUSH
20387: LD_INT 0
20389: ST_TO_ADDR
// sFlag := false ;
20390: LD_ADDR_EXP 79
20394: PUSH
20395: LD_INT 0
20397: ST_TO_ADDR
// sKamikadze := false ;
20398: LD_ADDR_EXP 87
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// sTroll := false ;
20406: LD_ADDR_EXP 88
20410: PUSH
20411: LD_INT 0
20413: ST_TO_ADDR
// sSlow := false ;
20414: LD_ADDR_EXP 89
20418: PUSH
20419: LD_INT 0
20421: ST_TO_ADDR
// sLack := false ;
20422: LD_ADDR_EXP 90
20426: PUSH
20427: LD_INT 0
20429: ST_TO_ADDR
// sTank := false ;
20430: LD_ADDR_EXP 92
20434: PUSH
20435: LD_INT 0
20437: ST_TO_ADDR
// sRemote := false ;
20438: LD_ADDR_EXP 93
20442: PUSH
20443: LD_INT 0
20445: ST_TO_ADDR
// sPowell := false ;
20446: LD_ADDR_EXP 94
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// sTeleport := false ;
20454: LD_ADDR_EXP 97
20458: PUSH
20459: LD_INT 0
20461: ST_TO_ADDR
// sOilTower := false ;
20462: LD_ADDR_EXP 99
20466: PUSH
20467: LD_INT 0
20469: ST_TO_ADDR
// sShovel := false ;
20470: LD_ADDR_EXP 100
20474: PUSH
20475: LD_INT 0
20477: ST_TO_ADDR
// sSheik := false ;
20478: LD_ADDR_EXP 101
20482: PUSH
20483: LD_INT 0
20485: ST_TO_ADDR
// sEarthquake := false ;
20486: LD_ADDR_EXP 103
20490: PUSH
20491: LD_INT 0
20493: ST_TO_ADDR
// sAI := false ;
20494: LD_ADDR_EXP 104
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// sCargo := false ;
20502: LD_ADDR_EXP 107
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// sDLaser := false ;
20510: LD_ADDR_EXP 108
20514: PUSH
20515: LD_INT 0
20517: ST_TO_ADDR
// sExchange := false ;
20518: LD_ADDR_EXP 109
20522: PUSH
20523: LD_INT 0
20525: ST_TO_ADDR
// sFac := false ;
20526: LD_ADDR_EXP 110
20530: PUSH
20531: LD_INT 0
20533: ST_TO_ADDR
// sPower := false ;
20534: LD_ADDR_EXP 111
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// sRandom := false ;
20542: LD_ADDR_EXP 112
20546: PUSH
20547: LD_INT 0
20549: ST_TO_ADDR
// sShield := false ;
20550: LD_ADDR_EXP 113
20554: PUSH
20555: LD_INT 0
20557: ST_TO_ADDR
// sTime := false ;
20558: LD_ADDR_EXP 114
20562: PUSH
20563: LD_INT 0
20565: ST_TO_ADDR
// sTools := false ;
20566: LD_ADDR_EXP 115
20570: PUSH
20571: LD_INT 0
20573: ST_TO_ADDR
// sSold := false ;
20574: LD_ADDR_EXP 80
20578: PUSH
20579: LD_INT 0
20581: ST_TO_ADDR
// sDiff := false ;
20582: LD_ADDR_EXP 81
20586: PUSH
20587: LD_INT 0
20589: ST_TO_ADDR
// sFog := false ;
20590: LD_ADDR_EXP 84
20594: PUSH
20595: LD_INT 0
20597: ST_TO_ADDR
// sReset := false ;
20598: LD_ADDR_EXP 85
20602: PUSH
20603: LD_INT 0
20605: ST_TO_ADDR
// sSun := false ;
20606: LD_ADDR_EXP 86
20610: PUSH
20611: LD_INT 0
20613: ST_TO_ADDR
// sTiger := false ;
20614: LD_ADDR_EXP 82
20618: PUSH
20619: LD_INT 0
20621: ST_TO_ADDR
// sBomb := false ;
20622: LD_ADDR_EXP 83
20626: PUSH
20627: LD_INT 0
20629: ST_TO_ADDR
// sWound := false ;
20630: LD_ADDR_EXP 91
20634: PUSH
20635: LD_INT 0
20637: ST_TO_ADDR
// sBetray := false ;
20638: LD_ADDR_EXP 95
20642: PUSH
20643: LD_INT 0
20645: ST_TO_ADDR
// sContamin := false ;
20646: LD_ADDR_EXP 96
20650: PUSH
20651: LD_INT 0
20653: ST_TO_ADDR
// sOil := false ;
20654: LD_ADDR_EXP 98
20658: PUSH
20659: LD_INT 0
20661: ST_TO_ADDR
// sStu := false ;
20662: LD_ADDR_EXP 102
20666: PUSH
20667: LD_INT 0
20669: ST_TO_ADDR
// sBazooka := false ;
20670: LD_ADDR_EXP 105
20674: PUSH
20675: LD_INT 0
20677: ST_TO_ADDR
// sMortar := false ;
20678: LD_ADDR_EXP 106
20682: PUSH
20683: LD_INT 0
20685: ST_TO_ADDR
// sRanger := false ;
20686: LD_ADDR_EXP 116
20690: PUSH
20691: LD_INT 0
20693: ST_TO_ADDR
// end ;
20694: LD_VAR 0 1
20698: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20699: LD_INT 0
20701: PPUSH
20702: PPUSH
20703: PPUSH
20704: PPUSH
20705: PPUSH
// result := [ ] ;
20706: LD_ADDR_VAR 0 1
20710: PUSH
20711: EMPTY
20712: ST_TO_ADDR
// if campaign_id = 1 then
20713: LD_OWVAR 69
20717: PUSH
20718: LD_INT 1
20720: EQUAL
20721: IFFALSE 23659
// begin case mission_number of 1 :
20723: LD_OWVAR 70
20727: PUSH
20728: LD_INT 1
20730: DOUBLE
20731: EQUAL
20732: IFTRUE 20736
20734: GO 20800
20736: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20737: LD_ADDR_VAR 0 1
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: LD_INT 4
20747: PUSH
20748: LD_INT 11
20750: PUSH
20751: LD_INT 12
20753: PUSH
20754: LD_INT 15
20756: PUSH
20757: LD_INT 16
20759: PUSH
20760: LD_INT 22
20762: PUSH
20763: LD_INT 23
20765: PUSH
20766: LD_INT 26
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 101
20782: PUSH
20783: LD_INT 102
20785: PUSH
20786: LD_INT 106
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: ST_TO_ADDR
20798: GO 23657
20800: LD_INT 2
20802: DOUBLE
20803: EQUAL
20804: IFTRUE 20808
20806: GO 20880
20808: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20809: LD_ADDR_VAR 0 1
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: LD_INT 4
20819: PUSH
20820: LD_INT 11
20822: PUSH
20823: LD_INT 12
20825: PUSH
20826: LD_INT 15
20828: PUSH
20829: LD_INT 16
20831: PUSH
20832: LD_INT 22
20834: PUSH
20835: LD_INT 23
20837: PUSH
20838: LD_INT 26
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 101
20854: PUSH
20855: LD_INT 102
20857: PUSH
20858: LD_INT 105
20860: PUSH
20861: LD_INT 106
20863: PUSH
20864: LD_INT 108
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: ST_TO_ADDR
20878: GO 23657
20880: LD_INT 3
20882: DOUBLE
20883: EQUAL
20884: IFTRUE 20888
20886: GO 20964
20888: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20889: LD_ADDR_VAR 0 1
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: LD_INT 4
20899: PUSH
20900: LD_INT 5
20902: PUSH
20903: LD_INT 11
20905: PUSH
20906: LD_INT 12
20908: PUSH
20909: LD_INT 15
20911: PUSH
20912: LD_INT 16
20914: PUSH
20915: LD_INT 22
20917: PUSH
20918: LD_INT 26
20920: PUSH
20921: LD_INT 36
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 101
20938: PUSH
20939: LD_INT 102
20941: PUSH
20942: LD_INT 105
20944: PUSH
20945: LD_INT 106
20947: PUSH
20948: LD_INT 108
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: ST_TO_ADDR
20962: GO 23657
20964: LD_INT 4
20966: DOUBLE
20967: EQUAL
20968: IFTRUE 20972
20970: GO 21056
20972: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20973: LD_ADDR_VAR 0 1
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 4
20983: PUSH
20984: LD_INT 5
20986: PUSH
20987: LD_INT 8
20989: PUSH
20990: LD_INT 11
20992: PUSH
20993: LD_INT 12
20995: PUSH
20996: LD_INT 15
20998: PUSH
20999: LD_INT 16
21001: PUSH
21002: LD_INT 22
21004: PUSH
21005: LD_INT 23
21007: PUSH
21008: LD_INT 26
21010: PUSH
21011: LD_INT 36
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 101
21030: PUSH
21031: LD_INT 102
21033: PUSH
21034: LD_INT 105
21036: PUSH
21037: LD_INT 106
21039: PUSH
21040: LD_INT 108
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: ST_TO_ADDR
21054: GO 23657
21056: LD_INT 5
21058: DOUBLE
21059: EQUAL
21060: IFTRUE 21064
21062: GO 21164
21064: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21065: LD_ADDR_VAR 0 1
21069: PUSH
21070: LD_INT 2
21072: PUSH
21073: LD_INT 4
21075: PUSH
21076: LD_INT 5
21078: PUSH
21079: LD_INT 6
21081: PUSH
21082: LD_INT 8
21084: PUSH
21085: LD_INT 11
21087: PUSH
21088: LD_INT 12
21090: PUSH
21091: LD_INT 15
21093: PUSH
21094: LD_INT 16
21096: PUSH
21097: LD_INT 22
21099: PUSH
21100: LD_INT 23
21102: PUSH
21103: LD_INT 25
21105: PUSH
21106: LD_INT 26
21108: PUSH
21109: LD_INT 36
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 101
21130: PUSH
21131: LD_INT 102
21133: PUSH
21134: LD_INT 105
21136: PUSH
21137: LD_INT 106
21139: PUSH
21140: LD_INT 108
21142: PUSH
21143: LD_INT 109
21145: PUSH
21146: LD_INT 112
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: ST_TO_ADDR
21162: GO 23657
21164: LD_INT 6
21166: DOUBLE
21167: EQUAL
21168: IFTRUE 21172
21170: GO 21292
21172: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21173: LD_ADDR_VAR 0 1
21177: PUSH
21178: LD_INT 2
21180: PUSH
21181: LD_INT 4
21183: PUSH
21184: LD_INT 5
21186: PUSH
21187: LD_INT 6
21189: PUSH
21190: LD_INT 8
21192: PUSH
21193: LD_INT 11
21195: PUSH
21196: LD_INT 12
21198: PUSH
21199: LD_INT 15
21201: PUSH
21202: LD_INT 16
21204: PUSH
21205: LD_INT 20
21207: PUSH
21208: LD_INT 21
21210: PUSH
21211: LD_INT 22
21213: PUSH
21214: LD_INT 23
21216: PUSH
21217: LD_INT 25
21219: PUSH
21220: LD_INT 26
21222: PUSH
21223: LD_INT 30
21225: PUSH
21226: LD_INT 31
21228: PUSH
21229: LD_INT 32
21231: PUSH
21232: LD_INT 36
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 101
21258: PUSH
21259: LD_INT 102
21261: PUSH
21262: LD_INT 105
21264: PUSH
21265: LD_INT 106
21267: PUSH
21268: LD_INT 108
21270: PUSH
21271: LD_INT 109
21273: PUSH
21274: LD_INT 112
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: ST_TO_ADDR
21290: GO 23657
21292: LD_INT 7
21294: DOUBLE
21295: EQUAL
21296: IFTRUE 21300
21298: GO 21400
21300: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21301: LD_ADDR_VAR 0 1
21305: PUSH
21306: LD_INT 2
21308: PUSH
21309: LD_INT 4
21311: PUSH
21312: LD_INT 5
21314: PUSH
21315: LD_INT 7
21317: PUSH
21318: LD_INT 11
21320: PUSH
21321: LD_INT 12
21323: PUSH
21324: LD_INT 15
21326: PUSH
21327: LD_INT 16
21329: PUSH
21330: LD_INT 20
21332: PUSH
21333: LD_INT 21
21335: PUSH
21336: LD_INT 22
21338: PUSH
21339: LD_INT 23
21341: PUSH
21342: LD_INT 25
21344: PUSH
21345: LD_INT 26
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 101
21366: PUSH
21367: LD_INT 102
21369: PUSH
21370: LD_INT 103
21372: PUSH
21373: LD_INT 105
21375: PUSH
21376: LD_INT 106
21378: PUSH
21379: LD_INT 108
21381: PUSH
21382: LD_INT 112
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: ST_TO_ADDR
21398: GO 23657
21400: LD_INT 8
21402: DOUBLE
21403: EQUAL
21404: IFTRUE 21408
21406: GO 21536
21408: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21409: LD_ADDR_VAR 0 1
21413: PUSH
21414: LD_INT 2
21416: PUSH
21417: LD_INT 4
21419: PUSH
21420: LD_INT 5
21422: PUSH
21423: LD_INT 6
21425: PUSH
21426: LD_INT 7
21428: PUSH
21429: LD_INT 8
21431: PUSH
21432: LD_INT 11
21434: PUSH
21435: LD_INT 12
21437: PUSH
21438: LD_INT 15
21440: PUSH
21441: LD_INT 16
21443: PUSH
21444: LD_INT 20
21446: PUSH
21447: LD_INT 21
21449: PUSH
21450: LD_INT 22
21452: PUSH
21453: LD_INT 23
21455: PUSH
21456: LD_INT 25
21458: PUSH
21459: LD_INT 26
21461: PUSH
21462: LD_INT 30
21464: PUSH
21465: LD_INT 31
21467: PUSH
21468: LD_INT 32
21470: PUSH
21471: LD_INT 36
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 101
21498: PUSH
21499: LD_INT 102
21501: PUSH
21502: LD_INT 103
21504: PUSH
21505: LD_INT 105
21507: PUSH
21508: LD_INT 106
21510: PUSH
21511: LD_INT 108
21513: PUSH
21514: LD_INT 109
21516: PUSH
21517: LD_INT 112
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: ST_TO_ADDR
21534: GO 23657
21536: LD_INT 9
21538: DOUBLE
21539: EQUAL
21540: IFTRUE 21544
21542: GO 21680
21544: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21545: LD_ADDR_VAR 0 1
21549: PUSH
21550: LD_INT 2
21552: PUSH
21553: LD_INT 4
21555: PUSH
21556: LD_INT 5
21558: PUSH
21559: LD_INT 6
21561: PUSH
21562: LD_INT 7
21564: PUSH
21565: LD_INT 8
21567: PUSH
21568: LD_INT 11
21570: PUSH
21571: LD_INT 12
21573: PUSH
21574: LD_INT 15
21576: PUSH
21577: LD_INT 16
21579: PUSH
21580: LD_INT 20
21582: PUSH
21583: LD_INT 21
21585: PUSH
21586: LD_INT 22
21588: PUSH
21589: LD_INT 23
21591: PUSH
21592: LD_INT 25
21594: PUSH
21595: LD_INT 26
21597: PUSH
21598: LD_INT 28
21600: PUSH
21601: LD_INT 30
21603: PUSH
21604: LD_INT 31
21606: PUSH
21607: LD_INT 32
21609: PUSH
21610: LD_INT 36
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 101
21638: PUSH
21639: LD_INT 102
21641: PUSH
21642: LD_INT 103
21644: PUSH
21645: LD_INT 105
21647: PUSH
21648: LD_INT 106
21650: PUSH
21651: LD_INT 108
21653: PUSH
21654: LD_INT 109
21656: PUSH
21657: LD_INT 112
21659: PUSH
21660: LD_INT 114
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: ST_TO_ADDR
21678: GO 23657
21680: LD_INT 10
21682: DOUBLE
21683: EQUAL
21684: IFTRUE 21688
21686: GO 21872
21688: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21689: LD_ADDR_VAR 0 1
21693: PUSH
21694: LD_INT 2
21696: PUSH
21697: LD_INT 4
21699: PUSH
21700: LD_INT 5
21702: PUSH
21703: LD_INT 6
21705: PUSH
21706: LD_INT 7
21708: PUSH
21709: LD_INT 8
21711: PUSH
21712: LD_INT 9
21714: PUSH
21715: LD_INT 10
21717: PUSH
21718: LD_INT 11
21720: PUSH
21721: LD_INT 12
21723: PUSH
21724: LD_INT 13
21726: PUSH
21727: LD_INT 14
21729: PUSH
21730: LD_INT 15
21732: PUSH
21733: LD_INT 16
21735: PUSH
21736: LD_INT 17
21738: PUSH
21739: LD_INT 18
21741: PUSH
21742: LD_INT 19
21744: PUSH
21745: LD_INT 20
21747: PUSH
21748: LD_INT 21
21750: PUSH
21751: LD_INT 22
21753: PUSH
21754: LD_INT 23
21756: PUSH
21757: LD_INT 24
21759: PUSH
21760: LD_INT 25
21762: PUSH
21763: LD_INT 26
21765: PUSH
21766: LD_INT 28
21768: PUSH
21769: LD_INT 30
21771: PUSH
21772: LD_INT 31
21774: PUSH
21775: LD_INT 32
21777: PUSH
21778: LD_INT 36
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 101
21814: PUSH
21815: LD_INT 102
21817: PUSH
21818: LD_INT 103
21820: PUSH
21821: LD_INT 104
21823: PUSH
21824: LD_INT 105
21826: PUSH
21827: LD_INT 106
21829: PUSH
21830: LD_INT 107
21832: PUSH
21833: LD_INT 108
21835: PUSH
21836: LD_INT 109
21838: PUSH
21839: LD_INT 110
21841: PUSH
21842: LD_INT 111
21844: PUSH
21845: LD_INT 112
21847: PUSH
21848: LD_INT 114
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: ST_TO_ADDR
21870: GO 23657
21872: LD_INT 11
21874: DOUBLE
21875: EQUAL
21876: IFTRUE 21880
21878: GO 22072
21880: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21881: LD_ADDR_VAR 0 1
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: LD_INT 3
21891: PUSH
21892: LD_INT 4
21894: PUSH
21895: LD_INT 5
21897: PUSH
21898: LD_INT 6
21900: PUSH
21901: LD_INT 7
21903: PUSH
21904: LD_INT 8
21906: PUSH
21907: LD_INT 9
21909: PUSH
21910: LD_INT 10
21912: PUSH
21913: LD_INT 11
21915: PUSH
21916: LD_INT 12
21918: PUSH
21919: LD_INT 13
21921: PUSH
21922: LD_INT 14
21924: PUSH
21925: LD_INT 15
21927: PUSH
21928: LD_INT 16
21930: PUSH
21931: LD_INT 17
21933: PUSH
21934: LD_INT 18
21936: PUSH
21937: LD_INT 19
21939: PUSH
21940: LD_INT 20
21942: PUSH
21943: LD_INT 21
21945: PUSH
21946: LD_INT 22
21948: PUSH
21949: LD_INT 23
21951: PUSH
21952: LD_INT 24
21954: PUSH
21955: LD_INT 25
21957: PUSH
21958: LD_INT 26
21960: PUSH
21961: LD_INT 28
21963: PUSH
21964: LD_INT 30
21966: PUSH
21967: LD_INT 31
21969: PUSH
21970: LD_INT 32
21972: PUSH
21973: LD_INT 34
21975: PUSH
21976: LD_INT 36
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 101
22014: PUSH
22015: LD_INT 102
22017: PUSH
22018: LD_INT 103
22020: PUSH
22021: LD_INT 104
22023: PUSH
22024: LD_INT 105
22026: PUSH
22027: LD_INT 106
22029: PUSH
22030: LD_INT 107
22032: PUSH
22033: LD_INT 108
22035: PUSH
22036: LD_INT 109
22038: PUSH
22039: LD_INT 110
22041: PUSH
22042: LD_INT 111
22044: PUSH
22045: LD_INT 112
22047: PUSH
22048: LD_INT 114
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: ST_TO_ADDR
22070: GO 23657
22072: LD_INT 12
22074: DOUBLE
22075: EQUAL
22076: IFTRUE 22080
22078: GO 22288
22080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22081: LD_ADDR_VAR 0 1
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: LD_INT 2
22091: PUSH
22092: LD_INT 3
22094: PUSH
22095: LD_INT 4
22097: PUSH
22098: LD_INT 5
22100: PUSH
22101: LD_INT 6
22103: PUSH
22104: LD_INT 7
22106: PUSH
22107: LD_INT 8
22109: PUSH
22110: LD_INT 9
22112: PUSH
22113: LD_INT 10
22115: PUSH
22116: LD_INT 11
22118: PUSH
22119: LD_INT 12
22121: PUSH
22122: LD_INT 13
22124: PUSH
22125: LD_INT 14
22127: PUSH
22128: LD_INT 15
22130: PUSH
22131: LD_INT 16
22133: PUSH
22134: LD_INT 17
22136: PUSH
22137: LD_INT 18
22139: PUSH
22140: LD_INT 19
22142: PUSH
22143: LD_INT 20
22145: PUSH
22146: LD_INT 21
22148: PUSH
22149: LD_INT 22
22151: PUSH
22152: LD_INT 23
22154: PUSH
22155: LD_INT 24
22157: PUSH
22158: LD_INT 25
22160: PUSH
22161: LD_INT 26
22163: PUSH
22164: LD_INT 27
22166: PUSH
22167: LD_INT 28
22169: PUSH
22170: LD_INT 30
22172: PUSH
22173: LD_INT 31
22175: PUSH
22176: LD_INT 32
22178: PUSH
22179: LD_INT 33
22181: PUSH
22182: LD_INT 34
22184: PUSH
22185: LD_INT 36
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 101
22226: PUSH
22227: LD_INT 102
22229: PUSH
22230: LD_INT 103
22232: PUSH
22233: LD_INT 104
22235: PUSH
22236: LD_INT 105
22238: PUSH
22239: LD_INT 106
22241: PUSH
22242: LD_INT 107
22244: PUSH
22245: LD_INT 108
22247: PUSH
22248: LD_INT 109
22250: PUSH
22251: LD_INT 110
22253: PUSH
22254: LD_INT 111
22256: PUSH
22257: LD_INT 112
22259: PUSH
22260: LD_INT 113
22262: PUSH
22263: LD_INT 114
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: ST_TO_ADDR
22286: GO 23657
22288: LD_INT 13
22290: DOUBLE
22291: EQUAL
22292: IFTRUE 22296
22294: GO 22492
22296: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22297: LD_ADDR_VAR 0 1
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: LD_INT 3
22310: PUSH
22311: LD_INT 4
22313: PUSH
22314: LD_INT 5
22316: PUSH
22317: LD_INT 8
22319: PUSH
22320: LD_INT 9
22322: PUSH
22323: LD_INT 10
22325: PUSH
22326: LD_INT 11
22328: PUSH
22329: LD_INT 12
22331: PUSH
22332: LD_INT 14
22334: PUSH
22335: LD_INT 15
22337: PUSH
22338: LD_INT 16
22340: PUSH
22341: LD_INT 17
22343: PUSH
22344: LD_INT 18
22346: PUSH
22347: LD_INT 19
22349: PUSH
22350: LD_INT 20
22352: PUSH
22353: LD_INT 21
22355: PUSH
22356: LD_INT 22
22358: PUSH
22359: LD_INT 23
22361: PUSH
22362: LD_INT 24
22364: PUSH
22365: LD_INT 25
22367: PUSH
22368: LD_INT 26
22370: PUSH
22371: LD_INT 27
22373: PUSH
22374: LD_INT 28
22376: PUSH
22377: LD_INT 30
22379: PUSH
22380: LD_INT 31
22382: PUSH
22383: LD_INT 32
22385: PUSH
22386: LD_INT 33
22388: PUSH
22389: LD_INT 34
22391: PUSH
22392: LD_INT 36
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 101
22430: PUSH
22431: LD_INT 102
22433: PUSH
22434: LD_INT 103
22436: PUSH
22437: LD_INT 104
22439: PUSH
22440: LD_INT 105
22442: PUSH
22443: LD_INT 106
22445: PUSH
22446: LD_INT 107
22448: PUSH
22449: LD_INT 108
22451: PUSH
22452: LD_INT 109
22454: PUSH
22455: LD_INT 110
22457: PUSH
22458: LD_INT 111
22460: PUSH
22461: LD_INT 112
22463: PUSH
22464: LD_INT 113
22466: PUSH
22467: LD_INT 114
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: ST_TO_ADDR
22490: GO 23657
22492: LD_INT 14
22494: DOUBLE
22495: EQUAL
22496: IFTRUE 22500
22498: GO 22712
22500: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22501: LD_ADDR_VAR 0 1
22505: PUSH
22506: LD_INT 1
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: LD_INT 3
22514: PUSH
22515: LD_INT 4
22517: PUSH
22518: LD_INT 5
22520: PUSH
22521: LD_INT 6
22523: PUSH
22524: LD_INT 7
22526: PUSH
22527: LD_INT 8
22529: PUSH
22530: LD_INT 9
22532: PUSH
22533: LD_INT 10
22535: PUSH
22536: LD_INT 11
22538: PUSH
22539: LD_INT 12
22541: PUSH
22542: LD_INT 13
22544: PUSH
22545: LD_INT 14
22547: PUSH
22548: LD_INT 15
22550: PUSH
22551: LD_INT 16
22553: PUSH
22554: LD_INT 17
22556: PUSH
22557: LD_INT 18
22559: PUSH
22560: LD_INT 19
22562: PUSH
22563: LD_INT 20
22565: PUSH
22566: LD_INT 21
22568: PUSH
22569: LD_INT 22
22571: PUSH
22572: LD_INT 23
22574: PUSH
22575: LD_INT 24
22577: PUSH
22578: LD_INT 25
22580: PUSH
22581: LD_INT 26
22583: PUSH
22584: LD_INT 27
22586: PUSH
22587: LD_INT 28
22589: PUSH
22590: LD_INT 29
22592: PUSH
22593: LD_INT 30
22595: PUSH
22596: LD_INT 31
22598: PUSH
22599: LD_INT 32
22601: PUSH
22602: LD_INT 33
22604: PUSH
22605: LD_INT 34
22607: PUSH
22608: LD_INT 36
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 101
22650: PUSH
22651: LD_INT 102
22653: PUSH
22654: LD_INT 103
22656: PUSH
22657: LD_INT 104
22659: PUSH
22660: LD_INT 105
22662: PUSH
22663: LD_INT 106
22665: PUSH
22666: LD_INT 107
22668: PUSH
22669: LD_INT 108
22671: PUSH
22672: LD_INT 109
22674: PUSH
22675: LD_INT 110
22677: PUSH
22678: LD_INT 111
22680: PUSH
22681: LD_INT 112
22683: PUSH
22684: LD_INT 113
22686: PUSH
22687: LD_INT 114
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: ST_TO_ADDR
22710: GO 23657
22712: LD_INT 15
22714: DOUBLE
22715: EQUAL
22716: IFTRUE 22720
22718: GO 22932
22720: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22721: LD_ADDR_VAR 0 1
22725: PUSH
22726: LD_INT 1
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: LD_INT 3
22734: PUSH
22735: LD_INT 4
22737: PUSH
22738: LD_INT 5
22740: PUSH
22741: LD_INT 6
22743: PUSH
22744: LD_INT 7
22746: PUSH
22747: LD_INT 8
22749: PUSH
22750: LD_INT 9
22752: PUSH
22753: LD_INT 10
22755: PUSH
22756: LD_INT 11
22758: PUSH
22759: LD_INT 12
22761: PUSH
22762: LD_INT 13
22764: PUSH
22765: LD_INT 14
22767: PUSH
22768: LD_INT 15
22770: PUSH
22771: LD_INT 16
22773: PUSH
22774: LD_INT 17
22776: PUSH
22777: LD_INT 18
22779: PUSH
22780: LD_INT 19
22782: PUSH
22783: LD_INT 20
22785: PUSH
22786: LD_INT 21
22788: PUSH
22789: LD_INT 22
22791: PUSH
22792: LD_INT 23
22794: PUSH
22795: LD_INT 24
22797: PUSH
22798: LD_INT 25
22800: PUSH
22801: LD_INT 26
22803: PUSH
22804: LD_INT 27
22806: PUSH
22807: LD_INT 28
22809: PUSH
22810: LD_INT 29
22812: PUSH
22813: LD_INT 30
22815: PUSH
22816: LD_INT 31
22818: PUSH
22819: LD_INT 32
22821: PUSH
22822: LD_INT 33
22824: PUSH
22825: LD_INT 34
22827: PUSH
22828: LD_INT 36
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 101
22870: PUSH
22871: LD_INT 102
22873: PUSH
22874: LD_INT 103
22876: PUSH
22877: LD_INT 104
22879: PUSH
22880: LD_INT 105
22882: PUSH
22883: LD_INT 106
22885: PUSH
22886: LD_INT 107
22888: PUSH
22889: LD_INT 108
22891: PUSH
22892: LD_INT 109
22894: PUSH
22895: LD_INT 110
22897: PUSH
22898: LD_INT 111
22900: PUSH
22901: LD_INT 112
22903: PUSH
22904: LD_INT 113
22906: PUSH
22907: LD_INT 114
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: ST_TO_ADDR
22930: GO 23657
22932: LD_INT 16
22934: DOUBLE
22935: EQUAL
22936: IFTRUE 22940
22938: GO 23064
22940: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22941: LD_ADDR_VAR 0 1
22945: PUSH
22946: LD_INT 2
22948: PUSH
22949: LD_INT 4
22951: PUSH
22952: LD_INT 5
22954: PUSH
22955: LD_INT 7
22957: PUSH
22958: LD_INT 11
22960: PUSH
22961: LD_INT 12
22963: PUSH
22964: LD_INT 15
22966: PUSH
22967: LD_INT 16
22969: PUSH
22970: LD_INT 20
22972: PUSH
22973: LD_INT 21
22975: PUSH
22976: LD_INT 22
22978: PUSH
22979: LD_INT 23
22981: PUSH
22982: LD_INT 25
22984: PUSH
22985: LD_INT 26
22987: PUSH
22988: LD_INT 30
22990: PUSH
22991: LD_INT 31
22993: PUSH
22994: LD_INT 32
22996: PUSH
22997: LD_INT 33
22999: PUSH
23000: LD_INT 34
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 101
23026: PUSH
23027: LD_INT 102
23029: PUSH
23030: LD_INT 103
23032: PUSH
23033: LD_INT 106
23035: PUSH
23036: LD_INT 108
23038: PUSH
23039: LD_INT 112
23041: PUSH
23042: LD_INT 113
23044: PUSH
23045: LD_INT 114
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: ST_TO_ADDR
23062: GO 23657
23064: LD_INT 17
23066: DOUBLE
23067: EQUAL
23068: IFTRUE 23072
23070: GO 23284
23072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23073: LD_ADDR_VAR 0 1
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: LD_INT 2
23083: PUSH
23084: LD_INT 3
23086: PUSH
23087: LD_INT 4
23089: PUSH
23090: LD_INT 5
23092: PUSH
23093: LD_INT 6
23095: PUSH
23096: LD_INT 7
23098: PUSH
23099: LD_INT 8
23101: PUSH
23102: LD_INT 9
23104: PUSH
23105: LD_INT 10
23107: PUSH
23108: LD_INT 11
23110: PUSH
23111: LD_INT 12
23113: PUSH
23114: LD_INT 13
23116: PUSH
23117: LD_INT 14
23119: PUSH
23120: LD_INT 15
23122: PUSH
23123: LD_INT 16
23125: PUSH
23126: LD_INT 17
23128: PUSH
23129: LD_INT 18
23131: PUSH
23132: LD_INT 19
23134: PUSH
23135: LD_INT 20
23137: PUSH
23138: LD_INT 21
23140: PUSH
23141: LD_INT 22
23143: PUSH
23144: LD_INT 23
23146: PUSH
23147: LD_INT 24
23149: PUSH
23150: LD_INT 25
23152: PUSH
23153: LD_INT 26
23155: PUSH
23156: LD_INT 27
23158: PUSH
23159: LD_INT 28
23161: PUSH
23162: LD_INT 29
23164: PUSH
23165: LD_INT 30
23167: PUSH
23168: LD_INT 31
23170: PUSH
23171: LD_INT 32
23173: PUSH
23174: LD_INT 33
23176: PUSH
23177: LD_INT 34
23179: PUSH
23180: LD_INT 36
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 101
23222: PUSH
23223: LD_INT 102
23225: PUSH
23226: LD_INT 103
23228: PUSH
23229: LD_INT 104
23231: PUSH
23232: LD_INT 105
23234: PUSH
23235: LD_INT 106
23237: PUSH
23238: LD_INT 107
23240: PUSH
23241: LD_INT 108
23243: PUSH
23244: LD_INT 109
23246: PUSH
23247: LD_INT 110
23249: PUSH
23250: LD_INT 111
23252: PUSH
23253: LD_INT 112
23255: PUSH
23256: LD_INT 113
23258: PUSH
23259: LD_INT 114
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: ST_TO_ADDR
23282: GO 23657
23284: LD_INT 18
23286: DOUBLE
23287: EQUAL
23288: IFTRUE 23292
23290: GO 23428
23292: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23293: LD_ADDR_VAR 0 1
23297: PUSH
23298: LD_INT 2
23300: PUSH
23301: LD_INT 4
23303: PUSH
23304: LD_INT 5
23306: PUSH
23307: LD_INT 7
23309: PUSH
23310: LD_INT 11
23312: PUSH
23313: LD_INT 12
23315: PUSH
23316: LD_INT 15
23318: PUSH
23319: LD_INT 16
23321: PUSH
23322: LD_INT 20
23324: PUSH
23325: LD_INT 21
23327: PUSH
23328: LD_INT 22
23330: PUSH
23331: LD_INT 23
23333: PUSH
23334: LD_INT 25
23336: PUSH
23337: LD_INT 26
23339: PUSH
23340: LD_INT 30
23342: PUSH
23343: LD_INT 31
23345: PUSH
23346: LD_INT 32
23348: PUSH
23349: LD_INT 33
23351: PUSH
23352: LD_INT 34
23354: PUSH
23355: LD_INT 35
23357: PUSH
23358: LD_INT 36
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 101
23386: PUSH
23387: LD_INT 102
23389: PUSH
23390: LD_INT 103
23392: PUSH
23393: LD_INT 106
23395: PUSH
23396: LD_INT 108
23398: PUSH
23399: LD_INT 112
23401: PUSH
23402: LD_INT 113
23404: PUSH
23405: LD_INT 114
23407: PUSH
23408: LD_INT 115
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: ST_TO_ADDR
23426: GO 23657
23428: LD_INT 19
23430: DOUBLE
23431: EQUAL
23432: IFTRUE 23436
23434: GO 23656
23436: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23437: LD_ADDR_VAR 0 1
23441: PUSH
23442: LD_INT 1
23444: PUSH
23445: LD_INT 2
23447: PUSH
23448: LD_INT 3
23450: PUSH
23451: LD_INT 4
23453: PUSH
23454: LD_INT 5
23456: PUSH
23457: LD_INT 6
23459: PUSH
23460: LD_INT 7
23462: PUSH
23463: LD_INT 8
23465: PUSH
23466: LD_INT 9
23468: PUSH
23469: LD_INT 10
23471: PUSH
23472: LD_INT 11
23474: PUSH
23475: LD_INT 12
23477: PUSH
23478: LD_INT 13
23480: PUSH
23481: LD_INT 14
23483: PUSH
23484: LD_INT 15
23486: PUSH
23487: LD_INT 16
23489: PUSH
23490: LD_INT 17
23492: PUSH
23493: LD_INT 18
23495: PUSH
23496: LD_INT 19
23498: PUSH
23499: LD_INT 20
23501: PUSH
23502: LD_INT 21
23504: PUSH
23505: LD_INT 22
23507: PUSH
23508: LD_INT 23
23510: PUSH
23511: LD_INT 24
23513: PUSH
23514: LD_INT 25
23516: PUSH
23517: LD_INT 26
23519: PUSH
23520: LD_INT 27
23522: PUSH
23523: LD_INT 28
23525: PUSH
23526: LD_INT 29
23528: PUSH
23529: LD_INT 30
23531: PUSH
23532: LD_INT 31
23534: PUSH
23535: LD_INT 32
23537: PUSH
23538: LD_INT 33
23540: PUSH
23541: LD_INT 34
23543: PUSH
23544: LD_INT 35
23546: PUSH
23547: LD_INT 36
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 101
23590: PUSH
23591: LD_INT 102
23593: PUSH
23594: LD_INT 103
23596: PUSH
23597: LD_INT 104
23599: PUSH
23600: LD_INT 105
23602: PUSH
23603: LD_INT 106
23605: PUSH
23606: LD_INT 107
23608: PUSH
23609: LD_INT 108
23611: PUSH
23612: LD_INT 109
23614: PUSH
23615: LD_INT 110
23617: PUSH
23618: LD_INT 111
23620: PUSH
23621: LD_INT 112
23623: PUSH
23624: LD_INT 113
23626: PUSH
23627: LD_INT 114
23629: PUSH
23630: LD_INT 115
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: ST_TO_ADDR
23654: GO 23657
23656: POP
// end else
23657: GO 23876
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23659: LD_ADDR_VAR 0 1
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: LD_INT 2
23669: PUSH
23670: LD_INT 3
23672: PUSH
23673: LD_INT 4
23675: PUSH
23676: LD_INT 5
23678: PUSH
23679: LD_INT 6
23681: PUSH
23682: LD_INT 7
23684: PUSH
23685: LD_INT 8
23687: PUSH
23688: LD_INT 9
23690: PUSH
23691: LD_INT 10
23693: PUSH
23694: LD_INT 11
23696: PUSH
23697: LD_INT 12
23699: PUSH
23700: LD_INT 13
23702: PUSH
23703: LD_INT 14
23705: PUSH
23706: LD_INT 15
23708: PUSH
23709: LD_INT 16
23711: PUSH
23712: LD_INT 17
23714: PUSH
23715: LD_INT 18
23717: PUSH
23718: LD_INT 19
23720: PUSH
23721: LD_INT 20
23723: PUSH
23724: LD_INT 21
23726: PUSH
23727: LD_INT 22
23729: PUSH
23730: LD_INT 23
23732: PUSH
23733: LD_INT 24
23735: PUSH
23736: LD_INT 25
23738: PUSH
23739: LD_INT 26
23741: PUSH
23742: LD_INT 27
23744: PUSH
23745: LD_INT 28
23747: PUSH
23748: LD_INT 29
23750: PUSH
23751: LD_INT 30
23753: PUSH
23754: LD_INT 31
23756: PUSH
23757: LD_INT 32
23759: PUSH
23760: LD_INT 33
23762: PUSH
23763: LD_INT 34
23765: PUSH
23766: LD_INT 35
23768: PUSH
23769: LD_INT 36
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 101
23812: PUSH
23813: LD_INT 102
23815: PUSH
23816: LD_INT 103
23818: PUSH
23819: LD_INT 104
23821: PUSH
23822: LD_INT 105
23824: PUSH
23825: LD_INT 106
23827: PUSH
23828: LD_INT 107
23830: PUSH
23831: LD_INT 108
23833: PUSH
23834: LD_INT 109
23836: PUSH
23837: LD_INT 110
23839: PUSH
23840: LD_INT 111
23842: PUSH
23843: LD_INT 112
23845: PUSH
23846: LD_INT 113
23848: PUSH
23849: LD_INT 114
23851: PUSH
23852: LD_INT 115
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: ST_TO_ADDR
// if result then
23876: LD_VAR 0 1
23880: IFFALSE 24169
// begin normal :=  ;
23882: LD_ADDR_VAR 0 3
23886: PUSH
23887: LD_STRING 
23889: ST_TO_ADDR
// hardcore :=  ;
23890: LD_ADDR_VAR 0 4
23894: PUSH
23895: LD_STRING 
23897: ST_TO_ADDR
// for i = 1 to normalCounter do
23898: LD_ADDR_VAR 0 5
23902: PUSH
23903: DOUBLE
23904: LD_INT 1
23906: DEC
23907: ST_TO_ADDR
23908: LD_EXP 64
23912: PUSH
23913: FOR_TO
23914: IFFALSE 24015
// begin tmp := 0 ;
23916: LD_ADDR_VAR 0 2
23920: PUSH
23921: LD_STRING 0
23923: ST_TO_ADDR
// if result [ 1 ] then
23924: LD_VAR 0 1
23928: PUSH
23929: LD_INT 1
23931: ARRAY
23932: IFFALSE 23997
// if result [ 1 ] [ 1 ] = i then
23934: LD_VAR 0 1
23938: PUSH
23939: LD_INT 1
23941: ARRAY
23942: PUSH
23943: LD_INT 1
23945: ARRAY
23946: PUSH
23947: LD_VAR 0 5
23951: EQUAL
23952: IFFALSE 23997
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23954: LD_ADDR_VAR 0 1
23958: PUSH
23959: LD_VAR 0 1
23963: PPUSH
23964: LD_INT 1
23966: PPUSH
23967: LD_VAR 0 1
23971: PUSH
23972: LD_INT 1
23974: ARRAY
23975: PPUSH
23976: LD_INT 1
23978: PPUSH
23979: CALL_OW 3
23983: PPUSH
23984: CALL_OW 1
23988: ST_TO_ADDR
// tmp := 1 ;
23989: LD_ADDR_VAR 0 2
23993: PUSH
23994: LD_STRING 1
23996: ST_TO_ADDR
// end ; normal := normal & tmp ;
23997: LD_ADDR_VAR 0 3
24001: PUSH
24002: LD_VAR 0 3
24006: PUSH
24007: LD_VAR 0 2
24011: STR
24012: ST_TO_ADDR
// end ;
24013: GO 23913
24015: POP
24016: POP
// for i = 1 to hardcoreCounter do
24017: LD_ADDR_VAR 0 5
24021: PUSH
24022: DOUBLE
24023: LD_INT 1
24025: DEC
24026: ST_TO_ADDR
24027: LD_EXP 65
24031: PUSH
24032: FOR_TO
24033: IFFALSE 24138
// begin tmp := 0 ;
24035: LD_ADDR_VAR 0 2
24039: PUSH
24040: LD_STRING 0
24042: ST_TO_ADDR
// if result [ 2 ] then
24043: LD_VAR 0 1
24047: PUSH
24048: LD_INT 2
24050: ARRAY
24051: IFFALSE 24120
// if result [ 2 ] [ 1 ] = 100 + i then
24053: LD_VAR 0 1
24057: PUSH
24058: LD_INT 2
24060: ARRAY
24061: PUSH
24062: LD_INT 1
24064: ARRAY
24065: PUSH
24066: LD_INT 100
24068: PUSH
24069: LD_VAR 0 5
24073: PLUS
24074: EQUAL
24075: IFFALSE 24120
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24077: LD_ADDR_VAR 0 1
24081: PUSH
24082: LD_VAR 0 1
24086: PPUSH
24087: LD_INT 2
24089: PPUSH
24090: LD_VAR 0 1
24094: PUSH
24095: LD_INT 2
24097: ARRAY
24098: PPUSH
24099: LD_INT 1
24101: PPUSH
24102: CALL_OW 3
24106: PPUSH
24107: CALL_OW 1
24111: ST_TO_ADDR
// tmp := 1 ;
24112: LD_ADDR_VAR 0 2
24116: PUSH
24117: LD_STRING 1
24119: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24120: LD_ADDR_VAR 0 4
24124: PUSH
24125: LD_VAR 0 4
24129: PUSH
24130: LD_VAR 0 2
24134: STR
24135: ST_TO_ADDR
// end ;
24136: GO 24032
24138: POP
24139: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24140: LD_STRING getStreamItemsFromMission("
24142: PUSH
24143: LD_VAR 0 3
24147: STR
24148: PUSH
24149: LD_STRING ","
24151: STR
24152: PUSH
24153: LD_VAR 0 4
24157: STR
24158: PUSH
24159: LD_STRING ")
24161: STR
24162: PPUSH
24163: CALL_OW 559
// end else
24167: GO 24176
// ToLua ( getStreamItemsFromMission("","") ) ;
24169: LD_STRING getStreamItemsFromMission("","")
24171: PPUSH
24172: CALL_OW 559
// end ;
24176: LD_VAR 0 1
24180: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24181: LD_EXP 63
24185: PUSH
24186: LD_EXP 68
24190: AND
24191: IFFALSE 24315
24193: GO 24195
24195: DISABLE
24196: LD_INT 0
24198: PPUSH
24199: PPUSH
// begin enable ;
24200: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24201: LD_ADDR_VAR 0 2
24205: PUSH
24206: LD_INT 22
24208: PUSH
24209: LD_OWVAR 2
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 2
24220: PUSH
24221: LD_INT 34
24223: PUSH
24224: LD_INT 7
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 34
24233: PUSH
24234: LD_INT 45
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 34
24243: PUSH
24244: LD_INT 28
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 34
24253: PUSH
24254: LD_INT 47
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PPUSH
24272: CALL_OW 69
24276: ST_TO_ADDR
// if not tmp then
24277: LD_VAR 0 2
24281: NOT
24282: IFFALSE 24286
// exit ;
24284: GO 24315
// for i in tmp do
24286: LD_ADDR_VAR 0 1
24290: PUSH
24291: LD_VAR 0 2
24295: PUSH
24296: FOR_IN
24297: IFFALSE 24313
// begin SetLives ( i , 0 ) ;
24299: LD_VAR 0 1
24303: PPUSH
24304: LD_INT 0
24306: PPUSH
24307: CALL_OW 234
// end ;
24311: GO 24296
24313: POP
24314: POP
// end ;
24315: PPOPN 2
24317: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24318: LD_EXP 63
24322: PUSH
24323: LD_EXP 69
24327: AND
24328: IFFALSE 24412
24330: GO 24332
24332: DISABLE
24333: LD_INT 0
24335: PPUSH
24336: PPUSH
// begin enable ;
24337: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24338: LD_ADDR_VAR 0 2
24342: PUSH
24343: LD_INT 22
24345: PUSH
24346: LD_OWVAR 2
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 32
24357: PUSH
24358: LD_INT 3
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PPUSH
24369: CALL_OW 69
24373: ST_TO_ADDR
// if not tmp then
24374: LD_VAR 0 2
24378: NOT
24379: IFFALSE 24383
// exit ;
24381: GO 24412
// for i in tmp do
24383: LD_ADDR_VAR 0 1
24387: PUSH
24388: LD_VAR 0 2
24392: PUSH
24393: FOR_IN
24394: IFFALSE 24410
// begin SetLives ( i , 0 ) ;
24396: LD_VAR 0 1
24400: PPUSH
24401: LD_INT 0
24403: PPUSH
24404: CALL_OW 234
// end ;
24408: GO 24393
24410: POP
24411: POP
// end ;
24412: PPOPN 2
24414: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24415: LD_EXP 63
24419: PUSH
24420: LD_EXP 66
24424: AND
24425: IFFALSE 24518
24427: GO 24429
24429: DISABLE
24430: LD_INT 0
24432: PPUSH
// begin enable ;
24433: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24434: LD_ADDR_VAR 0 1
24438: PUSH
24439: LD_INT 22
24441: PUSH
24442: LD_OWVAR 2
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: LD_INT 25
24456: PUSH
24457: LD_INT 5
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 25
24466: PUSH
24467: LD_INT 9
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 25
24476: PUSH
24477: LD_INT 8
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PPUSH
24494: CALL_OW 69
24498: PUSH
24499: FOR_IN
24500: IFFALSE 24516
// begin SetClass ( i , 1 ) ;
24502: LD_VAR 0 1
24506: PPUSH
24507: LD_INT 1
24509: PPUSH
24510: CALL_OW 336
// end ;
24514: GO 24499
24516: POP
24517: POP
// end ;
24518: PPOPN 1
24520: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24521: LD_EXP 63
24525: PUSH
24526: LD_EXP 67
24530: AND
24531: PUSH
24532: LD_OWVAR 65
24536: PUSH
24537: LD_INT 7
24539: LESS
24540: AND
24541: IFFALSE 24555
24543: GO 24545
24545: DISABLE
// begin enable ;
24546: ENABLE
// game_speed := 7 ;
24547: LD_ADDR_OWVAR 65
24551: PUSH
24552: LD_INT 7
24554: ST_TO_ADDR
// end ;
24555: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24556: LD_EXP 63
24560: PUSH
24561: LD_EXP 70
24565: AND
24566: IFFALSE 24768
24568: GO 24570
24570: DISABLE
24571: LD_INT 0
24573: PPUSH
24574: PPUSH
24575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24576: LD_ADDR_VAR 0 3
24580: PUSH
24581: LD_INT 81
24583: PUSH
24584: LD_OWVAR 2
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 21
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PPUSH
24607: CALL_OW 69
24611: ST_TO_ADDR
// if not tmp then
24612: LD_VAR 0 3
24616: NOT
24617: IFFALSE 24621
// exit ;
24619: GO 24768
// if tmp > 5 then
24621: LD_VAR 0 3
24625: PUSH
24626: LD_INT 5
24628: GREATER
24629: IFFALSE 24641
// k := 5 else
24631: LD_ADDR_VAR 0 2
24635: PUSH
24636: LD_INT 5
24638: ST_TO_ADDR
24639: GO 24651
// k := tmp ;
24641: LD_ADDR_VAR 0 2
24645: PUSH
24646: LD_VAR 0 3
24650: ST_TO_ADDR
// for i := 1 to k do
24651: LD_ADDR_VAR 0 1
24655: PUSH
24656: DOUBLE
24657: LD_INT 1
24659: DEC
24660: ST_TO_ADDR
24661: LD_VAR 0 2
24665: PUSH
24666: FOR_TO
24667: IFFALSE 24766
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24669: LD_VAR 0 3
24673: PUSH
24674: LD_VAR 0 1
24678: ARRAY
24679: PPUSH
24680: LD_VAR 0 1
24684: PUSH
24685: LD_INT 4
24687: MOD
24688: PUSH
24689: LD_INT 1
24691: PLUS
24692: PPUSH
24693: CALL_OW 259
24697: PUSH
24698: LD_INT 10
24700: LESS
24701: IFFALSE 24764
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24703: LD_VAR 0 3
24707: PUSH
24708: LD_VAR 0 1
24712: ARRAY
24713: PPUSH
24714: LD_VAR 0 1
24718: PUSH
24719: LD_INT 4
24721: MOD
24722: PUSH
24723: LD_INT 1
24725: PLUS
24726: PPUSH
24727: LD_VAR 0 3
24731: PUSH
24732: LD_VAR 0 1
24736: ARRAY
24737: PPUSH
24738: LD_VAR 0 1
24742: PUSH
24743: LD_INT 4
24745: MOD
24746: PUSH
24747: LD_INT 1
24749: PLUS
24750: PPUSH
24751: CALL_OW 259
24755: PUSH
24756: LD_INT 1
24758: PLUS
24759: PPUSH
24760: CALL_OW 237
24764: GO 24666
24766: POP
24767: POP
// end ;
24768: PPOPN 3
24770: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24771: LD_EXP 63
24775: PUSH
24776: LD_EXP 71
24780: AND
24781: IFFALSE 24801
24783: GO 24785
24785: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24786: LD_INT 4
24788: PPUSH
24789: LD_OWVAR 2
24793: PPUSH
24794: LD_INT 0
24796: PPUSH
24797: CALL_OW 324
24801: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24802: LD_EXP 63
24806: PUSH
24807: LD_EXP 100
24811: AND
24812: IFFALSE 24832
24814: GO 24816
24816: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24817: LD_INT 19
24819: PPUSH
24820: LD_OWVAR 2
24824: PPUSH
24825: LD_INT 0
24827: PPUSH
24828: CALL_OW 324
24832: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24833: LD_EXP 63
24837: PUSH
24838: LD_EXP 72
24842: AND
24843: IFFALSE 24945
24845: GO 24847
24847: DISABLE
24848: LD_INT 0
24850: PPUSH
24851: PPUSH
// begin enable ;
24852: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24853: LD_ADDR_VAR 0 2
24857: PUSH
24858: LD_INT 22
24860: PUSH
24861: LD_OWVAR 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 2
24872: PUSH
24873: LD_INT 34
24875: PUSH
24876: LD_INT 11
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 34
24885: PUSH
24886: LD_INT 30
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PPUSH
24902: CALL_OW 69
24906: ST_TO_ADDR
// if not tmp then
24907: LD_VAR 0 2
24911: NOT
24912: IFFALSE 24916
// exit ;
24914: GO 24945
// for i in tmp do
24916: LD_ADDR_VAR 0 1
24920: PUSH
24921: LD_VAR 0 2
24925: PUSH
24926: FOR_IN
24927: IFFALSE 24943
// begin SetLives ( i , 0 ) ;
24929: LD_VAR 0 1
24933: PPUSH
24934: LD_INT 0
24936: PPUSH
24937: CALL_OW 234
// end ;
24941: GO 24926
24943: POP
24944: POP
// end ;
24945: PPOPN 2
24947: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24948: LD_EXP 63
24952: PUSH
24953: LD_EXP 73
24957: AND
24958: IFFALSE 24978
24960: GO 24962
24962: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24963: LD_INT 32
24965: PPUSH
24966: LD_OWVAR 2
24970: PPUSH
24971: LD_INT 0
24973: PPUSH
24974: CALL_OW 324
24978: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24979: LD_EXP 63
24983: PUSH
24984: LD_EXP 74
24988: AND
24989: IFFALSE 25170
24991: GO 24993
24993: DISABLE
24994: LD_INT 0
24996: PPUSH
24997: PPUSH
24998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24999: LD_ADDR_VAR 0 2
25003: PUSH
25004: LD_INT 22
25006: PUSH
25007: LD_OWVAR 2
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 33
25018: PUSH
25019: LD_INT 3
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PPUSH
25030: CALL_OW 69
25034: ST_TO_ADDR
// if not tmp then
25035: LD_VAR 0 2
25039: NOT
25040: IFFALSE 25044
// exit ;
25042: GO 25170
// side := 0 ;
25044: LD_ADDR_VAR 0 3
25048: PUSH
25049: LD_INT 0
25051: ST_TO_ADDR
// for i := 1 to 8 do
25052: LD_ADDR_VAR 0 1
25056: PUSH
25057: DOUBLE
25058: LD_INT 1
25060: DEC
25061: ST_TO_ADDR
25062: LD_INT 8
25064: PUSH
25065: FOR_TO
25066: IFFALSE 25114
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25068: LD_OWVAR 2
25072: PUSH
25073: LD_VAR 0 1
25077: NONEQUAL
25078: PUSH
25079: LD_OWVAR 2
25083: PPUSH
25084: LD_VAR 0 1
25088: PPUSH
25089: CALL_OW 81
25093: PUSH
25094: LD_INT 2
25096: EQUAL
25097: AND
25098: IFFALSE 25112
// begin side := i ;
25100: LD_ADDR_VAR 0 3
25104: PUSH
25105: LD_VAR 0 1
25109: ST_TO_ADDR
// break ;
25110: GO 25114
// end ;
25112: GO 25065
25114: POP
25115: POP
// if not side then
25116: LD_VAR 0 3
25120: NOT
25121: IFFALSE 25125
// exit ;
25123: GO 25170
// for i := 1 to tmp do
25125: LD_ADDR_VAR 0 1
25129: PUSH
25130: DOUBLE
25131: LD_INT 1
25133: DEC
25134: ST_TO_ADDR
25135: LD_VAR 0 2
25139: PUSH
25140: FOR_TO
25141: IFFALSE 25168
// if Prob ( 60 ) then
25143: LD_INT 60
25145: PPUSH
25146: CALL_OW 13
25150: IFFALSE 25166
// SetSide ( i , side ) ;
25152: LD_VAR 0 1
25156: PPUSH
25157: LD_VAR 0 3
25161: PPUSH
25162: CALL_OW 235
25166: GO 25140
25168: POP
25169: POP
// end ;
25170: PPOPN 3
25172: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25173: LD_EXP 63
25177: PUSH
25178: LD_EXP 76
25182: AND
25183: IFFALSE 25302
25185: GO 25187
25187: DISABLE
25188: LD_INT 0
25190: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25191: LD_ADDR_VAR 0 1
25195: PUSH
25196: LD_INT 22
25198: PUSH
25199: LD_OWVAR 2
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 21
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 3
25220: PUSH
25221: LD_INT 23
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: PPUSH
25240: CALL_OW 69
25244: PUSH
25245: FOR_IN
25246: IFFALSE 25300
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25248: LD_VAR 0 1
25252: PPUSH
25253: CALL_OW 257
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: LD_INT 2
25263: PUSH
25264: LD_INT 3
25266: PUSH
25267: LD_INT 4
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: IN
25276: IFFALSE 25298
// SetClass ( un , rand ( 1 , 4 ) ) ;
25278: LD_VAR 0 1
25282: PPUSH
25283: LD_INT 1
25285: PPUSH
25286: LD_INT 4
25288: PPUSH
25289: CALL_OW 12
25293: PPUSH
25294: CALL_OW 336
25298: GO 25245
25300: POP
25301: POP
// end ;
25302: PPOPN 1
25304: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25305: LD_EXP 63
25309: PUSH
25310: LD_EXP 75
25314: AND
25315: IFFALSE 25394
25317: GO 25319
25319: DISABLE
25320: LD_INT 0
25322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25323: LD_ADDR_VAR 0 1
25327: PUSH
25328: LD_INT 22
25330: PUSH
25331: LD_OWVAR 2
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 21
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PPUSH
25354: CALL_OW 69
25358: ST_TO_ADDR
// if not tmp then
25359: LD_VAR 0 1
25363: NOT
25364: IFFALSE 25368
// exit ;
25366: GO 25394
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25368: LD_VAR 0 1
25372: PUSH
25373: LD_INT 1
25375: PPUSH
25376: LD_VAR 0 1
25380: PPUSH
25381: CALL_OW 12
25385: ARRAY
25386: PPUSH
25387: LD_INT 100
25389: PPUSH
25390: CALL_OW 234
// end ;
25394: PPOPN 1
25396: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25397: LD_EXP 63
25401: PUSH
25402: LD_EXP 77
25406: AND
25407: IFFALSE 25505
25409: GO 25411
25411: DISABLE
25412: LD_INT 0
25414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25415: LD_ADDR_VAR 0 1
25419: PUSH
25420: LD_INT 22
25422: PUSH
25423: LD_OWVAR 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 21
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PPUSH
25446: CALL_OW 69
25450: ST_TO_ADDR
// if not tmp then
25451: LD_VAR 0 1
25455: NOT
25456: IFFALSE 25460
// exit ;
25458: GO 25505
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25460: LD_VAR 0 1
25464: PUSH
25465: LD_INT 1
25467: PPUSH
25468: LD_VAR 0 1
25472: PPUSH
25473: CALL_OW 12
25477: ARRAY
25478: PPUSH
25479: LD_INT 1
25481: PPUSH
25482: LD_INT 4
25484: PPUSH
25485: CALL_OW 12
25489: PPUSH
25490: LD_INT 3000
25492: PPUSH
25493: LD_INT 9000
25495: PPUSH
25496: CALL_OW 12
25500: PPUSH
25501: CALL_OW 492
// end ;
25505: PPOPN 1
25507: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25508: LD_EXP 63
25512: PUSH
25513: LD_EXP 78
25517: AND
25518: IFFALSE 25538
25520: GO 25522
25522: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25523: LD_INT 1
25525: PPUSH
25526: LD_OWVAR 2
25530: PPUSH
25531: LD_INT 0
25533: PPUSH
25534: CALL_OW 324
25538: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25539: LD_EXP 63
25543: PUSH
25544: LD_EXP 79
25548: AND
25549: IFFALSE 25632
25551: GO 25553
25553: DISABLE
25554: LD_INT 0
25556: PPUSH
25557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25558: LD_ADDR_VAR 0 2
25562: PUSH
25563: LD_INT 22
25565: PUSH
25566: LD_OWVAR 2
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 21
25577: PUSH
25578: LD_INT 3
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PPUSH
25589: CALL_OW 69
25593: ST_TO_ADDR
// if not tmp then
25594: LD_VAR 0 2
25598: NOT
25599: IFFALSE 25603
// exit ;
25601: GO 25632
// for i in tmp do
25603: LD_ADDR_VAR 0 1
25607: PUSH
25608: LD_VAR 0 2
25612: PUSH
25613: FOR_IN
25614: IFFALSE 25630
// SetBLevel ( i , 10 ) ;
25616: LD_VAR 0 1
25620: PPUSH
25621: LD_INT 10
25623: PPUSH
25624: CALL_OW 241
25628: GO 25613
25630: POP
25631: POP
// end ;
25632: PPOPN 2
25634: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25635: LD_EXP 63
25639: PUSH
25640: LD_EXP 80
25644: AND
25645: IFFALSE 25756
25647: GO 25649
25649: DISABLE
25650: LD_INT 0
25652: PPUSH
25653: PPUSH
25654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25655: LD_ADDR_VAR 0 3
25659: PUSH
25660: LD_INT 22
25662: PUSH
25663: LD_OWVAR 2
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 25
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PPUSH
25686: CALL_OW 69
25690: ST_TO_ADDR
// if not tmp then
25691: LD_VAR 0 3
25695: NOT
25696: IFFALSE 25700
// exit ;
25698: GO 25756
// un := tmp [ rand ( 1 , tmp ) ] ;
25700: LD_ADDR_VAR 0 2
25704: PUSH
25705: LD_VAR 0 3
25709: PUSH
25710: LD_INT 1
25712: PPUSH
25713: LD_VAR 0 3
25717: PPUSH
25718: CALL_OW 12
25722: ARRAY
25723: ST_TO_ADDR
// if Crawls ( un ) then
25724: LD_VAR 0 2
25728: PPUSH
25729: CALL_OW 318
25733: IFFALSE 25744
// ComWalk ( un ) ;
25735: LD_VAR 0 2
25739: PPUSH
25740: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25744: LD_VAR 0 2
25748: PPUSH
25749: LD_INT 5
25751: PPUSH
25752: CALL_OW 336
// end ;
25756: PPOPN 3
25758: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25759: LD_EXP 63
25763: PUSH
25764: LD_EXP 81
25768: AND
25769: PUSH
25770: LD_OWVAR 67
25774: PUSH
25775: LD_INT 3
25777: LESS
25778: AND
25779: IFFALSE 25798
25781: GO 25783
25783: DISABLE
// Difficulty := Difficulty + 1 ;
25784: LD_ADDR_OWVAR 67
25788: PUSH
25789: LD_OWVAR 67
25793: PUSH
25794: LD_INT 1
25796: PLUS
25797: ST_TO_ADDR
25798: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25799: LD_EXP 63
25803: PUSH
25804: LD_EXP 82
25808: AND
25809: IFFALSE 25912
25811: GO 25813
25813: DISABLE
25814: LD_INT 0
25816: PPUSH
// begin for i := 1 to 5 do
25817: LD_ADDR_VAR 0 1
25821: PUSH
25822: DOUBLE
25823: LD_INT 1
25825: DEC
25826: ST_TO_ADDR
25827: LD_INT 5
25829: PUSH
25830: FOR_TO
25831: IFFALSE 25910
// begin uc_nation := nation_nature ;
25833: LD_ADDR_OWVAR 21
25837: PUSH
25838: LD_INT 0
25840: ST_TO_ADDR
// uc_side := 0 ;
25841: LD_ADDR_OWVAR 20
25845: PUSH
25846: LD_INT 0
25848: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25849: LD_ADDR_OWVAR 29
25853: PUSH
25854: LD_INT 12
25856: PUSH
25857: LD_INT 12
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: ST_TO_ADDR
// hc_agressivity := 20 ;
25864: LD_ADDR_OWVAR 35
25868: PUSH
25869: LD_INT 20
25871: ST_TO_ADDR
// hc_class := class_tiger ;
25872: LD_ADDR_OWVAR 28
25876: PUSH
25877: LD_INT 14
25879: ST_TO_ADDR
// hc_gallery :=  ;
25880: LD_ADDR_OWVAR 33
25884: PUSH
25885: LD_STRING 
25887: ST_TO_ADDR
// hc_name :=  ;
25888: LD_ADDR_OWVAR 26
25892: PUSH
25893: LD_STRING 
25895: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25896: CALL_OW 44
25900: PPUSH
25901: LD_INT 0
25903: PPUSH
25904: CALL_OW 51
// end ;
25908: GO 25830
25910: POP
25911: POP
// end ;
25912: PPOPN 1
25914: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25915: LD_EXP 63
25919: PUSH
25920: LD_EXP 83
25924: AND
25925: IFFALSE 25934
25927: GO 25929
25929: DISABLE
// StreamSibBomb ;
25930: CALL 25935 0 0
25934: END
// export function StreamSibBomb ; var i , x , y ; begin
25935: LD_INT 0
25937: PPUSH
25938: PPUSH
25939: PPUSH
25940: PPUSH
// result := false ;
25941: LD_ADDR_VAR 0 1
25945: PUSH
25946: LD_INT 0
25948: ST_TO_ADDR
// for i := 1 to 16 do
25949: LD_ADDR_VAR 0 2
25953: PUSH
25954: DOUBLE
25955: LD_INT 1
25957: DEC
25958: ST_TO_ADDR
25959: LD_INT 16
25961: PUSH
25962: FOR_TO
25963: IFFALSE 26162
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25965: LD_ADDR_VAR 0 3
25969: PUSH
25970: LD_INT 10
25972: PUSH
25973: LD_INT 20
25975: PUSH
25976: LD_INT 30
25978: PUSH
25979: LD_INT 40
25981: PUSH
25982: LD_INT 50
25984: PUSH
25985: LD_INT 60
25987: PUSH
25988: LD_INT 70
25990: PUSH
25991: LD_INT 80
25993: PUSH
25994: LD_INT 90
25996: PUSH
25997: LD_INT 100
25999: PUSH
26000: LD_INT 110
26002: PUSH
26003: LD_INT 120
26005: PUSH
26006: LD_INT 130
26008: PUSH
26009: LD_INT 140
26011: PUSH
26012: LD_INT 150
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 1
26034: PPUSH
26035: LD_INT 15
26037: PPUSH
26038: CALL_OW 12
26042: ARRAY
26043: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26044: LD_ADDR_VAR 0 4
26048: PUSH
26049: LD_INT 10
26051: PUSH
26052: LD_INT 20
26054: PUSH
26055: LD_INT 30
26057: PUSH
26058: LD_INT 40
26060: PUSH
26061: LD_INT 50
26063: PUSH
26064: LD_INT 60
26066: PUSH
26067: LD_INT 70
26069: PUSH
26070: LD_INT 80
26072: PUSH
26073: LD_INT 90
26075: PUSH
26076: LD_INT 100
26078: PUSH
26079: LD_INT 110
26081: PUSH
26082: LD_INT 120
26084: PUSH
26085: LD_INT 130
26087: PUSH
26088: LD_INT 140
26090: PUSH
26091: LD_INT 150
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PPUSH
26114: LD_INT 15
26116: PPUSH
26117: CALL_OW 12
26121: ARRAY
26122: ST_TO_ADDR
// if ValidHex ( x , y ) then
26123: LD_VAR 0 3
26127: PPUSH
26128: LD_VAR 0 4
26132: PPUSH
26133: CALL_OW 488
26137: IFFALSE 26160
// begin result := [ x , y ] ;
26139: LD_ADDR_VAR 0 1
26143: PUSH
26144: LD_VAR 0 3
26148: PUSH
26149: LD_VAR 0 4
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: ST_TO_ADDR
// break ;
26158: GO 26162
// end ; end ;
26160: GO 25962
26162: POP
26163: POP
// if result then
26164: LD_VAR 0 1
26168: IFFALSE 26228
// begin ToLua ( playSibBomb() ) ;
26170: LD_STRING playSibBomb()
26172: PPUSH
26173: CALL_OW 559
// wait ( 0 0$14 ) ;
26177: LD_INT 490
26179: PPUSH
26180: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26184: LD_VAR 0 1
26188: PUSH
26189: LD_INT 1
26191: ARRAY
26192: PPUSH
26193: LD_VAR 0 1
26197: PUSH
26198: LD_INT 2
26200: ARRAY
26201: PPUSH
26202: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26206: LD_VAR 0 1
26210: PUSH
26211: LD_INT 1
26213: ARRAY
26214: PPUSH
26215: LD_VAR 0 1
26219: PUSH
26220: LD_INT 2
26222: ARRAY
26223: PPUSH
26224: CALL_OW 429
// end ; end ;
26228: LD_VAR 0 1
26232: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26233: LD_EXP 63
26237: PUSH
26238: LD_EXP 85
26242: AND
26243: IFFALSE 26255
26245: GO 26247
26247: DISABLE
// YouLost (  ) ;
26248: LD_STRING 
26250: PPUSH
26251: CALL_OW 104
26255: END
// every 0 0$1 trigger StreamModeActive and sFog do
26256: LD_EXP 63
26260: PUSH
26261: LD_EXP 84
26265: AND
26266: IFFALSE 26280
26268: GO 26270
26270: DISABLE
// FogOff ( your_side ) ;
26271: LD_OWVAR 2
26275: PPUSH
26276: CALL_OW 344
26280: END
// every 0 0$1 trigger StreamModeActive and sSun do
26281: LD_EXP 63
26285: PUSH
26286: LD_EXP 86
26290: AND
26291: IFFALSE 26319
26293: GO 26295
26295: DISABLE
// begin solar_recharge_percent := 0 ;
26296: LD_ADDR_OWVAR 79
26300: PUSH
26301: LD_INT 0
26303: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26304: LD_INT 10500
26306: PPUSH
26307: CALL_OW 67
// solar_recharge_percent := 100 ;
26311: LD_ADDR_OWVAR 79
26315: PUSH
26316: LD_INT 100
26318: ST_TO_ADDR
// end ;
26319: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26320: LD_EXP 63
26324: PUSH
26325: LD_EXP 87
26329: AND
26330: IFFALSE 26569
26332: GO 26334
26334: DISABLE
26335: LD_INT 0
26337: PPUSH
26338: PPUSH
26339: PPUSH
// begin tmp := [ ] ;
26340: LD_ADDR_VAR 0 3
26344: PUSH
26345: EMPTY
26346: ST_TO_ADDR
// for i := 1 to 6 do
26347: LD_ADDR_VAR 0 1
26351: PUSH
26352: DOUBLE
26353: LD_INT 1
26355: DEC
26356: ST_TO_ADDR
26357: LD_INT 6
26359: PUSH
26360: FOR_TO
26361: IFFALSE 26466
// begin uc_nation := nation_nature ;
26363: LD_ADDR_OWVAR 21
26367: PUSH
26368: LD_INT 0
26370: ST_TO_ADDR
// uc_side := 0 ;
26371: LD_ADDR_OWVAR 20
26375: PUSH
26376: LD_INT 0
26378: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26379: LD_ADDR_OWVAR 29
26383: PUSH
26384: LD_INT 12
26386: PUSH
26387: LD_INT 12
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: ST_TO_ADDR
// hc_agressivity := 20 ;
26394: LD_ADDR_OWVAR 35
26398: PUSH
26399: LD_INT 20
26401: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26402: LD_ADDR_OWVAR 28
26406: PUSH
26407: LD_INT 17
26409: ST_TO_ADDR
// hc_gallery :=  ;
26410: LD_ADDR_OWVAR 33
26414: PUSH
26415: LD_STRING 
26417: ST_TO_ADDR
// hc_name :=  ;
26418: LD_ADDR_OWVAR 26
26422: PUSH
26423: LD_STRING 
26425: ST_TO_ADDR
// un := CreateHuman ;
26426: LD_ADDR_VAR 0 2
26430: PUSH
26431: CALL_OW 44
26435: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26436: LD_VAR 0 2
26440: PPUSH
26441: LD_INT 1
26443: PPUSH
26444: CALL_OW 51
// tmp := tmp ^ un ;
26448: LD_ADDR_VAR 0 3
26452: PUSH
26453: LD_VAR 0 3
26457: PUSH
26458: LD_VAR 0 2
26462: ADD
26463: ST_TO_ADDR
// end ;
26464: GO 26360
26466: POP
26467: POP
// repeat wait ( 0 0$1 ) ;
26468: LD_INT 35
26470: PPUSH
26471: CALL_OW 67
// for un in tmp do
26475: LD_ADDR_VAR 0 2
26479: PUSH
26480: LD_VAR 0 3
26484: PUSH
26485: FOR_IN
26486: IFFALSE 26560
// begin if IsDead ( un ) then
26488: LD_VAR 0 2
26492: PPUSH
26493: CALL_OW 301
26497: IFFALSE 26517
// begin tmp := tmp diff un ;
26499: LD_ADDR_VAR 0 3
26503: PUSH
26504: LD_VAR 0 3
26508: PUSH
26509: LD_VAR 0 2
26513: DIFF
26514: ST_TO_ADDR
// continue ;
26515: GO 26485
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26517: LD_VAR 0 2
26521: PPUSH
26522: LD_INT 3
26524: PUSH
26525: LD_INT 22
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PPUSH
26539: CALL_OW 69
26543: PPUSH
26544: LD_VAR 0 2
26548: PPUSH
26549: CALL_OW 74
26553: PPUSH
26554: CALL_OW 115
// end ;
26558: GO 26485
26560: POP
26561: POP
// until not tmp ;
26562: LD_VAR 0 3
26566: NOT
26567: IFFALSE 26468
// end ;
26569: PPOPN 3
26571: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26572: LD_EXP 63
26576: PUSH
26577: LD_EXP 88
26581: AND
26582: IFFALSE 26636
26584: GO 26586
26586: DISABLE
// begin ToLua ( displayTroll(); ) ;
26587: LD_STRING displayTroll();
26589: PPUSH
26590: CALL_OW 559
// wait ( 3 3$00 ) ;
26594: LD_INT 6300
26596: PPUSH
26597: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26601: LD_STRING hideTroll();
26603: PPUSH
26604: CALL_OW 559
// wait ( 1 1$00 ) ;
26608: LD_INT 2100
26610: PPUSH
26611: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26615: LD_STRING displayTroll();
26617: PPUSH
26618: CALL_OW 559
// wait ( 1 1$00 ) ;
26622: LD_INT 2100
26624: PPUSH
26625: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26629: LD_STRING hideTroll();
26631: PPUSH
26632: CALL_OW 559
// end ;
26636: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26637: LD_EXP 63
26641: PUSH
26642: LD_EXP 89
26646: AND
26647: IFFALSE 26710
26649: GO 26651
26651: DISABLE
26652: LD_INT 0
26654: PPUSH
// begin p := 0 ;
26655: LD_ADDR_VAR 0 1
26659: PUSH
26660: LD_INT 0
26662: ST_TO_ADDR
// repeat game_speed := 1 ;
26663: LD_ADDR_OWVAR 65
26667: PUSH
26668: LD_INT 1
26670: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26671: LD_INT 35
26673: PPUSH
26674: CALL_OW 67
// p := p + 1 ;
26678: LD_ADDR_VAR 0 1
26682: PUSH
26683: LD_VAR 0 1
26687: PUSH
26688: LD_INT 1
26690: PLUS
26691: ST_TO_ADDR
// until p >= 60 ;
26692: LD_VAR 0 1
26696: PUSH
26697: LD_INT 60
26699: GREATEREQUAL
26700: IFFALSE 26663
// game_speed := 4 ;
26702: LD_ADDR_OWVAR 65
26706: PUSH
26707: LD_INT 4
26709: ST_TO_ADDR
// end ;
26710: PPOPN 1
26712: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26713: LD_EXP 63
26717: PUSH
26718: LD_EXP 90
26722: AND
26723: IFFALSE 26869
26725: GO 26727
26727: DISABLE
26728: LD_INT 0
26730: PPUSH
26731: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26732: LD_ADDR_VAR 0 1
26736: PUSH
26737: LD_INT 22
26739: PUSH
26740: LD_OWVAR 2
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 2
26751: PUSH
26752: LD_INT 30
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 30
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: LIST
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PPUSH
26781: CALL_OW 69
26785: ST_TO_ADDR
// if not depot then
26786: LD_VAR 0 1
26790: NOT
26791: IFFALSE 26795
// exit ;
26793: GO 26869
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26795: LD_ADDR_VAR 0 2
26799: PUSH
26800: LD_VAR 0 1
26804: PUSH
26805: LD_INT 1
26807: PPUSH
26808: LD_VAR 0 1
26812: PPUSH
26813: CALL_OW 12
26817: ARRAY
26818: PPUSH
26819: CALL_OW 274
26823: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26824: LD_VAR 0 2
26828: PPUSH
26829: LD_INT 1
26831: PPUSH
26832: LD_INT 0
26834: PPUSH
26835: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26839: LD_VAR 0 2
26843: PPUSH
26844: LD_INT 2
26846: PPUSH
26847: LD_INT 0
26849: PPUSH
26850: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26854: LD_VAR 0 2
26858: PPUSH
26859: LD_INT 3
26861: PPUSH
26862: LD_INT 0
26864: PPUSH
26865: CALL_OW 277
// end ;
26869: PPOPN 2
26871: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26872: LD_EXP 63
26876: PUSH
26877: LD_EXP 91
26881: AND
26882: IFFALSE 26979
26884: GO 26886
26886: DISABLE
26887: LD_INT 0
26889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26890: LD_ADDR_VAR 0 1
26894: PUSH
26895: LD_INT 22
26897: PUSH
26898: LD_OWVAR 2
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 21
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 3
26919: PUSH
26920: LD_INT 23
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: PPUSH
26939: CALL_OW 69
26943: ST_TO_ADDR
// if not tmp then
26944: LD_VAR 0 1
26948: NOT
26949: IFFALSE 26953
// exit ;
26951: GO 26979
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26953: LD_VAR 0 1
26957: PUSH
26958: LD_INT 1
26960: PPUSH
26961: LD_VAR 0 1
26965: PPUSH
26966: CALL_OW 12
26970: ARRAY
26971: PPUSH
26972: LD_INT 200
26974: PPUSH
26975: CALL_OW 234
// end ;
26979: PPOPN 1
26981: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26982: LD_EXP 63
26986: PUSH
26987: LD_EXP 92
26991: AND
26992: IFFALSE 27071
26994: GO 26996
26996: DISABLE
26997: LD_INT 0
26999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27000: LD_ADDR_VAR 0 1
27004: PUSH
27005: LD_INT 22
27007: PUSH
27008: LD_OWVAR 2
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 21
27019: PUSH
27020: LD_INT 2
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PPUSH
27031: CALL_OW 69
27035: ST_TO_ADDR
// if not tmp then
27036: LD_VAR 0 1
27040: NOT
27041: IFFALSE 27045
// exit ;
27043: GO 27071
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27045: LD_VAR 0 1
27049: PUSH
27050: LD_INT 1
27052: PPUSH
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 12
27062: ARRAY
27063: PPUSH
27064: LD_INT 60
27066: PPUSH
27067: CALL_OW 234
// end ;
27071: PPOPN 1
27073: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27074: LD_EXP 63
27078: PUSH
27079: LD_EXP 93
27083: AND
27084: IFFALSE 27183
27086: GO 27088
27088: DISABLE
27089: LD_INT 0
27091: PPUSH
27092: PPUSH
// begin enable ;
27093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27094: LD_ADDR_VAR 0 1
27098: PUSH
27099: LD_INT 22
27101: PUSH
27102: LD_OWVAR 2
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 61
27113: PUSH
27114: EMPTY
27115: LIST
27116: PUSH
27117: LD_INT 33
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: PPUSH
27132: CALL_OW 69
27136: ST_TO_ADDR
// if not tmp then
27137: LD_VAR 0 1
27141: NOT
27142: IFFALSE 27146
// exit ;
27144: GO 27183
// for i in tmp do
27146: LD_ADDR_VAR 0 2
27150: PUSH
27151: LD_VAR 0 1
27155: PUSH
27156: FOR_IN
27157: IFFALSE 27181
// if IsControledBy ( i ) then
27159: LD_VAR 0 2
27163: PPUSH
27164: CALL_OW 312
27168: IFFALSE 27179
// ComUnlink ( i ) ;
27170: LD_VAR 0 2
27174: PPUSH
27175: CALL_OW 136
27179: GO 27156
27181: POP
27182: POP
// end ;
27183: PPOPN 2
27185: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27186: LD_EXP 63
27190: PUSH
27191: LD_EXP 94
27195: AND
27196: IFFALSE 27336
27198: GO 27200
27200: DISABLE
27201: LD_INT 0
27203: PPUSH
27204: PPUSH
// begin ToLua ( displayPowell(); ) ;
27205: LD_STRING displayPowell();
27207: PPUSH
27208: CALL_OW 559
// uc_side := 0 ;
27212: LD_ADDR_OWVAR 20
27216: PUSH
27217: LD_INT 0
27219: ST_TO_ADDR
// uc_nation := 2 ;
27220: LD_ADDR_OWVAR 21
27224: PUSH
27225: LD_INT 2
27227: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27228: LD_ADDR_OWVAR 37
27232: PUSH
27233: LD_INT 14
27235: ST_TO_ADDR
// vc_engine := engine_siberite ;
27236: LD_ADDR_OWVAR 39
27240: PUSH
27241: LD_INT 3
27243: ST_TO_ADDR
// vc_control := control_apeman ;
27244: LD_ADDR_OWVAR 38
27248: PUSH
27249: LD_INT 5
27251: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27252: LD_ADDR_OWVAR 40
27256: PUSH
27257: LD_INT 29
27259: ST_TO_ADDR
// un := CreateVehicle ;
27260: LD_ADDR_VAR 0 2
27264: PUSH
27265: CALL_OW 45
27269: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27270: LD_VAR 0 2
27274: PPUSH
27275: LD_INT 1
27277: PPUSH
27278: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27282: LD_INT 35
27284: PPUSH
27285: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27289: LD_VAR 0 2
27293: PPUSH
27294: LD_INT 22
27296: PUSH
27297: LD_OWVAR 2
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PPUSH
27306: CALL_OW 69
27310: PPUSH
27311: LD_VAR 0 2
27315: PPUSH
27316: CALL_OW 74
27320: PPUSH
27321: CALL_OW 115
// until IsDead ( un ) ;
27325: LD_VAR 0 2
27329: PPUSH
27330: CALL_OW 301
27334: IFFALSE 27282
// end ;
27336: PPOPN 2
27338: END
// every 0 0$1 trigger StreamModeActive and sStu do
27339: LD_EXP 63
27343: PUSH
27344: LD_EXP 102
27348: AND
27349: IFFALSE 27365
27351: GO 27353
27353: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27354: LD_STRING displayStucuk();
27356: PPUSH
27357: CALL_OW 559
// ResetFog ;
27361: CALL_OW 335
// end ;
27365: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27366: LD_EXP 63
27370: PUSH
27371: LD_EXP 95
27375: AND
27376: IFFALSE 27517
27378: GO 27380
27380: DISABLE
27381: LD_INT 0
27383: PPUSH
27384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27385: LD_ADDR_VAR 0 2
27389: PUSH
27390: LD_INT 22
27392: PUSH
27393: LD_OWVAR 2
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 21
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PPUSH
27416: CALL_OW 69
27420: ST_TO_ADDR
// if not tmp then
27421: LD_VAR 0 2
27425: NOT
27426: IFFALSE 27430
// exit ;
27428: GO 27517
// un := tmp [ rand ( 1 , tmp ) ] ;
27430: LD_ADDR_VAR 0 1
27434: PUSH
27435: LD_VAR 0 2
27439: PUSH
27440: LD_INT 1
27442: PPUSH
27443: LD_VAR 0 2
27447: PPUSH
27448: CALL_OW 12
27452: ARRAY
27453: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27454: LD_VAR 0 1
27458: PPUSH
27459: LD_INT 0
27461: PPUSH
27462: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27466: LD_VAR 0 1
27470: PPUSH
27471: LD_OWVAR 3
27475: PUSH
27476: LD_VAR 0 1
27480: DIFF
27481: PPUSH
27482: LD_VAR 0 1
27486: PPUSH
27487: CALL_OW 74
27491: PPUSH
27492: CALL_OW 115
// wait ( 0 0$20 ) ;
27496: LD_INT 700
27498: PPUSH
27499: CALL_OW 67
// SetSide ( un , your_side ) ;
27503: LD_VAR 0 1
27507: PPUSH
27508: LD_OWVAR 2
27512: PPUSH
27513: CALL_OW 235
// end ;
27517: PPOPN 2
27519: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27520: LD_EXP 63
27524: PUSH
27525: LD_EXP 96
27529: AND
27530: IFFALSE 27636
27532: GO 27534
27534: DISABLE
27535: LD_INT 0
27537: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27538: LD_ADDR_VAR 0 1
27542: PUSH
27543: LD_INT 22
27545: PUSH
27546: LD_OWVAR 2
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 2
27557: PUSH
27558: LD_INT 30
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 30
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PPUSH
27587: CALL_OW 69
27591: ST_TO_ADDR
// if not depot then
27592: LD_VAR 0 1
27596: NOT
27597: IFFALSE 27601
// exit ;
27599: GO 27636
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27601: LD_VAR 0 1
27605: PUSH
27606: LD_INT 1
27608: ARRAY
27609: PPUSH
27610: CALL_OW 250
27614: PPUSH
27615: LD_VAR 0 1
27619: PUSH
27620: LD_INT 1
27622: ARRAY
27623: PPUSH
27624: CALL_OW 251
27628: PPUSH
27629: LD_INT 70
27631: PPUSH
27632: CALL_OW 495
// end ;
27636: PPOPN 1
27638: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27639: LD_EXP 63
27643: PUSH
27644: LD_EXP 97
27648: AND
27649: IFFALSE 27860
27651: GO 27653
27653: DISABLE
27654: LD_INT 0
27656: PPUSH
27657: PPUSH
27658: PPUSH
27659: PPUSH
27660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27661: LD_ADDR_VAR 0 5
27665: PUSH
27666: LD_INT 22
27668: PUSH
27669: LD_OWVAR 2
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 21
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PPUSH
27692: CALL_OW 69
27696: ST_TO_ADDR
// if not tmp then
27697: LD_VAR 0 5
27701: NOT
27702: IFFALSE 27706
// exit ;
27704: GO 27860
// for i in tmp do
27706: LD_ADDR_VAR 0 1
27710: PUSH
27711: LD_VAR 0 5
27715: PUSH
27716: FOR_IN
27717: IFFALSE 27858
// begin d := rand ( 0 , 5 ) ;
27719: LD_ADDR_VAR 0 4
27723: PUSH
27724: LD_INT 0
27726: PPUSH
27727: LD_INT 5
27729: PPUSH
27730: CALL_OW 12
27734: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27735: LD_ADDR_VAR 0 2
27739: PUSH
27740: LD_VAR 0 1
27744: PPUSH
27745: CALL_OW 250
27749: PPUSH
27750: LD_VAR 0 4
27754: PPUSH
27755: LD_INT 3
27757: PPUSH
27758: LD_INT 12
27760: PPUSH
27761: CALL_OW 12
27765: PPUSH
27766: CALL_OW 272
27770: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27771: LD_ADDR_VAR 0 3
27775: PUSH
27776: LD_VAR 0 1
27780: PPUSH
27781: CALL_OW 251
27785: PPUSH
27786: LD_VAR 0 4
27790: PPUSH
27791: LD_INT 3
27793: PPUSH
27794: LD_INT 12
27796: PPUSH
27797: CALL_OW 12
27801: PPUSH
27802: CALL_OW 273
27806: ST_TO_ADDR
// if ValidHex ( x , y ) then
27807: LD_VAR 0 2
27811: PPUSH
27812: LD_VAR 0 3
27816: PPUSH
27817: CALL_OW 488
27821: IFFALSE 27856
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27823: LD_VAR 0 1
27827: PPUSH
27828: LD_VAR 0 2
27832: PPUSH
27833: LD_VAR 0 3
27837: PPUSH
27838: LD_INT 3
27840: PPUSH
27841: LD_INT 6
27843: PPUSH
27844: CALL_OW 12
27848: PPUSH
27849: LD_INT 1
27851: PPUSH
27852: CALL_OW 483
// end ;
27856: GO 27716
27858: POP
27859: POP
// end ;
27860: PPOPN 5
27862: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27863: LD_EXP 63
27867: PUSH
27868: LD_EXP 98
27872: AND
27873: IFFALSE 27967
27875: GO 27877
27877: DISABLE
27878: LD_INT 0
27880: PPUSH
27881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27882: LD_ADDR_VAR 0 2
27886: PUSH
27887: LD_INT 22
27889: PUSH
27890: LD_OWVAR 2
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 32
27901: PUSH
27902: LD_INT 1
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 21
27911: PUSH
27912: LD_INT 2
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: PPUSH
27924: CALL_OW 69
27928: ST_TO_ADDR
// if not tmp then
27929: LD_VAR 0 2
27933: NOT
27934: IFFALSE 27938
// exit ;
27936: GO 27967
// for i in tmp do
27938: LD_ADDR_VAR 0 1
27942: PUSH
27943: LD_VAR 0 2
27947: PUSH
27948: FOR_IN
27949: IFFALSE 27965
// SetFuel ( i , 0 ) ;
27951: LD_VAR 0 1
27955: PPUSH
27956: LD_INT 0
27958: PPUSH
27959: CALL_OW 240
27963: GO 27948
27965: POP
27966: POP
// end ;
27967: PPOPN 2
27969: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27970: LD_EXP 63
27974: PUSH
27975: LD_EXP 99
27979: AND
27980: IFFALSE 28046
27982: GO 27984
27984: DISABLE
27985: LD_INT 0
27987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27988: LD_ADDR_VAR 0 1
27992: PUSH
27993: LD_INT 22
27995: PUSH
27996: LD_OWVAR 2
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 30
28007: PUSH
28008: LD_INT 29
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PPUSH
28019: CALL_OW 69
28023: ST_TO_ADDR
// if not tmp then
28024: LD_VAR 0 1
28028: NOT
28029: IFFALSE 28033
// exit ;
28031: GO 28046
// DestroyUnit ( tmp [ 1 ] ) ;
28033: LD_VAR 0 1
28037: PUSH
28038: LD_INT 1
28040: ARRAY
28041: PPUSH
28042: CALL_OW 65
// end ;
28046: PPOPN 1
28048: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28049: LD_EXP 63
28053: PUSH
28054: LD_EXP 101
28058: AND
28059: IFFALSE 28188
28061: GO 28063
28063: DISABLE
28064: LD_INT 0
28066: PPUSH
// begin uc_side := 0 ;
28067: LD_ADDR_OWVAR 20
28071: PUSH
28072: LD_INT 0
28074: ST_TO_ADDR
// uc_nation := nation_arabian ;
28075: LD_ADDR_OWVAR 21
28079: PUSH
28080: LD_INT 2
28082: ST_TO_ADDR
// hc_gallery :=  ;
28083: LD_ADDR_OWVAR 33
28087: PUSH
28088: LD_STRING 
28090: ST_TO_ADDR
// hc_name :=  ;
28091: LD_ADDR_OWVAR 26
28095: PUSH
28096: LD_STRING 
28098: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28099: LD_INT 1
28101: PPUSH
28102: LD_INT 11
28104: PPUSH
28105: LD_INT 10
28107: PPUSH
28108: CALL_OW 380
// un := CreateHuman ;
28112: LD_ADDR_VAR 0 1
28116: PUSH
28117: CALL_OW 44
28121: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28122: LD_VAR 0 1
28126: PPUSH
28127: LD_INT 1
28129: PPUSH
28130: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28134: LD_INT 35
28136: PPUSH
28137: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28141: LD_VAR 0 1
28145: PPUSH
28146: LD_INT 22
28148: PUSH
28149: LD_OWVAR 2
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PPUSH
28158: CALL_OW 69
28162: PPUSH
28163: LD_VAR 0 1
28167: PPUSH
28168: CALL_OW 74
28172: PPUSH
28173: CALL_OW 115
// until IsDead ( un ) ;
28177: LD_VAR 0 1
28181: PPUSH
28182: CALL_OW 301
28186: IFFALSE 28134
// end ;
28188: PPOPN 1
28190: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28191: LD_EXP 63
28195: PUSH
28196: LD_EXP 103
28200: AND
28201: IFFALSE 28213
28203: GO 28205
28205: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28206: LD_STRING earthquake(getX(game), 0, 32)
28208: PPUSH
28209: CALL_OW 559
28213: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28214: LD_EXP 63
28218: PUSH
28219: LD_EXP 104
28223: AND
28224: IFFALSE 28315
28226: GO 28228
28228: DISABLE
28229: LD_INT 0
28231: PPUSH
// begin enable ;
28232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28233: LD_ADDR_VAR 0 1
28237: PUSH
28238: LD_INT 22
28240: PUSH
28241: LD_OWVAR 2
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 21
28252: PUSH
28253: LD_INT 2
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 33
28262: PUSH
28263: LD_INT 3
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: LIST
28274: PPUSH
28275: CALL_OW 69
28279: ST_TO_ADDR
// if not tmp then
28280: LD_VAR 0 1
28284: NOT
28285: IFFALSE 28289
// exit ;
28287: GO 28315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28289: LD_VAR 0 1
28293: PUSH
28294: LD_INT 1
28296: PPUSH
28297: LD_VAR 0 1
28301: PPUSH
28302: CALL_OW 12
28306: ARRAY
28307: PPUSH
28308: LD_INT 1
28310: PPUSH
28311: CALL_OW 234
// end ;
28315: PPOPN 1
28317: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28318: LD_EXP 63
28322: PUSH
28323: LD_EXP 105
28327: AND
28328: IFFALSE 28469
28330: GO 28332
28332: DISABLE
28333: LD_INT 0
28335: PPUSH
28336: PPUSH
28337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28338: LD_ADDR_VAR 0 3
28342: PUSH
28343: LD_INT 22
28345: PUSH
28346: LD_OWVAR 2
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 25
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PPUSH
28369: CALL_OW 69
28373: ST_TO_ADDR
// if not tmp then
28374: LD_VAR 0 3
28378: NOT
28379: IFFALSE 28383
// exit ;
28381: GO 28469
// un := tmp [ rand ( 1 , tmp ) ] ;
28383: LD_ADDR_VAR 0 2
28387: PUSH
28388: LD_VAR 0 3
28392: PUSH
28393: LD_INT 1
28395: PPUSH
28396: LD_VAR 0 3
28400: PPUSH
28401: CALL_OW 12
28405: ARRAY
28406: ST_TO_ADDR
// if Crawls ( un ) then
28407: LD_VAR 0 2
28411: PPUSH
28412: CALL_OW 318
28416: IFFALSE 28427
// ComWalk ( un ) ;
28418: LD_VAR 0 2
28422: PPUSH
28423: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28427: LD_VAR 0 2
28431: PPUSH
28432: LD_INT 9
28434: PPUSH
28435: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28439: LD_INT 28
28441: PPUSH
28442: LD_OWVAR 2
28446: PPUSH
28447: LD_INT 2
28449: PPUSH
28450: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28454: LD_INT 29
28456: PPUSH
28457: LD_OWVAR 2
28461: PPUSH
28462: LD_INT 2
28464: PPUSH
28465: CALL_OW 322
// end ;
28469: PPOPN 3
28471: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28472: LD_EXP 63
28476: PUSH
28477: LD_EXP 106
28481: AND
28482: IFFALSE 28593
28484: GO 28486
28486: DISABLE
28487: LD_INT 0
28489: PPUSH
28490: PPUSH
28491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28492: LD_ADDR_VAR 0 3
28496: PUSH
28497: LD_INT 22
28499: PUSH
28500: LD_OWVAR 2
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 25
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PPUSH
28523: CALL_OW 69
28527: ST_TO_ADDR
// if not tmp then
28528: LD_VAR 0 3
28532: NOT
28533: IFFALSE 28537
// exit ;
28535: GO 28593
// un := tmp [ rand ( 1 , tmp ) ] ;
28537: LD_ADDR_VAR 0 2
28541: PUSH
28542: LD_VAR 0 3
28546: PUSH
28547: LD_INT 1
28549: PPUSH
28550: LD_VAR 0 3
28554: PPUSH
28555: CALL_OW 12
28559: ARRAY
28560: ST_TO_ADDR
// if Crawls ( un ) then
28561: LD_VAR 0 2
28565: PPUSH
28566: CALL_OW 318
28570: IFFALSE 28581
// ComWalk ( un ) ;
28572: LD_VAR 0 2
28576: PPUSH
28577: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28581: LD_VAR 0 2
28585: PPUSH
28586: LD_INT 8
28588: PPUSH
28589: CALL_OW 336
// end ;
28593: PPOPN 3
28595: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28596: LD_EXP 63
28600: PUSH
28601: LD_EXP 107
28605: AND
28606: IFFALSE 28750
28608: GO 28610
28610: DISABLE
28611: LD_INT 0
28613: PPUSH
28614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28615: LD_ADDR_VAR 0 2
28619: PUSH
28620: LD_INT 22
28622: PUSH
28623: LD_OWVAR 2
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 21
28634: PUSH
28635: LD_INT 2
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 2
28644: PUSH
28645: LD_INT 34
28647: PUSH
28648: LD_INT 12
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 34
28657: PUSH
28658: LD_INT 51
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 34
28667: PUSH
28668: LD_INT 32
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: LIST
28685: PPUSH
28686: CALL_OW 69
28690: ST_TO_ADDR
// if not tmp then
28691: LD_VAR 0 2
28695: NOT
28696: IFFALSE 28700
// exit ;
28698: GO 28750
// for i in tmp do
28700: LD_ADDR_VAR 0 1
28704: PUSH
28705: LD_VAR 0 2
28709: PUSH
28710: FOR_IN
28711: IFFALSE 28748
// if GetCargo ( i , mat_artifact ) = 0 then
28713: LD_VAR 0 1
28717: PPUSH
28718: LD_INT 4
28720: PPUSH
28721: CALL_OW 289
28725: PUSH
28726: LD_INT 0
28728: EQUAL
28729: IFFALSE 28746
// SetCargo ( i , mat_siberit , 100 ) ;
28731: LD_VAR 0 1
28735: PPUSH
28736: LD_INT 3
28738: PPUSH
28739: LD_INT 100
28741: PPUSH
28742: CALL_OW 290
28746: GO 28710
28748: POP
28749: POP
// end ;
28750: PPOPN 2
28752: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28753: LD_EXP 63
28757: PUSH
28758: LD_EXP 108
28762: AND
28763: IFFALSE 28946
28765: GO 28767
28767: DISABLE
28768: LD_INT 0
28770: PPUSH
28771: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28772: LD_ADDR_VAR 0 2
28776: PUSH
28777: LD_INT 22
28779: PUSH
28780: LD_OWVAR 2
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PPUSH
28789: CALL_OW 69
28793: ST_TO_ADDR
// if not tmp then
28794: LD_VAR 0 2
28798: NOT
28799: IFFALSE 28803
// exit ;
28801: GO 28946
// for i := 1 to 2 do
28803: LD_ADDR_VAR 0 1
28807: PUSH
28808: DOUBLE
28809: LD_INT 1
28811: DEC
28812: ST_TO_ADDR
28813: LD_INT 2
28815: PUSH
28816: FOR_TO
28817: IFFALSE 28944
// begin uc_side := your_side ;
28819: LD_ADDR_OWVAR 20
28823: PUSH
28824: LD_OWVAR 2
28828: ST_TO_ADDR
// uc_nation := nation_american ;
28829: LD_ADDR_OWVAR 21
28833: PUSH
28834: LD_INT 1
28836: ST_TO_ADDR
// vc_chassis := us_morphling ;
28837: LD_ADDR_OWVAR 37
28841: PUSH
28842: LD_INT 5
28844: ST_TO_ADDR
// vc_engine := engine_siberite ;
28845: LD_ADDR_OWVAR 39
28849: PUSH
28850: LD_INT 3
28852: ST_TO_ADDR
// vc_control := control_computer ;
28853: LD_ADDR_OWVAR 38
28857: PUSH
28858: LD_INT 3
28860: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28861: LD_ADDR_OWVAR 40
28865: PUSH
28866: LD_INT 10
28868: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28869: LD_VAR 0 2
28873: PUSH
28874: LD_INT 1
28876: ARRAY
28877: PPUSH
28878: CALL_OW 310
28882: NOT
28883: IFFALSE 28930
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28885: CALL_OW 45
28889: PPUSH
28890: LD_VAR 0 2
28894: PUSH
28895: LD_INT 1
28897: ARRAY
28898: PPUSH
28899: CALL_OW 250
28903: PPUSH
28904: LD_VAR 0 2
28908: PUSH
28909: LD_INT 1
28911: ARRAY
28912: PPUSH
28913: CALL_OW 251
28917: PPUSH
28918: LD_INT 12
28920: PPUSH
28921: LD_INT 1
28923: PPUSH
28924: CALL_OW 50
28928: GO 28942
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28930: CALL_OW 45
28934: PPUSH
28935: LD_INT 1
28937: PPUSH
28938: CALL_OW 51
// end ;
28942: GO 28816
28944: POP
28945: POP
// end ;
28946: PPOPN 2
28948: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28949: LD_EXP 63
28953: PUSH
28954: LD_EXP 109
28958: AND
28959: IFFALSE 29181
28961: GO 28963
28963: DISABLE
28964: LD_INT 0
28966: PPUSH
28967: PPUSH
28968: PPUSH
28969: PPUSH
28970: PPUSH
28971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28972: LD_ADDR_VAR 0 6
28976: PUSH
28977: LD_INT 22
28979: PUSH
28980: LD_OWVAR 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 21
28991: PUSH
28992: LD_INT 1
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 3
29001: PUSH
29002: LD_INT 23
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: LIST
29020: PPUSH
29021: CALL_OW 69
29025: ST_TO_ADDR
// if not tmp then
29026: LD_VAR 0 6
29030: NOT
29031: IFFALSE 29035
// exit ;
29033: GO 29181
// s1 := rand ( 1 , 4 ) ;
29035: LD_ADDR_VAR 0 2
29039: PUSH
29040: LD_INT 1
29042: PPUSH
29043: LD_INT 4
29045: PPUSH
29046: CALL_OW 12
29050: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29051: LD_ADDR_VAR 0 4
29055: PUSH
29056: LD_VAR 0 6
29060: PUSH
29061: LD_INT 1
29063: ARRAY
29064: PPUSH
29065: LD_VAR 0 2
29069: PPUSH
29070: CALL_OW 259
29074: ST_TO_ADDR
// if s1 = 1 then
29075: LD_VAR 0 2
29079: PUSH
29080: LD_INT 1
29082: EQUAL
29083: IFFALSE 29103
// s2 := rand ( 2 , 4 ) else
29085: LD_ADDR_VAR 0 3
29089: PUSH
29090: LD_INT 2
29092: PPUSH
29093: LD_INT 4
29095: PPUSH
29096: CALL_OW 12
29100: ST_TO_ADDR
29101: GO 29111
// s2 := 1 ;
29103: LD_ADDR_VAR 0 3
29107: PUSH
29108: LD_INT 1
29110: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29111: LD_ADDR_VAR 0 5
29115: PUSH
29116: LD_VAR 0 6
29120: PUSH
29121: LD_INT 1
29123: ARRAY
29124: PPUSH
29125: LD_VAR 0 3
29129: PPUSH
29130: CALL_OW 259
29134: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29135: LD_VAR 0 6
29139: PUSH
29140: LD_INT 1
29142: ARRAY
29143: PPUSH
29144: LD_VAR 0 2
29148: PPUSH
29149: LD_VAR 0 5
29153: PPUSH
29154: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29158: LD_VAR 0 6
29162: PUSH
29163: LD_INT 1
29165: ARRAY
29166: PPUSH
29167: LD_VAR 0 3
29171: PPUSH
29172: LD_VAR 0 4
29176: PPUSH
29177: CALL_OW 237
// end ;
29181: PPOPN 6
29183: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29184: LD_EXP 63
29188: PUSH
29189: LD_EXP 110
29193: AND
29194: IFFALSE 29273
29196: GO 29198
29198: DISABLE
29199: LD_INT 0
29201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29202: LD_ADDR_VAR 0 1
29206: PUSH
29207: LD_INT 22
29209: PUSH
29210: LD_OWVAR 2
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 30
29221: PUSH
29222: LD_INT 3
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PPUSH
29233: CALL_OW 69
29237: ST_TO_ADDR
// if not tmp then
29238: LD_VAR 0 1
29242: NOT
29243: IFFALSE 29247
// exit ;
29245: GO 29273
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29247: LD_VAR 0 1
29251: PUSH
29252: LD_INT 1
29254: PPUSH
29255: LD_VAR 0 1
29259: PPUSH
29260: CALL_OW 12
29264: ARRAY
29265: PPUSH
29266: LD_INT 1
29268: PPUSH
29269: CALL_OW 234
// end ;
29273: PPOPN 1
29275: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29276: LD_EXP 63
29280: PUSH
29281: LD_EXP 111
29285: AND
29286: IFFALSE 29398
29288: GO 29290
29290: DISABLE
29291: LD_INT 0
29293: PPUSH
29294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29295: LD_ADDR_VAR 0 2
29299: PUSH
29300: LD_INT 22
29302: PUSH
29303: LD_OWVAR 2
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 2
29314: PUSH
29315: LD_INT 30
29317: PUSH
29318: LD_INT 27
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 30
29327: PUSH
29328: LD_INT 26
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 30
29337: PUSH
29338: LD_INT 28
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PPUSH
29355: CALL_OW 69
29359: ST_TO_ADDR
// if not tmp then
29360: LD_VAR 0 2
29364: NOT
29365: IFFALSE 29369
// exit ;
29367: GO 29398
// for i in tmp do
29369: LD_ADDR_VAR 0 1
29373: PUSH
29374: LD_VAR 0 2
29378: PUSH
29379: FOR_IN
29380: IFFALSE 29396
// SetLives ( i , 1 ) ;
29382: LD_VAR 0 1
29386: PPUSH
29387: LD_INT 1
29389: PPUSH
29390: CALL_OW 234
29394: GO 29379
29396: POP
29397: POP
// end ;
29398: PPOPN 2
29400: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29401: LD_EXP 63
29405: PUSH
29406: LD_EXP 112
29410: AND
29411: IFFALSE 29685
29413: GO 29415
29415: DISABLE
29416: LD_INT 0
29418: PPUSH
29419: PPUSH
29420: PPUSH
// begin i := rand ( 1 , 7 ) ;
29421: LD_ADDR_VAR 0 1
29425: PUSH
29426: LD_INT 1
29428: PPUSH
29429: LD_INT 7
29431: PPUSH
29432: CALL_OW 12
29436: ST_TO_ADDR
// case i of 1 :
29437: LD_VAR 0 1
29441: PUSH
29442: LD_INT 1
29444: DOUBLE
29445: EQUAL
29446: IFTRUE 29450
29448: GO 29460
29450: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29451: LD_STRING earthquake(getX(game), 0, 32)
29453: PPUSH
29454: CALL_OW 559
29458: GO 29685
29460: LD_INT 2
29462: DOUBLE
29463: EQUAL
29464: IFTRUE 29468
29466: GO 29482
29468: POP
// begin ToLua ( displayStucuk(); ) ;
29469: LD_STRING displayStucuk();
29471: PPUSH
29472: CALL_OW 559
// ResetFog ;
29476: CALL_OW 335
// end ; 3 :
29480: GO 29685
29482: LD_INT 3
29484: DOUBLE
29485: EQUAL
29486: IFTRUE 29490
29488: GO 29594
29490: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29491: LD_ADDR_VAR 0 2
29495: PUSH
29496: LD_INT 22
29498: PUSH
29499: LD_OWVAR 2
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 25
29510: PUSH
29511: LD_INT 1
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PPUSH
29522: CALL_OW 69
29526: ST_TO_ADDR
// if not tmp then
29527: LD_VAR 0 2
29531: NOT
29532: IFFALSE 29536
// exit ;
29534: GO 29685
// un := tmp [ rand ( 1 , tmp ) ] ;
29536: LD_ADDR_VAR 0 3
29540: PUSH
29541: LD_VAR 0 2
29545: PUSH
29546: LD_INT 1
29548: PPUSH
29549: LD_VAR 0 2
29553: PPUSH
29554: CALL_OW 12
29558: ARRAY
29559: ST_TO_ADDR
// if Crawls ( un ) then
29560: LD_VAR 0 3
29564: PPUSH
29565: CALL_OW 318
29569: IFFALSE 29580
// ComWalk ( un ) ;
29571: LD_VAR 0 3
29575: PPUSH
29576: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29580: LD_VAR 0 3
29584: PPUSH
29585: LD_INT 8
29587: PPUSH
29588: CALL_OW 336
// end ; 4 :
29592: GO 29685
29594: LD_INT 4
29596: DOUBLE
29597: EQUAL
29598: IFTRUE 29602
29600: GO 29663
29602: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29603: LD_ADDR_VAR 0 2
29607: PUSH
29608: LD_INT 22
29610: PUSH
29611: LD_OWVAR 2
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 30
29622: PUSH
29623: LD_INT 29
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PPUSH
29634: CALL_OW 69
29638: ST_TO_ADDR
// if not tmp then
29639: LD_VAR 0 2
29643: NOT
29644: IFFALSE 29648
// exit ;
29646: GO 29685
// DestroyUnit ( tmp [ 1 ] ) ;
29648: LD_VAR 0 2
29652: PUSH
29653: LD_INT 1
29655: ARRAY
29656: PPUSH
29657: CALL_OW 65
// end ; 5 .. 7 :
29661: GO 29685
29663: LD_INT 5
29665: DOUBLE
29666: GREATEREQUAL
29667: IFFALSE 29675
29669: LD_INT 7
29671: DOUBLE
29672: LESSEQUAL
29673: IFTRUE 29677
29675: GO 29684
29677: POP
// StreamSibBomb ; end ;
29678: CALL 25935 0 0
29682: GO 29685
29684: POP
// end ;
29685: PPOPN 3
29687: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29688: LD_EXP 63
29692: PUSH
29693: LD_EXP 113
29697: AND
29698: IFFALSE 29854
29700: GO 29702
29702: DISABLE
29703: LD_INT 0
29705: PPUSH
29706: PPUSH
29707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29708: LD_ADDR_VAR 0 2
29712: PUSH
29713: LD_INT 81
29715: PUSH
29716: LD_OWVAR 2
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: LD_INT 21
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 21
29740: PUSH
29741: LD_INT 2
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: LIST
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PPUSH
29757: CALL_OW 69
29761: ST_TO_ADDR
// if not tmp then
29762: LD_VAR 0 2
29766: NOT
29767: IFFALSE 29771
// exit ;
29769: GO 29854
// p := 0 ;
29771: LD_ADDR_VAR 0 3
29775: PUSH
29776: LD_INT 0
29778: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29779: LD_INT 35
29781: PPUSH
29782: CALL_OW 67
// p := p + 1 ;
29786: LD_ADDR_VAR 0 3
29790: PUSH
29791: LD_VAR 0 3
29795: PUSH
29796: LD_INT 1
29798: PLUS
29799: ST_TO_ADDR
// for i in tmp do
29800: LD_ADDR_VAR 0 1
29804: PUSH
29805: LD_VAR 0 2
29809: PUSH
29810: FOR_IN
29811: IFFALSE 29842
// if GetLives ( i ) < 1000 then
29813: LD_VAR 0 1
29817: PPUSH
29818: CALL_OW 256
29822: PUSH
29823: LD_INT 1000
29825: LESS
29826: IFFALSE 29840
// SetLives ( i , 1000 ) ;
29828: LD_VAR 0 1
29832: PPUSH
29833: LD_INT 1000
29835: PPUSH
29836: CALL_OW 234
29840: GO 29810
29842: POP
29843: POP
// until p > 20 ;
29844: LD_VAR 0 3
29848: PUSH
29849: LD_INT 20
29851: GREATER
29852: IFFALSE 29779
// end ;
29854: PPOPN 3
29856: END
// every 0 0$1 trigger StreamModeActive and sTime do
29857: LD_EXP 63
29861: PUSH
29862: LD_EXP 114
29866: AND
29867: IFFALSE 29902
29869: GO 29871
29871: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29872: LD_INT 28
29874: PPUSH
29875: LD_OWVAR 2
29879: PPUSH
29880: LD_INT 2
29882: PPUSH
29883: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29887: LD_INT 30
29889: PPUSH
29890: LD_OWVAR 2
29894: PPUSH
29895: LD_INT 2
29897: PPUSH
29898: CALL_OW 322
// end ;
29902: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29903: LD_EXP 63
29907: PUSH
29908: LD_EXP 115
29912: AND
29913: IFFALSE 30034
29915: GO 29917
29917: DISABLE
29918: LD_INT 0
29920: PPUSH
29921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29922: LD_ADDR_VAR 0 2
29926: PUSH
29927: LD_INT 22
29929: PUSH
29930: LD_OWVAR 2
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 21
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 3
29951: PUSH
29952: LD_INT 23
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: PPUSH
29971: CALL_OW 69
29975: ST_TO_ADDR
// if not tmp then
29976: LD_VAR 0 2
29980: NOT
29981: IFFALSE 29985
// exit ;
29983: GO 30034
// for i in tmp do
29985: LD_ADDR_VAR 0 1
29989: PUSH
29990: LD_VAR 0 2
29994: PUSH
29995: FOR_IN
29996: IFFALSE 30032
// begin if Crawls ( i ) then
29998: LD_VAR 0 1
30002: PPUSH
30003: CALL_OW 318
30007: IFFALSE 30018
// ComWalk ( i ) ;
30009: LD_VAR 0 1
30013: PPUSH
30014: CALL_OW 138
// SetClass ( i , 2 ) ;
30018: LD_VAR 0 1
30022: PPUSH
30023: LD_INT 2
30025: PPUSH
30026: CALL_OW 336
// end ;
30030: GO 29995
30032: POP
30033: POP
// end ;
30034: PPOPN 2
30036: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30037: LD_EXP 63
30041: PUSH
30042: LD_EXP 116
30046: AND
30047: IFFALSE 30328
30049: GO 30051
30051: DISABLE
30052: LD_INT 0
30054: PPUSH
30055: PPUSH
30056: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30057: LD_OWVAR 2
30061: PPUSH
30062: LD_INT 9
30064: PPUSH
30065: LD_INT 1
30067: PPUSH
30068: LD_INT 1
30070: PPUSH
30071: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30075: LD_INT 9
30077: PPUSH
30078: LD_OWVAR 2
30082: PPUSH
30083: CALL_OW 343
// uc_side := 9 ;
30087: LD_ADDR_OWVAR 20
30091: PUSH
30092: LD_INT 9
30094: ST_TO_ADDR
// uc_nation := 2 ;
30095: LD_ADDR_OWVAR 21
30099: PUSH
30100: LD_INT 2
30102: ST_TO_ADDR
// hc_name := Dark Warrior ;
30103: LD_ADDR_OWVAR 26
30107: PUSH
30108: LD_STRING Dark Warrior
30110: ST_TO_ADDR
// hc_gallery :=  ;
30111: LD_ADDR_OWVAR 33
30115: PUSH
30116: LD_STRING 
30118: ST_TO_ADDR
// hc_noskilllimit := true ;
30119: LD_ADDR_OWVAR 76
30123: PUSH
30124: LD_INT 1
30126: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30127: LD_ADDR_OWVAR 31
30131: PUSH
30132: LD_INT 30
30134: PUSH
30135: LD_INT 30
30137: PUSH
30138: LD_INT 30
30140: PUSH
30141: LD_INT 30
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: ST_TO_ADDR
// un := CreateHuman ;
30150: LD_ADDR_VAR 0 3
30154: PUSH
30155: CALL_OW 44
30159: ST_TO_ADDR
// hc_noskilllimit := false ;
30160: LD_ADDR_OWVAR 76
30164: PUSH
30165: LD_INT 0
30167: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30168: LD_VAR 0 3
30172: PPUSH
30173: LD_INT 1
30175: PPUSH
30176: CALL_OW 51
// p := 0 ;
30180: LD_ADDR_VAR 0 2
30184: PUSH
30185: LD_INT 0
30187: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30188: LD_INT 35
30190: PPUSH
30191: CALL_OW 67
// p := p + 1 ;
30195: LD_ADDR_VAR 0 2
30199: PUSH
30200: LD_VAR 0 2
30204: PUSH
30205: LD_INT 1
30207: PLUS
30208: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30209: LD_VAR 0 3
30213: PPUSH
30214: CALL_OW 256
30218: PUSH
30219: LD_INT 1000
30221: LESS
30222: IFFALSE 30236
// SetLives ( un , 1000 ) ;
30224: LD_VAR 0 3
30228: PPUSH
30229: LD_INT 1000
30231: PPUSH
30232: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30236: LD_VAR 0 3
30240: PPUSH
30241: LD_INT 81
30243: PUSH
30244: LD_OWVAR 2
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 91
30255: PUSH
30256: LD_VAR 0 3
30260: PUSH
30261: LD_INT 30
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PPUSH
30273: CALL_OW 69
30277: PPUSH
30278: LD_VAR 0 3
30282: PPUSH
30283: CALL_OW 74
30287: PPUSH
30288: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30292: LD_VAR 0 2
30296: PUSH
30297: LD_INT 60
30299: GREATER
30300: PUSH
30301: LD_VAR 0 3
30305: PPUSH
30306: CALL_OW 301
30310: OR
30311: IFFALSE 30188
// if un then
30313: LD_VAR 0 3
30317: IFFALSE 30328
// RemoveUnit ( un ) ;
30319: LD_VAR 0 3
30323: PPUSH
30324: CALL_OW 64
// end ;
30328: PPOPN 3
30330: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30331: LD_INT 0
30333: PPUSH
30334: PPUSH
30335: PPUSH
30336: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30337: LD_ADDR_VAR 0 4
30341: PUSH
30342: LD_INT 22
30344: PUSH
30345: LD_OWVAR 2
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: LD_INT 30
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 30
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: LIST
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PPUSH
30386: CALL_OW 69
30390: ST_TO_ADDR
// if not tmp then
30391: LD_VAR 0 4
30395: NOT
30396: IFFALSE 30400
// exit ;
30398: GO 30459
// for i in tmp do
30400: LD_ADDR_VAR 0 2
30404: PUSH
30405: LD_VAR 0 4
30409: PUSH
30410: FOR_IN
30411: IFFALSE 30457
// for j = 1 to 3 do
30413: LD_ADDR_VAR 0 3
30417: PUSH
30418: DOUBLE
30419: LD_INT 1
30421: DEC
30422: ST_TO_ADDR
30423: LD_INT 3
30425: PUSH
30426: FOR_TO
30427: IFFALSE 30453
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30429: LD_VAR 0 2
30433: PPUSH
30434: CALL_OW 274
30438: PPUSH
30439: LD_VAR 0 3
30443: PPUSH
30444: LD_INT 99999
30446: PPUSH
30447: CALL_OW 277
30451: GO 30426
30453: POP
30454: POP
30455: GO 30410
30457: POP
30458: POP
// end ;
30459: LD_VAR 0 1
30463: RET
// export function hHackSetLevel10 ; var i , j ; begin
30464: LD_INT 0
30466: PPUSH
30467: PPUSH
30468: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30469: LD_ADDR_VAR 0 2
30473: PUSH
30474: LD_INT 21
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PPUSH
30484: CALL_OW 69
30488: PUSH
30489: FOR_IN
30490: IFFALSE 30542
// if IsSelected ( i ) then
30492: LD_VAR 0 2
30496: PPUSH
30497: CALL_OW 306
30501: IFFALSE 30540
// begin for j := 1 to 4 do
30503: LD_ADDR_VAR 0 3
30507: PUSH
30508: DOUBLE
30509: LD_INT 1
30511: DEC
30512: ST_TO_ADDR
30513: LD_INT 4
30515: PUSH
30516: FOR_TO
30517: IFFALSE 30538
// SetSkill ( i , j , 10 ) ;
30519: LD_VAR 0 2
30523: PPUSH
30524: LD_VAR 0 3
30528: PPUSH
30529: LD_INT 10
30531: PPUSH
30532: CALL_OW 237
30536: GO 30516
30538: POP
30539: POP
// end ;
30540: GO 30489
30542: POP
30543: POP
// end ;
30544: LD_VAR 0 1
30548: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30549: LD_INT 0
30551: PPUSH
30552: PPUSH
30553: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30554: LD_ADDR_VAR 0 2
30558: PUSH
30559: LD_INT 22
30561: PUSH
30562: LD_OWVAR 2
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 21
30573: PUSH
30574: LD_INT 1
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PPUSH
30585: CALL_OW 69
30589: PUSH
30590: FOR_IN
30591: IFFALSE 30632
// begin for j := 1 to 4 do
30593: LD_ADDR_VAR 0 3
30597: PUSH
30598: DOUBLE
30599: LD_INT 1
30601: DEC
30602: ST_TO_ADDR
30603: LD_INT 4
30605: PUSH
30606: FOR_TO
30607: IFFALSE 30628
// SetSkill ( i , j , 10 ) ;
30609: LD_VAR 0 2
30613: PPUSH
30614: LD_VAR 0 3
30618: PPUSH
30619: LD_INT 10
30621: PPUSH
30622: CALL_OW 237
30626: GO 30606
30628: POP
30629: POP
// end ;
30630: GO 30590
30632: POP
30633: POP
// end ;
30634: LD_VAR 0 1
30638: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
30639: LD_INT 0
30641: PPUSH
// uc_side := your_side ;
30642: LD_ADDR_OWVAR 20
30646: PUSH
30647: LD_OWVAR 2
30651: ST_TO_ADDR
// uc_nation := nation ;
30652: LD_ADDR_OWVAR 21
30656: PUSH
30657: LD_VAR 0 1
30661: ST_TO_ADDR
// InitHc ;
30662: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30666: LD_INT 0
30668: PPUSH
30669: LD_VAR 0 2
30673: PPUSH
30674: LD_VAR 0 3
30678: PPUSH
30679: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
30683: CALL_OW 44
30687: PPUSH
30688: LD_INT 1
30690: PPUSH
30691: CALL_OW 51
// end ;
30695: LD_VAR 0 4
30699: RET
// export function hHackSpawnVehicle ; begin
30700: LD_INT 0
30702: PPUSH
// uc_side := your_side ;
30703: LD_ADDR_OWVAR 20
30707: PUSH
30708: LD_OWVAR 2
30712: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
30713: LD_ADDR_OWVAR 21
30717: PUSH
30718: LD_INT 1
30720: PPUSH
30721: LD_INT 3
30723: PPUSH
30724: CALL_OW 12
30728: ST_TO_ADDR
// InitVc ;
30729: CALL_OW 20
// case uc_nation of 1 :
30733: LD_OWVAR 21
30737: PUSH
30738: LD_INT 1
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30890
30746: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
30747: LD_ADDR_OWVAR 37
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: LD_INT 2
30757: PUSH
30758: LD_INT 3
30760: PUSH
30761: LD_INT 4
30763: PUSH
30764: LD_INT 5
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 1
30776: PPUSH
30777: LD_INT 5
30779: PPUSH
30780: CALL_OW 12
30784: ARRAY
30785: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30786: LD_ADDR_OWVAR 39
30790: PUSH
30791: LD_INT 1
30793: PPUSH
30794: LD_INT 3
30796: PPUSH
30797: CALL_OW 12
30801: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
30802: LD_ADDR_OWVAR 38
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: LD_INT 2
30812: PUSH
30813: LD_INT 3
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: PPUSH
30824: LD_INT 3
30826: PPUSH
30827: CALL_OW 12
30831: ARRAY
30832: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
30833: LD_ADDR_OWVAR 40
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: LD_INT 4
30843: PUSH
30844: LD_INT 5
30846: PUSH
30847: LD_INT 3
30849: PUSH
30850: LD_INT 7
30852: PUSH
30853: LD_INT 8
30855: PUSH
30856: LD_INT 9
30858: PUSH
30859: LD_INT 10
30861: PUSH
30862: LD_INT 6
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 1
30878: PPUSH
30879: LD_INT 9
30881: PPUSH
30882: CALL_OW 12
30886: ARRAY
30887: ST_TO_ADDR
// end ; 2 :
30888: GO 31155
30890: LD_INT 2
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30898
30896: GO 31022
30898: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
30899: LD_ADDR_OWVAR 37
30903: PUSH
30904: LD_INT 11
30906: PUSH
30907: LD_INT 12
30909: PUSH
30910: LD_INT 13
30912: PUSH
30913: LD_INT 14
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 1
30924: PPUSH
30925: LD_INT 4
30927: PPUSH
30928: CALL_OW 12
30932: ARRAY
30933: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30934: LD_ADDR_OWVAR 39
30938: PUSH
30939: LD_INT 1
30941: PPUSH
30942: LD_INT 3
30944: PPUSH
30945: CALL_OW 12
30949: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
30950: LD_ADDR_OWVAR 38
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: LD_INT 2
30960: PUSH
30961: LD_INT 5
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 1
30971: PPUSH
30972: LD_INT 3
30974: PPUSH
30975: CALL_OW 12
30979: ARRAY
30980: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
30981: LD_ADDR_OWVAR 40
30985: PUSH
30986: LD_INT 24
30988: PUSH
30989: LD_INT 26
30991: PUSH
30992: LD_INT 27
30994: PUSH
30995: LD_INT 28
30997: PUSH
30998: LD_INT 29
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: PPUSH
31011: LD_INT 5
31013: PPUSH
31014: CALL_OW 12
31018: ARRAY
31019: ST_TO_ADDR
// end ; 3 :
31020: GO 31155
31022: LD_INT 3
31024: DOUBLE
31025: EQUAL
31026: IFTRUE 31030
31028: GO 31154
31030: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
31031: LD_ADDR_OWVAR 37
31035: PUSH
31036: LD_INT 21
31038: PUSH
31039: LD_INT 23
31041: PUSH
31042: LD_INT 22
31044: PUSH
31045: LD_INT 24
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: PPUSH
31057: LD_INT 4
31059: PPUSH
31060: CALL_OW 12
31064: ARRAY
31065: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
31066: LD_ADDR_OWVAR 39
31070: PUSH
31071: LD_INT 1
31073: PPUSH
31074: LD_INT 3
31076: PPUSH
31077: CALL_OW 12
31081: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
31082: LD_ADDR_OWVAR 38
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 3
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: PPUSH
31100: LD_INT 2
31102: PPUSH
31103: CALL_OW 12
31107: ARRAY
31108: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
31109: LD_ADDR_OWVAR 40
31113: PUSH
31114: LD_INT 42
31116: PUSH
31117: LD_INT 43
31119: PUSH
31120: LD_INT 44
31122: PUSH
31123: LD_INT 46
31125: PUSH
31126: LD_INT 48
31128: PUSH
31129: LD_INT 47
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: PPUSH
31143: LD_INT 6
31145: PPUSH
31146: CALL_OW 12
31150: ARRAY
31151: ST_TO_ADDR
// end ; end ;
31152: GO 31155
31154: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31155: CALL_OW 45
31159: PPUSH
31160: LD_INT 1
31162: PPUSH
31163: CALL_OW 51
// end ;
31167: LD_VAR 0 1
31171: RET
// export hInvincible ; every 1 do
31172: GO 31174
31174: DISABLE
// hInvincible := [ ] ;
31175: LD_ADDR_EXP 117
31179: PUSH
31180: EMPTY
31181: ST_TO_ADDR
31182: END
// every 10 do var i ;
31183: GO 31185
31185: DISABLE
31186: LD_INT 0
31188: PPUSH
// begin enable ;
31189: ENABLE
// if not hInvincible then
31190: LD_EXP 117
31194: NOT
31195: IFFALSE 31199
// exit ;
31197: GO 31243
// for i in hInvincible do
31199: LD_ADDR_VAR 0 1
31203: PUSH
31204: LD_EXP 117
31208: PUSH
31209: FOR_IN
31210: IFFALSE 31241
// if GetLives ( i ) < 1000 then
31212: LD_VAR 0 1
31216: PPUSH
31217: CALL_OW 256
31221: PUSH
31222: LD_INT 1000
31224: LESS
31225: IFFALSE 31239
// SetLives ( i , 1000 ) ;
31227: LD_VAR 0 1
31231: PPUSH
31232: LD_INT 1000
31234: PPUSH
31235: CALL_OW 234
31239: GO 31209
31241: POP
31242: POP
// end ;
31243: PPOPN 1
31245: END
// export function hHackInvincible ; var i ; begin
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31250: LD_ADDR_VAR 0 2
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: LD_INT 21
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 21
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: PPUSH
31283: CALL_OW 69
31287: PUSH
31288: FOR_IN
31289: IFFALSE 31350
// if IsSelected ( i ) then
31291: LD_VAR 0 2
31295: PPUSH
31296: CALL_OW 306
31300: IFFALSE 31348
// begin if i in hInvincible then
31302: LD_VAR 0 2
31306: PUSH
31307: LD_EXP 117
31311: IN
31312: IFFALSE 31332
// hInvincible := hInvincible diff i else
31314: LD_ADDR_EXP 117
31318: PUSH
31319: LD_EXP 117
31323: PUSH
31324: LD_VAR 0 2
31328: DIFF
31329: ST_TO_ADDR
31330: GO 31348
// hInvincible := hInvincible union i ;
31332: LD_ADDR_EXP 117
31336: PUSH
31337: LD_EXP 117
31341: PUSH
31342: LD_VAR 0 2
31346: UNION
31347: ST_TO_ADDR
// end ;
31348: GO 31288
31350: POP
31351: POP
// end ;
31352: LD_VAR 0 1
31356: RET
// export function hHackInvisible ; var i , j ; begin
31357: LD_INT 0
31359: PPUSH
31360: PPUSH
31361: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31362: LD_ADDR_VAR 0 2
31366: PUSH
31367: LD_INT 21
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PPUSH
31377: CALL_OW 69
31381: PUSH
31382: FOR_IN
31383: IFFALSE 31407
// if IsSelected ( i ) then
31385: LD_VAR 0 2
31389: PPUSH
31390: CALL_OW 306
31394: IFFALSE 31405
// ComForceInvisible ( i ) ;
31396: LD_VAR 0 2
31400: PPUSH
31401: CALL_OW 496
31405: GO 31382
31407: POP
31408: POP
// end ;
31409: LD_VAR 0 1
31413: RET
// export function hHackChangeYourSide ; begin
31414: LD_INT 0
31416: PPUSH
// if your_side = 8 then
31417: LD_OWVAR 2
31421: PUSH
31422: LD_INT 8
31424: EQUAL
31425: IFFALSE 31437
// your_side := 0 else
31427: LD_ADDR_OWVAR 2
31431: PUSH
31432: LD_INT 0
31434: ST_TO_ADDR
31435: GO 31451
// your_side := your_side + 1 ;
31437: LD_ADDR_OWVAR 2
31441: PUSH
31442: LD_OWVAR 2
31446: PUSH
31447: LD_INT 1
31449: PLUS
31450: ST_TO_ADDR
// end ;
31451: LD_VAR 0 1
31455: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31456: LD_INT 0
31458: PPUSH
31459: PPUSH
31460: PPUSH
// for i in all_units do
31461: LD_ADDR_VAR 0 2
31465: PUSH
31466: LD_OWVAR 3
31470: PUSH
31471: FOR_IN
31472: IFFALSE 31550
// if IsSelected ( i ) then
31474: LD_VAR 0 2
31478: PPUSH
31479: CALL_OW 306
31483: IFFALSE 31548
// begin j := GetSide ( i ) ;
31485: LD_ADDR_VAR 0 3
31489: PUSH
31490: LD_VAR 0 2
31494: PPUSH
31495: CALL_OW 255
31499: ST_TO_ADDR
// if j = 8 then
31500: LD_VAR 0 3
31504: PUSH
31505: LD_INT 8
31507: EQUAL
31508: IFFALSE 31520
// j := 0 else
31510: LD_ADDR_VAR 0 3
31514: PUSH
31515: LD_INT 0
31517: ST_TO_ADDR
31518: GO 31534
// j := j + 1 ;
31520: LD_ADDR_VAR 0 3
31524: PUSH
31525: LD_VAR 0 3
31529: PUSH
31530: LD_INT 1
31532: PLUS
31533: ST_TO_ADDR
// SetSide ( i , j ) ;
31534: LD_VAR 0 2
31538: PPUSH
31539: LD_VAR 0 3
31543: PPUSH
31544: CALL_OW 235
// end ;
31548: GO 31471
31550: POP
31551: POP
// end ;
31552: LD_VAR 0 1
31556: RET
// export function hHackFog ; begin
31557: LD_INT 0
31559: PPUSH
// FogOff ( true ) ;
31560: LD_INT 1
31562: PPUSH
31563: CALL_OW 344
// end ;
31567: LD_VAR 0 1
31571: RET
// export function hHackApeman ; begin
31572: LD_INT 0
31574: PPUSH
// uc_side := your_side ;
31575: LD_ADDR_OWVAR 20
31579: PUSH
31580: LD_OWVAR 2
31584: ST_TO_ADDR
// uc_nation := 0 ;
31585: LD_ADDR_OWVAR 21
31589: PUSH
31590: LD_INT 0
31592: ST_TO_ADDR
// hc_name :=  ;
31593: LD_ADDR_OWVAR 26
31597: PUSH
31598: LD_STRING 
31600: ST_TO_ADDR
// hc_gallery :=  ;
31601: LD_ADDR_OWVAR 33
31605: PUSH
31606: LD_STRING 
31608: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
31609: LD_ADDR_OWVAR 31
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: ST_TO_ADDR
// hc_class := class_apeman ;
31632: LD_ADDR_OWVAR 28
31636: PUSH
31637: LD_INT 12
31639: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
31640: CALL_OW 44
31644: PPUSH
31645: LD_INT 1
31647: PPUSH
31648: CALL_OW 51
// end ;
31652: LD_VAR 0 1
31656: RET
// export function hHackBoom ; begin
31657: LD_INT 0
31659: PPUSH
// uc_side := your_side ;
31660: LD_ADDR_OWVAR 20
31664: PUSH
31665: LD_OWVAR 2
31669: ST_TO_ADDR
// uc_nation := 1 ;
31670: LD_ADDR_OWVAR 21
31674: PUSH
31675: LD_INT 1
31677: ST_TO_ADDR
// vc_chassis := us_morphling ;
31678: LD_ADDR_OWVAR 37
31682: PUSH
31683: LD_INT 5
31685: ST_TO_ADDR
// vc_engine := engine_siberite ;
31686: LD_ADDR_OWVAR 39
31690: PUSH
31691: LD_INT 3
31693: ST_TO_ADDR
// vc_control := control_computer ;
31694: LD_ADDR_OWVAR 38
31698: PUSH
31699: LD_INT 3
31701: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
31702: LD_ADDR_OWVAR 40
31706: PUSH
31707: LD_INT 8
31709: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31710: CALL_OW 45
31714: PPUSH
31715: LD_INT 1
31717: PPUSH
31718: CALL_OW 51
// end ; end_of_file
31722: LD_VAR 0 1
31726: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31727: LD_INT 0
31729: PPUSH
31730: PPUSH
31731: PPUSH
31732: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31733: LD_VAR 0 1
31737: PPUSH
31738: CALL_OW 264
31742: PUSH
31743: LD_EXP 52
31747: EQUAL
31748: IFFALSE 31820
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31750: LD_INT 68
31752: PPUSH
31753: LD_VAR 0 1
31757: PPUSH
31758: CALL_OW 255
31762: PPUSH
31763: CALL_OW 321
31767: PUSH
31768: LD_INT 2
31770: EQUAL
31771: IFFALSE 31783
// eff := 70 else
31773: LD_ADDR_VAR 0 4
31777: PUSH
31778: LD_INT 70
31780: ST_TO_ADDR
31781: GO 31791
// eff := 30 ;
31783: LD_ADDR_VAR 0 4
31787: PUSH
31788: LD_INT 30
31790: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31791: LD_VAR 0 1
31795: PPUSH
31796: CALL_OW 250
31800: PPUSH
31801: LD_VAR 0 1
31805: PPUSH
31806: CALL_OW 251
31810: PPUSH
31811: LD_VAR 0 4
31815: PPUSH
31816: CALL_OW 495
// end ; end ;
31820: LD_VAR 0 2
31824: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31825: LD_INT 0
31827: PPUSH
// end ;
31828: LD_VAR 0 4
31832: RET
// export function SOS_Command ( cmd ) ; begin
31833: LD_INT 0
31835: PPUSH
// end ;
31836: LD_VAR 0 2
31840: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31841: LD_INT 0
31843: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31844: LD_VAR 0 1
31848: PUSH
31849: LD_INT 254
31851: EQUAL
31852: PUSH
31853: LD_VAR 0 2
31857: PPUSH
31858: CALL_OW 264
31862: PUSH
31863: LD_EXP 50
31867: EQUAL
31868: AND
31869: PUSH
31870: LD_VAR 0 3
31874: PPUSH
31875: CALL_OW 263
31879: PUSH
31880: LD_INT 3
31882: EQUAL
31883: AND
31884: IFFALSE 31900
// HackDestroyVehicle ( unit , selectedUnit ) ;
31886: LD_VAR 0 2
31890: PPUSH
31891: LD_VAR 0 3
31895: PPUSH
31896: CALL 33409 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31900: LD_VAR 0 1
31904: PUSH
31905: LD_INT 255
31907: EQUAL
31908: PUSH
31909: LD_VAR 0 2
31913: PPUSH
31914: CALL_OW 264
31918: PUSH
31919: LD_INT 14
31921: PUSH
31922: LD_INT 53
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: IN
31929: AND
31930: PUSH
31931: LD_VAR 0 4
31935: PPUSH
31936: LD_VAR 0 5
31940: PPUSH
31941: CALL_OW 488
31945: AND
31946: IFFALSE 31970
// CutTreeXYR ( unit , x , y , 12 ) ;
31948: LD_VAR 0 2
31952: PPUSH
31953: LD_VAR 0 4
31957: PPUSH
31958: LD_VAR 0 5
31962: PPUSH
31963: LD_INT 12
31965: PPUSH
31966: CALL 31975 0 4
// end ;
31970: LD_VAR 0 6
31974: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31975: LD_INT 0
31977: PPUSH
31978: PPUSH
31979: PPUSH
31980: PPUSH
31981: PPUSH
31982: PPUSH
31983: PPUSH
31984: PPUSH
31985: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31986: LD_VAR 0 1
31990: NOT
31991: PUSH
31992: LD_VAR 0 2
31996: PPUSH
31997: LD_VAR 0 3
32001: PPUSH
32002: CALL_OW 488
32006: NOT
32007: OR
32008: PUSH
32009: LD_VAR 0 4
32013: NOT
32014: OR
32015: IFFALSE 32019
// exit ;
32017: GO 32359
// list := [ ] ;
32019: LD_ADDR_VAR 0 13
32023: PUSH
32024: EMPTY
32025: ST_TO_ADDR
// if x - r < 0 then
32026: LD_VAR 0 2
32030: PUSH
32031: LD_VAR 0 4
32035: MINUS
32036: PUSH
32037: LD_INT 0
32039: LESS
32040: IFFALSE 32052
// min_x := 0 else
32042: LD_ADDR_VAR 0 7
32046: PUSH
32047: LD_INT 0
32049: ST_TO_ADDR
32050: GO 32068
// min_x := x - r ;
32052: LD_ADDR_VAR 0 7
32056: PUSH
32057: LD_VAR 0 2
32061: PUSH
32062: LD_VAR 0 4
32066: MINUS
32067: ST_TO_ADDR
// if y - r < 0 then
32068: LD_VAR 0 3
32072: PUSH
32073: LD_VAR 0 4
32077: MINUS
32078: PUSH
32079: LD_INT 0
32081: LESS
32082: IFFALSE 32094
// min_y := 0 else
32084: LD_ADDR_VAR 0 8
32088: PUSH
32089: LD_INT 0
32091: ST_TO_ADDR
32092: GO 32110
// min_y := y - r ;
32094: LD_ADDR_VAR 0 8
32098: PUSH
32099: LD_VAR 0 3
32103: PUSH
32104: LD_VAR 0 4
32108: MINUS
32109: ST_TO_ADDR
// max_x := x + r ;
32110: LD_ADDR_VAR 0 9
32114: PUSH
32115: LD_VAR 0 2
32119: PUSH
32120: LD_VAR 0 4
32124: PLUS
32125: ST_TO_ADDR
// max_y := y + r ;
32126: LD_ADDR_VAR 0 10
32130: PUSH
32131: LD_VAR 0 3
32135: PUSH
32136: LD_VAR 0 4
32140: PLUS
32141: ST_TO_ADDR
// for _x = min_x to max_x do
32142: LD_ADDR_VAR 0 11
32146: PUSH
32147: DOUBLE
32148: LD_VAR 0 7
32152: DEC
32153: ST_TO_ADDR
32154: LD_VAR 0 9
32158: PUSH
32159: FOR_TO
32160: IFFALSE 32277
// for _y = min_y to max_y do
32162: LD_ADDR_VAR 0 12
32166: PUSH
32167: DOUBLE
32168: LD_VAR 0 8
32172: DEC
32173: ST_TO_ADDR
32174: LD_VAR 0 10
32178: PUSH
32179: FOR_TO
32180: IFFALSE 32273
// begin if not ValidHex ( _x , _y ) then
32182: LD_VAR 0 11
32186: PPUSH
32187: LD_VAR 0 12
32191: PPUSH
32192: CALL_OW 488
32196: NOT
32197: IFFALSE 32201
// continue ;
32199: GO 32179
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32201: LD_VAR 0 11
32205: PPUSH
32206: LD_VAR 0 12
32210: PPUSH
32211: CALL_OW 351
32215: PUSH
32216: LD_VAR 0 11
32220: PPUSH
32221: LD_VAR 0 12
32225: PPUSH
32226: CALL_OW 554
32230: AND
32231: IFFALSE 32271
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32233: LD_ADDR_VAR 0 13
32237: PUSH
32238: LD_VAR 0 13
32242: PPUSH
32243: LD_VAR 0 13
32247: PUSH
32248: LD_INT 1
32250: PLUS
32251: PPUSH
32252: LD_VAR 0 11
32256: PUSH
32257: LD_VAR 0 12
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PPUSH
32266: CALL_OW 2
32270: ST_TO_ADDR
// end ;
32271: GO 32179
32273: POP
32274: POP
32275: GO 32159
32277: POP
32278: POP
// if not list then
32279: LD_VAR 0 13
32283: NOT
32284: IFFALSE 32288
// exit ;
32286: GO 32359
// for i in list do
32288: LD_ADDR_VAR 0 6
32292: PUSH
32293: LD_VAR 0 13
32297: PUSH
32298: FOR_IN
32299: IFFALSE 32357
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32301: LD_VAR 0 1
32305: PPUSH
32306: LD_STRING M
32308: PUSH
32309: LD_VAR 0 6
32313: PUSH
32314: LD_INT 1
32316: ARRAY
32317: PUSH
32318: LD_VAR 0 6
32322: PUSH
32323: LD_INT 2
32325: ARRAY
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: PUSH
32348: EMPTY
32349: LIST
32350: PPUSH
32351: CALL_OW 447
32355: GO 32298
32357: POP
32358: POP
// end ;
32359: LD_VAR 0 5
32363: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32364: LD_EXP 118
32368: NOT
32369: IFFALSE 32419
32371: GO 32373
32373: DISABLE
// begin initHack := true ;
32374: LD_ADDR_EXP 118
32378: PUSH
32379: LD_INT 1
32381: ST_TO_ADDR
// hackTanks := [ ] ;
32382: LD_ADDR_EXP 119
32386: PUSH
32387: EMPTY
32388: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32389: LD_ADDR_EXP 120
32393: PUSH
32394: EMPTY
32395: ST_TO_ADDR
// hackLimit := 3 ;
32396: LD_ADDR_EXP 121
32400: PUSH
32401: LD_INT 3
32403: ST_TO_ADDR
// hackDist := 12 ;
32404: LD_ADDR_EXP 122
32408: PUSH
32409: LD_INT 12
32411: ST_TO_ADDR
// hackCounter := [ ] ;
32412: LD_ADDR_EXP 123
32416: PUSH
32417: EMPTY
32418: ST_TO_ADDR
// end ;
32419: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32420: LD_EXP 118
32424: PUSH
32425: LD_INT 34
32427: PUSH
32428: LD_EXP 50
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PPUSH
32437: CALL_OW 69
32441: AND
32442: IFFALSE 32697
32444: GO 32446
32446: DISABLE
32447: LD_INT 0
32449: PPUSH
32450: PPUSH
// begin enable ;
32451: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32452: LD_ADDR_VAR 0 1
32456: PUSH
32457: LD_INT 34
32459: PUSH
32460: LD_EXP 50
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PPUSH
32469: CALL_OW 69
32473: PUSH
32474: FOR_IN
32475: IFFALSE 32695
// begin if not i in hackTanks then
32477: LD_VAR 0 1
32481: PUSH
32482: LD_EXP 119
32486: IN
32487: NOT
32488: IFFALSE 32571
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32490: LD_ADDR_EXP 119
32494: PUSH
32495: LD_EXP 119
32499: PPUSH
32500: LD_EXP 119
32504: PUSH
32505: LD_INT 1
32507: PLUS
32508: PPUSH
32509: LD_VAR 0 1
32513: PPUSH
32514: CALL_OW 1
32518: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32519: LD_ADDR_EXP 120
32523: PUSH
32524: LD_EXP 120
32528: PPUSH
32529: LD_EXP 120
32533: PUSH
32534: LD_INT 1
32536: PLUS
32537: PPUSH
32538: EMPTY
32539: PPUSH
32540: CALL_OW 1
32544: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32545: LD_ADDR_EXP 123
32549: PUSH
32550: LD_EXP 123
32554: PPUSH
32555: LD_EXP 123
32559: PUSH
32560: LD_INT 1
32562: PLUS
32563: PPUSH
32564: EMPTY
32565: PPUSH
32566: CALL_OW 1
32570: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32571: LD_VAR 0 1
32575: PPUSH
32576: CALL_OW 302
32580: NOT
32581: IFFALSE 32594
// begin HackUnlinkAll ( i ) ;
32583: LD_VAR 0 1
32587: PPUSH
32588: CALL 32700 0 1
// continue ;
32592: GO 32474
// end ; HackCheckCapturedStatus ( i ) ;
32594: LD_VAR 0 1
32598: PPUSH
32599: CALL 33143 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32603: LD_ADDR_VAR 0 2
32607: PUSH
32608: LD_INT 81
32610: PUSH
32611: LD_VAR 0 1
32615: PPUSH
32616: CALL_OW 255
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 33
32627: PUSH
32628: LD_INT 3
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 91
32637: PUSH
32638: LD_VAR 0 1
32642: PUSH
32643: LD_EXP 122
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 50
32655: PUSH
32656: EMPTY
32657: LIST
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: PPUSH
32665: CALL_OW 69
32669: ST_TO_ADDR
// if not tmp then
32670: LD_VAR 0 2
32674: NOT
32675: IFFALSE 32679
// continue ;
32677: GO 32474
// HackLink ( i , tmp ) ;
32679: LD_VAR 0 1
32683: PPUSH
32684: LD_VAR 0 2
32688: PPUSH
32689: CALL 32836 0 2
// end ;
32693: GO 32474
32695: POP
32696: POP
// end ;
32697: PPOPN 2
32699: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32700: LD_INT 0
32702: PPUSH
32703: PPUSH
32704: PPUSH
// if not hack in hackTanks then
32705: LD_VAR 0 1
32709: PUSH
32710: LD_EXP 119
32714: IN
32715: NOT
32716: IFFALSE 32720
// exit ;
32718: GO 32831
// index := GetElementIndex ( hackTanks , hack ) ;
32720: LD_ADDR_VAR 0 4
32724: PUSH
32725: LD_EXP 119
32729: PPUSH
32730: LD_VAR 0 1
32734: PPUSH
32735: CALL 38251 0 2
32739: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32740: LD_EXP 120
32744: PUSH
32745: LD_VAR 0 4
32749: ARRAY
32750: IFFALSE 32831
// begin for i in hackTanksCaptured [ index ] do
32752: LD_ADDR_VAR 0 3
32756: PUSH
32757: LD_EXP 120
32761: PUSH
32762: LD_VAR 0 4
32766: ARRAY
32767: PUSH
32768: FOR_IN
32769: IFFALSE 32795
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32771: LD_VAR 0 3
32775: PUSH
32776: LD_INT 1
32778: ARRAY
32779: PPUSH
32780: LD_VAR 0 3
32784: PUSH
32785: LD_INT 2
32787: ARRAY
32788: PPUSH
32789: CALL_OW 235
32793: GO 32768
32795: POP
32796: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32797: LD_ADDR_EXP 120
32801: PUSH
32802: LD_EXP 120
32806: PPUSH
32807: LD_VAR 0 4
32811: PPUSH
32812: EMPTY
32813: PPUSH
32814: CALL_OW 1
32818: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32819: LD_VAR 0 1
32823: PPUSH
32824: LD_INT 0
32826: PPUSH
32827: CALL_OW 505
// end ; end ;
32831: LD_VAR 0 2
32835: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32836: LD_INT 0
32838: PPUSH
32839: PPUSH
32840: PPUSH
// if not hack in hackTanks or not vehicles then
32841: LD_VAR 0 1
32845: PUSH
32846: LD_EXP 119
32850: IN
32851: NOT
32852: PUSH
32853: LD_VAR 0 2
32857: NOT
32858: OR
32859: IFFALSE 32863
// exit ;
32861: GO 33138
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32863: LD_ADDR_VAR 0 2
32867: PUSH
32868: LD_VAR 0 1
32872: PPUSH
32873: LD_VAR 0 2
32877: PPUSH
32878: LD_INT 1
32880: PPUSH
32881: LD_INT 1
32883: PPUSH
32884: CALL 38901 0 4
32888: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32889: LD_ADDR_VAR 0 5
32893: PUSH
32894: LD_EXP 119
32898: PPUSH
32899: LD_VAR 0 1
32903: PPUSH
32904: CALL 38251 0 2
32908: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32909: LD_EXP 120
32913: PUSH
32914: LD_VAR 0 5
32918: ARRAY
32919: PUSH
32920: LD_EXP 121
32924: LESS
32925: IFFALSE 33114
// begin for i := 1 to vehicles do
32927: LD_ADDR_VAR 0 4
32931: PUSH
32932: DOUBLE
32933: LD_INT 1
32935: DEC
32936: ST_TO_ADDR
32937: LD_VAR 0 2
32941: PUSH
32942: FOR_TO
32943: IFFALSE 33112
// begin if hackTanksCaptured [ index ] = hackLimit then
32945: LD_EXP 120
32949: PUSH
32950: LD_VAR 0 5
32954: ARRAY
32955: PUSH
32956: LD_EXP 121
32960: EQUAL
32961: IFFALSE 32965
// break ;
32963: GO 33112
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32965: LD_ADDR_EXP 123
32969: PUSH
32970: LD_EXP 123
32974: PPUSH
32975: LD_VAR 0 5
32979: PPUSH
32980: LD_EXP 123
32984: PUSH
32985: LD_VAR 0 5
32989: ARRAY
32990: PUSH
32991: LD_INT 1
32993: PLUS
32994: PPUSH
32995: CALL_OW 1
32999: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33000: LD_ADDR_EXP 120
33004: PUSH
33005: LD_EXP 120
33009: PPUSH
33010: LD_VAR 0 5
33014: PUSH
33015: LD_EXP 120
33019: PUSH
33020: LD_VAR 0 5
33024: ARRAY
33025: PUSH
33026: LD_INT 1
33028: PLUS
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PPUSH
33034: LD_VAR 0 2
33038: PUSH
33039: LD_VAR 0 4
33043: ARRAY
33044: PUSH
33045: LD_VAR 0 2
33049: PUSH
33050: LD_VAR 0 4
33054: ARRAY
33055: PPUSH
33056: CALL_OW 255
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PPUSH
33065: CALL 38466 0 3
33069: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33070: LD_VAR 0 2
33074: PUSH
33075: LD_VAR 0 4
33079: ARRAY
33080: PPUSH
33081: LD_VAR 0 1
33085: PPUSH
33086: CALL_OW 255
33090: PPUSH
33091: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33095: LD_VAR 0 2
33099: PUSH
33100: LD_VAR 0 4
33104: ARRAY
33105: PPUSH
33106: CALL_OW 141
// end ;
33110: GO 32942
33112: POP
33113: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33114: LD_VAR 0 1
33118: PPUSH
33119: LD_EXP 120
33123: PUSH
33124: LD_VAR 0 5
33128: ARRAY
33129: PUSH
33130: LD_INT 0
33132: PLUS
33133: PPUSH
33134: CALL_OW 505
// end ;
33138: LD_VAR 0 3
33142: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33143: LD_INT 0
33145: PPUSH
33146: PPUSH
33147: PPUSH
33148: PPUSH
// if not hack in hackTanks then
33149: LD_VAR 0 1
33153: PUSH
33154: LD_EXP 119
33158: IN
33159: NOT
33160: IFFALSE 33164
// exit ;
33162: GO 33404
// index := GetElementIndex ( hackTanks , hack ) ;
33164: LD_ADDR_VAR 0 4
33168: PUSH
33169: LD_EXP 119
33173: PPUSH
33174: LD_VAR 0 1
33178: PPUSH
33179: CALL 38251 0 2
33183: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33184: LD_ADDR_VAR 0 3
33188: PUSH
33189: DOUBLE
33190: LD_EXP 120
33194: PUSH
33195: LD_VAR 0 4
33199: ARRAY
33200: INC
33201: ST_TO_ADDR
33202: LD_INT 1
33204: PUSH
33205: FOR_DOWNTO
33206: IFFALSE 33378
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33208: LD_ADDR_VAR 0 5
33212: PUSH
33213: LD_EXP 120
33217: PUSH
33218: LD_VAR 0 4
33222: ARRAY
33223: PUSH
33224: LD_VAR 0 3
33228: ARRAY
33229: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33230: LD_VAR 0 5
33234: PUSH
33235: LD_INT 1
33237: ARRAY
33238: PPUSH
33239: CALL_OW 302
33243: NOT
33244: PUSH
33245: LD_VAR 0 5
33249: PUSH
33250: LD_INT 1
33252: ARRAY
33253: PPUSH
33254: CALL_OW 255
33258: PUSH
33259: LD_VAR 0 1
33263: PPUSH
33264: CALL_OW 255
33268: NONEQUAL
33269: OR
33270: IFFALSE 33376
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33272: LD_VAR 0 5
33276: PUSH
33277: LD_INT 1
33279: ARRAY
33280: PPUSH
33281: CALL_OW 305
33285: PUSH
33286: LD_VAR 0 5
33290: PUSH
33291: LD_INT 1
33293: ARRAY
33294: PPUSH
33295: CALL_OW 255
33299: PUSH
33300: LD_VAR 0 1
33304: PPUSH
33305: CALL_OW 255
33309: EQUAL
33310: AND
33311: IFFALSE 33335
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33313: LD_VAR 0 5
33317: PUSH
33318: LD_INT 1
33320: ARRAY
33321: PPUSH
33322: LD_VAR 0 5
33326: PUSH
33327: LD_INT 2
33329: ARRAY
33330: PPUSH
33331: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33335: LD_ADDR_EXP 120
33339: PUSH
33340: LD_EXP 120
33344: PPUSH
33345: LD_VAR 0 4
33349: PPUSH
33350: LD_EXP 120
33354: PUSH
33355: LD_VAR 0 4
33359: ARRAY
33360: PPUSH
33361: LD_VAR 0 3
33365: PPUSH
33366: CALL_OW 3
33370: PPUSH
33371: CALL_OW 1
33375: ST_TO_ADDR
// end ; end ;
33376: GO 33205
33378: POP
33379: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33380: LD_VAR 0 1
33384: PPUSH
33385: LD_EXP 120
33389: PUSH
33390: LD_VAR 0 4
33394: ARRAY
33395: PUSH
33396: LD_INT 0
33398: PLUS
33399: PPUSH
33400: CALL_OW 505
// end ;
33404: LD_VAR 0 2
33408: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33409: LD_INT 0
33411: PPUSH
33412: PPUSH
33413: PPUSH
33414: PPUSH
// if not hack in hackTanks then
33415: LD_VAR 0 1
33419: PUSH
33420: LD_EXP 119
33424: IN
33425: NOT
33426: IFFALSE 33430
// exit ;
33428: GO 33515
// index := GetElementIndex ( hackTanks , hack ) ;
33430: LD_ADDR_VAR 0 5
33434: PUSH
33435: LD_EXP 119
33439: PPUSH
33440: LD_VAR 0 1
33444: PPUSH
33445: CALL 38251 0 2
33449: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33450: LD_ADDR_VAR 0 4
33454: PUSH
33455: DOUBLE
33456: LD_INT 1
33458: DEC
33459: ST_TO_ADDR
33460: LD_EXP 120
33464: PUSH
33465: LD_VAR 0 5
33469: ARRAY
33470: PUSH
33471: FOR_TO
33472: IFFALSE 33513
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33474: LD_EXP 120
33478: PUSH
33479: LD_VAR 0 5
33483: ARRAY
33484: PUSH
33485: LD_VAR 0 4
33489: ARRAY
33490: PUSH
33491: LD_INT 1
33493: ARRAY
33494: PUSH
33495: LD_VAR 0 2
33499: EQUAL
33500: IFFALSE 33511
// KillUnit ( vehicle ) ;
33502: LD_VAR 0 2
33506: PPUSH
33507: CALL_OW 66
33511: GO 33471
33513: POP
33514: POP
// end ; end_of_file
33515: LD_VAR 0 3
33519: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33520: LD_INT 0
33522: PPUSH
33523: PPUSH
// if exist_mode then
33524: LD_VAR 0 2
33528: IFFALSE 33553
// unit := CreateCharacter ( prefix & ident ) else
33530: LD_ADDR_VAR 0 5
33534: PUSH
33535: LD_VAR 0 3
33539: PUSH
33540: LD_VAR 0 1
33544: STR
33545: PPUSH
33546: CALL_OW 34
33550: ST_TO_ADDR
33551: GO 33568
// unit := NewCharacter ( ident ) ;
33553: LD_ADDR_VAR 0 5
33557: PUSH
33558: LD_VAR 0 1
33562: PPUSH
33563: CALL_OW 25
33567: ST_TO_ADDR
// result := unit ;
33568: LD_ADDR_VAR 0 4
33572: PUSH
33573: LD_VAR 0 5
33577: ST_TO_ADDR
// end ;
33578: LD_VAR 0 4
33582: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33583: LD_INT 0
33585: PPUSH
33586: PPUSH
// if not side or not nation then
33587: LD_VAR 0 1
33591: NOT
33592: PUSH
33593: LD_VAR 0 2
33597: NOT
33598: OR
33599: IFFALSE 33603
// exit ;
33601: GO 34367
// case nation of nation_american :
33603: LD_VAR 0 2
33607: PUSH
33608: LD_INT 1
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33616
33614: GO 33830
33616: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33617: LD_ADDR_VAR 0 4
33621: PUSH
33622: LD_INT 35
33624: PUSH
33625: LD_INT 45
33627: PUSH
33628: LD_INT 46
33630: PUSH
33631: LD_INT 47
33633: PUSH
33634: LD_INT 82
33636: PUSH
33637: LD_INT 83
33639: PUSH
33640: LD_INT 84
33642: PUSH
33643: LD_INT 85
33645: PUSH
33646: LD_INT 86
33648: PUSH
33649: LD_INT 1
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: LD_INT 6
33657: PUSH
33658: LD_INT 15
33660: PUSH
33661: LD_INT 16
33663: PUSH
33664: LD_INT 7
33666: PUSH
33667: LD_INT 12
33669: PUSH
33670: LD_INT 13
33672: PUSH
33673: LD_INT 10
33675: PUSH
33676: LD_INT 14
33678: PUSH
33679: LD_INT 20
33681: PUSH
33682: LD_INT 21
33684: PUSH
33685: LD_INT 22
33687: PUSH
33688: LD_INT 25
33690: PUSH
33691: LD_INT 32
33693: PUSH
33694: LD_INT 27
33696: PUSH
33697: LD_INT 36
33699: PUSH
33700: LD_INT 69
33702: PUSH
33703: LD_INT 39
33705: PUSH
33706: LD_INT 34
33708: PUSH
33709: LD_INT 40
33711: PUSH
33712: LD_INT 48
33714: PUSH
33715: LD_INT 49
33717: PUSH
33718: LD_INT 50
33720: PUSH
33721: LD_INT 51
33723: PUSH
33724: LD_INT 52
33726: PUSH
33727: LD_INT 53
33729: PUSH
33730: LD_INT 54
33732: PUSH
33733: LD_INT 55
33735: PUSH
33736: LD_INT 56
33738: PUSH
33739: LD_INT 57
33741: PUSH
33742: LD_INT 58
33744: PUSH
33745: LD_INT 59
33747: PUSH
33748: LD_INT 60
33750: PUSH
33751: LD_INT 61
33753: PUSH
33754: LD_INT 62
33756: PUSH
33757: LD_INT 80
33759: PUSH
33760: LD_INT 82
33762: PUSH
33763: LD_INT 83
33765: PUSH
33766: LD_INT 84
33768: PUSH
33769: LD_INT 85
33771: PUSH
33772: LD_INT 86
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: ST_TO_ADDR
33828: GO 34291
33830: LD_INT 2
33832: DOUBLE
33833: EQUAL
33834: IFTRUE 33838
33836: GO 34060
33838: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
33839: LD_ADDR_VAR 0 4
33843: PUSH
33844: LD_INT 35
33846: PUSH
33847: LD_INT 45
33849: PUSH
33850: LD_INT 46
33852: PUSH
33853: LD_INT 47
33855: PUSH
33856: LD_INT 82
33858: PUSH
33859: LD_INT 83
33861: PUSH
33862: LD_INT 84
33864: PUSH
33865: LD_INT 85
33867: PUSH
33868: LD_INT 87
33870: PUSH
33871: LD_INT 70
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: LD_INT 11
33879: PUSH
33880: LD_INT 3
33882: PUSH
33883: LD_INT 4
33885: PUSH
33886: LD_INT 5
33888: PUSH
33889: LD_INT 6
33891: PUSH
33892: LD_INT 15
33894: PUSH
33895: LD_INT 18
33897: PUSH
33898: LD_INT 7
33900: PUSH
33901: LD_INT 17
33903: PUSH
33904: LD_INT 8
33906: PUSH
33907: LD_INT 20
33909: PUSH
33910: LD_INT 21
33912: PUSH
33913: LD_INT 22
33915: PUSH
33916: LD_INT 72
33918: PUSH
33919: LD_INT 26
33921: PUSH
33922: LD_INT 69
33924: PUSH
33925: LD_INT 39
33927: PUSH
33928: LD_INT 40
33930: PUSH
33931: LD_INT 41
33933: PUSH
33934: LD_INT 42
33936: PUSH
33937: LD_INT 43
33939: PUSH
33940: LD_INT 48
33942: PUSH
33943: LD_INT 49
33945: PUSH
33946: LD_INT 50
33948: PUSH
33949: LD_INT 51
33951: PUSH
33952: LD_INT 52
33954: PUSH
33955: LD_INT 53
33957: PUSH
33958: LD_INT 54
33960: PUSH
33961: LD_INT 55
33963: PUSH
33964: LD_INT 56
33966: PUSH
33967: LD_INT 60
33969: PUSH
33970: LD_INT 61
33972: PUSH
33973: LD_INT 62
33975: PUSH
33976: LD_INT 66
33978: PUSH
33979: LD_INT 67
33981: PUSH
33982: LD_INT 68
33984: PUSH
33985: LD_INT 81
33987: PUSH
33988: LD_INT 82
33990: PUSH
33991: LD_INT 83
33993: PUSH
33994: LD_INT 84
33996: PUSH
33997: LD_INT 85
33999: PUSH
34000: LD_INT 87
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
34058: GO 34291
34060: LD_INT 3
34062: DOUBLE
34063: EQUAL
34064: IFTRUE 34068
34066: GO 34290
34068: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34069: LD_ADDR_VAR 0 4
34073: PUSH
34074: LD_INT 46
34076: PUSH
34077: LD_INT 47
34079: PUSH
34080: LD_INT 1
34082: PUSH
34083: LD_INT 2
34085: PUSH
34086: LD_INT 82
34088: PUSH
34089: LD_INT 83
34091: PUSH
34092: LD_INT 84
34094: PUSH
34095: LD_INT 85
34097: PUSH
34098: LD_INT 86
34100: PUSH
34101: LD_INT 11
34103: PUSH
34104: LD_INT 9
34106: PUSH
34107: LD_INT 20
34109: PUSH
34110: LD_INT 19
34112: PUSH
34113: LD_INT 21
34115: PUSH
34116: LD_INT 24
34118: PUSH
34119: LD_INT 22
34121: PUSH
34122: LD_INT 25
34124: PUSH
34125: LD_INT 28
34127: PUSH
34128: LD_INT 29
34130: PUSH
34131: LD_INT 30
34133: PUSH
34134: LD_INT 31
34136: PUSH
34137: LD_INT 37
34139: PUSH
34140: LD_INT 38
34142: PUSH
34143: LD_INT 32
34145: PUSH
34146: LD_INT 27
34148: PUSH
34149: LD_INT 33
34151: PUSH
34152: LD_INT 69
34154: PUSH
34155: LD_INT 39
34157: PUSH
34158: LD_INT 34
34160: PUSH
34161: LD_INT 40
34163: PUSH
34164: LD_INT 71
34166: PUSH
34167: LD_INT 23
34169: PUSH
34170: LD_INT 44
34172: PUSH
34173: LD_INT 48
34175: PUSH
34176: LD_INT 49
34178: PUSH
34179: LD_INT 50
34181: PUSH
34182: LD_INT 51
34184: PUSH
34185: LD_INT 52
34187: PUSH
34188: LD_INT 53
34190: PUSH
34191: LD_INT 54
34193: PUSH
34194: LD_INT 55
34196: PUSH
34197: LD_INT 56
34199: PUSH
34200: LD_INT 57
34202: PUSH
34203: LD_INT 58
34205: PUSH
34206: LD_INT 59
34208: PUSH
34209: LD_INT 63
34211: PUSH
34212: LD_INT 64
34214: PUSH
34215: LD_INT 65
34217: PUSH
34218: LD_INT 82
34220: PUSH
34221: LD_INT 83
34223: PUSH
34224: LD_INT 84
34226: PUSH
34227: LD_INT 85
34229: PUSH
34230: LD_INT 86
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: ST_TO_ADDR
34288: GO 34291
34290: POP
// if state > - 1 and state < 3 then
34291: LD_VAR 0 3
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: GREATER
34300: PUSH
34301: LD_VAR 0 3
34305: PUSH
34306: LD_INT 3
34308: LESS
34309: AND
34310: IFFALSE 34367
// for i in result do
34312: LD_ADDR_VAR 0 5
34316: PUSH
34317: LD_VAR 0 4
34321: PUSH
34322: FOR_IN
34323: IFFALSE 34365
// if GetTech ( i , side ) <> state then
34325: LD_VAR 0 5
34329: PPUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 321
34339: PUSH
34340: LD_VAR 0 3
34344: NONEQUAL
34345: IFFALSE 34363
// result := result diff i ;
34347: LD_ADDR_VAR 0 4
34351: PUSH
34352: LD_VAR 0 4
34356: PUSH
34357: LD_VAR 0 5
34361: DIFF
34362: ST_TO_ADDR
34363: GO 34322
34365: POP
34366: POP
// end ;
34367: LD_VAR 0 4
34371: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34372: LD_INT 0
34374: PPUSH
34375: PPUSH
34376: PPUSH
// result := true ;
34377: LD_ADDR_VAR 0 3
34381: PUSH
34382: LD_INT 1
34384: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34385: LD_ADDR_VAR 0 5
34389: PUSH
34390: LD_VAR 0 2
34394: PPUSH
34395: CALL_OW 480
34399: ST_TO_ADDR
// if not tmp then
34400: LD_VAR 0 5
34404: NOT
34405: IFFALSE 34409
// exit ;
34407: GO 34458
// for i in tmp do
34409: LD_ADDR_VAR 0 4
34413: PUSH
34414: LD_VAR 0 5
34418: PUSH
34419: FOR_IN
34420: IFFALSE 34456
// if GetTech ( i , side ) <> state_researched then
34422: LD_VAR 0 4
34426: PPUSH
34427: LD_VAR 0 1
34431: PPUSH
34432: CALL_OW 321
34436: PUSH
34437: LD_INT 2
34439: NONEQUAL
34440: IFFALSE 34454
// begin result := false ;
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_INT 0
34449: ST_TO_ADDR
// exit ;
34450: POP
34451: POP
34452: GO 34458
// end ;
34454: GO 34419
34456: POP
34457: POP
// end ;
34458: LD_VAR 0 3
34462: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34463: LD_INT 0
34465: PPUSH
34466: PPUSH
34467: PPUSH
34468: PPUSH
34469: PPUSH
34470: PPUSH
34471: PPUSH
34472: PPUSH
34473: PPUSH
34474: PPUSH
34475: PPUSH
34476: PPUSH
34477: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34478: LD_VAR 0 1
34482: NOT
34483: PUSH
34484: LD_VAR 0 1
34488: PPUSH
34489: CALL_OW 257
34493: PUSH
34494: LD_INT 9
34496: NONEQUAL
34497: OR
34498: IFFALSE 34502
// exit ;
34500: GO 35075
// side := GetSide ( unit ) ;
34502: LD_ADDR_VAR 0 9
34506: PUSH
34507: LD_VAR 0 1
34511: PPUSH
34512: CALL_OW 255
34516: ST_TO_ADDR
// tech_space := tech_spacanom ;
34517: LD_ADDR_VAR 0 12
34521: PUSH
34522: LD_INT 29
34524: ST_TO_ADDR
// tech_time := tech_taurad ;
34525: LD_ADDR_VAR 0 13
34529: PUSH
34530: LD_INT 28
34532: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34533: LD_ADDR_VAR 0 11
34537: PUSH
34538: LD_VAR 0 1
34542: PPUSH
34543: CALL_OW 310
34547: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34548: LD_VAR 0 11
34552: PPUSH
34553: CALL_OW 247
34557: PUSH
34558: LD_INT 2
34560: EQUAL
34561: IFFALSE 34565
// exit ;
34563: GO 35075
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34565: LD_ADDR_VAR 0 8
34569: PUSH
34570: LD_INT 81
34572: PUSH
34573: LD_VAR 0 9
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 3
34584: PUSH
34585: LD_INT 21
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PPUSH
34603: CALL_OW 69
34607: ST_TO_ADDR
// if not tmp then
34608: LD_VAR 0 8
34612: NOT
34613: IFFALSE 34617
// exit ;
34615: GO 35075
// if in_unit then
34617: LD_VAR 0 11
34621: IFFALSE 34645
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34623: LD_ADDR_VAR 0 10
34627: PUSH
34628: LD_VAR 0 8
34632: PPUSH
34633: LD_VAR 0 11
34637: PPUSH
34638: CALL_OW 74
34642: ST_TO_ADDR
34643: GO 34665
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34645: LD_ADDR_VAR 0 10
34649: PUSH
34650: LD_VAR 0 8
34654: PPUSH
34655: LD_VAR 0 1
34659: PPUSH
34660: CALL_OW 74
34664: ST_TO_ADDR
// if not enemy then
34665: LD_VAR 0 10
34669: NOT
34670: IFFALSE 34674
// exit ;
34672: GO 35075
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34674: LD_VAR 0 11
34678: PUSH
34679: LD_VAR 0 11
34683: PPUSH
34684: LD_VAR 0 10
34688: PPUSH
34689: CALL_OW 296
34693: PUSH
34694: LD_INT 13
34696: GREATER
34697: AND
34698: PUSH
34699: LD_VAR 0 1
34703: PPUSH
34704: LD_VAR 0 10
34708: PPUSH
34709: CALL_OW 296
34713: PUSH
34714: LD_INT 12
34716: GREATER
34717: OR
34718: IFFALSE 34722
// exit ;
34720: GO 35075
// missile := [ 1 ] ;
34722: LD_ADDR_VAR 0 14
34726: PUSH
34727: LD_INT 1
34729: PUSH
34730: EMPTY
34731: LIST
34732: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34733: LD_VAR 0 9
34737: PPUSH
34738: LD_VAR 0 12
34742: PPUSH
34743: CALL_OW 325
34747: IFFALSE 34776
// missile := Insert ( missile , missile + 1 , 2 ) ;
34749: LD_ADDR_VAR 0 14
34753: PUSH
34754: LD_VAR 0 14
34758: PPUSH
34759: LD_VAR 0 14
34763: PUSH
34764: LD_INT 1
34766: PLUS
34767: PPUSH
34768: LD_INT 2
34770: PPUSH
34771: CALL_OW 2
34775: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34776: LD_VAR 0 9
34780: PPUSH
34781: LD_VAR 0 13
34785: PPUSH
34786: CALL_OW 325
34790: PUSH
34791: LD_VAR 0 10
34795: PPUSH
34796: CALL_OW 255
34800: PPUSH
34801: LD_VAR 0 13
34805: PPUSH
34806: CALL_OW 325
34810: NOT
34811: AND
34812: IFFALSE 34841
// missile := Insert ( missile , missile + 1 , 3 ) ;
34814: LD_ADDR_VAR 0 14
34818: PUSH
34819: LD_VAR 0 14
34823: PPUSH
34824: LD_VAR 0 14
34828: PUSH
34829: LD_INT 1
34831: PLUS
34832: PPUSH
34833: LD_INT 3
34835: PPUSH
34836: CALL_OW 2
34840: ST_TO_ADDR
// if missile < 2 then
34841: LD_VAR 0 14
34845: PUSH
34846: LD_INT 2
34848: LESS
34849: IFFALSE 34853
// exit ;
34851: GO 35075
// x := GetX ( enemy ) ;
34853: LD_ADDR_VAR 0 4
34857: PUSH
34858: LD_VAR 0 10
34862: PPUSH
34863: CALL_OW 250
34867: ST_TO_ADDR
// y := GetY ( enemy ) ;
34868: LD_ADDR_VAR 0 5
34872: PUSH
34873: LD_VAR 0 10
34877: PPUSH
34878: CALL_OW 251
34882: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34883: LD_ADDR_VAR 0 6
34887: PUSH
34888: LD_VAR 0 4
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PPUSH
34897: LD_INT 1
34899: PPUSH
34900: CALL_OW 12
34904: PLUS
34905: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34906: LD_ADDR_VAR 0 7
34910: PUSH
34911: LD_VAR 0 5
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PPUSH
34920: LD_INT 1
34922: PPUSH
34923: CALL_OW 12
34927: PLUS
34928: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34929: LD_VAR 0 6
34933: PPUSH
34934: LD_VAR 0 7
34938: PPUSH
34939: CALL_OW 488
34943: NOT
34944: IFFALSE 34966
// begin _x := x ;
34946: LD_ADDR_VAR 0 6
34950: PUSH
34951: LD_VAR 0 4
34955: ST_TO_ADDR
// _y := y ;
34956: LD_ADDR_VAR 0 7
34960: PUSH
34961: LD_VAR 0 5
34965: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34966: LD_ADDR_VAR 0 3
34970: PUSH
34971: LD_INT 1
34973: PPUSH
34974: LD_VAR 0 14
34978: PPUSH
34979: CALL_OW 12
34983: ST_TO_ADDR
// case i of 1 :
34984: LD_VAR 0 3
34988: PUSH
34989: LD_INT 1
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 34997
34995: GO 35014
34997: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34998: LD_VAR 0 1
35002: PPUSH
35003: LD_VAR 0 10
35007: PPUSH
35008: CALL_OW 115
35012: GO 35075
35014: LD_INT 2
35016: DOUBLE
35017: EQUAL
35018: IFTRUE 35022
35020: GO 35044
35022: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35023: LD_VAR 0 1
35027: PPUSH
35028: LD_VAR 0 6
35032: PPUSH
35033: LD_VAR 0 7
35037: PPUSH
35038: CALL_OW 153
35042: GO 35075
35044: LD_INT 3
35046: DOUBLE
35047: EQUAL
35048: IFTRUE 35052
35050: GO 35074
35052: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35053: LD_VAR 0 1
35057: PPUSH
35058: LD_VAR 0 6
35062: PPUSH
35063: LD_VAR 0 7
35067: PPUSH
35068: CALL_OW 154
35072: GO 35075
35074: POP
// end ;
35075: LD_VAR 0 2
35079: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35080: LD_INT 0
35082: PPUSH
35083: PPUSH
35084: PPUSH
35085: PPUSH
35086: PPUSH
35087: PPUSH
// if not unit or not building then
35088: LD_VAR 0 1
35092: NOT
35093: PUSH
35094: LD_VAR 0 2
35098: NOT
35099: OR
35100: IFFALSE 35104
// exit ;
35102: GO 35262
// x := GetX ( building ) ;
35104: LD_ADDR_VAR 0 5
35108: PUSH
35109: LD_VAR 0 2
35113: PPUSH
35114: CALL_OW 250
35118: ST_TO_ADDR
// y := GetY ( building ) ;
35119: LD_ADDR_VAR 0 6
35123: PUSH
35124: LD_VAR 0 2
35128: PPUSH
35129: CALL_OW 251
35133: ST_TO_ADDR
// for i = 0 to 5 do
35134: LD_ADDR_VAR 0 4
35138: PUSH
35139: DOUBLE
35140: LD_INT 0
35142: DEC
35143: ST_TO_ADDR
35144: LD_INT 5
35146: PUSH
35147: FOR_TO
35148: IFFALSE 35260
// begin _x := ShiftX ( x , i , 3 ) ;
35150: LD_ADDR_VAR 0 7
35154: PUSH
35155: LD_VAR 0 5
35159: PPUSH
35160: LD_VAR 0 4
35164: PPUSH
35165: LD_INT 3
35167: PPUSH
35168: CALL_OW 272
35172: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35173: LD_ADDR_VAR 0 8
35177: PUSH
35178: LD_VAR 0 6
35182: PPUSH
35183: LD_VAR 0 4
35187: PPUSH
35188: LD_INT 3
35190: PPUSH
35191: CALL_OW 273
35195: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35196: LD_VAR 0 7
35200: PPUSH
35201: LD_VAR 0 8
35205: PPUSH
35206: CALL_OW 488
35210: NOT
35211: IFFALSE 35215
// continue ;
35213: GO 35147
// if HexInfo ( _x , _y ) = 0 then
35215: LD_VAR 0 7
35219: PPUSH
35220: LD_VAR 0 8
35224: PPUSH
35225: CALL_OW 428
35229: PUSH
35230: LD_INT 0
35232: EQUAL
35233: IFFALSE 35258
// begin ComMoveXY ( unit , _x , _y ) ;
35235: LD_VAR 0 1
35239: PPUSH
35240: LD_VAR 0 7
35244: PPUSH
35245: LD_VAR 0 8
35249: PPUSH
35250: CALL_OW 111
// exit ;
35254: POP
35255: POP
35256: GO 35262
// end ; end ;
35258: GO 35147
35260: POP
35261: POP
// end ;
35262: LD_VAR 0 3
35266: RET
// export function ScanBase ( side , base_area ) ; begin
35267: LD_INT 0
35269: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35270: LD_ADDR_VAR 0 3
35274: PUSH
35275: LD_VAR 0 2
35279: PPUSH
35280: LD_INT 81
35282: PUSH
35283: LD_VAR 0 1
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PPUSH
35292: CALL_OW 70
35296: ST_TO_ADDR
// end ;
35297: LD_VAR 0 3
35301: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35302: LD_INT 0
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
// result := false ;
35308: LD_ADDR_VAR 0 2
35312: PUSH
35313: LD_INT 0
35315: ST_TO_ADDR
// side := GetSide ( unit ) ;
35316: LD_ADDR_VAR 0 3
35320: PUSH
35321: LD_VAR 0 1
35325: PPUSH
35326: CALL_OW 255
35330: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35331: LD_ADDR_VAR 0 4
35335: PUSH
35336: LD_VAR 0 1
35340: PPUSH
35341: CALL_OW 248
35345: ST_TO_ADDR
// case nat of 1 :
35346: LD_VAR 0 4
35350: PUSH
35351: LD_INT 1
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35359
35357: GO 35370
35359: POP
// tech := tech_lassight ; 2 :
35360: LD_ADDR_VAR 0 5
35364: PUSH
35365: LD_INT 12
35367: ST_TO_ADDR
35368: GO 35409
35370: LD_INT 2
35372: DOUBLE
35373: EQUAL
35374: IFTRUE 35378
35376: GO 35389
35378: POP
// tech := tech_mortar ; 3 :
35379: LD_ADDR_VAR 0 5
35383: PUSH
35384: LD_INT 41
35386: ST_TO_ADDR
35387: GO 35409
35389: LD_INT 3
35391: DOUBLE
35392: EQUAL
35393: IFTRUE 35397
35395: GO 35408
35397: POP
// tech := tech_bazooka ; end ;
35398: LD_ADDR_VAR 0 5
35402: PUSH
35403: LD_INT 44
35405: ST_TO_ADDR
35406: GO 35409
35408: POP
// if Researched ( side , tech ) then
35409: LD_VAR 0 3
35413: PPUSH
35414: LD_VAR 0 5
35418: PPUSH
35419: CALL_OW 325
35423: IFFALSE 35450
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35425: LD_ADDR_VAR 0 2
35429: PUSH
35430: LD_INT 5
35432: PUSH
35433: LD_INT 8
35435: PUSH
35436: LD_INT 9
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: PUSH
35444: LD_VAR 0 4
35448: ARRAY
35449: ST_TO_ADDR
// end ;
35450: LD_VAR 0 2
35454: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35455: LD_INT 0
35457: PPUSH
35458: PPUSH
35459: PPUSH
// if not mines then
35460: LD_VAR 0 2
35464: NOT
35465: IFFALSE 35469
// exit ;
35467: GO 35613
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35469: LD_ADDR_VAR 0 5
35473: PUSH
35474: LD_INT 81
35476: PUSH
35477: LD_VAR 0 1
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 3
35488: PUSH
35489: LD_INT 21
35491: PUSH
35492: LD_INT 3
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PPUSH
35507: CALL_OW 69
35511: ST_TO_ADDR
// for i in mines do
35512: LD_ADDR_VAR 0 4
35516: PUSH
35517: LD_VAR 0 2
35521: PUSH
35522: FOR_IN
35523: IFFALSE 35611
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35525: LD_VAR 0 4
35529: PUSH
35530: LD_INT 1
35532: ARRAY
35533: PPUSH
35534: LD_VAR 0 4
35538: PUSH
35539: LD_INT 2
35541: ARRAY
35542: PPUSH
35543: CALL_OW 458
35547: NOT
35548: IFFALSE 35552
// continue ;
35550: GO 35522
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35552: LD_VAR 0 4
35556: PUSH
35557: LD_INT 1
35559: ARRAY
35560: PPUSH
35561: LD_VAR 0 4
35565: PUSH
35566: LD_INT 2
35568: ARRAY
35569: PPUSH
35570: CALL_OW 428
35574: PUSH
35575: LD_VAR 0 5
35579: IN
35580: IFFALSE 35609
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35582: LD_VAR 0 4
35586: PUSH
35587: LD_INT 1
35589: ARRAY
35590: PPUSH
35591: LD_VAR 0 4
35595: PUSH
35596: LD_INT 2
35598: ARRAY
35599: PPUSH
35600: LD_VAR 0 1
35604: PPUSH
35605: CALL_OW 456
// end ;
35609: GO 35522
35611: POP
35612: POP
// end ;
35613: LD_VAR 0 3
35617: RET
// export function Count ( array ) ; var i ; begin
35618: LD_INT 0
35620: PPUSH
35621: PPUSH
// result := 0 ;
35622: LD_ADDR_VAR 0 2
35626: PUSH
35627: LD_INT 0
35629: ST_TO_ADDR
// for i in array do
35630: LD_ADDR_VAR 0 3
35634: PUSH
35635: LD_VAR 0 1
35639: PUSH
35640: FOR_IN
35641: IFFALSE 35665
// if i then
35643: LD_VAR 0 3
35647: IFFALSE 35663
// result := result + 1 ;
35649: LD_ADDR_VAR 0 2
35653: PUSH
35654: LD_VAR 0 2
35658: PUSH
35659: LD_INT 1
35661: PLUS
35662: ST_TO_ADDR
35663: GO 35640
35665: POP
35666: POP
// end ;
35667: LD_VAR 0 2
35671: RET
// export function IsEmpty ( building ) ; begin
35672: LD_INT 0
35674: PPUSH
// if not building then
35675: LD_VAR 0 1
35679: NOT
35680: IFFALSE 35684
// exit ;
35682: GO 35727
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35684: LD_ADDR_VAR 0 2
35688: PUSH
35689: LD_VAR 0 1
35693: PUSH
35694: LD_INT 22
35696: PUSH
35697: LD_VAR 0 1
35701: PPUSH
35702: CALL_OW 255
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 58
35713: PUSH
35714: EMPTY
35715: LIST
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PPUSH
35721: CALL_OW 69
35725: IN
35726: ST_TO_ADDR
// end ;
35727: LD_VAR 0 2
35731: RET
// export function IsNotFull ( building ) ; begin
35732: LD_INT 0
35734: PPUSH
// if not building then
35735: LD_VAR 0 1
35739: NOT
35740: IFFALSE 35744
// exit ;
35742: GO 35763
// result := UnitsInside ( building ) < 6 ;
35744: LD_ADDR_VAR 0 2
35748: PUSH
35749: LD_VAR 0 1
35753: PPUSH
35754: CALL_OW 313
35758: PUSH
35759: LD_INT 6
35761: LESS
35762: ST_TO_ADDR
// end ;
35763: LD_VAR 0 2
35767: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35768: LD_INT 0
35770: PPUSH
35771: PPUSH
35772: PPUSH
35773: PPUSH
// tmp := [ ] ;
35774: LD_ADDR_VAR 0 3
35778: PUSH
35779: EMPTY
35780: ST_TO_ADDR
// list := [ ] ;
35781: LD_ADDR_VAR 0 5
35785: PUSH
35786: EMPTY
35787: ST_TO_ADDR
// for i = 16 to 25 do
35788: LD_ADDR_VAR 0 4
35792: PUSH
35793: DOUBLE
35794: LD_INT 16
35796: DEC
35797: ST_TO_ADDR
35798: LD_INT 25
35800: PUSH
35801: FOR_TO
35802: IFFALSE 35875
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35804: LD_ADDR_VAR 0 3
35808: PUSH
35809: LD_VAR 0 3
35813: PUSH
35814: LD_INT 22
35816: PUSH
35817: LD_VAR 0 1
35821: PPUSH
35822: CALL_OW 255
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 91
35833: PUSH
35834: LD_VAR 0 1
35838: PUSH
35839: LD_INT 6
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 30
35849: PUSH
35850: LD_VAR 0 4
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: PUSH
35864: EMPTY
35865: LIST
35866: PPUSH
35867: CALL_OW 69
35871: ADD
35872: ST_TO_ADDR
35873: GO 35801
35875: POP
35876: POP
// for i = 1 to tmp do
35877: LD_ADDR_VAR 0 4
35881: PUSH
35882: DOUBLE
35883: LD_INT 1
35885: DEC
35886: ST_TO_ADDR
35887: LD_VAR 0 3
35891: PUSH
35892: FOR_TO
35893: IFFALSE 35981
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35895: LD_ADDR_VAR 0 5
35899: PUSH
35900: LD_VAR 0 5
35904: PUSH
35905: LD_VAR 0 3
35909: PUSH
35910: LD_VAR 0 4
35914: ARRAY
35915: PPUSH
35916: CALL_OW 266
35920: PUSH
35921: LD_VAR 0 3
35925: PUSH
35926: LD_VAR 0 4
35930: ARRAY
35931: PPUSH
35932: CALL_OW 250
35936: PUSH
35937: LD_VAR 0 3
35941: PUSH
35942: LD_VAR 0 4
35946: ARRAY
35947: PPUSH
35948: CALL_OW 251
35952: PUSH
35953: LD_VAR 0 3
35957: PUSH
35958: LD_VAR 0 4
35962: ARRAY
35963: PPUSH
35964: CALL_OW 254
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: PUSH
35975: EMPTY
35976: LIST
35977: ADD
35978: ST_TO_ADDR
35979: GO 35892
35981: POP
35982: POP
// result := list ;
35983: LD_ADDR_VAR 0 2
35987: PUSH
35988: LD_VAR 0 5
35992: ST_TO_ADDR
// end ;
35993: LD_VAR 0 2
35997: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35998: LD_INT 0
36000: PPUSH
36001: PPUSH
36002: PPUSH
36003: PPUSH
36004: PPUSH
36005: PPUSH
36006: PPUSH
// if not factory then
36007: LD_VAR 0 1
36011: NOT
36012: IFFALSE 36016
// exit ;
36014: GO 36609
// if control = control_apeman then
36016: LD_VAR 0 4
36020: PUSH
36021: LD_INT 5
36023: EQUAL
36024: IFFALSE 36133
// begin tmp := UnitsInside ( factory ) ;
36026: LD_ADDR_VAR 0 8
36030: PUSH
36031: LD_VAR 0 1
36035: PPUSH
36036: CALL_OW 313
36040: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36041: LD_VAR 0 8
36045: PPUSH
36046: LD_INT 25
36048: PUSH
36049: LD_INT 12
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PPUSH
36056: CALL_OW 72
36060: NOT
36061: IFFALSE 36071
// control := control_manual ;
36063: LD_ADDR_VAR 0 4
36067: PUSH
36068: LD_INT 1
36070: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36071: LD_ADDR_VAR 0 8
36075: PUSH
36076: LD_VAR 0 1
36080: PPUSH
36081: CALL 35768 0 1
36085: ST_TO_ADDR
// if tmp then
36086: LD_VAR 0 8
36090: IFFALSE 36133
// begin for i in tmp do
36092: LD_ADDR_VAR 0 7
36096: PUSH
36097: LD_VAR 0 8
36101: PUSH
36102: FOR_IN
36103: IFFALSE 36131
// if i [ 1 ] = b_ext_radio then
36105: LD_VAR 0 7
36109: PUSH
36110: LD_INT 1
36112: ARRAY
36113: PUSH
36114: LD_INT 22
36116: EQUAL
36117: IFFALSE 36129
// begin control := control_remote ;
36119: LD_ADDR_VAR 0 4
36123: PUSH
36124: LD_INT 2
36126: ST_TO_ADDR
// break ;
36127: GO 36131
// end ;
36129: GO 36102
36131: POP
36132: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36133: LD_VAR 0 1
36137: PPUSH
36138: LD_VAR 0 2
36142: PPUSH
36143: LD_VAR 0 3
36147: PPUSH
36148: LD_VAR 0 4
36152: PPUSH
36153: LD_VAR 0 5
36157: PPUSH
36158: CALL_OW 448
36162: IFFALSE 36197
// begin result := [ chassis , engine , control , weapon ] ;
36164: LD_ADDR_VAR 0 6
36168: PUSH
36169: LD_VAR 0 2
36173: PUSH
36174: LD_VAR 0 3
36178: PUSH
36179: LD_VAR 0 4
36183: PUSH
36184: LD_VAR 0 5
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: ST_TO_ADDR
// exit ;
36195: GO 36609
// end ; _chassis := AvailableChassisList ( factory ) ;
36197: LD_ADDR_VAR 0 9
36201: PUSH
36202: LD_VAR 0 1
36206: PPUSH
36207: CALL_OW 475
36211: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36212: LD_ADDR_VAR 0 11
36216: PUSH
36217: LD_VAR 0 1
36221: PPUSH
36222: CALL_OW 476
36226: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36227: LD_ADDR_VAR 0 12
36231: PUSH
36232: LD_VAR 0 1
36236: PPUSH
36237: CALL_OW 477
36241: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36242: LD_ADDR_VAR 0 10
36246: PUSH
36247: LD_VAR 0 1
36251: PPUSH
36252: CALL_OW 478
36256: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36257: LD_VAR 0 9
36261: NOT
36262: PUSH
36263: LD_VAR 0 11
36267: NOT
36268: OR
36269: PUSH
36270: LD_VAR 0 12
36274: NOT
36275: OR
36276: PUSH
36277: LD_VAR 0 10
36281: NOT
36282: OR
36283: IFFALSE 36318
// begin result := [ chassis , engine , control , weapon ] ;
36285: LD_ADDR_VAR 0 6
36289: PUSH
36290: LD_VAR 0 2
36294: PUSH
36295: LD_VAR 0 3
36299: PUSH
36300: LD_VAR 0 4
36304: PUSH
36305: LD_VAR 0 5
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: ST_TO_ADDR
// exit ;
36316: GO 36609
// end ; if not chassis in _chassis then
36318: LD_VAR 0 2
36322: PUSH
36323: LD_VAR 0 9
36327: IN
36328: NOT
36329: IFFALSE 36355
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36331: LD_ADDR_VAR 0 2
36335: PUSH
36336: LD_VAR 0 9
36340: PUSH
36341: LD_INT 1
36343: PPUSH
36344: LD_VAR 0 9
36348: PPUSH
36349: CALL_OW 12
36353: ARRAY
36354: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36355: LD_VAR 0 2
36359: PPUSH
36360: LD_VAR 0 3
36364: PPUSH
36365: CALL 36614 0 2
36369: NOT
36370: IFFALSE 36429
// repeat engine := _engine [ 1 ] ;
36372: LD_ADDR_VAR 0 3
36376: PUSH
36377: LD_VAR 0 11
36381: PUSH
36382: LD_INT 1
36384: ARRAY
36385: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36386: LD_ADDR_VAR 0 11
36390: PUSH
36391: LD_VAR 0 11
36395: PPUSH
36396: LD_INT 1
36398: PPUSH
36399: CALL_OW 3
36403: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36404: LD_VAR 0 2
36408: PPUSH
36409: LD_VAR 0 3
36413: PPUSH
36414: CALL 36614 0 2
36418: PUSH
36419: LD_VAR 0 11
36423: PUSH
36424: EMPTY
36425: EQUAL
36426: OR
36427: IFFALSE 36372
// if not control in _control then
36429: LD_VAR 0 4
36433: PUSH
36434: LD_VAR 0 12
36438: IN
36439: NOT
36440: IFFALSE 36466
// control := _control [ rand ( 1 , _control ) ] ;
36442: LD_ADDR_VAR 0 4
36446: PUSH
36447: LD_VAR 0 12
36451: PUSH
36452: LD_INT 1
36454: PPUSH
36455: LD_VAR 0 12
36459: PPUSH
36460: CALL_OW 12
36464: ARRAY
36465: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36466: LD_VAR 0 2
36470: PPUSH
36471: LD_VAR 0 5
36475: PPUSH
36476: CALL 36834 0 2
36480: NOT
36481: IFFALSE 36540
// repeat weapon := _weapon [ 1 ] ;
36483: LD_ADDR_VAR 0 5
36487: PUSH
36488: LD_VAR 0 10
36492: PUSH
36493: LD_INT 1
36495: ARRAY
36496: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36497: LD_ADDR_VAR 0 10
36501: PUSH
36502: LD_VAR 0 10
36506: PPUSH
36507: LD_INT 1
36509: PPUSH
36510: CALL_OW 3
36514: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36515: LD_VAR 0 2
36519: PPUSH
36520: LD_VAR 0 5
36524: PPUSH
36525: CALL 36834 0 2
36529: PUSH
36530: LD_VAR 0 10
36534: PUSH
36535: EMPTY
36536: EQUAL
36537: OR
36538: IFFALSE 36483
// result := [ ] ;
36540: LD_ADDR_VAR 0 6
36544: PUSH
36545: EMPTY
36546: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36547: LD_VAR 0 1
36551: PPUSH
36552: LD_VAR 0 2
36556: PPUSH
36557: LD_VAR 0 3
36561: PPUSH
36562: LD_VAR 0 4
36566: PPUSH
36567: LD_VAR 0 5
36571: PPUSH
36572: CALL_OW 448
36576: IFFALSE 36609
// result := [ chassis , engine , control , weapon ] ;
36578: LD_ADDR_VAR 0 6
36582: PUSH
36583: LD_VAR 0 2
36587: PUSH
36588: LD_VAR 0 3
36592: PUSH
36593: LD_VAR 0 4
36597: PUSH
36598: LD_VAR 0 5
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: ST_TO_ADDR
// end ;
36609: LD_VAR 0 6
36613: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36614: LD_INT 0
36616: PPUSH
// if not chassis or not engine then
36617: LD_VAR 0 1
36621: NOT
36622: PUSH
36623: LD_VAR 0 2
36627: NOT
36628: OR
36629: IFFALSE 36633
// exit ;
36631: GO 36829
// case engine of engine_solar :
36633: LD_VAR 0 2
36637: PUSH
36638: LD_INT 2
36640: DOUBLE
36641: EQUAL
36642: IFTRUE 36646
36644: GO 36684
36646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36647: LD_ADDR_VAR 0 3
36651: PUSH
36652: LD_INT 11
36654: PUSH
36655: LD_INT 12
36657: PUSH
36658: LD_INT 13
36660: PUSH
36661: LD_INT 14
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: LD_INT 2
36669: PUSH
36670: LD_INT 3
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: ST_TO_ADDR
36682: GO 36813
36684: LD_INT 1
36686: DOUBLE
36687: EQUAL
36688: IFTRUE 36692
36690: GO 36754
36692: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36693: LD_ADDR_VAR 0 3
36697: PUSH
36698: LD_INT 11
36700: PUSH
36701: LD_INT 12
36703: PUSH
36704: LD_INT 13
36706: PUSH
36707: LD_INT 14
36709: PUSH
36710: LD_INT 1
36712: PUSH
36713: LD_INT 2
36715: PUSH
36716: LD_INT 3
36718: PUSH
36719: LD_INT 4
36721: PUSH
36722: LD_INT 5
36724: PUSH
36725: LD_INT 21
36727: PUSH
36728: LD_INT 23
36730: PUSH
36731: LD_INT 22
36733: PUSH
36734: LD_INT 24
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: ST_TO_ADDR
36752: GO 36813
36754: LD_INT 3
36756: DOUBLE
36757: EQUAL
36758: IFTRUE 36762
36760: GO 36812
36762: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36763: LD_ADDR_VAR 0 3
36767: PUSH
36768: LD_INT 13
36770: PUSH
36771: LD_INT 14
36773: PUSH
36774: LD_INT 2
36776: PUSH
36777: LD_INT 3
36779: PUSH
36780: LD_INT 4
36782: PUSH
36783: LD_INT 5
36785: PUSH
36786: LD_INT 21
36788: PUSH
36789: LD_INT 22
36791: PUSH
36792: LD_INT 23
36794: PUSH
36795: LD_INT 24
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: ST_TO_ADDR
36810: GO 36813
36812: POP
// result := ( chassis in result ) ;
36813: LD_ADDR_VAR 0 3
36817: PUSH
36818: LD_VAR 0 1
36822: PUSH
36823: LD_VAR 0 3
36827: IN
36828: ST_TO_ADDR
// end ;
36829: LD_VAR 0 3
36833: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36834: LD_INT 0
36836: PPUSH
// if not chassis or not weapon then
36837: LD_VAR 0 1
36841: NOT
36842: PUSH
36843: LD_VAR 0 2
36847: NOT
36848: OR
36849: IFFALSE 36853
// exit ;
36851: GO 37879
// case weapon of us_machine_gun :
36853: LD_VAR 0 2
36857: PUSH
36858: LD_INT 2
36860: DOUBLE
36861: EQUAL
36862: IFTRUE 36866
36864: GO 36896
36866: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36867: LD_ADDR_VAR 0 3
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: LD_INT 2
36877: PUSH
36878: LD_INT 3
36880: PUSH
36881: LD_INT 4
36883: PUSH
36884: LD_INT 5
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: ST_TO_ADDR
36894: GO 37863
36896: LD_INT 3
36898: DOUBLE
36899: EQUAL
36900: IFTRUE 36904
36902: GO 36934
36904: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36905: LD_ADDR_VAR 0 3
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: LD_INT 3
36918: PUSH
36919: LD_INT 4
36921: PUSH
36922: LD_INT 5
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: ST_TO_ADDR
36932: GO 37863
36934: LD_INT 11
36936: DOUBLE
36937: EQUAL
36938: IFTRUE 36942
36940: GO 36972
36942: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36943: LD_ADDR_VAR 0 3
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: LD_INT 3
36956: PUSH
36957: LD_INT 4
36959: PUSH
36960: LD_INT 5
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: ST_TO_ADDR
36970: GO 37863
36972: LD_INT 4
36974: DOUBLE
36975: EQUAL
36976: IFTRUE 36980
36978: GO 37006
36980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36981: LD_ADDR_VAR 0 3
36985: PUSH
36986: LD_INT 2
36988: PUSH
36989: LD_INT 3
36991: PUSH
36992: LD_INT 4
36994: PUSH
36995: LD_INT 5
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: ST_TO_ADDR
37004: GO 37863
37006: LD_INT 5
37008: DOUBLE
37009: EQUAL
37010: IFTRUE 37014
37012: GO 37040
37014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37015: LD_ADDR_VAR 0 3
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: LD_INT 3
37025: PUSH
37026: LD_INT 4
37028: PUSH
37029: LD_INT 5
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: ST_TO_ADDR
37038: GO 37863
37040: LD_INT 9
37042: DOUBLE
37043: EQUAL
37044: IFTRUE 37048
37046: GO 37074
37048: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37049: LD_ADDR_VAR 0 3
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: LD_INT 3
37059: PUSH
37060: LD_INT 4
37062: PUSH
37063: LD_INT 5
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: ST_TO_ADDR
37072: GO 37863
37074: LD_INT 7
37076: DOUBLE
37077: EQUAL
37078: IFTRUE 37082
37080: GO 37108
37082: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37083: LD_ADDR_VAR 0 3
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: LD_INT 3
37093: PUSH
37094: LD_INT 4
37096: PUSH
37097: LD_INT 5
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: ST_TO_ADDR
37106: GO 37863
37108: LD_INT 12
37110: DOUBLE
37111: EQUAL
37112: IFTRUE 37116
37114: GO 37142
37116: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37117: LD_ADDR_VAR 0 3
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: LD_INT 3
37127: PUSH
37128: LD_INT 4
37130: PUSH
37131: LD_INT 5
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: ST_TO_ADDR
37140: GO 37863
37142: LD_INT 13
37144: DOUBLE
37145: EQUAL
37146: IFTRUE 37150
37148: GO 37176
37150: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37151: LD_ADDR_VAR 0 3
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: LD_INT 3
37161: PUSH
37162: LD_INT 4
37164: PUSH
37165: LD_INT 5
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: ST_TO_ADDR
37174: GO 37863
37176: LD_INT 14
37178: DOUBLE
37179: EQUAL
37180: IFTRUE 37184
37182: GO 37202
37184: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37185: LD_ADDR_VAR 0 3
37189: PUSH
37190: LD_INT 4
37192: PUSH
37193: LD_INT 5
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: ST_TO_ADDR
37200: GO 37863
37202: LD_INT 6
37204: DOUBLE
37205: EQUAL
37206: IFTRUE 37210
37208: GO 37228
37210: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37211: LD_ADDR_VAR 0 3
37215: PUSH
37216: LD_INT 4
37218: PUSH
37219: LD_INT 5
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: ST_TO_ADDR
37226: GO 37863
37228: LD_INT 10
37230: DOUBLE
37231: EQUAL
37232: IFTRUE 37236
37234: GO 37254
37236: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37237: LD_ADDR_VAR 0 3
37241: PUSH
37242: LD_INT 4
37244: PUSH
37245: LD_INT 5
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: ST_TO_ADDR
37252: GO 37863
37254: LD_INT 22
37256: DOUBLE
37257: EQUAL
37258: IFTRUE 37262
37260: GO 37288
37262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37263: LD_ADDR_VAR 0 3
37267: PUSH
37268: LD_INT 11
37270: PUSH
37271: LD_INT 12
37273: PUSH
37274: LD_INT 13
37276: PUSH
37277: LD_INT 14
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: ST_TO_ADDR
37286: GO 37863
37288: LD_INT 23
37290: DOUBLE
37291: EQUAL
37292: IFTRUE 37296
37294: GO 37322
37296: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37297: LD_ADDR_VAR 0 3
37301: PUSH
37302: LD_INT 11
37304: PUSH
37305: LD_INT 12
37307: PUSH
37308: LD_INT 13
37310: PUSH
37311: LD_INT 14
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: ST_TO_ADDR
37320: GO 37863
37322: LD_INT 24
37324: DOUBLE
37325: EQUAL
37326: IFTRUE 37330
37328: GO 37356
37330: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37331: LD_ADDR_VAR 0 3
37335: PUSH
37336: LD_INT 11
37338: PUSH
37339: LD_INT 12
37341: PUSH
37342: LD_INT 13
37344: PUSH
37345: LD_INT 14
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: ST_TO_ADDR
37354: GO 37863
37356: LD_INT 30
37358: DOUBLE
37359: EQUAL
37360: IFTRUE 37364
37362: GO 37390
37364: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37365: LD_ADDR_VAR 0 3
37369: PUSH
37370: LD_INT 11
37372: PUSH
37373: LD_INT 12
37375: PUSH
37376: LD_INT 13
37378: PUSH
37379: LD_INT 14
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: ST_TO_ADDR
37388: GO 37863
37390: LD_INT 25
37392: DOUBLE
37393: EQUAL
37394: IFTRUE 37398
37396: GO 37416
37398: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37399: LD_ADDR_VAR 0 3
37403: PUSH
37404: LD_INT 13
37406: PUSH
37407: LD_INT 14
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: ST_TO_ADDR
37414: GO 37863
37416: LD_INT 27
37418: DOUBLE
37419: EQUAL
37420: IFTRUE 37424
37422: GO 37442
37424: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37425: LD_ADDR_VAR 0 3
37429: PUSH
37430: LD_INT 13
37432: PUSH
37433: LD_INT 14
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: ST_TO_ADDR
37440: GO 37863
37442: LD_INT 28
37444: DOUBLE
37445: EQUAL
37446: IFTRUE 37450
37448: GO 37468
37450: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37451: LD_ADDR_VAR 0 3
37455: PUSH
37456: LD_INT 13
37458: PUSH
37459: LD_INT 14
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: ST_TO_ADDR
37466: GO 37863
37468: LD_INT 29
37470: DOUBLE
37471: EQUAL
37472: IFTRUE 37476
37474: GO 37494
37476: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37477: LD_ADDR_VAR 0 3
37481: PUSH
37482: LD_INT 13
37484: PUSH
37485: LD_INT 14
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: ST_TO_ADDR
37492: GO 37863
37494: LD_INT 31
37496: DOUBLE
37497: EQUAL
37498: IFTRUE 37502
37500: GO 37520
37502: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37503: LD_ADDR_VAR 0 3
37507: PUSH
37508: LD_INT 13
37510: PUSH
37511: LD_INT 14
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: ST_TO_ADDR
37518: GO 37863
37520: LD_INT 26
37522: DOUBLE
37523: EQUAL
37524: IFTRUE 37528
37526: GO 37546
37528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37529: LD_ADDR_VAR 0 3
37533: PUSH
37534: LD_INT 13
37536: PUSH
37537: LD_INT 14
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: ST_TO_ADDR
37544: GO 37863
37546: LD_INT 42
37548: DOUBLE
37549: EQUAL
37550: IFTRUE 37554
37552: GO 37580
37554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37555: LD_ADDR_VAR 0 3
37559: PUSH
37560: LD_INT 21
37562: PUSH
37563: LD_INT 22
37565: PUSH
37566: LD_INT 23
37568: PUSH
37569: LD_INT 24
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: ST_TO_ADDR
37578: GO 37863
37580: LD_INT 43
37582: DOUBLE
37583: EQUAL
37584: IFTRUE 37588
37586: GO 37614
37588: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37589: LD_ADDR_VAR 0 3
37593: PUSH
37594: LD_INT 21
37596: PUSH
37597: LD_INT 22
37599: PUSH
37600: LD_INT 23
37602: PUSH
37603: LD_INT 24
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: ST_TO_ADDR
37612: GO 37863
37614: LD_INT 44
37616: DOUBLE
37617: EQUAL
37618: IFTRUE 37622
37620: GO 37648
37622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37623: LD_ADDR_VAR 0 3
37627: PUSH
37628: LD_INT 21
37630: PUSH
37631: LD_INT 22
37633: PUSH
37634: LD_INT 23
37636: PUSH
37637: LD_INT 24
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: ST_TO_ADDR
37646: GO 37863
37648: LD_INT 45
37650: DOUBLE
37651: EQUAL
37652: IFTRUE 37656
37654: GO 37682
37656: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37657: LD_ADDR_VAR 0 3
37661: PUSH
37662: LD_INT 21
37664: PUSH
37665: LD_INT 22
37667: PUSH
37668: LD_INT 23
37670: PUSH
37671: LD_INT 24
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: ST_TO_ADDR
37680: GO 37863
37682: LD_INT 49
37684: DOUBLE
37685: EQUAL
37686: IFTRUE 37690
37688: GO 37716
37690: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37691: LD_ADDR_VAR 0 3
37695: PUSH
37696: LD_INT 21
37698: PUSH
37699: LD_INT 22
37701: PUSH
37702: LD_INT 23
37704: PUSH
37705: LD_INT 24
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: ST_TO_ADDR
37714: GO 37863
37716: LD_INT 51
37718: DOUBLE
37719: EQUAL
37720: IFTRUE 37724
37722: GO 37750
37724: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37725: LD_ADDR_VAR 0 3
37729: PUSH
37730: LD_INT 21
37732: PUSH
37733: LD_INT 22
37735: PUSH
37736: LD_INT 23
37738: PUSH
37739: LD_INT 24
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: ST_TO_ADDR
37748: GO 37863
37750: LD_INT 52
37752: DOUBLE
37753: EQUAL
37754: IFTRUE 37758
37756: GO 37784
37758: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37759: LD_ADDR_VAR 0 3
37763: PUSH
37764: LD_INT 21
37766: PUSH
37767: LD_INT 22
37769: PUSH
37770: LD_INT 23
37772: PUSH
37773: LD_INT 24
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: ST_TO_ADDR
37782: GO 37863
37784: LD_INT 53
37786: DOUBLE
37787: EQUAL
37788: IFTRUE 37792
37790: GO 37810
37792: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37793: LD_ADDR_VAR 0 3
37797: PUSH
37798: LD_INT 23
37800: PUSH
37801: LD_INT 24
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: ST_TO_ADDR
37808: GO 37863
37810: LD_INT 46
37812: DOUBLE
37813: EQUAL
37814: IFTRUE 37818
37816: GO 37836
37818: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37819: LD_ADDR_VAR 0 3
37823: PUSH
37824: LD_INT 23
37826: PUSH
37827: LD_INT 24
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: ST_TO_ADDR
37834: GO 37863
37836: LD_INT 47
37838: DOUBLE
37839: EQUAL
37840: IFTRUE 37844
37842: GO 37862
37844: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37845: LD_ADDR_VAR 0 3
37849: PUSH
37850: LD_INT 23
37852: PUSH
37853: LD_INT 24
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: ST_TO_ADDR
37860: GO 37863
37862: POP
// result := ( chassis in result ) ;
37863: LD_ADDR_VAR 0 3
37867: PUSH
37868: LD_VAR 0 1
37872: PUSH
37873: LD_VAR 0 3
37877: IN
37878: ST_TO_ADDR
// end ;
37879: LD_VAR 0 3
37883: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37884: LD_INT 0
37886: PPUSH
37887: PPUSH
37888: PPUSH
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
// result := array ;
37893: LD_ADDR_VAR 0 5
37897: PUSH
37898: LD_VAR 0 1
37902: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37903: LD_VAR 0 1
37907: NOT
37908: PUSH
37909: LD_VAR 0 2
37913: NOT
37914: OR
37915: PUSH
37916: LD_VAR 0 3
37920: NOT
37921: OR
37922: PUSH
37923: LD_VAR 0 2
37927: PUSH
37928: LD_VAR 0 1
37932: GREATER
37933: OR
37934: PUSH
37935: LD_VAR 0 3
37939: PUSH
37940: LD_VAR 0 1
37944: GREATER
37945: OR
37946: IFFALSE 37950
// exit ;
37948: GO 38246
// if direction then
37950: LD_VAR 0 4
37954: IFFALSE 38018
// begin d := 1 ;
37956: LD_ADDR_VAR 0 9
37960: PUSH
37961: LD_INT 1
37963: ST_TO_ADDR
// if i_from > i_to then
37964: LD_VAR 0 2
37968: PUSH
37969: LD_VAR 0 3
37973: GREATER
37974: IFFALSE 38000
// length := ( array - i_from ) + i_to else
37976: LD_ADDR_VAR 0 11
37980: PUSH
37981: LD_VAR 0 1
37985: PUSH
37986: LD_VAR 0 2
37990: MINUS
37991: PUSH
37992: LD_VAR 0 3
37996: PLUS
37997: ST_TO_ADDR
37998: GO 38016
// length := i_to - i_from ;
38000: LD_ADDR_VAR 0 11
38004: PUSH
38005: LD_VAR 0 3
38009: PUSH
38010: LD_VAR 0 2
38014: MINUS
38015: ST_TO_ADDR
// end else
38016: GO 38079
// begin d := - 1 ;
38018: LD_ADDR_VAR 0 9
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: ST_TO_ADDR
// if i_from > i_to then
38027: LD_VAR 0 2
38031: PUSH
38032: LD_VAR 0 3
38036: GREATER
38037: IFFALSE 38057
// length := i_from - i_to else
38039: LD_ADDR_VAR 0 11
38043: PUSH
38044: LD_VAR 0 2
38048: PUSH
38049: LD_VAR 0 3
38053: MINUS
38054: ST_TO_ADDR
38055: GO 38079
// length := ( array - i_to ) + i_from ;
38057: LD_ADDR_VAR 0 11
38061: PUSH
38062: LD_VAR 0 1
38066: PUSH
38067: LD_VAR 0 3
38071: MINUS
38072: PUSH
38073: LD_VAR 0 2
38077: PLUS
38078: ST_TO_ADDR
// end ; if not length then
38079: LD_VAR 0 11
38083: NOT
38084: IFFALSE 38088
// exit ;
38086: GO 38246
// tmp := array ;
38088: LD_ADDR_VAR 0 10
38092: PUSH
38093: LD_VAR 0 1
38097: ST_TO_ADDR
// for i = 1 to length do
38098: LD_ADDR_VAR 0 6
38102: PUSH
38103: DOUBLE
38104: LD_INT 1
38106: DEC
38107: ST_TO_ADDR
38108: LD_VAR 0 11
38112: PUSH
38113: FOR_TO
38114: IFFALSE 38234
// begin for j = 1 to array do
38116: LD_ADDR_VAR 0 7
38120: PUSH
38121: DOUBLE
38122: LD_INT 1
38124: DEC
38125: ST_TO_ADDR
38126: LD_VAR 0 1
38130: PUSH
38131: FOR_TO
38132: IFFALSE 38220
// begin k := j + d ;
38134: LD_ADDR_VAR 0 8
38138: PUSH
38139: LD_VAR 0 7
38143: PUSH
38144: LD_VAR 0 9
38148: PLUS
38149: ST_TO_ADDR
// if k > array then
38150: LD_VAR 0 8
38154: PUSH
38155: LD_VAR 0 1
38159: GREATER
38160: IFFALSE 38170
// k := 1 ;
38162: LD_ADDR_VAR 0 8
38166: PUSH
38167: LD_INT 1
38169: ST_TO_ADDR
// if not k then
38170: LD_VAR 0 8
38174: NOT
38175: IFFALSE 38187
// k := array ;
38177: LD_ADDR_VAR 0 8
38181: PUSH
38182: LD_VAR 0 1
38186: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38187: LD_ADDR_VAR 0 10
38191: PUSH
38192: LD_VAR 0 10
38196: PPUSH
38197: LD_VAR 0 8
38201: PPUSH
38202: LD_VAR 0 1
38206: PUSH
38207: LD_VAR 0 7
38211: ARRAY
38212: PPUSH
38213: CALL_OW 1
38217: ST_TO_ADDR
// end ;
38218: GO 38131
38220: POP
38221: POP
// array := tmp ;
38222: LD_ADDR_VAR 0 1
38226: PUSH
38227: LD_VAR 0 10
38231: ST_TO_ADDR
// end ;
38232: GO 38113
38234: POP
38235: POP
// result := array ;
38236: LD_ADDR_VAR 0 5
38240: PUSH
38241: LD_VAR 0 1
38245: ST_TO_ADDR
// end ;
38246: LD_VAR 0 5
38250: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38251: LD_INT 0
38253: PPUSH
38254: PPUSH
// result := 0 ;
38255: LD_ADDR_VAR 0 3
38259: PUSH
38260: LD_INT 0
38262: ST_TO_ADDR
// if not array or not value in array then
38263: LD_VAR 0 1
38267: NOT
38268: PUSH
38269: LD_VAR 0 2
38273: PUSH
38274: LD_VAR 0 1
38278: IN
38279: NOT
38280: OR
38281: IFFALSE 38285
// exit ;
38283: GO 38339
// for i = 1 to array do
38285: LD_ADDR_VAR 0 4
38289: PUSH
38290: DOUBLE
38291: LD_INT 1
38293: DEC
38294: ST_TO_ADDR
38295: LD_VAR 0 1
38299: PUSH
38300: FOR_TO
38301: IFFALSE 38337
// if value = array [ i ] then
38303: LD_VAR 0 2
38307: PUSH
38308: LD_VAR 0 1
38312: PUSH
38313: LD_VAR 0 4
38317: ARRAY
38318: EQUAL
38319: IFFALSE 38335
// begin result := i ;
38321: LD_ADDR_VAR 0 3
38325: PUSH
38326: LD_VAR 0 4
38330: ST_TO_ADDR
// exit ;
38331: POP
38332: POP
38333: GO 38339
// end ;
38335: GO 38300
38337: POP
38338: POP
// end ;
38339: LD_VAR 0 3
38343: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38344: LD_INT 0
38346: PPUSH
// vc_chassis := chassis ;
38347: LD_ADDR_OWVAR 37
38351: PUSH
38352: LD_VAR 0 1
38356: ST_TO_ADDR
// vc_engine := engine ;
38357: LD_ADDR_OWVAR 39
38361: PUSH
38362: LD_VAR 0 2
38366: ST_TO_ADDR
// vc_control := control ;
38367: LD_ADDR_OWVAR 38
38371: PUSH
38372: LD_VAR 0 3
38376: ST_TO_ADDR
// vc_weapon := weapon ;
38377: LD_ADDR_OWVAR 40
38381: PUSH
38382: LD_VAR 0 4
38386: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38387: LD_ADDR_OWVAR 41
38391: PUSH
38392: LD_VAR 0 5
38396: ST_TO_ADDR
// end ;
38397: LD_VAR 0 6
38401: RET
// export function WantPlant ( unit ) ; var task ; begin
38402: LD_INT 0
38404: PPUSH
38405: PPUSH
// result := false ;
38406: LD_ADDR_VAR 0 2
38410: PUSH
38411: LD_INT 0
38413: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38414: LD_ADDR_VAR 0 3
38418: PUSH
38419: LD_VAR 0 1
38423: PPUSH
38424: CALL_OW 437
38428: ST_TO_ADDR
// if task then
38429: LD_VAR 0 3
38433: IFFALSE 38461
// if task [ 1 ] [ 1 ] = p then
38435: LD_VAR 0 3
38439: PUSH
38440: LD_INT 1
38442: ARRAY
38443: PUSH
38444: LD_INT 1
38446: ARRAY
38447: PUSH
38448: LD_STRING p
38450: EQUAL
38451: IFFALSE 38461
// result := true ;
38453: LD_ADDR_VAR 0 2
38457: PUSH
38458: LD_INT 1
38460: ST_TO_ADDR
// end ;
38461: LD_VAR 0 2
38465: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38466: LD_INT 0
38468: PPUSH
38469: PPUSH
38470: PPUSH
38471: PPUSH
// if pos < 1 then
38472: LD_VAR 0 2
38476: PUSH
38477: LD_INT 1
38479: LESS
38480: IFFALSE 38484
// exit ;
38482: GO 38787
// if pos = 1 then
38484: LD_VAR 0 2
38488: PUSH
38489: LD_INT 1
38491: EQUAL
38492: IFFALSE 38525
// result := Replace ( arr , pos [ 1 ] , value ) else
38494: LD_ADDR_VAR 0 4
38498: PUSH
38499: LD_VAR 0 1
38503: PPUSH
38504: LD_VAR 0 2
38508: PUSH
38509: LD_INT 1
38511: ARRAY
38512: PPUSH
38513: LD_VAR 0 3
38517: PPUSH
38518: CALL_OW 1
38522: ST_TO_ADDR
38523: GO 38787
// begin tmp := arr ;
38525: LD_ADDR_VAR 0 6
38529: PUSH
38530: LD_VAR 0 1
38534: ST_TO_ADDR
// s_arr := [ tmp ] ;
38535: LD_ADDR_VAR 0 7
38539: PUSH
38540: LD_VAR 0 6
38544: PUSH
38545: EMPTY
38546: LIST
38547: ST_TO_ADDR
// for i = 1 to pos - 1 do
38548: LD_ADDR_VAR 0 5
38552: PUSH
38553: DOUBLE
38554: LD_INT 1
38556: DEC
38557: ST_TO_ADDR
38558: LD_VAR 0 2
38562: PUSH
38563: LD_INT 1
38565: MINUS
38566: PUSH
38567: FOR_TO
38568: IFFALSE 38613
// begin tmp := tmp [ pos [ i ] ] ;
38570: LD_ADDR_VAR 0 6
38574: PUSH
38575: LD_VAR 0 6
38579: PUSH
38580: LD_VAR 0 2
38584: PUSH
38585: LD_VAR 0 5
38589: ARRAY
38590: ARRAY
38591: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38592: LD_ADDR_VAR 0 7
38596: PUSH
38597: LD_VAR 0 7
38601: PUSH
38602: LD_VAR 0 6
38606: PUSH
38607: EMPTY
38608: LIST
38609: ADD
38610: ST_TO_ADDR
// end ;
38611: GO 38567
38613: POP
38614: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38615: LD_ADDR_VAR 0 6
38619: PUSH
38620: LD_VAR 0 6
38624: PPUSH
38625: LD_VAR 0 2
38629: PUSH
38630: LD_VAR 0 2
38634: ARRAY
38635: PPUSH
38636: LD_VAR 0 3
38640: PPUSH
38641: CALL_OW 1
38645: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38646: LD_ADDR_VAR 0 7
38650: PUSH
38651: LD_VAR 0 7
38655: PPUSH
38656: LD_VAR 0 7
38660: PPUSH
38661: LD_VAR 0 6
38665: PPUSH
38666: CALL_OW 1
38670: ST_TO_ADDR
// for i = s_arr downto 2 do
38671: LD_ADDR_VAR 0 5
38675: PUSH
38676: DOUBLE
38677: LD_VAR 0 7
38681: INC
38682: ST_TO_ADDR
38683: LD_INT 2
38685: PUSH
38686: FOR_DOWNTO
38687: IFFALSE 38771
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38689: LD_ADDR_VAR 0 6
38693: PUSH
38694: LD_VAR 0 7
38698: PUSH
38699: LD_VAR 0 5
38703: PUSH
38704: LD_INT 1
38706: MINUS
38707: ARRAY
38708: PPUSH
38709: LD_VAR 0 2
38713: PUSH
38714: LD_VAR 0 5
38718: PUSH
38719: LD_INT 1
38721: MINUS
38722: ARRAY
38723: PPUSH
38724: LD_VAR 0 7
38728: PUSH
38729: LD_VAR 0 5
38733: ARRAY
38734: PPUSH
38735: CALL_OW 1
38739: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38740: LD_ADDR_VAR 0 7
38744: PUSH
38745: LD_VAR 0 7
38749: PPUSH
38750: LD_VAR 0 5
38754: PUSH
38755: LD_INT 1
38757: MINUS
38758: PPUSH
38759: LD_VAR 0 6
38763: PPUSH
38764: CALL_OW 1
38768: ST_TO_ADDR
// end ;
38769: GO 38686
38771: POP
38772: POP
// result := s_arr [ 1 ] ;
38773: LD_ADDR_VAR 0 4
38777: PUSH
38778: LD_VAR 0 7
38782: PUSH
38783: LD_INT 1
38785: ARRAY
38786: ST_TO_ADDR
// end ; end ;
38787: LD_VAR 0 4
38791: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38792: LD_INT 0
38794: PPUSH
38795: PPUSH
// if not list then
38796: LD_VAR 0 1
38800: NOT
38801: IFFALSE 38805
// exit ;
38803: GO 38896
// i := list [ pos1 ] ;
38805: LD_ADDR_VAR 0 5
38809: PUSH
38810: LD_VAR 0 1
38814: PUSH
38815: LD_VAR 0 2
38819: ARRAY
38820: ST_TO_ADDR
// if not i then
38821: LD_VAR 0 5
38825: NOT
38826: IFFALSE 38830
// exit ;
38828: GO 38896
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38830: LD_ADDR_VAR 0 1
38834: PUSH
38835: LD_VAR 0 1
38839: PPUSH
38840: LD_VAR 0 2
38844: PPUSH
38845: LD_VAR 0 1
38849: PUSH
38850: LD_VAR 0 3
38854: ARRAY
38855: PPUSH
38856: CALL_OW 1
38860: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38861: LD_ADDR_VAR 0 1
38865: PUSH
38866: LD_VAR 0 1
38870: PPUSH
38871: LD_VAR 0 3
38875: PPUSH
38876: LD_VAR 0 5
38880: PPUSH
38881: CALL_OW 1
38885: ST_TO_ADDR
// result := list ;
38886: LD_ADDR_VAR 0 4
38890: PUSH
38891: LD_VAR 0 1
38895: ST_TO_ADDR
// end ;
38896: LD_VAR 0 4
38900: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38901: LD_INT 0
38903: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38904: LD_ADDR_VAR 0 5
38908: PUSH
38909: LD_VAR 0 1
38913: PPUSH
38914: CALL_OW 250
38918: PPUSH
38919: LD_VAR 0 1
38923: PPUSH
38924: CALL_OW 251
38928: PPUSH
38929: LD_VAR 0 2
38933: PPUSH
38934: LD_VAR 0 3
38938: PPUSH
38939: LD_VAR 0 4
38943: PPUSH
38944: CALL 38954 0 5
38948: ST_TO_ADDR
// end ;
38949: LD_VAR 0 5
38953: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38954: LD_INT 0
38956: PPUSH
38957: PPUSH
38958: PPUSH
38959: PPUSH
// if not list then
38960: LD_VAR 0 3
38964: NOT
38965: IFFALSE 38969
// exit ;
38967: GO 39357
// result := [ ] ;
38969: LD_ADDR_VAR 0 6
38973: PUSH
38974: EMPTY
38975: ST_TO_ADDR
// for i in list do
38976: LD_ADDR_VAR 0 7
38980: PUSH
38981: LD_VAR 0 3
38985: PUSH
38986: FOR_IN
38987: IFFALSE 39189
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38989: LD_ADDR_VAR 0 9
38993: PUSH
38994: LD_VAR 0 7
38998: PPUSH
38999: LD_VAR 0 1
39003: PPUSH
39004: LD_VAR 0 2
39008: PPUSH
39009: CALL_OW 297
39013: ST_TO_ADDR
// if not result then
39014: LD_VAR 0 6
39018: NOT
39019: IFFALSE 39045
// result := [ [ i , tmp ] ] else
39021: LD_ADDR_VAR 0 6
39025: PUSH
39026: LD_VAR 0 7
39030: PUSH
39031: LD_VAR 0 9
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: EMPTY
39041: LIST
39042: ST_TO_ADDR
39043: GO 39187
// begin if result [ result ] [ 2 ] < tmp then
39045: LD_VAR 0 6
39049: PUSH
39050: LD_VAR 0 6
39054: ARRAY
39055: PUSH
39056: LD_INT 2
39058: ARRAY
39059: PUSH
39060: LD_VAR 0 9
39064: LESS
39065: IFFALSE 39107
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39067: LD_ADDR_VAR 0 6
39071: PUSH
39072: LD_VAR 0 6
39076: PPUSH
39077: LD_VAR 0 6
39081: PUSH
39082: LD_INT 1
39084: PLUS
39085: PPUSH
39086: LD_VAR 0 7
39090: PUSH
39091: LD_VAR 0 9
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PPUSH
39100: CALL_OW 2
39104: ST_TO_ADDR
39105: GO 39187
// for j = 1 to result do
39107: LD_ADDR_VAR 0 8
39111: PUSH
39112: DOUBLE
39113: LD_INT 1
39115: DEC
39116: ST_TO_ADDR
39117: LD_VAR 0 6
39121: PUSH
39122: FOR_TO
39123: IFFALSE 39185
// begin if tmp < result [ j ] [ 2 ] then
39125: LD_VAR 0 9
39129: PUSH
39130: LD_VAR 0 6
39134: PUSH
39135: LD_VAR 0 8
39139: ARRAY
39140: PUSH
39141: LD_INT 2
39143: ARRAY
39144: LESS
39145: IFFALSE 39183
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39147: LD_ADDR_VAR 0 6
39151: PUSH
39152: LD_VAR 0 6
39156: PPUSH
39157: LD_VAR 0 8
39161: PPUSH
39162: LD_VAR 0 7
39166: PUSH
39167: LD_VAR 0 9
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PPUSH
39176: CALL_OW 2
39180: ST_TO_ADDR
// break ;
39181: GO 39185
// end ; end ;
39183: GO 39122
39185: POP
39186: POP
// end ; end ;
39187: GO 38986
39189: POP
39190: POP
// if result and not asc then
39191: LD_VAR 0 6
39195: PUSH
39196: LD_VAR 0 4
39200: NOT
39201: AND
39202: IFFALSE 39277
// begin tmp := result ;
39204: LD_ADDR_VAR 0 9
39208: PUSH
39209: LD_VAR 0 6
39213: ST_TO_ADDR
// for i = tmp downto 1 do
39214: LD_ADDR_VAR 0 7
39218: PUSH
39219: DOUBLE
39220: LD_VAR 0 9
39224: INC
39225: ST_TO_ADDR
39226: LD_INT 1
39228: PUSH
39229: FOR_DOWNTO
39230: IFFALSE 39275
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39232: LD_ADDR_VAR 0 6
39236: PUSH
39237: LD_VAR 0 6
39241: PPUSH
39242: LD_VAR 0 9
39246: PUSH
39247: LD_VAR 0 7
39251: MINUS
39252: PUSH
39253: LD_INT 1
39255: PLUS
39256: PPUSH
39257: LD_VAR 0 9
39261: PUSH
39262: LD_VAR 0 7
39266: ARRAY
39267: PPUSH
39268: CALL_OW 1
39272: ST_TO_ADDR
39273: GO 39229
39275: POP
39276: POP
// end ; tmp := [ ] ;
39277: LD_ADDR_VAR 0 9
39281: PUSH
39282: EMPTY
39283: ST_TO_ADDR
// if mode then
39284: LD_VAR 0 5
39288: IFFALSE 39357
// begin for i = 1 to result do
39290: LD_ADDR_VAR 0 7
39294: PUSH
39295: DOUBLE
39296: LD_INT 1
39298: DEC
39299: ST_TO_ADDR
39300: LD_VAR 0 6
39304: PUSH
39305: FOR_TO
39306: IFFALSE 39345
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39308: LD_ADDR_VAR 0 9
39312: PUSH
39313: LD_VAR 0 9
39317: PPUSH
39318: LD_VAR 0 7
39322: PPUSH
39323: LD_VAR 0 6
39327: PUSH
39328: LD_VAR 0 7
39332: ARRAY
39333: PUSH
39334: LD_INT 1
39336: ARRAY
39337: PPUSH
39338: CALL_OW 1
39342: ST_TO_ADDR
39343: GO 39305
39345: POP
39346: POP
// result := tmp ;
39347: LD_ADDR_VAR 0 6
39351: PUSH
39352: LD_VAR 0 9
39356: ST_TO_ADDR
// end ; end ;
39357: LD_VAR 0 6
39361: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39362: LD_INT 0
39364: PPUSH
39365: PPUSH
39366: PPUSH
39367: PPUSH
39368: PPUSH
39369: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39370: LD_ADDR_VAR 0 5
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: ST_TO_ADDR
// if not x or not y then
39392: LD_VAR 0 2
39396: NOT
39397: PUSH
39398: LD_VAR 0 3
39402: NOT
39403: OR
39404: IFFALSE 39408
// exit ;
39406: GO 41054
// if not range then
39408: LD_VAR 0 4
39412: NOT
39413: IFFALSE 39423
// range := 10 ;
39415: LD_ADDR_VAR 0 4
39419: PUSH
39420: LD_INT 10
39422: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39423: LD_ADDR_VAR 0 8
39427: PUSH
39428: LD_INT 81
39430: PUSH
39431: LD_VAR 0 1
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 92
39442: PUSH
39443: LD_VAR 0 2
39447: PUSH
39448: LD_VAR 0 3
39452: PUSH
39453: LD_VAR 0 4
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 3
39466: PUSH
39467: LD_INT 21
39469: PUSH
39470: LD_INT 3
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: LIST
39485: PPUSH
39486: CALL_OW 69
39490: ST_TO_ADDR
// if not tmp then
39491: LD_VAR 0 8
39495: NOT
39496: IFFALSE 39500
// exit ;
39498: GO 41054
// for i in tmp do
39500: LD_ADDR_VAR 0 6
39504: PUSH
39505: LD_VAR 0 8
39509: PUSH
39510: FOR_IN
39511: IFFALSE 41029
// begin points := [ 0 , 0 , 0 ] ;
39513: LD_ADDR_VAR 0 9
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: ST_TO_ADDR
// bpoints := 1 ;
39532: LD_ADDR_VAR 0 10
39536: PUSH
39537: LD_INT 1
39539: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39540: LD_VAR 0 6
39544: PPUSH
39545: CALL_OW 247
39549: PUSH
39550: LD_INT 1
39552: DOUBLE
39553: EQUAL
39554: IFTRUE 39558
39556: GO 40136
39558: POP
// begin if GetClass ( i ) = 1 then
39559: LD_VAR 0 6
39563: PPUSH
39564: CALL_OW 257
39568: PUSH
39569: LD_INT 1
39571: EQUAL
39572: IFFALSE 39593
// points := [ 10 , 5 , 3 ] ;
39574: LD_ADDR_VAR 0 9
39578: PUSH
39579: LD_INT 10
39581: PUSH
39582: LD_INT 5
39584: PUSH
39585: LD_INT 3
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: LIST
39592: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39593: LD_VAR 0 6
39597: PPUSH
39598: CALL_OW 257
39602: PUSH
39603: LD_INT 2
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: LD_INT 4
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: LIST
39616: IN
39617: IFFALSE 39638
// points := [ 3 , 2 , 1 ] ;
39619: LD_ADDR_VAR 0 9
39623: PUSH
39624: LD_INT 3
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: LIST
39637: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39638: LD_VAR 0 6
39642: PPUSH
39643: CALL_OW 257
39647: PUSH
39648: LD_INT 5
39650: EQUAL
39651: IFFALSE 39672
// points := [ 130 , 5 , 2 ] ;
39653: LD_ADDR_VAR 0 9
39657: PUSH
39658: LD_INT 130
39660: PUSH
39661: LD_INT 5
39663: PUSH
39664: LD_INT 2
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: LIST
39671: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39672: LD_VAR 0 6
39676: PPUSH
39677: CALL_OW 257
39681: PUSH
39682: LD_INT 8
39684: EQUAL
39685: IFFALSE 39706
// points := [ 35 , 35 , 30 ] ;
39687: LD_ADDR_VAR 0 9
39691: PUSH
39692: LD_INT 35
39694: PUSH
39695: LD_INT 35
39697: PUSH
39698: LD_INT 30
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39706: LD_VAR 0 6
39710: PPUSH
39711: CALL_OW 257
39715: PUSH
39716: LD_INT 9
39718: EQUAL
39719: IFFALSE 39740
// points := [ 20 , 55 , 40 ] ;
39721: LD_ADDR_VAR 0 9
39725: PUSH
39726: LD_INT 20
39728: PUSH
39729: LD_INT 55
39731: PUSH
39732: LD_INT 40
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: LIST
39739: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39740: LD_VAR 0 6
39744: PPUSH
39745: CALL_OW 257
39749: PUSH
39750: LD_INT 12
39752: PUSH
39753: LD_INT 16
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: IN
39760: IFFALSE 39781
// points := [ 5 , 3 , 2 ] ;
39762: LD_ADDR_VAR 0 9
39766: PUSH
39767: LD_INT 5
39769: PUSH
39770: LD_INT 3
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39781: LD_VAR 0 6
39785: PPUSH
39786: CALL_OW 257
39790: PUSH
39791: LD_INT 17
39793: EQUAL
39794: IFFALSE 39815
// points := [ 100 , 50 , 75 ] ;
39796: LD_ADDR_VAR 0 9
39800: PUSH
39801: LD_INT 100
39803: PUSH
39804: LD_INT 50
39806: PUSH
39807: LD_INT 75
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39815: LD_VAR 0 6
39819: PPUSH
39820: CALL_OW 257
39824: PUSH
39825: LD_INT 15
39827: EQUAL
39828: IFFALSE 39849
// points := [ 10 , 5 , 3 ] ;
39830: LD_ADDR_VAR 0 9
39834: PUSH
39835: LD_INT 10
39837: PUSH
39838: LD_INT 5
39840: PUSH
39841: LD_INT 3
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: LIST
39848: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39849: LD_VAR 0 6
39853: PPUSH
39854: CALL_OW 257
39858: PUSH
39859: LD_INT 14
39861: EQUAL
39862: IFFALSE 39883
// points := [ 10 , 0 , 0 ] ;
39864: LD_ADDR_VAR 0 9
39868: PUSH
39869: LD_INT 10
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: LIST
39882: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39883: LD_VAR 0 6
39887: PPUSH
39888: CALL_OW 257
39892: PUSH
39893: LD_INT 11
39895: EQUAL
39896: IFFALSE 39917
// points := [ 30 , 10 , 5 ] ;
39898: LD_ADDR_VAR 0 9
39902: PUSH
39903: LD_INT 30
39905: PUSH
39906: LD_INT 10
39908: PUSH
39909: LD_INT 5
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: LIST
39916: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39917: LD_VAR 0 1
39921: PPUSH
39922: LD_INT 5
39924: PPUSH
39925: CALL_OW 321
39929: PUSH
39930: LD_INT 2
39932: EQUAL
39933: IFFALSE 39950
// bpoints := bpoints * 1.8 ;
39935: LD_ADDR_VAR 0 10
39939: PUSH
39940: LD_VAR 0 10
39944: PUSH
39945: LD_REAL  1.80000000000000E+0000
39948: MUL
39949: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39950: LD_VAR 0 6
39954: PPUSH
39955: CALL_OW 257
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: LD_INT 3
39968: PUSH
39969: LD_INT 4
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: IN
39978: PUSH
39979: LD_VAR 0 1
39983: PPUSH
39984: LD_INT 51
39986: PPUSH
39987: CALL_OW 321
39991: PUSH
39992: LD_INT 2
39994: EQUAL
39995: AND
39996: IFFALSE 40013
// bpoints := bpoints * 1.2 ;
39998: LD_ADDR_VAR 0 10
40002: PUSH
40003: LD_VAR 0 10
40007: PUSH
40008: LD_REAL  1.20000000000000E+0000
40011: MUL
40012: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40013: LD_VAR 0 6
40017: PPUSH
40018: CALL_OW 257
40022: PUSH
40023: LD_INT 5
40025: PUSH
40026: LD_INT 7
40028: PUSH
40029: LD_INT 9
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: IN
40037: PUSH
40038: LD_VAR 0 1
40042: PPUSH
40043: LD_INT 52
40045: PPUSH
40046: CALL_OW 321
40050: PUSH
40051: LD_INT 2
40053: EQUAL
40054: AND
40055: IFFALSE 40072
// bpoints := bpoints * 1.5 ;
40057: LD_ADDR_VAR 0 10
40061: PUSH
40062: LD_VAR 0 10
40066: PUSH
40067: LD_REAL  1.50000000000000E+0000
40070: MUL
40071: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40072: LD_VAR 0 1
40076: PPUSH
40077: LD_INT 66
40079: PPUSH
40080: CALL_OW 321
40084: PUSH
40085: LD_INT 2
40087: EQUAL
40088: IFFALSE 40105
// bpoints := bpoints * 1.1 ;
40090: LD_ADDR_VAR 0 10
40094: PUSH
40095: LD_VAR 0 10
40099: PUSH
40100: LD_REAL  1.10000000000000E+0000
40103: MUL
40104: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40105: LD_ADDR_VAR 0 10
40109: PUSH
40110: LD_VAR 0 10
40114: PUSH
40115: LD_VAR 0 6
40119: PPUSH
40120: LD_INT 1
40122: PPUSH
40123: CALL_OW 259
40127: PUSH
40128: LD_REAL  1.15000000000000E+0000
40131: MUL
40132: MUL
40133: ST_TO_ADDR
// end ; unit_vehicle :
40134: GO 40958
40136: LD_INT 2
40138: DOUBLE
40139: EQUAL
40140: IFTRUE 40144
40142: GO 40946
40144: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40145: LD_VAR 0 6
40149: PPUSH
40150: CALL_OW 264
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: LD_INT 42
40160: PUSH
40161: LD_INT 24
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: LIST
40168: IN
40169: IFFALSE 40190
// points := [ 25 , 5 , 3 ] ;
40171: LD_ADDR_VAR 0 9
40175: PUSH
40176: LD_INT 25
40178: PUSH
40179: LD_INT 5
40181: PUSH
40182: LD_INT 3
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: LIST
40189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40190: LD_VAR 0 6
40194: PPUSH
40195: CALL_OW 264
40199: PUSH
40200: LD_INT 4
40202: PUSH
40203: LD_INT 43
40205: PUSH
40206: LD_INT 25
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: IN
40214: IFFALSE 40235
// points := [ 40 , 15 , 5 ] ;
40216: LD_ADDR_VAR 0 9
40220: PUSH
40221: LD_INT 40
40223: PUSH
40224: LD_INT 15
40226: PUSH
40227: LD_INT 5
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: LIST
40234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40235: LD_VAR 0 6
40239: PPUSH
40240: CALL_OW 264
40244: PUSH
40245: LD_INT 3
40247: PUSH
40248: LD_INT 23
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: IN
40255: IFFALSE 40276
// points := [ 7 , 25 , 8 ] ;
40257: LD_ADDR_VAR 0 9
40261: PUSH
40262: LD_INT 7
40264: PUSH
40265: LD_INT 25
40267: PUSH
40268: LD_INT 8
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40276: LD_VAR 0 6
40280: PPUSH
40281: CALL_OW 264
40285: PUSH
40286: LD_INT 5
40288: PUSH
40289: LD_INT 27
40291: PUSH
40292: LD_INT 44
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: IN
40300: IFFALSE 40321
// points := [ 14 , 50 , 16 ] ;
40302: LD_ADDR_VAR 0 9
40306: PUSH
40307: LD_INT 14
40309: PUSH
40310: LD_INT 50
40312: PUSH
40313: LD_INT 16
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: LIST
40320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40321: LD_VAR 0 6
40325: PPUSH
40326: CALL_OW 264
40330: PUSH
40331: LD_INT 6
40333: PUSH
40334: LD_INT 46
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: IN
40341: IFFALSE 40362
// points := [ 32 , 120 , 70 ] ;
40343: LD_ADDR_VAR 0 9
40347: PUSH
40348: LD_INT 32
40350: PUSH
40351: LD_INT 120
40353: PUSH
40354: LD_INT 70
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: LIST
40361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
40362: LD_VAR 0 6
40366: PPUSH
40367: CALL_OW 264
40371: PUSH
40372: LD_INT 7
40374: PUSH
40375: LD_INT 28
40377: PUSH
40378: LD_INT 45
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: LIST
40385: IN
40386: IFFALSE 40407
// points := [ 35 , 20 , 45 ] ;
40388: LD_ADDR_VAR 0 9
40392: PUSH
40393: LD_INT 35
40395: PUSH
40396: LD_INT 20
40398: PUSH
40399: LD_INT 45
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: LIST
40406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40407: LD_VAR 0 6
40411: PPUSH
40412: CALL_OW 264
40416: PUSH
40417: LD_INT 47
40419: PUSH
40420: EMPTY
40421: LIST
40422: IN
40423: IFFALSE 40444
// points := [ 67 , 45 , 75 ] ;
40425: LD_ADDR_VAR 0 9
40429: PUSH
40430: LD_INT 67
40432: PUSH
40433: LD_INT 45
40435: PUSH
40436: LD_INT 75
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: LIST
40443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40444: LD_VAR 0 6
40448: PPUSH
40449: CALL_OW 264
40453: PUSH
40454: LD_INT 26
40456: PUSH
40457: EMPTY
40458: LIST
40459: IN
40460: IFFALSE 40481
// points := [ 120 , 30 , 80 ] ;
40462: LD_ADDR_VAR 0 9
40466: PUSH
40467: LD_INT 120
40469: PUSH
40470: LD_INT 30
40472: PUSH
40473: LD_INT 80
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40481: LD_VAR 0 6
40485: PPUSH
40486: CALL_OW 264
40490: PUSH
40491: LD_INT 22
40493: PUSH
40494: EMPTY
40495: LIST
40496: IN
40497: IFFALSE 40518
// points := [ 40 , 1 , 1 ] ;
40499: LD_ADDR_VAR 0 9
40503: PUSH
40504: LD_INT 40
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40518: LD_VAR 0 6
40522: PPUSH
40523: CALL_OW 264
40527: PUSH
40528: LD_INT 29
40530: PUSH
40531: EMPTY
40532: LIST
40533: IN
40534: IFFALSE 40555
// points := [ 70 , 200 , 400 ] ;
40536: LD_ADDR_VAR 0 9
40540: PUSH
40541: LD_INT 70
40543: PUSH
40544: LD_INT 200
40546: PUSH
40547: LD_INT 400
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: LIST
40554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40555: LD_VAR 0 6
40559: PPUSH
40560: CALL_OW 264
40564: PUSH
40565: LD_INT 14
40567: PUSH
40568: LD_INT 53
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: IN
40575: IFFALSE 40596
// points := [ 40 , 10 , 20 ] ;
40577: LD_ADDR_VAR 0 9
40581: PUSH
40582: LD_INT 40
40584: PUSH
40585: LD_INT 10
40587: PUSH
40588: LD_INT 20
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: LIST
40595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40596: LD_VAR 0 6
40600: PPUSH
40601: CALL_OW 264
40605: PUSH
40606: LD_INT 9
40608: PUSH
40609: EMPTY
40610: LIST
40611: IN
40612: IFFALSE 40633
// points := [ 5 , 70 , 20 ] ;
40614: LD_ADDR_VAR 0 9
40618: PUSH
40619: LD_INT 5
40621: PUSH
40622: LD_INT 70
40624: PUSH
40625: LD_INT 20
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40633: LD_VAR 0 6
40637: PPUSH
40638: CALL_OW 264
40642: PUSH
40643: LD_INT 10
40645: PUSH
40646: EMPTY
40647: LIST
40648: IN
40649: IFFALSE 40670
// points := [ 35 , 110 , 70 ] ;
40651: LD_ADDR_VAR 0 9
40655: PUSH
40656: LD_INT 35
40658: PUSH
40659: LD_INT 110
40661: PUSH
40662: LD_INT 70
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40670: LD_VAR 0 6
40674: PPUSH
40675: CALL_OW 265
40679: PUSH
40680: LD_INT 25
40682: EQUAL
40683: IFFALSE 40704
// points := [ 80 , 65 , 100 ] ;
40685: LD_ADDR_VAR 0 9
40689: PUSH
40690: LD_INT 80
40692: PUSH
40693: LD_INT 65
40695: PUSH
40696: LD_INT 100
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: LIST
40703: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40704: LD_VAR 0 6
40708: PPUSH
40709: CALL_OW 263
40713: PUSH
40714: LD_INT 1
40716: EQUAL
40717: IFFALSE 40752
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40719: LD_ADDR_VAR 0 10
40723: PUSH
40724: LD_VAR 0 10
40728: PUSH
40729: LD_VAR 0 6
40733: PPUSH
40734: CALL_OW 311
40738: PPUSH
40739: LD_INT 3
40741: PPUSH
40742: CALL_OW 259
40746: PUSH
40747: LD_INT 4
40749: MUL
40750: MUL
40751: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40752: LD_VAR 0 6
40756: PPUSH
40757: CALL_OW 263
40761: PUSH
40762: LD_INT 2
40764: EQUAL
40765: IFFALSE 40816
// begin j := IsControledBy ( i ) ;
40767: LD_ADDR_VAR 0 7
40771: PUSH
40772: LD_VAR 0 6
40776: PPUSH
40777: CALL_OW 312
40781: ST_TO_ADDR
// if j then
40782: LD_VAR 0 7
40786: IFFALSE 40816
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40788: LD_ADDR_VAR 0 10
40792: PUSH
40793: LD_VAR 0 10
40797: PUSH
40798: LD_VAR 0 7
40802: PPUSH
40803: LD_INT 3
40805: PPUSH
40806: CALL_OW 259
40810: PUSH
40811: LD_INT 3
40813: MUL
40814: MUL
40815: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40816: LD_VAR 0 6
40820: PPUSH
40821: CALL_OW 264
40825: PUSH
40826: LD_INT 5
40828: PUSH
40829: LD_INT 6
40831: PUSH
40832: LD_INT 46
40834: PUSH
40835: LD_INT 44
40837: PUSH
40838: LD_INT 47
40840: PUSH
40841: LD_INT 45
40843: PUSH
40844: LD_INT 28
40846: PUSH
40847: LD_INT 7
40849: PUSH
40850: LD_INT 27
40852: PUSH
40853: LD_INT 29
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: IN
40868: PUSH
40869: LD_VAR 0 1
40873: PPUSH
40874: LD_INT 52
40876: PPUSH
40877: CALL_OW 321
40881: PUSH
40882: LD_INT 2
40884: EQUAL
40885: AND
40886: IFFALSE 40903
// bpoints := bpoints * 1.2 ;
40888: LD_ADDR_VAR 0 10
40892: PUSH
40893: LD_VAR 0 10
40897: PUSH
40898: LD_REAL  1.20000000000000E+0000
40901: MUL
40902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40903: LD_VAR 0 6
40907: PPUSH
40908: CALL_OW 264
40912: PUSH
40913: LD_INT 6
40915: PUSH
40916: LD_INT 46
40918: PUSH
40919: LD_INT 47
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: LIST
40926: IN
40927: IFFALSE 40944
// bpoints := bpoints * 1.2 ;
40929: LD_ADDR_VAR 0 10
40933: PUSH
40934: LD_VAR 0 10
40938: PUSH
40939: LD_REAL  1.20000000000000E+0000
40942: MUL
40943: ST_TO_ADDR
// end ; unit_building :
40944: GO 40958
40946: LD_INT 3
40948: DOUBLE
40949: EQUAL
40950: IFTRUE 40954
40952: GO 40957
40954: POP
// ; end ;
40955: GO 40958
40957: POP
// for j = 1 to 3 do
40958: LD_ADDR_VAR 0 7
40962: PUSH
40963: DOUBLE
40964: LD_INT 1
40966: DEC
40967: ST_TO_ADDR
40968: LD_INT 3
40970: PUSH
40971: FOR_TO
40972: IFFALSE 41025
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40974: LD_ADDR_VAR 0 5
40978: PUSH
40979: LD_VAR 0 5
40983: PPUSH
40984: LD_VAR 0 7
40988: PPUSH
40989: LD_VAR 0 5
40993: PUSH
40994: LD_VAR 0 7
40998: ARRAY
40999: PUSH
41000: LD_VAR 0 9
41004: PUSH
41005: LD_VAR 0 7
41009: ARRAY
41010: PUSH
41011: LD_VAR 0 10
41015: MUL
41016: PLUS
41017: PPUSH
41018: CALL_OW 1
41022: ST_TO_ADDR
41023: GO 40971
41025: POP
41026: POP
// end ;
41027: GO 39510
41029: POP
41030: POP
// result := Replace ( result , 4 , tmp ) ;
41031: LD_ADDR_VAR 0 5
41035: PUSH
41036: LD_VAR 0 5
41040: PPUSH
41041: LD_INT 4
41043: PPUSH
41044: LD_VAR 0 8
41048: PPUSH
41049: CALL_OW 1
41053: ST_TO_ADDR
// end ;
41054: LD_VAR 0 5
41058: RET
// export function DangerAtRange ( unit , range ) ; begin
41059: LD_INT 0
41061: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41062: LD_ADDR_VAR 0 3
41066: PUSH
41067: LD_VAR 0 1
41071: PPUSH
41072: CALL_OW 255
41076: PPUSH
41077: LD_VAR 0 1
41081: PPUSH
41082: CALL_OW 250
41086: PPUSH
41087: LD_VAR 0 1
41091: PPUSH
41092: CALL_OW 251
41096: PPUSH
41097: LD_VAR 0 2
41101: PPUSH
41102: CALL 39362 0 4
41106: ST_TO_ADDR
// end ;
41107: LD_VAR 0 3
41111: RET
// export function DangerInArea ( side , area ) ; begin
41112: LD_INT 0
41114: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41115: LD_ADDR_VAR 0 3
41119: PUSH
41120: LD_VAR 0 2
41124: PPUSH
41125: LD_INT 81
41127: PUSH
41128: LD_VAR 0 1
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PPUSH
41137: CALL_OW 70
41141: ST_TO_ADDR
// end ;
41142: LD_VAR 0 3
41146: RET
// export function IsExtension ( b ) ; begin
41147: LD_INT 0
41149: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41150: LD_ADDR_VAR 0 2
41154: PUSH
41155: LD_VAR 0 1
41159: PUSH
41160: LD_INT 23
41162: PUSH
41163: LD_INT 20
41165: PUSH
41166: LD_INT 22
41168: PUSH
41169: LD_INT 17
41171: PUSH
41172: LD_INT 24
41174: PUSH
41175: LD_INT 21
41177: PUSH
41178: LD_INT 19
41180: PUSH
41181: LD_INT 16
41183: PUSH
41184: LD_INT 25
41186: PUSH
41187: LD_INT 18
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: IN
41202: ST_TO_ADDR
// end ;
41203: LD_VAR 0 2
41207: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
41208: LD_INT 0
41210: PPUSH
41211: PPUSH
41212: PPUSH
// result := [ ] ;
41213: LD_ADDR_VAR 0 3
41217: PUSH
41218: EMPTY
41219: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41220: LD_ADDR_VAR 0 4
41224: PUSH
41225: LD_VAR 0 2
41229: PPUSH
41230: LD_INT 21
41232: PUSH
41233: LD_INT 3
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PPUSH
41240: CALL_OW 70
41244: ST_TO_ADDR
// if not tmp then
41245: LD_VAR 0 4
41249: NOT
41250: IFFALSE 41254
// exit ;
41252: GO 41312
// for i in tmp do
41254: LD_ADDR_VAR 0 5
41258: PUSH
41259: LD_VAR 0 4
41263: PUSH
41264: FOR_IN
41265: IFFALSE 41300
// if GetBase ( i ) <> base then
41267: LD_VAR 0 5
41271: PPUSH
41272: CALL_OW 274
41276: PUSH
41277: LD_VAR 0 1
41281: NONEQUAL
41282: IFFALSE 41298
// ComLinkToBase ( base , i ) ;
41284: LD_VAR 0 1
41288: PPUSH
41289: LD_VAR 0 5
41293: PPUSH
41294: CALL_OW 169
41298: GO 41264
41300: POP
41301: POP
// result := tmp ;
41302: LD_ADDR_VAR 0 3
41306: PUSH
41307: LD_VAR 0 4
41311: ST_TO_ADDR
// end ;
41312: LD_VAR 0 3
41316: RET
// export function ComComplete ( unit , b ) ; var i ; begin
41317: LD_INT 0
41319: PPUSH
41320: PPUSH
// if BuildingStatus ( b ) = bs_build then
41321: LD_VAR 0 2
41325: PPUSH
41326: CALL_OW 461
41330: PUSH
41331: LD_INT 1
41333: EQUAL
41334: IFFALSE 41394
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41336: LD_VAR 0 1
41340: PPUSH
41341: LD_STRING h
41343: PUSH
41344: LD_VAR 0 2
41348: PPUSH
41349: CALL_OW 250
41353: PUSH
41354: LD_VAR 0 2
41358: PPUSH
41359: CALL_OW 251
41363: PUSH
41364: LD_VAR 0 2
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: PUSH
41387: EMPTY
41388: LIST
41389: PPUSH
41390: CALL_OW 446
// end ;
41394: LD_VAR 0 3
41398: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41399: LD_INT 0
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
41407: LD_VAR 0 1
41411: NOT
41412: PUSH
41413: LD_VAR 0 1
41417: PPUSH
41418: CALL_OW 263
41422: PUSH
41423: LD_INT 2
41425: EQUAL
41426: NOT
41427: OR
41428: IFFALSE 41432
// exit ;
41430: GO 41748
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41432: LD_ADDR_VAR 0 6
41436: PUSH
41437: LD_INT 22
41439: PUSH
41440: LD_VAR 0 1
41444: PPUSH
41445: CALL_OW 255
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 30
41459: PUSH
41460: LD_INT 36
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 34
41469: PUSH
41470: LD_INT 31
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: LIST
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PPUSH
41486: CALL_OW 69
41490: ST_TO_ADDR
// if not tmp then
41491: LD_VAR 0 6
41495: NOT
41496: IFFALSE 41500
// exit ;
41498: GO 41748
// result := [ ] ;
41500: LD_ADDR_VAR 0 2
41504: PUSH
41505: EMPTY
41506: ST_TO_ADDR
// for i in tmp do
41507: LD_ADDR_VAR 0 3
41511: PUSH
41512: LD_VAR 0 6
41516: PUSH
41517: FOR_IN
41518: IFFALSE 41589
// begin t := UnitsInside ( i ) ;
41520: LD_ADDR_VAR 0 4
41524: PUSH
41525: LD_VAR 0 3
41529: PPUSH
41530: CALL_OW 313
41534: ST_TO_ADDR
// if t then
41535: LD_VAR 0 4
41539: IFFALSE 41587
// for j in t do
41541: LD_ADDR_VAR 0 7
41545: PUSH
41546: LD_VAR 0 4
41550: PUSH
41551: FOR_IN
41552: IFFALSE 41585
// result := Insert ( result , result + 1 , j ) ;
41554: LD_ADDR_VAR 0 2
41558: PUSH
41559: LD_VAR 0 2
41563: PPUSH
41564: LD_VAR 0 2
41568: PUSH
41569: LD_INT 1
41571: PLUS
41572: PPUSH
41573: LD_VAR 0 7
41577: PPUSH
41578: CALL_OW 2
41582: ST_TO_ADDR
41583: GO 41551
41585: POP
41586: POP
// end ;
41587: GO 41517
41589: POP
41590: POP
// if not result then
41591: LD_VAR 0 2
41595: NOT
41596: IFFALSE 41600
// exit ;
41598: GO 41748
// mech := result [ 1 ] ;
41600: LD_ADDR_VAR 0 5
41604: PUSH
41605: LD_VAR 0 2
41609: PUSH
41610: LD_INT 1
41612: ARRAY
41613: ST_TO_ADDR
// if result > 1 then
41614: LD_VAR 0 2
41618: PUSH
41619: LD_INT 1
41621: GREATER
41622: IFFALSE 41734
// for i = 2 to result do
41624: LD_ADDR_VAR 0 3
41628: PUSH
41629: DOUBLE
41630: LD_INT 2
41632: DEC
41633: ST_TO_ADDR
41634: LD_VAR 0 2
41638: PUSH
41639: FOR_TO
41640: IFFALSE 41732
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41642: LD_ADDR_VAR 0 4
41646: PUSH
41647: LD_VAR 0 2
41651: PUSH
41652: LD_VAR 0 3
41656: ARRAY
41657: PPUSH
41658: LD_INT 3
41660: PPUSH
41661: CALL_OW 259
41665: PUSH
41666: LD_VAR 0 2
41670: PUSH
41671: LD_VAR 0 3
41675: ARRAY
41676: PPUSH
41677: CALL_OW 432
41681: MINUS
41682: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41683: LD_VAR 0 4
41687: PUSH
41688: LD_VAR 0 5
41692: PPUSH
41693: LD_INT 3
41695: PPUSH
41696: CALL_OW 259
41700: PUSH
41701: LD_VAR 0 5
41705: PPUSH
41706: CALL_OW 432
41710: MINUS
41711: GREATEREQUAL
41712: IFFALSE 41730
// mech := result [ i ] ;
41714: LD_ADDR_VAR 0 5
41718: PUSH
41719: LD_VAR 0 2
41723: PUSH
41724: LD_VAR 0 3
41728: ARRAY
41729: ST_TO_ADDR
// end ;
41730: GO 41639
41732: POP
41733: POP
// ComLinkTo ( vehicle , mech ) ;
41734: LD_VAR 0 1
41738: PPUSH
41739: LD_VAR 0 5
41743: PPUSH
41744: CALL_OW 135
// end ;
41748: LD_VAR 0 2
41752: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41753: LD_INT 0
41755: PPUSH
41756: PPUSH
41757: PPUSH
41758: PPUSH
41759: PPUSH
41760: PPUSH
41761: PPUSH
41762: PPUSH
41763: PPUSH
41764: PPUSH
41765: PPUSH
41766: PPUSH
41767: PPUSH
// result := [ ] ;
41768: LD_ADDR_VAR 0 7
41772: PUSH
41773: EMPTY
41774: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41775: LD_VAR 0 1
41779: PPUSH
41780: CALL_OW 266
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: IN
41795: NOT
41796: IFFALSE 41800
// exit ;
41798: GO 43431
// if name then
41800: LD_VAR 0 3
41804: IFFALSE 41820
// SetBName ( base_dep , name ) ;
41806: LD_VAR 0 1
41810: PPUSH
41811: LD_VAR 0 3
41815: PPUSH
41816: CALL_OW 500
// base := GetBase ( base_dep ) ;
41820: LD_ADDR_VAR 0 15
41824: PUSH
41825: LD_VAR 0 1
41829: PPUSH
41830: CALL_OW 274
41834: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41835: LD_ADDR_VAR 0 16
41839: PUSH
41840: LD_VAR 0 1
41844: PPUSH
41845: CALL_OW 255
41849: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41850: LD_ADDR_VAR 0 17
41854: PUSH
41855: LD_VAR 0 1
41859: PPUSH
41860: CALL_OW 248
41864: ST_TO_ADDR
// if sources then
41865: LD_VAR 0 5
41869: IFFALSE 41916
// for i = 1 to 3 do
41871: LD_ADDR_VAR 0 8
41875: PUSH
41876: DOUBLE
41877: LD_INT 1
41879: DEC
41880: ST_TO_ADDR
41881: LD_INT 3
41883: PUSH
41884: FOR_TO
41885: IFFALSE 41914
// AddResourceType ( base , i , sources [ i ] ) ;
41887: LD_VAR 0 15
41891: PPUSH
41892: LD_VAR 0 8
41896: PPUSH
41897: LD_VAR 0 5
41901: PUSH
41902: LD_VAR 0 8
41906: ARRAY
41907: PPUSH
41908: CALL_OW 276
41912: GO 41884
41914: POP
41915: POP
// buildings := GetBaseBuildings ( base , area ) ;
41916: LD_ADDR_VAR 0 18
41920: PUSH
41921: LD_VAR 0 15
41925: PPUSH
41926: LD_VAR 0 2
41930: PPUSH
41931: CALL 41208 0 2
41935: ST_TO_ADDR
// InitHc ;
41936: CALL_OW 19
// InitUc ;
41940: CALL_OW 18
// uc_side := side ;
41944: LD_ADDR_OWVAR 20
41948: PUSH
41949: LD_VAR 0 16
41953: ST_TO_ADDR
// uc_nation := nation ;
41954: LD_ADDR_OWVAR 21
41958: PUSH
41959: LD_VAR 0 17
41963: ST_TO_ADDR
// if buildings then
41964: LD_VAR 0 18
41968: IFFALSE 43290
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41970: LD_ADDR_VAR 0 19
41974: PUSH
41975: LD_VAR 0 18
41979: PPUSH
41980: LD_INT 2
41982: PUSH
41983: LD_INT 30
41985: PUSH
41986: LD_INT 29
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 30
41995: PUSH
41996: LD_INT 30
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: LIST
42007: PPUSH
42008: CALL_OW 72
42012: ST_TO_ADDR
// if tmp then
42013: LD_VAR 0 19
42017: IFFALSE 42065
// for i in tmp do
42019: LD_ADDR_VAR 0 8
42023: PUSH
42024: LD_VAR 0 19
42028: PUSH
42029: FOR_IN
42030: IFFALSE 42063
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42032: LD_VAR 0 8
42036: PPUSH
42037: CALL_OW 250
42041: PPUSH
42042: LD_VAR 0 8
42046: PPUSH
42047: CALL_OW 251
42051: PPUSH
42052: LD_VAR 0 16
42056: PPUSH
42057: CALL_OW 441
42061: GO 42029
42063: POP
42064: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42065: LD_VAR 0 18
42069: PPUSH
42070: LD_INT 2
42072: PUSH
42073: LD_INT 30
42075: PUSH
42076: LD_INT 32
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 30
42085: PUSH
42086: LD_INT 33
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: LIST
42097: PPUSH
42098: CALL_OW 72
42102: IFFALSE 42190
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42104: LD_ADDR_VAR 0 8
42108: PUSH
42109: LD_VAR 0 18
42113: PPUSH
42114: LD_INT 2
42116: PUSH
42117: LD_INT 30
42119: PUSH
42120: LD_INT 32
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 30
42129: PUSH
42130: LD_INT 33
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: PPUSH
42142: CALL_OW 72
42146: PUSH
42147: FOR_IN
42148: IFFALSE 42188
// begin if not GetBWeapon ( i ) then
42150: LD_VAR 0 8
42154: PPUSH
42155: CALL_OW 269
42159: NOT
42160: IFFALSE 42186
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42162: LD_VAR 0 8
42166: PPUSH
42167: LD_VAR 0 8
42171: PPUSH
42172: LD_VAR 0 2
42176: PPUSH
42177: CALL 43436 0 2
42181: PPUSH
42182: CALL_OW 431
// end ;
42186: GO 42147
42188: POP
42189: POP
// end ; for i = 1 to personel do
42190: LD_ADDR_VAR 0 8
42194: PUSH
42195: DOUBLE
42196: LD_INT 1
42198: DEC
42199: ST_TO_ADDR
42200: LD_VAR 0 6
42204: PUSH
42205: FOR_TO
42206: IFFALSE 43270
// begin if i > 4 then
42208: LD_VAR 0 8
42212: PUSH
42213: LD_INT 4
42215: GREATER
42216: IFFALSE 42220
// break ;
42218: GO 43270
// case i of 1 :
42220: LD_VAR 0 8
42224: PUSH
42225: LD_INT 1
42227: DOUBLE
42228: EQUAL
42229: IFTRUE 42233
42231: GO 42313
42233: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42234: LD_ADDR_VAR 0 12
42238: PUSH
42239: LD_VAR 0 18
42243: PPUSH
42244: LD_INT 22
42246: PUSH
42247: LD_VAR 0 16
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 58
42258: PUSH
42259: EMPTY
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: LD_INT 30
42267: PUSH
42268: LD_INT 32
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 30
42277: PUSH
42278: LD_INT 4
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 30
42287: PUSH
42288: LD_INT 5
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: LIST
42305: PPUSH
42306: CALL_OW 72
42310: ST_TO_ADDR
42311: GO 42535
42313: LD_INT 2
42315: DOUBLE
42316: EQUAL
42317: IFTRUE 42321
42319: GO 42383
42321: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42322: LD_ADDR_VAR 0 12
42326: PUSH
42327: LD_VAR 0 18
42331: PPUSH
42332: LD_INT 22
42334: PUSH
42335: LD_VAR 0 16
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: LD_INT 30
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 30
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: LIST
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PPUSH
42376: CALL_OW 72
42380: ST_TO_ADDR
42381: GO 42535
42383: LD_INT 3
42385: DOUBLE
42386: EQUAL
42387: IFTRUE 42391
42389: GO 42453
42391: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42392: LD_ADDR_VAR 0 12
42396: PUSH
42397: LD_VAR 0 18
42401: PPUSH
42402: LD_INT 22
42404: PUSH
42405: LD_VAR 0 16
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: LD_INT 30
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 30
42429: PUSH
42430: LD_INT 3
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: LIST
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PPUSH
42446: CALL_OW 72
42450: ST_TO_ADDR
42451: GO 42535
42453: LD_INT 4
42455: DOUBLE
42456: EQUAL
42457: IFTRUE 42461
42459: GO 42534
42461: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42462: LD_ADDR_VAR 0 12
42466: PUSH
42467: LD_VAR 0 18
42471: PPUSH
42472: LD_INT 22
42474: PUSH
42475: LD_VAR 0 16
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: LD_INT 30
42489: PUSH
42490: LD_INT 6
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 30
42499: PUSH
42500: LD_INT 7
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 30
42509: PUSH
42510: LD_INT 8
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PPUSH
42527: CALL_OW 72
42531: ST_TO_ADDR
42532: GO 42535
42534: POP
// if i = 1 then
42535: LD_VAR 0 8
42539: PUSH
42540: LD_INT 1
42542: EQUAL
42543: IFFALSE 42654
// begin tmp := [ ] ;
42545: LD_ADDR_VAR 0 19
42549: PUSH
42550: EMPTY
42551: ST_TO_ADDR
// for j in f do
42552: LD_ADDR_VAR 0 9
42556: PUSH
42557: LD_VAR 0 12
42561: PUSH
42562: FOR_IN
42563: IFFALSE 42636
// if GetBType ( j ) = b_bunker then
42565: LD_VAR 0 9
42569: PPUSH
42570: CALL_OW 266
42574: PUSH
42575: LD_INT 32
42577: EQUAL
42578: IFFALSE 42605
// tmp := Insert ( tmp , 1 , j ) else
42580: LD_ADDR_VAR 0 19
42584: PUSH
42585: LD_VAR 0 19
42589: PPUSH
42590: LD_INT 1
42592: PPUSH
42593: LD_VAR 0 9
42597: PPUSH
42598: CALL_OW 2
42602: ST_TO_ADDR
42603: GO 42634
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42605: LD_ADDR_VAR 0 19
42609: PUSH
42610: LD_VAR 0 19
42614: PPUSH
42615: LD_VAR 0 19
42619: PUSH
42620: LD_INT 1
42622: PLUS
42623: PPUSH
42624: LD_VAR 0 9
42628: PPUSH
42629: CALL_OW 2
42633: ST_TO_ADDR
42634: GO 42562
42636: POP
42637: POP
// if tmp then
42638: LD_VAR 0 19
42642: IFFALSE 42654
// f := tmp ;
42644: LD_ADDR_VAR 0 12
42648: PUSH
42649: LD_VAR 0 19
42653: ST_TO_ADDR
// end ; x := personel [ i ] ;
42654: LD_ADDR_VAR 0 13
42658: PUSH
42659: LD_VAR 0 6
42663: PUSH
42664: LD_VAR 0 8
42668: ARRAY
42669: ST_TO_ADDR
// if x = - 1 then
42670: LD_VAR 0 13
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: EQUAL
42679: IFFALSE 42888
// begin for j in f do
42681: LD_ADDR_VAR 0 9
42685: PUSH
42686: LD_VAR 0 12
42690: PUSH
42691: FOR_IN
42692: IFFALSE 42884
// repeat InitHc ;
42694: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42698: LD_VAR 0 9
42702: PPUSH
42703: CALL_OW 266
42707: PUSH
42708: LD_INT 5
42710: EQUAL
42711: IFFALSE 42781
// begin if UnitsInside ( j ) < 3 then
42713: LD_VAR 0 9
42717: PPUSH
42718: CALL_OW 313
42722: PUSH
42723: LD_INT 3
42725: LESS
42726: IFFALSE 42762
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42728: LD_INT 0
42730: PPUSH
42731: LD_INT 5
42733: PUSH
42734: LD_INT 8
42736: PUSH
42737: LD_INT 9
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: LIST
42744: PUSH
42745: LD_VAR 0 17
42749: ARRAY
42750: PPUSH
42751: LD_VAR 0 4
42755: PPUSH
42756: CALL_OW 380
42760: GO 42779
// PrepareHuman ( false , i , skill ) ;
42762: LD_INT 0
42764: PPUSH
42765: LD_VAR 0 8
42769: PPUSH
42770: LD_VAR 0 4
42774: PPUSH
42775: CALL_OW 380
// end else
42779: GO 42798
// PrepareHuman ( false , i , skill ) ;
42781: LD_INT 0
42783: PPUSH
42784: LD_VAR 0 8
42788: PPUSH
42789: LD_VAR 0 4
42793: PPUSH
42794: CALL_OW 380
// un := CreateHuman ;
42798: LD_ADDR_VAR 0 14
42802: PUSH
42803: CALL_OW 44
42807: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42808: LD_ADDR_VAR 0 7
42812: PUSH
42813: LD_VAR 0 7
42817: PPUSH
42818: LD_INT 1
42820: PPUSH
42821: LD_VAR 0 14
42825: PPUSH
42826: CALL_OW 2
42830: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42831: LD_VAR 0 14
42835: PPUSH
42836: LD_VAR 0 9
42840: PPUSH
42841: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42845: LD_VAR 0 9
42849: PPUSH
42850: CALL_OW 313
42854: PUSH
42855: LD_INT 6
42857: EQUAL
42858: PUSH
42859: LD_VAR 0 9
42863: PPUSH
42864: CALL_OW 266
42868: PUSH
42869: LD_INT 32
42871: PUSH
42872: LD_INT 31
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: IN
42879: OR
42880: IFFALSE 42694
42882: GO 42691
42884: POP
42885: POP
// end else
42886: GO 43268
// for j = 1 to x do
42888: LD_ADDR_VAR 0 9
42892: PUSH
42893: DOUBLE
42894: LD_INT 1
42896: DEC
42897: ST_TO_ADDR
42898: LD_VAR 0 13
42902: PUSH
42903: FOR_TO
42904: IFFALSE 43266
// begin InitHc ;
42906: CALL_OW 19
// if not f then
42910: LD_VAR 0 12
42914: NOT
42915: IFFALSE 43004
// begin PrepareHuman ( false , i , skill ) ;
42917: LD_INT 0
42919: PPUSH
42920: LD_VAR 0 8
42924: PPUSH
42925: LD_VAR 0 4
42929: PPUSH
42930: CALL_OW 380
// un := CreateHuman ;
42934: LD_ADDR_VAR 0 14
42938: PUSH
42939: CALL_OW 44
42943: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42944: LD_ADDR_VAR 0 7
42948: PUSH
42949: LD_VAR 0 7
42953: PPUSH
42954: LD_INT 1
42956: PPUSH
42957: LD_VAR 0 14
42961: PPUSH
42962: CALL_OW 2
42966: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42967: LD_VAR 0 14
42971: PPUSH
42972: LD_VAR 0 1
42976: PPUSH
42977: CALL_OW 250
42981: PPUSH
42982: LD_VAR 0 1
42986: PPUSH
42987: CALL_OW 251
42991: PPUSH
42992: LD_INT 10
42994: PPUSH
42995: LD_INT 0
42997: PPUSH
42998: CALL_OW 50
// continue ;
43002: GO 42903
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43004: LD_VAR 0 12
43008: PUSH
43009: LD_INT 1
43011: ARRAY
43012: PPUSH
43013: CALL_OW 313
43017: PUSH
43018: LD_VAR 0 12
43022: PUSH
43023: LD_INT 1
43025: ARRAY
43026: PPUSH
43027: CALL_OW 266
43031: PUSH
43032: LD_INT 32
43034: PUSH
43035: LD_INT 31
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: IN
43042: AND
43043: PUSH
43044: LD_VAR 0 12
43048: PUSH
43049: LD_INT 1
43051: ARRAY
43052: PPUSH
43053: CALL_OW 313
43057: PUSH
43058: LD_INT 6
43060: EQUAL
43061: OR
43062: IFFALSE 43082
// f := Delete ( f , 1 ) ;
43064: LD_ADDR_VAR 0 12
43068: PUSH
43069: LD_VAR 0 12
43073: PPUSH
43074: LD_INT 1
43076: PPUSH
43077: CALL_OW 3
43081: ST_TO_ADDR
// if not f then
43082: LD_VAR 0 12
43086: NOT
43087: IFFALSE 43105
// begin x := x + 2 ;
43089: LD_ADDR_VAR 0 13
43093: PUSH
43094: LD_VAR 0 13
43098: PUSH
43099: LD_INT 2
43101: PLUS
43102: ST_TO_ADDR
// continue ;
43103: GO 42903
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43105: LD_VAR 0 12
43109: PUSH
43110: LD_INT 1
43112: ARRAY
43113: PPUSH
43114: CALL_OW 266
43118: PUSH
43119: LD_INT 5
43121: EQUAL
43122: IFFALSE 43196
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43124: LD_VAR 0 12
43128: PUSH
43129: LD_INT 1
43131: ARRAY
43132: PPUSH
43133: CALL_OW 313
43137: PUSH
43138: LD_INT 3
43140: LESS
43141: IFFALSE 43177
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43143: LD_INT 0
43145: PPUSH
43146: LD_INT 5
43148: PUSH
43149: LD_INT 8
43151: PUSH
43152: LD_INT 9
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: LIST
43159: PUSH
43160: LD_VAR 0 17
43164: ARRAY
43165: PPUSH
43166: LD_VAR 0 4
43170: PPUSH
43171: CALL_OW 380
43175: GO 43194
// PrepareHuman ( false , i , skill ) ;
43177: LD_INT 0
43179: PPUSH
43180: LD_VAR 0 8
43184: PPUSH
43185: LD_VAR 0 4
43189: PPUSH
43190: CALL_OW 380
// end else
43194: GO 43213
// PrepareHuman ( false , i , skill ) ;
43196: LD_INT 0
43198: PPUSH
43199: LD_VAR 0 8
43203: PPUSH
43204: LD_VAR 0 4
43208: PPUSH
43209: CALL_OW 380
// un := CreateHuman ;
43213: LD_ADDR_VAR 0 14
43217: PUSH
43218: CALL_OW 44
43222: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43223: LD_ADDR_VAR 0 7
43227: PUSH
43228: LD_VAR 0 7
43232: PPUSH
43233: LD_INT 1
43235: PPUSH
43236: LD_VAR 0 14
43240: PPUSH
43241: CALL_OW 2
43245: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43246: LD_VAR 0 14
43250: PPUSH
43251: LD_VAR 0 12
43255: PUSH
43256: LD_INT 1
43258: ARRAY
43259: PPUSH
43260: CALL_OW 52
// end ;
43264: GO 42903
43266: POP
43267: POP
// end ;
43268: GO 42205
43270: POP
43271: POP
// result := result ^ buildings ;
43272: LD_ADDR_VAR 0 7
43276: PUSH
43277: LD_VAR 0 7
43281: PUSH
43282: LD_VAR 0 18
43286: ADD
43287: ST_TO_ADDR
// end else
43288: GO 43431
// begin for i = 1 to personel do
43290: LD_ADDR_VAR 0 8
43294: PUSH
43295: DOUBLE
43296: LD_INT 1
43298: DEC
43299: ST_TO_ADDR
43300: LD_VAR 0 6
43304: PUSH
43305: FOR_TO
43306: IFFALSE 43429
// begin if i > 4 then
43308: LD_VAR 0 8
43312: PUSH
43313: LD_INT 4
43315: GREATER
43316: IFFALSE 43320
// break ;
43318: GO 43429
// x := personel [ i ] ;
43320: LD_ADDR_VAR 0 13
43324: PUSH
43325: LD_VAR 0 6
43329: PUSH
43330: LD_VAR 0 8
43334: ARRAY
43335: ST_TO_ADDR
// if x = - 1 then
43336: LD_VAR 0 13
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: EQUAL
43345: IFFALSE 43349
// continue ;
43347: GO 43305
// PrepareHuman ( false , i , skill ) ;
43349: LD_INT 0
43351: PPUSH
43352: LD_VAR 0 8
43356: PPUSH
43357: LD_VAR 0 4
43361: PPUSH
43362: CALL_OW 380
// un := CreateHuman ;
43366: LD_ADDR_VAR 0 14
43370: PUSH
43371: CALL_OW 44
43375: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43376: LD_VAR 0 14
43380: PPUSH
43381: LD_VAR 0 1
43385: PPUSH
43386: CALL_OW 250
43390: PPUSH
43391: LD_VAR 0 1
43395: PPUSH
43396: CALL_OW 251
43400: PPUSH
43401: LD_INT 10
43403: PPUSH
43404: LD_INT 0
43406: PPUSH
43407: CALL_OW 50
// result := result ^ un ;
43411: LD_ADDR_VAR 0 7
43415: PUSH
43416: LD_VAR 0 7
43420: PUSH
43421: LD_VAR 0 14
43425: ADD
43426: ST_TO_ADDR
// end ;
43427: GO 43305
43429: POP
43430: POP
// end ; end ;
43431: LD_VAR 0 7
43435: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43436: LD_INT 0
43438: PPUSH
43439: PPUSH
43440: PPUSH
43441: PPUSH
43442: PPUSH
43443: PPUSH
43444: PPUSH
43445: PPUSH
43446: PPUSH
43447: PPUSH
43448: PPUSH
43449: PPUSH
43450: PPUSH
43451: PPUSH
43452: PPUSH
43453: PPUSH
// result := false ;
43454: LD_ADDR_VAR 0 3
43458: PUSH
43459: LD_INT 0
43461: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43462: LD_VAR 0 1
43466: NOT
43467: PUSH
43468: LD_VAR 0 1
43472: PPUSH
43473: CALL_OW 266
43477: PUSH
43478: LD_INT 32
43480: PUSH
43481: LD_INT 33
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: IN
43488: NOT
43489: OR
43490: IFFALSE 43494
// exit ;
43492: GO 44630
// nat := GetNation ( tower ) ;
43494: LD_ADDR_VAR 0 12
43498: PUSH
43499: LD_VAR 0 1
43503: PPUSH
43504: CALL_OW 248
43508: ST_TO_ADDR
// side := GetSide ( tower ) ;
43509: LD_ADDR_VAR 0 16
43513: PUSH
43514: LD_VAR 0 1
43518: PPUSH
43519: CALL_OW 255
43523: ST_TO_ADDR
// x := GetX ( tower ) ;
43524: LD_ADDR_VAR 0 10
43528: PUSH
43529: LD_VAR 0 1
43533: PPUSH
43534: CALL_OW 250
43538: ST_TO_ADDR
// y := GetY ( tower ) ;
43539: LD_ADDR_VAR 0 11
43543: PUSH
43544: LD_VAR 0 1
43548: PPUSH
43549: CALL_OW 251
43553: ST_TO_ADDR
// if not x or not y then
43554: LD_VAR 0 10
43558: NOT
43559: PUSH
43560: LD_VAR 0 11
43564: NOT
43565: OR
43566: IFFALSE 43570
// exit ;
43568: GO 44630
// weapon := 0 ;
43570: LD_ADDR_VAR 0 18
43574: PUSH
43575: LD_INT 0
43577: ST_TO_ADDR
// fac_list := [ ] ;
43578: LD_ADDR_VAR 0 17
43582: PUSH
43583: EMPTY
43584: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
43585: LD_ADDR_VAR 0 6
43589: PUSH
43590: LD_VAR 0 1
43594: PPUSH
43595: CALL_OW 274
43599: PPUSH
43600: LD_VAR 0 2
43604: PPUSH
43605: CALL 41208 0 2
43609: PPUSH
43610: LD_INT 30
43612: PUSH
43613: LD_INT 3
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PPUSH
43620: CALL_OW 72
43624: ST_TO_ADDR
// if not factories then
43625: LD_VAR 0 6
43629: NOT
43630: IFFALSE 43634
// exit ;
43632: GO 44630
// for i in factories do
43634: LD_ADDR_VAR 0 8
43638: PUSH
43639: LD_VAR 0 6
43643: PUSH
43644: FOR_IN
43645: IFFALSE 43670
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43647: LD_ADDR_VAR 0 17
43651: PUSH
43652: LD_VAR 0 17
43656: PUSH
43657: LD_VAR 0 8
43661: PPUSH
43662: CALL_OW 478
43666: UNION
43667: ST_TO_ADDR
43668: GO 43644
43670: POP
43671: POP
// if not fac_list then
43672: LD_VAR 0 17
43676: NOT
43677: IFFALSE 43681
// exit ;
43679: GO 44630
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43681: LD_ADDR_VAR 0 5
43685: PUSH
43686: LD_INT 4
43688: PUSH
43689: LD_INT 5
43691: PUSH
43692: LD_INT 9
43694: PUSH
43695: LD_INT 10
43697: PUSH
43698: LD_INT 6
43700: PUSH
43701: LD_INT 7
43703: PUSH
43704: LD_INT 11
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 27
43718: PUSH
43719: LD_INT 28
43721: PUSH
43722: LD_INT 26
43724: PUSH
43725: LD_INT 30
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 43
43736: PUSH
43737: LD_INT 44
43739: PUSH
43740: LD_INT 46
43742: PUSH
43743: LD_INT 45
43745: PUSH
43746: LD_INT 47
43748: PUSH
43749: LD_INT 49
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: PUSH
43765: LD_VAR 0 12
43769: ARRAY
43770: ST_TO_ADDR
// for i in list do
43771: LD_ADDR_VAR 0 8
43775: PUSH
43776: LD_VAR 0 5
43780: PUSH
43781: FOR_IN
43782: IFFALSE 43815
// if not i in fac_list then
43784: LD_VAR 0 8
43788: PUSH
43789: LD_VAR 0 17
43793: IN
43794: NOT
43795: IFFALSE 43813
// list := list diff i ;
43797: LD_ADDR_VAR 0 5
43801: PUSH
43802: LD_VAR 0 5
43806: PUSH
43807: LD_VAR 0 8
43811: DIFF
43812: ST_TO_ADDR
43813: GO 43781
43815: POP
43816: POP
// if not list then
43817: LD_VAR 0 5
43821: NOT
43822: IFFALSE 43826
// exit ;
43824: GO 44630
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43826: LD_VAR 0 12
43830: PUSH
43831: LD_INT 3
43833: EQUAL
43834: PUSH
43835: LD_INT 49
43837: PUSH
43838: LD_VAR 0 5
43842: IN
43843: AND
43844: PUSH
43845: LD_INT 31
43847: PPUSH
43848: LD_VAR 0 16
43852: PPUSH
43853: CALL_OW 321
43857: PUSH
43858: LD_INT 2
43860: EQUAL
43861: AND
43862: IFFALSE 43922
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43864: LD_INT 22
43866: PUSH
43867: LD_VAR 0 16
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 35
43878: PUSH
43879: LD_INT 49
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 91
43888: PUSH
43889: LD_VAR 0 1
43893: PUSH
43894: LD_INT 10
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: LIST
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: PPUSH
43907: CALL_OW 69
43911: NOT
43912: IFFALSE 43922
// weapon := ru_time_lapser ;
43914: LD_ADDR_VAR 0 18
43918: PUSH
43919: LD_INT 49
43921: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43922: LD_VAR 0 12
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: IN
43937: PUSH
43938: LD_INT 11
43940: PUSH
43941: LD_VAR 0 5
43945: IN
43946: PUSH
43947: LD_INT 30
43949: PUSH
43950: LD_VAR 0 5
43954: IN
43955: OR
43956: AND
43957: PUSH
43958: LD_INT 6
43960: PPUSH
43961: LD_VAR 0 16
43965: PPUSH
43966: CALL_OW 321
43970: PUSH
43971: LD_INT 2
43973: EQUAL
43974: AND
43975: IFFALSE 44140
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43977: LD_INT 22
43979: PUSH
43980: LD_VAR 0 16
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 2
43991: PUSH
43992: LD_INT 35
43994: PUSH
43995: LD_INT 11
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 35
44004: PUSH
44005: LD_INT 30
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 91
44019: PUSH
44020: LD_VAR 0 1
44024: PUSH
44025: LD_INT 18
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: LIST
44037: PPUSH
44038: CALL_OW 69
44042: NOT
44043: PUSH
44044: LD_INT 22
44046: PUSH
44047: LD_VAR 0 16
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 30
44061: PUSH
44062: LD_INT 32
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 30
44071: PUSH
44072: LD_INT 33
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 91
44086: PUSH
44087: LD_VAR 0 1
44091: PUSH
44092: LD_INT 12
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: LIST
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: PUSH
44105: EMPTY
44106: LIST
44107: PPUSH
44108: CALL_OW 69
44112: PUSH
44113: LD_INT 2
44115: GREATER
44116: AND
44117: IFFALSE 44140
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44119: LD_ADDR_VAR 0 18
44123: PUSH
44124: LD_INT 11
44126: PUSH
44127: LD_INT 30
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_VAR 0 12
44138: ARRAY
44139: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44140: LD_VAR 0 18
44144: NOT
44145: PUSH
44146: LD_INT 40
44148: PPUSH
44149: LD_VAR 0 16
44153: PPUSH
44154: CALL_OW 321
44158: PUSH
44159: LD_INT 2
44161: EQUAL
44162: AND
44163: PUSH
44164: LD_INT 7
44166: PUSH
44167: LD_VAR 0 5
44171: IN
44172: PUSH
44173: LD_INT 28
44175: PUSH
44176: LD_VAR 0 5
44180: IN
44181: OR
44182: PUSH
44183: LD_INT 45
44185: PUSH
44186: LD_VAR 0 5
44190: IN
44191: OR
44192: AND
44193: IFFALSE 44447
// begin hex := GetHexInfo ( x , y ) ;
44195: LD_ADDR_VAR 0 4
44199: PUSH
44200: LD_VAR 0 10
44204: PPUSH
44205: LD_VAR 0 11
44209: PPUSH
44210: CALL_OW 546
44214: ST_TO_ADDR
// if hex [ 1 ] then
44215: LD_VAR 0 4
44219: PUSH
44220: LD_INT 1
44222: ARRAY
44223: IFFALSE 44227
// exit ;
44225: GO 44630
// height := hex [ 2 ] ;
44227: LD_ADDR_VAR 0 15
44231: PUSH
44232: LD_VAR 0 4
44236: PUSH
44237: LD_INT 2
44239: ARRAY
44240: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44241: LD_ADDR_VAR 0 14
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: LD_INT 3
44254: PUSH
44255: LD_INT 5
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: ST_TO_ADDR
// for i in tmp do
44264: LD_ADDR_VAR 0 8
44268: PUSH
44269: LD_VAR 0 14
44273: PUSH
44274: FOR_IN
44275: IFFALSE 44445
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44277: LD_ADDR_VAR 0 9
44281: PUSH
44282: LD_VAR 0 10
44286: PPUSH
44287: LD_VAR 0 8
44291: PPUSH
44292: LD_INT 5
44294: PPUSH
44295: CALL_OW 272
44299: PUSH
44300: LD_VAR 0 11
44304: PPUSH
44305: LD_VAR 0 8
44309: PPUSH
44310: LD_INT 5
44312: PPUSH
44313: CALL_OW 273
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44322: LD_VAR 0 9
44326: PUSH
44327: LD_INT 1
44329: ARRAY
44330: PPUSH
44331: LD_VAR 0 9
44335: PUSH
44336: LD_INT 2
44338: ARRAY
44339: PPUSH
44340: CALL_OW 488
44344: IFFALSE 44443
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44346: LD_ADDR_VAR 0 4
44350: PUSH
44351: LD_VAR 0 9
44355: PUSH
44356: LD_INT 1
44358: ARRAY
44359: PPUSH
44360: LD_VAR 0 9
44364: PUSH
44365: LD_INT 2
44367: ARRAY
44368: PPUSH
44369: CALL_OW 546
44373: ST_TO_ADDR
// if hex [ 1 ] then
44374: LD_VAR 0 4
44378: PUSH
44379: LD_INT 1
44381: ARRAY
44382: IFFALSE 44386
// continue ;
44384: GO 44274
// h := hex [ 2 ] ;
44386: LD_ADDR_VAR 0 13
44390: PUSH
44391: LD_VAR 0 4
44395: PUSH
44396: LD_INT 2
44398: ARRAY
44399: ST_TO_ADDR
// if h + 7 < height then
44400: LD_VAR 0 13
44404: PUSH
44405: LD_INT 7
44407: PLUS
44408: PUSH
44409: LD_VAR 0 15
44413: LESS
44414: IFFALSE 44443
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44416: LD_ADDR_VAR 0 18
44420: PUSH
44421: LD_INT 7
44423: PUSH
44424: LD_INT 28
44426: PUSH
44427: LD_INT 45
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: LIST
44434: PUSH
44435: LD_VAR 0 12
44439: ARRAY
44440: ST_TO_ADDR
// break ;
44441: GO 44445
// end ; end ; end ;
44443: GO 44274
44445: POP
44446: POP
// end ; if not weapon then
44447: LD_VAR 0 18
44451: NOT
44452: IFFALSE 44512
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44454: LD_ADDR_VAR 0 5
44458: PUSH
44459: LD_VAR 0 5
44463: PUSH
44464: LD_INT 11
44466: PUSH
44467: LD_INT 30
44469: PUSH
44470: LD_INT 49
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: LIST
44477: DIFF
44478: ST_TO_ADDR
// if not list then
44479: LD_VAR 0 5
44483: NOT
44484: IFFALSE 44488
// exit ;
44486: GO 44630
// weapon := list [ rand ( 1 , list ) ] ;
44488: LD_ADDR_VAR 0 18
44492: PUSH
44493: LD_VAR 0 5
44497: PUSH
44498: LD_INT 1
44500: PPUSH
44501: LD_VAR 0 5
44505: PPUSH
44506: CALL_OW 12
44510: ARRAY
44511: ST_TO_ADDR
// end ; if weapon then
44512: LD_VAR 0 18
44516: IFFALSE 44630
// begin tmp := CostOfWeapon ( weapon ) ;
44518: LD_ADDR_VAR 0 14
44522: PUSH
44523: LD_VAR 0 18
44527: PPUSH
44528: CALL_OW 451
44532: ST_TO_ADDR
// j := GetBase ( tower ) ;
44533: LD_ADDR_VAR 0 9
44537: PUSH
44538: LD_VAR 0 1
44542: PPUSH
44543: CALL_OW 274
44547: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44548: LD_VAR 0 9
44552: PPUSH
44553: LD_INT 1
44555: PPUSH
44556: CALL_OW 275
44560: PUSH
44561: LD_VAR 0 14
44565: PUSH
44566: LD_INT 1
44568: ARRAY
44569: GREATEREQUAL
44570: PUSH
44571: LD_VAR 0 9
44575: PPUSH
44576: LD_INT 2
44578: PPUSH
44579: CALL_OW 275
44583: PUSH
44584: LD_VAR 0 14
44588: PUSH
44589: LD_INT 2
44591: ARRAY
44592: GREATEREQUAL
44593: AND
44594: PUSH
44595: LD_VAR 0 9
44599: PPUSH
44600: LD_INT 3
44602: PPUSH
44603: CALL_OW 275
44607: PUSH
44608: LD_VAR 0 14
44612: PUSH
44613: LD_INT 3
44615: ARRAY
44616: GREATEREQUAL
44617: AND
44618: IFFALSE 44630
// result := weapon ;
44620: LD_ADDR_VAR 0 3
44624: PUSH
44625: LD_VAR 0 18
44629: ST_TO_ADDR
// end ; end ;
44630: LD_VAR 0 3
44634: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44635: LD_INT 0
44637: PPUSH
44638: PPUSH
// result := true ;
44639: LD_ADDR_VAR 0 3
44643: PUSH
44644: LD_INT 1
44646: ST_TO_ADDR
// if array1 = array2 then
44647: LD_VAR 0 1
44651: PUSH
44652: LD_VAR 0 2
44656: EQUAL
44657: IFFALSE 44717
// begin for i = 1 to array1 do
44659: LD_ADDR_VAR 0 4
44663: PUSH
44664: DOUBLE
44665: LD_INT 1
44667: DEC
44668: ST_TO_ADDR
44669: LD_VAR 0 1
44673: PUSH
44674: FOR_TO
44675: IFFALSE 44713
// if array1 [ i ] <> array2 [ i ] then
44677: LD_VAR 0 1
44681: PUSH
44682: LD_VAR 0 4
44686: ARRAY
44687: PUSH
44688: LD_VAR 0 2
44692: PUSH
44693: LD_VAR 0 4
44697: ARRAY
44698: NONEQUAL
44699: IFFALSE 44711
// begin result := false ;
44701: LD_ADDR_VAR 0 3
44705: PUSH
44706: LD_INT 0
44708: ST_TO_ADDR
// break ;
44709: GO 44713
// end ;
44711: GO 44674
44713: POP
44714: POP
// end else
44715: GO 44725
// result := false ;
44717: LD_ADDR_VAR 0 3
44721: PUSH
44722: LD_INT 0
44724: ST_TO_ADDR
// end ;
44725: LD_VAR 0 3
44729: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44730: LD_INT 0
44732: PPUSH
44733: PPUSH
44734: PPUSH
// pom := GetBase ( fac ) ;
44735: LD_ADDR_VAR 0 5
44739: PUSH
44740: LD_VAR 0 1
44744: PPUSH
44745: CALL_OW 274
44749: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44750: LD_ADDR_VAR 0 4
44754: PUSH
44755: LD_VAR 0 2
44759: PUSH
44760: LD_INT 1
44762: ARRAY
44763: PPUSH
44764: LD_VAR 0 2
44768: PUSH
44769: LD_INT 2
44771: ARRAY
44772: PPUSH
44773: LD_VAR 0 2
44777: PUSH
44778: LD_INT 3
44780: ARRAY
44781: PPUSH
44782: LD_VAR 0 2
44786: PUSH
44787: LD_INT 4
44789: ARRAY
44790: PPUSH
44791: CALL_OW 449
44795: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44796: LD_ADDR_VAR 0 3
44800: PUSH
44801: LD_VAR 0 5
44805: PPUSH
44806: LD_INT 1
44808: PPUSH
44809: CALL_OW 275
44813: PUSH
44814: LD_VAR 0 4
44818: PUSH
44819: LD_INT 1
44821: ARRAY
44822: GREATEREQUAL
44823: PUSH
44824: LD_VAR 0 5
44828: PPUSH
44829: LD_INT 2
44831: PPUSH
44832: CALL_OW 275
44836: PUSH
44837: LD_VAR 0 4
44841: PUSH
44842: LD_INT 2
44844: ARRAY
44845: GREATEREQUAL
44846: AND
44847: PUSH
44848: LD_VAR 0 5
44852: PPUSH
44853: LD_INT 3
44855: PPUSH
44856: CALL_OW 275
44860: PUSH
44861: LD_VAR 0 4
44865: PUSH
44866: LD_INT 3
44868: ARRAY
44869: GREATEREQUAL
44870: AND
44871: ST_TO_ADDR
// end ;
44872: LD_VAR 0 3
44876: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44877: LD_INT 0
44879: PPUSH
44880: PPUSH
44881: PPUSH
44882: PPUSH
// pom := GetBase ( building ) ;
44883: LD_ADDR_VAR 0 3
44887: PUSH
44888: LD_VAR 0 1
44892: PPUSH
44893: CALL_OW 274
44897: ST_TO_ADDR
// if not pom then
44898: LD_VAR 0 3
44902: NOT
44903: IFFALSE 44907
// exit ;
44905: GO 45077
// btype := GetBType ( building ) ;
44907: LD_ADDR_VAR 0 5
44911: PUSH
44912: LD_VAR 0 1
44916: PPUSH
44917: CALL_OW 266
44921: ST_TO_ADDR
// if btype = b_armoury then
44922: LD_VAR 0 5
44926: PUSH
44927: LD_INT 4
44929: EQUAL
44930: IFFALSE 44940
// btype := b_barracks ;
44932: LD_ADDR_VAR 0 5
44936: PUSH
44937: LD_INT 5
44939: ST_TO_ADDR
// if btype = b_depot then
44940: LD_VAR 0 5
44944: PUSH
44945: LD_INT 0
44947: EQUAL
44948: IFFALSE 44958
// btype := b_warehouse ;
44950: LD_ADDR_VAR 0 5
44954: PUSH
44955: LD_INT 1
44957: ST_TO_ADDR
// if btype = b_workshop then
44958: LD_VAR 0 5
44962: PUSH
44963: LD_INT 2
44965: EQUAL
44966: IFFALSE 44976
// btype := b_factory ;
44968: LD_ADDR_VAR 0 5
44972: PUSH
44973: LD_INT 3
44975: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44976: LD_ADDR_VAR 0 4
44980: PUSH
44981: LD_VAR 0 5
44985: PPUSH
44986: LD_VAR 0 1
44990: PPUSH
44991: CALL_OW 248
44995: PPUSH
44996: CALL_OW 450
45000: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45001: LD_ADDR_VAR 0 2
45005: PUSH
45006: LD_VAR 0 3
45010: PPUSH
45011: LD_INT 1
45013: PPUSH
45014: CALL_OW 275
45018: PUSH
45019: LD_VAR 0 4
45023: PUSH
45024: LD_INT 1
45026: ARRAY
45027: GREATEREQUAL
45028: PUSH
45029: LD_VAR 0 3
45033: PPUSH
45034: LD_INT 2
45036: PPUSH
45037: CALL_OW 275
45041: PUSH
45042: LD_VAR 0 4
45046: PUSH
45047: LD_INT 2
45049: ARRAY
45050: GREATEREQUAL
45051: AND
45052: PUSH
45053: LD_VAR 0 3
45057: PPUSH
45058: LD_INT 3
45060: PPUSH
45061: CALL_OW 275
45065: PUSH
45066: LD_VAR 0 4
45070: PUSH
45071: LD_INT 3
45073: ARRAY
45074: GREATEREQUAL
45075: AND
45076: ST_TO_ADDR
// end ;
45077: LD_VAR 0 2
45081: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45082: LD_INT 0
45084: PPUSH
45085: PPUSH
45086: PPUSH
// pom := GetBase ( building ) ;
45087: LD_ADDR_VAR 0 4
45091: PUSH
45092: LD_VAR 0 1
45096: PPUSH
45097: CALL_OW 274
45101: ST_TO_ADDR
// if not pom then
45102: LD_VAR 0 4
45106: NOT
45107: IFFALSE 45111
// exit ;
45109: GO 45212
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45111: LD_ADDR_VAR 0 5
45115: PUSH
45116: LD_VAR 0 2
45120: PPUSH
45121: LD_VAR 0 1
45125: PPUSH
45126: CALL_OW 248
45130: PPUSH
45131: CALL_OW 450
45135: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45136: LD_ADDR_VAR 0 3
45140: PUSH
45141: LD_VAR 0 4
45145: PPUSH
45146: LD_INT 1
45148: PPUSH
45149: CALL_OW 275
45153: PUSH
45154: LD_VAR 0 5
45158: PUSH
45159: LD_INT 1
45161: ARRAY
45162: GREATEREQUAL
45163: PUSH
45164: LD_VAR 0 4
45168: PPUSH
45169: LD_INT 2
45171: PPUSH
45172: CALL_OW 275
45176: PUSH
45177: LD_VAR 0 5
45181: PUSH
45182: LD_INT 2
45184: ARRAY
45185: GREATEREQUAL
45186: AND
45187: PUSH
45188: LD_VAR 0 4
45192: PPUSH
45193: LD_INT 3
45195: PPUSH
45196: CALL_OW 275
45200: PUSH
45201: LD_VAR 0 5
45205: PUSH
45206: LD_INT 3
45208: ARRAY
45209: GREATEREQUAL
45210: AND
45211: ST_TO_ADDR
// end ;
45212: LD_VAR 0 3
45216: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
45217: LD_INT 0
45219: PPUSH
45220: PPUSH
45221: PPUSH
45222: PPUSH
45223: PPUSH
45224: PPUSH
45225: PPUSH
45226: PPUSH
45227: PPUSH
45228: PPUSH
// result := false ;
45229: LD_ADDR_VAR 0 6
45233: PUSH
45234: LD_INT 0
45236: ST_TO_ADDR
// if not base or not btype or not x or not y then
45237: LD_VAR 0 1
45241: NOT
45242: PUSH
45243: LD_VAR 0 2
45247: NOT
45248: OR
45249: PUSH
45250: LD_VAR 0 3
45254: NOT
45255: OR
45256: PUSH
45257: LD_VAR 0 4
45261: NOT
45262: OR
45263: IFFALSE 45267
// exit ;
45265: GO 45876
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
45267: LD_ADDR_VAR 0 12
45271: PUSH
45272: LD_VAR 0 2
45276: PPUSH
45277: LD_VAR 0 3
45281: PPUSH
45282: LD_VAR 0 4
45286: PPUSH
45287: LD_VAR 0 5
45291: PPUSH
45292: LD_VAR 0 1
45296: PUSH
45297: LD_INT 1
45299: ARRAY
45300: PPUSH
45301: CALL_OW 248
45305: PPUSH
45306: LD_INT 0
45308: PPUSH
45309: CALL 46713 0 6
45313: ST_TO_ADDR
// if not hexes then
45314: LD_VAR 0 12
45318: NOT
45319: IFFALSE 45323
// exit ;
45321: GO 45876
// for i = 1 to hexes do
45323: LD_ADDR_VAR 0 7
45327: PUSH
45328: DOUBLE
45329: LD_INT 1
45331: DEC
45332: ST_TO_ADDR
45333: LD_VAR 0 12
45337: PUSH
45338: FOR_TO
45339: IFFALSE 45874
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45341: LD_ADDR_VAR 0 11
45345: PUSH
45346: LD_VAR 0 12
45350: PUSH
45351: LD_VAR 0 7
45355: ARRAY
45356: PUSH
45357: LD_INT 1
45359: ARRAY
45360: PPUSH
45361: LD_VAR 0 12
45365: PUSH
45366: LD_VAR 0 7
45370: ARRAY
45371: PUSH
45372: LD_INT 2
45374: ARRAY
45375: PPUSH
45376: CALL_OW 428
45380: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45381: LD_VAR 0 12
45385: PUSH
45386: LD_VAR 0 7
45390: ARRAY
45391: PUSH
45392: LD_INT 1
45394: ARRAY
45395: PPUSH
45396: LD_VAR 0 12
45400: PUSH
45401: LD_VAR 0 7
45405: ARRAY
45406: PUSH
45407: LD_INT 2
45409: ARRAY
45410: PPUSH
45411: CALL_OW 351
45415: PUSH
45416: LD_VAR 0 12
45420: PUSH
45421: LD_VAR 0 7
45425: ARRAY
45426: PUSH
45427: LD_INT 1
45429: ARRAY
45430: PPUSH
45431: LD_VAR 0 12
45435: PUSH
45436: LD_VAR 0 7
45440: ARRAY
45441: PUSH
45442: LD_INT 2
45444: ARRAY
45445: PPUSH
45446: CALL_OW 488
45450: NOT
45451: OR
45452: PUSH
45453: LD_VAR 0 11
45457: PPUSH
45458: CALL_OW 247
45462: PUSH
45463: LD_INT 3
45465: EQUAL
45466: OR
45467: IFFALSE 45473
// exit ;
45469: POP
45470: POP
45471: GO 45876
// if not tmp or not tmp in base then
45473: LD_VAR 0 11
45477: NOT
45478: PUSH
45479: LD_VAR 0 11
45483: PUSH
45484: LD_VAR 0 1
45488: IN
45489: NOT
45490: OR
45491: IFFALSE 45495
// continue ;
45493: GO 45338
// result := true ;
45495: LD_ADDR_VAR 0 6
45499: PUSH
45500: LD_INT 1
45502: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45503: LD_ADDR_VAR 0 15
45507: PUSH
45508: LD_VAR 0 1
45512: PPUSH
45513: LD_INT 22
45515: PUSH
45516: LD_VAR 0 11
45520: PPUSH
45521: CALL_OW 255
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: LD_INT 30
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 30
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PPUSH
45562: CALL_OW 72
45566: ST_TO_ADDR
// if dep then
45567: LD_VAR 0 15
45571: IFFALSE 45707
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45573: LD_ADDR_VAR 0 14
45577: PUSH
45578: LD_VAR 0 15
45582: PUSH
45583: LD_INT 1
45585: ARRAY
45586: PPUSH
45587: CALL_OW 250
45591: PPUSH
45592: LD_VAR 0 15
45596: PUSH
45597: LD_INT 1
45599: ARRAY
45600: PPUSH
45601: CALL_OW 254
45605: PPUSH
45606: LD_INT 5
45608: PPUSH
45609: CALL_OW 272
45613: PUSH
45614: LD_VAR 0 15
45618: PUSH
45619: LD_INT 1
45621: ARRAY
45622: PPUSH
45623: CALL_OW 251
45627: PPUSH
45628: LD_VAR 0 15
45632: PUSH
45633: LD_INT 1
45635: ARRAY
45636: PPUSH
45637: CALL_OW 254
45641: PPUSH
45642: LD_INT 5
45644: PPUSH
45645: CALL_OW 273
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45654: LD_VAR 0 14
45658: PUSH
45659: LD_INT 1
45661: ARRAY
45662: PPUSH
45663: LD_VAR 0 14
45667: PUSH
45668: LD_INT 2
45670: ARRAY
45671: PPUSH
45672: CALL_OW 488
45676: IFFALSE 45707
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45678: LD_VAR 0 11
45682: PPUSH
45683: LD_VAR 0 14
45687: PUSH
45688: LD_INT 1
45690: ARRAY
45691: PPUSH
45692: LD_VAR 0 14
45696: PUSH
45697: LD_INT 2
45699: ARRAY
45700: PPUSH
45701: CALL_OW 111
// continue ;
45705: GO 45338
// end ; end ; r := GetDir ( tmp ) ;
45707: LD_ADDR_VAR 0 13
45711: PUSH
45712: LD_VAR 0 11
45716: PPUSH
45717: CALL_OW 254
45721: ST_TO_ADDR
// if r = 5 then
45722: LD_VAR 0 13
45726: PUSH
45727: LD_INT 5
45729: EQUAL
45730: IFFALSE 45740
// r := 0 ;
45732: LD_ADDR_VAR 0 13
45736: PUSH
45737: LD_INT 0
45739: ST_TO_ADDR
// for j = r to 5 do
45740: LD_ADDR_VAR 0 8
45744: PUSH
45745: DOUBLE
45746: LD_VAR 0 13
45750: DEC
45751: ST_TO_ADDR
45752: LD_INT 5
45754: PUSH
45755: FOR_TO
45756: IFFALSE 45870
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45758: LD_ADDR_VAR 0 9
45762: PUSH
45763: LD_VAR 0 11
45767: PPUSH
45768: CALL_OW 250
45772: PPUSH
45773: LD_VAR 0 8
45777: PPUSH
45778: LD_INT 2
45780: PPUSH
45781: CALL_OW 272
45785: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45786: LD_ADDR_VAR 0 10
45790: PUSH
45791: LD_VAR 0 11
45795: PPUSH
45796: CALL_OW 251
45800: PPUSH
45801: LD_VAR 0 8
45805: PPUSH
45806: LD_INT 2
45808: PPUSH
45809: CALL_OW 273
45813: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45814: LD_VAR 0 9
45818: PPUSH
45819: LD_VAR 0 10
45823: PPUSH
45824: CALL_OW 488
45828: PUSH
45829: LD_VAR 0 9
45833: PPUSH
45834: LD_VAR 0 10
45838: PPUSH
45839: CALL_OW 428
45843: NOT
45844: AND
45845: IFFALSE 45868
// begin ComMoveXY ( tmp , _x , _y ) ;
45847: LD_VAR 0 11
45851: PPUSH
45852: LD_VAR 0 9
45856: PPUSH
45857: LD_VAR 0 10
45861: PPUSH
45862: CALL_OW 111
// break ;
45866: GO 45870
// end ; end ;
45868: GO 45755
45870: POP
45871: POP
// end ;
45872: GO 45338
45874: POP
45875: POP
// end ;
45876: LD_VAR 0 6
45880: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
45881: LD_INT 0
45883: PPUSH
45884: PPUSH
45885: PPUSH
45886: PPUSH
45887: PPUSH
45888: PPUSH
45889: PPUSH
45890: PPUSH
45891: PPUSH
45892: PPUSH
// result := false ;
45893: LD_ADDR_VAR 0 6
45897: PUSH
45898: LD_INT 0
45900: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45901: LD_VAR 0 1
45905: NOT
45906: PUSH
45907: LD_VAR 0 1
45911: PPUSH
45912: CALL_OW 266
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: IN
45927: NOT
45928: OR
45929: PUSH
45930: LD_VAR 0 2
45934: NOT
45935: OR
45936: PUSH
45937: LD_VAR 0 5
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: LD_INT 3
45953: PUSH
45954: LD_INT 4
45956: PUSH
45957: LD_INT 5
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: IN
45968: NOT
45969: OR
45970: PUSH
45971: LD_VAR 0 3
45975: PPUSH
45976: LD_VAR 0 4
45980: PPUSH
45981: CALL_OW 488
45985: NOT
45986: OR
45987: IFFALSE 45991
// exit ;
45989: GO 46708
// pom := GetBase ( depot ) ;
45991: LD_ADDR_VAR 0 10
45995: PUSH
45996: LD_VAR 0 1
46000: PPUSH
46001: CALL_OW 274
46005: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46006: LD_ADDR_VAR 0 11
46010: PUSH
46011: LD_VAR 0 2
46015: PPUSH
46016: LD_VAR 0 1
46020: PPUSH
46021: CALL_OW 248
46025: PPUSH
46026: CALL_OW 450
46030: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46031: LD_VAR 0 10
46035: PPUSH
46036: LD_INT 1
46038: PPUSH
46039: CALL_OW 275
46043: PUSH
46044: LD_VAR 0 11
46048: PUSH
46049: LD_INT 1
46051: ARRAY
46052: GREATEREQUAL
46053: PUSH
46054: LD_VAR 0 10
46058: PPUSH
46059: LD_INT 2
46061: PPUSH
46062: CALL_OW 275
46066: PUSH
46067: LD_VAR 0 11
46071: PUSH
46072: LD_INT 2
46074: ARRAY
46075: GREATEREQUAL
46076: AND
46077: PUSH
46078: LD_VAR 0 10
46082: PPUSH
46083: LD_INT 3
46085: PPUSH
46086: CALL_OW 275
46090: PUSH
46091: LD_VAR 0 11
46095: PUSH
46096: LD_INT 3
46098: ARRAY
46099: GREATEREQUAL
46100: AND
46101: NOT
46102: IFFALSE 46106
// exit ;
46104: GO 46708
// if GetBType ( depot ) = b_depot then
46106: LD_VAR 0 1
46110: PPUSH
46111: CALL_OW 266
46115: PUSH
46116: LD_INT 0
46118: EQUAL
46119: IFFALSE 46131
// dist := 28 else
46121: LD_ADDR_VAR 0 14
46125: PUSH
46126: LD_INT 28
46128: ST_TO_ADDR
46129: GO 46139
// dist := 36 ;
46131: LD_ADDR_VAR 0 14
46135: PUSH
46136: LD_INT 36
46138: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46139: LD_VAR 0 1
46143: PPUSH
46144: LD_VAR 0 3
46148: PPUSH
46149: LD_VAR 0 4
46153: PPUSH
46154: CALL_OW 297
46158: PUSH
46159: LD_VAR 0 14
46163: GREATER
46164: IFFALSE 46168
// exit ;
46166: GO 46708
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46168: LD_ADDR_VAR 0 12
46172: PUSH
46173: LD_VAR 0 2
46177: PPUSH
46178: LD_VAR 0 3
46182: PPUSH
46183: LD_VAR 0 4
46187: PPUSH
46188: LD_VAR 0 5
46192: PPUSH
46193: LD_VAR 0 1
46197: PPUSH
46198: CALL_OW 248
46202: PPUSH
46203: LD_INT 0
46205: PPUSH
46206: CALL 46713 0 6
46210: ST_TO_ADDR
// if not hexes then
46211: LD_VAR 0 12
46215: NOT
46216: IFFALSE 46220
// exit ;
46218: GO 46708
// hex := GetHexInfo ( x , y ) ;
46220: LD_ADDR_VAR 0 15
46224: PUSH
46225: LD_VAR 0 3
46229: PPUSH
46230: LD_VAR 0 4
46234: PPUSH
46235: CALL_OW 546
46239: ST_TO_ADDR
// if hex [ 1 ] then
46240: LD_VAR 0 15
46244: PUSH
46245: LD_INT 1
46247: ARRAY
46248: IFFALSE 46252
// exit ;
46250: GO 46708
// height := hex [ 2 ] ;
46252: LD_ADDR_VAR 0 13
46256: PUSH
46257: LD_VAR 0 15
46261: PUSH
46262: LD_INT 2
46264: ARRAY
46265: ST_TO_ADDR
// for i = 1 to hexes do
46266: LD_ADDR_VAR 0 7
46270: PUSH
46271: DOUBLE
46272: LD_INT 1
46274: DEC
46275: ST_TO_ADDR
46276: LD_VAR 0 12
46280: PUSH
46281: FOR_TO
46282: IFFALSE 46612
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46284: LD_VAR 0 12
46288: PUSH
46289: LD_VAR 0 7
46293: ARRAY
46294: PUSH
46295: LD_INT 1
46297: ARRAY
46298: PPUSH
46299: LD_VAR 0 12
46303: PUSH
46304: LD_VAR 0 7
46308: ARRAY
46309: PUSH
46310: LD_INT 2
46312: ARRAY
46313: PPUSH
46314: CALL_OW 488
46318: NOT
46319: PUSH
46320: LD_VAR 0 12
46324: PUSH
46325: LD_VAR 0 7
46329: ARRAY
46330: PUSH
46331: LD_INT 1
46333: ARRAY
46334: PPUSH
46335: LD_VAR 0 12
46339: PUSH
46340: LD_VAR 0 7
46344: ARRAY
46345: PUSH
46346: LD_INT 2
46348: ARRAY
46349: PPUSH
46350: CALL_OW 428
46354: PUSH
46355: LD_INT 0
46357: GREATER
46358: OR
46359: PUSH
46360: LD_VAR 0 12
46364: PUSH
46365: LD_VAR 0 7
46369: ARRAY
46370: PUSH
46371: LD_INT 1
46373: ARRAY
46374: PPUSH
46375: LD_VAR 0 12
46379: PUSH
46380: LD_VAR 0 7
46384: ARRAY
46385: PUSH
46386: LD_INT 2
46388: ARRAY
46389: PPUSH
46390: CALL_OW 351
46394: OR
46395: IFFALSE 46401
// exit ;
46397: POP
46398: POP
46399: GO 46708
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46401: LD_ADDR_VAR 0 8
46405: PUSH
46406: LD_VAR 0 12
46410: PUSH
46411: LD_VAR 0 7
46415: ARRAY
46416: PUSH
46417: LD_INT 1
46419: ARRAY
46420: PPUSH
46421: LD_VAR 0 12
46425: PUSH
46426: LD_VAR 0 7
46430: ARRAY
46431: PUSH
46432: LD_INT 2
46434: ARRAY
46435: PPUSH
46436: CALL_OW 546
46440: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46441: LD_VAR 0 8
46445: PUSH
46446: LD_INT 1
46448: ARRAY
46449: PUSH
46450: LD_VAR 0 8
46454: PUSH
46455: LD_INT 2
46457: ARRAY
46458: PUSH
46459: LD_VAR 0 13
46463: PUSH
46464: LD_INT 2
46466: PLUS
46467: GREATER
46468: OR
46469: PUSH
46470: LD_VAR 0 8
46474: PUSH
46475: LD_INT 2
46477: ARRAY
46478: PUSH
46479: LD_VAR 0 13
46483: PUSH
46484: LD_INT 2
46486: MINUS
46487: LESS
46488: OR
46489: PUSH
46490: LD_VAR 0 8
46494: PUSH
46495: LD_INT 3
46497: ARRAY
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 8
46504: PUSH
46505: LD_INT 9
46507: PUSH
46508: LD_INT 10
46510: PUSH
46511: LD_INT 11
46513: PUSH
46514: LD_INT 12
46516: PUSH
46517: LD_INT 13
46519: PUSH
46520: LD_INT 16
46522: PUSH
46523: LD_INT 17
46525: PUSH
46526: LD_INT 18
46528: PUSH
46529: LD_INT 19
46531: PUSH
46532: LD_INT 20
46534: PUSH
46535: LD_INT 21
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: IN
46553: NOT
46554: OR
46555: PUSH
46556: LD_VAR 0 8
46560: PUSH
46561: LD_INT 5
46563: ARRAY
46564: NOT
46565: OR
46566: PUSH
46567: LD_VAR 0 8
46571: PUSH
46572: LD_INT 6
46574: ARRAY
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: LD_INT 7
46584: PUSH
46585: LD_INT 9
46587: PUSH
46588: LD_INT 10
46590: PUSH
46591: LD_INT 11
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: IN
46602: NOT
46603: OR
46604: IFFALSE 46610
// exit ;
46606: POP
46607: POP
46608: GO 46708
// end ;
46610: GO 46281
46612: POP
46613: POP
// side := GetSide ( depot ) ;
46614: LD_ADDR_VAR 0 9
46618: PUSH
46619: LD_VAR 0 1
46623: PPUSH
46624: CALL_OW 255
46628: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46629: LD_VAR 0 9
46633: PPUSH
46634: LD_VAR 0 3
46638: PPUSH
46639: LD_VAR 0 4
46643: PPUSH
46644: LD_INT 20
46646: PPUSH
46647: CALL 39362 0 4
46651: PUSH
46652: LD_INT 4
46654: ARRAY
46655: IFFALSE 46659
// exit ;
46657: GO 46708
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46659: LD_VAR 0 2
46663: PUSH
46664: LD_INT 29
46666: PUSH
46667: LD_INT 30
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: IN
46674: PUSH
46675: LD_VAR 0 3
46679: PPUSH
46680: LD_VAR 0 4
46684: PPUSH
46685: LD_VAR 0 9
46689: PPUSH
46690: CALL_OW 440
46694: NOT
46695: AND
46696: IFFALSE 46700
// exit ;
46698: GO 46708
// result := true ;
46700: LD_ADDR_VAR 0 6
46704: PUSH
46705: LD_INT 1
46707: ST_TO_ADDR
// end ;
46708: LD_VAR 0 6
46712: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
46713: LD_INT 0
46715: PPUSH
46716: PPUSH
46717: PPUSH
46718: PPUSH
46719: PPUSH
46720: PPUSH
46721: PPUSH
46722: PPUSH
46723: PPUSH
46724: PPUSH
46725: PPUSH
46726: PPUSH
46727: PPUSH
46728: PPUSH
46729: PPUSH
46730: PPUSH
46731: PPUSH
46732: PPUSH
46733: PPUSH
46734: PPUSH
46735: PPUSH
46736: PPUSH
46737: PPUSH
46738: PPUSH
46739: PPUSH
46740: PPUSH
46741: PPUSH
46742: PPUSH
46743: PPUSH
46744: PPUSH
46745: PPUSH
46746: PPUSH
46747: PPUSH
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
46765: PPUSH
46766: PPUSH
46767: PPUSH
46768: PPUSH
46769: PPUSH
46770: PPUSH
46771: PPUSH
46772: PPUSH
// result = [ ] ;
46773: LD_ADDR_VAR 0 7
46777: PUSH
46778: EMPTY
46779: ST_TO_ADDR
// temp_list = [ ] ;
46780: LD_ADDR_VAR 0 9
46784: PUSH
46785: EMPTY
46786: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46787: LD_VAR 0 4
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: LD_INT 4
46806: PUSH
46807: LD_INT 5
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: IN
46818: NOT
46819: PUSH
46820: LD_VAR 0 1
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: IN
46835: PUSH
46836: LD_VAR 0 5
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: LD_INT 3
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: LIST
46854: IN
46855: NOT
46856: AND
46857: OR
46858: IFFALSE 46862
// exit ;
46860: GO 65253
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46862: LD_VAR 0 1
46866: PUSH
46867: LD_INT 6
46869: PUSH
46870: LD_INT 7
46872: PUSH
46873: LD_INT 8
46875: PUSH
46876: LD_INT 13
46878: PUSH
46879: LD_INT 12
46881: PUSH
46882: LD_INT 15
46884: PUSH
46885: LD_INT 11
46887: PUSH
46888: LD_INT 14
46890: PUSH
46891: LD_INT 10
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: IN
46905: IFFALSE 46915
// btype = b_lab ;
46907: LD_ADDR_VAR 0 1
46911: PUSH
46912: LD_INT 6
46914: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46915: LD_VAR 0 6
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: IN
46934: NOT
46935: PUSH
46936: LD_VAR 0 1
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 3
46952: PUSH
46953: LD_INT 6
46955: PUSH
46956: LD_INT 36
46958: PUSH
46959: LD_INT 4
46961: PUSH
46962: LD_INT 5
46964: PUSH
46965: LD_INT 31
46967: PUSH
46968: LD_INT 32
46970: PUSH
46971: LD_INT 33
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: IN
46987: NOT
46988: PUSH
46989: LD_VAR 0 6
46993: PUSH
46994: LD_INT 1
46996: EQUAL
46997: AND
46998: OR
46999: PUSH
47000: LD_VAR 0 1
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 3
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: IN
47015: NOT
47016: PUSH
47017: LD_VAR 0 6
47021: PUSH
47022: LD_INT 2
47024: EQUAL
47025: AND
47026: OR
47027: IFFALSE 47037
// mode = 0 ;
47029: LD_ADDR_VAR 0 6
47033: PUSH
47034: LD_INT 0
47036: ST_TO_ADDR
// case mode of 0 :
47037: LD_VAR 0 6
47041: PUSH
47042: LD_INT 0
47044: DOUBLE
47045: EQUAL
47046: IFTRUE 47050
47048: GO 58503
47050: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47051: LD_ADDR_VAR 0 11
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 3
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 3
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47244: LD_ADDR_VAR 0 12
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: NEG
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 3
47401: NEG
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 3
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47440: LD_ADDR_VAR 0 13
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: LD_INT 3
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 3
47599: NEG
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 3
47611: NEG
47612: PUSH
47613: LD_INT 3
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47639: LD_ADDR_VAR 0 14
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: LD_INT 3
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 3
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47835: LD_ADDR_VAR 0 15
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 3
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 3
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48028: LD_ADDR_VAR 0 16
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 3
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: LD_INT 3
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: LD_INT 3
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48221: LD_ADDR_VAR 0 17
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48451: LD_ADDR_VAR 0 18
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: LD_INT 2
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48681: LD_ADDR_VAR 0 19
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48911: LD_ADDR_VAR 0 20
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 2
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 2
49110: NEG
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49141: LD_ADDR_VAR 0 21
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49371: LD_ADDR_VAR 0 22
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 2
49570: NEG
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49601: LD_ADDR_VAR 0 23
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: LD_INT 3
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: LD_INT 3
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49881: LD_ADDR_VAR 0 24
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: NEG
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: LD_INT 2
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 3
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 3
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50157: LD_ADDR_VAR 0 25
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 3
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: PUSH
50389: LD_INT 3
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 3
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50431: LD_ADDR_VAR 0 26
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: LD_INT 3
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 3
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50707: LD_ADDR_VAR 0 27
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 3
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 3
50952: NEG
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50987: LD_ADDR_VAR 0 28
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: NEG
51199: PUSH
51200: LD_INT 3
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: LD_INT 3
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 3
51222: NEG
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 3
51234: NEG
51235: PUSH
51236: LD_INT 2
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51269: LD_ADDR_VAR 0 29
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: LD_INT 3
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 3
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 3
51513: NEG
51514: PUSH
51515: LD_INT 2
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51548: LD_ADDR_VAR 0 30
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 3
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 2
51780: NEG
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51826: LD_ADDR_VAR 0 31
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: LD_INT 3
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 3
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 3
52069: NEG
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52104: LD_ADDR_VAR 0 32
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: LD_INT 3
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 3
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: NEG
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52382: LD_ADDR_VAR 0 33
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 2
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: LD_INT 3
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 3
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52661: LD_ADDR_VAR 0 34
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 3
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52941: LD_ADDR_VAR 0 35
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53053: LD_ADDR_VAR 0 36
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 2
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53165: LD_ADDR_VAR 0 37
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53277: LD_ADDR_VAR 0 38
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53389: LD_ADDR_VAR 0 39
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53501: LD_ADDR_VAR 0 40
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53613: LD_ADDR_VAR 0 41
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: LD_INT 2
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 3
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 3
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 3
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: LD_INT 3
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: LD_INT 3
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 3
53898: NEG
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 3
53910: NEG
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 3
53922: NEG
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53963: LD_ADDR_VAR 0 42
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 2
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 2
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: LD_INT 2
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 3
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 3
54209: PUSH
54210: LD_INT 3
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: LD_INT 3
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: LD_INT 3
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 3
54260: NEG
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 3
54272: NEG
54273: PUSH
54274: LD_INT 3
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54313: LD_ADDR_VAR 0 43
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: LD_INT 3
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 3
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 3
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: LD_INT 3
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 3
54609: NEG
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54661: LD_ADDR_VAR 0 44
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: NEG
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: NEG
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 3
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 3
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 3
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 3
54904: PUSH
54905: LD_INT 3
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: LD_INT 3
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 3
54958: NEG
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: LD_INT 3
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55011: LD_ADDR_VAR 0 45
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: LD_INT 3
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: LD_INT 3
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 3
55247: PUSH
55248: LD_INT 2
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 3
55257: PUSH
55258: LD_INT 3
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 3
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 3
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 3
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 3
55308: NEG
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: NEG
55321: PUSH
55322: LD_INT 3
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55361: LD_ADDR_VAR 0 46
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 3
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 3
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 3
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 3
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 3
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55709: LD_ADDR_VAR 0 47
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: LD_INT 2
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: NEG
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55860: LD_ADDR_VAR 0 48
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56007: LD_ADDR_VAR 0 49
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56151: LD_ADDR_VAR 0 50
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 2
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56295: LD_ADDR_VAR 0 51
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 2
56418: NEG
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56442: LD_ADDR_VAR 0 52
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56593: LD_ADDR_VAR 0 53
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 2
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56823: LD_ADDR_VAR 0 54
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 2
56999: NEG
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57053: LD_ADDR_VAR 0 55
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57283: LD_ADDR_VAR 0 56
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: NEG
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57513: LD_ADDR_VAR 0 57
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57743: LD_ADDR_VAR 0 58
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 2
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 2
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: LD_INT 2
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57973: LD_ADDR_VAR 0 59
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58061: LD_ADDR_VAR 0 60
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: LD_INT 1
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58149: LD_ADDR_VAR 0 61
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58237: LD_ADDR_VAR 0 62
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58325: LD_ADDR_VAR 0 63
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58413: LD_ADDR_VAR 0 64
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: ST_TO_ADDR
// end ; 1 :
58501: GO 64398
58503: LD_INT 1
58505: DOUBLE
58506: EQUAL
58507: IFTRUE 58511
58509: GO 61134
58511: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58512: LD_ADDR_VAR 0 11
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 3
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: LIST
58555: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58556: LD_ADDR_VAR 0 12
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 3
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58597: LD_ADDR_VAR 0 13
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: LIST
58636: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58637: LD_ADDR_VAR 0 14
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 3
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: LIST
58677: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58678: LD_ADDR_VAR 0 15
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 3
58707: NEG
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: LIST
58721: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58722: LD_ADDR_VAR 0 16
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: LD_INT 3
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: NEG
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: LD_INT 3
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: LIST
58767: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58768: LD_ADDR_VAR 0 17
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: LIST
58811: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58812: LD_ADDR_VAR 0 18
58816: PUSH
58817: LD_INT 2
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: LIST
58852: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58853: LD_ADDR_VAR 0 19
58857: PUSH
58858: LD_INT 3
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 3
58870: PUSH
58871: LD_INT 3
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: LD_INT 3
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: LIST
58892: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58893: LD_ADDR_VAR 0 20
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 3
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: LIST
58933: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58934: LD_ADDR_VAR 0 21
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 3
58952: NEG
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: LIST
58977: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58978: LD_ADDR_VAR 0 22
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 3
58997: NEG
58998: PUSH
58999: LD_INT 2
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 3
59009: NEG
59010: PUSH
59011: LD_INT 3
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: LIST
59023: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59024: LD_ADDR_VAR 0 23
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: LD_INT 3
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: LD_INT 4
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 3
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: LIST
59067: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59068: LD_ADDR_VAR 0 24
59072: PUSH
59073: LD_INT 3
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 3
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 4
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: LIST
59108: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59109: LD_ADDR_VAR 0 25
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: LD_INT 3
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 4
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: LD_INT 4
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59149: LD_ADDR_VAR 0 26
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: LD_INT 4
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: LIST
59189: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59190: LD_ADDR_VAR 0 27
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 3
59208: NEG
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 4
59219: NEG
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: LIST
59233: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59234: LD_ADDR_VAR 0 28
59238: PUSH
59239: LD_INT 3
59241: NEG
59242: PUSH
59243: LD_INT 3
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 3
59253: NEG
59254: PUSH
59255: LD_INT 4
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 4
59265: NEG
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: LIST
59279: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59280: LD_ADDR_VAR 0 29
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: LD_INT 3
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: LD_INT 3
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 2
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: LD_INT 4
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 4
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 3
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: LD_INT 5
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 5
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: LD_INT 4
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 6
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 6
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 5
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59435: LD_ADDR_VAR 0 30
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 3
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 4
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 4
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 4
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 5
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 5
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 5
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 6
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 6
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59578: LD_ADDR_VAR 0 31
59582: PUSH
59583: LD_INT 3
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 3
59595: PUSH
59596: LD_INT 3
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 2
59605: PUSH
59606: LD_INT 3
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 4
59615: PUSH
59616: LD_INT 3
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 4
59625: PUSH
59626: LD_INT 4
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 3
59635: PUSH
59636: LD_INT 4
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 5
59645: PUSH
59646: LD_INT 4
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 5
59655: PUSH
59656: LD_INT 5
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 4
59665: PUSH
59666: LD_INT 5
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 6
59675: PUSH
59676: LD_INT 5
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 6
59685: PUSH
59686: LD_INT 6
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 5
59695: PUSH
59696: LD_INT 6
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59717: LD_ADDR_VAR 0 32
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: LD_INT 3
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: LD_INT 2
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: LD_INT 4
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: LD_INT 4
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: LD_INT 3
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: LD_INT 5
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: LD_INT 5
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: LD_INT 4
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: LD_INT 6
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 6
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: LD_INT 5
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59860: LD_ADDR_VAR 0 33
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 3
59878: NEG
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 3
59889: NEG
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 3
59901: NEG
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 4
59912: NEG
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 4
59923: NEG
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 4
59935: NEG
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 5
59946: NEG
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 5
59957: NEG
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 5
59969: NEG
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 6
59980: NEG
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 6
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60015: LD_ADDR_VAR 0 34
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: LD_INT 3
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 3
60034: NEG
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 3
60046: NEG
60047: PUSH
60048: LD_INT 3
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: LD_INT 4
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 4
60070: NEG
60071: PUSH
60072: LD_INT 3
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 4
60082: NEG
60083: PUSH
60084: LD_INT 4
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 4
60094: NEG
60095: PUSH
60096: LD_INT 5
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 5
60106: NEG
60107: PUSH
60108: LD_INT 4
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 5
60118: NEG
60119: PUSH
60120: LD_INT 5
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 5
60130: NEG
60131: PUSH
60132: LD_INT 6
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 6
60142: NEG
60143: PUSH
60144: LD_INT 5
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 6
60154: NEG
60155: PUSH
60156: LD_INT 6
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60178: LD_ADDR_VAR 0 41
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: LD_INT 3
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: LD_INT 2
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: LIST
60221: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60222: LD_ADDR_VAR 0 42
60226: PUSH
60227: LD_INT 2
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: LIST
60262: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60263: LD_ADDR_VAR 0 43
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: LD_INT 3
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: LIST
60302: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60303: LD_ADDR_VAR 0 44
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 3
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60344: LD_ADDR_VAR 0 45
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: LIST
60387: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60388: LD_ADDR_VAR 0 46
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 2
60407: NEG
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 3
60419: NEG
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60434: LD_ADDR_VAR 0 47
60438: PUSH
60439: LD_INT 2
60441: NEG
60442: PUSH
60443: LD_INT 3
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: LD_INT 3
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60467: LD_ADDR_VAR 0 48
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 2
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60498: LD_ADDR_VAR 0 49
60502: PUSH
60503: LD_INT 3
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 3
60515: PUSH
60516: LD_INT 2
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60527: LD_ADDR_VAR 0 50
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60556: LD_ADDR_VAR 0 51
60560: PUSH
60561: LD_INT 1
60563: NEG
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60587: LD_ADDR_VAR 0 52
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 3
60606: NEG
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60620: LD_ADDR_VAR 0 53
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: LD_INT 3
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: LD_INT 2
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: LIST
60663: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60664: LD_ADDR_VAR 0 54
60668: PUSH
60669: LD_INT 2
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 3
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 3
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: LIST
60704: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60705: LD_ADDR_VAR 0 55
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 2
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: LIST
60744: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60745: LD_ADDR_VAR 0 56
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: LD_INT 3
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 3
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 2
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: LIST
60785: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60786: LD_ADDR_VAR 0 57
60790: PUSH
60791: LD_INT 2
60793: NEG
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 3
60804: NEG
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: LIST
60829: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60830: LD_ADDR_VAR 0 58
60834: PUSH
60835: LD_INT 2
60837: NEG
60838: PUSH
60839: LD_INT 3
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 3
60849: NEG
60850: PUSH
60851: LD_INT 2
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 3
60861: NEG
60862: PUSH
60863: LD_INT 3
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: LIST
60875: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60876: LD_ADDR_VAR 0 59
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 2
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: LIST
60919: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60920: LD_ADDR_VAR 0 60
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: LIST
60960: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60961: LD_ADDR_VAR 0 61
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: LIST
61000: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61001: LD_ADDR_VAR 0 62
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: LD_INT 2
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: LIST
61041: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61042: LD_ADDR_VAR 0 63
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61086: LD_ADDR_VAR 0 64
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: LD_INT 2
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: LD_INT 1
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: LIST
61131: ST_TO_ADDR
// end ; 2 :
61132: GO 64398
61134: LD_INT 2
61136: DOUBLE
61137: EQUAL
61138: IFTRUE 61142
61140: GO 64397
61142: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61143: LD_ADDR_VAR 0 29
61147: PUSH
61148: LD_INT 4
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 4
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 5
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 5
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 4
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 3
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 3
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 5
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 3
61243: PUSH
61244: LD_INT 3
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 4
61263: PUSH
61264: LD_INT 3
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 4
61273: PUSH
61274: LD_INT 4
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 3
61283: PUSH
61284: LD_INT 4
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 2
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 2
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 4
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: LD_INT 4
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 4
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: LD_INT 4
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 5
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 5
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: LD_INT 4
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: LD_INT 3
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: LD_INT 5
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: LD_INT 3
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 3
61426: NEG
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: NEG
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 2
61460: NEG
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 3
61471: NEG
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 4
61482: NEG
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 4
61493: NEG
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 4
61505: NEG
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: NEG
61518: PUSH
61519: LD_INT 2
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 4
61528: NEG
61529: PUSH
61530: LD_INT 4
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 4
61540: NEG
61541: PUSH
61542: LD_INT 5
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 3
61552: NEG
61553: PUSH
61554: LD_INT 4
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 3
61564: NEG
61565: PUSH
61566: LD_INT 3
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 4
61576: NEG
61577: PUSH
61578: LD_INT 3
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 5
61588: NEG
61589: PUSH
61590: LD_INT 4
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 5
61600: NEG
61601: PUSH
61602: LD_INT 5
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 3
61612: NEG
61613: PUSH
61614: LD_INT 5
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 5
61624: NEG
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61681: LD_ADDR_VAR 0 30
61685: PUSH
61686: LD_INT 4
61688: PUSH
61689: LD_INT 4
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 4
61698: PUSH
61699: LD_INT 3
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 5
61708: PUSH
61709: LD_INT 4
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 5
61718: PUSH
61719: LD_INT 5
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 4
61728: PUSH
61729: LD_INT 5
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 3
61738: PUSH
61739: LD_INT 4
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 3
61748: PUSH
61749: LD_INT 3
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 5
61758: PUSH
61759: LD_INT 3
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 3
61768: PUSH
61769: LD_INT 5
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: LD_INT 3
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: LD_INT 2
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: LD_INT 3
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: LD_INT 4
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: LD_INT 4
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: LD_INT 2
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 2
61850: PUSH
61851: LD_INT 4
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 4
61871: NEG
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 4
61882: NEG
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 3
61894: NEG
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 3
61905: NEG
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 4
61916: NEG
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 5
61927: NEG
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 5
61938: NEG
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 5
61950: NEG
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 3
61962: NEG
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 3
61973: NEG
61974: PUSH
61975: LD_INT 3
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 3
61985: NEG
61986: PUSH
61987: LD_INT 4
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 2
61997: NEG
61998: PUSH
61999: LD_INT 3
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PUSH
62011: LD_INT 2
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 3
62021: NEG
62022: PUSH
62023: LD_INT 2
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 4
62033: NEG
62034: PUSH
62035: LD_INT 3
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 4
62045: NEG
62046: PUSH
62047: LD_INT 4
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: NEG
62058: PUSH
62059: LD_INT 4
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 4
62069: NEG
62070: PUSH
62071: LD_INT 2
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: LD_INT 4
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 5
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: LD_INT 4
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: LD_INT 3
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: LD_INT 3
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 1
62136: NEG
62137: PUSH
62138: LD_INT 4
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: NEG
62149: PUSH
62150: LD_INT 5
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 2
62160: PUSH
62161: LD_INT 3
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 2
62171: NEG
62172: PUSH
62173: LD_INT 5
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62228: LD_ADDR_VAR 0 31
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: LD_INT 4
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: LD_INT 3
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: LD_INT 4
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 5
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: LD_INT 5
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: LD_INT 4
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: NEG
62297: PUSH
62298: LD_INT 3
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: LD_INT 5
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: LD_INT 3
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 3
62328: NEG
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 3
62339: NEG
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 2
62362: NEG
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 3
62373: NEG
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 4
62384: NEG
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 4
62395: NEG
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 4
62407: NEG
62408: PUSH
62409: LD_INT 2
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 2
62419: NEG
62420: PUSH
62421: LD_INT 2
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 4
62430: NEG
62431: PUSH
62432: LD_INT 4
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 4
62442: NEG
62443: PUSH
62444: LD_INT 5
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 3
62454: NEG
62455: PUSH
62456: LD_INT 4
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 3
62466: NEG
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 4
62478: NEG
62479: PUSH
62480: LD_INT 3
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 5
62490: NEG
62491: PUSH
62492: LD_INT 4
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 5
62502: NEG
62503: PUSH
62504: LD_INT 5
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 3
62514: NEG
62515: PUSH
62516: LD_INT 5
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 5
62526: NEG
62527: PUSH
62528: LD_INT 3
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: LD_INT 3
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: LD_INT 4
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: LD_INT 3
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 1
62571: PUSH
62572: LD_INT 2
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: LD_INT 2
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 3
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: LD_INT 4
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 2
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 2
62628: NEG
62629: PUSH
62630: LD_INT 4
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 4
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 4
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 5
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 5
62671: PUSH
62672: LD_INT 1
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 4
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 3
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 3
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 3
62712: PUSH
62713: LD_INT 2
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 5
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62778: LD_ADDR_VAR 0 32
62782: PUSH
62783: LD_INT 4
62785: NEG
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 4
62796: NEG
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 3
62808: NEG
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 3
62819: NEG
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 4
62830: NEG
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 5
62841: NEG
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 5
62852: NEG
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 5
62864: NEG
62865: PUSH
62866: LD_INT 2
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 3
62876: NEG
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 3
62887: NEG
62888: PUSH
62889: LD_INT 3
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 3
62899: NEG
62900: PUSH
62901: LD_INT 4
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 2
62911: NEG
62912: PUSH
62913: LD_INT 3
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 2
62923: NEG
62924: PUSH
62925: LD_INT 2
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 3
62935: NEG
62936: PUSH
62937: LD_INT 2
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 4
62947: NEG
62948: PUSH
62949: LD_INT 3
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 4
62959: NEG
62960: PUSH
62961: LD_INT 4
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: LD_INT 4
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 4
62983: NEG
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 4
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: LD_INT 5
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 1
63017: PUSH
63018: LD_INT 4
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: LD_INT 3
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: LD_INT 3
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: LD_INT 4
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: LD_INT 5
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 2
63074: PUSH
63075: LD_INT 3
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: NEG
63086: PUSH
63087: LD_INT 5
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 3
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 3
63107: PUSH
63108: LD_INT 1
63110: NEG
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 4
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 4
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 3
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 2
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 2
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: LD_INT 2
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 4
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 4
63190: PUSH
63191: LD_INT 4
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 4
63200: PUSH
63201: LD_INT 3
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 5
63210: PUSH
63211: LD_INT 4
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 5
63220: PUSH
63221: LD_INT 5
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 4
63230: PUSH
63231: LD_INT 5
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 3
63240: PUSH
63241: LD_INT 4
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 3
63250: PUSH
63251: LD_INT 3
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 5
63260: PUSH
63261: LD_INT 3
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 3
63270: PUSH
63271: LD_INT 5
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63325: LD_ADDR_VAR 0 33
63329: PUSH
63330: LD_INT 4
63332: NEG
63333: PUSH
63334: LD_INT 4
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 4
63344: NEG
63345: PUSH
63346: LD_INT 5
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 3
63356: NEG
63357: PUSH
63358: LD_INT 4
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 3
63368: NEG
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 4
63380: NEG
63381: PUSH
63382: LD_INT 3
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 5
63392: NEG
63393: PUSH
63394: LD_INT 4
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 5
63404: NEG
63405: PUSH
63406: LD_INT 5
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 3
63416: NEG
63417: PUSH
63418: LD_INT 5
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 5
63428: NEG
63429: PUSH
63430: LD_INT 3
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 3
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 4
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: LD_INT 3
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: LD_INT 2
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: LD_INT 2
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 1
63495: NEG
63496: PUSH
63497: LD_INT 3
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 1
63507: NEG
63508: PUSH
63509: LD_INT 4
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: LD_INT 2
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 2
63530: NEG
63531: PUSH
63532: LD_INT 4
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 4
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 4
63552: PUSH
63553: LD_INT 1
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 5
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 5
63573: PUSH
63574: LD_INT 1
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 4
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 3
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 3
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 3
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 5
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 3
63635: PUSH
63636: LD_INT 3
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 3
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 4
63655: PUSH
63656: LD_INT 3
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 4
63665: PUSH
63666: LD_INT 4
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 3
63675: PUSH
63676: LD_INT 4
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 2
63685: PUSH
63686: LD_INT 3
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 2
63695: PUSH
63696: LD_INT 2
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 4
63705: PUSH
63706: LD_INT 2
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 2
63715: PUSH
63716: LD_INT 4
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: LD_INT 4
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: LD_INT 3
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: LD_INT 4
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 1
63755: PUSH
63756: LD_INT 5
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: LD_INT 5
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: PUSH
63777: LD_INT 4
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: LD_INT 3
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 2
63797: PUSH
63798: LD_INT 5
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 2
63807: NEG
63808: PUSH
63809: LD_INT 3
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63863: LD_ADDR_VAR 0 34
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: LD_INT 4
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: LD_INT 5
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: LD_INT 4
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: LD_INT 3
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: LD_INT 3
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: LD_INT 4
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: LD_INT 5
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 2
63949: PUSH
63950: LD_INT 3
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 2
63960: NEG
63961: PUSH
63962: LD_INT 5
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 3
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 3
63982: PUSH
63983: LD_INT 1
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 4
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 4
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 3
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 2
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 2
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 2
64044: PUSH
64045: LD_INT 2
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 4
64055: PUSH
64056: LD_INT 2
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 4
64065: PUSH
64066: LD_INT 4
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 4
64075: PUSH
64076: LD_INT 3
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 5
64085: PUSH
64086: LD_INT 4
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 5
64095: PUSH
64096: LD_INT 5
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 4
64105: PUSH
64106: LD_INT 5
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 3
64115: PUSH
64116: LD_INT 4
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 3
64125: PUSH
64126: LD_INT 3
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 5
64135: PUSH
64136: LD_INT 3
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 3
64145: PUSH
64146: LD_INT 5
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 3
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 2
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: LD_INT 3
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 1
64185: PUSH
64186: LD_INT 4
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: LD_INT 4
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 1
64205: NEG
64206: PUSH
64207: LD_INT 3
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 1
64216: NEG
64217: PUSH
64218: LD_INT 2
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 2
64227: PUSH
64228: LD_INT 4
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 2
64237: NEG
64238: PUSH
64239: LD_INT 2
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 4
64248: NEG
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 4
64259: NEG
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 3
64271: NEG
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 3
64282: NEG
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 4
64293: NEG
64294: PUSH
64295: LD_INT 1
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 5
64304: NEG
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 5
64315: NEG
64316: PUSH
64317: LD_INT 1
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 5
64327: NEG
64328: PUSH
64329: LD_INT 2
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 3
64339: NEG
64340: PUSH
64341: LD_INT 2
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: ST_TO_ADDR
// end ; end ;
64395: GO 64398
64397: POP
// case btype of b_depot , b_warehouse :
64398: LD_VAR 0 1
64402: PUSH
64403: LD_INT 0
64405: DOUBLE
64406: EQUAL
64407: IFTRUE 64417
64409: LD_INT 1
64411: DOUBLE
64412: EQUAL
64413: IFTRUE 64417
64415: GO 64618
64417: POP
// case nation of nation_american :
64418: LD_VAR 0 5
64422: PUSH
64423: LD_INT 1
64425: DOUBLE
64426: EQUAL
64427: IFTRUE 64431
64429: GO 64487
64431: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
64432: LD_ADDR_VAR 0 9
64436: PUSH
64437: LD_VAR 0 11
64441: PUSH
64442: LD_VAR 0 12
64446: PUSH
64447: LD_VAR 0 13
64451: PUSH
64452: LD_VAR 0 14
64456: PUSH
64457: LD_VAR 0 15
64461: PUSH
64462: LD_VAR 0 16
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: PUSH
64475: LD_VAR 0 4
64479: PUSH
64480: LD_INT 1
64482: PLUS
64483: ARRAY
64484: ST_TO_ADDR
64485: GO 64616
64487: LD_INT 2
64489: DOUBLE
64490: EQUAL
64491: IFTRUE 64495
64493: GO 64551
64495: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
64496: LD_ADDR_VAR 0 9
64500: PUSH
64501: LD_VAR 0 17
64505: PUSH
64506: LD_VAR 0 18
64510: PUSH
64511: LD_VAR 0 19
64515: PUSH
64516: LD_VAR 0 20
64520: PUSH
64521: LD_VAR 0 21
64525: PUSH
64526: LD_VAR 0 22
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: PUSH
64539: LD_VAR 0 4
64543: PUSH
64544: LD_INT 1
64546: PLUS
64547: ARRAY
64548: ST_TO_ADDR
64549: GO 64616
64551: LD_INT 3
64553: DOUBLE
64554: EQUAL
64555: IFTRUE 64559
64557: GO 64615
64559: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64560: LD_ADDR_VAR 0 9
64564: PUSH
64565: LD_VAR 0 23
64569: PUSH
64570: LD_VAR 0 24
64574: PUSH
64575: LD_VAR 0 25
64579: PUSH
64580: LD_VAR 0 26
64584: PUSH
64585: LD_VAR 0 27
64589: PUSH
64590: LD_VAR 0 28
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: PUSH
64603: LD_VAR 0 4
64607: PUSH
64608: LD_INT 1
64610: PLUS
64611: ARRAY
64612: ST_TO_ADDR
64613: GO 64616
64615: POP
64616: GO 65171
64618: LD_INT 2
64620: DOUBLE
64621: EQUAL
64622: IFTRUE 64632
64624: LD_INT 3
64626: DOUBLE
64627: EQUAL
64628: IFTRUE 64632
64630: GO 64688
64632: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64633: LD_ADDR_VAR 0 9
64637: PUSH
64638: LD_VAR 0 29
64642: PUSH
64643: LD_VAR 0 30
64647: PUSH
64648: LD_VAR 0 31
64652: PUSH
64653: LD_VAR 0 32
64657: PUSH
64658: LD_VAR 0 33
64662: PUSH
64663: LD_VAR 0 34
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: PUSH
64676: LD_VAR 0 4
64680: PUSH
64681: LD_INT 1
64683: PLUS
64684: ARRAY
64685: ST_TO_ADDR
64686: GO 65171
64688: LD_INT 16
64690: DOUBLE
64691: EQUAL
64692: IFTRUE 64750
64694: LD_INT 17
64696: DOUBLE
64697: EQUAL
64698: IFTRUE 64750
64700: LD_INT 18
64702: DOUBLE
64703: EQUAL
64704: IFTRUE 64750
64706: LD_INT 19
64708: DOUBLE
64709: EQUAL
64710: IFTRUE 64750
64712: LD_INT 22
64714: DOUBLE
64715: EQUAL
64716: IFTRUE 64750
64718: LD_INT 20
64720: DOUBLE
64721: EQUAL
64722: IFTRUE 64750
64724: LD_INT 21
64726: DOUBLE
64727: EQUAL
64728: IFTRUE 64750
64730: LD_INT 23
64732: DOUBLE
64733: EQUAL
64734: IFTRUE 64750
64736: LD_INT 24
64738: DOUBLE
64739: EQUAL
64740: IFTRUE 64750
64742: LD_INT 25
64744: DOUBLE
64745: EQUAL
64746: IFTRUE 64750
64748: GO 64806
64750: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64751: LD_ADDR_VAR 0 9
64755: PUSH
64756: LD_VAR 0 35
64760: PUSH
64761: LD_VAR 0 36
64765: PUSH
64766: LD_VAR 0 37
64770: PUSH
64771: LD_VAR 0 38
64775: PUSH
64776: LD_VAR 0 39
64780: PUSH
64781: LD_VAR 0 40
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: PUSH
64794: LD_VAR 0 4
64798: PUSH
64799: LD_INT 1
64801: PLUS
64802: ARRAY
64803: ST_TO_ADDR
64804: GO 65171
64806: LD_INT 6
64808: DOUBLE
64809: EQUAL
64810: IFTRUE 64862
64812: LD_INT 7
64814: DOUBLE
64815: EQUAL
64816: IFTRUE 64862
64818: LD_INT 8
64820: DOUBLE
64821: EQUAL
64822: IFTRUE 64862
64824: LD_INT 13
64826: DOUBLE
64827: EQUAL
64828: IFTRUE 64862
64830: LD_INT 12
64832: DOUBLE
64833: EQUAL
64834: IFTRUE 64862
64836: LD_INT 15
64838: DOUBLE
64839: EQUAL
64840: IFTRUE 64862
64842: LD_INT 11
64844: DOUBLE
64845: EQUAL
64846: IFTRUE 64862
64848: LD_INT 14
64850: DOUBLE
64851: EQUAL
64852: IFTRUE 64862
64854: LD_INT 10
64856: DOUBLE
64857: EQUAL
64858: IFTRUE 64862
64860: GO 64918
64862: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
64863: LD_ADDR_VAR 0 9
64867: PUSH
64868: LD_VAR 0 41
64872: PUSH
64873: LD_VAR 0 42
64877: PUSH
64878: LD_VAR 0 43
64882: PUSH
64883: LD_VAR 0 44
64887: PUSH
64888: LD_VAR 0 45
64892: PUSH
64893: LD_VAR 0 46
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: PUSH
64906: LD_VAR 0 4
64910: PUSH
64911: LD_INT 1
64913: PLUS
64914: ARRAY
64915: ST_TO_ADDR
64916: GO 65171
64918: LD_INT 36
64920: DOUBLE
64921: EQUAL
64922: IFTRUE 64926
64924: GO 64982
64926: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64927: LD_ADDR_VAR 0 9
64931: PUSH
64932: LD_VAR 0 47
64936: PUSH
64937: LD_VAR 0 48
64941: PUSH
64942: LD_VAR 0 49
64946: PUSH
64947: LD_VAR 0 50
64951: PUSH
64952: LD_VAR 0 51
64956: PUSH
64957: LD_VAR 0 52
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: PUSH
64970: LD_VAR 0 4
64974: PUSH
64975: LD_INT 1
64977: PLUS
64978: ARRAY
64979: ST_TO_ADDR
64980: GO 65171
64982: LD_INT 4
64984: DOUBLE
64985: EQUAL
64986: IFTRUE 65008
64988: LD_INT 5
64990: DOUBLE
64991: EQUAL
64992: IFTRUE 65008
64994: LD_INT 34
64996: DOUBLE
64997: EQUAL
64998: IFTRUE 65008
65000: LD_INT 37
65002: DOUBLE
65003: EQUAL
65004: IFTRUE 65008
65006: GO 65064
65008: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65009: LD_ADDR_VAR 0 9
65013: PUSH
65014: LD_VAR 0 53
65018: PUSH
65019: LD_VAR 0 54
65023: PUSH
65024: LD_VAR 0 55
65028: PUSH
65029: LD_VAR 0 56
65033: PUSH
65034: LD_VAR 0 57
65038: PUSH
65039: LD_VAR 0 58
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: PUSH
65052: LD_VAR 0 4
65056: PUSH
65057: LD_INT 1
65059: PLUS
65060: ARRAY
65061: ST_TO_ADDR
65062: GO 65171
65064: LD_INT 31
65066: DOUBLE
65067: EQUAL
65068: IFTRUE 65114
65070: LD_INT 32
65072: DOUBLE
65073: EQUAL
65074: IFTRUE 65114
65076: LD_INT 33
65078: DOUBLE
65079: EQUAL
65080: IFTRUE 65114
65082: LD_INT 27
65084: DOUBLE
65085: EQUAL
65086: IFTRUE 65114
65088: LD_INT 26
65090: DOUBLE
65091: EQUAL
65092: IFTRUE 65114
65094: LD_INT 28
65096: DOUBLE
65097: EQUAL
65098: IFTRUE 65114
65100: LD_INT 29
65102: DOUBLE
65103: EQUAL
65104: IFTRUE 65114
65106: LD_INT 30
65108: DOUBLE
65109: EQUAL
65110: IFTRUE 65114
65112: GO 65170
65114: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
65115: LD_ADDR_VAR 0 9
65119: PUSH
65120: LD_VAR 0 59
65124: PUSH
65125: LD_VAR 0 60
65129: PUSH
65130: LD_VAR 0 61
65134: PUSH
65135: LD_VAR 0 62
65139: PUSH
65140: LD_VAR 0 63
65144: PUSH
65145: LD_VAR 0 64
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: PUSH
65158: LD_VAR 0 4
65162: PUSH
65163: LD_INT 1
65165: PLUS
65166: ARRAY
65167: ST_TO_ADDR
65168: GO 65171
65170: POP
// temp_list2 = [ ] ;
65171: LD_ADDR_VAR 0 10
65175: PUSH
65176: EMPTY
65177: ST_TO_ADDR
// for i in temp_list do
65178: LD_ADDR_VAR 0 8
65182: PUSH
65183: LD_VAR 0 9
65187: PUSH
65188: FOR_IN
65189: IFFALSE 65241
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65191: LD_ADDR_VAR 0 10
65195: PUSH
65196: LD_VAR 0 10
65200: PUSH
65201: LD_VAR 0 8
65205: PUSH
65206: LD_INT 1
65208: ARRAY
65209: PUSH
65210: LD_VAR 0 2
65214: PLUS
65215: PUSH
65216: LD_VAR 0 8
65220: PUSH
65221: LD_INT 2
65223: ARRAY
65224: PUSH
65225: LD_VAR 0 3
65229: PLUS
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: EMPTY
65236: LIST
65237: ADD
65238: ST_TO_ADDR
65239: GO 65188
65241: POP
65242: POP
// result = temp_list2 ;
65243: LD_ADDR_VAR 0 7
65247: PUSH
65248: LD_VAR 0 10
65252: ST_TO_ADDR
// end ;
65253: LD_VAR 0 7
65257: RET
// export function EnemyInRange ( unit , dist ) ; begin
65258: LD_INT 0
65260: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65261: LD_ADDR_VAR 0 3
65265: PUSH
65266: LD_VAR 0 1
65270: PPUSH
65271: CALL_OW 255
65275: PPUSH
65276: LD_VAR 0 1
65280: PPUSH
65281: CALL_OW 250
65285: PPUSH
65286: LD_VAR 0 1
65290: PPUSH
65291: CALL_OW 251
65295: PPUSH
65296: LD_VAR 0 2
65300: PPUSH
65301: CALL 39362 0 4
65305: PUSH
65306: LD_INT 4
65308: ARRAY
65309: ST_TO_ADDR
// end ;
65310: LD_VAR 0 3
65314: RET
// export function PlayerSeeMe ( unit ) ; begin
65315: LD_INT 0
65317: PPUSH
// result := See ( your_side , unit ) ;
65318: LD_ADDR_VAR 0 2
65322: PUSH
65323: LD_OWVAR 2
65327: PPUSH
65328: LD_VAR 0 1
65332: PPUSH
65333: CALL_OW 292
65337: ST_TO_ADDR
// end ;
65338: LD_VAR 0 2
65342: RET
// export function ReverseDir ( unit ) ; begin
65343: LD_INT 0
65345: PPUSH
// if not unit then
65346: LD_VAR 0 1
65350: NOT
65351: IFFALSE 65355
// exit ;
65353: GO 65378
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65355: LD_ADDR_VAR 0 2
65359: PUSH
65360: LD_VAR 0 1
65364: PPUSH
65365: CALL_OW 254
65369: PUSH
65370: LD_INT 3
65372: PLUS
65373: PUSH
65374: LD_INT 6
65376: MOD
65377: ST_TO_ADDR
// end ;
65378: LD_VAR 0 2
65382: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65383: LD_INT 0
65385: PPUSH
65386: PPUSH
65387: PPUSH
65388: PPUSH
65389: PPUSH
// if not hexes then
65390: LD_VAR 0 2
65394: NOT
65395: IFFALSE 65399
// exit ;
65397: GO 65547
// dist := 9999 ;
65399: LD_ADDR_VAR 0 5
65403: PUSH
65404: LD_INT 9999
65406: ST_TO_ADDR
// for i = 1 to hexes do
65407: LD_ADDR_VAR 0 4
65411: PUSH
65412: DOUBLE
65413: LD_INT 1
65415: DEC
65416: ST_TO_ADDR
65417: LD_VAR 0 2
65421: PUSH
65422: FOR_TO
65423: IFFALSE 65535
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65425: LD_VAR 0 1
65429: PPUSH
65430: LD_VAR 0 2
65434: PUSH
65435: LD_VAR 0 4
65439: ARRAY
65440: PUSH
65441: LD_INT 1
65443: ARRAY
65444: PPUSH
65445: LD_VAR 0 2
65449: PUSH
65450: LD_VAR 0 4
65454: ARRAY
65455: PUSH
65456: LD_INT 2
65458: ARRAY
65459: PPUSH
65460: CALL_OW 297
65464: PUSH
65465: LD_VAR 0 5
65469: LESS
65470: IFFALSE 65533
// begin hex := hexes [ i ] ;
65472: LD_ADDR_VAR 0 7
65476: PUSH
65477: LD_VAR 0 2
65481: PUSH
65482: LD_VAR 0 4
65486: ARRAY
65487: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65488: LD_ADDR_VAR 0 5
65492: PUSH
65493: LD_VAR 0 1
65497: PPUSH
65498: LD_VAR 0 2
65502: PUSH
65503: LD_VAR 0 4
65507: ARRAY
65508: PUSH
65509: LD_INT 1
65511: ARRAY
65512: PPUSH
65513: LD_VAR 0 2
65517: PUSH
65518: LD_VAR 0 4
65522: ARRAY
65523: PUSH
65524: LD_INT 2
65526: ARRAY
65527: PPUSH
65528: CALL_OW 297
65532: ST_TO_ADDR
// end ; end ;
65533: GO 65422
65535: POP
65536: POP
// result := hex ;
65537: LD_ADDR_VAR 0 3
65541: PUSH
65542: LD_VAR 0 7
65546: ST_TO_ADDR
// end ;
65547: LD_VAR 0 3
65551: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65552: LD_INT 0
65554: PPUSH
65555: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65556: LD_VAR 0 1
65560: NOT
65561: PUSH
65562: LD_VAR 0 1
65566: PUSH
65567: LD_INT 21
65569: PUSH
65570: LD_INT 2
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 23
65579: PUSH
65580: LD_INT 2
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PPUSH
65591: CALL_OW 69
65595: IN
65596: NOT
65597: OR
65598: IFFALSE 65602
// exit ;
65600: GO 65649
// for i = 1 to 3 do
65602: LD_ADDR_VAR 0 3
65606: PUSH
65607: DOUBLE
65608: LD_INT 1
65610: DEC
65611: ST_TO_ADDR
65612: LD_INT 3
65614: PUSH
65615: FOR_TO
65616: IFFALSE 65647
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65618: LD_VAR 0 1
65622: PPUSH
65623: CALL_OW 250
65627: PPUSH
65628: LD_VAR 0 1
65632: PPUSH
65633: CALL_OW 251
65637: PPUSH
65638: LD_INT 1
65640: PPUSH
65641: CALL_OW 453
65645: GO 65615
65647: POP
65648: POP
// end ;
65649: LD_VAR 0 2
65653: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65654: LD_INT 0
65656: PPUSH
65657: PPUSH
65658: PPUSH
65659: PPUSH
65660: PPUSH
65661: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65662: LD_VAR 0 1
65666: NOT
65667: PUSH
65668: LD_VAR 0 2
65672: NOT
65673: OR
65674: PUSH
65675: LD_VAR 0 1
65679: PPUSH
65680: CALL_OW 314
65684: OR
65685: IFFALSE 65689
// exit ;
65687: GO 66130
// x := GetX ( enemy_unit ) ;
65689: LD_ADDR_VAR 0 7
65693: PUSH
65694: LD_VAR 0 2
65698: PPUSH
65699: CALL_OW 250
65703: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65704: LD_ADDR_VAR 0 8
65708: PUSH
65709: LD_VAR 0 2
65713: PPUSH
65714: CALL_OW 251
65718: ST_TO_ADDR
// if not x or not y then
65719: LD_VAR 0 7
65723: NOT
65724: PUSH
65725: LD_VAR 0 8
65729: NOT
65730: OR
65731: IFFALSE 65735
// exit ;
65733: GO 66130
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65735: LD_ADDR_VAR 0 6
65739: PUSH
65740: LD_VAR 0 7
65744: PPUSH
65745: LD_INT 0
65747: PPUSH
65748: LD_INT 4
65750: PPUSH
65751: CALL_OW 272
65755: PUSH
65756: LD_VAR 0 8
65760: PPUSH
65761: LD_INT 0
65763: PPUSH
65764: LD_INT 4
65766: PPUSH
65767: CALL_OW 273
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_VAR 0 7
65780: PPUSH
65781: LD_INT 1
65783: PPUSH
65784: LD_INT 4
65786: PPUSH
65787: CALL_OW 272
65791: PUSH
65792: LD_VAR 0 8
65796: PPUSH
65797: LD_INT 1
65799: PPUSH
65800: LD_INT 4
65802: PPUSH
65803: CALL_OW 273
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_VAR 0 7
65816: PPUSH
65817: LD_INT 2
65819: PPUSH
65820: LD_INT 4
65822: PPUSH
65823: CALL_OW 272
65827: PUSH
65828: LD_VAR 0 8
65832: PPUSH
65833: LD_INT 2
65835: PPUSH
65836: LD_INT 4
65838: PPUSH
65839: CALL_OW 273
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_VAR 0 7
65852: PPUSH
65853: LD_INT 3
65855: PPUSH
65856: LD_INT 4
65858: PPUSH
65859: CALL_OW 272
65863: PUSH
65864: LD_VAR 0 8
65868: PPUSH
65869: LD_INT 3
65871: PPUSH
65872: LD_INT 4
65874: PPUSH
65875: CALL_OW 273
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_VAR 0 7
65888: PPUSH
65889: LD_INT 4
65891: PPUSH
65892: LD_INT 4
65894: PPUSH
65895: CALL_OW 272
65899: PUSH
65900: LD_VAR 0 8
65904: PPUSH
65905: LD_INT 4
65907: PPUSH
65908: LD_INT 4
65910: PPUSH
65911: CALL_OW 273
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_VAR 0 7
65924: PPUSH
65925: LD_INT 5
65927: PPUSH
65928: LD_INT 4
65930: PPUSH
65931: CALL_OW 272
65935: PUSH
65936: LD_VAR 0 8
65940: PPUSH
65941: LD_INT 5
65943: PPUSH
65944: LD_INT 4
65946: PPUSH
65947: CALL_OW 273
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: ST_TO_ADDR
// for i = tmp downto 1 do
65964: LD_ADDR_VAR 0 4
65968: PUSH
65969: DOUBLE
65970: LD_VAR 0 6
65974: INC
65975: ST_TO_ADDR
65976: LD_INT 1
65978: PUSH
65979: FOR_DOWNTO
65980: IFFALSE 66081
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65982: LD_VAR 0 6
65986: PUSH
65987: LD_VAR 0 4
65991: ARRAY
65992: PUSH
65993: LD_INT 1
65995: ARRAY
65996: PPUSH
65997: LD_VAR 0 6
66001: PUSH
66002: LD_VAR 0 4
66006: ARRAY
66007: PUSH
66008: LD_INT 2
66010: ARRAY
66011: PPUSH
66012: CALL_OW 488
66016: NOT
66017: PUSH
66018: LD_VAR 0 6
66022: PUSH
66023: LD_VAR 0 4
66027: ARRAY
66028: PUSH
66029: LD_INT 1
66031: ARRAY
66032: PPUSH
66033: LD_VAR 0 6
66037: PUSH
66038: LD_VAR 0 4
66042: ARRAY
66043: PUSH
66044: LD_INT 2
66046: ARRAY
66047: PPUSH
66048: CALL_OW 428
66052: PUSH
66053: LD_INT 0
66055: NONEQUAL
66056: OR
66057: IFFALSE 66079
// tmp := Delete ( tmp , i ) ;
66059: LD_ADDR_VAR 0 6
66063: PUSH
66064: LD_VAR 0 6
66068: PPUSH
66069: LD_VAR 0 4
66073: PPUSH
66074: CALL_OW 3
66078: ST_TO_ADDR
66079: GO 65979
66081: POP
66082: POP
// j := GetClosestHex ( unit , tmp ) ;
66083: LD_ADDR_VAR 0 5
66087: PUSH
66088: LD_VAR 0 1
66092: PPUSH
66093: LD_VAR 0 6
66097: PPUSH
66098: CALL 65383 0 2
66102: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66103: LD_VAR 0 1
66107: PPUSH
66108: LD_VAR 0 5
66112: PUSH
66113: LD_INT 1
66115: ARRAY
66116: PPUSH
66117: LD_VAR 0 5
66121: PUSH
66122: LD_INT 2
66124: ARRAY
66125: PPUSH
66126: CALL_OW 111
// end ;
66130: LD_VAR 0 3
66134: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66135: LD_INT 0
66137: PPUSH
66138: PPUSH
66139: PPUSH
// uc_side = 0 ;
66140: LD_ADDR_OWVAR 20
66144: PUSH
66145: LD_INT 0
66147: ST_TO_ADDR
// uc_nation = 0 ;
66148: LD_ADDR_OWVAR 21
66152: PUSH
66153: LD_INT 0
66155: ST_TO_ADDR
// InitHc ;
66156: CALL_OW 19
// InitVc ;
66160: CALL_OW 20
// if mastodonts then
66164: LD_VAR 0 6
66168: IFFALSE 66235
// for i = 1 to mastodonts do
66170: LD_ADDR_VAR 0 11
66174: PUSH
66175: DOUBLE
66176: LD_INT 1
66178: DEC
66179: ST_TO_ADDR
66180: LD_VAR 0 6
66184: PUSH
66185: FOR_TO
66186: IFFALSE 66233
// begin vc_chassis := 31 ;
66188: LD_ADDR_OWVAR 37
66192: PUSH
66193: LD_INT 31
66195: ST_TO_ADDR
// vc_control := control_rider ;
66196: LD_ADDR_OWVAR 38
66200: PUSH
66201: LD_INT 4
66203: ST_TO_ADDR
// animal := CreateVehicle ;
66204: LD_ADDR_VAR 0 12
66208: PUSH
66209: CALL_OW 45
66213: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66214: LD_VAR 0 12
66218: PPUSH
66219: LD_VAR 0 8
66223: PPUSH
66224: LD_INT 0
66226: PPUSH
66227: CALL 68304 0 3
// end ;
66231: GO 66185
66233: POP
66234: POP
// if horses then
66235: LD_VAR 0 5
66239: IFFALSE 66306
// for i = 1 to horses do
66241: LD_ADDR_VAR 0 11
66245: PUSH
66246: DOUBLE
66247: LD_INT 1
66249: DEC
66250: ST_TO_ADDR
66251: LD_VAR 0 5
66255: PUSH
66256: FOR_TO
66257: IFFALSE 66304
// begin hc_class := 21 ;
66259: LD_ADDR_OWVAR 28
66263: PUSH
66264: LD_INT 21
66266: ST_TO_ADDR
// hc_gallery :=  ;
66267: LD_ADDR_OWVAR 33
66271: PUSH
66272: LD_STRING 
66274: ST_TO_ADDR
// animal := CreateHuman ;
66275: LD_ADDR_VAR 0 12
66279: PUSH
66280: CALL_OW 44
66284: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66285: LD_VAR 0 12
66289: PPUSH
66290: LD_VAR 0 8
66294: PPUSH
66295: LD_INT 0
66297: PPUSH
66298: CALL 68304 0 3
// end ;
66302: GO 66256
66304: POP
66305: POP
// if birds then
66306: LD_VAR 0 1
66310: IFFALSE 66377
// for i = 1 to birds do
66312: LD_ADDR_VAR 0 11
66316: PUSH
66317: DOUBLE
66318: LD_INT 1
66320: DEC
66321: ST_TO_ADDR
66322: LD_VAR 0 1
66326: PUSH
66327: FOR_TO
66328: IFFALSE 66375
// begin hc_class = 18 ;
66330: LD_ADDR_OWVAR 28
66334: PUSH
66335: LD_INT 18
66337: ST_TO_ADDR
// hc_gallery =  ;
66338: LD_ADDR_OWVAR 33
66342: PUSH
66343: LD_STRING 
66345: ST_TO_ADDR
// animal := CreateHuman ;
66346: LD_ADDR_VAR 0 12
66350: PUSH
66351: CALL_OW 44
66355: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66356: LD_VAR 0 12
66360: PPUSH
66361: LD_VAR 0 8
66365: PPUSH
66366: LD_INT 0
66368: PPUSH
66369: CALL 68304 0 3
// end ;
66373: GO 66327
66375: POP
66376: POP
// if tigers then
66377: LD_VAR 0 2
66381: IFFALSE 66465
// for i = 1 to tigers do
66383: LD_ADDR_VAR 0 11
66387: PUSH
66388: DOUBLE
66389: LD_INT 1
66391: DEC
66392: ST_TO_ADDR
66393: LD_VAR 0 2
66397: PUSH
66398: FOR_TO
66399: IFFALSE 66463
// begin hc_class = class_tiger ;
66401: LD_ADDR_OWVAR 28
66405: PUSH
66406: LD_INT 14
66408: ST_TO_ADDR
// hc_gallery =  ;
66409: LD_ADDR_OWVAR 33
66413: PUSH
66414: LD_STRING 
66416: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66417: LD_ADDR_OWVAR 35
66421: PUSH
66422: LD_INT 7
66424: NEG
66425: PPUSH
66426: LD_INT 7
66428: PPUSH
66429: CALL_OW 12
66433: ST_TO_ADDR
// animal := CreateHuman ;
66434: LD_ADDR_VAR 0 12
66438: PUSH
66439: CALL_OW 44
66443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66444: LD_VAR 0 12
66448: PPUSH
66449: LD_VAR 0 8
66453: PPUSH
66454: LD_INT 0
66456: PPUSH
66457: CALL 68304 0 3
// end ;
66461: GO 66398
66463: POP
66464: POP
// if apemans then
66465: LD_VAR 0 3
66469: IFFALSE 66592
// for i = 1 to apemans do
66471: LD_ADDR_VAR 0 11
66475: PUSH
66476: DOUBLE
66477: LD_INT 1
66479: DEC
66480: ST_TO_ADDR
66481: LD_VAR 0 3
66485: PUSH
66486: FOR_TO
66487: IFFALSE 66590
// begin hc_class = class_apeman ;
66489: LD_ADDR_OWVAR 28
66493: PUSH
66494: LD_INT 12
66496: ST_TO_ADDR
// hc_gallery =  ;
66497: LD_ADDR_OWVAR 33
66501: PUSH
66502: LD_STRING 
66504: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
66505: LD_ADDR_OWVAR 35
66509: PUSH
66510: LD_INT 5
66512: NEG
66513: PPUSH
66514: LD_INT 5
66516: PPUSH
66517: CALL_OW 12
66521: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66522: LD_ADDR_OWVAR 31
66526: PUSH
66527: LD_INT 1
66529: PPUSH
66530: LD_INT 3
66532: PPUSH
66533: CALL_OW 12
66537: PUSH
66538: LD_INT 1
66540: PPUSH
66541: LD_INT 3
66543: PPUSH
66544: CALL_OW 12
66548: PUSH
66549: LD_INT 0
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: ST_TO_ADDR
// animal := CreateHuman ;
66561: LD_ADDR_VAR 0 12
66565: PUSH
66566: CALL_OW 44
66570: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66571: LD_VAR 0 12
66575: PPUSH
66576: LD_VAR 0 8
66580: PPUSH
66581: LD_INT 0
66583: PPUSH
66584: CALL 68304 0 3
// end ;
66588: GO 66486
66590: POP
66591: POP
// if enchidnas then
66592: LD_VAR 0 4
66596: IFFALSE 66663
// for i = 1 to enchidnas do
66598: LD_ADDR_VAR 0 11
66602: PUSH
66603: DOUBLE
66604: LD_INT 1
66606: DEC
66607: ST_TO_ADDR
66608: LD_VAR 0 4
66612: PUSH
66613: FOR_TO
66614: IFFALSE 66661
// begin hc_class = 13 ;
66616: LD_ADDR_OWVAR 28
66620: PUSH
66621: LD_INT 13
66623: ST_TO_ADDR
// hc_gallery =  ;
66624: LD_ADDR_OWVAR 33
66628: PUSH
66629: LD_STRING 
66631: ST_TO_ADDR
// animal := CreateHuman ;
66632: LD_ADDR_VAR 0 12
66636: PUSH
66637: CALL_OW 44
66641: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66642: LD_VAR 0 12
66646: PPUSH
66647: LD_VAR 0 8
66651: PPUSH
66652: LD_INT 0
66654: PPUSH
66655: CALL 68304 0 3
// end ;
66659: GO 66613
66661: POP
66662: POP
// if fishes then
66663: LD_VAR 0 7
66667: IFFALSE 66734
// for i = 1 to fishes do
66669: LD_ADDR_VAR 0 11
66673: PUSH
66674: DOUBLE
66675: LD_INT 1
66677: DEC
66678: ST_TO_ADDR
66679: LD_VAR 0 7
66683: PUSH
66684: FOR_TO
66685: IFFALSE 66732
// begin hc_class = 20 ;
66687: LD_ADDR_OWVAR 28
66691: PUSH
66692: LD_INT 20
66694: ST_TO_ADDR
// hc_gallery =  ;
66695: LD_ADDR_OWVAR 33
66699: PUSH
66700: LD_STRING 
66702: ST_TO_ADDR
// animal := CreateHuman ;
66703: LD_ADDR_VAR 0 12
66707: PUSH
66708: CALL_OW 44
66712: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66713: LD_VAR 0 12
66717: PPUSH
66718: LD_VAR 0 9
66722: PPUSH
66723: LD_INT 0
66725: PPUSH
66726: CALL 68304 0 3
// end ;
66730: GO 66684
66732: POP
66733: POP
// end ;
66734: LD_VAR 0 10
66738: RET
// export function WantHeal ( sci , unit ) ; begin
66739: LD_INT 0
66741: PPUSH
// if GetTaskList ( sci ) > 0 then
66742: LD_VAR 0 1
66746: PPUSH
66747: CALL_OW 437
66751: PUSH
66752: LD_INT 0
66754: GREATER
66755: IFFALSE 66825
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66757: LD_VAR 0 1
66761: PPUSH
66762: CALL_OW 437
66766: PUSH
66767: LD_INT 1
66769: ARRAY
66770: PUSH
66771: LD_INT 1
66773: ARRAY
66774: PUSH
66775: LD_STRING l
66777: EQUAL
66778: PUSH
66779: LD_VAR 0 1
66783: PPUSH
66784: CALL_OW 437
66788: PUSH
66789: LD_INT 1
66791: ARRAY
66792: PUSH
66793: LD_INT 4
66795: ARRAY
66796: PUSH
66797: LD_VAR 0 2
66801: EQUAL
66802: AND
66803: IFFALSE 66815
// result := true else
66805: LD_ADDR_VAR 0 3
66809: PUSH
66810: LD_INT 1
66812: ST_TO_ADDR
66813: GO 66823
// result := false ;
66815: LD_ADDR_VAR 0 3
66819: PUSH
66820: LD_INT 0
66822: ST_TO_ADDR
// end else
66823: GO 66833
// result := false ;
66825: LD_ADDR_VAR 0 3
66829: PUSH
66830: LD_INT 0
66832: ST_TO_ADDR
// end ;
66833: LD_VAR 0 3
66837: RET
// export function HealTarget ( sci ) ; begin
66838: LD_INT 0
66840: PPUSH
// if not sci then
66841: LD_VAR 0 1
66845: NOT
66846: IFFALSE 66850
// exit ;
66848: GO 66915
// result := 0 ;
66850: LD_ADDR_VAR 0 2
66854: PUSH
66855: LD_INT 0
66857: ST_TO_ADDR
// if GetTaskList ( sci ) then
66858: LD_VAR 0 1
66862: PPUSH
66863: CALL_OW 437
66867: IFFALSE 66915
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66869: LD_VAR 0 1
66873: PPUSH
66874: CALL_OW 437
66878: PUSH
66879: LD_INT 1
66881: ARRAY
66882: PUSH
66883: LD_INT 1
66885: ARRAY
66886: PUSH
66887: LD_STRING l
66889: EQUAL
66890: IFFALSE 66915
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66892: LD_ADDR_VAR 0 2
66896: PUSH
66897: LD_VAR 0 1
66901: PPUSH
66902: CALL_OW 437
66906: PUSH
66907: LD_INT 1
66909: ARRAY
66910: PUSH
66911: LD_INT 4
66913: ARRAY
66914: ST_TO_ADDR
// end ;
66915: LD_VAR 0 2
66919: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66920: LD_INT 0
66922: PPUSH
66923: PPUSH
66924: PPUSH
66925: PPUSH
// if not base_units then
66926: LD_VAR 0 1
66930: NOT
66931: IFFALSE 66935
// exit ;
66933: GO 67022
// result := false ;
66935: LD_ADDR_VAR 0 2
66939: PUSH
66940: LD_INT 0
66942: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66943: LD_ADDR_VAR 0 5
66947: PUSH
66948: LD_VAR 0 1
66952: PPUSH
66953: LD_INT 21
66955: PUSH
66956: LD_INT 3
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PPUSH
66963: CALL_OW 72
66967: ST_TO_ADDR
// if not tmp then
66968: LD_VAR 0 5
66972: NOT
66973: IFFALSE 66977
// exit ;
66975: GO 67022
// for i in tmp do
66977: LD_ADDR_VAR 0 3
66981: PUSH
66982: LD_VAR 0 5
66986: PUSH
66987: FOR_IN
66988: IFFALSE 67020
// begin result := EnemyInRange ( i , 22 ) ;
66990: LD_ADDR_VAR 0 2
66994: PUSH
66995: LD_VAR 0 3
66999: PPUSH
67000: LD_INT 22
67002: PPUSH
67003: CALL 65258 0 2
67007: ST_TO_ADDR
// if result then
67008: LD_VAR 0 2
67012: IFFALSE 67018
// exit ;
67014: POP
67015: POP
67016: GO 67022
// end ;
67018: GO 66987
67020: POP
67021: POP
// end ;
67022: LD_VAR 0 2
67026: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67027: LD_INT 0
67029: PPUSH
67030: PPUSH
// if not units then
67031: LD_VAR 0 1
67035: NOT
67036: IFFALSE 67040
// exit ;
67038: GO 67110
// result := [ ] ;
67040: LD_ADDR_VAR 0 3
67044: PUSH
67045: EMPTY
67046: ST_TO_ADDR
// for i in units do
67047: LD_ADDR_VAR 0 4
67051: PUSH
67052: LD_VAR 0 1
67056: PUSH
67057: FOR_IN
67058: IFFALSE 67108
// if GetTag ( i ) = tag then
67060: LD_VAR 0 4
67064: PPUSH
67065: CALL_OW 110
67069: PUSH
67070: LD_VAR 0 2
67074: EQUAL
67075: IFFALSE 67106
// result := Insert ( result , result + 1 , i ) ;
67077: LD_ADDR_VAR 0 3
67081: PUSH
67082: LD_VAR 0 3
67086: PPUSH
67087: LD_VAR 0 3
67091: PUSH
67092: LD_INT 1
67094: PLUS
67095: PPUSH
67096: LD_VAR 0 4
67100: PPUSH
67101: CALL_OW 2
67105: ST_TO_ADDR
67106: GO 67057
67108: POP
67109: POP
// end ;
67110: LD_VAR 0 3
67114: RET
// export function IsDriver ( un ) ; begin
67115: LD_INT 0
67117: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67118: LD_ADDR_VAR 0 2
67122: PUSH
67123: LD_VAR 0 1
67127: PUSH
67128: LD_INT 55
67130: PUSH
67131: EMPTY
67132: LIST
67133: PPUSH
67134: CALL_OW 69
67138: IN
67139: ST_TO_ADDR
// end ;
67140: LD_VAR 0 2
67144: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67145: LD_INT 0
67147: PPUSH
67148: PPUSH
// list := [ ] ;
67149: LD_ADDR_VAR 0 5
67153: PUSH
67154: EMPTY
67155: ST_TO_ADDR
// case d of 0 :
67156: LD_VAR 0 3
67160: PUSH
67161: LD_INT 0
67163: DOUBLE
67164: EQUAL
67165: IFTRUE 67169
67167: GO 67302
67169: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67170: LD_ADDR_VAR 0 5
67174: PUSH
67175: LD_VAR 0 1
67179: PUSH
67180: LD_INT 4
67182: MINUS
67183: PUSH
67184: LD_VAR 0 2
67188: PUSH
67189: LD_INT 4
67191: MINUS
67192: PUSH
67193: LD_INT 2
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: LIST
67200: PUSH
67201: LD_VAR 0 1
67205: PUSH
67206: LD_INT 3
67208: MINUS
67209: PUSH
67210: LD_VAR 0 2
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: LIST
67222: PUSH
67223: LD_VAR 0 1
67227: PUSH
67228: LD_INT 4
67230: PLUS
67231: PUSH
67232: LD_VAR 0 2
67236: PUSH
67237: LD_INT 4
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: LIST
67244: PUSH
67245: LD_VAR 0 1
67249: PUSH
67250: LD_INT 3
67252: PLUS
67253: PUSH
67254: LD_VAR 0 2
67258: PUSH
67259: LD_INT 3
67261: PLUS
67262: PUSH
67263: LD_INT 5
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: LIST
67270: PUSH
67271: LD_VAR 0 1
67275: PUSH
67276: LD_VAR 0 2
67280: PUSH
67281: LD_INT 4
67283: PLUS
67284: PUSH
67285: LD_INT 0
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: LIST
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: ST_TO_ADDR
// end ; 1 :
67300: GO 68000
67302: LD_INT 1
67304: DOUBLE
67305: EQUAL
67306: IFTRUE 67310
67308: GO 67443
67310: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67311: LD_ADDR_VAR 0 5
67315: PUSH
67316: LD_VAR 0 1
67320: PUSH
67321: LD_VAR 0 2
67325: PUSH
67326: LD_INT 4
67328: MINUS
67329: PUSH
67330: LD_INT 3
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: PUSH
67338: LD_VAR 0 1
67342: PUSH
67343: LD_INT 3
67345: MINUS
67346: PUSH
67347: LD_VAR 0 2
67351: PUSH
67352: LD_INT 3
67354: MINUS
67355: PUSH
67356: LD_INT 2
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: LIST
67363: PUSH
67364: LD_VAR 0 1
67368: PUSH
67369: LD_INT 4
67371: MINUS
67372: PUSH
67373: LD_VAR 0 2
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: PUSH
67386: LD_VAR 0 1
67390: PUSH
67391: LD_VAR 0 2
67395: PUSH
67396: LD_INT 3
67398: PLUS
67399: PUSH
67400: LD_INT 0
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: LIST
67407: PUSH
67408: LD_VAR 0 1
67412: PUSH
67413: LD_INT 4
67415: PLUS
67416: PUSH
67417: LD_VAR 0 2
67421: PUSH
67422: LD_INT 4
67424: PLUS
67425: PUSH
67426: LD_INT 5
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: LIST
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: ST_TO_ADDR
// end ; 2 :
67441: GO 68000
67443: LD_INT 2
67445: DOUBLE
67446: EQUAL
67447: IFTRUE 67451
67449: GO 67580
67451: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67452: LD_ADDR_VAR 0 5
67456: PUSH
67457: LD_VAR 0 1
67461: PUSH
67462: LD_VAR 0 2
67466: PUSH
67467: LD_INT 3
67469: MINUS
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: PUSH
67479: LD_VAR 0 1
67483: PUSH
67484: LD_INT 4
67486: PLUS
67487: PUSH
67488: LD_VAR 0 2
67492: PUSH
67493: LD_INT 4
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: PUSH
67501: LD_VAR 0 1
67505: PUSH
67506: LD_VAR 0 2
67510: PUSH
67511: LD_INT 4
67513: PLUS
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: LIST
67522: PUSH
67523: LD_VAR 0 1
67527: PUSH
67528: LD_INT 3
67530: MINUS
67531: PUSH
67532: LD_VAR 0 2
67536: PUSH
67537: LD_INT 1
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: LIST
67544: PUSH
67545: LD_VAR 0 1
67549: PUSH
67550: LD_INT 4
67552: MINUS
67553: PUSH
67554: LD_VAR 0 2
67558: PUSH
67559: LD_INT 4
67561: MINUS
67562: PUSH
67563: LD_INT 2
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: LIST
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: ST_TO_ADDR
// end ; 3 :
67578: GO 68000
67580: LD_INT 3
67582: DOUBLE
67583: EQUAL
67584: IFTRUE 67588
67586: GO 67721
67588: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67589: LD_ADDR_VAR 0 5
67593: PUSH
67594: LD_VAR 0 1
67598: PUSH
67599: LD_INT 3
67601: PLUS
67602: PUSH
67603: LD_VAR 0 2
67607: PUSH
67608: LD_INT 4
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: LIST
67615: PUSH
67616: LD_VAR 0 1
67620: PUSH
67621: LD_INT 4
67623: PLUS
67624: PUSH
67625: LD_VAR 0 2
67629: PUSH
67630: LD_INT 4
67632: PLUS
67633: PUSH
67634: LD_INT 5
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: LIST
67641: PUSH
67642: LD_VAR 0 1
67646: PUSH
67647: LD_INT 4
67649: MINUS
67650: PUSH
67651: LD_VAR 0 2
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: LIST
67663: PUSH
67664: LD_VAR 0 1
67668: PUSH
67669: LD_VAR 0 2
67673: PUSH
67674: LD_INT 4
67676: MINUS
67677: PUSH
67678: LD_INT 3
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: LIST
67685: PUSH
67686: LD_VAR 0 1
67690: PUSH
67691: LD_INT 3
67693: MINUS
67694: PUSH
67695: LD_VAR 0 2
67699: PUSH
67700: LD_INT 3
67702: MINUS
67703: PUSH
67704: LD_INT 2
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: LIST
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: ST_TO_ADDR
// end ; 4 :
67719: GO 68000
67721: LD_INT 4
67723: DOUBLE
67724: EQUAL
67725: IFTRUE 67729
67727: GO 67862
67729: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67730: LD_ADDR_VAR 0 5
67734: PUSH
67735: LD_VAR 0 1
67739: PUSH
67740: LD_VAR 0 2
67744: PUSH
67745: LD_INT 4
67747: PLUS
67748: PUSH
67749: LD_INT 0
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: LIST
67756: PUSH
67757: LD_VAR 0 1
67761: PUSH
67762: LD_INT 3
67764: PLUS
67765: PUSH
67766: LD_VAR 0 2
67770: PUSH
67771: LD_INT 3
67773: PLUS
67774: PUSH
67775: LD_INT 5
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: LIST
67782: PUSH
67783: LD_VAR 0 1
67787: PUSH
67788: LD_INT 4
67790: PLUS
67791: PUSH
67792: LD_VAR 0 2
67796: PUSH
67797: LD_INT 4
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: LIST
67804: PUSH
67805: LD_VAR 0 1
67809: PUSH
67810: LD_VAR 0 2
67814: PUSH
67815: LD_INT 3
67817: MINUS
67818: PUSH
67819: LD_INT 3
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: LIST
67826: PUSH
67827: LD_VAR 0 1
67831: PUSH
67832: LD_INT 4
67834: MINUS
67835: PUSH
67836: LD_VAR 0 2
67840: PUSH
67841: LD_INT 4
67843: MINUS
67844: PUSH
67845: LD_INT 2
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: LIST
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: ST_TO_ADDR
// end ; 5 :
67860: GO 68000
67862: LD_INT 5
67864: DOUBLE
67865: EQUAL
67866: IFTRUE 67870
67868: GO 67999
67870: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67871: LD_ADDR_VAR 0 5
67875: PUSH
67876: LD_VAR 0 1
67880: PUSH
67881: LD_INT 4
67883: MINUS
67884: PUSH
67885: LD_VAR 0 2
67889: PUSH
67890: LD_INT 1
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: LIST
67897: PUSH
67898: LD_VAR 0 1
67902: PUSH
67903: LD_VAR 0 2
67907: PUSH
67908: LD_INT 4
67910: MINUS
67911: PUSH
67912: LD_INT 3
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: LIST
67919: PUSH
67920: LD_VAR 0 1
67924: PUSH
67925: LD_INT 4
67927: PLUS
67928: PUSH
67929: LD_VAR 0 2
67933: PUSH
67934: LD_INT 4
67936: PLUS
67937: PUSH
67938: LD_INT 5
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: LIST
67945: PUSH
67946: LD_VAR 0 1
67950: PUSH
67951: LD_INT 3
67953: PLUS
67954: PUSH
67955: LD_VAR 0 2
67959: PUSH
67960: LD_INT 4
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: LIST
67967: PUSH
67968: LD_VAR 0 1
67972: PUSH
67973: LD_VAR 0 2
67977: PUSH
67978: LD_INT 3
67980: PLUS
67981: PUSH
67982: LD_INT 0
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: LIST
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: ST_TO_ADDR
// end ; end ;
67997: GO 68000
67999: POP
// result := list ;
68000: LD_ADDR_VAR 0 4
68004: PUSH
68005: LD_VAR 0 5
68009: ST_TO_ADDR
// end ;
68010: LD_VAR 0 4
68014: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68015: LD_INT 0
68017: PPUSH
68018: PPUSH
68019: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68020: LD_VAR 0 1
68024: NOT
68025: PUSH
68026: LD_VAR 0 2
68030: PUSH
68031: LD_INT 1
68033: PUSH
68034: LD_INT 2
68036: PUSH
68037: LD_INT 3
68039: PUSH
68040: LD_INT 4
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: IN
68049: NOT
68050: OR
68051: IFFALSE 68055
// exit ;
68053: GO 68147
// tmp := [ ] ;
68055: LD_ADDR_VAR 0 5
68059: PUSH
68060: EMPTY
68061: ST_TO_ADDR
// for i in units do
68062: LD_ADDR_VAR 0 4
68066: PUSH
68067: LD_VAR 0 1
68071: PUSH
68072: FOR_IN
68073: IFFALSE 68116
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68075: LD_ADDR_VAR 0 5
68079: PUSH
68080: LD_VAR 0 5
68084: PPUSH
68085: LD_VAR 0 5
68089: PUSH
68090: LD_INT 1
68092: PLUS
68093: PPUSH
68094: LD_VAR 0 4
68098: PPUSH
68099: LD_VAR 0 2
68103: PPUSH
68104: CALL_OW 259
68108: PPUSH
68109: CALL_OW 2
68113: ST_TO_ADDR
68114: GO 68072
68116: POP
68117: POP
// if not tmp then
68118: LD_VAR 0 5
68122: NOT
68123: IFFALSE 68127
// exit ;
68125: GO 68147
// result := SortListByListDesc ( units , tmp ) ;
68127: LD_ADDR_VAR 0 3
68131: PUSH
68132: LD_VAR 0 1
68136: PPUSH
68137: LD_VAR 0 5
68141: PPUSH
68142: CALL_OW 77
68146: ST_TO_ADDR
// end ;
68147: LD_VAR 0 3
68151: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68152: LD_INT 0
68154: PPUSH
68155: PPUSH
68156: PPUSH
// x := GetX ( building ) ;
68157: LD_ADDR_VAR 0 4
68161: PUSH
68162: LD_VAR 0 2
68166: PPUSH
68167: CALL_OW 250
68171: ST_TO_ADDR
// y := GetY ( building ) ;
68172: LD_ADDR_VAR 0 5
68176: PUSH
68177: LD_VAR 0 2
68181: PPUSH
68182: CALL_OW 251
68186: ST_TO_ADDR
// if GetTaskList ( unit ) then
68187: LD_VAR 0 1
68191: PPUSH
68192: CALL_OW 437
68196: IFFALSE 68291
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68198: LD_STRING e
68200: PUSH
68201: LD_VAR 0 1
68205: PPUSH
68206: CALL_OW 437
68210: PUSH
68211: LD_INT 1
68213: ARRAY
68214: PUSH
68215: LD_INT 1
68217: ARRAY
68218: EQUAL
68219: PUSH
68220: LD_VAR 0 4
68224: PUSH
68225: LD_VAR 0 1
68229: PPUSH
68230: CALL_OW 437
68234: PUSH
68235: LD_INT 1
68237: ARRAY
68238: PUSH
68239: LD_INT 2
68241: ARRAY
68242: EQUAL
68243: AND
68244: PUSH
68245: LD_VAR 0 5
68249: PUSH
68250: LD_VAR 0 1
68254: PPUSH
68255: CALL_OW 437
68259: PUSH
68260: LD_INT 1
68262: ARRAY
68263: PUSH
68264: LD_INT 3
68266: ARRAY
68267: EQUAL
68268: AND
68269: IFFALSE 68281
// result := true else
68271: LD_ADDR_VAR 0 3
68275: PUSH
68276: LD_INT 1
68278: ST_TO_ADDR
68279: GO 68289
// result := false ;
68281: LD_ADDR_VAR 0 3
68285: PUSH
68286: LD_INT 0
68288: ST_TO_ADDR
// end else
68289: GO 68299
// result := false ;
68291: LD_ADDR_VAR 0 3
68295: PUSH
68296: LD_INT 0
68298: ST_TO_ADDR
// end ;
68299: LD_VAR 0 3
68303: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68304: LD_INT 0
68306: PPUSH
68307: PPUSH
68308: PPUSH
68309: PPUSH
// if not unit or not area then
68310: LD_VAR 0 1
68314: NOT
68315: PUSH
68316: LD_VAR 0 2
68320: NOT
68321: OR
68322: IFFALSE 68326
// exit ;
68324: GO 68490
// tmp := AreaToList ( area , i ) ;
68326: LD_ADDR_VAR 0 6
68330: PUSH
68331: LD_VAR 0 2
68335: PPUSH
68336: LD_VAR 0 5
68340: PPUSH
68341: CALL_OW 517
68345: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68346: LD_ADDR_VAR 0 5
68350: PUSH
68351: DOUBLE
68352: LD_INT 1
68354: DEC
68355: ST_TO_ADDR
68356: LD_VAR 0 6
68360: PUSH
68361: LD_INT 1
68363: ARRAY
68364: PUSH
68365: FOR_TO
68366: IFFALSE 68488
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68368: LD_ADDR_VAR 0 7
68372: PUSH
68373: LD_VAR 0 6
68377: PUSH
68378: LD_INT 1
68380: ARRAY
68381: PUSH
68382: LD_VAR 0 5
68386: ARRAY
68387: PUSH
68388: LD_VAR 0 6
68392: PUSH
68393: LD_INT 2
68395: ARRAY
68396: PUSH
68397: LD_VAR 0 5
68401: ARRAY
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68407: LD_VAR 0 7
68411: PUSH
68412: LD_INT 1
68414: ARRAY
68415: PPUSH
68416: LD_VAR 0 7
68420: PUSH
68421: LD_INT 2
68423: ARRAY
68424: PPUSH
68425: CALL_OW 428
68429: PUSH
68430: LD_INT 0
68432: EQUAL
68433: IFFALSE 68486
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68435: LD_VAR 0 1
68439: PPUSH
68440: LD_VAR 0 7
68444: PUSH
68445: LD_INT 1
68447: ARRAY
68448: PPUSH
68449: LD_VAR 0 7
68453: PUSH
68454: LD_INT 2
68456: ARRAY
68457: PPUSH
68458: LD_VAR 0 3
68462: PPUSH
68463: CALL_OW 48
// result := IsPlaced ( unit ) ;
68467: LD_ADDR_VAR 0 4
68471: PUSH
68472: LD_VAR 0 1
68476: PPUSH
68477: CALL_OW 305
68481: ST_TO_ADDR
// exit ;
68482: POP
68483: POP
68484: GO 68490
// end ; end ;
68486: GO 68365
68488: POP
68489: POP
// end ;
68490: LD_VAR 0 4
68494: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68495: LD_INT 0
68497: PPUSH
68498: PPUSH
68499: PPUSH
// if not side or side > 8 then
68500: LD_VAR 0 1
68504: NOT
68505: PUSH
68506: LD_VAR 0 1
68510: PUSH
68511: LD_INT 8
68513: GREATER
68514: OR
68515: IFFALSE 68519
// exit ;
68517: GO 68706
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68519: LD_ADDR_VAR 0 4
68523: PUSH
68524: LD_INT 22
68526: PUSH
68527: LD_VAR 0 1
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 21
68538: PUSH
68539: LD_INT 3
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PPUSH
68550: CALL_OW 69
68554: ST_TO_ADDR
// if not tmp then
68555: LD_VAR 0 4
68559: NOT
68560: IFFALSE 68564
// exit ;
68562: GO 68706
// enable_addtolog := true ;
68564: LD_ADDR_OWVAR 81
68568: PUSH
68569: LD_INT 1
68571: ST_TO_ADDR
// AddToLog ( [ ) ;
68572: LD_STRING [
68574: PPUSH
68575: CALL_OW 561
// for i in tmp do
68579: LD_ADDR_VAR 0 3
68583: PUSH
68584: LD_VAR 0 4
68588: PUSH
68589: FOR_IN
68590: IFFALSE 68697
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68592: LD_STRING [
68594: PUSH
68595: LD_VAR 0 3
68599: PPUSH
68600: CALL_OW 266
68604: STR
68605: PUSH
68606: LD_STRING , 
68608: STR
68609: PUSH
68610: LD_VAR 0 3
68614: PPUSH
68615: CALL_OW 250
68619: STR
68620: PUSH
68621: LD_STRING , 
68623: STR
68624: PUSH
68625: LD_VAR 0 3
68629: PPUSH
68630: CALL_OW 251
68634: STR
68635: PUSH
68636: LD_STRING , 
68638: STR
68639: PUSH
68640: LD_VAR 0 3
68644: PPUSH
68645: CALL_OW 254
68649: STR
68650: PUSH
68651: LD_STRING , 
68653: STR
68654: PUSH
68655: LD_VAR 0 3
68659: PPUSH
68660: LD_INT 1
68662: PPUSH
68663: CALL_OW 268
68667: STR
68668: PUSH
68669: LD_STRING , 
68671: STR
68672: PUSH
68673: LD_VAR 0 3
68677: PPUSH
68678: LD_INT 2
68680: PPUSH
68681: CALL_OW 268
68685: STR
68686: PUSH
68687: LD_STRING ],
68689: STR
68690: PPUSH
68691: CALL_OW 561
// end ;
68695: GO 68589
68697: POP
68698: POP
// AddToLog ( ]; ) ;
68699: LD_STRING ];
68701: PPUSH
68702: CALL_OW 561
// end ;
68706: LD_VAR 0 2
68710: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68711: LD_INT 0
68713: PPUSH
68714: PPUSH
68715: PPUSH
68716: PPUSH
68717: PPUSH
// if not area or not rate or not max then
68718: LD_VAR 0 1
68722: NOT
68723: PUSH
68724: LD_VAR 0 2
68728: NOT
68729: OR
68730: PUSH
68731: LD_VAR 0 4
68735: NOT
68736: OR
68737: IFFALSE 68741
// exit ;
68739: GO 68933
// while 1 do
68741: LD_INT 1
68743: IFFALSE 68933
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68745: LD_ADDR_VAR 0 9
68749: PUSH
68750: LD_VAR 0 1
68754: PPUSH
68755: LD_INT 1
68757: PPUSH
68758: CALL_OW 287
68762: PUSH
68763: LD_INT 10
68765: MUL
68766: ST_TO_ADDR
// r := rate / 10 ;
68767: LD_ADDR_VAR 0 7
68771: PUSH
68772: LD_VAR 0 2
68776: PUSH
68777: LD_INT 10
68779: DIVREAL
68780: ST_TO_ADDR
// time := 1 1$00 ;
68781: LD_ADDR_VAR 0 8
68785: PUSH
68786: LD_INT 2100
68788: ST_TO_ADDR
// if amount < min then
68789: LD_VAR 0 9
68793: PUSH
68794: LD_VAR 0 3
68798: LESS
68799: IFFALSE 68817
// r := r * 2 else
68801: LD_ADDR_VAR 0 7
68805: PUSH
68806: LD_VAR 0 7
68810: PUSH
68811: LD_INT 2
68813: MUL
68814: ST_TO_ADDR
68815: GO 68843
// if amount > max then
68817: LD_VAR 0 9
68821: PUSH
68822: LD_VAR 0 4
68826: GREATER
68827: IFFALSE 68843
// r := r / 2 ;
68829: LD_ADDR_VAR 0 7
68833: PUSH
68834: LD_VAR 0 7
68838: PUSH
68839: LD_INT 2
68841: DIVREAL
68842: ST_TO_ADDR
// time := time / r ;
68843: LD_ADDR_VAR 0 8
68847: PUSH
68848: LD_VAR 0 8
68852: PUSH
68853: LD_VAR 0 7
68857: DIVREAL
68858: ST_TO_ADDR
// if time < 0 then
68859: LD_VAR 0 8
68863: PUSH
68864: LD_INT 0
68866: LESS
68867: IFFALSE 68884
// time := time * - 1 ;
68869: LD_ADDR_VAR 0 8
68873: PUSH
68874: LD_VAR 0 8
68878: PUSH
68879: LD_INT 1
68881: NEG
68882: MUL
68883: ST_TO_ADDR
// wait ( time ) ;
68884: LD_VAR 0 8
68888: PPUSH
68889: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68893: LD_INT 35
68895: PPUSH
68896: LD_INT 875
68898: PPUSH
68899: CALL_OW 12
68903: PPUSH
68904: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68908: LD_INT 1
68910: PPUSH
68911: LD_INT 5
68913: PPUSH
68914: CALL_OW 12
68918: PPUSH
68919: LD_VAR 0 1
68923: PPUSH
68924: LD_INT 1
68926: PPUSH
68927: CALL_OW 55
// end ;
68931: GO 68741
// end ;
68933: LD_VAR 0 5
68937: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68938: LD_INT 0
68940: PPUSH
68941: PPUSH
68942: PPUSH
68943: PPUSH
68944: PPUSH
68945: PPUSH
68946: PPUSH
68947: PPUSH
// if not turrets or not factories then
68948: LD_VAR 0 1
68952: NOT
68953: PUSH
68954: LD_VAR 0 2
68958: NOT
68959: OR
68960: IFFALSE 68964
// exit ;
68962: GO 69271
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68964: LD_ADDR_VAR 0 10
68968: PUSH
68969: LD_INT 5
68971: PUSH
68972: LD_INT 6
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 2
68981: PUSH
68982: LD_INT 4
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 3
68991: PUSH
68992: LD_INT 5
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 24
69006: PUSH
69007: LD_INT 25
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 23
69016: PUSH
69017: LD_INT 27
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 42
69030: PUSH
69031: LD_INT 43
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 44
69040: PUSH
69041: LD_INT 46
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 45
69050: PUSH
69051: LD_INT 47
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: LIST
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: LIST
69067: ST_TO_ADDR
// result := [ ] ;
69068: LD_ADDR_VAR 0 3
69072: PUSH
69073: EMPTY
69074: ST_TO_ADDR
// for i in turrets do
69075: LD_ADDR_VAR 0 4
69079: PUSH
69080: LD_VAR 0 1
69084: PUSH
69085: FOR_IN
69086: IFFALSE 69269
// begin nat := GetNation ( i ) ;
69088: LD_ADDR_VAR 0 7
69092: PUSH
69093: LD_VAR 0 4
69097: PPUSH
69098: CALL_OW 248
69102: ST_TO_ADDR
// weapon := 0 ;
69103: LD_ADDR_VAR 0 8
69107: PUSH
69108: LD_INT 0
69110: ST_TO_ADDR
// if not nat then
69111: LD_VAR 0 7
69115: NOT
69116: IFFALSE 69120
// continue ;
69118: GO 69085
// for j in list [ nat ] do
69120: LD_ADDR_VAR 0 5
69124: PUSH
69125: LD_VAR 0 10
69129: PUSH
69130: LD_VAR 0 7
69134: ARRAY
69135: PUSH
69136: FOR_IN
69137: IFFALSE 69178
// if GetBWeapon ( i ) = j [ 1 ] then
69139: LD_VAR 0 4
69143: PPUSH
69144: CALL_OW 269
69148: PUSH
69149: LD_VAR 0 5
69153: PUSH
69154: LD_INT 1
69156: ARRAY
69157: EQUAL
69158: IFFALSE 69176
// begin weapon := j [ 2 ] ;
69160: LD_ADDR_VAR 0 8
69164: PUSH
69165: LD_VAR 0 5
69169: PUSH
69170: LD_INT 2
69172: ARRAY
69173: ST_TO_ADDR
// break ;
69174: GO 69178
// end ;
69176: GO 69136
69178: POP
69179: POP
// if not weapon then
69180: LD_VAR 0 8
69184: NOT
69185: IFFALSE 69189
// continue ;
69187: GO 69085
// for k in factories do
69189: LD_ADDR_VAR 0 6
69193: PUSH
69194: LD_VAR 0 2
69198: PUSH
69199: FOR_IN
69200: IFFALSE 69265
// begin weapons := AvailableWeaponList ( k ) ;
69202: LD_ADDR_VAR 0 9
69206: PUSH
69207: LD_VAR 0 6
69211: PPUSH
69212: CALL_OW 478
69216: ST_TO_ADDR
// if not weapons then
69217: LD_VAR 0 9
69221: NOT
69222: IFFALSE 69226
// continue ;
69224: GO 69199
// if weapon in weapons then
69226: LD_VAR 0 8
69230: PUSH
69231: LD_VAR 0 9
69235: IN
69236: IFFALSE 69263
// begin result := [ i , weapon ] ;
69238: LD_ADDR_VAR 0 3
69242: PUSH
69243: LD_VAR 0 4
69247: PUSH
69248: LD_VAR 0 8
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: ST_TO_ADDR
// exit ;
69257: POP
69258: POP
69259: POP
69260: POP
69261: GO 69271
// end ; end ;
69263: GO 69199
69265: POP
69266: POP
// end ;
69267: GO 69085
69269: POP
69270: POP
// end ;
69271: LD_VAR 0 3
69275: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69276: LD_INT 0
69278: PPUSH
// if not side or side > 8 then
69279: LD_VAR 0 3
69283: NOT
69284: PUSH
69285: LD_VAR 0 3
69289: PUSH
69290: LD_INT 8
69292: GREATER
69293: OR
69294: IFFALSE 69298
// exit ;
69296: GO 69357
// if not range then
69298: LD_VAR 0 4
69302: NOT
69303: IFFALSE 69314
// range := - 12 ;
69305: LD_ADDR_VAR 0 4
69309: PUSH
69310: LD_INT 12
69312: NEG
69313: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69314: LD_VAR 0 1
69318: PPUSH
69319: LD_VAR 0 2
69323: PPUSH
69324: LD_VAR 0 3
69328: PPUSH
69329: LD_VAR 0 4
69333: PPUSH
69334: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69338: LD_VAR 0 1
69342: PPUSH
69343: LD_VAR 0 2
69347: PPUSH
69348: LD_VAR 0 3
69352: PPUSH
69353: CALL_OW 331
// end ;
69357: LD_VAR 0 5
69361: RET
// export function Video ( mode ) ; begin
69362: LD_INT 0
69364: PPUSH
// ingame_video = mode ;
69365: LD_ADDR_OWVAR 52
69369: PUSH
69370: LD_VAR 0 1
69374: ST_TO_ADDR
// interface_hidden = mode ;
69375: LD_ADDR_OWVAR 54
69379: PUSH
69380: LD_VAR 0 1
69384: ST_TO_ADDR
// end ;
69385: LD_VAR 0 2
69389: RET
// export function Join ( array , element ) ; begin
69390: LD_INT 0
69392: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69393: LD_ADDR_VAR 0 3
69397: PUSH
69398: LD_VAR 0 1
69402: PPUSH
69403: LD_VAR 0 1
69407: PUSH
69408: LD_INT 1
69410: PLUS
69411: PPUSH
69412: LD_VAR 0 2
69416: PPUSH
69417: CALL_OW 1
69421: ST_TO_ADDR
// end ;
69422: LD_VAR 0 3
69426: RET
// export function JoinUnion ( array , element ) ; begin
69427: LD_INT 0
69429: PPUSH
// result := array union element ;
69430: LD_ADDR_VAR 0 3
69434: PUSH
69435: LD_VAR 0 1
69439: PUSH
69440: LD_VAR 0 2
69444: UNION
69445: ST_TO_ADDR
// end ;
69446: LD_VAR 0 3
69450: RET
// export function GetBehemoths ( side ) ; begin
69451: LD_INT 0
69453: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69454: LD_ADDR_VAR 0 2
69458: PUSH
69459: LD_INT 22
69461: PUSH
69462: LD_VAR 0 1
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 31
69473: PUSH
69474: LD_INT 25
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PPUSH
69485: CALL_OW 69
69489: ST_TO_ADDR
// end ;
69490: LD_VAR 0 2
69494: RET
// export function Shuffle ( array ) ; var i , index ; begin
69495: LD_INT 0
69497: PPUSH
69498: PPUSH
69499: PPUSH
// result := [ ] ;
69500: LD_ADDR_VAR 0 2
69504: PUSH
69505: EMPTY
69506: ST_TO_ADDR
// if not array then
69507: LD_VAR 0 1
69511: NOT
69512: IFFALSE 69516
// exit ;
69514: GO 69615
// Randomize ;
69516: CALL_OW 10
// for i = array downto 1 do
69520: LD_ADDR_VAR 0 3
69524: PUSH
69525: DOUBLE
69526: LD_VAR 0 1
69530: INC
69531: ST_TO_ADDR
69532: LD_INT 1
69534: PUSH
69535: FOR_DOWNTO
69536: IFFALSE 69613
// begin index := rand ( 1 , array ) ;
69538: LD_ADDR_VAR 0 4
69542: PUSH
69543: LD_INT 1
69545: PPUSH
69546: LD_VAR 0 1
69550: PPUSH
69551: CALL_OW 12
69555: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69556: LD_ADDR_VAR 0 2
69560: PUSH
69561: LD_VAR 0 2
69565: PPUSH
69566: LD_VAR 0 2
69570: PUSH
69571: LD_INT 1
69573: PLUS
69574: PPUSH
69575: LD_VAR 0 1
69579: PUSH
69580: LD_VAR 0 4
69584: ARRAY
69585: PPUSH
69586: CALL_OW 2
69590: ST_TO_ADDR
// array := Delete ( array , index ) ;
69591: LD_ADDR_VAR 0 1
69595: PUSH
69596: LD_VAR 0 1
69600: PPUSH
69601: LD_VAR 0 4
69605: PPUSH
69606: CALL_OW 3
69610: ST_TO_ADDR
// end ;
69611: GO 69535
69613: POP
69614: POP
// end ;
69615: LD_VAR 0 2
69619: RET
// export function GetBaseMaterials ( base ) ; begin
69620: LD_INT 0
69622: PPUSH
// result := [ 0 , 0 , 0 ] ;
69623: LD_ADDR_VAR 0 2
69627: PUSH
69628: LD_INT 0
69630: PUSH
69631: LD_INT 0
69633: PUSH
69634: LD_INT 0
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: LIST
69641: ST_TO_ADDR
// if not base then
69642: LD_VAR 0 1
69646: NOT
69647: IFFALSE 69651
// exit ;
69649: GO 69700
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69651: LD_ADDR_VAR 0 2
69655: PUSH
69656: LD_VAR 0 1
69660: PPUSH
69661: LD_INT 1
69663: PPUSH
69664: CALL_OW 275
69668: PUSH
69669: LD_VAR 0 1
69673: PPUSH
69674: LD_INT 2
69676: PPUSH
69677: CALL_OW 275
69681: PUSH
69682: LD_VAR 0 1
69686: PPUSH
69687: LD_INT 3
69689: PPUSH
69690: CALL_OW 275
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: LIST
69699: ST_TO_ADDR
// end ;
69700: LD_VAR 0 2
69704: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69705: LD_INT 0
69707: PPUSH
69708: PPUSH
// result := array ;
69709: LD_ADDR_VAR 0 3
69713: PUSH
69714: LD_VAR 0 1
69718: ST_TO_ADDR
// if size > 0 then
69719: LD_VAR 0 2
69723: PUSH
69724: LD_INT 0
69726: GREATER
69727: IFFALSE 69773
// for i := array downto size do
69729: LD_ADDR_VAR 0 4
69733: PUSH
69734: DOUBLE
69735: LD_VAR 0 1
69739: INC
69740: ST_TO_ADDR
69741: LD_VAR 0 2
69745: PUSH
69746: FOR_DOWNTO
69747: IFFALSE 69771
// result := Delete ( result , result ) ;
69749: LD_ADDR_VAR 0 3
69753: PUSH
69754: LD_VAR 0 3
69758: PPUSH
69759: LD_VAR 0 3
69763: PPUSH
69764: CALL_OW 3
69768: ST_TO_ADDR
69769: GO 69746
69771: POP
69772: POP
// end ;
69773: LD_VAR 0 3
69777: RET
// export function ComExit ( unit ) ; var tmp ; begin
69778: LD_INT 0
69780: PPUSH
69781: PPUSH
// if not IsInUnit ( unit ) then
69782: LD_VAR 0 1
69786: PPUSH
69787: CALL_OW 310
69791: NOT
69792: IFFALSE 69796
// exit ;
69794: GO 69856
// tmp := IsInUnit ( unit ) ;
69796: LD_ADDR_VAR 0 3
69800: PUSH
69801: LD_VAR 0 1
69805: PPUSH
69806: CALL_OW 310
69810: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69811: LD_VAR 0 3
69815: PPUSH
69816: CALL_OW 247
69820: PUSH
69821: LD_INT 2
69823: EQUAL
69824: IFFALSE 69837
// ComExitVehicle ( unit ) else
69826: LD_VAR 0 1
69830: PPUSH
69831: CALL_OW 121
69835: GO 69846
// ComExitBuilding ( unit ) ;
69837: LD_VAR 0 1
69841: PPUSH
69842: CALL_OW 122
// result := tmp ;
69846: LD_ADDR_VAR 0 2
69850: PUSH
69851: LD_VAR 0 3
69855: ST_TO_ADDR
// end ;
69856: LD_VAR 0 2
69860: RET
// export function ResetHc ; begin
69861: LD_INT 0
69863: PPUSH
// InitHc ;
69864: CALL_OW 19
// hc_importance := 0 ;
69868: LD_ADDR_OWVAR 32
69872: PUSH
69873: LD_INT 0
69875: ST_TO_ADDR
// end ;
69876: LD_VAR 0 1
69880: RET
