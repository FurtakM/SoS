// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 618 0 0
// PrepareArabian ;
  12: CALL 1049 0 0
// PrepareAmerican ;
  16: CALL 4110 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9021 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 20
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 19
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 23
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 25
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 26
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 27
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 15
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 13
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// allowCargoEvacuation := false ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// americanStartRun := false ;
 300: LD_ADDR_EXP 14
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// end ; end_of_file
 308: LD_VAR 0 1
 312: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 313: LD_INT 0
 315: PPUSH
// uc_side := side ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_VAR 0 1
 325: ST_TO_ADDR
// uc_nation := nation ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_VAR 0 2
 335: ST_TO_ADDR
// vc_chassis := chassis ;
 336: LD_ADDR_OWVAR 37
 340: PUSH
 341: LD_VAR 0 3
 345: ST_TO_ADDR
// vc_engine := engine ;
 346: LD_ADDR_OWVAR 39
 350: PUSH
 351: LD_VAR 0 4
 355: ST_TO_ADDR
// vc_control := control ;
 356: LD_ADDR_OWVAR 38
 360: PUSH
 361: LD_VAR 0 5
 365: ST_TO_ADDR
// vc_weapon := weapon ;
 366: LD_ADDR_OWVAR 40
 370: PUSH
 371: LD_VAR 0 6
 375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 376: LD_ADDR_OWVAR 41
 380: PUSH
 381: LD_VAR 0 7
 385: ST_TO_ADDR
// result := CreateVehicle ;
 386: LD_ADDR_VAR 0 8
 390: PUSH
 391: CALL_OW 45
 395: ST_TO_ADDR
// end ;
 396: LD_VAR 0 8
 400: RET
// export function SayX ( units , ident ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// result := false ;
 405: LD_ADDR_VAR 0 3
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
// if not units then
 413: LD_VAR 0 1
 417: NOT
 418: IFFALSE 422
// exit ;
 420: GO 476
// for i in units do
 422: LD_ADDR_VAR 0 4
 426: PUSH
 427: LD_VAR 0 1
 431: PUSH
 432: FOR_IN
 433: IFFALSE 474
// if IsOk ( i ) then
 435: LD_VAR 0 4
 439: PPUSH
 440: CALL_OW 302
 444: IFFALSE 472
// begin Say ( i , ident ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_VAR 0 2
 455: PPUSH
 456: CALL_OW 88
// result := i ;
 460: LD_ADDR_VAR 0 3
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// break ;
 470: GO 474
// end ;
 472: GO 432
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// InitUc ;
 485: CALL_OW 18
// InitHc ;
 489: CALL_OW 19
// uc_side := 0 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 0
 500: ST_TO_ADDR
// uc_nation := 0 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 0
 508: ST_TO_ADDR
// for i = 1 to amount do
 509: LD_ADDR_VAR 0 4
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 2
 523: PUSH
 524: FOR_TO
 525: IFFALSE 607
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 527: LD_ADDR_OWVAR 29
 531: PUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: LD_INT 9
 545: PPUSH
 546: LD_INT 12
 548: PPUSH
 549: CALL_OW 12
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 558: LD_ADDR_OWVAR 35
 562: PUSH
 563: LD_INT 1
 565: NEG
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 12
 574: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_INT 12
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// end ;
 605: GO 524
 607: POP
 608: POP
// InitHc ;
 609: CALL_OW 19
// end ;
 613: LD_VAR 0 3
 617: RET
// export function CreateNature ; var i ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 4
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_OWVAR 67
 643: ARRAY
 644: PPUSH
 645: CALL 481 0 2
// for i := 1 to 2 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 2
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 21 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 21
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 2 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 2
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := 18 ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 18
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// for i := 1 to 2 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_INT 2
 763: PUSH
 764: FOR_TO
 765: IFFALSE 800
// begin hc_class := 13 ;
 767: LD_ADDR_OWVAR 28
 771: PUSH
 772: LD_INT 13
 774: ST_TO_ADDR
// hc_gallery :=  ;
 775: LD_ADDR_OWVAR 33
 779: PUSH
 780: LD_STRING 
 782: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 783: CALL_OW 44
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 764
 800: POP
 801: POP
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not observer or not unit then
 812: LD_VAR 0 1
 816: NOT
 817: PUSH
 818: LD_VAR 0 2
 822: NOT
 823: OR
 824: IFFALSE 828
// exit ;
 826: GO 876
// if not See ( GetSide ( observer ) , unit ) then
 828: LD_VAR 0 1
 832: PPUSH
 833: CALL_OW 255
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 292
 847: NOT
 848: IFFALSE 852
// exit ;
 850: GO 876
// result := GetDistUnits ( observer , unit ) < 12 ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: LD_VAR 0 1
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 12
 874: LESS
 875: ST_TO_ADDR
// end ;
 876: LD_VAR 0 3
 880: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 881: LD_INT 0
 883: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: CALL_OW 488
 906: PUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 428
 929: PUSH
 930: LD_INT 0
 932: EQUAL
 933: AND
 934: IFFALSE 968
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 936: LD_VAR 0 1
 940: PPUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 3
 963: PPUSH
 964: CALL_OW 48
// end ;
 968: LD_VAR 0 4
 972: RET
// export function ReverseArray ( array ) ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// if not array then
 977: LD_VAR 0 1
 981: NOT
 982: IFFALSE 986
// exit ;
 984: GO 1044
// result := [ ] ;
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: EMPTY
 992: ST_TO_ADDR
// for i := 1 to array do
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_VAR 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1042
// result := Insert ( result , 1 , array [ i ] ) ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_VAR 0 3
1033: ARRAY
1034: PPUSH
1035: CALL_OW 2
1039: ST_TO_ADDR
1040: GO 1008
1042: POP
1043: POP
// end ; end_of_file
1044: LD_VAR 0 2
1048: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
// uc_side := 5 ;
1055: LD_ADDR_OWVAR 20
1059: PUSH
1060: LD_INT 5
1062: ST_TO_ADDR
// uc_nation := 2 ;
1063: LD_ADDR_OWVAR 21
1067: PUSH
1068: LD_INT 2
1070: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1071: LD_INT 5
1073: PPUSH
1074: CALL_OW 274
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 65
1084: PPUSH
1085: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_STRING Farmer
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 36438 0 3
1107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1108: LD_ADDR_EXP 37
1112: PUSH
1113: LD_STRING Omar
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 36438 0 3
1126: ST_TO_ADDR
// omarSquad := [ ] ;
1127: LD_ADDR_EXP 40
1131: PUSH
1132: EMPTY
1133: ST_TO_ADDR
// heikeSquad := [ ] ;
1134: LD_ADDR_EXP 41
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1141: LD_ADDR_EXP 42
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// omarCargo := [ ] ;
1148: LD_ADDR_EXP 43
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to 5 do
1155: LD_ADDR_VAR 0 2
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_INT 5
1167: PUSH
1168: FOR_TO
1169: IFFALSE 1327
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_VAR 0 2
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 380
// un := CreateHuman ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: CALL_OW 44
1218: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1219: LD_ADDR_EXP 40
1223: PUSH
1224: LD_EXP 40
1228: PUSH
1229: LD_VAR 0 3
1233: UNION
1234: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1235: LD_VAR 0 3
1239: PPUSH
1240: LD_INT 87
1242: PUSH
1243: LD_INT 30
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 91
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 15
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 79
1272: PUSH
1273: LD_INT 14
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 82
1282: PUSH
1283: LD_INT 13
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_VAR 0 2
1301: ARRAY
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL 881 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 93
1317: PPUSH
1318: LD_INT 21
1320: PPUSH
1321: CALL_OW 118
// end ;
1325: GO 1168
1327: POP
1328: POP
// uc_side := 2 ;
1329: LD_ADDR_OWVAR 20
1333: PUSH
1334: LD_INT 2
1336: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1337: LD_ADDR_EXP 28
1341: PUSH
1342: LD_STRING Heike
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_EXP 2
1355: PPUSH
1356: CALL 36438 0 3
1360: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1361: LD_ADDR_EXP 32
1365: PUSH
1366: LD_STRING Aviradze
1368: PPUSH
1369: LD_EXP 1
1373: NOT
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL 36438 0 3
1384: ST_TO_ADDR
// tmp := [ ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: EMPTY
1391: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 29
1396: PUSH
1397: LD_STRING Givi
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 36438 0 3
1415: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 30
1420: PUSH
1421: LD_STRING Mike
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 36438 0 3
1439: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 31
1444: PUSH
1445: LD_STRING Kamil
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 36438 0 3
1463: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 33
1468: PUSH
1469: LD_STRING Kaia
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 36438 0 3
1487: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 34
1492: PUSH
1493: LD_STRING Sophia
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 36438 0 3
1511: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1512: LD_ADDR_EXP 35
1516: PUSH
1517: LD_STRING Markov
1519: PPUSH
1520: LD_EXP 1
1524: NOT
1525: PPUSH
1526: LD_EXP 2
1530: PPUSH
1531: CALL 36438 0 3
1535: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1536: LD_ADDR_EXP 42
1540: PUSH
1541: LD_STRING 02_others
1543: PPUSH
1544: CALL_OW 31
1548: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_EXP 30
1558: PUSH
1559: LD_EXP 31
1563: PUSH
1564: LD_EXP 33
1568: PUSH
1569: LD_EXP 34
1573: PUSH
1574: LD_EXP 35
1578: PUSH
1579: LD_EXP 29
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_EXP 42
1596: ADD
1597: PUSH
1598: LD_INT 0
1600: DIFF
1601: ST_TO_ADDR
// heikeSquad := tmp ;
1602: LD_ADDR_EXP 41
1606: PUSH
1607: LD_VAR 0 4
1611: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1612: LD_EXP 41
1616: PPUSH
1617: LD_INT 25
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PPUSH
1627: CALL_OW 72
1631: PUSH
1632: LD_INT 3
1634: LESS
1635: IFFALSE 1685
// begin SetClass ( Kaia , 1 ) ;
1637: LD_EXP 33
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1649: LD_EXP 30
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1661: LD_EXP 29
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1673: LD_EXP 28
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_STRING 02_ape
1697: PPUSH
1698: CALL_OW 31
1702: UNION
1703: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1704: LD_EXP 28
1708: PPUSH
1709: LD_INT 92
1711: PPUSH
1712: LD_INT 17
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1722: LD_EXP 36
1726: PPUSH
1727: LD_INT 95
1729: PPUSH
1730: LD_INT 19
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1740: LD_EXP 37
1744: PPUSH
1745: LD_INT 89
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1758: LD_EXP 32
1762: PPUSH
1763: LD_INT 92
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1776: LD_EXP 37
1780: PPUSH
1781: LD_EXP 32
1785: PPUSH
1786: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1790: LD_EXP 32
1794: PPUSH
1795: LD_EXP 37
1799: PPUSH
1800: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1804: LD_EXP 28
1808: PUSH
1809: LD_EXP 36
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_EXP 37
1822: PPUSH
1823: CALL_OW 119
// if tmp then
1827: LD_VAR 0 4
1831: IFFALSE 1885
// for i in tmp do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1883
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 94
1853: PPUSH
1854: LD_INT 14
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_EXP 28
1876: PPUSH
1877: CALL_OW 119
// end ;
1881: GO 1843
1883: POP
1884: POP
// farmerSquad := [ ] ;
1885: LD_ADDR_EXP 39
1889: PUSH
1890: EMPTY
1891: ST_TO_ADDR
// uc_side := 5 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 5
1899: ST_TO_ADDR
// uc_nation := 2 ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// for i := 1 to 4 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 4
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// begin PrepareHuman ( false , 1 , 2 ) ;
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 380
// un := CreateHuman ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1947: LD_VAR 0 3
1951: PPUSH
1952: LD_INT 102
1954: PPUSH
1955: LD_INT 27
1957: PPUSH
1958: LD_INT 4
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1968: LD_ADDR_EXP 39
1972: PUSH
1973: LD_EXP 39
1977: PUSH
1978: LD_VAR 0 3
1982: UNION
1983: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_EXP 37
1993: PPUSH
1994: CALL_OW 119
// end ;
1998: GO 1921
2000: POP
2001: POP
// for i := 1 to 2 do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 2
2014: PUSH
2015: FOR_TO
2016: IFFALSE 2094
// begin PrepareHuman ( false , 2 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 108
2048: PPUSH
2049: LD_INT 62
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2062: LD_ADDR_EXP 39
2066: PUSH
2067: LD_EXP 39
2071: PUSH
2072: LD_VAR 0 3
2076: UNION
2077: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2078: LD_VAR 0 3
2082: PPUSH
2083: LD_EXP 37
2087: PPUSH
2088: CALL_OW 119
// end ;
2092: GO 2015
2094: POP
2095: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2096: LD_INT 109
2098: PPUSH
2099: LD_INT 63
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 15
2107: NEG
2108: PPUSH
2109: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2113: LD_INT 109
2115: PPUSH
2116: LD_INT 63
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL_OW 331
// end ;
2126: LD_VAR 0 1
2130: RET
// export function PrepareIbrahim ( x , y ) ; begin
2131: LD_INT 0
2133: PPUSH
// uc_side := 6 ;
2134: LD_ADDR_OWVAR 20
2138: PUSH
2139: LD_INT 6
2141: ST_TO_ADDR
// uc_nation := 3 ;
2142: LD_ADDR_OWVAR 21
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_STRING IbrahimRu
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 36438 0 3
2168: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2169: LD_EXP 38
2173: PPUSH
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_INT 8
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 50
// end ;
2194: LD_VAR 0 3
2198: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2199: LD_EXP 37
2203: PUSH
2204: LD_EXP 40
2208: ADD
2209: PPUSH
2210: LD_INT 95
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 72
2224: IFFALSE 2280
2226: GO 2228
2228: DISABLE
2229: LD_INT 0
2231: PPUSH
// begin enable ;
2232: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_EXP 37
2242: PUSH
2243: LD_EXP 40
2247: ADD
2248: PPUSH
2249: LD_INT 95
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 72
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2278
// RemoveUnit ( i ) ;
2267: LD_VAR 0 1
2271: PPUSH
2272: CALL_OW 64
2276: GO 2264
2278: POP
2279: POP
// end ;
2280: PPOPN 1
2282: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2283: LD_EXP 3
2287: PUSH
2288: LD_EXP 36
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: CALL_OW 308
2300: AND
2301: IFFALSE 3105
2303: GO 2305
2305: DISABLE
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2312: LD_EXP 36
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 60
2322: PPUSH
2323: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2327: LD_EXP 36
2331: PPUSH
2332: LD_INT 110
2334: PPUSH
2335: LD_INT 61
2337: PPUSH
2338: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 39
2351: PPUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 72
2366: ST_TO_ADDR
// if tmp then
2367: LD_VAR 0 2
2371: IFFALSE 2465
// begin for i := 1 to 2 do
2373: LD_ADDR_VAR 0 1
2377: PUSH
2378: DOUBLE
2379: LD_INT 1
2381: DEC
2382: ST_TO_ADDR
2383: LD_INT 2
2385: PUSH
2386: FOR_TO
2387: IFFALSE 2463
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PPUSH
2400: LD_INT 5
2402: PPUSH
2403: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2407: LD_VAR 0 2
2411: PUSH
2412: LD_VAR 0 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2440: LD_VAR 0 2
2444: PUSH
2445: LD_VAR 0 1
2449: ARRAY
2450: PPUSH
2451: LD_INT 107
2453: PPUSH
2454: LD_INT 66
2456: PPUSH
2457: CALL_OW 171
// end ;
2461: GO 2386
2463: POP
2464: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_EXP 39
2474: PPUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 72
2489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 39
2506: PPUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: ST_TO_ADDR
// until tmp ;
2522: LD_VAR 0 2
2526: IFFALSE 2490
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 31
2535: PPUSH
2536: LD_INT 102
2538: PPUSH
2539: LD_INT 69
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2556: LD_EXP 39
2560: PPUSH
2561: LD_INT 3
2563: PUSH
2564: LD_INT 60
2566: PUSH
2567: EMPTY
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 72
2592: IFFALSE 2549
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: LD_EXP 39
2603: PPUSH
2604: LD_INT 25
2606: PUSH
2607: LD_INT 2
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2619: LD_VAR 0 2
2623: PPUSH
2624: LD_INT 6
2626: PPUSH
2627: LD_INT 116
2629: PPUSH
2630: LD_INT 55
2632: PPUSH
2633: LD_INT 4
2635: PPUSH
2636: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2640: LD_VAR 0 2
2644: PPUSH
2645: LD_INT 4
2647: PPUSH
2648: LD_INT 116
2650: PPUSH
2651: LD_INT 70
2653: PPUSH
2654: LD_INT 5
2656: PPUSH
2657: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2661: LD_VAR 0 2
2665: PPUSH
2666: LD_INT 31
2668: PPUSH
2669: LD_INT 109
2671: PPUSH
2672: LD_INT 50
2674: PPUSH
2675: LD_INT 2
2677: PPUSH
2678: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2682: LD_INT 35
2684: PPUSH
2685: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2689: LD_INT 22
2691: PUSH
2692: LD_INT 5
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 30
2701: PUSH
2702: LD_INT 4
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 3
2711: PUSH
2712: LD_INT 57
2714: PUSH
2715: EMPTY
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: PPUSH
2727: CALL_OW 69
2731: IFFALSE 2682
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2733: LD_ADDR_VAR 0 3
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 5
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 4
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: LD_INT 57
2763: PUSH
2764: EMPTY
2765: LIST
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: PPUSH
2776: CALL_OW 69
2780: PUSH
2781: LD_INT 1
2783: ARRAY
2784: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: LD_EXP 39
2794: PPUSH
2795: LD_INT 25
2797: PUSH
2798: LD_INT 1
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 72
2809: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2810: LD_VAR 0 2
2814: PPUSH
2815: LD_VAR 0 3
2819: PPUSH
2820: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2824: LD_INT 35
2826: PPUSH
2827: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2831: LD_INT 22
2833: PUSH
2834: LD_INT 5
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 30
2843: PUSH
2844: LD_INT 31
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 3
2853: PUSH
2854: LD_INT 57
2856: PUSH
2857: EMPTY
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: PUSH
2874: LD_INT 2
2876: GREATEREQUAL
2877: IFFALSE 2824
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2879: LD_ADDR_VAR 0 2
2883: PUSH
2884: LD_EXP 39
2888: PPUSH
2889: LD_INT 25
2891: PUSH
2892: LD_INT 2
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 72
2903: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2904: LD_VAR 0 2
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: LD_INT 5
2915: PPUSH
2916: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 2
2927: ARRAY
2928: PUSH
2929: LD_VAR 0 2
2933: PUSH
2934: LD_INT 3
2936: ARRAY
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PPUSH
2942: LD_VAR 0 3
2946: PPUSH
2947: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2951: LD_VAR 0 2
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PUSH
2960: LD_VAR 0 2
2964: PUSH
2965: LD_INT 3
2967: ARRAY
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2980: LD_VAR 0 2
2984: PUSH
2985: LD_INT 2
2987: ARRAY
2988: PUSH
2989: LD_VAR 0 2
2993: PUSH
2994: LD_INT 3
2996: ARRAY
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PPUSH
3002: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3006: LD_ADDR_VAR 0 4
3010: PUSH
3011: LD_INT 22
3013: PUSH
3014: LD_INT 5
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 30
3023: PUSH
3024: LD_INT 31
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PPUSH
3035: CALL_OW 69
3039: ST_TO_ADDR
// for i := 1 to 2 do
3040: LD_ADDR_VAR 0 1
3044: PUSH
3045: DOUBLE
3046: LD_INT 1
3048: DEC
3049: ST_TO_ADDR
3050: LD_INT 2
3052: PUSH
3053: FOR_TO
3054: IFFALSE 3088
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3056: LD_VAR 0 2
3060: PUSH
3061: LD_VAR 0 1
3065: PUSH
3066: LD_INT 1
3068: PLUS
3069: ARRAY
3070: PPUSH
3071: LD_VAR 0 4
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: CALL_OW 180
3086: GO 3053
3088: POP
3089: POP
// wait ( 1 1$00 ) ;
3090: LD_INT 2100
3092: PPUSH
3093: CALL_OW 67
// farmerBaseReady := true ;
3097: LD_ADDR_EXP 4
3101: PUSH
3102: LD_INT 1
3104: ST_TO_ADDR
// end ;
3105: PPOPN 4
3107: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3108: LD_EXP 4
3112: PUSH
3113: LD_EXP 11
3117: NOT
3118: AND
3119: IFFALSE 3641
3121: GO 3123
3123: DISABLE
3124: LD_INT 0
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
// begin enable ;
3131: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_EXP 39
3141: PPUSH
3142: LD_INT 25
3144: PUSH
3145: LD_INT 1
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PPUSH
3152: CALL_OW 72
3156: PUSH
3157: LD_EXP 36
3161: ADD
3162: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 39
3172: PPUSH
3173: LD_INT 25
3175: PUSH
3176: LD_INT 2
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: PPUSH
3183: CALL_OW 72
3187: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3188: LD_ADDR_VAR 0 5
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 5
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 21
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: LD_INT 24
3218: PUSH
3219: LD_INT 1000
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: PPUSH
3235: CALL_OW 69
3239: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_INT 22
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3274: LD_VAR 0 4
3278: PUSH
3279: LD_INT 1
3281: ARRAY
3282: PPUSH
3283: CALL_OW 302
3287: IFFALSE 3351
// for i in sol do
3289: LD_ADDR_VAR 0 1
3293: PUSH
3294: LD_VAR 0 3
3298: PUSH
3299: FOR_IN
3300: IFFALSE 3349
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3302: LD_VAR 0 1
3306: PPUSH
3307: CALL_OW 256
3311: PUSH
3312: LD_INT 999
3314: LESS
3315: PUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 310
3325: NOT
3326: AND
3327: IFFALSE 3347
// ComEnterUnit ( i , arm [ 1 ] ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: LD_VAR 0 4
3338: PUSH
3339: LD_INT 1
3341: ARRAY
3342: PPUSH
3343: CALL_OW 120
3347: GO 3299
3349: POP
3350: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3351: LD_VAR 0 2
3355: NOT
3356: PUSH
3357: LD_INT 22
3359: PUSH
3360: LD_INT 1
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 1
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PPUSH
3381: CALL_OW 69
3385: NOT
3386: AND
3387: IFFALSE 3479
// begin uc_side := 5 ;
3389: LD_ADDR_OWVAR 20
3393: PUSH
3394: LD_INT 5
3396: ST_TO_ADDR
// uc_nation := 2 ;
3397: LD_ADDR_OWVAR 21
3401: PUSH
3402: LD_INT 2
3404: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3405: LD_INT 0
3407: PPUSH
3408: LD_INT 2
3410: PPUSH
3411: LD_INT 2
3413: PPUSH
3414: CALL_OW 380
// eng := CreateHuman ;
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3428: LD_VAR 0 2
3432: PPUSH
3433: LD_INT 102
3435: PPUSH
3436: LD_INT 8
3438: PPUSH
3439: LD_INT 0
3441: PPUSH
3442: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3446: LD_VAR 0 2
3450: PPUSH
3451: LD_INT 110
3453: PPUSH
3454: LD_INT 60
3456: PPUSH
3457: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3461: LD_ADDR_EXP 39
3465: PUSH
3466: LD_EXP 39
3470: PUSH
3471: LD_VAR 0 2
3475: UNION
3476: ST_TO_ADDR
// end else
3477: GO 3641
// begin for i in eng do
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 2
3488: PUSH
3489: FOR_IN
3490: IFFALSE 3639
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3492: LD_INT 10
3494: PPUSH
3495: LD_INT 1
3497: PPUSH
3498: CALL_OW 287
3502: IFFALSE 3553
// begin if IsInUnit ( i ) then
3504: LD_VAR 0 1
3508: PPUSH
3509: CALL_OW 310
3513: IFFALSE 3524
// ComExitBuilding ( i ) ;
3515: LD_VAR 0 1
3519: PPUSH
3520: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_INT 10
3531: PPUSH
3532: CALL_OW 308
3536: NOT
3537: IFFALSE 3551
// AddComMoveToArea ( i , collectFarmerArea ) ;
3539: LD_VAR 0 1
3543: PPUSH
3544: LD_INT 10
3546: PPUSH
3547: CALL_OW 173
// end else
3551: GO 3637
// begin if damagedBuilding then
3553: LD_VAR 0 5
3557: IFFALSE 3601
// begin if IsInUnit ( i ) then
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 310
3568: IFFALSE 3581
// ComExitBuilding ( i ) else
3570: LD_VAR 0 1
3574: PPUSH
3575: CALL_OW 122
3579: GO 3599
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: LD_VAR 0 5
3590: PUSH
3591: LD_INT 1
3593: ARRAY
3594: PPUSH
3595: CALL_OW 130
// end else
3599: GO 3637
// if not IsInUnit ( i ) and not HasTask ( i ) then
3601: LD_VAR 0 1
3605: PPUSH
3606: CALL_OW 310
3610: NOT
3611: PUSH
3612: LD_VAR 0 1
3616: PPUSH
3617: CALL_OW 314
3621: NOT
3622: AND
3623: IFFALSE 3637
// ComEnterUnit ( i , arDepot ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 5
3632: PPUSH
3633: CALL_OW 120
// end ; end ;
3637: GO 3489
3639: POP
3640: POP
// end ; end ;
3641: PPOPN 5
3643: END
// export function CargoEvacuation ; begin
3644: LD_INT 0
3646: PPUSH
// wait ( 0 0$20 ) ;
3647: LD_INT 700
3649: PPUSH
3650: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3654: LD_ADDR_EXP 21
3658: PUSH
3659: LD_EXP 21
3663: PUSH
3664: LD_INT 1
3666: MINUS
3667: ST_TO_ADDR
// if omarCargoCounter = 0 then
3668: LD_EXP 21
3672: PUSH
3673: LD_INT 0
3675: EQUAL
3676: IFFALSE 3680
// exit ;
3678: GO 3987
// if omarCargo then
3680: LD_EXP 43
3684: IFFALSE 3695
// RemoveUnit ( omarCargo ) ;
3686: LD_EXP 43
3690: PPUSH
3691: CALL_OW 64
// omarCargo := PrepareCargo ;
3695: LD_ADDR_EXP 43
3699: PUSH
3700: CALL 3992 0 0
3704: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3705: LD_EXP 43
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3717: LD_EXP 43
3721: PPUSH
3722: LD_INT 107
3724: PPUSH
3725: LD_INT 59
3727: PPUSH
3728: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3732: LD_INT 35
3734: PPUSH
3735: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3739: LD_EXP 43
3743: PPUSH
3744: LD_INT 107
3746: PPUSH
3747: LD_INT 59
3749: PPUSH
3750: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3754: LD_EXP 43
3758: PPUSH
3759: CALL_OW 302
3763: NOT
3764: PUSH
3765: LD_EXP 43
3769: PPUSH
3770: CALL_OW 301
3774: OR
3775: IFFALSE 3779
// exit ;
3777: GO 3987
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3779: LD_EXP 43
3783: PPUSH
3784: LD_INT 107
3786: PPUSH
3787: LD_INT 59
3789: PPUSH
3790: CALL_OW 307
3794: PUSH
3795: LD_EXP 43
3799: PPUSH
3800: LD_INT 5
3802: PPUSH
3803: CALL_OW 296
3807: PUSH
3808: LD_INT 6
3810: LESS
3811: OR
3812: IFFALSE 3732
// SetTag ( omarCargo , 1 ) ;
3814: LD_EXP 43
3818: PPUSH
3819: LD_INT 1
3821: PPUSH
3822: CALL_OW 109
// wait ( 0 0$05 ) ;
3826: LD_INT 175
3828: PPUSH
3829: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3833: LD_EXP 43
3837: PPUSH
3838: LD_INT 5
3840: PPUSH
3841: LD_INT 1
3843: PPUSH
3844: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3848: LD_EXP 43
3852: PPUSH
3853: LD_INT 103
3855: PPUSH
3856: LD_INT 9
3858: PPUSH
3859: CALL_OW 171
// wait ( 0 0$1 ) ;
3863: LD_INT 35
3865: PPUSH
3866: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3870: LD_EXP 43
3874: PPUSH
3875: LD_INT 1
3877: PPUSH
3878: LD_INT 100
3880: PPUSH
3881: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3885: LD_INT 35
3887: PPUSH
3888: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3892: LD_EXP 43
3896: PPUSH
3897: LD_INT 103
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3907: LD_EXP 43
3911: PPUSH
3912: CALL_OW 302
3916: NOT
3917: PUSH
3918: LD_EXP 43
3922: PPUSH
3923: CALL_OW 301
3927: OR
3928: IFFALSE 3932
// exit ;
3930: GO 3987
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3932: LD_EXP 43
3936: PPUSH
3937: LD_INT 103
3939: PPUSH
3940: LD_INT 9
3942: PPUSH
3943: CALL_OW 307
3947: PUSH
3948: LD_EXP 43
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: CALL_OW 308
3960: OR
3961: PUSH
3962: LD_EXP 43
3966: PPUSH
3967: CALL_OW 110
3971: PUSH
3972: LD_INT 0
3974: GREATER
3975: AND
3976: IFFALSE 3885
// RemoveUnit ( omarCargo ) ;
3978: LD_EXP 43
3982: PPUSH
3983: CALL_OW 64
// end ;
3987: LD_VAR 0 1
3991: RET
// export function PrepareCargo ; var un , veh ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_INT 5
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: LD_INT 14
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_INT 1
4016: PPUSH
4017: LD_INT 32
4019: PPUSH
4020: LD_INT 80
4022: PPUSH
4023: CALL 313 0 7
4027: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4028: LD_VAR 0 3
4032: PPUSH
4033: LD_INT 4
4035: PPUSH
4036: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_INT 101
4047: PPUSH
4048: LD_INT 8
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4058: LD_INT 0
4060: PPUSH
4061: LD_INT 3
4063: PPUSH
4064: LD_INT 2
4066: PPUSH
4067: CALL_OW 380
// un := CreateHuman ;
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: CALL_OW 44
4080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4081: LD_VAR 0 2
4085: PPUSH
4086: LD_VAR 0 3
4090: PPUSH
4091: CALL_OW 52
// result := veh ;
4095: LD_ADDR_VAR 0 1
4099: PUSH
4100: LD_VAR 0 3
4104: ST_TO_ADDR
// end ; end_of_file
4105: LD_VAR 0 1
4109: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4110: LD_INT 0
4112: PPUSH
4113: PPUSH
4114: PPUSH
// usForces := [ ] ;
4115: LD_ADDR_EXP 44
4119: PUSH
4120: EMPTY
4121: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4122: LD_ADDR_EXP 46
4126: PUSH
4127: LD_INT 6
4129: PUSH
4130: LD_INT 32
4132: PUSH
4133: LD_INT 27
4135: PUSH
4136: LD_INT 1
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 4
4147: PUSH
4148: LD_INT 43
4150: PUSH
4151: LD_INT 24
4153: PUSH
4154: LD_INT 5
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 27
4165: PUSH
4166: LD_INT 29
4168: PUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4186: LD_INT 11
4188: PPUSH
4189: CALL_OW 274
4193: PPUSH
4194: LD_INT 1
4196: PPUSH
4197: LD_INT 150
4199: PUSH
4200: LD_INT 120
4202: PUSH
4203: LD_INT 100
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: PUSH
4211: LD_OWVAR 67
4215: ARRAY
4216: PPUSH
4217: CALL_OW 277
// if Difficulty = 1 then
4221: LD_OWVAR 67
4225: PUSH
4226: LD_INT 1
4228: EQUAL
4229: IFFALSE 4238
// RemoveUnit ( hillBun ) ;
4231: LD_INT 14
4233: PPUSH
4234: CALL_OW 64
// uc_side := 1 ;
4238: LD_ADDR_OWVAR 20
4242: PUSH
4243: LD_INT 1
4245: ST_TO_ADDR
// uc_nation := 1 ;
4246: LD_ADDR_OWVAR 21
4250: PUSH
4251: LD_INT 1
4253: ST_TO_ADDR
// hc_gallery :=  ;
4254: LD_ADDR_OWVAR 33
4258: PUSH
4259: LD_STRING 
4261: ST_TO_ADDR
// hc_name :=  ;
4262: LD_ADDR_OWVAR 26
4266: PUSH
4267: LD_STRING 
4269: ST_TO_ADDR
// hc_importance := 0 ;
4270: LD_ADDR_OWVAR 32
4274: PUSH
4275: LD_INT 0
4277: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 1
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: CALL_OW 380
// usCommander := CreateHuman ;
4291: LD_ADDR_EXP 45
4295: PUSH
4296: CALL_OW 44
4300: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4301: LD_EXP 45
4305: PPUSH
4306: LD_INT 11
4308: PPUSH
4309: CALL_OW 52
// if Difficulty > 1 then
4313: LD_OWVAR 67
4317: PUSH
4318: LD_INT 1
4320: GREATER
4321: IFFALSE 4403
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 1
4328: PPUSH
4329: LD_INT 1
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 3
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: PUSH
4343: LD_OWVAR 67
4347: ARRAY
4348: PPUSH
4349: CALL_OW 380
// un := CreateHuman ;
4353: LD_ADDR_VAR 0 3
4357: PUSH
4358: CALL_OW 44
4362: ST_TO_ADDR
// usForces := usForces union un ;
4363: LD_ADDR_EXP 44
4367: PUSH
4368: LD_EXP 44
4372: PUSH
4373: LD_VAR 0 3
4377: UNION
4378: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4379: LD_VAR 0 3
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4391: LD_VAR 0 3
4395: PPUSH
4396: LD_INT 14
4398: PPUSH
4399: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4403: LD_ADDR_VAR 0 2
4407: PUSH
4408: DOUBLE
4409: LD_INT 1
4411: DEC
4412: ST_TO_ADDR
4413: LD_INT 2
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4576
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 1
4441: PPUSH
4442: LD_INT 1
4444: PUSH
4445: LD_INT 2
4447: PUSH
4448: LD_INT 3
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_OWVAR 67
4460: ARRAY
4461: PPUSH
4462: CALL_OW 380
// un := CreateHuman ;
4466: LD_ADDR_VAR 0 3
4470: PUSH
4471: CALL_OW 44
4475: ST_TO_ADDR
// usForces := usForces union un ;
4476: LD_ADDR_EXP 44
4480: PUSH
4481: LD_EXP 44
4485: PUSH
4486: LD_VAR 0 3
4490: UNION
4491: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4492: LD_VAR 0 3
4496: PPUSH
4497: LD_INT 39
4499: PPUSH
4500: LD_INT 24
4502: PPUSH
4503: LD_INT 4
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: CALL_OW 50
// if i < 3 then
4513: LD_VAR 0 2
4517: PUSH
4518: LD_INT 3
4520: LESS
4521: IFFALSE 4574
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4523: LD_VAR 0 3
4527: PPUSH
4528: LD_INT 22
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 58
4540: PUSH
4541: EMPTY
4542: LIST
4543: PUSH
4544: LD_INT 30
4546: PUSH
4547: LD_INT 31
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 69
4563: PUSH
4564: LD_VAR 0 2
4568: ARRAY
4569: PPUSH
4570: CALL_OW 120
// end ;
4574: GO 4433
4576: POP
4577: POP
// for i := 1 to 2 do
4578: LD_ADDR_VAR 0 2
4582: PUSH
4583: DOUBLE
4584: LD_INT 1
4586: DEC
4587: ST_TO_ADDR
4588: LD_INT 2
4590: PUSH
4591: FOR_TO
4592: IFFALSE 4656
// begin PrepareHuman ( false , 2 , 2 ) ;
4594: LD_INT 0
4596: PPUSH
4597: LD_INT 2
4599: PPUSH
4600: LD_INT 2
4602: PPUSH
4603: CALL_OW 380
// un := CreateHuman ;
4607: LD_ADDR_VAR 0 3
4611: PUSH
4612: CALL_OW 44
4616: ST_TO_ADDR
// usForces := usForces union un ;
4617: LD_ADDR_EXP 44
4621: PUSH
4622: LD_EXP 44
4626: PUSH
4627: LD_VAR 0 3
4631: UNION
4632: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4633: LD_VAR 0 3
4637: PPUSH
4638: LD_INT 39
4640: PPUSH
4641: LD_INT 24
4643: PPUSH
4644: LD_INT 4
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 50
// end ;
4654: GO 4591
4656: POP
4657: POP
// PrepareHuman ( false , 4 , 1 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 4
4663: PPUSH
4664: LD_INT 1
4666: PPUSH
4667: CALL_OW 380
// un := CreateHuman ;
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: CALL_OW 44
4680: ST_TO_ADDR
// usForces := usForces union un ;
4681: LD_ADDR_EXP 44
4685: PUSH
4686: LD_EXP 44
4690: PUSH
4691: LD_VAR 0 3
4695: UNION
4696: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_INT 39
4704: PPUSH
4705: LD_INT 24
4707: PPUSH
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 50
// end ;
4718: LD_VAR 0 1
4722: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4723: LD_EXP 44
4727: PUSH
4728: LD_EXP 6
4732: NOT
4733: AND
4734: PUSH
4735: LD_EXP 14
4739: NOT
4740: AND
4741: IFFALSE 5172
4743: GO 4745
4745: DISABLE
4746: LD_INT 0
4748: PPUSH
4749: PPUSH
4750: PPUSH
4751: PPUSH
4752: PPUSH
// begin enable ;
4753: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4754: LD_ADDR_VAR 0 3
4758: PUSH
4759: LD_EXP 44
4763: PPUSH
4764: LD_INT 25
4766: PUSH
4767: LD_INT 2
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PPUSH
4774: CALL_OW 72
4778: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4779: LD_ADDR_VAR 0 4
4783: PUSH
4784: LD_EXP 44
4788: PPUSH
4789: LD_INT 25
4791: PUSH
4792: LD_INT 1
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PPUSH
4799: CALL_OW 72
4803: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4804: LD_ADDR_VAR 0 5
4808: PUSH
4809: LD_EXP 44
4813: PPUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PPUSH
4824: CALL_OW 72
4828: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4829: LD_INT 7
4831: PPUSH
4832: LD_INT 22
4834: PUSH
4835: LD_INT 2
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL_OW 70
4846: PUSH
4847: LD_INT 1
4849: EQUAL
4850: IFFALSE 4926
// for i in sol do
4852: LD_ADDR_VAR 0 1
4856: PUSH
4857: LD_VAR 0 4
4861: PUSH
4862: FOR_IN
4863: IFFALSE 4924
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 310
4874: NOT
4875: PUSH
4876: LD_VAR 0 1
4880: PPUSH
4881: CALL_OW 310
4885: PPUSH
4886: CALL_OW 266
4890: PUSH
4891: LD_INT 4
4893: EQUAL
4894: NOT
4895: OR
4896: IFFALSE 4922
// begin ComExitBuilding ( i ) ;
4898: LD_VAR 0 1
4902: PPUSH
4903: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4907: LD_VAR 0 1
4911: PPUSH
4912: LD_INT 37
4914: PPUSH
4915: LD_INT 23
4917: PPUSH
4918: CALL_OW 174
// end ;
4922: GO 4862
4924: POP
4925: POP
// if eng then
4926: LD_VAR 0 3
4930: IFFALSE 5172
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4932: LD_ADDR_VAR 0 2
4936: PUSH
4937: LD_INT 22
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: LD_INT 95
4949: PUSH
4950: LD_INT 7
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: LD_INT 21
4959: PUSH
4960: LD_INT 3
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: LD_INT 24
4972: PUSH
4973: LD_INT 1000
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 69
4994: ST_TO_ADDR
// if b then
4995: LD_VAR 0 2
4999: IFFALSE 5030
// begin ComExitBuilding ( eng ) ;
5001: LD_VAR 0 3
5005: PPUSH
5006: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: LD_VAR 0 2
5019: PUSH
5020: LD_INT 1
5022: ARRAY
5023: PPUSH
5024: CALL_OW 190
// end else
5028: GO 5172
// begin for i in eng do
5030: LD_ADDR_VAR 0 1
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: FOR_IN
5041: IFFALSE 5170
// if not HasTask ( i ) then
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 314
5052: NOT
5053: IFFALSE 5168
// begin if americanBuildList then
5055: LD_EXP 46
5059: IFFALSE 5144
// begin if IsInUnit ( i ) then
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 310
5070: IFFALSE 5081
// ComExitBuilding ( i ) ;
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5081: LD_VAR 0 1
5085: PPUSH
5086: LD_EXP 46
5090: PUSH
5091: LD_INT 1
5093: ARRAY
5094: PUSH
5095: LD_INT 1
5097: ARRAY
5098: PPUSH
5099: LD_EXP 46
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PUSH
5108: LD_INT 2
5110: ARRAY
5111: PPUSH
5112: LD_EXP 46
5116: PUSH
5117: LD_INT 1
5119: ARRAY
5120: PUSH
5121: LD_INT 3
5123: ARRAY
5124: PPUSH
5125: LD_EXP 46
5129: PUSH
5130: LD_INT 1
5132: ARRAY
5133: PUSH
5134: LD_INT 4
5136: ARRAY
5137: PPUSH
5138: CALL_OW 205
// end else
5142: GO 5168
// if not IsInUnit ( i ) then
5144: LD_VAR 0 1
5148: PPUSH
5149: CALL_OW 310
5153: NOT
5154: IFFALSE 5168
// ComEnterUnit ( i , usDepot ) ;
5156: LD_VAR 0 1
5160: PPUSH
5161: LD_INT 11
5163: PPUSH
5164: CALL_OW 120
// end ;
5168: GO 5040
5170: POP
5171: POP
// end ; end ; end ;
5172: PPOPN 5
5174: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5175: LD_INT 0
5177: PPUSH
5178: PPUSH
5179: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5180: LD_ADDR_VAR 0 3
5184: PUSH
5185: LD_INT 35
5187: PUSH
5188: LD_INT 45
5190: PUSH
5191: LD_INT 48
5193: PUSH
5194: LD_EXP 58
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
// for i in tech do
5205: LD_ADDR_VAR 0 4
5209: PUSH
5210: LD_VAR 0 3
5214: PUSH
5215: FOR_IN
5216: IFFALSE 5234
// AddComResearch ( lab , i ) ;
5218: LD_VAR 0 1
5222: PPUSH
5223: LD_VAR 0 4
5227: PPUSH
5228: CALL_OW 184
5232: GO 5215
5234: POP
5235: POP
// end ;
5236: LD_VAR 0 2
5240: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5241: LD_EXP 12
5245: PUSH
5246: LD_EXP 23
5250: PUSH
5251: LD_EXP 27
5255: LESSEQUAL
5256: AND
5257: IFFALSE 5282
5259: GO 5261
5261: DISABLE
// begin enable ;
5262: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5263: LD_INT 35
5265: PPUSH
5266: LD_INT 2065
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: CALL_OW 67
// SendConvoy ;
5278: CALL 5380 0 0
// end ;
5282: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5283: LD_EXP 6
5287: PUSH
5288: LD_EXP 18
5292: AND
5293: IFFALSE 5379
5295: GO 5297
5297: DISABLE
// begin if americanHasEscaped then
5298: LD_EXP 8
5302: IFFALSE 5313
// wait ( 3 3$20 ) else
5304: LD_INT 7000
5306: PPUSH
5307: CALL_OW 67
5311: GO 5320
// wait ( 6 6$40 ) ;
5313: LD_INT 14000
5315: PPUSH
5316: CALL_OW 67
// SendAttack ;
5320: CALL 6123 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5324: LD_INT 14000
5326: PUSH
5327: LD_INT 11900
5329: PUSH
5330: LD_INT 9800
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: LIST
5337: PUSH
5338: LD_OWVAR 67
5342: ARRAY
5343: PPUSH
5344: CALL_OW 67
// SendAttack ;
5348: CALL 6123 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5352: LD_EXP 19
5356: PUSH
5357: LD_INT 6
5359: PUSH
5360: LD_INT 7
5362: PUSH
5363: LD_INT 8
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: LD_OWVAR 67
5375: ARRAY
5376: LESS
5377: IFFALSE 5324
// end ;
5379: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5380: LD_INT 0
5382: PPUSH
5383: PPUSH
5384: PPUSH
5385: PPUSH
5386: PPUSH
5387: PPUSH
5388: PPUSH
5389: PPUSH
// road := rand ( 1 , 2 ) ;
5390: LD_ADDR_VAR 0 4
5394: PUSH
5395: LD_INT 1
5397: PPUSH
5398: LD_INT 2
5400: PPUSH
5401: CALL_OW 12
5405: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5406: LD_ADDR_VAR 0 8
5410: PUSH
5411: LD_INT 3
5413: PUSH
5414: LD_INT 8
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_VAR 0 4
5425: ARRAY
5426: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5427: LD_ADDR_VAR 0 5
5431: PUSH
5432: LD_INT 35
5434: PUSH
5435: LD_INT 66
5437: PUSH
5438: LD_INT 1
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 101
5448: PUSH
5449: LD_INT 8
5451: PUSH
5452: LD_INT 4
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5464: LD_ADDR_VAR 0 6
5468: PUSH
5469: LD_INT 34
5471: PUSH
5472: LD_INT 67
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 38
5481: PUSH
5482: LD_INT 62
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 43
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 57
5501: PUSH
5502: LD_INT 57
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 77
5511: PUSH
5512: LD_INT 71
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 86
5521: PUSH
5522: LD_INT 60
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 89
5531: PUSH
5532: LD_INT 35
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 93
5541: PUSH
5542: LD_INT 17
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PUSH
5549: LD_INT 97
5551: PUSH
5552: LD_INT 10
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 103
5561: PUSH
5562: LD_INT 9
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: ST_TO_ADDR
// if road = 2 then
5581: LD_VAR 0 4
5585: PUSH
5586: LD_INT 2
5588: EQUAL
5589: IFFALSE 5606
// points := ReverseArray ( points ) ;
5591: LD_ADDR_VAR 0 6
5595: PUSH
5596: LD_VAR 0 6
5600: PPUSH
5601: CALL 973 0 1
5605: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: LD_INT 2
5614: PPUSH
5615: LD_INT 1
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: LD_INT 12
5623: PPUSH
5624: LD_INT 80
5626: PPUSH
5627: CALL 313 0 7
// veh := CreateVehicle ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 45
5640: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_VAR 0 5
5650: PUSH
5651: LD_VAR 0 4
5655: ARRAY
5656: PUSH
5657: LD_INT 3
5659: ARRAY
5660: PPUSH
5661: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: LD_VAR 0 5
5674: PUSH
5675: LD_VAR 0 4
5679: ARRAY
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 5
5689: PUSH
5690: LD_VAR 0 4
5694: ARRAY
5695: PUSH
5696: LD_INT 2
5698: ARRAY
5699: PPUSH
5700: LD_INT 0
5702: PPUSH
5703: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5707: LD_INT 0
5709: PPUSH
5710: LD_INT 1
5712: PPUSH
5713: LD_OWVAR 67
5717: PPUSH
5718: CALL_OW 380
// un := CreateHuman ;
5722: LD_ADDR_VAR 0 2
5726: PUSH
5727: CALL_OW 44
5731: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5732: LD_VAR 0 2
5736: PPUSH
5737: LD_VAR 0 3
5741: PPUSH
5742: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5746: LD_INT 60
5748: PUSH
5749: LD_INT 56
5751: PUSH
5752: LD_INT 52
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: PUSH
5760: LD_OWVAR 67
5764: ARRAY
5765: PPUSH
5766: CALL_OW 13
5770: PUSH
5771: LD_OWVAR 1
5775: PUSH
5776: LD_INT 30
5778: MOD
5779: PLUS
5780: PUSH
5781: LD_EXP 23
5785: PUSH
5786: LD_INT 4
5788: LESS
5789: OR
5790: IFFALSE 5807
// SetCargo ( veh , mat_cans , 100 ) ;
5792: LD_VAR 0 3
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_INT 100
5802: PPUSH
5803: CALL_OW 290
// for i := 2 to points do
5807: LD_ADDR_VAR 0 7
5811: PUSH
5812: DOUBLE
5813: LD_INT 2
5815: DEC
5816: ST_TO_ADDR
5817: LD_VAR 0 6
5821: PUSH
5822: FOR_TO
5823: IFFALSE 5866
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5825: LD_VAR 0 3
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_VAR 0 7
5839: ARRAY
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 6
5849: PUSH
5850: LD_VAR 0 7
5854: ARRAY
5855: PUSH
5856: LD_INT 2
5858: ARRAY
5859: PPUSH
5860: CALL_OW 171
5864: GO 5822
5866: POP
5867: POP
// convoyCounter := convoyCounter + 1 ;
5868: LD_ADDR_EXP 23
5872: PUSH
5873: LD_EXP 23
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5889: LD_VAR 0 3
5893: PPUSH
5894: CALL_OW 314
5898: NOT
5899: PUSH
5900: LD_VAR 0 3
5904: PPUSH
5905: CALL_OW 302
5909: AND
5910: IFFALSE 5951
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5912: LD_VAR 0 3
5916: PPUSH
5917: LD_VAR 0 6
5921: PUSH
5922: LD_VAR 0 6
5926: ARRAY
5927: PUSH
5928: LD_INT 1
5930: ARRAY
5931: PPUSH
5932: LD_VAR 0 6
5936: PUSH
5937: LD_VAR 0 6
5941: ARRAY
5942: PUSH
5943: LD_INT 2
5945: ARRAY
5946: PPUSH
5947: CALL_OW 111
// if not IsInUnit ( un ) then
5951: LD_VAR 0 2
5955: PPUSH
5956: CALL_OW 310
5960: NOT
5961: IFFALSE 6002
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5963: LD_VAR 0 2
5967: PPUSH
5968: LD_VAR 0 6
5972: PUSH
5973: LD_VAR 0 6
5977: ARRAY
5978: PUSH
5979: LD_INT 1
5981: ARRAY
5982: PPUSH
5983: LD_VAR 0 6
5987: PUSH
5988: LD_VAR 0 6
5992: ARRAY
5993: PUSH
5994: LD_INT 2
5996: ARRAY
5997: PPUSH
5998: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6002: LD_VAR 0 3
6006: PPUSH
6007: LD_VAR 0 8
6011: PPUSH
6012: CALL_OW 308
6016: PUSH
6017: LD_VAR 0 2
6021: PPUSH
6022: LD_VAR 0 8
6026: PPUSH
6027: CALL_OW 308
6031: OR
6032: IFFALSE 5882
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6034: LD_VAR 0 2
6038: PPUSH
6039: CALL_OW 302
6043: PUSH
6044: LD_VAR 0 3
6048: PPUSH
6049: CALL_OW 302
6053: NOT
6054: AND
6055: PUSH
6056: LD_VAR 0 2
6060: PPUSH
6061: LD_VAR 0 8
6065: PPUSH
6066: CALL_OW 308
6070: AND
6071: IFFALSE 6082
// RemoveUnit ( un ) ;
6073: LD_VAR 0 2
6077: PPUSH
6078: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6082: LD_VAR 0 3
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 308
6096: PUSH
6097: LD_VAR 0 3
6101: PPUSH
6102: CALL_OW 302
6106: AND
6107: IFFALSE 6118
// RemoveUnit ( veh ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: CALL_OW 64
// end ;
6118: LD_VAR 0 1
6122: RET
// export function SendAttack ; var un , veh , i ; begin
6123: LD_INT 0
6125: PPUSH
6126: PPUSH
6127: PPUSH
6128: PPUSH
// IncomingAttack ;
6129: CALL 14980 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6133: LD_INT 2100
6135: PPUSH
6136: LD_INT 3500
6138: PPUSH
6139: CALL_OW 12
6143: PPUSH
6144: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
6148: LD_ADDR_VAR 0 4
6152: PUSH
6153: DOUBLE
6154: LD_INT 1
6156: DEC
6157: ST_TO_ADDR
6158: LD_INT 3
6160: PUSH
6161: LD_INT 4
6163: PUSH
6164: LD_INT 4
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: LD_OWVAR 67
6176: ARRAY
6177: PUSH
6178: LD_EXP 19
6182: PUSH
6183: LD_INT 3
6185: DIV
6186: PLUS
6187: PUSH
6188: FOR_TO
6189: IFFALSE 6301
// begin uc_side := 1 ;
6191: LD_ADDR_OWVAR 20
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// uc_nation := 1 ;
6199: LD_ADDR_OWVAR 21
6203: PUSH
6204: LD_INT 1
6206: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6207: LD_INT 0
6209: PPUSH
6210: LD_INT 1
6212: PPUSH
6213: LD_INT 2
6215: PUSH
6216: LD_INT 3
6218: PUSH
6219: LD_INT 4
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: LIST
6226: PUSH
6227: LD_OWVAR 67
6231: ARRAY
6232: PPUSH
6233: CALL_OW 380
// un := CreateHuman ;
6237: LD_ADDR_VAR 0 2
6241: PUSH
6242: CALL_OW 44
6246: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6247: LD_VAR 0 2
6251: PPUSH
6252: LD_INT 37
6254: PPUSH
6255: LD_INT 70
6257: PPUSH
6258: LD_INT 3
6260: PPUSH
6261: LD_INT 0
6263: PPUSH
6264: CALL_OW 50
// usAttackers := usAttackers union un ;
6268: LD_ADDR_EXP 47
6272: PUSH
6273: LD_EXP 47
6277: PUSH
6278: LD_VAR 0 2
6282: UNION
6283: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6284: LD_VAR 0 2
6288: PPUSH
6289: LD_INT 40
6291: PPUSH
6292: LD_INT 65
6294: PPUSH
6295: CALL_OW 111
// end ;
6299: GO 6188
6301: POP
6302: POP
// uc_side := 1 ;
6303: LD_ADDR_OWVAR 20
6307: PUSH
6308: LD_INT 1
6310: ST_TO_ADDR
// uc_nation := 1 ;
6311: LD_ADDR_OWVAR 21
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6319: LD_INT 0
6321: PPUSH
6322: LD_INT 4
6324: PPUSH
6325: LD_INT 2
6327: PPUSH
6328: CALL_OW 380
// un := CreateHuman ;
6332: LD_ADDR_VAR 0 2
6336: PUSH
6337: CALL_OW 44
6341: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6342: LD_VAR 0 2
6346: PPUSH
6347: LD_INT 37
6349: PPUSH
6350: LD_INT 70
6352: PPUSH
6353: LD_INT 3
6355: PPUSH
6356: LD_INT 0
6358: PPUSH
6359: CALL_OW 50
// usAttackers := usAttackers union un ;
6363: LD_ADDR_EXP 47
6367: PUSH
6368: LD_EXP 47
6372: PUSH
6373: LD_VAR 0 2
6377: UNION
6378: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6379: LD_VAR 0 2
6383: PPUSH
6384: LD_INT 40
6386: PPUSH
6387: LD_INT 65
6389: PPUSH
6390: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6394: LD_ADDR_VAR 0 4
6398: PUSH
6399: DOUBLE
6400: LD_INT 1
6402: DEC
6403: ST_TO_ADDR
6404: LD_OWVAR 67
6408: PUSH
6409: LD_EXP 19
6413: PUSH
6414: LD_INT 4
6416: DIV
6417: PLUS
6418: PUSH
6419: FOR_TO
6420: IFFALSE 6593
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6422: LD_ADDR_VAR 0 3
6426: PUSH
6427: LD_INT 1
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 2
6435: PPUSH
6436: LD_INT 1
6438: PPUSH
6439: LD_INT 1
6441: PPUSH
6442: LD_INT 4
6444: PUSH
6445: LD_INT 3
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: PUSH
6456: LD_INT 1
6458: PPUSH
6459: LD_INT 3
6461: PPUSH
6462: CALL_OW 12
6466: ARRAY
6467: PPUSH
6468: LD_INT 90
6470: PPUSH
6471: CALL 313 0 7
6475: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6476: LD_VAR 0 3
6480: PPUSH
6481: LD_INT 35
6483: PPUSH
6484: LD_INT 65
6486: PPUSH
6487: LD_INT 0
6489: PPUSH
6490: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6494: LD_INT 0
6496: PPUSH
6497: LD_INT 3
6499: PPUSH
6500: LD_OWVAR 67
6504: PUSH
6505: LD_INT 1
6507: PLUS
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 2
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6523: LD_VAR 0 2
6527: PPUSH
6528: LD_VAR 0 3
6532: PPUSH
6533: CALL_OW 52
// usAttackers := usAttackers union un ;
6537: LD_ADDR_EXP 47
6541: PUSH
6542: LD_EXP 47
6546: PUSH
6547: LD_VAR 0 2
6551: UNION
6552: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6553: LD_VAR 0 3
6557: PPUSH
6558: LD_INT 39
6560: PPUSH
6561: LD_INT 60
6563: PPUSH
6564: CALL_OW 111
// wait ( 0 0$3 ) ;
6568: LD_INT 105
6570: PPUSH
6571: CALL_OW 67
// usAttackers := usAttackers union veh ;
6575: LD_ADDR_EXP 47
6579: PUSH
6580: LD_EXP 47
6584: PUSH
6585: LD_VAR 0 3
6589: UNION
6590: ST_TO_ADDR
// end ;
6591: GO 6419
6593: POP
6594: POP
// attackWave := attackWave + 1 ;
6595: LD_ADDR_EXP 19
6599: PUSH
6600: LD_EXP 19
6604: PUSH
6605: LD_INT 1
6607: PLUS
6608: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6609: LD_EXP 24
6613: PPUSH
6614: CALL_OW 427
// end ;
6618: LD_VAR 0 1
6622: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6623: LD_INT 0
6625: PPUSH
6626: PPUSH
6627: PPUSH
6628: PPUSH
6629: PPUSH
6630: PPUSH
6631: PPUSH
6632: PPUSH
6633: PPUSH
6634: PPUSH
6635: PPUSH
// if retreatAllowed then
6636: LD_EXP 11
6640: IFFALSE 6652
// strategy := 2 else
6642: LD_ADDR_VAR 0 5
6646: PUSH
6647: LD_INT 2
6649: ST_TO_ADDR
6650: GO 6668
// strategy := rand ( 0 , 2 ) ;
6652: LD_ADDR_VAR 0 5
6656: PUSH
6657: LD_INT 0
6659: PPUSH
6660: LD_INT 2
6662: PPUSH
6663: CALL_OW 12
6667: ST_TO_ADDR
// attackFormula := [ ] ;
6668: LD_ADDR_VAR 0 6
6672: PUSH
6673: EMPTY
6674: ST_TO_ADDR
// case strategy of 0 :
6675: LD_VAR 0 5
6679: PUSH
6680: LD_INT 0
6682: DOUBLE
6683: EQUAL
6684: IFTRUE 6688
6686: GO 7018
6688: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6689: LD_INT 11
6691: PPUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 30
6704: PUSH
6705: LD_INT 4
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PPUSH
6716: CALL_OW 70
6720: NOT
6721: IFFALSE 6793
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6723: LD_ADDR_VAR 0 6
6727: PUSH
6728: LD_INT 41
6730: PUSH
6731: LD_INT 34
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PUSH
6738: EMPTY
6739: LIST
6740: PUSH
6741: LD_INT 53
6743: PUSH
6744: LD_INT 62
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 37
6753: PUSH
6754: LD_INT 63
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 44
6763: PUSH
6764: LD_INT 45
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 37
6773: PUSH
6774: LD_INT 28
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: ST_TO_ADDR
6791: GO 7016
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6793: LD_INT 12
6795: PPUSH
6796: LD_INT 22
6798: PUSH
6799: LD_INT 2
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 2
6808: PUSH
6809: LD_INT 30
6811: PUSH
6812: LD_INT 4
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: LD_INT 30
6821: PUSH
6822: LD_INT 31
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 30
6831: PUSH
6832: LD_INT 32
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PPUSH
6849: CALL_OW 70
6853: NOT
6854: IFFALSE 6937
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6856: LD_ADDR_VAR 0 6
6860: PUSH
6861: LD_INT 27
6863: PUSH
6864: LD_INT 42
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 27
6873: PUSH
6874: LD_INT 32
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 53
6887: PUSH
6888: LD_INT 62
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 37
6897: PUSH
6898: LD_INT 63
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 44
6907: PUSH
6908: LD_INT 45
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 37
6917: PUSH
6918: LD_INT 28
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: ST_TO_ADDR
6935: GO 7016
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
6937: LD_ADDR_VAR 0 6
6941: PUSH
6942: LD_INT 71
6944: PUSH
6945: LD_INT 67
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 54
6954: PUSH
6955: LD_INT 35
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 63
6968: PUSH
6969: LD_INT 40
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 37
6978: PUSH
6979: LD_INT 63
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 44
6988: PUSH
6989: LD_INT 45
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 37
6998: PUSH
6999: LD_INT 28
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: ST_TO_ADDR
// end ; 1 :
7016: GO 7221
7018: LD_INT 1
7020: DOUBLE
7021: EQUAL
7022: IFTRUE 7026
7024: GO 7130
7026: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7027: LD_ADDR_VAR 0 6
7031: PUSH
7032: LD_INT 71
7034: PUSH
7035: LD_INT 67
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 82
7044: PUSH
7045: LD_INT 23
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 53
7054: PUSH
7055: LD_INT 7
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 43
7064: PUSH
7065: LD_INT 10
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 53
7080: PUSH
7081: LD_INT 62
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 37
7090: PUSH
7091: LD_INT 63
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 44
7100: PUSH
7101: LD_INT 45
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: LD_INT 37
7110: PUSH
7111: LD_INT 28
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: ST_TO_ADDR
7128: GO 7221
7130: LD_INT 2
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7220
7138: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7139: LD_ADDR_VAR 0 6
7143: PUSH
7144: LD_INT 90
7146: PUSH
7147: LD_INT 59
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PUSH
7154: LD_INT 108
7156: PUSH
7157: LD_INT 64
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 82
7170: PUSH
7171: LD_INT 75
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 73
7180: PUSH
7181: LD_INT 67
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 101
7190: PUSH
7191: LD_INT 65
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 108
7200: PUSH
7201: LD_INT 62
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: ST_TO_ADDR
7218: GO 7221
7220: POP
// if not attackFormula then
7221: LD_VAR 0 6
7225: NOT
7226: IFFALSE 7230
// exit ;
7228: GO 8908
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7230: LD_ADDR_VAR 0 7
7234: PUSH
7235: LD_EXP 47
7239: PPUSH
7240: LD_INT 25
7242: PUSH
7243: LD_INT 1
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PPUSH
7250: CALL_OW 72
7254: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7255: LD_ADDR_VAR 0 8
7259: PUSH
7260: LD_EXP 47
7264: PPUSH
7265: LD_INT 25
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PPUSH
7275: CALL_OW 72
7279: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7280: LD_ADDR_VAR 0 9
7284: PUSH
7285: LD_EXP 47
7289: PPUSH
7290: LD_INT 25
7292: PUSH
7293: LD_INT 3
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PPUSH
7300: CALL_OW 72
7304: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7305: LD_ADDR_VAR 0 10
7309: PUSH
7310: LD_EXP 47
7314: PPUSH
7315: LD_INT 21
7317: PUSH
7318: LD_INT 2
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PPUSH
7325: CALL_OW 72
7329: ST_TO_ADDR
// if sci then
7330: LD_VAR 0 8
7334: IFFALSE 7371
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7336: LD_VAR 0 8
7340: PPUSH
7341: LD_VAR 0 6
7345: PUSH
7346: LD_INT 2
7348: ARRAY
7349: PUSH
7350: LD_INT 1
7352: ARRAY
7353: PPUSH
7354: LD_VAR 0 6
7358: PUSH
7359: LD_INT 2
7361: ARRAY
7362: PUSH
7363: LD_INT 2
7365: ARRAY
7366: PPUSH
7367: CALL_OW 111
// repeat wait ( 10 ) ;
7371: LD_INT 10
7373: PPUSH
7374: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7378: LD_ADDR_VAR 0 7
7382: PUSH
7383: LD_EXP 47
7387: PPUSH
7388: LD_INT 25
7390: PUSH
7391: LD_INT 1
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PPUSH
7398: CALL_OW 72
7402: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7403: LD_ADDR_VAR 0 8
7407: PUSH
7408: LD_EXP 47
7412: PPUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PPUSH
7423: CALL_OW 72
7427: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7428: LD_ADDR_VAR 0 9
7432: PUSH
7433: LD_EXP 47
7437: PPUSH
7438: LD_INT 25
7440: PUSH
7441: LD_INT 3
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PPUSH
7448: CALL_OW 72
7452: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7453: LD_ADDR_VAR 0 10
7457: PUSH
7458: LD_EXP 47
7462: PPUSH
7463: LD_INT 21
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 72
7477: ST_TO_ADDR
// if sol then
7478: LD_VAR 0 7
7482: IFFALSE 7903
// begin for i in sol do
7484: LD_ADDR_VAR 0 2
7488: PUSH
7489: LD_VAR 0 7
7493: PUSH
7494: FOR_IN
7495: IFFALSE 7901
// begin tag := GetTag ( i ) ;
7497: LD_ADDR_VAR 0 4
7501: PUSH
7502: LD_VAR 0 2
7506: PPUSH
7507: CALL_OW 110
7511: ST_TO_ADDR
// if not tag then
7512: LD_VAR 0 4
7516: NOT
7517: IFFALSE 7626
// begin if GetLives ( i ) = 1000 then
7519: LD_VAR 0 2
7523: PPUSH
7524: CALL_OW 256
7528: PUSH
7529: LD_INT 1000
7531: EQUAL
7532: IFFALSE 7548
// SetTag ( i , 1 ) else
7534: LD_VAR 0 2
7538: PPUSH
7539: LD_INT 1
7541: PPUSH
7542: CALL_OW 109
7546: GO 7624
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7548: LD_VAR 0 2
7552: PPUSH
7553: LD_VAR 0 6
7557: PUSH
7558: LD_INT 2
7560: ARRAY
7561: PUSH
7562: LD_INT 1
7564: ARRAY
7565: PPUSH
7566: LD_VAR 0 6
7570: PUSH
7571: LD_INT 2
7573: ARRAY
7574: PUSH
7575: LD_INT 2
7577: ARRAY
7578: PPUSH
7579: CALL_OW 297
7583: PUSH
7584: LD_INT 10
7586: GREATER
7587: IFFALSE 7624
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7589: LD_VAR 0 2
7593: PPUSH
7594: LD_VAR 0 6
7598: PUSH
7599: LD_INT 2
7601: ARRAY
7602: PUSH
7603: LD_INT 1
7605: ARRAY
7606: PPUSH
7607: LD_VAR 0 6
7611: PUSH
7612: LD_INT 2
7614: ARRAY
7615: PUSH
7616: LD_INT 2
7618: ARRAY
7619: PPUSH
7620: CALL_OW 111
// end else
7624: GO 7899
// begin if GetLives ( i ) < 760 then
7626: LD_VAR 0 2
7630: PPUSH
7631: CALL_OW 256
7635: PUSH
7636: LD_INT 760
7638: LESS
7639: IFFALSE 7690
// begin SetTag ( i , 0 ) ;
7641: LD_VAR 0 2
7645: PPUSH
7646: LD_INT 0
7648: PPUSH
7649: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7653: LD_VAR 0 2
7657: PPUSH
7658: LD_VAR 0 6
7662: PUSH
7663: LD_INT 2
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_VAR 0 6
7675: PUSH
7676: LD_INT 2
7678: ARRAY
7679: PUSH
7680: LD_INT 2
7682: ARRAY
7683: PPUSH
7684: CALL_OW 111
// end else
7688: GO 7899
// if tag <= attackFormula [ 1 ] then
7690: LD_VAR 0 4
7694: PUSH
7695: LD_VAR 0 6
7699: PUSH
7700: LD_INT 1
7702: ARRAY
7703: LESSEQUAL
7704: IFFALSE 7865
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7706: LD_VAR 0 2
7710: PPUSH
7711: LD_VAR 0 6
7715: PUSH
7716: LD_INT 1
7718: ARRAY
7719: PUSH
7720: LD_VAR 0 4
7724: ARRAY
7725: PUSH
7726: LD_INT 1
7728: ARRAY
7729: PPUSH
7730: LD_VAR 0 6
7734: PUSH
7735: LD_INT 1
7737: ARRAY
7738: PUSH
7739: LD_VAR 0 4
7743: ARRAY
7744: PUSH
7745: LD_INT 2
7747: ARRAY
7748: PPUSH
7749: CALL_OW 297
7753: PUSH
7754: LD_INT 6
7756: GREATER
7757: IFFALSE 7808
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7759: LD_VAR 0 2
7763: PPUSH
7764: LD_VAR 0 6
7768: PUSH
7769: LD_INT 1
7771: ARRAY
7772: PUSH
7773: LD_VAR 0 4
7777: ARRAY
7778: PUSH
7779: LD_INT 1
7781: ARRAY
7782: PPUSH
7783: LD_VAR 0 6
7787: PUSH
7788: LD_INT 1
7790: ARRAY
7791: PUSH
7792: LD_VAR 0 4
7796: ARRAY
7797: PUSH
7798: LD_INT 2
7800: ARRAY
7801: PPUSH
7802: CALL_OW 114
7806: GO 7863
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7808: LD_INT 81
7810: PUSH
7811: LD_INT 1
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 91
7820: PUSH
7821: LD_VAR 0 2
7825: PUSH
7826: LD_INT 10
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PPUSH
7838: CALL_OW 69
7842: NOT
7843: IFFALSE 7863
// SetTag ( i , tag + 1 ) ;
7845: LD_VAR 0 2
7849: PPUSH
7850: LD_VAR 0 4
7854: PUSH
7855: LD_INT 1
7857: PLUS
7858: PPUSH
7859: CALL_OW 109
// end else
7863: GO 7899
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7865: LD_VAR 0 2
7869: PPUSH
7870: LD_INT 81
7872: PUSH
7873: LD_INT 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PPUSH
7880: CALL_OW 69
7884: PPUSH
7885: LD_VAR 0 2
7889: PPUSH
7890: CALL_OW 74
7894: PPUSH
7895: CALL_OW 115
// end ; end ;
7899: GO 7494
7901: POP
7902: POP
// end ; if sci then
7903: LD_VAR 0 8
7907: IFFALSE 8176
// begin if not sol and not mech then
7909: LD_VAR 0 7
7913: NOT
7914: PUSH
7915: LD_VAR 0 9
7919: NOT
7920: AND
7921: IFFALSE 7973
// begin for i in sci do
7923: LD_ADDR_VAR 0 2
7927: PUSH
7928: LD_VAR 0 8
7932: PUSH
7933: FOR_IN
7934: IFFALSE 7969
// begin usForces := usForces union i ;
7936: LD_ADDR_EXP 44
7940: PUSH
7941: LD_EXP 44
7945: PUSH
7946: LD_VAR 0 2
7950: UNION
7951: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
7952: LD_VAR 0 2
7956: PPUSH
7957: LD_INT 34
7959: PPUSH
7960: LD_INT 68
7962: PPUSH
7963: CALL_OW 111
// end ;
7967: GO 7933
7969: POP
7970: POP
// end else
7971: GO 8176
// for i in sci do
7973: LD_ADDR_VAR 0 2
7977: PUSH
7978: LD_VAR 0 8
7982: PUSH
7983: FOR_IN
7984: IFFALSE 8174
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7986: LD_VAR 0 2
7990: PPUSH
7991: LD_VAR 0 6
7995: PUSH
7996: LD_INT 2
7998: ARRAY
7999: PUSH
8000: LD_INT 1
8002: ARRAY
8003: PPUSH
8004: LD_VAR 0 6
8008: PUSH
8009: LD_INT 2
8011: ARRAY
8012: PUSH
8013: LD_INT 2
8015: ARRAY
8016: PPUSH
8017: CALL_OW 297
8021: PUSH
8022: LD_INT 10
8024: GREATER
8025: IFFALSE 8064
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8027: LD_VAR 0 2
8031: PPUSH
8032: LD_VAR 0 6
8036: PUSH
8037: LD_INT 2
8039: ARRAY
8040: PUSH
8041: LD_INT 1
8043: ARRAY
8044: PPUSH
8045: LD_VAR 0 6
8049: PUSH
8050: LD_INT 2
8052: ARRAY
8053: PUSH
8054: LD_INT 2
8056: ARRAY
8057: PPUSH
8058: CALL_OW 111
8062: GO 8172
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8064: LD_VAR 0 7
8068: PPUSH
8069: LD_INT 3
8071: PUSH
8072: LD_INT 24
8074: PUSH
8075: LD_INT 1000
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 91
8088: PUSH
8089: LD_VAR 0 2
8093: PUSH
8094: LD_INT 10
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 72
8110: IFFALSE 8172
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8112: LD_VAR 0 2
8116: PPUSH
8117: LD_VAR 0 7
8121: PPUSH
8122: LD_INT 3
8124: PUSH
8125: LD_INT 24
8127: PUSH
8128: LD_INT 1000
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: LD_INT 91
8141: PUSH
8142: LD_VAR 0 2
8146: PUSH
8147: LD_INT 10
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PPUSH
8159: CALL_OW 72
8163: PUSH
8164: LD_INT 1
8166: ARRAY
8167: PPUSH
8168: CALL_OW 128
8172: GO 7983
8174: POP
8175: POP
// end ; if mech then
8176: LD_VAR 0 9
8180: IFFALSE 8890
// begin for i in mech do
8182: LD_ADDR_VAR 0 2
8186: PUSH
8187: LD_VAR 0 9
8191: PUSH
8192: FOR_IN
8193: IFFALSE 8888
// begin tag := GetTag ( i ) ;
8195: LD_ADDR_VAR 0 4
8199: PUSH
8200: LD_VAR 0 2
8204: PPUSH
8205: CALL_OW 110
8209: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8210: LD_ADDR_VAR 0 11
8214: PUSH
8215: LD_VAR 0 2
8219: PPUSH
8220: CALL_OW 310
8224: ST_TO_ADDR
// if not tag then
8225: LD_VAR 0 4
8229: NOT
8230: IFFALSE 8601
// begin if veh then
8232: LD_VAR 0 11
8236: IFFALSE 8407
// begin if GetLives ( veh ) = 1000 then
8238: LD_VAR 0 11
8242: PPUSH
8243: CALL_OW 256
8247: PUSH
8248: LD_INT 1000
8250: EQUAL
8251: IFFALSE 8267
// SetTag ( i , 1 ) else
8253: LD_VAR 0 2
8257: PPUSH
8258: LD_INT 1
8260: PPUSH
8261: CALL_OW 109
8265: GO 8405
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_VAR 0 6
8276: PUSH
8277: LD_INT 3
8279: ARRAY
8280: PUSH
8281: LD_INT 1
8283: ARRAY
8284: PPUSH
8285: LD_VAR 0 6
8289: PUSH
8290: LD_INT 3
8292: ARRAY
8293: PUSH
8294: LD_INT 2
8296: ARRAY
8297: PPUSH
8298: CALL_OW 297
8302: PUSH
8303: LD_INT 7
8305: GREATER
8306: IFFALSE 8345
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8308: LD_VAR 0 11
8312: PPUSH
8313: LD_VAR 0 6
8317: PUSH
8318: LD_INT 3
8320: ARRAY
8321: PUSH
8322: LD_INT 1
8324: ARRAY
8325: PPUSH
8326: LD_VAR 0 6
8330: PUSH
8331: LD_INT 3
8333: ARRAY
8334: PUSH
8335: LD_INT 2
8337: ARRAY
8338: PPUSH
8339: CALL_OW 111
8343: GO 8405
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8345: LD_INT 81
8347: PUSH
8348: LD_INT 1
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 91
8357: PUSH
8358: LD_VAR 0 2
8362: PUSH
8363: LD_INT 10
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PPUSH
8375: CALL_OW 69
8379: NOT
8380: IFFALSE 8405
// begin ComExitVehicle ( i ) ;
8382: LD_VAR 0 2
8386: PPUSH
8387: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8391: LD_VAR 0 2
8395: PPUSH
8396: LD_VAR 0 11
8400: PPUSH
8401: CALL_OW 189
// end ; end else
8405: GO 8599
// if GetLives ( i ) < 400 then
8407: LD_VAR 0 2
8411: PPUSH
8412: CALL_OW 256
8416: PUSH
8417: LD_INT 400
8419: LESS
8420: IFFALSE 8471
// begin usAttackers := usAttackers diff i ;
8422: LD_ADDR_EXP 47
8426: PUSH
8427: LD_EXP 47
8431: PUSH
8432: LD_VAR 0 2
8436: DIFF
8437: ST_TO_ADDR
// usForces := usForces union i ;
8438: LD_ADDR_EXP 44
8442: PUSH
8443: LD_EXP 44
8447: PUSH
8448: LD_VAR 0 2
8452: UNION
8453: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8454: LD_VAR 0 2
8458: PPUSH
8459: LD_INT 34
8461: PPUSH
8462: LD_INT 68
8464: PPUSH
8465: CALL_OW 111
// end else
8469: GO 8599
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8471: LD_VAR 0 10
8475: PPUSH
8476: LD_INT 58
8478: PUSH
8479: EMPTY
8480: LIST
8481: PUSH
8482: LD_INT 24
8484: PUSH
8485: LD_INT 1000
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PPUSH
8496: CALL_OW 72
8500: PUSH
8501: LD_VAR 0 2
8505: PPUSH
8506: CALL_OW 314
8510: NOT
8511: AND
8512: PUSH
8513: LD_INT 81
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 91
8525: PUSH
8526: LD_VAR 0 2
8530: PUSH
8531: LD_INT 9
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: LIST
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PPUSH
8543: CALL_OW 69
8547: OR
8548: IFFALSE 8599
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8550: LD_VAR 0 2
8554: PPUSH
8555: LD_VAR 0 10
8559: PPUSH
8560: LD_INT 58
8562: PUSH
8563: EMPTY
8564: LIST
8565: PUSH
8566: LD_INT 24
8568: PUSH
8569: LD_INT 250
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PPUSH
8580: CALL_OW 72
8584: PPUSH
8585: LD_VAR 0 2
8589: PPUSH
8590: CALL_OW 74
8594: PPUSH
8595: CALL_OW 120
// end else
8599: GO 8886
// begin if veh and GetLives ( veh ) < 760 then
8601: LD_VAR 0 11
8605: PUSH
8606: LD_VAR 0 11
8610: PPUSH
8611: CALL_OW 256
8615: PUSH
8616: LD_INT 760
8618: LESS
8619: AND
8620: IFFALSE 8671
// begin SetTag ( i , 0 ) ;
8622: LD_VAR 0 2
8626: PPUSH
8627: LD_INT 0
8629: PPUSH
8630: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8634: LD_VAR 0 11
8638: PPUSH
8639: LD_VAR 0 6
8643: PUSH
8644: LD_INT 3
8646: ARRAY
8647: PUSH
8648: LD_INT 1
8650: ARRAY
8651: PPUSH
8652: LD_VAR 0 6
8656: PUSH
8657: LD_INT 3
8659: ARRAY
8660: PUSH
8661: LD_INT 2
8663: ARRAY
8664: PPUSH
8665: CALL_OW 111
// end else
8669: GO 8886
// if veh then
8671: LD_VAR 0 11
8675: IFFALSE 8886
// if tag <= attackFormula [ 4 ] then
8677: LD_VAR 0 4
8681: PUSH
8682: LD_VAR 0 6
8686: PUSH
8687: LD_INT 4
8689: ARRAY
8690: LESSEQUAL
8691: IFFALSE 8852
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8693: LD_VAR 0 11
8697: PPUSH
8698: LD_VAR 0 6
8702: PUSH
8703: LD_INT 4
8705: ARRAY
8706: PUSH
8707: LD_VAR 0 4
8711: ARRAY
8712: PUSH
8713: LD_INT 1
8715: ARRAY
8716: PPUSH
8717: LD_VAR 0 6
8721: PUSH
8722: LD_INT 4
8724: ARRAY
8725: PUSH
8726: LD_VAR 0 4
8730: ARRAY
8731: PUSH
8732: LD_INT 2
8734: ARRAY
8735: PPUSH
8736: CALL_OW 297
8740: PUSH
8741: LD_INT 6
8743: GREATER
8744: IFFALSE 8795
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8746: LD_VAR 0 11
8750: PPUSH
8751: LD_VAR 0 6
8755: PUSH
8756: LD_INT 4
8758: ARRAY
8759: PUSH
8760: LD_VAR 0 4
8764: ARRAY
8765: PUSH
8766: LD_INT 1
8768: ARRAY
8769: PPUSH
8770: LD_VAR 0 6
8774: PUSH
8775: LD_INT 4
8777: ARRAY
8778: PUSH
8779: LD_VAR 0 4
8783: ARRAY
8784: PUSH
8785: LD_INT 2
8787: ARRAY
8788: PPUSH
8789: CALL_OW 114
8793: GO 8850
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8795: LD_INT 81
8797: PUSH
8798: LD_INT 1
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: LD_INT 91
8807: PUSH
8808: LD_VAR 0 11
8812: PUSH
8813: LD_INT 10
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PPUSH
8825: CALL_OW 69
8829: NOT
8830: IFFALSE 8850
// SetTag ( i , tag + 1 ) ;
8832: LD_VAR 0 2
8836: PPUSH
8837: LD_VAR 0 4
8841: PUSH
8842: LD_INT 1
8844: PLUS
8845: PPUSH
8846: CALL_OW 109
// end else
8850: GO 8886
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8852: LD_VAR 0 11
8856: PPUSH
8857: LD_INT 81
8859: PUSH
8860: LD_INT 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PPUSH
8867: CALL_OW 69
8871: PPUSH
8872: LD_VAR 0 2
8876: PPUSH
8877: CALL_OW 74
8881: PPUSH
8882: CALL_OW 115
// end ; end ;
8886: GO 8192
8888: POP
8889: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8890: LD_EXP 47
8894: PPUSH
8895: LD_INT 52
8897: PUSH
8898: EMPTY
8899: LIST
8900: PPUSH
8901: CALL_OW 72
8905: NOT
8906: IFFALSE 7371
// end ;
8908: LD_VAR 0 1
8912: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8913: LD_INT 22
8915: PUSH
8916: LD_INT 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 32
8925: PUSH
8926: LD_INT 1
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PPUSH
8937: CALL_OW 69
8941: IFFALSE 9018
8943: GO 8945
8945: DISABLE
8946: LD_INT 0
8948: PPUSH
// begin enable ;
8949: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
8950: LD_ADDR_VAR 0 1
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: LD_INT 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 32
8967: PUSH
8968: LD_INT 1
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PPUSH
8979: CALL_OW 69
8983: PUSH
8984: FOR_IN
8985: IFFALSE 9016
// if GetFuel ( i ) < 10 then
8987: LD_VAR 0 1
8991: PPUSH
8992: CALL_OW 261
8996: PUSH
8997: LD_INT 10
8999: LESS
9000: IFFALSE 9014
// SetFuel ( i , 10 ) ;
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_INT 10
9009: PPUSH
9010: CALL_OW 240
9014: GO 8984
9016: POP
9017: POP
// end ; end_of_file
9018: PPOPN 1
9020: END
// export function Action ; var hasAll , i , tmp ; begin
9021: LD_INT 0
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: LD_INT 22
9034: PUSH
9035: LD_INT 2
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 21
9044: PUSH
9045: LD_INT 1
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: LD_INT 23
9054: PUSH
9055: LD_INT 2
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: LIST
9066: PPUSH
9067: CALL_OW 69
9071: PUSH
9072: LD_INT 7
9074: GREATEREQUAL
9075: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9076: LD_VAR 0 2
9080: PPUSH
9081: LD_STRING 03_HasAll
9083: PPUSH
9084: CALL_OW 39
// Video ( true ) ;
9088: LD_INT 1
9090: PPUSH
9091: CALL 72732 0 1
// CenterNowOnUnits ( Heike ) ;
9095: LD_EXP 28
9099: PPUSH
9100: CALL_OW 87
// wait ( 0 0$2 ) ;
9104: LD_INT 70
9106: PPUSH
9107: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9111: LD_EXP 36
9115: PPUSH
9116: LD_STRING DF-1-start
9118: PPUSH
9119: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9123: LD_EXP 28
9127: PPUSH
9128: LD_EXP 36
9132: PPUSH
9133: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9137: LD_EXP 28
9141: PPUSH
9142: LD_STRING DH-1-start
9144: PPUSH
9145: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9149: LD_EXP 37
9153: PPUSH
9154: LD_INT 92
9156: PPUSH
9157: LD_INT 21
9159: PPUSH
9160: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9164: LD_EXP 32
9168: PPUSH
9169: LD_INT 94
9171: PPUSH
9172: LD_INT 23
9174: PPUSH
9175: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9179: LD_EXP 40
9183: PUSH
9184: LD_INT 1
9186: ARRAY
9187: PPUSH
9188: LD_INT 90
9190: PPUSH
9191: LD_INT 23
9193: PPUSH
9194: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9198: LD_EXP 40
9202: PUSH
9203: LD_INT 2
9205: ARRAY
9206: PPUSH
9207: LD_INT 93
9209: PPUSH
9210: LD_INT 25
9212: PPUSH
9213: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9217: LD_EXP 40
9221: PPUSH
9222: LD_EXP 37
9226: PPUSH
9227: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9231: LD_EXP 37
9235: PUSH
9236: LD_EXP 32
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PPUSH
9245: LD_EXP 28
9249: PPUSH
9250: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9254: LD_EXP 28
9258: PPUSH
9259: LD_EXP 37
9263: PPUSH
9264: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9268: LD_INT 35
9270: PPUSH
9271: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9275: LD_EXP 37
9279: PPUSH
9280: LD_INT 92
9282: PPUSH
9283: LD_INT 21
9285: PPUSH
9286: CALL_OW 307
9290: IFFALSE 9268
// Say ( Omar , DO-1-start ) ;
9292: LD_EXP 37
9296: PPUSH
9297: LD_STRING DO-1-start
9299: PPUSH
9300: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9304: LD_EXP 28
9308: PPUSH
9309: LD_STRING DH-2-start
9311: PPUSH
9312: CALL_OW 88
// if hasAll then
9316: LD_VAR 0 2
9320: IFFALSE 9448
// begin Say ( Omar , DO-2-start ) ;
9322: LD_EXP 37
9326: PPUSH
9327: LD_STRING DO-2-start
9329: PPUSH
9330: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9334: LD_EXP 37
9338: PPUSH
9339: LD_STRING DO-3-start
9341: PPUSH
9342: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9346: LD_EXP 28
9350: PPUSH
9351: LD_STRING DH-3-start
9353: PPUSH
9354: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9358: LD_EXP 36
9362: PPUSH
9363: LD_STRING DF-2-start
9365: PPUSH
9366: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9370: LD_EXP 37
9374: PPUSH
9375: LD_EXP 36
9379: PPUSH
9380: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9384: LD_EXP 37
9388: PPUSH
9389: LD_STRING DO-4-start
9391: PPUSH
9392: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9396: LD_EXP 36
9400: PPUSH
9401: LD_STRING DF-3-start
9403: PPUSH
9404: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9408: LD_EXP 37
9412: PPUSH
9413: LD_STRING DO-5-start
9415: PPUSH
9416: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9420: LD_EXP 36
9424: PPUSH
9425: LD_STRING DF-4-start
9427: PPUSH
9428: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9432: LD_EXP 37
9436: PPUSH
9437: LD_EXP 28
9441: PPUSH
9442: CALL_OW 119
// end else
9446: GO 9548
// begin Say ( Omar , DO-2-start-a ) ;
9448: LD_EXP 37
9452: PPUSH
9453: LD_STRING DO-2-start-a
9455: PPUSH
9456: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9460: LD_EXP 37
9464: PPUSH
9465: LD_STRING DO-3-start-a
9467: PPUSH
9468: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9472: LD_EXP 28
9476: PPUSH
9477: LD_STRING DH-3-start-a
9479: PPUSH
9480: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9484: LD_EXP 36
9488: PPUSH
9489: LD_STRING DF-2-start-a
9491: PPUSH
9492: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9496: LD_EXP 37
9500: PPUSH
9501: LD_EXP 36
9505: PPUSH
9506: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9510: LD_EXP 37
9514: PPUSH
9515: LD_STRING DO-4-start-a
9517: PPUSH
9518: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9522: LD_EXP 36
9526: PPUSH
9527: LD_STRING DF-3-start-a
9529: PPUSH
9530: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9534: LD_EXP 37
9538: PPUSH
9539: LD_EXP 28
9543: PPUSH
9544: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9548: LD_INT 10
9550: PPUSH
9551: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9555: LD_EXP 37
9559: PPUSH
9560: LD_STRING DO-1-mission
9562: PPUSH
9563: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9567: LD_EXP 37
9571: PPUSH
9572: LD_STRING DO-2-mission
9574: PPUSH
9575: CALL_OW 88
// if not hasAll then
9579: LD_VAR 0 2
9583: NOT
9584: IFFALSE 9598
// Say ( Omar , DO-3-mission ) ;
9586: LD_EXP 37
9590: PPUSH
9591: LD_STRING DO-3-mission
9593: PPUSH
9594: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9598: LD_EXP 37
9602: PPUSH
9603: LD_STRING DO-4-mission
9605: PPUSH
9606: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9610: LD_EXP 28
9614: PPUSH
9615: LD_STRING DH-1-mission
9617: PPUSH
9618: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9622: LD_EXP 36
9626: PPUSH
9627: LD_STRING DF-1-mission
9629: PPUSH
9630: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9634: LD_EXP 37
9638: PPUSH
9639: LD_STRING DO-5-mission
9641: PPUSH
9642: CALL_OW 88
// if not hasAll then
9646: LD_VAR 0 2
9650: NOT
9651: IFFALSE 9786
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9653: LD_ADDR_VAR 0 4
9657: PUSH
9658: LD_INT 22
9660: PUSH
9661: LD_INT 2
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: LD_INT 21
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 23
9680: PUSH
9681: LD_INT 2
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: PPUSH
9693: CALL_OW 69
9697: ST_TO_ADDR
// for i := 7 downto tmp do
9698: LD_ADDR_VAR 0 3
9702: PUSH
9703: DOUBLE
9704: LD_INT 7
9706: INC
9707: ST_TO_ADDR
9708: LD_VAR 0 4
9712: PUSH
9713: FOR_DOWNTO
9714: IFFALSE 9784
// begin if omarSquad < 3 then
9716: LD_EXP 40
9720: PUSH
9721: LD_INT 3
9723: LESS
9724: IFFALSE 9728
// break ;
9726: GO 9784
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9728: LD_EXP 40
9732: PUSH
9733: LD_INT 3
9735: ARRAY
9736: PPUSH
9737: LD_INT 2
9739: PPUSH
9740: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9744: LD_ADDR_EXP 42
9748: PUSH
9749: LD_EXP 42
9753: PUSH
9754: LD_EXP 40
9758: PUSH
9759: LD_INT 3
9761: ARRAY
9762: UNION
9763: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9764: LD_ADDR_EXP 40
9768: PUSH
9769: LD_EXP 40
9773: PPUSH
9774: LD_INT 3
9776: PPUSH
9777: CALL_OW 3
9781: ST_TO_ADDR
// end ;
9782: GO 9713
9784: POP
9785: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9786: LD_EXP 37
9790: PUSH
9791: LD_EXP 40
9795: ADD
9796: PPUSH
9797: LD_INT 103
9799: PPUSH
9800: LD_INT 9
9802: PPUSH
9803: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9807: LD_VAR 0 2
9811: PUSH
9812: LD_EXP 33
9816: PPUSH
9817: CALL_OW 302
9821: AND
9822: IFFALSE 9883
// begin wait ( 0 0$3 ) ;
9824: LD_INT 105
9826: PPUSH
9827: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9831: LD_EXP 33
9835: PPUSH
9836: LD_EXP 36
9840: PPUSH
9841: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9845: LD_EXP 33
9849: PPUSH
9850: LD_STRING DK-1-side
9852: PPUSH
9853: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9857: LD_EXP 36
9861: PPUSH
9862: LD_EXP 33
9866: PPUSH
9867: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9871: LD_EXP 36
9875: PPUSH
9876: LD_STRING DF-1-side
9878: PPUSH
9879: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9883: LD_INT 22
9885: PUSH
9886: LD_INT 2
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PPUSH
9893: CALL_OW 69
9897: PPUSH
9898: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9902: LD_EXP 36
9906: PUSH
9907: LD_EXP 39
9911: ADD
9912: PPUSH
9913: LD_INT 108
9915: PPUSH
9916: LD_INT 62
9918: PPUSH
9919: CALL_OW 111
// gameStarted := true ;
9923: LD_ADDR_EXP 3
9927: PUSH
9928: LD_INT 1
9930: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9931: LD_INT 105
9933: PPUSH
9934: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9938: LD_EXP 28
9942: PPUSH
9943: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
9947: LD_EXP 28
9951: PPUSH
9952: LD_EXP 32
9956: PPUSH
9957: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
9961: LD_INT 22
9963: PUSH
9964: LD_INT 2
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 69
9975: PUSH
9976: LD_EXP 28
9980: DIFF
9981: PPUSH
9982: LD_EXP 28
9986: PPUSH
9987: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
9991: LD_EXP 28
9995: PPUSH
9996: LD_STRING DH-1-explore
9998: PPUSH
9999: CALL_OW 88
// if Givi then
10003: LD_EXP 29
10007: IFFALSE 10023
// Say ( Givi , DG-1-explore ) else
10009: LD_EXP 29
10013: PPUSH
10014: LD_STRING DG-1-explore
10016: PPUSH
10017: CALL_OW 88
10021: GO 10060
// if heikeSecondSquad then
10023: LD_EXP 42
10027: IFFALSE 10060
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10029: LD_EXP 42
10033: PPUSH
10034: LD_INT 26
10036: PUSH
10037: LD_INT 1
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PPUSH
10044: CALL_OW 72
10048: PUSH
10049: LD_INT 1
10051: ARRAY
10052: PPUSH
10053: LD_STRING DArm-1-explore
10055: PPUSH
10056: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10060: LD_EXP 32
10064: PPUSH
10065: LD_STRING DA-1-explore
10067: PPUSH
10068: CALL_OW 88
// if Sophia then
10072: LD_EXP 34
10076: IFFALSE 10154
// begin Say ( Sophia , DS-2-explore ) ;
10078: LD_EXP 34
10082: PPUSH
10083: LD_STRING DS-2-explore
10085: PPUSH
10086: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10090: LD_EXP 32
10094: PPUSH
10095: LD_STRING DA-2-explore
10097: PPUSH
10098: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10102: LD_EXP 34
10106: PPUSH
10107: LD_EXP 32
10111: PPUSH
10112: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10116: LD_EXP 32
10120: PPUSH
10121: LD_EXP 34
10125: PPUSH
10126: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10130: LD_EXP 34
10134: PPUSH
10135: LD_STRING DS-3-explore
10137: PPUSH
10138: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10142: LD_EXP 32
10146: PPUSH
10147: LD_STRING DA-3-explore
10149: PPUSH
10150: CALL_OW 88
// end ; if Mike then
10154: LD_EXP 30
10158: IFFALSE 10214
// begin Say ( Mike , DM-1-explore ) ;
10160: LD_EXP 30
10164: PPUSH
10165: LD_STRING DM-1-explore
10167: PPUSH
10168: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10172: LD_EXP 28
10176: PPUSH
10177: LD_STRING DH-2-explore
10179: PPUSH
10180: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10184: LD_EXP 30
10188: PPUSH
10189: LD_STRING DM-2-explore
10191: PPUSH
10192: CALL_OW 88
// if Kaia then
10196: LD_EXP 33
10200: IFFALSE 10214
// Say ( Kaia , DK-1-explore ) ;
10202: LD_EXP 33
10206: PPUSH
10207: LD_STRING DK-1-explore
10209: PPUSH
10210: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10214: LD_INT 22
10216: PUSH
10217: LD_INT 2
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 69
10228: PPUSH
10229: CALL_OW 139
// Video ( false ) ;
10233: LD_INT 0
10235: PPUSH
10236: CALL 72732 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10240: LD_STRING BuildBase
10242: PPUSH
10243: CALL_OW 337
// SaveForQuickRestart ;
10247: CALL_OW 22
// end ;
10251: LD_VAR 0 1
10255: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10256: LD_EXP 5
10260: NOT
10261: PUSH
10262: LD_EXP 6
10266: NOT
10267: AND
10268: PUSH
10269: LD_INT 5
10271: PPUSH
10272: LD_INT 22
10274: PUSH
10275: LD_INT 2
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PPUSH
10282: CALL_OW 70
10286: AND
10287: PUSH
10288: LD_EXP 6
10292: NOT
10293: AND
10294: IFFALSE 10379
10296: GO 10298
10298: DISABLE
// begin if Mike then
10299: LD_EXP 30
10303: IFFALSE 10319
// Say ( Mike , DM-1-scout ) else
10305: LD_EXP 30
10309: PPUSH
10310: LD_STRING DM-1-scout
10312: PPUSH
10313: CALL_OW 88
10317: GO 10350
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10319: LD_EXP 42
10323: PPUSH
10324: LD_INT 26
10326: PUSH
10327: LD_INT 1
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PPUSH
10334: CALL_OW 72
10338: PUSH
10339: LD_INT 1
10341: ARRAY
10342: PPUSH
10343: LD_STRING DArm-1-explore
10345: PPUSH
10346: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10350: LD_INT 54
10352: PPUSH
10353: LD_INT 35
10355: PPUSH
10356: LD_INT 2
10358: PPUSH
10359: LD_INT 1
10361: PPUSH
10362: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10366: LD_INT 54
10368: PPUSH
10369: LD_INT 35
10371: PPUSH
10372: LD_INT 2
10374: PPUSH
10375: CALL_OW 331
// end ;
10379: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10380: LD_INT 6
10382: PPUSH
10383: LD_INT 22
10385: PUSH
10386: LD_INT 2
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 70
10397: PUSH
10398: LD_EXP 6
10402: NOT
10403: AND
10404: IFFALSE 10658
10406: GO 10408
10408: DISABLE
10409: LD_INT 0
10411: PPUSH
10412: PPUSH
10413: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10414: LD_ADDR_VAR 0 1
10418: PUSH
10419: LD_EXP 42
10423: PPUSH
10424: LD_INT 26
10426: PUSH
10427: LD_INT 1
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 72
10438: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10439: LD_ADDR_VAR 0 2
10443: PUSH
10444: LD_EXP 42
10448: PPUSH
10449: LD_INT 26
10451: PUSH
10452: LD_INT 2
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: CALL_OW 72
10463: ST_TO_ADDR
// DialogueOn ;
10464: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10468: LD_INT 36
10470: PPUSH
10471: LD_INT 22
10473: PPUSH
10474: LD_INT 2
10476: PPUSH
10477: LD_INT 8
10479: PPUSH
10480: CALL_OW 330
// dwait ( 0 0$1 ) ;
10484: LD_INT 35
10486: PPUSH
10487: CALL_OW 68
// speakerOk := false ;
10491: LD_ADDR_VAR 0 3
10495: PUSH
10496: LD_INT 0
10498: ST_TO_ADDR
// if Mike then
10499: LD_EXP 30
10503: IFFALSE 10525
// speakerOk := Say ( Mike , DM-1-spot ) else
10505: LD_ADDR_VAR 0 3
10509: PUSH
10510: LD_EXP 30
10514: PPUSH
10515: LD_STRING DM-1-spot
10517: PPUSH
10518: CALL_OW 88
10522: ST_TO_ADDR
10523: GO 10553
// if randomMen then
10525: LD_VAR 0 1
10529: IFFALSE 10553
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10531: LD_ADDR_VAR 0 3
10535: PUSH
10536: LD_VAR 0 1
10540: PUSH
10541: LD_INT 1
10543: ARRAY
10544: PPUSH
10545: LD_STRING DArm-1-spot-a
10547: PPUSH
10548: CALL_OW 88
10552: ST_TO_ADDR
// if speakerOk then
10553: LD_VAR 0 3
10557: IFFALSE 10601
// begin if Givi then
10559: LD_EXP 29
10563: IFFALSE 10579
// Say ( Givi , DG-1-spot ) else
10565: LD_EXP 29
10569: PPUSH
10570: LD_STRING DG-1-spot
10572: PPUSH
10573: CALL_OW 88
10577: GO 10601
// if randomWomen then
10579: LD_VAR 0 2
10583: IFFALSE 10601
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10585: LD_VAR 0 2
10589: PUSH
10590: LD_INT 1
10592: ARRAY
10593: PPUSH
10594: LD_STRING DArf-1-spot-a
10596: PPUSH
10597: CALL_OW 88
// end ; if Mike then
10601: LD_EXP 30
10605: IFFALSE 10621
// Say ( Heike , DH-1-spot ) else
10607: LD_EXP 28
10611: PPUSH
10612: LD_STRING DH-1-spot
10614: PPUSH
10615: CALL_OW 88
10619: GO 10633
// Say ( Heike , DH-1-spot-a ) ;
10621: LD_EXP 28
10625: PPUSH
10626: LD_STRING DH-1-spot-a
10628: PPUSH
10629: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10633: LD_INT 36
10635: PPUSH
10636: LD_INT 22
10638: PPUSH
10639: LD_INT 2
10641: PPUSH
10642: CALL_OW 331
// DialogueOff ;
10646: CALL_OW 7
// americanBaseSpoted := true ;
10650: LD_ADDR_EXP 5
10654: PUSH
10655: LD_INT 1
10657: ST_TO_ADDR
// end ;
10658: PPOPN 3
10660: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10661: LD_EXP 5
10665: NOT
10666: PUSH
10667: LD_INT 22
10669: PUSH
10670: LD_INT 2
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 101
10679: PUSH
10680: LD_INT 1
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PPUSH
10691: CALL_OW 69
10695: AND
10696: PUSH
10697: LD_EXP 6
10701: NOT
10702: AND
10703: IFFALSE 10789
10705: GO 10707
10707: DISABLE
10708: LD_INT 0
10710: PPUSH
// begin americanBaseSpoted := true ;
10711: LD_ADDR_EXP 5
10715: PUSH
10716: LD_INT 1
10718: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10719: LD_ADDR_VAR 0 1
10723: PUSH
10724: LD_EXP 42
10728: PPUSH
10729: LD_INT 26
10731: PUSH
10732: LD_INT 1
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PPUSH
10739: CALL_OW 72
10743: ST_TO_ADDR
// if not randomMen then
10744: LD_VAR 0 1
10748: NOT
10749: IFFALSE 10753
// exit ;
10751: GO 10789
// DialogueOn ;
10753: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10757: LD_VAR 0 1
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: LD_STRING DArm-1-spot-a
10768: PPUSH
10769: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10773: LD_EXP 28
10777: PPUSH
10778: LD_STRING DH-1-spot-a
10780: PPUSH
10781: CALL_OW 88
// DialogueOff ;
10785: CALL_OW 7
// end ;
10789: PPOPN 1
10791: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10792: LD_INT 11
10794: PPUSH
10795: CALL_OW 255
10799: PUSH
10800: LD_INT 2
10802: EQUAL
10803: PUSH
10804: LD_INT 7
10806: PPUSH
10807: LD_INT 22
10809: PUSH
10810: LD_INT 1
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: LD_INT 3
10819: PUSH
10820: LD_INT 50
10822: PUSH
10823: EMPTY
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 30
10832: PUSH
10833: LD_INT 31
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 70
10849: OR
10850: PUSH
10851: LD_INT 7
10853: PPUSH
10854: LD_INT 22
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 70
10868: PUSH
10869: LD_INT 1
10871: GREATER
10872: OR
10873: PUSH
10874: LD_EXP 44
10878: PUSH
10879: LD_INT 4
10881: LESSEQUAL
10882: OR
10883: IFFALSE 11462
10885: GO 10887
10887: DISABLE
10888: LD_INT 0
10890: PPUSH
10891: PPUSH
// begin wait ( 0 0$3 ) ;
10892: LD_INT 105
10894: PPUSH
10895: CALL_OW 67
// americanStartRun := true ;
10899: LD_ADDR_EXP 14
10903: PUSH
10904: LD_INT 1
10906: ST_TO_ADDR
// if IsOk ( usCommander ) then
10907: LD_EXP 45
10911: PPUSH
10912: CALL_OW 302
10916: IFFALSE 10946
// begin usForces := usForces union usCommander ;
10918: LD_ADDR_EXP 44
10922: PUSH
10923: LD_EXP 44
10927: PUSH
10928: LD_EXP 45
10932: UNION
10933: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
10934: LD_EXP 45
10938: PPUSH
10939: LD_STRING DUsm-1-assault
10941: PPUSH
10942: CALL_OW 88
// end ; for i in usForces do
10946: LD_ADDR_VAR 0 1
10950: PUSH
10951: LD_EXP 44
10955: PUSH
10956: FOR_IN
10957: IFFALSE 11003
// begin if IsInUnit ( i ) then
10959: LD_VAR 0 1
10963: PPUSH
10964: CALL_OW 310
10968: IFFALSE 10979
// ComExitBuilding ( i ) ;
10970: LD_VAR 0 1
10974: PPUSH
10975: CALL_OW 122
// wait ( 3 ) ;
10979: LD_INT 3
10981: PPUSH
10982: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10986: LD_VAR 0 1
10990: PPUSH
10991: LD_INT 34
10993: PPUSH
10994: LD_INT 67
10996: PPUSH
10997: CALL_OW 111
// end ;
11001: GO 10956
11003: POP
11004: POP
// Say ( Heike , DH-1-assault ) ;
11005: LD_EXP 28
11009: PPUSH
11010: LD_STRING DH-1-assault
11012: PPUSH
11013: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11017: LD_INT 35
11019: PPUSH
11020: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11024: LD_VAR 0 1
11028: PPUSH
11029: LD_INT 34
11031: PPUSH
11032: LD_INT 67
11034: PPUSH
11035: CALL_OW 111
// until not usForces ;
11039: LD_EXP 44
11043: NOT
11044: IFFALSE 11017
// music_nat := 2 ;
11046: LD_ADDR_OWVAR 71
11050: PUSH
11051: LD_INT 2
11053: ST_TO_ADDR
// music_class := music_victory ;
11054: LD_ADDR_OWVAR 72
11058: PUSH
11059: LD_INT 4
11061: ST_TO_ADDR
// if not americanHasEscaped then
11062: LD_EXP 8
11066: NOT
11067: IFFALSE 11088
// begin Say ( Heike , DH-2-assault ) ;
11069: LD_EXP 28
11073: PPUSH
11074: LD_STRING DH-2-assault
11076: PPUSH
11077: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11081: LD_STRING ACH_CLEAN
11083: PPUSH
11084: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11088: LD_INT 70
11090: PPUSH
11091: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11095: LD_INT 35
11097: PPUSH
11098: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11102: LD_INT 22
11104: PUSH
11105: LD_INT 2
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 21
11114: PUSH
11115: LD_INT 1
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: LD_INT 3
11124: PUSH
11125: LD_INT 50
11127: PUSH
11128: EMPTY
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: PPUSH
11140: CALL_OW 69
11144: NOT
11145: IFFALSE 11095
// InGameOn ;
11147: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11151: LD_INT 11
11153: PPUSH
11154: CALL_OW 255
11158: PUSH
11159: LD_INT 2
11161: EQUAL
11162: NOT
11163: IFFALSE 11175
// SetSide ( usDepot , 2 ) ;
11165: LD_INT 11
11167: PPUSH
11168: LD_INT 2
11170: PPUSH
11171: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11175: LD_INT 35
11177: PPUSH
11178: LD_INT 22
11180: PPUSH
11181: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11185: LD_EXP 28
11189: PPUSH
11190: LD_INT 35
11192: PPUSH
11193: LD_INT 22
11195: PPUSH
11196: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11200: LD_EXP 28
11204: PPUSH
11205: LD_INT 38
11207: PPUSH
11208: LD_INT 25
11210: PPUSH
11211: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11215: LD_EXP 41
11219: PUSH
11220: LD_EXP 42
11224: UNION
11225: PPUSH
11226: LD_INT 39
11228: PPUSH
11229: LD_INT 26
11231: PPUSH
11232: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11236: LD_EXP 41
11240: PUSH
11241: LD_EXP 42
11245: UNION
11246: PPUSH
11247: LD_EXP 28
11251: PPUSH
11252: CALL_OW 179
// p := 0 ;
11256: LD_ADDR_VAR 0 2
11260: PUSH
11261: LD_INT 0
11263: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11264: LD_INT 35
11266: PPUSH
11267: CALL_OW 67
// p := p + 1 ;
11271: LD_ADDR_VAR 0 2
11275: PUSH
11276: LD_VAR 0 2
11280: PUSH
11281: LD_INT 1
11283: PLUS
11284: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11285: LD_EXP 28
11289: PPUSH
11290: CALL_OW 314
11294: NOT
11295: PUSH
11296: LD_VAR 0 2
11300: PUSH
11301: LD_INT 10
11303: GREATER
11304: OR
11305: IFFALSE 11264
// Say ( Heike , DH-1-capture ) ;
11307: LD_EXP 28
11311: PPUSH
11312: LD_STRING DH-1-capture
11314: PPUSH
11315: CALL_OW 88
// if Markov then
11319: LD_EXP 35
11323: IFFALSE 11337
// Say ( Markov , DMar-1-capture ) ;
11325: LD_EXP 35
11329: PPUSH
11330: LD_STRING DMar-1-capture
11332: PPUSH
11333: CALL_OW 88
// if Sophia then
11337: LD_EXP 34
11341: IFFALSE 11367
// begin Say ( Heike , DH-2-capture ) ;
11343: LD_EXP 28
11347: PPUSH
11348: LD_STRING DH-2-capture
11350: PPUSH
11351: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11355: LD_EXP 34
11359: PPUSH
11360: LD_STRING DS-1-capture
11362: PPUSH
11363: CALL_OW 88
// end ; InGameOff ;
11367: CALL_OW 9
// music_nat := music_auto ;
11371: LD_ADDR_OWVAR 71
11375: PUSH
11376: LD_INT 0
11378: ST_TO_ADDR
// music_class := music_auto ;
11379: LD_ADDR_OWVAR 72
11383: PUSH
11384: LD_INT 0
11386: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11387: LD_STRING ConstructBase
11389: PPUSH
11390: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11394: LD_ADDR_VAR 0 1
11398: PUSH
11399: LD_INT 22
11401: PUSH
11402: LD_INT 1
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 21
11411: PUSH
11412: LD_INT 3
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PPUSH
11423: CALL_OW 69
11427: PUSH
11428: FOR_IN
11429: IFFALSE 11445
// SetSide ( i , 2 ) ;
11431: LD_VAR 0 1
11435: PPUSH
11436: LD_INT 2
11438: PPUSH
11439: CALL_OW 235
11443: GO 11428
11445: POP
11446: POP
// wait ( 0 0$3 ) ;
11447: LD_INT 105
11449: PPUSH
11450: CALL_OW 67
// americanBaseCaptured := true ;
11454: LD_ADDR_EXP 6
11458: PUSH
11459: LD_INT 1
11461: ST_TO_ADDR
// end ;
11462: PPOPN 2
11464: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11465: LD_EXP 13
11469: PUSH
11470: LD_INT 3
11472: GREATEREQUAL
11473: IFFALSE 11485
11475: GO 11477
11477: DISABLE
// SetAchievement ( ACH_ENG ) ;
11478: LD_STRING ACH_ENG
11480: PPUSH
11481: CALL_OW 543
11485: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11486: LD_INT 22
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 25
11498: PUSH
11499: LD_INT 15
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PPUSH
11510: CALL_OW 69
11514: PUSH
11515: LD_INT 4
11517: GREATEREQUAL
11518: IFFALSE 11530
11520: GO 11522
11522: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11523: LD_STRING ACH_APEGEN
11525: PPUSH
11526: CALL_OW 543
11530: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11531: LD_INT 22
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 30
11543: PUSH
11544: LD_INT 2
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 3
11553: PUSH
11554: LD_INT 57
11556: PUSH
11557: EMPTY
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: PPUSH
11569: CALL_OW 69
11573: IFFALSE 11816
11575: GO 11577
11577: DISABLE
// begin workshopBuilded := true ;
11578: LD_ADDR_EXP 10
11582: PUSH
11583: LD_INT 1
11585: ST_TO_ADDR
// if IsOk ( Markov ) then
11586: LD_EXP 35
11590: PPUSH
11591: CALL_OW 302
11595: IFFALSE 11654
// begin Say ( Heike , DH-1-shop-a ) ;
11597: LD_EXP 28
11601: PPUSH
11602: LD_STRING DH-1-shop-a
11604: PPUSH
11605: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11609: LD_INT 47
11611: PPUSH
11612: LD_INT 2
11614: PPUSH
11615: CALL_OW 321
11619: PUSH
11620: LD_INT 2
11622: EQUAL
11623: PUSH
11624: LD_INT 45
11626: PPUSH
11627: LD_INT 2
11629: PPUSH
11630: CALL_OW 321
11634: PUSH
11635: LD_INT 2
11637: EQUAL
11638: AND
11639: NOT
11640: IFFALSE 11654
// Say ( Markov , DMar-1-shop-a ) ;
11642: LD_EXP 35
11646: PPUSH
11647: LD_STRING DMar-1-shop-a
11649: PPUSH
11650: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11654: LD_INT 35
11656: PPUSH
11657: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11661: LD_INT 47
11663: PPUSH
11664: LD_INT 2
11666: PPUSH
11667: CALL_OW 321
11671: PUSH
11672: LD_INT 2
11674: EQUAL
11675: PUSH
11676: LD_INT 45
11678: PPUSH
11679: LD_INT 2
11681: PPUSH
11682: CALL_OW 321
11686: PUSH
11687: LD_INT 2
11689: EQUAL
11690: OR
11691: IFFALSE 11654
// DialogueOn ;
11693: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11697: LD_EXP 35
11701: PPUSH
11702: LD_STRING DMar-1-shop
11704: PPUSH
11705: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11709: LD_EXP 28
11713: PPUSH
11714: LD_STRING DH-1-shop
11716: PPUSH
11717: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11721: LD_EXP 35
11725: PPUSH
11726: LD_STRING DMar-2-shop
11728: PPUSH
11729: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11733: LD_EXP 35
11737: PPUSH
11738: LD_STRING DMar-3-shop
11740: PPUSH
11741: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11745: LD_EXP 28
11749: PPUSH
11750: LD_STRING DH-2-shop
11752: PPUSH
11753: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11757: LD_EXP 35
11761: PPUSH
11762: LD_STRING DMar-4-shop
11764: PPUSH
11765: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11769: LD_EXP 28
11773: PPUSH
11774: LD_STRING DH-3-shop
11776: PPUSH
11777: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11781: LD_EXP 35
11785: PPUSH
11786: LD_STRING DMar-5-shop
11788: PPUSH
11789: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11793: LD_EXP 28
11797: PPUSH
11798: LD_STRING DH-4-shop
11800: PPUSH
11801: CALL_OW 88
// DialogueOff ;
11805: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
11809: LD_STRING ConstructVeh
11811: PPUSH
11812: CALL_OW 337
// end ;
11816: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11817: LD_INT 2
11819: PPUSH
11820: LD_INT 2
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: CALL 36501 0 3
11830: PUSH
11831: LD_INT 0
11833: EQUAL
11834: IFFALSE 11846
11836: GO 11838
11838: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11839: LD_STRING Techs
11841: PPUSH
11842: CALL_OW 337
11846: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11847: LD_EXP 35
11851: PPUSH
11852: CALL_OW 302
11856: PUSH
11857: LD_INT 22
11859: PUSH
11860: LD_INT 2
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 2
11869: PUSH
11870: LD_INT 34
11872: PUSH
11873: LD_INT 22
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: LD_INT 35
11882: PUSH
11883: LD_INT 22
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PPUSH
11899: CALL_OW 69
11903: AND
11904: IFFALSE 12011
11906: GO 11908
11908: DISABLE
// begin DialogueOn ;
11909: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11913: LD_INT 22
11915: PUSH
11916: LD_INT 2
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 2
11925: PUSH
11926: LD_INT 34
11928: PUSH
11929: LD_INT 22
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 35
11938: PUSH
11939: LD_INT 22
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 69
11959: PPUSH
11960: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11964: LD_INT 10
11966: PPUSH
11967: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
11971: LD_EXP 28
11975: PPUSH
11976: LD_STRING DH-1-bal
11978: PPUSH
11979: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
11983: LD_EXP 35
11987: PPUSH
11988: LD_STRING DMar-1-bal
11990: PPUSH
11991: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
11995: LD_EXP 28
11999: PPUSH
12000: LD_STRING DH-2-bal
12002: PPUSH
12003: CALL_OW 88
// DialogueOff ;
12007: CALL_OW 7
// end ;
12011: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12012: LD_EXP 32
12016: PPUSH
12017: CALL_OW 302
12021: PUSH
12022: LD_INT 22
12024: PUSH
12025: LD_INT 2
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 30
12034: PUSH
12035: LD_INT 6
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PPUSH
12046: CALL_OW 69
12050: AND
12051: IFFALSE 12112
12053: GO 12055
12055: DISABLE
// begin DialogueOn ;
12056: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12060: LD_EXP 32
12064: PPUSH
12065: LD_STRING DA-1-lab
12067: PPUSH
12068: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12072: LD_EXP 28
12076: PPUSH
12077: LD_STRING DH-1-lab
12079: PPUSH
12080: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12084: LD_EXP 32
12088: PPUSH
12089: LD_STRING DA-2-lab
12091: PPUSH
12092: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12096: LD_EXP 28
12100: PPUSH
12101: LD_STRING DH-2-lab
12103: PPUSH
12104: CALL_OW 88
// DialogueOff ;
12108: CALL_OW 7
// end ;
12112: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12113: LD_EXP 33
12117: PPUSH
12118: CALL_OW 302
12122: PUSH
12123: LD_INT 22
12125: PUSH
12126: LD_INT 2
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 25
12135: PUSH
12136: LD_INT 15
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 69
12151: AND
12152: PUSH
12153: LD_INT 81
12155: PUSH
12156: LD_INT 2
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 69
12167: NOT
12168: AND
12169: IFFALSE 12351
12171: GO 12173
12173: DISABLE
12174: LD_INT 0
12176: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12177: LD_ADDR_VAR 0 1
12181: PUSH
12182: LD_INT 22
12184: PUSH
12185: LD_INT 2
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 25
12194: PUSH
12195: LD_INT 15
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PPUSH
12206: CALL_OW 69
12210: ST_TO_ADDR
// InGameOn ;
12211: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12215: LD_VAR 0 1
12219: PUSH
12220: LD_INT 1
12222: ARRAY
12223: PPUSH
12224: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 1
12235: ARRAY
12236: PPUSH
12237: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12241: LD_EXP 33
12245: PPUSH
12246: LD_STRING DK-1-apesol
12248: PPUSH
12249: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12253: LD_VAR 0 1
12257: PUSH
12258: LD_INT 1
12260: ARRAY
12261: PPUSH
12262: LD_INT 35
12264: PPUSH
12265: LD_INT 28
12267: PPUSH
12268: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12272: LD_VAR 0 1
12276: PUSH
12277: LD_INT 1
12279: ARRAY
12280: PPUSH
12281: LD_INT 36
12283: PPUSH
12284: LD_INT 17
12286: PPUSH
12287: CALL_OW 171
// DialogueOn ;
12291: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12295: LD_EXP 32
12299: PPUSH
12300: LD_STRING DA-1-apesol
12302: PPUSH
12303: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12307: LD_EXP 33
12311: PPUSH
12312: LD_STRING DK-2-apesol
12314: PPUSH
12315: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12319: LD_EXP 32
12323: PPUSH
12324: LD_STRING DA-2-apesol
12326: PPUSH
12327: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12331: LD_EXP 33
12335: PPUSH
12336: LD_STRING DK-3-apesol
12338: PPUSH
12339: CALL_OW 88
// DialogueOff ;
12343: CALL_OW 7
// InGameOff ;
12347: CALL_OW 9
// end ;
12351: PPOPN 1
12353: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12354: LD_EXP 34
12358: PPUSH
12359: CALL_OW 302
12363: PUSH
12364: LD_INT 22
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 25
12376: PUSH
12377: LD_INT 16
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: AND
12393: PUSH
12394: LD_INT 81
12396: PUSH
12397: LD_INT 2
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PPUSH
12404: CALL_OW 69
12408: NOT
12409: AND
12410: IFFALSE 12683
12412: GO 12414
12414: DISABLE
12415: LD_INT 0
12417: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12418: LD_ADDR_VAR 0 1
12422: PUSH
12423: LD_INT 22
12425: PUSH
12426: LD_INT 2
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 25
12435: PUSH
12436: LD_INT 16
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PPUSH
12447: CALL_OW 69
12451: ST_TO_ADDR
// InGameOn ;
12452: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12456: LD_INT 35
12458: PPUSH
12459: LD_INT 22
12461: PPUSH
12462: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12466: LD_INT 5
12468: PPUSH
12469: LD_INT 35
12471: PPUSH
12472: LD_INT 22
12474: PPUSH
12475: LD_INT 1
12477: PPUSH
12478: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12482: LD_EXP 34
12486: PPUSH
12487: LD_VAR 0 1
12491: PUSH
12492: LD_INT 1
12494: ARRAY
12495: PPUSH
12496: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12500: LD_VAR 0 1
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12513: LD_VAR 0 1
12517: PUSH
12518: LD_INT 1
12520: ARRAY
12521: PPUSH
12522: CALL_OW 122
// wait ( 0 0$2 ) ;
12526: LD_INT 70
12528: PPUSH
12529: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12533: LD_EXP 34
12537: PPUSH
12538: LD_STRING DS-1-apeeng
12540: PPUSH
12541: CALL_OW 88
// if IsOk ( Kamil ) then
12545: LD_EXP 31
12549: PPUSH
12550: CALL_OW 302
12554: IFFALSE 12679
// begin Say ( Kamil , DKam-1-apeeng ) ;
12556: LD_EXP 31
12560: PPUSH
12561: LD_STRING DKam-1-apeeng
12563: PPUSH
12564: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12568: LD_EXP 34
12572: PPUSH
12573: LD_STRING DS-2-apeeng
12575: PPUSH
12576: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12580: LD_EXP 31
12584: PPUSH
12585: LD_STRING DKam-2-apeeng
12587: PPUSH
12588: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12592: LD_EXP 34
12596: PPUSH
12597: LD_STRING DS-3-apeeng
12599: PPUSH
12600: CALL_OW 88
// if not IsOK ( Kaia ) then
12604: LD_EXP 33
12608: PPUSH
12609: CALL_OW 302
12613: NOT
12614: IFFALSE 12622
// begin InGameOff ;
12616: CALL_OW 9
// exit ;
12620: GO 12683
// end ; Say ( Kaia , DK-1-apeeng ) ;
12622: LD_EXP 33
12626: PPUSH
12627: LD_STRING DK-1-apeeng
12629: PPUSH
12630: CALL_OW 88
// if not IsOk ( Givi ) then
12634: LD_EXP 29
12638: PPUSH
12639: CALL_OW 302
12643: NOT
12644: IFFALSE 12655
// begin Video ( false ) ;
12646: LD_INT 0
12648: PPUSH
12649: CALL 72732 0 1
// exit ;
12653: GO 12683
// end ; Say ( Givi , DG-1-apeeng ) ;
12655: LD_EXP 29
12659: PPUSH
12660: LD_STRING DG-1-apeeng
12662: PPUSH
12663: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12667: LD_EXP 33
12671: PPUSH
12672: LD_STRING DK-2-apeeng
12674: PPUSH
12675: CALL_OW 88
// end ; InGameOff ;
12679: CALL_OW 9
// end ;
12683: PPOPN 1
12685: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12686: LD_EXP 4
12690: PUSH
12691: LD_INT 22
12693: PUSH
12694: LD_INT 2
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 30
12703: PUSH
12704: LD_INT 0
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PPUSH
12715: CALL_OW 69
12719: AND
12720: IFFALSE 12885
12722: GO 12724
12724: DISABLE
// begin wait ( 0 0$10 ) ;
12725: LD_INT 350
12727: PPUSH
12728: CALL_OW 67
// DialogueOn ;
12732: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12736: LD_EXP 36
12740: PPUSH
12741: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12745: LD_EXP 36
12749: PPUSH
12750: LD_STRING DF-1-distribution
12752: PPUSH
12753: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12757: LD_EXP 28
12761: PPUSH
12762: LD_STRING DH-2-distribution
12764: PPUSH
12765: CALL_OW 88
// if IsOk ( Kaia ) then
12769: LD_EXP 33
12773: PPUSH
12774: CALL_OW 302
12778: IFFALSE 12839
// begin Say ( Kaia , DK-1-distribution ) ;
12780: LD_EXP 33
12784: PPUSH
12785: LD_STRING DK-1-distribution
12787: PPUSH
12788: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12792: LD_EXP 28
12796: PPUSH
12797: LD_STRING DH-1-distribution
12799: PPUSH
12800: CALL_OW 88
// if IsOk ( Givi ) then
12804: LD_EXP 29
12808: PPUSH
12809: CALL_OW 302
12813: IFFALSE 12839
// begin Say ( Givi , DG-1-distribution ) ;
12815: LD_EXP 29
12819: PPUSH
12820: LD_STRING DG-1-distribution
12822: PPUSH
12823: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12827: LD_EXP 28
12831: PPUSH
12832: LD_STRING DH-3-distribution
12834: PPUSH
12835: CALL_OW 88
// end ; end ; DialogueOff ;
12839: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12843: LD_STRING Crates1
12845: PPUSH
12846: CALL_OW 337
// farmerRequestedCrates := 300 ;
12850: LD_ADDR_EXP 16
12854: PUSH
12855: LD_INT 300
12857: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12858: LD_STRING FarmerCrates
12860: PPUSH
12861: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12865: LD_INT 10
12867: PPUSH
12868: LD_INT 1
12870: PPUSH
12871: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12875: LD_INT 108
12877: PPUSH
12878: LD_INT 61
12880: PPUSH
12881: CALL_OW 86
// end ;
12885: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12886: LD_EXP 6
12890: PUSH
12891: LD_INT 22
12893: PUSH
12894: LD_INT 2
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 3
12903: PUSH
12904: LD_INT 57
12906: PUSH
12907: EMPTY
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 2
12916: PUSH
12917: LD_INT 30
12919: PUSH
12920: LD_INT 6
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 30
12929: PUSH
12930: LD_INT 7
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: LIST
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 69
12951: AND
12952: PUSH
12953: LD_INT 22
12955: PUSH
12956: LD_INT 2
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 3
12965: PUSH
12966: LD_INT 57
12968: PUSH
12969: EMPTY
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 30
12978: PUSH
12979: LD_INT 4
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 69
12995: AND
12996: IFFALSE 13160
12998: GO 13000
13000: DISABLE
13001: LD_INT 0
13003: PPUSH
// begin wait ( 0 0$10 ) ;
13004: LD_INT 350
13006: PPUSH
13007: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13011: LD_ADDR_VAR 0 1
13015: PUSH
13016: LD_EXP 42
13020: PPUSH
13021: LD_INT 26
13023: PUSH
13024: LD_INT 1
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 25
13033: PUSH
13034: LD_INT 2
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PPUSH
13045: CALL_OW 72
13049: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13050: LD_EXP 28
13054: PPUSH
13055: LD_STRING DH-1-task
13057: PPUSH
13058: CALL_OW 88
// if IsOk ( Sophia ) then
13062: LD_EXP 34
13066: PPUSH
13067: CALL_OW 302
13071: IFFALSE 13111
// begin Say ( Sophia , DS-1-task ) ;
13073: LD_EXP 34
13077: PPUSH
13078: LD_STRING DS-1-task
13080: PPUSH
13081: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13085: LD_EXP 34
13089: PPUSH
13090: LD_STRING DS-2-task
13092: PPUSH
13093: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13097: LD_EXP 28
13101: PPUSH
13102: LD_STRING DH-2-task
13104: PPUSH
13105: CALL_OW 88
// end else
13109: GO 13145
// if eng then
13111: LD_VAR 0 1
13115: IFFALSE 13145
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13117: LD_VAR 0 1
13121: PUSH
13122: LD_INT 1
13124: ARRAY
13125: PPUSH
13126: LD_STRING DArm-1-task
13128: PPUSH
13129: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13133: LD_EXP 28
13137: PPUSH
13138: LD_STRING DH-2-task
13140: PPUSH
13141: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13145: LD_STRING BaseConstructed
13147: PPUSH
13148: CALL_OW 337
// allowConvoys := true ;
13152: LD_ADDR_EXP 12
13156: PUSH
13157: LD_INT 1
13159: ST_TO_ADDR
// end ;
13160: PPOPN 1
13162: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13163: LD_INT 22
13165: PUSH
13166: LD_INT 4
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 34
13175: PUSH
13176: LD_INT 12
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: IFFALSE 13359
13193: GO 13195
13195: DISABLE
13196: LD_INT 0
13198: PPUSH
13199: PPUSH
13200: PPUSH
// begin wait ( 0 0$2 ) ;
13201: LD_INT 70
13203: PPUSH
13204: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13208: LD_ADDR_VAR 0 1
13212: PUSH
13213: LD_INT 22
13215: PUSH
13216: LD_INT 4
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 34
13225: PUSH
13226: LD_INT 12
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PPUSH
13237: CALL_OW 69
13241: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13242: LD_ADDR_VAR 0 2
13246: PUSH
13247: LD_VAR 0 1
13251: PUSH
13252: LD_INT 1
13254: ARRAY
13255: PPUSH
13256: CALL_OW 250
13260: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13261: LD_ADDR_VAR 0 3
13265: PUSH
13266: LD_VAR 0 1
13270: PUSH
13271: LD_INT 1
13273: ARRAY
13274: PPUSH
13275: CALL_OW 251
13279: ST_TO_ADDR
// DialogueOn ;
13280: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13284: LD_VAR 0 2
13288: PPUSH
13289: LD_VAR 0 3
13293: PPUSH
13294: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13298: LD_VAR 0 2
13302: PPUSH
13303: LD_VAR 0 3
13307: PPUSH
13308: LD_INT 2
13310: PPUSH
13311: LD_INT 6
13313: NEG
13314: PPUSH
13315: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13319: LD_INT 10
13321: PPUSH
13322: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13326: LD_EXP 28
13330: PPUSH
13331: LD_STRING DH-1-seecargo
13333: PPUSH
13334: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13338: LD_VAR 0 2
13342: PPUSH
13343: LD_VAR 0 3
13347: PPUSH
13348: LD_INT 2
13350: PPUSH
13351: CALL_OW 331
// DialogueOff ;
13355: CALL_OW 7
// end ;
13359: PPOPN 3
13361: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13362: LD_EXP 4
13366: PUSH
13367: LD_EXP 15
13371: PUSH
13372: LD_INT 300
13374: GREATEREQUAL
13375: AND
13376: IFFALSE 13448
13378: GO 13380
13380: DISABLE
// begin DialogueOn ;
13381: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13385: LD_EXP 36
13389: PPUSH
13390: LD_STRING DF-1-delivery-2
13392: PPUSH
13393: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13397: LD_EXP 28
13401: PPUSH
13402: LD_STRING DH-1-delivery-2
13404: PPUSH
13405: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13409: LD_EXP 36
13413: PPUSH
13414: LD_STRING DF-2-delivery-2
13416: PPUSH
13417: CALL_OW 94
// DialogueOff ;
13421: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13425: LD_STRING Crates2
13427: PPUSH
13428: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13432: LD_ADDR_EXP 17
13436: PUSH
13437: LD_INT 63000
13439: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13440: LD_ADDR_EXP 16
13444: PUSH
13445: LD_INT 600
13447: ST_TO_ADDR
// end ;
13448: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13449: LD_EXP 4
13453: PUSH
13454: LD_EXP 15
13458: PUSH
13459: LD_INT 600
13461: GREATEREQUAL
13462: AND
13463: PUSH
13464: LD_OWVAR 67
13468: PUSH
13469: LD_INT 1
13471: GREATER
13472: AND
13473: IFFALSE 13639
13475: GO 13477
13477: DISABLE
// begin DialogueOn ;
13478: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13482: LD_EXP 36
13486: PPUSH
13487: LD_STRING DF-1-delivery-3
13489: PPUSH
13490: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13494: LD_EXP 28
13498: PPUSH
13499: LD_STRING DH-1-delivery-3
13501: PPUSH
13502: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13506: LD_EXP 36
13510: PPUSH
13511: LD_STRING DF-2-delivery-3
13513: PPUSH
13514: CALL_OW 94
// if IsOk ( Kaia ) then
13518: LD_EXP 33
13522: PPUSH
13523: CALL_OW 302
13527: IFFALSE 13577
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13529: LD_EXP 33
13533: PPUSH
13534: LD_STRING DK-1-delivery-3
13536: PPUSH
13537: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13541: LD_EXP 28
13545: PPUSH
13546: LD_STRING DH-2-delivery-3
13548: PPUSH
13549: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13553: LD_EXP 29
13557: PPUSH
13558: LD_STRING DG-1-delivery-3
13560: PPUSH
13561: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13565: LD_EXP 30
13569: PPUSH
13570: LD_STRING DM-1-delivery-3
13572: PPUSH
13573: CALL_OW 88
// end ; DialogueOff ;
13577: CALL_OW 7
// if Difficulty = 2 then
13581: LD_OWVAR 67
13585: PUSH
13586: LD_INT 2
13588: EQUAL
13589: IFFALSE 13616
// begin ChangeMissionObjectives ( Crates3 ) ;
13591: LD_STRING Crates3
13593: PPUSH
13594: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13598: LD_ADDR_EXP 17
13602: PUSH
13603: LD_INT 63000
13605: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13606: LD_ADDR_EXP 16
13610: PUSH
13611: LD_INT 900
13613: ST_TO_ADDR
// end else
13614: GO 13639
// begin ChangeMissionObjectives ( Crates4 ) ;
13616: LD_STRING Crates4
13618: PPUSH
13619: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13623: LD_ADDR_EXP 17
13627: PUSH
13628: LD_INT 63000
13630: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13631: LD_ADDR_EXP 16
13635: PUSH
13636: LD_INT 1200
13638: ST_TO_ADDR
// end ; end ;
13639: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13640: LD_EXP 4
13644: PUSH
13645: LD_EXP 15
13649: PUSH
13650: LD_INT 600
13652: PUSH
13653: LD_INT 900
13655: PUSH
13656: LD_INT 1200
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: PUSH
13664: LD_OWVAR 67
13668: ARRAY
13669: GREATEREQUAL
13670: AND
13671: PUSH
13672: LD_EXP 16
13676: PUSH
13677: LD_EXP 17
13681: LESSEQUAL
13682: AND
13683: IFFALSE 13750
13685: GO 13687
13687: DISABLE
// begin retreatAllowed := true ;
13688: LD_ADDR_EXP 11
13692: PUSH
13693: LD_INT 1
13695: ST_TO_ADDR
// display_strings := [ ] ;
13696: LD_ADDR_OWVAR 47
13700: PUSH
13701: EMPTY
13702: ST_TO_ADDR
// DialogueOn ;
13703: CALL_OW 6
// InGameOn ;
13707: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13711: LD_EXP 37
13715: PPUSH
13716: LD_STRING DO-radio-end
13718: PPUSH
13719: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13723: LD_EXP 28
13727: PPUSH
13728: LD_STRING DH-1-radio-end
13730: PPUSH
13731: CALL_OW 88
// InGameOff ;
13735: CALL_OW 9
// DialogueOff ;
13739: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13743: LD_STRING Retreat
13745: PPUSH
13746: CALL_OW 337
// end ;
13750: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13751: LD_EXP 11
13755: IFFALSE 13886
13757: GO 13759
13759: DISABLE
13760: LD_INT 0
13762: PPUSH
13763: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13764: LD_INT 10
13766: PPUSH
13767: LD_INT 0
13769: PPUSH
13770: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13774: LD_ADDR_VAR 0 1
13778: PUSH
13779: LD_EXP 39
13783: PPUSH
13784: LD_INT 25
13786: PUSH
13787: LD_INT 2
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PPUSH
13794: CALL_OW 72
13798: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13799: LD_VAR 0 1
13803: PUSH
13804: LD_INT 102
13806: PPUSH
13807: LD_INT 69
13809: PPUSH
13810: CALL_OW 428
13814: PUSH
13815: LD_INT 0
13817: EQUAL
13818: AND
13819: IFFALSE 13886
// begin for i in tmp do
13821: LD_ADDR_VAR 0 2
13825: PUSH
13826: LD_VAR 0 1
13830: PUSH
13831: FOR_IN
13832: IFFALSE 13856
// if IsInUnit ( i ) then
13834: LD_VAR 0 2
13838: PPUSH
13839: CALL_OW 310
13843: IFFALSE 13854
// ComExitBuilding ( i ) ;
13845: LD_VAR 0 2
13849: PPUSH
13850: CALL_OW 122
13854: GO 13831
13856: POP
13857: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13858: LD_VAR 0 1
13862: PPUSH
13863: LD_INT 31
13865: PPUSH
13866: LD_INT 102
13868: PPUSH
13869: LD_INT 69
13871: PPUSH
13872: LD_INT 2
13874: PPUSH
13875: CALL_OW 205
// wait ( 0 0$3 ) ;
13879: LD_INT 105
13881: PPUSH
13882: CALL_OW 67
// end ; end ;
13886: PPOPN 2
13888: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13889: LD_EXP 11
13893: NOT
13894: PUSH
13895: LD_INT 5
13897: PPUSH
13898: CALL_OW 301
13902: AND
13903: IFFALSE 13935
13905: GO 13907
13907: DISABLE
// begin DialogueOn ;
13908: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
13912: LD_EXP 36
13916: PPUSH
13917: LD_STRING DF-1-failure
13919: PPUSH
13920: CALL_OW 94
// DialogueOff ;
13924: CALL_OW 7
// YouLost ( FarmerDepot ) ;
13928: LD_STRING FarmerDepot
13930: PPUSH
13931: CALL_OW 104
// end ;
13935: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
13936: LD_EXP 11
13940: PUSH
13941: LD_EXP 28
13945: PPUSH
13946: LD_EXP 36
13950: PPUSH
13951: CALL_OW 296
13955: PUSH
13956: LD_INT 12
13958: LESS
13959: AND
13960: PUSH
13961: LD_INT 81
13963: PUSH
13964: LD_INT 2
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 21
13973: PUSH
13974: LD_INT 1
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PPUSH
13985: CALL_OW 69
13989: NOT
13990: AND
13991: IFFALSE 14612
13993: GO 13995
13995: DISABLE
13996: LD_INT 0
13998: PPUSH
13999: PPUSH
14000: PPUSH
// begin allowConvoys := false ;
14001: LD_ADDR_EXP 12
14005: PUSH
14006: LD_INT 0
14008: ST_TO_ADDR
// InGameOn ;
14009: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14013: LD_EXP 28
14017: PPUSH
14018: LD_EXP 36
14022: PPUSH
14023: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14027: LD_EXP 36
14031: PPUSH
14032: LD_EXP 28
14036: PPUSH
14037: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14041: LD_EXP 36
14045: PPUSH
14046: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14050: LD_EXP 28
14054: PPUSH
14055: LD_STRING DH-1-end
14057: PPUSH
14058: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14062: LD_EXP 36
14066: PPUSH
14067: LD_STRING DF-1-end
14069: PPUSH
14070: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14074: LD_EXP 36
14078: PPUSH
14079: LD_STRING DF-2-end
14081: PPUSH
14082: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14086: LD_EXP 28
14090: PPUSH
14091: LD_STRING DH-2-end
14093: PPUSH
14094: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14098: LD_EXP 36
14102: PPUSH
14103: LD_STRING DF-3-end
14105: PPUSH
14106: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14110: LD_EXP 28
14114: PPUSH
14115: LD_STRING DH-3-end
14117: PPUSH
14118: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14122: LD_EXP 29
14126: PPUSH
14127: LD_STRING DG-1-end
14129: PPUSH
14130: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14134: LD_EXP 28
14138: PPUSH
14139: LD_STRING DH-4-end
14141: PPUSH
14142: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14146: LD_EXP 36
14150: PPUSH
14151: LD_STRING DF-4-end
14153: PPUSH
14154: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14158: LD_EXP 28
14162: PPUSH
14163: LD_STRING DH-5-end
14165: PPUSH
14166: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14170: LD_EXP 36
14174: PPUSH
14175: LD_STRING DF-5-end
14177: PPUSH
14178: CALL_OW 88
// InGameOff ;
14182: CALL_OW 9
// allowCargoEvacuation := true ;
14186: LD_ADDR_EXP 7
14190: PUSH
14191: LD_INT 1
14193: ST_TO_ADDR
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14194: LD_ADDR_VAR 0 2
14198: PUSH
14199: LD_INT 4
14201: PUSH
14202: LD_INT 3
14204: PUSH
14205: LD_INT 2
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: PUSH
14213: LD_OWVAR 67
14217: ARRAY
14218: ST_TO_ADDR
// if farmerSquad < max then
14219: LD_EXP 39
14223: PUSH
14224: LD_VAR 0 2
14228: LESS
14229: IFFALSE 14241
// max := farmerSquad ;
14231: LD_ADDR_VAR 0 2
14235: PUSH
14236: LD_EXP 39
14240: ST_TO_ADDR
// for i := 1 to max do
14241: LD_ADDR_VAR 0 1
14245: PUSH
14246: DOUBLE
14247: LD_INT 1
14249: DEC
14250: ST_TO_ADDR
14251: LD_VAR 0 2
14255: PUSH
14256: FOR_TO
14257: IFFALSE 14295
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14259: LD_EXP 39
14263: PUSH
14264: LD_INT 1
14266: ARRAY
14267: PPUSH
14268: LD_INT 2
14270: PPUSH
14271: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14275: LD_ADDR_EXP 39
14279: PUSH
14280: LD_EXP 39
14284: PPUSH
14285: LD_INT 1
14287: PPUSH
14288: CALL_OW 3
14292: ST_TO_ADDR
// end ;
14293: GO 14256
14295: POP
14296: POP
// for i in Farmer ^ farmerSquad do
14297: LD_ADDR_VAR 0 1
14301: PUSH
14302: LD_EXP 36
14306: PUSH
14307: LD_EXP 39
14311: ADD
14312: PUSH
14313: FOR_IN
14314: IFFALSE 14353
// begin if IsInUnit ( i ) then
14316: LD_VAR 0 1
14320: PPUSH
14321: CALL_OW 310
14325: IFFALSE 14336
// ComExitBuilding ( i ) ;
14327: LD_VAR 0 1
14331: PPUSH
14332: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14336: LD_VAR 0 1
14340: PPUSH
14341: LD_INT 102
14343: PPUSH
14344: LD_INT 7
14346: PPUSH
14347: CALL_OW 171
// end ;
14351: GO 14313
14353: POP
14354: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14355: LD_ADDR_VAR 0 1
14359: PUSH
14360: LD_INT 22
14362: PUSH
14363: LD_INT 5
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 3
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PPUSH
14384: CALL_OW 69
14388: PUSH
14389: LD_INT 5
14391: DIFF
14392: PUSH
14393: FOR_IN
14394: IFFALSE 14410
// SetSide ( i , 2 ) ;
14396: LD_VAR 0 1
14400: PPUSH
14401: LD_INT 2
14403: PPUSH
14404: CALL_OW 235
14408: GO 14393
14410: POP
14411: POP
// repeat wait ( 0 0$1 ) ;
14412: LD_INT 35
14414: PPUSH
14415: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14419: LD_ADDR_VAR 0 3
14423: PUSH
14424: LD_EXP 36
14428: PUSH
14429: LD_EXP 39
14433: ADD
14434: PPUSH
14435: LD_INT 95
14437: PUSH
14438: LD_INT 3
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PPUSH
14445: CALL_OW 72
14449: ST_TO_ADDR
// if tmp then
14450: LD_VAR 0 3
14454: IFFALSE 14498
// for i in tmp do
14456: LD_ADDR_VAR 0 1
14460: PUSH
14461: LD_VAR 0 3
14465: PUSH
14466: FOR_IN
14467: IFFALSE 14496
// begin farmerSquad := farmerSquad diff i ;
14469: LD_ADDR_EXP 39
14473: PUSH
14474: LD_EXP 39
14478: PUSH
14479: LD_VAR 0 1
14483: DIFF
14484: ST_TO_ADDR
// RemoveUnit ( i ) ;
14485: LD_VAR 0 1
14489: PPUSH
14490: CALL_OW 64
// end ;
14494: GO 14466
14496: POP
14497: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14498: LD_EXP 39
14502: PUSH
14503: EMPTY
14504: EQUAL
14505: PUSH
14506: LD_EXP 36
14510: PPUSH
14511: CALL_OW 305
14515: NOT
14516: AND
14517: IFFALSE 14412
// if farmerHumanLoseCounter = 0 then
14519: LD_EXP 20
14523: PUSH
14524: LD_INT 0
14526: EQUAL
14527: IFFALSE 14536
// SetAchievement ( ACH_BABY ) ;
14529: LD_STRING ACH_BABY
14531: PPUSH
14532: CALL_OW 543
// wait ( 1 1$00 ) ;
14536: LD_INT 2100
14538: PPUSH
14539: CALL_OW 67
// SendAttack ;
14543: CALL 6123 0 0
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
14547: LD_ADDR_VAR 0 1
14551: PUSH
14552: DOUBLE
14553: LD_INT 1
14555: DEC
14556: ST_TO_ADDR
14557: LD_INT 2
14559: PUSH
14560: LD_INT 3
14562: PUSH
14563: LD_INT 4
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: PUSH
14571: LD_OWVAR 67
14575: ARRAY
14576: PUSH
14577: FOR_TO
14578: IFFALSE 14610
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 ] [ Difficulty ] ) ;
14580: LD_INT 4200
14582: PUSH
14583: LD_INT 3500
14585: PUSH
14586: LD_INT 3150
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: LIST
14593: PUSH
14594: LD_OWVAR 67
14598: ARRAY
14599: PPUSH
14600: CALL_OW 67
// SendAttack ;
14604: CALL 6123 0 0
// end ;
14608: GO 14577
14610: POP
14611: POP
// end ;
14612: PPOPN 3
14614: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14615: LD_EXP 7
14619: PUSH
14620: LD_EXP 21
14624: PUSH
14625: LD_INT 0
14627: GREATER
14628: AND
14629: IFFALSE 14639
14631: GO 14633
14633: DISABLE
// begin enable ;
14634: ENABLE
// CargoEvacuation ;
14635: CALL 3644 0 0
// end ;
14639: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14640: LD_EXP 17
14644: PUSH
14645: LD_INT 18900
14647: LESSEQUAL
14648: IFFALSE 14697
14650: GO 14652
14652: DISABLE
// begin DialogueOn ;
14653: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14657: LD_EXP 36
14661: PPUSH
14662: LD_STRING DF-1-distribution-a
14664: PPUSH
14665: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14669: LD_EXP 28
14673: PPUSH
14674: LD_STRING DH-1-distribution-a
14676: PPUSH
14677: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14681: LD_EXP 36
14685: PPUSH
14686: LD_STRING DF-2-distribution-a
14688: PPUSH
14689: CALL_OW 94
// DialogueOff ;
14693: CALL_OW 7
// end ;
14697: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14698: LD_EXP 17
14702: PUSH
14703: LD_INT 0
14705: LESSEQUAL
14706: IFFALSE 14738
14708: GO 14710
14710: DISABLE
// begin DialogueOn ;
14711: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14715: LD_EXP 36
14719: PPUSH
14720: LD_STRING DF-3-distribution-a
14722: PPUSH
14723: CALL_OW 94
// YouLost ( Distribution ) ;
14727: LD_STRING Distribution
14729: PPUSH
14730: CALL_OW 104
// DialogueOff ;
14734: CALL_OW 7
// end ;
14738: END
// every 0 0$1 trigger vehCounter >= 2 do
14739: LD_EXP 22
14743: PUSH
14744: LD_INT 2
14746: GREATEREQUAL
14747: IFFALSE 14759
14749: GO 14751
14751: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14752: LD_STRING VehConstructed
14754: PPUSH
14755: CALL_OW 337
14759: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14760: LD_INT 22
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: LD_INT 34
14772: PUSH
14773: LD_INT 12
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PPUSH
14784: CALL_OW 69
14788: IFFALSE 14848
14790: GO 14792
14792: DISABLE
// begin DialogueOn ;
14793: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14797: LD_EXP 28
14801: PPUSH
14802: LD_STRING DH-1-truck
14804: PPUSH
14805: CALL_OW 88
// if IsOk ( Markov ) then
14809: LD_EXP 35
14813: PPUSH
14814: CALL_OW 302
14818: IFFALSE 14844
// begin Say ( Markov , DMar-1-truck ) ;
14820: LD_EXP 35
14824: PPUSH
14825: LD_STRING DMar-1-truck
14827: PPUSH
14828: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14832: LD_EXP 28
14836: PPUSH
14837: LD_STRING DH-2-truck
14839: PPUSH
14840: CALL_OW 88
// end ; DialogueOff ;
14844: CALL_OW 7
// end ;
14848: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14849: LD_INT 0
14851: PPUSH
14852: PPUSH
14853: PPUSH
// if IsOk ( Givi ) then
14854: LD_EXP 29
14858: PPUSH
14859: CALL_OW 302
14863: IFFALSE 14879
// begin Say ( Givi , DG-1-nocargo ) ;
14865: LD_EXP 29
14869: PPUSH
14870: LD_STRING DG-1-nocargo
14872: PPUSH
14873: CALL_OW 88
// exit ;
14877: GO 14975
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14879: LD_ADDR_VAR 0 2
14883: PUSH
14884: LD_EXP 42
14888: PPUSH
14889: LD_INT 26
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PPUSH
14899: CALL_OW 72
14903: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14904: LD_ADDR_VAR 0 3
14908: PUSH
14909: LD_EXP 42
14913: PPUSH
14914: LD_INT 26
14916: PUSH
14917: LD_INT 2
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PPUSH
14924: CALL_OW 72
14928: ST_TO_ADDR
// if randomMen then
14929: LD_VAR 0 2
14933: IFFALSE 14953
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
14935: LD_VAR 0 2
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: PPUSH
14944: LD_STRING DArm-1-nocargo
14946: PPUSH
14947: CALL_OW 88
14951: GO 14975
// if randomWomen then
14953: LD_VAR 0 3
14957: IFFALSE 14975
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
14959: LD_VAR 0 3
14963: PUSH
14964: LD_INT 1
14966: ARRAY
14967: PPUSH
14968: LD_STRING DArf-1-nocargo
14970: PPUSH
14971: CALL_OW 88
// end ;
14975: LD_VAR 0 1
14979: RET
// export function IncomingAttack ; begin
14980: LD_INT 0
14982: PPUSH
// if attackWave = 1 then
14983: LD_EXP 19
14987: PUSH
14988: LD_INT 1
14990: EQUAL
14991: IFFALSE 15062
// begin DialogueOn ;
14993: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
14997: LD_EXP 37
15001: PPUSH
15002: LD_STRING DO-1-radio-1
15004: PPUSH
15005: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15009: LD_EXP 28
15013: PPUSH
15014: LD_STRING DH-1-radio-1-
15016: PPUSH
15017: CALL_OW 88
// if IsOk ( Markov ) then
15021: LD_EXP 35
15025: PPUSH
15026: CALL_OW 302
15030: IFFALSE 15056
// begin Say ( Markov , DMar-1-radio-1 ) ;
15032: LD_EXP 35
15036: PPUSH
15037: LD_STRING DMar-1-radio-1
15039: PPUSH
15040: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15044: LD_EXP 28
15048: PPUSH
15049: LD_STRING DH-2-radio-1
15051: PPUSH
15052: CALL_OW 88
// end ; DialogueOff ;
15056: CALL_OW 7
// end else
15060: GO 15086
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15062: LD_EXP 37
15066: PPUSH
15067: LD_STRING DO-1-radio-u
15069: PPUSH
15070: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15074: LD_EXP 28
15078: PPUSH
15079: LD_STRING DH-1-radio-u
15081: PPUSH
15082: CALL_OW 88
// end ; end ;
15086: LD_VAR 0 1
15090: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15091: LD_EXP 44
15095: PPUSH
15096: LD_INT 95
15098: PUSH
15099: LD_INT 8
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: PPUSH
15106: CALL_OW 72
15110: IFFALSE 15213
15112: GO 15114
15114: DISABLE
15115: LD_INT 0
15117: PPUSH
// begin enable ;
15118: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15119: LD_ADDR_VAR 0 1
15123: PUSH
15124: LD_EXP 44
15128: PPUSH
15129: LD_INT 95
15131: PUSH
15132: LD_INT 8
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PPUSH
15139: CALL_OW 72
15143: PUSH
15144: FOR_IN
15145: IFFALSE 15174
// begin usForces := usForces diff i ;
15147: LD_ADDR_EXP 44
15151: PUSH
15152: LD_EXP 44
15156: PUSH
15157: LD_VAR 0 1
15161: DIFF
15162: ST_TO_ADDR
// RemoveUnit ( i ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: CALL_OW 64
// end ;
15172: GO 15144
15174: POP
15175: POP
// if not americanHasEscaped and attackWave = 1 then
15176: LD_EXP 8
15180: NOT
15181: PUSH
15182: LD_EXP 19
15186: PUSH
15187: LD_INT 1
15189: EQUAL
15190: AND
15191: IFFALSE 15213
// begin americanHasEscaped := true ;
15193: LD_ADDR_EXP 8
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15201: LD_EXP 28
15205: PPUSH
15206: LD_STRING DH-2-assault-a
15208: PPUSH
15209: CALL_OW 88
// end ; end ;
15213: PPOPN 1
15215: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15216: LD_INT 4
15218: PPUSH
15219: LD_INT 22
15221: PUSH
15222: LD_INT 1
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PPUSH
15229: CALL_OW 70
15233: PUSH
15234: LD_EXP 11
15238: NOT
15239: AND
15240: IFFALSE 15257
15242: GO 15244
15244: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15245: LD_EXP 36
15249: PPUSH
15250: LD_STRING DF-1-attack
15252: PPUSH
15253: CALL_OW 94
15257: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15258: LD_INT 5
15260: PPUSH
15261: CALL_OW 255
15265: PUSH
15266: LD_INT 2
15268: EQUAL
15269: IFFALSE 15281
15271: GO 15273
15273: DISABLE
// YouLost ( Attack ) ;
15274: LD_STRING Attack
15276: PPUSH
15277: CALL_OW 104
15281: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15282: LD_INT 22
15284: PUSH
15285: LD_INT 1
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: LD_INT 21
15294: PUSH
15295: LD_INT 1
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PPUSH
15306: CALL_OW 69
15310: NOT
15311: PUSH
15312: LD_INT 22
15314: PUSH
15315: LD_INT 4
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PPUSH
15322: CALL_OW 69
15326: NOT
15327: AND
15328: PUSH
15329: LD_EXP 11
15333: NOT
15334: AND
15335: PUSH
15336: LD_EXP 15
15340: PUSH
15341: LD_INT 90
15343: GREATER
15344: AND
15345: PUSH
15346: LD_INT 7
15348: PPUSH
15349: LD_INT 22
15351: PUSH
15352: LD_INT 2
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 21
15361: PUSH
15362: LD_INT 1
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PPUSH
15373: CALL_OW 70
15377: AND
15378: PUSH
15379: LD_INT 22
15381: PUSH
15382: LD_INT 2
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 50
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: LD_INT 30
15397: PUSH
15398: LD_INT 0
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: PPUSH
15410: CALL_OW 69
15414: AND
15415: IFFALSE 16208
15417: GO 15419
15419: DISABLE
15420: LD_INT 0
15422: PPUSH
15423: PPUSH
15424: PPUSH
15425: PPUSH
15426: PPUSH
// begin depot := usDepot ;
15427: LD_ADDR_VAR 0 5
15431: PUSH
15432: LD_INT 11
15434: ST_TO_ADDR
// if not depot then
15435: LD_VAR 0 5
15439: NOT
15440: IFFALSE 15480
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15442: LD_ADDR_VAR 0 5
15446: PUSH
15447: LD_INT 22
15449: PUSH
15450: LD_INT 2
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 30
15459: PUSH
15460: LD_INT 0
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: PUSH
15476: LD_INT 1
15478: ARRAY
15479: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15480: LD_ADDR_VAR 0 1
15484: PUSH
15485: LD_EXP 42
15489: PPUSH
15490: LD_INT 26
15492: PUSH
15493: LD_INT 1
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PPUSH
15500: CALL_OW 72
15504: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15505: LD_ADDR_VAR 0 2
15509: PUSH
15510: LD_EXP 42
15514: PPUSH
15515: LD_INT 26
15517: PUSH
15518: LD_INT 2
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PPUSH
15525: CALL_OW 72
15529: ST_TO_ADDR
// if IsOk ( Kaia ) then
15530: LD_EXP 33
15534: PPUSH
15535: CALL_OW 302
15539: IFFALSE 15560
// speaker := [ Kaia , DK ] else
15541: LD_ADDR_VAR 0 3
15545: PUSH
15546: LD_EXP 33
15550: PUSH
15551: LD_STRING DK
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: ST_TO_ADDR
15558: GO 15640
// if randomMen then
15560: LD_VAR 0 1
15564: IFFALSE 15599
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15566: LD_ADDR_VAR 0 3
15570: PUSH
15571: LD_VAR 0 1
15575: PUSH
15576: LD_INT 1
15578: PPUSH
15579: LD_VAR 0 1
15583: PPUSH
15584: CALL_OW 12
15588: ARRAY
15589: PUSH
15590: LD_STRING DArm
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: ST_TO_ADDR
15597: GO 15640
// if randomWomen then
15599: LD_VAR 0 2
15603: IFFALSE 15638
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_VAR 0 2
15614: PUSH
15615: LD_INT 1
15617: PPUSH
15618: LD_VAR 0 2
15622: PPUSH
15623: CALL_OW 12
15627: ARRAY
15628: PUSH
15629: LD_STRING DArf
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: ST_TO_ADDR
15636: GO 15640
// exit ;
15638: GO 16208
// if IsInUnit ( speaker [ 1 ] ) then
15640: LD_VAR 0 3
15644: PUSH
15645: LD_INT 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 310
15653: IFFALSE 15676
// place := IsInUnit ( speaker [ 1 ] ) else
15655: LD_ADDR_VAR 0 4
15659: PUSH
15660: LD_VAR 0 3
15664: PUSH
15665: LD_INT 1
15667: ARRAY
15668: PPUSH
15669: CALL_OW 310
15673: ST_TO_ADDR
15674: GO 15690
// place := speaker [ 1 ] ;
15676: LD_ADDR_VAR 0 4
15680: PUSH
15681: LD_VAR 0 3
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15690: LD_VAR 0 4
15694: PPUSH
15695: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15699: LD_VAR 0 4
15703: PPUSH
15704: CALL_OW 250
15708: PPUSH
15709: LD_VAR 0 4
15713: PPUSH
15714: CALL_OW 251
15718: PPUSH
15719: CALL 2131 0 2
// wait ( 0 0$2 ) ;
15723: LD_INT 70
15725: PPUSH
15726: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15730: LD_EXP 38
15734: PPUSH
15735: CALL_OW 305
15739: NOT
15740: IFFALSE 15744
// exit ;
15742: GO 16208
// allowConvoys := false ;
15744: LD_ADDR_EXP 12
15748: PUSH
15749: LD_INT 0
15751: ST_TO_ADDR
// InGameOn ;
15752: CALL_OW 8
// wait ( 0 0$1 ) ;
15756: LD_INT 35
15758: PPUSH
15759: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15763: LD_EXP 38
15767: PPUSH
15768: LD_STRING DI-1-land
15770: PPUSH
15771: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15775: LD_VAR 0 3
15779: PUSH
15780: LD_INT 1
15782: ARRAY
15783: PPUSH
15784: CALL_OW 310
15788: IFFALSE 15803
// ComExit ( speaker [ 1 ] ) ;
15790: LD_VAR 0 3
15794: PUSH
15795: LD_INT 1
15797: ARRAY
15798: PPUSH
15799: CALL 73148 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15803: LD_VAR 0 3
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: LD_EXP 38
15816: PPUSH
15817: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15821: LD_VAR 0 3
15825: PUSH
15826: LD_INT 1
15828: ARRAY
15829: PPUSH
15830: LD_EXP 38
15834: PPUSH
15835: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15839: LD_EXP 38
15843: PPUSH
15844: LD_VAR 0 3
15848: PUSH
15849: LD_INT 1
15851: ARRAY
15852: PPUSH
15853: CALL_OW 119
// wait ( 0 0$1 ) ;
15857: LD_INT 35
15859: PPUSH
15860: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15864: LD_VAR 0 3
15868: PUSH
15869: LD_INT 1
15871: ARRAY
15872: PPUSH
15873: LD_VAR 0 3
15877: PUSH
15878: LD_INT 2
15880: ARRAY
15881: PUSH
15882: LD_STRING -1-land
15884: STR
15885: PPUSH
15886: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15890: LD_EXP 38
15894: PPUSH
15895: LD_STRING DI-2-land
15897: PPUSH
15898: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15902: LD_VAR 0 3
15906: PUSH
15907: LD_INT 1
15909: ARRAY
15910: PPUSH
15911: LD_VAR 0 3
15915: PUSH
15916: LD_INT 2
15918: ARRAY
15919: PUSH
15920: LD_STRING -2-land
15922: STR
15923: PPUSH
15924: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
15928: LD_VAR 0 3
15932: PUSH
15933: LD_INT 1
15935: ARRAY
15936: PPUSH
15937: LD_VAR 0 3
15941: PUSH
15942: LD_INT 2
15944: ARRAY
15945: PUSH
15946: LD_STRING -3-land
15948: STR
15949: PPUSH
15950: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
15954: LD_EXP 28
15958: PPUSH
15959: LD_STRING DH-1-land
15961: PPUSH
15962: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
15966: LD_VAR 0 5
15970: PPUSH
15971: CALL_OW 313
15975: PUSH
15976: LD_INT 6
15978: EQUAL
15979: IFFALSE 15999
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
15981: LD_VAR 0 5
15985: PPUSH
15986: CALL_OW 313
15990: PUSH
15991: LD_INT 1
15993: ARRAY
15994: PPUSH
15995: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
15999: LD_EXP 38
16003: PPUSH
16004: LD_INT 2
16006: PPUSH
16007: CALL_OW 235
// CenterOnUnits ( depot ) ;
16011: LD_VAR 0 5
16015: PPUSH
16016: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16020: LD_EXP 38
16024: PPUSH
16025: LD_VAR 0 5
16029: PPUSH
16030: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16034: LD_VAR 0 3
16038: PUSH
16039: LD_INT 1
16041: ARRAY
16042: PPUSH
16043: LD_VAR 0 5
16047: PPUSH
16048: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16052: LD_INT 35
16054: PPUSH
16055: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16059: LD_EXP 38
16063: PPUSH
16064: CALL_OW 310
16068: PUSH
16069: LD_EXP 38
16073: PPUSH
16074: CALL_OW 302
16078: NOT
16079: OR
16080: PUSH
16081: LD_VAR 0 5
16085: PPUSH
16086: CALL_OW 302
16090: NOT
16091: OR
16092: IFFALSE 16052
// InGameOff ;
16094: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16098: LD_EXP 38
16102: PPUSH
16103: CALL_OW 302
16107: NOT
16108: IFFALSE 16112
// exit ;
16110: GO 16208
// if not IsOk ( depot ) then
16112: LD_VAR 0 5
16116: PPUSH
16117: CALL_OW 302
16121: NOT
16122: IFFALSE 16185
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16124: LD_EXP 38
16128: PPUSH
16129: LD_INT 30
16131: PPUSH
16132: LD_INT 1
16134: PPUSH
16135: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16139: LD_INT 35
16141: PPUSH
16142: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16146: LD_EXP 38
16150: PPUSH
16151: LD_INT 30
16153: PPUSH
16154: LD_INT 1
16156: PPUSH
16157: CALL_OW 307
16161: PUSH
16162: LD_EXP 38
16166: PPUSH
16167: CALL_OW 301
16171: OR
16172: IFFALSE 16139
// RemoveUnit ( Ibrahim ) ;
16174: LD_EXP 38
16178: PPUSH
16179: CALL_OW 64
// exit ;
16183: GO 16208
// end ; ibrahimInDepot := true ;
16185: LD_ADDR_EXP 25
16189: PUSH
16190: LD_INT 1
16192: ST_TO_ADDR
// allowConvoys := true ;
16193: LD_ADDR_EXP 12
16197: PUSH
16198: LD_INT 1
16200: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16201: LD_STRING IbrahimInDepot
16203: PPUSH
16204: CALL_OW 97
// end ;
16208: PPOPN 5
16210: END
// export function IbrahimQuery ; begin
16211: LD_INT 0
16213: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16214: LD_STRING IbrahimQuery
16216: PPUSH
16217: CALL_OW 97
16221: PUSH
16222: LD_INT 1
16224: DOUBLE
16225: EQUAL
16226: IFTRUE 16230
16228: GO 16506
16230: POP
// begin allowConvoys := false ;
16231: LD_ADDR_EXP 12
16235: PUSH
16236: LD_INT 0
16238: ST_TO_ADDR
// ibrahimInDepot := false ;
16239: LD_ADDR_EXP 25
16243: PUSH
16244: LD_INT 0
16246: ST_TO_ADDR
// InGameOn ;
16247: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16251: LD_EXP 28
16255: PPUSH
16256: CALL_OW 87
// wait ( 0 0$1 ) ;
16260: LD_INT 35
16262: PPUSH
16263: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16267: LD_EXP 28
16271: PPUSH
16272: LD_STRING DH-1-interrogation
16274: PPUSH
16275: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16279: LD_EXP 38
16283: PPUSH
16284: LD_STRING DI-1-interrogation
16286: PPUSH
16287: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16291: LD_EXP 28
16295: PPUSH
16296: LD_STRING DH-2-interrogation
16298: PPUSH
16299: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16303: LD_EXP 38
16307: PPUSH
16308: LD_STRING DI-2-interrogation
16310: PPUSH
16311: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16315: LD_EXP 28
16319: PPUSH
16320: LD_STRING DH-3-interrogation
16322: PPUSH
16323: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16327: LD_EXP 38
16331: PPUSH
16332: LD_STRING DI-3-interrogation
16334: PPUSH
16335: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16339: LD_EXP 28
16343: PPUSH
16344: LD_STRING DH-4-interrogation
16346: PPUSH
16347: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16351: LD_EXP 38
16355: PPUSH
16356: LD_STRING DI-4-interrogation
16358: PPUSH
16359: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16363: LD_EXP 28
16367: PPUSH
16368: LD_STRING DH-5-interrogation
16370: PPUSH
16371: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16375: LD_EXP 38
16379: PPUSH
16380: LD_STRING DI-5-interrogation
16382: PPUSH
16383: CALL_OW 88
// wait ( 0 0$1 ) ;
16387: LD_INT 35
16389: PPUSH
16390: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16394: LD_STRING IbrahimDecisionQuery
16396: PPUSH
16397: CALL_OW 97
16401: PUSH
16402: LD_INT 1
16404: DOUBLE
16405: EQUAL
16406: IFTRUE 16410
16408: GO 16434
16410: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16411: LD_EXP 38
16415: PPUSH
16416: LD_STRING DI-1-kill
16418: PPUSH
16419: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16423: LD_EXP 38
16427: PPUSH
16428: CALL_OW 66
// end ; 2 :
16432: GO 16500
16434: LD_INT 2
16436: DOUBLE
16437: EQUAL
16438: IFTRUE 16442
16440: GO 16499
16442: POP
// begin SetSide ( Ibrahim , 6 ) ;
16443: LD_EXP 38
16447: PPUSH
16448: LD_INT 6
16450: PPUSH
16451: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16455: LD_EXP 38
16459: PPUSH
16460: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16464: LD_EXP 38
16468: PPUSH
16469: LD_INT 66
16471: PPUSH
16472: LD_INT 2
16474: PPUSH
16475: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16479: LD_EXP 38
16483: PPUSH
16484: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16488: LD_EXP 28
16492: PPUSH
16493: CALL_OW 122
// end ; end ;
16497: GO 16500
16499: POP
// InGameOff ;
16500: CALL_OW 9
// end ; 2 :
16504: GO 16520
16506: LD_INT 2
16508: DOUBLE
16509: EQUAL
16510: IFTRUE 16514
16512: GO 16519
16514: POP
// exit ; end ;
16515: GO 16596
16517: GO 16520
16519: POP
// allowConvoys := true ;
16520: LD_ADDR_EXP 12
16524: PUSH
16525: LD_INT 1
16527: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16528: LD_INT 5250
16530: PPUSH
16531: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16535: LD_INT 35
16537: PPUSH
16538: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16542: LD_INT 81
16544: PUSH
16545: LD_INT 2
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 21
16554: PUSH
16555: LD_INT 1
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PPUSH
16566: CALL_OW 69
16570: NOT
16571: IFFALSE 16535
// ComMoveXY ( Ibrahim , 38 , 28 ) ;
16573: LD_EXP 38
16577: PPUSH
16578: LD_INT 38
16580: PPUSH
16581: LD_INT 28
16583: PPUSH
16584: CALL_OW 111
// ibrahimIsFree := true ;
16588: LD_ADDR_EXP 26
16592: PUSH
16593: LD_INT 1
16595: ST_TO_ADDR
// end ;
16596: LD_VAR 0 1
16600: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
16601: LD_EXP 26
16605: PUSH
16606: LD_EXP 38
16610: PPUSH
16611: CALL_OW 302
16615: AND
16616: PUSH
16617: LD_INT 2
16619: PPUSH
16620: LD_EXP 38
16624: PPUSH
16625: CALL_OW 292
16629: AND
16630: IFFALSE 17390
16632: GO 16634
16634: DISABLE
16635: LD_INT 0
16637: PPUSH
16638: PPUSH
16639: PPUSH
16640: PPUSH
16641: PPUSH
16642: PPUSH
// begin allowConvoys := false ;
16643: LD_ADDR_EXP 12
16647: PUSH
16648: LD_INT 0
16650: ST_TO_ADDR
// depot := usDepot ;
16651: LD_ADDR_VAR 0 4
16655: PUSH
16656: LD_INT 11
16658: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16659: LD_INT 11
16661: NOT
16662: PUSH
16663: LD_INT 22
16665: PUSH
16666: LD_INT 2
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 50
16675: PUSH
16676: EMPTY
16677: LIST
16678: PUSH
16679: LD_INT 30
16681: PUSH
16682: LD_INT 0
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: LIST
16693: PPUSH
16694: CALL_OW 69
16698: AND
16699: IFFALSE 16746
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16701: LD_ADDR_VAR 0 4
16705: PUSH
16706: LD_INT 22
16708: PUSH
16709: LD_INT 2
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 50
16718: PUSH
16719: EMPTY
16720: LIST
16721: PUSH
16722: LD_INT 30
16724: PUSH
16725: LD_INT 0
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: LIST
16736: PPUSH
16737: CALL_OW 69
16741: PUSH
16742: LD_INT 1
16744: ARRAY
16745: ST_TO_ADDR
// InGameOn ;
16746: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16750: LD_EXP 38
16754: PPUSH
16755: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16759: LD_EXP 28
16763: PPUSH
16764: LD_EXP 38
16768: PPUSH
16769: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16773: LD_EXP 38
16777: PPUSH
16778: LD_EXP 28
16782: PPUSH
16783: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16787: LD_EXP 38
16791: PPUSH
16792: LD_STRING DI-1-free
16794: PPUSH
16795: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16799: LD_EXP 28
16803: PPUSH
16804: LD_STRING DH-1-free
16806: PPUSH
16807: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16811: LD_EXP 38
16815: PPUSH
16816: LD_STRING DI-2-free
16818: PPUSH
16819: CALL_OW 88
// changeClass := 0 ;
16823: LD_ADDR_VAR 0 1
16827: PUSH
16828: LD_INT 0
16830: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16831: LD_STRING IbrahimJoinQuery
16833: PPUSH
16834: CALL_OW 97
16838: PUSH
16839: LD_INT 1
16841: DOUBLE
16842: EQUAL
16843: IFTRUE 16847
16845: GO 16858
16847: POP
// begin changeClass := 1 ;
16848: LD_ADDR_VAR 0 1
16852: PUSH
16853: LD_INT 1
16855: ST_TO_ADDR
// end ; 2 :
16856: GO 17098
16858: LD_INT 2
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 17018
16866: POP
// begin Say ( Heike , DH-1-decline ) ;
16867: LD_EXP 28
16871: PPUSH
16872: LD_STRING DH-1-decline
16874: PPUSH
16875: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16879: LD_EXP 38
16883: PPUSH
16884: LD_STRING DI-1-decline
16886: PPUSH
16887: CALL_OW 88
// InGameOff ;
16891: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16895: LD_EXP 38
16899: PPUSH
16900: LD_INT 30
16902: PPUSH
16903: LD_INT 1
16905: PPUSH
16906: CALL_OW 111
// p := 0 ;
16910: LD_ADDR_VAR 0 3
16914: PUSH
16915: LD_INT 0
16917: ST_TO_ADDR
// repeat p := p + 1 ;
16918: LD_ADDR_VAR 0 3
16922: PUSH
16923: LD_VAR 0 3
16927: PUSH
16928: LD_INT 1
16930: PLUS
16931: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16932: LD_INT 35
16934: PPUSH
16935: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
16939: LD_EXP 38
16943: PPUSH
16944: LD_INT 30
16946: PPUSH
16947: LD_INT 1
16949: PPUSH
16950: CALL_OW 307
16954: PUSH
16955: LD_INT 22
16957: PUSH
16958: LD_INT 2
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 101
16967: PUSH
16968: LD_INT 6
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PPUSH
16979: CALL_OW 69
16983: NOT
16984: OR
16985: PUSH
16986: LD_VAR 0 3
16990: PUSH
16991: LD_INT 10
16993: GREATER
16994: OR
16995: IFFALSE 16918
// RemoveUnit ( Ibrahim ) ;
16997: LD_EXP 38
17001: PPUSH
17002: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17006: LD_INT 1
17008: PPUSH
17009: LD_STRING 03_IbrahimHasEscaped
17011: PPUSH
17012: CALL_OW 39
// end ; 3 :
17016: GO 17098
17018: LD_INT 3
17020: DOUBLE
17021: EQUAL
17022: IFTRUE 17026
17024: GO 17097
17026: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17027: LD_EXP 28
17031: PPUSH
17032: LD_STRING DH-1-radio-hq
17034: PPUSH
17035: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17039: LD_EXP 37
17043: PPUSH
17044: LD_STRING DO-1-radio-hq
17046: PPUSH
17047: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17051: LD_EXP 28
17055: PPUSH
17056: LD_STRING DH-2-radio-hq
17058: PPUSH
17059: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17063: LD_EXP 37
17067: PPUSH
17068: LD_STRING DO-2-radio-hq
17070: PPUSH
17071: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17075: LD_EXP 28
17079: PPUSH
17080: LD_STRING DH-3-radio-hq
17082: PPUSH
17083: CALL_OW 88
// changeClass := 1 ;
17087: LD_ADDR_VAR 0 1
17091: PUSH
17092: LD_INT 1
17094: ST_TO_ADDR
// end ; end ;
17095: GO 17098
17097: POP
// if changeClass then
17098: LD_VAR 0 1
17102: IFFALSE 17390
// begin Say ( Heike , DH-1-agree ) ;
17104: LD_EXP 28
17108: PPUSH
17109: LD_STRING DH-1-agree
17111: PPUSH
17112: CALL_OW 88
// if IsOk ( Givi ) then
17116: LD_EXP 29
17120: PPUSH
17121: CALL_OW 302
17125: IFFALSE 17163
// begin Say ( Givi , DG-1-agree ) ;
17127: LD_EXP 29
17131: PPUSH
17132: LD_STRING DG-1-agree
17134: PPUSH
17135: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17139: LD_EXP 28
17143: PPUSH
17144: LD_STRING DH-2-agree
17146: PPUSH
17147: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17151: LD_EXP 29
17155: PPUSH
17156: LD_STRING DG-2-agree
17158: PPUSH
17159: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17163: LD_VAR 0 4
17167: PPUSH
17168: CALL_OW 313
17172: PUSH
17173: LD_INT 6
17175: EQUAL
17176: IFFALSE 17196
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17178: LD_VAR 0 4
17182: PPUSH
17183: CALL_OW 313
17187: PUSH
17188: LD_INT 1
17190: ARRAY
17191: PPUSH
17192: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17196: LD_EXP 38
17200: PPUSH
17201: LD_INT 2
17203: PPUSH
17204: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17208: LD_ADDR_VAR 0 5
17212: PUSH
17213: LD_EXP 38
17217: PPUSH
17218: CALL_OW 250
17222: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17223: LD_ADDR_VAR 0 6
17227: PUSH
17228: LD_EXP 38
17232: PPUSH
17233: CALL_OW 251
17237: ST_TO_ADDR
// if depot then
17238: LD_VAR 0 4
17242: IFFALSE 17291
// begin ComEnterUnit ( Ibrahim , depot ) ;
17244: LD_EXP 38
17248: PPUSH
17249: LD_VAR 0 4
17253: PPUSH
17254: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17258: LD_INT 35
17260: PPUSH
17261: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17265: LD_EXP 38
17269: PPUSH
17270: CALL_OW 310
17274: IFFALSE 17258
// b := IsInUnit ( Ibrahim ) ;
17276: LD_ADDR_VAR 0 2
17280: PUSH
17281: LD_EXP 38
17285: PPUSH
17286: CALL_OW 310
17290: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17291: LD_EXP 38
17295: PPUSH
17296: CALL_OW 64
// uc_side := 2 ;
17300: LD_ADDR_OWVAR 20
17304: PUSH
17305: LD_INT 2
17307: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17308: LD_ADDR_EXP 38
17312: PUSH
17313: LD_STRING Ibrahim
17315: PPUSH
17316: LD_INT 0
17318: PPUSH
17319: LD_STRING 
17321: PPUSH
17322: CALL 36438 0 3
17326: ST_TO_ADDR
// if depot then
17327: LD_VAR 0 4
17331: IFFALSE 17349
// PlaceHumanInUnit ( Ibrahim , b ) else
17333: LD_EXP 38
17337: PPUSH
17338: LD_VAR 0 2
17342: PPUSH
17343: CALL_OW 52
17347: GO 17371
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17349: LD_EXP 38
17353: PPUSH
17354: LD_VAR 0 5
17358: PPUSH
17359: LD_VAR 0 6
17363: PPUSH
17364: LD_INT 0
17366: PPUSH
17367: CALL_OW 48
// InGameOff ;
17371: CALL_OW 9
// allowConvoys := true ;
17375: LD_ADDR_EXP 12
17379: PUSH
17380: LD_INT 1
17382: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17383: LD_STRING ACH_IBRAHIM
17385: PPUSH
17386: CALL_OW 543
// end ; end ;
17390: PPOPN 6
17392: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17393: LD_EXP 33
17397: PPUSH
17398: CALL_OW 256
17402: PUSH
17403: LD_INT 3
17405: LESS
17406: IFFALSE 17473
17408: GO 17410
17410: DISABLE
// begin DialogueOn ;
17411: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17415: LD_EXP 33
17419: PPUSH
17420: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17424: LD_EXP 33
17428: PPUSH
17429: LD_STRING DK-keydeath-1
17431: PPUSH
17432: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17436: LD_EXP 28
17440: PPUSH
17441: LD_STRING DH-keydeath-2
17443: PPUSH
17444: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17448: LD_EXP 28
17452: PPUSH
17453: LD_STRING DH-keydeath-3
17455: PPUSH
17456: CALL_OW 88
// DialogueOff ;
17460: CALL_OW 7
// KillUnit ( Kaia ) ;
17464: LD_EXP 33
17468: PPUSH
17469: CALL_OW 66
// end ;
17473: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17474: LD_EXP 11
17478: PUSH
17479: LD_EXP 21
17483: PUSH
17484: LD_INT 1
17486: LESS
17487: AND
17488: IFFALSE 17930
17490: GO 17492
17492: DISABLE
// begin ChangeSideFog ( 1 , 2 ) ;
17493: LD_INT 1
17495: PPUSH
17496: LD_INT 2
17498: PPUSH
17499: CALL_OW 343
// repeat wait ( 0 0$1 ) ;
17503: LD_INT 35
17505: PPUSH
17506: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ;
17510: LD_INT 22
17512: PUSH
17513: LD_INT 1
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 25
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PPUSH
17534: CALL_OW 69
17538: PUSH
17539: LD_INT 0
17541: EQUAL
17542: IFFALSE 17503
// DialogueOn ;
17544: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17548: LD_EXP 28
17552: PPUSH
17553: LD_STRING DH-1-final
17555: PPUSH
17556: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17560: LD_OWVAR 1
17564: PUSH
17565: LD_INT 126000
17567: PUSH
17568: LD_INT 115500
17570: PUSH
17571: LD_INT 105000
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: PUSH
17579: LD_OWVAR 67
17583: ARRAY
17584: LESSEQUAL
17585: IFFALSE 17599
// AddMedal ( med1 , 1 ) else
17587: LD_STRING med1
17589: PPUSH
17590: LD_INT 1
17592: PPUSH
17593: CALL_OW 101
17597: GO 17610
// AddMedal ( med1 , - 1 ) ;
17599: LD_STRING med1
17601: PPUSH
17602: LD_INT 1
17604: NEG
17605: PPUSH
17606: CALL_OW 101
// if vehCounter >= 2 then
17610: LD_EXP 22
17614: PUSH
17615: LD_INT 2
17617: GREATEREQUAL
17618: IFFALSE 17632
// AddMedal ( med2 , 1 ) else
17620: LD_STRING med2
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: CALL_OW 101
17630: GO 17643
// AddMedal ( med2 , - 1 ) ;
17632: LD_STRING med2
17634: PPUSH
17635: LD_INT 1
17637: NEG
17638: PPUSH
17639: CALL_OW 101
// if deadCounter = 0 then
17643: LD_EXP 9
17647: PUSH
17648: LD_INT 0
17650: EQUAL
17651: IFFALSE 17665
// AddMedal ( med3 , 1 ) else
17653: LD_STRING med3
17655: PPUSH
17656: LD_INT 1
17658: PPUSH
17659: CALL_OW 101
17663: GO 17676
// AddMedal ( med3 , - 1 ) ;
17665: LD_STRING med3
17667: PPUSH
17668: LD_INT 1
17670: NEG
17671: PPUSH
17672: CALL_OW 101
// GiveMedals ( MAIN ) ;
17676: LD_STRING MAIN
17678: PPUSH
17679: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17683: LD_INT 22
17685: PUSH
17686: LD_INT 2
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 23
17695: PUSH
17696: LD_INT 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 21
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: PPUSH
17718: CALL_OW 69
17722: PPUSH
17723: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17727: LD_EXP 28
17731: PPUSH
17732: LD_STRING 03_Heike
17734: PPUSH
17735: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17739: LD_EXP 32
17743: PPUSH
17744: LD_STRING 03_Aviradze
17746: PPUSH
17747: CALL_OW 38
// if Givi then
17751: LD_EXP 29
17755: IFFALSE 17769
// SaveCharacters ( Givi , 03_Givi ) ;
17757: LD_EXP 29
17761: PPUSH
17762: LD_STRING 03_Givi
17764: PPUSH
17765: CALL_OW 38
// if Mike then
17769: LD_EXP 30
17773: IFFALSE 17787
// SaveCharacters ( Mike , 03_Mike ) ;
17775: LD_EXP 30
17779: PPUSH
17780: LD_STRING 03_Mike
17782: PPUSH
17783: CALL_OW 38
// if Kamil then
17787: LD_EXP 31
17791: IFFALSE 17805
// SaveCharacters ( Kamil , 03_Kamil ) ;
17793: LD_EXP 31
17797: PPUSH
17798: LD_STRING 03_Kamil
17800: PPUSH
17801: CALL_OW 38
// if Kaia then
17805: LD_EXP 33
17809: IFFALSE 17823
// SaveCharacters ( Kaia , 03_Kaia ) ;
17811: LD_EXP 33
17815: PPUSH
17816: LD_STRING 03_Kaia
17818: PPUSH
17819: CALL_OW 38
// if Sophia then
17823: LD_EXP 34
17827: IFFALSE 17841
// SaveCharacters ( Sophia , 03_Sophia ) ;
17829: LD_EXP 34
17833: PPUSH
17834: LD_STRING 03_Sophia
17836: PPUSH
17837: CALL_OW 38
// if Markov then
17841: LD_EXP 35
17845: IFFALSE 17859
// SaveCharacters ( Markov , 03_Markov ) ;
17847: LD_EXP 35
17851: PPUSH
17852: LD_STRING 03_Markov
17854: PPUSH
17855: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17859: LD_EXP 38
17863: PUSH
17864: LD_EXP 38
17868: PPUSH
17869: CALL_OW 255
17873: PUSH
17874: LD_INT 2
17876: EQUAL
17877: AND
17878: IFFALSE 17892
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
17880: LD_EXP 38
17884: PPUSH
17885: LD_STRING 03_Ibrahim
17887: PPUSH
17888: CALL_OW 38
// if heikeSecondSquad then
17892: LD_EXP 42
17896: IFFALSE 17910
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17898: LD_EXP 42
17902: PPUSH
17903: LD_STRING 03_others
17905: PPUSH
17906: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
17910: LD_EXP 9
17914: PPUSH
17915: LD_STRING 03_DeadCounter
17917: PPUSH
17918: CALL_OW 39
// YouWin ;
17922: CALL_OW 103
// DialogueOff ;
17926: CALL_OW 7
// end ; end_of_file
17930: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17931: LD_VAR 0 1
17935: PUSH
17936: LD_EXP 28
17940: EQUAL
17941: IFFALSE 17950
// YouLost ( Heike ) ;
17943: LD_STRING Heike
17945: PPUSH
17946: CALL_OW 104
// if un = Aviradze then
17950: LD_VAR 0 1
17954: PUSH
17955: LD_EXP 32
17959: EQUAL
17960: IFFALSE 17969
// YouLost ( Aviradze ) ;
17962: LD_STRING Aviradze
17964: PPUSH
17965: CALL_OW 104
// if un = usDepot and not retreatAllowed then
17969: LD_VAR 0 1
17973: PUSH
17974: LD_INT 11
17976: EQUAL
17977: PUSH
17978: LD_EXP 11
17982: NOT
17983: AND
17984: IFFALSE 17993
// YouLost ( Depot ) ;
17986: LD_STRING Depot
17988: PPUSH
17989: CALL_OW 104
// if un = arDepot then
17993: LD_VAR 0 1
17997: PUSH
17998: LD_INT 5
18000: EQUAL
18001: IFFALSE 18010
// YouLost ( FarmerDepot ) ;
18003: LD_STRING FarmerDepot
18005: PPUSH
18006: CALL_OW 104
// if un = Farmer then
18010: LD_VAR 0 1
18014: PUSH
18015: LD_EXP 36
18019: EQUAL
18020: IFFALSE 18029
// YouLost ( Farmer ) ;
18022: LD_STRING Farmer
18024: PPUSH
18025: CALL_OW 104
// if un in usForces then
18029: LD_VAR 0 1
18033: PUSH
18034: LD_EXP 44
18038: IN
18039: IFFALSE 18057
// usForces := usForces diff un ;
18041: LD_ADDR_EXP 44
18045: PUSH
18046: LD_EXP 44
18050: PUSH
18051: LD_VAR 0 1
18055: DIFF
18056: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18057: LD_VAR 0 1
18061: PUSH
18062: LD_INT 22
18064: PUSH
18065: LD_INT 2
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 23
18074: PUSH
18075: LD_INT 2
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 21
18084: PUSH
18085: LD_INT 1
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 69
18101: IN
18102: IFFALSE 18118
// deadCounter := deadCounter + 1 ;
18104: LD_ADDR_EXP 9
18108: PUSH
18109: LD_EXP 9
18113: PUSH
18114: LD_INT 1
18116: PLUS
18117: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18118: LD_VAR 0 1
18122: PUSH
18123: LD_INT 22
18125: PUSH
18126: LD_INT 4
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 34
18135: PUSH
18136: LD_INT 12
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PPUSH
18147: CALL_OW 69
18151: IN
18152: PUSH
18153: LD_EXP 18
18157: NOT
18158: AND
18159: IFFALSE 18169
// firstConvoyDestroyed := true ;
18161: LD_ADDR_EXP 18
18165: PUSH
18166: LD_INT 1
18168: ST_TO_ADDR
// if un in usAttackers then
18169: LD_VAR 0 1
18173: PUSH
18174: LD_EXP 47
18178: IN
18179: IFFALSE 18197
// usAttackers := usAttackers diff un ;
18181: LD_ADDR_EXP 47
18185: PUSH
18186: LD_EXP 47
18190: PUSH
18191: LD_VAR 0 1
18195: DIFF
18196: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18197: LD_VAR 0 1
18201: PUSH
18202: LD_INT 22
18204: PUSH
18205: LD_INT 5
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 21
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PPUSH
18226: CALL_OW 69
18230: IN
18231: IFFALSE 18247
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18233: LD_ADDR_EXP 20
18237: PUSH
18238: LD_EXP 20
18242: PUSH
18243: LD_INT 1
18245: PLUS
18246: ST_TO_ADDR
// end ;
18247: PPOPN 1
18249: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18250: LD_VAR 0 2
18254: PUSH
18255: LD_EXP 38
18259: EQUAL
18260: PUSH
18261: LD_EXP 25
18265: AND
18266: IFFALSE 18412
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18268: LD_INT 22
18270: PUSH
18271: LD_INT 2
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 30
18280: PUSH
18281: LD_INT 0
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 50
18290: PUSH
18291: EMPTY
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: PPUSH
18299: CALL_OW 69
18303: IFFALSE 18345
// begin InGameOn ;
18305: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18309: LD_EXP 38
18313: PPUSH
18314: LD_INT 11
18316: PPUSH
18317: CALL_OW 120
// repeat wait ( 3 ) ;
18321: LD_INT 3
18323: PPUSH
18324: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18328: LD_EXP 38
18332: PPUSH
18333: CALL_OW 310
18337: IFFALSE 18321
// InGameOff ;
18339: CALL_OW 9
// end else
18343: GO 18412
// begin ibrahimInDepot := false ;
18345: LD_ADDR_EXP 25
18349: PUSH
18350: LD_INT 0
18352: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18353: LD_EXP 38
18357: PPUSH
18358: LD_INT 30
18360: PPUSH
18361: LD_INT 1
18363: PPUSH
18364: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18368: LD_INT 35
18370: PPUSH
18371: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18375: LD_EXP 38
18379: PPUSH
18380: LD_INT 30
18382: PPUSH
18383: LD_INT 1
18385: PPUSH
18386: CALL_OW 307
18390: PUSH
18391: LD_EXP 38
18395: PPUSH
18396: CALL_OW 301
18400: OR
18401: IFFALSE 18368
// RemoveUnit ( Ibrahim ) ;
18403: LD_EXP 38
18407: PPUSH
18408: CALL_OW 64
// end ; end ; end ;
18412: PPOPN 2
18414: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18415: LD_VAR 0 2
18419: PUSH
18420: LD_EXP 28
18424: EQUAL
18425: PUSH
18426: LD_VAR 0 1
18430: PUSH
18431: LD_INT 11
18433: EQUAL
18434: AND
18435: PUSH
18436: LD_EXP 25
18440: AND
18441: IFFALSE 18447
// IbrahimQuery ;
18443: CALL 16211 0 0
// end ;
18447: PPOPN 2
18449: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18450: LD_VAR 0 1
18454: PPUSH
18455: CALL_OW 141
// if oldId in usAttackers then
18459: LD_VAR 0 2
18463: PUSH
18464: LD_EXP 47
18468: IN
18469: IFFALSE 18487
// usAttackers := usAttackers diff oldId ;
18471: LD_ADDR_EXP 47
18475: PUSH
18476: LD_EXP 47
18480: PUSH
18481: LD_VAR 0 2
18485: DIFF
18486: ST_TO_ADDR
// if newId in usAttackers then
18487: LD_VAR 0 1
18491: PUSH
18492: LD_EXP 47
18496: IN
18497: IFFALSE 18515
// usAttackers := usAttackers diff newId ;
18499: LD_ADDR_EXP 47
18503: PUSH
18504: LD_EXP 47
18508: PUSH
18509: LD_VAR 0 1
18513: DIFF
18514: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18515: LD_VAR 0 3
18519: PUSH
18520: LD_INT 4
18522: EQUAL
18523: PUSH
18524: LD_EXP 18
18528: NOT
18529: AND
18530: IFFALSE 18540
// firstConvoyDestroyed := true ;
18532: LD_ADDR_EXP 18
18536: PUSH
18537: LD_INT 1
18539: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18540: LD_VAR 0 1
18544: PPUSH
18545: CALL_OW 264
18549: PUSH
18550: LD_INT 12
18552: EQUAL
18553: IFFALSE 18591
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18555: LD_ADDR_EXP 13
18559: PUSH
18560: LD_EXP 13
18564: PUSH
18565: LD_INT 1
18567: PLUS
18568: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18569: LD_VAR 0 1
18573: PPUSH
18574: LD_INT 1
18576: PPUSH
18577: CALL_OW 289
18581: PUSH
18582: LD_INT 0
18584: EQUAL
18585: IFFALSE 18591
// EmptyCargoDialog ;
18587: CALL 14849 0 0
// end ; end ;
18591: PPOPN 4
18593: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18594: LD_VAR 0 1
18598: PUSH
18599: LD_INT 2
18601: EQUAL
18602: PUSH
18603: LD_VAR 0 2
18607: PUSH
18608: LD_INT 5
18610: EQUAL
18611: AND
18612: IFFALSE 18621
// YouLost ( Attack ) ;
18614: LD_STRING Attack
18616: PPUSH
18617: CALL_OW 104
// end ;
18621: PPOPN 2
18623: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 255
18633: PUSH
18634: LD_INT 1
18636: EQUAL
18637: PUSH
18638: LD_EXP 6
18642: NOT
18643: AND
18644: IFFALSE 18778
// begin if GetBType ( b ) = b_lab then
18646: LD_VAR 0 1
18650: PPUSH
18651: CALL_OW 266
18655: PUSH
18656: LD_INT 6
18658: EQUAL
18659: IFFALSE 18699
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18661: LD_EXP 44
18665: PPUSH
18666: LD_INT 25
18668: PUSH
18669: LD_INT 4
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PPUSH
18676: CALL_OW 72
18680: PPUSH
18681: LD_VAR 0 1
18685: PPUSH
18686: CALL_OW 120
// AmLabResearch ( b ) ;
18690: LD_VAR 0 1
18694: PPUSH
18695: CALL 5175 0 1
// end ; if GetBType ( b ) = b_armoury then
18699: LD_VAR 0 1
18703: PPUSH
18704: CALL_OW 266
18708: PUSH
18709: LD_INT 4
18711: EQUAL
18712: IFFALSE 18760
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18714: LD_EXP 44
18718: PPUSH
18719: LD_INT 25
18721: PUSH
18722: LD_INT 1
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 3
18731: PUSH
18732: LD_INT 54
18734: PUSH
18735: EMPTY
18736: LIST
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PPUSH
18746: CALL_OW 72
18750: PPUSH
18751: LD_VAR 0 1
18755: PPUSH
18756: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18760: LD_ADDR_EXP 46
18764: PUSH
18765: LD_EXP 46
18769: PPUSH
18770: LD_INT 1
18772: PPUSH
18773: CALL_OW 3
18777: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL_OW 255
18787: PUSH
18788: LD_INT 5
18790: EQUAL
18791: IFFALSE 18805
// SetBLevel ( b , 5 ) ;
18793: LD_VAR 0 1
18797: PPUSH
18798: LD_INT 5
18800: PPUSH
18801: CALL_OW 241
// end ;
18805: PPOPN 1
18807: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18808: LD_VAR 0 1
18812: PPUSH
18813: CALL_OW 255
18817: PUSH
18818: LD_INT 2
18820: EQUAL
18821: IFFALSE 18837
// vehCounter := vehCounter + 1 ;
18823: LD_ADDR_EXP 22
18827: PUSH
18828: LD_EXP 22
18832: PUSH
18833: LD_INT 1
18835: PLUS
18836: ST_TO_ADDR
// end ;
18837: PPOPN 2
18839: END
// on SailEvent ( event ) do begin if event = eventAttack then
18840: LD_VAR 0 1
18844: PUSH
18845: LD_EXP 24
18849: EQUAL
18850: IFFALSE 18856
// AmericanAttack ;
18852: CALL 6623 0 0
// end ; end_of_file
18856: PPOPN 1
18858: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 ] [ Difficulty ] do
18859: LD_OWVAR 1
18863: PUSH
18864: LD_INT 10500
18866: PUSH
18867: LD_INT 9800
18869: PUSH
18870: LD_INT 9450
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: LIST
18877: PUSH
18878: LD_OWVAR 67
18882: ARRAY
18883: LESSEQUAL
18884: IFFALSE 18911
18886: GO 18888
18888: DISABLE
// begin enable ;
18889: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18890: LD_INT 1
18892: PPUSH
18893: LD_INT 5
18895: PPUSH
18896: CALL_OW 12
18900: PPUSH
18901: LD_INT 9
18903: PPUSH
18904: LD_INT 1
18906: PPUSH
18907: CALL_OW 55
// end ;
18911: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 ] [ Difficulty ] do
18912: LD_EXP 6
18916: PUSH
18917: LD_OWVAR 1
18921: PUSH
18922: LD_INT 56700
18924: PUSH
18925: LD_INT 55650
18927: PUSH
18928: LD_INT 54600
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: LIST
18935: PUSH
18936: LD_OWVAR 67
18940: ARRAY
18941: LESSEQUAL
18942: AND
18943: IFFALSE 18970
18945: GO 18947
18947: DISABLE
// begin enable ;
18948: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
18949: LD_INT 3
18951: PPUSH
18952: LD_INT 5
18954: PPUSH
18955: CALL_OW 12
18959: PPUSH
18960: LD_INT 9
18962: PPUSH
18963: LD_INT 1
18965: PPUSH
18966: CALL_OW 55
// end ; end_of_file
18970: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
18971: LD_EXP 11
18975: NOT
18976: PUSH
18977: LD_EXP 16
18981: AND
18982: PUSH
18983: LD_EXP 4
18987: AND
18988: PUSH
18989: LD_EXP 15
18993: PUSH
18994: LD_EXP 16
18998: LESSEQUAL
18999: AND
19000: IFFALSE 19090
19002: GO 19004
19004: DISABLE
// begin enable ;
19005: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19006: LD_ADDR_OWVAR 47
19010: PUSH
19011: LD_STRING #X103-1
19013: PUSH
19014: LD_EXP 16
19018: PUSH
19019: LD_EXP 15
19023: MINUS
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19029: LD_ADDR_EXP 15
19033: PUSH
19034: LD_INT 5
19036: PPUSH
19037: CALL_OW 274
19041: PPUSH
19042: LD_INT 1
19044: PPUSH
19045: CALL_OW 275
19049: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19050: LD_INT 10
19052: PPUSH
19053: LD_INT 1
19055: PPUSH
19056: CALL_OW 287
19060: PUSH
19061: LD_INT 0
19063: EQUAL
19064: IFFALSE 19082
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19066: LD_ADDR_EXP 17
19070: PUSH
19071: LD_EXP 17
19075: PUSH
19076: LD_INT 35
19078: MINUS
19079: ST_TO_ADDR
19080: GO 19090
// farmerCratesCounter := 30 30$00 ;
19082: LD_ADDR_EXP 17
19086: PUSH
19087: LD_INT 63000
19089: ST_TO_ADDR
// end ; end_of_file
19090: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19091: LD_INT 0
19093: PPUSH
// ar_miner := 81 ;
19094: LD_ADDR_EXP 55
19098: PUSH
19099: LD_INT 81
19101: ST_TO_ADDR
// ar_crane := 88 ;
19102: LD_ADDR_EXP 54
19106: PUSH
19107: LD_INT 88
19109: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19110: LD_ADDR_EXP 49
19114: PUSH
19115: LD_INT 89
19117: ST_TO_ADDR
// us_hack := 99 ;
19118: LD_ADDR_EXP 50
19122: PUSH
19123: LD_INT 99
19125: ST_TO_ADDR
// us_artillery := 97 ;
19126: LD_ADDR_EXP 51
19130: PUSH
19131: LD_INT 97
19133: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19134: LD_ADDR_EXP 52
19138: PUSH
19139: LD_INT 91
19141: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19142: LD_ADDR_EXP 53
19146: PUSH
19147: LD_INT 92
19149: ST_TO_ADDR
// ru_radar := 98 ;
19150: LD_ADDR_EXP 48
19154: PUSH
19155: LD_INT 98
19157: ST_TO_ADDR
// tech_Artillery := 80 ;
19158: LD_ADDR_EXP 56
19162: PUSH
19163: LD_INT 80
19165: ST_TO_ADDR
// tech_RadMat := 81 ;
19166: LD_ADDR_EXP 57
19170: PUSH
19171: LD_INT 81
19173: ST_TO_ADDR
// tech_BasicTools := 82 ;
19174: LD_ADDR_EXP 58
19178: PUSH
19179: LD_INT 82
19181: ST_TO_ADDR
// tech_Cargo := 83 ;
19182: LD_ADDR_EXP 59
19186: PUSH
19187: LD_INT 83
19189: ST_TO_ADDR
// tech_Track := 84 ;
19190: LD_ADDR_EXP 60
19194: PUSH
19195: LD_INT 84
19197: ST_TO_ADDR
// tech_Crane := 85 ;
19198: LD_ADDR_EXP 61
19202: PUSH
19203: LD_INT 85
19205: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19206: LD_ADDR_EXP 62
19210: PUSH
19211: LD_INT 86
19213: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19214: LD_ADDR_EXP 63
19218: PUSH
19219: LD_INT 87
19221: ST_TO_ADDR
// class_mastodont := 31 ;
19222: LD_ADDR_EXP 64
19226: PUSH
19227: LD_INT 31
19229: ST_TO_ADDR
// class_horse := 21 ;
19230: LD_ADDR_EXP 65
19234: PUSH
19235: LD_INT 21
19237: ST_TO_ADDR
// end ;
19238: LD_VAR 0 1
19242: RET
// every 1 do
19243: GO 19245
19245: DISABLE
// InitGlobalVariables ; end_of_file
19246: CALL 19091 0 0
19250: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19251: LD_INT 0
19253: PPUSH
// if p2 = 100 then
19254: LD_VAR 0 2
19258: PUSH
19259: LD_INT 100
19261: EQUAL
19262: IFFALSE 20211
// begin if not StreamModeActive then
19264: LD_EXP 66
19268: NOT
19269: IFFALSE 19279
// StreamModeActive := true ;
19271: LD_ADDR_EXP 66
19275: PUSH
19276: LD_INT 1
19278: ST_TO_ADDR
// if p3 = 0 then
19279: LD_VAR 0 3
19283: PUSH
19284: LD_INT 0
19286: EQUAL
19287: IFFALSE 19293
// InitStreamMode ;
19289: CALL 20371 0 0
// if p3 = 1 then
19293: LD_VAR 0 3
19297: PUSH
19298: LD_INT 1
19300: EQUAL
19301: IFFALSE 19311
// sRocket := true ;
19303: LD_ADDR_EXP 71
19307: PUSH
19308: LD_INT 1
19310: ST_TO_ADDR
// if p3 = 2 then
19311: LD_VAR 0 3
19315: PUSH
19316: LD_INT 2
19318: EQUAL
19319: IFFALSE 19329
// sSpeed := true ;
19321: LD_ADDR_EXP 70
19325: PUSH
19326: LD_INT 1
19328: ST_TO_ADDR
// if p3 = 3 then
19329: LD_VAR 0 3
19333: PUSH
19334: LD_INT 3
19336: EQUAL
19337: IFFALSE 19347
// sEngine := true ;
19339: LD_ADDR_EXP 72
19343: PUSH
19344: LD_INT 1
19346: ST_TO_ADDR
// if p3 = 4 then
19347: LD_VAR 0 3
19351: PUSH
19352: LD_INT 4
19354: EQUAL
19355: IFFALSE 19365
// sSpec := true ;
19357: LD_ADDR_EXP 69
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// if p3 = 5 then
19365: LD_VAR 0 3
19369: PUSH
19370: LD_INT 5
19372: EQUAL
19373: IFFALSE 19383
// sLevel := true ;
19375: LD_ADDR_EXP 73
19379: PUSH
19380: LD_INT 1
19382: ST_TO_ADDR
// if p3 = 6 then
19383: LD_VAR 0 3
19387: PUSH
19388: LD_INT 6
19390: EQUAL
19391: IFFALSE 19401
// sArmoury := true ;
19393: LD_ADDR_EXP 74
19397: PUSH
19398: LD_INT 1
19400: ST_TO_ADDR
// if p3 = 7 then
19401: LD_VAR 0 3
19405: PUSH
19406: LD_INT 7
19408: EQUAL
19409: IFFALSE 19419
// sRadar := true ;
19411: LD_ADDR_EXP 75
19415: PUSH
19416: LD_INT 1
19418: ST_TO_ADDR
// if p3 = 8 then
19419: LD_VAR 0 3
19423: PUSH
19424: LD_INT 8
19426: EQUAL
19427: IFFALSE 19437
// sBunker := true ;
19429: LD_ADDR_EXP 76
19433: PUSH
19434: LD_INT 1
19436: ST_TO_ADDR
// if p3 = 9 then
19437: LD_VAR 0 3
19441: PUSH
19442: LD_INT 9
19444: EQUAL
19445: IFFALSE 19455
// sHack := true ;
19447: LD_ADDR_EXP 77
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// if p3 = 10 then
19455: LD_VAR 0 3
19459: PUSH
19460: LD_INT 10
19462: EQUAL
19463: IFFALSE 19473
// sFire := true ;
19465: LD_ADDR_EXP 78
19469: PUSH
19470: LD_INT 1
19472: ST_TO_ADDR
// if p3 = 11 then
19473: LD_VAR 0 3
19477: PUSH
19478: LD_INT 11
19480: EQUAL
19481: IFFALSE 19491
// sRefresh := true ;
19483: LD_ADDR_EXP 79
19487: PUSH
19488: LD_INT 1
19490: ST_TO_ADDR
// if p3 = 12 then
19491: LD_VAR 0 3
19495: PUSH
19496: LD_INT 12
19498: EQUAL
19499: IFFALSE 19509
// sExp := true ;
19501: LD_ADDR_EXP 80
19505: PUSH
19506: LD_INT 1
19508: ST_TO_ADDR
// if p3 = 13 then
19509: LD_VAR 0 3
19513: PUSH
19514: LD_INT 13
19516: EQUAL
19517: IFFALSE 19527
// sDepot := true ;
19519: LD_ADDR_EXP 81
19523: PUSH
19524: LD_INT 1
19526: ST_TO_ADDR
// if p3 = 14 then
19527: LD_VAR 0 3
19531: PUSH
19532: LD_INT 14
19534: EQUAL
19535: IFFALSE 19545
// sFlag := true ;
19537: LD_ADDR_EXP 82
19541: PUSH
19542: LD_INT 1
19544: ST_TO_ADDR
// if p3 = 15 then
19545: LD_VAR 0 3
19549: PUSH
19550: LD_INT 15
19552: EQUAL
19553: IFFALSE 19563
// sKamikadze := true ;
19555: LD_ADDR_EXP 90
19559: PUSH
19560: LD_INT 1
19562: ST_TO_ADDR
// if p3 = 16 then
19563: LD_VAR 0 3
19567: PUSH
19568: LD_INT 16
19570: EQUAL
19571: IFFALSE 19581
// sTroll := true ;
19573: LD_ADDR_EXP 91
19577: PUSH
19578: LD_INT 1
19580: ST_TO_ADDR
// if p3 = 17 then
19581: LD_VAR 0 3
19585: PUSH
19586: LD_INT 17
19588: EQUAL
19589: IFFALSE 19599
// sSlow := true ;
19591: LD_ADDR_EXP 92
19595: PUSH
19596: LD_INT 1
19598: ST_TO_ADDR
// if p3 = 18 then
19599: LD_VAR 0 3
19603: PUSH
19604: LD_INT 18
19606: EQUAL
19607: IFFALSE 19617
// sLack := true ;
19609: LD_ADDR_EXP 93
19613: PUSH
19614: LD_INT 1
19616: ST_TO_ADDR
// if p3 = 19 then
19617: LD_VAR 0 3
19621: PUSH
19622: LD_INT 19
19624: EQUAL
19625: IFFALSE 19635
// sTank := true ;
19627: LD_ADDR_EXP 95
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// if p3 = 20 then
19635: LD_VAR 0 3
19639: PUSH
19640: LD_INT 20
19642: EQUAL
19643: IFFALSE 19653
// sRemote := true ;
19645: LD_ADDR_EXP 96
19649: PUSH
19650: LD_INT 1
19652: ST_TO_ADDR
// if p3 = 21 then
19653: LD_VAR 0 3
19657: PUSH
19658: LD_INT 21
19660: EQUAL
19661: IFFALSE 19671
// sPowell := true ;
19663: LD_ADDR_EXP 97
19667: PUSH
19668: LD_INT 1
19670: ST_TO_ADDR
// if p3 = 22 then
19671: LD_VAR 0 3
19675: PUSH
19676: LD_INT 22
19678: EQUAL
19679: IFFALSE 19689
// sTeleport := true ;
19681: LD_ADDR_EXP 100
19685: PUSH
19686: LD_INT 1
19688: ST_TO_ADDR
// if p3 = 23 then
19689: LD_VAR 0 3
19693: PUSH
19694: LD_INT 23
19696: EQUAL
19697: IFFALSE 19707
// sOilTower := true ;
19699: LD_ADDR_EXP 102
19703: PUSH
19704: LD_INT 1
19706: ST_TO_ADDR
// if p3 = 24 then
19707: LD_VAR 0 3
19711: PUSH
19712: LD_INT 24
19714: EQUAL
19715: IFFALSE 19725
// sShovel := true ;
19717: LD_ADDR_EXP 103
19721: PUSH
19722: LD_INT 1
19724: ST_TO_ADDR
// if p3 = 25 then
19725: LD_VAR 0 3
19729: PUSH
19730: LD_INT 25
19732: EQUAL
19733: IFFALSE 19743
// sSheik := true ;
19735: LD_ADDR_EXP 104
19739: PUSH
19740: LD_INT 1
19742: ST_TO_ADDR
// if p3 = 26 then
19743: LD_VAR 0 3
19747: PUSH
19748: LD_INT 26
19750: EQUAL
19751: IFFALSE 19761
// sEarthquake := true ;
19753: LD_ADDR_EXP 106
19757: PUSH
19758: LD_INT 1
19760: ST_TO_ADDR
// if p3 = 27 then
19761: LD_VAR 0 3
19765: PUSH
19766: LD_INT 27
19768: EQUAL
19769: IFFALSE 19779
// sAI := true ;
19771: LD_ADDR_EXP 107
19775: PUSH
19776: LD_INT 1
19778: ST_TO_ADDR
// if p3 = 28 then
19779: LD_VAR 0 3
19783: PUSH
19784: LD_INT 28
19786: EQUAL
19787: IFFALSE 19797
// sCargo := true ;
19789: LD_ADDR_EXP 110
19793: PUSH
19794: LD_INT 1
19796: ST_TO_ADDR
// if p3 = 29 then
19797: LD_VAR 0 3
19801: PUSH
19802: LD_INT 29
19804: EQUAL
19805: IFFALSE 19815
// sDLaser := true ;
19807: LD_ADDR_EXP 111
19811: PUSH
19812: LD_INT 1
19814: ST_TO_ADDR
// if p3 = 30 then
19815: LD_VAR 0 3
19819: PUSH
19820: LD_INT 30
19822: EQUAL
19823: IFFALSE 19833
// sExchange := true ;
19825: LD_ADDR_EXP 112
19829: PUSH
19830: LD_INT 1
19832: ST_TO_ADDR
// if p3 = 31 then
19833: LD_VAR 0 3
19837: PUSH
19838: LD_INT 31
19840: EQUAL
19841: IFFALSE 19851
// sFac := true ;
19843: LD_ADDR_EXP 113
19847: PUSH
19848: LD_INT 1
19850: ST_TO_ADDR
// if p3 = 32 then
19851: LD_VAR 0 3
19855: PUSH
19856: LD_INT 32
19858: EQUAL
19859: IFFALSE 19869
// sPower := true ;
19861: LD_ADDR_EXP 114
19865: PUSH
19866: LD_INT 1
19868: ST_TO_ADDR
// if p3 = 33 then
19869: LD_VAR 0 3
19873: PUSH
19874: LD_INT 33
19876: EQUAL
19877: IFFALSE 19887
// sRandom := true ;
19879: LD_ADDR_EXP 115
19883: PUSH
19884: LD_INT 1
19886: ST_TO_ADDR
// if p3 = 34 then
19887: LD_VAR 0 3
19891: PUSH
19892: LD_INT 34
19894: EQUAL
19895: IFFALSE 19905
// sShield := true ;
19897: LD_ADDR_EXP 116
19901: PUSH
19902: LD_INT 1
19904: ST_TO_ADDR
// if p3 = 35 then
19905: LD_VAR 0 3
19909: PUSH
19910: LD_INT 35
19912: EQUAL
19913: IFFALSE 19923
// sTime := true ;
19915: LD_ADDR_EXP 117
19919: PUSH
19920: LD_INT 1
19922: ST_TO_ADDR
// if p3 = 36 then
19923: LD_VAR 0 3
19927: PUSH
19928: LD_INT 36
19930: EQUAL
19931: IFFALSE 19941
// sTools := true ;
19933: LD_ADDR_EXP 118
19937: PUSH
19938: LD_INT 1
19940: ST_TO_ADDR
// if p3 = 101 then
19941: LD_VAR 0 3
19945: PUSH
19946: LD_INT 101
19948: EQUAL
19949: IFFALSE 19959
// sSold := true ;
19951: LD_ADDR_EXP 83
19955: PUSH
19956: LD_INT 1
19958: ST_TO_ADDR
// if p3 = 102 then
19959: LD_VAR 0 3
19963: PUSH
19964: LD_INT 102
19966: EQUAL
19967: IFFALSE 19977
// sDiff := true ;
19969: LD_ADDR_EXP 84
19973: PUSH
19974: LD_INT 1
19976: ST_TO_ADDR
// if p3 = 103 then
19977: LD_VAR 0 3
19981: PUSH
19982: LD_INT 103
19984: EQUAL
19985: IFFALSE 19995
// sFog := true ;
19987: LD_ADDR_EXP 87
19991: PUSH
19992: LD_INT 1
19994: ST_TO_ADDR
// if p3 = 104 then
19995: LD_VAR 0 3
19999: PUSH
20000: LD_INT 104
20002: EQUAL
20003: IFFALSE 20013
// sReset := true ;
20005: LD_ADDR_EXP 88
20009: PUSH
20010: LD_INT 1
20012: ST_TO_ADDR
// if p3 = 105 then
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 105
20020: EQUAL
20021: IFFALSE 20031
// sSun := true ;
20023: LD_ADDR_EXP 89
20027: PUSH
20028: LD_INT 1
20030: ST_TO_ADDR
// if p3 = 106 then
20031: LD_VAR 0 3
20035: PUSH
20036: LD_INT 106
20038: EQUAL
20039: IFFALSE 20049
// sTiger := true ;
20041: LD_ADDR_EXP 85
20045: PUSH
20046: LD_INT 1
20048: ST_TO_ADDR
// if p3 = 107 then
20049: LD_VAR 0 3
20053: PUSH
20054: LD_INT 107
20056: EQUAL
20057: IFFALSE 20067
// sBomb := true ;
20059: LD_ADDR_EXP 86
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// if p3 = 108 then
20067: LD_VAR 0 3
20071: PUSH
20072: LD_INT 108
20074: EQUAL
20075: IFFALSE 20085
// sWound := true ;
20077: LD_ADDR_EXP 94
20081: PUSH
20082: LD_INT 1
20084: ST_TO_ADDR
// if p3 = 109 then
20085: LD_VAR 0 3
20089: PUSH
20090: LD_INT 109
20092: EQUAL
20093: IFFALSE 20103
// sBetray := true ;
20095: LD_ADDR_EXP 98
20099: PUSH
20100: LD_INT 1
20102: ST_TO_ADDR
// if p3 = 110 then
20103: LD_VAR 0 3
20107: PUSH
20108: LD_INT 110
20110: EQUAL
20111: IFFALSE 20121
// sContamin := true ;
20113: LD_ADDR_EXP 99
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// if p3 = 111 then
20121: LD_VAR 0 3
20125: PUSH
20126: LD_INT 111
20128: EQUAL
20129: IFFALSE 20139
// sOil := true ;
20131: LD_ADDR_EXP 101
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// if p3 = 112 then
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 112
20146: EQUAL
20147: IFFALSE 20157
// sStu := true ;
20149: LD_ADDR_EXP 105
20153: PUSH
20154: LD_INT 1
20156: ST_TO_ADDR
// if p3 = 113 then
20157: LD_VAR 0 3
20161: PUSH
20162: LD_INT 113
20164: EQUAL
20165: IFFALSE 20175
// sBazooka := true ;
20167: LD_ADDR_EXP 108
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if p3 = 114 then
20175: LD_VAR 0 3
20179: PUSH
20180: LD_INT 114
20182: EQUAL
20183: IFFALSE 20193
// sMortar := true ;
20185: LD_ADDR_EXP 109
20189: PUSH
20190: LD_INT 1
20192: ST_TO_ADDR
// if p3 = 115 then
20193: LD_VAR 0 3
20197: PUSH
20198: LD_INT 115
20200: EQUAL
20201: IFFALSE 20211
// sRanger := true ;
20203: LD_ADDR_EXP 119
20207: PUSH
20208: LD_INT 1
20210: ST_TO_ADDR
// end ; if p2 = 101 then
20211: LD_VAR 0 2
20215: PUSH
20216: LD_INT 101
20218: EQUAL
20219: IFFALSE 20347
// begin case p3 of 1 :
20221: LD_VAR 0 3
20225: PUSH
20226: LD_INT 1
20228: DOUBLE
20229: EQUAL
20230: IFTRUE 20234
20232: GO 20241
20234: POP
// hHackUnlimitedResources ; 2 :
20235: CALL 31384 0 0
20239: GO 20347
20241: LD_INT 2
20243: DOUBLE
20244: EQUAL
20245: IFTRUE 20249
20247: GO 20256
20249: POP
// hHackSetLevel10 ; 3 :
20250: CALL 31517 0 0
20254: GO 20347
20256: LD_INT 3
20258: DOUBLE
20259: EQUAL
20260: IFTRUE 20264
20262: GO 20271
20264: POP
// hHackSetLevel10YourUnits ; 4 :
20265: CALL 31602 0 0
20269: GO 20347
20271: LD_INT 4
20273: DOUBLE
20274: EQUAL
20275: IFTRUE 20279
20277: GO 20286
20279: POP
// hHackInvincible ; 5 :
20280: CALL 32050 0 0
20284: GO 20347
20286: LD_INT 5
20288: DOUBLE
20289: EQUAL
20290: IFTRUE 20294
20292: GO 20301
20294: POP
// hHackInvisible ; 6 :
20295: CALL 32161 0 0
20299: GO 20347
20301: LD_INT 6
20303: DOUBLE
20304: EQUAL
20305: IFTRUE 20309
20307: GO 20316
20309: POP
// hHackChangeYourSide ; 7 :
20310: CALL 32218 0 0
20314: GO 20347
20316: LD_INT 7
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20331
20324: POP
// hHackChangeUnitSide ; 8 :
20325: CALL 32260 0 0
20329: GO 20347
20331: LD_INT 8
20333: DOUBLE
20334: EQUAL
20335: IFTRUE 20339
20337: GO 20346
20339: POP
// hHackFog ; end ;
20340: CALL 32361 0 0
20344: GO 20347
20346: POP
// end ; end ;
20347: LD_VAR 0 7
20351: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20352: GO 20354
20354: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20355: LD_STRING initStreamRollete();
20357: PPUSH
20358: CALL_OW 559
// InitStreamMode ;
20362: CALL 20371 0 0
// DefineStreamItems ( ) ;
20366: CALL 20811 0 0
// end ;
20370: END
// function InitStreamMode ; begin
20371: LD_INT 0
20373: PPUSH
// streamModeActive := false ;
20374: LD_ADDR_EXP 66
20378: PUSH
20379: LD_INT 0
20381: ST_TO_ADDR
// normalCounter := 36 ;
20382: LD_ADDR_EXP 67
20386: PUSH
20387: LD_INT 36
20389: ST_TO_ADDR
// hardcoreCounter := 16 ;
20390: LD_ADDR_EXP 68
20394: PUSH
20395: LD_INT 16
20397: ST_TO_ADDR
// sRocket := false ;
20398: LD_ADDR_EXP 71
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// sSpeed := false ;
20406: LD_ADDR_EXP 70
20410: PUSH
20411: LD_INT 0
20413: ST_TO_ADDR
// sEngine := false ;
20414: LD_ADDR_EXP 72
20418: PUSH
20419: LD_INT 0
20421: ST_TO_ADDR
// sSpec := false ;
20422: LD_ADDR_EXP 69
20426: PUSH
20427: LD_INT 0
20429: ST_TO_ADDR
// sLevel := false ;
20430: LD_ADDR_EXP 73
20434: PUSH
20435: LD_INT 0
20437: ST_TO_ADDR
// sArmoury := false ;
20438: LD_ADDR_EXP 74
20442: PUSH
20443: LD_INT 0
20445: ST_TO_ADDR
// sRadar := false ;
20446: LD_ADDR_EXP 75
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// sBunker := false ;
20454: LD_ADDR_EXP 76
20458: PUSH
20459: LD_INT 0
20461: ST_TO_ADDR
// sHack := false ;
20462: LD_ADDR_EXP 77
20466: PUSH
20467: LD_INT 0
20469: ST_TO_ADDR
// sFire := false ;
20470: LD_ADDR_EXP 78
20474: PUSH
20475: LD_INT 0
20477: ST_TO_ADDR
// sRefresh := false ;
20478: LD_ADDR_EXP 79
20482: PUSH
20483: LD_INT 0
20485: ST_TO_ADDR
// sExp := false ;
20486: LD_ADDR_EXP 80
20490: PUSH
20491: LD_INT 0
20493: ST_TO_ADDR
// sDepot := false ;
20494: LD_ADDR_EXP 81
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// sFlag := false ;
20502: LD_ADDR_EXP 82
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// sKamikadze := false ;
20510: LD_ADDR_EXP 90
20514: PUSH
20515: LD_INT 0
20517: ST_TO_ADDR
// sTroll := false ;
20518: LD_ADDR_EXP 91
20522: PUSH
20523: LD_INT 0
20525: ST_TO_ADDR
// sSlow := false ;
20526: LD_ADDR_EXP 92
20530: PUSH
20531: LD_INT 0
20533: ST_TO_ADDR
// sLack := false ;
20534: LD_ADDR_EXP 93
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// sTank := false ;
20542: LD_ADDR_EXP 95
20546: PUSH
20547: LD_INT 0
20549: ST_TO_ADDR
// sRemote := false ;
20550: LD_ADDR_EXP 96
20554: PUSH
20555: LD_INT 0
20557: ST_TO_ADDR
// sPowell := false ;
20558: LD_ADDR_EXP 97
20562: PUSH
20563: LD_INT 0
20565: ST_TO_ADDR
// sTeleport := false ;
20566: LD_ADDR_EXP 100
20570: PUSH
20571: LD_INT 0
20573: ST_TO_ADDR
// sOilTower := false ;
20574: LD_ADDR_EXP 102
20578: PUSH
20579: LD_INT 0
20581: ST_TO_ADDR
// sShovel := false ;
20582: LD_ADDR_EXP 103
20586: PUSH
20587: LD_INT 0
20589: ST_TO_ADDR
// sSheik := false ;
20590: LD_ADDR_EXP 104
20594: PUSH
20595: LD_INT 0
20597: ST_TO_ADDR
// sEarthquake := false ;
20598: LD_ADDR_EXP 106
20602: PUSH
20603: LD_INT 0
20605: ST_TO_ADDR
// sAI := false ;
20606: LD_ADDR_EXP 107
20610: PUSH
20611: LD_INT 0
20613: ST_TO_ADDR
// sCargo := false ;
20614: LD_ADDR_EXP 110
20618: PUSH
20619: LD_INT 0
20621: ST_TO_ADDR
// sDLaser := false ;
20622: LD_ADDR_EXP 111
20626: PUSH
20627: LD_INT 0
20629: ST_TO_ADDR
// sExchange := false ;
20630: LD_ADDR_EXP 112
20634: PUSH
20635: LD_INT 0
20637: ST_TO_ADDR
// sFac := false ;
20638: LD_ADDR_EXP 113
20642: PUSH
20643: LD_INT 0
20645: ST_TO_ADDR
// sPower := false ;
20646: LD_ADDR_EXP 114
20650: PUSH
20651: LD_INT 0
20653: ST_TO_ADDR
// sRandom := false ;
20654: LD_ADDR_EXP 115
20658: PUSH
20659: LD_INT 0
20661: ST_TO_ADDR
// sShield := false ;
20662: LD_ADDR_EXP 116
20666: PUSH
20667: LD_INT 0
20669: ST_TO_ADDR
// sTime := false ;
20670: LD_ADDR_EXP 117
20674: PUSH
20675: LD_INT 0
20677: ST_TO_ADDR
// sTools := false ;
20678: LD_ADDR_EXP 118
20682: PUSH
20683: LD_INT 0
20685: ST_TO_ADDR
// sSold := false ;
20686: LD_ADDR_EXP 83
20690: PUSH
20691: LD_INT 0
20693: ST_TO_ADDR
// sDiff := false ;
20694: LD_ADDR_EXP 84
20698: PUSH
20699: LD_INT 0
20701: ST_TO_ADDR
// sFog := false ;
20702: LD_ADDR_EXP 87
20706: PUSH
20707: LD_INT 0
20709: ST_TO_ADDR
// sReset := false ;
20710: LD_ADDR_EXP 88
20714: PUSH
20715: LD_INT 0
20717: ST_TO_ADDR
// sSun := false ;
20718: LD_ADDR_EXP 89
20722: PUSH
20723: LD_INT 0
20725: ST_TO_ADDR
// sTiger := false ;
20726: LD_ADDR_EXP 85
20730: PUSH
20731: LD_INT 0
20733: ST_TO_ADDR
// sBomb := false ;
20734: LD_ADDR_EXP 86
20738: PUSH
20739: LD_INT 0
20741: ST_TO_ADDR
// sWound := false ;
20742: LD_ADDR_EXP 94
20746: PUSH
20747: LD_INT 0
20749: ST_TO_ADDR
// sBetray := false ;
20750: LD_ADDR_EXP 98
20754: PUSH
20755: LD_INT 0
20757: ST_TO_ADDR
// sContamin := false ;
20758: LD_ADDR_EXP 99
20762: PUSH
20763: LD_INT 0
20765: ST_TO_ADDR
// sOil := false ;
20766: LD_ADDR_EXP 101
20770: PUSH
20771: LD_INT 0
20773: ST_TO_ADDR
// sStu := false ;
20774: LD_ADDR_EXP 105
20778: PUSH
20779: LD_INT 0
20781: ST_TO_ADDR
// sBazooka := false ;
20782: LD_ADDR_EXP 108
20786: PUSH
20787: LD_INT 0
20789: ST_TO_ADDR
// sMortar := false ;
20790: LD_ADDR_EXP 109
20794: PUSH
20795: LD_INT 0
20797: ST_TO_ADDR
// sRanger := false ;
20798: LD_ADDR_EXP 119
20802: PUSH
20803: LD_INT 0
20805: ST_TO_ADDR
// end ;
20806: LD_VAR 0 1
20810: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20811: LD_INT 0
20813: PPUSH
20814: PPUSH
20815: PPUSH
20816: PPUSH
20817: PPUSH
// result := [ ] ;
20818: LD_ADDR_VAR 0 1
20822: PUSH
20823: EMPTY
20824: ST_TO_ADDR
// if campaign_id = 1 then
20825: LD_OWVAR 69
20829: PUSH
20830: LD_INT 1
20832: EQUAL
20833: IFFALSE 23771
// begin case mission_number of 1 :
20835: LD_OWVAR 70
20839: PUSH
20840: LD_INT 1
20842: DOUBLE
20843: EQUAL
20844: IFTRUE 20848
20846: GO 20912
20848: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20849: LD_ADDR_VAR 0 1
20853: PUSH
20854: LD_INT 2
20856: PUSH
20857: LD_INT 4
20859: PUSH
20860: LD_INT 11
20862: PUSH
20863: LD_INT 12
20865: PUSH
20866: LD_INT 15
20868: PUSH
20869: LD_INT 16
20871: PUSH
20872: LD_INT 22
20874: PUSH
20875: LD_INT 23
20877: PUSH
20878: LD_INT 26
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 101
20894: PUSH
20895: LD_INT 102
20897: PUSH
20898: LD_INT 106
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: LIST
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: ST_TO_ADDR
20910: GO 23769
20912: LD_INT 2
20914: DOUBLE
20915: EQUAL
20916: IFTRUE 20920
20918: GO 20992
20920: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20921: LD_ADDR_VAR 0 1
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: LD_INT 4
20931: PUSH
20932: LD_INT 11
20934: PUSH
20935: LD_INT 12
20937: PUSH
20938: LD_INT 15
20940: PUSH
20941: LD_INT 16
20943: PUSH
20944: LD_INT 22
20946: PUSH
20947: LD_INT 23
20949: PUSH
20950: LD_INT 26
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 101
20966: PUSH
20967: LD_INT 102
20969: PUSH
20970: LD_INT 105
20972: PUSH
20973: LD_INT 106
20975: PUSH
20976: LD_INT 108
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: ST_TO_ADDR
20990: GO 23769
20992: LD_INT 3
20994: DOUBLE
20995: EQUAL
20996: IFTRUE 21000
20998: GO 21076
21000: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21001: LD_ADDR_VAR 0 1
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: LD_INT 4
21011: PUSH
21012: LD_INT 5
21014: PUSH
21015: LD_INT 11
21017: PUSH
21018: LD_INT 12
21020: PUSH
21021: LD_INT 15
21023: PUSH
21024: LD_INT 16
21026: PUSH
21027: LD_INT 22
21029: PUSH
21030: LD_INT 26
21032: PUSH
21033: LD_INT 36
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 101
21050: PUSH
21051: LD_INT 102
21053: PUSH
21054: LD_INT 105
21056: PUSH
21057: LD_INT 106
21059: PUSH
21060: LD_INT 108
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: ST_TO_ADDR
21074: GO 23769
21076: LD_INT 4
21078: DOUBLE
21079: EQUAL
21080: IFTRUE 21084
21082: GO 21168
21084: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21085: LD_ADDR_VAR 0 1
21089: PUSH
21090: LD_INT 2
21092: PUSH
21093: LD_INT 4
21095: PUSH
21096: LD_INT 5
21098: PUSH
21099: LD_INT 8
21101: PUSH
21102: LD_INT 11
21104: PUSH
21105: LD_INT 12
21107: PUSH
21108: LD_INT 15
21110: PUSH
21111: LD_INT 16
21113: PUSH
21114: LD_INT 22
21116: PUSH
21117: LD_INT 23
21119: PUSH
21120: LD_INT 26
21122: PUSH
21123: LD_INT 36
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 101
21142: PUSH
21143: LD_INT 102
21145: PUSH
21146: LD_INT 105
21148: PUSH
21149: LD_INT 106
21151: PUSH
21152: LD_INT 108
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: ST_TO_ADDR
21166: GO 23769
21168: LD_INT 5
21170: DOUBLE
21171: EQUAL
21172: IFTRUE 21176
21174: GO 21276
21176: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21177: LD_ADDR_VAR 0 1
21181: PUSH
21182: LD_INT 2
21184: PUSH
21185: LD_INT 4
21187: PUSH
21188: LD_INT 5
21190: PUSH
21191: LD_INT 6
21193: PUSH
21194: LD_INT 8
21196: PUSH
21197: LD_INT 11
21199: PUSH
21200: LD_INT 12
21202: PUSH
21203: LD_INT 15
21205: PUSH
21206: LD_INT 16
21208: PUSH
21209: LD_INT 22
21211: PUSH
21212: LD_INT 23
21214: PUSH
21215: LD_INT 25
21217: PUSH
21218: LD_INT 26
21220: PUSH
21221: LD_INT 36
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 101
21242: PUSH
21243: LD_INT 102
21245: PUSH
21246: LD_INT 105
21248: PUSH
21249: LD_INT 106
21251: PUSH
21252: LD_INT 108
21254: PUSH
21255: LD_INT 109
21257: PUSH
21258: LD_INT 112
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: ST_TO_ADDR
21274: GO 23769
21276: LD_INT 6
21278: DOUBLE
21279: EQUAL
21280: IFTRUE 21284
21282: GO 21404
21284: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21285: LD_ADDR_VAR 0 1
21289: PUSH
21290: LD_INT 2
21292: PUSH
21293: LD_INT 4
21295: PUSH
21296: LD_INT 5
21298: PUSH
21299: LD_INT 6
21301: PUSH
21302: LD_INT 8
21304: PUSH
21305: LD_INT 11
21307: PUSH
21308: LD_INT 12
21310: PUSH
21311: LD_INT 15
21313: PUSH
21314: LD_INT 16
21316: PUSH
21317: LD_INT 20
21319: PUSH
21320: LD_INT 21
21322: PUSH
21323: LD_INT 22
21325: PUSH
21326: LD_INT 23
21328: PUSH
21329: LD_INT 25
21331: PUSH
21332: LD_INT 26
21334: PUSH
21335: LD_INT 30
21337: PUSH
21338: LD_INT 31
21340: PUSH
21341: LD_INT 32
21343: PUSH
21344: LD_INT 36
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 101
21370: PUSH
21371: LD_INT 102
21373: PUSH
21374: LD_INT 105
21376: PUSH
21377: LD_INT 106
21379: PUSH
21380: LD_INT 108
21382: PUSH
21383: LD_INT 109
21385: PUSH
21386: LD_INT 112
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: ST_TO_ADDR
21402: GO 23769
21404: LD_INT 7
21406: DOUBLE
21407: EQUAL
21408: IFTRUE 21412
21410: GO 21512
21412: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21413: LD_ADDR_VAR 0 1
21417: PUSH
21418: LD_INT 2
21420: PUSH
21421: LD_INT 4
21423: PUSH
21424: LD_INT 5
21426: PUSH
21427: LD_INT 7
21429: PUSH
21430: LD_INT 11
21432: PUSH
21433: LD_INT 12
21435: PUSH
21436: LD_INT 15
21438: PUSH
21439: LD_INT 16
21441: PUSH
21442: LD_INT 20
21444: PUSH
21445: LD_INT 21
21447: PUSH
21448: LD_INT 22
21450: PUSH
21451: LD_INT 23
21453: PUSH
21454: LD_INT 25
21456: PUSH
21457: LD_INT 26
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 101
21478: PUSH
21479: LD_INT 102
21481: PUSH
21482: LD_INT 103
21484: PUSH
21485: LD_INT 105
21487: PUSH
21488: LD_INT 106
21490: PUSH
21491: LD_INT 108
21493: PUSH
21494: LD_INT 112
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: ST_TO_ADDR
21510: GO 23769
21512: LD_INT 8
21514: DOUBLE
21515: EQUAL
21516: IFTRUE 21520
21518: GO 21648
21520: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21521: LD_ADDR_VAR 0 1
21525: PUSH
21526: LD_INT 2
21528: PUSH
21529: LD_INT 4
21531: PUSH
21532: LD_INT 5
21534: PUSH
21535: LD_INT 6
21537: PUSH
21538: LD_INT 7
21540: PUSH
21541: LD_INT 8
21543: PUSH
21544: LD_INT 11
21546: PUSH
21547: LD_INT 12
21549: PUSH
21550: LD_INT 15
21552: PUSH
21553: LD_INT 16
21555: PUSH
21556: LD_INT 20
21558: PUSH
21559: LD_INT 21
21561: PUSH
21562: LD_INT 22
21564: PUSH
21565: LD_INT 23
21567: PUSH
21568: LD_INT 25
21570: PUSH
21571: LD_INT 26
21573: PUSH
21574: LD_INT 30
21576: PUSH
21577: LD_INT 31
21579: PUSH
21580: LD_INT 32
21582: PUSH
21583: LD_INT 36
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 101
21610: PUSH
21611: LD_INT 102
21613: PUSH
21614: LD_INT 103
21616: PUSH
21617: LD_INT 105
21619: PUSH
21620: LD_INT 106
21622: PUSH
21623: LD_INT 108
21625: PUSH
21626: LD_INT 109
21628: PUSH
21629: LD_INT 112
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: ST_TO_ADDR
21646: GO 23769
21648: LD_INT 9
21650: DOUBLE
21651: EQUAL
21652: IFTRUE 21656
21654: GO 21792
21656: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21657: LD_ADDR_VAR 0 1
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 4
21667: PUSH
21668: LD_INT 5
21670: PUSH
21671: LD_INT 6
21673: PUSH
21674: LD_INT 7
21676: PUSH
21677: LD_INT 8
21679: PUSH
21680: LD_INT 11
21682: PUSH
21683: LD_INT 12
21685: PUSH
21686: LD_INT 15
21688: PUSH
21689: LD_INT 16
21691: PUSH
21692: LD_INT 20
21694: PUSH
21695: LD_INT 21
21697: PUSH
21698: LD_INT 22
21700: PUSH
21701: LD_INT 23
21703: PUSH
21704: LD_INT 25
21706: PUSH
21707: LD_INT 26
21709: PUSH
21710: LD_INT 28
21712: PUSH
21713: LD_INT 30
21715: PUSH
21716: LD_INT 31
21718: PUSH
21719: LD_INT 32
21721: PUSH
21722: LD_INT 36
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 101
21750: PUSH
21751: LD_INT 102
21753: PUSH
21754: LD_INT 103
21756: PUSH
21757: LD_INT 105
21759: PUSH
21760: LD_INT 106
21762: PUSH
21763: LD_INT 108
21765: PUSH
21766: LD_INT 109
21768: PUSH
21769: LD_INT 112
21771: PUSH
21772: LD_INT 114
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: ST_TO_ADDR
21790: GO 23769
21792: LD_INT 10
21794: DOUBLE
21795: EQUAL
21796: IFTRUE 21800
21798: GO 21984
21800: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21801: LD_ADDR_VAR 0 1
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: LD_INT 4
21811: PUSH
21812: LD_INT 5
21814: PUSH
21815: LD_INT 6
21817: PUSH
21818: LD_INT 7
21820: PUSH
21821: LD_INT 8
21823: PUSH
21824: LD_INT 9
21826: PUSH
21827: LD_INT 10
21829: PUSH
21830: LD_INT 11
21832: PUSH
21833: LD_INT 12
21835: PUSH
21836: LD_INT 13
21838: PUSH
21839: LD_INT 14
21841: PUSH
21842: LD_INT 15
21844: PUSH
21845: LD_INT 16
21847: PUSH
21848: LD_INT 17
21850: PUSH
21851: LD_INT 18
21853: PUSH
21854: LD_INT 19
21856: PUSH
21857: LD_INT 20
21859: PUSH
21860: LD_INT 21
21862: PUSH
21863: LD_INT 22
21865: PUSH
21866: LD_INT 23
21868: PUSH
21869: LD_INT 24
21871: PUSH
21872: LD_INT 25
21874: PUSH
21875: LD_INT 26
21877: PUSH
21878: LD_INT 28
21880: PUSH
21881: LD_INT 30
21883: PUSH
21884: LD_INT 31
21886: PUSH
21887: LD_INT 32
21889: PUSH
21890: LD_INT 36
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 101
21926: PUSH
21927: LD_INT 102
21929: PUSH
21930: LD_INT 103
21932: PUSH
21933: LD_INT 104
21935: PUSH
21936: LD_INT 105
21938: PUSH
21939: LD_INT 106
21941: PUSH
21942: LD_INT 107
21944: PUSH
21945: LD_INT 108
21947: PUSH
21948: LD_INT 109
21950: PUSH
21951: LD_INT 110
21953: PUSH
21954: LD_INT 111
21956: PUSH
21957: LD_INT 112
21959: PUSH
21960: LD_INT 114
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: ST_TO_ADDR
21982: GO 23769
21984: LD_INT 11
21986: DOUBLE
21987: EQUAL
21988: IFTRUE 21992
21990: GO 22184
21992: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21993: LD_ADDR_VAR 0 1
21997: PUSH
21998: LD_INT 2
22000: PUSH
22001: LD_INT 3
22003: PUSH
22004: LD_INT 4
22006: PUSH
22007: LD_INT 5
22009: PUSH
22010: LD_INT 6
22012: PUSH
22013: LD_INT 7
22015: PUSH
22016: LD_INT 8
22018: PUSH
22019: LD_INT 9
22021: PUSH
22022: LD_INT 10
22024: PUSH
22025: LD_INT 11
22027: PUSH
22028: LD_INT 12
22030: PUSH
22031: LD_INT 13
22033: PUSH
22034: LD_INT 14
22036: PUSH
22037: LD_INT 15
22039: PUSH
22040: LD_INT 16
22042: PUSH
22043: LD_INT 17
22045: PUSH
22046: LD_INT 18
22048: PUSH
22049: LD_INT 19
22051: PUSH
22052: LD_INT 20
22054: PUSH
22055: LD_INT 21
22057: PUSH
22058: LD_INT 22
22060: PUSH
22061: LD_INT 23
22063: PUSH
22064: LD_INT 24
22066: PUSH
22067: LD_INT 25
22069: PUSH
22070: LD_INT 26
22072: PUSH
22073: LD_INT 28
22075: PUSH
22076: LD_INT 30
22078: PUSH
22079: LD_INT 31
22081: PUSH
22082: LD_INT 32
22084: PUSH
22085: LD_INT 34
22087: PUSH
22088: LD_INT 36
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 101
22126: PUSH
22127: LD_INT 102
22129: PUSH
22130: LD_INT 103
22132: PUSH
22133: LD_INT 104
22135: PUSH
22136: LD_INT 105
22138: PUSH
22139: LD_INT 106
22141: PUSH
22142: LD_INT 107
22144: PUSH
22145: LD_INT 108
22147: PUSH
22148: LD_INT 109
22150: PUSH
22151: LD_INT 110
22153: PUSH
22154: LD_INT 111
22156: PUSH
22157: LD_INT 112
22159: PUSH
22160: LD_INT 114
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: ST_TO_ADDR
22182: GO 23769
22184: LD_INT 12
22186: DOUBLE
22187: EQUAL
22188: IFTRUE 22192
22190: GO 22400
22192: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22193: LD_ADDR_VAR 0 1
22197: PUSH
22198: LD_INT 1
22200: PUSH
22201: LD_INT 2
22203: PUSH
22204: LD_INT 3
22206: PUSH
22207: LD_INT 4
22209: PUSH
22210: LD_INT 5
22212: PUSH
22213: LD_INT 6
22215: PUSH
22216: LD_INT 7
22218: PUSH
22219: LD_INT 8
22221: PUSH
22222: LD_INT 9
22224: PUSH
22225: LD_INT 10
22227: PUSH
22228: LD_INT 11
22230: PUSH
22231: LD_INT 12
22233: PUSH
22234: LD_INT 13
22236: PUSH
22237: LD_INT 14
22239: PUSH
22240: LD_INT 15
22242: PUSH
22243: LD_INT 16
22245: PUSH
22246: LD_INT 17
22248: PUSH
22249: LD_INT 18
22251: PUSH
22252: LD_INT 19
22254: PUSH
22255: LD_INT 20
22257: PUSH
22258: LD_INT 21
22260: PUSH
22261: LD_INT 22
22263: PUSH
22264: LD_INT 23
22266: PUSH
22267: LD_INT 24
22269: PUSH
22270: LD_INT 25
22272: PUSH
22273: LD_INT 26
22275: PUSH
22276: LD_INT 27
22278: PUSH
22279: LD_INT 28
22281: PUSH
22282: LD_INT 30
22284: PUSH
22285: LD_INT 31
22287: PUSH
22288: LD_INT 32
22290: PUSH
22291: LD_INT 33
22293: PUSH
22294: LD_INT 34
22296: PUSH
22297: LD_INT 36
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 101
22338: PUSH
22339: LD_INT 102
22341: PUSH
22342: LD_INT 103
22344: PUSH
22345: LD_INT 104
22347: PUSH
22348: LD_INT 105
22350: PUSH
22351: LD_INT 106
22353: PUSH
22354: LD_INT 107
22356: PUSH
22357: LD_INT 108
22359: PUSH
22360: LD_INT 109
22362: PUSH
22363: LD_INT 110
22365: PUSH
22366: LD_INT 111
22368: PUSH
22369: LD_INT 112
22371: PUSH
22372: LD_INT 113
22374: PUSH
22375: LD_INT 114
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: ST_TO_ADDR
22398: GO 23769
22400: LD_INT 13
22402: DOUBLE
22403: EQUAL
22404: IFTRUE 22408
22406: GO 22604
22408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22409: LD_ADDR_VAR 0 1
22413: PUSH
22414: LD_INT 1
22416: PUSH
22417: LD_INT 2
22419: PUSH
22420: LD_INT 3
22422: PUSH
22423: LD_INT 4
22425: PUSH
22426: LD_INT 5
22428: PUSH
22429: LD_INT 8
22431: PUSH
22432: LD_INT 9
22434: PUSH
22435: LD_INT 10
22437: PUSH
22438: LD_INT 11
22440: PUSH
22441: LD_INT 12
22443: PUSH
22444: LD_INT 14
22446: PUSH
22447: LD_INT 15
22449: PUSH
22450: LD_INT 16
22452: PUSH
22453: LD_INT 17
22455: PUSH
22456: LD_INT 18
22458: PUSH
22459: LD_INT 19
22461: PUSH
22462: LD_INT 20
22464: PUSH
22465: LD_INT 21
22467: PUSH
22468: LD_INT 22
22470: PUSH
22471: LD_INT 23
22473: PUSH
22474: LD_INT 24
22476: PUSH
22477: LD_INT 25
22479: PUSH
22480: LD_INT 26
22482: PUSH
22483: LD_INT 27
22485: PUSH
22486: LD_INT 28
22488: PUSH
22489: LD_INT 30
22491: PUSH
22492: LD_INT 31
22494: PUSH
22495: LD_INT 32
22497: PUSH
22498: LD_INT 33
22500: PUSH
22501: LD_INT 34
22503: PUSH
22504: LD_INT 36
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 101
22542: PUSH
22543: LD_INT 102
22545: PUSH
22546: LD_INT 103
22548: PUSH
22549: LD_INT 104
22551: PUSH
22552: LD_INT 105
22554: PUSH
22555: LD_INT 106
22557: PUSH
22558: LD_INT 107
22560: PUSH
22561: LD_INT 108
22563: PUSH
22564: LD_INT 109
22566: PUSH
22567: LD_INT 110
22569: PUSH
22570: LD_INT 111
22572: PUSH
22573: LD_INT 112
22575: PUSH
22576: LD_INT 113
22578: PUSH
22579: LD_INT 114
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: ST_TO_ADDR
22602: GO 23769
22604: LD_INT 14
22606: DOUBLE
22607: EQUAL
22608: IFTRUE 22612
22610: GO 22824
22612: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22613: LD_ADDR_VAR 0 1
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: LD_INT 2
22623: PUSH
22624: LD_INT 3
22626: PUSH
22627: LD_INT 4
22629: PUSH
22630: LD_INT 5
22632: PUSH
22633: LD_INT 6
22635: PUSH
22636: LD_INT 7
22638: PUSH
22639: LD_INT 8
22641: PUSH
22642: LD_INT 9
22644: PUSH
22645: LD_INT 10
22647: PUSH
22648: LD_INT 11
22650: PUSH
22651: LD_INT 12
22653: PUSH
22654: LD_INT 13
22656: PUSH
22657: LD_INT 14
22659: PUSH
22660: LD_INT 15
22662: PUSH
22663: LD_INT 16
22665: PUSH
22666: LD_INT 17
22668: PUSH
22669: LD_INT 18
22671: PUSH
22672: LD_INT 19
22674: PUSH
22675: LD_INT 20
22677: PUSH
22678: LD_INT 21
22680: PUSH
22681: LD_INT 22
22683: PUSH
22684: LD_INT 23
22686: PUSH
22687: LD_INT 24
22689: PUSH
22690: LD_INT 25
22692: PUSH
22693: LD_INT 26
22695: PUSH
22696: LD_INT 27
22698: PUSH
22699: LD_INT 28
22701: PUSH
22702: LD_INT 29
22704: PUSH
22705: LD_INT 30
22707: PUSH
22708: LD_INT 31
22710: PUSH
22711: LD_INT 32
22713: PUSH
22714: LD_INT 33
22716: PUSH
22717: LD_INT 34
22719: PUSH
22720: LD_INT 36
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 101
22762: PUSH
22763: LD_INT 102
22765: PUSH
22766: LD_INT 103
22768: PUSH
22769: LD_INT 104
22771: PUSH
22772: LD_INT 105
22774: PUSH
22775: LD_INT 106
22777: PUSH
22778: LD_INT 107
22780: PUSH
22781: LD_INT 108
22783: PUSH
22784: LD_INT 109
22786: PUSH
22787: LD_INT 110
22789: PUSH
22790: LD_INT 111
22792: PUSH
22793: LD_INT 112
22795: PUSH
22796: LD_INT 113
22798: PUSH
22799: LD_INT 114
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: ST_TO_ADDR
22822: GO 23769
22824: LD_INT 15
22826: DOUBLE
22827: EQUAL
22828: IFTRUE 22832
22830: GO 23044
22832: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22833: LD_ADDR_VAR 0 1
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: LD_INT 2
22843: PUSH
22844: LD_INT 3
22846: PUSH
22847: LD_INT 4
22849: PUSH
22850: LD_INT 5
22852: PUSH
22853: LD_INT 6
22855: PUSH
22856: LD_INT 7
22858: PUSH
22859: LD_INT 8
22861: PUSH
22862: LD_INT 9
22864: PUSH
22865: LD_INT 10
22867: PUSH
22868: LD_INT 11
22870: PUSH
22871: LD_INT 12
22873: PUSH
22874: LD_INT 13
22876: PUSH
22877: LD_INT 14
22879: PUSH
22880: LD_INT 15
22882: PUSH
22883: LD_INT 16
22885: PUSH
22886: LD_INT 17
22888: PUSH
22889: LD_INT 18
22891: PUSH
22892: LD_INT 19
22894: PUSH
22895: LD_INT 20
22897: PUSH
22898: LD_INT 21
22900: PUSH
22901: LD_INT 22
22903: PUSH
22904: LD_INT 23
22906: PUSH
22907: LD_INT 24
22909: PUSH
22910: LD_INT 25
22912: PUSH
22913: LD_INT 26
22915: PUSH
22916: LD_INT 27
22918: PUSH
22919: LD_INT 28
22921: PUSH
22922: LD_INT 29
22924: PUSH
22925: LD_INT 30
22927: PUSH
22928: LD_INT 31
22930: PUSH
22931: LD_INT 32
22933: PUSH
22934: LD_INT 33
22936: PUSH
22937: LD_INT 34
22939: PUSH
22940: LD_INT 36
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 101
22982: PUSH
22983: LD_INT 102
22985: PUSH
22986: LD_INT 103
22988: PUSH
22989: LD_INT 104
22991: PUSH
22992: LD_INT 105
22994: PUSH
22995: LD_INT 106
22997: PUSH
22998: LD_INT 107
23000: PUSH
23001: LD_INT 108
23003: PUSH
23004: LD_INT 109
23006: PUSH
23007: LD_INT 110
23009: PUSH
23010: LD_INT 111
23012: PUSH
23013: LD_INT 112
23015: PUSH
23016: LD_INT 113
23018: PUSH
23019: LD_INT 114
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: ST_TO_ADDR
23042: GO 23769
23044: LD_INT 16
23046: DOUBLE
23047: EQUAL
23048: IFTRUE 23052
23050: GO 23176
23052: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23053: LD_ADDR_VAR 0 1
23057: PUSH
23058: LD_INT 2
23060: PUSH
23061: LD_INT 4
23063: PUSH
23064: LD_INT 5
23066: PUSH
23067: LD_INT 7
23069: PUSH
23070: LD_INT 11
23072: PUSH
23073: LD_INT 12
23075: PUSH
23076: LD_INT 15
23078: PUSH
23079: LD_INT 16
23081: PUSH
23082: LD_INT 20
23084: PUSH
23085: LD_INT 21
23087: PUSH
23088: LD_INT 22
23090: PUSH
23091: LD_INT 23
23093: PUSH
23094: LD_INT 25
23096: PUSH
23097: LD_INT 26
23099: PUSH
23100: LD_INT 30
23102: PUSH
23103: LD_INT 31
23105: PUSH
23106: LD_INT 32
23108: PUSH
23109: LD_INT 33
23111: PUSH
23112: LD_INT 34
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 101
23138: PUSH
23139: LD_INT 102
23141: PUSH
23142: LD_INT 103
23144: PUSH
23145: LD_INT 106
23147: PUSH
23148: LD_INT 108
23150: PUSH
23151: LD_INT 112
23153: PUSH
23154: LD_INT 113
23156: PUSH
23157: LD_INT 114
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: ST_TO_ADDR
23174: GO 23769
23176: LD_INT 17
23178: DOUBLE
23179: EQUAL
23180: IFTRUE 23184
23182: GO 23396
23184: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23185: LD_ADDR_VAR 0 1
23189: PUSH
23190: LD_INT 1
23192: PUSH
23193: LD_INT 2
23195: PUSH
23196: LD_INT 3
23198: PUSH
23199: LD_INT 4
23201: PUSH
23202: LD_INT 5
23204: PUSH
23205: LD_INT 6
23207: PUSH
23208: LD_INT 7
23210: PUSH
23211: LD_INT 8
23213: PUSH
23214: LD_INT 9
23216: PUSH
23217: LD_INT 10
23219: PUSH
23220: LD_INT 11
23222: PUSH
23223: LD_INT 12
23225: PUSH
23226: LD_INT 13
23228: PUSH
23229: LD_INT 14
23231: PUSH
23232: LD_INT 15
23234: PUSH
23235: LD_INT 16
23237: PUSH
23238: LD_INT 17
23240: PUSH
23241: LD_INT 18
23243: PUSH
23244: LD_INT 19
23246: PUSH
23247: LD_INT 20
23249: PUSH
23250: LD_INT 21
23252: PUSH
23253: LD_INT 22
23255: PUSH
23256: LD_INT 23
23258: PUSH
23259: LD_INT 24
23261: PUSH
23262: LD_INT 25
23264: PUSH
23265: LD_INT 26
23267: PUSH
23268: LD_INT 27
23270: PUSH
23271: LD_INT 28
23273: PUSH
23274: LD_INT 29
23276: PUSH
23277: LD_INT 30
23279: PUSH
23280: LD_INT 31
23282: PUSH
23283: LD_INT 32
23285: PUSH
23286: LD_INT 33
23288: PUSH
23289: LD_INT 34
23291: PUSH
23292: LD_INT 36
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 101
23334: PUSH
23335: LD_INT 102
23337: PUSH
23338: LD_INT 103
23340: PUSH
23341: LD_INT 104
23343: PUSH
23344: LD_INT 105
23346: PUSH
23347: LD_INT 106
23349: PUSH
23350: LD_INT 107
23352: PUSH
23353: LD_INT 108
23355: PUSH
23356: LD_INT 109
23358: PUSH
23359: LD_INT 110
23361: PUSH
23362: LD_INT 111
23364: PUSH
23365: LD_INT 112
23367: PUSH
23368: LD_INT 113
23370: PUSH
23371: LD_INT 114
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: ST_TO_ADDR
23394: GO 23769
23396: LD_INT 18
23398: DOUBLE
23399: EQUAL
23400: IFTRUE 23404
23402: GO 23540
23404: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23405: LD_ADDR_VAR 0 1
23409: PUSH
23410: LD_INT 2
23412: PUSH
23413: LD_INT 4
23415: PUSH
23416: LD_INT 5
23418: PUSH
23419: LD_INT 7
23421: PUSH
23422: LD_INT 11
23424: PUSH
23425: LD_INT 12
23427: PUSH
23428: LD_INT 15
23430: PUSH
23431: LD_INT 16
23433: PUSH
23434: LD_INT 20
23436: PUSH
23437: LD_INT 21
23439: PUSH
23440: LD_INT 22
23442: PUSH
23443: LD_INT 23
23445: PUSH
23446: LD_INT 25
23448: PUSH
23449: LD_INT 26
23451: PUSH
23452: LD_INT 30
23454: PUSH
23455: LD_INT 31
23457: PUSH
23458: LD_INT 32
23460: PUSH
23461: LD_INT 33
23463: PUSH
23464: LD_INT 34
23466: PUSH
23467: LD_INT 35
23469: PUSH
23470: LD_INT 36
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 101
23498: PUSH
23499: LD_INT 102
23501: PUSH
23502: LD_INT 103
23504: PUSH
23505: LD_INT 106
23507: PUSH
23508: LD_INT 108
23510: PUSH
23511: LD_INT 112
23513: PUSH
23514: LD_INT 113
23516: PUSH
23517: LD_INT 114
23519: PUSH
23520: LD_INT 115
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: ST_TO_ADDR
23538: GO 23769
23540: LD_INT 19
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23768
23548: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23549: LD_ADDR_VAR 0 1
23553: PUSH
23554: LD_INT 1
23556: PUSH
23557: LD_INT 2
23559: PUSH
23560: LD_INT 3
23562: PUSH
23563: LD_INT 4
23565: PUSH
23566: LD_INT 5
23568: PUSH
23569: LD_INT 6
23571: PUSH
23572: LD_INT 7
23574: PUSH
23575: LD_INT 8
23577: PUSH
23578: LD_INT 9
23580: PUSH
23581: LD_INT 10
23583: PUSH
23584: LD_INT 11
23586: PUSH
23587: LD_INT 12
23589: PUSH
23590: LD_INT 13
23592: PUSH
23593: LD_INT 14
23595: PUSH
23596: LD_INT 15
23598: PUSH
23599: LD_INT 16
23601: PUSH
23602: LD_INT 17
23604: PUSH
23605: LD_INT 18
23607: PUSH
23608: LD_INT 19
23610: PUSH
23611: LD_INT 20
23613: PUSH
23614: LD_INT 21
23616: PUSH
23617: LD_INT 22
23619: PUSH
23620: LD_INT 23
23622: PUSH
23623: LD_INT 24
23625: PUSH
23626: LD_INT 25
23628: PUSH
23629: LD_INT 26
23631: PUSH
23632: LD_INT 27
23634: PUSH
23635: LD_INT 28
23637: PUSH
23638: LD_INT 29
23640: PUSH
23641: LD_INT 30
23643: PUSH
23644: LD_INT 31
23646: PUSH
23647: LD_INT 32
23649: PUSH
23650: LD_INT 33
23652: PUSH
23653: LD_INT 34
23655: PUSH
23656: LD_INT 35
23658: PUSH
23659: LD_INT 36
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 101
23702: PUSH
23703: LD_INT 102
23705: PUSH
23706: LD_INT 103
23708: PUSH
23709: LD_INT 104
23711: PUSH
23712: LD_INT 105
23714: PUSH
23715: LD_INT 106
23717: PUSH
23718: LD_INT 107
23720: PUSH
23721: LD_INT 108
23723: PUSH
23724: LD_INT 109
23726: PUSH
23727: LD_INT 110
23729: PUSH
23730: LD_INT 111
23732: PUSH
23733: LD_INT 112
23735: PUSH
23736: LD_INT 113
23738: PUSH
23739: LD_INT 114
23741: PUSH
23742: LD_INT 115
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: ST_TO_ADDR
23766: GO 23769
23768: POP
// end else
23769: GO 23988
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23771: LD_ADDR_VAR 0 1
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: LD_INT 2
23781: PUSH
23782: LD_INT 3
23784: PUSH
23785: LD_INT 4
23787: PUSH
23788: LD_INT 5
23790: PUSH
23791: LD_INT 6
23793: PUSH
23794: LD_INT 7
23796: PUSH
23797: LD_INT 8
23799: PUSH
23800: LD_INT 9
23802: PUSH
23803: LD_INT 10
23805: PUSH
23806: LD_INT 11
23808: PUSH
23809: LD_INT 12
23811: PUSH
23812: LD_INT 13
23814: PUSH
23815: LD_INT 14
23817: PUSH
23818: LD_INT 15
23820: PUSH
23821: LD_INT 16
23823: PUSH
23824: LD_INT 17
23826: PUSH
23827: LD_INT 18
23829: PUSH
23830: LD_INT 19
23832: PUSH
23833: LD_INT 20
23835: PUSH
23836: LD_INT 21
23838: PUSH
23839: LD_INT 22
23841: PUSH
23842: LD_INT 23
23844: PUSH
23845: LD_INT 24
23847: PUSH
23848: LD_INT 25
23850: PUSH
23851: LD_INT 26
23853: PUSH
23854: LD_INT 27
23856: PUSH
23857: LD_INT 28
23859: PUSH
23860: LD_INT 29
23862: PUSH
23863: LD_INT 30
23865: PUSH
23866: LD_INT 31
23868: PUSH
23869: LD_INT 32
23871: PUSH
23872: LD_INT 33
23874: PUSH
23875: LD_INT 34
23877: PUSH
23878: LD_INT 35
23880: PUSH
23881: LD_INT 36
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 101
23924: PUSH
23925: LD_INT 102
23927: PUSH
23928: LD_INT 103
23930: PUSH
23931: LD_INT 104
23933: PUSH
23934: LD_INT 105
23936: PUSH
23937: LD_INT 106
23939: PUSH
23940: LD_INT 107
23942: PUSH
23943: LD_INT 108
23945: PUSH
23946: LD_INT 109
23948: PUSH
23949: LD_INT 110
23951: PUSH
23952: LD_INT 111
23954: PUSH
23955: LD_INT 112
23957: PUSH
23958: LD_INT 113
23960: PUSH
23961: LD_INT 114
23963: PUSH
23964: LD_INT 115
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: ST_TO_ADDR
// if result then
23988: LD_VAR 0 1
23992: IFFALSE 24281
// begin normal :=  ;
23994: LD_ADDR_VAR 0 3
23998: PUSH
23999: LD_STRING 
24001: ST_TO_ADDR
// hardcore :=  ;
24002: LD_ADDR_VAR 0 4
24006: PUSH
24007: LD_STRING 
24009: ST_TO_ADDR
// for i = 1 to normalCounter do
24010: LD_ADDR_VAR 0 5
24014: PUSH
24015: DOUBLE
24016: LD_INT 1
24018: DEC
24019: ST_TO_ADDR
24020: LD_EXP 67
24024: PUSH
24025: FOR_TO
24026: IFFALSE 24127
// begin tmp := 0 ;
24028: LD_ADDR_VAR 0 2
24032: PUSH
24033: LD_STRING 0
24035: ST_TO_ADDR
// if result [ 1 ] then
24036: LD_VAR 0 1
24040: PUSH
24041: LD_INT 1
24043: ARRAY
24044: IFFALSE 24109
// if result [ 1 ] [ 1 ] = i then
24046: LD_VAR 0 1
24050: PUSH
24051: LD_INT 1
24053: ARRAY
24054: PUSH
24055: LD_INT 1
24057: ARRAY
24058: PUSH
24059: LD_VAR 0 5
24063: EQUAL
24064: IFFALSE 24109
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24066: LD_ADDR_VAR 0 1
24070: PUSH
24071: LD_VAR 0 1
24075: PPUSH
24076: LD_INT 1
24078: PPUSH
24079: LD_VAR 0 1
24083: PUSH
24084: LD_INT 1
24086: ARRAY
24087: PPUSH
24088: LD_INT 1
24090: PPUSH
24091: CALL_OW 3
24095: PPUSH
24096: CALL_OW 1
24100: ST_TO_ADDR
// tmp := 1 ;
24101: LD_ADDR_VAR 0 2
24105: PUSH
24106: LD_STRING 1
24108: ST_TO_ADDR
// end ; normal := normal & tmp ;
24109: LD_ADDR_VAR 0 3
24113: PUSH
24114: LD_VAR 0 3
24118: PUSH
24119: LD_VAR 0 2
24123: STR
24124: ST_TO_ADDR
// end ;
24125: GO 24025
24127: POP
24128: POP
// for i = 1 to hardcoreCounter do
24129: LD_ADDR_VAR 0 5
24133: PUSH
24134: DOUBLE
24135: LD_INT 1
24137: DEC
24138: ST_TO_ADDR
24139: LD_EXP 68
24143: PUSH
24144: FOR_TO
24145: IFFALSE 24250
// begin tmp := 0 ;
24147: LD_ADDR_VAR 0 2
24151: PUSH
24152: LD_STRING 0
24154: ST_TO_ADDR
// if result [ 2 ] then
24155: LD_VAR 0 1
24159: PUSH
24160: LD_INT 2
24162: ARRAY
24163: IFFALSE 24232
// if result [ 2 ] [ 1 ] = 100 + i then
24165: LD_VAR 0 1
24169: PUSH
24170: LD_INT 2
24172: ARRAY
24173: PUSH
24174: LD_INT 1
24176: ARRAY
24177: PUSH
24178: LD_INT 100
24180: PUSH
24181: LD_VAR 0 5
24185: PLUS
24186: EQUAL
24187: IFFALSE 24232
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24189: LD_ADDR_VAR 0 1
24193: PUSH
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_INT 2
24201: PPUSH
24202: LD_VAR 0 1
24206: PUSH
24207: LD_INT 2
24209: ARRAY
24210: PPUSH
24211: LD_INT 1
24213: PPUSH
24214: CALL_OW 3
24218: PPUSH
24219: CALL_OW 1
24223: ST_TO_ADDR
// tmp := 1 ;
24224: LD_ADDR_VAR 0 2
24228: PUSH
24229: LD_STRING 1
24231: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24232: LD_ADDR_VAR 0 4
24236: PUSH
24237: LD_VAR 0 4
24241: PUSH
24242: LD_VAR 0 2
24246: STR
24247: ST_TO_ADDR
// end ;
24248: GO 24144
24250: POP
24251: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24252: LD_STRING getStreamItemsFromMission("
24254: PUSH
24255: LD_VAR 0 3
24259: STR
24260: PUSH
24261: LD_STRING ","
24263: STR
24264: PUSH
24265: LD_VAR 0 4
24269: STR
24270: PUSH
24271: LD_STRING ")
24273: STR
24274: PPUSH
24275: CALL_OW 559
// end else
24279: GO 24288
// ToLua ( getStreamItemsFromMission("","") ) ;
24281: LD_STRING getStreamItemsFromMission("","")
24283: PPUSH
24284: CALL_OW 559
// end ;
24288: LD_VAR 0 1
24292: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24293: LD_EXP 66
24297: PUSH
24298: LD_EXP 71
24302: AND
24303: IFFALSE 24427
24305: GO 24307
24307: DISABLE
24308: LD_INT 0
24310: PPUSH
24311: PPUSH
// begin enable ;
24312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24313: LD_ADDR_VAR 0 2
24317: PUSH
24318: LD_INT 22
24320: PUSH
24321: LD_OWVAR 2
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 2
24332: PUSH
24333: LD_INT 34
24335: PUSH
24336: LD_INT 7
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 34
24345: PUSH
24346: LD_INT 45
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 34
24355: PUSH
24356: LD_INT 28
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 34
24365: PUSH
24366: LD_INT 47
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PPUSH
24384: CALL_OW 69
24388: ST_TO_ADDR
// if not tmp then
24389: LD_VAR 0 2
24393: NOT
24394: IFFALSE 24398
// exit ;
24396: GO 24427
// for i in tmp do
24398: LD_ADDR_VAR 0 1
24402: PUSH
24403: LD_VAR 0 2
24407: PUSH
24408: FOR_IN
24409: IFFALSE 24425
// begin SetLives ( i , 0 ) ;
24411: LD_VAR 0 1
24415: PPUSH
24416: LD_INT 0
24418: PPUSH
24419: CALL_OW 234
// end ;
24423: GO 24408
24425: POP
24426: POP
// end ;
24427: PPOPN 2
24429: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24430: LD_EXP 66
24434: PUSH
24435: LD_EXP 72
24439: AND
24440: IFFALSE 24524
24442: GO 24444
24444: DISABLE
24445: LD_INT 0
24447: PPUSH
24448: PPUSH
// begin enable ;
24449: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24450: LD_ADDR_VAR 0 2
24454: PUSH
24455: LD_INT 22
24457: PUSH
24458: LD_OWVAR 2
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 32
24469: PUSH
24470: LD_INT 3
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PPUSH
24481: CALL_OW 69
24485: ST_TO_ADDR
// if not tmp then
24486: LD_VAR 0 2
24490: NOT
24491: IFFALSE 24495
// exit ;
24493: GO 24524
// for i in tmp do
24495: LD_ADDR_VAR 0 1
24499: PUSH
24500: LD_VAR 0 2
24504: PUSH
24505: FOR_IN
24506: IFFALSE 24522
// begin SetLives ( i , 0 ) ;
24508: LD_VAR 0 1
24512: PPUSH
24513: LD_INT 0
24515: PPUSH
24516: CALL_OW 234
// end ;
24520: GO 24505
24522: POP
24523: POP
// end ;
24524: PPOPN 2
24526: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24527: LD_EXP 66
24531: PUSH
24532: LD_EXP 69
24536: AND
24537: IFFALSE 24630
24539: GO 24541
24541: DISABLE
24542: LD_INT 0
24544: PPUSH
// begin enable ;
24545: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24546: LD_ADDR_VAR 0 1
24550: PUSH
24551: LD_INT 22
24553: PUSH
24554: LD_OWVAR 2
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: LD_INT 25
24568: PUSH
24569: LD_INT 5
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 25
24578: PUSH
24579: LD_INT 9
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 25
24588: PUSH
24589: LD_INT 8
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PPUSH
24606: CALL_OW 69
24610: PUSH
24611: FOR_IN
24612: IFFALSE 24628
// begin SetClass ( i , 1 ) ;
24614: LD_VAR 0 1
24618: PPUSH
24619: LD_INT 1
24621: PPUSH
24622: CALL_OW 336
// end ;
24626: GO 24611
24628: POP
24629: POP
// end ;
24630: PPOPN 1
24632: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24633: LD_EXP 66
24637: PUSH
24638: LD_EXP 70
24642: AND
24643: PUSH
24644: LD_OWVAR 65
24648: PUSH
24649: LD_INT 7
24651: LESS
24652: AND
24653: IFFALSE 24667
24655: GO 24657
24657: DISABLE
// begin enable ;
24658: ENABLE
// game_speed := 7 ;
24659: LD_ADDR_OWVAR 65
24663: PUSH
24664: LD_INT 7
24666: ST_TO_ADDR
// end ;
24667: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24668: LD_EXP 66
24672: PUSH
24673: LD_EXP 73
24677: AND
24678: IFFALSE 24880
24680: GO 24682
24682: DISABLE
24683: LD_INT 0
24685: PPUSH
24686: PPUSH
24687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24688: LD_ADDR_VAR 0 3
24692: PUSH
24693: LD_INT 81
24695: PUSH
24696: LD_OWVAR 2
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 21
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PPUSH
24719: CALL_OW 69
24723: ST_TO_ADDR
// if not tmp then
24724: LD_VAR 0 3
24728: NOT
24729: IFFALSE 24733
// exit ;
24731: GO 24880
// if tmp > 5 then
24733: LD_VAR 0 3
24737: PUSH
24738: LD_INT 5
24740: GREATER
24741: IFFALSE 24753
// k := 5 else
24743: LD_ADDR_VAR 0 2
24747: PUSH
24748: LD_INT 5
24750: ST_TO_ADDR
24751: GO 24763
// k := tmp ;
24753: LD_ADDR_VAR 0 2
24757: PUSH
24758: LD_VAR 0 3
24762: ST_TO_ADDR
// for i := 1 to k do
24763: LD_ADDR_VAR 0 1
24767: PUSH
24768: DOUBLE
24769: LD_INT 1
24771: DEC
24772: ST_TO_ADDR
24773: LD_VAR 0 2
24777: PUSH
24778: FOR_TO
24779: IFFALSE 24878
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24781: LD_VAR 0 3
24785: PUSH
24786: LD_VAR 0 1
24790: ARRAY
24791: PPUSH
24792: LD_VAR 0 1
24796: PUSH
24797: LD_INT 4
24799: MOD
24800: PUSH
24801: LD_INT 1
24803: PLUS
24804: PPUSH
24805: CALL_OW 259
24809: PUSH
24810: LD_INT 10
24812: LESS
24813: IFFALSE 24876
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24815: LD_VAR 0 3
24819: PUSH
24820: LD_VAR 0 1
24824: ARRAY
24825: PPUSH
24826: LD_VAR 0 1
24830: PUSH
24831: LD_INT 4
24833: MOD
24834: PUSH
24835: LD_INT 1
24837: PLUS
24838: PPUSH
24839: LD_VAR 0 3
24843: PUSH
24844: LD_VAR 0 1
24848: ARRAY
24849: PPUSH
24850: LD_VAR 0 1
24854: PUSH
24855: LD_INT 4
24857: MOD
24858: PUSH
24859: LD_INT 1
24861: PLUS
24862: PPUSH
24863: CALL_OW 259
24867: PUSH
24868: LD_INT 1
24870: PLUS
24871: PPUSH
24872: CALL_OW 237
24876: GO 24778
24878: POP
24879: POP
// end ;
24880: PPOPN 3
24882: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24883: LD_EXP 66
24887: PUSH
24888: LD_EXP 74
24892: AND
24893: IFFALSE 24913
24895: GO 24897
24897: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24898: LD_INT 4
24900: PPUSH
24901: LD_OWVAR 2
24905: PPUSH
24906: LD_INT 0
24908: PPUSH
24909: CALL_OW 324
24913: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24914: LD_EXP 66
24918: PUSH
24919: LD_EXP 103
24923: AND
24924: IFFALSE 24944
24926: GO 24928
24928: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24929: LD_INT 19
24931: PPUSH
24932: LD_OWVAR 2
24936: PPUSH
24937: LD_INT 0
24939: PPUSH
24940: CALL_OW 324
24944: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24945: LD_EXP 66
24949: PUSH
24950: LD_EXP 75
24954: AND
24955: IFFALSE 25057
24957: GO 24959
24959: DISABLE
24960: LD_INT 0
24962: PPUSH
24963: PPUSH
// begin enable ;
24964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24965: LD_ADDR_VAR 0 2
24969: PUSH
24970: LD_INT 22
24972: PUSH
24973: LD_OWVAR 2
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 2
24984: PUSH
24985: LD_INT 34
24987: PUSH
24988: LD_INT 11
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 34
24997: PUSH
24998: LD_INT 30
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: LIST
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PPUSH
25014: CALL_OW 69
25018: ST_TO_ADDR
// if not tmp then
25019: LD_VAR 0 2
25023: NOT
25024: IFFALSE 25028
// exit ;
25026: GO 25057
// for i in tmp do
25028: LD_ADDR_VAR 0 1
25032: PUSH
25033: LD_VAR 0 2
25037: PUSH
25038: FOR_IN
25039: IFFALSE 25055
// begin SetLives ( i , 0 ) ;
25041: LD_VAR 0 1
25045: PPUSH
25046: LD_INT 0
25048: PPUSH
25049: CALL_OW 234
// end ;
25053: GO 25038
25055: POP
25056: POP
// end ;
25057: PPOPN 2
25059: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25060: LD_EXP 66
25064: PUSH
25065: LD_EXP 76
25069: AND
25070: IFFALSE 25090
25072: GO 25074
25074: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25075: LD_INT 32
25077: PPUSH
25078: LD_OWVAR 2
25082: PPUSH
25083: LD_INT 0
25085: PPUSH
25086: CALL_OW 324
25090: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25091: LD_EXP 66
25095: PUSH
25096: LD_EXP 77
25100: AND
25101: IFFALSE 25282
25103: GO 25105
25105: DISABLE
25106: LD_INT 0
25108: PPUSH
25109: PPUSH
25110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25111: LD_ADDR_VAR 0 2
25115: PUSH
25116: LD_INT 22
25118: PUSH
25119: LD_OWVAR 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 33
25130: PUSH
25131: LD_INT 3
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PPUSH
25142: CALL_OW 69
25146: ST_TO_ADDR
// if not tmp then
25147: LD_VAR 0 2
25151: NOT
25152: IFFALSE 25156
// exit ;
25154: GO 25282
// side := 0 ;
25156: LD_ADDR_VAR 0 3
25160: PUSH
25161: LD_INT 0
25163: ST_TO_ADDR
// for i := 1 to 8 do
25164: LD_ADDR_VAR 0 1
25168: PUSH
25169: DOUBLE
25170: LD_INT 1
25172: DEC
25173: ST_TO_ADDR
25174: LD_INT 8
25176: PUSH
25177: FOR_TO
25178: IFFALSE 25226
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25180: LD_OWVAR 2
25184: PUSH
25185: LD_VAR 0 1
25189: NONEQUAL
25190: PUSH
25191: LD_OWVAR 2
25195: PPUSH
25196: LD_VAR 0 1
25200: PPUSH
25201: CALL_OW 81
25205: PUSH
25206: LD_INT 2
25208: EQUAL
25209: AND
25210: IFFALSE 25224
// begin side := i ;
25212: LD_ADDR_VAR 0 3
25216: PUSH
25217: LD_VAR 0 1
25221: ST_TO_ADDR
// break ;
25222: GO 25226
// end ;
25224: GO 25177
25226: POP
25227: POP
// if not side then
25228: LD_VAR 0 3
25232: NOT
25233: IFFALSE 25237
// exit ;
25235: GO 25282
// for i := 1 to tmp do
25237: LD_ADDR_VAR 0 1
25241: PUSH
25242: DOUBLE
25243: LD_INT 1
25245: DEC
25246: ST_TO_ADDR
25247: LD_VAR 0 2
25251: PUSH
25252: FOR_TO
25253: IFFALSE 25280
// if Prob ( 60 ) then
25255: LD_INT 60
25257: PPUSH
25258: CALL_OW 13
25262: IFFALSE 25278
// SetSide ( i , side ) ;
25264: LD_VAR 0 1
25268: PPUSH
25269: LD_VAR 0 3
25273: PPUSH
25274: CALL_OW 235
25278: GO 25252
25280: POP
25281: POP
// end ;
25282: PPOPN 3
25284: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25285: LD_EXP 66
25289: PUSH
25290: LD_EXP 79
25294: AND
25295: IFFALSE 25414
25297: GO 25299
25299: DISABLE
25300: LD_INT 0
25302: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25303: LD_ADDR_VAR 0 1
25307: PUSH
25308: LD_INT 22
25310: PUSH
25311: LD_OWVAR 2
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 21
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 3
25332: PUSH
25333: LD_INT 23
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: LIST
25351: PPUSH
25352: CALL_OW 69
25356: PUSH
25357: FOR_IN
25358: IFFALSE 25412
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25360: LD_VAR 0 1
25364: PPUSH
25365: CALL_OW 257
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: LD_INT 2
25375: PUSH
25376: LD_INT 3
25378: PUSH
25379: LD_INT 4
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: IN
25388: IFFALSE 25410
// SetClass ( un , rand ( 1 , 4 ) ) ;
25390: LD_VAR 0 1
25394: PPUSH
25395: LD_INT 1
25397: PPUSH
25398: LD_INT 4
25400: PPUSH
25401: CALL_OW 12
25405: PPUSH
25406: CALL_OW 336
25410: GO 25357
25412: POP
25413: POP
// end ;
25414: PPOPN 1
25416: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25417: LD_EXP 66
25421: PUSH
25422: LD_EXP 78
25426: AND
25427: IFFALSE 25506
25429: GO 25431
25431: DISABLE
25432: LD_INT 0
25434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25435: LD_ADDR_VAR 0 1
25439: PUSH
25440: LD_INT 22
25442: PUSH
25443: LD_OWVAR 2
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 21
25454: PUSH
25455: LD_INT 3
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PPUSH
25466: CALL_OW 69
25470: ST_TO_ADDR
// if not tmp then
25471: LD_VAR 0 1
25475: NOT
25476: IFFALSE 25480
// exit ;
25478: GO 25506
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25480: LD_VAR 0 1
25484: PUSH
25485: LD_INT 1
25487: PPUSH
25488: LD_VAR 0 1
25492: PPUSH
25493: CALL_OW 12
25497: ARRAY
25498: PPUSH
25499: LD_INT 100
25501: PPUSH
25502: CALL_OW 234
// end ;
25506: PPOPN 1
25508: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25509: LD_EXP 66
25513: PUSH
25514: LD_EXP 80
25518: AND
25519: IFFALSE 25617
25521: GO 25523
25523: DISABLE
25524: LD_INT 0
25526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25527: LD_ADDR_VAR 0 1
25531: PUSH
25532: LD_INT 22
25534: PUSH
25535: LD_OWVAR 2
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 21
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PPUSH
25558: CALL_OW 69
25562: ST_TO_ADDR
// if not tmp then
25563: LD_VAR 0 1
25567: NOT
25568: IFFALSE 25572
// exit ;
25570: GO 25617
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25572: LD_VAR 0 1
25576: PUSH
25577: LD_INT 1
25579: PPUSH
25580: LD_VAR 0 1
25584: PPUSH
25585: CALL_OW 12
25589: ARRAY
25590: PPUSH
25591: LD_INT 1
25593: PPUSH
25594: LD_INT 4
25596: PPUSH
25597: CALL_OW 12
25601: PPUSH
25602: LD_INT 3000
25604: PPUSH
25605: LD_INT 9000
25607: PPUSH
25608: CALL_OW 12
25612: PPUSH
25613: CALL_OW 492
// end ;
25617: PPOPN 1
25619: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25620: LD_EXP 66
25624: PUSH
25625: LD_EXP 81
25629: AND
25630: IFFALSE 25650
25632: GO 25634
25634: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25635: LD_INT 1
25637: PPUSH
25638: LD_OWVAR 2
25642: PPUSH
25643: LD_INT 0
25645: PPUSH
25646: CALL_OW 324
25650: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25651: LD_EXP 66
25655: PUSH
25656: LD_EXP 82
25660: AND
25661: IFFALSE 25744
25663: GO 25665
25665: DISABLE
25666: LD_INT 0
25668: PPUSH
25669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25670: LD_ADDR_VAR 0 2
25674: PUSH
25675: LD_INT 22
25677: PUSH
25678: LD_OWVAR 2
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 21
25689: PUSH
25690: LD_INT 3
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PPUSH
25701: CALL_OW 69
25705: ST_TO_ADDR
// if not tmp then
25706: LD_VAR 0 2
25710: NOT
25711: IFFALSE 25715
// exit ;
25713: GO 25744
// for i in tmp do
25715: LD_ADDR_VAR 0 1
25719: PUSH
25720: LD_VAR 0 2
25724: PUSH
25725: FOR_IN
25726: IFFALSE 25742
// SetBLevel ( i , 10 ) ;
25728: LD_VAR 0 1
25732: PPUSH
25733: LD_INT 10
25735: PPUSH
25736: CALL_OW 241
25740: GO 25725
25742: POP
25743: POP
// end ;
25744: PPOPN 2
25746: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25747: LD_EXP 66
25751: PUSH
25752: LD_EXP 83
25756: AND
25757: IFFALSE 25868
25759: GO 25761
25761: DISABLE
25762: LD_INT 0
25764: PPUSH
25765: PPUSH
25766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25767: LD_ADDR_VAR 0 3
25771: PUSH
25772: LD_INT 22
25774: PUSH
25775: LD_OWVAR 2
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 25
25786: PUSH
25787: LD_INT 1
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PPUSH
25798: CALL_OW 69
25802: ST_TO_ADDR
// if not tmp then
25803: LD_VAR 0 3
25807: NOT
25808: IFFALSE 25812
// exit ;
25810: GO 25868
// un := tmp [ rand ( 1 , tmp ) ] ;
25812: LD_ADDR_VAR 0 2
25816: PUSH
25817: LD_VAR 0 3
25821: PUSH
25822: LD_INT 1
25824: PPUSH
25825: LD_VAR 0 3
25829: PPUSH
25830: CALL_OW 12
25834: ARRAY
25835: ST_TO_ADDR
// if Crawls ( un ) then
25836: LD_VAR 0 2
25840: PPUSH
25841: CALL_OW 318
25845: IFFALSE 25856
// ComWalk ( un ) ;
25847: LD_VAR 0 2
25851: PPUSH
25852: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25856: LD_VAR 0 2
25860: PPUSH
25861: LD_INT 5
25863: PPUSH
25864: CALL_OW 336
// end ;
25868: PPOPN 3
25870: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25871: LD_EXP 66
25875: PUSH
25876: LD_EXP 84
25880: AND
25881: PUSH
25882: LD_OWVAR 67
25886: PUSH
25887: LD_INT 3
25889: LESS
25890: AND
25891: IFFALSE 25910
25893: GO 25895
25895: DISABLE
// Difficulty := Difficulty + 1 ;
25896: LD_ADDR_OWVAR 67
25900: PUSH
25901: LD_OWVAR 67
25905: PUSH
25906: LD_INT 1
25908: PLUS
25909: ST_TO_ADDR
25910: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25911: LD_EXP 66
25915: PUSH
25916: LD_EXP 85
25920: AND
25921: IFFALSE 26024
25923: GO 25925
25925: DISABLE
25926: LD_INT 0
25928: PPUSH
// begin for i := 1 to 5 do
25929: LD_ADDR_VAR 0 1
25933: PUSH
25934: DOUBLE
25935: LD_INT 1
25937: DEC
25938: ST_TO_ADDR
25939: LD_INT 5
25941: PUSH
25942: FOR_TO
25943: IFFALSE 26022
// begin uc_nation := nation_nature ;
25945: LD_ADDR_OWVAR 21
25949: PUSH
25950: LD_INT 0
25952: ST_TO_ADDR
// uc_side := 0 ;
25953: LD_ADDR_OWVAR 20
25957: PUSH
25958: LD_INT 0
25960: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25961: LD_ADDR_OWVAR 29
25965: PUSH
25966: LD_INT 12
25968: PUSH
25969: LD_INT 12
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: ST_TO_ADDR
// hc_agressivity := 20 ;
25976: LD_ADDR_OWVAR 35
25980: PUSH
25981: LD_INT 20
25983: ST_TO_ADDR
// hc_class := class_tiger ;
25984: LD_ADDR_OWVAR 28
25988: PUSH
25989: LD_INT 14
25991: ST_TO_ADDR
// hc_gallery :=  ;
25992: LD_ADDR_OWVAR 33
25996: PUSH
25997: LD_STRING 
25999: ST_TO_ADDR
// hc_name :=  ;
26000: LD_ADDR_OWVAR 26
26004: PUSH
26005: LD_STRING 
26007: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26008: CALL_OW 44
26012: PPUSH
26013: LD_INT 0
26015: PPUSH
26016: CALL_OW 51
// end ;
26020: GO 25942
26022: POP
26023: POP
// end ;
26024: PPOPN 1
26026: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26027: LD_EXP 66
26031: PUSH
26032: LD_EXP 86
26036: AND
26037: IFFALSE 26046
26039: GO 26041
26041: DISABLE
// StreamSibBomb ;
26042: CALL 26047 0 0
26046: END
// export function StreamSibBomb ; var i , x , y ; begin
26047: LD_INT 0
26049: PPUSH
26050: PPUSH
26051: PPUSH
26052: PPUSH
// result := false ;
26053: LD_ADDR_VAR 0 1
26057: PUSH
26058: LD_INT 0
26060: ST_TO_ADDR
// for i := 1 to 16 do
26061: LD_ADDR_VAR 0 2
26065: PUSH
26066: DOUBLE
26067: LD_INT 1
26069: DEC
26070: ST_TO_ADDR
26071: LD_INT 16
26073: PUSH
26074: FOR_TO
26075: IFFALSE 26274
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26077: LD_ADDR_VAR 0 3
26081: PUSH
26082: LD_INT 10
26084: PUSH
26085: LD_INT 20
26087: PUSH
26088: LD_INT 30
26090: PUSH
26091: LD_INT 40
26093: PUSH
26094: LD_INT 50
26096: PUSH
26097: LD_INT 60
26099: PUSH
26100: LD_INT 70
26102: PUSH
26103: LD_INT 80
26105: PUSH
26106: LD_INT 90
26108: PUSH
26109: LD_INT 100
26111: PUSH
26112: LD_INT 110
26114: PUSH
26115: LD_INT 120
26117: PUSH
26118: LD_INT 130
26120: PUSH
26121: LD_INT 140
26123: PUSH
26124: LD_INT 150
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: PPUSH
26147: LD_INT 15
26149: PPUSH
26150: CALL_OW 12
26154: ARRAY
26155: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26156: LD_ADDR_VAR 0 4
26160: PUSH
26161: LD_INT 10
26163: PUSH
26164: LD_INT 20
26166: PUSH
26167: LD_INT 30
26169: PUSH
26170: LD_INT 40
26172: PUSH
26173: LD_INT 50
26175: PUSH
26176: LD_INT 60
26178: PUSH
26179: LD_INT 70
26181: PUSH
26182: LD_INT 80
26184: PUSH
26185: LD_INT 90
26187: PUSH
26188: LD_INT 100
26190: PUSH
26191: LD_INT 110
26193: PUSH
26194: LD_INT 120
26196: PUSH
26197: LD_INT 130
26199: PUSH
26200: LD_INT 140
26202: PUSH
26203: LD_INT 150
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: PPUSH
26226: LD_INT 15
26228: PPUSH
26229: CALL_OW 12
26233: ARRAY
26234: ST_TO_ADDR
// if ValidHex ( x , y ) then
26235: LD_VAR 0 3
26239: PPUSH
26240: LD_VAR 0 4
26244: PPUSH
26245: CALL_OW 488
26249: IFFALSE 26272
// begin result := [ x , y ] ;
26251: LD_ADDR_VAR 0 1
26255: PUSH
26256: LD_VAR 0 3
26260: PUSH
26261: LD_VAR 0 4
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: ST_TO_ADDR
// break ;
26270: GO 26274
// end ; end ;
26272: GO 26074
26274: POP
26275: POP
// if result then
26276: LD_VAR 0 1
26280: IFFALSE 26340
// begin ToLua ( playSibBomb() ) ;
26282: LD_STRING playSibBomb()
26284: PPUSH
26285: CALL_OW 559
// wait ( 0 0$14 ) ;
26289: LD_INT 490
26291: PPUSH
26292: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26296: LD_VAR 0 1
26300: PUSH
26301: LD_INT 1
26303: ARRAY
26304: PPUSH
26305: LD_VAR 0 1
26309: PUSH
26310: LD_INT 2
26312: ARRAY
26313: PPUSH
26314: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26318: LD_VAR 0 1
26322: PUSH
26323: LD_INT 1
26325: ARRAY
26326: PPUSH
26327: LD_VAR 0 1
26331: PUSH
26332: LD_INT 2
26334: ARRAY
26335: PPUSH
26336: CALL_OW 429
// end ; end ;
26340: LD_VAR 0 1
26344: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26345: LD_EXP 66
26349: PUSH
26350: LD_EXP 88
26354: AND
26355: IFFALSE 26367
26357: GO 26359
26359: DISABLE
// YouLost (  ) ;
26360: LD_STRING 
26362: PPUSH
26363: CALL_OW 104
26367: END
// every 0 0$1 trigger StreamModeActive and sFog do
26368: LD_EXP 66
26372: PUSH
26373: LD_EXP 87
26377: AND
26378: IFFALSE 26392
26380: GO 26382
26382: DISABLE
// FogOff ( your_side ) ;
26383: LD_OWVAR 2
26387: PPUSH
26388: CALL_OW 344
26392: END
// every 0 0$1 trigger StreamModeActive and sSun do
26393: LD_EXP 66
26397: PUSH
26398: LD_EXP 89
26402: AND
26403: IFFALSE 26431
26405: GO 26407
26407: DISABLE
// begin solar_recharge_percent := 0 ;
26408: LD_ADDR_OWVAR 79
26412: PUSH
26413: LD_INT 0
26415: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26416: LD_INT 10500
26418: PPUSH
26419: CALL_OW 67
// solar_recharge_percent := 100 ;
26423: LD_ADDR_OWVAR 79
26427: PUSH
26428: LD_INT 100
26430: ST_TO_ADDR
// end ;
26431: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26432: LD_EXP 66
26436: PUSH
26437: LD_EXP 90
26441: AND
26442: IFFALSE 26681
26444: GO 26446
26446: DISABLE
26447: LD_INT 0
26449: PPUSH
26450: PPUSH
26451: PPUSH
// begin tmp := [ ] ;
26452: LD_ADDR_VAR 0 3
26456: PUSH
26457: EMPTY
26458: ST_TO_ADDR
// for i := 1 to 6 do
26459: LD_ADDR_VAR 0 1
26463: PUSH
26464: DOUBLE
26465: LD_INT 1
26467: DEC
26468: ST_TO_ADDR
26469: LD_INT 6
26471: PUSH
26472: FOR_TO
26473: IFFALSE 26578
// begin uc_nation := nation_nature ;
26475: LD_ADDR_OWVAR 21
26479: PUSH
26480: LD_INT 0
26482: ST_TO_ADDR
// uc_side := 0 ;
26483: LD_ADDR_OWVAR 20
26487: PUSH
26488: LD_INT 0
26490: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26491: LD_ADDR_OWVAR 29
26495: PUSH
26496: LD_INT 12
26498: PUSH
26499: LD_INT 12
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: ST_TO_ADDR
// hc_agressivity := 20 ;
26506: LD_ADDR_OWVAR 35
26510: PUSH
26511: LD_INT 20
26513: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26514: LD_ADDR_OWVAR 28
26518: PUSH
26519: LD_INT 17
26521: ST_TO_ADDR
// hc_gallery :=  ;
26522: LD_ADDR_OWVAR 33
26526: PUSH
26527: LD_STRING 
26529: ST_TO_ADDR
// hc_name :=  ;
26530: LD_ADDR_OWVAR 26
26534: PUSH
26535: LD_STRING 
26537: ST_TO_ADDR
// un := CreateHuman ;
26538: LD_ADDR_VAR 0 2
26542: PUSH
26543: CALL_OW 44
26547: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26548: LD_VAR 0 2
26552: PPUSH
26553: LD_INT 1
26555: PPUSH
26556: CALL_OW 51
// tmp := tmp ^ un ;
26560: LD_ADDR_VAR 0 3
26564: PUSH
26565: LD_VAR 0 3
26569: PUSH
26570: LD_VAR 0 2
26574: ADD
26575: ST_TO_ADDR
// end ;
26576: GO 26472
26578: POP
26579: POP
// repeat wait ( 0 0$1 ) ;
26580: LD_INT 35
26582: PPUSH
26583: CALL_OW 67
// for un in tmp do
26587: LD_ADDR_VAR 0 2
26591: PUSH
26592: LD_VAR 0 3
26596: PUSH
26597: FOR_IN
26598: IFFALSE 26672
// begin if IsDead ( un ) then
26600: LD_VAR 0 2
26604: PPUSH
26605: CALL_OW 301
26609: IFFALSE 26629
// begin tmp := tmp diff un ;
26611: LD_ADDR_VAR 0 3
26615: PUSH
26616: LD_VAR 0 3
26620: PUSH
26621: LD_VAR 0 2
26625: DIFF
26626: ST_TO_ADDR
// continue ;
26627: GO 26597
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26629: LD_VAR 0 2
26633: PPUSH
26634: LD_INT 3
26636: PUSH
26637: LD_INT 22
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PPUSH
26651: CALL_OW 69
26655: PPUSH
26656: LD_VAR 0 2
26660: PPUSH
26661: CALL_OW 74
26665: PPUSH
26666: CALL_OW 115
// end ;
26670: GO 26597
26672: POP
26673: POP
// until not tmp ;
26674: LD_VAR 0 3
26678: NOT
26679: IFFALSE 26580
// end ;
26681: PPOPN 3
26683: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26684: LD_EXP 66
26688: PUSH
26689: LD_EXP 91
26693: AND
26694: IFFALSE 26748
26696: GO 26698
26698: DISABLE
// begin ToLua ( displayTroll(); ) ;
26699: LD_STRING displayTroll();
26701: PPUSH
26702: CALL_OW 559
// wait ( 3 3$00 ) ;
26706: LD_INT 6300
26708: PPUSH
26709: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26713: LD_STRING hideTroll();
26715: PPUSH
26716: CALL_OW 559
// wait ( 1 1$00 ) ;
26720: LD_INT 2100
26722: PPUSH
26723: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26727: LD_STRING displayTroll();
26729: PPUSH
26730: CALL_OW 559
// wait ( 1 1$00 ) ;
26734: LD_INT 2100
26736: PPUSH
26737: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26741: LD_STRING hideTroll();
26743: PPUSH
26744: CALL_OW 559
// end ;
26748: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26749: LD_EXP 66
26753: PUSH
26754: LD_EXP 92
26758: AND
26759: IFFALSE 26822
26761: GO 26763
26763: DISABLE
26764: LD_INT 0
26766: PPUSH
// begin p := 0 ;
26767: LD_ADDR_VAR 0 1
26771: PUSH
26772: LD_INT 0
26774: ST_TO_ADDR
// repeat game_speed := 1 ;
26775: LD_ADDR_OWVAR 65
26779: PUSH
26780: LD_INT 1
26782: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26783: LD_INT 35
26785: PPUSH
26786: CALL_OW 67
// p := p + 1 ;
26790: LD_ADDR_VAR 0 1
26794: PUSH
26795: LD_VAR 0 1
26799: PUSH
26800: LD_INT 1
26802: PLUS
26803: ST_TO_ADDR
// until p >= 60 ;
26804: LD_VAR 0 1
26808: PUSH
26809: LD_INT 60
26811: GREATEREQUAL
26812: IFFALSE 26775
// game_speed := 4 ;
26814: LD_ADDR_OWVAR 65
26818: PUSH
26819: LD_INT 4
26821: ST_TO_ADDR
// end ;
26822: PPOPN 1
26824: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26825: LD_EXP 66
26829: PUSH
26830: LD_EXP 93
26834: AND
26835: IFFALSE 26981
26837: GO 26839
26839: DISABLE
26840: LD_INT 0
26842: PPUSH
26843: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26844: LD_ADDR_VAR 0 1
26848: PUSH
26849: LD_INT 22
26851: PUSH
26852: LD_OWVAR 2
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: LD_INT 30
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 30
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: LIST
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PPUSH
26893: CALL_OW 69
26897: ST_TO_ADDR
// if not depot then
26898: LD_VAR 0 1
26902: NOT
26903: IFFALSE 26907
// exit ;
26905: GO 26981
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26907: LD_ADDR_VAR 0 2
26911: PUSH
26912: LD_VAR 0 1
26916: PUSH
26917: LD_INT 1
26919: PPUSH
26920: LD_VAR 0 1
26924: PPUSH
26925: CALL_OW 12
26929: ARRAY
26930: PPUSH
26931: CALL_OW 274
26935: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26936: LD_VAR 0 2
26940: PPUSH
26941: LD_INT 1
26943: PPUSH
26944: LD_INT 0
26946: PPUSH
26947: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26951: LD_VAR 0 2
26955: PPUSH
26956: LD_INT 2
26958: PPUSH
26959: LD_INT 0
26961: PPUSH
26962: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26966: LD_VAR 0 2
26970: PPUSH
26971: LD_INT 3
26973: PPUSH
26974: LD_INT 0
26976: PPUSH
26977: CALL_OW 277
// end ;
26981: PPOPN 2
26983: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26984: LD_EXP 66
26988: PUSH
26989: LD_EXP 94
26993: AND
26994: IFFALSE 27091
26996: GO 26998
26998: DISABLE
26999: LD_INT 0
27001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27002: LD_ADDR_VAR 0 1
27006: PUSH
27007: LD_INT 22
27009: PUSH
27010: LD_OWVAR 2
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 21
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 3
27031: PUSH
27032: LD_INT 23
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: LIST
27050: PPUSH
27051: CALL_OW 69
27055: ST_TO_ADDR
// if not tmp then
27056: LD_VAR 0 1
27060: NOT
27061: IFFALSE 27065
// exit ;
27063: GO 27091
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27065: LD_VAR 0 1
27069: PUSH
27070: LD_INT 1
27072: PPUSH
27073: LD_VAR 0 1
27077: PPUSH
27078: CALL_OW 12
27082: ARRAY
27083: PPUSH
27084: LD_INT 200
27086: PPUSH
27087: CALL_OW 234
// end ;
27091: PPOPN 1
27093: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27094: LD_EXP 66
27098: PUSH
27099: LD_EXP 95
27103: AND
27104: IFFALSE 27183
27106: GO 27108
27108: DISABLE
27109: LD_INT 0
27111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27112: LD_ADDR_VAR 0 1
27116: PUSH
27117: LD_INT 22
27119: PUSH
27120: LD_OWVAR 2
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 21
27131: PUSH
27132: LD_INT 2
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PPUSH
27143: CALL_OW 69
27147: ST_TO_ADDR
// if not tmp then
27148: LD_VAR 0 1
27152: NOT
27153: IFFALSE 27157
// exit ;
27155: GO 27183
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27157: LD_VAR 0 1
27161: PUSH
27162: LD_INT 1
27164: PPUSH
27165: LD_VAR 0 1
27169: PPUSH
27170: CALL_OW 12
27174: ARRAY
27175: PPUSH
27176: LD_INT 60
27178: PPUSH
27179: CALL_OW 234
// end ;
27183: PPOPN 1
27185: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27186: LD_EXP 66
27190: PUSH
27191: LD_EXP 96
27195: AND
27196: IFFALSE 27295
27198: GO 27200
27200: DISABLE
27201: LD_INT 0
27203: PPUSH
27204: PPUSH
// begin enable ;
27205: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27206: LD_ADDR_VAR 0 1
27210: PUSH
27211: LD_INT 22
27213: PUSH
27214: LD_OWVAR 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 61
27225: PUSH
27226: EMPTY
27227: LIST
27228: PUSH
27229: LD_INT 33
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: PPUSH
27244: CALL_OW 69
27248: ST_TO_ADDR
// if not tmp then
27249: LD_VAR 0 1
27253: NOT
27254: IFFALSE 27258
// exit ;
27256: GO 27295
// for i in tmp do
27258: LD_ADDR_VAR 0 2
27262: PUSH
27263: LD_VAR 0 1
27267: PUSH
27268: FOR_IN
27269: IFFALSE 27293
// if IsControledBy ( i ) then
27271: LD_VAR 0 2
27275: PPUSH
27276: CALL_OW 312
27280: IFFALSE 27291
// ComUnlink ( i ) ;
27282: LD_VAR 0 2
27286: PPUSH
27287: CALL_OW 136
27291: GO 27268
27293: POP
27294: POP
// end ;
27295: PPOPN 2
27297: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27298: LD_EXP 66
27302: PUSH
27303: LD_EXP 97
27307: AND
27308: IFFALSE 27448
27310: GO 27312
27312: DISABLE
27313: LD_INT 0
27315: PPUSH
27316: PPUSH
// begin ToLua ( displayPowell(); ) ;
27317: LD_STRING displayPowell();
27319: PPUSH
27320: CALL_OW 559
// uc_side := 0 ;
27324: LD_ADDR_OWVAR 20
27328: PUSH
27329: LD_INT 0
27331: ST_TO_ADDR
// uc_nation := 2 ;
27332: LD_ADDR_OWVAR 21
27336: PUSH
27337: LD_INT 2
27339: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27340: LD_ADDR_OWVAR 37
27344: PUSH
27345: LD_INT 14
27347: ST_TO_ADDR
// vc_engine := engine_siberite ;
27348: LD_ADDR_OWVAR 39
27352: PUSH
27353: LD_INT 3
27355: ST_TO_ADDR
// vc_control := control_apeman ;
27356: LD_ADDR_OWVAR 38
27360: PUSH
27361: LD_INT 5
27363: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27364: LD_ADDR_OWVAR 40
27368: PUSH
27369: LD_INT 29
27371: ST_TO_ADDR
// un := CreateVehicle ;
27372: LD_ADDR_VAR 0 2
27376: PUSH
27377: CALL_OW 45
27381: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27382: LD_VAR 0 2
27386: PPUSH
27387: LD_INT 1
27389: PPUSH
27390: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27394: LD_INT 35
27396: PPUSH
27397: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27401: LD_VAR 0 2
27405: PPUSH
27406: LD_INT 22
27408: PUSH
27409: LD_OWVAR 2
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PPUSH
27418: CALL_OW 69
27422: PPUSH
27423: LD_VAR 0 2
27427: PPUSH
27428: CALL_OW 74
27432: PPUSH
27433: CALL_OW 115
// until IsDead ( un ) ;
27437: LD_VAR 0 2
27441: PPUSH
27442: CALL_OW 301
27446: IFFALSE 27394
// end ;
27448: PPOPN 2
27450: END
// every 0 0$1 trigger StreamModeActive and sStu do
27451: LD_EXP 66
27455: PUSH
27456: LD_EXP 105
27460: AND
27461: IFFALSE 27477
27463: GO 27465
27465: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27466: LD_STRING displayStucuk();
27468: PPUSH
27469: CALL_OW 559
// ResetFog ;
27473: CALL_OW 335
// end ;
27477: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27478: LD_EXP 66
27482: PUSH
27483: LD_EXP 98
27487: AND
27488: IFFALSE 27629
27490: GO 27492
27492: DISABLE
27493: LD_INT 0
27495: PPUSH
27496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27497: LD_ADDR_VAR 0 2
27501: PUSH
27502: LD_INT 22
27504: PUSH
27505: LD_OWVAR 2
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 21
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PPUSH
27528: CALL_OW 69
27532: ST_TO_ADDR
// if not tmp then
27533: LD_VAR 0 2
27537: NOT
27538: IFFALSE 27542
// exit ;
27540: GO 27629
// un := tmp [ rand ( 1 , tmp ) ] ;
27542: LD_ADDR_VAR 0 1
27546: PUSH
27547: LD_VAR 0 2
27551: PUSH
27552: LD_INT 1
27554: PPUSH
27555: LD_VAR 0 2
27559: PPUSH
27560: CALL_OW 12
27564: ARRAY
27565: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27566: LD_VAR 0 1
27570: PPUSH
27571: LD_INT 0
27573: PPUSH
27574: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27578: LD_VAR 0 1
27582: PPUSH
27583: LD_OWVAR 3
27587: PUSH
27588: LD_VAR 0 1
27592: DIFF
27593: PPUSH
27594: LD_VAR 0 1
27598: PPUSH
27599: CALL_OW 74
27603: PPUSH
27604: CALL_OW 115
// wait ( 0 0$20 ) ;
27608: LD_INT 700
27610: PPUSH
27611: CALL_OW 67
// SetSide ( un , your_side ) ;
27615: LD_VAR 0 1
27619: PPUSH
27620: LD_OWVAR 2
27624: PPUSH
27625: CALL_OW 235
// end ;
27629: PPOPN 2
27631: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27632: LD_EXP 66
27636: PUSH
27637: LD_EXP 99
27641: AND
27642: IFFALSE 27748
27644: GO 27646
27646: DISABLE
27647: LD_INT 0
27649: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27650: LD_ADDR_VAR 0 1
27654: PUSH
27655: LD_INT 22
27657: PUSH
27658: LD_OWVAR 2
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 2
27669: PUSH
27670: LD_INT 30
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 30
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: LIST
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PPUSH
27699: CALL_OW 69
27703: ST_TO_ADDR
// if not depot then
27704: LD_VAR 0 1
27708: NOT
27709: IFFALSE 27713
// exit ;
27711: GO 27748
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27713: LD_VAR 0 1
27717: PUSH
27718: LD_INT 1
27720: ARRAY
27721: PPUSH
27722: CALL_OW 250
27726: PPUSH
27727: LD_VAR 0 1
27731: PUSH
27732: LD_INT 1
27734: ARRAY
27735: PPUSH
27736: CALL_OW 251
27740: PPUSH
27741: LD_INT 70
27743: PPUSH
27744: CALL_OW 495
// end ;
27748: PPOPN 1
27750: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27751: LD_EXP 66
27755: PUSH
27756: LD_EXP 100
27760: AND
27761: IFFALSE 27972
27763: GO 27765
27765: DISABLE
27766: LD_INT 0
27768: PPUSH
27769: PPUSH
27770: PPUSH
27771: PPUSH
27772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27773: LD_ADDR_VAR 0 5
27777: PUSH
27778: LD_INT 22
27780: PUSH
27781: LD_OWVAR 2
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 21
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PPUSH
27804: CALL_OW 69
27808: ST_TO_ADDR
// if not tmp then
27809: LD_VAR 0 5
27813: NOT
27814: IFFALSE 27818
// exit ;
27816: GO 27972
// for i in tmp do
27818: LD_ADDR_VAR 0 1
27822: PUSH
27823: LD_VAR 0 5
27827: PUSH
27828: FOR_IN
27829: IFFALSE 27970
// begin d := rand ( 0 , 5 ) ;
27831: LD_ADDR_VAR 0 4
27835: PUSH
27836: LD_INT 0
27838: PPUSH
27839: LD_INT 5
27841: PPUSH
27842: CALL_OW 12
27846: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27847: LD_ADDR_VAR 0 2
27851: PUSH
27852: LD_VAR 0 1
27856: PPUSH
27857: CALL_OW 250
27861: PPUSH
27862: LD_VAR 0 4
27866: PPUSH
27867: LD_INT 3
27869: PPUSH
27870: LD_INT 12
27872: PPUSH
27873: CALL_OW 12
27877: PPUSH
27878: CALL_OW 272
27882: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_VAR 0 1
27892: PPUSH
27893: CALL_OW 251
27897: PPUSH
27898: LD_VAR 0 4
27902: PPUSH
27903: LD_INT 3
27905: PPUSH
27906: LD_INT 12
27908: PPUSH
27909: CALL_OW 12
27913: PPUSH
27914: CALL_OW 273
27918: ST_TO_ADDR
// if ValidHex ( x , y ) then
27919: LD_VAR 0 2
27923: PPUSH
27924: LD_VAR 0 3
27928: PPUSH
27929: CALL_OW 488
27933: IFFALSE 27968
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27935: LD_VAR 0 1
27939: PPUSH
27940: LD_VAR 0 2
27944: PPUSH
27945: LD_VAR 0 3
27949: PPUSH
27950: LD_INT 3
27952: PPUSH
27953: LD_INT 6
27955: PPUSH
27956: CALL_OW 12
27960: PPUSH
27961: LD_INT 1
27963: PPUSH
27964: CALL_OW 483
// end ;
27968: GO 27828
27970: POP
27971: POP
// end ;
27972: PPOPN 5
27974: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27975: LD_EXP 66
27979: PUSH
27980: LD_EXP 101
27984: AND
27985: IFFALSE 28079
27987: GO 27989
27989: DISABLE
27990: LD_INT 0
27992: PPUSH
27993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27994: LD_ADDR_VAR 0 2
27998: PUSH
27999: LD_INT 22
28001: PUSH
28002: LD_OWVAR 2
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 32
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 21
28023: PUSH
28024: LD_INT 2
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: LIST
28035: PPUSH
28036: CALL_OW 69
28040: ST_TO_ADDR
// if not tmp then
28041: LD_VAR 0 2
28045: NOT
28046: IFFALSE 28050
// exit ;
28048: GO 28079
// for i in tmp do
28050: LD_ADDR_VAR 0 1
28054: PUSH
28055: LD_VAR 0 2
28059: PUSH
28060: FOR_IN
28061: IFFALSE 28077
// SetFuel ( i , 0 ) ;
28063: LD_VAR 0 1
28067: PPUSH
28068: LD_INT 0
28070: PPUSH
28071: CALL_OW 240
28075: GO 28060
28077: POP
28078: POP
// end ;
28079: PPOPN 2
28081: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28082: LD_EXP 66
28086: PUSH
28087: LD_EXP 102
28091: AND
28092: IFFALSE 28158
28094: GO 28096
28096: DISABLE
28097: LD_INT 0
28099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28100: LD_ADDR_VAR 0 1
28104: PUSH
28105: LD_INT 22
28107: PUSH
28108: LD_OWVAR 2
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 30
28119: PUSH
28120: LD_INT 29
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PPUSH
28131: CALL_OW 69
28135: ST_TO_ADDR
// if not tmp then
28136: LD_VAR 0 1
28140: NOT
28141: IFFALSE 28145
// exit ;
28143: GO 28158
// DestroyUnit ( tmp [ 1 ] ) ;
28145: LD_VAR 0 1
28149: PUSH
28150: LD_INT 1
28152: ARRAY
28153: PPUSH
28154: CALL_OW 65
// end ;
28158: PPOPN 1
28160: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28161: LD_EXP 66
28165: PUSH
28166: LD_EXP 104
28170: AND
28171: IFFALSE 28300
28173: GO 28175
28175: DISABLE
28176: LD_INT 0
28178: PPUSH
// begin uc_side := 0 ;
28179: LD_ADDR_OWVAR 20
28183: PUSH
28184: LD_INT 0
28186: ST_TO_ADDR
// uc_nation := nation_arabian ;
28187: LD_ADDR_OWVAR 21
28191: PUSH
28192: LD_INT 2
28194: ST_TO_ADDR
// hc_gallery :=  ;
28195: LD_ADDR_OWVAR 33
28199: PUSH
28200: LD_STRING 
28202: ST_TO_ADDR
// hc_name :=  ;
28203: LD_ADDR_OWVAR 26
28207: PUSH
28208: LD_STRING 
28210: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28211: LD_INT 1
28213: PPUSH
28214: LD_INT 11
28216: PPUSH
28217: LD_INT 10
28219: PPUSH
28220: CALL_OW 380
// un := CreateHuman ;
28224: LD_ADDR_VAR 0 1
28228: PUSH
28229: CALL_OW 44
28233: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28234: LD_VAR 0 1
28238: PPUSH
28239: LD_INT 1
28241: PPUSH
28242: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28246: LD_INT 35
28248: PPUSH
28249: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28253: LD_VAR 0 1
28257: PPUSH
28258: LD_INT 22
28260: PUSH
28261: LD_OWVAR 2
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PPUSH
28270: CALL_OW 69
28274: PPUSH
28275: LD_VAR 0 1
28279: PPUSH
28280: CALL_OW 74
28284: PPUSH
28285: CALL_OW 115
// until IsDead ( un ) ;
28289: LD_VAR 0 1
28293: PPUSH
28294: CALL_OW 301
28298: IFFALSE 28246
// end ;
28300: PPOPN 1
28302: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28303: LD_EXP 66
28307: PUSH
28308: LD_EXP 106
28312: AND
28313: IFFALSE 28325
28315: GO 28317
28317: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28318: LD_STRING earthquake(getX(game), 0, 32)
28320: PPUSH
28321: CALL_OW 559
28325: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28326: LD_EXP 66
28330: PUSH
28331: LD_EXP 107
28335: AND
28336: IFFALSE 28427
28338: GO 28340
28340: DISABLE
28341: LD_INT 0
28343: PPUSH
// begin enable ;
28344: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28345: LD_ADDR_VAR 0 1
28349: PUSH
28350: LD_INT 22
28352: PUSH
28353: LD_OWVAR 2
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 21
28364: PUSH
28365: LD_INT 2
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 33
28374: PUSH
28375: LD_INT 3
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: LIST
28386: PPUSH
28387: CALL_OW 69
28391: ST_TO_ADDR
// if not tmp then
28392: LD_VAR 0 1
28396: NOT
28397: IFFALSE 28401
// exit ;
28399: GO 28427
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28401: LD_VAR 0 1
28405: PUSH
28406: LD_INT 1
28408: PPUSH
28409: LD_VAR 0 1
28413: PPUSH
28414: CALL_OW 12
28418: ARRAY
28419: PPUSH
28420: LD_INT 1
28422: PPUSH
28423: CALL_OW 234
// end ;
28427: PPOPN 1
28429: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28430: LD_EXP 66
28434: PUSH
28435: LD_EXP 108
28439: AND
28440: IFFALSE 28581
28442: GO 28444
28444: DISABLE
28445: LD_INT 0
28447: PPUSH
28448: PPUSH
28449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28450: LD_ADDR_VAR 0 3
28454: PUSH
28455: LD_INT 22
28457: PUSH
28458: LD_OWVAR 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 25
28469: PUSH
28470: LD_INT 1
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PPUSH
28481: CALL_OW 69
28485: ST_TO_ADDR
// if not tmp then
28486: LD_VAR 0 3
28490: NOT
28491: IFFALSE 28495
// exit ;
28493: GO 28581
// un := tmp [ rand ( 1 , tmp ) ] ;
28495: LD_ADDR_VAR 0 2
28499: PUSH
28500: LD_VAR 0 3
28504: PUSH
28505: LD_INT 1
28507: PPUSH
28508: LD_VAR 0 3
28512: PPUSH
28513: CALL_OW 12
28517: ARRAY
28518: ST_TO_ADDR
// if Crawls ( un ) then
28519: LD_VAR 0 2
28523: PPUSH
28524: CALL_OW 318
28528: IFFALSE 28539
// ComWalk ( un ) ;
28530: LD_VAR 0 2
28534: PPUSH
28535: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28539: LD_VAR 0 2
28543: PPUSH
28544: LD_INT 9
28546: PPUSH
28547: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28551: LD_INT 28
28553: PPUSH
28554: LD_OWVAR 2
28558: PPUSH
28559: LD_INT 2
28561: PPUSH
28562: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28566: LD_INT 29
28568: PPUSH
28569: LD_OWVAR 2
28573: PPUSH
28574: LD_INT 2
28576: PPUSH
28577: CALL_OW 322
// end ;
28581: PPOPN 3
28583: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28584: LD_EXP 66
28588: PUSH
28589: LD_EXP 109
28593: AND
28594: IFFALSE 28705
28596: GO 28598
28598: DISABLE
28599: LD_INT 0
28601: PPUSH
28602: PPUSH
28603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28604: LD_ADDR_VAR 0 3
28608: PUSH
28609: LD_INT 22
28611: PUSH
28612: LD_OWVAR 2
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 25
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PPUSH
28635: CALL_OW 69
28639: ST_TO_ADDR
// if not tmp then
28640: LD_VAR 0 3
28644: NOT
28645: IFFALSE 28649
// exit ;
28647: GO 28705
// un := tmp [ rand ( 1 , tmp ) ] ;
28649: LD_ADDR_VAR 0 2
28653: PUSH
28654: LD_VAR 0 3
28658: PUSH
28659: LD_INT 1
28661: PPUSH
28662: LD_VAR 0 3
28666: PPUSH
28667: CALL_OW 12
28671: ARRAY
28672: ST_TO_ADDR
// if Crawls ( un ) then
28673: LD_VAR 0 2
28677: PPUSH
28678: CALL_OW 318
28682: IFFALSE 28693
// ComWalk ( un ) ;
28684: LD_VAR 0 2
28688: PPUSH
28689: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28693: LD_VAR 0 2
28697: PPUSH
28698: LD_INT 8
28700: PPUSH
28701: CALL_OW 336
// end ;
28705: PPOPN 3
28707: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28708: LD_EXP 66
28712: PUSH
28713: LD_EXP 110
28717: AND
28718: IFFALSE 28862
28720: GO 28722
28722: DISABLE
28723: LD_INT 0
28725: PPUSH
28726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28727: LD_ADDR_VAR 0 2
28731: PUSH
28732: LD_INT 22
28734: PUSH
28735: LD_OWVAR 2
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 21
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: LD_INT 34
28759: PUSH
28760: LD_INT 12
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 34
28769: PUSH
28770: LD_INT 51
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 34
28779: PUSH
28780: LD_INT 32
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: PPUSH
28798: CALL_OW 69
28802: ST_TO_ADDR
// if not tmp then
28803: LD_VAR 0 2
28807: NOT
28808: IFFALSE 28812
// exit ;
28810: GO 28862
// for i in tmp do
28812: LD_ADDR_VAR 0 1
28816: PUSH
28817: LD_VAR 0 2
28821: PUSH
28822: FOR_IN
28823: IFFALSE 28860
// if GetCargo ( i , mat_artifact ) = 0 then
28825: LD_VAR 0 1
28829: PPUSH
28830: LD_INT 4
28832: PPUSH
28833: CALL_OW 289
28837: PUSH
28838: LD_INT 0
28840: EQUAL
28841: IFFALSE 28858
// SetCargo ( i , mat_siberit , 100 ) ;
28843: LD_VAR 0 1
28847: PPUSH
28848: LD_INT 3
28850: PPUSH
28851: LD_INT 100
28853: PPUSH
28854: CALL_OW 290
28858: GO 28822
28860: POP
28861: POP
// end ;
28862: PPOPN 2
28864: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28865: LD_EXP 66
28869: PUSH
28870: LD_EXP 111
28874: AND
28875: IFFALSE 29058
28877: GO 28879
28879: DISABLE
28880: LD_INT 0
28882: PPUSH
28883: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28884: LD_ADDR_VAR 0 2
28888: PUSH
28889: LD_INT 22
28891: PUSH
28892: LD_OWVAR 2
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PPUSH
28901: CALL_OW 69
28905: ST_TO_ADDR
// if not tmp then
28906: LD_VAR 0 2
28910: NOT
28911: IFFALSE 28915
// exit ;
28913: GO 29058
// for i := 1 to 2 do
28915: LD_ADDR_VAR 0 1
28919: PUSH
28920: DOUBLE
28921: LD_INT 1
28923: DEC
28924: ST_TO_ADDR
28925: LD_INT 2
28927: PUSH
28928: FOR_TO
28929: IFFALSE 29056
// begin uc_side := your_side ;
28931: LD_ADDR_OWVAR 20
28935: PUSH
28936: LD_OWVAR 2
28940: ST_TO_ADDR
// uc_nation := nation_american ;
28941: LD_ADDR_OWVAR 21
28945: PUSH
28946: LD_INT 1
28948: ST_TO_ADDR
// vc_chassis := us_morphling ;
28949: LD_ADDR_OWVAR 37
28953: PUSH
28954: LD_INT 5
28956: ST_TO_ADDR
// vc_engine := engine_siberite ;
28957: LD_ADDR_OWVAR 39
28961: PUSH
28962: LD_INT 3
28964: ST_TO_ADDR
// vc_control := control_computer ;
28965: LD_ADDR_OWVAR 38
28969: PUSH
28970: LD_INT 3
28972: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28973: LD_ADDR_OWVAR 40
28977: PUSH
28978: LD_INT 10
28980: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28981: LD_VAR 0 2
28985: PUSH
28986: LD_INT 1
28988: ARRAY
28989: PPUSH
28990: CALL_OW 310
28994: NOT
28995: IFFALSE 29042
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28997: CALL_OW 45
29001: PPUSH
29002: LD_VAR 0 2
29006: PUSH
29007: LD_INT 1
29009: ARRAY
29010: PPUSH
29011: CALL_OW 250
29015: PPUSH
29016: LD_VAR 0 2
29020: PUSH
29021: LD_INT 1
29023: ARRAY
29024: PPUSH
29025: CALL_OW 251
29029: PPUSH
29030: LD_INT 12
29032: PPUSH
29033: LD_INT 1
29035: PPUSH
29036: CALL_OW 50
29040: GO 29054
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29042: CALL_OW 45
29046: PPUSH
29047: LD_INT 1
29049: PPUSH
29050: CALL_OW 51
// end ;
29054: GO 28928
29056: POP
29057: POP
// end ;
29058: PPOPN 2
29060: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29061: LD_EXP 66
29065: PUSH
29066: LD_EXP 112
29070: AND
29071: IFFALSE 29293
29073: GO 29075
29075: DISABLE
29076: LD_INT 0
29078: PPUSH
29079: PPUSH
29080: PPUSH
29081: PPUSH
29082: PPUSH
29083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29084: LD_ADDR_VAR 0 6
29088: PUSH
29089: LD_INT 22
29091: PUSH
29092: LD_OWVAR 2
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 21
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 3
29113: PUSH
29114: LD_INT 23
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: PPUSH
29133: CALL_OW 69
29137: ST_TO_ADDR
// if not tmp then
29138: LD_VAR 0 6
29142: NOT
29143: IFFALSE 29147
// exit ;
29145: GO 29293
// s1 := rand ( 1 , 4 ) ;
29147: LD_ADDR_VAR 0 2
29151: PUSH
29152: LD_INT 1
29154: PPUSH
29155: LD_INT 4
29157: PPUSH
29158: CALL_OW 12
29162: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29163: LD_ADDR_VAR 0 4
29167: PUSH
29168: LD_VAR 0 6
29172: PUSH
29173: LD_INT 1
29175: ARRAY
29176: PPUSH
29177: LD_VAR 0 2
29181: PPUSH
29182: CALL_OW 259
29186: ST_TO_ADDR
// if s1 = 1 then
29187: LD_VAR 0 2
29191: PUSH
29192: LD_INT 1
29194: EQUAL
29195: IFFALSE 29215
// s2 := rand ( 2 , 4 ) else
29197: LD_ADDR_VAR 0 3
29201: PUSH
29202: LD_INT 2
29204: PPUSH
29205: LD_INT 4
29207: PPUSH
29208: CALL_OW 12
29212: ST_TO_ADDR
29213: GO 29223
// s2 := 1 ;
29215: LD_ADDR_VAR 0 3
29219: PUSH
29220: LD_INT 1
29222: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29223: LD_ADDR_VAR 0 5
29227: PUSH
29228: LD_VAR 0 6
29232: PUSH
29233: LD_INT 1
29235: ARRAY
29236: PPUSH
29237: LD_VAR 0 3
29241: PPUSH
29242: CALL_OW 259
29246: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29247: LD_VAR 0 6
29251: PUSH
29252: LD_INT 1
29254: ARRAY
29255: PPUSH
29256: LD_VAR 0 2
29260: PPUSH
29261: LD_VAR 0 5
29265: PPUSH
29266: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29270: LD_VAR 0 6
29274: PUSH
29275: LD_INT 1
29277: ARRAY
29278: PPUSH
29279: LD_VAR 0 3
29283: PPUSH
29284: LD_VAR 0 4
29288: PPUSH
29289: CALL_OW 237
// end ;
29293: PPOPN 6
29295: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29296: LD_EXP 66
29300: PUSH
29301: LD_EXP 113
29305: AND
29306: IFFALSE 29385
29308: GO 29310
29310: DISABLE
29311: LD_INT 0
29313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29314: LD_ADDR_VAR 0 1
29318: PUSH
29319: LD_INT 22
29321: PUSH
29322: LD_OWVAR 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 30
29333: PUSH
29334: LD_INT 3
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PPUSH
29345: CALL_OW 69
29349: ST_TO_ADDR
// if not tmp then
29350: LD_VAR 0 1
29354: NOT
29355: IFFALSE 29359
// exit ;
29357: GO 29385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29359: LD_VAR 0 1
29363: PUSH
29364: LD_INT 1
29366: PPUSH
29367: LD_VAR 0 1
29371: PPUSH
29372: CALL_OW 12
29376: ARRAY
29377: PPUSH
29378: LD_INT 1
29380: PPUSH
29381: CALL_OW 234
// end ;
29385: PPOPN 1
29387: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29388: LD_EXP 66
29392: PUSH
29393: LD_EXP 114
29397: AND
29398: IFFALSE 29510
29400: GO 29402
29402: DISABLE
29403: LD_INT 0
29405: PPUSH
29406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29407: LD_ADDR_VAR 0 2
29411: PUSH
29412: LD_INT 22
29414: PUSH
29415: LD_OWVAR 2
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 2
29426: PUSH
29427: LD_INT 30
29429: PUSH
29430: LD_INT 27
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 30
29439: PUSH
29440: LD_INT 26
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 30
29449: PUSH
29450: LD_INT 28
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PPUSH
29467: CALL_OW 69
29471: ST_TO_ADDR
// if not tmp then
29472: LD_VAR 0 2
29476: NOT
29477: IFFALSE 29481
// exit ;
29479: GO 29510
// for i in tmp do
29481: LD_ADDR_VAR 0 1
29485: PUSH
29486: LD_VAR 0 2
29490: PUSH
29491: FOR_IN
29492: IFFALSE 29508
// SetLives ( i , 1 ) ;
29494: LD_VAR 0 1
29498: PPUSH
29499: LD_INT 1
29501: PPUSH
29502: CALL_OW 234
29506: GO 29491
29508: POP
29509: POP
// end ;
29510: PPOPN 2
29512: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29513: LD_EXP 66
29517: PUSH
29518: LD_EXP 115
29522: AND
29523: IFFALSE 29797
29525: GO 29527
29527: DISABLE
29528: LD_INT 0
29530: PPUSH
29531: PPUSH
29532: PPUSH
// begin i := rand ( 1 , 7 ) ;
29533: LD_ADDR_VAR 0 1
29537: PUSH
29538: LD_INT 1
29540: PPUSH
29541: LD_INT 7
29543: PPUSH
29544: CALL_OW 12
29548: ST_TO_ADDR
// case i of 1 :
29549: LD_VAR 0 1
29553: PUSH
29554: LD_INT 1
29556: DOUBLE
29557: EQUAL
29558: IFTRUE 29562
29560: GO 29572
29562: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29563: LD_STRING earthquake(getX(game), 0, 32)
29565: PPUSH
29566: CALL_OW 559
29570: GO 29797
29572: LD_INT 2
29574: DOUBLE
29575: EQUAL
29576: IFTRUE 29580
29578: GO 29594
29580: POP
// begin ToLua ( displayStucuk(); ) ;
29581: LD_STRING displayStucuk();
29583: PPUSH
29584: CALL_OW 559
// ResetFog ;
29588: CALL_OW 335
// end ; 3 :
29592: GO 29797
29594: LD_INT 3
29596: DOUBLE
29597: EQUAL
29598: IFTRUE 29602
29600: GO 29706
29602: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29603: LD_ADDR_VAR 0 2
29607: PUSH
29608: LD_INT 22
29610: PUSH
29611: LD_OWVAR 2
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 25
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PPUSH
29634: CALL_OW 69
29638: ST_TO_ADDR
// if not tmp then
29639: LD_VAR 0 2
29643: NOT
29644: IFFALSE 29648
// exit ;
29646: GO 29797
// un := tmp [ rand ( 1 , tmp ) ] ;
29648: LD_ADDR_VAR 0 3
29652: PUSH
29653: LD_VAR 0 2
29657: PUSH
29658: LD_INT 1
29660: PPUSH
29661: LD_VAR 0 2
29665: PPUSH
29666: CALL_OW 12
29670: ARRAY
29671: ST_TO_ADDR
// if Crawls ( un ) then
29672: LD_VAR 0 3
29676: PPUSH
29677: CALL_OW 318
29681: IFFALSE 29692
// ComWalk ( un ) ;
29683: LD_VAR 0 3
29687: PPUSH
29688: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29692: LD_VAR 0 3
29696: PPUSH
29697: LD_INT 8
29699: PPUSH
29700: CALL_OW 336
// end ; 4 :
29704: GO 29797
29706: LD_INT 4
29708: DOUBLE
29709: EQUAL
29710: IFTRUE 29714
29712: GO 29775
29714: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29715: LD_ADDR_VAR 0 2
29719: PUSH
29720: LD_INT 22
29722: PUSH
29723: LD_OWVAR 2
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 30
29734: PUSH
29735: LD_INT 29
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PPUSH
29746: CALL_OW 69
29750: ST_TO_ADDR
// if not tmp then
29751: LD_VAR 0 2
29755: NOT
29756: IFFALSE 29760
// exit ;
29758: GO 29797
// DestroyUnit ( tmp [ 1 ] ) ;
29760: LD_VAR 0 2
29764: PUSH
29765: LD_INT 1
29767: ARRAY
29768: PPUSH
29769: CALL_OW 65
// end ; 5 .. 7 :
29773: GO 29797
29775: LD_INT 5
29777: DOUBLE
29778: GREATEREQUAL
29779: IFFALSE 29787
29781: LD_INT 7
29783: DOUBLE
29784: LESSEQUAL
29785: IFTRUE 29789
29787: GO 29796
29789: POP
// StreamSibBomb ; end ;
29790: CALL 26047 0 0
29794: GO 29797
29796: POP
// end ;
29797: PPOPN 3
29799: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29800: LD_EXP 66
29804: PUSH
29805: LD_EXP 116
29809: AND
29810: IFFALSE 29966
29812: GO 29814
29814: DISABLE
29815: LD_INT 0
29817: PPUSH
29818: PPUSH
29819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29820: LD_ADDR_VAR 0 2
29824: PUSH
29825: LD_INT 81
29827: PUSH
29828: LD_OWVAR 2
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: LD_INT 21
29842: PUSH
29843: LD_INT 1
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 21
29852: PUSH
29853: LD_INT 2
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PPUSH
29869: CALL_OW 69
29873: ST_TO_ADDR
// if not tmp then
29874: LD_VAR 0 2
29878: NOT
29879: IFFALSE 29883
// exit ;
29881: GO 29966
// p := 0 ;
29883: LD_ADDR_VAR 0 3
29887: PUSH
29888: LD_INT 0
29890: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29891: LD_INT 35
29893: PPUSH
29894: CALL_OW 67
// p := p + 1 ;
29898: LD_ADDR_VAR 0 3
29902: PUSH
29903: LD_VAR 0 3
29907: PUSH
29908: LD_INT 1
29910: PLUS
29911: ST_TO_ADDR
// for i in tmp do
29912: LD_ADDR_VAR 0 1
29916: PUSH
29917: LD_VAR 0 2
29921: PUSH
29922: FOR_IN
29923: IFFALSE 29954
// if GetLives ( i ) < 1000 then
29925: LD_VAR 0 1
29929: PPUSH
29930: CALL_OW 256
29934: PUSH
29935: LD_INT 1000
29937: LESS
29938: IFFALSE 29952
// SetLives ( i , 1000 ) ;
29940: LD_VAR 0 1
29944: PPUSH
29945: LD_INT 1000
29947: PPUSH
29948: CALL_OW 234
29952: GO 29922
29954: POP
29955: POP
// until p > 20 ;
29956: LD_VAR 0 3
29960: PUSH
29961: LD_INT 20
29963: GREATER
29964: IFFALSE 29891
// end ;
29966: PPOPN 3
29968: END
// every 0 0$1 trigger StreamModeActive and sTime do
29969: LD_EXP 66
29973: PUSH
29974: LD_EXP 117
29978: AND
29979: IFFALSE 30014
29981: GO 29983
29983: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29984: LD_INT 28
29986: PPUSH
29987: LD_OWVAR 2
29991: PPUSH
29992: LD_INT 2
29994: PPUSH
29995: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29999: LD_INT 30
30001: PPUSH
30002: LD_OWVAR 2
30006: PPUSH
30007: LD_INT 2
30009: PPUSH
30010: CALL_OW 322
// end ;
30014: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30015: LD_EXP 66
30019: PUSH
30020: LD_EXP 118
30024: AND
30025: IFFALSE 30146
30027: GO 30029
30029: DISABLE
30030: LD_INT 0
30032: PPUSH
30033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30034: LD_ADDR_VAR 0 2
30038: PUSH
30039: LD_INT 22
30041: PUSH
30042: LD_OWVAR 2
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 21
30053: PUSH
30054: LD_INT 1
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 3
30063: PUSH
30064: LD_INT 23
30066: PUSH
30067: LD_INT 0
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: LIST
30082: PPUSH
30083: CALL_OW 69
30087: ST_TO_ADDR
// if not tmp then
30088: LD_VAR 0 2
30092: NOT
30093: IFFALSE 30097
// exit ;
30095: GO 30146
// for i in tmp do
30097: LD_ADDR_VAR 0 1
30101: PUSH
30102: LD_VAR 0 2
30106: PUSH
30107: FOR_IN
30108: IFFALSE 30144
// begin if Crawls ( i ) then
30110: LD_VAR 0 1
30114: PPUSH
30115: CALL_OW 318
30119: IFFALSE 30130
// ComWalk ( i ) ;
30121: LD_VAR 0 1
30125: PPUSH
30126: CALL_OW 138
// SetClass ( i , 2 ) ;
30130: LD_VAR 0 1
30134: PPUSH
30135: LD_INT 2
30137: PPUSH
30138: CALL_OW 336
// end ;
30142: GO 30107
30144: POP
30145: POP
// end ;
30146: PPOPN 2
30148: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30149: LD_EXP 66
30153: PUSH
30154: LD_EXP 119
30158: AND
30159: IFFALSE 30440
30161: GO 30163
30163: DISABLE
30164: LD_INT 0
30166: PPUSH
30167: PPUSH
30168: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30169: LD_OWVAR 2
30173: PPUSH
30174: LD_INT 9
30176: PPUSH
30177: LD_INT 1
30179: PPUSH
30180: LD_INT 1
30182: PPUSH
30183: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30187: LD_INT 9
30189: PPUSH
30190: LD_OWVAR 2
30194: PPUSH
30195: CALL_OW 343
// uc_side := 9 ;
30199: LD_ADDR_OWVAR 20
30203: PUSH
30204: LD_INT 9
30206: ST_TO_ADDR
// uc_nation := 2 ;
30207: LD_ADDR_OWVAR 21
30211: PUSH
30212: LD_INT 2
30214: ST_TO_ADDR
// hc_name := Dark Warrior ;
30215: LD_ADDR_OWVAR 26
30219: PUSH
30220: LD_STRING Dark Warrior
30222: ST_TO_ADDR
// hc_gallery :=  ;
30223: LD_ADDR_OWVAR 33
30227: PUSH
30228: LD_STRING 
30230: ST_TO_ADDR
// hc_noskilllimit := true ;
30231: LD_ADDR_OWVAR 76
30235: PUSH
30236: LD_INT 1
30238: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30239: LD_ADDR_OWVAR 31
30243: PUSH
30244: LD_INT 30
30246: PUSH
30247: LD_INT 30
30249: PUSH
30250: LD_INT 30
30252: PUSH
30253: LD_INT 30
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: ST_TO_ADDR
// un := CreateHuman ;
30262: LD_ADDR_VAR 0 3
30266: PUSH
30267: CALL_OW 44
30271: ST_TO_ADDR
// hc_noskilllimit := false ;
30272: LD_ADDR_OWVAR 76
30276: PUSH
30277: LD_INT 0
30279: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30280: LD_VAR 0 3
30284: PPUSH
30285: LD_INT 1
30287: PPUSH
30288: CALL_OW 51
// p := 0 ;
30292: LD_ADDR_VAR 0 2
30296: PUSH
30297: LD_INT 0
30299: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30300: LD_INT 35
30302: PPUSH
30303: CALL_OW 67
// p := p + 1 ;
30307: LD_ADDR_VAR 0 2
30311: PUSH
30312: LD_VAR 0 2
30316: PUSH
30317: LD_INT 1
30319: PLUS
30320: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30321: LD_VAR 0 3
30325: PPUSH
30326: CALL_OW 256
30330: PUSH
30331: LD_INT 1000
30333: LESS
30334: IFFALSE 30348
// SetLives ( un , 1000 ) ;
30336: LD_VAR 0 3
30340: PPUSH
30341: LD_INT 1000
30343: PPUSH
30344: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30348: LD_VAR 0 3
30352: PPUSH
30353: LD_INT 81
30355: PUSH
30356: LD_OWVAR 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 91
30367: PUSH
30368: LD_VAR 0 3
30372: PUSH
30373: LD_INT 30
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PPUSH
30385: CALL_OW 69
30389: PPUSH
30390: LD_VAR 0 3
30394: PPUSH
30395: CALL_OW 74
30399: PPUSH
30400: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30404: LD_VAR 0 2
30408: PUSH
30409: LD_INT 60
30411: GREATER
30412: PUSH
30413: LD_VAR 0 3
30417: PPUSH
30418: CALL_OW 301
30422: OR
30423: IFFALSE 30300
// if un then
30425: LD_VAR 0 3
30429: IFFALSE 30440
// RemoveUnit ( un ) ;
30431: LD_VAR 0 3
30435: PPUSH
30436: CALL_OW 64
// end ;
30440: PPOPN 3
30442: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30443: LD_INT 0
30445: PPUSH
// case cmd of 301 :
30446: LD_VAR 0 1
30450: PUSH
30451: LD_INT 301
30453: DOUBLE
30454: EQUAL
30455: IFTRUE 30459
30457: GO 30491
30459: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30460: LD_VAR 0 6
30464: PPUSH
30465: LD_VAR 0 7
30469: PPUSH
30470: LD_VAR 0 8
30474: PPUSH
30475: LD_VAR 0 4
30479: PPUSH
30480: LD_VAR 0 5
30484: PPUSH
30485: CALL 31692 0 5
30489: GO 30612
30491: LD_INT 302
30493: DOUBLE
30494: EQUAL
30495: IFTRUE 30499
30497: GO 30536
30499: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30500: LD_VAR 0 6
30504: PPUSH
30505: LD_VAR 0 7
30509: PPUSH
30510: LD_VAR 0 8
30514: PPUSH
30515: LD_VAR 0 9
30519: PPUSH
30520: LD_VAR 0 4
30524: PPUSH
30525: LD_VAR 0 5
30529: PPUSH
30530: CALL 31783 0 6
30534: GO 30612
30536: LD_INT 303
30538: DOUBLE
30539: EQUAL
30540: IFTRUE 30544
30542: GO 30581
30544: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30545: LD_VAR 0 6
30549: PPUSH
30550: LD_VAR 0 7
30554: PPUSH
30555: LD_VAR 0 8
30559: PPUSH
30560: LD_VAR 0 9
30564: PPUSH
30565: LD_VAR 0 4
30569: PPUSH
30570: LD_VAR 0 5
30574: PPUSH
30575: CALL 30617 0 6
30579: GO 30612
30581: LD_INT 304
30583: DOUBLE
30584: EQUAL
30585: IFTRUE 30589
30587: GO 30611
30589: POP
// hHackTeleport ( unit , x , y ) ; end ;
30590: LD_VAR 0 2
30594: PPUSH
30595: LD_VAR 0 4
30599: PPUSH
30600: LD_VAR 0 5
30604: PPUSH
30605: CALL 32376 0 3
30609: GO 30612
30611: POP
// end ;
30612: LD_VAR 0 12
30616: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30617: LD_INT 0
30619: PPUSH
30620: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30621: LD_VAR 0 1
30625: PUSH
30626: LD_INT 1
30628: LESS
30629: PUSH
30630: LD_VAR 0 1
30634: PUSH
30635: LD_INT 3
30637: GREATER
30638: OR
30639: PUSH
30640: LD_VAR 0 5
30644: PPUSH
30645: LD_VAR 0 6
30649: PPUSH
30650: CALL_OW 428
30654: OR
30655: IFFALSE 30659
// exit ;
30657: GO 31379
// uc_side := your_side ;
30659: LD_ADDR_OWVAR 20
30663: PUSH
30664: LD_OWVAR 2
30668: ST_TO_ADDR
// uc_nation := nation ;
30669: LD_ADDR_OWVAR 21
30673: PUSH
30674: LD_VAR 0 1
30678: ST_TO_ADDR
// bc_level = 1 ;
30679: LD_ADDR_OWVAR 43
30683: PUSH
30684: LD_INT 1
30686: ST_TO_ADDR
// case btype of 1 :
30687: LD_VAR 0 2
30691: PUSH
30692: LD_INT 1
30694: DOUBLE
30695: EQUAL
30696: IFTRUE 30700
30698: GO 30711
30700: POP
// bc_type := b_depot ; 2 :
30701: LD_ADDR_OWVAR 42
30705: PUSH
30706: LD_INT 0
30708: ST_TO_ADDR
30709: GO 31323
30711: LD_INT 2
30713: DOUBLE
30714: EQUAL
30715: IFTRUE 30719
30717: GO 30730
30719: POP
// bc_type := b_warehouse ; 3 :
30720: LD_ADDR_OWVAR 42
30724: PUSH
30725: LD_INT 1
30727: ST_TO_ADDR
30728: GO 31323
30730: LD_INT 3
30732: DOUBLE
30733: EQUAL
30734: IFTRUE 30738
30736: GO 30749
30738: POP
// bc_type := b_lab ; 4 .. 9 :
30739: LD_ADDR_OWVAR 42
30743: PUSH
30744: LD_INT 6
30746: ST_TO_ADDR
30747: GO 31323
30749: LD_INT 4
30751: DOUBLE
30752: GREATEREQUAL
30753: IFFALSE 30761
30755: LD_INT 9
30757: DOUBLE
30758: LESSEQUAL
30759: IFTRUE 30763
30761: GO 30815
30763: POP
// begin bc_type := b_lab_half ;
30764: LD_ADDR_OWVAR 42
30768: PUSH
30769: LD_INT 7
30771: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30772: LD_ADDR_OWVAR 44
30776: PUSH
30777: LD_INT 10
30779: PUSH
30780: LD_INT 11
30782: PUSH
30783: LD_INT 12
30785: PUSH
30786: LD_INT 15
30788: PUSH
30789: LD_INT 14
30791: PUSH
30792: LD_INT 13
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: PUSH
30803: LD_VAR 0 2
30807: PUSH
30808: LD_INT 3
30810: MINUS
30811: ARRAY
30812: ST_TO_ADDR
// end ; 10 .. 13 :
30813: GO 31323
30815: LD_INT 10
30817: DOUBLE
30818: GREATEREQUAL
30819: IFFALSE 30827
30821: LD_INT 13
30823: DOUBLE
30824: LESSEQUAL
30825: IFTRUE 30829
30827: GO 30906
30829: POP
// begin bc_type := b_lab_full ;
30830: LD_ADDR_OWVAR 42
30834: PUSH
30835: LD_INT 8
30837: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30838: LD_ADDR_OWVAR 44
30842: PUSH
30843: LD_INT 10
30845: PUSH
30846: LD_INT 12
30848: PUSH
30849: LD_INT 14
30851: PUSH
30852: LD_INT 13
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: PUSH
30861: LD_VAR 0 2
30865: PUSH
30866: LD_INT 9
30868: MINUS
30869: ARRAY
30870: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30871: LD_ADDR_OWVAR 45
30875: PUSH
30876: LD_INT 11
30878: PUSH
30879: LD_INT 15
30881: PUSH
30882: LD_INT 12
30884: PUSH
30885: LD_INT 15
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: PUSH
30894: LD_VAR 0 2
30898: PUSH
30899: LD_INT 9
30901: MINUS
30902: ARRAY
30903: ST_TO_ADDR
// end ; 14 :
30904: GO 31323
30906: LD_INT 14
30908: DOUBLE
30909: EQUAL
30910: IFTRUE 30914
30912: GO 30925
30914: POP
// bc_type := b_workshop ; 15 :
30915: LD_ADDR_OWVAR 42
30919: PUSH
30920: LD_INT 2
30922: ST_TO_ADDR
30923: GO 31323
30925: LD_INT 15
30927: DOUBLE
30928: EQUAL
30929: IFTRUE 30933
30931: GO 30944
30933: POP
// bc_type := b_factory ; 16 :
30934: LD_ADDR_OWVAR 42
30938: PUSH
30939: LD_INT 3
30941: ST_TO_ADDR
30942: GO 31323
30944: LD_INT 16
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30952
30950: GO 30963
30952: POP
// bc_type := b_ext_gun ; 17 :
30953: LD_ADDR_OWVAR 42
30957: PUSH
30958: LD_INT 17
30960: ST_TO_ADDR
30961: GO 31323
30963: LD_INT 17
30965: DOUBLE
30966: EQUAL
30967: IFTRUE 30971
30969: GO 30999
30971: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30972: LD_ADDR_OWVAR 42
30976: PUSH
30977: LD_INT 19
30979: PUSH
30980: LD_INT 23
30982: PUSH
30983: LD_INT 19
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: PUSH
30991: LD_VAR 0 1
30995: ARRAY
30996: ST_TO_ADDR
30997: GO 31323
30999: LD_INT 18
31001: DOUBLE
31002: EQUAL
31003: IFTRUE 31007
31005: GO 31018
31007: POP
// bc_type := b_ext_radar ; 19 :
31008: LD_ADDR_OWVAR 42
31012: PUSH
31013: LD_INT 20
31015: ST_TO_ADDR
31016: GO 31323
31018: LD_INT 19
31020: DOUBLE
31021: EQUAL
31022: IFTRUE 31026
31024: GO 31037
31026: POP
// bc_type := b_ext_radio ; 20 :
31027: LD_ADDR_OWVAR 42
31031: PUSH
31032: LD_INT 22
31034: ST_TO_ADDR
31035: GO 31323
31037: LD_INT 20
31039: DOUBLE
31040: EQUAL
31041: IFTRUE 31045
31043: GO 31056
31045: POP
// bc_type := b_ext_siberium ; 21 :
31046: LD_ADDR_OWVAR 42
31050: PUSH
31051: LD_INT 21
31053: ST_TO_ADDR
31054: GO 31323
31056: LD_INT 21
31058: DOUBLE
31059: EQUAL
31060: IFTRUE 31064
31062: GO 31075
31064: POP
// bc_type := b_ext_computer ; 22 :
31065: LD_ADDR_OWVAR 42
31069: PUSH
31070: LD_INT 24
31072: ST_TO_ADDR
31073: GO 31323
31075: LD_INT 22
31077: DOUBLE
31078: EQUAL
31079: IFTRUE 31083
31081: GO 31094
31083: POP
// bc_type := b_ext_track ; 23 :
31084: LD_ADDR_OWVAR 42
31088: PUSH
31089: LD_INT 16
31091: ST_TO_ADDR
31092: GO 31323
31094: LD_INT 23
31096: DOUBLE
31097: EQUAL
31098: IFTRUE 31102
31100: GO 31113
31102: POP
// bc_type := b_ext_laser ; 24 :
31103: LD_ADDR_OWVAR 42
31107: PUSH
31108: LD_INT 25
31110: ST_TO_ADDR
31111: GO 31323
31113: LD_INT 24
31115: DOUBLE
31116: EQUAL
31117: IFTRUE 31121
31119: GO 31132
31121: POP
// bc_type := b_control_tower ; 25 :
31122: LD_ADDR_OWVAR 42
31126: PUSH
31127: LD_INT 36
31129: ST_TO_ADDR
31130: GO 31323
31132: LD_INT 25
31134: DOUBLE
31135: EQUAL
31136: IFTRUE 31140
31138: GO 31151
31140: POP
// bc_type := b_breastwork ; 26 :
31141: LD_ADDR_OWVAR 42
31145: PUSH
31146: LD_INT 31
31148: ST_TO_ADDR
31149: GO 31323
31151: LD_INT 26
31153: DOUBLE
31154: EQUAL
31155: IFTRUE 31159
31157: GO 31170
31159: POP
// bc_type := b_bunker ; 27 :
31160: LD_ADDR_OWVAR 42
31164: PUSH
31165: LD_INT 32
31167: ST_TO_ADDR
31168: GO 31323
31170: LD_INT 27
31172: DOUBLE
31173: EQUAL
31174: IFTRUE 31178
31176: GO 31189
31178: POP
// bc_type := b_turret ; 28 :
31179: LD_ADDR_OWVAR 42
31183: PUSH
31184: LD_INT 33
31186: ST_TO_ADDR
31187: GO 31323
31189: LD_INT 28
31191: DOUBLE
31192: EQUAL
31193: IFTRUE 31197
31195: GO 31208
31197: POP
// bc_type := b_armoury ; 29 :
31198: LD_ADDR_OWVAR 42
31202: PUSH
31203: LD_INT 4
31205: ST_TO_ADDR
31206: GO 31323
31208: LD_INT 29
31210: DOUBLE
31211: EQUAL
31212: IFTRUE 31216
31214: GO 31227
31216: POP
// bc_type := b_barracks ; 30 :
31217: LD_ADDR_OWVAR 42
31221: PUSH
31222: LD_INT 5
31224: ST_TO_ADDR
31225: GO 31323
31227: LD_INT 30
31229: DOUBLE
31230: EQUAL
31231: IFTRUE 31235
31233: GO 31246
31235: POP
// bc_type := b_solar_power ; 31 :
31236: LD_ADDR_OWVAR 42
31240: PUSH
31241: LD_INT 27
31243: ST_TO_ADDR
31244: GO 31323
31246: LD_INT 31
31248: DOUBLE
31249: EQUAL
31250: IFTRUE 31254
31252: GO 31265
31254: POP
// bc_type := b_oil_power ; 32 :
31255: LD_ADDR_OWVAR 42
31259: PUSH
31260: LD_INT 26
31262: ST_TO_ADDR
31263: GO 31323
31265: LD_INT 32
31267: DOUBLE
31268: EQUAL
31269: IFTRUE 31273
31271: GO 31284
31273: POP
// bc_type := b_siberite_power ; 33 :
31274: LD_ADDR_OWVAR 42
31278: PUSH
31279: LD_INT 28
31281: ST_TO_ADDR
31282: GO 31323
31284: LD_INT 33
31286: DOUBLE
31287: EQUAL
31288: IFTRUE 31292
31290: GO 31303
31292: POP
// bc_type := b_oil_mine ; 34 :
31293: LD_ADDR_OWVAR 42
31297: PUSH
31298: LD_INT 29
31300: ST_TO_ADDR
31301: GO 31323
31303: LD_INT 34
31305: DOUBLE
31306: EQUAL
31307: IFTRUE 31311
31309: GO 31322
31311: POP
// bc_type := b_siberite_mine ; end ;
31312: LD_ADDR_OWVAR 42
31316: PUSH
31317: LD_INT 30
31319: ST_TO_ADDR
31320: GO 31323
31322: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31323: LD_ADDR_VAR 0 8
31327: PUSH
31328: LD_VAR 0 5
31332: PPUSH
31333: LD_VAR 0 6
31337: PPUSH
31338: LD_VAR 0 3
31342: PPUSH
31343: CALL_OW 47
31347: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31348: LD_OWVAR 42
31352: PUSH
31353: LD_INT 32
31355: PUSH
31356: LD_INT 33
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: IN
31363: IFFALSE 31379
// PlaceWeaponTurret ( b , weapon ) ;
31365: LD_VAR 0 8
31369: PPUSH
31370: LD_VAR 0 4
31374: PPUSH
31375: CALL_OW 431
// end ;
31379: LD_VAR 0 7
31383: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31384: LD_INT 0
31386: PPUSH
31387: PPUSH
31388: PPUSH
31389: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31390: LD_ADDR_VAR 0 4
31394: PUSH
31395: LD_INT 22
31397: PUSH
31398: LD_OWVAR 2
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 2
31409: PUSH
31410: LD_INT 30
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 30
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: LIST
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PPUSH
31439: CALL_OW 69
31443: ST_TO_ADDR
// if not tmp then
31444: LD_VAR 0 4
31448: NOT
31449: IFFALSE 31453
// exit ;
31451: GO 31512
// for i in tmp do
31453: LD_ADDR_VAR 0 2
31457: PUSH
31458: LD_VAR 0 4
31462: PUSH
31463: FOR_IN
31464: IFFALSE 31510
// for j = 1 to 3 do
31466: LD_ADDR_VAR 0 3
31470: PUSH
31471: DOUBLE
31472: LD_INT 1
31474: DEC
31475: ST_TO_ADDR
31476: LD_INT 3
31478: PUSH
31479: FOR_TO
31480: IFFALSE 31506
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31482: LD_VAR 0 2
31486: PPUSH
31487: CALL_OW 274
31491: PPUSH
31492: LD_VAR 0 3
31496: PPUSH
31497: LD_INT 99999
31499: PPUSH
31500: CALL_OW 277
31504: GO 31479
31506: POP
31507: POP
31508: GO 31463
31510: POP
31511: POP
// end ;
31512: LD_VAR 0 1
31516: RET
// export function hHackSetLevel10 ; var i , j ; begin
31517: LD_INT 0
31519: PPUSH
31520: PPUSH
31521: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31522: LD_ADDR_VAR 0 2
31526: PUSH
31527: LD_INT 21
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PPUSH
31537: CALL_OW 69
31541: PUSH
31542: FOR_IN
31543: IFFALSE 31595
// if IsSelected ( i ) then
31545: LD_VAR 0 2
31549: PPUSH
31550: CALL_OW 306
31554: IFFALSE 31593
// begin for j := 1 to 4 do
31556: LD_ADDR_VAR 0 3
31560: PUSH
31561: DOUBLE
31562: LD_INT 1
31564: DEC
31565: ST_TO_ADDR
31566: LD_INT 4
31568: PUSH
31569: FOR_TO
31570: IFFALSE 31591
// SetSkill ( i , j , 10 ) ;
31572: LD_VAR 0 2
31576: PPUSH
31577: LD_VAR 0 3
31581: PPUSH
31582: LD_INT 10
31584: PPUSH
31585: CALL_OW 237
31589: GO 31569
31591: POP
31592: POP
// end ;
31593: GO 31542
31595: POP
31596: POP
// end ;
31597: LD_VAR 0 1
31601: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31602: LD_INT 0
31604: PPUSH
31605: PPUSH
31606: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31607: LD_ADDR_VAR 0 2
31611: PUSH
31612: LD_INT 22
31614: PUSH
31615: LD_OWVAR 2
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 21
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PPUSH
31638: CALL_OW 69
31642: PUSH
31643: FOR_IN
31644: IFFALSE 31685
// begin for j := 1 to 4 do
31646: LD_ADDR_VAR 0 3
31650: PUSH
31651: DOUBLE
31652: LD_INT 1
31654: DEC
31655: ST_TO_ADDR
31656: LD_INT 4
31658: PUSH
31659: FOR_TO
31660: IFFALSE 31681
// SetSkill ( i , j , 10 ) ;
31662: LD_VAR 0 2
31666: PPUSH
31667: LD_VAR 0 3
31671: PPUSH
31672: LD_INT 10
31674: PPUSH
31675: CALL_OW 237
31679: GO 31659
31681: POP
31682: POP
// end ;
31683: GO 31643
31685: POP
31686: POP
// end ;
31687: LD_VAR 0 1
31691: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31692: LD_INT 0
31694: PPUSH
// uc_side := your_side ;
31695: LD_ADDR_OWVAR 20
31699: PUSH
31700: LD_OWVAR 2
31704: ST_TO_ADDR
// uc_nation := nation ;
31705: LD_ADDR_OWVAR 21
31709: PUSH
31710: LD_VAR 0 1
31714: ST_TO_ADDR
// InitHc ;
31715: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31719: LD_INT 0
31721: PPUSH
31722: LD_VAR 0 2
31726: PPUSH
31727: LD_VAR 0 3
31731: PPUSH
31732: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31736: LD_VAR 0 4
31740: PPUSH
31741: LD_VAR 0 5
31745: PPUSH
31746: CALL_OW 428
31750: PUSH
31751: LD_INT 0
31753: EQUAL
31754: IFFALSE 31778
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31756: CALL_OW 44
31760: PPUSH
31761: LD_VAR 0 4
31765: PPUSH
31766: LD_VAR 0 5
31770: PPUSH
31771: LD_INT 1
31773: PPUSH
31774: CALL_OW 48
// end ;
31778: LD_VAR 0 6
31782: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31783: LD_INT 0
31785: PPUSH
31786: PPUSH
// uc_side := your_side ;
31787: LD_ADDR_OWVAR 20
31791: PUSH
31792: LD_OWVAR 2
31796: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31797: LD_VAR 0 1
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: LD_INT 2
31807: PUSH
31808: LD_INT 3
31810: PUSH
31811: LD_INT 4
31813: PUSH
31814: LD_INT 5
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: IN
31824: IFFALSE 31836
// uc_nation := nation_american else
31826: LD_ADDR_OWVAR 21
31830: PUSH
31831: LD_INT 1
31833: ST_TO_ADDR
31834: GO 31879
// if chassis in [ 11 , 12 , 13 , 14 ] then
31836: LD_VAR 0 1
31840: PUSH
31841: LD_INT 11
31843: PUSH
31844: LD_INT 12
31846: PUSH
31847: LD_INT 13
31849: PUSH
31850: LD_INT 14
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: IN
31859: IFFALSE 31871
// uc_nation := nation_arabian else
31861: LD_ADDR_OWVAR 21
31865: PUSH
31866: LD_INT 2
31868: ST_TO_ADDR
31869: GO 31879
// uc_nation := nation_russian ;
31871: LD_ADDR_OWVAR 21
31875: PUSH
31876: LD_INT 3
31878: ST_TO_ADDR
// vc_chassis := chassis ;
31879: LD_ADDR_OWVAR 37
31883: PUSH
31884: LD_VAR 0 1
31888: ST_TO_ADDR
// vc_engine := engine ;
31889: LD_ADDR_OWVAR 39
31893: PUSH
31894: LD_VAR 0 2
31898: ST_TO_ADDR
// vc_control := control ;
31899: LD_ADDR_OWVAR 38
31903: PUSH
31904: LD_VAR 0 3
31908: ST_TO_ADDR
// vc_weapon := weapon ;
31909: LD_ADDR_OWVAR 40
31913: PUSH
31914: LD_VAR 0 4
31918: ST_TO_ADDR
// un := CreateVehicle ;
31919: LD_ADDR_VAR 0 8
31923: PUSH
31924: CALL_OW 45
31928: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31929: LD_VAR 0 8
31933: PPUSH
31934: LD_INT 0
31936: PPUSH
31937: LD_INT 5
31939: PPUSH
31940: CALL_OW 12
31944: PPUSH
31945: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31949: LD_VAR 0 8
31953: PPUSH
31954: LD_VAR 0 5
31958: PPUSH
31959: LD_VAR 0 6
31963: PPUSH
31964: LD_INT 1
31966: PPUSH
31967: CALL_OW 48
// end ;
31971: LD_VAR 0 7
31975: RET
// export hInvincible ; every 1 do
31976: GO 31978
31978: DISABLE
// hInvincible := [ ] ;
31979: LD_ADDR_EXP 120
31983: PUSH
31984: EMPTY
31985: ST_TO_ADDR
31986: END
// every 10 do var i ;
31987: GO 31989
31989: DISABLE
31990: LD_INT 0
31992: PPUSH
// begin enable ;
31993: ENABLE
// if not hInvincible then
31994: LD_EXP 120
31998: NOT
31999: IFFALSE 32003
// exit ;
32001: GO 32047
// for i in hInvincible do
32003: LD_ADDR_VAR 0 1
32007: PUSH
32008: LD_EXP 120
32012: PUSH
32013: FOR_IN
32014: IFFALSE 32045
// if GetLives ( i ) < 1000 then
32016: LD_VAR 0 1
32020: PPUSH
32021: CALL_OW 256
32025: PUSH
32026: LD_INT 1000
32028: LESS
32029: IFFALSE 32043
// SetLives ( i , 1000 ) ;
32031: LD_VAR 0 1
32035: PPUSH
32036: LD_INT 1000
32038: PPUSH
32039: CALL_OW 234
32043: GO 32013
32045: POP
32046: POP
// end ;
32047: PPOPN 1
32049: END
// export function hHackInvincible ; var i ; begin
32050: LD_INT 0
32052: PPUSH
32053: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32054: LD_ADDR_VAR 0 2
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: LD_INT 21
32064: PUSH
32065: LD_INT 1
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 21
32074: PUSH
32075: LD_INT 2
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: LIST
32086: PPUSH
32087: CALL_OW 69
32091: PUSH
32092: FOR_IN
32093: IFFALSE 32154
// if IsSelected ( i ) then
32095: LD_VAR 0 2
32099: PPUSH
32100: CALL_OW 306
32104: IFFALSE 32152
// begin if i in hInvincible then
32106: LD_VAR 0 2
32110: PUSH
32111: LD_EXP 120
32115: IN
32116: IFFALSE 32136
// hInvincible := hInvincible diff i else
32118: LD_ADDR_EXP 120
32122: PUSH
32123: LD_EXP 120
32127: PUSH
32128: LD_VAR 0 2
32132: DIFF
32133: ST_TO_ADDR
32134: GO 32152
// hInvincible := hInvincible union i ;
32136: LD_ADDR_EXP 120
32140: PUSH
32141: LD_EXP 120
32145: PUSH
32146: LD_VAR 0 2
32150: UNION
32151: ST_TO_ADDR
// end ;
32152: GO 32092
32154: POP
32155: POP
// end ;
32156: LD_VAR 0 1
32160: RET
// export function hHackInvisible ; var i , j ; begin
32161: LD_INT 0
32163: PPUSH
32164: PPUSH
32165: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32166: LD_ADDR_VAR 0 2
32170: PUSH
32171: LD_INT 21
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PPUSH
32181: CALL_OW 69
32185: PUSH
32186: FOR_IN
32187: IFFALSE 32211
// if IsSelected ( i ) then
32189: LD_VAR 0 2
32193: PPUSH
32194: CALL_OW 306
32198: IFFALSE 32209
// ComForceInvisible ( i ) ;
32200: LD_VAR 0 2
32204: PPUSH
32205: CALL_OW 496
32209: GO 32186
32211: POP
32212: POP
// end ;
32213: LD_VAR 0 1
32217: RET
// export function hHackChangeYourSide ; begin
32218: LD_INT 0
32220: PPUSH
// if your_side = 8 then
32221: LD_OWVAR 2
32225: PUSH
32226: LD_INT 8
32228: EQUAL
32229: IFFALSE 32241
// your_side := 0 else
32231: LD_ADDR_OWVAR 2
32235: PUSH
32236: LD_INT 0
32238: ST_TO_ADDR
32239: GO 32255
// your_side := your_side + 1 ;
32241: LD_ADDR_OWVAR 2
32245: PUSH
32246: LD_OWVAR 2
32250: PUSH
32251: LD_INT 1
32253: PLUS
32254: ST_TO_ADDR
// end ;
32255: LD_VAR 0 1
32259: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32260: LD_INT 0
32262: PPUSH
32263: PPUSH
32264: PPUSH
// for i in all_units do
32265: LD_ADDR_VAR 0 2
32269: PUSH
32270: LD_OWVAR 3
32274: PUSH
32275: FOR_IN
32276: IFFALSE 32354
// if IsSelected ( i ) then
32278: LD_VAR 0 2
32282: PPUSH
32283: CALL_OW 306
32287: IFFALSE 32352
// begin j := GetSide ( i ) ;
32289: LD_ADDR_VAR 0 3
32293: PUSH
32294: LD_VAR 0 2
32298: PPUSH
32299: CALL_OW 255
32303: ST_TO_ADDR
// if j = 8 then
32304: LD_VAR 0 3
32308: PUSH
32309: LD_INT 8
32311: EQUAL
32312: IFFALSE 32324
// j := 0 else
32314: LD_ADDR_VAR 0 3
32318: PUSH
32319: LD_INT 0
32321: ST_TO_ADDR
32322: GO 32338
// j := j + 1 ;
32324: LD_ADDR_VAR 0 3
32328: PUSH
32329: LD_VAR 0 3
32333: PUSH
32334: LD_INT 1
32336: PLUS
32337: ST_TO_ADDR
// SetSide ( i , j ) ;
32338: LD_VAR 0 2
32342: PPUSH
32343: LD_VAR 0 3
32347: PPUSH
32348: CALL_OW 235
// end ;
32352: GO 32275
32354: POP
32355: POP
// end ;
32356: LD_VAR 0 1
32360: RET
// export function hHackFog ; begin
32361: LD_INT 0
32363: PPUSH
// FogOff ( true ) ;
32364: LD_INT 1
32366: PPUSH
32367: CALL_OW 344
// end ;
32371: LD_VAR 0 1
32375: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32376: LD_INT 0
32378: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32379: LD_VAR 0 1
32383: PPUSH
32384: LD_VAR 0 2
32388: PPUSH
32389: LD_VAR 0 3
32393: PPUSH
32394: LD_INT 1
32396: PPUSH
32397: LD_INT 1
32399: PPUSH
32400: CALL_OW 483
// CenterOnXY ( x , y ) ;
32404: LD_VAR 0 2
32408: PPUSH
32409: LD_VAR 0 3
32413: PPUSH
32414: CALL_OW 84
// end ; end_of_file
32418: LD_VAR 0 4
32422: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32423: LD_INT 0
32425: PPUSH
32426: PPUSH
32427: PPUSH
32428: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32429: LD_VAR 0 1
32433: PPUSH
32434: CALL_OW 264
32438: PUSH
32439: LD_EXP 52
32443: EQUAL
32444: IFFALSE 32516
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32446: LD_INT 68
32448: PPUSH
32449: LD_VAR 0 1
32453: PPUSH
32454: CALL_OW 255
32458: PPUSH
32459: CALL_OW 321
32463: PUSH
32464: LD_INT 2
32466: EQUAL
32467: IFFALSE 32479
// eff := 70 else
32469: LD_ADDR_VAR 0 4
32473: PUSH
32474: LD_INT 70
32476: ST_TO_ADDR
32477: GO 32487
// eff := 30 ;
32479: LD_ADDR_VAR 0 4
32483: PUSH
32484: LD_INT 30
32486: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32487: LD_VAR 0 1
32491: PPUSH
32492: CALL_OW 250
32496: PPUSH
32497: LD_VAR 0 1
32501: PPUSH
32502: CALL_OW 251
32506: PPUSH
32507: LD_VAR 0 4
32511: PPUSH
32512: CALL_OW 495
// end ; end ;
32516: LD_VAR 0 2
32520: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32521: LD_INT 0
32523: PPUSH
// end ;
32524: LD_VAR 0 4
32528: RET
// export function SOS_Command ( cmd ) ; begin
32529: LD_INT 0
32531: PPUSH
// end ;
32532: LD_VAR 0 2
32536: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32537: LD_INT 0
32539: PPUSH
// if cmd = 121 then
32540: LD_VAR 0 1
32544: PUSH
32545: LD_INT 121
32547: EQUAL
32548: IFFALSE 32550
// end ;
32550: LD_VAR 0 6
32554: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32555: LD_INT 0
32557: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32558: LD_VAR 0 1
32562: PUSH
32563: LD_INT 250
32565: EQUAL
32566: PUSH
32567: LD_VAR 0 2
32571: PPUSH
32572: CALL_OW 264
32576: PUSH
32577: LD_EXP 55
32581: EQUAL
32582: AND
32583: IFFALSE 32604
// MinerPlaceMine ( unit , x , y ) ;
32585: LD_VAR 0 2
32589: PPUSH
32590: LD_VAR 0 4
32594: PPUSH
32595: LD_VAR 0 5
32599: PPUSH
32600: CALL 34953 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32604: LD_VAR 0 1
32608: PUSH
32609: LD_INT 251
32611: EQUAL
32612: PUSH
32613: LD_VAR 0 2
32617: PPUSH
32618: CALL_OW 264
32622: PUSH
32623: LD_EXP 55
32627: EQUAL
32628: AND
32629: IFFALSE 32650
// MinerDetonateMine ( unit , x , y ) ;
32631: LD_VAR 0 2
32635: PPUSH
32636: LD_VAR 0 4
32640: PPUSH
32641: LD_VAR 0 5
32645: PPUSH
32646: CALL 35230 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32650: LD_VAR 0 1
32654: PUSH
32655: LD_INT 252
32657: EQUAL
32658: PUSH
32659: LD_VAR 0 2
32663: PPUSH
32664: CALL_OW 264
32668: PUSH
32669: LD_EXP 55
32673: EQUAL
32674: AND
32675: IFFALSE 32696
// MinerCreateMinefield ( unit , x , y ) ;
32677: LD_VAR 0 2
32681: PPUSH
32682: LD_VAR 0 4
32686: PPUSH
32687: LD_VAR 0 5
32691: PPUSH
32692: CALL 35647 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32696: LD_VAR 0 1
32700: PUSH
32701: LD_INT 253
32703: EQUAL
32704: PUSH
32705: LD_VAR 0 2
32709: PPUSH
32710: CALL_OW 257
32714: PUSH
32715: LD_INT 5
32717: EQUAL
32718: AND
32719: IFFALSE 32740
// ComBinocular ( unit , x , y ) ;
32721: LD_VAR 0 2
32725: PPUSH
32726: LD_VAR 0 4
32730: PPUSH
32731: LD_VAR 0 5
32735: PPUSH
32736: CALL 36018 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32740: LD_VAR 0 1
32744: PUSH
32745: LD_INT 254
32747: EQUAL
32748: PUSH
32749: LD_VAR 0 2
32753: PPUSH
32754: CALL_OW 264
32758: PUSH
32759: LD_EXP 50
32763: EQUAL
32764: AND
32765: PUSH
32766: LD_VAR 0 3
32770: PPUSH
32771: CALL_OW 263
32775: PUSH
32776: LD_INT 3
32778: EQUAL
32779: AND
32780: IFFALSE 32796
// HackDestroyVehicle ( unit , selectedUnit ) ;
32782: LD_VAR 0 2
32786: PPUSH
32787: LD_VAR 0 3
32791: PPUSH
32792: CALL 34313 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32796: LD_VAR 0 1
32800: PUSH
32801: LD_INT 255
32803: EQUAL
32804: PUSH
32805: LD_VAR 0 2
32809: PPUSH
32810: CALL_OW 264
32814: PUSH
32815: LD_INT 14
32817: PUSH
32818: LD_INT 53
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: IN
32825: AND
32826: PUSH
32827: LD_VAR 0 4
32831: PPUSH
32832: LD_VAR 0 5
32836: PPUSH
32837: CALL_OW 488
32841: AND
32842: IFFALSE 32866
// CutTreeXYR ( unit , x , y , 12 ) ;
32844: LD_VAR 0 2
32848: PPUSH
32849: LD_VAR 0 4
32853: PPUSH
32854: LD_VAR 0 5
32858: PPUSH
32859: LD_INT 12
32861: PPUSH
32862: CALL 32879 0 4
// end ;
32866: LD_VAR 0 6
32870: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32871: LD_INT 0
32873: PPUSH
// end ;
32874: LD_VAR 0 4
32878: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32879: LD_INT 0
32881: PPUSH
32882: PPUSH
32883: PPUSH
32884: PPUSH
32885: PPUSH
32886: PPUSH
32887: PPUSH
32888: PPUSH
32889: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32890: LD_VAR 0 1
32894: NOT
32895: PUSH
32896: LD_VAR 0 2
32900: PPUSH
32901: LD_VAR 0 3
32905: PPUSH
32906: CALL_OW 488
32910: NOT
32911: OR
32912: PUSH
32913: LD_VAR 0 4
32917: NOT
32918: OR
32919: IFFALSE 32923
// exit ;
32921: GO 33263
// list := [ ] ;
32923: LD_ADDR_VAR 0 13
32927: PUSH
32928: EMPTY
32929: ST_TO_ADDR
// if x - r < 0 then
32930: LD_VAR 0 2
32934: PUSH
32935: LD_VAR 0 4
32939: MINUS
32940: PUSH
32941: LD_INT 0
32943: LESS
32944: IFFALSE 32956
// min_x := 0 else
32946: LD_ADDR_VAR 0 7
32950: PUSH
32951: LD_INT 0
32953: ST_TO_ADDR
32954: GO 32972
// min_x := x - r ;
32956: LD_ADDR_VAR 0 7
32960: PUSH
32961: LD_VAR 0 2
32965: PUSH
32966: LD_VAR 0 4
32970: MINUS
32971: ST_TO_ADDR
// if y - r < 0 then
32972: LD_VAR 0 3
32976: PUSH
32977: LD_VAR 0 4
32981: MINUS
32982: PUSH
32983: LD_INT 0
32985: LESS
32986: IFFALSE 32998
// min_y := 0 else
32988: LD_ADDR_VAR 0 8
32992: PUSH
32993: LD_INT 0
32995: ST_TO_ADDR
32996: GO 33014
// min_y := y - r ;
32998: LD_ADDR_VAR 0 8
33002: PUSH
33003: LD_VAR 0 3
33007: PUSH
33008: LD_VAR 0 4
33012: MINUS
33013: ST_TO_ADDR
// max_x := x + r ;
33014: LD_ADDR_VAR 0 9
33018: PUSH
33019: LD_VAR 0 2
33023: PUSH
33024: LD_VAR 0 4
33028: PLUS
33029: ST_TO_ADDR
// max_y := y + r ;
33030: LD_ADDR_VAR 0 10
33034: PUSH
33035: LD_VAR 0 3
33039: PUSH
33040: LD_VAR 0 4
33044: PLUS
33045: ST_TO_ADDR
// for _x = min_x to max_x do
33046: LD_ADDR_VAR 0 11
33050: PUSH
33051: DOUBLE
33052: LD_VAR 0 7
33056: DEC
33057: ST_TO_ADDR
33058: LD_VAR 0 9
33062: PUSH
33063: FOR_TO
33064: IFFALSE 33181
// for _y = min_y to max_y do
33066: LD_ADDR_VAR 0 12
33070: PUSH
33071: DOUBLE
33072: LD_VAR 0 8
33076: DEC
33077: ST_TO_ADDR
33078: LD_VAR 0 10
33082: PUSH
33083: FOR_TO
33084: IFFALSE 33177
// begin if not ValidHex ( _x , _y ) then
33086: LD_VAR 0 11
33090: PPUSH
33091: LD_VAR 0 12
33095: PPUSH
33096: CALL_OW 488
33100: NOT
33101: IFFALSE 33105
// continue ;
33103: GO 33083
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33105: LD_VAR 0 11
33109: PPUSH
33110: LD_VAR 0 12
33114: PPUSH
33115: CALL_OW 351
33119: PUSH
33120: LD_VAR 0 11
33124: PPUSH
33125: LD_VAR 0 12
33129: PPUSH
33130: CALL_OW 554
33134: AND
33135: IFFALSE 33175
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33137: LD_ADDR_VAR 0 13
33141: PUSH
33142: LD_VAR 0 13
33146: PPUSH
33147: LD_VAR 0 13
33151: PUSH
33152: LD_INT 1
33154: PLUS
33155: PPUSH
33156: LD_VAR 0 11
33160: PUSH
33161: LD_VAR 0 12
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PPUSH
33170: CALL_OW 2
33174: ST_TO_ADDR
// end ;
33175: GO 33083
33177: POP
33178: POP
33179: GO 33063
33181: POP
33182: POP
// if not list then
33183: LD_VAR 0 13
33187: NOT
33188: IFFALSE 33192
// exit ;
33190: GO 33263
// for i in list do
33192: LD_ADDR_VAR 0 6
33196: PUSH
33197: LD_VAR 0 13
33201: PUSH
33202: FOR_IN
33203: IFFALSE 33261
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33205: LD_VAR 0 1
33209: PPUSH
33210: LD_STRING M
33212: PUSH
33213: LD_VAR 0 6
33217: PUSH
33218: LD_INT 1
33220: ARRAY
33221: PUSH
33222: LD_VAR 0 6
33226: PUSH
33227: LD_INT 2
33229: ARRAY
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: PUSH
33252: EMPTY
33253: LIST
33254: PPUSH
33255: CALL_OW 447
33259: GO 33202
33261: POP
33262: POP
// end ;
33263: LD_VAR 0 5
33267: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33268: LD_EXP 123
33272: NOT
33273: IFFALSE 33323
33275: GO 33277
33277: DISABLE
// begin initHack := true ;
33278: LD_ADDR_EXP 123
33282: PUSH
33283: LD_INT 1
33285: ST_TO_ADDR
// hackTanks := [ ] ;
33286: LD_ADDR_EXP 124
33290: PUSH
33291: EMPTY
33292: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33293: LD_ADDR_EXP 125
33297: PUSH
33298: EMPTY
33299: ST_TO_ADDR
// hackLimit := 3 ;
33300: LD_ADDR_EXP 126
33304: PUSH
33305: LD_INT 3
33307: ST_TO_ADDR
// hackDist := 12 ;
33308: LD_ADDR_EXP 127
33312: PUSH
33313: LD_INT 12
33315: ST_TO_ADDR
// hackCounter := [ ] ;
33316: LD_ADDR_EXP 128
33320: PUSH
33321: EMPTY
33322: ST_TO_ADDR
// end ;
33323: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33324: LD_EXP 123
33328: PUSH
33329: LD_INT 34
33331: PUSH
33332: LD_EXP 50
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PPUSH
33341: CALL_OW 69
33345: AND
33346: IFFALSE 33601
33348: GO 33350
33350: DISABLE
33351: LD_INT 0
33353: PPUSH
33354: PPUSH
// begin enable ;
33355: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33356: LD_ADDR_VAR 0 1
33360: PUSH
33361: LD_INT 34
33363: PUSH
33364: LD_EXP 50
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PPUSH
33373: CALL_OW 69
33377: PUSH
33378: FOR_IN
33379: IFFALSE 33599
// begin if not i in hackTanks then
33381: LD_VAR 0 1
33385: PUSH
33386: LD_EXP 124
33390: IN
33391: NOT
33392: IFFALSE 33475
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33394: LD_ADDR_EXP 124
33398: PUSH
33399: LD_EXP 124
33403: PPUSH
33404: LD_EXP 124
33408: PUSH
33409: LD_INT 1
33411: PLUS
33412: PPUSH
33413: LD_VAR 0 1
33417: PPUSH
33418: CALL_OW 1
33422: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33423: LD_ADDR_EXP 125
33427: PUSH
33428: LD_EXP 125
33432: PPUSH
33433: LD_EXP 125
33437: PUSH
33438: LD_INT 1
33440: PLUS
33441: PPUSH
33442: EMPTY
33443: PPUSH
33444: CALL_OW 1
33448: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33449: LD_ADDR_EXP 128
33453: PUSH
33454: LD_EXP 128
33458: PPUSH
33459: LD_EXP 128
33463: PUSH
33464: LD_INT 1
33466: PLUS
33467: PPUSH
33468: EMPTY
33469: PPUSH
33470: CALL_OW 1
33474: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33475: LD_VAR 0 1
33479: PPUSH
33480: CALL_OW 302
33484: NOT
33485: IFFALSE 33498
// begin HackUnlinkAll ( i ) ;
33487: LD_VAR 0 1
33491: PPUSH
33492: CALL 33604 0 1
// continue ;
33496: GO 33378
// end ; HackCheckCapturedStatus ( i ) ;
33498: LD_VAR 0 1
33502: PPUSH
33503: CALL 34047 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33507: LD_ADDR_VAR 0 2
33511: PUSH
33512: LD_INT 81
33514: PUSH
33515: LD_VAR 0 1
33519: PPUSH
33520: CALL_OW 255
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 33
33531: PUSH
33532: LD_INT 3
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 91
33541: PUSH
33542: LD_VAR 0 1
33546: PUSH
33547: LD_EXP 127
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 50
33559: PUSH
33560: EMPTY
33561: LIST
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: PPUSH
33569: CALL_OW 69
33573: ST_TO_ADDR
// if not tmp then
33574: LD_VAR 0 2
33578: NOT
33579: IFFALSE 33583
// continue ;
33581: GO 33378
// HackLink ( i , tmp ) ;
33583: LD_VAR 0 1
33587: PPUSH
33588: LD_VAR 0 2
33592: PPUSH
33593: CALL 33740 0 2
// end ;
33597: GO 33378
33599: POP
33600: POP
// end ;
33601: PPOPN 2
33603: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33604: LD_INT 0
33606: PPUSH
33607: PPUSH
33608: PPUSH
// if not hack in hackTanks then
33609: LD_VAR 0 1
33613: PUSH
33614: LD_EXP 124
33618: IN
33619: NOT
33620: IFFALSE 33624
// exit ;
33622: GO 33735
// index := GetElementIndex ( hackTanks , hack ) ;
33624: LD_ADDR_VAR 0 4
33628: PUSH
33629: LD_EXP 124
33633: PPUSH
33634: LD_VAR 0 1
33638: PPUSH
33639: CALL 41169 0 2
33643: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33644: LD_EXP 125
33648: PUSH
33649: LD_VAR 0 4
33653: ARRAY
33654: IFFALSE 33735
// begin for i in hackTanksCaptured [ index ] do
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_EXP 125
33665: PUSH
33666: LD_VAR 0 4
33670: ARRAY
33671: PUSH
33672: FOR_IN
33673: IFFALSE 33699
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33675: LD_VAR 0 3
33679: PUSH
33680: LD_INT 1
33682: ARRAY
33683: PPUSH
33684: LD_VAR 0 3
33688: PUSH
33689: LD_INT 2
33691: ARRAY
33692: PPUSH
33693: CALL_OW 235
33697: GO 33672
33699: POP
33700: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33701: LD_ADDR_EXP 125
33705: PUSH
33706: LD_EXP 125
33710: PPUSH
33711: LD_VAR 0 4
33715: PPUSH
33716: EMPTY
33717: PPUSH
33718: CALL_OW 1
33722: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33723: LD_VAR 0 1
33727: PPUSH
33728: LD_INT 0
33730: PPUSH
33731: CALL_OW 505
// end ; end ;
33735: LD_VAR 0 2
33739: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33740: LD_INT 0
33742: PPUSH
33743: PPUSH
33744: PPUSH
// if not hack in hackTanks or not vehicles then
33745: LD_VAR 0 1
33749: PUSH
33750: LD_EXP 124
33754: IN
33755: NOT
33756: PUSH
33757: LD_VAR 0 2
33761: NOT
33762: OR
33763: IFFALSE 33767
// exit ;
33765: GO 34042
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33767: LD_ADDR_VAR 0 2
33771: PUSH
33772: LD_VAR 0 1
33776: PPUSH
33777: LD_VAR 0 2
33781: PPUSH
33782: LD_INT 1
33784: PPUSH
33785: LD_INT 1
33787: PPUSH
33788: CALL 41819 0 4
33792: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33793: LD_ADDR_VAR 0 5
33797: PUSH
33798: LD_EXP 124
33802: PPUSH
33803: LD_VAR 0 1
33807: PPUSH
33808: CALL 41169 0 2
33812: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33813: LD_EXP 125
33817: PUSH
33818: LD_VAR 0 5
33822: ARRAY
33823: PUSH
33824: LD_EXP 126
33828: LESS
33829: IFFALSE 34018
// begin for i := 1 to vehicles do
33831: LD_ADDR_VAR 0 4
33835: PUSH
33836: DOUBLE
33837: LD_INT 1
33839: DEC
33840: ST_TO_ADDR
33841: LD_VAR 0 2
33845: PUSH
33846: FOR_TO
33847: IFFALSE 34016
// begin if hackTanksCaptured [ index ] = hackLimit then
33849: LD_EXP 125
33853: PUSH
33854: LD_VAR 0 5
33858: ARRAY
33859: PUSH
33860: LD_EXP 126
33864: EQUAL
33865: IFFALSE 33869
// break ;
33867: GO 34016
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33869: LD_ADDR_EXP 128
33873: PUSH
33874: LD_EXP 128
33878: PPUSH
33879: LD_VAR 0 5
33883: PPUSH
33884: LD_EXP 128
33888: PUSH
33889: LD_VAR 0 5
33893: ARRAY
33894: PUSH
33895: LD_INT 1
33897: PLUS
33898: PPUSH
33899: CALL_OW 1
33903: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33904: LD_ADDR_EXP 125
33908: PUSH
33909: LD_EXP 125
33913: PPUSH
33914: LD_VAR 0 5
33918: PUSH
33919: LD_EXP 125
33923: PUSH
33924: LD_VAR 0 5
33928: ARRAY
33929: PUSH
33930: LD_INT 1
33932: PLUS
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PPUSH
33938: LD_VAR 0 2
33942: PUSH
33943: LD_VAR 0 4
33947: ARRAY
33948: PUSH
33949: LD_VAR 0 2
33953: PUSH
33954: LD_VAR 0 4
33958: ARRAY
33959: PPUSH
33960: CALL_OW 255
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PPUSH
33969: CALL 41384 0 3
33973: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33974: LD_VAR 0 2
33978: PUSH
33979: LD_VAR 0 4
33983: ARRAY
33984: PPUSH
33985: LD_VAR 0 1
33989: PPUSH
33990: CALL_OW 255
33994: PPUSH
33995: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33999: LD_VAR 0 2
34003: PUSH
34004: LD_VAR 0 4
34008: ARRAY
34009: PPUSH
34010: CALL_OW 141
// end ;
34014: GO 33846
34016: POP
34017: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34018: LD_VAR 0 1
34022: PPUSH
34023: LD_EXP 125
34027: PUSH
34028: LD_VAR 0 5
34032: ARRAY
34033: PUSH
34034: LD_INT 0
34036: PLUS
34037: PPUSH
34038: CALL_OW 505
// end ;
34042: LD_VAR 0 3
34046: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34047: LD_INT 0
34049: PPUSH
34050: PPUSH
34051: PPUSH
34052: PPUSH
// if not hack in hackTanks then
34053: LD_VAR 0 1
34057: PUSH
34058: LD_EXP 124
34062: IN
34063: NOT
34064: IFFALSE 34068
// exit ;
34066: GO 34308
// index := GetElementIndex ( hackTanks , hack ) ;
34068: LD_ADDR_VAR 0 4
34072: PUSH
34073: LD_EXP 124
34077: PPUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: CALL 41169 0 2
34087: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34088: LD_ADDR_VAR 0 3
34092: PUSH
34093: DOUBLE
34094: LD_EXP 125
34098: PUSH
34099: LD_VAR 0 4
34103: ARRAY
34104: INC
34105: ST_TO_ADDR
34106: LD_INT 1
34108: PUSH
34109: FOR_DOWNTO
34110: IFFALSE 34282
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34112: LD_ADDR_VAR 0 5
34116: PUSH
34117: LD_EXP 125
34121: PUSH
34122: LD_VAR 0 4
34126: ARRAY
34127: PUSH
34128: LD_VAR 0 3
34132: ARRAY
34133: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34134: LD_VAR 0 5
34138: PUSH
34139: LD_INT 1
34141: ARRAY
34142: PPUSH
34143: CALL_OW 302
34147: NOT
34148: PUSH
34149: LD_VAR 0 5
34153: PUSH
34154: LD_INT 1
34156: ARRAY
34157: PPUSH
34158: CALL_OW 255
34162: PUSH
34163: LD_VAR 0 1
34167: PPUSH
34168: CALL_OW 255
34172: NONEQUAL
34173: OR
34174: IFFALSE 34280
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34176: LD_VAR 0 5
34180: PUSH
34181: LD_INT 1
34183: ARRAY
34184: PPUSH
34185: CALL_OW 305
34189: PUSH
34190: LD_VAR 0 5
34194: PUSH
34195: LD_INT 1
34197: ARRAY
34198: PPUSH
34199: CALL_OW 255
34203: PUSH
34204: LD_VAR 0 1
34208: PPUSH
34209: CALL_OW 255
34213: EQUAL
34214: AND
34215: IFFALSE 34239
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34217: LD_VAR 0 5
34221: PUSH
34222: LD_INT 1
34224: ARRAY
34225: PPUSH
34226: LD_VAR 0 5
34230: PUSH
34231: LD_INT 2
34233: ARRAY
34234: PPUSH
34235: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34239: LD_ADDR_EXP 125
34243: PUSH
34244: LD_EXP 125
34248: PPUSH
34249: LD_VAR 0 4
34253: PPUSH
34254: LD_EXP 125
34258: PUSH
34259: LD_VAR 0 4
34263: ARRAY
34264: PPUSH
34265: LD_VAR 0 3
34269: PPUSH
34270: CALL_OW 3
34274: PPUSH
34275: CALL_OW 1
34279: ST_TO_ADDR
// end ; end ;
34280: GO 34109
34282: POP
34283: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34284: LD_VAR 0 1
34288: PPUSH
34289: LD_EXP 125
34293: PUSH
34294: LD_VAR 0 4
34298: ARRAY
34299: PUSH
34300: LD_INT 0
34302: PLUS
34303: PPUSH
34304: CALL_OW 505
// end ;
34308: LD_VAR 0 2
34312: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34313: LD_INT 0
34315: PPUSH
34316: PPUSH
34317: PPUSH
34318: PPUSH
// if not hack in hackTanks then
34319: LD_VAR 0 1
34323: PUSH
34324: LD_EXP 124
34328: IN
34329: NOT
34330: IFFALSE 34334
// exit ;
34332: GO 34419
// index := GetElementIndex ( hackTanks , hack ) ;
34334: LD_ADDR_VAR 0 5
34338: PUSH
34339: LD_EXP 124
34343: PPUSH
34344: LD_VAR 0 1
34348: PPUSH
34349: CALL 41169 0 2
34353: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34354: LD_ADDR_VAR 0 4
34358: PUSH
34359: DOUBLE
34360: LD_INT 1
34362: DEC
34363: ST_TO_ADDR
34364: LD_EXP 125
34368: PUSH
34369: LD_VAR 0 5
34373: ARRAY
34374: PUSH
34375: FOR_TO
34376: IFFALSE 34417
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34378: LD_EXP 125
34382: PUSH
34383: LD_VAR 0 5
34387: ARRAY
34388: PUSH
34389: LD_VAR 0 4
34393: ARRAY
34394: PUSH
34395: LD_INT 1
34397: ARRAY
34398: PUSH
34399: LD_VAR 0 2
34403: EQUAL
34404: IFFALSE 34415
// KillUnit ( vehicle ) ;
34406: LD_VAR 0 2
34410: PPUSH
34411: CALL_OW 66
34415: GO 34375
34417: POP
34418: POP
// end ;
34419: LD_VAR 0 3
34423: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34424: LD_EXP 129
34428: NOT
34429: IFFALSE 34464
34431: GO 34433
34433: DISABLE
// begin initMiner := true ;
34434: LD_ADDR_EXP 129
34438: PUSH
34439: LD_INT 1
34441: ST_TO_ADDR
// minersList := [ ] ;
34442: LD_ADDR_EXP 130
34446: PUSH
34447: EMPTY
34448: ST_TO_ADDR
// minerMinesList := [ ] ;
34449: LD_ADDR_EXP 131
34453: PUSH
34454: EMPTY
34455: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34456: LD_ADDR_EXP 132
34460: PUSH
34461: LD_INT 5
34463: ST_TO_ADDR
// end ;
34464: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34465: LD_EXP 129
34469: PUSH
34470: LD_INT 34
34472: PUSH
34473: LD_EXP 55
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PPUSH
34482: CALL_OW 69
34486: AND
34487: IFFALSE 34950
34489: GO 34491
34491: DISABLE
34492: LD_INT 0
34494: PPUSH
34495: PPUSH
34496: PPUSH
34497: PPUSH
// begin enable ;
34498: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34499: LD_ADDR_VAR 0 1
34503: PUSH
34504: LD_INT 34
34506: PUSH
34507: LD_EXP 55
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PPUSH
34516: CALL_OW 69
34520: PUSH
34521: FOR_IN
34522: IFFALSE 34594
// begin if not i in minersList then
34524: LD_VAR 0 1
34528: PUSH
34529: LD_EXP 130
34533: IN
34534: NOT
34535: IFFALSE 34592
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34537: LD_ADDR_EXP 130
34541: PUSH
34542: LD_EXP 130
34546: PPUSH
34547: LD_EXP 130
34551: PUSH
34552: LD_INT 1
34554: PLUS
34555: PPUSH
34556: LD_VAR 0 1
34560: PPUSH
34561: CALL_OW 1
34565: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34566: LD_ADDR_EXP 131
34570: PUSH
34571: LD_EXP 131
34575: PPUSH
34576: LD_EXP 131
34580: PUSH
34581: LD_INT 1
34583: PLUS
34584: PPUSH
34585: EMPTY
34586: PPUSH
34587: CALL_OW 1
34591: ST_TO_ADDR
// end end ;
34592: GO 34521
34594: POP
34595: POP
// for i := minerMinesList downto 1 do
34596: LD_ADDR_VAR 0 1
34600: PUSH
34601: DOUBLE
34602: LD_EXP 131
34606: INC
34607: ST_TO_ADDR
34608: LD_INT 1
34610: PUSH
34611: FOR_DOWNTO
34612: IFFALSE 34948
// begin if IsLive ( minersList [ i ] ) then
34614: LD_EXP 130
34618: PUSH
34619: LD_VAR 0 1
34623: ARRAY
34624: PPUSH
34625: CALL_OW 300
34629: IFFALSE 34657
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34631: LD_EXP 130
34635: PUSH
34636: LD_VAR 0 1
34640: ARRAY
34641: PPUSH
34642: LD_EXP 131
34646: PUSH
34647: LD_VAR 0 1
34651: ARRAY
34652: PPUSH
34653: CALL_OW 505
// if not minerMinesList [ i ] then
34657: LD_EXP 131
34661: PUSH
34662: LD_VAR 0 1
34666: ARRAY
34667: NOT
34668: IFFALSE 34672
// continue ;
34670: GO 34611
// for j := minerMinesList [ i ] downto 1 do
34672: LD_ADDR_VAR 0 2
34676: PUSH
34677: DOUBLE
34678: LD_EXP 131
34682: PUSH
34683: LD_VAR 0 1
34687: ARRAY
34688: INC
34689: ST_TO_ADDR
34690: LD_INT 1
34692: PUSH
34693: FOR_DOWNTO
34694: IFFALSE 34944
// begin side := GetSide ( minersList [ i ] ) ;
34696: LD_ADDR_VAR 0 3
34700: PUSH
34701: LD_EXP 130
34705: PUSH
34706: LD_VAR 0 1
34710: ARRAY
34711: PPUSH
34712: CALL_OW 255
34716: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34717: LD_ADDR_VAR 0 4
34721: PUSH
34722: LD_EXP 131
34726: PUSH
34727: LD_VAR 0 1
34731: ARRAY
34732: PUSH
34733: LD_VAR 0 2
34737: ARRAY
34738: PUSH
34739: LD_INT 1
34741: ARRAY
34742: PPUSH
34743: LD_EXP 131
34747: PUSH
34748: LD_VAR 0 1
34752: ARRAY
34753: PUSH
34754: LD_VAR 0 2
34758: ARRAY
34759: PUSH
34760: LD_INT 2
34762: ARRAY
34763: PPUSH
34764: CALL_OW 428
34768: ST_TO_ADDR
// if not tmp then
34769: LD_VAR 0 4
34773: NOT
34774: IFFALSE 34778
// continue ;
34776: GO 34693
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34778: LD_VAR 0 4
34782: PUSH
34783: LD_INT 81
34785: PUSH
34786: LD_VAR 0 3
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PPUSH
34795: CALL_OW 69
34799: IN
34800: PUSH
34801: LD_EXP 131
34805: PUSH
34806: LD_VAR 0 1
34810: ARRAY
34811: PUSH
34812: LD_VAR 0 2
34816: ARRAY
34817: PUSH
34818: LD_INT 1
34820: ARRAY
34821: PPUSH
34822: LD_EXP 131
34826: PUSH
34827: LD_VAR 0 1
34831: ARRAY
34832: PUSH
34833: LD_VAR 0 2
34837: ARRAY
34838: PUSH
34839: LD_INT 2
34841: ARRAY
34842: PPUSH
34843: CALL_OW 458
34847: AND
34848: IFFALSE 34942
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34850: LD_EXP 131
34854: PUSH
34855: LD_VAR 0 1
34859: ARRAY
34860: PUSH
34861: LD_VAR 0 2
34865: ARRAY
34866: PUSH
34867: LD_INT 1
34869: ARRAY
34870: PPUSH
34871: LD_EXP 131
34875: PUSH
34876: LD_VAR 0 1
34880: ARRAY
34881: PUSH
34882: LD_VAR 0 2
34886: ARRAY
34887: PUSH
34888: LD_INT 2
34890: ARRAY
34891: PPUSH
34892: LD_VAR 0 3
34896: PPUSH
34897: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34901: LD_ADDR_EXP 131
34905: PUSH
34906: LD_EXP 131
34910: PPUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: LD_EXP 131
34920: PUSH
34921: LD_VAR 0 1
34925: ARRAY
34926: PPUSH
34927: LD_VAR 0 2
34931: PPUSH
34932: CALL_OW 3
34936: PPUSH
34937: CALL_OW 1
34941: ST_TO_ADDR
// end ; end ;
34942: GO 34693
34944: POP
34945: POP
// end ;
34946: GO 34611
34948: POP
34949: POP
// end ;
34950: PPOPN 4
34952: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34953: LD_INT 0
34955: PPUSH
34956: PPUSH
// result := false ;
34957: LD_ADDR_VAR 0 4
34961: PUSH
34962: LD_INT 0
34964: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34965: LD_VAR 0 1
34969: PPUSH
34970: CALL_OW 264
34974: PUSH
34975: LD_EXP 55
34979: EQUAL
34980: NOT
34981: IFFALSE 34985
// exit ;
34983: GO 35225
// index := GetElementIndex ( minersList , unit ) ;
34985: LD_ADDR_VAR 0 5
34989: PUSH
34990: LD_EXP 130
34994: PPUSH
34995: LD_VAR 0 1
34999: PPUSH
35000: CALL 41169 0 2
35004: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35005: LD_EXP 131
35009: PUSH
35010: LD_VAR 0 5
35014: ARRAY
35015: PUSH
35016: LD_EXP 132
35020: GREATEREQUAL
35021: IFFALSE 35025
// exit ;
35023: GO 35225
// ComMoveXY ( unit , x , y ) ;
35025: LD_VAR 0 1
35029: PPUSH
35030: LD_VAR 0 2
35034: PPUSH
35035: LD_VAR 0 3
35039: PPUSH
35040: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35044: LD_INT 35
35046: PPUSH
35047: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35051: LD_VAR 0 1
35055: PPUSH
35056: LD_VAR 0 2
35060: PPUSH
35061: LD_VAR 0 3
35065: PPUSH
35066: CALL 71566 0 3
35070: NOT
35071: PUSH
35072: LD_VAR 0 1
35076: PPUSH
35077: CALL_OW 314
35081: AND
35082: IFFALSE 35086
// exit ;
35084: GO 35225
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35086: LD_VAR 0 2
35090: PPUSH
35091: LD_VAR 0 3
35095: PPUSH
35096: CALL_OW 428
35100: PUSH
35101: LD_VAR 0 1
35105: EQUAL
35106: PUSH
35107: LD_VAR 0 1
35111: PPUSH
35112: CALL_OW 314
35116: NOT
35117: AND
35118: IFFALSE 35044
// PlaySoundXY ( x , y , PlantMine ) ;
35120: LD_VAR 0 2
35124: PPUSH
35125: LD_VAR 0 3
35129: PPUSH
35130: LD_STRING PlantMine
35132: PPUSH
35133: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35137: LD_VAR 0 2
35141: PPUSH
35142: LD_VAR 0 3
35146: PPUSH
35147: LD_VAR 0 1
35151: PPUSH
35152: CALL_OW 255
35156: PPUSH
35157: LD_INT 0
35159: PPUSH
35160: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35164: LD_ADDR_EXP 131
35168: PUSH
35169: LD_EXP 131
35173: PPUSH
35174: LD_VAR 0 5
35178: PUSH
35179: LD_EXP 131
35183: PUSH
35184: LD_VAR 0 5
35188: ARRAY
35189: PUSH
35190: LD_INT 1
35192: PLUS
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PPUSH
35198: LD_VAR 0 2
35202: PUSH
35203: LD_VAR 0 3
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PPUSH
35212: CALL 41384 0 3
35216: ST_TO_ADDR
// result := true ;
35217: LD_ADDR_VAR 0 4
35221: PUSH
35222: LD_INT 1
35224: ST_TO_ADDR
// end ;
35225: LD_VAR 0 4
35229: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35230: LD_INT 0
35232: PPUSH
35233: PPUSH
35234: PPUSH
// if not unit in minersList then
35235: LD_VAR 0 1
35239: PUSH
35240: LD_EXP 130
35244: IN
35245: NOT
35246: IFFALSE 35250
// exit ;
35248: GO 35642
// index := GetElementIndex ( minersList , unit ) ;
35250: LD_ADDR_VAR 0 6
35254: PUSH
35255: LD_EXP 130
35259: PPUSH
35260: LD_VAR 0 1
35264: PPUSH
35265: CALL 41169 0 2
35269: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35270: LD_ADDR_VAR 0 5
35274: PUSH
35275: DOUBLE
35276: LD_EXP 131
35280: PUSH
35281: LD_VAR 0 6
35285: ARRAY
35286: INC
35287: ST_TO_ADDR
35288: LD_INT 1
35290: PUSH
35291: FOR_DOWNTO
35292: IFFALSE 35453
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35294: LD_EXP 131
35298: PUSH
35299: LD_VAR 0 6
35303: ARRAY
35304: PUSH
35305: LD_VAR 0 5
35309: ARRAY
35310: PUSH
35311: LD_INT 1
35313: ARRAY
35314: PUSH
35315: LD_VAR 0 2
35319: EQUAL
35320: PUSH
35321: LD_EXP 131
35325: PUSH
35326: LD_VAR 0 6
35330: ARRAY
35331: PUSH
35332: LD_VAR 0 5
35336: ARRAY
35337: PUSH
35338: LD_INT 2
35340: ARRAY
35341: PUSH
35342: LD_VAR 0 3
35346: EQUAL
35347: AND
35348: IFFALSE 35451
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35350: LD_EXP 131
35354: PUSH
35355: LD_VAR 0 6
35359: ARRAY
35360: PUSH
35361: LD_VAR 0 5
35365: ARRAY
35366: PUSH
35367: LD_INT 1
35369: ARRAY
35370: PPUSH
35371: LD_EXP 131
35375: PUSH
35376: LD_VAR 0 6
35380: ARRAY
35381: PUSH
35382: LD_VAR 0 5
35386: ARRAY
35387: PUSH
35388: LD_INT 2
35390: ARRAY
35391: PPUSH
35392: LD_VAR 0 1
35396: PPUSH
35397: CALL_OW 255
35401: PPUSH
35402: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35406: LD_ADDR_EXP 131
35410: PUSH
35411: LD_EXP 131
35415: PPUSH
35416: LD_VAR 0 6
35420: PPUSH
35421: LD_EXP 131
35425: PUSH
35426: LD_VAR 0 6
35430: ARRAY
35431: PPUSH
35432: LD_VAR 0 5
35436: PPUSH
35437: CALL_OW 3
35441: PPUSH
35442: CALL_OW 1
35446: ST_TO_ADDR
// exit ;
35447: POP
35448: POP
35449: GO 35642
// end ; end ;
35451: GO 35291
35453: POP
35454: POP
// for i := minerMinesList [ index ] downto 1 do
35455: LD_ADDR_VAR 0 5
35459: PUSH
35460: DOUBLE
35461: LD_EXP 131
35465: PUSH
35466: LD_VAR 0 6
35470: ARRAY
35471: INC
35472: ST_TO_ADDR
35473: LD_INT 1
35475: PUSH
35476: FOR_DOWNTO
35477: IFFALSE 35640
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35479: LD_EXP 131
35483: PUSH
35484: LD_VAR 0 6
35488: ARRAY
35489: PUSH
35490: LD_VAR 0 5
35494: ARRAY
35495: PUSH
35496: LD_INT 1
35498: ARRAY
35499: PPUSH
35500: LD_EXP 131
35504: PUSH
35505: LD_VAR 0 6
35509: ARRAY
35510: PUSH
35511: LD_VAR 0 5
35515: ARRAY
35516: PUSH
35517: LD_INT 2
35519: ARRAY
35520: PPUSH
35521: LD_VAR 0 2
35525: PPUSH
35526: LD_VAR 0 3
35530: PPUSH
35531: CALL_OW 298
35535: PUSH
35536: LD_INT 6
35538: LESS
35539: IFFALSE 35638
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35541: LD_EXP 131
35545: PUSH
35546: LD_VAR 0 6
35550: ARRAY
35551: PUSH
35552: LD_VAR 0 5
35556: ARRAY
35557: PUSH
35558: LD_INT 1
35560: ARRAY
35561: PPUSH
35562: LD_EXP 131
35566: PUSH
35567: LD_VAR 0 6
35571: ARRAY
35572: PUSH
35573: LD_VAR 0 5
35577: ARRAY
35578: PUSH
35579: LD_INT 2
35581: ARRAY
35582: PPUSH
35583: LD_VAR 0 1
35587: PPUSH
35588: CALL_OW 255
35592: PPUSH
35593: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35597: LD_ADDR_EXP 131
35601: PUSH
35602: LD_EXP 131
35606: PPUSH
35607: LD_VAR 0 6
35611: PPUSH
35612: LD_EXP 131
35616: PUSH
35617: LD_VAR 0 6
35621: ARRAY
35622: PPUSH
35623: LD_VAR 0 5
35627: PPUSH
35628: CALL_OW 3
35632: PPUSH
35633: CALL_OW 1
35637: ST_TO_ADDR
// end ; end ;
35638: GO 35476
35640: POP
35641: POP
// end ;
35642: LD_VAR 0 4
35646: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35647: LD_INT 0
35649: PPUSH
35650: PPUSH
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
35655: PPUSH
35656: PPUSH
35657: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35658: LD_VAR 0 1
35662: PPUSH
35663: CALL_OW 264
35667: PUSH
35668: LD_EXP 55
35672: EQUAL
35673: NOT
35674: PUSH
35675: LD_VAR 0 1
35679: PUSH
35680: LD_EXP 130
35684: IN
35685: NOT
35686: OR
35687: IFFALSE 35691
// exit ;
35689: GO 36013
// index := GetElementIndex ( minersList , unit ) ;
35691: LD_ADDR_VAR 0 6
35695: PUSH
35696: LD_EXP 130
35700: PPUSH
35701: LD_VAR 0 1
35705: PPUSH
35706: CALL 41169 0 2
35710: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35711: LD_ADDR_VAR 0 8
35715: PUSH
35716: LD_EXP 132
35720: PUSH
35721: LD_EXP 131
35725: PUSH
35726: LD_VAR 0 6
35730: ARRAY
35731: MINUS
35732: ST_TO_ADDR
// if not minesFreeAmount then
35733: LD_VAR 0 8
35737: NOT
35738: IFFALSE 35742
// exit ;
35740: GO 36013
// tmp := [ ] ;
35742: LD_ADDR_VAR 0 7
35746: PUSH
35747: EMPTY
35748: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35749: LD_ADDR_VAR 0 5
35753: PUSH
35754: DOUBLE
35755: LD_INT 1
35757: DEC
35758: ST_TO_ADDR
35759: LD_VAR 0 8
35763: PUSH
35764: FOR_TO
35765: IFFALSE 35960
// begin _d := rand ( 0 , 5 ) ;
35767: LD_ADDR_VAR 0 11
35771: PUSH
35772: LD_INT 0
35774: PPUSH
35775: LD_INT 5
35777: PPUSH
35778: CALL_OW 12
35782: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35783: LD_ADDR_VAR 0 12
35787: PUSH
35788: LD_INT 2
35790: PPUSH
35791: LD_INT 6
35793: PPUSH
35794: CALL_OW 12
35798: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35799: LD_ADDR_VAR 0 9
35803: PUSH
35804: LD_VAR 0 2
35808: PPUSH
35809: LD_VAR 0 11
35813: PPUSH
35814: LD_VAR 0 12
35818: PPUSH
35819: CALL_OW 272
35823: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35824: LD_ADDR_VAR 0 10
35828: PUSH
35829: LD_VAR 0 3
35833: PPUSH
35834: LD_VAR 0 11
35838: PPUSH
35839: LD_VAR 0 12
35843: PPUSH
35844: CALL_OW 273
35848: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35849: LD_VAR 0 9
35853: PPUSH
35854: LD_VAR 0 10
35858: PPUSH
35859: CALL_OW 488
35863: PUSH
35864: LD_VAR 0 9
35868: PUSH
35869: LD_VAR 0 10
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_VAR 0 7
35882: IN
35883: NOT
35884: AND
35885: PUSH
35886: LD_VAR 0 9
35890: PPUSH
35891: LD_VAR 0 10
35895: PPUSH
35896: CALL_OW 458
35900: NOT
35901: AND
35902: IFFALSE 35944
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35904: LD_ADDR_VAR 0 7
35908: PUSH
35909: LD_VAR 0 7
35913: PPUSH
35914: LD_VAR 0 7
35918: PUSH
35919: LD_INT 1
35921: PLUS
35922: PPUSH
35923: LD_VAR 0 9
35927: PUSH
35928: LD_VAR 0 10
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PPUSH
35937: CALL_OW 1
35941: ST_TO_ADDR
35942: GO 35958
// i := i - 1 ;
35944: LD_ADDR_VAR 0 5
35948: PUSH
35949: LD_VAR 0 5
35953: PUSH
35954: LD_INT 1
35956: MINUS
35957: ST_TO_ADDR
// end ;
35958: GO 35764
35960: POP
35961: POP
// for i in tmp do
35962: LD_ADDR_VAR 0 5
35966: PUSH
35967: LD_VAR 0 7
35971: PUSH
35972: FOR_IN
35973: IFFALSE 36011
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35975: LD_VAR 0 1
35979: PPUSH
35980: LD_VAR 0 5
35984: PUSH
35985: LD_INT 1
35987: ARRAY
35988: PPUSH
35989: LD_VAR 0 5
35993: PUSH
35994: LD_INT 2
35996: ARRAY
35997: PPUSH
35998: CALL 34953 0 3
36002: NOT
36003: IFFALSE 36009
// exit ;
36005: POP
36006: POP
36007: GO 36013
36009: GO 35972
36011: POP
36012: POP
// end ;
36013: LD_VAR 0 4
36017: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36018: LD_INT 0
36020: PPUSH
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
36025: PPUSH
36026: PPUSH
// if not GetClass ( unit ) = class_sniper then
36027: LD_VAR 0 1
36031: PPUSH
36032: CALL_OW 257
36036: PUSH
36037: LD_INT 5
36039: EQUAL
36040: NOT
36041: IFFALSE 36045
// exit ;
36043: GO 36433
// dist := 8 ;
36045: LD_ADDR_VAR 0 5
36049: PUSH
36050: LD_INT 8
36052: ST_TO_ADDR
// viewRange := 12 ;
36053: LD_ADDR_VAR 0 7
36057: PUSH
36058: LD_INT 12
36060: ST_TO_ADDR
// side := GetSide ( unit ) ;
36061: LD_ADDR_VAR 0 6
36065: PUSH
36066: LD_VAR 0 1
36070: PPUSH
36071: CALL_OW 255
36075: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36076: LD_INT 61
36078: PPUSH
36079: LD_VAR 0 6
36083: PPUSH
36084: CALL_OW 321
36088: PUSH
36089: LD_INT 2
36091: EQUAL
36092: IFFALSE 36102
// viewRange := 16 ;
36094: LD_ADDR_VAR 0 7
36098: PUSH
36099: LD_INT 16
36101: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36102: LD_VAR 0 1
36106: PPUSH
36107: LD_VAR 0 2
36111: PPUSH
36112: LD_VAR 0 3
36116: PPUSH
36117: CALL_OW 297
36121: PUSH
36122: LD_VAR 0 5
36126: GREATER
36127: IFFALSE 36206
// begin ComMoveXY ( unit , x , y ) ;
36129: LD_VAR 0 1
36133: PPUSH
36134: LD_VAR 0 2
36138: PPUSH
36139: LD_VAR 0 3
36143: PPUSH
36144: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36148: LD_INT 35
36150: PPUSH
36151: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36155: LD_VAR 0 1
36159: PPUSH
36160: LD_VAR 0 2
36164: PPUSH
36165: LD_VAR 0 3
36169: PPUSH
36170: CALL 71566 0 3
36174: NOT
36175: IFFALSE 36179
// exit ;
36177: GO 36433
// until GetDistUnitXY ( unit , x , y ) < dist ;
36179: LD_VAR 0 1
36183: PPUSH
36184: LD_VAR 0 2
36188: PPUSH
36189: LD_VAR 0 3
36193: PPUSH
36194: CALL_OW 297
36198: PUSH
36199: LD_VAR 0 5
36203: LESS
36204: IFFALSE 36148
// end ; ComTurnXY ( unit , x , y ) ;
36206: LD_VAR 0 1
36210: PPUSH
36211: LD_VAR 0 2
36215: PPUSH
36216: LD_VAR 0 3
36220: PPUSH
36221: CALL_OW 118
// wait ( 5 ) ;
36225: LD_INT 5
36227: PPUSH
36228: CALL_OW 67
// _d := GetDir ( unit ) ;
36232: LD_ADDR_VAR 0 10
36236: PUSH
36237: LD_VAR 0 1
36241: PPUSH
36242: CALL_OW 254
36246: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36247: LD_ADDR_VAR 0 8
36251: PUSH
36252: LD_VAR 0 1
36256: PPUSH
36257: CALL_OW 250
36261: PPUSH
36262: LD_VAR 0 10
36266: PPUSH
36267: LD_VAR 0 5
36271: PPUSH
36272: CALL_OW 272
36276: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36277: LD_ADDR_VAR 0 9
36281: PUSH
36282: LD_VAR 0 1
36286: PPUSH
36287: CALL_OW 251
36291: PPUSH
36292: LD_VAR 0 10
36296: PPUSH
36297: LD_VAR 0 5
36301: PPUSH
36302: CALL_OW 273
36306: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36307: LD_VAR 0 8
36311: PPUSH
36312: LD_VAR 0 9
36316: PPUSH
36317: CALL_OW 488
36321: NOT
36322: IFFALSE 36326
// exit ;
36324: GO 36433
// ComAnimCustom ( unit , 1 ) ;
36326: LD_VAR 0 1
36330: PPUSH
36331: LD_INT 1
36333: PPUSH
36334: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36338: LD_VAR 0 8
36342: PPUSH
36343: LD_VAR 0 9
36347: PPUSH
36348: LD_VAR 0 6
36352: PPUSH
36353: LD_VAR 0 7
36357: PPUSH
36358: CALL_OW 330
// repeat wait ( 1 ) ;
36362: LD_INT 1
36364: PPUSH
36365: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36369: LD_VAR 0 1
36373: PPUSH
36374: CALL_OW 316
36378: PUSH
36379: LD_VAR 0 1
36383: PPUSH
36384: CALL_OW 314
36388: OR
36389: PUSH
36390: LD_VAR 0 1
36394: PPUSH
36395: CALL_OW 302
36399: NOT
36400: OR
36401: PUSH
36402: LD_VAR 0 1
36406: PPUSH
36407: CALL_OW 301
36411: OR
36412: IFFALSE 36362
// RemoveSeeing ( _x , _y , side ) ;
36414: LD_VAR 0 8
36418: PPUSH
36419: LD_VAR 0 9
36423: PPUSH
36424: LD_VAR 0 6
36428: PPUSH
36429: CALL_OW 331
// end ; end_of_file
36433: LD_VAR 0 4
36437: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36438: LD_INT 0
36440: PPUSH
36441: PPUSH
// if exist_mode then
36442: LD_VAR 0 2
36446: IFFALSE 36471
// unit := CreateCharacter ( prefix & ident ) else
36448: LD_ADDR_VAR 0 5
36452: PUSH
36453: LD_VAR 0 3
36457: PUSH
36458: LD_VAR 0 1
36462: STR
36463: PPUSH
36464: CALL_OW 34
36468: ST_TO_ADDR
36469: GO 36486
// unit := NewCharacter ( ident ) ;
36471: LD_ADDR_VAR 0 5
36475: PUSH
36476: LD_VAR 0 1
36480: PPUSH
36481: CALL_OW 25
36485: ST_TO_ADDR
// result := unit ;
36486: LD_ADDR_VAR 0 4
36490: PUSH
36491: LD_VAR 0 5
36495: ST_TO_ADDR
// end ;
36496: LD_VAR 0 4
36500: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36501: LD_INT 0
36503: PPUSH
36504: PPUSH
// if not side or not nation then
36505: LD_VAR 0 1
36509: NOT
36510: PUSH
36511: LD_VAR 0 2
36515: NOT
36516: OR
36517: IFFALSE 36521
// exit ;
36519: GO 37285
// case nation of nation_american :
36521: LD_VAR 0 2
36525: PUSH
36526: LD_INT 1
36528: DOUBLE
36529: EQUAL
36530: IFTRUE 36534
36532: GO 36748
36534: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36535: LD_ADDR_VAR 0 4
36539: PUSH
36540: LD_INT 35
36542: PUSH
36543: LD_INT 45
36545: PUSH
36546: LD_INT 46
36548: PUSH
36549: LD_INT 47
36551: PUSH
36552: LD_INT 82
36554: PUSH
36555: LD_INT 83
36557: PUSH
36558: LD_INT 84
36560: PUSH
36561: LD_INT 85
36563: PUSH
36564: LD_INT 86
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: LD_INT 6
36575: PUSH
36576: LD_INT 15
36578: PUSH
36579: LD_INT 16
36581: PUSH
36582: LD_INT 7
36584: PUSH
36585: LD_INT 12
36587: PUSH
36588: LD_INT 13
36590: PUSH
36591: LD_INT 10
36593: PUSH
36594: LD_INT 14
36596: PUSH
36597: LD_INT 20
36599: PUSH
36600: LD_INT 21
36602: PUSH
36603: LD_INT 22
36605: PUSH
36606: LD_INT 25
36608: PUSH
36609: LD_INT 32
36611: PUSH
36612: LD_INT 27
36614: PUSH
36615: LD_INT 36
36617: PUSH
36618: LD_INT 69
36620: PUSH
36621: LD_INT 39
36623: PUSH
36624: LD_INT 34
36626: PUSH
36627: LD_INT 40
36629: PUSH
36630: LD_INT 48
36632: PUSH
36633: LD_INT 49
36635: PUSH
36636: LD_INT 50
36638: PUSH
36639: LD_INT 51
36641: PUSH
36642: LD_INT 52
36644: PUSH
36645: LD_INT 53
36647: PUSH
36648: LD_INT 54
36650: PUSH
36651: LD_INT 55
36653: PUSH
36654: LD_INT 56
36656: PUSH
36657: LD_INT 57
36659: PUSH
36660: LD_INT 58
36662: PUSH
36663: LD_INT 59
36665: PUSH
36666: LD_INT 60
36668: PUSH
36669: LD_INT 61
36671: PUSH
36672: LD_INT 62
36674: PUSH
36675: LD_INT 80
36677: PUSH
36678: LD_INT 82
36680: PUSH
36681: LD_INT 83
36683: PUSH
36684: LD_INT 84
36686: PUSH
36687: LD_INT 85
36689: PUSH
36690: LD_INT 86
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: ST_TO_ADDR
36746: GO 37209
36748: LD_INT 2
36750: DOUBLE
36751: EQUAL
36752: IFTRUE 36756
36754: GO 36978
36756: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36757: LD_ADDR_VAR 0 4
36761: PUSH
36762: LD_INT 35
36764: PUSH
36765: LD_INT 45
36767: PUSH
36768: LD_INT 46
36770: PUSH
36771: LD_INT 47
36773: PUSH
36774: LD_INT 82
36776: PUSH
36777: LD_INT 83
36779: PUSH
36780: LD_INT 84
36782: PUSH
36783: LD_INT 85
36785: PUSH
36786: LD_INT 87
36788: PUSH
36789: LD_INT 70
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 11
36797: PUSH
36798: LD_INT 3
36800: PUSH
36801: LD_INT 4
36803: PUSH
36804: LD_INT 5
36806: PUSH
36807: LD_INT 6
36809: PUSH
36810: LD_INT 15
36812: PUSH
36813: LD_INT 18
36815: PUSH
36816: LD_INT 7
36818: PUSH
36819: LD_INT 17
36821: PUSH
36822: LD_INT 8
36824: PUSH
36825: LD_INT 20
36827: PUSH
36828: LD_INT 21
36830: PUSH
36831: LD_INT 22
36833: PUSH
36834: LD_INT 72
36836: PUSH
36837: LD_INT 26
36839: PUSH
36840: LD_INT 69
36842: PUSH
36843: LD_INT 39
36845: PUSH
36846: LD_INT 40
36848: PUSH
36849: LD_INT 41
36851: PUSH
36852: LD_INT 42
36854: PUSH
36855: LD_INT 43
36857: PUSH
36858: LD_INT 48
36860: PUSH
36861: LD_INT 49
36863: PUSH
36864: LD_INT 50
36866: PUSH
36867: LD_INT 51
36869: PUSH
36870: LD_INT 52
36872: PUSH
36873: LD_INT 53
36875: PUSH
36876: LD_INT 54
36878: PUSH
36879: LD_INT 55
36881: PUSH
36882: LD_INT 56
36884: PUSH
36885: LD_INT 60
36887: PUSH
36888: LD_INT 61
36890: PUSH
36891: LD_INT 62
36893: PUSH
36894: LD_INT 66
36896: PUSH
36897: LD_INT 67
36899: PUSH
36900: LD_INT 68
36902: PUSH
36903: LD_INT 81
36905: PUSH
36906: LD_INT 82
36908: PUSH
36909: LD_INT 83
36911: PUSH
36912: LD_INT 84
36914: PUSH
36915: LD_INT 85
36917: PUSH
36918: LD_INT 87
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: ST_TO_ADDR
36976: GO 37209
36978: LD_INT 3
36980: DOUBLE
36981: EQUAL
36982: IFTRUE 36986
36984: GO 37208
36986: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36987: LD_ADDR_VAR 0 4
36991: PUSH
36992: LD_INT 46
36994: PUSH
36995: LD_INT 47
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: LD_INT 82
37006: PUSH
37007: LD_INT 83
37009: PUSH
37010: LD_INT 84
37012: PUSH
37013: LD_INT 85
37015: PUSH
37016: LD_INT 86
37018: PUSH
37019: LD_INT 11
37021: PUSH
37022: LD_INT 9
37024: PUSH
37025: LD_INT 20
37027: PUSH
37028: LD_INT 19
37030: PUSH
37031: LD_INT 21
37033: PUSH
37034: LD_INT 24
37036: PUSH
37037: LD_INT 22
37039: PUSH
37040: LD_INT 25
37042: PUSH
37043: LD_INT 28
37045: PUSH
37046: LD_INT 29
37048: PUSH
37049: LD_INT 30
37051: PUSH
37052: LD_INT 31
37054: PUSH
37055: LD_INT 37
37057: PUSH
37058: LD_INT 38
37060: PUSH
37061: LD_INT 32
37063: PUSH
37064: LD_INT 27
37066: PUSH
37067: LD_INT 33
37069: PUSH
37070: LD_INT 69
37072: PUSH
37073: LD_INT 39
37075: PUSH
37076: LD_INT 34
37078: PUSH
37079: LD_INT 40
37081: PUSH
37082: LD_INT 71
37084: PUSH
37085: LD_INT 23
37087: PUSH
37088: LD_INT 44
37090: PUSH
37091: LD_INT 48
37093: PUSH
37094: LD_INT 49
37096: PUSH
37097: LD_INT 50
37099: PUSH
37100: LD_INT 51
37102: PUSH
37103: LD_INT 52
37105: PUSH
37106: LD_INT 53
37108: PUSH
37109: LD_INT 54
37111: PUSH
37112: LD_INT 55
37114: PUSH
37115: LD_INT 56
37117: PUSH
37118: LD_INT 57
37120: PUSH
37121: LD_INT 58
37123: PUSH
37124: LD_INT 59
37126: PUSH
37127: LD_INT 63
37129: PUSH
37130: LD_INT 64
37132: PUSH
37133: LD_INT 65
37135: PUSH
37136: LD_INT 82
37138: PUSH
37139: LD_INT 83
37141: PUSH
37142: LD_INT 84
37144: PUSH
37145: LD_INT 85
37147: PUSH
37148: LD_INT 86
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: ST_TO_ADDR
37206: GO 37209
37208: POP
// if state > - 1 and state < 3 then
37209: LD_VAR 0 3
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: GREATER
37218: PUSH
37219: LD_VAR 0 3
37223: PUSH
37224: LD_INT 3
37226: LESS
37227: AND
37228: IFFALSE 37285
// for i in result do
37230: LD_ADDR_VAR 0 5
37234: PUSH
37235: LD_VAR 0 4
37239: PUSH
37240: FOR_IN
37241: IFFALSE 37283
// if GetTech ( i , side ) <> state then
37243: LD_VAR 0 5
37247: PPUSH
37248: LD_VAR 0 1
37252: PPUSH
37253: CALL_OW 321
37257: PUSH
37258: LD_VAR 0 3
37262: NONEQUAL
37263: IFFALSE 37281
// result := result diff i ;
37265: LD_ADDR_VAR 0 4
37269: PUSH
37270: LD_VAR 0 4
37274: PUSH
37275: LD_VAR 0 5
37279: DIFF
37280: ST_TO_ADDR
37281: GO 37240
37283: POP
37284: POP
// end ;
37285: LD_VAR 0 4
37289: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37290: LD_INT 0
37292: PPUSH
37293: PPUSH
37294: PPUSH
// result := true ;
37295: LD_ADDR_VAR 0 3
37299: PUSH
37300: LD_INT 1
37302: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37303: LD_ADDR_VAR 0 5
37307: PUSH
37308: LD_VAR 0 2
37312: PPUSH
37313: CALL_OW 480
37317: ST_TO_ADDR
// if not tmp then
37318: LD_VAR 0 5
37322: NOT
37323: IFFALSE 37327
// exit ;
37325: GO 37376
// for i in tmp do
37327: LD_ADDR_VAR 0 4
37331: PUSH
37332: LD_VAR 0 5
37336: PUSH
37337: FOR_IN
37338: IFFALSE 37374
// if GetTech ( i , side ) <> state_researched then
37340: LD_VAR 0 4
37344: PPUSH
37345: LD_VAR 0 1
37349: PPUSH
37350: CALL_OW 321
37354: PUSH
37355: LD_INT 2
37357: NONEQUAL
37358: IFFALSE 37372
// begin result := false ;
37360: LD_ADDR_VAR 0 3
37364: PUSH
37365: LD_INT 0
37367: ST_TO_ADDR
// exit ;
37368: POP
37369: POP
37370: GO 37376
// end ;
37372: GO 37337
37374: POP
37375: POP
// end ;
37376: LD_VAR 0 3
37380: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37381: LD_INT 0
37383: PPUSH
37384: PPUSH
37385: PPUSH
37386: PPUSH
37387: PPUSH
37388: PPUSH
37389: PPUSH
37390: PPUSH
37391: PPUSH
37392: PPUSH
37393: PPUSH
37394: PPUSH
37395: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37396: LD_VAR 0 1
37400: NOT
37401: PUSH
37402: LD_VAR 0 1
37406: PPUSH
37407: CALL_OW 257
37411: PUSH
37412: LD_INT 9
37414: NONEQUAL
37415: OR
37416: IFFALSE 37420
// exit ;
37418: GO 37993
// side := GetSide ( unit ) ;
37420: LD_ADDR_VAR 0 9
37424: PUSH
37425: LD_VAR 0 1
37429: PPUSH
37430: CALL_OW 255
37434: ST_TO_ADDR
// tech_space := tech_spacanom ;
37435: LD_ADDR_VAR 0 12
37439: PUSH
37440: LD_INT 29
37442: ST_TO_ADDR
// tech_time := tech_taurad ;
37443: LD_ADDR_VAR 0 13
37447: PUSH
37448: LD_INT 28
37450: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37451: LD_ADDR_VAR 0 11
37455: PUSH
37456: LD_VAR 0 1
37460: PPUSH
37461: CALL_OW 310
37465: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37466: LD_VAR 0 11
37470: PPUSH
37471: CALL_OW 247
37475: PUSH
37476: LD_INT 2
37478: EQUAL
37479: IFFALSE 37483
// exit ;
37481: GO 37993
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37483: LD_ADDR_VAR 0 8
37487: PUSH
37488: LD_INT 81
37490: PUSH
37491: LD_VAR 0 9
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 3
37502: PUSH
37503: LD_INT 21
37505: PUSH
37506: LD_INT 3
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PPUSH
37521: CALL_OW 69
37525: ST_TO_ADDR
// if not tmp then
37526: LD_VAR 0 8
37530: NOT
37531: IFFALSE 37535
// exit ;
37533: GO 37993
// if in_unit then
37535: LD_VAR 0 11
37539: IFFALSE 37563
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37541: LD_ADDR_VAR 0 10
37545: PUSH
37546: LD_VAR 0 8
37550: PPUSH
37551: LD_VAR 0 11
37555: PPUSH
37556: CALL_OW 74
37560: ST_TO_ADDR
37561: GO 37583
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37563: LD_ADDR_VAR 0 10
37567: PUSH
37568: LD_VAR 0 8
37572: PPUSH
37573: LD_VAR 0 1
37577: PPUSH
37578: CALL_OW 74
37582: ST_TO_ADDR
// if not enemy then
37583: LD_VAR 0 10
37587: NOT
37588: IFFALSE 37592
// exit ;
37590: GO 37993
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37592: LD_VAR 0 11
37596: PUSH
37597: LD_VAR 0 11
37601: PPUSH
37602: LD_VAR 0 10
37606: PPUSH
37607: CALL_OW 296
37611: PUSH
37612: LD_INT 13
37614: GREATER
37615: AND
37616: PUSH
37617: LD_VAR 0 1
37621: PPUSH
37622: LD_VAR 0 10
37626: PPUSH
37627: CALL_OW 296
37631: PUSH
37632: LD_INT 12
37634: GREATER
37635: OR
37636: IFFALSE 37640
// exit ;
37638: GO 37993
// missile := [ 1 ] ;
37640: LD_ADDR_VAR 0 14
37644: PUSH
37645: LD_INT 1
37647: PUSH
37648: EMPTY
37649: LIST
37650: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37651: LD_VAR 0 9
37655: PPUSH
37656: LD_VAR 0 12
37660: PPUSH
37661: CALL_OW 325
37665: IFFALSE 37694
// missile := Insert ( missile , missile + 1 , 2 ) ;
37667: LD_ADDR_VAR 0 14
37671: PUSH
37672: LD_VAR 0 14
37676: PPUSH
37677: LD_VAR 0 14
37681: PUSH
37682: LD_INT 1
37684: PLUS
37685: PPUSH
37686: LD_INT 2
37688: PPUSH
37689: CALL_OW 2
37693: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37694: LD_VAR 0 9
37698: PPUSH
37699: LD_VAR 0 13
37703: PPUSH
37704: CALL_OW 325
37708: PUSH
37709: LD_VAR 0 10
37713: PPUSH
37714: CALL_OW 255
37718: PPUSH
37719: LD_VAR 0 13
37723: PPUSH
37724: CALL_OW 325
37728: NOT
37729: AND
37730: IFFALSE 37759
// missile := Insert ( missile , missile + 1 , 3 ) ;
37732: LD_ADDR_VAR 0 14
37736: PUSH
37737: LD_VAR 0 14
37741: PPUSH
37742: LD_VAR 0 14
37746: PUSH
37747: LD_INT 1
37749: PLUS
37750: PPUSH
37751: LD_INT 3
37753: PPUSH
37754: CALL_OW 2
37758: ST_TO_ADDR
// if missile < 2 then
37759: LD_VAR 0 14
37763: PUSH
37764: LD_INT 2
37766: LESS
37767: IFFALSE 37771
// exit ;
37769: GO 37993
// x := GetX ( enemy ) ;
37771: LD_ADDR_VAR 0 4
37775: PUSH
37776: LD_VAR 0 10
37780: PPUSH
37781: CALL_OW 250
37785: ST_TO_ADDR
// y := GetY ( enemy ) ;
37786: LD_ADDR_VAR 0 5
37790: PUSH
37791: LD_VAR 0 10
37795: PPUSH
37796: CALL_OW 251
37800: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37801: LD_ADDR_VAR 0 6
37805: PUSH
37806: LD_VAR 0 4
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PPUSH
37815: LD_INT 1
37817: PPUSH
37818: CALL_OW 12
37822: PLUS
37823: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37824: LD_ADDR_VAR 0 7
37828: PUSH
37829: LD_VAR 0 5
37833: PUSH
37834: LD_INT 1
37836: NEG
37837: PPUSH
37838: LD_INT 1
37840: PPUSH
37841: CALL_OW 12
37845: PLUS
37846: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37847: LD_VAR 0 6
37851: PPUSH
37852: LD_VAR 0 7
37856: PPUSH
37857: CALL_OW 488
37861: NOT
37862: IFFALSE 37884
// begin _x := x ;
37864: LD_ADDR_VAR 0 6
37868: PUSH
37869: LD_VAR 0 4
37873: ST_TO_ADDR
// _y := y ;
37874: LD_ADDR_VAR 0 7
37878: PUSH
37879: LD_VAR 0 5
37883: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37884: LD_ADDR_VAR 0 3
37888: PUSH
37889: LD_INT 1
37891: PPUSH
37892: LD_VAR 0 14
37896: PPUSH
37897: CALL_OW 12
37901: ST_TO_ADDR
// case i of 1 :
37902: LD_VAR 0 3
37906: PUSH
37907: LD_INT 1
37909: DOUBLE
37910: EQUAL
37911: IFTRUE 37915
37913: GO 37932
37915: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37916: LD_VAR 0 1
37920: PPUSH
37921: LD_VAR 0 10
37925: PPUSH
37926: CALL_OW 115
37930: GO 37993
37932: LD_INT 2
37934: DOUBLE
37935: EQUAL
37936: IFTRUE 37940
37938: GO 37962
37940: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37941: LD_VAR 0 1
37945: PPUSH
37946: LD_VAR 0 6
37950: PPUSH
37951: LD_VAR 0 7
37955: PPUSH
37956: CALL_OW 153
37960: GO 37993
37962: LD_INT 3
37964: DOUBLE
37965: EQUAL
37966: IFTRUE 37970
37968: GO 37992
37970: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37971: LD_VAR 0 1
37975: PPUSH
37976: LD_VAR 0 6
37980: PPUSH
37981: LD_VAR 0 7
37985: PPUSH
37986: CALL_OW 154
37990: GO 37993
37992: POP
// end ;
37993: LD_VAR 0 2
37997: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37998: LD_INT 0
38000: PPUSH
38001: PPUSH
38002: PPUSH
38003: PPUSH
38004: PPUSH
38005: PPUSH
// if not unit or not building then
38006: LD_VAR 0 1
38010: NOT
38011: PUSH
38012: LD_VAR 0 2
38016: NOT
38017: OR
38018: IFFALSE 38022
// exit ;
38020: GO 38180
// x := GetX ( building ) ;
38022: LD_ADDR_VAR 0 5
38026: PUSH
38027: LD_VAR 0 2
38031: PPUSH
38032: CALL_OW 250
38036: ST_TO_ADDR
// y := GetY ( building ) ;
38037: LD_ADDR_VAR 0 6
38041: PUSH
38042: LD_VAR 0 2
38046: PPUSH
38047: CALL_OW 251
38051: ST_TO_ADDR
// for i = 0 to 5 do
38052: LD_ADDR_VAR 0 4
38056: PUSH
38057: DOUBLE
38058: LD_INT 0
38060: DEC
38061: ST_TO_ADDR
38062: LD_INT 5
38064: PUSH
38065: FOR_TO
38066: IFFALSE 38178
// begin _x := ShiftX ( x , i , 3 ) ;
38068: LD_ADDR_VAR 0 7
38072: PUSH
38073: LD_VAR 0 5
38077: PPUSH
38078: LD_VAR 0 4
38082: PPUSH
38083: LD_INT 3
38085: PPUSH
38086: CALL_OW 272
38090: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38091: LD_ADDR_VAR 0 8
38095: PUSH
38096: LD_VAR 0 6
38100: PPUSH
38101: LD_VAR 0 4
38105: PPUSH
38106: LD_INT 3
38108: PPUSH
38109: CALL_OW 273
38113: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38114: LD_VAR 0 7
38118: PPUSH
38119: LD_VAR 0 8
38123: PPUSH
38124: CALL_OW 488
38128: NOT
38129: IFFALSE 38133
// continue ;
38131: GO 38065
// if HexInfo ( _x , _y ) = 0 then
38133: LD_VAR 0 7
38137: PPUSH
38138: LD_VAR 0 8
38142: PPUSH
38143: CALL_OW 428
38147: PUSH
38148: LD_INT 0
38150: EQUAL
38151: IFFALSE 38176
// begin ComMoveXY ( unit , _x , _y ) ;
38153: LD_VAR 0 1
38157: PPUSH
38158: LD_VAR 0 7
38162: PPUSH
38163: LD_VAR 0 8
38167: PPUSH
38168: CALL_OW 111
// exit ;
38172: POP
38173: POP
38174: GO 38180
// end ; end ;
38176: GO 38065
38178: POP
38179: POP
// end ;
38180: LD_VAR 0 3
38184: RET
// export function ScanBase ( side , base_area ) ; begin
38185: LD_INT 0
38187: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38188: LD_ADDR_VAR 0 3
38192: PUSH
38193: LD_VAR 0 2
38197: PPUSH
38198: LD_INT 81
38200: PUSH
38201: LD_VAR 0 1
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PPUSH
38210: CALL_OW 70
38214: ST_TO_ADDR
// end ;
38215: LD_VAR 0 3
38219: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38220: LD_INT 0
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
// result := false ;
38226: LD_ADDR_VAR 0 2
38230: PUSH
38231: LD_INT 0
38233: ST_TO_ADDR
// side := GetSide ( unit ) ;
38234: LD_ADDR_VAR 0 3
38238: PUSH
38239: LD_VAR 0 1
38243: PPUSH
38244: CALL_OW 255
38248: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38249: LD_ADDR_VAR 0 4
38253: PUSH
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 248
38263: ST_TO_ADDR
// case nat of 1 :
38264: LD_VAR 0 4
38268: PUSH
38269: LD_INT 1
38271: DOUBLE
38272: EQUAL
38273: IFTRUE 38277
38275: GO 38288
38277: POP
// tech := tech_lassight ; 2 :
38278: LD_ADDR_VAR 0 5
38282: PUSH
38283: LD_INT 12
38285: ST_TO_ADDR
38286: GO 38327
38288: LD_INT 2
38290: DOUBLE
38291: EQUAL
38292: IFTRUE 38296
38294: GO 38307
38296: POP
// tech := tech_mortar ; 3 :
38297: LD_ADDR_VAR 0 5
38301: PUSH
38302: LD_INT 41
38304: ST_TO_ADDR
38305: GO 38327
38307: LD_INT 3
38309: DOUBLE
38310: EQUAL
38311: IFTRUE 38315
38313: GO 38326
38315: POP
// tech := tech_bazooka ; end ;
38316: LD_ADDR_VAR 0 5
38320: PUSH
38321: LD_INT 44
38323: ST_TO_ADDR
38324: GO 38327
38326: POP
// if Researched ( side , tech ) then
38327: LD_VAR 0 3
38331: PPUSH
38332: LD_VAR 0 5
38336: PPUSH
38337: CALL_OW 325
38341: IFFALSE 38368
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38343: LD_ADDR_VAR 0 2
38347: PUSH
38348: LD_INT 5
38350: PUSH
38351: LD_INT 8
38353: PUSH
38354: LD_INT 9
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: PUSH
38362: LD_VAR 0 4
38366: ARRAY
38367: ST_TO_ADDR
// end ;
38368: LD_VAR 0 2
38372: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38373: LD_INT 0
38375: PPUSH
38376: PPUSH
38377: PPUSH
// if not mines then
38378: LD_VAR 0 2
38382: NOT
38383: IFFALSE 38387
// exit ;
38385: GO 38531
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38387: LD_ADDR_VAR 0 5
38391: PUSH
38392: LD_INT 81
38394: PUSH
38395: LD_VAR 0 1
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 3
38406: PUSH
38407: LD_INT 21
38409: PUSH
38410: LD_INT 3
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PPUSH
38425: CALL_OW 69
38429: ST_TO_ADDR
// for i in mines do
38430: LD_ADDR_VAR 0 4
38434: PUSH
38435: LD_VAR 0 2
38439: PUSH
38440: FOR_IN
38441: IFFALSE 38529
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38443: LD_VAR 0 4
38447: PUSH
38448: LD_INT 1
38450: ARRAY
38451: PPUSH
38452: LD_VAR 0 4
38456: PUSH
38457: LD_INT 2
38459: ARRAY
38460: PPUSH
38461: CALL_OW 458
38465: NOT
38466: IFFALSE 38470
// continue ;
38468: GO 38440
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38470: LD_VAR 0 4
38474: PUSH
38475: LD_INT 1
38477: ARRAY
38478: PPUSH
38479: LD_VAR 0 4
38483: PUSH
38484: LD_INT 2
38486: ARRAY
38487: PPUSH
38488: CALL_OW 428
38492: PUSH
38493: LD_VAR 0 5
38497: IN
38498: IFFALSE 38527
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38500: LD_VAR 0 4
38504: PUSH
38505: LD_INT 1
38507: ARRAY
38508: PPUSH
38509: LD_VAR 0 4
38513: PUSH
38514: LD_INT 2
38516: ARRAY
38517: PPUSH
38518: LD_VAR 0 1
38522: PPUSH
38523: CALL_OW 456
// end ;
38527: GO 38440
38529: POP
38530: POP
// end ;
38531: LD_VAR 0 3
38535: RET
// export function Count ( array ) ; var i ; begin
38536: LD_INT 0
38538: PPUSH
38539: PPUSH
// result := 0 ;
38540: LD_ADDR_VAR 0 2
38544: PUSH
38545: LD_INT 0
38547: ST_TO_ADDR
// for i in array do
38548: LD_ADDR_VAR 0 3
38552: PUSH
38553: LD_VAR 0 1
38557: PUSH
38558: FOR_IN
38559: IFFALSE 38583
// if i then
38561: LD_VAR 0 3
38565: IFFALSE 38581
// result := result + 1 ;
38567: LD_ADDR_VAR 0 2
38571: PUSH
38572: LD_VAR 0 2
38576: PUSH
38577: LD_INT 1
38579: PLUS
38580: ST_TO_ADDR
38581: GO 38558
38583: POP
38584: POP
// end ;
38585: LD_VAR 0 2
38589: RET
// export function IsEmpty ( building ) ; begin
38590: LD_INT 0
38592: PPUSH
// if not building then
38593: LD_VAR 0 1
38597: NOT
38598: IFFALSE 38602
// exit ;
38600: GO 38645
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38602: LD_ADDR_VAR 0 2
38606: PUSH
38607: LD_VAR 0 1
38611: PUSH
38612: LD_INT 22
38614: PUSH
38615: LD_VAR 0 1
38619: PPUSH
38620: CALL_OW 255
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 58
38631: PUSH
38632: EMPTY
38633: LIST
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PPUSH
38639: CALL_OW 69
38643: IN
38644: ST_TO_ADDR
// end ;
38645: LD_VAR 0 2
38649: RET
// export function IsNotFull ( building ) ; begin
38650: LD_INT 0
38652: PPUSH
// if not building then
38653: LD_VAR 0 1
38657: NOT
38658: IFFALSE 38662
// exit ;
38660: GO 38681
// result := UnitsInside ( building ) < 6 ;
38662: LD_ADDR_VAR 0 2
38666: PUSH
38667: LD_VAR 0 1
38671: PPUSH
38672: CALL_OW 313
38676: PUSH
38677: LD_INT 6
38679: LESS
38680: ST_TO_ADDR
// end ;
38681: LD_VAR 0 2
38685: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38686: LD_INT 0
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
// tmp := [ ] ;
38692: LD_ADDR_VAR 0 3
38696: PUSH
38697: EMPTY
38698: ST_TO_ADDR
// list := [ ] ;
38699: LD_ADDR_VAR 0 5
38703: PUSH
38704: EMPTY
38705: ST_TO_ADDR
// for i = 16 to 25 do
38706: LD_ADDR_VAR 0 4
38710: PUSH
38711: DOUBLE
38712: LD_INT 16
38714: DEC
38715: ST_TO_ADDR
38716: LD_INT 25
38718: PUSH
38719: FOR_TO
38720: IFFALSE 38793
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38722: LD_ADDR_VAR 0 3
38726: PUSH
38727: LD_VAR 0 3
38731: PUSH
38732: LD_INT 22
38734: PUSH
38735: LD_VAR 0 1
38739: PPUSH
38740: CALL_OW 255
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 91
38751: PUSH
38752: LD_VAR 0 1
38756: PUSH
38757: LD_INT 6
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 30
38767: PUSH
38768: LD_VAR 0 4
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: PPUSH
38785: CALL_OW 69
38789: ADD
38790: ST_TO_ADDR
38791: GO 38719
38793: POP
38794: POP
// for i = 1 to tmp do
38795: LD_ADDR_VAR 0 4
38799: PUSH
38800: DOUBLE
38801: LD_INT 1
38803: DEC
38804: ST_TO_ADDR
38805: LD_VAR 0 3
38809: PUSH
38810: FOR_TO
38811: IFFALSE 38899
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38813: LD_ADDR_VAR 0 5
38817: PUSH
38818: LD_VAR 0 5
38822: PUSH
38823: LD_VAR 0 3
38827: PUSH
38828: LD_VAR 0 4
38832: ARRAY
38833: PPUSH
38834: CALL_OW 266
38838: PUSH
38839: LD_VAR 0 3
38843: PUSH
38844: LD_VAR 0 4
38848: ARRAY
38849: PPUSH
38850: CALL_OW 250
38854: PUSH
38855: LD_VAR 0 3
38859: PUSH
38860: LD_VAR 0 4
38864: ARRAY
38865: PPUSH
38866: CALL_OW 251
38870: PUSH
38871: LD_VAR 0 3
38875: PUSH
38876: LD_VAR 0 4
38880: ARRAY
38881: PPUSH
38882: CALL_OW 254
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: PUSH
38893: EMPTY
38894: LIST
38895: ADD
38896: ST_TO_ADDR
38897: GO 38810
38899: POP
38900: POP
// result := list ;
38901: LD_ADDR_VAR 0 2
38905: PUSH
38906: LD_VAR 0 5
38910: ST_TO_ADDR
// end ;
38911: LD_VAR 0 2
38915: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38916: LD_INT 0
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
38924: PPUSH
// if not factory then
38925: LD_VAR 0 1
38929: NOT
38930: IFFALSE 38934
// exit ;
38932: GO 39527
// if control = control_apeman then
38934: LD_VAR 0 4
38938: PUSH
38939: LD_INT 5
38941: EQUAL
38942: IFFALSE 39051
// begin tmp := UnitsInside ( factory ) ;
38944: LD_ADDR_VAR 0 8
38948: PUSH
38949: LD_VAR 0 1
38953: PPUSH
38954: CALL_OW 313
38958: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38959: LD_VAR 0 8
38963: PPUSH
38964: LD_INT 25
38966: PUSH
38967: LD_INT 12
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PPUSH
38974: CALL_OW 72
38978: NOT
38979: IFFALSE 38989
// control := control_manual ;
38981: LD_ADDR_VAR 0 4
38985: PUSH
38986: LD_INT 1
38988: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38989: LD_ADDR_VAR 0 8
38993: PUSH
38994: LD_VAR 0 1
38998: PPUSH
38999: CALL 38686 0 1
39003: ST_TO_ADDR
// if tmp then
39004: LD_VAR 0 8
39008: IFFALSE 39051
// begin for i in tmp do
39010: LD_ADDR_VAR 0 7
39014: PUSH
39015: LD_VAR 0 8
39019: PUSH
39020: FOR_IN
39021: IFFALSE 39049
// if i [ 1 ] = b_ext_radio then
39023: LD_VAR 0 7
39027: PUSH
39028: LD_INT 1
39030: ARRAY
39031: PUSH
39032: LD_INT 22
39034: EQUAL
39035: IFFALSE 39047
// begin control := control_remote ;
39037: LD_ADDR_VAR 0 4
39041: PUSH
39042: LD_INT 2
39044: ST_TO_ADDR
// break ;
39045: GO 39049
// end ;
39047: GO 39020
39049: POP
39050: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39051: LD_VAR 0 1
39055: PPUSH
39056: LD_VAR 0 2
39060: PPUSH
39061: LD_VAR 0 3
39065: PPUSH
39066: LD_VAR 0 4
39070: PPUSH
39071: LD_VAR 0 5
39075: PPUSH
39076: CALL_OW 448
39080: IFFALSE 39115
// begin result := [ chassis , engine , control , weapon ] ;
39082: LD_ADDR_VAR 0 6
39086: PUSH
39087: LD_VAR 0 2
39091: PUSH
39092: LD_VAR 0 3
39096: PUSH
39097: LD_VAR 0 4
39101: PUSH
39102: LD_VAR 0 5
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: ST_TO_ADDR
// exit ;
39113: GO 39527
// end ; _chassis := AvailableChassisList ( factory ) ;
39115: LD_ADDR_VAR 0 9
39119: PUSH
39120: LD_VAR 0 1
39124: PPUSH
39125: CALL_OW 475
39129: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39130: LD_ADDR_VAR 0 11
39134: PUSH
39135: LD_VAR 0 1
39139: PPUSH
39140: CALL_OW 476
39144: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39145: LD_ADDR_VAR 0 12
39149: PUSH
39150: LD_VAR 0 1
39154: PPUSH
39155: CALL_OW 477
39159: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39160: LD_ADDR_VAR 0 10
39164: PUSH
39165: LD_VAR 0 1
39169: PPUSH
39170: CALL_OW 478
39174: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39175: LD_VAR 0 9
39179: NOT
39180: PUSH
39181: LD_VAR 0 11
39185: NOT
39186: OR
39187: PUSH
39188: LD_VAR 0 12
39192: NOT
39193: OR
39194: PUSH
39195: LD_VAR 0 10
39199: NOT
39200: OR
39201: IFFALSE 39236
// begin result := [ chassis , engine , control , weapon ] ;
39203: LD_ADDR_VAR 0 6
39207: PUSH
39208: LD_VAR 0 2
39212: PUSH
39213: LD_VAR 0 3
39217: PUSH
39218: LD_VAR 0 4
39222: PUSH
39223: LD_VAR 0 5
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: ST_TO_ADDR
// exit ;
39234: GO 39527
// end ; if not chassis in _chassis then
39236: LD_VAR 0 2
39240: PUSH
39241: LD_VAR 0 9
39245: IN
39246: NOT
39247: IFFALSE 39273
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39249: LD_ADDR_VAR 0 2
39253: PUSH
39254: LD_VAR 0 9
39258: PUSH
39259: LD_INT 1
39261: PPUSH
39262: LD_VAR 0 9
39266: PPUSH
39267: CALL_OW 12
39271: ARRAY
39272: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39273: LD_VAR 0 2
39277: PPUSH
39278: LD_VAR 0 3
39282: PPUSH
39283: CALL 39532 0 2
39287: NOT
39288: IFFALSE 39347
// repeat engine := _engine [ 1 ] ;
39290: LD_ADDR_VAR 0 3
39294: PUSH
39295: LD_VAR 0 11
39299: PUSH
39300: LD_INT 1
39302: ARRAY
39303: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39304: LD_ADDR_VAR 0 11
39308: PUSH
39309: LD_VAR 0 11
39313: PPUSH
39314: LD_INT 1
39316: PPUSH
39317: CALL_OW 3
39321: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39322: LD_VAR 0 2
39326: PPUSH
39327: LD_VAR 0 3
39331: PPUSH
39332: CALL 39532 0 2
39336: PUSH
39337: LD_VAR 0 11
39341: PUSH
39342: EMPTY
39343: EQUAL
39344: OR
39345: IFFALSE 39290
// if not control in _control then
39347: LD_VAR 0 4
39351: PUSH
39352: LD_VAR 0 12
39356: IN
39357: NOT
39358: IFFALSE 39384
// control := _control [ rand ( 1 , _control ) ] ;
39360: LD_ADDR_VAR 0 4
39364: PUSH
39365: LD_VAR 0 12
39369: PUSH
39370: LD_INT 1
39372: PPUSH
39373: LD_VAR 0 12
39377: PPUSH
39378: CALL_OW 12
39382: ARRAY
39383: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39384: LD_VAR 0 2
39388: PPUSH
39389: LD_VAR 0 5
39393: PPUSH
39394: CALL 39752 0 2
39398: NOT
39399: IFFALSE 39458
// repeat weapon := _weapon [ 1 ] ;
39401: LD_ADDR_VAR 0 5
39405: PUSH
39406: LD_VAR 0 10
39410: PUSH
39411: LD_INT 1
39413: ARRAY
39414: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39415: LD_ADDR_VAR 0 10
39419: PUSH
39420: LD_VAR 0 10
39424: PPUSH
39425: LD_INT 1
39427: PPUSH
39428: CALL_OW 3
39432: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39433: LD_VAR 0 2
39437: PPUSH
39438: LD_VAR 0 5
39442: PPUSH
39443: CALL 39752 0 2
39447: PUSH
39448: LD_VAR 0 10
39452: PUSH
39453: EMPTY
39454: EQUAL
39455: OR
39456: IFFALSE 39401
// result := [ ] ;
39458: LD_ADDR_VAR 0 6
39462: PUSH
39463: EMPTY
39464: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39465: LD_VAR 0 1
39469: PPUSH
39470: LD_VAR 0 2
39474: PPUSH
39475: LD_VAR 0 3
39479: PPUSH
39480: LD_VAR 0 4
39484: PPUSH
39485: LD_VAR 0 5
39489: PPUSH
39490: CALL_OW 448
39494: IFFALSE 39527
// result := [ chassis , engine , control , weapon ] ;
39496: LD_ADDR_VAR 0 6
39500: PUSH
39501: LD_VAR 0 2
39505: PUSH
39506: LD_VAR 0 3
39510: PUSH
39511: LD_VAR 0 4
39515: PUSH
39516: LD_VAR 0 5
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: ST_TO_ADDR
// end ;
39527: LD_VAR 0 6
39531: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39532: LD_INT 0
39534: PPUSH
// if not chassis or not engine then
39535: LD_VAR 0 1
39539: NOT
39540: PUSH
39541: LD_VAR 0 2
39545: NOT
39546: OR
39547: IFFALSE 39551
// exit ;
39549: GO 39747
// case engine of engine_solar :
39551: LD_VAR 0 2
39555: PUSH
39556: LD_INT 2
39558: DOUBLE
39559: EQUAL
39560: IFTRUE 39564
39562: GO 39602
39564: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39565: LD_ADDR_VAR 0 3
39569: PUSH
39570: LD_INT 11
39572: PUSH
39573: LD_INT 12
39575: PUSH
39576: LD_INT 13
39578: PUSH
39579: LD_INT 14
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: LD_INT 2
39587: PUSH
39588: LD_INT 3
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: ST_TO_ADDR
39600: GO 39731
39602: LD_INT 1
39604: DOUBLE
39605: EQUAL
39606: IFTRUE 39610
39608: GO 39672
39610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39611: LD_ADDR_VAR 0 3
39615: PUSH
39616: LD_INT 11
39618: PUSH
39619: LD_INT 12
39621: PUSH
39622: LD_INT 13
39624: PUSH
39625: LD_INT 14
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: LD_INT 3
39636: PUSH
39637: LD_INT 4
39639: PUSH
39640: LD_INT 5
39642: PUSH
39643: LD_INT 21
39645: PUSH
39646: LD_INT 23
39648: PUSH
39649: LD_INT 22
39651: PUSH
39652: LD_INT 24
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: ST_TO_ADDR
39670: GO 39731
39672: LD_INT 3
39674: DOUBLE
39675: EQUAL
39676: IFTRUE 39680
39678: GO 39730
39680: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39681: LD_ADDR_VAR 0 3
39685: PUSH
39686: LD_INT 13
39688: PUSH
39689: LD_INT 14
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 3
39697: PUSH
39698: LD_INT 4
39700: PUSH
39701: LD_INT 5
39703: PUSH
39704: LD_INT 21
39706: PUSH
39707: LD_INT 22
39709: PUSH
39710: LD_INT 23
39712: PUSH
39713: LD_INT 24
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: ST_TO_ADDR
39728: GO 39731
39730: POP
// result := ( chassis in result ) ;
39731: LD_ADDR_VAR 0 3
39735: PUSH
39736: LD_VAR 0 1
39740: PUSH
39741: LD_VAR 0 3
39745: IN
39746: ST_TO_ADDR
// end ;
39747: LD_VAR 0 3
39751: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39752: LD_INT 0
39754: PPUSH
// if not chassis or not weapon then
39755: LD_VAR 0 1
39759: NOT
39760: PUSH
39761: LD_VAR 0 2
39765: NOT
39766: OR
39767: IFFALSE 39771
// exit ;
39769: GO 40797
// case weapon of us_machine_gun :
39771: LD_VAR 0 2
39775: PUSH
39776: LD_INT 2
39778: DOUBLE
39779: EQUAL
39780: IFTRUE 39784
39782: GO 39814
39784: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39785: LD_ADDR_VAR 0 3
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: LD_INT 2
39795: PUSH
39796: LD_INT 3
39798: PUSH
39799: LD_INT 4
39801: PUSH
39802: LD_INT 5
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: ST_TO_ADDR
39812: GO 40781
39814: LD_INT 3
39816: DOUBLE
39817: EQUAL
39818: IFTRUE 39822
39820: GO 39852
39822: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39823: LD_ADDR_VAR 0 3
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: LD_INT 2
39833: PUSH
39834: LD_INT 3
39836: PUSH
39837: LD_INT 4
39839: PUSH
39840: LD_INT 5
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: ST_TO_ADDR
39850: GO 40781
39852: LD_INT 11
39854: DOUBLE
39855: EQUAL
39856: IFTRUE 39860
39858: GO 39890
39860: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39861: LD_ADDR_VAR 0 3
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: LD_INT 2
39871: PUSH
39872: LD_INT 3
39874: PUSH
39875: LD_INT 4
39877: PUSH
39878: LD_INT 5
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: ST_TO_ADDR
39888: GO 40781
39890: LD_INT 4
39892: DOUBLE
39893: EQUAL
39894: IFTRUE 39898
39896: GO 39924
39898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39899: LD_ADDR_VAR 0 3
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: LD_INT 3
39909: PUSH
39910: LD_INT 4
39912: PUSH
39913: LD_INT 5
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: ST_TO_ADDR
39922: GO 40781
39924: LD_INT 5
39926: DOUBLE
39927: EQUAL
39928: IFTRUE 39932
39930: GO 39958
39932: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39933: LD_ADDR_VAR 0 3
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: LD_INT 3
39943: PUSH
39944: LD_INT 4
39946: PUSH
39947: LD_INT 5
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: ST_TO_ADDR
39956: GO 40781
39958: LD_INT 9
39960: DOUBLE
39961: EQUAL
39962: IFTRUE 39966
39964: GO 39992
39966: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39967: LD_ADDR_VAR 0 3
39971: PUSH
39972: LD_INT 2
39974: PUSH
39975: LD_INT 3
39977: PUSH
39978: LD_INT 4
39980: PUSH
39981: LD_INT 5
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: ST_TO_ADDR
39990: GO 40781
39992: LD_INT 7
39994: DOUBLE
39995: EQUAL
39996: IFTRUE 40000
39998: GO 40026
40000: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40001: LD_ADDR_VAR 0 3
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: LD_INT 3
40011: PUSH
40012: LD_INT 4
40014: PUSH
40015: LD_INT 5
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: ST_TO_ADDR
40024: GO 40781
40026: LD_INT 12
40028: DOUBLE
40029: EQUAL
40030: IFTRUE 40034
40032: GO 40060
40034: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40035: LD_ADDR_VAR 0 3
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: LD_INT 3
40045: PUSH
40046: LD_INT 4
40048: PUSH
40049: LD_INT 5
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: ST_TO_ADDR
40058: GO 40781
40060: LD_INT 13
40062: DOUBLE
40063: EQUAL
40064: IFTRUE 40068
40066: GO 40094
40068: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40069: LD_ADDR_VAR 0 3
40073: PUSH
40074: LD_INT 2
40076: PUSH
40077: LD_INT 3
40079: PUSH
40080: LD_INT 4
40082: PUSH
40083: LD_INT 5
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: ST_TO_ADDR
40092: GO 40781
40094: LD_INT 14
40096: DOUBLE
40097: EQUAL
40098: IFTRUE 40102
40100: GO 40120
40102: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40103: LD_ADDR_VAR 0 3
40107: PUSH
40108: LD_INT 4
40110: PUSH
40111: LD_INT 5
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: ST_TO_ADDR
40118: GO 40781
40120: LD_INT 6
40122: DOUBLE
40123: EQUAL
40124: IFTRUE 40128
40126: GO 40146
40128: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40129: LD_ADDR_VAR 0 3
40133: PUSH
40134: LD_INT 4
40136: PUSH
40137: LD_INT 5
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: ST_TO_ADDR
40144: GO 40781
40146: LD_INT 10
40148: DOUBLE
40149: EQUAL
40150: IFTRUE 40154
40152: GO 40172
40154: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40155: LD_ADDR_VAR 0 3
40159: PUSH
40160: LD_INT 4
40162: PUSH
40163: LD_INT 5
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: ST_TO_ADDR
40170: GO 40781
40172: LD_INT 22
40174: DOUBLE
40175: EQUAL
40176: IFTRUE 40180
40178: GO 40206
40180: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40181: LD_ADDR_VAR 0 3
40185: PUSH
40186: LD_INT 11
40188: PUSH
40189: LD_INT 12
40191: PUSH
40192: LD_INT 13
40194: PUSH
40195: LD_INT 14
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: ST_TO_ADDR
40204: GO 40781
40206: LD_INT 23
40208: DOUBLE
40209: EQUAL
40210: IFTRUE 40214
40212: GO 40240
40214: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40215: LD_ADDR_VAR 0 3
40219: PUSH
40220: LD_INT 11
40222: PUSH
40223: LD_INT 12
40225: PUSH
40226: LD_INT 13
40228: PUSH
40229: LD_INT 14
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: ST_TO_ADDR
40238: GO 40781
40240: LD_INT 24
40242: DOUBLE
40243: EQUAL
40244: IFTRUE 40248
40246: GO 40274
40248: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40249: LD_ADDR_VAR 0 3
40253: PUSH
40254: LD_INT 11
40256: PUSH
40257: LD_INT 12
40259: PUSH
40260: LD_INT 13
40262: PUSH
40263: LD_INT 14
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: ST_TO_ADDR
40272: GO 40781
40274: LD_INT 30
40276: DOUBLE
40277: EQUAL
40278: IFTRUE 40282
40280: GO 40308
40282: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40283: LD_ADDR_VAR 0 3
40287: PUSH
40288: LD_INT 11
40290: PUSH
40291: LD_INT 12
40293: PUSH
40294: LD_INT 13
40296: PUSH
40297: LD_INT 14
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: ST_TO_ADDR
40306: GO 40781
40308: LD_INT 25
40310: DOUBLE
40311: EQUAL
40312: IFTRUE 40316
40314: GO 40334
40316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40317: LD_ADDR_VAR 0 3
40321: PUSH
40322: LD_INT 13
40324: PUSH
40325: LD_INT 14
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: ST_TO_ADDR
40332: GO 40781
40334: LD_INT 27
40336: DOUBLE
40337: EQUAL
40338: IFTRUE 40342
40340: GO 40360
40342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40343: LD_ADDR_VAR 0 3
40347: PUSH
40348: LD_INT 13
40350: PUSH
40351: LD_INT 14
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: ST_TO_ADDR
40358: GO 40781
40360: LD_INT 28
40362: DOUBLE
40363: EQUAL
40364: IFTRUE 40368
40366: GO 40386
40368: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40369: LD_ADDR_VAR 0 3
40373: PUSH
40374: LD_INT 13
40376: PUSH
40377: LD_INT 14
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: ST_TO_ADDR
40384: GO 40781
40386: LD_INT 29
40388: DOUBLE
40389: EQUAL
40390: IFTRUE 40394
40392: GO 40412
40394: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40395: LD_ADDR_VAR 0 3
40399: PUSH
40400: LD_INT 13
40402: PUSH
40403: LD_INT 14
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: ST_TO_ADDR
40410: GO 40781
40412: LD_INT 31
40414: DOUBLE
40415: EQUAL
40416: IFTRUE 40420
40418: GO 40438
40420: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40421: LD_ADDR_VAR 0 3
40425: PUSH
40426: LD_INT 13
40428: PUSH
40429: LD_INT 14
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: ST_TO_ADDR
40436: GO 40781
40438: LD_INT 26
40440: DOUBLE
40441: EQUAL
40442: IFTRUE 40446
40444: GO 40464
40446: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40447: LD_ADDR_VAR 0 3
40451: PUSH
40452: LD_INT 13
40454: PUSH
40455: LD_INT 14
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: ST_TO_ADDR
40462: GO 40781
40464: LD_INT 42
40466: DOUBLE
40467: EQUAL
40468: IFTRUE 40472
40470: GO 40498
40472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40473: LD_ADDR_VAR 0 3
40477: PUSH
40478: LD_INT 21
40480: PUSH
40481: LD_INT 22
40483: PUSH
40484: LD_INT 23
40486: PUSH
40487: LD_INT 24
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: ST_TO_ADDR
40496: GO 40781
40498: LD_INT 43
40500: DOUBLE
40501: EQUAL
40502: IFTRUE 40506
40504: GO 40532
40506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40507: LD_ADDR_VAR 0 3
40511: PUSH
40512: LD_INT 21
40514: PUSH
40515: LD_INT 22
40517: PUSH
40518: LD_INT 23
40520: PUSH
40521: LD_INT 24
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: ST_TO_ADDR
40530: GO 40781
40532: LD_INT 44
40534: DOUBLE
40535: EQUAL
40536: IFTRUE 40540
40538: GO 40566
40540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40541: LD_ADDR_VAR 0 3
40545: PUSH
40546: LD_INT 21
40548: PUSH
40549: LD_INT 22
40551: PUSH
40552: LD_INT 23
40554: PUSH
40555: LD_INT 24
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: ST_TO_ADDR
40564: GO 40781
40566: LD_INT 45
40568: DOUBLE
40569: EQUAL
40570: IFTRUE 40574
40572: GO 40600
40574: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40575: LD_ADDR_VAR 0 3
40579: PUSH
40580: LD_INT 21
40582: PUSH
40583: LD_INT 22
40585: PUSH
40586: LD_INT 23
40588: PUSH
40589: LD_INT 24
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: ST_TO_ADDR
40598: GO 40781
40600: LD_INT 49
40602: DOUBLE
40603: EQUAL
40604: IFTRUE 40608
40606: GO 40634
40608: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40609: LD_ADDR_VAR 0 3
40613: PUSH
40614: LD_INT 21
40616: PUSH
40617: LD_INT 22
40619: PUSH
40620: LD_INT 23
40622: PUSH
40623: LD_INT 24
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: ST_TO_ADDR
40632: GO 40781
40634: LD_INT 51
40636: DOUBLE
40637: EQUAL
40638: IFTRUE 40642
40640: GO 40668
40642: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40643: LD_ADDR_VAR 0 3
40647: PUSH
40648: LD_INT 21
40650: PUSH
40651: LD_INT 22
40653: PUSH
40654: LD_INT 23
40656: PUSH
40657: LD_INT 24
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: ST_TO_ADDR
40666: GO 40781
40668: LD_INT 52
40670: DOUBLE
40671: EQUAL
40672: IFTRUE 40676
40674: GO 40702
40676: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40677: LD_ADDR_VAR 0 3
40681: PUSH
40682: LD_INT 21
40684: PUSH
40685: LD_INT 22
40687: PUSH
40688: LD_INT 23
40690: PUSH
40691: LD_INT 24
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: ST_TO_ADDR
40700: GO 40781
40702: LD_INT 53
40704: DOUBLE
40705: EQUAL
40706: IFTRUE 40710
40708: GO 40728
40710: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40711: LD_ADDR_VAR 0 3
40715: PUSH
40716: LD_INT 23
40718: PUSH
40719: LD_INT 24
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: ST_TO_ADDR
40726: GO 40781
40728: LD_INT 46
40730: DOUBLE
40731: EQUAL
40732: IFTRUE 40736
40734: GO 40754
40736: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40737: LD_ADDR_VAR 0 3
40741: PUSH
40742: LD_INT 23
40744: PUSH
40745: LD_INT 24
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: ST_TO_ADDR
40752: GO 40781
40754: LD_INT 47
40756: DOUBLE
40757: EQUAL
40758: IFTRUE 40762
40760: GO 40780
40762: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40763: LD_ADDR_VAR 0 3
40767: PUSH
40768: LD_INT 23
40770: PUSH
40771: LD_INT 24
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: ST_TO_ADDR
40778: GO 40781
40780: POP
// result := ( chassis in result ) ;
40781: LD_ADDR_VAR 0 3
40785: PUSH
40786: LD_VAR 0 1
40790: PUSH
40791: LD_VAR 0 3
40795: IN
40796: ST_TO_ADDR
// end ;
40797: LD_VAR 0 3
40801: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40802: LD_INT 0
40804: PPUSH
40805: PPUSH
40806: PPUSH
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
// result := array ;
40811: LD_ADDR_VAR 0 5
40815: PUSH
40816: LD_VAR 0 1
40820: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40821: LD_VAR 0 1
40825: NOT
40826: PUSH
40827: LD_VAR 0 2
40831: NOT
40832: OR
40833: PUSH
40834: LD_VAR 0 3
40838: NOT
40839: OR
40840: PUSH
40841: LD_VAR 0 2
40845: PUSH
40846: LD_VAR 0 1
40850: GREATER
40851: OR
40852: PUSH
40853: LD_VAR 0 3
40857: PUSH
40858: LD_VAR 0 1
40862: GREATER
40863: OR
40864: IFFALSE 40868
// exit ;
40866: GO 41164
// if direction then
40868: LD_VAR 0 4
40872: IFFALSE 40936
// begin d := 1 ;
40874: LD_ADDR_VAR 0 9
40878: PUSH
40879: LD_INT 1
40881: ST_TO_ADDR
// if i_from > i_to then
40882: LD_VAR 0 2
40886: PUSH
40887: LD_VAR 0 3
40891: GREATER
40892: IFFALSE 40918
// length := ( array - i_from ) + i_to else
40894: LD_ADDR_VAR 0 11
40898: PUSH
40899: LD_VAR 0 1
40903: PUSH
40904: LD_VAR 0 2
40908: MINUS
40909: PUSH
40910: LD_VAR 0 3
40914: PLUS
40915: ST_TO_ADDR
40916: GO 40934
// length := i_to - i_from ;
40918: LD_ADDR_VAR 0 11
40922: PUSH
40923: LD_VAR 0 3
40927: PUSH
40928: LD_VAR 0 2
40932: MINUS
40933: ST_TO_ADDR
// end else
40934: GO 40997
// begin d := - 1 ;
40936: LD_ADDR_VAR 0 9
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: ST_TO_ADDR
// if i_from > i_to then
40945: LD_VAR 0 2
40949: PUSH
40950: LD_VAR 0 3
40954: GREATER
40955: IFFALSE 40975
// length := i_from - i_to else
40957: LD_ADDR_VAR 0 11
40961: PUSH
40962: LD_VAR 0 2
40966: PUSH
40967: LD_VAR 0 3
40971: MINUS
40972: ST_TO_ADDR
40973: GO 40997
// length := ( array - i_to ) + i_from ;
40975: LD_ADDR_VAR 0 11
40979: PUSH
40980: LD_VAR 0 1
40984: PUSH
40985: LD_VAR 0 3
40989: MINUS
40990: PUSH
40991: LD_VAR 0 2
40995: PLUS
40996: ST_TO_ADDR
// end ; if not length then
40997: LD_VAR 0 11
41001: NOT
41002: IFFALSE 41006
// exit ;
41004: GO 41164
// tmp := array ;
41006: LD_ADDR_VAR 0 10
41010: PUSH
41011: LD_VAR 0 1
41015: ST_TO_ADDR
// for i = 1 to length do
41016: LD_ADDR_VAR 0 6
41020: PUSH
41021: DOUBLE
41022: LD_INT 1
41024: DEC
41025: ST_TO_ADDR
41026: LD_VAR 0 11
41030: PUSH
41031: FOR_TO
41032: IFFALSE 41152
// begin for j = 1 to array do
41034: LD_ADDR_VAR 0 7
41038: PUSH
41039: DOUBLE
41040: LD_INT 1
41042: DEC
41043: ST_TO_ADDR
41044: LD_VAR 0 1
41048: PUSH
41049: FOR_TO
41050: IFFALSE 41138
// begin k := j + d ;
41052: LD_ADDR_VAR 0 8
41056: PUSH
41057: LD_VAR 0 7
41061: PUSH
41062: LD_VAR 0 9
41066: PLUS
41067: ST_TO_ADDR
// if k > array then
41068: LD_VAR 0 8
41072: PUSH
41073: LD_VAR 0 1
41077: GREATER
41078: IFFALSE 41088
// k := 1 ;
41080: LD_ADDR_VAR 0 8
41084: PUSH
41085: LD_INT 1
41087: ST_TO_ADDR
// if not k then
41088: LD_VAR 0 8
41092: NOT
41093: IFFALSE 41105
// k := array ;
41095: LD_ADDR_VAR 0 8
41099: PUSH
41100: LD_VAR 0 1
41104: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41105: LD_ADDR_VAR 0 10
41109: PUSH
41110: LD_VAR 0 10
41114: PPUSH
41115: LD_VAR 0 8
41119: PPUSH
41120: LD_VAR 0 1
41124: PUSH
41125: LD_VAR 0 7
41129: ARRAY
41130: PPUSH
41131: CALL_OW 1
41135: ST_TO_ADDR
// end ;
41136: GO 41049
41138: POP
41139: POP
// array := tmp ;
41140: LD_ADDR_VAR 0 1
41144: PUSH
41145: LD_VAR 0 10
41149: ST_TO_ADDR
// end ;
41150: GO 41031
41152: POP
41153: POP
// result := array ;
41154: LD_ADDR_VAR 0 5
41158: PUSH
41159: LD_VAR 0 1
41163: ST_TO_ADDR
// end ;
41164: LD_VAR 0 5
41168: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41169: LD_INT 0
41171: PPUSH
41172: PPUSH
// result := 0 ;
41173: LD_ADDR_VAR 0 3
41177: PUSH
41178: LD_INT 0
41180: ST_TO_ADDR
// if not array or not value in array then
41181: LD_VAR 0 1
41185: NOT
41186: PUSH
41187: LD_VAR 0 2
41191: PUSH
41192: LD_VAR 0 1
41196: IN
41197: NOT
41198: OR
41199: IFFALSE 41203
// exit ;
41201: GO 41257
// for i = 1 to array do
41203: LD_ADDR_VAR 0 4
41207: PUSH
41208: DOUBLE
41209: LD_INT 1
41211: DEC
41212: ST_TO_ADDR
41213: LD_VAR 0 1
41217: PUSH
41218: FOR_TO
41219: IFFALSE 41255
// if value = array [ i ] then
41221: LD_VAR 0 2
41225: PUSH
41226: LD_VAR 0 1
41230: PUSH
41231: LD_VAR 0 4
41235: ARRAY
41236: EQUAL
41237: IFFALSE 41253
// begin result := i ;
41239: LD_ADDR_VAR 0 3
41243: PUSH
41244: LD_VAR 0 4
41248: ST_TO_ADDR
// exit ;
41249: POP
41250: POP
41251: GO 41257
// end ;
41253: GO 41218
41255: POP
41256: POP
// end ;
41257: LD_VAR 0 3
41261: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41262: LD_INT 0
41264: PPUSH
// vc_chassis := chassis ;
41265: LD_ADDR_OWVAR 37
41269: PUSH
41270: LD_VAR 0 1
41274: ST_TO_ADDR
// vc_engine := engine ;
41275: LD_ADDR_OWVAR 39
41279: PUSH
41280: LD_VAR 0 2
41284: ST_TO_ADDR
// vc_control := control ;
41285: LD_ADDR_OWVAR 38
41289: PUSH
41290: LD_VAR 0 3
41294: ST_TO_ADDR
// vc_weapon := weapon ;
41295: LD_ADDR_OWVAR 40
41299: PUSH
41300: LD_VAR 0 4
41304: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41305: LD_ADDR_OWVAR 41
41309: PUSH
41310: LD_VAR 0 5
41314: ST_TO_ADDR
// end ;
41315: LD_VAR 0 6
41319: RET
// export function WantPlant ( unit ) ; var task ; begin
41320: LD_INT 0
41322: PPUSH
41323: PPUSH
// result := false ;
41324: LD_ADDR_VAR 0 2
41328: PUSH
41329: LD_INT 0
41331: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41332: LD_ADDR_VAR 0 3
41336: PUSH
41337: LD_VAR 0 1
41341: PPUSH
41342: CALL_OW 437
41346: ST_TO_ADDR
// if task then
41347: LD_VAR 0 3
41351: IFFALSE 41379
// if task [ 1 ] [ 1 ] = p then
41353: LD_VAR 0 3
41357: PUSH
41358: LD_INT 1
41360: ARRAY
41361: PUSH
41362: LD_INT 1
41364: ARRAY
41365: PUSH
41366: LD_STRING p
41368: EQUAL
41369: IFFALSE 41379
// result := true ;
41371: LD_ADDR_VAR 0 2
41375: PUSH
41376: LD_INT 1
41378: ST_TO_ADDR
// end ;
41379: LD_VAR 0 2
41383: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41384: LD_INT 0
41386: PPUSH
41387: PPUSH
41388: PPUSH
41389: PPUSH
// if pos < 1 then
41390: LD_VAR 0 2
41394: PUSH
41395: LD_INT 1
41397: LESS
41398: IFFALSE 41402
// exit ;
41400: GO 41705
// if pos = 1 then
41402: LD_VAR 0 2
41406: PUSH
41407: LD_INT 1
41409: EQUAL
41410: IFFALSE 41443
// result := Replace ( arr , pos [ 1 ] , value ) else
41412: LD_ADDR_VAR 0 4
41416: PUSH
41417: LD_VAR 0 1
41421: PPUSH
41422: LD_VAR 0 2
41426: PUSH
41427: LD_INT 1
41429: ARRAY
41430: PPUSH
41431: LD_VAR 0 3
41435: PPUSH
41436: CALL_OW 1
41440: ST_TO_ADDR
41441: GO 41705
// begin tmp := arr ;
41443: LD_ADDR_VAR 0 6
41447: PUSH
41448: LD_VAR 0 1
41452: ST_TO_ADDR
// s_arr := [ tmp ] ;
41453: LD_ADDR_VAR 0 7
41457: PUSH
41458: LD_VAR 0 6
41462: PUSH
41463: EMPTY
41464: LIST
41465: ST_TO_ADDR
// for i = 1 to pos - 1 do
41466: LD_ADDR_VAR 0 5
41470: PUSH
41471: DOUBLE
41472: LD_INT 1
41474: DEC
41475: ST_TO_ADDR
41476: LD_VAR 0 2
41480: PUSH
41481: LD_INT 1
41483: MINUS
41484: PUSH
41485: FOR_TO
41486: IFFALSE 41531
// begin tmp := tmp [ pos [ i ] ] ;
41488: LD_ADDR_VAR 0 6
41492: PUSH
41493: LD_VAR 0 6
41497: PUSH
41498: LD_VAR 0 2
41502: PUSH
41503: LD_VAR 0 5
41507: ARRAY
41508: ARRAY
41509: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41510: LD_ADDR_VAR 0 7
41514: PUSH
41515: LD_VAR 0 7
41519: PUSH
41520: LD_VAR 0 6
41524: PUSH
41525: EMPTY
41526: LIST
41527: ADD
41528: ST_TO_ADDR
// end ;
41529: GO 41485
41531: POP
41532: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41533: LD_ADDR_VAR 0 6
41537: PUSH
41538: LD_VAR 0 6
41542: PPUSH
41543: LD_VAR 0 2
41547: PUSH
41548: LD_VAR 0 2
41552: ARRAY
41553: PPUSH
41554: LD_VAR 0 3
41558: PPUSH
41559: CALL_OW 1
41563: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41564: LD_ADDR_VAR 0 7
41568: PUSH
41569: LD_VAR 0 7
41573: PPUSH
41574: LD_VAR 0 7
41578: PPUSH
41579: LD_VAR 0 6
41583: PPUSH
41584: CALL_OW 1
41588: ST_TO_ADDR
// for i = s_arr downto 2 do
41589: LD_ADDR_VAR 0 5
41593: PUSH
41594: DOUBLE
41595: LD_VAR 0 7
41599: INC
41600: ST_TO_ADDR
41601: LD_INT 2
41603: PUSH
41604: FOR_DOWNTO
41605: IFFALSE 41689
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41607: LD_ADDR_VAR 0 6
41611: PUSH
41612: LD_VAR 0 7
41616: PUSH
41617: LD_VAR 0 5
41621: PUSH
41622: LD_INT 1
41624: MINUS
41625: ARRAY
41626: PPUSH
41627: LD_VAR 0 2
41631: PUSH
41632: LD_VAR 0 5
41636: PUSH
41637: LD_INT 1
41639: MINUS
41640: ARRAY
41641: PPUSH
41642: LD_VAR 0 7
41646: PUSH
41647: LD_VAR 0 5
41651: ARRAY
41652: PPUSH
41653: CALL_OW 1
41657: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41658: LD_ADDR_VAR 0 7
41662: PUSH
41663: LD_VAR 0 7
41667: PPUSH
41668: LD_VAR 0 5
41672: PUSH
41673: LD_INT 1
41675: MINUS
41676: PPUSH
41677: LD_VAR 0 6
41681: PPUSH
41682: CALL_OW 1
41686: ST_TO_ADDR
// end ;
41687: GO 41604
41689: POP
41690: POP
// result := s_arr [ 1 ] ;
41691: LD_ADDR_VAR 0 4
41695: PUSH
41696: LD_VAR 0 7
41700: PUSH
41701: LD_INT 1
41703: ARRAY
41704: ST_TO_ADDR
// end ; end ;
41705: LD_VAR 0 4
41709: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41710: LD_INT 0
41712: PPUSH
41713: PPUSH
// if not list then
41714: LD_VAR 0 1
41718: NOT
41719: IFFALSE 41723
// exit ;
41721: GO 41814
// i := list [ pos1 ] ;
41723: LD_ADDR_VAR 0 5
41727: PUSH
41728: LD_VAR 0 1
41732: PUSH
41733: LD_VAR 0 2
41737: ARRAY
41738: ST_TO_ADDR
// if not i then
41739: LD_VAR 0 5
41743: NOT
41744: IFFALSE 41748
// exit ;
41746: GO 41814
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41748: LD_ADDR_VAR 0 1
41752: PUSH
41753: LD_VAR 0 1
41757: PPUSH
41758: LD_VAR 0 2
41762: PPUSH
41763: LD_VAR 0 1
41767: PUSH
41768: LD_VAR 0 3
41772: ARRAY
41773: PPUSH
41774: CALL_OW 1
41778: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41779: LD_ADDR_VAR 0 1
41783: PUSH
41784: LD_VAR 0 1
41788: PPUSH
41789: LD_VAR 0 3
41793: PPUSH
41794: LD_VAR 0 5
41798: PPUSH
41799: CALL_OW 1
41803: ST_TO_ADDR
// result := list ;
41804: LD_ADDR_VAR 0 4
41808: PUSH
41809: LD_VAR 0 1
41813: ST_TO_ADDR
// end ;
41814: LD_VAR 0 4
41818: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41819: LD_INT 0
41821: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41822: LD_ADDR_VAR 0 5
41826: PUSH
41827: LD_VAR 0 1
41831: PPUSH
41832: CALL_OW 250
41836: PPUSH
41837: LD_VAR 0 1
41841: PPUSH
41842: CALL_OW 251
41846: PPUSH
41847: LD_VAR 0 2
41851: PPUSH
41852: LD_VAR 0 3
41856: PPUSH
41857: LD_VAR 0 4
41861: PPUSH
41862: CALL 41872 0 5
41866: ST_TO_ADDR
// end ;
41867: LD_VAR 0 5
41871: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41872: LD_INT 0
41874: PPUSH
41875: PPUSH
41876: PPUSH
41877: PPUSH
// if not list then
41878: LD_VAR 0 3
41882: NOT
41883: IFFALSE 41887
// exit ;
41885: GO 42275
// result := [ ] ;
41887: LD_ADDR_VAR 0 6
41891: PUSH
41892: EMPTY
41893: ST_TO_ADDR
// for i in list do
41894: LD_ADDR_VAR 0 7
41898: PUSH
41899: LD_VAR 0 3
41903: PUSH
41904: FOR_IN
41905: IFFALSE 42107
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41907: LD_ADDR_VAR 0 9
41911: PUSH
41912: LD_VAR 0 7
41916: PPUSH
41917: LD_VAR 0 1
41921: PPUSH
41922: LD_VAR 0 2
41926: PPUSH
41927: CALL_OW 297
41931: ST_TO_ADDR
// if not result then
41932: LD_VAR 0 6
41936: NOT
41937: IFFALSE 41963
// result := [ [ i , tmp ] ] else
41939: LD_ADDR_VAR 0 6
41943: PUSH
41944: LD_VAR 0 7
41948: PUSH
41949: LD_VAR 0 9
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: EMPTY
41959: LIST
41960: ST_TO_ADDR
41961: GO 42105
// begin if result [ result ] [ 2 ] < tmp then
41963: LD_VAR 0 6
41967: PUSH
41968: LD_VAR 0 6
41972: ARRAY
41973: PUSH
41974: LD_INT 2
41976: ARRAY
41977: PUSH
41978: LD_VAR 0 9
41982: LESS
41983: IFFALSE 42025
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41985: LD_ADDR_VAR 0 6
41989: PUSH
41990: LD_VAR 0 6
41994: PPUSH
41995: LD_VAR 0 6
41999: PUSH
42000: LD_INT 1
42002: PLUS
42003: PPUSH
42004: LD_VAR 0 7
42008: PUSH
42009: LD_VAR 0 9
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PPUSH
42018: CALL_OW 2
42022: ST_TO_ADDR
42023: GO 42105
// for j = 1 to result do
42025: LD_ADDR_VAR 0 8
42029: PUSH
42030: DOUBLE
42031: LD_INT 1
42033: DEC
42034: ST_TO_ADDR
42035: LD_VAR 0 6
42039: PUSH
42040: FOR_TO
42041: IFFALSE 42103
// begin if tmp < result [ j ] [ 2 ] then
42043: LD_VAR 0 9
42047: PUSH
42048: LD_VAR 0 6
42052: PUSH
42053: LD_VAR 0 8
42057: ARRAY
42058: PUSH
42059: LD_INT 2
42061: ARRAY
42062: LESS
42063: IFFALSE 42101
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42065: LD_ADDR_VAR 0 6
42069: PUSH
42070: LD_VAR 0 6
42074: PPUSH
42075: LD_VAR 0 8
42079: PPUSH
42080: LD_VAR 0 7
42084: PUSH
42085: LD_VAR 0 9
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PPUSH
42094: CALL_OW 2
42098: ST_TO_ADDR
// break ;
42099: GO 42103
// end ; end ;
42101: GO 42040
42103: POP
42104: POP
// end ; end ;
42105: GO 41904
42107: POP
42108: POP
// if result and not asc then
42109: LD_VAR 0 6
42113: PUSH
42114: LD_VAR 0 4
42118: NOT
42119: AND
42120: IFFALSE 42195
// begin tmp := result ;
42122: LD_ADDR_VAR 0 9
42126: PUSH
42127: LD_VAR 0 6
42131: ST_TO_ADDR
// for i = tmp downto 1 do
42132: LD_ADDR_VAR 0 7
42136: PUSH
42137: DOUBLE
42138: LD_VAR 0 9
42142: INC
42143: ST_TO_ADDR
42144: LD_INT 1
42146: PUSH
42147: FOR_DOWNTO
42148: IFFALSE 42193
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42150: LD_ADDR_VAR 0 6
42154: PUSH
42155: LD_VAR 0 6
42159: PPUSH
42160: LD_VAR 0 9
42164: PUSH
42165: LD_VAR 0 7
42169: MINUS
42170: PUSH
42171: LD_INT 1
42173: PLUS
42174: PPUSH
42175: LD_VAR 0 9
42179: PUSH
42180: LD_VAR 0 7
42184: ARRAY
42185: PPUSH
42186: CALL_OW 1
42190: ST_TO_ADDR
42191: GO 42147
42193: POP
42194: POP
// end ; tmp := [ ] ;
42195: LD_ADDR_VAR 0 9
42199: PUSH
42200: EMPTY
42201: ST_TO_ADDR
// if mode then
42202: LD_VAR 0 5
42206: IFFALSE 42275
// begin for i = 1 to result do
42208: LD_ADDR_VAR 0 7
42212: PUSH
42213: DOUBLE
42214: LD_INT 1
42216: DEC
42217: ST_TO_ADDR
42218: LD_VAR 0 6
42222: PUSH
42223: FOR_TO
42224: IFFALSE 42263
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42226: LD_ADDR_VAR 0 9
42230: PUSH
42231: LD_VAR 0 9
42235: PPUSH
42236: LD_VAR 0 7
42240: PPUSH
42241: LD_VAR 0 6
42245: PUSH
42246: LD_VAR 0 7
42250: ARRAY
42251: PUSH
42252: LD_INT 1
42254: ARRAY
42255: PPUSH
42256: CALL_OW 1
42260: ST_TO_ADDR
42261: GO 42223
42263: POP
42264: POP
// result := tmp ;
42265: LD_ADDR_VAR 0 6
42269: PUSH
42270: LD_VAR 0 9
42274: ST_TO_ADDR
// end ; end ;
42275: LD_VAR 0 6
42279: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42280: LD_INT 0
42282: PPUSH
42283: PPUSH
42284: PPUSH
42285: PPUSH
42286: PPUSH
42287: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42288: LD_ADDR_VAR 0 5
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: ST_TO_ADDR
// if not x or not y then
42310: LD_VAR 0 2
42314: NOT
42315: PUSH
42316: LD_VAR 0 3
42320: NOT
42321: OR
42322: IFFALSE 42326
// exit ;
42324: GO 43972
// if not range then
42326: LD_VAR 0 4
42330: NOT
42331: IFFALSE 42341
// range := 10 ;
42333: LD_ADDR_VAR 0 4
42337: PUSH
42338: LD_INT 10
42340: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42341: LD_ADDR_VAR 0 8
42345: PUSH
42346: LD_INT 81
42348: PUSH
42349: LD_VAR 0 1
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 92
42360: PUSH
42361: LD_VAR 0 2
42365: PUSH
42366: LD_VAR 0 3
42370: PUSH
42371: LD_VAR 0 4
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 3
42384: PUSH
42385: LD_INT 21
42387: PUSH
42388: LD_INT 3
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: PPUSH
42404: CALL_OW 69
42408: ST_TO_ADDR
// if not tmp then
42409: LD_VAR 0 8
42413: NOT
42414: IFFALSE 42418
// exit ;
42416: GO 43972
// for i in tmp do
42418: LD_ADDR_VAR 0 6
42422: PUSH
42423: LD_VAR 0 8
42427: PUSH
42428: FOR_IN
42429: IFFALSE 43947
// begin points := [ 0 , 0 , 0 ] ;
42431: LD_ADDR_VAR 0 9
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: LIST
42449: ST_TO_ADDR
// bpoints := 1 ;
42450: LD_ADDR_VAR 0 10
42454: PUSH
42455: LD_INT 1
42457: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42458: LD_VAR 0 6
42462: PPUSH
42463: CALL_OW 247
42467: PUSH
42468: LD_INT 1
42470: DOUBLE
42471: EQUAL
42472: IFTRUE 42476
42474: GO 43054
42476: POP
// begin if GetClass ( i ) = 1 then
42477: LD_VAR 0 6
42481: PPUSH
42482: CALL_OW 257
42486: PUSH
42487: LD_INT 1
42489: EQUAL
42490: IFFALSE 42511
// points := [ 10 , 5 , 3 ] ;
42492: LD_ADDR_VAR 0 9
42496: PUSH
42497: LD_INT 10
42499: PUSH
42500: LD_INT 5
42502: PUSH
42503: LD_INT 3
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: LIST
42510: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42511: LD_VAR 0 6
42515: PPUSH
42516: CALL_OW 257
42520: PUSH
42521: LD_INT 2
42523: PUSH
42524: LD_INT 3
42526: PUSH
42527: LD_INT 4
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: LIST
42534: IN
42535: IFFALSE 42556
// points := [ 3 , 2 , 1 ] ;
42537: LD_ADDR_VAR 0 9
42541: PUSH
42542: LD_INT 3
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: LIST
42555: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42556: LD_VAR 0 6
42560: PPUSH
42561: CALL_OW 257
42565: PUSH
42566: LD_INT 5
42568: EQUAL
42569: IFFALSE 42590
// points := [ 130 , 5 , 2 ] ;
42571: LD_ADDR_VAR 0 9
42575: PUSH
42576: LD_INT 130
42578: PUSH
42579: LD_INT 5
42581: PUSH
42582: LD_INT 2
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: LIST
42589: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42590: LD_VAR 0 6
42594: PPUSH
42595: CALL_OW 257
42599: PUSH
42600: LD_INT 8
42602: EQUAL
42603: IFFALSE 42624
// points := [ 35 , 35 , 30 ] ;
42605: LD_ADDR_VAR 0 9
42609: PUSH
42610: LD_INT 35
42612: PUSH
42613: LD_INT 35
42615: PUSH
42616: LD_INT 30
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42624: LD_VAR 0 6
42628: PPUSH
42629: CALL_OW 257
42633: PUSH
42634: LD_INT 9
42636: EQUAL
42637: IFFALSE 42658
// points := [ 20 , 55 , 40 ] ;
42639: LD_ADDR_VAR 0 9
42643: PUSH
42644: LD_INT 20
42646: PUSH
42647: LD_INT 55
42649: PUSH
42650: LD_INT 40
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: LIST
42657: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42658: LD_VAR 0 6
42662: PPUSH
42663: CALL_OW 257
42667: PUSH
42668: LD_INT 12
42670: PUSH
42671: LD_INT 16
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: IN
42678: IFFALSE 42699
// points := [ 5 , 3 , 2 ] ;
42680: LD_ADDR_VAR 0 9
42684: PUSH
42685: LD_INT 5
42687: PUSH
42688: LD_INT 3
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: LIST
42698: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42699: LD_VAR 0 6
42703: PPUSH
42704: CALL_OW 257
42708: PUSH
42709: LD_INT 17
42711: EQUAL
42712: IFFALSE 42733
// points := [ 100 , 50 , 75 ] ;
42714: LD_ADDR_VAR 0 9
42718: PUSH
42719: LD_INT 100
42721: PUSH
42722: LD_INT 50
42724: PUSH
42725: LD_INT 75
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42733: LD_VAR 0 6
42737: PPUSH
42738: CALL_OW 257
42742: PUSH
42743: LD_INT 15
42745: EQUAL
42746: IFFALSE 42767
// points := [ 10 , 5 , 3 ] ;
42748: LD_ADDR_VAR 0 9
42752: PUSH
42753: LD_INT 10
42755: PUSH
42756: LD_INT 5
42758: PUSH
42759: LD_INT 3
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42767: LD_VAR 0 6
42771: PPUSH
42772: CALL_OW 257
42776: PUSH
42777: LD_INT 14
42779: EQUAL
42780: IFFALSE 42801
// points := [ 10 , 0 , 0 ] ;
42782: LD_ADDR_VAR 0 9
42786: PUSH
42787: LD_INT 10
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42801: LD_VAR 0 6
42805: PPUSH
42806: CALL_OW 257
42810: PUSH
42811: LD_INT 11
42813: EQUAL
42814: IFFALSE 42835
// points := [ 30 , 10 , 5 ] ;
42816: LD_ADDR_VAR 0 9
42820: PUSH
42821: LD_INT 30
42823: PUSH
42824: LD_INT 10
42826: PUSH
42827: LD_INT 5
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42835: LD_VAR 0 1
42839: PPUSH
42840: LD_INT 5
42842: PPUSH
42843: CALL_OW 321
42847: PUSH
42848: LD_INT 2
42850: EQUAL
42851: IFFALSE 42868
// bpoints := bpoints * 1.8 ;
42853: LD_ADDR_VAR 0 10
42857: PUSH
42858: LD_VAR 0 10
42862: PUSH
42863: LD_REAL  1.80000000000000E+0000
42866: MUL
42867: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42868: LD_VAR 0 6
42872: PPUSH
42873: CALL_OW 257
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: LD_INT 3
42886: PUSH
42887: LD_INT 4
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: IN
42896: PUSH
42897: LD_VAR 0 1
42901: PPUSH
42902: LD_INT 51
42904: PPUSH
42905: CALL_OW 321
42909: PUSH
42910: LD_INT 2
42912: EQUAL
42913: AND
42914: IFFALSE 42931
// bpoints := bpoints * 1.2 ;
42916: LD_ADDR_VAR 0 10
42920: PUSH
42921: LD_VAR 0 10
42925: PUSH
42926: LD_REAL  1.20000000000000E+0000
42929: MUL
42930: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42931: LD_VAR 0 6
42935: PPUSH
42936: CALL_OW 257
42940: PUSH
42941: LD_INT 5
42943: PUSH
42944: LD_INT 7
42946: PUSH
42947: LD_INT 9
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: LIST
42954: IN
42955: PUSH
42956: LD_VAR 0 1
42960: PPUSH
42961: LD_INT 52
42963: PPUSH
42964: CALL_OW 321
42968: PUSH
42969: LD_INT 2
42971: EQUAL
42972: AND
42973: IFFALSE 42990
// bpoints := bpoints * 1.5 ;
42975: LD_ADDR_VAR 0 10
42979: PUSH
42980: LD_VAR 0 10
42984: PUSH
42985: LD_REAL  1.50000000000000E+0000
42988: MUL
42989: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42990: LD_VAR 0 1
42994: PPUSH
42995: LD_INT 66
42997: PPUSH
42998: CALL_OW 321
43002: PUSH
43003: LD_INT 2
43005: EQUAL
43006: IFFALSE 43023
// bpoints := bpoints * 1.1 ;
43008: LD_ADDR_VAR 0 10
43012: PUSH
43013: LD_VAR 0 10
43017: PUSH
43018: LD_REAL  1.10000000000000E+0000
43021: MUL
43022: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43023: LD_ADDR_VAR 0 10
43027: PUSH
43028: LD_VAR 0 10
43032: PUSH
43033: LD_VAR 0 6
43037: PPUSH
43038: LD_INT 1
43040: PPUSH
43041: CALL_OW 259
43045: PUSH
43046: LD_REAL  1.15000000000000E+0000
43049: MUL
43050: MUL
43051: ST_TO_ADDR
// end ; unit_vehicle :
43052: GO 43876
43054: LD_INT 2
43056: DOUBLE
43057: EQUAL
43058: IFTRUE 43062
43060: GO 43864
43062: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43063: LD_VAR 0 6
43067: PPUSH
43068: CALL_OW 264
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 42
43078: PUSH
43079: LD_INT 24
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: LIST
43086: IN
43087: IFFALSE 43108
// points := [ 25 , 5 , 3 ] ;
43089: LD_ADDR_VAR 0 9
43093: PUSH
43094: LD_INT 25
43096: PUSH
43097: LD_INT 5
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43108: LD_VAR 0 6
43112: PPUSH
43113: CALL_OW 264
43117: PUSH
43118: LD_INT 4
43120: PUSH
43121: LD_INT 43
43123: PUSH
43124: LD_INT 25
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: IN
43132: IFFALSE 43153
// points := [ 40 , 15 , 5 ] ;
43134: LD_ADDR_VAR 0 9
43138: PUSH
43139: LD_INT 40
43141: PUSH
43142: LD_INT 15
43144: PUSH
43145: LD_INT 5
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: LIST
43152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43153: LD_VAR 0 6
43157: PPUSH
43158: CALL_OW 264
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: LD_INT 23
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: IN
43173: IFFALSE 43194
// points := [ 7 , 25 , 8 ] ;
43175: LD_ADDR_VAR 0 9
43179: PUSH
43180: LD_INT 7
43182: PUSH
43183: LD_INT 25
43185: PUSH
43186: LD_INT 8
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: LIST
43193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43194: LD_VAR 0 6
43198: PPUSH
43199: CALL_OW 264
43203: PUSH
43204: LD_INT 5
43206: PUSH
43207: LD_INT 27
43209: PUSH
43210: LD_INT 44
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: LIST
43217: IN
43218: IFFALSE 43239
// points := [ 14 , 50 , 16 ] ;
43220: LD_ADDR_VAR 0 9
43224: PUSH
43225: LD_INT 14
43227: PUSH
43228: LD_INT 50
43230: PUSH
43231: LD_INT 16
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: LIST
43238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43239: LD_VAR 0 6
43243: PPUSH
43244: CALL_OW 264
43248: PUSH
43249: LD_INT 6
43251: PUSH
43252: LD_INT 46
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: IN
43259: IFFALSE 43280
// points := [ 32 , 120 , 70 ] ;
43261: LD_ADDR_VAR 0 9
43265: PUSH
43266: LD_INT 32
43268: PUSH
43269: LD_INT 120
43271: PUSH
43272: LD_INT 70
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: LIST
43279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
43280: LD_VAR 0 6
43284: PPUSH
43285: CALL_OW 264
43289: PUSH
43290: LD_INT 7
43292: PUSH
43293: LD_INT 28
43295: PUSH
43296: LD_INT 45
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: IN
43304: IFFALSE 43325
// points := [ 35 , 20 , 45 ] ;
43306: LD_ADDR_VAR 0 9
43310: PUSH
43311: LD_INT 35
43313: PUSH
43314: LD_INT 20
43316: PUSH
43317: LD_INT 45
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43325: LD_VAR 0 6
43329: PPUSH
43330: CALL_OW 264
43334: PUSH
43335: LD_INT 47
43337: PUSH
43338: EMPTY
43339: LIST
43340: IN
43341: IFFALSE 43362
// points := [ 67 , 45 , 75 ] ;
43343: LD_ADDR_VAR 0 9
43347: PUSH
43348: LD_INT 67
43350: PUSH
43351: LD_INT 45
43353: PUSH
43354: LD_INT 75
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: LIST
43361: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43362: LD_VAR 0 6
43366: PPUSH
43367: CALL_OW 264
43371: PUSH
43372: LD_INT 26
43374: PUSH
43375: EMPTY
43376: LIST
43377: IN
43378: IFFALSE 43399
// points := [ 120 , 30 , 80 ] ;
43380: LD_ADDR_VAR 0 9
43384: PUSH
43385: LD_INT 120
43387: PUSH
43388: LD_INT 30
43390: PUSH
43391: LD_INT 80
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: LIST
43398: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43399: LD_VAR 0 6
43403: PPUSH
43404: CALL_OW 264
43408: PUSH
43409: LD_INT 22
43411: PUSH
43412: EMPTY
43413: LIST
43414: IN
43415: IFFALSE 43436
// points := [ 40 , 1 , 1 ] ;
43417: LD_ADDR_VAR 0 9
43421: PUSH
43422: LD_INT 40
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: LIST
43435: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43436: LD_VAR 0 6
43440: PPUSH
43441: CALL_OW 264
43445: PUSH
43446: LD_INT 29
43448: PUSH
43449: EMPTY
43450: LIST
43451: IN
43452: IFFALSE 43473
// points := [ 70 , 200 , 400 ] ;
43454: LD_ADDR_VAR 0 9
43458: PUSH
43459: LD_INT 70
43461: PUSH
43462: LD_INT 200
43464: PUSH
43465: LD_INT 400
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43473: LD_VAR 0 6
43477: PPUSH
43478: CALL_OW 264
43482: PUSH
43483: LD_INT 14
43485: PUSH
43486: LD_INT 53
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: IN
43493: IFFALSE 43514
// points := [ 40 , 10 , 20 ] ;
43495: LD_ADDR_VAR 0 9
43499: PUSH
43500: LD_INT 40
43502: PUSH
43503: LD_INT 10
43505: PUSH
43506: LD_INT 20
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: LIST
43513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43514: LD_VAR 0 6
43518: PPUSH
43519: CALL_OW 264
43523: PUSH
43524: LD_INT 9
43526: PUSH
43527: EMPTY
43528: LIST
43529: IN
43530: IFFALSE 43551
// points := [ 5 , 70 , 20 ] ;
43532: LD_ADDR_VAR 0 9
43536: PUSH
43537: LD_INT 5
43539: PUSH
43540: LD_INT 70
43542: PUSH
43543: LD_INT 20
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43551: LD_VAR 0 6
43555: PPUSH
43556: CALL_OW 264
43560: PUSH
43561: LD_INT 10
43563: PUSH
43564: EMPTY
43565: LIST
43566: IN
43567: IFFALSE 43588
// points := [ 35 , 110 , 70 ] ;
43569: LD_ADDR_VAR 0 9
43573: PUSH
43574: LD_INT 35
43576: PUSH
43577: LD_INT 110
43579: PUSH
43580: LD_INT 70
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43588: LD_VAR 0 6
43592: PPUSH
43593: CALL_OW 265
43597: PUSH
43598: LD_INT 25
43600: EQUAL
43601: IFFALSE 43622
// points := [ 80 , 65 , 100 ] ;
43603: LD_ADDR_VAR 0 9
43607: PUSH
43608: LD_INT 80
43610: PUSH
43611: LD_INT 65
43613: PUSH
43614: LD_INT 100
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: LIST
43621: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43622: LD_VAR 0 6
43626: PPUSH
43627: CALL_OW 263
43631: PUSH
43632: LD_INT 1
43634: EQUAL
43635: IFFALSE 43670
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43637: LD_ADDR_VAR 0 10
43641: PUSH
43642: LD_VAR 0 10
43646: PUSH
43647: LD_VAR 0 6
43651: PPUSH
43652: CALL_OW 311
43656: PPUSH
43657: LD_INT 3
43659: PPUSH
43660: CALL_OW 259
43664: PUSH
43665: LD_INT 4
43667: MUL
43668: MUL
43669: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43670: LD_VAR 0 6
43674: PPUSH
43675: CALL_OW 263
43679: PUSH
43680: LD_INT 2
43682: EQUAL
43683: IFFALSE 43734
// begin j := IsControledBy ( i ) ;
43685: LD_ADDR_VAR 0 7
43689: PUSH
43690: LD_VAR 0 6
43694: PPUSH
43695: CALL_OW 312
43699: ST_TO_ADDR
// if j then
43700: LD_VAR 0 7
43704: IFFALSE 43734
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43706: LD_ADDR_VAR 0 10
43710: PUSH
43711: LD_VAR 0 10
43715: PUSH
43716: LD_VAR 0 7
43720: PPUSH
43721: LD_INT 3
43723: PPUSH
43724: CALL_OW 259
43728: PUSH
43729: LD_INT 3
43731: MUL
43732: MUL
43733: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43734: LD_VAR 0 6
43738: PPUSH
43739: CALL_OW 264
43743: PUSH
43744: LD_INT 5
43746: PUSH
43747: LD_INT 6
43749: PUSH
43750: LD_INT 46
43752: PUSH
43753: LD_INT 44
43755: PUSH
43756: LD_INT 47
43758: PUSH
43759: LD_INT 45
43761: PUSH
43762: LD_INT 28
43764: PUSH
43765: LD_INT 7
43767: PUSH
43768: LD_INT 27
43770: PUSH
43771: LD_INT 29
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: IN
43786: PUSH
43787: LD_VAR 0 1
43791: PPUSH
43792: LD_INT 52
43794: PPUSH
43795: CALL_OW 321
43799: PUSH
43800: LD_INT 2
43802: EQUAL
43803: AND
43804: IFFALSE 43821
// bpoints := bpoints * 1.2 ;
43806: LD_ADDR_VAR 0 10
43810: PUSH
43811: LD_VAR 0 10
43815: PUSH
43816: LD_REAL  1.20000000000000E+0000
43819: MUL
43820: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43821: LD_VAR 0 6
43825: PPUSH
43826: CALL_OW 264
43830: PUSH
43831: LD_INT 6
43833: PUSH
43834: LD_INT 46
43836: PUSH
43837: LD_INT 47
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: IN
43845: IFFALSE 43862
// bpoints := bpoints * 1.2 ;
43847: LD_ADDR_VAR 0 10
43851: PUSH
43852: LD_VAR 0 10
43856: PUSH
43857: LD_REAL  1.20000000000000E+0000
43860: MUL
43861: ST_TO_ADDR
// end ; unit_building :
43862: GO 43876
43864: LD_INT 3
43866: DOUBLE
43867: EQUAL
43868: IFTRUE 43872
43870: GO 43875
43872: POP
// ; end ;
43873: GO 43876
43875: POP
// for j = 1 to 3 do
43876: LD_ADDR_VAR 0 7
43880: PUSH
43881: DOUBLE
43882: LD_INT 1
43884: DEC
43885: ST_TO_ADDR
43886: LD_INT 3
43888: PUSH
43889: FOR_TO
43890: IFFALSE 43943
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43892: LD_ADDR_VAR 0 5
43896: PUSH
43897: LD_VAR 0 5
43901: PPUSH
43902: LD_VAR 0 7
43906: PPUSH
43907: LD_VAR 0 5
43911: PUSH
43912: LD_VAR 0 7
43916: ARRAY
43917: PUSH
43918: LD_VAR 0 9
43922: PUSH
43923: LD_VAR 0 7
43927: ARRAY
43928: PUSH
43929: LD_VAR 0 10
43933: MUL
43934: PLUS
43935: PPUSH
43936: CALL_OW 1
43940: ST_TO_ADDR
43941: GO 43889
43943: POP
43944: POP
// end ;
43945: GO 42428
43947: POP
43948: POP
// result := Replace ( result , 4 , tmp ) ;
43949: LD_ADDR_VAR 0 5
43953: PUSH
43954: LD_VAR 0 5
43958: PPUSH
43959: LD_INT 4
43961: PPUSH
43962: LD_VAR 0 8
43966: PPUSH
43967: CALL_OW 1
43971: ST_TO_ADDR
// end ;
43972: LD_VAR 0 5
43976: RET
// export function DangerAtRange ( unit , range ) ; begin
43977: LD_INT 0
43979: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43980: LD_ADDR_VAR 0 3
43984: PUSH
43985: LD_VAR 0 1
43989: PPUSH
43990: CALL_OW 255
43994: PPUSH
43995: LD_VAR 0 1
43999: PPUSH
44000: CALL_OW 250
44004: PPUSH
44005: LD_VAR 0 1
44009: PPUSH
44010: CALL_OW 251
44014: PPUSH
44015: LD_VAR 0 2
44019: PPUSH
44020: CALL 42280 0 4
44024: ST_TO_ADDR
// end ;
44025: LD_VAR 0 3
44029: RET
// export function DangerInArea ( side , area ) ; begin
44030: LD_INT 0
44032: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44033: LD_ADDR_VAR 0 3
44037: PUSH
44038: LD_VAR 0 2
44042: PPUSH
44043: LD_INT 81
44045: PUSH
44046: LD_VAR 0 1
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PPUSH
44055: CALL_OW 70
44059: ST_TO_ADDR
// end ;
44060: LD_VAR 0 3
44064: RET
// export function IsExtension ( b ) ; begin
44065: LD_INT 0
44067: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44068: LD_ADDR_VAR 0 2
44072: PUSH
44073: LD_VAR 0 1
44077: PUSH
44078: LD_INT 23
44080: PUSH
44081: LD_INT 20
44083: PUSH
44084: LD_INT 22
44086: PUSH
44087: LD_INT 17
44089: PUSH
44090: LD_INT 24
44092: PUSH
44093: LD_INT 21
44095: PUSH
44096: LD_INT 19
44098: PUSH
44099: LD_INT 16
44101: PUSH
44102: LD_INT 25
44104: PUSH
44105: LD_INT 18
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: IN
44120: ST_TO_ADDR
// end ;
44121: LD_VAR 0 2
44125: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44126: LD_INT 0
44128: PPUSH
44129: PPUSH
44130: PPUSH
// result := [ ] ;
44131: LD_ADDR_VAR 0 4
44135: PUSH
44136: EMPTY
44137: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44138: LD_ADDR_VAR 0 5
44142: PUSH
44143: LD_VAR 0 2
44147: PPUSH
44148: LD_INT 21
44150: PUSH
44151: LD_INT 3
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PPUSH
44158: CALL_OW 70
44162: ST_TO_ADDR
// if not tmp then
44163: LD_VAR 0 5
44167: NOT
44168: IFFALSE 44172
// exit ;
44170: GO 44236
// if checkLink then
44172: LD_VAR 0 3
44176: IFFALSE 44226
// begin for i in tmp do
44178: LD_ADDR_VAR 0 6
44182: PUSH
44183: LD_VAR 0 5
44187: PUSH
44188: FOR_IN
44189: IFFALSE 44224
// if GetBase ( i ) <> base then
44191: LD_VAR 0 6
44195: PPUSH
44196: CALL_OW 274
44200: PUSH
44201: LD_VAR 0 1
44205: NONEQUAL
44206: IFFALSE 44222
// ComLinkToBase ( base , i ) ;
44208: LD_VAR 0 1
44212: PPUSH
44213: LD_VAR 0 6
44217: PPUSH
44218: CALL_OW 169
44222: GO 44188
44224: POP
44225: POP
// end ; result := tmp ;
44226: LD_ADDR_VAR 0 4
44230: PUSH
44231: LD_VAR 0 5
44235: ST_TO_ADDR
// end ;
44236: LD_VAR 0 4
44240: RET
// export function ComComplete ( units , b ) ; var i ; begin
44241: LD_INT 0
44243: PPUSH
44244: PPUSH
// if not units then
44245: LD_VAR 0 1
44249: NOT
44250: IFFALSE 44254
// exit ;
44252: GO 44344
// for i in units do
44254: LD_ADDR_VAR 0 4
44258: PUSH
44259: LD_VAR 0 1
44263: PUSH
44264: FOR_IN
44265: IFFALSE 44342
// if BuildingStatus ( b ) = bs_build then
44267: LD_VAR 0 2
44271: PPUSH
44272: CALL_OW 461
44276: PUSH
44277: LD_INT 1
44279: EQUAL
44280: IFFALSE 44340
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44282: LD_VAR 0 4
44286: PPUSH
44287: LD_STRING h
44289: PUSH
44290: LD_VAR 0 2
44294: PPUSH
44295: CALL_OW 250
44299: PUSH
44300: LD_VAR 0 2
44304: PPUSH
44305: CALL_OW 251
44309: PUSH
44310: LD_VAR 0 2
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: PUSH
44333: EMPTY
44334: LIST
44335: PPUSH
44336: CALL_OW 446
44340: GO 44264
44342: POP
44343: POP
// end ;
44344: LD_VAR 0 3
44348: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44349: LD_INT 0
44351: PPUSH
44352: PPUSH
44353: PPUSH
44354: PPUSH
44355: PPUSH
44356: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
44357: LD_VAR 0 1
44361: NOT
44362: PUSH
44363: LD_VAR 0 1
44367: PPUSH
44368: CALL_OW 263
44372: PUSH
44373: LD_INT 2
44375: EQUAL
44376: NOT
44377: OR
44378: IFFALSE 44382
// exit ;
44380: GO 44698
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44382: LD_ADDR_VAR 0 6
44386: PUSH
44387: LD_INT 22
44389: PUSH
44390: LD_VAR 0 1
44394: PPUSH
44395: CALL_OW 255
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: LD_INT 30
44409: PUSH
44410: LD_INT 36
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 34
44419: PUSH
44420: LD_INT 31
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PPUSH
44436: CALL_OW 69
44440: ST_TO_ADDR
// if not tmp then
44441: LD_VAR 0 6
44445: NOT
44446: IFFALSE 44450
// exit ;
44448: GO 44698
// result := [ ] ;
44450: LD_ADDR_VAR 0 2
44454: PUSH
44455: EMPTY
44456: ST_TO_ADDR
// for i in tmp do
44457: LD_ADDR_VAR 0 3
44461: PUSH
44462: LD_VAR 0 6
44466: PUSH
44467: FOR_IN
44468: IFFALSE 44539
// begin t := UnitsInside ( i ) ;
44470: LD_ADDR_VAR 0 4
44474: PUSH
44475: LD_VAR 0 3
44479: PPUSH
44480: CALL_OW 313
44484: ST_TO_ADDR
// if t then
44485: LD_VAR 0 4
44489: IFFALSE 44537
// for j in t do
44491: LD_ADDR_VAR 0 7
44495: PUSH
44496: LD_VAR 0 4
44500: PUSH
44501: FOR_IN
44502: IFFALSE 44535
// result := Insert ( result , result + 1 , j ) ;
44504: LD_ADDR_VAR 0 2
44508: PUSH
44509: LD_VAR 0 2
44513: PPUSH
44514: LD_VAR 0 2
44518: PUSH
44519: LD_INT 1
44521: PLUS
44522: PPUSH
44523: LD_VAR 0 7
44527: PPUSH
44528: CALL_OW 2
44532: ST_TO_ADDR
44533: GO 44501
44535: POP
44536: POP
// end ;
44537: GO 44467
44539: POP
44540: POP
// if not result then
44541: LD_VAR 0 2
44545: NOT
44546: IFFALSE 44550
// exit ;
44548: GO 44698
// mech := result [ 1 ] ;
44550: LD_ADDR_VAR 0 5
44554: PUSH
44555: LD_VAR 0 2
44559: PUSH
44560: LD_INT 1
44562: ARRAY
44563: ST_TO_ADDR
// if result > 1 then
44564: LD_VAR 0 2
44568: PUSH
44569: LD_INT 1
44571: GREATER
44572: IFFALSE 44684
// for i = 2 to result do
44574: LD_ADDR_VAR 0 3
44578: PUSH
44579: DOUBLE
44580: LD_INT 2
44582: DEC
44583: ST_TO_ADDR
44584: LD_VAR 0 2
44588: PUSH
44589: FOR_TO
44590: IFFALSE 44682
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44592: LD_ADDR_VAR 0 4
44596: PUSH
44597: LD_VAR 0 2
44601: PUSH
44602: LD_VAR 0 3
44606: ARRAY
44607: PPUSH
44608: LD_INT 3
44610: PPUSH
44611: CALL_OW 259
44615: PUSH
44616: LD_VAR 0 2
44620: PUSH
44621: LD_VAR 0 3
44625: ARRAY
44626: PPUSH
44627: CALL_OW 432
44631: MINUS
44632: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44633: LD_VAR 0 4
44637: PUSH
44638: LD_VAR 0 5
44642: PPUSH
44643: LD_INT 3
44645: PPUSH
44646: CALL_OW 259
44650: PUSH
44651: LD_VAR 0 5
44655: PPUSH
44656: CALL_OW 432
44660: MINUS
44661: GREATEREQUAL
44662: IFFALSE 44680
// mech := result [ i ] ;
44664: LD_ADDR_VAR 0 5
44668: PUSH
44669: LD_VAR 0 2
44673: PUSH
44674: LD_VAR 0 3
44678: ARRAY
44679: ST_TO_ADDR
// end ;
44680: GO 44589
44682: POP
44683: POP
// ComLinkTo ( vehicle , mech ) ;
44684: LD_VAR 0 1
44688: PPUSH
44689: LD_VAR 0 5
44693: PPUSH
44694: CALL_OW 135
// end ;
44698: LD_VAR 0 2
44702: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44703: LD_INT 0
44705: PPUSH
44706: PPUSH
44707: PPUSH
44708: PPUSH
44709: PPUSH
44710: PPUSH
44711: PPUSH
44712: PPUSH
44713: PPUSH
44714: PPUSH
44715: PPUSH
44716: PPUSH
44717: PPUSH
// result := [ ] ;
44718: LD_ADDR_VAR 0 7
44722: PUSH
44723: EMPTY
44724: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44725: LD_VAR 0 1
44729: PPUSH
44730: CALL_OW 266
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: IN
44745: NOT
44746: IFFALSE 44750
// exit ;
44748: GO 46384
// if name then
44750: LD_VAR 0 3
44754: IFFALSE 44770
// SetBName ( base_dep , name ) ;
44756: LD_VAR 0 1
44760: PPUSH
44761: LD_VAR 0 3
44765: PPUSH
44766: CALL_OW 500
// base := GetBase ( base_dep ) ;
44770: LD_ADDR_VAR 0 15
44774: PUSH
44775: LD_VAR 0 1
44779: PPUSH
44780: CALL_OW 274
44784: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44785: LD_ADDR_VAR 0 16
44789: PUSH
44790: LD_VAR 0 1
44794: PPUSH
44795: CALL_OW 255
44799: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44800: LD_ADDR_VAR 0 17
44804: PUSH
44805: LD_VAR 0 1
44809: PPUSH
44810: CALL_OW 248
44814: ST_TO_ADDR
// if sources then
44815: LD_VAR 0 5
44819: IFFALSE 44866
// for i = 1 to 3 do
44821: LD_ADDR_VAR 0 8
44825: PUSH
44826: DOUBLE
44827: LD_INT 1
44829: DEC
44830: ST_TO_ADDR
44831: LD_INT 3
44833: PUSH
44834: FOR_TO
44835: IFFALSE 44864
// AddResourceType ( base , i , sources [ i ] ) ;
44837: LD_VAR 0 15
44841: PPUSH
44842: LD_VAR 0 8
44846: PPUSH
44847: LD_VAR 0 5
44851: PUSH
44852: LD_VAR 0 8
44856: ARRAY
44857: PPUSH
44858: CALL_OW 276
44862: GO 44834
44864: POP
44865: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44866: LD_ADDR_VAR 0 18
44870: PUSH
44871: LD_VAR 0 15
44875: PPUSH
44876: LD_VAR 0 2
44880: PPUSH
44881: LD_INT 1
44883: PPUSH
44884: CALL 44126 0 3
44888: ST_TO_ADDR
// InitHc ;
44889: CALL_OW 19
// InitUc ;
44893: CALL_OW 18
// uc_side := side ;
44897: LD_ADDR_OWVAR 20
44901: PUSH
44902: LD_VAR 0 16
44906: ST_TO_ADDR
// uc_nation := nation ;
44907: LD_ADDR_OWVAR 21
44911: PUSH
44912: LD_VAR 0 17
44916: ST_TO_ADDR
// if buildings then
44917: LD_VAR 0 18
44921: IFFALSE 46243
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44923: LD_ADDR_VAR 0 19
44927: PUSH
44928: LD_VAR 0 18
44932: PPUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 30
44938: PUSH
44939: LD_INT 29
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 30
44948: PUSH
44949: LD_INT 30
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: PPUSH
44961: CALL_OW 72
44965: ST_TO_ADDR
// if tmp then
44966: LD_VAR 0 19
44970: IFFALSE 45018
// for i in tmp do
44972: LD_ADDR_VAR 0 8
44976: PUSH
44977: LD_VAR 0 19
44981: PUSH
44982: FOR_IN
44983: IFFALSE 45016
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44985: LD_VAR 0 8
44989: PPUSH
44990: CALL_OW 250
44994: PPUSH
44995: LD_VAR 0 8
44999: PPUSH
45000: CALL_OW 251
45004: PPUSH
45005: LD_VAR 0 16
45009: PPUSH
45010: CALL_OW 441
45014: GO 44982
45016: POP
45017: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45018: LD_VAR 0 18
45022: PPUSH
45023: LD_INT 2
45025: PUSH
45026: LD_INT 30
45028: PUSH
45029: LD_INT 32
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 30
45038: PUSH
45039: LD_INT 33
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: LIST
45050: PPUSH
45051: CALL_OW 72
45055: IFFALSE 45143
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45057: LD_ADDR_VAR 0 8
45061: PUSH
45062: LD_VAR 0 18
45066: PPUSH
45067: LD_INT 2
45069: PUSH
45070: LD_INT 30
45072: PUSH
45073: LD_INT 32
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 30
45082: PUSH
45083: LD_INT 33
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: LIST
45094: PPUSH
45095: CALL_OW 72
45099: PUSH
45100: FOR_IN
45101: IFFALSE 45141
// begin if not GetBWeapon ( i ) then
45103: LD_VAR 0 8
45107: PPUSH
45108: CALL_OW 269
45112: NOT
45113: IFFALSE 45139
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45115: LD_VAR 0 8
45119: PPUSH
45120: LD_VAR 0 8
45124: PPUSH
45125: LD_VAR 0 2
45129: PPUSH
45130: CALL 46389 0 2
45134: PPUSH
45135: CALL_OW 431
// end ;
45139: GO 45100
45141: POP
45142: POP
// end ; for i = 1 to personel do
45143: LD_ADDR_VAR 0 8
45147: PUSH
45148: DOUBLE
45149: LD_INT 1
45151: DEC
45152: ST_TO_ADDR
45153: LD_VAR 0 6
45157: PUSH
45158: FOR_TO
45159: IFFALSE 46223
// begin if i > 4 then
45161: LD_VAR 0 8
45165: PUSH
45166: LD_INT 4
45168: GREATER
45169: IFFALSE 45173
// break ;
45171: GO 46223
// case i of 1 :
45173: LD_VAR 0 8
45177: PUSH
45178: LD_INT 1
45180: DOUBLE
45181: EQUAL
45182: IFTRUE 45186
45184: GO 45266
45186: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45187: LD_ADDR_VAR 0 12
45191: PUSH
45192: LD_VAR 0 18
45196: PPUSH
45197: LD_INT 22
45199: PUSH
45200: LD_VAR 0 16
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 58
45211: PUSH
45212: EMPTY
45213: LIST
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: LD_INT 30
45220: PUSH
45221: LD_INT 32
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 30
45230: PUSH
45231: LD_INT 4
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 30
45240: PUSH
45241: LD_INT 5
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: LIST
45258: PPUSH
45259: CALL_OW 72
45263: ST_TO_ADDR
45264: GO 45488
45266: LD_INT 2
45268: DOUBLE
45269: EQUAL
45270: IFTRUE 45274
45272: GO 45336
45274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45275: LD_ADDR_VAR 0 12
45279: PUSH
45280: LD_VAR 0 18
45284: PPUSH
45285: LD_INT 22
45287: PUSH
45288: LD_VAR 0 16
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 30
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 30
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: LIST
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PPUSH
45329: CALL_OW 72
45333: ST_TO_ADDR
45334: GO 45488
45336: LD_INT 3
45338: DOUBLE
45339: EQUAL
45340: IFTRUE 45344
45342: GO 45406
45344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45345: LD_ADDR_VAR 0 12
45349: PUSH
45350: LD_VAR 0 18
45354: PPUSH
45355: LD_INT 22
45357: PUSH
45358: LD_VAR 0 16
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: LD_INT 30
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 30
45382: PUSH
45383: LD_INT 3
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PPUSH
45399: CALL_OW 72
45403: ST_TO_ADDR
45404: GO 45488
45406: LD_INT 4
45408: DOUBLE
45409: EQUAL
45410: IFTRUE 45414
45412: GO 45487
45414: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45415: LD_ADDR_VAR 0 12
45419: PUSH
45420: LD_VAR 0 18
45424: PPUSH
45425: LD_INT 22
45427: PUSH
45428: LD_VAR 0 16
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 30
45442: PUSH
45443: LD_INT 6
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 30
45452: PUSH
45453: LD_INT 7
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 30
45462: PUSH
45463: LD_INT 8
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PPUSH
45480: CALL_OW 72
45484: ST_TO_ADDR
45485: GO 45488
45487: POP
// if i = 1 then
45488: LD_VAR 0 8
45492: PUSH
45493: LD_INT 1
45495: EQUAL
45496: IFFALSE 45607
// begin tmp := [ ] ;
45498: LD_ADDR_VAR 0 19
45502: PUSH
45503: EMPTY
45504: ST_TO_ADDR
// for j in f do
45505: LD_ADDR_VAR 0 9
45509: PUSH
45510: LD_VAR 0 12
45514: PUSH
45515: FOR_IN
45516: IFFALSE 45589
// if GetBType ( j ) = b_bunker then
45518: LD_VAR 0 9
45522: PPUSH
45523: CALL_OW 266
45527: PUSH
45528: LD_INT 32
45530: EQUAL
45531: IFFALSE 45558
// tmp := Insert ( tmp , 1 , j ) else
45533: LD_ADDR_VAR 0 19
45537: PUSH
45538: LD_VAR 0 19
45542: PPUSH
45543: LD_INT 1
45545: PPUSH
45546: LD_VAR 0 9
45550: PPUSH
45551: CALL_OW 2
45555: ST_TO_ADDR
45556: GO 45587
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45558: LD_ADDR_VAR 0 19
45562: PUSH
45563: LD_VAR 0 19
45567: PPUSH
45568: LD_VAR 0 19
45572: PUSH
45573: LD_INT 1
45575: PLUS
45576: PPUSH
45577: LD_VAR 0 9
45581: PPUSH
45582: CALL_OW 2
45586: ST_TO_ADDR
45587: GO 45515
45589: POP
45590: POP
// if tmp then
45591: LD_VAR 0 19
45595: IFFALSE 45607
// f := tmp ;
45597: LD_ADDR_VAR 0 12
45601: PUSH
45602: LD_VAR 0 19
45606: ST_TO_ADDR
// end ; x := personel [ i ] ;
45607: LD_ADDR_VAR 0 13
45611: PUSH
45612: LD_VAR 0 6
45616: PUSH
45617: LD_VAR 0 8
45621: ARRAY
45622: ST_TO_ADDR
// if x = - 1 then
45623: LD_VAR 0 13
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: EQUAL
45632: IFFALSE 45841
// begin for j in f do
45634: LD_ADDR_VAR 0 9
45638: PUSH
45639: LD_VAR 0 12
45643: PUSH
45644: FOR_IN
45645: IFFALSE 45837
// repeat InitHc ;
45647: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45651: LD_VAR 0 9
45655: PPUSH
45656: CALL_OW 266
45660: PUSH
45661: LD_INT 5
45663: EQUAL
45664: IFFALSE 45734
// begin if UnitsInside ( j ) < 3 then
45666: LD_VAR 0 9
45670: PPUSH
45671: CALL_OW 313
45675: PUSH
45676: LD_INT 3
45678: LESS
45679: IFFALSE 45715
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45681: LD_INT 0
45683: PPUSH
45684: LD_INT 5
45686: PUSH
45687: LD_INT 8
45689: PUSH
45690: LD_INT 9
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: LIST
45697: PUSH
45698: LD_VAR 0 17
45702: ARRAY
45703: PPUSH
45704: LD_VAR 0 4
45708: PPUSH
45709: CALL_OW 380
45713: GO 45732
// PrepareHuman ( false , i , skill ) ;
45715: LD_INT 0
45717: PPUSH
45718: LD_VAR 0 8
45722: PPUSH
45723: LD_VAR 0 4
45727: PPUSH
45728: CALL_OW 380
// end else
45732: GO 45751
// PrepareHuman ( false , i , skill ) ;
45734: LD_INT 0
45736: PPUSH
45737: LD_VAR 0 8
45741: PPUSH
45742: LD_VAR 0 4
45746: PPUSH
45747: CALL_OW 380
// un := CreateHuman ;
45751: LD_ADDR_VAR 0 14
45755: PUSH
45756: CALL_OW 44
45760: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45761: LD_ADDR_VAR 0 7
45765: PUSH
45766: LD_VAR 0 7
45770: PPUSH
45771: LD_INT 1
45773: PPUSH
45774: LD_VAR 0 14
45778: PPUSH
45779: CALL_OW 2
45783: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45784: LD_VAR 0 14
45788: PPUSH
45789: LD_VAR 0 9
45793: PPUSH
45794: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45798: LD_VAR 0 9
45802: PPUSH
45803: CALL_OW 313
45807: PUSH
45808: LD_INT 6
45810: EQUAL
45811: PUSH
45812: LD_VAR 0 9
45816: PPUSH
45817: CALL_OW 266
45821: PUSH
45822: LD_INT 32
45824: PUSH
45825: LD_INT 31
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: IN
45832: OR
45833: IFFALSE 45647
45835: GO 45644
45837: POP
45838: POP
// end else
45839: GO 46221
// for j = 1 to x do
45841: LD_ADDR_VAR 0 9
45845: PUSH
45846: DOUBLE
45847: LD_INT 1
45849: DEC
45850: ST_TO_ADDR
45851: LD_VAR 0 13
45855: PUSH
45856: FOR_TO
45857: IFFALSE 46219
// begin InitHc ;
45859: CALL_OW 19
// if not f then
45863: LD_VAR 0 12
45867: NOT
45868: IFFALSE 45957
// begin PrepareHuman ( false , i , skill ) ;
45870: LD_INT 0
45872: PPUSH
45873: LD_VAR 0 8
45877: PPUSH
45878: LD_VAR 0 4
45882: PPUSH
45883: CALL_OW 380
// un := CreateHuman ;
45887: LD_ADDR_VAR 0 14
45891: PUSH
45892: CALL_OW 44
45896: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45897: LD_ADDR_VAR 0 7
45901: PUSH
45902: LD_VAR 0 7
45906: PPUSH
45907: LD_INT 1
45909: PPUSH
45910: LD_VAR 0 14
45914: PPUSH
45915: CALL_OW 2
45919: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45920: LD_VAR 0 14
45924: PPUSH
45925: LD_VAR 0 1
45929: PPUSH
45930: CALL_OW 250
45934: PPUSH
45935: LD_VAR 0 1
45939: PPUSH
45940: CALL_OW 251
45944: PPUSH
45945: LD_INT 10
45947: PPUSH
45948: LD_INT 0
45950: PPUSH
45951: CALL_OW 50
// continue ;
45955: GO 45856
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45957: LD_VAR 0 12
45961: PUSH
45962: LD_INT 1
45964: ARRAY
45965: PPUSH
45966: CALL_OW 313
45970: PUSH
45971: LD_VAR 0 12
45975: PUSH
45976: LD_INT 1
45978: ARRAY
45979: PPUSH
45980: CALL_OW 266
45984: PUSH
45985: LD_INT 32
45987: PUSH
45988: LD_INT 31
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: IN
45995: AND
45996: PUSH
45997: LD_VAR 0 12
46001: PUSH
46002: LD_INT 1
46004: ARRAY
46005: PPUSH
46006: CALL_OW 313
46010: PUSH
46011: LD_INT 6
46013: EQUAL
46014: OR
46015: IFFALSE 46035
// f := Delete ( f , 1 ) ;
46017: LD_ADDR_VAR 0 12
46021: PUSH
46022: LD_VAR 0 12
46026: PPUSH
46027: LD_INT 1
46029: PPUSH
46030: CALL_OW 3
46034: ST_TO_ADDR
// if not f then
46035: LD_VAR 0 12
46039: NOT
46040: IFFALSE 46058
// begin x := x + 2 ;
46042: LD_ADDR_VAR 0 13
46046: PUSH
46047: LD_VAR 0 13
46051: PUSH
46052: LD_INT 2
46054: PLUS
46055: ST_TO_ADDR
// continue ;
46056: GO 45856
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46058: LD_VAR 0 12
46062: PUSH
46063: LD_INT 1
46065: ARRAY
46066: PPUSH
46067: CALL_OW 266
46071: PUSH
46072: LD_INT 5
46074: EQUAL
46075: IFFALSE 46149
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46077: LD_VAR 0 12
46081: PUSH
46082: LD_INT 1
46084: ARRAY
46085: PPUSH
46086: CALL_OW 313
46090: PUSH
46091: LD_INT 3
46093: LESS
46094: IFFALSE 46130
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46096: LD_INT 0
46098: PPUSH
46099: LD_INT 5
46101: PUSH
46102: LD_INT 8
46104: PUSH
46105: LD_INT 9
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: PUSH
46113: LD_VAR 0 17
46117: ARRAY
46118: PPUSH
46119: LD_VAR 0 4
46123: PPUSH
46124: CALL_OW 380
46128: GO 46147
// PrepareHuman ( false , i , skill ) ;
46130: LD_INT 0
46132: PPUSH
46133: LD_VAR 0 8
46137: PPUSH
46138: LD_VAR 0 4
46142: PPUSH
46143: CALL_OW 380
// end else
46147: GO 46166
// PrepareHuman ( false , i , skill ) ;
46149: LD_INT 0
46151: PPUSH
46152: LD_VAR 0 8
46156: PPUSH
46157: LD_VAR 0 4
46161: PPUSH
46162: CALL_OW 380
// un := CreateHuman ;
46166: LD_ADDR_VAR 0 14
46170: PUSH
46171: CALL_OW 44
46175: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46176: LD_ADDR_VAR 0 7
46180: PUSH
46181: LD_VAR 0 7
46185: PPUSH
46186: LD_INT 1
46188: PPUSH
46189: LD_VAR 0 14
46193: PPUSH
46194: CALL_OW 2
46198: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46199: LD_VAR 0 14
46203: PPUSH
46204: LD_VAR 0 12
46208: PUSH
46209: LD_INT 1
46211: ARRAY
46212: PPUSH
46213: CALL_OW 52
// end ;
46217: GO 45856
46219: POP
46220: POP
// end ;
46221: GO 45158
46223: POP
46224: POP
// result := result ^ buildings ;
46225: LD_ADDR_VAR 0 7
46229: PUSH
46230: LD_VAR 0 7
46234: PUSH
46235: LD_VAR 0 18
46239: ADD
46240: ST_TO_ADDR
// end else
46241: GO 46384
// begin for i = 1 to personel do
46243: LD_ADDR_VAR 0 8
46247: PUSH
46248: DOUBLE
46249: LD_INT 1
46251: DEC
46252: ST_TO_ADDR
46253: LD_VAR 0 6
46257: PUSH
46258: FOR_TO
46259: IFFALSE 46382
// begin if i > 4 then
46261: LD_VAR 0 8
46265: PUSH
46266: LD_INT 4
46268: GREATER
46269: IFFALSE 46273
// break ;
46271: GO 46382
// x := personel [ i ] ;
46273: LD_ADDR_VAR 0 13
46277: PUSH
46278: LD_VAR 0 6
46282: PUSH
46283: LD_VAR 0 8
46287: ARRAY
46288: ST_TO_ADDR
// if x = - 1 then
46289: LD_VAR 0 13
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: EQUAL
46298: IFFALSE 46302
// continue ;
46300: GO 46258
// PrepareHuman ( false , i , skill ) ;
46302: LD_INT 0
46304: PPUSH
46305: LD_VAR 0 8
46309: PPUSH
46310: LD_VAR 0 4
46314: PPUSH
46315: CALL_OW 380
// un := CreateHuman ;
46319: LD_ADDR_VAR 0 14
46323: PUSH
46324: CALL_OW 44
46328: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46329: LD_VAR 0 14
46333: PPUSH
46334: LD_VAR 0 1
46338: PPUSH
46339: CALL_OW 250
46343: PPUSH
46344: LD_VAR 0 1
46348: PPUSH
46349: CALL_OW 251
46353: PPUSH
46354: LD_INT 10
46356: PPUSH
46357: LD_INT 0
46359: PPUSH
46360: CALL_OW 50
// result := result ^ un ;
46364: LD_ADDR_VAR 0 7
46368: PUSH
46369: LD_VAR 0 7
46373: PUSH
46374: LD_VAR 0 14
46378: ADD
46379: ST_TO_ADDR
// end ;
46380: GO 46258
46382: POP
46383: POP
// end ; end ;
46384: LD_VAR 0 7
46388: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46389: LD_INT 0
46391: PPUSH
46392: PPUSH
46393: PPUSH
46394: PPUSH
46395: PPUSH
46396: PPUSH
46397: PPUSH
46398: PPUSH
46399: PPUSH
46400: PPUSH
46401: PPUSH
46402: PPUSH
46403: PPUSH
46404: PPUSH
46405: PPUSH
46406: PPUSH
// result := false ;
46407: LD_ADDR_VAR 0 3
46411: PUSH
46412: LD_INT 0
46414: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46415: LD_VAR 0 1
46419: NOT
46420: PUSH
46421: LD_VAR 0 1
46425: PPUSH
46426: CALL_OW 266
46430: PUSH
46431: LD_INT 32
46433: PUSH
46434: LD_INT 33
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: IN
46441: NOT
46442: OR
46443: IFFALSE 46447
// exit ;
46445: GO 47586
// nat := GetNation ( tower ) ;
46447: LD_ADDR_VAR 0 12
46451: PUSH
46452: LD_VAR 0 1
46456: PPUSH
46457: CALL_OW 248
46461: ST_TO_ADDR
// side := GetSide ( tower ) ;
46462: LD_ADDR_VAR 0 16
46466: PUSH
46467: LD_VAR 0 1
46471: PPUSH
46472: CALL_OW 255
46476: ST_TO_ADDR
// x := GetX ( tower ) ;
46477: LD_ADDR_VAR 0 10
46481: PUSH
46482: LD_VAR 0 1
46486: PPUSH
46487: CALL_OW 250
46491: ST_TO_ADDR
// y := GetY ( tower ) ;
46492: LD_ADDR_VAR 0 11
46496: PUSH
46497: LD_VAR 0 1
46501: PPUSH
46502: CALL_OW 251
46506: ST_TO_ADDR
// if not x or not y then
46507: LD_VAR 0 10
46511: NOT
46512: PUSH
46513: LD_VAR 0 11
46517: NOT
46518: OR
46519: IFFALSE 46523
// exit ;
46521: GO 47586
// weapon := 0 ;
46523: LD_ADDR_VAR 0 18
46527: PUSH
46528: LD_INT 0
46530: ST_TO_ADDR
// fac_list := [ ] ;
46531: LD_ADDR_VAR 0 17
46535: PUSH
46536: EMPTY
46537: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46538: LD_ADDR_VAR 0 6
46542: PUSH
46543: LD_VAR 0 1
46547: PPUSH
46548: CALL_OW 274
46552: PPUSH
46553: LD_VAR 0 2
46557: PPUSH
46558: LD_INT 0
46560: PPUSH
46561: CALL 44126 0 3
46565: PPUSH
46566: LD_INT 30
46568: PUSH
46569: LD_INT 3
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PPUSH
46576: CALL_OW 72
46580: ST_TO_ADDR
// if not factories then
46581: LD_VAR 0 6
46585: NOT
46586: IFFALSE 46590
// exit ;
46588: GO 47586
// for i in factories do
46590: LD_ADDR_VAR 0 8
46594: PUSH
46595: LD_VAR 0 6
46599: PUSH
46600: FOR_IN
46601: IFFALSE 46626
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46603: LD_ADDR_VAR 0 17
46607: PUSH
46608: LD_VAR 0 17
46612: PUSH
46613: LD_VAR 0 8
46617: PPUSH
46618: CALL_OW 478
46622: UNION
46623: ST_TO_ADDR
46624: GO 46600
46626: POP
46627: POP
// if not fac_list then
46628: LD_VAR 0 17
46632: NOT
46633: IFFALSE 46637
// exit ;
46635: GO 47586
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46637: LD_ADDR_VAR 0 5
46641: PUSH
46642: LD_INT 4
46644: PUSH
46645: LD_INT 5
46647: PUSH
46648: LD_INT 9
46650: PUSH
46651: LD_INT 10
46653: PUSH
46654: LD_INT 6
46656: PUSH
46657: LD_INT 7
46659: PUSH
46660: LD_INT 11
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 27
46674: PUSH
46675: LD_INT 28
46677: PUSH
46678: LD_INT 26
46680: PUSH
46681: LD_INT 30
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 43
46692: PUSH
46693: LD_INT 44
46695: PUSH
46696: LD_INT 46
46698: PUSH
46699: LD_INT 45
46701: PUSH
46702: LD_INT 47
46704: PUSH
46705: LD_INT 49
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: LIST
46720: PUSH
46721: LD_VAR 0 12
46725: ARRAY
46726: ST_TO_ADDR
// for i in list do
46727: LD_ADDR_VAR 0 8
46731: PUSH
46732: LD_VAR 0 5
46736: PUSH
46737: FOR_IN
46738: IFFALSE 46771
// if not i in fac_list then
46740: LD_VAR 0 8
46744: PUSH
46745: LD_VAR 0 17
46749: IN
46750: NOT
46751: IFFALSE 46769
// list := list diff i ;
46753: LD_ADDR_VAR 0 5
46757: PUSH
46758: LD_VAR 0 5
46762: PUSH
46763: LD_VAR 0 8
46767: DIFF
46768: ST_TO_ADDR
46769: GO 46737
46771: POP
46772: POP
// if not list then
46773: LD_VAR 0 5
46777: NOT
46778: IFFALSE 46782
// exit ;
46780: GO 47586
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46782: LD_VAR 0 12
46786: PUSH
46787: LD_INT 3
46789: EQUAL
46790: PUSH
46791: LD_INT 49
46793: PUSH
46794: LD_VAR 0 5
46798: IN
46799: AND
46800: PUSH
46801: LD_INT 31
46803: PPUSH
46804: LD_VAR 0 16
46808: PPUSH
46809: CALL_OW 321
46813: PUSH
46814: LD_INT 2
46816: EQUAL
46817: AND
46818: IFFALSE 46878
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46820: LD_INT 22
46822: PUSH
46823: LD_VAR 0 16
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 35
46834: PUSH
46835: LD_INT 49
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 91
46844: PUSH
46845: LD_VAR 0 1
46849: PUSH
46850: LD_INT 10
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: LIST
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: LIST
46862: PPUSH
46863: CALL_OW 69
46867: NOT
46868: IFFALSE 46878
// weapon := ru_time_lapser ;
46870: LD_ADDR_VAR 0 18
46874: PUSH
46875: LD_INT 49
46877: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46878: LD_VAR 0 12
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: IN
46893: PUSH
46894: LD_INT 11
46896: PUSH
46897: LD_VAR 0 5
46901: IN
46902: PUSH
46903: LD_INT 30
46905: PUSH
46906: LD_VAR 0 5
46910: IN
46911: OR
46912: AND
46913: PUSH
46914: LD_INT 6
46916: PPUSH
46917: LD_VAR 0 16
46921: PPUSH
46922: CALL_OW 321
46926: PUSH
46927: LD_INT 2
46929: EQUAL
46930: AND
46931: IFFALSE 47096
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46933: LD_INT 22
46935: PUSH
46936: LD_VAR 0 16
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: LD_INT 35
46950: PUSH
46951: LD_INT 11
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 35
46960: PUSH
46961: LD_INT 30
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 91
46975: PUSH
46976: LD_VAR 0 1
46980: PUSH
46981: LD_INT 18
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: LIST
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: LIST
46993: PPUSH
46994: CALL_OW 69
46998: NOT
46999: PUSH
47000: LD_INT 22
47002: PUSH
47003: LD_VAR 0 16
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: LD_INT 30
47017: PUSH
47018: LD_INT 32
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 30
47027: PUSH
47028: LD_INT 33
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 91
47042: PUSH
47043: LD_VAR 0 1
47047: PUSH
47048: LD_INT 12
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: LIST
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: LIST
47060: PUSH
47061: EMPTY
47062: LIST
47063: PPUSH
47064: CALL_OW 69
47068: PUSH
47069: LD_INT 2
47071: GREATER
47072: AND
47073: IFFALSE 47096
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47075: LD_ADDR_VAR 0 18
47079: PUSH
47080: LD_INT 11
47082: PUSH
47083: LD_INT 30
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_VAR 0 12
47094: ARRAY
47095: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47096: LD_VAR 0 18
47100: NOT
47101: PUSH
47102: LD_INT 40
47104: PPUSH
47105: LD_VAR 0 16
47109: PPUSH
47110: CALL_OW 321
47114: PUSH
47115: LD_INT 2
47117: EQUAL
47118: AND
47119: PUSH
47120: LD_INT 7
47122: PUSH
47123: LD_VAR 0 5
47127: IN
47128: PUSH
47129: LD_INT 28
47131: PUSH
47132: LD_VAR 0 5
47136: IN
47137: OR
47138: PUSH
47139: LD_INT 45
47141: PUSH
47142: LD_VAR 0 5
47146: IN
47147: OR
47148: AND
47149: IFFALSE 47403
// begin hex := GetHexInfo ( x , y ) ;
47151: LD_ADDR_VAR 0 4
47155: PUSH
47156: LD_VAR 0 10
47160: PPUSH
47161: LD_VAR 0 11
47165: PPUSH
47166: CALL_OW 546
47170: ST_TO_ADDR
// if hex [ 1 ] then
47171: LD_VAR 0 4
47175: PUSH
47176: LD_INT 1
47178: ARRAY
47179: IFFALSE 47183
// exit ;
47181: GO 47586
// height := hex [ 2 ] ;
47183: LD_ADDR_VAR 0 15
47187: PUSH
47188: LD_VAR 0 4
47192: PUSH
47193: LD_INT 2
47195: ARRAY
47196: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47197: LD_ADDR_VAR 0 14
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 3
47210: PUSH
47211: LD_INT 5
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: ST_TO_ADDR
// for i in tmp do
47220: LD_ADDR_VAR 0 8
47224: PUSH
47225: LD_VAR 0 14
47229: PUSH
47230: FOR_IN
47231: IFFALSE 47401
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47233: LD_ADDR_VAR 0 9
47237: PUSH
47238: LD_VAR 0 10
47242: PPUSH
47243: LD_VAR 0 8
47247: PPUSH
47248: LD_INT 5
47250: PPUSH
47251: CALL_OW 272
47255: PUSH
47256: LD_VAR 0 11
47260: PPUSH
47261: LD_VAR 0 8
47265: PPUSH
47266: LD_INT 5
47268: PPUSH
47269: CALL_OW 273
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47278: LD_VAR 0 9
47282: PUSH
47283: LD_INT 1
47285: ARRAY
47286: PPUSH
47287: LD_VAR 0 9
47291: PUSH
47292: LD_INT 2
47294: ARRAY
47295: PPUSH
47296: CALL_OW 488
47300: IFFALSE 47399
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47302: LD_ADDR_VAR 0 4
47306: PUSH
47307: LD_VAR 0 9
47311: PUSH
47312: LD_INT 1
47314: ARRAY
47315: PPUSH
47316: LD_VAR 0 9
47320: PUSH
47321: LD_INT 2
47323: ARRAY
47324: PPUSH
47325: CALL_OW 546
47329: ST_TO_ADDR
// if hex [ 1 ] then
47330: LD_VAR 0 4
47334: PUSH
47335: LD_INT 1
47337: ARRAY
47338: IFFALSE 47342
// continue ;
47340: GO 47230
// h := hex [ 2 ] ;
47342: LD_ADDR_VAR 0 13
47346: PUSH
47347: LD_VAR 0 4
47351: PUSH
47352: LD_INT 2
47354: ARRAY
47355: ST_TO_ADDR
// if h + 7 < height then
47356: LD_VAR 0 13
47360: PUSH
47361: LD_INT 7
47363: PLUS
47364: PUSH
47365: LD_VAR 0 15
47369: LESS
47370: IFFALSE 47399
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47372: LD_ADDR_VAR 0 18
47376: PUSH
47377: LD_INT 7
47379: PUSH
47380: LD_INT 28
47382: PUSH
47383: LD_INT 45
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: PUSH
47391: LD_VAR 0 12
47395: ARRAY
47396: ST_TO_ADDR
// break ;
47397: GO 47401
// end ; end ; end ;
47399: GO 47230
47401: POP
47402: POP
// end ; if not weapon then
47403: LD_VAR 0 18
47407: NOT
47408: IFFALSE 47468
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47410: LD_ADDR_VAR 0 5
47414: PUSH
47415: LD_VAR 0 5
47419: PUSH
47420: LD_INT 11
47422: PUSH
47423: LD_INT 30
47425: PUSH
47426: LD_INT 49
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: LIST
47433: DIFF
47434: ST_TO_ADDR
// if not list then
47435: LD_VAR 0 5
47439: NOT
47440: IFFALSE 47444
// exit ;
47442: GO 47586
// weapon := list [ rand ( 1 , list ) ] ;
47444: LD_ADDR_VAR 0 18
47448: PUSH
47449: LD_VAR 0 5
47453: PUSH
47454: LD_INT 1
47456: PPUSH
47457: LD_VAR 0 5
47461: PPUSH
47462: CALL_OW 12
47466: ARRAY
47467: ST_TO_ADDR
// end ; if weapon then
47468: LD_VAR 0 18
47472: IFFALSE 47586
// begin tmp := CostOfWeapon ( weapon ) ;
47474: LD_ADDR_VAR 0 14
47478: PUSH
47479: LD_VAR 0 18
47483: PPUSH
47484: CALL_OW 451
47488: ST_TO_ADDR
// j := GetBase ( tower ) ;
47489: LD_ADDR_VAR 0 9
47493: PUSH
47494: LD_VAR 0 1
47498: PPUSH
47499: CALL_OW 274
47503: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47504: LD_VAR 0 9
47508: PPUSH
47509: LD_INT 1
47511: PPUSH
47512: CALL_OW 275
47516: PUSH
47517: LD_VAR 0 14
47521: PUSH
47522: LD_INT 1
47524: ARRAY
47525: GREATEREQUAL
47526: PUSH
47527: LD_VAR 0 9
47531: PPUSH
47532: LD_INT 2
47534: PPUSH
47535: CALL_OW 275
47539: PUSH
47540: LD_VAR 0 14
47544: PUSH
47545: LD_INT 2
47547: ARRAY
47548: GREATEREQUAL
47549: AND
47550: PUSH
47551: LD_VAR 0 9
47555: PPUSH
47556: LD_INT 3
47558: PPUSH
47559: CALL_OW 275
47563: PUSH
47564: LD_VAR 0 14
47568: PUSH
47569: LD_INT 3
47571: ARRAY
47572: GREATEREQUAL
47573: AND
47574: IFFALSE 47586
// result := weapon ;
47576: LD_ADDR_VAR 0 3
47580: PUSH
47581: LD_VAR 0 18
47585: ST_TO_ADDR
// end ; end ;
47586: LD_VAR 0 3
47590: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47591: LD_INT 0
47593: PPUSH
47594: PPUSH
// result := true ;
47595: LD_ADDR_VAR 0 3
47599: PUSH
47600: LD_INT 1
47602: ST_TO_ADDR
// if array1 = array2 then
47603: LD_VAR 0 1
47607: PUSH
47608: LD_VAR 0 2
47612: EQUAL
47613: IFFALSE 47673
// begin for i = 1 to array1 do
47615: LD_ADDR_VAR 0 4
47619: PUSH
47620: DOUBLE
47621: LD_INT 1
47623: DEC
47624: ST_TO_ADDR
47625: LD_VAR 0 1
47629: PUSH
47630: FOR_TO
47631: IFFALSE 47669
// if array1 [ i ] <> array2 [ i ] then
47633: LD_VAR 0 1
47637: PUSH
47638: LD_VAR 0 4
47642: ARRAY
47643: PUSH
47644: LD_VAR 0 2
47648: PUSH
47649: LD_VAR 0 4
47653: ARRAY
47654: NONEQUAL
47655: IFFALSE 47667
// begin result := false ;
47657: LD_ADDR_VAR 0 3
47661: PUSH
47662: LD_INT 0
47664: ST_TO_ADDR
// break ;
47665: GO 47669
// end ;
47667: GO 47630
47669: POP
47670: POP
// end else
47671: GO 47681
// result := false ;
47673: LD_ADDR_VAR 0 3
47677: PUSH
47678: LD_INT 0
47680: ST_TO_ADDR
// end ;
47681: LD_VAR 0 3
47685: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47686: LD_INT 0
47688: PPUSH
47689: PPUSH
// if not array1 or not array2 then
47690: LD_VAR 0 1
47694: NOT
47695: PUSH
47696: LD_VAR 0 2
47700: NOT
47701: OR
47702: IFFALSE 47706
// exit ;
47704: GO 47770
// result := true ;
47706: LD_ADDR_VAR 0 3
47710: PUSH
47711: LD_INT 1
47713: ST_TO_ADDR
// for i = 1 to array1 do
47714: LD_ADDR_VAR 0 4
47718: PUSH
47719: DOUBLE
47720: LD_INT 1
47722: DEC
47723: ST_TO_ADDR
47724: LD_VAR 0 1
47728: PUSH
47729: FOR_TO
47730: IFFALSE 47768
// if array1 [ i ] <> array2 [ i ] then
47732: LD_VAR 0 1
47736: PUSH
47737: LD_VAR 0 4
47741: ARRAY
47742: PUSH
47743: LD_VAR 0 2
47747: PUSH
47748: LD_VAR 0 4
47752: ARRAY
47753: NONEQUAL
47754: IFFALSE 47766
// begin result := false ;
47756: LD_ADDR_VAR 0 3
47760: PUSH
47761: LD_INT 0
47763: ST_TO_ADDR
// break ;
47764: GO 47768
// end ;
47766: GO 47729
47768: POP
47769: POP
// end ;
47770: LD_VAR 0 3
47774: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47775: LD_INT 0
47777: PPUSH
47778: PPUSH
47779: PPUSH
// pom := GetBase ( fac ) ;
47780: LD_ADDR_VAR 0 5
47784: PUSH
47785: LD_VAR 0 1
47789: PPUSH
47790: CALL_OW 274
47794: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47795: LD_ADDR_VAR 0 4
47799: PUSH
47800: LD_VAR 0 2
47804: PUSH
47805: LD_INT 1
47807: ARRAY
47808: PPUSH
47809: LD_VAR 0 2
47813: PUSH
47814: LD_INT 2
47816: ARRAY
47817: PPUSH
47818: LD_VAR 0 2
47822: PUSH
47823: LD_INT 3
47825: ARRAY
47826: PPUSH
47827: LD_VAR 0 2
47831: PUSH
47832: LD_INT 4
47834: ARRAY
47835: PPUSH
47836: CALL_OW 449
47840: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47841: LD_ADDR_VAR 0 3
47845: PUSH
47846: LD_VAR 0 5
47850: PPUSH
47851: LD_INT 1
47853: PPUSH
47854: CALL_OW 275
47858: PUSH
47859: LD_VAR 0 4
47863: PUSH
47864: LD_INT 1
47866: ARRAY
47867: GREATEREQUAL
47868: PUSH
47869: LD_VAR 0 5
47873: PPUSH
47874: LD_INT 2
47876: PPUSH
47877: CALL_OW 275
47881: PUSH
47882: LD_VAR 0 4
47886: PUSH
47887: LD_INT 2
47889: ARRAY
47890: GREATEREQUAL
47891: AND
47892: PUSH
47893: LD_VAR 0 5
47897: PPUSH
47898: LD_INT 3
47900: PPUSH
47901: CALL_OW 275
47905: PUSH
47906: LD_VAR 0 4
47910: PUSH
47911: LD_INT 3
47913: ARRAY
47914: GREATEREQUAL
47915: AND
47916: ST_TO_ADDR
// end ;
47917: LD_VAR 0 3
47921: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47922: LD_INT 0
47924: PPUSH
47925: PPUSH
47926: PPUSH
47927: PPUSH
// pom := GetBase ( building ) ;
47928: LD_ADDR_VAR 0 3
47932: PUSH
47933: LD_VAR 0 1
47937: PPUSH
47938: CALL_OW 274
47942: ST_TO_ADDR
// if not pom then
47943: LD_VAR 0 3
47947: NOT
47948: IFFALSE 47952
// exit ;
47950: GO 48122
// btype := GetBType ( building ) ;
47952: LD_ADDR_VAR 0 5
47956: PUSH
47957: LD_VAR 0 1
47961: PPUSH
47962: CALL_OW 266
47966: ST_TO_ADDR
// if btype = b_armoury then
47967: LD_VAR 0 5
47971: PUSH
47972: LD_INT 4
47974: EQUAL
47975: IFFALSE 47985
// btype := b_barracks ;
47977: LD_ADDR_VAR 0 5
47981: PUSH
47982: LD_INT 5
47984: ST_TO_ADDR
// if btype = b_depot then
47985: LD_VAR 0 5
47989: PUSH
47990: LD_INT 0
47992: EQUAL
47993: IFFALSE 48003
// btype := b_warehouse ;
47995: LD_ADDR_VAR 0 5
47999: PUSH
48000: LD_INT 1
48002: ST_TO_ADDR
// if btype = b_workshop then
48003: LD_VAR 0 5
48007: PUSH
48008: LD_INT 2
48010: EQUAL
48011: IFFALSE 48021
// btype := b_factory ;
48013: LD_ADDR_VAR 0 5
48017: PUSH
48018: LD_INT 3
48020: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48021: LD_ADDR_VAR 0 4
48025: PUSH
48026: LD_VAR 0 5
48030: PPUSH
48031: LD_VAR 0 1
48035: PPUSH
48036: CALL_OW 248
48040: PPUSH
48041: CALL_OW 450
48045: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48046: LD_ADDR_VAR 0 2
48050: PUSH
48051: LD_VAR 0 3
48055: PPUSH
48056: LD_INT 1
48058: PPUSH
48059: CALL_OW 275
48063: PUSH
48064: LD_VAR 0 4
48068: PUSH
48069: LD_INT 1
48071: ARRAY
48072: GREATEREQUAL
48073: PUSH
48074: LD_VAR 0 3
48078: PPUSH
48079: LD_INT 2
48081: PPUSH
48082: CALL_OW 275
48086: PUSH
48087: LD_VAR 0 4
48091: PUSH
48092: LD_INT 2
48094: ARRAY
48095: GREATEREQUAL
48096: AND
48097: PUSH
48098: LD_VAR 0 3
48102: PPUSH
48103: LD_INT 3
48105: PPUSH
48106: CALL_OW 275
48110: PUSH
48111: LD_VAR 0 4
48115: PUSH
48116: LD_INT 3
48118: ARRAY
48119: GREATEREQUAL
48120: AND
48121: ST_TO_ADDR
// end ;
48122: LD_VAR 0 2
48126: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48127: LD_INT 0
48129: PPUSH
48130: PPUSH
48131: PPUSH
// pom := GetBase ( building ) ;
48132: LD_ADDR_VAR 0 4
48136: PUSH
48137: LD_VAR 0 1
48141: PPUSH
48142: CALL_OW 274
48146: ST_TO_ADDR
// if not pom then
48147: LD_VAR 0 4
48151: NOT
48152: IFFALSE 48156
// exit ;
48154: GO 48257
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48156: LD_ADDR_VAR 0 5
48160: PUSH
48161: LD_VAR 0 2
48165: PPUSH
48166: LD_VAR 0 1
48170: PPUSH
48171: CALL_OW 248
48175: PPUSH
48176: CALL_OW 450
48180: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48181: LD_ADDR_VAR 0 3
48185: PUSH
48186: LD_VAR 0 4
48190: PPUSH
48191: LD_INT 1
48193: PPUSH
48194: CALL_OW 275
48198: PUSH
48199: LD_VAR 0 5
48203: PUSH
48204: LD_INT 1
48206: ARRAY
48207: GREATEREQUAL
48208: PUSH
48209: LD_VAR 0 4
48213: PPUSH
48214: LD_INT 2
48216: PPUSH
48217: CALL_OW 275
48221: PUSH
48222: LD_VAR 0 5
48226: PUSH
48227: LD_INT 2
48229: ARRAY
48230: GREATEREQUAL
48231: AND
48232: PUSH
48233: LD_VAR 0 4
48237: PPUSH
48238: LD_INT 3
48240: PPUSH
48241: CALL_OW 275
48245: PUSH
48246: LD_VAR 0 5
48250: PUSH
48251: LD_INT 3
48253: ARRAY
48254: GREATEREQUAL
48255: AND
48256: ST_TO_ADDR
// end ;
48257: LD_VAR 0 3
48261: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48262: LD_INT 0
48264: PPUSH
48265: PPUSH
48266: PPUSH
48267: PPUSH
48268: PPUSH
48269: PPUSH
48270: PPUSH
48271: PPUSH
48272: PPUSH
48273: PPUSH
48274: PPUSH
// result := false ;
48275: LD_ADDR_VAR 0 8
48279: PUSH
48280: LD_INT 0
48282: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48283: LD_VAR 0 5
48287: NOT
48288: PUSH
48289: LD_VAR 0 1
48293: NOT
48294: OR
48295: PUSH
48296: LD_VAR 0 2
48300: NOT
48301: OR
48302: PUSH
48303: LD_VAR 0 3
48307: NOT
48308: OR
48309: IFFALSE 48313
// exit ;
48311: GO 49127
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48313: LD_ADDR_VAR 0 14
48317: PUSH
48318: LD_VAR 0 1
48322: PPUSH
48323: LD_VAR 0 2
48327: PPUSH
48328: LD_VAR 0 3
48332: PPUSH
48333: LD_VAR 0 4
48337: PPUSH
48338: LD_VAR 0 5
48342: PUSH
48343: LD_INT 1
48345: ARRAY
48346: PPUSH
48347: CALL_OW 248
48351: PPUSH
48352: LD_INT 0
48354: PPUSH
48355: CALL 49964 0 6
48359: ST_TO_ADDR
// if not hexes then
48360: LD_VAR 0 14
48364: NOT
48365: IFFALSE 48369
// exit ;
48367: GO 49127
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48369: LD_ADDR_VAR 0 17
48373: PUSH
48374: LD_VAR 0 5
48378: PPUSH
48379: LD_INT 22
48381: PUSH
48382: LD_VAR 0 13
48386: PPUSH
48387: CALL_OW 255
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: LD_INT 30
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 30
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PPUSH
48428: CALL_OW 72
48432: ST_TO_ADDR
// for i = 1 to hexes do
48433: LD_ADDR_VAR 0 9
48437: PUSH
48438: DOUBLE
48439: LD_INT 1
48441: DEC
48442: ST_TO_ADDR
48443: LD_VAR 0 14
48447: PUSH
48448: FOR_TO
48449: IFFALSE 49125
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48451: LD_ADDR_VAR 0 13
48455: PUSH
48456: LD_VAR 0 14
48460: PUSH
48461: LD_VAR 0 9
48465: ARRAY
48466: PUSH
48467: LD_INT 1
48469: ARRAY
48470: PPUSH
48471: LD_VAR 0 14
48475: PUSH
48476: LD_VAR 0 9
48480: ARRAY
48481: PUSH
48482: LD_INT 2
48484: ARRAY
48485: PPUSH
48486: CALL_OW 428
48490: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48491: LD_VAR 0 14
48495: PUSH
48496: LD_VAR 0 9
48500: ARRAY
48501: PUSH
48502: LD_INT 1
48504: ARRAY
48505: PPUSH
48506: LD_VAR 0 14
48510: PUSH
48511: LD_VAR 0 9
48515: ARRAY
48516: PUSH
48517: LD_INT 2
48519: ARRAY
48520: PPUSH
48521: CALL_OW 351
48525: PUSH
48526: LD_VAR 0 14
48530: PUSH
48531: LD_VAR 0 9
48535: ARRAY
48536: PUSH
48537: LD_INT 1
48539: ARRAY
48540: PPUSH
48541: LD_VAR 0 14
48545: PUSH
48546: LD_VAR 0 9
48550: ARRAY
48551: PUSH
48552: LD_INT 2
48554: ARRAY
48555: PPUSH
48556: CALL_OW 488
48560: NOT
48561: OR
48562: PUSH
48563: LD_VAR 0 13
48567: PPUSH
48568: CALL_OW 247
48572: PUSH
48573: LD_INT 3
48575: EQUAL
48576: OR
48577: IFFALSE 48583
// exit ;
48579: POP
48580: POP
48581: GO 49127
// if not tmp then
48583: LD_VAR 0 13
48587: NOT
48588: IFFALSE 48592
// continue ;
48590: GO 48448
// result := true ;
48592: LD_ADDR_VAR 0 8
48596: PUSH
48597: LD_INT 1
48599: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48600: LD_VAR 0 6
48604: PUSH
48605: LD_VAR 0 13
48609: PPUSH
48610: CALL_OW 247
48614: PUSH
48615: LD_INT 2
48617: EQUAL
48618: AND
48619: PUSH
48620: LD_VAR 0 13
48624: PPUSH
48625: CALL_OW 263
48629: PUSH
48630: LD_INT 1
48632: EQUAL
48633: AND
48634: IFFALSE 48798
// begin if IsDrivenBy ( tmp ) then
48636: LD_VAR 0 13
48640: PPUSH
48641: CALL_OW 311
48645: IFFALSE 48649
// continue ;
48647: GO 48448
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48649: LD_VAR 0 6
48653: PPUSH
48654: LD_INT 3
48656: PUSH
48657: LD_INT 60
48659: PUSH
48660: EMPTY
48661: LIST
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 3
48669: PUSH
48670: LD_INT 55
48672: PUSH
48673: EMPTY
48674: LIST
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PPUSH
48684: CALL_OW 72
48688: IFFALSE 48796
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48690: LD_ADDR_VAR 0 18
48694: PUSH
48695: LD_VAR 0 6
48699: PPUSH
48700: LD_INT 3
48702: PUSH
48703: LD_INT 60
48705: PUSH
48706: EMPTY
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: LD_INT 55
48718: PUSH
48719: EMPTY
48720: LIST
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PPUSH
48730: CALL_OW 72
48734: PUSH
48735: LD_INT 1
48737: ARRAY
48738: ST_TO_ADDR
// if IsInUnit ( driver ) then
48739: LD_VAR 0 18
48743: PPUSH
48744: CALL_OW 310
48748: IFFALSE 48759
// ComExit ( driver ) ;
48750: LD_VAR 0 18
48754: PPUSH
48755: CALL 73148 0 1
// AddComEnterUnit ( driver , tmp ) ;
48759: LD_VAR 0 18
48763: PPUSH
48764: LD_VAR 0 13
48768: PPUSH
48769: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48773: LD_VAR 0 18
48777: PPUSH
48778: LD_VAR 0 7
48782: PPUSH
48783: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48787: LD_VAR 0 18
48791: PPUSH
48792: CALL_OW 181
// end ; continue ;
48796: GO 48448
// end ; if not cleaners or not tmp in cleaners then
48798: LD_VAR 0 6
48802: NOT
48803: PUSH
48804: LD_VAR 0 13
48808: PUSH
48809: LD_VAR 0 6
48813: IN
48814: NOT
48815: OR
48816: IFFALSE 49123
// begin if dep then
48818: LD_VAR 0 17
48822: IFFALSE 48958
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48824: LD_ADDR_VAR 0 16
48828: PUSH
48829: LD_VAR 0 17
48833: PUSH
48834: LD_INT 1
48836: ARRAY
48837: PPUSH
48838: CALL_OW 250
48842: PPUSH
48843: LD_VAR 0 17
48847: PUSH
48848: LD_INT 1
48850: ARRAY
48851: PPUSH
48852: CALL_OW 254
48856: PPUSH
48857: LD_INT 5
48859: PPUSH
48860: CALL_OW 272
48864: PUSH
48865: LD_VAR 0 17
48869: PUSH
48870: LD_INT 1
48872: ARRAY
48873: PPUSH
48874: CALL_OW 251
48878: PPUSH
48879: LD_VAR 0 17
48883: PUSH
48884: LD_INT 1
48886: ARRAY
48887: PPUSH
48888: CALL_OW 254
48892: PPUSH
48893: LD_INT 5
48895: PPUSH
48896: CALL_OW 273
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48905: LD_VAR 0 16
48909: PUSH
48910: LD_INT 1
48912: ARRAY
48913: PPUSH
48914: LD_VAR 0 16
48918: PUSH
48919: LD_INT 2
48921: ARRAY
48922: PPUSH
48923: CALL_OW 488
48927: IFFALSE 48958
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48929: LD_VAR 0 13
48933: PPUSH
48934: LD_VAR 0 16
48938: PUSH
48939: LD_INT 1
48941: ARRAY
48942: PPUSH
48943: LD_VAR 0 16
48947: PUSH
48948: LD_INT 2
48950: ARRAY
48951: PPUSH
48952: CALL_OW 111
// continue ;
48956: GO 48448
// end ; end ; r := GetDir ( tmp ) ;
48958: LD_ADDR_VAR 0 15
48962: PUSH
48963: LD_VAR 0 13
48967: PPUSH
48968: CALL_OW 254
48972: ST_TO_ADDR
// if r = 5 then
48973: LD_VAR 0 15
48977: PUSH
48978: LD_INT 5
48980: EQUAL
48981: IFFALSE 48991
// r := 0 ;
48983: LD_ADDR_VAR 0 15
48987: PUSH
48988: LD_INT 0
48990: ST_TO_ADDR
// for j = r to 5 do
48991: LD_ADDR_VAR 0 10
48995: PUSH
48996: DOUBLE
48997: LD_VAR 0 15
49001: DEC
49002: ST_TO_ADDR
49003: LD_INT 5
49005: PUSH
49006: FOR_TO
49007: IFFALSE 49121
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49009: LD_ADDR_VAR 0 11
49013: PUSH
49014: LD_VAR 0 13
49018: PPUSH
49019: CALL_OW 250
49023: PPUSH
49024: LD_VAR 0 10
49028: PPUSH
49029: LD_INT 2
49031: PPUSH
49032: CALL_OW 272
49036: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49037: LD_ADDR_VAR 0 12
49041: PUSH
49042: LD_VAR 0 13
49046: PPUSH
49047: CALL_OW 251
49051: PPUSH
49052: LD_VAR 0 10
49056: PPUSH
49057: LD_INT 2
49059: PPUSH
49060: CALL_OW 273
49064: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49065: LD_VAR 0 11
49069: PPUSH
49070: LD_VAR 0 12
49074: PPUSH
49075: CALL_OW 488
49079: PUSH
49080: LD_VAR 0 11
49084: PPUSH
49085: LD_VAR 0 12
49089: PPUSH
49090: CALL_OW 428
49094: NOT
49095: AND
49096: IFFALSE 49119
// begin ComMoveXY ( tmp , _x , _y ) ;
49098: LD_VAR 0 13
49102: PPUSH
49103: LD_VAR 0 11
49107: PPUSH
49108: LD_VAR 0 12
49112: PPUSH
49113: CALL_OW 111
// break ;
49117: GO 49121
// end ; end ;
49119: GO 49006
49121: POP
49122: POP
// end ; end ;
49123: GO 48448
49125: POP
49126: POP
// end ;
49127: LD_VAR 0 8
49131: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
49132: LD_INT 0
49134: PPUSH
49135: PPUSH
49136: PPUSH
49137: PPUSH
49138: PPUSH
49139: PPUSH
49140: PPUSH
49141: PPUSH
49142: PPUSH
49143: PPUSH
// result := false ;
49144: LD_ADDR_VAR 0 6
49148: PUSH
49149: LD_INT 0
49151: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49152: LD_VAR 0 1
49156: NOT
49157: PUSH
49158: LD_VAR 0 1
49162: PPUSH
49163: CALL_OW 266
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: IN
49178: NOT
49179: OR
49180: PUSH
49181: LD_VAR 0 2
49185: NOT
49186: OR
49187: PUSH
49188: LD_VAR 0 5
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 3
49204: PUSH
49205: LD_INT 4
49207: PUSH
49208: LD_INT 5
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: IN
49219: NOT
49220: OR
49221: PUSH
49222: LD_VAR 0 3
49226: PPUSH
49227: LD_VAR 0 4
49231: PPUSH
49232: CALL_OW 488
49236: NOT
49237: OR
49238: IFFALSE 49242
// exit ;
49240: GO 49959
// pom := GetBase ( depot ) ;
49242: LD_ADDR_VAR 0 10
49246: PUSH
49247: LD_VAR 0 1
49251: PPUSH
49252: CALL_OW 274
49256: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49257: LD_ADDR_VAR 0 11
49261: PUSH
49262: LD_VAR 0 2
49266: PPUSH
49267: LD_VAR 0 1
49271: PPUSH
49272: CALL_OW 248
49276: PPUSH
49277: CALL_OW 450
49281: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49282: LD_VAR 0 10
49286: PPUSH
49287: LD_INT 1
49289: PPUSH
49290: CALL_OW 275
49294: PUSH
49295: LD_VAR 0 11
49299: PUSH
49300: LD_INT 1
49302: ARRAY
49303: GREATEREQUAL
49304: PUSH
49305: LD_VAR 0 10
49309: PPUSH
49310: LD_INT 2
49312: PPUSH
49313: CALL_OW 275
49317: PUSH
49318: LD_VAR 0 11
49322: PUSH
49323: LD_INT 2
49325: ARRAY
49326: GREATEREQUAL
49327: AND
49328: PUSH
49329: LD_VAR 0 10
49333: PPUSH
49334: LD_INT 3
49336: PPUSH
49337: CALL_OW 275
49341: PUSH
49342: LD_VAR 0 11
49346: PUSH
49347: LD_INT 3
49349: ARRAY
49350: GREATEREQUAL
49351: AND
49352: NOT
49353: IFFALSE 49357
// exit ;
49355: GO 49959
// if GetBType ( depot ) = b_depot then
49357: LD_VAR 0 1
49361: PPUSH
49362: CALL_OW 266
49366: PUSH
49367: LD_INT 0
49369: EQUAL
49370: IFFALSE 49382
// dist := 28 else
49372: LD_ADDR_VAR 0 14
49376: PUSH
49377: LD_INT 28
49379: ST_TO_ADDR
49380: GO 49390
// dist := 36 ;
49382: LD_ADDR_VAR 0 14
49386: PUSH
49387: LD_INT 36
49389: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49390: LD_VAR 0 1
49394: PPUSH
49395: LD_VAR 0 3
49399: PPUSH
49400: LD_VAR 0 4
49404: PPUSH
49405: CALL_OW 297
49409: PUSH
49410: LD_VAR 0 14
49414: GREATER
49415: IFFALSE 49419
// exit ;
49417: GO 49959
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49419: LD_ADDR_VAR 0 12
49423: PUSH
49424: LD_VAR 0 2
49428: PPUSH
49429: LD_VAR 0 3
49433: PPUSH
49434: LD_VAR 0 4
49438: PPUSH
49439: LD_VAR 0 5
49443: PPUSH
49444: LD_VAR 0 1
49448: PPUSH
49449: CALL_OW 248
49453: PPUSH
49454: LD_INT 0
49456: PPUSH
49457: CALL 49964 0 6
49461: ST_TO_ADDR
// if not hexes then
49462: LD_VAR 0 12
49466: NOT
49467: IFFALSE 49471
// exit ;
49469: GO 49959
// hex := GetHexInfo ( x , y ) ;
49471: LD_ADDR_VAR 0 15
49475: PUSH
49476: LD_VAR 0 3
49480: PPUSH
49481: LD_VAR 0 4
49485: PPUSH
49486: CALL_OW 546
49490: ST_TO_ADDR
// if hex [ 1 ] then
49491: LD_VAR 0 15
49495: PUSH
49496: LD_INT 1
49498: ARRAY
49499: IFFALSE 49503
// exit ;
49501: GO 49959
// height := hex [ 2 ] ;
49503: LD_ADDR_VAR 0 13
49507: PUSH
49508: LD_VAR 0 15
49512: PUSH
49513: LD_INT 2
49515: ARRAY
49516: ST_TO_ADDR
// for i = 1 to hexes do
49517: LD_ADDR_VAR 0 7
49521: PUSH
49522: DOUBLE
49523: LD_INT 1
49525: DEC
49526: ST_TO_ADDR
49527: LD_VAR 0 12
49531: PUSH
49532: FOR_TO
49533: IFFALSE 49863
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49535: LD_VAR 0 12
49539: PUSH
49540: LD_VAR 0 7
49544: ARRAY
49545: PUSH
49546: LD_INT 1
49548: ARRAY
49549: PPUSH
49550: LD_VAR 0 12
49554: PUSH
49555: LD_VAR 0 7
49559: ARRAY
49560: PUSH
49561: LD_INT 2
49563: ARRAY
49564: PPUSH
49565: CALL_OW 488
49569: NOT
49570: PUSH
49571: LD_VAR 0 12
49575: PUSH
49576: LD_VAR 0 7
49580: ARRAY
49581: PUSH
49582: LD_INT 1
49584: ARRAY
49585: PPUSH
49586: LD_VAR 0 12
49590: PUSH
49591: LD_VAR 0 7
49595: ARRAY
49596: PUSH
49597: LD_INT 2
49599: ARRAY
49600: PPUSH
49601: CALL_OW 428
49605: PUSH
49606: LD_INT 0
49608: GREATER
49609: OR
49610: PUSH
49611: LD_VAR 0 12
49615: PUSH
49616: LD_VAR 0 7
49620: ARRAY
49621: PUSH
49622: LD_INT 1
49624: ARRAY
49625: PPUSH
49626: LD_VAR 0 12
49630: PUSH
49631: LD_VAR 0 7
49635: ARRAY
49636: PUSH
49637: LD_INT 2
49639: ARRAY
49640: PPUSH
49641: CALL_OW 351
49645: OR
49646: IFFALSE 49652
// exit ;
49648: POP
49649: POP
49650: GO 49959
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49652: LD_ADDR_VAR 0 8
49656: PUSH
49657: LD_VAR 0 12
49661: PUSH
49662: LD_VAR 0 7
49666: ARRAY
49667: PUSH
49668: LD_INT 1
49670: ARRAY
49671: PPUSH
49672: LD_VAR 0 12
49676: PUSH
49677: LD_VAR 0 7
49681: ARRAY
49682: PUSH
49683: LD_INT 2
49685: ARRAY
49686: PPUSH
49687: CALL_OW 546
49691: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49692: LD_VAR 0 8
49696: PUSH
49697: LD_INT 1
49699: ARRAY
49700: PUSH
49701: LD_VAR 0 8
49705: PUSH
49706: LD_INT 2
49708: ARRAY
49709: PUSH
49710: LD_VAR 0 13
49714: PUSH
49715: LD_INT 2
49717: PLUS
49718: GREATER
49719: OR
49720: PUSH
49721: LD_VAR 0 8
49725: PUSH
49726: LD_INT 2
49728: ARRAY
49729: PUSH
49730: LD_VAR 0 13
49734: PUSH
49735: LD_INT 2
49737: MINUS
49738: LESS
49739: OR
49740: PUSH
49741: LD_VAR 0 8
49745: PUSH
49746: LD_INT 3
49748: ARRAY
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 8
49755: PUSH
49756: LD_INT 9
49758: PUSH
49759: LD_INT 10
49761: PUSH
49762: LD_INT 11
49764: PUSH
49765: LD_INT 12
49767: PUSH
49768: LD_INT 13
49770: PUSH
49771: LD_INT 16
49773: PUSH
49774: LD_INT 17
49776: PUSH
49777: LD_INT 18
49779: PUSH
49780: LD_INT 19
49782: PUSH
49783: LD_INT 20
49785: PUSH
49786: LD_INT 21
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: IN
49804: NOT
49805: OR
49806: PUSH
49807: LD_VAR 0 8
49811: PUSH
49812: LD_INT 5
49814: ARRAY
49815: NOT
49816: OR
49817: PUSH
49818: LD_VAR 0 8
49822: PUSH
49823: LD_INT 6
49825: ARRAY
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: LD_INT 7
49835: PUSH
49836: LD_INT 9
49838: PUSH
49839: LD_INT 10
49841: PUSH
49842: LD_INT 11
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: IN
49853: NOT
49854: OR
49855: IFFALSE 49861
// exit ;
49857: POP
49858: POP
49859: GO 49959
// end ;
49861: GO 49532
49863: POP
49864: POP
// side := GetSide ( depot ) ;
49865: LD_ADDR_VAR 0 9
49869: PUSH
49870: LD_VAR 0 1
49874: PPUSH
49875: CALL_OW 255
49879: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49880: LD_VAR 0 9
49884: PPUSH
49885: LD_VAR 0 3
49889: PPUSH
49890: LD_VAR 0 4
49894: PPUSH
49895: LD_INT 20
49897: PPUSH
49898: CALL 42280 0 4
49902: PUSH
49903: LD_INT 4
49905: ARRAY
49906: IFFALSE 49910
// exit ;
49908: GO 49959
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49910: LD_VAR 0 2
49914: PUSH
49915: LD_INT 29
49917: PUSH
49918: LD_INT 30
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: IN
49925: PUSH
49926: LD_VAR 0 3
49930: PPUSH
49931: LD_VAR 0 4
49935: PPUSH
49936: LD_VAR 0 9
49940: PPUSH
49941: CALL_OW 440
49945: NOT
49946: AND
49947: IFFALSE 49951
// exit ;
49949: GO 49959
// result := true ;
49951: LD_ADDR_VAR 0 6
49955: PUSH
49956: LD_INT 1
49958: ST_TO_ADDR
// end ;
49959: LD_VAR 0 6
49963: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49964: LD_INT 0
49966: PPUSH
49967: PPUSH
49968: PPUSH
49969: PPUSH
49970: PPUSH
49971: PPUSH
49972: PPUSH
49973: PPUSH
49974: PPUSH
49975: PPUSH
49976: PPUSH
49977: PPUSH
49978: PPUSH
49979: PPUSH
49980: PPUSH
49981: PPUSH
49982: PPUSH
49983: PPUSH
49984: PPUSH
49985: PPUSH
49986: PPUSH
49987: PPUSH
49988: PPUSH
49989: PPUSH
49990: PPUSH
49991: PPUSH
49992: PPUSH
49993: PPUSH
49994: PPUSH
49995: PPUSH
49996: PPUSH
49997: PPUSH
49998: PPUSH
49999: PPUSH
50000: PPUSH
50001: PPUSH
50002: PPUSH
50003: PPUSH
50004: PPUSH
50005: PPUSH
50006: PPUSH
50007: PPUSH
50008: PPUSH
50009: PPUSH
50010: PPUSH
50011: PPUSH
50012: PPUSH
50013: PPUSH
50014: PPUSH
50015: PPUSH
50016: PPUSH
50017: PPUSH
50018: PPUSH
50019: PPUSH
50020: PPUSH
50021: PPUSH
50022: PPUSH
50023: PPUSH
// result = [ ] ;
50024: LD_ADDR_VAR 0 7
50028: PUSH
50029: EMPTY
50030: ST_TO_ADDR
// temp_list = [ ] ;
50031: LD_ADDR_VAR 0 9
50035: PUSH
50036: EMPTY
50037: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50038: LD_VAR 0 4
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: LD_INT 3
50054: PUSH
50055: LD_INT 4
50057: PUSH
50058: LD_INT 5
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: IN
50069: NOT
50070: PUSH
50071: LD_VAR 0 1
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: IN
50086: PUSH
50087: LD_VAR 0 5
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: LD_INT 3
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: IN
50106: NOT
50107: AND
50108: OR
50109: IFFALSE 50113
// exit ;
50111: GO 68504
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50113: LD_VAR 0 1
50117: PUSH
50118: LD_INT 6
50120: PUSH
50121: LD_INT 7
50123: PUSH
50124: LD_INT 8
50126: PUSH
50127: LD_INT 13
50129: PUSH
50130: LD_INT 12
50132: PUSH
50133: LD_INT 15
50135: PUSH
50136: LD_INT 11
50138: PUSH
50139: LD_INT 14
50141: PUSH
50142: LD_INT 10
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: IN
50156: IFFALSE 50166
// btype = b_lab ;
50158: LD_ADDR_VAR 0 1
50162: PUSH
50163: LD_INT 6
50165: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50166: LD_VAR 0 6
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: LIST
50184: IN
50185: NOT
50186: PUSH
50187: LD_VAR 0 1
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: LD_INT 3
50203: PUSH
50204: LD_INT 6
50206: PUSH
50207: LD_INT 36
50209: PUSH
50210: LD_INT 4
50212: PUSH
50213: LD_INT 5
50215: PUSH
50216: LD_INT 31
50218: PUSH
50219: LD_INT 32
50221: PUSH
50222: LD_INT 33
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: IN
50238: NOT
50239: PUSH
50240: LD_VAR 0 6
50244: PUSH
50245: LD_INT 1
50247: EQUAL
50248: AND
50249: OR
50250: PUSH
50251: LD_VAR 0 1
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: LD_INT 3
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: IN
50266: NOT
50267: PUSH
50268: LD_VAR 0 6
50272: PUSH
50273: LD_INT 2
50275: EQUAL
50276: AND
50277: OR
50278: IFFALSE 50288
// mode = 0 ;
50280: LD_ADDR_VAR 0 6
50284: PUSH
50285: LD_INT 0
50287: ST_TO_ADDR
// case mode of 0 :
50288: LD_VAR 0 6
50292: PUSH
50293: LD_INT 0
50295: DOUBLE
50296: EQUAL
50297: IFTRUE 50301
50299: GO 61754
50301: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50302: LD_ADDR_VAR 0 11
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 3
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 3
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50495: LD_ADDR_VAR 0 12
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: NEG
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 3
50652: NEG
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 3
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50691: LD_ADDR_VAR 0 13
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: LD_INT 3
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 3
50850: NEG
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 3
50862: NEG
50863: PUSH
50864: LD_INT 3
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50890: LD_ADDR_VAR 0 14
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 3
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 3
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51086: LD_ADDR_VAR 0 15
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 3
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51279: LD_ADDR_VAR 0 16
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: NEG
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: PUSH
51437: LD_INT 3
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 3
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51472: LD_ADDR_VAR 0 17
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: LD_INT 2
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51702: LD_ADDR_VAR 0 18
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 2
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51932: LD_ADDR_VAR 0 19
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52162: LD_ADDR_VAR 0 20
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52392: LD_ADDR_VAR 0 21
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52622: LD_ADDR_VAR 0 22
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52852: LD_ADDR_VAR 0 23
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: NEG
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 3
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53132: LD_ADDR_VAR 0 24
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 3
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 3
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53408: LD_ADDR_VAR 0 25
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 3
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53682: LD_ADDR_VAR 0 26
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: NEG
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: LD_INT 2
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: LD_INT 3
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 3
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53958: LD_ADDR_VAR 0 27
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: NEG
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: NEG
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54238: LD_ADDR_VAR 0 28
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: LD_INT 3
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 3
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 3
54485: NEG
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54520: LD_ADDR_VAR 0 29
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: LD_INT 3
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 3
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 3
54764: NEG
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54799: LD_ADDR_VAR 0 30
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: NEG
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 3
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 3
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 3
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55077: LD_ADDR_VAR 0 31
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 2
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 2
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: LD_INT 2
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 2
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: LD_INT 3
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 3
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: NEG
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55355: LD_ADDR_VAR 0 32
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 3
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: LD_INT 3
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 3
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55633: LD_ADDR_VAR 0 33
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 2
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: NEG
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: NEG
55824: PUSH
55825: LD_INT 3
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 3
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 3
55877: NEG
55878: PUSH
55879: LD_INT 2
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55912: LD_ADDR_VAR 0 34
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 2
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 2
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: NEG
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 2
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 3
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: LD_INT 3
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56192: LD_ADDR_VAR 0 35
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56304: LD_ADDR_VAR 0 36
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56416: LD_ADDR_VAR 0 37
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56528: LD_ADDR_VAR 0 38
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56640: LD_ADDR_VAR 0 39
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56752: LD_ADDR_VAR 0 40
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56864: LD_ADDR_VAR 0 41
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: NEG
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 3
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: LD_INT 3
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 3
57138: NEG
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 3
57149: NEG
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 3
57173: NEG
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57214: LD_ADDR_VAR 0 42
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: LD_INT 3
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: LD_INT 3
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 3
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 3
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57564: LD_ADDR_VAR 0 43
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 2
57741: NEG
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: LD_INT 3
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 3
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 3
57860: NEG
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 3
57871: NEG
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57912: LD_ADDR_VAR 0 44
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 2
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 3
58197: NEG
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 3
58209: NEG
58210: PUSH
58211: LD_INT 2
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 3
58221: NEG
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58262: LD_ADDR_VAR 0 45
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: LD_INT 3
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: LD_INT 3
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 3
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 2
58518: PUSH
58519: LD_INT 3
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: LD_INT 3
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: LD_INT 3
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 3
58559: NEG
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 3
58571: NEG
58572: PUSH
58573: LD_INT 3
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58612: LD_ADDR_VAR 0 46
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: LD_INT 3
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: LD_INT 3
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: LD_INT 2
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: LD_INT 3
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58960: LD_ADDR_VAR 0 47
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: LD_INT 2
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59111: LD_ADDR_VAR 0 48
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: LD_INT 2
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59258: LD_ADDR_VAR 0 49
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 2
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59402: LD_ADDR_VAR 0 50
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 2
59493: PUSH
59494: LD_INT 2
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: LD_INT 2
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59546: LD_ADDR_VAR 0 51
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: LD_INT 2
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 2
59658: NEG
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: NEG
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59693: LD_ADDR_VAR 0 52
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: LD_INT 2
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 2
59808: NEG
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59844: LD_ADDR_VAR 0 53
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: LD_INT 2
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: LD_INT 2
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: NEG
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60074: LD_ADDR_VAR 0 54
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: LD_INT 2
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60304: LD_ADDR_VAR 0 55
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: LD_INT 2
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 2
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 2
60491: NEG
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: LD_INT 2
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60534: LD_ADDR_VAR 0 56
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: LD_INT 2
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: LD_INT 2
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: NEG
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 2
60721: NEG
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: NEG
60734: PUSH
60735: LD_INT 2
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60764: LD_ADDR_VAR 0 57
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 2
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: NEG
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60994: LD_ADDR_VAR 0 58
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 2
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 2
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: NEG
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: NEG
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61224: LD_ADDR_VAR 0 59
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61312: LD_ADDR_VAR 0 60
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61400: LD_ADDR_VAR 0 61
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61488: LD_ADDR_VAR 0 62
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61576: LD_ADDR_VAR 0 63
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61664: LD_ADDR_VAR 0 64
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: LD_INT 1
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: LD_INT 1
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// end ; 1 :
61752: GO 67649
61754: LD_INT 1
61756: DOUBLE
61757: EQUAL
61758: IFTRUE 61762
61760: GO 64385
61762: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61763: LD_ADDR_VAR 0 11
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: LD_INT 3
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 3
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 2
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: LIST
61806: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61807: LD_ADDR_VAR 0 12
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 3
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: LIST
61847: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61848: LD_ADDR_VAR 0 13
61852: PUSH
61853: LD_INT 3
61855: PUSH
61856: LD_INT 2
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 3
61865: PUSH
61866: LD_INT 3
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: PUSH
61876: LD_INT 3
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: LIST
61887: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61888: LD_ADDR_VAR 0 14
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: LD_INT 3
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 3
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: LIST
61928: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61929: LD_ADDR_VAR 0 15
61933: PUSH
61934: LD_INT 2
61936: NEG
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 3
61947: NEG
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 3
61958: NEG
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: LIST
61972: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61973: LD_ADDR_VAR 0 16
61977: PUSH
61978: LD_INT 2
61980: NEG
61981: PUSH
61982: LD_INT 3
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 3
61992: NEG
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 3
62004: NEG
62005: PUSH
62006: LD_INT 3
62008: NEG
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: LIST
62018: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62019: LD_ADDR_VAR 0 17
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: LD_INT 3
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: LD_INT 3
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: LIST
62062: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62063: LD_ADDR_VAR 0 18
62067: PUSH
62068: LD_INT 2
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 3
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 3
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: LIST
62103: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62104: LD_ADDR_VAR 0 19
62108: PUSH
62109: LD_INT 3
62111: PUSH
62112: LD_INT 2
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 3
62121: PUSH
62122: LD_INT 3
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: LD_INT 3
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: LIST
62143: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62144: LD_ADDR_VAR 0 20
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: LD_INT 3
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: LD_INT 3
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: LIST
62184: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62185: LD_ADDR_VAR 0 21
62189: PUSH
62190: LD_INT 2
62192: NEG
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 3
62203: NEG
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 3
62214: NEG
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: LIST
62228: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62229: LD_ADDR_VAR 0 22
62233: PUSH
62234: LD_INT 2
62236: NEG
62237: PUSH
62238: LD_INT 3
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 3
62248: NEG
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 3
62260: NEG
62261: PUSH
62262: LD_INT 3
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: LIST
62274: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62275: LD_ADDR_VAR 0 23
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 3
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: LD_INT 4
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: LIST
62318: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62319: LD_ADDR_VAR 0 24
62323: PUSH
62324: LD_INT 3
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 3
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 4
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: LIST
62359: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62360: LD_ADDR_VAR 0 25
62364: PUSH
62365: LD_INT 3
62367: PUSH
62368: LD_INT 3
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 4
62377: PUSH
62378: LD_INT 3
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 3
62387: PUSH
62388: LD_INT 4
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: LIST
62399: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62400: LD_ADDR_VAR 0 26
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: LD_INT 4
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: LD_INT 3
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62441: LD_ADDR_VAR 0 27
62445: PUSH
62446: LD_INT 3
62448: NEG
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 3
62459: NEG
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 4
62470: NEG
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: LIST
62484: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62485: LD_ADDR_VAR 0 28
62489: PUSH
62490: LD_INT 3
62492: NEG
62493: PUSH
62494: LD_INT 3
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 3
62504: NEG
62505: PUSH
62506: LD_INT 4
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 4
62516: NEG
62517: PUSH
62518: LD_INT 3
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: LIST
62530: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62531: LD_ADDR_VAR 0 29
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 3
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: LD_INT 3
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: LD_INT 2
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: PUSH
62574: LD_INT 4
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: LD_INT 4
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: PUSH
62596: LD_INT 3
62598: NEG
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: NEG
62607: PUSH
62608: LD_INT 5
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 5
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: LD_INT 4
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: LD_INT 6
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: LD_INT 6
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: LD_INT 5
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62686: LD_ADDR_VAR 0 30
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: LD_INT 1
62696: NEG
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 3
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 3
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 4
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 4
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 4
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 5
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 5
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 5
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 6
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 6
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62829: LD_ADDR_VAR 0 31
62833: PUSH
62834: LD_INT 3
62836: PUSH
62837: LD_INT 2
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 3
62846: PUSH
62847: LD_INT 3
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 2
62856: PUSH
62857: LD_INT 3
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 4
62866: PUSH
62867: LD_INT 3
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 4
62876: PUSH
62877: LD_INT 4
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 3
62886: PUSH
62887: LD_INT 4
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 5
62896: PUSH
62897: LD_INT 4
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 5
62906: PUSH
62907: LD_INT 5
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 4
62916: PUSH
62917: LD_INT 5
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 6
62926: PUSH
62927: LD_INT 5
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 6
62936: PUSH
62937: LD_INT 6
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 5
62946: PUSH
62947: LD_INT 6
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62968: LD_ADDR_VAR 0 32
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: LD_INT 3
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: LD_INT 3
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: LD_INT 2
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: LD_INT 4
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: LD_INT 4
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: LD_INT 3
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: LD_INT 5
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: LD_INT 5
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: LD_INT 4
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: LD_INT 6
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: LD_INT 6
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: LD_INT 5
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63111: LD_ADDR_VAR 0 33
63115: PUSH
63116: LD_INT 2
63118: NEG
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 3
63129: NEG
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 3
63140: NEG
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 3
63152: NEG
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 4
63163: NEG
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 4
63174: NEG
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 4
63186: NEG
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 5
63197: NEG
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 5
63208: NEG
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 5
63220: NEG
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 6
63231: NEG
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 6
63242: NEG
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63266: LD_ADDR_VAR 0 34
63270: PUSH
63271: LD_INT 2
63273: NEG
63274: PUSH
63275: LD_INT 3
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 3
63285: NEG
63286: PUSH
63287: LD_INT 2
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 3
63297: NEG
63298: PUSH
63299: LD_INT 3
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 3
63309: NEG
63310: PUSH
63311: LD_INT 4
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 4
63321: NEG
63322: PUSH
63323: LD_INT 3
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 4
63333: NEG
63334: PUSH
63335: LD_INT 4
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 4
63345: NEG
63346: PUSH
63347: LD_INT 5
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 5
63357: NEG
63358: PUSH
63359: LD_INT 4
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 5
63369: NEG
63370: PUSH
63371: LD_INT 5
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 5
63381: NEG
63382: PUSH
63383: LD_INT 6
63385: NEG
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 6
63393: NEG
63394: PUSH
63395: LD_INT 5
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 6
63405: NEG
63406: PUSH
63407: LD_INT 6
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63429: LD_ADDR_VAR 0 41
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 2
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: NEG
63448: PUSH
63449: LD_INT 3
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: LD_INT 2
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: LIST
63472: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63473: LD_ADDR_VAR 0 42
63477: PUSH
63478: LD_INT 2
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 2
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 3
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63514: LD_ADDR_VAR 0 43
63518: PUSH
63519: LD_INT 2
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: LD_INT 2
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 2
63541: PUSH
63542: LD_INT 3
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: LIST
63553: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63554: LD_ADDR_VAR 0 44
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 2
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: LD_INT 3
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 1
63581: NEG
63582: PUSH
63583: LD_INT 2
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: LIST
63594: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63595: LD_ADDR_VAR 0 45
63599: PUSH
63600: LD_INT 2
63602: NEG
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 2
63613: NEG
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 3
63624: NEG
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: LIST
63638: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63639: LD_ADDR_VAR 0 46
63643: PUSH
63644: LD_INT 2
63646: NEG
63647: PUSH
63648: LD_INT 2
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 2
63658: NEG
63659: PUSH
63660: LD_INT 3
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 3
63670: NEG
63671: PUSH
63672: LD_INT 2
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: LIST
63684: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63685: LD_ADDR_VAR 0 47
63689: PUSH
63690: LD_INT 2
63692: NEG
63693: PUSH
63694: LD_INT 3
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: LD_INT 3
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63718: LD_ADDR_VAR 0 48
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 2
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63749: LD_ADDR_VAR 0 49
63753: PUSH
63754: LD_INT 3
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 3
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63778: LD_ADDR_VAR 0 50
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: LD_INT 3
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: LD_INT 3
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63807: LD_ADDR_VAR 0 51
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: LD_INT 2
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 2
63825: NEG
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63838: LD_ADDR_VAR 0 52
63842: PUSH
63843: LD_INT 3
63845: NEG
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 3
63857: NEG
63858: PUSH
63859: LD_INT 2
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63871: LD_ADDR_VAR 0 53
63875: PUSH
63876: LD_INT 1
63878: NEG
63879: PUSH
63880: LD_INT 3
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: LD_INT 3
63893: NEG
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: LD_INT 2
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63915: LD_ADDR_VAR 0 54
63919: PUSH
63920: LD_INT 2
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 3
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 3
63943: PUSH
63944: LD_INT 1
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: LIST
63955: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63956: LD_ADDR_VAR 0 55
63960: PUSH
63961: LD_INT 3
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 3
63973: PUSH
63974: LD_INT 3
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: LD_INT 3
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: LIST
63995: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63996: LD_ADDR_VAR 0 56
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: LD_INT 3
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: LD_INT 3
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: LD_INT 2
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: LIST
64036: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64037: LD_ADDR_VAR 0 57
64041: PUSH
64042: LD_INT 2
64044: NEG
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 3
64055: NEG
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 3
64066: NEG
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: LIST
64080: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64081: LD_ADDR_VAR 0 58
64085: PUSH
64086: LD_INT 2
64088: NEG
64089: PUSH
64090: LD_INT 3
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 3
64100: NEG
64101: PUSH
64102: LD_INT 2
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 3
64112: NEG
64113: PUSH
64114: LD_INT 3
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: LIST
64126: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64127: LD_ADDR_VAR 0 59
64131: PUSH
64132: LD_INT 1
64134: NEG
64135: PUSH
64136: LD_INT 2
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: LD_INT 1
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: LIST
64170: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64171: LD_ADDR_VAR 0 60
64175: PUSH
64176: LD_INT 1
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 2
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 2
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: LIST
64211: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64212: LD_ADDR_VAR 0 61
64216: PUSH
64217: LD_INT 2
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 2
64229: PUSH
64230: LD_INT 2
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 2
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: LIST
64251: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64252: LD_ADDR_VAR 0 62
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 2
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: LD_INT 2
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: LIST
64292: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64293: LD_ADDR_VAR 0 63
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 2
64311: NEG
64312: PUSH
64313: LD_INT 0
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 2
64322: NEG
64323: PUSH
64324: LD_INT 1
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: LIST
64336: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64337: LD_ADDR_VAR 0 64
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: LD_INT 2
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 2
64356: NEG
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 2
64368: NEG
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: LIST
64382: ST_TO_ADDR
// end ; 2 :
64383: GO 67649
64385: LD_INT 2
64387: DOUBLE
64388: EQUAL
64389: IFTRUE 64393
64391: GO 67648
64393: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64394: LD_ADDR_VAR 0 29
64398: PUSH
64399: LD_INT 4
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 4
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 5
64422: PUSH
64423: LD_INT 0
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 5
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 4
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 3
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 3
64462: PUSH
64463: LD_INT 1
64465: NEG
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 3
64473: PUSH
64474: LD_INT 2
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 5
64484: PUSH
64485: LD_INT 2
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 3
64494: PUSH
64495: LD_INT 3
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 3
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 4
64514: PUSH
64515: LD_INT 3
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 4
64524: PUSH
64525: LD_INT 4
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 3
64534: PUSH
64535: LD_INT 4
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 2
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 2
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 4
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 2
64574: PUSH
64575: LD_INT 4
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 4
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: LD_INT 3
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: LD_INT 4
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: LD_INT 5
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: LD_INT 5
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 1
64634: NEG
64635: PUSH
64636: LD_INT 4
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: LD_INT 3
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 2
64656: PUSH
64657: LD_INT 5
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 2
64666: NEG
64667: PUSH
64668: LD_INT 3
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 3
64677: NEG
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 3
64688: NEG
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 2
64700: NEG
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 2
64711: NEG
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 3
64722: NEG
64723: PUSH
64724: LD_INT 1
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 4
64733: NEG
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 4
64744: NEG
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 4
64756: NEG
64757: PUSH
64758: LD_INT 2
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 2
64768: NEG
64769: PUSH
64770: LD_INT 2
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 4
64779: NEG
64780: PUSH
64781: LD_INT 4
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 4
64791: NEG
64792: PUSH
64793: LD_INT 5
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 3
64803: NEG
64804: PUSH
64805: LD_INT 4
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 3
64815: NEG
64816: PUSH
64817: LD_INT 3
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 4
64827: NEG
64828: PUSH
64829: LD_INT 3
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 5
64839: NEG
64840: PUSH
64841: LD_INT 4
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 5
64851: NEG
64852: PUSH
64853: LD_INT 5
64855: NEG
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 3
64863: NEG
64864: PUSH
64865: LD_INT 5
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 5
64875: NEG
64876: PUSH
64877: LD_INT 3
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64932: LD_ADDR_VAR 0 30
64936: PUSH
64937: LD_INT 4
64939: PUSH
64940: LD_INT 4
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 4
64949: PUSH
64950: LD_INT 3
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 5
64959: PUSH
64960: LD_INT 4
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 5
64969: PUSH
64970: LD_INT 5
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 4
64979: PUSH
64980: LD_INT 5
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 3
64989: PUSH
64990: LD_INT 4
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 3
64999: PUSH
65000: LD_INT 3
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 5
65009: PUSH
65010: LD_INT 3
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 3
65019: PUSH
65020: LD_INT 5
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: LD_INT 3
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: LD_INT 3
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 1
65059: PUSH
65060: LD_INT 4
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: LD_INT 4
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 1
65079: NEG
65080: PUSH
65081: LD_INT 3
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: LD_INT 2
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 2
65101: PUSH
65102: LD_INT 4
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 2
65111: NEG
65112: PUSH
65113: LD_INT 2
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 4
65122: NEG
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 4
65133: NEG
65134: PUSH
65135: LD_INT 1
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 3
65145: NEG
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 4
65167: NEG
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 5
65178: NEG
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 5
65189: NEG
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 5
65201: NEG
65202: PUSH
65203: LD_INT 2
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 3
65213: NEG
65214: PUSH
65215: LD_INT 2
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 3
65224: NEG
65225: PUSH
65226: LD_INT 3
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 3
65236: NEG
65237: PUSH
65238: LD_INT 4
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 2
65248: NEG
65249: PUSH
65250: LD_INT 3
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 2
65260: NEG
65261: PUSH
65262: LD_INT 2
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 3
65272: NEG
65273: PUSH
65274: LD_INT 2
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 4
65284: NEG
65285: PUSH
65286: LD_INT 3
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 4
65296: NEG
65297: PUSH
65298: LD_INT 4
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: LD_INT 4
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 4
65320: NEG
65321: PUSH
65322: LD_INT 2
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: LD_INT 4
65335: NEG
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: LD_INT 5
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: LD_INT 4
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 1
65365: PUSH
65366: LD_INT 3
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: LD_INT 3
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 1
65387: NEG
65388: PUSH
65389: LD_INT 4
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 5
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 2
65411: PUSH
65412: LD_INT 3
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 2
65422: NEG
65423: PUSH
65424: LD_INT 5
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65479: LD_ADDR_VAR 0 31
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: LD_INT 4
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: LD_INT 3
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: LD_INT 4
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: LD_INT 5
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 0
65526: PUSH
65527: LD_INT 5
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 1
65536: NEG
65537: PUSH
65538: LD_INT 4
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 1
65547: NEG
65548: PUSH
65549: LD_INT 3
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 2
65558: PUSH
65559: LD_INT 5
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 2
65568: NEG
65569: PUSH
65570: LD_INT 3
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 3
65579: NEG
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 3
65590: NEG
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 2
65602: NEG
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 2
65613: NEG
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 3
65624: NEG
65625: PUSH
65626: LD_INT 1
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 4
65635: NEG
65636: PUSH
65637: LD_INT 0
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 4
65646: NEG
65647: PUSH
65648: LD_INT 1
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 4
65658: NEG
65659: PUSH
65660: LD_INT 2
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 2
65670: NEG
65671: PUSH
65672: LD_INT 2
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 4
65681: NEG
65682: PUSH
65683: LD_INT 4
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 4
65693: NEG
65694: PUSH
65695: LD_INT 5
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 3
65705: NEG
65706: PUSH
65707: LD_INT 4
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 3
65717: NEG
65718: PUSH
65719: LD_INT 3
65721: NEG
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 4
65729: NEG
65730: PUSH
65731: LD_INT 3
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 5
65741: NEG
65742: PUSH
65743: LD_INT 4
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 5
65753: NEG
65754: PUSH
65755: LD_INT 5
65757: NEG
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 3
65765: NEG
65766: PUSH
65767: LD_INT 5
65769: NEG
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 5
65777: NEG
65778: PUSH
65779: LD_INT 3
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: LD_INT 3
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: LD_INT 4
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: LD_INT 3
65814: NEG
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 1
65822: PUSH
65823: LD_INT 2
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: LD_INT 2
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: LD_INT 3
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 1
65856: NEG
65857: PUSH
65858: LD_INT 4
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 2
65868: PUSH
65869: LD_INT 2
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: LD_INT 4
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 4
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 4
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 5
65912: PUSH
65913: LD_INT 0
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 5
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 4
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 3
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 3
65963: PUSH
65964: LD_INT 2
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 5
65974: PUSH
65975: LD_INT 2
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66029: LD_ADDR_VAR 0 32
66033: PUSH
66034: LD_INT 4
66036: NEG
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 4
66047: NEG
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 3
66059: NEG
66060: PUSH
66061: LD_INT 0
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 3
66070: NEG
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 4
66081: NEG
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 5
66092: NEG
66093: PUSH
66094: LD_INT 0
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 5
66103: NEG
66104: PUSH
66105: LD_INT 1
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 5
66115: NEG
66116: PUSH
66117: LD_INT 2
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 3
66127: NEG
66128: PUSH
66129: LD_INT 2
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 3
66138: NEG
66139: PUSH
66140: LD_INT 3
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 3
66150: NEG
66151: PUSH
66152: LD_INT 4
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 2
66162: NEG
66163: PUSH
66164: LD_INT 3
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 2
66174: NEG
66175: PUSH
66176: LD_INT 2
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 3
66186: NEG
66187: PUSH
66188: LD_INT 2
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 4
66198: NEG
66199: PUSH
66200: LD_INT 3
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 4
66210: NEG
66211: PUSH
66212: LD_INT 4
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 2
66222: NEG
66223: PUSH
66224: LD_INT 4
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 4
66234: NEG
66235: PUSH
66236: LD_INT 2
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 0
66246: PUSH
66247: LD_INT 4
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: LD_INT 5
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 1
66268: PUSH
66269: LD_INT 4
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: PUSH
66280: LD_INT 3
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: LD_INT 3
66293: NEG
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: PUSH
66303: LD_INT 4
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: LD_INT 5
66317: NEG
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 2
66325: PUSH
66326: LD_INT 3
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: LD_INT 5
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 3
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 3
66358: PUSH
66359: LD_INT 1
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 4
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 4
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 3
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 2
66409: PUSH
66410: LD_INT 1
66412: NEG
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 2
66420: PUSH
66421: LD_INT 2
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 4
66431: PUSH
66432: LD_INT 2
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 4
66441: PUSH
66442: LD_INT 4
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 4
66451: PUSH
66452: LD_INT 3
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 5
66461: PUSH
66462: LD_INT 4
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 5
66471: PUSH
66472: LD_INT 5
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 4
66481: PUSH
66482: LD_INT 5
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 3
66491: PUSH
66492: LD_INT 4
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 3
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 5
66511: PUSH
66512: LD_INT 3
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 3
66521: PUSH
66522: LD_INT 5
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66576: LD_ADDR_VAR 0 33
66580: PUSH
66581: LD_INT 4
66583: NEG
66584: PUSH
66585: LD_INT 4
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 4
66595: NEG
66596: PUSH
66597: LD_INT 5
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 3
66607: NEG
66608: PUSH
66609: LD_INT 4
66611: NEG
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 3
66619: NEG
66620: PUSH
66621: LD_INT 3
66623: NEG
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 4
66631: NEG
66632: PUSH
66633: LD_INT 3
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 5
66643: NEG
66644: PUSH
66645: LD_INT 4
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 5
66655: NEG
66656: PUSH
66657: LD_INT 5
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 3
66667: NEG
66668: PUSH
66669: LD_INT 5
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 5
66679: NEG
66680: PUSH
66681: LD_INT 3
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 0
66691: PUSH
66692: LD_INT 3
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 4
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 3
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: LD_INT 2
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 2
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 1
66746: NEG
66747: PUSH
66748: LD_INT 3
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: LD_INT 4
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 2
66770: PUSH
66771: LD_INT 2
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 2
66781: NEG
66782: PUSH
66783: LD_INT 4
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 4
66793: PUSH
66794: LD_INT 0
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 4
66803: PUSH
66804: LD_INT 1
66806: NEG
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 5
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 5
66824: PUSH
66825: LD_INT 1
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 4
66834: PUSH
66835: LD_INT 1
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 3
66844: PUSH
66845: LD_INT 0
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 3
66854: PUSH
66855: LD_INT 1
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 3
66865: PUSH
66866: LD_INT 2
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 5
66876: PUSH
66877: LD_INT 2
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 3
66886: PUSH
66887: LD_INT 3
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 3
66896: PUSH
66897: LD_INT 2
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 4
66906: PUSH
66907: LD_INT 3
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 4
66916: PUSH
66917: LD_INT 4
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 3
66926: PUSH
66927: LD_INT 4
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: LD_INT 3
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 2
66946: PUSH
66947: LD_INT 2
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 4
66956: PUSH
66957: LD_INT 2
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 2
66966: PUSH
66967: LD_INT 4
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: LD_INT 4
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: LD_INT 3
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 1
66996: PUSH
66997: LD_INT 4
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 1
67006: PUSH
67007: LD_INT 5
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 0
67016: PUSH
67017: LD_INT 5
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 1
67026: NEG
67027: PUSH
67028: LD_INT 4
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: LD_INT 3
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 2
67048: PUSH
67049: LD_INT 5
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 2
67058: NEG
67059: PUSH
67060: LD_INT 3
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67114: LD_ADDR_VAR 0 34
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 4
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 0
67132: PUSH
67133: LD_INT 5
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: LD_INT 4
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 1
67154: PUSH
67155: LD_INT 3
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 0
67165: PUSH
67166: LD_INT 3
67168: NEG
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 1
67176: NEG
67177: PUSH
67178: LD_INT 4
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: PUSH
67190: LD_INT 5
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: LD_INT 3
67203: NEG
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 2
67211: NEG
67212: PUSH
67213: LD_INT 5
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 3
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 3
67233: PUSH
67234: LD_INT 1
67236: NEG
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 4
67244: PUSH
67245: LD_INT 0
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 4
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 2
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 2
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 2
67295: PUSH
67296: LD_INT 2
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 4
67306: PUSH
67307: LD_INT 2
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 4
67316: PUSH
67317: LD_INT 4
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 4
67326: PUSH
67327: LD_INT 3
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 5
67336: PUSH
67337: LD_INT 4
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 5
67346: PUSH
67347: LD_INT 5
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 4
67356: PUSH
67357: LD_INT 5
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 3
67366: PUSH
67367: LD_INT 4
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 3
67376: PUSH
67377: LD_INT 3
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 5
67386: PUSH
67387: LD_INT 3
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 3
67396: PUSH
67397: LD_INT 5
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 0
67406: PUSH
67407: LD_INT 3
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: LD_INT 2
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 1
67426: PUSH
67427: LD_INT 3
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 1
67436: PUSH
67437: LD_INT 4
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: LD_INT 4
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 1
67456: NEG
67457: PUSH
67458: LD_INT 3
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: PUSH
67469: LD_INT 2
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: LD_INT 4
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 2
67488: NEG
67489: PUSH
67490: LD_INT 2
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 4
67499: NEG
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 4
67510: NEG
67511: PUSH
67512: LD_INT 1
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 3
67522: NEG
67523: PUSH
67524: LD_INT 0
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 3
67533: NEG
67534: PUSH
67535: LD_INT 1
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 4
67544: NEG
67545: PUSH
67546: LD_INT 1
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 5
67555: NEG
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 5
67566: NEG
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 5
67578: NEG
67579: PUSH
67580: LD_INT 2
67582: NEG
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 3
67590: NEG
67591: PUSH
67592: LD_INT 2
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: ST_TO_ADDR
// end ; end ;
67646: GO 67649
67648: POP
// case btype of b_depot , b_warehouse :
67649: LD_VAR 0 1
67653: PUSH
67654: LD_INT 0
67656: DOUBLE
67657: EQUAL
67658: IFTRUE 67668
67660: LD_INT 1
67662: DOUBLE
67663: EQUAL
67664: IFTRUE 67668
67666: GO 67869
67668: POP
// case nation of nation_american :
67669: LD_VAR 0 5
67673: PUSH
67674: LD_INT 1
67676: DOUBLE
67677: EQUAL
67678: IFTRUE 67682
67680: GO 67738
67682: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67683: LD_ADDR_VAR 0 9
67687: PUSH
67688: LD_VAR 0 11
67692: PUSH
67693: LD_VAR 0 12
67697: PUSH
67698: LD_VAR 0 13
67702: PUSH
67703: LD_VAR 0 14
67707: PUSH
67708: LD_VAR 0 15
67712: PUSH
67713: LD_VAR 0 16
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: PUSH
67726: LD_VAR 0 4
67730: PUSH
67731: LD_INT 1
67733: PLUS
67734: ARRAY
67735: ST_TO_ADDR
67736: GO 67867
67738: LD_INT 2
67740: DOUBLE
67741: EQUAL
67742: IFTRUE 67746
67744: GO 67802
67746: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67747: LD_ADDR_VAR 0 9
67751: PUSH
67752: LD_VAR 0 17
67756: PUSH
67757: LD_VAR 0 18
67761: PUSH
67762: LD_VAR 0 19
67766: PUSH
67767: LD_VAR 0 20
67771: PUSH
67772: LD_VAR 0 21
67776: PUSH
67777: LD_VAR 0 22
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: PUSH
67790: LD_VAR 0 4
67794: PUSH
67795: LD_INT 1
67797: PLUS
67798: ARRAY
67799: ST_TO_ADDR
67800: GO 67867
67802: LD_INT 3
67804: DOUBLE
67805: EQUAL
67806: IFTRUE 67810
67808: GO 67866
67810: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67811: LD_ADDR_VAR 0 9
67815: PUSH
67816: LD_VAR 0 23
67820: PUSH
67821: LD_VAR 0 24
67825: PUSH
67826: LD_VAR 0 25
67830: PUSH
67831: LD_VAR 0 26
67835: PUSH
67836: LD_VAR 0 27
67840: PUSH
67841: LD_VAR 0 28
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: PUSH
67854: LD_VAR 0 4
67858: PUSH
67859: LD_INT 1
67861: PLUS
67862: ARRAY
67863: ST_TO_ADDR
67864: GO 67867
67866: POP
67867: GO 68422
67869: LD_INT 2
67871: DOUBLE
67872: EQUAL
67873: IFTRUE 67883
67875: LD_INT 3
67877: DOUBLE
67878: EQUAL
67879: IFTRUE 67883
67881: GO 67939
67883: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67884: LD_ADDR_VAR 0 9
67888: PUSH
67889: LD_VAR 0 29
67893: PUSH
67894: LD_VAR 0 30
67898: PUSH
67899: LD_VAR 0 31
67903: PUSH
67904: LD_VAR 0 32
67908: PUSH
67909: LD_VAR 0 33
67913: PUSH
67914: LD_VAR 0 34
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: PUSH
67927: LD_VAR 0 4
67931: PUSH
67932: LD_INT 1
67934: PLUS
67935: ARRAY
67936: ST_TO_ADDR
67937: GO 68422
67939: LD_INT 16
67941: DOUBLE
67942: EQUAL
67943: IFTRUE 68001
67945: LD_INT 17
67947: DOUBLE
67948: EQUAL
67949: IFTRUE 68001
67951: LD_INT 18
67953: DOUBLE
67954: EQUAL
67955: IFTRUE 68001
67957: LD_INT 19
67959: DOUBLE
67960: EQUAL
67961: IFTRUE 68001
67963: LD_INT 22
67965: DOUBLE
67966: EQUAL
67967: IFTRUE 68001
67969: LD_INT 20
67971: DOUBLE
67972: EQUAL
67973: IFTRUE 68001
67975: LD_INT 21
67977: DOUBLE
67978: EQUAL
67979: IFTRUE 68001
67981: LD_INT 23
67983: DOUBLE
67984: EQUAL
67985: IFTRUE 68001
67987: LD_INT 24
67989: DOUBLE
67990: EQUAL
67991: IFTRUE 68001
67993: LD_INT 25
67995: DOUBLE
67996: EQUAL
67997: IFTRUE 68001
67999: GO 68057
68001: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68002: LD_ADDR_VAR 0 9
68006: PUSH
68007: LD_VAR 0 35
68011: PUSH
68012: LD_VAR 0 36
68016: PUSH
68017: LD_VAR 0 37
68021: PUSH
68022: LD_VAR 0 38
68026: PUSH
68027: LD_VAR 0 39
68031: PUSH
68032: LD_VAR 0 40
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: PUSH
68045: LD_VAR 0 4
68049: PUSH
68050: LD_INT 1
68052: PLUS
68053: ARRAY
68054: ST_TO_ADDR
68055: GO 68422
68057: LD_INT 6
68059: DOUBLE
68060: EQUAL
68061: IFTRUE 68113
68063: LD_INT 7
68065: DOUBLE
68066: EQUAL
68067: IFTRUE 68113
68069: LD_INT 8
68071: DOUBLE
68072: EQUAL
68073: IFTRUE 68113
68075: LD_INT 13
68077: DOUBLE
68078: EQUAL
68079: IFTRUE 68113
68081: LD_INT 12
68083: DOUBLE
68084: EQUAL
68085: IFTRUE 68113
68087: LD_INT 15
68089: DOUBLE
68090: EQUAL
68091: IFTRUE 68113
68093: LD_INT 11
68095: DOUBLE
68096: EQUAL
68097: IFTRUE 68113
68099: LD_INT 14
68101: DOUBLE
68102: EQUAL
68103: IFTRUE 68113
68105: LD_INT 10
68107: DOUBLE
68108: EQUAL
68109: IFTRUE 68113
68111: GO 68169
68113: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68114: LD_ADDR_VAR 0 9
68118: PUSH
68119: LD_VAR 0 41
68123: PUSH
68124: LD_VAR 0 42
68128: PUSH
68129: LD_VAR 0 43
68133: PUSH
68134: LD_VAR 0 44
68138: PUSH
68139: LD_VAR 0 45
68143: PUSH
68144: LD_VAR 0 46
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: PUSH
68157: LD_VAR 0 4
68161: PUSH
68162: LD_INT 1
68164: PLUS
68165: ARRAY
68166: ST_TO_ADDR
68167: GO 68422
68169: LD_INT 36
68171: DOUBLE
68172: EQUAL
68173: IFTRUE 68177
68175: GO 68233
68177: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68178: LD_ADDR_VAR 0 9
68182: PUSH
68183: LD_VAR 0 47
68187: PUSH
68188: LD_VAR 0 48
68192: PUSH
68193: LD_VAR 0 49
68197: PUSH
68198: LD_VAR 0 50
68202: PUSH
68203: LD_VAR 0 51
68207: PUSH
68208: LD_VAR 0 52
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: PUSH
68221: LD_VAR 0 4
68225: PUSH
68226: LD_INT 1
68228: PLUS
68229: ARRAY
68230: ST_TO_ADDR
68231: GO 68422
68233: LD_INT 4
68235: DOUBLE
68236: EQUAL
68237: IFTRUE 68259
68239: LD_INT 5
68241: DOUBLE
68242: EQUAL
68243: IFTRUE 68259
68245: LD_INT 34
68247: DOUBLE
68248: EQUAL
68249: IFTRUE 68259
68251: LD_INT 37
68253: DOUBLE
68254: EQUAL
68255: IFTRUE 68259
68257: GO 68315
68259: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68260: LD_ADDR_VAR 0 9
68264: PUSH
68265: LD_VAR 0 53
68269: PUSH
68270: LD_VAR 0 54
68274: PUSH
68275: LD_VAR 0 55
68279: PUSH
68280: LD_VAR 0 56
68284: PUSH
68285: LD_VAR 0 57
68289: PUSH
68290: LD_VAR 0 58
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: PUSH
68303: LD_VAR 0 4
68307: PUSH
68308: LD_INT 1
68310: PLUS
68311: ARRAY
68312: ST_TO_ADDR
68313: GO 68422
68315: LD_INT 31
68317: DOUBLE
68318: EQUAL
68319: IFTRUE 68365
68321: LD_INT 32
68323: DOUBLE
68324: EQUAL
68325: IFTRUE 68365
68327: LD_INT 33
68329: DOUBLE
68330: EQUAL
68331: IFTRUE 68365
68333: LD_INT 27
68335: DOUBLE
68336: EQUAL
68337: IFTRUE 68365
68339: LD_INT 26
68341: DOUBLE
68342: EQUAL
68343: IFTRUE 68365
68345: LD_INT 28
68347: DOUBLE
68348: EQUAL
68349: IFTRUE 68365
68351: LD_INT 29
68353: DOUBLE
68354: EQUAL
68355: IFTRUE 68365
68357: LD_INT 30
68359: DOUBLE
68360: EQUAL
68361: IFTRUE 68365
68363: GO 68421
68365: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68366: LD_ADDR_VAR 0 9
68370: PUSH
68371: LD_VAR 0 59
68375: PUSH
68376: LD_VAR 0 60
68380: PUSH
68381: LD_VAR 0 61
68385: PUSH
68386: LD_VAR 0 62
68390: PUSH
68391: LD_VAR 0 63
68395: PUSH
68396: LD_VAR 0 64
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: PUSH
68409: LD_VAR 0 4
68413: PUSH
68414: LD_INT 1
68416: PLUS
68417: ARRAY
68418: ST_TO_ADDR
68419: GO 68422
68421: POP
// temp_list2 = [ ] ;
68422: LD_ADDR_VAR 0 10
68426: PUSH
68427: EMPTY
68428: ST_TO_ADDR
// for i in temp_list do
68429: LD_ADDR_VAR 0 8
68433: PUSH
68434: LD_VAR 0 9
68438: PUSH
68439: FOR_IN
68440: IFFALSE 68492
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68442: LD_ADDR_VAR 0 10
68446: PUSH
68447: LD_VAR 0 10
68451: PUSH
68452: LD_VAR 0 8
68456: PUSH
68457: LD_INT 1
68459: ARRAY
68460: PUSH
68461: LD_VAR 0 2
68465: PLUS
68466: PUSH
68467: LD_VAR 0 8
68471: PUSH
68472: LD_INT 2
68474: ARRAY
68475: PUSH
68476: LD_VAR 0 3
68480: PLUS
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: EMPTY
68487: LIST
68488: ADD
68489: ST_TO_ADDR
68490: GO 68439
68492: POP
68493: POP
// result = temp_list2 ;
68494: LD_ADDR_VAR 0 7
68498: PUSH
68499: LD_VAR 0 10
68503: ST_TO_ADDR
// end ;
68504: LD_VAR 0 7
68508: RET
// export function EnemyInRange ( unit , dist ) ; begin
68509: LD_INT 0
68511: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68512: LD_ADDR_VAR 0 3
68516: PUSH
68517: LD_VAR 0 1
68521: PPUSH
68522: CALL_OW 255
68526: PPUSH
68527: LD_VAR 0 1
68531: PPUSH
68532: CALL_OW 250
68536: PPUSH
68537: LD_VAR 0 1
68541: PPUSH
68542: CALL_OW 251
68546: PPUSH
68547: LD_VAR 0 2
68551: PPUSH
68552: CALL 42280 0 4
68556: PUSH
68557: LD_INT 4
68559: ARRAY
68560: ST_TO_ADDR
// end ;
68561: LD_VAR 0 3
68565: RET
// export function PlayerSeeMe ( unit ) ; begin
68566: LD_INT 0
68568: PPUSH
// result := See ( your_side , unit ) ;
68569: LD_ADDR_VAR 0 2
68573: PUSH
68574: LD_OWVAR 2
68578: PPUSH
68579: LD_VAR 0 1
68583: PPUSH
68584: CALL_OW 292
68588: ST_TO_ADDR
// end ;
68589: LD_VAR 0 2
68593: RET
// export function ReverseDir ( unit ) ; begin
68594: LD_INT 0
68596: PPUSH
// if not unit then
68597: LD_VAR 0 1
68601: NOT
68602: IFFALSE 68606
// exit ;
68604: GO 68629
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68606: LD_ADDR_VAR 0 2
68610: PUSH
68611: LD_VAR 0 1
68615: PPUSH
68616: CALL_OW 254
68620: PUSH
68621: LD_INT 3
68623: PLUS
68624: PUSH
68625: LD_INT 6
68627: MOD
68628: ST_TO_ADDR
// end ;
68629: LD_VAR 0 2
68633: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68634: LD_INT 0
68636: PPUSH
68637: PPUSH
68638: PPUSH
68639: PPUSH
68640: PPUSH
// if not hexes then
68641: LD_VAR 0 2
68645: NOT
68646: IFFALSE 68650
// exit ;
68648: GO 68798
// dist := 9999 ;
68650: LD_ADDR_VAR 0 5
68654: PUSH
68655: LD_INT 9999
68657: ST_TO_ADDR
// for i = 1 to hexes do
68658: LD_ADDR_VAR 0 4
68662: PUSH
68663: DOUBLE
68664: LD_INT 1
68666: DEC
68667: ST_TO_ADDR
68668: LD_VAR 0 2
68672: PUSH
68673: FOR_TO
68674: IFFALSE 68786
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68676: LD_VAR 0 1
68680: PPUSH
68681: LD_VAR 0 2
68685: PUSH
68686: LD_VAR 0 4
68690: ARRAY
68691: PUSH
68692: LD_INT 1
68694: ARRAY
68695: PPUSH
68696: LD_VAR 0 2
68700: PUSH
68701: LD_VAR 0 4
68705: ARRAY
68706: PUSH
68707: LD_INT 2
68709: ARRAY
68710: PPUSH
68711: CALL_OW 297
68715: PUSH
68716: LD_VAR 0 5
68720: LESS
68721: IFFALSE 68784
// begin hex := hexes [ i ] ;
68723: LD_ADDR_VAR 0 7
68727: PUSH
68728: LD_VAR 0 2
68732: PUSH
68733: LD_VAR 0 4
68737: ARRAY
68738: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68739: LD_ADDR_VAR 0 5
68743: PUSH
68744: LD_VAR 0 1
68748: PPUSH
68749: LD_VAR 0 2
68753: PUSH
68754: LD_VAR 0 4
68758: ARRAY
68759: PUSH
68760: LD_INT 1
68762: ARRAY
68763: PPUSH
68764: LD_VAR 0 2
68768: PUSH
68769: LD_VAR 0 4
68773: ARRAY
68774: PUSH
68775: LD_INT 2
68777: ARRAY
68778: PPUSH
68779: CALL_OW 297
68783: ST_TO_ADDR
// end ; end ;
68784: GO 68673
68786: POP
68787: POP
// result := hex ;
68788: LD_ADDR_VAR 0 3
68792: PUSH
68793: LD_VAR 0 7
68797: ST_TO_ADDR
// end ;
68798: LD_VAR 0 3
68802: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68803: LD_INT 0
68805: PPUSH
68806: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68807: LD_VAR 0 1
68811: NOT
68812: PUSH
68813: LD_VAR 0 1
68817: PUSH
68818: LD_INT 21
68820: PUSH
68821: LD_INT 2
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 23
68830: PUSH
68831: LD_INT 2
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PPUSH
68842: CALL_OW 69
68846: IN
68847: NOT
68848: OR
68849: IFFALSE 68853
// exit ;
68851: GO 68900
// for i = 1 to 3 do
68853: LD_ADDR_VAR 0 3
68857: PUSH
68858: DOUBLE
68859: LD_INT 1
68861: DEC
68862: ST_TO_ADDR
68863: LD_INT 3
68865: PUSH
68866: FOR_TO
68867: IFFALSE 68898
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68869: LD_VAR 0 1
68873: PPUSH
68874: CALL_OW 250
68878: PPUSH
68879: LD_VAR 0 1
68883: PPUSH
68884: CALL_OW 251
68888: PPUSH
68889: LD_INT 1
68891: PPUSH
68892: CALL_OW 453
68896: GO 68866
68898: POP
68899: POP
// end ;
68900: LD_VAR 0 2
68904: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68905: LD_INT 0
68907: PPUSH
68908: PPUSH
68909: PPUSH
68910: PPUSH
68911: PPUSH
68912: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68913: LD_VAR 0 1
68917: NOT
68918: PUSH
68919: LD_VAR 0 2
68923: NOT
68924: OR
68925: PUSH
68926: LD_VAR 0 1
68930: PPUSH
68931: CALL_OW 314
68935: OR
68936: IFFALSE 68940
// exit ;
68938: GO 69381
// x := GetX ( enemy_unit ) ;
68940: LD_ADDR_VAR 0 7
68944: PUSH
68945: LD_VAR 0 2
68949: PPUSH
68950: CALL_OW 250
68954: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68955: LD_ADDR_VAR 0 8
68959: PUSH
68960: LD_VAR 0 2
68964: PPUSH
68965: CALL_OW 251
68969: ST_TO_ADDR
// if not x or not y then
68970: LD_VAR 0 7
68974: NOT
68975: PUSH
68976: LD_VAR 0 8
68980: NOT
68981: OR
68982: IFFALSE 68986
// exit ;
68984: GO 69381
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68986: LD_ADDR_VAR 0 6
68990: PUSH
68991: LD_VAR 0 7
68995: PPUSH
68996: LD_INT 0
68998: PPUSH
68999: LD_INT 4
69001: PPUSH
69002: CALL_OW 272
69006: PUSH
69007: LD_VAR 0 8
69011: PPUSH
69012: LD_INT 0
69014: PPUSH
69015: LD_INT 4
69017: PPUSH
69018: CALL_OW 273
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_VAR 0 7
69031: PPUSH
69032: LD_INT 1
69034: PPUSH
69035: LD_INT 4
69037: PPUSH
69038: CALL_OW 272
69042: PUSH
69043: LD_VAR 0 8
69047: PPUSH
69048: LD_INT 1
69050: PPUSH
69051: LD_INT 4
69053: PPUSH
69054: CALL_OW 273
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_VAR 0 7
69067: PPUSH
69068: LD_INT 2
69070: PPUSH
69071: LD_INT 4
69073: PPUSH
69074: CALL_OW 272
69078: PUSH
69079: LD_VAR 0 8
69083: PPUSH
69084: LD_INT 2
69086: PPUSH
69087: LD_INT 4
69089: PPUSH
69090: CALL_OW 273
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_VAR 0 7
69103: PPUSH
69104: LD_INT 3
69106: PPUSH
69107: LD_INT 4
69109: PPUSH
69110: CALL_OW 272
69114: PUSH
69115: LD_VAR 0 8
69119: PPUSH
69120: LD_INT 3
69122: PPUSH
69123: LD_INT 4
69125: PPUSH
69126: CALL_OW 273
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_VAR 0 7
69139: PPUSH
69140: LD_INT 4
69142: PPUSH
69143: LD_INT 4
69145: PPUSH
69146: CALL_OW 272
69150: PUSH
69151: LD_VAR 0 8
69155: PPUSH
69156: LD_INT 4
69158: PPUSH
69159: LD_INT 4
69161: PPUSH
69162: CALL_OW 273
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_VAR 0 7
69175: PPUSH
69176: LD_INT 5
69178: PPUSH
69179: LD_INT 4
69181: PPUSH
69182: CALL_OW 272
69186: PUSH
69187: LD_VAR 0 8
69191: PPUSH
69192: LD_INT 5
69194: PPUSH
69195: LD_INT 4
69197: PPUSH
69198: CALL_OW 273
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: ST_TO_ADDR
// for i = tmp downto 1 do
69215: LD_ADDR_VAR 0 4
69219: PUSH
69220: DOUBLE
69221: LD_VAR 0 6
69225: INC
69226: ST_TO_ADDR
69227: LD_INT 1
69229: PUSH
69230: FOR_DOWNTO
69231: IFFALSE 69332
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69233: LD_VAR 0 6
69237: PUSH
69238: LD_VAR 0 4
69242: ARRAY
69243: PUSH
69244: LD_INT 1
69246: ARRAY
69247: PPUSH
69248: LD_VAR 0 6
69252: PUSH
69253: LD_VAR 0 4
69257: ARRAY
69258: PUSH
69259: LD_INT 2
69261: ARRAY
69262: PPUSH
69263: CALL_OW 488
69267: NOT
69268: PUSH
69269: LD_VAR 0 6
69273: PUSH
69274: LD_VAR 0 4
69278: ARRAY
69279: PUSH
69280: LD_INT 1
69282: ARRAY
69283: PPUSH
69284: LD_VAR 0 6
69288: PUSH
69289: LD_VAR 0 4
69293: ARRAY
69294: PUSH
69295: LD_INT 2
69297: ARRAY
69298: PPUSH
69299: CALL_OW 428
69303: PUSH
69304: LD_INT 0
69306: NONEQUAL
69307: OR
69308: IFFALSE 69330
// tmp := Delete ( tmp , i ) ;
69310: LD_ADDR_VAR 0 6
69314: PUSH
69315: LD_VAR 0 6
69319: PPUSH
69320: LD_VAR 0 4
69324: PPUSH
69325: CALL_OW 3
69329: ST_TO_ADDR
69330: GO 69230
69332: POP
69333: POP
// j := GetClosestHex ( unit , tmp ) ;
69334: LD_ADDR_VAR 0 5
69338: PUSH
69339: LD_VAR 0 1
69343: PPUSH
69344: LD_VAR 0 6
69348: PPUSH
69349: CALL 68634 0 2
69353: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69354: LD_VAR 0 1
69358: PPUSH
69359: LD_VAR 0 5
69363: PUSH
69364: LD_INT 1
69366: ARRAY
69367: PPUSH
69368: LD_VAR 0 5
69372: PUSH
69373: LD_INT 2
69375: ARRAY
69376: PPUSH
69377: CALL_OW 111
// end ;
69381: LD_VAR 0 3
69385: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69386: LD_INT 0
69388: PPUSH
69389: PPUSH
69390: PPUSH
// uc_side = 0 ;
69391: LD_ADDR_OWVAR 20
69395: PUSH
69396: LD_INT 0
69398: ST_TO_ADDR
// uc_nation = 0 ;
69399: LD_ADDR_OWVAR 21
69403: PUSH
69404: LD_INT 0
69406: ST_TO_ADDR
// InitHc_All ( ) ;
69407: CALL_OW 584
// InitVc ;
69411: CALL_OW 20
// if mastodonts then
69415: LD_VAR 0 6
69419: IFFALSE 69486
// for i = 1 to mastodonts do
69421: LD_ADDR_VAR 0 11
69425: PUSH
69426: DOUBLE
69427: LD_INT 1
69429: DEC
69430: ST_TO_ADDR
69431: LD_VAR 0 6
69435: PUSH
69436: FOR_TO
69437: IFFALSE 69484
// begin vc_chassis := 31 ;
69439: LD_ADDR_OWVAR 37
69443: PUSH
69444: LD_INT 31
69446: ST_TO_ADDR
// vc_control := control_rider ;
69447: LD_ADDR_OWVAR 38
69451: PUSH
69452: LD_INT 4
69454: ST_TO_ADDR
// animal := CreateVehicle ;
69455: LD_ADDR_VAR 0 12
69459: PUSH
69460: CALL_OW 45
69464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69465: LD_VAR 0 12
69469: PPUSH
69470: LD_VAR 0 8
69474: PPUSH
69475: LD_INT 0
69477: PPUSH
69478: CALL 71674 0 3
// end ;
69482: GO 69436
69484: POP
69485: POP
// if horses then
69486: LD_VAR 0 5
69490: IFFALSE 69557
// for i = 1 to horses do
69492: LD_ADDR_VAR 0 11
69496: PUSH
69497: DOUBLE
69498: LD_INT 1
69500: DEC
69501: ST_TO_ADDR
69502: LD_VAR 0 5
69506: PUSH
69507: FOR_TO
69508: IFFALSE 69555
// begin hc_class := 21 ;
69510: LD_ADDR_OWVAR 28
69514: PUSH
69515: LD_INT 21
69517: ST_TO_ADDR
// hc_gallery :=  ;
69518: LD_ADDR_OWVAR 33
69522: PUSH
69523: LD_STRING 
69525: ST_TO_ADDR
// animal := CreateHuman ;
69526: LD_ADDR_VAR 0 12
69530: PUSH
69531: CALL_OW 44
69535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69536: LD_VAR 0 12
69540: PPUSH
69541: LD_VAR 0 8
69545: PPUSH
69546: LD_INT 0
69548: PPUSH
69549: CALL 71674 0 3
// end ;
69553: GO 69507
69555: POP
69556: POP
// if birds then
69557: LD_VAR 0 1
69561: IFFALSE 69628
// for i = 1 to birds do
69563: LD_ADDR_VAR 0 11
69567: PUSH
69568: DOUBLE
69569: LD_INT 1
69571: DEC
69572: ST_TO_ADDR
69573: LD_VAR 0 1
69577: PUSH
69578: FOR_TO
69579: IFFALSE 69626
// begin hc_class = 18 ;
69581: LD_ADDR_OWVAR 28
69585: PUSH
69586: LD_INT 18
69588: ST_TO_ADDR
// hc_gallery =  ;
69589: LD_ADDR_OWVAR 33
69593: PUSH
69594: LD_STRING 
69596: ST_TO_ADDR
// animal := CreateHuman ;
69597: LD_ADDR_VAR 0 12
69601: PUSH
69602: CALL_OW 44
69606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69607: LD_VAR 0 12
69611: PPUSH
69612: LD_VAR 0 8
69616: PPUSH
69617: LD_INT 0
69619: PPUSH
69620: CALL 71674 0 3
// end ;
69624: GO 69578
69626: POP
69627: POP
// if tigers then
69628: LD_VAR 0 2
69632: IFFALSE 69716
// for i = 1 to tigers do
69634: LD_ADDR_VAR 0 11
69638: PUSH
69639: DOUBLE
69640: LD_INT 1
69642: DEC
69643: ST_TO_ADDR
69644: LD_VAR 0 2
69648: PUSH
69649: FOR_TO
69650: IFFALSE 69714
// begin hc_class = class_tiger ;
69652: LD_ADDR_OWVAR 28
69656: PUSH
69657: LD_INT 14
69659: ST_TO_ADDR
// hc_gallery =  ;
69660: LD_ADDR_OWVAR 33
69664: PUSH
69665: LD_STRING 
69667: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69668: LD_ADDR_OWVAR 35
69672: PUSH
69673: LD_INT 7
69675: NEG
69676: PPUSH
69677: LD_INT 7
69679: PPUSH
69680: CALL_OW 12
69684: ST_TO_ADDR
// animal := CreateHuman ;
69685: LD_ADDR_VAR 0 12
69689: PUSH
69690: CALL_OW 44
69694: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69695: LD_VAR 0 12
69699: PPUSH
69700: LD_VAR 0 8
69704: PPUSH
69705: LD_INT 0
69707: PPUSH
69708: CALL 71674 0 3
// end ;
69712: GO 69649
69714: POP
69715: POP
// if apemans then
69716: LD_VAR 0 3
69720: IFFALSE 69843
// for i = 1 to apemans do
69722: LD_ADDR_VAR 0 11
69726: PUSH
69727: DOUBLE
69728: LD_INT 1
69730: DEC
69731: ST_TO_ADDR
69732: LD_VAR 0 3
69736: PUSH
69737: FOR_TO
69738: IFFALSE 69841
// begin hc_class = class_apeman ;
69740: LD_ADDR_OWVAR 28
69744: PUSH
69745: LD_INT 12
69747: ST_TO_ADDR
// hc_gallery =  ;
69748: LD_ADDR_OWVAR 33
69752: PUSH
69753: LD_STRING 
69755: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69756: LD_ADDR_OWVAR 35
69760: PUSH
69761: LD_INT 5
69763: NEG
69764: PPUSH
69765: LD_INT 5
69767: PPUSH
69768: CALL_OW 12
69772: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69773: LD_ADDR_OWVAR 31
69777: PUSH
69778: LD_INT 1
69780: PPUSH
69781: LD_INT 3
69783: PPUSH
69784: CALL_OW 12
69788: PUSH
69789: LD_INT 1
69791: PPUSH
69792: LD_INT 3
69794: PPUSH
69795: CALL_OW 12
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: LD_INT 0
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: ST_TO_ADDR
// animal := CreateHuman ;
69812: LD_ADDR_VAR 0 12
69816: PUSH
69817: CALL_OW 44
69821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69822: LD_VAR 0 12
69826: PPUSH
69827: LD_VAR 0 8
69831: PPUSH
69832: LD_INT 0
69834: PPUSH
69835: CALL 71674 0 3
// end ;
69839: GO 69737
69841: POP
69842: POP
// if enchidnas then
69843: LD_VAR 0 4
69847: IFFALSE 69914
// for i = 1 to enchidnas do
69849: LD_ADDR_VAR 0 11
69853: PUSH
69854: DOUBLE
69855: LD_INT 1
69857: DEC
69858: ST_TO_ADDR
69859: LD_VAR 0 4
69863: PUSH
69864: FOR_TO
69865: IFFALSE 69912
// begin hc_class = 13 ;
69867: LD_ADDR_OWVAR 28
69871: PUSH
69872: LD_INT 13
69874: ST_TO_ADDR
// hc_gallery =  ;
69875: LD_ADDR_OWVAR 33
69879: PUSH
69880: LD_STRING 
69882: ST_TO_ADDR
// animal := CreateHuman ;
69883: LD_ADDR_VAR 0 12
69887: PUSH
69888: CALL_OW 44
69892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69893: LD_VAR 0 12
69897: PPUSH
69898: LD_VAR 0 8
69902: PPUSH
69903: LD_INT 0
69905: PPUSH
69906: CALL 71674 0 3
// end ;
69910: GO 69864
69912: POP
69913: POP
// if fishes then
69914: LD_VAR 0 7
69918: IFFALSE 69985
// for i = 1 to fishes do
69920: LD_ADDR_VAR 0 11
69924: PUSH
69925: DOUBLE
69926: LD_INT 1
69928: DEC
69929: ST_TO_ADDR
69930: LD_VAR 0 7
69934: PUSH
69935: FOR_TO
69936: IFFALSE 69983
// begin hc_class = 20 ;
69938: LD_ADDR_OWVAR 28
69942: PUSH
69943: LD_INT 20
69945: ST_TO_ADDR
// hc_gallery =  ;
69946: LD_ADDR_OWVAR 33
69950: PUSH
69951: LD_STRING 
69953: ST_TO_ADDR
// animal := CreateHuman ;
69954: LD_ADDR_VAR 0 12
69958: PUSH
69959: CALL_OW 44
69963: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69964: LD_VAR 0 12
69968: PPUSH
69969: LD_VAR 0 9
69973: PPUSH
69974: LD_INT 0
69976: PPUSH
69977: CALL 71674 0 3
// end ;
69981: GO 69935
69983: POP
69984: POP
// end ;
69985: LD_VAR 0 10
69989: RET
// export function WantHeal ( sci , unit ) ; begin
69990: LD_INT 0
69992: PPUSH
// if GetTaskList ( sci ) > 0 then
69993: LD_VAR 0 1
69997: PPUSH
69998: CALL_OW 437
70002: PUSH
70003: LD_INT 0
70005: GREATER
70006: IFFALSE 70076
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70008: LD_VAR 0 1
70012: PPUSH
70013: CALL_OW 437
70017: PUSH
70018: LD_INT 1
70020: ARRAY
70021: PUSH
70022: LD_INT 1
70024: ARRAY
70025: PUSH
70026: LD_STRING l
70028: EQUAL
70029: PUSH
70030: LD_VAR 0 1
70034: PPUSH
70035: CALL_OW 437
70039: PUSH
70040: LD_INT 1
70042: ARRAY
70043: PUSH
70044: LD_INT 4
70046: ARRAY
70047: PUSH
70048: LD_VAR 0 2
70052: EQUAL
70053: AND
70054: IFFALSE 70066
// result := true else
70056: LD_ADDR_VAR 0 3
70060: PUSH
70061: LD_INT 1
70063: ST_TO_ADDR
70064: GO 70074
// result := false ;
70066: LD_ADDR_VAR 0 3
70070: PUSH
70071: LD_INT 0
70073: ST_TO_ADDR
// end else
70074: GO 70084
// result := false ;
70076: LD_ADDR_VAR 0 3
70080: PUSH
70081: LD_INT 0
70083: ST_TO_ADDR
// end ;
70084: LD_VAR 0 3
70088: RET
// export function HealTarget ( sci ) ; begin
70089: LD_INT 0
70091: PPUSH
// if not sci then
70092: LD_VAR 0 1
70096: NOT
70097: IFFALSE 70101
// exit ;
70099: GO 70166
// result := 0 ;
70101: LD_ADDR_VAR 0 2
70105: PUSH
70106: LD_INT 0
70108: ST_TO_ADDR
// if GetTaskList ( sci ) then
70109: LD_VAR 0 1
70113: PPUSH
70114: CALL_OW 437
70118: IFFALSE 70166
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70120: LD_VAR 0 1
70124: PPUSH
70125: CALL_OW 437
70129: PUSH
70130: LD_INT 1
70132: ARRAY
70133: PUSH
70134: LD_INT 1
70136: ARRAY
70137: PUSH
70138: LD_STRING l
70140: EQUAL
70141: IFFALSE 70166
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70143: LD_ADDR_VAR 0 2
70147: PUSH
70148: LD_VAR 0 1
70152: PPUSH
70153: CALL_OW 437
70157: PUSH
70158: LD_INT 1
70160: ARRAY
70161: PUSH
70162: LD_INT 4
70164: ARRAY
70165: ST_TO_ADDR
// end ;
70166: LD_VAR 0 2
70170: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70171: LD_INT 0
70173: PPUSH
70174: PPUSH
70175: PPUSH
70176: PPUSH
// if not base_units then
70177: LD_VAR 0 1
70181: NOT
70182: IFFALSE 70186
// exit ;
70184: GO 70273
// result := false ;
70186: LD_ADDR_VAR 0 2
70190: PUSH
70191: LD_INT 0
70193: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70194: LD_ADDR_VAR 0 5
70198: PUSH
70199: LD_VAR 0 1
70203: PPUSH
70204: LD_INT 21
70206: PUSH
70207: LD_INT 3
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PPUSH
70214: CALL_OW 72
70218: ST_TO_ADDR
// if not tmp then
70219: LD_VAR 0 5
70223: NOT
70224: IFFALSE 70228
// exit ;
70226: GO 70273
// for i in tmp do
70228: LD_ADDR_VAR 0 3
70232: PUSH
70233: LD_VAR 0 5
70237: PUSH
70238: FOR_IN
70239: IFFALSE 70271
// begin result := EnemyInRange ( i , 22 ) ;
70241: LD_ADDR_VAR 0 2
70245: PUSH
70246: LD_VAR 0 3
70250: PPUSH
70251: LD_INT 22
70253: PPUSH
70254: CALL 68509 0 2
70258: ST_TO_ADDR
// if result then
70259: LD_VAR 0 2
70263: IFFALSE 70269
// exit ;
70265: POP
70266: POP
70267: GO 70273
// end ;
70269: GO 70238
70271: POP
70272: POP
// end ;
70273: LD_VAR 0 2
70277: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70278: LD_INT 0
70280: PPUSH
70281: PPUSH
// if not units then
70282: LD_VAR 0 1
70286: NOT
70287: IFFALSE 70291
// exit ;
70289: GO 70361
// result := [ ] ;
70291: LD_ADDR_VAR 0 3
70295: PUSH
70296: EMPTY
70297: ST_TO_ADDR
// for i in units do
70298: LD_ADDR_VAR 0 4
70302: PUSH
70303: LD_VAR 0 1
70307: PUSH
70308: FOR_IN
70309: IFFALSE 70359
// if GetTag ( i ) = tag then
70311: LD_VAR 0 4
70315: PPUSH
70316: CALL_OW 110
70320: PUSH
70321: LD_VAR 0 2
70325: EQUAL
70326: IFFALSE 70357
// result := Insert ( result , result + 1 , i ) ;
70328: LD_ADDR_VAR 0 3
70332: PUSH
70333: LD_VAR 0 3
70337: PPUSH
70338: LD_VAR 0 3
70342: PUSH
70343: LD_INT 1
70345: PLUS
70346: PPUSH
70347: LD_VAR 0 4
70351: PPUSH
70352: CALL_OW 2
70356: ST_TO_ADDR
70357: GO 70308
70359: POP
70360: POP
// end ;
70361: LD_VAR 0 3
70365: RET
// export function IsDriver ( un ) ; begin
70366: LD_INT 0
70368: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70369: LD_ADDR_VAR 0 2
70373: PUSH
70374: LD_VAR 0 1
70378: PUSH
70379: LD_INT 55
70381: PUSH
70382: EMPTY
70383: LIST
70384: PPUSH
70385: CALL_OW 69
70389: IN
70390: ST_TO_ADDR
// end ;
70391: LD_VAR 0 2
70395: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70396: LD_INT 0
70398: PPUSH
70399: PPUSH
// list := [ ] ;
70400: LD_ADDR_VAR 0 5
70404: PUSH
70405: EMPTY
70406: ST_TO_ADDR
// case d of 0 :
70407: LD_VAR 0 3
70411: PUSH
70412: LD_INT 0
70414: DOUBLE
70415: EQUAL
70416: IFTRUE 70420
70418: GO 70553
70420: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70421: LD_ADDR_VAR 0 5
70425: PUSH
70426: LD_VAR 0 1
70430: PUSH
70431: LD_INT 4
70433: MINUS
70434: PUSH
70435: LD_VAR 0 2
70439: PUSH
70440: LD_INT 4
70442: MINUS
70443: PUSH
70444: LD_INT 2
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: LIST
70451: PUSH
70452: LD_VAR 0 1
70456: PUSH
70457: LD_INT 3
70459: MINUS
70460: PUSH
70461: LD_VAR 0 2
70465: PUSH
70466: LD_INT 1
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: LIST
70473: PUSH
70474: LD_VAR 0 1
70478: PUSH
70479: LD_INT 4
70481: PLUS
70482: PUSH
70483: LD_VAR 0 2
70487: PUSH
70488: LD_INT 4
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: LIST
70495: PUSH
70496: LD_VAR 0 1
70500: PUSH
70501: LD_INT 3
70503: PLUS
70504: PUSH
70505: LD_VAR 0 2
70509: PUSH
70510: LD_INT 3
70512: PLUS
70513: PUSH
70514: LD_INT 5
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: LIST
70521: PUSH
70522: LD_VAR 0 1
70526: PUSH
70527: LD_VAR 0 2
70531: PUSH
70532: LD_INT 4
70534: PLUS
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: LIST
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: ST_TO_ADDR
// end ; 1 :
70551: GO 71251
70553: LD_INT 1
70555: DOUBLE
70556: EQUAL
70557: IFTRUE 70561
70559: GO 70694
70561: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70562: LD_ADDR_VAR 0 5
70566: PUSH
70567: LD_VAR 0 1
70571: PUSH
70572: LD_VAR 0 2
70576: PUSH
70577: LD_INT 4
70579: MINUS
70580: PUSH
70581: LD_INT 3
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: LIST
70588: PUSH
70589: LD_VAR 0 1
70593: PUSH
70594: LD_INT 3
70596: MINUS
70597: PUSH
70598: LD_VAR 0 2
70602: PUSH
70603: LD_INT 3
70605: MINUS
70606: PUSH
70607: LD_INT 2
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: LIST
70614: PUSH
70615: LD_VAR 0 1
70619: PUSH
70620: LD_INT 4
70622: MINUS
70623: PUSH
70624: LD_VAR 0 2
70628: PUSH
70629: LD_INT 1
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: LIST
70636: PUSH
70637: LD_VAR 0 1
70641: PUSH
70642: LD_VAR 0 2
70646: PUSH
70647: LD_INT 3
70649: PLUS
70650: PUSH
70651: LD_INT 0
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: LIST
70658: PUSH
70659: LD_VAR 0 1
70663: PUSH
70664: LD_INT 4
70666: PLUS
70667: PUSH
70668: LD_VAR 0 2
70672: PUSH
70673: LD_INT 4
70675: PLUS
70676: PUSH
70677: LD_INT 5
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: LIST
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: ST_TO_ADDR
// end ; 2 :
70692: GO 71251
70694: LD_INT 2
70696: DOUBLE
70697: EQUAL
70698: IFTRUE 70702
70700: GO 70831
70702: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70703: LD_ADDR_VAR 0 5
70707: PUSH
70708: LD_VAR 0 1
70712: PUSH
70713: LD_VAR 0 2
70717: PUSH
70718: LD_INT 3
70720: MINUS
70721: PUSH
70722: LD_INT 3
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: LIST
70729: PUSH
70730: LD_VAR 0 1
70734: PUSH
70735: LD_INT 4
70737: PLUS
70738: PUSH
70739: LD_VAR 0 2
70743: PUSH
70744: LD_INT 4
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: LIST
70751: PUSH
70752: LD_VAR 0 1
70756: PUSH
70757: LD_VAR 0 2
70761: PUSH
70762: LD_INT 4
70764: PLUS
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: LIST
70773: PUSH
70774: LD_VAR 0 1
70778: PUSH
70779: LD_INT 3
70781: MINUS
70782: PUSH
70783: LD_VAR 0 2
70787: PUSH
70788: LD_INT 1
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: LIST
70795: PUSH
70796: LD_VAR 0 1
70800: PUSH
70801: LD_INT 4
70803: MINUS
70804: PUSH
70805: LD_VAR 0 2
70809: PUSH
70810: LD_INT 4
70812: MINUS
70813: PUSH
70814: LD_INT 2
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: LIST
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: ST_TO_ADDR
// end ; 3 :
70829: GO 71251
70831: LD_INT 3
70833: DOUBLE
70834: EQUAL
70835: IFTRUE 70839
70837: GO 70972
70839: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70840: LD_ADDR_VAR 0 5
70844: PUSH
70845: LD_VAR 0 1
70849: PUSH
70850: LD_INT 3
70852: PLUS
70853: PUSH
70854: LD_VAR 0 2
70858: PUSH
70859: LD_INT 4
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: LIST
70866: PUSH
70867: LD_VAR 0 1
70871: PUSH
70872: LD_INT 4
70874: PLUS
70875: PUSH
70876: LD_VAR 0 2
70880: PUSH
70881: LD_INT 4
70883: PLUS
70884: PUSH
70885: LD_INT 5
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: LIST
70892: PUSH
70893: LD_VAR 0 1
70897: PUSH
70898: LD_INT 4
70900: MINUS
70901: PUSH
70902: LD_VAR 0 2
70906: PUSH
70907: LD_INT 1
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: LIST
70914: PUSH
70915: LD_VAR 0 1
70919: PUSH
70920: LD_VAR 0 2
70924: PUSH
70925: LD_INT 4
70927: MINUS
70928: PUSH
70929: LD_INT 3
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: LIST
70936: PUSH
70937: LD_VAR 0 1
70941: PUSH
70942: LD_INT 3
70944: MINUS
70945: PUSH
70946: LD_VAR 0 2
70950: PUSH
70951: LD_INT 3
70953: MINUS
70954: PUSH
70955: LD_INT 2
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: LIST
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: ST_TO_ADDR
// end ; 4 :
70970: GO 71251
70972: LD_INT 4
70974: DOUBLE
70975: EQUAL
70976: IFTRUE 70980
70978: GO 71113
70980: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70981: LD_ADDR_VAR 0 5
70985: PUSH
70986: LD_VAR 0 1
70990: PUSH
70991: LD_VAR 0 2
70995: PUSH
70996: LD_INT 4
70998: PLUS
70999: PUSH
71000: LD_INT 0
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: LIST
71007: PUSH
71008: LD_VAR 0 1
71012: PUSH
71013: LD_INT 3
71015: PLUS
71016: PUSH
71017: LD_VAR 0 2
71021: PUSH
71022: LD_INT 3
71024: PLUS
71025: PUSH
71026: LD_INT 5
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: LIST
71033: PUSH
71034: LD_VAR 0 1
71038: PUSH
71039: LD_INT 4
71041: PLUS
71042: PUSH
71043: LD_VAR 0 2
71047: PUSH
71048: LD_INT 4
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: LIST
71055: PUSH
71056: LD_VAR 0 1
71060: PUSH
71061: LD_VAR 0 2
71065: PUSH
71066: LD_INT 3
71068: MINUS
71069: PUSH
71070: LD_INT 3
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: LIST
71077: PUSH
71078: LD_VAR 0 1
71082: PUSH
71083: LD_INT 4
71085: MINUS
71086: PUSH
71087: LD_VAR 0 2
71091: PUSH
71092: LD_INT 4
71094: MINUS
71095: PUSH
71096: LD_INT 2
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: LIST
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: ST_TO_ADDR
// end ; 5 :
71111: GO 71251
71113: LD_INT 5
71115: DOUBLE
71116: EQUAL
71117: IFTRUE 71121
71119: GO 71250
71121: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71122: LD_ADDR_VAR 0 5
71126: PUSH
71127: LD_VAR 0 1
71131: PUSH
71132: LD_INT 4
71134: MINUS
71135: PUSH
71136: LD_VAR 0 2
71140: PUSH
71141: LD_INT 1
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: LIST
71148: PUSH
71149: LD_VAR 0 1
71153: PUSH
71154: LD_VAR 0 2
71158: PUSH
71159: LD_INT 4
71161: MINUS
71162: PUSH
71163: LD_INT 3
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: LIST
71170: PUSH
71171: LD_VAR 0 1
71175: PUSH
71176: LD_INT 4
71178: PLUS
71179: PUSH
71180: LD_VAR 0 2
71184: PUSH
71185: LD_INT 4
71187: PLUS
71188: PUSH
71189: LD_INT 5
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: LIST
71196: PUSH
71197: LD_VAR 0 1
71201: PUSH
71202: LD_INT 3
71204: PLUS
71205: PUSH
71206: LD_VAR 0 2
71210: PUSH
71211: LD_INT 4
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: LIST
71218: PUSH
71219: LD_VAR 0 1
71223: PUSH
71224: LD_VAR 0 2
71228: PUSH
71229: LD_INT 3
71231: PLUS
71232: PUSH
71233: LD_INT 0
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: LIST
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: ST_TO_ADDR
// end ; end ;
71248: GO 71251
71250: POP
// result := list ;
71251: LD_ADDR_VAR 0 4
71255: PUSH
71256: LD_VAR 0 5
71260: ST_TO_ADDR
// end ;
71261: LD_VAR 0 4
71265: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71266: LD_INT 0
71268: PPUSH
71269: PPUSH
71270: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71271: LD_VAR 0 1
71275: NOT
71276: PUSH
71277: LD_VAR 0 2
71281: PUSH
71282: LD_INT 1
71284: PUSH
71285: LD_INT 2
71287: PUSH
71288: LD_INT 3
71290: PUSH
71291: LD_INT 4
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: IN
71300: NOT
71301: OR
71302: IFFALSE 71306
// exit ;
71304: GO 71398
// tmp := [ ] ;
71306: LD_ADDR_VAR 0 5
71310: PUSH
71311: EMPTY
71312: ST_TO_ADDR
// for i in units do
71313: LD_ADDR_VAR 0 4
71317: PUSH
71318: LD_VAR 0 1
71322: PUSH
71323: FOR_IN
71324: IFFALSE 71367
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71326: LD_ADDR_VAR 0 5
71330: PUSH
71331: LD_VAR 0 5
71335: PPUSH
71336: LD_VAR 0 5
71340: PUSH
71341: LD_INT 1
71343: PLUS
71344: PPUSH
71345: LD_VAR 0 4
71349: PPUSH
71350: LD_VAR 0 2
71354: PPUSH
71355: CALL_OW 259
71359: PPUSH
71360: CALL_OW 2
71364: ST_TO_ADDR
71365: GO 71323
71367: POP
71368: POP
// if not tmp then
71369: LD_VAR 0 5
71373: NOT
71374: IFFALSE 71378
// exit ;
71376: GO 71398
// result := SortListByListDesc ( units , tmp ) ;
71378: LD_ADDR_VAR 0 3
71382: PUSH
71383: LD_VAR 0 1
71387: PPUSH
71388: LD_VAR 0 5
71392: PPUSH
71393: CALL_OW 77
71397: ST_TO_ADDR
// end ;
71398: LD_VAR 0 3
71402: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71403: LD_INT 0
71405: PPUSH
71406: PPUSH
71407: PPUSH
// result := false ;
71408: LD_ADDR_VAR 0 3
71412: PUSH
71413: LD_INT 0
71415: ST_TO_ADDR
// x := GetX ( building ) ;
71416: LD_ADDR_VAR 0 4
71420: PUSH
71421: LD_VAR 0 2
71425: PPUSH
71426: CALL_OW 250
71430: ST_TO_ADDR
// y := GetY ( building ) ;
71431: LD_ADDR_VAR 0 5
71435: PUSH
71436: LD_VAR 0 2
71440: PPUSH
71441: CALL_OW 251
71445: ST_TO_ADDR
// if not building or not x or not y then
71446: LD_VAR 0 2
71450: NOT
71451: PUSH
71452: LD_VAR 0 4
71456: NOT
71457: OR
71458: PUSH
71459: LD_VAR 0 5
71463: NOT
71464: OR
71465: IFFALSE 71469
// exit ;
71467: GO 71561
// if GetTaskList ( unit ) then
71469: LD_VAR 0 1
71473: PPUSH
71474: CALL_OW 437
71478: IFFALSE 71561
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71480: LD_STRING e
71482: PUSH
71483: LD_VAR 0 1
71487: PPUSH
71488: CALL_OW 437
71492: PUSH
71493: LD_INT 1
71495: ARRAY
71496: PUSH
71497: LD_INT 1
71499: ARRAY
71500: EQUAL
71501: PUSH
71502: LD_VAR 0 4
71506: PUSH
71507: LD_VAR 0 1
71511: PPUSH
71512: CALL_OW 437
71516: PUSH
71517: LD_INT 1
71519: ARRAY
71520: PUSH
71521: LD_INT 2
71523: ARRAY
71524: EQUAL
71525: AND
71526: PUSH
71527: LD_VAR 0 5
71531: PUSH
71532: LD_VAR 0 1
71536: PPUSH
71537: CALL_OW 437
71541: PUSH
71542: LD_INT 1
71544: ARRAY
71545: PUSH
71546: LD_INT 3
71548: ARRAY
71549: EQUAL
71550: AND
71551: IFFALSE 71561
// result := true end ;
71553: LD_ADDR_VAR 0 3
71557: PUSH
71558: LD_INT 1
71560: ST_TO_ADDR
// end ;
71561: LD_VAR 0 3
71565: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71566: LD_INT 0
71568: PPUSH
// result := false ;
71569: LD_ADDR_VAR 0 4
71573: PUSH
71574: LD_INT 0
71576: ST_TO_ADDR
// if GetTaskList ( unit ) then
71577: LD_VAR 0 1
71581: PPUSH
71582: CALL_OW 437
71586: IFFALSE 71669
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71588: LD_STRING M
71590: PUSH
71591: LD_VAR 0 1
71595: PPUSH
71596: CALL_OW 437
71600: PUSH
71601: LD_INT 1
71603: ARRAY
71604: PUSH
71605: LD_INT 1
71607: ARRAY
71608: EQUAL
71609: PUSH
71610: LD_VAR 0 2
71614: PUSH
71615: LD_VAR 0 1
71619: PPUSH
71620: CALL_OW 437
71624: PUSH
71625: LD_INT 1
71627: ARRAY
71628: PUSH
71629: LD_INT 2
71631: ARRAY
71632: EQUAL
71633: AND
71634: PUSH
71635: LD_VAR 0 3
71639: PUSH
71640: LD_VAR 0 1
71644: PPUSH
71645: CALL_OW 437
71649: PUSH
71650: LD_INT 1
71652: ARRAY
71653: PUSH
71654: LD_INT 3
71656: ARRAY
71657: EQUAL
71658: AND
71659: IFFALSE 71669
// result := true ;
71661: LD_ADDR_VAR 0 4
71665: PUSH
71666: LD_INT 1
71668: ST_TO_ADDR
// end ; end ;
71669: LD_VAR 0 4
71673: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71674: LD_INT 0
71676: PPUSH
71677: PPUSH
71678: PPUSH
71679: PPUSH
// if not unit or not area then
71680: LD_VAR 0 1
71684: NOT
71685: PUSH
71686: LD_VAR 0 2
71690: NOT
71691: OR
71692: IFFALSE 71696
// exit ;
71694: GO 71860
// tmp := AreaToList ( area , i ) ;
71696: LD_ADDR_VAR 0 6
71700: PUSH
71701: LD_VAR 0 2
71705: PPUSH
71706: LD_VAR 0 5
71710: PPUSH
71711: CALL_OW 517
71715: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71716: LD_ADDR_VAR 0 5
71720: PUSH
71721: DOUBLE
71722: LD_INT 1
71724: DEC
71725: ST_TO_ADDR
71726: LD_VAR 0 6
71730: PUSH
71731: LD_INT 1
71733: ARRAY
71734: PUSH
71735: FOR_TO
71736: IFFALSE 71858
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71738: LD_ADDR_VAR 0 7
71742: PUSH
71743: LD_VAR 0 6
71747: PUSH
71748: LD_INT 1
71750: ARRAY
71751: PUSH
71752: LD_VAR 0 5
71756: ARRAY
71757: PUSH
71758: LD_VAR 0 6
71762: PUSH
71763: LD_INT 2
71765: ARRAY
71766: PUSH
71767: LD_VAR 0 5
71771: ARRAY
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71777: LD_VAR 0 7
71781: PUSH
71782: LD_INT 1
71784: ARRAY
71785: PPUSH
71786: LD_VAR 0 7
71790: PUSH
71791: LD_INT 2
71793: ARRAY
71794: PPUSH
71795: CALL_OW 428
71799: PUSH
71800: LD_INT 0
71802: EQUAL
71803: IFFALSE 71856
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71805: LD_VAR 0 1
71809: PPUSH
71810: LD_VAR 0 7
71814: PUSH
71815: LD_INT 1
71817: ARRAY
71818: PPUSH
71819: LD_VAR 0 7
71823: PUSH
71824: LD_INT 2
71826: ARRAY
71827: PPUSH
71828: LD_VAR 0 3
71832: PPUSH
71833: CALL_OW 48
// result := IsPlaced ( unit ) ;
71837: LD_ADDR_VAR 0 4
71841: PUSH
71842: LD_VAR 0 1
71846: PPUSH
71847: CALL_OW 305
71851: ST_TO_ADDR
// exit ;
71852: POP
71853: POP
71854: GO 71860
// end ; end ;
71856: GO 71735
71858: POP
71859: POP
// end ;
71860: LD_VAR 0 4
71864: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71865: LD_INT 0
71867: PPUSH
71868: PPUSH
71869: PPUSH
// if not side or side > 8 then
71870: LD_VAR 0 1
71874: NOT
71875: PUSH
71876: LD_VAR 0 1
71880: PUSH
71881: LD_INT 8
71883: GREATER
71884: OR
71885: IFFALSE 71889
// exit ;
71887: GO 72076
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71889: LD_ADDR_VAR 0 4
71893: PUSH
71894: LD_INT 22
71896: PUSH
71897: LD_VAR 0 1
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 21
71908: PUSH
71909: LD_INT 3
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PPUSH
71920: CALL_OW 69
71924: ST_TO_ADDR
// if not tmp then
71925: LD_VAR 0 4
71929: NOT
71930: IFFALSE 71934
// exit ;
71932: GO 72076
// enable_addtolog := true ;
71934: LD_ADDR_OWVAR 81
71938: PUSH
71939: LD_INT 1
71941: ST_TO_ADDR
// AddToLog ( [ ) ;
71942: LD_STRING [
71944: PPUSH
71945: CALL_OW 561
// for i in tmp do
71949: LD_ADDR_VAR 0 3
71953: PUSH
71954: LD_VAR 0 4
71958: PUSH
71959: FOR_IN
71960: IFFALSE 72067
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71962: LD_STRING [
71964: PUSH
71965: LD_VAR 0 3
71969: PPUSH
71970: CALL_OW 266
71974: STR
71975: PUSH
71976: LD_STRING , 
71978: STR
71979: PUSH
71980: LD_VAR 0 3
71984: PPUSH
71985: CALL_OW 250
71989: STR
71990: PUSH
71991: LD_STRING , 
71993: STR
71994: PUSH
71995: LD_VAR 0 3
71999: PPUSH
72000: CALL_OW 251
72004: STR
72005: PUSH
72006: LD_STRING , 
72008: STR
72009: PUSH
72010: LD_VAR 0 3
72014: PPUSH
72015: CALL_OW 254
72019: STR
72020: PUSH
72021: LD_STRING , 
72023: STR
72024: PUSH
72025: LD_VAR 0 3
72029: PPUSH
72030: LD_INT 1
72032: PPUSH
72033: CALL_OW 268
72037: STR
72038: PUSH
72039: LD_STRING , 
72041: STR
72042: PUSH
72043: LD_VAR 0 3
72047: PPUSH
72048: LD_INT 2
72050: PPUSH
72051: CALL_OW 268
72055: STR
72056: PUSH
72057: LD_STRING ],
72059: STR
72060: PPUSH
72061: CALL_OW 561
// end ;
72065: GO 71959
72067: POP
72068: POP
// AddToLog ( ]; ) ;
72069: LD_STRING ];
72071: PPUSH
72072: CALL_OW 561
// end ;
72076: LD_VAR 0 2
72080: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72081: LD_INT 0
72083: PPUSH
72084: PPUSH
72085: PPUSH
72086: PPUSH
72087: PPUSH
// if not area or not rate or not max then
72088: LD_VAR 0 1
72092: NOT
72093: PUSH
72094: LD_VAR 0 2
72098: NOT
72099: OR
72100: PUSH
72101: LD_VAR 0 4
72105: NOT
72106: OR
72107: IFFALSE 72111
// exit ;
72109: GO 72303
// while 1 do
72111: LD_INT 1
72113: IFFALSE 72303
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72115: LD_ADDR_VAR 0 9
72119: PUSH
72120: LD_VAR 0 1
72124: PPUSH
72125: LD_INT 1
72127: PPUSH
72128: CALL_OW 287
72132: PUSH
72133: LD_INT 10
72135: MUL
72136: ST_TO_ADDR
// r := rate / 10 ;
72137: LD_ADDR_VAR 0 7
72141: PUSH
72142: LD_VAR 0 2
72146: PUSH
72147: LD_INT 10
72149: DIVREAL
72150: ST_TO_ADDR
// time := 1 1$00 ;
72151: LD_ADDR_VAR 0 8
72155: PUSH
72156: LD_INT 2100
72158: ST_TO_ADDR
// if amount < min then
72159: LD_VAR 0 9
72163: PUSH
72164: LD_VAR 0 3
72168: LESS
72169: IFFALSE 72187
// r := r * 2 else
72171: LD_ADDR_VAR 0 7
72175: PUSH
72176: LD_VAR 0 7
72180: PUSH
72181: LD_INT 2
72183: MUL
72184: ST_TO_ADDR
72185: GO 72213
// if amount > max then
72187: LD_VAR 0 9
72191: PUSH
72192: LD_VAR 0 4
72196: GREATER
72197: IFFALSE 72213
// r := r / 2 ;
72199: LD_ADDR_VAR 0 7
72203: PUSH
72204: LD_VAR 0 7
72208: PUSH
72209: LD_INT 2
72211: DIVREAL
72212: ST_TO_ADDR
// time := time / r ;
72213: LD_ADDR_VAR 0 8
72217: PUSH
72218: LD_VAR 0 8
72222: PUSH
72223: LD_VAR 0 7
72227: DIVREAL
72228: ST_TO_ADDR
// if time < 0 then
72229: LD_VAR 0 8
72233: PUSH
72234: LD_INT 0
72236: LESS
72237: IFFALSE 72254
// time := time * - 1 ;
72239: LD_ADDR_VAR 0 8
72243: PUSH
72244: LD_VAR 0 8
72248: PUSH
72249: LD_INT 1
72251: NEG
72252: MUL
72253: ST_TO_ADDR
// wait ( time ) ;
72254: LD_VAR 0 8
72258: PPUSH
72259: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72263: LD_INT 35
72265: PPUSH
72266: LD_INT 875
72268: PPUSH
72269: CALL_OW 12
72273: PPUSH
72274: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72278: LD_INT 1
72280: PPUSH
72281: LD_INT 5
72283: PPUSH
72284: CALL_OW 12
72288: PPUSH
72289: LD_VAR 0 1
72293: PPUSH
72294: LD_INT 1
72296: PPUSH
72297: CALL_OW 55
// end ;
72301: GO 72111
// end ;
72303: LD_VAR 0 5
72307: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72308: LD_INT 0
72310: PPUSH
72311: PPUSH
72312: PPUSH
72313: PPUSH
72314: PPUSH
72315: PPUSH
72316: PPUSH
72317: PPUSH
// if not turrets or not factories then
72318: LD_VAR 0 1
72322: NOT
72323: PUSH
72324: LD_VAR 0 2
72328: NOT
72329: OR
72330: IFFALSE 72334
// exit ;
72332: GO 72641
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72334: LD_ADDR_VAR 0 10
72338: PUSH
72339: LD_INT 5
72341: PUSH
72342: LD_INT 6
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: LD_INT 2
72351: PUSH
72352: LD_INT 4
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: PUSH
72359: LD_INT 3
72361: PUSH
72362: LD_INT 5
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 24
72376: PUSH
72377: LD_INT 25
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 23
72386: PUSH
72387: LD_INT 27
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 42
72400: PUSH
72401: LD_INT 43
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 44
72410: PUSH
72411: LD_INT 46
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 45
72420: PUSH
72421: LD_INT 47
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: LIST
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: LIST
72437: ST_TO_ADDR
// result := [ ] ;
72438: LD_ADDR_VAR 0 3
72442: PUSH
72443: EMPTY
72444: ST_TO_ADDR
// for i in turrets do
72445: LD_ADDR_VAR 0 4
72449: PUSH
72450: LD_VAR 0 1
72454: PUSH
72455: FOR_IN
72456: IFFALSE 72639
// begin nat := GetNation ( i ) ;
72458: LD_ADDR_VAR 0 7
72462: PUSH
72463: LD_VAR 0 4
72467: PPUSH
72468: CALL_OW 248
72472: ST_TO_ADDR
// weapon := 0 ;
72473: LD_ADDR_VAR 0 8
72477: PUSH
72478: LD_INT 0
72480: ST_TO_ADDR
// if not nat then
72481: LD_VAR 0 7
72485: NOT
72486: IFFALSE 72490
// continue ;
72488: GO 72455
// for j in list [ nat ] do
72490: LD_ADDR_VAR 0 5
72494: PUSH
72495: LD_VAR 0 10
72499: PUSH
72500: LD_VAR 0 7
72504: ARRAY
72505: PUSH
72506: FOR_IN
72507: IFFALSE 72548
// if GetBWeapon ( i ) = j [ 1 ] then
72509: LD_VAR 0 4
72513: PPUSH
72514: CALL_OW 269
72518: PUSH
72519: LD_VAR 0 5
72523: PUSH
72524: LD_INT 1
72526: ARRAY
72527: EQUAL
72528: IFFALSE 72546
// begin weapon := j [ 2 ] ;
72530: LD_ADDR_VAR 0 8
72534: PUSH
72535: LD_VAR 0 5
72539: PUSH
72540: LD_INT 2
72542: ARRAY
72543: ST_TO_ADDR
// break ;
72544: GO 72548
// end ;
72546: GO 72506
72548: POP
72549: POP
// if not weapon then
72550: LD_VAR 0 8
72554: NOT
72555: IFFALSE 72559
// continue ;
72557: GO 72455
// for k in factories do
72559: LD_ADDR_VAR 0 6
72563: PUSH
72564: LD_VAR 0 2
72568: PUSH
72569: FOR_IN
72570: IFFALSE 72635
// begin weapons := AvailableWeaponList ( k ) ;
72572: LD_ADDR_VAR 0 9
72576: PUSH
72577: LD_VAR 0 6
72581: PPUSH
72582: CALL_OW 478
72586: ST_TO_ADDR
// if not weapons then
72587: LD_VAR 0 9
72591: NOT
72592: IFFALSE 72596
// continue ;
72594: GO 72569
// if weapon in weapons then
72596: LD_VAR 0 8
72600: PUSH
72601: LD_VAR 0 9
72605: IN
72606: IFFALSE 72633
// begin result := [ i , weapon ] ;
72608: LD_ADDR_VAR 0 3
72612: PUSH
72613: LD_VAR 0 4
72617: PUSH
72618: LD_VAR 0 8
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: ST_TO_ADDR
// exit ;
72627: POP
72628: POP
72629: POP
72630: POP
72631: GO 72641
// end ; end ;
72633: GO 72569
72635: POP
72636: POP
// end ;
72637: GO 72455
72639: POP
72640: POP
// end ;
72641: LD_VAR 0 3
72645: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72646: LD_INT 0
72648: PPUSH
// if not side or side > 8 then
72649: LD_VAR 0 3
72653: NOT
72654: PUSH
72655: LD_VAR 0 3
72659: PUSH
72660: LD_INT 8
72662: GREATER
72663: OR
72664: IFFALSE 72668
// exit ;
72666: GO 72727
// if not range then
72668: LD_VAR 0 4
72672: NOT
72673: IFFALSE 72684
// range := - 12 ;
72675: LD_ADDR_VAR 0 4
72679: PUSH
72680: LD_INT 12
72682: NEG
72683: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72684: LD_VAR 0 1
72688: PPUSH
72689: LD_VAR 0 2
72693: PPUSH
72694: LD_VAR 0 3
72698: PPUSH
72699: LD_VAR 0 4
72703: PPUSH
72704: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72708: LD_VAR 0 1
72712: PPUSH
72713: LD_VAR 0 2
72717: PPUSH
72718: LD_VAR 0 3
72722: PPUSH
72723: CALL_OW 331
// end ;
72727: LD_VAR 0 5
72731: RET
// export function Video ( mode ) ; begin
72732: LD_INT 0
72734: PPUSH
// ingame_video = mode ;
72735: LD_ADDR_OWVAR 52
72739: PUSH
72740: LD_VAR 0 1
72744: ST_TO_ADDR
// interface_hidden = mode ;
72745: LD_ADDR_OWVAR 54
72749: PUSH
72750: LD_VAR 0 1
72754: ST_TO_ADDR
// end ;
72755: LD_VAR 0 2
72759: RET
// export function Join ( array , element ) ; begin
72760: LD_INT 0
72762: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72763: LD_ADDR_VAR 0 3
72767: PUSH
72768: LD_VAR 0 1
72772: PPUSH
72773: LD_VAR 0 1
72777: PUSH
72778: LD_INT 1
72780: PLUS
72781: PPUSH
72782: LD_VAR 0 2
72786: PPUSH
72787: CALL_OW 1
72791: ST_TO_ADDR
// end ;
72792: LD_VAR 0 3
72796: RET
// export function JoinUnion ( array , element ) ; begin
72797: LD_INT 0
72799: PPUSH
// result := array union element ;
72800: LD_ADDR_VAR 0 3
72804: PUSH
72805: LD_VAR 0 1
72809: PUSH
72810: LD_VAR 0 2
72814: UNION
72815: ST_TO_ADDR
// end ;
72816: LD_VAR 0 3
72820: RET
// export function GetBehemoths ( side ) ; begin
72821: LD_INT 0
72823: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72824: LD_ADDR_VAR 0 2
72828: PUSH
72829: LD_INT 22
72831: PUSH
72832: LD_VAR 0 1
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 31
72843: PUSH
72844: LD_INT 25
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PPUSH
72855: CALL_OW 69
72859: ST_TO_ADDR
// end ;
72860: LD_VAR 0 2
72864: RET
// export function Shuffle ( array ) ; var i , index ; begin
72865: LD_INT 0
72867: PPUSH
72868: PPUSH
72869: PPUSH
// result := [ ] ;
72870: LD_ADDR_VAR 0 2
72874: PUSH
72875: EMPTY
72876: ST_TO_ADDR
// if not array then
72877: LD_VAR 0 1
72881: NOT
72882: IFFALSE 72886
// exit ;
72884: GO 72985
// Randomize ;
72886: CALL_OW 10
// for i = array downto 1 do
72890: LD_ADDR_VAR 0 3
72894: PUSH
72895: DOUBLE
72896: LD_VAR 0 1
72900: INC
72901: ST_TO_ADDR
72902: LD_INT 1
72904: PUSH
72905: FOR_DOWNTO
72906: IFFALSE 72983
// begin index := rand ( 1 , array ) ;
72908: LD_ADDR_VAR 0 4
72912: PUSH
72913: LD_INT 1
72915: PPUSH
72916: LD_VAR 0 1
72920: PPUSH
72921: CALL_OW 12
72925: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72926: LD_ADDR_VAR 0 2
72930: PUSH
72931: LD_VAR 0 2
72935: PPUSH
72936: LD_VAR 0 2
72940: PUSH
72941: LD_INT 1
72943: PLUS
72944: PPUSH
72945: LD_VAR 0 1
72949: PUSH
72950: LD_VAR 0 4
72954: ARRAY
72955: PPUSH
72956: CALL_OW 2
72960: ST_TO_ADDR
// array := Delete ( array , index ) ;
72961: LD_ADDR_VAR 0 1
72965: PUSH
72966: LD_VAR 0 1
72970: PPUSH
72971: LD_VAR 0 4
72975: PPUSH
72976: CALL_OW 3
72980: ST_TO_ADDR
// end ;
72981: GO 72905
72983: POP
72984: POP
// end ;
72985: LD_VAR 0 2
72989: RET
// export function GetBaseMaterials ( base ) ; begin
72990: LD_INT 0
72992: PPUSH
// result := [ 0 , 0 , 0 ] ;
72993: LD_ADDR_VAR 0 2
72997: PUSH
72998: LD_INT 0
73000: PUSH
73001: LD_INT 0
73003: PUSH
73004: LD_INT 0
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: LIST
73011: ST_TO_ADDR
// if not base then
73012: LD_VAR 0 1
73016: NOT
73017: IFFALSE 73021
// exit ;
73019: GO 73070
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73021: LD_ADDR_VAR 0 2
73025: PUSH
73026: LD_VAR 0 1
73030: PPUSH
73031: LD_INT 1
73033: PPUSH
73034: CALL_OW 275
73038: PUSH
73039: LD_VAR 0 1
73043: PPUSH
73044: LD_INT 2
73046: PPUSH
73047: CALL_OW 275
73051: PUSH
73052: LD_VAR 0 1
73056: PPUSH
73057: LD_INT 3
73059: PPUSH
73060: CALL_OW 275
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: LIST
73069: ST_TO_ADDR
// end ;
73070: LD_VAR 0 2
73074: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73075: LD_INT 0
73077: PPUSH
73078: PPUSH
// result := array ;
73079: LD_ADDR_VAR 0 3
73083: PUSH
73084: LD_VAR 0 1
73088: ST_TO_ADDR
// if size > 0 then
73089: LD_VAR 0 2
73093: PUSH
73094: LD_INT 0
73096: GREATER
73097: IFFALSE 73143
// for i := array downto size do
73099: LD_ADDR_VAR 0 4
73103: PUSH
73104: DOUBLE
73105: LD_VAR 0 1
73109: INC
73110: ST_TO_ADDR
73111: LD_VAR 0 2
73115: PUSH
73116: FOR_DOWNTO
73117: IFFALSE 73141
// result := Delete ( result , result ) ;
73119: LD_ADDR_VAR 0 3
73123: PUSH
73124: LD_VAR 0 3
73128: PPUSH
73129: LD_VAR 0 3
73133: PPUSH
73134: CALL_OW 3
73138: ST_TO_ADDR
73139: GO 73116
73141: POP
73142: POP
// end ;
73143: LD_VAR 0 3
73147: RET
// export function ComExit ( unit ) ; var tmp ; begin
73148: LD_INT 0
73150: PPUSH
73151: PPUSH
// if not IsInUnit ( unit ) then
73152: LD_VAR 0 1
73156: PPUSH
73157: CALL_OW 310
73161: NOT
73162: IFFALSE 73166
// exit ;
73164: GO 73226
// tmp := IsInUnit ( unit ) ;
73166: LD_ADDR_VAR 0 3
73170: PUSH
73171: LD_VAR 0 1
73175: PPUSH
73176: CALL_OW 310
73180: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73181: LD_VAR 0 3
73185: PPUSH
73186: CALL_OW 247
73190: PUSH
73191: LD_INT 2
73193: EQUAL
73194: IFFALSE 73207
// ComExitVehicle ( unit ) else
73196: LD_VAR 0 1
73200: PPUSH
73201: CALL_OW 121
73205: GO 73216
// ComExitBuilding ( unit ) ;
73207: LD_VAR 0 1
73211: PPUSH
73212: CALL_OW 122
// result := tmp ;
73216: LD_ADDR_VAR 0 2
73220: PUSH
73221: LD_VAR 0 3
73225: ST_TO_ADDR
// end ;
73226: LD_VAR 0 2
73230: RET
// export function ComExitAll ( units ) ; var i ; begin
73231: LD_INT 0
73233: PPUSH
73234: PPUSH
// if not units then
73235: LD_VAR 0 1
73239: NOT
73240: IFFALSE 73244
// exit ;
73242: GO 73270
// for i in units do
73244: LD_ADDR_VAR 0 3
73248: PUSH
73249: LD_VAR 0 1
73253: PUSH
73254: FOR_IN
73255: IFFALSE 73268
// ComExit ( i ) ;
73257: LD_VAR 0 3
73261: PPUSH
73262: CALL 73148 0 1
73266: GO 73254
73268: POP
73269: POP
// end ;
73270: LD_VAR 0 2
73274: RET
// export function ResetHc ; begin
73275: LD_INT 0
73277: PPUSH
// InitHc ;
73278: CALL_OW 19
// hc_importance := 0 ;
73282: LD_ADDR_OWVAR 32
73286: PUSH
73287: LD_INT 0
73289: ST_TO_ADDR
// end ;
73290: LD_VAR 0 1
73294: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73295: LD_INT 0
73297: PPUSH
73298: PPUSH
73299: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73300: LD_ADDR_VAR 0 6
73304: PUSH
73305: LD_VAR 0 1
73309: PUSH
73310: LD_VAR 0 3
73314: PLUS
73315: PUSH
73316: LD_INT 2
73318: DIV
73319: ST_TO_ADDR
// if _x < 0 then
73320: LD_VAR 0 6
73324: PUSH
73325: LD_INT 0
73327: LESS
73328: IFFALSE 73345
// _x := _x * - 1 ;
73330: LD_ADDR_VAR 0 6
73334: PUSH
73335: LD_VAR 0 6
73339: PUSH
73340: LD_INT 1
73342: NEG
73343: MUL
73344: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73345: LD_ADDR_VAR 0 7
73349: PUSH
73350: LD_VAR 0 2
73354: PUSH
73355: LD_VAR 0 4
73359: PLUS
73360: PUSH
73361: LD_INT 2
73363: DIV
73364: ST_TO_ADDR
// if _y < 0 then
73365: LD_VAR 0 7
73369: PUSH
73370: LD_INT 0
73372: LESS
73373: IFFALSE 73390
// _y := _y * - 1 ;
73375: LD_ADDR_VAR 0 7
73379: PUSH
73380: LD_VAR 0 7
73384: PUSH
73385: LD_INT 1
73387: NEG
73388: MUL
73389: ST_TO_ADDR
// result := [ _x , _y ] ;
73390: LD_ADDR_VAR 0 5
73394: PUSH
73395: LD_VAR 0 6
73399: PUSH
73400: LD_VAR 0 7
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: ST_TO_ADDR
// end ;
73409: LD_VAR 0 5
73413: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73414: LD_INT 0
73416: PPUSH
73417: PPUSH
73418: PPUSH
73419: PPUSH
// task := GetTaskList ( unit ) ;
73420: LD_ADDR_VAR 0 7
73424: PUSH
73425: LD_VAR 0 1
73429: PPUSH
73430: CALL_OW 437
73434: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73435: LD_VAR 0 7
73439: NOT
73440: PUSH
73441: LD_VAR 0 1
73445: PPUSH
73446: LD_VAR 0 2
73450: PPUSH
73451: CALL_OW 308
73455: NOT
73456: AND
73457: IFFALSE 73461
// exit ;
73459: GO 73579
// if IsInArea ( unit , area ) then
73461: LD_VAR 0 1
73465: PPUSH
73466: LD_VAR 0 2
73470: PPUSH
73471: CALL_OW 308
73475: IFFALSE 73493
// begin ComMoveToArea ( unit , goAway ) ;
73477: LD_VAR 0 1
73481: PPUSH
73482: LD_VAR 0 3
73486: PPUSH
73487: CALL_OW 113
// exit ;
73491: GO 73579
// end ; if task [ 1 ] [ 1 ] <> M then
73493: LD_VAR 0 7
73497: PUSH
73498: LD_INT 1
73500: ARRAY
73501: PUSH
73502: LD_INT 1
73504: ARRAY
73505: PUSH
73506: LD_STRING M
73508: NONEQUAL
73509: IFFALSE 73513
// exit ;
73511: GO 73579
// x := task [ 1 ] [ 2 ] ;
73513: LD_ADDR_VAR 0 5
73517: PUSH
73518: LD_VAR 0 7
73522: PUSH
73523: LD_INT 1
73525: ARRAY
73526: PUSH
73527: LD_INT 2
73529: ARRAY
73530: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73531: LD_ADDR_VAR 0 6
73535: PUSH
73536: LD_VAR 0 7
73540: PUSH
73541: LD_INT 1
73543: ARRAY
73544: PUSH
73545: LD_INT 3
73547: ARRAY
73548: ST_TO_ADDR
// if InArea ( x , y , area ) then
73549: LD_VAR 0 5
73553: PPUSH
73554: LD_VAR 0 6
73558: PPUSH
73559: LD_VAR 0 2
73563: PPUSH
73564: CALL_OW 309
73568: IFFALSE 73579
// ComStop ( unit ) ;
73570: LD_VAR 0 1
73574: PPUSH
73575: CALL_OW 141
// end ;
73579: LD_VAR 0 4
73583: RET
// export function Abs ( value ) ; begin
73584: LD_INT 0
73586: PPUSH
// result := value ;
73587: LD_ADDR_VAR 0 2
73591: PUSH
73592: LD_VAR 0 1
73596: ST_TO_ADDR
// if value < 0 then
73597: LD_VAR 0 1
73601: PUSH
73602: LD_INT 0
73604: LESS
73605: IFFALSE 73622
// result := value * - 1 ;
73607: LD_ADDR_VAR 0 2
73611: PUSH
73612: LD_VAR 0 1
73616: PUSH
73617: LD_INT 1
73619: NEG
73620: MUL
73621: ST_TO_ADDR
// end ;
73622: LD_VAR 0 2
73626: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73627: LD_INT 0
73629: PPUSH
73630: PPUSH
73631: PPUSH
73632: PPUSH
73633: PPUSH
73634: PPUSH
73635: PPUSH
73636: PPUSH
// if not unit or not building then
73637: LD_VAR 0 1
73641: NOT
73642: PUSH
73643: LD_VAR 0 2
73647: NOT
73648: OR
73649: IFFALSE 73653
// exit ;
73651: GO 73879
// x := GetX ( building ) ;
73653: LD_ADDR_VAR 0 4
73657: PUSH
73658: LD_VAR 0 2
73662: PPUSH
73663: CALL_OW 250
73667: ST_TO_ADDR
// y := GetY ( building ) ;
73668: LD_ADDR_VAR 0 6
73672: PUSH
73673: LD_VAR 0 2
73677: PPUSH
73678: CALL_OW 251
73682: ST_TO_ADDR
// d := GetDir ( building ) ;
73683: LD_ADDR_VAR 0 8
73687: PUSH
73688: LD_VAR 0 2
73692: PPUSH
73693: CALL_OW 254
73697: ST_TO_ADDR
// r := 4 ;
73698: LD_ADDR_VAR 0 9
73702: PUSH
73703: LD_INT 4
73705: ST_TO_ADDR
// for i := 1 to 5 do
73706: LD_ADDR_VAR 0 10
73710: PUSH
73711: DOUBLE
73712: LD_INT 1
73714: DEC
73715: ST_TO_ADDR
73716: LD_INT 5
73718: PUSH
73719: FOR_TO
73720: IFFALSE 73877
// begin _x := ShiftX ( x , d , r + i ) ;
73722: LD_ADDR_VAR 0 5
73726: PUSH
73727: LD_VAR 0 4
73731: PPUSH
73732: LD_VAR 0 8
73736: PPUSH
73737: LD_VAR 0 9
73741: PUSH
73742: LD_VAR 0 10
73746: PLUS
73747: PPUSH
73748: CALL_OW 272
73752: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73753: LD_ADDR_VAR 0 7
73757: PUSH
73758: LD_VAR 0 6
73762: PPUSH
73763: LD_VAR 0 8
73767: PPUSH
73768: LD_VAR 0 9
73772: PUSH
73773: LD_VAR 0 10
73777: PLUS
73778: PPUSH
73779: CALL_OW 273
73783: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73784: LD_VAR 0 5
73788: PPUSH
73789: LD_VAR 0 7
73793: PPUSH
73794: CALL_OW 488
73798: PUSH
73799: LD_VAR 0 5
73803: PPUSH
73804: LD_VAR 0 7
73808: PPUSH
73809: CALL_OW 428
73813: PPUSH
73814: CALL_OW 247
73818: PUSH
73819: LD_INT 3
73821: PUSH
73822: LD_INT 2
73824: PUSH
73825: EMPTY
73826: LIST
73827: LIST
73828: IN
73829: NOT
73830: AND
73831: IFFALSE 73875
// begin ComMoveXY ( unit , _x , _y ) ;
73833: LD_VAR 0 1
73837: PPUSH
73838: LD_VAR 0 5
73842: PPUSH
73843: LD_VAR 0 7
73847: PPUSH
73848: CALL_OW 111
// result := [ _x , _y ] ;
73852: LD_ADDR_VAR 0 3
73856: PUSH
73857: LD_VAR 0 5
73861: PUSH
73862: LD_VAR 0 7
73866: PUSH
73867: EMPTY
73868: LIST
73869: LIST
73870: ST_TO_ADDR
// exit ;
73871: POP
73872: POP
73873: GO 73879
// end ; end ;
73875: GO 73719
73877: POP
73878: POP
// end ;
73879: LD_VAR 0 3
73883: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73884: LD_INT 0
73886: PPUSH
73887: PPUSH
73888: PPUSH
// result := 0 ;
73889: LD_ADDR_VAR 0 3
73893: PUSH
73894: LD_INT 0
73896: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73897: LD_VAR 0 1
73901: PUSH
73902: LD_INT 0
73904: LESS
73905: PUSH
73906: LD_VAR 0 1
73910: PUSH
73911: LD_INT 8
73913: GREATER
73914: OR
73915: PUSH
73916: LD_VAR 0 2
73920: PUSH
73921: LD_INT 0
73923: LESS
73924: OR
73925: PUSH
73926: LD_VAR 0 2
73930: PUSH
73931: LD_INT 8
73933: GREATER
73934: OR
73935: IFFALSE 73939
// exit ;
73937: GO 74014
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73939: LD_ADDR_VAR 0 4
73943: PUSH
73944: LD_INT 22
73946: PUSH
73947: LD_VAR 0 2
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PPUSH
73956: CALL_OW 69
73960: PUSH
73961: FOR_IN
73962: IFFALSE 74012
// begin un := UnitShoot ( i ) ;
73964: LD_ADDR_VAR 0 5
73968: PUSH
73969: LD_VAR 0 4
73973: PPUSH
73974: CALL_OW 504
73978: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73979: LD_VAR 0 5
73983: PPUSH
73984: CALL_OW 255
73988: PUSH
73989: LD_VAR 0 1
73993: EQUAL
73994: IFFALSE 74010
// begin result := un ;
73996: LD_ADDR_VAR 0 3
74000: PUSH
74001: LD_VAR 0 5
74005: ST_TO_ADDR
// exit ;
74006: POP
74007: POP
74008: GO 74014
// end ; end ;
74010: GO 73961
74012: POP
74013: POP
// end ;
74014: LD_VAR 0 3
74018: RET
// export function GetCargoBay ( units ) ; begin
74019: LD_INT 0
74021: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74022: LD_ADDR_VAR 0 2
74026: PUSH
74027: LD_VAR 0 1
74031: PPUSH
74032: LD_INT 2
74034: PUSH
74035: LD_INT 34
74037: PUSH
74038: LD_INT 12
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: PUSH
74045: LD_INT 34
74047: PUSH
74048: LD_INT 51
74050: PUSH
74051: EMPTY
74052: LIST
74053: LIST
74054: PUSH
74055: LD_INT 34
74057: PUSH
74058: LD_INT 32
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 34
74067: PUSH
74068: LD_EXP 49
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: LIST
74081: LIST
74082: LIST
74083: PPUSH
74084: CALL_OW 72
74088: ST_TO_ADDR
// end ; end_of_file
74089: LD_VAR 0 2
74093: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74094: LD_VAR 0 1
74098: PUSH
74099: LD_INT 200
74101: DOUBLE
74102: GREATEREQUAL
74103: IFFALSE 74111
74105: LD_INT 299
74107: DOUBLE
74108: LESSEQUAL
74109: IFTRUE 74113
74111: GO 74145
74113: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74114: LD_VAR 0 1
74118: PPUSH
74119: LD_VAR 0 2
74123: PPUSH
74124: LD_VAR 0 3
74128: PPUSH
74129: LD_VAR 0 4
74133: PPUSH
74134: LD_VAR 0 5
74138: PPUSH
74139: CALL 32555 0 5
74143: GO 74222
74145: LD_INT 300
74147: DOUBLE
74148: GREATEREQUAL
74149: IFFALSE 74157
74151: LD_INT 399
74153: DOUBLE
74154: LESSEQUAL
74155: IFTRUE 74159
74157: GO 74221
74159: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74160: LD_VAR 0 1
74164: PPUSH
74165: LD_VAR 0 2
74169: PPUSH
74170: LD_VAR 0 3
74174: PPUSH
74175: LD_VAR 0 4
74179: PPUSH
74180: LD_VAR 0 5
74184: PPUSH
74185: LD_VAR 0 6
74189: PPUSH
74190: LD_VAR 0 7
74194: PPUSH
74195: LD_VAR 0 8
74199: PPUSH
74200: LD_VAR 0 9
74204: PPUSH
74205: LD_VAR 0 10
74209: PPUSH
74210: LD_VAR 0 11
74214: PPUSH
74215: CALL 30443 0 11
74219: GO 74222
74221: POP
// end ;
74222: PPOPN 11
74224: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74225: LD_VAR 0 1
74229: PPUSH
74230: LD_VAR 0 2
74234: PPUSH
74235: LD_VAR 0 3
74239: PPUSH
74240: LD_VAR 0 4
74244: PPUSH
74245: LD_VAR 0 5
74249: PPUSH
74250: CALL 32537 0 5
// end ; end_of_file
74254: PPOPN 5
74256: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74257: LD_VAR 0 1
74261: PPUSH
74262: LD_VAR 0 2
74266: PPUSH
74267: LD_VAR 0 3
74271: PPUSH
74272: LD_VAR 0 4
74276: PPUSH
74277: LD_VAR 0 5
74281: PPUSH
74282: LD_VAR 0 6
74286: PPUSH
74287: CALL 19251 0 6
// end ;
74291: PPOPN 6
74293: END
