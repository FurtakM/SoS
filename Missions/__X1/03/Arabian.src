Export Heike, Givi, Mike, Kamil, Aviradze, Kaia, Sophia, Markov, Farmer, Omar, Ibrahim;
Export farmerSquad, omarSquad, heikeSquad, heikeSecondSquad;
Export omarCargo;
Export Function PrepareArabian;
var i, un, tmp;
begin
uc_side := 5;
uc_nation := 2;

SetResourceType(GetBase(arDepot), mat_cans, 45);

Farmer := PrepareUnit('Farmer', false, '');
Omar := PrepareUnit('Omar', false, '');

omarSquad := [];
heikeSquad := [];
heikeSecondSquad := [];
omarCargo := [];

for i := 1 to 5 do
    begin
    PrepareHuman(false, [1, 1, 2, 1, 1][i], 3);
    un := CreateHuman;
    omarSquad := omarSquad union un;
    PlaceUnitHex(un, [ [87,30], [91,32], [82,15], [79,14], [82,13] ][i], false);
    ComTurnXY(un, 93, 21);
    end;

uc_side := 2;

Heike := PrepareUnit('Heike', (not debug), prefix);
Aviradze := PrepareUnit('Aviradze', (not debug), prefix);

tmp := [];

Givi := PrepareUnit('Givi', (not debug), prefix);
Mike := PrepareUnit('Mike', (not debug), prefix);
Kamil := PrepareUnit('Kamil', (not debug), prefix);
Kaia := PrepareUnit('Kaia', (not debug), prefix);
Sophia := PrepareUnit('Sophia', (not debug), prefix);
Markov := PrepareUnit('Markov', (not debug), prefix);

heikeSecondSquad := CreateCharacterSet('02_others');

tmp := [Mike, Kamil, Kaia, Sophia, Markov, Givi] ^ heikeSecondSquad diff 0;

heikeSquad := tmp;

if UnitFilter(heikeSquad, [f_class, 1]) < 3 then
   begin
   SetClass(Kaia, 1);
   SetClass(Mike, 1);
   SetClass(Givi, 1);
   SetClass(Heike, 1);
   end;

tmp := tmp union CreateCharacterSet('02_ape');

PlaceUnitXY(Heike, 92, 17, false);
PlaceUnitXY(Farmer, 95, 19, false);

PlaceUnitXY(Omar, 89, 25, false);
PlaceUnitXY(Aviradze, 92, 27, false);

ComTurnUnit(Omar, Aviradze);
ComTurnUnit(Aviradze, Omar);

ComTurnUnit([Heike, Farmer], Omar);

if tmp then
   for i in tmp do
       begin
       PlaceUnitXYR(i, 94, 14, 4, false);
       ComTurnUnit(i, Heike);
       end;

farmerSquad := [];

uc_side := 5;
uc_nation := 2;

for i := 1 to 4 do
    begin
    PrepareHuman(false, 1, 2);
    un := CreateHuman;
    PlaceUnitXYR(un, 102, 27, 4, false);
    farmerSquad := farmerSquad union un;
    ComTurnUnit(un, Omar);
    end;

for i := 1 to 2 do
    begin
    PrepareHuman(false, 2, 2);
    un := CreateHuman;
    PlaceUnitXYR(un, 108, 62, 2, false);
    farmerSquad := farmerSquad union un;
    ComTurnUnit(un, Omar);
    end;

PlaceSeeing(109, 63, 2, -15);
RemoveSeeing(109, 63, 2);
End;

Export Function PrepareIbrahim(x, y);
begin
uc_side := 6;
uc_nation := 3;

Ibrahim := PrepareUnit('IbrahimRu', false, '');
PlaceUnitXYR(Ibrahim, x, y, 8, true);
End;

// delete Omar
Every 0$1 trigger UnitFilter(Omar ^ omarSquad, [f_inarea, northRoad]) do
var i;
begin
enable;

for i in UnitFilter(Omar ^ omarSquad, [f_inarea, northRoad]) do
    RemoveUnit(i);
End;

// Farmer Script
Every 0$3 trigger gameStarted and IsInArea(Farmer, farmerBase) do
var i, tmp, arm, bun;
begin
ComMoveXY(Farmer, 110, 60);
AddComTurnXY(Farmer, 110, 61);

// train 2 engineers
tmp := UnitFilter(farmerSquad, [f_class, 1]);

if tmp then
   begin
   for i := 1 to 2 do
       begin
       ComEnterUnit(tmp[i], arDepot);
       AddComChangeProfession(tmp[i], class_engineer);
       AddComExitBuilding(tmp[i]);
       AddComMoveXY(tmp[i], 107, 66);
       end;
   end;

tmp := UnitFilter(farmerSquad, [f_class, 2]);

repeat
 wait(0$1);
 tmp := UnitFilter(farmerSquad, [f_class, 2]);
until tmp;

ComBuild(tmp, b_breastwork, 102, 69, 2);

repeat
 wait(0$1);
until UnitFilter(farmerSquad, [[f_not, [f_hastask]], [f_class, 2]]);

tmp := UnitFilter(farmerSquad, [f_class, 2]);

AddComBuild(tmp, b_armoury, 116, 70, 5);
AddComBuild(tmp, b_breastwork, 108, 50, 2);

repeat
 wait(0$1);
until FilterAllUnits([[f_side, 5], [f_btype, b_armoury], [f_not, [f_constructed]]]);

arm := FilterAllUnits([[f_side, 5], [f_btype, b_armoury], [f_not, [f_constructed]]])[1];
tmp := UnitFilter(farmerSquad, [f_class, 1]);

ComEnterUnit(tmp, arm);

repeat
 wait(0$1);
until FilterAllUnits([[f_side, 5], [f_btype, b_breastwork], [f_not, [f_constructed]]]) >= 2;

tmp := UnitFilter(farmerSquad, [f_class, 2]);

ComEnterUnit(tmp[1], arDepot);
ComEnterUnit([tmp[2], tmp[3]], arm);
AddComChangeProfession([tmp[2], tmp[3]], class_soldier);
AddComExitBuilding([tmp[2], tmp[3]]);

bun := FilterAllUnits([[f_side, 5], [f_btype, b_breastwork]]);

for i := 1 to 2 do
    AddComEnterUnit(tmp[i + 1], bun[i]);

wait(1$00);

farmerBaseReady := true;
End;

Every 0$1 trigger farmerBaseReady and not retreatAllowed do
var i, eng, sol, arm, damagedBuilding;
begin
enable;

sol := UnitFilter(farmerSquad, [f_class, 1]) ^ Farmer;
eng := UnitFilter(farmerSquad, [f_class, 2]);
damagedBuilding := FilterAllUnits([[f_side, 5], [f_type, unit_building], [f_not, [f_lives, 1000]]]);
arm := FilterAllUnits([[f_side, 5], [f_btype, b_armoury]]);

if IsOk(arm[1]) then
   for i in sol do
       if GetLives(i) < 999 and not IsInUnit(i) then
          ComEnterUnit(i, arm[1]);

if not eng and not FilterAllUnits([[f_side, 1], [f_type, unit_human]]) then
   begin
   uc_side := 5;
   uc_nation := 2;

   PrepareHuman(false, 2, 2);
   eng := CreateHuman;
   PlaceUnitXY(eng, 102, 8, false);

   ComMoveXY(eng, 110, 60);

   farmerSquad := farmerSquad union eng;
   end
else
   begin 
   for i in eng do
       begin
       if GetResourceArea(collectFarmerArea, mat_cans) then
          begin
          if IsInUnit(i) then
             ComExitBuilding(i);
          if not IsInArea(i, collectFarmerArea) then
             AddComMoveToArea(i, collectFarmerArea);
          end
       else
          begin
          if damagedBuilding then
             begin
             if IsInUnit(i) then
                ComExitBuilding(i)
             else
                ComRepairBuilding(i, damagedBuilding[1]);
             end
          else if not IsInUnit(i) and not HasTask(i) then
             ComEnterUnit(i, arDepot);
          end;
       end;
   end;
End;

Export Function CargoEvacuation;
begin
wait(0$20);

omarCargoCounter := omarCargoCounter - 1;

if omarCargoCounter = 0 then
   exit;

if omarCargo then
   RemoveUnit(omarCargo);

omarCargo := PrepareCargo;
SetTag(omarCargo, 0);

ComMoveXY(omarCargo, 107, 59);

repeat
 wait(0$1);
 ComMoveXY(omarCargo, 107, 59);

 if not IsOk(omarCargo) or IsDead(omarCargo) then
    exit;

until IsAt(omarCargo, 107, 59) or GetDistUnits(omarCargo, arDepot) < 6;

SetTag(omarCargo, 1);

wait(0$05);

ComTransport(omarCargo, arDepot, mat_cans);
AddComMoveXY(omarCargo, 103, 9);

wait(0$1);

SetCargo(omarCargo, mat_cans, 100);

repeat
 wait(0$1);
 ComMoveXY(omarCargo, 103, 9);

 if not IsOk(omarCargo) or IsDead(omarCargo) then
    exit;

until (IsAt(omarCargo, 103, 9) or IsInArea(omarCargo, northRoad)) and GetTag(omarCargo) > 0;

RemoveUnit(omarCargo);
End;

Export Function PrepareCargo;
var un, veh;
begin
veh := PrepareTank(5, 2, ar_medium_trike, engine_combustion, control_manual, ar_cargo_bay, 80);
SetDir(veh, 4);
PlaceUnitXY(veh, 101, 8, false);

PrepareHuman(false, 3, 2);
un := CreateHuman;
PlaceHumanInUnit(un, veh);

result := veh;
End;