// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 10239 0 0
// LoadEnv ;
  16: CALL 9837 0 0
// LoadCam ;
  20: CALL 10503 0 0
// LoadTech ;
  24: CALL 10579 0 0
// LoadBase ;
  28: CALL 11065 0 0
// PrepareArabian ;
  32: CALL 186 0 0
// PrepareRussian ;
  36: CALL 3050 0 0
// Action ;
  40: CALL 12369 0 0
// end ;
  44: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; export wave , strength ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 09c_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 09c_
  63: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 09_tick
  71: PPUSH
  72: LD_INT 31500
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 09c_tick
  87: PPUSH
  88: LD_INT 10500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// playerInBase := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// kamikazeTrained := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// apeDriver := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 120
 127: PUSH
 128: LD_INT 150
 130: PUSH
 131: LD_INT 180
 133: PUSH
 134: LD_INT 220
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// missionTime := 0 0$00 ;
 149: LD_ADDR_EXP 9
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// ruDefeated := false ;
 157: LD_ADDR_EXP 10
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// wave := 0 ;
 165: LD_ADDR_EXP 11
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// strength := 0 ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ; end_of_file
 181: LD_VAR 0 1
 185: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 197: LD_STRING 05_DrugsTested
 199: PPUSH
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 30
 209: IFFALSE 224
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 211: LD_INT 5
 213: PPUSH
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 2
 219: PPUSH
 220: CALL_OW 322
// uc_side := 2 ;
 224: LD_ADDR_OWVAR 20
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// uc_nation := nation_nature ;
 232: LD_ADDR_OWVAR 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 240: LD_ADDR_VAR 0 3
 244: PUSH
 245: LD_STRING 09_apes
 247: PPUSH
 248: CALL_OW 31
 252: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 253: LD_ADDR_VAR 0 6
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 30
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: ST_TO_ADDR
// if apes then
 305: LD_VAR 0 3
 309: IFFALSE 388
// for i in apes do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: LD_VAR 0 3
 320: PUSH
 321: FOR_IN
 322: IFFALSE 386
// if UnitsInside ( b [ 1 ] ) < 6 then
 324: LD_VAR 0 6
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: CALL_OW 313
 337: PUSH
 338: LD_INT 6
 340: LESS
 341: IFFALSE 363
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_VAR 0 6
 352: PUSH
 353: LD_INT 1
 355: ARRAY
 356: PPUSH
 357: CALL_OW 52
 361: GO 384
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 363: LD_VAR 0 2
 367: PPUSH
 368: LD_INT 82
 370: PPUSH
 371: LD_INT 27
 373: PPUSH
 374: LD_INT 6
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 50
 384: GO 321
 386: POP
 387: POP
// InitHC_All ( ) ;
 388: CALL_OW 584
// uc_nation := nation_arabian ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 2
 399: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 400: LD_ADDR_VAR 0 6
 404: PUSH
 405: LD_INT 22
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 5
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 474: LD_ADDR_EXP 33
 478: PUSH
 479: LD_STRING Rolf
 481: PPUSH
 482: LD_EXP 1
 486: NOT
 487: PPUSH
 488: LD_STRING 06_
 490: PPUSH
 491: CALL 15324 0 3
 495: ST_TO_ADDR
// if Rolf then
 496: LD_EXP 33
 500: IFFALSE 709
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 502: LD_ADDR_EXP 32
 506: PUSH
 507: LD_STRING 06_RolfSquad
 509: PPUSH
 510: CALL_OW 31
 514: ST_TO_ADDR
// if rolfSquad < 3 then
 515: LD_EXP 32
 519: PUSH
 520: LD_INT 3
 522: LESS
 523: IFFALSE 586
// for i := 1 to 3 - Count ( rolfSquad ) do
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: DOUBLE
 531: LD_INT 1
 533: DEC
 534: ST_TO_ADDR
 535: LD_INT 3
 537: PUSH
 538: LD_EXP 32
 542: PPUSH
 543: CALL 17426 0 1
 547: MINUS
 548: PUSH
 549: FOR_TO
 550: IFFALSE 584
// begin PrepareSoldier ( false , 4 ) ;
 552: LD_INT 0
 554: PPUSH
 555: LD_INT 4
 557: PPUSH
 558: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 562: LD_ADDR_EXP 32
 566: PUSH
 567: LD_EXP 32
 571: PPUSH
 572: CALL_OW 44
 576: PPUSH
 577: CALL 52645 0 2
 581: ST_TO_ADDR
// end ;
 582: GO 549
 584: POP
 585: POP
// if b then
 586: LD_VAR 0 6
 590: IFFALSE 665
// begin for i in rolfSquad union Rolf do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_EXP 32
 601: PUSH
 602: LD_EXP 33
 606: UNION
 607: PUSH
 608: FOR_IN
 609: IFFALSE 661
// begin SetClass ( i , 1 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_VAR 0 6
 632: PPUSH
 633: LD_INT 3
 635: PUSH
 636: LD_INT 62
 638: PUSH
 639: EMPTY
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 52
// end ;
 659: GO 608
 661: POP
 662: POP
// end else
 663: GO 709
// for i in rolfSquad union Rolf do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_EXP 32
 674: PUSH
 675: LD_EXP 33
 679: UNION
 680: PUSH
 681: FOR_IN
 682: IFFALSE 707
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 684: LD_VAR 0 2
 688: PPUSH
 689: LD_INT 82
 691: PPUSH
 692: LD_INT 27
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 50
 705: GO 681
 707: POP
 708: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 13
 713: PUSH
 714: LD_STRING Heike
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 15324 0 3
 732: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 16
 737: PUSH
 738: LD_STRING Ibrahim
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 15324 0 3
 756: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 14
 761: PUSH
 762: LD_STRING Givi
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 15324 0 3
 780: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 17
 785: PUSH
 786: LD_STRING Kamil
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 15324 0 3
 804: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 18
 809: PUSH
 810: LD_STRING Kaia
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 15324 0 3
 828: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 19
 833: PUSH
 834: LD_STRING Sophia
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 15324 0 3
 852: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 20
 857: PUSH
 858: LD_STRING Markov
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 15324 0 3
 876: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 23
 881: PUSH
 882: LD_STRING Aviradze
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 15324 0 3
 900: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 22
 905: PUSH
 906: LD_STRING Kurt
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 15324 0 3
 924: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_STRING Mike
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 15324 0 3
 948: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 21
 953: PUSH
 954: LD_STRING Olaf
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 15324 0 3
 972: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 973: LD_ADDR_EXP 30
 977: PUSH
 978: LD_STRING 09c_heikeSecondSquad
 980: PPUSH
 981: CALL_OW 31
 985: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 986: LD_ADDR_EXP 24
 990: PUSH
 991: LD_STRING Schulz
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_EXP 2
1004: PPUSH
1005: CALL 15324 0 3
1009: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
1010: LD_ADDR_EXP 25
1014: PUSH
1015: LD_STRING Basim
1017: PPUSH
1018: LD_EXP 1
1022: NOT
1023: PPUSH
1024: LD_EXP 2
1028: PPUSH
1029: CALL 15324 0 3
1033: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1034: LD_ADDR_EXP 26
1038: PUSH
1039: LD_STRING Lemmy
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 2
1052: PPUSH
1053: CALL 15324 0 3
1057: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1058: LD_ADDR_EXP 27
1062: PUSH
1063: LD_STRING Mia
1065: PPUSH
1066: LD_EXP 1
1070: NOT
1071: PPUSH
1072: LD_EXP 2
1076: PPUSH
1077: CALL 15324 0 3
1081: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1082: LD_ADDR_EXP 28
1086: PUSH
1087: LD_STRING Nia
1089: PPUSH
1090: LD_EXP 1
1094: NOT
1095: PPUSH
1096: LD_EXP 2
1100: PPUSH
1101: CALL 15324 0 3
1105: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1106: LD_ADDR_EXP 29
1110: PUSH
1111: LD_STRING Jenna
1113: PPUSH
1114: LD_EXP 1
1118: NOT
1119: PPUSH
1120: LD_EXP 2
1124: PPUSH
1125: CALL 15324 0 3
1129: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING 09c_schulzSecondSquad
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// if debug then
1143: LD_EXP 1
1147: IFFALSE 1227
// begin schulzSecondSquad := [ ] ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: EMPTY
1155: ST_TO_ADDR
// for i := 1 to 3 do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_INT 3
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1225
// begin uc_side := 2 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
// uc_nation := nation_arabian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 2
1187: ST_TO_ADDR
// PrepareHuman ( false , i , 0 ) ;
1188: LD_INT 0
1190: PPUSH
1191: LD_VAR 0 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PPUSH
1213: CALL_OW 44
1217: PPUSH
1218: CALL 52645 0 2
1222: ST_TO_ADDR
// end ;
1223: GO 1169
1225: POP
1226: POP
// end ; vehicles := LoadVariable ( 09c_vehicles , [ [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 36 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 41 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 37 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 35 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 34 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 38 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 40 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 39 ] ] ) ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_STRING 09c_vehicles
1234: PPUSH
1235: LD_INT 13
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 28
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 36
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 13
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 28
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 0
1289: PUSH
1290: LD_INT 41
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 13
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: LD_INT 28
1314: PUSH
1315: LD_INT 2
1317: PUSH
1318: LD_INT 0
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 37
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 13
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 28
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 35
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 13
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 28
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: LD_INT 34
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 13
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 28
1416: PUSH
1417: LD_INT 2
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 38
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 13
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 28
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 40
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 13
1475: PUSH
1476: LD_INT 3
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 28
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 39
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 30
1521: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Heike , LoadVariable ( 09c_Heike_ID , - 1 ) , vehicles ) ;
1522: LD_ADDR_VAR 0 9
1526: PUSH
1527: LD_VAR 0 9
1531: PUSH
1532: LD_EXP 13
1536: PPUSH
1537: LD_STRING 09c_Heike_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2764 0 3
1558: DIFF
1559: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Givi , LoadVariable ( 09c_Givi_ID , - 1 ) , vehicles ) ;
1560: LD_ADDR_VAR 0 9
1564: PUSH
1565: LD_VAR 0 9
1569: PUSH
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING 09c_Givi_ID
1577: PPUSH
1578: LD_INT 1
1580: NEG
1581: PPUSH
1582: CALL_OW 30
1586: PPUSH
1587: LD_VAR 0 9
1591: PPUSH
1592: CALL 2764 0 3
1596: DIFF
1597: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mike , LoadVariable ( 09c_Mike_ID , - 1 ) , vehicles ) ;
1598: LD_ADDR_VAR 0 9
1602: PUSH
1603: LD_VAR 0 9
1607: PUSH
1608: LD_EXP 15
1612: PPUSH
1613: LD_STRING 09c_Mike_ID
1615: PPUSH
1616: LD_INT 1
1618: NEG
1619: PPUSH
1620: CALL_OW 30
1624: PPUSH
1625: LD_VAR 0 9
1629: PPUSH
1630: CALL 2764 0 3
1634: DIFF
1635: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Ibrahim , LoadVariable ( 09c_Ibrahim_ID , - 1 ) , vehicles ) ;
1636: LD_ADDR_VAR 0 9
1640: PUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_EXP 16
1650: PPUSH
1651: LD_STRING 09c_Ibrahim_ID
1653: PPUSH
1654: LD_INT 1
1656: NEG
1657: PPUSH
1658: CALL_OW 30
1662: PPUSH
1663: LD_VAR 0 9
1667: PPUSH
1668: CALL 2764 0 3
1672: DIFF
1673: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kamil , LoadVariable ( 09c_Kamil_ID , - 1 ) , vehicles ) ;
1674: LD_ADDR_VAR 0 9
1678: PUSH
1679: LD_VAR 0 9
1683: PUSH
1684: LD_EXP 17
1688: PPUSH
1689: LD_STRING 09c_Kamil_ID
1691: PPUSH
1692: LD_INT 1
1694: NEG
1695: PPUSH
1696: CALL_OW 30
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL 2764 0 3
1710: DIFF
1711: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kaia , LoadVariable ( 09c_Kaia_ID , - 1 ) , vehicles ) ;
1712: LD_ADDR_VAR 0 9
1716: PUSH
1717: LD_VAR 0 9
1721: PUSH
1722: LD_EXP 18
1726: PPUSH
1727: LD_STRING 09c_Kaia_ID
1729: PPUSH
1730: LD_INT 1
1732: NEG
1733: PPUSH
1734: CALL_OW 30
1738: PPUSH
1739: LD_VAR 0 9
1743: PPUSH
1744: CALL 2764 0 3
1748: DIFF
1749: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Sophia , LoadVariable ( 09c_Sophia_ID , - 1 ) , vehicles ) ;
1750: LD_ADDR_VAR 0 9
1754: PUSH
1755: LD_VAR 0 9
1759: PUSH
1760: LD_EXP 19
1764: PPUSH
1765: LD_STRING 09c_Sophia_ID
1767: PPUSH
1768: LD_INT 1
1770: NEG
1771: PPUSH
1772: CALL_OW 30
1776: PPUSH
1777: LD_VAR 0 9
1781: PPUSH
1782: CALL 2764 0 3
1786: DIFF
1787: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Markov , LoadVariable ( 09c_Markov_ID , - 1 ) , vehicles ) ;
1788: LD_ADDR_VAR 0 9
1792: PUSH
1793: LD_VAR 0 9
1797: PUSH
1798: LD_EXP 20
1802: PPUSH
1803: LD_STRING 09c_Markov_ID
1805: PPUSH
1806: LD_INT 1
1808: NEG
1809: PPUSH
1810: CALL_OW 30
1814: PPUSH
1815: LD_VAR 0 9
1819: PPUSH
1820: CALL 2764 0 3
1824: DIFF
1825: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Olaf , LoadVariable ( 09c_Olaf_ID , - 1 ) , vehicles ) ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_VAR 0 9
1835: PUSH
1836: LD_EXP 21
1840: PPUSH
1841: LD_STRING 09c_Olaf_ID
1843: PPUSH
1844: LD_INT 1
1846: NEG
1847: PPUSH
1848: CALL_OW 30
1852: PPUSH
1853: LD_VAR 0 9
1857: PPUSH
1858: CALL 2764 0 3
1862: DIFF
1863: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kurt , LoadVariable ( 09c_Kurt_ID , - 1 ) , vehicles ) ;
1864: LD_ADDR_VAR 0 9
1868: PUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_STRING 09c_Kurt_ID
1881: PPUSH
1882: LD_INT 1
1884: NEG
1885: PPUSH
1886: CALL_OW 30
1890: PPUSH
1891: LD_VAR 0 9
1895: PPUSH
1896: CALL 2764 0 3
1900: DIFF
1901: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Aviradze , LoadVariable ( 09c_Aviradze_ID , - 1 ) , vehicles ) ;
1902: LD_ADDR_VAR 0 9
1906: PUSH
1907: LD_VAR 0 9
1911: PUSH
1912: LD_EXP 23
1916: PPUSH
1917: LD_STRING 09c_Aviradze_ID
1919: PPUSH
1920: LD_INT 1
1922: NEG
1923: PPUSH
1924: CALL_OW 30
1928: PPUSH
1929: LD_VAR 0 9
1933: PPUSH
1934: CALL 2764 0 3
1938: DIFF
1939: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Schulz , LoadVariable ( 09c_Schulz_ID , 34 ) , vehicles ) ;
1940: LD_ADDR_VAR 0 9
1944: PUSH
1945: LD_VAR 0 9
1949: PUSH
1950: LD_EXP 24
1954: PPUSH
1955: LD_STRING 09c_Schulz_ID
1957: PPUSH
1958: LD_INT 34
1960: PPUSH
1961: CALL_OW 30
1965: PPUSH
1966: LD_VAR 0 9
1970: PPUSH
1971: CALL 2764 0 3
1975: DIFF
1976: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Lemmy , LoadVariable ( 09c_Lemmy_ID , 35 ) , vehicles ) ;
1977: LD_ADDR_VAR 0 9
1981: PUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_EXP 26
1991: PPUSH
1992: LD_STRING 09c_Lemmy_ID
1994: PPUSH
1995: LD_INT 35
1997: PPUSH
1998: CALL_OW 30
2002: PPUSH
2003: LD_VAR 0 9
2007: PPUSH
2008: CALL 2764 0 3
2012: DIFF
2013: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mia , LoadVariable ( 09c_Mia_ID , 36 ) , vehicles ) ;
2014: LD_ADDR_VAR 0 9
2018: PUSH
2019: LD_VAR 0 9
2023: PUSH
2024: LD_EXP 27
2028: PPUSH
2029: LD_STRING 09c_Mia_ID
2031: PPUSH
2032: LD_INT 36
2034: PPUSH
2035: CALL_OW 30
2039: PPUSH
2040: LD_VAR 0 9
2044: PPUSH
2045: CALL 2764 0 3
2049: DIFF
2050: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Nia , LoadVariable ( 09c_Nia_ID , 37 ) , vehicles ) ;
2051: LD_ADDR_VAR 0 9
2055: PUSH
2056: LD_VAR 0 9
2060: PUSH
2061: LD_EXP 28
2065: PPUSH
2066: LD_STRING 09c_Nia_ID
2068: PPUSH
2069: LD_INT 37
2071: PPUSH
2072: CALL_OW 30
2076: PPUSH
2077: LD_VAR 0 9
2081: PPUSH
2082: CALL 2764 0 3
2086: DIFF
2087: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Jenna , LoadVariable ( 09c_Jenna_ID , 38 ) , vehicles ) ;
2088: LD_ADDR_VAR 0 9
2092: PUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_EXP 29
2102: PPUSH
2103: LD_STRING 09c_Jenna_ID
2105: PPUSH
2106: LD_INT 38
2108: PPUSH
2109: CALL_OW 30
2113: PPUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: CALL 2764 0 3
2123: DIFF
2124: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Basim , LoadVariable ( 09c_Basim_ID , - 1 ) , vehicles ) ;
2125: LD_ADDR_VAR 0 9
2129: PUSH
2130: LD_VAR 0 9
2134: PUSH
2135: LD_EXP 25
2139: PPUSH
2140: LD_STRING 09c_Basim_ID
2142: PPUSH
2143: LD_INT 1
2145: NEG
2146: PPUSH
2147: CALL_OW 30
2151: PPUSH
2152: LD_VAR 0 9
2156: PPUSH
2157: CALL 2764 0 3
2161: DIFF
2162: ST_TO_ADDR
// for i := 1 to schulzSecondSquad do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_EXP 31
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2238
// vehicles := vehicles diff SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 38 + i ) , vehicles ) ;
2181: LD_ADDR_VAR 0 9
2185: PUSH
2186: LD_VAR 0 9
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_VAR 0 2
2200: ARRAY
2201: PPUSH
2202: LD_STRING 09c_random_ID_
2204: PUSH
2205: LD_VAR 0 2
2209: STR
2210: PPUSH
2211: LD_INT 38
2213: PUSH
2214: LD_VAR 0 2
2218: PLUS
2219: PPUSH
2220: CALL_OW 30
2224: PPUSH
2225: LD_VAR 0 9
2229: PPUSH
2230: CALL 2764 0 3
2234: DIFF
2235: ST_TO_ADDR
2236: GO 2178
2238: POP
2239: POP
// for i := 1 to heikeSecondSquad do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 30
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2310
// vehicles := vehicles diff SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_hrandom_ID_ & i , - 1 ) , vehicles ) ;
2258: LD_ADDR_VAR 0 9
2262: PUSH
2263: LD_VAR 0 9
2267: PUSH
2268: LD_EXP 30
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_STRING 09c_hrandom_ID_
2281: PUSH
2282: LD_VAR 0 2
2286: STR
2287: PPUSH
2288: LD_INT 1
2290: NEG
2291: PPUSH
2292: CALL_OW 30
2296: PPUSH
2297: LD_VAR 0 9
2301: PPUSH
2302: CALL 2764 0 3
2306: DIFF
2307: ST_TO_ADDR
2308: GO 2255
2310: POP
2311: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2312: LD_INT 22
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 34
2324: PUSH
2325: LD_INT 31
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: IFFALSE 2543
// begin for j := Count ( vehicles ) downto 1 do
2342: LD_ADDR_VAR 0 7
2346: PUSH
2347: DOUBLE
2348: LD_VAR 0 9
2352: PPUSH
2353: CALL 17426 0 1
2357: INC
2358: ST_TO_ADDR
2359: LD_INT 1
2361: PUSH
2362: FOR_DOWNTO
2363: IFFALSE 2541
// begin i := vehicles [ j ] ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 9
2374: PUSH
2375: LD_VAR 0 7
2379: ARRAY
2380: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2381: LD_VAR 0 2
2385: PUSH
2386: LD_INT 3
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: IFFALSE 2539
// begin uc_side := 2 ;
2395: LD_ADDR_OWVAR 20
2399: PUSH
2400: LD_INT 2
2402: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2403: LD_ADDR_OWVAR 21
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 5
2415: ARRAY
2416: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 2
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 6
2460: ARRAY
2461: PPUSH
2462: CALL 20164 0 5
// veh := CreateVehicle ;
2466: LD_ADDR_VAR 0 8
2470: PUSH
2471: CALL_OW 45
2475: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2488: LD_VAR 0 8
2492: PPUSH
2493: LD_INT 7
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2503: LD_ADDR_VAR 0 9
2507: PUSH
2508: LD_VAR 0 9
2512: PPUSH
2513: LD_VAR 0 7
2517: PPUSH
2518: CALL_OW 3
2522: ST_TO_ADDR
// Connect ( veh ) ;
2523: LD_VAR 0 8
2527: PPUSH
2528: CALL 23264 0 1
// wait ( 0 0$0.3 ) ;
2532: LD_INT 10
2534: PPUSH
2535: CALL_OW 67
// end ; end ;
2539: GO 2362
2541: POP
2542: POP
// end ; vehicles := LoadVariable ( 09_otherVehicles , [ ] ) ;
2543: LD_ADDR_VAR 0 9
2547: PUSH
2548: LD_STRING 09_otherVehicles
2550: PPUSH
2551: EMPTY
2552: PPUSH
2553: CALL_OW 30
2557: ST_TO_ADDR
// if vehicles then
2558: LD_VAR 0 9
2562: IFFALSE 2759
// begin for i in vehicles do
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_VAR 0 9
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2757
// begin uc_side := 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 5
2597: ARRAY
2598: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 2
2612: PUSH
2613: LD_INT 2
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 2
2621: PUSH
2622: LD_INT 3
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 4
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 6
2642: ARRAY
2643: PPUSH
2644: CALL 20164 0 5
// veh := CreateVehicle ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2658: LD_VAR 0 8
2662: PPUSH
2663: LD_INT 5
2665: PPUSH
2666: CALL_OW 233
// if i [ 7 ] then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 7
2677: ARRAY
2678: IFFALSE 2698
// SetMark ( veh , i [ 7 ] ) ;
2680: LD_VAR 0 8
2684: PPUSH
2685: LD_VAR 0 2
2689: PUSH
2690: LD_INT 7
2692: ARRAY
2693: PPUSH
2694: CALL_OW 242
// PlaceUnitXYD ( veh , i [ 8 ] , i [ 9 ] , i [ 10 ] , false ) ;
2698: LD_VAR 0 8
2702: PPUSH
2703: LD_VAR 0 2
2707: PUSH
2708: LD_INT 8
2710: ARRAY
2711: PPUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 9
2719: ARRAY
2720: PPUSH
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 10
2728: ARRAY
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: CALL 54785 0 5
// SetFuel ( veh , i [ 6 ] ) ;
2737: LD_VAR 0 8
2741: PPUSH
2742: LD_VAR 0 2
2746: PUSH
2747: LD_INT 6
2749: ARRAY
2750: PPUSH
2751: CALL_OW 240
// end ;
2755: GO 2574
2757: POP
2758: POP
// end ; end ;
2759: LD_VAR 0 1
2763: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
// for i in vehicles do
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3016
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 8
2789: ARRAY
2790: PUSH
2791: LD_VAR 0 2
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 5
2801: PUSH
2802: LD_INT 3
2804: ARRAY
2805: PUSH
2806: LD_INT 1
2808: EQUAL
2809: AND
2810: IFFALSE 3014
// begin result := i ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_VAR 0 5
2821: ST_TO_ADDR
// uc_side := 2 ;
2822: LD_ADDR_OWVAR 20
2826: PUSH
2827: LD_INT 2
2829: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2830: LD_ADDR_OWVAR 21
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 5
2842: ARRAY
2843: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 1
2851: ARRAY
2852: PPUSH
2853: LD_VAR 0 5
2857: PUSH
2858: LD_INT 2
2860: ARRAY
2861: PPUSH
2862: LD_VAR 0 5
2866: PUSH
2867: LD_INT 3
2869: ARRAY
2870: PPUSH
2871: LD_VAR 0 5
2875: PUSH
2876: LD_INT 4
2878: ARRAY
2879: PPUSH
2880: LD_VAR 0 5
2884: PUSH
2885: LD_INT 6
2887: ARRAY
2888: PPUSH
2889: CALL 20164 0 5
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2903: LD_VAR 0 6
2907: PPUSH
2908: LD_INT 5
2910: PPUSH
2911: CALL_OW 233
// if i [ 7 ] < 0 then
2915: LD_VAR 0 5
2919: PUSH
2920: LD_INT 7
2922: ARRAY
2923: PUSH
2924: LD_INT 0
2926: LESS
2927: IFFALSE 2947
// SetMark ( veh , i [ 7 ] ) ;
2929: LD_VAR 0 6
2933: PPUSH
2934: LD_VAR 0 5
2938: PUSH
2939: LD_INT 7
2941: ARRAY
2942: PPUSH
2943: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2947: LD_VAR 0 6
2951: PPUSH
2952: LD_INT 7
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL 51563 0 3
2962: NOT
2963: IFFALSE 2996
// begin SetDir ( unit , 5 ) ;
2965: LD_VAR 0 1
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2977: LD_VAR 0 1
2981: PPUSH
2982: LD_INT 8
2984: PPUSH
2985: LD_INT 0
2987: PPUSH
2988: CALL_OW 49
// exit ;
2992: POP
2993: POP
2994: GO 3045
// end ; PlaceHumanInUnit ( unit , veh ) ;
2996: LD_VAR 0 1
3000: PPUSH
3001: LD_VAR 0 6
3005: PPUSH
3006: CALL_OW 52
// exit ;
3010: POP
3011: POP
3012: GO 3045
// end ;
3014: GO 2779
3016: POP
3017: POP
// SetDir ( unit , 5 ) ;
3018: LD_VAR 0 1
3022: PPUSH
3023: LD_INT 5
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
3030: LD_VAR 0 1
3034: PPUSH
3035: LD_INT 8
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 49
// end ; end_of_file
3045: LD_VAR 0 4
3049: RET
// export function PrepareRussian ; begin
3050: LD_INT 0
3052: PPUSH
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
3053: LD_INT 48
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: LD_INT 2
3061: PPUSH
3062: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
3066: LD_INT 49
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 2
3074: PPUSH
3075: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
3079: LD_INT 50
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
3092: LD_INT 51
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3105: LD_INT 57
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 2
3113: PPUSH
3114: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
3118: LD_INT 48
3120: PPUSH
3121: LD_INT 6
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
3131: LD_INT 49
3133: PPUSH
3134: LD_INT 6
3136: PPUSH
3137: LD_INT 2
3139: PPUSH
3140: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
3144: LD_INT 50
3146: PPUSH
3147: LD_INT 6
3149: PPUSH
3150: LD_INT 2
3152: PPUSH
3153: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
3157: LD_INT 51
3159: PPUSH
3160: LD_INT 6
3162: PPUSH
3163: LD_INT 2
3165: PPUSH
3166: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3170: LD_INT 57
3172: PPUSH
3173: LD_INT 6
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: CALL_OW 322
// if Difficulty >= 2 then
3183: LD_OWVAR 67
3187: PUSH
3188: LD_INT 2
3190: GREATEREQUAL
3191: IFFALSE 3271
// begin SetTech ( tech_Weap2 , 3 , state_researched ) ;
3193: LD_INT 52
3195: PPUSH
3196: LD_INT 3
3198: PPUSH
3199: LD_INT 2
3201: PPUSH
3202: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3206: LD_INT 58
3208: PPUSH
3209: LD_INT 3
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3219: LD_INT 63
3221: PPUSH
3222: LD_INT 3
3224: PPUSH
3225: LD_INT 2
3227: PPUSH
3228: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3232: LD_INT 52
3234: PPUSH
3235: LD_INT 6
3237: PPUSH
3238: LD_INT 2
3240: PPUSH
3241: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3245: LD_INT 58
3247: PPUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
3258: LD_INT 63
3260: PPUSH
3261: LD_INT 6
3263: PPUSH
3264: LD_INT 2
3266: PPUSH
3267: CALL_OW 322
// end ; if Difficulty > 2 then
3271: LD_OWVAR 67
3275: PUSH
3276: LD_INT 2
3278: GREATER
3279: IFFALSE 3359
// begin SetTech ( tech_Weap3 , 3 , state_researched ) ;
3281: LD_INT 53
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: LD_INT 2
3289: PPUSH
3290: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3294: LD_INT 59
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_INT 2
3302: PPUSH
3303: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3307: LD_INT 64
3309: PPUSH
3310: LD_INT 3
3312: PPUSH
3313: LD_INT 2
3315: PPUSH
3316: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
3320: LD_INT 53
3322: PPUSH
3323: LD_INT 6
3325: PPUSH
3326: LD_INT 2
3328: PPUSH
3329: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
3333: LD_INT 59
3335: PPUSH
3336: LD_INT 6
3338: PPUSH
3339: LD_INT 2
3341: PPUSH
3342: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
3346: LD_INT 64
3348: PPUSH
3349: LD_INT 6
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 322
// end ; end ;
3359: LD_VAR 0 1
3363: RET
// export ruForces , ruConstructList , ruTanks ; export function PrepareExtraRussianBase ; var i , j , tmp , un , side , skill , b ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
3370: PPUSH
3371: PPUSH
3372: PPUSH
3373: PPUSH
// side := 6 ;
3374: LD_ADDR_VAR 0 6
3378: PUSH
3379: LD_INT 6
3381: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
3382: LD_ADDR_VAR 0 7
3386: PUSH
3387: LD_INT 7
3389: PUSH
3390: LD_INT 8
3392: PUSH
3393: LD_INT 9
3395: PUSH
3396: LD_INT 10
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_OWVAR 67
3409: ARRAY
3410: ST_TO_ADDR
// ruForces := [ ] ;
3411: LD_ADDR_EXP 34
3415: PUSH
3416: EMPTY
3417: ST_TO_ADDR
// ruConstructList := [ ] ;
3418: LD_ADDR_EXP 35
3422: PUSH
3423: EMPTY
3424: ST_TO_ADDR
// ruTanks := [ ] ;
3425: LD_ADDR_EXP 36
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// tmp := [ [ b_warehouse , 107 , 149 , 4 ] , [ b_oil_mine , 115 , 150 , 4 ] , [ b_factory , 101 , 160 , 0 ] , [ b_ext_computer , 97 , 156 , 2 ] , [ b_ext_siberium , 98 , 160 , 1 ] , [ b_ext_noncombat , 101 , 164 , 0 ] , [ b_ext_gun , 104 , 163 , 5 ] , [ b_ext_rocket , 105 , 160 , 4 ] , [ b_siberite_mine , 128 , 132 , 0 ] , [ b_lab_full , 94 , 142 , 1 , b_lab_weapon , b_lab_spacetime ] , [ b_oil_power , 93 , 137 , 0 ] , [ b_oil_power , 111 , 157 , 0 ] , [ b_oil_power , 109 , 158 , 0 ] , [ b_oil_power , 121 , 150 , 0 ] , [ b_siberite_power , 118 , 151 , 0 ] , [ b_barracks , 97 , 133 , 2 ] , [ b_barracks , 117 , 143 , 4 ] , [ b_turret , 100 , 132 , 2 ] , [ b_turret , 130 , 159 , 4 ] , [ b_turret , 131 , 155 , 4 ] , [ b_turret , 90 , 133 , 2 ] , [ b_turret , 70 , 135 , 3 ] ] ;
3432: LD_ADDR_VAR 0 4
3436: PUSH
3437: LD_INT 1
3439: PUSH
3440: LD_INT 107
3442: PUSH
3443: LD_INT 149
3445: PUSH
3446: LD_INT 4
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 29
3457: PUSH
3458: LD_INT 115
3460: PUSH
3461: LD_INT 150
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 3
3475: PUSH
3476: LD_INT 101
3478: PUSH
3479: LD_INT 160
3481: PUSH
3482: LD_INT 0
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 24
3493: PUSH
3494: LD_INT 97
3496: PUSH
3497: LD_INT 156
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 21
3511: PUSH
3512: LD_INT 98
3514: PUSH
3515: LD_INT 160
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_INT 19
3529: PUSH
3530: LD_INT 101
3532: PUSH
3533: LD_INT 164
3535: PUSH
3536: LD_INT 0
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: PUSH
3545: LD_INT 17
3547: PUSH
3548: LD_INT 104
3550: PUSH
3551: LD_INT 163
3553: PUSH
3554: LD_INT 5
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 18
3565: PUSH
3566: LD_INT 105
3568: PUSH
3569: LD_INT 160
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 30
3583: PUSH
3584: LD_INT 128
3586: PUSH
3587: LD_INT 132
3589: PUSH
3590: LD_INT 0
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 8
3601: PUSH
3602: LD_INT 94
3604: PUSH
3605: LD_INT 142
3607: PUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 10
3613: PUSH
3614: LD_INT 14
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 26
3627: PUSH
3628: LD_INT 93
3630: PUSH
3631: LD_INT 137
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 26
3645: PUSH
3646: LD_INT 111
3648: PUSH
3649: LD_INT 157
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 26
3663: PUSH
3664: LD_INT 109
3666: PUSH
3667: LD_INT 158
3669: PUSH
3670: LD_INT 0
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PUSH
3679: LD_INT 26
3681: PUSH
3682: LD_INT 121
3684: PUSH
3685: LD_INT 150
3687: PUSH
3688: LD_INT 0
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 28
3699: PUSH
3700: LD_INT 118
3702: PUSH
3703: LD_INT 151
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 5
3717: PUSH
3718: LD_INT 97
3720: PUSH
3721: LD_INT 133
3723: PUSH
3724: LD_INT 2
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 5
3735: PUSH
3736: LD_INT 117
3738: PUSH
3739: LD_INT 143
3741: PUSH
3742: LD_INT 4
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 33
3753: PUSH
3754: LD_INT 100
3756: PUSH
3757: LD_INT 132
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 33
3771: PUSH
3772: LD_INT 130
3774: PUSH
3775: LD_INT 159
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 33
3789: PUSH
3790: LD_INT 131
3792: PUSH
3793: LD_INT 155
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 33
3807: PUSH
3808: LD_INT 90
3810: PUSH
3811: LD_INT 133
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 33
3825: PUSH
3826: LD_INT 70
3828: PUSH
3829: LD_INT 135
3831: PUSH
3832: LD_INT 3
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: ST_TO_ADDR
// uc_side := side ;
3865: LD_ADDR_OWVAR 20
3869: PUSH
3870: LD_VAR 0 6
3874: ST_TO_ADDR
// uc_nation := nation_russian ;
3875: LD_ADDR_OWVAR 21
3879: PUSH
3880: LD_INT 3
3882: ST_TO_ADDR
// for i in tmp do
3883: LD_ADDR_VAR 0 2
3887: PUSH
3888: LD_VAR 0 4
3892: PUSH
3893: FOR_IN
3894: IFFALSE 4032
// begin InitBc ;
3896: CALL_OW 21
// bc_type := i [ 1 ] ;
3900: LD_ADDR_OWVAR 42
3904: PUSH
3905: LD_VAR 0 2
3909: PUSH
3910: LD_INT 1
3912: ARRAY
3913: ST_TO_ADDR
// bc_level := 6 ;
3914: LD_ADDR_OWVAR 43
3918: PUSH
3919: LD_INT 6
3921: ST_TO_ADDR
// if i > 4 then
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 4
3929: GREATER
3930: IFFALSE 3960
// begin bc_kind1 := i [ 5 ] ;
3932: LD_ADDR_OWVAR 44
3936: PUSH
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 5
3944: ARRAY
3945: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
3946: LD_ADDR_OWVAR 45
3950: PUSH
3951: LD_VAR 0 2
3955: PUSH
3956: LD_INT 6
3958: ARRAY
3959: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3960: LD_ADDR_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 2
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 3
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 4
3990: ARRAY
3991: PPUSH
3992: CALL_OW 47
3996: ST_TO_ADDR
// if i [ 1 ] in [ b_bunker , b_turret ] then
3997: LD_VAR 0 2
4001: PUSH
4002: LD_INT 1
4004: ARRAY
4005: PUSH
4006: LD_INT 32
4008: PUSH
4009: LD_INT 33
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: IN
4016: IFFALSE 4030
// PlaceWeaponTurret ( b , ru_rocket_launcher ) ;
4018: LD_VAR 0 8
4022: PPUSH
4023: LD_INT 45
4025: PPUSH
4026: CALL_OW 431
// end ;
4030: GO 3893
4032: POP
4033: POP
// InitHC_All ( ) ;
4034: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_VAR 0 6
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 30
4057: PUSH
4058: LD_INT 5
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PPUSH
4069: CALL_OW 69
4073: ST_TO_ADDR
// for i in tmp do
4074: LD_ADDR_VAR 0 2
4078: PUSH
4079: LD_VAR 0 4
4083: PUSH
4084: FOR_IN
4085: IFFALSE 4212
// begin for j := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: DOUBLE
4093: LD_INT 1
4095: DEC
4096: ST_TO_ADDR
4097: LD_INT 2
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: LD_INT 4
4105: PUSH
4106: LD_INT 4
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: PUSH
4115: LD_OWVAR 67
4119: ARRAY
4120: PUSH
4121: FOR_TO
4122: IFFALSE 4208
// begin PrepareSoldier ( false , skill ) ;
4124: LD_INT 0
4126: PPUSH
4127: LD_VAR 0 7
4131: PPUSH
4132: CALL_OW 381
// un := CreateHuman ;
4136: LD_ADDR_VAR 0 5
4140: PUSH
4141: CALL_OW 44
4145: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4146: LD_ADDR_EXP 34
4150: PUSH
4151: LD_EXP 34
4155: PPUSH
4156: LD_VAR 0 5
4160: PPUSH
4161: CALL 52645 0 2
4165: ST_TO_ADDR
// if j mod 2 = 0 then
4166: LD_VAR 0 3
4170: PUSH
4171: LD_INT 2
4173: MOD
4174: PUSH
4175: LD_INT 0
4177: EQUAL
4178: IFFALSE 4192
// SetClass ( un , class_bazooker ) ;
4180: LD_VAR 0 5
4184: PPUSH
4185: LD_INT 9
4187: PPUSH
4188: CALL_OW 336
// PlaceHumanInUnit ( un , i ) ;
4192: LD_VAR 0 5
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: CALL_OW 52
// end ;
4206: GO 4121
4208: POP
4209: POP
// end ;
4210: GO 4084
4212: POP
4213: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
4214: LD_ADDR_VAR 0 4
4218: PUSH
4219: LD_INT 22
4221: PUSH
4222: LD_VAR 0 6
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 30
4233: PUSH
4234: LD_INT 1
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: ST_TO_ADDR
// for i in tmp do
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_VAR 0 4
4259: PUSH
4260: FOR_IN
4261: IFFALSE 4485
// begin for j := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
4263: LD_ADDR_VAR 0 3
4267: PUSH
4268: DOUBLE
4269: LD_INT 1
4271: DEC
4272: ST_TO_ADDR
4273: LD_INT 3
4275: PUSH
4276: LD_INT 3
4278: PUSH
4279: LD_INT 4
4281: PUSH
4282: LD_INT 4
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: PUSH
4297: FOR_TO
4298: IFFALSE 4358
// begin PrepareEngineer ( false , skill ) ;
4300: LD_INT 0
4302: PPUSH
4303: LD_VAR 0 7
4307: PPUSH
4308: CALL_OW 382
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 5
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4322: LD_ADDR_EXP 34
4326: PUSH
4327: LD_EXP 34
4331: PPUSH
4332: LD_VAR 0 5
4336: PPUSH
4337: CALL 52645 0 2
4341: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4342: LD_VAR 0 5
4346: PPUSH
4347: LD_VAR 0 2
4351: PPUSH
4352: CALL_OW 52
// end ;
4356: GO 4297
4358: POP
4359: POP
// SetResourceType ( GetBase ( i ) , mat_cans , [ 550 , 600 , 780 , 820 ] [ Difficulty ] ) ;
4360: LD_VAR 0 2
4364: PPUSH
4365: CALL_OW 274
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_INT 550
4375: PUSH
4376: LD_INT 600
4378: PUSH
4379: LD_INT 780
4381: PUSH
4382: LD_INT 820
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_OWVAR 67
4395: ARRAY
4396: PPUSH
4397: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , [ 160 , 160 , 210 , 240 ] [ Difficulty ] ) ;
4401: LD_VAR 0 2
4405: PPUSH
4406: CALL_OW 274
4410: PPUSH
4411: LD_INT 2
4413: PPUSH
4414: LD_INT 160
4416: PUSH
4417: LD_INT 160
4419: PUSH
4420: LD_INT 210
4422: PUSH
4423: LD_INT 240
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_OWVAR 67
4436: ARRAY
4437: PPUSH
4438: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , [ 60 , 60 , 70 , 80 ] [ Difficulty ] ) ;
4442: LD_VAR 0 2
4446: PPUSH
4447: CALL_OW 274
4451: PPUSH
4452: LD_INT 3
4454: PPUSH
4455: LD_INT 60
4457: PUSH
4458: LD_INT 60
4460: PUSH
4461: LD_INT 70
4463: PUSH
4464: LD_INT 80
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: PPUSH
4479: CALL_OW 277
// end ;
4483: GO 4260
4485: POP
4486: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
4487: LD_ADDR_VAR 0 4
4491: PUSH
4492: LD_INT 22
4494: PUSH
4495: LD_VAR 0 6
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 30
4506: PUSH
4507: LD_INT 3
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: ST_TO_ADDR
// for i in tmp do
4523: LD_ADDR_VAR 0 2
4527: PUSH
4528: LD_VAR 0 4
4532: PUSH
4533: FOR_IN
4534: IFFALSE 4629
// begin for j := 1 to 6 do
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: DOUBLE
4542: LD_INT 1
4544: DEC
4545: ST_TO_ADDR
4546: LD_INT 6
4548: PUSH
4549: FOR_TO
4550: IFFALSE 4625
// begin PrepareMechanic ( false , skill ) ;
4552: LD_INT 0
4554: PPUSH
4555: LD_VAR 0 7
4559: PPUSH
4560: CALL_OW 383
// hc_attr := [ 12 , 12 ] ;
4564: LD_ADDR_OWVAR 29
4568: PUSH
4569: LD_INT 12
4571: PUSH
4572: LD_INT 12
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: ST_TO_ADDR
// un := CreateHuman ;
4579: LD_ADDR_VAR 0 5
4583: PUSH
4584: CALL_OW 44
4588: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4589: LD_ADDR_EXP 34
4593: PUSH
4594: LD_EXP 34
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: CALL 52645 0 2
4608: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4609: LD_VAR 0 5
4613: PPUSH
4614: LD_VAR 0 2
4618: PPUSH
4619: CALL_OW 52
// end ;
4623: GO 4549
4625: POP
4626: POP
// end ;
4627: GO 4533
4629: POP
4630: POP
// InitHC_All ( ) ;
4631: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
4635: LD_ADDR_VAR 0 4
4639: PUSH
4640: LD_INT 22
4642: PUSH
4643: LD_VAR 0 6
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 8
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PPUSH
4666: CALL_OW 69
4670: ST_TO_ADDR
// for i in tmp do
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_VAR 0 4
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4762
// begin for j := 1 to 2 do
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: DOUBLE
4690: LD_INT 1
4692: DEC
4693: ST_TO_ADDR
4694: LD_INT 2
4696: PUSH
4697: FOR_TO
4698: IFFALSE 4758
// begin PrepareScientist ( false , skill ) ;
4700: LD_INT 0
4702: PPUSH
4703: LD_VAR 0 7
4707: PPUSH
4708: CALL_OW 384
// un := CreateHuman ;
4712: LD_ADDR_VAR 0 5
4716: PUSH
4717: CALL_OW 44
4721: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4722: LD_ADDR_EXP 34
4726: PUSH
4727: LD_EXP 34
4731: PPUSH
4732: LD_VAR 0 5
4736: PPUSH
4737: CALL 52645 0 2
4741: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4742: LD_VAR 0 5
4746: PPUSH
4747: LD_VAR 0 2
4751: PPUSH
4752: CALL_OW 52
// end ;
4756: GO 4697
4758: POP
4759: POP
// end ;
4760: GO 4681
4762: POP
4763: POP
// end ;
4764: LD_VAR 0 1
4768: RET
// function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
4769: LD_INT 0
4771: PPUSH
4772: PPUSH
4773: PPUSH
4774: PPUSH
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// result := [ ] ;
4781: LD_ADDR_VAR 0 3
4785: PUSH
4786: EMPTY
4787: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
4788: LD_ADDR_VAR 0 8
4792: PUSH
4793: LD_INT 7
4795: PUSH
4796: LD_INT 8
4798: PUSH
4799: LD_INT 9
4801: PUSH
4802: LD_INT 10
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_OWVAR 67
4815: ARRAY
4816: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
4817: LD_ADDR_VAR 0 9
4821: PUSH
4822: LD_INT 15
4824: PUSH
4825: LD_INT 17
4827: PUSH
4828: LD_INT 19
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_VAR 0 1
4840: ARRAY
4841: ST_TO_ADDR
// parking := [ ruGatPoint1Area , ruGatPoint2Area , ruGatPoint3Area ] [ spot ] ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_INT 16
4849: PUSH
4850: LD_INT 18
4852: PUSH
4853: LD_INT 20
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: LD_VAR 0 1
4865: ARRAY
4866: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
4867: LD_ADDR_VAR 0 11
4871: PUSH
4872: LD_INT 5
4874: PUSH
4875: LD_INT 0
4877: PUSH
4878: LD_INT 2
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: ARRAY
4891: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) then
4892: LD_VAR 0 9
4896: PPUSH
4897: LD_INT 2
4899: PUSH
4900: LD_INT 22
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 22
4912: PUSH
4913: LD_INT 3
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: IFFALSE 4990
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) do
4931: LD_ADDR_VAR 0 4
4935: PUSH
4936: LD_VAR 0 9
4940: PPUSH
4941: LD_INT 2
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: PPUSH
4969: CALL_OW 70
4973: PUSH
4974: FOR_IN
4975: IFFALSE 4988
// RemoveUnit ( i ) ;
4977: LD_VAR 0 4
4981: PPUSH
4982: CALL_OW 64
4986: GO 4974
4988: POP
4989: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
4990: LD_VAR 0 9
4994: PPUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 21
5000: PUSH
5001: LD_INT 1
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 70
5030: IFFALSE 5094
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: LD_VAR 0 9
5041: PPUSH
5042: LD_INT 3
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: LD_INT 22
5061: PUSH
5062: LD_INT 2
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: PUSH
5078: FOR_IN
5079: IFFALSE 5092
// KillUnit ( i ) ;
5081: LD_VAR 0 4
5085: PPUSH
5086: CALL_OW 66
5090: GO 5078
5092: POP
5093: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
5094: LD_VAR 0 9
5098: PPUSH
5099: LD_INT 21
5101: PUSH
5102: LD_INT 1
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5190
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
5129: LD_ADDR_VAR 0 4
5133: PUSH
5134: LD_VAR 0 9
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 22
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5188
// ComMoveXY ( i , 91 , 56 ) ;
5171: LD_VAR 0 4
5175: PPUSH
5176: LD_INT 91
5178: PPUSH
5179: LD_INT 56
5181: PPUSH
5182: CALL_OW 111
5186: GO 5168
5188: POP
5189: POP
// repeat wait ( 0 0$1 ) ;
5190: LD_INT 35
5192: PPUSH
5193: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5197: LD_VAR 0 9
5201: PPUSH
5202: LD_INT 50
5204: PUSH
5205: EMPTY
5206: LIST
5207: PPUSH
5208: CALL_OW 70
5212: NOT
5213: IFFALSE 5190
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] + strength do
5215: LD_ADDR_VAR 0 4
5219: PUSH
5220: DOUBLE
5221: LD_INT 1
5223: DEC
5224: ST_TO_ADDR
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 5
5233: PUSH
5234: LD_INT 6
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: PUSH
5243: LD_OWVAR 67
5247: ARRAY
5248: PUSH
5249: LD_VAR 0 2
5253: PLUS
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5577
// begin uc_side := 3 ;
5258: LD_ADDR_OWVAR 20
5262: PUSH
5263: LD_INT 3
5265: ST_TO_ADDR
// uc_nation := nation_russian ;
5266: LD_ADDR_OWVAR 21
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
5274: LD_ADDR_VAR 0 12
5278: PUSH
5279: LD_INT 1
5281: PUSH
5282: LD_INT 3
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 12
5307: ARRAY
5308: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
5309: LD_INT 22
5311: PUSH
5312: LD_INT 24
5314: PUSH
5315: LD_INT 23
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_VAR 0 4
5327: PUSH
5328: LD_INT 3
5330: MOD
5331: PUSH
5332: LD_INT 1
5334: PLUS
5335: ARRAY
5336: PPUSH
5337: LD_INT 3
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: LD_INT 1
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: CALL_OW 12
5357: ARRAY
5358: PPUSH
5359: LD_VAR 0 12
5363: PPUSH
5364: LD_INT 45
5366: PUSH
5367: LD_INT 46
5369: PUSH
5370: LD_INT 43
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: LD_VAR 0 4
5382: PUSH
5383: LD_INT 3
5385: MOD
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: ARRAY
5391: PPUSH
5392: LD_INT 100
5394: PPUSH
5395: CALL 20164 0 5
// veh := CreateVehicle ;
5399: LD_ADDR_VAR 0 7
5403: PUSH
5404: CALL_OW 45
5408: ST_TO_ADDR
// SetDir ( veh , dir ) ;
5409: LD_VAR 0 7
5413: PPUSH
5414: LD_VAR 0 11
5418: PPUSH
5419: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
5423: LD_VAR 0 7
5427: PPUSH
5428: LD_VAR 0 9
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: CALL_OW 49
// if control = control_manual then
5440: LD_VAR 0 12
5444: PUSH
5445: LD_INT 1
5447: EQUAL
5448: IFFALSE 5516
// begin uc_side := 3 ;
5450: LD_ADDR_OWVAR 20
5454: PUSH
5455: LD_INT 3
5457: ST_TO_ADDR
// uc_nation := nation_russian ;
5458: LD_ADDR_OWVAR 21
5462: PUSH
5463: LD_INT 3
5465: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5466: LD_INT 0
5468: PPUSH
5469: LD_VAR 0 8
5473: PPUSH
5474: CALL_OW 383
// un := CreateHuman ;
5478: LD_ADDR_VAR 0 6
5482: PUSH
5483: CALL_OW 44
5487: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5488: LD_VAR 0 6
5492: PPUSH
5493: LD_VAR 0 7
5497: PPUSH
5498: CALL_OW 52
// SetTag ( un , spot ) ;
5502: LD_VAR 0 6
5506: PPUSH
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 109
// end ; repeat ComMoveToArea ( veh , parking ) ;
5516: LD_VAR 0 7
5520: PPUSH
5521: LD_VAR 0 10
5525: PPUSH
5526: CALL_OW 113
// wait ( 0 0$3 ) ;
5530: LD_INT 105
5532: PPUSH
5533: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5537: LD_VAR 0 9
5541: PPUSH
5542: LD_INT 50
5544: PUSH
5545: EMPTY
5546: LIST
5547: PPUSH
5548: CALL_OW 70
5552: NOT
5553: IFFALSE 5516
// result := Join ( result , veh ) ;
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_VAR 0 3
5564: PPUSH
5565: LD_VAR 0 7
5569: PPUSH
5570: CALL 52645 0 2
5574: ST_TO_ADDR
// end ;
5575: GO 5255
5577: POP
5578: POP
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
5579: LD_ADDR_VAR 0 4
5583: PUSH
5584: DOUBLE
5585: LD_INT 1
5587: DEC
5588: ST_TO_ADDR
5589: LD_INT 2
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: LD_INT 3
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: PUSH
5607: LD_OWVAR 67
5611: ARRAY
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5784
// begin uc_side := 3 ;
5616: LD_ADDR_OWVAR 20
5620: PUSH
5621: LD_INT 3
5623: ST_TO_ADDR
// uc_nation := nation_russian ;
5624: LD_ADDR_OWVAR 21
5628: PUSH
5629: LD_INT 3
5631: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5632: LD_INT 0
5634: PPUSH
5635: LD_VAR 0 8
5639: PPUSH
5640: CALL_OW 381
// un := CreateHuman ;
5644: LD_ADDR_VAR 0 6
5648: PUSH
5649: CALL_OW 44
5653: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5654: LD_INT 30
5656: PUSH
5657: LD_INT 40
5659: PUSH
5660: LD_INT 50
5662: PUSH
5663: LD_INT 50
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_OWVAR 67
5676: ARRAY
5677: PPUSH
5678: CALL_OW 13
5682: IFFALSE 5696
// SetClass ( un , class_bazooker ) ;
5684: LD_VAR 0 6
5688: PPUSH
5689: LD_INT 9
5691: PPUSH
5692: CALL_OW 336
// SetDir ( un , dir ) ;
5696: LD_VAR 0 6
5700: PPUSH
5701: LD_VAR 0 11
5705: PPUSH
5706: CALL_OW 233
// SetTag ( un , spot ) ;
5710: LD_VAR 0 6
5714: PPUSH
5715: LD_VAR 0 1
5719: PPUSH
5720: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
5724: LD_VAR 0 6
5728: PPUSH
5729: LD_VAR 0 9
5733: PPUSH
5734: LD_INT 0
5736: PPUSH
5737: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
5741: LD_VAR 0 6
5745: PPUSH
5746: LD_VAR 0 10
5750: PPUSH
5751: CALL_OW 113
// wait ( 0 0$1 ) ;
5755: LD_INT 35
5757: PPUSH
5758: CALL_OW 67
// result := Join ( result , un ) ;
5762: LD_ADDR_VAR 0 3
5766: PUSH
5767: LD_VAR 0 3
5771: PPUSH
5772: LD_VAR 0 6
5776: PPUSH
5777: CALL 52645 0 2
5781: ST_TO_ADDR
// end ;
5782: GO 5613
5784: POP
5785: POP
// end ;
5786: LD_VAR 0 3
5790: RET
// function PrepareRussianExtraInfantry ; var i , un ; begin
5791: LD_INT 0
5793: PPUSH
5794: PPUSH
5795: PPUSH
// result := [ ] ;
5796: LD_ADDR_VAR 0 1
5800: PUSH
5801: EMPTY
5802: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty + 1 ] do
5803: LD_ADDR_VAR 0 2
5807: PUSH
5808: DOUBLE
5809: LD_INT 1
5811: DEC
5812: ST_TO_ADDR
5813: LD_INT 3
5815: PUSH
5816: LD_INT 3
5818: PUSH
5819: LD_INT 4
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: PUSH
5827: LD_OWVAR 67
5831: PUSH
5832: LD_INT 1
5834: PLUS
5835: ARRAY
5836: PUSH
5837: FOR_TO
5838: IFFALSE 5976
// begin uc_side := 3 ;
5840: LD_ADDR_OWVAR 20
5844: PUSH
5845: LD_INT 3
5847: ST_TO_ADDR
// uc_nation := nation_russian ;
5848: LD_ADDR_OWVAR 21
5852: PUSH
5853: LD_INT 3
5855: ST_TO_ADDR
// PrepareSoldier ( false , [ 7 , 8 , 9 ] [ Difficulty + 1 ] ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_INT 7
5861: PUSH
5862: LD_INT 8
5864: PUSH
5865: LD_INT 9
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: PUSH
5873: LD_OWVAR 67
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ARRAY
5882: PPUSH
5883: CALL_OW 381
// un := CreateHuman ;
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: CALL_OW 44
5896: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5897: LD_INT 30
5899: PUSH
5900: LD_INT 40
5902: PUSH
5903: LD_INT 50
5905: PUSH
5906: LD_INT 50
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: PUSH
5915: LD_OWVAR 67
5919: ARRAY
5920: PPUSH
5921: CALL_OW 13
5925: IFFALSE 5939
// SetClass ( un , class_bazooker ) ;
5927: LD_VAR 0 3
5931: PPUSH
5932: LD_INT 9
5934: PPUSH
5935: CALL_OW 336
// PlaceUnitArea ( un , extraSpawnAttackArea , false ) ;
5939: LD_VAR 0 3
5943: PPUSH
5944: LD_INT 25
5946: PPUSH
5947: LD_INT 0
5949: PPUSH
5950: CALL_OW 49
// result := Join ( result , un ) ;
5954: LD_ADDR_VAR 0 1
5958: PUSH
5959: LD_VAR 0 1
5963: PPUSH
5964: LD_VAR 0 3
5968: PPUSH
5969: CALL 52645 0 2
5973: ST_TO_ADDR
// end ;
5974: GO 5837
5976: POP
5977: POP
// end ;
5978: LD_VAR 0 1
5982: RET
// function SendBulldozer ; var un ; begin
5983: LD_INT 0
5985: PPUSH
5986: PPUSH
// uc_side := 3 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 3
5994: ST_TO_ADDR
// uc_nation := nation_russian ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 3
6002: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
6003: LD_INT 23
6005: PPUSH
6006: LD_INT 3
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: LD_INT 53
6014: PPUSH
6015: LD_INT 100
6017: PPUSH
6018: CALL 20164 0 5
// un := CreateVehicle ;
6022: LD_ADDR_VAR 0 2
6026: PUSH
6027: CALL_OW 45
6031: ST_TO_ADDR
// PlaceUnitXYD ( un , 7 , 8 , 1 , false ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_INT 7
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_INT 1
6045: PPUSH
6046: LD_INT 0
6048: PPUSH
6049: CALL 54785 0 5
// wait ( 0 0$1 ) ;
6053: LD_INT 35
6055: PPUSH
6056: CALL_OW 67
// CutTreeInArea ( un , cutTreeWArea ) ;
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_INT 24
6067: PPUSH
6068: CALL 11500 0 2
// end ;
6072: LD_VAR 0 1
6076: RET
// every 0 0$3 trigger wave >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
6077: LD_EXP 11
6081: PUSH
6082: LD_INT 4
6084: PUSH
6085: LD_INT 5
6087: PUSH
6088: LD_INT 6
6090: PUSH
6091: LD_INT 7
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: LD_OWVAR 67
6104: ARRAY
6105: GREATEREQUAL
6106: IFFALSE 6170
6108: GO 6110
6110: DISABLE
// begin ChangeSideFog ( 3 , 2 ) ;
6111: LD_INT 3
6113: PPUSH
6114: LD_INT 2
6116: PPUSH
6117: CALL_OW 343
// repeat wait ( 0 0$1 ) ;
6121: LD_INT 35
6123: PPUSH
6124: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 ;
6128: LD_INT 22
6130: PUSH
6131: LD_INT 6
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 21
6140: PUSH
6141: LD_INT 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PPUSH
6152: CALL_OW 69
6156: PUSH
6157: LD_INT 0
6159: EQUAL
6160: IFFALSE 6121
// ruDefeated := true ;
6162: LD_ADDR_EXP 10
6166: PUSH
6167: LD_INT 1
6169: ST_TO_ADDR
// end ;
6170: END
// every 6 6$20 + 4 4$00 trigger wave < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do var i , e , attackers , extraAttackers , spot , extraSpot , paths , enemy ;
6171: LD_EXP 11
6175: PUSH
6176: LD_INT 4
6178: PUSH
6179: LD_INT 5
6181: PUSH
6182: LD_INT 6
6184: PUSH
6185: LD_INT 7
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: LD_OWVAR 67
6198: ARRAY
6199: LESS
6200: IFFALSE 7303
6202: GO 6204
6204: DISABLE
6205: LD_INT 0
6207: PPUSH
6208: PPUSH
6209: PPUSH
6210: PPUSH
6211: PPUSH
6212: PPUSH
6213: PPUSH
6214: PPUSH
// begin enable ;
6215: ENABLE
// attackers := [ ] ;
6216: LD_ADDR_VAR 0 3
6220: PUSH
6221: EMPTY
6222: ST_TO_ADDR
// extraAttackers := [ ] ;
6223: LD_ADDR_VAR 0 4
6227: PUSH
6228: EMPTY
6229: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 87 , 141 ] , [ 80 , 120 ] , [ 66 , 95 ] , [ 51 , 69 ] , [ 36 , 40 ] , [ 47 , 31 ] , [ 60 , 28 ] ] , [ [ 21 , 17 ] , [ 35 , 30 ] , [ 49 , 31 ] ] ] ;
6230: LD_ADDR_VAR 0 7
6234: PUSH
6235: LD_INT 176
6237: PUSH
6238: LD_INT 152
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 157
6247: PUSH
6248: LD_INT 122
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 146
6257: PUSH
6258: LD_INT 89
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 125
6267: PUSH
6268: LD_INT 46
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 87
6283: PUSH
6284: LD_INT 141
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 80
6293: PUSH
6294: LD_INT 120
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 66
6303: PUSH
6304: LD_INT 95
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 51
6313: PUSH
6314: LD_INT 69
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 36
6323: PUSH
6324: LD_INT 40
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 47
6333: PUSH
6334: LD_INT 31
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 60
6343: PUSH
6344: LD_INT 28
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 21
6362: PUSH
6363: LD_INT 17
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 35
6372: PUSH
6373: LD_INT 30
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 49
6382: PUSH
6383: LD_INT 31
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: ST_TO_ADDR
// wave := Inc ( wave ) ;
6400: LD_ADDR_EXP 11
6404: PUSH
6405: LD_EXP 11
6409: PPUSH
6410: CALL 54006 0 1
6414: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
6415: LD_ADDR_VAR 0 5
6419: PUSH
6420: LD_INT 1
6422: PPUSH
6423: LD_INT 3
6425: PPUSH
6426: CALL_OW 12
6430: ST_TO_ADDR
// if wave mod 2 = 0 then
6431: LD_EXP 11
6435: PUSH
6436: LD_INT 2
6438: MOD
6439: PUSH
6440: LD_INT 0
6442: EQUAL
6443: IFFALSE 6460
// strength := Inc ( strength ) ;
6445: LD_ADDR_EXP 12
6449: PUSH
6450: LD_EXP 12
6454: PPUSH
6455: CALL 54006 0 1
6459: ST_TO_ADDR
// if Count ( ListEnvironmentArea ( cutTreeWArea ) ) then
6460: LD_INT 24
6462: PPUSH
6463: CALL_OW 353
6467: PPUSH
6468: CALL 17426 0 1
6472: IFFALSE 6478
// SendBulldozer ;
6474: CALL 5983 0 0
// attackers := PrepareRussianAttack ( spot , strength ) ;
6478: LD_ADDR_VAR 0 3
6482: PUSH
6483: LD_VAR 0 5
6487: PPUSH
6488: LD_EXP 12
6492: PPUSH
6493: CALL 4769 0 2
6497: ST_TO_ADDR
// if wave + [ 2 , 2 , 3 , 3 ] [ Difficulty ] >= [ 6 , 7 , 8 , 9 ] [ Difficulty ] then
6498: LD_EXP 11
6502: PUSH
6503: LD_INT 2
6505: PUSH
6506: LD_INT 2
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 3
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_OWVAR 67
6525: ARRAY
6526: PLUS
6527: PUSH
6528: LD_INT 6
6530: PUSH
6531: LD_INT 7
6533: PUSH
6534: LD_INT 8
6536: PUSH
6537: LD_INT 9
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_OWVAR 67
6550: ARRAY
6551: GREATEREQUAL
6552: IFFALSE 6620
// begin extraSpot := spot - 1 ;
6554: LD_ADDR_VAR 0 6
6558: PUSH
6559: LD_VAR 0 5
6563: PUSH
6564: LD_INT 1
6566: MINUS
6567: ST_TO_ADDR
// if extraSpot < 1 then
6568: LD_VAR 0 6
6572: PUSH
6573: LD_INT 1
6575: LESS
6576: IFFALSE 6586
// extraSpot := 3 ;
6578: LD_ADDR_VAR 0 6
6582: PUSH
6583: LD_INT 3
6585: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , strength ) ;
6586: LD_ADDR_VAR 0 4
6590: PUSH
6591: LD_VAR 0 6
6595: PPUSH
6596: LD_EXP 12
6600: PPUSH
6601: CALL 4769 0 2
6605: ST_TO_ADDR
// if Difficulty > 1 then
6606: LD_OWVAR 67
6610: PUSH
6611: LD_INT 1
6613: GREATER
6614: IFFALSE 6620
// PrepareRussianExtraInfantry ;
6616: CALL 5791 0 0
// end ; repeat wait ( 0 0$2 ) ;
6620: LD_INT 70
6622: PPUSH
6623: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
6627: LD_ADDR_VAR 0 8
6631: PUSH
6632: LD_INT 22
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: ST_TO_ADDR
// for i in attackers do
6647: LD_ADDR_VAR 0 1
6651: PUSH
6652: LD_VAR 0 3
6656: PUSH
6657: FOR_IN
6658: IFFALSE 6963
// begin if not IsOk ( i ) then
6660: LD_VAR 0 1
6664: PPUSH
6665: CALL_OW 302
6669: NOT
6670: IFFALSE 6690
// begin attackers := attackers diff i ;
6672: LD_ADDR_VAR 0 3
6676: PUSH
6677: LD_VAR 0 3
6681: PUSH
6682: LD_VAR 0 1
6686: DIFF
6687: ST_TO_ADDR
// continue ;
6688: GO 6657
// end ; if GetType ( i ) = unit_vehicle then
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 247
6699: PUSH
6700: LD_INT 2
6702: EQUAL
6703: IFFALSE 6727
// AgressiveMove ( i , paths [ spot ] ) else
6705: LD_VAR 0 1
6709: PPUSH
6710: LD_VAR 0 7
6714: PUSH
6715: LD_VAR 0 5
6719: ARRAY
6720: PPUSH
6721: CALL 55249 0 2
6725: GO 6961
// begin if GetClass ( i ) = class_bazooker then
6727: LD_VAR 0 1
6731: PPUSH
6732: CALL_OW 257
6736: PUSH
6737: LD_INT 9
6739: EQUAL
6740: IFFALSE 6937
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
6742: LD_VAR 0 1
6746: PPUSH
6747: LD_VAR 0 8
6751: PPUSH
6752: LD_VAR 0 1
6756: PPUSH
6757: CALL_OW 74
6761: PPUSH
6762: CALL_OW 296
6766: PUSH
6767: LD_INT 12
6769: GREATER
6770: IFFALSE 6798
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
6772: LD_VAR 0 1
6776: PPUSH
6777: LD_VAR 0 8
6781: PPUSH
6782: LD_VAR 0 1
6786: PPUSH
6787: CALL_OW 74
6791: PPUSH
6792: CALL 56717 0 2
6796: GO 6935
// begin e := NearestUnitToUnit ( enemy , i ) ;
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: LD_VAR 0 8
6807: PPUSH
6808: LD_VAR 0 1
6812: PPUSH
6813: CALL_OW 74
6817: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
6818: LD_INT 1
6820: PPUSH
6821: LD_INT 3
6823: PPUSH
6824: CALL_OW 12
6828: PUSH
6829: LD_INT 1
6831: DOUBLE
6832: EQUAL
6833: IFTRUE 6837
6835: GO 6854
6837: POP
// ComAttackUnit ( i , e ) ; 2 :
6838: LD_VAR 0 1
6842: PPUSH
6843: LD_VAR 0 2
6847: PPUSH
6848: CALL_OW 115
6852: GO 6935
6854: LD_INT 2
6856: DOUBLE
6857: EQUAL
6858: IFTRUE 6862
6860: GO 6894
6862: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
6863: LD_VAR 0 1
6867: PPUSH
6868: LD_VAR 0 2
6872: PPUSH
6873: CALL_OW 250
6877: PPUSH
6878: LD_VAR 0 2
6882: PPUSH
6883: CALL_OW 251
6887: PPUSH
6888: CALL_OW 153
6892: GO 6935
6894: LD_INT 3
6896: DOUBLE
6897: EQUAL
6898: IFTRUE 6902
6900: GO 6934
6902: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
6903: LD_VAR 0 1
6907: PPUSH
6908: LD_VAR 0 2
6912: PPUSH
6913: CALL_OW 250
6917: PPUSH
6918: LD_VAR 0 2
6922: PPUSH
6923: CALL_OW 251
6927: PPUSH
6928: CALL_OW 154
6932: GO 6935
6934: POP
// end ; end else
6935: GO 6961
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6937: LD_VAR 0 1
6941: PPUSH
6942: LD_VAR 0 8
6946: PPUSH
6947: LD_VAR 0 1
6951: PPUSH
6952: CALL_OW 74
6956: PPUSH
6957: CALL 56717 0 2
// end ; end ;
6961: GO 6657
6963: POP
6964: POP
// if extraAttackers then
6965: LD_VAR 0 4
6969: IFFALSE 7289
// begin for i in extraAttackers do
6971: LD_ADDR_VAR 0 1
6975: PUSH
6976: LD_VAR 0 4
6980: PUSH
6981: FOR_IN
6982: IFFALSE 7287
// begin if not IsOk ( i ) then
6984: LD_VAR 0 1
6988: PPUSH
6989: CALL_OW 302
6993: NOT
6994: IFFALSE 7014
// begin extraAttackers := extraAttackers diff i ;
6996: LD_ADDR_VAR 0 4
7000: PUSH
7001: LD_VAR 0 4
7005: PUSH
7006: LD_VAR 0 1
7010: DIFF
7011: ST_TO_ADDR
// continue ;
7012: GO 6981
// end ; if GetType ( i ) = unit_vehicle then
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL_OW 247
7023: PUSH
7024: LD_INT 2
7026: EQUAL
7027: IFFALSE 7051
// AgressiveMove ( i , paths [ extraSpot ] ) else
7029: LD_VAR 0 1
7033: PPUSH
7034: LD_VAR 0 7
7038: PUSH
7039: LD_VAR 0 6
7043: ARRAY
7044: PPUSH
7045: CALL 55249 0 2
7049: GO 7285
// begin if GetClass ( i ) = class_bazooker then
7051: LD_VAR 0 1
7055: PPUSH
7056: CALL_OW 257
7060: PUSH
7061: LD_INT 9
7063: EQUAL
7064: IFFALSE 7261
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
7066: LD_VAR 0 1
7070: PPUSH
7071: LD_VAR 0 8
7075: PPUSH
7076: LD_VAR 0 1
7080: PPUSH
7081: CALL_OW 74
7085: PPUSH
7086: CALL_OW 296
7090: PUSH
7091: LD_INT 12
7093: GREATER
7094: IFFALSE 7122
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
7096: LD_VAR 0 1
7100: PPUSH
7101: LD_VAR 0 8
7105: PPUSH
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 74
7115: PPUSH
7116: CALL 56717 0 2
7120: GO 7259
// begin e := NearestUnitToUnit ( enemy , i ) ;
7122: LD_ADDR_VAR 0 2
7126: PUSH
7127: LD_VAR 0 8
7131: PPUSH
7132: LD_VAR 0 1
7136: PPUSH
7137: CALL_OW 74
7141: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
7142: LD_INT 1
7144: PPUSH
7145: LD_INT 3
7147: PPUSH
7148: CALL_OW 12
7152: PUSH
7153: LD_INT 1
7155: DOUBLE
7156: EQUAL
7157: IFTRUE 7161
7159: GO 7178
7161: POP
// ComAttackUnit ( i , e ) ; 2 :
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_VAR 0 2
7171: PPUSH
7172: CALL_OW 115
7176: GO 7259
7178: LD_INT 2
7180: DOUBLE
7181: EQUAL
7182: IFTRUE 7186
7184: GO 7218
7186: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 250
7201: PPUSH
7202: LD_VAR 0 2
7206: PPUSH
7207: CALL_OW 251
7211: PPUSH
7212: CALL_OW 153
7216: GO 7259
7218: LD_INT 3
7220: DOUBLE
7221: EQUAL
7222: IFTRUE 7226
7224: GO 7258
7226: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
7227: LD_VAR 0 1
7231: PPUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: CALL_OW 250
7241: PPUSH
7242: LD_VAR 0 2
7246: PPUSH
7247: CALL_OW 251
7251: PPUSH
7252: CALL_OW 154
7256: GO 7259
7258: POP
// end ; end else
7259: GO 7285
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7261: LD_VAR 0 1
7265: PPUSH
7266: LD_VAR 0 8
7270: PPUSH
7271: LD_VAR 0 1
7275: PPUSH
7276: CALL_OW 74
7280: PPUSH
7281: CALL 56717 0 2
// end ; end ;
7285: GO 6981
7287: POP
7288: POP
// end ; until not attackers and not extraAttackers ;
7289: LD_VAR 0 3
7293: NOT
7294: PUSH
7295: LD_VAR 0 4
7299: NOT
7300: AND
7301: IFFALSE 6620
// end ;
7303: PPOPN 8
7305: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] ] ) do var i , tmp , lab , eng , tag , un , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , ruBase , fac ;
7306: LD_INT 22
7308: PUSH
7309: LD_INT 6
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 50
7318: PUSH
7319: EMPTY
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 69
7330: IFFALSE 9019
7332: GO 7334
7334: DISABLE
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
7346: PPUSH
7347: PPUSH
7348: PPUSH
7349: PPUSH
7350: PPUSH
7351: PPUSH
// begin enable ;
7352: ENABLE
// ruBase := FilterUnitsInARea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_warehouse ] , [ f_ok ] ] ) ;
7353: LD_ADDR_VAR 0 14
7357: PUSH
7358: LD_INT 26
7360: PPUSH
7361: LD_INT 22
7363: PUSH
7364: LD_INT 6
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 30
7373: PUSH
7374: LD_INT 1
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: LD_INT 50
7383: PUSH
7384: EMPTY
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 70
7396: ST_TO_ADDR
// if ruBase then
7397: LD_VAR 0 14
7401: IFFALSE 7417
// ruBase := ruBase [ 1 ] ;
7403: LD_ADDR_VAR 0 14
7407: PUSH
7408: LD_VAR 0 14
7412: PUSH
7413: LD_INT 1
7415: ARRAY
7416: ST_TO_ADDR
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7417: LD_ADDR_VAR 0 15
7421: PUSH
7422: LD_INT 26
7424: PPUSH
7425: LD_INT 22
7427: PUSH
7428: LD_INT 6
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 30
7437: PUSH
7438: LD_INT 3
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 50
7447: PUSH
7448: EMPTY
7449: LIST
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 70
7460: ST_TO_ADDR
// if ruConstructList and fac then
7461: LD_EXP 35
7465: PUSH
7466: LD_VAR 0 15
7470: AND
7471: IFFALSE 7624
// if BuildingStatus ( fac [ 1 ] ) = bs_idle and CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
7473: LD_VAR 0 15
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: CALL_OW 461
7486: PUSH
7487: LD_INT 2
7489: EQUAL
7490: PUSH
7491: LD_VAR 0 15
7495: PUSH
7496: LD_INT 1
7498: ARRAY
7499: PPUSH
7500: LD_EXP 35
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: ARRAY
7512: PPUSH
7513: LD_EXP 35
7517: PUSH
7518: LD_INT 1
7520: ARRAY
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PPUSH
7526: LD_EXP 35
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: PUSH
7535: LD_INT 3
7537: ARRAY
7538: PPUSH
7539: LD_EXP 35
7543: PUSH
7544: LD_INT 1
7546: ARRAY
7547: PUSH
7548: LD_INT 4
7550: ARRAY
7551: PPUSH
7552: CALL_OW 448
7556: AND
7557: IFFALSE 7624
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
7559: LD_VAR 0 15
7563: PUSH
7564: LD_INT 1
7566: ARRAY
7567: PPUSH
7568: LD_EXP 35
7572: PUSH
7573: LD_INT 1
7575: ARRAY
7576: PUSH
7577: LD_INT 1
7579: ARRAY
7580: PPUSH
7581: LD_EXP 35
7585: PUSH
7586: LD_INT 1
7588: ARRAY
7589: PUSH
7590: LD_INT 2
7592: ARRAY
7593: PPUSH
7594: LD_EXP 35
7598: PUSH
7599: LD_INT 1
7601: ARRAY
7602: PUSH
7603: LD_INT 3
7605: ARRAY
7606: PPUSH
7607: LD_EXP 35
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PUSH
7616: LD_INT 4
7618: ARRAY
7619: PPUSH
7620: CALL_OW 125
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: LD_INT 26
7631: PPUSH
7632: LD_INT 21
7634: PUSH
7635: LD_INT 3
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 3
7644: PUSH
7645: LD_INT 24
7647: PUSH
7648: LD_INT 1000
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PPUSH
7663: CALL_OW 70
7667: ST_TO_ADDR
// cr := GetListOfCratesInArea ( crates6Area ) ;
7668: LD_ADDR_VAR 0 8
7672: PUSH
7673: LD_INT 14
7675: PPUSH
7676: CALL_OW 435
7680: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7681: LD_ADDR_VAR 0 9
7685: PUSH
7686: LD_EXP 34
7690: PPUSH
7691: LD_INT 25
7693: PUSH
7694: LD_INT 4
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 50
7703: PUSH
7704: EMPTY
7705: LIST
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PPUSH
7711: CALL_OW 72
7715: ST_TO_ADDR
// if sci then
7716: LD_VAR 0 9
7720: IFFALSE 7947
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
7722: LD_ADDR_VAR 0 11
7726: PUSH
7727: LD_EXP 34
7731: PPUSH
7732: LD_INT 95
7734: PUSH
7735: LD_INT 26
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 120
7744: PUSH
7745: LD_INT 3
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PPUSH
7756: CALL_OW 72
7760: ST_TO_ADDR
// lab := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7761: LD_ADDR_VAR 0 3
7765: PUSH
7766: LD_EXP 34
7770: PPUSH
7771: LD_INT 95
7773: PUSH
7774: LD_INT 26
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 2
7783: PUSH
7784: LD_INT 30
7786: PUSH
7787: LD_INT 6
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 30
7796: PUSH
7797: LD_INT 7
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 30
7806: PUSH
7807: LD_INT 8
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 72
7828: ST_TO_ADDR
// if hurtUnits then
7829: LD_VAR 0 11
7833: IFFALSE 7894
// begin for i in sci do
7835: LD_ADDR_VAR 0 1
7839: PUSH
7840: LD_VAR 0 9
7844: PUSH
7845: FOR_IN
7846: IFFALSE 7890
// if IsInUnit ( i ) then
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 310
7857: IFFALSE 7870
// ComExitBuilding ( i ) else
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 122
7868: GO 7888
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7870: LD_VAR 0 1
7874: PPUSH
7875: LD_VAR 0 11
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PPUSH
7884: CALL_OW 128
7888: GO 7845
7890: POP
7891: POP
// end else
7892: GO 7947
// if lab then
7894: LD_VAR 0 3
7898: IFFALSE 7947
// begin for i in sci do
7900: LD_ADDR_VAR 0 1
7904: PUSH
7905: LD_VAR 0 9
7909: PUSH
7910: FOR_IN
7911: IFFALSE 7945
// if not IsInUnit ( i ) then
7913: LD_VAR 0 1
7917: PPUSH
7918: CALL_OW 310
7922: NOT
7923: IFFALSE 7943
// ComEnterUnit ( i , lab [ 1 ] ) ;
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_VAR 0 3
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PPUSH
7939: CALL_OW 120
7943: GO 7910
7945: POP
7946: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
7947: LD_ADDR_VAR 0 4
7951: PUSH
7952: LD_EXP 34
7956: PPUSH
7957: LD_INT 25
7959: PUSH
7960: LD_INT 2
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PPUSH
7967: CALL_OW 72
7971: ST_TO_ADDR
// if eng then
7972: LD_VAR 0 4
7976: IFFALSE 8416
// begin for i in eng do
7978: LD_ADDR_VAR 0 1
7982: PUSH
7983: LD_VAR 0 4
7987: PUSH
7988: FOR_IN
7989: IFFALSE 8414
// begin tag := GetTag ( i ) ;
7991: LD_ADDR_VAR 0 5
7995: PUSH
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 110
8005: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 256
8015: PUSH
8016: LD_INT 800
8018: LESS
8019: PUSH
8020: LD_VAR 0 5
8024: PUSH
8025: LD_INT 3
8027: NONEQUAL
8028: AND
8029: IFFALSE 8067
// begin SetTag ( i , tHeal ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 3
8038: PPUSH
8039: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8043: LD_VAR 0 1
8047: PPUSH
8048: LD_INT 97
8050: PPUSH
8051: LD_INT 139
8053: PPUSH
8054: CALL_OW 111
// AddComHold ( i ) ;
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8067: LD_VAR 0 5
8071: PUSH
8072: LD_INT 3
8074: EQUAL
8075: PUSH
8076: LD_VAR 0 1
8080: PPUSH
8081: CALL_OW 256
8085: PUSH
8086: LD_INT 1000
8088: EQUAL
8089: AND
8090: IFFALSE 8104
// SetTag ( i , 0 ) ;
8092: LD_VAR 0 1
8096: PPUSH
8097: LD_INT 0
8099: PPUSH
8100: CALL_OW 109
// if not tag then
8104: LD_VAR 0 5
8108: NOT
8109: IFFALSE 8203
// begin if cr or tmp then
8111: LD_VAR 0 8
8115: PUSH
8116: LD_VAR 0 2
8120: OR
8121: IFFALSE 8177
// begin if IsInUnit ( i ) then
8123: LD_VAR 0 1
8127: PPUSH
8128: CALL_OW 310
8132: IFFALSE 8143
// ComExitBuilding ( i ) ;
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 122
// if tmp then
8143: LD_VAR 0 2
8147: IFFALSE 8163
// SetTag ( i , tRepair ) else
8149: LD_VAR 0 1
8153: PPUSH
8154: LD_INT 1
8156: PPUSH
8157: CALL_OW 109
8161: GO 8175
// SetTag ( i , tCrates ) ;
8163: LD_VAR 0 1
8167: PPUSH
8168: LD_INT 2
8170: PPUSH
8171: CALL_OW 109
// end else
8175: GO 8203
// if not IsInUnit ( i ) then
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 310
8186: NOT
8187: IFFALSE 8203
// ComEnterUnit ( i , ruBase ) ;
8189: LD_VAR 0 1
8193: PPUSH
8194: LD_VAR 0 14
8198: PPUSH
8199: CALL_OW 120
// end ; if tag = tRepair then
8203: LD_VAR 0 5
8207: PUSH
8208: LD_INT 1
8210: EQUAL
8211: IFFALSE 8291
// begin if not tmp then
8213: LD_VAR 0 2
8217: NOT
8218: IFFALSE 8234
// begin SetTag ( i , 0 ) ;
8220: LD_VAR 0 1
8224: PPUSH
8225: LD_INT 0
8227: PPUSH
8228: CALL_OW 109
// continue ;
8232: GO 7988
// end ; if not HasTask ( i ) then
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL_OW 314
8243: NOT
8244: IFFALSE 8264
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8246: LD_VAR 0 1
8250: PPUSH
8251: LD_VAR 0 2
8255: PUSH
8256: LD_INT 1
8258: ARRAY
8259: PPUSH
8260: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
8264: LD_VAR 0 1
8268: PPUSH
8269: LD_INT 26
8271: PPUSH
8272: CALL_OW 308
8276: NOT
8277: IFFALSE 8291
// ComMoveToArea ( i , ruBaseArea ) ;
8279: LD_VAR 0 1
8283: PPUSH
8284: LD_INT 26
8286: PPUSH
8287: CALL_OW 113
// end ; if tag = tCrates then
8291: LD_VAR 0 5
8295: PUSH
8296: LD_INT 2
8298: EQUAL
8299: IFFALSE 8412
// begin if not cr then
8301: LD_VAR 0 8
8305: NOT
8306: IFFALSE 8322
// begin SetTag ( i , 0 ) ;
8308: LD_VAR 0 1
8312: PPUSH
8313: LD_INT 0
8315: PPUSH
8316: CALL_OW 109
// continue ;
8320: GO 7988
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8322: LD_VAR 0 1
8326: PPUSH
8327: CALL_OW 314
8331: NOT
8332: PUSH
8333: LD_INT 81
8335: PUSH
8336: LD_INT 6
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 92
8345: PUSH
8346: LD_VAR 0 8
8350: PUSH
8351: LD_INT 1
8353: ARRAY
8354: PUSH
8355: LD_VAR 0 8
8359: PUSH
8360: LD_INT 2
8362: ARRAY
8363: PUSH
8364: LD_INT 12
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PPUSH
8377: CALL_OW 69
8381: NOT
8382: AND
8383: IFFALSE 8412
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8385: LD_VAR 0 1
8389: PPUSH
8390: LD_VAR 0 8
8394: PUSH
8395: LD_INT 1
8397: ARRAY
8398: PPUSH
8399: LD_VAR 0 8
8403: PUSH
8404: LD_INT 2
8406: ARRAY
8407: PPUSH
8408: CALL_OW 117
// end ; end ;
8412: GO 7988
8414: POP
8415: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8416: LD_ADDR_VAR 0 10
8420: PUSH
8421: LD_EXP 34
8425: PPUSH
8426: LD_INT 2
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 1
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: LD_INT 25
8441: PUSH
8442: LD_INT 9
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 50
8456: PUSH
8457: EMPTY
8458: LIST
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PPUSH
8464: CALL_OW 72
8468: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
8469: LD_ADDR_VAR 0 12
8473: PUSH
8474: LD_INT 26
8476: PPUSH
8477: LD_INT 81
8479: PUSH
8480: LD_INT 6
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 70
8491: ST_TO_ADDR
// if sol then
8492: LD_VAR 0 10
8496: IFFALSE 9019
// begin if enemyInBase then
8498: LD_VAR 0 12
8502: IFFALSE 8721
// begin for i in sol do
8504: LD_ADDR_VAR 0 1
8508: PUSH
8509: LD_VAR 0 10
8513: PUSH
8514: FOR_IN
8515: IFFALSE 8717
// begin tw := IsInUnit ( i ) ;
8517: LD_ADDR_VAR 0 7
8521: PUSH
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 310
8531: ST_TO_ADDR
// if tw then
8532: LD_VAR 0 7
8536: IFFALSE 8626
// begin if not tw in FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8538: LD_VAR 0 7
8542: PUSH
8543: LD_INT 22
8545: PUSH
8546: LD_INT 6
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 101
8555: PUSH
8556: LD_INT 2
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: LD_INT 30
8568: PUSH
8569: LD_INT 5
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 30
8578: PUSH
8579: LD_INT 32
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 30
8588: PUSH
8589: LD_INT 31
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: PPUSH
8607: CALL_OW 69
8611: IN
8612: NOT
8613: IFFALSE 8624
// ComExitBuilding ( i ) ;
8615: LD_VAR 0 1
8619: PPUSH
8620: CALL_OW 122
// end else
8624: GO 8715
// begin un := NearestUnitToUnit ( enemyInBase , i ) ;
8626: LD_ADDR_VAR 0 6
8630: PUSH
8631: LD_VAR 0 12
8635: PPUSH
8636: LD_VAR 0 1
8640: PPUSH
8641: CALL_OW 74
8645: ST_TO_ADDR
// if GetClass ( i ) = class_bazooker and Prob ( 30 ) then
8646: LD_VAR 0 1
8650: PPUSH
8651: CALL_OW 257
8655: PUSH
8656: LD_INT 9
8658: EQUAL
8659: PUSH
8660: LD_INT 30
8662: PPUSH
8663: CALL_OW 13
8667: AND
8668: IFFALSE 8701
// ComTimeShift ( i , GetX ( un ) , GetY ( un ) ) else
8670: LD_VAR 0 1
8674: PPUSH
8675: LD_VAR 0 6
8679: PPUSH
8680: CALL_OW 250
8684: PPUSH
8685: LD_VAR 0 6
8689: PPUSH
8690: CALL_OW 251
8694: PPUSH
8695: CALL_OW 154
8699: GO 8715
// ComAttackUnit ( i , un ) ;
8701: LD_VAR 0 1
8705: PPUSH
8706: LD_VAR 0 6
8710: PPUSH
8711: CALL_OW 115
// end ; end ;
8715: GO 8514
8717: POP
8718: POP
// end else
8719: GO 9019
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8721: LD_ADDR_VAR 0 13
8725: PUSH
8726: LD_INT 26
8728: PPUSH
8729: LD_INT 3
8731: PUSH
8732: LD_INT 62
8734: PUSH
8735: EMPTY
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PUSH
8742: LD_INT 2
8744: PUSH
8745: LD_INT 30
8747: PUSH
8748: LD_INT 32
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 30
8757: PUSH
8758: LD_INT 4
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 30
8767: PUSH
8768: LD_INT 31
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 70
8789: ST_TO_ADDR
// if empty then
8790: LD_VAR 0 13
8794: IFFALSE 8811
// empty := ReverseArray ( empty ) ;
8796: LD_ADDR_VAR 0 13
8800: PUSH
8801: LD_VAR 0 13
8805: PPUSH
8806: CALL 47934 0 1
8810: ST_TO_ADDR
// for i in sol do
8811: LD_ADDR_VAR 0 1
8815: PUSH
8816: LD_VAR 0 10
8820: PUSH
8821: FOR_IN
8822: IFFALSE 9017
// begin tag := GetTag ( i ) ;
8824: LD_ADDR_VAR 0 5
8828: PUSH
8829: LD_VAR 0 1
8833: PPUSH
8834: CALL_OW 110
8838: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8839: LD_VAR 0 1
8843: PPUSH
8844: CALL_OW 256
8848: PUSH
8849: LD_INT 1000
8851: LESS
8852: PUSH
8853: LD_VAR 0 5
8857: PUSH
8858: LD_INT 3
8860: NONEQUAL
8861: AND
8862: IFFALSE 8902
// begin SetTag ( i , tHeal ) ;
8864: LD_VAR 0 1
8868: PPUSH
8869: LD_INT 3
8871: PPUSH
8872: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8876: LD_VAR 0 1
8880: PPUSH
8881: LD_INT 97
8883: PPUSH
8884: LD_INT 139
8886: PPUSH
8887: CALL_OW 111
// AddComHold ( i ) ;
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 200
// continue ;
8900: GO 8821
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 256
8911: PUSH
8912: LD_INT 1000
8914: EQUAL
8915: PUSH
8916: LD_VAR 0 5
8920: PUSH
8921: LD_INT 3
8923: EQUAL
8924: AND
8925: IFFALSE 8941
// begin SetTag ( i , 0 ) ;
8927: LD_VAR 0 1
8931: PPUSH
8932: LD_INT 0
8934: PPUSH
8935: CALL_OW 109
// continue ;
8939: GO 8821
// end ; if HasTask ( i ) then
8941: LD_VAR 0 1
8945: PPUSH
8946: CALL_OW 314
8950: IFFALSE 8954
// continue ;
8952: GO 8821
// if not IsInUnit ( i ) and not tag and empty then
8954: LD_VAR 0 1
8958: PPUSH
8959: CALL_OW 310
8963: NOT
8964: PUSH
8965: LD_VAR 0 5
8969: NOT
8970: AND
8971: PUSH
8972: LD_VAR 0 13
8976: AND
8977: IFFALSE 9015
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8979: LD_VAR 0 1
8983: PPUSH
8984: LD_VAR 0 13
8988: PUSH
8989: LD_INT 1
8991: ARRAY
8992: PPUSH
8993: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
8997: LD_ADDR_VAR 0 13
9001: PUSH
9002: LD_VAR 0 13
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: CALL_OW 3
9014: ST_TO_ADDR
// end ; end ;
9015: GO 8821
9017: POP
9018: POP
// end ; end ; end ;
9019: PPOPN 15
9021: END
// every 0 0$1 trigger ruTanks do var i , mech , enemy ;
9022: LD_EXP 36
9026: IFFALSE 9602
9028: GO 9030
9030: DISABLE
9031: LD_INT 0
9033: PPUSH
9034: PPUSH
9035: PPUSH
// begin enable ;
9036: ENABLE
// if not ruTanks then
9037: LD_EXP 36
9041: NOT
9042: IFFALSE 9046
// exit ;
9044: GO 9602
// for i in ruTanks do
9046: LD_ADDR_VAR 0 1
9050: PUSH
9051: LD_EXP 36
9055: PUSH
9056: FOR_IN
9057: IFFALSE 9600
// begin if not IsOk ( i ) or GetSide ( i ) <> 6 then
9059: LD_VAR 0 1
9063: PPUSH
9064: CALL_OW 302
9068: NOT
9069: PUSH
9070: LD_VAR 0 1
9074: PPUSH
9075: CALL_OW 255
9079: PUSH
9080: LD_INT 6
9082: NONEQUAL
9083: OR
9084: IFFALSE 9104
// begin ruTanks := ruTanks diff i ;
9086: LD_ADDR_EXP 36
9090: PUSH
9091: LD_EXP 36
9095: PUSH
9096: LD_VAR 0 1
9100: DIFF
9101: ST_TO_ADDR
// continue ;
9102: GO 9056
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 110
9113: NOT
9114: PUSH
9115: LD_VAR 0 1
9119: PPUSH
9120: CALL_OW 110
9124: PUSH
9125: LD_INT 0
9127: EQUAL
9128: OR
9129: IFFALSE 9259
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9131: LD_VAR 0 1
9135: PPUSH
9136: CALL_OW 261
9140: PUSH
9141: LD_INT 50
9143: LESS
9144: PUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 262
9154: PUSH
9155: LD_INT 1
9157: EQUAL
9158: AND
9159: IFFALSE 9218
// begin ComMoveXY ( i , 103 , 149 ) ;
9161: LD_VAR 0 1
9165: PPUSH
9166: LD_INT 103
9168: PPUSH
9169: LD_INT 149
9171: PPUSH
9172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9176: LD_INT 35
9178: PPUSH
9179: CALL_OW 67
// until GetDistUnitXY ( i , 103 , 149 ) < 4 ;
9183: LD_VAR 0 1
9187: PPUSH
9188: LD_INT 103
9190: PPUSH
9191: LD_INT 149
9193: PPUSH
9194: CALL_OW 297
9198: PUSH
9199: LD_INT 4
9201: LESS
9202: IFFALSE 9176
// SetFuel ( i , 100 ) ;
9204: LD_VAR 0 1
9208: PPUSH
9209: LD_INT 100
9211: PPUSH
9212: CALL_OW 240
// end else
9216: GO 9259
// if not IsInArea ( i , ruParkingArea ) then
9218: LD_VAR 0 1
9222: PPUSH
9223: LD_INT 27
9225: PPUSH
9226: CALL_OW 308
9230: NOT
9231: IFFALSE 9247
// ComMoveToArea ( i , ruParkingArea ) else
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 27
9240: PPUSH
9241: CALL_OW 113
9245: GO 9259
// SetTag ( i , tParking ) ;
9247: LD_VAR 0 1
9251: PPUSH
9252: LD_INT 11
9254: PPUSH
9255: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9259: LD_VAR 0 1
9263: PPUSH
9264: CALL_OW 110
9268: PUSH
9269: LD_INT 11
9271: EQUAL
9272: IFFALSE 9402
// begin if GetLives ( i ) < 650 then
9274: LD_VAR 0 1
9278: PPUSH
9279: CALL_OW 256
9283: PUSH
9284: LD_INT 650
9286: LESS
9287: IFFALSE 9379
// begin if not IsDrivenBy ( i ) then
9289: LD_VAR 0 1
9293: PPUSH
9294: CALL_OW 311
9298: NOT
9299: IFFALSE 9303
// continue ;
9301: GO 9056
// mech := IsDrivenBy ( i ) ;
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: LD_VAR 0 1
9312: PPUSH
9313: CALL_OW 311
9317: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9318: LD_VAR 0 2
9322: PPUSH
9323: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9327: LD_VAR 0 2
9331: PPUSH
9332: LD_VAR 0 1
9336: PPUSH
9337: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9341: LD_INT 35
9343: PPUSH
9344: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9348: LD_VAR 0 1
9352: PPUSH
9353: CALL_OW 256
9357: PUSH
9358: LD_INT 1000
9360: EQUAL
9361: IFFALSE 9341
// ComEnterUnit ( mech , i ) ;
9363: LD_VAR 0 2
9367: PPUSH
9368: LD_VAR 0 1
9372: PPUSH
9373: CALL_OW 120
// end else
9377: GO 9402
// if IsDrivenBy ( i ) then
9379: LD_VAR 0 1
9383: PPUSH
9384: CALL_OW 311
9388: IFFALSE 9402
// SetTag ( i , tAttack ) ;
9390: LD_VAR 0 1
9394: PPUSH
9395: LD_INT 12
9397: PPUSH
9398: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9402: LD_VAR 0 1
9406: PPUSH
9407: CALL_OW 110
9411: PUSH
9412: LD_INT 12
9414: EQUAL
9415: IFFALSE 9598
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
9417: LD_ADDR_VAR 0 3
9421: PUSH
9422: LD_INT 26
9424: PPUSH
9425: LD_INT 81
9427: PUSH
9428: LD_INT 6
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 70
9439: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9440: LD_VAR 0 1
9444: PPUSH
9445: CALL_OW 256
9449: PUSH
9450: LD_INT 650
9452: LESS
9453: IFFALSE 9478
// begin ComStop ( i ) ;
9455: LD_VAR 0 1
9459: PPUSH
9460: CALL_OW 141
// SetTag ( i , 0 ) ;
9464: LD_VAR 0 1
9468: PPUSH
9469: LD_INT 0
9471: PPUSH
9472: CALL_OW 109
// continue ;
9476: GO 9056
// end ; if enemy then
9478: LD_VAR 0 3
9482: IFFALSE 9522
// begin if not HasTask ( i ) then
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 314
9493: NOT
9494: IFFALSE 9520
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9496: LD_VAR 0 1
9500: PPUSH
9501: LD_VAR 0 3
9505: PPUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 74
9515: PPUSH
9516: CALL 56717 0 2
// end else
9520: GO 9598
// if ruTanks > 1 then
9522: LD_EXP 36
9526: PUSH
9527: LD_INT 1
9529: GREATER
9530: IFFALSE 9598
// AgressiveMove ( i , [ [ 78 , 112 ] , [ 104 , 106 ] , [ 130 , 107 ] , [ 143 , 83 ] , [ 120 , 35 ] ] ) ;
9532: LD_VAR 0 1
9536: PPUSH
9537: LD_INT 78
9539: PUSH
9540: LD_INT 112
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 104
9549: PUSH
9550: LD_INT 106
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 130
9559: PUSH
9560: LD_INT 107
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 143
9569: PUSH
9570: LD_INT 83
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 120
9579: PUSH
9580: LD_INT 35
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PPUSH
9594: CALL 55249 0 2
// end ; end ;
9598: GO 9056
9600: POP
9601: POP
// end ;
9602: PPOPN 3
9604: END
// every 0 0$1 trigger InBattle ( 6 ) or playerInBase do
9605: LD_INT 6
9607: PPUSH
9608: CALL_OW 463
9612: PUSH
9613: LD_EXP 5
9617: OR
9618: IFFALSE 9836
9620: GO 9622
9622: DISABLE
// begin wait ( 0 0$10 ) ;
9623: LD_INT 350
9625: PPUSH
9626: CALL_OW 67
// if playerInBase then
9630: LD_EXP 5
9634: IFFALSE 9643
// wait ( 3 3$00 ) ;
9636: LD_INT 6300
9638: PPUSH
9639: CALL_OW 67
// ruConstructList := [ [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] ] ;
9643: LD_ADDR_EXP 35
9647: PUSH
9648: LD_INT 21
9650: PUSH
9651: LD_INT 3
9653: PUSH
9654: LD_INT 1
9656: PUSH
9657: LD_INT 45
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 21
9668: PUSH
9669: LD_INT 3
9671: PUSH
9672: LD_INT 1
9674: PUSH
9675: LD_INT 45
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 3
9689: PUSH
9690: LD_INT 1
9692: PUSH
9693: LD_INT 45
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: ST_TO_ADDR
// if Difficulty > 1 then
9707: LD_OWVAR 67
9711: PUSH
9712: LD_INT 1
9714: GREATER
9715: IFFALSE 9750
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gatling_gun ] ) ;
9717: LD_ADDR_EXP 35
9721: PUSH
9722: LD_EXP 35
9726: PPUSH
9727: LD_INT 21
9729: PUSH
9730: LD_INT 3
9732: PUSH
9733: LD_INT 1
9735: PUSH
9736: LD_INT 43
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL 52645 0 2
9749: ST_TO_ADDR
// if Difficulty > 2 then
9750: LD_OWVAR 67
9754: PUSH
9755: LD_INT 2
9757: GREATER
9758: IFFALSE 9793
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9760: LD_ADDR_EXP 35
9764: PUSH
9765: LD_EXP 35
9769: PPUSH
9770: LD_INT 21
9772: PUSH
9773: LD_INT 3
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: LD_INT 44
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PPUSH
9788: CALL 52645 0 2
9792: ST_TO_ADDR
// if Difficulty > 3 then
9793: LD_OWVAR 67
9797: PUSH
9798: LD_INT 3
9800: GREATER
9801: IFFALSE 9836
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9803: LD_ADDR_EXP 35
9807: PUSH
9808: LD_EXP 35
9812: PPUSH
9813: LD_INT 21
9815: PUSH
9816: LD_INT 3
9818: PUSH
9819: LD_INT 1
9821: PUSH
9822: LD_INT 44
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: PPUSH
9831: CALL 52645 0 2
9835: ST_TO_ADDR
// end ; end_of_file
9836: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
9837: LD_INT 0
9839: PPUSH
9840: PPUSH
9841: PPUSH
9842: PPUSH
9843: PPUSH
9844: PPUSH
9845: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
9846: LD_ADDR_VAR 0 2
9850: PUSH
9851: LD_STRING 09_env
9853: PPUSH
9854: EMPTY
9855: PPUSH
9856: CALL_OW 30
9860: ST_TO_ADDR
// if not tmp then
9861: LD_VAR 0 2
9865: NOT
9866: IFFALSE 9870
// exit ;
9868: GO 10234
// list := ListEnvironmentArea ( mapArea ) ;
9870: LD_ADDR_VAR 0 7
9874: PUSH
9875: LD_INT 4
9877: PPUSH
9878: CALL_OW 353
9882: ST_TO_ADDR
// if not list then
9883: LD_VAR 0 7
9887: NOT
9888: IFFALSE 9892
// exit ;
9890: GO 10234
// for i in list do
9892: LD_ADDR_VAR 0 3
9896: PUSH
9897: LD_VAR 0 7
9901: PUSH
9902: FOR_IN
9903: IFFALSE 10011
// begin exist := false ;
9905: LD_ADDR_VAR 0 6
9909: PUSH
9910: LD_INT 0
9912: ST_TO_ADDR
// for j in tmp do
9913: LD_ADDR_VAR 0 4
9917: PUSH
9918: LD_VAR 0 2
9922: PUSH
9923: FOR_IN
9924: IFFALSE 9978
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
9926: LD_VAR 0 3
9930: PUSH
9931: LD_INT 1
9933: ARRAY
9934: PUSH
9935: LD_VAR 0 4
9939: PUSH
9940: LD_INT 1
9942: ARRAY
9943: EQUAL
9944: PUSH
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 2
9952: ARRAY
9953: PUSH
9954: LD_VAR 0 4
9958: PUSH
9959: LD_INT 2
9961: ARRAY
9962: EQUAL
9963: AND
9964: IFFALSE 9976
// begin exist := true ;
9966: LD_ADDR_VAR 0 6
9970: PUSH
9971: LD_INT 1
9973: ST_TO_ADDR
// break ;
9974: GO 9978
// end ;
9976: GO 9923
9978: POP
9979: POP
// if not exist then
9980: LD_VAR 0 6
9984: NOT
9985: IFFALSE 10009
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
9987: LD_VAR 0 3
9991: PUSH
9992: LD_INT 1
9994: ARRAY
9995: PPUSH
9996: LD_VAR 0 3
10000: PUSH
10001: LD_INT 2
10003: ARRAY
10004: PPUSH
10005: CALL_OW 347
// end ;
10009: GO 9902
10011: POP
10012: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
10013: LD_ADDR_VAR 0 2
10017: PUSH
10018: LD_STRING 09_animals
10020: PPUSH
10021: EMPTY
10022: PPUSH
10023: CALL_OW 30
10027: ST_TO_ADDR
// if not tmp then
10028: LD_VAR 0 2
10032: NOT
10033: IFFALSE 10037
// exit ;
10035: GO 10234
// InitHc_All ( ) ;
10037: CALL_OW 584
// for i in tmp do
10041: LD_ADDR_VAR 0 3
10045: PUSH
10046: LD_VAR 0 2
10050: PUSH
10051: FOR_IN
10052: IFFALSE 10169
// begin uc_side := 0 ;
10054: LD_ADDR_OWVAR 20
10058: PUSH
10059: LD_INT 0
10061: ST_TO_ADDR
// uc_nation := nation_nature ;
10062: LD_ADDR_OWVAR 21
10066: PUSH
10067: LD_INT 0
10069: ST_TO_ADDR
// hc_gallery :=  ;
10070: LD_ADDR_OWVAR 33
10074: PUSH
10075: LD_STRING 
10077: ST_TO_ADDR
// hc_name :=  ;
10078: LD_ADDR_OWVAR 26
10082: PUSH
10083: LD_STRING 
10085: ST_TO_ADDR
// hc_class := i [ 1 ] ;
10086: LD_ADDR_OWVAR 28
10090: PUSH
10091: LD_VAR 0 3
10095: PUSH
10096: LD_INT 1
10098: ARRAY
10099: ST_TO_ADDR
// un := CreateHuman ;
10100: LD_ADDR_VAR 0 5
10104: PUSH
10105: CALL_OW 44
10109: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
10110: LD_VAR 0 5
10114: PPUSH
10115: LD_VAR 0 3
10119: PUSH
10120: LD_INT 2
10122: ARRAY
10123: PPUSH
10124: LD_VAR 0 3
10128: PUSH
10129: LD_INT 3
10131: ARRAY
10132: PPUSH
10133: LD_VAR 0 3
10137: PUSH
10138: LD_INT 4
10140: ARRAY
10141: PPUSH
10142: LD_INT 0
10144: PPUSH
10145: CALL 54785 0 5
// SetLives ( un , i [ 5 ] ) ;
10149: LD_VAR 0 5
10153: PPUSH
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 5
10161: ARRAY
10162: PPUSH
10163: CALL_OW 234
// end ;
10167: GO 10051
10169: POP
10170: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
10171: LD_ADDR_VAR 0 3
10175: PUSH
10176: DOUBLE
10177: LD_INT 1
10179: DEC
10180: ST_TO_ADDR
10181: LD_INT 6
10183: PUSH
10184: LD_INT 5
10186: PUSH
10187: LD_INT 4
10189: PUSH
10190: LD_INT 3
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: PUSH
10199: LD_OWVAR 67
10203: ARRAY
10204: PUSH
10205: FOR_TO
10206: IFFALSE 10232
// begin PrepareApeman ( 5 ) ;
10208: LD_INT 5
10210: PPUSH
10211: CALL 48926 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10215: CALL_OW 44
10219: PPUSH
10220: LD_INT 5
10222: PPUSH
10223: LD_INT 0
10225: PPUSH
10226: CALL_OW 49
// end ;
10230: GO 10205
10232: POP
10233: POP
// end ;
10234: LD_VAR 0 1
10238: RET
// export function CreateDeposits ; var i , oil , sib ; begin
10239: LD_INT 0
10241: PPUSH
10242: PPUSH
10243: PPUSH
10244: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
10245: LD_ADDR_VAR 0 3
10249: PUSH
10250: LD_INT 91
10252: PUSH
10253: LD_INT 13
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 52
10262: PUSH
10263: LD_INT 23
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 115
10272: PUSH
10273: LD_INT 150
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
10285: LD_ADDR_VAR 0 4
10289: PUSH
10290: LD_INT 82
10292: PUSH
10293: LD_INT 42
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 128
10302: PUSH
10303: LD_INT 132
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: ST_TO_ADDR
// for i in oil do
10314: LD_ADDR_VAR 0 2
10318: PUSH
10319: LD_VAR 0 3
10323: PUSH
10324: FOR_IN
10325: IFFALSE 10404
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
10327: LD_VAR 0 2
10331: PUSH
10332: LD_INT 1
10334: ARRAY
10335: PPUSH
10336: LD_VAR 0 2
10340: PUSH
10341: LD_INT 2
10343: ARRAY
10344: PPUSH
10345: LD_INT 2
10347: PPUSH
10348: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10352: LD_VAR 0 2
10356: PUSH
10357: LD_INT 1
10359: ARRAY
10360: PPUSH
10361: LD_VAR 0 2
10365: PUSH
10366: LD_INT 2
10368: ARRAY
10369: PPUSH
10370: LD_INT 2
10372: PPUSH
10373: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10377: LD_VAR 0 2
10381: PUSH
10382: LD_INT 1
10384: ARRAY
10385: PPUSH
10386: LD_VAR 0 2
10390: PUSH
10391: LD_INT 2
10393: ARRAY
10394: PPUSH
10395: LD_INT 6
10397: PPUSH
10398: CALL_OW 441
// end ;
10402: GO 10324
10404: POP
10405: POP
// for i in sib do
10406: LD_ADDR_VAR 0 2
10410: PUSH
10411: LD_VAR 0 4
10415: PUSH
10416: FOR_IN
10417: IFFALSE 10496
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
10419: LD_VAR 0 2
10423: PUSH
10424: LD_INT 1
10426: ARRAY
10427: PPUSH
10428: LD_VAR 0 2
10432: PUSH
10433: LD_INT 2
10435: ARRAY
10436: PPUSH
10437: LD_INT 3
10439: PPUSH
10440: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10444: LD_VAR 0 2
10448: PUSH
10449: LD_INT 1
10451: ARRAY
10452: PPUSH
10453: LD_VAR 0 2
10457: PUSH
10458: LD_INT 2
10460: ARRAY
10461: PPUSH
10462: LD_INT 2
10464: PPUSH
10465: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10469: LD_VAR 0 2
10473: PUSH
10474: LD_INT 1
10476: ARRAY
10477: PPUSH
10478: LD_VAR 0 2
10482: PUSH
10483: LD_INT 2
10485: ARRAY
10486: PPUSH
10487: LD_INT 6
10489: PPUSH
10490: CALL_OW 441
// end ;
10494: GO 10416
10496: POP
10497: POP
// end ;
10498: LD_VAR 0 1
10502: RET
// export function LoadCam ; var i , tmp ; begin
10503: LD_INT 0
10505: PPUSH
10506: PPUSH
10507: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
10508: LD_ADDR_VAR 0 3
10512: PUSH
10513: LD_STRING 09_cameras
10515: PPUSH
10516: EMPTY
10517: PPUSH
10518: CALL_OW 30
10522: ST_TO_ADDR
// if not tmp then
10523: LD_VAR 0 3
10527: NOT
10528: IFFALSE 10532
// exit ;
10530: GO 10574
// for i in tmp do
10532: LD_ADDR_VAR 0 2
10536: PUSH
10537: LD_VAR 0 3
10541: PUSH
10542: FOR_IN
10543: IFFALSE 10572
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
10545: LD_VAR 0 2
10549: PUSH
10550: LD_INT 1
10552: ARRAY
10553: PPUSH
10554: LD_VAR 0 2
10558: PUSH
10559: LD_INT 2
10561: ARRAY
10562: PPUSH
10563: LD_INT 2
10565: PPUSH
10566: CALL_OW 244
10570: GO 10542
10572: POP
10573: POP
// end ;
10574: LD_VAR 0 1
10578: RET
// export function LoadTech ; var i , tmp , default ; begin
10579: LD_INT 0
10581: PPUSH
10582: PPUSH
10583: PPUSH
10584: PPUSH
// default := [ 2 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
10585: LD_ADDR_VAR 0 4
10589: PUSH
10590: LD_INT 2
10592: PUSH
10593: LD_INT 2
10595: PUSH
10596: LD_INT 0
10598: PUSH
10599: LD_INT 0
10601: PUSH
10602: LD_INT 0
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 2
10610: PUSH
10611: LD_INT 0
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: LD_INT 0
10619: PUSH
10620: LD_INT 2
10622: PUSH
10623: LD_INT 0
10625: PUSH
10626: LD_INT 0
10628: PUSH
10629: LD_INT 0
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: LD_INT 0
10637: PUSH
10638: LD_INT 2
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: LD_INT 0
10646: PUSH
10647: LD_INT 2
10649: PUSH
10650: LD_INT 1
10652: PUSH
10653: LD_INT 1
10655: PUSH
10656: LD_INT 0
10658: PUSH
10659: LD_INT 0
10661: PUSH
10662: LD_INT 0
10664: PUSH
10665: LD_INT 0
10667: PUSH
10668: LD_INT 0
10670: PUSH
10671: LD_INT 0
10673: PUSH
10674: LD_INT 0
10676: PUSH
10677: LD_INT 0
10679: PUSH
10680: LD_INT 0
10682: PUSH
10683: LD_INT 0
10685: PUSH
10686: LD_INT 0
10688: PUSH
10689: LD_INT 0
10691: PUSH
10692: LD_INT 2
10694: PUSH
10695: LD_INT 0
10697: PUSH
10698: LD_INT 0
10700: PUSH
10701: LD_INT 0
10703: PUSH
10704: LD_INT 1
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: LD_INT 1
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: LD_INT 0
10718: PUSH
10719: LD_INT 0
10721: PUSH
10722: LD_INT 2
10724: PUSH
10725: LD_INT 2
10727: PUSH
10728: LD_INT 2
10730: PUSH
10731: LD_INT 2
10733: PUSH
10734: LD_INT 2
10736: PUSH
10737: LD_INT 2
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: LD_INT 1
10745: PUSH
10746: LD_INT 0
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: LD_INT 0
10754: PUSH
10755: LD_INT 0
10757: PUSH
10758: LD_INT 0
10760: PUSH
10761: LD_INT 0
10763: PUSH
10764: LD_INT 0
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 1
10772: PUSH
10773: LD_INT 0
10775: PUSH
10776: LD_INT 0
10778: PUSH
10779: LD_INT 0
10781: PUSH
10782: LD_INT 0
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: LD_INT 0
10790: PUSH
10791: LD_INT 0
10793: PUSH
10794: LD_INT 2
10796: PUSH
10797: LD_INT 2
10799: PUSH
10800: LD_INT 0
10802: PUSH
10803: LD_INT 0
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: LD_INT 1
10811: PUSH
10812: LD_INT 1
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: LD_INT 1
10820: PUSH
10821: LD_INT 1
10823: PUSH
10824: LD_INT 1
10826: PUSH
10827: LD_INT 0
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: LD_INT 0
10847: PUSH
10848: LD_INT 0
10850: PUSH
10851: LD_INT 0
10853: PUSH
10854: LD_INT 1
10856: PUSH
10857: LD_INT 1
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: LD_INT 1
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: LD_INT 1
10877: PUSH
10878: LD_INT 1
10880: PUSH
10881: LD_INT 1
10883: PUSH
10884: LD_INT 1
10886: PUSH
10887: LD_INT 1
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: ST_TO_ADDR
// tmp := LoadVariable ( 09_tech , default ) ;
10992: LD_ADDR_VAR 0 3
10996: PUSH
10997: LD_STRING 09_tech
10999: PPUSH
11000: LD_VAR 0 4
11004: PPUSH
11005: CALL_OW 30
11009: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
11010: LD_ADDR_VAR 0 2
11014: PUSH
11015: DOUBLE
11016: LD_INT 1
11018: DEC
11019: ST_TO_ADDR
11020: LD_VAR 0 3
11024: PPUSH
11025: CALL 17426 0 1
11029: PUSH
11030: FOR_TO
11031: IFFALSE 11058
// SetTech ( i , 2 , tmp [ i ] ) ;
11033: LD_VAR 0 2
11037: PPUSH
11038: LD_INT 2
11040: PPUSH
11041: LD_VAR 0 3
11045: PUSH
11046: LD_VAR 0 2
11050: ARRAY
11051: PPUSH
11052: CALL_OW 322
11056: GO 11030
11058: POP
11059: POP
// end ;
11060: LD_VAR 0 1
11064: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
11065: LD_INT 0
11067: PPUSH
11068: PPUSH
11069: PPUSH
11070: PPUSH
11071: PPUSH
11072: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
11073: LD_ADDR_VAR 0 3
11077: PUSH
11078: LD_STRING 09_buildings
11080: PPUSH
11081: EMPTY
11082: PPUSH
11083: CALL_OW 30
11087: ST_TO_ADDR
// for i in tmp do
11088: LD_ADDR_VAR 0 2
11092: PUSH
11093: LD_VAR 0 3
11097: PUSH
11098: FOR_IN
11099: IFFALSE 11493
// begin uc_side := 2 ;
11101: LD_ADDR_OWVAR 20
11105: PUSH
11106: LD_INT 2
11108: ST_TO_ADDR
// uc_nation := nation_arabian ;
11109: LD_ADDR_OWVAR 21
11113: PUSH
11114: LD_INT 2
11116: ST_TO_ADDR
// bc_type := i [ 1 ] ;
11117: LD_ADDR_OWVAR 42
11121: PUSH
11122: LD_VAR 0 2
11126: PUSH
11127: LD_INT 1
11129: ARRAY
11130: ST_TO_ADDR
// bc_level := i [ 5 ] ;
11131: LD_ADDR_OWVAR 43
11135: PUSH
11136: LD_VAR 0 2
11140: PUSH
11141: LD_INT 5
11143: ARRAY
11144: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
11145: LD_ADDR_OWVAR 44
11149: PUSH
11150: LD_INT 9
11152: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
11153: LD_ADDR_OWVAR 45
11157: PUSH
11158: LD_INT 9
11160: ST_TO_ADDR
// if i [ 7 ] then
11161: LD_VAR 0 2
11165: PUSH
11166: LD_INT 7
11168: ARRAY
11169: IFFALSE 11209
// begin bc_kind1 := i [ 7 ] ;
11171: LD_ADDR_OWVAR 44
11175: PUSH
11176: LD_VAR 0 2
11180: PUSH
11181: LD_INT 7
11183: ARRAY
11184: ST_TO_ADDR
// if i [ 8 ] then
11185: LD_VAR 0 2
11189: PUSH
11190: LD_INT 8
11192: ARRAY
11193: IFFALSE 11209
// bc_kind2 := i [ 8 ] ;
11195: LD_ADDR_OWVAR 45
11199: PUSH
11200: LD_VAR 0 2
11204: PUSH
11205: LD_INT 8
11207: ARRAY
11208: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
11209: LD_ADDR_VAR 0 4
11213: PUSH
11214: LD_VAR 0 2
11218: PUSH
11219: LD_INT 2
11221: ARRAY
11222: PPUSH
11223: LD_VAR 0 2
11227: PUSH
11228: LD_INT 3
11230: ARRAY
11231: PPUSH
11232: LD_VAR 0 2
11236: PUSH
11237: LD_INT 4
11239: ARRAY
11240: PPUSH
11241: CALL_OW 47
11245: ST_TO_ADDR
// if i [ 8 ] then
11246: LD_VAR 0 2
11250: PUSH
11251: LD_INT 8
11253: ARRAY
11254: IFFALSE 11274
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
11256: LD_VAR 0 4
11260: PPUSH
11261: LD_VAR 0 2
11265: PUSH
11266: LD_INT 8
11268: ARRAY
11269: PPUSH
11270: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
11274: LD_VAR 0 2
11278: PUSH
11279: LD_INT 1
11281: ARRAY
11282: PUSH
11283: LD_INT 0
11285: PUSH
11286: LD_INT 1
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: IN
11293: IFFALSE 11491
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
11295: LD_ADDR_VAR 0 6
11299: PUSH
11300: LD_STRING 09_materials
11302: PPUSH
11303: LD_INT 100
11305: PUSH
11306: LD_INT 50
11308: PUSH
11309: LD_INT 30
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: PPUSH
11320: CALL_OW 30
11324: ST_TO_ADDR
// for j := 1 to 3 do
11325: LD_ADDR_VAR 0 5
11329: PUSH
11330: DOUBLE
11331: LD_INT 1
11333: DEC
11334: ST_TO_ADDR
11335: LD_INT 3
11337: PUSH
11338: FOR_TO
11339: IFFALSE 11489
// if mat [ 1 ] [ j ] then
11341: LD_VAR 0 6
11345: PUSH
11346: LD_INT 1
11348: ARRAY
11349: PUSH
11350: LD_VAR 0 5
11354: ARRAY
11355: IFFALSE 11487
// if j > 1 then
11357: LD_VAR 0 5
11361: PUSH
11362: LD_INT 1
11364: GREATER
11365: IFFALSE 11428
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 35 , 25 , 20 , 10 ] [ Difficulty ] ) else
11367: LD_VAR 0 4
11371: PPUSH
11372: CALL_OW 274
11376: PPUSH
11377: LD_VAR 0 5
11381: PPUSH
11382: LD_VAR 0 6
11386: PUSH
11387: LD_INT 1
11389: ARRAY
11390: PUSH
11391: LD_VAR 0 5
11395: ARRAY
11396: PUSH
11397: LD_INT 35
11399: PUSH
11400: LD_INT 25
11402: PUSH
11403: LD_INT 20
11405: PUSH
11406: LD_INT 10
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: LD_OWVAR 67
11419: ARRAY
11420: PLUS
11421: PPUSH
11422: CALL_OW 277
11426: GO 11487
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 350 , 250 , 150 , 100 ] [ Difficulty ] ) ;
11428: LD_VAR 0 4
11432: PPUSH
11433: CALL_OW 274
11437: PPUSH
11438: LD_VAR 0 5
11442: PPUSH
11443: LD_VAR 0 6
11447: PUSH
11448: LD_INT 1
11450: ARRAY
11451: PUSH
11452: LD_VAR 0 5
11456: ARRAY
11457: PUSH
11458: LD_INT 350
11460: PUSH
11461: LD_INT 250
11463: PUSH
11464: LD_INT 150
11466: PUSH
11467: LD_INT 100
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: PUSH
11476: LD_OWVAR 67
11480: ARRAY
11481: PLUS
11482: PPUSH
11483: CALL_OW 277
11487: GO 11338
11489: POP
11490: POP
// end ; end ;
11491: GO 11098
11493: POP
11494: POP
// end ;
11495: LD_VAR 0 1
11499: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
11500: LD_INT 0
11502: PPUSH
11503: PPUSH
// area = ListEnvironmentArea ( area ) ;
11504: LD_ADDR_VAR 0 2
11508: PUSH
11509: LD_VAR 0 2
11513: PPUSH
11514: CALL_OW 353
11518: ST_TO_ADDR
// if bulldozer > 0 then
11519: LD_VAR 0 1
11523: PUSH
11524: LD_INT 0
11526: GREATER
11527: IFFALSE 11638
// for i = area downto 1 do
11529: LD_ADDR_VAR 0 4
11533: PUSH
11534: DOUBLE
11535: LD_VAR 0 2
11539: INC
11540: ST_TO_ADDR
11541: LD_INT 1
11543: PUSH
11544: FOR_DOWNTO
11545: IFFALSE 11636
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
11547: LD_VAR 0 2
11551: PUSH
11552: LD_VAR 0 4
11556: ARRAY
11557: PUSH
11558: LD_INT 1
11560: ARRAY
11561: PPUSH
11562: LD_VAR 0 2
11566: PUSH
11567: LD_VAR 0 4
11571: ARRAY
11572: PUSH
11573: LD_INT 2
11575: ARRAY
11576: PPUSH
11577: CALL_OW 351
11581: IFFALSE 11634
// if not HasTask ( bulldozer ) then
11583: LD_VAR 0 1
11587: PPUSH
11588: CALL_OW 314
11592: NOT
11593: IFFALSE 11634
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
11595: LD_VAR 0 1
11599: PPUSH
11600: LD_VAR 0 2
11604: PUSH
11605: LD_VAR 0 4
11609: ARRAY
11610: PUSH
11611: LD_INT 1
11613: ARRAY
11614: PPUSH
11615: LD_VAR 0 2
11619: PUSH
11620: LD_VAR 0 4
11624: ARRAY
11625: PUSH
11626: LD_INT 2
11628: ARRAY
11629: PPUSH
11630: CALL_OW 171
11634: GO 11544
11636: POP
11637: POP
// end ; end_of_file
11638: LD_VAR 0 3
11642: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11643: LD_VAR 0 1
11647: PPUSH
11648: LD_VAR 0 2
11652: PPUSH
11653: CALL 73011 0 2
// if GetControl ( vehicle ) = control_apeman then
11657: LD_VAR 0 1
11661: PPUSH
11662: CALL_OW 263
11666: PUSH
11667: LD_INT 5
11669: EQUAL
11670: IFFALSE 11682
// begin apeDriver := true ;
11672: LD_ADDR_EXP 8
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// exit ;
11680: GO 11735
// end ; if GetSide ( factory ) = 6 then
11682: LD_VAR 0 2
11686: PPUSH
11687: CALL_OW 255
11691: PUSH
11692: LD_INT 6
11694: EQUAL
11695: IFFALSE 11735
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
11697: LD_ADDR_EXP 35
11701: PUSH
11702: LD_EXP 35
11706: PPUSH
11707: LD_INT 1
11709: PPUSH
11710: CALL_OW 3
11714: ST_TO_ADDR
// ruTanks := Join ( ruTanks , vehicle ) ;
11715: LD_ADDR_EXP 36
11719: PUSH
11720: LD_EXP 36
11724: PPUSH
11725: LD_VAR 0 1
11729: PPUSH
11730: CALL 52645 0 2
11734: ST_TO_ADDR
// end ; end ;
11735: PPOPN 2
11737: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) = 6 and not See ( 2 , unit ) then
11738: LD_VAR 0 2
11742: PPUSH
11743: CALL_OW 255
11747: PUSH
11748: LD_INT 6
11750: EQUAL
11751: PUSH
11752: LD_INT 2
11754: PPUSH
11755: LD_VAR 0 2
11759: PPUSH
11760: CALL_OW 292
11764: NOT
11765: AND
11766: IFFALSE 11780
// SetLives ( unit , 1000 ) ;
11768: LD_VAR 0 2
11772: PPUSH
11773: LD_INT 1000
11775: PPUSH
11776: CALL_OW 234
// end ;
11780: PPOPN 2
11782: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area , fac , arm ;
11783: LD_INT 0
11785: PPUSH
11786: PPUSH
11787: PPUSH
11788: PPUSH
// begin if GetSide ( driver ) = 3 then
11789: LD_VAR 0 1
11793: PPUSH
11794: CALL_OW 255
11798: PUSH
11799: LD_INT 3
11801: EQUAL
11802: IFFALSE 11939
// begin tag := GetTag ( driver ) ;
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL_OW 110
11818: ST_TO_ADDR
// area := [ ruSpawn1AArea , ruSpawn2AArea , ruSpawn3AArea ] [ tag ] ;
11819: LD_ADDR_VAR 0 6
11823: PUSH
11824: LD_INT 21
11826: PUSH
11827: LD_INT 22
11829: PUSH
11830: LD_INT 23
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: PUSH
11838: LD_VAR 0 5
11842: ARRAY
11843: ST_TO_ADDR
// if not area then
11844: LD_VAR 0 6
11848: NOT
11849: IFFALSE 11853
// exit ;
11851: GO 12207
// repeat ComMoveToArea ( driver , area ) ;
11853: LD_VAR 0 1
11857: PPUSH
11858: LD_VAR 0 6
11862: PPUSH
11863: CALL_OW 113
// wait ( 0 0$3 ) ;
11867: LD_INT 105
11869: PPUSH
11870: CALL_OW 67
// if not IsOk ( driver ) then
11874: LD_VAR 0 1
11878: PPUSH
11879: CALL_OW 302
11883: NOT
11884: IFFALSE 11888
// exit ;
11886: GO 12207
// until IsInArea ( driver , ruSpawn1Area ) or IsInArea ( driver , ruSpawn2Area ) or IsInArea ( driver , ruSpawn3Area ) ;
11888: LD_VAR 0 1
11892: PPUSH
11893: LD_INT 15
11895: PPUSH
11896: CALL_OW 308
11900: PUSH
11901: LD_VAR 0 1
11905: PPUSH
11906: LD_INT 17
11908: PPUSH
11909: CALL_OW 308
11913: OR
11914: PUSH
11915: LD_VAR 0 1
11919: PPUSH
11920: LD_INT 19
11922: PPUSH
11923: CALL_OW 308
11927: OR
11928: IFFALSE 11853
// RemoveUnit ( driver ) ;
11930: LD_VAR 0 1
11934: PPUSH
11935: CALL_OW 64
// end ; if GetSide ( driver ) = 6 then
11939: LD_VAR 0 1
11943: PPUSH
11944: CALL_OW 255
11948: PUSH
11949: LD_INT 6
11951: EQUAL
11952: IFFALSE 12207
// begin ComMoveXY ( driver , 97 , 139 ) ;
11954: LD_VAR 0 1
11958: PPUSH
11959: LD_INT 97
11961: PPUSH
11962: LD_INT 139
11964: PPUSH
11965: CALL_OW 111
// if GetLives ( driver ) < 1000 then
11969: LD_VAR 0 1
11973: PPUSH
11974: CALL_OW 256
11978: PUSH
11979: LD_INT 1000
11981: LESS
11982: IFFALSE 11996
// SetTag ( driver , tHeal ) ;
11984: LD_VAR 0 1
11988: PPUSH
11989: LD_INT 3
11991: PPUSH
11992: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
11996: LD_INT 35
11998: PPUSH
11999: CALL_OW 67
// if IsDead ( driver ) then
12003: LD_VAR 0 1
12007: PPUSH
12008: CALL_OW 301
12012: IFFALSE 12016
// exit ;
12014: GO 12207
// until GetLives ( driver ) = 1000 ;
12016: LD_VAR 0 1
12020: PPUSH
12021: CALL_OW 256
12025: PUSH
12026: LD_INT 1000
12028: EQUAL
12029: IFFALSE 11996
// SetTag ( driver , 0 ) ;
12031: LD_VAR 0 1
12035: PPUSH
12036: LD_INT 0
12038: PPUSH
12039: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12043: LD_ADDR_VAR 0 7
12047: PUSH
12048: LD_INT 26
12050: PPUSH
12051: LD_INT 22
12053: PUSH
12054: LD_INT 6
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 30
12063: PUSH
12064: LD_INT 3
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 50
12073: PUSH
12074: EMPTY
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 70
12086: ST_TO_ADDR
// if fac then
12087: LD_VAR 0 7
12091: IFFALSE 12113
// begin ComEnterUnit ( driver , fac [ 1 ] ) ;
12093: LD_VAR 0 1
12097: PPUSH
12098: LD_VAR 0 7
12102: PUSH
12103: LD_INT 1
12105: ARRAY
12106: PPUSH
12107: CALL_OW 120
// exit ;
12111: GO 12207
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_barracks ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
12113: LD_ADDR_VAR 0 8
12117: PUSH
12118: LD_INT 26
12120: PPUSH
12121: LD_INT 22
12123: PUSH
12124: LD_INT 6
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 5
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 3
12143: PUSH
12144: LD_INT 62
12146: PUSH
12147: EMPTY
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 50
12156: PUSH
12157: EMPTY
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 70
12170: ST_TO_ADDR
// if arm then
12171: LD_VAR 0 8
12175: IFFALSE 12207
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
12177: LD_VAR 0 1
12181: PPUSH
12182: LD_VAR 0 8
12186: PUSH
12187: LD_INT 1
12189: ARRAY
12190: PPUSH
12191: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
12195: LD_VAR 0 1
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 183
// end ; end ; end ;
12207: PPOPN 8
12209: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
12210: LD_VAR 0 3
12214: PUSH
12215: LD_INT 17
12217: EQUAL
12218: IFFALSE 12228
// kamikazeTrained := true ;
12220: LD_ADDR_EXP 6
12224: PUSH
12225: LD_INT 1
12227: ST_TO_ADDR
// end ;
12228: PPOPN 3
12230: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL 72891 0 1
// if un in ruTanks then
12240: LD_VAR 0 1
12244: PUSH
12245: LD_EXP 36
12249: IN
12250: IFFALSE 12313
// ruConstructList := Join ( ruConstructList , [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ) ;
12252: LD_ADDR_EXP 35
12256: PUSH
12257: LD_EXP 35
12261: PPUSH
12262: LD_VAR 0 1
12266: PPUSH
12267: CALL_OW 265
12271: PUSH
12272: LD_VAR 0 1
12276: PPUSH
12277: CALL_OW 262
12281: PUSH
12282: LD_VAR 0 1
12286: PPUSH
12287: CALL_OW 263
12291: PUSH
12292: LD_VAR 0 1
12296: PPUSH
12297: CALL_OW 264
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL 52645 0 2
12312: ST_TO_ADDR
// if un = Schulz then
12313: LD_VAR 0 1
12317: PUSH
12318: LD_EXP 24
12322: EQUAL
12323: IFFALSE 12332
// YouLost ( Schulz ) ;
12325: LD_STRING Schulz
12327: PPUSH
12328: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
12332: LD_VAR 0 1
12336: PUSH
12337: LD_EXP 13
12341: EQUAL
12342: PUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: CALL_OW 255
12352: PUSH
12353: LD_INT 2
12355: EQUAL
12356: AND
12357: IFFALSE 12366
// YouLost ( Heike ) ;
12359: LD_STRING Heike
12361: PPUSH
12362: CALL_OW 104
// end ; end_of_file
12366: PPOPN 1
12368: END
// export function Action ; begin
12369: LD_INT 0
12371: PPUSH
// InGameOn ;
12372: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
12376: LD_INT 1
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_INT 2
12384: PPUSH
12385: LD_INT 32963
12387: NEG
12388: PPUSH
12389: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
12393: LD_INT 1
12395: PPUSH
12396: LD_INT 1
12398: PPUSH
12399: LD_INT 2
12401: PPUSH
12402: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
12406: LD_INT 173
12408: PPUSH
12409: LD_INT 149
12411: PPUSH
12412: CALL_OW 86
// PrepareExtraRussianBase ;
12416: CALL 3364 0 0
// wait ( 0 0$2 ) ;
12420: LD_INT 70
12422: PPUSH
12423: CALL_OW 67
// InGameOff ;
12427: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
12431: LD_STRING M6
12433: PPUSH
12434: CALL_OW 337
// if Count ( UnitFilter ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] , [ f_ok ] ) ) = Count ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] ) then
12438: LD_EXP 14
12442: PUSH
12443: LD_EXP 15
12447: PUSH
12448: LD_EXP 17
12452: PUSH
12453: LD_EXP 18
12457: PUSH
12458: LD_EXP 20
12462: PUSH
12463: LD_EXP 21
12467: PUSH
12468: LD_EXP 22
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PPUSH
12482: LD_INT 50
12484: PUSH
12485: EMPTY
12486: LIST
12487: PPUSH
12488: CALL_OW 72
12492: PPUSH
12493: CALL 17426 0 1
12497: PUSH
12498: LD_EXP 14
12502: PUSH
12503: LD_EXP 15
12507: PUSH
12508: LD_EXP 17
12512: PUSH
12513: LD_EXP 18
12517: PUSH
12518: LD_EXP 20
12522: PUSH
12523: LD_EXP 21
12527: PUSH
12528: LD_EXP 22
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL 17426 0 1
12546: EQUAL
12547: IFFALSE 12556
// SetAchievement ( ACH_KNIGHT ) ;
12549: LD_STRING ACH_KNIGHT
12551: PPUSH
12552: CALL_OW 543
// SaveForQuickRestart ;
12556: CALL_OW 22
// end ;
12560: LD_VAR 0 1
12564: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
12565: LD_EXP 5
12569: PUSH
12570: LD_EXP 33
12574: PPUSH
12575: CALL_OW 302
12579: AND
12580: PUSH
12581: LD_EXP 13
12585: PPUSH
12586: CALL_OW 302
12590: AND
12591: PUSH
12592: LD_EXP 13
12596: PPUSH
12597: LD_EXP 33
12601: PPUSH
12602: CALL_OW 296
12606: PUSH
12607: LD_INT 9
12609: LESS
12610: PUSH
12611: LD_INT 22
12613: PUSH
12614: LD_INT 2
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 91
12623: PUSH
12624: LD_EXP 13
12628: PUSH
12629: LD_INT 7
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 21
12639: PUSH
12640: LD_INT 3
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: PPUSH
12652: CALL_OW 69
12656: OR
12657: AND
12658: IFFALSE 12812
12660: GO 12662
12662: DISABLE
// begin ComExit ( Rolf ) ;
12663: LD_EXP 33
12667: PPUSH
12668: CALL 53043 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
12672: LD_EXP 33
12676: PPUSH
12677: LD_EXP 13
12681: PPUSH
12682: CALL_OW 172
// InGameOn ;
12686: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
12690: LD_EXP 13
12694: PPUSH
12695: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
12699: LD_EXP 33
12703: PPUSH
12704: LD_STRING DRf-Reunion-1
12706: PPUSH
12707: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
12711: LD_EXP 33
12715: PPUSH
12716: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
12720: LD_EXP 13
12724: PPUSH
12725: LD_EXP 33
12729: PPUSH
12730: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
12734: LD_EXP 33
12738: PPUSH
12739: LD_EXP 13
12743: PPUSH
12744: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
12748: LD_EXP 13
12752: PPUSH
12753: LD_STRING DH-Reunion-2
12755: PPUSH
12756: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
12760: LD_EXP 33
12764: PPUSH
12765: LD_STRING DRf-Reunion-3
12767: PPUSH
12768: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
12772: LD_EXP 13
12776: PPUSH
12777: LD_STRING DH-Reunion-4
12779: PPUSH
12780: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
12784: LD_EXP 33
12788: PPUSH
12789: LD_STRING DRf-Reunion-5
12791: PPUSH
12792: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
12796: LD_EXP 13
12800: PPUSH
12801: LD_STRING DH-Reunion-6
12803: PPUSH
12804: CALL_OW 88
// InGameOff ;
12808: CALL_OW 9
// end ;
12812: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
12813: LD_EXP 5
12817: NOT
12818: PUSH
12819: LD_INT 22
12821: PUSH
12822: LD_INT 2
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 91
12831: PUSH
12832: LD_EXP 24
12836: PUSH
12837: LD_INT 10
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 21
12847: PUSH
12848: LD_INT 3
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 69
12864: AND
12865: IFFALSE 13652
12867: GO 12869
12869: DISABLE
// begin InGameOn ;
12870: CALL_OW 8
// ComExit ( Schulz ) ;
12874: LD_EXP 24
12878: PPUSH
12879: CALL 53043 0 1
// CenterNowOnUnits ( Schulz ) ;
12883: LD_EXP 24
12887: PPUSH
12888: CALL_OW 87
// wait ( 0 0$0.3 ) ;
12892: LD_INT 10
12894: PPUSH
12895: CALL_OW 67
// DialogueOn ;
12899: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
12903: LD_EXP 24
12907: PPUSH
12908: LD_STRING DL-Def-1
12910: PPUSH
12911: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
12915: LD_EXP 24
12919: PPUSH
12920: LD_STRING DL-Def-2
12922: PPUSH
12923: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
12927: LD_EXP 24
12931: PPUSH
12932: LD_STRING DL-Def-3
12934: PPUSH
12935: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
12939: LD_EXP 25
12943: PPUSH
12944: CALL_OW 302
12948: PUSH
12949: LD_EXP 23
12953: PPUSH
12954: CALL_OW 302
12958: AND
12959: IFFALSE 13306
// begin Say ( Basim , DBs-Def-4 ) ;
12961: LD_EXP 25
12965: PPUSH
12966: LD_STRING DBs-Def-4
12968: PPUSH
12969: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
12973: LD_EXP 25
12977: PPUSH
12978: LD_STRING DBs-Def-5
12980: PPUSH
12981: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
12985: LD_EXP 23
12989: PPUSH
12990: LD_STRING DA-Def-6
12992: PPUSH
12993: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
12997: LD_EXP 25
13001: PPUSH
13002: LD_STRING DBs-Def-7
13004: PPUSH
13005: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
13009: LD_EXP 23
13013: PPUSH
13014: LD_STRING DA-Def-8
13016: PPUSH
13017: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
13021: LD_EXP 23
13025: PPUSH
13026: LD_STRING DA-Def-9
13028: PPUSH
13029: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
13033: LD_EXP 25
13037: PPUSH
13038: LD_STRING DBs-Def-10
13040: PPUSH
13041: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
13045: LD_EXP 23
13049: PPUSH
13050: LD_STRING DA-Def-11
13052: PPUSH
13053: CALL_OW 88
// if Query ( QTech ) = 1 then
13057: LD_STRING QTech
13059: PPUSH
13060: CALL_OW 97
13064: PUSH
13065: LD_INT 1
13067: EQUAL
13068: IFFALSE 13176
// begin Say ( Schulz , DL-Tech-1 ) ;
13070: LD_EXP 24
13074: PPUSH
13075: LD_STRING DL-Tech-1
13077: PPUSH
13078: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
13082: LD_EXP 24
13086: PPUSH
13087: LD_STRING DL-Tech-2
13089: PPUSH
13090: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
13094: LD_EXP 23
13098: PPUSH
13099: LD_STRING DA-Tech-3
13101: PPUSH
13102: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
13106: LD_EXP 18
13110: PPUSH
13111: LD_STRING DK-Tech-4
13113: PPUSH
13114: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
13118: LD_EXP 18
13122: PPUSH
13123: LD_STRING DK-Tech-5
13125: PPUSH
13126: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
13130: LD_EXP 25
13134: PPUSH
13135: LD_STRING DBs-Tech-6
13137: PPUSH
13138: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
13142: LD_EXP 18
13146: PPUSH
13147: LD_STRING DK-Tech-7
13149: PPUSH
13150: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
13154: LD_INT 3
13156: PPUSH
13157: LD_INT 2
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
13167: LD_STRING M7a
13169: PPUSH
13170: CALL_OW 604
// end else
13174: GO 13304
// begin Say ( Schulz , DL-Tech-a-1 ) ;
13176: LD_EXP 24
13180: PPUSH
13181: LD_STRING DL-Tech-a-1
13183: PPUSH
13184: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
13188: LD_EXP 24
13192: PPUSH
13193: LD_STRING DL-Tech-a-2
13195: PPUSH
13196: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
13200: LD_EXP 25
13204: PPUSH
13205: LD_STRING DBs-Tech-a-3
13207: PPUSH
13208: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
13212: LD_EXP 18
13216: PPUSH
13217: LD_STRING DK-Tech-a-4
13219: PPUSH
13220: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
13224: LD_EXP 18
13228: PPUSH
13229: LD_STRING DK-Tech-a-5
13231: PPUSH
13232: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
13236: LD_EXP 23
13240: PPUSH
13241: LD_STRING DA-Tech-a-6
13243: PPUSH
13244: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
13248: LD_EXP 23
13252: PPUSH
13253: LD_STRING DA-Tech-a-7
13255: PPUSH
13256: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
13260: LD_EXP 24
13264: PPUSH
13265: LD_STRING DL-Tech-a-8
13267: PPUSH
13268: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
13272: LD_EXP 23
13276: PPUSH
13277: LD_STRING DA-Tech-a-9
13279: PPUSH
13280: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13284: LD_INT 4
13286: PPUSH
13287: LD_INT 2
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
13297: LD_STRING M7b
13299: PPUSH
13300: CALL_OW 604
// end ; end else
13304: GO 13354
// if IsOk ( Basim ) then
13306: LD_EXP 25
13310: PPUSH
13311: CALL_OW 302
13315: IFFALSE 13354
// begin Say ( Basim , DBs-Def-4 ) ;
13317: LD_EXP 25
13321: PPUSH
13322: LD_STRING DBs-Def-4
13324: PPUSH
13325: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13329: LD_EXP 25
13333: PPUSH
13334: LD_STRING DBs-Def-5
13336: PPUSH
13337: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13341: LD_INT 4
13343: PPUSH
13344: LD_INT 2
13346: PPUSH
13347: LD_INT 1
13349: PPUSH
13350: CALL_OW 322
// end ; DialogueOff ;
13354: CALL_OW 7
// InGameOff ;
13358: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
13362: LD_STRING M7
13364: PPUSH
13365: CALL_OW 337
// playerInBase := true ;
13369: LD_ADDR_EXP 5
13373: PUSH
13374: LD_INT 1
13376: ST_TO_ADDR
// wait ( 0 0$30 ) ;
13377: LD_INT 1050
13379: PPUSH
13380: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13384: LD_INT 35
13386: PPUSH
13387: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) ;
13391: LD_INT 22
13393: PUSH
13394: LD_INT 2
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 50
13403: PUSH
13404: EMPTY
13405: LIST
13406: PUSH
13407: LD_INT 3
13409: PUSH
13410: LD_INT 57
13412: PUSH
13413: EMPTY
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 30
13422: PUSH
13423: LD_INT 30
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 69
13440: IFFALSE 13384
// if IsOk ( Kurt ) then
13442: LD_EXP 22
13446: PPUSH
13447: CALL_OW 302
13451: IFFALSE 13639
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
13453: LD_INT 22
13455: PUSH
13456: LD_INT 2
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 50
13465: PUSH
13466: EMPTY
13467: LIST
13468: PUSH
13469: LD_INT 3
13471: PUSH
13472: LD_INT 57
13474: PUSH
13475: EMPTY
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 30
13484: PUSH
13485: LD_INT 30
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: PUSH
13503: LD_INT 1
13505: ARRAY
13506: PPUSH
13507: CALL_OW 87
// DialogueOn ;
13511: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
13515: LD_EXP 22
13519: PPUSH
13520: LD_STRING DKs-Med-1
13522: PPUSH
13523: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
13527: LD_EXP 22
13531: PPUSH
13532: LD_STRING DKs-Med-2
13534: PPUSH
13535: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
13539: LD_EXP 24
13543: PPUSH
13544: LD_STRING DL-Med-3
13546: PPUSH
13547: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
13551: LD_EXP 24
13555: PPUSH
13556: LD_STRING DL-Med-4
13558: PPUSH
13559: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
13563: LD_EXP 22
13567: PPUSH
13568: LD_STRING DKs-Med-5
13570: PPUSH
13571: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
13575: LD_EXP 22
13579: PPUSH
13580: LD_STRING DKs-Med-6
13582: PPUSH
13583: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
13587: LD_EXP 22
13591: PPUSH
13592: LD_STRING DKs-Med-7
13594: PPUSH
13595: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
13599: LD_EXP 22
13603: PPUSH
13604: LD_STRING DKs-Med-8
13606: PPUSH
13607: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
13611: LD_EXP 24
13615: PPUSH
13616: LD_STRING DL-Med-9
13618: PPUSH
13619: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
13623: LD_EXP 24
13627: PPUSH
13628: LD_STRING DL-Med-10
13630: PPUSH
13631: CALL_OW 88
// DialogueOff ;
13635: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
13639: LD_STRING M8-
13641: PUSH
13642: LD_OWVAR 67
13646: STR
13647: PPUSH
13648: CALL_OW 337
// end ;
13652: END
// every 0 0$1 trigger playerInBase do
13653: LD_EXP 5
13657: IFFALSE 13677
13659: GO 13661
13661: DISABLE
// begin enable ;
13662: ENABLE
// missionTime := missionTime + 0 0$1 ;
13663: LD_ADDR_EXP 9
13667: PUSH
13668: LD_EXP 9
13672: PUSH
13673: LD_INT 35
13675: PLUS
13676: ST_TO_ADDR
// end ;
13677: END
// every 0 0$2 trigger playerInBase and apeDriver do
13678: LD_EXP 5
13682: PUSH
13683: LD_EXP 8
13687: AND
13688: IFFALSE 14085
13690: GO 13692
13692: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
13693: LD_STRING M7a_out
13695: PPUSH
13696: CALL_OW 337
// wait ( 0 0$2 ) ;
13700: LD_INT 70
13702: PPUSH
13703: CALL_OW 67
// DialogueOn ;
13707: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
13711: LD_INT 22
13713: PUSH
13714: LD_INT 2
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 33
13723: PUSH
13724: LD_INT 5
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: PUSH
13740: LD_INT 1
13742: ARRAY
13743: PPUSH
13744: CALL_OW 87
// if IsOk ( Mia ) then
13748: LD_EXP 27
13752: PPUSH
13753: CALL_OW 302
13757: IFFALSE 13783
// begin Say ( Mia , DMm-Apedrive-1 ) ;
13759: LD_EXP 27
13763: PPUSH
13764: LD_STRING DMm-Apedrive-1
13766: PPUSH
13767: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
13771: LD_EXP 15
13775: PPUSH
13776: LD_STRING DM-Apedrive-2
13778: PPUSH
13779: CALL_OW 88
// end ; if IsOk ( Jenna ) then
13783: LD_EXP 29
13787: PPUSH
13788: CALL_OW 302
13792: IFFALSE 14081
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
13794: LD_EXP 29
13798: PPUSH
13799: LD_STRING DJm-Apedrive-3
13801: PPUSH
13802: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
13806: LD_EXP 29
13810: PPUSH
13811: LD_STRING DJm-Apedrive-4
13813: PPUSH
13814: CALL_OW 88
// if IsOk ( Basim ) then
13818: LD_EXP 25
13822: PPUSH
13823: CALL_OW 302
13827: IFFALSE 14081
// begin Say ( Basim , DBs-Apedrive-5 ) ;
13829: LD_EXP 25
13833: PPUSH
13834: LD_STRING DBs-Apedrive-5
13836: PPUSH
13837: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
13841: LD_EXP 25
13845: PPUSH
13846: LD_STRING DBs-Apedrive-6
13848: PPUSH
13849: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
13853: LD_EXP 29
13857: PPUSH
13858: LD_STRING DJm-Apedrive-7
13860: PPUSH
13861: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
13865: LD_EXP 25
13869: PPUSH
13870: LD_STRING DBs-Apedrive-8
13872: PPUSH
13873: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
13877: LD_EXP 29
13881: PPUSH
13882: LD_STRING DJm-Apedrive-9
13884: PPUSH
13885: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
13889: LD_EXP 25
13893: PPUSH
13894: LD_STRING DBs-Apedrive-10
13896: PPUSH
13897: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
13901: LD_EXP 29
13905: PPUSH
13906: LD_STRING DJm-Apedrive-11
13908: PPUSH
13909: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
13913: LD_EXP 18
13917: PPUSH
13918: LD_STRING DK-Apedrive-12
13920: PPUSH
13921: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
13925: LD_EXP 29
13929: PPUSH
13930: LD_STRING DJm-Apedrive-13
13932: PPUSH
13933: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
13937: LD_EXP 29
13941: PPUSH
13942: LD_STRING DJm-Apedrive-14
13944: PPUSH
13945: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
13949: LD_EXP 29
13953: PPUSH
13954: LD_STRING DJm-Apedrive-15
13956: PPUSH
13957: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
13961: LD_EXP 29
13965: PPUSH
13966: LD_STRING DJm-Apedrive-16
13968: PPUSH
13969: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
13973: LD_EXP 27
13977: PPUSH
13978: LD_STRING DMm-Apedrive-17
13980: PPUSH
13981: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
13985: LD_EXP 27
13989: PPUSH
13990: LD_STRING DMm-Apedrive-18
13992: PPUSH
13993: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
13997: LD_EXP 27
14001: PPUSH
14002: LD_STRING DMm-Apedrive-19
14004: PPUSH
14005: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
14009: LD_EXP 27
14013: PPUSH
14014: LD_STRING DMm-Apedrive-20
14016: PPUSH
14017: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
14021: LD_EXP 18
14025: PPUSH
14026: LD_STRING DK-Apedrive-21
14028: PPUSH
14029: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
14033: LD_EXP 18
14037: PPUSH
14038: LD_STRING DK-Apedrive-22
14040: PPUSH
14041: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
14045: LD_EXP 13
14049: PPUSH
14050: LD_STRING DH-Apedrive-23
14052: PPUSH
14053: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
14057: LD_EXP 26
14061: PPUSH
14062: LD_STRING DLt-Apedrive-24
14064: PPUSH
14065: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
14069: LD_EXP 26
14073: PPUSH
14074: LD_STRING DLt-Apedrive-25
14076: PPUSH
14077: CALL_OW 88
// end ; end ; DialogueOff ;
14081: CALL_OW 7
// end ;
14085: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
14086: LD_EXP 5
14090: PUSH
14091: LD_EXP 6
14095: AND
14096: IFFALSE 14108
14098: GO 14100
14100: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
14101: LD_STRING M7b_out
14103: PPUSH
14104: CALL_OW 337
14108: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
14109: LD_EXP 5
14113: PUSH
14114: LD_INT 22
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: LD_INT 3
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 3
14136: PUSH
14137: LD_INT 58
14139: PUSH
14140: EMPTY
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: LIST
14151: PPUSH
14152: CALL_OW 69
14156: AND
14157: PUSH
14158: LD_EXP 13
14162: PPUSH
14163: CALL_OW 302
14167: AND
14168: PUSH
14169: LD_EXP 24
14173: PPUSH
14174: CALL_OW 302
14178: AND
14179: IFFALSE 14352
14181: GO 14183
14183: DISABLE
// begin DialogueOn ;
14184: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
14188: LD_EXP 24
14192: PPUSH
14193: LD_STRING DL-Mort-1
14195: PPUSH
14196: CALL_OW 88
// if IsOk ( Markov ) then
14200: LD_EXP 20
14204: PPUSH
14205: CALL_OW 302
14209: IFFALSE 14262
// begin Say ( Heike , DH-Mort-2 ) ;
14211: LD_EXP 13
14215: PPUSH
14216: LD_STRING DH-Mort-2
14218: PPUSH
14219: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
14223: LD_EXP 20
14227: PPUSH
14228: LD_STRING DMar-Mort-3
14230: PPUSH
14231: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
14235: LD_EXP 20
14239: PPUSH
14240: LD_STRING DMar-Mort-4
14242: PPUSH
14243: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14247: LD_INT 88
14249: PPUSH
14250: LD_INT 2
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: CALL_OW 322
// end else
14260: GO 14348
// if IsOk ( Olaf ) then
14262: LD_EXP 21
14266: PPUSH
14267: CALL_OW 302
14271: IFFALSE 14324
// begin Say ( Heike , DH-Mort-a-2 ) ;
14273: LD_EXP 13
14277: PPUSH
14278: LD_STRING DH-Mort-a-2
14280: PPUSH
14281: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
14285: LD_EXP 21
14289: PPUSH
14290: LD_STRING DO-Mort-a-3
14292: PPUSH
14293: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
14297: LD_EXP 21
14301: PPUSH
14302: LD_STRING DO-Mort-a-4
14304: PPUSH
14305: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14309: LD_INT 88
14311: PPUSH
14312: LD_INT 2
14314: PPUSH
14315: LD_INT 1
14317: PPUSH
14318: CALL_OW 322
// end else
14322: GO 14348
// begin Say ( Heike , DH-Mort-a-5 ) ;
14324: LD_EXP 13
14328: PPUSH
14329: LD_STRING DH-Mort-a-5
14331: PPUSH
14332: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
14336: LD_EXP 13
14340: PPUSH
14341: LD_STRING DH-Mort-a-6
14343: PPUSH
14344: CALL_OW 88
// end ; DialogueOff ;
14348: CALL_OW 7
// end ;
14352: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
14353: LD_EXP 18
14357: PPUSH
14358: CALL_OW 256
14362: PUSH
14363: LD_INT 10
14365: LESS
14366: IFFALSE 14468
14368: GO 14370
14370: DISABLE
// begin DialogueOn ;
14371: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14375: LD_EXP 18
14379: PPUSH
14380: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
14384: LD_EXP 18
14388: PPUSH
14389: LD_STRING DK-Death-1
14391: PPUSH
14392: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
14396: LD_EXP 18
14400: PPUSH
14401: LD_STRING DK-Death-2
14403: PPUSH
14404: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
14408: LD_EXP 18
14412: PPUSH
14413: LD_STRING DK-Death-3
14415: PPUSH
14416: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
14420: LD_EXP 13
14424: PPUSH
14425: LD_STRING DH-Death-4
14427: PPUSH
14428: CALL_OW 88
// if IsOk ( Markov ) then
14432: LD_EXP 20
14436: PPUSH
14437: CALL_OW 302
14441: IFFALSE 14455
// Say ( Markov , DMar-Death-5 ) ;
14443: LD_EXP 20
14447: PPUSH
14448: LD_STRING DMar-Death-5
14450: PPUSH
14451: CALL_OW 88
// DialogueOff ;
14455: CALL_OW 7
// KillUnit ( Kaia ) ;
14459: LD_EXP 18
14463: PPUSH
14464: CALL_OW 66
// end ;
14468: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib ;
14469: LD_EXP 10
14473: PUSH
14474: LD_INT 81
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 50
14486: PUSH
14487: EMPTY
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PPUSH
14494: CALL_OW 69
14498: NOT
14499: AND
14500: IFFALSE 15213
14502: GO 14504
14504: DISABLE
14505: LD_INT 0
14507: PPUSH
14508: PPUSH
// begin InGameOn ;
14509: CALL_OW 8
// DialogueOn ;
14513: CALL_OW 6
// if time09 + time09c + tick < 80 80$00 then
14517: LD_EXP 3
14521: PUSH
14522: LD_EXP 4
14526: PLUS
14527: PUSH
14528: LD_OWVAR 1
14532: PLUS
14533: PUSH
14534: LD_INT 168000
14536: LESS
14537: IFFALSE 14546
// SetAchievement ( ACH_HSPEED_9 ) ;
14539: LD_STRING ACH_HSPEED_9
14541: PPUSH
14542: CALL_OW 543
// CenterOnNow ( Schulz ) ;
14546: LD_EXP 24
14550: PPUSH
14551: CALL 56598 0 1
// dwait ( 0 0$0.3 ) ;
14555: LD_INT 10
14557: PPUSH
14558: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
14562: LD_EXP 24
14566: PPUSH
14567: LD_STRING DL-End-1
14569: PPUSH
14570: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
14574: LD_EXP 13
14578: PPUSH
14579: LD_STRING DH-End-2
14581: PPUSH
14582: CALL_OW 88
// if IsOk ( Kaia ) then
14586: LD_EXP 18
14590: PPUSH
14591: CALL_OW 302
14595: IFFALSE 14657
// begin SaveCharacters ( Kaia , 09_Kaia ) ;
14597: LD_EXP 18
14601: PPUSH
14602: LD_STRING 09_Kaia
14604: PPUSH
14605: CALL_OW 38
// Say ( Kaia , DK-End-a-3 ) ;
14609: LD_EXP 18
14613: PPUSH
14614: LD_STRING DK-End-a-3
14616: PPUSH
14617: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
14621: LD_EXP 18
14625: PPUSH
14626: LD_STRING DK-End-a-4
14628: PPUSH
14629: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
14633: LD_EXP 24
14637: PPUSH
14638: LD_STRING DL-End-a-5
14640: PPUSH
14641: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
14645: LD_EXP 24
14649: PPUSH
14650: LD_STRING DL-End-a-6
14652: PPUSH
14653: CALL_OW 88
// end ; SaveCharacters ( Heike , 09_Heike ) ;
14657: LD_EXP 13
14661: PPUSH
14662: LD_STRING 09_Heike
14664: PPUSH
14665: CALL_OW 38
// SaveCharacters ( Schulz , 09_Schulz ) ;
14669: LD_EXP 24
14673: PPUSH
14674: LD_STRING 09_Schulz
14676: PPUSH
14677: CALL_OW 38
// if IsOk ( Basim ) then
14681: LD_EXP 25
14685: PPUSH
14686: CALL_OW 302
14690: IFFALSE 14704
// SaveCharacters ( Basim , 09_Basim ) ;
14692: LD_EXP 25
14696: PPUSH
14697: LD_STRING 09_Basim
14699: PPUSH
14700: CALL_OW 38
// if IsOk ( Givi ) then
14704: LD_EXP 14
14708: PPUSH
14709: CALL_OW 302
14713: IFFALSE 14727
// SaveCharacters ( Givi , 09_Givi ) ;
14715: LD_EXP 14
14719: PPUSH
14720: LD_STRING 09_Givi
14722: PPUSH
14723: CALL_OW 38
// if IsOk ( Mike ) then
14727: LD_EXP 15
14731: PPUSH
14732: CALL_OW 302
14736: IFFALSE 14750
// SaveCharacters ( Mike , 09_Mike ) ;
14738: LD_EXP 15
14742: PPUSH
14743: LD_STRING 09_Mike
14745: PPUSH
14746: CALL_OW 38
// if IsOk ( Ibrahim ) then
14750: LD_EXP 16
14754: PPUSH
14755: CALL_OW 302
14759: IFFALSE 14773
// SaveCharacters ( Ibrahim , 09_Ibrahim ) ;
14761: LD_EXP 16
14765: PPUSH
14766: LD_STRING 09_Ibrahim
14768: PPUSH
14769: CALL_OW 38
// if IsOk ( Kamil ) then
14773: LD_EXP 17
14777: PPUSH
14778: CALL_OW 302
14782: IFFALSE 14796
// SaveCharacters ( Kamil , 09_Kamil ) ;
14784: LD_EXP 17
14788: PPUSH
14789: LD_STRING 09_Kamil
14791: PPUSH
14792: CALL_OW 38
// if IsOk ( Sophia ) then
14796: LD_EXP 19
14800: PPUSH
14801: CALL_OW 302
14805: IFFALSE 14819
// SaveCharacters ( Sophia , 09_Sophia ) ;
14807: LD_EXP 19
14811: PPUSH
14812: LD_STRING 09_Sophia
14814: PPUSH
14815: CALL_OW 38
// if IsOk ( Markov ) then
14819: LD_EXP 20
14823: PPUSH
14824: CALL_OW 302
14828: IFFALSE 14842
// SaveCharacters ( Markov , 09_Markov ) ;
14830: LD_EXP 20
14834: PPUSH
14835: LD_STRING 09_Markov
14837: PPUSH
14838: CALL_OW 38
// if IsOk ( Olaf ) then
14842: LD_EXP 21
14846: PPUSH
14847: CALL_OW 302
14851: IFFALSE 14865
// SaveCharacters ( Olaf , 09_Olaf ) ;
14853: LD_EXP 21
14857: PPUSH
14858: LD_STRING 09_Olaf
14860: PPUSH
14861: CALL_OW 38
// if IsOk ( Kurt ) then
14865: LD_EXP 22
14869: PPUSH
14870: CALL_OW 302
14874: IFFALSE 14888
// SaveCharacters ( Kurt , 09_Kurt ) ;
14876: LD_EXP 22
14880: PPUSH
14881: LD_STRING 09_Kurt
14883: PPUSH
14884: CALL_OW 38
// if IsOk ( Aviradze ) then
14888: LD_EXP 23
14892: PPUSH
14893: CALL_OW 302
14897: IFFALSE 14911
// SaveCharacters ( Aviradze , 09_Aviradze ) ;
14899: LD_EXP 23
14903: PPUSH
14904: LD_STRING 09_Aviradze
14906: PPUSH
14907: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09_heikeSecondSquad ) ;
14911: LD_EXP 30
14915: PPUSH
14916: LD_INT 50
14918: PUSH
14919: EMPTY
14920: LIST
14921: PPUSH
14922: CALL_OW 72
14926: PPUSH
14927: LD_STRING 09_heikeSecondSquad
14929: PPUSH
14930: CALL_OW 38
// sib := 0 ;
14934: LD_ADDR_VAR 0 2
14938: PUSH
14939: LD_INT 0
14941: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
14942: LD_ADDR_VAR 0 1
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 2
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 2
14959: PUSH
14960: LD_INT 30
14962: PUSH
14963: LD_INT 0
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 30
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: LIST
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PPUSH
14989: CALL_OW 69
14993: PUSH
14994: FOR_IN
14995: IFFALSE 15028
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
14997: LD_ADDR_VAR 0 2
15001: PUSH
15002: LD_VAR 0 2
15006: PUSH
15007: LD_VAR 0 1
15011: PPUSH
15012: CALL_OW 274
15016: PPUSH
15017: LD_INT 3
15019: PPUSH
15020: CALL_OW 275
15024: PLUS
15025: ST_TO_ADDR
15026: GO 14994
15028: POP
15029: POP
// if sib >= sibToCollect then
15030: LD_VAR 0 2
15034: PUSH
15035: LD_EXP 7
15039: GREATEREQUAL
15040: IFFALSE 15054
// AddMedal ( med1 , 1 ) else
15042: LD_STRING med1
15044: PPUSH
15045: LD_INT 1
15047: PPUSH
15048: CALL_OW 101
15052: GO 15065
// AddMedal ( med1 , - 1 ) ;
15054: LD_STRING med1
15056: PPUSH
15057: LD_INT 1
15059: NEG
15060: PPUSH
15061: CALL_OW 101
// if apeDriver or kamikazeTrained then
15065: LD_EXP 8
15069: PUSH
15070: LD_EXP 6
15074: OR
15075: IFFALSE 15089
// AddMedal ( med2 , 1 ) else
15077: LD_STRING med2
15079: PPUSH
15080: LD_INT 1
15082: PPUSH
15083: CALL_OW 101
15087: GO 15100
// AddMedal ( med2 , - 1 ) ;
15089: LD_STRING med2
15091: PPUSH
15092: LD_INT 1
15094: NEG
15095: PPUSH
15096: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
15100: LD_EXP 14
15104: PUSH
15105: LD_EXP 15
15109: PUSH
15110: LD_EXP 16
15114: PUSH
15115: LD_EXP 17
15119: PUSH
15120: LD_EXP 18
15124: PUSH
15125: LD_EXP 19
15129: PUSH
15130: LD_EXP 20
15134: PUSH
15135: LD_EXP 21
15139: PUSH
15140: LD_EXP 22
15144: PUSH
15145: LD_EXP 23
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: PPUSH
15162: LD_INT 50
15164: PUSH
15165: EMPTY
15166: LIST
15167: PPUSH
15168: CALL_OW 72
15172: NOT
15173: IFFALSE 15188
// AddMedal ( med3 , - 1 ) else
15175: LD_STRING med3
15177: PPUSH
15178: LD_INT 1
15180: NEG
15181: PPUSH
15182: CALL_OW 101
15186: GO 15198
// AddMedal ( med3 , 1 ) ;
15188: LD_STRING med3
15190: PPUSH
15191: LD_INT 1
15193: PPUSH
15194: CALL_OW 101
// GiveMedals ( MAIN ) ;
15198: LD_STRING MAIN
15200: PPUSH
15201: CALL_OW 102
// YouWin ;
15205: CALL_OW 103
// DialogueOff ;
15209: CALL_OW 7
// end ; end_of_file
15213: PPOPN 2
15215: END
// every 0 0$25 + 0 0$20 trigger playerInBase do var i , tmp ;
15216: LD_EXP 5
15220: IFFALSE 15321
15222: GO 15224
15224: DISABLE
15225: LD_INT 0
15227: PPUSH
15228: PPUSH
// begin enable ;
15229: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
15230: LD_ADDR_VAR 0 2
15234: PUSH
15235: LD_INT 9
15237: PUSH
15238: LD_INT 10
15240: PUSH
15241: LD_INT 11
15243: PUSH
15244: LD_INT 12
15246: PUSH
15247: LD_INT 13
15249: PUSH
15250: LD_INT 14
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
15261: LD_ADDR_VAR 0 1
15265: PUSH
15266: LD_VAR 0 2
15270: PUSH
15271: LD_INT 1
15273: PPUSH
15274: LD_INT 6
15276: PPUSH
15277: CALL_OW 12
15281: ARRAY
15282: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 16 then
15283: LD_VAR 0 1
15287: PPUSH
15288: CALL_OW 435
15292: PUSH
15293: LD_INT 16
15295: LESS
15296: IFFALSE 15321
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
15298: LD_INT 1
15300: PPUSH
15301: LD_INT 5
15303: PPUSH
15304: CALL_OW 12
15308: PPUSH
15309: LD_VAR 0 1
15313: PPUSH
15314: LD_INT 1
15316: PPUSH
15317: CALL_OW 55
// end ; end_of_file
15321: PPOPN 2
15323: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15324: LD_INT 0
15326: PPUSH
15327: PPUSH
// if exist_mode then
15328: LD_VAR 0 2
15332: IFFALSE 15357
// unit := CreateCharacter ( prefix & ident ) else
15334: LD_ADDR_VAR 0 5
15338: PUSH
15339: LD_VAR 0 3
15343: PUSH
15344: LD_VAR 0 1
15348: STR
15349: PPUSH
15350: CALL_OW 34
15354: ST_TO_ADDR
15355: GO 15372
// unit := NewCharacter ( ident ) ;
15357: LD_ADDR_VAR 0 5
15361: PUSH
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL_OW 25
15371: ST_TO_ADDR
// result := unit ;
15372: LD_ADDR_VAR 0 4
15376: PUSH
15377: LD_VAR 0 5
15381: ST_TO_ADDR
// end ;
15382: LD_VAR 0 4
15386: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15387: LD_INT 0
15389: PPUSH
15390: PPUSH
// if not side or not nation then
15391: LD_VAR 0 1
15395: NOT
15396: PUSH
15397: LD_VAR 0 2
15401: NOT
15402: OR
15403: IFFALSE 15407
// exit ;
15405: GO 16175
// case nation of nation_american :
15407: LD_VAR 0 2
15411: PUSH
15412: LD_INT 1
15414: DOUBLE
15415: EQUAL
15416: IFTRUE 15420
15418: GO 15634
15420: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15421: LD_ADDR_VAR 0 4
15425: PUSH
15426: LD_INT 35
15428: PUSH
15429: LD_INT 45
15431: PUSH
15432: LD_INT 46
15434: PUSH
15435: LD_INT 47
15437: PUSH
15438: LD_INT 82
15440: PUSH
15441: LD_INT 83
15443: PUSH
15444: LD_INT 84
15446: PUSH
15447: LD_INT 85
15449: PUSH
15450: LD_INT 86
15452: PUSH
15453: LD_INT 1
15455: PUSH
15456: LD_INT 2
15458: PUSH
15459: LD_INT 6
15461: PUSH
15462: LD_INT 15
15464: PUSH
15465: LD_INT 16
15467: PUSH
15468: LD_INT 7
15470: PUSH
15471: LD_INT 12
15473: PUSH
15474: LD_INT 13
15476: PUSH
15477: LD_INT 10
15479: PUSH
15480: LD_INT 14
15482: PUSH
15483: LD_INT 20
15485: PUSH
15486: LD_INT 21
15488: PUSH
15489: LD_INT 22
15491: PUSH
15492: LD_INT 25
15494: PUSH
15495: LD_INT 32
15497: PUSH
15498: LD_INT 27
15500: PUSH
15501: LD_INT 36
15503: PUSH
15504: LD_INT 69
15506: PUSH
15507: LD_INT 39
15509: PUSH
15510: LD_INT 34
15512: PUSH
15513: LD_INT 40
15515: PUSH
15516: LD_INT 48
15518: PUSH
15519: LD_INT 49
15521: PUSH
15522: LD_INT 50
15524: PUSH
15525: LD_INT 51
15527: PUSH
15528: LD_INT 52
15530: PUSH
15531: LD_INT 53
15533: PUSH
15534: LD_INT 54
15536: PUSH
15537: LD_INT 55
15539: PUSH
15540: LD_INT 56
15542: PUSH
15543: LD_INT 57
15545: PUSH
15546: LD_INT 58
15548: PUSH
15549: LD_INT 59
15551: PUSH
15552: LD_INT 60
15554: PUSH
15555: LD_INT 61
15557: PUSH
15558: LD_INT 62
15560: PUSH
15561: LD_INT 80
15563: PUSH
15564: LD_INT 82
15566: PUSH
15567: LD_INT 83
15569: PUSH
15570: LD_INT 84
15572: PUSH
15573: LD_INT 85
15575: PUSH
15576: LD_INT 86
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: ST_TO_ADDR
15632: GO 16099
15634: LD_INT 2
15636: DOUBLE
15637: EQUAL
15638: IFTRUE 15642
15640: GO 15868
15642: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15643: LD_ADDR_VAR 0 4
15647: PUSH
15648: LD_INT 35
15650: PUSH
15651: LD_INT 45
15653: PUSH
15654: LD_INT 46
15656: PUSH
15657: LD_INT 47
15659: PUSH
15660: LD_INT 82
15662: PUSH
15663: LD_INT 83
15665: PUSH
15666: LD_INT 84
15668: PUSH
15669: LD_INT 85
15671: PUSH
15672: LD_INT 87
15674: PUSH
15675: LD_INT 70
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: LD_INT 11
15683: PUSH
15684: LD_INT 3
15686: PUSH
15687: LD_INT 4
15689: PUSH
15690: LD_INT 5
15692: PUSH
15693: LD_INT 6
15695: PUSH
15696: LD_INT 15
15698: PUSH
15699: LD_INT 18
15701: PUSH
15702: LD_INT 7
15704: PUSH
15705: LD_INT 17
15707: PUSH
15708: LD_INT 8
15710: PUSH
15711: LD_INT 20
15713: PUSH
15714: LD_INT 21
15716: PUSH
15717: LD_INT 22
15719: PUSH
15720: LD_INT 72
15722: PUSH
15723: LD_INT 26
15725: PUSH
15726: LD_INT 69
15728: PUSH
15729: LD_INT 39
15731: PUSH
15732: LD_INT 40
15734: PUSH
15735: LD_INT 41
15737: PUSH
15738: LD_INT 42
15740: PUSH
15741: LD_INT 43
15743: PUSH
15744: LD_INT 48
15746: PUSH
15747: LD_INT 49
15749: PUSH
15750: LD_INT 50
15752: PUSH
15753: LD_INT 51
15755: PUSH
15756: LD_INT 52
15758: PUSH
15759: LD_INT 53
15761: PUSH
15762: LD_INT 54
15764: PUSH
15765: LD_INT 55
15767: PUSH
15768: LD_INT 56
15770: PUSH
15771: LD_INT 60
15773: PUSH
15774: LD_INT 61
15776: PUSH
15777: LD_INT 62
15779: PUSH
15780: LD_INT 66
15782: PUSH
15783: LD_INT 67
15785: PUSH
15786: LD_INT 68
15788: PUSH
15789: LD_INT 81
15791: PUSH
15792: LD_INT 82
15794: PUSH
15795: LD_INT 83
15797: PUSH
15798: LD_INT 84
15800: PUSH
15801: LD_INT 85
15803: PUSH
15804: LD_INT 87
15806: PUSH
15807: LD_INT 88
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: ST_TO_ADDR
15866: GO 16099
15868: LD_INT 3
15870: DOUBLE
15871: EQUAL
15872: IFTRUE 15876
15874: GO 16098
15876: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15877: LD_ADDR_VAR 0 4
15881: PUSH
15882: LD_INT 46
15884: PUSH
15885: LD_INT 47
15887: PUSH
15888: LD_INT 1
15890: PUSH
15891: LD_INT 2
15893: PUSH
15894: LD_INT 82
15896: PUSH
15897: LD_INT 83
15899: PUSH
15900: LD_INT 84
15902: PUSH
15903: LD_INT 85
15905: PUSH
15906: LD_INT 86
15908: PUSH
15909: LD_INT 11
15911: PUSH
15912: LD_INT 9
15914: PUSH
15915: LD_INT 20
15917: PUSH
15918: LD_INT 19
15920: PUSH
15921: LD_INT 21
15923: PUSH
15924: LD_INT 24
15926: PUSH
15927: LD_INT 22
15929: PUSH
15930: LD_INT 25
15932: PUSH
15933: LD_INT 28
15935: PUSH
15936: LD_INT 29
15938: PUSH
15939: LD_INT 30
15941: PUSH
15942: LD_INT 31
15944: PUSH
15945: LD_INT 37
15947: PUSH
15948: LD_INT 38
15950: PUSH
15951: LD_INT 32
15953: PUSH
15954: LD_INT 27
15956: PUSH
15957: LD_INT 33
15959: PUSH
15960: LD_INT 69
15962: PUSH
15963: LD_INT 39
15965: PUSH
15966: LD_INT 34
15968: PUSH
15969: LD_INT 40
15971: PUSH
15972: LD_INT 71
15974: PUSH
15975: LD_INT 23
15977: PUSH
15978: LD_INT 44
15980: PUSH
15981: LD_INT 48
15983: PUSH
15984: LD_INT 49
15986: PUSH
15987: LD_INT 50
15989: PUSH
15990: LD_INT 51
15992: PUSH
15993: LD_INT 52
15995: PUSH
15996: LD_INT 53
15998: PUSH
15999: LD_INT 54
16001: PUSH
16002: LD_INT 55
16004: PUSH
16005: LD_INT 56
16007: PUSH
16008: LD_INT 57
16010: PUSH
16011: LD_INT 58
16013: PUSH
16014: LD_INT 59
16016: PUSH
16017: LD_INT 63
16019: PUSH
16020: LD_INT 64
16022: PUSH
16023: LD_INT 65
16025: PUSH
16026: LD_INT 82
16028: PUSH
16029: LD_INT 83
16031: PUSH
16032: LD_INT 84
16034: PUSH
16035: LD_INT 85
16037: PUSH
16038: LD_INT 86
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: ST_TO_ADDR
16096: GO 16099
16098: POP
// if state > - 1 and state < 3 then
16099: LD_VAR 0 3
16103: PUSH
16104: LD_INT 1
16106: NEG
16107: GREATER
16108: PUSH
16109: LD_VAR 0 3
16113: PUSH
16114: LD_INT 3
16116: LESS
16117: AND
16118: IFFALSE 16175
// for i in result do
16120: LD_ADDR_VAR 0 5
16124: PUSH
16125: LD_VAR 0 4
16129: PUSH
16130: FOR_IN
16131: IFFALSE 16173
// if GetTech ( i , side ) <> state then
16133: LD_VAR 0 5
16137: PPUSH
16138: LD_VAR 0 1
16142: PPUSH
16143: CALL_OW 321
16147: PUSH
16148: LD_VAR 0 3
16152: NONEQUAL
16153: IFFALSE 16171
// result := result diff i ;
16155: LD_ADDR_VAR 0 4
16159: PUSH
16160: LD_VAR 0 4
16164: PUSH
16165: LD_VAR 0 5
16169: DIFF
16170: ST_TO_ADDR
16171: GO 16130
16173: POP
16174: POP
// end ;
16175: LD_VAR 0 4
16179: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16180: LD_INT 0
16182: PPUSH
16183: PPUSH
16184: PPUSH
// result := true ;
16185: LD_ADDR_VAR 0 3
16189: PUSH
16190: LD_INT 1
16192: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16193: LD_ADDR_VAR 0 5
16197: PUSH
16198: LD_VAR 0 2
16202: PPUSH
16203: CALL_OW 480
16207: ST_TO_ADDR
// if not tmp then
16208: LD_VAR 0 5
16212: NOT
16213: IFFALSE 16217
// exit ;
16215: GO 16266
// for i in tmp do
16217: LD_ADDR_VAR 0 4
16221: PUSH
16222: LD_VAR 0 5
16226: PUSH
16227: FOR_IN
16228: IFFALSE 16264
// if GetTech ( i , side ) <> state_researched then
16230: LD_VAR 0 4
16234: PPUSH
16235: LD_VAR 0 1
16239: PPUSH
16240: CALL_OW 321
16244: PUSH
16245: LD_INT 2
16247: NONEQUAL
16248: IFFALSE 16262
// begin result := false ;
16250: LD_ADDR_VAR 0 3
16254: PUSH
16255: LD_INT 0
16257: ST_TO_ADDR
// exit ;
16258: POP
16259: POP
16260: GO 16266
// end ;
16262: GO 16227
16264: POP
16265: POP
// end ;
16266: LD_VAR 0 3
16270: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16271: LD_INT 0
16273: PPUSH
16274: PPUSH
16275: PPUSH
16276: PPUSH
16277: PPUSH
16278: PPUSH
16279: PPUSH
16280: PPUSH
16281: PPUSH
16282: PPUSH
16283: PPUSH
16284: PPUSH
16285: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16286: LD_VAR 0 1
16290: NOT
16291: PUSH
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 257
16301: PUSH
16302: LD_INT 9
16304: NONEQUAL
16305: OR
16306: IFFALSE 16310
// exit ;
16308: GO 16883
// side := GetSide ( unit ) ;
16310: LD_ADDR_VAR 0 9
16314: PUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: CALL_OW 255
16324: ST_TO_ADDR
// tech_space := tech_spacanom ;
16325: LD_ADDR_VAR 0 12
16329: PUSH
16330: LD_INT 29
16332: ST_TO_ADDR
// tech_time := tech_taurad ;
16333: LD_ADDR_VAR 0 13
16337: PUSH
16338: LD_INT 28
16340: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16341: LD_ADDR_VAR 0 11
16345: PUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 310
16355: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16356: LD_VAR 0 11
16360: PPUSH
16361: CALL_OW 247
16365: PUSH
16366: LD_INT 2
16368: EQUAL
16369: IFFALSE 16373
// exit ;
16371: GO 16883
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16373: LD_ADDR_VAR 0 8
16377: PUSH
16378: LD_INT 81
16380: PUSH
16381: LD_VAR 0 9
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 3
16392: PUSH
16393: LD_INT 21
16395: PUSH
16396: LD_INT 3
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PPUSH
16411: CALL_OW 69
16415: ST_TO_ADDR
// if not tmp then
16416: LD_VAR 0 8
16420: NOT
16421: IFFALSE 16425
// exit ;
16423: GO 16883
// if in_unit then
16425: LD_VAR 0 11
16429: IFFALSE 16453
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16431: LD_ADDR_VAR 0 10
16435: PUSH
16436: LD_VAR 0 8
16440: PPUSH
16441: LD_VAR 0 11
16445: PPUSH
16446: CALL_OW 74
16450: ST_TO_ADDR
16451: GO 16473
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16453: LD_ADDR_VAR 0 10
16457: PUSH
16458: LD_VAR 0 8
16462: PPUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 74
16472: ST_TO_ADDR
// if not enemy then
16473: LD_VAR 0 10
16477: NOT
16478: IFFALSE 16482
// exit ;
16480: GO 16883
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16482: LD_VAR 0 11
16486: PUSH
16487: LD_VAR 0 11
16491: PPUSH
16492: LD_VAR 0 10
16496: PPUSH
16497: CALL_OW 296
16501: PUSH
16502: LD_INT 13
16504: GREATER
16505: AND
16506: PUSH
16507: LD_VAR 0 1
16511: PPUSH
16512: LD_VAR 0 10
16516: PPUSH
16517: CALL_OW 296
16521: PUSH
16522: LD_INT 12
16524: GREATER
16525: OR
16526: IFFALSE 16530
// exit ;
16528: GO 16883
// missile := [ 1 ] ;
16530: LD_ADDR_VAR 0 14
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16541: LD_VAR 0 9
16545: PPUSH
16546: LD_VAR 0 12
16550: PPUSH
16551: CALL_OW 325
16555: IFFALSE 16584
// missile := Replace ( missile , missile + 1 , 2 ) ;
16557: LD_ADDR_VAR 0 14
16561: PUSH
16562: LD_VAR 0 14
16566: PPUSH
16567: LD_VAR 0 14
16571: PUSH
16572: LD_INT 1
16574: PLUS
16575: PPUSH
16576: LD_INT 2
16578: PPUSH
16579: CALL_OW 1
16583: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16584: LD_VAR 0 9
16588: PPUSH
16589: LD_VAR 0 13
16593: PPUSH
16594: CALL_OW 325
16598: PUSH
16599: LD_VAR 0 10
16603: PPUSH
16604: CALL_OW 255
16608: PPUSH
16609: LD_VAR 0 13
16613: PPUSH
16614: CALL_OW 325
16618: NOT
16619: AND
16620: IFFALSE 16649
// missile := Replace ( missile , missile + 1 , 3 ) ;
16622: LD_ADDR_VAR 0 14
16626: PUSH
16627: LD_VAR 0 14
16631: PPUSH
16632: LD_VAR 0 14
16636: PUSH
16637: LD_INT 1
16639: PLUS
16640: PPUSH
16641: LD_INT 3
16643: PPUSH
16644: CALL_OW 1
16648: ST_TO_ADDR
// if missile < 2 then
16649: LD_VAR 0 14
16653: PUSH
16654: LD_INT 2
16656: LESS
16657: IFFALSE 16661
// exit ;
16659: GO 16883
// x := GetX ( enemy ) ;
16661: LD_ADDR_VAR 0 4
16665: PUSH
16666: LD_VAR 0 10
16670: PPUSH
16671: CALL_OW 250
16675: ST_TO_ADDR
// y := GetY ( enemy ) ;
16676: LD_ADDR_VAR 0 5
16680: PUSH
16681: LD_VAR 0 10
16685: PPUSH
16686: CALL_OW 251
16690: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16691: LD_ADDR_VAR 0 6
16695: PUSH
16696: LD_VAR 0 4
16700: PUSH
16701: LD_INT 1
16703: NEG
16704: PPUSH
16705: LD_INT 1
16707: PPUSH
16708: CALL_OW 12
16712: PLUS
16713: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16714: LD_ADDR_VAR 0 7
16718: PUSH
16719: LD_VAR 0 5
16723: PUSH
16724: LD_INT 1
16726: NEG
16727: PPUSH
16728: LD_INT 1
16730: PPUSH
16731: CALL_OW 12
16735: PLUS
16736: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16737: LD_VAR 0 6
16741: PPUSH
16742: LD_VAR 0 7
16746: PPUSH
16747: CALL_OW 488
16751: NOT
16752: IFFALSE 16774
// begin _x := x ;
16754: LD_ADDR_VAR 0 6
16758: PUSH
16759: LD_VAR 0 4
16763: ST_TO_ADDR
// _y := y ;
16764: LD_ADDR_VAR 0 7
16768: PUSH
16769: LD_VAR 0 5
16773: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16774: LD_ADDR_VAR 0 3
16778: PUSH
16779: LD_INT 1
16781: PPUSH
16782: LD_VAR 0 14
16786: PPUSH
16787: CALL_OW 12
16791: ST_TO_ADDR
// case i of 1 :
16792: LD_VAR 0 3
16796: PUSH
16797: LD_INT 1
16799: DOUBLE
16800: EQUAL
16801: IFTRUE 16805
16803: GO 16822
16805: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16806: LD_VAR 0 1
16810: PPUSH
16811: LD_VAR 0 10
16815: PPUSH
16816: CALL_OW 115
16820: GO 16883
16822: LD_INT 2
16824: DOUBLE
16825: EQUAL
16826: IFTRUE 16830
16828: GO 16852
16830: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16831: LD_VAR 0 1
16835: PPUSH
16836: LD_VAR 0 6
16840: PPUSH
16841: LD_VAR 0 7
16845: PPUSH
16846: CALL_OW 153
16850: GO 16883
16852: LD_INT 3
16854: DOUBLE
16855: EQUAL
16856: IFTRUE 16860
16858: GO 16882
16860: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16861: LD_VAR 0 1
16865: PPUSH
16866: LD_VAR 0 6
16870: PPUSH
16871: LD_VAR 0 7
16875: PPUSH
16876: CALL_OW 154
16880: GO 16883
16882: POP
// end ;
16883: LD_VAR 0 2
16887: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16888: LD_INT 0
16890: PPUSH
16891: PPUSH
16892: PPUSH
16893: PPUSH
16894: PPUSH
16895: PPUSH
// if not unit or not building then
16896: LD_VAR 0 1
16900: NOT
16901: PUSH
16902: LD_VAR 0 2
16906: NOT
16907: OR
16908: IFFALSE 16912
// exit ;
16910: GO 17070
// x := GetX ( building ) ;
16912: LD_ADDR_VAR 0 5
16916: PUSH
16917: LD_VAR 0 2
16921: PPUSH
16922: CALL_OW 250
16926: ST_TO_ADDR
// y := GetY ( building ) ;
16927: LD_ADDR_VAR 0 6
16931: PUSH
16932: LD_VAR 0 2
16936: PPUSH
16937: CALL_OW 251
16941: ST_TO_ADDR
// for i = 0 to 5 do
16942: LD_ADDR_VAR 0 4
16946: PUSH
16947: DOUBLE
16948: LD_INT 0
16950: DEC
16951: ST_TO_ADDR
16952: LD_INT 5
16954: PUSH
16955: FOR_TO
16956: IFFALSE 17068
// begin _x := ShiftX ( x , i , 3 ) ;
16958: LD_ADDR_VAR 0 7
16962: PUSH
16963: LD_VAR 0 5
16967: PPUSH
16968: LD_VAR 0 4
16972: PPUSH
16973: LD_INT 3
16975: PPUSH
16976: CALL_OW 272
16980: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16981: LD_ADDR_VAR 0 8
16985: PUSH
16986: LD_VAR 0 6
16990: PPUSH
16991: LD_VAR 0 4
16995: PPUSH
16996: LD_INT 3
16998: PPUSH
16999: CALL_OW 273
17003: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17004: LD_VAR 0 7
17008: PPUSH
17009: LD_VAR 0 8
17013: PPUSH
17014: CALL_OW 488
17018: NOT
17019: IFFALSE 17023
// continue ;
17021: GO 16955
// if HexInfo ( _x , _y ) = 0 then
17023: LD_VAR 0 7
17027: PPUSH
17028: LD_VAR 0 8
17032: PPUSH
17033: CALL_OW 428
17037: PUSH
17038: LD_INT 0
17040: EQUAL
17041: IFFALSE 17066
// begin ComMoveXY ( unit , _x , _y ) ;
17043: LD_VAR 0 1
17047: PPUSH
17048: LD_VAR 0 7
17052: PPUSH
17053: LD_VAR 0 8
17057: PPUSH
17058: CALL_OW 111
// exit ;
17062: POP
17063: POP
17064: GO 17070
// end ; end ;
17066: GO 16955
17068: POP
17069: POP
// end ;
17070: LD_VAR 0 3
17074: RET
// export function ScanBase ( side , base_area ) ; begin
17075: LD_INT 0
17077: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17078: LD_ADDR_VAR 0 3
17082: PUSH
17083: LD_VAR 0 2
17087: PPUSH
17088: LD_INT 81
17090: PUSH
17091: LD_VAR 0 1
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PPUSH
17100: CALL_OW 70
17104: ST_TO_ADDR
// end ;
17105: LD_VAR 0 3
17109: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17110: LD_INT 0
17112: PPUSH
17113: PPUSH
17114: PPUSH
17115: PPUSH
// result := false ;
17116: LD_ADDR_VAR 0 2
17120: PUSH
17121: LD_INT 0
17123: ST_TO_ADDR
// side := GetSide ( unit ) ;
17124: LD_ADDR_VAR 0 3
17128: PUSH
17129: LD_VAR 0 1
17133: PPUSH
17134: CALL_OW 255
17138: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17139: LD_ADDR_VAR 0 4
17143: PUSH
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 248
17153: ST_TO_ADDR
// case nat of 1 :
17154: LD_VAR 0 4
17158: PUSH
17159: LD_INT 1
17161: DOUBLE
17162: EQUAL
17163: IFTRUE 17167
17165: GO 17178
17167: POP
// tech := tech_lassight ; 2 :
17168: LD_ADDR_VAR 0 5
17172: PUSH
17173: LD_INT 12
17175: ST_TO_ADDR
17176: GO 17217
17178: LD_INT 2
17180: DOUBLE
17181: EQUAL
17182: IFTRUE 17186
17184: GO 17197
17186: POP
// tech := tech_mortar ; 3 :
17187: LD_ADDR_VAR 0 5
17191: PUSH
17192: LD_INT 41
17194: ST_TO_ADDR
17195: GO 17217
17197: LD_INT 3
17199: DOUBLE
17200: EQUAL
17201: IFTRUE 17205
17203: GO 17216
17205: POP
// tech := tech_bazooka ; end ;
17206: LD_ADDR_VAR 0 5
17210: PUSH
17211: LD_INT 44
17213: ST_TO_ADDR
17214: GO 17217
17216: POP
// if Researched ( side , tech ) then
17217: LD_VAR 0 3
17221: PPUSH
17222: LD_VAR 0 5
17226: PPUSH
17227: CALL_OW 325
17231: IFFALSE 17258
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17233: LD_ADDR_VAR 0 2
17237: PUSH
17238: LD_INT 5
17240: PUSH
17241: LD_INT 8
17243: PUSH
17244: LD_INT 9
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: PUSH
17252: LD_VAR 0 4
17256: ARRAY
17257: ST_TO_ADDR
// end ;
17258: LD_VAR 0 2
17262: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17263: LD_INT 0
17265: PPUSH
17266: PPUSH
17267: PPUSH
// if not mines then
17268: LD_VAR 0 2
17272: NOT
17273: IFFALSE 17277
// exit ;
17275: GO 17421
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17277: LD_ADDR_VAR 0 5
17281: PUSH
17282: LD_INT 81
17284: PUSH
17285: LD_VAR 0 1
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 3
17296: PUSH
17297: LD_INT 21
17299: PUSH
17300: LD_INT 3
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: ST_TO_ADDR
// for i in mines do
17320: LD_ADDR_VAR 0 4
17324: PUSH
17325: LD_VAR 0 2
17329: PUSH
17330: FOR_IN
17331: IFFALSE 17419
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17333: LD_VAR 0 4
17337: PUSH
17338: LD_INT 1
17340: ARRAY
17341: PPUSH
17342: LD_VAR 0 4
17346: PUSH
17347: LD_INT 2
17349: ARRAY
17350: PPUSH
17351: CALL_OW 458
17355: NOT
17356: IFFALSE 17360
// continue ;
17358: GO 17330
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17360: LD_VAR 0 4
17364: PUSH
17365: LD_INT 1
17367: ARRAY
17368: PPUSH
17369: LD_VAR 0 4
17373: PUSH
17374: LD_INT 2
17376: ARRAY
17377: PPUSH
17378: CALL_OW 428
17382: PUSH
17383: LD_VAR 0 5
17387: IN
17388: IFFALSE 17417
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17390: LD_VAR 0 4
17394: PUSH
17395: LD_INT 1
17397: ARRAY
17398: PPUSH
17399: LD_VAR 0 4
17403: PUSH
17404: LD_INT 2
17406: ARRAY
17407: PPUSH
17408: LD_VAR 0 1
17412: PPUSH
17413: CALL_OW 456
// end ;
17417: GO 17330
17419: POP
17420: POP
// end ;
17421: LD_VAR 0 3
17425: RET
// export function Count ( array ) ; begin
17426: LD_INT 0
17428: PPUSH
// result := array + 0 ;
17429: LD_ADDR_VAR 0 2
17433: PUSH
17434: LD_VAR 0 1
17438: PUSH
17439: LD_INT 0
17441: PLUS
17442: ST_TO_ADDR
// end ;
17443: LD_VAR 0 2
17447: RET
// export function IsEmpty ( building ) ; begin
17448: LD_INT 0
17450: PPUSH
// if not building then
17451: LD_VAR 0 1
17455: NOT
17456: IFFALSE 17460
// exit ;
17458: GO 17503
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17460: LD_ADDR_VAR 0 2
17464: PUSH
17465: LD_VAR 0 1
17469: PUSH
17470: LD_INT 22
17472: PUSH
17473: LD_VAR 0 1
17477: PPUSH
17478: CALL_OW 255
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 58
17489: PUSH
17490: EMPTY
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PPUSH
17497: CALL_OW 69
17501: IN
17502: ST_TO_ADDR
// end ;
17503: LD_VAR 0 2
17507: RET
// export function IsNotFull ( building ) ; var places ; begin
17508: LD_INT 0
17510: PPUSH
17511: PPUSH
// if not building then
17512: LD_VAR 0 1
17516: NOT
17517: IFFALSE 17521
// exit ;
17519: GO 17549
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17521: LD_ADDR_VAR 0 2
17525: PUSH
17526: LD_VAR 0 1
17530: PPUSH
17531: LD_INT 3
17533: PUSH
17534: LD_INT 62
17536: PUSH
17537: EMPTY
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 72
17548: ST_TO_ADDR
// end ;
17549: LD_VAR 0 2
17553: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17554: LD_INT 0
17556: PPUSH
17557: PPUSH
17558: PPUSH
17559: PPUSH
// tmp := [ ] ;
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: EMPTY
17566: ST_TO_ADDR
// list := [ ] ;
17567: LD_ADDR_VAR 0 5
17571: PUSH
17572: EMPTY
17573: ST_TO_ADDR
// for i = 16 to 25 do
17574: LD_ADDR_VAR 0 4
17578: PUSH
17579: DOUBLE
17580: LD_INT 16
17582: DEC
17583: ST_TO_ADDR
17584: LD_INT 25
17586: PUSH
17587: FOR_TO
17588: IFFALSE 17661
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17590: LD_ADDR_VAR 0 3
17594: PUSH
17595: LD_VAR 0 3
17599: PUSH
17600: LD_INT 22
17602: PUSH
17603: LD_VAR 0 1
17607: PPUSH
17608: CALL_OW 255
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 91
17619: PUSH
17620: LD_VAR 0 1
17624: PUSH
17625: LD_INT 6
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 30
17635: PUSH
17636: LD_VAR 0 4
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: PUSH
17650: EMPTY
17651: LIST
17652: PPUSH
17653: CALL_OW 69
17657: ADD
17658: ST_TO_ADDR
17659: GO 17587
17661: POP
17662: POP
// for i = 1 to tmp do
17663: LD_ADDR_VAR 0 4
17667: PUSH
17668: DOUBLE
17669: LD_INT 1
17671: DEC
17672: ST_TO_ADDR
17673: LD_VAR 0 3
17677: PUSH
17678: FOR_TO
17679: IFFALSE 17767
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17681: LD_ADDR_VAR 0 5
17685: PUSH
17686: LD_VAR 0 5
17690: PUSH
17691: LD_VAR 0 3
17695: PUSH
17696: LD_VAR 0 4
17700: ARRAY
17701: PPUSH
17702: CALL_OW 266
17706: PUSH
17707: LD_VAR 0 3
17711: PUSH
17712: LD_VAR 0 4
17716: ARRAY
17717: PPUSH
17718: CALL_OW 250
17722: PUSH
17723: LD_VAR 0 3
17727: PUSH
17728: LD_VAR 0 4
17732: ARRAY
17733: PPUSH
17734: CALL_OW 251
17738: PUSH
17739: LD_VAR 0 3
17743: PUSH
17744: LD_VAR 0 4
17748: ARRAY
17749: PPUSH
17750: CALL_OW 254
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: PUSH
17761: EMPTY
17762: LIST
17763: ADD
17764: ST_TO_ADDR
17765: GO 17678
17767: POP
17768: POP
// result := list ;
17769: LD_ADDR_VAR 0 2
17773: PUSH
17774: LD_VAR 0 5
17778: ST_TO_ADDR
// end ;
17779: LD_VAR 0 2
17783: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17784: LD_INT 0
17786: PPUSH
17787: PPUSH
17788: PPUSH
17789: PPUSH
17790: PPUSH
17791: PPUSH
17792: PPUSH
// if not factory then
17793: LD_VAR 0 1
17797: NOT
17798: IFFALSE 17802
// exit ;
17800: GO 18395
// if control = control_apeman then
17802: LD_VAR 0 4
17806: PUSH
17807: LD_INT 5
17809: EQUAL
17810: IFFALSE 17919
// begin tmp := UnitsInside ( factory ) ;
17812: LD_ADDR_VAR 0 8
17816: PUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 313
17826: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17827: LD_VAR 0 8
17831: PPUSH
17832: LD_INT 25
17834: PUSH
17835: LD_INT 12
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PPUSH
17842: CALL_OW 72
17846: NOT
17847: IFFALSE 17857
// control := control_manual ;
17849: LD_ADDR_VAR 0 4
17853: PUSH
17854: LD_INT 1
17856: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17857: LD_ADDR_VAR 0 8
17861: PUSH
17862: LD_VAR 0 1
17866: PPUSH
17867: CALL 17554 0 1
17871: ST_TO_ADDR
// if tmp then
17872: LD_VAR 0 8
17876: IFFALSE 17919
// begin for i in tmp do
17878: LD_ADDR_VAR 0 7
17882: PUSH
17883: LD_VAR 0 8
17887: PUSH
17888: FOR_IN
17889: IFFALSE 17917
// if i [ 1 ] = b_ext_radio then
17891: LD_VAR 0 7
17895: PUSH
17896: LD_INT 1
17898: ARRAY
17899: PUSH
17900: LD_INT 22
17902: EQUAL
17903: IFFALSE 17915
// begin control := control_remote ;
17905: LD_ADDR_VAR 0 4
17909: PUSH
17910: LD_INT 2
17912: ST_TO_ADDR
// break ;
17913: GO 17917
// end ;
17915: GO 17888
17917: POP
17918: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17919: LD_VAR 0 1
17923: PPUSH
17924: LD_VAR 0 2
17928: PPUSH
17929: LD_VAR 0 3
17933: PPUSH
17934: LD_VAR 0 4
17938: PPUSH
17939: LD_VAR 0 5
17943: PPUSH
17944: CALL_OW 448
17948: IFFALSE 17983
// begin result := [ chassis , engine , control , weapon ] ;
17950: LD_ADDR_VAR 0 6
17954: PUSH
17955: LD_VAR 0 2
17959: PUSH
17960: LD_VAR 0 3
17964: PUSH
17965: LD_VAR 0 4
17969: PUSH
17970: LD_VAR 0 5
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: ST_TO_ADDR
// exit ;
17981: GO 18395
// end ; _chassis := AvailableChassisList ( factory ) ;
17983: LD_ADDR_VAR 0 9
17987: PUSH
17988: LD_VAR 0 1
17992: PPUSH
17993: CALL_OW 475
17997: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17998: LD_ADDR_VAR 0 11
18002: PUSH
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 476
18012: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18013: LD_ADDR_VAR 0 12
18017: PUSH
18018: LD_VAR 0 1
18022: PPUSH
18023: CALL_OW 477
18027: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18028: LD_ADDR_VAR 0 10
18032: PUSH
18033: LD_VAR 0 1
18037: PPUSH
18038: CALL_OW 478
18042: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18043: LD_VAR 0 9
18047: NOT
18048: PUSH
18049: LD_VAR 0 11
18053: NOT
18054: OR
18055: PUSH
18056: LD_VAR 0 12
18060: NOT
18061: OR
18062: PUSH
18063: LD_VAR 0 10
18067: NOT
18068: OR
18069: IFFALSE 18104
// begin result := [ chassis , engine , control , weapon ] ;
18071: LD_ADDR_VAR 0 6
18075: PUSH
18076: LD_VAR 0 2
18080: PUSH
18081: LD_VAR 0 3
18085: PUSH
18086: LD_VAR 0 4
18090: PUSH
18091: LD_VAR 0 5
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: ST_TO_ADDR
// exit ;
18102: GO 18395
// end ; if not chassis in _chassis then
18104: LD_VAR 0 2
18108: PUSH
18109: LD_VAR 0 9
18113: IN
18114: NOT
18115: IFFALSE 18141
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18117: LD_ADDR_VAR 0 2
18121: PUSH
18122: LD_VAR 0 9
18126: PUSH
18127: LD_INT 1
18129: PPUSH
18130: LD_VAR 0 9
18134: PPUSH
18135: CALL_OW 12
18139: ARRAY
18140: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18141: LD_VAR 0 2
18145: PPUSH
18146: LD_VAR 0 3
18150: PPUSH
18151: CALL 18400 0 2
18155: NOT
18156: IFFALSE 18215
// repeat engine := _engine [ 1 ] ;
18158: LD_ADDR_VAR 0 3
18162: PUSH
18163: LD_VAR 0 11
18167: PUSH
18168: LD_INT 1
18170: ARRAY
18171: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18172: LD_ADDR_VAR 0 11
18176: PUSH
18177: LD_VAR 0 11
18181: PPUSH
18182: LD_INT 1
18184: PPUSH
18185: CALL_OW 3
18189: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18190: LD_VAR 0 2
18194: PPUSH
18195: LD_VAR 0 3
18199: PPUSH
18200: CALL 18400 0 2
18204: PUSH
18205: LD_VAR 0 11
18209: PUSH
18210: EMPTY
18211: EQUAL
18212: OR
18213: IFFALSE 18158
// if not control in _control then
18215: LD_VAR 0 4
18219: PUSH
18220: LD_VAR 0 12
18224: IN
18225: NOT
18226: IFFALSE 18252
// control := _control [ rand ( 1 , _control ) ] ;
18228: LD_ADDR_VAR 0 4
18232: PUSH
18233: LD_VAR 0 12
18237: PUSH
18238: LD_INT 1
18240: PPUSH
18241: LD_VAR 0 12
18245: PPUSH
18246: CALL_OW 12
18250: ARRAY
18251: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18252: LD_VAR 0 2
18256: PPUSH
18257: LD_VAR 0 5
18261: PPUSH
18262: CALL 18620 0 2
18266: NOT
18267: IFFALSE 18326
// repeat weapon := _weapon [ 1 ] ;
18269: LD_ADDR_VAR 0 5
18273: PUSH
18274: LD_VAR 0 10
18278: PUSH
18279: LD_INT 1
18281: ARRAY
18282: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18283: LD_ADDR_VAR 0 10
18287: PUSH
18288: LD_VAR 0 10
18292: PPUSH
18293: LD_INT 1
18295: PPUSH
18296: CALL_OW 3
18300: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18301: LD_VAR 0 2
18305: PPUSH
18306: LD_VAR 0 5
18310: PPUSH
18311: CALL 18620 0 2
18315: PUSH
18316: LD_VAR 0 10
18320: PUSH
18321: EMPTY
18322: EQUAL
18323: OR
18324: IFFALSE 18269
// result := [ ] ;
18326: LD_ADDR_VAR 0 6
18330: PUSH
18331: EMPTY
18332: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18333: LD_VAR 0 1
18337: PPUSH
18338: LD_VAR 0 2
18342: PPUSH
18343: LD_VAR 0 3
18347: PPUSH
18348: LD_VAR 0 4
18352: PPUSH
18353: LD_VAR 0 5
18357: PPUSH
18358: CALL_OW 448
18362: IFFALSE 18395
// result := [ chassis , engine , control , weapon ] ;
18364: LD_ADDR_VAR 0 6
18368: PUSH
18369: LD_VAR 0 2
18373: PUSH
18374: LD_VAR 0 3
18378: PUSH
18379: LD_VAR 0 4
18383: PUSH
18384: LD_VAR 0 5
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: ST_TO_ADDR
// end ;
18395: LD_VAR 0 6
18399: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18400: LD_INT 0
18402: PPUSH
// if not chassis or not engine then
18403: LD_VAR 0 1
18407: NOT
18408: PUSH
18409: LD_VAR 0 2
18413: NOT
18414: OR
18415: IFFALSE 18419
// exit ;
18417: GO 18615
// case engine of engine_solar :
18419: LD_VAR 0 2
18423: PUSH
18424: LD_INT 2
18426: DOUBLE
18427: EQUAL
18428: IFTRUE 18432
18430: GO 18470
18432: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18433: LD_ADDR_VAR 0 3
18437: PUSH
18438: LD_INT 11
18440: PUSH
18441: LD_INT 12
18443: PUSH
18444: LD_INT 13
18446: PUSH
18447: LD_INT 14
18449: PUSH
18450: LD_INT 1
18452: PUSH
18453: LD_INT 2
18455: PUSH
18456: LD_INT 3
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: ST_TO_ADDR
18468: GO 18599
18470: LD_INT 1
18472: DOUBLE
18473: EQUAL
18474: IFTRUE 18478
18476: GO 18540
18478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18479: LD_ADDR_VAR 0 3
18483: PUSH
18484: LD_INT 11
18486: PUSH
18487: LD_INT 12
18489: PUSH
18490: LD_INT 13
18492: PUSH
18493: LD_INT 14
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: LD_INT 2
18501: PUSH
18502: LD_INT 3
18504: PUSH
18505: LD_INT 4
18507: PUSH
18508: LD_INT 5
18510: PUSH
18511: LD_INT 21
18513: PUSH
18514: LD_INT 23
18516: PUSH
18517: LD_INT 22
18519: PUSH
18520: LD_INT 24
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: ST_TO_ADDR
18538: GO 18599
18540: LD_INT 3
18542: DOUBLE
18543: EQUAL
18544: IFTRUE 18548
18546: GO 18598
18548: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18549: LD_ADDR_VAR 0 3
18553: PUSH
18554: LD_INT 13
18556: PUSH
18557: LD_INT 14
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: LD_INT 3
18565: PUSH
18566: LD_INT 4
18568: PUSH
18569: LD_INT 5
18571: PUSH
18572: LD_INT 21
18574: PUSH
18575: LD_INT 22
18577: PUSH
18578: LD_INT 23
18580: PUSH
18581: LD_INT 24
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: ST_TO_ADDR
18596: GO 18599
18598: POP
// result := ( chassis in result ) ;
18599: LD_ADDR_VAR 0 3
18603: PUSH
18604: LD_VAR 0 1
18608: PUSH
18609: LD_VAR 0 3
18613: IN
18614: ST_TO_ADDR
// end ;
18615: LD_VAR 0 3
18619: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18620: LD_INT 0
18622: PPUSH
// if not chassis or not weapon then
18623: LD_VAR 0 1
18627: NOT
18628: PUSH
18629: LD_VAR 0 2
18633: NOT
18634: OR
18635: IFFALSE 18639
// exit ;
18637: GO 19699
// case weapon of us_machine_gun :
18639: LD_VAR 0 2
18643: PUSH
18644: LD_INT 2
18646: DOUBLE
18647: EQUAL
18648: IFTRUE 18652
18650: GO 18682
18652: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18653: LD_ADDR_VAR 0 3
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: LD_INT 3
18666: PUSH
18667: LD_INT 4
18669: PUSH
18670: LD_INT 5
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: ST_TO_ADDR
18680: GO 19683
18682: LD_INT 3
18684: DOUBLE
18685: EQUAL
18686: IFTRUE 18690
18688: GO 18720
18690: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18691: LD_ADDR_VAR 0 3
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: LD_INT 3
18704: PUSH
18705: LD_INT 4
18707: PUSH
18708: LD_INT 5
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: ST_TO_ADDR
18718: GO 19683
18720: LD_INT 11
18722: DOUBLE
18723: EQUAL
18724: IFTRUE 18728
18726: GO 18758
18728: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18729: LD_ADDR_VAR 0 3
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: LD_INT 3
18742: PUSH
18743: LD_INT 4
18745: PUSH
18746: LD_INT 5
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: ST_TO_ADDR
18756: GO 19683
18758: LD_INT 4
18760: DOUBLE
18761: EQUAL
18762: IFTRUE 18766
18764: GO 18792
18766: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18767: LD_ADDR_VAR 0 3
18771: PUSH
18772: LD_INT 2
18774: PUSH
18775: LD_INT 3
18777: PUSH
18778: LD_INT 4
18780: PUSH
18781: LD_INT 5
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: ST_TO_ADDR
18790: GO 19683
18792: LD_INT 5
18794: DOUBLE
18795: EQUAL
18796: IFTRUE 18800
18798: GO 18826
18800: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18801: LD_ADDR_VAR 0 3
18805: PUSH
18806: LD_INT 2
18808: PUSH
18809: LD_INT 3
18811: PUSH
18812: LD_INT 4
18814: PUSH
18815: LD_INT 5
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: ST_TO_ADDR
18824: GO 19683
18826: LD_INT 9
18828: DOUBLE
18829: EQUAL
18830: IFTRUE 18834
18832: GO 18860
18834: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18835: LD_ADDR_VAR 0 3
18839: PUSH
18840: LD_INT 2
18842: PUSH
18843: LD_INT 3
18845: PUSH
18846: LD_INT 4
18848: PUSH
18849: LD_INT 5
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: ST_TO_ADDR
18858: GO 19683
18860: LD_INT 7
18862: DOUBLE
18863: EQUAL
18864: IFTRUE 18868
18866: GO 18894
18868: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18869: LD_ADDR_VAR 0 3
18873: PUSH
18874: LD_INT 2
18876: PUSH
18877: LD_INT 3
18879: PUSH
18880: LD_INT 4
18882: PUSH
18883: LD_INT 5
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: ST_TO_ADDR
18892: GO 19683
18894: LD_INT 12
18896: DOUBLE
18897: EQUAL
18898: IFTRUE 18902
18900: GO 18928
18902: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18903: LD_ADDR_VAR 0 3
18907: PUSH
18908: LD_INT 2
18910: PUSH
18911: LD_INT 3
18913: PUSH
18914: LD_INT 4
18916: PUSH
18917: LD_INT 5
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: ST_TO_ADDR
18926: GO 19683
18928: LD_INT 13
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 18962
18936: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18937: LD_ADDR_VAR 0 3
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 3
18947: PUSH
18948: LD_INT 4
18950: PUSH
18951: LD_INT 5
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: ST_TO_ADDR
18960: GO 19683
18962: LD_INT 14
18964: DOUBLE
18965: EQUAL
18966: IFTRUE 18970
18968: GO 18988
18970: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18971: LD_ADDR_VAR 0 3
18975: PUSH
18976: LD_INT 4
18978: PUSH
18979: LD_INT 5
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: ST_TO_ADDR
18986: GO 19683
18988: LD_INT 6
18990: DOUBLE
18991: EQUAL
18992: IFTRUE 18996
18994: GO 19014
18996: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18997: LD_ADDR_VAR 0 3
19001: PUSH
19002: LD_INT 4
19004: PUSH
19005: LD_INT 5
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: ST_TO_ADDR
19012: GO 19683
19014: LD_INT 10
19016: DOUBLE
19017: EQUAL
19018: IFTRUE 19022
19020: GO 19040
19022: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19023: LD_ADDR_VAR 0 3
19027: PUSH
19028: LD_INT 4
19030: PUSH
19031: LD_INT 5
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: ST_TO_ADDR
19038: GO 19683
19040: LD_INT 22
19042: DOUBLE
19043: EQUAL
19044: IFTRUE 19048
19046: GO 19074
19048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19049: LD_ADDR_VAR 0 3
19053: PUSH
19054: LD_INT 11
19056: PUSH
19057: LD_INT 12
19059: PUSH
19060: LD_INT 13
19062: PUSH
19063: LD_INT 14
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: ST_TO_ADDR
19072: GO 19683
19074: LD_INT 23
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19108
19082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19083: LD_ADDR_VAR 0 3
19087: PUSH
19088: LD_INT 11
19090: PUSH
19091: LD_INT 12
19093: PUSH
19094: LD_INT 13
19096: PUSH
19097: LD_INT 14
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: ST_TO_ADDR
19106: GO 19683
19108: LD_INT 24
19110: DOUBLE
19111: EQUAL
19112: IFTRUE 19116
19114: GO 19142
19116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19117: LD_ADDR_VAR 0 3
19121: PUSH
19122: LD_INT 11
19124: PUSH
19125: LD_INT 12
19127: PUSH
19128: LD_INT 13
19130: PUSH
19131: LD_INT 14
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: ST_TO_ADDR
19140: GO 19683
19142: LD_INT 30
19144: DOUBLE
19145: EQUAL
19146: IFTRUE 19150
19148: GO 19176
19150: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19151: LD_ADDR_VAR 0 3
19155: PUSH
19156: LD_INT 11
19158: PUSH
19159: LD_INT 12
19161: PUSH
19162: LD_INT 13
19164: PUSH
19165: LD_INT 14
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: ST_TO_ADDR
19174: GO 19683
19176: LD_INT 25
19178: DOUBLE
19179: EQUAL
19180: IFTRUE 19184
19182: GO 19202
19184: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19185: LD_ADDR_VAR 0 3
19189: PUSH
19190: LD_INT 13
19192: PUSH
19193: LD_INT 14
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: ST_TO_ADDR
19200: GO 19683
19202: LD_INT 27
19204: DOUBLE
19205: EQUAL
19206: IFTRUE 19210
19208: GO 19228
19210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19211: LD_ADDR_VAR 0 3
19215: PUSH
19216: LD_INT 13
19218: PUSH
19219: LD_INT 14
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: ST_TO_ADDR
19226: GO 19683
19228: LD_INT 92
19230: DOUBLE
19231: EQUAL
19232: IFTRUE 19236
19234: GO 19262
19236: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19237: LD_ADDR_VAR 0 3
19241: PUSH
19242: LD_INT 11
19244: PUSH
19245: LD_INT 12
19247: PUSH
19248: LD_INT 13
19250: PUSH
19251: LD_INT 14
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: ST_TO_ADDR
19260: GO 19683
19262: LD_INT 28
19264: DOUBLE
19265: EQUAL
19266: IFTRUE 19270
19268: GO 19288
19270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19271: LD_ADDR_VAR 0 3
19275: PUSH
19276: LD_INT 13
19278: PUSH
19279: LD_INT 14
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: ST_TO_ADDR
19286: GO 19683
19288: LD_INT 29
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19314
19296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19297: LD_ADDR_VAR 0 3
19301: PUSH
19302: LD_INT 13
19304: PUSH
19305: LD_INT 14
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: ST_TO_ADDR
19312: GO 19683
19314: LD_INT 31
19316: DOUBLE
19317: EQUAL
19318: IFTRUE 19322
19320: GO 19340
19322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19323: LD_ADDR_VAR 0 3
19327: PUSH
19328: LD_INT 13
19330: PUSH
19331: LD_INT 14
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: ST_TO_ADDR
19338: GO 19683
19340: LD_INT 26
19342: DOUBLE
19343: EQUAL
19344: IFTRUE 19348
19346: GO 19366
19348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19349: LD_ADDR_VAR 0 3
19353: PUSH
19354: LD_INT 13
19356: PUSH
19357: LD_INT 14
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: ST_TO_ADDR
19364: GO 19683
19366: LD_INT 42
19368: DOUBLE
19369: EQUAL
19370: IFTRUE 19374
19372: GO 19400
19374: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19375: LD_ADDR_VAR 0 3
19379: PUSH
19380: LD_INT 21
19382: PUSH
19383: LD_INT 22
19385: PUSH
19386: LD_INT 23
19388: PUSH
19389: LD_INT 24
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: ST_TO_ADDR
19398: GO 19683
19400: LD_INT 43
19402: DOUBLE
19403: EQUAL
19404: IFTRUE 19408
19406: GO 19434
19408: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19409: LD_ADDR_VAR 0 3
19413: PUSH
19414: LD_INT 21
19416: PUSH
19417: LD_INT 22
19419: PUSH
19420: LD_INT 23
19422: PUSH
19423: LD_INT 24
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: ST_TO_ADDR
19432: GO 19683
19434: LD_INT 44
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19468
19442: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19443: LD_ADDR_VAR 0 3
19447: PUSH
19448: LD_INT 21
19450: PUSH
19451: LD_INT 22
19453: PUSH
19454: LD_INT 23
19456: PUSH
19457: LD_INT 24
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: ST_TO_ADDR
19466: GO 19683
19468: LD_INT 45
19470: DOUBLE
19471: EQUAL
19472: IFTRUE 19476
19474: GO 19502
19476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19477: LD_ADDR_VAR 0 3
19481: PUSH
19482: LD_INT 21
19484: PUSH
19485: LD_INT 22
19487: PUSH
19488: LD_INT 23
19490: PUSH
19491: LD_INT 24
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: ST_TO_ADDR
19500: GO 19683
19502: LD_INT 49
19504: DOUBLE
19505: EQUAL
19506: IFTRUE 19510
19508: GO 19536
19510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19511: LD_ADDR_VAR 0 3
19515: PUSH
19516: LD_INT 21
19518: PUSH
19519: LD_INT 22
19521: PUSH
19522: LD_INT 23
19524: PUSH
19525: LD_INT 24
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: ST_TO_ADDR
19534: GO 19683
19536: LD_INT 51
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19570
19544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19545: LD_ADDR_VAR 0 3
19549: PUSH
19550: LD_INT 21
19552: PUSH
19553: LD_INT 22
19555: PUSH
19556: LD_INT 23
19558: PUSH
19559: LD_INT 24
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: ST_TO_ADDR
19568: GO 19683
19570: LD_INT 52
19572: DOUBLE
19573: EQUAL
19574: IFTRUE 19578
19576: GO 19604
19578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19579: LD_ADDR_VAR 0 3
19583: PUSH
19584: LD_INT 21
19586: PUSH
19587: LD_INT 22
19589: PUSH
19590: LD_INT 23
19592: PUSH
19593: LD_INT 24
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: ST_TO_ADDR
19602: GO 19683
19604: LD_INT 53
19606: DOUBLE
19607: EQUAL
19608: IFTRUE 19612
19610: GO 19630
19612: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19613: LD_ADDR_VAR 0 3
19617: PUSH
19618: LD_INT 23
19620: PUSH
19621: LD_INT 24
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: ST_TO_ADDR
19628: GO 19683
19630: LD_INT 46
19632: DOUBLE
19633: EQUAL
19634: IFTRUE 19638
19636: GO 19656
19638: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19639: LD_ADDR_VAR 0 3
19643: PUSH
19644: LD_INT 23
19646: PUSH
19647: LD_INT 24
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: ST_TO_ADDR
19654: GO 19683
19656: LD_INT 47
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19682
19664: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19665: LD_ADDR_VAR 0 3
19669: PUSH
19670: LD_INT 23
19672: PUSH
19673: LD_INT 24
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: ST_TO_ADDR
19680: GO 19683
19682: POP
// result := ( chassis in result ) ;
19683: LD_ADDR_VAR 0 3
19687: PUSH
19688: LD_VAR 0 1
19692: PUSH
19693: LD_VAR 0 3
19697: IN
19698: ST_TO_ADDR
// end ;
19699: LD_VAR 0 3
19703: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19704: LD_INT 0
19706: PPUSH
19707: PPUSH
19708: PPUSH
19709: PPUSH
19710: PPUSH
19711: PPUSH
19712: PPUSH
// result := array ;
19713: LD_ADDR_VAR 0 5
19717: PUSH
19718: LD_VAR 0 1
19722: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19723: LD_VAR 0 1
19727: NOT
19728: PUSH
19729: LD_VAR 0 2
19733: NOT
19734: OR
19735: PUSH
19736: LD_VAR 0 3
19740: NOT
19741: OR
19742: PUSH
19743: LD_VAR 0 2
19747: PUSH
19748: LD_VAR 0 1
19752: GREATER
19753: OR
19754: PUSH
19755: LD_VAR 0 3
19759: PUSH
19760: LD_VAR 0 1
19764: GREATER
19765: OR
19766: IFFALSE 19770
// exit ;
19768: GO 20066
// if direction then
19770: LD_VAR 0 4
19774: IFFALSE 19838
// begin d := 1 ;
19776: LD_ADDR_VAR 0 9
19780: PUSH
19781: LD_INT 1
19783: ST_TO_ADDR
// if i_from > i_to then
19784: LD_VAR 0 2
19788: PUSH
19789: LD_VAR 0 3
19793: GREATER
19794: IFFALSE 19820
// length := ( array - i_from ) + i_to else
19796: LD_ADDR_VAR 0 11
19800: PUSH
19801: LD_VAR 0 1
19805: PUSH
19806: LD_VAR 0 2
19810: MINUS
19811: PUSH
19812: LD_VAR 0 3
19816: PLUS
19817: ST_TO_ADDR
19818: GO 19836
// length := i_to - i_from ;
19820: LD_ADDR_VAR 0 11
19824: PUSH
19825: LD_VAR 0 3
19829: PUSH
19830: LD_VAR 0 2
19834: MINUS
19835: ST_TO_ADDR
// end else
19836: GO 19899
// begin d := - 1 ;
19838: LD_ADDR_VAR 0 9
19842: PUSH
19843: LD_INT 1
19845: NEG
19846: ST_TO_ADDR
// if i_from > i_to then
19847: LD_VAR 0 2
19851: PUSH
19852: LD_VAR 0 3
19856: GREATER
19857: IFFALSE 19877
// length := i_from - i_to else
19859: LD_ADDR_VAR 0 11
19863: PUSH
19864: LD_VAR 0 2
19868: PUSH
19869: LD_VAR 0 3
19873: MINUS
19874: ST_TO_ADDR
19875: GO 19899
// length := ( array - i_to ) + i_from ;
19877: LD_ADDR_VAR 0 11
19881: PUSH
19882: LD_VAR 0 1
19886: PUSH
19887: LD_VAR 0 3
19891: MINUS
19892: PUSH
19893: LD_VAR 0 2
19897: PLUS
19898: ST_TO_ADDR
// end ; if not length then
19899: LD_VAR 0 11
19903: NOT
19904: IFFALSE 19908
// exit ;
19906: GO 20066
// tmp := array ;
19908: LD_ADDR_VAR 0 10
19912: PUSH
19913: LD_VAR 0 1
19917: ST_TO_ADDR
// for i = 1 to length do
19918: LD_ADDR_VAR 0 6
19922: PUSH
19923: DOUBLE
19924: LD_INT 1
19926: DEC
19927: ST_TO_ADDR
19928: LD_VAR 0 11
19932: PUSH
19933: FOR_TO
19934: IFFALSE 20054
// begin for j = 1 to array do
19936: LD_ADDR_VAR 0 7
19940: PUSH
19941: DOUBLE
19942: LD_INT 1
19944: DEC
19945: ST_TO_ADDR
19946: LD_VAR 0 1
19950: PUSH
19951: FOR_TO
19952: IFFALSE 20040
// begin k := j + d ;
19954: LD_ADDR_VAR 0 8
19958: PUSH
19959: LD_VAR 0 7
19963: PUSH
19964: LD_VAR 0 9
19968: PLUS
19969: ST_TO_ADDR
// if k > array then
19970: LD_VAR 0 8
19974: PUSH
19975: LD_VAR 0 1
19979: GREATER
19980: IFFALSE 19990
// k := 1 ;
19982: LD_ADDR_VAR 0 8
19986: PUSH
19987: LD_INT 1
19989: ST_TO_ADDR
// if not k then
19990: LD_VAR 0 8
19994: NOT
19995: IFFALSE 20007
// k := array ;
19997: LD_ADDR_VAR 0 8
20001: PUSH
20002: LD_VAR 0 1
20006: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20007: LD_ADDR_VAR 0 10
20011: PUSH
20012: LD_VAR 0 10
20016: PPUSH
20017: LD_VAR 0 8
20021: PPUSH
20022: LD_VAR 0 1
20026: PUSH
20027: LD_VAR 0 7
20031: ARRAY
20032: PPUSH
20033: CALL_OW 1
20037: ST_TO_ADDR
// end ;
20038: GO 19951
20040: POP
20041: POP
// array := tmp ;
20042: LD_ADDR_VAR 0 1
20046: PUSH
20047: LD_VAR 0 10
20051: ST_TO_ADDR
// end ;
20052: GO 19933
20054: POP
20055: POP
// result := array ;
20056: LD_ADDR_VAR 0 5
20060: PUSH
20061: LD_VAR 0 1
20065: ST_TO_ADDR
// end ;
20066: LD_VAR 0 5
20070: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20071: LD_INT 0
20073: PPUSH
20074: PPUSH
// result := 0 ;
20075: LD_ADDR_VAR 0 3
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// if not array or not value in array then
20083: LD_VAR 0 1
20087: NOT
20088: PUSH
20089: LD_VAR 0 2
20093: PUSH
20094: LD_VAR 0 1
20098: IN
20099: NOT
20100: OR
20101: IFFALSE 20105
// exit ;
20103: GO 20159
// for i = 1 to array do
20105: LD_ADDR_VAR 0 4
20109: PUSH
20110: DOUBLE
20111: LD_INT 1
20113: DEC
20114: ST_TO_ADDR
20115: LD_VAR 0 1
20119: PUSH
20120: FOR_TO
20121: IFFALSE 20157
// if value = array [ i ] then
20123: LD_VAR 0 2
20127: PUSH
20128: LD_VAR 0 1
20132: PUSH
20133: LD_VAR 0 4
20137: ARRAY
20138: EQUAL
20139: IFFALSE 20155
// begin result := i ;
20141: LD_ADDR_VAR 0 3
20145: PUSH
20146: LD_VAR 0 4
20150: ST_TO_ADDR
// exit ;
20151: POP
20152: POP
20153: GO 20159
// end ;
20155: GO 20120
20157: POP
20158: POP
// end ;
20159: LD_VAR 0 3
20163: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20164: LD_INT 0
20166: PPUSH
// vc_chassis := chassis ;
20167: LD_ADDR_OWVAR 37
20171: PUSH
20172: LD_VAR 0 1
20176: ST_TO_ADDR
// vc_engine := engine ;
20177: LD_ADDR_OWVAR 39
20181: PUSH
20182: LD_VAR 0 2
20186: ST_TO_ADDR
// vc_control := control ;
20187: LD_ADDR_OWVAR 38
20191: PUSH
20192: LD_VAR 0 3
20196: ST_TO_ADDR
// vc_weapon := weapon ;
20197: LD_ADDR_OWVAR 40
20201: PUSH
20202: LD_VAR 0 4
20206: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20207: LD_ADDR_OWVAR 41
20211: PUSH
20212: LD_VAR 0 5
20216: ST_TO_ADDR
// end ;
20217: LD_VAR 0 6
20221: RET
// export function WantPlant ( unit ) ; var task ; begin
20222: LD_INT 0
20224: PPUSH
20225: PPUSH
// result := false ;
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_INT 0
20233: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20234: LD_ADDR_VAR 0 3
20238: PUSH
20239: LD_VAR 0 1
20243: PPUSH
20244: CALL_OW 437
20248: ST_TO_ADDR
// if task then
20249: LD_VAR 0 3
20253: IFFALSE 20281
// if task [ 1 ] [ 1 ] = p then
20255: LD_VAR 0 3
20259: PUSH
20260: LD_INT 1
20262: ARRAY
20263: PUSH
20264: LD_INT 1
20266: ARRAY
20267: PUSH
20268: LD_STRING p
20270: EQUAL
20271: IFFALSE 20281
// result := true ;
20273: LD_ADDR_VAR 0 2
20277: PUSH
20278: LD_INT 1
20280: ST_TO_ADDR
// end ;
20281: LD_VAR 0 2
20285: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20286: LD_INT 0
20288: PPUSH
20289: PPUSH
20290: PPUSH
20291: PPUSH
// if pos < 1 then
20292: LD_VAR 0 2
20296: PUSH
20297: LD_INT 1
20299: LESS
20300: IFFALSE 20304
// exit ;
20302: GO 20607
// if pos = 1 then
20304: LD_VAR 0 2
20308: PUSH
20309: LD_INT 1
20311: EQUAL
20312: IFFALSE 20345
// result := Replace ( arr , pos [ 1 ] , value ) else
20314: LD_ADDR_VAR 0 4
20318: PUSH
20319: LD_VAR 0 1
20323: PPUSH
20324: LD_VAR 0 2
20328: PUSH
20329: LD_INT 1
20331: ARRAY
20332: PPUSH
20333: LD_VAR 0 3
20337: PPUSH
20338: CALL_OW 1
20342: ST_TO_ADDR
20343: GO 20607
// begin tmp := arr ;
20345: LD_ADDR_VAR 0 6
20349: PUSH
20350: LD_VAR 0 1
20354: ST_TO_ADDR
// s_arr := [ tmp ] ;
20355: LD_ADDR_VAR 0 7
20359: PUSH
20360: LD_VAR 0 6
20364: PUSH
20365: EMPTY
20366: LIST
20367: ST_TO_ADDR
// for i = 1 to pos - 1 do
20368: LD_ADDR_VAR 0 5
20372: PUSH
20373: DOUBLE
20374: LD_INT 1
20376: DEC
20377: ST_TO_ADDR
20378: LD_VAR 0 2
20382: PUSH
20383: LD_INT 1
20385: MINUS
20386: PUSH
20387: FOR_TO
20388: IFFALSE 20433
// begin tmp := tmp [ pos [ i ] ] ;
20390: LD_ADDR_VAR 0 6
20394: PUSH
20395: LD_VAR 0 6
20399: PUSH
20400: LD_VAR 0 2
20404: PUSH
20405: LD_VAR 0 5
20409: ARRAY
20410: ARRAY
20411: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20412: LD_ADDR_VAR 0 7
20416: PUSH
20417: LD_VAR 0 7
20421: PUSH
20422: LD_VAR 0 6
20426: PUSH
20427: EMPTY
20428: LIST
20429: ADD
20430: ST_TO_ADDR
// end ;
20431: GO 20387
20433: POP
20434: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20435: LD_ADDR_VAR 0 6
20439: PUSH
20440: LD_VAR 0 6
20444: PPUSH
20445: LD_VAR 0 2
20449: PUSH
20450: LD_VAR 0 2
20454: ARRAY
20455: PPUSH
20456: LD_VAR 0 3
20460: PPUSH
20461: CALL_OW 1
20465: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20466: LD_ADDR_VAR 0 7
20470: PUSH
20471: LD_VAR 0 7
20475: PPUSH
20476: LD_VAR 0 7
20480: PPUSH
20481: LD_VAR 0 6
20485: PPUSH
20486: CALL_OW 1
20490: ST_TO_ADDR
// for i = s_arr downto 2 do
20491: LD_ADDR_VAR 0 5
20495: PUSH
20496: DOUBLE
20497: LD_VAR 0 7
20501: INC
20502: ST_TO_ADDR
20503: LD_INT 2
20505: PUSH
20506: FOR_DOWNTO
20507: IFFALSE 20591
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20509: LD_ADDR_VAR 0 6
20513: PUSH
20514: LD_VAR 0 7
20518: PUSH
20519: LD_VAR 0 5
20523: PUSH
20524: LD_INT 1
20526: MINUS
20527: ARRAY
20528: PPUSH
20529: LD_VAR 0 2
20533: PUSH
20534: LD_VAR 0 5
20538: PUSH
20539: LD_INT 1
20541: MINUS
20542: ARRAY
20543: PPUSH
20544: LD_VAR 0 7
20548: PUSH
20549: LD_VAR 0 5
20553: ARRAY
20554: PPUSH
20555: CALL_OW 1
20559: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20560: LD_ADDR_VAR 0 7
20564: PUSH
20565: LD_VAR 0 7
20569: PPUSH
20570: LD_VAR 0 5
20574: PUSH
20575: LD_INT 1
20577: MINUS
20578: PPUSH
20579: LD_VAR 0 6
20583: PPUSH
20584: CALL_OW 1
20588: ST_TO_ADDR
// end ;
20589: GO 20506
20591: POP
20592: POP
// result := s_arr [ 1 ] ;
20593: LD_ADDR_VAR 0 4
20597: PUSH
20598: LD_VAR 0 7
20602: PUSH
20603: LD_INT 1
20605: ARRAY
20606: ST_TO_ADDR
// end ; end ;
20607: LD_VAR 0 4
20611: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20612: LD_INT 0
20614: PPUSH
20615: PPUSH
// if not list then
20616: LD_VAR 0 1
20620: NOT
20621: IFFALSE 20625
// exit ;
20623: GO 20716
// i := list [ pos1 ] ;
20625: LD_ADDR_VAR 0 5
20629: PUSH
20630: LD_VAR 0 1
20634: PUSH
20635: LD_VAR 0 2
20639: ARRAY
20640: ST_TO_ADDR
// if not i then
20641: LD_VAR 0 5
20645: NOT
20646: IFFALSE 20650
// exit ;
20648: GO 20716
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20650: LD_ADDR_VAR 0 1
20654: PUSH
20655: LD_VAR 0 1
20659: PPUSH
20660: LD_VAR 0 2
20664: PPUSH
20665: LD_VAR 0 1
20669: PUSH
20670: LD_VAR 0 3
20674: ARRAY
20675: PPUSH
20676: CALL_OW 1
20680: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20681: LD_ADDR_VAR 0 1
20685: PUSH
20686: LD_VAR 0 1
20690: PPUSH
20691: LD_VAR 0 3
20695: PPUSH
20696: LD_VAR 0 5
20700: PPUSH
20701: CALL_OW 1
20705: ST_TO_ADDR
// result := list ;
20706: LD_ADDR_VAR 0 4
20710: PUSH
20711: LD_VAR 0 1
20715: ST_TO_ADDR
// end ;
20716: LD_VAR 0 4
20720: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20721: LD_INT 0
20723: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20724: LD_ADDR_VAR 0 5
20728: PUSH
20729: LD_VAR 0 1
20733: PPUSH
20734: CALL_OW 250
20738: PPUSH
20739: LD_VAR 0 1
20743: PPUSH
20744: CALL_OW 251
20748: PPUSH
20749: LD_VAR 0 2
20753: PPUSH
20754: LD_VAR 0 3
20758: PPUSH
20759: LD_VAR 0 4
20763: PPUSH
20764: CALL 20774 0 5
20768: ST_TO_ADDR
// end ;
20769: LD_VAR 0 5
20773: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20774: LD_INT 0
20776: PPUSH
20777: PPUSH
20778: PPUSH
20779: PPUSH
// if not list then
20780: LD_VAR 0 3
20784: NOT
20785: IFFALSE 20789
// exit ;
20787: GO 21177
// result := [ ] ;
20789: LD_ADDR_VAR 0 6
20793: PUSH
20794: EMPTY
20795: ST_TO_ADDR
// for i in list do
20796: LD_ADDR_VAR 0 7
20800: PUSH
20801: LD_VAR 0 3
20805: PUSH
20806: FOR_IN
20807: IFFALSE 21009
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20809: LD_ADDR_VAR 0 9
20813: PUSH
20814: LD_VAR 0 7
20818: PPUSH
20819: LD_VAR 0 1
20823: PPUSH
20824: LD_VAR 0 2
20828: PPUSH
20829: CALL_OW 297
20833: ST_TO_ADDR
// if not result then
20834: LD_VAR 0 6
20838: NOT
20839: IFFALSE 20865
// result := [ [ i , tmp ] ] else
20841: LD_ADDR_VAR 0 6
20845: PUSH
20846: LD_VAR 0 7
20850: PUSH
20851: LD_VAR 0 9
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: ST_TO_ADDR
20863: GO 21007
// begin if result [ result ] [ 2 ] < tmp then
20865: LD_VAR 0 6
20869: PUSH
20870: LD_VAR 0 6
20874: ARRAY
20875: PUSH
20876: LD_INT 2
20878: ARRAY
20879: PUSH
20880: LD_VAR 0 9
20884: LESS
20885: IFFALSE 20927
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20887: LD_ADDR_VAR 0 6
20891: PUSH
20892: LD_VAR 0 6
20896: PPUSH
20897: LD_VAR 0 6
20901: PUSH
20902: LD_INT 1
20904: PLUS
20905: PPUSH
20906: LD_VAR 0 7
20910: PUSH
20911: LD_VAR 0 9
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PPUSH
20920: CALL_OW 2
20924: ST_TO_ADDR
20925: GO 21007
// for j = 1 to result do
20927: LD_ADDR_VAR 0 8
20931: PUSH
20932: DOUBLE
20933: LD_INT 1
20935: DEC
20936: ST_TO_ADDR
20937: LD_VAR 0 6
20941: PUSH
20942: FOR_TO
20943: IFFALSE 21005
// begin if tmp < result [ j ] [ 2 ] then
20945: LD_VAR 0 9
20949: PUSH
20950: LD_VAR 0 6
20954: PUSH
20955: LD_VAR 0 8
20959: ARRAY
20960: PUSH
20961: LD_INT 2
20963: ARRAY
20964: LESS
20965: IFFALSE 21003
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20967: LD_ADDR_VAR 0 6
20971: PUSH
20972: LD_VAR 0 6
20976: PPUSH
20977: LD_VAR 0 8
20981: PPUSH
20982: LD_VAR 0 7
20986: PUSH
20987: LD_VAR 0 9
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PPUSH
20996: CALL_OW 2
21000: ST_TO_ADDR
// break ;
21001: GO 21005
// end ; end ;
21003: GO 20942
21005: POP
21006: POP
// end ; end ;
21007: GO 20806
21009: POP
21010: POP
// if result and not asc then
21011: LD_VAR 0 6
21015: PUSH
21016: LD_VAR 0 4
21020: NOT
21021: AND
21022: IFFALSE 21097
// begin tmp := result ;
21024: LD_ADDR_VAR 0 9
21028: PUSH
21029: LD_VAR 0 6
21033: ST_TO_ADDR
// for i = tmp downto 1 do
21034: LD_ADDR_VAR 0 7
21038: PUSH
21039: DOUBLE
21040: LD_VAR 0 9
21044: INC
21045: ST_TO_ADDR
21046: LD_INT 1
21048: PUSH
21049: FOR_DOWNTO
21050: IFFALSE 21095
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21052: LD_ADDR_VAR 0 6
21056: PUSH
21057: LD_VAR 0 6
21061: PPUSH
21062: LD_VAR 0 9
21066: PUSH
21067: LD_VAR 0 7
21071: MINUS
21072: PUSH
21073: LD_INT 1
21075: PLUS
21076: PPUSH
21077: LD_VAR 0 9
21081: PUSH
21082: LD_VAR 0 7
21086: ARRAY
21087: PPUSH
21088: CALL_OW 1
21092: ST_TO_ADDR
21093: GO 21049
21095: POP
21096: POP
// end ; tmp := [ ] ;
21097: LD_ADDR_VAR 0 9
21101: PUSH
21102: EMPTY
21103: ST_TO_ADDR
// if mode then
21104: LD_VAR 0 5
21108: IFFALSE 21177
// begin for i = 1 to result do
21110: LD_ADDR_VAR 0 7
21114: PUSH
21115: DOUBLE
21116: LD_INT 1
21118: DEC
21119: ST_TO_ADDR
21120: LD_VAR 0 6
21124: PUSH
21125: FOR_TO
21126: IFFALSE 21165
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21128: LD_ADDR_VAR 0 9
21132: PUSH
21133: LD_VAR 0 9
21137: PPUSH
21138: LD_VAR 0 7
21142: PPUSH
21143: LD_VAR 0 6
21147: PUSH
21148: LD_VAR 0 7
21152: ARRAY
21153: PUSH
21154: LD_INT 1
21156: ARRAY
21157: PPUSH
21158: CALL_OW 1
21162: ST_TO_ADDR
21163: GO 21125
21165: POP
21166: POP
// result := tmp ;
21167: LD_ADDR_VAR 0 6
21171: PUSH
21172: LD_VAR 0 9
21176: ST_TO_ADDR
// end ; end ;
21177: LD_VAR 0 6
21181: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21182: LD_INT 0
21184: PPUSH
21185: PPUSH
21186: PPUSH
21187: PPUSH
21188: PPUSH
21189: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21190: LD_ADDR_VAR 0 5
21194: PUSH
21195: LD_INT 0
21197: PUSH
21198: LD_INT 0
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: EMPTY
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: ST_TO_ADDR
// if not x or not y then
21212: LD_VAR 0 2
21216: NOT
21217: PUSH
21218: LD_VAR 0 3
21222: NOT
21223: OR
21224: IFFALSE 21228
// exit ;
21226: GO 22878
// if not range then
21228: LD_VAR 0 4
21232: NOT
21233: IFFALSE 21243
// range := 10 ;
21235: LD_ADDR_VAR 0 4
21239: PUSH
21240: LD_INT 10
21242: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21243: LD_ADDR_VAR 0 8
21247: PUSH
21248: LD_INT 81
21250: PUSH
21251: LD_VAR 0 1
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 92
21262: PUSH
21263: LD_VAR 0 2
21267: PUSH
21268: LD_VAR 0 3
21272: PUSH
21273: LD_VAR 0 4
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 3
21286: PUSH
21287: LD_INT 21
21289: PUSH
21290: LD_INT 3
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: LIST
21305: PPUSH
21306: CALL_OW 69
21310: ST_TO_ADDR
// if not tmp then
21311: LD_VAR 0 8
21315: NOT
21316: IFFALSE 21320
// exit ;
21318: GO 22878
// for i in tmp do
21320: LD_ADDR_VAR 0 6
21324: PUSH
21325: LD_VAR 0 8
21329: PUSH
21330: FOR_IN
21331: IFFALSE 22853
// begin points := [ 0 , 0 , 0 ] ;
21333: LD_ADDR_VAR 0 9
21337: PUSH
21338: LD_INT 0
21340: PUSH
21341: LD_INT 0
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: ST_TO_ADDR
// bpoints := 1 ;
21352: LD_ADDR_VAR 0 10
21356: PUSH
21357: LD_INT 1
21359: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21360: LD_VAR 0 6
21364: PPUSH
21365: CALL_OW 247
21369: PUSH
21370: LD_INT 1
21372: DOUBLE
21373: EQUAL
21374: IFTRUE 21378
21376: GO 21956
21378: POP
// begin if GetClass ( i ) = 1 then
21379: LD_VAR 0 6
21383: PPUSH
21384: CALL_OW 257
21388: PUSH
21389: LD_INT 1
21391: EQUAL
21392: IFFALSE 21413
// points := [ 10 , 5 , 3 ] ;
21394: LD_ADDR_VAR 0 9
21398: PUSH
21399: LD_INT 10
21401: PUSH
21402: LD_INT 5
21404: PUSH
21405: LD_INT 3
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21413: LD_VAR 0 6
21417: PPUSH
21418: CALL_OW 257
21422: PUSH
21423: LD_INT 2
21425: PUSH
21426: LD_INT 3
21428: PUSH
21429: LD_INT 4
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: IN
21437: IFFALSE 21458
// points := [ 3 , 2 , 1 ] ;
21439: LD_ADDR_VAR 0 9
21443: PUSH
21444: LD_INT 3
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21458: LD_VAR 0 6
21462: PPUSH
21463: CALL_OW 257
21467: PUSH
21468: LD_INT 5
21470: EQUAL
21471: IFFALSE 21492
// points := [ 130 , 5 , 2 ] ;
21473: LD_ADDR_VAR 0 9
21477: PUSH
21478: LD_INT 130
21480: PUSH
21481: LD_INT 5
21483: PUSH
21484: LD_INT 2
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: LIST
21491: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21492: LD_VAR 0 6
21496: PPUSH
21497: CALL_OW 257
21501: PUSH
21502: LD_INT 8
21504: EQUAL
21505: IFFALSE 21526
// points := [ 35 , 35 , 30 ] ;
21507: LD_ADDR_VAR 0 9
21511: PUSH
21512: LD_INT 35
21514: PUSH
21515: LD_INT 35
21517: PUSH
21518: LD_INT 30
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21526: LD_VAR 0 6
21530: PPUSH
21531: CALL_OW 257
21535: PUSH
21536: LD_INT 9
21538: EQUAL
21539: IFFALSE 21560
// points := [ 20 , 55 , 40 ] ;
21541: LD_ADDR_VAR 0 9
21545: PUSH
21546: LD_INT 20
21548: PUSH
21549: LD_INT 55
21551: PUSH
21552: LD_INT 40
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21560: LD_VAR 0 6
21564: PPUSH
21565: CALL_OW 257
21569: PUSH
21570: LD_INT 12
21572: PUSH
21573: LD_INT 16
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: IN
21580: IFFALSE 21601
// points := [ 5 , 3 , 2 ] ;
21582: LD_ADDR_VAR 0 9
21586: PUSH
21587: LD_INT 5
21589: PUSH
21590: LD_INT 3
21592: PUSH
21593: LD_INT 2
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21601: LD_VAR 0 6
21605: PPUSH
21606: CALL_OW 257
21610: PUSH
21611: LD_INT 17
21613: EQUAL
21614: IFFALSE 21635
// points := [ 100 , 50 , 75 ] ;
21616: LD_ADDR_VAR 0 9
21620: PUSH
21621: LD_INT 100
21623: PUSH
21624: LD_INT 50
21626: PUSH
21627: LD_INT 75
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21635: LD_VAR 0 6
21639: PPUSH
21640: CALL_OW 257
21644: PUSH
21645: LD_INT 15
21647: EQUAL
21648: IFFALSE 21669
// points := [ 10 , 5 , 3 ] ;
21650: LD_ADDR_VAR 0 9
21654: PUSH
21655: LD_INT 10
21657: PUSH
21658: LD_INT 5
21660: PUSH
21661: LD_INT 3
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: LIST
21668: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21669: LD_VAR 0 6
21673: PPUSH
21674: CALL_OW 257
21678: PUSH
21679: LD_INT 14
21681: EQUAL
21682: IFFALSE 21703
// points := [ 10 , 0 , 0 ] ;
21684: LD_ADDR_VAR 0 9
21688: PUSH
21689: LD_INT 10
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: LIST
21702: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21703: LD_VAR 0 6
21707: PPUSH
21708: CALL_OW 257
21712: PUSH
21713: LD_INT 11
21715: EQUAL
21716: IFFALSE 21737
// points := [ 30 , 10 , 5 ] ;
21718: LD_ADDR_VAR 0 9
21722: PUSH
21723: LD_INT 30
21725: PUSH
21726: LD_INT 10
21728: PUSH
21729: LD_INT 5
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: LIST
21736: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21737: LD_VAR 0 1
21741: PPUSH
21742: LD_INT 5
21744: PPUSH
21745: CALL_OW 321
21749: PUSH
21750: LD_INT 2
21752: EQUAL
21753: IFFALSE 21770
// bpoints := bpoints * 1.8 ;
21755: LD_ADDR_VAR 0 10
21759: PUSH
21760: LD_VAR 0 10
21764: PUSH
21765: LD_REAL  1.80000000000000E+0000
21768: MUL
21769: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21770: LD_VAR 0 6
21774: PPUSH
21775: CALL_OW 257
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: LD_INT 3
21788: PUSH
21789: LD_INT 4
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: IN
21798: PUSH
21799: LD_VAR 0 1
21803: PPUSH
21804: LD_INT 51
21806: PPUSH
21807: CALL_OW 321
21811: PUSH
21812: LD_INT 2
21814: EQUAL
21815: AND
21816: IFFALSE 21833
// bpoints := bpoints * 1.2 ;
21818: LD_ADDR_VAR 0 10
21822: PUSH
21823: LD_VAR 0 10
21827: PUSH
21828: LD_REAL  1.20000000000000E+0000
21831: MUL
21832: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21833: LD_VAR 0 6
21837: PPUSH
21838: CALL_OW 257
21842: PUSH
21843: LD_INT 5
21845: PUSH
21846: LD_INT 7
21848: PUSH
21849: LD_INT 9
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: IN
21857: PUSH
21858: LD_VAR 0 1
21862: PPUSH
21863: LD_INT 52
21865: PPUSH
21866: CALL_OW 321
21870: PUSH
21871: LD_INT 2
21873: EQUAL
21874: AND
21875: IFFALSE 21892
// bpoints := bpoints * 1.5 ;
21877: LD_ADDR_VAR 0 10
21881: PUSH
21882: LD_VAR 0 10
21886: PUSH
21887: LD_REAL  1.50000000000000E+0000
21890: MUL
21891: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21892: LD_VAR 0 1
21896: PPUSH
21897: LD_INT 66
21899: PPUSH
21900: CALL_OW 321
21904: PUSH
21905: LD_INT 2
21907: EQUAL
21908: IFFALSE 21925
// bpoints := bpoints * 1.1 ;
21910: LD_ADDR_VAR 0 10
21914: PUSH
21915: LD_VAR 0 10
21919: PUSH
21920: LD_REAL  1.10000000000000E+0000
21923: MUL
21924: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21925: LD_ADDR_VAR 0 10
21929: PUSH
21930: LD_VAR 0 10
21934: PUSH
21935: LD_VAR 0 6
21939: PPUSH
21940: LD_INT 1
21942: PPUSH
21943: CALL_OW 259
21947: PUSH
21948: LD_REAL  1.15000000000000E+0000
21951: MUL
21952: MUL
21953: ST_TO_ADDR
// end ; unit_vehicle :
21954: GO 22782
21956: LD_INT 2
21958: DOUBLE
21959: EQUAL
21960: IFTRUE 21964
21962: GO 22770
21964: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21965: LD_VAR 0 6
21969: PPUSH
21970: CALL_OW 264
21974: PUSH
21975: LD_INT 2
21977: PUSH
21978: LD_INT 42
21980: PUSH
21981: LD_INT 24
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: IN
21989: IFFALSE 22010
// points := [ 25 , 5 , 3 ] ;
21991: LD_ADDR_VAR 0 9
21995: PUSH
21996: LD_INT 25
21998: PUSH
21999: LD_INT 5
22001: PUSH
22002: LD_INT 3
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22010: LD_VAR 0 6
22014: PPUSH
22015: CALL_OW 264
22019: PUSH
22020: LD_INT 4
22022: PUSH
22023: LD_INT 43
22025: PUSH
22026: LD_INT 25
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: IN
22034: IFFALSE 22055
// points := [ 40 , 15 , 5 ] ;
22036: LD_ADDR_VAR 0 9
22040: PUSH
22041: LD_INT 40
22043: PUSH
22044: LD_INT 15
22046: PUSH
22047: LD_INT 5
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22055: LD_VAR 0 6
22059: PPUSH
22060: CALL_OW 264
22064: PUSH
22065: LD_INT 3
22067: PUSH
22068: LD_INT 23
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: IN
22075: IFFALSE 22096
// points := [ 7 , 25 , 8 ] ;
22077: LD_ADDR_VAR 0 9
22081: PUSH
22082: LD_INT 7
22084: PUSH
22085: LD_INT 25
22087: PUSH
22088: LD_INT 8
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: LIST
22095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22096: LD_VAR 0 6
22100: PPUSH
22101: CALL_OW 264
22105: PUSH
22106: LD_INT 5
22108: PUSH
22109: LD_INT 27
22111: PUSH
22112: LD_INT 44
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: LIST
22119: IN
22120: IFFALSE 22141
// points := [ 14 , 50 , 16 ] ;
22122: LD_ADDR_VAR 0 9
22126: PUSH
22127: LD_INT 14
22129: PUSH
22130: LD_INT 50
22132: PUSH
22133: LD_INT 16
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22141: LD_VAR 0 6
22145: PPUSH
22146: CALL_OW 264
22150: PUSH
22151: LD_INT 6
22153: PUSH
22154: LD_INT 46
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: IN
22161: IFFALSE 22182
// points := [ 32 , 120 , 70 ] ;
22163: LD_ADDR_VAR 0 9
22167: PUSH
22168: LD_INT 32
22170: PUSH
22171: LD_INT 120
22173: PUSH
22174: LD_INT 70
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: LIST
22181: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22182: LD_VAR 0 6
22186: PPUSH
22187: CALL_OW 264
22191: PUSH
22192: LD_INT 7
22194: PUSH
22195: LD_INT 28
22197: PUSH
22198: LD_INT 45
22200: PUSH
22201: LD_INT 92
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: IN
22210: IFFALSE 22231
// points := [ 35 , 20 , 45 ] ;
22212: LD_ADDR_VAR 0 9
22216: PUSH
22217: LD_INT 35
22219: PUSH
22220: LD_INT 20
22222: PUSH
22223: LD_INT 45
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22231: LD_VAR 0 6
22235: PPUSH
22236: CALL_OW 264
22240: PUSH
22241: LD_INT 47
22243: PUSH
22244: EMPTY
22245: LIST
22246: IN
22247: IFFALSE 22268
// points := [ 67 , 45 , 75 ] ;
22249: LD_ADDR_VAR 0 9
22253: PUSH
22254: LD_INT 67
22256: PUSH
22257: LD_INT 45
22259: PUSH
22260: LD_INT 75
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22268: LD_VAR 0 6
22272: PPUSH
22273: CALL_OW 264
22277: PUSH
22278: LD_INT 26
22280: PUSH
22281: EMPTY
22282: LIST
22283: IN
22284: IFFALSE 22305
// points := [ 120 , 30 , 80 ] ;
22286: LD_ADDR_VAR 0 9
22290: PUSH
22291: LD_INT 120
22293: PUSH
22294: LD_INT 30
22296: PUSH
22297: LD_INT 80
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: LIST
22304: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22305: LD_VAR 0 6
22309: PPUSH
22310: CALL_OW 264
22314: PUSH
22315: LD_INT 22
22317: PUSH
22318: EMPTY
22319: LIST
22320: IN
22321: IFFALSE 22342
// points := [ 40 , 1 , 1 ] ;
22323: LD_ADDR_VAR 0 9
22327: PUSH
22328: LD_INT 40
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 1
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: LIST
22341: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22342: LD_VAR 0 6
22346: PPUSH
22347: CALL_OW 264
22351: PUSH
22352: LD_INT 29
22354: PUSH
22355: EMPTY
22356: LIST
22357: IN
22358: IFFALSE 22379
// points := [ 70 , 200 , 400 ] ;
22360: LD_ADDR_VAR 0 9
22364: PUSH
22365: LD_INT 70
22367: PUSH
22368: LD_INT 200
22370: PUSH
22371: LD_INT 400
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: LIST
22378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22379: LD_VAR 0 6
22383: PPUSH
22384: CALL_OW 264
22388: PUSH
22389: LD_INT 14
22391: PUSH
22392: LD_INT 53
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: IN
22399: IFFALSE 22420
// points := [ 40 , 10 , 20 ] ;
22401: LD_ADDR_VAR 0 9
22405: PUSH
22406: LD_INT 40
22408: PUSH
22409: LD_INT 10
22411: PUSH
22412: LD_INT 20
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22420: LD_VAR 0 6
22424: PPUSH
22425: CALL_OW 264
22429: PUSH
22430: LD_INT 9
22432: PUSH
22433: EMPTY
22434: LIST
22435: IN
22436: IFFALSE 22457
// points := [ 5 , 70 , 20 ] ;
22438: LD_ADDR_VAR 0 9
22442: PUSH
22443: LD_INT 5
22445: PUSH
22446: LD_INT 70
22448: PUSH
22449: LD_INT 20
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22457: LD_VAR 0 6
22461: PPUSH
22462: CALL_OW 264
22466: PUSH
22467: LD_INT 10
22469: PUSH
22470: EMPTY
22471: LIST
22472: IN
22473: IFFALSE 22494
// points := [ 35 , 110 , 70 ] ;
22475: LD_ADDR_VAR 0 9
22479: PUSH
22480: LD_INT 35
22482: PUSH
22483: LD_INT 110
22485: PUSH
22486: LD_INT 70
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22494: LD_VAR 0 6
22498: PPUSH
22499: CALL_OW 265
22503: PUSH
22504: LD_INT 25
22506: EQUAL
22507: IFFALSE 22528
// points := [ 80 , 65 , 100 ] ;
22509: LD_ADDR_VAR 0 9
22513: PUSH
22514: LD_INT 80
22516: PUSH
22517: LD_INT 65
22519: PUSH
22520: LD_INT 100
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22528: LD_VAR 0 6
22532: PPUSH
22533: CALL_OW 263
22537: PUSH
22538: LD_INT 1
22540: EQUAL
22541: IFFALSE 22576
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22543: LD_ADDR_VAR 0 10
22547: PUSH
22548: LD_VAR 0 10
22552: PUSH
22553: LD_VAR 0 6
22557: PPUSH
22558: CALL_OW 311
22562: PPUSH
22563: LD_INT 3
22565: PPUSH
22566: CALL_OW 259
22570: PUSH
22571: LD_INT 4
22573: MUL
22574: MUL
22575: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22576: LD_VAR 0 6
22580: PPUSH
22581: CALL_OW 263
22585: PUSH
22586: LD_INT 2
22588: EQUAL
22589: IFFALSE 22640
// begin j := IsControledBy ( i ) ;
22591: LD_ADDR_VAR 0 7
22595: PUSH
22596: LD_VAR 0 6
22600: PPUSH
22601: CALL_OW 312
22605: ST_TO_ADDR
// if j then
22606: LD_VAR 0 7
22610: IFFALSE 22640
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22612: LD_ADDR_VAR 0 10
22616: PUSH
22617: LD_VAR 0 10
22621: PUSH
22622: LD_VAR 0 7
22626: PPUSH
22627: LD_INT 3
22629: PPUSH
22630: CALL_OW 259
22634: PUSH
22635: LD_INT 3
22637: MUL
22638: MUL
22639: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22640: LD_VAR 0 6
22644: PPUSH
22645: CALL_OW 264
22649: PUSH
22650: LD_INT 5
22652: PUSH
22653: LD_INT 6
22655: PUSH
22656: LD_INT 46
22658: PUSH
22659: LD_INT 44
22661: PUSH
22662: LD_INT 47
22664: PUSH
22665: LD_INT 45
22667: PUSH
22668: LD_INT 28
22670: PUSH
22671: LD_INT 7
22673: PUSH
22674: LD_INT 27
22676: PUSH
22677: LD_INT 29
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: IN
22692: PUSH
22693: LD_VAR 0 1
22697: PPUSH
22698: LD_INT 52
22700: PPUSH
22701: CALL_OW 321
22705: PUSH
22706: LD_INT 2
22708: EQUAL
22709: AND
22710: IFFALSE 22727
// bpoints := bpoints * 1.2 ;
22712: LD_ADDR_VAR 0 10
22716: PUSH
22717: LD_VAR 0 10
22721: PUSH
22722: LD_REAL  1.20000000000000E+0000
22725: MUL
22726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22727: LD_VAR 0 6
22731: PPUSH
22732: CALL_OW 264
22736: PUSH
22737: LD_INT 6
22739: PUSH
22740: LD_INT 46
22742: PUSH
22743: LD_INT 47
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: LIST
22750: IN
22751: IFFALSE 22768
// bpoints := bpoints * 1.2 ;
22753: LD_ADDR_VAR 0 10
22757: PUSH
22758: LD_VAR 0 10
22762: PUSH
22763: LD_REAL  1.20000000000000E+0000
22766: MUL
22767: ST_TO_ADDR
// end ; unit_building :
22768: GO 22782
22770: LD_INT 3
22772: DOUBLE
22773: EQUAL
22774: IFTRUE 22778
22776: GO 22781
22778: POP
// ; end ;
22779: GO 22782
22781: POP
// for j = 1 to 3 do
22782: LD_ADDR_VAR 0 7
22786: PUSH
22787: DOUBLE
22788: LD_INT 1
22790: DEC
22791: ST_TO_ADDR
22792: LD_INT 3
22794: PUSH
22795: FOR_TO
22796: IFFALSE 22849
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22798: LD_ADDR_VAR 0 5
22802: PUSH
22803: LD_VAR 0 5
22807: PPUSH
22808: LD_VAR 0 7
22812: PPUSH
22813: LD_VAR 0 5
22817: PUSH
22818: LD_VAR 0 7
22822: ARRAY
22823: PUSH
22824: LD_VAR 0 9
22828: PUSH
22829: LD_VAR 0 7
22833: ARRAY
22834: PUSH
22835: LD_VAR 0 10
22839: MUL
22840: PLUS
22841: PPUSH
22842: CALL_OW 1
22846: ST_TO_ADDR
22847: GO 22795
22849: POP
22850: POP
// end ;
22851: GO 21330
22853: POP
22854: POP
// result := Replace ( result , 4 , tmp ) ;
22855: LD_ADDR_VAR 0 5
22859: PUSH
22860: LD_VAR 0 5
22864: PPUSH
22865: LD_INT 4
22867: PPUSH
22868: LD_VAR 0 8
22872: PPUSH
22873: CALL_OW 1
22877: ST_TO_ADDR
// end ;
22878: LD_VAR 0 5
22882: RET
// export function DangerAtRange ( unit , range ) ; begin
22883: LD_INT 0
22885: PPUSH
// if not unit then
22886: LD_VAR 0 1
22890: NOT
22891: IFFALSE 22895
// exit ;
22893: GO 22940
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22895: LD_ADDR_VAR 0 3
22899: PUSH
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL_OW 255
22909: PPUSH
22910: LD_VAR 0 1
22914: PPUSH
22915: CALL_OW 250
22919: PPUSH
22920: LD_VAR 0 1
22924: PPUSH
22925: CALL_OW 251
22929: PPUSH
22930: LD_VAR 0 2
22934: PPUSH
22935: CALL 21182 0 4
22939: ST_TO_ADDR
// end ;
22940: LD_VAR 0 3
22944: RET
// export function DangerInArea ( side , area ) ; begin
22945: LD_INT 0
22947: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22948: LD_ADDR_VAR 0 3
22952: PUSH
22953: LD_VAR 0 2
22957: PPUSH
22958: LD_INT 81
22960: PUSH
22961: LD_VAR 0 1
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PPUSH
22970: CALL_OW 70
22974: ST_TO_ADDR
// end ;
22975: LD_VAR 0 3
22979: RET
// export function IsExtension ( b ) ; begin
22980: LD_INT 0
22982: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22983: LD_ADDR_VAR 0 2
22987: PUSH
22988: LD_VAR 0 1
22992: PUSH
22993: LD_INT 23
22995: PUSH
22996: LD_INT 20
22998: PUSH
22999: LD_INT 22
23001: PUSH
23002: LD_INT 17
23004: PUSH
23005: LD_INT 24
23007: PUSH
23008: LD_INT 21
23010: PUSH
23011: LD_INT 19
23013: PUSH
23014: LD_INT 16
23016: PUSH
23017: LD_INT 25
23019: PUSH
23020: LD_INT 18
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: IN
23035: ST_TO_ADDR
// end ;
23036: LD_VAR 0 2
23040: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23041: LD_INT 0
23043: PPUSH
23044: PPUSH
23045: PPUSH
// result := [ ] ;
23046: LD_ADDR_VAR 0 4
23050: PUSH
23051: EMPTY
23052: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23053: LD_ADDR_VAR 0 5
23057: PUSH
23058: LD_VAR 0 2
23062: PPUSH
23063: LD_INT 21
23065: PUSH
23066: LD_INT 3
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PPUSH
23073: CALL_OW 70
23077: ST_TO_ADDR
// if not tmp then
23078: LD_VAR 0 5
23082: NOT
23083: IFFALSE 23087
// exit ;
23085: GO 23151
// if checkLink then
23087: LD_VAR 0 3
23091: IFFALSE 23141
// begin for i in tmp do
23093: LD_ADDR_VAR 0 6
23097: PUSH
23098: LD_VAR 0 5
23102: PUSH
23103: FOR_IN
23104: IFFALSE 23139
// if GetBase ( i ) <> base then
23106: LD_VAR 0 6
23110: PPUSH
23111: CALL_OW 274
23115: PUSH
23116: LD_VAR 0 1
23120: NONEQUAL
23121: IFFALSE 23137
// ComLinkToBase ( base , i ) ;
23123: LD_VAR 0 1
23127: PPUSH
23128: LD_VAR 0 6
23132: PPUSH
23133: CALL_OW 169
23137: GO 23103
23139: POP
23140: POP
// end ; result := tmp ;
23141: LD_ADDR_VAR 0 4
23145: PUSH
23146: LD_VAR 0 5
23150: ST_TO_ADDR
// end ;
23151: LD_VAR 0 4
23155: RET
// export function ComComplete ( units , b ) ; var i ; begin
23156: LD_INT 0
23158: PPUSH
23159: PPUSH
// if not units then
23160: LD_VAR 0 1
23164: NOT
23165: IFFALSE 23169
// exit ;
23167: GO 23259
// for i in units do
23169: LD_ADDR_VAR 0 4
23173: PUSH
23174: LD_VAR 0 1
23178: PUSH
23179: FOR_IN
23180: IFFALSE 23257
// if BuildingStatus ( b ) = bs_build then
23182: LD_VAR 0 2
23186: PPUSH
23187: CALL_OW 461
23191: PUSH
23192: LD_INT 1
23194: EQUAL
23195: IFFALSE 23255
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23197: LD_VAR 0 4
23201: PPUSH
23202: LD_STRING h
23204: PUSH
23205: LD_VAR 0 2
23209: PPUSH
23210: CALL_OW 250
23214: PUSH
23215: LD_VAR 0 2
23219: PPUSH
23220: CALL_OW 251
23224: PUSH
23225: LD_VAR 0 2
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 0
23235: PUSH
23236: LD_INT 0
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: PUSH
23248: EMPTY
23249: LIST
23250: PPUSH
23251: CALL_OW 446
23255: GO 23179
23257: POP
23258: POP
// end ;
23259: LD_VAR 0 3
23263: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23264: LD_INT 0
23266: PPUSH
23267: PPUSH
23268: PPUSH
23269: PPUSH
23270: PPUSH
23271: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23272: LD_VAR 0 1
23276: NOT
23277: PUSH
23278: LD_VAR 0 1
23282: PPUSH
23283: CALL_OW 263
23287: PUSH
23288: LD_INT 2
23290: NONEQUAL
23291: OR
23292: IFFALSE 23296
// exit ;
23294: GO 23612
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23296: LD_ADDR_VAR 0 6
23300: PUSH
23301: LD_INT 22
23303: PUSH
23304: LD_VAR 0 1
23308: PPUSH
23309: CALL_OW 255
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: LD_INT 30
23323: PUSH
23324: LD_INT 36
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 34
23333: PUSH
23334: LD_INT 31
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PPUSH
23350: CALL_OW 69
23354: ST_TO_ADDR
// if not tmp then
23355: LD_VAR 0 6
23359: NOT
23360: IFFALSE 23364
// exit ;
23362: GO 23612
// result := [ ] ;
23364: LD_ADDR_VAR 0 2
23368: PUSH
23369: EMPTY
23370: ST_TO_ADDR
// for i in tmp do
23371: LD_ADDR_VAR 0 3
23375: PUSH
23376: LD_VAR 0 6
23380: PUSH
23381: FOR_IN
23382: IFFALSE 23453
// begin t := UnitsInside ( i ) ;
23384: LD_ADDR_VAR 0 4
23388: PUSH
23389: LD_VAR 0 3
23393: PPUSH
23394: CALL_OW 313
23398: ST_TO_ADDR
// if t then
23399: LD_VAR 0 4
23403: IFFALSE 23451
// for j in t do
23405: LD_ADDR_VAR 0 7
23409: PUSH
23410: LD_VAR 0 4
23414: PUSH
23415: FOR_IN
23416: IFFALSE 23449
// result := Replace ( result , result + 1 , j ) ;
23418: LD_ADDR_VAR 0 2
23422: PUSH
23423: LD_VAR 0 2
23427: PPUSH
23428: LD_VAR 0 2
23432: PUSH
23433: LD_INT 1
23435: PLUS
23436: PPUSH
23437: LD_VAR 0 7
23441: PPUSH
23442: CALL_OW 1
23446: ST_TO_ADDR
23447: GO 23415
23449: POP
23450: POP
// end ;
23451: GO 23381
23453: POP
23454: POP
// if not result then
23455: LD_VAR 0 2
23459: NOT
23460: IFFALSE 23464
// exit ;
23462: GO 23612
// mech := result [ 1 ] ;
23464: LD_ADDR_VAR 0 5
23468: PUSH
23469: LD_VAR 0 2
23473: PUSH
23474: LD_INT 1
23476: ARRAY
23477: ST_TO_ADDR
// if result > 1 then
23478: LD_VAR 0 2
23482: PUSH
23483: LD_INT 1
23485: GREATER
23486: IFFALSE 23598
// begin for i = 2 to result do
23488: LD_ADDR_VAR 0 3
23492: PUSH
23493: DOUBLE
23494: LD_INT 2
23496: DEC
23497: ST_TO_ADDR
23498: LD_VAR 0 2
23502: PUSH
23503: FOR_TO
23504: IFFALSE 23596
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23506: LD_ADDR_VAR 0 4
23510: PUSH
23511: LD_VAR 0 2
23515: PUSH
23516: LD_VAR 0 3
23520: ARRAY
23521: PPUSH
23522: LD_INT 3
23524: PPUSH
23525: CALL_OW 259
23529: PUSH
23530: LD_VAR 0 2
23534: PUSH
23535: LD_VAR 0 3
23539: ARRAY
23540: PPUSH
23541: CALL_OW 432
23545: MINUS
23546: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23547: LD_VAR 0 4
23551: PUSH
23552: LD_VAR 0 5
23556: PPUSH
23557: LD_INT 3
23559: PPUSH
23560: CALL_OW 259
23564: PUSH
23565: LD_VAR 0 5
23569: PPUSH
23570: CALL_OW 432
23574: MINUS
23575: GREATEREQUAL
23576: IFFALSE 23594
// mech := result [ i ] ;
23578: LD_ADDR_VAR 0 5
23582: PUSH
23583: LD_VAR 0 2
23587: PUSH
23588: LD_VAR 0 3
23592: ARRAY
23593: ST_TO_ADDR
// end ;
23594: GO 23503
23596: POP
23597: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23598: LD_VAR 0 1
23602: PPUSH
23603: LD_VAR 0 5
23607: PPUSH
23608: CALL_OW 135
// end ;
23612: LD_VAR 0 2
23616: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23617: LD_INT 0
23619: PPUSH
23620: PPUSH
23621: PPUSH
23622: PPUSH
23623: PPUSH
23624: PPUSH
23625: PPUSH
23626: PPUSH
23627: PPUSH
23628: PPUSH
23629: PPUSH
23630: PPUSH
23631: PPUSH
// result := [ ] ;
23632: LD_ADDR_VAR 0 7
23636: PUSH
23637: EMPTY
23638: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23639: LD_VAR 0 1
23643: PPUSH
23644: CALL_OW 266
23648: PUSH
23649: LD_INT 0
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: IN
23659: NOT
23660: IFFALSE 23664
// exit ;
23662: GO 25298
// if name then
23664: LD_VAR 0 3
23668: IFFALSE 23684
// SetBName ( base_dep , name ) ;
23670: LD_VAR 0 1
23674: PPUSH
23675: LD_VAR 0 3
23679: PPUSH
23680: CALL_OW 500
// base := GetBase ( base_dep ) ;
23684: LD_ADDR_VAR 0 15
23688: PUSH
23689: LD_VAR 0 1
23693: PPUSH
23694: CALL_OW 274
23698: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23699: LD_ADDR_VAR 0 16
23703: PUSH
23704: LD_VAR 0 1
23708: PPUSH
23709: CALL_OW 255
23713: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23714: LD_ADDR_VAR 0 17
23718: PUSH
23719: LD_VAR 0 1
23723: PPUSH
23724: CALL_OW 248
23728: ST_TO_ADDR
// if sources then
23729: LD_VAR 0 5
23733: IFFALSE 23780
// for i = 1 to 3 do
23735: LD_ADDR_VAR 0 8
23739: PUSH
23740: DOUBLE
23741: LD_INT 1
23743: DEC
23744: ST_TO_ADDR
23745: LD_INT 3
23747: PUSH
23748: FOR_TO
23749: IFFALSE 23778
// AddResourceType ( base , i , sources [ i ] ) ;
23751: LD_VAR 0 15
23755: PPUSH
23756: LD_VAR 0 8
23760: PPUSH
23761: LD_VAR 0 5
23765: PUSH
23766: LD_VAR 0 8
23770: ARRAY
23771: PPUSH
23772: CALL_OW 276
23776: GO 23748
23778: POP
23779: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23780: LD_ADDR_VAR 0 18
23784: PUSH
23785: LD_VAR 0 15
23789: PPUSH
23790: LD_VAR 0 2
23794: PPUSH
23795: LD_INT 1
23797: PPUSH
23798: CALL 23041 0 3
23802: ST_TO_ADDR
// InitHc ;
23803: CALL_OW 19
// InitUc ;
23807: CALL_OW 18
// uc_side := side ;
23811: LD_ADDR_OWVAR 20
23815: PUSH
23816: LD_VAR 0 16
23820: ST_TO_ADDR
// uc_nation := nation ;
23821: LD_ADDR_OWVAR 21
23825: PUSH
23826: LD_VAR 0 17
23830: ST_TO_ADDR
// if buildings then
23831: LD_VAR 0 18
23835: IFFALSE 25157
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23837: LD_ADDR_VAR 0 19
23841: PUSH
23842: LD_VAR 0 18
23846: PPUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 30
23852: PUSH
23853: LD_INT 29
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 30
23862: PUSH
23863: LD_INT 30
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: LIST
23874: PPUSH
23875: CALL_OW 72
23879: ST_TO_ADDR
// if tmp then
23880: LD_VAR 0 19
23884: IFFALSE 23932
// for i in tmp do
23886: LD_ADDR_VAR 0 8
23890: PUSH
23891: LD_VAR 0 19
23895: PUSH
23896: FOR_IN
23897: IFFALSE 23930
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23899: LD_VAR 0 8
23903: PPUSH
23904: CALL_OW 250
23908: PPUSH
23909: LD_VAR 0 8
23913: PPUSH
23914: CALL_OW 251
23918: PPUSH
23919: LD_VAR 0 16
23923: PPUSH
23924: CALL_OW 441
23928: GO 23896
23930: POP
23931: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23932: LD_VAR 0 18
23936: PPUSH
23937: LD_INT 2
23939: PUSH
23940: LD_INT 30
23942: PUSH
23943: LD_INT 32
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 30
23952: PUSH
23953: LD_INT 33
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: PPUSH
23965: CALL_OW 72
23969: IFFALSE 24057
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23971: LD_ADDR_VAR 0 8
23975: PUSH
23976: LD_VAR 0 18
23980: PPUSH
23981: LD_INT 2
23983: PUSH
23984: LD_INT 30
23986: PUSH
23987: LD_INT 32
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 30
23996: PUSH
23997: LD_INT 33
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: LIST
24008: PPUSH
24009: CALL_OW 72
24013: PUSH
24014: FOR_IN
24015: IFFALSE 24055
// begin if not GetBWeapon ( i ) then
24017: LD_VAR 0 8
24021: PPUSH
24022: CALL_OW 269
24026: NOT
24027: IFFALSE 24053
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24029: LD_VAR 0 8
24033: PPUSH
24034: LD_VAR 0 8
24038: PPUSH
24039: LD_VAR 0 2
24043: PPUSH
24044: CALL 25303 0 2
24048: PPUSH
24049: CALL_OW 431
// end ;
24053: GO 24014
24055: POP
24056: POP
// end ; for i = 1 to personel do
24057: LD_ADDR_VAR 0 8
24061: PUSH
24062: DOUBLE
24063: LD_INT 1
24065: DEC
24066: ST_TO_ADDR
24067: LD_VAR 0 6
24071: PUSH
24072: FOR_TO
24073: IFFALSE 25137
// begin if i > 4 then
24075: LD_VAR 0 8
24079: PUSH
24080: LD_INT 4
24082: GREATER
24083: IFFALSE 24087
// break ;
24085: GO 25137
// case i of 1 :
24087: LD_VAR 0 8
24091: PUSH
24092: LD_INT 1
24094: DOUBLE
24095: EQUAL
24096: IFTRUE 24100
24098: GO 24180
24100: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24101: LD_ADDR_VAR 0 12
24105: PUSH
24106: LD_VAR 0 18
24110: PPUSH
24111: LD_INT 22
24113: PUSH
24114: LD_VAR 0 16
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 58
24125: PUSH
24126: EMPTY
24127: LIST
24128: PUSH
24129: LD_INT 2
24131: PUSH
24132: LD_INT 30
24134: PUSH
24135: LD_INT 32
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 30
24144: PUSH
24145: LD_INT 4
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 30
24154: PUSH
24155: LD_INT 5
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: PPUSH
24173: CALL_OW 72
24177: ST_TO_ADDR
24178: GO 24402
24180: LD_INT 2
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24250
24188: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24189: LD_ADDR_VAR 0 12
24193: PUSH
24194: LD_VAR 0 18
24198: PPUSH
24199: LD_INT 22
24201: PUSH
24202: LD_VAR 0 16
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 30
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 30
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PPUSH
24243: CALL_OW 72
24247: ST_TO_ADDR
24248: GO 24402
24250: LD_INT 3
24252: DOUBLE
24253: EQUAL
24254: IFTRUE 24258
24256: GO 24320
24258: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24259: LD_ADDR_VAR 0 12
24263: PUSH
24264: LD_VAR 0 18
24268: PPUSH
24269: LD_INT 22
24271: PUSH
24272: LD_VAR 0 16
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 2
24283: PUSH
24284: LD_INT 30
24286: PUSH
24287: LD_INT 2
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 30
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PPUSH
24313: CALL_OW 72
24317: ST_TO_ADDR
24318: GO 24402
24320: LD_INT 4
24322: DOUBLE
24323: EQUAL
24324: IFTRUE 24328
24326: GO 24401
24328: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24329: LD_ADDR_VAR 0 12
24333: PUSH
24334: LD_VAR 0 18
24338: PPUSH
24339: LD_INT 22
24341: PUSH
24342: LD_VAR 0 16
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: LD_INT 30
24356: PUSH
24357: LD_INT 6
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 30
24366: PUSH
24367: LD_INT 7
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 30
24376: PUSH
24377: LD_INT 8
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PPUSH
24394: CALL_OW 72
24398: ST_TO_ADDR
24399: GO 24402
24401: POP
// if i = 1 then
24402: LD_VAR 0 8
24406: PUSH
24407: LD_INT 1
24409: EQUAL
24410: IFFALSE 24521
// begin tmp := [ ] ;
24412: LD_ADDR_VAR 0 19
24416: PUSH
24417: EMPTY
24418: ST_TO_ADDR
// for j in f do
24419: LD_ADDR_VAR 0 9
24423: PUSH
24424: LD_VAR 0 12
24428: PUSH
24429: FOR_IN
24430: IFFALSE 24503
// if GetBType ( j ) = b_bunker then
24432: LD_VAR 0 9
24436: PPUSH
24437: CALL_OW 266
24441: PUSH
24442: LD_INT 32
24444: EQUAL
24445: IFFALSE 24472
// tmp := Insert ( tmp , 1 , j ) else
24447: LD_ADDR_VAR 0 19
24451: PUSH
24452: LD_VAR 0 19
24456: PPUSH
24457: LD_INT 1
24459: PPUSH
24460: LD_VAR 0 9
24464: PPUSH
24465: CALL_OW 2
24469: ST_TO_ADDR
24470: GO 24501
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24472: LD_ADDR_VAR 0 19
24476: PUSH
24477: LD_VAR 0 19
24481: PPUSH
24482: LD_VAR 0 19
24486: PUSH
24487: LD_INT 1
24489: PLUS
24490: PPUSH
24491: LD_VAR 0 9
24495: PPUSH
24496: CALL_OW 2
24500: ST_TO_ADDR
24501: GO 24429
24503: POP
24504: POP
// if tmp then
24505: LD_VAR 0 19
24509: IFFALSE 24521
// f := tmp ;
24511: LD_ADDR_VAR 0 12
24515: PUSH
24516: LD_VAR 0 19
24520: ST_TO_ADDR
// end ; x := personel [ i ] ;
24521: LD_ADDR_VAR 0 13
24525: PUSH
24526: LD_VAR 0 6
24530: PUSH
24531: LD_VAR 0 8
24535: ARRAY
24536: ST_TO_ADDR
// if x = - 1 then
24537: LD_VAR 0 13
24541: PUSH
24542: LD_INT 1
24544: NEG
24545: EQUAL
24546: IFFALSE 24755
// begin for j in f do
24548: LD_ADDR_VAR 0 9
24552: PUSH
24553: LD_VAR 0 12
24557: PUSH
24558: FOR_IN
24559: IFFALSE 24751
// repeat InitHc ;
24561: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24565: LD_VAR 0 9
24569: PPUSH
24570: CALL_OW 266
24574: PUSH
24575: LD_INT 5
24577: EQUAL
24578: IFFALSE 24648
// begin if UnitsInside ( j ) < 3 then
24580: LD_VAR 0 9
24584: PPUSH
24585: CALL_OW 313
24589: PUSH
24590: LD_INT 3
24592: LESS
24593: IFFALSE 24629
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24595: LD_INT 0
24597: PPUSH
24598: LD_INT 5
24600: PUSH
24601: LD_INT 8
24603: PUSH
24604: LD_INT 9
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: LIST
24611: PUSH
24612: LD_VAR 0 17
24616: ARRAY
24617: PPUSH
24618: LD_VAR 0 4
24622: PPUSH
24623: CALL_OW 380
24627: GO 24646
// PrepareHuman ( false , i , skill ) ;
24629: LD_INT 0
24631: PPUSH
24632: LD_VAR 0 8
24636: PPUSH
24637: LD_VAR 0 4
24641: PPUSH
24642: CALL_OW 380
// end else
24646: GO 24665
// PrepareHuman ( false , i , skill ) ;
24648: LD_INT 0
24650: PPUSH
24651: LD_VAR 0 8
24655: PPUSH
24656: LD_VAR 0 4
24660: PPUSH
24661: CALL_OW 380
// un := CreateHuman ;
24665: LD_ADDR_VAR 0 14
24669: PUSH
24670: CALL_OW 44
24674: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24675: LD_ADDR_VAR 0 7
24679: PUSH
24680: LD_VAR 0 7
24684: PPUSH
24685: LD_INT 1
24687: PPUSH
24688: LD_VAR 0 14
24692: PPUSH
24693: CALL_OW 2
24697: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24698: LD_VAR 0 14
24702: PPUSH
24703: LD_VAR 0 9
24707: PPUSH
24708: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24712: LD_VAR 0 9
24716: PPUSH
24717: CALL_OW 313
24721: PUSH
24722: LD_INT 6
24724: EQUAL
24725: PUSH
24726: LD_VAR 0 9
24730: PPUSH
24731: CALL_OW 266
24735: PUSH
24736: LD_INT 32
24738: PUSH
24739: LD_INT 31
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: IN
24746: OR
24747: IFFALSE 24561
24749: GO 24558
24751: POP
24752: POP
// end else
24753: GO 25135
// for j = 1 to x do
24755: LD_ADDR_VAR 0 9
24759: PUSH
24760: DOUBLE
24761: LD_INT 1
24763: DEC
24764: ST_TO_ADDR
24765: LD_VAR 0 13
24769: PUSH
24770: FOR_TO
24771: IFFALSE 25133
// begin InitHc ;
24773: CALL_OW 19
// if not f then
24777: LD_VAR 0 12
24781: NOT
24782: IFFALSE 24871
// begin PrepareHuman ( false , i , skill ) ;
24784: LD_INT 0
24786: PPUSH
24787: LD_VAR 0 8
24791: PPUSH
24792: LD_VAR 0 4
24796: PPUSH
24797: CALL_OW 380
// un := CreateHuman ;
24801: LD_ADDR_VAR 0 14
24805: PUSH
24806: CALL_OW 44
24810: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24811: LD_ADDR_VAR 0 7
24815: PUSH
24816: LD_VAR 0 7
24820: PPUSH
24821: LD_INT 1
24823: PPUSH
24824: LD_VAR 0 14
24828: PPUSH
24829: CALL_OW 2
24833: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24834: LD_VAR 0 14
24838: PPUSH
24839: LD_VAR 0 1
24843: PPUSH
24844: CALL_OW 250
24848: PPUSH
24849: LD_VAR 0 1
24853: PPUSH
24854: CALL_OW 251
24858: PPUSH
24859: LD_INT 10
24861: PPUSH
24862: LD_INT 0
24864: PPUSH
24865: CALL_OW 50
// continue ;
24869: GO 24770
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24871: LD_VAR 0 12
24875: PUSH
24876: LD_INT 1
24878: ARRAY
24879: PPUSH
24880: CALL_OW 313
24884: PUSH
24885: LD_VAR 0 12
24889: PUSH
24890: LD_INT 1
24892: ARRAY
24893: PPUSH
24894: CALL_OW 266
24898: PUSH
24899: LD_INT 32
24901: PUSH
24902: LD_INT 31
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: IN
24909: AND
24910: PUSH
24911: LD_VAR 0 12
24915: PUSH
24916: LD_INT 1
24918: ARRAY
24919: PPUSH
24920: CALL_OW 313
24924: PUSH
24925: LD_INT 6
24927: EQUAL
24928: OR
24929: IFFALSE 24949
// f := Delete ( f , 1 ) ;
24931: LD_ADDR_VAR 0 12
24935: PUSH
24936: LD_VAR 0 12
24940: PPUSH
24941: LD_INT 1
24943: PPUSH
24944: CALL_OW 3
24948: ST_TO_ADDR
// if not f then
24949: LD_VAR 0 12
24953: NOT
24954: IFFALSE 24972
// begin x := x + 2 ;
24956: LD_ADDR_VAR 0 13
24960: PUSH
24961: LD_VAR 0 13
24965: PUSH
24966: LD_INT 2
24968: PLUS
24969: ST_TO_ADDR
// continue ;
24970: GO 24770
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24972: LD_VAR 0 12
24976: PUSH
24977: LD_INT 1
24979: ARRAY
24980: PPUSH
24981: CALL_OW 266
24985: PUSH
24986: LD_INT 5
24988: EQUAL
24989: IFFALSE 25063
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24991: LD_VAR 0 12
24995: PUSH
24996: LD_INT 1
24998: ARRAY
24999: PPUSH
25000: CALL_OW 313
25004: PUSH
25005: LD_INT 3
25007: LESS
25008: IFFALSE 25044
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25010: LD_INT 0
25012: PPUSH
25013: LD_INT 5
25015: PUSH
25016: LD_INT 8
25018: PUSH
25019: LD_INT 9
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: LIST
25026: PUSH
25027: LD_VAR 0 17
25031: ARRAY
25032: PPUSH
25033: LD_VAR 0 4
25037: PPUSH
25038: CALL_OW 380
25042: GO 25061
// PrepareHuman ( false , i , skill ) ;
25044: LD_INT 0
25046: PPUSH
25047: LD_VAR 0 8
25051: PPUSH
25052: LD_VAR 0 4
25056: PPUSH
25057: CALL_OW 380
// end else
25061: GO 25080
// PrepareHuman ( false , i , skill ) ;
25063: LD_INT 0
25065: PPUSH
25066: LD_VAR 0 8
25070: PPUSH
25071: LD_VAR 0 4
25075: PPUSH
25076: CALL_OW 380
// un := CreateHuman ;
25080: LD_ADDR_VAR 0 14
25084: PUSH
25085: CALL_OW 44
25089: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25090: LD_ADDR_VAR 0 7
25094: PUSH
25095: LD_VAR 0 7
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: LD_VAR 0 14
25107: PPUSH
25108: CALL_OW 2
25112: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25113: LD_VAR 0 14
25117: PPUSH
25118: LD_VAR 0 12
25122: PUSH
25123: LD_INT 1
25125: ARRAY
25126: PPUSH
25127: CALL_OW 52
// end ;
25131: GO 24770
25133: POP
25134: POP
// end ;
25135: GO 24072
25137: POP
25138: POP
// result := result ^ buildings ;
25139: LD_ADDR_VAR 0 7
25143: PUSH
25144: LD_VAR 0 7
25148: PUSH
25149: LD_VAR 0 18
25153: ADD
25154: ST_TO_ADDR
// end else
25155: GO 25298
// begin for i = 1 to personel do
25157: LD_ADDR_VAR 0 8
25161: PUSH
25162: DOUBLE
25163: LD_INT 1
25165: DEC
25166: ST_TO_ADDR
25167: LD_VAR 0 6
25171: PUSH
25172: FOR_TO
25173: IFFALSE 25296
// begin if i > 4 then
25175: LD_VAR 0 8
25179: PUSH
25180: LD_INT 4
25182: GREATER
25183: IFFALSE 25187
// break ;
25185: GO 25296
// x := personel [ i ] ;
25187: LD_ADDR_VAR 0 13
25191: PUSH
25192: LD_VAR 0 6
25196: PUSH
25197: LD_VAR 0 8
25201: ARRAY
25202: ST_TO_ADDR
// if x = - 1 then
25203: LD_VAR 0 13
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: EQUAL
25212: IFFALSE 25216
// continue ;
25214: GO 25172
// PrepareHuman ( false , i , skill ) ;
25216: LD_INT 0
25218: PPUSH
25219: LD_VAR 0 8
25223: PPUSH
25224: LD_VAR 0 4
25228: PPUSH
25229: CALL_OW 380
// un := CreateHuman ;
25233: LD_ADDR_VAR 0 14
25237: PUSH
25238: CALL_OW 44
25242: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25243: LD_VAR 0 14
25247: PPUSH
25248: LD_VAR 0 1
25252: PPUSH
25253: CALL_OW 250
25257: PPUSH
25258: LD_VAR 0 1
25262: PPUSH
25263: CALL_OW 251
25267: PPUSH
25268: LD_INT 10
25270: PPUSH
25271: LD_INT 0
25273: PPUSH
25274: CALL_OW 50
// result := result ^ un ;
25278: LD_ADDR_VAR 0 7
25282: PUSH
25283: LD_VAR 0 7
25287: PUSH
25288: LD_VAR 0 14
25292: ADD
25293: ST_TO_ADDR
// end ;
25294: GO 25172
25296: POP
25297: POP
// end ; end ;
25298: LD_VAR 0 7
25302: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25303: LD_INT 0
25305: PPUSH
25306: PPUSH
25307: PPUSH
25308: PPUSH
25309: PPUSH
25310: PPUSH
25311: PPUSH
25312: PPUSH
25313: PPUSH
25314: PPUSH
25315: PPUSH
25316: PPUSH
25317: PPUSH
25318: PPUSH
25319: PPUSH
25320: PPUSH
// result := false ;
25321: LD_ADDR_VAR 0 3
25325: PUSH
25326: LD_INT 0
25328: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25329: LD_VAR 0 1
25333: NOT
25334: PUSH
25335: LD_VAR 0 1
25339: PPUSH
25340: CALL_OW 266
25344: PUSH
25345: LD_INT 32
25347: PUSH
25348: LD_INT 33
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: IN
25355: NOT
25356: OR
25357: IFFALSE 25361
// exit ;
25359: GO 26470
// nat := GetNation ( tower ) ;
25361: LD_ADDR_VAR 0 12
25365: PUSH
25366: LD_VAR 0 1
25370: PPUSH
25371: CALL_OW 248
25375: ST_TO_ADDR
// side := GetSide ( tower ) ;
25376: LD_ADDR_VAR 0 16
25380: PUSH
25381: LD_VAR 0 1
25385: PPUSH
25386: CALL_OW 255
25390: ST_TO_ADDR
// x := GetX ( tower ) ;
25391: LD_ADDR_VAR 0 10
25395: PUSH
25396: LD_VAR 0 1
25400: PPUSH
25401: CALL_OW 250
25405: ST_TO_ADDR
// y := GetY ( tower ) ;
25406: LD_ADDR_VAR 0 11
25410: PUSH
25411: LD_VAR 0 1
25415: PPUSH
25416: CALL_OW 251
25420: ST_TO_ADDR
// if not x or not y then
25421: LD_VAR 0 10
25425: NOT
25426: PUSH
25427: LD_VAR 0 11
25431: NOT
25432: OR
25433: IFFALSE 25437
// exit ;
25435: GO 26470
// weapon := 0 ;
25437: LD_ADDR_VAR 0 18
25441: PUSH
25442: LD_INT 0
25444: ST_TO_ADDR
// fac_list := [ ] ;
25445: LD_ADDR_VAR 0 17
25449: PUSH
25450: EMPTY
25451: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25452: LD_ADDR_VAR 0 6
25456: PUSH
25457: LD_VAR 0 1
25461: PPUSH
25462: CALL_OW 274
25466: PPUSH
25467: LD_VAR 0 2
25471: PPUSH
25472: LD_INT 0
25474: PPUSH
25475: CALL 23041 0 3
25479: PPUSH
25480: LD_INT 30
25482: PUSH
25483: LD_INT 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PPUSH
25490: CALL_OW 72
25494: ST_TO_ADDR
// if not factories then
25495: LD_VAR 0 6
25499: NOT
25500: IFFALSE 25504
// exit ;
25502: GO 26470
// for i in factories do
25504: LD_ADDR_VAR 0 8
25508: PUSH
25509: LD_VAR 0 6
25513: PUSH
25514: FOR_IN
25515: IFFALSE 25540
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25517: LD_ADDR_VAR 0 17
25521: PUSH
25522: LD_VAR 0 17
25526: PUSH
25527: LD_VAR 0 8
25531: PPUSH
25532: CALL_OW 478
25536: UNION
25537: ST_TO_ADDR
25538: GO 25514
25540: POP
25541: POP
// if not fac_list then
25542: LD_VAR 0 17
25546: NOT
25547: IFFALSE 25551
// exit ;
25549: GO 26470
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25551: LD_ADDR_VAR 0 5
25555: PUSH
25556: LD_INT 4
25558: PUSH
25559: LD_INT 5
25561: PUSH
25562: LD_INT 9
25564: PUSH
25565: LD_INT 10
25567: PUSH
25568: LD_INT 6
25570: PUSH
25571: LD_INT 7
25573: PUSH
25574: LD_INT 11
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 27
25588: PUSH
25589: LD_INT 28
25591: PUSH
25592: LD_INT 26
25594: PUSH
25595: LD_INT 30
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 43
25606: PUSH
25607: LD_INT 44
25609: PUSH
25610: LD_INT 46
25612: PUSH
25613: LD_INT 45
25615: PUSH
25616: LD_INT 47
25618: PUSH
25619: LD_INT 49
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: LIST
25634: PUSH
25635: LD_VAR 0 12
25639: ARRAY
25640: ST_TO_ADDR
// list := list isect fac_list ;
25641: LD_ADDR_VAR 0 5
25645: PUSH
25646: LD_VAR 0 5
25650: PUSH
25651: LD_VAR 0 17
25655: ISECT
25656: ST_TO_ADDR
// if not list then
25657: LD_VAR 0 5
25661: NOT
25662: IFFALSE 25666
// exit ;
25664: GO 26470
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25666: LD_VAR 0 12
25670: PUSH
25671: LD_INT 3
25673: EQUAL
25674: PUSH
25675: LD_INT 49
25677: PUSH
25678: LD_VAR 0 5
25682: IN
25683: AND
25684: PUSH
25685: LD_INT 31
25687: PPUSH
25688: LD_VAR 0 16
25692: PPUSH
25693: CALL_OW 321
25697: PUSH
25698: LD_INT 2
25700: EQUAL
25701: AND
25702: IFFALSE 25762
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25704: LD_INT 22
25706: PUSH
25707: LD_VAR 0 16
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 35
25718: PUSH
25719: LD_INT 49
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 91
25728: PUSH
25729: LD_VAR 0 1
25733: PUSH
25734: LD_INT 10
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: LIST
25746: PPUSH
25747: CALL_OW 69
25751: NOT
25752: IFFALSE 25762
// weapon := ru_time_lapser ;
25754: LD_ADDR_VAR 0 18
25758: PUSH
25759: LD_INT 49
25761: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25762: LD_VAR 0 12
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: IN
25777: PUSH
25778: LD_INT 11
25780: PUSH
25781: LD_VAR 0 5
25785: IN
25786: PUSH
25787: LD_INT 30
25789: PUSH
25790: LD_VAR 0 5
25794: IN
25795: OR
25796: AND
25797: PUSH
25798: LD_INT 6
25800: PPUSH
25801: LD_VAR 0 16
25805: PPUSH
25806: CALL_OW 321
25810: PUSH
25811: LD_INT 2
25813: EQUAL
25814: AND
25815: IFFALSE 25980
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25817: LD_INT 22
25819: PUSH
25820: LD_VAR 0 16
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 2
25831: PUSH
25832: LD_INT 35
25834: PUSH
25835: LD_INT 11
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 35
25844: PUSH
25845: LD_INT 30
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 91
25859: PUSH
25860: LD_VAR 0 1
25864: PUSH
25865: LD_INT 18
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: PPUSH
25878: CALL_OW 69
25882: NOT
25883: PUSH
25884: LD_INT 22
25886: PUSH
25887: LD_VAR 0 16
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 2
25898: PUSH
25899: LD_INT 30
25901: PUSH
25902: LD_INT 32
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 30
25911: PUSH
25912: LD_INT 33
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 91
25926: PUSH
25927: LD_VAR 0 1
25931: PUSH
25932: LD_INT 12
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: LIST
25944: PUSH
25945: EMPTY
25946: LIST
25947: PPUSH
25948: CALL_OW 69
25952: PUSH
25953: LD_INT 2
25955: GREATER
25956: AND
25957: IFFALSE 25980
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25959: LD_ADDR_VAR 0 18
25963: PUSH
25964: LD_INT 11
25966: PUSH
25967: LD_INT 30
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_VAR 0 12
25978: ARRAY
25979: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25980: LD_VAR 0 18
25984: NOT
25985: PUSH
25986: LD_INT 40
25988: PPUSH
25989: LD_VAR 0 16
25993: PPUSH
25994: CALL_OW 321
25998: PUSH
25999: LD_INT 2
26001: EQUAL
26002: AND
26003: PUSH
26004: LD_INT 7
26006: PUSH
26007: LD_VAR 0 5
26011: IN
26012: PUSH
26013: LD_INT 28
26015: PUSH
26016: LD_VAR 0 5
26020: IN
26021: OR
26022: PUSH
26023: LD_INT 45
26025: PUSH
26026: LD_VAR 0 5
26030: IN
26031: OR
26032: AND
26033: IFFALSE 26287
// begin hex := GetHexInfo ( x , y ) ;
26035: LD_ADDR_VAR 0 4
26039: PUSH
26040: LD_VAR 0 10
26044: PPUSH
26045: LD_VAR 0 11
26049: PPUSH
26050: CALL_OW 546
26054: ST_TO_ADDR
// if hex [ 1 ] then
26055: LD_VAR 0 4
26059: PUSH
26060: LD_INT 1
26062: ARRAY
26063: IFFALSE 26067
// exit ;
26065: GO 26470
// height := hex [ 2 ] ;
26067: LD_ADDR_VAR 0 15
26071: PUSH
26072: LD_VAR 0 4
26076: PUSH
26077: LD_INT 2
26079: ARRAY
26080: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26081: LD_ADDR_VAR 0 14
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: LD_INT 2
26091: PUSH
26092: LD_INT 3
26094: PUSH
26095: LD_INT 5
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: ST_TO_ADDR
// for i in tmp do
26104: LD_ADDR_VAR 0 8
26108: PUSH
26109: LD_VAR 0 14
26113: PUSH
26114: FOR_IN
26115: IFFALSE 26285
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26117: LD_ADDR_VAR 0 9
26121: PUSH
26122: LD_VAR 0 10
26126: PPUSH
26127: LD_VAR 0 8
26131: PPUSH
26132: LD_INT 5
26134: PPUSH
26135: CALL_OW 272
26139: PUSH
26140: LD_VAR 0 11
26144: PPUSH
26145: LD_VAR 0 8
26149: PPUSH
26150: LD_INT 5
26152: PPUSH
26153: CALL_OW 273
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26162: LD_VAR 0 9
26166: PUSH
26167: LD_INT 1
26169: ARRAY
26170: PPUSH
26171: LD_VAR 0 9
26175: PUSH
26176: LD_INT 2
26178: ARRAY
26179: PPUSH
26180: CALL_OW 488
26184: IFFALSE 26283
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26186: LD_ADDR_VAR 0 4
26190: PUSH
26191: LD_VAR 0 9
26195: PUSH
26196: LD_INT 1
26198: ARRAY
26199: PPUSH
26200: LD_VAR 0 9
26204: PUSH
26205: LD_INT 2
26207: ARRAY
26208: PPUSH
26209: CALL_OW 546
26213: ST_TO_ADDR
// if hex [ 1 ] then
26214: LD_VAR 0 4
26218: PUSH
26219: LD_INT 1
26221: ARRAY
26222: IFFALSE 26226
// continue ;
26224: GO 26114
// h := hex [ 2 ] ;
26226: LD_ADDR_VAR 0 13
26230: PUSH
26231: LD_VAR 0 4
26235: PUSH
26236: LD_INT 2
26238: ARRAY
26239: ST_TO_ADDR
// if h + 7 < height then
26240: LD_VAR 0 13
26244: PUSH
26245: LD_INT 7
26247: PLUS
26248: PUSH
26249: LD_VAR 0 15
26253: LESS
26254: IFFALSE 26283
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26256: LD_ADDR_VAR 0 18
26260: PUSH
26261: LD_INT 7
26263: PUSH
26264: LD_INT 28
26266: PUSH
26267: LD_INT 45
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: LIST
26274: PUSH
26275: LD_VAR 0 12
26279: ARRAY
26280: ST_TO_ADDR
// break ;
26281: GO 26285
// end ; end ; end ;
26283: GO 26114
26285: POP
26286: POP
// end ; if not weapon then
26287: LD_VAR 0 18
26291: NOT
26292: IFFALSE 26352
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26294: LD_ADDR_VAR 0 5
26298: PUSH
26299: LD_VAR 0 5
26303: PUSH
26304: LD_INT 11
26306: PUSH
26307: LD_INT 30
26309: PUSH
26310: LD_INT 49
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: DIFF
26318: ST_TO_ADDR
// if not list then
26319: LD_VAR 0 5
26323: NOT
26324: IFFALSE 26328
// exit ;
26326: GO 26470
// weapon := list [ rand ( 1 , list ) ] ;
26328: LD_ADDR_VAR 0 18
26332: PUSH
26333: LD_VAR 0 5
26337: PUSH
26338: LD_INT 1
26340: PPUSH
26341: LD_VAR 0 5
26345: PPUSH
26346: CALL_OW 12
26350: ARRAY
26351: ST_TO_ADDR
// end ; if weapon then
26352: LD_VAR 0 18
26356: IFFALSE 26470
// begin tmp := CostOfWeapon ( weapon ) ;
26358: LD_ADDR_VAR 0 14
26362: PUSH
26363: LD_VAR 0 18
26367: PPUSH
26368: CALL_OW 451
26372: ST_TO_ADDR
// j := GetBase ( tower ) ;
26373: LD_ADDR_VAR 0 9
26377: PUSH
26378: LD_VAR 0 1
26382: PPUSH
26383: CALL_OW 274
26387: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26388: LD_VAR 0 9
26392: PPUSH
26393: LD_INT 1
26395: PPUSH
26396: CALL_OW 275
26400: PUSH
26401: LD_VAR 0 14
26405: PUSH
26406: LD_INT 1
26408: ARRAY
26409: GREATEREQUAL
26410: PUSH
26411: LD_VAR 0 9
26415: PPUSH
26416: LD_INT 2
26418: PPUSH
26419: CALL_OW 275
26423: PUSH
26424: LD_VAR 0 14
26428: PUSH
26429: LD_INT 2
26431: ARRAY
26432: GREATEREQUAL
26433: AND
26434: PUSH
26435: LD_VAR 0 9
26439: PPUSH
26440: LD_INT 3
26442: PPUSH
26443: CALL_OW 275
26447: PUSH
26448: LD_VAR 0 14
26452: PUSH
26453: LD_INT 3
26455: ARRAY
26456: GREATEREQUAL
26457: AND
26458: IFFALSE 26470
// result := weapon ;
26460: LD_ADDR_VAR 0 3
26464: PUSH
26465: LD_VAR 0 18
26469: ST_TO_ADDR
// end ; end ;
26470: LD_VAR 0 3
26474: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26475: LD_INT 0
26477: PPUSH
26478: PPUSH
// result := true ;
26479: LD_ADDR_VAR 0 3
26483: PUSH
26484: LD_INT 1
26486: ST_TO_ADDR
// if array1 = array2 then
26487: LD_VAR 0 1
26491: PUSH
26492: LD_VAR 0 2
26496: EQUAL
26497: IFFALSE 26557
// begin for i = 1 to array1 do
26499: LD_ADDR_VAR 0 4
26503: PUSH
26504: DOUBLE
26505: LD_INT 1
26507: DEC
26508: ST_TO_ADDR
26509: LD_VAR 0 1
26513: PUSH
26514: FOR_TO
26515: IFFALSE 26553
// if array1 [ i ] <> array2 [ i ] then
26517: LD_VAR 0 1
26521: PUSH
26522: LD_VAR 0 4
26526: ARRAY
26527: PUSH
26528: LD_VAR 0 2
26532: PUSH
26533: LD_VAR 0 4
26537: ARRAY
26538: NONEQUAL
26539: IFFALSE 26551
// begin result := false ;
26541: LD_ADDR_VAR 0 3
26545: PUSH
26546: LD_INT 0
26548: ST_TO_ADDR
// break ;
26549: GO 26553
// end ;
26551: GO 26514
26553: POP
26554: POP
// end else
26555: GO 26565
// result := false ;
26557: LD_ADDR_VAR 0 3
26561: PUSH
26562: LD_INT 0
26564: ST_TO_ADDR
// end ;
26565: LD_VAR 0 3
26569: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26570: LD_INT 0
26572: PPUSH
26573: PPUSH
// if not array1 or not array2 then
26574: LD_VAR 0 1
26578: NOT
26579: PUSH
26580: LD_VAR 0 2
26584: NOT
26585: OR
26586: IFFALSE 26590
// exit ;
26588: GO 26654
// result := true ;
26590: LD_ADDR_VAR 0 3
26594: PUSH
26595: LD_INT 1
26597: ST_TO_ADDR
// for i = 1 to array1 do
26598: LD_ADDR_VAR 0 4
26602: PUSH
26603: DOUBLE
26604: LD_INT 1
26606: DEC
26607: ST_TO_ADDR
26608: LD_VAR 0 1
26612: PUSH
26613: FOR_TO
26614: IFFALSE 26652
// if array1 [ i ] <> array2 [ i ] then
26616: LD_VAR 0 1
26620: PUSH
26621: LD_VAR 0 4
26625: ARRAY
26626: PUSH
26627: LD_VAR 0 2
26631: PUSH
26632: LD_VAR 0 4
26636: ARRAY
26637: NONEQUAL
26638: IFFALSE 26650
// begin result := false ;
26640: LD_ADDR_VAR 0 3
26644: PUSH
26645: LD_INT 0
26647: ST_TO_ADDR
// break ;
26648: GO 26652
// end ;
26650: GO 26613
26652: POP
26653: POP
// end ;
26654: LD_VAR 0 3
26658: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26659: LD_INT 0
26661: PPUSH
26662: PPUSH
26663: PPUSH
// pom := GetBase ( fac ) ;
26664: LD_ADDR_VAR 0 5
26668: PUSH
26669: LD_VAR 0 1
26673: PPUSH
26674: CALL_OW 274
26678: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26679: LD_ADDR_VAR 0 4
26683: PUSH
26684: LD_VAR 0 2
26688: PUSH
26689: LD_INT 1
26691: ARRAY
26692: PPUSH
26693: LD_VAR 0 2
26697: PUSH
26698: LD_INT 2
26700: ARRAY
26701: PPUSH
26702: LD_VAR 0 2
26706: PUSH
26707: LD_INT 3
26709: ARRAY
26710: PPUSH
26711: LD_VAR 0 2
26715: PUSH
26716: LD_INT 4
26718: ARRAY
26719: PPUSH
26720: CALL_OW 449
26724: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26725: LD_ADDR_VAR 0 3
26729: PUSH
26730: LD_VAR 0 5
26734: PPUSH
26735: LD_INT 1
26737: PPUSH
26738: CALL_OW 275
26742: PUSH
26743: LD_VAR 0 4
26747: PUSH
26748: LD_INT 1
26750: ARRAY
26751: GREATEREQUAL
26752: PUSH
26753: LD_VAR 0 5
26757: PPUSH
26758: LD_INT 2
26760: PPUSH
26761: CALL_OW 275
26765: PUSH
26766: LD_VAR 0 4
26770: PUSH
26771: LD_INT 2
26773: ARRAY
26774: GREATEREQUAL
26775: AND
26776: PUSH
26777: LD_VAR 0 5
26781: PPUSH
26782: LD_INT 3
26784: PPUSH
26785: CALL_OW 275
26789: PUSH
26790: LD_VAR 0 4
26794: PUSH
26795: LD_INT 3
26797: ARRAY
26798: GREATEREQUAL
26799: AND
26800: ST_TO_ADDR
// end ;
26801: LD_VAR 0 3
26805: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26806: LD_INT 0
26808: PPUSH
26809: PPUSH
26810: PPUSH
26811: PPUSH
// pom := GetBase ( building ) ;
26812: LD_ADDR_VAR 0 3
26816: PUSH
26817: LD_VAR 0 1
26821: PPUSH
26822: CALL_OW 274
26826: ST_TO_ADDR
// if not pom then
26827: LD_VAR 0 3
26831: NOT
26832: IFFALSE 26836
// exit ;
26834: GO 27006
// btype := GetBType ( building ) ;
26836: LD_ADDR_VAR 0 5
26840: PUSH
26841: LD_VAR 0 1
26845: PPUSH
26846: CALL_OW 266
26850: ST_TO_ADDR
// if btype = b_armoury then
26851: LD_VAR 0 5
26855: PUSH
26856: LD_INT 4
26858: EQUAL
26859: IFFALSE 26869
// btype := b_barracks ;
26861: LD_ADDR_VAR 0 5
26865: PUSH
26866: LD_INT 5
26868: ST_TO_ADDR
// if btype = b_depot then
26869: LD_VAR 0 5
26873: PUSH
26874: LD_INT 0
26876: EQUAL
26877: IFFALSE 26887
// btype := b_warehouse ;
26879: LD_ADDR_VAR 0 5
26883: PUSH
26884: LD_INT 1
26886: ST_TO_ADDR
// if btype = b_workshop then
26887: LD_VAR 0 5
26891: PUSH
26892: LD_INT 2
26894: EQUAL
26895: IFFALSE 26905
// btype := b_factory ;
26897: LD_ADDR_VAR 0 5
26901: PUSH
26902: LD_INT 3
26904: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26905: LD_ADDR_VAR 0 4
26909: PUSH
26910: LD_VAR 0 5
26914: PPUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 248
26924: PPUSH
26925: CALL_OW 450
26929: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26930: LD_ADDR_VAR 0 2
26934: PUSH
26935: LD_VAR 0 3
26939: PPUSH
26940: LD_INT 1
26942: PPUSH
26943: CALL_OW 275
26947: PUSH
26948: LD_VAR 0 4
26952: PUSH
26953: LD_INT 1
26955: ARRAY
26956: GREATEREQUAL
26957: PUSH
26958: LD_VAR 0 3
26962: PPUSH
26963: LD_INT 2
26965: PPUSH
26966: CALL_OW 275
26970: PUSH
26971: LD_VAR 0 4
26975: PUSH
26976: LD_INT 2
26978: ARRAY
26979: GREATEREQUAL
26980: AND
26981: PUSH
26982: LD_VAR 0 3
26986: PPUSH
26987: LD_INT 3
26989: PPUSH
26990: CALL_OW 275
26994: PUSH
26995: LD_VAR 0 4
26999: PUSH
27000: LD_INT 3
27002: ARRAY
27003: GREATEREQUAL
27004: AND
27005: ST_TO_ADDR
// end ;
27006: LD_VAR 0 2
27010: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27011: LD_INT 0
27013: PPUSH
27014: PPUSH
27015: PPUSH
// pom := GetBase ( building ) ;
27016: LD_ADDR_VAR 0 4
27020: PUSH
27021: LD_VAR 0 1
27025: PPUSH
27026: CALL_OW 274
27030: ST_TO_ADDR
// if not pom then
27031: LD_VAR 0 4
27035: NOT
27036: IFFALSE 27040
// exit ;
27038: GO 27141
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27040: LD_ADDR_VAR 0 5
27044: PUSH
27045: LD_VAR 0 2
27049: PPUSH
27050: LD_VAR 0 1
27054: PPUSH
27055: CALL_OW 248
27059: PPUSH
27060: CALL_OW 450
27064: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27065: LD_ADDR_VAR 0 3
27069: PUSH
27070: LD_VAR 0 4
27074: PPUSH
27075: LD_INT 1
27077: PPUSH
27078: CALL_OW 275
27082: PUSH
27083: LD_VAR 0 5
27087: PUSH
27088: LD_INT 1
27090: ARRAY
27091: GREATEREQUAL
27092: PUSH
27093: LD_VAR 0 4
27097: PPUSH
27098: LD_INT 2
27100: PPUSH
27101: CALL_OW 275
27105: PUSH
27106: LD_VAR 0 5
27110: PUSH
27111: LD_INT 2
27113: ARRAY
27114: GREATEREQUAL
27115: AND
27116: PUSH
27117: LD_VAR 0 4
27121: PPUSH
27122: LD_INT 3
27124: PPUSH
27125: CALL_OW 275
27129: PUSH
27130: LD_VAR 0 5
27134: PUSH
27135: LD_INT 3
27137: ARRAY
27138: GREATEREQUAL
27139: AND
27140: ST_TO_ADDR
// end ;
27141: LD_VAR 0 3
27145: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27146: LD_INT 0
27148: PPUSH
27149: PPUSH
27150: PPUSH
27151: PPUSH
27152: PPUSH
27153: PPUSH
27154: PPUSH
27155: PPUSH
27156: PPUSH
27157: PPUSH
27158: PPUSH
// result := false ;
27159: LD_ADDR_VAR 0 8
27163: PUSH
27164: LD_INT 0
27166: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27167: LD_VAR 0 5
27171: NOT
27172: PUSH
27173: LD_VAR 0 1
27177: NOT
27178: OR
27179: PUSH
27180: LD_VAR 0 2
27184: NOT
27185: OR
27186: PUSH
27187: LD_VAR 0 3
27191: NOT
27192: OR
27193: IFFALSE 27197
// exit ;
27195: GO 28011
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27197: LD_ADDR_VAR 0 14
27201: PUSH
27202: LD_VAR 0 1
27206: PPUSH
27207: LD_VAR 0 2
27211: PPUSH
27212: LD_VAR 0 3
27216: PPUSH
27217: LD_VAR 0 4
27221: PPUSH
27222: LD_VAR 0 5
27226: PUSH
27227: LD_INT 1
27229: ARRAY
27230: PPUSH
27231: CALL_OW 248
27235: PPUSH
27236: LD_INT 0
27238: PPUSH
27239: CALL 29264 0 6
27243: ST_TO_ADDR
// if not hexes then
27244: LD_VAR 0 14
27248: NOT
27249: IFFALSE 27253
// exit ;
27251: GO 28011
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27253: LD_ADDR_VAR 0 17
27257: PUSH
27258: LD_VAR 0 5
27262: PPUSH
27263: LD_INT 22
27265: PUSH
27266: LD_VAR 0 13
27270: PPUSH
27271: CALL_OW 255
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 2
27282: PUSH
27283: LD_INT 30
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 30
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: LIST
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PPUSH
27312: CALL_OW 72
27316: ST_TO_ADDR
// for i = 1 to hexes do
27317: LD_ADDR_VAR 0 9
27321: PUSH
27322: DOUBLE
27323: LD_INT 1
27325: DEC
27326: ST_TO_ADDR
27327: LD_VAR 0 14
27331: PUSH
27332: FOR_TO
27333: IFFALSE 28009
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27335: LD_ADDR_VAR 0 13
27339: PUSH
27340: LD_VAR 0 14
27344: PUSH
27345: LD_VAR 0 9
27349: ARRAY
27350: PUSH
27351: LD_INT 1
27353: ARRAY
27354: PPUSH
27355: LD_VAR 0 14
27359: PUSH
27360: LD_VAR 0 9
27364: ARRAY
27365: PUSH
27366: LD_INT 2
27368: ARRAY
27369: PPUSH
27370: CALL_OW 428
27374: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27375: LD_VAR 0 14
27379: PUSH
27380: LD_VAR 0 9
27384: ARRAY
27385: PUSH
27386: LD_INT 1
27388: ARRAY
27389: PPUSH
27390: LD_VAR 0 14
27394: PUSH
27395: LD_VAR 0 9
27399: ARRAY
27400: PUSH
27401: LD_INT 2
27403: ARRAY
27404: PPUSH
27405: CALL_OW 351
27409: PUSH
27410: LD_VAR 0 14
27414: PUSH
27415: LD_VAR 0 9
27419: ARRAY
27420: PUSH
27421: LD_INT 1
27423: ARRAY
27424: PPUSH
27425: LD_VAR 0 14
27429: PUSH
27430: LD_VAR 0 9
27434: ARRAY
27435: PUSH
27436: LD_INT 2
27438: ARRAY
27439: PPUSH
27440: CALL_OW 488
27444: NOT
27445: OR
27446: PUSH
27447: LD_VAR 0 13
27451: PPUSH
27452: CALL_OW 247
27456: PUSH
27457: LD_INT 3
27459: EQUAL
27460: OR
27461: IFFALSE 27467
// exit ;
27463: POP
27464: POP
27465: GO 28011
// if not tmp then
27467: LD_VAR 0 13
27471: NOT
27472: IFFALSE 27476
// continue ;
27474: GO 27332
// result := true ;
27476: LD_ADDR_VAR 0 8
27480: PUSH
27481: LD_INT 1
27483: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27484: LD_VAR 0 6
27488: PUSH
27489: LD_VAR 0 13
27493: PPUSH
27494: CALL_OW 247
27498: PUSH
27499: LD_INT 2
27501: EQUAL
27502: AND
27503: PUSH
27504: LD_VAR 0 13
27508: PPUSH
27509: CALL_OW 263
27513: PUSH
27514: LD_INT 1
27516: EQUAL
27517: AND
27518: IFFALSE 27682
// begin if IsDrivenBy ( tmp ) then
27520: LD_VAR 0 13
27524: PPUSH
27525: CALL_OW 311
27529: IFFALSE 27533
// continue ;
27531: GO 27332
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27533: LD_VAR 0 6
27537: PPUSH
27538: LD_INT 3
27540: PUSH
27541: LD_INT 60
27543: PUSH
27544: EMPTY
27545: LIST
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 3
27553: PUSH
27554: LD_INT 55
27556: PUSH
27557: EMPTY
27558: LIST
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PPUSH
27568: CALL_OW 72
27572: IFFALSE 27680
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27574: LD_ADDR_VAR 0 18
27578: PUSH
27579: LD_VAR 0 6
27583: PPUSH
27584: LD_INT 3
27586: PUSH
27587: LD_INT 60
27589: PUSH
27590: EMPTY
27591: LIST
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 3
27599: PUSH
27600: LD_INT 55
27602: PUSH
27603: EMPTY
27604: LIST
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PPUSH
27614: CALL_OW 72
27618: PUSH
27619: LD_INT 1
27621: ARRAY
27622: ST_TO_ADDR
// if IsInUnit ( driver ) then
27623: LD_VAR 0 18
27627: PPUSH
27628: CALL_OW 310
27632: IFFALSE 27643
// ComExit ( driver ) ;
27634: LD_VAR 0 18
27638: PPUSH
27639: CALL 53043 0 1
// AddComEnterUnit ( driver , tmp ) ;
27643: LD_VAR 0 18
27647: PPUSH
27648: LD_VAR 0 13
27652: PPUSH
27653: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27657: LD_VAR 0 18
27661: PPUSH
27662: LD_VAR 0 7
27666: PPUSH
27667: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27671: LD_VAR 0 18
27675: PPUSH
27676: CALL_OW 181
// end ; continue ;
27680: GO 27332
// end ; if not cleaners or not tmp in cleaners then
27682: LD_VAR 0 6
27686: NOT
27687: PUSH
27688: LD_VAR 0 13
27692: PUSH
27693: LD_VAR 0 6
27697: IN
27698: NOT
27699: OR
27700: IFFALSE 28007
// begin if dep then
27702: LD_VAR 0 17
27706: IFFALSE 27842
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27708: LD_ADDR_VAR 0 16
27712: PUSH
27713: LD_VAR 0 17
27717: PUSH
27718: LD_INT 1
27720: ARRAY
27721: PPUSH
27722: CALL_OW 250
27726: PPUSH
27727: LD_VAR 0 17
27731: PUSH
27732: LD_INT 1
27734: ARRAY
27735: PPUSH
27736: CALL_OW 254
27740: PPUSH
27741: LD_INT 5
27743: PPUSH
27744: CALL_OW 272
27748: PUSH
27749: LD_VAR 0 17
27753: PUSH
27754: LD_INT 1
27756: ARRAY
27757: PPUSH
27758: CALL_OW 251
27762: PPUSH
27763: LD_VAR 0 17
27767: PUSH
27768: LD_INT 1
27770: ARRAY
27771: PPUSH
27772: CALL_OW 254
27776: PPUSH
27777: LD_INT 5
27779: PPUSH
27780: CALL_OW 273
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27789: LD_VAR 0 16
27793: PUSH
27794: LD_INT 1
27796: ARRAY
27797: PPUSH
27798: LD_VAR 0 16
27802: PUSH
27803: LD_INT 2
27805: ARRAY
27806: PPUSH
27807: CALL_OW 488
27811: IFFALSE 27842
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27813: LD_VAR 0 13
27817: PPUSH
27818: LD_VAR 0 16
27822: PUSH
27823: LD_INT 1
27825: ARRAY
27826: PPUSH
27827: LD_VAR 0 16
27831: PUSH
27832: LD_INT 2
27834: ARRAY
27835: PPUSH
27836: CALL_OW 111
// continue ;
27840: GO 27332
// end ; end ; r := GetDir ( tmp ) ;
27842: LD_ADDR_VAR 0 15
27846: PUSH
27847: LD_VAR 0 13
27851: PPUSH
27852: CALL_OW 254
27856: ST_TO_ADDR
// if r = 5 then
27857: LD_VAR 0 15
27861: PUSH
27862: LD_INT 5
27864: EQUAL
27865: IFFALSE 27875
// r := 0 ;
27867: LD_ADDR_VAR 0 15
27871: PUSH
27872: LD_INT 0
27874: ST_TO_ADDR
// for j = r to 5 do
27875: LD_ADDR_VAR 0 10
27879: PUSH
27880: DOUBLE
27881: LD_VAR 0 15
27885: DEC
27886: ST_TO_ADDR
27887: LD_INT 5
27889: PUSH
27890: FOR_TO
27891: IFFALSE 28005
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27893: LD_ADDR_VAR 0 11
27897: PUSH
27898: LD_VAR 0 13
27902: PPUSH
27903: CALL_OW 250
27907: PPUSH
27908: LD_VAR 0 10
27912: PPUSH
27913: LD_INT 2
27915: PPUSH
27916: CALL_OW 272
27920: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27921: LD_ADDR_VAR 0 12
27925: PUSH
27926: LD_VAR 0 13
27930: PPUSH
27931: CALL_OW 251
27935: PPUSH
27936: LD_VAR 0 10
27940: PPUSH
27941: LD_INT 2
27943: PPUSH
27944: CALL_OW 273
27948: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27949: LD_VAR 0 11
27953: PPUSH
27954: LD_VAR 0 12
27958: PPUSH
27959: CALL_OW 488
27963: PUSH
27964: LD_VAR 0 11
27968: PPUSH
27969: LD_VAR 0 12
27973: PPUSH
27974: CALL_OW 428
27978: NOT
27979: AND
27980: IFFALSE 28003
// begin ComMoveXY ( tmp , _x , _y ) ;
27982: LD_VAR 0 13
27986: PPUSH
27987: LD_VAR 0 11
27991: PPUSH
27992: LD_VAR 0 12
27996: PPUSH
27997: CALL_OW 111
// break ;
28001: GO 28005
// end ; end ;
28003: GO 27890
28005: POP
28006: POP
// end ; end ;
28007: GO 27332
28009: POP
28010: POP
// end ;
28011: LD_VAR 0 8
28015: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28016: LD_INT 0
28018: PPUSH
// result := true ;
28019: LD_ADDR_VAR 0 3
28023: PUSH
28024: LD_INT 1
28026: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28027: LD_VAR 0 2
28031: PUSH
28032: LD_INT 24
28034: DOUBLE
28035: EQUAL
28036: IFTRUE 28046
28038: LD_INT 33
28040: DOUBLE
28041: EQUAL
28042: IFTRUE 28046
28044: GO 28071
28046: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28047: LD_ADDR_VAR 0 3
28051: PUSH
28052: LD_INT 32
28054: PPUSH
28055: LD_VAR 0 1
28059: PPUSH
28060: CALL_OW 321
28064: PUSH
28065: LD_INT 2
28067: EQUAL
28068: ST_TO_ADDR
28069: GO 28387
28071: LD_INT 20
28073: DOUBLE
28074: EQUAL
28075: IFTRUE 28079
28077: GO 28104
28079: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28080: LD_ADDR_VAR 0 3
28084: PUSH
28085: LD_INT 6
28087: PPUSH
28088: LD_VAR 0 1
28092: PPUSH
28093: CALL_OW 321
28097: PUSH
28098: LD_INT 2
28100: EQUAL
28101: ST_TO_ADDR
28102: GO 28387
28104: LD_INT 22
28106: DOUBLE
28107: EQUAL
28108: IFTRUE 28118
28110: LD_INT 36
28112: DOUBLE
28113: EQUAL
28114: IFTRUE 28118
28116: GO 28143
28118: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28119: LD_ADDR_VAR 0 3
28123: PUSH
28124: LD_INT 15
28126: PPUSH
28127: LD_VAR 0 1
28131: PPUSH
28132: CALL_OW 321
28136: PUSH
28137: LD_INT 2
28139: EQUAL
28140: ST_TO_ADDR
28141: GO 28387
28143: LD_INT 30
28145: DOUBLE
28146: EQUAL
28147: IFTRUE 28151
28149: GO 28176
28151: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28152: LD_ADDR_VAR 0 3
28156: PUSH
28157: LD_INT 20
28159: PPUSH
28160: LD_VAR 0 1
28164: PPUSH
28165: CALL_OW 321
28169: PUSH
28170: LD_INT 2
28172: EQUAL
28173: ST_TO_ADDR
28174: GO 28387
28176: LD_INT 28
28178: DOUBLE
28179: EQUAL
28180: IFTRUE 28190
28182: LD_INT 21
28184: DOUBLE
28185: EQUAL
28186: IFTRUE 28190
28188: GO 28215
28190: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28191: LD_ADDR_VAR 0 3
28195: PUSH
28196: LD_INT 21
28198: PPUSH
28199: LD_VAR 0 1
28203: PPUSH
28204: CALL_OW 321
28208: PUSH
28209: LD_INT 2
28211: EQUAL
28212: ST_TO_ADDR
28213: GO 28387
28215: LD_INT 16
28217: DOUBLE
28218: EQUAL
28219: IFTRUE 28223
28221: GO 28248
28223: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28224: LD_ADDR_VAR 0 3
28228: PUSH
28229: LD_INT 84
28231: PPUSH
28232: LD_VAR 0 1
28236: PPUSH
28237: CALL_OW 321
28241: PUSH
28242: LD_INT 2
28244: EQUAL
28245: ST_TO_ADDR
28246: GO 28387
28248: LD_INT 19
28250: DOUBLE
28251: EQUAL
28252: IFTRUE 28262
28254: LD_INT 23
28256: DOUBLE
28257: EQUAL
28258: IFTRUE 28262
28260: GO 28287
28262: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28263: LD_ADDR_VAR 0 3
28267: PUSH
28268: LD_INT 83
28270: PPUSH
28271: LD_VAR 0 1
28275: PPUSH
28276: CALL_OW 321
28280: PUSH
28281: LD_INT 2
28283: EQUAL
28284: ST_TO_ADDR
28285: GO 28387
28287: LD_INT 17
28289: DOUBLE
28290: EQUAL
28291: IFTRUE 28295
28293: GO 28320
28295: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28296: LD_ADDR_VAR 0 3
28300: PUSH
28301: LD_INT 39
28303: PPUSH
28304: LD_VAR 0 1
28308: PPUSH
28309: CALL_OW 321
28313: PUSH
28314: LD_INT 2
28316: EQUAL
28317: ST_TO_ADDR
28318: GO 28387
28320: LD_INT 18
28322: DOUBLE
28323: EQUAL
28324: IFTRUE 28328
28326: GO 28353
28328: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28329: LD_ADDR_VAR 0 3
28333: PUSH
28334: LD_INT 40
28336: PPUSH
28337: LD_VAR 0 1
28341: PPUSH
28342: CALL_OW 321
28346: PUSH
28347: LD_INT 2
28349: EQUAL
28350: ST_TO_ADDR
28351: GO 28387
28353: LD_INT 27
28355: DOUBLE
28356: EQUAL
28357: IFTRUE 28361
28359: GO 28386
28361: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28362: LD_ADDR_VAR 0 3
28366: PUSH
28367: LD_INT 35
28369: PPUSH
28370: LD_VAR 0 1
28374: PPUSH
28375: CALL_OW 321
28379: PUSH
28380: LD_INT 2
28382: EQUAL
28383: ST_TO_ADDR
28384: GO 28387
28386: POP
// end ;
28387: LD_VAR 0 3
28391: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28392: LD_INT 0
28394: PPUSH
28395: PPUSH
28396: PPUSH
28397: PPUSH
28398: PPUSH
28399: PPUSH
28400: PPUSH
28401: PPUSH
28402: PPUSH
28403: PPUSH
28404: PPUSH
// result := false ;
28405: LD_ADDR_VAR 0 6
28409: PUSH
28410: LD_INT 0
28412: ST_TO_ADDR
// if btype = b_depot then
28413: LD_VAR 0 2
28417: PUSH
28418: LD_INT 0
28420: EQUAL
28421: IFFALSE 28433
// begin result := true ;
28423: LD_ADDR_VAR 0 6
28427: PUSH
28428: LD_INT 1
28430: ST_TO_ADDR
// exit ;
28431: GO 29259
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28433: LD_VAR 0 1
28437: NOT
28438: PUSH
28439: LD_VAR 0 1
28443: PPUSH
28444: CALL_OW 266
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: IN
28459: NOT
28460: OR
28461: PUSH
28462: LD_VAR 0 2
28466: NOT
28467: OR
28468: PUSH
28469: LD_VAR 0 5
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: LD_INT 1
28479: PUSH
28480: LD_INT 2
28482: PUSH
28483: LD_INT 3
28485: PUSH
28486: LD_INT 4
28488: PUSH
28489: LD_INT 5
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: IN
28500: NOT
28501: OR
28502: PUSH
28503: LD_VAR 0 3
28507: PPUSH
28508: LD_VAR 0 4
28512: PPUSH
28513: CALL_OW 488
28517: NOT
28518: OR
28519: IFFALSE 28523
// exit ;
28521: GO 29259
// side := GetSide ( depot ) ;
28523: LD_ADDR_VAR 0 9
28527: PUSH
28528: LD_VAR 0 1
28532: PPUSH
28533: CALL_OW 255
28537: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28538: LD_VAR 0 9
28542: PPUSH
28543: LD_VAR 0 2
28547: PPUSH
28548: CALL 28016 0 2
28552: NOT
28553: IFFALSE 28557
// exit ;
28555: GO 29259
// pom := GetBase ( depot ) ;
28557: LD_ADDR_VAR 0 10
28561: PUSH
28562: LD_VAR 0 1
28566: PPUSH
28567: CALL_OW 274
28571: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28572: LD_ADDR_VAR 0 11
28576: PUSH
28577: LD_VAR 0 2
28581: PPUSH
28582: LD_VAR 0 1
28586: PPUSH
28587: CALL_OW 248
28591: PPUSH
28592: CALL_OW 450
28596: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28597: LD_VAR 0 10
28601: PPUSH
28602: LD_INT 1
28604: PPUSH
28605: CALL_OW 275
28609: PUSH
28610: LD_VAR 0 11
28614: PUSH
28615: LD_INT 1
28617: ARRAY
28618: GREATEREQUAL
28619: PUSH
28620: LD_VAR 0 10
28624: PPUSH
28625: LD_INT 2
28627: PPUSH
28628: CALL_OW 275
28632: PUSH
28633: LD_VAR 0 11
28637: PUSH
28638: LD_INT 2
28640: ARRAY
28641: GREATEREQUAL
28642: AND
28643: PUSH
28644: LD_VAR 0 10
28648: PPUSH
28649: LD_INT 3
28651: PPUSH
28652: CALL_OW 275
28656: PUSH
28657: LD_VAR 0 11
28661: PUSH
28662: LD_INT 3
28664: ARRAY
28665: GREATEREQUAL
28666: AND
28667: NOT
28668: IFFALSE 28672
// exit ;
28670: GO 29259
// if GetBType ( depot ) = b_depot then
28672: LD_VAR 0 1
28676: PPUSH
28677: CALL_OW 266
28681: PUSH
28682: LD_INT 0
28684: EQUAL
28685: IFFALSE 28697
// dist := 28 else
28687: LD_ADDR_VAR 0 14
28691: PUSH
28692: LD_INT 28
28694: ST_TO_ADDR
28695: GO 28705
// dist := 36 ;
28697: LD_ADDR_VAR 0 14
28701: PUSH
28702: LD_INT 36
28704: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28705: LD_VAR 0 1
28709: PPUSH
28710: LD_VAR 0 3
28714: PPUSH
28715: LD_VAR 0 4
28719: PPUSH
28720: CALL_OW 297
28724: PUSH
28725: LD_VAR 0 14
28729: GREATER
28730: IFFALSE 28734
// exit ;
28732: GO 29259
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28734: LD_ADDR_VAR 0 12
28738: PUSH
28739: LD_VAR 0 2
28743: PPUSH
28744: LD_VAR 0 3
28748: PPUSH
28749: LD_VAR 0 4
28753: PPUSH
28754: LD_VAR 0 5
28758: PPUSH
28759: LD_VAR 0 1
28763: PPUSH
28764: CALL_OW 248
28768: PPUSH
28769: LD_INT 0
28771: PPUSH
28772: CALL 29264 0 6
28776: ST_TO_ADDR
// if not hexes then
28777: LD_VAR 0 12
28781: NOT
28782: IFFALSE 28786
// exit ;
28784: GO 29259
// hex := GetHexInfo ( x , y ) ;
28786: LD_ADDR_VAR 0 15
28790: PUSH
28791: LD_VAR 0 3
28795: PPUSH
28796: LD_VAR 0 4
28800: PPUSH
28801: CALL_OW 546
28805: ST_TO_ADDR
// if hex [ 1 ] then
28806: LD_VAR 0 15
28810: PUSH
28811: LD_INT 1
28813: ARRAY
28814: IFFALSE 28818
// exit ;
28816: GO 29259
// height := hex [ 2 ] ;
28818: LD_ADDR_VAR 0 13
28822: PUSH
28823: LD_VAR 0 15
28827: PUSH
28828: LD_INT 2
28830: ARRAY
28831: ST_TO_ADDR
// for i = 1 to hexes do
28832: LD_ADDR_VAR 0 7
28836: PUSH
28837: DOUBLE
28838: LD_INT 1
28840: DEC
28841: ST_TO_ADDR
28842: LD_VAR 0 12
28846: PUSH
28847: FOR_TO
28848: IFFALSE 29178
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28850: LD_VAR 0 12
28854: PUSH
28855: LD_VAR 0 7
28859: ARRAY
28860: PUSH
28861: LD_INT 1
28863: ARRAY
28864: PPUSH
28865: LD_VAR 0 12
28869: PUSH
28870: LD_VAR 0 7
28874: ARRAY
28875: PUSH
28876: LD_INT 2
28878: ARRAY
28879: PPUSH
28880: CALL_OW 488
28884: NOT
28885: PUSH
28886: LD_VAR 0 12
28890: PUSH
28891: LD_VAR 0 7
28895: ARRAY
28896: PUSH
28897: LD_INT 1
28899: ARRAY
28900: PPUSH
28901: LD_VAR 0 12
28905: PUSH
28906: LD_VAR 0 7
28910: ARRAY
28911: PUSH
28912: LD_INT 2
28914: ARRAY
28915: PPUSH
28916: CALL_OW 428
28920: PUSH
28921: LD_INT 0
28923: GREATER
28924: OR
28925: PUSH
28926: LD_VAR 0 12
28930: PUSH
28931: LD_VAR 0 7
28935: ARRAY
28936: PUSH
28937: LD_INT 1
28939: ARRAY
28940: PPUSH
28941: LD_VAR 0 12
28945: PUSH
28946: LD_VAR 0 7
28950: ARRAY
28951: PUSH
28952: LD_INT 2
28954: ARRAY
28955: PPUSH
28956: CALL_OW 351
28960: OR
28961: IFFALSE 28967
// exit ;
28963: POP
28964: POP
28965: GO 29259
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28967: LD_ADDR_VAR 0 8
28971: PUSH
28972: LD_VAR 0 12
28976: PUSH
28977: LD_VAR 0 7
28981: ARRAY
28982: PUSH
28983: LD_INT 1
28985: ARRAY
28986: PPUSH
28987: LD_VAR 0 12
28991: PUSH
28992: LD_VAR 0 7
28996: ARRAY
28997: PUSH
28998: LD_INT 2
29000: ARRAY
29001: PPUSH
29002: CALL_OW 546
29006: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29007: LD_VAR 0 8
29011: PUSH
29012: LD_INT 1
29014: ARRAY
29015: PUSH
29016: LD_VAR 0 8
29020: PUSH
29021: LD_INT 2
29023: ARRAY
29024: PUSH
29025: LD_VAR 0 13
29029: PUSH
29030: LD_INT 2
29032: PLUS
29033: GREATER
29034: OR
29035: PUSH
29036: LD_VAR 0 8
29040: PUSH
29041: LD_INT 2
29043: ARRAY
29044: PUSH
29045: LD_VAR 0 13
29049: PUSH
29050: LD_INT 2
29052: MINUS
29053: LESS
29054: OR
29055: PUSH
29056: LD_VAR 0 8
29060: PUSH
29061: LD_INT 3
29063: ARRAY
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: LD_INT 8
29070: PUSH
29071: LD_INT 9
29073: PUSH
29074: LD_INT 10
29076: PUSH
29077: LD_INT 11
29079: PUSH
29080: LD_INT 12
29082: PUSH
29083: LD_INT 13
29085: PUSH
29086: LD_INT 16
29088: PUSH
29089: LD_INT 17
29091: PUSH
29092: LD_INT 18
29094: PUSH
29095: LD_INT 19
29097: PUSH
29098: LD_INT 20
29100: PUSH
29101: LD_INT 21
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: IN
29119: NOT
29120: OR
29121: PUSH
29122: LD_VAR 0 8
29126: PUSH
29127: LD_INT 5
29129: ARRAY
29130: NOT
29131: OR
29132: PUSH
29133: LD_VAR 0 8
29137: PUSH
29138: LD_INT 6
29140: ARRAY
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: LD_INT 7
29150: PUSH
29151: LD_INT 9
29153: PUSH
29154: LD_INT 10
29156: PUSH
29157: LD_INT 11
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: IN
29168: NOT
29169: OR
29170: IFFALSE 29176
// exit ;
29172: POP
29173: POP
29174: GO 29259
// end ;
29176: GO 28847
29178: POP
29179: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29180: LD_VAR 0 9
29184: PPUSH
29185: LD_VAR 0 3
29189: PPUSH
29190: LD_VAR 0 4
29194: PPUSH
29195: LD_INT 20
29197: PPUSH
29198: CALL 21182 0 4
29202: PUSH
29203: LD_INT 4
29205: ARRAY
29206: IFFALSE 29210
// exit ;
29208: GO 29259
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29210: LD_VAR 0 2
29214: PUSH
29215: LD_INT 29
29217: PUSH
29218: LD_INT 30
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: IN
29225: PUSH
29226: LD_VAR 0 3
29230: PPUSH
29231: LD_VAR 0 4
29235: PPUSH
29236: LD_VAR 0 9
29240: PPUSH
29241: CALL_OW 440
29245: NOT
29246: AND
29247: IFFALSE 29251
// exit ;
29249: GO 29259
// result := true ;
29251: LD_ADDR_VAR 0 6
29255: PUSH
29256: LD_INT 1
29258: ST_TO_ADDR
// end ;
29259: LD_VAR 0 6
29263: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29264: LD_INT 0
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
29282: PPUSH
29283: PPUSH
29284: PPUSH
29285: PPUSH
29286: PPUSH
29287: PPUSH
29288: PPUSH
29289: PPUSH
29290: PPUSH
29291: PPUSH
29292: PPUSH
29293: PPUSH
29294: PPUSH
29295: PPUSH
29296: PPUSH
29297: PPUSH
29298: PPUSH
29299: PPUSH
29300: PPUSH
29301: PPUSH
29302: PPUSH
29303: PPUSH
29304: PPUSH
29305: PPUSH
29306: PPUSH
29307: PPUSH
29308: PPUSH
29309: PPUSH
29310: PPUSH
29311: PPUSH
29312: PPUSH
29313: PPUSH
29314: PPUSH
29315: PPUSH
29316: PPUSH
29317: PPUSH
29318: PPUSH
29319: PPUSH
29320: PPUSH
29321: PPUSH
29322: PPUSH
29323: PPUSH
// result = [ ] ;
29324: LD_ADDR_VAR 0 7
29328: PUSH
29329: EMPTY
29330: ST_TO_ADDR
// temp_list = [ ] ;
29331: LD_ADDR_VAR 0 9
29335: PUSH
29336: EMPTY
29337: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29338: LD_VAR 0 4
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: LD_INT 2
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: LD_INT 4
29357: PUSH
29358: LD_INT 5
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: IN
29369: NOT
29370: PUSH
29371: LD_VAR 0 1
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: IN
29386: PUSH
29387: LD_VAR 0 5
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: LD_INT 2
29397: PUSH
29398: LD_INT 3
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: IN
29406: NOT
29407: AND
29408: OR
29409: IFFALSE 29413
// exit ;
29411: GO 47804
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29413: LD_VAR 0 1
29417: PUSH
29418: LD_INT 6
29420: PUSH
29421: LD_INT 7
29423: PUSH
29424: LD_INT 8
29426: PUSH
29427: LD_INT 13
29429: PUSH
29430: LD_INT 12
29432: PUSH
29433: LD_INT 15
29435: PUSH
29436: LD_INT 11
29438: PUSH
29439: LD_INT 14
29441: PUSH
29442: LD_INT 10
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: IN
29456: IFFALSE 29466
// btype = b_lab ;
29458: LD_ADDR_VAR 0 1
29462: PUSH
29463: LD_INT 6
29465: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29466: LD_VAR 0 6
29470: PUSH
29471: LD_INT 0
29473: PUSH
29474: LD_INT 1
29476: PUSH
29477: LD_INT 2
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: IN
29485: NOT
29486: PUSH
29487: LD_VAR 0 1
29491: PUSH
29492: LD_INT 0
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: LD_INT 2
29500: PUSH
29501: LD_INT 3
29503: PUSH
29504: LD_INT 6
29506: PUSH
29507: LD_INT 36
29509: PUSH
29510: LD_INT 4
29512: PUSH
29513: LD_INT 5
29515: PUSH
29516: LD_INT 31
29518: PUSH
29519: LD_INT 32
29521: PUSH
29522: LD_INT 33
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: IN
29538: NOT
29539: PUSH
29540: LD_VAR 0 6
29544: PUSH
29545: LD_INT 1
29547: EQUAL
29548: AND
29549: OR
29550: PUSH
29551: LD_VAR 0 1
29555: PUSH
29556: LD_INT 2
29558: PUSH
29559: LD_INT 3
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: IN
29566: NOT
29567: PUSH
29568: LD_VAR 0 6
29572: PUSH
29573: LD_INT 2
29575: EQUAL
29576: AND
29577: OR
29578: IFFALSE 29588
// mode = 0 ;
29580: LD_ADDR_VAR 0 6
29584: PUSH
29585: LD_INT 0
29587: ST_TO_ADDR
// case mode of 0 :
29588: LD_VAR 0 6
29592: PUSH
29593: LD_INT 0
29595: DOUBLE
29596: EQUAL
29597: IFTRUE 29601
29599: GO 41054
29601: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29602: LD_ADDR_VAR 0 11
29606: PUSH
29607: LD_INT 0
29609: PUSH
29610: LD_INT 0
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 0
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: LD_INT 1
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 0
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 1
29671: NEG
29672: PUSH
29673: LD_INT 1
29675: NEG
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 1
29683: NEG
29684: PUSH
29685: LD_INT 2
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: LD_INT 2
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: LD_INT 2
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: NEG
29738: PUSH
29739: LD_INT 1
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: LD_INT 3
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: LD_INT 3
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 1
29768: NEG
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29795: LD_ADDR_VAR 0 12
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: LD_INT 0
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: LD_INT 1
29815: NEG
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 1
29853: NEG
29854: PUSH
29855: LD_INT 0
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: LD_INT 1
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 2
29918: NEG
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 2
29929: NEG
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: NEG
29942: PUSH
29943: LD_INT 1
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 3
29952: NEG
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 3
29963: NEG
29964: PUSH
29965: LD_INT 1
29967: NEG
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29991: LD_ADDR_VAR 0 13
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: LD_INT 1
30011: NEG
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: LD_INT 1
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: NEG
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: LD_INT 2
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 2
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 2
30094: PUSH
30095: LD_INT 2
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: LD_INT 2
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 2
30114: NEG
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 2
30126: NEG
30127: PUSH
30128: LD_INT 2
30130: NEG
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 2
30138: NEG
30139: PUSH
30140: LD_INT 3
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 3
30150: NEG
30151: PUSH
30152: LD_INT 2
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 3
30162: NEG
30163: PUSH
30164: LD_INT 3
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30190: LD_ADDR_VAR 0 14
30194: PUSH
30195: LD_INT 0
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 0
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 1
30248: NEG
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: LD_INT 1
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: LD_INT 2
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 2
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 1
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: LD_INT 2
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 1
30336: NEG
30337: PUSH
30338: LD_INT 3
30340: NEG
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: LD_INT 3
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: LD_INT 2
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30386: LD_ADDR_VAR 0 15
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 0
30403: PUSH
30404: LD_INT 1
30406: NEG
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 1
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 0
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 1
30444: NEG
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 1
30455: NEG
30456: PUSH
30457: LD_INT 1
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: LD_INT 1
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 2
30478: PUSH
30479: LD_INT 0
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 2
30488: PUSH
30489: LD_INT 1
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 1
30498: NEG
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 2
30509: NEG
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 2
30520: NEG
30521: PUSH
30522: LD_INT 1
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 2
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 3
30543: PUSH
30544: LD_INT 0
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 3
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30579: LD_ADDR_VAR 0 16
30583: PUSH
30584: LD_INT 0
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 1
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 1
30648: NEG
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 1
30660: NEG
30661: PUSH
30662: LD_INT 2
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: LD_INT 1
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 2
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 2
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 2
30702: NEG
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 2
30714: NEG
30715: PUSH
30716: LD_INT 2
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 3
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 3
30736: PUSH
30737: LD_INT 3
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 2
30746: PUSH
30747: LD_INT 3
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30772: LD_ADDR_VAR 0 17
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: LD_INT 1
30792: NEG
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 1
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 0
30820: PUSH
30821: LD_INT 1
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 1
30830: NEG
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: NEG
30842: PUSH
30843: LD_INT 1
30845: NEG
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: LD_INT 2
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 1
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 2
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 2
30897: PUSH
30898: LD_INT 1
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 2
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 1
30917: PUSH
30918: LD_INT 2
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 1
30937: NEG
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 2
30948: NEG
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 2
30959: NEG
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 2
30971: NEG
30972: PUSH
30973: LD_INT 2
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31002: LD_ADDR_VAR 0 18
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: LD_INT 1
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 1
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: LD_INT 2
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 2
31137: PUSH
31138: LD_INT 2
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: LD_INT 2
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 2
31178: NEG
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 2
31189: NEG
31190: PUSH
31191: LD_INT 1
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 2
31201: NEG
31202: PUSH
31203: LD_INT 2
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31232: LD_ADDR_VAR 0 19
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: LD_INT 0
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 1
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: LD_INT 1
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: LD_INT 0
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 1
31301: NEG
31302: PUSH
31303: LD_INT 1
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: LD_INT 2
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: LD_INT 2
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: LD_INT 1
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 2
31357: PUSH
31358: LD_INT 1
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: PUSH
31378: LD_INT 2
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: NEG
31398: PUSH
31399: LD_INT 1
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: NEG
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 2
31431: NEG
31432: PUSH
31433: LD_INT 2
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31462: LD_ADDR_VAR 0 20
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 0
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: LD_INT 1
31482: NEG
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: NEG
31544: PUSH
31545: LD_INT 2
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 2
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 2
31638: NEG
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 2
31649: NEG
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: NEG
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31692: LD_ADDR_VAR 0 21
31696: PUSH
31697: LD_INT 0
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: LD_INT 1
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: LD_INT 1
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 1
31761: NEG
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 1
31773: NEG
31774: PUSH
31775: LD_INT 2
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 0
31785: PUSH
31786: LD_INT 2
31788: NEG
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 2
31817: PUSH
31818: LD_INT 1
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 2
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 1
31857: NEG
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: NEG
31869: PUSH
31870: LD_INT 0
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 2
31879: NEG
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: LD_INT 2
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31922: LD_ADDR_VAR 0 22
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: LD_INT 1
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 1
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 1
31991: NEG
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: LD_INT 2
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 2
32047: PUSH
32048: LD_INT 1
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 2
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 1
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 1
32087: NEG
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: LD_INT 0
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: NEG
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 2
32121: NEG
32122: PUSH
32123: LD_INT 2
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32152: LD_ADDR_VAR 0 23
32156: PUSH
32157: LD_INT 0
32159: PUSH
32160: LD_INT 0
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: LD_INT 1
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: LD_INT 1
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: NEG
32222: PUSH
32223: LD_INT 1
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: LD_INT 2
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 0
32245: PUSH
32246: LD_INT 2
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 2
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 1
32317: NEG
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 2
32328: NEG
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 2
32339: NEG
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 2
32351: NEG
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 2
32363: NEG
32364: PUSH
32365: LD_INT 3
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: LD_INT 3
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 2
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32432: LD_ADDR_VAR 0 24
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: LD_INT 1
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: NEG
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: LD_INT 2
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 2
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: LD_INT 2
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: LD_INT 2
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: LD_INT 2
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 2
32608: NEG
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 2
32619: NEG
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 2
32631: NEG
32632: PUSH
32633: LD_INT 2
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: LD_INT 2
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: LD_INT 1
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 3
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 3
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32708: LD_ADDR_VAR 0 25
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: LD_INT 1
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 1
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: LD_INT 1
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 1
32766: NEG
32767: PUSH
32768: LD_INT 0
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 1
32777: NEG
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 1
32789: NEG
32790: PUSH
32791: LD_INT 2
32793: NEG
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 0
32801: PUSH
32802: LD_INT 2
32804: NEG
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 2
32833: PUSH
32834: LD_INT 1
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 2
32843: PUSH
32844: LD_INT 2
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: LD_INT 2
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 0
32863: PUSH
32864: LD_INT 2
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 2
32884: NEG
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 2
32907: NEG
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 3
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 2
32939: PUSH
32940: LD_INT 3
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32982: LD_ADDR_VAR 0 26
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 1
33063: NEG
33064: PUSH
33065: LD_INT 2
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: LD_INT 2
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 2
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 2
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 1
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: LD_INT 2
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 2
33158: NEG
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: NEG
33182: PUSH
33183: LD_INT 2
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: LD_INT 3
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: LD_INT 3
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: LD_INT 2
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 2
33224: NEG
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33258: LD_ADDR_VAR 0 27
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: LD_INT 1
33278: NEG
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 1
33316: NEG
33317: PUSH
33318: LD_INT 0
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 1
33327: NEG
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 1
33339: NEG
33340: PUSH
33341: LD_INT 2
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: LD_INT 2
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: LD_INT 2
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 2
33434: NEG
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: NEG
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 2
33457: NEG
33458: PUSH
33459: LD_INT 2
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 1
33469: NEG
33470: PUSH
33471: LD_INT 2
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 2
33480: NEG
33481: PUSH
33482: LD_INT 1
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 3
33491: NEG
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 3
33503: NEG
33504: PUSH
33505: LD_INT 2
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33538: LD_ADDR_VAR 0 28
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: LD_INT 1
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: LD_INT 2
33623: NEG
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: LD_INT 2
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 2
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: LD_INT 2
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: NEG
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 2
33737: NEG
33738: PUSH
33739: LD_INT 2
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 2
33749: NEG
33750: PUSH
33751: LD_INT 3
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 1
33761: NEG
33762: PUSH
33763: LD_INT 3
33765: NEG
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 3
33773: NEG
33774: PUSH
33775: LD_INT 1
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 3
33785: NEG
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33820: LD_ADDR_VAR 0 29
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 1
33878: NEG
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: LD_INT 1
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: LD_INT 2
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: LD_INT 2
33916: NEG
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 2
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 2
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: LD_INT 2
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: NEG
33999: PUSH
34000: LD_INT 2
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 2
34010: NEG
34011: PUSH
34012: LD_INT 3
34014: NEG
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: LD_INT 1
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 3
34033: PUSH
34034: LD_INT 1
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: LD_INT 3
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 3
34064: NEG
34065: PUSH
34066: LD_INT 2
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34099: LD_ADDR_VAR 0 30
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 0
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 1
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: LD_INT 1
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 0
34147: PUSH
34148: LD_INT 1
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 1
34157: NEG
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: LD_INT 1
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 1
34180: NEG
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 1
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 2
34234: PUSH
34235: LD_INT 2
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: LD_INT 2
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 1
34254: NEG
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 2
34265: NEG
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 2
34276: NEG
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 1
34288: NEG
34289: PUSH
34290: LD_INT 3
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: LD_INT 2
34303: NEG
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 2
34321: PUSH
34322: LD_INT 3
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 2
34331: NEG
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 3
34342: NEG
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34377: LD_ADDR_VAR 0 31
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 0
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 0
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: LD_INT 1
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 1
34458: NEG
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 2
34501: PUSH
34502: LD_INT 2
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: LD_INT 2
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 2
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: NEG
34555: PUSH
34556: LD_INT 2
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 2
34566: NEG
34567: PUSH
34568: LD_INT 3
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 2
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: LD_INT 1
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 3
34620: NEG
34621: PUSH
34622: LD_INT 2
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34655: LD_ADDR_VAR 0 32
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: LD_INT 1
34675: NEG
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 1
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 1
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: NEG
34737: PUSH
34738: LD_INT 2
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 0
34748: PUSH
34749: LD_INT 2
34751: NEG
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 2
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 2
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: LD_INT 2
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 2
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: NEG
34811: PUSH
34812: LD_INT 1
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 2
34832: NEG
34833: PUSH
34834: LD_INT 1
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 1
34844: NEG
34845: PUSH
34846: LD_INT 3
34848: NEG
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 1
34856: PUSH
34857: LD_INT 2
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 3
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: LD_INT 3
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 2
34887: NEG
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 3
34898: NEG
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34933: LD_ADDR_VAR 0 33
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 1
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: LD_INT 2
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 2
35088: NEG
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 2
35099: NEG
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: LD_INT 2
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 2
35123: NEG
35124: PUSH
35125: LD_INT 3
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: PUSH
35136: LD_INT 1
35138: NEG
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 3
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: LD_INT 3
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: LD_INT 2
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 3
35177: NEG
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35212: LD_ADDR_VAR 0 34
35216: PUSH
35217: LD_INT 0
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 0
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: LD_INT 0
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 0
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: NEG
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 1
35281: NEG
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: LD_INT 2
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: LD_INT 2
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 1
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 2
35327: PUSH
35328: LD_INT 1
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 2
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: LD_INT 2
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 1
35357: NEG
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 2
35368: NEG
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: NEG
35380: PUSH
35381: LD_INT 1
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: LD_INT 2
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: NEG
35404: PUSH
35405: LD_INT 3
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: LD_INT 2
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 3
35426: PUSH
35427: LD_INT 2
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 3
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 2
35446: NEG
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 3
35457: NEG
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35492: LD_ADDR_VAR 0 35
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: LD_INT 0
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 0
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: NEG
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35604: LD_ADDR_VAR 0 36
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: NEG
35674: PUSH
35675: LD_INT 1
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: LD_INT 2
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: LD_INT 2
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35716: LD_ADDR_VAR 0 37
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35828: LD_ADDR_VAR 0 38
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 2
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 2
35919: NEG
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35940: LD_ADDR_VAR 0 39
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: LD_INT 2
36025: NEG
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: LD_INT 2
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36052: LD_ADDR_VAR 0 40
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: LD_INT 1
36072: NEG
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: LD_INT 1
36125: NEG
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36164: LD_ADDR_VAR 0 41
36168: PUSH
36169: LD_INT 0
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: NEG
36234: PUSH
36235: LD_INT 1
36237: NEG
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 2
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 2
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 2
36288: PUSH
36289: LD_INT 2
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 2
36330: NEG
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: LD_INT 2
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 2
36354: NEG
36355: PUSH
36356: LD_INT 3
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 2
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 3
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 3
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 3
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 3
36407: PUSH
36408: LD_INT 3
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: LD_INT 3
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 2
36427: NEG
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 3
36438: NEG
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 3
36449: NEG
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 3
36461: NEG
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 3
36473: NEG
36474: PUSH
36475: LD_INT 3
36477: NEG
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36514: LD_ADDR_VAR 0 42
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 2
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: LD_INT 1
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: LD_INT 2
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: LD_INT 2
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: LD_INT 2
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 2
36680: NEG
36681: PUSH
36682: LD_INT 1
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: LD_INT 2
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 2
36704: NEG
36705: PUSH
36706: LD_INT 3
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: NEG
36717: PUSH
36718: LD_INT 3
36720: NEG
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: LD_INT 3
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: LD_INT 2
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 3
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 3
36760: PUSH
36761: LD_INT 3
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 2
36770: PUSH
36771: LD_INT 3
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 1
36780: PUSH
36781: LD_INT 3
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: LD_INT 3
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 3
36811: NEG
36812: PUSH
36813: LD_INT 2
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 3
36823: NEG
36824: PUSH
36825: LD_INT 3
36827: NEG
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36864: LD_ADDR_VAR 0 43
36868: PUSH
36869: LD_INT 0
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 1
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 1
36933: NEG
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: LD_INT 2
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: LD_INT 2
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 2
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 2
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 2
37030: NEG
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 2
37041: NEG
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: LD_INT 3
37057: NEG
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: LD_INT 3
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: LD_INT 2
37079: NEG
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 3
37098: PUSH
37099: LD_INT 0
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 3
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: LD_INT 3
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: LD_INT 3
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: LD_INT 2
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 2
37149: NEG
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 3
37160: NEG
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 3
37171: NEG
37172: PUSH
37173: LD_INT 1
37175: NEG
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37212: LD_ADDR_VAR 0 44
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 1
37270: NEG
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: LD_INT 2
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: LD_INT 1
37308: NEG
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 2
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 2
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: LD_INT 2
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 2
37367: NEG
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: LD_INT 2
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 2
37402: NEG
37403: PUSH
37404: LD_INT 3
37406: NEG
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 3
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 3
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 3
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 3
37455: PUSH
37456: LD_INT 3
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: LD_INT 3
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 2
37475: NEG
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 3
37486: NEG
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 3
37497: NEG
37498: PUSH
37499: LD_INT 1
37501: NEG
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 3
37509: NEG
37510: PUSH
37511: LD_INT 2
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 3
37521: NEG
37522: PUSH
37523: LD_INT 3
37525: NEG
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37562: LD_ADDR_VAR 0 45
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: LD_INT 1
37635: NEG
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: LD_INT 2
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: LD_INT 2
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 2
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: LD_INT 2
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 2
37728: NEG
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 2
37740: NEG
37741: PUSH
37742: LD_INT 2
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 2
37752: NEG
37753: PUSH
37754: LD_INT 3
37756: NEG
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: LD_INT 3
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 3
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: LD_INT 2
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 3
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 3
37808: PUSH
37809: LD_INT 3
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 2
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: LD_INT 3
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 3
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 3
37859: NEG
37860: PUSH
37861: LD_INT 2
37863: NEG
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 3
37871: NEG
37872: PUSH
37873: LD_INT 3
37875: NEG
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37912: LD_ADDR_VAR 0 46
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: NEG
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 0
38005: PUSH
38006: LD_INT 2
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: LD_INT 1
38019: NEG
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 2
38089: NEG
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: LD_INT 3
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: LD_INT 3
38116: NEG
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 1
38124: PUSH
38125: LD_INT 2
38127: NEG
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 2
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 3
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 3
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 0
38176: PUSH
38177: LD_INT 3
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: NEG
38187: PUSH
38188: LD_INT 2
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 2
38197: NEG
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 3
38208: NEG
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 3
38219: NEG
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38260: LD_ADDR_VAR 0 47
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 2
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: LD_INT 2
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 2
38387: NEG
38388: PUSH
38389: LD_INT 2
38391: NEG
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38411: LD_ADDR_VAR 0 48
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: LD_INT 0
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: LD_INT 2
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: LD_INT 2
38507: NEG
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: LD_INT 1
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 2
38536: PUSH
38537: LD_INT 1
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38558: LD_ADDR_VAR 0 49
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: LD_INT 1
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: LD_INT 1
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 2
38670: PUSH
38671: LD_INT 2
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38702: LD_ADDR_VAR 0 50
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: NEG
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: LD_INT 1
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 2
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38846: LD_ADDR_VAR 0 51
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: NEG
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 2
38958: NEG
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38993: LD_ADDR_VAR 0 52
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: LD_INT 2
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 2
39097: NEG
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 2
39108: NEG
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 2
39120: NEG
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39144: LD_ADDR_VAR 0 53
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 1
39213: NEG
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 1
39225: NEG
39226: PUSH
39227: LD_INT 2
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: LD_INT 2
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: LD_INT 1
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 2
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: LD_INT 1
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 2
39279: PUSH
39280: LD_INT 2
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: LD_INT 2
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39374: LD_ADDR_VAR 0 54
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: NEG
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: LD_INT 2
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: LD_INT 2
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 2
39573: NEG
39574: PUSH
39575: LD_INT 2
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39604: LD_ADDR_VAR 0 55
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: LD_INT 2
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: LD_INT 2
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: LD_INT 2
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: NEG
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 2
39780: NEG
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 2
39791: NEG
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 2
39803: NEG
39804: PUSH
39805: LD_INT 2
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39834: LD_ADDR_VAR 0 56
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: LD_INT 0
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: LD_INT 2
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 2
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: NEG
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 2
40033: NEG
40034: PUSH
40035: LD_INT 2
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40064: LD_ADDR_VAR 0 57
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: LD_INT 2
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: LD_INT 2
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: LD_INT 2
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: NEG
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: NEG
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 2
40263: NEG
40264: PUSH
40265: LD_INT 2
40267: NEG
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40294: LD_ADDR_VAR 0 58
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: LD_INT 2
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: LD_INT 2
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 2
40493: NEG
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40524: LD_ADDR_VAR 0 59
40528: PUSH
40529: LD_INT 0
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40612: LD_ADDR_VAR 0 60
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40700: LD_ADDR_VAR 0 61
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40788: LD_ADDR_VAR 0 62
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40876: LD_ADDR_VAR 0 63
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40964: LD_ADDR_VAR 0 64
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: LD_INT 1
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: ST_TO_ADDR
// end ; 1 :
41052: GO 46949
41054: LD_INT 1
41056: DOUBLE
41057: EQUAL
41058: IFTRUE 41062
41060: GO 43685
41062: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41063: LD_ADDR_VAR 0 11
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 3
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 3
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41107: LD_ADDR_VAR 0 12
41111: PUSH
41112: LD_INT 2
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 3
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 3
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: LIST
41147: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41148: LD_ADDR_VAR 0 13
41152: PUSH
41153: LD_INT 3
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 3
41165: PUSH
41166: LD_INT 3
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: LD_INT 3
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41188: LD_ADDR_VAR 0 14
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 3
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 3
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: LIST
41228: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41229: LD_ADDR_VAR 0 15
41233: PUSH
41234: LD_INT 2
41236: NEG
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 3
41247: NEG
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 3
41258: NEG
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41273: LD_ADDR_VAR 0 16
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: LD_INT 3
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 3
41292: NEG
41293: PUSH
41294: LD_INT 2
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 3
41304: NEG
41305: PUSH
41306: LD_INT 3
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: LIST
41318: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41319: LD_ADDR_VAR 0 17
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 3
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 3
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: LD_INT 2
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: LIST
41362: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41363: LD_ADDR_VAR 0 18
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 3
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 3
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41404: LD_ADDR_VAR 0 19
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 3
41421: PUSH
41422: LD_INT 3
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 2
41431: PUSH
41432: LD_INT 3
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: LIST
41443: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41444: LD_ADDR_VAR 0 20
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: LIST
41484: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41485: LD_ADDR_VAR 0 21
41489: PUSH
41490: LD_INT 2
41492: NEG
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 3
41503: NEG
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 3
41514: NEG
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: LIST
41528: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41529: LD_ADDR_VAR 0 22
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: LD_INT 3
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: NEG
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 3
41560: NEG
41561: PUSH
41562: LD_INT 3
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: LIST
41574: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41575: LD_ADDR_VAR 0 23
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 3
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 4
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 3
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: LIST
41618: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41619: LD_ADDR_VAR 0 24
41623: PUSH
41624: LD_INT 3
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 3
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 4
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41660: LD_ADDR_VAR 0 25
41664: PUSH
41665: LD_INT 3
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 4
41677: PUSH
41678: LD_INT 3
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 3
41687: PUSH
41688: LD_INT 4
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: LIST
41699: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41700: LD_ADDR_VAR 0 26
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: LD_INT 3
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: LD_INT 4
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: LD_INT 3
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41741: LD_ADDR_VAR 0 27
41745: PUSH
41746: LD_INT 3
41748: NEG
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 3
41759: NEG
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 4
41770: NEG
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41785: LD_ADDR_VAR 0 28
41789: PUSH
41790: LD_INT 3
41792: NEG
41793: PUSH
41794: LD_INT 3
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 3
41804: NEG
41805: PUSH
41806: LD_INT 4
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 4
41816: NEG
41817: PUSH
41818: LD_INT 3
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: LIST
41830: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41831: LD_ADDR_VAR 0 29
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: LD_INT 3
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 3
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: LD_INT 2
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: LD_INT 4
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 4
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 3
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: LD_INT 5
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: LD_INT 5
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: LD_INT 4
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: LD_INT 6
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 6
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: LD_INT 5
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
41986: LD_ADDR_VAR 0 30
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 3
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 3
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 4
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 4
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 4
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 5
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 5
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 5
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 6
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 6
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42129: LD_ADDR_VAR 0 31
42133: PUSH
42134: LD_INT 3
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 3
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 4
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 4
42176: PUSH
42177: LD_INT 4
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 3
42186: PUSH
42187: LD_INT 4
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 5
42196: PUSH
42197: LD_INT 4
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 5
42206: PUSH
42207: LD_INT 5
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 4
42216: PUSH
42217: LD_INT 5
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 6
42226: PUSH
42227: LD_INT 5
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 6
42236: PUSH
42237: LD_INT 6
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 5
42246: PUSH
42247: LD_INT 6
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42268: LD_ADDR_VAR 0 32
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 3
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: LD_INT 3
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: LD_INT 4
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 4
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 3
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 5
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: LD_INT 5
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: LD_INT 4
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 6
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 6
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: LD_INT 5
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42411: LD_ADDR_VAR 0 33
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 3
42429: NEG
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 3
42440: NEG
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 3
42452: NEG
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 4
42463: NEG
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 4
42474: NEG
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 4
42486: NEG
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 5
42497: NEG
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 5
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 5
42520: NEG
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 6
42531: NEG
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 6
42542: NEG
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42566: LD_ADDR_VAR 0 34
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: LD_INT 3
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 3
42585: NEG
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 3
42597: NEG
42598: PUSH
42599: LD_INT 3
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 3
42609: NEG
42610: PUSH
42611: LD_INT 4
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 4
42621: NEG
42622: PUSH
42623: LD_INT 3
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 4
42633: NEG
42634: PUSH
42635: LD_INT 4
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 4
42645: NEG
42646: PUSH
42647: LD_INT 5
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 5
42657: NEG
42658: PUSH
42659: LD_INT 4
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 5
42669: NEG
42670: PUSH
42671: LD_INT 5
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 5
42681: NEG
42682: PUSH
42683: LD_INT 6
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 6
42693: NEG
42694: PUSH
42695: LD_INT 5
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 6
42705: NEG
42706: PUSH
42707: LD_INT 6
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42729: LD_ADDR_VAR 0 41
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: LD_INT 3
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42773: LD_ADDR_VAR 0 42
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 3
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: LIST
42813: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42814: LD_ADDR_VAR 0 43
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 3
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: LD_INT 3
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42854: LD_ADDR_VAR 0 44
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 3
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: LIST
42894: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42895: LD_ADDR_VAR 0 45
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 3
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: LIST
42938: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42939: LD_ADDR_VAR 0 46
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: LD_INT 3
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 3
42970: NEG
42971: PUSH
42972: LD_INT 2
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
42985: LD_ADDR_VAR 0 47
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: LD_INT 3
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 3
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43018: LD_ADDR_VAR 0 48
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43049: LD_ADDR_VAR 0 49
43053: PUSH
43054: LD_INT 3
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 3
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43078: LD_ADDR_VAR 0 50
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: LD_INT 3
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: LD_INT 3
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43107: LD_ADDR_VAR 0 51
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: LD_INT 2
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43138: LD_ADDR_VAR 0 52
43142: PUSH
43143: LD_INT 3
43145: NEG
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 3
43157: NEG
43158: PUSH
43159: LD_INT 2
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43171: LD_ADDR_VAR 0 53
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: LD_INT 3
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 3
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: LIST
43214: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43215: LD_ADDR_VAR 0 54
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 3
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 3
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43256: LD_ADDR_VAR 0 55
43260: PUSH
43261: LD_INT 3
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 3
43273: PUSH
43274: LD_INT 3
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: LD_INT 3
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43296: LD_ADDR_VAR 0 56
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: LD_INT 3
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: LD_INT 3
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43337: LD_ADDR_VAR 0 57
43341: PUSH
43342: LD_INT 2
43344: NEG
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 3
43355: NEG
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 3
43366: NEG
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: LIST
43380: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43381: LD_ADDR_VAR 0 58
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: LD_INT 3
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 3
43400: NEG
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 3
43412: NEG
43413: PUSH
43414: LD_INT 3
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: LIST
43426: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43427: LD_ADDR_VAR 0 59
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43471: LD_ADDR_VAR 0 60
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43512: LD_ADDR_VAR 0 61
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: LIST
43551: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43552: LD_ADDR_VAR 0 62
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: LIST
43592: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43593: LD_ADDR_VAR 0 63
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: NEG
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43637: LD_ADDR_VAR 0 64
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: ST_TO_ADDR
// end ; 2 :
43683: GO 46949
43685: LD_INT 2
43687: DOUBLE
43688: EQUAL
43689: IFTRUE 43693
43691: GO 46948
43693: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43694: LD_ADDR_VAR 0 29
43698: PUSH
43699: LD_INT 4
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 4
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 5
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 5
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 4
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 3
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 3
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 5
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: LD_INT 3
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 3
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 4
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 4
43824: PUSH
43825: LD_INT 4
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 3
43834: PUSH
43835: LD_INT 4
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: LD_INT 3
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 4
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: LD_INT 4
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 4
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 4
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: LD_INT 5
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 5
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: LD_INT 4
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 3
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: LD_INT 5
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: LD_INT 3
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 3
43977: NEG
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 3
43988: NEG
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: NEG
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: NEG
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 3
44022: NEG
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 4
44033: NEG
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 4
44044: NEG
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 4
44056: NEG
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 4
44079: NEG
44080: PUSH
44081: LD_INT 4
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 4
44091: NEG
44092: PUSH
44093: LD_INT 5
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 3
44103: NEG
44104: PUSH
44105: LD_INT 4
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 3
44115: NEG
44116: PUSH
44117: LD_INT 3
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 4
44127: NEG
44128: PUSH
44129: LD_INT 3
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 5
44139: NEG
44140: PUSH
44141: LD_INT 4
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 5
44151: NEG
44152: PUSH
44153: LD_INT 5
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 3
44163: NEG
44164: PUSH
44165: LD_INT 5
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 5
44175: NEG
44176: PUSH
44177: LD_INT 3
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44232: LD_ADDR_VAR 0 30
44236: PUSH
44237: LD_INT 4
44239: PUSH
44240: LD_INT 4
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 4
44249: PUSH
44250: LD_INT 3
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 5
44259: PUSH
44260: LD_INT 4
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 5
44269: PUSH
44270: LD_INT 5
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 4
44279: PUSH
44280: LD_INT 5
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 3
44289: PUSH
44290: LD_INT 4
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 3
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 5
44309: PUSH
44310: LD_INT 3
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 3
44319: PUSH
44320: LD_INT 5
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 3
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: LD_INT 3
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 4
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 4
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 3
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: LD_INT 2
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: LD_INT 4
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 2
44411: NEG
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 4
44422: NEG
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 4
44433: NEG
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 3
44445: NEG
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 3
44456: NEG
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 4
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 5
44478: NEG
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 5
44489: NEG
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 5
44501: NEG
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 3
44513: NEG
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 3
44524: NEG
44525: PUSH
44526: LD_INT 3
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 3
44536: NEG
44537: PUSH
44538: LD_INT 4
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 2
44548: NEG
44549: PUSH
44550: LD_INT 3
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 3
44572: NEG
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 4
44584: NEG
44585: PUSH
44586: LD_INT 3
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 4
44596: NEG
44597: PUSH
44598: LD_INT 4
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: LD_INT 4
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 4
44620: NEG
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 4
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 5
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 4
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 3
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 3
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 4
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: LD_INT 5
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 3
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: LD_INT 5
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44779: LD_ADDR_VAR 0 31
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 4
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 3
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 4
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 5
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 5
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 4
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: LD_INT 3
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 5
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: LD_INT 3
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 3
44879: NEG
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 3
44890: NEG
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 3
44924: NEG
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 4
44935: NEG
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 4
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 4
44958: NEG
44959: PUSH
44960: LD_INT 2
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 4
44981: NEG
44982: PUSH
44983: LD_INT 4
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 4
44993: NEG
44994: PUSH
44995: LD_INT 5
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 3
45005: NEG
45006: PUSH
45007: LD_INT 4
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 3
45017: NEG
45018: PUSH
45019: LD_INT 3
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 4
45029: NEG
45030: PUSH
45031: LD_INT 3
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 5
45041: NEG
45042: PUSH
45043: LD_INT 4
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 5
45053: NEG
45054: PUSH
45055: LD_INT 5
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 3
45065: NEG
45066: PUSH
45067: LD_INT 5
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 5
45077: NEG
45078: PUSH
45079: LD_INT 3
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 3
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 4
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 3
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 3
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 4
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: LD_INT 4
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 4
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 4
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 5
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 5
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 4
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 3
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 3
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 5
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45329: LD_ADDR_VAR 0 32
45333: PUSH
45334: LD_INT 4
45336: NEG
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 4
45347: NEG
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 3
45359: NEG
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 3
45370: NEG
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 4
45381: NEG
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 5
45392: NEG
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 5
45403: NEG
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 5
45415: NEG
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 3
45427: NEG
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 3
45438: NEG
45439: PUSH
45440: LD_INT 3
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 3
45450: NEG
45451: PUSH
45452: LD_INT 4
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: LD_INT 3
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 3
45486: NEG
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 4
45498: NEG
45499: PUSH
45500: LD_INT 3
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 4
45510: NEG
45511: PUSH
45512: LD_INT 4
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: LD_INT 4
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 4
45534: NEG
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 4
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 5
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 4
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 3
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 3
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 4
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 5
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: LD_INT 3
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: LD_INT 5
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 3
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 3
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 4
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 4
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 3
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 4
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 4
45741: PUSH
45742: LD_INT 4
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 4
45751: PUSH
45752: LD_INT 3
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 5
45761: PUSH
45762: LD_INT 4
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 5
45771: PUSH
45772: LD_INT 5
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 4
45781: PUSH
45782: LD_INT 5
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 3
45791: PUSH
45792: LD_INT 4
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 3
45801: PUSH
45802: LD_INT 3
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 5
45811: PUSH
45812: LD_INT 3
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 3
45821: PUSH
45822: LD_INT 5
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45876: LD_ADDR_VAR 0 33
45880: PUSH
45881: LD_INT 4
45883: NEG
45884: PUSH
45885: LD_INT 4
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 4
45895: NEG
45896: PUSH
45897: LD_INT 5
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: NEG
45908: PUSH
45909: LD_INT 4
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 3
45919: NEG
45920: PUSH
45921: LD_INT 3
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 4
45931: NEG
45932: PUSH
45933: LD_INT 3
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 5
45943: NEG
45944: PUSH
45945: LD_INT 4
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 5
45955: NEG
45956: PUSH
45957: LD_INT 5
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 3
45967: NEG
45968: PUSH
45969: LD_INT 5
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 5
45979: NEG
45980: PUSH
45981: LD_INT 3
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 3
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 4
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 3
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 4
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 4
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 4
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 4
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 5
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 5
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 4
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 3
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 3
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 3
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 5
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 3
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 3
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 4
46206: PUSH
46207: LD_INT 3
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 4
46216: PUSH
46217: LD_INT 4
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 3
46226: PUSH
46227: LD_INT 4
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: LD_INT 3
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 4
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: LD_INT 4
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 4
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 4
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: LD_INT 5
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 5
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 4
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 3
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: LD_INT 5
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46414: LD_ADDR_VAR 0 34
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 4
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 5
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 4
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 3
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 3
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 4
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 5
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: LD_INT 3
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: LD_INT 5
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 3
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 3
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 4
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 4
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 3
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 4
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 4
46616: PUSH
46617: LD_INT 4
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 4
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 5
46636: PUSH
46637: LD_INT 4
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 5
46646: PUSH
46647: LD_INT 5
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 4
46656: PUSH
46657: LD_INT 5
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 3
46666: PUSH
46667: LD_INT 4
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 3
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 5
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 3
46696: PUSH
46697: LD_INT 5
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 3
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 4
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 4
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 3
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 4
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 4
46799: NEG
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 4
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 3
46822: NEG
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 3
46833: NEG
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 4
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 5
46855: NEG
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 5
46866: NEG
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 5
46878: NEG
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 3
46890: NEG
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: ST_TO_ADDR
// end ; end ;
46946: GO 46949
46948: POP
// case btype of b_depot , b_warehouse :
46949: LD_VAR 0 1
46953: PUSH
46954: LD_INT 0
46956: DOUBLE
46957: EQUAL
46958: IFTRUE 46968
46960: LD_INT 1
46962: DOUBLE
46963: EQUAL
46964: IFTRUE 46968
46966: GO 47169
46968: POP
// case nation of nation_american :
46969: LD_VAR 0 5
46973: PUSH
46974: LD_INT 1
46976: DOUBLE
46977: EQUAL
46978: IFTRUE 46982
46980: GO 47038
46982: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
46983: LD_ADDR_VAR 0 9
46987: PUSH
46988: LD_VAR 0 11
46992: PUSH
46993: LD_VAR 0 12
46997: PUSH
46998: LD_VAR 0 13
47002: PUSH
47003: LD_VAR 0 14
47007: PUSH
47008: LD_VAR 0 15
47012: PUSH
47013: LD_VAR 0 16
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: PUSH
47026: LD_VAR 0 4
47030: PUSH
47031: LD_INT 1
47033: PLUS
47034: ARRAY
47035: ST_TO_ADDR
47036: GO 47167
47038: LD_INT 2
47040: DOUBLE
47041: EQUAL
47042: IFTRUE 47046
47044: GO 47102
47046: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47047: LD_ADDR_VAR 0 9
47051: PUSH
47052: LD_VAR 0 17
47056: PUSH
47057: LD_VAR 0 18
47061: PUSH
47062: LD_VAR 0 19
47066: PUSH
47067: LD_VAR 0 20
47071: PUSH
47072: LD_VAR 0 21
47076: PUSH
47077: LD_VAR 0 22
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: PUSH
47090: LD_VAR 0 4
47094: PUSH
47095: LD_INT 1
47097: PLUS
47098: ARRAY
47099: ST_TO_ADDR
47100: GO 47167
47102: LD_INT 3
47104: DOUBLE
47105: EQUAL
47106: IFTRUE 47110
47108: GO 47166
47110: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47111: LD_ADDR_VAR 0 9
47115: PUSH
47116: LD_VAR 0 23
47120: PUSH
47121: LD_VAR 0 24
47125: PUSH
47126: LD_VAR 0 25
47130: PUSH
47131: LD_VAR 0 26
47135: PUSH
47136: LD_VAR 0 27
47140: PUSH
47141: LD_VAR 0 28
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: PUSH
47154: LD_VAR 0 4
47158: PUSH
47159: LD_INT 1
47161: PLUS
47162: ARRAY
47163: ST_TO_ADDR
47164: GO 47167
47166: POP
47167: GO 47722
47169: LD_INT 2
47171: DOUBLE
47172: EQUAL
47173: IFTRUE 47183
47175: LD_INT 3
47177: DOUBLE
47178: EQUAL
47179: IFTRUE 47183
47181: GO 47239
47183: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47184: LD_ADDR_VAR 0 9
47188: PUSH
47189: LD_VAR 0 29
47193: PUSH
47194: LD_VAR 0 30
47198: PUSH
47199: LD_VAR 0 31
47203: PUSH
47204: LD_VAR 0 32
47208: PUSH
47209: LD_VAR 0 33
47213: PUSH
47214: LD_VAR 0 34
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: PUSH
47227: LD_VAR 0 4
47231: PUSH
47232: LD_INT 1
47234: PLUS
47235: ARRAY
47236: ST_TO_ADDR
47237: GO 47722
47239: LD_INT 16
47241: DOUBLE
47242: EQUAL
47243: IFTRUE 47301
47245: LD_INT 17
47247: DOUBLE
47248: EQUAL
47249: IFTRUE 47301
47251: LD_INT 18
47253: DOUBLE
47254: EQUAL
47255: IFTRUE 47301
47257: LD_INT 19
47259: DOUBLE
47260: EQUAL
47261: IFTRUE 47301
47263: LD_INT 22
47265: DOUBLE
47266: EQUAL
47267: IFTRUE 47301
47269: LD_INT 20
47271: DOUBLE
47272: EQUAL
47273: IFTRUE 47301
47275: LD_INT 21
47277: DOUBLE
47278: EQUAL
47279: IFTRUE 47301
47281: LD_INT 23
47283: DOUBLE
47284: EQUAL
47285: IFTRUE 47301
47287: LD_INT 24
47289: DOUBLE
47290: EQUAL
47291: IFTRUE 47301
47293: LD_INT 25
47295: DOUBLE
47296: EQUAL
47297: IFTRUE 47301
47299: GO 47357
47301: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47302: LD_ADDR_VAR 0 9
47306: PUSH
47307: LD_VAR 0 35
47311: PUSH
47312: LD_VAR 0 36
47316: PUSH
47317: LD_VAR 0 37
47321: PUSH
47322: LD_VAR 0 38
47326: PUSH
47327: LD_VAR 0 39
47331: PUSH
47332: LD_VAR 0 40
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: PUSH
47345: LD_VAR 0 4
47349: PUSH
47350: LD_INT 1
47352: PLUS
47353: ARRAY
47354: ST_TO_ADDR
47355: GO 47722
47357: LD_INT 6
47359: DOUBLE
47360: EQUAL
47361: IFTRUE 47413
47363: LD_INT 7
47365: DOUBLE
47366: EQUAL
47367: IFTRUE 47413
47369: LD_INT 8
47371: DOUBLE
47372: EQUAL
47373: IFTRUE 47413
47375: LD_INT 13
47377: DOUBLE
47378: EQUAL
47379: IFTRUE 47413
47381: LD_INT 12
47383: DOUBLE
47384: EQUAL
47385: IFTRUE 47413
47387: LD_INT 15
47389: DOUBLE
47390: EQUAL
47391: IFTRUE 47413
47393: LD_INT 11
47395: DOUBLE
47396: EQUAL
47397: IFTRUE 47413
47399: LD_INT 14
47401: DOUBLE
47402: EQUAL
47403: IFTRUE 47413
47405: LD_INT 10
47407: DOUBLE
47408: EQUAL
47409: IFTRUE 47413
47411: GO 47469
47413: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47414: LD_ADDR_VAR 0 9
47418: PUSH
47419: LD_VAR 0 41
47423: PUSH
47424: LD_VAR 0 42
47428: PUSH
47429: LD_VAR 0 43
47433: PUSH
47434: LD_VAR 0 44
47438: PUSH
47439: LD_VAR 0 45
47443: PUSH
47444: LD_VAR 0 46
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: PUSH
47457: LD_VAR 0 4
47461: PUSH
47462: LD_INT 1
47464: PLUS
47465: ARRAY
47466: ST_TO_ADDR
47467: GO 47722
47469: LD_INT 36
47471: DOUBLE
47472: EQUAL
47473: IFTRUE 47477
47475: GO 47533
47477: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47478: LD_ADDR_VAR 0 9
47482: PUSH
47483: LD_VAR 0 47
47487: PUSH
47488: LD_VAR 0 48
47492: PUSH
47493: LD_VAR 0 49
47497: PUSH
47498: LD_VAR 0 50
47502: PUSH
47503: LD_VAR 0 51
47507: PUSH
47508: LD_VAR 0 52
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: PUSH
47521: LD_VAR 0 4
47525: PUSH
47526: LD_INT 1
47528: PLUS
47529: ARRAY
47530: ST_TO_ADDR
47531: GO 47722
47533: LD_INT 4
47535: DOUBLE
47536: EQUAL
47537: IFTRUE 47559
47539: LD_INT 5
47541: DOUBLE
47542: EQUAL
47543: IFTRUE 47559
47545: LD_INT 34
47547: DOUBLE
47548: EQUAL
47549: IFTRUE 47559
47551: LD_INT 37
47553: DOUBLE
47554: EQUAL
47555: IFTRUE 47559
47557: GO 47615
47559: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47560: LD_ADDR_VAR 0 9
47564: PUSH
47565: LD_VAR 0 53
47569: PUSH
47570: LD_VAR 0 54
47574: PUSH
47575: LD_VAR 0 55
47579: PUSH
47580: LD_VAR 0 56
47584: PUSH
47585: LD_VAR 0 57
47589: PUSH
47590: LD_VAR 0 58
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: PUSH
47603: LD_VAR 0 4
47607: PUSH
47608: LD_INT 1
47610: PLUS
47611: ARRAY
47612: ST_TO_ADDR
47613: GO 47722
47615: LD_INT 31
47617: DOUBLE
47618: EQUAL
47619: IFTRUE 47665
47621: LD_INT 32
47623: DOUBLE
47624: EQUAL
47625: IFTRUE 47665
47627: LD_INT 33
47629: DOUBLE
47630: EQUAL
47631: IFTRUE 47665
47633: LD_INT 27
47635: DOUBLE
47636: EQUAL
47637: IFTRUE 47665
47639: LD_INT 26
47641: DOUBLE
47642: EQUAL
47643: IFTRUE 47665
47645: LD_INT 28
47647: DOUBLE
47648: EQUAL
47649: IFTRUE 47665
47651: LD_INT 29
47653: DOUBLE
47654: EQUAL
47655: IFTRUE 47665
47657: LD_INT 30
47659: DOUBLE
47660: EQUAL
47661: IFTRUE 47665
47663: GO 47721
47665: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47666: LD_ADDR_VAR 0 9
47670: PUSH
47671: LD_VAR 0 59
47675: PUSH
47676: LD_VAR 0 60
47680: PUSH
47681: LD_VAR 0 61
47685: PUSH
47686: LD_VAR 0 62
47690: PUSH
47691: LD_VAR 0 63
47695: PUSH
47696: LD_VAR 0 64
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: PUSH
47709: LD_VAR 0 4
47713: PUSH
47714: LD_INT 1
47716: PLUS
47717: ARRAY
47718: ST_TO_ADDR
47719: GO 47722
47721: POP
// temp_list2 = [ ] ;
47722: LD_ADDR_VAR 0 10
47726: PUSH
47727: EMPTY
47728: ST_TO_ADDR
// for i in temp_list do
47729: LD_ADDR_VAR 0 8
47733: PUSH
47734: LD_VAR 0 9
47738: PUSH
47739: FOR_IN
47740: IFFALSE 47792
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47742: LD_ADDR_VAR 0 10
47746: PUSH
47747: LD_VAR 0 10
47751: PUSH
47752: LD_VAR 0 8
47756: PUSH
47757: LD_INT 1
47759: ARRAY
47760: PUSH
47761: LD_VAR 0 2
47765: PLUS
47766: PUSH
47767: LD_VAR 0 8
47771: PUSH
47772: LD_INT 2
47774: ARRAY
47775: PUSH
47776: LD_VAR 0 3
47780: PLUS
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: ADD
47789: ST_TO_ADDR
47790: GO 47739
47792: POP
47793: POP
// result = temp_list2 ;
47794: LD_ADDR_VAR 0 7
47798: PUSH
47799: LD_VAR 0 10
47803: ST_TO_ADDR
// end ;
47804: LD_VAR 0 7
47808: RET
// export function EnemyInRange ( unit , dist ) ; begin
47809: LD_INT 0
47811: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47812: LD_ADDR_VAR 0 3
47816: PUSH
47817: LD_VAR 0 1
47821: PPUSH
47822: CALL_OW 255
47826: PPUSH
47827: LD_VAR 0 1
47831: PPUSH
47832: CALL_OW 250
47836: PPUSH
47837: LD_VAR 0 1
47841: PPUSH
47842: CALL_OW 251
47846: PPUSH
47847: LD_VAR 0 2
47851: PPUSH
47852: CALL 21182 0 4
47856: PUSH
47857: LD_INT 4
47859: ARRAY
47860: ST_TO_ADDR
// end ;
47861: LD_VAR 0 3
47865: RET
// export function PlayerSeeMe ( unit ) ; begin
47866: LD_INT 0
47868: PPUSH
// result := See ( your_side , unit ) ;
47869: LD_ADDR_VAR 0 2
47873: PUSH
47874: LD_OWVAR 2
47878: PPUSH
47879: LD_VAR 0 1
47883: PPUSH
47884: CALL_OW 292
47888: ST_TO_ADDR
// end ;
47889: LD_VAR 0 2
47893: RET
// export function ReverseDir ( unit ) ; begin
47894: LD_INT 0
47896: PPUSH
// if not unit then
47897: LD_VAR 0 1
47901: NOT
47902: IFFALSE 47906
// exit ;
47904: GO 47929
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47906: LD_ADDR_VAR 0 2
47910: PUSH
47911: LD_VAR 0 1
47915: PPUSH
47916: CALL_OW 254
47920: PUSH
47921: LD_INT 3
47923: PLUS
47924: PUSH
47925: LD_INT 6
47927: MOD
47928: ST_TO_ADDR
// end ;
47929: LD_VAR 0 2
47933: RET
// export function ReverseArray ( array ) ; var i ; begin
47934: LD_INT 0
47936: PPUSH
47937: PPUSH
// if not array then
47938: LD_VAR 0 1
47942: NOT
47943: IFFALSE 47947
// exit ;
47945: GO 48002
// result := [ ] ;
47947: LD_ADDR_VAR 0 2
47951: PUSH
47952: EMPTY
47953: ST_TO_ADDR
// for i := array downto 1 do
47954: LD_ADDR_VAR 0 3
47958: PUSH
47959: DOUBLE
47960: LD_VAR 0 1
47964: INC
47965: ST_TO_ADDR
47966: LD_INT 1
47968: PUSH
47969: FOR_DOWNTO
47970: IFFALSE 48000
// result := Join ( result , array [ i ] ) ;
47972: LD_ADDR_VAR 0 2
47976: PUSH
47977: LD_VAR 0 2
47981: PPUSH
47982: LD_VAR 0 1
47986: PUSH
47987: LD_VAR 0 3
47991: ARRAY
47992: PPUSH
47993: CALL 52645 0 2
47997: ST_TO_ADDR
47998: GO 47969
48000: POP
48001: POP
// end ;
48002: LD_VAR 0 2
48006: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48007: LD_INT 0
48009: PPUSH
48010: PPUSH
48011: PPUSH
48012: PPUSH
48013: PPUSH
48014: PPUSH
// if not unit or not hexes then
48015: LD_VAR 0 1
48019: NOT
48020: PUSH
48021: LD_VAR 0 2
48025: NOT
48026: OR
48027: IFFALSE 48031
// exit ;
48029: GO 48154
// dist := 9999 ;
48031: LD_ADDR_VAR 0 5
48035: PUSH
48036: LD_INT 9999
48038: ST_TO_ADDR
// for i = 1 to hexes do
48039: LD_ADDR_VAR 0 4
48043: PUSH
48044: DOUBLE
48045: LD_INT 1
48047: DEC
48048: ST_TO_ADDR
48049: LD_VAR 0 2
48053: PUSH
48054: FOR_TO
48055: IFFALSE 48142
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48057: LD_ADDR_VAR 0 6
48061: PUSH
48062: LD_VAR 0 1
48066: PPUSH
48067: LD_VAR 0 2
48071: PUSH
48072: LD_VAR 0 4
48076: ARRAY
48077: PUSH
48078: LD_INT 1
48080: ARRAY
48081: PPUSH
48082: LD_VAR 0 2
48086: PUSH
48087: LD_VAR 0 4
48091: ARRAY
48092: PUSH
48093: LD_INT 2
48095: ARRAY
48096: PPUSH
48097: CALL_OW 297
48101: ST_TO_ADDR
// if tdist < dist then
48102: LD_VAR 0 6
48106: PUSH
48107: LD_VAR 0 5
48111: LESS
48112: IFFALSE 48140
// begin hex := hexes [ i ] ;
48114: LD_ADDR_VAR 0 8
48118: PUSH
48119: LD_VAR 0 2
48123: PUSH
48124: LD_VAR 0 4
48128: ARRAY
48129: ST_TO_ADDR
// dist := tdist ;
48130: LD_ADDR_VAR 0 5
48134: PUSH
48135: LD_VAR 0 6
48139: ST_TO_ADDR
// end ; end ;
48140: GO 48054
48142: POP
48143: POP
// result := hex ;
48144: LD_ADDR_VAR 0 3
48148: PUSH
48149: LD_VAR 0 8
48153: ST_TO_ADDR
// end ;
48154: LD_VAR 0 3
48158: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48159: LD_INT 0
48161: PPUSH
48162: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48163: LD_VAR 0 1
48167: NOT
48168: PUSH
48169: LD_VAR 0 1
48173: PUSH
48174: LD_INT 21
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 23
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PPUSH
48198: CALL_OW 69
48202: IN
48203: NOT
48204: OR
48205: IFFALSE 48209
// exit ;
48207: GO 48256
// for i = 1 to 3 do
48209: LD_ADDR_VAR 0 3
48213: PUSH
48214: DOUBLE
48215: LD_INT 1
48217: DEC
48218: ST_TO_ADDR
48219: LD_INT 3
48221: PUSH
48222: FOR_TO
48223: IFFALSE 48254
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48225: LD_VAR 0 1
48229: PPUSH
48230: CALL_OW 250
48234: PPUSH
48235: LD_VAR 0 1
48239: PPUSH
48240: CALL_OW 251
48244: PPUSH
48245: LD_INT 1
48247: PPUSH
48248: CALL_OW 453
48252: GO 48222
48254: POP
48255: POP
// end ;
48256: LD_VAR 0 2
48260: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48261: LD_INT 0
48263: PPUSH
48264: PPUSH
48265: PPUSH
48266: PPUSH
48267: PPUSH
48268: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48269: LD_VAR 0 1
48273: NOT
48274: PUSH
48275: LD_VAR 0 2
48279: NOT
48280: OR
48281: PUSH
48282: LD_VAR 0 1
48286: PPUSH
48287: CALL_OW 314
48291: OR
48292: IFFALSE 48296
// exit ;
48294: GO 48763
// if GetLives ( i ) < 250 then
48296: LD_VAR 0 4
48300: PPUSH
48301: CALL_OW 256
48305: PUSH
48306: LD_INT 250
48308: LESS
48309: IFFALSE 48322
// begin ComAutodestruct ( i ) ;
48311: LD_VAR 0 4
48315: PPUSH
48316: CALL 48159 0 1
// exit ;
48320: GO 48763
// end ; x := GetX ( enemy_unit ) ;
48322: LD_ADDR_VAR 0 7
48326: PUSH
48327: LD_VAR 0 2
48331: PPUSH
48332: CALL_OW 250
48336: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48337: LD_ADDR_VAR 0 8
48341: PUSH
48342: LD_VAR 0 2
48346: PPUSH
48347: CALL_OW 251
48351: ST_TO_ADDR
// if not x or not y then
48352: LD_VAR 0 7
48356: NOT
48357: PUSH
48358: LD_VAR 0 8
48362: NOT
48363: OR
48364: IFFALSE 48368
// exit ;
48366: GO 48763
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48368: LD_ADDR_VAR 0 6
48372: PUSH
48373: LD_VAR 0 7
48377: PPUSH
48378: LD_INT 0
48380: PPUSH
48381: LD_INT 4
48383: PPUSH
48384: CALL_OW 272
48388: PUSH
48389: LD_VAR 0 8
48393: PPUSH
48394: LD_INT 0
48396: PPUSH
48397: LD_INT 4
48399: PPUSH
48400: CALL_OW 273
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_VAR 0 7
48413: PPUSH
48414: LD_INT 1
48416: PPUSH
48417: LD_INT 4
48419: PPUSH
48420: CALL_OW 272
48424: PUSH
48425: LD_VAR 0 8
48429: PPUSH
48430: LD_INT 1
48432: PPUSH
48433: LD_INT 4
48435: PPUSH
48436: CALL_OW 273
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_VAR 0 7
48449: PPUSH
48450: LD_INT 2
48452: PPUSH
48453: LD_INT 4
48455: PPUSH
48456: CALL_OW 272
48460: PUSH
48461: LD_VAR 0 8
48465: PPUSH
48466: LD_INT 2
48468: PPUSH
48469: LD_INT 4
48471: PPUSH
48472: CALL_OW 273
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_VAR 0 7
48485: PPUSH
48486: LD_INT 3
48488: PPUSH
48489: LD_INT 4
48491: PPUSH
48492: CALL_OW 272
48496: PUSH
48497: LD_VAR 0 8
48501: PPUSH
48502: LD_INT 3
48504: PPUSH
48505: LD_INT 4
48507: PPUSH
48508: CALL_OW 273
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_VAR 0 7
48521: PPUSH
48522: LD_INT 4
48524: PPUSH
48525: LD_INT 4
48527: PPUSH
48528: CALL_OW 272
48532: PUSH
48533: LD_VAR 0 8
48537: PPUSH
48538: LD_INT 4
48540: PPUSH
48541: LD_INT 4
48543: PPUSH
48544: CALL_OW 273
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_VAR 0 7
48557: PPUSH
48558: LD_INT 5
48560: PPUSH
48561: LD_INT 4
48563: PPUSH
48564: CALL_OW 272
48568: PUSH
48569: LD_VAR 0 8
48573: PPUSH
48574: LD_INT 5
48576: PPUSH
48577: LD_INT 4
48579: PPUSH
48580: CALL_OW 273
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: ST_TO_ADDR
// for i = tmp downto 1 do
48597: LD_ADDR_VAR 0 4
48601: PUSH
48602: DOUBLE
48603: LD_VAR 0 6
48607: INC
48608: ST_TO_ADDR
48609: LD_INT 1
48611: PUSH
48612: FOR_DOWNTO
48613: IFFALSE 48714
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48615: LD_VAR 0 6
48619: PUSH
48620: LD_VAR 0 4
48624: ARRAY
48625: PUSH
48626: LD_INT 1
48628: ARRAY
48629: PPUSH
48630: LD_VAR 0 6
48634: PUSH
48635: LD_VAR 0 4
48639: ARRAY
48640: PUSH
48641: LD_INT 2
48643: ARRAY
48644: PPUSH
48645: CALL_OW 488
48649: NOT
48650: PUSH
48651: LD_VAR 0 6
48655: PUSH
48656: LD_VAR 0 4
48660: ARRAY
48661: PUSH
48662: LD_INT 1
48664: ARRAY
48665: PPUSH
48666: LD_VAR 0 6
48670: PUSH
48671: LD_VAR 0 4
48675: ARRAY
48676: PUSH
48677: LD_INT 2
48679: ARRAY
48680: PPUSH
48681: CALL_OW 428
48685: PUSH
48686: LD_INT 0
48688: NONEQUAL
48689: OR
48690: IFFALSE 48712
// tmp := Delete ( tmp , i ) ;
48692: LD_ADDR_VAR 0 6
48696: PUSH
48697: LD_VAR 0 6
48701: PPUSH
48702: LD_VAR 0 4
48706: PPUSH
48707: CALL_OW 3
48711: ST_TO_ADDR
48712: GO 48612
48714: POP
48715: POP
// j := GetClosestHex ( unit , tmp ) ;
48716: LD_ADDR_VAR 0 5
48720: PUSH
48721: LD_VAR 0 1
48725: PPUSH
48726: LD_VAR 0 6
48730: PPUSH
48731: CALL 48007 0 2
48735: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48736: LD_VAR 0 1
48740: PPUSH
48741: LD_VAR 0 5
48745: PUSH
48746: LD_INT 1
48748: ARRAY
48749: PPUSH
48750: LD_VAR 0 5
48754: PUSH
48755: LD_INT 2
48757: ARRAY
48758: PPUSH
48759: CALL_OW 111
// end ;
48763: LD_VAR 0 3
48767: RET
// export function PrepareApemanSoldier ( ) ; begin
48768: LD_INT 0
48770: PPUSH
// uc_nation := 0 ;
48771: LD_ADDR_OWVAR 21
48775: PUSH
48776: LD_INT 0
48778: ST_TO_ADDR
// hc_sex := sex_male ;
48779: LD_ADDR_OWVAR 27
48783: PUSH
48784: LD_INT 1
48786: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48787: LD_ADDR_OWVAR 28
48791: PUSH
48792: LD_INT 15
48794: ST_TO_ADDR
// hc_gallery :=  ;
48795: LD_ADDR_OWVAR 33
48799: PUSH
48800: LD_STRING 
48802: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48803: LD_ADDR_OWVAR 31
48807: PUSH
48808: LD_INT 0
48810: PPUSH
48811: LD_INT 3
48813: PPUSH
48814: CALL_OW 12
48818: PUSH
48819: LD_INT 0
48821: PPUSH
48822: LD_INT 3
48824: PPUSH
48825: CALL_OW 12
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: ST_TO_ADDR
// end ;
48842: LD_VAR 0 1
48846: RET
// export function PrepareApemanEngineer ( ) ; begin
48847: LD_INT 0
48849: PPUSH
// uc_nation := 0 ;
48850: LD_ADDR_OWVAR 21
48854: PUSH
48855: LD_INT 0
48857: ST_TO_ADDR
// hc_sex := sex_male ;
48858: LD_ADDR_OWVAR 27
48862: PUSH
48863: LD_INT 1
48865: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
48866: LD_ADDR_OWVAR 28
48870: PUSH
48871: LD_INT 16
48873: ST_TO_ADDR
// hc_gallery :=  ;
48874: LD_ADDR_OWVAR 33
48878: PUSH
48879: LD_STRING 
48881: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48882: LD_ADDR_OWVAR 31
48886: PUSH
48887: LD_INT 0
48889: PPUSH
48890: LD_INT 3
48892: PPUSH
48893: CALL_OW 12
48897: PUSH
48898: LD_INT 0
48900: PPUSH
48901: LD_INT 3
48903: PPUSH
48904: CALL_OW 12
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// end ;
48921: LD_VAR 0 1
48925: RET
// export function PrepareApeman ( agressivity ) ; begin
48926: LD_INT 0
48928: PPUSH
// uc_side := 0 ;
48929: LD_ADDR_OWVAR 20
48933: PUSH
48934: LD_INT 0
48936: ST_TO_ADDR
// uc_nation := 0 ;
48937: LD_ADDR_OWVAR 21
48941: PUSH
48942: LD_INT 0
48944: ST_TO_ADDR
// hc_sex := sex_male ;
48945: LD_ADDR_OWVAR 27
48949: PUSH
48950: LD_INT 1
48952: ST_TO_ADDR
// hc_class := class_apeman ;
48953: LD_ADDR_OWVAR 28
48957: PUSH
48958: LD_INT 12
48960: ST_TO_ADDR
// hc_gallery :=  ;
48961: LD_ADDR_OWVAR 33
48965: PUSH
48966: LD_STRING 
48968: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48969: LD_ADDR_OWVAR 35
48973: PUSH
48974: LD_VAR 0 1
48978: NEG
48979: PPUSH
48980: LD_VAR 0 1
48984: PPUSH
48985: CALL_OW 12
48989: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48990: LD_ADDR_OWVAR 31
48994: PUSH
48995: LD_INT 0
48997: PPUSH
48998: LD_INT 3
49000: PPUSH
49001: CALL_OW 12
49005: PUSH
49006: LD_INT 0
49008: PPUSH
49009: LD_INT 3
49011: PPUSH
49012: CALL_OW 12
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: ST_TO_ADDR
// end ;
49029: LD_VAR 0 2
49033: RET
// export function PrepareTiger ( agressivity ) ; begin
49034: LD_INT 0
49036: PPUSH
// uc_side := 0 ;
49037: LD_ADDR_OWVAR 20
49041: PUSH
49042: LD_INT 0
49044: ST_TO_ADDR
// uc_nation := 0 ;
49045: LD_ADDR_OWVAR 21
49049: PUSH
49050: LD_INT 0
49052: ST_TO_ADDR
// hc_class := class_tiger ;
49053: LD_ADDR_OWVAR 28
49057: PUSH
49058: LD_INT 14
49060: ST_TO_ADDR
// hc_gallery :=  ;
49061: LD_ADDR_OWVAR 33
49065: PUSH
49066: LD_STRING 
49068: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49069: LD_ADDR_OWVAR 35
49073: PUSH
49074: LD_VAR 0 1
49078: NEG
49079: PPUSH
49080: LD_VAR 0 1
49084: PPUSH
49085: CALL_OW 12
49089: ST_TO_ADDR
// end ;
49090: LD_VAR 0 2
49094: RET
// export function PrepareEnchidna ( ) ; begin
49095: LD_INT 0
49097: PPUSH
// uc_side := 0 ;
49098: LD_ADDR_OWVAR 20
49102: PUSH
49103: LD_INT 0
49105: ST_TO_ADDR
// uc_nation := 0 ;
49106: LD_ADDR_OWVAR 21
49110: PUSH
49111: LD_INT 0
49113: ST_TO_ADDR
// hc_class := class_baggie ;
49114: LD_ADDR_OWVAR 28
49118: PUSH
49119: LD_INT 13
49121: ST_TO_ADDR
// hc_gallery :=  ;
49122: LD_ADDR_OWVAR 33
49126: PUSH
49127: LD_STRING 
49129: ST_TO_ADDR
// end ;
49130: LD_VAR 0 1
49134: RET
// export function PrepareFrog ( ) ; begin
49135: LD_INT 0
49137: PPUSH
// uc_side := 0 ;
49138: LD_ADDR_OWVAR 20
49142: PUSH
49143: LD_INT 0
49145: ST_TO_ADDR
// uc_nation := 0 ;
49146: LD_ADDR_OWVAR 21
49150: PUSH
49151: LD_INT 0
49153: ST_TO_ADDR
// hc_class := class_frog ;
49154: LD_ADDR_OWVAR 28
49158: PUSH
49159: LD_INT 19
49161: ST_TO_ADDR
// hc_gallery :=  ;
49162: LD_ADDR_OWVAR 33
49166: PUSH
49167: LD_STRING 
49169: ST_TO_ADDR
// end ;
49170: LD_VAR 0 1
49174: RET
// export function PrepareFish ( ) ; begin
49175: LD_INT 0
49177: PPUSH
// uc_side := 0 ;
49178: LD_ADDR_OWVAR 20
49182: PUSH
49183: LD_INT 0
49185: ST_TO_ADDR
// uc_nation := 0 ;
49186: LD_ADDR_OWVAR 21
49190: PUSH
49191: LD_INT 0
49193: ST_TO_ADDR
// hc_class := class_fish ;
49194: LD_ADDR_OWVAR 28
49198: PUSH
49199: LD_INT 20
49201: ST_TO_ADDR
// hc_gallery :=  ;
49202: LD_ADDR_OWVAR 33
49206: PUSH
49207: LD_STRING 
49209: ST_TO_ADDR
// end ;
49210: LD_VAR 0 1
49214: RET
// export function PrepareBird ( ) ; begin
49215: LD_INT 0
49217: PPUSH
// uc_side := 0 ;
49218: LD_ADDR_OWVAR 20
49222: PUSH
49223: LD_INT 0
49225: ST_TO_ADDR
// uc_nation := 0 ;
49226: LD_ADDR_OWVAR 21
49230: PUSH
49231: LD_INT 0
49233: ST_TO_ADDR
// hc_class := class_phororhacos ;
49234: LD_ADDR_OWVAR 28
49238: PUSH
49239: LD_INT 18
49241: ST_TO_ADDR
// hc_gallery :=  ;
49242: LD_ADDR_OWVAR 33
49246: PUSH
49247: LD_STRING 
49249: ST_TO_ADDR
// end ;
49250: LD_VAR 0 1
49254: RET
// export function PrepareHorse ( ) ; begin
49255: LD_INT 0
49257: PPUSH
// uc_side := 0 ;
49258: LD_ADDR_OWVAR 20
49262: PUSH
49263: LD_INT 0
49265: ST_TO_ADDR
// uc_nation := 0 ;
49266: LD_ADDR_OWVAR 21
49270: PUSH
49271: LD_INT 0
49273: ST_TO_ADDR
// hc_class := class_horse ;
49274: LD_ADDR_OWVAR 28
49278: PUSH
49279: LD_INT 21
49281: ST_TO_ADDR
// hc_gallery :=  ;
49282: LD_ADDR_OWVAR 33
49286: PUSH
49287: LD_STRING 
49289: ST_TO_ADDR
// end ;
49290: LD_VAR 0 1
49294: RET
// export function PrepareMastodont ( ) ; begin
49295: LD_INT 0
49297: PPUSH
// uc_side := 0 ;
49298: LD_ADDR_OWVAR 20
49302: PUSH
49303: LD_INT 0
49305: ST_TO_ADDR
// uc_nation := 0 ;
49306: LD_ADDR_OWVAR 21
49310: PUSH
49311: LD_INT 0
49313: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49314: LD_ADDR_OWVAR 37
49318: PUSH
49319: LD_INT 31
49321: ST_TO_ADDR
// vc_control := control_rider ;
49322: LD_ADDR_OWVAR 38
49326: PUSH
49327: LD_INT 4
49329: ST_TO_ADDR
// end ;
49330: LD_VAR 0 1
49334: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49335: LD_INT 0
49337: PPUSH
49338: PPUSH
49339: PPUSH
// uc_side = 0 ;
49340: LD_ADDR_OWVAR 20
49344: PUSH
49345: LD_INT 0
49347: ST_TO_ADDR
// uc_nation = 0 ;
49348: LD_ADDR_OWVAR 21
49352: PUSH
49353: LD_INT 0
49355: ST_TO_ADDR
// InitHc_All ( ) ;
49356: CALL_OW 584
// InitVc ;
49360: CALL_OW 20
// if mastodonts then
49364: LD_VAR 0 6
49368: IFFALSE 49435
// for i = 1 to mastodonts do
49370: LD_ADDR_VAR 0 11
49374: PUSH
49375: DOUBLE
49376: LD_INT 1
49378: DEC
49379: ST_TO_ADDR
49380: LD_VAR 0 6
49384: PUSH
49385: FOR_TO
49386: IFFALSE 49433
// begin vc_chassis := 31 ;
49388: LD_ADDR_OWVAR 37
49392: PUSH
49393: LD_INT 31
49395: ST_TO_ADDR
// vc_control := control_rider ;
49396: LD_ADDR_OWVAR 38
49400: PUSH
49401: LD_INT 4
49403: ST_TO_ADDR
// animal := CreateVehicle ;
49404: LD_ADDR_VAR 0 12
49408: PUSH
49409: CALL_OW 45
49413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49414: LD_VAR 0 12
49418: PPUSH
49419: LD_VAR 0 8
49423: PPUSH
49424: LD_INT 0
49426: PPUSH
49427: CALL 51563 0 3
// end ;
49431: GO 49385
49433: POP
49434: POP
// if horses then
49435: LD_VAR 0 5
49439: IFFALSE 49506
// for i = 1 to horses do
49441: LD_ADDR_VAR 0 11
49445: PUSH
49446: DOUBLE
49447: LD_INT 1
49449: DEC
49450: ST_TO_ADDR
49451: LD_VAR 0 5
49455: PUSH
49456: FOR_TO
49457: IFFALSE 49504
// begin hc_class := 21 ;
49459: LD_ADDR_OWVAR 28
49463: PUSH
49464: LD_INT 21
49466: ST_TO_ADDR
// hc_gallery :=  ;
49467: LD_ADDR_OWVAR 33
49471: PUSH
49472: LD_STRING 
49474: ST_TO_ADDR
// animal := CreateHuman ;
49475: LD_ADDR_VAR 0 12
49479: PUSH
49480: CALL_OW 44
49484: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49485: LD_VAR 0 12
49489: PPUSH
49490: LD_VAR 0 8
49494: PPUSH
49495: LD_INT 0
49497: PPUSH
49498: CALL 51563 0 3
// end ;
49502: GO 49456
49504: POP
49505: POP
// if birds then
49506: LD_VAR 0 1
49510: IFFALSE 49577
// for i = 1 to birds do
49512: LD_ADDR_VAR 0 11
49516: PUSH
49517: DOUBLE
49518: LD_INT 1
49520: DEC
49521: ST_TO_ADDR
49522: LD_VAR 0 1
49526: PUSH
49527: FOR_TO
49528: IFFALSE 49575
// begin hc_class := 18 ;
49530: LD_ADDR_OWVAR 28
49534: PUSH
49535: LD_INT 18
49537: ST_TO_ADDR
// hc_gallery =  ;
49538: LD_ADDR_OWVAR 33
49542: PUSH
49543: LD_STRING 
49545: ST_TO_ADDR
// animal := CreateHuman ;
49546: LD_ADDR_VAR 0 12
49550: PUSH
49551: CALL_OW 44
49555: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49556: LD_VAR 0 12
49560: PPUSH
49561: LD_VAR 0 8
49565: PPUSH
49566: LD_INT 0
49568: PPUSH
49569: CALL 51563 0 3
// end ;
49573: GO 49527
49575: POP
49576: POP
// if tigers then
49577: LD_VAR 0 2
49581: IFFALSE 49665
// for i = 1 to tigers do
49583: LD_ADDR_VAR 0 11
49587: PUSH
49588: DOUBLE
49589: LD_INT 1
49591: DEC
49592: ST_TO_ADDR
49593: LD_VAR 0 2
49597: PUSH
49598: FOR_TO
49599: IFFALSE 49663
// begin hc_class = class_tiger ;
49601: LD_ADDR_OWVAR 28
49605: PUSH
49606: LD_INT 14
49608: ST_TO_ADDR
// hc_gallery =  ;
49609: LD_ADDR_OWVAR 33
49613: PUSH
49614: LD_STRING 
49616: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49617: LD_ADDR_OWVAR 35
49621: PUSH
49622: LD_INT 7
49624: NEG
49625: PPUSH
49626: LD_INT 7
49628: PPUSH
49629: CALL_OW 12
49633: ST_TO_ADDR
// animal := CreateHuman ;
49634: LD_ADDR_VAR 0 12
49638: PUSH
49639: CALL_OW 44
49643: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49644: LD_VAR 0 12
49648: PPUSH
49649: LD_VAR 0 8
49653: PPUSH
49654: LD_INT 0
49656: PPUSH
49657: CALL 51563 0 3
// end ;
49661: GO 49598
49663: POP
49664: POP
// if apemans then
49665: LD_VAR 0 3
49669: IFFALSE 49792
// for i = 1 to apemans do
49671: LD_ADDR_VAR 0 11
49675: PUSH
49676: DOUBLE
49677: LD_INT 1
49679: DEC
49680: ST_TO_ADDR
49681: LD_VAR 0 3
49685: PUSH
49686: FOR_TO
49687: IFFALSE 49790
// begin hc_class = class_apeman ;
49689: LD_ADDR_OWVAR 28
49693: PUSH
49694: LD_INT 12
49696: ST_TO_ADDR
// hc_gallery =  ;
49697: LD_ADDR_OWVAR 33
49701: PUSH
49702: LD_STRING 
49704: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49705: LD_ADDR_OWVAR 35
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PPUSH
49714: LD_INT 2
49716: PPUSH
49717: CALL_OW 12
49721: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49722: LD_ADDR_OWVAR 31
49726: PUSH
49727: LD_INT 1
49729: PPUSH
49730: LD_INT 3
49732: PPUSH
49733: CALL_OW 12
49737: PUSH
49738: LD_INT 1
49740: PPUSH
49741: LD_INT 3
49743: PPUSH
49744: CALL_OW 12
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: ST_TO_ADDR
// animal := CreateHuman ;
49761: LD_ADDR_VAR 0 12
49765: PUSH
49766: CALL_OW 44
49770: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49771: LD_VAR 0 12
49775: PPUSH
49776: LD_VAR 0 8
49780: PPUSH
49781: LD_INT 0
49783: PPUSH
49784: CALL 51563 0 3
// end ;
49788: GO 49686
49790: POP
49791: POP
// if enchidnas then
49792: LD_VAR 0 4
49796: IFFALSE 49863
// for i = 1 to enchidnas do
49798: LD_ADDR_VAR 0 11
49802: PUSH
49803: DOUBLE
49804: LD_INT 1
49806: DEC
49807: ST_TO_ADDR
49808: LD_VAR 0 4
49812: PUSH
49813: FOR_TO
49814: IFFALSE 49861
// begin hc_class = 13 ;
49816: LD_ADDR_OWVAR 28
49820: PUSH
49821: LD_INT 13
49823: ST_TO_ADDR
// hc_gallery =  ;
49824: LD_ADDR_OWVAR 33
49828: PUSH
49829: LD_STRING 
49831: ST_TO_ADDR
// animal := CreateHuman ;
49832: LD_ADDR_VAR 0 12
49836: PUSH
49837: CALL_OW 44
49841: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49842: LD_VAR 0 12
49846: PPUSH
49847: LD_VAR 0 8
49851: PPUSH
49852: LD_INT 0
49854: PPUSH
49855: CALL 51563 0 3
// end ;
49859: GO 49813
49861: POP
49862: POP
// if fishes then
49863: LD_VAR 0 7
49867: IFFALSE 49934
// for i = 1 to fishes do
49869: LD_ADDR_VAR 0 11
49873: PUSH
49874: DOUBLE
49875: LD_INT 1
49877: DEC
49878: ST_TO_ADDR
49879: LD_VAR 0 7
49883: PUSH
49884: FOR_TO
49885: IFFALSE 49932
// begin hc_class = 20 ;
49887: LD_ADDR_OWVAR 28
49891: PUSH
49892: LD_INT 20
49894: ST_TO_ADDR
// hc_gallery =  ;
49895: LD_ADDR_OWVAR 33
49899: PUSH
49900: LD_STRING 
49902: ST_TO_ADDR
// animal := CreateHuman ;
49903: LD_ADDR_VAR 0 12
49907: PUSH
49908: CALL_OW 44
49912: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49913: LD_VAR 0 12
49917: PPUSH
49918: LD_VAR 0 9
49922: PPUSH
49923: LD_INT 0
49925: PPUSH
49926: CALL 51563 0 3
// end ;
49930: GO 49884
49932: POP
49933: POP
// end ;
49934: LD_VAR 0 10
49938: RET
// export function WantHeal ( sci , unit ) ; begin
49939: LD_INT 0
49941: PPUSH
// if GetTaskList ( sci ) > 0 then
49942: LD_VAR 0 1
49946: PPUSH
49947: CALL_OW 437
49951: PUSH
49952: LD_INT 0
49954: GREATER
49955: IFFALSE 50025
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49957: LD_VAR 0 1
49961: PPUSH
49962: CALL_OW 437
49966: PUSH
49967: LD_INT 1
49969: ARRAY
49970: PUSH
49971: LD_INT 1
49973: ARRAY
49974: PUSH
49975: LD_STRING l
49977: EQUAL
49978: PUSH
49979: LD_VAR 0 1
49983: PPUSH
49984: CALL_OW 437
49988: PUSH
49989: LD_INT 1
49991: ARRAY
49992: PUSH
49993: LD_INT 4
49995: ARRAY
49996: PUSH
49997: LD_VAR 0 2
50001: EQUAL
50002: AND
50003: IFFALSE 50015
// result := true else
50005: LD_ADDR_VAR 0 3
50009: PUSH
50010: LD_INT 1
50012: ST_TO_ADDR
50013: GO 50023
// result := false ;
50015: LD_ADDR_VAR 0 3
50019: PUSH
50020: LD_INT 0
50022: ST_TO_ADDR
// end else
50023: GO 50033
// result := false ;
50025: LD_ADDR_VAR 0 3
50029: PUSH
50030: LD_INT 0
50032: ST_TO_ADDR
// end ;
50033: LD_VAR 0 3
50037: RET
// export function HealTarget ( sci ) ; begin
50038: LD_INT 0
50040: PPUSH
// if not sci then
50041: LD_VAR 0 1
50045: NOT
50046: IFFALSE 50050
// exit ;
50048: GO 50115
// result := 0 ;
50050: LD_ADDR_VAR 0 2
50054: PUSH
50055: LD_INT 0
50057: ST_TO_ADDR
// if GetTaskList ( sci ) then
50058: LD_VAR 0 1
50062: PPUSH
50063: CALL_OW 437
50067: IFFALSE 50115
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50069: LD_VAR 0 1
50073: PPUSH
50074: CALL_OW 437
50078: PUSH
50079: LD_INT 1
50081: ARRAY
50082: PUSH
50083: LD_INT 1
50085: ARRAY
50086: PUSH
50087: LD_STRING l
50089: EQUAL
50090: IFFALSE 50115
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50092: LD_ADDR_VAR 0 2
50096: PUSH
50097: LD_VAR 0 1
50101: PPUSH
50102: CALL_OW 437
50106: PUSH
50107: LD_INT 1
50109: ARRAY
50110: PUSH
50111: LD_INT 4
50113: ARRAY
50114: ST_TO_ADDR
// end ;
50115: LD_VAR 0 2
50119: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50120: LD_INT 0
50122: PPUSH
50123: PPUSH
50124: PPUSH
50125: PPUSH
// if not base_units then
50126: LD_VAR 0 1
50130: NOT
50131: IFFALSE 50135
// exit ;
50133: GO 50222
// result := false ;
50135: LD_ADDR_VAR 0 2
50139: PUSH
50140: LD_INT 0
50142: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50143: LD_ADDR_VAR 0 5
50147: PUSH
50148: LD_VAR 0 1
50152: PPUSH
50153: LD_INT 21
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PPUSH
50163: CALL_OW 72
50167: ST_TO_ADDR
// if not tmp then
50168: LD_VAR 0 5
50172: NOT
50173: IFFALSE 50177
// exit ;
50175: GO 50222
// for i in tmp do
50177: LD_ADDR_VAR 0 3
50181: PUSH
50182: LD_VAR 0 5
50186: PUSH
50187: FOR_IN
50188: IFFALSE 50220
// begin result := EnemyInRange ( i , 22 ) ;
50190: LD_ADDR_VAR 0 2
50194: PUSH
50195: LD_VAR 0 3
50199: PPUSH
50200: LD_INT 22
50202: PPUSH
50203: CALL 47809 0 2
50207: ST_TO_ADDR
// if result then
50208: LD_VAR 0 2
50212: IFFALSE 50218
// exit ;
50214: POP
50215: POP
50216: GO 50222
// end ;
50218: GO 50187
50220: POP
50221: POP
// end ;
50222: LD_VAR 0 2
50226: RET
// export function FilterByTag ( units , tag ) ; begin
50227: LD_INT 0
50229: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50230: LD_ADDR_VAR 0 3
50234: PUSH
50235: LD_VAR 0 1
50239: PPUSH
50240: LD_INT 120
50242: PUSH
50243: LD_VAR 0 2
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PPUSH
50252: CALL_OW 72
50256: ST_TO_ADDR
// end ;
50257: LD_VAR 0 3
50261: RET
// export function IsDriver ( un ) ; begin
50262: LD_INT 0
50264: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50265: LD_ADDR_VAR 0 2
50269: PUSH
50270: LD_VAR 0 1
50274: PUSH
50275: LD_INT 55
50277: PUSH
50278: EMPTY
50279: LIST
50280: PPUSH
50281: CALL_OW 69
50285: IN
50286: ST_TO_ADDR
// end ;
50287: LD_VAR 0 2
50291: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50292: LD_INT 0
50294: PPUSH
50295: PPUSH
// list := [ ] ;
50296: LD_ADDR_VAR 0 5
50300: PUSH
50301: EMPTY
50302: ST_TO_ADDR
// case d of 0 :
50303: LD_VAR 0 3
50307: PUSH
50308: LD_INT 0
50310: DOUBLE
50311: EQUAL
50312: IFTRUE 50316
50314: GO 50449
50316: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50317: LD_ADDR_VAR 0 5
50321: PUSH
50322: LD_VAR 0 1
50326: PUSH
50327: LD_INT 4
50329: MINUS
50330: PUSH
50331: LD_VAR 0 2
50335: PUSH
50336: LD_INT 4
50338: MINUS
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: LIST
50347: PUSH
50348: LD_VAR 0 1
50352: PUSH
50353: LD_INT 3
50355: MINUS
50356: PUSH
50357: LD_VAR 0 2
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: LIST
50369: PUSH
50370: LD_VAR 0 1
50374: PUSH
50375: LD_INT 4
50377: PLUS
50378: PUSH
50379: LD_VAR 0 2
50383: PUSH
50384: LD_INT 4
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: LIST
50391: PUSH
50392: LD_VAR 0 1
50396: PUSH
50397: LD_INT 3
50399: PLUS
50400: PUSH
50401: LD_VAR 0 2
50405: PUSH
50406: LD_INT 3
50408: PLUS
50409: PUSH
50410: LD_INT 5
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: PUSH
50418: LD_VAR 0 1
50422: PUSH
50423: LD_VAR 0 2
50427: PUSH
50428: LD_INT 4
50430: PLUS
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: ST_TO_ADDR
// end ; 1 :
50447: GO 51147
50449: LD_INT 1
50451: DOUBLE
50452: EQUAL
50453: IFTRUE 50457
50455: GO 50590
50457: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50458: LD_ADDR_VAR 0 5
50462: PUSH
50463: LD_VAR 0 1
50467: PUSH
50468: LD_VAR 0 2
50472: PUSH
50473: LD_INT 4
50475: MINUS
50476: PUSH
50477: LD_INT 3
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: LIST
50484: PUSH
50485: LD_VAR 0 1
50489: PUSH
50490: LD_INT 3
50492: MINUS
50493: PUSH
50494: LD_VAR 0 2
50498: PUSH
50499: LD_INT 3
50501: MINUS
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: LIST
50510: PUSH
50511: LD_VAR 0 1
50515: PUSH
50516: LD_INT 4
50518: MINUS
50519: PUSH
50520: LD_VAR 0 2
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: LIST
50532: PUSH
50533: LD_VAR 0 1
50537: PUSH
50538: LD_VAR 0 2
50542: PUSH
50543: LD_INT 3
50545: PLUS
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: LIST
50554: PUSH
50555: LD_VAR 0 1
50559: PUSH
50560: LD_INT 4
50562: PLUS
50563: PUSH
50564: LD_VAR 0 2
50568: PUSH
50569: LD_INT 4
50571: PLUS
50572: PUSH
50573: LD_INT 5
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// end ; 2 :
50588: GO 51147
50590: LD_INT 2
50592: DOUBLE
50593: EQUAL
50594: IFTRUE 50598
50596: GO 50727
50598: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50599: LD_ADDR_VAR 0 5
50603: PUSH
50604: LD_VAR 0 1
50608: PUSH
50609: LD_VAR 0 2
50613: PUSH
50614: LD_INT 3
50616: MINUS
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: PUSH
50626: LD_VAR 0 1
50630: PUSH
50631: LD_INT 4
50633: PLUS
50634: PUSH
50635: LD_VAR 0 2
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: LIST
50647: PUSH
50648: LD_VAR 0 1
50652: PUSH
50653: LD_VAR 0 2
50657: PUSH
50658: LD_INT 4
50660: PLUS
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: LIST
50669: PUSH
50670: LD_VAR 0 1
50674: PUSH
50675: LD_INT 3
50677: MINUS
50678: PUSH
50679: LD_VAR 0 2
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: LIST
50691: PUSH
50692: LD_VAR 0 1
50696: PUSH
50697: LD_INT 4
50699: MINUS
50700: PUSH
50701: LD_VAR 0 2
50705: PUSH
50706: LD_INT 4
50708: MINUS
50709: PUSH
50710: LD_INT 2
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: LIST
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: ST_TO_ADDR
// end ; 3 :
50725: GO 51147
50727: LD_INT 3
50729: DOUBLE
50730: EQUAL
50731: IFTRUE 50735
50733: GO 50868
50735: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50736: LD_ADDR_VAR 0 5
50740: PUSH
50741: LD_VAR 0 1
50745: PUSH
50746: LD_INT 3
50748: PLUS
50749: PUSH
50750: LD_VAR 0 2
50754: PUSH
50755: LD_INT 4
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: LIST
50762: PUSH
50763: LD_VAR 0 1
50767: PUSH
50768: LD_INT 4
50770: PLUS
50771: PUSH
50772: LD_VAR 0 2
50776: PUSH
50777: LD_INT 4
50779: PLUS
50780: PUSH
50781: LD_INT 5
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: PUSH
50789: LD_VAR 0 1
50793: PUSH
50794: LD_INT 4
50796: MINUS
50797: PUSH
50798: LD_VAR 0 2
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: LIST
50810: PUSH
50811: LD_VAR 0 1
50815: PUSH
50816: LD_VAR 0 2
50820: PUSH
50821: LD_INT 4
50823: MINUS
50824: PUSH
50825: LD_INT 3
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: PUSH
50833: LD_VAR 0 1
50837: PUSH
50838: LD_INT 3
50840: MINUS
50841: PUSH
50842: LD_VAR 0 2
50846: PUSH
50847: LD_INT 3
50849: MINUS
50850: PUSH
50851: LD_INT 2
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: LIST
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: ST_TO_ADDR
// end ; 4 :
50866: GO 51147
50868: LD_INT 4
50870: DOUBLE
50871: EQUAL
50872: IFTRUE 50876
50874: GO 51009
50876: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50877: LD_ADDR_VAR 0 5
50881: PUSH
50882: LD_VAR 0 1
50886: PUSH
50887: LD_VAR 0 2
50891: PUSH
50892: LD_INT 4
50894: PLUS
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: PUSH
50904: LD_VAR 0 1
50908: PUSH
50909: LD_INT 3
50911: PLUS
50912: PUSH
50913: LD_VAR 0 2
50917: PUSH
50918: LD_INT 3
50920: PLUS
50921: PUSH
50922: LD_INT 5
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: LIST
50929: PUSH
50930: LD_VAR 0 1
50934: PUSH
50935: LD_INT 4
50937: PLUS
50938: PUSH
50939: LD_VAR 0 2
50943: PUSH
50944: LD_INT 4
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: LIST
50951: PUSH
50952: LD_VAR 0 1
50956: PUSH
50957: LD_VAR 0 2
50961: PUSH
50962: LD_INT 3
50964: MINUS
50965: PUSH
50966: LD_INT 3
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: LIST
50973: PUSH
50974: LD_VAR 0 1
50978: PUSH
50979: LD_INT 4
50981: MINUS
50982: PUSH
50983: LD_VAR 0 2
50987: PUSH
50988: LD_INT 4
50990: MINUS
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: LIST
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: ST_TO_ADDR
// end ; 5 :
51007: GO 51147
51009: LD_INT 5
51011: DOUBLE
51012: EQUAL
51013: IFTRUE 51017
51015: GO 51146
51017: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51018: LD_ADDR_VAR 0 5
51022: PUSH
51023: LD_VAR 0 1
51027: PUSH
51028: LD_INT 4
51030: MINUS
51031: PUSH
51032: LD_VAR 0 2
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: LIST
51044: PUSH
51045: LD_VAR 0 1
51049: PUSH
51050: LD_VAR 0 2
51054: PUSH
51055: LD_INT 4
51057: MINUS
51058: PUSH
51059: LD_INT 3
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: LIST
51066: PUSH
51067: LD_VAR 0 1
51071: PUSH
51072: LD_INT 4
51074: PLUS
51075: PUSH
51076: LD_VAR 0 2
51080: PUSH
51081: LD_INT 4
51083: PLUS
51084: PUSH
51085: LD_INT 5
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: LIST
51092: PUSH
51093: LD_VAR 0 1
51097: PUSH
51098: LD_INT 3
51100: PLUS
51101: PUSH
51102: LD_VAR 0 2
51106: PUSH
51107: LD_INT 4
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: LIST
51114: PUSH
51115: LD_VAR 0 1
51119: PUSH
51120: LD_VAR 0 2
51124: PUSH
51125: LD_INT 3
51127: PLUS
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: LIST
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: ST_TO_ADDR
// end ; end ;
51144: GO 51147
51146: POP
// result := list ;
51147: LD_ADDR_VAR 0 4
51151: PUSH
51152: LD_VAR 0 5
51156: ST_TO_ADDR
// end ;
51157: LD_VAR 0 4
51161: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51162: LD_INT 0
51164: PPUSH
51165: PPUSH
51166: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51167: LD_VAR 0 1
51171: NOT
51172: PUSH
51173: LD_VAR 0 2
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: LD_INT 4
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: IN
51196: NOT
51197: OR
51198: IFFALSE 51202
// exit ;
51200: GO 51285
// tmp := [ ] ;
51202: LD_ADDR_VAR 0 5
51206: PUSH
51207: EMPTY
51208: ST_TO_ADDR
// for i in units do
51209: LD_ADDR_VAR 0 4
51213: PUSH
51214: LD_VAR 0 1
51218: PUSH
51219: FOR_IN
51220: IFFALSE 51254
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51222: LD_ADDR_VAR 0 5
51226: PUSH
51227: LD_VAR 0 5
51231: PPUSH
51232: LD_VAR 0 4
51236: PPUSH
51237: LD_VAR 0 2
51241: PPUSH
51242: CALL_OW 259
51246: PPUSH
51247: CALL 52645 0 2
51251: ST_TO_ADDR
51252: GO 51219
51254: POP
51255: POP
// if not tmp then
51256: LD_VAR 0 5
51260: NOT
51261: IFFALSE 51265
// exit ;
51263: GO 51285
// result := SortListByListDesc ( units , tmp ) ;
51265: LD_ADDR_VAR 0 3
51269: PUSH
51270: LD_VAR 0 1
51274: PPUSH
51275: LD_VAR 0 5
51279: PPUSH
51280: CALL_OW 77
51284: ST_TO_ADDR
// end ;
51285: LD_VAR 0 3
51289: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51290: LD_INT 0
51292: PPUSH
51293: PPUSH
51294: PPUSH
// result := false ;
51295: LD_ADDR_VAR 0 3
51299: PUSH
51300: LD_INT 0
51302: ST_TO_ADDR
// if not building then
51303: LD_VAR 0 2
51307: NOT
51308: IFFALSE 51312
// exit ;
51310: GO 51450
// x := GetX ( building ) ;
51312: LD_ADDR_VAR 0 4
51316: PUSH
51317: LD_VAR 0 2
51321: PPUSH
51322: CALL_OW 250
51326: ST_TO_ADDR
// y := GetY ( building ) ;
51327: LD_ADDR_VAR 0 5
51331: PUSH
51332: LD_VAR 0 2
51336: PPUSH
51337: CALL_OW 251
51341: ST_TO_ADDR
// if not x or not y then
51342: LD_VAR 0 4
51346: NOT
51347: PUSH
51348: LD_VAR 0 5
51352: NOT
51353: OR
51354: IFFALSE 51358
// exit ;
51356: GO 51450
// if GetTaskList ( unit ) then
51358: LD_VAR 0 1
51362: PPUSH
51363: CALL_OW 437
51367: IFFALSE 51450
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51369: LD_STRING e
51371: PUSH
51372: LD_VAR 0 1
51376: PPUSH
51377: CALL_OW 437
51381: PUSH
51382: LD_INT 1
51384: ARRAY
51385: PUSH
51386: LD_INT 1
51388: ARRAY
51389: EQUAL
51390: PUSH
51391: LD_VAR 0 4
51395: PUSH
51396: LD_VAR 0 1
51400: PPUSH
51401: CALL_OW 437
51405: PUSH
51406: LD_INT 1
51408: ARRAY
51409: PUSH
51410: LD_INT 2
51412: ARRAY
51413: EQUAL
51414: AND
51415: PUSH
51416: LD_VAR 0 5
51420: PUSH
51421: LD_VAR 0 1
51425: PPUSH
51426: CALL_OW 437
51430: PUSH
51431: LD_INT 1
51433: ARRAY
51434: PUSH
51435: LD_INT 3
51437: ARRAY
51438: EQUAL
51439: AND
51440: IFFALSE 51450
// result := true end ;
51442: LD_ADDR_VAR 0 3
51446: PUSH
51447: LD_INT 1
51449: ST_TO_ADDR
// end ;
51450: LD_VAR 0 3
51454: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51455: LD_INT 0
51457: PPUSH
// result := false ;
51458: LD_ADDR_VAR 0 4
51462: PUSH
51463: LD_INT 0
51465: ST_TO_ADDR
// if GetTaskList ( unit ) then
51466: LD_VAR 0 1
51470: PPUSH
51471: CALL_OW 437
51475: IFFALSE 51558
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51477: LD_STRING M
51479: PUSH
51480: LD_VAR 0 1
51484: PPUSH
51485: CALL_OW 437
51489: PUSH
51490: LD_INT 1
51492: ARRAY
51493: PUSH
51494: LD_INT 1
51496: ARRAY
51497: EQUAL
51498: PUSH
51499: LD_VAR 0 2
51503: PUSH
51504: LD_VAR 0 1
51508: PPUSH
51509: CALL_OW 437
51513: PUSH
51514: LD_INT 1
51516: ARRAY
51517: PUSH
51518: LD_INT 2
51520: ARRAY
51521: EQUAL
51522: AND
51523: PUSH
51524: LD_VAR 0 3
51528: PUSH
51529: LD_VAR 0 1
51533: PPUSH
51534: CALL_OW 437
51538: PUSH
51539: LD_INT 1
51541: ARRAY
51542: PUSH
51543: LD_INT 3
51545: ARRAY
51546: EQUAL
51547: AND
51548: IFFALSE 51558
// result := true ;
51550: LD_ADDR_VAR 0 4
51554: PUSH
51555: LD_INT 1
51557: ST_TO_ADDR
// end ; end ;
51558: LD_VAR 0 4
51562: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51563: LD_INT 0
51565: PPUSH
51566: PPUSH
51567: PPUSH
51568: PPUSH
// if not unit or not area then
51569: LD_VAR 0 1
51573: NOT
51574: PUSH
51575: LD_VAR 0 2
51579: NOT
51580: OR
51581: IFFALSE 51585
// exit ;
51583: GO 51748
// tmp := AreaToList ( area , i ) ;
51585: LD_ADDR_VAR 0 6
51589: PUSH
51590: LD_VAR 0 2
51594: PPUSH
51595: LD_VAR 0 5
51599: PPUSH
51600: CALL_OW 517
51604: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51605: LD_ADDR_VAR 0 5
51609: PUSH
51610: DOUBLE
51611: LD_INT 1
51613: DEC
51614: ST_TO_ADDR
51615: LD_VAR 0 6
51619: PUSH
51620: LD_INT 1
51622: ARRAY
51623: PUSH
51624: FOR_TO
51625: IFFALSE 51746
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51627: LD_ADDR_VAR 0 7
51631: PUSH
51632: LD_VAR 0 6
51636: PUSH
51637: LD_INT 1
51639: ARRAY
51640: PUSH
51641: LD_VAR 0 5
51645: ARRAY
51646: PUSH
51647: LD_VAR 0 6
51651: PUSH
51652: LD_INT 2
51654: ARRAY
51655: PUSH
51656: LD_VAR 0 5
51660: ARRAY
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
51666: LD_INT 92
51668: PUSH
51669: LD_VAR 0 7
51673: PUSH
51674: LD_INT 1
51676: ARRAY
51677: PUSH
51678: LD_VAR 0 7
51682: PUSH
51683: LD_INT 2
51685: ARRAY
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: PPUSH
51696: CALL_OW 69
51700: PUSH
51701: LD_INT 0
51703: EQUAL
51704: IFFALSE 51744
// begin PlaceUnitArea ( unit , area , mode ) ;
51706: LD_VAR 0 1
51710: PPUSH
51711: LD_VAR 0 2
51715: PPUSH
51716: LD_VAR 0 3
51720: PPUSH
51721: CALL_OW 49
// result := IsPlaced ( unit ) ;
51725: LD_ADDR_VAR 0 4
51729: PUSH
51730: LD_VAR 0 1
51734: PPUSH
51735: CALL_OW 305
51739: ST_TO_ADDR
// exit ;
51740: POP
51741: POP
51742: GO 51748
// end ; end ;
51744: GO 51624
51746: POP
51747: POP
// end ;
51748: LD_VAR 0 4
51752: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51753: LD_INT 0
51755: PPUSH
51756: PPUSH
51757: PPUSH
// if not side or side > 8 then
51758: LD_VAR 0 1
51762: NOT
51763: PUSH
51764: LD_VAR 0 1
51768: PUSH
51769: LD_INT 8
51771: GREATER
51772: OR
51773: IFFALSE 51777
// exit ;
51775: GO 51964
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51777: LD_ADDR_VAR 0 4
51781: PUSH
51782: LD_INT 22
51784: PUSH
51785: LD_VAR 0 1
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 21
51796: PUSH
51797: LD_INT 3
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PPUSH
51808: CALL_OW 69
51812: ST_TO_ADDR
// if not tmp then
51813: LD_VAR 0 4
51817: NOT
51818: IFFALSE 51822
// exit ;
51820: GO 51964
// enable_addtolog := true ;
51822: LD_ADDR_OWVAR 81
51826: PUSH
51827: LD_INT 1
51829: ST_TO_ADDR
// AddToLog ( [ ) ;
51830: LD_STRING [
51832: PPUSH
51833: CALL_OW 561
// for i in tmp do
51837: LD_ADDR_VAR 0 3
51841: PUSH
51842: LD_VAR 0 4
51846: PUSH
51847: FOR_IN
51848: IFFALSE 51955
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51850: LD_STRING [
51852: PUSH
51853: LD_VAR 0 3
51857: PPUSH
51858: CALL_OW 266
51862: STR
51863: PUSH
51864: LD_STRING , 
51866: STR
51867: PUSH
51868: LD_VAR 0 3
51872: PPUSH
51873: CALL_OW 250
51877: STR
51878: PUSH
51879: LD_STRING , 
51881: STR
51882: PUSH
51883: LD_VAR 0 3
51887: PPUSH
51888: CALL_OW 251
51892: STR
51893: PUSH
51894: LD_STRING , 
51896: STR
51897: PUSH
51898: LD_VAR 0 3
51902: PPUSH
51903: CALL_OW 254
51907: STR
51908: PUSH
51909: LD_STRING , 
51911: STR
51912: PUSH
51913: LD_VAR 0 3
51917: PPUSH
51918: LD_INT 1
51920: PPUSH
51921: CALL_OW 268
51925: STR
51926: PUSH
51927: LD_STRING , 
51929: STR
51930: PUSH
51931: LD_VAR 0 3
51935: PPUSH
51936: LD_INT 2
51938: PPUSH
51939: CALL_OW 268
51943: STR
51944: PUSH
51945: LD_STRING ],
51947: STR
51948: PPUSH
51949: CALL_OW 561
// end ;
51953: GO 51847
51955: POP
51956: POP
// AddToLog ( ]; ) ;
51957: LD_STRING ];
51959: PPUSH
51960: CALL_OW 561
// end ;
51964: LD_VAR 0 2
51968: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51969: LD_INT 0
51971: PPUSH
51972: PPUSH
51973: PPUSH
51974: PPUSH
51975: PPUSH
// if not area or not rate or not max then
51976: LD_VAR 0 1
51980: NOT
51981: PUSH
51982: LD_VAR 0 2
51986: NOT
51987: OR
51988: PUSH
51989: LD_VAR 0 4
51993: NOT
51994: OR
51995: IFFALSE 51999
// exit ;
51997: GO 52188
// while 1 do
51999: LD_INT 1
52001: IFFALSE 52188
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52003: LD_ADDR_VAR 0 9
52007: PUSH
52008: LD_VAR 0 1
52012: PPUSH
52013: LD_INT 1
52015: PPUSH
52016: CALL_OW 287
52020: PUSH
52021: LD_INT 10
52023: MUL
52024: ST_TO_ADDR
// r := rate / 10 ;
52025: LD_ADDR_VAR 0 7
52029: PUSH
52030: LD_VAR 0 2
52034: PUSH
52035: LD_INT 10
52037: DIVREAL
52038: ST_TO_ADDR
// time := 1 1$00 ;
52039: LD_ADDR_VAR 0 8
52043: PUSH
52044: LD_INT 2100
52046: ST_TO_ADDR
// if amount < min then
52047: LD_VAR 0 9
52051: PUSH
52052: LD_VAR 0 3
52056: LESS
52057: IFFALSE 52075
// r := r * 2 else
52059: LD_ADDR_VAR 0 7
52063: PUSH
52064: LD_VAR 0 7
52068: PUSH
52069: LD_INT 2
52071: MUL
52072: ST_TO_ADDR
52073: GO 52101
// if amount > max then
52075: LD_VAR 0 9
52079: PUSH
52080: LD_VAR 0 4
52084: GREATER
52085: IFFALSE 52101
// r := r / 2 ;
52087: LD_ADDR_VAR 0 7
52091: PUSH
52092: LD_VAR 0 7
52096: PUSH
52097: LD_INT 2
52099: DIVREAL
52100: ST_TO_ADDR
// time := time / r ;
52101: LD_ADDR_VAR 0 8
52105: PUSH
52106: LD_VAR 0 8
52110: PUSH
52111: LD_VAR 0 7
52115: DIVREAL
52116: ST_TO_ADDR
// if time < 0 then
52117: LD_VAR 0 8
52121: PUSH
52122: LD_INT 0
52124: LESS
52125: IFFALSE 52142
// time := time * - 1 ;
52127: LD_ADDR_VAR 0 8
52131: PUSH
52132: LD_VAR 0 8
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: MUL
52141: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52142: LD_VAR 0 8
52146: PUSH
52147: LD_INT 35
52149: PPUSH
52150: LD_INT 875
52152: PPUSH
52153: CALL_OW 12
52157: PLUS
52158: PPUSH
52159: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52163: LD_INT 1
52165: PPUSH
52166: LD_INT 5
52168: PPUSH
52169: CALL_OW 12
52173: PPUSH
52174: LD_VAR 0 1
52178: PPUSH
52179: LD_INT 1
52181: PPUSH
52182: CALL_OW 55
// end ;
52186: GO 51999
// end ;
52188: LD_VAR 0 5
52192: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52193: LD_INT 0
52195: PPUSH
52196: PPUSH
52197: PPUSH
52198: PPUSH
52199: PPUSH
52200: PPUSH
52201: PPUSH
52202: PPUSH
// if not turrets or not factories then
52203: LD_VAR 0 1
52207: NOT
52208: PUSH
52209: LD_VAR 0 2
52213: NOT
52214: OR
52215: IFFALSE 52219
// exit ;
52217: GO 52526
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52219: LD_ADDR_VAR 0 10
52223: PUSH
52224: LD_INT 5
52226: PUSH
52227: LD_INT 6
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: LD_INT 4
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 3
52246: PUSH
52247: LD_INT 5
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 24
52261: PUSH
52262: LD_INT 25
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 23
52271: PUSH
52272: LD_INT 27
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 42
52285: PUSH
52286: LD_INT 43
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 44
52295: PUSH
52296: LD_INT 46
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 45
52305: PUSH
52306: LD_INT 47
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: LIST
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: LIST
52322: ST_TO_ADDR
// result := [ ] ;
52323: LD_ADDR_VAR 0 3
52327: PUSH
52328: EMPTY
52329: ST_TO_ADDR
// for i in turrets do
52330: LD_ADDR_VAR 0 4
52334: PUSH
52335: LD_VAR 0 1
52339: PUSH
52340: FOR_IN
52341: IFFALSE 52524
// begin nat := GetNation ( i ) ;
52343: LD_ADDR_VAR 0 7
52347: PUSH
52348: LD_VAR 0 4
52352: PPUSH
52353: CALL_OW 248
52357: ST_TO_ADDR
// weapon := 0 ;
52358: LD_ADDR_VAR 0 8
52362: PUSH
52363: LD_INT 0
52365: ST_TO_ADDR
// if not nat then
52366: LD_VAR 0 7
52370: NOT
52371: IFFALSE 52375
// continue ;
52373: GO 52340
// for j in list [ nat ] do
52375: LD_ADDR_VAR 0 5
52379: PUSH
52380: LD_VAR 0 10
52384: PUSH
52385: LD_VAR 0 7
52389: ARRAY
52390: PUSH
52391: FOR_IN
52392: IFFALSE 52433
// if GetBWeapon ( i ) = j [ 1 ] then
52394: LD_VAR 0 4
52398: PPUSH
52399: CALL_OW 269
52403: PUSH
52404: LD_VAR 0 5
52408: PUSH
52409: LD_INT 1
52411: ARRAY
52412: EQUAL
52413: IFFALSE 52431
// begin weapon := j [ 2 ] ;
52415: LD_ADDR_VAR 0 8
52419: PUSH
52420: LD_VAR 0 5
52424: PUSH
52425: LD_INT 2
52427: ARRAY
52428: ST_TO_ADDR
// break ;
52429: GO 52433
// end ;
52431: GO 52391
52433: POP
52434: POP
// if not weapon then
52435: LD_VAR 0 8
52439: NOT
52440: IFFALSE 52444
// continue ;
52442: GO 52340
// for k in factories do
52444: LD_ADDR_VAR 0 6
52448: PUSH
52449: LD_VAR 0 2
52453: PUSH
52454: FOR_IN
52455: IFFALSE 52520
// begin weapons := AvailableWeaponList ( k ) ;
52457: LD_ADDR_VAR 0 9
52461: PUSH
52462: LD_VAR 0 6
52466: PPUSH
52467: CALL_OW 478
52471: ST_TO_ADDR
// if not weapons then
52472: LD_VAR 0 9
52476: NOT
52477: IFFALSE 52481
// continue ;
52479: GO 52454
// if weapon in weapons then
52481: LD_VAR 0 8
52485: PUSH
52486: LD_VAR 0 9
52490: IN
52491: IFFALSE 52518
// begin result := [ i , weapon ] ;
52493: LD_ADDR_VAR 0 3
52497: PUSH
52498: LD_VAR 0 4
52502: PUSH
52503: LD_VAR 0 8
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: ST_TO_ADDR
// exit ;
52512: POP
52513: POP
52514: POP
52515: POP
52516: GO 52526
// end ; end ;
52518: GO 52454
52520: POP
52521: POP
// end ;
52522: GO 52340
52524: POP
52525: POP
// end ;
52526: LD_VAR 0 3
52530: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52531: LD_INT 0
52533: PPUSH
// if not side or side > 8 then
52534: LD_VAR 0 3
52538: NOT
52539: PUSH
52540: LD_VAR 0 3
52544: PUSH
52545: LD_INT 8
52547: GREATER
52548: OR
52549: IFFALSE 52553
// exit ;
52551: GO 52612
// if not range then
52553: LD_VAR 0 4
52557: NOT
52558: IFFALSE 52569
// range := - 12 ;
52560: LD_ADDR_VAR 0 4
52564: PUSH
52565: LD_INT 12
52567: NEG
52568: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52569: LD_VAR 0 1
52573: PPUSH
52574: LD_VAR 0 2
52578: PPUSH
52579: LD_VAR 0 3
52583: PPUSH
52584: LD_VAR 0 4
52588: PPUSH
52589: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52593: LD_VAR 0 1
52597: PPUSH
52598: LD_VAR 0 2
52602: PPUSH
52603: LD_VAR 0 3
52607: PPUSH
52608: CALL_OW 331
// end ;
52612: LD_VAR 0 5
52616: RET
// export function Video ( mode ) ; begin
52617: LD_INT 0
52619: PPUSH
// ingame_video = mode ;
52620: LD_ADDR_OWVAR 52
52624: PUSH
52625: LD_VAR 0 1
52629: ST_TO_ADDR
// interface_hidden = mode ;
52630: LD_ADDR_OWVAR 54
52634: PUSH
52635: LD_VAR 0 1
52639: ST_TO_ADDR
// end ;
52640: LD_VAR 0 2
52644: RET
// export function Join ( array , element ) ; begin
52645: LD_INT 0
52647: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52648: LD_ADDR_VAR 0 3
52652: PUSH
52653: LD_VAR 0 1
52657: PPUSH
52658: LD_VAR 0 1
52662: PUSH
52663: LD_INT 1
52665: PLUS
52666: PPUSH
52667: LD_VAR 0 2
52671: PPUSH
52672: CALL_OW 1
52676: ST_TO_ADDR
// end ;
52677: LD_VAR 0 3
52681: RET
// export function JoinUnion ( array , element ) ; begin
52682: LD_INT 0
52684: PPUSH
// result := array union element ;
52685: LD_ADDR_VAR 0 3
52689: PUSH
52690: LD_VAR 0 1
52694: PUSH
52695: LD_VAR 0 2
52699: UNION
52700: ST_TO_ADDR
// end ;
52701: LD_VAR 0 3
52705: RET
// export function GetBehemoths ( side ) ; begin
52706: LD_INT 0
52708: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52709: LD_ADDR_VAR 0 2
52713: PUSH
52714: LD_INT 22
52716: PUSH
52717: LD_VAR 0 1
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 31
52728: PUSH
52729: LD_INT 25
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PPUSH
52740: CALL_OW 69
52744: ST_TO_ADDR
// end ;
52745: LD_VAR 0 2
52749: RET
// export function Shuffle ( array ) ; var i , index ; begin
52750: LD_INT 0
52752: PPUSH
52753: PPUSH
52754: PPUSH
// result := [ ] ;
52755: LD_ADDR_VAR 0 2
52759: PUSH
52760: EMPTY
52761: ST_TO_ADDR
// if not array then
52762: LD_VAR 0 1
52766: NOT
52767: IFFALSE 52771
// exit ;
52769: GO 52870
// Randomize ;
52771: CALL_OW 10
// for i = array downto 1 do
52775: LD_ADDR_VAR 0 3
52779: PUSH
52780: DOUBLE
52781: LD_VAR 0 1
52785: INC
52786: ST_TO_ADDR
52787: LD_INT 1
52789: PUSH
52790: FOR_DOWNTO
52791: IFFALSE 52868
// begin index := rand ( 1 , array ) ;
52793: LD_ADDR_VAR 0 4
52797: PUSH
52798: LD_INT 1
52800: PPUSH
52801: LD_VAR 0 1
52805: PPUSH
52806: CALL_OW 12
52810: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52811: LD_ADDR_VAR 0 2
52815: PUSH
52816: LD_VAR 0 2
52820: PPUSH
52821: LD_VAR 0 2
52825: PUSH
52826: LD_INT 1
52828: PLUS
52829: PPUSH
52830: LD_VAR 0 1
52834: PUSH
52835: LD_VAR 0 4
52839: ARRAY
52840: PPUSH
52841: CALL_OW 2
52845: ST_TO_ADDR
// array := Delete ( array , index ) ;
52846: LD_ADDR_VAR 0 1
52850: PUSH
52851: LD_VAR 0 1
52855: PPUSH
52856: LD_VAR 0 4
52860: PPUSH
52861: CALL_OW 3
52865: ST_TO_ADDR
// end ;
52866: GO 52790
52868: POP
52869: POP
// end ;
52870: LD_VAR 0 2
52874: RET
// export function GetBaseMaterials ( base ) ; begin
52875: LD_INT 0
52877: PPUSH
// result := [ 0 , 0 , 0 ] ;
52878: LD_ADDR_VAR 0 2
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: ST_TO_ADDR
// if not base then
52897: LD_VAR 0 1
52901: NOT
52902: IFFALSE 52906
// exit ;
52904: GO 52955
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52906: LD_ADDR_VAR 0 2
52910: PUSH
52911: LD_VAR 0 1
52915: PPUSH
52916: LD_INT 1
52918: PPUSH
52919: CALL_OW 275
52923: PUSH
52924: LD_VAR 0 1
52928: PPUSH
52929: LD_INT 2
52931: PPUSH
52932: CALL_OW 275
52936: PUSH
52937: LD_VAR 0 1
52941: PPUSH
52942: LD_INT 3
52944: PPUSH
52945: CALL_OW 275
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// end ;
52955: LD_VAR 0 2
52959: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52960: LD_INT 0
52962: PPUSH
52963: PPUSH
// result := array ;
52964: LD_ADDR_VAR 0 3
52968: PUSH
52969: LD_VAR 0 1
52973: ST_TO_ADDR
// if size >= result then
52974: LD_VAR 0 2
52978: PUSH
52979: LD_VAR 0 3
52983: GREATEREQUAL
52984: IFFALSE 52988
// exit ;
52986: GO 53038
// if size then
52988: LD_VAR 0 2
52992: IFFALSE 53038
// for i := array downto size do
52994: LD_ADDR_VAR 0 4
52998: PUSH
52999: DOUBLE
53000: LD_VAR 0 1
53004: INC
53005: ST_TO_ADDR
53006: LD_VAR 0 2
53010: PUSH
53011: FOR_DOWNTO
53012: IFFALSE 53036
// result := Delete ( result , result ) ;
53014: LD_ADDR_VAR 0 3
53018: PUSH
53019: LD_VAR 0 3
53023: PPUSH
53024: LD_VAR 0 3
53028: PPUSH
53029: CALL_OW 3
53033: ST_TO_ADDR
53034: GO 53011
53036: POP
53037: POP
// end ;
53038: LD_VAR 0 3
53042: RET
// export function ComExit ( unit ) ; var tmp ; begin
53043: LD_INT 0
53045: PPUSH
53046: PPUSH
// if not IsInUnit ( unit ) then
53047: LD_VAR 0 1
53051: PPUSH
53052: CALL_OW 310
53056: NOT
53057: IFFALSE 53061
// exit ;
53059: GO 53121
// tmp := IsInUnit ( unit ) ;
53061: LD_ADDR_VAR 0 3
53065: PUSH
53066: LD_VAR 0 1
53070: PPUSH
53071: CALL_OW 310
53075: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53076: LD_VAR 0 3
53080: PPUSH
53081: CALL_OW 247
53085: PUSH
53086: LD_INT 2
53088: EQUAL
53089: IFFALSE 53102
// ComExitVehicle ( unit ) else
53091: LD_VAR 0 1
53095: PPUSH
53096: CALL_OW 121
53100: GO 53111
// ComExitBuilding ( unit ) ;
53102: LD_VAR 0 1
53106: PPUSH
53107: CALL_OW 122
// result := tmp ;
53111: LD_ADDR_VAR 0 2
53115: PUSH
53116: LD_VAR 0 3
53120: ST_TO_ADDR
// end ;
53121: LD_VAR 0 2
53125: RET
// export function ComExitAll ( units ) ; var i ; begin
53126: LD_INT 0
53128: PPUSH
53129: PPUSH
// if not units then
53130: LD_VAR 0 1
53134: NOT
53135: IFFALSE 53139
// exit ;
53137: GO 53165
// for i in units do
53139: LD_ADDR_VAR 0 3
53143: PUSH
53144: LD_VAR 0 1
53148: PUSH
53149: FOR_IN
53150: IFFALSE 53163
// ComExit ( i ) ;
53152: LD_VAR 0 3
53156: PPUSH
53157: CALL 53043 0 1
53161: GO 53149
53163: POP
53164: POP
// end ;
53165: LD_VAR 0 2
53169: RET
// export function ResetHc ; begin
53170: LD_INT 0
53172: PPUSH
// InitHc ;
53173: CALL_OW 19
// hc_importance := 0 ;
53177: LD_ADDR_OWVAR 32
53181: PUSH
53182: LD_INT 0
53184: ST_TO_ADDR
// end ;
53185: LD_VAR 0 1
53189: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53190: LD_INT 0
53192: PPUSH
53193: PPUSH
53194: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53195: LD_ADDR_VAR 0 6
53199: PUSH
53200: LD_VAR 0 1
53204: PUSH
53205: LD_VAR 0 3
53209: PLUS
53210: PUSH
53211: LD_INT 2
53213: DIV
53214: ST_TO_ADDR
// if _x < 0 then
53215: LD_VAR 0 6
53219: PUSH
53220: LD_INT 0
53222: LESS
53223: IFFALSE 53240
// _x := _x * - 1 ;
53225: LD_ADDR_VAR 0 6
53229: PUSH
53230: LD_VAR 0 6
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: MUL
53239: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53240: LD_ADDR_VAR 0 7
53244: PUSH
53245: LD_VAR 0 2
53249: PUSH
53250: LD_VAR 0 4
53254: PLUS
53255: PUSH
53256: LD_INT 2
53258: DIV
53259: ST_TO_ADDR
// if _y < 0 then
53260: LD_VAR 0 7
53264: PUSH
53265: LD_INT 0
53267: LESS
53268: IFFALSE 53285
// _y := _y * - 1 ;
53270: LD_ADDR_VAR 0 7
53274: PUSH
53275: LD_VAR 0 7
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: MUL
53284: ST_TO_ADDR
// result := [ _x , _y ] ;
53285: LD_ADDR_VAR 0 5
53289: PUSH
53290: LD_VAR 0 6
53294: PUSH
53295: LD_VAR 0 7
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: ST_TO_ADDR
// end ;
53304: LD_VAR 0 5
53308: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53309: LD_INT 0
53311: PPUSH
53312: PPUSH
53313: PPUSH
53314: PPUSH
// task := GetTaskList ( unit ) ;
53315: LD_ADDR_VAR 0 7
53319: PUSH
53320: LD_VAR 0 1
53324: PPUSH
53325: CALL_OW 437
53329: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53330: LD_VAR 0 7
53334: NOT
53335: PUSH
53336: LD_VAR 0 1
53340: PPUSH
53341: LD_VAR 0 2
53345: PPUSH
53346: CALL_OW 308
53350: NOT
53351: AND
53352: IFFALSE 53356
// exit ;
53354: GO 53474
// if IsInArea ( unit , area ) then
53356: LD_VAR 0 1
53360: PPUSH
53361: LD_VAR 0 2
53365: PPUSH
53366: CALL_OW 308
53370: IFFALSE 53388
// begin ComMoveToArea ( unit , goAway ) ;
53372: LD_VAR 0 1
53376: PPUSH
53377: LD_VAR 0 3
53381: PPUSH
53382: CALL_OW 113
// exit ;
53386: GO 53474
// end ; if task [ 1 ] [ 1 ] <> M then
53388: LD_VAR 0 7
53392: PUSH
53393: LD_INT 1
53395: ARRAY
53396: PUSH
53397: LD_INT 1
53399: ARRAY
53400: PUSH
53401: LD_STRING M
53403: NONEQUAL
53404: IFFALSE 53408
// exit ;
53406: GO 53474
// x := task [ 1 ] [ 2 ] ;
53408: LD_ADDR_VAR 0 5
53412: PUSH
53413: LD_VAR 0 7
53417: PUSH
53418: LD_INT 1
53420: ARRAY
53421: PUSH
53422: LD_INT 2
53424: ARRAY
53425: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53426: LD_ADDR_VAR 0 6
53430: PUSH
53431: LD_VAR 0 7
53435: PUSH
53436: LD_INT 1
53438: ARRAY
53439: PUSH
53440: LD_INT 3
53442: ARRAY
53443: ST_TO_ADDR
// if InArea ( x , y , area ) then
53444: LD_VAR 0 5
53448: PPUSH
53449: LD_VAR 0 6
53453: PPUSH
53454: LD_VAR 0 2
53458: PPUSH
53459: CALL_OW 309
53463: IFFALSE 53474
// ComStop ( unit ) ;
53465: LD_VAR 0 1
53469: PPUSH
53470: CALL_OW 141
// end ;
53474: LD_VAR 0 4
53478: RET
// export function Abs ( value ) ; begin
53479: LD_INT 0
53481: PPUSH
// result := value ;
53482: LD_ADDR_VAR 0 2
53486: PUSH
53487: LD_VAR 0 1
53491: ST_TO_ADDR
// if value < 0 then
53492: LD_VAR 0 1
53496: PUSH
53497: LD_INT 0
53499: LESS
53500: IFFALSE 53517
// result := value * - 1 ;
53502: LD_ADDR_VAR 0 2
53506: PUSH
53507: LD_VAR 0 1
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: MUL
53516: ST_TO_ADDR
// end ;
53517: LD_VAR 0 2
53521: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53522: LD_INT 0
53524: PPUSH
53525: PPUSH
53526: PPUSH
53527: PPUSH
53528: PPUSH
53529: PPUSH
53530: PPUSH
53531: PPUSH
// if not unit or not building then
53532: LD_VAR 0 1
53536: NOT
53537: PUSH
53538: LD_VAR 0 2
53542: NOT
53543: OR
53544: IFFALSE 53548
// exit ;
53546: GO 53774
// x := GetX ( building ) ;
53548: LD_ADDR_VAR 0 4
53552: PUSH
53553: LD_VAR 0 2
53557: PPUSH
53558: CALL_OW 250
53562: ST_TO_ADDR
// y := GetY ( building ) ;
53563: LD_ADDR_VAR 0 6
53567: PUSH
53568: LD_VAR 0 2
53572: PPUSH
53573: CALL_OW 251
53577: ST_TO_ADDR
// d := GetDir ( building ) ;
53578: LD_ADDR_VAR 0 8
53582: PUSH
53583: LD_VAR 0 2
53587: PPUSH
53588: CALL_OW 254
53592: ST_TO_ADDR
// r := 4 ;
53593: LD_ADDR_VAR 0 9
53597: PUSH
53598: LD_INT 4
53600: ST_TO_ADDR
// for i := 1 to 5 do
53601: LD_ADDR_VAR 0 10
53605: PUSH
53606: DOUBLE
53607: LD_INT 1
53609: DEC
53610: ST_TO_ADDR
53611: LD_INT 5
53613: PUSH
53614: FOR_TO
53615: IFFALSE 53772
// begin _x := ShiftX ( x , d , r + i ) ;
53617: LD_ADDR_VAR 0 5
53621: PUSH
53622: LD_VAR 0 4
53626: PPUSH
53627: LD_VAR 0 8
53631: PPUSH
53632: LD_VAR 0 9
53636: PUSH
53637: LD_VAR 0 10
53641: PLUS
53642: PPUSH
53643: CALL_OW 272
53647: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53648: LD_ADDR_VAR 0 7
53652: PUSH
53653: LD_VAR 0 6
53657: PPUSH
53658: LD_VAR 0 8
53662: PPUSH
53663: LD_VAR 0 9
53667: PUSH
53668: LD_VAR 0 10
53672: PLUS
53673: PPUSH
53674: CALL_OW 273
53678: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53679: LD_VAR 0 5
53683: PPUSH
53684: LD_VAR 0 7
53688: PPUSH
53689: CALL_OW 488
53693: PUSH
53694: LD_VAR 0 5
53698: PPUSH
53699: LD_VAR 0 7
53703: PPUSH
53704: CALL_OW 428
53708: PPUSH
53709: CALL_OW 247
53713: PUSH
53714: LD_INT 3
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: IN
53724: NOT
53725: AND
53726: IFFALSE 53770
// begin ComMoveXY ( unit , _x , _y ) ;
53728: LD_VAR 0 1
53732: PPUSH
53733: LD_VAR 0 5
53737: PPUSH
53738: LD_VAR 0 7
53742: PPUSH
53743: CALL_OW 111
// result := [ _x , _y ] ;
53747: LD_ADDR_VAR 0 3
53751: PUSH
53752: LD_VAR 0 5
53756: PUSH
53757: LD_VAR 0 7
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: ST_TO_ADDR
// exit ;
53766: POP
53767: POP
53768: GO 53774
// end ; end ;
53770: GO 53614
53772: POP
53773: POP
// end ;
53774: LD_VAR 0 3
53778: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53779: LD_INT 0
53781: PPUSH
53782: PPUSH
53783: PPUSH
// result := 0 ;
53784: LD_ADDR_VAR 0 3
53788: PUSH
53789: LD_INT 0
53791: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53792: LD_VAR 0 1
53796: PUSH
53797: LD_INT 0
53799: LESS
53800: PUSH
53801: LD_VAR 0 1
53805: PUSH
53806: LD_INT 8
53808: GREATER
53809: OR
53810: PUSH
53811: LD_VAR 0 2
53815: PUSH
53816: LD_INT 0
53818: LESS
53819: OR
53820: PUSH
53821: LD_VAR 0 2
53825: PUSH
53826: LD_INT 8
53828: GREATER
53829: OR
53830: IFFALSE 53834
// exit ;
53832: GO 53909
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53834: LD_ADDR_VAR 0 4
53838: PUSH
53839: LD_INT 22
53841: PUSH
53842: LD_VAR 0 2
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PPUSH
53851: CALL_OW 69
53855: PUSH
53856: FOR_IN
53857: IFFALSE 53907
// begin un := UnitShoot ( i ) ;
53859: LD_ADDR_VAR 0 5
53863: PUSH
53864: LD_VAR 0 4
53868: PPUSH
53869: CALL_OW 504
53873: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53874: LD_VAR 0 5
53878: PPUSH
53879: CALL_OW 255
53883: PUSH
53884: LD_VAR 0 1
53888: EQUAL
53889: IFFALSE 53905
// begin result := un ;
53891: LD_ADDR_VAR 0 3
53895: PUSH
53896: LD_VAR 0 5
53900: ST_TO_ADDR
// exit ;
53901: POP
53902: POP
53903: GO 53909
// end ; end ;
53905: GO 53856
53907: POP
53908: POP
// end ;
53909: LD_VAR 0 3
53913: RET
// export function GetCargoBay ( units ) ; begin
53914: LD_INT 0
53916: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53917: LD_ADDR_VAR 0 2
53921: PUSH
53922: LD_VAR 0 1
53926: PPUSH
53927: LD_INT 2
53929: PUSH
53930: LD_INT 34
53932: PUSH
53933: LD_INT 12
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 34
53942: PUSH
53943: LD_INT 51
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 34
53952: PUSH
53953: LD_INT 32
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 34
53962: PUSH
53963: LD_INT 89
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: PPUSH
53977: CALL_OW 72
53981: ST_TO_ADDR
// end ;
53982: LD_VAR 0 2
53986: RET
// export function Negate ( value ) ; begin
53987: LD_INT 0
53989: PPUSH
// result := not value ;
53990: LD_ADDR_VAR 0 2
53994: PUSH
53995: LD_VAR 0 1
53999: NOT
54000: ST_TO_ADDR
// end ;
54001: LD_VAR 0 2
54005: RET
// export function Inc ( value ) ; begin
54006: LD_INT 0
54008: PPUSH
// result := value + 1 ;
54009: LD_ADDR_VAR 0 2
54013: PUSH
54014: LD_VAR 0 1
54018: PUSH
54019: LD_INT 1
54021: PLUS
54022: ST_TO_ADDR
// end ;
54023: LD_VAR 0 2
54027: RET
// export function Dec ( value ) ; begin
54028: LD_INT 0
54030: PPUSH
// result := value - 1 ;
54031: LD_ADDR_VAR 0 2
54035: PUSH
54036: LD_VAR 0 1
54040: PUSH
54041: LD_INT 1
54043: MINUS
54044: ST_TO_ADDR
// end ;
54045: LD_VAR 0 2
54049: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54050: LD_INT 0
54052: PPUSH
54053: PPUSH
54054: PPUSH
54055: PPUSH
54056: PPUSH
54057: PPUSH
54058: PPUSH
54059: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54060: LD_VAR 0 1
54064: PPUSH
54065: LD_VAR 0 2
54069: PPUSH
54070: CALL_OW 488
54074: NOT
54075: PUSH
54076: LD_VAR 0 3
54080: PPUSH
54081: LD_VAR 0 4
54085: PPUSH
54086: CALL_OW 488
54090: NOT
54091: OR
54092: IFFALSE 54105
// begin result := - 1 ;
54094: LD_ADDR_VAR 0 5
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: ST_TO_ADDR
// exit ;
54103: GO 54340
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54105: LD_ADDR_VAR 0 12
54109: PUSH
54110: LD_VAR 0 1
54114: PPUSH
54115: LD_VAR 0 2
54119: PPUSH
54120: LD_VAR 0 3
54124: PPUSH
54125: LD_VAR 0 4
54129: PPUSH
54130: CALL 53190 0 4
54134: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54135: LD_ADDR_VAR 0 11
54139: PUSH
54140: LD_VAR 0 1
54144: PPUSH
54145: LD_VAR 0 2
54149: PPUSH
54150: LD_VAR 0 12
54154: PUSH
54155: LD_INT 1
54157: ARRAY
54158: PPUSH
54159: LD_VAR 0 12
54163: PUSH
54164: LD_INT 2
54166: ARRAY
54167: PPUSH
54168: CALL_OW 298
54172: ST_TO_ADDR
// distance := 9999 ;
54173: LD_ADDR_VAR 0 10
54177: PUSH
54178: LD_INT 9999
54180: ST_TO_ADDR
// for i := 0 to 5 do
54181: LD_ADDR_VAR 0 6
54185: PUSH
54186: DOUBLE
54187: LD_INT 0
54189: DEC
54190: ST_TO_ADDR
54191: LD_INT 5
54193: PUSH
54194: FOR_TO
54195: IFFALSE 54338
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54197: LD_ADDR_VAR 0 7
54201: PUSH
54202: LD_VAR 0 1
54206: PPUSH
54207: LD_VAR 0 6
54211: PPUSH
54212: LD_VAR 0 11
54216: PPUSH
54217: CALL_OW 272
54221: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54222: LD_ADDR_VAR 0 8
54226: PUSH
54227: LD_VAR 0 2
54231: PPUSH
54232: LD_VAR 0 6
54236: PPUSH
54237: LD_VAR 0 11
54241: PPUSH
54242: CALL_OW 273
54246: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54247: LD_VAR 0 7
54251: PPUSH
54252: LD_VAR 0 8
54256: PPUSH
54257: CALL_OW 488
54261: NOT
54262: IFFALSE 54266
// continue ;
54264: GO 54194
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54266: LD_ADDR_VAR 0 9
54270: PUSH
54271: LD_VAR 0 12
54275: PUSH
54276: LD_INT 1
54278: ARRAY
54279: PPUSH
54280: LD_VAR 0 12
54284: PUSH
54285: LD_INT 2
54287: ARRAY
54288: PPUSH
54289: LD_VAR 0 7
54293: PPUSH
54294: LD_VAR 0 8
54298: PPUSH
54299: CALL_OW 298
54303: ST_TO_ADDR
// if tmp < distance then
54304: LD_VAR 0 9
54308: PUSH
54309: LD_VAR 0 10
54313: LESS
54314: IFFALSE 54336
// begin result := i ;
54316: LD_ADDR_VAR 0 5
54320: PUSH
54321: LD_VAR 0 6
54325: ST_TO_ADDR
// distance := tmp ;
54326: LD_ADDR_VAR 0 10
54330: PUSH
54331: LD_VAR 0 9
54335: ST_TO_ADDR
// end ; end ;
54336: GO 54194
54338: POP
54339: POP
// end ;
54340: LD_VAR 0 5
54344: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54345: LD_INT 0
54347: PPUSH
54348: PPUSH
// if not driver or not IsInUnit ( driver ) then
54349: LD_VAR 0 1
54353: NOT
54354: PUSH
54355: LD_VAR 0 1
54359: PPUSH
54360: CALL_OW 310
54364: NOT
54365: OR
54366: IFFALSE 54370
// exit ;
54368: GO 54460
// vehicle := IsInUnit ( driver ) ;
54370: LD_ADDR_VAR 0 3
54374: PUSH
54375: LD_VAR 0 1
54379: PPUSH
54380: CALL_OW 310
54384: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54385: LD_VAR 0 1
54389: PPUSH
54390: LD_STRING \
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: PUSH
54420: LD_STRING E
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_VAR 0 3
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PPUSH
54456: CALL_OW 446
// end ;
54460: LD_VAR 0 2
54464: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54465: LD_INT 0
54467: PPUSH
54468: PPUSH
// if not driver or not IsInUnit ( driver ) then
54469: LD_VAR 0 1
54473: NOT
54474: PUSH
54475: LD_VAR 0 1
54479: PPUSH
54480: CALL_OW 310
54484: NOT
54485: OR
54486: IFFALSE 54490
// exit ;
54488: GO 54580
// vehicle := IsInUnit ( driver ) ;
54490: LD_ADDR_VAR 0 3
54494: PUSH
54495: LD_VAR 0 1
54499: PPUSH
54500: CALL_OW 310
54504: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54505: LD_VAR 0 1
54509: PPUSH
54510: LD_STRING \
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: PUSH
54540: LD_STRING E
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_VAR 0 3
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PPUSH
54576: CALL_OW 447
// end ;
54580: LD_VAR 0 2
54584: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54585: LD_INT 0
54587: PPUSH
54588: PPUSH
54589: PPUSH
// tmp := [ ] ;
54590: LD_ADDR_VAR 0 5
54594: PUSH
54595: EMPTY
54596: ST_TO_ADDR
// for i in units do
54597: LD_ADDR_VAR 0 4
54601: PUSH
54602: LD_VAR 0 1
54606: PUSH
54607: FOR_IN
54608: IFFALSE 54646
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54610: LD_ADDR_VAR 0 5
54614: PUSH
54615: LD_VAR 0 5
54619: PPUSH
54620: LD_VAR 0 5
54624: PUSH
54625: LD_INT 1
54627: PLUS
54628: PPUSH
54629: LD_VAR 0 4
54633: PPUSH
54634: CALL_OW 256
54638: PPUSH
54639: CALL_OW 2
54643: ST_TO_ADDR
54644: GO 54607
54646: POP
54647: POP
// if not tmp then
54648: LD_VAR 0 5
54652: NOT
54653: IFFALSE 54657
// exit ;
54655: GO 54705
// if asc then
54657: LD_VAR 0 2
54661: IFFALSE 54685
// result := SortListByListAsc ( units , tmp ) else
54663: LD_ADDR_VAR 0 3
54667: PUSH
54668: LD_VAR 0 1
54672: PPUSH
54673: LD_VAR 0 5
54677: PPUSH
54678: CALL_OW 76
54682: ST_TO_ADDR
54683: GO 54705
// result := SortListByListDesc ( units , tmp ) ;
54685: LD_ADDR_VAR 0 3
54689: PUSH
54690: LD_VAR 0 1
54694: PPUSH
54695: LD_VAR 0 5
54699: PPUSH
54700: CALL_OW 77
54704: ST_TO_ADDR
// end ;
54705: LD_VAR 0 3
54709: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54710: LD_INT 0
54712: PPUSH
54713: PPUSH
// task := GetTaskList ( mech ) ;
54714: LD_ADDR_VAR 0 4
54718: PUSH
54719: LD_VAR 0 1
54723: PPUSH
54724: CALL_OW 437
54728: ST_TO_ADDR
// if not task then
54729: LD_VAR 0 4
54733: NOT
54734: IFFALSE 54738
// exit ;
54736: GO 54780
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54738: LD_ADDR_VAR 0 3
54742: PUSH
54743: LD_VAR 0 4
54747: PUSH
54748: LD_INT 1
54750: ARRAY
54751: PUSH
54752: LD_INT 1
54754: ARRAY
54755: PUSH
54756: LD_STRING r
54758: EQUAL
54759: PUSH
54760: LD_VAR 0 4
54764: PUSH
54765: LD_INT 1
54767: ARRAY
54768: PUSH
54769: LD_INT 4
54771: ARRAY
54772: PUSH
54773: LD_VAR 0 2
54777: EQUAL
54778: AND
54779: ST_TO_ADDR
// end ;
54780: LD_VAR 0 3
54784: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54785: LD_INT 0
54787: PPUSH
// SetDir ( unit , d ) ;
54788: LD_VAR 0 1
54792: PPUSH
54793: LD_VAR 0 4
54797: PPUSH
54798: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54802: LD_VAR 0 1
54806: PPUSH
54807: LD_VAR 0 2
54811: PPUSH
54812: LD_VAR 0 3
54816: PPUSH
54817: LD_VAR 0 5
54821: PPUSH
54822: CALL_OW 48
// end ;
54826: LD_VAR 0 6
54830: RET
// export function ToNaturalNumber ( number ) ; begin
54831: LD_INT 0
54833: PPUSH
// result := number div 1 ;
54834: LD_ADDR_VAR 0 2
54838: PUSH
54839: LD_VAR 0 1
54843: PUSH
54844: LD_INT 1
54846: DIV
54847: ST_TO_ADDR
// if number < 0 then
54848: LD_VAR 0 1
54852: PUSH
54853: LD_INT 0
54855: LESS
54856: IFFALSE 54866
// result := 0 ;
54858: LD_ADDR_VAR 0 2
54862: PUSH
54863: LD_INT 0
54865: ST_TO_ADDR
// end ;
54866: LD_VAR 0 2
54870: RET
// export function SortByClass ( units , class ) ; var un ; begin
54871: LD_INT 0
54873: PPUSH
54874: PPUSH
// if not units or not class then
54875: LD_VAR 0 1
54879: NOT
54880: PUSH
54881: LD_VAR 0 2
54885: NOT
54886: OR
54887: IFFALSE 54891
// exit ;
54889: GO 54986
// result := [ ] ;
54891: LD_ADDR_VAR 0 3
54895: PUSH
54896: EMPTY
54897: ST_TO_ADDR
// for un in units do
54898: LD_ADDR_VAR 0 4
54902: PUSH
54903: LD_VAR 0 1
54907: PUSH
54908: FOR_IN
54909: IFFALSE 54984
// if GetClass ( un ) = class then
54911: LD_VAR 0 4
54915: PPUSH
54916: CALL_OW 257
54920: PUSH
54921: LD_VAR 0 2
54925: EQUAL
54926: IFFALSE 54953
// result := Insert ( result , 1 , un ) else
54928: LD_ADDR_VAR 0 3
54932: PUSH
54933: LD_VAR 0 3
54937: PPUSH
54938: LD_INT 1
54940: PPUSH
54941: LD_VAR 0 4
54945: PPUSH
54946: CALL_OW 2
54950: ST_TO_ADDR
54951: GO 54982
// result := Replace ( result , result + 1 , un ) ;
54953: LD_ADDR_VAR 0 3
54957: PUSH
54958: LD_VAR 0 3
54962: PPUSH
54963: LD_VAR 0 3
54967: PUSH
54968: LD_INT 1
54970: PLUS
54971: PPUSH
54972: LD_VAR 0 4
54976: PPUSH
54977: CALL_OW 1
54981: ST_TO_ADDR
54982: GO 54908
54984: POP
54985: POP
// end ;
54986: LD_VAR 0 3
54990: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
54991: LD_INT 0
54993: PPUSH
54994: PPUSH
54995: PPUSH
54996: PPUSH
54997: PPUSH
54998: PPUSH
54999: PPUSH
// result := [ ] ;
55000: LD_ADDR_VAR 0 4
55004: PUSH
55005: EMPTY
55006: ST_TO_ADDR
// if x - r < 0 then
55007: LD_VAR 0 1
55011: PUSH
55012: LD_VAR 0 3
55016: MINUS
55017: PUSH
55018: LD_INT 0
55020: LESS
55021: IFFALSE 55033
// min_x := 0 else
55023: LD_ADDR_VAR 0 8
55027: PUSH
55028: LD_INT 0
55030: ST_TO_ADDR
55031: GO 55049
// min_x := x - r ;
55033: LD_ADDR_VAR 0 8
55037: PUSH
55038: LD_VAR 0 1
55042: PUSH
55043: LD_VAR 0 3
55047: MINUS
55048: ST_TO_ADDR
// if y - r < 0 then
55049: LD_VAR 0 2
55053: PUSH
55054: LD_VAR 0 3
55058: MINUS
55059: PUSH
55060: LD_INT 0
55062: LESS
55063: IFFALSE 55075
// min_y := 0 else
55065: LD_ADDR_VAR 0 7
55069: PUSH
55070: LD_INT 0
55072: ST_TO_ADDR
55073: GO 55091
// min_y := y - r ;
55075: LD_ADDR_VAR 0 7
55079: PUSH
55080: LD_VAR 0 2
55084: PUSH
55085: LD_VAR 0 3
55089: MINUS
55090: ST_TO_ADDR
// max_x := x + r ;
55091: LD_ADDR_VAR 0 9
55095: PUSH
55096: LD_VAR 0 1
55100: PUSH
55101: LD_VAR 0 3
55105: PLUS
55106: ST_TO_ADDR
// max_y := y + r ;
55107: LD_ADDR_VAR 0 10
55111: PUSH
55112: LD_VAR 0 2
55116: PUSH
55117: LD_VAR 0 3
55121: PLUS
55122: ST_TO_ADDR
// for _x = min_x to max_x do
55123: LD_ADDR_VAR 0 5
55127: PUSH
55128: DOUBLE
55129: LD_VAR 0 8
55133: DEC
55134: ST_TO_ADDR
55135: LD_VAR 0 9
55139: PUSH
55140: FOR_TO
55141: IFFALSE 55242
// for _y = min_y to max_y do
55143: LD_ADDR_VAR 0 6
55147: PUSH
55148: DOUBLE
55149: LD_VAR 0 7
55153: DEC
55154: ST_TO_ADDR
55155: LD_VAR 0 10
55159: PUSH
55160: FOR_TO
55161: IFFALSE 55238
// begin if not ValidHex ( _x , _y ) then
55163: LD_VAR 0 5
55167: PPUSH
55168: LD_VAR 0 6
55172: PPUSH
55173: CALL_OW 488
55177: NOT
55178: IFFALSE 55182
// continue ;
55180: GO 55160
// if GetResourceTypeXY ( _x , _y ) then
55182: LD_VAR 0 5
55186: PPUSH
55187: LD_VAR 0 6
55191: PPUSH
55192: CALL_OW 283
55196: IFFALSE 55236
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55198: LD_ADDR_VAR 0 4
55202: PUSH
55203: LD_VAR 0 4
55207: PPUSH
55208: LD_VAR 0 4
55212: PUSH
55213: LD_INT 1
55215: PLUS
55216: PPUSH
55217: LD_VAR 0 5
55221: PUSH
55222: LD_VAR 0 6
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PPUSH
55231: CALL_OW 1
55235: ST_TO_ADDR
// end ;
55236: GO 55160
55238: POP
55239: POP
55240: GO 55140
55242: POP
55243: POP
// end ;
55244: LD_VAR 0 4
55248: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55249: LD_INT 0
55251: PPUSH
55252: PPUSH
55253: PPUSH
55254: PPUSH
55255: PPUSH
55256: PPUSH
55257: PPUSH
55258: PPUSH
// if not units then
55259: LD_VAR 0 1
55263: NOT
55264: IFFALSE 55268
// exit ;
55266: GO 55792
// result := UnitFilter ( units , [ f_ok ] ) ;
55268: LD_ADDR_VAR 0 3
55272: PUSH
55273: LD_VAR 0 1
55277: PPUSH
55278: LD_INT 50
55280: PUSH
55281: EMPTY
55282: LIST
55283: PPUSH
55284: CALL_OW 72
55288: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55289: LD_ADDR_VAR 0 8
55293: PUSH
55294: LD_VAR 0 1
55298: PUSH
55299: LD_INT 1
55301: ARRAY
55302: PPUSH
55303: CALL_OW 255
55307: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55308: LD_ADDR_VAR 0 10
55312: PUSH
55313: LD_INT 29
55315: PUSH
55316: LD_INT 91
55318: PUSH
55319: LD_INT 49
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: ST_TO_ADDR
// if not result then
55327: LD_VAR 0 3
55331: NOT
55332: IFFALSE 55336
// exit ;
55334: GO 55792
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55336: LD_ADDR_VAR 0 5
55340: PUSH
55341: LD_INT 81
55343: PUSH
55344: LD_VAR 0 8
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PPUSH
55353: CALL_OW 69
55357: ST_TO_ADDR
// for i in result do
55358: LD_ADDR_VAR 0 4
55362: PUSH
55363: LD_VAR 0 3
55367: PUSH
55368: FOR_IN
55369: IFFALSE 55790
// begin tag := GetTag ( i ) + 1 ;
55371: LD_ADDR_VAR 0 9
55375: PUSH
55376: LD_VAR 0 4
55380: PPUSH
55381: CALL_OW 110
55385: PUSH
55386: LD_INT 1
55388: PLUS
55389: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55390: LD_ADDR_VAR 0 7
55394: PUSH
55395: LD_VAR 0 4
55399: PPUSH
55400: CALL_OW 250
55404: PPUSH
55405: LD_VAR 0 4
55409: PPUSH
55410: CALL_OW 251
55414: PPUSH
55415: LD_INT 6
55417: PPUSH
55418: CALL 54991 0 3
55422: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55423: LD_VAR 0 4
55427: PPUSH
55428: CALL_OW 247
55432: PUSH
55433: LD_INT 2
55435: EQUAL
55436: PUSH
55437: LD_VAR 0 7
55441: AND
55442: PUSH
55443: LD_VAR 0 4
55447: PPUSH
55448: CALL_OW 264
55452: PUSH
55453: LD_VAR 0 10
55457: IN
55458: NOT
55459: AND
55460: IFFALSE 55499
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55462: LD_VAR 0 4
55466: PPUSH
55467: LD_VAR 0 7
55471: PUSH
55472: LD_INT 1
55474: ARRAY
55475: PUSH
55476: LD_INT 1
55478: ARRAY
55479: PPUSH
55480: LD_VAR 0 7
55484: PUSH
55485: LD_INT 1
55487: ARRAY
55488: PUSH
55489: LD_INT 2
55491: ARRAY
55492: PPUSH
55493: CALL_OW 116
55497: GO 55788
// if path > tag then
55499: LD_VAR 0 2
55503: PUSH
55504: LD_VAR 0 9
55508: GREATER
55509: IFFALSE 55717
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55511: LD_ADDR_VAR 0 6
55515: PUSH
55516: LD_VAR 0 5
55520: PPUSH
55521: LD_INT 91
55523: PUSH
55524: LD_VAR 0 4
55528: PUSH
55529: LD_INT 8
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: LIST
55536: PPUSH
55537: CALL_OW 72
55541: ST_TO_ADDR
// if nearEnemy then
55542: LD_VAR 0 6
55546: IFFALSE 55615
// begin if GetWeapon ( i ) = ru_time_lapser then
55548: LD_VAR 0 4
55552: PPUSH
55553: CALL_OW 264
55557: PUSH
55558: LD_INT 49
55560: EQUAL
55561: IFFALSE 55589
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55563: LD_VAR 0 4
55567: PPUSH
55568: LD_VAR 0 6
55572: PPUSH
55573: LD_VAR 0 4
55577: PPUSH
55578: CALL_OW 74
55582: PPUSH
55583: CALL_OW 112
55587: GO 55613
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55589: LD_VAR 0 4
55593: PPUSH
55594: LD_VAR 0 6
55598: PPUSH
55599: LD_VAR 0 4
55603: PPUSH
55604: CALL_OW 74
55608: PPUSH
55609: CALL 56717 0 2
// end else
55613: GO 55715
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55615: LD_VAR 0 4
55619: PPUSH
55620: LD_VAR 0 2
55624: PUSH
55625: LD_VAR 0 9
55629: ARRAY
55630: PUSH
55631: LD_INT 1
55633: ARRAY
55634: PPUSH
55635: LD_VAR 0 2
55639: PUSH
55640: LD_VAR 0 9
55644: ARRAY
55645: PUSH
55646: LD_INT 2
55648: ARRAY
55649: PPUSH
55650: CALL_OW 297
55654: PUSH
55655: LD_INT 6
55657: GREATER
55658: IFFALSE 55701
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55660: LD_VAR 0 4
55664: PPUSH
55665: LD_VAR 0 2
55669: PUSH
55670: LD_VAR 0 9
55674: ARRAY
55675: PUSH
55676: LD_INT 1
55678: ARRAY
55679: PPUSH
55680: LD_VAR 0 2
55684: PUSH
55685: LD_VAR 0 9
55689: ARRAY
55690: PUSH
55691: LD_INT 2
55693: ARRAY
55694: PPUSH
55695: CALL_OW 114
55699: GO 55715
// SetTag ( i , tag ) ;
55701: LD_VAR 0 4
55705: PPUSH
55706: LD_VAR 0 9
55710: PPUSH
55711: CALL_OW 109
// end else
55715: GO 55788
// if enemy then
55717: LD_VAR 0 5
55721: IFFALSE 55788
// begin if GetWeapon ( i ) = ru_time_lapser then
55723: LD_VAR 0 4
55727: PPUSH
55728: CALL_OW 264
55732: PUSH
55733: LD_INT 49
55735: EQUAL
55736: IFFALSE 55764
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55738: LD_VAR 0 4
55742: PPUSH
55743: LD_VAR 0 5
55747: PPUSH
55748: LD_VAR 0 4
55752: PPUSH
55753: CALL_OW 74
55757: PPUSH
55758: CALL_OW 112
55762: GO 55788
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55764: LD_VAR 0 4
55768: PPUSH
55769: LD_VAR 0 5
55773: PPUSH
55774: LD_VAR 0 4
55778: PPUSH
55779: CALL_OW 74
55783: PPUSH
55784: CALL 56717 0 2
// end ; end ;
55788: GO 55368
55790: POP
55791: POP
// end ;
55792: LD_VAR 0 3
55796: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55797: LD_INT 0
55799: PPUSH
55800: PPUSH
55801: PPUSH
// if not unit or IsInUnit ( unit ) then
55802: LD_VAR 0 1
55806: NOT
55807: PUSH
55808: LD_VAR 0 1
55812: PPUSH
55813: CALL_OW 310
55817: OR
55818: IFFALSE 55822
// exit ;
55820: GO 55913
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55822: LD_ADDR_VAR 0 4
55826: PUSH
55827: LD_VAR 0 1
55831: PPUSH
55832: CALL_OW 250
55836: PPUSH
55837: LD_VAR 0 2
55841: PPUSH
55842: LD_INT 1
55844: PPUSH
55845: CALL_OW 272
55849: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55850: LD_ADDR_VAR 0 5
55854: PUSH
55855: LD_VAR 0 1
55859: PPUSH
55860: CALL_OW 251
55864: PPUSH
55865: LD_VAR 0 2
55869: PPUSH
55870: LD_INT 1
55872: PPUSH
55873: CALL_OW 273
55877: ST_TO_ADDR
// if ValidHex ( x , y ) then
55878: LD_VAR 0 4
55882: PPUSH
55883: LD_VAR 0 5
55887: PPUSH
55888: CALL_OW 488
55892: IFFALSE 55913
// ComTurnXY ( unit , x , y ) ;
55894: LD_VAR 0 1
55898: PPUSH
55899: LD_VAR 0 4
55903: PPUSH
55904: LD_VAR 0 5
55908: PPUSH
55909: CALL_OW 118
// end ;
55913: LD_VAR 0 3
55917: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55918: LD_INT 0
55920: PPUSH
55921: PPUSH
// result := false ;
55922: LD_ADDR_VAR 0 3
55926: PUSH
55927: LD_INT 0
55929: ST_TO_ADDR
// if not units then
55930: LD_VAR 0 2
55934: NOT
55935: IFFALSE 55939
// exit ;
55937: GO 55984
// for i in units do
55939: LD_ADDR_VAR 0 4
55943: PUSH
55944: LD_VAR 0 2
55948: PUSH
55949: FOR_IN
55950: IFFALSE 55982
// if See ( side , i ) then
55952: LD_VAR 0 1
55956: PPUSH
55957: LD_VAR 0 4
55961: PPUSH
55962: CALL_OW 292
55966: IFFALSE 55980
// begin result := true ;
55968: LD_ADDR_VAR 0 3
55972: PUSH
55973: LD_INT 1
55975: ST_TO_ADDR
// exit ;
55976: POP
55977: POP
55978: GO 55984
// end ;
55980: GO 55949
55982: POP
55983: POP
// end ;
55984: LD_VAR 0 3
55988: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
55989: LD_INT 0
55991: PPUSH
55992: PPUSH
55993: PPUSH
55994: PPUSH
// if not unit or not points then
55995: LD_VAR 0 1
55999: NOT
56000: PUSH
56001: LD_VAR 0 2
56005: NOT
56006: OR
56007: IFFALSE 56011
// exit ;
56009: GO 56101
// dist := 99999 ;
56011: LD_ADDR_VAR 0 5
56015: PUSH
56016: LD_INT 99999
56018: ST_TO_ADDR
// for i in points do
56019: LD_ADDR_VAR 0 4
56023: PUSH
56024: LD_VAR 0 2
56028: PUSH
56029: FOR_IN
56030: IFFALSE 56099
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56032: LD_ADDR_VAR 0 6
56036: PUSH
56037: LD_VAR 0 1
56041: PPUSH
56042: LD_VAR 0 4
56046: PUSH
56047: LD_INT 1
56049: ARRAY
56050: PPUSH
56051: LD_VAR 0 4
56055: PUSH
56056: LD_INT 2
56058: ARRAY
56059: PPUSH
56060: CALL_OW 297
56064: ST_TO_ADDR
// if tmpDist < dist then
56065: LD_VAR 0 6
56069: PUSH
56070: LD_VAR 0 5
56074: LESS
56075: IFFALSE 56097
// begin result := i ;
56077: LD_ADDR_VAR 0 3
56081: PUSH
56082: LD_VAR 0 4
56086: ST_TO_ADDR
// dist := tmpDist ;
56087: LD_ADDR_VAR 0 5
56091: PUSH
56092: LD_VAR 0 6
56096: ST_TO_ADDR
// end ; end ;
56097: GO 56029
56099: POP
56100: POP
// end ;
56101: LD_VAR 0 3
56105: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56106: LD_INT 0
56108: PPUSH
// uc_side := side ;
56109: LD_ADDR_OWVAR 20
56113: PUSH
56114: LD_VAR 0 1
56118: ST_TO_ADDR
// uc_nation := 3 ;
56119: LD_ADDR_OWVAR 21
56123: PUSH
56124: LD_INT 3
56126: ST_TO_ADDR
// vc_chassis := 25 ;
56127: LD_ADDR_OWVAR 37
56131: PUSH
56132: LD_INT 25
56134: ST_TO_ADDR
// vc_engine := engine_siberite ;
56135: LD_ADDR_OWVAR 39
56139: PUSH
56140: LD_INT 3
56142: ST_TO_ADDR
// vc_control := control_computer ;
56143: LD_ADDR_OWVAR 38
56147: PUSH
56148: LD_INT 3
56150: ST_TO_ADDR
// vc_weapon := 59 ;
56151: LD_ADDR_OWVAR 40
56155: PUSH
56156: LD_INT 59
56158: ST_TO_ADDR
// result := CreateVehicle ;
56159: LD_ADDR_VAR 0 5
56163: PUSH
56164: CALL_OW 45
56168: ST_TO_ADDR
// SetDir ( result , d ) ;
56169: LD_VAR 0 5
56173: PPUSH
56174: LD_VAR 0 4
56178: PPUSH
56179: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56183: LD_VAR 0 5
56187: PPUSH
56188: LD_VAR 0 2
56192: PPUSH
56193: LD_VAR 0 3
56197: PPUSH
56198: LD_INT 0
56200: PPUSH
56201: CALL_OW 48
// end ;
56205: LD_VAR 0 5
56209: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56210: LD_INT 0
56212: PPUSH
56213: PPUSH
56214: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56215: LD_ADDR_VAR 0 2
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56238: LD_VAR 0 1
56242: NOT
56243: PUSH
56244: LD_VAR 0 1
56248: PPUSH
56249: CALL_OW 264
56253: PUSH
56254: LD_INT 12
56256: PUSH
56257: LD_INT 51
56259: PUSH
56260: LD_INT 32
56262: PUSH
56263: LD_INT 89
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: IN
56272: NOT
56273: OR
56274: IFFALSE 56278
// exit ;
56276: GO 56376
// for i := 1 to 3 do
56278: LD_ADDR_VAR 0 3
56282: PUSH
56283: DOUBLE
56284: LD_INT 1
56286: DEC
56287: ST_TO_ADDR
56288: LD_INT 3
56290: PUSH
56291: FOR_TO
56292: IFFALSE 56374
// begin tmp := GetCargo ( cargo , i ) ;
56294: LD_ADDR_VAR 0 4
56298: PUSH
56299: LD_VAR 0 1
56303: PPUSH
56304: LD_VAR 0 3
56308: PPUSH
56309: CALL_OW 289
56313: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56314: LD_ADDR_VAR 0 2
56318: PUSH
56319: LD_VAR 0 2
56323: PPUSH
56324: LD_VAR 0 3
56328: PPUSH
56329: LD_VAR 0 4
56333: PPUSH
56334: CALL_OW 1
56338: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56339: LD_ADDR_VAR 0 2
56343: PUSH
56344: LD_VAR 0 2
56348: PPUSH
56349: LD_INT 4
56351: PPUSH
56352: LD_VAR 0 2
56356: PUSH
56357: LD_INT 4
56359: ARRAY
56360: PUSH
56361: LD_VAR 0 4
56365: PLUS
56366: PPUSH
56367: CALL_OW 1
56371: ST_TO_ADDR
// end ;
56372: GO 56291
56374: POP
56375: POP
// end ;
56376: LD_VAR 0 2
56380: RET
// export function Length ( array ) ; begin
56381: LD_INT 0
56383: PPUSH
// result := array + 0 ;
56384: LD_ADDR_VAR 0 2
56388: PUSH
56389: LD_VAR 0 1
56393: PUSH
56394: LD_INT 0
56396: PLUS
56397: ST_TO_ADDR
// end ;
56398: LD_VAR 0 2
56402: RET
// export function PrepareArray ( array ) ; begin
56403: LD_INT 0
56405: PPUSH
// result := array diff 0 ;
56406: LD_ADDR_VAR 0 2
56410: PUSH
56411: LD_VAR 0 1
56415: PUSH
56416: LD_INT 0
56418: DIFF
56419: ST_TO_ADDR
// if not result [ 1 ] then
56420: LD_VAR 0 2
56424: PUSH
56425: LD_INT 1
56427: ARRAY
56428: NOT
56429: IFFALSE 56449
// result := Delete ( result , 1 ) ;
56431: LD_ADDR_VAR 0 2
56435: PUSH
56436: LD_VAR 0 2
56440: PPUSH
56441: LD_INT 1
56443: PPUSH
56444: CALL_OW 3
56448: ST_TO_ADDR
// end ;
56449: LD_VAR 0 2
56453: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56454: LD_INT 0
56456: PPUSH
56457: PPUSH
56458: PPUSH
56459: PPUSH
// sibRocketRange := 25 ;
56460: LD_ADDR_VAR 0 6
56464: PUSH
56465: LD_INT 25
56467: ST_TO_ADDR
// result := false ;
56468: LD_ADDR_VAR 0 4
56472: PUSH
56473: LD_INT 0
56475: ST_TO_ADDR
// for i := 0 to 5 do
56476: LD_ADDR_VAR 0 5
56480: PUSH
56481: DOUBLE
56482: LD_INT 0
56484: DEC
56485: ST_TO_ADDR
56486: LD_INT 5
56488: PUSH
56489: FOR_TO
56490: IFFALSE 56557
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56492: LD_VAR 0 1
56496: PPUSH
56497: LD_VAR 0 5
56501: PPUSH
56502: LD_VAR 0 6
56506: PPUSH
56507: CALL_OW 272
56511: PPUSH
56512: LD_VAR 0 2
56516: PPUSH
56517: LD_VAR 0 5
56521: PPUSH
56522: LD_VAR 0 6
56526: PPUSH
56527: CALL_OW 273
56531: PPUSH
56532: LD_VAR 0 3
56536: PPUSH
56537: CALL_OW 309
56541: IFFALSE 56555
// begin result := true ;
56543: LD_ADDR_VAR 0 4
56547: PUSH
56548: LD_INT 1
56550: ST_TO_ADDR
// exit ;
56551: POP
56552: POP
56553: GO 56559
// end ;
56555: GO 56489
56557: POP
56558: POP
// end ;
56559: LD_VAR 0 4
56563: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56564: LD_INT 0
56566: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56567: LD_VAR 0 1
56571: PPUSH
56572: LD_VAR 0 2
56576: PPUSH
56577: LD_INT 0
56579: PPUSH
56580: LD_INT 0
56582: PPUSH
56583: LD_INT 1
56585: PPUSH
56586: LD_INT 0
56588: PPUSH
56589: CALL_OW 587
// end ;
56593: LD_VAR 0 3
56597: RET
// export function CenterOnNow ( unit ) ; begin
56598: LD_INT 0
56600: PPUSH
// result := IsInUnit ( unit ) ;
56601: LD_ADDR_VAR 0 2
56605: PUSH
56606: LD_VAR 0 1
56610: PPUSH
56611: CALL_OW 310
56615: ST_TO_ADDR
// if not result then
56616: LD_VAR 0 2
56620: NOT
56621: IFFALSE 56633
// result := unit ;
56623: LD_ADDR_VAR 0 2
56627: PUSH
56628: LD_VAR 0 1
56632: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
56633: LD_VAR 0 1
56637: PPUSH
56638: CALL_OW 87
// end ;
56642: LD_VAR 0 2
56646: RET
// export function ComMoveHex ( unit , hex ) ; begin
56647: LD_INT 0
56649: PPUSH
// if not hex then
56650: LD_VAR 0 2
56654: NOT
56655: IFFALSE 56659
// exit ;
56657: GO 56712
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
56659: LD_VAR 0 2
56663: PUSH
56664: LD_INT 1
56666: ARRAY
56667: PPUSH
56668: LD_VAR 0 2
56672: PUSH
56673: LD_INT 2
56675: ARRAY
56676: PPUSH
56677: CALL_OW 428
56681: IFFALSE 56685
// exit ;
56683: GO 56712
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
56685: LD_VAR 0 1
56689: PPUSH
56690: LD_VAR 0 2
56694: PUSH
56695: LD_INT 1
56697: ARRAY
56698: PPUSH
56699: LD_VAR 0 2
56703: PUSH
56704: LD_INT 2
56706: ARRAY
56707: PPUSH
56708: CALL_OW 111
// end ;
56712: LD_VAR 0 3
56716: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
56717: LD_INT 0
56719: PPUSH
56720: PPUSH
56721: PPUSH
// if not unit or not enemy then
56722: LD_VAR 0 1
56726: NOT
56727: PUSH
56728: LD_VAR 0 2
56732: NOT
56733: OR
56734: IFFALSE 56738
// exit ;
56736: GO 56862
// x := GetX ( enemy ) ;
56738: LD_ADDR_VAR 0 4
56742: PUSH
56743: LD_VAR 0 2
56747: PPUSH
56748: CALL_OW 250
56752: ST_TO_ADDR
// y := GetY ( enemy ) ;
56753: LD_ADDR_VAR 0 5
56757: PUSH
56758: LD_VAR 0 2
56762: PPUSH
56763: CALL_OW 251
56767: ST_TO_ADDR
// if ValidHex ( x , y ) then
56768: LD_VAR 0 4
56772: PPUSH
56773: LD_VAR 0 5
56777: PPUSH
56778: CALL_OW 488
56782: IFFALSE 56862
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
56784: LD_VAR 0 2
56788: PPUSH
56789: CALL_OW 247
56793: PUSH
56794: LD_INT 3
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: IN
56804: PUSH
56805: LD_VAR 0 1
56809: PPUSH
56810: CALL_OW 255
56814: PPUSH
56815: LD_VAR 0 2
56819: PPUSH
56820: CALL_OW 292
56824: AND
56825: IFFALSE 56843
// ComAttackUnit ( unit , enemy ) else
56827: LD_VAR 0 1
56831: PPUSH
56832: LD_VAR 0 2
56836: PPUSH
56837: CALL_OW 115
56841: GO 56862
// ComAgressiveMove ( unit , x , y ) ;
56843: LD_VAR 0 1
56847: PPUSH
56848: LD_VAR 0 4
56852: PPUSH
56853: LD_VAR 0 5
56857: PPUSH
56858: CALL_OW 114
// end ; end_of_file end_of_file
56862: LD_VAR 0 3
56866: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
56867: LD_VAR 0 1
56871: PPUSH
56872: LD_VAR 0 2
56876: PPUSH
56877: LD_VAR 0 3
56881: PPUSH
56882: LD_VAR 0 4
56886: PPUSH
56887: LD_VAR 0 5
56891: PPUSH
56892: LD_VAR 0 6
56896: PPUSH
56897: CALL 57081 0 6
// end ;
56901: PPOPN 6
56903: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
56904: LD_INT 0
56906: PPUSH
// begin if not units then
56907: LD_VAR 0 1
56911: NOT
56912: IFFALSE 56916
// exit ;
56914: GO 56916
// end ;
56916: PPOPN 7
56918: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
56919: CALL 56985 0 0
// end ; end_of_file
56923: PPOPN 1
56925: END
// export globalGameSaveCounter ; every 0 0$1 do
56926: GO 56928
56928: DISABLE
// begin enable ;
56929: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
56930: LD_STRING updateTimer(
56932: PUSH
56933: LD_OWVAR 1
56937: STR
56938: PUSH
56939: LD_STRING );
56941: STR
56942: PPUSH
56943: CALL_OW 559
// end ;
56947: END
// every 0 0$1 do
56948: GO 56950
56950: DISABLE
// begin globalGameSaveCounter := 0 ;
56951: LD_ADDR_EXP 37
56955: PUSH
56956: LD_INT 0
56958: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
56959: LD_STRING setGameSaveCounter(0)
56961: PPUSH
56962: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
56966: LD_STRING initStreamRollete();
56968: PPUSH
56969: CALL_OW 559
// InitStreamMode ;
56973: CALL 58299 0 0
// DefineStreamItems ( false ) ;
56977: LD_INT 0
56979: PPUSH
56980: CALL 58763 0 1
// end ;
56984: END
// export function SOS_MapStart ( ) ; begin
56985: LD_INT 0
56987: PPUSH
// if streamModeActive then
56988: LD_EXP 38
56992: IFFALSE 57001
// DefineStreamItems ( true ) ;
56994: LD_INT 1
56996: PPUSH
56997: CALL 58763 0 1
// UpdateLuaVariables ( ) ;
57001: CALL 57018 0 0
// UpdateFactoryWaypoints ( ) ;
57005: CALL 71632 0 0
// UpdateWarehouseGatheringPoints ( ) ;
57009: CALL 71889 0 0
// end ;
57013: LD_VAR 0 1
57017: RET
// function UpdateLuaVariables ( ) ; begin
57018: LD_INT 0
57020: PPUSH
// if globalGameSaveCounter then
57021: LD_EXP 37
57025: IFFALSE 57059
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
57027: LD_ADDR_EXP 37
57031: PUSH
57032: LD_EXP 37
57036: PPUSH
57037: CALL 54006 0 1
57041: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
57042: LD_STRING setGameSaveCounter(
57044: PUSH
57045: LD_EXP 37
57049: STR
57050: PUSH
57051: LD_STRING )
57053: STR
57054: PPUSH
57055: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
57059: LD_STRING setGameDifficulty(
57061: PUSH
57062: LD_OWVAR 67
57066: STR
57067: PUSH
57068: LD_STRING )
57070: STR
57071: PPUSH
57072: CALL_OW 559
// end ;
57076: LD_VAR 0 1
57080: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57081: LD_INT 0
57083: PPUSH
// if p2 = stream_mode then
57084: LD_VAR 0 2
57088: PUSH
57089: LD_INT 100
57091: EQUAL
57092: IFFALSE 58095
// begin if not StreamModeActive then
57094: LD_EXP 38
57098: NOT
57099: IFFALSE 57109
// StreamModeActive := true ;
57101: LD_ADDR_EXP 38
57105: PUSH
57106: LD_INT 1
57108: ST_TO_ADDR
// if p3 = 0 then
57109: LD_VAR 0 3
57113: PUSH
57114: LD_INT 0
57116: EQUAL
57117: IFFALSE 57123
// InitStreamMode ;
57119: CALL 58299 0 0
// if p3 = 1 then
57123: LD_VAR 0 3
57127: PUSH
57128: LD_INT 1
57130: EQUAL
57131: IFFALSE 57141
// sRocket := true ;
57133: LD_ADDR_EXP 43
57137: PUSH
57138: LD_INT 1
57140: ST_TO_ADDR
// if p3 = 2 then
57141: LD_VAR 0 3
57145: PUSH
57146: LD_INT 2
57148: EQUAL
57149: IFFALSE 57159
// sSpeed := true ;
57151: LD_ADDR_EXP 42
57155: PUSH
57156: LD_INT 1
57158: ST_TO_ADDR
// if p3 = 3 then
57159: LD_VAR 0 3
57163: PUSH
57164: LD_INT 3
57166: EQUAL
57167: IFFALSE 57177
// sEngine := true ;
57169: LD_ADDR_EXP 44
57173: PUSH
57174: LD_INT 1
57176: ST_TO_ADDR
// if p3 = 4 then
57177: LD_VAR 0 3
57181: PUSH
57182: LD_INT 4
57184: EQUAL
57185: IFFALSE 57195
// sSpec := true ;
57187: LD_ADDR_EXP 41
57191: PUSH
57192: LD_INT 1
57194: ST_TO_ADDR
// if p3 = 5 then
57195: LD_VAR 0 3
57199: PUSH
57200: LD_INT 5
57202: EQUAL
57203: IFFALSE 57213
// sLevel := true ;
57205: LD_ADDR_EXP 45
57209: PUSH
57210: LD_INT 1
57212: ST_TO_ADDR
// if p3 = 6 then
57213: LD_VAR 0 3
57217: PUSH
57218: LD_INT 6
57220: EQUAL
57221: IFFALSE 57231
// sArmoury := true ;
57223: LD_ADDR_EXP 46
57227: PUSH
57228: LD_INT 1
57230: ST_TO_ADDR
// if p3 = 7 then
57231: LD_VAR 0 3
57235: PUSH
57236: LD_INT 7
57238: EQUAL
57239: IFFALSE 57249
// sRadar := true ;
57241: LD_ADDR_EXP 47
57245: PUSH
57246: LD_INT 1
57248: ST_TO_ADDR
// if p3 = 8 then
57249: LD_VAR 0 3
57253: PUSH
57254: LD_INT 8
57256: EQUAL
57257: IFFALSE 57267
// sBunker := true ;
57259: LD_ADDR_EXP 48
57263: PUSH
57264: LD_INT 1
57266: ST_TO_ADDR
// if p3 = 9 then
57267: LD_VAR 0 3
57271: PUSH
57272: LD_INT 9
57274: EQUAL
57275: IFFALSE 57285
// sHack := true ;
57277: LD_ADDR_EXP 49
57281: PUSH
57282: LD_INT 1
57284: ST_TO_ADDR
// if p3 = 10 then
57285: LD_VAR 0 3
57289: PUSH
57290: LD_INT 10
57292: EQUAL
57293: IFFALSE 57303
// sFire := true ;
57295: LD_ADDR_EXP 50
57299: PUSH
57300: LD_INT 1
57302: ST_TO_ADDR
// if p3 = 11 then
57303: LD_VAR 0 3
57307: PUSH
57308: LD_INT 11
57310: EQUAL
57311: IFFALSE 57321
// sRefresh := true ;
57313: LD_ADDR_EXP 51
57317: PUSH
57318: LD_INT 1
57320: ST_TO_ADDR
// if p3 = 12 then
57321: LD_VAR 0 3
57325: PUSH
57326: LD_INT 12
57328: EQUAL
57329: IFFALSE 57339
// sExp := true ;
57331: LD_ADDR_EXP 52
57335: PUSH
57336: LD_INT 1
57338: ST_TO_ADDR
// if p3 = 13 then
57339: LD_VAR 0 3
57343: PUSH
57344: LD_INT 13
57346: EQUAL
57347: IFFALSE 57357
// sDepot := true ;
57349: LD_ADDR_EXP 53
57353: PUSH
57354: LD_INT 1
57356: ST_TO_ADDR
// if p3 = 14 then
57357: LD_VAR 0 3
57361: PUSH
57362: LD_INT 14
57364: EQUAL
57365: IFFALSE 57375
// sFlag := true ;
57367: LD_ADDR_EXP 54
57371: PUSH
57372: LD_INT 1
57374: ST_TO_ADDR
// if p3 = 15 then
57375: LD_VAR 0 3
57379: PUSH
57380: LD_INT 15
57382: EQUAL
57383: IFFALSE 57393
// sKamikadze := true ;
57385: LD_ADDR_EXP 62
57389: PUSH
57390: LD_INT 1
57392: ST_TO_ADDR
// if p3 = 16 then
57393: LD_VAR 0 3
57397: PUSH
57398: LD_INT 16
57400: EQUAL
57401: IFFALSE 57411
// sTroll := true ;
57403: LD_ADDR_EXP 63
57407: PUSH
57408: LD_INT 1
57410: ST_TO_ADDR
// if p3 = 17 then
57411: LD_VAR 0 3
57415: PUSH
57416: LD_INT 17
57418: EQUAL
57419: IFFALSE 57429
// sSlow := true ;
57421: LD_ADDR_EXP 64
57425: PUSH
57426: LD_INT 1
57428: ST_TO_ADDR
// if p3 = 18 then
57429: LD_VAR 0 3
57433: PUSH
57434: LD_INT 18
57436: EQUAL
57437: IFFALSE 57447
// sLack := true ;
57439: LD_ADDR_EXP 65
57443: PUSH
57444: LD_INT 1
57446: ST_TO_ADDR
// if p3 = 19 then
57447: LD_VAR 0 3
57451: PUSH
57452: LD_INT 19
57454: EQUAL
57455: IFFALSE 57465
// sTank := true ;
57457: LD_ADDR_EXP 67
57461: PUSH
57462: LD_INT 1
57464: ST_TO_ADDR
// if p3 = 20 then
57465: LD_VAR 0 3
57469: PUSH
57470: LD_INT 20
57472: EQUAL
57473: IFFALSE 57483
// sRemote := true ;
57475: LD_ADDR_EXP 68
57479: PUSH
57480: LD_INT 1
57482: ST_TO_ADDR
// if p3 = 21 then
57483: LD_VAR 0 3
57487: PUSH
57488: LD_INT 21
57490: EQUAL
57491: IFFALSE 57501
// sPowell := true ;
57493: LD_ADDR_EXP 69
57497: PUSH
57498: LD_INT 1
57500: ST_TO_ADDR
// if p3 = 22 then
57501: LD_VAR 0 3
57505: PUSH
57506: LD_INT 22
57508: EQUAL
57509: IFFALSE 57519
// sTeleport := true ;
57511: LD_ADDR_EXP 72
57515: PUSH
57516: LD_INT 1
57518: ST_TO_ADDR
// if p3 = 23 then
57519: LD_VAR 0 3
57523: PUSH
57524: LD_INT 23
57526: EQUAL
57527: IFFALSE 57537
// sOilTower := true ;
57529: LD_ADDR_EXP 74
57533: PUSH
57534: LD_INT 1
57536: ST_TO_ADDR
// if p3 = 24 then
57537: LD_VAR 0 3
57541: PUSH
57542: LD_INT 24
57544: EQUAL
57545: IFFALSE 57555
// sShovel := true ;
57547: LD_ADDR_EXP 75
57551: PUSH
57552: LD_INT 1
57554: ST_TO_ADDR
// if p3 = 25 then
57555: LD_VAR 0 3
57559: PUSH
57560: LD_INT 25
57562: EQUAL
57563: IFFALSE 57573
// sSheik := true ;
57565: LD_ADDR_EXP 76
57569: PUSH
57570: LD_INT 1
57572: ST_TO_ADDR
// if p3 = 26 then
57573: LD_VAR 0 3
57577: PUSH
57578: LD_INT 26
57580: EQUAL
57581: IFFALSE 57591
// sEarthquake := true ;
57583: LD_ADDR_EXP 78
57587: PUSH
57588: LD_INT 1
57590: ST_TO_ADDR
// if p3 = 27 then
57591: LD_VAR 0 3
57595: PUSH
57596: LD_INT 27
57598: EQUAL
57599: IFFALSE 57609
// sAI := true ;
57601: LD_ADDR_EXP 79
57605: PUSH
57606: LD_INT 1
57608: ST_TO_ADDR
// if p3 = 28 then
57609: LD_VAR 0 3
57613: PUSH
57614: LD_INT 28
57616: EQUAL
57617: IFFALSE 57627
// sCargo := true ;
57619: LD_ADDR_EXP 82
57623: PUSH
57624: LD_INT 1
57626: ST_TO_ADDR
// if p3 = 29 then
57627: LD_VAR 0 3
57631: PUSH
57632: LD_INT 29
57634: EQUAL
57635: IFFALSE 57645
// sDLaser := true ;
57637: LD_ADDR_EXP 83
57641: PUSH
57642: LD_INT 1
57644: ST_TO_ADDR
// if p3 = 30 then
57645: LD_VAR 0 3
57649: PUSH
57650: LD_INT 30
57652: EQUAL
57653: IFFALSE 57663
// sExchange := true ;
57655: LD_ADDR_EXP 84
57659: PUSH
57660: LD_INT 1
57662: ST_TO_ADDR
// if p3 = 31 then
57663: LD_VAR 0 3
57667: PUSH
57668: LD_INT 31
57670: EQUAL
57671: IFFALSE 57681
// sFac := true ;
57673: LD_ADDR_EXP 85
57677: PUSH
57678: LD_INT 1
57680: ST_TO_ADDR
// if p3 = 32 then
57681: LD_VAR 0 3
57685: PUSH
57686: LD_INT 32
57688: EQUAL
57689: IFFALSE 57699
// sPower := true ;
57691: LD_ADDR_EXP 86
57695: PUSH
57696: LD_INT 1
57698: ST_TO_ADDR
// if p3 = 33 then
57699: LD_VAR 0 3
57703: PUSH
57704: LD_INT 33
57706: EQUAL
57707: IFFALSE 57717
// sRandom := true ;
57709: LD_ADDR_EXP 87
57713: PUSH
57714: LD_INT 1
57716: ST_TO_ADDR
// if p3 = 34 then
57717: LD_VAR 0 3
57721: PUSH
57722: LD_INT 34
57724: EQUAL
57725: IFFALSE 57735
// sShield := true ;
57727: LD_ADDR_EXP 88
57731: PUSH
57732: LD_INT 1
57734: ST_TO_ADDR
// if p3 = 35 then
57735: LD_VAR 0 3
57739: PUSH
57740: LD_INT 35
57742: EQUAL
57743: IFFALSE 57753
// sTime := true ;
57745: LD_ADDR_EXP 89
57749: PUSH
57750: LD_INT 1
57752: ST_TO_ADDR
// if p3 = 36 then
57753: LD_VAR 0 3
57757: PUSH
57758: LD_INT 36
57760: EQUAL
57761: IFFALSE 57771
// sTools := true ;
57763: LD_ADDR_EXP 90
57767: PUSH
57768: LD_INT 1
57770: ST_TO_ADDR
// if p3 = 101 then
57771: LD_VAR 0 3
57775: PUSH
57776: LD_INT 101
57778: EQUAL
57779: IFFALSE 57789
// sSold := true ;
57781: LD_ADDR_EXP 55
57785: PUSH
57786: LD_INT 1
57788: ST_TO_ADDR
// if p3 = 102 then
57789: LD_VAR 0 3
57793: PUSH
57794: LD_INT 102
57796: EQUAL
57797: IFFALSE 57807
// sDiff := true ;
57799: LD_ADDR_EXP 56
57803: PUSH
57804: LD_INT 1
57806: ST_TO_ADDR
// if p3 = 103 then
57807: LD_VAR 0 3
57811: PUSH
57812: LD_INT 103
57814: EQUAL
57815: IFFALSE 57825
// sFog := true ;
57817: LD_ADDR_EXP 59
57821: PUSH
57822: LD_INT 1
57824: ST_TO_ADDR
// if p3 = 104 then
57825: LD_VAR 0 3
57829: PUSH
57830: LD_INT 104
57832: EQUAL
57833: IFFALSE 57843
// sReset := true ;
57835: LD_ADDR_EXP 60
57839: PUSH
57840: LD_INT 1
57842: ST_TO_ADDR
// if p3 = 105 then
57843: LD_VAR 0 3
57847: PUSH
57848: LD_INT 105
57850: EQUAL
57851: IFFALSE 57861
// sSun := true ;
57853: LD_ADDR_EXP 61
57857: PUSH
57858: LD_INT 1
57860: ST_TO_ADDR
// if p3 = 106 then
57861: LD_VAR 0 3
57865: PUSH
57866: LD_INT 106
57868: EQUAL
57869: IFFALSE 57879
// sTiger := true ;
57871: LD_ADDR_EXP 57
57875: PUSH
57876: LD_INT 1
57878: ST_TO_ADDR
// if p3 = 107 then
57879: LD_VAR 0 3
57883: PUSH
57884: LD_INT 107
57886: EQUAL
57887: IFFALSE 57897
// sBomb := true ;
57889: LD_ADDR_EXP 58
57893: PUSH
57894: LD_INT 1
57896: ST_TO_ADDR
// if p3 = 108 then
57897: LD_VAR 0 3
57901: PUSH
57902: LD_INT 108
57904: EQUAL
57905: IFFALSE 57915
// sWound := true ;
57907: LD_ADDR_EXP 66
57911: PUSH
57912: LD_INT 1
57914: ST_TO_ADDR
// if p3 = 109 then
57915: LD_VAR 0 3
57919: PUSH
57920: LD_INT 109
57922: EQUAL
57923: IFFALSE 57933
// sBetray := true ;
57925: LD_ADDR_EXP 70
57929: PUSH
57930: LD_INT 1
57932: ST_TO_ADDR
// if p3 = 110 then
57933: LD_VAR 0 3
57937: PUSH
57938: LD_INT 110
57940: EQUAL
57941: IFFALSE 57951
// sContamin := true ;
57943: LD_ADDR_EXP 71
57947: PUSH
57948: LD_INT 1
57950: ST_TO_ADDR
// if p3 = 111 then
57951: LD_VAR 0 3
57955: PUSH
57956: LD_INT 111
57958: EQUAL
57959: IFFALSE 57969
// sOil := true ;
57961: LD_ADDR_EXP 73
57965: PUSH
57966: LD_INT 1
57968: ST_TO_ADDR
// if p3 = 112 then
57969: LD_VAR 0 3
57973: PUSH
57974: LD_INT 112
57976: EQUAL
57977: IFFALSE 57987
// sStu := true ;
57979: LD_ADDR_EXP 77
57983: PUSH
57984: LD_INT 1
57986: ST_TO_ADDR
// if p3 = 113 then
57987: LD_VAR 0 3
57991: PUSH
57992: LD_INT 113
57994: EQUAL
57995: IFFALSE 58005
// sBazooka := true ;
57997: LD_ADDR_EXP 80
58001: PUSH
58002: LD_INT 1
58004: ST_TO_ADDR
// if p3 = 114 then
58005: LD_VAR 0 3
58009: PUSH
58010: LD_INT 114
58012: EQUAL
58013: IFFALSE 58023
// sMortar := true ;
58015: LD_ADDR_EXP 81
58019: PUSH
58020: LD_INT 1
58022: ST_TO_ADDR
// if p3 = 115 then
58023: LD_VAR 0 3
58027: PUSH
58028: LD_INT 115
58030: EQUAL
58031: IFFALSE 58041
// sRanger := true ;
58033: LD_ADDR_EXP 91
58037: PUSH
58038: LD_INT 1
58040: ST_TO_ADDR
// if p3 = 116 then
58041: LD_VAR 0 3
58045: PUSH
58046: LD_INT 116
58048: EQUAL
58049: IFFALSE 58059
// sComputer := true ;
58051: LD_ADDR_EXP 92
58055: PUSH
58056: LD_INT 1
58058: ST_TO_ADDR
// if p3 = 117 then
58059: LD_VAR 0 3
58063: PUSH
58064: LD_INT 117
58066: EQUAL
58067: IFFALSE 58077
// s30 := true ;
58069: LD_ADDR_EXP 93
58073: PUSH
58074: LD_INT 1
58076: ST_TO_ADDR
// if p3 = 118 then
58077: LD_VAR 0 3
58081: PUSH
58082: LD_INT 118
58084: EQUAL
58085: IFFALSE 58095
// s60 := true ;
58087: LD_ADDR_EXP 94
58091: PUSH
58092: LD_INT 1
58094: ST_TO_ADDR
// end ; if p2 = hack_mode then
58095: LD_VAR 0 2
58099: PUSH
58100: LD_INT 101
58102: EQUAL
58103: IFFALSE 58231
// begin case p3 of 1 :
58105: LD_VAR 0 3
58109: PUSH
58110: LD_INT 1
58112: DOUBLE
58113: EQUAL
58114: IFTRUE 58118
58116: GO 58125
58118: POP
// hHackUnlimitedResources ; 2 :
58119: CALL 70378 0 0
58123: GO 58231
58125: LD_INT 2
58127: DOUBLE
58128: EQUAL
58129: IFTRUE 58133
58131: GO 58140
58133: POP
// hHackSetLevel10 ; 3 :
58134: CALL 70511 0 0
58138: GO 58231
58140: LD_INT 3
58142: DOUBLE
58143: EQUAL
58144: IFTRUE 58148
58146: GO 58155
58148: POP
// hHackSetLevel10YourUnits ; 4 :
58149: CALL 70596 0 0
58153: GO 58231
58155: LD_INT 4
58157: DOUBLE
58158: EQUAL
58159: IFTRUE 58163
58161: GO 58170
58163: POP
// hHackInvincible ; 5 :
58164: CALL 71044 0 0
58168: GO 58231
58170: LD_INT 5
58172: DOUBLE
58173: EQUAL
58174: IFTRUE 58178
58176: GO 58185
58178: POP
// hHackInvisible ; 6 :
58179: CALL 71155 0 0
58183: GO 58231
58185: LD_INT 6
58187: DOUBLE
58188: EQUAL
58189: IFTRUE 58193
58191: GO 58200
58193: POP
// hHackChangeYourSide ; 7 :
58194: CALL 71212 0 0
58198: GO 58231
58200: LD_INT 7
58202: DOUBLE
58203: EQUAL
58204: IFTRUE 58208
58206: GO 58215
58208: POP
// hHackChangeUnitSide ; 8 :
58209: CALL 71254 0 0
58213: GO 58231
58215: LD_INT 8
58217: DOUBLE
58218: EQUAL
58219: IFTRUE 58223
58221: GO 58230
58223: POP
// hHackFog ; end ;
58224: CALL 71355 0 0
58228: GO 58231
58230: POP
// end ; if p2 = game_save_mode then
58231: LD_VAR 0 2
58235: PUSH
58236: LD_INT 102
58238: EQUAL
58239: IFFALSE 58294
// begin if p3 = 1 then
58241: LD_VAR 0 3
58245: PUSH
58246: LD_INT 1
58248: EQUAL
58249: IFFALSE 58261
// globalGameSaveCounter := p4 ;
58251: LD_ADDR_EXP 37
58255: PUSH
58256: LD_VAR 0 4
58260: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
58261: LD_VAR 0 3
58265: PUSH
58266: LD_INT 2
58268: EQUAL
58269: PUSH
58270: LD_EXP 37
58274: AND
58275: IFFALSE 58294
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58277: LD_STRING setGameSaveCounter(
58279: PUSH
58280: LD_EXP 37
58284: STR
58285: PUSH
58286: LD_STRING )
58288: STR
58289: PPUSH
58290: CALL_OW 559
// end ; end ;
58294: LD_VAR 0 7
58298: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
58299: LD_INT 0
58301: PPUSH
// streamModeActive := false ;
58302: LD_ADDR_EXP 38
58306: PUSH
58307: LD_INT 0
58309: ST_TO_ADDR
// normalCounter := 36 ;
58310: LD_ADDR_EXP 39
58314: PUSH
58315: LD_INT 36
58317: ST_TO_ADDR
// hardcoreCounter := 18 ;
58318: LD_ADDR_EXP 40
58322: PUSH
58323: LD_INT 18
58325: ST_TO_ADDR
// sRocket := false ;
58326: LD_ADDR_EXP 43
58330: PUSH
58331: LD_INT 0
58333: ST_TO_ADDR
// sSpeed := false ;
58334: LD_ADDR_EXP 42
58338: PUSH
58339: LD_INT 0
58341: ST_TO_ADDR
// sEngine := false ;
58342: LD_ADDR_EXP 44
58346: PUSH
58347: LD_INT 0
58349: ST_TO_ADDR
// sSpec := false ;
58350: LD_ADDR_EXP 41
58354: PUSH
58355: LD_INT 0
58357: ST_TO_ADDR
// sLevel := false ;
58358: LD_ADDR_EXP 45
58362: PUSH
58363: LD_INT 0
58365: ST_TO_ADDR
// sArmoury := false ;
58366: LD_ADDR_EXP 46
58370: PUSH
58371: LD_INT 0
58373: ST_TO_ADDR
// sRadar := false ;
58374: LD_ADDR_EXP 47
58378: PUSH
58379: LD_INT 0
58381: ST_TO_ADDR
// sBunker := false ;
58382: LD_ADDR_EXP 48
58386: PUSH
58387: LD_INT 0
58389: ST_TO_ADDR
// sHack := false ;
58390: LD_ADDR_EXP 49
58394: PUSH
58395: LD_INT 0
58397: ST_TO_ADDR
// sFire := false ;
58398: LD_ADDR_EXP 50
58402: PUSH
58403: LD_INT 0
58405: ST_TO_ADDR
// sRefresh := false ;
58406: LD_ADDR_EXP 51
58410: PUSH
58411: LD_INT 0
58413: ST_TO_ADDR
// sExp := false ;
58414: LD_ADDR_EXP 52
58418: PUSH
58419: LD_INT 0
58421: ST_TO_ADDR
// sDepot := false ;
58422: LD_ADDR_EXP 53
58426: PUSH
58427: LD_INT 0
58429: ST_TO_ADDR
// sFlag := false ;
58430: LD_ADDR_EXP 54
58434: PUSH
58435: LD_INT 0
58437: ST_TO_ADDR
// sKamikadze := false ;
58438: LD_ADDR_EXP 62
58442: PUSH
58443: LD_INT 0
58445: ST_TO_ADDR
// sTroll := false ;
58446: LD_ADDR_EXP 63
58450: PUSH
58451: LD_INT 0
58453: ST_TO_ADDR
// sSlow := false ;
58454: LD_ADDR_EXP 64
58458: PUSH
58459: LD_INT 0
58461: ST_TO_ADDR
// sLack := false ;
58462: LD_ADDR_EXP 65
58466: PUSH
58467: LD_INT 0
58469: ST_TO_ADDR
// sTank := false ;
58470: LD_ADDR_EXP 67
58474: PUSH
58475: LD_INT 0
58477: ST_TO_ADDR
// sRemote := false ;
58478: LD_ADDR_EXP 68
58482: PUSH
58483: LD_INT 0
58485: ST_TO_ADDR
// sPowell := false ;
58486: LD_ADDR_EXP 69
58490: PUSH
58491: LD_INT 0
58493: ST_TO_ADDR
// sTeleport := false ;
58494: LD_ADDR_EXP 72
58498: PUSH
58499: LD_INT 0
58501: ST_TO_ADDR
// sOilTower := false ;
58502: LD_ADDR_EXP 74
58506: PUSH
58507: LD_INT 0
58509: ST_TO_ADDR
// sShovel := false ;
58510: LD_ADDR_EXP 75
58514: PUSH
58515: LD_INT 0
58517: ST_TO_ADDR
// sSheik := false ;
58518: LD_ADDR_EXP 76
58522: PUSH
58523: LD_INT 0
58525: ST_TO_ADDR
// sEarthquake := false ;
58526: LD_ADDR_EXP 78
58530: PUSH
58531: LD_INT 0
58533: ST_TO_ADDR
// sAI := false ;
58534: LD_ADDR_EXP 79
58538: PUSH
58539: LD_INT 0
58541: ST_TO_ADDR
// sCargo := false ;
58542: LD_ADDR_EXP 82
58546: PUSH
58547: LD_INT 0
58549: ST_TO_ADDR
// sDLaser := false ;
58550: LD_ADDR_EXP 83
58554: PUSH
58555: LD_INT 0
58557: ST_TO_ADDR
// sExchange := false ;
58558: LD_ADDR_EXP 84
58562: PUSH
58563: LD_INT 0
58565: ST_TO_ADDR
// sFac := false ;
58566: LD_ADDR_EXP 85
58570: PUSH
58571: LD_INT 0
58573: ST_TO_ADDR
// sPower := false ;
58574: LD_ADDR_EXP 86
58578: PUSH
58579: LD_INT 0
58581: ST_TO_ADDR
// sRandom := false ;
58582: LD_ADDR_EXP 87
58586: PUSH
58587: LD_INT 0
58589: ST_TO_ADDR
// sShield := false ;
58590: LD_ADDR_EXP 88
58594: PUSH
58595: LD_INT 0
58597: ST_TO_ADDR
// sTime := false ;
58598: LD_ADDR_EXP 89
58602: PUSH
58603: LD_INT 0
58605: ST_TO_ADDR
// sTools := false ;
58606: LD_ADDR_EXP 90
58610: PUSH
58611: LD_INT 0
58613: ST_TO_ADDR
// sSold := false ;
58614: LD_ADDR_EXP 55
58618: PUSH
58619: LD_INT 0
58621: ST_TO_ADDR
// sDiff := false ;
58622: LD_ADDR_EXP 56
58626: PUSH
58627: LD_INT 0
58629: ST_TO_ADDR
// sFog := false ;
58630: LD_ADDR_EXP 59
58634: PUSH
58635: LD_INT 0
58637: ST_TO_ADDR
// sReset := false ;
58638: LD_ADDR_EXP 60
58642: PUSH
58643: LD_INT 0
58645: ST_TO_ADDR
// sSun := false ;
58646: LD_ADDR_EXP 61
58650: PUSH
58651: LD_INT 0
58653: ST_TO_ADDR
// sTiger := false ;
58654: LD_ADDR_EXP 57
58658: PUSH
58659: LD_INT 0
58661: ST_TO_ADDR
// sBomb := false ;
58662: LD_ADDR_EXP 58
58666: PUSH
58667: LD_INT 0
58669: ST_TO_ADDR
// sWound := false ;
58670: LD_ADDR_EXP 66
58674: PUSH
58675: LD_INT 0
58677: ST_TO_ADDR
// sBetray := false ;
58678: LD_ADDR_EXP 70
58682: PUSH
58683: LD_INT 0
58685: ST_TO_ADDR
// sContamin := false ;
58686: LD_ADDR_EXP 71
58690: PUSH
58691: LD_INT 0
58693: ST_TO_ADDR
// sOil := false ;
58694: LD_ADDR_EXP 73
58698: PUSH
58699: LD_INT 0
58701: ST_TO_ADDR
// sStu := false ;
58702: LD_ADDR_EXP 77
58706: PUSH
58707: LD_INT 0
58709: ST_TO_ADDR
// sBazooka := false ;
58710: LD_ADDR_EXP 80
58714: PUSH
58715: LD_INT 0
58717: ST_TO_ADDR
// sMortar := false ;
58718: LD_ADDR_EXP 81
58722: PUSH
58723: LD_INT 0
58725: ST_TO_ADDR
// sRanger := false ;
58726: LD_ADDR_EXP 91
58730: PUSH
58731: LD_INT 0
58733: ST_TO_ADDR
// sComputer := false ;
58734: LD_ADDR_EXP 92
58738: PUSH
58739: LD_INT 0
58741: ST_TO_ADDR
// s30 := false ;
58742: LD_ADDR_EXP 93
58746: PUSH
58747: LD_INT 0
58749: ST_TO_ADDR
// s60 := false ;
58750: LD_ADDR_EXP 94
58754: PUSH
58755: LD_INT 0
58757: ST_TO_ADDR
// end ;
58758: LD_VAR 0 1
58762: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
58763: LD_INT 0
58765: PPUSH
58766: PPUSH
58767: PPUSH
58768: PPUSH
58769: PPUSH
58770: PPUSH
58771: PPUSH
// result := [ ] ;
58772: LD_ADDR_VAR 0 2
58776: PUSH
58777: EMPTY
58778: ST_TO_ADDR
// if campaign_id = 1 then
58779: LD_OWVAR 69
58783: PUSH
58784: LD_INT 1
58786: EQUAL
58787: IFFALSE 61953
// begin case mission_number of 1 :
58789: LD_OWVAR 70
58793: PUSH
58794: LD_INT 1
58796: DOUBLE
58797: EQUAL
58798: IFTRUE 58802
58800: GO 58878
58802: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
58803: LD_ADDR_VAR 0 2
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 4
58813: PUSH
58814: LD_INT 11
58816: PUSH
58817: LD_INT 12
58819: PUSH
58820: LD_INT 15
58822: PUSH
58823: LD_INT 16
58825: PUSH
58826: LD_INT 22
58828: PUSH
58829: LD_INT 23
58831: PUSH
58832: LD_INT 26
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 101
58848: PUSH
58849: LD_INT 102
58851: PUSH
58852: LD_INT 106
58854: PUSH
58855: LD_INT 116
58857: PUSH
58858: LD_INT 117
58860: PUSH
58861: LD_INT 118
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: ST_TO_ADDR
58876: GO 61951
58878: LD_INT 2
58880: DOUBLE
58881: EQUAL
58882: IFTRUE 58886
58884: GO 58970
58886: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
58887: LD_ADDR_VAR 0 2
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: LD_INT 4
58897: PUSH
58898: LD_INT 11
58900: PUSH
58901: LD_INT 12
58903: PUSH
58904: LD_INT 15
58906: PUSH
58907: LD_INT 16
58909: PUSH
58910: LD_INT 22
58912: PUSH
58913: LD_INT 23
58915: PUSH
58916: LD_INT 26
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 101
58932: PUSH
58933: LD_INT 102
58935: PUSH
58936: LD_INT 105
58938: PUSH
58939: LD_INT 106
58941: PUSH
58942: LD_INT 108
58944: PUSH
58945: LD_INT 116
58947: PUSH
58948: LD_INT 117
58950: PUSH
58951: LD_INT 118
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: ST_TO_ADDR
58968: GO 61951
58970: LD_INT 3
58972: DOUBLE
58973: EQUAL
58974: IFTRUE 58978
58976: GO 59066
58978: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
58979: LD_ADDR_VAR 0 2
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: LD_INT 4
58989: PUSH
58990: LD_INT 5
58992: PUSH
58993: LD_INT 11
58995: PUSH
58996: LD_INT 12
58998: PUSH
58999: LD_INT 15
59001: PUSH
59002: LD_INT 16
59004: PUSH
59005: LD_INT 22
59007: PUSH
59008: LD_INT 26
59010: PUSH
59011: LD_INT 36
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 101
59028: PUSH
59029: LD_INT 102
59031: PUSH
59032: LD_INT 105
59034: PUSH
59035: LD_INT 106
59037: PUSH
59038: LD_INT 108
59040: PUSH
59041: LD_INT 116
59043: PUSH
59044: LD_INT 117
59046: PUSH
59047: LD_INT 118
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: ST_TO_ADDR
59064: GO 61951
59066: LD_INT 4
59068: DOUBLE
59069: EQUAL
59070: IFTRUE 59074
59072: GO 59170
59074: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
59075: LD_ADDR_VAR 0 2
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: LD_INT 4
59085: PUSH
59086: LD_INT 5
59088: PUSH
59089: LD_INT 8
59091: PUSH
59092: LD_INT 11
59094: PUSH
59095: LD_INT 12
59097: PUSH
59098: LD_INT 15
59100: PUSH
59101: LD_INT 16
59103: PUSH
59104: LD_INT 22
59106: PUSH
59107: LD_INT 23
59109: PUSH
59110: LD_INT 26
59112: PUSH
59113: LD_INT 36
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 101
59132: PUSH
59133: LD_INT 102
59135: PUSH
59136: LD_INT 105
59138: PUSH
59139: LD_INT 106
59141: PUSH
59142: LD_INT 108
59144: PUSH
59145: LD_INT 116
59147: PUSH
59148: LD_INT 117
59150: PUSH
59151: LD_INT 118
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: ST_TO_ADDR
59168: GO 61951
59170: LD_INT 5
59172: DOUBLE
59173: EQUAL
59174: IFTRUE 59178
59176: GO 59290
59178: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
59179: LD_ADDR_VAR 0 2
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: LD_INT 4
59189: PUSH
59190: LD_INT 5
59192: PUSH
59193: LD_INT 6
59195: PUSH
59196: LD_INT 8
59198: PUSH
59199: LD_INT 11
59201: PUSH
59202: LD_INT 12
59204: PUSH
59205: LD_INT 15
59207: PUSH
59208: LD_INT 16
59210: PUSH
59211: LD_INT 22
59213: PUSH
59214: LD_INT 23
59216: PUSH
59217: LD_INT 25
59219: PUSH
59220: LD_INT 26
59222: PUSH
59223: LD_INT 36
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 101
59244: PUSH
59245: LD_INT 102
59247: PUSH
59248: LD_INT 105
59250: PUSH
59251: LD_INT 106
59253: PUSH
59254: LD_INT 108
59256: PUSH
59257: LD_INT 109
59259: PUSH
59260: LD_INT 112
59262: PUSH
59263: LD_INT 116
59265: PUSH
59266: LD_INT 117
59268: PUSH
59269: LD_INT 118
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: ST_TO_ADDR
59288: GO 61951
59290: LD_INT 6
59292: DOUBLE
59293: EQUAL
59294: IFTRUE 59298
59296: GO 59430
59298: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
59299: LD_ADDR_VAR 0 2
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: LD_INT 4
59309: PUSH
59310: LD_INT 5
59312: PUSH
59313: LD_INT 6
59315: PUSH
59316: LD_INT 8
59318: PUSH
59319: LD_INT 11
59321: PUSH
59322: LD_INT 12
59324: PUSH
59325: LD_INT 15
59327: PUSH
59328: LD_INT 16
59330: PUSH
59331: LD_INT 20
59333: PUSH
59334: LD_INT 21
59336: PUSH
59337: LD_INT 22
59339: PUSH
59340: LD_INT 23
59342: PUSH
59343: LD_INT 25
59345: PUSH
59346: LD_INT 26
59348: PUSH
59349: LD_INT 30
59351: PUSH
59352: LD_INT 31
59354: PUSH
59355: LD_INT 32
59357: PUSH
59358: LD_INT 36
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 101
59384: PUSH
59385: LD_INT 102
59387: PUSH
59388: LD_INT 105
59390: PUSH
59391: LD_INT 106
59393: PUSH
59394: LD_INT 108
59396: PUSH
59397: LD_INT 109
59399: PUSH
59400: LD_INT 112
59402: PUSH
59403: LD_INT 116
59405: PUSH
59406: LD_INT 117
59408: PUSH
59409: LD_INT 118
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: ST_TO_ADDR
59428: GO 61951
59430: LD_INT 7
59432: DOUBLE
59433: EQUAL
59434: IFTRUE 59438
59436: GO 59550
59438: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
59439: LD_ADDR_VAR 0 2
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: LD_INT 4
59449: PUSH
59450: LD_INT 5
59452: PUSH
59453: LD_INT 7
59455: PUSH
59456: LD_INT 11
59458: PUSH
59459: LD_INT 12
59461: PUSH
59462: LD_INT 15
59464: PUSH
59465: LD_INT 16
59467: PUSH
59468: LD_INT 20
59470: PUSH
59471: LD_INT 21
59473: PUSH
59474: LD_INT 22
59476: PUSH
59477: LD_INT 23
59479: PUSH
59480: LD_INT 25
59482: PUSH
59483: LD_INT 26
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 101
59504: PUSH
59505: LD_INT 102
59507: PUSH
59508: LD_INT 103
59510: PUSH
59511: LD_INT 105
59513: PUSH
59514: LD_INT 106
59516: PUSH
59517: LD_INT 108
59519: PUSH
59520: LD_INT 112
59522: PUSH
59523: LD_INT 116
59525: PUSH
59526: LD_INT 117
59528: PUSH
59529: LD_INT 118
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: ST_TO_ADDR
59548: GO 61951
59550: LD_INT 8
59552: DOUBLE
59553: EQUAL
59554: IFTRUE 59558
59556: GO 59698
59558: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
59559: LD_ADDR_VAR 0 2
59563: PUSH
59564: LD_INT 2
59566: PUSH
59567: LD_INT 4
59569: PUSH
59570: LD_INT 5
59572: PUSH
59573: LD_INT 6
59575: PUSH
59576: LD_INT 7
59578: PUSH
59579: LD_INT 8
59581: PUSH
59582: LD_INT 11
59584: PUSH
59585: LD_INT 12
59587: PUSH
59588: LD_INT 15
59590: PUSH
59591: LD_INT 16
59593: PUSH
59594: LD_INT 20
59596: PUSH
59597: LD_INT 21
59599: PUSH
59600: LD_INT 22
59602: PUSH
59603: LD_INT 23
59605: PUSH
59606: LD_INT 25
59608: PUSH
59609: LD_INT 26
59611: PUSH
59612: LD_INT 30
59614: PUSH
59615: LD_INT 31
59617: PUSH
59618: LD_INT 32
59620: PUSH
59621: LD_INT 36
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 101
59648: PUSH
59649: LD_INT 102
59651: PUSH
59652: LD_INT 103
59654: PUSH
59655: LD_INT 105
59657: PUSH
59658: LD_INT 106
59660: PUSH
59661: LD_INT 108
59663: PUSH
59664: LD_INT 109
59666: PUSH
59667: LD_INT 112
59669: PUSH
59670: LD_INT 116
59672: PUSH
59673: LD_INT 117
59675: PUSH
59676: LD_INT 118
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: ST_TO_ADDR
59696: GO 61951
59698: LD_INT 9
59700: DOUBLE
59701: EQUAL
59702: IFTRUE 59706
59704: GO 59854
59706: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
59707: LD_ADDR_VAR 0 2
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: LD_INT 4
59717: PUSH
59718: LD_INT 5
59720: PUSH
59721: LD_INT 6
59723: PUSH
59724: LD_INT 7
59726: PUSH
59727: LD_INT 8
59729: PUSH
59730: LD_INT 11
59732: PUSH
59733: LD_INT 12
59735: PUSH
59736: LD_INT 15
59738: PUSH
59739: LD_INT 16
59741: PUSH
59742: LD_INT 20
59744: PUSH
59745: LD_INT 21
59747: PUSH
59748: LD_INT 22
59750: PUSH
59751: LD_INT 23
59753: PUSH
59754: LD_INT 25
59756: PUSH
59757: LD_INT 26
59759: PUSH
59760: LD_INT 28
59762: PUSH
59763: LD_INT 30
59765: PUSH
59766: LD_INT 31
59768: PUSH
59769: LD_INT 32
59771: PUSH
59772: LD_INT 36
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 101
59800: PUSH
59801: LD_INT 102
59803: PUSH
59804: LD_INT 103
59806: PUSH
59807: LD_INT 105
59809: PUSH
59810: LD_INT 106
59812: PUSH
59813: LD_INT 108
59815: PUSH
59816: LD_INT 109
59818: PUSH
59819: LD_INT 112
59821: PUSH
59822: LD_INT 114
59824: PUSH
59825: LD_INT 116
59827: PUSH
59828: LD_INT 117
59830: PUSH
59831: LD_INT 118
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: ST_TO_ADDR
59852: GO 61951
59854: LD_INT 10
59856: DOUBLE
59857: EQUAL
59858: IFTRUE 59862
59860: GO 60058
59862: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
59863: LD_ADDR_VAR 0 2
59867: PUSH
59868: LD_INT 2
59870: PUSH
59871: LD_INT 4
59873: PUSH
59874: LD_INT 5
59876: PUSH
59877: LD_INT 6
59879: PUSH
59880: LD_INT 7
59882: PUSH
59883: LD_INT 8
59885: PUSH
59886: LD_INT 9
59888: PUSH
59889: LD_INT 10
59891: PUSH
59892: LD_INT 11
59894: PUSH
59895: LD_INT 12
59897: PUSH
59898: LD_INT 13
59900: PUSH
59901: LD_INT 14
59903: PUSH
59904: LD_INT 15
59906: PUSH
59907: LD_INT 16
59909: PUSH
59910: LD_INT 17
59912: PUSH
59913: LD_INT 18
59915: PUSH
59916: LD_INT 19
59918: PUSH
59919: LD_INT 20
59921: PUSH
59922: LD_INT 21
59924: PUSH
59925: LD_INT 22
59927: PUSH
59928: LD_INT 23
59930: PUSH
59931: LD_INT 24
59933: PUSH
59934: LD_INT 25
59936: PUSH
59937: LD_INT 26
59939: PUSH
59940: LD_INT 28
59942: PUSH
59943: LD_INT 30
59945: PUSH
59946: LD_INT 31
59948: PUSH
59949: LD_INT 32
59951: PUSH
59952: LD_INT 36
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 101
59988: PUSH
59989: LD_INT 102
59991: PUSH
59992: LD_INT 103
59994: PUSH
59995: LD_INT 104
59997: PUSH
59998: LD_INT 105
60000: PUSH
60001: LD_INT 106
60003: PUSH
60004: LD_INT 107
60006: PUSH
60007: LD_INT 108
60009: PUSH
60010: LD_INT 109
60012: PUSH
60013: LD_INT 110
60015: PUSH
60016: LD_INT 111
60018: PUSH
60019: LD_INT 112
60021: PUSH
60022: LD_INT 114
60024: PUSH
60025: LD_INT 116
60027: PUSH
60028: LD_INT 117
60030: PUSH
60031: LD_INT 118
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: ST_TO_ADDR
60056: GO 61951
60058: LD_INT 11
60060: DOUBLE
60061: EQUAL
60062: IFTRUE 60066
60064: GO 60270
60066: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
60067: LD_ADDR_VAR 0 2
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: LD_INT 3
60077: PUSH
60078: LD_INT 4
60080: PUSH
60081: LD_INT 5
60083: PUSH
60084: LD_INT 6
60086: PUSH
60087: LD_INT 7
60089: PUSH
60090: LD_INT 8
60092: PUSH
60093: LD_INT 9
60095: PUSH
60096: LD_INT 10
60098: PUSH
60099: LD_INT 11
60101: PUSH
60102: LD_INT 12
60104: PUSH
60105: LD_INT 13
60107: PUSH
60108: LD_INT 14
60110: PUSH
60111: LD_INT 15
60113: PUSH
60114: LD_INT 16
60116: PUSH
60117: LD_INT 17
60119: PUSH
60120: LD_INT 18
60122: PUSH
60123: LD_INT 19
60125: PUSH
60126: LD_INT 20
60128: PUSH
60129: LD_INT 21
60131: PUSH
60132: LD_INT 22
60134: PUSH
60135: LD_INT 23
60137: PUSH
60138: LD_INT 24
60140: PUSH
60141: LD_INT 25
60143: PUSH
60144: LD_INT 26
60146: PUSH
60147: LD_INT 28
60149: PUSH
60150: LD_INT 30
60152: PUSH
60153: LD_INT 31
60155: PUSH
60156: LD_INT 32
60158: PUSH
60159: LD_INT 34
60161: PUSH
60162: LD_INT 36
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 101
60200: PUSH
60201: LD_INT 102
60203: PUSH
60204: LD_INT 103
60206: PUSH
60207: LD_INT 104
60209: PUSH
60210: LD_INT 105
60212: PUSH
60213: LD_INT 106
60215: PUSH
60216: LD_INT 107
60218: PUSH
60219: LD_INT 108
60221: PUSH
60222: LD_INT 109
60224: PUSH
60225: LD_INT 110
60227: PUSH
60228: LD_INT 111
60230: PUSH
60231: LD_INT 112
60233: PUSH
60234: LD_INT 114
60236: PUSH
60237: LD_INT 116
60239: PUSH
60240: LD_INT 117
60242: PUSH
60243: LD_INT 118
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: ST_TO_ADDR
60268: GO 61951
60270: LD_INT 12
60272: DOUBLE
60273: EQUAL
60274: IFTRUE 60278
60276: GO 60498
60278: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
60279: LD_ADDR_VAR 0 2
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: LD_INT 3
60292: PUSH
60293: LD_INT 4
60295: PUSH
60296: LD_INT 5
60298: PUSH
60299: LD_INT 6
60301: PUSH
60302: LD_INT 7
60304: PUSH
60305: LD_INT 8
60307: PUSH
60308: LD_INT 9
60310: PUSH
60311: LD_INT 10
60313: PUSH
60314: LD_INT 11
60316: PUSH
60317: LD_INT 12
60319: PUSH
60320: LD_INT 13
60322: PUSH
60323: LD_INT 14
60325: PUSH
60326: LD_INT 15
60328: PUSH
60329: LD_INT 16
60331: PUSH
60332: LD_INT 17
60334: PUSH
60335: LD_INT 18
60337: PUSH
60338: LD_INT 19
60340: PUSH
60341: LD_INT 20
60343: PUSH
60344: LD_INT 21
60346: PUSH
60347: LD_INT 22
60349: PUSH
60350: LD_INT 23
60352: PUSH
60353: LD_INT 24
60355: PUSH
60356: LD_INT 25
60358: PUSH
60359: LD_INT 26
60361: PUSH
60362: LD_INT 27
60364: PUSH
60365: LD_INT 28
60367: PUSH
60368: LD_INT 30
60370: PUSH
60371: LD_INT 31
60373: PUSH
60374: LD_INT 32
60376: PUSH
60377: LD_INT 33
60379: PUSH
60380: LD_INT 34
60382: PUSH
60383: LD_INT 36
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 101
60424: PUSH
60425: LD_INT 102
60427: PUSH
60428: LD_INT 103
60430: PUSH
60431: LD_INT 104
60433: PUSH
60434: LD_INT 105
60436: PUSH
60437: LD_INT 106
60439: PUSH
60440: LD_INT 107
60442: PUSH
60443: LD_INT 108
60445: PUSH
60446: LD_INT 109
60448: PUSH
60449: LD_INT 110
60451: PUSH
60452: LD_INT 111
60454: PUSH
60455: LD_INT 112
60457: PUSH
60458: LD_INT 113
60460: PUSH
60461: LD_INT 114
60463: PUSH
60464: LD_INT 116
60466: PUSH
60467: LD_INT 117
60469: PUSH
60470: LD_INT 118
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: ST_TO_ADDR
60496: GO 61951
60498: LD_INT 13
60500: DOUBLE
60501: EQUAL
60502: IFTRUE 60506
60504: GO 60714
60506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
60507: LD_ADDR_VAR 0 2
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: LD_INT 3
60520: PUSH
60521: LD_INT 4
60523: PUSH
60524: LD_INT 5
60526: PUSH
60527: LD_INT 8
60529: PUSH
60530: LD_INT 9
60532: PUSH
60533: LD_INT 10
60535: PUSH
60536: LD_INT 11
60538: PUSH
60539: LD_INT 12
60541: PUSH
60542: LD_INT 14
60544: PUSH
60545: LD_INT 15
60547: PUSH
60548: LD_INT 16
60550: PUSH
60551: LD_INT 17
60553: PUSH
60554: LD_INT 18
60556: PUSH
60557: LD_INT 19
60559: PUSH
60560: LD_INT 20
60562: PUSH
60563: LD_INT 21
60565: PUSH
60566: LD_INT 22
60568: PUSH
60569: LD_INT 23
60571: PUSH
60572: LD_INT 24
60574: PUSH
60575: LD_INT 25
60577: PUSH
60578: LD_INT 26
60580: PUSH
60581: LD_INT 27
60583: PUSH
60584: LD_INT 28
60586: PUSH
60587: LD_INT 30
60589: PUSH
60590: LD_INT 31
60592: PUSH
60593: LD_INT 32
60595: PUSH
60596: LD_INT 33
60598: PUSH
60599: LD_INT 34
60601: PUSH
60602: LD_INT 36
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 101
60640: PUSH
60641: LD_INT 102
60643: PUSH
60644: LD_INT 103
60646: PUSH
60647: LD_INT 104
60649: PUSH
60650: LD_INT 105
60652: PUSH
60653: LD_INT 106
60655: PUSH
60656: LD_INT 107
60658: PUSH
60659: LD_INT 108
60661: PUSH
60662: LD_INT 109
60664: PUSH
60665: LD_INT 110
60667: PUSH
60668: LD_INT 111
60670: PUSH
60671: LD_INT 112
60673: PUSH
60674: LD_INT 113
60676: PUSH
60677: LD_INT 114
60679: PUSH
60680: LD_INT 116
60682: PUSH
60683: LD_INT 117
60685: PUSH
60686: LD_INT 118
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: ST_TO_ADDR
60712: GO 61951
60714: LD_INT 14
60716: DOUBLE
60717: EQUAL
60718: IFTRUE 60722
60720: GO 60946
60722: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
60723: LD_ADDR_VAR 0 2
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: LD_INT 4
60739: PUSH
60740: LD_INT 5
60742: PUSH
60743: LD_INT 6
60745: PUSH
60746: LD_INT 7
60748: PUSH
60749: LD_INT 8
60751: PUSH
60752: LD_INT 9
60754: PUSH
60755: LD_INT 10
60757: PUSH
60758: LD_INT 11
60760: PUSH
60761: LD_INT 12
60763: PUSH
60764: LD_INT 13
60766: PUSH
60767: LD_INT 14
60769: PUSH
60770: LD_INT 15
60772: PUSH
60773: LD_INT 16
60775: PUSH
60776: LD_INT 17
60778: PUSH
60779: LD_INT 18
60781: PUSH
60782: LD_INT 19
60784: PUSH
60785: LD_INT 20
60787: PUSH
60788: LD_INT 21
60790: PUSH
60791: LD_INT 22
60793: PUSH
60794: LD_INT 23
60796: PUSH
60797: LD_INT 24
60799: PUSH
60800: LD_INT 25
60802: PUSH
60803: LD_INT 26
60805: PUSH
60806: LD_INT 27
60808: PUSH
60809: LD_INT 28
60811: PUSH
60812: LD_INT 29
60814: PUSH
60815: LD_INT 30
60817: PUSH
60818: LD_INT 31
60820: PUSH
60821: LD_INT 32
60823: PUSH
60824: LD_INT 33
60826: PUSH
60827: LD_INT 34
60829: PUSH
60830: LD_INT 36
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 101
60872: PUSH
60873: LD_INT 102
60875: PUSH
60876: LD_INT 103
60878: PUSH
60879: LD_INT 104
60881: PUSH
60882: LD_INT 105
60884: PUSH
60885: LD_INT 106
60887: PUSH
60888: LD_INT 107
60890: PUSH
60891: LD_INT 108
60893: PUSH
60894: LD_INT 109
60896: PUSH
60897: LD_INT 110
60899: PUSH
60900: LD_INT 111
60902: PUSH
60903: LD_INT 112
60905: PUSH
60906: LD_INT 113
60908: PUSH
60909: LD_INT 114
60911: PUSH
60912: LD_INT 116
60914: PUSH
60915: LD_INT 117
60917: PUSH
60918: LD_INT 118
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: ST_TO_ADDR
60944: GO 61951
60946: LD_INT 15
60948: DOUBLE
60949: EQUAL
60950: IFTRUE 60954
60952: GO 61178
60954: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
60955: LD_ADDR_VAR 0 2
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 2
60965: PUSH
60966: LD_INT 3
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: LD_INT 5
60974: PUSH
60975: LD_INT 6
60977: PUSH
60978: LD_INT 7
60980: PUSH
60981: LD_INT 8
60983: PUSH
60984: LD_INT 9
60986: PUSH
60987: LD_INT 10
60989: PUSH
60990: LD_INT 11
60992: PUSH
60993: LD_INT 12
60995: PUSH
60996: LD_INT 13
60998: PUSH
60999: LD_INT 14
61001: PUSH
61002: LD_INT 15
61004: PUSH
61005: LD_INT 16
61007: PUSH
61008: LD_INT 17
61010: PUSH
61011: LD_INT 18
61013: PUSH
61014: LD_INT 19
61016: PUSH
61017: LD_INT 20
61019: PUSH
61020: LD_INT 21
61022: PUSH
61023: LD_INT 22
61025: PUSH
61026: LD_INT 23
61028: PUSH
61029: LD_INT 24
61031: PUSH
61032: LD_INT 25
61034: PUSH
61035: LD_INT 26
61037: PUSH
61038: LD_INT 27
61040: PUSH
61041: LD_INT 28
61043: PUSH
61044: LD_INT 29
61046: PUSH
61047: LD_INT 30
61049: PUSH
61050: LD_INT 31
61052: PUSH
61053: LD_INT 32
61055: PUSH
61056: LD_INT 33
61058: PUSH
61059: LD_INT 34
61061: PUSH
61062: LD_INT 36
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 101
61104: PUSH
61105: LD_INT 102
61107: PUSH
61108: LD_INT 103
61110: PUSH
61111: LD_INT 104
61113: PUSH
61114: LD_INT 105
61116: PUSH
61117: LD_INT 106
61119: PUSH
61120: LD_INT 107
61122: PUSH
61123: LD_INT 108
61125: PUSH
61126: LD_INT 109
61128: PUSH
61129: LD_INT 110
61131: PUSH
61132: LD_INT 111
61134: PUSH
61135: LD_INT 112
61137: PUSH
61138: LD_INT 113
61140: PUSH
61141: LD_INT 114
61143: PUSH
61144: LD_INT 116
61146: PUSH
61147: LD_INT 117
61149: PUSH
61150: LD_INT 118
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: ST_TO_ADDR
61176: GO 61951
61178: LD_INT 16
61180: DOUBLE
61181: EQUAL
61182: IFTRUE 61186
61184: GO 61322
61186: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
61187: LD_ADDR_VAR 0 2
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: LD_INT 4
61197: PUSH
61198: LD_INT 5
61200: PUSH
61201: LD_INT 7
61203: PUSH
61204: LD_INT 11
61206: PUSH
61207: LD_INT 12
61209: PUSH
61210: LD_INT 15
61212: PUSH
61213: LD_INT 16
61215: PUSH
61216: LD_INT 20
61218: PUSH
61219: LD_INT 21
61221: PUSH
61222: LD_INT 22
61224: PUSH
61225: LD_INT 23
61227: PUSH
61228: LD_INT 25
61230: PUSH
61231: LD_INT 26
61233: PUSH
61234: LD_INT 30
61236: PUSH
61237: LD_INT 31
61239: PUSH
61240: LD_INT 32
61242: PUSH
61243: LD_INT 33
61245: PUSH
61246: LD_INT 34
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 101
61272: PUSH
61273: LD_INT 102
61275: PUSH
61276: LD_INT 103
61278: PUSH
61279: LD_INT 106
61281: PUSH
61282: LD_INT 108
61284: PUSH
61285: LD_INT 112
61287: PUSH
61288: LD_INT 113
61290: PUSH
61291: LD_INT 114
61293: PUSH
61294: LD_INT 116
61296: PUSH
61297: LD_INT 117
61299: PUSH
61300: LD_INT 118
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: ST_TO_ADDR
61320: GO 61951
61322: LD_INT 17
61324: DOUBLE
61325: EQUAL
61326: IFTRUE 61330
61328: GO 61554
61330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
61331: LD_ADDR_VAR 0 2
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: LD_INT 2
61341: PUSH
61342: LD_INT 3
61344: PUSH
61345: LD_INT 4
61347: PUSH
61348: LD_INT 5
61350: PUSH
61351: LD_INT 6
61353: PUSH
61354: LD_INT 7
61356: PUSH
61357: LD_INT 8
61359: PUSH
61360: LD_INT 9
61362: PUSH
61363: LD_INT 10
61365: PUSH
61366: LD_INT 11
61368: PUSH
61369: LD_INT 12
61371: PUSH
61372: LD_INT 13
61374: PUSH
61375: LD_INT 14
61377: PUSH
61378: LD_INT 15
61380: PUSH
61381: LD_INT 16
61383: PUSH
61384: LD_INT 17
61386: PUSH
61387: LD_INT 18
61389: PUSH
61390: LD_INT 19
61392: PUSH
61393: LD_INT 20
61395: PUSH
61396: LD_INT 21
61398: PUSH
61399: LD_INT 22
61401: PUSH
61402: LD_INT 23
61404: PUSH
61405: LD_INT 24
61407: PUSH
61408: LD_INT 25
61410: PUSH
61411: LD_INT 26
61413: PUSH
61414: LD_INT 27
61416: PUSH
61417: LD_INT 28
61419: PUSH
61420: LD_INT 29
61422: PUSH
61423: LD_INT 30
61425: PUSH
61426: LD_INT 31
61428: PUSH
61429: LD_INT 32
61431: PUSH
61432: LD_INT 33
61434: PUSH
61435: LD_INT 34
61437: PUSH
61438: LD_INT 36
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 101
61480: PUSH
61481: LD_INT 102
61483: PUSH
61484: LD_INT 103
61486: PUSH
61487: LD_INT 104
61489: PUSH
61490: LD_INT 105
61492: PUSH
61493: LD_INT 106
61495: PUSH
61496: LD_INT 107
61498: PUSH
61499: LD_INT 108
61501: PUSH
61502: LD_INT 109
61504: PUSH
61505: LD_INT 110
61507: PUSH
61508: LD_INT 111
61510: PUSH
61511: LD_INT 112
61513: PUSH
61514: LD_INT 113
61516: PUSH
61517: LD_INT 114
61519: PUSH
61520: LD_INT 116
61522: PUSH
61523: LD_INT 117
61525: PUSH
61526: LD_INT 118
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: ST_TO_ADDR
61552: GO 61951
61554: LD_INT 18
61556: DOUBLE
61557: EQUAL
61558: IFTRUE 61562
61560: GO 61710
61562: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
61563: LD_ADDR_VAR 0 2
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: LD_INT 4
61573: PUSH
61574: LD_INT 5
61576: PUSH
61577: LD_INT 7
61579: PUSH
61580: LD_INT 11
61582: PUSH
61583: LD_INT 12
61585: PUSH
61586: LD_INT 15
61588: PUSH
61589: LD_INT 16
61591: PUSH
61592: LD_INT 20
61594: PUSH
61595: LD_INT 21
61597: PUSH
61598: LD_INT 22
61600: PUSH
61601: LD_INT 23
61603: PUSH
61604: LD_INT 25
61606: PUSH
61607: LD_INT 26
61609: PUSH
61610: LD_INT 30
61612: PUSH
61613: LD_INT 31
61615: PUSH
61616: LD_INT 32
61618: PUSH
61619: LD_INT 33
61621: PUSH
61622: LD_INT 34
61624: PUSH
61625: LD_INT 35
61627: PUSH
61628: LD_INT 36
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 101
61656: PUSH
61657: LD_INT 102
61659: PUSH
61660: LD_INT 103
61662: PUSH
61663: LD_INT 106
61665: PUSH
61666: LD_INT 108
61668: PUSH
61669: LD_INT 112
61671: PUSH
61672: LD_INT 113
61674: PUSH
61675: LD_INT 114
61677: PUSH
61678: LD_INT 115
61680: PUSH
61681: LD_INT 116
61683: PUSH
61684: LD_INT 117
61686: PUSH
61687: LD_INT 118
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: ST_TO_ADDR
61708: GO 61951
61710: LD_INT 19
61712: DOUBLE
61713: EQUAL
61714: IFTRUE 61718
61716: GO 61950
61718: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
61719: LD_ADDR_VAR 0 2
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 2
61729: PUSH
61730: LD_INT 3
61732: PUSH
61733: LD_INT 4
61735: PUSH
61736: LD_INT 5
61738: PUSH
61739: LD_INT 6
61741: PUSH
61742: LD_INT 7
61744: PUSH
61745: LD_INT 8
61747: PUSH
61748: LD_INT 9
61750: PUSH
61751: LD_INT 10
61753: PUSH
61754: LD_INT 11
61756: PUSH
61757: LD_INT 12
61759: PUSH
61760: LD_INT 13
61762: PUSH
61763: LD_INT 14
61765: PUSH
61766: LD_INT 15
61768: PUSH
61769: LD_INT 16
61771: PUSH
61772: LD_INT 17
61774: PUSH
61775: LD_INT 18
61777: PUSH
61778: LD_INT 19
61780: PUSH
61781: LD_INT 20
61783: PUSH
61784: LD_INT 21
61786: PUSH
61787: LD_INT 22
61789: PUSH
61790: LD_INT 23
61792: PUSH
61793: LD_INT 24
61795: PUSH
61796: LD_INT 25
61798: PUSH
61799: LD_INT 26
61801: PUSH
61802: LD_INT 27
61804: PUSH
61805: LD_INT 28
61807: PUSH
61808: LD_INT 29
61810: PUSH
61811: LD_INT 30
61813: PUSH
61814: LD_INT 31
61816: PUSH
61817: LD_INT 32
61819: PUSH
61820: LD_INT 33
61822: PUSH
61823: LD_INT 34
61825: PUSH
61826: LD_INT 35
61828: PUSH
61829: LD_INT 36
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 101
61872: PUSH
61873: LD_INT 102
61875: PUSH
61876: LD_INT 103
61878: PUSH
61879: LD_INT 104
61881: PUSH
61882: LD_INT 105
61884: PUSH
61885: LD_INT 106
61887: PUSH
61888: LD_INT 107
61890: PUSH
61891: LD_INT 108
61893: PUSH
61894: LD_INT 109
61896: PUSH
61897: LD_INT 110
61899: PUSH
61900: LD_INT 111
61902: PUSH
61903: LD_INT 112
61905: PUSH
61906: LD_INT 113
61908: PUSH
61909: LD_INT 114
61911: PUSH
61912: LD_INT 115
61914: PUSH
61915: LD_INT 116
61917: PUSH
61918: LD_INT 117
61920: PUSH
61921: LD_INT 118
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: ST_TO_ADDR
61948: GO 61951
61950: POP
// end else
61951: GO 62182
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
61953: LD_ADDR_VAR 0 2
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: LD_INT 2
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: LD_INT 4
61969: PUSH
61970: LD_INT 5
61972: PUSH
61973: LD_INT 6
61975: PUSH
61976: LD_INT 7
61978: PUSH
61979: LD_INT 8
61981: PUSH
61982: LD_INT 9
61984: PUSH
61985: LD_INT 10
61987: PUSH
61988: LD_INT 11
61990: PUSH
61991: LD_INT 12
61993: PUSH
61994: LD_INT 13
61996: PUSH
61997: LD_INT 14
61999: PUSH
62000: LD_INT 15
62002: PUSH
62003: LD_INT 16
62005: PUSH
62006: LD_INT 17
62008: PUSH
62009: LD_INT 18
62011: PUSH
62012: LD_INT 19
62014: PUSH
62015: LD_INT 20
62017: PUSH
62018: LD_INT 21
62020: PUSH
62021: LD_INT 22
62023: PUSH
62024: LD_INT 23
62026: PUSH
62027: LD_INT 24
62029: PUSH
62030: LD_INT 25
62032: PUSH
62033: LD_INT 26
62035: PUSH
62036: LD_INT 27
62038: PUSH
62039: LD_INT 28
62041: PUSH
62042: LD_INT 29
62044: PUSH
62045: LD_INT 30
62047: PUSH
62048: LD_INT 31
62050: PUSH
62051: LD_INT 32
62053: PUSH
62054: LD_INT 33
62056: PUSH
62057: LD_INT 34
62059: PUSH
62060: LD_INT 35
62062: PUSH
62063: LD_INT 36
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 101
62106: PUSH
62107: LD_INT 102
62109: PUSH
62110: LD_INT 103
62112: PUSH
62113: LD_INT 104
62115: PUSH
62116: LD_INT 105
62118: PUSH
62119: LD_INT 106
62121: PUSH
62122: LD_INT 107
62124: PUSH
62125: LD_INT 108
62127: PUSH
62128: LD_INT 109
62130: PUSH
62131: LD_INT 110
62133: PUSH
62134: LD_INT 111
62136: PUSH
62137: LD_INT 112
62139: PUSH
62140: LD_INT 113
62142: PUSH
62143: LD_INT 114
62145: PUSH
62146: LD_INT 115
62148: PUSH
62149: LD_INT 116
62151: PUSH
62152: LD_INT 117
62154: PUSH
62155: LD_INT 118
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: ST_TO_ADDR
// if result then
62182: LD_VAR 0 2
62186: IFFALSE 62972
// begin normal :=  ;
62188: LD_ADDR_VAR 0 5
62192: PUSH
62193: LD_STRING 
62195: ST_TO_ADDR
// hardcore :=  ;
62196: LD_ADDR_VAR 0 6
62200: PUSH
62201: LD_STRING 
62203: ST_TO_ADDR
// active :=  ;
62204: LD_ADDR_VAR 0 7
62208: PUSH
62209: LD_STRING 
62211: ST_TO_ADDR
// for i = 1 to normalCounter do
62212: LD_ADDR_VAR 0 8
62216: PUSH
62217: DOUBLE
62218: LD_INT 1
62220: DEC
62221: ST_TO_ADDR
62222: LD_EXP 39
62226: PUSH
62227: FOR_TO
62228: IFFALSE 62329
// begin tmp := 0 ;
62230: LD_ADDR_VAR 0 3
62234: PUSH
62235: LD_STRING 0
62237: ST_TO_ADDR
// if result [ 1 ] then
62238: LD_VAR 0 2
62242: PUSH
62243: LD_INT 1
62245: ARRAY
62246: IFFALSE 62311
// if result [ 1 ] [ 1 ] = i then
62248: LD_VAR 0 2
62252: PUSH
62253: LD_INT 1
62255: ARRAY
62256: PUSH
62257: LD_INT 1
62259: ARRAY
62260: PUSH
62261: LD_VAR 0 8
62265: EQUAL
62266: IFFALSE 62311
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
62268: LD_ADDR_VAR 0 2
62272: PUSH
62273: LD_VAR 0 2
62277: PPUSH
62278: LD_INT 1
62280: PPUSH
62281: LD_VAR 0 2
62285: PUSH
62286: LD_INT 1
62288: ARRAY
62289: PPUSH
62290: LD_INT 1
62292: PPUSH
62293: CALL_OW 3
62297: PPUSH
62298: CALL_OW 1
62302: ST_TO_ADDR
// tmp := 1 ;
62303: LD_ADDR_VAR 0 3
62307: PUSH
62308: LD_STRING 1
62310: ST_TO_ADDR
// end ; normal := normal & tmp ;
62311: LD_ADDR_VAR 0 5
62315: PUSH
62316: LD_VAR 0 5
62320: PUSH
62321: LD_VAR 0 3
62325: STR
62326: ST_TO_ADDR
// end ;
62327: GO 62227
62329: POP
62330: POP
// for i = 1 to hardcoreCounter do
62331: LD_ADDR_VAR 0 8
62335: PUSH
62336: DOUBLE
62337: LD_INT 1
62339: DEC
62340: ST_TO_ADDR
62341: LD_EXP 40
62345: PUSH
62346: FOR_TO
62347: IFFALSE 62452
// begin tmp := 0 ;
62349: LD_ADDR_VAR 0 3
62353: PUSH
62354: LD_STRING 0
62356: ST_TO_ADDR
// if result [ 2 ] then
62357: LD_VAR 0 2
62361: PUSH
62362: LD_INT 2
62364: ARRAY
62365: IFFALSE 62434
// if result [ 2 ] [ 1 ] = 100 + i then
62367: LD_VAR 0 2
62371: PUSH
62372: LD_INT 2
62374: ARRAY
62375: PUSH
62376: LD_INT 1
62378: ARRAY
62379: PUSH
62380: LD_INT 100
62382: PUSH
62383: LD_VAR 0 8
62387: PLUS
62388: EQUAL
62389: IFFALSE 62434
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
62391: LD_ADDR_VAR 0 2
62395: PUSH
62396: LD_VAR 0 2
62400: PPUSH
62401: LD_INT 2
62403: PPUSH
62404: LD_VAR 0 2
62408: PUSH
62409: LD_INT 2
62411: ARRAY
62412: PPUSH
62413: LD_INT 1
62415: PPUSH
62416: CALL_OW 3
62420: PPUSH
62421: CALL_OW 1
62425: ST_TO_ADDR
// tmp := 1 ;
62426: LD_ADDR_VAR 0 3
62430: PUSH
62431: LD_STRING 1
62433: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
62434: LD_ADDR_VAR 0 6
62438: PUSH
62439: LD_VAR 0 6
62443: PUSH
62444: LD_VAR 0 3
62448: STR
62449: ST_TO_ADDR
// end ;
62450: GO 62346
62452: POP
62453: POP
// if isGameLoad then
62454: LD_VAR 0 1
62458: IFFALSE 62933
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
62460: LD_ADDR_VAR 0 4
62464: PUSH
62465: LD_EXP 43
62469: PUSH
62470: LD_EXP 42
62474: PUSH
62475: LD_EXP 44
62479: PUSH
62480: LD_EXP 41
62484: PUSH
62485: LD_EXP 45
62489: PUSH
62490: LD_EXP 46
62494: PUSH
62495: LD_EXP 47
62499: PUSH
62500: LD_EXP 48
62504: PUSH
62505: LD_EXP 49
62509: PUSH
62510: LD_EXP 50
62514: PUSH
62515: LD_EXP 51
62519: PUSH
62520: LD_EXP 52
62524: PUSH
62525: LD_EXP 53
62529: PUSH
62530: LD_EXP 54
62534: PUSH
62535: LD_EXP 62
62539: PUSH
62540: LD_EXP 63
62544: PUSH
62545: LD_EXP 64
62549: PUSH
62550: LD_EXP 65
62554: PUSH
62555: LD_EXP 67
62559: PUSH
62560: LD_EXP 68
62564: PUSH
62565: LD_EXP 69
62569: PUSH
62570: LD_EXP 72
62574: PUSH
62575: LD_EXP 74
62579: PUSH
62580: LD_EXP 75
62584: PUSH
62585: LD_EXP 76
62589: PUSH
62590: LD_EXP 78
62594: PUSH
62595: LD_EXP 79
62599: PUSH
62600: LD_EXP 82
62604: PUSH
62605: LD_EXP 83
62609: PUSH
62610: LD_EXP 84
62614: PUSH
62615: LD_EXP 85
62619: PUSH
62620: LD_EXP 86
62624: PUSH
62625: LD_EXP 87
62629: PUSH
62630: LD_EXP 88
62634: PUSH
62635: LD_EXP 89
62639: PUSH
62640: LD_EXP 90
62644: PUSH
62645: LD_EXP 55
62649: PUSH
62650: LD_EXP 56
62654: PUSH
62655: LD_EXP 59
62659: PUSH
62660: LD_EXP 60
62664: PUSH
62665: LD_EXP 61
62669: PUSH
62670: LD_EXP 57
62674: PUSH
62675: LD_EXP 58
62679: PUSH
62680: LD_EXP 66
62684: PUSH
62685: LD_EXP 70
62689: PUSH
62690: LD_EXP 71
62694: PUSH
62695: LD_EXP 73
62699: PUSH
62700: LD_EXP 77
62704: PUSH
62705: LD_EXP 80
62709: PUSH
62710: LD_EXP 81
62714: PUSH
62715: LD_EXP 91
62719: PUSH
62720: LD_EXP 92
62724: PUSH
62725: LD_EXP 93
62729: PUSH
62730: LD_EXP 94
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: ST_TO_ADDR
// tmp :=  ;
62791: LD_ADDR_VAR 0 3
62795: PUSH
62796: LD_STRING 
62798: ST_TO_ADDR
// for i = 1 to normalCounter do
62799: LD_ADDR_VAR 0 8
62803: PUSH
62804: DOUBLE
62805: LD_INT 1
62807: DEC
62808: ST_TO_ADDR
62809: LD_EXP 39
62813: PUSH
62814: FOR_TO
62815: IFFALSE 62851
// begin if flags [ i ] then
62817: LD_VAR 0 4
62821: PUSH
62822: LD_VAR 0 8
62826: ARRAY
62827: IFFALSE 62849
// tmp := tmp & i & ; ;
62829: LD_ADDR_VAR 0 3
62833: PUSH
62834: LD_VAR 0 3
62838: PUSH
62839: LD_VAR 0 8
62843: STR
62844: PUSH
62845: LD_STRING ;
62847: STR
62848: ST_TO_ADDR
// end ;
62849: GO 62814
62851: POP
62852: POP
// for i = 1 to hardcoreCounter do
62853: LD_ADDR_VAR 0 8
62857: PUSH
62858: DOUBLE
62859: LD_INT 1
62861: DEC
62862: ST_TO_ADDR
62863: LD_EXP 40
62867: PUSH
62868: FOR_TO
62869: IFFALSE 62915
// begin if flags [ normalCounter + i ] then
62871: LD_VAR 0 4
62875: PUSH
62876: LD_EXP 39
62880: PUSH
62881: LD_VAR 0 8
62885: PLUS
62886: ARRAY
62887: IFFALSE 62913
// tmp := tmp & ( 100 + i ) & ; ;
62889: LD_ADDR_VAR 0 3
62893: PUSH
62894: LD_VAR 0 3
62898: PUSH
62899: LD_INT 100
62901: PUSH
62902: LD_VAR 0 8
62906: PLUS
62907: STR
62908: PUSH
62909: LD_STRING ;
62911: STR
62912: ST_TO_ADDR
// end ;
62913: GO 62868
62915: POP
62916: POP
// if tmp then
62917: LD_VAR 0 3
62921: IFFALSE 62933
// active := tmp ;
62923: LD_ADDR_VAR 0 7
62927: PUSH
62928: LD_VAR 0 3
62932: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
62933: LD_STRING getStreamItemsFromMission("
62935: PUSH
62936: LD_VAR 0 5
62940: STR
62941: PUSH
62942: LD_STRING ","
62944: STR
62945: PUSH
62946: LD_VAR 0 6
62950: STR
62951: PUSH
62952: LD_STRING ","
62954: STR
62955: PUSH
62956: LD_VAR 0 7
62960: STR
62961: PUSH
62962: LD_STRING ")
62964: STR
62965: PPUSH
62966: CALL_OW 559
// end else
62970: GO 62979
// ToLua ( getStreamItemsFromMission("","","") ) ;
62972: LD_STRING getStreamItemsFromMission("","","")
62974: PPUSH
62975: CALL_OW 559
// end ;
62979: LD_VAR 0 2
62983: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
62984: LD_EXP 38
62988: PUSH
62989: LD_EXP 43
62993: AND
62994: IFFALSE 63118
62996: GO 62998
62998: DISABLE
62999: LD_INT 0
63001: PPUSH
63002: PPUSH
// begin enable ;
63003: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63004: LD_ADDR_VAR 0 2
63008: PUSH
63009: LD_INT 22
63011: PUSH
63012: LD_OWVAR 2
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: LD_INT 34
63026: PUSH
63027: LD_INT 7
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 34
63036: PUSH
63037: LD_INT 45
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 34
63046: PUSH
63047: LD_INT 28
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 34
63056: PUSH
63057: LD_INT 47
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PPUSH
63075: CALL_OW 69
63079: ST_TO_ADDR
// if not tmp then
63080: LD_VAR 0 2
63084: NOT
63085: IFFALSE 63089
// exit ;
63087: GO 63118
// for i in tmp do
63089: LD_ADDR_VAR 0 1
63093: PUSH
63094: LD_VAR 0 2
63098: PUSH
63099: FOR_IN
63100: IFFALSE 63116
// begin SetLives ( i , 0 ) ;
63102: LD_VAR 0 1
63106: PPUSH
63107: LD_INT 0
63109: PPUSH
63110: CALL_OW 234
// end ;
63114: GO 63099
63116: POP
63117: POP
// end ;
63118: PPOPN 2
63120: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63121: LD_EXP 38
63125: PUSH
63126: LD_EXP 44
63130: AND
63131: IFFALSE 63215
63133: GO 63135
63135: DISABLE
63136: LD_INT 0
63138: PPUSH
63139: PPUSH
// begin enable ;
63140: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63141: LD_ADDR_VAR 0 2
63145: PUSH
63146: LD_INT 22
63148: PUSH
63149: LD_OWVAR 2
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 32
63160: PUSH
63161: LD_INT 3
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PPUSH
63172: CALL_OW 69
63176: ST_TO_ADDR
// if not tmp then
63177: LD_VAR 0 2
63181: NOT
63182: IFFALSE 63186
// exit ;
63184: GO 63215
// for i in tmp do
63186: LD_ADDR_VAR 0 1
63190: PUSH
63191: LD_VAR 0 2
63195: PUSH
63196: FOR_IN
63197: IFFALSE 63213
// begin SetLives ( i , 0 ) ;
63199: LD_VAR 0 1
63203: PPUSH
63204: LD_INT 0
63206: PPUSH
63207: CALL_OW 234
// end ;
63211: GO 63196
63213: POP
63214: POP
// end ;
63215: PPOPN 2
63217: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
63218: LD_EXP 38
63222: PUSH
63223: LD_EXP 41
63227: AND
63228: IFFALSE 63321
63230: GO 63232
63232: DISABLE
63233: LD_INT 0
63235: PPUSH
// begin enable ;
63236: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
63237: LD_ADDR_VAR 0 1
63241: PUSH
63242: LD_INT 22
63244: PUSH
63245: LD_OWVAR 2
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 2
63256: PUSH
63257: LD_INT 25
63259: PUSH
63260: LD_INT 5
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 25
63269: PUSH
63270: LD_INT 9
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 25
63279: PUSH
63280: LD_INT 8
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PPUSH
63297: CALL_OW 69
63301: PUSH
63302: FOR_IN
63303: IFFALSE 63319
// begin SetClass ( i , 1 ) ;
63305: LD_VAR 0 1
63309: PPUSH
63310: LD_INT 1
63312: PPUSH
63313: CALL_OW 336
// end ;
63317: GO 63302
63319: POP
63320: POP
// end ;
63321: PPOPN 1
63323: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
63324: LD_EXP 38
63328: PUSH
63329: LD_EXP 42
63333: AND
63334: PUSH
63335: LD_OWVAR 65
63339: PUSH
63340: LD_INT 7
63342: LESS
63343: AND
63344: IFFALSE 63358
63346: GO 63348
63348: DISABLE
// begin enable ;
63349: ENABLE
// game_speed := 7 ;
63350: LD_ADDR_OWVAR 65
63354: PUSH
63355: LD_INT 7
63357: ST_TO_ADDR
// end ;
63358: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
63359: LD_EXP 38
63363: PUSH
63364: LD_EXP 45
63368: AND
63369: IFFALSE 63571
63371: GO 63373
63373: DISABLE
63374: LD_INT 0
63376: PPUSH
63377: PPUSH
63378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63379: LD_ADDR_VAR 0 3
63383: PUSH
63384: LD_INT 81
63386: PUSH
63387: LD_OWVAR 2
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 21
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PPUSH
63410: CALL_OW 69
63414: ST_TO_ADDR
// if not tmp then
63415: LD_VAR 0 3
63419: NOT
63420: IFFALSE 63424
// exit ;
63422: GO 63571
// if tmp > 5 then
63424: LD_VAR 0 3
63428: PUSH
63429: LD_INT 5
63431: GREATER
63432: IFFALSE 63444
// k := 5 else
63434: LD_ADDR_VAR 0 2
63438: PUSH
63439: LD_INT 5
63441: ST_TO_ADDR
63442: GO 63454
// k := tmp ;
63444: LD_ADDR_VAR 0 2
63448: PUSH
63449: LD_VAR 0 3
63453: ST_TO_ADDR
// for i := 1 to k do
63454: LD_ADDR_VAR 0 1
63458: PUSH
63459: DOUBLE
63460: LD_INT 1
63462: DEC
63463: ST_TO_ADDR
63464: LD_VAR 0 2
63468: PUSH
63469: FOR_TO
63470: IFFALSE 63569
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
63472: LD_VAR 0 3
63476: PUSH
63477: LD_VAR 0 1
63481: ARRAY
63482: PPUSH
63483: LD_VAR 0 1
63487: PUSH
63488: LD_INT 4
63490: MOD
63491: PUSH
63492: LD_INT 1
63494: PLUS
63495: PPUSH
63496: CALL_OW 259
63500: PUSH
63501: LD_INT 10
63503: LESS
63504: IFFALSE 63567
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
63506: LD_VAR 0 3
63510: PUSH
63511: LD_VAR 0 1
63515: ARRAY
63516: PPUSH
63517: LD_VAR 0 1
63521: PUSH
63522: LD_INT 4
63524: MOD
63525: PUSH
63526: LD_INT 1
63528: PLUS
63529: PPUSH
63530: LD_VAR 0 3
63534: PUSH
63535: LD_VAR 0 1
63539: ARRAY
63540: PPUSH
63541: LD_VAR 0 1
63545: PUSH
63546: LD_INT 4
63548: MOD
63549: PUSH
63550: LD_INT 1
63552: PLUS
63553: PPUSH
63554: CALL_OW 259
63558: PUSH
63559: LD_INT 1
63561: PLUS
63562: PPUSH
63563: CALL_OW 237
63567: GO 63469
63569: POP
63570: POP
// end ;
63571: PPOPN 3
63573: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
63574: LD_EXP 38
63578: PUSH
63579: LD_EXP 46
63583: AND
63584: IFFALSE 63604
63586: GO 63588
63588: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
63589: LD_INT 4
63591: PPUSH
63592: LD_OWVAR 2
63596: PPUSH
63597: LD_INT 0
63599: PPUSH
63600: CALL_OW 324
63604: END
// every 0 0$1 trigger StreamModeActive and sShovel do
63605: LD_EXP 38
63609: PUSH
63610: LD_EXP 75
63614: AND
63615: IFFALSE 63635
63617: GO 63619
63619: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
63620: LD_INT 19
63622: PPUSH
63623: LD_OWVAR 2
63627: PPUSH
63628: LD_INT 0
63630: PPUSH
63631: CALL_OW 324
63635: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
63636: LD_EXP 38
63640: PUSH
63641: LD_EXP 47
63645: AND
63646: IFFALSE 63748
63648: GO 63650
63650: DISABLE
63651: LD_INT 0
63653: PPUSH
63654: PPUSH
// begin enable ;
63655: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
63656: LD_ADDR_VAR 0 2
63660: PUSH
63661: LD_INT 22
63663: PUSH
63664: LD_OWVAR 2
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 2
63675: PUSH
63676: LD_INT 34
63678: PUSH
63679: LD_INT 11
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 34
63688: PUSH
63689: LD_INT 30
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PPUSH
63705: CALL_OW 69
63709: ST_TO_ADDR
// if not tmp then
63710: LD_VAR 0 2
63714: NOT
63715: IFFALSE 63719
// exit ;
63717: GO 63748
// for i in tmp do
63719: LD_ADDR_VAR 0 1
63723: PUSH
63724: LD_VAR 0 2
63728: PUSH
63729: FOR_IN
63730: IFFALSE 63746
// begin SetLives ( i , 0 ) ;
63732: LD_VAR 0 1
63736: PPUSH
63737: LD_INT 0
63739: PPUSH
63740: CALL_OW 234
// end ;
63744: GO 63729
63746: POP
63747: POP
// end ;
63748: PPOPN 2
63750: END
// every 0 0$1 trigger StreamModeActive and sBunker do
63751: LD_EXP 38
63755: PUSH
63756: LD_EXP 48
63760: AND
63761: IFFALSE 63781
63763: GO 63765
63765: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
63766: LD_INT 32
63768: PPUSH
63769: LD_OWVAR 2
63773: PPUSH
63774: LD_INT 0
63776: PPUSH
63777: CALL_OW 324
63781: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
63782: LD_EXP 38
63786: PUSH
63787: LD_EXP 49
63791: AND
63792: IFFALSE 63973
63794: GO 63796
63796: DISABLE
63797: LD_INT 0
63799: PPUSH
63800: PPUSH
63801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
63802: LD_ADDR_VAR 0 2
63806: PUSH
63807: LD_INT 22
63809: PUSH
63810: LD_OWVAR 2
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 33
63821: PUSH
63822: LD_INT 3
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PPUSH
63833: CALL_OW 69
63837: ST_TO_ADDR
// if not tmp then
63838: LD_VAR 0 2
63842: NOT
63843: IFFALSE 63847
// exit ;
63845: GO 63973
// side := 0 ;
63847: LD_ADDR_VAR 0 3
63851: PUSH
63852: LD_INT 0
63854: ST_TO_ADDR
// for i := 1 to 8 do
63855: LD_ADDR_VAR 0 1
63859: PUSH
63860: DOUBLE
63861: LD_INT 1
63863: DEC
63864: ST_TO_ADDR
63865: LD_INT 8
63867: PUSH
63868: FOR_TO
63869: IFFALSE 63917
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
63871: LD_OWVAR 2
63875: PUSH
63876: LD_VAR 0 1
63880: NONEQUAL
63881: PUSH
63882: LD_OWVAR 2
63886: PPUSH
63887: LD_VAR 0 1
63891: PPUSH
63892: CALL_OW 81
63896: PUSH
63897: LD_INT 2
63899: EQUAL
63900: AND
63901: IFFALSE 63915
// begin side := i ;
63903: LD_ADDR_VAR 0 3
63907: PUSH
63908: LD_VAR 0 1
63912: ST_TO_ADDR
// break ;
63913: GO 63917
// end ;
63915: GO 63868
63917: POP
63918: POP
// if not side then
63919: LD_VAR 0 3
63923: NOT
63924: IFFALSE 63928
// exit ;
63926: GO 63973
// for i := 1 to tmp do
63928: LD_ADDR_VAR 0 1
63932: PUSH
63933: DOUBLE
63934: LD_INT 1
63936: DEC
63937: ST_TO_ADDR
63938: LD_VAR 0 2
63942: PUSH
63943: FOR_TO
63944: IFFALSE 63971
// if Prob ( 60 ) then
63946: LD_INT 60
63948: PPUSH
63949: CALL_OW 13
63953: IFFALSE 63969
// SetSide ( i , side ) ;
63955: LD_VAR 0 1
63959: PPUSH
63960: LD_VAR 0 3
63964: PPUSH
63965: CALL_OW 235
63969: GO 63943
63971: POP
63972: POP
// end ;
63973: PPOPN 3
63975: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
63976: LD_EXP 38
63980: PUSH
63981: LD_EXP 51
63985: AND
63986: IFFALSE 64105
63988: GO 63990
63990: DISABLE
63991: LD_INT 0
63993: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
63994: LD_ADDR_VAR 0 1
63998: PUSH
63999: LD_INT 22
64001: PUSH
64002: LD_OWVAR 2
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 21
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 3
64023: PUSH
64024: LD_INT 23
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: LIST
64042: PPUSH
64043: CALL_OW 69
64047: PUSH
64048: FOR_IN
64049: IFFALSE 64103
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64051: LD_VAR 0 1
64055: PPUSH
64056: CALL_OW 257
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: LD_INT 2
64066: PUSH
64067: LD_INT 3
64069: PUSH
64070: LD_INT 4
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: IN
64079: IFFALSE 64101
// SetClass ( un , rand ( 1 , 4 ) ) ;
64081: LD_VAR 0 1
64085: PPUSH
64086: LD_INT 1
64088: PPUSH
64089: LD_INT 4
64091: PPUSH
64092: CALL_OW 12
64096: PPUSH
64097: CALL_OW 336
64101: GO 64048
64103: POP
64104: POP
// end ;
64105: PPOPN 1
64107: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64108: LD_EXP 38
64112: PUSH
64113: LD_EXP 50
64117: AND
64118: IFFALSE 64197
64120: GO 64122
64122: DISABLE
64123: LD_INT 0
64125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64126: LD_ADDR_VAR 0 1
64130: PUSH
64131: LD_INT 22
64133: PUSH
64134: LD_OWVAR 2
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 21
64145: PUSH
64146: LD_INT 3
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PPUSH
64157: CALL_OW 69
64161: ST_TO_ADDR
// if not tmp then
64162: LD_VAR 0 1
64166: NOT
64167: IFFALSE 64171
// exit ;
64169: GO 64197
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
64171: LD_VAR 0 1
64175: PUSH
64176: LD_INT 1
64178: PPUSH
64179: LD_VAR 0 1
64183: PPUSH
64184: CALL_OW 12
64188: ARRAY
64189: PPUSH
64190: LD_INT 100
64192: PPUSH
64193: CALL_OW 234
// end ;
64197: PPOPN 1
64199: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
64200: LD_EXP 38
64204: PUSH
64205: LD_EXP 52
64209: AND
64210: IFFALSE 64308
64212: GO 64214
64214: DISABLE
64215: LD_INT 0
64217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64218: LD_ADDR_VAR 0 1
64222: PUSH
64223: LD_INT 22
64225: PUSH
64226: LD_OWVAR 2
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 21
64237: PUSH
64238: LD_INT 1
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PPUSH
64249: CALL_OW 69
64253: ST_TO_ADDR
// if not tmp then
64254: LD_VAR 0 1
64258: NOT
64259: IFFALSE 64263
// exit ;
64261: GO 64308
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
64263: LD_VAR 0 1
64267: PUSH
64268: LD_INT 1
64270: PPUSH
64271: LD_VAR 0 1
64275: PPUSH
64276: CALL_OW 12
64280: ARRAY
64281: PPUSH
64282: LD_INT 1
64284: PPUSH
64285: LD_INT 4
64287: PPUSH
64288: CALL_OW 12
64292: PPUSH
64293: LD_INT 3000
64295: PPUSH
64296: LD_INT 9000
64298: PPUSH
64299: CALL_OW 12
64303: PPUSH
64304: CALL_OW 492
// end ;
64308: PPOPN 1
64310: END
// every 0 0$1 trigger StreamModeActive and sDepot do
64311: LD_EXP 38
64315: PUSH
64316: LD_EXP 53
64320: AND
64321: IFFALSE 64341
64323: GO 64325
64325: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
64326: LD_INT 1
64328: PPUSH
64329: LD_OWVAR 2
64333: PPUSH
64334: LD_INT 0
64336: PPUSH
64337: CALL_OW 324
64341: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
64342: LD_EXP 38
64346: PUSH
64347: LD_EXP 54
64351: AND
64352: IFFALSE 64435
64354: GO 64356
64356: DISABLE
64357: LD_INT 0
64359: PPUSH
64360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64361: LD_ADDR_VAR 0 2
64365: PUSH
64366: LD_INT 22
64368: PUSH
64369: LD_OWVAR 2
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 21
64380: PUSH
64381: LD_INT 3
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PPUSH
64392: CALL_OW 69
64396: ST_TO_ADDR
// if not tmp then
64397: LD_VAR 0 2
64401: NOT
64402: IFFALSE 64406
// exit ;
64404: GO 64435
// for i in tmp do
64406: LD_ADDR_VAR 0 1
64410: PUSH
64411: LD_VAR 0 2
64415: PUSH
64416: FOR_IN
64417: IFFALSE 64433
// SetBLevel ( i , 10 ) ;
64419: LD_VAR 0 1
64423: PPUSH
64424: LD_INT 10
64426: PPUSH
64427: CALL_OW 241
64431: GO 64416
64433: POP
64434: POP
// end ;
64435: PPOPN 2
64437: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
64438: LD_EXP 38
64442: PUSH
64443: LD_EXP 55
64447: AND
64448: IFFALSE 64559
64450: GO 64452
64452: DISABLE
64453: LD_INT 0
64455: PPUSH
64456: PPUSH
64457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64458: LD_ADDR_VAR 0 3
64462: PUSH
64463: LD_INT 22
64465: PUSH
64466: LD_OWVAR 2
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 25
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PPUSH
64489: CALL_OW 69
64493: ST_TO_ADDR
// if not tmp then
64494: LD_VAR 0 3
64498: NOT
64499: IFFALSE 64503
// exit ;
64501: GO 64559
// un := tmp [ rand ( 1 , tmp ) ] ;
64503: LD_ADDR_VAR 0 2
64507: PUSH
64508: LD_VAR 0 3
64512: PUSH
64513: LD_INT 1
64515: PPUSH
64516: LD_VAR 0 3
64520: PPUSH
64521: CALL_OW 12
64525: ARRAY
64526: ST_TO_ADDR
// if Crawls ( un ) then
64527: LD_VAR 0 2
64531: PPUSH
64532: CALL_OW 318
64536: IFFALSE 64547
// ComWalk ( un ) ;
64538: LD_VAR 0 2
64542: PPUSH
64543: CALL_OW 138
// SetClass ( un , class_sniper ) ;
64547: LD_VAR 0 2
64551: PPUSH
64552: LD_INT 5
64554: PPUSH
64555: CALL_OW 336
// end ;
64559: PPOPN 3
64561: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
64562: LD_EXP 38
64566: PUSH
64567: LD_EXP 56
64571: AND
64572: PUSH
64573: LD_OWVAR 67
64577: PUSH
64578: LD_INT 4
64580: LESS
64581: AND
64582: IFFALSE 64601
64584: GO 64586
64586: DISABLE
// begin Difficulty := Difficulty + 1 ;
64587: LD_ADDR_OWVAR 67
64591: PUSH
64592: LD_OWVAR 67
64596: PUSH
64597: LD_INT 1
64599: PLUS
64600: ST_TO_ADDR
// end ;
64601: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
64602: LD_EXP 38
64606: PUSH
64607: LD_EXP 57
64611: AND
64612: IFFALSE 64715
64614: GO 64616
64616: DISABLE
64617: LD_INT 0
64619: PPUSH
// begin for i := 1 to 5 do
64620: LD_ADDR_VAR 0 1
64624: PUSH
64625: DOUBLE
64626: LD_INT 1
64628: DEC
64629: ST_TO_ADDR
64630: LD_INT 5
64632: PUSH
64633: FOR_TO
64634: IFFALSE 64713
// begin uc_nation := nation_nature ;
64636: LD_ADDR_OWVAR 21
64640: PUSH
64641: LD_INT 0
64643: ST_TO_ADDR
// uc_side := 0 ;
64644: LD_ADDR_OWVAR 20
64648: PUSH
64649: LD_INT 0
64651: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64652: LD_ADDR_OWVAR 29
64656: PUSH
64657: LD_INT 12
64659: PUSH
64660: LD_INT 12
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: ST_TO_ADDR
// hc_agressivity := 20 ;
64667: LD_ADDR_OWVAR 35
64671: PUSH
64672: LD_INT 20
64674: ST_TO_ADDR
// hc_class := class_tiger ;
64675: LD_ADDR_OWVAR 28
64679: PUSH
64680: LD_INT 14
64682: ST_TO_ADDR
// hc_gallery :=  ;
64683: LD_ADDR_OWVAR 33
64687: PUSH
64688: LD_STRING 
64690: ST_TO_ADDR
// hc_name :=  ;
64691: LD_ADDR_OWVAR 26
64695: PUSH
64696: LD_STRING 
64698: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
64699: CALL_OW 44
64703: PPUSH
64704: LD_INT 0
64706: PPUSH
64707: CALL_OW 51
// end ;
64711: GO 64633
64713: POP
64714: POP
// end ;
64715: PPOPN 1
64717: END
// every 0 0$1 trigger StreamModeActive and sBomb do
64718: LD_EXP 38
64722: PUSH
64723: LD_EXP 58
64727: AND
64728: IFFALSE 64737
64730: GO 64732
64732: DISABLE
// StreamSibBomb ;
64733: CALL 64738 0 0
64737: END
// export function StreamSibBomb ; var i , x , y ; begin
64738: LD_INT 0
64740: PPUSH
64741: PPUSH
64742: PPUSH
64743: PPUSH
// result := false ;
64744: LD_ADDR_VAR 0 1
64748: PUSH
64749: LD_INT 0
64751: ST_TO_ADDR
// for i := 1 to 16 do
64752: LD_ADDR_VAR 0 2
64756: PUSH
64757: DOUBLE
64758: LD_INT 1
64760: DEC
64761: ST_TO_ADDR
64762: LD_INT 16
64764: PUSH
64765: FOR_TO
64766: IFFALSE 64965
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64768: LD_ADDR_VAR 0 3
64772: PUSH
64773: LD_INT 10
64775: PUSH
64776: LD_INT 20
64778: PUSH
64779: LD_INT 30
64781: PUSH
64782: LD_INT 40
64784: PUSH
64785: LD_INT 50
64787: PUSH
64788: LD_INT 60
64790: PUSH
64791: LD_INT 70
64793: PUSH
64794: LD_INT 80
64796: PUSH
64797: LD_INT 90
64799: PUSH
64800: LD_INT 100
64802: PUSH
64803: LD_INT 110
64805: PUSH
64806: LD_INT 120
64808: PUSH
64809: LD_INT 130
64811: PUSH
64812: LD_INT 140
64814: PUSH
64815: LD_INT 150
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: PPUSH
64838: LD_INT 15
64840: PPUSH
64841: CALL_OW 12
64845: ARRAY
64846: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64847: LD_ADDR_VAR 0 4
64851: PUSH
64852: LD_INT 10
64854: PUSH
64855: LD_INT 20
64857: PUSH
64858: LD_INT 30
64860: PUSH
64861: LD_INT 40
64863: PUSH
64864: LD_INT 50
64866: PUSH
64867: LD_INT 60
64869: PUSH
64870: LD_INT 70
64872: PUSH
64873: LD_INT 80
64875: PUSH
64876: LD_INT 90
64878: PUSH
64879: LD_INT 100
64881: PUSH
64882: LD_INT 110
64884: PUSH
64885: LD_INT 120
64887: PUSH
64888: LD_INT 130
64890: PUSH
64891: LD_INT 140
64893: PUSH
64894: LD_INT 150
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 1
64916: PPUSH
64917: LD_INT 15
64919: PPUSH
64920: CALL_OW 12
64924: ARRAY
64925: ST_TO_ADDR
// if ValidHex ( x , y ) then
64926: LD_VAR 0 3
64930: PPUSH
64931: LD_VAR 0 4
64935: PPUSH
64936: CALL_OW 488
64940: IFFALSE 64963
// begin result := [ x , y ] ;
64942: LD_ADDR_VAR 0 1
64946: PUSH
64947: LD_VAR 0 3
64951: PUSH
64952: LD_VAR 0 4
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: ST_TO_ADDR
// break ;
64961: GO 64965
// end ; end ;
64963: GO 64765
64965: POP
64966: POP
// if result then
64967: LD_VAR 0 1
64971: IFFALSE 65031
// begin ToLua ( playSibBomb() ) ;
64973: LD_STRING playSibBomb()
64975: PPUSH
64976: CALL_OW 559
// wait ( 0 0$14 ) ;
64980: LD_INT 490
64982: PPUSH
64983: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
64987: LD_VAR 0 1
64991: PUSH
64992: LD_INT 1
64994: ARRAY
64995: PPUSH
64996: LD_VAR 0 1
65000: PUSH
65001: LD_INT 2
65003: ARRAY
65004: PPUSH
65005: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65009: LD_VAR 0 1
65013: PUSH
65014: LD_INT 1
65016: ARRAY
65017: PPUSH
65018: LD_VAR 0 1
65022: PUSH
65023: LD_INT 2
65025: ARRAY
65026: PPUSH
65027: CALL_OW 429
// end ; end ;
65031: LD_VAR 0 1
65035: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65036: LD_EXP 38
65040: PUSH
65041: LD_EXP 60
65045: AND
65046: IFFALSE 65058
65048: GO 65050
65050: DISABLE
// YouLost (  ) ;
65051: LD_STRING 
65053: PPUSH
65054: CALL_OW 104
65058: END
// every 0 0$1 trigger StreamModeActive and sFog do
65059: LD_EXP 38
65063: PUSH
65064: LD_EXP 59
65068: AND
65069: IFFALSE 65083
65071: GO 65073
65073: DISABLE
// FogOff ( your_side ) ;
65074: LD_OWVAR 2
65078: PPUSH
65079: CALL_OW 344
65083: END
// every 0 0$1 trigger StreamModeActive and sSun do
65084: LD_EXP 38
65088: PUSH
65089: LD_EXP 61
65093: AND
65094: IFFALSE 65122
65096: GO 65098
65098: DISABLE
// begin solar_recharge_percent := 0 ;
65099: LD_ADDR_OWVAR 79
65103: PUSH
65104: LD_INT 0
65106: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65107: LD_INT 10500
65109: PPUSH
65110: CALL_OW 67
// solar_recharge_percent := 100 ;
65114: LD_ADDR_OWVAR 79
65118: PUSH
65119: LD_INT 100
65121: ST_TO_ADDR
// end ;
65122: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65123: LD_EXP 38
65127: PUSH
65128: LD_EXP 62
65132: AND
65133: IFFALSE 65372
65135: GO 65137
65137: DISABLE
65138: LD_INT 0
65140: PPUSH
65141: PPUSH
65142: PPUSH
// begin tmp := [ ] ;
65143: LD_ADDR_VAR 0 3
65147: PUSH
65148: EMPTY
65149: ST_TO_ADDR
// for i := 1 to 6 do
65150: LD_ADDR_VAR 0 1
65154: PUSH
65155: DOUBLE
65156: LD_INT 1
65158: DEC
65159: ST_TO_ADDR
65160: LD_INT 6
65162: PUSH
65163: FOR_TO
65164: IFFALSE 65269
// begin uc_nation := nation_nature ;
65166: LD_ADDR_OWVAR 21
65170: PUSH
65171: LD_INT 0
65173: ST_TO_ADDR
// uc_side := 0 ;
65174: LD_ADDR_OWVAR 20
65178: PUSH
65179: LD_INT 0
65181: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65182: LD_ADDR_OWVAR 29
65186: PUSH
65187: LD_INT 12
65189: PUSH
65190: LD_INT 12
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: ST_TO_ADDR
// hc_agressivity := 20 ;
65197: LD_ADDR_OWVAR 35
65201: PUSH
65202: LD_INT 20
65204: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
65205: LD_ADDR_OWVAR 28
65209: PUSH
65210: LD_INT 17
65212: ST_TO_ADDR
// hc_gallery :=  ;
65213: LD_ADDR_OWVAR 33
65217: PUSH
65218: LD_STRING 
65220: ST_TO_ADDR
// hc_name :=  ;
65221: LD_ADDR_OWVAR 26
65225: PUSH
65226: LD_STRING 
65228: ST_TO_ADDR
// un := CreateHuman ;
65229: LD_ADDR_VAR 0 2
65233: PUSH
65234: CALL_OW 44
65238: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
65239: LD_VAR 0 2
65243: PPUSH
65244: LD_INT 1
65246: PPUSH
65247: CALL_OW 51
// tmp := tmp ^ un ;
65251: LD_ADDR_VAR 0 3
65255: PUSH
65256: LD_VAR 0 3
65260: PUSH
65261: LD_VAR 0 2
65265: ADD
65266: ST_TO_ADDR
// end ;
65267: GO 65163
65269: POP
65270: POP
// repeat wait ( 0 0$1 ) ;
65271: LD_INT 35
65273: PPUSH
65274: CALL_OW 67
// for un in tmp do
65278: LD_ADDR_VAR 0 2
65282: PUSH
65283: LD_VAR 0 3
65287: PUSH
65288: FOR_IN
65289: IFFALSE 65363
// begin if IsDead ( un ) then
65291: LD_VAR 0 2
65295: PPUSH
65296: CALL_OW 301
65300: IFFALSE 65320
// begin tmp := tmp diff un ;
65302: LD_ADDR_VAR 0 3
65306: PUSH
65307: LD_VAR 0 3
65311: PUSH
65312: LD_VAR 0 2
65316: DIFF
65317: ST_TO_ADDR
// continue ;
65318: GO 65288
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
65320: LD_VAR 0 2
65324: PPUSH
65325: LD_INT 3
65327: PUSH
65328: LD_INT 22
65330: PUSH
65331: LD_INT 0
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PPUSH
65342: CALL_OW 69
65346: PPUSH
65347: LD_VAR 0 2
65351: PPUSH
65352: CALL_OW 74
65356: PPUSH
65357: CALL_OW 115
// end ;
65361: GO 65288
65363: POP
65364: POP
// until not tmp ;
65365: LD_VAR 0 3
65369: NOT
65370: IFFALSE 65271
// end ;
65372: PPOPN 3
65374: END
// every 0 0$1 trigger StreamModeActive and sTroll do
65375: LD_EXP 38
65379: PUSH
65380: LD_EXP 63
65384: AND
65385: IFFALSE 65439
65387: GO 65389
65389: DISABLE
// begin ToLua ( displayTroll(); ) ;
65390: LD_STRING displayTroll();
65392: PPUSH
65393: CALL_OW 559
// wait ( 3 3$00 ) ;
65397: LD_INT 6300
65399: PPUSH
65400: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65404: LD_STRING hideTroll();
65406: PPUSH
65407: CALL_OW 559
// wait ( 1 1$00 ) ;
65411: LD_INT 2100
65413: PPUSH
65414: CALL_OW 67
// ToLua ( displayTroll(); ) ;
65418: LD_STRING displayTroll();
65420: PPUSH
65421: CALL_OW 559
// wait ( 1 1$00 ) ;
65425: LD_INT 2100
65427: PPUSH
65428: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65432: LD_STRING hideTroll();
65434: PPUSH
65435: CALL_OW 559
// end ;
65439: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
65440: LD_EXP 38
65444: PUSH
65445: LD_EXP 64
65449: AND
65450: IFFALSE 65513
65452: GO 65454
65454: DISABLE
65455: LD_INT 0
65457: PPUSH
// begin p := 0 ;
65458: LD_ADDR_VAR 0 1
65462: PUSH
65463: LD_INT 0
65465: ST_TO_ADDR
// repeat game_speed := 1 ;
65466: LD_ADDR_OWVAR 65
65470: PUSH
65471: LD_INT 1
65473: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65474: LD_INT 35
65476: PPUSH
65477: CALL_OW 67
// p := p + 1 ;
65481: LD_ADDR_VAR 0 1
65485: PUSH
65486: LD_VAR 0 1
65490: PUSH
65491: LD_INT 1
65493: PLUS
65494: ST_TO_ADDR
// until p >= 60 ;
65495: LD_VAR 0 1
65499: PUSH
65500: LD_INT 60
65502: GREATEREQUAL
65503: IFFALSE 65466
// game_speed := 4 ;
65505: LD_ADDR_OWVAR 65
65509: PUSH
65510: LD_INT 4
65512: ST_TO_ADDR
// end ;
65513: PPOPN 1
65515: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
65516: LD_EXP 38
65520: PUSH
65521: LD_EXP 65
65525: AND
65526: IFFALSE 65672
65528: GO 65530
65530: DISABLE
65531: LD_INT 0
65533: PPUSH
65534: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65535: LD_ADDR_VAR 0 1
65539: PUSH
65540: LD_INT 22
65542: PUSH
65543: LD_OWVAR 2
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: PUSH
65555: LD_INT 30
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 30
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: LIST
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PPUSH
65584: CALL_OW 69
65588: ST_TO_ADDR
// if not depot then
65589: LD_VAR 0 1
65593: NOT
65594: IFFALSE 65598
// exit ;
65596: GO 65672
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
65598: LD_ADDR_VAR 0 2
65602: PUSH
65603: LD_VAR 0 1
65607: PUSH
65608: LD_INT 1
65610: PPUSH
65611: LD_VAR 0 1
65615: PPUSH
65616: CALL_OW 12
65620: ARRAY
65621: PPUSH
65622: CALL_OW 274
65626: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
65627: LD_VAR 0 2
65631: PPUSH
65632: LD_INT 1
65634: PPUSH
65635: LD_INT 0
65637: PPUSH
65638: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
65642: LD_VAR 0 2
65646: PPUSH
65647: LD_INT 2
65649: PPUSH
65650: LD_INT 0
65652: PPUSH
65653: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
65657: LD_VAR 0 2
65661: PPUSH
65662: LD_INT 3
65664: PPUSH
65665: LD_INT 0
65667: PPUSH
65668: CALL_OW 277
// end ;
65672: PPOPN 2
65674: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
65675: LD_EXP 38
65679: PUSH
65680: LD_EXP 66
65684: AND
65685: IFFALSE 65782
65687: GO 65689
65689: DISABLE
65690: LD_INT 0
65692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65693: LD_ADDR_VAR 0 1
65697: PUSH
65698: LD_INT 22
65700: PUSH
65701: LD_OWVAR 2
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 21
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 3
65722: PUSH
65723: LD_INT 23
65725: PUSH
65726: LD_INT 0
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: LIST
65741: PPUSH
65742: CALL_OW 69
65746: ST_TO_ADDR
// if not tmp then
65747: LD_VAR 0 1
65751: NOT
65752: IFFALSE 65756
// exit ;
65754: GO 65782
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
65756: LD_VAR 0 1
65760: PUSH
65761: LD_INT 1
65763: PPUSH
65764: LD_VAR 0 1
65768: PPUSH
65769: CALL_OW 12
65773: ARRAY
65774: PPUSH
65775: LD_INT 200
65777: PPUSH
65778: CALL_OW 234
// end ;
65782: PPOPN 1
65784: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
65785: LD_EXP 38
65789: PUSH
65790: LD_EXP 67
65794: AND
65795: IFFALSE 65874
65797: GO 65799
65799: DISABLE
65800: LD_INT 0
65802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
65803: LD_ADDR_VAR 0 1
65807: PUSH
65808: LD_INT 22
65810: PUSH
65811: LD_OWVAR 2
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 21
65822: PUSH
65823: LD_INT 2
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PPUSH
65834: CALL_OW 69
65838: ST_TO_ADDR
// if not tmp then
65839: LD_VAR 0 1
65843: NOT
65844: IFFALSE 65848
// exit ;
65846: GO 65874
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
65848: LD_VAR 0 1
65852: PUSH
65853: LD_INT 1
65855: PPUSH
65856: LD_VAR 0 1
65860: PPUSH
65861: CALL_OW 12
65865: ARRAY
65866: PPUSH
65867: LD_INT 60
65869: PPUSH
65870: CALL_OW 234
// end ;
65874: PPOPN 1
65876: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
65877: LD_EXP 38
65881: PUSH
65882: LD_EXP 68
65886: AND
65887: IFFALSE 65986
65889: GO 65891
65891: DISABLE
65892: LD_INT 0
65894: PPUSH
65895: PPUSH
// begin enable ;
65896: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
65897: LD_ADDR_VAR 0 1
65901: PUSH
65902: LD_INT 22
65904: PUSH
65905: LD_OWVAR 2
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 61
65916: PUSH
65917: EMPTY
65918: LIST
65919: PUSH
65920: LD_INT 33
65922: PUSH
65923: LD_INT 2
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: LIST
65934: PPUSH
65935: CALL_OW 69
65939: ST_TO_ADDR
// if not tmp then
65940: LD_VAR 0 1
65944: NOT
65945: IFFALSE 65949
// exit ;
65947: GO 65986
// for i in tmp do
65949: LD_ADDR_VAR 0 2
65953: PUSH
65954: LD_VAR 0 1
65958: PUSH
65959: FOR_IN
65960: IFFALSE 65984
// if IsControledBy ( i ) then
65962: LD_VAR 0 2
65966: PPUSH
65967: CALL_OW 312
65971: IFFALSE 65982
// ComUnlink ( i ) ;
65973: LD_VAR 0 2
65977: PPUSH
65978: CALL_OW 136
65982: GO 65959
65984: POP
65985: POP
// end ;
65986: PPOPN 2
65988: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
65989: LD_EXP 38
65993: PUSH
65994: LD_EXP 69
65998: AND
65999: IFFALSE 66139
66001: GO 66003
66003: DISABLE
66004: LD_INT 0
66006: PPUSH
66007: PPUSH
// begin ToLua ( displayPowell(); ) ;
66008: LD_STRING displayPowell();
66010: PPUSH
66011: CALL_OW 559
// uc_side := 0 ;
66015: LD_ADDR_OWVAR 20
66019: PUSH
66020: LD_INT 0
66022: ST_TO_ADDR
// uc_nation := 2 ;
66023: LD_ADDR_OWVAR 21
66027: PUSH
66028: LD_INT 2
66030: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66031: LD_ADDR_OWVAR 37
66035: PUSH
66036: LD_INT 14
66038: ST_TO_ADDR
// vc_engine := engine_siberite ;
66039: LD_ADDR_OWVAR 39
66043: PUSH
66044: LD_INT 3
66046: ST_TO_ADDR
// vc_control := control_apeman ;
66047: LD_ADDR_OWVAR 38
66051: PUSH
66052: LD_INT 5
66054: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66055: LD_ADDR_OWVAR 40
66059: PUSH
66060: LD_INT 29
66062: ST_TO_ADDR
// un := CreateVehicle ;
66063: LD_ADDR_VAR 0 2
66067: PUSH
66068: CALL_OW 45
66072: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66073: LD_VAR 0 2
66077: PPUSH
66078: LD_INT 1
66080: PPUSH
66081: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66085: LD_INT 35
66087: PPUSH
66088: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66092: LD_VAR 0 2
66096: PPUSH
66097: LD_INT 22
66099: PUSH
66100: LD_OWVAR 2
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PPUSH
66109: CALL_OW 69
66113: PPUSH
66114: LD_VAR 0 2
66118: PPUSH
66119: CALL_OW 74
66123: PPUSH
66124: CALL_OW 115
// until IsDead ( un ) ;
66128: LD_VAR 0 2
66132: PPUSH
66133: CALL_OW 301
66137: IFFALSE 66085
// end ;
66139: PPOPN 2
66141: END
// every 0 0$1 trigger StreamModeActive and sStu do
66142: LD_EXP 38
66146: PUSH
66147: LD_EXP 77
66151: AND
66152: IFFALSE 66168
66154: GO 66156
66156: DISABLE
// begin ToLua ( displayStucuk(); ) ;
66157: LD_STRING displayStucuk();
66159: PPUSH
66160: CALL_OW 559
// ResetFog ;
66164: CALL_OW 335
// end ;
66168: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
66169: LD_EXP 38
66173: PUSH
66174: LD_EXP 70
66178: AND
66179: IFFALSE 66320
66181: GO 66183
66183: DISABLE
66184: LD_INT 0
66186: PPUSH
66187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66188: LD_ADDR_VAR 0 2
66192: PUSH
66193: LD_INT 22
66195: PUSH
66196: LD_OWVAR 2
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 21
66207: PUSH
66208: LD_INT 1
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PPUSH
66219: CALL_OW 69
66223: ST_TO_ADDR
// if not tmp then
66224: LD_VAR 0 2
66228: NOT
66229: IFFALSE 66233
// exit ;
66231: GO 66320
// un := tmp [ rand ( 1 , tmp ) ] ;
66233: LD_ADDR_VAR 0 1
66237: PUSH
66238: LD_VAR 0 2
66242: PUSH
66243: LD_INT 1
66245: PPUSH
66246: LD_VAR 0 2
66250: PPUSH
66251: CALL_OW 12
66255: ARRAY
66256: ST_TO_ADDR
// SetSide ( un , 0 ) ;
66257: LD_VAR 0 1
66261: PPUSH
66262: LD_INT 0
66264: PPUSH
66265: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
66269: LD_VAR 0 1
66273: PPUSH
66274: LD_OWVAR 3
66278: PUSH
66279: LD_VAR 0 1
66283: DIFF
66284: PPUSH
66285: LD_VAR 0 1
66289: PPUSH
66290: CALL_OW 74
66294: PPUSH
66295: CALL_OW 115
// wait ( 0 0$20 ) ;
66299: LD_INT 700
66301: PPUSH
66302: CALL_OW 67
// SetSide ( un , your_side ) ;
66306: LD_VAR 0 1
66310: PPUSH
66311: LD_OWVAR 2
66315: PPUSH
66316: CALL_OW 235
// end ;
66320: PPOPN 2
66322: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
66323: LD_EXP 38
66327: PUSH
66328: LD_EXP 71
66332: AND
66333: IFFALSE 66439
66335: GO 66337
66337: DISABLE
66338: LD_INT 0
66340: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66341: LD_ADDR_VAR 0 1
66345: PUSH
66346: LD_INT 22
66348: PUSH
66349: LD_OWVAR 2
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 2
66360: PUSH
66361: LD_INT 30
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 30
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: LIST
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PPUSH
66390: CALL_OW 69
66394: ST_TO_ADDR
// if not depot then
66395: LD_VAR 0 1
66399: NOT
66400: IFFALSE 66404
// exit ;
66402: GO 66439
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
66404: LD_VAR 0 1
66408: PUSH
66409: LD_INT 1
66411: ARRAY
66412: PPUSH
66413: CALL_OW 250
66417: PPUSH
66418: LD_VAR 0 1
66422: PUSH
66423: LD_INT 1
66425: ARRAY
66426: PPUSH
66427: CALL_OW 251
66431: PPUSH
66432: LD_INT 70
66434: PPUSH
66435: CALL_OW 495
// end ;
66439: PPOPN 1
66441: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
66442: LD_EXP 38
66446: PUSH
66447: LD_EXP 72
66451: AND
66452: IFFALSE 66663
66454: GO 66456
66456: DISABLE
66457: LD_INT 0
66459: PPUSH
66460: PPUSH
66461: PPUSH
66462: PPUSH
66463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66464: LD_ADDR_VAR 0 5
66468: PUSH
66469: LD_INT 22
66471: PUSH
66472: LD_OWVAR 2
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 21
66483: PUSH
66484: LD_INT 1
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PPUSH
66495: CALL_OW 69
66499: ST_TO_ADDR
// if not tmp then
66500: LD_VAR 0 5
66504: NOT
66505: IFFALSE 66509
// exit ;
66507: GO 66663
// for i in tmp do
66509: LD_ADDR_VAR 0 1
66513: PUSH
66514: LD_VAR 0 5
66518: PUSH
66519: FOR_IN
66520: IFFALSE 66661
// begin d := rand ( 0 , 5 ) ;
66522: LD_ADDR_VAR 0 4
66526: PUSH
66527: LD_INT 0
66529: PPUSH
66530: LD_INT 5
66532: PPUSH
66533: CALL_OW 12
66537: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
66538: LD_ADDR_VAR 0 2
66542: PUSH
66543: LD_VAR 0 1
66547: PPUSH
66548: CALL_OW 250
66552: PPUSH
66553: LD_VAR 0 4
66557: PPUSH
66558: LD_INT 3
66560: PPUSH
66561: LD_INT 12
66563: PPUSH
66564: CALL_OW 12
66568: PPUSH
66569: CALL_OW 272
66573: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
66574: LD_ADDR_VAR 0 3
66578: PUSH
66579: LD_VAR 0 1
66583: PPUSH
66584: CALL_OW 251
66588: PPUSH
66589: LD_VAR 0 4
66593: PPUSH
66594: LD_INT 3
66596: PPUSH
66597: LD_INT 12
66599: PPUSH
66600: CALL_OW 12
66604: PPUSH
66605: CALL_OW 273
66609: ST_TO_ADDR
// if ValidHex ( x , y ) then
66610: LD_VAR 0 2
66614: PPUSH
66615: LD_VAR 0 3
66619: PPUSH
66620: CALL_OW 488
66624: IFFALSE 66659
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
66626: LD_VAR 0 1
66630: PPUSH
66631: LD_VAR 0 2
66635: PPUSH
66636: LD_VAR 0 3
66640: PPUSH
66641: LD_INT 3
66643: PPUSH
66644: LD_INT 6
66646: PPUSH
66647: CALL_OW 12
66651: PPUSH
66652: LD_INT 1
66654: PPUSH
66655: CALL_OW 483
// end ;
66659: GO 66519
66661: POP
66662: POP
// end ;
66663: PPOPN 5
66665: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
66666: LD_EXP 38
66670: PUSH
66671: LD_EXP 73
66675: AND
66676: IFFALSE 66770
66678: GO 66680
66680: DISABLE
66681: LD_INT 0
66683: PPUSH
66684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
66685: LD_ADDR_VAR 0 2
66689: PUSH
66690: LD_INT 22
66692: PUSH
66693: LD_OWVAR 2
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 32
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 21
66714: PUSH
66715: LD_INT 2
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: LIST
66726: PPUSH
66727: CALL_OW 69
66731: ST_TO_ADDR
// if not tmp then
66732: LD_VAR 0 2
66736: NOT
66737: IFFALSE 66741
// exit ;
66739: GO 66770
// for i in tmp do
66741: LD_ADDR_VAR 0 1
66745: PUSH
66746: LD_VAR 0 2
66750: PUSH
66751: FOR_IN
66752: IFFALSE 66768
// SetFuel ( i , 0 ) ;
66754: LD_VAR 0 1
66758: PPUSH
66759: LD_INT 0
66761: PPUSH
66762: CALL_OW 240
66766: GO 66751
66768: POP
66769: POP
// end ;
66770: PPOPN 2
66772: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
66773: LD_EXP 38
66777: PUSH
66778: LD_EXP 74
66782: AND
66783: IFFALSE 66849
66785: GO 66787
66787: DISABLE
66788: LD_INT 0
66790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
66791: LD_ADDR_VAR 0 1
66795: PUSH
66796: LD_INT 22
66798: PUSH
66799: LD_OWVAR 2
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 30
66810: PUSH
66811: LD_INT 29
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PPUSH
66822: CALL_OW 69
66826: ST_TO_ADDR
// if not tmp then
66827: LD_VAR 0 1
66831: NOT
66832: IFFALSE 66836
// exit ;
66834: GO 66849
// DestroyUnit ( tmp [ 1 ] ) ;
66836: LD_VAR 0 1
66840: PUSH
66841: LD_INT 1
66843: ARRAY
66844: PPUSH
66845: CALL_OW 65
// end ;
66849: PPOPN 1
66851: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
66852: LD_EXP 38
66856: PUSH
66857: LD_EXP 76
66861: AND
66862: IFFALSE 66991
66864: GO 66866
66866: DISABLE
66867: LD_INT 0
66869: PPUSH
// begin uc_side := 0 ;
66870: LD_ADDR_OWVAR 20
66874: PUSH
66875: LD_INT 0
66877: ST_TO_ADDR
// uc_nation := nation_arabian ;
66878: LD_ADDR_OWVAR 21
66882: PUSH
66883: LD_INT 2
66885: ST_TO_ADDR
// hc_gallery :=  ;
66886: LD_ADDR_OWVAR 33
66890: PUSH
66891: LD_STRING 
66893: ST_TO_ADDR
// hc_name :=  ;
66894: LD_ADDR_OWVAR 26
66898: PUSH
66899: LD_STRING 
66901: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
66902: LD_INT 1
66904: PPUSH
66905: LD_INT 11
66907: PPUSH
66908: LD_INT 10
66910: PPUSH
66911: CALL_OW 380
// un := CreateHuman ;
66915: LD_ADDR_VAR 0 1
66919: PUSH
66920: CALL_OW 44
66924: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66925: LD_VAR 0 1
66929: PPUSH
66930: LD_INT 1
66932: PPUSH
66933: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66937: LD_INT 35
66939: PPUSH
66940: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66944: LD_VAR 0 1
66948: PPUSH
66949: LD_INT 22
66951: PUSH
66952: LD_OWVAR 2
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PPUSH
66961: CALL_OW 69
66965: PPUSH
66966: LD_VAR 0 1
66970: PPUSH
66971: CALL_OW 74
66975: PPUSH
66976: CALL_OW 115
// until IsDead ( un ) ;
66980: LD_VAR 0 1
66984: PPUSH
66985: CALL_OW 301
66989: IFFALSE 66937
// end ;
66991: PPOPN 1
66993: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
66994: LD_EXP 38
66998: PUSH
66999: LD_EXP 78
67003: AND
67004: IFFALSE 67016
67006: GO 67008
67008: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67009: LD_STRING earthquake(getX(game), 0, 32)
67011: PPUSH
67012: CALL_OW 559
67016: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67017: LD_EXP 38
67021: PUSH
67022: LD_EXP 79
67026: AND
67027: IFFALSE 67118
67029: GO 67031
67031: DISABLE
67032: LD_INT 0
67034: PPUSH
// begin enable ;
67035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67036: LD_ADDR_VAR 0 1
67040: PUSH
67041: LD_INT 22
67043: PUSH
67044: LD_OWVAR 2
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 21
67055: PUSH
67056: LD_INT 2
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 33
67065: PUSH
67066: LD_INT 3
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: LIST
67077: PPUSH
67078: CALL_OW 69
67082: ST_TO_ADDR
// if not tmp then
67083: LD_VAR 0 1
67087: NOT
67088: IFFALSE 67092
// exit ;
67090: GO 67118
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67092: LD_VAR 0 1
67096: PUSH
67097: LD_INT 1
67099: PPUSH
67100: LD_VAR 0 1
67104: PPUSH
67105: CALL_OW 12
67109: ARRAY
67110: PPUSH
67111: LD_INT 1
67113: PPUSH
67114: CALL_OW 234
// end ;
67118: PPOPN 1
67120: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67121: LD_EXP 38
67125: PUSH
67126: LD_EXP 80
67130: AND
67131: IFFALSE 67272
67133: GO 67135
67135: DISABLE
67136: LD_INT 0
67138: PPUSH
67139: PPUSH
67140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67141: LD_ADDR_VAR 0 3
67145: PUSH
67146: LD_INT 22
67148: PUSH
67149: LD_OWVAR 2
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 25
67160: PUSH
67161: LD_INT 1
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PPUSH
67172: CALL_OW 69
67176: ST_TO_ADDR
// if not tmp then
67177: LD_VAR 0 3
67181: NOT
67182: IFFALSE 67186
// exit ;
67184: GO 67272
// un := tmp [ rand ( 1 , tmp ) ] ;
67186: LD_ADDR_VAR 0 2
67190: PUSH
67191: LD_VAR 0 3
67195: PUSH
67196: LD_INT 1
67198: PPUSH
67199: LD_VAR 0 3
67203: PPUSH
67204: CALL_OW 12
67208: ARRAY
67209: ST_TO_ADDR
// if Crawls ( un ) then
67210: LD_VAR 0 2
67214: PPUSH
67215: CALL_OW 318
67219: IFFALSE 67230
// ComWalk ( un ) ;
67221: LD_VAR 0 2
67225: PPUSH
67226: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
67230: LD_VAR 0 2
67234: PPUSH
67235: LD_INT 9
67237: PPUSH
67238: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
67242: LD_INT 28
67244: PPUSH
67245: LD_OWVAR 2
67249: PPUSH
67250: LD_INT 2
67252: PPUSH
67253: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
67257: LD_INT 29
67259: PPUSH
67260: LD_OWVAR 2
67264: PPUSH
67265: LD_INT 2
67267: PPUSH
67268: CALL_OW 322
// end ;
67272: PPOPN 3
67274: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
67275: LD_EXP 38
67279: PUSH
67280: LD_EXP 81
67284: AND
67285: IFFALSE 67396
67287: GO 67289
67289: DISABLE
67290: LD_INT 0
67292: PPUSH
67293: PPUSH
67294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67295: LD_ADDR_VAR 0 3
67299: PUSH
67300: LD_INT 22
67302: PUSH
67303: LD_OWVAR 2
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 25
67314: PUSH
67315: LD_INT 1
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PPUSH
67326: CALL_OW 69
67330: ST_TO_ADDR
// if not tmp then
67331: LD_VAR 0 3
67335: NOT
67336: IFFALSE 67340
// exit ;
67338: GO 67396
// un := tmp [ rand ( 1 , tmp ) ] ;
67340: LD_ADDR_VAR 0 2
67344: PUSH
67345: LD_VAR 0 3
67349: PUSH
67350: LD_INT 1
67352: PPUSH
67353: LD_VAR 0 3
67357: PPUSH
67358: CALL_OW 12
67362: ARRAY
67363: ST_TO_ADDR
// if Crawls ( un ) then
67364: LD_VAR 0 2
67368: PPUSH
67369: CALL_OW 318
67373: IFFALSE 67384
// ComWalk ( un ) ;
67375: LD_VAR 0 2
67379: PPUSH
67380: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67384: LD_VAR 0 2
67388: PPUSH
67389: LD_INT 8
67391: PPUSH
67392: CALL_OW 336
// end ;
67396: PPOPN 3
67398: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
67399: LD_EXP 38
67403: PUSH
67404: LD_EXP 82
67408: AND
67409: IFFALSE 67553
67411: GO 67413
67413: DISABLE
67414: LD_INT 0
67416: PPUSH
67417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
67418: LD_ADDR_VAR 0 2
67422: PUSH
67423: LD_INT 22
67425: PUSH
67426: LD_OWVAR 2
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 21
67437: PUSH
67438: LD_INT 2
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 2
67447: PUSH
67448: LD_INT 34
67450: PUSH
67451: LD_INT 12
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 34
67460: PUSH
67461: LD_INT 51
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 34
67470: PUSH
67471: LD_INT 32
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: LIST
67488: PPUSH
67489: CALL_OW 69
67493: ST_TO_ADDR
// if not tmp then
67494: LD_VAR 0 2
67498: NOT
67499: IFFALSE 67503
// exit ;
67501: GO 67553
// for i in tmp do
67503: LD_ADDR_VAR 0 1
67507: PUSH
67508: LD_VAR 0 2
67512: PUSH
67513: FOR_IN
67514: IFFALSE 67551
// if GetCargo ( i , mat_artifact ) = 0 then
67516: LD_VAR 0 1
67520: PPUSH
67521: LD_INT 4
67523: PPUSH
67524: CALL_OW 289
67528: PUSH
67529: LD_INT 0
67531: EQUAL
67532: IFFALSE 67549
// SetCargo ( i , mat_siberit , 100 ) ;
67534: LD_VAR 0 1
67538: PPUSH
67539: LD_INT 3
67541: PPUSH
67542: LD_INT 100
67544: PPUSH
67545: CALL_OW 290
67549: GO 67513
67551: POP
67552: POP
// end ;
67553: PPOPN 2
67555: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
67556: LD_EXP 38
67560: PUSH
67561: LD_EXP 83
67565: AND
67566: IFFALSE 67749
67568: GO 67570
67570: DISABLE
67571: LD_INT 0
67573: PPUSH
67574: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67575: LD_ADDR_VAR 0 2
67579: PUSH
67580: LD_INT 22
67582: PUSH
67583: LD_OWVAR 2
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PPUSH
67592: CALL_OW 69
67596: ST_TO_ADDR
// if not tmp then
67597: LD_VAR 0 2
67601: NOT
67602: IFFALSE 67606
// exit ;
67604: GO 67749
// for i := 1 to 2 do
67606: LD_ADDR_VAR 0 1
67610: PUSH
67611: DOUBLE
67612: LD_INT 1
67614: DEC
67615: ST_TO_ADDR
67616: LD_INT 2
67618: PUSH
67619: FOR_TO
67620: IFFALSE 67747
// begin uc_side := your_side ;
67622: LD_ADDR_OWVAR 20
67626: PUSH
67627: LD_OWVAR 2
67631: ST_TO_ADDR
// uc_nation := nation_american ;
67632: LD_ADDR_OWVAR 21
67636: PUSH
67637: LD_INT 1
67639: ST_TO_ADDR
// vc_chassis := us_morphling ;
67640: LD_ADDR_OWVAR 37
67644: PUSH
67645: LD_INT 5
67647: ST_TO_ADDR
// vc_engine := engine_siberite ;
67648: LD_ADDR_OWVAR 39
67652: PUSH
67653: LD_INT 3
67655: ST_TO_ADDR
// vc_control := control_computer ;
67656: LD_ADDR_OWVAR 38
67660: PUSH
67661: LD_INT 3
67663: ST_TO_ADDR
// vc_weapon := us_double_laser ;
67664: LD_ADDR_OWVAR 40
67668: PUSH
67669: LD_INT 10
67671: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
67672: LD_VAR 0 2
67676: PUSH
67677: LD_INT 1
67679: ARRAY
67680: PPUSH
67681: CALL_OW 310
67685: NOT
67686: IFFALSE 67733
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
67688: CALL_OW 45
67692: PPUSH
67693: LD_VAR 0 2
67697: PUSH
67698: LD_INT 1
67700: ARRAY
67701: PPUSH
67702: CALL_OW 250
67706: PPUSH
67707: LD_VAR 0 2
67711: PUSH
67712: LD_INT 1
67714: ARRAY
67715: PPUSH
67716: CALL_OW 251
67720: PPUSH
67721: LD_INT 12
67723: PPUSH
67724: LD_INT 1
67726: PPUSH
67727: CALL_OW 50
67731: GO 67745
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
67733: CALL_OW 45
67737: PPUSH
67738: LD_INT 1
67740: PPUSH
67741: CALL_OW 51
// end ;
67745: GO 67619
67747: POP
67748: POP
// end ;
67749: PPOPN 2
67751: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
67752: LD_EXP 38
67756: PUSH
67757: LD_EXP 84
67761: AND
67762: IFFALSE 67984
67764: GO 67766
67766: DISABLE
67767: LD_INT 0
67769: PPUSH
67770: PPUSH
67771: PPUSH
67772: PPUSH
67773: PPUSH
67774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67775: LD_ADDR_VAR 0 6
67779: PUSH
67780: LD_INT 22
67782: PUSH
67783: LD_OWVAR 2
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 21
67794: PUSH
67795: LD_INT 1
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 3
67804: PUSH
67805: LD_INT 23
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: LIST
67823: PPUSH
67824: CALL_OW 69
67828: ST_TO_ADDR
// if not tmp then
67829: LD_VAR 0 6
67833: NOT
67834: IFFALSE 67838
// exit ;
67836: GO 67984
// s1 := rand ( 1 , 4 ) ;
67838: LD_ADDR_VAR 0 2
67842: PUSH
67843: LD_INT 1
67845: PPUSH
67846: LD_INT 4
67848: PPUSH
67849: CALL_OW 12
67853: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
67854: LD_ADDR_VAR 0 4
67858: PUSH
67859: LD_VAR 0 6
67863: PUSH
67864: LD_INT 1
67866: ARRAY
67867: PPUSH
67868: LD_VAR 0 2
67872: PPUSH
67873: CALL_OW 259
67877: ST_TO_ADDR
// if s1 = 1 then
67878: LD_VAR 0 2
67882: PUSH
67883: LD_INT 1
67885: EQUAL
67886: IFFALSE 67906
// s2 := rand ( 2 , 4 ) else
67888: LD_ADDR_VAR 0 3
67892: PUSH
67893: LD_INT 2
67895: PPUSH
67896: LD_INT 4
67898: PPUSH
67899: CALL_OW 12
67903: ST_TO_ADDR
67904: GO 67914
// s2 := 1 ;
67906: LD_ADDR_VAR 0 3
67910: PUSH
67911: LD_INT 1
67913: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
67914: LD_ADDR_VAR 0 5
67918: PUSH
67919: LD_VAR 0 6
67923: PUSH
67924: LD_INT 1
67926: ARRAY
67927: PPUSH
67928: LD_VAR 0 3
67932: PPUSH
67933: CALL_OW 259
67937: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
67938: LD_VAR 0 6
67942: PUSH
67943: LD_INT 1
67945: ARRAY
67946: PPUSH
67947: LD_VAR 0 2
67951: PPUSH
67952: LD_VAR 0 5
67956: PPUSH
67957: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
67961: LD_VAR 0 6
67965: PUSH
67966: LD_INT 1
67968: ARRAY
67969: PPUSH
67970: LD_VAR 0 3
67974: PPUSH
67975: LD_VAR 0 4
67979: PPUSH
67980: CALL_OW 237
// end ;
67984: PPOPN 6
67986: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
67987: LD_EXP 38
67991: PUSH
67992: LD_EXP 85
67996: AND
67997: IFFALSE 68076
67999: GO 68001
68001: DISABLE
68002: LD_INT 0
68004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68005: LD_ADDR_VAR 0 1
68009: PUSH
68010: LD_INT 22
68012: PUSH
68013: LD_OWVAR 2
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 30
68024: PUSH
68025: LD_INT 3
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PPUSH
68036: CALL_OW 69
68040: ST_TO_ADDR
// if not tmp then
68041: LD_VAR 0 1
68045: NOT
68046: IFFALSE 68050
// exit ;
68048: GO 68076
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68050: LD_VAR 0 1
68054: PUSH
68055: LD_INT 1
68057: PPUSH
68058: LD_VAR 0 1
68062: PPUSH
68063: CALL_OW 12
68067: ARRAY
68068: PPUSH
68069: LD_INT 1
68071: PPUSH
68072: CALL_OW 234
// end ;
68076: PPOPN 1
68078: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68079: LD_EXP 38
68083: PUSH
68084: LD_EXP 86
68088: AND
68089: IFFALSE 68201
68091: GO 68093
68093: DISABLE
68094: LD_INT 0
68096: PPUSH
68097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68098: LD_ADDR_VAR 0 2
68102: PUSH
68103: LD_INT 22
68105: PUSH
68106: LD_OWVAR 2
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 2
68117: PUSH
68118: LD_INT 30
68120: PUSH
68121: LD_INT 27
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 30
68130: PUSH
68131: LD_INT 26
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 30
68140: PUSH
68141: LD_INT 28
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PPUSH
68158: CALL_OW 69
68162: ST_TO_ADDR
// if not tmp then
68163: LD_VAR 0 2
68167: NOT
68168: IFFALSE 68172
// exit ;
68170: GO 68201
// for i in tmp do
68172: LD_ADDR_VAR 0 1
68176: PUSH
68177: LD_VAR 0 2
68181: PUSH
68182: FOR_IN
68183: IFFALSE 68199
// SetLives ( i , 1 ) ;
68185: LD_VAR 0 1
68189: PPUSH
68190: LD_INT 1
68192: PPUSH
68193: CALL_OW 234
68197: GO 68182
68199: POP
68200: POP
// end ;
68201: PPOPN 2
68203: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
68204: LD_EXP 38
68208: PUSH
68209: LD_EXP 87
68213: AND
68214: IFFALSE 68501
68216: GO 68218
68218: DISABLE
68219: LD_INT 0
68221: PPUSH
68222: PPUSH
68223: PPUSH
// begin i := rand ( 1 , 7 ) ;
68224: LD_ADDR_VAR 0 1
68228: PUSH
68229: LD_INT 1
68231: PPUSH
68232: LD_INT 7
68234: PPUSH
68235: CALL_OW 12
68239: ST_TO_ADDR
// case i of 1 :
68240: LD_VAR 0 1
68244: PUSH
68245: LD_INT 1
68247: DOUBLE
68248: EQUAL
68249: IFTRUE 68253
68251: GO 68263
68253: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
68254: LD_STRING earthquake(getX(game), 0, 32)
68256: PPUSH
68257: CALL_OW 559
68261: GO 68501
68263: LD_INT 2
68265: DOUBLE
68266: EQUAL
68267: IFTRUE 68271
68269: GO 68285
68271: POP
// begin ToLua ( displayStucuk(); ) ;
68272: LD_STRING displayStucuk();
68274: PPUSH
68275: CALL_OW 559
// ResetFog ;
68279: CALL_OW 335
// end ; 3 :
68283: GO 68501
68285: LD_INT 3
68287: DOUBLE
68288: EQUAL
68289: IFTRUE 68293
68291: GO 68397
68293: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68294: LD_ADDR_VAR 0 2
68298: PUSH
68299: LD_INT 22
68301: PUSH
68302: LD_OWVAR 2
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 25
68313: PUSH
68314: LD_INT 1
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PPUSH
68325: CALL_OW 69
68329: ST_TO_ADDR
// if not tmp then
68330: LD_VAR 0 2
68334: NOT
68335: IFFALSE 68339
// exit ;
68337: GO 68501
// un := tmp [ rand ( 1 , tmp ) ] ;
68339: LD_ADDR_VAR 0 3
68343: PUSH
68344: LD_VAR 0 2
68348: PUSH
68349: LD_INT 1
68351: PPUSH
68352: LD_VAR 0 2
68356: PPUSH
68357: CALL_OW 12
68361: ARRAY
68362: ST_TO_ADDR
// if Crawls ( un ) then
68363: LD_VAR 0 3
68367: PPUSH
68368: CALL_OW 318
68372: IFFALSE 68383
// ComWalk ( un ) ;
68374: LD_VAR 0 3
68378: PPUSH
68379: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68383: LD_VAR 0 3
68387: PPUSH
68388: LD_INT 8
68390: PPUSH
68391: CALL_OW 336
// end ; 4 :
68395: GO 68501
68397: LD_INT 4
68399: DOUBLE
68400: EQUAL
68401: IFTRUE 68405
68403: GO 68479
68405: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68406: LD_ADDR_VAR 0 2
68410: PUSH
68411: LD_INT 22
68413: PUSH
68414: LD_OWVAR 2
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 30
68425: PUSH
68426: LD_INT 29
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PPUSH
68437: CALL_OW 69
68441: ST_TO_ADDR
// if not tmp then
68442: LD_VAR 0 2
68446: NOT
68447: IFFALSE 68451
// exit ;
68449: GO 68501
// CenterNowOnUnits ( tmp [ 1 ] ) ;
68451: LD_VAR 0 2
68455: PUSH
68456: LD_INT 1
68458: ARRAY
68459: PPUSH
68460: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
68464: LD_VAR 0 2
68468: PUSH
68469: LD_INT 1
68471: ARRAY
68472: PPUSH
68473: CALL_OW 65
// end ; 5 .. 7 :
68477: GO 68501
68479: LD_INT 5
68481: DOUBLE
68482: GREATEREQUAL
68483: IFFALSE 68491
68485: LD_INT 7
68487: DOUBLE
68488: LESSEQUAL
68489: IFTRUE 68493
68491: GO 68500
68493: POP
// StreamSibBomb ; end ;
68494: CALL 64738 0 0
68498: GO 68501
68500: POP
// end ;
68501: PPOPN 3
68503: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
68504: LD_EXP 38
68508: PUSH
68509: LD_EXP 88
68513: AND
68514: IFFALSE 68670
68516: GO 68518
68518: DISABLE
68519: LD_INT 0
68521: PPUSH
68522: PPUSH
68523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
68524: LD_ADDR_VAR 0 2
68528: PUSH
68529: LD_INT 81
68531: PUSH
68532: LD_OWVAR 2
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 2
68543: PUSH
68544: LD_INT 21
68546: PUSH
68547: LD_INT 1
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 21
68556: PUSH
68557: LD_INT 2
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: LIST
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PPUSH
68573: CALL_OW 69
68577: ST_TO_ADDR
// if not tmp then
68578: LD_VAR 0 2
68582: NOT
68583: IFFALSE 68587
// exit ;
68585: GO 68670
// p := 0 ;
68587: LD_ADDR_VAR 0 3
68591: PUSH
68592: LD_INT 0
68594: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68595: LD_INT 35
68597: PPUSH
68598: CALL_OW 67
// p := p + 1 ;
68602: LD_ADDR_VAR 0 3
68606: PUSH
68607: LD_VAR 0 3
68611: PUSH
68612: LD_INT 1
68614: PLUS
68615: ST_TO_ADDR
// for i in tmp do
68616: LD_ADDR_VAR 0 1
68620: PUSH
68621: LD_VAR 0 2
68625: PUSH
68626: FOR_IN
68627: IFFALSE 68658
// if GetLives ( i ) < 1000 then
68629: LD_VAR 0 1
68633: PPUSH
68634: CALL_OW 256
68638: PUSH
68639: LD_INT 1000
68641: LESS
68642: IFFALSE 68656
// SetLives ( i , 1000 ) ;
68644: LD_VAR 0 1
68648: PPUSH
68649: LD_INT 1000
68651: PPUSH
68652: CALL_OW 234
68656: GO 68626
68658: POP
68659: POP
// until p > 20 ;
68660: LD_VAR 0 3
68664: PUSH
68665: LD_INT 20
68667: GREATER
68668: IFFALSE 68595
// end ;
68670: PPOPN 3
68672: END
// every 0 0$1 trigger StreamModeActive and sTime do
68673: LD_EXP 38
68677: PUSH
68678: LD_EXP 89
68682: AND
68683: IFFALSE 68718
68685: GO 68687
68687: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
68688: LD_INT 28
68690: PPUSH
68691: LD_OWVAR 2
68695: PPUSH
68696: LD_INT 2
68698: PPUSH
68699: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
68703: LD_INT 30
68705: PPUSH
68706: LD_OWVAR 2
68710: PPUSH
68711: LD_INT 2
68713: PPUSH
68714: CALL_OW 322
// end ;
68718: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
68719: LD_EXP 38
68723: PUSH
68724: LD_EXP 90
68728: AND
68729: IFFALSE 68850
68731: GO 68733
68733: DISABLE
68734: LD_INT 0
68736: PPUSH
68737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68738: LD_ADDR_VAR 0 2
68742: PUSH
68743: LD_INT 22
68745: PUSH
68746: LD_OWVAR 2
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 21
68757: PUSH
68758: LD_INT 1
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 3
68767: PUSH
68768: LD_INT 23
68770: PUSH
68771: LD_INT 0
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: LIST
68786: PPUSH
68787: CALL_OW 69
68791: ST_TO_ADDR
// if not tmp then
68792: LD_VAR 0 2
68796: NOT
68797: IFFALSE 68801
// exit ;
68799: GO 68850
// for i in tmp do
68801: LD_ADDR_VAR 0 1
68805: PUSH
68806: LD_VAR 0 2
68810: PUSH
68811: FOR_IN
68812: IFFALSE 68848
// begin if Crawls ( i ) then
68814: LD_VAR 0 1
68818: PPUSH
68819: CALL_OW 318
68823: IFFALSE 68834
// ComWalk ( i ) ;
68825: LD_VAR 0 1
68829: PPUSH
68830: CALL_OW 138
// SetClass ( i , 2 ) ;
68834: LD_VAR 0 1
68838: PPUSH
68839: LD_INT 2
68841: PPUSH
68842: CALL_OW 336
// end ;
68846: GO 68811
68848: POP
68849: POP
// end ;
68850: PPOPN 2
68852: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
68853: LD_EXP 38
68857: PUSH
68858: LD_EXP 91
68862: AND
68863: IFFALSE 69151
68865: GO 68867
68867: DISABLE
68868: LD_INT 0
68870: PPUSH
68871: PPUSH
68872: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
68873: LD_OWVAR 2
68877: PPUSH
68878: LD_INT 9
68880: PPUSH
68881: LD_INT 1
68883: PPUSH
68884: LD_INT 1
68886: PPUSH
68887: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
68891: LD_INT 9
68893: PPUSH
68894: LD_OWVAR 2
68898: PPUSH
68899: CALL_OW 343
// uc_side := 9 ;
68903: LD_ADDR_OWVAR 20
68907: PUSH
68908: LD_INT 9
68910: ST_TO_ADDR
// uc_nation := 2 ;
68911: LD_ADDR_OWVAR 21
68915: PUSH
68916: LD_INT 2
68918: ST_TO_ADDR
// hc_name := Dark Warrior ;
68919: LD_ADDR_OWVAR 26
68923: PUSH
68924: LD_STRING Dark Warrior
68926: ST_TO_ADDR
// hc_gallery :=  ;
68927: LD_ADDR_OWVAR 33
68931: PUSH
68932: LD_STRING 
68934: ST_TO_ADDR
// hc_noskilllimit := true ;
68935: LD_ADDR_OWVAR 76
68939: PUSH
68940: LD_INT 1
68942: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
68943: LD_ADDR_OWVAR 31
68947: PUSH
68948: LD_INT 30
68950: PUSH
68951: LD_INT 30
68953: PUSH
68954: LD_INT 30
68956: PUSH
68957: LD_INT 30
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: ST_TO_ADDR
// un := CreateHuman ;
68966: LD_ADDR_VAR 0 3
68970: PUSH
68971: CALL_OW 44
68975: ST_TO_ADDR
// hc_noskilllimit := false ;
68976: LD_ADDR_OWVAR 76
68980: PUSH
68981: LD_INT 0
68983: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68984: LD_VAR 0 3
68988: PPUSH
68989: LD_INT 1
68991: PPUSH
68992: CALL_OW 51
// ToLua ( playRanger() ) ;
68996: LD_STRING playRanger()
68998: PPUSH
68999: CALL_OW 559
// p := 0 ;
69003: LD_ADDR_VAR 0 2
69007: PUSH
69008: LD_INT 0
69010: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69011: LD_INT 35
69013: PPUSH
69014: CALL_OW 67
// p := p + 1 ;
69018: LD_ADDR_VAR 0 2
69022: PUSH
69023: LD_VAR 0 2
69027: PUSH
69028: LD_INT 1
69030: PLUS
69031: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69032: LD_VAR 0 3
69036: PPUSH
69037: CALL_OW 256
69041: PUSH
69042: LD_INT 1000
69044: LESS
69045: IFFALSE 69059
// SetLives ( un , 1000 ) ;
69047: LD_VAR 0 3
69051: PPUSH
69052: LD_INT 1000
69054: PPUSH
69055: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69059: LD_VAR 0 3
69063: PPUSH
69064: LD_INT 81
69066: PUSH
69067: LD_OWVAR 2
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 91
69078: PUSH
69079: LD_VAR 0 3
69083: PUSH
69084: LD_INT 30
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: LIST
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PPUSH
69096: CALL_OW 69
69100: PPUSH
69101: LD_VAR 0 3
69105: PPUSH
69106: CALL_OW 74
69110: PPUSH
69111: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
69115: LD_VAR 0 2
69119: PUSH
69120: LD_INT 80
69122: GREATER
69123: PUSH
69124: LD_VAR 0 3
69128: PPUSH
69129: CALL_OW 301
69133: OR
69134: IFFALSE 69011
// if un then
69136: LD_VAR 0 3
69140: IFFALSE 69151
// RemoveUnit ( un ) ;
69142: LD_VAR 0 3
69146: PPUSH
69147: CALL_OW 64
// end ;
69151: PPOPN 3
69153: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
69154: LD_EXP 92
69158: IFFALSE 69274
69160: GO 69162
69162: DISABLE
69163: LD_INT 0
69165: PPUSH
69166: PPUSH
69167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69168: LD_ADDR_VAR 0 2
69172: PUSH
69173: LD_INT 81
69175: PUSH
69176: LD_OWVAR 2
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 21
69187: PUSH
69188: LD_INT 1
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PPUSH
69199: CALL_OW 69
69203: ST_TO_ADDR
// ToLua ( playComputer() ) ;
69204: LD_STRING playComputer()
69206: PPUSH
69207: CALL_OW 559
// if not tmp then
69211: LD_VAR 0 2
69215: NOT
69216: IFFALSE 69220
// exit ;
69218: GO 69274
// for i in tmp do
69220: LD_ADDR_VAR 0 1
69224: PUSH
69225: LD_VAR 0 2
69229: PUSH
69230: FOR_IN
69231: IFFALSE 69272
// for j := 1 to 4 do
69233: LD_ADDR_VAR 0 3
69237: PUSH
69238: DOUBLE
69239: LD_INT 1
69241: DEC
69242: ST_TO_ADDR
69243: LD_INT 4
69245: PUSH
69246: FOR_TO
69247: IFFALSE 69268
// SetSkill ( i , j , 10 ) ;
69249: LD_VAR 0 1
69253: PPUSH
69254: LD_VAR 0 3
69258: PPUSH
69259: LD_INT 10
69261: PPUSH
69262: CALL_OW 237
69266: GO 69246
69268: POP
69269: POP
69270: GO 69230
69272: POP
69273: POP
// end ;
69274: PPOPN 3
69276: END
// every 0 0$1 trigger s30 do var i , tmp ;
69277: LD_EXP 93
69281: IFFALSE 69350
69283: GO 69285
69285: DISABLE
69286: LD_INT 0
69288: PPUSH
69289: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69290: LD_ADDR_VAR 0 2
69294: PUSH
69295: LD_INT 22
69297: PUSH
69298: LD_OWVAR 2
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PPUSH
69307: CALL_OW 69
69311: ST_TO_ADDR
// if not tmp then
69312: LD_VAR 0 2
69316: NOT
69317: IFFALSE 69321
// exit ;
69319: GO 69350
// for i in tmp do
69321: LD_ADDR_VAR 0 1
69325: PUSH
69326: LD_VAR 0 2
69330: PUSH
69331: FOR_IN
69332: IFFALSE 69348
// SetLives ( i , 300 ) ;
69334: LD_VAR 0 1
69338: PPUSH
69339: LD_INT 300
69341: PPUSH
69342: CALL_OW 234
69346: GO 69331
69348: POP
69349: POP
// end ;
69350: PPOPN 2
69352: END
// every 0 0$1 trigger s60 do var i , tmp ;
69353: LD_EXP 94
69357: IFFALSE 69426
69359: GO 69361
69361: DISABLE
69362: LD_INT 0
69364: PPUSH
69365: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69366: LD_ADDR_VAR 0 2
69370: PUSH
69371: LD_INT 22
69373: PUSH
69374: LD_OWVAR 2
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PPUSH
69383: CALL_OW 69
69387: ST_TO_ADDR
// if not tmp then
69388: LD_VAR 0 2
69392: NOT
69393: IFFALSE 69397
// exit ;
69395: GO 69426
// for i in tmp do
69397: LD_ADDR_VAR 0 1
69401: PUSH
69402: LD_VAR 0 2
69406: PUSH
69407: FOR_IN
69408: IFFALSE 69424
// SetLives ( i , 600 ) ;
69410: LD_VAR 0 1
69414: PPUSH
69415: LD_INT 600
69417: PPUSH
69418: CALL_OW 234
69422: GO 69407
69424: POP
69425: POP
// end ;
69426: PPOPN 2
69428: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69429: LD_INT 0
69431: PPUSH
// case cmd of 301 :
69432: LD_VAR 0 1
69436: PUSH
69437: LD_INT 301
69439: DOUBLE
69440: EQUAL
69441: IFTRUE 69445
69443: GO 69477
69445: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
69446: LD_VAR 0 6
69450: PPUSH
69451: LD_VAR 0 7
69455: PPUSH
69456: LD_VAR 0 8
69460: PPUSH
69461: LD_VAR 0 4
69465: PPUSH
69466: LD_VAR 0 5
69470: PPUSH
69471: CALL 70686 0 5
69475: GO 69598
69477: LD_INT 302
69479: DOUBLE
69480: EQUAL
69481: IFTRUE 69485
69483: GO 69522
69485: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
69486: LD_VAR 0 6
69490: PPUSH
69491: LD_VAR 0 7
69495: PPUSH
69496: LD_VAR 0 8
69500: PPUSH
69501: LD_VAR 0 9
69505: PPUSH
69506: LD_VAR 0 4
69510: PPUSH
69511: LD_VAR 0 5
69515: PPUSH
69516: CALL 70777 0 6
69520: GO 69598
69522: LD_INT 303
69524: DOUBLE
69525: EQUAL
69526: IFTRUE 69530
69528: GO 69567
69530: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
69531: LD_VAR 0 6
69535: PPUSH
69536: LD_VAR 0 7
69540: PPUSH
69541: LD_VAR 0 8
69545: PPUSH
69546: LD_VAR 0 9
69550: PPUSH
69551: LD_VAR 0 4
69555: PPUSH
69556: LD_VAR 0 5
69560: PPUSH
69561: CALL 69603 0 6
69565: GO 69598
69567: LD_INT 304
69569: DOUBLE
69570: EQUAL
69571: IFTRUE 69575
69573: GO 69597
69575: POP
// hHackTeleport ( unit , x , y ) ; end ;
69576: LD_VAR 0 2
69580: PPUSH
69581: LD_VAR 0 4
69585: PPUSH
69586: LD_VAR 0 5
69590: PPUSH
69591: CALL 71370 0 3
69595: GO 69598
69597: POP
// end ;
69598: LD_VAR 0 12
69602: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
69603: LD_INT 0
69605: PPUSH
69606: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
69607: LD_VAR 0 1
69611: PUSH
69612: LD_INT 1
69614: LESS
69615: PUSH
69616: LD_VAR 0 1
69620: PUSH
69621: LD_INT 3
69623: GREATER
69624: OR
69625: PUSH
69626: LD_VAR 0 5
69630: PPUSH
69631: LD_VAR 0 6
69635: PPUSH
69636: CALL_OW 428
69640: OR
69641: IFFALSE 69645
// exit ;
69643: GO 70373
// uc_side := your_side ;
69645: LD_ADDR_OWVAR 20
69649: PUSH
69650: LD_OWVAR 2
69654: ST_TO_ADDR
// uc_nation := nation ;
69655: LD_ADDR_OWVAR 21
69659: PUSH
69660: LD_VAR 0 1
69664: ST_TO_ADDR
// bc_level = 1 ;
69665: LD_ADDR_OWVAR 43
69669: PUSH
69670: LD_INT 1
69672: ST_TO_ADDR
// case btype of 1 :
69673: LD_VAR 0 2
69677: PUSH
69678: LD_INT 1
69680: DOUBLE
69681: EQUAL
69682: IFTRUE 69686
69684: GO 69697
69686: POP
// bc_type := b_depot ; 2 :
69687: LD_ADDR_OWVAR 42
69691: PUSH
69692: LD_INT 0
69694: ST_TO_ADDR
69695: GO 70317
69697: LD_INT 2
69699: DOUBLE
69700: EQUAL
69701: IFTRUE 69705
69703: GO 69716
69705: POP
// bc_type := b_warehouse ; 3 :
69706: LD_ADDR_OWVAR 42
69710: PUSH
69711: LD_INT 1
69713: ST_TO_ADDR
69714: GO 70317
69716: LD_INT 3
69718: DOUBLE
69719: EQUAL
69720: IFTRUE 69724
69722: GO 69735
69724: POP
// bc_type := b_lab ; 4 .. 9 :
69725: LD_ADDR_OWVAR 42
69729: PUSH
69730: LD_INT 6
69732: ST_TO_ADDR
69733: GO 70317
69735: LD_INT 4
69737: DOUBLE
69738: GREATEREQUAL
69739: IFFALSE 69747
69741: LD_INT 9
69743: DOUBLE
69744: LESSEQUAL
69745: IFTRUE 69749
69747: GO 69809
69749: POP
// begin bc_type := b_lab_half ;
69750: LD_ADDR_OWVAR 42
69754: PUSH
69755: LD_INT 7
69757: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
69758: LD_ADDR_OWVAR 44
69762: PUSH
69763: LD_INT 10
69765: PUSH
69766: LD_INT 11
69768: PUSH
69769: LD_INT 12
69771: PUSH
69772: LD_INT 15
69774: PUSH
69775: LD_INT 14
69777: PUSH
69778: LD_INT 13
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: PUSH
69789: LD_VAR 0 2
69793: PUSH
69794: LD_INT 3
69796: MINUS
69797: ARRAY
69798: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
69799: LD_ADDR_OWVAR 45
69803: PUSH
69804: LD_INT 9
69806: ST_TO_ADDR
// end ; 10 .. 13 :
69807: GO 70317
69809: LD_INT 10
69811: DOUBLE
69812: GREATEREQUAL
69813: IFFALSE 69821
69815: LD_INT 13
69817: DOUBLE
69818: LESSEQUAL
69819: IFTRUE 69823
69821: GO 69900
69823: POP
// begin bc_type := b_lab_full ;
69824: LD_ADDR_OWVAR 42
69828: PUSH
69829: LD_INT 8
69831: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
69832: LD_ADDR_OWVAR 44
69836: PUSH
69837: LD_INT 10
69839: PUSH
69840: LD_INT 12
69842: PUSH
69843: LD_INT 14
69845: PUSH
69846: LD_INT 13
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: PUSH
69855: LD_VAR 0 2
69859: PUSH
69860: LD_INT 9
69862: MINUS
69863: ARRAY
69864: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
69865: LD_ADDR_OWVAR 45
69869: PUSH
69870: LD_INT 11
69872: PUSH
69873: LD_INT 15
69875: PUSH
69876: LD_INT 12
69878: PUSH
69879: LD_INT 15
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: PUSH
69888: LD_VAR 0 2
69892: PUSH
69893: LD_INT 9
69895: MINUS
69896: ARRAY
69897: ST_TO_ADDR
// end ; 14 :
69898: GO 70317
69900: LD_INT 14
69902: DOUBLE
69903: EQUAL
69904: IFTRUE 69908
69906: GO 69919
69908: POP
// bc_type := b_workshop ; 15 :
69909: LD_ADDR_OWVAR 42
69913: PUSH
69914: LD_INT 2
69916: ST_TO_ADDR
69917: GO 70317
69919: LD_INT 15
69921: DOUBLE
69922: EQUAL
69923: IFTRUE 69927
69925: GO 69938
69927: POP
// bc_type := b_factory ; 16 :
69928: LD_ADDR_OWVAR 42
69932: PUSH
69933: LD_INT 3
69935: ST_TO_ADDR
69936: GO 70317
69938: LD_INT 16
69940: DOUBLE
69941: EQUAL
69942: IFTRUE 69946
69944: GO 69957
69946: POP
// bc_type := b_ext_gun ; 17 :
69947: LD_ADDR_OWVAR 42
69951: PUSH
69952: LD_INT 17
69954: ST_TO_ADDR
69955: GO 70317
69957: LD_INT 17
69959: DOUBLE
69960: EQUAL
69961: IFTRUE 69965
69963: GO 69993
69965: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
69966: LD_ADDR_OWVAR 42
69970: PUSH
69971: LD_INT 19
69973: PUSH
69974: LD_INT 23
69976: PUSH
69977: LD_INT 19
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: LIST
69984: PUSH
69985: LD_VAR 0 1
69989: ARRAY
69990: ST_TO_ADDR
69991: GO 70317
69993: LD_INT 18
69995: DOUBLE
69996: EQUAL
69997: IFTRUE 70001
69999: GO 70012
70001: POP
// bc_type := b_ext_radar ; 19 :
70002: LD_ADDR_OWVAR 42
70006: PUSH
70007: LD_INT 20
70009: ST_TO_ADDR
70010: GO 70317
70012: LD_INT 19
70014: DOUBLE
70015: EQUAL
70016: IFTRUE 70020
70018: GO 70031
70020: POP
// bc_type := b_ext_radio ; 20 :
70021: LD_ADDR_OWVAR 42
70025: PUSH
70026: LD_INT 22
70028: ST_TO_ADDR
70029: GO 70317
70031: LD_INT 20
70033: DOUBLE
70034: EQUAL
70035: IFTRUE 70039
70037: GO 70050
70039: POP
// bc_type := b_ext_siberium ; 21 :
70040: LD_ADDR_OWVAR 42
70044: PUSH
70045: LD_INT 21
70047: ST_TO_ADDR
70048: GO 70317
70050: LD_INT 21
70052: DOUBLE
70053: EQUAL
70054: IFTRUE 70058
70056: GO 70069
70058: POP
// bc_type := b_ext_computer ; 22 :
70059: LD_ADDR_OWVAR 42
70063: PUSH
70064: LD_INT 24
70066: ST_TO_ADDR
70067: GO 70317
70069: LD_INT 22
70071: DOUBLE
70072: EQUAL
70073: IFTRUE 70077
70075: GO 70088
70077: POP
// bc_type := b_ext_track ; 23 :
70078: LD_ADDR_OWVAR 42
70082: PUSH
70083: LD_INT 16
70085: ST_TO_ADDR
70086: GO 70317
70088: LD_INT 23
70090: DOUBLE
70091: EQUAL
70092: IFTRUE 70096
70094: GO 70107
70096: POP
// bc_type := b_ext_laser ; 24 :
70097: LD_ADDR_OWVAR 42
70101: PUSH
70102: LD_INT 25
70104: ST_TO_ADDR
70105: GO 70317
70107: LD_INT 24
70109: DOUBLE
70110: EQUAL
70111: IFTRUE 70115
70113: GO 70126
70115: POP
// bc_type := b_control_tower ; 25 :
70116: LD_ADDR_OWVAR 42
70120: PUSH
70121: LD_INT 36
70123: ST_TO_ADDR
70124: GO 70317
70126: LD_INT 25
70128: DOUBLE
70129: EQUAL
70130: IFTRUE 70134
70132: GO 70145
70134: POP
// bc_type := b_breastwork ; 26 :
70135: LD_ADDR_OWVAR 42
70139: PUSH
70140: LD_INT 31
70142: ST_TO_ADDR
70143: GO 70317
70145: LD_INT 26
70147: DOUBLE
70148: EQUAL
70149: IFTRUE 70153
70151: GO 70164
70153: POP
// bc_type := b_bunker ; 27 :
70154: LD_ADDR_OWVAR 42
70158: PUSH
70159: LD_INT 32
70161: ST_TO_ADDR
70162: GO 70317
70164: LD_INT 27
70166: DOUBLE
70167: EQUAL
70168: IFTRUE 70172
70170: GO 70183
70172: POP
// bc_type := b_turret ; 28 :
70173: LD_ADDR_OWVAR 42
70177: PUSH
70178: LD_INT 33
70180: ST_TO_ADDR
70181: GO 70317
70183: LD_INT 28
70185: DOUBLE
70186: EQUAL
70187: IFTRUE 70191
70189: GO 70202
70191: POP
// bc_type := b_armoury ; 29 :
70192: LD_ADDR_OWVAR 42
70196: PUSH
70197: LD_INT 4
70199: ST_TO_ADDR
70200: GO 70317
70202: LD_INT 29
70204: DOUBLE
70205: EQUAL
70206: IFTRUE 70210
70208: GO 70221
70210: POP
// bc_type := b_barracks ; 30 :
70211: LD_ADDR_OWVAR 42
70215: PUSH
70216: LD_INT 5
70218: ST_TO_ADDR
70219: GO 70317
70221: LD_INT 30
70223: DOUBLE
70224: EQUAL
70225: IFTRUE 70229
70227: GO 70240
70229: POP
// bc_type := b_solar_power ; 31 :
70230: LD_ADDR_OWVAR 42
70234: PUSH
70235: LD_INT 27
70237: ST_TO_ADDR
70238: GO 70317
70240: LD_INT 31
70242: DOUBLE
70243: EQUAL
70244: IFTRUE 70248
70246: GO 70259
70248: POP
// bc_type := b_oil_power ; 32 :
70249: LD_ADDR_OWVAR 42
70253: PUSH
70254: LD_INT 26
70256: ST_TO_ADDR
70257: GO 70317
70259: LD_INT 32
70261: DOUBLE
70262: EQUAL
70263: IFTRUE 70267
70265: GO 70278
70267: POP
// bc_type := b_siberite_power ; 33 :
70268: LD_ADDR_OWVAR 42
70272: PUSH
70273: LD_INT 28
70275: ST_TO_ADDR
70276: GO 70317
70278: LD_INT 33
70280: DOUBLE
70281: EQUAL
70282: IFTRUE 70286
70284: GO 70297
70286: POP
// bc_type := b_oil_mine ; 34 :
70287: LD_ADDR_OWVAR 42
70291: PUSH
70292: LD_INT 29
70294: ST_TO_ADDR
70295: GO 70317
70297: LD_INT 34
70299: DOUBLE
70300: EQUAL
70301: IFTRUE 70305
70303: GO 70316
70305: POP
// bc_type := b_siberite_mine ; end ;
70306: LD_ADDR_OWVAR 42
70310: PUSH
70311: LD_INT 30
70313: ST_TO_ADDR
70314: GO 70317
70316: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70317: LD_ADDR_VAR 0 8
70321: PUSH
70322: LD_VAR 0 5
70326: PPUSH
70327: LD_VAR 0 6
70331: PPUSH
70332: LD_VAR 0 3
70336: PPUSH
70337: CALL_OW 47
70341: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70342: LD_OWVAR 42
70346: PUSH
70347: LD_INT 32
70349: PUSH
70350: LD_INT 33
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: IN
70357: IFFALSE 70373
// PlaceWeaponTurret ( b , weapon ) ;
70359: LD_VAR 0 8
70363: PPUSH
70364: LD_VAR 0 4
70368: PPUSH
70369: CALL_OW 431
// end ;
70373: LD_VAR 0 7
70377: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70378: LD_INT 0
70380: PPUSH
70381: PPUSH
70382: PPUSH
70383: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70384: LD_ADDR_VAR 0 4
70388: PUSH
70389: LD_INT 22
70391: PUSH
70392: LD_OWVAR 2
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 2
70403: PUSH
70404: LD_INT 30
70406: PUSH
70407: LD_INT 0
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 30
70416: PUSH
70417: LD_INT 1
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: LIST
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PPUSH
70433: CALL_OW 69
70437: ST_TO_ADDR
// if not tmp then
70438: LD_VAR 0 4
70442: NOT
70443: IFFALSE 70447
// exit ;
70445: GO 70506
// for i in tmp do
70447: LD_ADDR_VAR 0 2
70451: PUSH
70452: LD_VAR 0 4
70456: PUSH
70457: FOR_IN
70458: IFFALSE 70504
// for j = 1 to 3 do
70460: LD_ADDR_VAR 0 3
70464: PUSH
70465: DOUBLE
70466: LD_INT 1
70468: DEC
70469: ST_TO_ADDR
70470: LD_INT 3
70472: PUSH
70473: FOR_TO
70474: IFFALSE 70500
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70476: LD_VAR 0 2
70480: PPUSH
70481: CALL_OW 274
70485: PPUSH
70486: LD_VAR 0 3
70490: PPUSH
70491: LD_INT 99999
70493: PPUSH
70494: CALL_OW 277
70498: GO 70473
70500: POP
70501: POP
70502: GO 70457
70504: POP
70505: POP
// end ;
70506: LD_VAR 0 1
70510: RET
// export function hHackSetLevel10 ; var i , j ; begin
70511: LD_INT 0
70513: PPUSH
70514: PPUSH
70515: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70516: LD_ADDR_VAR 0 2
70520: PUSH
70521: LD_INT 21
70523: PUSH
70524: LD_INT 1
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PPUSH
70531: CALL_OW 69
70535: PUSH
70536: FOR_IN
70537: IFFALSE 70589
// if IsSelected ( i ) then
70539: LD_VAR 0 2
70543: PPUSH
70544: CALL_OW 306
70548: IFFALSE 70587
// begin for j := 1 to 4 do
70550: LD_ADDR_VAR 0 3
70554: PUSH
70555: DOUBLE
70556: LD_INT 1
70558: DEC
70559: ST_TO_ADDR
70560: LD_INT 4
70562: PUSH
70563: FOR_TO
70564: IFFALSE 70585
// SetSkill ( i , j , 10 ) ;
70566: LD_VAR 0 2
70570: PPUSH
70571: LD_VAR 0 3
70575: PPUSH
70576: LD_INT 10
70578: PPUSH
70579: CALL_OW 237
70583: GO 70563
70585: POP
70586: POP
// end ;
70587: GO 70536
70589: POP
70590: POP
// end ;
70591: LD_VAR 0 1
70595: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
70596: LD_INT 0
70598: PPUSH
70599: PPUSH
70600: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
70601: LD_ADDR_VAR 0 2
70605: PUSH
70606: LD_INT 22
70608: PUSH
70609: LD_OWVAR 2
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 21
70620: PUSH
70621: LD_INT 1
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PPUSH
70632: CALL_OW 69
70636: PUSH
70637: FOR_IN
70638: IFFALSE 70679
// begin for j := 1 to 4 do
70640: LD_ADDR_VAR 0 3
70644: PUSH
70645: DOUBLE
70646: LD_INT 1
70648: DEC
70649: ST_TO_ADDR
70650: LD_INT 4
70652: PUSH
70653: FOR_TO
70654: IFFALSE 70675
// SetSkill ( i , j , 10 ) ;
70656: LD_VAR 0 2
70660: PPUSH
70661: LD_VAR 0 3
70665: PPUSH
70666: LD_INT 10
70668: PPUSH
70669: CALL_OW 237
70673: GO 70653
70675: POP
70676: POP
// end ;
70677: GO 70637
70679: POP
70680: POP
// end ;
70681: LD_VAR 0 1
70685: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
70686: LD_INT 0
70688: PPUSH
// uc_side := your_side ;
70689: LD_ADDR_OWVAR 20
70693: PUSH
70694: LD_OWVAR 2
70698: ST_TO_ADDR
// uc_nation := nation ;
70699: LD_ADDR_OWVAR 21
70703: PUSH
70704: LD_VAR 0 1
70708: ST_TO_ADDR
// InitHc ;
70709: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
70713: LD_INT 0
70715: PPUSH
70716: LD_VAR 0 2
70720: PPUSH
70721: LD_VAR 0 3
70725: PPUSH
70726: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
70730: LD_VAR 0 4
70734: PPUSH
70735: LD_VAR 0 5
70739: PPUSH
70740: CALL_OW 428
70744: PUSH
70745: LD_INT 0
70747: EQUAL
70748: IFFALSE 70772
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
70750: CALL_OW 44
70754: PPUSH
70755: LD_VAR 0 4
70759: PPUSH
70760: LD_VAR 0 5
70764: PPUSH
70765: LD_INT 1
70767: PPUSH
70768: CALL_OW 48
// end ;
70772: LD_VAR 0 6
70776: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
70777: LD_INT 0
70779: PPUSH
70780: PPUSH
// uc_side := your_side ;
70781: LD_ADDR_OWVAR 20
70785: PUSH
70786: LD_OWVAR 2
70790: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
70791: LD_VAR 0 1
70795: PUSH
70796: LD_INT 1
70798: PUSH
70799: LD_INT 2
70801: PUSH
70802: LD_INT 3
70804: PUSH
70805: LD_INT 4
70807: PUSH
70808: LD_INT 5
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: IN
70818: IFFALSE 70830
// uc_nation := nation_american else
70820: LD_ADDR_OWVAR 21
70824: PUSH
70825: LD_INT 1
70827: ST_TO_ADDR
70828: GO 70873
// if chassis in [ 11 , 12 , 13 , 14 ] then
70830: LD_VAR 0 1
70834: PUSH
70835: LD_INT 11
70837: PUSH
70838: LD_INT 12
70840: PUSH
70841: LD_INT 13
70843: PUSH
70844: LD_INT 14
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: IN
70853: IFFALSE 70865
// uc_nation := nation_arabian else
70855: LD_ADDR_OWVAR 21
70859: PUSH
70860: LD_INT 2
70862: ST_TO_ADDR
70863: GO 70873
// uc_nation := nation_russian ;
70865: LD_ADDR_OWVAR 21
70869: PUSH
70870: LD_INT 3
70872: ST_TO_ADDR
// vc_chassis := chassis ;
70873: LD_ADDR_OWVAR 37
70877: PUSH
70878: LD_VAR 0 1
70882: ST_TO_ADDR
// vc_engine := engine ;
70883: LD_ADDR_OWVAR 39
70887: PUSH
70888: LD_VAR 0 2
70892: ST_TO_ADDR
// vc_control := control ;
70893: LD_ADDR_OWVAR 38
70897: PUSH
70898: LD_VAR 0 3
70902: ST_TO_ADDR
// vc_weapon := weapon ;
70903: LD_ADDR_OWVAR 40
70907: PUSH
70908: LD_VAR 0 4
70912: ST_TO_ADDR
// un := CreateVehicle ;
70913: LD_ADDR_VAR 0 8
70917: PUSH
70918: CALL_OW 45
70922: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
70923: LD_VAR 0 8
70927: PPUSH
70928: LD_INT 0
70930: PPUSH
70931: LD_INT 5
70933: PPUSH
70934: CALL_OW 12
70938: PPUSH
70939: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
70943: LD_VAR 0 8
70947: PPUSH
70948: LD_VAR 0 5
70952: PPUSH
70953: LD_VAR 0 6
70957: PPUSH
70958: LD_INT 1
70960: PPUSH
70961: CALL_OW 48
// end ;
70965: LD_VAR 0 7
70969: RET
// export hInvincible ; every 1 do
70970: GO 70972
70972: DISABLE
// hInvincible := [ ] ;
70973: LD_ADDR_EXP 95
70977: PUSH
70978: EMPTY
70979: ST_TO_ADDR
70980: END
// every 10 do var i ;
70981: GO 70983
70983: DISABLE
70984: LD_INT 0
70986: PPUSH
// begin enable ;
70987: ENABLE
// if not hInvincible then
70988: LD_EXP 95
70992: NOT
70993: IFFALSE 70997
// exit ;
70995: GO 71041
// for i in hInvincible do
70997: LD_ADDR_VAR 0 1
71001: PUSH
71002: LD_EXP 95
71006: PUSH
71007: FOR_IN
71008: IFFALSE 71039
// if GetLives ( i ) < 1000 then
71010: LD_VAR 0 1
71014: PPUSH
71015: CALL_OW 256
71019: PUSH
71020: LD_INT 1000
71022: LESS
71023: IFFALSE 71037
// SetLives ( i , 1000 ) ;
71025: LD_VAR 0 1
71029: PPUSH
71030: LD_INT 1000
71032: PPUSH
71033: CALL_OW 234
71037: GO 71007
71039: POP
71040: POP
// end ;
71041: PPOPN 1
71043: END
// export function hHackInvincible ; var i ; begin
71044: LD_INT 0
71046: PPUSH
71047: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71048: LD_ADDR_VAR 0 2
71052: PUSH
71053: LD_INT 2
71055: PUSH
71056: LD_INT 21
71058: PUSH
71059: LD_INT 1
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 21
71068: PUSH
71069: LD_INT 2
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: LIST
71080: PPUSH
71081: CALL_OW 69
71085: PUSH
71086: FOR_IN
71087: IFFALSE 71148
// if IsSelected ( i ) then
71089: LD_VAR 0 2
71093: PPUSH
71094: CALL_OW 306
71098: IFFALSE 71146
// begin if i in hInvincible then
71100: LD_VAR 0 2
71104: PUSH
71105: LD_EXP 95
71109: IN
71110: IFFALSE 71130
// hInvincible := hInvincible diff i else
71112: LD_ADDR_EXP 95
71116: PUSH
71117: LD_EXP 95
71121: PUSH
71122: LD_VAR 0 2
71126: DIFF
71127: ST_TO_ADDR
71128: GO 71146
// hInvincible := hInvincible union i ;
71130: LD_ADDR_EXP 95
71134: PUSH
71135: LD_EXP 95
71139: PUSH
71140: LD_VAR 0 2
71144: UNION
71145: ST_TO_ADDR
// end ;
71146: GO 71086
71148: POP
71149: POP
// end ;
71150: LD_VAR 0 1
71154: RET
// export function hHackInvisible ; var i , j ; begin
71155: LD_INT 0
71157: PPUSH
71158: PPUSH
71159: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71160: LD_ADDR_VAR 0 2
71164: PUSH
71165: LD_INT 21
71167: PUSH
71168: LD_INT 1
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PPUSH
71175: CALL_OW 69
71179: PUSH
71180: FOR_IN
71181: IFFALSE 71205
// if IsSelected ( i ) then
71183: LD_VAR 0 2
71187: PPUSH
71188: CALL_OW 306
71192: IFFALSE 71203
// ComForceInvisible ( i ) ;
71194: LD_VAR 0 2
71198: PPUSH
71199: CALL_OW 496
71203: GO 71180
71205: POP
71206: POP
// end ;
71207: LD_VAR 0 1
71211: RET
// export function hHackChangeYourSide ; begin
71212: LD_INT 0
71214: PPUSH
// if your_side = 8 then
71215: LD_OWVAR 2
71219: PUSH
71220: LD_INT 8
71222: EQUAL
71223: IFFALSE 71235
// your_side := 0 else
71225: LD_ADDR_OWVAR 2
71229: PUSH
71230: LD_INT 0
71232: ST_TO_ADDR
71233: GO 71249
// your_side := your_side + 1 ;
71235: LD_ADDR_OWVAR 2
71239: PUSH
71240: LD_OWVAR 2
71244: PUSH
71245: LD_INT 1
71247: PLUS
71248: ST_TO_ADDR
// end ;
71249: LD_VAR 0 1
71253: RET
// export function hHackChangeUnitSide ; var i , j ; begin
71254: LD_INT 0
71256: PPUSH
71257: PPUSH
71258: PPUSH
// for i in all_units do
71259: LD_ADDR_VAR 0 2
71263: PUSH
71264: LD_OWVAR 3
71268: PUSH
71269: FOR_IN
71270: IFFALSE 71348
// if IsSelected ( i ) then
71272: LD_VAR 0 2
71276: PPUSH
71277: CALL_OW 306
71281: IFFALSE 71346
// begin j := GetSide ( i ) ;
71283: LD_ADDR_VAR 0 3
71287: PUSH
71288: LD_VAR 0 2
71292: PPUSH
71293: CALL_OW 255
71297: ST_TO_ADDR
// if j = 8 then
71298: LD_VAR 0 3
71302: PUSH
71303: LD_INT 8
71305: EQUAL
71306: IFFALSE 71318
// j := 0 else
71308: LD_ADDR_VAR 0 3
71312: PUSH
71313: LD_INT 0
71315: ST_TO_ADDR
71316: GO 71332
// j := j + 1 ;
71318: LD_ADDR_VAR 0 3
71322: PUSH
71323: LD_VAR 0 3
71327: PUSH
71328: LD_INT 1
71330: PLUS
71331: ST_TO_ADDR
// SetSide ( i , j ) ;
71332: LD_VAR 0 2
71336: PPUSH
71337: LD_VAR 0 3
71341: PPUSH
71342: CALL_OW 235
// end ;
71346: GO 71269
71348: POP
71349: POP
// end ;
71350: LD_VAR 0 1
71354: RET
// export function hHackFog ; begin
71355: LD_INT 0
71357: PPUSH
// FogOff ( true ) ;
71358: LD_INT 1
71360: PPUSH
71361: CALL_OW 344
// end ;
71365: LD_VAR 0 1
71369: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71370: LD_INT 0
71372: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71373: LD_VAR 0 1
71377: PPUSH
71378: LD_VAR 0 2
71382: PPUSH
71383: LD_VAR 0 3
71387: PPUSH
71388: LD_INT 1
71390: PPUSH
71391: LD_INT 1
71393: PPUSH
71394: CALL_OW 483
// CenterOnXY ( x , y ) ;
71398: LD_VAR 0 2
71402: PPUSH
71403: LD_VAR 0 3
71407: PPUSH
71408: CALL_OW 84
// end ;
71412: LD_VAR 0 4
71416: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
71417: LD_INT 0
71419: PPUSH
71420: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
71421: LD_VAR 0 1
71425: NOT
71426: PUSH
71427: LD_VAR 0 2
71431: PPUSH
71432: LD_VAR 0 3
71436: PPUSH
71437: CALL_OW 488
71441: NOT
71442: OR
71443: PUSH
71444: LD_VAR 0 1
71448: PPUSH
71449: CALL_OW 266
71453: PUSH
71454: LD_INT 3
71456: NONEQUAL
71457: PUSH
71458: LD_VAR 0 1
71462: PPUSH
71463: CALL_OW 247
71467: PUSH
71468: LD_INT 1
71470: EQUAL
71471: NOT
71472: AND
71473: OR
71474: IFFALSE 71478
// exit ;
71476: GO 71627
// if GetType ( factory ) = unit_human then
71478: LD_VAR 0 1
71482: PPUSH
71483: CALL_OW 247
71487: PUSH
71488: LD_INT 1
71490: EQUAL
71491: IFFALSE 71508
// factory := IsInUnit ( factory ) ;
71493: LD_ADDR_VAR 0 1
71497: PUSH
71498: LD_VAR 0 1
71502: PPUSH
71503: CALL_OW 310
71507: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
71508: LD_VAR 0 1
71512: PPUSH
71513: CALL_OW 266
71517: PUSH
71518: LD_INT 3
71520: NONEQUAL
71521: IFFALSE 71525
// exit ;
71523: GO 71627
// if HexInfo ( x , y ) = factory then
71525: LD_VAR 0 2
71529: PPUSH
71530: LD_VAR 0 3
71534: PPUSH
71535: CALL_OW 428
71539: PUSH
71540: LD_VAR 0 1
71544: EQUAL
71545: IFFALSE 71572
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
71547: LD_ADDR_EXP 96
71551: PUSH
71552: LD_EXP 96
71556: PPUSH
71557: LD_VAR 0 1
71561: PPUSH
71562: LD_INT 0
71564: PPUSH
71565: CALL_OW 1
71569: ST_TO_ADDR
71570: GO 71623
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
71572: LD_ADDR_EXP 96
71576: PUSH
71577: LD_EXP 96
71581: PPUSH
71582: LD_VAR 0 1
71586: PPUSH
71587: LD_VAR 0 1
71591: PPUSH
71592: CALL_OW 255
71596: PUSH
71597: LD_VAR 0 1
71601: PUSH
71602: LD_VAR 0 2
71606: PUSH
71607: LD_VAR 0 3
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: PPUSH
71618: CALL_OW 1
71622: ST_TO_ADDR
// UpdateFactoryWaypoints ;
71623: CALL 71632 0 0
// end ;
71627: LD_VAR 0 4
71631: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
71632: LD_INT 0
71634: PPUSH
71635: PPUSH
71636: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
71637: LD_STRING resetFactoryWaypoint();
71639: PPUSH
71640: CALL_OW 559
// if factoryWaypoints then
71644: LD_EXP 96
71648: IFFALSE 71774
// begin list := PrepareArray ( factoryWaypoints ) ;
71650: LD_ADDR_VAR 0 3
71654: PUSH
71655: LD_EXP 96
71659: PPUSH
71660: CALL 56403 0 1
71664: ST_TO_ADDR
// for i := 1 to list do
71665: LD_ADDR_VAR 0 2
71669: PUSH
71670: DOUBLE
71671: LD_INT 1
71673: DEC
71674: ST_TO_ADDR
71675: LD_VAR 0 3
71679: PUSH
71680: FOR_TO
71681: IFFALSE 71772
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
71683: LD_STRING setFactoryWaypointXY(
71685: PUSH
71686: LD_VAR 0 3
71690: PUSH
71691: LD_VAR 0 2
71695: ARRAY
71696: PUSH
71697: LD_INT 1
71699: ARRAY
71700: STR
71701: PUSH
71702: LD_STRING ,
71704: STR
71705: PUSH
71706: LD_VAR 0 3
71710: PUSH
71711: LD_VAR 0 2
71715: ARRAY
71716: PUSH
71717: LD_INT 2
71719: ARRAY
71720: STR
71721: PUSH
71722: LD_STRING ,
71724: STR
71725: PUSH
71726: LD_VAR 0 3
71730: PUSH
71731: LD_VAR 0 2
71735: ARRAY
71736: PUSH
71737: LD_INT 3
71739: ARRAY
71740: STR
71741: PUSH
71742: LD_STRING ,
71744: STR
71745: PUSH
71746: LD_VAR 0 3
71750: PUSH
71751: LD_VAR 0 2
71755: ARRAY
71756: PUSH
71757: LD_INT 4
71759: ARRAY
71760: STR
71761: PUSH
71762: LD_STRING )
71764: STR
71765: PPUSH
71766: CALL_OW 559
71770: GO 71680
71772: POP
71773: POP
// end ; end ;
71774: LD_VAR 0 1
71778: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
71779: LD_INT 0
71781: PPUSH
// if HexInfo ( x , y ) = warehouse then
71782: LD_VAR 0 2
71786: PPUSH
71787: LD_VAR 0 3
71791: PPUSH
71792: CALL_OW 428
71796: PUSH
71797: LD_VAR 0 1
71801: EQUAL
71802: IFFALSE 71829
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
71804: LD_ADDR_EXP 97
71808: PUSH
71809: LD_EXP 97
71813: PPUSH
71814: LD_VAR 0 1
71818: PPUSH
71819: LD_INT 0
71821: PPUSH
71822: CALL_OW 1
71826: ST_TO_ADDR
71827: GO 71880
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
71829: LD_ADDR_EXP 97
71833: PUSH
71834: LD_EXP 97
71838: PPUSH
71839: LD_VAR 0 1
71843: PPUSH
71844: LD_VAR 0 1
71848: PPUSH
71849: CALL_OW 255
71853: PUSH
71854: LD_VAR 0 1
71858: PUSH
71859: LD_VAR 0 2
71863: PUSH
71864: LD_VAR 0 3
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: PPUSH
71875: CALL_OW 1
71879: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
71880: CALL 71889 0 0
// end ;
71884: LD_VAR 0 4
71888: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
71889: LD_INT 0
71891: PPUSH
71892: PPUSH
71893: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
71894: LD_STRING resetWarehouseGatheringPoints();
71896: PPUSH
71897: CALL_OW 559
// if warehouseGatheringPoints then
71901: LD_EXP 97
71905: IFFALSE 72031
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
71907: LD_ADDR_VAR 0 3
71911: PUSH
71912: LD_EXP 97
71916: PPUSH
71917: CALL 56403 0 1
71921: ST_TO_ADDR
// for i := 1 to list do
71922: LD_ADDR_VAR 0 2
71926: PUSH
71927: DOUBLE
71928: LD_INT 1
71930: DEC
71931: ST_TO_ADDR
71932: LD_VAR 0 3
71936: PUSH
71937: FOR_TO
71938: IFFALSE 72029
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
71940: LD_STRING setWarehouseGatheringPointXY(
71942: PUSH
71943: LD_VAR 0 3
71947: PUSH
71948: LD_VAR 0 2
71952: ARRAY
71953: PUSH
71954: LD_INT 1
71956: ARRAY
71957: STR
71958: PUSH
71959: LD_STRING ,
71961: STR
71962: PUSH
71963: LD_VAR 0 3
71967: PUSH
71968: LD_VAR 0 2
71972: ARRAY
71973: PUSH
71974: LD_INT 2
71976: ARRAY
71977: STR
71978: PUSH
71979: LD_STRING ,
71981: STR
71982: PUSH
71983: LD_VAR 0 3
71987: PUSH
71988: LD_VAR 0 2
71992: ARRAY
71993: PUSH
71994: LD_INT 3
71996: ARRAY
71997: STR
71998: PUSH
71999: LD_STRING ,
72001: STR
72002: PUSH
72003: LD_VAR 0 3
72007: PUSH
72008: LD_VAR 0 2
72012: ARRAY
72013: PUSH
72014: LD_INT 4
72016: ARRAY
72017: STR
72018: PUSH
72019: LD_STRING )
72021: STR
72022: PPUSH
72023: CALL_OW 559
72027: GO 71937
72029: POP
72030: POP
// end ; end ;
72031: LD_VAR 0 1
72035: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
72036: LD_EXP 97
72040: IFFALSE 72725
72042: GO 72044
72044: DISABLE
72045: LD_INT 0
72047: PPUSH
72048: PPUSH
72049: PPUSH
72050: PPUSH
72051: PPUSH
72052: PPUSH
72053: PPUSH
72054: PPUSH
72055: PPUSH
// begin enable ;
72056: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
72057: LD_ADDR_VAR 0 3
72061: PUSH
72062: LD_EXP 97
72066: PPUSH
72067: CALL 56403 0 1
72071: ST_TO_ADDR
// if not list then
72072: LD_VAR 0 3
72076: NOT
72077: IFFALSE 72081
// exit ;
72079: GO 72725
// for i := 1 to list do
72081: LD_ADDR_VAR 0 1
72085: PUSH
72086: DOUBLE
72087: LD_INT 1
72089: DEC
72090: ST_TO_ADDR
72091: LD_VAR 0 3
72095: PUSH
72096: FOR_TO
72097: IFFALSE 72723
// begin depot := list [ i ] [ 2 ] ;
72099: LD_ADDR_VAR 0 8
72103: PUSH
72104: LD_VAR 0 3
72108: PUSH
72109: LD_VAR 0 1
72113: ARRAY
72114: PUSH
72115: LD_INT 2
72117: ARRAY
72118: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
72119: LD_ADDR_VAR 0 5
72123: PUSH
72124: LD_VAR 0 3
72128: PUSH
72129: LD_VAR 0 1
72133: ARRAY
72134: PUSH
72135: LD_INT 1
72137: ARRAY
72138: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
72139: LD_VAR 0 8
72143: PPUSH
72144: CALL_OW 301
72148: PUSH
72149: LD_VAR 0 5
72153: PUSH
72154: LD_VAR 0 8
72158: PPUSH
72159: CALL_OW 255
72163: NONEQUAL
72164: OR
72165: IFFALSE 72194
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
72167: LD_ADDR_EXP 97
72171: PUSH
72172: LD_EXP 97
72176: PPUSH
72177: LD_VAR 0 8
72181: PPUSH
72182: LD_INT 0
72184: PPUSH
72185: CALL_OW 1
72189: ST_TO_ADDR
// exit ;
72190: POP
72191: POP
72192: GO 72725
// end ; x := list [ i ] [ 3 ] ;
72194: LD_ADDR_VAR 0 6
72198: PUSH
72199: LD_VAR 0 3
72203: PUSH
72204: LD_VAR 0 1
72208: ARRAY
72209: PUSH
72210: LD_INT 3
72212: ARRAY
72213: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
72214: LD_ADDR_VAR 0 7
72218: PUSH
72219: LD_VAR 0 3
72223: PUSH
72224: LD_VAR 0 1
72228: ARRAY
72229: PUSH
72230: LD_INT 4
72232: ARRAY
72233: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
72234: LD_ADDR_VAR 0 9
72238: PUSH
72239: LD_VAR 0 6
72243: PPUSH
72244: LD_VAR 0 7
72248: PPUSH
72249: LD_INT 16
72251: PPUSH
72252: CALL 54991 0 3
72256: ST_TO_ADDR
// if not cratesNearbyPoint then
72257: LD_VAR 0 9
72261: NOT
72262: IFFALSE 72268
// exit ;
72264: POP
72265: POP
72266: GO 72725
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
72268: LD_ADDR_VAR 0 4
72272: PUSH
72273: LD_INT 22
72275: PUSH
72276: LD_VAR 0 5
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 3
72287: PUSH
72288: LD_INT 60
72290: PUSH
72291: EMPTY
72292: LIST
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 91
72300: PUSH
72301: LD_VAR 0 8
72305: PUSH
72306: LD_INT 6
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 2
72316: PUSH
72317: LD_INT 25
72319: PUSH
72320: LD_INT 2
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 25
72329: PUSH
72330: LD_INT 16
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: LIST
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: PPUSH
72348: CALL_OW 69
72352: PUSH
72353: LD_VAR 0 8
72357: PPUSH
72358: CALL_OW 313
72362: PPUSH
72363: LD_INT 3
72365: PUSH
72366: LD_INT 60
72368: PUSH
72369: EMPTY
72370: LIST
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 2
72378: PUSH
72379: LD_INT 25
72381: PUSH
72382: LD_INT 2
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: LD_INT 25
72391: PUSH
72392: LD_INT 16
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: LIST
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PPUSH
72408: CALL_OW 72
72412: UNION
72413: ST_TO_ADDR
// if tmp then
72414: LD_VAR 0 4
72418: IFFALSE 72498
// begin tmp := ShrinkArray ( tmp , 3 ) ;
72420: LD_ADDR_VAR 0 4
72424: PUSH
72425: LD_VAR 0 4
72429: PPUSH
72430: LD_INT 3
72432: PPUSH
72433: CALL 52960 0 2
72437: ST_TO_ADDR
// for j in tmp do
72438: LD_ADDR_VAR 0 2
72442: PUSH
72443: LD_VAR 0 4
72447: PUSH
72448: FOR_IN
72449: IFFALSE 72492
// begin if IsInUnit ( j ) then
72451: LD_VAR 0 2
72455: PPUSH
72456: CALL_OW 310
72460: IFFALSE 72471
// ComExit ( j ) ;
72462: LD_VAR 0 2
72466: PPUSH
72467: CALL 53043 0 1
// AddComCollect ( j , x , y ) ;
72471: LD_VAR 0 2
72475: PPUSH
72476: LD_VAR 0 6
72480: PPUSH
72481: LD_VAR 0 7
72485: PPUSH
72486: CALL_OW 177
// end ;
72490: GO 72448
72492: POP
72493: POP
// exit ;
72494: POP
72495: POP
72496: GO 72725
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
72498: LD_ADDR_VAR 0 4
72502: PUSH
72503: LD_INT 22
72505: PUSH
72506: LD_VAR 0 5
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 91
72517: PUSH
72518: LD_VAR 0 8
72522: PUSH
72523: LD_INT 8
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: LIST
72530: PUSH
72531: LD_INT 2
72533: PUSH
72534: LD_INT 34
72536: PUSH
72537: LD_INT 12
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 34
72546: PUSH
72547: LD_INT 51
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 34
72556: PUSH
72557: LD_INT 32
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 34
72566: PUSH
72567: LD_INT 89
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: LIST
72585: PPUSH
72586: CALL_OW 69
72590: ST_TO_ADDR
// if tmp then
72591: LD_VAR 0 4
72595: IFFALSE 72721
// begin for j in tmp do
72597: LD_ADDR_VAR 0 2
72601: PUSH
72602: LD_VAR 0 4
72606: PUSH
72607: FOR_IN
72608: IFFALSE 72719
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
72610: LD_VAR 0 2
72614: PPUSH
72615: CALL_OW 262
72619: PUSH
72620: LD_INT 3
72622: EQUAL
72623: PUSH
72624: LD_VAR 0 2
72628: PPUSH
72629: CALL_OW 261
72633: PUSH
72634: LD_INT 20
72636: GREATER
72637: OR
72638: PUSH
72639: LD_VAR 0 2
72643: PPUSH
72644: CALL_OW 314
72648: NOT
72649: AND
72650: PUSH
72651: LD_VAR 0 2
72655: PPUSH
72656: CALL_OW 263
72660: PUSH
72661: LD_INT 1
72663: NONEQUAL
72664: PUSH
72665: LD_VAR 0 2
72669: PPUSH
72670: CALL_OW 311
72674: OR
72675: AND
72676: IFFALSE 72717
// begin ComCollect ( j , x , y ) ;
72678: LD_VAR 0 2
72682: PPUSH
72683: LD_VAR 0 6
72687: PPUSH
72688: LD_VAR 0 7
72692: PPUSH
72693: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
72697: LD_VAR 0 2
72701: PPUSH
72702: LD_VAR 0 8
72706: PPUSH
72707: CALL_OW 172
// exit ;
72711: POP
72712: POP
72713: POP
72714: POP
72715: GO 72725
// end ;
72717: GO 72607
72719: POP
72720: POP
// end ; end ;
72721: GO 72096
72723: POP
72724: POP
// end ; end_of_file
72725: PPOPN 9
72727: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72728: LD_VAR 0 1
72732: PUSH
72733: LD_INT 200
72735: DOUBLE
72736: GREATEREQUAL
72737: IFFALSE 72745
72739: LD_INT 299
72741: DOUBLE
72742: LESSEQUAL
72743: IFTRUE 72747
72745: GO 72779
72747: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72748: LD_VAR 0 1
72752: PPUSH
72753: LD_VAR 0 2
72757: PPUSH
72758: LD_VAR 0 3
72762: PPUSH
72763: LD_VAR 0 4
72767: PPUSH
72768: LD_VAR 0 5
72772: PPUSH
72773: CALL 73267 0 5
72777: GO 72856
72779: LD_INT 300
72781: DOUBLE
72782: GREATEREQUAL
72783: IFFALSE 72791
72785: LD_INT 399
72787: DOUBLE
72788: LESSEQUAL
72789: IFTRUE 72793
72791: GO 72855
72793: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72794: LD_VAR 0 1
72798: PPUSH
72799: LD_VAR 0 2
72803: PPUSH
72804: LD_VAR 0 3
72808: PPUSH
72809: LD_VAR 0 4
72813: PPUSH
72814: LD_VAR 0 5
72818: PPUSH
72819: LD_VAR 0 6
72823: PPUSH
72824: LD_VAR 0 7
72828: PPUSH
72829: LD_VAR 0 8
72833: PPUSH
72834: LD_VAR 0 9
72838: PPUSH
72839: LD_VAR 0 10
72843: PPUSH
72844: LD_VAR 0 11
72848: PPUSH
72849: CALL 69429 0 11
72853: GO 72856
72855: POP
// end ;
72856: PPOPN 11
72858: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72859: LD_VAR 0 1
72863: PPUSH
72864: LD_VAR 0 2
72868: PPUSH
72869: LD_VAR 0 3
72873: PPUSH
72874: LD_VAR 0 4
72878: PPUSH
72879: LD_VAR 0 5
72883: PPUSH
72884: CALL 73003 0 5
// end ; end_of_file
72888: PPOPN 5
72890: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
72891: LD_INT 0
72893: PPUSH
72894: PPUSH
72895: PPUSH
72896: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
72897: LD_VAR 0 1
72901: PPUSH
72902: CALL_OW 264
72906: PUSH
72907: LD_INT 91
72909: EQUAL
72910: IFFALSE 72982
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
72912: LD_INT 68
72914: PPUSH
72915: LD_VAR 0 1
72919: PPUSH
72920: CALL_OW 255
72924: PPUSH
72925: CALL_OW 321
72929: PUSH
72930: LD_INT 2
72932: EQUAL
72933: IFFALSE 72945
// eff := 70 else
72935: LD_ADDR_VAR 0 4
72939: PUSH
72940: LD_INT 70
72942: ST_TO_ADDR
72943: GO 72953
// eff := 30 ;
72945: LD_ADDR_VAR 0 4
72949: PUSH
72950: LD_INT 30
72952: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
72953: LD_VAR 0 1
72957: PPUSH
72958: CALL_OW 250
72962: PPUSH
72963: LD_VAR 0 1
72967: PPUSH
72968: CALL_OW 251
72972: PPUSH
72973: LD_VAR 0 4
72977: PPUSH
72978: CALL_OW 495
// end ; end ;
72982: LD_VAR 0 2
72986: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
72987: LD_INT 0
72989: PPUSH
// end ;
72990: LD_VAR 0 4
72994: RET
// export function SOS_Command ( cmd ) ; begin
72995: LD_INT 0
72997: PPUSH
// end ;
72998: LD_VAR 0 2
73002: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73003: LD_INT 0
73005: PPUSH
// end ;
73006: LD_VAR 0 6
73010: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
73011: LD_INT 0
73013: PPUSH
73014: PPUSH
// if not vehicle or not factory then
73015: LD_VAR 0 1
73019: NOT
73020: PUSH
73021: LD_VAR 0 2
73025: NOT
73026: OR
73027: IFFALSE 73031
// exit ;
73029: GO 73262
// if factoryWaypoints >= factory then
73031: LD_EXP 96
73035: PUSH
73036: LD_VAR 0 2
73040: GREATEREQUAL
73041: IFFALSE 73262
// if factoryWaypoints [ factory ] then
73043: LD_EXP 96
73047: PUSH
73048: LD_VAR 0 2
73052: ARRAY
73053: IFFALSE 73262
// begin if GetControl ( vehicle ) = control_manual then
73055: LD_VAR 0 1
73059: PPUSH
73060: CALL_OW 263
73064: PUSH
73065: LD_INT 1
73067: EQUAL
73068: IFFALSE 73149
// begin driver := IsDrivenBy ( vehicle ) ;
73070: LD_ADDR_VAR 0 4
73074: PUSH
73075: LD_VAR 0 1
73079: PPUSH
73080: CALL_OW 311
73084: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73085: LD_VAR 0 4
73089: PPUSH
73090: LD_EXP 96
73094: PUSH
73095: LD_VAR 0 2
73099: ARRAY
73100: PUSH
73101: LD_INT 3
73103: ARRAY
73104: PPUSH
73105: LD_EXP 96
73109: PUSH
73110: LD_VAR 0 2
73114: ARRAY
73115: PUSH
73116: LD_INT 4
73118: ARRAY
73119: PPUSH
73120: CALL_OW 171
// AddComExitVehicle ( driver ) ;
73124: LD_VAR 0 4
73128: PPUSH
73129: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
73133: LD_VAR 0 4
73137: PPUSH
73138: LD_VAR 0 2
73142: PPUSH
73143: CALL_OW 180
// end else
73147: GO 73262
// if GetControl ( vehicle ) = control_remote then
73149: LD_VAR 0 1
73153: PPUSH
73154: CALL_OW 263
73158: PUSH
73159: LD_INT 2
73161: EQUAL
73162: IFFALSE 73223
// begin wait ( 0 0$2 ) ;
73164: LD_INT 70
73166: PPUSH
73167: CALL_OW 67
// if Connect ( vehicle ) then
73171: LD_VAR 0 1
73175: PPUSH
73176: CALL 23264 0 1
73180: IFFALSE 73221
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73182: LD_VAR 0 1
73186: PPUSH
73187: LD_EXP 96
73191: PUSH
73192: LD_VAR 0 2
73196: ARRAY
73197: PUSH
73198: LD_INT 3
73200: ARRAY
73201: PPUSH
73202: LD_EXP 96
73206: PUSH
73207: LD_VAR 0 2
73211: ARRAY
73212: PUSH
73213: LD_INT 4
73215: ARRAY
73216: PPUSH
73217: CALL_OW 171
// end else
73221: GO 73262
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73223: LD_VAR 0 1
73227: PPUSH
73228: LD_EXP 96
73232: PUSH
73233: LD_VAR 0 2
73237: ARRAY
73238: PUSH
73239: LD_INT 3
73241: ARRAY
73242: PPUSH
73243: LD_EXP 96
73247: PUSH
73248: LD_VAR 0 2
73252: ARRAY
73253: PUSH
73254: LD_INT 4
73256: ARRAY
73257: PPUSH
73258: CALL_OW 171
// end ; end ;
73262: LD_VAR 0 3
73266: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
73267: LD_INT 0
73269: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
73270: LD_VAR 0 1
73274: PUSH
73275: LD_INT 250
73277: EQUAL
73278: PUSH
73279: LD_VAR 0 2
73283: PPUSH
73284: CALL_OW 264
73288: PUSH
73289: LD_INT 81
73291: EQUAL
73292: AND
73293: IFFALSE 73314
// MinerPlaceMine ( unit , x , y ) ;
73295: LD_VAR 0 2
73299: PPUSH
73300: LD_VAR 0 4
73304: PPUSH
73305: LD_VAR 0 5
73309: PPUSH
73310: CALL 75699 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
73314: LD_VAR 0 1
73318: PUSH
73319: LD_INT 251
73321: EQUAL
73322: PUSH
73323: LD_VAR 0 2
73327: PPUSH
73328: CALL_OW 264
73332: PUSH
73333: LD_INT 81
73335: EQUAL
73336: AND
73337: IFFALSE 73358
// MinerDetonateMine ( unit , x , y ) ;
73339: LD_VAR 0 2
73343: PPUSH
73344: LD_VAR 0 4
73348: PPUSH
73349: LD_VAR 0 5
73353: PPUSH
73354: CALL 75974 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
73358: LD_VAR 0 1
73362: PUSH
73363: LD_INT 252
73365: EQUAL
73366: PUSH
73367: LD_VAR 0 2
73371: PPUSH
73372: CALL_OW 264
73376: PUSH
73377: LD_INT 81
73379: EQUAL
73380: AND
73381: IFFALSE 73402
// MinerCreateMinefield ( unit , x , y ) ;
73383: LD_VAR 0 2
73387: PPUSH
73388: LD_VAR 0 4
73392: PPUSH
73393: LD_VAR 0 5
73397: PPUSH
73398: CALL 76391 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
73402: LD_VAR 0 1
73406: PUSH
73407: LD_INT 253
73409: EQUAL
73410: PUSH
73411: LD_VAR 0 2
73415: PPUSH
73416: CALL_OW 257
73420: PUSH
73421: LD_INT 5
73423: EQUAL
73424: AND
73425: IFFALSE 73446
// ComBinocular ( unit , x , y ) ;
73427: LD_VAR 0 2
73431: PPUSH
73432: LD_VAR 0 4
73436: PPUSH
73437: LD_VAR 0 5
73441: PPUSH
73442: CALL 76760 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
73446: LD_VAR 0 1
73450: PUSH
73451: LD_INT 254
73453: EQUAL
73454: PUSH
73455: LD_VAR 0 2
73459: PPUSH
73460: CALL_OW 264
73464: PUSH
73465: LD_INT 99
73467: EQUAL
73468: AND
73469: PUSH
73470: LD_VAR 0 3
73474: PPUSH
73475: CALL_OW 263
73479: PUSH
73480: LD_INT 3
73482: EQUAL
73483: AND
73484: IFFALSE 73500
// HackDestroyVehicle ( unit , selectedUnit ) ;
73486: LD_VAR 0 2
73490: PPUSH
73491: LD_VAR 0 3
73495: PPUSH
73496: CALL 75063 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
73500: LD_VAR 0 1
73504: PUSH
73505: LD_INT 255
73507: EQUAL
73508: PUSH
73509: LD_VAR 0 2
73513: PPUSH
73514: CALL_OW 264
73518: PUSH
73519: LD_INT 14
73521: PUSH
73522: LD_INT 53
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: IN
73529: AND
73530: PUSH
73531: LD_VAR 0 4
73535: PPUSH
73536: LD_VAR 0 5
73540: PPUSH
73541: CALL_OW 488
73545: AND
73546: IFFALSE 73570
// CutTreeXYR ( unit , x , y , 12 ) ;
73548: LD_VAR 0 2
73552: PPUSH
73553: LD_VAR 0 4
73557: PPUSH
73558: LD_VAR 0 5
73562: PPUSH
73563: LD_INT 12
73565: PPUSH
73566: CALL 73633 0 4
// if cmd = 256 then
73570: LD_VAR 0 1
73574: PUSH
73575: LD_INT 256
73577: EQUAL
73578: IFFALSE 73599
// SetFactoryWaypoint ( unit , x , y ) ;
73580: LD_VAR 0 2
73584: PPUSH
73585: LD_VAR 0 4
73589: PPUSH
73590: LD_VAR 0 5
73594: PPUSH
73595: CALL 71417 0 3
// if cmd = 257 then
73599: LD_VAR 0 1
73603: PUSH
73604: LD_INT 257
73606: EQUAL
73607: IFFALSE 73628
// SetWarehouseGatheringPoint ( unit , x , y ) ;
73609: LD_VAR 0 2
73613: PPUSH
73614: LD_VAR 0 4
73618: PPUSH
73619: LD_VAR 0 5
73623: PPUSH
73624: CALL 71779 0 3
// end ;
73628: LD_VAR 0 6
73632: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
73633: LD_INT 0
73635: PPUSH
73636: PPUSH
73637: PPUSH
73638: PPUSH
73639: PPUSH
73640: PPUSH
73641: PPUSH
73642: PPUSH
73643: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
73644: LD_VAR 0 1
73648: NOT
73649: PUSH
73650: LD_VAR 0 2
73654: PPUSH
73655: LD_VAR 0 3
73659: PPUSH
73660: CALL_OW 488
73664: NOT
73665: OR
73666: PUSH
73667: LD_VAR 0 4
73671: NOT
73672: OR
73673: IFFALSE 73677
// exit ;
73675: GO 74017
// list := [ ] ;
73677: LD_ADDR_VAR 0 13
73681: PUSH
73682: EMPTY
73683: ST_TO_ADDR
// if x - r < 0 then
73684: LD_VAR 0 2
73688: PUSH
73689: LD_VAR 0 4
73693: MINUS
73694: PUSH
73695: LD_INT 0
73697: LESS
73698: IFFALSE 73710
// min_x := 0 else
73700: LD_ADDR_VAR 0 7
73704: PUSH
73705: LD_INT 0
73707: ST_TO_ADDR
73708: GO 73726
// min_x := x - r ;
73710: LD_ADDR_VAR 0 7
73714: PUSH
73715: LD_VAR 0 2
73719: PUSH
73720: LD_VAR 0 4
73724: MINUS
73725: ST_TO_ADDR
// if y - r < 0 then
73726: LD_VAR 0 3
73730: PUSH
73731: LD_VAR 0 4
73735: MINUS
73736: PUSH
73737: LD_INT 0
73739: LESS
73740: IFFALSE 73752
// min_y := 0 else
73742: LD_ADDR_VAR 0 8
73746: PUSH
73747: LD_INT 0
73749: ST_TO_ADDR
73750: GO 73768
// min_y := y - r ;
73752: LD_ADDR_VAR 0 8
73756: PUSH
73757: LD_VAR 0 3
73761: PUSH
73762: LD_VAR 0 4
73766: MINUS
73767: ST_TO_ADDR
// max_x := x + r ;
73768: LD_ADDR_VAR 0 9
73772: PUSH
73773: LD_VAR 0 2
73777: PUSH
73778: LD_VAR 0 4
73782: PLUS
73783: ST_TO_ADDR
// max_y := y + r ;
73784: LD_ADDR_VAR 0 10
73788: PUSH
73789: LD_VAR 0 3
73793: PUSH
73794: LD_VAR 0 4
73798: PLUS
73799: ST_TO_ADDR
// for _x = min_x to max_x do
73800: LD_ADDR_VAR 0 11
73804: PUSH
73805: DOUBLE
73806: LD_VAR 0 7
73810: DEC
73811: ST_TO_ADDR
73812: LD_VAR 0 9
73816: PUSH
73817: FOR_TO
73818: IFFALSE 73935
// for _y = min_y to max_y do
73820: LD_ADDR_VAR 0 12
73824: PUSH
73825: DOUBLE
73826: LD_VAR 0 8
73830: DEC
73831: ST_TO_ADDR
73832: LD_VAR 0 10
73836: PUSH
73837: FOR_TO
73838: IFFALSE 73931
// begin if not ValidHex ( _x , _y ) then
73840: LD_VAR 0 11
73844: PPUSH
73845: LD_VAR 0 12
73849: PPUSH
73850: CALL_OW 488
73854: NOT
73855: IFFALSE 73859
// continue ;
73857: GO 73837
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
73859: LD_VAR 0 11
73863: PPUSH
73864: LD_VAR 0 12
73868: PPUSH
73869: CALL_OW 351
73873: PUSH
73874: LD_VAR 0 11
73878: PPUSH
73879: LD_VAR 0 12
73883: PPUSH
73884: CALL_OW 554
73888: AND
73889: IFFALSE 73929
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
73891: LD_ADDR_VAR 0 13
73895: PUSH
73896: LD_VAR 0 13
73900: PPUSH
73901: LD_VAR 0 13
73905: PUSH
73906: LD_INT 1
73908: PLUS
73909: PPUSH
73910: LD_VAR 0 11
73914: PUSH
73915: LD_VAR 0 12
73919: PUSH
73920: EMPTY
73921: LIST
73922: LIST
73923: PPUSH
73924: CALL_OW 2
73928: ST_TO_ADDR
// end ;
73929: GO 73837
73931: POP
73932: POP
73933: GO 73817
73935: POP
73936: POP
// if not list then
73937: LD_VAR 0 13
73941: NOT
73942: IFFALSE 73946
// exit ;
73944: GO 74017
// for i in list do
73946: LD_ADDR_VAR 0 6
73950: PUSH
73951: LD_VAR 0 13
73955: PUSH
73956: FOR_IN
73957: IFFALSE 74015
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
73959: LD_VAR 0 1
73963: PPUSH
73964: LD_STRING M
73966: PUSH
73967: LD_VAR 0 6
73971: PUSH
73972: LD_INT 1
73974: ARRAY
73975: PUSH
73976: LD_VAR 0 6
73980: PUSH
73981: LD_INT 2
73983: ARRAY
73984: PUSH
73985: LD_INT 0
73987: PUSH
73988: LD_INT 0
73990: PUSH
73991: LD_INT 0
73993: PUSH
73994: LD_INT 0
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: LIST
74003: LIST
74004: LIST
74005: PUSH
74006: EMPTY
74007: LIST
74008: PPUSH
74009: CALL_OW 447
74013: GO 73956
74015: POP
74016: POP
// end ;
74017: LD_VAR 0 5
74021: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
74022: LD_EXP 99
74026: NOT
74027: IFFALSE 74077
74029: GO 74031
74031: DISABLE
// begin initHack := true ;
74032: LD_ADDR_EXP 99
74036: PUSH
74037: LD_INT 1
74039: ST_TO_ADDR
// hackTanks := [ ] ;
74040: LD_ADDR_EXP 100
74044: PUSH
74045: EMPTY
74046: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
74047: LD_ADDR_EXP 101
74051: PUSH
74052: EMPTY
74053: ST_TO_ADDR
// hackLimit := 3 ;
74054: LD_ADDR_EXP 102
74058: PUSH
74059: LD_INT 3
74061: ST_TO_ADDR
// hackDist := 12 ;
74062: LD_ADDR_EXP 103
74066: PUSH
74067: LD_INT 12
74069: ST_TO_ADDR
// hackCounter := [ ] ;
74070: LD_ADDR_EXP 104
74074: PUSH
74075: EMPTY
74076: ST_TO_ADDR
// end ;
74077: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
74078: LD_EXP 99
74082: PUSH
74083: LD_INT 34
74085: PUSH
74086: LD_INT 99
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PPUSH
74093: CALL_OW 69
74097: AND
74098: IFFALSE 74351
74100: GO 74102
74102: DISABLE
74103: LD_INT 0
74105: PPUSH
74106: PPUSH
// begin enable ;
74107: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
74108: LD_ADDR_VAR 0 1
74112: PUSH
74113: LD_INT 34
74115: PUSH
74116: LD_INT 99
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PPUSH
74123: CALL_OW 69
74127: PUSH
74128: FOR_IN
74129: IFFALSE 74349
// begin if not i in hackTanks then
74131: LD_VAR 0 1
74135: PUSH
74136: LD_EXP 100
74140: IN
74141: NOT
74142: IFFALSE 74225
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
74144: LD_ADDR_EXP 100
74148: PUSH
74149: LD_EXP 100
74153: PPUSH
74154: LD_EXP 100
74158: PUSH
74159: LD_INT 1
74161: PLUS
74162: PPUSH
74163: LD_VAR 0 1
74167: PPUSH
74168: CALL_OW 1
74172: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
74173: LD_ADDR_EXP 101
74177: PUSH
74178: LD_EXP 101
74182: PPUSH
74183: LD_EXP 101
74187: PUSH
74188: LD_INT 1
74190: PLUS
74191: PPUSH
74192: EMPTY
74193: PPUSH
74194: CALL_OW 1
74198: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
74199: LD_ADDR_EXP 104
74203: PUSH
74204: LD_EXP 104
74208: PPUSH
74209: LD_EXP 104
74213: PUSH
74214: LD_INT 1
74216: PLUS
74217: PPUSH
74218: EMPTY
74219: PPUSH
74220: CALL_OW 1
74224: ST_TO_ADDR
// end ; if not IsOk ( i ) then
74225: LD_VAR 0 1
74229: PPUSH
74230: CALL_OW 302
74234: NOT
74235: IFFALSE 74248
// begin HackUnlinkAll ( i ) ;
74237: LD_VAR 0 1
74241: PPUSH
74242: CALL 74354 0 1
// continue ;
74246: GO 74128
// end ; HackCheckCapturedStatus ( i ) ;
74248: LD_VAR 0 1
74252: PPUSH
74253: CALL 74797 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
74257: LD_ADDR_VAR 0 2
74261: PUSH
74262: LD_INT 81
74264: PUSH
74265: LD_VAR 0 1
74269: PPUSH
74270: CALL_OW 255
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: PUSH
74279: LD_INT 33
74281: PUSH
74282: LD_INT 3
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PUSH
74289: LD_INT 91
74291: PUSH
74292: LD_VAR 0 1
74296: PUSH
74297: LD_EXP 103
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: LIST
74306: PUSH
74307: LD_INT 50
74309: PUSH
74310: EMPTY
74311: LIST
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: PPUSH
74319: CALL_OW 69
74323: ST_TO_ADDR
// if not tmp then
74324: LD_VAR 0 2
74328: NOT
74329: IFFALSE 74333
// continue ;
74331: GO 74128
// HackLink ( i , tmp ) ;
74333: LD_VAR 0 1
74337: PPUSH
74338: LD_VAR 0 2
74342: PPUSH
74343: CALL 74490 0 2
// end ;
74347: GO 74128
74349: POP
74350: POP
// end ;
74351: PPOPN 2
74353: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
74354: LD_INT 0
74356: PPUSH
74357: PPUSH
74358: PPUSH
// if not hack in hackTanks then
74359: LD_VAR 0 1
74363: PUSH
74364: LD_EXP 100
74368: IN
74369: NOT
74370: IFFALSE 74374
// exit ;
74372: GO 74485
// index := GetElementIndex ( hackTanks , hack ) ;
74374: LD_ADDR_VAR 0 4
74378: PUSH
74379: LD_EXP 100
74383: PPUSH
74384: LD_VAR 0 1
74388: PPUSH
74389: CALL 20071 0 2
74393: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
74394: LD_EXP 101
74398: PUSH
74399: LD_VAR 0 4
74403: ARRAY
74404: IFFALSE 74485
// begin for i in hackTanksCaptured [ index ] do
74406: LD_ADDR_VAR 0 3
74410: PUSH
74411: LD_EXP 101
74415: PUSH
74416: LD_VAR 0 4
74420: ARRAY
74421: PUSH
74422: FOR_IN
74423: IFFALSE 74449
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
74425: LD_VAR 0 3
74429: PUSH
74430: LD_INT 1
74432: ARRAY
74433: PPUSH
74434: LD_VAR 0 3
74438: PUSH
74439: LD_INT 2
74441: ARRAY
74442: PPUSH
74443: CALL_OW 235
74447: GO 74422
74449: POP
74450: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
74451: LD_ADDR_EXP 101
74455: PUSH
74456: LD_EXP 101
74460: PPUSH
74461: LD_VAR 0 4
74465: PPUSH
74466: EMPTY
74467: PPUSH
74468: CALL_OW 1
74472: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
74473: LD_VAR 0 1
74477: PPUSH
74478: LD_INT 0
74480: PPUSH
74481: CALL_OW 505
// end ; end ;
74485: LD_VAR 0 2
74489: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
74490: LD_INT 0
74492: PPUSH
74493: PPUSH
74494: PPUSH
// if not hack in hackTanks or not vehicles then
74495: LD_VAR 0 1
74499: PUSH
74500: LD_EXP 100
74504: IN
74505: NOT
74506: PUSH
74507: LD_VAR 0 2
74511: NOT
74512: OR
74513: IFFALSE 74517
// exit ;
74515: GO 74792
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
74517: LD_ADDR_VAR 0 2
74521: PUSH
74522: LD_VAR 0 1
74526: PPUSH
74527: LD_VAR 0 2
74531: PPUSH
74532: LD_INT 1
74534: PPUSH
74535: LD_INT 1
74537: PPUSH
74538: CALL 20721 0 4
74542: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
74543: LD_ADDR_VAR 0 5
74547: PUSH
74548: LD_EXP 100
74552: PPUSH
74553: LD_VAR 0 1
74557: PPUSH
74558: CALL 20071 0 2
74562: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
74563: LD_EXP 101
74567: PUSH
74568: LD_VAR 0 5
74572: ARRAY
74573: PUSH
74574: LD_EXP 102
74578: LESS
74579: IFFALSE 74768
// begin for i := 1 to vehicles do
74581: LD_ADDR_VAR 0 4
74585: PUSH
74586: DOUBLE
74587: LD_INT 1
74589: DEC
74590: ST_TO_ADDR
74591: LD_VAR 0 2
74595: PUSH
74596: FOR_TO
74597: IFFALSE 74766
// begin if hackTanksCaptured [ index ] = hackLimit then
74599: LD_EXP 101
74603: PUSH
74604: LD_VAR 0 5
74608: ARRAY
74609: PUSH
74610: LD_EXP 102
74614: EQUAL
74615: IFFALSE 74619
// break ;
74617: GO 74766
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
74619: LD_ADDR_EXP 104
74623: PUSH
74624: LD_EXP 104
74628: PPUSH
74629: LD_VAR 0 5
74633: PPUSH
74634: LD_EXP 104
74638: PUSH
74639: LD_VAR 0 5
74643: ARRAY
74644: PUSH
74645: LD_INT 1
74647: PLUS
74648: PPUSH
74649: CALL_OW 1
74653: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
74654: LD_ADDR_EXP 101
74658: PUSH
74659: LD_EXP 101
74663: PPUSH
74664: LD_VAR 0 5
74668: PUSH
74669: LD_EXP 101
74673: PUSH
74674: LD_VAR 0 5
74678: ARRAY
74679: PUSH
74680: LD_INT 1
74682: PLUS
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: PPUSH
74688: LD_VAR 0 2
74692: PUSH
74693: LD_VAR 0 4
74697: ARRAY
74698: PUSH
74699: LD_VAR 0 2
74703: PUSH
74704: LD_VAR 0 4
74708: ARRAY
74709: PPUSH
74710: CALL_OW 255
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: PPUSH
74719: CALL 20286 0 3
74723: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
74724: LD_VAR 0 2
74728: PUSH
74729: LD_VAR 0 4
74733: ARRAY
74734: PPUSH
74735: LD_VAR 0 1
74739: PPUSH
74740: CALL_OW 255
74744: PPUSH
74745: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
74749: LD_VAR 0 2
74753: PUSH
74754: LD_VAR 0 4
74758: ARRAY
74759: PPUSH
74760: CALL_OW 141
// end ;
74764: GO 74596
74766: POP
74767: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
74768: LD_VAR 0 1
74772: PPUSH
74773: LD_EXP 101
74777: PUSH
74778: LD_VAR 0 5
74782: ARRAY
74783: PUSH
74784: LD_INT 0
74786: PLUS
74787: PPUSH
74788: CALL_OW 505
// end ;
74792: LD_VAR 0 3
74796: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
74797: LD_INT 0
74799: PPUSH
74800: PPUSH
74801: PPUSH
74802: PPUSH
// if not hack in hackTanks then
74803: LD_VAR 0 1
74807: PUSH
74808: LD_EXP 100
74812: IN
74813: NOT
74814: IFFALSE 74818
// exit ;
74816: GO 75058
// index := GetElementIndex ( hackTanks , hack ) ;
74818: LD_ADDR_VAR 0 4
74822: PUSH
74823: LD_EXP 100
74827: PPUSH
74828: LD_VAR 0 1
74832: PPUSH
74833: CALL 20071 0 2
74837: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
74838: LD_ADDR_VAR 0 3
74842: PUSH
74843: DOUBLE
74844: LD_EXP 101
74848: PUSH
74849: LD_VAR 0 4
74853: ARRAY
74854: INC
74855: ST_TO_ADDR
74856: LD_INT 1
74858: PUSH
74859: FOR_DOWNTO
74860: IFFALSE 75032
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
74862: LD_ADDR_VAR 0 5
74866: PUSH
74867: LD_EXP 101
74871: PUSH
74872: LD_VAR 0 4
74876: ARRAY
74877: PUSH
74878: LD_VAR 0 3
74882: ARRAY
74883: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
74884: LD_VAR 0 5
74888: PUSH
74889: LD_INT 1
74891: ARRAY
74892: PPUSH
74893: CALL_OW 302
74897: NOT
74898: PUSH
74899: LD_VAR 0 5
74903: PUSH
74904: LD_INT 1
74906: ARRAY
74907: PPUSH
74908: CALL_OW 255
74912: PUSH
74913: LD_VAR 0 1
74917: PPUSH
74918: CALL_OW 255
74922: NONEQUAL
74923: OR
74924: IFFALSE 75030
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
74926: LD_VAR 0 5
74930: PUSH
74931: LD_INT 1
74933: ARRAY
74934: PPUSH
74935: CALL_OW 305
74939: PUSH
74940: LD_VAR 0 5
74944: PUSH
74945: LD_INT 1
74947: ARRAY
74948: PPUSH
74949: CALL_OW 255
74953: PUSH
74954: LD_VAR 0 1
74958: PPUSH
74959: CALL_OW 255
74963: EQUAL
74964: AND
74965: IFFALSE 74989
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
74967: LD_VAR 0 5
74971: PUSH
74972: LD_INT 1
74974: ARRAY
74975: PPUSH
74976: LD_VAR 0 5
74980: PUSH
74981: LD_INT 2
74983: ARRAY
74984: PPUSH
74985: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
74989: LD_ADDR_EXP 101
74993: PUSH
74994: LD_EXP 101
74998: PPUSH
74999: LD_VAR 0 4
75003: PPUSH
75004: LD_EXP 101
75008: PUSH
75009: LD_VAR 0 4
75013: ARRAY
75014: PPUSH
75015: LD_VAR 0 3
75019: PPUSH
75020: CALL_OW 3
75024: PPUSH
75025: CALL_OW 1
75029: ST_TO_ADDR
// end ; end ;
75030: GO 74859
75032: POP
75033: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
75034: LD_VAR 0 1
75038: PPUSH
75039: LD_EXP 101
75043: PUSH
75044: LD_VAR 0 4
75048: ARRAY
75049: PUSH
75050: LD_INT 0
75052: PLUS
75053: PPUSH
75054: CALL_OW 505
// end ;
75058: LD_VAR 0 2
75062: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
75063: LD_INT 0
75065: PPUSH
75066: PPUSH
75067: PPUSH
75068: PPUSH
// if not hack in hackTanks then
75069: LD_VAR 0 1
75073: PUSH
75074: LD_EXP 100
75078: IN
75079: NOT
75080: IFFALSE 75084
// exit ;
75082: GO 75169
// index := GetElementIndex ( hackTanks , hack ) ;
75084: LD_ADDR_VAR 0 5
75088: PUSH
75089: LD_EXP 100
75093: PPUSH
75094: LD_VAR 0 1
75098: PPUSH
75099: CALL 20071 0 2
75103: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
75104: LD_ADDR_VAR 0 4
75108: PUSH
75109: DOUBLE
75110: LD_INT 1
75112: DEC
75113: ST_TO_ADDR
75114: LD_EXP 101
75118: PUSH
75119: LD_VAR 0 5
75123: ARRAY
75124: PUSH
75125: FOR_TO
75126: IFFALSE 75167
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
75128: LD_EXP 101
75132: PUSH
75133: LD_VAR 0 5
75137: ARRAY
75138: PUSH
75139: LD_VAR 0 4
75143: ARRAY
75144: PUSH
75145: LD_INT 1
75147: ARRAY
75148: PUSH
75149: LD_VAR 0 2
75153: EQUAL
75154: IFFALSE 75165
// KillUnit ( vehicle ) ;
75156: LD_VAR 0 2
75160: PPUSH
75161: CALL_OW 66
75165: GO 75125
75167: POP
75168: POP
// end ;
75169: LD_VAR 0 3
75173: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
75174: LD_EXP 105
75178: NOT
75179: IFFALSE 75214
75181: GO 75183
75183: DISABLE
// begin initMiner := true ;
75184: LD_ADDR_EXP 105
75188: PUSH
75189: LD_INT 1
75191: ST_TO_ADDR
// minersList := [ ] ;
75192: LD_ADDR_EXP 106
75196: PUSH
75197: EMPTY
75198: ST_TO_ADDR
// minerMinesList := [ ] ;
75199: LD_ADDR_EXP 107
75203: PUSH
75204: EMPTY
75205: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
75206: LD_ADDR_EXP 108
75210: PUSH
75211: LD_INT 5
75213: ST_TO_ADDR
// end ;
75214: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
75215: LD_EXP 105
75219: PUSH
75220: LD_INT 34
75222: PUSH
75223: LD_INT 81
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PPUSH
75230: CALL_OW 69
75234: AND
75235: IFFALSE 75696
75237: GO 75239
75239: DISABLE
75240: LD_INT 0
75242: PPUSH
75243: PPUSH
75244: PPUSH
75245: PPUSH
// begin enable ;
75246: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
75247: LD_ADDR_VAR 0 1
75251: PUSH
75252: LD_INT 34
75254: PUSH
75255: LD_INT 81
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: PPUSH
75262: CALL_OW 69
75266: PUSH
75267: FOR_IN
75268: IFFALSE 75340
// begin if not i in minersList then
75270: LD_VAR 0 1
75274: PUSH
75275: LD_EXP 106
75279: IN
75280: NOT
75281: IFFALSE 75338
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
75283: LD_ADDR_EXP 106
75287: PUSH
75288: LD_EXP 106
75292: PPUSH
75293: LD_EXP 106
75297: PUSH
75298: LD_INT 1
75300: PLUS
75301: PPUSH
75302: LD_VAR 0 1
75306: PPUSH
75307: CALL_OW 1
75311: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
75312: LD_ADDR_EXP 107
75316: PUSH
75317: LD_EXP 107
75321: PPUSH
75322: LD_EXP 107
75326: PUSH
75327: LD_INT 1
75329: PLUS
75330: PPUSH
75331: EMPTY
75332: PPUSH
75333: CALL_OW 1
75337: ST_TO_ADDR
// end end ;
75338: GO 75267
75340: POP
75341: POP
// for i := minerMinesList downto 1 do
75342: LD_ADDR_VAR 0 1
75346: PUSH
75347: DOUBLE
75348: LD_EXP 107
75352: INC
75353: ST_TO_ADDR
75354: LD_INT 1
75356: PUSH
75357: FOR_DOWNTO
75358: IFFALSE 75694
// begin if IsLive ( minersList [ i ] ) then
75360: LD_EXP 106
75364: PUSH
75365: LD_VAR 0 1
75369: ARRAY
75370: PPUSH
75371: CALL_OW 300
75375: IFFALSE 75403
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
75377: LD_EXP 106
75381: PUSH
75382: LD_VAR 0 1
75386: ARRAY
75387: PPUSH
75388: LD_EXP 107
75392: PUSH
75393: LD_VAR 0 1
75397: ARRAY
75398: PPUSH
75399: CALL_OW 505
// if not minerMinesList [ i ] then
75403: LD_EXP 107
75407: PUSH
75408: LD_VAR 0 1
75412: ARRAY
75413: NOT
75414: IFFALSE 75418
// continue ;
75416: GO 75357
// for j := minerMinesList [ i ] downto 1 do
75418: LD_ADDR_VAR 0 2
75422: PUSH
75423: DOUBLE
75424: LD_EXP 107
75428: PUSH
75429: LD_VAR 0 1
75433: ARRAY
75434: INC
75435: ST_TO_ADDR
75436: LD_INT 1
75438: PUSH
75439: FOR_DOWNTO
75440: IFFALSE 75690
// begin side := GetSide ( minersList [ i ] ) ;
75442: LD_ADDR_VAR 0 3
75446: PUSH
75447: LD_EXP 106
75451: PUSH
75452: LD_VAR 0 1
75456: ARRAY
75457: PPUSH
75458: CALL_OW 255
75462: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
75463: LD_ADDR_VAR 0 4
75467: PUSH
75468: LD_EXP 107
75472: PUSH
75473: LD_VAR 0 1
75477: ARRAY
75478: PUSH
75479: LD_VAR 0 2
75483: ARRAY
75484: PUSH
75485: LD_INT 1
75487: ARRAY
75488: PPUSH
75489: LD_EXP 107
75493: PUSH
75494: LD_VAR 0 1
75498: ARRAY
75499: PUSH
75500: LD_VAR 0 2
75504: ARRAY
75505: PUSH
75506: LD_INT 2
75508: ARRAY
75509: PPUSH
75510: CALL_OW 428
75514: ST_TO_ADDR
// if not tmp then
75515: LD_VAR 0 4
75519: NOT
75520: IFFALSE 75524
// continue ;
75522: GO 75439
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
75524: LD_VAR 0 4
75528: PUSH
75529: LD_INT 81
75531: PUSH
75532: LD_VAR 0 3
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: PPUSH
75541: CALL_OW 69
75545: IN
75546: PUSH
75547: LD_EXP 107
75551: PUSH
75552: LD_VAR 0 1
75556: ARRAY
75557: PUSH
75558: LD_VAR 0 2
75562: ARRAY
75563: PUSH
75564: LD_INT 1
75566: ARRAY
75567: PPUSH
75568: LD_EXP 107
75572: PUSH
75573: LD_VAR 0 1
75577: ARRAY
75578: PUSH
75579: LD_VAR 0 2
75583: ARRAY
75584: PUSH
75585: LD_INT 2
75587: ARRAY
75588: PPUSH
75589: CALL_OW 458
75593: AND
75594: IFFALSE 75688
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
75596: LD_EXP 107
75600: PUSH
75601: LD_VAR 0 1
75605: ARRAY
75606: PUSH
75607: LD_VAR 0 2
75611: ARRAY
75612: PUSH
75613: LD_INT 1
75615: ARRAY
75616: PPUSH
75617: LD_EXP 107
75621: PUSH
75622: LD_VAR 0 1
75626: ARRAY
75627: PUSH
75628: LD_VAR 0 2
75632: ARRAY
75633: PUSH
75634: LD_INT 2
75636: ARRAY
75637: PPUSH
75638: LD_VAR 0 3
75642: PPUSH
75643: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
75647: LD_ADDR_EXP 107
75651: PUSH
75652: LD_EXP 107
75656: PPUSH
75657: LD_VAR 0 1
75661: PPUSH
75662: LD_EXP 107
75666: PUSH
75667: LD_VAR 0 1
75671: ARRAY
75672: PPUSH
75673: LD_VAR 0 2
75677: PPUSH
75678: CALL_OW 3
75682: PPUSH
75683: CALL_OW 1
75687: ST_TO_ADDR
// end ; end ;
75688: GO 75439
75690: POP
75691: POP
// end ;
75692: GO 75357
75694: POP
75695: POP
// end ;
75696: PPOPN 4
75698: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
75699: LD_INT 0
75701: PPUSH
75702: PPUSH
// result := false ;
75703: LD_ADDR_VAR 0 4
75707: PUSH
75708: LD_INT 0
75710: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
75711: LD_VAR 0 1
75715: PPUSH
75716: CALL_OW 264
75720: PUSH
75721: LD_INT 81
75723: EQUAL
75724: NOT
75725: IFFALSE 75729
// exit ;
75727: GO 75969
// index := GetElementIndex ( minersList , unit ) ;
75729: LD_ADDR_VAR 0 5
75733: PUSH
75734: LD_EXP 106
75738: PPUSH
75739: LD_VAR 0 1
75743: PPUSH
75744: CALL 20071 0 2
75748: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
75749: LD_EXP 107
75753: PUSH
75754: LD_VAR 0 5
75758: ARRAY
75759: PUSH
75760: LD_EXP 108
75764: GREATEREQUAL
75765: IFFALSE 75769
// exit ;
75767: GO 75969
// ComMoveXY ( unit , x , y ) ;
75769: LD_VAR 0 1
75773: PPUSH
75774: LD_VAR 0 2
75778: PPUSH
75779: LD_VAR 0 3
75783: PPUSH
75784: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75788: LD_INT 35
75790: PPUSH
75791: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
75795: LD_VAR 0 1
75799: PPUSH
75800: LD_VAR 0 2
75804: PPUSH
75805: LD_VAR 0 3
75809: PPUSH
75810: CALL 51455 0 3
75814: NOT
75815: PUSH
75816: LD_VAR 0 1
75820: PPUSH
75821: CALL_OW 314
75825: AND
75826: IFFALSE 75830
// exit ;
75828: GO 75969
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
75830: LD_VAR 0 2
75834: PPUSH
75835: LD_VAR 0 3
75839: PPUSH
75840: CALL_OW 428
75844: PUSH
75845: LD_VAR 0 1
75849: EQUAL
75850: PUSH
75851: LD_VAR 0 1
75855: PPUSH
75856: CALL_OW 314
75860: NOT
75861: AND
75862: IFFALSE 75788
// PlaySoundXY ( x , y , PlantMine ) ;
75864: LD_VAR 0 2
75868: PPUSH
75869: LD_VAR 0 3
75873: PPUSH
75874: LD_STRING PlantMine
75876: PPUSH
75877: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
75881: LD_VAR 0 2
75885: PPUSH
75886: LD_VAR 0 3
75890: PPUSH
75891: LD_VAR 0 1
75895: PPUSH
75896: CALL_OW 255
75900: PPUSH
75901: LD_INT 0
75903: PPUSH
75904: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
75908: LD_ADDR_EXP 107
75912: PUSH
75913: LD_EXP 107
75917: PPUSH
75918: LD_VAR 0 5
75922: PUSH
75923: LD_EXP 107
75927: PUSH
75928: LD_VAR 0 5
75932: ARRAY
75933: PUSH
75934: LD_INT 1
75936: PLUS
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: PPUSH
75942: LD_VAR 0 2
75946: PUSH
75947: LD_VAR 0 3
75951: PUSH
75952: EMPTY
75953: LIST
75954: LIST
75955: PPUSH
75956: CALL 20286 0 3
75960: ST_TO_ADDR
// result := true ;
75961: LD_ADDR_VAR 0 4
75965: PUSH
75966: LD_INT 1
75968: ST_TO_ADDR
// end ;
75969: LD_VAR 0 4
75973: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
75974: LD_INT 0
75976: PPUSH
75977: PPUSH
75978: PPUSH
// if not unit in minersList then
75979: LD_VAR 0 1
75983: PUSH
75984: LD_EXP 106
75988: IN
75989: NOT
75990: IFFALSE 75994
// exit ;
75992: GO 76386
// index := GetElementIndex ( minersList , unit ) ;
75994: LD_ADDR_VAR 0 6
75998: PUSH
75999: LD_EXP 106
76003: PPUSH
76004: LD_VAR 0 1
76008: PPUSH
76009: CALL 20071 0 2
76013: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
76014: LD_ADDR_VAR 0 5
76018: PUSH
76019: DOUBLE
76020: LD_EXP 107
76024: PUSH
76025: LD_VAR 0 6
76029: ARRAY
76030: INC
76031: ST_TO_ADDR
76032: LD_INT 1
76034: PUSH
76035: FOR_DOWNTO
76036: IFFALSE 76197
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
76038: LD_EXP 107
76042: PUSH
76043: LD_VAR 0 6
76047: ARRAY
76048: PUSH
76049: LD_VAR 0 5
76053: ARRAY
76054: PUSH
76055: LD_INT 1
76057: ARRAY
76058: PUSH
76059: LD_VAR 0 2
76063: EQUAL
76064: PUSH
76065: LD_EXP 107
76069: PUSH
76070: LD_VAR 0 6
76074: ARRAY
76075: PUSH
76076: LD_VAR 0 5
76080: ARRAY
76081: PUSH
76082: LD_INT 2
76084: ARRAY
76085: PUSH
76086: LD_VAR 0 3
76090: EQUAL
76091: AND
76092: IFFALSE 76195
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
76094: LD_EXP 107
76098: PUSH
76099: LD_VAR 0 6
76103: ARRAY
76104: PUSH
76105: LD_VAR 0 5
76109: ARRAY
76110: PUSH
76111: LD_INT 1
76113: ARRAY
76114: PPUSH
76115: LD_EXP 107
76119: PUSH
76120: LD_VAR 0 6
76124: ARRAY
76125: PUSH
76126: LD_VAR 0 5
76130: ARRAY
76131: PUSH
76132: LD_INT 2
76134: ARRAY
76135: PPUSH
76136: LD_VAR 0 1
76140: PPUSH
76141: CALL_OW 255
76145: PPUSH
76146: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
76150: LD_ADDR_EXP 107
76154: PUSH
76155: LD_EXP 107
76159: PPUSH
76160: LD_VAR 0 6
76164: PPUSH
76165: LD_EXP 107
76169: PUSH
76170: LD_VAR 0 6
76174: ARRAY
76175: PPUSH
76176: LD_VAR 0 5
76180: PPUSH
76181: CALL_OW 3
76185: PPUSH
76186: CALL_OW 1
76190: ST_TO_ADDR
// exit ;
76191: POP
76192: POP
76193: GO 76386
// end ; end ;
76195: GO 76035
76197: POP
76198: POP
// for i := minerMinesList [ index ] downto 1 do
76199: LD_ADDR_VAR 0 5
76203: PUSH
76204: DOUBLE
76205: LD_EXP 107
76209: PUSH
76210: LD_VAR 0 6
76214: ARRAY
76215: INC
76216: ST_TO_ADDR
76217: LD_INT 1
76219: PUSH
76220: FOR_DOWNTO
76221: IFFALSE 76384
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
76223: LD_EXP 107
76227: PUSH
76228: LD_VAR 0 6
76232: ARRAY
76233: PUSH
76234: LD_VAR 0 5
76238: ARRAY
76239: PUSH
76240: LD_INT 1
76242: ARRAY
76243: PPUSH
76244: LD_EXP 107
76248: PUSH
76249: LD_VAR 0 6
76253: ARRAY
76254: PUSH
76255: LD_VAR 0 5
76259: ARRAY
76260: PUSH
76261: LD_INT 2
76263: ARRAY
76264: PPUSH
76265: LD_VAR 0 2
76269: PPUSH
76270: LD_VAR 0 3
76274: PPUSH
76275: CALL_OW 298
76279: PUSH
76280: LD_INT 6
76282: LESS
76283: IFFALSE 76382
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
76285: LD_EXP 107
76289: PUSH
76290: LD_VAR 0 6
76294: ARRAY
76295: PUSH
76296: LD_VAR 0 5
76300: ARRAY
76301: PUSH
76302: LD_INT 1
76304: ARRAY
76305: PPUSH
76306: LD_EXP 107
76310: PUSH
76311: LD_VAR 0 6
76315: ARRAY
76316: PUSH
76317: LD_VAR 0 5
76321: ARRAY
76322: PUSH
76323: LD_INT 2
76325: ARRAY
76326: PPUSH
76327: LD_VAR 0 1
76331: PPUSH
76332: CALL_OW 255
76336: PPUSH
76337: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
76341: LD_ADDR_EXP 107
76345: PUSH
76346: LD_EXP 107
76350: PPUSH
76351: LD_VAR 0 6
76355: PPUSH
76356: LD_EXP 107
76360: PUSH
76361: LD_VAR 0 6
76365: ARRAY
76366: PPUSH
76367: LD_VAR 0 5
76371: PPUSH
76372: CALL_OW 3
76376: PPUSH
76377: CALL_OW 1
76381: ST_TO_ADDR
// end ; end ;
76382: GO 76220
76384: POP
76385: POP
// end ;
76386: LD_VAR 0 4
76390: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
76391: LD_INT 0
76393: PPUSH
76394: PPUSH
76395: PPUSH
76396: PPUSH
76397: PPUSH
76398: PPUSH
76399: PPUSH
76400: PPUSH
76401: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
76402: LD_VAR 0 1
76406: PPUSH
76407: CALL_OW 264
76411: PUSH
76412: LD_INT 81
76414: EQUAL
76415: NOT
76416: PUSH
76417: LD_VAR 0 1
76421: PUSH
76422: LD_EXP 106
76426: IN
76427: NOT
76428: OR
76429: IFFALSE 76433
// exit ;
76431: GO 76755
// index := GetElementIndex ( minersList , unit ) ;
76433: LD_ADDR_VAR 0 6
76437: PUSH
76438: LD_EXP 106
76442: PPUSH
76443: LD_VAR 0 1
76447: PPUSH
76448: CALL 20071 0 2
76452: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
76453: LD_ADDR_VAR 0 8
76457: PUSH
76458: LD_EXP 108
76462: PUSH
76463: LD_EXP 107
76467: PUSH
76468: LD_VAR 0 6
76472: ARRAY
76473: MINUS
76474: ST_TO_ADDR
// if not minesFreeAmount then
76475: LD_VAR 0 8
76479: NOT
76480: IFFALSE 76484
// exit ;
76482: GO 76755
// tmp := [ ] ;
76484: LD_ADDR_VAR 0 7
76488: PUSH
76489: EMPTY
76490: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
76491: LD_ADDR_VAR 0 5
76495: PUSH
76496: DOUBLE
76497: LD_INT 1
76499: DEC
76500: ST_TO_ADDR
76501: LD_VAR 0 8
76505: PUSH
76506: FOR_TO
76507: IFFALSE 76702
// begin _d := rand ( 0 , 5 ) ;
76509: LD_ADDR_VAR 0 11
76513: PUSH
76514: LD_INT 0
76516: PPUSH
76517: LD_INT 5
76519: PPUSH
76520: CALL_OW 12
76524: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
76525: LD_ADDR_VAR 0 12
76529: PUSH
76530: LD_INT 2
76532: PPUSH
76533: LD_INT 6
76535: PPUSH
76536: CALL_OW 12
76540: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
76541: LD_ADDR_VAR 0 9
76545: PUSH
76546: LD_VAR 0 2
76550: PPUSH
76551: LD_VAR 0 11
76555: PPUSH
76556: LD_VAR 0 12
76560: PPUSH
76561: CALL_OW 272
76565: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
76566: LD_ADDR_VAR 0 10
76570: PUSH
76571: LD_VAR 0 3
76575: PPUSH
76576: LD_VAR 0 11
76580: PPUSH
76581: LD_VAR 0 12
76585: PPUSH
76586: CALL_OW 273
76590: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
76591: LD_VAR 0 9
76595: PPUSH
76596: LD_VAR 0 10
76600: PPUSH
76601: CALL_OW 488
76605: PUSH
76606: LD_VAR 0 9
76610: PUSH
76611: LD_VAR 0 10
76615: PUSH
76616: EMPTY
76617: LIST
76618: LIST
76619: PUSH
76620: LD_VAR 0 7
76624: IN
76625: NOT
76626: AND
76627: PUSH
76628: LD_VAR 0 9
76632: PPUSH
76633: LD_VAR 0 10
76637: PPUSH
76638: CALL_OW 458
76642: NOT
76643: AND
76644: IFFALSE 76686
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
76646: LD_ADDR_VAR 0 7
76650: PUSH
76651: LD_VAR 0 7
76655: PPUSH
76656: LD_VAR 0 7
76660: PUSH
76661: LD_INT 1
76663: PLUS
76664: PPUSH
76665: LD_VAR 0 9
76669: PUSH
76670: LD_VAR 0 10
76674: PUSH
76675: EMPTY
76676: LIST
76677: LIST
76678: PPUSH
76679: CALL_OW 1
76683: ST_TO_ADDR
76684: GO 76700
// i := i - 1 ;
76686: LD_ADDR_VAR 0 5
76690: PUSH
76691: LD_VAR 0 5
76695: PUSH
76696: LD_INT 1
76698: MINUS
76699: ST_TO_ADDR
// end ;
76700: GO 76506
76702: POP
76703: POP
// for i in tmp do
76704: LD_ADDR_VAR 0 5
76708: PUSH
76709: LD_VAR 0 7
76713: PUSH
76714: FOR_IN
76715: IFFALSE 76753
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
76717: LD_VAR 0 1
76721: PPUSH
76722: LD_VAR 0 5
76726: PUSH
76727: LD_INT 1
76729: ARRAY
76730: PPUSH
76731: LD_VAR 0 5
76735: PUSH
76736: LD_INT 2
76738: ARRAY
76739: PPUSH
76740: CALL 75699 0 3
76744: NOT
76745: IFFALSE 76751
// exit ;
76747: POP
76748: POP
76749: GO 76755
76751: GO 76714
76753: POP
76754: POP
// end ;
76755: LD_VAR 0 4
76759: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
76760: LD_INT 0
76762: PPUSH
76763: PPUSH
76764: PPUSH
76765: PPUSH
76766: PPUSH
76767: PPUSH
76768: PPUSH
// if not GetClass ( unit ) = class_sniper then
76769: LD_VAR 0 1
76773: PPUSH
76774: CALL_OW 257
76778: PUSH
76779: LD_INT 5
76781: EQUAL
76782: NOT
76783: IFFALSE 76787
// exit ;
76785: GO 77175
// dist := 8 ;
76787: LD_ADDR_VAR 0 5
76791: PUSH
76792: LD_INT 8
76794: ST_TO_ADDR
// viewRange := 12 ;
76795: LD_ADDR_VAR 0 7
76799: PUSH
76800: LD_INT 12
76802: ST_TO_ADDR
// side := GetSide ( unit ) ;
76803: LD_ADDR_VAR 0 6
76807: PUSH
76808: LD_VAR 0 1
76812: PPUSH
76813: CALL_OW 255
76817: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
76818: LD_INT 61
76820: PPUSH
76821: LD_VAR 0 6
76825: PPUSH
76826: CALL_OW 321
76830: PUSH
76831: LD_INT 2
76833: EQUAL
76834: IFFALSE 76844
// viewRange := 16 ;
76836: LD_ADDR_VAR 0 7
76840: PUSH
76841: LD_INT 16
76843: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
76844: LD_VAR 0 1
76848: PPUSH
76849: LD_VAR 0 2
76853: PPUSH
76854: LD_VAR 0 3
76858: PPUSH
76859: CALL_OW 297
76863: PUSH
76864: LD_VAR 0 5
76868: GREATER
76869: IFFALSE 76948
// begin ComMoveXY ( unit , x , y ) ;
76871: LD_VAR 0 1
76875: PPUSH
76876: LD_VAR 0 2
76880: PPUSH
76881: LD_VAR 0 3
76885: PPUSH
76886: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
76890: LD_INT 35
76892: PPUSH
76893: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
76897: LD_VAR 0 1
76901: PPUSH
76902: LD_VAR 0 2
76906: PPUSH
76907: LD_VAR 0 3
76911: PPUSH
76912: CALL 51455 0 3
76916: NOT
76917: IFFALSE 76921
// exit ;
76919: GO 77175
// until GetDistUnitXY ( unit , x , y ) < dist ;
76921: LD_VAR 0 1
76925: PPUSH
76926: LD_VAR 0 2
76930: PPUSH
76931: LD_VAR 0 3
76935: PPUSH
76936: CALL_OW 297
76940: PUSH
76941: LD_VAR 0 5
76945: LESS
76946: IFFALSE 76890
// end ; ComTurnXY ( unit , x , y ) ;
76948: LD_VAR 0 1
76952: PPUSH
76953: LD_VAR 0 2
76957: PPUSH
76958: LD_VAR 0 3
76962: PPUSH
76963: CALL_OW 118
// wait ( 5 ) ;
76967: LD_INT 5
76969: PPUSH
76970: CALL_OW 67
// _d := GetDir ( unit ) ;
76974: LD_ADDR_VAR 0 10
76978: PUSH
76979: LD_VAR 0 1
76983: PPUSH
76984: CALL_OW 254
76988: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
76989: LD_ADDR_VAR 0 8
76993: PUSH
76994: LD_VAR 0 1
76998: PPUSH
76999: CALL_OW 250
77003: PPUSH
77004: LD_VAR 0 10
77008: PPUSH
77009: LD_VAR 0 5
77013: PPUSH
77014: CALL_OW 272
77018: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
77019: LD_ADDR_VAR 0 9
77023: PUSH
77024: LD_VAR 0 1
77028: PPUSH
77029: CALL_OW 251
77033: PPUSH
77034: LD_VAR 0 10
77038: PPUSH
77039: LD_VAR 0 5
77043: PPUSH
77044: CALL_OW 273
77048: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77049: LD_VAR 0 8
77053: PPUSH
77054: LD_VAR 0 9
77058: PPUSH
77059: CALL_OW 488
77063: NOT
77064: IFFALSE 77068
// exit ;
77066: GO 77175
// ComAnimCustom ( unit , 1 ) ;
77068: LD_VAR 0 1
77072: PPUSH
77073: LD_INT 1
77075: PPUSH
77076: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
77080: LD_VAR 0 8
77084: PPUSH
77085: LD_VAR 0 9
77089: PPUSH
77090: LD_VAR 0 6
77094: PPUSH
77095: LD_VAR 0 7
77099: PPUSH
77100: CALL_OW 330
// repeat wait ( 1 ) ;
77104: LD_INT 1
77106: PPUSH
77107: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
77111: LD_VAR 0 1
77115: PPUSH
77116: CALL_OW 316
77120: PUSH
77121: LD_VAR 0 1
77125: PPUSH
77126: CALL_OW 314
77130: OR
77131: PUSH
77132: LD_VAR 0 1
77136: PPUSH
77137: CALL_OW 302
77141: NOT
77142: OR
77143: PUSH
77144: LD_VAR 0 1
77148: PPUSH
77149: CALL_OW 301
77153: OR
77154: IFFALSE 77104
// RemoveSeeing ( _x , _y , side ) ;
77156: LD_VAR 0 8
77160: PPUSH
77161: LD_VAR 0 9
77165: PPUSH
77166: LD_VAR 0 6
77170: PPUSH
77171: CALL_OW 331
// end ;
77175: LD_VAR 0 4
77179: RET
