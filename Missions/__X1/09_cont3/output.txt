// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 10268 0 0
// LoadEnv ;
  16: CALL 9827 0 0
// LoadCam ;
  20: CALL 10532 0 0
// LoadTech ;
  24: CALL 10608 0 0
// LoadBase ;
  28: CALL 11094 0 0
// PrepareArabian ;
  32: CALL 186 0 0
// PrepareRussian ;
  36: CALL 3050 0 0
// Action ;
  40: CALL 12398 0 0
// end ;
  44: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; export wave , strength ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 09c_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 09c_
  63: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 09_tick
  71: PPUSH
  72: LD_INT 31500
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 09c_tick
  87: PPUSH
  88: LD_INT 10500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// playerInBase := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// kamikazeTrained := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// apeDriver := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 120
 127: PUSH
 128: LD_INT 150
 130: PUSH
 131: LD_INT 180
 133: PUSH
 134: LD_INT 220
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// missionTime := 0 0$00 ;
 149: LD_ADDR_EXP 9
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// ruDefeated := false ;
 157: LD_ADDR_EXP 10
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// wave := 0 ;
 165: LD_ADDR_EXP 11
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// strength := 0 ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ; end_of_file
 181: LD_VAR 0 1
 185: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 197: LD_STRING 05_DrugsTested
 199: PPUSH
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 30
 209: IFFALSE 224
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 211: LD_INT 5
 213: PPUSH
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 2
 219: PPUSH
 220: CALL_OW 322
// uc_side := 2 ;
 224: LD_ADDR_OWVAR 20
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// uc_nation := nation_nature ;
 232: LD_ADDR_OWVAR 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 240: LD_ADDR_VAR 0 3
 244: PUSH
 245: LD_STRING 09_apes
 247: PPUSH
 248: CALL_OW 31
 252: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 253: LD_ADDR_VAR 0 6
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 30
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: ST_TO_ADDR
// if apes then
 305: LD_VAR 0 3
 309: IFFALSE 388
// for i in apes do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: LD_VAR 0 3
 320: PUSH
 321: FOR_IN
 322: IFFALSE 386
// if UnitsInside ( b [ 1 ] ) < 6 then
 324: LD_VAR 0 6
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: CALL_OW 313
 337: PUSH
 338: LD_INT 6
 340: LESS
 341: IFFALSE 363
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_VAR 0 6
 352: PUSH
 353: LD_INT 1
 355: ARRAY
 356: PPUSH
 357: CALL_OW 52
 361: GO 384
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 363: LD_VAR 0 2
 367: PPUSH
 368: LD_INT 82
 370: PPUSH
 371: LD_INT 27
 373: PPUSH
 374: LD_INT 6
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 50
 384: GO 321
 386: POP
 387: POP
// InitHC_All ( ) ;
 388: CALL_OW 584
// uc_nation := nation_arabian ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 2
 399: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 400: LD_ADDR_VAR 0 6
 404: PUSH
 405: LD_INT 22
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 5
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 474: LD_ADDR_EXP 33
 478: PUSH
 479: LD_STRING Rolf
 481: PPUSH
 482: LD_EXP 1
 486: NOT
 487: PPUSH
 488: LD_STRING 06_
 490: PPUSH
 491: CALL 15488 0 3
 495: ST_TO_ADDR
// if Rolf then
 496: LD_EXP 33
 500: IFFALSE 709
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 502: LD_ADDR_EXP 32
 506: PUSH
 507: LD_STRING 06_RolfSquad
 509: PPUSH
 510: CALL_OW 31
 514: ST_TO_ADDR
// if rolfSquad < 3 then
 515: LD_EXP 32
 519: PUSH
 520: LD_INT 3
 522: LESS
 523: IFFALSE 586
// for i := 1 to 3 - Count ( rolfSquad ) do
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: DOUBLE
 531: LD_INT 1
 533: DEC
 534: ST_TO_ADDR
 535: LD_INT 3
 537: PUSH
 538: LD_EXP 32
 542: PPUSH
 543: CALL 17611 0 1
 547: MINUS
 548: PUSH
 549: FOR_TO
 550: IFFALSE 584
// begin PrepareSoldier ( false , 4 ) ;
 552: LD_INT 0
 554: PPUSH
 555: LD_INT 4
 557: PPUSH
 558: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 562: LD_ADDR_EXP 32
 566: PUSH
 567: LD_EXP 32
 571: PPUSH
 572: CALL_OW 44
 576: PPUSH
 577: CALL 53220 0 2
 581: ST_TO_ADDR
// end ;
 582: GO 549
 584: POP
 585: POP
// if b then
 586: LD_VAR 0 6
 590: IFFALSE 665
// begin for i in rolfSquad union Rolf do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_EXP 32
 601: PUSH
 602: LD_EXP 33
 606: UNION
 607: PUSH
 608: FOR_IN
 609: IFFALSE 661
// begin SetClass ( i , 1 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_VAR 0 6
 632: PPUSH
 633: LD_INT 3
 635: PUSH
 636: LD_INT 62
 638: PUSH
 639: EMPTY
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 52
// end ;
 659: GO 608
 661: POP
 662: POP
// end else
 663: GO 709
// for i in rolfSquad union Rolf do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_EXP 32
 674: PUSH
 675: LD_EXP 33
 679: UNION
 680: PUSH
 681: FOR_IN
 682: IFFALSE 707
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 684: LD_VAR 0 2
 688: PPUSH
 689: LD_INT 82
 691: PPUSH
 692: LD_INT 27
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 50
 705: GO 681
 707: POP
 708: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 13
 713: PUSH
 714: LD_STRING Heike
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 15488 0 3
 732: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 16
 737: PUSH
 738: LD_STRING Ibrahim
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 15488 0 3
 756: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 14
 761: PUSH
 762: LD_STRING Givi
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 15488 0 3
 780: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 17
 785: PUSH
 786: LD_STRING Kamil
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 15488 0 3
 804: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 18
 809: PUSH
 810: LD_STRING Kaia
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 15488 0 3
 828: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 19
 833: PUSH
 834: LD_STRING Sophia
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 15488 0 3
 852: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 20
 857: PUSH
 858: LD_STRING Markov
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 15488 0 3
 876: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 23
 881: PUSH
 882: LD_STRING Aviradze
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 15488 0 3
 900: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 22
 905: PUSH
 906: LD_STRING Kurt
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 15488 0 3
 924: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_STRING Mike
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 15488 0 3
 948: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 21
 953: PUSH
 954: LD_STRING Olaf
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 15488 0 3
 972: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 973: LD_ADDR_EXP 30
 977: PUSH
 978: LD_STRING 09c_heikeSecondSquad
 980: PPUSH
 981: CALL_OW 31
 985: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 986: LD_ADDR_EXP 24
 990: PUSH
 991: LD_STRING Schulz
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_EXP 2
1004: PPUSH
1005: CALL 15488 0 3
1009: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
1010: LD_ADDR_EXP 25
1014: PUSH
1015: LD_STRING Basim
1017: PPUSH
1018: LD_EXP 1
1022: NOT
1023: PPUSH
1024: LD_EXP 2
1028: PPUSH
1029: CALL 15488 0 3
1033: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1034: LD_ADDR_EXP 26
1038: PUSH
1039: LD_STRING Lemmy
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 2
1052: PPUSH
1053: CALL 15488 0 3
1057: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1058: LD_ADDR_EXP 27
1062: PUSH
1063: LD_STRING Mia
1065: PPUSH
1066: LD_EXP 1
1070: NOT
1071: PPUSH
1072: LD_EXP 2
1076: PPUSH
1077: CALL 15488 0 3
1081: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1082: LD_ADDR_EXP 28
1086: PUSH
1087: LD_STRING Nia
1089: PPUSH
1090: LD_EXP 1
1094: NOT
1095: PPUSH
1096: LD_EXP 2
1100: PPUSH
1101: CALL 15488 0 3
1105: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1106: LD_ADDR_EXP 29
1110: PUSH
1111: LD_STRING Jenna
1113: PPUSH
1114: LD_EXP 1
1118: NOT
1119: PPUSH
1120: LD_EXP 2
1124: PPUSH
1125: CALL 15488 0 3
1129: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING 09c_schulzSecondSquad
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// if debug then
1143: LD_EXP 1
1147: IFFALSE 1227
// begin schulzSecondSquad := [ ] ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: EMPTY
1155: ST_TO_ADDR
// for i := 1 to 3 do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_INT 3
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1225
// begin uc_side := 2 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
// uc_nation := nation_arabian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 2
1187: ST_TO_ADDR
// PrepareHuman ( false , i , 0 ) ;
1188: LD_INT 0
1190: PPUSH
1191: LD_VAR 0 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PPUSH
1213: CALL_OW 44
1217: PPUSH
1218: CALL 53220 0 2
1222: ST_TO_ADDR
// end ;
1223: GO 1169
1225: POP
1226: POP
// end ; vehicles := LoadVariable ( 09c_vehicles , [ [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 36 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 41 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 37 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 35 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 34 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 38 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 40 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 39 ] ] ) ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_STRING 09c_vehicles
1234: PPUSH
1235: LD_INT 13
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 28
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 36
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 13
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 28
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 0
1289: PUSH
1290: LD_INT 41
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 13
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: LD_INT 28
1314: PUSH
1315: LD_INT 2
1317: PUSH
1318: LD_INT 0
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 37
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 13
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 28
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 35
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 13
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 28
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: LD_INT 34
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 13
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 28
1416: PUSH
1417: LD_INT 2
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 38
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 13
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 28
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 40
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 13
1475: PUSH
1476: LD_INT 3
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 28
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 39
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 30
1521: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Heike , LoadVariable ( 09c_Heike_ID , - 1 ) , vehicles ) ;
1522: LD_ADDR_VAR 0 9
1526: PUSH
1527: LD_VAR 0 9
1531: PUSH
1532: LD_EXP 13
1536: PPUSH
1537: LD_STRING 09c_Heike_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2764 0 3
1558: DIFF
1559: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Givi , LoadVariable ( 09c_Givi_ID , - 1 ) , vehicles ) ;
1560: LD_ADDR_VAR 0 9
1564: PUSH
1565: LD_VAR 0 9
1569: PUSH
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING 09c_Givi_ID
1577: PPUSH
1578: LD_INT 1
1580: NEG
1581: PPUSH
1582: CALL_OW 30
1586: PPUSH
1587: LD_VAR 0 9
1591: PPUSH
1592: CALL 2764 0 3
1596: DIFF
1597: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mike , LoadVariable ( 09c_Mike_ID , - 1 ) , vehicles ) ;
1598: LD_ADDR_VAR 0 9
1602: PUSH
1603: LD_VAR 0 9
1607: PUSH
1608: LD_EXP 15
1612: PPUSH
1613: LD_STRING 09c_Mike_ID
1615: PPUSH
1616: LD_INT 1
1618: NEG
1619: PPUSH
1620: CALL_OW 30
1624: PPUSH
1625: LD_VAR 0 9
1629: PPUSH
1630: CALL 2764 0 3
1634: DIFF
1635: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Ibrahim , LoadVariable ( 09c_Ibrahim_ID , - 1 ) , vehicles ) ;
1636: LD_ADDR_VAR 0 9
1640: PUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_EXP 16
1650: PPUSH
1651: LD_STRING 09c_Ibrahim_ID
1653: PPUSH
1654: LD_INT 1
1656: NEG
1657: PPUSH
1658: CALL_OW 30
1662: PPUSH
1663: LD_VAR 0 9
1667: PPUSH
1668: CALL 2764 0 3
1672: DIFF
1673: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kamil , LoadVariable ( 09c_Kamil_ID , - 1 ) , vehicles ) ;
1674: LD_ADDR_VAR 0 9
1678: PUSH
1679: LD_VAR 0 9
1683: PUSH
1684: LD_EXP 17
1688: PPUSH
1689: LD_STRING 09c_Kamil_ID
1691: PPUSH
1692: LD_INT 1
1694: NEG
1695: PPUSH
1696: CALL_OW 30
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL 2764 0 3
1710: DIFF
1711: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kaia , LoadVariable ( 09c_Kaia_ID , - 1 ) , vehicles ) ;
1712: LD_ADDR_VAR 0 9
1716: PUSH
1717: LD_VAR 0 9
1721: PUSH
1722: LD_EXP 18
1726: PPUSH
1727: LD_STRING 09c_Kaia_ID
1729: PPUSH
1730: LD_INT 1
1732: NEG
1733: PPUSH
1734: CALL_OW 30
1738: PPUSH
1739: LD_VAR 0 9
1743: PPUSH
1744: CALL 2764 0 3
1748: DIFF
1749: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Sophia , LoadVariable ( 09c_Sophia_ID , - 1 ) , vehicles ) ;
1750: LD_ADDR_VAR 0 9
1754: PUSH
1755: LD_VAR 0 9
1759: PUSH
1760: LD_EXP 19
1764: PPUSH
1765: LD_STRING 09c_Sophia_ID
1767: PPUSH
1768: LD_INT 1
1770: NEG
1771: PPUSH
1772: CALL_OW 30
1776: PPUSH
1777: LD_VAR 0 9
1781: PPUSH
1782: CALL 2764 0 3
1786: DIFF
1787: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Markov , LoadVariable ( 09c_Markov_ID , - 1 ) , vehicles ) ;
1788: LD_ADDR_VAR 0 9
1792: PUSH
1793: LD_VAR 0 9
1797: PUSH
1798: LD_EXP 20
1802: PPUSH
1803: LD_STRING 09c_Markov_ID
1805: PPUSH
1806: LD_INT 1
1808: NEG
1809: PPUSH
1810: CALL_OW 30
1814: PPUSH
1815: LD_VAR 0 9
1819: PPUSH
1820: CALL 2764 0 3
1824: DIFF
1825: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Olaf , LoadVariable ( 09c_Olaf_ID , - 1 ) , vehicles ) ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_VAR 0 9
1835: PUSH
1836: LD_EXP 21
1840: PPUSH
1841: LD_STRING 09c_Olaf_ID
1843: PPUSH
1844: LD_INT 1
1846: NEG
1847: PPUSH
1848: CALL_OW 30
1852: PPUSH
1853: LD_VAR 0 9
1857: PPUSH
1858: CALL 2764 0 3
1862: DIFF
1863: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kurt , LoadVariable ( 09c_Kurt_ID , - 1 ) , vehicles ) ;
1864: LD_ADDR_VAR 0 9
1868: PUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_STRING 09c_Kurt_ID
1881: PPUSH
1882: LD_INT 1
1884: NEG
1885: PPUSH
1886: CALL_OW 30
1890: PPUSH
1891: LD_VAR 0 9
1895: PPUSH
1896: CALL 2764 0 3
1900: DIFF
1901: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Aviradze , LoadVariable ( 09c_Aviradze_ID , - 1 ) , vehicles ) ;
1902: LD_ADDR_VAR 0 9
1906: PUSH
1907: LD_VAR 0 9
1911: PUSH
1912: LD_EXP 23
1916: PPUSH
1917: LD_STRING 09c_Aviradze_ID
1919: PPUSH
1920: LD_INT 1
1922: NEG
1923: PPUSH
1924: CALL_OW 30
1928: PPUSH
1929: LD_VAR 0 9
1933: PPUSH
1934: CALL 2764 0 3
1938: DIFF
1939: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Schulz , LoadVariable ( 09c_Schulz_ID , 34 ) , vehicles ) ;
1940: LD_ADDR_VAR 0 9
1944: PUSH
1945: LD_VAR 0 9
1949: PUSH
1950: LD_EXP 24
1954: PPUSH
1955: LD_STRING 09c_Schulz_ID
1957: PPUSH
1958: LD_INT 34
1960: PPUSH
1961: CALL_OW 30
1965: PPUSH
1966: LD_VAR 0 9
1970: PPUSH
1971: CALL 2764 0 3
1975: DIFF
1976: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Lemmy , LoadVariable ( 09c_Lemmy_ID , 35 ) , vehicles ) ;
1977: LD_ADDR_VAR 0 9
1981: PUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_EXP 26
1991: PPUSH
1992: LD_STRING 09c_Lemmy_ID
1994: PPUSH
1995: LD_INT 35
1997: PPUSH
1998: CALL_OW 30
2002: PPUSH
2003: LD_VAR 0 9
2007: PPUSH
2008: CALL 2764 0 3
2012: DIFF
2013: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mia , LoadVariable ( 09c_Mia_ID , 36 ) , vehicles ) ;
2014: LD_ADDR_VAR 0 9
2018: PUSH
2019: LD_VAR 0 9
2023: PUSH
2024: LD_EXP 27
2028: PPUSH
2029: LD_STRING 09c_Mia_ID
2031: PPUSH
2032: LD_INT 36
2034: PPUSH
2035: CALL_OW 30
2039: PPUSH
2040: LD_VAR 0 9
2044: PPUSH
2045: CALL 2764 0 3
2049: DIFF
2050: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Nia , LoadVariable ( 09c_Nia_ID , 37 ) , vehicles ) ;
2051: LD_ADDR_VAR 0 9
2055: PUSH
2056: LD_VAR 0 9
2060: PUSH
2061: LD_EXP 28
2065: PPUSH
2066: LD_STRING 09c_Nia_ID
2068: PPUSH
2069: LD_INT 37
2071: PPUSH
2072: CALL_OW 30
2076: PPUSH
2077: LD_VAR 0 9
2081: PPUSH
2082: CALL 2764 0 3
2086: DIFF
2087: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Jenna , LoadVariable ( 09c_Jenna_ID , 38 ) , vehicles ) ;
2088: LD_ADDR_VAR 0 9
2092: PUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_EXP 29
2102: PPUSH
2103: LD_STRING 09c_Jenna_ID
2105: PPUSH
2106: LD_INT 38
2108: PPUSH
2109: CALL_OW 30
2113: PPUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: CALL 2764 0 3
2123: DIFF
2124: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Basim , LoadVariable ( 09c_Basim_ID , - 1 ) , vehicles ) ;
2125: LD_ADDR_VAR 0 9
2129: PUSH
2130: LD_VAR 0 9
2134: PUSH
2135: LD_EXP 25
2139: PPUSH
2140: LD_STRING 09c_Basim_ID
2142: PPUSH
2143: LD_INT 1
2145: NEG
2146: PPUSH
2147: CALL_OW 30
2151: PPUSH
2152: LD_VAR 0 9
2156: PPUSH
2157: CALL 2764 0 3
2161: DIFF
2162: ST_TO_ADDR
// for i := 1 to schulzSecondSquad do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_EXP 31
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2238
// vehicles := vehicles diff SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 38 + i ) , vehicles ) ;
2181: LD_ADDR_VAR 0 9
2185: PUSH
2186: LD_VAR 0 9
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_VAR 0 2
2200: ARRAY
2201: PPUSH
2202: LD_STRING 09c_random_ID_
2204: PUSH
2205: LD_VAR 0 2
2209: STR
2210: PPUSH
2211: LD_INT 38
2213: PUSH
2214: LD_VAR 0 2
2218: PLUS
2219: PPUSH
2220: CALL_OW 30
2224: PPUSH
2225: LD_VAR 0 9
2229: PPUSH
2230: CALL 2764 0 3
2234: DIFF
2235: ST_TO_ADDR
2236: GO 2178
2238: POP
2239: POP
// for i := 1 to heikeSecondSquad do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 30
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2310
// vehicles := vehicles diff SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_hrandom_ID_ & i , - 1 ) , vehicles ) ;
2258: LD_ADDR_VAR 0 9
2262: PUSH
2263: LD_VAR 0 9
2267: PUSH
2268: LD_EXP 30
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_STRING 09c_hrandom_ID_
2281: PUSH
2282: LD_VAR 0 2
2286: STR
2287: PPUSH
2288: LD_INT 1
2290: NEG
2291: PPUSH
2292: CALL_OW 30
2296: PPUSH
2297: LD_VAR 0 9
2301: PPUSH
2302: CALL 2764 0 3
2306: DIFF
2307: ST_TO_ADDR
2308: GO 2255
2310: POP
2311: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2312: LD_INT 22
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 34
2324: PUSH
2325: LD_INT 31
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: IFFALSE 2543
// begin for j := Count ( vehicles ) downto 1 do
2342: LD_ADDR_VAR 0 7
2346: PUSH
2347: DOUBLE
2348: LD_VAR 0 9
2352: PPUSH
2353: CALL 17611 0 1
2357: INC
2358: ST_TO_ADDR
2359: LD_INT 1
2361: PUSH
2362: FOR_DOWNTO
2363: IFFALSE 2541
// begin i := vehicles [ j ] ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 9
2374: PUSH
2375: LD_VAR 0 7
2379: ARRAY
2380: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2381: LD_VAR 0 2
2385: PUSH
2386: LD_INT 3
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: IFFALSE 2539
// begin uc_side := 2 ;
2395: LD_ADDR_OWVAR 20
2399: PUSH
2400: LD_INT 2
2402: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2403: LD_ADDR_OWVAR 21
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 5
2415: ARRAY
2416: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 2
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 6
2460: ARRAY
2461: PPUSH
2462: CALL 20349 0 5
// veh := CreateVehicle ;
2466: LD_ADDR_VAR 0 8
2470: PUSH
2471: CALL_OW 45
2475: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2488: LD_VAR 0 8
2492: PPUSH
2493: LD_INT 7
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2503: LD_ADDR_VAR 0 9
2507: PUSH
2508: LD_VAR 0 9
2512: PPUSH
2513: LD_VAR 0 7
2517: PPUSH
2518: CALL_OW 3
2522: ST_TO_ADDR
// Connect ( veh ) ;
2523: LD_VAR 0 8
2527: PPUSH
2528: CALL 23817 0 1
// wait ( 0 0$0.3 ) ;
2532: LD_INT 10
2534: PPUSH
2535: CALL_OW 67
// end ; end ;
2539: GO 2362
2541: POP
2542: POP
// end ; vehicles := LoadVariable ( 09_otherVehicles , [ ] ) ;
2543: LD_ADDR_VAR 0 9
2547: PUSH
2548: LD_STRING 09_otherVehicles
2550: PPUSH
2551: EMPTY
2552: PPUSH
2553: CALL_OW 30
2557: ST_TO_ADDR
// if vehicles then
2558: LD_VAR 0 9
2562: IFFALSE 2759
// begin for i in vehicles do
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_VAR 0 9
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2757
// begin uc_side := 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 5
2597: ARRAY
2598: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 2
2612: PUSH
2613: LD_INT 2
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 2
2621: PUSH
2622: LD_INT 3
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 4
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 6
2642: ARRAY
2643: PPUSH
2644: CALL 20349 0 5
// veh := CreateVehicle ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2658: LD_VAR 0 8
2662: PPUSH
2663: LD_INT 5
2665: PPUSH
2666: CALL_OW 233
// if i [ 7 ] then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 7
2677: ARRAY
2678: IFFALSE 2698
// SetMark ( veh , i [ 7 ] ) ;
2680: LD_VAR 0 8
2684: PPUSH
2685: LD_VAR 0 2
2689: PUSH
2690: LD_INT 7
2692: ARRAY
2693: PPUSH
2694: CALL_OW 242
// PlaceUnitXYD ( veh , i [ 8 ] , i [ 9 ] , i [ 10 ] , false ) ;
2698: LD_VAR 0 8
2702: PPUSH
2703: LD_VAR 0 2
2707: PUSH
2708: LD_INT 8
2710: ARRAY
2711: PPUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 9
2719: ARRAY
2720: PPUSH
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 10
2728: ARRAY
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: CALL 55360 0 5
// SetFuel ( veh , i [ 6 ] ) ;
2737: LD_VAR 0 8
2741: PPUSH
2742: LD_VAR 0 2
2746: PUSH
2747: LD_INT 6
2749: ARRAY
2750: PPUSH
2751: CALL_OW 240
// end ;
2755: GO 2574
2757: POP
2758: POP
// end ; end ;
2759: LD_VAR 0 1
2763: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
// for i in vehicles do
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3016
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 8
2789: ARRAY
2790: PUSH
2791: LD_VAR 0 2
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 5
2801: PUSH
2802: LD_INT 3
2804: ARRAY
2805: PUSH
2806: LD_INT 1
2808: EQUAL
2809: AND
2810: IFFALSE 3014
// begin result := i ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_VAR 0 5
2821: ST_TO_ADDR
// uc_side := 2 ;
2822: LD_ADDR_OWVAR 20
2826: PUSH
2827: LD_INT 2
2829: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2830: LD_ADDR_OWVAR 21
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 5
2842: ARRAY
2843: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 1
2851: ARRAY
2852: PPUSH
2853: LD_VAR 0 5
2857: PUSH
2858: LD_INT 2
2860: ARRAY
2861: PPUSH
2862: LD_VAR 0 5
2866: PUSH
2867: LD_INT 3
2869: ARRAY
2870: PPUSH
2871: LD_VAR 0 5
2875: PUSH
2876: LD_INT 4
2878: ARRAY
2879: PPUSH
2880: LD_VAR 0 5
2884: PUSH
2885: LD_INT 6
2887: ARRAY
2888: PPUSH
2889: CALL 20349 0 5
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2903: LD_VAR 0 6
2907: PPUSH
2908: LD_INT 5
2910: PPUSH
2911: CALL_OW 233
// if i [ 7 ] < 0 then
2915: LD_VAR 0 5
2919: PUSH
2920: LD_INT 7
2922: ARRAY
2923: PUSH
2924: LD_INT 0
2926: LESS
2927: IFFALSE 2947
// SetMark ( veh , i [ 7 ] ) ;
2929: LD_VAR 0 6
2933: PPUSH
2934: LD_VAR 0 5
2938: PUSH
2939: LD_INT 7
2941: ARRAY
2942: PPUSH
2943: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2947: LD_VAR 0 6
2951: PPUSH
2952: LD_INT 7
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL 52125 0 3
2962: NOT
2963: IFFALSE 2996
// begin SetDir ( unit , 5 ) ;
2965: LD_VAR 0 1
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2977: LD_VAR 0 1
2981: PPUSH
2982: LD_INT 8
2984: PPUSH
2985: LD_INT 0
2987: PPUSH
2988: CALL_OW 49
// exit ;
2992: POP
2993: POP
2994: GO 3045
// end ; PlaceHumanInUnit ( unit , veh ) ;
2996: LD_VAR 0 1
3000: PPUSH
3001: LD_VAR 0 6
3005: PPUSH
3006: CALL_OW 52
// exit ;
3010: POP
3011: POP
3012: GO 3045
// end ;
3014: GO 2779
3016: POP
3017: POP
// SetDir ( unit , 5 ) ;
3018: LD_VAR 0 1
3022: PPUSH
3023: LD_INT 5
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
3030: LD_VAR 0 1
3034: PPUSH
3035: LD_INT 8
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 49
// end ; end_of_file
3045: LD_VAR 0 4
3049: RET
// export function PrepareRussian ; begin
3050: LD_INT 0
3052: PPUSH
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
3053: LD_INT 48
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: LD_INT 2
3061: PPUSH
3062: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
3066: LD_INT 49
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 2
3074: PPUSH
3075: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
3079: LD_INT 50
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
3092: LD_INT 51
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3105: LD_INT 57
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 2
3113: PPUSH
3114: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
3118: LD_INT 48
3120: PPUSH
3121: LD_INT 6
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
3131: LD_INT 49
3133: PPUSH
3134: LD_INT 6
3136: PPUSH
3137: LD_INT 2
3139: PPUSH
3140: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
3144: LD_INT 50
3146: PPUSH
3147: LD_INT 6
3149: PPUSH
3150: LD_INT 2
3152: PPUSH
3153: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
3157: LD_INT 51
3159: PPUSH
3160: LD_INT 6
3162: PPUSH
3163: LD_INT 2
3165: PPUSH
3166: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
3170: LD_INT 57
3172: PPUSH
3173: LD_INT 6
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: CALL_OW 322
// if Difficulty >= 2 then
3183: LD_OWVAR 67
3187: PUSH
3188: LD_INT 2
3190: GREATEREQUAL
3191: IFFALSE 3271
// begin SetTech ( tech_Weap2 , 3 , state_researched ) ;
3193: LD_INT 52
3195: PPUSH
3196: LD_INT 3
3198: PPUSH
3199: LD_INT 2
3201: PPUSH
3202: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3206: LD_INT 58
3208: PPUSH
3209: LD_INT 3
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3219: LD_INT 63
3221: PPUSH
3222: LD_INT 3
3224: PPUSH
3225: LD_INT 2
3227: PPUSH
3228: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
3232: LD_INT 52
3234: PPUSH
3235: LD_INT 6
3237: PPUSH
3238: LD_INT 2
3240: PPUSH
3241: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
3245: LD_INT 58
3247: PPUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
3258: LD_INT 63
3260: PPUSH
3261: LD_INT 6
3263: PPUSH
3264: LD_INT 2
3266: PPUSH
3267: CALL_OW 322
// end ; if Difficulty > 2 then
3271: LD_OWVAR 67
3275: PUSH
3276: LD_INT 2
3278: GREATER
3279: IFFALSE 3359
// begin SetTech ( tech_Weap3 , 3 , state_researched ) ;
3281: LD_INT 53
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: LD_INT 2
3289: PPUSH
3290: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3294: LD_INT 59
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_INT 2
3302: PPUSH
3303: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3307: LD_INT 64
3309: PPUSH
3310: LD_INT 3
3312: PPUSH
3313: LD_INT 2
3315: PPUSH
3316: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
3320: LD_INT 53
3322: PPUSH
3323: LD_INT 6
3325: PPUSH
3326: LD_INT 2
3328: PPUSH
3329: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
3333: LD_INT 59
3335: PPUSH
3336: LD_INT 6
3338: PPUSH
3339: LD_INT 2
3341: PPUSH
3342: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
3346: LD_INT 64
3348: PPUSH
3349: LD_INT 6
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 322
// end ; end ;
3359: LD_VAR 0 1
3363: RET
// export ruForces , ruConstructList , ruTanks ; export function PrepareExtraRussianBase ; var i , j , tmp , un , side , skill , b ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
3370: PPUSH
3371: PPUSH
3372: PPUSH
3373: PPUSH
// side := 6 ;
3374: LD_ADDR_VAR 0 6
3378: PUSH
3379: LD_INT 6
3381: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
3382: LD_ADDR_VAR 0 7
3386: PUSH
3387: LD_INT 7
3389: PUSH
3390: LD_INT 8
3392: PUSH
3393: LD_INT 9
3395: PUSH
3396: LD_INT 10
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_OWVAR 67
3409: ARRAY
3410: ST_TO_ADDR
// ruForces := [ ] ;
3411: LD_ADDR_EXP 34
3415: PUSH
3416: EMPTY
3417: ST_TO_ADDR
// ruConstructList := [ ] ;
3418: LD_ADDR_EXP 35
3422: PUSH
3423: EMPTY
3424: ST_TO_ADDR
// ruTanks := [ ] ;
3425: LD_ADDR_EXP 36
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// tmp := [ [ b_warehouse , 107 , 149 , 4 ] , [ b_oil_mine , 115 , 150 , 4 ] , [ b_factory , 101 , 160 , 0 ] , [ b_ext_computer , 97 , 156 , 2 ] , [ b_ext_siberium , 98 , 160 , 1 ] , [ b_ext_noncombat , 101 , 164 , 0 ] , [ b_ext_gun , 104 , 163 , 5 ] , [ b_ext_rocket , 105 , 160 , 4 ] , [ b_siberite_mine , 128 , 132 , 0 ] , [ b_lab_full , 94 , 142 , 1 , b_lab_weapon , b_lab_spacetime ] , [ b_oil_power , 93 , 137 , 0 ] , [ b_oil_power , 111 , 157 , 0 ] , [ b_oil_power , 109 , 158 , 0 ] , [ b_oil_power , 121 , 150 , 0 ] , [ b_siberite_power , 118 , 151 , 0 ] , [ b_barracks , 97 , 133 , 2 ] , [ b_barracks , 117 , 143 , 4 ] , [ b_turret , 100 , 132 , 2 ] , [ b_turret , 130 , 159 , 4 ] , [ b_turret , 131 , 155 , 4 ] , [ b_turret , 90 , 133 , 2 ] , [ b_turret , 70 , 135 , 3 ] ] ;
3432: LD_ADDR_VAR 0 4
3436: PUSH
3437: LD_INT 1
3439: PUSH
3440: LD_INT 107
3442: PUSH
3443: LD_INT 149
3445: PUSH
3446: LD_INT 4
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 29
3457: PUSH
3458: LD_INT 115
3460: PUSH
3461: LD_INT 150
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 3
3475: PUSH
3476: LD_INT 101
3478: PUSH
3479: LD_INT 160
3481: PUSH
3482: LD_INT 0
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 24
3493: PUSH
3494: LD_INT 97
3496: PUSH
3497: LD_INT 156
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 21
3511: PUSH
3512: LD_INT 98
3514: PUSH
3515: LD_INT 160
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_INT 19
3529: PUSH
3530: LD_INT 101
3532: PUSH
3533: LD_INT 164
3535: PUSH
3536: LD_INT 0
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: PUSH
3545: LD_INT 17
3547: PUSH
3548: LD_INT 104
3550: PUSH
3551: LD_INT 163
3553: PUSH
3554: LD_INT 5
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 18
3565: PUSH
3566: LD_INT 105
3568: PUSH
3569: LD_INT 160
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 30
3583: PUSH
3584: LD_INT 128
3586: PUSH
3587: LD_INT 132
3589: PUSH
3590: LD_INT 0
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 8
3601: PUSH
3602: LD_INT 94
3604: PUSH
3605: LD_INT 142
3607: PUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 10
3613: PUSH
3614: LD_INT 14
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 26
3627: PUSH
3628: LD_INT 93
3630: PUSH
3631: LD_INT 137
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 26
3645: PUSH
3646: LD_INT 111
3648: PUSH
3649: LD_INT 157
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 26
3663: PUSH
3664: LD_INT 109
3666: PUSH
3667: LD_INT 158
3669: PUSH
3670: LD_INT 0
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PUSH
3679: LD_INT 26
3681: PUSH
3682: LD_INT 121
3684: PUSH
3685: LD_INT 150
3687: PUSH
3688: LD_INT 0
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 28
3699: PUSH
3700: LD_INT 118
3702: PUSH
3703: LD_INT 151
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 5
3717: PUSH
3718: LD_INT 97
3720: PUSH
3721: LD_INT 133
3723: PUSH
3724: LD_INT 2
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 5
3735: PUSH
3736: LD_INT 117
3738: PUSH
3739: LD_INT 143
3741: PUSH
3742: LD_INT 4
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 33
3753: PUSH
3754: LD_INT 100
3756: PUSH
3757: LD_INT 132
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 33
3771: PUSH
3772: LD_INT 130
3774: PUSH
3775: LD_INT 159
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 33
3789: PUSH
3790: LD_INT 131
3792: PUSH
3793: LD_INT 155
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 33
3807: PUSH
3808: LD_INT 90
3810: PUSH
3811: LD_INT 133
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 33
3825: PUSH
3826: LD_INT 70
3828: PUSH
3829: LD_INT 135
3831: PUSH
3832: LD_INT 3
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: ST_TO_ADDR
// uc_side := side ;
3865: LD_ADDR_OWVAR 20
3869: PUSH
3870: LD_VAR 0 6
3874: ST_TO_ADDR
// uc_nation := nation_russian ;
3875: LD_ADDR_OWVAR 21
3879: PUSH
3880: LD_INT 3
3882: ST_TO_ADDR
// for i in tmp do
3883: LD_ADDR_VAR 0 2
3887: PUSH
3888: LD_VAR 0 4
3892: PUSH
3893: FOR_IN
3894: IFFALSE 4032
// begin InitBc ;
3896: CALL_OW 21
// bc_type := i [ 1 ] ;
3900: LD_ADDR_OWVAR 42
3904: PUSH
3905: LD_VAR 0 2
3909: PUSH
3910: LD_INT 1
3912: ARRAY
3913: ST_TO_ADDR
// bc_level := 6 ;
3914: LD_ADDR_OWVAR 43
3918: PUSH
3919: LD_INT 6
3921: ST_TO_ADDR
// if i > 4 then
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 4
3929: GREATER
3930: IFFALSE 3960
// begin bc_kind1 := i [ 5 ] ;
3932: LD_ADDR_OWVAR 44
3936: PUSH
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 5
3944: ARRAY
3945: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
3946: LD_ADDR_OWVAR 45
3950: PUSH
3951: LD_VAR 0 2
3955: PUSH
3956: LD_INT 6
3958: ARRAY
3959: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3960: LD_ADDR_VAR 0 8
3964: PUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 2
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 3
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 4
3990: ARRAY
3991: PPUSH
3992: CALL_OW 47
3996: ST_TO_ADDR
// if i [ 1 ] in [ b_bunker , b_turret ] then
3997: LD_VAR 0 2
4001: PUSH
4002: LD_INT 1
4004: ARRAY
4005: PUSH
4006: LD_INT 32
4008: PUSH
4009: LD_INT 33
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: IN
4016: IFFALSE 4030
// PlaceWeaponTurret ( b , ru_rocket_launcher ) ;
4018: LD_VAR 0 8
4022: PPUSH
4023: LD_INT 45
4025: PPUSH
4026: CALL_OW 431
// end ;
4030: GO 3893
4032: POP
4033: POP
// InitHC_All ( ) ;
4034: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_VAR 0 6
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 30
4057: PUSH
4058: LD_INT 5
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PPUSH
4069: CALL_OW 69
4073: ST_TO_ADDR
// for i in tmp do
4074: LD_ADDR_VAR 0 2
4078: PUSH
4079: LD_VAR 0 4
4083: PUSH
4084: FOR_IN
4085: IFFALSE 4212
// begin for j := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: DOUBLE
4093: LD_INT 1
4095: DEC
4096: ST_TO_ADDR
4097: LD_INT 2
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: LD_INT 4
4105: PUSH
4106: LD_INT 4
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: PUSH
4115: LD_OWVAR 67
4119: ARRAY
4120: PUSH
4121: FOR_TO
4122: IFFALSE 4208
// begin PrepareSoldier ( false , skill ) ;
4124: LD_INT 0
4126: PPUSH
4127: LD_VAR 0 7
4131: PPUSH
4132: CALL_OW 381
// un := CreateHuman ;
4136: LD_ADDR_VAR 0 5
4140: PUSH
4141: CALL_OW 44
4145: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4146: LD_ADDR_EXP 34
4150: PUSH
4151: LD_EXP 34
4155: PPUSH
4156: LD_VAR 0 5
4160: PPUSH
4161: CALL 53220 0 2
4165: ST_TO_ADDR
// if j mod 2 = 0 then
4166: LD_VAR 0 3
4170: PUSH
4171: LD_INT 2
4173: MOD
4174: PUSH
4175: LD_INT 0
4177: EQUAL
4178: IFFALSE 4192
// SetClass ( un , class_bazooker ) ;
4180: LD_VAR 0 5
4184: PPUSH
4185: LD_INT 9
4187: PPUSH
4188: CALL_OW 336
// PlaceHumanInUnit ( un , i ) ;
4192: LD_VAR 0 5
4196: PPUSH
4197: LD_VAR 0 2
4201: PPUSH
4202: CALL_OW 52
// end ;
4206: GO 4121
4208: POP
4209: POP
// end ;
4210: GO 4084
4212: POP
4213: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
4214: LD_ADDR_VAR 0 4
4218: PUSH
4219: LD_INT 22
4221: PUSH
4222: LD_VAR 0 6
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 30
4233: PUSH
4234: LD_INT 1
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: ST_TO_ADDR
// for i in tmp do
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_VAR 0 4
4259: PUSH
4260: FOR_IN
4261: IFFALSE 4485
// begin for j := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
4263: LD_ADDR_VAR 0 3
4267: PUSH
4268: DOUBLE
4269: LD_INT 1
4271: DEC
4272: ST_TO_ADDR
4273: LD_INT 3
4275: PUSH
4276: LD_INT 3
4278: PUSH
4279: LD_INT 4
4281: PUSH
4282: LD_INT 4
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: PUSH
4297: FOR_TO
4298: IFFALSE 4358
// begin PrepareEngineer ( false , skill ) ;
4300: LD_INT 0
4302: PPUSH
4303: LD_VAR 0 7
4307: PPUSH
4308: CALL_OW 382
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 5
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4322: LD_ADDR_EXP 34
4326: PUSH
4327: LD_EXP 34
4331: PPUSH
4332: LD_VAR 0 5
4336: PPUSH
4337: CALL 53220 0 2
4341: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4342: LD_VAR 0 5
4346: PPUSH
4347: LD_VAR 0 2
4351: PPUSH
4352: CALL_OW 52
// end ;
4356: GO 4297
4358: POP
4359: POP
// SetResourceType ( GetBase ( i ) , mat_cans , [ 550 , 600 , 780 , 820 ] [ Difficulty ] ) ;
4360: LD_VAR 0 2
4364: PPUSH
4365: CALL_OW 274
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_INT 550
4375: PUSH
4376: LD_INT 600
4378: PUSH
4379: LD_INT 780
4381: PUSH
4382: LD_INT 820
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_OWVAR 67
4395: ARRAY
4396: PPUSH
4397: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , [ 160 , 160 , 210 , 240 ] [ Difficulty ] ) ;
4401: LD_VAR 0 2
4405: PPUSH
4406: CALL_OW 274
4410: PPUSH
4411: LD_INT 2
4413: PPUSH
4414: LD_INT 160
4416: PUSH
4417: LD_INT 160
4419: PUSH
4420: LD_INT 210
4422: PUSH
4423: LD_INT 240
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_OWVAR 67
4436: ARRAY
4437: PPUSH
4438: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , [ 60 , 60 , 70 , 80 ] [ Difficulty ] ) ;
4442: LD_VAR 0 2
4446: PPUSH
4447: CALL_OW 274
4451: PPUSH
4452: LD_INT 3
4454: PPUSH
4455: LD_INT 60
4457: PUSH
4458: LD_INT 60
4460: PUSH
4461: LD_INT 70
4463: PUSH
4464: LD_INT 80
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: PPUSH
4479: CALL_OW 277
// end ;
4483: GO 4260
4485: POP
4486: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
4487: LD_ADDR_VAR 0 4
4491: PUSH
4492: LD_INT 22
4494: PUSH
4495: LD_VAR 0 6
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 30
4506: PUSH
4507: LD_INT 3
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: ST_TO_ADDR
// for i in tmp do
4523: LD_ADDR_VAR 0 2
4527: PUSH
4528: LD_VAR 0 4
4532: PUSH
4533: FOR_IN
4534: IFFALSE 4629
// begin for j := 1 to 6 do
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: DOUBLE
4542: LD_INT 1
4544: DEC
4545: ST_TO_ADDR
4546: LD_INT 6
4548: PUSH
4549: FOR_TO
4550: IFFALSE 4625
// begin PrepareMechanic ( false , skill ) ;
4552: LD_INT 0
4554: PPUSH
4555: LD_VAR 0 7
4559: PPUSH
4560: CALL_OW 383
// hc_attr := [ 12 , 12 ] ;
4564: LD_ADDR_OWVAR 29
4568: PUSH
4569: LD_INT 12
4571: PUSH
4572: LD_INT 12
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: ST_TO_ADDR
// un := CreateHuman ;
4579: LD_ADDR_VAR 0 5
4583: PUSH
4584: CALL_OW 44
4588: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4589: LD_ADDR_EXP 34
4593: PUSH
4594: LD_EXP 34
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: CALL 53220 0 2
4608: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4609: LD_VAR 0 5
4613: PPUSH
4614: LD_VAR 0 2
4618: PPUSH
4619: CALL_OW 52
// end ;
4623: GO 4549
4625: POP
4626: POP
// end ;
4627: GO 4533
4629: POP
4630: POP
// InitHC_All ( ) ;
4631: CALL_OW 584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
4635: LD_ADDR_VAR 0 4
4639: PUSH
4640: LD_INT 22
4642: PUSH
4643: LD_VAR 0 6
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 8
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PPUSH
4666: CALL_OW 69
4670: ST_TO_ADDR
// for i in tmp do
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_VAR 0 4
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4762
// begin for j := 1 to 2 do
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: DOUBLE
4690: LD_INT 1
4692: DEC
4693: ST_TO_ADDR
4694: LD_INT 2
4696: PUSH
4697: FOR_TO
4698: IFFALSE 4758
// begin PrepareScientist ( false , skill ) ;
4700: LD_INT 0
4702: PPUSH
4703: LD_VAR 0 7
4707: PPUSH
4708: CALL_OW 384
// un := CreateHuman ;
4712: LD_ADDR_VAR 0 5
4716: PUSH
4717: CALL_OW 44
4721: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
4722: LD_ADDR_EXP 34
4726: PUSH
4727: LD_EXP 34
4731: PPUSH
4732: LD_VAR 0 5
4736: PPUSH
4737: CALL 53220 0 2
4741: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4742: LD_VAR 0 5
4746: PPUSH
4747: LD_VAR 0 2
4751: PPUSH
4752: CALL_OW 52
// end ;
4756: GO 4697
4758: POP
4759: POP
// end ;
4760: GO 4681
4762: POP
4763: POP
// end ;
4764: LD_VAR 0 1
4768: RET
// function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
4769: LD_INT 0
4771: PPUSH
4772: PPUSH
4773: PPUSH
4774: PPUSH
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// result := [ ] ;
4781: LD_ADDR_VAR 0 3
4785: PUSH
4786: EMPTY
4787: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
4788: LD_ADDR_VAR 0 8
4792: PUSH
4793: LD_INT 7
4795: PUSH
4796: LD_INT 8
4798: PUSH
4799: LD_INT 9
4801: PUSH
4802: LD_INT 10
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_OWVAR 67
4815: ARRAY
4816: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
4817: LD_ADDR_VAR 0 9
4821: PUSH
4822: LD_INT 15
4824: PUSH
4825: LD_INT 17
4827: PUSH
4828: LD_INT 19
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_VAR 0 1
4840: ARRAY
4841: ST_TO_ADDR
// parking := [ ruGatPoint1Area , ruGatPoint2Area , ruGatPoint3Area ] [ spot ] ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_INT 16
4849: PUSH
4850: LD_INT 18
4852: PUSH
4853: LD_INT 20
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: LD_VAR 0 1
4865: ARRAY
4866: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
4867: LD_ADDR_VAR 0 11
4871: PUSH
4872: LD_INT 5
4874: PUSH
4875: LD_INT 0
4877: PUSH
4878: LD_INT 2
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: ARRAY
4891: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) then
4892: LD_VAR 0 9
4896: PPUSH
4897: LD_INT 2
4899: PUSH
4900: LD_INT 22
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 22
4912: PUSH
4913: LD_INT 3
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: IFFALSE 4990
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) do
4931: LD_ADDR_VAR 0 4
4935: PUSH
4936: LD_VAR 0 9
4940: PPUSH
4941: LD_INT 2
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: PPUSH
4969: CALL_OW 70
4973: PUSH
4974: FOR_IN
4975: IFFALSE 4988
// RemoveUnit ( i ) ;
4977: LD_VAR 0 4
4981: PPUSH
4982: CALL_OW 64
4986: GO 4974
4988: POP
4989: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
4990: LD_VAR 0 9
4994: PPUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 21
5000: PUSH
5001: LD_INT 1
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 70
5030: IFFALSE 5094
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: LD_VAR 0 9
5041: PPUSH
5042: LD_INT 3
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: LD_INT 22
5061: PUSH
5062: LD_INT 2
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: PUSH
5078: FOR_IN
5079: IFFALSE 5092
// KillUnit ( i ) ;
5081: LD_VAR 0 4
5085: PPUSH
5086: CALL_OW 66
5090: GO 5078
5092: POP
5093: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
5094: LD_VAR 0 9
5098: PPUSH
5099: LD_INT 21
5101: PUSH
5102: LD_INT 1
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5190
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
5129: LD_ADDR_VAR 0 4
5133: PUSH
5134: LD_VAR 0 9
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 22
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5188
// ComMoveXY ( i , 91 , 56 ) ;
5171: LD_VAR 0 4
5175: PPUSH
5176: LD_INT 91
5178: PPUSH
5179: LD_INT 56
5181: PPUSH
5182: CALL_OW 111
5186: GO 5168
5188: POP
5189: POP
// repeat wait ( 0 0$1 ) ;
5190: LD_INT 35
5192: PPUSH
5193: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5197: LD_VAR 0 9
5201: PPUSH
5202: LD_INT 50
5204: PUSH
5205: EMPTY
5206: LIST
5207: PPUSH
5208: CALL_OW 70
5212: NOT
5213: IFFALSE 5190
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] + strength do
5215: LD_ADDR_VAR 0 4
5219: PUSH
5220: DOUBLE
5221: LD_INT 1
5223: DEC
5224: ST_TO_ADDR
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 5
5233: PUSH
5234: LD_INT 6
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: PUSH
5243: LD_OWVAR 67
5247: ARRAY
5248: PUSH
5249: LD_VAR 0 2
5253: PLUS
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5577
// begin uc_side := 3 ;
5258: LD_ADDR_OWVAR 20
5262: PUSH
5263: LD_INT 3
5265: ST_TO_ADDR
// uc_nation := nation_russian ;
5266: LD_ADDR_OWVAR 21
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
5274: LD_ADDR_VAR 0 12
5278: PUSH
5279: LD_INT 1
5281: PUSH
5282: LD_INT 3
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 12
5307: ARRAY
5308: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
5309: LD_INT 22
5311: PUSH
5312: LD_INT 24
5314: PUSH
5315: LD_INT 23
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_VAR 0 4
5327: PUSH
5328: LD_INT 3
5330: MOD
5331: PUSH
5332: LD_INT 1
5334: PLUS
5335: ARRAY
5336: PPUSH
5337: LD_INT 3
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: LD_INT 1
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: CALL_OW 12
5357: ARRAY
5358: PPUSH
5359: LD_VAR 0 12
5363: PPUSH
5364: LD_INT 45
5366: PUSH
5367: LD_INT 46
5369: PUSH
5370: LD_INT 43
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: LD_VAR 0 4
5382: PUSH
5383: LD_INT 3
5385: MOD
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: ARRAY
5391: PPUSH
5392: LD_INT 100
5394: PPUSH
5395: CALL 20349 0 5
// veh := CreateVehicle ;
5399: LD_ADDR_VAR 0 7
5403: PUSH
5404: CALL_OW 45
5408: ST_TO_ADDR
// SetDir ( veh , dir ) ;
5409: LD_VAR 0 7
5413: PPUSH
5414: LD_VAR 0 11
5418: PPUSH
5419: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
5423: LD_VAR 0 7
5427: PPUSH
5428: LD_VAR 0 9
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: CALL_OW 49
// if control = control_manual then
5440: LD_VAR 0 12
5444: PUSH
5445: LD_INT 1
5447: EQUAL
5448: IFFALSE 5516
// begin uc_side := 3 ;
5450: LD_ADDR_OWVAR 20
5454: PUSH
5455: LD_INT 3
5457: ST_TO_ADDR
// uc_nation := nation_russian ;
5458: LD_ADDR_OWVAR 21
5462: PUSH
5463: LD_INT 3
5465: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5466: LD_INT 0
5468: PPUSH
5469: LD_VAR 0 8
5473: PPUSH
5474: CALL_OW 383
// un := CreateHuman ;
5478: LD_ADDR_VAR 0 6
5482: PUSH
5483: CALL_OW 44
5487: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5488: LD_VAR 0 6
5492: PPUSH
5493: LD_VAR 0 7
5497: PPUSH
5498: CALL_OW 52
// SetTag ( un , spot ) ;
5502: LD_VAR 0 6
5506: PPUSH
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 109
// end ; repeat ComMoveToArea ( veh , parking ) ;
5516: LD_VAR 0 7
5520: PPUSH
5521: LD_VAR 0 10
5525: PPUSH
5526: CALL_OW 113
// wait ( 0 0$3 ) ;
5530: LD_INT 105
5532: PPUSH
5533: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
5537: LD_VAR 0 9
5541: PPUSH
5542: LD_INT 50
5544: PUSH
5545: EMPTY
5546: LIST
5547: PPUSH
5548: CALL_OW 70
5552: NOT
5553: IFFALSE 5516
// result := Join ( result , veh ) ;
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_VAR 0 3
5564: PPUSH
5565: LD_VAR 0 7
5569: PPUSH
5570: CALL 53220 0 2
5574: ST_TO_ADDR
// end ;
5575: GO 5255
5577: POP
5578: POP
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
5579: LD_ADDR_VAR 0 4
5583: PUSH
5584: DOUBLE
5585: LD_INT 1
5587: DEC
5588: ST_TO_ADDR
5589: LD_INT 2
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: LD_INT 3
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: PUSH
5607: LD_OWVAR 67
5611: ARRAY
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5784
// begin uc_side := 3 ;
5616: LD_ADDR_OWVAR 20
5620: PUSH
5621: LD_INT 3
5623: ST_TO_ADDR
// uc_nation := nation_russian ;
5624: LD_ADDR_OWVAR 21
5628: PUSH
5629: LD_INT 3
5631: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5632: LD_INT 0
5634: PPUSH
5635: LD_VAR 0 8
5639: PPUSH
5640: CALL_OW 381
// un := CreateHuman ;
5644: LD_ADDR_VAR 0 6
5648: PUSH
5649: CALL_OW 44
5653: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5654: LD_INT 30
5656: PUSH
5657: LD_INT 40
5659: PUSH
5660: LD_INT 50
5662: PUSH
5663: LD_INT 50
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_OWVAR 67
5676: ARRAY
5677: PPUSH
5678: CALL_OW 13
5682: IFFALSE 5696
// SetClass ( un , class_bazooker ) ;
5684: LD_VAR 0 6
5688: PPUSH
5689: LD_INT 9
5691: PPUSH
5692: CALL_OW 336
// SetDir ( un , dir ) ;
5696: LD_VAR 0 6
5700: PPUSH
5701: LD_VAR 0 11
5705: PPUSH
5706: CALL_OW 233
// SetTag ( un , spot ) ;
5710: LD_VAR 0 6
5714: PPUSH
5715: LD_VAR 0 1
5719: PPUSH
5720: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
5724: LD_VAR 0 6
5728: PPUSH
5729: LD_VAR 0 9
5733: PPUSH
5734: LD_INT 0
5736: PPUSH
5737: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
5741: LD_VAR 0 6
5745: PPUSH
5746: LD_VAR 0 10
5750: PPUSH
5751: CALL_OW 113
// wait ( 0 0$1 ) ;
5755: LD_INT 35
5757: PPUSH
5758: CALL_OW 67
// result := Join ( result , un ) ;
5762: LD_ADDR_VAR 0 3
5766: PUSH
5767: LD_VAR 0 3
5771: PPUSH
5772: LD_VAR 0 6
5776: PPUSH
5777: CALL 53220 0 2
5781: ST_TO_ADDR
// end ;
5782: GO 5613
5784: POP
5785: POP
// end ;
5786: LD_VAR 0 3
5790: RET
// function PrepareRussianExtraInfantry ; var i , un ; begin
5791: LD_INT 0
5793: PPUSH
5794: PPUSH
5795: PPUSH
// result := [ ] ;
5796: LD_ADDR_VAR 0 1
5800: PUSH
5801: EMPTY
5802: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty + 1 ] do
5803: LD_ADDR_VAR 0 2
5807: PUSH
5808: DOUBLE
5809: LD_INT 1
5811: DEC
5812: ST_TO_ADDR
5813: LD_INT 3
5815: PUSH
5816: LD_INT 3
5818: PUSH
5819: LD_INT 4
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: PUSH
5827: LD_OWVAR 67
5831: PUSH
5832: LD_INT 1
5834: PLUS
5835: ARRAY
5836: PUSH
5837: FOR_TO
5838: IFFALSE 5976
// begin uc_side := 3 ;
5840: LD_ADDR_OWVAR 20
5844: PUSH
5845: LD_INT 3
5847: ST_TO_ADDR
// uc_nation := nation_russian ;
5848: LD_ADDR_OWVAR 21
5852: PUSH
5853: LD_INT 3
5855: ST_TO_ADDR
// PrepareSoldier ( false , [ 7 , 8 , 9 ] [ Difficulty + 1 ] ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_INT 7
5861: PUSH
5862: LD_INT 8
5864: PUSH
5865: LD_INT 9
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: PUSH
5873: LD_OWVAR 67
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ARRAY
5882: PPUSH
5883: CALL_OW 381
// un := CreateHuman ;
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: CALL_OW 44
5896: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
5897: LD_INT 30
5899: PUSH
5900: LD_INT 40
5902: PUSH
5903: LD_INT 50
5905: PUSH
5906: LD_INT 50
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: PUSH
5915: LD_OWVAR 67
5919: ARRAY
5920: PPUSH
5921: CALL_OW 13
5925: IFFALSE 5939
// SetClass ( un , class_bazooker ) ;
5927: LD_VAR 0 3
5931: PPUSH
5932: LD_INT 9
5934: PPUSH
5935: CALL_OW 336
// PlaceUnitArea ( un , extraSpawnAttackArea , false ) ;
5939: LD_VAR 0 3
5943: PPUSH
5944: LD_INT 25
5946: PPUSH
5947: LD_INT 0
5949: PPUSH
5950: CALL_OW 49
// result := Join ( result , un ) ;
5954: LD_ADDR_VAR 0 1
5958: PUSH
5959: LD_VAR 0 1
5963: PPUSH
5964: LD_VAR 0 3
5968: PPUSH
5969: CALL 53220 0 2
5973: ST_TO_ADDR
// end ;
5974: GO 5837
5976: POP
5977: POP
// end ;
5978: LD_VAR 0 1
5982: RET
// function SendBulldozer ; var un ; begin
5983: LD_INT 0
5985: PPUSH
5986: PPUSH
// uc_side := 3 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 3
5994: ST_TO_ADDR
// uc_nation := nation_russian ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 3
6002: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
6003: LD_INT 23
6005: PPUSH
6006: LD_INT 3
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: LD_INT 53
6014: PPUSH
6015: LD_INT 100
6017: PPUSH
6018: CALL 20349 0 5
// un := CreateVehicle ;
6022: LD_ADDR_VAR 0 2
6026: PUSH
6027: CALL_OW 45
6031: ST_TO_ADDR
// PlaceUnitXYD ( un , 7 , 8 , 1 , false ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_INT 7
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_INT 1
6045: PPUSH
6046: LD_INT 0
6048: PPUSH
6049: CALL 55360 0 5
// wait ( 0 0$1 ) ;
6053: LD_INT 35
6055: PPUSH
6056: CALL_OW 67
// CutTreeInArea ( un , cutTreeWArea ) ;
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_INT 24
6067: PPUSH
6068: CALL 11529 0 2
// end ;
6072: LD_VAR 0 1
6076: RET
// every 0 0$3 trigger wave >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
6077: LD_EXP 11
6081: PUSH
6082: LD_INT 4
6084: PUSH
6085: LD_INT 5
6087: PUSH
6088: LD_INT 6
6090: PUSH
6091: LD_INT 7
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: LD_OWVAR 67
6104: ARRAY
6105: GREATEREQUAL
6106: IFFALSE 6160
6108: GO 6110
6110: DISABLE
// begin repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 ;
6118: LD_INT 22
6120: PUSH
6121: LD_INT 6
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 21
6130: PUSH
6131: LD_INT 1
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PPUSH
6142: CALL_OW 69
6146: PUSH
6147: LD_INT 0
6149: EQUAL
6150: IFFALSE 6111
// ruDefeated := true ;
6152: LD_ADDR_EXP 10
6156: PUSH
6157: LD_INT 1
6159: ST_TO_ADDR
// end ;
6160: END
// every 6 6$20 + 4 4$00 trigger wave < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do var i , e , attackers , extraAttackers , spot , extraSpot , paths , enemy ;
6161: LD_EXP 11
6165: PUSH
6166: LD_INT 4
6168: PUSH
6169: LD_INT 5
6171: PUSH
6172: LD_INT 6
6174: PUSH
6175: LD_INT 7
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_OWVAR 67
6188: ARRAY
6189: LESS
6190: IFFALSE 7293
6192: GO 6194
6194: DISABLE
6195: LD_INT 0
6197: PPUSH
6198: PPUSH
6199: PPUSH
6200: PPUSH
6201: PPUSH
6202: PPUSH
6203: PPUSH
6204: PPUSH
// begin enable ;
6205: ENABLE
// attackers := [ ] ;
6206: LD_ADDR_VAR 0 3
6210: PUSH
6211: EMPTY
6212: ST_TO_ADDR
// extraAttackers := [ ] ;
6213: LD_ADDR_VAR 0 4
6217: PUSH
6218: EMPTY
6219: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 87 , 141 ] , [ 80 , 120 ] , [ 66 , 95 ] , [ 51 , 69 ] , [ 36 , 40 ] , [ 47 , 31 ] , [ 60 , 28 ] ] , [ [ 21 , 17 ] , [ 35 , 30 ] , [ 49 , 31 ] ] ] ;
6220: LD_ADDR_VAR 0 7
6224: PUSH
6225: LD_INT 176
6227: PUSH
6228: LD_INT 152
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 157
6237: PUSH
6238: LD_INT 122
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 146
6247: PUSH
6248: LD_INT 89
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 125
6257: PUSH
6258: LD_INT 46
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 87
6273: PUSH
6274: LD_INT 141
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 80
6283: PUSH
6284: LD_INT 120
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 66
6293: PUSH
6294: LD_INT 95
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 51
6303: PUSH
6304: LD_INT 69
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 36
6313: PUSH
6314: LD_INT 40
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 47
6323: PUSH
6324: LD_INT 31
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 60
6333: PUSH
6334: LD_INT 28
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 21
6352: PUSH
6353: LD_INT 17
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 35
6362: PUSH
6363: LD_INT 30
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 49
6372: PUSH
6373: LD_INT 31
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: ST_TO_ADDR
// wave := Inc ( wave ) ;
6390: LD_ADDR_EXP 11
6394: PUSH
6395: LD_EXP 11
6399: PPUSH
6400: CALL 54581 0 1
6404: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
6405: LD_ADDR_VAR 0 5
6409: PUSH
6410: LD_INT 1
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: CALL_OW 12
6420: ST_TO_ADDR
// if wave mod 2 = 0 then
6421: LD_EXP 11
6425: PUSH
6426: LD_INT 2
6428: MOD
6429: PUSH
6430: LD_INT 0
6432: EQUAL
6433: IFFALSE 6450
// strength := Inc ( strength ) ;
6435: LD_ADDR_EXP 12
6439: PUSH
6440: LD_EXP 12
6444: PPUSH
6445: CALL 54581 0 1
6449: ST_TO_ADDR
// if Count ( ListEnvironmentArea ( cutTreeWArea ) ) then
6450: LD_INT 24
6452: PPUSH
6453: CALL_OW 353
6457: PPUSH
6458: CALL 17611 0 1
6462: IFFALSE 6468
// SendBulldozer ;
6464: CALL 5983 0 0
// attackers := PrepareRussianAttack ( spot , strength ) ;
6468: LD_ADDR_VAR 0 3
6472: PUSH
6473: LD_VAR 0 5
6477: PPUSH
6478: LD_EXP 12
6482: PPUSH
6483: CALL 4769 0 2
6487: ST_TO_ADDR
// if wave + [ 2 , 2 , 3 , 3 ] [ Difficulty ] >= [ 6 , 7 , 8 , 9 ] [ Difficulty ] then
6488: LD_EXP 11
6492: PUSH
6493: LD_INT 2
6495: PUSH
6496: LD_INT 2
6498: PUSH
6499: LD_INT 3
6501: PUSH
6502: LD_INT 3
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: PUSH
6511: LD_OWVAR 67
6515: ARRAY
6516: PLUS
6517: PUSH
6518: LD_INT 6
6520: PUSH
6521: LD_INT 7
6523: PUSH
6524: LD_INT 8
6526: PUSH
6527: LD_INT 9
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: PUSH
6536: LD_OWVAR 67
6540: ARRAY
6541: GREATEREQUAL
6542: IFFALSE 6610
// begin extraSpot := spot - 1 ;
6544: LD_ADDR_VAR 0 6
6548: PUSH
6549: LD_VAR 0 5
6553: PUSH
6554: LD_INT 1
6556: MINUS
6557: ST_TO_ADDR
// if extraSpot < 1 then
6558: LD_VAR 0 6
6562: PUSH
6563: LD_INT 1
6565: LESS
6566: IFFALSE 6576
// extraSpot := 3 ;
6568: LD_ADDR_VAR 0 6
6572: PUSH
6573: LD_INT 3
6575: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , strength ) ;
6576: LD_ADDR_VAR 0 4
6580: PUSH
6581: LD_VAR 0 6
6585: PPUSH
6586: LD_EXP 12
6590: PPUSH
6591: CALL 4769 0 2
6595: ST_TO_ADDR
// if Difficulty > 1 then
6596: LD_OWVAR 67
6600: PUSH
6601: LD_INT 1
6603: GREATER
6604: IFFALSE 6610
// PrepareRussianExtraInfantry ;
6606: CALL 5791 0 0
// end ; repeat wait ( 0 0$2 ) ;
6610: LD_INT 70
6612: PPUSH
6613: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
6617: LD_ADDR_VAR 0 8
6621: PUSH
6622: LD_INT 22
6624: PUSH
6625: LD_INT 2
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PPUSH
6632: CALL_OW 69
6636: ST_TO_ADDR
// for i in attackers do
6637: LD_ADDR_VAR 0 1
6641: PUSH
6642: LD_VAR 0 3
6646: PUSH
6647: FOR_IN
6648: IFFALSE 6953
// begin if not IsOk ( i ) then
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 302
6659: NOT
6660: IFFALSE 6680
// begin attackers := attackers diff i ;
6662: LD_ADDR_VAR 0 3
6666: PUSH
6667: LD_VAR 0 3
6671: PUSH
6672: LD_VAR 0 1
6676: DIFF
6677: ST_TO_ADDR
// continue ;
6678: GO 6647
// end ; if GetType ( i ) = unit_vehicle then
6680: LD_VAR 0 1
6684: PPUSH
6685: CALL_OW 247
6689: PUSH
6690: LD_INT 2
6692: EQUAL
6693: IFFALSE 6717
// AgressiveMove ( i , paths [ spot ] ) else
6695: LD_VAR 0 1
6699: PPUSH
6700: LD_VAR 0 7
6704: PUSH
6705: LD_VAR 0 5
6709: ARRAY
6710: PPUSH
6711: CALL 55824 0 2
6715: GO 6951
// begin if GetClass ( i ) = class_bazooker then
6717: LD_VAR 0 1
6721: PPUSH
6722: CALL_OW 257
6726: PUSH
6727: LD_INT 9
6729: EQUAL
6730: IFFALSE 6927
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
6732: LD_VAR 0 1
6736: PPUSH
6737: LD_VAR 0 8
6741: PPUSH
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 74
6751: PPUSH
6752: CALL_OW 296
6756: PUSH
6757: LD_INT 12
6759: GREATER
6760: IFFALSE 6788
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
6762: LD_VAR 0 1
6766: PPUSH
6767: LD_VAR 0 8
6771: PPUSH
6772: LD_VAR 0 1
6776: PPUSH
6777: CALL_OW 74
6781: PPUSH
6782: CALL 57442 0 2
6786: GO 6925
// begin e := NearestUnitToUnit ( enemy , i ) ;
6788: LD_ADDR_VAR 0 2
6792: PUSH
6793: LD_VAR 0 8
6797: PPUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 74
6807: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
6808: LD_INT 1
6810: PPUSH
6811: LD_INT 3
6813: PPUSH
6814: CALL_OW 12
6818: PUSH
6819: LD_INT 1
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 6844
6827: POP
// ComAttackUnit ( i , e ) ; 2 :
6828: LD_VAR 0 1
6832: PPUSH
6833: LD_VAR 0 2
6837: PPUSH
6838: CALL_OW 115
6842: GO 6925
6844: LD_INT 2
6846: DOUBLE
6847: EQUAL
6848: IFTRUE 6852
6850: GO 6884
6852: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
6853: LD_VAR 0 1
6857: PPUSH
6858: LD_VAR 0 2
6862: PPUSH
6863: CALL_OW 250
6867: PPUSH
6868: LD_VAR 0 2
6872: PPUSH
6873: CALL_OW 251
6877: PPUSH
6878: CALL_OW 153
6882: GO 6925
6884: LD_INT 3
6886: DOUBLE
6887: EQUAL
6888: IFTRUE 6892
6890: GO 6924
6892: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
6893: LD_VAR 0 1
6897: PPUSH
6898: LD_VAR 0 2
6902: PPUSH
6903: CALL_OW 250
6907: PPUSH
6908: LD_VAR 0 2
6912: PPUSH
6913: CALL_OW 251
6917: PPUSH
6918: CALL_OW 154
6922: GO 6925
6924: POP
// end ; end else
6925: GO 6951
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6927: LD_VAR 0 1
6931: PPUSH
6932: LD_VAR 0 8
6936: PPUSH
6937: LD_VAR 0 1
6941: PPUSH
6942: CALL_OW 74
6946: PPUSH
6947: CALL 57442 0 2
// end ; end ;
6951: GO 6647
6953: POP
6954: POP
// if extraAttackers then
6955: LD_VAR 0 4
6959: IFFALSE 7279
// begin for i in extraAttackers do
6961: LD_ADDR_VAR 0 1
6965: PUSH
6966: LD_VAR 0 4
6970: PUSH
6971: FOR_IN
6972: IFFALSE 7277
// begin if not IsOk ( i ) then
6974: LD_VAR 0 1
6978: PPUSH
6979: CALL_OW 302
6983: NOT
6984: IFFALSE 7004
// begin extraAttackers := extraAttackers diff i ;
6986: LD_ADDR_VAR 0 4
6990: PUSH
6991: LD_VAR 0 4
6995: PUSH
6996: LD_VAR 0 1
7000: DIFF
7001: ST_TO_ADDR
// continue ;
7002: GO 6971
// end ; if GetType ( i ) = unit_vehicle then
7004: LD_VAR 0 1
7008: PPUSH
7009: CALL_OW 247
7013: PUSH
7014: LD_INT 2
7016: EQUAL
7017: IFFALSE 7041
// AgressiveMove ( i , paths [ extraSpot ] ) else
7019: LD_VAR 0 1
7023: PPUSH
7024: LD_VAR 0 7
7028: PUSH
7029: LD_VAR 0 6
7033: ARRAY
7034: PPUSH
7035: CALL 55824 0 2
7039: GO 7275
// begin if GetClass ( i ) = class_bazooker then
7041: LD_VAR 0 1
7045: PPUSH
7046: CALL_OW 257
7050: PUSH
7051: LD_INT 9
7053: EQUAL
7054: IFFALSE 7251
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
7056: LD_VAR 0 1
7060: PPUSH
7061: LD_VAR 0 8
7065: PPUSH
7066: LD_VAR 0 1
7070: PPUSH
7071: CALL_OW 74
7075: PPUSH
7076: CALL_OW 296
7080: PUSH
7081: LD_INT 12
7083: GREATER
7084: IFFALSE 7112
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
7086: LD_VAR 0 1
7090: PPUSH
7091: LD_VAR 0 8
7095: PPUSH
7096: LD_VAR 0 1
7100: PPUSH
7101: CALL_OW 74
7105: PPUSH
7106: CALL 57442 0 2
7110: GO 7249
// begin e := NearestUnitToUnit ( enemy , i ) ;
7112: LD_ADDR_VAR 0 2
7116: PUSH
7117: LD_VAR 0 8
7121: PPUSH
7122: LD_VAR 0 1
7126: PPUSH
7127: CALL_OW 74
7131: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
7132: LD_INT 1
7134: PPUSH
7135: LD_INT 3
7137: PPUSH
7138: CALL_OW 12
7142: PUSH
7143: LD_INT 1
7145: DOUBLE
7146: EQUAL
7147: IFTRUE 7151
7149: GO 7168
7151: POP
// ComAttackUnit ( i , e ) ; 2 :
7152: LD_VAR 0 1
7156: PPUSH
7157: LD_VAR 0 2
7161: PPUSH
7162: CALL_OW 115
7166: GO 7249
7168: LD_INT 2
7170: DOUBLE
7171: EQUAL
7172: IFTRUE 7176
7174: GO 7208
7176: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
7177: LD_VAR 0 1
7181: PPUSH
7182: LD_VAR 0 2
7186: PPUSH
7187: CALL_OW 250
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 251
7201: PPUSH
7202: CALL_OW 153
7206: GO 7249
7208: LD_INT 3
7210: DOUBLE
7211: EQUAL
7212: IFTRUE 7216
7214: GO 7248
7216: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
7217: LD_VAR 0 1
7221: PPUSH
7222: LD_VAR 0 2
7226: PPUSH
7227: CALL_OW 250
7231: PPUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: CALL_OW 251
7241: PPUSH
7242: CALL_OW 154
7246: GO 7249
7248: POP
// end ; end else
7249: GO 7275
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: LD_VAR 0 8
7260: PPUSH
7261: LD_VAR 0 1
7265: PPUSH
7266: CALL_OW 74
7270: PPUSH
7271: CALL 57442 0 2
// end ; end ;
7275: GO 6971
7277: POP
7278: POP
// end ; until not attackers and not extraAttackers ;
7279: LD_VAR 0 3
7283: NOT
7284: PUSH
7285: LD_VAR 0 4
7289: NOT
7290: AND
7291: IFFALSE 6610
// end ;
7293: PPOPN 8
7295: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] ] ) do var i , tmp , lab , eng , tag , un , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , ruBase , fac ;
7296: LD_INT 22
7298: PUSH
7299: LD_INT 6
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: LD_INT 50
7308: PUSH
7309: EMPTY
7310: LIST
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PPUSH
7316: CALL_OW 69
7320: IFFALSE 9009
7322: GO 7324
7324: DISABLE
7325: LD_INT 0
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
// begin enable ;
7342: ENABLE
// ruBase := FilterUnitsInARea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_warehouse ] , [ f_ok ] ] ) ;
7343: LD_ADDR_VAR 0 14
7347: PUSH
7348: LD_INT 26
7350: PPUSH
7351: LD_INT 22
7353: PUSH
7354: LD_INT 6
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 30
7363: PUSH
7364: LD_INT 1
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 50
7373: PUSH
7374: EMPTY
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: PPUSH
7382: CALL_OW 70
7386: ST_TO_ADDR
// if ruBase then
7387: LD_VAR 0 14
7391: IFFALSE 7407
// ruBase := ruBase [ 1 ] ;
7393: LD_ADDR_VAR 0 14
7397: PUSH
7398: LD_VAR 0 14
7402: PUSH
7403: LD_INT 1
7405: ARRAY
7406: ST_TO_ADDR
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7407: LD_ADDR_VAR 0 15
7411: PUSH
7412: LD_INT 26
7414: PPUSH
7415: LD_INT 22
7417: PUSH
7418: LD_INT 6
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 30
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 50
7437: PUSH
7438: EMPTY
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PPUSH
7446: CALL_OW 70
7450: ST_TO_ADDR
// if ruConstructList and fac then
7451: LD_EXP 35
7455: PUSH
7456: LD_VAR 0 15
7460: AND
7461: IFFALSE 7614
// if BuildingStatus ( fac [ 1 ] ) = bs_idle and CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
7463: LD_VAR 0 15
7467: PUSH
7468: LD_INT 1
7470: ARRAY
7471: PPUSH
7472: CALL_OW 461
7476: PUSH
7477: LD_INT 2
7479: EQUAL
7480: PUSH
7481: LD_VAR 0 15
7485: PUSH
7486: LD_INT 1
7488: ARRAY
7489: PPUSH
7490: LD_EXP 35
7494: PUSH
7495: LD_INT 1
7497: ARRAY
7498: PUSH
7499: LD_INT 1
7501: ARRAY
7502: PPUSH
7503: LD_EXP 35
7507: PUSH
7508: LD_INT 1
7510: ARRAY
7511: PUSH
7512: LD_INT 2
7514: ARRAY
7515: PPUSH
7516: LD_EXP 35
7520: PUSH
7521: LD_INT 1
7523: ARRAY
7524: PUSH
7525: LD_INT 3
7527: ARRAY
7528: PPUSH
7529: LD_EXP 35
7533: PUSH
7534: LD_INT 1
7536: ARRAY
7537: PUSH
7538: LD_INT 4
7540: ARRAY
7541: PPUSH
7542: CALL_OW 448
7546: AND
7547: IFFALSE 7614
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
7549: LD_VAR 0 15
7553: PUSH
7554: LD_INT 1
7556: ARRAY
7557: PPUSH
7558: LD_EXP 35
7562: PUSH
7563: LD_INT 1
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: LD_EXP 35
7575: PUSH
7576: LD_INT 1
7578: ARRAY
7579: PUSH
7580: LD_INT 2
7582: ARRAY
7583: PPUSH
7584: LD_EXP 35
7588: PUSH
7589: LD_INT 1
7591: ARRAY
7592: PUSH
7593: LD_INT 3
7595: ARRAY
7596: PPUSH
7597: LD_EXP 35
7601: PUSH
7602: LD_INT 1
7604: ARRAY
7605: PUSH
7606: LD_INT 4
7608: ARRAY
7609: PPUSH
7610: CALL_OW 125
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7614: LD_ADDR_VAR 0 2
7618: PUSH
7619: LD_INT 26
7621: PPUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 24
7637: PUSH
7638: LD_INT 1000
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PPUSH
7653: CALL_OW 70
7657: ST_TO_ADDR
// cr := GetListOfCratesInArea ( crates6Area ) ;
7658: LD_ADDR_VAR 0 8
7662: PUSH
7663: LD_INT 14
7665: PPUSH
7666: CALL_OW 435
7670: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7671: LD_ADDR_VAR 0 9
7675: PUSH
7676: LD_EXP 34
7680: PPUSH
7681: LD_INT 25
7683: PUSH
7684: LD_INT 4
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: LD_INT 50
7693: PUSH
7694: EMPTY
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PPUSH
7701: CALL_OW 72
7705: ST_TO_ADDR
// if sci then
7706: LD_VAR 0 9
7710: IFFALSE 7937
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
7712: LD_ADDR_VAR 0 11
7716: PUSH
7717: LD_EXP 34
7721: PPUSH
7722: LD_INT 95
7724: PUSH
7725: LD_INT 26
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PUSH
7732: LD_INT 120
7734: PUSH
7735: LD_INT 3
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 72
7750: ST_TO_ADDR
// lab := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7751: LD_ADDR_VAR 0 3
7755: PUSH
7756: LD_EXP 34
7760: PPUSH
7761: LD_INT 95
7763: PUSH
7764: LD_INT 26
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: LD_INT 2
7773: PUSH
7774: LD_INT 30
7776: PUSH
7777: LD_INT 6
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 30
7786: PUSH
7787: LD_INT 7
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 30
7796: PUSH
7797: LD_INT 8
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 72
7818: ST_TO_ADDR
// if hurtUnits then
7819: LD_VAR 0 11
7823: IFFALSE 7884
// begin for i in sci do
7825: LD_ADDR_VAR 0 1
7829: PUSH
7830: LD_VAR 0 9
7834: PUSH
7835: FOR_IN
7836: IFFALSE 7880
// if IsInUnit ( i ) then
7838: LD_VAR 0 1
7842: PPUSH
7843: CALL_OW 310
7847: IFFALSE 7860
// ComExitBuilding ( i ) else
7849: LD_VAR 0 1
7853: PPUSH
7854: CALL_OW 122
7858: GO 7878
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7860: LD_VAR 0 1
7864: PPUSH
7865: LD_VAR 0 11
7869: PUSH
7870: LD_INT 1
7872: ARRAY
7873: PPUSH
7874: CALL_OW 128
7878: GO 7835
7880: POP
7881: POP
// end else
7882: GO 7937
// if lab then
7884: LD_VAR 0 3
7888: IFFALSE 7937
// begin for i in sci do
7890: LD_ADDR_VAR 0 1
7894: PUSH
7895: LD_VAR 0 9
7899: PUSH
7900: FOR_IN
7901: IFFALSE 7935
// if not IsInUnit ( i ) then
7903: LD_VAR 0 1
7907: PPUSH
7908: CALL_OW 310
7912: NOT
7913: IFFALSE 7933
// ComEnterUnit ( i , lab [ 1 ] ) ;
7915: LD_VAR 0 1
7919: PPUSH
7920: LD_VAR 0 3
7924: PUSH
7925: LD_INT 1
7927: ARRAY
7928: PPUSH
7929: CALL_OW 120
7933: GO 7900
7935: POP
7936: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
7937: LD_ADDR_VAR 0 4
7941: PUSH
7942: LD_EXP 34
7946: PPUSH
7947: LD_INT 25
7949: PUSH
7950: LD_INT 2
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PPUSH
7957: CALL_OW 72
7961: ST_TO_ADDR
// if eng then
7962: LD_VAR 0 4
7966: IFFALSE 8406
// begin for i in eng do
7968: LD_ADDR_VAR 0 1
7972: PUSH
7973: LD_VAR 0 4
7977: PUSH
7978: FOR_IN
7979: IFFALSE 8404
// begin tag := GetTag ( i ) ;
7981: LD_ADDR_VAR 0 5
7985: PUSH
7986: LD_VAR 0 1
7990: PPUSH
7991: CALL_OW 110
7995: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 256
8005: PUSH
8006: LD_INT 800
8008: LESS
8009: PUSH
8010: LD_VAR 0 5
8014: PUSH
8015: LD_INT 3
8017: NONEQUAL
8018: AND
8019: IFFALSE 8057
// begin SetTag ( i , tHeal ) ;
8021: LD_VAR 0 1
8025: PPUSH
8026: LD_INT 3
8028: PPUSH
8029: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8033: LD_VAR 0 1
8037: PPUSH
8038: LD_INT 97
8040: PPUSH
8041: LD_INT 139
8043: PPUSH
8044: CALL_OW 111
// AddComHold ( i ) ;
8048: LD_VAR 0 1
8052: PPUSH
8053: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8057: LD_VAR 0 5
8061: PUSH
8062: LD_INT 3
8064: EQUAL
8065: PUSH
8066: LD_VAR 0 1
8070: PPUSH
8071: CALL_OW 256
8075: PUSH
8076: LD_INT 1000
8078: EQUAL
8079: AND
8080: IFFALSE 8094
// SetTag ( i , 0 ) ;
8082: LD_VAR 0 1
8086: PPUSH
8087: LD_INT 0
8089: PPUSH
8090: CALL_OW 109
// if not tag then
8094: LD_VAR 0 5
8098: NOT
8099: IFFALSE 8193
// begin if cr or tmp then
8101: LD_VAR 0 8
8105: PUSH
8106: LD_VAR 0 2
8110: OR
8111: IFFALSE 8167
// begin if IsInUnit ( i ) then
8113: LD_VAR 0 1
8117: PPUSH
8118: CALL_OW 310
8122: IFFALSE 8133
// ComExitBuilding ( i ) ;
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 122
// if tmp then
8133: LD_VAR 0 2
8137: IFFALSE 8153
// SetTag ( i , tRepair ) else
8139: LD_VAR 0 1
8143: PPUSH
8144: LD_INT 1
8146: PPUSH
8147: CALL_OW 109
8151: GO 8165
// SetTag ( i , tCrates ) ;
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 2
8160: PPUSH
8161: CALL_OW 109
// end else
8165: GO 8193
// if not IsInUnit ( i ) then
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 310
8176: NOT
8177: IFFALSE 8193
// ComEnterUnit ( i , ruBase ) ;
8179: LD_VAR 0 1
8183: PPUSH
8184: LD_VAR 0 14
8188: PPUSH
8189: CALL_OW 120
// end ; if tag = tRepair then
8193: LD_VAR 0 5
8197: PUSH
8198: LD_INT 1
8200: EQUAL
8201: IFFALSE 8281
// begin if not tmp then
8203: LD_VAR 0 2
8207: NOT
8208: IFFALSE 8224
// begin SetTag ( i , 0 ) ;
8210: LD_VAR 0 1
8214: PPUSH
8215: LD_INT 0
8217: PPUSH
8218: CALL_OW 109
// continue ;
8222: GO 7978
// end ; if not HasTask ( i ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 314
8233: NOT
8234: IFFALSE 8254
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8236: LD_VAR 0 1
8240: PPUSH
8241: LD_VAR 0 2
8245: PUSH
8246: LD_INT 1
8248: ARRAY
8249: PPUSH
8250: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
8254: LD_VAR 0 1
8258: PPUSH
8259: LD_INT 26
8261: PPUSH
8262: CALL_OW 308
8266: NOT
8267: IFFALSE 8281
// ComMoveToArea ( i , ruBaseArea ) ;
8269: LD_VAR 0 1
8273: PPUSH
8274: LD_INT 26
8276: PPUSH
8277: CALL_OW 113
// end ; if tag = tCrates then
8281: LD_VAR 0 5
8285: PUSH
8286: LD_INT 2
8288: EQUAL
8289: IFFALSE 8402
// begin if not cr then
8291: LD_VAR 0 8
8295: NOT
8296: IFFALSE 8312
// begin SetTag ( i , 0 ) ;
8298: LD_VAR 0 1
8302: PPUSH
8303: LD_INT 0
8305: PPUSH
8306: CALL_OW 109
// continue ;
8310: GO 7978
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8312: LD_VAR 0 1
8316: PPUSH
8317: CALL_OW 314
8321: NOT
8322: PUSH
8323: LD_INT 81
8325: PUSH
8326: LD_INT 6
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 92
8335: PUSH
8336: LD_VAR 0 8
8340: PUSH
8341: LD_INT 1
8343: ARRAY
8344: PUSH
8345: LD_VAR 0 8
8349: PUSH
8350: LD_INT 2
8352: ARRAY
8353: PUSH
8354: LD_INT 12
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PPUSH
8367: CALL_OW 69
8371: NOT
8372: AND
8373: IFFALSE 8402
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8375: LD_VAR 0 1
8379: PPUSH
8380: LD_VAR 0 8
8384: PUSH
8385: LD_INT 1
8387: ARRAY
8388: PPUSH
8389: LD_VAR 0 8
8393: PUSH
8394: LD_INT 2
8396: ARRAY
8397: PPUSH
8398: CALL_OW 117
// end ; end ;
8402: GO 7978
8404: POP
8405: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8406: LD_ADDR_VAR 0 10
8410: PUSH
8411: LD_EXP 34
8415: PPUSH
8416: LD_INT 2
8418: PUSH
8419: LD_INT 25
8421: PUSH
8422: LD_INT 1
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 9
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 50
8446: PUSH
8447: EMPTY
8448: LIST
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PPUSH
8454: CALL_OW 72
8458: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
8459: LD_ADDR_VAR 0 12
8463: PUSH
8464: LD_INT 26
8466: PPUSH
8467: LD_INT 81
8469: PUSH
8470: LD_INT 6
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PPUSH
8477: CALL_OW 70
8481: ST_TO_ADDR
// if sol then
8482: LD_VAR 0 10
8486: IFFALSE 9009
// begin if enemyInBase then
8488: LD_VAR 0 12
8492: IFFALSE 8711
// begin for i in sol do
8494: LD_ADDR_VAR 0 1
8498: PUSH
8499: LD_VAR 0 10
8503: PUSH
8504: FOR_IN
8505: IFFALSE 8707
// begin tw := IsInUnit ( i ) ;
8507: LD_ADDR_VAR 0 7
8511: PUSH
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 310
8521: ST_TO_ADDR
// if tw then
8522: LD_VAR 0 7
8526: IFFALSE 8616
// begin if not tw in FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8528: LD_VAR 0 7
8532: PUSH
8533: LD_INT 22
8535: PUSH
8536: LD_INT 6
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 101
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: LD_INT 30
8558: PUSH
8559: LD_INT 5
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 30
8568: PUSH
8569: LD_INT 32
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 30
8578: PUSH
8579: LD_INT 31
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: LIST
8596: PPUSH
8597: CALL_OW 69
8601: IN
8602: NOT
8603: IFFALSE 8614
// ComExitBuilding ( i ) ;
8605: LD_VAR 0 1
8609: PPUSH
8610: CALL_OW 122
// end else
8614: GO 8705
// begin un := NearestUnitToUnit ( enemyInBase , i ) ;
8616: LD_ADDR_VAR 0 6
8620: PUSH
8621: LD_VAR 0 12
8625: PPUSH
8626: LD_VAR 0 1
8630: PPUSH
8631: CALL_OW 74
8635: ST_TO_ADDR
// if GetClass ( i ) = class_bazooker and Prob ( 30 ) then
8636: LD_VAR 0 1
8640: PPUSH
8641: CALL_OW 257
8645: PUSH
8646: LD_INT 9
8648: EQUAL
8649: PUSH
8650: LD_INT 30
8652: PPUSH
8653: CALL_OW 13
8657: AND
8658: IFFALSE 8691
// ComTimeShift ( i , GetX ( un ) , GetY ( un ) ) else
8660: LD_VAR 0 1
8664: PPUSH
8665: LD_VAR 0 6
8669: PPUSH
8670: CALL_OW 250
8674: PPUSH
8675: LD_VAR 0 6
8679: PPUSH
8680: CALL_OW 251
8684: PPUSH
8685: CALL_OW 154
8689: GO 8705
// ComAttackUnit ( i , un ) ;
8691: LD_VAR 0 1
8695: PPUSH
8696: LD_VAR 0 6
8700: PPUSH
8701: CALL_OW 115
// end ; end ;
8705: GO 8504
8707: POP
8708: POP
// end else
8709: GO 9009
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8711: LD_ADDR_VAR 0 13
8715: PUSH
8716: LD_INT 26
8718: PPUSH
8719: LD_INT 3
8721: PUSH
8722: LD_INT 62
8724: PUSH
8725: EMPTY
8726: LIST
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 2
8734: PUSH
8735: LD_INT 30
8737: PUSH
8738: LD_INT 32
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 30
8747: PUSH
8748: LD_INT 4
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 30
8757: PUSH
8758: LD_INT 31
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PPUSH
8775: CALL_OW 70
8779: ST_TO_ADDR
// if empty then
8780: LD_VAR 0 13
8784: IFFALSE 8801
// empty := ReverseArray ( empty ) ;
8786: LD_ADDR_VAR 0 13
8790: PUSH
8791: LD_VAR 0 13
8795: PPUSH
8796: CALL 48487 0 1
8800: ST_TO_ADDR
// for i in sol do
8801: LD_ADDR_VAR 0 1
8805: PUSH
8806: LD_VAR 0 10
8810: PUSH
8811: FOR_IN
8812: IFFALSE 9007
// begin tag := GetTag ( i ) ;
8814: LD_ADDR_VAR 0 5
8818: PUSH
8819: LD_VAR 0 1
8823: PPUSH
8824: CALL_OW 110
8828: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8829: LD_VAR 0 1
8833: PPUSH
8834: CALL_OW 256
8838: PUSH
8839: LD_INT 1000
8841: LESS
8842: PUSH
8843: LD_VAR 0 5
8847: PUSH
8848: LD_INT 3
8850: NONEQUAL
8851: AND
8852: IFFALSE 8892
// begin SetTag ( i , tHeal ) ;
8854: LD_VAR 0 1
8858: PPUSH
8859: LD_INT 3
8861: PPUSH
8862: CALL_OW 109
// ComMoveXY ( i , 97 , 139 ) ;
8866: LD_VAR 0 1
8870: PPUSH
8871: LD_INT 97
8873: PPUSH
8874: LD_INT 139
8876: PPUSH
8877: CALL_OW 111
// AddComHold ( i ) ;
8881: LD_VAR 0 1
8885: PPUSH
8886: CALL_OW 200
// continue ;
8890: GO 8811
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8892: LD_VAR 0 1
8896: PPUSH
8897: CALL_OW 256
8901: PUSH
8902: LD_INT 1000
8904: EQUAL
8905: PUSH
8906: LD_VAR 0 5
8910: PUSH
8911: LD_INT 3
8913: EQUAL
8914: AND
8915: IFFALSE 8931
// begin SetTag ( i , 0 ) ;
8917: LD_VAR 0 1
8921: PPUSH
8922: LD_INT 0
8924: PPUSH
8925: CALL_OW 109
// continue ;
8929: GO 8811
// end ; if HasTask ( i ) then
8931: LD_VAR 0 1
8935: PPUSH
8936: CALL_OW 314
8940: IFFALSE 8944
// continue ;
8942: GO 8811
// if not IsInUnit ( i ) and not tag and empty then
8944: LD_VAR 0 1
8948: PPUSH
8949: CALL_OW 310
8953: NOT
8954: PUSH
8955: LD_VAR 0 5
8959: NOT
8960: AND
8961: PUSH
8962: LD_VAR 0 13
8966: AND
8967: IFFALSE 9005
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8969: LD_VAR 0 1
8973: PPUSH
8974: LD_VAR 0 13
8978: PUSH
8979: LD_INT 1
8981: ARRAY
8982: PPUSH
8983: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
8987: LD_ADDR_VAR 0 13
8991: PUSH
8992: LD_VAR 0 13
8996: PPUSH
8997: LD_INT 1
8999: PPUSH
9000: CALL_OW 3
9004: ST_TO_ADDR
// end ; end ;
9005: GO 8811
9007: POP
9008: POP
// end ; end ; end ;
9009: PPOPN 15
9011: END
// every 0 0$1 trigger ruTanks do var i , mech , enemy ;
9012: LD_EXP 36
9016: IFFALSE 9592
9018: GO 9020
9020: DISABLE
9021: LD_INT 0
9023: PPUSH
9024: PPUSH
9025: PPUSH
// begin enable ;
9026: ENABLE
// if not ruTanks then
9027: LD_EXP 36
9031: NOT
9032: IFFALSE 9036
// exit ;
9034: GO 9592
// for i in ruTanks do
9036: LD_ADDR_VAR 0 1
9040: PUSH
9041: LD_EXP 36
9045: PUSH
9046: FOR_IN
9047: IFFALSE 9590
// begin if not IsOk ( i ) or GetSide ( i ) <> 6 then
9049: LD_VAR 0 1
9053: PPUSH
9054: CALL_OW 302
9058: NOT
9059: PUSH
9060: LD_VAR 0 1
9064: PPUSH
9065: CALL_OW 255
9069: PUSH
9070: LD_INT 6
9072: NONEQUAL
9073: OR
9074: IFFALSE 9094
// begin ruTanks := ruTanks diff i ;
9076: LD_ADDR_EXP 36
9080: PUSH
9081: LD_EXP 36
9085: PUSH
9086: LD_VAR 0 1
9090: DIFF
9091: ST_TO_ADDR
// continue ;
9092: GO 9046
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 110
9103: NOT
9104: PUSH
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 110
9114: PUSH
9115: LD_INT 0
9117: EQUAL
9118: OR
9119: IFFALSE 9249
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9121: LD_VAR 0 1
9125: PPUSH
9126: CALL_OW 261
9130: PUSH
9131: LD_INT 50
9133: LESS
9134: PUSH
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL_OW 262
9144: PUSH
9145: LD_INT 1
9147: EQUAL
9148: AND
9149: IFFALSE 9208
// begin ComMoveXY ( i , 103 , 149 ) ;
9151: LD_VAR 0 1
9155: PPUSH
9156: LD_INT 103
9158: PPUSH
9159: LD_INT 149
9161: PPUSH
9162: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9166: LD_INT 35
9168: PPUSH
9169: CALL_OW 67
// until GetDistUnitXY ( i , 103 , 149 ) < 4 ;
9173: LD_VAR 0 1
9177: PPUSH
9178: LD_INT 103
9180: PPUSH
9181: LD_INT 149
9183: PPUSH
9184: CALL_OW 297
9188: PUSH
9189: LD_INT 4
9191: LESS
9192: IFFALSE 9166
// SetFuel ( i , 100 ) ;
9194: LD_VAR 0 1
9198: PPUSH
9199: LD_INT 100
9201: PPUSH
9202: CALL_OW 240
// end else
9206: GO 9249
// if not IsInArea ( i , ruParkingArea ) then
9208: LD_VAR 0 1
9212: PPUSH
9213: LD_INT 27
9215: PPUSH
9216: CALL_OW 308
9220: NOT
9221: IFFALSE 9237
// ComMoveToArea ( i , ruParkingArea ) else
9223: LD_VAR 0 1
9227: PPUSH
9228: LD_INT 27
9230: PPUSH
9231: CALL_OW 113
9235: GO 9249
// SetTag ( i , tParking ) ;
9237: LD_VAR 0 1
9241: PPUSH
9242: LD_INT 11
9244: PPUSH
9245: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 110
9258: PUSH
9259: LD_INT 11
9261: EQUAL
9262: IFFALSE 9392
// begin if GetLives ( i ) < 650 then
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 256
9273: PUSH
9274: LD_INT 650
9276: LESS
9277: IFFALSE 9369
// begin if not IsDrivenBy ( i ) then
9279: LD_VAR 0 1
9283: PPUSH
9284: CALL_OW 311
9288: NOT
9289: IFFALSE 9293
// continue ;
9291: GO 9046
// mech := IsDrivenBy ( i ) ;
9293: LD_ADDR_VAR 0 2
9297: PUSH
9298: LD_VAR 0 1
9302: PPUSH
9303: CALL_OW 311
9307: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9308: LD_VAR 0 2
9312: PPUSH
9313: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9317: LD_VAR 0 2
9321: PPUSH
9322: LD_VAR 0 1
9326: PPUSH
9327: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9331: LD_INT 35
9333: PPUSH
9334: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL_OW 256
9347: PUSH
9348: LD_INT 1000
9350: EQUAL
9351: IFFALSE 9331
// ComEnterUnit ( mech , i ) ;
9353: LD_VAR 0 2
9357: PPUSH
9358: LD_VAR 0 1
9362: PPUSH
9363: CALL_OW 120
// end else
9367: GO 9392
// if IsDrivenBy ( i ) then
9369: LD_VAR 0 1
9373: PPUSH
9374: CALL_OW 311
9378: IFFALSE 9392
// SetTag ( i , tAttack ) ;
9380: LD_VAR 0 1
9384: PPUSH
9385: LD_INT 12
9387: PPUSH
9388: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9392: LD_VAR 0 1
9396: PPUSH
9397: CALL_OW 110
9401: PUSH
9402: LD_INT 12
9404: EQUAL
9405: IFFALSE 9588
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 6 ] ) ;
9407: LD_ADDR_VAR 0 3
9411: PUSH
9412: LD_INT 26
9414: PPUSH
9415: LD_INT 81
9417: PUSH
9418: LD_INT 6
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PPUSH
9425: CALL_OW 70
9429: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9430: LD_VAR 0 1
9434: PPUSH
9435: CALL_OW 256
9439: PUSH
9440: LD_INT 650
9442: LESS
9443: IFFALSE 9468
// begin ComStop ( i ) ;
9445: LD_VAR 0 1
9449: PPUSH
9450: CALL_OW 141
// SetTag ( i , 0 ) ;
9454: LD_VAR 0 1
9458: PPUSH
9459: LD_INT 0
9461: PPUSH
9462: CALL_OW 109
// continue ;
9466: GO 9046
// end ; if enemy then
9468: LD_VAR 0 3
9472: IFFALSE 9512
// begin if not HasTask ( i ) then
9474: LD_VAR 0 1
9478: PPUSH
9479: CALL_OW 314
9483: NOT
9484: IFFALSE 9510
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9486: LD_VAR 0 1
9490: PPUSH
9491: LD_VAR 0 3
9495: PPUSH
9496: LD_VAR 0 1
9500: PPUSH
9501: CALL_OW 74
9505: PPUSH
9506: CALL 57442 0 2
// end else
9510: GO 9588
// if ruTanks > 1 then
9512: LD_EXP 36
9516: PUSH
9517: LD_INT 1
9519: GREATER
9520: IFFALSE 9588
// AgressiveMove ( i , [ [ 78 , 112 ] , [ 104 , 106 ] , [ 130 , 107 ] , [ 143 , 83 ] , [ 120 , 35 ] ] ) ;
9522: LD_VAR 0 1
9526: PPUSH
9527: LD_INT 78
9529: PUSH
9530: LD_INT 112
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 104
9539: PUSH
9540: LD_INT 106
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 130
9549: PUSH
9550: LD_INT 107
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 143
9559: PUSH
9560: LD_INT 83
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 120
9569: PUSH
9570: LD_INT 35
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: PPUSH
9584: CALL 55824 0 2
// end ; end ;
9588: GO 9046
9590: POP
9591: POP
// end ;
9592: PPOPN 3
9594: END
// every 0 0$1 trigger InBattle ( 6 ) or playerInBase do
9595: LD_INT 6
9597: PPUSH
9598: CALL_OW 463
9602: PUSH
9603: LD_EXP 5
9607: OR
9608: IFFALSE 9826
9610: GO 9612
9612: DISABLE
// begin wait ( 0 0$10 ) ;
9613: LD_INT 350
9615: PPUSH
9616: CALL_OW 67
// if playerInBase then
9620: LD_EXP 5
9624: IFFALSE 9633
// wait ( 3 3$00 ) ;
9626: LD_INT 6300
9628: PPUSH
9629: CALL_OW 67
// ruConstructList := [ [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] ] ;
9633: LD_ADDR_EXP 35
9637: PUSH
9638: LD_INT 21
9640: PUSH
9641: LD_INT 3
9643: PUSH
9644: LD_INT 1
9646: PUSH
9647: LD_INT 45
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 21
9658: PUSH
9659: LD_INT 3
9661: PUSH
9662: LD_INT 1
9664: PUSH
9665: LD_INT 45
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 21
9676: PUSH
9677: LD_INT 3
9679: PUSH
9680: LD_INT 1
9682: PUSH
9683: LD_INT 45
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: ST_TO_ADDR
// if Difficulty > 1 then
9697: LD_OWVAR 67
9701: PUSH
9702: LD_INT 1
9704: GREATER
9705: IFFALSE 9740
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gatling_gun ] ) ;
9707: LD_ADDR_EXP 35
9711: PUSH
9712: LD_EXP 35
9716: PPUSH
9717: LD_INT 21
9719: PUSH
9720: LD_INT 3
9722: PUSH
9723: LD_INT 1
9725: PUSH
9726: LD_INT 43
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PPUSH
9735: CALL 53220 0 2
9739: ST_TO_ADDR
// if Difficulty > 2 then
9740: LD_OWVAR 67
9744: PUSH
9745: LD_INT 2
9747: GREATER
9748: IFFALSE 9783
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9750: LD_ADDR_EXP 35
9754: PUSH
9755: LD_EXP 35
9759: PPUSH
9760: LD_INT 21
9762: PUSH
9763: LD_INT 3
9765: PUSH
9766: LD_INT 1
9768: PUSH
9769: LD_INT 44
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: PPUSH
9778: CALL 53220 0 2
9782: ST_TO_ADDR
// if Difficulty > 3 then
9783: LD_OWVAR 67
9787: PUSH
9788: LD_INT 3
9790: GREATER
9791: IFFALSE 9826
// ruConstructList := Join ( ruConstructList , [ ru_medium_wheeled , engine_siberite , control_manual , ru_gun ] ) ;
9793: LD_ADDR_EXP 35
9797: PUSH
9798: LD_EXP 35
9802: PPUSH
9803: LD_INT 21
9805: PUSH
9806: LD_INT 3
9808: PUSH
9809: LD_INT 1
9811: PUSH
9812: LD_INT 44
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL 53220 0 2
9825: ST_TO_ADDR
// end ; end_of_file
9826: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
9827: LD_INT 0
9829: PPUSH
9830: PPUSH
9831: PPUSH
9832: PPUSH
9833: PPUSH
9834: PPUSH
9835: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_STRING 09_env
9843: PPUSH
9844: EMPTY
9845: PPUSH
9846: CALL_OW 30
9850: ST_TO_ADDR
// if not tmp then
9851: LD_VAR 0 2
9855: NOT
9856: IFFALSE 9860
// exit ;
9858: GO 10263
// list := ListEnvironmentArea ( mapArea ) ;
9860: LD_ADDR_VAR 0 7
9864: PUSH
9865: LD_INT 4
9867: PPUSH
9868: CALL_OW 353
9872: ST_TO_ADDR
// if not list then
9873: LD_VAR 0 7
9877: NOT
9878: IFFALSE 9882
// exit ;
9880: GO 10263
// for i in list do
9882: LD_ADDR_VAR 0 3
9886: PUSH
9887: LD_VAR 0 7
9891: PUSH
9892: FOR_IN
9893: IFFALSE 10001
// begin exist := false ;
9895: LD_ADDR_VAR 0 6
9899: PUSH
9900: LD_INT 0
9902: ST_TO_ADDR
// for j in tmp do
9903: LD_ADDR_VAR 0 4
9907: PUSH
9908: LD_VAR 0 2
9912: PUSH
9913: FOR_IN
9914: IFFALSE 9968
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
9916: LD_VAR 0 3
9920: PUSH
9921: LD_INT 1
9923: ARRAY
9924: PUSH
9925: LD_VAR 0 4
9929: PUSH
9930: LD_INT 1
9932: ARRAY
9933: EQUAL
9934: PUSH
9935: LD_VAR 0 3
9939: PUSH
9940: LD_INT 2
9942: ARRAY
9943: PUSH
9944: LD_VAR 0 4
9948: PUSH
9949: LD_INT 2
9951: ARRAY
9952: EQUAL
9953: AND
9954: IFFALSE 9966
// begin exist := true ;
9956: LD_ADDR_VAR 0 6
9960: PUSH
9961: LD_INT 1
9963: ST_TO_ADDR
// break ;
9964: GO 9968
// end ;
9966: GO 9913
9968: POP
9969: POP
// if not exist then
9970: LD_VAR 0 6
9974: NOT
9975: IFFALSE 9999
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
9977: LD_VAR 0 3
9981: PUSH
9982: LD_INT 1
9984: ARRAY
9985: PPUSH
9986: LD_VAR 0 3
9990: PUSH
9991: LD_INT 2
9993: ARRAY
9994: PPUSH
9995: CALL_OW 347
// end ;
9999: GO 9892
10001: POP
10002: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
10003: LD_ADDR_VAR 0 2
10007: PUSH
10008: LD_STRING 09_animals
10010: PPUSH
10011: EMPTY
10012: PPUSH
10013: CALL_OW 30
10017: ST_TO_ADDR
// if not tmp then
10018: LD_VAR 0 2
10022: NOT
10023: IFFALSE 10027
// exit ;
10025: GO 10263
// InitHc_All ( ) ;
10027: CALL_OW 584
// for i in tmp do
10031: LD_ADDR_VAR 0 3
10035: PUSH
10036: LD_VAR 0 2
10040: PUSH
10041: FOR_IN
10042: IFFALSE 10159
// begin uc_side := 0 ;
10044: LD_ADDR_OWVAR 20
10048: PUSH
10049: LD_INT 0
10051: ST_TO_ADDR
// uc_nation := nation_nature ;
10052: LD_ADDR_OWVAR 21
10056: PUSH
10057: LD_INT 0
10059: ST_TO_ADDR
// hc_gallery :=  ;
10060: LD_ADDR_OWVAR 33
10064: PUSH
10065: LD_STRING 
10067: ST_TO_ADDR
// hc_name :=  ;
10068: LD_ADDR_OWVAR 26
10072: PUSH
10073: LD_STRING 
10075: ST_TO_ADDR
// hc_class := i [ 1 ] ;
10076: LD_ADDR_OWVAR 28
10080: PUSH
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: ST_TO_ADDR
// un := CreateHuman ;
10090: LD_ADDR_VAR 0 5
10094: PUSH
10095: CALL_OW 44
10099: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
10100: LD_VAR 0 5
10104: PPUSH
10105: LD_VAR 0 3
10109: PUSH
10110: LD_INT 2
10112: ARRAY
10113: PPUSH
10114: LD_VAR 0 3
10118: PUSH
10119: LD_INT 3
10121: ARRAY
10122: PPUSH
10123: LD_VAR 0 3
10127: PUSH
10128: LD_INT 4
10130: ARRAY
10131: PPUSH
10132: LD_INT 0
10134: PPUSH
10135: CALL 55360 0 5
// SetLives ( un , i [ 5 ] ) ;
10139: LD_VAR 0 5
10143: PPUSH
10144: LD_VAR 0 3
10148: PUSH
10149: LD_INT 5
10151: ARRAY
10152: PPUSH
10153: CALL_OW 234
// end ;
10157: GO 10041
10159: POP
10160: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
10161: LD_ADDR_VAR 0 3
10165: PUSH
10166: DOUBLE
10167: LD_INT 1
10169: DEC
10170: ST_TO_ADDR
10171: LD_INT 6
10173: PUSH
10174: LD_INT 5
10176: PUSH
10177: LD_INT 4
10179: PUSH
10180: LD_INT 3
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: LD_OWVAR 67
10193: ARRAY
10194: PUSH
10195: FOR_TO
10196: IFFALSE 10222
// begin PrepareApeman ( 5 ) ;
10198: LD_INT 5
10200: PPUSH
10201: CALL 49468 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10205: CALL_OW 44
10209: PPUSH
10210: LD_INT 5
10212: PPUSH
10213: LD_INT 0
10215: PPUSH
10216: CALL_OW 49
// end ;
10220: GO 10195
10222: POP
10223: POP
// for i in FilterUnitsInArea ( ruBaseArea , [ f_side , 0 ] ) do
10224: LD_ADDR_VAR 0 3
10228: PUSH
10229: LD_INT 26
10231: PPUSH
10232: LD_INT 22
10234: PUSH
10235: LD_INT 0
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PPUSH
10242: CALL_OW 70
10246: PUSH
10247: FOR_IN
10248: IFFALSE 10261
// RemoveUnit ( i ) ;
10250: LD_VAR 0 3
10254: PPUSH
10255: CALL_OW 64
10259: GO 10247
10261: POP
10262: POP
// end ;
10263: LD_VAR 0 1
10267: RET
// export function CreateDeposits ; var i , oil , sib ; begin
10268: LD_INT 0
10270: PPUSH
10271: PPUSH
10272: PPUSH
10273: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
10274: LD_ADDR_VAR 0 3
10278: PUSH
10279: LD_INT 91
10281: PUSH
10282: LD_INT 13
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 52
10291: PUSH
10292: LD_INT 23
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 115
10301: PUSH
10302: LD_INT 150
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: LIST
10313: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
10314: LD_ADDR_VAR 0 4
10318: PUSH
10319: LD_INT 82
10321: PUSH
10322: LD_INT 42
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PUSH
10329: LD_INT 128
10331: PUSH
10332: LD_INT 132
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: ST_TO_ADDR
// for i in oil do
10343: LD_ADDR_VAR 0 2
10347: PUSH
10348: LD_VAR 0 3
10352: PUSH
10353: FOR_IN
10354: IFFALSE 10433
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
10356: LD_VAR 0 2
10360: PUSH
10361: LD_INT 1
10363: ARRAY
10364: PPUSH
10365: LD_VAR 0 2
10369: PUSH
10370: LD_INT 2
10372: ARRAY
10373: PPUSH
10374: LD_INT 2
10376: PPUSH
10377: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10381: LD_VAR 0 2
10385: PUSH
10386: LD_INT 1
10388: ARRAY
10389: PPUSH
10390: LD_VAR 0 2
10394: PUSH
10395: LD_INT 2
10397: ARRAY
10398: PPUSH
10399: LD_INT 2
10401: PPUSH
10402: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10406: LD_VAR 0 2
10410: PUSH
10411: LD_INT 1
10413: ARRAY
10414: PPUSH
10415: LD_VAR 0 2
10419: PUSH
10420: LD_INT 2
10422: ARRAY
10423: PPUSH
10424: LD_INT 6
10426: PPUSH
10427: CALL_OW 441
// end ;
10431: GO 10353
10433: POP
10434: POP
// for i in sib do
10435: LD_ADDR_VAR 0 2
10439: PUSH
10440: LD_VAR 0 4
10444: PUSH
10445: FOR_IN
10446: IFFALSE 10525
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
10448: LD_VAR 0 2
10452: PUSH
10453: LD_INT 1
10455: ARRAY
10456: PPUSH
10457: LD_VAR 0 2
10461: PUSH
10462: LD_INT 2
10464: ARRAY
10465: PPUSH
10466: LD_INT 3
10468: PPUSH
10469: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
10473: LD_VAR 0 2
10477: PUSH
10478: LD_INT 1
10480: ARRAY
10481: PPUSH
10482: LD_VAR 0 2
10486: PUSH
10487: LD_INT 2
10489: ARRAY
10490: PPUSH
10491: LD_INT 2
10493: PPUSH
10494: CALL_OW 441
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 6 ) ;
10498: LD_VAR 0 2
10502: PUSH
10503: LD_INT 1
10505: ARRAY
10506: PPUSH
10507: LD_VAR 0 2
10511: PUSH
10512: LD_INT 2
10514: ARRAY
10515: PPUSH
10516: LD_INT 6
10518: PPUSH
10519: CALL_OW 441
// end ;
10523: GO 10445
10525: POP
10526: POP
// end ;
10527: LD_VAR 0 1
10531: RET
// export function LoadCam ; var i , tmp ; begin
10532: LD_INT 0
10534: PPUSH
10535: PPUSH
10536: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
10537: LD_ADDR_VAR 0 3
10541: PUSH
10542: LD_STRING 09_cameras
10544: PPUSH
10545: EMPTY
10546: PPUSH
10547: CALL_OW 30
10551: ST_TO_ADDR
// if not tmp then
10552: LD_VAR 0 3
10556: NOT
10557: IFFALSE 10561
// exit ;
10559: GO 10603
// for i in tmp do
10561: LD_ADDR_VAR 0 2
10565: PUSH
10566: LD_VAR 0 3
10570: PUSH
10571: FOR_IN
10572: IFFALSE 10601
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
10574: LD_VAR 0 2
10578: PUSH
10579: LD_INT 1
10581: ARRAY
10582: PPUSH
10583: LD_VAR 0 2
10587: PUSH
10588: LD_INT 2
10590: ARRAY
10591: PPUSH
10592: LD_INT 2
10594: PPUSH
10595: CALL_OW 244
10599: GO 10571
10601: POP
10602: POP
// end ;
10603: LD_VAR 0 1
10607: RET
// export function LoadTech ; var i , tmp , default ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// default := [ 2 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
10614: LD_ADDR_VAR 0 4
10618: PUSH
10619: LD_INT 2
10621: PUSH
10622: LD_INT 2
10624: PUSH
10625: LD_INT 0
10627: PUSH
10628: LD_INT 0
10630: PUSH
10631: LD_INT 0
10633: PUSH
10634: LD_INT 2
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: LD_INT 0
10642: PUSH
10643: LD_INT 1
10645: PUSH
10646: LD_INT 0
10648: PUSH
10649: LD_INT 2
10651: PUSH
10652: LD_INT 0
10654: PUSH
10655: LD_INT 0
10657: PUSH
10658: LD_INT 0
10660: PUSH
10661: LD_INT 2
10663: PUSH
10664: LD_INT 0
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: LD_INT 1
10672: PUSH
10673: LD_INT 0
10675: PUSH
10676: LD_INT 2
10678: PUSH
10679: LD_INT 1
10681: PUSH
10682: LD_INT 1
10684: PUSH
10685: LD_INT 0
10687: PUSH
10688: LD_INT 0
10690: PUSH
10691: LD_INT 0
10693: PUSH
10694: LD_INT 0
10696: PUSH
10697: LD_INT 0
10699: PUSH
10700: LD_INT 0
10702: PUSH
10703: LD_INT 0
10705: PUSH
10706: LD_INT 0
10708: PUSH
10709: LD_INT 0
10711: PUSH
10712: LD_INT 0
10714: PUSH
10715: LD_INT 0
10717: PUSH
10718: LD_INT 0
10720: PUSH
10721: LD_INT 2
10723: PUSH
10724: LD_INT 0
10726: PUSH
10727: LD_INT 0
10729: PUSH
10730: LD_INT 0
10732: PUSH
10733: LD_INT 1
10735: PUSH
10736: LD_INT 1
10738: PUSH
10739: LD_INT 1
10741: PUSH
10742: LD_INT 1
10744: PUSH
10745: LD_INT 0
10747: PUSH
10748: LD_INT 0
10750: PUSH
10751: LD_INT 2
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: LD_INT 2
10759: PUSH
10760: LD_INT 2
10762: PUSH
10763: LD_INT 2
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: LD_INT 1
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: LD_INT 0
10777: PUSH
10778: LD_INT 1
10780: PUSH
10781: LD_INT 0
10783: PUSH
10784: LD_INT 0
10786: PUSH
10787: LD_INT 0
10789: PUSH
10790: LD_INT 0
10792: PUSH
10793: LD_INT 0
10795: PUSH
10796: LD_INT 2
10798: PUSH
10799: LD_INT 1
10801: PUSH
10802: LD_INT 0
10804: PUSH
10805: LD_INT 0
10807: PUSH
10808: LD_INT 0
10810: PUSH
10811: LD_INT 0
10813: PUSH
10814: LD_INT 1
10816: PUSH
10817: LD_INT 0
10819: PUSH
10820: LD_INT 0
10822: PUSH
10823: LD_INT 2
10825: PUSH
10826: LD_INT 2
10828: PUSH
10829: LD_INT 0
10831: PUSH
10832: LD_INT 0
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: LD_INT 1
10840: PUSH
10841: LD_INT 1
10843: PUSH
10844: LD_INT 1
10846: PUSH
10847: LD_INT 1
10849: PUSH
10850: LD_INT 1
10852: PUSH
10853: LD_INT 1
10855: PUSH
10856: LD_INT 0
10858: PUSH
10859: LD_INT 0
10861: PUSH
10862: LD_INT 2
10864: PUSH
10865: LD_INT 2
10867: PUSH
10868: LD_INT 1
10870: PUSH
10871: LD_INT 1
10873: PUSH
10874: LD_INT 0
10876: PUSH
10877: LD_INT 0
10879: PUSH
10880: LD_INT 0
10882: PUSH
10883: LD_INT 1
10885: PUSH
10886: LD_INT 1
10888: PUSH
10889: LD_INT 1
10891: PUSH
10892: LD_INT 1
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: LD_INT 1
10900: PUSH
10901: LD_INT 1
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: LD_INT 1
10912: PUSH
10913: LD_INT 1
10915: PUSH
10916: LD_INT 1
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: ST_TO_ADDR
// tmp := LoadVariable ( 09_tech , default ) ;
11021: LD_ADDR_VAR 0 3
11025: PUSH
11026: LD_STRING 09_tech
11028: PPUSH
11029: LD_VAR 0 4
11033: PPUSH
11034: CALL_OW 30
11038: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
11039: LD_ADDR_VAR 0 2
11043: PUSH
11044: DOUBLE
11045: LD_INT 1
11047: DEC
11048: ST_TO_ADDR
11049: LD_VAR 0 3
11053: PPUSH
11054: CALL 17611 0 1
11058: PUSH
11059: FOR_TO
11060: IFFALSE 11087
// SetTech ( i , 2 , tmp [ i ] ) ;
11062: LD_VAR 0 2
11066: PPUSH
11067: LD_INT 2
11069: PPUSH
11070: LD_VAR 0 3
11074: PUSH
11075: LD_VAR 0 2
11079: ARRAY
11080: PPUSH
11081: CALL_OW 322
11085: GO 11059
11087: POP
11088: POP
// end ;
11089: LD_VAR 0 1
11093: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
11094: LD_INT 0
11096: PPUSH
11097: PPUSH
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
11102: LD_ADDR_VAR 0 3
11106: PUSH
11107: LD_STRING 09_buildings
11109: PPUSH
11110: EMPTY
11111: PPUSH
11112: CALL_OW 30
11116: ST_TO_ADDR
// for i in tmp do
11117: LD_ADDR_VAR 0 2
11121: PUSH
11122: LD_VAR 0 3
11126: PUSH
11127: FOR_IN
11128: IFFALSE 11522
// begin uc_side := 2 ;
11130: LD_ADDR_OWVAR 20
11134: PUSH
11135: LD_INT 2
11137: ST_TO_ADDR
// uc_nation := nation_arabian ;
11138: LD_ADDR_OWVAR 21
11142: PUSH
11143: LD_INT 2
11145: ST_TO_ADDR
// bc_type := i [ 1 ] ;
11146: LD_ADDR_OWVAR 42
11150: PUSH
11151: LD_VAR 0 2
11155: PUSH
11156: LD_INT 1
11158: ARRAY
11159: ST_TO_ADDR
// bc_level := i [ 5 ] ;
11160: LD_ADDR_OWVAR 43
11164: PUSH
11165: LD_VAR 0 2
11169: PUSH
11170: LD_INT 5
11172: ARRAY
11173: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
11174: LD_ADDR_OWVAR 44
11178: PUSH
11179: LD_INT 9
11181: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
11182: LD_ADDR_OWVAR 45
11186: PUSH
11187: LD_INT 9
11189: ST_TO_ADDR
// if i [ 7 ] then
11190: LD_VAR 0 2
11194: PUSH
11195: LD_INT 7
11197: ARRAY
11198: IFFALSE 11238
// begin bc_kind1 := i [ 7 ] ;
11200: LD_ADDR_OWVAR 44
11204: PUSH
11205: LD_VAR 0 2
11209: PUSH
11210: LD_INT 7
11212: ARRAY
11213: ST_TO_ADDR
// if i [ 8 ] then
11214: LD_VAR 0 2
11218: PUSH
11219: LD_INT 8
11221: ARRAY
11222: IFFALSE 11238
// bc_kind2 := i [ 8 ] ;
11224: LD_ADDR_OWVAR 45
11228: PUSH
11229: LD_VAR 0 2
11233: PUSH
11234: LD_INT 8
11236: ARRAY
11237: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
11238: LD_ADDR_VAR 0 4
11242: PUSH
11243: LD_VAR 0 2
11247: PUSH
11248: LD_INT 2
11250: ARRAY
11251: PPUSH
11252: LD_VAR 0 2
11256: PUSH
11257: LD_INT 3
11259: ARRAY
11260: PPUSH
11261: LD_VAR 0 2
11265: PUSH
11266: LD_INT 4
11268: ARRAY
11269: PPUSH
11270: CALL_OW 47
11274: ST_TO_ADDR
// if i [ 8 ] then
11275: LD_VAR 0 2
11279: PUSH
11280: LD_INT 8
11282: ARRAY
11283: IFFALSE 11303
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
11285: LD_VAR 0 4
11289: PPUSH
11290: LD_VAR 0 2
11294: PUSH
11295: LD_INT 8
11297: ARRAY
11298: PPUSH
11299: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
11303: LD_VAR 0 2
11307: PUSH
11308: LD_INT 1
11310: ARRAY
11311: PUSH
11312: LD_INT 0
11314: PUSH
11315: LD_INT 1
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: IN
11322: IFFALSE 11520
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
11324: LD_ADDR_VAR 0 6
11328: PUSH
11329: LD_STRING 09_materials
11331: PPUSH
11332: LD_INT 100
11334: PUSH
11335: LD_INT 50
11337: PUSH
11338: LD_INT 30
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: PUSH
11346: EMPTY
11347: LIST
11348: PPUSH
11349: CALL_OW 30
11353: ST_TO_ADDR
// for j := 1 to 3 do
11354: LD_ADDR_VAR 0 5
11358: PUSH
11359: DOUBLE
11360: LD_INT 1
11362: DEC
11363: ST_TO_ADDR
11364: LD_INT 3
11366: PUSH
11367: FOR_TO
11368: IFFALSE 11518
// if mat [ 1 ] [ j ] then
11370: LD_VAR 0 6
11374: PUSH
11375: LD_INT 1
11377: ARRAY
11378: PUSH
11379: LD_VAR 0 5
11383: ARRAY
11384: IFFALSE 11516
// if j > 1 then
11386: LD_VAR 0 5
11390: PUSH
11391: LD_INT 1
11393: GREATER
11394: IFFALSE 11457
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 35 , 25 , 20 , 10 ] [ Difficulty ] ) else
11396: LD_VAR 0 4
11400: PPUSH
11401: CALL_OW 274
11405: PPUSH
11406: LD_VAR 0 5
11410: PPUSH
11411: LD_VAR 0 6
11415: PUSH
11416: LD_INT 1
11418: ARRAY
11419: PUSH
11420: LD_VAR 0 5
11424: ARRAY
11425: PUSH
11426: LD_INT 35
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 20
11434: PUSH
11435: LD_INT 10
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: LD_OWVAR 67
11448: ARRAY
11449: PLUS
11450: PPUSH
11451: CALL_OW 277
11455: GO 11516
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 350 , 250 , 150 , 100 ] [ Difficulty ] ) ;
11457: LD_VAR 0 4
11461: PPUSH
11462: CALL_OW 274
11466: PPUSH
11467: LD_VAR 0 5
11471: PPUSH
11472: LD_VAR 0 6
11476: PUSH
11477: LD_INT 1
11479: ARRAY
11480: PUSH
11481: LD_VAR 0 5
11485: ARRAY
11486: PUSH
11487: LD_INT 350
11489: PUSH
11490: LD_INT 250
11492: PUSH
11493: LD_INT 150
11495: PUSH
11496: LD_INT 100
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: LD_OWVAR 67
11509: ARRAY
11510: PLUS
11511: PPUSH
11512: CALL_OW 277
11516: GO 11367
11518: POP
11519: POP
// end ; end ;
11520: GO 11127
11522: POP
11523: POP
// end ;
11524: LD_VAR 0 1
11528: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
11529: LD_INT 0
11531: PPUSH
11532: PPUSH
// area = ListEnvironmentArea ( area ) ;
11533: LD_ADDR_VAR 0 2
11537: PUSH
11538: LD_VAR 0 2
11542: PPUSH
11543: CALL_OW 353
11547: ST_TO_ADDR
// if bulldozer > 0 then
11548: LD_VAR 0 1
11552: PUSH
11553: LD_INT 0
11555: GREATER
11556: IFFALSE 11667
// for i = area downto 1 do
11558: LD_ADDR_VAR 0 4
11562: PUSH
11563: DOUBLE
11564: LD_VAR 0 2
11568: INC
11569: ST_TO_ADDR
11570: LD_INT 1
11572: PUSH
11573: FOR_DOWNTO
11574: IFFALSE 11665
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
11576: LD_VAR 0 2
11580: PUSH
11581: LD_VAR 0 4
11585: ARRAY
11586: PUSH
11587: LD_INT 1
11589: ARRAY
11590: PPUSH
11591: LD_VAR 0 2
11595: PUSH
11596: LD_VAR 0 4
11600: ARRAY
11601: PUSH
11602: LD_INT 2
11604: ARRAY
11605: PPUSH
11606: CALL_OW 351
11610: IFFALSE 11663
// if not HasTask ( bulldozer ) then
11612: LD_VAR 0 1
11616: PPUSH
11617: CALL_OW 314
11621: NOT
11622: IFFALSE 11663
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
11624: LD_VAR 0 1
11628: PPUSH
11629: LD_VAR 0 2
11633: PUSH
11634: LD_VAR 0 4
11638: ARRAY
11639: PUSH
11640: LD_INT 1
11642: ARRAY
11643: PPUSH
11644: LD_VAR 0 2
11648: PUSH
11649: LD_VAR 0 4
11653: ARRAY
11654: PUSH
11655: LD_INT 2
11657: ARRAY
11658: PPUSH
11659: CALL_OW 171
11663: GO 11573
11665: POP
11666: POP
// end ; end_of_file
11667: LD_VAR 0 3
11671: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11672: LD_VAR 0 1
11676: PPUSH
11677: LD_VAR 0 2
11681: PPUSH
11682: CALL 74531 0 2
// if GetControl ( vehicle ) = control_apeman then
11686: LD_VAR 0 1
11690: PPUSH
11691: CALL_OW 263
11695: PUSH
11696: LD_INT 5
11698: EQUAL
11699: IFFALSE 11711
// begin apeDriver := true ;
11701: LD_ADDR_EXP 8
11705: PUSH
11706: LD_INT 1
11708: ST_TO_ADDR
// exit ;
11709: GO 11764
// end ; if GetSide ( factory ) = 6 then
11711: LD_VAR 0 2
11715: PPUSH
11716: CALL_OW 255
11720: PUSH
11721: LD_INT 6
11723: EQUAL
11724: IFFALSE 11764
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
11726: LD_ADDR_EXP 35
11730: PUSH
11731: LD_EXP 35
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: CALL_OW 3
11743: ST_TO_ADDR
// ruTanks := Join ( ruTanks , vehicle ) ;
11744: LD_ADDR_EXP 36
11748: PUSH
11749: LD_EXP 36
11753: PPUSH
11754: LD_VAR 0 1
11758: PPUSH
11759: CALL 53220 0 2
11763: ST_TO_ADDR
// end ; end ;
11764: PPOPN 2
11766: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) = 6 and not See ( 2 , unit ) then
11767: LD_VAR 0 2
11771: PPUSH
11772: CALL_OW 255
11776: PUSH
11777: LD_INT 6
11779: EQUAL
11780: PUSH
11781: LD_INT 2
11783: PPUSH
11784: LD_VAR 0 2
11788: PPUSH
11789: CALL_OW 292
11793: NOT
11794: AND
11795: IFFALSE 11809
// SetLives ( unit , 1000 ) ;
11797: LD_VAR 0 2
11801: PPUSH
11802: LD_INT 1000
11804: PPUSH
11805: CALL_OW 234
// end ;
11809: PPOPN 2
11811: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area , fac , arm ;
11812: LD_INT 0
11814: PPUSH
11815: PPUSH
11816: PPUSH
11817: PPUSH
// begin if GetSide ( driver ) = 3 then
11818: LD_VAR 0 1
11822: PPUSH
11823: CALL_OW 255
11827: PUSH
11828: LD_INT 3
11830: EQUAL
11831: IFFALSE 11968
// begin tag := GetTag ( driver ) ;
11833: LD_ADDR_VAR 0 5
11837: PUSH
11838: LD_VAR 0 1
11842: PPUSH
11843: CALL_OW 110
11847: ST_TO_ADDR
// area := [ ruSpawn1AArea , ruSpawn2AArea , ruSpawn3AArea ] [ tag ] ;
11848: LD_ADDR_VAR 0 6
11852: PUSH
11853: LD_INT 21
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_INT 23
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: LD_VAR 0 5
11871: ARRAY
11872: ST_TO_ADDR
// if not area then
11873: LD_VAR 0 6
11877: NOT
11878: IFFALSE 11882
// exit ;
11880: GO 12236
// repeat ComMoveToArea ( driver , area ) ;
11882: LD_VAR 0 1
11886: PPUSH
11887: LD_VAR 0 6
11891: PPUSH
11892: CALL_OW 113
// wait ( 0 0$3 ) ;
11896: LD_INT 105
11898: PPUSH
11899: CALL_OW 67
// if not IsOk ( driver ) then
11903: LD_VAR 0 1
11907: PPUSH
11908: CALL_OW 302
11912: NOT
11913: IFFALSE 11917
// exit ;
11915: GO 12236
// until IsInArea ( driver , ruSpawn1Area ) or IsInArea ( driver , ruSpawn2Area ) or IsInArea ( driver , ruSpawn3Area ) ;
11917: LD_VAR 0 1
11921: PPUSH
11922: LD_INT 15
11924: PPUSH
11925: CALL_OW 308
11929: PUSH
11930: LD_VAR 0 1
11934: PPUSH
11935: LD_INT 17
11937: PPUSH
11938: CALL_OW 308
11942: OR
11943: PUSH
11944: LD_VAR 0 1
11948: PPUSH
11949: LD_INT 19
11951: PPUSH
11952: CALL_OW 308
11956: OR
11957: IFFALSE 11882
// RemoveUnit ( driver ) ;
11959: LD_VAR 0 1
11963: PPUSH
11964: CALL_OW 64
// end ; if GetSide ( driver ) = 6 then
11968: LD_VAR 0 1
11972: PPUSH
11973: CALL_OW 255
11977: PUSH
11978: LD_INT 6
11980: EQUAL
11981: IFFALSE 12236
// begin ComMoveXY ( driver , 97 , 139 ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: LD_INT 97
11990: PPUSH
11991: LD_INT 139
11993: PPUSH
11994: CALL_OW 111
// if GetLives ( driver ) < 1000 then
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 256
12007: PUSH
12008: LD_INT 1000
12010: LESS
12011: IFFALSE 12025
// SetTag ( driver , tHeal ) ;
12013: LD_VAR 0 1
12017: PPUSH
12018: LD_INT 3
12020: PPUSH
12021: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
12025: LD_INT 35
12027: PPUSH
12028: CALL_OW 67
// if IsDead ( driver ) then
12032: LD_VAR 0 1
12036: PPUSH
12037: CALL_OW 301
12041: IFFALSE 12045
// exit ;
12043: GO 12236
// until GetLives ( driver ) = 1000 ;
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 256
12054: PUSH
12055: LD_INT 1000
12057: EQUAL
12058: IFFALSE 12025
// SetTag ( driver , 0 ) ;
12060: LD_VAR 0 1
12064: PPUSH
12065: LD_INT 0
12067: PPUSH
12068: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12072: LD_ADDR_VAR 0 7
12076: PUSH
12077: LD_INT 26
12079: PPUSH
12080: LD_INT 22
12082: PUSH
12083: LD_INT 6
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 30
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 50
12102: PUSH
12103: EMPTY
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: PPUSH
12111: CALL_OW 70
12115: ST_TO_ADDR
// if fac then
12116: LD_VAR 0 7
12120: IFFALSE 12142
// begin ComEnterUnit ( driver , fac [ 1 ] ) ;
12122: LD_VAR 0 1
12126: PPUSH
12127: LD_VAR 0 7
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PPUSH
12136: CALL_OW 120
// exit ;
12140: GO 12236
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 6 ] , [ f_btype , b_barracks ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
12142: LD_ADDR_VAR 0 8
12146: PUSH
12147: LD_INT 26
12149: PPUSH
12150: LD_INT 22
12152: PUSH
12153: LD_INT 6
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 30
12162: PUSH
12163: LD_INT 5
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 3
12172: PUSH
12173: LD_INT 62
12175: PUSH
12176: EMPTY
12177: LIST
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: LD_INT 50
12185: PUSH
12186: EMPTY
12187: LIST
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: PPUSH
12195: CALL_OW 70
12199: ST_TO_ADDR
// if arm then
12200: LD_VAR 0 8
12204: IFFALSE 12236
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
12206: LD_VAR 0 1
12210: PPUSH
12211: LD_VAR 0 8
12215: PUSH
12216: LD_INT 1
12218: ARRAY
12219: PPUSH
12220: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
12224: LD_VAR 0 1
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 183
// end ; end ; end ;
12236: PPOPN 8
12238: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
12239: LD_VAR 0 3
12243: PUSH
12244: LD_INT 17
12246: EQUAL
12247: IFFALSE 12257
// kamikazeTrained := true ;
12249: LD_ADDR_EXP 6
12253: PUSH
12254: LD_INT 1
12256: ST_TO_ADDR
// end ;
12257: PPOPN 3
12259: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
12260: LD_VAR 0 1
12264: PPUSH
12265: CALL 74473 0 1
// if un in ruTanks then
12269: LD_VAR 0 1
12273: PUSH
12274: LD_EXP 36
12278: IN
12279: IFFALSE 12342
// ruConstructList := Join ( ruConstructList , [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ) ;
12281: LD_ADDR_EXP 35
12285: PUSH
12286: LD_EXP 35
12290: PPUSH
12291: LD_VAR 0 1
12295: PPUSH
12296: CALL_OW 265
12300: PUSH
12301: LD_VAR 0 1
12305: PPUSH
12306: CALL_OW 262
12310: PUSH
12311: LD_VAR 0 1
12315: PPUSH
12316: CALL_OW 263
12320: PUSH
12321: LD_VAR 0 1
12325: PPUSH
12326: CALL_OW 264
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: PPUSH
12337: CALL 53220 0 2
12341: ST_TO_ADDR
// if un = Schulz then
12342: LD_VAR 0 1
12346: PUSH
12347: LD_EXP 24
12351: EQUAL
12352: IFFALSE 12361
// YouLost ( Schulz ) ;
12354: LD_STRING Schulz
12356: PPUSH
12357: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
12361: LD_VAR 0 1
12365: PUSH
12366: LD_EXP 13
12370: EQUAL
12371: PUSH
12372: LD_VAR 0 1
12376: PPUSH
12377: CALL_OW 255
12381: PUSH
12382: LD_INT 2
12384: EQUAL
12385: AND
12386: IFFALSE 12395
// YouLost ( Heike ) ;
12388: LD_STRING Heike
12390: PPUSH
12391: CALL_OW 104
// end ; end_of_file
12395: PPOPN 1
12397: END
// export function Action ; begin
12398: LD_INT 0
12400: PPUSH
// InGameOn ;
12401: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
12405: LD_INT 1
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: LD_INT 2
12413: PPUSH
12414: LD_INT 32963
12416: NEG
12417: PPUSH
12418: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
12422: LD_INT 1
12424: PPUSH
12425: LD_INT 1
12427: PPUSH
12428: LD_INT 2
12430: PPUSH
12431: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
12435: LD_INT 173
12437: PPUSH
12438: LD_INT 149
12440: PPUSH
12441: CALL_OW 86
// PrepareExtraRussianBase ;
12445: CALL 3364 0 0
// wait ( 0 0$2 ) ;
12449: LD_INT 70
12451: PPUSH
12452: CALL_OW 67
// InGameOff ;
12456: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
12460: LD_STRING M6
12462: PPUSH
12463: CALL_OW 337
// if Count ( UnitFilter ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] , [ f_ok ] ) ) = Count ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] ) then
12467: LD_EXP 14
12471: PUSH
12472: LD_EXP 15
12476: PUSH
12477: LD_EXP 17
12481: PUSH
12482: LD_EXP 18
12486: PUSH
12487: LD_EXP 20
12491: PUSH
12492: LD_EXP 21
12496: PUSH
12497: LD_EXP 22
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: PPUSH
12511: LD_INT 50
12513: PUSH
12514: EMPTY
12515: LIST
12516: PPUSH
12517: CALL_OW 72
12521: PPUSH
12522: CALL 17611 0 1
12526: PUSH
12527: LD_EXP 14
12531: PUSH
12532: LD_EXP 15
12536: PUSH
12537: LD_EXP 17
12541: PUSH
12542: LD_EXP 18
12546: PUSH
12547: LD_EXP 20
12551: PUSH
12552: LD_EXP 21
12556: PUSH
12557: LD_EXP 22
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: PPUSH
12571: CALL 17611 0 1
12575: EQUAL
12576: IFFALSE 12585
// SetAchievement ( ACH_KNIGHT ) ;
12578: LD_STRING ACH_KNIGHT
12580: PPUSH
12581: CALL_OW 543
// SaveForQuickRestart ;
12585: CALL_OW 22
// end ;
12589: LD_VAR 0 1
12593: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
12594: LD_EXP 5
12598: PUSH
12599: LD_EXP 33
12603: PPUSH
12604: CALL_OW 302
12608: AND
12609: PUSH
12610: LD_EXP 13
12614: PPUSH
12615: CALL_OW 302
12619: AND
12620: PUSH
12621: LD_EXP 13
12625: PPUSH
12626: LD_EXP 33
12630: PPUSH
12631: CALL_OW 296
12635: PUSH
12636: LD_INT 9
12638: LESS
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_INT 2
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 91
12652: PUSH
12653: LD_EXP 13
12657: PUSH
12658: LD_INT 7
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 21
12668: PUSH
12669: LD_INT 3
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: OR
12686: AND
12687: IFFALSE 12841
12689: GO 12691
12691: DISABLE
// begin ComExit ( Rolf ) ;
12692: LD_EXP 33
12696: PPUSH
12697: CALL 53618 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
12701: LD_EXP 33
12705: PPUSH
12706: LD_EXP 13
12710: PPUSH
12711: CALL_OW 172
// InGameOn ;
12715: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
12719: LD_EXP 13
12723: PPUSH
12724: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
12728: LD_EXP 33
12732: PPUSH
12733: LD_STRING DRf-Reunion-1
12735: PPUSH
12736: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
12740: LD_EXP 33
12744: PPUSH
12745: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
12749: LD_EXP 13
12753: PPUSH
12754: LD_EXP 33
12758: PPUSH
12759: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
12763: LD_EXP 33
12767: PPUSH
12768: LD_EXP 13
12772: PPUSH
12773: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
12777: LD_EXP 13
12781: PPUSH
12782: LD_STRING DH-Reunion-2
12784: PPUSH
12785: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
12789: LD_EXP 33
12793: PPUSH
12794: LD_STRING DRf-Reunion-3
12796: PPUSH
12797: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
12801: LD_EXP 13
12805: PPUSH
12806: LD_STRING DH-Reunion-4
12808: PPUSH
12809: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
12813: LD_EXP 33
12817: PPUSH
12818: LD_STRING DRf-Reunion-5
12820: PPUSH
12821: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
12825: LD_EXP 13
12829: PPUSH
12830: LD_STRING DH-Reunion-6
12832: PPUSH
12833: CALL_OW 88
// InGameOff ;
12837: CALL_OW 9
// end ;
12841: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
12842: LD_EXP 5
12846: NOT
12847: PUSH
12848: LD_INT 22
12850: PUSH
12851: LD_INT 2
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 91
12860: PUSH
12861: LD_EXP 24
12865: PUSH
12866: LD_INT 10
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 21
12876: PUSH
12877: LD_INT 3
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: PPUSH
12889: CALL_OW 69
12893: AND
12894: IFFALSE 13681
12896: GO 12898
12898: DISABLE
// begin InGameOn ;
12899: CALL_OW 8
// ComExit ( Schulz ) ;
12903: LD_EXP 24
12907: PPUSH
12908: CALL 53618 0 1
// CenterNowOnUnits ( Schulz ) ;
12912: LD_EXP 24
12916: PPUSH
12917: CALL_OW 87
// wait ( 0 0$0.3 ) ;
12921: LD_INT 10
12923: PPUSH
12924: CALL_OW 67
// DialogueOn ;
12928: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
12932: LD_EXP 24
12936: PPUSH
12937: LD_STRING DL-Def-1
12939: PPUSH
12940: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
12944: LD_EXP 24
12948: PPUSH
12949: LD_STRING DL-Def-2
12951: PPUSH
12952: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
12956: LD_EXP 24
12960: PPUSH
12961: LD_STRING DL-Def-3
12963: PPUSH
12964: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
12968: LD_EXP 25
12972: PPUSH
12973: CALL_OW 302
12977: PUSH
12978: LD_EXP 23
12982: PPUSH
12983: CALL_OW 302
12987: AND
12988: IFFALSE 13335
// begin Say ( Basim , DBs-Def-4 ) ;
12990: LD_EXP 25
12994: PPUSH
12995: LD_STRING DBs-Def-4
12997: PPUSH
12998: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13002: LD_EXP 25
13006: PPUSH
13007: LD_STRING DBs-Def-5
13009: PPUSH
13010: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
13014: LD_EXP 23
13018: PPUSH
13019: LD_STRING DA-Def-6
13021: PPUSH
13022: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
13026: LD_EXP 25
13030: PPUSH
13031: LD_STRING DBs-Def-7
13033: PPUSH
13034: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
13038: LD_EXP 23
13042: PPUSH
13043: LD_STRING DA-Def-8
13045: PPUSH
13046: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
13050: LD_EXP 23
13054: PPUSH
13055: LD_STRING DA-Def-9
13057: PPUSH
13058: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
13062: LD_EXP 25
13066: PPUSH
13067: LD_STRING DBs-Def-10
13069: PPUSH
13070: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
13074: LD_EXP 23
13078: PPUSH
13079: LD_STRING DA-Def-11
13081: PPUSH
13082: CALL_OW 88
// if Query ( QTech ) = 1 then
13086: LD_STRING QTech
13088: PPUSH
13089: CALL_OW 97
13093: PUSH
13094: LD_INT 1
13096: EQUAL
13097: IFFALSE 13205
// begin Say ( Schulz , DL-Tech-1 ) ;
13099: LD_EXP 24
13103: PPUSH
13104: LD_STRING DL-Tech-1
13106: PPUSH
13107: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
13111: LD_EXP 24
13115: PPUSH
13116: LD_STRING DL-Tech-2
13118: PPUSH
13119: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
13123: LD_EXP 23
13127: PPUSH
13128: LD_STRING DA-Tech-3
13130: PPUSH
13131: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
13135: LD_EXP 18
13139: PPUSH
13140: LD_STRING DK-Tech-4
13142: PPUSH
13143: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
13147: LD_EXP 18
13151: PPUSH
13152: LD_STRING DK-Tech-5
13154: PPUSH
13155: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
13159: LD_EXP 25
13163: PPUSH
13164: LD_STRING DBs-Tech-6
13166: PPUSH
13167: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
13171: LD_EXP 18
13175: PPUSH
13176: LD_STRING DK-Tech-7
13178: PPUSH
13179: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
13183: LD_INT 3
13185: PPUSH
13186: LD_INT 2
13188: PPUSH
13189: LD_INT 1
13191: PPUSH
13192: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
13196: LD_STRING M7a
13198: PPUSH
13199: CALL_OW 604
// end else
13203: GO 13333
// begin Say ( Schulz , DL-Tech-a-1 ) ;
13205: LD_EXP 24
13209: PPUSH
13210: LD_STRING DL-Tech-a-1
13212: PPUSH
13213: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
13217: LD_EXP 24
13221: PPUSH
13222: LD_STRING DL-Tech-a-2
13224: PPUSH
13225: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
13229: LD_EXP 25
13233: PPUSH
13234: LD_STRING DBs-Tech-a-3
13236: PPUSH
13237: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
13241: LD_EXP 18
13245: PPUSH
13246: LD_STRING DK-Tech-a-4
13248: PPUSH
13249: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
13253: LD_EXP 18
13257: PPUSH
13258: LD_STRING DK-Tech-a-5
13260: PPUSH
13261: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
13265: LD_EXP 23
13269: PPUSH
13270: LD_STRING DA-Tech-a-6
13272: PPUSH
13273: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
13277: LD_EXP 23
13281: PPUSH
13282: LD_STRING DA-Tech-a-7
13284: PPUSH
13285: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
13289: LD_EXP 24
13293: PPUSH
13294: LD_STRING DL-Tech-a-8
13296: PPUSH
13297: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
13301: LD_EXP 23
13305: PPUSH
13306: LD_STRING DA-Tech-a-9
13308: PPUSH
13309: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13313: LD_INT 4
13315: PPUSH
13316: LD_INT 2
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
13326: LD_STRING M7b
13328: PPUSH
13329: CALL_OW 604
// end ; end else
13333: GO 13383
// if IsOk ( Basim ) then
13335: LD_EXP 25
13339: PPUSH
13340: CALL_OW 302
13344: IFFALSE 13383
// begin Say ( Basim , DBs-Def-4 ) ;
13346: LD_EXP 25
13350: PPUSH
13351: LD_STRING DBs-Def-4
13353: PPUSH
13354: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
13358: LD_EXP 25
13362: PPUSH
13363: LD_STRING DBs-Def-5
13365: PPUSH
13366: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13370: LD_INT 4
13372: PPUSH
13373: LD_INT 2
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: CALL_OW 322
// end ; DialogueOff ;
13383: CALL_OW 7
// InGameOff ;
13387: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
13391: LD_STRING M7
13393: PPUSH
13394: CALL_OW 337
// playerInBase := true ;
13398: LD_ADDR_EXP 5
13402: PUSH
13403: LD_INT 1
13405: ST_TO_ADDR
// wait ( 0 0$30 ) ;
13406: LD_INT 1050
13408: PPUSH
13409: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13413: LD_INT 35
13415: PPUSH
13416: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) ;
13420: LD_INT 22
13422: PUSH
13423: LD_INT 2
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 50
13432: PUSH
13433: EMPTY
13434: LIST
13435: PUSH
13436: LD_INT 3
13438: PUSH
13439: LD_INT 57
13441: PUSH
13442: EMPTY
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 30
13451: PUSH
13452: LD_INT 30
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 69
13469: IFFALSE 13413
// if IsOk ( Kurt ) then
13471: LD_EXP 22
13475: PPUSH
13476: CALL_OW 302
13480: IFFALSE 13668
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
13482: LD_INT 22
13484: PUSH
13485: LD_INT 2
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 50
13494: PUSH
13495: EMPTY
13496: LIST
13497: PUSH
13498: LD_INT 3
13500: PUSH
13501: LD_INT 57
13503: PUSH
13504: EMPTY
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 30
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: PPUSH
13527: CALL_OW 69
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: PPUSH
13536: CALL_OW 87
// DialogueOn ;
13540: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
13544: LD_EXP 22
13548: PPUSH
13549: LD_STRING DKs-Med-1
13551: PPUSH
13552: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
13556: LD_EXP 22
13560: PPUSH
13561: LD_STRING DKs-Med-2
13563: PPUSH
13564: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
13568: LD_EXP 24
13572: PPUSH
13573: LD_STRING DL-Med-3
13575: PPUSH
13576: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
13580: LD_EXP 24
13584: PPUSH
13585: LD_STRING DL-Med-4
13587: PPUSH
13588: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
13592: LD_EXP 22
13596: PPUSH
13597: LD_STRING DKs-Med-5
13599: PPUSH
13600: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
13604: LD_EXP 22
13608: PPUSH
13609: LD_STRING DKs-Med-6
13611: PPUSH
13612: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
13616: LD_EXP 22
13620: PPUSH
13621: LD_STRING DKs-Med-7
13623: PPUSH
13624: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
13628: LD_EXP 22
13632: PPUSH
13633: LD_STRING DKs-Med-8
13635: PPUSH
13636: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
13640: LD_EXP 24
13644: PPUSH
13645: LD_STRING DL-Med-9
13647: PPUSH
13648: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
13652: LD_EXP 24
13656: PPUSH
13657: LD_STRING DL-Med-10
13659: PPUSH
13660: CALL_OW 88
// DialogueOff ;
13664: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
13668: LD_STRING M8-
13670: PUSH
13671: LD_OWVAR 67
13675: STR
13676: PPUSH
13677: CALL_OW 337
// end ;
13681: END
// every 0 0$1 trigger playerInBase do
13682: LD_EXP 5
13686: IFFALSE 13706
13688: GO 13690
13690: DISABLE
// begin enable ;
13691: ENABLE
// missionTime := missionTime + 0 0$1 ;
13692: LD_ADDR_EXP 9
13696: PUSH
13697: LD_EXP 9
13701: PUSH
13702: LD_INT 35
13704: PLUS
13705: ST_TO_ADDR
// end ;
13706: END
// every 0 0$2 trigger playerInBase and apeDriver do
13707: LD_EXP 5
13711: PUSH
13712: LD_EXP 8
13716: AND
13717: IFFALSE 14114
13719: GO 13721
13721: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
13722: LD_STRING M7a_out
13724: PPUSH
13725: CALL_OW 337
// wait ( 0 0$2 ) ;
13729: LD_INT 70
13731: PPUSH
13732: CALL_OW 67
// DialogueOn ;
13736: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
13740: LD_INT 22
13742: PUSH
13743: LD_INT 2
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 33
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PPUSH
13764: CALL_OW 69
13768: PUSH
13769: LD_INT 1
13771: ARRAY
13772: PPUSH
13773: CALL_OW 87
// if IsOk ( Mia ) then
13777: LD_EXP 27
13781: PPUSH
13782: CALL_OW 302
13786: IFFALSE 13812
// begin Say ( Mia , DMm-Apedrive-1 ) ;
13788: LD_EXP 27
13792: PPUSH
13793: LD_STRING DMm-Apedrive-1
13795: PPUSH
13796: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
13800: LD_EXP 15
13804: PPUSH
13805: LD_STRING DM-Apedrive-2
13807: PPUSH
13808: CALL_OW 88
// end ; if IsOk ( Jenna ) then
13812: LD_EXP 29
13816: PPUSH
13817: CALL_OW 302
13821: IFFALSE 14110
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
13823: LD_EXP 29
13827: PPUSH
13828: LD_STRING DJm-Apedrive-3
13830: PPUSH
13831: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
13835: LD_EXP 29
13839: PPUSH
13840: LD_STRING DJm-Apedrive-4
13842: PPUSH
13843: CALL_OW 88
// if IsOk ( Basim ) then
13847: LD_EXP 25
13851: PPUSH
13852: CALL_OW 302
13856: IFFALSE 14110
// begin Say ( Basim , DBs-Apedrive-5 ) ;
13858: LD_EXP 25
13862: PPUSH
13863: LD_STRING DBs-Apedrive-5
13865: PPUSH
13866: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
13870: LD_EXP 25
13874: PPUSH
13875: LD_STRING DBs-Apedrive-6
13877: PPUSH
13878: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
13882: LD_EXP 29
13886: PPUSH
13887: LD_STRING DJm-Apedrive-7
13889: PPUSH
13890: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
13894: LD_EXP 25
13898: PPUSH
13899: LD_STRING DBs-Apedrive-8
13901: PPUSH
13902: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
13906: LD_EXP 29
13910: PPUSH
13911: LD_STRING DJm-Apedrive-9
13913: PPUSH
13914: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
13918: LD_EXP 25
13922: PPUSH
13923: LD_STRING DBs-Apedrive-10
13925: PPUSH
13926: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
13930: LD_EXP 29
13934: PPUSH
13935: LD_STRING DJm-Apedrive-11
13937: PPUSH
13938: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
13942: LD_EXP 18
13946: PPUSH
13947: LD_STRING DK-Apedrive-12
13949: PPUSH
13950: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
13954: LD_EXP 29
13958: PPUSH
13959: LD_STRING DJm-Apedrive-13
13961: PPUSH
13962: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
13966: LD_EXP 29
13970: PPUSH
13971: LD_STRING DJm-Apedrive-14
13973: PPUSH
13974: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
13978: LD_EXP 29
13982: PPUSH
13983: LD_STRING DJm-Apedrive-15
13985: PPUSH
13986: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
13990: LD_EXP 29
13994: PPUSH
13995: LD_STRING DJm-Apedrive-16
13997: PPUSH
13998: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
14002: LD_EXP 27
14006: PPUSH
14007: LD_STRING DMm-Apedrive-17
14009: PPUSH
14010: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
14014: LD_EXP 27
14018: PPUSH
14019: LD_STRING DMm-Apedrive-18
14021: PPUSH
14022: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
14026: LD_EXP 27
14030: PPUSH
14031: LD_STRING DMm-Apedrive-19
14033: PPUSH
14034: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
14038: LD_EXP 27
14042: PPUSH
14043: LD_STRING DMm-Apedrive-20
14045: PPUSH
14046: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
14050: LD_EXP 18
14054: PPUSH
14055: LD_STRING DK-Apedrive-21
14057: PPUSH
14058: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
14062: LD_EXP 18
14066: PPUSH
14067: LD_STRING DK-Apedrive-22
14069: PPUSH
14070: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
14074: LD_EXP 13
14078: PPUSH
14079: LD_STRING DH-Apedrive-23
14081: PPUSH
14082: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
14086: LD_EXP 26
14090: PPUSH
14091: LD_STRING DLt-Apedrive-24
14093: PPUSH
14094: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
14098: LD_EXP 26
14102: PPUSH
14103: LD_STRING DLt-Apedrive-25
14105: PPUSH
14106: CALL_OW 88
// end ; end ; DialogueOff ;
14110: CALL_OW 7
// end ;
14114: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
14115: LD_EXP 5
14119: PUSH
14120: LD_EXP 6
14124: AND
14125: IFFALSE 14137
14127: GO 14129
14129: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
14130: LD_STRING M7b_out
14132: PPUSH
14133: CALL_OW 337
14137: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
14138: LD_EXP 5
14142: PUSH
14143: LD_INT 22
14145: PUSH
14146: LD_INT 2
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: LD_INT 30
14155: PUSH
14156: LD_INT 3
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 3
14165: PUSH
14166: LD_INT 58
14168: PUSH
14169: EMPTY
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: PPUSH
14181: CALL_OW 69
14185: AND
14186: PUSH
14187: LD_EXP 13
14191: PPUSH
14192: CALL_OW 302
14196: AND
14197: PUSH
14198: LD_EXP 24
14202: PPUSH
14203: CALL_OW 302
14207: AND
14208: IFFALSE 14381
14210: GO 14212
14212: DISABLE
// begin DialogueOn ;
14213: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
14217: LD_EXP 24
14221: PPUSH
14222: LD_STRING DL-Mort-1
14224: PPUSH
14225: CALL_OW 88
// if IsOk ( Markov ) then
14229: LD_EXP 20
14233: PPUSH
14234: CALL_OW 302
14238: IFFALSE 14291
// begin Say ( Heike , DH-Mort-2 ) ;
14240: LD_EXP 13
14244: PPUSH
14245: LD_STRING DH-Mort-2
14247: PPUSH
14248: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
14252: LD_EXP 20
14256: PPUSH
14257: LD_STRING DMar-Mort-3
14259: PPUSH
14260: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
14264: LD_EXP 20
14268: PPUSH
14269: LD_STRING DMar-Mort-4
14271: PPUSH
14272: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14276: LD_INT 88
14278: PPUSH
14279: LD_INT 2
14281: PPUSH
14282: LD_INT 1
14284: PPUSH
14285: CALL_OW 322
// end else
14289: GO 14377
// if IsOk ( Olaf ) then
14291: LD_EXP 21
14295: PPUSH
14296: CALL_OW 302
14300: IFFALSE 14353
// begin Say ( Heike , DH-Mort-a-2 ) ;
14302: LD_EXP 13
14306: PPUSH
14307: LD_STRING DH-Mort-a-2
14309: PPUSH
14310: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
14314: LD_EXP 21
14318: PPUSH
14319: LD_STRING DO-Mort-a-3
14321: PPUSH
14322: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
14326: LD_EXP 21
14330: PPUSH
14331: LD_STRING DO-Mort-a-4
14333: PPUSH
14334: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
14338: LD_INT 88
14340: PPUSH
14341: LD_INT 2
14343: PPUSH
14344: LD_INT 1
14346: PPUSH
14347: CALL_OW 322
// end else
14351: GO 14377
// begin Say ( Heike , DH-Mort-a-5 ) ;
14353: LD_EXP 13
14357: PPUSH
14358: LD_STRING DH-Mort-a-5
14360: PPUSH
14361: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
14365: LD_EXP 13
14369: PPUSH
14370: LD_STRING DH-Mort-a-6
14372: PPUSH
14373: CALL_OW 88
// end ; DialogueOff ;
14377: CALL_OW 7
// end ;
14381: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
14382: LD_EXP 18
14386: PPUSH
14387: CALL_OW 256
14391: PUSH
14392: LD_INT 10
14394: LESS
14395: IFFALSE 14497
14397: GO 14399
14399: DISABLE
// begin DialogueOn ;
14400: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14404: LD_EXP 18
14408: PPUSH
14409: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
14413: LD_EXP 18
14417: PPUSH
14418: LD_STRING DK-Death-1
14420: PPUSH
14421: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
14425: LD_EXP 18
14429: PPUSH
14430: LD_STRING DK-Death-2
14432: PPUSH
14433: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
14437: LD_EXP 18
14441: PPUSH
14442: LD_STRING DK-Death-3
14444: PPUSH
14445: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
14449: LD_EXP 13
14453: PPUSH
14454: LD_STRING DH-Death-4
14456: PPUSH
14457: CALL_OW 88
// if IsOk ( Markov ) then
14461: LD_EXP 20
14465: PPUSH
14466: CALL_OW 302
14470: IFFALSE 14484
// Say ( Markov , DMar-Death-5 ) ;
14472: LD_EXP 20
14476: PPUSH
14477: LD_STRING DMar-Death-5
14479: PPUSH
14480: CALL_OW 88
// DialogueOff ;
14484: CALL_OW 7
// KillUnit ( Kaia ) ;
14488: LD_EXP 18
14492: PPUSH
14493: CALL_OW 66
// end ;
14497: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib ;
14498: LD_EXP 10
14502: PUSH
14503: LD_INT 81
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 50
14515: PUSH
14516: EMPTY
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: NOT
14528: AND
14529: IFFALSE 15377
14531: GO 14533
14533: DISABLE
14534: LD_INT 0
14536: PPUSH
14537: PPUSH
// begin InGameOn ;
14538: CALL_OW 8
// DialogueOn ;
14542: CALL_OW 6
// if time09 + time09c + tick < 80 80$00 then
14546: LD_EXP 3
14550: PUSH
14551: LD_EXP 4
14555: PLUS
14556: PUSH
14557: LD_OWVAR 1
14561: PLUS
14562: PUSH
14563: LD_INT 168000
14565: LESS
14566: IFFALSE 14575
// SetAchievement ( ACH_HSPEED_9 ) ;
14568: LD_STRING ACH_HSPEED_9
14570: PPUSH
14571: CALL_OW 543
// CenterOnNow ( Schulz ) ;
14575: LD_EXP 24
14579: PPUSH
14580: CALL 57323 0 1
// dwait ( 0 0$0.3 ) ;
14584: LD_INT 10
14586: PPUSH
14587: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
14591: LD_EXP 24
14595: PPUSH
14596: LD_STRING DL-End-1
14598: PPUSH
14599: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
14603: LD_EXP 13
14607: PPUSH
14608: LD_STRING DH-End-2
14610: PPUSH
14611: CALL_OW 88
// if IsOk ( Kaia ) then
14615: LD_EXP 18
14619: PPUSH
14620: CALL_OW 302
14624: IFFALSE 14686
// begin SaveCharacters ( Kaia , 09_Kaia ) ;
14626: LD_EXP 18
14630: PPUSH
14631: LD_STRING 09_Kaia
14633: PPUSH
14634: CALL_OW 38
// Say ( Kaia , DK-End-a-3 ) ;
14638: LD_EXP 18
14642: PPUSH
14643: LD_STRING DK-End-a-3
14645: PPUSH
14646: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
14650: LD_EXP 18
14654: PPUSH
14655: LD_STRING DK-End-a-4
14657: PPUSH
14658: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
14662: LD_EXP 24
14666: PPUSH
14667: LD_STRING DL-End-a-5
14669: PPUSH
14670: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
14674: LD_EXP 24
14678: PPUSH
14679: LD_STRING DL-End-a-6
14681: PPUSH
14682: CALL_OW 88
// end ; SaveCharacters ( Heike , 09_Heike ) ;
14686: LD_EXP 13
14690: PPUSH
14691: LD_STRING 09_Heike
14693: PPUSH
14694: CALL_OW 38
// SaveCharacters ( Schulz , 09_Schulz ) ;
14698: LD_EXP 24
14702: PPUSH
14703: LD_STRING 09_Schulz
14705: PPUSH
14706: CALL_OW 38
// if IsOk ( Basim ) then
14710: LD_EXP 25
14714: PPUSH
14715: CALL_OW 302
14719: IFFALSE 14733
// SaveCharacters ( Basim , 09_Basim ) ;
14721: LD_EXP 25
14725: PPUSH
14726: LD_STRING 09_Basim
14728: PPUSH
14729: CALL_OW 38
// if IsOk ( Givi ) then
14733: LD_EXP 14
14737: PPUSH
14738: CALL_OW 302
14742: IFFALSE 14756
// SaveCharacters ( Givi , 09_Givi ) ;
14744: LD_EXP 14
14748: PPUSH
14749: LD_STRING 09_Givi
14751: PPUSH
14752: CALL_OW 38
// if IsOk ( Mike ) then
14756: LD_EXP 15
14760: PPUSH
14761: CALL_OW 302
14765: IFFALSE 14779
// SaveCharacters ( Mike , 09_Mike ) ;
14767: LD_EXP 15
14771: PPUSH
14772: LD_STRING 09_Mike
14774: PPUSH
14775: CALL_OW 38
// if IsOk ( Ibrahim ) then
14779: LD_EXP 16
14783: PPUSH
14784: CALL_OW 302
14788: IFFALSE 14802
// SaveCharacters ( Ibrahim , 09_Ibrahim ) ;
14790: LD_EXP 16
14794: PPUSH
14795: LD_STRING 09_Ibrahim
14797: PPUSH
14798: CALL_OW 38
// if IsOk ( Kamil ) then
14802: LD_EXP 17
14806: PPUSH
14807: CALL_OW 302
14811: IFFALSE 14825
// SaveCharacters ( Kamil , 09_Kamil ) ;
14813: LD_EXP 17
14817: PPUSH
14818: LD_STRING 09_Kamil
14820: PPUSH
14821: CALL_OW 38
// if IsOk ( Sophia ) then
14825: LD_EXP 19
14829: PPUSH
14830: CALL_OW 302
14834: IFFALSE 14848
// SaveCharacters ( Sophia , 09_Sophia ) ;
14836: LD_EXP 19
14840: PPUSH
14841: LD_STRING 09_Sophia
14843: PPUSH
14844: CALL_OW 38
// if IsOk ( Markov ) then
14848: LD_EXP 20
14852: PPUSH
14853: CALL_OW 302
14857: IFFALSE 14871
// SaveCharacters ( Markov , 09_Markov ) ;
14859: LD_EXP 20
14863: PPUSH
14864: LD_STRING 09_Markov
14866: PPUSH
14867: CALL_OW 38
// if IsOk ( Olaf ) then
14871: LD_EXP 21
14875: PPUSH
14876: CALL_OW 302
14880: IFFALSE 14894
// SaveCharacters ( Olaf , 09_Olaf ) ;
14882: LD_EXP 21
14886: PPUSH
14887: LD_STRING 09_Olaf
14889: PPUSH
14890: CALL_OW 38
// if IsOk ( Kurt ) then
14894: LD_EXP 22
14898: PPUSH
14899: CALL_OW 302
14903: IFFALSE 14917
// SaveCharacters ( Kurt , 09_Kurt ) ;
14905: LD_EXP 22
14909: PPUSH
14910: LD_STRING 09_Kurt
14912: PPUSH
14913: CALL_OW 38
// if IsOk ( Aviradze ) then
14917: LD_EXP 23
14921: PPUSH
14922: CALL_OW 302
14926: IFFALSE 14940
// SaveCharacters ( Aviradze , 09_Aviradze ) ;
14928: LD_EXP 23
14932: PPUSH
14933: LD_STRING 09_Aviradze
14935: PPUSH
14936: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09_heikeSecondSquad ) ;
14940: LD_EXP 30
14944: PPUSH
14945: LD_INT 50
14947: PUSH
14948: EMPTY
14949: LIST
14950: PPUSH
14951: CALL_OW 72
14955: PPUSH
14956: LD_STRING 09_heikeSecondSquad
14958: PPUSH
14959: CALL_OW 38
// if GetTech ( tech_apeBrain , 2 ) = state_researched then
14963: LD_INT 4
14965: PPUSH
14966: LD_INT 2
14968: PPUSH
14969: CALL_OW 321
14973: PUSH
14974: LD_INT 2
14976: EQUAL
14977: IFFALSE 14989
// SaveVariable ( 1 , 09_ApeBrain ) ;
14979: LD_INT 1
14981: PPUSH
14982: LD_STRING 09_ApeBrain
14984: PPUSH
14985: CALL_OW 39
// if GetTech ( tech_apeNeural , 2 ) = state_researched then
14989: LD_INT 3
14991: PPUSH
14992: LD_INT 2
14994: PPUSH
14995: CALL_OW 321
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: IFFALSE 15015
// SaveVariable ( 1 , 09_ApeNeural ) ;
15005: LD_INT 1
15007: PPUSH
15008: LD_STRING 09_ApeNeural
15010: PPUSH
15011: CALL_OW 39
// sib := 0 ;
15015: LD_ADDR_VAR 0 2
15019: PUSH
15020: LD_INT 0
15022: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
15023: LD_ADDR_VAR 0 1
15027: PUSH
15028: LD_INT 22
15030: PUSH
15031: LD_INT 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: LD_INT 30
15043: PUSH
15044: LD_INT 0
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 30
15053: PUSH
15054: LD_INT 1
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PPUSH
15070: CALL_OW 69
15074: PUSH
15075: FOR_IN
15076: IFFALSE 15109
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
15078: LD_ADDR_VAR 0 2
15082: PUSH
15083: LD_VAR 0 2
15087: PUSH
15088: LD_VAR 0 1
15092: PPUSH
15093: CALL_OW 274
15097: PPUSH
15098: LD_INT 3
15100: PPUSH
15101: CALL_OW 275
15105: PLUS
15106: ST_TO_ADDR
15107: GO 15075
15109: POP
15110: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
15111: LD_ADDR_VAR 0 1
15115: PUSH
15116: LD_INT 22
15118: PUSH
15119: LD_INT 2
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 2
15128: PUSH
15129: LD_INT 34
15131: PUSH
15132: LD_INT 32
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 34
15141: PUSH
15142: LD_INT 51
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: PUSH
15163: FOR_IN
15164: IFFALSE 15192
// sib := sib + GetCargo ( i , mat_siberit ) ;
15166: LD_ADDR_VAR 0 2
15170: PUSH
15171: LD_VAR 0 2
15175: PUSH
15176: LD_VAR 0 1
15180: PPUSH
15181: LD_INT 3
15183: PPUSH
15184: CALL_OW 289
15188: PLUS
15189: ST_TO_ADDR
15190: GO 15163
15192: POP
15193: POP
// if sib >= sibToCollect then
15194: LD_VAR 0 2
15198: PUSH
15199: LD_EXP 7
15203: GREATEREQUAL
15204: IFFALSE 15218
// AddMedal ( med1 , 1 ) else
15206: LD_STRING med1
15208: PPUSH
15209: LD_INT 1
15211: PPUSH
15212: CALL_OW 101
15216: GO 15229
// AddMedal ( med1 , - 1 ) ;
15218: LD_STRING med1
15220: PPUSH
15221: LD_INT 1
15223: NEG
15224: PPUSH
15225: CALL_OW 101
// if apeDriver or kamikazeTrained then
15229: LD_EXP 8
15233: PUSH
15234: LD_EXP 6
15238: OR
15239: IFFALSE 15253
// AddMedal ( med2 , 1 ) else
15241: LD_STRING med2
15243: PPUSH
15244: LD_INT 1
15246: PPUSH
15247: CALL_OW 101
15251: GO 15264
// AddMedal ( med2 , - 1 ) ;
15253: LD_STRING med2
15255: PPUSH
15256: LD_INT 1
15258: NEG
15259: PPUSH
15260: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
15264: LD_EXP 14
15268: PUSH
15269: LD_EXP 15
15273: PUSH
15274: LD_EXP 16
15278: PUSH
15279: LD_EXP 17
15283: PUSH
15284: LD_EXP 18
15288: PUSH
15289: LD_EXP 19
15293: PUSH
15294: LD_EXP 20
15298: PUSH
15299: LD_EXP 21
15303: PUSH
15304: LD_EXP 22
15308: PUSH
15309: LD_EXP 23
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: PPUSH
15326: LD_INT 50
15328: PUSH
15329: EMPTY
15330: LIST
15331: PPUSH
15332: CALL_OW 72
15336: NOT
15337: IFFALSE 15352
// AddMedal ( med3 , - 1 ) else
15339: LD_STRING med3
15341: PPUSH
15342: LD_INT 1
15344: NEG
15345: PPUSH
15346: CALL_OW 101
15350: GO 15362
// AddMedal ( med3 , 1 ) ;
15352: LD_STRING med3
15354: PPUSH
15355: LD_INT 1
15357: PPUSH
15358: CALL_OW 101
// GiveMedals ( MAIN ) ;
15362: LD_STRING MAIN
15364: PPUSH
15365: CALL_OW 102
// YouWin ;
15369: CALL_OW 103
// DialogueOff ;
15373: CALL_OW 7
// end ; end_of_file
15377: PPOPN 2
15379: END
// every 0 0$25 + 0 0$20 trigger playerInBase do var i , tmp ;
15380: LD_EXP 5
15384: IFFALSE 15485
15386: GO 15388
15388: DISABLE
15389: LD_INT 0
15391: PPUSH
15392: PPUSH
// begin enable ;
15393: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
15394: LD_ADDR_VAR 0 2
15398: PUSH
15399: LD_INT 9
15401: PUSH
15402: LD_INT 10
15404: PUSH
15405: LD_INT 11
15407: PUSH
15408: LD_INT 12
15410: PUSH
15411: LD_INT 13
15413: PUSH
15414: LD_INT 14
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
15425: LD_ADDR_VAR 0 1
15429: PUSH
15430: LD_VAR 0 2
15434: PUSH
15435: LD_INT 1
15437: PPUSH
15438: LD_INT 6
15440: PPUSH
15441: CALL_OW 12
15445: ARRAY
15446: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 16 then
15447: LD_VAR 0 1
15451: PPUSH
15452: CALL_OW 435
15456: PUSH
15457: LD_INT 16
15459: LESS
15460: IFFALSE 15485
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
15462: LD_INT 1
15464: PPUSH
15465: LD_INT 5
15467: PPUSH
15468: CALL_OW 12
15472: PPUSH
15473: LD_VAR 0 1
15477: PPUSH
15478: LD_INT 1
15480: PPUSH
15481: CALL_OW 55
// end ; end_of_file
15485: PPOPN 2
15487: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15488: LD_INT 0
15490: PPUSH
15491: PPUSH
// if exist_mode then
15492: LD_VAR 0 2
15496: IFFALSE 15542
// begin unit := CreateCharacter ( prefix & ident ) ;
15498: LD_ADDR_VAR 0 5
15502: PUSH
15503: LD_VAR 0 3
15507: PUSH
15508: LD_VAR 0 1
15512: STR
15513: PPUSH
15514: CALL_OW 34
15518: ST_TO_ADDR
// if unit then
15519: LD_VAR 0 5
15523: IFFALSE 15540
// DeleteCharacters ( prefix & ident ) ;
15525: LD_VAR 0 3
15529: PUSH
15530: LD_VAR 0 1
15534: STR
15535: PPUSH
15536: CALL_OW 40
// end else
15540: GO 15557
// unit := NewCharacter ( ident ) ;
15542: LD_ADDR_VAR 0 5
15546: PUSH
15547: LD_VAR 0 1
15551: PPUSH
15552: CALL_OW 25
15556: ST_TO_ADDR
// result := unit ;
15557: LD_ADDR_VAR 0 4
15561: PUSH
15562: LD_VAR 0 5
15566: ST_TO_ADDR
// end ;
15567: LD_VAR 0 4
15571: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15572: LD_INT 0
15574: PPUSH
15575: PPUSH
// if not side or not nation then
15576: LD_VAR 0 1
15580: NOT
15581: PUSH
15582: LD_VAR 0 2
15586: NOT
15587: OR
15588: IFFALSE 15592
// exit ;
15590: GO 16360
// case nation of nation_american :
15592: LD_VAR 0 2
15596: PUSH
15597: LD_INT 1
15599: DOUBLE
15600: EQUAL
15601: IFTRUE 15605
15603: GO 15819
15605: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15606: LD_ADDR_VAR 0 4
15610: PUSH
15611: LD_INT 35
15613: PUSH
15614: LD_INT 45
15616: PUSH
15617: LD_INT 46
15619: PUSH
15620: LD_INT 47
15622: PUSH
15623: LD_INT 82
15625: PUSH
15626: LD_INT 83
15628: PUSH
15629: LD_INT 84
15631: PUSH
15632: LD_INT 85
15634: PUSH
15635: LD_INT 86
15637: PUSH
15638: LD_INT 1
15640: PUSH
15641: LD_INT 2
15643: PUSH
15644: LD_INT 6
15646: PUSH
15647: LD_INT 15
15649: PUSH
15650: LD_INT 16
15652: PUSH
15653: LD_INT 7
15655: PUSH
15656: LD_INT 12
15658: PUSH
15659: LD_INT 13
15661: PUSH
15662: LD_INT 10
15664: PUSH
15665: LD_INT 14
15667: PUSH
15668: LD_INT 20
15670: PUSH
15671: LD_INT 21
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_INT 25
15679: PUSH
15680: LD_INT 32
15682: PUSH
15683: LD_INT 27
15685: PUSH
15686: LD_INT 36
15688: PUSH
15689: LD_INT 69
15691: PUSH
15692: LD_INT 39
15694: PUSH
15695: LD_INT 34
15697: PUSH
15698: LD_INT 40
15700: PUSH
15701: LD_INT 48
15703: PUSH
15704: LD_INT 49
15706: PUSH
15707: LD_INT 50
15709: PUSH
15710: LD_INT 51
15712: PUSH
15713: LD_INT 52
15715: PUSH
15716: LD_INT 53
15718: PUSH
15719: LD_INT 54
15721: PUSH
15722: LD_INT 55
15724: PUSH
15725: LD_INT 56
15727: PUSH
15728: LD_INT 57
15730: PUSH
15731: LD_INT 58
15733: PUSH
15734: LD_INT 59
15736: PUSH
15737: LD_INT 60
15739: PUSH
15740: LD_INT 61
15742: PUSH
15743: LD_INT 62
15745: PUSH
15746: LD_INT 80
15748: PUSH
15749: LD_INT 82
15751: PUSH
15752: LD_INT 83
15754: PUSH
15755: LD_INT 84
15757: PUSH
15758: LD_INT 85
15760: PUSH
15761: LD_INT 86
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: ST_TO_ADDR
15817: GO 16284
15819: LD_INT 2
15821: DOUBLE
15822: EQUAL
15823: IFTRUE 15827
15825: GO 16053
15827: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15828: LD_ADDR_VAR 0 4
15832: PUSH
15833: LD_INT 35
15835: PUSH
15836: LD_INT 45
15838: PUSH
15839: LD_INT 46
15841: PUSH
15842: LD_INT 47
15844: PUSH
15845: LD_INT 82
15847: PUSH
15848: LD_INT 83
15850: PUSH
15851: LD_INT 84
15853: PUSH
15854: LD_INT 85
15856: PUSH
15857: LD_INT 87
15859: PUSH
15860: LD_INT 70
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: LD_INT 11
15868: PUSH
15869: LD_INT 3
15871: PUSH
15872: LD_INT 4
15874: PUSH
15875: LD_INT 5
15877: PUSH
15878: LD_INT 6
15880: PUSH
15881: LD_INT 15
15883: PUSH
15884: LD_INT 18
15886: PUSH
15887: LD_INT 7
15889: PUSH
15890: LD_INT 17
15892: PUSH
15893: LD_INT 8
15895: PUSH
15896: LD_INT 20
15898: PUSH
15899: LD_INT 21
15901: PUSH
15902: LD_INT 22
15904: PUSH
15905: LD_INT 72
15907: PUSH
15908: LD_INT 26
15910: PUSH
15911: LD_INT 69
15913: PUSH
15914: LD_INT 39
15916: PUSH
15917: LD_INT 40
15919: PUSH
15920: LD_INT 41
15922: PUSH
15923: LD_INT 42
15925: PUSH
15926: LD_INT 43
15928: PUSH
15929: LD_INT 48
15931: PUSH
15932: LD_INT 49
15934: PUSH
15935: LD_INT 50
15937: PUSH
15938: LD_INT 51
15940: PUSH
15941: LD_INT 52
15943: PUSH
15944: LD_INT 53
15946: PUSH
15947: LD_INT 54
15949: PUSH
15950: LD_INT 55
15952: PUSH
15953: LD_INT 56
15955: PUSH
15956: LD_INT 60
15958: PUSH
15959: LD_INT 61
15961: PUSH
15962: LD_INT 62
15964: PUSH
15965: LD_INT 66
15967: PUSH
15968: LD_INT 67
15970: PUSH
15971: LD_INT 68
15973: PUSH
15974: LD_INT 81
15976: PUSH
15977: LD_INT 82
15979: PUSH
15980: LD_INT 83
15982: PUSH
15983: LD_INT 84
15985: PUSH
15986: LD_INT 85
15988: PUSH
15989: LD_INT 87
15991: PUSH
15992: LD_INT 88
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: ST_TO_ADDR
16051: GO 16284
16053: LD_INT 3
16055: DOUBLE
16056: EQUAL
16057: IFTRUE 16061
16059: GO 16283
16061: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16062: LD_ADDR_VAR 0 4
16066: PUSH
16067: LD_INT 46
16069: PUSH
16070: LD_INT 47
16072: PUSH
16073: LD_INT 1
16075: PUSH
16076: LD_INT 2
16078: PUSH
16079: LD_INT 82
16081: PUSH
16082: LD_INT 83
16084: PUSH
16085: LD_INT 84
16087: PUSH
16088: LD_INT 85
16090: PUSH
16091: LD_INT 86
16093: PUSH
16094: LD_INT 11
16096: PUSH
16097: LD_INT 9
16099: PUSH
16100: LD_INT 20
16102: PUSH
16103: LD_INT 19
16105: PUSH
16106: LD_INT 21
16108: PUSH
16109: LD_INT 24
16111: PUSH
16112: LD_INT 22
16114: PUSH
16115: LD_INT 25
16117: PUSH
16118: LD_INT 28
16120: PUSH
16121: LD_INT 29
16123: PUSH
16124: LD_INT 30
16126: PUSH
16127: LD_INT 31
16129: PUSH
16130: LD_INT 37
16132: PUSH
16133: LD_INT 38
16135: PUSH
16136: LD_INT 32
16138: PUSH
16139: LD_INT 27
16141: PUSH
16142: LD_INT 33
16144: PUSH
16145: LD_INT 69
16147: PUSH
16148: LD_INT 39
16150: PUSH
16151: LD_INT 34
16153: PUSH
16154: LD_INT 40
16156: PUSH
16157: LD_INT 71
16159: PUSH
16160: LD_INT 23
16162: PUSH
16163: LD_INT 44
16165: PUSH
16166: LD_INT 48
16168: PUSH
16169: LD_INT 49
16171: PUSH
16172: LD_INT 50
16174: PUSH
16175: LD_INT 51
16177: PUSH
16178: LD_INT 52
16180: PUSH
16181: LD_INT 53
16183: PUSH
16184: LD_INT 54
16186: PUSH
16187: LD_INT 55
16189: PUSH
16190: LD_INT 56
16192: PUSH
16193: LD_INT 57
16195: PUSH
16196: LD_INT 58
16198: PUSH
16199: LD_INT 59
16201: PUSH
16202: LD_INT 63
16204: PUSH
16205: LD_INT 64
16207: PUSH
16208: LD_INT 65
16210: PUSH
16211: LD_INT 82
16213: PUSH
16214: LD_INT 83
16216: PUSH
16217: LD_INT 84
16219: PUSH
16220: LD_INT 85
16222: PUSH
16223: LD_INT 86
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: ST_TO_ADDR
16281: GO 16284
16283: POP
// if state > - 1 and state < 3 then
16284: LD_VAR 0 3
16288: PUSH
16289: LD_INT 1
16291: NEG
16292: GREATER
16293: PUSH
16294: LD_VAR 0 3
16298: PUSH
16299: LD_INT 3
16301: LESS
16302: AND
16303: IFFALSE 16360
// for i in result do
16305: LD_ADDR_VAR 0 5
16309: PUSH
16310: LD_VAR 0 4
16314: PUSH
16315: FOR_IN
16316: IFFALSE 16358
// if GetTech ( i , side ) <> state then
16318: LD_VAR 0 5
16322: PPUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 321
16332: PUSH
16333: LD_VAR 0 3
16337: NONEQUAL
16338: IFFALSE 16356
// result := result diff i ;
16340: LD_ADDR_VAR 0 4
16344: PUSH
16345: LD_VAR 0 4
16349: PUSH
16350: LD_VAR 0 5
16354: DIFF
16355: ST_TO_ADDR
16356: GO 16315
16358: POP
16359: POP
// end ;
16360: LD_VAR 0 4
16364: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16365: LD_INT 0
16367: PPUSH
16368: PPUSH
16369: PPUSH
// result := true ;
16370: LD_ADDR_VAR 0 3
16374: PUSH
16375: LD_INT 1
16377: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16378: LD_ADDR_VAR 0 5
16382: PUSH
16383: LD_VAR 0 2
16387: PPUSH
16388: CALL_OW 480
16392: ST_TO_ADDR
// if not tmp then
16393: LD_VAR 0 5
16397: NOT
16398: IFFALSE 16402
// exit ;
16400: GO 16451
// for i in tmp do
16402: LD_ADDR_VAR 0 4
16406: PUSH
16407: LD_VAR 0 5
16411: PUSH
16412: FOR_IN
16413: IFFALSE 16449
// if GetTech ( i , side ) <> state_researched then
16415: LD_VAR 0 4
16419: PPUSH
16420: LD_VAR 0 1
16424: PPUSH
16425: CALL_OW 321
16429: PUSH
16430: LD_INT 2
16432: NONEQUAL
16433: IFFALSE 16447
// begin result := false ;
16435: LD_ADDR_VAR 0 3
16439: PUSH
16440: LD_INT 0
16442: ST_TO_ADDR
// exit ;
16443: POP
16444: POP
16445: GO 16451
// end ;
16447: GO 16412
16449: POP
16450: POP
// end ;
16451: LD_VAR 0 3
16455: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16456: LD_INT 0
16458: PPUSH
16459: PPUSH
16460: PPUSH
16461: PPUSH
16462: PPUSH
16463: PPUSH
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
16468: PPUSH
16469: PPUSH
16470: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16471: LD_VAR 0 1
16475: NOT
16476: PUSH
16477: LD_VAR 0 1
16481: PPUSH
16482: CALL_OW 257
16486: PUSH
16487: LD_INT 9
16489: NONEQUAL
16490: OR
16491: IFFALSE 16495
// exit ;
16493: GO 17068
// side := GetSide ( unit ) ;
16495: LD_ADDR_VAR 0 9
16499: PUSH
16500: LD_VAR 0 1
16504: PPUSH
16505: CALL_OW 255
16509: ST_TO_ADDR
// tech_space := tech_spacanom ;
16510: LD_ADDR_VAR 0 12
16514: PUSH
16515: LD_INT 29
16517: ST_TO_ADDR
// tech_time := tech_taurad ;
16518: LD_ADDR_VAR 0 13
16522: PUSH
16523: LD_INT 28
16525: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16526: LD_ADDR_VAR 0 11
16530: PUSH
16531: LD_VAR 0 1
16535: PPUSH
16536: CALL_OW 310
16540: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16541: LD_VAR 0 11
16545: PPUSH
16546: CALL_OW 247
16550: PUSH
16551: LD_INT 2
16553: EQUAL
16554: IFFALSE 16558
// exit ;
16556: GO 17068
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16558: LD_ADDR_VAR 0 8
16562: PUSH
16563: LD_INT 81
16565: PUSH
16566: LD_VAR 0 9
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 3
16577: PUSH
16578: LD_INT 21
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PPUSH
16596: CALL_OW 69
16600: ST_TO_ADDR
// if not tmp then
16601: LD_VAR 0 8
16605: NOT
16606: IFFALSE 16610
// exit ;
16608: GO 17068
// if in_unit then
16610: LD_VAR 0 11
16614: IFFALSE 16638
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16616: LD_ADDR_VAR 0 10
16620: PUSH
16621: LD_VAR 0 8
16625: PPUSH
16626: LD_VAR 0 11
16630: PPUSH
16631: CALL_OW 74
16635: ST_TO_ADDR
16636: GO 16658
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16638: LD_ADDR_VAR 0 10
16642: PUSH
16643: LD_VAR 0 8
16647: PPUSH
16648: LD_VAR 0 1
16652: PPUSH
16653: CALL_OW 74
16657: ST_TO_ADDR
// if not enemy then
16658: LD_VAR 0 10
16662: NOT
16663: IFFALSE 16667
// exit ;
16665: GO 17068
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16667: LD_VAR 0 11
16671: PUSH
16672: LD_VAR 0 11
16676: PPUSH
16677: LD_VAR 0 10
16681: PPUSH
16682: CALL_OW 296
16686: PUSH
16687: LD_INT 13
16689: GREATER
16690: AND
16691: PUSH
16692: LD_VAR 0 1
16696: PPUSH
16697: LD_VAR 0 10
16701: PPUSH
16702: CALL_OW 296
16706: PUSH
16707: LD_INT 12
16709: GREATER
16710: OR
16711: IFFALSE 16715
// exit ;
16713: GO 17068
// missile := [ 1 ] ;
16715: LD_ADDR_VAR 0 14
16719: PUSH
16720: LD_INT 1
16722: PUSH
16723: EMPTY
16724: LIST
16725: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16726: LD_VAR 0 9
16730: PPUSH
16731: LD_VAR 0 12
16735: PPUSH
16736: CALL_OW 325
16740: IFFALSE 16769
// missile := Replace ( missile , missile + 1 , 2 ) ;
16742: LD_ADDR_VAR 0 14
16746: PUSH
16747: LD_VAR 0 14
16751: PPUSH
16752: LD_VAR 0 14
16756: PUSH
16757: LD_INT 1
16759: PLUS
16760: PPUSH
16761: LD_INT 2
16763: PPUSH
16764: CALL_OW 1
16768: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16769: LD_VAR 0 9
16773: PPUSH
16774: LD_VAR 0 13
16778: PPUSH
16779: CALL_OW 325
16783: PUSH
16784: LD_VAR 0 10
16788: PPUSH
16789: CALL_OW 255
16793: PPUSH
16794: LD_VAR 0 13
16798: PPUSH
16799: CALL_OW 325
16803: NOT
16804: AND
16805: IFFALSE 16834
// missile := Replace ( missile , missile + 1 , 3 ) ;
16807: LD_ADDR_VAR 0 14
16811: PUSH
16812: LD_VAR 0 14
16816: PPUSH
16817: LD_VAR 0 14
16821: PUSH
16822: LD_INT 1
16824: PLUS
16825: PPUSH
16826: LD_INT 3
16828: PPUSH
16829: CALL_OW 1
16833: ST_TO_ADDR
// if missile < 2 then
16834: LD_VAR 0 14
16838: PUSH
16839: LD_INT 2
16841: LESS
16842: IFFALSE 16846
// exit ;
16844: GO 17068
// x := GetX ( enemy ) ;
16846: LD_ADDR_VAR 0 4
16850: PUSH
16851: LD_VAR 0 10
16855: PPUSH
16856: CALL_OW 250
16860: ST_TO_ADDR
// y := GetY ( enemy ) ;
16861: LD_ADDR_VAR 0 5
16865: PUSH
16866: LD_VAR 0 10
16870: PPUSH
16871: CALL_OW 251
16875: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16876: LD_ADDR_VAR 0 6
16880: PUSH
16881: LD_VAR 0 4
16885: PUSH
16886: LD_INT 1
16888: NEG
16889: PPUSH
16890: LD_INT 1
16892: PPUSH
16893: CALL_OW 12
16897: PLUS
16898: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16899: LD_ADDR_VAR 0 7
16903: PUSH
16904: LD_VAR 0 5
16908: PUSH
16909: LD_INT 1
16911: NEG
16912: PPUSH
16913: LD_INT 1
16915: PPUSH
16916: CALL_OW 12
16920: PLUS
16921: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16922: LD_VAR 0 6
16926: PPUSH
16927: LD_VAR 0 7
16931: PPUSH
16932: CALL_OW 488
16936: NOT
16937: IFFALSE 16959
// begin _x := x ;
16939: LD_ADDR_VAR 0 6
16943: PUSH
16944: LD_VAR 0 4
16948: ST_TO_ADDR
// _y := y ;
16949: LD_ADDR_VAR 0 7
16953: PUSH
16954: LD_VAR 0 5
16958: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16959: LD_ADDR_VAR 0 3
16963: PUSH
16964: LD_INT 1
16966: PPUSH
16967: LD_VAR 0 14
16971: PPUSH
16972: CALL_OW 12
16976: ST_TO_ADDR
// case i of 1 :
16977: LD_VAR 0 3
16981: PUSH
16982: LD_INT 1
16984: DOUBLE
16985: EQUAL
16986: IFTRUE 16990
16988: GO 17007
16990: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16991: LD_VAR 0 1
16995: PPUSH
16996: LD_VAR 0 10
17000: PPUSH
17001: CALL_OW 115
17005: GO 17068
17007: LD_INT 2
17009: DOUBLE
17010: EQUAL
17011: IFTRUE 17015
17013: GO 17037
17015: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17016: LD_VAR 0 1
17020: PPUSH
17021: LD_VAR 0 6
17025: PPUSH
17026: LD_VAR 0 7
17030: PPUSH
17031: CALL_OW 153
17035: GO 17068
17037: LD_INT 3
17039: DOUBLE
17040: EQUAL
17041: IFTRUE 17045
17043: GO 17067
17045: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17046: LD_VAR 0 1
17050: PPUSH
17051: LD_VAR 0 6
17055: PPUSH
17056: LD_VAR 0 7
17060: PPUSH
17061: CALL_OW 154
17065: GO 17068
17067: POP
// end ;
17068: LD_VAR 0 2
17072: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17073: LD_INT 0
17075: PPUSH
17076: PPUSH
17077: PPUSH
17078: PPUSH
17079: PPUSH
17080: PPUSH
// if not unit or not building then
17081: LD_VAR 0 1
17085: NOT
17086: PUSH
17087: LD_VAR 0 2
17091: NOT
17092: OR
17093: IFFALSE 17097
// exit ;
17095: GO 17255
// x := GetX ( building ) ;
17097: LD_ADDR_VAR 0 5
17101: PUSH
17102: LD_VAR 0 2
17106: PPUSH
17107: CALL_OW 250
17111: ST_TO_ADDR
// y := GetY ( building ) ;
17112: LD_ADDR_VAR 0 6
17116: PUSH
17117: LD_VAR 0 2
17121: PPUSH
17122: CALL_OW 251
17126: ST_TO_ADDR
// for i = 0 to 5 do
17127: LD_ADDR_VAR 0 4
17131: PUSH
17132: DOUBLE
17133: LD_INT 0
17135: DEC
17136: ST_TO_ADDR
17137: LD_INT 5
17139: PUSH
17140: FOR_TO
17141: IFFALSE 17253
// begin _x := ShiftX ( x , i , 3 ) ;
17143: LD_ADDR_VAR 0 7
17147: PUSH
17148: LD_VAR 0 5
17152: PPUSH
17153: LD_VAR 0 4
17157: PPUSH
17158: LD_INT 3
17160: PPUSH
17161: CALL_OW 272
17165: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17166: LD_ADDR_VAR 0 8
17170: PUSH
17171: LD_VAR 0 6
17175: PPUSH
17176: LD_VAR 0 4
17180: PPUSH
17181: LD_INT 3
17183: PPUSH
17184: CALL_OW 273
17188: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17189: LD_VAR 0 7
17193: PPUSH
17194: LD_VAR 0 8
17198: PPUSH
17199: CALL_OW 488
17203: NOT
17204: IFFALSE 17208
// continue ;
17206: GO 17140
// if HexInfo ( _x , _y ) = 0 then
17208: LD_VAR 0 7
17212: PPUSH
17213: LD_VAR 0 8
17217: PPUSH
17218: CALL_OW 428
17222: PUSH
17223: LD_INT 0
17225: EQUAL
17226: IFFALSE 17251
// begin ComMoveXY ( unit , _x , _y ) ;
17228: LD_VAR 0 1
17232: PPUSH
17233: LD_VAR 0 7
17237: PPUSH
17238: LD_VAR 0 8
17242: PPUSH
17243: CALL_OW 111
// exit ;
17247: POP
17248: POP
17249: GO 17255
// end ; end ;
17251: GO 17140
17253: POP
17254: POP
// end ;
17255: LD_VAR 0 3
17259: RET
// export function ScanBase ( side , base_area ) ; begin
17260: LD_INT 0
17262: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17263: LD_ADDR_VAR 0 3
17267: PUSH
17268: LD_VAR 0 2
17272: PPUSH
17273: LD_INT 81
17275: PUSH
17276: LD_VAR 0 1
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PPUSH
17285: CALL_OW 70
17289: ST_TO_ADDR
// end ;
17290: LD_VAR 0 3
17294: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17295: LD_INT 0
17297: PPUSH
17298: PPUSH
17299: PPUSH
17300: PPUSH
// result := false ;
17301: LD_ADDR_VAR 0 2
17305: PUSH
17306: LD_INT 0
17308: ST_TO_ADDR
// side := GetSide ( unit ) ;
17309: LD_ADDR_VAR 0 3
17313: PUSH
17314: LD_VAR 0 1
17318: PPUSH
17319: CALL_OW 255
17323: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17324: LD_ADDR_VAR 0 4
17328: PUSH
17329: LD_VAR 0 1
17333: PPUSH
17334: CALL_OW 248
17338: ST_TO_ADDR
// case nat of 1 :
17339: LD_VAR 0 4
17343: PUSH
17344: LD_INT 1
17346: DOUBLE
17347: EQUAL
17348: IFTRUE 17352
17350: GO 17363
17352: POP
// tech := tech_lassight ; 2 :
17353: LD_ADDR_VAR 0 5
17357: PUSH
17358: LD_INT 12
17360: ST_TO_ADDR
17361: GO 17402
17363: LD_INT 2
17365: DOUBLE
17366: EQUAL
17367: IFTRUE 17371
17369: GO 17382
17371: POP
// tech := tech_mortar ; 3 :
17372: LD_ADDR_VAR 0 5
17376: PUSH
17377: LD_INT 41
17379: ST_TO_ADDR
17380: GO 17402
17382: LD_INT 3
17384: DOUBLE
17385: EQUAL
17386: IFTRUE 17390
17388: GO 17401
17390: POP
// tech := tech_bazooka ; end ;
17391: LD_ADDR_VAR 0 5
17395: PUSH
17396: LD_INT 44
17398: ST_TO_ADDR
17399: GO 17402
17401: POP
// if Researched ( side , tech ) then
17402: LD_VAR 0 3
17406: PPUSH
17407: LD_VAR 0 5
17411: PPUSH
17412: CALL_OW 325
17416: IFFALSE 17443
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17418: LD_ADDR_VAR 0 2
17422: PUSH
17423: LD_INT 5
17425: PUSH
17426: LD_INT 8
17428: PUSH
17429: LD_INT 9
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: PUSH
17437: LD_VAR 0 4
17441: ARRAY
17442: ST_TO_ADDR
// end ;
17443: LD_VAR 0 2
17447: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17448: LD_INT 0
17450: PPUSH
17451: PPUSH
17452: PPUSH
// if not mines then
17453: LD_VAR 0 2
17457: NOT
17458: IFFALSE 17462
// exit ;
17460: GO 17606
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17462: LD_ADDR_VAR 0 5
17466: PUSH
17467: LD_INT 81
17469: PUSH
17470: LD_VAR 0 1
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: LD_INT 21
17484: PUSH
17485: LD_INT 3
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PPUSH
17500: CALL_OW 69
17504: ST_TO_ADDR
// for i in mines do
17505: LD_ADDR_VAR 0 4
17509: PUSH
17510: LD_VAR 0 2
17514: PUSH
17515: FOR_IN
17516: IFFALSE 17604
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17518: LD_VAR 0 4
17522: PUSH
17523: LD_INT 1
17525: ARRAY
17526: PPUSH
17527: LD_VAR 0 4
17531: PUSH
17532: LD_INT 2
17534: ARRAY
17535: PPUSH
17536: CALL_OW 458
17540: NOT
17541: IFFALSE 17545
// continue ;
17543: GO 17515
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17545: LD_VAR 0 4
17549: PUSH
17550: LD_INT 1
17552: ARRAY
17553: PPUSH
17554: LD_VAR 0 4
17558: PUSH
17559: LD_INT 2
17561: ARRAY
17562: PPUSH
17563: CALL_OW 428
17567: PUSH
17568: LD_VAR 0 5
17572: IN
17573: IFFALSE 17602
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17575: LD_VAR 0 4
17579: PUSH
17580: LD_INT 1
17582: ARRAY
17583: PPUSH
17584: LD_VAR 0 4
17588: PUSH
17589: LD_INT 2
17591: ARRAY
17592: PPUSH
17593: LD_VAR 0 1
17597: PPUSH
17598: CALL_OW 456
// end ;
17602: GO 17515
17604: POP
17605: POP
// end ;
17606: LD_VAR 0 3
17610: RET
// export function Count ( array ) ; begin
17611: LD_INT 0
17613: PPUSH
// result := array + 0 ;
17614: LD_ADDR_VAR 0 2
17618: PUSH
17619: LD_VAR 0 1
17623: PUSH
17624: LD_INT 0
17626: PLUS
17627: ST_TO_ADDR
// end ;
17628: LD_VAR 0 2
17632: RET
// export function IsEmpty ( building ) ; begin
17633: LD_INT 0
17635: PPUSH
// if not building then
17636: LD_VAR 0 1
17640: NOT
17641: IFFALSE 17645
// exit ;
17643: GO 17688
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17645: LD_ADDR_VAR 0 2
17649: PUSH
17650: LD_VAR 0 1
17654: PUSH
17655: LD_INT 22
17657: PUSH
17658: LD_VAR 0 1
17662: PPUSH
17663: CALL_OW 255
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 58
17674: PUSH
17675: EMPTY
17676: LIST
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PPUSH
17682: CALL_OW 69
17686: IN
17687: ST_TO_ADDR
// end ;
17688: LD_VAR 0 2
17692: RET
// export function IsNotFull ( building ) ; var places ; begin
17693: LD_INT 0
17695: PPUSH
17696: PPUSH
// if not building then
17697: LD_VAR 0 1
17701: NOT
17702: IFFALSE 17706
// exit ;
17704: GO 17734
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17706: LD_ADDR_VAR 0 2
17710: PUSH
17711: LD_VAR 0 1
17715: PPUSH
17716: LD_INT 3
17718: PUSH
17719: LD_INT 62
17721: PUSH
17722: EMPTY
17723: LIST
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PPUSH
17729: CALL_OW 72
17733: ST_TO_ADDR
// end ;
17734: LD_VAR 0 2
17738: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17739: LD_INT 0
17741: PPUSH
17742: PPUSH
17743: PPUSH
17744: PPUSH
// tmp := [ ] ;
17745: LD_ADDR_VAR 0 3
17749: PUSH
17750: EMPTY
17751: ST_TO_ADDR
// list := [ ] ;
17752: LD_ADDR_VAR 0 5
17756: PUSH
17757: EMPTY
17758: ST_TO_ADDR
// for i = 16 to 25 do
17759: LD_ADDR_VAR 0 4
17763: PUSH
17764: DOUBLE
17765: LD_INT 16
17767: DEC
17768: ST_TO_ADDR
17769: LD_INT 25
17771: PUSH
17772: FOR_TO
17773: IFFALSE 17846
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17775: LD_ADDR_VAR 0 3
17779: PUSH
17780: LD_VAR 0 3
17784: PUSH
17785: LD_INT 22
17787: PUSH
17788: LD_VAR 0 1
17792: PPUSH
17793: CALL_OW 255
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 91
17804: PUSH
17805: LD_VAR 0 1
17809: PUSH
17810: LD_INT 6
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 30
17820: PUSH
17821: LD_VAR 0 4
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: PPUSH
17838: CALL_OW 69
17842: ADD
17843: ST_TO_ADDR
17844: GO 17772
17846: POP
17847: POP
// for i = 1 to tmp do
17848: LD_ADDR_VAR 0 4
17852: PUSH
17853: DOUBLE
17854: LD_INT 1
17856: DEC
17857: ST_TO_ADDR
17858: LD_VAR 0 3
17862: PUSH
17863: FOR_TO
17864: IFFALSE 17952
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17866: LD_ADDR_VAR 0 5
17870: PUSH
17871: LD_VAR 0 5
17875: PUSH
17876: LD_VAR 0 3
17880: PUSH
17881: LD_VAR 0 4
17885: ARRAY
17886: PPUSH
17887: CALL_OW 266
17891: PUSH
17892: LD_VAR 0 3
17896: PUSH
17897: LD_VAR 0 4
17901: ARRAY
17902: PPUSH
17903: CALL_OW 250
17907: PUSH
17908: LD_VAR 0 3
17912: PUSH
17913: LD_VAR 0 4
17917: ARRAY
17918: PPUSH
17919: CALL_OW 251
17923: PUSH
17924: LD_VAR 0 3
17928: PUSH
17929: LD_VAR 0 4
17933: ARRAY
17934: PPUSH
17935: CALL_OW 254
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: PUSH
17946: EMPTY
17947: LIST
17948: ADD
17949: ST_TO_ADDR
17950: GO 17863
17952: POP
17953: POP
// result := list ;
17954: LD_ADDR_VAR 0 2
17958: PUSH
17959: LD_VAR 0 5
17963: ST_TO_ADDR
// end ;
17964: LD_VAR 0 2
17968: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17969: LD_INT 0
17971: PPUSH
17972: PPUSH
17973: PPUSH
17974: PPUSH
17975: PPUSH
17976: PPUSH
17977: PPUSH
// if not factory then
17978: LD_VAR 0 1
17982: NOT
17983: IFFALSE 17987
// exit ;
17985: GO 18580
// if control = control_apeman then
17987: LD_VAR 0 4
17991: PUSH
17992: LD_INT 5
17994: EQUAL
17995: IFFALSE 18104
// begin tmp := UnitsInside ( factory ) ;
17997: LD_ADDR_VAR 0 8
18001: PUSH
18002: LD_VAR 0 1
18006: PPUSH
18007: CALL_OW 313
18011: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18012: LD_VAR 0 8
18016: PPUSH
18017: LD_INT 25
18019: PUSH
18020: LD_INT 12
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PPUSH
18027: CALL_OW 72
18031: NOT
18032: IFFALSE 18042
// control := control_manual ;
18034: LD_ADDR_VAR 0 4
18038: PUSH
18039: LD_INT 1
18041: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18042: LD_ADDR_VAR 0 8
18046: PUSH
18047: LD_VAR 0 1
18051: PPUSH
18052: CALL 17739 0 1
18056: ST_TO_ADDR
// if tmp then
18057: LD_VAR 0 8
18061: IFFALSE 18104
// begin for i in tmp do
18063: LD_ADDR_VAR 0 7
18067: PUSH
18068: LD_VAR 0 8
18072: PUSH
18073: FOR_IN
18074: IFFALSE 18102
// if i [ 1 ] = b_ext_radio then
18076: LD_VAR 0 7
18080: PUSH
18081: LD_INT 1
18083: ARRAY
18084: PUSH
18085: LD_INT 22
18087: EQUAL
18088: IFFALSE 18100
// begin control := control_remote ;
18090: LD_ADDR_VAR 0 4
18094: PUSH
18095: LD_INT 2
18097: ST_TO_ADDR
// break ;
18098: GO 18102
// end ;
18100: GO 18073
18102: POP
18103: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18104: LD_VAR 0 1
18108: PPUSH
18109: LD_VAR 0 2
18113: PPUSH
18114: LD_VAR 0 3
18118: PPUSH
18119: LD_VAR 0 4
18123: PPUSH
18124: LD_VAR 0 5
18128: PPUSH
18129: CALL_OW 448
18133: IFFALSE 18168
// begin result := [ chassis , engine , control , weapon ] ;
18135: LD_ADDR_VAR 0 6
18139: PUSH
18140: LD_VAR 0 2
18144: PUSH
18145: LD_VAR 0 3
18149: PUSH
18150: LD_VAR 0 4
18154: PUSH
18155: LD_VAR 0 5
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: ST_TO_ADDR
// exit ;
18166: GO 18580
// end ; _chassis := AvailableChassisList ( factory ) ;
18168: LD_ADDR_VAR 0 9
18172: PUSH
18173: LD_VAR 0 1
18177: PPUSH
18178: CALL_OW 475
18182: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18183: LD_ADDR_VAR 0 11
18187: PUSH
18188: LD_VAR 0 1
18192: PPUSH
18193: CALL_OW 476
18197: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18198: LD_ADDR_VAR 0 12
18202: PUSH
18203: LD_VAR 0 1
18207: PPUSH
18208: CALL_OW 477
18212: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18213: LD_ADDR_VAR 0 10
18217: PUSH
18218: LD_VAR 0 1
18222: PPUSH
18223: CALL_OW 478
18227: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18228: LD_VAR 0 9
18232: NOT
18233: PUSH
18234: LD_VAR 0 11
18238: NOT
18239: OR
18240: PUSH
18241: LD_VAR 0 12
18245: NOT
18246: OR
18247: PUSH
18248: LD_VAR 0 10
18252: NOT
18253: OR
18254: IFFALSE 18289
// begin result := [ chassis , engine , control , weapon ] ;
18256: LD_ADDR_VAR 0 6
18260: PUSH
18261: LD_VAR 0 2
18265: PUSH
18266: LD_VAR 0 3
18270: PUSH
18271: LD_VAR 0 4
18275: PUSH
18276: LD_VAR 0 5
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: ST_TO_ADDR
// exit ;
18287: GO 18580
// end ; if not chassis in _chassis then
18289: LD_VAR 0 2
18293: PUSH
18294: LD_VAR 0 9
18298: IN
18299: NOT
18300: IFFALSE 18326
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18302: LD_ADDR_VAR 0 2
18306: PUSH
18307: LD_VAR 0 9
18311: PUSH
18312: LD_INT 1
18314: PPUSH
18315: LD_VAR 0 9
18319: PPUSH
18320: CALL_OW 12
18324: ARRAY
18325: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18326: LD_VAR 0 2
18330: PPUSH
18331: LD_VAR 0 3
18335: PPUSH
18336: CALL 18585 0 2
18340: NOT
18341: IFFALSE 18400
// repeat engine := _engine [ 1 ] ;
18343: LD_ADDR_VAR 0 3
18347: PUSH
18348: LD_VAR 0 11
18352: PUSH
18353: LD_INT 1
18355: ARRAY
18356: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18357: LD_ADDR_VAR 0 11
18361: PUSH
18362: LD_VAR 0 11
18366: PPUSH
18367: LD_INT 1
18369: PPUSH
18370: CALL_OW 3
18374: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18375: LD_VAR 0 2
18379: PPUSH
18380: LD_VAR 0 3
18384: PPUSH
18385: CALL 18585 0 2
18389: PUSH
18390: LD_VAR 0 11
18394: PUSH
18395: EMPTY
18396: EQUAL
18397: OR
18398: IFFALSE 18343
// if not control in _control then
18400: LD_VAR 0 4
18404: PUSH
18405: LD_VAR 0 12
18409: IN
18410: NOT
18411: IFFALSE 18437
// control := _control [ rand ( 1 , _control ) ] ;
18413: LD_ADDR_VAR 0 4
18417: PUSH
18418: LD_VAR 0 12
18422: PUSH
18423: LD_INT 1
18425: PPUSH
18426: LD_VAR 0 12
18430: PPUSH
18431: CALL_OW 12
18435: ARRAY
18436: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18437: LD_VAR 0 2
18441: PPUSH
18442: LD_VAR 0 5
18446: PPUSH
18447: CALL 18805 0 2
18451: NOT
18452: IFFALSE 18511
// repeat weapon := _weapon [ 1 ] ;
18454: LD_ADDR_VAR 0 5
18458: PUSH
18459: LD_VAR 0 10
18463: PUSH
18464: LD_INT 1
18466: ARRAY
18467: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18468: LD_ADDR_VAR 0 10
18472: PUSH
18473: LD_VAR 0 10
18477: PPUSH
18478: LD_INT 1
18480: PPUSH
18481: CALL_OW 3
18485: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18486: LD_VAR 0 2
18490: PPUSH
18491: LD_VAR 0 5
18495: PPUSH
18496: CALL 18805 0 2
18500: PUSH
18501: LD_VAR 0 10
18505: PUSH
18506: EMPTY
18507: EQUAL
18508: OR
18509: IFFALSE 18454
// result := [ ] ;
18511: LD_ADDR_VAR 0 6
18515: PUSH
18516: EMPTY
18517: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18518: LD_VAR 0 1
18522: PPUSH
18523: LD_VAR 0 2
18527: PPUSH
18528: LD_VAR 0 3
18532: PPUSH
18533: LD_VAR 0 4
18537: PPUSH
18538: LD_VAR 0 5
18542: PPUSH
18543: CALL_OW 448
18547: IFFALSE 18580
// result := [ chassis , engine , control , weapon ] ;
18549: LD_ADDR_VAR 0 6
18553: PUSH
18554: LD_VAR 0 2
18558: PUSH
18559: LD_VAR 0 3
18563: PUSH
18564: LD_VAR 0 4
18568: PUSH
18569: LD_VAR 0 5
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: ST_TO_ADDR
// end ;
18580: LD_VAR 0 6
18584: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18585: LD_INT 0
18587: PPUSH
// if not chassis or not engine then
18588: LD_VAR 0 1
18592: NOT
18593: PUSH
18594: LD_VAR 0 2
18598: NOT
18599: OR
18600: IFFALSE 18604
// exit ;
18602: GO 18800
// case engine of engine_solar :
18604: LD_VAR 0 2
18608: PUSH
18609: LD_INT 2
18611: DOUBLE
18612: EQUAL
18613: IFTRUE 18617
18615: GO 18655
18617: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18618: LD_ADDR_VAR 0 3
18622: PUSH
18623: LD_INT 11
18625: PUSH
18626: LD_INT 12
18628: PUSH
18629: LD_INT 13
18631: PUSH
18632: LD_INT 14
18634: PUSH
18635: LD_INT 1
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: LD_INT 3
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: ST_TO_ADDR
18653: GO 18784
18655: LD_INT 1
18657: DOUBLE
18658: EQUAL
18659: IFTRUE 18663
18661: GO 18725
18663: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18664: LD_ADDR_VAR 0 3
18668: PUSH
18669: LD_INT 11
18671: PUSH
18672: LD_INT 12
18674: PUSH
18675: LD_INT 13
18677: PUSH
18678: LD_INT 14
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: LD_INT 2
18686: PUSH
18687: LD_INT 3
18689: PUSH
18690: LD_INT 4
18692: PUSH
18693: LD_INT 5
18695: PUSH
18696: LD_INT 21
18698: PUSH
18699: LD_INT 23
18701: PUSH
18702: LD_INT 22
18704: PUSH
18705: LD_INT 24
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: ST_TO_ADDR
18723: GO 18784
18725: LD_INT 3
18727: DOUBLE
18728: EQUAL
18729: IFTRUE 18733
18731: GO 18783
18733: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18734: LD_ADDR_VAR 0 3
18738: PUSH
18739: LD_INT 13
18741: PUSH
18742: LD_INT 14
18744: PUSH
18745: LD_INT 2
18747: PUSH
18748: LD_INT 3
18750: PUSH
18751: LD_INT 4
18753: PUSH
18754: LD_INT 5
18756: PUSH
18757: LD_INT 21
18759: PUSH
18760: LD_INT 22
18762: PUSH
18763: LD_INT 23
18765: PUSH
18766: LD_INT 24
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: ST_TO_ADDR
18781: GO 18784
18783: POP
// result := ( chassis in result ) ;
18784: LD_ADDR_VAR 0 3
18788: PUSH
18789: LD_VAR 0 1
18793: PUSH
18794: LD_VAR 0 3
18798: IN
18799: ST_TO_ADDR
// end ;
18800: LD_VAR 0 3
18804: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18805: LD_INT 0
18807: PPUSH
// if not chassis or not weapon then
18808: LD_VAR 0 1
18812: NOT
18813: PUSH
18814: LD_VAR 0 2
18818: NOT
18819: OR
18820: IFFALSE 18824
// exit ;
18822: GO 19884
// case weapon of us_machine_gun :
18824: LD_VAR 0 2
18828: PUSH
18829: LD_INT 2
18831: DOUBLE
18832: EQUAL
18833: IFTRUE 18837
18835: GO 18867
18837: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18838: LD_ADDR_VAR 0 3
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: LD_INT 2
18848: PUSH
18849: LD_INT 3
18851: PUSH
18852: LD_INT 4
18854: PUSH
18855: LD_INT 5
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: ST_TO_ADDR
18865: GO 19868
18867: LD_INT 3
18869: DOUBLE
18870: EQUAL
18871: IFTRUE 18875
18873: GO 18905
18875: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18876: LD_ADDR_VAR 0 3
18880: PUSH
18881: LD_INT 1
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: LD_INT 3
18889: PUSH
18890: LD_INT 4
18892: PUSH
18893: LD_INT 5
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: ST_TO_ADDR
18903: GO 19868
18905: LD_INT 11
18907: DOUBLE
18908: EQUAL
18909: IFTRUE 18913
18911: GO 18943
18913: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18914: LD_ADDR_VAR 0 3
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: LD_INT 2
18924: PUSH
18925: LD_INT 3
18927: PUSH
18928: LD_INT 4
18930: PUSH
18931: LD_INT 5
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: ST_TO_ADDR
18941: GO 19868
18943: LD_INT 4
18945: DOUBLE
18946: EQUAL
18947: IFTRUE 18951
18949: GO 18977
18951: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18952: LD_ADDR_VAR 0 3
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: LD_INT 3
18962: PUSH
18963: LD_INT 4
18965: PUSH
18966: LD_INT 5
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: ST_TO_ADDR
18975: GO 19868
18977: LD_INT 5
18979: DOUBLE
18980: EQUAL
18981: IFTRUE 18985
18983: GO 19011
18985: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18986: LD_ADDR_VAR 0 3
18990: PUSH
18991: LD_INT 2
18993: PUSH
18994: LD_INT 3
18996: PUSH
18997: LD_INT 4
18999: PUSH
19000: LD_INT 5
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: ST_TO_ADDR
19009: GO 19868
19011: LD_INT 9
19013: DOUBLE
19014: EQUAL
19015: IFTRUE 19019
19017: GO 19045
19019: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19020: LD_ADDR_VAR 0 3
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 3
19030: PUSH
19031: LD_INT 4
19033: PUSH
19034: LD_INT 5
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: ST_TO_ADDR
19043: GO 19868
19045: LD_INT 7
19047: DOUBLE
19048: EQUAL
19049: IFTRUE 19053
19051: GO 19079
19053: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19054: LD_ADDR_VAR 0 3
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: LD_INT 3
19064: PUSH
19065: LD_INT 4
19067: PUSH
19068: LD_INT 5
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: ST_TO_ADDR
19077: GO 19868
19079: LD_INT 12
19081: DOUBLE
19082: EQUAL
19083: IFTRUE 19087
19085: GO 19113
19087: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19088: LD_ADDR_VAR 0 3
19092: PUSH
19093: LD_INT 2
19095: PUSH
19096: LD_INT 3
19098: PUSH
19099: LD_INT 4
19101: PUSH
19102: LD_INT 5
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: ST_TO_ADDR
19111: GO 19868
19113: LD_INT 13
19115: DOUBLE
19116: EQUAL
19117: IFTRUE 19121
19119: GO 19147
19121: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19122: LD_ADDR_VAR 0 3
19126: PUSH
19127: LD_INT 2
19129: PUSH
19130: LD_INT 3
19132: PUSH
19133: LD_INT 4
19135: PUSH
19136: LD_INT 5
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: ST_TO_ADDR
19145: GO 19868
19147: LD_INT 14
19149: DOUBLE
19150: EQUAL
19151: IFTRUE 19155
19153: GO 19173
19155: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19156: LD_ADDR_VAR 0 3
19160: PUSH
19161: LD_INT 4
19163: PUSH
19164: LD_INT 5
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: ST_TO_ADDR
19171: GO 19868
19173: LD_INT 6
19175: DOUBLE
19176: EQUAL
19177: IFTRUE 19181
19179: GO 19199
19181: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19182: LD_ADDR_VAR 0 3
19186: PUSH
19187: LD_INT 4
19189: PUSH
19190: LD_INT 5
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: ST_TO_ADDR
19197: GO 19868
19199: LD_INT 10
19201: DOUBLE
19202: EQUAL
19203: IFTRUE 19207
19205: GO 19225
19207: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19208: LD_ADDR_VAR 0 3
19212: PUSH
19213: LD_INT 4
19215: PUSH
19216: LD_INT 5
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: ST_TO_ADDR
19223: GO 19868
19225: LD_INT 22
19227: DOUBLE
19228: EQUAL
19229: IFTRUE 19233
19231: GO 19259
19233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19234: LD_ADDR_VAR 0 3
19238: PUSH
19239: LD_INT 11
19241: PUSH
19242: LD_INT 12
19244: PUSH
19245: LD_INT 13
19247: PUSH
19248: LD_INT 14
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: ST_TO_ADDR
19257: GO 19868
19259: LD_INT 23
19261: DOUBLE
19262: EQUAL
19263: IFTRUE 19267
19265: GO 19293
19267: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19268: LD_ADDR_VAR 0 3
19272: PUSH
19273: LD_INT 11
19275: PUSH
19276: LD_INT 12
19278: PUSH
19279: LD_INT 13
19281: PUSH
19282: LD_INT 14
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: ST_TO_ADDR
19291: GO 19868
19293: LD_INT 24
19295: DOUBLE
19296: EQUAL
19297: IFTRUE 19301
19299: GO 19327
19301: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19302: LD_ADDR_VAR 0 3
19306: PUSH
19307: LD_INT 11
19309: PUSH
19310: LD_INT 12
19312: PUSH
19313: LD_INT 13
19315: PUSH
19316: LD_INT 14
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: ST_TO_ADDR
19325: GO 19868
19327: LD_INT 30
19329: DOUBLE
19330: EQUAL
19331: IFTRUE 19335
19333: GO 19361
19335: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19336: LD_ADDR_VAR 0 3
19340: PUSH
19341: LD_INT 11
19343: PUSH
19344: LD_INT 12
19346: PUSH
19347: LD_INT 13
19349: PUSH
19350: LD_INT 14
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: ST_TO_ADDR
19359: GO 19868
19361: LD_INT 25
19363: DOUBLE
19364: EQUAL
19365: IFTRUE 19369
19367: GO 19387
19369: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19370: LD_ADDR_VAR 0 3
19374: PUSH
19375: LD_INT 13
19377: PUSH
19378: LD_INT 14
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: ST_TO_ADDR
19385: GO 19868
19387: LD_INT 27
19389: DOUBLE
19390: EQUAL
19391: IFTRUE 19395
19393: GO 19413
19395: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19396: LD_ADDR_VAR 0 3
19400: PUSH
19401: LD_INT 13
19403: PUSH
19404: LD_INT 14
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: ST_TO_ADDR
19411: GO 19868
19413: LD_INT 92
19415: DOUBLE
19416: EQUAL
19417: IFTRUE 19421
19419: GO 19447
19421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19422: LD_ADDR_VAR 0 3
19426: PUSH
19427: LD_INT 11
19429: PUSH
19430: LD_INT 12
19432: PUSH
19433: LD_INT 13
19435: PUSH
19436: LD_INT 14
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: ST_TO_ADDR
19445: GO 19868
19447: LD_INT 28
19449: DOUBLE
19450: EQUAL
19451: IFTRUE 19455
19453: GO 19473
19455: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19456: LD_ADDR_VAR 0 3
19460: PUSH
19461: LD_INT 13
19463: PUSH
19464: LD_INT 14
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: ST_TO_ADDR
19471: GO 19868
19473: LD_INT 29
19475: DOUBLE
19476: EQUAL
19477: IFTRUE 19481
19479: GO 19499
19481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19482: LD_ADDR_VAR 0 3
19486: PUSH
19487: LD_INT 13
19489: PUSH
19490: LD_INT 14
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: ST_TO_ADDR
19497: GO 19868
19499: LD_INT 31
19501: DOUBLE
19502: EQUAL
19503: IFTRUE 19507
19505: GO 19525
19507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19508: LD_ADDR_VAR 0 3
19512: PUSH
19513: LD_INT 13
19515: PUSH
19516: LD_INT 14
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: ST_TO_ADDR
19523: GO 19868
19525: LD_INT 26
19527: DOUBLE
19528: EQUAL
19529: IFTRUE 19533
19531: GO 19551
19533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19534: LD_ADDR_VAR 0 3
19538: PUSH
19539: LD_INT 13
19541: PUSH
19542: LD_INT 14
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: ST_TO_ADDR
19549: GO 19868
19551: LD_INT 42
19553: DOUBLE
19554: EQUAL
19555: IFTRUE 19559
19557: GO 19585
19559: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19560: LD_ADDR_VAR 0 3
19564: PUSH
19565: LD_INT 21
19567: PUSH
19568: LD_INT 22
19570: PUSH
19571: LD_INT 23
19573: PUSH
19574: LD_INT 24
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: ST_TO_ADDR
19583: GO 19868
19585: LD_INT 43
19587: DOUBLE
19588: EQUAL
19589: IFTRUE 19593
19591: GO 19619
19593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19594: LD_ADDR_VAR 0 3
19598: PUSH
19599: LD_INT 21
19601: PUSH
19602: LD_INT 22
19604: PUSH
19605: LD_INT 23
19607: PUSH
19608: LD_INT 24
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: ST_TO_ADDR
19617: GO 19868
19619: LD_INT 44
19621: DOUBLE
19622: EQUAL
19623: IFTRUE 19627
19625: GO 19653
19627: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19628: LD_ADDR_VAR 0 3
19632: PUSH
19633: LD_INT 21
19635: PUSH
19636: LD_INT 22
19638: PUSH
19639: LD_INT 23
19641: PUSH
19642: LD_INT 24
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: ST_TO_ADDR
19651: GO 19868
19653: LD_INT 45
19655: DOUBLE
19656: EQUAL
19657: IFTRUE 19661
19659: GO 19687
19661: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19662: LD_ADDR_VAR 0 3
19666: PUSH
19667: LD_INT 21
19669: PUSH
19670: LD_INT 22
19672: PUSH
19673: LD_INT 23
19675: PUSH
19676: LD_INT 24
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: ST_TO_ADDR
19685: GO 19868
19687: LD_INT 49
19689: DOUBLE
19690: EQUAL
19691: IFTRUE 19695
19693: GO 19721
19695: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19696: LD_ADDR_VAR 0 3
19700: PUSH
19701: LD_INT 21
19703: PUSH
19704: LD_INT 22
19706: PUSH
19707: LD_INT 23
19709: PUSH
19710: LD_INT 24
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: ST_TO_ADDR
19719: GO 19868
19721: LD_INT 51
19723: DOUBLE
19724: EQUAL
19725: IFTRUE 19729
19727: GO 19755
19729: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19730: LD_ADDR_VAR 0 3
19734: PUSH
19735: LD_INT 21
19737: PUSH
19738: LD_INT 22
19740: PUSH
19741: LD_INT 23
19743: PUSH
19744: LD_INT 24
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: ST_TO_ADDR
19753: GO 19868
19755: LD_INT 52
19757: DOUBLE
19758: EQUAL
19759: IFTRUE 19763
19761: GO 19789
19763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19764: LD_ADDR_VAR 0 3
19768: PUSH
19769: LD_INT 21
19771: PUSH
19772: LD_INT 22
19774: PUSH
19775: LD_INT 23
19777: PUSH
19778: LD_INT 24
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: ST_TO_ADDR
19787: GO 19868
19789: LD_INT 53
19791: DOUBLE
19792: EQUAL
19793: IFTRUE 19797
19795: GO 19815
19797: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19798: LD_ADDR_VAR 0 3
19802: PUSH
19803: LD_INT 23
19805: PUSH
19806: LD_INT 24
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: ST_TO_ADDR
19813: GO 19868
19815: LD_INT 46
19817: DOUBLE
19818: EQUAL
19819: IFTRUE 19823
19821: GO 19841
19823: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19824: LD_ADDR_VAR 0 3
19828: PUSH
19829: LD_INT 23
19831: PUSH
19832: LD_INT 24
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: ST_TO_ADDR
19839: GO 19868
19841: LD_INT 47
19843: DOUBLE
19844: EQUAL
19845: IFTRUE 19849
19847: GO 19867
19849: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19850: LD_ADDR_VAR 0 3
19854: PUSH
19855: LD_INT 23
19857: PUSH
19858: LD_INT 24
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: ST_TO_ADDR
19865: GO 19868
19867: POP
// result := ( chassis in result ) ;
19868: LD_ADDR_VAR 0 3
19872: PUSH
19873: LD_VAR 0 1
19877: PUSH
19878: LD_VAR 0 3
19882: IN
19883: ST_TO_ADDR
// end ;
19884: LD_VAR 0 3
19888: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19889: LD_INT 0
19891: PPUSH
19892: PPUSH
19893: PPUSH
19894: PPUSH
19895: PPUSH
19896: PPUSH
19897: PPUSH
// result := array ;
19898: LD_ADDR_VAR 0 5
19902: PUSH
19903: LD_VAR 0 1
19907: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19908: LD_VAR 0 1
19912: NOT
19913: PUSH
19914: LD_VAR 0 2
19918: NOT
19919: OR
19920: PUSH
19921: LD_VAR 0 3
19925: NOT
19926: OR
19927: PUSH
19928: LD_VAR 0 2
19932: PUSH
19933: LD_VAR 0 1
19937: GREATER
19938: OR
19939: PUSH
19940: LD_VAR 0 3
19944: PUSH
19945: LD_VAR 0 1
19949: GREATER
19950: OR
19951: IFFALSE 19955
// exit ;
19953: GO 20251
// if direction then
19955: LD_VAR 0 4
19959: IFFALSE 20023
// begin d := 1 ;
19961: LD_ADDR_VAR 0 9
19965: PUSH
19966: LD_INT 1
19968: ST_TO_ADDR
// if i_from > i_to then
19969: LD_VAR 0 2
19973: PUSH
19974: LD_VAR 0 3
19978: GREATER
19979: IFFALSE 20005
// length := ( array - i_from ) + i_to else
19981: LD_ADDR_VAR 0 11
19985: PUSH
19986: LD_VAR 0 1
19990: PUSH
19991: LD_VAR 0 2
19995: MINUS
19996: PUSH
19997: LD_VAR 0 3
20001: PLUS
20002: ST_TO_ADDR
20003: GO 20021
// length := i_to - i_from ;
20005: LD_ADDR_VAR 0 11
20009: PUSH
20010: LD_VAR 0 3
20014: PUSH
20015: LD_VAR 0 2
20019: MINUS
20020: ST_TO_ADDR
// end else
20021: GO 20084
// begin d := - 1 ;
20023: LD_ADDR_VAR 0 9
20027: PUSH
20028: LD_INT 1
20030: NEG
20031: ST_TO_ADDR
// if i_from > i_to then
20032: LD_VAR 0 2
20036: PUSH
20037: LD_VAR 0 3
20041: GREATER
20042: IFFALSE 20062
// length := i_from - i_to else
20044: LD_ADDR_VAR 0 11
20048: PUSH
20049: LD_VAR 0 2
20053: PUSH
20054: LD_VAR 0 3
20058: MINUS
20059: ST_TO_ADDR
20060: GO 20084
// length := ( array - i_to ) + i_from ;
20062: LD_ADDR_VAR 0 11
20066: PUSH
20067: LD_VAR 0 1
20071: PUSH
20072: LD_VAR 0 3
20076: MINUS
20077: PUSH
20078: LD_VAR 0 2
20082: PLUS
20083: ST_TO_ADDR
// end ; if not length then
20084: LD_VAR 0 11
20088: NOT
20089: IFFALSE 20093
// exit ;
20091: GO 20251
// tmp := array ;
20093: LD_ADDR_VAR 0 10
20097: PUSH
20098: LD_VAR 0 1
20102: ST_TO_ADDR
// for i = 1 to length do
20103: LD_ADDR_VAR 0 6
20107: PUSH
20108: DOUBLE
20109: LD_INT 1
20111: DEC
20112: ST_TO_ADDR
20113: LD_VAR 0 11
20117: PUSH
20118: FOR_TO
20119: IFFALSE 20239
// begin for j = 1 to array do
20121: LD_ADDR_VAR 0 7
20125: PUSH
20126: DOUBLE
20127: LD_INT 1
20129: DEC
20130: ST_TO_ADDR
20131: LD_VAR 0 1
20135: PUSH
20136: FOR_TO
20137: IFFALSE 20225
// begin k := j + d ;
20139: LD_ADDR_VAR 0 8
20143: PUSH
20144: LD_VAR 0 7
20148: PUSH
20149: LD_VAR 0 9
20153: PLUS
20154: ST_TO_ADDR
// if k > array then
20155: LD_VAR 0 8
20159: PUSH
20160: LD_VAR 0 1
20164: GREATER
20165: IFFALSE 20175
// k := 1 ;
20167: LD_ADDR_VAR 0 8
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if not k then
20175: LD_VAR 0 8
20179: NOT
20180: IFFALSE 20192
// k := array ;
20182: LD_ADDR_VAR 0 8
20186: PUSH
20187: LD_VAR 0 1
20191: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20192: LD_ADDR_VAR 0 10
20196: PUSH
20197: LD_VAR 0 10
20201: PPUSH
20202: LD_VAR 0 8
20206: PPUSH
20207: LD_VAR 0 1
20211: PUSH
20212: LD_VAR 0 7
20216: ARRAY
20217: PPUSH
20218: CALL_OW 1
20222: ST_TO_ADDR
// end ;
20223: GO 20136
20225: POP
20226: POP
// array := tmp ;
20227: LD_ADDR_VAR 0 1
20231: PUSH
20232: LD_VAR 0 10
20236: ST_TO_ADDR
// end ;
20237: GO 20118
20239: POP
20240: POP
// result := array ;
20241: LD_ADDR_VAR 0 5
20245: PUSH
20246: LD_VAR 0 1
20250: ST_TO_ADDR
// end ;
20251: LD_VAR 0 5
20255: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20256: LD_INT 0
20258: PPUSH
20259: PPUSH
// result := 0 ;
20260: LD_ADDR_VAR 0 3
20264: PUSH
20265: LD_INT 0
20267: ST_TO_ADDR
// if not array or not value in array then
20268: LD_VAR 0 1
20272: NOT
20273: PUSH
20274: LD_VAR 0 2
20278: PUSH
20279: LD_VAR 0 1
20283: IN
20284: NOT
20285: OR
20286: IFFALSE 20290
// exit ;
20288: GO 20344
// for i = 1 to array do
20290: LD_ADDR_VAR 0 4
20294: PUSH
20295: DOUBLE
20296: LD_INT 1
20298: DEC
20299: ST_TO_ADDR
20300: LD_VAR 0 1
20304: PUSH
20305: FOR_TO
20306: IFFALSE 20342
// if value = array [ i ] then
20308: LD_VAR 0 2
20312: PUSH
20313: LD_VAR 0 1
20317: PUSH
20318: LD_VAR 0 4
20322: ARRAY
20323: EQUAL
20324: IFFALSE 20340
// begin result := i ;
20326: LD_ADDR_VAR 0 3
20330: PUSH
20331: LD_VAR 0 4
20335: ST_TO_ADDR
// exit ;
20336: POP
20337: POP
20338: GO 20344
// end ;
20340: GO 20305
20342: POP
20343: POP
// end ;
20344: LD_VAR 0 3
20348: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20349: LD_INT 0
20351: PPUSH
// vc_chassis := chassis ;
20352: LD_ADDR_OWVAR 37
20356: PUSH
20357: LD_VAR 0 1
20361: ST_TO_ADDR
// vc_engine := engine ;
20362: LD_ADDR_OWVAR 39
20366: PUSH
20367: LD_VAR 0 2
20371: ST_TO_ADDR
// vc_control := control ;
20372: LD_ADDR_OWVAR 38
20376: PUSH
20377: LD_VAR 0 3
20381: ST_TO_ADDR
// vc_weapon := weapon ;
20382: LD_ADDR_OWVAR 40
20386: PUSH
20387: LD_VAR 0 4
20391: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20392: LD_ADDR_OWVAR 41
20396: PUSH
20397: LD_VAR 0 5
20401: ST_TO_ADDR
// end ;
20402: LD_VAR 0 6
20406: RET
// export function WantPlant ( unit ) ; var task ; begin
20407: LD_INT 0
20409: PPUSH
20410: PPUSH
// result := false ;
20411: LD_ADDR_VAR 0 2
20415: PUSH
20416: LD_INT 0
20418: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20419: LD_ADDR_VAR 0 3
20423: PUSH
20424: LD_VAR 0 1
20428: PPUSH
20429: CALL_OW 437
20433: ST_TO_ADDR
// if task then
20434: LD_VAR 0 3
20438: IFFALSE 20466
// if task [ 1 ] [ 1 ] = p then
20440: LD_VAR 0 3
20444: PUSH
20445: LD_INT 1
20447: ARRAY
20448: PUSH
20449: LD_INT 1
20451: ARRAY
20452: PUSH
20453: LD_STRING p
20455: EQUAL
20456: IFFALSE 20466
// result := true ;
20458: LD_ADDR_VAR 0 2
20462: PUSH
20463: LD_INT 1
20465: ST_TO_ADDR
// end ;
20466: LD_VAR 0 2
20470: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20471: LD_INT 0
20473: PPUSH
20474: PPUSH
20475: PPUSH
20476: PPUSH
// if pos < 1 then
20477: LD_VAR 0 2
20481: PUSH
20482: LD_INT 1
20484: LESS
20485: IFFALSE 20489
// exit ;
20487: GO 20792
// if pos = 1 then
20489: LD_VAR 0 2
20493: PUSH
20494: LD_INT 1
20496: EQUAL
20497: IFFALSE 20530
// result := Replace ( arr , pos [ 1 ] , value ) else
20499: LD_ADDR_VAR 0 4
20503: PUSH
20504: LD_VAR 0 1
20508: PPUSH
20509: LD_VAR 0 2
20513: PUSH
20514: LD_INT 1
20516: ARRAY
20517: PPUSH
20518: LD_VAR 0 3
20522: PPUSH
20523: CALL_OW 1
20527: ST_TO_ADDR
20528: GO 20792
// begin tmp := arr ;
20530: LD_ADDR_VAR 0 6
20534: PUSH
20535: LD_VAR 0 1
20539: ST_TO_ADDR
// s_arr := [ tmp ] ;
20540: LD_ADDR_VAR 0 7
20544: PUSH
20545: LD_VAR 0 6
20549: PUSH
20550: EMPTY
20551: LIST
20552: ST_TO_ADDR
// for i = 1 to pos - 1 do
20553: LD_ADDR_VAR 0 5
20557: PUSH
20558: DOUBLE
20559: LD_INT 1
20561: DEC
20562: ST_TO_ADDR
20563: LD_VAR 0 2
20567: PUSH
20568: LD_INT 1
20570: MINUS
20571: PUSH
20572: FOR_TO
20573: IFFALSE 20618
// begin tmp := tmp [ pos [ i ] ] ;
20575: LD_ADDR_VAR 0 6
20579: PUSH
20580: LD_VAR 0 6
20584: PUSH
20585: LD_VAR 0 2
20589: PUSH
20590: LD_VAR 0 5
20594: ARRAY
20595: ARRAY
20596: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20597: LD_ADDR_VAR 0 7
20601: PUSH
20602: LD_VAR 0 7
20606: PUSH
20607: LD_VAR 0 6
20611: PUSH
20612: EMPTY
20613: LIST
20614: ADD
20615: ST_TO_ADDR
// end ;
20616: GO 20572
20618: POP
20619: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20620: LD_ADDR_VAR 0 6
20624: PUSH
20625: LD_VAR 0 6
20629: PPUSH
20630: LD_VAR 0 2
20634: PUSH
20635: LD_VAR 0 2
20639: ARRAY
20640: PPUSH
20641: LD_VAR 0 3
20645: PPUSH
20646: CALL_OW 1
20650: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20651: LD_ADDR_VAR 0 7
20655: PUSH
20656: LD_VAR 0 7
20660: PPUSH
20661: LD_VAR 0 7
20665: PPUSH
20666: LD_VAR 0 6
20670: PPUSH
20671: CALL_OW 1
20675: ST_TO_ADDR
// for i = s_arr downto 2 do
20676: LD_ADDR_VAR 0 5
20680: PUSH
20681: DOUBLE
20682: LD_VAR 0 7
20686: INC
20687: ST_TO_ADDR
20688: LD_INT 2
20690: PUSH
20691: FOR_DOWNTO
20692: IFFALSE 20776
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20694: LD_ADDR_VAR 0 6
20698: PUSH
20699: LD_VAR 0 7
20703: PUSH
20704: LD_VAR 0 5
20708: PUSH
20709: LD_INT 1
20711: MINUS
20712: ARRAY
20713: PPUSH
20714: LD_VAR 0 2
20718: PUSH
20719: LD_VAR 0 5
20723: PUSH
20724: LD_INT 1
20726: MINUS
20727: ARRAY
20728: PPUSH
20729: LD_VAR 0 7
20733: PUSH
20734: LD_VAR 0 5
20738: ARRAY
20739: PPUSH
20740: CALL_OW 1
20744: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20745: LD_ADDR_VAR 0 7
20749: PUSH
20750: LD_VAR 0 7
20754: PPUSH
20755: LD_VAR 0 5
20759: PUSH
20760: LD_INT 1
20762: MINUS
20763: PPUSH
20764: LD_VAR 0 6
20768: PPUSH
20769: CALL_OW 1
20773: ST_TO_ADDR
// end ;
20774: GO 20691
20776: POP
20777: POP
// result := s_arr [ 1 ] ;
20778: LD_ADDR_VAR 0 4
20782: PUSH
20783: LD_VAR 0 7
20787: PUSH
20788: LD_INT 1
20790: ARRAY
20791: ST_TO_ADDR
// end ; end ;
20792: LD_VAR 0 4
20796: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20797: LD_INT 0
20799: PPUSH
20800: PPUSH
// if not list then
20801: LD_VAR 0 1
20805: NOT
20806: IFFALSE 20810
// exit ;
20808: GO 20901
// i := list [ pos1 ] ;
20810: LD_ADDR_VAR 0 5
20814: PUSH
20815: LD_VAR 0 1
20819: PUSH
20820: LD_VAR 0 2
20824: ARRAY
20825: ST_TO_ADDR
// if not i then
20826: LD_VAR 0 5
20830: NOT
20831: IFFALSE 20835
// exit ;
20833: GO 20901
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20835: LD_ADDR_VAR 0 1
20839: PUSH
20840: LD_VAR 0 1
20844: PPUSH
20845: LD_VAR 0 2
20849: PPUSH
20850: LD_VAR 0 1
20854: PUSH
20855: LD_VAR 0 3
20859: ARRAY
20860: PPUSH
20861: CALL_OW 1
20865: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20866: LD_ADDR_VAR 0 1
20870: PUSH
20871: LD_VAR 0 1
20875: PPUSH
20876: LD_VAR 0 3
20880: PPUSH
20881: LD_VAR 0 5
20885: PPUSH
20886: CALL_OW 1
20890: ST_TO_ADDR
// result := list ;
20891: LD_ADDR_VAR 0 4
20895: PUSH
20896: LD_VAR 0 1
20900: ST_TO_ADDR
// end ;
20901: LD_VAR 0 4
20905: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20906: LD_INT 0
20908: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20909: LD_ADDR_VAR 0 5
20913: PUSH
20914: LD_VAR 0 1
20918: PPUSH
20919: CALL_OW 250
20923: PPUSH
20924: LD_VAR 0 1
20928: PPUSH
20929: CALL_OW 251
20933: PPUSH
20934: LD_VAR 0 2
20938: PPUSH
20939: LD_VAR 0 3
20943: PPUSH
20944: LD_VAR 0 4
20948: PPUSH
20949: CALL 21327 0 5
20953: ST_TO_ADDR
// end ;
20954: LD_VAR 0 5
20958: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20959: LD_INT 0
20961: PPUSH
20962: PPUSH
20963: PPUSH
20964: PPUSH
// if not list or not unit then
20965: LD_VAR 0 2
20969: NOT
20970: PUSH
20971: LD_VAR 0 1
20975: NOT
20976: OR
20977: IFFALSE 20981
// exit ;
20979: GO 21322
// result := [ ] ;
20981: LD_ADDR_VAR 0 5
20985: PUSH
20986: EMPTY
20987: ST_TO_ADDR
// for i in list do
20988: LD_ADDR_VAR 0 6
20992: PUSH
20993: LD_VAR 0 2
20997: PUSH
20998: FOR_IN
20999: IFFALSE 21217
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21001: LD_ADDR_VAR 0 8
21005: PUSH
21006: LD_VAR 0 1
21010: PPUSH
21011: LD_VAR 0 6
21015: PUSH
21016: LD_INT 1
21018: ARRAY
21019: PPUSH
21020: LD_VAR 0 6
21024: PUSH
21025: LD_INT 2
21027: ARRAY
21028: PPUSH
21029: CALL_OW 297
21033: ST_TO_ADDR
// if not Count ( result ) then
21034: LD_VAR 0 5
21038: PPUSH
21039: CALL 17611 0 1
21043: NOT
21044: IFFALSE 21077
// begin result := Join ( result , [ i , tmp ] ) ;
21046: LD_ADDR_VAR 0 5
21050: PUSH
21051: LD_VAR 0 5
21055: PPUSH
21056: LD_VAR 0 6
21060: PUSH
21061: LD_VAR 0 8
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PPUSH
21070: CALL 53220 0 2
21074: ST_TO_ADDR
// continue ;
21075: GO 20998
// end ; if result [ result ] [ 2 ] <= tmp then
21077: LD_VAR 0 5
21081: PUSH
21082: LD_VAR 0 5
21086: ARRAY
21087: PUSH
21088: LD_INT 2
21090: ARRAY
21091: PUSH
21092: LD_VAR 0 8
21096: LESSEQUAL
21097: IFFALSE 21130
// result := Join ( result , [ i , tmp ] ) else
21099: LD_ADDR_VAR 0 5
21103: PUSH
21104: LD_VAR 0 5
21108: PPUSH
21109: LD_VAR 0 6
21113: PUSH
21114: LD_VAR 0 8
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PPUSH
21123: CALL 53220 0 2
21127: ST_TO_ADDR
21128: GO 21215
// begin for j := 1 to Count ( result ) do
21130: LD_ADDR_VAR 0 7
21134: PUSH
21135: DOUBLE
21136: LD_INT 1
21138: DEC
21139: ST_TO_ADDR
21140: LD_VAR 0 5
21144: PPUSH
21145: CALL 17611 0 1
21149: PUSH
21150: FOR_TO
21151: IFFALSE 21213
// begin if tmp < result [ j ] [ 2 ] then
21153: LD_VAR 0 8
21157: PUSH
21158: LD_VAR 0 5
21162: PUSH
21163: LD_VAR 0 7
21167: ARRAY
21168: PUSH
21169: LD_INT 2
21171: ARRAY
21172: LESS
21173: IFFALSE 21211
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21175: LD_ADDR_VAR 0 5
21179: PUSH
21180: LD_VAR 0 5
21184: PPUSH
21185: LD_VAR 0 7
21189: PPUSH
21190: LD_VAR 0 6
21194: PUSH
21195: LD_VAR 0 8
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PPUSH
21204: CALL_OW 2
21208: ST_TO_ADDR
// break ;
21209: GO 21213
// end ; end ;
21211: GO 21150
21213: POP
21214: POP
// end ; end ;
21215: GO 20998
21217: POP
21218: POP
// if result and not asc then
21219: LD_VAR 0 5
21223: PUSH
21224: LD_VAR 0 3
21228: NOT
21229: AND
21230: IFFALSE 21247
// result := ReverseArray ( result ) ;
21232: LD_ADDR_VAR 0 5
21236: PUSH
21237: LD_VAR 0 5
21241: PPUSH
21242: CALL 48487 0 1
21246: ST_TO_ADDR
// tmp := [ ] ;
21247: LD_ADDR_VAR 0 8
21251: PUSH
21252: EMPTY
21253: ST_TO_ADDR
// if mode then
21254: LD_VAR 0 4
21258: IFFALSE 21322
// begin for i := 1 to result do
21260: LD_ADDR_VAR 0 6
21264: PUSH
21265: DOUBLE
21266: LD_INT 1
21268: DEC
21269: ST_TO_ADDR
21270: LD_VAR 0 5
21274: PUSH
21275: FOR_TO
21276: IFFALSE 21310
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21278: LD_ADDR_VAR 0 8
21282: PUSH
21283: LD_VAR 0 8
21287: PPUSH
21288: LD_VAR 0 5
21292: PUSH
21293: LD_VAR 0 6
21297: ARRAY
21298: PUSH
21299: LD_INT 1
21301: ARRAY
21302: PPUSH
21303: CALL 53220 0 2
21307: ST_TO_ADDR
21308: GO 21275
21310: POP
21311: POP
// result := tmp ;
21312: LD_ADDR_VAR 0 5
21316: PUSH
21317: LD_VAR 0 8
21321: ST_TO_ADDR
// end ; end ;
21322: LD_VAR 0 5
21326: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21327: LD_INT 0
21329: PPUSH
21330: PPUSH
21331: PPUSH
21332: PPUSH
// if not list then
21333: LD_VAR 0 3
21337: NOT
21338: IFFALSE 21342
// exit ;
21340: GO 21730
// result := [ ] ;
21342: LD_ADDR_VAR 0 6
21346: PUSH
21347: EMPTY
21348: ST_TO_ADDR
// for i in list do
21349: LD_ADDR_VAR 0 7
21353: PUSH
21354: LD_VAR 0 3
21358: PUSH
21359: FOR_IN
21360: IFFALSE 21562
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21362: LD_ADDR_VAR 0 9
21366: PUSH
21367: LD_VAR 0 7
21371: PPUSH
21372: LD_VAR 0 1
21376: PPUSH
21377: LD_VAR 0 2
21381: PPUSH
21382: CALL_OW 297
21386: ST_TO_ADDR
// if not result then
21387: LD_VAR 0 6
21391: NOT
21392: IFFALSE 21418
// result := [ [ i , tmp ] ] else
21394: LD_ADDR_VAR 0 6
21398: PUSH
21399: LD_VAR 0 7
21403: PUSH
21404: LD_VAR 0 9
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: EMPTY
21414: LIST
21415: ST_TO_ADDR
21416: GO 21560
// begin if result [ result ] [ 2 ] <= tmp then
21418: LD_VAR 0 6
21422: PUSH
21423: LD_VAR 0 6
21427: ARRAY
21428: PUSH
21429: LD_INT 2
21431: ARRAY
21432: PUSH
21433: LD_VAR 0 9
21437: LESSEQUAL
21438: IFFALSE 21480
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21440: LD_ADDR_VAR 0 6
21444: PUSH
21445: LD_VAR 0 6
21449: PPUSH
21450: LD_VAR 0 6
21454: PUSH
21455: LD_INT 1
21457: PLUS
21458: PPUSH
21459: LD_VAR 0 7
21463: PUSH
21464: LD_VAR 0 9
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PPUSH
21473: CALL_OW 2
21477: ST_TO_ADDR
21478: GO 21560
// for j := 1 to result do
21480: LD_ADDR_VAR 0 8
21484: PUSH
21485: DOUBLE
21486: LD_INT 1
21488: DEC
21489: ST_TO_ADDR
21490: LD_VAR 0 6
21494: PUSH
21495: FOR_TO
21496: IFFALSE 21558
// begin if tmp < result [ j ] [ 2 ] then
21498: LD_VAR 0 9
21502: PUSH
21503: LD_VAR 0 6
21507: PUSH
21508: LD_VAR 0 8
21512: ARRAY
21513: PUSH
21514: LD_INT 2
21516: ARRAY
21517: LESS
21518: IFFALSE 21556
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21520: LD_ADDR_VAR 0 6
21524: PUSH
21525: LD_VAR 0 6
21529: PPUSH
21530: LD_VAR 0 8
21534: PPUSH
21535: LD_VAR 0 7
21539: PUSH
21540: LD_VAR 0 9
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PPUSH
21549: CALL_OW 2
21553: ST_TO_ADDR
// break ;
21554: GO 21558
// end ; end ;
21556: GO 21495
21558: POP
21559: POP
// end ; end ;
21560: GO 21359
21562: POP
21563: POP
// if result and not asc then
21564: LD_VAR 0 6
21568: PUSH
21569: LD_VAR 0 4
21573: NOT
21574: AND
21575: IFFALSE 21650
// begin tmp := result ;
21577: LD_ADDR_VAR 0 9
21581: PUSH
21582: LD_VAR 0 6
21586: ST_TO_ADDR
// for i = tmp downto 1 do
21587: LD_ADDR_VAR 0 7
21591: PUSH
21592: DOUBLE
21593: LD_VAR 0 9
21597: INC
21598: ST_TO_ADDR
21599: LD_INT 1
21601: PUSH
21602: FOR_DOWNTO
21603: IFFALSE 21648
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21605: LD_ADDR_VAR 0 6
21609: PUSH
21610: LD_VAR 0 6
21614: PPUSH
21615: LD_VAR 0 9
21619: PUSH
21620: LD_VAR 0 7
21624: MINUS
21625: PUSH
21626: LD_INT 1
21628: PLUS
21629: PPUSH
21630: LD_VAR 0 9
21634: PUSH
21635: LD_VAR 0 7
21639: ARRAY
21640: PPUSH
21641: CALL_OW 1
21645: ST_TO_ADDR
21646: GO 21602
21648: POP
21649: POP
// end ; tmp := [ ] ;
21650: LD_ADDR_VAR 0 9
21654: PUSH
21655: EMPTY
21656: ST_TO_ADDR
// if mode then
21657: LD_VAR 0 5
21661: IFFALSE 21730
// begin for i = 1 to result do
21663: LD_ADDR_VAR 0 7
21667: PUSH
21668: DOUBLE
21669: LD_INT 1
21671: DEC
21672: ST_TO_ADDR
21673: LD_VAR 0 6
21677: PUSH
21678: FOR_TO
21679: IFFALSE 21718
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21681: LD_ADDR_VAR 0 9
21685: PUSH
21686: LD_VAR 0 9
21690: PPUSH
21691: LD_VAR 0 7
21695: PPUSH
21696: LD_VAR 0 6
21700: PUSH
21701: LD_VAR 0 7
21705: ARRAY
21706: PUSH
21707: LD_INT 1
21709: ARRAY
21710: PPUSH
21711: CALL_OW 1
21715: ST_TO_ADDR
21716: GO 21678
21718: POP
21719: POP
// result := tmp ;
21720: LD_ADDR_VAR 0 6
21724: PUSH
21725: LD_VAR 0 9
21729: ST_TO_ADDR
// end ; end ;
21730: LD_VAR 0 6
21734: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21735: LD_INT 0
21737: PPUSH
21738: PPUSH
21739: PPUSH
21740: PPUSH
21741: PPUSH
21742: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21743: LD_ADDR_VAR 0 5
21747: PUSH
21748: LD_INT 0
21750: PUSH
21751: LD_INT 0
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: EMPTY
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: ST_TO_ADDR
// if not x or not y then
21765: LD_VAR 0 2
21769: NOT
21770: PUSH
21771: LD_VAR 0 3
21775: NOT
21776: OR
21777: IFFALSE 21781
// exit ;
21779: GO 23431
// if not range then
21781: LD_VAR 0 4
21785: NOT
21786: IFFALSE 21796
// range := 10 ;
21788: LD_ADDR_VAR 0 4
21792: PUSH
21793: LD_INT 10
21795: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21796: LD_ADDR_VAR 0 8
21800: PUSH
21801: LD_INT 81
21803: PUSH
21804: LD_VAR 0 1
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 92
21815: PUSH
21816: LD_VAR 0 2
21820: PUSH
21821: LD_VAR 0 3
21825: PUSH
21826: LD_VAR 0 4
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 3
21839: PUSH
21840: LD_INT 21
21842: PUSH
21843: LD_INT 3
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: LIST
21858: PPUSH
21859: CALL_OW 69
21863: ST_TO_ADDR
// if not tmp then
21864: LD_VAR 0 8
21868: NOT
21869: IFFALSE 21873
// exit ;
21871: GO 23431
// for i in tmp do
21873: LD_ADDR_VAR 0 6
21877: PUSH
21878: LD_VAR 0 8
21882: PUSH
21883: FOR_IN
21884: IFFALSE 23406
// begin points := [ 0 , 0 , 0 ] ;
21886: LD_ADDR_VAR 0 9
21890: PUSH
21891: LD_INT 0
21893: PUSH
21894: LD_INT 0
21896: PUSH
21897: LD_INT 0
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: LIST
21904: ST_TO_ADDR
// bpoints := 1 ;
21905: LD_ADDR_VAR 0 10
21909: PUSH
21910: LD_INT 1
21912: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21913: LD_VAR 0 6
21917: PPUSH
21918: CALL_OW 247
21922: PUSH
21923: LD_INT 1
21925: DOUBLE
21926: EQUAL
21927: IFTRUE 21931
21929: GO 22509
21931: POP
// begin if GetClass ( i ) = 1 then
21932: LD_VAR 0 6
21936: PPUSH
21937: CALL_OW 257
21941: PUSH
21942: LD_INT 1
21944: EQUAL
21945: IFFALSE 21966
// points := [ 10 , 5 , 3 ] ;
21947: LD_ADDR_VAR 0 9
21951: PUSH
21952: LD_INT 10
21954: PUSH
21955: LD_INT 5
21957: PUSH
21958: LD_INT 3
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21966: LD_VAR 0 6
21970: PPUSH
21971: CALL_OW 257
21975: PUSH
21976: LD_INT 2
21978: PUSH
21979: LD_INT 3
21981: PUSH
21982: LD_INT 4
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: IN
21990: IFFALSE 22011
// points := [ 3 , 2 , 1 ] ;
21992: LD_ADDR_VAR 0 9
21996: PUSH
21997: LD_INT 3
21999: PUSH
22000: LD_INT 2
22002: PUSH
22003: LD_INT 1
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22011: LD_VAR 0 6
22015: PPUSH
22016: CALL_OW 257
22020: PUSH
22021: LD_INT 5
22023: EQUAL
22024: IFFALSE 22045
// points := [ 130 , 5 , 2 ] ;
22026: LD_ADDR_VAR 0 9
22030: PUSH
22031: LD_INT 130
22033: PUSH
22034: LD_INT 5
22036: PUSH
22037: LD_INT 2
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: LIST
22044: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22045: LD_VAR 0 6
22049: PPUSH
22050: CALL_OW 257
22054: PUSH
22055: LD_INT 8
22057: EQUAL
22058: IFFALSE 22079
// points := [ 35 , 35 , 30 ] ;
22060: LD_ADDR_VAR 0 9
22064: PUSH
22065: LD_INT 35
22067: PUSH
22068: LD_INT 35
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22079: LD_VAR 0 6
22083: PPUSH
22084: CALL_OW 257
22088: PUSH
22089: LD_INT 9
22091: EQUAL
22092: IFFALSE 22113
// points := [ 20 , 55 , 40 ] ;
22094: LD_ADDR_VAR 0 9
22098: PUSH
22099: LD_INT 20
22101: PUSH
22102: LD_INT 55
22104: PUSH
22105: LD_INT 40
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: LIST
22112: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22113: LD_VAR 0 6
22117: PPUSH
22118: CALL_OW 257
22122: PUSH
22123: LD_INT 12
22125: PUSH
22126: LD_INT 16
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: IN
22133: IFFALSE 22154
// points := [ 5 , 3 , 2 ] ;
22135: LD_ADDR_VAR 0 9
22139: PUSH
22140: LD_INT 5
22142: PUSH
22143: LD_INT 3
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: LIST
22153: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22154: LD_VAR 0 6
22158: PPUSH
22159: CALL_OW 257
22163: PUSH
22164: LD_INT 17
22166: EQUAL
22167: IFFALSE 22188
// points := [ 100 , 50 , 75 ] ;
22169: LD_ADDR_VAR 0 9
22173: PUSH
22174: LD_INT 100
22176: PUSH
22177: LD_INT 50
22179: PUSH
22180: LD_INT 75
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22188: LD_VAR 0 6
22192: PPUSH
22193: CALL_OW 257
22197: PUSH
22198: LD_INT 15
22200: EQUAL
22201: IFFALSE 22222
// points := [ 10 , 5 , 3 ] ;
22203: LD_ADDR_VAR 0 9
22207: PUSH
22208: LD_INT 10
22210: PUSH
22211: LD_INT 5
22213: PUSH
22214: LD_INT 3
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: LIST
22221: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22222: LD_VAR 0 6
22226: PPUSH
22227: CALL_OW 257
22231: PUSH
22232: LD_INT 14
22234: EQUAL
22235: IFFALSE 22256
// points := [ 10 , 0 , 0 ] ;
22237: LD_ADDR_VAR 0 9
22241: PUSH
22242: LD_INT 10
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22256: LD_VAR 0 6
22260: PPUSH
22261: CALL_OW 257
22265: PUSH
22266: LD_INT 11
22268: EQUAL
22269: IFFALSE 22290
// points := [ 30 , 10 , 5 ] ;
22271: LD_ADDR_VAR 0 9
22275: PUSH
22276: LD_INT 30
22278: PUSH
22279: LD_INT 10
22281: PUSH
22282: LD_INT 5
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: LIST
22289: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22290: LD_VAR 0 1
22294: PPUSH
22295: LD_INT 5
22297: PPUSH
22298: CALL_OW 321
22302: PUSH
22303: LD_INT 2
22305: EQUAL
22306: IFFALSE 22323
// bpoints := bpoints * 1.8 ;
22308: LD_ADDR_VAR 0 10
22312: PUSH
22313: LD_VAR 0 10
22317: PUSH
22318: LD_REAL  1.80000000000000E+0000
22321: MUL
22322: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22323: LD_VAR 0 6
22327: PPUSH
22328: CALL_OW 257
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: LD_INT 3
22341: PUSH
22342: LD_INT 4
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: IN
22351: PUSH
22352: LD_VAR 0 1
22356: PPUSH
22357: LD_INT 51
22359: PPUSH
22360: CALL_OW 321
22364: PUSH
22365: LD_INT 2
22367: EQUAL
22368: AND
22369: IFFALSE 22386
// bpoints := bpoints * 1.2 ;
22371: LD_ADDR_VAR 0 10
22375: PUSH
22376: LD_VAR 0 10
22380: PUSH
22381: LD_REAL  1.20000000000000E+0000
22384: MUL
22385: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22386: LD_VAR 0 6
22390: PPUSH
22391: CALL_OW 257
22395: PUSH
22396: LD_INT 5
22398: PUSH
22399: LD_INT 7
22401: PUSH
22402: LD_INT 9
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: LIST
22409: IN
22410: PUSH
22411: LD_VAR 0 1
22415: PPUSH
22416: LD_INT 52
22418: PPUSH
22419: CALL_OW 321
22423: PUSH
22424: LD_INT 2
22426: EQUAL
22427: AND
22428: IFFALSE 22445
// bpoints := bpoints * 1.5 ;
22430: LD_ADDR_VAR 0 10
22434: PUSH
22435: LD_VAR 0 10
22439: PUSH
22440: LD_REAL  1.50000000000000E+0000
22443: MUL
22444: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22445: LD_VAR 0 1
22449: PPUSH
22450: LD_INT 66
22452: PPUSH
22453: CALL_OW 321
22457: PUSH
22458: LD_INT 2
22460: EQUAL
22461: IFFALSE 22478
// bpoints := bpoints * 1.1 ;
22463: LD_ADDR_VAR 0 10
22467: PUSH
22468: LD_VAR 0 10
22472: PUSH
22473: LD_REAL  1.10000000000000E+0000
22476: MUL
22477: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22478: LD_ADDR_VAR 0 10
22482: PUSH
22483: LD_VAR 0 10
22487: PUSH
22488: LD_VAR 0 6
22492: PPUSH
22493: LD_INT 1
22495: PPUSH
22496: CALL_OW 259
22500: PUSH
22501: LD_REAL  1.15000000000000E+0000
22504: MUL
22505: MUL
22506: ST_TO_ADDR
// end ; unit_vehicle :
22507: GO 23335
22509: LD_INT 2
22511: DOUBLE
22512: EQUAL
22513: IFTRUE 22517
22515: GO 23323
22517: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22518: LD_VAR 0 6
22522: PPUSH
22523: CALL_OW 264
22527: PUSH
22528: LD_INT 2
22530: PUSH
22531: LD_INT 42
22533: PUSH
22534: LD_INT 24
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: IN
22542: IFFALSE 22563
// points := [ 25 , 5 , 3 ] ;
22544: LD_ADDR_VAR 0 9
22548: PUSH
22549: LD_INT 25
22551: PUSH
22552: LD_INT 5
22554: PUSH
22555: LD_INT 3
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22563: LD_VAR 0 6
22567: PPUSH
22568: CALL_OW 264
22572: PUSH
22573: LD_INT 4
22575: PUSH
22576: LD_INT 43
22578: PUSH
22579: LD_INT 25
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: IN
22587: IFFALSE 22608
// points := [ 40 , 15 , 5 ] ;
22589: LD_ADDR_VAR 0 9
22593: PUSH
22594: LD_INT 40
22596: PUSH
22597: LD_INT 15
22599: PUSH
22600: LD_INT 5
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: LIST
22607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22608: LD_VAR 0 6
22612: PPUSH
22613: CALL_OW 264
22617: PUSH
22618: LD_INT 3
22620: PUSH
22621: LD_INT 23
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: IN
22628: IFFALSE 22649
// points := [ 7 , 25 , 8 ] ;
22630: LD_ADDR_VAR 0 9
22634: PUSH
22635: LD_INT 7
22637: PUSH
22638: LD_INT 25
22640: PUSH
22641: LD_INT 8
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22649: LD_VAR 0 6
22653: PPUSH
22654: CALL_OW 264
22658: PUSH
22659: LD_INT 5
22661: PUSH
22662: LD_INT 27
22664: PUSH
22665: LD_INT 44
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: IN
22673: IFFALSE 22694
// points := [ 14 , 50 , 16 ] ;
22675: LD_ADDR_VAR 0 9
22679: PUSH
22680: LD_INT 14
22682: PUSH
22683: LD_INT 50
22685: PUSH
22686: LD_INT 16
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: LIST
22693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22694: LD_VAR 0 6
22698: PPUSH
22699: CALL_OW 264
22703: PUSH
22704: LD_INT 6
22706: PUSH
22707: LD_INT 46
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: IN
22714: IFFALSE 22735
// points := [ 32 , 120 , 70 ] ;
22716: LD_ADDR_VAR 0 9
22720: PUSH
22721: LD_INT 32
22723: PUSH
22724: LD_INT 120
22726: PUSH
22727: LD_INT 70
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22735: LD_VAR 0 6
22739: PPUSH
22740: CALL_OW 264
22744: PUSH
22745: LD_INT 7
22747: PUSH
22748: LD_INT 28
22750: PUSH
22751: LD_INT 45
22753: PUSH
22754: LD_INT 92
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: IN
22763: IFFALSE 22784
// points := [ 35 , 20 , 45 ] ;
22765: LD_ADDR_VAR 0 9
22769: PUSH
22770: LD_INT 35
22772: PUSH
22773: LD_INT 20
22775: PUSH
22776: LD_INT 45
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22784: LD_VAR 0 6
22788: PPUSH
22789: CALL_OW 264
22793: PUSH
22794: LD_INT 47
22796: PUSH
22797: EMPTY
22798: LIST
22799: IN
22800: IFFALSE 22821
// points := [ 67 , 45 , 75 ] ;
22802: LD_ADDR_VAR 0 9
22806: PUSH
22807: LD_INT 67
22809: PUSH
22810: LD_INT 45
22812: PUSH
22813: LD_INT 75
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22821: LD_VAR 0 6
22825: PPUSH
22826: CALL_OW 264
22830: PUSH
22831: LD_INT 26
22833: PUSH
22834: EMPTY
22835: LIST
22836: IN
22837: IFFALSE 22858
// points := [ 120 , 30 , 80 ] ;
22839: LD_ADDR_VAR 0 9
22843: PUSH
22844: LD_INT 120
22846: PUSH
22847: LD_INT 30
22849: PUSH
22850: LD_INT 80
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: LIST
22857: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22858: LD_VAR 0 6
22862: PPUSH
22863: CALL_OW 264
22867: PUSH
22868: LD_INT 22
22870: PUSH
22871: EMPTY
22872: LIST
22873: IN
22874: IFFALSE 22895
// points := [ 40 , 1 , 1 ] ;
22876: LD_ADDR_VAR 0 9
22880: PUSH
22881: LD_INT 40
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: LIST
22894: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22895: LD_VAR 0 6
22899: PPUSH
22900: CALL_OW 264
22904: PUSH
22905: LD_INT 29
22907: PUSH
22908: EMPTY
22909: LIST
22910: IN
22911: IFFALSE 22932
// points := [ 70 , 200 , 400 ] ;
22913: LD_ADDR_VAR 0 9
22917: PUSH
22918: LD_INT 70
22920: PUSH
22921: LD_INT 200
22923: PUSH
22924: LD_INT 400
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: LIST
22931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22932: LD_VAR 0 6
22936: PPUSH
22937: CALL_OW 264
22941: PUSH
22942: LD_INT 14
22944: PUSH
22945: LD_INT 53
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: IN
22952: IFFALSE 22973
// points := [ 40 , 10 , 20 ] ;
22954: LD_ADDR_VAR 0 9
22958: PUSH
22959: LD_INT 40
22961: PUSH
22962: LD_INT 10
22964: PUSH
22965: LD_INT 20
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: LIST
22972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22973: LD_VAR 0 6
22977: PPUSH
22978: CALL_OW 264
22982: PUSH
22983: LD_INT 9
22985: PUSH
22986: EMPTY
22987: LIST
22988: IN
22989: IFFALSE 23010
// points := [ 5 , 70 , 20 ] ;
22991: LD_ADDR_VAR 0 9
22995: PUSH
22996: LD_INT 5
22998: PUSH
22999: LD_INT 70
23001: PUSH
23002: LD_INT 20
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23010: LD_VAR 0 6
23014: PPUSH
23015: CALL_OW 264
23019: PUSH
23020: LD_INT 10
23022: PUSH
23023: EMPTY
23024: LIST
23025: IN
23026: IFFALSE 23047
// points := [ 35 , 110 , 70 ] ;
23028: LD_ADDR_VAR 0 9
23032: PUSH
23033: LD_INT 35
23035: PUSH
23036: LD_INT 110
23038: PUSH
23039: LD_INT 70
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23047: LD_VAR 0 6
23051: PPUSH
23052: CALL_OW 265
23056: PUSH
23057: LD_INT 25
23059: EQUAL
23060: IFFALSE 23081
// points := [ 80 , 65 , 100 ] ;
23062: LD_ADDR_VAR 0 9
23066: PUSH
23067: LD_INT 80
23069: PUSH
23070: LD_INT 65
23072: PUSH
23073: LD_INT 100
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23081: LD_VAR 0 6
23085: PPUSH
23086: CALL_OW 263
23090: PUSH
23091: LD_INT 1
23093: EQUAL
23094: IFFALSE 23129
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23096: LD_ADDR_VAR 0 10
23100: PUSH
23101: LD_VAR 0 10
23105: PUSH
23106: LD_VAR 0 6
23110: PPUSH
23111: CALL_OW 311
23115: PPUSH
23116: LD_INT 3
23118: PPUSH
23119: CALL_OW 259
23123: PUSH
23124: LD_INT 4
23126: MUL
23127: MUL
23128: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23129: LD_VAR 0 6
23133: PPUSH
23134: CALL_OW 263
23138: PUSH
23139: LD_INT 2
23141: EQUAL
23142: IFFALSE 23193
// begin j := IsControledBy ( i ) ;
23144: LD_ADDR_VAR 0 7
23148: PUSH
23149: LD_VAR 0 6
23153: PPUSH
23154: CALL_OW 312
23158: ST_TO_ADDR
// if j then
23159: LD_VAR 0 7
23163: IFFALSE 23193
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23165: LD_ADDR_VAR 0 10
23169: PUSH
23170: LD_VAR 0 10
23174: PUSH
23175: LD_VAR 0 7
23179: PPUSH
23180: LD_INT 3
23182: PPUSH
23183: CALL_OW 259
23187: PUSH
23188: LD_INT 3
23190: MUL
23191: MUL
23192: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23193: LD_VAR 0 6
23197: PPUSH
23198: CALL_OW 264
23202: PUSH
23203: LD_INT 5
23205: PUSH
23206: LD_INT 6
23208: PUSH
23209: LD_INT 46
23211: PUSH
23212: LD_INT 44
23214: PUSH
23215: LD_INT 47
23217: PUSH
23218: LD_INT 45
23220: PUSH
23221: LD_INT 28
23223: PUSH
23224: LD_INT 7
23226: PUSH
23227: LD_INT 27
23229: PUSH
23230: LD_INT 29
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: IN
23245: PUSH
23246: LD_VAR 0 1
23250: PPUSH
23251: LD_INT 52
23253: PPUSH
23254: CALL_OW 321
23258: PUSH
23259: LD_INT 2
23261: EQUAL
23262: AND
23263: IFFALSE 23280
// bpoints := bpoints * 1.2 ;
23265: LD_ADDR_VAR 0 10
23269: PUSH
23270: LD_VAR 0 10
23274: PUSH
23275: LD_REAL  1.20000000000000E+0000
23278: MUL
23279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23280: LD_VAR 0 6
23284: PPUSH
23285: CALL_OW 264
23289: PUSH
23290: LD_INT 6
23292: PUSH
23293: LD_INT 46
23295: PUSH
23296: LD_INT 47
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: LIST
23303: IN
23304: IFFALSE 23321
// bpoints := bpoints * 1.2 ;
23306: LD_ADDR_VAR 0 10
23310: PUSH
23311: LD_VAR 0 10
23315: PUSH
23316: LD_REAL  1.20000000000000E+0000
23319: MUL
23320: ST_TO_ADDR
// end ; unit_building :
23321: GO 23335
23323: LD_INT 3
23325: DOUBLE
23326: EQUAL
23327: IFTRUE 23331
23329: GO 23334
23331: POP
// ; end ;
23332: GO 23335
23334: POP
// for j = 1 to 3 do
23335: LD_ADDR_VAR 0 7
23339: PUSH
23340: DOUBLE
23341: LD_INT 1
23343: DEC
23344: ST_TO_ADDR
23345: LD_INT 3
23347: PUSH
23348: FOR_TO
23349: IFFALSE 23402
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23351: LD_ADDR_VAR 0 5
23355: PUSH
23356: LD_VAR 0 5
23360: PPUSH
23361: LD_VAR 0 7
23365: PPUSH
23366: LD_VAR 0 5
23370: PUSH
23371: LD_VAR 0 7
23375: ARRAY
23376: PUSH
23377: LD_VAR 0 9
23381: PUSH
23382: LD_VAR 0 7
23386: ARRAY
23387: PUSH
23388: LD_VAR 0 10
23392: MUL
23393: PLUS
23394: PPUSH
23395: CALL_OW 1
23399: ST_TO_ADDR
23400: GO 23348
23402: POP
23403: POP
// end ;
23404: GO 21883
23406: POP
23407: POP
// result := Replace ( result , 4 , tmp ) ;
23408: LD_ADDR_VAR 0 5
23412: PUSH
23413: LD_VAR 0 5
23417: PPUSH
23418: LD_INT 4
23420: PPUSH
23421: LD_VAR 0 8
23425: PPUSH
23426: CALL_OW 1
23430: ST_TO_ADDR
// end ;
23431: LD_VAR 0 5
23435: RET
// export function DangerAtRange ( unit , range ) ; begin
23436: LD_INT 0
23438: PPUSH
// if not unit then
23439: LD_VAR 0 1
23443: NOT
23444: IFFALSE 23448
// exit ;
23446: GO 23493
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23448: LD_ADDR_VAR 0 3
23452: PUSH
23453: LD_VAR 0 1
23457: PPUSH
23458: CALL_OW 255
23462: PPUSH
23463: LD_VAR 0 1
23467: PPUSH
23468: CALL_OW 250
23472: PPUSH
23473: LD_VAR 0 1
23477: PPUSH
23478: CALL_OW 251
23482: PPUSH
23483: LD_VAR 0 2
23487: PPUSH
23488: CALL 21735 0 4
23492: ST_TO_ADDR
// end ;
23493: LD_VAR 0 3
23497: RET
// export function DangerInArea ( side , area ) ; begin
23498: LD_INT 0
23500: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23501: LD_ADDR_VAR 0 3
23505: PUSH
23506: LD_VAR 0 2
23510: PPUSH
23511: LD_INT 81
23513: PUSH
23514: LD_VAR 0 1
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PPUSH
23523: CALL_OW 70
23527: ST_TO_ADDR
// end ;
23528: LD_VAR 0 3
23532: RET
// export function IsExtension ( b ) ; begin
23533: LD_INT 0
23535: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23536: LD_ADDR_VAR 0 2
23540: PUSH
23541: LD_VAR 0 1
23545: PUSH
23546: LD_INT 23
23548: PUSH
23549: LD_INT 20
23551: PUSH
23552: LD_INT 22
23554: PUSH
23555: LD_INT 17
23557: PUSH
23558: LD_INT 24
23560: PUSH
23561: LD_INT 21
23563: PUSH
23564: LD_INT 19
23566: PUSH
23567: LD_INT 16
23569: PUSH
23570: LD_INT 25
23572: PUSH
23573: LD_INT 18
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: IN
23588: ST_TO_ADDR
// end ;
23589: LD_VAR 0 2
23593: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23594: LD_INT 0
23596: PPUSH
23597: PPUSH
23598: PPUSH
// result := [ ] ;
23599: LD_ADDR_VAR 0 4
23603: PUSH
23604: EMPTY
23605: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23606: LD_ADDR_VAR 0 5
23610: PUSH
23611: LD_VAR 0 2
23615: PPUSH
23616: LD_INT 21
23618: PUSH
23619: LD_INT 3
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PPUSH
23626: CALL_OW 70
23630: ST_TO_ADDR
// if not tmp then
23631: LD_VAR 0 5
23635: NOT
23636: IFFALSE 23640
// exit ;
23638: GO 23704
// if checkLink then
23640: LD_VAR 0 3
23644: IFFALSE 23694
// begin for i in tmp do
23646: LD_ADDR_VAR 0 6
23650: PUSH
23651: LD_VAR 0 5
23655: PUSH
23656: FOR_IN
23657: IFFALSE 23692
// if GetBase ( i ) <> base then
23659: LD_VAR 0 6
23663: PPUSH
23664: CALL_OW 274
23668: PUSH
23669: LD_VAR 0 1
23673: NONEQUAL
23674: IFFALSE 23690
// ComLinkToBase ( base , i ) ;
23676: LD_VAR 0 1
23680: PPUSH
23681: LD_VAR 0 6
23685: PPUSH
23686: CALL_OW 169
23690: GO 23656
23692: POP
23693: POP
// end ; result := tmp ;
23694: LD_ADDR_VAR 0 4
23698: PUSH
23699: LD_VAR 0 5
23703: ST_TO_ADDR
// end ;
23704: LD_VAR 0 4
23708: RET
// export function ComComplete ( units , b ) ; var i ; begin
23709: LD_INT 0
23711: PPUSH
23712: PPUSH
// if not units then
23713: LD_VAR 0 1
23717: NOT
23718: IFFALSE 23722
// exit ;
23720: GO 23812
// for i in units do
23722: LD_ADDR_VAR 0 4
23726: PUSH
23727: LD_VAR 0 1
23731: PUSH
23732: FOR_IN
23733: IFFALSE 23810
// if BuildingStatus ( b ) = bs_build then
23735: LD_VAR 0 2
23739: PPUSH
23740: CALL_OW 461
23744: PUSH
23745: LD_INT 1
23747: EQUAL
23748: IFFALSE 23808
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23750: LD_VAR 0 4
23754: PPUSH
23755: LD_STRING h
23757: PUSH
23758: LD_VAR 0 2
23762: PPUSH
23763: CALL_OW 250
23767: PUSH
23768: LD_VAR 0 2
23772: PPUSH
23773: CALL_OW 251
23777: PUSH
23778: LD_VAR 0 2
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: LD_INT 0
23788: PUSH
23789: LD_INT 0
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: PUSH
23801: EMPTY
23802: LIST
23803: PPUSH
23804: CALL_OW 446
23808: GO 23732
23810: POP
23811: POP
// end ;
23812: LD_VAR 0 3
23816: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23817: LD_INT 0
23819: PPUSH
23820: PPUSH
23821: PPUSH
23822: PPUSH
23823: PPUSH
23824: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23825: LD_VAR 0 1
23829: NOT
23830: PUSH
23831: LD_VAR 0 1
23835: PPUSH
23836: CALL_OW 263
23840: PUSH
23841: LD_INT 2
23843: NONEQUAL
23844: OR
23845: IFFALSE 23849
// exit ;
23847: GO 24165
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23849: LD_ADDR_VAR 0 6
23853: PUSH
23854: LD_INT 22
23856: PUSH
23857: LD_VAR 0 1
23861: PPUSH
23862: CALL_OW 255
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 2
23873: PUSH
23874: LD_INT 30
23876: PUSH
23877: LD_INT 36
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 34
23886: PUSH
23887: LD_INT 31
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PPUSH
23903: CALL_OW 69
23907: ST_TO_ADDR
// if not tmp then
23908: LD_VAR 0 6
23912: NOT
23913: IFFALSE 23917
// exit ;
23915: GO 24165
// result := [ ] ;
23917: LD_ADDR_VAR 0 2
23921: PUSH
23922: EMPTY
23923: ST_TO_ADDR
// for i in tmp do
23924: LD_ADDR_VAR 0 3
23928: PUSH
23929: LD_VAR 0 6
23933: PUSH
23934: FOR_IN
23935: IFFALSE 24006
// begin t := UnitsInside ( i ) ;
23937: LD_ADDR_VAR 0 4
23941: PUSH
23942: LD_VAR 0 3
23946: PPUSH
23947: CALL_OW 313
23951: ST_TO_ADDR
// if t then
23952: LD_VAR 0 4
23956: IFFALSE 24004
// for j in t do
23958: LD_ADDR_VAR 0 7
23962: PUSH
23963: LD_VAR 0 4
23967: PUSH
23968: FOR_IN
23969: IFFALSE 24002
// result := Replace ( result , result + 1 , j ) ;
23971: LD_ADDR_VAR 0 2
23975: PUSH
23976: LD_VAR 0 2
23980: PPUSH
23981: LD_VAR 0 2
23985: PUSH
23986: LD_INT 1
23988: PLUS
23989: PPUSH
23990: LD_VAR 0 7
23994: PPUSH
23995: CALL_OW 1
23999: ST_TO_ADDR
24000: GO 23968
24002: POP
24003: POP
// end ;
24004: GO 23934
24006: POP
24007: POP
// if not result then
24008: LD_VAR 0 2
24012: NOT
24013: IFFALSE 24017
// exit ;
24015: GO 24165
// mech := result [ 1 ] ;
24017: LD_ADDR_VAR 0 5
24021: PUSH
24022: LD_VAR 0 2
24026: PUSH
24027: LD_INT 1
24029: ARRAY
24030: ST_TO_ADDR
// if result > 1 then
24031: LD_VAR 0 2
24035: PUSH
24036: LD_INT 1
24038: GREATER
24039: IFFALSE 24151
// begin for i = 2 to result do
24041: LD_ADDR_VAR 0 3
24045: PUSH
24046: DOUBLE
24047: LD_INT 2
24049: DEC
24050: ST_TO_ADDR
24051: LD_VAR 0 2
24055: PUSH
24056: FOR_TO
24057: IFFALSE 24149
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24059: LD_ADDR_VAR 0 4
24063: PUSH
24064: LD_VAR 0 2
24068: PUSH
24069: LD_VAR 0 3
24073: ARRAY
24074: PPUSH
24075: LD_INT 3
24077: PPUSH
24078: CALL_OW 259
24082: PUSH
24083: LD_VAR 0 2
24087: PUSH
24088: LD_VAR 0 3
24092: ARRAY
24093: PPUSH
24094: CALL_OW 432
24098: MINUS
24099: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24100: LD_VAR 0 4
24104: PUSH
24105: LD_VAR 0 5
24109: PPUSH
24110: LD_INT 3
24112: PPUSH
24113: CALL_OW 259
24117: PUSH
24118: LD_VAR 0 5
24122: PPUSH
24123: CALL_OW 432
24127: MINUS
24128: GREATEREQUAL
24129: IFFALSE 24147
// mech := result [ i ] ;
24131: LD_ADDR_VAR 0 5
24135: PUSH
24136: LD_VAR 0 2
24140: PUSH
24141: LD_VAR 0 3
24145: ARRAY
24146: ST_TO_ADDR
// end ;
24147: GO 24056
24149: POP
24150: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24151: LD_VAR 0 1
24155: PPUSH
24156: LD_VAR 0 5
24160: PPUSH
24161: CALL_OW 135
// end ;
24165: LD_VAR 0 2
24169: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24170: LD_INT 0
24172: PPUSH
24173: PPUSH
24174: PPUSH
24175: PPUSH
24176: PPUSH
24177: PPUSH
24178: PPUSH
24179: PPUSH
24180: PPUSH
24181: PPUSH
24182: PPUSH
24183: PPUSH
24184: PPUSH
// result := [ ] ;
24185: LD_ADDR_VAR 0 7
24189: PUSH
24190: EMPTY
24191: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24192: LD_VAR 0 1
24196: PPUSH
24197: CALL_OW 266
24201: PUSH
24202: LD_INT 0
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: IN
24212: NOT
24213: IFFALSE 24217
// exit ;
24215: GO 25851
// if name then
24217: LD_VAR 0 3
24221: IFFALSE 24237
// SetBName ( base_dep , name ) ;
24223: LD_VAR 0 1
24227: PPUSH
24228: LD_VAR 0 3
24232: PPUSH
24233: CALL_OW 500
// base := GetBase ( base_dep ) ;
24237: LD_ADDR_VAR 0 15
24241: PUSH
24242: LD_VAR 0 1
24246: PPUSH
24247: CALL_OW 274
24251: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24252: LD_ADDR_VAR 0 16
24256: PUSH
24257: LD_VAR 0 1
24261: PPUSH
24262: CALL_OW 255
24266: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24267: LD_ADDR_VAR 0 17
24271: PUSH
24272: LD_VAR 0 1
24276: PPUSH
24277: CALL_OW 248
24281: ST_TO_ADDR
// if sources then
24282: LD_VAR 0 5
24286: IFFALSE 24333
// for i = 1 to 3 do
24288: LD_ADDR_VAR 0 8
24292: PUSH
24293: DOUBLE
24294: LD_INT 1
24296: DEC
24297: ST_TO_ADDR
24298: LD_INT 3
24300: PUSH
24301: FOR_TO
24302: IFFALSE 24331
// AddResourceType ( base , i , sources [ i ] ) ;
24304: LD_VAR 0 15
24308: PPUSH
24309: LD_VAR 0 8
24313: PPUSH
24314: LD_VAR 0 5
24318: PUSH
24319: LD_VAR 0 8
24323: ARRAY
24324: PPUSH
24325: CALL_OW 276
24329: GO 24301
24331: POP
24332: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24333: LD_ADDR_VAR 0 18
24337: PUSH
24338: LD_VAR 0 15
24342: PPUSH
24343: LD_VAR 0 2
24347: PPUSH
24348: LD_INT 1
24350: PPUSH
24351: CALL 23594 0 3
24355: ST_TO_ADDR
// InitHc ;
24356: CALL_OW 19
// InitUc ;
24360: CALL_OW 18
// uc_side := side ;
24364: LD_ADDR_OWVAR 20
24368: PUSH
24369: LD_VAR 0 16
24373: ST_TO_ADDR
// uc_nation := nation ;
24374: LD_ADDR_OWVAR 21
24378: PUSH
24379: LD_VAR 0 17
24383: ST_TO_ADDR
// if buildings then
24384: LD_VAR 0 18
24388: IFFALSE 25710
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24390: LD_ADDR_VAR 0 19
24394: PUSH
24395: LD_VAR 0 18
24399: PPUSH
24400: LD_INT 2
24402: PUSH
24403: LD_INT 30
24405: PUSH
24406: LD_INT 29
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 30
24415: PUSH
24416: LD_INT 30
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: LIST
24427: PPUSH
24428: CALL_OW 72
24432: ST_TO_ADDR
// if tmp then
24433: LD_VAR 0 19
24437: IFFALSE 24485
// for i in tmp do
24439: LD_ADDR_VAR 0 8
24443: PUSH
24444: LD_VAR 0 19
24448: PUSH
24449: FOR_IN
24450: IFFALSE 24483
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24452: LD_VAR 0 8
24456: PPUSH
24457: CALL_OW 250
24461: PPUSH
24462: LD_VAR 0 8
24466: PPUSH
24467: CALL_OW 251
24471: PPUSH
24472: LD_VAR 0 16
24476: PPUSH
24477: CALL_OW 441
24481: GO 24449
24483: POP
24484: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24485: LD_VAR 0 18
24489: PPUSH
24490: LD_INT 2
24492: PUSH
24493: LD_INT 30
24495: PUSH
24496: LD_INT 32
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 30
24505: PUSH
24506: LD_INT 33
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: LIST
24517: PPUSH
24518: CALL_OW 72
24522: IFFALSE 24610
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24524: LD_ADDR_VAR 0 8
24528: PUSH
24529: LD_VAR 0 18
24533: PPUSH
24534: LD_INT 2
24536: PUSH
24537: LD_INT 30
24539: PUSH
24540: LD_INT 32
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 30
24549: PUSH
24550: LD_INT 33
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: LIST
24561: PPUSH
24562: CALL_OW 72
24566: PUSH
24567: FOR_IN
24568: IFFALSE 24608
// begin if not GetBWeapon ( i ) then
24570: LD_VAR 0 8
24574: PPUSH
24575: CALL_OW 269
24579: NOT
24580: IFFALSE 24606
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24582: LD_VAR 0 8
24586: PPUSH
24587: LD_VAR 0 8
24591: PPUSH
24592: LD_VAR 0 2
24596: PPUSH
24597: CALL 25856 0 2
24601: PPUSH
24602: CALL_OW 431
// end ;
24606: GO 24567
24608: POP
24609: POP
// end ; for i = 1 to personel do
24610: LD_ADDR_VAR 0 8
24614: PUSH
24615: DOUBLE
24616: LD_INT 1
24618: DEC
24619: ST_TO_ADDR
24620: LD_VAR 0 6
24624: PUSH
24625: FOR_TO
24626: IFFALSE 25690
// begin if i > 4 then
24628: LD_VAR 0 8
24632: PUSH
24633: LD_INT 4
24635: GREATER
24636: IFFALSE 24640
// break ;
24638: GO 25690
// case i of 1 :
24640: LD_VAR 0 8
24644: PUSH
24645: LD_INT 1
24647: DOUBLE
24648: EQUAL
24649: IFTRUE 24653
24651: GO 24733
24653: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24654: LD_ADDR_VAR 0 12
24658: PUSH
24659: LD_VAR 0 18
24663: PPUSH
24664: LD_INT 22
24666: PUSH
24667: LD_VAR 0 16
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 58
24678: PUSH
24679: EMPTY
24680: LIST
24681: PUSH
24682: LD_INT 2
24684: PUSH
24685: LD_INT 30
24687: PUSH
24688: LD_INT 32
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 30
24697: PUSH
24698: LD_INT 4
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 30
24707: PUSH
24708: LD_INT 5
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: LIST
24725: PPUSH
24726: CALL_OW 72
24730: ST_TO_ADDR
24731: GO 24955
24733: LD_INT 2
24735: DOUBLE
24736: EQUAL
24737: IFTRUE 24741
24739: GO 24803
24741: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24742: LD_ADDR_VAR 0 12
24746: PUSH
24747: LD_VAR 0 18
24751: PPUSH
24752: LD_INT 22
24754: PUSH
24755: LD_VAR 0 16
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 2
24766: PUSH
24767: LD_INT 30
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 30
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: LIST
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PPUSH
24796: CALL_OW 72
24800: ST_TO_ADDR
24801: GO 24955
24803: LD_INT 3
24805: DOUBLE
24806: EQUAL
24807: IFTRUE 24811
24809: GO 24873
24811: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24812: LD_ADDR_VAR 0 12
24816: PUSH
24817: LD_VAR 0 18
24821: PPUSH
24822: LD_INT 22
24824: PUSH
24825: LD_VAR 0 16
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 2
24836: PUSH
24837: LD_INT 30
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 30
24849: PUSH
24850: LD_INT 3
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: LIST
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PPUSH
24866: CALL_OW 72
24870: ST_TO_ADDR
24871: GO 24955
24873: LD_INT 4
24875: DOUBLE
24876: EQUAL
24877: IFTRUE 24881
24879: GO 24954
24881: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24882: LD_ADDR_VAR 0 12
24886: PUSH
24887: LD_VAR 0 18
24891: PPUSH
24892: LD_INT 22
24894: PUSH
24895: LD_VAR 0 16
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 2
24906: PUSH
24907: LD_INT 30
24909: PUSH
24910: LD_INT 6
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 30
24919: PUSH
24920: LD_INT 7
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 30
24929: PUSH
24930: LD_INT 8
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PPUSH
24947: CALL_OW 72
24951: ST_TO_ADDR
24952: GO 24955
24954: POP
// if i = 1 then
24955: LD_VAR 0 8
24959: PUSH
24960: LD_INT 1
24962: EQUAL
24963: IFFALSE 25074
// begin tmp := [ ] ;
24965: LD_ADDR_VAR 0 19
24969: PUSH
24970: EMPTY
24971: ST_TO_ADDR
// for j in f do
24972: LD_ADDR_VAR 0 9
24976: PUSH
24977: LD_VAR 0 12
24981: PUSH
24982: FOR_IN
24983: IFFALSE 25056
// if GetBType ( j ) = b_bunker then
24985: LD_VAR 0 9
24989: PPUSH
24990: CALL_OW 266
24994: PUSH
24995: LD_INT 32
24997: EQUAL
24998: IFFALSE 25025
// tmp := Insert ( tmp , 1 , j ) else
25000: LD_ADDR_VAR 0 19
25004: PUSH
25005: LD_VAR 0 19
25009: PPUSH
25010: LD_INT 1
25012: PPUSH
25013: LD_VAR 0 9
25017: PPUSH
25018: CALL_OW 2
25022: ST_TO_ADDR
25023: GO 25054
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25025: LD_ADDR_VAR 0 19
25029: PUSH
25030: LD_VAR 0 19
25034: PPUSH
25035: LD_VAR 0 19
25039: PUSH
25040: LD_INT 1
25042: PLUS
25043: PPUSH
25044: LD_VAR 0 9
25048: PPUSH
25049: CALL_OW 2
25053: ST_TO_ADDR
25054: GO 24982
25056: POP
25057: POP
// if tmp then
25058: LD_VAR 0 19
25062: IFFALSE 25074
// f := tmp ;
25064: LD_ADDR_VAR 0 12
25068: PUSH
25069: LD_VAR 0 19
25073: ST_TO_ADDR
// end ; x := personel [ i ] ;
25074: LD_ADDR_VAR 0 13
25078: PUSH
25079: LD_VAR 0 6
25083: PUSH
25084: LD_VAR 0 8
25088: ARRAY
25089: ST_TO_ADDR
// if x = - 1 then
25090: LD_VAR 0 13
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: EQUAL
25099: IFFALSE 25308
// begin for j in f do
25101: LD_ADDR_VAR 0 9
25105: PUSH
25106: LD_VAR 0 12
25110: PUSH
25111: FOR_IN
25112: IFFALSE 25304
// repeat InitHc ;
25114: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25118: LD_VAR 0 9
25122: PPUSH
25123: CALL_OW 266
25127: PUSH
25128: LD_INT 5
25130: EQUAL
25131: IFFALSE 25201
// begin if UnitsInside ( j ) < 3 then
25133: LD_VAR 0 9
25137: PPUSH
25138: CALL_OW 313
25142: PUSH
25143: LD_INT 3
25145: LESS
25146: IFFALSE 25182
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25148: LD_INT 0
25150: PPUSH
25151: LD_INT 5
25153: PUSH
25154: LD_INT 8
25156: PUSH
25157: LD_INT 9
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: LIST
25164: PUSH
25165: LD_VAR 0 17
25169: ARRAY
25170: PPUSH
25171: LD_VAR 0 4
25175: PPUSH
25176: CALL_OW 380
25180: GO 25199
// PrepareHuman ( false , i , skill ) ;
25182: LD_INT 0
25184: PPUSH
25185: LD_VAR 0 8
25189: PPUSH
25190: LD_VAR 0 4
25194: PPUSH
25195: CALL_OW 380
// end else
25199: GO 25218
// PrepareHuman ( false , i , skill ) ;
25201: LD_INT 0
25203: PPUSH
25204: LD_VAR 0 8
25208: PPUSH
25209: LD_VAR 0 4
25213: PPUSH
25214: CALL_OW 380
// un := CreateHuman ;
25218: LD_ADDR_VAR 0 14
25222: PUSH
25223: CALL_OW 44
25227: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25228: LD_ADDR_VAR 0 7
25232: PUSH
25233: LD_VAR 0 7
25237: PPUSH
25238: LD_INT 1
25240: PPUSH
25241: LD_VAR 0 14
25245: PPUSH
25246: CALL_OW 2
25250: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25251: LD_VAR 0 14
25255: PPUSH
25256: LD_VAR 0 9
25260: PPUSH
25261: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25265: LD_VAR 0 9
25269: PPUSH
25270: CALL_OW 313
25274: PUSH
25275: LD_INT 6
25277: EQUAL
25278: PUSH
25279: LD_VAR 0 9
25283: PPUSH
25284: CALL_OW 266
25288: PUSH
25289: LD_INT 32
25291: PUSH
25292: LD_INT 31
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: IN
25299: OR
25300: IFFALSE 25114
25302: GO 25111
25304: POP
25305: POP
// end else
25306: GO 25688
// for j = 1 to x do
25308: LD_ADDR_VAR 0 9
25312: PUSH
25313: DOUBLE
25314: LD_INT 1
25316: DEC
25317: ST_TO_ADDR
25318: LD_VAR 0 13
25322: PUSH
25323: FOR_TO
25324: IFFALSE 25686
// begin InitHc ;
25326: CALL_OW 19
// if not f then
25330: LD_VAR 0 12
25334: NOT
25335: IFFALSE 25424
// begin PrepareHuman ( false , i , skill ) ;
25337: LD_INT 0
25339: PPUSH
25340: LD_VAR 0 8
25344: PPUSH
25345: LD_VAR 0 4
25349: PPUSH
25350: CALL_OW 380
// un := CreateHuman ;
25354: LD_ADDR_VAR 0 14
25358: PUSH
25359: CALL_OW 44
25363: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25364: LD_ADDR_VAR 0 7
25368: PUSH
25369: LD_VAR 0 7
25373: PPUSH
25374: LD_INT 1
25376: PPUSH
25377: LD_VAR 0 14
25381: PPUSH
25382: CALL_OW 2
25386: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25387: LD_VAR 0 14
25391: PPUSH
25392: LD_VAR 0 1
25396: PPUSH
25397: CALL_OW 250
25401: PPUSH
25402: LD_VAR 0 1
25406: PPUSH
25407: CALL_OW 251
25411: PPUSH
25412: LD_INT 10
25414: PPUSH
25415: LD_INT 0
25417: PPUSH
25418: CALL_OW 50
// continue ;
25422: GO 25323
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25424: LD_VAR 0 12
25428: PUSH
25429: LD_INT 1
25431: ARRAY
25432: PPUSH
25433: CALL_OW 313
25437: PUSH
25438: LD_VAR 0 12
25442: PUSH
25443: LD_INT 1
25445: ARRAY
25446: PPUSH
25447: CALL_OW 266
25451: PUSH
25452: LD_INT 32
25454: PUSH
25455: LD_INT 31
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: IN
25462: AND
25463: PUSH
25464: LD_VAR 0 12
25468: PUSH
25469: LD_INT 1
25471: ARRAY
25472: PPUSH
25473: CALL_OW 313
25477: PUSH
25478: LD_INT 6
25480: EQUAL
25481: OR
25482: IFFALSE 25502
// f := Delete ( f , 1 ) ;
25484: LD_ADDR_VAR 0 12
25488: PUSH
25489: LD_VAR 0 12
25493: PPUSH
25494: LD_INT 1
25496: PPUSH
25497: CALL_OW 3
25501: ST_TO_ADDR
// if not f then
25502: LD_VAR 0 12
25506: NOT
25507: IFFALSE 25525
// begin x := x + 2 ;
25509: LD_ADDR_VAR 0 13
25513: PUSH
25514: LD_VAR 0 13
25518: PUSH
25519: LD_INT 2
25521: PLUS
25522: ST_TO_ADDR
// continue ;
25523: GO 25323
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25525: LD_VAR 0 12
25529: PUSH
25530: LD_INT 1
25532: ARRAY
25533: PPUSH
25534: CALL_OW 266
25538: PUSH
25539: LD_INT 5
25541: EQUAL
25542: IFFALSE 25616
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25544: LD_VAR 0 12
25548: PUSH
25549: LD_INT 1
25551: ARRAY
25552: PPUSH
25553: CALL_OW 313
25557: PUSH
25558: LD_INT 3
25560: LESS
25561: IFFALSE 25597
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25563: LD_INT 0
25565: PPUSH
25566: LD_INT 5
25568: PUSH
25569: LD_INT 8
25571: PUSH
25572: LD_INT 9
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: LIST
25579: PUSH
25580: LD_VAR 0 17
25584: ARRAY
25585: PPUSH
25586: LD_VAR 0 4
25590: PPUSH
25591: CALL_OW 380
25595: GO 25614
// PrepareHuman ( false , i , skill ) ;
25597: LD_INT 0
25599: PPUSH
25600: LD_VAR 0 8
25604: PPUSH
25605: LD_VAR 0 4
25609: PPUSH
25610: CALL_OW 380
// end else
25614: GO 25633
// PrepareHuman ( false , i , skill ) ;
25616: LD_INT 0
25618: PPUSH
25619: LD_VAR 0 8
25623: PPUSH
25624: LD_VAR 0 4
25628: PPUSH
25629: CALL_OW 380
// un := CreateHuman ;
25633: LD_ADDR_VAR 0 14
25637: PUSH
25638: CALL_OW 44
25642: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25643: LD_ADDR_VAR 0 7
25647: PUSH
25648: LD_VAR 0 7
25652: PPUSH
25653: LD_INT 1
25655: PPUSH
25656: LD_VAR 0 14
25660: PPUSH
25661: CALL_OW 2
25665: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25666: LD_VAR 0 14
25670: PPUSH
25671: LD_VAR 0 12
25675: PUSH
25676: LD_INT 1
25678: ARRAY
25679: PPUSH
25680: CALL_OW 52
// end ;
25684: GO 25323
25686: POP
25687: POP
// end ;
25688: GO 24625
25690: POP
25691: POP
// result := result ^ buildings ;
25692: LD_ADDR_VAR 0 7
25696: PUSH
25697: LD_VAR 0 7
25701: PUSH
25702: LD_VAR 0 18
25706: ADD
25707: ST_TO_ADDR
// end else
25708: GO 25851
// begin for i = 1 to personel do
25710: LD_ADDR_VAR 0 8
25714: PUSH
25715: DOUBLE
25716: LD_INT 1
25718: DEC
25719: ST_TO_ADDR
25720: LD_VAR 0 6
25724: PUSH
25725: FOR_TO
25726: IFFALSE 25849
// begin if i > 4 then
25728: LD_VAR 0 8
25732: PUSH
25733: LD_INT 4
25735: GREATER
25736: IFFALSE 25740
// break ;
25738: GO 25849
// x := personel [ i ] ;
25740: LD_ADDR_VAR 0 13
25744: PUSH
25745: LD_VAR 0 6
25749: PUSH
25750: LD_VAR 0 8
25754: ARRAY
25755: ST_TO_ADDR
// if x = - 1 then
25756: LD_VAR 0 13
25760: PUSH
25761: LD_INT 1
25763: NEG
25764: EQUAL
25765: IFFALSE 25769
// continue ;
25767: GO 25725
// PrepareHuman ( false , i , skill ) ;
25769: LD_INT 0
25771: PPUSH
25772: LD_VAR 0 8
25776: PPUSH
25777: LD_VAR 0 4
25781: PPUSH
25782: CALL_OW 380
// un := CreateHuman ;
25786: LD_ADDR_VAR 0 14
25790: PUSH
25791: CALL_OW 44
25795: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25796: LD_VAR 0 14
25800: PPUSH
25801: LD_VAR 0 1
25805: PPUSH
25806: CALL_OW 250
25810: PPUSH
25811: LD_VAR 0 1
25815: PPUSH
25816: CALL_OW 251
25820: PPUSH
25821: LD_INT 10
25823: PPUSH
25824: LD_INT 0
25826: PPUSH
25827: CALL_OW 50
// result := result ^ un ;
25831: LD_ADDR_VAR 0 7
25835: PUSH
25836: LD_VAR 0 7
25840: PUSH
25841: LD_VAR 0 14
25845: ADD
25846: ST_TO_ADDR
// end ;
25847: GO 25725
25849: POP
25850: POP
// end ; end ;
25851: LD_VAR 0 7
25855: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25856: LD_INT 0
25858: PPUSH
25859: PPUSH
25860: PPUSH
25861: PPUSH
25862: PPUSH
25863: PPUSH
25864: PPUSH
25865: PPUSH
25866: PPUSH
25867: PPUSH
25868: PPUSH
25869: PPUSH
25870: PPUSH
25871: PPUSH
25872: PPUSH
25873: PPUSH
// result := false ;
25874: LD_ADDR_VAR 0 3
25878: PUSH
25879: LD_INT 0
25881: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25882: LD_VAR 0 1
25886: NOT
25887: PUSH
25888: LD_VAR 0 1
25892: PPUSH
25893: CALL_OW 266
25897: PUSH
25898: LD_INT 32
25900: PUSH
25901: LD_INT 33
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: IN
25908: NOT
25909: OR
25910: IFFALSE 25914
// exit ;
25912: GO 27023
// nat := GetNation ( tower ) ;
25914: LD_ADDR_VAR 0 12
25918: PUSH
25919: LD_VAR 0 1
25923: PPUSH
25924: CALL_OW 248
25928: ST_TO_ADDR
// side := GetSide ( tower ) ;
25929: LD_ADDR_VAR 0 16
25933: PUSH
25934: LD_VAR 0 1
25938: PPUSH
25939: CALL_OW 255
25943: ST_TO_ADDR
// x := GetX ( tower ) ;
25944: LD_ADDR_VAR 0 10
25948: PUSH
25949: LD_VAR 0 1
25953: PPUSH
25954: CALL_OW 250
25958: ST_TO_ADDR
// y := GetY ( tower ) ;
25959: LD_ADDR_VAR 0 11
25963: PUSH
25964: LD_VAR 0 1
25968: PPUSH
25969: CALL_OW 251
25973: ST_TO_ADDR
// if not x or not y then
25974: LD_VAR 0 10
25978: NOT
25979: PUSH
25980: LD_VAR 0 11
25984: NOT
25985: OR
25986: IFFALSE 25990
// exit ;
25988: GO 27023
// weapon := 0 ;
25990: LD_ADDR_VAR 0 18
25994: PUSH
25995: LD_INT 0
25997: ST_TO_ADDR
// fac_list := [ ] ;
25998: LD_ADDR_VAR 0 17
26002: PUSH
26003: EMPTY
26004: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26005: LD_ADDR_VAR 0 6
26009: PUSH
26010: LD_VAR 0 1
26014: PPUSH
26015: CALL_OW 274
26019: PPUSH
26020: LD_VAR 0 2
26024: PPUSH
26025: LD_INT 0
26027: PPUSH
26028: CALL 23594 0 3
26032: PPUSH
26033: LD_INT 30
26035: PUSH
26036: LD_INT 3
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 72
26047: ST_TO_ADDR
// if not factories then
26048: LD_VAR 0 6
26052: NOT
26053: IFFALSE 26057
// exit ;
26055: GO 27023
// for i in factories do
26057: LD_ADDR_VAR 0 8
26061: PUSH
26062: LD_VAR 0 6
26066: PUSH
26067: FOR_IN
26068: IFFALSE 26093
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26070: LD_ADDR_VAR 0 17
26074: PUSH
26075: LD_VAR 0 17
26079: PUSH
26080: LD_VAR 0 8
26084: PPUSH
26085: CALL_OW 478
26089: UNION
26090: ST_TO_ADDR
26091: GO 26067
26093: POP
26094: POP
// if not fac_list then
26095: LD_VAR 0 17
26099: NOT
26100: IFFALSE 26104
// exit ;
26102: GO 27023
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26104: LD_ADDR_VAR 0 5
26108: PUSH
26109: LD_INT 4
26111: PUSH
26112: LD_INT 5
26114: PUSH
26115: LD_INT 9
26117: PUSH
26118: LD_INT 10
26120: PUSH
26121: LD_INT 6
26123: PUSH
26124: LD_INT 7
26126: PUSH
26127: LD_INT 11
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 27
26141: PUSH
26142: LD_INT 28
26144: PUSH
26145: LD_INT 26
26147: PUSH
26148: LD_INT 30
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 43
26159: PUSH
26160: LD_INT 44
26162: PUSH
26163: LD_INT 46
26165: PUSH
26166: LD_INT 45
26168: PUSH
26169: LD_INT 47
26171: PUSH
26172: LD_INT 49
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: LIST
26187: PUSH
26188: LD_VAR 0 12
26192: ARRAY
26193: ST_TO_ADDR
// list := list isect fac_list ;
26194: LD_ADDR_VAR 0 5
26198: PUSH
26199: LD_VAR 0 5
26203: PUSH
26204: LD_VAR 0 17
26208: ISECT
26209: ST_TO_ADDR
// if not list then
26210: LD_VAR 0 5
26214: NOT
26215: IFFALSE 26219
// exit ;
26217: GO 27023
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26219: LD_VAR 0 12
26223: PUSH
26224: LD_INT 3
26226: EQUAL
26227: PUSH
26228: LD_INT 49
26230: PUSH
26231: LD_VAR 0 5
26235: IN
26236: AND
26237: PUSH
26238: LD_INT 31
26240: PPUSH
26241: LD_VAR 0 16
26245: PPUSH
26246: CALL_OW 321
26250: PUSH
26251: LD_INT 2
26253: EQUAL
26254: AND
26255: IFFALSE 26315
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26257: LD_INT 22
26259: PUSH
26260: LD_VAR 0 16
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 35
26271: PUSH
26272: LD_INT 49
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 91
26281: PUSH
26282: LD_VAR 0 1
26286: PUSH
26287: LD_INT 10
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: LIST
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: LIST
26299: PPUSH
26300: CALL_OW 69
26304: NOT
26305: IFFALSE 26315
// weapon := ru_time_lapser ;
26307: LD_ADDR_VAR 0 18
26311: PUSH
26312: LD_INT 49
26314: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26315: LD_VAR 0 12
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 2
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: IN
26330: PUSH
26331: LD_INT 11
26333: PUSH
26334: LD_VAR 0 5
26338: IN
26339: PUSH
26340: LD_INT 30
26342: PUSH
26343: LD_VAR 0 5
26347: IN
26348: OR
26349: AND
26350: PUSH
26351: LD_INT 6
26353: PPUSH
26354: LD_VAR 0 16
26358: PPUSH
26359: CALL_OW 321
26363: PUSH
26364: LD_INT 2
26366: EQUAL
26367: AND
26368: IFFALSE 26533
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26370: LD_INT 22
26372: PUSH
26373: LD_VAR 0 16
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 2
26384: PUSH
26385: LD_INT 35
26387: PUSH
26388: LD_INT 11
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 35
26397: PUSH
26398: LD_INT 30
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 91
26412: PUSH
26413: LD_VAR 0 1
26417: PUSH
26418: LD_INT 18
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: LIST
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: LIST
26430: PPUSH
26431: CALL_OW 69
26435: NOT
26436: PUSH
26437: LD_INT 22
26439: PUSH
26440: LD_VAR 0 16
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 2
26451: PUSH
26452: LD_INT 30
26454: PUSH
26455: LD_INT 32
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 30
26464: PUSH
26465: LD_INT 33
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 91
26479: PUSH
26480: LD_VAR 0 1
26484: PUSH
26485: LD_INT 12
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: LIST
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: PUSH
26498: EMPTY
26499: LIST
26500: PPUSH
26501: CALL_OW 69
26505: PUSH
26506: LD_INT 2
26508: GREATER
26509: AND
26510: IFFALSE 26533
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26512: LD_ADDR_VAR 0 18
26516: PUSH
26517: LD_INT 11
26519: PUSH
26520: LD_INT 30
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_VAR 0 12
26531: ARRAY
26532: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26533: LD_VAR 0 18
26537: NOT
26538: PUSH
26539: LD_INT 40
26541: PPUSH
26542: LD_VAR 0 16
26546: PPUSH
26547: CALL_OW 321
26551: PUSH
26552: LD_INT 2
26554: EQUAL
26555: AND
26556: PUSH
26557: LD_INT 7
26559: PUSH
26560: LD_VAR 0 5
26564: IN
26565: PUSH
26566: LD_INT 28
26568: PUSH
26569: LD_VAR 0 5
26573: IN
26574: OR
26575: PUSH
26576: LD_INT 45
26578: PUSH
26579: LD_VAR 0 5
26583: IN
26584: OR
26585: AND
26586: IFFALSE 26840
// begin hex := GetHexInfo ( x , y ) ;
26588: LD_ADDR_VAR 0 4
26592: PUSH
26593: LD_VAR 0 10
26597: PPUSH
26598: LD_VAR 0 11
26602: PPUSH
26603: CALL_OW 546
26607: ST_TO_ADDR
// if hex [ 1 ] then
26608: LD_VAR 0 4
26612: PUSH
26613: LD_INT 1
26615: ARRAY
26616: IFFALSE 26620
// exit ;
26618: GO 27023
// height := hex [ 2 ] ;
26620: LD_ADDR_VAR 0 15
26624: PUSH
26625: LD_VAR 0 4
26629: PUSH
26630: LD_INT 2
26632: ARRAY
26633: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26634: LD_ADDR_VAR 0 14
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: LD_INT 2
26644: PUSH
26645: LD_INT 3
26647: PUSH
26648: LD_INT 5
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: ST_TO_ADDR
// for i in tmp do
26657: LD_ADDR_VAR 0 8
26661: PUSH
26662: LD_VAR 0 14
26666: PUSH
26667: FOR_IN
26668: IFFALSE 26838
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26670: LD_ADDR_VAR 0 9
26674: PUSH
26675: LD_VAR 0 10
26679: PPUSH
26680: LD_VAR 0 8
26684: PPUSH
26685: LD_INT 5
26687: PPUSH
26688: CALL_OW 272
26692: PUSH
26693: LD_VAR 0 11
26697: PPUSH
26698: LD_VAR 0 8
26702: PPUSH
26703: LD_INT 5
26705: PPUSH
26706: CALL_OW 273
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26715: LD_VAR 0 9
26719: PUSH
26720: LD_INT 1
26722: ARRAY
26723: PPUSH
26724: LD_VAR 0 9
26728: PUSH
26729: LD_INT 2
26731: ARRAY
26732: PPUSH
26733: CALL_OW 488
26737: IFFALSE 26836
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26739: LD_ADDR_VAR 0 4
26743: PUSH
26744: LD_VAR 0 9
26748: PUSH
26749: LD_INT 1
26751: ARRAY
26752: PPUSH
26753: LD_VAR 0 9
26757: PUSH
26758: LD_INT 2
26760: ARRAY
26761: PPUSH
26762: CALL_OW 546
26766: ST_TO_ADDR
// if hex [ 1 ] then
26767: LD_VAR 0 4
26771: PUSH
26772: LD_INT 1
26774: ARRAY
26775: IFFALSE 26779
// continue ;
26777: GO 26667
// h := hex [ 2 ] ;
26779: LD_ADDR_VAR 0 13
26783: PUSH
26784: LD_VAR 0 4
26788: PUSH
26789: LD_INT 2
26791: ARRAY
26792: ST_TO_ADDR
// if h + 7 < height then
26793: LD_VAR 0 13
26797: PUSH
26798: LD_INT 7
26800: PLUS
26801: PUSH
26802: LD_VAR 0 15
26806: LESS
26807: IFFALSE 26836
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26809: LD_ADDR_VAR 0 18
26813: PUSH
26814: LD_INT 7
26816: PUSH
26817: LD_INT 28
26819: PUSH
26820: LD_INT 45
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: LIST
26827: PUSH
26828: LD_VAR 0 12
26832: ARRAY
26833: ST_TO_ADDR
// break ;
26834: GO 26838
// end ; end ; end ;
26836: GO 26667
26838: POP
26839: POP
// end ; if not weapon then
26840: LD_VAR 0 18
26844: NOT
26845: IFFALSE 26905
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26847: LD_ADDR_VAR 0 5
26851: PUSH
26852: LD_VAR 0 5
26856: PUSH
26857: LD_INT 11
26859: PUSH
26860: LD_INT 30
26862: PUSH
26863: LD_INT 49
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: LIST
26870: DIFF
26871: ST_TO_ADDR
// if not list then
26872: LD_VAR 0 5
26876: NOT
26877: IFFALSE 26881
// exit ;
26879: GO 27023
// weapon := list [ rand ( 1 , list ) ] ;
26881: LD_ADDR_VAR 0 18
26885: PUSH
26886: LD_VAR 0 5
26890: PUSH
26891: LD_INT 1
26893: PPUSH
26894: LD_VAR 0 5
26898: PPUSH
26899: CALL_OW 12
26903: ARRAY
26904: ST_TO_ADDR
// end ; if weapon then
26905: LD_VAR 0 18
26909: IFFALSE 27023
// begin tmp := CostOfWeapon ( weapon ) ;
26911: LD_ADDR_VAR 0 14
26915: PUSH
26916: LD_VAR 0 18
26920: PPUSH
26921: CALL_OW 451
26925: ST_TO_ADDR
// j := GetBase ( tower ) ;
26926: LD_ADDR_VAR 0 9
26930: PUSH
26931: LD_VAR 0 1
26935: PPUSH
26936: CALL_OW 274
26940: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26941: LD_VAR 0 9
26945: PPUSH
26946: LD_INT 1
26948: PPUSH
26949: CALL_OW 275
26953: PUSH
26954: LD_VAR 0 14
26958: PUSH
26959: LD_INT 1
26961: ARRAY
26962: GREATEREQUAL
26963: PUSH
26964: LD_VAR 0 9
26968: PPUSH
26969: LD_INT 2
26971: PPUSH
26972: CALL_OW 275
26976: PUSH
26977: LD_VAR 0 14
26981: PUSH
26982: LD_INT 2
26984: ARRAY
26985: GREATEREQUAL
26986: AND
26987: PUSH
26988: LD_VAR 0 9
26992: PPUSH
26993: LD_INT 3
26995: PPUSH
26996: CALL_OW 275
27000: PUSH
27001: LD_VAR 0 14
27005: PUSH
27006: LD_INT 3
27008: ARRAY
27009: GREATEREQUAL
27010: AND
27011: IFFALSE 27023
// result := weapon ;
27013: LD_ADDR_VAR 0 3
27017: PUSH
27018: LD_VAR 0 18
27022: ST_TO_ADDR
// end ; end ;
27023: LD_VAR 0 3
27027: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27028: LD_INT 0
27030: PPUSH
27031: PPUSH
// result := true ;
27032: LD_ADDR_VAR 0 3
27036: PUSH
27037: LD_INT 1
27039: ST_TO_ADDR
// if array1 = array2 then
27040: LD_VAR 0 1
27044: PUSH
27045: LD_VAR 0 2
27049: EQUAL
27050: IFFALSE 27110
// begin for i = 1 to array1 do
27052: LD_ADDR_VAR 0 4
27056: PUSH
27057: DOUBLE
27058: LD_INT 1
27060: DEC
27061: ST_TO_ADDR
27062: LD_VAR 0 1
27066: PUSH
27067: FOR_TO
27068: IFFALSE 27106
// if array1 [ i ] <> array2 [ i ] then
27070: LD_VAR 0 1
27074: PUSH
27075: LD_VAR 0 4
27079: ARRAY
27080: PUSH
27081: LD_VAR 0 2
27085: PUSH
27086: LD_VAR 0 4
27090: ARRAY
27091: NONEQUAL
27092: IFFALSE 27104
// begin result := false ;
27094: LD_ADDR_VAR 0 3
27098: PUSH
27099: LD_INT 0
27101: ST_TO_ADDR
// break ;
27102: GO 27106
// end ;
27104: GO 27067
27106: POP
27107: POP
// end else
27108: GO 27118
// result := false ;
27110: LD_ADDR_VAR 0 3
27114: PUSH
27115: LD_INT 0
27117: ST_TO_ADDR
// end ;
27118: LD_VAR 0 3
27122: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27123: LD_INT 0
27125: PPUSH
27126: PPUSH
// if not array1 or not array2 then
27127: LD_VAR 0 1
27131: NOT
27132: PUSH
27133: LD_VAR 0 2
27137: NOT
27138: OR
27139: IFFALSE 27143
// exit ;
27141: GO 27207
// result := true ;
27143: LD_ADDR_VAR 0 3
27147: PUSH
27148: LD_INT 1
27150: ST_TO_ADDR
// for i = 1 to array1 do
27151: LD_ADDR_VAR 0 4
27155: PUSH
27156: DOUBLE
27157: LD_INT 1
27159: DEC
27160: ST_TO_ADDR
27161: LD_VAR 0 1
27165: PUSH
27166: FOR_TO
27167: IFFALSE 27205
// if array1 [ i ] <> array2 [ i ] then
27169: LD_VAR 0 1
27173: PUSH
27174: LD_VAR 0 4
27178: ARRAY
27179: PUSH
27180: LD_VAR 0 2
27184: PUSH
27185: LD_VAR 0 4
27189: ARRAY
27190: NONEQUAL
27191: IFFALSE 27203
// begin result := false ;
27193: LD_ADDR_VAR 0 3
27197: PUSH
27198: LD_INT 0
27200: ST_TO_ADDR
// break ;
27201: GO 27205
// end ;
27203: GO 27166
27205: POP
27206: POP
// end ;
27207: LD_VAR 0 3
27211: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27212: LD_INT 0
27214: PPUSH
27215: PPUSH
27216: PPUSH
// pom := GetBase ( fac ) ;
27217: LD_ADDR_VAR 0 5
27221: PUSH
27222: LD_VAR 0 1
27226: PPUSH
27227: CALL_OW 274
27231: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27232: LD_ADDR_VAR 0 4
27236: PUSH
27237: LD_VAR 0 2
27241: PUSH
27242: LD_INT 1
27244: ARRAY
27245: PPUSH
27246: LD_VAR 0 2
27250: PUSH
27251: LD_INT 2
27253: ARRAY
27254: PPUSH
27255: LD_VAR 0 2
27259: PUSH
27260: LD_INT 3
27262: ARRAY
27263: PPUSH
27264: LD_VAR 0 2
27268: PUSH
27269: LD_INT 4
27271: ARRAY
27272: PPUSH
27273: CALL_OW 449
27277: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27278: LD_ADDR_VAR 0 3
27282: PUSH
27283: LD_VAR 0 5
27287: PPUSH
27288: LD_INT 1
27290: PPUSH
27291: CALL_OW 275
27295: PUSH
27296: LD_VAR 0 4
27300: PUSH
27301: LD_INT 1
27303: ARRAY
27304: GREATEREQUAL
27305: PUSH
27306: LD_VAR 0 5
27310: PPUSH
27311: LD_INT 2
27313: PPUSH
27314: CALL_OW 275
27318: PUSH
27319: LD_VAR 0 4
27323: PUSH
27324: LD_INT 2
27326: ARRAY
27327: GREATEREQUAL
27328: AND
27329: PUSH
27330: LD_VAR 0 5
27334: PPUSH
27335: LD_INT 3
27337: PPUSH
27338: CALL_OW 275
27342: PUSH
27343: LD_VAR 0 4
27347: PUSH
27348: LD_INT 3
27350: ARRAY
27351: GREATEREQUAL
27352: AND
27353: ST_TO_ADDR
// end ;
27354: LD_VAR 0 3
27358: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27359: LD_INT 0
27361: PPUSH
27362: PPUSH
27363: PPUSH
27364: PPUSH
// pom := GetBase ( building ) ;
27365: LD_ADDR_VAR 0 3
27369: PUSH
27370: LD_VAR 0 1
27374: PPUSH
27375: CALL_OW 274
27379: ST_TO_ADDR
// if not pom then
27380: LD_VAR 0 3
27384: NOT
27385: IFFALSE 27389
// exit ;
27387: GO 27559
// btype := GetBType ( building ) ;
27389: LD_ADDR_VAR 0 5
27393: PUSH
27394: LD_VAR 0 1
27398: PPUSH
27399: CALL_OW 266
27403: ST_TO_ADDR
// if btype = b_armoury then
27404: LD_VAR 0 5
27408: PUSH
27409: LD_INT 4
27411: EQUAL
27412: IFFALSE 27422
// btype := b_barracks ;
27414: LD_ADDR_VAR 0 5
27418: PUSH
27419: LD_INT 5
27421: ST_TO_ADDR
// if btype = b_depot then
27422: LD_VAR 0 5
27426: PUSH
27427: LD_INT 0
27429: EQUAL
27430: IFFALSE 27440
// btype := b_warehouse ;
27432: LD_ADDR_VAR 0 5
27436: PUSH
27437: LD_INT 1
27439: ST_TO_ADDR
// if btype = b_workshop then
27440: LD_VAR 0 5
27444: PUSH
27445: LD_INT 2
27447: EQUAL
27448: IFFALSE 27458
// btype := b_factory ;
27450: LD_ADDR_VAR 0 5
27454: PUSH
27455: LD_INT 3
27457: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27458: LD_ADDR_VAR 0 4
27462: PUSH
27463: LD_VAR 0 5
27467: PPUSH
27468: LD_VAR 0 1
27472: PPUSH
27473: CALL_OW 248
27477: PPUSH
27478: CALL_OW 450
27482: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27483: LD_ADDR_VAR 0 2
27487: PUSH
27488: LD_VAR 0 3
27492: PPUSH
27493: LD_INT 1
27495: PPUSH
27496: CALL_OW 275
27500: PUSH
27501: LD_VAR 0 4
27505: PUSH
27506: LD_INT 1
27508: ARRAY
27509: GREATEREQUAL
27510: PUSH
27511: LD_VAR 0 3
27515: PPUSH
27516: LD_INT 2
27518: PPUSH
27519: CALL_OW 275
27523: PUSH
27524: LD_VAR 0 4
27528: PUSH
27529: LD_INT 2
27531: ARRAY
27532: GREATEREQUAL
27533: AND
27534: PUSH
27535: LD_VAR 0 3
27539: PPUSH
27540: LD_INT 3
27542: PPUSH
27543: CALL_OW 275
27547: PUSH
27548: LD_VAR 0 4
27552: PUSH
27553: LD_INT 3
27555: ARRAY
27556: GREATEREQUAL
27557: AND
27558: ST_TO_ADDR
// end ;
27559: LD_VAR 0 2
27563: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27564: LD_INT 0
27566: PPUSH
27567: PPUSH
27568: PPUSH
// pom := GetBase ( building ) ;
27569: LD_ADDR_VAR 0 4
27573: PUSH
27574: LD_VAR 0 1
27578: PPUSH
27579: CALL_OW 274
27583: ST_TO_ADDR
// if not pom then
27584: LD_VAR 0 4
27588: NOT
27589: IFFALSE 27593
// exit ;
27591: GO 27694
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27593: LD_ADDR_VAR 0 5
27597: PUSH
27598: LD_VAR 0 2
27602: PPUSH
27603: LD_VAR 0 1
27607: PPUSH
27608: CALL_OW 248
27612: PPUSH
27613: CALL_OW 450
27617: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27618: LD_ADDR_VAR 0 3
27622: PUSH
27623: LD_VAR 0 4
27627: PPUSH
27628: LD_INT 1
27630: PPUSH
27631: CALL_OW 275
27635: PUSH
27636: LD_VAR 0 5
27640: PUSH
27641: LD_INT 1
27643: ARRAY
27644: GREATEREQUAL
27645: PUSH
27646: LD_VAR 0 4
27650: PPUSH
27651: LD_INT 2
27653: PPUSH
27654: CALL_OW 275
27658: PUSH
27659: LD_VAR 0 5
27663: PUSH
27664: LD_INT 2
27666: ARRAY
27667: GREATEREQUAL
27668: AND
27669: PUSH
27670: LD_VAR 0 4
27674: PPUSH
27675: LD_INT 3
27677: PPUSH
27678: CALL_OW 275
27682: PUSH
27683: LD_VAR 0 5
27687: PUSH
27688: LD_INT 3
27690: ARRAY
27691: GREATEREQUAL
27692: AND
27693: ST_TO_ADDR
// end ;
27694: LD_VAR 0 3
27698: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27699: LD_INT 0
27701: PPUSH
27702: PPUSH
27703: PPUSH
27704: PPUSH
27705: PPUSH
27706: PPUSH
27707: PPUSH
27708: PPUSH
27709: PPUSH
27710: PPUSH
27711: PPUSH
// result := false ;
27712: LD_ADDR_VAR 0 8
27716: PUSH
27717: LD_INT 0
27719: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27720: LD_VAR 0 5
27724: NOT
27725: PUSH
27726: LD_VAR 0 1
27730: NOT
27731: OR
27732: PUSH
27733: LD_VAR 0 2
27737: NOT
27738: OR
27739: PUSH
27740: LD_VAR 0 3
27744: NOT
27745: OR
27746: IFFALSE 27750
// exit ;
27748: GO 28564
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27750: LD_ADDR_VAR 0 14
27754: PUSH
27755: LD_VAR 0 1
27759: PPUSH
27760: LD_VAR 0 2
27764: PPUSH
27765: LD_VAR 0 3
27769: PPUSH
27770: LD_VAR 0 4
27774: PPUSH
27775: LD_VAR 0 5
27779: PUSH
27780: LD_INT 1
27782: ARRAY
27783: PPUSH
27784: CALL_OW 248
27788: PPUSH
27789: LD_INT 0
27791: PPUSH
27792: CALL 29817 0 6
27796: ST_TO_ADDR
// if not hexes then
27797: LD_VAR 0 14
27801: NOT
27802: IFFALSE 27806
// exit ;
27804: GO 28564
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27806: LD_ADDR_VAR 0 17
27810: PUSH
27811: LD_VAR 0 5
27815: PPUSH
27816: LD_INT 22
27818: PUSH
27819: LD_VAR 0 13
27823: PPUSH
27824: CALL_OW 255
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 30
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 30
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: LIST
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PPUSH
27865: CALL_OW 72
27869: ST_TO_ADDR
// for i = 1 to hexes do
27870: LD_ADDR_VAR 0 9
27874: PUSH
27875: DOUBLE
27876: LD_INT 1
27878: DEC
27879: ST_TO_ADDR
27880: LD_VAR 0 14
27884: PUSH
27885: FOR_TO
27886: IFFALSE 28562
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27888: LD_ADDR_VAR 0 13
27892: PUSH
27893: LD_VAR 0 14
27897: PUSH
27898: LD_VAR 0 9
27902: ARRAY
27903: PUSH
27904: LD_INT 1
27906: ARRAY
27907: PPUSH
27908: LD_VAR 0 14
27912: PUSH
27913: LD_VAR 0 9
27917: ARRAY
27918: PUSH
27919: LD_INT 2
27921: ARRAY
27922: PPUSH
27923: CALL_OW 428
27927: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27928: LD_VAR 0 14
27932: PUSH
27933: LD_VAR 0 9
27937: ARRAY
27938: PUSH
27939: LD_INT 1
27941: ARRAY
27942: PPUSH
27943: LD_VAR 0 14
27947: PUSH
27948: LD_VAR 0 9
27952: ARRAY
27953: PUSH
27954: LD_INT 2
27956: ARRAY
27957: PPUSH
27958: CALL_OW 351
27962: PUSH
27963: LD_VAR 0 14
27967: PUSH
27968: LD_VAR 0 9
27972: ARRAY
27973: PUSH
27974: LD_INT 1
27976: ARRAY
27977: PPUSH
27978: LD_VAR 0 14
27982: PUSH
27983: LD_VAR 0 9
27987: ARRAY
27988: PUSH
27989: LD_INT 2
27991: ARRAY
27992: PPUSH
27993: CALL_OW 488
27997: NOT
27998: OR
27999: PUSH
28000: LD_VAR 0 13
28004: PPUSH
28005: CALL_OW 247
28009: PUSH
28010: LD_INT 3
28012: EQUAL
28013: OR
28014: IFFALSE 28020
// exit ;
28016: POP
28017: POP
28018: GO 28564
// if not tmp then
28020: LD_VAR 0 13
28024: NOT
28025: IFFALSE 28029
// continue ;
28027: GO 27885
// result := true ;
28029: LD_ADDR_VAR 0 8
28033: PUSH
28034: LD_INT 1
28036: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28037: LD_VAR 0 6
28041: PUSH
28042: LD_VAR 0 13
28046: PPUSH
28047: CALL_OW 247
28051: PUSH
28052: LD_INT 2
28054: EQUAL
28055: AND
28056: PUSH
28057: LD_VAR 0 13
28061: PPUSH
28062: CALL_OW 263
28066: PUSH
28067: LD_INT 1
28069: EQUAL
28070: AND
28071: IFFALSE 28235
// begin if IsDrivenBy ( tmp ) then
28073: LD_VAR 0 13
28077: PPUSH
28078: CALL_OW 311
28082: IFFALSE 28086
// continue ;
28084: GO 27885
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28086: LD_VAR 0 6
28090: PPUSH
28091: LD_INT 3
28093: PUSH
28094: LD_INT 60
28096: PUSH
28097: EMPTY
28098: LIST
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 3
28106: PUSH
28107: LD_INT 55
28109: PUSH
28110: EMPTY
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PPUSH
28121: CALL_OW 72
28125: IFFALSE 28233
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28127: LD_ADDR_VAR 0 18
28131: PUSH
28132: LD_VAR 0 6
28136: PPUSH
28137: LD_INT 3
28139: PUSH
28140: LD_INT 60
28142: PUSH
28143: EMPTY
28144: LIST
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 3
28152: PUSH
28153: LD_INT 55
28155: PUSH
28156: EMPTY
28157: LIST
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PPUSH
28167: CALL_OW 72
28171: PUSH
28172: LD_INT 1
28174: ARRAY
28175: ST_TO_ADDR
// if IsInUnit ( driver ) then
28176: LD_VAR 0 18
28180: PPUSH
28181: CALL_OW 310
28185: IFFALSE 28196
// ComExit ( driver ) ;
28187: LD_VAR 0 18
28191: PPUSH
28192: CALL 53618 0 1
// AddComEnterUnit ( driver , tmp ) ;
28196: LD_VAR 0 18
28200: PPUSH
28201: LD_VAR 0 13
28205: PPUSH
28206: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28210: LD_VAR 0 18
28214: PPUSH
28215: LD_VAR 0 7
28219: PPUSH
28220: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28224: LD_VAR 0 18
28228: PPUSH
28229: CALL_OW 181
// end ; continue ;
28233: GO 27885
// end ; if not cleaners or not tmp in cleaners then
28235: LD_VAR 0 6
28239: NOT
28240: PUSH
28241: LD_VAR 0 13
28245: PUSH
28246: LD_VAR 0 6
28250: IN
28251: NOT
28252: OR
28253: IFFALSE 28560
// begin if dep then
28255: LD_VAR 0 17
28259: IFFALSE 28395
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28261: LD_ADDR_VAR 0 16
28265: PUSH
28266: LD_VAR 0 17
28270: PUSH
28271: LD_INT 1
28273: ARRAY
28274: PPUSH
28275: CALL_OW 250
28279: PPUSH
28280: LD_VAR 0 17
28284: PUSH
28285: LD_INT 1
28287: ARRAY
28288: PPUSH
28289: CALL_OW 254
28293: PPUSH
28294: LD_INT 5
28296: PPUSH
28297: CALL_OW 272
28301: PUSH
28302: LD_VAR 0 17
28306: PUSH
28307: LD_INT 1
28309: ARRAY
28310: PPUSH
28311: CALL_OW 251
28315: PPUSH
28316: LD_VAR 0 17
28320: PUSH
28321: LD_INT 1
28323: ARRAY
28324: PPUSH
28325: CALL_OW 254
28329: PPUSH
28330: LD_INT 5
28332: PPUSH
28333: CALL_OW 273
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28342: LD_VAR 0 16
28346: PUSH
28347: LD_INT 1
28349: ARRAY
28350: PPUSH
28351: LD_VAR 0 16
28355: PUSH
28356: LD_INT 2
28358: ARRAY
28359: PPUSH
28360: CALL_OW 488
28364: IFFALSE 28395
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28366: LD_VAR 0 13
28370: PPUSH
28371: LD_VAR 0 16
28375: PUSH
28376: LD_INT 1
28378: ARRAY
28379: PPUSH
28380: LD_VAR 0 16
28384: PUSH
28385: LD_INT 2
28387: ARRAY
28388: PPUSH
28389: CALL_OW 111
// continue ;
28393: GO 27885
// end ; end ; r := GetDir ( tmp ) ;
28395: LD_ADDR_VAR 0 15
28399: PUSH
28400: LD_VAR 0 13
28404: PPUSH
28405: CALL_OW 254
28409: ST_TO_ADDR
// if r = 5 then
28410: LD_VAR 0 15
28414: PUSH
28415: LD_INT 5
28417: EQUAL
28418: IFFALSE 28428
// r := 0 ;
28420: LD_ADDR_VAR 0 15
28424: PUSH
28425: LD_INT 0
28427: ST_TO_ADDR
// for j = r to 5 do
28428: LD_ADDR_VAR 0 10
28432: PUSH
28433: DOUBLE
28434: LD_VAR 0 15
28438: DEC
28439: ST_TO_ADDR
28440: LD_INT 5
28442: PUSH
28443: FOR_TO
28444: IFFALSE 28558
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28446: LD_ADDR_VAR 0 11
28450: PUSH
28451: LD_VAR 0 13
28455: PPUSH
28456: CALL_OW 250
28460: PPUSH
28461: LD_VAR 0 10
28465: PPUSH
28466: LD_INT 2
28468: PPUSH
28469: CALL_OW 272
28473: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28474: LD_ADDR_VAR 0 12
28478: PUSH
28479: LD_VAR 0 13
28483: PPUSH
28484: CALL_OW 251
28488: PPUSH
28489: LD_VAR 0 10
28493: PPUSH
28494: LD_INT 2
28496: PPUSH
28497: CALL_OW 273
28501: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28502: LD_VAR 0 11
28506: PPUSH
28507: LD_VAR 0 12
28511: PPUSH
28512: CALL_OW 488
28516: PUSH
28517: LD_VAR 0 11
28521: PPUSH
28522: LD_VAR 0 12
28526: PPUSH
28527: CALL_OW 428
28531: NOT
28532: AND
28533: IFFALSE 28556
// begin ComMoveXY ( tmp , _x , _y ) ;
28535: LD_VAR 0 13
28539: PPUSH
28540: LD_VAR 0 11
28544: PPUSH
28545: LD_VAR 0 12
28549: PPUSH
28550: CALL_OW 111
// break ;
28554: GO 28558
// end ; end ;
28556: GO 28443
28558: POP
28559: POP
// end ; end ;
28560: GO 27885
28562: POP
28563: POP
// end ;
28564: LD_VAR 0 8
28568: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28569: LD_INT 0
28571: PPUSH
// result := true ;
28572: LD_ADDR_VAR 0 3
28576: PUSH
28577: LD_INT 1
28579: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28580: LD_VAR 0 2
28584: PUSH
28585: LD_INT 24
28587: DOUBLE
28588: EQUAL
28589: IFTRUE 28599
28591: LD_INT 33
28593: DOUBLE
28594: EQUAL
28595: IFTRUE 28599
28597: GO 28624
28599: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28600: LD_ADDR_VAR 0 3
28604: PUSH
28605: LD_INT 32
28607: PPUSH
28608: LD_VAR 0 1
28612: PPUSH
28613: CALL_OW 321
28617: PUSH
28618: LD_INT 2
28620: EQUAL
28621: ST_TO_ADDR
28622: GO 28940
28624: LD_INT 20
28626: DOUBLE
28627: EQUAL
28628: IFTRUE 28632
28630: GO 28657
28632: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28633: LD_ADDR_VAR 0 3
28637: PUSH
28638: LD_INT 6
28640: PPUSH
28641: LD_VAR 0 1
28645: PPUSH
28646: CALL_OW 321
28650: PUSH
28651: LD_INT 2
28653: EQUAL
28654: ST_TO_ADDR
28655: GO 28940
28657: LD_INT 22
28659: DOUBLE
28660: EQUAL
28661: IFTRUE 28671
28663: LD_INT 36
28665: DOUBLE
28666: EQUAL
28667: IFTRUE 28671
28669: GO 28696
28671: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28672: LD_ADDR_VAR 0 3
28676: PUSH
28677: LD_INT 15
28679: PPUSH
28680: LD_VAR 0 1
28684: PPUSH
28685: CALL_OW 321
28689: PUSH
28690: LD_INT 2
28692: EQUAL
28693: ST_TO_ADDR
28694: GO 28940
28696: LD_INT 30
28698: DOUBLE
28699: EQUAL
28700: IFTRUE 28704
28702: GO 28729
28704: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28705: LD_ADDR_VAR 0 3
28709: PUSH
28710: LD_INT 20
28712: PPUSH
28713: LD_VAR 0 1
28717: PPUSH
28718: CALL_OW 321
28722: PUSH
28723: LD_INT 2
28725: EQUAL
28726: ST_TO_ADDR
28727: GO 28940
28729: LD_INT 28
28731: DOUBLE
28732: EQUAL
28733: IFTRUE 28743
28735: LD_INT 21
28737: DOUBLE
28738: EQUAL
28739: IFTRUE 28743
28741: GO 28768
28743: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28744: LD_ADDR_VAR 0 3
28748: PUSH
28749: LD_INT 21
28751: PPUSH
28752: LD_VAR 0 1
28756: PPUSH
28757: CALL_OW 321
28761: PUSH
28762: LD_INT 2
28764: EQUAL
28765: ST_TO_ADDR
28766: GO 28940
28768: LD_INT 16
28770: DOUBLE
28771: EQUAL
28772: IFTRUE 28776
28774: GO 28801
28776: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28777: LD_ADDR_VAR 0 3
28781: PUSH
28782: LD_INT 84
28784: PPUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL_OW 321
28794: PUSH
28795: LD_INT 2
28797: EQUAL
28798: ST_TO_ADDR
28799: GO 28940
28801: LD_INT 19
28803: DOUBLE
28804: EQUAL
28805: IFTRUE 28815
28807: LD_INT 23
28809: DOUBLE
28810: EQUAL
28811: IFTRUE 28815
28813: GO 28840
28815: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28816: LD_ADDR_VAR 0 3
28820: PUSH
28821: LD_INT 83
28823: PPUSH
28824: LD_VAR 0 1
28828: PPUSH
28829: CALL_OW 321
28833: PUSH
28834: LD_INT 2
28836: EQUAL
28837: ST_TO_ADDR
28838: GO 28940
28840: LD_INT 17
28842: DOUBLE
28843: EQUAL
28844: IFTRUE 28848
28846: GO 28873
28848: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28849: LD_ADDR_VAR 0 3
28853: PUSH
28854: LD_INT 39
28856: PPUSH
28857: LD_VAR 0 1
28861: PPUSH
28862: CALL_OW 321
28866: PUSH
28867: LD_INT 2
28869: EQUAL
28870: ST_TO_ADDR
28871: GO 28940
28873: LD_INT 18
28875: DOUBLE
28876: EQUAL
28877: IFTRUE 28881
28879: GO 28906
28881: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28882: LD_ADDR_VAR 0 3
28886: PUSH
28887: LD_INT 40
28889: PPUSH
28890: LD_VAR 0 1
28894: PPUSH
28895: CALL_OW 321
28899: PUSH
28900: LD_INT 2
28902: EQUAL
28903: ST_TO_ADDR
28904: GO 28940
28906: LD_INT 27
28908: DOUBLE
28909: EQUAL
28910: IFTRUE 28914
28912: GO 28939
28914: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28915: LD_ADDR_VAR 0 3
28919: PUSH
28920: LD_INT 35
28922: PPUSH
28923: LD_VAR 0 1
28927: PPUSH
28928: CALL_OW 321
28932: PUSH
28933: LD_INT 2
28935: EQUAL
28936: ST_TO_ADDR
28937: GO 28940
28939: POP
// end ;
28940: LD_VAR 0 3
28944: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28945: LD_INT 0
28947: PPUSH
28948: PPUSH
28949: PPUSH
28950: PPUSH
28951: PPUSH
28952: PPUSH
28953: PPUSH
28954: PPUSH
28955: PPUSH
28956: PPUSH
28957: PPUSH
// result := false ;
28958: LD_ADDR_VAR 0 6
28962: PUSH
28963: LD_INT 0
28965: ST_TO_ADDR
// if btype = b_depot then
28966: LD_VAR 0 2
28970: PUSH
28971: LD_INT 0
28973: EQUAL
28974: IFFALSE 28986
// begin result := true ;
28976: LD_ADDR_VAR 0 6
28980: PUSH
28981: LD_INT 1
28983: ST_TO_ADDR
// exit ;
28984: GO 29812
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28986: LD_VAR 0 1
28990: NOT
28991: PUSH
28992: LD_VAR 0 1
28996: PPUSH
28997: CALL_OW 266
29001: PUSH
29002: LD_INT 0
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: IN
29012: NOT
29013: OR
29014: PUSH
29015: LD_VAR 0 2
29019: NOT
29020: OR
29021: PUSH
29022: LD_VAR 0 5
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: LD_INT 1
29032: PUSH
29033: LD_INT 2
29035: PUSH
29036: LD_INT 3
29038: PUSH
29039: LD_INT 4
29041: PUSH
29042: LD_INT 5
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: IN
29053: NOT
29054: OR
29055: PUSH
29056: LD_VAR 0 3
29060: PPUSH
29061: LD_VAR 0 4
29065: PPUSH
29066: CALL_OW 488
29070: NOT
29071: OR
29072: IFFALSE 29076
// exit ;
29074: GO 29812
// side := GetSide ( depot ) ;
29076: LD_ADDR_VAR 0 9
29080: PUSH
29081: LD_VAR 0 1
29085: PPUSH
29086: CALL_OW 255
29090: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29091: LD_VAR 0 9
29095: PPUSH
29096: LD_VAR 0 2
29100: PPUSH
29101: CALL 28569 0 2
29105: NOT
29106: IFFALSE 29110
// exit ;
29108: GO 29812
// pom := GetBase ( depot ) ;
29110: LD_ADDR_VAR 0 10
29114: PUSH
29115: LD_VAR 0 1
29119: PPUSH
29120: CALL_OW 274
29124: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29125: LD_ADDR_VAR 0 11
29129: PUSH
29130: LD_VAR 0 2
29134: PPUSH
29135: LD_VAR 0 1
29139: PPUSH
29140: CALL_OW 248
29144: PPUSH
29145: CALL_OW 450
29149: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29150: LD_VAR 0 10
29154: PPUSH
29155: LD_INT 1
29157: PPUSH
29158: CALL_OW 275
29162: PUSH
29163: LD_VAR 0 11
29167: PUSH
29168: LD_INT 1
29170: ARRAY
29171: GREATEREQUAL
29172: PUSH
29173: LD_VAR 0 10
29177: PPUSH
29178: LD_INT 2
29180: PPUSH
29181: CALL_OW 275
29185: PUSH
29186: LD_VAR 0 11
29190: PUSH
29191: LD_INT 2
29193: ARRAY
29194: GREATEREQUAL
29195: AND
29196: PUSH
29197: LD_VAR 0 10
29201: PPUSH
29202: LD_INT 3
29204: PPUSH
29205: CALL_OW 275
29209: PUSH
29210: LD_VAR 0 11
29214: PUSH
29215: LD_INT 3
29217: ARRAY
29218: GREATEREQUAL
29219: AND
29220: NOT
29221: IFFALSE 29225
// exit ;
29223: GO 29812
// if GetBType ( depot ) = b_depot then
29225: LD_VAR 0 1
29229: PPUSH
29230: CALL_OW 266
29234: PUSH
29235: LD_INT 0
29237: EQUAL
29238: IFFALSE 29250
// dist := 28 else
29240: LD_ADDR_VAR 0 14
29244: PUSH
29245: LD_INT 28
29247: ST_TO_ADDR
29248: GO 29258
// dist := 36 ;
29250: LD_ADDR_VAR 0 14
29254: PUSH
29255: LD_INT 36
29257: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29258: LD_VAR 0 1
29262: PPUSH
29263: LD_VAR 0 3
29267: PPUSH
29268: LD_VAR 0 4
29272: PPUSH
29273: CALL_OW 297
29277: PUSH
29278: LD_VAR 0 14
29282: GREATER
29283: IFFALSE 29287
// exit ;
29285: GO 29812
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29287: LD_ADDR_VAR 0 12
29291: PUSH
29292: LD_VAR 0 2
29296: PPUSH
29297: LD_VAR 0 3
29301: PPUSH
29302: LD_VAR 0 4
29306: PPUSH
29307: LD_VAR 0 5
29311: PPUSH
29312: LD_VAR 0 1
29316: PPUSH
29317: CALL_OW 248
29321: PPUSH
29322: LD_INT 0
29324: PPUSH
29325: CALL 29817 0 6
29329: ST_TO_ADDR
// if not hexes then
29330: LD_VAR 0 12
29334: NOT
29335: IFFALSE 29339
// exit ;
29337: GO 29812
// hex := GetHexInfo ( x , y ) ;
29339: LD_ADDR_VAR 0 15
29343: PUSH
29344: LD_VAR 0 3
29348: PPUSH
29349: LD_VAR 0 4
29353: PPUSH
29354: CALL_OW 546
29358: ST_TO_ADDR
// if hex [ 1 ] then
29359: LD_VAR 0 15
29363: PUSH
29364: LD_INT 1
29366: ARRAY
29367: IFFALSE 29371
// exit ;
29369: GO 29812
// height := hex [ 2 ] ;
29371: LD_ADDR_VAR 0 13
29375: PUSH
29376: LD_VAR 0 15
29380: PUSH
29381: LD_INT 2
29383: ARRAY
29384: ST_TO_ADDR
// for i = 1 to hexes do
29385: LD_ADDR_VAR 0 7
29389: PUSH
29390: DOUBLE
29391: LD_INT 1
29393: DEC
29394: ST_TO_ADDR
29395: LD_VAR 0 12
29399: PUSH
29400: FOR_TO
29401: IFFALSE 29731
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29403: LD_VAR 0 12
29407: PUSH
29408: LD_VAR 0 7
29412: ARRAY
29413: PUSH
29414: LD_INT 1
29416: ARRAY
29417: PPUSH
29418: LD_VAR 0 12
29422: PUSH
29423: LD_VAR 0 7
29427: ARRAY
29428: PUSH
29429: LD_INT 2
29431: ARRAY
29432: PPUSH
29433: CALL_OW 488
29437: NOT
29438: PUSH
29439: LD_VAR 0 12
29443: PUSH
29444: LD_VAR 0 7
29448: ARRAY
29449: PUSH
29450: LD_INT 1
29452: ARRAY
29453: PPUSH
29454: LD_VAR 0 12
29458: PUSH
29459: LD_VAR 0 7
29463: ARRAY
29464: PUSH
29465: LD_INT 2
29467: ARRAY
29468: PPUSH
29469: CALL_OW 428
29473: PUSH
29474: LD_INT 0
29476: GREATER
29477: OR
29478: PUSH
29479: LD_VAR 0 12
29483: PUSH
29484: LD_VAR 0 7
29488: ARRAY
29489: PUSH
29490: LD_INT 1
29492: ARRAY
29493: PPUSH
29494: LD_VAR 0 12
29498: PUSH
29499: LD_VAR 0 7
29503: ARRAY
29504: PUSH
29505: LD_INT 2
29507: ARRAY
29508: PPUSH
29509: CALL_OW 351
29513: OR
29514: IFFALSE 29520
// exit ;
29516: POP
29517: POP
29518: GO 29812
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29520: LD_ADDR_VAR 0 8
29524: PUSH
29525: LD_VAR 0 12
29529: PUSH
29530: LD_VAR 0 7
29534: ARRAY
29535: PUSH
29536: LD_INT 1
29538: ARRAY
29539: PPUSH
29540: LD_VAR 0 12
29544: PUSH
29545: LD_VAR 0 7
29549: ARRAY
29550: PUSH
29551: LD_INT 2
29553: ARRAY
29554: PPUSH
29555: CALL_OW 546
29559: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29560: LD_VAR 0 8
29564: PUSH
29565: LD_INT 1
29567: ARRAY
29568: PUSH
29569: LD_VAR 0 8
29573: PUSH
29574: LD_INT 2
29576: ARRAY
29577: PUSH
29578: LD_VAR 0 13
29582: PUSH
29583: LD_INT 2
29585: PLUS
29586: GREATER
29587: OR
29588: PUSH
29589: LD_VAR 0 8
29593: PUSH
29594: LD_INT 2
29596: ARRAY
29597: PUSH
29598: LD_VAR 0 13
29602: PUSH
29603: LD_INT 2
29605: MINUS
29606: LESS
29607: OR
29608: PUSH
29609: LD_VAR 0 8
29613: PUSH
29614: LD_INT 3
29616: ARRAY
29617: PUSH
29618: LD_INT 0
29620: PUSH
29621: LD_INT 8
29623: PUSH
29624: LD_INT 9
29626: PUSH
29627: LD_INT 10
29629: PUSH
29630: LD_INT 11
29632: PUSH
29633: LD_INT 12
29635: PUSH
29636: LD_INT 13
29638: PUSH
29639: LD_INT 16
29641: PUSH
29642: LD_INT 17
29644: PUSH
29645: LD_INT 18
29647: PUSH
29648: LD_INT 19
29650: PUSH
29651: LD_INT 20
29653: PUSH
29654: LD_INT 21
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: IN
29672: NOT
29673: OR
29674: PUSH
29675: LD_VAR 0 8
29679: PUSH
29680: LD_INT 5
29682: ARRAY
29683: NOT
29684: OR
29685: PUSH
29686: LD_VAR 0 8
29690: PUSH
29691: LD_INT 6
29693: ARRAY
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: LD_INT 2
29700: PUSH
29701: LD_INT 7
29703: PUSH
29704: LD_INT 9
29706: PUSH
29707: LD_INT 10
29709: PUSH
29710: LD_INT 11
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: IN
29721: NOT
29722: OR
29723: IFFALSE 29729
// exit ;
29725: POP
29726: POP
29727: GO 29812
// end ;
29729: GO 29400
29731: POP
29732: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29733: LD_VAR 0 9
29737: PPUSH
29738: LD_VAR 0 3
29742: PPUSH
29743: LD_VAR 0 4
29747: PPUSH
29748: LD_INT 20
29750: PPUSH
29751: CALL 21735 0 4
29755: PUSH
29756: LD_INT 4
29758: ARRAY
29759: IFFALSE 29763
// exit ;
29761: GO 29812
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29763: LD_VAR 0 2
29767: PUSH
29768: LD_INT 29
29770: PUSH
29771: LD_INT 30
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: IN
29778: PUSH
29779: LD_VAR 0 3
29783: PPUSH
29784: LD_VAR 0 4
29788: PPUSH
29789: LD_VAR 0 9
29793: PPUSH
29794: CALL_OW 440
29798: NOT
29799: AND
29800: IFFALSE 29804
// exit ;
29802: GO 29812
// result := true ;
29804: LD_ADDR_VAR 0 6
29808: PUSH
29809: LD_INT 1
29811: ST_TO_ADDR
// end ;
29812: LD_VAR 0 6
29816: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29817: LD_INT 0
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
29833: PPUSH
29834: PPUSH
29835: PPUSH
29836: PPUSH
29837: PPUSH
29838: PPUSH
29839: PPUSH
29840: PPUSH
29841: PPUSH
29842: PPUSH
29843: PPUSH
29844: PPUSH
29845: PPUSH
29846: PPUSH
29847: PPUSH
29848: PPUSH
29849: PPUSH
29850: PPUSH
29851: PPUSH
29852: PPUSH
29853: PPUSH
29854: PPUSH
29855: PPUSH
29856: PPUSH
29857: PPUSH
29858: PPUSH
29859: PPUSH
29860: PPUSH
29861: PPUSH
29862: PPUSH
29863: PPUSH
29864: PPUSH
29865: PPUSH
29866: PPUSH
29867: PPUSH
29868: PPUSH
29869: PPUSH
29870: PPUSH
29871: PPUSH
29872: PPUSH
29873: PPUSH
29874: PPUSH
29875: PPUSH
29876: PPUSH
// result = [ ] ;
29877: LD_ADDR_VAR 0 7
29881: PUSH
29882: EMPTY
29883: ST_TO_ADDR
// temp_list = [ ] ;
29884: LD_ADDR_VAR 0 9
29888: PUSH
29889: EMPTY
29890: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29891: LD_VAR 0 4
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: LD_INT 2
29904: PUSH
29905: LD_INT 3
29907: PUSH
29908: LD_INT 4
29910: PUSH
29911: LD_INT 5
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: IN
29922: NOT
29923: PUSH
29924: LD_VAR 0 1
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: IN
29939: PUSH
29940: LD_VAR 0 5
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: LD_INT 3
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: LIST
29958: IN
29959: NOT
29960: AND
29961: OR
29962: IFFALSE 29966
// exit ;
29964: GO 48357
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29966: LD_VAR 0 1
29970: PUSH
29971: LD_INT 6
29973: PUSH
29974: LD_INT 7
29976: PUSH
29977: LD_INT 8
29979: PUSH
29980: LD_INT 13
29982: PUSH
29983: LD_INT 12
29985: PUSH
29986: LD_INT 15
29988: PUSH
29989: LD_INT 11
29991: PUSH
29992: LD_INT 14
29994: PUSH
29995: LD_INT 10
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: IN
30009: IFFALSE 30019
// btype = b_lab ;
30011: LD_ADDR_VAR 0 1
30015: PUSH
30016: LD_INT 6
30018: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30019: LD_VAR 0 6
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: LD_INT 2
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: IN
30038: NOT
30039: PUSH
30040: LD_VAR 0 1
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: LD_INT 1
30050: PUSH
30051: LD_INT 2
30053: PUSH
30054: LD_INT 3
30056: PUSH
30057: LD_INT 6
30059: PUSH
30060: LD_INT 36
30062: PUSH
30063: LD_INT 4
30065: PUSH
30066: LD_INT 5
30068: PUSH
30069: LD_INT 31
30071: PUSH
30072: LD_INT 32
30074: PUSH
30075: LD_INT 33
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: IN
30091: NOT
30092: PUSH
30093: LD_VAR 0 6
30097: PUSH
30098: LD_INT 1
30100: EQUAL
30101: AND
30102: OR
30103: PUSH
30104: LD_VAR 0 1
30108: PUSH
30109: LD_INT 2
30111: PUSH
30112: LD_INT 3
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: IN
30119: NOT
30120: PUSH
30121: LD_VAR 0 6
30125: PUSH
30126: LD_INT 2
30128: EQUAL
30129: AND
30130: OR
30131: IFFALSE 30141
// mode = 0 ;
30133: LD_ADDR_VAR 0 6
30137: PUSH
30138: LD_INT 0
30140: ST_TO_ADDR
// case mode of 0 :
30141: LD_VAR 0 6
30145: PUSH
30146: LD_INT 0
30148: DOUBLE
30149: EQUAL
30150: IFTRUE 30154
30152: GO 41607
30154: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30155: LD_ADDR_VAR 0 11
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: LD_INT 1
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: LD_INT 0
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 1
30224: NEG
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: LD_INT 2
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 2
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 1
30290: NEG
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: LD_INT 3
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: LD_INT 3
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: NEG
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30348: LD_ADDR_VAR 0 12
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: LD_INT 1
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: LD_INT 0
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 1
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: LD_INT 1
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 1
30406: NEG
30407: PUSH
30408: LD_INT 0
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 2
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 2
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: NEG
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 2
30471: NEG
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 3
30505: NEG
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 3
30516: NEG
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30544: LD_ADDR_VAR 0 13
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 0
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: LD_INT 0
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: LD_INT 0
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 1
30613: NEG
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 1
30625: NEG
30626: PUSH
30627: LD_INT 2
30629: NEG
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 1
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 2
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 2
30667: NEG
30668: PUSH
30669: LD_INT 1
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 2
30679: NEG
30680: PUSH
30681: LD_INT 2
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 2
30691: NEG
30692: PUSH
30693: LD_INT 3
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 3
30703: NEG
30704: PUSH
30705: LD_INT 2
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 3
30715: NEG
30716: PUSH
30717: LD_INT 3
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30743: LD_ADDR_VAR 0 14
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 0
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: LD_INT 0
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 1
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 0
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 1
30801: NEG
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 1
30812: NEG
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 1
30824: NEG
30825: PUSH
30826: LD_INT 2
30828: NEG
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: LD_INT 2
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: LD_INT 2
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 2
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 1
30878: NEG
30879: PUSH
30880: LD_INT 1
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: NEG
30890: PUSH
30891: LD_INT 3
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: LD_INT 3
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 1
30912: PUSH
30913: LD_INT 2
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30939: LD_ADDR_VAR 0 15
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 0
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: NEG
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: NEG
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: LD_INT 1
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 2
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 2
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 2
31062: NEG
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 2
31073: NEG
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 2
31085: PUSH
31086: LD_INT 1
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 3
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 3
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31132: LD_ADDR_VAR 0 16
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: LD_INT 0
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: LD_INT 1
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 1
31190: NEG
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 1
31201: NEG
31202: PUSH
31203: LD_INT 1
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 1
31213: NEG
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 2
31225: PUSH
31226: LD_INT 1
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 2
31235: PUSH
31236: LD_INT 2
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: LD_INT 2
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 2
31267: NEG
31268: PUSH
31269: LD_INT 2
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 3
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 3
31289: PUSH
31290: LD_INT 3
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 2
31299: PUSH
31300: LD_INT 3
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31325: LD_ADDR_VAR 0 17
31329: PUSH
31330: LD_INT 0
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 0
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 1
31394: NEG
31395: PUSH
31396: LD_INT 1
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 1
31406: NEG
31407: PUSH
31408: LD_INT 2
31410: NEG
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 2
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 2
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: LD_INT 2
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: NEG
31491: PUSH
31492: LD_INT 1
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 2
31501: NEG
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 2
31512: NEG
31513: PUSH
31514: LD_INT 1
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 2
31524: NEG
31525: PUSH
31526: LD_INT 2
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31555: LD_ADDR_VAR 0 18
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 1
31583: PUSH
31584: LD_INT 0
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: LD_INT 1
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 0
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 1
31624: NEG
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: LD_INT 2
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: LD_INT 2
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: PUSH
31660: LD_INT 1
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 2
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 2
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 2
31690: PUSH
31691: LD_INT 2
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: PUSH
31701: LD_INT 2
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 0
31710: PUSH
31711: LD_INT 2
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: LD_INT 1
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: NEG
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 2
31742: NEG
31743: PUSH
31744: LD_INT 1
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 2
31754: NEG
31755: PUSH
31756: LD_INT 2
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31785: LD_ADDR_VAR 0 19
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: LD_INT 2
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: LD_INT 2
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: LD_INT 2
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: LD_INT 2
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: NEG
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 2
31984: NEG
31985: PUSH
31986: LD_INT 2
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32015: LD_ADDR_VAR 0 20
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: LD_INT 1
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: LD_INT 2
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 0
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 2
32150: PUSH
32151: LD_INT 2
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: LD_INT 2
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: LD_INT 2
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 2
32202: NEG
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: NEG
32215: PUSH
32216: LD_INT 2
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32245: LD_ADDR_VAR 0 21
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: LD_INT 1
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: LD_INT 2
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: LD_INT 1
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: LD_INT 2
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 2
32421: NEG
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 2
32432: NEG
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 2
32444: NEG
32445: PUSH
32446: LD_INT 2
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32475: LD_ADDR_VAR 0 22
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: LD_INT 2
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 2
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 2
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: LD_INT 2
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: LD_INT 2
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 2
32651: NEG
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 2
32662: NEG
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: LD_INT 2
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32705: LD_ADDR_VAR 0 23
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: LD_INT 1
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 1
32774: NEG
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: NEG
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 2
32840: PUSH
32841: LD_INT 2
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: LD_INT 2
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 2
32881: NEG
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 2
32892: NEG
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 2
32904: NEG
32905: PUSH
32906: LD_INT 2
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 2
32916: NEG
32917: PUSH
32918: LD_INT 3
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: NEG
32929: PUSH
32930: LD_INT 3
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 2
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 2
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32985: LD_ADDR_VAR 0 24
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 2
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: PUSH
33131: LD_INT 2
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: LD_INT 2
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 1
33150: NEG
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 2
33161: NEG
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: NEG
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: LD_INT 2
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: LD_INT 2
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 3
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 3
33228: PUSH
33229: LD_INT 2
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33261: LD_ADDR_VAR 0 25
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 0
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: NEG
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: NEG
33343: PUSH
33344: LD_INT 2
33346: NEG
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: LD_INT 2
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 2
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 1
33406: PUSH
33407: LD_INT 2
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 0
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: NEG
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: LD_INT 0
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: LD_INT 1
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: NEG
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 3
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 2
33492: PUSH
33493: LD_INT 3
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 3
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33535: LD_ADDR_VAR 0 26
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: NEG
33605: PUSH
33606: LD_INT 1
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: NEG
33617: PUSH
33618: LD_INT 2
33620: NEG
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: LD_INT 2
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: LD_INT 1
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 2
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: PUSH
33681: LD_INT 2
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: LD_INT 1
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: NEG
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 2
33722: NEG
33723: PUSH
33724: LD_INT 1
33726: NEG
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 2
33734: NEG
33735: PUSH
33736: LD_INT 2
33738: NEG
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 2
33746: PUSH
33747: LD_INT 3
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 1
33756: PUSH
33757: LD_INT 3
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: LD_INT 2
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33811: LD_ADDR_VAR 0 27
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: LD_INT 1
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: LD_INT 1
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 1
33892: NEG
33893: PUSH
33894: LD_INT 2
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: LD_INT 2
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 2
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: LD_INT 2
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: LD_INT 2
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: LD_INT 2
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: NEG
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 2
33987: NEG
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: NEG
33999: PUSH
34000: LD_INT 1
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 2
34010: NEG
34011: PUSH
34012: LD_INT 2
34014: NEG
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 1
34022: NEG
34023: PUSH
34024: LD_INT 2
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 2
34033: NEG
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 3
34044: NEG
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 3
34056: NEG
34057: PUSH
34058: LD_INT 2
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34091: LD_ADDR_VAR 0 28
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 1
34149: NEG
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: LD_INT 1
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 1
34172: NEG
34173: PUSH
34174: LD_INT 2
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: LD_INT 2
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: LD_INT 1
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 2
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: LD_INT 2
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: LD_INT 2
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 1
34256: NEG
34257: PUSH
34258: LD_INT 1
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 2
34267: NEG
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 2
34278: NEG
34279: PUSH
34280: LD_INT 1
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 2
34290: NEG
34291: PUSH
34292: LD_INT 2
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 2
34302: NEG
34303: PUSH
34304: LD_INT 3
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: LD_INT 3
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 3
34326: NEG
34327: PUSH
34328: LD_INT 1
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 3
34338: NEG
34339: PUSH
34340: LD_INT 2
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34373: LD_ADDR_VAR 0 29
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: NEG
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 1
34454: NEG
34455: PUSH
34456: LD_INT 2
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: LD_INT 2
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 1
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 2
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 2
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: LD_INT 2
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 1
34528: NEG
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 2
34539: NEG
34540: PUSH
34541: LD_INT 1
34543: NEG
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 2
34551: NEG
34552: PUSH
34553: LD_INT 2
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 2
34563: NEG
34564: PUSH
34565: LD_INT 3
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 3
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: LD_INT 3
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 3
34617: NEG
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34652: LD_ADDR_VAR 0 30
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: LD_INT 1
34672: NEG
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 1
34721: NEG
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: LD_INT 2
34748: NEG
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 2
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: LD_INT 2
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 2
34818: NEG
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: NEG
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: LD_INT 3
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: PUSH
34854: LD_INT 2
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 3
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 3
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 2
34884: NEG
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 3
34895: NEG
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34930: LD_ADDR_VAR 0 31
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: LD_INT 1
34950: NEG
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: LD_INT 1
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: NEG
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: LD_INT 1
35003: NEG
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: LD_INT 2
35015: NEG
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: LD_INT 1
35026: NEG
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 2
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 2
35044: PUSH
35045: LD_INT 1
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 2
35054: PUSH
35055: LD_INT 2
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 1
35064: PUSH
35065: LD_INT 2
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: LD_INT 1
35099: NEG
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 2
35107: NEG
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 2
35119: NEG
35120: PUSH
35121: LD_INT 3
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 2
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 3
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: LD_INT 3
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 3
35173: NEG
35174: PUSH
35175: LD_INT 2
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35208: LD_ADDR_VAR 0 32
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: LD_INT 0
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: LD_INT 1
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: LD_INT 1
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: LD_INT 2
35293: NEG
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: LD_INT 2
35304: NEG
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: LD_INT 1
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 2
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 2
35374: NEG
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 2
35385: NEG
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: LD_INT 3
35401: NEG
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: LD_INT 2
35412: NEG
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 3
35420: PUSH
35421: LD_INT 2
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: LD_INT 3
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 2
35440: NEG
35441: PUSH
35442: LD_INT 1
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 3
35451: NEG
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35486: LD_ADDR_VAR 0 33
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 0
35534: PUSH
35535: LD_INT 1
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 1
35544: NEG
35545: PUSH
35546: LD_INT 0
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: LD_INT 1
35559: NEG
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: LD_INT 1
35582: NEG
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: LD_INT 0
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: LD_INT 2
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 0
35620: PUSH
35621: LD_INT 2
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 1
35630: NEG
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 2
35641: NEG
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 2
35652: NEG
35653: PUSH
35654: LD_INT 1
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 2
35664: NEG
35665: PUSH
35666: LD_INT 2
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 2
35676: NEG
35677: PUSH
35678: LD_INT 3
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 2
35688: PUSH
35689: LD_INT 1
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 3
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: LD_INT 3
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: LD_INT 2
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 3
35730: NEG
35731: PUSH
35732: LD_INT 2
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35765: LD_ADDR_VAR 0 34
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: LD_INT 1
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: LD_INT 1
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: LD_INT 2
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: LD_INT 2
35861: NEG
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 2
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 2
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 2
35921: NEG
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 2
35932: NEG
35933: PUSH
35934: LD_INT 1
35936: NEG
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 2
35944: NEG
35945: PUSH
35946: LD_INT 2
35948: NEG
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 1
35956: NEG
35957: PUSH
35958: LD_INT 3
35960: NEG
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: LD_INT 2
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 3
35979: PUSH
35980: LD_INT 2
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 2
35989: PUSH
35990: LD_INT 3
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 2
35999: NEG
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 3
36010: NEG
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36045: LD_ADDR_VAR 0 35
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 2
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 2
36136: NEG
36137: PUSH
36138: LD_INT 1
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36157: LD_ADDR_VAR 0 36
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 1
36238: NEG
36239: PUSH
36240: LD_INT 2
36242: NEG
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: LD_INT 2
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36269: LD_ADDR_VAR 0 37
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 0
36286: PUSH
36287: LD_INT 1
36289: NEG
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: LD_INT 1
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36381: LD_ADDR_VAR 0 38
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: LD_INT 1
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 2
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36493: LD_ADDR_VAR 0 39
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: LD_INT 0
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: LD_INT 2
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36605: LD_ADDR_VAR 0 40
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: NEG
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: LD_INT 1
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: LD_INT 1
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 1
36697: NEG
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36717: LD_ADDR_VAR 0 41
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 0
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 2
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 2
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 2
36895: NEG
36896: PUSH
36897: LD_INT 2
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 2
36907: NEG
36908: PUSH
36909: LD_INT 3
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 3
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 3
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 3
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 3
36960: PUSH
36961: LD_INT 3
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: LD_INT 3
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 2
36980: NEG
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 3
36991: NEG
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 3
37002: NEG
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 3
37014: NEG
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 3
37026: NEG
37027: PUSH
37028: LD_INT 3
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37067: LD_ADDR_VAR 0 42
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 0
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 0
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: LD_INT 2
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: LD_INT 2
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 2
37233: NEG
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 2
37245: NEG
37246: PUSH
37247: LD_INT 2
37249: NEG
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 2
37257: NEG
37258: PUSH
37259: LD_INT 3
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: LD_INT 3
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: LD_INT 3
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: LD_INT 2
37295: NEG
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 3
37303: PUSH
37304: LD_INT 2
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 3
37313: PUSH
37314: LD_INT 3
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 2
37323: PUSH
37324: LD_INT 3
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 3
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: LD_INT 3
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 3
37364: NEG
37365: PUSH
37366: LD_INT 2
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 3
37376: NEG
37377: PUSH
37378: LD_INT 3
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37417: LD_ADDR_VAR 0 43
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 0
37434: PUSH
37435: LD_INT 1
37437: NEG
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 1
37475: NEG
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: LD_INT 2
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: LD_INT 2
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: LD_INT 2
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 2
37594: NEG
37595: PUSH
37596: LD_INT 1
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: LD_INT 3
37610: NEG
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 3
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 2
37632: NEG
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 2
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 3
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 3
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 3
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 2
37702: NEG
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 3
37713: NEG
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 3
37724: NEG
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37765: LD_ADDR_VAR 0 44
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: LD_INT 1
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: LD_INT 1
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: NEG
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: LD_INT 2
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 2
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: LD_INT 1
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 2
37920: NEG
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 2
37931: NEG
37932: PUSH
37933: LD_INT 1
37935: NEG
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 2
37943: NEG
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 2
37955: NEG
37956: PUSH
37957: LD_INT 3
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 3
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 3
37998: PUSH
37999: LD_INT 2
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 3
38008: PUSH
38009: LD_INT 3
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: LD_INT 3
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: NEG
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 3
38039: NEG
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 3
38050: NEG
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 3
38062: NEG
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 3
38074: NEG
38075: PUSH
38076: LD_INT 3
38078: NEG
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38115: LD_ADDR_VAR 0 45
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: LD_INT 2
38200: NEG
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: LD_INT 2
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 2
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 2
38240: PUSH
38241: LD_INT 2
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: LD_INT 2
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 0
38260: PUSH
38261: LD_INT 2
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 1
38270: NEG
38271: PUSH
38272: LD_INT 1
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 2
38305: NEG
38306: PUSH
38307: LD_INT 3
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: LD_INT 3
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 3
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: LD_INT 2
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 3
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 3
38361: PUSH
38362: LD_INT 3
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 2
38371: PUSH
38372: LD_INT 3
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: LD_INT 3
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: LD_INT 3
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 3
38412: NEG
38413: PUSH
38414: LD_INT 2
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 3
38424: NEG
38425: PUSH
38426: LD_INT 3
38428: NEG
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38465: LD_ADDR_VAR 0 46
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: NEG
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 2
38561: NEG
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 2
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 2
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: LD_INT 2
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 1
38620: NEG
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 2
38631: NEG
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 2
38642: NEG
38643: PUSH
38644: LD_INT 1
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: LD_INT 3
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: LD_INT 3
38669: NEG
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 1
38677: PUSH
38678: LD_INT 2
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 2
38688: PUSH
38689: LD_INT 1
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 3
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 3
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: LD_INT 3
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: LD_INT 3
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 3
38761: NEG
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 3
38772: NEG
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38813: LD_ADDR_VAR 0 47
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: LD_INT 1
38833: NEG
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: LD_INT 1
38886: NEG
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: LD_INT 2
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 2
38928: NEG
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 2
38940: NEG
38941: PUSH
38942: LD_INT 2
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38964: LD_ADDR_VAR 0 48
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: LD_INT 0
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: LD_INT 2
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39111: LD_ADDR_VAR 0 49
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39255: LD_ADDR_VAR 0 50
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 2
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: LD_INT 2
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 2
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39399: LD_ADDR_VAR 0 51
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: LD_INT 2
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: LD_INT 2
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39546: LD_ADDR_VAR 0 52
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: LD_INT 2
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39697: LD_ADDR_VAR 0 53
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: LD_INT 2
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 2
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 2
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: LD_INT 2
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: LD_INT 2
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39927: LD_ADDR_VAR 0 54
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: LD_INT 2
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: LD_INT 2
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 2
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: LD_INT 2
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 2
40114: NEG
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 2
40126: NEG
40127: PUSH
40128: LD_INT 2
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40157: LD_ADDR_VAR 0 55
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: LD_INT 2
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: LD_INT 2
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 2
40333: NEG
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 2
40344: NEG
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: LD_INT 2
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40387: LD_ADDR_VAR 0 56
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: LD_INT 2
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40617: LD_ADDR_VAR 0 57
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: LD_INT 2
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 2
40793: NEG
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 2
40804: NEG
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40847: LD_ADDR_VAR 0 58
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: LD_INT 2
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 2
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: NEG
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: NEG
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41077: LD_ADDR_VAR 0 59
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 1
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41165: LD_ADDR_VAR 0 60
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: NEG
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41253: LD_ADDR_VAR 0 61
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41341: LD_ADDR_VAR 0 62
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41429: LD_ADDR_VAR 0 63
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41517: LD_ADDR_VAR 0 64
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: ST_TO_ADDR
// end ; 1 :
41605: GO 47502
41607: LD_INT 1
41609: DOUBLE
41610: EQUAL
41611: IFTRUE 41615
41613: GO 44238
41615: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41616: LD_ADDR_VAR 0 11
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 3
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 3
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41660: LD_ADDR_VAR 0 12
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 3
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 3
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: LIST
41700: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41701: LD_ADDR_VAR 0 13
41705: PUSH
41706: LD_INT 3
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: LD_INT 3
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: LD_INT 3
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41741: LD_ADDR_VAR 0 14
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: LD_INT 3
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 3
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: LIST
41781: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41782: LD_ADDR_VAR 0 15
41786: PUSH
41787: LD_INT 2
41789: NEG
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 3
41800: NEG
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 3
41811: NEG
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41826: LD_ADDR_VAR 0 16
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: LD_INT 3
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 3
41845: NEG
41846: PUSH
41847: LD_INT 2
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 3
41857: NEG
41858: PUSH
41859: LD_INT 3
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: LIST
41871: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41872: LD_ADDR_VAR 0 17
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 3
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 3
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: LD_INT 2
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41916: LD_ADDR_VAR 0 18
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 3
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 3
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: LIST
41956: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41957: LD_ADDR_VAR 0 19
41961: PUSH
41962: LD_INT 3
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 3
41974: PUSH
41975: LD_INT 3
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: PUSH
41985: LD_INT 3
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41997: LD_ADDR_VAR 0 20
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: LD_INT 3
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 3
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: LIST
42037: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42038: LD_ADDR_VAR 0 21
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 3
42056: NEG
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 3
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42082: LD_ADDR_VAR 0 22
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: LD_INT 3
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 3
42101: NEG
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 3
42113: NEG
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42128: LD_ADDR_VAR 0 23
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: LD_INT 3
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 4
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 3
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: LIST
42171: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42172: LD_ADDR_VAR 0 24
42176: PUSH
42177: LD_INT 3
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 3
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 4
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: LIST
42212: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42213: LD_ADDR_VAR 0 25
42217: PUSH
42218: LD_INT 3
42220: PUSH
42221: LD_INT 3
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 4
42230: PUSH
42231: LD_INT 3
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 3
42240: PUSH
42241: LD_INT 4
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: LIST
42252: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42253: LD_ADDR_VAR 0 26
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 3
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 4
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: LD_INT 3
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: LIST
42293: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42294: LD_ADDR_VAR 0 27
42298: PUSH
42299: LD_INT 3
42301: NEG
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 3
42312: NEG
42313: PUSH
42314: LD_INT 1
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 4
42323: NEG
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: LIST
42337: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42338: LD_ADDR_VAR 0 28
42342: PUSH
42343: LD_INT 3
42345: NEG
42346: PUSH
42347: LD_INT 3
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 3
42357: NEG
42358: PUSH
42359: LD_INT 4
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 4
42369: NEG
42370: PUSH
42371: LD_INT 3
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: LIST
42383: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42384: LD_ADDR_VAR 0 29
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 3
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: LD_INT 3
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: LD_INT 4
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 4
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 3
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 5
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 5
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 4
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: LD_INT 6
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 6
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: LD_INT 5
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42539: LD_ADDR_VAR 0 30
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 3
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 3
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 3
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 4
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 4
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 4
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 5
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 5
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 5
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 6
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 6
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42682: LD_ADDR_VAR 0 31
42686: PUSH
42687: LD_INT 3
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 3
42699: PUSH
42700: LD_INT 3
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 4
42719: PUSH
42720: LD_INT 3
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 4
42729: PUSH
42730: LD_INT 4
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 3
42739: PUSH
42740: LD_INT 4
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 5
42749: PUSH
42750: LD_INT 4
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 5
42759: PUSH
42760: LD_INT 5
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 4
42769: PUSH
42770: LD_INT 5
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 6
42779: PUSH
42780: LD_INT 5
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 6
42789: PUSH
42790: LD_INT 6
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 5
42799: PUSH
42800: LD_INT 6
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42821: LD_ADDR_VAR 0 32
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: LD_INT 3
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 3
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: LD_INT 4
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 4
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: LD_INT 3
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 5
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 5
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: LD_INT 4
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: LD_INT 6
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 6
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: LD_INT 5
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42964: LD_ADDR_VAR 0 33
42968: PUSH
42969: LD_INT 2
42971: NEG
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 3
42982: NEG
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 3
42993: NEG
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 3
43005: NEG
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 4
43016: NEG
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 4
43027: NEG
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 4
43039: NEG
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 5
43050: NEG
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 5
43061: NEG
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 5
43073: NEG
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 6
43084: NEG
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 6
43095: NEG
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43119: LD_ADDR_VAR 0 34
43123: PUSH
43124: LD_INT 2
43126: NEG
43127: PUSH
43128: LD_INT 3
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 3
43138: NEG
43139: PUSH
43140: LD_INT 2
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 3
43150: NEG
43151: PUSH
43152: LD_INT 3
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 3
43162: NEG
43163: PUSH
43164: LD_INT 4
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 4
43174: NEG
43175: PUSH
43176: LD_INT 3
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 4
43186: NEG
43187: PUSH
43188: LD_INT 4
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 4
43198: NEG
43199: PUSH
43200: LD_INT 5
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 5
43210: NEG
43211: PUSH
43212: LD_INT 4
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 5
43222: NEG
43223: PUSH
43224: LD_INT 5
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 5
43234: NEG
43235: PUSH
43236: LD_INT 6
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 6
43246: NEG
43247: PUSH
43248: LD_INT 5
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 6
43258: NEG
43259: PUSH
43260: LD_INT 6
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43282: LD_ADDR_VAR 0 41
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: LD_INT 3
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: LIST
43325: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43326: LD_ADDR_VAR 0 42
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 3
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: LIST
43366: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43367: LD_ADDR_VAR 0 43
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 3
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: LD_INT 3
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: LIST
43406: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43407: LD_ADDR_VAR 0 44
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 3
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: LIST
43447: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43448: LD_ADDR_VAR 0 45
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 2
43466: NEG
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 3
43477: NEG
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43492: LD_ADDR_VAR 0 46
43496: PUSH
43497: LD_INT 2
43499: NEG
43500: PUSH
43501: LD_INT 2
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 2
43511: NEG
43512: PUSH
43513: LD_INT 3
43515: NEG
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 3
43523: NEG
43524: PUSH
43525: LD_INT 2
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43538: LD_ADDR_VAR 0 47
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: LD_INT 3
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 3
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43571: LD_ADDR_VAR 0 48
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43602: LD_ADDR_VAR 0 49
43606: PUSH
43607: LD_INT 3
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 3
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43631: LD_ADDR_VAR 0 50
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: LD_INT 3
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 3
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43660: LD_ADDR_VAR 0 51
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 2
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43691: LD_ADDR_VAR 0 52
43695: PUSH
43696: LD_INT 3
43698: NEG
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 3
43710: NEG
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43724: LD_ADDR_VAR 0 53
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 3
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: LD_INT 3
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: LIST
43767: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43768: LD_ADDR_VAR 0 54
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 3
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 3
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: LIST
43808: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43809: LD_ADDR_VAR 0 55
43813: PUSH
43814: LD_INT 3
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 3
43826: PUSH
43827: LD_INT 3
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: LD_INT 3
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: LIST
43848: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43849: LD_ADDR_VAR 0 56
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: LD_INT 3
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 3
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43890: LD_ADDR_VAR 0 57
43894: PUSH
43895: LD_INT 2
43897: NEG
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 3
43908: NEG
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 3
43919: NEG
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43934: LD_ADDR_VAR 0 58
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 3
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 3
43953: NEG
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 3
43965: NEG
43966: PUSH
43967: LD_INT 3
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43980: LD_ADDR_VAR 0 59
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 2
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44024: LD_ADDR_VAR 0 60
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44065: LD_ADDR_VAR 0 61
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44105: LD_ADDR_VAR 0 62
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: LIST
44145: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44146: LD_ADDR_VAR 0 63
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44190: LD_ADDR_VAR 0 64
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 2
44209: NEG
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: LIST
44235: ST_TO_ADDR
// end ; 2 :
44236: GO 47502
44238: LD_INT 2
44240: DOUBLE
44241: EQUAL
44242: IFTRUE 44246
44244: GO 47501
44246: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44247: LD_ADDR_VAR 0 29
44251: PUSH
44252: LD_INT 4
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 4
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 5
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 5
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 4
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 3
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 5
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 3
44347: PUSH
44348: LD_INT 3
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 3
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 4
44367: PUSH
44368: LD_INT 3
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 4
44377: PUSH
44378: LD_INT 4
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 3
44387: PUSH
44388: LD_INT 4
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: LD_INT 3
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 4
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: LD_INT 4
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 4
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 3
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: LD_INT 4
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: LD_INT 5
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: LD_INT 5
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 4
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 3
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: LD_INT 5
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: NEG
44520: PUSH
44521: LD_INT 3
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 3
44530: NEG
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 3
44541: NEG
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 3
44575: NEG
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 4
44586: NEG
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 4
44597: NEG
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 4
44609: NEG
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 4
44632: NEG
44633: PUSH
44634: LD_INT 4
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 4
44644: NEG
44645: PUSH
44646: LD_INT 5
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 3
44656: NEG
44657: PUSH
44658: LD_INT 4
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: NEG
44669: PUSH
44670: LD_INT 3
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 4
44680: NEG
44681: PUSH
44682: LD_INT 3
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 5
44692: NEG
44693: PUSH
44694: LD_INT 4
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 5
44704: NEG
44705: PUSH
44706: LD_INT 5
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 3
44716: NEG
44717: PUSH
44718: LD_INT 5
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 5
44728: NEG
44729: PUSH
44730: LD_INT 3
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44785: LD_ADDR_VAR 0 30
44789: PUSH
44790: LD_INT 4
44792: PUSH
44793: LD_INT 4
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 4
44802: PUSH
44803: LD_INT 3
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 5
44812: PUSH
44813: LD_INT 4
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 5
44822: PUSH
44823: LD_INT 5
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 4
44832: PUSH
44833: LD_INT 5
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 3
44842: PUSH
44843: LD_INT 4
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 3
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 5
44862: PUSH
44863: LD_INT 3
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 3
44872: PUSH
44873: LD_INT 5
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 3
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 3
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 4
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 4
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 3
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: LD_INT 4
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 4
44975: NEG
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 4
44986: NEG
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 3
44998: NEG
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 3
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 4
45020: NEG
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 5
45031: NEG
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 5
45042: NEG
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 5
45054: NEG
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 3
45066: NEG
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 3
45077: NEG
45078: PUSH
45079: LD_INT 3
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 3
45089: NEG
45090: PUSH
45091: LD_INT 4
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: LD_INT 3
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: LD_INT 2
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 3
45125: NEG
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 4
45137: NEG
45138: PUSH
45139: LD_INT 3
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 4
45149: NEG
45150: PUSH
45151: LD_INT 4
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: LD_INT 4
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 4
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 4
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 5
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 4
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 3
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 3
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 4
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 5
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: LD_INT 3
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: LD_INT 5
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45332: LD_ADDR_VAR 0 31
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: LD_INT 4
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 4
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: LD_INT 5
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 5
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 4
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 3
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: LD_INT 5
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 3
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 3
45432: NEG
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 3
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 3
45477: NEG
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 4
45488: NEG
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 4
45499: NEG
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 4
45511: NEG
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: LD_INT 2
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 4
45534: NEG
45535: PUSH
45536: LD_INT 4
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 4
45546: NEG
45547: PUSH
45548: LD_INT 5
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 3
45558: NEG
45559: PUSH
45560: LD_INT 4
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 3
45570: NEG
45571: PUSH
45572: LD_INT 3
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 4
45582: NEG
45583: PUSH
45584: LD_INT 3
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 5
45594: NEG
45595: PUSH
45596: LD_INT 4
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 5
45606: NEG
45607: PUSH
45608: LD_INT 5
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 3
45618: NEG
45619: PUSH
45620: LD_INT 5
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 5
45630: NEG
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 3
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 4
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 3
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 3
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 4
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 4
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 4
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 4
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 5
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 5
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 4
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 3
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 3
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 5
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45882: LD_ADDR_VAR 0 32
45886: PUSH
45887: LD_INT 4
45889: NEG
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 4
45900: NEG
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 3
45912: NEG
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 3
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 4
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 5
45945: NEG
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 5
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 5
45968: NEG
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 3
45980: NEG
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 3
45991: NEG
45992: PUSH
45993: LD_INT 3
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 3
46003: NEG
46004: PUSH
46005: LD_INT 4
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: LD_INT 3
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 3
46039: NEG
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 4
46051: NEG
46052: PUSH
46053: LD_INT 3
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 4
46063: NEG
46064: PUSH
46065: LD_INT 4
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: LD_INT 4
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 4
46087: NEG
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 4
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 5
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 4
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 3
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 3
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 4
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 5
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: LD_INT 3
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: LD_INT 5
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 3
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 3
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 4
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 4
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 3
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 4
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 4
46294: PUSH
46295: LD_INT 4
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 4
46304: PUSH
46305: LD_INT 3
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 5
46314: PUSH
46315: LD_INT 4
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 5
46324: PUSH
46325: LD_INT 5
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 4
46334: PUSH
46335: LD_INT 5
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 3
46344: PUSH
46345: LD_INT 4
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 3
46354: PUSH
46355: LD_INT 3
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 5
46364: PUSH
46365: LD_INT 3
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 3
46374: PUSH
46375: LD_INT 5
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46429: LD_ADDR_VAR 0 33
46433: PUSH
46434: LD_INT 4
46436: NEG
46437: PUSH
46438: LD_INT 4
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 4
46448: NEG
46449: PUSH
46450: LD_INT 5
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 3
46460: NEG
46461: PUSH
46462: LD_INT 4
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: NEG
46473: PUSH
46474: LD_INT 3
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 4
46484: NEG
46485: PUSH
46486: LD_INT 3
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 5
46496: NEG
46497: PUSH
46498: LD_INT 4
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 5
46508: NEG
46509: PUSH
46510: LD_INT 5
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: NEG
46521: PUSH
46522: LD_INT 5
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 5
46532: NEG
46533: PUSH
46534: LD_INT 3
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 3
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 4
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: LD_INT 3
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 3
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 4
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 4
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 4
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 4
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 5
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 5
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 4
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 3
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 5
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 3
46739: PUSH
46740: LD_INT 3
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 3
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 4
46759: PUSH
46760: LD_INT 3
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 4
46769: PUSH
46770: LD_INT 4
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 3
46779: PUSH
46780: LD_INT 4
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: LD_INT 3
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 4
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: LD_INT 4
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 4
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 4
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 5
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 5
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 4
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 2
46901: PUSH
46902: LD_INT 5
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 3
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46967: LD_ADDR_VAR 0 34
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 4
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 5
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 4
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 3
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 3
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: LD_INT 4
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 5
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: LD_INT 3
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: LD_INT 5
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 3
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 4
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 4
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 3
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 4
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 4
47169: PUSH
47170: LD_INT 4
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 4
47179: PUSH
47180: LD_INT 3
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 5
47189: PUSH
47190: LD_INT 4
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 5
47199: PUSH
47200: LD_INT 5
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 4
47209: PUSH
47210: LD_INT 5
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: LD_INT 4
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 3
47229: PUSH
47230: LD_INT 3
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 5
47239: PUSH
47240: LD_INT 3
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 3
47249: PUSH
47250: LD_INT 5
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 3
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 3
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 4
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 4
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 3
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: LD_INT 4
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 4
47352: NEG
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 4
47363: NEG
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 3
47375: NEG
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 4
47397: NEG
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 5
47408: NEG
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 5
47419: NEG
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 5
47431: NEG
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 3
47443: NEG
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: ST_TO_ADDR
// end ; end ;
47499: GO 47502
47501: POP
// case btype of b_depot , b_warehouse :
47502: LD_VAR 0 1
47506: PUSH
47507: LD_INT 0
47509: DOUBLE
47510: EQUAL
47511: IFTRUE 47521
47513: LD_INT 1
47515: DOUBLE
47516: EQUAL
47517: IFTRUE 47521
47519: GO 47722
47521: POP
// case nation of nation_american :
47522: LD_VAR 0 5
47526: PUSH
47527: LD_INT 1
47529: DOUBLE
47530: EQUAL
47531: IFTRUE 47535
47533: GO 47591
47535: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47536: LD_ADDR_VAR 0 9
47540: PUSH
47541: LD_VAR 0 11
47545: PUSH
47546: LD_VAR 0 12
47550: PUSH
47551: LD_VAR 0 13
47555: PUSH
47556: LD_VAR 0 14
47560: PUSH
47561: LD_VAR 0 15
47565: PUSH
47566: LD_VAR 0 16
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: PUSH
47579: LD_VAR 0 4
47583: PUSH
47584: LD_INT 1
47586: PLUS
47587: ARRAY
47588: ST_TO_ADDR
47589: GO 47720
47591: LD_INT 2
47593: DOUBLE
47594: EQUAL
47595: IFTRUE 47599
47597: GO 47655
47599: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47600: LD_ADDR_VAR 0 9
47604: PUSH
47605: LD_VAR 0 17
47609: PUSH
47610: LD_VAR 0 18
47614: PUSH
47615: LD_VAR 0 19
47619: PUSH
47620: LD_VAR 0 20
47624: PUSH
47625: LD_VAR 0 21
47629: PUSH
47630: LD_VAR 0 22
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: PUSH
47643: LD_VAR 0 4
47647: PUSH
47648: LD_INT 1
47650: PLUS
47651: ARRAY
47652: ST_TO_ADDR
47653: GO 47720
47655: LD_INT 3
47657: DOUBLE
47658: EQUAL
47659: IFTRUE 47663
47661: GO 47719
47663: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47664: LD_ADDR_VAR 0 9
47668: PUSH
47669: LD_VAR 0 23
47673: PUSH
47674: LD_VAR 0 24
47678: PUSH
47679: LD_VAR 0 25
47683: PUSH
47684: LD_VAR 0 26
47688: PUSH
47689: LD_VAR 0 27
47693: PUSH
47694: LD_VAR 0 28
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: PUSH
47707: LD_VAR 0 4
47711: PUSH
47712: LD_INT 1
47714: PLUS
47715: ARRAY
47716: ST_TO_ADDR
47717: GO 47720
47719: POP
47720: GO 48275
47722: LD_INT 2
47724: DOUBLE
47725: EQUAL
47726: IFTRUE 47736
47728: LD_INT 3
47730: DOUBLE
47731: EQUAL
47732: IFTRUE 47736
47734: GO 47792
47736: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47737: LD_ADDR_VAR 0 9
47741: PUSH
47742: LD_VAR 0 29
47746: PUSH
47747: LD_VAR 0 30
47751: PUSH
47752: LD_VAR 0 31
47756: PUSH
47757: LD_VAR 0 32
47761: PUSH
47762: LD_VAR 0 33
47766: PUSH
47767: LD_VAR 0 34
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: PUSH
47780: LD_VAR 0 4
47784: PUSH
47785: LD_INT 1
47787: PLUS
47788: ARRAY
47789: ST_TO_ADDR
47790: GO 48275
47792: LD_INT 16
47794: DOUBLE
47795: EQUAL
47796: IFTRUE 47854
47798: LD_INT 17
47800: DOUBLE
47801: EQUAL
47802: IFTRUE 47854
47804: LD_INT 18
47806: DOUBLE
47807: EQUAL
47808: IFTRUE 47854
47810: LD_INT 19
47812: DOUBLE
47813: EQUAL
47814: IFTRUE 47854
47816: LD_INT 22
47818: DOUBLE
47819: EQUAL
47820: IFTRUE 47854
47822: LD_INT 20
47824: DOUBLE
47825: EQUAL
47826: IFTRUE 47854
47828: LD_INT 21
47830: DOUBLE
47831: EQUAL
47832: IFTRUE 47854
47834: LD_INT 23
47836: DOUBLE
47837: EQUAL
47838: IFTRUE 47854
47840: LD_INT 24
47842: DOUBLE
47843: EQUAL
47844: IFTRUE 47854
47846: LD_INT 25
47848: DOUBLE
47849: EQUAL
47850: IFTRUE 47854
47852: GO 47910
47854: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47855: LD_ADDR_VAR 0 9
47859: PUSH
47860: LD_VAR 0 35
47864: PUSH
47865: LD_VAR 0 36
47869: PUSH
47870: LD_VAR 0 37
47874: PUSH
47875: LD_VAR 0 38
47879: PUSH
47880: LD_VAR 0 39
47884: PUSH
47885: LD_VAR 0 40
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: PUSH
47898: LD_VAR 0 4
47902: PUSH
47903: LD_INT 1
47905: PLUS
47906: ARRAY
47907: ST_TO_ADDR
47908: GO 48275
47910: LD_INT 6
47912: DOUBLE
47913: EQUAL
47914: IFTRUE 47966
47916: LD_INT 7
47918: DOUBLE
47919: EQUAL
47920: IFTRUE 47966
47922: LD_INT 8
47924: DOUBLE
47925: EQUAL
47926: IFTRUE 47966
47928: LD_INT 13
47930: DOUBLE
47931: EQUAL
47932: IFTRUE 47966
47934: LD_INT 12
47936: DOUBLE
47937: EQUAL
47938: IFTRUE 47966
47940: LD_INT 15
47942: DOUBLE
47943: EQUAL
47944: IFTRUE 47966
47946: LD_INT 11
47948: DOUBLE
47949: EQUAL
47950: IFTRUE 47966
47952: LD_INT 14
47954: DOUBLE
47955: EQUAL
47956: IFTRUE 47966
47958: LD_INT 10
47960: DOUBLE
47961: EQUAL
47962: IFTRUE 47966
47964: GO 48022
47966: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47967: LD_ADDR_VAR 0 9
47971: PUSH
47972: LD_VAR 0 41
47976: PUSH
47977: LD_VAR 0 42
47981: PUSH
47982: LD_VAR 0 43
47986: PUSH
47987: LD_VAR 0 44
47991: PUSH
47992: LD_VAR 0 45
47996: PUSH
47997: LD_VAR 0 46
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: PUSH
48010: LD_VAR 0 4
48014: PUSH
48015: LD_INT 1
48017: PLUS
48018: ARRAY
48019: ST_TO_ADDR
48020: GO 48275
48022: LD_INT 36
48024: DOUBLE
48025: EQUAL
48026: IFTRUE 48030
48028: GO 48086
48030: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48031: LD_ADDR_VAR 0 9
48035: PUSH
48036: LD_VAR 0 47
48040: PUSH
48041: LD_VAR 0 48
48045: PUSH
48046: LD_VAR 0 49
48050: PUSH
48051: LD_VAR 0 50
48055: PUSH
48056: LD_VAR 0 51
48060: PUSH
48061: LD_VAR 0 52
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: PUSH
48074: LD_VAR 0 4
48078: PUSH
48079: LD_INT 1
48081: PLUS
48082: ARRAY
48083: ST_TO_ADDR
48084: GO 48275
48086: LD_INT 4
48088: DOUBLE
48089: EQUAL
48090: IFTRUE 48112
48092: LD_INT 5
48094: DOUBLE
48095: EQUAL
48096: IFTRUE 48112
48098: LD_INT 34
48100: DOUBLE
48101: EQUAL
48102: IFTRUE 48112
48104: LD_INT 37
48106: DOUBLE
48107: EQUAL
48108: IFTRUE 48112
48110: GO 48168
48112: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48113: LD_ADDR_VAR 0 9
48117: PUSH
48118: LD_VAR 0 53
48122: PUSH
48123: LD_VAR 0 54
48127: PUSH
48128: LD_VAR 0 55
48132: PUSH
48133: LD_VAR 0 56
48137: PUSH
48138: LD_VAR 0 57
48142: PUSH
48143: LD_VAR 0 58
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: PUSH
48156: LD_VAR 0 4
48160: PUSH
48161: LD_INT 1
48163: PLUS
48164: ARRAY
48165: ST_TO_ADDR
48166: GO 48275
48168: LD_INT 31
48170: DOUBLE
48171: EQUAL
48172: IFTRUE 48218
48174: LD_INT 32
48176: DOUBLE
48177: EQUAL
48178: IFTRUE 48218
48180: LD_INT 33
48182: DOUBLE
48183: EQUAL
48184: IFTRUE 48218
48186: LD_INT 27
48188: DOUBLE
48189: EQUAL
48190: IFTRUE 48218
48192: LD_INT 26
48194: DOUBLE
48195: EQUAL
48196: IFTRUE 48218
48198: LD_INT 28
48200: DOUBLE
48201: EQUAL
48202: IFTRUE 48218
48204: LD_INT 29
48206: DOUBLE
48207: EQUAL
48208: IFTRUE 48218
48210: LD_INT 30
48212: DOUBLE
48213: EQUAL
48214: IFTRUE 48218
48216: GO 48274
48218: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48219: LD_ADDR_VAR 0 9
48223: PUSH
48224: LD_VAR 0 59
48228: PUSH
48229: LD_VAR 0 60
48233: PUSH
48234: LD_VAR 0 61
48238: PUSH
48239: LD_VAR 0 62
48243: PUSH
48244: LD_VAR 0 63
48248: PUSH
48249: LD_VAR 0 64
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: PUSH
48262: LD_VAR 0 4
48266: PUSH
48267: LD_INT 1
48269: PLUS
48270: ARRAY
48271: ST_TO_ADDR
48272: GO 48275
48274: POP
// temp_list2 = [ ] ;
48275: LD_ADDR_VAR 0 10
48279: PUSH
48280: EMPTY
48281: ST_TO_ADDR
// for i in temp_list do
48282: LD_ADDR_VAR 0 8
48286: PUSH
48287: LD_VAR 0 9
48291: PUSH
48292: FOR_IN
48293: IFFALSE 48345
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48295: LD_ADDR_VAR 0 10
48299: PUSH
48300: LD_VAR 0 10
48304: PUSH
48305: LD_VAR 0 8
48309: PUSH
48310: LD_INT 1
48312: ARRAY
48313: PUSH
48314: LD_VAR 0 2
48318: PLUS
48319: PUSH
48320: LD_VAR 0 8
48324: PUSH
48325: LD_INT 2
48327: ARRAY
48328: PUSH
48329: LD_VAR 0 3
48333: PLUS
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: EMPTY
48340: LIST
48341: ADD
48342: ST_TO_ADDR
48343: GO 48292
48345: POP
48346: POP
// result = temp_list2 ;
48347: LD_ADDR_VAR 0 7
48351: PUSH
48352: LD_VAR 0 10
48356: ST_TO_ADDR
// end ;
48357: LD_VAR 0 7
48361: RET
// export function EnemyInRange ( unit , dist ) ; begin
48362: LD_INT 0
48364: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48365: LD_ADDR_VAR 0 3
48369: PUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: CALL_OW 255
48379: PPUSH
48380: LD_VAR 0 1
48384: PPUSH
48385: CALL_OW 250
48389: PPUSH
48390: LD_VAR 0 1
48394: PPUSH
48395: CALL_OW 251
48399: PPUSH
48400: LD_VAR 0 2
48404: PPUSH
48405: CALL 21735 0 4
48409: PUSH
48410: LD_INT 4
48412: ARRAY
48413: ST_TO_ADDR
// end ;
48414: LD_VAR 0 3
48418: RET
// export function PlayerSeeMe ( unit ) ; begin
48419: LD_INT 0
48421: PPUSH
// result := See ( your_side , unit ) ;
48422: LD_ADDR_VAR 0 2
48426: PUSH
48427: LD_OWVAR 2
48431: PPUSH
48432: LD_VAR 0 1
48436: PPUSH
48437: CALL_OW 292
48441: ST_TO_ADDR
// end ;
48442: LD_VAR 0 2
48446: RET
// export function ReverseDir ( unit ) ; begin
48447: LD_INT 0
48449: PPUSH
// if not unit then
48450: LD_VAR 0 1
48454: NOT
48455: IFFALSE 48459
// exit ;
48457: GO 48482
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48459: LD_ADDR_VAR 0 2
48463: PUSH
48464: LD_VAR 0 1
48468: PPUSH
48469: CALL_OW 254
48473: PUSH
48474: LD_INT 3
48476: PLUS
48477: PUSH
48478: LD_INT 6
48480: MOD
48481: ST_TO_ADDR
// end ;
48482: LD_VAR 0 2
48486: RET
// export function ReverseArray ( array ) ; var i ; begin
48487: LD_INT 0
48489: PPUSH
48490: PPUSH
// if not array then
48491: LD_VAR 0 1
48495: NOT
48496: IFFALSE 48500
// exit ;
48498: GO 48555
// result := [ ] ;
48500: LD_ADDR_VAR 0 2
48504: PUSH
48505: EMPTY
48506: ST_TO_ADDR
// for i := array downto 1 do
48507: LD_ADDR_VAR 0 3
48511: PUSH
48512: DOUBLE
48513: LD_VAR 0 1
48517: INC
48518: ST_TO_ADDR
48519: LD_INT 1
48521: PUSH
48522: FOR_DOWNTO
48523: IFFALSE 48553
// result := Join ( result , array [ i ] ) ;
48525: LD_ADDR_VAR 0 2
48529: PUSH
48530: LD_VAR 0 2
48534: PPUSH
48535: LD_VAR 0 1
48539: PUSH
48540: LD_VAR 0 3
48544: ARRAY
48545: PPUSH
48546: CALL 53220 0 2
48550: ST_TO_ADDR
48551: GO 48522
48553: POP
48554: POP
// end ;
48555: LD_VAR 0 2
48559: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48560: LD_INT 0
48562: PPUSH
48563: PPUSH
48564: PPUSH
48565: PPUSH
48566: PPUSH
48567: PPUSH
// if not unit or not hexes then
48568: LD_VAR 0 1
48572: NOT
48573: PUSH
48574: LD_VAR 0 2
48578: NOT
48579: OR
48580: IFFALSE 48584
// exit ;
48582: GO 48707
// dist := 9999 ;
48584: LD_ADDR_VAR 0 5
48588: PUSH
48589: LD_INT 9999
48591: ST_TO_ADDR
// for i = 1 to hexes do
48592: LD_ADDR_VAR 0 4
48596: PUSH
48597: DOUBLE
48598: LD_INT 1
48600: DEC
48601: ST_TO_ADDR
48602: LD_VAR 0 2
48606: PUSH
48607: FOR_TO
48608: IFFALSE 48695
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48610: LD_ADDR_VAR 0 6
48614: PUSH
48615: LD_VAR 0 1
48619: PPUSH
48620: LD_VAR 0 2
48624: PUSH
48625: LD_VAR 0 4
48629: ARRAY
48630: PUSH
48631: LD_INT 1
48633: ARRAY
48634: PPUSH
48635: LD_VAR 0 2
48639: PUSH
48640: LD_VAR 0 4
48644: ARRAY
48645: PUSH
48646: LD_INT 2
48648: ARRAY
48649: PPUSH
48650: CALL_OW 297
48654: ST_TO_ADDR
// if tdist < dist then
48655: LD_VAR 0 6
48659: PUSH
48660: LD_VAR 0 5
48664: LESS
48665: IFFALSE 48693
// begin hex := hexes [ i ] ;
48667: LD_ADDR_VAR 0 8
48671: PUSH
48672: LD_VAR 0 2
48676: PUSH
48677: LD_VAR 0 4
48681: ARRAY
48682: ST_TO_ADDR
// dist := tdist ;
48683: LD_ADDR_VAR 0 5
48687: PUSH
48688: LD_VAR 0 6
48692: ST_TO_ADDR
// end ; end ;
48693: GO 48607
48695: POP
48696: POP
// result := hex ;
48697: LD_ADDR_VAR 0 3
48701: PUSH
48702: LD_VAR 0 8
48706: ST_TO_ADDR
// end ;
48707: LD_VAR 0 3
48711: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48712: LD_INT 0
48714: PPUSH
48715: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48716: LD_VAR 0 1
48720: NOT
48721: PUSH
48722: LD_VAR 0 1
48726: PUSH
48727: LD_INT 21
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 23
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PPUSH
48751: CALL_OW 69
48755: IN
48756: NOT
48757: OR
48758: IFFALSE 48762
// exit ;
48760: GO 48809
// for i = 1 to 3 do
48762: LD_ADDR_VAR 0 3
48766: PUSH
48767: DOUBLE
48768: LD_INT 1
48770: DEC
48771: ST_TO_ADDR
48772: LD_INT 3
48774: PUSH
48775: FOR_TO
48776: IFFALSE 48807
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48778: LD_VAR 0 1
48782: PPUSH
48783: CALL_OW 250
48787: PPUSH
48788: LD_VAR 0 1
48792: PPUSH
48793: CALL_OW 251
48797: PPUSH
48798: LD_INT 1
48800: PPUSH
48801: CALL_OW 453
48805: GO 48775
48807: POP
48808: POP
// end ;
48809: LD_VAR 0 2
48813: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48814: LD_INT 0
48816: PPUSH
48817: PPUSH
48818: PPUSH
48819: PPUSH
48820: PPUSH
48821: PPUSH
// if not unit or not enemy_unit then
48822: LD_VAR 0 1
48826: NOT
48827: PUSH
48828: LD_VAR 0 2
48832: NOT
48833: OR
48834: IFFALSE 48838
// exit ;
48836: GO 49305
// if GetLives ( i ) < 250 then
48838: LD_VAR 0 4
48842: PPUSH
48843: CALL_OW 256
48847: PUSH
48848: LD_INT 250
48850: LESS
48851: IFFALSE 48864
// begin ComAutodestruct ( i ) ;
48853: LD_VAR 0 4
48857: PPUSH
48858: CALL 48712 0 1
// exit ;
48862: GO 49305
// end ; x := GetX ( enemy_unit ) ;
48864: LD_ADDR_VAR 0 7
48868: PUSH
48869: LD_VAR 0 2
48873: PPUSH
48874: CALL_OW 250
48878: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48879: LD_ADDR_VAR 0 8
48883: PUSH
48884: LD_VAR 0 2
48888: PPUSH
48889: CALL_OW 251
48893: ST_TO_ADDR
// if not x or not y then
48894: LD_VAR 0 7
48898: NOT
48899: PUSH
48900: LD_VAR 0 8
48904: NOT
48905: OR
48906: IFFALSE 48910
// exit ;
48908: GO 49305
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48910: LD_ADDR_VAR 0 6
48914: PUSH
48915: LD_VAR 0 7
48919: PPUSH
48920: LD_INT 0
48922: PPUSH
48923: LD_INT 4
48925: PPUSH
48926: CALL_OW 272
48930: PUSH
48931: LD_VAR 0 8
48935: PPUSH
48936: LD_INT 0
48938: PPUSH
48939: LD_INT 4
48941: PPUSH
48942: CALL_OW 273
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_VAR 0 7
48955: PPUSH
48956: LD_INT 1
48958: PPUSH
48959: LD_INT 4
48961: PPUSH
48962: CALL_OW 272
48966: PUSH
48967: LD_VAR 0 8
48971: PPUSH
48972: LD_INT 1
48974: PPUSH
48975: LD_INT 4
48977: PPUSH
48978: CALL_OW 273
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_VAR 0 7
48991: PPUSH
48992: LD_INT 2
48994: PPUSH
48995: LD_INT 4
48997: PPUSH
48998: CALL_OW 272
49002: PUSH
49003: LD_VAR 0 8
49007: PPUSH
49008: LD_INT 2
49010: PPUSH
49011: LD_INT 4
49013: PPUSH
49014: CALL_OW 273
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_VAR 0 7
49027: PPUSH
49028: LD_INT 3
49030: PPUSH
49031: LD_INT 4
49033: PPUSH
49034: CALL_OW 272
49038: PUSH
49039: LD_VAR 0 8
49043: PPUSH
49044: LD_INT 3
49046: PPUSH
49047: LD_INT 4
49049: PPUSH
49050: CALL_OW 273
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_VAR 0 7
49063: PPUSH
49064: LD_INT 4
49066: PPUSH
49067: LD_INT 4
49069: PPUSH
49070: CALL_OW 272
49074: PUSH
49075: LD_VAR 0 8
49079: PPUSH
49080: LD_INT 4
49082: PPUSH
49083: LD_INT 4
49085: PPUSH
49086: CALL_OW 273
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_VAR 0 7
49099: PPUSH
49100: LD_INT 5
49102: PPUSH
49103: LD_INT 4
49105: PPUSH
49106: CALL_OW 272
49110: PUSH
49111: LD_VAR 0 8
49115: PPUSH
49116: LD_INT 5
49118: PPUSH
49119: LD_INT 4
49121: PPUSH
49122: CALL_OW 273
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: ST_TO_ADDR
// for i = tmp downto 1 do
49139: LD_ADDR_VAR 0 4
49143: PUSH
49144: DOUBLE
49145: LD_VAR 0 6
49149: INC
49150: ST_TO_ADDR
49151: LD_INT 1
49153: PUSH
49154: FOR_DOWNTO
49155: IFFALSE 49256
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49157: LD_VAR 0 6
49161: PUSH
49162: LD_VAR 0 4
49166: ARRAY
49167: PUSH
49168: LD_INT 1
49170: ARRAY
49171: PPUSH
49172: LD_VAR 0 6
49176: PUSH
49177: LD_VAR 0 4
49181: ARRAY
49182: PUSH
49183: LD_INT 2
49185: ARRAY
49186: PPUSH
49187: CALL_OW 488
49191: NOT
49192: PUSH
49193: LD_VAR 0 6
49197: PUSH
49198: LD_VAR 0 4
49202: ARRAY
49203: PUSH
49204: LD_INT 1
49206: ARRAY
49207: PPUSH
49208: LD_VAR 0 6
49212: PUSH
49213: LD_VAR 0 4
49217: ARRAY
49218: PUSH
49219: LD_INT 2
49221: ARRAY
49222: PPUSH
49223: CALL_OW 428
49227: PUSH
49228: LD_INT 0
49230: NONEQUAL
49231: OR
49232: IFFALSE 49254
// tmp := Delete ( tmp , i ) ;
49234: LD_ADDR_VAR 0 6
49238: PUSH
49239: LD_VAR 0 6
49243: PPUSH
49244: LD_VAR 0 4
49248: PPUSH
49249: CALL_OW 3
49253: ST_TO_ADDR
49254: GO 49154
49256: POP
49257: POP
// j := GetClosestHex ( unit , tmp ) ;
49258: LD_ADDR_VAR 0 5
49262: PUSH
49263: LD_VAR 0 1
49267: PPUSH
49268: LD_VAR 0 6
49272: PPUSH
49273: CALL 48560 0 2
49277: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49278: LD_VAR 0 1
49282: PPUSH
49283: LD_VAR 0 5
49287: PUSH
49288: LD_INT 1
49290: ARRAY
49291: PPUSH
49292: LD_VAR 0 5
49296: PUSH
49297: LD_INT 2
49299: ARRAY
49300: PPUSH
49301: CALL_OW 111
// end ;
49305: LD_VAR 0 3
49309: RET
// export function PrepareApemanSoldier ( ) ; begin
49310: LD_INT 0
49312: PPUSH
// uc_nation := 0 ;
49313: LD_ADDR_OWVAR 21
49317: PUSH
49318: LD_INT 0
49320: ST_TO_ADDR
// hc_sex := sex_male ;
49321: LD_ADDR_OWVAR 27
49325: PUSH
49326: LD_INT 1
49328: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49329: LD_ADDR_OWVAR 28
49333: PUSH
49334: LD_INT 15
49336: ST_TO_ADDR
// hc_gallery :=  ;
49337: LD_ADDR_OWVAR 33
49341: PUSH
49342: LD_STRING 
49344: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49345: LD_ADDR_OWVAR 31
49349: PUSH
49350: LD_INT 0
49352: PPUSH
49353: LD_INT 3
49355: PPUSH
49356: CALL_OW 12
49360: PUSH
49361: LD_INT 0
49363: PPUSH
49364: LD_INT 3
49366: PPUSH
49367: CALL_OW 12
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: ST_TO_ADDR
// end ;
49384: LD_VAR 0 1
49388: RET
// export function PrepareApemanEngineer ( ) ; begin
49389: LD_INT 0
49391: PPUSH
// uc_nation := 0 ;
49392: LD_ADDR_OWVAR 21
49396: PUSH
49397: LD_INT 0
49399: ST_TO_ADDR
// hc_sex := sex_male ;
49400: LD_ADDR_OWVAR 27
49404: PUSH
49405: LD_INT 1
49407: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49408: LD_ADDR_OWVAR 28
49412: PUSH
49413: LD_INT 16
49415: ST_TO_ADDR
// hc_gallery :=  ;
49416: LD_ADDR_OWVAR 33
49420: PUSH
49421: LD_STRING 
49423: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49424: LD_ADDR_OWVAR 31
49428: PUSH
49429: LD_INT 0
49431: PPUSH
49432: LD_INT 3
49434: PPUSH
49435: CALL_OW 12
49439: PUSH
49440: LD_INT 0
49442: PPUSH
49443: LD_INT 3
49445: PPUSH
49446: CALL_OW 12
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: ST_TO_ADDR
// end ;
49463: LD_VAR 0 1
49467: RET
// export function PrepareApeman ( agressivity ) ; begin
49468: LD_INT 0
49470: PPUSH
// uc_side := 0 ;
49471: LD_ADDR_OWVAR 20
49475: PUSH
49476: LD_INT 0
49478: ST_TO_ADDR
// uc_nation := 0 ;
49479: LD_ADDR_OWVAR 21
49483: PUSH
49484: LD_INT 0
49486: ST_TO_ADDR
// hc_sex := sex_male ;
49487: LD_ADDR_OWVAR 27
49491: PUSH
49492: LD_INT 1
49494: ST_TO_ADDR
// hc_class := class_apeman ;
49495: LD_ADDR_OWVAR 28
49499: PUSH
49500: LD_INT 12
49502: ST_TO_ADDR
// hc_gallery :=  ;
49503: LD_ADDR_OWVAR 33
49507: PUSH
49508: LD_STRING 
49510: ST_TO_ADDR
// if agressivity = 0 then
49511: LD_VAR 0 1
49515: PUSH
49516: LD_INT 0
49518: EQUAL
49519: IFFALSE 49531
// hc_agressivity := 0 else
49521: LD_ADDR_OWVAR 35
49525: PUSH
49526: LD_INT 0
49528: ST_TO_ADDR
49529: GO 49552
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49531: LD_ADDR_OWVAR 35
49535: PUSH
49536: LD_VAR 0 1
49540: NEG
49541: PPUSH
49542: LD_VAR 0 1
49546: PPUSH
49547: CALL_OW 12
49551: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49552: LD_ADDR_OWVAR 31
49556: PUSH
49557: LD_INT 0
49559: PPUSH
49560: LD_INT 3
49562: PPUSH
49563: CALL_OW 12
49567: PUSH
49568: LD_INT 0
49570: PPUSH
49571: LD_INT 3
49573: PPUSH
49574: CALL_OW 12
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: ST_TO_ADDR
// end ;
49591: LD_VAR 0 2
49595: RET
// export function PrepareTiger ( agressivity ) ; begin
49596: LD_INT 0
49598: PPUSH
// uc_side := 0 ;
49599: LD_ADDR_OWVAR 20
49603: PUSH
49604: LD_INT 0
49606: ST_TO_ADDR
// uc_nation := 0 ;
49607: LD_ADDR_OWVAR 21
49611: PUSH
49612: LD_INT 0
49614: ST_TO_ADDR
// hc_class := class_tiger ;
49615: LD_ADDR_OWVAR 28
49619: PUSH
49620: LD_INT 14
49622: ST_TO_ADDR
// hc_gallery :=  ;
49623: LD_ADDR_OWVAR 33
49627: PUSH
49628: LD_STRING 
49630: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49631: LD_ADDR_OWVAR 35
49635: PUSH
49636: LD_VAR 0 1
49640: NEG
49641: PPUSH
49642: LD_VAR 0 1
49646: PPUSH
49647: CALL_OW 12
49651: ST_TO_ADDR
// end ;
49652: LD_VAR 0 2
49656: RET
// export function PrepareEnchidna ( ) ; begin
49657: LD_INT 0
49659: PPUSH
// uc_side := 0 ;
49660: LD_ADDR_OWVAR 20
49664: PUSH
49665: LD_INT 0
49667: ST_TO_ADDR
// uc_nation := 0 ;
49668: LD_ADDR_OWVAR 21
49672: PUSH
49673: LD_INT 0
49675: ST_TO_ADDR
// hc_class := class_baggie ;
49676: LD_ADDR_OWVAR 28
49680: PUSH
49681: LD_INT 13
49683: ST_TO_ADDR
// hc_gallery :=  ;
49684: LD_ADDR_OWVAR 33
49688: PUSH
49689: LD_STRING 
49691: ST_TO_ADDR
// end ;
49692: LD_VAR 0 1
49696: RET
// export function PrepareFrog ( ) ; begin
49697: LD_INT 0
49699: PPUSH
// uc_side := 0 ;
49700: LD_ADDR_OWVAR 20
49704: PUSH
49705: LD_INT 0
49707: ST_TO_ADDR
// uc_nation := 0 ;
49708: LD_ADDR_OWVAR 21
49712: PUSH
49713: LD_INT 0
49715: ST_TO_ADDR
// hc_class := class_frog ;
49716: LD_ADDR_OWVAR 28
49720: PUSH
49721: LD_INT 19
49723: ST_TO_ADDR
// hc_gallery :=  ;
49724: LD_ADDR_OWVAR 33
49728: PUSH
49729: LD_STRING 
49731: ST_TO_ADDR
// end ;
49732: LD_VAR 0 1
49736: RET
// export function PrepareFish ( ) ; begin
49737: LD_INT 0
49739: PPUSH
// uc_side := 0 ;
49740: LD_ADDR_OWVAR 20
49744: PUSH
49745: LD_INT 0
49747: ST_TO_ADDR
// uc_nation := 0 ;
49748: LD_ADDR_OWVAR 21
49752: PUSH
49753: LD_INT 0
49755: ST_TO_ADDR
// hc_class := class_fish ;
49756: LD_ADDR_OWVAR 28
49760: PUSH
49761: LD_INT 20
49763: ST_TO_ADDR
// hc_gallery :=  ;
49764: LD_ADDR_OWVAR 33
49768: PUSH
49769: LD_STRING 
49771: ST_TO_ADDR
// end ;
49772: LD_VAR 0 1
49776: RET
// export function PrepareBird ( ) ; begin
49777: LD_INT 0
49779: PPUSH
// uc_side := 0 ;
49780: LD_ADDR_OWVAR 20
49784: PUSH
49785: LD_INT 0
49787: ST_TO_ADDR
// uc_nation := 0 ;
49788: LD_ADDR_OWVAR 21
49792: PUSH
49793: LD_INT 0
49795: ST_TO_ADDR
// hc_class := class_phororhacos ;
49796: LD_ADDR_OWVAR 28
49800: PUSH
49801: LD_INT 18
49803: ST_TO_ADDR
// hc_gallery :=  ;
49804: LD_ADDR_OWVAR 33
49808: PUSH
49809: LD_STRING 
49811: ST_TO_ADDR
// end ;
49812: LD_VAR 0 1
49816: RET
// export function PrepareHorse ( ) ; begin
49817: LD_INT 0
49819: PPUSH
// uc_side := 0 ;
49820: LD_ADDR_OWVAR 20
49824: PUSH
49825: LD_INT 0
49827: ST_TO_ADDR
// uc_nation := 0 ;
49828: LD_ADDR_OWVAR 21
49832: PUSH
49833: LD_INT 0
49835: ST_TO_ADDR
// hc_class := class_horse ;
49836: LD_ADDR_OWVAR 28
49840: PUSH
49841: LD_INT 21
49843: ST_TO_ADDR
// hc_gallery :=  ;
49844: LD_ADDR_OWVAR 33
49848: PUSH
49849: LD_STRING 
49851: ST_TO_ADDR
// end ;
49852: LD_VAR 0 1
49856: RET
// export function PrepareMastodont ( ) ; begin
49857: LD_INT 0
49859: PPUSH
// uc_side := 0 ;
49860: LD_ADDR_OWVAR 20
49864: PUSH
49865: LD_INT 0
49867: ST_TO_ADDR
// uc_nation := 0 ;
49868: LD_ADDR_OWVAR 21
49872: PUSH
49873: LD_INT 0
49875: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49876: LD_ADDR_OWVAR 37
49880: PUSH
49881: LD_INT 31
49883: ST_TO_ADDR
// vc_control := control_rider ;
49884: LD_ADDR_OWVAR 38
49888: PUSH
49889: LD_INT 4
49891: ST_TO_ADDR
// end ;
49892: LD_VAR 0 1
49896: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49897: LD_INT 0
49899: PPUSH
49900: PPUSH
49901: PPUSH
// uc_side = 0 ;
49902: LD_ADDR_OWVAR 20
49906: PUSH
49907: LD_INT 0
49909: ST_TO_ADDR
// uc_nation = 0 ;
49910: LD_ADDR_OWVAR 21
49914: PUSH
49915: LD_INT 0
49917: ST_TO_ADDR
// InitHc_All ( ) ;
49918: CALL_OW 584
// InitVc ;
49922: CALL_OW 20
// if mastodonts then
49926: LD_VAR 0 6
49930: IFFALSE 49997
// for i = 1 to mastodonts do
49932: LD_ADDR_VAR 0 11
49936: PUSH
49937: DOUBLE
49938: LD_INT 1
49940: DEC
49941: ST_TO_ADDR
49942: LD_VAR 0 6
49946: PUSH
49947: FOR_TO
49948: IFFALSE 49995
// begin vc_chassis := 31 ;
49950: LD_ADDR_OWVAR 37
49954: PUSH
49955: LD_INT 31
49957: ST_TO_ADDR
// vc_control := control_rider ;
49958: LD_ADDR_OWVAR 38
49962: PUSH
49963: LD_INT 4
49965: ST_TO_ADDR
// animal := CreateVehicle ;
49966: LD_ADDR_VAR 0 12
49970: PUSH
49971: CALL_OW 45
49975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49976: LD_VAR 0 12
49980: PPUSH
49981: LD_VAR 0 8
49985: PPUSH
49986: LD_INT 0
49988: PPUSH
49989: CALL 52125 0 3
// end ;
49993: GO 49947
49995: POP
49996: POP
// if horses then
49997: LD_VAR 0 5
50001: IFFALSE 50068
// for i = 1 to horses do
50003: LD_ADDR_VAR 0 11
50007: PUSH
50008: DOUBLE
50009: LD_INT 1
50011: DEC
50012: ST_TO_ADDR
50013: LD_VAR 0 5
50017: PUSH
50018: FOR_TO
50019: IFFALSE 50066
// begin hc_class := 21 ;
50021: LD_ADDR_OWVAR 28
50025: PUSH
50026: LD_INT 21
50028: ST_TO_ADDR
// hc_gallery :=  ;
50029: LD_ADDR_OWVAR 33
50033: PUSH
50034: LD_STRING 
50036: ST_TO_ADDR
// animal := CreateHuman ;
50037: LD_ADDR_VAR 0 12
50041: PUSH
50042: CALL_OW 44
50046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50047: LD_VAR 0 12
50051: PPUSH
50052: LD_VAR 0 8
50056: PPUSH
50057: LD_INT 0
50059: PPUSH
50060: CALL 52125 0 3
// end ;
50064: GO 50018
50066: POP
50067: POP
// if birds then
50068: LD_VAR 0 1
50072: IFFALSE 50139
// for i = 1 to birds do
50074: LD_ADDR_VAR 0 11
50078: PUSH
50079: DOUBLE
50080: LD_INT 1
50082: DEC
50083: ST_TO_ADDR
50084: LD_VAR 0 1
50088: PUSH
50089: FOR_TO
50090: IFFALSE 50137
// begin hc_class := 18 ;
50092: LD_ADDR_OWVAR 28
50096: PUSH
50097: LD_INT 18
50099: ST_TO_ADDR
// hc_gallery =  ;
50100: LD_ADDR_OWVAR 33
50104: PUSH
50105: LD_STRING 
50107: ST_TO_ADDR
// animal := CreateHuman ;
50108: LD_ADDR_VAR 0 12
50112: PUSH
50113: CALL_OW 44
50117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50118: LD_VAR 0 12
50122: PPUSH
50123: LD_VAR 0 8
50127: PPUSH
50128: LD_INT 0
50130: PPUSH
50131: CALL 52125 0 3
// end ;
50135: GO 50089
50137: POP
50138: POP
// if tigers then
50139: LD_VAR 0 2
50143: IFFALSE 50227
// for i = 1 to tigers do
50145: LD_ADDR_VAR 0 11
50149: PUSH
50150: DOUBLE
50151: LD_INT 1
50153: DEC
50154: ST_TO_ADDR
50155: LD_VAR 0 2
50159: PUSH
50160: FOR_TO
50161: IFFALSE 50225
// begin hc_class = class_tiger ;
50163: LD_ADDR_OWVAR 28
50167: PUSH
50168: LD_INT 14
50170: ST_TO_ADDR
// hc_gallery =  ;
50171: LD_ADDR_OWVAR 33
50175: PUSH
50176: LD_STRING 
50178: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50179: LD_ADDR_OWVAR 35
50183: PUSH
50184: LD_INT 7
50186: NEG
50187: PPUSH
50188: LD_INT 7
50190: PPUSH
50191: CALL_OW 12
50195: ST_TO_ADDR
// animal := CreateHuman ;
50196: LD_ADDR_VAR 0 12
50200: PUSH
50201: CALL_OW 44
50205: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50206: LD_VAR 0 12
50210: PPUSH
50211: LD_VAR 0 8
50215: PPUSH
50216: LD_INT 0
50218: PPUSH
50219: CALL 52125 0 3
// end ;
50223: GO 50160
50225: POP
50226: POP
// if apemans then
50227: LD_VAR 0 3
50231: IFFALSE 50354
// for i = 1 to apemans do
50233: LD_ADDR_VAR 0 11
50237: PUSH
50238: DOUBLE
50239: LD_INT 1
50241: DEC
50242: ST_TO_ADDR
50243: LD_VAR 0 3
50247: PUSH
50248: FOR_TO
50249: IFFALSE 50352
// begin hc_class = class_apeman ;
50251: LD_ADDR_OWVAR 28
50255: PUSH
50256: LD_INT 12
50258: ST_TO_ADDR
// hc_gallery =  ;
50259: LD_ADDR_OWVAR 33
50263: PUSH
50264: LD_STRING 
50266: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50267: LD_ADDR_OWVAR 35
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PPUSH
50276: LD_INT 2
50278: PPUSH
50279: CALL_OW 12
50283: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50284: LD_ADDR_OWVAR 31
50288: PUSH
50289: LD_INT 1
50291: PPUSH
50292: LD_INT 3
50294: PPUSH
50295: CALL_OW 12
50299: PUSH
50300: LD_INT 1
50302: PPUSH
50303: LD_INT 3
50305: PPUSH
50306: CALL_OW 12
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: ST_TO_ADDR
// animal := CreateHuman ;
50323: LD_ADDR_VAR 0 12
50327: PUSH
50328: CALL_OW 44
50332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50333: LD_VAR 0 12
50337: PPUSH
50338: LD_VAR 0 8
50342: PPUSH
50343: LD_INT 0
50345: PPUSH
50346: CALL 52125 0 3
// end ;
50350: GO 50248
50352: POP
50353: POP
// if enchidnas then
50354: LD_VAR 0 4
50358: IFFALSE 50425
// for i = 1 to enchidnas do
50360: LD_ADDR_VAR 0 11
50364: PUSH
50365: DOUBLE
50366: LD_INT 1
50368: DEC
50369: ST_TO_ADDR
50370: LD_VAR 0 4
50374: PUSH
50375: FOR_TO
50376: IFFALSE 50423
// begin hc_class = 13 ;
50378: LD_ADDR_OWVAR 28
50382: PUSH
50383: LD_INT 13
50385: ST_TO_ADDR
// hc_gallery =  ;
50386: LD_ADDR_OWVAR 33
50390: PUSH
50391: LD_STRING 
50393: ST_TO_ADDR
// animal := CreateHuman ;
50394: LD_ADDR_VAR 0 12
50398: PUSH
50399: CALL_OW 44
50403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50404: LD_VAR 0 12
50408: PPUSH
50409: LD_VAR 0 8
50413: PPUSH
50414: LD_INT 0
50416: PPUSH
50417: CALL 52125 0 3
// end ;
50421: GO 50375
50423: POP
50424: POP
// if fishes then
50425: LD_VAR 0 7
50429: IFFALSE 50496
// for i = 1 to fishes do
50431: LD_ADDR_VAR 0 11
50435: PUSH
50436: DOUBLE
50437: LD_INT 1
50439: DEC
50440: ST_TO_ADDR
50441: LD_VAR 0 7
50445: PUSH
50446: FOR_TO
50447: IFFALSE 50494
// begin hc_class = 20 ;
50449: LD_ADDR_OWVAR 28
50453: PUSH
50454: LD_INT 20
50456: ST_TO_ADDR
// hc_gallery =  ;
50457: LD_ADDR_OWVAR 33
50461: PUSH
50462: LD_STRING 
50464: ST_TO_ADDR
// animal := CreateHuman ;
50465: LD_ADDR_VAR 0 12
50469: PUSH
50470: CALL_OW 44
50474: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50475: LD_VAR 0 12
50479: PPUSH
50480: LD_VAR 0 9
50484: PPUSH
50485: LD_INT 0
50487: PPUSH
50488: CALL 52125 0 3
// end ;
50492: GO 50446
50494: POP
50495: POP
// end ;
50496: LD_VAR 0 10
50500: RET
// export function WantHeal ( sci , unit ) ; begin
50501: LD_INT 0
50503: PPUSH
// if GetTaskList ( sci ) > 0 then
50504: LD_VAR 0 1
50508: PPUSH
50509: CALL_OW 437
50513: PUSH
50514: LD_INT 0
50516: GREATER
50517: IFFALSE 50587
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50519: LD_VAR 0 1
50523: PPUSH
50524: CALL_OW 437
50528: PUSH
50529: LD_INT 1
50531: ARRAY
50532: PUSH
50533: LD_INT 1
50535: ARRAY
50536: PUSH
50537: LD_STRING l
50539: EQUAL
50540: PUSH
50541: LD_VAR 0 1
50545: PPUSH
50546: CALL_OW 437
50550: PUSH
50551: LD_INT 1
50553: ARRAY
50554: PUSH
50555: LD_INT 4
50557: ARRAY
50558: PUSH
50559: LD_VAR 0 2
50563: EQUAL
50564: AND
50565: IFFALSE 50577
// result := true else
50567: LD_ADDR_VAR 0 3
50571: PUSH
50572: LD_INT 1
50574: ST_TO_ADDR
50575: GO 50585
// result := false ;
50577: LD_ADDR_VAR 0 3
50581: PUSH
50582: LD_INT 0
50584: ST_TO_ADDR
// end else
50585: GO 50595
// result := false ;
50587: LD_ADDR_VAR 0 3
50591: PUSH
50592: LD_INT 0
50594: ST_TO_ADDR
// end ;
50595: LD_VAR 0 3
50599: RET
// export function HealTarget ( sci ) ; begin
50600: LD_INT 0
50602: PPUSH
// if not sci then
50603: LD_VAR 0 1
50607: NOT
50608: IFFALSE 50612
// exit ;
50610: GO 50677
// result := 0 ;
50612: LD_ADDR_VAR 0 2
50616: PUSH
50617: LD_INT 0
50619: ST_TO_ADDR
// if GetTaskList ( sci ) then
50620: LD_VAR 0 1
50624: PPUSH
50625: CALL_OW 437
50629: IFFALSE 50677
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50631: LD_VAR 0 1
50635: PPUSH
50636: CALL_OW 437
50640: PUSH
50641: LD_INT 1
50643: ARRAY
50644: PUSH
50645: LD_INT 1
50647: ARRAY
50648: PUSH
50649: LD_STRING l
50651: EQUAL
50652: IFFALSE 50677
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50654: LD_ADDR_VAR 0 2
50658: PUSH
50659: LD_VAR 0 1
50663: PPUSH
50664: CALL_OW 437
50668: PUSH
50669: LD_INT 1
50671: ARRAY
50672: PUSH
50673: LD_INT 4
50675: ARRAY
50676: ST_TO_ADDR
// end ;
50677: LD_VAR 0 2
50681: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50682: LD_INT 0
50684: PPUSH
50685: PPUSH
50686: PPUSH
50687: PPUSH
// if not base_units then
50688: LD_VAR 0 1
50692: NOT
50693: IFFALSE 50697
// exit ;
50695: GO 50784
// result := false ;
50697: LD_ADDR_VAR 0 2
50701: PUSH
50702: LD_INT 0
50704: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50705: LD_ADDR_VAR 0 5
50709: PUSH
50710: LD_VAR 0 1
50714: PPUSH
50715: LD_INT 21
50717: PUSH
50718: LD_INT 3
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PPUSH
50725: CALL_OW 72
50729: ST_TO_ADDR
// if not tmp then
50730: LD_VAR 0 5
50734: NOT
50735: IFFALSE 50739
// exit ;
50737: GO 50784
// for i in tmp do
50739: LD_ADDR_VAR 0 3
50743: PUSH
50744: LD_VAR 0 5
50748: PUSH
50749: FOR_IN
50750: IFFALSE 50782
// begin result := EnemyInRange ( i , 22 ) ;
50752: LD_ADDR_VAR 0 2
50756: PUSH
50757: LD_VAR 0 3
50761: PPUSH
50762: LD_INT 22
50764: PPUSH
50765: CALL 48362 0 2
50769: ST_TO_ADDR
// if result then
50770: LD_VAR 0 2
50774: IFFALSE 50780
// exit ;
50776: POP
50777: POP
50778: GO 50784
// end ;
50780: GO 50749
50782: POP
50783: POP
// end ;
50784: LD_VAR 0 2
50788: RET
// export function FilterByTag ( units , tag ) ; begin
50789: LD_INT 0
50791: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50792: LD_ADDR_VAR 0 3
50796: PUSH
50797: LD_VAR 0 1
50801: PPUSH
50802: LD_INT 120
50804: PUSH
50805: LD_VAR 0 2
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PPUSH
50814: CALL_OW 72
50818: ST_TO_ADDR
// end ;
50819: LD_VAR 0 3
50823: RET
// export function IsDriver ( un ) ; begin
50824: LD_INT 0
50826: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50827: LD_ADDR_VAR 0 2
50831: PUSH
50832: LD_VAR 0 1
50836: PUSH
50837: LD_INT 55
50839: PUSH
50840: EMPTY
50841: LIST
50842: PPUSH
50843: CALL_OW 69
50847: IN
50848: ST_TO_ADDR
// end ;
50849: LD_VAR 0 2
50853: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50854: LD_INT 0
50856: PPUSH
50857: PPUSH
// list := [ ] ;
50858: LD_ADDR_VAR 0 5
50862: PUSH
50863: EMPTY
50864: ST_TO_ADDR
// case d of 0 :
50865: LD_VAR 0 3
50869: PUSH
50870: LD_INT 0
50872: DOUBLE
50873: EQUAL
50874: IFTRUE 50878
50876: GO 51011
50878: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50879: LD_ADDR_VAR 0 5
50883: PUSH
50884: LD_VAR 0 1
50888: PUSH
50889: LD_INT 4
50891: MINUS
50892: PUSH
50893: LD_VAR 0 2
50897: PUSH
50898: LD_INT 4
50900: MINUS
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: LIST
50909: PUSH
50910: LD_VAR 0 1
50914: PUSH
50915: LD_INT 3
50917: MINUS
50918: PUSH
50919: LD_VAR 0 2
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: PUSH
50932: LD_VAR 0 1
50936: PUSH
50937: LD_INT 4
50939: PLUS
50940: PUSH
50941: LD_VAR 0 2
50945: PUSH
50946: LD_INT 4
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: LIST
50953: PUSH
50954: LD_VAR 0 1
50958: PUSH
50959: LD_INT 3
50961: PLUS
50962: PUSH
50963: LD_VAR 0 2
50967: PUSH
50968: LD_INT 3
50970: PLUS
50971: PUSH
50972: LD_INT 5
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: LIST
50979: PUSH
50980: LD_VAR 0 1
50984: PUSH
50985: LD_VAR 0 2
50989: PUSH
50990: LD_INT 4
50992: PLUS
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: ST_TO_ADDR
// end ; 1 :
51009: GO 51709
51011: LD_INT 1
51013: DOUBLE
51014: EQUAL
51015: IFTRUE 51019
51017: GO 51152
51019: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51020: LD_ADDR_VAR 0 5
51024: PUSH
51025: LD_VAR 0 1
51029: PUSH
51030: LD_VAR 0 2
51034: PUSH
51035: LD_INT 4
51037: MINUS
51038: PUSH
51039: LD_INT 3
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: PUSH
51047: LD_VAR 0 1
51051: PUSH
51052: LD_INT 3
51054: MINUS
51055: PUSH
51056: LD_VAR 0 2
51060: PUSH
51061: LD_INT 3
51063: MINUS
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: PUSH
51073: LD_VAR 0 1
51077: PUSH
51078: LD_INT 4
51080: MINUS
51081: PUSH
51082: LD_VAR 0 2
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: PUSH
51095: LD_VAR 0 1
51099: PUSH
51100: LD_VAR 0 2
51104: PUSH
51105: LD_INT 3
51107: PLUS
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: LIST
51116: PUSH
51117: LD_VAR 0 1
51121: PUSH
51122: LD_INT 4
51124: PLUS
51125: PUSH
51126: LD_VAR 0 2
51130: PUSH
51131: LD_INT 4
51133: PLUS
51134: PUSH
51135: LD_INT 5
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: LIST
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: ST_TO_ADDR
// end ; 2 :
51150: GO 51709
51152: LD_INT 2
51154: DOUBLE
51155: EQUAL
51156: IFTRUE 51160
51158: GO 51289
51160: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51161: LD_ADDR_VAR 0 5
51165: PUSH
51166: LD_VAR 0 1
51170: PUSH
51171: LD_VAR 0 2
51175: PUSH
51176: LD_INT 3
51178: MINUS
51179: PUSH
51180: LD_INT 3
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: PUSH
51188: LD_VAR 0 1
51192: PUSH
51193: LD_INT 4
51195: PLUS
51196: PUSH
51197: LD_VAR 0 2
51201: PUSH
51202: LD_INT 4
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: LIST
51209: PUSH
51210: LD_VAR 0 1
51214: PUSH
51215: LD_VAR 0 2
51219: PUSH
51220: LD_INT 4
51222: PLUS
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: PUSH
51232: LD_VAR 0 1
51236: PUSH
51237: LD_INT 3
51239: MINUS
51240: PUSH
51241: LD_VAR 0 2
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: LIST
51253: PUSH
51254: LD_VAR 0 1
51258: PUSH
51259: LD_INT 4
51261: MINUS
51262: PUSH
51263: LD_VAR 0 2
51267: PUSH
51268: LD_INT 4
51270: MINUS
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: ST_TO_ADDR
// end ; 3 :
51287: GO 51709
51289: LD_INT 3
51291: DOUBLE
51292: EQUAL
51293: IFTRUE 51297
51295: GO 51430
51297: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51298: LD_ADDR_VAR 0 5
51302: PUSH
51303: LD_VAR 0 1
51307: PUSH
51308: LD_INT 3
51310: PLUS
51311: PUSH
51312: LD_VAR 0 2
51316: PUSH
51317: LD_INT 4
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: PUSH
51325: LD_VAR 0 1
51329: PUSH
51330: LD_INT 4
51332: PLUS
51333: PUSH
51334: LD_VAR 0 2
51338: PUSH
51339: LD_INT 4
51341: PLUS
51342: PUSH
51343: LD_INT 5
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: LIST
51350: PUSH
51351: LD_VAR 0 1
51355: PUSH
51356: LD_INT 4
51358: MINUS
51359: PUSH
51360: LD_VAR 0 2
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: LIST
51372: PUSH
51373: LD_VAR 0 1
51377: PUSH
51378: LD_VAR 0 2
51382: PUSH
51383: LD_INT 4
51385: MINUS
51386: PUSH
51387: LD_INT 3
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: LIST
51394: PUSH
51395: LD_VAR 0 1
51399: PUSH
51400: LD_INT 3
51402: MINUS
51403: PUSH
51404: LD_VAR 0 2
51408: PUSH
51409: LD_INT 3
51411: MINUS
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: LIST
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: ST_TO_ADDR
// end ; 4 :
51428: GO 51709
51430: LD_INT 4
51432: DOUBLE
51433: EQUAL
51434: IFTRUE 51438
51436: GO 51571
51438: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51439: LD_ADDR_VAR 0 5
51443: PUSH
51444: LD_VAR 0 1
51448: PUSH
51449: LD_VAR 0 2
51453: PUSH
51454: LD_INT 4
51456: PLUS
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: LIST
51465: PUSH
51466: LD_VAR 0 1
51470: PUSH
51471: LD_INT 3
51473: PLUS
51474: PUSH
51475: LD_VAR 0 2
51479: PUSH
51480: LD_INT 3
51482: PLUS
51483: PUSH
51484: LD_INT 5
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: LIST
51491: PUSH
51492: LD_VAR 0 1
51496: PUSH
51497: LD_INT 4
51499: PLUS
51500: PUSH
51501: LD_VAR 0 2
51505: PUSH
51506: LD_INT 4
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: LIST
51513: PUSH
51514: LD_VAR 0 1
51518: PUSH
51519: LD_VAR 0 2
51523: PUSH
51524: LD_INT 3
51526: MINUS
51527: PUSH
51528: LD_INT 3
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: LIST
51535: PUSH
51536: LD_VAR 0 1
51540: PUSH
51541: LD_INT 4
51543: MINUS
51544: PUSH
51545: LD_VAR 0 2
51549: PUSH
51550: LD_INT 4
51552: MINUS
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: ST_TO_ADDR
// end ; 5 :
51569: GO 51709
51571: LD_INT 5
51573: DOUBLE
51574: EQUAL
51575: IFTRUE 51579
51577: GO 51708
51579: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51580: LD_ADDR_VAR 0 5
51584: PUSH
51585: LD_VAR 0 1
51589: PUSH
51590: LD_INT 4
51592: MINUS
51593: PUSH
51594: LD_VAR 0 2
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: LIST
51606: PUSH
51607: LD_VAR 0 1
51611: PUSH
51612: LD_VAR 0 2
51616: PUSH
51617: LD_INT 4
51619: MINUS
51620: PUSH
51621: LD_INT 3
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: PUSH
51629: LD_VAR 0 1
51633: PUSH
51634: LD_INT 4
51636: PLUS
51637: PUSH
51638: LD_VAR 0 2
51642: PUSH
51643: LD_INT 4
51645: PLUS
51646: PUSH
51647: LD_INT 5
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: PUSH
51655: LD_VAR 0 1
51659: PUSH
51660: LD_INT 3
51662: PLUS
51663: PUSH
51664: LD_VAR 0 2
51668: PUSH
51669: LD_INT 4
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: LIST
51676: PUSH
51677: LD_VAR 0 1
51681: PUSH
51682: LD_VAR 0 2
51686: PUSH
51687: LD_INT 3
51689: PLUS
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: LIST
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: ST_TO_ADDR
// end ; end ;
51706: GO 51709
51708: POP
// result := list ;
51709: LD_ADDR_VAR 0 4
51713: PUSH
51714: LD_VAR 0 5
51718: ST_TO_ADDR
// end ;
51719: LD_VAR 0 4
51723: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51724: LD_INT 0
51726: PPUSH
51727: PPUSH
51728: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51729: LD_VAR 0 1
51733: NOT
51734: PUSH
51735: LD_VAR 0 2
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: LD_INT 3
51748: PUSH
51749: LD_INT 4
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: IN
51758: NOT
51759: OR
51760: IFFALSE 51764
// exit ;
51762: GO 51847
// tmp := [ ] ;
51764: LD_ADDR_VAR 0 5
51768: PUSH
51769: EMPTY
51770: ST_TO_ADDR
// for i in units do
51771: LD_ADDR_VAR 0 4
51775: PUSH
51776: LD_VAR 0 1
51780: PUSH
51781: FOR_IN
51782: IFFALSE 51816
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51784: LD_ADDR_VAR 0 5
51788: PUSH
51789: LD_VAR 0 5
51793: PPUSH
51794: LD_VAR 0 4
51798: PPUSH
51799: LD_VAR 0 2
51803: PPUSH
51804: CALL_OW 259
51808: PPUSH
51809: CALL 53220 0 2
51813: ST_TO_ADDR
51814: GO 51781
51816: POP
51817: POP
// if not tmp then
51818: LD_VAR 0 5
51822: NOT
51823: IFFALSE 51827
// exit ;
51825: GO 51847
// result := SortListByListDesc ( units , tmp ) ;
51827: LD_ADDR_VAR 0 3
51831: PUSH
51832: LD_VAR 0 1
51836: PPUSH
51837: LD_VAR 0 5
51841: PPUSH
51842: CALL_OW 77
51846: ST_TO_ADDR
// end ;
51847: LD_VAR 0 3
51851: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51852: LD_INT 0
51854: PPUSH
51855: PPUSH
51856: PPUSH
// result := false ;
51857: LD_ADDR_VAR 0 3
51861: PUSH
51862: LD_INT 0
51864: ST_TO_ADDR
// if not building then
51865: LD_VAR 0 2
51869: NOT
51870: IFFALSE 51874
// exit ;
51872: GO 52012
// x := GetX ( building ) ;
51874: LD_ADDR_VAR 0 4
51878: PUSH
51879: LD_VAR 0 2
51883: PPUSH
51884: CALL_OW 250
51888: ST_TO_ADDR
// y := GetY ( building ) ;
51889: LD_ADDR_VAR 0 5
51893: PUSH
51894: LD_VAR 0 2
51898: PPUSH
51899: CALL_OW 251
51903: ST_TO_ADDR
// if not x or not y then
51904: LD_VAR 0 4
51908: NOT
51909: PUSH
51910: LD_VAR 0 5
51914: NOT
51915: OR
51916: IFFALSE 51920
// exit ;
51918: GO 52012
// if GetTaskList ( unit ) then
51920: LD_VAR 0 1
51924: PPUSH
51925: CALL_OW 437
51929: IFFALSE 52012
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51931: LD_STRING e
51933: PUSH
51934: LD_VAR 0 1
51938: PPUSH
51939: CALL_OW 437
51943: PUSH
51944: LD_INT 1
51946: ARRAY
51947: PUSH
51948: LD_INT 1
51950: ARRAY
51951: EQUAL
51952: PUSH
51953: LD_VAR 0 4
51957: PUSH
51958: LD_VAR 0 1
51962: PPUSH
51963: CALL_OW 437
51967: PUSH
51968: LD_INT 1
51970: ARRAY
51971: PUSH
51972: LD_INT 2
51974: ARRAY
51975: EQUAL
51976: AND
51977: PUSH
51978: LD_VAR 0 5
51982: PUSH
51983: LD_VAR 0 1
51987: PPUSH
51988: CALL_OW 437
51992: PUSH
51993: LD_INT 1
51995: ARRAY
51996: PUSH
51997: LD_INT 3
51999: ARRAY
52000: EQUAL
52001: AND
52002: IFFALSE 52012
// result := true end ;
52004: LD_ADDR_VAR 0 3
52008: PUSH
52009: LD_INT 1
52011: ST_TO_ADDR
// end ;
52012: LD_VAR 0 3
52016: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52017: LD_INT 0
52019: PPUSH
// result := false ;
52020: LD_ADDR_VAR 0 4
52024: PUSH
52025: LD_INT 0
52027: ST_TO_ADDR
// if GetTaskList ( unit ) then
52028: LD_VAR 0 1
52032: PPUSH
52033: CALL_OW 437
52037: IFFALSE 52120
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52039: LD_STRING M
52041: PUSH
52042: LD_VAR 0 1
52046: PPUSH
52047: CALL_OW 437
52051: PUSH
52052: LD_INT 1
52054: ARRAY
52055: PUSH
52056: LD_INT 1
52058: ARRAY
52059: EQUAL
52060: PUSH
52061: LD_VAR 0 2
52065: PUSH
52066: LD_VAR 0 1
52070: PPUSH
52071: CALL_OW 437
52075: PUSH
52076: LD_INT 1
52078: ARRAY
52079: PUSH
52080: LD_INT 2
52082: ARRAY
52083: EQUAL
52084: AND
52085: PUSH
52086: LD_VAR 0 3
52090: PUSH
52091: LD_VAR 0 1
52095: PPUSH
52096: CALL_OW 437
52100: PUSH
52101: LD_INT 1
52103: ARRAY
52104: PUSH
52105: LD_INT 3
52107: ARRAY
52108: EQUAL
52109: AND
52110: IFFALSE 52120
// result := true ;
52112: LD_ADDR_VAR 0 4
52116: PUSH
52117: LD_INT 1
52119: ST_TO_ADDR
// end ; end ;
52120: LD_VAR 0 4
52124: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52125: LD_INT 0
52127: PPUSH
52128: PPUSH
52129: PPUSH
52130: PPUSH
// if not unit or not area then
52131: LD_VAR 0 1
52135: NOT
52136: PUSH
52137: LD_VAR 0 2
52141: NOT
52142: OR
52143: IFFALSE 52147
// exit ;
52145: GO 52323
// tmp := AreaToList ( area , i ) ;
52147: LD_ADDR_VAR 0 6
52151: PUSH
52152: LD_VAR 0 2
52156: PPUSH
52157: LD_VAR 0 5
52161: PPUSH
52162: CALL_OW 517
52166: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52167: LD_ADDR_VAR 0 5
52171: PUSH
52172: DOUBLE
52173: LD_INT 1
52175: DEC
52176: ST_TO_ADDR
52177: LD_VAR 0 6
52181: PUSH
52182: LD_INT 1
52184: ARRAY
52185: PUSH
52186: FOR_TO
52187: IFFALSE 52321
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52189: LD_ADDR_VAR 0 7
52193: PUSH
52194: LD_VAR 0 6
52198: PUSH
52199: LD_INT 1
52201: ARRAY
52202: PUSH
52203: LD_VAR 0 5
52207: ARRAY
52208: PUSH
52209: LD_VAR 0 6
52213: PUSH
52214: LD_INT 2
52216: ARRAY
52217: PUSH
52218: LD_VAR 0 5
52222: ARRAY
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52228: LD_INT 92
52230: PUSH
52231: LD_VAR 0 7
52235: PUSH
52236: LD_INT 1
52238: ARRAY
52239: PUSH
52240: LD_VAR 0 7
52244: PUSH
52245: LD_INT 2
52247: ARRAY
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: PPUSH
52258: CALL_OW 69
52262: PUSH
52263: LD_INT 0
52265: EQUAL
52266: IFFALSE 52319
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52268: LD_VAR 0 1
52272: PPUSH
52273: LD_VAR 0 7
52277: PUSH
52278: LD_INT 1
52280: ARRAY
52281: PPUSH
52282: LD_VAR 0 7
52286: PUSH
52287: LD_INT 2
52289: ARRAY
52290: PPUSH
52291: LD_VAR 0 3
52295: PPUSH
52296: CALL_OW 48
// result := IsPlaced ( unit ) ;
52300: LD_ADDR_VAR 0 4
52304: PUSH
52305: LD_VAR 0 1
52309: PPUSH
52310: CALL_OW 305
52314: ST_TO_ADDR
// exit ;
52315: POP
52316: POP
52317: GO 52323
// end ; end ;
52319: GO 52186
52321: POP
52322: POP
// end ;
52323: LD_VAR 0 4
52327: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52328: LD_INT 0
52330: PPUSH
52331: PPUSH
52332: PPUSH
// if not side or side > 8 then
52333: LD_VAR 0 1
52337: NOT
52338: PUSH
52339: LD_VAR 0 1
52343: PUSH
52344: LD_INT 8
52346: GREATER
52347: OR
52348: IFFALSE 52352
// exit ;
52350: GO 52539
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52352: LD_ADDR_VAR 0 4
52356: PUSH
52357: LD_INT 22
52359: PUSH
52360: LD_VAR 0 1
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 21
52371: PUSH
52372: LD_INT 3
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PPUSH
52383: CALL_OW 69
52387: ST_TO_ADDR
// if not tmp then
52388: LD_VAR 0 4
52392: NOT
52393: IFFALSE 52397
// exit ;
52395: GO 52539
// enable_addtolog := true ;
52397: LD_ADDR_OWVAR 81
52401: PUSH
52402: LD_INT 1
52404: ST_TO_ADDR
// AddToLog ( [ ) ;
52405: LD_STRING [
52407: PPUSH
52408: CALL_OW 561
// for i in tmp do
52412: LD_ADDR_VAR 0 3
52416: PUSH
52417: LD_VAR 0 4
52421: PUSH
52422: FOR_IN
52423: IFFALSE 52530
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52425: LD_STRING [
52427: PUSH
52428: LD_VAR 0 3
52432: PPUSH
52433: CALL_OW 266
52437: STR
52438: PUSH
52439: LD_STRING , 
52441: STR
52442: PUSH
52443: LD_VAR 0 3
52447: PPUSH
52448: CALL_OW 250
52452: STR
52453: PUSH
52454: LD_STRING , 
52456: STR
52457: PUSH
52458: LD_VAR 0 3
52462: PPUSH
52463: CALL_OW 251
52467: STR
52468: PUSH
52469: LD_STRING , 
52471: STR
52472: PUSH
52473: LD_VAR 0 3
52477: PPUSH
52478: CALL_OW 254
52482: STR
52483: PUSH
52484: LD_STRING , 
52486: STR
52487: PUSH
52488: LD_VAR 0 3
52492: PPUSH
52493: LD_INT 1
52495: PPUSH
52496: CALL_OW 268
52500: STR
52501: PUSH
52502: LD_STRING , 
52504: STR
52505: PUSH
52506: LD_VAR 0 3
52510: PPUSH
52511: LD_INT 2
52513: PPUSH
52514: CALL_OW 268
52518: STR
52519: PUSH
52520: LD_STRING ],
52522: STR
52523: PPUSH
52524: CALL_OW 561
// end ;
52528: GO 52422
52530: POP
52531: POP
// AddToLog ( ]; ) ;
52532: LD_STRING ];
52534: PPUSH
52535: CALL_OW 561
// end ;
52539: LD_VAR 0 2
52543: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52544: LD_INT 0
52546: PPUSH
52547: PPUSH
52548: PPUSH
52549: PPUSH
52550: PPUSH
// if not area or not rate or not max then
52551: LD_VAR 0 1
52555: NOT
52556: PUSH
52557: LD_VAR 0 2
52561: NOT
52562: OR
52563: PUSH
52564: LD_VAR 0 4
52568: NOT
52569: OR
52570: IFFALSE 52574
// exit ;
52572: GO 52763
// while 1 do
52574: LD_INT 1
52576: IFFALSE 52763
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52578: LD_ADDR_VAR 0 9
52582: PUSH
52583: LD_VAR 0 1
52587: PPUSH
52588: LD_INT 1
52590: PPUSH
52591: CALL_OW 287
52595: PUSH
52596: LD_INT 10
52598: MUL
52599: ST_TO_ADDR
// r := rate / 10 ;
52600: LD_ADDR_VAR 0 7
52604: PUSH
52605: LD_VAR 0 2
52609: PUSH
52610: LD_INT 10
52612: DIVREAL
52613: ST_TO_ADDR
// time := 1 1$00 ;
52614: LD_ADDR_VAR 0 8
52618: PUSH
52619: LD_INT 2100
52621: ST_TO_ADDR
// if amount < min then
52622: LD_VAR 0 9
52626: PUSH
52627: LD_VAR 0 3
52631: LESS
52632: IFFALSE 52650
// r := r * 2 else
52634: LD_ADDR_VAR 0 7
52638: PUSH
52639: LD_VAR 0 7
52643: PUSH
52644: LD_INT 2
52646: MUL
52647: ST_TO_ADDR
52648: GO 52676
// if amount > max then
52650: LD_VAR 0 9
52654: PUSH
52655: LD_VAR 0 4
52659: GREATER
52660: IFFALSE 52676
// r := r / 2 ;
52662: LD_ADDR_VAR 0 7
52666: PUSH
52667: LD_VAR 0 7
52671: PUSH
52672: LD_INT 2
52674: DIVREAL
52675: ST_TO_ADDR
// time := time / r ;
52676: LD_ADDR_VAR 0 8
52680: PUSH
52681: LD_VAR 0 8
52685: PUSH
52686: LD_VAR 0 7
52690: DIVREAL
52691: ST_TO_ADDR
// if time < 0 then
52692: LD_VAR 0 8
52696: PUSH
52697: LD_INT 0
52699: LESS
52700: IFFALSE 52717
// time := time * - 1 ;
52702: LD_ADDR_VAR 0 8
52706: PUSH
52707: LD_VAR 0 8
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: MUL
52716: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52717: LD_VAR 0 8
52721: PUSH
52722: LD_INT 35
52724: PPUSH
52725: LD_INT 875
52727: PPUSH
52728: CALL_OW 12
52732: PLUS
52733: PPUSH
52734: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52738: LD_INT 1
52740: PPUSH
52741: LD_INT 5
52743: PPUSH
52744: CALL_OW 12
52748: PPUSH
52749: LD_VAR 0 1
52753: PPUSH
52754: LD_INT 1
52756: PPUSH
52757: CALL_OW 55
// end ;
52761: GO 52574
// end ;
52763: LD_VAR 0 5
52767: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52768: LD_INT 0
52770: PPUSH
52771: PPUSH
52772: PPUSH
52773: PPUSH
52774: PPUSH
52775: PPUSH
52776: PPUSH
52777: PPUSH
// if not turrets or not factories then
52778: LD_VAR 0 1
52782: NOT
52783: PUSH
52784: LD_VAR 0 2
52788: NOT
52789: OR
52790: IFFALSE 52794
// exit ;
52792: GO 53101
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52794: LD_ADDR_VAR 0 10
52798: PUSH
52799: LD_INT 5
52801: PUSH
52802: LD_INT 6
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 4
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: LD_INT 5
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 24
52836: PUSH
52837: LD_INT 25
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 23
52846: PUSH
52847: LD_INT 27
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 42
52860: PUSH
52861: LD_INT 43
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 44
52870: PUSH
52871: LD_INT 46
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 45
52880: PUSH
52881: LD_INT 47
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: LIST
52897: ST_TO_ADDR
// result := [ ] ;
52898: LD_ADDR_VAR 0 3
52902: PUSH
52903: EMPTY
52904: ST_TO_ADDR
// for i in turrets do
52905: LD_ADDR_VAR 0 4
52909: PUSH
52910: LD_VAR 0 1
52914: PUSH
52915: FOR_IN
52916: IFFALSE 53099
// begin nat := GetNation ( i ) ;
52918: LD_ADDR_VAR 0 7
52922: PUSH
52923: LD_VAR 0 4
52927: PPUSH
52928: CALL_OW 248
52932: ST_TO_ADDR
// weapon := 0 ;
52933: LD_ADDR_VAR 0 8
52937: PUSH
52938: LD_INT 0
52940: ST_TO_ADDR
// if not nat then
52941: LD_VAR 0 7
52945: NOT
52946: IFFALSE 52950
// continue ;
52948: GO 52915
// for j in list [ nat ] do
52950: LD_ADDR_VAR 0 5
52954: PUSH
52955: LD_VAR 0 10
52959: PUSH
52960: LD_VAR 0 7
52964: ARRAY
52965: PUSH
52966: FOR_IN
52967: IFFALSE 53008
// if GetBWeapon ( i ) = j [ 1 ] then
52969: LD_VAR 0 4
52973: PPUSH
52974: CALL_OW 269
52978: PUSH
52979: LD_VAR 0 5
52983: PUSH
52984: LD_INT 1
52986: ARRAY
52987: EQUAL
52988: IFFALSE 53006
// begin weapon := j [ 2 ] ;
52990: LD_ADDR_VAR 0 8
52994: PUSH
52995: LD_VAR 0 5
52999: PUSH
53000: LD_INT 2
53002: ARRAY
53003: ST_TO_ADDR
// break ;
53004: GO 53008
// end ;
53006: GO 52966
53008: POP
53009: POP
// if not weapon then
53010: LD_VAR 0 8
53014: NOT
53015: IFFALSE 53019
// continue ;
53017: GO 52915
// for k in factories do
53019: LD_ADDR_VAR 0 6
53023: PUSH
53024: LD_VAR 0 2
53028: PUSH
53029: FOR_IN
53030: IFFALSE 53095
// begin weapons := AvailableWeaponList ( k ) ;
53032: LD_ADDR_VAR 0 9
53036: PUSH
53037: LD_VAR 0 6
53041: PPUSH
53042: CALL_OW 478
53046: ST_TO_ADDR
// if not weapons then
53047: LD_VAR 0 9
53051: NOT
53052: IFFALSE 53056
// continue ;
53054: GO 53029
// if weapon in weapons then
53056: LD_VAR 0 8
53060: PUSH
53061: LD_VAR 0 9
53065: IN
53066: IFFALSE 53093
// begin result := [ i , weapon ] ;
53068: LD_ADDR_VAR 0 3
53072: PUSH
53073: LD_VAR 0 4
53077: PUSH
53078: LD_VAR 0 8
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: ST_TO_ADDR
// exit ;
53087: POP
53088: POP
53089: POP
53090: POP
53091: GO 53101
// end ; end ;
53093: GO 53029
53095: POP
53096: POP
// end ;
53097: GO 52915
53099: POP
53100: POP
// end ;
53101: LD_VAR 0 3
53105: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53106: LD_INT 0
53108: PPUSH
// if not side or side > 8 then
53109: LD_VAR 0 3
53113: NOT
53114: PUSH
53115: LD_VAR 0 3
53119: PUSH
53120: LD_INT 8
53122: GREATER
53123: OR
53124: IFFALSE 53128
// exit ;
53126: GO 53187
// if not range then
53128: LD_VAR 0 4
53132: NOT
53133: IFFALSE 53144
// range := - 12 ;
53135: LD_ADDR_VAR 0 4
53139: PUSH
53140: LD_INT 12
53142: NEG
53143: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53144: LD_VAR 0 1
53148: PPUSH
53149: LD_VAR 0 2
53153: PPUSH
53154: LD_VAR 0 3
53158: PPUSH
53159: LD_VAR 0 4
53163: PPUSH
53164: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53168: LD_VAR 0 1
53172: PPUSH
53173: LD_VAR 0 2
53177: PPUSH
53178: LD_VAR 0 3
53182: PPUSH
53183: CALL_OW 331
// end ;
53187: LD_VAR 0 5
53191: RET
// export function Video ( mode ) ; begin
53192: LD_INT 0
53194: PPUSH
// ingame_video = mode ;
53195: LD_ADDR_OWVAR 52
53199: PUSH
53200: LD_VAR 0 1
53204: ST_TO_ADDR
// interface_hidden = mode ;
53205: LD_ADDR_OWVAR 54
53209: PUSH
53210: LD_VAR 0 1
53214: ST_TO_ADDR
// end ;
53215: LD_VAR 0 2
53219: RET
// export function Join ( array , element ) ; begin
53220: LD_INT 0
53222: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53223: LD_ADDR_VAR 0 3
53227: PUSH
53228: LD_VAR 0 1
53232: PPUSH
53233: LD_VAR 0 1
53237: PUSH
53238: LD_INT 1
53240: PLUS
53241: PPUSH
53242: LD_VAR 0 2
53246: PPUSH
53247: CALL_OW 1
53251: ST_TO_ADDR
// end ;
53252: LD_VAR 0 3
53256: RET
// export function JoinUnion ( array , element ) ; begin
53257: LD_INT 0
53259: PPUSH
// result := array union element ;
53260: LD_ADDR_VAR 0 3
53264: PUSH
53265: LD_VAR 0 1
53269: PUSH
53270: LD_VAR 0 2
53274: UNION
53275: ST_TO_ADDR
// end ;
53276: LD_VAR 0 3
53280: RET
// export function GetBehemoths ( side ) ; begin
53281: LD_INT 0
53283: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53284: LD_ADDR_VAR 0 2
53288: PUSH
53289: LD_INT 22
53291: PUSH
53292: LD_VAR 0 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 31
53303: PUSH
53304: LD_INT 25
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PPUSH
53315: CALL_OW 69
53319: ST_TO_ADDR
// end ;
53320: LD_VAR 0 2
53324: RET
// export function Shuffle ( array ) ; var i , index ; begin
53325: LD_INT 0
53327: PPUSH
53328: PPUSH
53329: PPUSH
// result := [ ] ;
53330: LD_ADDR_VAR 0 2
53334: PUSH
53335: EMPTY
53336: ST_TO_ADDR
// if not array then
53337: LD_VAR 0 1
53341: NOT
53342: IFFALSE 53346
// exit ;
53344: GO 53445
// Randomize ;
53346: CALL_OW 10
// for i = array downto 1 do
53350: LD_ADDR_VAR 0 3
53354: PUSH
53355: DOUBLE
53356: LD_VAR 0 1
53360: INC
53361: ST_TO_ADDR
53362: LD_INT 1
53364: PUSH
53365: FOR_DOWNTO
53366: IFFALSE 53443
// begin index := rand ( 1 , array ) ;
53368: LD_ADDR_VAR 0 4
53372: PUSH
53373: LD_INT 1
53375: PPUSH
53376: LD_VAR 0 1
53380: PPUSH
53381: CALL_OW 12
53385: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53386: LD_ADDR_VAR 0 2
53390: PUSH
53391: LD_VAR 0 2
53395: PPUSH
53396: LD_VAR 0 2
53400: PUSH
53401: LD_INT 1
53403: PLUS
53404: PPUSH
53405: LD_VAR 0 1
53409: PUSH
53410: LD_VAR 0 4
53414: ARRAY
53415: PPUSH
53416: CALL_OW 2
53420: ST_TO_ADDR
// array := Delete ( array , index ) ;
53421: LD_ADDR_VAR 0 1
53425: PUSH
53426: LD_VAR 0 1
53430: PPUSH
53431: LD_VAR 0 4
53435: PPUSH
53436: CALL_OW 3
53440: ST_TO_ADDR
// end ;
53441: GO 53365
53443: POP
53444: POP
// end ;
53445: LD_VAR 0 2
53449: RET
// export function GetBaseMaterials ( base ) ; begin
53450: LD_INT 0
53452: PPUSH
// result := [ 0 , 0 , 0 ] ;
53453: LD_ADDR_VAR 0 2
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: LIST
53471: ST_TO_ADDR
// if not base then
53472: LD_VAR 0 1
53476: NOT
53477: IFFALSE 53481
// exit ;
53479: GO 53530
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53481: LD_ADDR_VAR 0 2
53485: PUSH
53486: LD_VAR 0 1
53490: PPUSH
53491: LD_INT 1
53493: PPUSH
53494: CALL_OW 275
53498: PUSH
53499: LD_VAR 0 1
53503: PPUSH
53504: LD_INT 2
53506: PPUSH
53507: CALL_OW 275
53511: PUSH
53512: LD_VAR 0 1
53516: PPUSH
53517: LD_INT 3
53519: PPUSH
53520: CALL_OW 275
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: LIST
53529: ST_TO_ADDR
// end ;
53530: LD_VAR 0 2
53534: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53535: LD_INT 0
53537: PPUSH
53538: PPUSH
// result := array ;
53539: LD_ADDR_VAR 0 3
53543: PUSH
53544: LD_VAR 0 1
53548: ST_TO_ADDR
// if size >= result then
53549: LD_VAR 0 2
53553: PUSH
53554: LD_VAR 0 3
53558: GREATEREQUAL
53559: IFFALSE 53563
// exit ;
53561: GO 53613
// if size then
53563: LD_VAR 0 2
53567: IFFALSE 53613
// for i := array downto size do
53569: LD_ADDR_VAR 0 4
53573: PUSH
53574: DOUBLE
53575: LD_VAR 0 1
53579: INC
53580: ST_TO_ADDR
53581: LD_VAR 0 2
53585: PUSH
53586: FOR_DOWNTO
53587: IFFALSE 53611
// result := Delete ( result , result ) ;
53589: LD_ADDR_VAR 0 3
53593: PUSH
53594: LD_VAR 0 3
53598: PPUSH
53599: LD_VAR 0 3
53603: PPUSH
53604: CALL_OW 3
53608: ST_TO_ADDR
53609: GO 53586
53611: POP
53612: POP
// end ;
53613: LD_VAR 0 3
53617: RET
// export function ComExit ( unit ) ; var tmp ; begin
53618: LD_INT 0
53620: PPUSH
53621: PPUSH
// if not IsInUnit ( unit ) then
53622: LD_VAR 0 1
53626: PPUSH
53627: CALL_OW 310
53631: NOT
53632: IFFALSE 53636
// exit ;
53634: GO 53696
// tmp := IsInUnit ( unit ) ;
53636: LD_ADDR_VAR 0 3
53640: PUSH
53641: LD_VAR 0 1
53645: PPUSH
53646: CALL_OW 310
53650: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53651: LD_VAR 0 3
53655: PPUSH
53656: CALL_OW 247
53660: PUSH
53661: LD_INT 2
53663: EQUAL
53664: IFFALSE 53677
// ComExitVehicle ( unit ) else
53666: LD_VAR 0 1
53670: PPUSH
53671: CALL_OW 121
53675: GO 53686
// ComExitBuilding ( unit ) ;
53677: LD_VAR 0 1
53681: PPUSH
53682: CALL_OW 122
// result := tmp ;
53686: LD_ADDR_VAR 0 2
53690: PUSH
53691: LD_VAR 0 3
53695: ST_TO_ADDR
// end ;
53696: LD_VAR 0 2
53700: RET
// export function ComExitAll ( units ) ; var i ; begin
53701: LD_INT 0
53703: PPUSH
53704: PPUSH
// if not units then
53705: LD_VAR 0 1
53709: NOT
53710: IFFALSE 53714
// exit ;
53712: GO 53740
// for i in units do
53714: LD_ADDR_VAR 0 3
53718: PUSH
53719: LD_VAR 0 1
53723: PUSH
53724: FOR_IN
53725: IFFALSE 53738
// ComExit ( i ) ;
53727: LD_VAR 0 3
53731: PPUSH
53732: CALL 53618 0 1
53736: GO 53724
53738: POP
53739: POP
// end ;
53740: LD_VAR 0 2
53744: RET
// export function ResetHc ; begin
53745: LD_INT 0
53747: PPUSH
// InitHc ;
53748: CALL_OW 19
// hc_importance := 0 ;
53752: LD_ADDR_OWVAR 32
53756: PUSH
53757: LD_INT 0
53759: ST_TO_ADDR
// end ;
53760: LD_VAR 0 1
53764: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53765: LD_INT 0
53767: PPUSH
53768: PPUSH
53769: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53770: LD_ADDR_VAR 0 6
53774: PUSH
53775: LD_VAR 0 1
53779: PUSH
53780: LD_VAR 0 3
53784: PLUS
53785: PUSH
53786: LD_INT 2
53788: DIV
53789: ST_TO_ADDR
// if _x < 0 then
53790: LD_VAR 0 6
53794: PUSH
53795: LD_INT 0
53797: LESS
53798: IFFALSE 53815
// _x := _x * - 1 ;
53800: LD_ADDR_VAR 0 6
53804: PUSH
53805: LD_VAR 0 6
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: MUL
53814: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53815: LD_ADDR_VAR 0 7
53819: PUSH
53820: LD_VAR 0 2
53824: PUSH
53825: LD_VAR 0 4
53829: PLUS
53830: PUSH
53831: LD_INT 2
53833: DIV
53834: ST_TO_ADDR
// if _y < 0 then
53835: LD_VAR 0 7
53839: PUSH
53840: LD_INT 0
53842: LESS
53843: IFFALSE 53860
// _y := _y * - 1 ;
53845: LD_ADDR_VAR 0 7
53849: PUSH
53850: LD_VAR 0 7
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: MUL
53859: ST_TO_ADDR
// result := [ _x , _y ] ;
53860: LD_ADDR_VAR 0 5
53864: PUSH
53865: LD_VAR 0 6
53869: PUSH
53870: LD_VAR 0 7
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: ST_TO_ADDR
// end ;
53879: LD_VAR 0 5
53883: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53884: LD_INT 0
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
// task := GetTaskList ( unit ) ;
53890: LD_ADDR_VAR 0 7
53894: PUSH
53895: LD_VAR 0 1
53899: PPUSH
53900: CALL_OW 437
53904: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53905: LD_VAR 0 7
53909: NOT
53910: PUSH
53911: LD_VAR 0 1
53915: PPUSH
53916: LD_VAR 0 2
53920: PPUSH
53921: CALL_OW 308
53925: NOT
53926: AND
53927: IFFALSE 53931
// exit ;
53929: GO 54049
// if IsInArea ( unit , area ) then
53931: LD_VAR 0 1
53935: PPUSH
53936: LD_VAR 0 2
53940: PPUSH
53941: CALL_OW 308
53945: IFFALSE 53963
// begin ComMoveToArea ( unit , goAway ) ;
53947: LD_VAR 0 1
53951: PPUSH
53952: LD_VAR 0 3
53956: PPUSH
53957: CALL_OW 113
// exit ;
53961: GO 54049
// end ; if task [ 1 ] [ 1 ] <> M then
53963: LD_VAR 0 7
53967: PUSH
53968: LD_INT 1
53970: ARRAY
53971: PUSH
53972: LD_INT 1
53974: ARRAY
53975: PUSH
53976: LD_STRING M
53978: NONEQUAL
53979: IFFALSE 53983
// exit ;
53981: GO 54049
// x := task [ 1 ] [ 2 ] ;
53983: LD_ADDR_VAR 0 5
53987: PUSH
53988: LD_VAR 0 7
53992: PUSH
53993: LD_INT 1
53995: ARRAY
53996: PUSH
53997: LD_INT 2
53999: ARRAY
54000: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54001: LD_ADDR_VAR 0 6
54005: PUSH
54006: LD_VAR 0 7
54010: PUSH
54011: LD_INT 1
54013: ARRAY
54014: PUSH
54015: LD_INT 3
54017: ARRAY
54018: ST_TO_ADDR
// if InArea ( x , y , area ) then
54019: LD_VAR 0 5
54023: PPUSH
54024: LD_VAR 0 6
54028: PPUSH
54029: LD_VAR 0 2
54033: PPUSH
54034: CALL_OW 309
54038: IFFALSE 54049
// ComStop ( unit ) ;
54040: LD_VAR 0 1
54044: PPUSH
54045: CALL_OW 141
// end ;
54049: LD_VAR 0 4
54053: RET
// export function Abs ( value ) ; begin
54054: LD_INT 0
54056: PPUSH
// result := value ;
54057: LD_ADDR_VAR 0 2
54061: PUSH
54062: LD_VAR 0 1
54066: ST_TO_ADDR
// if value < 0 then
54067: LD_VAR 0 1
54071: PUSH
54072: LD_INT 0
54074: LESS
54075: IFFALSE 54092
// result := value * - 1 ;
54077: LD_ADDR_VAR 0 2
54081: PUSH
54082: LD_VAR 0 1
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: MUL
54091: ST_TO_ADDR
// end ;
54092: LD_VAR 0 2
54096: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54097: LD_INT 0
54099: PPUSH
54100: PPUSH
54101: PPUSH
54102: PPUSH
54103: PPUSH
54104: PPUSH
54105: PPUSH
54106: PPUSH
// if not unit or not building then
54107: LD_VAR 0 1
54111: NOT
54112: PUSH
54113: LD_VAR 0 2
54117: NOT
54118: OR
54119: IFFALSE 54123
// exit ;
54121: GO 54349
// x := GetX ( building ) ;
54123: LD_ADDR_VAR 0 4
54127: PUSH
54128: LD_VAR 0 2
54132: PPUSH
54133: CALL_OW 250
54137: ST_TO_ADDR
// y := GetY ( building ) ;
54138: LD_ADDR_VAR 0 6
54142: PUSH
54143: LD_VAR 0 2
54147: PPUSH
54148: CALL_OW 251
54152: ST_TO_ADDR
// d := GetDir ( building ) ;
54153: LD_ADDR_VAR 0 8
54157: PUSH
54158: LD_VAR 0 2
54162: PPUSH
54163: CALL_OW 254
54167: ST_TO_ADDR
// r := 4 ;
54168: LD_ADDR_VAR 0 9
54172: PUSH
54173: LD_INT 4
54175: ST_TO_ADDR
// for i := 1 to 5 do
54176: LD_ADDR_VAR 0 10
54180: PUSH
54181: DOUBLE
54182: LD_INT 1
54184: DEC
54185: ST_TO_ADDR
54186: LD_INT 5
54188: PUSH
54189: FOR_TO
54190: IFFALSE 54347
// begin _x := ShiftX ( x , d , r + i ) ;
54192: LD_ADDR_VAR 0 5
54196: PUSH
54197: LD_VAR 0 4
54201: PPUSH
54202: LD_VAR 0 8
54206: PPUSH
54207: LD_VAR 0 9
54211: PUSH
54212: LD_VAR 0 10
54216: PLUS
54217: PPUSH
54218: CALL_OW 272
54222: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54223: LD_ADDR_VAR 0 7
54227: PUSH
54228: LD_VAR 0 6
54232: PPUSH
54233: LD_VAR 0 8
54237: PPUSH
54238: LD_VAR 0 9
54242: PUSH
54243: LD_VAR 0 10
54247: PLUS
54248: PPUSH
54249: CALL_OW 273
54253: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54254: LD_VAR 0 5
54258: PPUSH
54259: LD_VAR 0 7
54263: PPUSH
54264: CALL_OW 488
54268: PUSH
54269: LD_VAR 0 5
54273: PPUSH
54274: LD_VAR 0 7
54278: PPUSH
54279: CALL_OW 428
54283: PPUSH
54284: CALL_OW 247
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: IN
54299: NOT
54300: AND
54301: IFFALSE 54345
// begin ComMoveXY ( unit , _x , _y ) ;
54303: LD_VAR 0 1
54307: PPUSH
54308: LD_VAR 0 5
54312: PPUSH
54313: LD_VAR 0 7
54317: PPUSH
54318: CALL_OW 111
// result := [ _x , _y ] ;
54322: LD_ADDR_VAR 0 3
54326: PUSH
54327: LD_VAR 0 5
54331: PUSH
54332: LD_VAR 0 7
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// exit ;
54341: POP
54342: POP
54343: GO 54349
// end ; end ;
54345: GO 54189
54347: POP
54348: POP
// end ;
54349: LD_VAR 0 3
54353: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54354: LD_INT 0
54356: PPUSH
54357: PPUSH
54358: PPUSH
// result := 0 ;
54359: LD_ADDR_VAR 0 3
54363: PUSH
54364: LD_INT 0
54366: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54367: LD_VAR 0 1
54371: PUSH
54372: LD_INT 0
54374: LESS
54375: PUSH
54376: LD_VAR 0 1
54380: PUSH
54381: LD_INT 8
54383: GREATER
54384: OR
54385: PUSH
54386: LD_VAR 0 2
54390: PUSH
54391: LD_INT 0
54393: LESS
54394: OR
54395: PUSH
54396: LD_VAR 0 2
54400: PUSH
54401: LD_INT 8
54403: GREATER
54404: OR
54405: IFFALSE 54409
// exit ;
54407: GO 54484
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54409: LD_ADDR_VAR 0 4
54413: PUSH
54414: LD_INT 22
54416: PUSH
54417: LD_VAR 0 2
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PPUSH
54426: CALL_OW 69
54430: PUSH
54431: FOR_IN
54432: IFFALSE 54482
// begin un := UnitShoot ( i ) ;
54434: LD_ADDR_VAR 0 5
54438: PUSH
54439: LD_VAR 0 4
54443: PPUSH
54444: CALL_OW 504
54448: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54449: LD_VAR 0 5
54453: PPUSH
54454: CALL_OW 255
54458: PUSH
54459: LD_VAR 0 1
54463: EQUAL
54464: IFFALSE 54480
// begin result := un ;
54466: LD_ADDR_VAR 0 3
54470: PUSH
54471: LD_VAR 0 5
54475: ST_TO_ADDR
// exit ;
54476: POP
54477: POP
54478: GO 54484
// end ; end ;
54480: GO 54431
54482: POP
54483: POP
// end ;
54484: LD_VAR 0 3
54488: RET
// export function GetCargoBay ( units ) ; begin
54489: LD_INT 0
54491: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54492: LD_ADDR_VAR 0 2
54496: PUSH
54497: LD_VAR 0 1
54501: PPUSH
54502: LD_INT 2
54504: PUSH
54505: LD_INT 34
54507: PUSH
54508: LD_INT 12
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 34
54517: PUSH
54518: LD_INT 51
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 34
54527: PUSH
54528: LD_INT 32
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 34
54537: PUSH
54538: LD_INT 89
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: PPUSH
54552: CALL_OW 72
54556: ST_TO_ADDR
// end ;
54557: LD_VAR 0 2
54561: RET
// export function Negate ( value ) ; begin
54562: LD_INT 0
54564: PPUSH
// result := not value ;
54565: LD_ADDR_VAR 0 2
54569: PUSH
54570: LD_VAR 0 1
54574: NOT
54575: ST_TO_ADDR
// end ;
54576: LD_VAR 0 2
54580: RET
// export function Inc ( value ) ; begin
54581: LD_INT 0
54583: PPUSH
// result := value + 1 ;
54584: LD_ADDR_VAR 0 2
54588: PUSH
54589: LD_VAR 0 1
54593: PUSH
54594: LD_INT 1
54596: PLUS
54597: ST_TO_ADDR
// end ;
54598: LD_VAR 0 2
54602: RET
// export function Dec ( value ) ; begin
54603: LD_INT 0
54605: PPUSH
// result := value - 1 ;
54606: LD_ADDR_VAR 0 2
54610: PUSH
54611: LD_VAR 0 1
54615: PUSH
54616: LD_INT 1
54618: MINUS
54619: ST_TO_ADDR
// end ;
54620: LD_VAR 0 2
54624: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54625: LD_INT 0
54627: PPUSH
54628: PPUSH
54629: PPUSH
54630: PPUSH
54631: PPUSH
54632: PPUSH
54633: PPUSH
54634: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54635: LD_VAR 0 1
54639: PPUSH
54640: LD_VAR 0 2
54644: PPUSH
54645: CALL_OW 488
54649: NOT
54650: PUSH
54651: LD_VAR 0 3
54655: PPUSH
54656: LD_VAR 0 4
54660: PPUSH
54661: CALL_OW 488
54665: NOT
54666: OR
54667: IFFALSE 54680
// begin result := - 1 ;
54669: LD_ADDR_VAR 0 5
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: ST_TO_ADDR
// exit ;
54678: GO 54915
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54680: LD_ADDR_VAR 0 12
54684: PUSH
54685: LD_VAR 0 1
54689: PPUSH
54690: LD_VAR 0 2
54694: PPUSH
54695: LD_VAR 0 3
54699: PPUSH
54700: LD_VAR 0 4
54704: PPUSH
54705: CALL 53765 0 4
54709: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54710: LD_ADDR_VAR 0 11
54714: PUSH
54715: LD_VAR 0 1
54719: PPUSH
54720: LD_VAR 0 2
54724: PPUSH
54725: LD_VAR 0 12
54729: PUSH
54730: LD_INT 1
54732: ARRAY
54733: PPUSH
54734: LD_VAR 0 12
54738: PUSH
54739: LD_INT 2
54741: ARRAY
54742: PPUSH
54743: CALL_OW 298
54747: ST_TO_ADDR
// distance := 9999 ;
54748: LD_ADDR_VAR 0 10
54752: PUSH
54753: LD_INT 9999
54755: ST_TO_ADDR
// for i := 0 to 5 do
54756: LD_ADDR_VAR 0 6
54760: PUSH
54761: DOUBLE
54762: LD_INT 0
54764: DEC
54765: ST_TO_ADDR
54766: LD_INT 5
54768: PUSH
54769: FOR_TO
54770: IFFALSE 54913
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54772: LD_ADDR_VAR 0 7
54776: PUSH
54777: LD_VAR 0 1
54781: PPUSH
54782: LD_VAR 0 6
54786: PPUSH
54787: LD_VAR 0 11
54791: PPUSH
54792: CALL_OW 272
54796: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54797: LD_ADDR_VAR 0 8
54801: PUSH
54802: LD_VAR 0 2
54806: PPUSH
54807: LD_VAR 0 6
54811: PPUSH
54812: LD_VAR 0 11
54816: PPUSH
54817: CALL_OW 273
54821: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54822: LD_VAR 0 7
54826: PPUSH
54827: LD_VAR 0 8
54831: PPUSH
54832: CALL_OW 488
54836: NOT
54837: IFFALSE 54841
// continue ;
54839: GO 54769
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54841: LD_ADDR_VAR 0 9
54845: PUSH
54846: LD_VAR 0 12
54850: PUSH
54851: LD_INT 1
54853: ARRAY
54854: PPUSH
54855: LD_VAR 0 12
54859: PUSH
54860: LD_INT 2
54862: ARRAY
54863: PPUSH
54864: LD_VAR 0 7
54868: PPUSH
54869: LD_VAR 0 8
54873: PPUSH
54874: CALL_OW 298
54878: ST_TO_ADDR
// if tmp < distance then
54879: LD_VAR 0 9
54883: PUSH
54884: LD_VAR 0 10
54888: LESS
54889: IFFALSE 54911
// begin result := i ;
54891: LD_ADDR_VAR 0 5
54895: PUSH
54896: LD_VAR 0 6
54900: ST_TO_ADDR
// distance := tmp ;
54901: LD_ADDR_VAR 0 10
54905: PUSH
54906: LD_VAR 0 9
54910: ST_TO_ADDR
// end ; end ;
54911: GO 54769
54913: POP
54914: POP
// end ;
54915: LD_VAR 0 5
54919: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54920: LD_INT 0
54922: PPUSH
54923: PPUSH
// if not driver or not IsInUnit ( driver ) then
54924: LD_VAR 0 1
54928: NOT
54929: PUSH
54930: LD_VAR 0 1
54934: PPUSH
54935: CALL_OW 310
54939: NOT
54940: OR
54941: IFFALSE 54945
// exit ;
54943: GO 55035
// vehicle := IsInUnit ( driver ) ;
54945: LD_ADDR_VAR 0 3
54949: PUSH
54950: LD_VAR 0 1
54954: PPUSH
54955: CALL_OW 310
54959: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54960: LD_VAR 0 1
54964: PPUSH
54965: LD_STRING \
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: PUSH
54995: LD_STRING E
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_VAR 0 3
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PPUSH
55031: CALL_OW 446
// end ;
55035: LD_VAR 0 2
55039: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55040: LD_INT 0
55042: PPUSH
55043: PPUSH
// if not driver or not IsInUnit ( driver ) then
55044: LD_VAR 0 1
55048: NOT
55049: PUSH
55050: LD_VAR 0 1
55054: PPUSH
55055: CALL_OW 310
55059: NOT
55060: OR
55061: IFFALSE 55065
// exit ;
55063: GO 55155
// vehicle := IsInUnit ( driver ) ;
55065: LD_ADDR_VAR 0 3
55069: PUSH
55070: LD_VAR 0 1
55074: PPUSH
55075: CALL_OW 310
55079: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55080: LD_VAR 0 1
55084: PPUSH
55085: LD_STRING \
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: PUSH
55115: LD_STRING E
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_VAR 0 3
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PPUSH
55151: CALL_OW 447
// end ;
55155: LD_VAR 0 2
55159: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55160: LD_INT 0
55162: PPUSH
55163: PPUSH
55164: PPUSH
// tmp := [ ] ;
55165: LD_ADDR_VAR 0 5
55169: PUSH
55170: EMPTY
55171: ST_TO_ADDR
// for i in units do
55172: LD_ADDR_VAR 0 4
55176: PUSH
55177: LD_VAR 0 1
55181: PUSH
55182: FOR_IN
55183: IFFALSE 55221
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55185: LD_ADDR_VAR 0 5
55189: PUSH
55190: LD_VAR 0 5
55194: PPUSH
55195: LD_VAR 0 5
55199: PUSH
55200: LD_INT 1
55202: PLUS
55203: PPUSH
55204: LD_VAR 0 4
55208: PPUSH
55209: CALL_OW 256
55213: PPUSH
55214: CALL_OW 2
55218: ST_TO_ADDR
55219: GO 55182
55221: POP
55222: POP
// if not tmp then
55223: LD_VAR 0 5
55227: NOT
55228: IFFALSE 55232
// exit ;
55230: GO 55280
// if asc then
55232: LD_VAR 0 2
55236: IFFALSE 55260
// result := SortListByListAsc ( units , tmp ) else
55238: LD_ADDR_VAR 0 3
55242: PUSH
55243: LD_VAR 0 1
55247: PPUSH
55248: LD_VAR 0 5
55252: PPUSH
55253: CALL_OW 76
55257: ST_TO_ADDR
55258: GO 55280
// result := SortListByListDesc ( units , tmp ) ;
55260: LD_ADDR_VAR 0 3
55264: PUSH
55265: LD_VAR 0 1
55269: PPUSH
55270: LD_VAR 0 5
55274: PPUSH
55275: CALL_OW 77
55279: ST_TO_ADDR
// end ;
55280: LD_VAR 0 3
55284: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55285: LD_INT 0
55287: PPUSH
55288: PPUSH
// task := GetTaskList ( mech ) ;
55289: LD_ADDR_VAR 0 4
55293: PUSH
55294: LD_VAR 0 1
55298: PPUSH
55299: CALL_OW 437
55303: ST_TO_ADDR
// if not task then
55304: LD_VAR 0 4
55308: NOT
55309: IFFALSE 55313
// exit ;
55311: GO 55355
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55313: LD_ADDR_VAR 0 3
55317: PUSH
55318: LD_VAR 0 4
55322: PUSH
55323: LD_INT 1
55325: ARRAY
55326: PUSH
55327: LD_INT 1
55329: ARRAY
55330: PUSH
55331: LD_STRING r
55333: EQUAL
55334: PUSH
55335: LD_VAR 0 4
55339: PUSH
55340: LD_INT 1
55342: ARRAY
55343: PUSH
55344: LD_INT 4
55346: ARRAY
55347: PUSH
55348: LD_VAR 0 2
55352: EQUAL
55353: AND
55354: ST_TO_ADDR
// end ;
55355: LD_VAR 0 3
55359: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55360: LD_INT 0
55362: PPUSH
// SetDir ( unit , d ) ;
55363: LD_VAR 0 1
55367: PPUSH
55368: LD_VAR 0 4
55372: PPUSH
55373: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55377: LD_VAR 0 1
55381: PPUSH
55382: LD_VAR 0 2
55386: PPUSH
55387: LD_VAR 0 3
55391: PPUSH
55392: LD_VAR 0 5
55396: PPUSH
55397: CALL_OW 48
// end ;
55401: LD_VAR 0 6
55405: RET
// export function ToNaturalNumber ( number ) ; begin
55406: LD_INT 0
55408: PPUSH
// result := number div 1 ;
55409: LD_ADDR_VAR 0 2
55413: PUSH
55414: LD_VAR 0 1
55418: PUSH
55419: LD_INT 1
55421: DIV
55422: ST_TO_ADDR
// if number < 0 then
55423: LD_VAR 0 1
55427: PUSH
55428: LD_INT 0
55430: LESS
55431: IFFALSE 55441
// result := 0 ;
55433: LD_ADDR_VAR 0 2
55437: PUSH
55438: LD_INT 0
55440: ST_TO_ADDR
// end ;
55441: LD_VAR 0 2
55445: RET
// export function SortByClass ( units , class ) ; var un ; begin
55446: LD_INT 0
55448: PPUSH
55449: PPUSH
// if not units or not class then
55450: LD_VAR 0 1
55454: NOT
55455: PUSH
55456: LD_VAR 0 2
55460: NOT
55461: OR
55462: IFFALSE 55466
// exit ;
55464: GO 55561
// result := [ ] ;
55466: LD_ADDR_VAR 0 3
55470: PUSH
55471: EMPTY
55472: ST_TO_ADDR
// for un in units do
55473: LD_ADDR_VAR 0 4
55477: PUSH
55478: LD_VAR 0 1
55482: PUSH
55483: FOR_IN
55484: IFFALSE 55559
// if GetClass ( un ) = class then
55486: LD_VAR 0 4
55490: PPUSH
55491: CALL_OW 257
55495: PUSH
55496: LD_VAR 0 2
55500: EQUAL
55501: IFFALSE 55528
// result := Insert ( result , 1 , un ) else
55503: LD_ADDR_VAR 0 3
55507: PUSH
55508: LD_VAR 0 3
55512: PPUSH
55513: LD_INT 1
55515: PPUSH
55516: LD_VAR 0 4
55520: PPUSH
55521: CALL_OW 2
55525: ST_TO_ADDR
55526: GO 55557
// result := Replace ( result , result + 1 , un ) ;
55528: LD_ADDR_VAR 0 3
55532: PUSH
55533: LD_VAR 0 3
55537: PPUSH
55538: LD_VAR 0 3
55542: PUSH
55543: LD_INT 1
55545: PLUS
55546: PPUSH
55547: LD_VAR 0 4
55551: PPUSH
55552: CALL_OW 1
55556: ST_TO_ADDR
55557: GO 55483
55559: POP
55560: POP
// end ;
55561: LD_VAR 0 3
55565: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55566: LD_INT 0
55568: PPUSH
55569: PPUSH
55570: PPUSH
55571: PPUSH
55572: PPUSH
55573: PPUSH
55574: PPUSH
// result := [ ] ;
55575: LD_ADDR_VAR 0 4
55579: PUSH
55580: EMPTY
55581: ST_TO_ADDR
// if x - r < 0 then
55582: LD_VAR 0 1
55586: PUSH
55587: LD_VAR 0 3
55591: MINUS
55592: PUSH
55593: LD_INT 0
55595: LESS
55596: IFFALSE 55608
// min_x := 0 else
55598: LD_ADDR_VAR 0 8
55602: PUSH
55603: LD_INT 0
55605: ST_TO_ADDR
55606: GO 55624
// min_x := x - r ;
55608: LD_ADDR_VAR 0 8
55612: PUSH
55613: LD_VAR 0 1
55617: PUSH
55618: LD_VAR 0 3
55622: MINUS
55623: ST_TO_ADDR
// if y - r < 0 then
55624: LD_VAR 0 2
55628: PUSH
55629: LD_VAR 0 3
55633: MINUS
55634: PUSH
55635: LD_INT 0
55637: LESS
55638: IFFALSE 55650
// min_y := 0 else
55640: LD_ADDR_VAR 0 7
55644: PUSH
55645: LD_INT 0
55647: ST_TO_ADDR
55648: GO 55666
// min_y := y - r ;
55650: LD_ADDR_VAR 0 7
55654: PUSH
55655: LD_VAR 0 2
55659: PUSH
55660: LD_VAR 0 3
55664: MINUS
55665: ST_TO_ADDR
// max_x := x + r ;
55666: LD_ADDR_VAR 0 9
55670: PUSH
55671: LD_VAR 0 1
55675: PUSH
55676: LD_VAR 0 3
55680: PLUS
55681: ST_TO_ADDR
// max_y := y + r ;
55682: LD_ADDR_VAR 0 10
55686: PUSH
55687: LD_VAR 0 2
55691: PUSH
55692: LD_VAR 0 3
55696: PLUS
55697: ST_TO_ADDR
// for _x = min_x to max_x do
55698: LD_ADDR_VAR 0 5
55702: PUSH
55703: DOUBLE
55704: LD_VAR 0 8
55708: DEC
55709: ST_TO_ADDR
55710: LD_VAR 0 9
55714: PUSH
55715: FOR_TO
55716: IFFALSE 55817
// for _y = min_y to max_y do
55718: LD_ADDR_VAR 0 6
55722: PUSH
55723: DOUBLE
55724: LD_VAR 0 7
55728: DEC
55729: ST_TO_ADDR
55730: LD_VAR 0 10
55734: PUSH
55735: FOR_TO
55736: IFFALSE 55813
// begin if not ValidHex ( _x , _y ) then
55738: LD_VAR 0 5
55742: PPUSH
55743: LD_VAR 0 6
55747: PPUSH
55748: CALL_OW 488
55752: NOT
55753: IFFALSE 55757
// continue ;
55755: GO 55735
// if GetResourceTypeXY ( _x , _y ) then
55757: LD_VAR 0 5
55761: PPUSH
55762: LD_VAR 0 6
55766: PPUSH
55767: CALL_OW 283
55771: IFFALSE 55811
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55773: LD_ADDR_VAR 0 4
55777: PUSH
55778: LD_VAR 0 4
55782: PPUSH
55783: LD_VAR 0 4
55787: PUSH
55788: LD_INT 1
55790: PLUS
55791: PPUSH
55792: LD_VAR 0 5
55796: PUSH
55797: LD_VAR 0 6
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PPUSH
55806: CALL_OW 1
55810: ST_TO_ADDR
// end ;
55811: GO 55735
55813: POP
55814: POP
55815: GO 55715
55817: POP
55818: POP
// end ;
55819: LD_VAR 0 4
55823: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55824: LD_INT 0
55826: PPUSH
55827: PPUSH
55828: PPUSH
55829: PPUSH
55830: PPUSH
55831: PPUSH
55832: PPUSH
55833: PPUSH
// if not units then
55834: LD_VAR 0 1
55838: NOT
55839: IFFALSE 55843
// exit ;
55841: GO 56371
// result := UnitFilter ( units , [ f_ok ] ) ;
55843: LD_ADDR_VAR 0 3
55847: PUSH
55848: LD_VAR 0 1
55852: PPUSH
55853: LD_INT 50
55855: PUSH
55856: EMPTY
55857: LIST
55858: PPUSH
55859: CALL_OW 72
55863: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55864: LD_ADDR_VAR 0 8
55868: PUSH
55869: LD_VAR 0 1
55873: PUSH
55874: LD_INT 1
55876: ARRAY
55877: PPUSH
55878: CALL_OW 255
55882: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55883: LD_ADDR_VAR 0 10
55887: PUSH
55888: LD_INT 29
55890: PUSH
55891: LD_INT 91
55893: PUSH
55894: LD_INT 49
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: LIST
55901: ST_TO_ADDR
// if not result then
55902: LD_VAR 0 3
55906: NOT
55907: IFFALSE 55911
// exit ;
55909: GO 56371
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55911: LD_ADDR_VAR 0 5
55915: PUSH
55916: LD_INT 81
55918: PUSH
55919: LD_VAR 0 8
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PPUSH
55928: CALL_OW 69
55932: ST_TO_ADDR
// for i in result do
55933: LD_ADDR_VAR 0 4
55937: PUSH
55938: LD_VAR 0 3
55942: PUSH
55943: FOR_IN
55944: IFFALSE 56369
// begin tag := GetTag ( i ) + 1 ;
55946: LD_ADDR_VAR 0 9
55950: PUSH
55951: LD_VAR 0 4
55955: PPUSH
55956: CALL_OW 110
55960: PUSH
55961: LD_INT 1
55963: PLUS
55964: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
55965: LD_ADDR_VAR 0 7
55969: PUSH
55970: LD_VAR 0 4
55974: PPUSH
55975: CALL_OW 250
55979: PPUSH
55980: LD_VAR 0 4
55984: PPUSH
55985: CALL_OW 251
55989: PPUSH
55990: LD_INT 4
55992: PPUSH
55993: CALL 55566 0 3
55997: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
55998: LD_VAR 0 4
56002: PPUSH
56003: CALL_OW 247
56007: PUSH
56008: LD_INT 2
56010: EQUAL
56011: PUSH
56012: LD_VAR 0 7
56016: PUSH
56017: LD_INT 2
56019: GREATER
56020: AND
56021: PUSH
56022: LD_VAR 0 4
56026: PPUSH
56027: CALL_OW 264
56031: PUSH
56032: LD_VAR 0 10
56036: IN
56037: NOT
56038: AND
56039: IFFALSE 56078
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56041: LD_VAR 0 4
56045: PPUSH
56046: LD_VAR 0 7
56050: PUSH
56051: LD_INT 1
56053: ARRAY
56054: PUSH
56055: LD_INT 1
56057: ARRAY
56058: PPUSH
56059: LD_VAR 0 7
56063: PUSH
56064: LD_INT 1
56066: ARRAY
56067: PUSH
56068: LD_INT 2
56070: ARRAY
56071: PPUSH
56072: CALL_OW 116
56076: GO 56367
// if path > tag then
56078: LD_VAR 0 2
56082: PUSH
56083: LD_VAR 0 9
56087: GREATER
56088: IFFALSE 56296
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56090: LD_ADDR_VAR 0 6
56094: PUSH
56095: LD_VAR 0 5
56099: PPUSH
56100: LD_INT 91
56102: PUSH
56103: LD_VAR 0 4
56107: PUSH
56108: LD_INT 8
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: PPUSH
56116: CALL_OW 72
56120: ST_TO_ADDR
// if nearEnemy then
56121: LD_VAR 0 6
56125: IFFALSE 56194
// begin if GetWeapon ( i ) = ru_time_lapser then
56127: LD_VAR 0 4
56131: PPUSH
56132: CALL_OW 264
56136: PUSH
56137: LD_INT 49
56139: EQUAL
56140: IFFALSE 56168
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56142: LD_VAR 0 4
56146: PPUSH
56147: LD_VAR 0 6
56151: PPUSH
56152: LD_VAR 0 4
56156: PPUSH
56157: CALL_OW 74
56161: PPUSH
56162: CALL_OW 112
56166: GO 56192
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56168: LD_VAR 0 4
56172: PPUSH
56173: LD_VAR 0 6
56177: PPUSH
56178: LD_VAR 0 4
56182: PPUSH
56183: CALL_OW 74
56187: PPUSH
56188: CALL 57442 0 2
// end else
56192: GO 56294
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56194: LD_VAR 0 4
56198: PPUSH
56199: LD_VAR 0 2
56203: PUSH
56204: LD_VAR 0 9
56208: ARRAY
56209: PUSH
56210: LD_INT 1
56212: ARRAY
56213: PPUSH
56214: LD_VAR 0 2
56218: PUSH
56219: LD_VAR 0 9
56223: ARRAY
56224: PUSH
56225: LD_INT 2
56227: ARRAY
56228: PPUSH
56229: CALL_OW 297
56233: PUSH
56234: LD_INT 6
56236: GREATER
56237: IFFALSE 56280
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56239: LD_VAR 0 4
56243: PPUSH
56244: LD_VAR 0 2
56248: PUSH
56249: LD_VAR 0 9
56253: ARRAY
56254: PUSH
56255: LD_INT 1
56257: ARRAY
56258: PPUSH
56259: LD_VAR 0 2
56263: PUSH
56264: LD_VAR 0 9
56268: ARRAY
56269: PUSH
56270: LD_INT 2
56272: ARRAY
56273: PPUSH
56274: CALL_OW 114
56278: GO 56294
// SetTag ( i , tag ) ;
56280: LD_VAR 0 4
56284: PPUSH
56285: LD_VAR 0 9
56289: PPUSH
56290: CALL_OW 109
// end else
56294: GO 56367
// if enemy then
56296: LD_VAR 0 5
56300: IFFALSE 56367
// begin if GetWeapon ( i ) = ru_time_lapser then
56302: LD_VAR 0 4
56306: PPUSH
56307: CALL_OW 264
56311: PUSH
56312: LD_INT 49
56314: EQUAL
56315: IFFALSE 56343
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56317: LD_VAR 0 4
56321: PPUSH
56322: LD_VAR 0 5
56326: PPUSH
56327: LD_VAR 0 4
56331: PPUSH
56332: CALL_OW 74
56336: PPUSH
56337: CALL_OW 112
56341: GO 56367
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56343: LD_VAR 0 4
56347: PPUSH
56348: LD_VAR 0 5
56352: PPUSH
56353: LD_VAR 0 4
56357: PPUSH
56358: CALL_OW 74
56362: PPUSH
56363: CALL 57442 0 2
// end ; end ;
56367: GO 55943
56369: POP
56370: POP
// end ;
56371: LD_VAR 0 3
56375: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56376: LD_INT 0
56378: PPUSH
56379: PPUSH
56380: PPUSH
// if not unit or IsInUnit ( unit ) then
56381: LD_VAR 0 1
56385: NOT
56386: PUSH
56387: LD_VAR 0 1
56391: PPUSH
56392: CALL_OW 310
56396: OR
56397: IFFALSE 56401
// exit ;
56399: GO 56492
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56401: LD_ADDR_VAR 0 4
56405: PUSH
56406: LD_VAR 0 1
56410: PPUSH
56411: CALL_OW 250
56415: PPUSH
56416: LD_VAR 0 2
56420: PPUSH
56421: LD_INT 1
56423: PPUSH
56424: CALL_OW 272
56428: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56429: LD_ADDR_VAR 0 5
56433: PUSH
56434: LD_VAR 0 1
56438: PPUSH
56439: CALL_OW 251
56443: PPUSH
56444: LD_VAR 0 2
56448: PPUSH
56449: LD_INT 1
56451: PPUSH
56452: CALL_OW 273
56456: ST_TO_ADDR
// if ValidHex ( x , y ) then
56457: LD_VAR 0 4
56461: PPUSH
56462: LD_VAR 0 5
56466: PPUSH
56467: CALL_OW 488
56471: IFFALSE 56492
// ComTurnXY ( unit , x , y ) ;
56473: LD_VAR 0 1
56477: PPUSH
56478: LD_VAR 0 4
56482: PPUSH
56483: LD_VAR 0 5
56487: PPUSH
56488: CALL_OW 118
// end ;
56492: LD_VAR 0 3
56496: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56497: LD_INT 0
56499: PPUSH
56500: PPUSH
// result := false ;
56501: LD_ADDR_VAR 0 3
56505: PUSH
56506: LD_INT 0
56508: ST_TO_ADDR
// if not units then
56509: LD_VAR 0 2
56513: NOT
56514: IFFALSE 56518
// exit ;
56516: GO 56563
// for i in units do
56518: LD_ADDR_VAR 0 4
56522: PUSH
56523: LD_VAR 0 2
56527: PUSH
56528: FOR_IN
56529: IFFALSE 56561
// if See ( side , i ) then
56531: LD_VAR 0 1
56535: PPUSH
56536: LD_VAR 0 4
56540: PPUSH
56541: CALL_OW 292
56545: IFFALSE 56559
// begin result := true ;
56547: LD_ADDR_VAR 0 3
56551: PUSH
56552: LD_INT 1
56554: ST_TO_ADDR
// exit ;
56555: POP
56556: POP
56557: GO 56563
// end ;
56559: GO 56528
56561: POP
56562: POP
// end ;
56563: LD_VAR 0 3
56567: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56568: LD_INT 0
56570: PPUSH
56571: PPUSH
56572: PPUSH
56573: PPUSH
// if not unit or not points then
56574: LD_VAR 0 1
56578: NOT
56579: PUSH
56580: LD_VAR 0 2
56584: NOT
56585: OR
56586: IFFALSE 56590
// exit ;
56588: GO 56680
// dist := 99999 ;
56590: LD_ADDR_VAR 0 5
56594: PUSH
56595: LD_INT 99999
56597: ST_TO_ADDR
// for i in points do
56598: LD_ADDR_VAR 0 4
56602: PUSH
56603: LD_VAR 0 2
56607: PUSH
56608: FOR_IN
56609: IFFALSE 56678
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56611: LD_ADDR_VAR 0 6
56615: PUSH
56616: LD_VAR 0 1
56620: PPUSH
56621: LD_VAR 0 4
56625: PUSH
56626: LD_INT 1
56628: ARRAY
56629: PPUSH
56630: LD_VAR 0 4
56634: PUSH
56635: LD_INT 2
56637: ARRAY
56638: PPUSH
56639: CALL_OW 297
56643: ST_TO_ADDR
// if tmpDist < dist then
56644: LD_VAR 0 6
56648: PUSH
56649: LD_VAR 0 5
56653: LESS
56654: IFFALSE 56676
// begin result := i ;
56656: LD_ADDR_VAR 0 3
56660: PUSH
56661: LD_VAR 0 4
56665: ST_TO_ADDR
// dist := tmpDist ;
56666: LD_ADDR_VAR 0 5
56670: PUSH
56671: LD_VAR 0 6
56675: ST_TO_ADDR
// end ; end ;
56676: GO 56608
56678: POP
56679: POP
// end ;
56680: LD_VAR 0 3
56684: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56685: LD_INT 0
56687: PPUSH
// uc_side := side ;
56688: LD_ADDR_OWVAR 20
56692: PUSH
56693: LD_VAR 0 1
56697: ST_TO_ADDR
// uc_nation := 3 ;
56698: LD_ADDR_OWVAR 21
56702: PUSH
56703: LD_INT 3
56705: ST_TO_ADDR
// vc_chassis := 25 ;
56706: LD_ADDR_OWVAR 37
56710: PUSH
56711: LD_INT 25
56713: ST_TO_ADDR
// vc_engine := engine_siberite ;
56714: LD_ADDR_OWVAR 39
56718: PUSH
56719: LD_INT 3
56721: ST_TO_ADDR
// vc_control := control_computer ;
56722: LD_ADDR_OWVAR 38
56726: PUSH
56727: LD_INT 3
56729: ST_TO_ADDR
// vc_weapon := 59 ;
56730: LD_ADDR_OWVAR 40
56734: PUSH
56735: LD_INT 59
56737: ST_TO_ADDR
// result := CreateVehicle ;
56738: LD_ADDR_VAR 0 5
56742: PUSH
56743: CALL_OW 45
56747: ST_TO_ADDR
// SetDir ( result , d ) ;
56748: LD_VAR 0 5
56752: PPUSH
56753: LD_VAR 0 4
56757: PPUSH
56758: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56762: LD_VAR 0 5
56766: PPUSH
56767: LD_VAR 0 2
56771: PPUSH
56772: LD_VAR 0 3
56776: PPUSH
56777: LD_INT 0
56779: PPUSH
56780: CALL_OW 48
// end ;
56784: LD_VAR 0 5
56788: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56789: LD_INT 0
56791: PPUSH
56792: PPUSH
56793: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56794: LD_ADDR_VAR 0 2
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56817: LD_VAR 0 1
56821: NOT
56822: PUSH
56823: LD_VAR 0 1
56827: PPUSH
56828: CALL_OW 264
56832: PUSH
56833: LD_INT 12
56835: PUSH
56836: LD_INT 51
56838: PUSH
56839: LD_INT 32
56841: PUSH
56842: LD_INT 89
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: IN
56851: NOT
56852: OR
56853: IFFALSE 56857
// exit ;
56855: GO 56955
// for i := 1 to 3 do
56857: LD_ADDR_VAR 0 3
56861: PUSH
56862: DOUBLE
56863: LD_INT 1
56865: DEC
56866: ST_TO_ADDR
56867: LD_INT 3
56869: PUSH
56870: FOR_TO
56871: IFFALSE 56953
// begin tmp := GetCargo ( cargo , i ) ;
56873: LD_ADDR_VAR 0 4
56877: PUSH
56878: LD_VAR 0 1
56882: PPUSH
56883: LD_VAR 0 3
56887: PPUSH
56888: CALL_OW 289
56892: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56893: LD_ADDR_VAR 0 2
56897: PUSH
56898: LD_VAR 0 2
56902: PPUSH
56903: LD_VAR 0 3
56907: PPUSH
56908: LD_VAR 0 4
56912: PPUSH
56913: CALL_OW 1
56917: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56918: LD_ADDR_VAR 0 2
56922: PUSH
56923: LD_VAR 0 2
56927: PPUSH
56928: LD_INT 4
56930: PPUSH
56931: LD_VAR 0 2
56935: PUSH
56936: LD_INT 4
56938: ARRAY
56939: PUSH
56940: LD_VAR 0 4
56944: PLUS
56945: PPUSH
56946: CALL_OW 1
56950: ST_TO_ADDR
// end ;
56951: GO 56870
56953: POP
56954: POP
// end ;
56955: LD_VAR 0 2
56959: RET
// export function Length ( array ) ; begin
56960: LD_INT 0
56962: PPUSH
// result := array + 0 ;
56963: LD_ADDR_VAR 0 2
56967: PUSH
56968: LD_VAR 0 1
56972: PUSH
56973: LD_INT 0
56975: PLUS
56976: ST_TO_ADDR
// end ;
56977: LD_VAR 0 2
56981: RET
// export function PrepareArray ( array ) ; begin
56982: LD_INT 0
56984: PPUSH
// result := array diff 0 ;
56985: LD_ADDR_VAR 0 2
56989: PUSH
56990: LD_VAR 0 1
56994: PUSH
56995: LD_INT 0
56997: DIFF
56998: ST_TO_ADDR
// if not result [ 1 ] then
56999: LD_VAR 0 2
57003: PUSH
57004: LD_INT 1
57006: ARRAY
57007: NOT
57008: IFFALSE 57028
// result := Delete ( result , 1 ) ;
57010: LD_ADDR_VAR 0 2
57014: PUSH
57015: LD_VAR 0 2
57019: PPUSH
57020: LD_INT 1
57022: PPUSH
57023: CALL_OW 3
57027: ST_TO_ADDR
// end ;
57028: LD_VAR 0 2
57032: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57033: LD_INT 0
57035: PPUSH
57036: PPUSH
57037: PPUSH
57038: PPUSH
// sibRocketRange := 25 ;
57039: LD_ADDR_VAR 0 6
57043: PUSH
57044: LD_INT 25
57046: ST_TO_ADDR
// result := false ;
57047: LD_ADDR_VAR 0 4
57051: PUSH
57052: LD_INT 0
57054: ST_TO_ADDR
// for i := 0 to 5 do
57055: LD_ADDR_VAR 0 5
57059: PUSH
57060: DOUBLE
57061: LD_INT 0
57063: DEC
57064: ST_TO_ADDR
57065: LD_INT 5
57067: PUSH
57068: FOR_TO
57069: IFFALSE 57136
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57071: LD_VAR 0 1
57075: PPUSH
57076: LD_VAR 0 5
57080: PPUSH
57081: LD_VAR 0 6
57085: PPUSH
57086: CALL_OW 272
57090: PPUSH
57091: LD_VAR 0 2
57095: PPUSH
57096: LD_VAR 0 5
57100: PPUSH
57101: LD_VAR 0 6
57105: PPUSH
57106: CALL_OW 273
57110: PPUSH
57111: LD_VAR 0 3
57115: PPUSH
57116: CALL_OW 309
57120: IFFALSE 57134
// begin result := true ;
57122: LD_ADDR_VAR 0 4
57126: PUSH
57127: LD_INT 1
57129: ST_TO_ADDR
// exit ;
57130: POP
57131: POP
57132: GO 57138
// end ;
57134: GO 57068
57136: POP
57137: POP
// end ;
57138: LD_VAR 0 4
57142: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57143: LD_INT 0
57145: PPUSH
57146: PPUSH
57147: PPUSH
// if btype = b_depot then
57148: LD_VAR 0 2
57152: PUSH
57153: LD_INT 0
57155: EQUAL
57156: IFFALSE 57168
// begin result := true ;
57158: LD_ADDR_VAR 0 3
57162: PUSH
57163: LD_INT 1
57165: ST_TO_ADDR
// exit ;
57166: GO 57284
// end ; pom := GetBase ( depot ) ;
57168: LD_ADDR_VAR 0 4
57172: PUSH
57173: LD_VAR 0 1
57177: PPUSH
57178: CALL_OW 274
57182: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57183: LD_ADDR_VAR 0 5
57187: PUSH
57188: LD_VAR 0 2
57192: PPUSH
57193: LD_VAR 0 1
57197: PPUSH
57198: CALL_OW 248
57202: PPUSH
57203: CALL_OW 450
57207: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57208: LD_ADDR_VAR 0 3
57212: PUSH
57213: LD_VAR 0 4
57217: PPUSH
57218: LD_INT 1
57220: PPUSH
57221: CALL_OW 275
57225: PUSH
57226: LD_VAR 0 5
57230: PUSH
57231: LD_INT 1
57233: ARRAY
57234: GREATEREQUAL
57235: PUSH
57236: LD_VAR 0 4
57240: PPUSH
57241: LD_INT 2
57243: PPUSH
57244: CALL_OW 275
57248: PUSH
57249: LD_VAR 0 5
57253: PUSH
57254: LD_INT 2
57256: ARRAY
57257: GREATEREQUAL
57258: AND
57259: PUSH
57260: LD_VAR 0 4
57264: PPUSH
57265: LD_INT 3
57267: PPUSH
57268: CALL_OW 275
57272: PUSH
57273: LD_VAR 0 5
57277: PUSH
57278: LD_INT 3
57280: ARRAY
57281: GREATEREQUAL
57282: AND
57283: ST_TO_ADDR
// end ;
57284: LD_VAR 0 3
57288: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57289: LD_INT 0
57291: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57292: LD_VAR 0 1
57296: PPUSH
57297: LD_VAR 0 2
57301: PPUSH
57302: LD_INT 0
57304: PPUSH
57305: LD_INT 0
57307: PPUSH
57308: LD_INT 1
57310: PPUSH
57311: LD_INT 0
57313: PPUSH
57314: CALL_OW 587
// end ;
57318: LD_VAR 0 3
57322: RET
// export function CenterOnNow ( unit ) ; begin
57323: LD_INT 0
57325: PPUSH
// result := IsInUnit ( unit ) ;
57326: LD_ADDR_VAR 0 2
57330: PUSH
57331: LD_VAR 0 1
57335: PPUSH
57336: CALL_OW 310
57340: ST_TO_ADDR
// if not result then
57341: LD_VAR 0 2
57345: NOT
57346: IFFALSE 57358
// result := unit ;
57348: LD_ADDR_VAR 0 2
57352: PUSH
57353: LD_VAR 0 1
57357: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57358: LD_VAR 0 1
57362: PPUSH
57363: CALL_OW 87
// end ;
57367: LD_VAR 0 2
57371: RET
// export function ComMoveHex ( unit , hex ) ; begin
57372: LD_INT 0
57374: PPUSH
// if not hex then
57375: LD_VAR 0 2
57379: NOT
57380: IFFALSE 57384
// exit ;
57382: GO 57437
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57384: LD_VAR 0 2
57388: PUSH
57389: LD_INT 1
57391: ARRAY
57392: PPUSH
57393: LD_VAR 0 2
57397: PUSH
57398: LD_INT 2
57400: ARRAY
57401: PPUSH
57402: CALL_OW 428
57406: IFFALSE 57410
// exit ;
57408: GO 57437
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57410: LD_VAR 0 1
57414: PPUSH
57415: LD_VAR 0 2
57419: PUSH
57420: LD_INT 1
57422: ARRAY
57423: PPUSH
57424: LD_VAR 0 2
57428: PUSH
57429: LD_INT 2
57431: ARRAY
57432: PPUSH
57433: CALL_OW 111
// end ;
57437: LD_VAR 0 3
57441: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57442: LD_INT 0
57444: PPUSH
57445: PPUSH
57446: PPUSH
// if not unit or not enemy then
57447: LD_VAR 0 1
57451: NOT
57452: PUSH
57453: LD_VAR 0 2
57457: NOT
57458: OR
57459: IFFALSE 57463
// exit ;
57461: GO 57587
// x := GetX ( enemy ) ;
57463: LD_ADDR_VAR 0 4
57467: PUSH
57468: LD_VAR 0 2
57472: PPUSH
57473: CALL_OW 250
57477: ST_TO_ADDR
// y := GetY ( enemy ) ;
57478: LD_ADDR_VAR 0 5
57482: PUSH
57483: LD_VAR 0 2
57487: PPUSH
57488: CALL_OW 251
57492: ST_TO_ADDR
// if ValidHex ( x , y ) then
57493: LD_VAR 0 4
57497: PPUSH
57498: LD_VAR 0 5
57502: PPUSH
57503: CALL_OW 488
57507: IFFALSE 57587
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57509: LD_VAR 0 2
57513: PPUSH
57514: CALL_OW 247
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: IN
57529: PUSH
57530: LD_VAR 0 1
57534: PPUSH
57535: CALL_OW 255
57539: PPUSH
57540: LD_VAR 0 2
57544: PPUSH
57545: CALL_OW 292
57549: OR
57550: IFFALSE 57568
// ComAttackUnit ( unit , enemy ) else
57552: LD_VAR 0 1
57556: PPUSH
57557: LD_VAR 0 2
57561: PPUSH
57562: CALL_OW 115
57566: GO 57587
// ComAgressiveMove ( unit , x , y ) ;
57568: LD_VAR 0 1
57572: PPUSH
57573: LD_VAR 0 4
57577: PPUSH
57578: LD_VAR 0 5
57582: PPUSH
57583: CALL_OW 114
// end ;
57587: LD_VAR 0 3
57591: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57592: LD_INT 0
57594: PPUSH
57595: PPUSH
57596: PPUSH
// list := AreaToList ( area , 0 ) ;
57597: LD_ADDR_VAR 0 5
57601: PUSH
57602: LD_VAR 0 1
57606: PPUSH
57607: LD_INT 0
57609: PPUSH
57610: CALL_OW 517
57614: ST_TO_ADDR
// if not list then
57615: LD_VAR 0 5
57619: NOT
57620: IFFALSE 57624
// exit ;
57622: GO 57754
// if all then
57624: LD_VAR 0 2
57628: IFFALSE 57716
// begin for i := 1 to list [ 1 ] do
57630: LD_ADDR_VAR 0 4
57634: PUSH
57635: DOUBLE
57636: LD_INT 1
57638: DEC
57639: ST_TO_ADDR
57640: LD_VAR 0 5
57644: PUSH
57645: LD_INT 1
57647: ARRAY
57648: PUSH
57649: FOR_TO
57650: IFFALSE 57712
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57652: LD_ADDR_VAR 0 3
57656: PUSH
57657: LD_VAR 0 3
57661: PPUSH
57662: LD_VAR 0 3
57666: PUSH
57667: LD_INT 1
57669: PLUS
57670: PPUSH
57671: LD_VAR 0 5
57675: PUSH
57676: LD_INT 1
57678: ARRAY
57679: PUSH
57680: LD_VAR 0 4
57684: ARRAY
57685: PUSH
57686: LD_VAR 0 5
57690: PUSH
57691: LD_INT 2
57693: ARRAY
57694: PUSH
57695: LD_VAR 0 4
57699: ARRAY
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PPUSH
57705: CALL_OW 1
57709: ST_TO_ADDR
57710: GO 57649
57712: POP
57713: POP
// exit ;
57714: GO 57754
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57716: LD_ADDR_VAR 0 3
57720: PUSH
57721: LD_VAR 0 5
57725: PUSH
57726: LD_INT 1
57728: ARRAY
57729: PUSH
57730: LD_INT 1
57732: ARRAY
57733: PUSH
57734: LD_VAR 0 5
57738: PUSH
57739: LD_INT 2
57741: ARRAY
57742: PUSH
57743: LD_INT 1
57745: ARRAY
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: EMPTY
57752: LIST
57753: ST_TO_ADDR
// end ;
57754: LD_VAR 0 3
57758: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57759: LD_INT 0
57761: PPUSH
57762: PPUSH
// list := AreaToList ( area , 0 ) ;
57763: LD_ADDR_VAR 0 4
57767: PUSH
57768: LD_VAR 0 1
57772: PPUSH
57773: LD_INT 0
57775: PPUSH
57776: CALL_OW 517
57780: ST_TO_ADDR
// if not list then
57781: LD_VAR 0 4
57785: NOT
57786: IFFALSE 57790
// exit ;
57788: GO 57831
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57790: LD_ADDR_VAR 0 3
57794: PUSH
57795: LD_VAR 0 4
57799: PUSH
57800: LD_INT 1
57802: ARRAY
57803: PUSH
57804: LD_INT 1
57806: ARRAY
57807: PUSH
57808: LD_VAR 0 4
57812: PUSH
57813: LD_INT 2
57815: ARRAY
57816: PUSH
57817: LD_INT 1
57819: ARRAY
57820: PUSH
57821: LD_VAR 0 2
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: ST_TO_ADDR
// end ;
57831: LD_VAR 0 3
57835: RET
// export function First ( array ) ; begin
57836: LD_INT 0
57838: PPUSH
// if not array then
57839: LD_VAR 0 1
57843: NOT
57844: IFFALSE 57848
// exit ;
57846: GO 57862
// result := array [ 1 ] ;
57848: LD_ADDR_VAR 0 2
57852: PUSH
57853: LD_VAR 0 1
57857: PUSH
57858: LD_INT 1
57860: ARRAY
57861: ST_TO_ADDR
// end ;
57862: LD_VAR 0 2
57866: RET
// export function Last ( array ) ; begin
57867: LD_INT 0
57869: PPUSH
// if not array then
57870: LD_VAR 0 1
57874: NOT
57875: IFFALSE 57879
// exit ;
57877: GO 57895
// result := array [ array ] ;
57879: LD_ADDR_VAR 0 2
57883: PUSH
57884: LD_VAR 0 1
57888: PUSH
57889: LD_VAR 0 1
57893: ARRAY
57894: ST_TO_ADDR
// end ;
57895: LD_VAR 0 2
57899: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57900: LD_INT 0
57902: PPUSH
57903: PPUSH
// result := [ ] ;
57904: LD_ADDR_VAR 0 5
57908: PUSH
57909: EMPTY
57910: ST_TO_ADDR
// if not array then
57911: LD_VAR 0 1
57915: NOT
57916: IFFALSE 57920
// exit ;
57918: GO 58032
// for i := 1 to array do
57920: LD_ADDR_VAR 0 6
57924: PUSH
57925: DOUBLE
57926: LD_INT 1
57928: DEC
57929: ST_TO_ADDR
57930: LD_VAR 0 1
57934: PUSH
57935: FOR_TO
57936: IFFALSE 58030
// if array [ i ] [ index ] = value then
57938: LD_VAR 0 1
57942: PUSH
57943: LD_VAR 0 6
57947: ARRAY
57948: PUSH
57949: LD_VAR 0 2
57953: ARRAY
57954: PUSH
57955: LD_VAR 0 3
57959: EQUAL
57960: IFFALSE 58028
// begin if indexColumn then
57962: LD_VAR 0 4
57966: IFFALSE 58002
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57968: LD_ADDR_VAR 0 5
57972: PUSH
57973: LD_VAR 0 5
57977: PPUSH
57978: LD_VAR 0 1
57982: PUSH
57983: LD_VAR 0 6
57987: ARRAY
57988: PUSH
57989: LD_VAR 0 4
57993: ARRAY
57994: PPUSH
57995: CALL 53220 0 2
57999: ST_TO_ADDR
58000: GO 58028
// result := Join ( result , array [ i ] ) ;
58002: LD_ADDR_VAR 0 5
58006: PUSH
58007: LD_VAR 0 5
58011: PPUSH
58012: LD_VAR 0 1
58016: PUSH
58017: LD_VAR 0 6
58021: ARRAY
58022: PPUSH
58023: CALL 53220 0 2
58027: ST_TO_ADDR
// end ;
58028: GO 57935
58030: POP
58031: POP
// end ;
58032: LD_VAR 0 5
58036: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58037: LD_INT 0
58039: PPUSH
// if not vehicles or not parkingPoint then
58040: LD_VAR 0 1
58044: NOT
58045: PUSH
58046: LD_VAR 0 2
58050: NOT
58051: OR
58052: IFFALSE 58056
// exit ;
58054: GO 58154
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58056: LD_ADDR_VAR 0 1
58060: PUSH
58061: LD_VAR 0 1
58065: PPUSH
58066: LD_INT 50
58068: PUSH
58069: EMPTY
58070: LIST
58071: PUSH
58072: LD_INT 3
58074: PUSH
58075: LD_INT 92
58077: PUSH
58078: LD_VAR 0 2
58082: PUSH
58083: LD_INT 1
58085: ARRAY
58086: PUSH
58087: LD_VAR 0 2
58091: PUSH
58092: LD_INT 2
58094: ARRAY
58095: PUSH
58096: LD_INT 8
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PPUSH
58113: CALL_OW 72
58117: ST_TO_ADDR
// if not vehicles then
58118: LD_VAR 0 1
58122: NOT
58123: IFFALSE 58127
// exit ;
58125: GO 58154
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58127: LD_VAR 0 1
58131: PPUSH
58132: LD_VAR 0 2
58136: PUSH
58137: LD_INT 1
58139: ARRAY
58140: PPUSH
58141: LD_VAR 0 2
58145: PUSH
58146: LD_INT 2
58148: ARRAY
58149: PPUSH
58150: CALL_OW 111
// end ;
58154: LD_VAR 0 3
58158: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58159: LD_INT 0
58161: PPUSH
58162: PPUSH
58163: PPUSH
// if not side or not area then
58164: LD_VAR 0 1
58168: NOT
58169: PUSH
58170: LD_VAR 0 2
58174: NOT
58175: OR
58176: IFFALSE 58180
// exit ;
58178: GO 58299
// tmp := AreaToList ( area , 0 ) ;
58180: LD_ADDR_VAR 0 5
58184: PUSH
58185: LD_VAR 0 2
58189: PPUSH
58190: LD_INT 0
58192: PPUSH
58193: CALL_OW 517
58197: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58198: LD_ADDR_VAR 0 4
58202: PUSH
58203: DOUBLE
58204: LD_INT 1
58206: DEC
58207: ST_TO_ADDR
58208: LD_VAR 0 5
58212: PUSH
58213: LD_INT 1
58215: ARRAY
58216: PUSH
58217: FOR_TO
58218: IFFALSE 58297
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
58220: LD_VAR 0 5
58224: PUSH
58225: LD_INT 1
58227: ARRAY
58228: PUSH
58229: LD_VAR 0 4
58233: ARRAY
58234: PPUSH
58235: LD_VAR 0 5
58239: PUSH
58240: LD_INT 2
58242: ARRAY
58243: PUSH
58244: LD_VAR 0 4
58248: ARRAY
58249: PPUSH
58250: CALL_OW 351
58254: IFFALSE 58295
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
58256: LD_VAR 0 5
58260: PUSH
58261: LD_INT 1
58263: ARRAY
58264: PUSH
58265: LD_VAR 0 4
58269: ARRAY
58270: PPUSH
58271: LD_VAR 0 5
58275: PUSH
58276: LD_INT 2
58278: ARRAY
58279: PUSH
58280: LD_VAR 0 4
58284: ARRAY
58285: PPUSH
58286: LD_VAR 0 1
58290: PPUSH
58291: CALL_OW 244
// end ;
58295: GO 58217
58297: POP
58298: POP
// end ; end_of_file end_of_file
58299: LD_VAR 0 3
58303: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
58304: LD_VAR 0 1
58308: PPUSH
58309: LD_VAR 0 2
58313: PPUSH
58314: LD_VAR 0 3
58318: PPUSH
58319: LD_VAR 0 4
58323: PPUSH
58324: LD_VAR 0 5
58328: PPUSH
58329: LD_VAR 0 6
58333: PPUSH
58334: CALL 58535 0 6
// end ;
58338: PPOPN 6
58340: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
58341: LD_INT 0
58343: PPUSH
// begin if not units then
58344: LD_VAR 0 1
58348: NOT
58349: IFFALSE 58353
// exit ;
58351: GO 58353
// end ;
58353: PPOPN 7
58355: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
58356: CALL 58422 0 0
// end ; end_of_file
58360: PPOPN 1
58362: END
// export globalGameSaveCounter ; every 0 0$1 do
58363: GO 58365
58365: DISABLE
// begin enable ;
58366: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58367: LD_STRING updateTimer(
58369: PUSH
58370: LD_OWVAR 1
58374: STR
58375: PUSH
58376: LD_STRING );
58378: STR
58379: PPUSH
58380: CALL_OW 559
// end ;
58384: END
// every 0 0$1 do
58385: GO 58387
58387: DISABLE
// begin globalGameSaveCounter := 0 ;
58388: LD_ADDR_EXP 37
58392: PUSH
58393: LD_INT 0
58395: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
58396: LD_STRING setGameSaveCounter(0)
58398: PPUSH
58399: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
58403: LD_STRING initStreamRollete();
58405: PPUSH
58406: CALL_OW 559
// InitStreamMode ;
58410: CALL 59753 0 0
// DefineStreamItems ( false ) ;
58414: LD_INT 0
58416: PPUSH
58417: CALL 60217 0 1
// end ;
58421: END
// export function SOS_MapStart ( ) ; begin
58422: LD_INT 0
58424: PPUSH
// if streamModeActive then
58425: LD_EXP 38
58429: IFFALSE 58438
// DefineStreamItems ( true ) ;
58431: LD_INT 1
58433: PPUSH
58434: CALL 60217 0 1
// UpdateLuaVariables ( ) ;
58438: CALL 58455 0 0
// UpdateFactoryWaypoints ( ) ;
58442: CALL 73219 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58446: CALL 73471 0 0
// end ;
58450: LD_VAR 0 1
58454: RET
// function UpdateLuaVariables ( ) ; begin
58455: LD_INT 0
58457: PPUSH
// if globalGameSaveCounter then
58458: LD_EXP 37
58462: IFFALSE 58496
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
58464: LD_ADDR_EXP 37
58468: PUSH
58469: LD_EXP 37
58473: PPUSH
58474: CALL 54581 0 1
58478: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58479: LD_STRING setGameSaveCounter(
58481: PUSH
58482: LD_EXP 37
58486: STR
58487: PUSH
58488: LD_STRING )
58490: STR
58491: PPUSH
58492: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58496: LD_STRING setGameDifficulty(
58498: PUSH
58499: LD_OWVAR 67
58503: STR
58504: PUSH
58505: LD_STRING )
58507: STR
58508: PPUSH
58509: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
58513: LD_STRING displayDifficulty(
58515: PUSH
58516: LD_OWVAR 67
58520: STR
58521: PUSH
58522: LD_STRING )
58524: STR
58525: PPUSH
58526: CALL_OW 559
// end ;
58530: LD_VAR 0 1
58534: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58535: LD_INT 0
58537: PPUSH
// if p2 = stream_mode then
58538: LD_VAR 0 2
58542: PUSH
58543: LD_INT 100
58545: EQUAL
58546: IFFALSE 59549
// begin if not StreamModeActive then
58548: LD_EXP 38
58552: NOT
58553: IFFALSE 58563
// StreamModeActive := true ;
58555: LD_ADDR_EXP 38
58559: PUSH
58560: LD_INT 1
58562: ST_TO_ADDR
// if p3 = 0 then
58563: LD_VAR 0 3
58567: PUSH
58568: LD_INT 0
58570: EQUAL
58571: IFFALSE 58577
// InitStreamMode ;
58573: CALL 59753 0 0
// if p3 = 1 then
58577: LD_VAR 0 3
58581: PUSH
58582: LD_INT 1
58584: EQUAL
58585: IFFALSE 58595
// sRocket := true ;
58587: LD_ADDR_EXP 43
58591: PUSH
58592: LD_INT 1
58594: ST_TO_ADDR
// if p3 = 2 then
58595: LD_VAR 0 3
58599: PUSH
58600: LD_INT 2
58602: EQUAL
58603: IFFALSE 58613
// sSpeed := true ;
58605: LD_ADDR_EXP 42
58609: PUSH
58610: LD_INT 1
58612: ST_TO_ADDR
// if p3 = 3 then
58613: LD_VAR 0 3
58617: PUSH
58618: LD_INT 3
58620: EQUAL
58621: IFFALSE 58631
// sEngine := true ;
58623: LD_ADDR_EXP 44
58627: PUSH
58628: LD_INT 1
58630: ST_TO_ADDR
// if p3 = 4 then
58631: LD_VAR 0 3
58635: PUSH
58636: LD_INT 4
58638: EQUAL
58639: IFFALSE 58649
// sSpec := true ;
58641: LD_ADDR_EXP 41
58645: PUSH
58646: LD_INT 1
58648: ST_TO_ADDR
// if p3 = 5 then
58649: LD_VAR 0 3
58653: PUSH
58654: LD_INT 5
58656: EQUAL
58657: IFFALSE 58667
// sLevel := true ;
58659: LD_ADDR_EXP 45
58663: PUSH
58664: LD_INT 1
58666: ST_TO_ADDR
// if p3 = 6 then
58667: LD_VAR 0 3
58671: PUSH
58672: LD_INT 6
58674: EQUAL
58675: IFFALSE 58685
// sArmoury := true ;
58677: LD_ADDR_EXP 46
58681: PUSH
58682: LD_INT 1
58684: ST_TO_ADDR
// if p3 = 7 then
58685: LD_VAR 0 3
58689: PUSH
58690: LD_INT 7
58692: EQUAL
58693: IFFALSE 58703
// sRadar := true ;
58695: LD_ADDR_EXP 47
58699: PUSH
58700: LD_INT 1
58702: ST_TO_ADDR
// if p3 = 8 then
58703: LD_VAR 0 3
58707: PUSH
58708: LD_INT 8
58710: EQUAL
58711: IFFALSE 58721
// sBunker := true ;
58713: LD_ADDR_EXP 48
58717: PUSH
58718: LD_INT 1
58720: ST_TO_ADDR
// if p3 = 9 then
58721: LD_VAR 0 3
58725: PUSH
58726: LD_INT 9
58728: EQUAL
58729: IFFALSE 58739
// sHack := true ;
58731: LD_ADDR_EXP 49
58735: PUSH
58736: LD_INT 1
58738: ST_TO_ADDR
// if p3 = 10 then
58739: LD_VAR 0 3
58743: PUSH
58744: LD_INT 10
58746: EQUAL
58747: IFFALSE 58757
// sFire := true ;
58749: LD_ADDR_EXP 50
58753: PUSH
58754: LD_INT 1
58756: ST_TO_ADDR
// if p3 = 11 then
58757: LD_VAR 0 3
58761: PUSH
58762: LD_INT 11
58764: EQUAL
58765: IFFALSE 58775
// sRefresh := true ;
58767: LD_ADDR_EXP 51
58771: PUSH
58772: LD_INT 1
58774: ST_TO_ADDR
// if p3 = 12 then
58775: LD_VAR 0 3
58779: PUSH
58780: LD_INT 12
58782: EQUAL
58783: IFFALSE 58793
// sExp := true ;
58785: LD_ADDR_EXP 52
58789: PUSH
58790: LD_INT 1
58792: ST_TO_ADDR
// if p3 = 13 then
58793: LD_VAR 0 3
58797: PUSH
58798: LD_INT 13
58800: EQUAL
58801: IFFALSE 58811
// sDepot := true ;
58803: LD_ADDR_EXP 53
58807: PUSH
58808: LD_INT 1
58810: ST_TO_ADDR
// if p3 = 14 then
58811: LD_VAR 0 3
58815: PUSH
58816: LD_INT 14
58818: EQUAL
58819: IFFALSE 58829
// sFlag := true ;
58821: LD_ADDR_EXP 54
58825: PUSH
58826: LD_INT 1
58828: ST_TO_ADDR
// if p3 = 15 then
58829: LD_VAR 0 3
58833: PUSH
58834: LD_INT 15
58836: EQUAL
58837: IFFALSE 58847
// sKamikadze := true ;
58839: LD_ADDR_EXP 62
58843: PUSH
58844: LD_INT 1
58846: ST_TO_ADDR
// if p3 = 16 then
58847: LD_VAR 0 3
58851: PUSH
58852: LD_INT 16
58854: EQUAL
58855: IFFALSE 58865
// sTroll := true ;
58857: LD_ADDR_EXP 63
58861: PUSH
58862: LD_INT 1
58864: ST_TO_ADDR
// if p3 = 17 then
58865: LD_VAR 0 3
58869: PUSH
58870: LD_INT 17
58872: EQUAL
58873: IFFALSE 58883
// sSlow := true ;
58875: LD_ADDR_EXP 64
58879: PUSH
58880: LD_INT 1
58882: ST_TO_ADDR
// if p3 = 18 then
58883: LD_VAR 0 3
58887: PUSH
58888: LD_INT 18
58890: EQUAL
58891: IFFALSE 58901
// sLack := true ;
58893: LD_ADDR_EXP 65
58897: PUSH
58898: LD_INT 1
58900: ST_TO_ADDR
// if p3 = 19 then
58901: LD_VAR 0 3
58905: PUSH
58906: LD_INT 19
58908: EQUAL
58909: IFFALSE 58919
// sTank := true ;
58911: LD_ADDR_EXP 67
58915: PUSH
58916: LD_INT 1
58918: ST_TO_ADDR
// if p3 = 20 then
58919: LD_VAR 0 3
58923: PUSH
58924: LD_INT 20
58926: EQUAL
58927: IFFALSE 58937
// sRemote := true ;
58929: LD_ADDR_EXP 68
58933: PUSH
58934: LD_INT 1
58936: ST_TO_ADDR
// if p3 = 21 then
58937: LD_VAR 0 3
58941: PUSH
58942: LD_INT 21
58944: EQUAL
58945: IFFALSE 58955
// sPowell := true ;
58947: LD_ADDR_EXP 69
58951: PUSH
58952: LD_INT 1
58954: ST_TO_ADDR
// if p3 = 22 then
58955: LD_VAR 0 3
58959: PUSH
58960: LD_INT 22
58962: EQUAL
58963: IFFALSE 58973
// sTeleport := true ;
58965: LD_ADDR_EXP 72
58969: PUSH
58970: LD_INT 1
58972: ST_TO_ADDR
// if p3 = 23 then
58973: LD_VAR 0 3
58977: PUSH
58978: LD_INT 23
58980: EQUAL
58981: IFFALSE 58991
// sOilTower := true ;
58983: LD_ADDR_EXP 74
58987: PUSH
58988: LD_INT 1
58990: ST_TO_ADDR
// if p3 = 24 then
58991: LD_VAR 0 3
58995: PUSH
58996: LD_INT 24
58998: EQUAL
58999: IFFALSE 59009
// sShovel := true ;
59001: LD_ADDR_EXP 75
59005: PUSH
59006: LD_INT 1
59008: ST_TO_ADDR
// if p3 = 25 then
59009: LD_VAR 0 3
59013: PUSH
59014: LD_INT 25
59016: EQUAL
59017: IFFALSE 59027
// sSheik := true ;
59019: LD_ADDR_EXP 76
59023: PUSH
59024: LD_INT 1
59026: ST_TO_ADDR
// if p3 = 26 then
59027: LD_VAR 0 3
59031: PUSH
59032: LD_INT 26
59034: EQUAL
59035: IFFALSE 59045
// sEarthquake := true ;
59037: LD_ADDR_EXP 78
59041: PUSH
59042: LD_INT 1
59044: ST_TO_ADDR
// if p3 = 27 then
59045: LD_VAR 0 3
59049: PUSH
59050: LD_INT 27
59052: EQUAL
59053: IFFALSE 59063
// sAI := true ;
59055: LD_ADDR_EXP 79
59059: PUSH
59060: LD_INT 1
59062: ST_TO_ADDR
// if p3 = 28 then
59063: LD_VAR 0 3
59067: PUSH
59068: LD_INT 28
59070: EQUAL
59071: IFFALSE 59081
// sCargo := true ;
59073: LD_ADDR_EXP 82
59077: PUSH
59078: LD_INT 1
59080: ST_TO_ADDR
// if p3 = 29 then
59081: LD_VAR 0 3
59085: PUSH
59086: LD_INT 29
59088: EQUAL
59089: IFFALSE 59099
// sDLaser := true ;
59091: LD_ADDR_EXP 83
59095: PUSH
59096: LD_INT 1
59098: ST_TO_ADDR
// if p3 = 30 then
59099: LD_VAR 0 3
59103: PUSH
59104: LD_INT 30
59106: EQUAL
59107: IFFALSE 59117
// sExchange := true ;
59109: LD_ADDR_EXP 84
59113: PUSH
59114: LD_INT 1
59116: ST_TO_ADDR
// if p3 = 31 then
59117: LD_VAR 0 3
59121: PUSH
59122: LD_INT 31
59124: EQUAL
59125: IFFALSE 59135
// sFac := true ;
59127: LD_ADDR_EXP 85
59131: PUSH
59132: LD_INT 1
59134: ST_TO_ADDR
// if p3 = 32 then
59135: LD_VAR 0 3
59139: PUSH
59140: LD_INT 32
59142: EQUAL
59143: IFFALSE 59153
// sPower := true ;
59145: LD_ADDR_EXP 86
59149: PUSH
59150: LD_INT 1
59152: ST_TO_ADDR
// if p3 = 33 then
59153: LD_VAR 0 3
59157: PUSH
59158: LD_INT 33
59160: EQUAL
59161: IFFALSE 59171
// sRandom := true ;
59163: LD_ADDR_EXP 87
59167: PUSH
59168: LD_INT 1
59170: ST_TO_ADDR
// if p3 = 34 then
59171: LD_VAR 0 3
59175: PUSH
59176: LD_INT 34
59178: EQUAL
59179: IFFALSE 59189
// sShield := true ;
59181: LD_ADDR_EXP 88
59185: PUSH
59186: LD_INT 1
59188: ST_TO_ADDR
// if p3 = 35 then
59189: LD_VAR 0 3
59193: PUSH
59194: LD_INT 35
59196: EQUAL
59197: IFFALSE 59207
// sTime := true ;
59199: LD_ADDR_EXP 89
59203: PUSH
59204: LD_INT 1
59206: ST_TO_ADDR
// if p3 = 36 then
59207: LD_VAR 0 3
59211: PUSH
59212: LD_INT 36
59214: EQUAL
59215: IFFALSE 59225
// sTools := true ;
59217: LD_ADDR_EXP 90
59221: PUSH
59222: LD_INT 1
59224: ST_TO_ADDR
// if p3 = 101 then
59225: LD_VAR 0 3
59229: PUSH
59230: LD_INT 101
59232: EQUAL
59233: IFFALSE 59243
// sSold := true ;
59235: LD_ADDR_EXP 55
59239: PUSH
59240: LD_INT 1
59242: ST_TO_ADDR
// if p3 = 102 then
59243: LD_VAR 0 3
59247: PUSH
59248: LD_INT 102
59250: EQUAL
59251: IFFALSE 59261
// sDiff := true ;
59253: LD_ADDR_EXP 56
59257: PUSH
59258: LD_INT 1
59260: ST_TO_ADDR
// if p3 = 103 then
59261: LD_VAR 0 3
59265: PUSH
59266: LD_INT 103
59268: EQUAL
59269: IFFALSE 59279
// sFog := true ;
59271: LD_ADDR_EXP 59
59275: PUSH
59276: LD_INT 1
59278: ST_TO_ADDR
// if p3 = 104 then
59279: LD_VAR 0 3
59283: PUSH
59284: LD_INT 104
59286: EQUAL
59287: IFFALSE 59297
// sReset := true ;
59289: LD_ADDR_EXP 60
59293: PUSH
59294: LD_INT 1
59296: ST_TO_ADDR
// if p3 = 105 then
59297: LD_VAR 0 3
59301: PUSH
59302: LD_INT 105
59304: EQUAL
59305: IFFALSE 59315
// sSun := true ;
59307: LD_ADDR_EXP 61
59311: PUSH
59312: LD_INT 1
59314: ST_TO_ADDR
// if p3 = 106 then
59315: LD_VAR 0 3
59319: PUSH
59320: LD_INT 106
59322: EQUAL
59323: IFFALSE 59333
// sTiger := true ;
59325: LD_ADDR_EXP 57
59329: PUSH
59330: LD_INT 1
59332: ST_TO_ADDR
// if p3 = 107 then
59333: LD_VAR 0 3
59337: PUSH
59338: LD_INT 107
59340: EQUAL
59341: IFFALSE 59351
// sBomb := true ;
59343: LD_ADDR_EXP 58
59347: PUSH
59348: LD_INT 1
59350: ST_TO_ADDR
// if p3 = 108 then
59351: LD_VAR 0 3
59355: PUSH
59356: LD_INT 108
59358: EQUAL
59359: IFFALSE 59369
// sWound := true ;
59361: LD_ADDR_EXP 66
59365: PUSH
59366: LD_INT 1
59368: ST_TO_ADDR
// if p3 = 109 then
59369: LD_VAR 0 3
59373: PUSH
59374: LD_INT 109
59376: EQUAL
59377: IFFALSE 59387
// sBetray := true ;
59379: LD_ADDR_EXP 70
59383: PUSH
59384: LD_INT 1
59386: ST_TO_ADDR
// if p3 = 110 then
59387: LD_VAR 0 3
59391: PUSH
59392: LD_INT 110
59394: EQUAL
59395: IFFALSE 59405
// sContamin := true ;
59397: LD_ADDR_EXP 71
59401: PUSH
59402: LD_INT 1
59404: ST_TO_ADDR
// if p3 = 111 then
59405: LD_VAR 0 3
59409: PUSH
59410: LD_INT 111
59412: EQUAL
59413: IFFALSE 59423
// sOil := true ;
59415: LD_ADDR_EXP 73
59419: PUSH
59420: LD_INT 1
59422: ST_TO_ADDR
// if p3 = 112 then
59423: LD_VAR 0 3
59427: PUSH
59428: LD_INT 112
59430: EQUAL
59431: IFFALSE 59441
// sStu := true ;
59433: LD_ADDR_EXP 77
59437: PUSH
59438: LD_INT 1
59440: ST_TO_ADDR
// if p3 = 113 then
59441: LD_VAR 0 3
59445: PUSH
59446: LD_INT 113
59448: EQUAL
59449: IFFALSE 59459
// sBazooka := true ;
59451: LD_ADDR_EXP 80
59455: PUSH
59456: LD_INT 1
59458: ST_TO_ADDR
// if p3 = 114 then
59459: LD_VAR 0 3
59463: PUSH
59464: LD_INT 114
59466: EQUAL
59467: IFFALSE 59477
// sMortar := true ;
59469: LD_ADDR_EXP 81
59473: PUSH
59474: LD_INT 1
59476: ST_TO_ADDR
// if p3 = 115 then
59477: LD_VAR 0 3
59481: PUSH
59482: LD_INT 115
59484: EQUAL
59485: IFFALSE 59495
// sRanger := true ;
59487: LD_ADDR_EXP 91
59491: PUSH
59492: LD_INT 1
59494: ST_TO_ADDR
// if p3 = 116 then
59495: LD_VAR 0 3
59499: PUSH
59500: LD_INT 116
59502: EQUAL
59503: IFFALSE 59513
// sComputer := true ;
59505: LD_ADDR_EXP 92
59509: PUSH
59510: LD_INT 1
59512: ST_TO_ADDR
// if p3 = 117 then
59513: LD_VAR 0 3
59517: PUSH
59518: LD_INT 117
59520: EQUAL
59521: IFFALSE 59531
// s30 := true ;
59523: LD_ADDR_EXP 93
59527: PUSH
59528: LD_INT 1
59530: ST_TO_ADDR
// if p3 = 118 then
59531: LD_VAR 0 3
59535: PUSH
59536: LD_INT 118
59538: EQUAL
59539: IFFALSE 59549
// s60 := true ;
59541: LD_ADDR_EXP 94
59545: PUSH
59546: LD_INT 1
59548: ST_TO_ADDR
// end ; if p2 = hack_mode then
59549: LD_VAR 0 2
59553: PUSH
59554: LD_INT 101
59556: EQUAL
59557: IFFALSE 59685
// begin case p3 of 1 :
59559: LD_VAR 0 3
59563: PUSH
59564: LD_INT 1
59566: DOUBLE
59567: EQUAL
59568: IFTRUE 59572
59570: GO 59579
59572: POP
// hHackUnlimitedResources ; 2 :
59573: CALL 71832 0 0
59577: GO 59685
59579: LD_INT 2
59581: DOUBLE
59582: EQUAL
59583: IFTRUE 59587
59585: GO 59594
59587: POP
// hHackSetLevel10 ; 3 :
59588: CALL 71965 0 0
59592: GO 59685
59594: LD_INT 3
59596: DOUBLE
59597: EQUAL
59598: IFTRUE 59602
59600: GO 59609
59602: POP
// hHackSetLevel10YourUnits ; 4 :
59603: CALL 72050 0 0
59607: GO 59685
59609: LD_INT 4
59611: DOUBLE
59612: EQUAL
59613: IFTRUE 59617
59615: GO 59624
59617: POP
// hHackInvincible ; 5 :
59618: CALL 72498 0 0
59622: GO 59685
59624: LD_INT 5
59626: DOUBLE
59627: EQUAL
59628: IFTRUE 59632
59630: GO 59639
59632: POP
// hHackInvisible ; 6 :
59633: CALL 72609 0 0
59637: GO 59685
59639: LD_INT 6
59641: DOUBLE
59642: EQUAL
59643: IFTRUE 59647
59645: GO 59654
59647: POP
// hHackChangeYourSide ; 7 :
59648: CALL 72666 0 0
59652: GO 59685
59654: LD_INT 7
59656: DOUBLE
59657: EQUAL
59658: IFTRUE 59662
59660: GO 59669
59662: POP
// hHackChangeUnitSide ; 8 :
59663: CALL 72708 0 0
59667: GO 59685
59669: LD_INT 8
59671: DOUBLE
59672: EQUAL
59673: IFTRUE 59677
59675: GO 59684
59677: POP
// hHackFog ; end ;
59678: CALL 72809 0 0
59682: GO 59685
59684: POP
// end ; if p2 = game_save_mode then
59685: LD_VAR 0 2
59689: PUSH
59690: LD_INT 102
59692: EQUAL
59693: IFFALSE 59748
// begin if p3 = 1 then
59695: LD_VAR 0 3
59699: PUSH
59700: LD_INT 1
59702: EQUAL
59703: IFFALSE 59715
// globalGameSaveCounter := p4 ;
59705: LD_ADDR_EXP 37
59709: PUSH
59710: LD_VAR 0 4
59714: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59715: LD_VAR 0 3
59719: PUSH
59720: LD_INT 2
59722: EQUAL
59723: PUSH
59724: LD_EXP 37
59728: AND
59729: IFFALSE 59748
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59731: LD_STRING setGameSaveCounter(
59733: PUSH
59734: LD_EXP 37
59738: STR
59739: PUSH
59740: LD_STRING )
59742: STR
59743: PPUSH
59744: CALL_OW 559
// end ; end ;
59748: LD_VAR 0 7
59752: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59753: LD_INT 0
59755: PPUSH
// streamModeActive := false ;
59756: LD_ADDR_EXP 38
59760: PUSH
59761: LD_INT 0
59763: ST_TO_ADDR
// normalCounter := 36 ;
59764: LD_ADDR_EXP 39
59768: PUSH
59769: LD_INT 36
59771: ST_TO_ADDR
// hardcoreCounter := 18 ;
59772: LD_ADDR_EXP 40
59776: PUSH
59777: LD_INT 18
59779: ST_TO_ADDR
// sRocket := false ;
59780: LD_ADDR_EXP 43
59784: PUSH
59785: LD_INT 0
59787: ST_TO_ADDR
// sSpeed := false ;
59788: LD_ADDR_EXP 42
59792: PUSH
59793: LD_INT 0
59795: ST_TO_ADDR
// sEngine := false ;
59796: LD_ADDR_EXP 44
59800: PUSH
59801: LD_INT 0
59803: ST_TO_ADDR
// sSpec := false ;
59804: LD_ADDR_EXP 41
59808: PUSH
59809: LD_INT 0
59811: ST_TO_ADDR
// sLevel := false ;
59812: LD_ADDR_EXP 45
59816: PUSH
59817: LD_INT 0
59819: ST_TO_ADDR
// sArmoury := false ;
59820: LD_ADDR_EXP 46
59824: PUSH
59825: LD_INT 0
59827: ST_TO_ADDR
// sRadar := false ;
59828: LD_ADDR_EXP 47
59832: PUSH
59833: LD_INT 0
59835: ST_TO_ADDR
// sBunker := false ;
59836: LD_ADDR_EXP 48
59840: PUSH
59841: LD_INT 0
59843: ST_TO_ADDR
// sHack := false ;
59844: LD_ADDR_EXP 49
59848: PUSH
59849: LD_INT 0
59851: ST_TO_ADDR
// sFire := false ;
59852: LD_ADDR_EXP 50
59856: PUSH
59857: LD_INT 0
59859: ST_TO_ADDR
// sRefresh := false ;
59860: LD_ADDR_EXP 51
59864: PUSH
59865: LD_INT 0
59867: ST_TO_ADDR
// sExp := false ;
59868: LD_ADDR_EXP 52
59872: PUSH
59873: LD_INT 0
59875: ST_TO_ADDR
// sDepot := false ;
59876: LD_ADDR_EXP 53
59880: PUSH
59881: LD_INT 0
59883: ST_TO_ADDR
// sFlag := false ;
59884: LD_ADDR_EXP 54
59888: PUSH
59889: LD_INT 0
59891: ST_TO_ADDR
// sKamikadze := false ;
59892: LD_ADDR_EXP 62
59896: PUSH
59897: LD_INT 0
59899: ST_TO_ADDR
// sTroll := false ;
59900: LD_ADDR_EXP 63
59904: PUSH
59905: LD_INT 0
59907: ST_TO_ADDR
// sSlow := false ;
59908: LD_ADDR_EXP 64
59912: PUSH
59913: LD_INT 0
59915: ST_TO_ADDR
// sLack := false ;
59916: LD_ADDR_EXP 65
59920: PUSH
59921: LD_INT 0
59923: ST_TO_ADDR
// sTank := false ;
59924: LD_ADDR_EXP 67
59928: PUSH
59929: LD_INT 0
59931: ST_TO_ADDR
// sRemote := false ;
59932: LD_ADDR_EXP 68
59936: PUSH
59937: LD_INT 0
59939: ST_TO_ADDR
// sPowell := false ;
59940: LD_ADDR_EXP 69
59944: PUSH
59945: LD_INT 0
59947: ST_TO_ADDR
// sTeleport := false ;
59948: LD_ADDR_EXP 72
59952: PUSH
59953: LD_INT 0
59955: ST_TO_ADDR
// sOilTower := false ;
59956: LD_ADDR_EXP 74
59960: PUSH
59961: LD_INT 0
59963: ST_TO_ADDR
// sShovel := false ;
59964: LD_ADDR_EXP 75
59968: PUSH
59969: LD_INT 0
59971: ST_TO_ADDR
// sSheik := false ;
59972: LD_ADDR_EXP 76
59976: PUSH
59977: LD_INT 0
59979: ST_TO_ADDR
// sEarthquake := false ;
59980: LD_ADDR_EXP 78
59984: PUSH
59985: LD_INT 0
59987: ST_TO_ADDR
// sAI := false ;
59988: LD_ADDR_EXP 79
59992: PUSH
59993: LD_INT 0
59995: ST_TO_ADDR
// sCargo := false ;
59996: LD_ADDR_EXP 82
60000: PUSH
60001: LD_INT 0
60003: ST_TO_ADDR
// sDLaser := false ;
60004: LD_ADDR_EXP 83
60008: PUSH
60009: LD_INT 0
60011: ST_TO_ADDR
// sExchange := false ;
60012: LD_ADDR_EXP 84
60016: PUSH
60017: LD_INT 0
60019: ST_TO_ADDR
// sFac := false ;
60020: LD_ADDR_EXP 85
60024: PUSH
60025: LD_INT 0
60027: ST_TO_ADDR
// sPower := false ;
60028: LD_ADDR_EXP 86
60032: PUSH
60033: LD_INT 0
60035: ST_TO_ADDR
// sRandom := false ;
60036: LD_ADDR_EXP 87
60040: PUSH
60041: LD_INT 0
60043: ST_TO_ADDR
// sShield := false ;
60044: LD_ADDR_EXP 88
60048: PUSH
60049: LD_INT 0
60051: ST_TO_ADDR
// sTime := false ;
60052: LD_ADDR_EXP 89
60056: PUSH
60057: LD_INT 0
60059: ST_TO_ADDR
// sTools := false ;
60060: LD_ADDR_EXP 90
60064: PUSH
60065: LD_INT 0
60067: ST_TO_ADDR
// sSold := false ;
60068: LD_ADDR_EXP 55
60072: PUSH
60073: LD_INT 0
60075: ST_TO_ADDR
// sDiff := false ;
60076: LD_ADDR_EXP 56
60080: PUSH
60081: LD_INT 0
60083: ST_TO_ADDR
// sFog := false ;
60084: LD_ADDR_EXP 59
60088: PUSH
60089: LD_INT 0
60091: ST_TO_ADDR
// sReset := false ;
60092: LD_ADDR_EXP 60
60096: PUSH
60097: LD_INT 0
60099: ST_TO_ADDR
// sSun := false ;
60100: LD_ADDR_EXP 61
60104: PUSH
60105: LD_INT 0
60107: ST_TO_ADDR
// sTiger := false ;
60108: LD_ADDR_EXP 57
60112: PUSH
60113: LD_INT 0
60115: ST_TO_ADDR
// sBomb := false ;
60116: LD_ADDR_EXP 58
60120: PUSH
60121: LD_INT 0
60123: ST_TO_ADDR
// sWound := false ;
60124: LD_ADDR_EXP 66
60128: PUSH
60129: LD_INT 0
60131: ST_TO_ADDR
// sBetray := false ;
60132: LD_ADDR_EXP 70
60136: PUSH
60137: LD_INT 0
60139: ST_TO_ADDR
// sContamin := false ;
60140: LD_ADDR_EXP 71
60144: PUSH
60145: LD_INT 0
60147: ST_TO_ADDR
// sOil := false ;
60148: LD_ADDR_EXP 73
60152: PUSH
60153: LD_INT 0
60155: ST_TO_ADDR
// sStu := false ;
60156: LD_ADDR_EXP 77
60160: PUSH
60161: LD_INT 0
60163: ST_TO_ADDR
// sBazooka := false ;
60164: LD_ADDR_EXP 80
60168: PUSH
60169: LD_INT 0
60171: ST_TO_ADDR
// sMortar := false ;
60172: LD_ADDR_EXP 81
60176: PUSH
60177: LD_INT 0
60179: ST_TO_ADDR
// sRanger := false ;
60180: LD_ADDR_EXP 91
60184: PUSH
60185: LD_INT 0
60187: ST_TO_ADDR
// sComputer := false ;
60188: LD_ADDR_EXP 92
60192: PUSH
60193: LD_INT 0
60195: ST_TO_ADDR
// s30 := false ;
60196: LD_ADDR_EXP 93
60200: PUSH
60201: LD_INT 0
60203: ST_TO_ADDR
// s60 := false ;
60204: LD_ADDR_EXP 94
60208: PUSH
60209: LD_INT 0
60211: ST_TO_ADDR
// end ;
60212: LD_VAR 0 1
60216: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
60217: LD_INT 0
60219: PPUSH
60220: PPUSH
60221: PPUSH
60222: PPUSH
60223: PPUSH
60224: PPUSH
60225: PPUSH
// result := [ ] ;
60226: LD_ADDR_VAR 0 2
60230: PUSH
60231: EMPTY
60232: ST_TO_ADDR
// if campaign_id = 1 then
60233: LD_OWVAR 69
60237: PUSH
60238: LD_INT 1
60240: EQUAL
60241: IFFALSE 63407
// begin case mission_number of 1 :
60243: LD_OWVAR 70
60247: PUSH
60248: LD_INT 1
60250: DOUBLE
60251: EQUAL
60252: IFTRUE 60256
60254: GO 60332
60256: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
60257: LD_ADDR_VAR 0 2
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: LD_INT 4
60267: PUSH
60268: LD_INT 11
60270: PUSH
60271: LD_INT 12
60273: PUSH
60274: LD_INT 15
60276: PUSH
60277: LD_INT 16
60279: PUSH
60280: LD_INT 22
60282: PUSH
60283: LD_INT 23
60285: PUSH
60286: LD_INT 26
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 101
60302: PUSH
60303: LD_INT 102
60305: PUSH
60306: LD_INT 106
60308: PUSH
60309: LD_INT 116
60311: PUSH
60312: LD_INT 117
60314: PUSH
60315: LD_INT 118
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: ST_TO_ADDR
60330: GO 63405
60332: LD_INT 2
60334: DOUBLE
60335: EQUAL
60336: IFTRUE 60340
60338: GO 60424
60340: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
60341: LD_ADDR_VAR 0 2
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: LD_INT 4
60351: PUSH
60352: LD_INT 11
60354: PUSH
60355: LD_INT 12
60357: PUSH
60358: LD_INT 15
60360: PUSH
60361: LD_INT 16
60363: PUSH
60364: LD_INT 22
60366: PUSH
60367: LD_INT 23
60369: PUSH
60370: LD_INT 26
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 101
60386: PUSH
60387: LD_INT 102
60389: PUSH
60390: LD_INT 105
60392: PUSH
60393: LD_INT 106
60395: PUSH
60396: LD_INT 108
60398: PUSH
60399: LD_INT 116
60401: PUSH
60402: LD_INT 117
60404: PUSH
60405: LD_INT 118
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: ST_TO_ADDR
60422: GO 63405
60424: LD_INT 3
60426: DOUBLE
60427: EQUAL
60428: IFTRUE 60432
60430: GO 60520
60432: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
60433: LD_ADDR_VAR 0 2
60437: PUSH
60438: LD_INT 2
60440: PUSH
60441: LD_INT 4
60443: PUSH
60444: LD_INT 5
60446: PUSH
60447: LD_INT 11
60449: PUSH
60450: LD_INT 12
60452: PUSH
60453: LD_INT 15
60455: PUSH
60456: LD_INT 16
60458: PUSH
60459: LD_INT 22
60461: PUSH
60462: LD_INT 26
60464: PUSH
60465: LD_INT 36
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 101
60482: PUSH
60483: LD_INT 102
60485: PUSH
60486: LD_INT 105
60488: PUSH
60489: LD_INT 106
60491: PUSH
60492: LD_INT 108
60494: PUSH
60495: LD_INT 116
60497: PUSH
60498: LD_INT 117
60500: PUSH
60501: LD_INT 118
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: ST_TO_ADDR
60518: GO 63405
60520: LD_INT 4
60522: DOUBLE
60523: EQUAL
60524: IFTRUE 60528
60526: GO 60624
60528: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60529: LD_ADDR_VAR 0 2
60533: PUSH
60534: LD_INT 2
60536: PUSH
60537: LD_INT 4
60539: PUSH
60540: LD_INT 5
60542: PUSH
60543: LD_INT 8
60545: PUSH
60546: LD_INT 11
60548: PUSH
60549: LD_INT 12
60551: PUSH
60552: LD_INT 15
60554: PUSH
60555: LD_INT 16
60557: PUSH
60558: LD_INT 22
60560: PUSH
60561: LD_INT 23
60563: PUSH
60564: LD_INT 26
60566: PUSH
60567: LD_INT 36
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 101
60586: PUSH
60587: LD_INT 102
60589: PUSH
60590: LD_INT 105
60592: PUSH
60593: LD_INT 106
60595: PUSH
60596: LD_INT 108
60598: PUSH
60599: LD_INT 116
60601: PUSH
60602: LD_INT 117
60604: PUSH
60605: LD_INT 118
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: ST_TO_ADDR
60622: GO 63405
60624: LD_INT 5
60626: DOUBLE
60627: EQUAL
60628: IFTRUE 60632
60630: GO 60744
60632: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60633: LD_ADDR_VAR 0 2
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: LD_INT 4
60643: PUSH
60644: LD_INT 5
60646: PUSH
60647: LD_INT 6
60649: PUSH
60650: LD_INT 8
60652: PUSH
60653: LD_INT 11
60655: PUSH
60656: LD_INT 12
60658: PUSH
60659: LD_INT 15
60661: PUSH
60662: LD_INT 16
60664: PUSH
60665: LD_INT 22
60667: PUSH
60668: LD_INT 23
60670: PUSH
60671: LD_INT 25
60673: PUSH
60674: LD_INT 26
60676: PUSH
60677: LD_INT 36
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 101
60698: PUSH
60699: LD_INT 102
60701: PUSH
60702: LD_INT 105
60704: PUSH
60705: LD_INT 106
60707: PUSH
60708: LD_INT 108
60710: PUSH
60711: LD_INT 109
60713: PUSH
60714: LD_INT 112
60716: PUSH
60717: LD_INT 116
60719: PUSH
60720: LD_INT 117
60722: PUSH
60723: LD_INT 118
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: ST_TO_ADDR
60742: GO 63405
60744: LD_INT 6
60746: DOUBLE
60747: EQUAL
60748: IFTRUE 60752
60750: GO 60884
60752: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60753: LD_ADDR_VAR 0 2
60757: PUSH
60758: LD_INT 2
60760: PUSH
60761: LD_INT 4
60763: PUSH
60764: LD_INT 5
60766: PUSH
60767: LD_INT 6
60769: PUSH
60770: LD_INT 8
60772: PUSH
60773: LD_INT 11
60775: PUSH
60776: LD_INT 12
60778: PUSH
60779: LD_INT 15
60781: PUSH
60782: LD_INT 16
60784: PUSH
60785: LD_INT 20
60787: PUSH
60788: LD_INT 21
60790: PUSH
60791: LD_INT 22
60793: PUSH
60794: LD_INT 23
60796: PUSH
60797: LD_INT 25
60799: PUSH
60800: LD_INT 26
60802: PUSH
60803: LD_INT 30
60805: PUSH
60806: LD_INT 31
60808: PUSH
60809: LD_INT 32
60811: PUSH
60812: LD_INT 36
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 101
60838: PUSH
60839: LD_INT 102
60841: PUSH
60842: LD_INT 105
60844: PUSH
60845: LD_INT 106
60847: PUSH
60848: LD_INT 108
60850: PUSH
60851: LD_INT 109
60853: PUSH
60854: LD_INT 112
60856: PUSH
60857: LD_INT 116
60859: PUSH
60860: LD_INT 117
60862: PUSH
60863: LD_INT 118
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: ST_TO_ADDR
60882: GO 63405
60884: LD_INT 7
60886: DOUBLE
60887: EQUAL
60888: IFTRUE 60892
60890: GO 61004
60892: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60893: LD_ADDR_VAR 0 2
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: LD_INT 4
60903: PUSH
60904: LD_INT 5
60906: PUSH
60907: LD_INT 7
60909: PUSH
60910: LD_INT 11
60912: PUSH
60913: LD_INT 12
60915: PUSH
60916: LD_INT 15
60918: PUSH
60919: LD_INT 16
60921: PUSH
60922: LD_INT 20
60924: PUSH
60925: LD_INT 21
60927: PUSH
60928: LD_INT 22
60930: PUSH
60931: LD_INT 23
60933: PUSH
60934: LD_INT 25
60936: PUSH
60937: LD_INT 26
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 101
60958: PUSH
60959: LD_INT 102
60961: PUSH
60962: LD_INT 103
60964: PUSH
60965: LD_INT 105
60967: PUSH
60968: LD_INT 106
60970: PUSH
60971: LD_INT 108
60973: PUSH
60974: LD_INT 112
60976: PUSH
60977: LD_INT 116
60979: PUSH
60980: LD_INT 117
60982: PUSH
60983: LD_INT 118
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: ST_TO_ADDR
61002: GO 63405
61004: LD_INT 8
61006: DOUBLE
61007: EQUAL
61008: IFTRUE 61012
61010: GO 61152
61012: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
61013: LD_ADDR_VAR 0 2
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: LD_INT 4
61023: PUSH
61024: LD_INT 5
61026: PUSH
61027: LD_INT 6
61029: PUSH
61030: LD_INT 7
61032: PUSH
61033: LD_INT 8
61035: PUSH
61036: LD_INT 11
61038: PUSH
61039: LD_INT 12
61041: PUSH
61042: LD_INT 15
61044: PUSH
61045: LD_INT 16
61047: PUSH
61048: LD_INT 20
61050: PUSH
61051: LD_INT 21
61053: PUSH
61054: LD_INT 22
61056: PUSH
61057: LD_INT 23
61059: PUSH
61060: LD_INT 25
61062: PUSH
61063: LD_INT 26
61065: PUSH
61066: LD_INT 30
61068: PUSH
61069: LD_INT 31
61071: PUSH
61072: LD_INT 32
61074: PUSH
61075: LD_INT 36
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 101
61102: PUSH
61103: LD_INT 102
61105: PUSH
61106: LD_INT 103
61108: PUSH
61109: LD_INT 105
61111: PUSH
61112: LD_INT 106
61114: PUSH
61115: LD_INT 108
61117: PUSH
61118: LD_INT 109
61120: PUSH
61121: LD_INT 112
61123: PUSH
61124: LD_INT 116
61126: PUSH
61127: LD_INT 117
61129: PUSH
61130: LD_INT 118
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: ST_TO_ADDR
61150: GO 63405
61152: LD_INT 9
61154: DOUBLE
61155: EQUAL
61156: IFTRUE 61160
61158: GO 61308
61160: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
61161: LD_ADDR_VAR 0 2
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: LD_INT 4
61171: PUSH
61172: LD_INT 5
61174: PUSH
61175: LD_INT 6
61177: PUSH
61178: LD_INT 7
61180: PUSH
61181: LD_INT 8
61183: PUSH
61184: LD_INT 11
61186: PUSH
61187: LD_INT 12
61189: PUSH
61190: LD_INT 15
61192: PUSH
61193: LD_INT 16
61195: PUSH
61196: LD_INT 20
61198: PUSH
61199: LD_INT 21
61201: PUSH
61202: LD_INT 22
61204: PUSH
61205: LD_INT 23
61207: PUSH
61208: LD_INT 25
61210: PUSH
61211: LD_INT 26
61213: PUSH
61214: LD_INT 28
61216: PUSH
61217: LD_INT 30
61219: PUSH
61220: LD_INT 31
61222: PUSH
61223: LD_INT 32
61225: PUSH
61226: LD_INT 36
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 101
61254: PUSH
61255: LD_INT 102
61257: PUSH
61258: LD_INT 103
61260: PUSH
61261: LD_INT 105
61263: PUSH
61264: LD_INT 106
61266: PUSH
61267: LD_INT 108
61269: PUSH
61270: LD_INT 109
61272: PUSH
61273: LD_INT 112
61275: PUSH
61276: LD_INT 114
61278: PUSH
61279: LD_INT 116
61281: PUSH
61282: LD_INT 117
61284: PUSH
61285: LD_INT 118
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: ST_TO_ADDR
61306: GO 63405
61308: LD_INT 10
61310: DOUBLE
61311: EQUAL
61312: IFTRUE 61316
61314: GO 61512
61316: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
61317: LD_ADDR_VAR 0 2
61321: PUSH
61322: LD_INT 2
61324: PUSH
61325: LD_INT 4
61327: PUSH
61328: LD_INT 5
61330: PUSH
61331: LD_INT 6
61333: PUSH
61334: LD_INT 7
61336: PUSH
61337: LD_INT 8
61339: PUSH
61340: LD_INT 9
61342: PUSH
61343: LD_INT 10
61345: PUSH
61346: LD_INT 11
61348: PUSH
61349: LD_INT 12
61351: PUSH
61352: LD_INT 13
61354: PUSH
61355: LD_INT 14
61357: PUSH
61358: LD_INT 15
61360: PUSH
61361: LD_INT 16
61363: PUSH
61364: LD_INT 17
61366: PUSH
61367: LD_INT 18
61369: PUSH
61370: LD_INT 19
61372: PUSH
61373: LD_INT 20
61375: PUSH
61376: LD_INT 21
61378: PUSH
61379: LD_INT 22
61381: PUSH
61382: LD_INT 23
61384: PUSH
61385: LD_INT 24
61387: PUSH
61388: LD_INT 25
61390: PUSH
61391: LD_INT 26
61393: PUSH
61394: LD_INT 28
61396: PUSH
61397: LD_INT 30
61399: PUSH
61400: LD_INT 31
61402: PUSH
61403: LD_INT 32
61405: PUSH
61406: LD_INT 36
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 101
61442: PUSH
61443: LD_INT 102
61445: PUSH
61446: LD_INT 103
61448: PUSH
61449: LD_INT 104
61451: PUSH
61452: LD_INT 105
61454: PUSH
61455: LD_INT 106
61457: PUSH
61458: LD_INT 107
61460: PUSH
61461: LD_INT 108
61463: PUSH
61464: LD_INT 109
61466: PUSH
61467: LD_INT 110
61469: PUSH
61470: LD_INT 111
61472: PUSH
61473: LD_INT 112
61475: PUSH
61476: LD_INT 114
61478: PUSH
61479: LD_INT 116
61481: PUSH
61482: LD_INT 117
61484: PUSH
61485: LD_INT 118
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: ST_TO_ADDR
61510: GO 63405
61512: LD_INT 11
61514: DOUBLE
61515: EQUAL
61516: IFTRUE 61520
61518: GO 61724
61520: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61521: LD_ADDR_VAR 0 2
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: LD_INT 3
61531: PUSH
61532: LD_INT 4
61534: PUSH
61535: LD_INT 5
61537: PUSH
61538: LD_INT 6
61540: PUSH
61541: LD_INT 7
61543: PUSH
61544: LD_INT 8
61546: PUSH
61547: LD_INT 9
61549: PUSH
61550: LD_INT 10
61552: PUSH
61553: LD_INT 11
61555: PUSH
61556: LD_INT 12
61558: PUSH
61559: LD_INT 13
61561: PUSH
61562: LD_INT 14
61564: PUSH
61565: LD_INT 15
61567: PUSH
61568: LD_INT 16
61570: PUSH
61571: LD_INT 17
61573: PUSH
61574: LD_INT 18
61576: PUSH
61577: LD_INT 19
61579: PUSH
61580: LD_INT 20
61582: PUSH
61583: LD_INT 21
61585: PUSH
61586: LD_INT 22
61588: PUSH
61589: LD_INT 23
61591: PUSH
61592: LD_INT 24
61594: PUSH
61595: LD_INT 25
61597: PUSH
61598: LD_INT 26
61600: PUSH
61601: LD_INT 28
61603: PUSH
61604: LD_INT 30
61606: PUSH
61607: LD_INT 31
61609: PUSH
61610: LD_INT 32
61612: PUSH
61613: LD_INT 34
61615: PUSH
61616: LD_INT 36
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 101
61654: PUSH
61655: LD_INT 102
61657: PUSH
61658: LD_INT 103
61660: PUSH
61661: LD_INT 104
61663: PUSH
61664: LD_INT 105
61666: PUSH
61667: LD_INT 106
61669: PUSH
61670: LD_INT 107
61672: PUSH
61673: LD_INT 108
61675: PUSH
61676: LD_INT 109
61678: PUSH
61679: LD_INT 110
61681: PUSH
61682: LD_INT 111
61684: PUSH
61685: LD_INT 112
61687: PUSH
61688: LD_INT 114
61690: PUSH
61691: LD_INT 116
61693: PUSH
61694: LD_INT 117
61696: PUSH
61697: LD_INT 118
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: ST_TO_ADDR
61722: GO 63405
61724: LD_INT 12
61726: DOUBLE
61727: EQUAL
61728: IFTRUE 61732
61730: GO 61952
61732: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61733: LD_ADDR_VAR 0 2
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: LD_INT 4
61749: PUSH
61750: LD_INT 5
61752: PUSH
61753: LD_INT 6
61755: PUSH
61756: LD_INT 7
61758: PUSH
61759: LD_INT 8
61761: PUSH
61762: LD_INT 9
61764: PUSH
61765: LD_INT 10
61767: PUSH
61768: LD_INT 11
61770: PUSH
61771: LD_INT 12
61773: PUSH
61774: LD_INT 13
61776: PUSH
61777: LD_INT 14
61779: PUSH
61780: LD_INT 15
61782: PUSH
61783: LD_INT 16
61785: PUSH
61786: LD_INT 17
61788: PUSH
61789: LD_INT 18
61791: PUSH
61792: LD_INT 19
61794: PUSH
61795: LD_INT 20
61797: PUSH
61798: LD_INT 21
61800: PUSH
61801: LD_INT 22
61803: PUSH
61804: LD_INT 23
61806: PUSH
61807: LD_INT 24
61809: PUSH
61810: LD_INT 25
61812: PUSH
61813: LD_INT 26
61815: PUSH
61816: LD_INT 27
61818: PUSH
61819: LD_INT 28
61821: PUSH
61822: LD_INT 30
61824: PUSH
61825: LD_INT 31
61827: PUSH
61828: LD_INT 32
61830: PUSH
61831: LD_INT 33
61833: PUSH
61834: LD_INT 34
61836: PUSH
61837: LD_INT 36
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 101
61878: PUSH
61879: LD_INT 102
61881: PUSH
61882: LD_INT 103
61884: PUSH
61885: LD_INT 104
61887: PUSH
61888: LD_INT 105
61890: PUSH
61891: LD_INT 106
61893: PUSH
61894: LD_INT 107
61896: PUSH
61897: LD_INT 108
61899: PUSH
61900: LD_INT 109
61902: PUSH
61903: LD_INT 110
61905: PUSH
61906: LD_INT 111
61908: PUSH
61909: LD_INT 112
61911: PUSH
61912: LD_INT 113
61914: PUSH
61915: LD_INT 114
61917: PUSH
61918: LD_INT 116
61920: PUSH
61921: LD_INT 117
61923: PUSH
61924: LD_INT 118
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: ST_TO_ADDR
61950: GO 63405
61952: LD_INT 13
61954: DOUBLE
61955: EQUAL
61956: IFTRUE 61960
61958: GO 62168
61960: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61961: LD_ADDR_VAR 0 2
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: LD_INT 2
61971: PUSH
61972: LD_INT 3
61974: PUSH
61975: LD_INT 4
61977: PUSH
61978: LD_INT 5
61980: PUSH
61981: LD_INT 8
61983: PUSH
61984: LD_INT 9
61986: PUSH
61987: LD_INT 10
61989: PUSH
61990: LD_INT 11
61992: PUSH
61993: LD_INT 12
61995: PUSH
61996: LD_INT 14
61998: PUSH
61999: LD_INT 15
62001: PUSH
62002: LD_INT 16
62004: PUSH
62005: LD_INT 17
62007: PUSH
62008: LD_INT 18
62010: PUSH
62011: LD_INT 19
62013: PUSH
62014: LD_INT 20
62016: PUSH
62017: LD_INT 21
62019: PUSH
62020: LD_INT 22
62022: PUSH
62023: LD_INT 23
62025: PUSH
62026: LD_INT 24
62028: PUSH
62029: LD_INT 25
62031: PUSH
62032: LD_INT 26
62034: PUSH
62035: LD_INT 27
62037: PUSH
62038: LD_INT 28
62040: PUSH
62041: LD_INT 30
62043: PUSH
62044: LD_INT 31
62046: PUSH
62047: LD_INT 32
62049: PUSH
62050: LD_INT 33
62052: PUSH
62053: LD_INT 34
62055: PUSH
62056: LD_INT 36
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 101
62094: PUSH
62095: LD_INT 102
62097: PUSH
62098: LD_INT 103
62100: PUSH
62101: LD_INT 104
62103: PUSH
62104: LD_INT 105
62106: PUSH
62107: LD_INT 106
62109: PUSH
62110: LD_INT 107
62112: PUSH
62113: LD_INT 108
62115: PUSH
62116: LD_INT 109
62118: PUSH
62119: LD_INT 110
62121: PUSH
62122: LD_INT 111
62124: PUSH
62125: LD_INT 112
62127: PUSH
62128: LD_INT 113
62130: PUSH
62131: LD_INT 114
62133: PUSH
62134: LD_INT 116
62136: PUSH
62137: LD_INT 117
62139: PUSH
62140: LD_INT 118
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: ST_TO_ADDR
62166: GO 63405
62168: LD_INT 14
62170: DOUBLE
62171: EQUAL
62172: IFTRUE 62176
62174: GO 62400
62176: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
62177: LD_ADDR_VAR 0 2
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: LD_INT 2
62187: PUSH
62188: LD_INT 3
62190: PUSH
62191: LD_INT 4
62193: PUSH
62194: LD_INT 5
62196: PUSH
62197: LD_INT 6
62199: PUSH
62200: LD_INT 7
62202: PUSH
62203: LD_INT 8
62205: PUSH
62206: LD_INT 9
62208: PUSH
62209: LD_INT 10
62211: PUSH
62212: LD_INT 11
62214: PUSH
62215: LD_INT 12
62217: PUSH
62218: LD_INT 13
62220: PUSH
62221: LD_INT 14
62223: PUSH
62224: LD_INT 15
62226: PUSH
62227: LD_INT 16
62229: PUSH
62230: LD_INT 17
62232: PUSH
62233: LD_INT 18
62235: PUSH
62236: LD_INT 19
62238: PUSH
62239: LD_INT 20
62241: PUSH
62242: LD_INT 21
62244: PUSH
62245: LD_INT 22
62247: PUSH
62248: LD_INT 23
62250: PUSH
62251: LD_INT 24
62253: PUSH
62254: LD_INT 25
62256: PUSH
62257: LD_INT 26
62259: PUSH
62260: LD_INT 27
62262: PUSH
62263: LD_INT 28
62265: PUSH
62266: LD_INT 29
62268: PUSH
62269: LD_INT 30
62271: PUSH
62272: LD_INT 31
62274: PUSH
62275: LD_INT 32
62277: PUSH
62278: LD_INT 33
62280: PUSH
62281: LD_INT 34
62283: PUSH
62284: LD_INT 36
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 101
62326: PUSH
62327: LD_INT 102
62329: PUSH
62330: LD_INT 103
62332: PUSH
62333: LD_INT 104
62335: PUSH
62336: LD_INT 105
62338: PUSH
62339: LD_INT 106
62341: PUSH
62342: LD_INT 107
62344: PUSH
62345: LD_INT 108
62347: PUSH
62348: LD_INT 109
62350: PUSH
62351: LD_INT 110
62353: PUSH
62354: LD_INT 111
62356: PUSH
62357: LD_INT 112
62359: PUSH
62360: LD_INT 113
62362: PUSH
62363: LD_INT 114
62365: PUSH
62366: LD_INT 116
62368: PUSH
62369: LD_INT 117
62371: PUSH
62372: LD_INT 118
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: ST_TO_ADDR
62398: GO 63405
62400: LD_INT 15
62402: DOUBLE
62403: EQUAL
62404: IFTRUE 62408
62406: GO 62632
62408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
62409: LD_ADDR_VAR 0 2
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: LD_INT 4
62425: PUSH
62426: LD_INT 5
62428: PUSH
62429: LD_INT 6
62431: PUSH
62432: LD_INT 7
62434: PUSH
62435: LD_INT 8
62437: PUSH
62438: LD_INT 9
62440: PUSH
62441: LD_INT 10
62443: PUSH
62444: LD_INT 11
62446: PUSH
62447: LD_INT 12
62449: PUSH
62450: LD_INT 13
62452: PUSH
62453: LD_INT 14
62455: PUSH
62456: LD_INT 15
62458: PUSH
62459: LD_INT 16
62461: PUSH
62462: LD_INT 17
62464: PUSH
62465: LD_INT 18
62467: PUSH
62468: LD_INT 19
62470: PUSH
62471: LD_INT 20
62473: PUSH
62474: LD_INT 21
62476: PUSH
62477: LD_INT 22
62479: PUSH
62480: LD_INT 23
62482: PUSH
62483: LD_INT 24
62485: PUSH
62486: LD_INT 25
62488: PUSH
62489: LD_INT 26
62491: PUSH
62492: LD_INT 27
62494: PUSH
62495: LD_INT 28
62497: PUSH
62498: LD_INT 29
62500: PUSH
62501: LD_INT 30
62503: PUSH
62504: LD_INT 31
62506: PUSH
62507: LD_INT 32
62509: PUSH
62510: LD_INT 33
62512: PUSH
62513: LD_INT 34
62515: PUSH
62516: LD_INT 36
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 101
62558: PUSH
62559: LD_INT 102
62561: PUSH
62562: LD_INT 103
62564: PUSH
62565: LD_INT 104
62567: PUSH
62568: LD_INT 105
62570: PUSH
62571: LD_INT 106
62573: PUSH
62574: LD_INT 107
62576: PUSH
62577: LD_INT 108
62579: PUSH
62580: LD_INT 109
62582: PUSH
62583: LD_INT 110
62585: PUSH
62586: LD_INT 111
62588: PUSH
62589: LD_INT 112
62591: PUSH
62592: LD_INT 113
62594: PUSH
62595: LD_INT 114
62597: PUSH
62598: LD_INT 116
62600: PUSH
62601: LD_INT 117
62603: PUSH
62604: LD_INT 118
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: ST_TO_ADDR
62630: GO 63405
62632: LD_INT 16
62634: DOUBLE
62635: EQUAL
62636: IFTRUE 62640
62638: GO 62776
62640: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62641: LD_ADDR_VAR 0 2
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: LD_INT 4
62651: PUSH
62652: LD_INT 5
62654: PUSH
62655: LD_INT 7
62657: PUSH
62658: LD_INT 11
62660: PUSH
62661: LD_INT 12
62663: PUSH
62664: LD_INT 15
62666: PUSH
62667: LD_INT 16
62669: PUSH
62670: LD_INT 20
62672: PUSH
62673: LD_INT 21
62675: PUSH
62676: LD_INT 22
62678: PUSH
62679: LD_INT 23
62681: PUSH
62682: LD_INT 25
62684: PUSH
62685: LD_INT 26
62687: PUSH
62688: LD_INT 30
62690: PUSH
62691: LD_INT 31
62693: PUSH
62694: LD_INT 32
62696: PUSH
62697: LD_INT 33
62699: PUSH
62700: LD_INT 34
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 101
62726: PUSH
62727: LD_INT 102
62729: PUSH
62730: LD_INT 103
62732: PUSH
62733: LD_INT 106
62735: PUSH
62736: LD_INT 108
62738: PUSH
62739: LD_INT 112
62741: PUSH
62742: LD_INT 113
62744: PUSH
62745: LD_INT 114
62747: PUSH
62748: LD_INT 116
62750: PUSH
62751: LD_INT 117
62753: PUSH
62754: LD_INT 118
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: ST_TO_ADDR
62774: GO 63405
62776: LD_INT 17
62778: DOUBLE
62779: EQUAL
62780: IFTRUE 62784
62782: GO 63008
62784: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62785: LD_ADDR_VAR 0 2
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: LD_INT 3
62798: PUSH
62799: LD_INT 4
62801: PUSH
62802: LD_INT 5
62804: PUSH
62805: LD_INT 6
62807: PUSH
62808: LD_INT 7
62810: PUSH
62811: LD_INT 8
62813: PUSH
62814: LD_INT 9
62816: PUSH
62817: LD_INT 10
62819: PUSH
62820: LD_INT 11
62822: PUSH
62823: LD_INT 12
62825: PUSH
62826: LD_INT 13
62828: PUSH
62829: LD_INT 14
62831: PUSH
62832: LD_INT 15
62834: PUSH
62835: LD_INT 16
62837: PUSH
62838: LD_INT 17
62840: PUSH
62841: LD_INT 18
62843: PUSH
62844: LD_INT 19
62846: PUSH
62847: LD_INT 20
62849: PUSH
62850: LD_INT 21
62852: PUSH
62853: LD_INT 22
62855: PUSH
62856: LD_INT 23
62858: PUSH
62859: LD_INT 24
62861: PUSH
62862: LD_INT 25
62864: PUSH
62865: LD_INT 26
62867: PUSH
62868: LD_INT 27
62870: PUSH
62871: LD_INT 28
62873: PUSH
62874: LD_INT 29
62876: PUSH
62877: LD_INT 30
62879: PUSH
62880: LD_INT 31
62882: PUSH
62883: LD_INT 32
62885: PUSH
62886: LD_INT 33
62888: PUSH
62889: LD_INT 34
62891: PUSH
62892: LD_INT 36
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 101
62934: PUSH
62935: LD_INT 102
62937: PUSH
62938: LD_INT 103
62940: PUSH
62941: LD_INT 104
62943: PUSH
62944: LD_INT 105
62946: PUSH
62947: LD_INT 106
62949: PUSH
62950: LD_INT 107
62952: PUSH
62953: LD_INT 108
62955: PUSH
62956: LD_INT 109
62958: PUSH
62959: LD_INT 110
62961: PUSH
62962: LD_INT 111
62964: PUSH
62965: LD_INT 112
62967: PUSH
62968: LD_INT 113
62970: PUSH
62971: LD_INT 114
62973: PUSH
62974: LD_INT 116
62976: PUSH
62977: LD_INT 117
62979: PUSH
62980: LD_INT 118
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: ST_TO_ADDR
63006: GO 63405
63008: LD_INT 18
63010: DOUBLE
63011: EQUAL
63012: IFTRUE 63016
63014: GO 63164
63016: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
63017: LD_ADDR_VAR 0 2
63021: PUSH
63022: LD_INT 2
63024: PUSH
63025: LD_INT 4
63027: PUSH
63028: LD_INT 5
63030: PUSH
63031: LD_INT 7
63033: PUSH
63034: LD_INT 11
63036: PUSH
63037: LD_INT 12
63039: PUSH
63040: LD_INT 15
63042: PUSH
63043: LD_INT 16
63045: PUSH
63046: LD_INT 20
63048: PUSH
63049: LD_INT 21
63051: PUSH
63052: LD_INT 22
63054: PUSH
63055: LD_INT 23
63057: PUSH
63058: LD_INT 25
63060: PUSH
63061: LD_INT 26
63063: PUSH
63064: LD_INT 30
63066: PUSH
63067: LD_INT 31
63069: PUSH
63070: LD_INT 32
63072: PUSH
63073: LD_INT 33
63075: PUSH
63076: LD_INT 34
63078: PUSH
63079: LD_INT 35
63081: PUSH
63082: LD_INT 36
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 101
63110: PUSH
63111: LD_INT 102
63113: PUSH
63114: LD_INT 103
63116: PUSH
63117: LD_INT 106
63119: PUSH
63120: LD_INT 108
63122: PUSH
63123: LD_INT 112
63125: PUSH
63126: LD_INT 113
63128: PUSH
63129: LD_INT 114
63131: PUSH
63132: LD_INT 115
63134: PUSH
63135: LD_INT 116
63137: PUSH
63138: LD_INT 117
63140: PUSH
63141: LD_INT 118
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: ST_TO_ADDR
63162: GO 63405
63164: LD_INT 19
63166: DOUBLE
63167: EQUAL
63168: IFTRUE 63172
63170: GO 63404
63172: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
63173: LD_ADDR_VAR 0 2
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 3
63186: PUSH
63187: LD_INT 4
63189: PUSH
63190: LD_INT 5
63192: PUSH
63193: LD_INT 6
63195: PUSH
63196: LD_INT 7
63198: PUSH
63199: LD_INT 8
63201: PUSH
63202: LD_INT 9
63204: PUSH
63205: LD_INT 10
63207: PUSH
63208: LD_INT 11
63210: PUSH
63211: LD_INT 12
63213: PUSH
63214: LD_INT 13
63216: PUSH
63217: LD_INT 14
63219: PUSH
63220: LD_INT 15
63222: PUSH
63223: LD_INT 16
63225: PUSH
63226: LD_INT 17
63228: PUSH
63229: LD_INT 18
63231: PUSH
63232: LD_INT 19
63234: PUSH
63235: LD_INT 20
63237: PUSH
63238: LD_INT 21
63240: PUSH
63241: LD_INT 22
63243: PUSH
63244: LD_INT 23
63246: PUSH
63247: LD_INT 24
63249: PUSH
63250: LD_INT 25
63252: PUSH
63253: LD_INT 26
63255: PUSH
63256: LD_INT 27
63258: PUSH
63259: LD_INT 28
63261: PUSH
63262: LD_INT 29
63264: PUSH
63265: LD_INT 30
63267: PUSH
63268: LD_INT 31
63270: PUSH
63271: LD_INT 32
63273: PUSH
63274: LD_INT 33
63276: PUSH
63277: LD_INT 34
63279: PUSH
63280: LD_INT 35
63282: PUSH
63283: LD_INT 36
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 101
63326: PUSH
63327: LD_INT 102
63329: PUSH
63330: LD_INT 103
63332: PUSH
63333: LD_INT 104
63335: PUSH
63336: LD_INT 105
63338: PUSH
63339: LD_INT 106
63341: PUSH
63342: LD_INT 107
63344: PUSH
63345: LD_INT 108
63347: PUSH
63348: LD_INT 109
63350: PUSH
63351: LD_INT 110
63353: PUSH
63354: LD_INT 111
63356: PUSH
63357: LD_INT 112
63359: PUSH
63360: LD_INT 113
63362: PUSH
63363: LD_INT 114
63365: PUSH
63366: LD_INT 115
63368: PUSH
63369: LD_INT 116
63371: PUSH
63372: LD_INT 117
63374: PUSH
63375: LD_INT 118
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: ST_TO_ADDR
63402: GO 63405
63404: POP
// end else
63405: GO 63636
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
63407: LD_ADDR_VAR 0 2
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: LD_INT 3
63420: PUSH
63421: LD_INT 4
63423: PUSH
63424: LD_INT 5
63426: PUSH
63427: LD_INT 6
63429: PUSH
63430: LD_INT 7
63432: PUSH
63433: LD_INT 8
63435: PUSH
63436: LD_INT 9
63438: PUSH
63439: LD_INT 10
63441: PUSH
63442: LD_INT 11
63444: PUSH
63445: LD_INT 12
63447: PUSH
63448: LD_INT 13
63450: PUSH
63451: LD_INT 14
63453: PUSH
63454: LD_INT 15
63456: PUSH
63457: LD_INT 16
63459: PUSH
63460: LD_INT 17
63462: PUSH
63463: LD_INT 18
63465: PUSH
63466: LD_INT 19
63468: PUSH
63469: LD_INT 20
63471: PUSH
63472: LD_INT 21
63474: PUSH
63475: LD_INT 22
63477: PUSH
63478: LD_INT 23
63480: PUSH
63481: LD_INT 24
63483: PUSH
63484: LD_INT 25
63486: PUSH
63487: LD_INT 26
63489: PUSH
63490: LD_INT 27
63492: PUSH
63493: LD_INT 28
63495: PUSH
63496: LD_INT 29
63498: PUSH
63499: LD_INT 30
63501: PUSH
63502: LD_INT 31
63504: PUSH
63505: LD_INT 32
63507: PUSH
63508: LD_INT 33
63510: PUSH
63511: LD_INT 34
63513: PUSH
63514: LD_INT 35
63516: PUSH
63517: LD_INT 36
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 101
63560: PUSH
63561: LD_INT 102
63563: PUSH
63564: LD_INT 103
63566: PUSH
63567: LD_INT 104
63569: PUSH
63570: LD_INT 105
63572: PUSH
63573: LD_INT 106
63575: PUSH
63576: LD_INT 107
63578: PUSH
63579: LD_INT 108
63581: PUSH
63582: LD_INT 109
63584: PUSH
63585: LD_INT 110
63587: PUSH
63588: LD_INT 111
63590: PUSH
63591: LD_INT 112
63593: PUSH
63594: LD_INT 113
63596: PUSH
63597: LD_INT 114
63599: PUSH
63600: LD_INT 115
63602: PUSH
63603: LD_INT 116
63605: PUSH
63606: LD_INT 117
63608: PUSH
63609: LD_INT 118
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: ST_TO_ADDR
// if result then
63636: LD_VAR 0 2
63640: IFFALSE 64426
// begin normal :=  ;
63642: LD_ADDR_VAR 0 5
63646: PUSH
63647: LD_STRING 
63649: ST_TO_ADDR
// hardcore :=  ;
63650: LD_ADDR_VAR 0 6
63654: PUSH
63655: LD_STRING 
63657: ST_TO_ADDR
// active :=  ;
63658: LD_ADDR_VAR 0 7
63662: PUSH
63663: LD_STRING 
63665: ST_TO_ADDR
// for i = 1 to normalCounter do
63666: LD_ADDR_VAR 0 8
63670: PUSH
63671: DOUBLE
63672: LD_INT 1
63674: DEC
63675: ST_TO_ADDR
63676: LD_EXP 39
63680: PUSH
63681: FOR_TO
63682: IFFALSE 63783
// begin tmp := 0 ;
63684: LD_ADDR_VAR 0 3
63688: PUSH
63689: LD_STRING 0
63691: ST_TO_ADDR
// if result [ 1 ] then
63692: LD_VAR 0 2
63696: PUSH
63697: LD_INT 1
63699: ARRAY
63700: IFFALSE 63765
// if result [ 1 ] [ 1 ] = i then
63702: LD_VAR 0 2
63706: PUSH
63707: LD_INT 1
63709: ARRAY
63710: PUSH
63711: LD_INT 1
63713: ARRAY
63714: PUSH
63715: LD_VAR 0 8
63719: EQUAL
63720: IFFALSE 63765
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63722: LD_ADDR_VAR 0 2
63726: PUSH
63727: LD_VAR 0 2
63731: PPUSH
63732: LD_INT 1
63734: PPUSH
63735: LD_VAR 0 2
63739: PUSH
63740: LD_INT 1
63742: ARRAY
63743: PPUSH
63744: LD_INT 1
63746: PPUSH
63747: CALL_OW 3
63751: PPUSH
63752: CALL_OW 1
63756: ST_TO_ADDR
// tmp := 1 ;
63757: LD_ADDR_VAR 0 3
63761: PUSH
63762: LD_STRING 1
63764: ST_TO_ADDR
// end ; normal := normal & tmp ;
63765: LD_ADDR_VAR 0 5
63769: PUSH
63770: LD_VAR 0 5
63774: PUSH
63775: LD_VAR 0 3
63779: STR
63780: ST_TO_ADDR
// end ;
63781: GO 63681
63783: POP
63784: POP
// for i = 1 to hardcoreCounter do
63785: LD_ADDR_VAR 0 8
63789: PUSH
63790: DOUBLE
63791: LD_INT 1
63793: DEC
63794: ST_TO_ADDR
63795: LD_EXP 40
63799: PUSH
63800: FOR_TO
63801: IFFALSE 63906
// begin tmp := 0 ;
63803: LD_ADDR_VAR 0 3
63807: PUSH
63808: LD_STRING 0
63810: ST_TO_ADDR
// if result [ 2 ] then
63811: LD_VAR 0 2
63815: PUSH
63816: LD_INT 2
63818: ARRAY
63819: IFFALSE 63888
// if result [ 2 ] [ 1 ] = 100 + i then
63821: LD_VAR 0 2
63825: PUSH
63826: LD_INT 2
63828: ARRAY
63829: PUSH
63830: LD_INT 1
63832: ARRAY
63833: PUSH
63834: LD_INT 100
63836: PUSH
63837: LD_VAR 0 8
63841: PLUS
63842: EQUAL
63843: IFFALSE 63888
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63845: LD_ADDR_VAR 0 2
63849: PUSH
63850: LD_VAR 0 2
63854: PPUSH
63855: LD_INT 2
63857: PPUSH
63858: LD_VAR 0 2
63862: PUSH
63863: LD_INT 2
63865: ARRAY
63866: PPUSH
63867: LD_INT 1
63869: PPUSH
63870: CALL_OW 3
63874: PPUSH
63875: CALL_OW 1
63879: ST_TO_ADDR
// tmp := 1 ;
63880: LD_ADDR_VAR 0 3
63884: PUSH
63885: LD_STRING 1
63887: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63888: LD_ADDR_VAR 0 6
63892: PUSH
63893: LD_VAR 0 6
63897: PUSH
63898: LD_VAR 0 3
63902: STR
63903: ST_TO_ADDR
// end ;
63904: GO 63800
63906: POP
63907: POP
// if isGameLoad then
63908: LD_VAR 0 1
63912: IFFALSE 64387
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63914: LD_ADDR_VAR 0 4
63918: PUSH
63919: LD_EXP 43
63923: PUSH
63924: LD_EXP 42
63928: PUSH
63929: LD_EXP 44
63933: PUSH
63934: LD_EXP 41
63938: PUSH
63939: LD_EXP 45
63943: PUSH
63944: LD_EXP 46
63948: PUSH
63949: LD_EXP 47
63953: PUSH
63954: LD_EXP 48
63958: PUSH
63959: LD_EXP 49
63963: PUSH
63964: LD_EXP 50
63968: PUSH
63969: LD_EXP 51
63973: PUSH
63974: LD_EXP 52
63978: PUSH
63979: LD_EXP 53
63983: PUSH
63984: LD_EXP 54
63988: PUSH
63989: LD_EXP 62
63993: PUSH
63994: LD_EXP 63
63998: PUSH
63999: LD_EXP 64
64003: PUSH
64004: LD_EXP 65
64008: PUSH
64009: LD_EXP 67
64013: PUSH
64014: LD_EXP 68
64018: PUSH
64019: LD_EXP 69
64023: PUSH
64024: LD_EXP 72
64028: PUSH
64029: LD_EXP 74
64033: PUSH
64034: LD_EXP 75
64038: PUSH
64039: LD_EXP 76
64043: PUSH
64044: LD_EXP 78
64048: PUSH
64049: LD_EXP 79
64053: PUSH
64054: LD_EXP 82
64058: PUSH
64059: LD_EXP 83
64063: PUSH
64064: LD_EXP 84
64068: PUSH
64069: LD_EXP 85
64073: PUSH
64074: LD_EXP 86
64078: PUSH
64079: LD_EXP 87
64083: PUSH
64084: LD_EXP 88
64088: PUSH
64089: LD_EXP 89
64093: PUSH
64094: LD_EXP 90
64098: PUSH
64099: LD_EXP 55
64103: PUSH
64104: LD_EXP 56
64108: PUSH
64109: LD_EXP 59
64113: PUSH
64114: LD_EXP 60
64118: PUSH
64119: LD_EXP 61
64123: PUSH
64124: LD_EXP 57
64128: PUSH
64129: LD_EXP 58
64133: PUSH
64134: LD_EXP 66
64138: PUSH
64139: LD_EXP 70
64143: PUSH
64144: LD_EXP 71
64148: PUSH
64149: LD_EXP 73
64153: PUSH
64154: LD_EXP 77
64158: PUSH
64159: LD_EXP 80
64163: PUSH
64164: LD_EXP 81
64168: PUSH
64169: LD_EXP 91
64173: PUSH
64174: LD_EXP 92
64178: PUSH
64179: LD_EXP 93
64183: PUSH
64184: LD_EXP 94
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: ST_TO_ADDR
// tmp :=  ;
64245: LD_ADDR_VAR 0 3
64249: PUSH
64250: LD_STRING 
64252: ST_TO_ADDR
// for i = 1 to normalCounter do
64253: LD_ADDR_VAR 0 8
64257: PUSH
64258: DOUBLE
64259: LD_INT 1
64261: DEC
64262: ST_TO_ADDR
64263: LD_EXP 39
64267: PUSH
64268: FOR_TO
64269: IFFALSE 64305
// begin if flags [ i ] then
64271: LD_VAR 0 4
64275: PUSH
64276: LD_VAR 0 8
64280: ARRAY
64281: IFFALSE 64303
// tmp := tmp & i & ; ;
64283: LD_ADDR_VAR 0 3
64287: PUSH
64288: LD_VAR 0 3
64292: PUSH
64293: LD_VAR 0 8
64297: STR
64298: PUSH
64299: LD_STRING ;
64301: STR
64302: ST_TO_ADDR
// end ;
64303: GO 64268
64305: POP
64306: POP
// for i = 1 to hardcoreCounter do
64307: LD_ADDR_VAR 0 8
64311: PUSH
64312: DOUBLE
64313: LD_INT 1
64315: DEC
64316: ST_TO_ADDR
64317: LD_EXP 40
64321: PUSH
64322: FOR_TO
64323: IFFALSE 64369
// begin if flags [ normalCounter + i ] then
64325: LD_VAR 0 4
64329: PUSH
64330: LD_EXP 39
64334: PUSH
64335: LD_VAR 0 8
64339: PLUS
64340: ARRAY
64341: IFFALSE 64367
// tmp := tmp & ( 100 + i ) & ; ;
64343: LD_ADDR_VAR 0 3
64347: PUSH
64348: LD_VAR 0 3
64352: PUSH
64353: LD_INT 100
64355: PUSH
64356: LD_VAR 0 8
64360: PLUS
64361: STR
64362: PUSH
64363: LD_STRING ;
64365: STR
64366: ST_TO_ADDR
// end ;
64367: GO 64322
64369: POP
64370: POP
// if tmp then
64371: LD_VAR 0 3
64375: IFFALSE 64387
// active := tmp ;
64377: LD_ADDR_VAR 0 7
64381: PUSH
64382: LD_VAR 0 3
64386: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
64387: LD_STRING getStreamItemsFromMission("
64389: PUSH
64390: LD_VAR 0 5
64394: STR
64395: PUSH
64396: LD_STRING ","
64398: STR
64399: PUSH
64400: LD_VAR 0 6
64404: STR
64405: PUSH
64406: LD_STRING ","
64408: STR
64409: PUSH
64410: LD_VAR 0 7
64414: STR
64415: PUSH
64416: LD_STRING ")
64418: STR
64419: PPUSH
64420: CALL_OW 559
// end else
64424: GO 64433
// ToLua ( getStreamItemsFromMission("","","") ) ;
64426: LD_STRING getStreamItemsFromMission("","","")
64428: PPUSH
64429: CALL_OW 559
// end ;
64433: LD_VAR 0 2
64437: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64438: LD_EXP 38
64442: PUSH
64443: LD_EXP 43
64447: AND
64448: IFFALSE 64572
64450: GO 64452
64452: DISABLE
64453: LD_INT 0
64455: PPUSH
64456: PPUSH
// begin enable ;
64457: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64458: LD_ADDR_VAR 0 2
64462: PUSH
64463: LD_INT 22
64465: PUSH
64466: LD_OWVAR 2
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 2
64477: PUSH
64478: LD_INT 34
64480: PUSH
64481: LD_INT 7
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 34
64490: PUSH
64491: LD_INT 45
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 34
64500: PUSH
64501: LD_INT 28
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 34
64510: PUSH
64511: LD_INT 47
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PPUSH
64529: CALL_OW 69
64533: ST_TO_ADDR
// if not tmp then
64534: LD_VAR 0 2
64538: NOT
64539: IFFALSE 64543
// exit ;
64541: GO 64572
// for i in tmp do
64543: LD_ADDR_VAR 0 1
64547: PUSH
64548: LD_VAR 0 2
64552: PUSH
64553: FOR_IN
64554: IFFALSE 64570
// begin SetLives ( i , 0 ) ;
64556: LD_VAR 0 1
64560: PPUSH
64561: LD_INT 0
64563: PPUSH
64564: CALL_OW 234
// end ;
64568: GO 64553
64570: POP
64571: POP
// end ;
64572: PPOPN 2
64574: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64575: LD_EXP 38
64579: PUSH
64580: LD_EXP 44
64584: AND
64585: IFFALSE 64669
64587: GO 64589
64589: DISABLE
64590: LD_INT 0
64592: PPUSH
64593: PPUSH
// begin enable ;
64594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64595: LD_ADDR_VAR 0 2
64599: PUSH
64600: LD_INT 22
64602: PUSH
64603: LD_OWVAR 2
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 32
64614: PUSH
64615: LD_INT 3
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PPUSH
64626: CALL_OW 69
64630: ST_TO_ADDR
// if not tmp then
64631: LD_VAR 0 2
64635: NOT
64636: IFFALSE 64640
// exit ;
64638: GO 64669
// for i in tmp do
64640: LD_ADDR_VAR 0 1
64644: PUSH
64645: LD_VAR 0 2
64649: PUSH
64650: FOR_IN
64651: IFFALSE 64667
// begin SetLives ( i , 0 ) ;
64653: LD_VAR 0 1
64657: PPUSH
64658: LD_INT 0
64660: PPUSH
64661: CALL_OW 234
// end ;
64665: GO 64650
64667: POP
64668: POP
// end ;
64669: PPOPN 2
64671: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64672: LD_EXP 38
64676: PUSH
64677: LD_EXP 41
64681: AND
64682: IFFALSE 64775
64684: GO 64686
64686: DISABLE
64687: LD_INT 0
64689: PPUSH
// begin enable ;
64690: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64691: LD_ADDR_VAR 0 1
64695: PUSH
64696: LD_INT 22
64698: PUSH
64699: LD_OWVAR 2
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 2
64710: PUSH
64711: LD_INT 25
64713: PUSH
64714: LD_INT 5
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 25
64723: PUSH
64724: LD_INT 9
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 25
64733: PUSH
64734: LD_INT 8
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PPUSH
64751: CALL_OW 69
64755: PUSH
64756: FOR_IN
64757: IFFALSE 64773
// begin SetClass ( i , 1 ) ;
64759: LD_VAR 0 1
64763: PPUSH
64764: LD_INT 1
64766: PPUSH
64767: CALL_OW 336
// end ;
64771: GO 64756
64773: POP
64774: POP
// end ;
64775: PPOPN 1
64777: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64778: LD_EXP 38
64782: PUSH
64783: LD_EXP 42
64787: AND
64788: PUSH
64789: LD_OWVAR 65
64793: PUSH
64794: LD_INT 7
64796: LESS
64797: AND
64798: IFFALSE 64812
64800: GO 64802
64802: DISABLE
// begin enable ;
64803: ENABLE
// game_speed := 7 ;
64804: LD_ADDR_OWVAR 65
64808: PUSH
64809: LD_INT 7
64811: ST_TO_ADDR
// end ;
64812: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64813: LD_EXP 38
64817: PUSH
64818: LD_EXP 45
64822: AND
64823: IFFALSE 65025
64825: GO 64827
64827: DISABLE
64828: LD_INT 0
64830: PPUSH
64831: PPUSH
64832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64833: LD_ADDR_VAR 0 3
64837: PUSH
64838: LD_INT 81
64840: PUSH
64841: LD_OWVAR 2
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 21
64852: PUSH
64853: LD_INT 1
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PPUSH
64864: CALL_OW 69
64868: ST_TO_ADDR
// if not tmp then
64869: LD_VAR 0 3
64873: NOT
64874: IFFALSE 64878
// exit ;
64876: GO 65025
// if tmp > 5 then
64878: LD_VAR 0 3
64882: PUSH
64883: LD_INT 5
64885: GREATER
64886: IFFALSE 64898
// k := 5 else
64888: LD_ADDR_VAR 0 2
64892: PUSH
64893: LD_INT 5
64895: ST_TO_ADDR
64896: GO 64908
// k := tmp ;
64898: LD_ADDR_VAR 0 2
64902: PUSH
64903: LD_VAR 0 3
64907: ST_TO_ADDR
// for i := 1 to k do
64908: LD_ADDR_VAR 0 1
64912: PUSH
64913: DOUBLE
64914: LD_INT 1
64916: DEC
64917: ST_TO_ADDR
64918: LD_VAR 0 2
64922: PUSH
64923: FOR_TO
64924: IFFALSE 65023
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64926: LD_VAR 0 3
64930: PUSH
64931: LD_VAR 0 1
64935: ARRAY
64936: PPUSH
64937: LD_VAR 0 1
64941: PUSH
64942: LD_INT 4
64944: MOD
64945: PUSH
64946: LD_INT 1
64948: PLUS
64949: PPUSH
64950: CALL_OW 259
64954: PUSH
64955: LD_INT 10
64957: LESS
64958: IFFALSE 65021
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64960: LD_VAR 0 3
64964: PUSH
64965: LD_VAR 0 1
64969: ARRAY
64970: PPUSH
64971: LD_VAR 0 1
64975: PUSH
64976: LD_INT 4
64978: MOD
64979: PUSH
64980: LD_INT 1
64982: PLUS
64983: PPUSH
64984: LD_VAR 0 3
64988: PUSH
64989: LD_VAR 0 1
64993: ARRAY
64994: PPUSH
64995: LD_VAR 0 1
64999: PUSH
65000: LD_INT 4
65002: MOD
65003: PUSH
65004: LD_INT 1
65006: PLUS
65007: PPUSH
65008: CALL_OW 259
65012: PUSH
65013: LD_INT 1
65015: PLUS
65016: PPUSH
65017: CALL_OW 237
65021: GO 64923
65023: POP
65024: POP
// end ;
65025: PPOPN 3
65027: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
65028: LD_EXP 38
65032: PUSH
65033: LD_EXP 46
65037: AND
65038: IFFALSE 65058
65040: GO 65042
65042: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
65043: LD_INT 4
65045: PPUSH
65046: LD_OWVAR 2
65050: PPUSH
65051: LD_INT 0
65053: PPUSH
65054: CALL_OW 324
65058: END
// every 0 0$1 trigger StreamModeActive and sShovel do
65059: LD_EXP 38
65063: PUSH
65064: LD_EXP 75
65068: AND
65069: IFFALSE 65089
65071: GO 65073
65073: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
65074: LD_INT 19
65076: PPUSH
65077: LD_OWVAR 2
65081: PPUSH
65082: LD_INT 0
65084: PPUSH
65085: CALL_OW 324
65089: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
65090: LD_EXP 38
65094: PUSH
65095: LD_EXP 47
65099: AND
65100: IFFALSE 65202
65102: GO 65104
65104: DISABLE
65105: LD_INT 0
65107: PPUSH
65108: PPUSH
// begin enable ;
65109: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
65110: LD_ADDR_VAR 0 2
65114: PUSH
65115: LD_INT 22
65117: PUSH
65118: LD_OWVAR 2
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 2
65129: PUSH
65130: LD_INT 34
65132: PUSH
65133: LD_INT 11
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 34
65142: PUSH
65143: LD_INT 30
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: LIST
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PPUSH
65159: CALL_OW 69
65163: ST_TO_ADDR
// if not tmp then
65164: LD_VAR 0 2
65168: NOT
65169: IFFALSE 65173
// exit ;
65171: GO 65202
// for i in tmp do
65173: LD_ADDR_VAR 0 1
65177: PUSH
65178: LD_VAR 0 2
65182: PUSH
65183: FOR_IN
65184: IFFALSE 65200
// begin SetLives ( i , 0 ) ;
65186: LD_VAR 0 1
65190: PPUSH
65191: LD_INT 0
65193: PPUSH
65194: CALL_OW 234
// end ;
65198: GO 65183
65200: POP
65201: POP
// end ;
65202: PPOPN 2
65204: END
// every 0 0$1 trigger StreamModeActive and sBunker do
65205: LD_EXP 38
65209: PUSH
65210: LD_EXP 48
65214: AND
65215: IFFALSE 65235
65217: GO 65219
65219: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
65220: LD_INT 32
65222: PPUSH
65223: LD_OWVAR 2
65227: PPUSH
65228: LD_INT 0
65230: PPUSH
65231: CALL_OW 324
65235: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
65236: LD_EXP 38
65240: PUSH
65241: LD_EXP 49
65245: AND
65246: IFFALSE 65427
65248: GO 65250
65250: DISABLE
65251: LD_INT 0
65253: PPUSH
65254: PPUSH
65255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
65256: LD_ADDR_VAR 0 2
65260: PUSH
65261: LD_INT 22
65263: PUSH
65264: LD_OWVAR 2
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 33
65275: PUSH
65276: LD_INT 3
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PPUSH
65287: CALL_OW 69
65291: ST_TO_ADDR
// if not tmp then
65292: LD_VAR 0 2
65296: NOT
65297: IFFALSE 65301
// exit ;
65299: GO 65427
// side := 0 ;
65301: LD_ADDR_VAR 0 3
65305: PUSH
65306: LD_INT 0
65308: ST_TO_ADDR
// for i := 1 to 8 do
65309: LD_ADDR_VAR 0 1
65313: PUSH
65314: DOUBLE
65315: LD_INT 1
65317: DEC
65318: ST_TO_ADDR
65319: LD_INT 8
65321: PUSH
65322: FOR_TO
65323: IFFALSE 65371
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
65325: LD_OWVAR 2
65329: PUSH
65330: LD_VAR 0 1
65334: NONEQUAL
65335: PUSH
65336: LD_OWVAR 2
65340: PPUSH
65341: LD_VAR 0 1
65345: PPUSH
65346: CALL_OW 81
65350: PUSH
65351: LD_INT 2
65353: EQUAL
65354: AND
65355: IFFALSE 65369
// begin side := i ;
65357: LD_ADDR_VAR 0 3
65361: PUSH
65362: LD_VAR 0 1
65366: ST_TO_ADDR
// break ;
65367: GO 65371
// end ;
65369: GO 65322
65371: POP
65372: POP
// if not side then
65373: LD_VAR 0 3
65377: NOT
65378: IFFALSE 65382
// exit ;
65380: GO 65427
// for i := 1 to tmp do
65382: LD_ADDR_VAR 0 1
65386: PUSH
65387: DOUBLE
65388: LD_INT 1
65390: DEC
65391: ST_TO_ADDR
65392: LD_VAR 0 2
65396: PUSH
65397: FOR_TO
65398: IFFALSE 65425
// if Prob ( 60 ) then
65400: LD_INT 60
65402: PPUSH
65403: CALL_OW 13
65407: IFFALSE 65423
// SetSide ( i , side ) ;
65409: LD_VAR 0 1
65413: PPUSH
65414: LD_VAR 0 3
65418: PPUSH
65419: CALL_OW 235
65423: GO 65397
65425: POP
65426: POP
// end ;
65427: PPOPN 3
65429: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65430: LD_EXP 38
65434: PUSH
65435: LD_EXP 51
65439: AND
65440: IFFALSE 65559
65442: GO 65444
65444: DISABLE
65445: LD_INT 0
65447: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65448: LD_ADDR_VAR 0 1
65452: PUSH
65453: LD_INT 22
65455: PUSH
65456: LD_OWVAR 2
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 21
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 3
65477: PUSH
65478: LD_INT 23
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: LIST
65496: PPUSH
65497: CALL_OW 69
65501: PUSH
65502: FOR_IN
65503: IFFALSE 65557
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65505: LD_VAR 0 1
65509: PPUSH
65510: CALL_OW 257
65514: PUSH
65515: LD_INT 1
65517: PUSH
65518: LD_INT 2
65520: PUSH
65521: LD_INT 3
65523: PUSH
65524: LD_INT 4
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: IN
65533: IFFALSE 65555
// SetClass ( un , rand ( 1 , 4 ) ) ;
65535: LD_VAR 0 1
65539: PPUSH
65540: LD_INT 1
65542: PPUSH
65543: LD_INT 4
65545: PPUSH
65546: CALL_OW 12
65550: PPUSH
65551: CALL_OW 336
65555: GO 65502
65557: POP
65558: POP
// end ;
65559: PPOPN 1
65561: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65562: LD_EXP 38
65566: PUSH
65567: LD_EXP 50
65571: AND
65572: IFFALSE 65651
65574: GO 65576
65576: DISABLE
65577: LD_INT 0
65579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65580: LD_ADDR_VAR 0 1
65584: PUSH
65585: LD_INT 22
65587: PUSH
65588: LD_OWVAR 2
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 21
65599: PUSH
65600: LD_INT 3
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PPUSH
65611: CALL_OW 69
65615: ST_TO_ADDR
// if not tmp then
65616: LD_VAR 0 1
65620: NOT
65621: IFFALSE 65625
// exit ;
65623: GO 65651
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65625: LD_VAR 0 1
65629: PUSH
65630: LD_INT 1
65632: PPUSH
65633: LD_VAR 0 1
65637: PPUSH
65638: CALL_OW 12
65642: ARRAY
65643: PPUSH
65644: LD_INT 100
65646: PPUSH
65647: CALL_OW 234
// end ;
65651: PPOPN 1
65653: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65654: LD_EXP 38
65658: PUSH
65659: LD_EXP 52
65663: AND
65664: IFFALSE 65762
65666: GO 65668
65668: DISABLE
65669: LD_INT 0
65671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65672: LD_ADDR_VAR 0 1
65676: PUSH
65677: LD_INT 22
65679: PUSH
65680: LD_OWVAR 2
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 21
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PPUSH
65703: CALL_OW 69
65707: ST_TO_ADDR
// if not tmp then
65708: LD_VAR 0 1
65712: NOT
65713: IFFALSE 65717
// exit ;
65715: GO 65762
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65717: LD_VAR 0 1
65721: PUSH
65722: LD_INT 1
65724: PPUSH
65725: LD_VAR 0 1
65729: PPUSH
65730: CALL_OW 12
65734: ARRAY
65735: PPUSH
65736: LD_INT 1
65738: PPUSH
65739: LD_INT 4
65741: PPUSH
65742: CALL_OW 12
65746: PPUSH
65747: LD_INT 3000
65749: PPUSH
65750: LD_INT 9000
65752: PPUSH
65753: CALL_OW 12
65757: PPUSH
65758: CALL_OW 492
// end ;
65762: PPOPN 1
65764: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65765: LD_EXP 38
65769: PUSH
65770: LD_EXP 53
65774: AND
65775: IFFALSE 65795
65777: GO 65779
65779: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65780: LD_INT 1
65782: PPUSH
65783: LD_OWVAR 2
65787: PPUSH
65788: LD_INT 0
65790: PPUSH
65791: CALL_OW 324
65795: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65796: LD_EXP 38
65800: PUSH
65801: LD_EXP 54
65805: AND
65806: IFFALSE 65889
65808: GO 65810
65810: DISABLE
65811: LD_INT 0
65813: PPUSH
65814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65815: LD_ADDR_VAR 0 2
65819: PUSH
65820: LD_INT 22
65822: PUSH
65823: LD_OWVAR 2
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 21
65834: PUSH
65835: LD_INT 3
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PPUSH
65846: CALL_OW 69
65850: ST_TO_ADDR
// if not tmp then
65851: LD_VAR 0 2
65855: NOT
65856: IFFALSE 65860
// exit ;
65858: GO 65889
// for i in tmp do
65860: LD_ADDR_VAR 0 1
65864: PUSH
65865: LD_VAR 0 2
65869: PUSH
65870: FOR_IN
65871: IFFALSE 65887
// SetBLevel ( i , 10 ) ;
65873: LD_VAR 0 1
65877: PPUSH
65878: LD_INT 10
65880: PPUSH
65881: CALL_OW 241
65885: GO 65870
65887: POP
65888: POP
// end ;
65889: PPOPN 2
65891: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65892: LD_EXP 38
65896: PUSH
65897: LD_EXP 55
65901: AND
65902: IFFALSE 66013
65904: GO 65906
65906: DISABLE
65907: LD_INT 0
65909: PPUSH
65910: PPUSH
65911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65912: LD_ADDR_VAR 0 3
65916: PUSH
65917: LD_INT 22
65919: PUSH
65920: LD_OWVAR 2
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 25
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PPUSH
65943: CALL_OW 69
65947: ST_TO_ADDR
// if not tmp then
65948: LD_VAR 0 3
65952: NOT
65953: IFFALSE 65957
// exit ;
65955: GO 66013
// un := tmp [ rand ( 1 , tmp ) ] ;
65957: LD_ADDR_VAR 0 2
65961: PUSH
65962: LD_VAR 0 3
65966: PUSH
65967: LD_INT 1
65969: PPUSH
65970: LD_VAR 0 3
65974: PPUSH
65975: CALL_OW 12
65979: ARRAY
65980: ST_TO_ADDR
// if Crawls ( un ) then
65981: LD_VAR 0 2
65985: PPUSH
65986: CALL_OW 318
65990: IFFALSE 66001
// ComWalk ( un ) ;
65992: LD_VAR 0 2
65996: PPUSH
65997: CALL_OW 138
// SetClass ( un , class_sniper ) ;
66001: LD_VAR 0 2
66005: PPUSH
66006: LD_INT 5
66008: PPUSH
66009: CALL_OW 336
// end ;
66013: PPOPN 3
66015: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
66016: LD_EXP 38
66020: PUSH
66021: LD_EXP 56
66025: AND
66026: PUSH
66027: LD_OWVAR 67
66031: PUSH
66032: LD_INT 4
66034: LESS
66035: AND
66036: IFFALSE 66055
66038: GO 66040
66040: DISABLE
// begin Difficulty := Difficulty + 1 ;
66041: LD_ADDR_OWVAR 67
66045: PUSH
66046: LD_OWVAR 67
66050: PUSH
66051: LD_INT 1
66053: PLUS
66054: ST_TO_ADDR
// end ;
66055: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
66056: LD_EXP 38
66060: PUSH
66061: LD_EXP 57
66065: AND
66066: IFFALSE 66169
66068: GO 66070
66070: DISABLE
66071: LD_INT 0
66073: PPUSH
// begin for i := 1 to 5 do
66074: LD_ADDR_VAR 0 1
66078: PUSH
66079: DOUBLE
66080: LD_INT 1
66082: DEC
66083: ST_TO_ADDR
66084: LD_INT 5
66086: PUSH
66087: FOR_TO
66088: IFFALSE 66167
// begin uc_nation := nation_nature ;
66090: LD_ADDR_OWVAR 21
66094: PUSH
66095: LD_INT 0
66097: ST_TO_ADDR
// uc_side := 0 ;
66098: LD_ADDR_OWVAR 20
66102: PUSH
66103: LD_INT 0
66105: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66106: LD_ADDR_OWVAR 29
66110: PUSH
66111: LD_INT 12
66113: PUSH
66114: LD_INT 12
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: ST_TO_ADDR
// hc_agressivity := 20 ;
66121: LD_ADDR_OWVAR 35
66125: PUSH
66126: LD_INT 20
66128: ST_TO_ADDR
// hc_class := class_tiger ;
66129: LD_ADDR_OWVAR 28
66133: PUSH
66134: LD_INT 14
66136: ST_TO_ADDR
// hc_gallery :=  ;
66137: LD_ADDR_OWVAR 33
66141: PUSH
66142: LD_STRING 
66144: ST_TO_ADDR
// hc_name :=  ;
66145: LD_ADDR_OWVAR 26
66149: PUSH
66150: LD_STRING 
66152: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
66153: CALL_OW 44
66157: PPUSH
66158: LD_INT 0
66160: PPUSH
66161: CALL_OW 51
// end ;
66165: GO 66087
66167: POP
66168: POP
// end ;
66169: PPOPN 1
66171: END
// every 0 0$1 trigger StreamModeActive and sBomb do
66172: LD_EXP 38
66176: PUSH
66177: LD_EXP 58
66181: AND
66182: IFFALSE 66191
66184: GO 66186
66186: DISABLE
// StreamSibBomb ;
66187: CALL 66192 0 0
66191: END
// export function StreamSibBomb ; var i , x , y ; begin
66192: LD_INT 0
66194: PPUSH
66195: PPUSH
66196: PPUSH
66197: PPUSH
// result := false ;
66198: LD_ADDR_VAR 0 1
66202: PUSH
66203: LD_INT 0
66205: ST_TO_ADDR
// for i := 1 to 16 do
66206: LD_ADDR_VAR 0 2
66210: PUSH
66211: DOUBLE
66212: LD_INT 1
66214: DEC
66215: ST_TO_ADDR
66216: LD_INT 16
66218: PUSH
66219: FOR_TO
66220: IFFALSE 66419
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66222: LD_ADDR_VAR 0 3
66226: PUSH
66227: LD_INT 10
66229: PUSH
66230: LD_INT 20
66232: PUSH
66233: LD_INT 30
66235: PUSH
66236: LD_INT 40
66238: PUSH
66239: LD_INT 50
66241: PUSH
66242: LD_INT 60
66244: PUSH
66245: LD_INT 70
66247: PUSH
66248: LD_INT 80
66250: PUSH
66251: LD_INT 90
66253: PUSH
66254: LD_INT 100
66256: PUSH
66257: LD_INT 110
66259: PUSH
66260: LD_INT 120
66262: PUSH
66263: LD_INT 130
66265: PUSH
66266: LD_INT 140
66268: PUSH
66269: LD_INT 150
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 1
66291: PPUSH
66292: LD_INT 15
66294: PPUSH
66295: CALL_OW 12
66299: ARRAY
66300: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66301: LD_ADDR_VAR 0 4
66305: PUSH
66306: LD_INT 10
66308: PUSH
66309: LD_INT 20
66311: PUSH
66312: LD_INT 30
66314: PUSH
66315: LD_INT 40
66317: PUSH
66318: LD_INT 50
66320: PUSH
66321: LD_INT 60
66323: PUSH
66324: LD_INT 70
66326: PUSH
66327: LD_INT 80
66329: PUSH
66330: LD_INT 90
66332: PUSH
66333: LD_INT 100
66335: PUSH
66336: LD_INT 110
66338: PUSH
66339: LD_INT 120
66341: PUSH
66342: LD_INT 130
66344: PUSH
66345: LD_INT 140
66347: PUSH
66348: LD_INT 150
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 1
66370: PPUSH
66371: LD_INT 15
66373: PPUSH
66374: CALL_OW 12
66378: ARRAY
66379: ST_TO_ADDR
// if ValidHex ( x , y ) then
66380: LD_VAR 0 3
66384: PPUSH
66385: LD_VAR 0 4
66389: PPUSH
66390: CALL_OW 488
66394: IFFALSE 66417
// begin result := [ x , y ] ;
66396: LD_ADDR_VAR 0 1
66400: PUSH
66401: LD_VAR 0 3
66405: PUSH
66406: LD_VAR 0 4
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: ST_TO_ADDR
// break ;
66415: GO 66419
// end ; end ;
66417: GO 66219
66419: POP
66420: POP
// if result then
66421: LD_VAR 0 1
66425: IFFALSE 66485
// begin ToLua ( playSibBomb() ) ;
66427: LD_STRING playSibBomb()
66429: PPUSH
66430: CALL_OW 559
// wait ( 0 0$14 ) ;
66434: LD_INT 490
66436: PPUSH
66437: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66441: LD_VAR 0 1
66445: PUSH
66446: LD_INT 1
66448: ARRAY
66449: PPUSH
66450: LD_VAR 0 1
66454: PUSH
66455: LD_INT 2
66457: ARRAY
66458: PPUSH
66459: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66463: LD_VAR 0 1
66467: PUSH
66468: LD_INT 1
66470: ARRAY
66471: PPUSH
66472: LD_VAR 0 1
66476: PUSH
66477: LD_INT 2
66479: ARRAY
66480: PPUSH
66481: CALL_OW 429
// end ; end ;
66485: LD_VAR 0 1
66489: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66490: LD_EXP 38
66494: PUSH
66495: LD_EXP 60
66499: AND
66500: IFFALSE 66512
66502: GO 66504
66504: DISABLE
// YouLost (  ) ;
66505: LD_STRING 
66507: PPUSH
66508: CALL_OW 104
66512: END
// every 0 0$1 trigger StreamModeActive and sFog do
66513: LD_EXP 38
66517: PUSH
66518: LD_EXP 59
66522: AND
66523: IFFALSE 66537
66525: GO 66527
66527: DISABLE
// FogOff ( your_side ) ;
66528: LD_OWVAR 2
66532: PPUSH
66533: CALL_OW 344
66537: END
// every 0 0$1 trigger StreamModeActive and sSun do
66538: LD_EXP 38
66542: PUSH
66543: LD_EXP 61
66547: AND
66548: IFFALSE 66576
66550: GO 66552
66552: DISABLE
// begin solar_recharge_percent := 0 ;
66553: LD_ADDR_OWVAR 79
66557: PUSH
66558: LD_INT 0
66560: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66561: LD_INT 10500
66563: PPUSH
66564: CALL_OW 67
// solar_recharge_percent := 100 ;
66568: LD_ADDR_OWVAR 79
66572: PUSH
66573: LD_INT 100
66575: ST_TO_ADDR
// end ;
66576: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66577: LD_EXP 38
66581: PUSH
66582: LD_EXP 62
66586: AND
66587: IFFALSE 66826
66589: GO 66591
66591: DISABLE
66592: LD_INT 0
66594: PPUSH
66595: PPUSH
66596: PPUSH
// begin tmp := [ ] ;
66597: LD_ADDR_VAR 0 3
66601: PUSH
66602: EMPTY
66603: ST_TO_ADDR
// for i := 1 to 6 do
66604: LD_ADDR_VAR 0 1
66608: PUSH
66609: DOUBLE
66610: LD_INT 1
66612: DEC
66613: ST_TO_ADDR
66614: LD_INT 6
66616: PUSH
66617: FOR_TO
66618: IFFALSE 66723
// begin uc_nation := nation_nature ;
66620: LD_ADDR_OWVAR 21
66624: PUSH
66625: LD_INT 0
66627: ST_TO_ADDR
// uc_side := 0 ;
66628: LD_ADDR_OWVAR 20
66632: PUSH
66633: LD_INT 0
66635: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66636: LD_ADDR_OWVAR 29
66640: PUSH
66641: LD_INT 12
66643: PUSH
66644: LD_INT 12
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: ST_TO_ADDR
// hc_agressivity := 20 ;
66651: LD_ADDR_OWVAR 35
66655: PUSH
66656: LD_INT 20
66658: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66659: LD_ADDR_OWVAR 28
66663: PUSH
66664: LD_INT 17
66666: ST_TO_ADDR
// hc_gallery :=  ;
66667: LD_ADDR_OWVAR 33
66671: PUSH
66672: LD_STRING 
66674: ST_TO_ADDR
// hc_name :=  ;
66675: LD_ADDR_OWVAR 26
66679: PUSH
66680: LD_STRING 
66682: ST_TO_ADDR
// un := CreateHuman ;
66683: LD_ADDR_VAR 0 2
66687: PUSH
66688: CALL_OW 44
66692: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66693: LD_VAR 0 2
66697: PPUSH
66698: LD_INT 1
66700: PPUSH
66701: CALL_OW 51
// tmp := tmp ^ un ;
66705: LD_ADDR_VAR 0 3
66709: PUSH
66710: LD_VAR 0 3
66714: PUSH
66715: LD_VAR 0 2
66719: ADD
66720: ST_TO_ADDR
// end ;
66721: GO 66617
66723: POP
66724: POP
// repeat wait ( 0 0$1 ) ;
66725: LD_INT 35
66727: PPUSH
66728: CALL_OW 67
// for un in tmp do
66732: LD_ADDR_VAR 0 2
66736: PUSH
66737: LD_VAR 0 3
66741: PUSH
66742: FOR_IN
66743: IFFALSE 66817
// begin if IsDead ( un ) then
66745: LD_VAR 0 2
66749: PPUSH
66750: CALL_OW 301
66754: IFFALSE 66774
// begin tmp := tmp diff un ;
66756: LD_ADDR_VAR 0 3
66760: PUSH
66761: LD_VAR 0 3
66765: PUSH
66766: LD_VAR 0 2
66770: DIFF
66771: ST_TO_ADDR
// continue ;
66772: GO 66742
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66774: LD_VAR 0 2
66778: PPUSH
66779: LD_INT 3
66781: PUSH
66782: LD_INT 22
66784: PUSH
66785: LD_INT 0
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PPUSH
66796: CALL_OW 69
66800: PPUSH
66801: LD_VAR 0 2
66805: PPUSH
66806: CALL_OW 74
66810: PPUSH
66811: CALL_OW 115
// end ;
66815: GO 66742
66817: POP
66818: POP
// until not tmp ;
66819: LD_VAR 0 3
66823: NOT
66824: IFFALSE 66725
// end ;
66826: PPOPN 3
66828: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66829: LD_EXP 38
66833: PUSH
66834: LD_EXP 63
66838: AND
66839: IFFALSE 66893
66841: GO 66843
66843: DISABLE
// begin ToLua ( displayTroll(); ) ;
66844: LD_STRING displayTroll();
66846: PPUSH
66847: CALL_OW 559
// wait ( 3 3$00 ) ;
66851: LD_INT 6300
66853: PPUSH
66854: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66858: LD_STRING hideTroll();
66860: PPUSH
66861: CALL_OW 559
// wait ( 1 1$00 ) ;
66865: LD_INT 2100
66867: PPUSH
66868: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66872: LD_STRING displayTroll();
66874: PPUSH
66875: CALL_OW 559
// wait ( 1 1$00 ) ;
66879: LD_INT 2100
66881: PPUSH
66882: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66886: LD_STRING hideTroll();
66888: PPUSH
66889: CALL_OW 559
// end ;
66893: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66894: LD_EXP 38
66898: PUSH
66899: LD_EXP 64
66903: AND
66904: IFFALSE 66967
66906: GO 66908
66908: DISABLE
66909: LD_INT 0
66911: PPUSH
// begin p := 0 ;
66912: LD_ADDR_VAR 0 1
66916: PUSH
66917: LD_INT 0
66919: ST_TO_ADDR
// repeat game_speed := 1 ;
66920: LD_ADDR_OWVAR 65
66924: PUSH
66925: LD_INT 1
66927: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66928: LD_INT 35
66930: PPUSH
66931: CALL_OW 67
// p := p + 1 ;
66935: LD_ADDR_VAR 0 1
66939: PUSH
66940: LD_VAR 0 1
66944: PUSH
66945: LD_INT 1
66947: PLUS
66948: ST_TO_ADDR
// until p >= 60 ;
66949: LD_VAR 0 1
66953: PUSH
66954: LD_INT 60
66956: GREATEREQUAL
66957: IFFALSE 66920
// game_speed := 4 ;
66959: LD_ADDR_OWVAR 65
66963: PUSH
66964: LD_INT 4
66966: ST_TO_ADDR
// end ;
66967: PPOPN 1
66969: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66970: LD_EXP 38
66974: PUSH
66975: LD_EXP 65
66979: AND
66980: IFFALSE 67126
66982: GO 66984
66984: DISABLE
66985: LD_INT 0
66987: PPUSH
66988: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66989: LD_ADDR_VAR 0 1
66993: PUSH
66994: LD_INT 22
66996: PUSH
66997: LD_OWVAR 2
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 2
67008: PUSH
67009: LD_INT 30
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 30
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: LIST
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PPUSH
67038: CALL_OW 69
67042: ST_TO_ADDR
// if not depot then
67043: LD_VAR 0 1
67047: NOT
67048: IFFALSE 67052
// exit ;
67050: GO 67126
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
67052: LD_ADDR_VAR 0 2
67056: PUSH
67057: LD_VAR 0 1
67061: PUSH
67062: LD_INT 1
67064: PPUSH
67065: LD_VAR 0 1
67069: PPUSH
67070: CALL_OW 12
67074: ARRAY
67075: PPUSH
67076: CALL_OW 274
67080: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
67081: LD_VAR 0 2
67085: PPUSH
67086: LD_INT 1
67088: PPUSH
67089: LD_INT 0
67091: PPUSH
67092: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
67096: LD_VAR 0 2
67100: PPUSH
67101: LD_INT 2
67103: PPUSH
67104: LD_INT 0
67106: PPUSH
67107: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
67111: LD_VAR 0 2
67115: PPUSH
67116: LD_INT 3
67118: PPUSH
67119: LD_INT 0
67121: PPUSH
67122: CALL_OW 277
// end ;
67126: PPOPN 2
67128: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
67129: LD_EXP 38
67133: PUSH
67134: LD_EXP 66
67138: AND
67139: IFFALSE 67236
67141: GO 67143
67143: DISABLE
67144: LD_INT 0
67146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67147: LD_ADDR_VAR 0 1
67151: PUSH
67152: LD_INT 22
67154: PUSH
67155: LD_OWVAR 2
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 21
67166: PUSH
67167: LD_INT 1
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: LD_INT 23
67179: PUSH
67180: LD_INT 0
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: LIST
67195: PPUSH
67196: CALL_OW 69
67200: ST_TO_ADDR
// if not tmp then
67201: LD_VAR 0 1
67205: NOT
67206: IFFALSE 67210
// exit ;
67208: GO 67236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
67210: LD_VAR 0 1
67214: PUSH
67215: LD_INT 1
67217: PPUSH
67218: LD_VAR 0 1
67222: PPUSH
67223: CALL_OW 12
67227: ARRAY
67228: PPUSH
67229: LD_INT 200
67231: PPUSH
67232: CALL_OW 234
// end ;
67236: PPOPN 1
67238: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
67239: LD_EXP 38
67243: PUSH
67244: LD_EXP 67
67248: AND
67249: IFFALSE 67328
67251: GO 67253
67253: DISABLE
67254: LD_INT 0
67256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
67257: LD_ADDR_VAR 0 1
67261: PUSH
67262: LD_INT 22
67264: PUSH
67265: LD_OWVAR 2
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 21
67276: PUSH
67277: LD_INT 2
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PPUSH
67288: CALL_OW 69
67292: ST_TO_ADDR
// if not tmp then
67293: LD_VAR 0 1
67297: NOT
67298: IFFALSE 67302
// exit ;
67300: GO 67328
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
67302: LD_VAR 0 1
67306: PUSH
67307: LD_INT 1
67309: PPUSH
67310: LD_VAR 0 1
67314: PPUSH
67315: CALL_OW 12
67319: ARRAY
67320: PPUSH
67321: LD_INT 60
67323: PPUSH
67324: CALL_OW 234
// end ;
67328: PPOPN 1
67330: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
67331: LD_EXP 38
67335: PUSH
67336: LD_EXP 68
67340: AND
67341: IFFALSE 67440
67343: GO 67345
67345: DISABLE
67346: LD_INT 0
67348: PPUSH
67349: PPUSH
// begin enable ;
67350: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
67351: LD_ADDR_VAR 0 1
67355: PUSH
67356: LD_INT 22
67358: PUSH
67359: LD_OWVAR 2
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 61
67370: PUSH
67371: EMPTY
67372: LIST
67373: PUSH
67374: LD_INT 33
67376: PUSH
67377: LD_INT 2
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: LIST
67388: PPUSH
67389: CALL_OW 69
67393: ST_TO_ADDR
// if not tmp then
67394: LD_VAR 0 1
67398: NOT
67399: IFFALSE 67403
// exit ;
67401: GO 67440
// for i in tmp do
67403: LD_ADDR_VAR 0 2
67407: PUSH
67408: LD_VAR 0 1
67412: PUSH
67413: FOR_IN
67414: IFFALSE 67438
// if IsControledBy ( i ) then
67416: LD_VAR 0 2
67420: PPUSH
67421: CALL_OW 312
67425: IFFALSE 67436
// ComUnlink ( i ) ;
67427: LD_VAR 0 2
67431: PPUSH
67432: CALL_OW 136
67436: GO 67413
67438: POP
67439: POP
// end ;
67440: PPOPN 2
67442: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67443: LD_EXP 38
67447: PUSH
67448: LD_EXP 69
67452: AND
67453: IFFALSE 67593
67455: GO 67457
67457: DISABLE
67458: LD_INT 0
67460: PPUSH
67461: PPUSH
// begin ToLua ( displayPowell(); ) ;
67462: LD_STRING displayPowell();
67464: PPUSH
67465: CALL_OW 559
// uc_side := 0 ;
67469: LD_ADDR_OWVAR 20
67473: PUSH
67474: LD_INT 0
67476: ST_TO_ADDR
// uc_nation := 2 ;
67477: LD_ADDR_OWVAR 21
67481: PUSH
67482: LD_INT 2
67484: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67485: LD_ADDR_OWVAR 37
67489: PUSH
67490: LD_INT 14
67492: ST_TO_ADDR
// vc_engine := engine_siberite ;
67493: LD_ADDR_OWVAR 39
67497: PUSH
67498: LD_INT 3
67500: ST_TO_ADDR
// vc_control := control_apeman ;
67501: LD_ADDR_OWVAR 38
67505: PUSH
67506: LD_INT 5
67508: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67509: LD_ADDR_OWVAR 40
67513: PUSH
67514: LD_INT 29
67516: ST_TO_ADDR
// un := CreateVehicle ;
67517: LD_ADDR_VAR 0 2
67521: PUSH
67522: CALL_OW 45
67526: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67527: LD_VAR 0 2
67531: PPUSH
67532: LD_INT 1
67534: PPUSH
67535: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67539: LD_INT 35
67541: PPUSH
67542: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67546: LD_VAR 0 2
67550: PPUSH
67551: LD_INT 22
67553: PUSH
67554: LD_OWVAR 2
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PPUSH
67563: CALL_OW 69
67567: PPUSH
67568: LD_VAR 0 2
67572: PPUSH
67573: CALL_OW 74
67577: PPUSH
67578: CALL_OW 115
// until IsDead ( un ) ;
67582: LD_VAR 0 2
67586: PPUSH
67587: CALL_OW 301
67591: IFFALSE 67539
// end ;
67593: PPOPN 2
67595: END
// every 0 0$1 trigger StreamModeActive and sStu do
67596: LD_EXP 38
67600: PUSH
67601: LD_EXP 77
67605: AND
67606: IFFALSE 67622
67608: GO 67610
67610: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67611: LD_STRING displayStucuk();
67613: PPUSH
67614: CALL_OW 559
// ResetFog ;
67618: CALL_OW 335
// end ;
67622: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67623: LD_EXP 38
67627: PUSH
67628: LD_EXP 70
67632: AND
67633: IFFALSE 67774
67635: GO 67637
67637: DISABLE
67638: LD_INT 0
67640: PPUSH
67641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67642: LD_ADDR_VAR 0 2
67646: PUSH
67647: LD_INT 22
67649: PUSH
67650: LD_OWVAR 2
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 21
67661: PUSH
67662: LD_INT 1
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PPUSH
67673: CALL_OW 69
67677: ST_TO_ADDR
// if not tmp then
67678: LD_VAR 0 2
67682: NOT
67683: IFFALSE 67687
// exit ;
67685: GO 67774
// un := tmp [ rand ( 1 , tmp ) ] ;
67687: LD_ADDR_VAR 0 1
67691: PUSH
67692: LD_VAR 0 2
67696: PUSH
67697: LD_INT 1
67699: PPUSH
67700: LD_VAR 0 2
67704: PPUSH
67705: CALL_OW 12
67709: ARRAY
67710: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67711: LD_VAR 0 1
67715: PPUSH
67716: LD_INT 0
67718: PPUSH
67719: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67723: LD_VAR 0 1
67727: PPUSH
67728: LD_OWVAR 3
67732: PUSH
67733: LD_VAR 0 1
67737: DIFF
67738: PPUSH
67739: LD_VAR 0 1
67743: PPUSH
67744: CALL_OW 74
67748: PPUSH
67749: CALL_OW 115
// wait ( 0 0$20 ) ;
67753: LD_INT 700
67755: PPUSH
67756: CALL_OW 67
// SetSide ( un , your_side ) ;
67760: LD_VAR 0 1
67764: PPUSH
67765: LD_OWVAR 2
67769: PPUSH
67770: CALL_OW 235
// end ;
67774: PPOPN 2
67776: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67777: LD_EXP 38
67781: PUSH
67782: LD_EXP 71
67786: AND
67787: IFFALSE 67893
67789: GO 67791
67791: DISABLE
67792: LD_INT 0
67794: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67795: LD_ADDR_VAR 0 1
67799: PUSH
67800: LD_INT 22
67802: PUSH
67803: LD_OWVAR 2
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 2
67814: PUSH
67815: LD_INT 30
67817: PUSH
67818: LD_INT 0
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 30
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: LIST
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PPUSH
67844: CALL_OW 69
67848: ST_TO_ADDR
// if not depot then
67849: LD_VAR 0 1
67853: NOT
67854: IFFALSE 67858
// exit ;
67856: GO 67893
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67858: LD_VAR 0 1
67862: PUSH
67863: LD_INT 1
67865: ARRAY
67866: PPUSH
67867: CALL_OW 250
67871: PPUSH
67872: LD_VAR 0 1
67876: PUSH
67877: LD_INT 1
67879: ARRAY
67880: PPUSH
67881: CALL_OW 251
67885: PPUSH
67886: LD_INT 70
67888: PPUSH
67889: CALL_OW 495
// end ;
67893: PPOPN 1
67895: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67896: LD_EXP 38
67900: PUSH
67901: LD_EXP 72
67905: AND
67906: IFFALSE 68117
67908: GO 67910
67910: DISABLE
67911: LD_INT 0
67913: PPUSH
67914: PPUSH
67915: PPUSH
67916: PPUSH
67917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67918: LD_ADDR_VAR 0 5
67922: PUSH
67923: LD_INT 22
67925: PUSH
67926: LD_OWVAR 2
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 21
67937: PUSH
67938: LD_INT 1
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PPUSH
67949: CALL_OW 69
67953: ST_TO_ADDR
// if not tmp then
67954: LD_VAR 0 5
67958: NOT
67959: IFFALSE 67963
// exit ;
67961: GO 68117
// for i in tmp do
67963: LD_ADDR_VAR 0 1
67967: PUSH
67968: LD_VAR 0 5
67972: PUSH
67973: FOR_IN
67974: IFFALSE 68115
// begin d := rand ( 0 , 5 ) ;
67976: LD_ADDR_VAR 0 4
67980: PUSH
67981: LD_INT 0
67983: PPUSH
67984: LD_INT 5
67986: PPUSH
67987: CALL_OW 12
67991: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67992: LD_ADDR_VAR 0 2
67996: PUSH
67997: LD_VAR 0 1
68001: PPUSH
68002: CALL_OW 250
68006: PPUSH
68007: LD_VAR 0 4
68011: PPUSH
68012: LD_INT 3
68014: PPUSH
68015: LD_INT 12
68017: PPUSH
68018: CALL_OW 12
68022: PPUSH
68023: CALL_OW 272
68027: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
68028: LD_ADDR_VAR 0 3
68032: PUSH
68033: LD_VAR 0 1
68037: PPUSH
68038: CALL_OW 251
68042: PPUSH
68043: LD_VAR 0 4
68047: PPUSH
68048: LD_INT 3
68050: PPUSH
68051: LD_INT 12
68053: PPUSH
68054: CALL_OW 12
68058: PPUSH
68059: CALL_OW 273
68063: ST_TO_ADDR
// if ValidHex ( x , y ) then
68064: LD_VAR 0 2
68068: PPUSH
68069: LD_VAR 0 3
68073: PPUSH
68074: CALL_OW 488
68078: IFFALSE 68113
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
68080: LD_VAR 0 1
68084: PPUSH
68085: LD_VAR 0 2
68089: PPUSH
68090: LD_VAR 0 3
68094: PPUSH
68095: LD_INT 3
68097: PPUSH
68098: LD_INT 6
68100: PPUSH
68101: CALL_OW 12
68105: PPUSH
68106: LD_INT 1
68108: PPUSH
68109: CALL_OW 483
// end ;
68113: GO 67973
68115: POP
68116: POP
// end ;
68117: PPOPN 5
68119: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
68120: LD_EXP 38
68124: PUSH
68125: LD_EXP 73
68129: AND
68130: IFFALSE 68224
68132: GO 68134
68134: DISABLE
68135: LD_INT 0
68137: PPUSH
68138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
68139: LD_ADDR_VAR 0 2
68143: PUSH
68144: LD_INT 22
68146: PUSH
68147: LD_OWVAR 2
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 32
68158: PUSH
68159: LD_INT 1
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 21
68168: PUSH
68169: LD_INT 2
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: LIST
68180: PPUSH
68181: CALL_OW 69
68185: ST_TO_ADDR
// if not tmp then
68186: LD_VAR 0 2
68190: NOT
68191: IFFALSE 68195
// exit ;
68193: GO 68224
// for i in tmp do
68195: LD_ADDR_VAR 0 1
68199: PUSH
68200: LD_VAR 0 2
68204: PUSH
68205: FOR_IN
68206: IFFALSE 68222
// SetFuel ( i , 0 ) ;
68208: LD_VAR 0 1
68212: PPUSH
68213: LD_INT 0
68215: PPUSH
68216: CALL_OW 240
68220: GO 68205
68222: POP
68223: POP
// end ;
68224: PPOPN 2
68226: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
68227: LD_EXP 38
68231: PUSH
68232: LD_EXP 74
68236: AND
68237: IFFALSE 68303
68239: GO 68241
68241: DISABLE
68242: LD_INT 0
68244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68245: LD_ADDR_VAR 0 1
68249: PUSH
68250: LD_INT 22
68252: PUSH
68253: LD_OWVAR 2
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 30
68264: PUSH
68265: LD_INT 29
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PPUSH
68276: CALL_OW 69
68280: ST_TO_ADDR
// if not tmp then
68281: LD_VAR 0 1
68285: NOT
68286: IFFALSE 68290
// exit ;
68288: GO 68303
// DestroyUnit ( tmp [ 1 ] ) ;
68290: LD_VAR 0 1
68294: PUSH
68295: LD_INT 1
68297: ARRAY
68298: PPUSH
68299: CALL_OW 65
// end ;
68303: PPOPN 1
68305: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
68306: LD_EXP 38
68310: PUSH
68311: LD_EXP 76
68315: AND
68316: IFFALSE 68445
68318: GO 68320
68320: DISABLE
68321: LD_INT 0
68323: PPUSH
// begin uc_side := 0 ;
68324: LD_ADDR_OWVAR 20
68328: PUSH
68329: LD_INT 0
68331: ST_TO_ADDR
// uc_nation := nation_arabian ;
68332: LD_ADDR_OWVAR 21
68336: PUSH
68337: LD_INT 2
68339: ST_TO_ADDR
// hc_gallery :=  ;
68340: LD_ADDR_OWVAR 33
68344: PUSH
68345: LD_STRING 
68347: ST_TO_ADDR
// hc_name :=  ;
68348: LD_ADDR_OWVAR 26
68352: PUSH
68353: LD_STRING 
68355: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
68356: LD_INT 1
68358: PPUSH
68359: LD_INT 11
68361: PPUSH
68362: LD_INT 10
68364: PPUSH
68365: CALL_OW 380
// un := CreateHuman ;
68369: LD_ADDR_VAR 0 1
68373: PUSH
68374: CALL_OW 44
68378: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68379: LD_VAR 0 1
68383: PPUSH
68384: LD_INT 1
68386: PPUSH
68387: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68391: LD_INT 35
68393: PPUSH
68394: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68398: LD_VAR 0 1
68402: PPUSH
68403: LD_INT 22
68405: PUSH
68406: LD_OWVAR 2
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PPUSH
68415: CALL_OW 69
68419: PPUSH
68420: LD_VAR 0 1
68424: PPUSH
68425: CALL_OW 74
68429: PPUSH
68430: CALL_OW 115
// until IsDead ( un ) ;
68434: LD_VAR 0 1
68438: PPUSH
68439: CALL_OW 301
68443: IFFALSE 68391
// end ;
68445: PPOPN 1
68447: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68448: LD_EXP 38
68452: PUSH
68453: LD_EXP 78
68457: AND
68458: IFFALSE 68470
68460: GO 68462
68462: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68463: LD_STRING earthquake(getX(game), 0, 32)
68465: PPUSH
68466: CALL_OW 559
68470: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68471: LD_EXP 38
68475: PUSH
68476: LD_EXP 79
68480: AND
68481: IFFALSE 68572
68483: GO 68485
68485: DISABLE
68486: LD_INT 0
68488: PPUSH
// begin enable ;
68489: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68490: LD_ADDR_VAR 0 1
68494: PUSH
68495: LD_INT 22
68497: PUSH
68498: LD_OWVAR 2
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 21
68509: PUSH
68510: LD_INT 2
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 33
68519: PUSH
68520: LD_INT 3
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: LIST
68531: PPUSH
68532: CALL_OW 69
68536: ST_TO_ADDR
// if not tmp then
68537: LD_VAR 0 1
68541: NOT
68542: IFFALSE 68546
// exit ;
68544: GO 68572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68546: LD_VAR 0 1
68550: PUSH
68551: LD_INT 1
68553: PPUSH
68554: LD_VAR 0 1
68558: PPUSH
68559: CALL_OW 12
68563: ARRAY
68564: PPUSH
68565: LD_INT 1
68567: PPUSH
68568: CALL_OW 234
// end ;
68572: PPOPN 1
68574: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68575: LD_EXP 38
68579: PUSH
68580: LD_EXP 80
68584: AND
68585: IFFALSE 68726
68587: GO 68589
68589: DISABLE
68590: LD_INT 0
68592: PPUSH
68593: PPUSH
68594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68595: LD_ADDR_VAR 0 3
68599: PUSH
68600: LD_INT 22
68602: PUSH
68603: LD_OWVAR 2
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 25
68614: PUSH
68615: LD_INT 1
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PPUSH
68626: CALL_OW 69
68630: ST_TO_ADDR
// if not tmp then
68631: LD_VAR 0 3
68635: NOT
68636: IFFALSE 68640
// exit ;
68638: GO 68726
// un := tmp [ rand ( 1 , tmp ) ] ;
68640: LD_ADDR_VAR 0 2
68644: PUSH
68645: LD_VAR 0 3
68649: PUSH
68650: LD_INT 1
68652: PPUSH
68653: LD_VAR 0 3
68657: PPUSH
68658: CALL_OW 12
68662: ARRAY
68663: ST_TO_ADDR
// if Crawls ( un ) then
68664: LD_VAR 0 2
68668: PPUSH
68669: CALL_OW 318
68673: IFFALSE 68684
// ComWalk ( un ) ;
68675: LD_VAR 0 2
68679: PPUSH
68680: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68684: LD_VAR 0 2
68688: PPUSH
68689: LD_INT 9
68691: PPUSH
68692: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68696: LD_INT 28
68698: PPUSH
68699: LD_OWVAR 2
68703: PPUSH
68704: LD_INT 2
68706: PPUSH
68707: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68711: LD_INT 29
68713: PPUSH
68714: LD_OWVAR 2
68718: PPUSH
68719: LD_INT 2
68721: PPUSH
68722: CALL_OW 322
// end ;
68726: PPOPN 3
68728: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68729: LD_EXP 38
68733: PUSH
68734: LD_EXP 81
68738: AND
68739: IFFALSE 68850
68741: GO 68743
68743: DISABLE
68744: LD_INT 0
68746: PPUSH
68747: PPUSH
68748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68749: LD_ADDR_VAR 0 3
68753: PUSH
68754: LD_INT 22
68756: PUSH
68757: LD_OWVAR 2
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 25
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PPUSH
68780: CALL_OW 69
68784: ST_TO_ADDR
// if not tmp then
68785: LD_VAR 0 3
68789: NOT
68790: IFFALSE 68794
// exit ;
68792: GO 68850
// un := tmp [ rand ( 1 , tmp ) ] ;
68794: LD_ADDR_VAR 0 2
68798: PUSH
68799: LD_VAR 0 3
68803: PUSH
68804: LD_INT 1
68806: PPUSH
68807: LD_VAR 0 3
68811: PPUSH
68812: CALL_OW 12
68816: ARRAY
68817: ST_TO_ADDR
// if Crawls ( un ) then
68818: LD_VAR 0 2
68822: PPUSH
68823: CALL_OW 318
68827: IFFALSE 68838
// ComWalk ( un ) ;
68829: LD_VAR 0 2
68833: PPUSH
68834: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68838: LD_VAR 0 2
68842: PPUSH
68843: LD_INT 8
68845: PPUSH
68846: CALL_OW 336
// end ;
68850: PPOPN 3
68852: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68853: LD_EXP 38
68857: PUSH
68858: LD_EXP 82
68862: AND
68863: IFFALSE 69007
68865: GO 68867
68867: DISABLE
68868: LD_INT 0
68870: PPUSH
68871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68872: LD_ADDR_VAR 0 2
68876: PUSH
68877: LD_INT 22
68879: PUSH
68880: LD_OWVAR 2
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 21
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 2
68901: PUSH
68902: LD_INT 34
68904: PUSH
68905: LD_INT 12
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 34
68914: PUSH
68915: LD_INT 51
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 34
68924: PUSH
68925: LD_INT 32
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: LIST
68942: PPUSH
68943: CALL_OW 69
68947: ST_TO_ADDR
// if not tmp then
68948: LD_VAR 0 2
68952: NOT
68953: IFFALSE 68957
// exit ;
68955: GO 69007
// for i in tmp do
68957: LD_ADDR_VAR 0 1
68961: PUSH
68962: LD_VAR 0 2
68966: PUSH
68967: FOR_IN
68968: IFFALSE 69005
// if GetCargo ( i , mat_artifact ) = 0 then
68970: LD_VAR 0 1
68974: PPUSH
68975: LD_INT 4
68977: PPUSH
68978: CALL_OW 289
68982: PUSH
68983: LD_INT 0
68985: EQUAL
68986: IFFALSE 69003
// SetCargo ( i , mat_siberit , 100 ) ;
68988: LD_VAR 0 1
68992: PPUSH
68993: LD_INT 3
68995: PPUSH
68996: LD_INT 100
68998: PPUSH
68999: CALL_OW 290
69003: GO 68967
69005: POP
69006: POP
// end ;
69007: PPOPN 2
69009: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
69010: LD_EXP 38
69014: PUSH
69015: LD_EXP 83
69019: AND
69020: IFFALSE 69203
69022: GO 69024
69024: DISABLE
69025: LD_INT 0
69027: PPUSH
69028: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69029: LD_ADDR_VAR 0 2
69033: PUSH
69034: LD_INT 22
69036: PUSH
69037: LD_OWVAR 2
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PPUSH
69046: CALL_OW 69
69050: ST_TO_ADDR
// if not tmp then
69051: LD_VAR 0 2
69055: NOT
69056: IFFALSE 69060
// exit ;
69058: GO 69203
// for i := 1 to 2 do
69060: LD_ADDR_VAR 0 1
69064: PUSH
69065: DOUBLE
69066: LD_INT 1
69068: DEC
69069: ST_TO_ADDR
69070: LD_INT 2
69072: PUSH
69073: FOR_TO
69074: IFFALSE 69201
// begin uc_side := your_side ;
69076: LD_ADDR_OWVAR 20
69080: PUSH
69081: LD_OWVAR 2
69085: ST_TO_ADDR
// uc_nation := nation_american ;
69086: LD_ADDR_OWVAR 21
69090: PUSH
69091: LD_INT 1
69093: ST_TO_ADDR
// vc_chassis := us_morphling ;
69094: LD_ADDR_OWVAR 37
69098: PUSH
69099: LD_INT 5
69101: ST_TO_ADDR
// vc_engine := engine_siberite ;
69102: LD_ADDR_OWVAR 39
69106: PUSH
69107: LD_INT 3
69109: ST_TO_ADDR
// vc_control := control_computer ;
69110: LD_ADDR_OWVAR 38
69114: PUSH
69115: LD_INT 3
69117: ST_TO_ADDR
// vc_weapon := us_double_laser ;
69118: LD_ADDR_OWVAR 40
69122: PUSH
69123: LD_INT 10
69125: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
69126: LD_VAR 0 2
69130: PUSH
69131: LD_INT 1
69133: ARRAY
69134: PPUSH
69135: CALL_OW 310
69139: NOT
69140: IFFALSE 69187
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
69142: CALL_OW 45
69146: PPUSH
69147: LD_VAR 0 2
69151: PUSH
69152: LD_INT 1
69154: ARRAY
69155: PPUSH
69156: CALL_OW 250
69160: PPUSH
69161: LD_VAR 0 2
69165: PUSH
69166: LD_INT 1
69168: ARRAY
69169: PPUSH
69170: CALL_OW 251
69174: PPUSH
69175: LD_INT 12
69177: PPUSH
69178: LD_INT 1
69180: PPUSH
69181: CALL_OW 50
69185: GO 69199
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
69187: CALL_OW 45
69191: PPUSH
69192: LD_INT 1
69194: PPUSH
69195: CALL_OW 51
// end ;
69199: GO 69073
69201: POP
69202: POP
// end ;
69203: PPOPN 2
69205: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
69206: LD_EXP 38
69210: PUSH
69211: LD_EXP 84
69215: AND
69216: IFFALSE 69438
69218: GO 69220
69220: DISABLE
69221: LD_INT 0
69223: PPUSH
69224: PPUSH
69225: PPUSH
69226: PPUSH
69227: PPUSH
69228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69229: LD_ADDR_VAR 0 6
69233: PUSH
69234: LD_INT 22
69236: PUSH
69237: LD_OWVAR 2
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 21
69248: PUSH
69249: LD_INT 1
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 3
69258: PUSH
69259: LD_INT 23
69261: PUSH
69262: LD_INT 0
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: LIST
69277: PPUSH
69278: CALL_OW 69
69282: ST_TO_ADDR
// if not tmp then
69283: LD_VAR 0 6
69287: NOT
69288: IFFALSE 69292
// exit ;
69290: GO 69438
// s1 := rand ( 1 , 4 ) ;
69292: LD_ADDR_VAR 0 2
69296: PUSH
69297: LD_INT 1
69299: PPUSH
69300: LD_INT 4
69302: PPUSH
69303: CALL_OW 12
69307: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
69308: LD_ADDR_VAR 0 4
69312: PUSH
69313: LD_VAR 0 6
69317: PUSH
69318: LD_INT 1
69320: ARRAY
69321: PPUSH
69322: LD_VAR 0 2
69326: PPUSH
69327: CALL_OW 259
69331: ST_TO_ADDR
// if s1 = 1 then
69332: LD_VAR 0 2
69336: PUSH
69337: LD_INT 1
69339: EQUAL
69340: IFFALSE 69360
// s2 := rand ( 2 , 4 ) else
69342: LD_ADDR_VAR 0 3
69346: PUSH
69347: LD_INT 2
69349: PPUSH
69350: LD_INT 4
69352: PPUSH
69353: CALL_OW 12
69357: ST_TO_ADDR
69358: GO 69368
// s2 := 1 ;
69360: LD_ADDR_VAR 0 3
69364: PUSH
69365: LD_INT 1
69367: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
69368: LD_ADDR_VAR 0 5
69372: PUSH
69373: LD_VAR 0 6
69377: PUSH
69378: LD_INT 1
69380: ARRAY
69381: PPUSH
69382: LD_VAR 0 3
69386: PPUSH
69387: CALL_OW 259
69391: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
69392: LD_VAR 0 6
69396: PUSH
69397: LD_INT 1
69399: ARRAY
69400: PPUSH
69401: LD_VAR 0 2
69405: PPUSH
69406: LD_VAR 0 5
69410: PPUSH
69411: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
69415: LD_VAR 0 6
69419: PUSH
69420: LD_INT 1
69422: ARRAY
69423: PPUSH
69424: LD_VAR 0 3
69428: PPUSH
69429: LD_VAR 0 4
69433: PPUSH
69434: CALL_OW 237
// end ;
69438: PPOPN 6
69440: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69441: LD_EXP 38
69445: PUSH
69446: LD_EXP 85
69450: AND
69451: IFFALSE 69530
69453: GO 69455
69455: DISABLE
69456: LD_INT 0
69458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69459: LD_ADDR_VAR 0 1
69463: PUSH
69464: LD_INT 22
69466: PUSH
69467: LD_OWVAR 2
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 30
69478: PUSH
69479: LD_INT 3
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PPUSH
69490: CALL_OW 69
69494: ST_TO_ADDR
// if not tmp then
69495: LD_VAR 0 1
69499: NOT
69500: IFFALSE 69504
// exit ;
69502: GO 69530
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69504: LD_VAR 0 1
69508: PUSH
69509: LD_INT 1
69511: PPUSH
69512: LD_VAR 0 1
69516: PPUSH
69517: CALL_OW 12
69521: ARRAY
69522: PPUSH
69523: LD_INT 1
69525: PPUSH
69526: CALL_OW 234
// end ;
69530: PPOPN 1
69532: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69533: LD_EXP 38
69537: PUSH
69538: LD_EXP 86
69542: AND
69543: IFFALSE 69655
69545: GO 69547
69547: DISABLE
69548: LD_INT 0
69550: PPUSH
69551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69552: LD_ADDR_VAR 0 2
69556: PUSH
69557: LD_INT 22
69559: PUSH
69560: LD_OWVAR 2
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 2
69571: PUSH
69572: LD_INT 30
69574: PUSH
69575: LD_INT 27
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 30
69584: PUSH
69585: LD_INT 26
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 30
69594: PUSH
69595: LD_INT 28
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PPUSH
69612: CALL_OW 69
69616: ST_TO_ADDR
// if not tmp then
69617: LD_VAR 0 2
69621: NOT
69622: IFFALSE 69626
// exit ;
69624: GO 69655
// for i in tmp do
69626: LD_ADDR_VAR 0 1
69630: PUSH
69631: LD_VAR 0 2
69635: PUSH
69636: FOR_IN
69637: IFFALSE 69653
// SetLives ( i , 1 ) ;
69639: LD_VAR 0 1
69643: PPUSH
69644: LD_INT 1
69646: PPUSH
69647: CALL_OW 234
69651: GO 69636
69653: POP
69654: POP
// end ;
69655: PPOPN 2
69657: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69658: LD_EXP 38
69662: PUSH
69663: LD_EXP 87
69667: AND
69668: IFFALSE 69955
69670: GO 69672
69672: DISABLE
69673: LD_INT 0
69675: PPUSH
69676: PPUSH
69677: PPUSH
// begin i := rand ( 1 , 7 ) ;
69678: LD_ADDR_VAR 0 1
69682: PUSH
69683: LD_INT 1
69685: PPUSH
69686: LD_INT 7
69688: PPUSH
69689: CALL_OW 12
69693: ST_TO_ADDR
// case i of 1 :
69694: LD_VAR 0 1
69698: PUSH
69699: LD_INT 1
69701: DOUBLE
69702: EQUAL
69703: IFTRUE 69707
69705: GO 69717
69707: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69708: LD_STRING earthquake(getX(game), 0, 32)
69710: PPUSH
69711: CALL_OW 559
69715: GO 69955
69717: LD_INT 2
69719: DOUBLE
69720: EQUAL
69721: IFTRUE 69725
69723: GO 69739
69725: POP
// begin ToLua ( displayStucuk(); ) ;
69726: LD_STRING displayStucuk();
69728: PPUSH
69729: CALL_OW 559
// ResetFog ;
69733: CALL_OW 335
// end ; 3 :
69737: GO 69955
69739: LD_INT 3
69741: DOUBLE
69742: EQUAL
69743: IFTRUE 69747
69745: GO 69851
69747: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69748: LD_ADDR_VAR 0 2
69752: PUSH
69753: LD_INT 22
69755: PUSH
69756: LD_OWVAR 2
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 25
69767: PUSH
69768: LD_INT 1
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PPUSH
69779: CALL_OW 69
69783: ST_TO_ADDR
// if not tmp then
69784: LD_VAR 0 2
69788: NOT
69789: IFFALSE 69793
// exit ;
69791: GO 69955
// un := tmp [ rand ( 1 , tmp ) ] ;
69793: LD_ADDR_VAR 0 3
69797: PUSH
69798: LD_VAR 0 2
69802: PUSH
69803: LD_INT 1
69805: PPUSH
69806: LD_VAR 0 2
69810: PPUSH
69811: CALL_OW 12
69815: ARRAY
69816: ST_TO_ADDR
// if Crawls ( un ) then
69817: LD_VAR 0 3
69821: PPUSH
69822: CALL_OW 318
69826: IFFALSE 69837
// ComWalk ( un ) ;
69828: LD_VAR 0 3
69832: PPUSH
69833: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69837: LD_VAR 0 3
69841: PPUSH
69842: LD_INT 8
69844: PPUSH
69845: CALL_OW 336
// end ; 4 :
69849: GO 69955
69851: LD_INT 4
69853: DOUBLE
69854: EQUAL
69855: IFTRUE 69859
69857: GO 69933
69859: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69860: LD_ADDR_VAR 0 2
69864: PUSH
69865: LD_INT 22
69867: PUSH
69868: LD_OWVAR 2
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 30
69879: PUSH
69880: LD_INT 29
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PPUSH
69891: CALL_OW 69
69895: ST_TO_ADDR
// if not tmp then
69896: LD_VAR 0 2
69900: NOT
69901: IFFALSE 69905
// exit ;
69903: GO 69955
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69905: LD_VAR 0 2
69909: PUSH
69910: LD_INT 1
69912: ARRAY
69913: PPUSH
69914: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69918: LD_VAR 0 2
69922: PUSH
69923: LD_INT 1
69925: ARRAY
69926: PPUSH
69927: CALL_OW 65
// end ; 5 .. 7 :
69931: GO 69955
69933: LD_INT 5
69935: DOUBLE
69936: GREATEREQUAL
69937: IFFALSE 69945
69939: LD_INT 7
69941: DOUBLE
69942: LESSEQUAL
69943: IFTRUE 69947
69945: GO 69954
69947: POP
// StreamSibBomb ; end ;
69948: CALL 66192 0 0
69952: GO 69955
69954: POP
// end ;
69955: PPOPN 3
69957: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69958: LD_EXP 38
69962: PUSH
69963: LD_EXP 88
69967: AND
69968: IFFALSE 70124
69970: GO 69972
69972: DISABLE
69973: LD_INT 0
69975: PPUSH
69976: PPUSH
69977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69978: LD_ADDR_VAR 0 2
69982: PUSH
69983: LD_INT 81
69985: PUSH
69986: LD_OWVAR 2
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 2
69997: PUSH
69998: LD_INT 21
70000: PUSH
70001: LD_INT 1
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 21
70010: PUSH
70011: LD_INT 2
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: LIST
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PPUSH
70027: CALL_OW 69
70031: ST_TO_ADDR
// if not tmp then
70032: LD_VAR 0 2
70036: NOT
70037: IFFALSE 70041
// exit ;
70039: GO 70124
// p := 0 ;
70041: LD_ADDR_VAR 0 3
70045: PUSH
70046: LD_INT 0
70048: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70049: LD_INT 35
70051: PPUSH
70052: CALL_OW 67
// p := p + 1 ;
70056: LD_ADDR_VAR 0 3
70060: PUSH
70061: LD_VAR 0 3
70065: PUSH
70066: LD_INT 1
70068: PLUS
70069: ST_TO_ADDR
// for i in tmp do
70070: LD_ADDR_VAR 0 1
70074: PUSH
70075: LD_VAR 0 2
70079: PUSH
70080: FOR_IN
70081: IFFALSE 70112
// if GetLives ( i ) < 1000 then
70083: LD_VAR 0 1
70087: PPUSH
70088: CALL_OW 256
70092: PUSH
70093: LD_INT 1000
70095: LESS
70096: IFFALSE 70110
// SetLives ( i , 1000 ) ;
70098: LD_VAR 0 1
70102: PPUSH
70103: LD_INT 1000
70105: PPUSH
70106: CALL_OW 234
70110: GO 70080
70112: POP
70113: POP
// until p > 20 ;
70114: LD_VAR 0 3
70118: PUSH
70119: LD_INT 20
70121: GREATER
70122: IFFALSE 70049
// end ;
70124: PPOPN 3
70126: END
// every 0 0$1 trigger StreamModeActive and sTime do
70127: LD_EXP 38
70131: PUSH
70132: LD_EXP 89
70136: AND
70137: IFFALSE 70172
70139: GO 70141
70141: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
70142: LD_INT 28
70144: PPUSH
70145: LD_OWVAR 2
70149: PPUSH
70150: LD_INT 2
70152: PPUSH
70153: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
70157: LD_INT 30
70159: PPUSH
70160: LD_OWVAR 2
70164: PPUSH
70165: LD_INT 2
70167: PPUSH
70168: CALL_OW 322
// end ;
70172: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
70173: LD_EXP 38
70177: PUSH
70178: LD_EXP 90
70182: AND
70183: IFFALSE 70304
70185: GO 70187
70187: DISABLE
70188: LD_INT 0
70190: PPUSH
70191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70192: LD_ADDR_VAR 0 2
70196: PUSH
70197: LD_INT 22
70199: PUSH
70200: LD_OWVAR 2
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 21
70211: PUSH
70212: LD_INT 1
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 3
70221: PUSH
70222: LD_INT 23
70224: PUSH
70225: LD_INT 0
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: LIST
70240: PPUSH
70241: CALL_OW 69
70245: ST_TO_ADDR
// if not tmp then
70246: LD_VAR 0 2
70250: NOT
70251: IFFALSE 70255
// exit ;
70253: GO 70304
// for i in tmp do
70255: LD_ADDR_VAR 0 1
70259: PUSH
70260: LD_VAR 0 2
70264: PUSH
70265: FOR_IN
70266: IFFALSE 70302
// begin if Crawls ( i ) then
70268: LD_VAR 0 1
70272: PPUSH
70273: CALL_OW 318
70277: IFFALSE 70288
// ComWalk ( i ) ;
70279: LD_VAR 0 1
70283: PPUSH
70284: CALL_OW 138
// SetClass ( i , 2 ) ;
70288: LD_VAR 0 1
70292: PPUSH
70293: LD_INT 2
70295: PPUSH
70296: CALL_OW 336
// end ;
70300: GO 70265
70302: POP
70303: POP
// end ;
70304: PPOPN 2
70306: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
70307: LD_EXP 38
70311: PUSH
70312: LD_EXP 91
70316: AND
70317: IFFALSE 70605
70319: GO 70321
70321: DISABLE
70322: LD_INT 0
70324: PPUSH
70325: PPUSH
70326: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
70327: LD_OWVAR 2
70331: PPUSH
70332: LD_INT 9
70334: PPUSH
70335: LD_INT 1
70337: PPUSH
70338: LD_INT 1
70340: PPUSH
70341: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
70345: LD_INT 9
70347: PPUSH
70348: LD_OWVAR 2
70352: PPUSH
70353: CALL_OW 343
// uc_side := 9 ;
70357: LD_ADDR_OWVAR 20
70361: PUSH
70362: LD_INT 9
70364: ST_TO_ADDR
// uc_nation := 2 ;
70365: LD_ADDR_OWVAR 21
70369: PUSH
70370: LD_INT 2
70372: ST_TO_ADDR
// hc_name := Dark Warrior ;
70373: LD_ADDR_OWVAR 26
70377: PUSH
70378: LD_STRING Dark Warrior
70380: ST_TO_ADDR
// hc_gallery :=  ;
70381: LD_ADDR_OWVAR 33
70385: PUSH
70386: LD_STRING 
70388: ST_TO_ADDR
// hc_noskilllimit := true ;
70389: LD_ADDR_OWVAR 76
70393: PUSH
70394: LD_INT 1
70396: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
70397: LD_ADDR_OWVAR 31
70401: PUSH
70402: LD_INT 30
70404: PUSH
70405: LD_INT 30
70407: PUSH
70408: LD_INT 30
70410: PUSH
70411: LD_INT 30
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: ST_TO_ADDR
// un := CreateHuman ;
70420: LD_ADDR_VAR 0 3
70424: PUSH
70425: CALL_OW 44
70429: ST_TO_ADDR
// hc_noskilllimit := false ;
70430: LD_ADDR_OWVAR 76
70434: PUSH
70435: LD_INT 0
70437: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70438: LD_VAR 0 3
70442: PPUSH
70443: LD_INT 1
70445: PPUSH
70446: CALL_OW 51
// ToLua ( playRanger() ) ;
70450: LD_STRING playRanger()
70452: PPUSH
70453: CALL_OW 559
// p := 0 ;
70457: LD_ADDR_VAR 0 2
70461: PUSH
70462: LD_INT 0
70464: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70465: LD_INT 35
70467: PPUSH
70468: CALL_OW 67
// p := p + 1 ;
70472: LD_ADDR_VAR 0 2
70476: PUSH
70477: LD_VAR 0 2
70481: PUSH
70482: LD_INT 1
70484: PLUS
70485: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70486: LD_VAR 0 3
70490: PPUSH
70491: CALL_OW 256
70495: PUSH
70496: LD_INT 1000
70498: LESS
70499: IFFALSE 70513
// SetLives ( un , 1000 ) ;
70501: LD_VAR 0 3
70505: PPUSH
70506: LD_INT 1000
70508: PPUSH
70509: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70513: LD_VAR 0 3
70517: PPUSH
70518: LD_INT 81
70520: PUSH
70521: LD_OWVAR 2
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 91
70532: PUSH
70533: LD_VAR 0 3
70537: PUSH
70538: LD_INT 30
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: LIST
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PPUSH
70550: CALL_OW 69
70554: PPUSH
70555: LD_VAR 0 3
70559: PPUSH
70560: CALL_OW 74
70564: PPUSH
70565: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70569: LD_VAR 0 2
70573: PUSH
70574: LD_INT 80
70576: GREATER
70577: PUSH
70578: LD_VAR 0 3
70582: PPUSH
70583: CALL_OW 301
70587: OR
70588: IFFALSE 70465
// if un then
70590: LD_VAR 0 3
70594: IFFALSE 70605
// RemoveUnit ( un ) ;
70596: LD_VAR 0 3
70600: PPUSH
70601: CALL_OW 64
// end ;
70605: PPOPN 3
70607: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70608: LD_EXP 92
70612: IFFALSE 70728
70614: GO 70616
70616: DISABLE
70617: LD_INT 0
70619: PPUSH
70620: PPUSH
70621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70622: LD_ADDR_VAR 0 2
70626: PUSH
70627: LD_INT 81
70629: PUSH
70630: LD_OWVAR 2
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 21
70641: PUSH
70642: LD_INT 1
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PPUSH
70653: CALL_OW 69
70657: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70658: LD_STRING playComputer()
70660: PPUSH
70661: CALL_OW 559
// if not tmp then
70665: LD_VAR 0 2
70669: NOT
70670: IFFALSE 70674
// exit ;
70672: GO 70728
// for i in tmp do
70674: LD_ADDR_VAR 0 1
70678: PUSH
70679: LD_VAR 0 2
70683: PUSH
70684: FOR_IN
70685: IFFALSE 70726
// for j := 1 to 4 do
70687: LD_ADDR_VAR 0 3
70691: PUSH
70692: DOUBLE
70693: LD_INT 1
70695: DEC
70696: ST_TO_ADDR
70697: LD_INT 4
70699: PUSH
70700: FOR_TO
70701: IFFALSE 70722
// SetSkill ( i , j , 10 ) ;
70703: LD_VAR 0 1
70707: PPUSH
70708: LD_VAR 0 3
70712: PPUSH
70713: LD_INT 10
70715: PPUSH
70716: CALL_OW 237
70720: GO 70700
70722: POP
70723: POP
70724: GO 70684
70726: POP
70727: POP
// end ;
70728: PPOPN 3
70730: END
// every 0 0$1 trigger s30 do var i , tmp ;
70731: LD_EXP 93
70735: IFFALSE 70804
70737: GO 70739
70739: DISABLE
70740: LD_INT 0
70742: PPUSH
70743: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70744: LD_ADDR_VAR 0 2
70748: PUSH
70749: LD_INT 22
70751: PUSH
70752: LD_OWVAR 2
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PPUSH
70761: CALL_OW 69
70765: ST_TO_ADDR
// if not tmp then
70766: LD_VAR 0 2
70770: NOT
70771: IFFALSE 70775
// exit ;
70773: GO 70804
// for i in tmp do
70775: LD_ADDR_VAR 0 1
70779: PUSH
70780: LD_VAR 0 2
70784: PUSH
70785: FOR_IN
70786: IFFALSE 70802
// SetLives ( i , 300 ) ;
70788: LD_VAR 0 1
70792: PPUSH
70793: LD_INT 300
70795: PPUSH
70796: CALL_OW 234
70800: GO 70785
70802: POP
70803: POP
// end ;
70804: PPOPN 2
70806: END
// every 0 0$1 trigger s60 do var i , tmp ;
70807: LD_EXP 94
70811: IFFALSE 70880
70813: GO 70815
70815: DISABLE
70816: LD_INT 0
70818: PPUSH
70819: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70820: LD_ADDR_VAR 0 2
70824: PUSH
70825: LD_INT 22
70827: PUSH
70828: LD_OWVAR 2
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PPUSH
70837: CALL_OW 69
70841: ST_TO_ADDR
// if not tmp then
70842: LD_VAR 0 2
70846: NOT
70847: IFFALSE 70851
// exit ;
70849: GO 70880
// for i in tmp do
70851: LD_ADDR_VAR 0 1
70855: PUSH
70856: LD_VAR 0 2
70860: PUSH
70861: FOR_IN
70862: IFFALSE 70878
// SetLives ( i , 600 ) ;
70864: LD_VAR 0 1
70868: PPUSH
70869: LD_INT 600
70871: PPUSH
70872: CALL_OW 234
70876: GO 70861
70878: POP
70879: POP
// end ;
70880: PPOPN 2
70882: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70883: LD_INT 0
70885: PPUSH
// case cmd of 301 :
70886: LD_VAR 0 1
70890: PUSH
70891: LD_INT 301
70893: DOUBLE
70894: EQUAL
70895: IFTRUE 70899
70897: GO 70931
70899: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70900: LD_VAR 0 6
70904: PPUSH
70905: LD_VAR 0 7
70909: PPUSH
70910: LD_VAR 0 8
70914: PPUSH
70915: LD_VAR 0 4
70919: PPUSH
70920: LD_VAR 0 5
70924: PPUSH
70925: CALL 72140 0 5
70929: GO 71052
70931: LD_INT 302
70933: DOUBLE
70934: EQUAL
70935: IFTRUE 70939
70937: GO 70976
70939: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70940: LD_VAR 0 6
70944: PPUSH
70945: LD_VAR 0 7
70949: PPUSH
70950: LD_VAR 0 8
70954: PPUSH
70955: LD_VAR 0 9
70959: PPUSH
70960: LD_VAR 0 4
70964: PPUSH
70965: LD_VAR 0 5
70969: PPUSH
70970: CALL 72231 0 6
70974: GO 71052
70976: LD_INT 303
70978: DOUBLE
70979: EQUAL
70980: IFTRUE 70984
70982: GO 71021
70984: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70985: LD_VAR 0 6
70989: PPUSH
70990: LD_VAR 0 7
70994: PPUSH
70995: LD_VAR 0 8
70999: PPUSH
71000: LD_VAR 0 9
71004: PPUSH
71005: LD_VAR 0 4
71009: PPUSH
71010: LD_VAR 0 5
71014: PPUSH
71015: CALL 71057 0 6
71019: GO 71052
71021: LD_INT 304
71023: DOUBLE
71024: EQUAL
71025: IFTRUE 71029
71027: GO 71051
71029: POP
// hHackTeleport ( unit , x , y ) ; end ;
71030: LD_VAR 0 2
71034: PPUSH
71035: LD_VAR 0 4
71039: PPUSH
71040: LD_VAR 0 5
71044: PPUSH
71045: CALL 72824 0 3
71049: GO 71052
71051: POP
// end ;
71052: LD_VAR 0 12
71056: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
71057: LD_INT 0
71059: PPUSH
71060: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
71061: LD_VAR 0 1
71065: PUSH
71066: LD_INT 1
71068: LESS
71069: PUSH
71070: LD_VAR 0 1
71074: PUSH
71075: LD_INT 3
71077: GREATER
71078: OR
71079: PUSH
71080: LD_VAR 0 5
71084: PPUSH
71085: LD_VAR 0 6
71089: PPUSH
71090: CALL_OW 428
71094: OR
71095: IFFALSE 71099
// exit ;
71097: GO 71827
// uc_side := your_side ;
71099: LD_ADDR_OWVAR 20
71103: PUSH
71104: LD_OWVAR 2
71108: ST_TO_ADDR
// uc_nation := nation ;
71109: LD_ADDR_OWVAR 21
71113: PUSH
71114: LD_VAR 0 1
71118: ST_TO_ADDR
// bc_level = 1 ;
71119: LD_ADDR_OWVAR 43
71123: PUSH
71124: LD_INT 1
71126: ST_TO_ADDR
// case btype of 1 :
71127: LD_VAR 0 2
71131: PUSH
71132: LD_INT 1
71134: DOUBLE
71135: EQUAL
71136: IFTRUE 71140
71138: GO 71151
71140: POP
// bc_type := b_depot ; 2 :
71141: LD_ADDR_OWVAR 42
71145: PUSH
71146: LD_INT 0
71148: ST_TO_ADDR
71149: GO 71771
71151: LD_INT 2
71153: DOUBLE
71154: EQUAL
71155: IFTRUE 71159
71157: GO 71170
71159: POP
// bc_type := b_warehouse ; 3 :
71160: LD_ADDR_OWVAR 42
71164: PUSH
71165: LD_INT 1
71167: ST_TO_ADDR
71168: GO 71771
71170: LD_INT 3
71172: DOUBLE
71173: EQUAL
71174: IFTRUE 71178
71176: GO 71189
71178: POP
// bc_type := b_lab ; 4 .. 9 :
71179: LD_ADDR_OWVAR 42
71183: PUSH
71184: LD_INT 6
71186: ST_TO_ADDR
71187: GO 71771
71189: LD_INT 4
71191: DOUBLE
71192: GREATEREQUAL
71193: IFFALSE 71201
71195: LD_INT 9
71197: DOUBLE
71198: LESSEQUAL
71199: IFTRUE 71203
71201: GO 71263
71203: POP
// begin bc_type := b_lab_half ;
71204: LD_ADDR_OWVAR 42
71208: PUSH
71209: LD_INT 7
71211: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
71212: LD_ADDR_OWVAR 44
71216: PUSH
71217: LD_INT 10
71219: PUSH
71220: LD_INT 11
71222: PUSH
71223: LD_INT 12
71225: PUSH
71226: LD_INT 15
71228: PUSH
71229: LD_INT 14
71231: PUSH
71232: LD_INT 13
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: PUSH
71243: LD_VAR 0 2
71247: PUSH
71248: LD_INT 3
71250: MINUS
71251: ARRAY
71252: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
71253: LD_ADDR_OWVAR 45
71257: PUSH
71258: LD_INT 9
71260: ST_TO_ADDR
// end ; 10 .. 13 :
71261: GO 71771
71263: LD_INT 10
71265: DOUBLE
71266: GREATEREQUAL
71267: IFFALSE 71275
71269: LD_INT 13
71271: DOUBLE
71272: LESSEQUAL
71273: IFTRUE 71277
71275: GO 71354
71277: POP
// begin bc_type := b_lab_full ;
71278: LD_ADDR_OWVAR 42
71282: PUSH
71283: LD_INT 8
71285: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
71286: LD_ADDR_OWVAR 44
71290: PUSH
71291: LD_INT 10
71293: PUSH
71294: LD_INT 12
71296: PUSH
71297: LD_INT 14
71299: PUSH
71300: LD_INT 13
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: PUSH
71309: LD_VAR 0 2
71313: PUSH
71314: LD_INT 9
71316: MINUS
71317: ARRAY
71318: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
71319: LD_ADDR_OWVAR 45
71323: PUSH
71324: LD_INT 11
71326: PUSH
71327: LD_INT 15
71329: PUSH
71330: LD_INT 12
71332: PUSH
71333: LD_INT 15
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: PUSH
71342: LD_VAR 0 2
71346: PUSH
71347: LD_INT 9
71349: MINUS
71350: ARRAY
71351: ST_TO_ADDR
// end ; 14 :
71352: GO 71771
71354: LD_INT 14
71356: DOUBLE
71357: EQUAL
71358: IFTRUE 71362
71360: GO 71373
71362: POP
// bc_type := b_workshop ; 15 :
71363: LD_ADDR_OWVAR 42
71367: PUSH
71368: LD_INT 2
71370: ST_TO_ADDR
71371: GO 71771
71373: LD_INT 15
71375: DOUBLE
71376: EQUAL
71377: IFTRUE 71381
71379: GO 71392
71381: POP
// bc_type := b_factory ; 16 :
71382: LD_ADDR_OWVAR 42
71386: PUSH
71387: LD_INT 3
71389: ST_TO_ADDR
71390: GO 71771
71392: LD_INT 16
71394: DOUBLE
71395: EQUAL
71396: IFTRUE 71400
71398: GO 71411
71400: POP
// bc_type := b_ext_gun ; 17 :
71401: LD_ADDR_OWVAR 42
71405: PUSH
71406: LD_INT 17
71408: ST_TO_ADDR
71409: GO 71771
71411: LD_INT 17
71413: DOUBLE
71414: EQUAL
71415: IFTRUE 71419
71417: GO 71447
71419: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
71420: LD_ADDR_OWVAR 42
71424: PUSH
71425: LD_INT 19
71427: PUSH
71428: LD_INT 23
71430: PUSH
71431: LD_INT 19
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: LIST
71438: PUSH
71439: LD_VAR 0 1
71443: ARRAY
71444: ST_TO_ADDR
71445: GO 71771
71447: LD_INT 18
71449: DOUBLE
71450: EQUAL
71451: IFTRUE 71455
71453: GO 71466
71455: POP
// bc_type := b_ext_radar ; 19 :
71456: LD_ADDR_OWVAR 42
71460: PUSH
71461: LD_INT 20
71463: ST_TO_ADDR
71464: GO 71771
71466: LD_INT 19
71468: DOUBLE
71469: EQUAL
71470: IFTRUE 71474
71472: GO 71485
71474: POP
// bc_type := b_ext_radio ; 20 :
71475: LD_ADDR_OWVAR 42
71479: PUSH
71480: LD_INT 22
71482: ST_TO_ADDR
71483: GO 71771
71485: LD_INT 20
71487: DOUBLE
71488: EQUAL
71489: IFTRUE 71493
71491: GO 71504
71493: POP
// bc_type := b_ext_siberium ; 21 :
71494: LD_ADDR_OWVAR 42
71498: PUSH
71499: LD_INT 21
71501: ST_TO_ADDR
71502: GO 71771
71504: LD_INT 21
71506: DOUBLE
71507: EQUAL
71508: IFTRUE 71512
71510: GO 71523
71512: POP
// bc_type := b_ext_computer ; 22 :
71513: LD_ADDR_OWVAR 42
71517: PUSH
71518: LD_INT 24
71520: ST_TO_ADDR
71521: GO 71771
71523: LD_INT 22
71525: DOUBLE
71526: EQUAL
71527: IFTRUE 71531
71529: GO 71542
71531: POP
// bc_type := b_ext_track ; 23 :
71532: LD_ADDR_OWVAR 42
71536: PUSH
71537: LD_INT 16
71539: ST_TO_ADDR
71540: GO 71771
71542: LD_INT 23
71544: DOUBLE
71545: EQUAL
71546: IFTRUE 71550
71548: GO 71561
71550: POP
// bc_type := b_ext_laser ; 24 :
71551: LD_ADDR_OWVAR 42
71555: PUSH
71556: LD_INT 25
71558: ST_TO_ADDR
71559: GO 71771
71561: LD_INT 24
71563: DOUBLE
71564: EQUAL
71565: IFTRUE 71569
71567: GO 71580
71569: POP
// bc_type := b_control_tower ; 25 :
71570: LD_ADDR_OWVAR 42
71574: PUSH
71575: LD_INT 36
71577: ST_TO_ADDR
71578: GO 71771
71580: LD_INT 25
71582: DOUBLE
71583: EQUAL
71584: IFTRUE 71588
71586: GO 71599
71588: POP
// bc_type := b_breastwork ; 26 :
71589: LD_ADDR_OWVAR 42
71593: PUSH
71594: LD_INT 31
71596: ST_TO_ADDR
71597: GO 71771
71599: LD_INT 26
71601: DOUBLE
71602: EQUAL
71603: IFTRUE 71607
71605: GO 71618
71607: POP
// bc_type := b_bunker ; 27 :
71608: LD_ADDR_OWVAR 42
71612: PUSH
71613: LD_INT 32
71615: ST_TO_ADDR
71616: GO 71771
71618: LD_INT 27
71620: DOUBLE
71621: EQUAL
71622: IFTRUE 71626
71624: GO 71637
71626: POP
// bc_type := b_turret ; 28 :
71627: LD_ADDR_OWVAR 42
71631: PUSH
71632: LD_INT 33
71634: ST_TO_ADDR
71635: GO 71771
71637: LD_INT 28
71639: DOUBLE
71640: EQUAL
71641: IFTRUE 71645
71643: GO 71656
71645: POP
// bc_type := b_armoury ; 29 :
71646: LD_ADDR_OWVAR 42
71650: PUSH
71651: LD_INT 4
71653: ST_TO_ADDR
71654: GO 71771
71656: LD_INT 29
71658: DOUBLE
71659: EQUAL
71660: IFTRUE 71664
71662: GO 71675
71664: POP
// bc_type := b_barracks ; 30 :
71665: LD_ADDR_OWVAR 42
71669: PUSH
71670: LD_INT 5
71672: ST_TO_ADDR
71673: GO 71771
71675: LD_INT 30
71677: DOUBLE
71678: EQUAL
71679: IFTRUE 71683
71681: GO 71694
71683: POP
// bc_type := b_solar_power ; 31 :
71684: LD_ADDR_OWVAR 42
71688: PUSH
71689: LD_INT 27
71691: ST_TO_ADDR
71692: GO 71771
71694: LD_INT 31
71696: DOUBLE
71697: EQUAL
71698: IFTRUE 71702
71700: GO 71713
71702: POP
// bc_type := b_oil_power ; 32 :
71703: LD_ADDR_OWVAR 42
71707: PUSH
71708: LD_INT 26
71710: ST_TO_ADDR
71711: GO 71771
71713: LD_INT 32
71715: DOUBLE
71716: EQUAL
71717: IFTRUE 71721
71719: GO 71732
71721: POP
// bc_type := b_siberite_power ; 33 :
71722: LD_ADDR_OWVAR 42
71726: PUSH
71727: LD_INT 28
71729: ST_TO_ADDR
71730: GO 71771
71732: LD_INT 33
71734: DOUBLE
71735: EQUAL
71736: IFTRUE 71740
71738: GO 71751
71740: POP
// bc_type := b_oil_mine ; 34 :
71741: LD_ADDR_OWVAR 42
71745: PUSH
71746: LD_INT 29
71748: ST_TO_ADDR
71749: GO 71771
71751: LD_INT 34
71753: DOUBLE
71754: EQUAL
71755: IFTRUE 71759
71757: GO 71770
71759: POP
// bc_type := b_siberite_mine ; end ;
71760: LD_ADDR_OWVAR 42
71764: PUSH
71765: LD_INT 30
71767: ST_TO_ADDR
71768: GO 71771
71770: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71771: LD_ADDR_VAR 0 8
71775: PUSH
71776: LD_VAR 0 5
71780: PPUSH
71781: LD_VAR 0 6
71785: PPUSH
71786: LD_VAR 0 3
71790: PPUSH
71791: CALL_OW 47
71795: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71796: LD_OWVAR 42
71800: PUSH
71801: LD_INT 32
71803: PUSH
71804: LD_INT 33
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: IN
71811: IFFALSE 71827
// PlaceWeaponTurret ( b , weapon ) ;
71813: LD_VAR 0 8
71817: PPUSH
71818: LD_VAR 0 4
71822: PPUSH
71823: CALL_OW 431
// end ;
71827: LD_VAR 0 7
71831: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71832: LD_INT 0
71834: PPUSH
71835: PPUSH
71836: PPUSH
71837: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71838: LD_ADDR_VAR 0 4
71842: PUSH
71843: LD_INT 22
71845: PUSH
71846: LD_OWVAR 2
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: PUSH
71855: LD_INT 2
71857: PUSH
71858: LD_INT 30
71860: PUSH
71861: LD_INT 0
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 30
71870: PUSH
71871: LD_INT 1
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: LIST
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PPUSH
71887: CALL_OW 69
71891: ST_TO_ADDR
// if not tmp then
71892: LD_VAR 0 4
71896: NOT
71897: IFFALSE 71901
// exit ;
71899: GO 71960
// for i in tmp do
71901: LD_ADDR_VAR 0 2
71905: PUSH
71906: LD_VAR 0 4
71910: PUSH
71911: FOR_IN
71912: IFFALSE 71958
// for j = 1 to 3 do
71914: LD_ADDR_VAR 0 3
71918: PUSH
71919: DOUBLE
71920: LD_INT 1
71922: DEC
71923: ST_TO_ADDR
71924: LD_INT 3
71926: PUSH
71927: FOR_TO
71928: IFFALSE 71954
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71930: LD_VAR 0 2
71934: PPUSH
71935: CALL_OW 274
71939: PPUSH
71940: LD_VAR 0 3
71944: PPUSH
71945: LD_INT 99999
71947: PPUSH
71948: CALL_OW 277
71952: GO 71927
71954: POP
71955: POP
71956: GO 71911
71958: POP
71959: POP
// end ;
71960: LD_VAR 0 1
71964: RET
// export function hHackSetLevel10 ; var i , j ; begin
71965: LD_INT 0
71967: PPUSH
71968: PPUSH
71969: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71970: LD_ADDR_VAR 0 2
71974: PUSH
71975: LD_INT 21
71977: PUSH
71978: LD_INT 1
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PPUSH
71985: CALL_OW 69
71989: PUSH
71990: FOR_IN
71991: IFFALSE 72043
// if IsSelected ( i ) then
71993: LD_VAR 0 2
71997: PPUSH
71998: CALL_OW 306
72002: IFFALSE 72041
// begin for j := 1 to 4 do
72004: LD_ADDR_VAR 0 3
72008: PUSH
72009: DOUBLE
72010: LD_INT 1
72012: DEC
72013: ST_TO_ADDR
72014: LD_INT 4
72016: PUSH
72017: FOR_TO
72018: IFFALSE 72039
// SetSkill ( i , j , 10 ) ;
72020: LD_VAR 0 2
72024: PPUSH
72025: LD_VAR 0 3
72029: PPUSH
72030: LD_INT 10
72032: PPUSH
72033: CALL_OW 237
72037: GO 72017
72039: POP
72040: POP
// end ;
72041: GO 71990
72043: POP
72044: POP
// end ;
72045: LD_VAR 0 1
72049: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
72050: LD_INT 0
72052: PPUSH
72053: PPUSH
72054: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
72055: LD_ADDR_VAR 0 2
72059: PUSH
72060: LD_INT 22
72062: PUSH
72063: LD_OWVAR 2
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 21
72074: PUSH
72075: LD_INT 1
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PPUSH
72086: CALL_OW 69
72090: PUSH
72091: FOR_IN
72092: IFFALSE 72133
// begin for j := 1 to 4 do
72094: LD_ADDR_VAR 0 3
72098: PUSH
72099: DOUBLE
72100: LD_INT 1
72102: DEC
72103: ST_TO_ADDR
72104: LD_INT 4
72106: PUSH
72107: FOR_TO
72108: IFFALSE 72129
// SetSkill ( i , j , 10 ) ;
72110: LD_VAR 0 2
72114: PPUSH
72115: LD_VAR 0 3
72119: PPUSH
72120: LD_INT 10
72122: PPUSH
72123: CALL_OW 237
72127: GO 72107
72129: POP
72130: POP
// end ;
72131: GO 72091
72133: POP
72134: POP
// end ;
72135: LD_VAR 0 1
72139: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
72140: LD_INT 0
72142: PPUSH
// uc_side := your_side ;
72143: LD_ADDR_OWVAR 20
72147: PUSH
72148: LD_OWVAR 2
72152: ST_TO_ADDR
// uc_nation := nation ;
72153: LD_ADDR_OWVAR 21
72157: PUSH
72158: LD_VAR 0 1
72162: ST_TO_ADDR
// InitHc ;
72163: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
72167: LD_INT 0
72169: PPUSH
72170: LD_VAR 0 2
72174: PPUSH
72175: LD_VAR 0 3
72179: PPUSH
72180: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
72184: LD_VAR 0 4
72188: PPUSH
72189: LD_VAR 0 5
72193: PPUSH
72194: CALL_OW 428
72198: PUSH
72199: LD_INT 0
72201: EQUAL
72202: IFFALSE 72226
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
72204: CALL_OW 44
72208: PPUSH
72209: LD_VAR 0 4
72213: PPUSH
72214: LD_VAR 0 5
72218: PPUSH
72219: LD_INT 1
72221: PPUSH
72222: CALL_OW 48
// end ;
72226: LD_VAR 0 6
72230: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
72231: LD_INT 0
72233: PPUSH
72234: PPUSH
// uc_side := your_side ;
72235: LD_ADDR_OWVAR 20
72239: PUSH
72240: LD_OWVAR 2
72244: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
72245: LD_VAR 0 1
72249: PUSH
72250: LD_INT 1
72252: PUSH
72253: LD_INT 2
72255: PUSH
72256: LD_INT 3
72258: PUSH
72259: LD_INT 4
72261: PUSH
72262: LD_INT 5
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: IN
72272: IFFALSE 72284
// uc_nation := nation_american else
72274: LD_ADDR_OWVAR 21
72278: PUSH
72279: LD_INT 1
72281: ST_TO_ADDR
72282: GO 72327
// if chassis in [ 11 , 12 , 13 , 14 ] then
72284: LD_VAR 0 1
72288: PUSH
72289: LD_INT 11
72291: PUSH
72292: LD_INT 12
72294: PUSH
72295: LD_INT 13
72297: PUSH
72298: LD_INT 14
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: IN
72307: IFFALSE 72319
// uc_nation := nation_arabian else
72309: LD_ADDR_OWVAR 21
72313: PUSH
72314: LD_INT 2
72316: ST_TO_ADDR
72317: GO 72327
// uc_nation := nation_russian ;
72319: LD_ADDR_OWVAR 21
72323: PUSH
72324: LD_INT 3
72326: ST_TO_ADDR
// vc_chassis := chassis ;
72327: LD_ADDR_OWVAR 37
72331: PUSH
72332: LD_VAR 0 1
72336: ST_TO_ADDR
// vc_engine := engine ;
72337: LD_ADDR_OWVAR 39
72341: PUSH
72342: LD_VAR 0 2
72346: ST_TO_ADDR
// vc_control := control ;
72347: LD_ADDR_OWVAR 38
72351: PUSH
72352: LD_VAR 0 3
72356: ST_TO_ADDR
// vc_weapon := weapon ;
72357: LD_ADDR_OWVAR 40
72361: PUSH
72362: LD_VAR 0 4
72366: ST_TO_ADDR
// un := CreateVehicle ;
72367: LD_ADDR_VAR 0 8
72371: PUSH
72372: CALL_OW 45
72376: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
72377: LD_VAR 0 8
72381: PPUSH
72382: LD_INT 0
72384: PPUSH
72385: LD_INT 5
72387: PPUSH
72388: CALL_OW 12
72392: PPUSH
72393: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
72397: LD_VAR 0 8
72401: PPUSH
72402: LD_VAR 0 5
72406: PPUSH
72407: LD_VAR 0 6
72411: PPUSH
72412: LD_INT 1
72414: PPUSH
72415: CALL_OW 48
// end ;
72419: LD_VAR 0 7
72423: RET
// export hInvincible ; every 1 do
72424: GO 72426
72426: DISABLE
// hInvincible := [ ] ;
72427: LD_ADDR_EXP 95
72431: PUSH
72432: EMPTY
72433: ST_TO_ADDR
72434: END
// every 10 do var i ;
72435: GO 72437
72437: DISABLE
72438: LD_INT 0
72440: PPUSH
// begin enable ;
72441: ENABLE
// if not hInvincible then
72442: LD_EXP 95
72446: NOT
72447: IFFALSE 72451
// exit ;
72449: GO 72495
// for i in hInvincible do
72451: LD_ADDR_VAR 0 1
72455: PUSH
72456: LD_EXP 95
72460: PUSH
72461: FOR_IN
72462: IFFALSE 72493
// if GetLives ( i ) < 1000 then
72464: LD_VAR 0 1
72468: PPUSH
72469: CALL_OW 256
72473: PUSH
72474: LD_INT 1000
72476: LESS
72477: IFFALSE 72491
// SetLives ( i , 1000 ) ;
72479: LD_VAR 0 1
72483: PPUSH
72484: LD_INT 1000
72486: PPUSH
72487: CALL_OW 234
72491: GO 72461
72493: POP
72494: POP
// end ;
72495: PPOPN 1
72497: END
// export function hHackInvincible ; var i ; begin
72498: LD_INT 0
72500: PPUSH
72501: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72502: LD_ADDR_VAR 0 2
72506: PUSH
72507: LD_INT 2
72509: PUSH
72510: LD_INT 21
72512: PUSH
72513: LD_INT 1
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 21
72522: PUSH
72523: LD_INT 2
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: LIST
72534: PPUSH
72535: CALL_OW 69
72539: PUSH
72540: FOR_IN
72541: IFFALSE 72602
// if IsSelected ( i ) then
72543: LD_VAR 0 2
72547: PPUSH
72548: CALL_OW 306
72552: IFFALSE 72600
// begin if i in hInvincible then
72554: LD_VAR 0 2
72558: PUSH
72559: LD_EXP 95
72563: IN
72564: IFFALSE 72584
// hInvincible := hInvincible diff i else
72566: LD_ADDR_EXP 95
72570: PUSH
72571: LD_EXP 95
72575: PUSH
72576: LD_VAR 0 2
72580: DIFF
72581: ST_TO_ADDR
72582: GO 72600
// hInvincible := hInvincible union i ;
72584: LD_ADDR_EXP 95
72588: PUSH
72589: LD_EXP 95
72593: PUSH
72594: LD_VAR 0 2
72598: UNION
72599: ST_TO_ADDR
// end ;
72600: GO 72540
72602: POP
72603: POP
// end ;
72604: LD_VAR 0 1
72608: RET
// export function hHackInvisible ; var i , j ; begin
72609: LD_INT 0
72611: PPUSH
72612: PPUSH
72613: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72614: LD_ADDR_VAR 0 2
72618: PUSH
72619: LD_INT 21
72621: PUSH
72622: LD_INT 1
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PPUSH
72629: CALL_OW 69
72633: PUSH
72634: FOR_IN
72635: IFFALSE 72659
// if IsSelected ( i ) then
72637: LD_VAR 0 2
72641: PPUSH
72642: CALL_OW 306
72646: IFFALSE 72657
// ComForceInvisible ( i ) ;
72648: LD_VAR 0 2
72652: PPUSH
72653: CALL_OW 496
72657: GO 72634
72659: POP
72660: POP
// end ;
72661: LD_VAR 0 1
72665: RET
// export function hHackChangeYourSide ; begin
72666: LD_INT 0
72668: PPUSH
// if your_side = 8 then
72669: LD_OWVAR 2
72673: PUSH
72674: LD_INT 8
72676: EQUAL
72677: IFFALSE 72689
// your_side := 0 else
72679: LD_ADDR_OWVAR 2
72683: PUSH
72684: LD_INT 0
72686: ST_TO_ADDR
72687: GO 72703
// your_side := your_side + 1 ;
72689: LD_ADDR_OWVAR 2
72693: PUSH
72694: LD_OWVAR 2
72698: PUSH
72699: LD_INT 1
72701: PLUS
72702: ST_TO_ADDR
// end ;
72703: LD_VAR 0 1
72707: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72708: LD_INT 0
72710: PPUSH
72711: PPUSH
72712: PPUSH
// for i in all_units do
72713: LD_ADDR_VAR 0 2
72717: PUSH
72718: LD_OWVAR 3
72722: PUSH
72723: FOR_IN
72724: IFFALSE 72802
// if IsSelected ( i ) then
72726: LD_VAR 0 2
72730: PPUSH
72731: CALL_OW 306
72735: IFFALSE 72800
// begin j := GetSide ( i ) ;
72737: LD_ADDR_VAR 0 3
72741: PUSH
72742: LD_VAR 0 2
72746: PPUSH
72747: CALL_OW 255
72751: ST_TO_ADDR
// if j = 8 then
72752: LD_VAR 0 3
72756: PUSH
72757: LD_INT 8
72759: EQUAL
72760: IFFALSE 72772
// j := 0 else
72762: LD_ADDR_VAR 0 3
72766: PUSH
72767: LD_INT 0
72769: ST_TO_ADDR
72770: GO 72786
// j := j + 1 ;
72772: LD_ADDR_VAR 0 3
72776: PUSH
72777: LD_VAR 0 3
72781: PUSH
72782: LD_INT 1
72784: PLUS
72785: ST_TO_ADDR
// SetSide ( i , j ) ;
72786: LD_VAR 0 2
72790: PPUSH
72791: LD_VAR 0 3
72795: PPUSH
72796: CALL_OW 235
// end ;
72800: GO 72723
72802: POP
72803: POP
// end ;
72804: LD_VAR 0 1
72808: RET
// export function hHackFog ; begin
72809: LD_INT 0
72811: PPUSH
// FogOff ( true ) ;
72812: LD_INT 1
72814: PPUSH
72815: CALL_OW 344
// end ;
72819: LD_VAR 0 1
72823: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72824: LD_INT 0
72826: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72827: LD_VAR 0 1
72831: PPUSH
72832: LD_VAR 0 2
72836: PPUSH
72837: LD_VAR 0 3
72841: PPUSH
72842: LD_INT 1
72844: PPUSH
72845: LD_INT 1
72847: PPUSH
72848: CALL_OW 483
// CenterOnXY ( x , y ) ;
72852: LD_VAR 0 2
72856: PPUSH
72857: LD_VAR 0 3
72861: PPUSH
72862: CALL_OW 84
// end ;
72866: LD_VAR 0 4
72870: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72871: LD_INT 0
72873: PPUSH
72874: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72875: LD_VAR 0 1
72879: NOT
72880: PUSH
72881: LD_VAR 0 2
72885: PPUSH
72886: LD_VAR 0 3
72890: PPUSH
72891: CALL_OW 488
72895: NOT
72896: OR
72897: PUSH
72898: LD_VAR 0 1
72902: PPUSH
72903: CALL_OW 266
72907: PUSH
72908: LD_INT 3
72910: NONEQUAL
72911: PUSH
72912: LD_VAR 0 1
72916: PPUSH
72917: CALL_OW 247
72921: PUSH
72922: LD_INT 1
72924: EQUAL
72925: NOT
72926: AND
72927: OR
72928: IFFALSE 72932
// exit ;
72930: GO 73214
// if GetType ( factory ) = unit_human then
72932: LD_VAR 0 1
72936: PPUSH
72937: CALL_OW 247
72941: PUSH
72942: LD_INT 1
72944: EQUAL
72945: IFFALSE 72962
// factory := IsInUnit ( factory ) ;
72947: LD_ADDR_VAR 0 1
72951: PUSH
72952: LD_VAR 0 1
72956: PPUSH
72957: CALL_OW 310
72961: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72962: LD_VAR 0 1
72966: PPUSH
72967: CALL_OW 266
72971: PUSH
72972: LD_INT 3
72974: NONEQUAL
72975: IFFALSE 72979
// exit ;
72977: GO 73214
// for i := 1 to Count ( factoryWaypoints ) do
72979: LD_ADDR_VAR 0 5
72983: PUSH
72984: DOUBLE
72985: LD_INT 1
72987: DEC
72988: ST_TO_ADDR
72989: LD_EXP 96
72993: PPUSH
72994: CALL 17611 0 1
72998: PUSH
72999: FOR_TO
73000: IFFALSE 73162
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
73002: LD_VAR 0 2
73006: PPUSH
73007: LD_VAR 0 3
73011: PPUSH
73012: CALL_OW 428
73016: PUSH
73017: LD_EXP 96
73021: PUSH
73022: LD_VAR 0 5
73026: ARRAY
73027: PUSH
73028: LD_INT 2
73030: ARRAY
73031: EQUAL
73032: IFFALSE 73064
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
73034: LD_ADDR_EXP 96
73038: PUSH
73039: LD_EXP 96
73043: PPUSH
73044: LD_VAR 0 5
73048: PPUSH
73049: CALL_OW 3
73053: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73054: CALL 73219 0 0
// exit ;
73058: POP
73059: POP
73060: GO 73214
// end else
73062: GO 73160
// if factory = factoryWaypoints [ i ] [ 2 ] then
73064: LD_VAR 0 1
73068: PUSH
73069: LD_EXP 96
73073: PUSH
73074: LD_VAR 0 5
73078: ARRAY
73079: PUSH
73080: LD_INT 2
73082: ARRAY
73083: EQUAL
73084: IFFALSE 73160
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
73086: LD_ADDR_EXP 96
73090: PUSH
73091: LD_EXP 96
73095: PPUSH
73096: LD_VAR 0 5
73100: PPUSH
73101: CALL_OW 3
73105: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
73106: LD_ADDR_EXP 96
73110: PUSH
73111: LD_EXP 96
73115: PPUSH
73116: LD_VAR 0 1
73120: PPUSH
73121: CALL_OW 255
73125: PUSH
73126: LD_VAR 0 1
73130: PUSH
73131: LD_VAR 0 2
73135: PUSH
73136: LD_VAR 0 3
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: PPUSH
73147: CALL 53220 0 2
73151: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73152: CALL 73219 0 0
// exit ;
73156: POP
73157: POP
73158: GO 73214
// end ; end ;
73160: GO 72999
73162: POP
73163: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
73164: LD_ADDR_EXP 96
73168: PUSH
73169: LD_EXP 96
73173: PPUSH
73174: LD_VAR 0 1
73178: PPUSH
73179: CALL_OW 255
73183: PUSH
73184: LD_VAR 0 1
73188: PUSH
73189: LD_VAR 0 2
73193: PUSH
73194: LD_VAR 0 3
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: PPUSH
73205: CALL 53220 0 2
73209: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73210: CALL 73219 0 0
// end ;
73214: LD_VAR 0 4
73218: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
73219: LD_INT 0
73221: PPUSH
73222: PPUSH
73223: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
73224: LD_STRING resetFactoryWaypoint();
73226: PPUSH
73227: CALL_OW 559
// if factoryWaypoints then
73231: LD_EXP 96
73235: IFFALSE 73356
// begin list := factoryWaypoints ;
73237: LD_ADDR_VAR 0 3
73241: PUSH
73242: LD_EXP 96
73246: ST_TO_ADDR
// for i := 1 to list do
73247: LD_ADDR_VAR 0 2
73251: PUSH
73252: DOUBLE
73253: LD_INT 1
73255: DEC
73256: ST_TO_ADDR
73257: LD_VAR 0 3
73261: PUSH
73262: FOR_TO
73263: IFFALSE 73354
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73265: LD_STRING setFactoryWaypointXY(
73267: PUSH
73268: LD_VAR 0 3
73272: PUSH
73273: LD_VAR 0 2
73277: ARRAY
73278: PUSH
73279: LD_INT 1
73281: ARRAY
73282: STR
73283: PUSH
73284: LD_STRING ,
73286: STR
73287: PUSH
73288: LD_VAR 0 3
73292: PUSH
73293: LD_VAR 0 2
73297: ARRAY
73298: PUSH
73299: LD_INT 2
73301: ARRAY
73302: STR
73303: PUSH
73304: LD_STRING ,
73306: STR
73307: PUSH
73308: LD_VAR 0 3
73312: PUSH
73313: LD_VAR 0 2
73317: ARRAY
73318: PUSH
73319: LD_INT 3
73321: ARRAY
73322: STR
73323: PUSH
73324: LD_STRING ,
73326: STR
73327: PUSH
73328: LD_VAR 0 3
73332: PUSH
73333: LD_VAR 0 2
73337: ARRAY
73338: PUSH
73339: LD_INT 4
73341: ARRAY
73342: STR
73343: PUSH
73344: LD_STRING )
73346: STR
73347: PPUSH
73348: CALL_OW 559
73352: GO 73262
73354: POP
73355: POP
// end ; end ;
73356: LD_VAR 0 1
73360: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
73361: LD_INT 0
73363: PPUSH
// if HexInfo ( x , y ) = warehouse then
73364: LD_VAR 0 2
73368: PPUSH
73369: LD_VAR 0 3
73373: PPUSH
73374: CALL_OW 428
73378: PUSH
73379: LD_VAR 0 1
73383: EQUAL
73384: IFFALSE 73411
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
73386: LD_ADDR_EXP 97
73390: PUSH
73391: LD_EXP 97
73395: PPUSH
73396: LD_VAR 0 1
73400: PPUSH
73401: LD_INT 0
73403: PPUSH
73404: CALL_OW 1
73408: ST_TO_ADDR
73409: GO 73462
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
73411: LD_ADDR_EXP 97
73415: PUSH
73416: LD_EXP 97
73420: PPUSH
73421: LD_VAR 0 1
73425: PPUSH
73426: LD_VAR 0 1
73430: PPUSH
73431: CALL_OW 255
73435: PUSH
73436: LD_VAR 0 1
73440: PUSH
73441: LD_VAR 0 2
73445: PUSH
73446: LD_VAR 0 3
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: PPUSH
73457: CALL_OW 1
73461: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
73462: CALL 73471 0 0
// end ;
73466: LD_VAR 0 4
73470: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
73471: LD_INT 0
73473: PPUSH
73474: PPUSH
73475: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
73476: LD_STRING resetWarehouseGatheringPoints();
73478: PPUSH
73479: CALL_OW 559
// if warehouseGatheringPoints then
73483: LD_EXP 97
73487: IFFALSE 73613
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
73489: LD_ADDR_VAR 0 3
73493: PUSH
73494: LD_EXP 97
73498: PPUSH
73499: CALL 56982 0 1
73503: ST_TO_ADDR
// for i := 1 to list do
73504: LD_ADDR_VAR 0 2
73508: PUSH
73509: DOUBLE
73510: LD_INT 1
73512: DEC
73513: ST_TO_ADDR
73514: LD_VAR 0 3
73518: PUSH
73519: FOR_TO
73520: IFFALSE 73611
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73522: LD_STRING setWarehouseGatheringPointXY(
73524: PUSH
73525: LD_VAR 0 3
73529: PUSH
73530: LD_VAR 0 2
73534: ARRAY
73535: PUSH
73536: LD_INT 1
73538: ARRAY
73539: STR
73540: PUSH
73541: LD_STRING ,
73543: STR
73544: PUSH
73545: LD_VAR 0 3
73549: PUSH
73550: LD_VAR 0 2
73554: ARRAY
73555: PUSH
73556: LD_INT 2
73558: ARRAY
73559: STR
73560: PUSH
73561: LD_STRING ,
73563: STR
73564: PUSH
73565: LD_VAR 0 3
73569: PUSH
73570: LD_VAR 0 2
73574: ARRAY
73575: PUSH
73576: LD_INT 3
73578: ARRAY
73579: STR
73580: PUSH
73581: LD_STRING ,
73583: STR
73584: PUSH
73585: LD_VAR 0 3
73589: PUSH
73590: LD_VAR 0 2
73594: ARRAY
73595: PUSH
73596: LD_INT 4
73598: ARRAY
73599: STR
73600: PUSH
73601: LD_STRING )
73603: STR
73604: PPUSH
73605: CALL_OW 559
73609: GO 73519
73611: POP
73612: POP
// end ; end ;
73613: LD_VAR 0 1
73617: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
73618: LD_EXP 97
73622: IFFALSE 74307
73624: GO 73626
73626: DISABLE
73627: LD_INT 0
73629: PPUSH
73630: PPUSH
73631: PPUSH
73632: PPUSH
73633: PPUSH
73634: PPUSH
73635: PPUSH
73636: PPUSH
73637: PPUSH
// begin enable ;
73638: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73639: LD_ADDR_VAR 0 3
73643: PUSH
73644: LD_EXP 97
73648: PPUSH
73649: CALL 56982 0 1
73653: ST_TO_ADDR
// if not list then
73654: LD_VAR 0 3
73658: NOT
73659: IFFALSE 73663
// exit ;
73661: GO 74307
// for i := 1 to list do
73663: LD_ADDR_VAR 0 1
73667: PUSH
73668: DOUBLE
73669: LD_INT 1
73671: DEC
73672: ST_TO_ADDR
73673: LD_VAR 0 3
73677: PUSH
73678: FOR_TO
73679: IFFALSE 74305
// begin depot := list [ i ] [ 2 ] ;
73681: LD_ADDR_VAR 0 8
73685: PUSH
73686: LD_VAR 0 3
73690: PUSH
73691: LD_VAR 0 1
73695: ARRAY
73696: PUSH
73697: LD_INT 2
73699: ARRAY
73700: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73701: LD_ADDR_VAR 0 5
73705: PUSH
73706: LD_VAR 0 3
73710: PUSH
73711: LD_VAR 0 1
73715: ARRAY
73716: PUSH
73717: LD_INT 1
73719: ARRAY
73720: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73721: LD_VAR 0 8
73725: PPUSH
73726: CALL_OW 301
73730: PUSH
73731: LD_VAR 0 5
73735: PUSH
73736: LD_VAR 0 8
73740: PPUSH
73741: CALL_OW 255
73745: NONEQUAL
73746: OR
73747: IFFALSE 73776
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73749: LD_ADDR_EXP 97
73753: PUSH
73754: LD_EXP 97
73758: PPUSH
73759: LD_VAR 0 8
73763: PPUSH
73764: LD_INT 0
73766: PPUSH
73767: CALL_OW 1
73771: ST_TO_ADDR
// exit ;
73772: POP
73773: POP
73774: GO 74307
// end ; x := list [ i ] [ 3 ] ;
73776: LD_ADDR_VAR 0 6
73780: PUSH
73781: LD_VAR 0 3
73785: PUSH
73786: LD_VAR 0 1
73790: ARRAY
73791: PUSH
73792: LD_INT 3
73794: ARRAY
73795: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73796: LD_ADDR_VAR 0 7
73800: PUSH
73801: LD_VAR 0 3
73805: PUSH
73806: LD_VAR 0 1
73810: ARRAY
73811: PUSH
73812: LD_INT 4
73814: ARRAY
73815: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73816: LD_ADDR_VAR 0 9
73820: PUSH
73821: LD_VAR 0 6
73825: PPUSH
73826: LD_VAR 0 7
73830: PPUSH
73831: LD_INT 16
73833: PPUSH
73834: CALL 55566 0 3
73838: ST_TO_ADDR
// if not cratesNearbyPoint then
73839: LD_VAR 0 9
73843: NOT
73844: IFFALSE 73850
// exit ;
73846: POP
73847: POP
73848: GO 74307
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73850: LD_ADDR_VAR 0 4
73854: PUSH
73855: LD_INT 22
73857: PUSH
73858: LD_VAR 0 5
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 3
73869: PUSH
73870: LD_INT 60
73872: PUSH
73873: EMPTY
73874: LIST
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: PUSH
73880: LD_INT 91
73882: PUSH
73883: LD_VAR 0 8
73887: PUSH
73888: LD_INT 6
73890: PUSH
73891: EMPTY
73892: LIST
73893: LIST
73894: LIST
73895: PUSH
73896: LD_INT 2
73898: PUSH
73899: LD_INT 25
73901: PUSH
73902: LD_INT 2
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: LD_INT 25
73911: PUSH
73912: LD_INT 16
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: LIST
73923: PUSH
73924: EMPTY
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: PPUSH
73930: CALL_OW 69
73934: PUSH
73935: LD_VAR 0 8
73939: PPUSH
73940: CALL_OW 313
73944: PPUSH
73945: LD_INT 3
73947: PUSH
73948: LD_INT 60
73950: PUSH
73951: EMPTY
73952: LIST
73953: PUSH
73954: EMPTY
73955: LIST
73956: LIST
73957: PUSH
73958: LD_INT 2
73960: PUSH
73961: LD_INT 25
73963: PUSH
73964: LD_INT 2
73966: PUSH
73967: EMPTY
73968: LIST
73969: LIST
73970: PUSH
73971: LD_INT 25
73973: PUSH
73974: LD_INT 16
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: LIST
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: PPUSH
73990: CALL_OW 72
73994: UNION
73995: ST_TO_ADDR
// if tmp then
73996: LD_VAR 0 4
74000: IFFALSE 74080
// begin tmp := ShrinkArray ( tmp , 3 ) ;
74002: LD_ADDR_VAR 0 4
74006: PUSH
74007: LD_VAR 0 4
74011: PPUSH
74012: LD_INT 3
74014: PPUSH
74015: CALL 53535 0 2
74019: ST_TO_ADDR
// for j in tmp do
74020: LD_ADDR_VAR 0 2
74024: PUSH
74025: LD_VAR 0 4
74029: PUSH
74030: FOR_IN
74031: IFFALSE 74074
// begin if IsInUnit ( j ) then
74033: LD_VAR 0 2
74037: PPUSH
74038: CALL_OW 310
74042: IFFALSE 74053
// ComExit ( j ) ;
74044: LD_VAR 0 2
74048: PPUSH
74049: CALL 53618 0 1
// AddComCollect ( j , x , y ) ;
74053: LD_VAR 0 2
74057: PPUSH
74058: LD_VAR 0 6
74062: PPUSH
74063: LD_VAR 0 7
74067: PPUSH
74068: CALL_OW 177
// end ;
74072: GO 74030
74074: POP
74075: POP
// exit ;
74076: POP
74077: POP
74078: GO 74307
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
74080: LD_ADDR_VAR 0 4
74084: PUSH
74085: LD_INT 22
74087: PUSH
74088: LD_VAR 0 5
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PUSH
74097: LD_INT 91
74099: PUSH
74100: LD_VAR 0 8
74104: PUSH
74105: LD_INT 8
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: LIST
74112: PUSH
74113: LD_INT 2
74115: PUSH
74116: LD_INT 34
74118: PUSH
74119: LD_INT 12
74121: PUSH
74122: EMPTY
74123: LIST
74124: LIST
74125: PUSH
74126: LD_INT 34
74128: PUSH
74129: LD_INT 51
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PUSH
74136: LD_INT 34
74138: PUSH
74139: LD_INT 32
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 34
74148: PUSH
74149: LD_INT 89
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: LIST
74160: LIST
74161: LIST
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: LIST
74167: PPUSH
74168: CALL_OW 69
74172: ST_TO_ADDR
// if tmp then
74173: LD_VAR 0 4
74177: IFFALSE 74303
// begin for j in tmp do
74179: LD_ADDR_VAR 0 2
74183: PUSH
74184: LD_VAR 0 4
74188: PUSH
74189: FOR_IN
74190: IFFALSE 74301
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
74192: LD_VAR 0 2
74196: PPUSH
74197: CALL_OW 262
74201: PUSH
74202: LD_INT 3
74204: EQUAL
74205: PUSH
74206: LD_VAR 0 2
74210: PPUSH
74211: CALL_OW 261
74215: PUSH
74216: LD_INT 20
74218: GREATER
74219: OR
74220: PUSH
74221: LD_VAR 0 2
74225: PPUSH
74226: CALL_OW 314
74230: NOT
74231: AND
74232: PUSH
74233: LD_VAR 0 2
74237: PPUSH
74238: CALL_OW 263
74242: PUSH
74243: LD_INT 1
74245: NONEQUAL
74246: PUSH
74247: LD_VAR 0 2
74251: PPUSH
74252: CALL_OW 311
74256: OR
74257: AND
74258: IFFALSE 74299
// begin ComCollect ( j , x , y ) ;
74260: LD_VAR 0 2
74264: PPUSH
74265: LD_VAR 0 6
74269: PPUSH
74270: LD_VAR 0 7
74274: PPUSH
74275: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
74279: LD_VAR 0 2
74283: PPUSH
74284: LD_VAR 0 8
74288: PPUSH
74289: CALL_OW 172
// exit ;
74293: POP
74294: POP
74295: POP
74296: POP
74297: GO 74307
// end ;
74299: GO 74189
74301: POP
74302: POP
// end ; end ;
74303: GO 73678
74305: POP
74306: POP
// end ; end_of_file
74307: PPOPN 9
74309: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74310: LD_VAR 0 1
74314: PUSH
74315: LD_INT 200
74317: DOUBLE
74318: GREATEREQUAL
74319: IFFALSE 74327
74321: LD_INT 299
74323: DOUBLE
74324: LESSEQUAL
74325: IFTRUE 74329
74327: GO 74361
74329: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74330: LD_VAR 0 1
74334: PPUSH
74335: LD_VAR 0 2
74339: PPUSH
74340: LD_VAR 0 3
74344: PPUSH
74345: LD_VAR 0 4
74349: PPUSH
74350: LD_VAR 0 5
74354: PPUSH
74355: CALL 75058 0 5
74359: GO 74438
74361: LD_INT 300
74363: DOUBLE
74364: GREATEREQUAL
74365: IFFALSE 74373
74367: LD_INT 399
74369: DOUBLE
74370: LESSEQUAL
74371: IFTRUE 74375
74373: GO 74437
74375: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74376: LD_VAR 0 1
74380: PPUSH
74381: LD_VAR 0 2
74385: PPUSH
74386: LD_VAR 0 3
74390: PPUSH
74391: LD_VAR 0 4
74395: PPUSH
74396: LD_VAR 0 5
74400: PPUSH
74401: LD_VAR 0 6
74405: PPUSH
74406: LD_VAR 0 7
74410: PPUSH
74411: LD_VAR 0 8
74415: PPUSH
74416: LD_VAR 0 9
74420: PPUSH
74421: LD_VAR 0 10
74425: PPUSH
74426: LD_VAR 0 11
74430: PPUSH
74431: CALL 70883 0 11
74435: GO 74438
74437: POP
// end ;
74438: PPOPN 11
74440: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74441: LD_VAR 0 1
74445: PPUSH
74446: LD_VAR 0 2
74450: PPUSH
74451: LD_VAR 0 3
74455: PPUSH
74456: LD_VAR 0 4
74460: PPUSH
74461: LD_VAR 0 5
74465: PPUSH
74466: CALL 74523 0 5
// end ; end_of_file
74470: PPOPN 5
74472: END
// export function SOS_UnitDestroyed ( un ) ; begin
74473: LD_INT 0
74475: PPUSH
// ComRadiation ( un ) ;
74476: LD_VAR 0 1
74480: PPUSH
74481: CALL 75462 0 1
// end ;
74485: LD_VAR 0 2
74489: RET
// export function SOS_UnitKamikazed ( un ) ; begin
74490: LD_INT 0
74492: PPUSH
// ComRadiation ( un ) ;
74493: LD_VAR 0 1
74497: PPUSH
74498: CALL 75462 0 1
// end ;
74502: LD_VAR 0 2
74506: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
74507: LD_INT 0
74509: PPUSH
// end ;
74510: LD_VAR 0 4
74514: RET
// export function SOS_Command ( cmd ) ; begin
74515: LD_INT 0
74517: PPUSH
// end ;
74518: LD_VAR 0 2
74522: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
74523: LD_INT 0
74525: PPUSH
// end ;
74526: LD_VAR 0 6
74530: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
74531: LD_INT 0
74533: PPUSH
74534: PPUSH
74535: PPUSH
74536: PPUSH
74537: PPUSH
// if not vehicle or not factory then
74538: LD_VAR 0 1
74542: NOT
74543: PUSH
74544: LD_VAR 0 2
74548: NOT
74549: OR
74550: IFFALSE 74554
// exit ;
74552: GO 75053
// if not factoryWaypoints then
74554: LD_EXP 96
74558: NOT
74559: IFFALSE 74563
// exit ;
74561: GO 75053
// for i := 1 to Count ( factoryWaypoints ) do
74563: LD_ADDR_VAR 0 4
74567: PUSH
74568: DOUBLE
74569: LD_INT 1
74571: DEC
74572: ST_TO_ADDR
74573: LD_EXP 96
74577: PPUSH
74578: CALL 17611 0 1
74582: PUSH
74583: FOR_TO
74584: IFFALSE 75051
// if factoryWaypoints [ i ] [ 2 ] = factory then
74586: LD_EXP 96
74590: PUSH
74591: LD_VAR 0 4
74595: ARRAY
74596: PUSH
74597: LD_INT 2
74599: ARRAY
74600: PUSH
74601: LD_VAR 0 2
74605: EQUAL
74606: IFFALSE 75049
// begin if GetControl ( vehicle ) = control_manual then
74608: LD_VAR 0 1
74612: PPUSH
74613: CALL_OW 263
74617: PUSH
74618: LD_INT 1
74620: EQUAL
74621: IFFALSE 74932
// begin driver := IsDrivenBy ( vehicle ) ;
74623: LD_ADDR_VAR 0 6
74627: PUSH
74628: LD_VAR 0 1
74632: PPUSH
74633: CALL_OW 311
74637: ST_TO_ADDR
// tag := GetTag ( driver ) ;
74638: LD_ADDR_VAR 0 5
74642: PUSH
74643: LD_VAR 0 6
74647: PPUSH
74648: CALL_OW 110
74652: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
74653: LD_VAR 0 5
74657: PUSH
74658: LD_INT 501
74660: EQUAL
74661: PUSH
74662: LD_VAR 0 1
74666: PPUSH
74667: CALL_OW 110
74671: PUSH
74672: LD_INT 501
74674: EQUAL
74675: OR
74676: IFFALSE 74682
// exit ;
74678: POP
74679: POP
74680: GO 75053
// if not HasTask ( driver ) then
74682: LD_VAR 0 6
74686: PPUSH
74687: CALL_OW 314
74691: NOT
74692: IFFALSE 74930
// begin SetTag ( driver , tDriver ) ;
74694: LD_VAR 0 6
74698: PPUSH
74699: LD_INT 501
74701: PPUSH
74702: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
74706: LD_VAR 0 1
74710: PPUSH
74711: LD_INT 501
74713: PPUSH
74714: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
74718: LD_ADDR_VAR 0 7
74722: PUSH
74723: LD_EXP 96
74727: PUSH
74728: LD_VAR 0 4
74732: ARRAY
74733: PUSH
74734: LD_INT 3
74736: ARRAY
74737: PPUSH
74738: LD_EXP 96
74742: PUSH
74743: LD_VAR 0 4
74747: ARRAY
74748: PUSH
74749: LD_INT 4
74751: ARRAY
74752: PPUSH
74753: CALL_OW 428
74757: ST_TO_ADDR
// if hex then
74758: LD_VAR 0 7
74762: IFFALSE 74780
// ComMoveUnit ( driver , hex ) else
74764: LD_VAR 0 6
74768: PPUSH
74769: LD_VAR 0 7
74773: PPUSH
74774: CALL_OW 112
74778: GO 74819
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
74780: LD_VAR 0 6
74784: PPUSH
74785: LD_EXP 96
74789: PUSH
74790: LD_VAR 0 4
74794: ARRAY
74795: PUSH
74796: LD_INT 3
74798: ARRAY
74799: PPUSH
74800: LD_EXP 96
74804: PUSH
74805: LD_VAR 0 4
74809: ARRAY
74810: PUSH
74811: LD_INT 4
74813: ARRAY
74814: PPUSH
74815: CALL_OW 111
// AddComExitVehicle ( driver ) ;
74819: LD_VAR 0 6
74823: PPUSH
74824: CALL_OW 181
// if Multiplayer then
74828: LD_OWVAR 4
74832: IFFALSE 74881
// begin repeat wait ( 10 ) ;
74834: LD_INT 10
74836: PPUSH
74837: CALL_OW 67
// until not IsInUnit ( driver ) ;
74841: LD_VAR 0 6
74845: PPUSH
74846: CALL_OW 310
74850: NOT
74851: IFFALSE 74834
// if not HasTask ( driver ) then
74853: LD_VAR 0 6
74857: PPUSH
74858: CALL_OW 314
74862: NOT
74863: IFFALSE 74879
// ComEnterUnit ( driver , factory ) ;
74865: LD_VAR 0 6
74869: PPUSH
74870: LD_VAR 0 2
74874: PPUSH
74875: CALL_OW 120
// end else
74879: GO 74895
// AddComEnterUnit ( driver , factory ) ;
74881: LD_VAR 0 6
74885: PPUSH
74886: LD_VAR 0 2
74890: PPUSH
74891: CALL_OW 180
// wait ( 0 0$1 ) ;
74895: LD_INT 35
74897: PPUSH
74898: CALL_OW 67
// SetTag ( driver , tag ) ;
74902: LD_VAR 0 6
74906: PPUSH
74907: LD_VAR 0 5
74911: PPUSH
74912: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
74916: LD_VAR 0 1
74920: PPUSH
74921: LD_INT 0
74923: PPUSH
74924: CALL_OW 109
// break ;
74928: GO 75051
// end ; end else
74930: GO 75049
// if GetControl ( vehicle ) = control_remote then
74932: LD_VAR 0 1
74936: PPUSH
74937: CALL_OW 263
74941: PUSH
74942: LD_INT 2
74944: EQUAL
74945: IFFALSE 75008
// begin wait ( 0 0$2 ) ;
74947: LD_INT 70
74949: PPUSH
74950: CALL_OW 67
// if Connect ( vehicle ) then
74954: LD_VAR 0 1
74958: PPUSH
74959: CALL 23817 0 1
74963: IFFALSE 75004
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
74965: LD_VAR 0 1
74969: PPUSH
74970: LD_EXP 96
74974: PUSH
74975: LD_VAR 0 4
74979: ARRAY
74980: PUSH
74981: LD_INT 3
74983: ARRAY
74984: PPUSH
74985: LD_EXP 96
74989: PUSH
74990: LD_VAR 0 4
74994: ARRAY
74995: PUSH
74996: LD_INT 4
74998: ARRAY
74999: PPUSH
75000: CALL_OW 171
// break ;
75004: GO 75051
// end else
75006: GO 75049
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75008: LD_VAR 0 1
75012: PPUSH
75013: LD_EXP 96
75017: PUSH
75018: LD_VAR 0 4
75022: ARRAY
75023: PUSH
75024: LD_INT 3
75026: ARRAY
75027: PPUSH
75028: LD_EXP 96
75032: PUSH
75033: LD_VAR 0 4
75037: ARRAY
75038: PUSH
75039: LD_INT 4
75041: ARRAY
75042: PPUSH
75043: CALL_OW 171
// break ;
75047: GO 75051
// end ; end ;
75049: GO 74583
75051: POP
75052: POP
// end ;
75053: LD_VAR 0 3
75057: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
75058: LD_INT 0
75060: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
75061: LD_VAR 0 1
75065: PUSH
75066: LD_INT 250
75068: EQUAL
75069: PUSH
75070: LD_VAR 0 2
75074: PPUSH
75075: CALL_OW 264
75079: PUSH
75080: LD_INT 81
75082: EQUAL
75083: AND
75084: IFFALSE 75105
// MinerPlaceMine ( unit , x , y ) ;
75086: LD_VAR 0 2
75090: PPUSH
75091: LD_VAR 0 4
75095: PPUSH
75096: LD_VAR 0 5
75100: PPUSH
75101: CALL 78197 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
75105: LD_VAR 0 1
75109: PUSH
75110: LD_INT 251
75112: EQUAL
75113: PUSH
75114: LD_VAR 0 2
75118: PPUSH
75119: CALL_OW 264
75123: PUSH
75124: LD_INT 81
75126: EQUAL
75127: AND
75128: IFFALSE 75149
// MinerDetonateMine ( unit , x , y ) ;
75130: LD_VAR 0 2
75134: PPUSH
75135: LD_VAR 0 4
75139: PPUSH
75140: LD_VAR 0 5
75144: PPUSH
75145: CALL 78472 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
75149: LD_VAR 0 1
75153: PUSH
75154: LD_INT 252
75156: EQUAL
75157: PUSH
75158: LD_VAR 0 2
75162: PPUSH
75163: CALL_OW 264
75167: PUSH
75168: LD_INT 81
75170: EQUAL
75171: AND
75172: IFFALSE 75193
// MinerCreateMinefield ( unit , x , y ) ;
75174: LD_VAR 0 2
75178: PPUSH
75179: LD_VAR 0 4
75183: PPUSH
75184: LD_VAR 0 5
75188: PPUSH
75189: CALL 78889 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
75193: LD_VAR 0 1
75197: PUSH
75198: LD_INT 253
75200: EQUAL
75201: PUSH
75202: LD_VAR 0 2
75206: PPUSH
75207: CALL_OW 257
75211: PUSH
75212: LD_INT 5
75214: EQUAL
75215: AND
75216: IFFALSE 75237
// ComBinocular ( unit , x , y ) ;
75218: LD_VAR 0 2
75222: PPUSH
75223: LD_VAR 0 4
75227: PPUSH
75228: LD_VAR 0 5
75232: PPUSH
75233: CALL 79258 0 3
// if selectedUnit then
75237: LD_VAR 0 3
75241: IFFALSE 75297
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
75243: LD_VAR 0 1
75247: PUSH
75248: LD_INT 254
75250: EQUAL
75251: PUSH
75252: LD_VAR 0 2
75256: PPUSH
75257: CALL_OW 264
75261: PUSH
75262: LD_INT 99
75264: EQUAL
75265: AND
75266: PUSH
75267: LD_VAR 0 3
75271: PPUSH
75272: CALL_OW 263
75276: PUSH
75277: LD_INT 3
75279: EQUAL
75280: AND
75281: IFFALSE 75297
// HackDestroyVehicle ( unit , selectedUnit ) ;
75283: LD_VAR 0 2
75287: PPUSH
75288: LD_VAR 0 3
75292: PPUSH
75293: CALL 77561 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
75297: LD_VAR 0 1
75301: PUSH
75302: LD_INT 255
75304: EQUAL
75305: PUSH
75306: LD_VAR 0 2
75310: PPUSH
75311: CALL_OW 264
75315: PUSH
75316: LD_INT 14
75318: PUSH
75319: LD_INT 53
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: IN
75326: AND
75327: PUSH
75328: LD_VAR 0 4
75332: PPUSH
75333: LD_VAR 0 5
75337: PPUSH
75338: CALL_OW 488
75342: AND
75343: IFFALSE 75367
// CutTreeXYR ( unit , x , y , 12 ) ;
75345: LD_VAR 0 2
75349: PPUSH
75350: LD_VAR 0 4
75354: PPUSH
75355: LD_VAR 0 5
75359: PPUSH
75360: LD_INT 12
75362: PPUSH
75363: CALL 75558 0 4
// if cmd = 256 then
75367: LD_VAR 0 1
75371: PUSH
75372: LD_INT 256
75374: EQUAL
75375: IFFALSE 75396
// SetFactoryWaypoint ( unit , x , y ) ;
75377: LD_VAR 0 2
75381: PPUSH
75382: LD_VAR 0 4
75386: PPUSH
75387: LD_VAR 0 5
75391: PPUSH
75392: CALL 72871 0 3
// if cmd = 257 then
75396: LD_VAR 0 1
75400: PUSH
75401: LD_INT 257
75403: EQUAL
75404: IFFALSE 75425
// SetWarehouseGatheringPoint ( unit , x , y ) ;
75406: LD_VAR 0 2
75410: PPUSH
75411: LD_VAR 0 4
75415: PPUSH
75416: LD_VAR 0 5
75420: PPUSH
75421: CALL 73361 0 3
// if cmd = 258 then
75425: LD_VAR 0 1
75429: PUSH
75430: LD_INT 258
75432: EQUAL
75433: IFFALSE 75457
// BurnTreeXYR ( unit , x , y , 8 ) ;
75435: LD_VAR 0 2
75439: PPUSH
75440: LD_VAR 0 4
75444: PPUSH
75445: LD_VAR 0 5
75449: PPUSH
75450: LD_INT 8
75452: PPUSH
75453: CALL 75952 0 4
// end ;
75457: LD_VAR 0 6
75461: RET
// export function ComRadiation ( un ) ; var eff ; begin
75462: LD_INT 0
75464: PPUSH
75465: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
75466: LD_VAR 0 1
75470: PPUSH
75471: CALL_OW 264
75475: PUSH
75476: LD_INT 91
75478: NONEQUAL
75479: IFFALSE 75483
// exit ;
75481: GO 75553
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
75483: LD_INT 68
75485: PPUSH
75486: LD_VAR 0 1
75490: PPUSH
75491: CALL_OW 255
75495: PPUSH
75496: CALL_OW 321
75500: PUSH
75501: LD_INT 2
75503: EQUAL
75504: IFFALSE 75516
// eff := 70 else
75506: LD_ADDR_VAR 0 3
75510: PUSH
75511: LD_INT 70
75513: ST_TO_ADDR
75514: GO 75524
// eff := 30 ;
75516: LD_ADDR_VAR 0 3
75520: PUSH
75521: LD_INT 30
75523: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
75524: LD_VAR 0 1
75528: PPUSH
75529: CALL_OW 250
75533: PPUSH
75534: LD_VAR 0 1
75538: PPUSH
75539: CALL_OW 251
75543: PPUSH
75544: LD_VAR 0 3
75548: PPUSH
75549: CALL_OW 495
// end ;
75553: LD_VAR 0 2
75557: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
75558: LD_INT 0
75560: PPUSH
75561: PPUSH
75562: PPUSH
75563: PPUSH
75564: PPUSH
75565: PPUSH
75566: PPUSH
75567: PPUSH
75568: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
75569: LD_VAR 0 1
75573: PPUSH
75574: CALL_OW 302
75578: NOT
75579: PUSH
75580: LD_VAR 0 2
75584: PPUSH
75585: LD_VAR 0 3
75589: PPUSH
75590: CALL_OW 488
75594: NOT
75595: OR
75596: PUSH
75597: LD_VAR 0 4
75601: NOT
75602: OR
75603: IFFALSE 75607
// exit ;
75605: GO 75947
// list := [ ] ;
75607: LD_ADDR_VAR 0 13
75611: PUSH
75612: EMPTY
75613: ST_TO_ADDR
// if x - r < 0 then
75614: LD_VAR 0 2
75618: PUSH
75619: LD_VAR 0 4
75623: MINUS
75624: PUSH
75625: LD_INT 0
75627: LESS
75628: IFFALSE 75640
// min_x := 0 else
75630: LD_ADDR_VAR 0 7
75634: PUSH
75635: LD_INT 0
75637: ST_TO_ADDR
75638: GO 75656
// min_x := x - r ;
75640: LD_ADDR_VAR 0 7
75644: PUSH
75645: LD_VAR 0 2
75649: PUSH
75650: LD_VAR 0 4
75654: MINUS
75655: ST_TO_ADDR
// if y - r < 0 then
75656: LD_VAR 0 3
75660: PUSH
75661: LD_VAR 0 4
75665: MINUS
75666: PUSH
75667: LD_INT 0
75669: LESS
75670: IFFALSE 75682
// min_y := 0 else
75672: LD_ADDR_VAR 0 8
75676: PUSH
75677: LD_INT 0
75679: ST_TO_ADDR
75680: GO 75698
// min_y := y - r ;
75682: LD_ADDR_VAR 0 8
75686: PUSH
75687: LD_VAR 0 3
75691: PUSH
75692: LD_VAR 0 4
75696: MINUS
75697: ST_TO_ADDR
// max_x := x + r ;
75698: LD_ADDR_VAR 0 9
75702: PUSH
75703: LD_VAR 0 2
75707: PUSH
75708: LD_VAR 0 4
75712: PLUS
75713: ST_TO_ADDR
// max_y := y + r ;
75714: LD_ADDR_VAR 0 10
75718: PUSH
75719: LD_VAR 0 3
75723: PUSH
75724: LD_VAR 0 4
75728: PLUS
75729: ST_TO_ADDR
// for _x = min_x to max_x do
75730: LD_ADDR_VAR 0 11
75734: PUSH
75735: DOUBLE
75736: LD_VAR 0 7
75740: DEC
75741: ST_TO_ADDR
75742: LD_VAR 0 9
75746: PUSH
75747: FOR_TO
75748: IFFALSE 75865
// for _y = min_y to max_y do
75750: LD_ADDR_VAR 0 12
75754: PUSH
75755: DOUBLE
75756: LD_VAR 0 8
75760: DEC
75761: ST_TO_ADDR
75762: LD_VAR 0 10
75766: PUSH
75767: FOR_TO
75768: IFFALSE 75861
// begin if not ValidHex ( _x , _y ) then
75770: LD_VAR 0 11
75774: PPUSH
75775: LD_VAR 0 12
75779: PPUSH
75780: CALL_OW 488
75784: NOT
75785: IFFALSE 75789
// continue ;
75787: GO 75767
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75789: LD_VAR 0 11
75793: PPUSH
75794: LD_VAR 0 12
75798: PPUSH
75799: CALL_OW 351
75803: PUSH
75804: LD_VAR 0 11
75808: PPUSH
75809: LD_VAR 0 12
75813: PPUSH
75814: CALL_OW 554
75818: AND
75819: IFFALSE 75859
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75821: LD_ADDR_VAR 0 13
75825: PUSH
75826: LD_VAR 0 13
75830: PPUSH
75831: LD_VAR 0 13
75835: PUSH
75836: LD_INT 1
75838: PLUS
75839: PPUSH
75840: LD_VAR 0 11
75844: PUSH
75845: LD_VAR 0 12
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: PPUSH
75854: CALL_OW 2
75858: ST_TO_ADDR
// end ;
75859: GO 75767
75861: POP
75862: POP
75863: GO 75747
75865: POP
75866: POP
// if not list then
75867: LD_VAR 0 13
75871: NOT
75872: IFFALSE 75876
// exit ;
75874: GO 75947
// for i in list do
75876: LD_ADDR_VAR 0 6
75880: PUSH
75881: LD_VAR 0 13
75885: PUSH
75886: FOR_IN
75887: IFFALSE 75945
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
75889: LD_VAR 0 1
75893: PPUSH
75894: LD_STRING M
75896: PUSH
75897: LD_VAR 0 6
75901: PUSH
75902: LD_INT 1
75904: ARRAY
75905: PUSH
75906: LD_VAR 0 6
75910: PUSH
75911: LD_INT 2
75913: ARRAY
75914: PUSH
75915: LD_INT 0
75917: PUSH
75918: LD_INT 0
75920: PUSH
75921: LD_INT 0
75923: PUSH
75924: LD_INT 0
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: LIST
75935: PUSH
75936: EMPTY
75937: LIST
75938: PPUSH
75939: CALL_OW 447
75943: GO 75886
75945: POP
75946: POP
// end ;
75947: LD_VAR 0 5
75951: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
75952: LD_INT 0
75954: PPUSH
75955: PPUSH
75956: PPUSH
75957: PPUSH
75958: PPUSH
75959: PPUSH
75960: PPUSH
75961: PPUSH
75962: PPUSH
75963: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
75964: LD_VAR 0 1
75968: PPUSH
75969: CALL_OW 302
75973: NOT
75974: PUSH
75975: LD_VAR 0 2
75979: PPUSH
75980: LD_VAR 0 3
75984: PPUSH
75985: CALL_OW 488
75989: NOT
75990: OR
75991: PUSH
75992: LD_VAR 0 4
75996: NOT
75997: OR
75998: IFFALSE 76002
// exit ;
76000: GO 76515
// list := [ ] ;
76002: LD_ADDR_VAR 0 13
76006: PUSH
76007: EMPTY
76008: ST_TO_ADDR
// if x - r < 0 then
76009: LD_VAR 0 2
76013: PUSH
76014: LD_VAR 0 4
76018: MINUS
76019: PUSH
76020: LD_INT 0
76022: LESS
76023: IFFALSE 76035
// min_x := 0 else
76025: LD_ADDR_VAR 0 7
76029: PUSH
76030: LD_INT 0
76032: ST_TO_ADDR
76033: GO 76051
// min_x := x - r ;
76035: LD_ADDR_VAR 0 7
76039: PUSH
76040: LD_VAR 0 2
76044: PUSH
76045: LD_VAR 0 4
76049: MINUS
76050: ST_TO_ADDR
// if y - r < 0 then
76051: LD_VAR 0 3
76055: PUSH
76056: LD_VAR 0 4
76060: MINUS
76061: PUSH
76062: LD_INT 0
76064: LESS
76065: IFFALSE 76077
// min_y := 0 else
76067: LD_ADDR_VAR 0 8
76071: PUSH
76072: LD_INT 0
76074: ST_TO_ADDR
76075: GO 76093
// min_y := y - r ;
76077: LD_ADDR_VAR 0 8
76081: PUSH
76082: LD_VAR 0 3
76086: PUSH
76087: LD_VAR 0 4
76091: MINUS
76092: ST_TO_ADDR
// max_x := x + r ;
76093: LD_ADDR_VAR 0 9
76097: PUSH
76098: LD_VAR 0 2
76102: PUSH
76103: LD_VAR 0 4
76107: PLUS
76108: ST_TO_ADDR
// max_y := y + r ;
76109: LD_ADDR_VAR 0 10
76113: PUSH
76114: LD_VAR 0 3
76118: PUSH
76119: LD_VAR 0 4
76123: PLUS
76124: ST_TO_ADDR
// for _x = min_x to max_x do
76125: LD_ADDR_VAR 0 11
76129: PUSH
76130: DOUBLE
76131: LD_VAR 0 7
76135: DEC
76136: ST_TO_ADDR
76137: LD_VAR 0 9
76141: PUSH
76142: FOR_TO
76143: IFFALSE 76260
// for _y = min_y to max_y do
76145: LD_ADDR_VAR 0 12
76149: PUSH
76150: DOUBLE
76151: LD_VAR 0 8
76155: DEC
76156: ST_TO_ADDR
76157: LD_VAR 0 10
76161: PUSH
76162: FOR_TO
76163: IFFALSE 76256
// begin if not ValidHex ( _x , _y ) then
76165: LD_VAR 0 11
76169: PPUSH
76170: LD_VAR 0 12
76174: PPUSH
76175: CALL_OW 488
76179: NOT
76180: IFFALSE 76184
// continue ;
76182: GO 76162
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
76184: LD_VAR 0 11
76188: PPUSH
76189: LD_VAR 0 12
76193: PPUSH
76194: CALL_OW 351
76198: PUSH
76199: LD_VAR 0 11
76203: PPUSH
76204: LD_VAR 0 12
76208: PPUSH
76209: CALL_OW 554
76213: AND
76214: IFFALSE 76254
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
76216: LD_ADDR_VAR 0 13
76220: PUSH
76221: LD_VAR 0 13
76225: PPUSH
76226: LD_VAR 0 13
76230: PUSH
76231: LD_INT 1
76233: PLUS
76234: PPUSH
76235: LD_VAR 0 11
76239: PUSH
76240: LD_VAR 0 12
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: PPUSH
76249: CALL_OW 2
76253: ST_TO_ADDR
// end ;
76254: GO 76162
76256: POP
76257: POP
76258: GO 76142
76260: POP
76261: POP
// if not list then
76262: LD_VAR 0 13
76266: NOT
76267: IFFALSE 76271
// exit ;
76269: GO 76515
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
76271: LD_ADDR_VAR 0 13
76275: PUSH
76276: LD_VAR 0 1
76280: PPUSH
76281: LD_VAR 0 13
76285: PPUSH
76286: LD_INT 1
76288: PPUSH
76289: LD_INT 1
76291: PPUSH
76292: CALL 20959 0 4
76296: ST_TO_ADDR
// ComStop ( flame ) ;
76297: LD_VAR 0 1
76301: PPUSH
76302: CALL_OW 141
// for i in list do
76306: LD_ADDR_VAR 0 6
76310: PUSH
76311: LD_VAR 0 13
76315: PUSH
76316: FOR_IN
76317: IFFALSE 76348
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
76319: LD_VAR 0 1
76323: PPUSH
76324: LD_VAR 0 6
76328: PUSH
76329: LD_INT 1
76331: ARRAY
76332: PPUSH
76333: LD_VAR 0 6
76337: PUSH
76338: LD_INT 2
76340: ARRAY
76341: PPUSH
76342: CALL_OW 176
76346: GO 76316
76348: POP
76349: POP
// repeat wait ( 0 0$1 ) ;
76350: LD_INT 35
76352: PPUSH
76353: CALL_OW 67
// task := GetTaskList ( flame ) ;
76357: LD_ADDR_VAR 0 14
76361: PUSH
76362: LD_VAR 0 1
76366: PPUSH
76367: CALL_OW 437
76371: ST_TO_ADDR
// if not task then
76372: LD_VAR 0 14
76376: NOT
76377: IFFALSE 76381
// exit ;
76379: GO 76515
// if task [ 1 ] [ 1 ] <> | then
76381: LD_VAR 0 14
76385: PUSH
76386: LD_INT 1
76388: ARRAY
76389: PUSH
76390: LD_INT 1
76392: ARRAY
76393: PUSH
76394: LD_STRING |
76396: NONEQUAL
76397: IFFALSE 76401
// exit ;
76399: GO 76515
// _x := task [ 1 ] [ 2 ] ;
76401: LD_ADDR_VAR 0 11
76405: PUSH
76406: LD_VAR 0 14
76410: PUSH
76411: LD_INT 1
76413: ARRAY
76414: PUSH
76415: LD_INT 2
76417: ARRAY
76418: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
76419: LD_ADDR_VAR 0 12
76423: PUSH
76424: LD_VAR 0 14
76428: PUSH
76429: LD_INT 1
76431: ARRAY
76432: PUSH
76433: LD_INT 3
76435: ARRAY
76436: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
76437: LD_VAR 0 11
76441: PPUSH
76442: LD_VAR 0 12
76446: PPUSH
76447: CALL_OW 351
76451: NOT
76452: PUSH
76453: LD_VAR 0 11
76457: PPUSH
76458: LD_VAR 0 12
76462: PPUSH
76463: CALL_OW 554
76467: NOT
76468: OR
76469: IFFALSE 76503
// begin task := Delete ( task , 1 ) ;
76471: LD_ADDR_VAR 0 14
76475: PUSH
76476: LD_VAR 0 14
76480: PPUSH
76481: LD_INT 1
76483: PPUSH
76484: CALL_OW 3
76488: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
76489: LD_VAR 0 1
76493: PPUSH
76494: LD_VAR 0 14
76498: PPUSH
76499: CALL_OW 446
// end ; until not HasTask ( flame ) ;
76503: LD_VAR 0 1
76507: PPUSH
76508: CALL_OW 314
76512: NOT
76513: IFFALSE 76350
// end ;
76515: LD_VAR 0 5
76519: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
76520: LD_EXP 99
76524: NOT
76525: IFFALSE 76575
76527: GO 76529
76529: DISABLE
// begin initHack := true ;
76530: LD_ADDR_EXP 99
76534: PUSH
76535: LD_INT 1
76537: ST_TO_ADDR
// hackTanks := [ ] ;
76538: LD_ADDR_EXP 100
76542: PUSH
76543: EMPTY
76544: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
76545: LD_ADDR_EXP 101
76549: PUSH
76550: EMPTY
76551: ST_TO_ADDR
// hackLimit := 3 ;
76552: LD_ADDR_EXP 102
76556: PUSH
76557: LD_INT 3
76559: ST_TO_ADDR
// hackDist := 12 ;
76560: LD_ADDR_EXP 103
76564: PUSH
76565: LD_INT 12
76567: ST_TO_ADDR
// hackCounter := [ ] ;
76568: LD_ADDR_EXP 104
76572: PUSH
76573: EMPTY
76574: ST_TO_ADDR
// end ;
76575: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
76576: LD_EXP 99
76580: PUSH
76581: LD_INT 34
76583: PUSH
76584: LD_INT 99
76586: PUSH
76587: EMPTY
76588: LIST
76589: LIST
76590: PPUSH
76591: CALL_OW 69
76595: AND
76596: IFFALSE 76849
76598: GO 76600
76600: DISABLE
76601: LD_INT 0
76603: PPUSH
76604: PPUSH
// begin enable ;
76605: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
76606: LD_ADDR_VAR 0 1
76610: PUSH
76611: LD_INT 34
76613: PUSH
76614: LD_INT 99
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: PPUSH
76621: CALL_OW 69
76625: PUSH
76626: FOR_IN
76627: IFFALSE 76847
// begin if not i in hackTanks then
76629: LD_VAR 0 1
76633: PUSH
76634: LD_EXP 100
76638: IN
76639: NOT
76640: IFFALSE 76723
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
76642: LD_ADDR_EXP 100
76646: PUSH
76647: LD_EXP 100
76651: PPUSH
76652: LD_EXP 100
76656: PUSH
76657: LD_INT 1
76659: PLUS
76660: PPUSH
76661: LD_VAR 0 1
76665: PPUSH
76666: CALL_OW 1
76670: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
76671: LD_ADDR_EXP 101
76675: PUSH
76676: LD_EXP 101
76680: PPUSH
76681: LD_EXP 101
76685: PUSH
76686: LD_INT 1
76688: PLUS
76689: PPUSH
76690: EMPTY
76691: PPUSH
76692: CALL_OW 1
76696: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
76697: LD_ADDR_EXP 104
76701: PUSH
76702: LD_EXP 104
76706: PPUSH
76707: LD_EXP 104
76711: PUSH
76712: LD_INT 1
76714: PLUS
76715: PPUSH
76716: EMPTY
76717: PPUSH
76718: CALL_OW 1
76722: ST_TO_ADDR
// end ; if not IsOk ( i ) then
76723: LD_VAR 0 1
76727: PPUSH
76728: CALL_OW 302
76732: NOT
76733: IFFALSE 76746
// begin HackUnlinkAll ( i ) ;
76735: LD_VAR 0 1
76739: PPUSH
76740: CALL 76852 0 1
// continue ;
76744: GO 76626
// end ; HackCheckCapturedStatus ( i ) ;
76746: LD_VAR 0 1
76750: PPUSH
76751: CALL 77295 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
76755: LD_ADDR_VAR 0 2
76759: PUSH
76760: LD_INT 81
76762: PUSH
76763: LD_VAR 0 1
76767: PPUSH
76768: CALL_OW 255
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: PUSH
76777: LD_INT 33
76779: PUSH
76780: LD_INT 3
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: PUSH
76787: LD_INT 91
76789: PUSH
76790: LD_VAR 0 1
76794: PUSH
76795: LD_EXP 103
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: LIST
76804: PUSH
76805: LD_INT 50
76807: PUSH
76808: EMPTY
76809: LIST
76810: PUSH
76811: EMPTY
76812: LIST
76813: LIST
76814: LIST
76815: LIST
76816: PPUSH
76817: CALL_OW 69
76821: ST_TO_ADDR
// if not tmp then
76822: LD_VAR 0 2
76826: NOT
76827: IFFALSE 76831
// continue ;
76829: GO 76626
// HackLink ( i , tmp ) ;
76831: LD_VAR 0 1
76835: PPUSH
76836: LD_VAR 0 2
76840: PPUSH
76841: CALL 76988 0 2
// end ;
76845: GO 76626
76847: POP
76848: POP
// end ;
76849: PPOPN 2
76851: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
76852: LD_INT 0
76854: PPUSH
76855: PPUSH
76856: PPUSH
// if not hack in hackTanks then
76857: LD_VAR 0 1
76861: PUSH
76862: LD_EXP 100
76866: IN
76867: NOT
76868: IFFALSE 76872
// exit ;
76870: GO 76983
// index := GetElementIndex ( hackTanks , hack ) ;
76872: LD_ADDR_VAR 0 4
76876: PUSH
76877: LD_EXP 100
76881: PPUSH
76882: LD_VAR 0 1
76886: PPUSH
76887: CALL 20256 0 2
76891: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
76892: LD_EXP 101
76896: PUSH
76897: LD_VAR 0 4
76901: ARRAY
76902: IFFALSE 76983
// begin for i in hackTanksCaptured [ index ] do
76904: LD_ADDR_VAR 0 3
76908: PUSH
76909: LD_EXP 101
76913: PUSH
76914: LD_VAR 0 4
76918: ARRAY
76919: PUSH
76920: FOR_IN
76921: IFFALSE 76947
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
76923: LD_VAR 0 3
76927: PUSH
76928: LD_INT 1
76930: ARRAY
76931: PPUSH
76932: LD_VAR 0 3
76936: PUSH
76937: LD_INT 2
76939: ARRAY
76940: PPUSH
76941: CALL_OW 235
76945: GO 76920
76947: POP
76948: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
76949: LD_ADDR_EXP 101
76953: PUSH
76954: LD_EXP 101
76958: PPUSH
76959: LD_VAR 0 4
76963: PPUSH
76964: EMPTY
76965: PPUSH
76966: CALL_OW 1
76970: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
76971: LD_VAR 0 1
76975: PPUSH
76976: LD_INT 0
76978: PPUSH
76979: CALL_OW 505
// end ; end ;
76983: LD_VAR 0 2
76987: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
76988: LD_INT 0
76990: PPUSH
76991: PPUSH
76992: PPUSH
// if not hack in hackTanks or not vehicles then
76993: LD_VAR 0 1
76997: PUSH
76998: LD_EXP 100
77002: IN
77003: NOT
77004: PUSH
77005: LD_VAR 0 2
77009: NOT
77010: OR
77011: IFFALSE 77015
// exit ;
77013: GO 77290
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
77015: LD_ADDR_VAR 0 2
77019: PUSH
77020: LD_VAR 0 1
77024: PPUSH
77025: LD_VAR 0 2
77029: PPUSH
77030: LD_INT 1
77032: PPUSH
77033: LD_INT 1
77035: PPUSH
77036: CALL 20906 0 4
77040: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
77041: LD_ADDR_VAR 0 5
77045: PUSH
77046: LD_EXP 100
77050: PPUSH
77051: LD_VAR 0 1
77055: PPUSH
77056: CALL 20256 0 2
77060: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
77061: LD_EXP 101
77065: PUSH
77066: LD_VAR 0 5
77070: ARRAY
77071: PUSH
77072: LD_EXP 102
77076: LESS
77077: IFFALSE 77266
// begin for i := 1 to vehicles do
77079: LD_ADDR_VAR 0 4
77083: PUSH
77084: DOUBLE
77085: LD_INT 1
77087: DEC
77088: ST_TO_ADDR
77089: LD_VAR 0 2
77093: PUSH
77094: FOR_TO
77095: IFFALSE 77264
// begin if hackTanksCaptured [ index ] = hackLimit then
77097: LD_EXP 101
77101: PUSH
77102: LD_VAR 0 5
77106: ARRAY
77107: PUSH
77108: LD_EXP 102
77112: EQUAL
77113: IFFALSE 77117
// break ;
77115: GO 77264
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
77117: LD_ADDR_EXP 104
77121: PUSH
77122: LD_EXP 104
77126: PPUSH
77127: LD_VAR 0 5
77131: PPUSH
77132: LD_EXP 104
77136: PUSH
77137: LD_VAR 0 5
77141: ARRAY
77142: PUSH
77143: LD_INT 1
77145: PLUS
77146: PPUSH
77147: CALL_OW 1
77151: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
77152: LD_ADDR_EXP 101
77156: PUSH
77157: LD_EXP 101
77161: PPUSH
77162: LD_VAR 0 5
77166: PUSH
77167: LD_EXP 101
77171: PUSH
77172: LD_VAR 0 5
77176: ARRAY
77177: PUSH
77178: LD_INT 1
77180: PLUS
77181: PUSH
77182: EMPTY
77183: LIST
77184: LIST
77185: PPUSH
77186: LD_VAR 0 2
77190: PUSH
77191: LD_VAR 0 4
77195: ARRAY
77196: PUSH
77197: LD_VAR 0 2
77201: PUSH
77202: LD_VAR 0 4
77206: ARRAY
77207: PPUSH
77208: CALL_OW 255
77212: PUSH
77213: EMPTY
77214: LIST
77215: LIST
77216: PPUSH
77217: CALL 20471 0 3
77221: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
77222: LD_VAR 0 2
77226: PUSH
77227: LD_VAR 0 4
77231: ARRAY
77232: PPUSH
77233: LD_VAR 0 1
77237: PPUSH
77238: CALL_OW 255
77242: PPUSH
77243: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
77247: LD_VAR 0 2
77251: PUSH
77252: LD_VAR 0 4
77256: ARRAY
77257: PPUSH
77258: CALL_OW 141
// end ;
77262: GO 77094
77264: POP
77265: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
77266: LD_VAR 0 1
77270: PPUSH
77271: LD_EXP 101
77275: PUSH
77276: LD_VAR 0 5
77280: ARRAY
77281: PUSH
77282: LD_INT 0
77284: PLUS
77285: PPUSH
77286: CALL_OW 505
// end ;
77290: LD_VAR 0 3
77294: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
77295: LD_INT 0
77297: PPUSH
77298: PPUSH
77299: PPUSH
77300: PPUSH
// if not hack in hackTanks then
77301: LD_VAR 0 1
77305: PUSH
77306: LD_EXP 100
77310: IN
77311: NOT
77312: IFFALSE 77316
// exit ;
77314: GO 77556
// index := GetElementIndex ( hackTanks , hack ) ;
77316: LD_ADDR_VAR 0 4
77320: PUSH
77321: LD_EXP 100
77325: PPUSH
77326: LD_VAR 0 1
77330: PPUSH
77331: CALL 20256 0 2
77335: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
77336: LD_ADDR_VAR 0 3
77340: PUSH
77341: DOUBLE
77342: LD_EXP 101
77346: PUSH
77347: LD_VAR 0 4
77351: ARRAY
77352: INC
77353: ST_TO_ADDR
77354: LD_INT 1
77356: PUSH
77357: FOR_DOWNTO
77358: IFFALSE 77530
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
77360: LD_ADDR_VAR 0 5
77364: PUSH
77365: LD_EXP 101
77369: PUSH
77370: LD_VAR 0 4
77374: ARRAY
77375: PUSH
77376: LD_VAR 0 3
77380: ARRAY
77381: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
77382: LD_VAR 0 5
77386: PUSH
77387: LD_INT 1
77389: ARRAY
77390: PPUSH
77391: CALL_OW 302
77395: NOT
77396: PUSH
77397: LD_VAR 0 5
77401: PUSH
77402: LD_INT 1
77404: ARRAY
77405: PPUSH
77406: CALL_OW 255
77410: PUSH
77411: LD_VAR 0 1
77415: PPUSH
77416: CALL_OW 255
77420: NONEQUAL
77421: OR
77422: IFFALSE 77528
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
77424: LD_VAR 0 5
77428: PUSH
77429: LD_INT 1
77431: ARRAY
77432: PPUSH
77433: CALL_OW 305
77437: PUSH
77438: LD_VAR 0 5
77442: PUSH
77443: LD_INT 1
77445: ARRAY
77446: PPUSH
77447: CALL_OW 255
77451: PUSH
77452: LD_VAR 0 1
77456: PPUSH
77457: CALL_OW 255
77461: EQUAL
77462: AND
77463: IFFALSE 77487
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
77465: LD_VAR 0 5
77469: PUSH
77470: LD_INT 1
77472: ARRAY
77473: PPUSH
77474: LD_VAR 0 5
77478: PUSH
77479: LD_INT 2
77481: ARRAY
77482: PPUSH
77483: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
77487: LD_ADDR_EXP 101
77491: PUSH
77492: LD_EXP 101
77496: PPUSH
77497: LD_VAR 0 4
77501: PPUSH
77502: LD_EXP 101
77506: PUSH
77507: LD_VAR 0 4
77511: ARRAY
77512: PPUSH
77513: LD_VAR 0 3
77517: PPUSH
77518: CALL_OW 3
77522: PPUSH
77523: CALL_OW 1
77527: ST_TO_ADDR
// end ; end ;
77528: GO 77357
77530: POP
77531: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
77532: LD_VAR 0 1
77536: PPUSH
77537: LD_EXP 101
77541: PUSH
77542: LD_VAR 0 4
77546: ARRAY
77547: PUSH
77548: LD_INT 0
77550: PLUS
77551: PPUSH
77552: CALL_OW 505
// end ;
77556: LD_VAR 0 2
77560: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
77561: LD_INT 0
77563: PPUSH
77564: PPUSH
77565: PPUSH
77566: PPUSH
// if not hack in hackTanks then
77567: LD_VAR 0 1
77571: PUSH
77572: LD_EXP 100
77576: IN
77577: NOT
77578: IFFALSE 77582
// exit ;
77580: GO 77667
// index := GetElementIndex ( hackTanks , hack ) ;
77582: LD_ADDR_VAR 0 5
77586: PUSH
77587: LD_EXP 100
77591: PPUSH
77592: LD_VAR 0 1
77596: PPUSH
77597: CALL 20256 0 2
77601: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
77602: LD_ADDR_VAR 0 4
77606: PUSH
77607: DOUBLE
77608: LD_INT 1
77610: DEC
77611: ST_TO_ADDR
77612: LD_EXP 101
77616: PUSH
77617: LD_VAR 0 5
77621: ARRAY
77622: PUSH
77623: FOR_TO
77624: IFFALSE 77665
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
77626: LD_EXP 101
77630: PUSH
77631: LD_VAR 0 5
77635: ARRAY
77636: PUSH
77637: LD_VAR 0 4
77641: ARRAY
77642: PUSH
77643: LD_INT 1
77645: ARRAY
77646: PUSH
77647: LD_VAR 0 2
77651: EQUAL
77652: IFFALSE 77663
// KillUnit ( vehicle ) ;
77654: LD_VAR 0 2
77658: PPUSH
77659: CALL_OW 66
77663: GO 77623
77665: POP
77666: POP
// end ;
77667: LD_VAR 0 3
77671: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
77672: LD_EXP 105
77676: NOT
77677: IFFALSE 77712
77679: GO 77681
77681: DISABLE
// begin initMiner := true ;
77682: LD_ADDR_EXP 105
77686: PUSH
77687: LD_INT 1
77689: ST_TO_ADDR
// minersList := [ ] ;
77690: LD_ADDR_EXP 106
77694: PUSH
77695: EMPTY
77696: ST_TO_ADDR
// minerMinesList := [ ] ;
77697: LD_ADDR_EXP 107
77701: PUSH
77702: EMPTY
77703: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
77704: LD_ADDR_EXP 108
77708: PUSH
77709: LD_INT 5
77711: ST_TO_ADDR
// end ;
77712: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
77713: LD_EXP 105
77717: PUSH
77718: LD_INT 34
77720: PUSH
77721: LD_INT 81
77723: PUSH
77724: EMPTY
77725: LIST
77726: LIST
77727: PPUSH
77728: CALL_OW 69
77732: AND
77733: IFFALSE 78194
77735: GO 77737
77737: DISABLE
77738: LD_INT 0
77740: PPUSH
77741: PPUSH
77742: PPUSH
77743: PPUSH
// begin enable ;
77744: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
77745: LD_ADDR_VAR 0 1
77749: PUSH
77750: LD_INT 34
77752: PUSH
77753: LD_INT 81
77755: PUSH
77756: EMPTY
77757: LIST
77758: LIST
77759: PPUSH
77760: CALL_OW 69
77764: PUSH
77765: FOR_IN
77766: IFFALSE 77838
// begin if not i in minersList then
77768: LD_VAR 0 1
77772: PUSH
77773: LD_EXP 106
77777: IN
77778: NOT
77779: IFFALSE 77836
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
77781: LD_ADDR_EXP 106
77785: PUSH
77786: LD_EXP 106
77790: PPUSH
77791: LD_EXP 106
77795: PUSH
77796: LD_INT 1
77798: PLUS
77799: PPUSH
77800: LD_VAR 0 1
77804: PPUSH
77805: CALL_OW 1
77809: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
77810: LD_ADDR_EXP 107
77814: PUSH
77815: LD_EXP 107
77819: PPUSH
77820: LD_EXP 107
77824: PUSH
77825: LD_INT 1
77827: PLUS
77828: PPUSH
77829: EMPTY
77830: PPUSH
77831: CALL_OW 1
77835: ST_TO_ADDR
// end end ;
77836: GO 77765
77838: POP
77839: POP
// for i := minerMinesList downto 1 do
77840: LD_ADDR_VAR 0 1
77844: PUSH
77845: DOUBLE
77846: LD_EXP 107
77850: INC
77851: ST_TO_ADDR
77852: LD_INT 1
77854: PUSH
77855: FOR_DOWNTO
77856: IFFALSE 78192
// begin if IsLive ( minersList [ i ] ) then
77858: LD_EXP 106
77862: PUSH
77863: LD_VAR 0 1
77867: ARRAY
77868: PPUSH
77869: CALL_OW 300
77873: IFFALSE 77901
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
77875: LD_EXP 106
77879: PUSH
77880: LD_VAR 0 1
77884: ARRAY
77885: PPUSH
77886: LD_EXP 107
77890: PUSH
77891: LD_VAR 0 1
77895: ARRAY
77896: PPUSH
77897: CALL_OW 505
// if not minerMinesList [ i ] then
77901: LD_EXP 107
77905: PUSH
77906: LD_VAR 0 1
77910: ARRAY
77911: NOT
77912: IFFALSE 77916
// continue ;
77914: GO 77855
// for j := minerMinesList [ i ] downto 1 do
77916: LD_ADDR_VAR 0 2
77920: PUSH
77921: DOUBLE
77922: LD_EXP 107
77926: PUSH
77927: LD_VAR 0 1
77931: ARRAY
77932: INC
77933: ST_TO_ADDR
77934: LD_INT 1
77936: PUSH
77937: FOR_DOWNTO
77938: IFFALSE 78188
// begin side := GetSide ( minersList [ i ] ) ;
77940: LD_ADDR_VAR 0 3
77944: PUSH
77945: LD_EXP 106
77949: PUSH
77950: LD_VAR 0 1
77954: ARRAY
77955: PPUSH
77956: CALL_OW 255
77960: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
77961: LD_ADDR_VAR 0 4
77965: PUSH
77966: LD_EXP 107
77970: PUSH
77971: LD_VAR 0 1
77975: ARRAY
77976: PUSH
77977: LD_VAR 0 2
77981: ARRAY
77982: PUSH
77983: LD_INT 1
77985: ARRAY
77986: PPUSH
77987: LD_EXP 107
77991: PUSH
77992: LD_VAR 0 1
77996: ARRAY
77997: PUSH
77998: LD_VAR 0 2
78002: ARRAY
78003: PUSH
78004: LD_INT 2
78006: ARRAY
78007: PPUSH
78008: CALL_OW 428
78012: ST_TO_ADDR
// if not tmp then
78013: LD_VAR 0 4
78017: NOT
78018: IFFALSE 78022
// continue ;
78020: GO 77937
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
78022: LD_VAR 0 4
78026: PUSH
78027: LD_INT 81
78029: PUSH
78030: LD_VAR 0 3
78034: PUSH
78035: EMPTY
78036: LIST
78037: LIST
78038: PPUSH
78039: CALL_OW 69
78043: IN
78044: PUSH
78045: LD_EXP 107
78049: PUSH
78050: LD_VAR 0 1
78054: ARRAY
78055: PUSH
78056: LD_VAR 0 2
78060: ARRAY
78061: PUSH
78062: LD_INT 1
78064: ARRAY
78065: PPUSH
78066: LD_EXP 107
78070: PUSH
78071: LD_VAR 0 1
78075: ARRAY
78076: PUSH
78077: LD_VAR 0 2
78081: ARRAY
78082: PUSH
78083: LD_INT 2
78085: ARRAY
78086: PPUSH
78087: CALL_OW 458
78091: AND
78092: IFFALSE 78186
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
78094: LD_EXP 107
78098: PUSH
78099: LD_VAR 0 1
78103: ARRAY
78104: PUSH
78105: LD_VAR 0 2
78109: ARRAY
78110: PUSH
78111: LD_INT 1
78113: ARRAY
78114: PPUSH
78115: LD_EXP 107
78119: PUSH
78120: LD_VAR 0 1
78124: ARRAY
78125: PUSH
78126: LD_VAR 0 2
78130: ARRAY
78131: PUSH
78132: LD_INT 2
78134: ARRAY
78135: PPUSH
78136: LD_VAR 0 3
78140: PPUSH
78141: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
78145: LD_ADDR_EXP 107
78149: PUSH
78150: LD_EXP 107
78154: PPUSH
78155: LD_VAR 0 1
78159: PPUSH
78160: LD_EXP 107
78164: PUSH
78165: LD_VAR 0 1
78169: ARRAY
78170: PPUSH
78171: LD_VAR 0 2
78175: PPUSH
78176: CALL_OW 3
78180: PPUSH
78181: CALL_OW 1
78185: ST_TO_ADDR
// end ; end ;
78186: GO 77937
78188: POP
78189: POP
// end ;
78190: GO 77855
78192: POP
78193: POP
// end ;
78194: PPOPN 4
78196: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
78197: LD_INT 0
78199: PPUSH
78200: PPUSH
// result := false ;
78201: LD_ADDR_VAR 0 4
78205: PUSH
78206: LD_INT 0
78208: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
78209: LD_VAR 0 1
78213: PPUSH
78214: CALL_OW 264
78218: PUSH
78219: LD_INT 81
78221: EQUAL
78222: NOT
78223: IFFALSE 78227
// exit ;
78225: GO 78467
// index := GetElementIndex ( minersList , unit ) ;
78227: LD_ADDR_VAR 0 5
78231: PUSH
78232: LD_EXP 106
78236: PPUSH
78237: LD_VAR 0 1
78241: PPUSH
78242: CALL 20256 0 2
78246: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
78247: LD_EXP 107
78251: PUSH
78252: LD_VAR 0 5
78256: ARRAY
78257: PUSH
78258: LD_EXP 108
78262: GREATEREQUAL
78263: IFFALSE 78267
// exit ;
78265: GO 78467
// ComMoveXY ( unit , x , y ) ;
78267: LD_VAR 0 1
78271: PPUSH
78272: LD_VAR 0 2
78276: PPUSH
78277: LD_VAR 0 3
78281: PPUSH
78282: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78286: LD_INT 35
78288: PPUSH
78289: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
78293: LD_VAR 0 1
78297: PPUSH
78298: LD_VAR 0 2
78302: PPUSH
78303: LD_VAR 0 3
78307: PPUSH
78308: CALL 52017 0 3
78312: NOT
78313: PUSH
78314: LD_VAR 0 1
78318: PPUSH
78319: CALL_OW 314
78323: AND
78324: IFFALSE 78328
// exit ;
78326: GO 78467
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
78328: LD_VAR 0 2
78332: PPUSH
78333: LD_VAR 0 3
78337: PPUSH
78338: CALL_OW 428
78342: PUSH
78343: LD_VAR 0 1
78347: EQUAL
78348: PUSH
78349: LD_VAR 0 1
78353: PPUSH
78354: CALL_OW 314
78358: NOT
78359: AND
78360: IFFALSE 78286
// PlaySoundXY ( x , y , PlantMine ) ;
78362: LD_VAR 0 2
78366: PPUSH
78367: LD_VAR 0 3
78371: PPUSH
78372: LD_STRING PlantMine
78374: PPUSH
78375: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
78379: LD_VAR 0 2
78383: PPUSH
78384: LD_VAR 0 3
78388: PPUSH
78389: LD_VAR 0 1
78393: PPUSH
78394: CALL_OW 255
78398: PPUSH
78399: LD_INT 0
78401: PPUSH
78402: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
78406: LD_ADDR_EXP 107
78410: PUSH
78411: LD_EXP 107
78415: PPUSH
78416: LD_VAR 0 5
78420: PUSH
78421: LD_EXP 107
78425: PUSH
78426: LD_VAR 0 5
78430: ARRAY
78431: PUSH
78432: LD_INT 1
78434: PLUS
78435: PUSH
78436: EMPTY
78437: LIST
78438: LIST
78439: PPUSH
78440: LD_VAR 0 2
78444: PUSH
78445: LD_VAR 0 3
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PPUSH
78454: CALL 20471 0 3
78458: ST_TO_ADDR
// result := true ;
78459: LD_ADDR_VAR 0 4
78463: PUSH
78464: LD_INT 1
78466: ST_TO_ADDR
// end ;
78467: LD_VAR 0 4
78471: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
78472: LD_INT 0
78474: PPUSH
78475: PPUSH
78476: PPUSH
// if not unit in minersList then
78477: LD_VAR 0 1
78481: PUSH
78482: LD_EXP 106
78486: IN
78487: NOT
78488: IFFALSE 78492
// exit ;
78490: GO 78884
// index := GetElementIndex ( minersList , unit ) ;
78492: LD_ADDR_VAR 0 6
78496: PUSH
78497: LD_EXP 106
78501: PPUSH
78502: LD_VAR 0 1
78506: PPUSH
78507: CALL 20256 0 2
78511: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
78512: LD_ADDR_VAR 0 5
78516: PUSH
78517: DOUBLE
78518: LD_EXP 107
78522: PUSH
78523: LD_VAR 0 6
78527: ARRAY
78528: INC
78529: ST_TO_ADDR
78530: LD_INT 1
78532: PUSH
78533: FOR_DOWNTO
78534: IFFALSE 78695
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
78536: LD_EXP 107
78540: PUSH
78541: LD_VAR 0 6
78545: ARRAY
78546: PUSH
78547: LD_VAR 0 5
78551: ARRAY
78552: PUSH
78553: LD_INT 1
78555: ARRAY
78556: PUSH
78557: LD_VAR 0 2
78561: EQUAL
78562: PUSH
78563: LD_EXP 107
78567: PUSH
78568: LD_VAR 0 6
78572: ARRAY
78573: PUSH
78574: LD_VAR 0 5
78578: ARRAY
78579: PUSH
78580: LD_INT 2
78582: ARRAY
78583: PUSH
78584: LD_VAR 0 3
78588: EQUAL
78589: AND
78590: IFFALSE 78693
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
78592: LD_EXP 107
78596: PUSH
78597: LD_VAR 0 6
78601: ARRAY
78602: PUSH
78603: LD_VAR 0 5
78607: ARRAY
78608: PUSH
78609: LD_INT 1
78611: ARRAY
78612: PPUSH
78613: LD_EXP 107
78617: PUSH
78618: LD_VAR 0 6
78622: ARRAY
78623: PUSH
78624: LD_VAR 0 5
78628: ARRAY
78629: PUSH
78630: LD_INT 2
78632: ARRAY
78633: PPUSH
78634: LD_VAR 0 1
78638: PPUSH
78639: CALL_OW 255
78643: PPUSH
78644: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
78648: LD_ADDR_EXP 107
78652: PUSH
78653: LD_EXP 107
78657: PPUSH
78658: LD_VAR 0 6
78662: PPUSH
78663: LD_EXP 107
78667: PUSH
78668: LD_VAR 0 6
78672: ARRAY
78673: PPUSH
78674: LD_VAR 0 5
78678: PPUSH
78679: CALL_OW 3
78683: PPUSH
78684: CALL_OW 1
78688: ST_TO_ADDR
// exit ;
78689: POP
78690: POP
78691: GO 78884
// end ; end ;
78693: GO 78533
78695: POP
78696: POP
// for i := minerMinesList [ index ] downto 1 do
78697: LD_ADDR_VAR 0 5
78701: PUSH
78702: DOUBLE
78703: LD_EXP 107
78707: PUSH
78708: LD_VAR 0 6
78712: ARRAY
78713: INC
78714: ST_TO_ADDR
78715: LD_INT 1
78717: PUSH
78718: FOR_DOWNTO
78719: IFFALSE 78882
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
78721: LD_EXP 107
78725: PUSH
78726: LD_VAR 0 6
78730: ARRAY
78731: PUSH
78732: LD_VAR 0 5
78736: ARRAY
78737: PUSH
78738: LD_INT 1
78740: ARRAY
78741: PPUSH
78742: LD_EXP 107
78746: PUSH
78747: LD_VAR 0 6
78751: ARRAY
78752: PUSH
78753: LD_VAR 0 5
78757: ARRAY
78758: PUSH
78759: LD_INT 2
78761: ARRAY
78762: PPUSH
78763: LD_VAR 0 2
78767: PPUSH
78768: LD_VAR 0 3
78772: PPUSH
78773: CALL_OW 298
78777: PUSH
78778: LD_INT 6
78780: LESS
78781: IFFALSE 78880
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
78783: LD_EXP 107
78787: PUSH
78788: LD_VAR 0 6
78792: ARRAY
78793: PUSH
78794: LD_VAR 0 5
78798: ARRAY
78799: PUSH
78800: LD_INT 1
78802: ARRAY
78803: PPUSH
78804: LD_EXP 107
78808: PUSH
78809: LD_VAR 0 6
78813: ARRAY
78814: PUSH
78815: LD_VAR 0 5
78819: ARRAY
78820: PUSH
78821: LD_INT 2
78823: ARRAY
78824: PPUSH
78825: LD_VAR 0 1
78829: PPUSH
78830: CALL_OW 255
78834: PPUSH
78835: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
78839: LD_ADDR_EXP 107
78843: PUSH
78844: LD_EXP 107
78848: PPUSH
78849: LD_VAR 0 6
78853: PPUSH
78854: LD_EXP 107
78858: PUSH
78859: LD_VAR 0 6
78863: ARRAY
78864: PPUSH
78865: LD_VAR 0 5
78869: PPUSH
78870: CALL_OW 3
78874: PPUSH
78875: CALL_OW 1
78879: ST_TO_ADDR
// end ; end ;
78880: GO 78718
78882: POP
78883: POP
// end ;
78884: LD_VAR 0 4
78888: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
78889: LD_INT 0
78891: PPUSH
78892: PPUSH
78893: PPUSH
78894: PPUSH
78895: PPUSH
78896: PPUSH
78897: PPUSH
78898: PPUSH
78899: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
78900: LD_VAR 0 1
78904: PPUSH
78905: CALL_OW 264
78909: PUSH
78910: LD_INT 81
78912: EQUAL
78913: NOT
78914: PUSH
78915: LD_VAR 0 1
78919: PUSH
78920: LD_EXP 106
78924: IN
78925: NOT
78926: OR
78927: IFFALSE 78931
// exit ;
78929: GO 79253
// index := GetElementIndex ( minersList , unit ) ;
78931: LD_ADDR_VAR 0 6
78935: PUSH
78936: LD_EXP 106
78940: PPUSH
78941: LD_VAR 0 1
78945: PPUSH
78946: CALL 20256 0 2
78950: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
78951: LD_ADDR_VAR 0 8
78955: PUSH
78956: LD_EXP 108
78960: PUSH
78961: LD_EXP 107
78965: PUSH
78966: LD_VAR 0 6
78970: ARRAY
78971: MINUS
78972: ST_TO_ADDR
// if not minesFreeAmount then
78973: LD_VAR 0 8
78977: NOT
78978: IFFALSE 78982
// exit ;
78980: GO 79253
// tmp := [ ] ;
78982: LD_ADDR_VAR 0 7
78986: PUSH
78987: EMPTY
78988: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
78989: LD_ADDR_VAR 0 5
78993: PUSH
78994: DOUBLE
78995: LD_INT 1
78997: DEC
78998: ST_TO_ADDR
78999: LD_VAR 0 8
79003: PUSH
79004: FOR_TO
79005: IFFALSE 79200
// begin _d := rand ( 0 , 5 ) ;
79007: LD_ADDR_VAR 0 11
79011: PUSH
79012: LD_INT 0
79014: PPUSH
79015: LD_INT 5
79017: PPUSH
79018: CALL_OW 12
79022: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
79023: LD_ADDR_VAR 0 12
79027: PUSH
79028: LD_INT 2
79030: PPUSH
79031: LD_INT 6
79033: PPUSH
79034: CALL_OW 12
79038: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
79039: LD_ADDR_VAR 0 9
79043: PUSH
79044: LD_VAR 0 2
79048: PPUSH
79049: LD_VAR 0 11
79053: PPUSH
79054: LD_VAR 0 12
79058: PPUSH
79059: CALL_OW 272
79063: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
79064: LD_ADDR_VAR 0 10
79068: PUSH
79069: LD_VAR 0 3
79073: PPUSH
79074: LD_VAR 0 11
79078: PPUSH
79079: LD_VAR 0 12
79083: PPUSH
79084: CALL_OW 273
79088: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
79089: LD_VAR 0 9
79093: PPUSH
79094: LD_VAR 0 10
79098: PPUSH
79099: CALL_OW 488
79103: PUSH
79104: LD_VAR 0 9
79108: PUSH
79109: LD_VAR 0 10
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: PUSH
79118: LD_VAR 0 7
79122: IN
79123: NOT
79124: AND
79125: PUSH
79126: LD_VAR 0 9
79130: PPUSH
79131: LD_VAR 0 10
79135: PPUSH
79136: CALL_OW 458
79140: NOT
79141: AND
79142: IFFALSE 79184
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
79144: LD_ADDR_VAR 0 7
79148: PUSH
79149: LD_VAR 0 7
79153: PPUSH
79154: LD_VAR 0 7
79158: PUSH
79159: LD_INT 1
79161: PLUS
79162: PPUSH
79163: LD_VAR 0 9
79167: PUSH
79168: LD_VAR 0 10
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: PPUSH
79177: CALL_OW 1
79181: ST_TO_ADDR
79182: GO 79198
// i := i - 1 ;
79184: LD_ADDR_VAR 0 5
79188: PUSH
79189: LD_VAR 0 5
79193: PUSH
79194: LD_INT 1
79196: MINUS
79197: ST_TO_ADDR
// end ;
79198: GO 79004
79200: POP
79201: POP
// for i in tmp do
79202: LD_ADDR_VAR 0 5
79206: PUSH
79207: LD_VAR 0 7
79211: PUSH
79212: FOR_IN
79213: IFFALSE 79251
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
79215: LD_VAR 0 1
79219: PPUSH
79220: LD_VAR 0 5
79224: PUSH
79225: LD_INT 1
79227: ARRAY
79228: PPUSH
79229: LD_VAR 0 5
79233: PUSH
79234: LD_INT 2
79236: ARRAY
79237: PPUSH
79238: CALL 78197 0 3
79242: NOT
79243: IFFALSE 79249
// exit ;
79245: POP
79246: POP
79247: GO 79253
79249: GO 79212
79251: POP
79252: POP
// end ;
79253: LD_VAR 0 4
79257: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
79258: LD_INT 0
79260: PPUSH
79261: PPUSH
79262: PPUSH
79263: PPUSH
79264: PPUSH
79265: PPUSH
79266: PPUSH
79267: PPUSH
79268: PPUSH
// if GetClass ( unit ) <> class_sniper then
79269: LD_VAR 0 1
79273: PPUSH
79274: CALL_OW 257
79278: PUSH
79279: LD_INT 5
79281: NONEQUAL
79282: IFFALSE 79286
// exit ;
79284: GO 79752
// dist := 8 ;
79286: LD_ADDR_VAR 0 5
79290: PUSH
79291: LD_INT 8
79293: ST_TO_ADDR
// viewRange := 12 ;
79294: LD_ADDR_VAR 0 8
79298: PUSH
79299: LD_INT 12
79301: ST_TO_ADDR
// side := GetSide ( unit ) ;
79302: LD_ADDR_VAR 0 6
79306: PUSH
79307: LD_VAR 0 1
79311: PPUSH
79312: CALL_OW 255
79316: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
79317: LD_INT 61
79319: PPUSH
79320: LD_VAR 0 6
79324: PPUSH
79325: CALL_OW 321
79329: PUSH
79330: LD_INT 2
79332: EQUAL
79333: IFFALSE 79343
// viewRange := 16 ;
79335: LD_ADDR_VAR 0 8
79339: PUSH
79340: LD_INT 16
79342: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
79343: LD_VAR 0 1
79347: PPUSH
79348: LD_VAR 0 2
79352: PPUSH
79353: LD_VAR 0 3
79357: PPUSH
79358: CALL_OW 297
79362: PUSH
79363: LD_VAR 0 5
79367: GREATER
79368: IFFALSE 79447
// begin ComMoveXY ( unit , x , y ) ;
79370: LD_VAR 0 1
79374: PPUSH
79375: LD_VAR 0 2
79379: PPUSH
79380: LD_VAR 0 3
79384: PPUSH
79385: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79389: LD_INT 35
79391: PPUSH
79392: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
79396: LD_VAR 0 1
79400: PPUSH
79401: LD_VAR 0 2
79405: PPUSH
79406: LD_VAR 0 3
79410: PPUSH
79411: CALL 52017 0 3
79415: NOT
79416: IFFALSE 79420
// exit ;
79418: GO 79752
// until GetDistUnitXY ( unit , x , y ) < dist ;
79420: LD_VAR 0 1
79424: PPUSH
79425: LD_VAR 0 2
79429: PPUSH
79430: LD_VAR 0 3
79434: PPUSH
79435: CALL_OW 297
79439: PUSH
79440: LD_VAR 0 5
79444: LESS
79445: IFFALSE 79389
// end ; ComTurnXY ( unit , x , y ) ;
79447: LD_VAR 0 1
79451: PPUSH
79452: LD_VAR 0 2
79456: PPUSH
79457: LD_VAR 0 3
79461: PPUSH
79462: CALL_OW 118
// repeat if Multiplayer then
79466: LD_OWVAR 4
79470: IFFALSE 79481
// wait ( 35 ) else
79472: LD_INT 35
79474: PPUSH
79475: CALL_OW 67
79479: GO 79488
// wait ( 5 ) ;
79481: LD_INT 5
79483: PPUSH
79484: CALL_OW 67
// _d := GetDir ( unit ) ;
79488: LD_ADDR_VAR 0 11
79492: PUSH
79493: LD_VAR 0 1
79497: PPUSH
79498: CALL_OW 254
79502: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
79503: LD_ADDR_VAR 0 7
79507: PUSH
79508: LD_VAR 0 1
79512: PPUSH
79513: CALL_OW 250
79517: PPUSH
79518: LD_VAR 0 1
79522: PPUSH
79523: CALL_OW 251
79527: PPUSH
79528: LD_VAR 0 2
79532: PPUSH
79533: LD_VAR 0 3
79537: PPUSH
79538: CALL 54625 0 4
79542: ST_TO_ADDR
// until dir = _d ;
79543: LD_VAR 0 7
79547: PUSH
79548: LD_VAR 0 11
79552: EQUAL
79553: IFFALSE 79466
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
79555: LD_ADDR_VAR 0 9
79559: PUSH
79560: LD_VAR 0 1
79564: PPUSH
79565: CALL_OW 250
79569: PPUSH
79570: LD_VAR 0 7
79574: PPUSH
79575: LD_VAR 0 5
79579: PPUSH
79580: CALL_OW 272
79584: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
79585: LD_ADDR_VAR 0 10
79589: PUSH
79590: LD_VAR 0 1
79594: PPUSH
79595: CALL_OW 251
79599: PPUSH
79600: LD_VAR 0 7
79604: PPUSH
79605: LD_VAR 0 5
79609: PPUSH
79610: CALL_OW 273
79614: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79615: LD_VAR 0 9
79619: PPUSH
79620: LD_VAR 0 10
79624: PPUSH
79625: CALL_OW 488
79629: NOT
79630: IFFALSE 79634
// exit ;
79632: GO 79752
// ComAnimCustom ( unit , 1 ) ;
79634: LD_VAR 0 1
79638: PPUSH
79639: LD_INT 1
79641: PPUSH
79642: CALL_OW 592
// p := 0 ;
79646: LD_ADDR_VAR 0 12
79650: PUSH
79651: LD_INT 0
79653: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
79654: LD_VAR 0 9
79658: PPUSH
79659: LD_VAR 0 10
79663: PPUSH
79664: LD_VAR 0 6
79668: PPUSH
79669: LD_VAR 0 8
79673: PPUSH
79674: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
79678: LD_INT 35
79680: PPUSH
79681: CALL_OW 67
// p := Inc ( p ) ;
79685: LD_ADDR_VAR 0 12
79689: PUSH
79690: LD_VAR 0 12
79694: PPUSH
79695: CALL 54581 0 1
79699: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
79700: LD_VAR 0 12
79704: PUSH
79705: LD_INT 3
79707: EQUAL
79708: PUSH
79709: LD_VAR 0 1
79713: PPUSH
79714: CALL_OW 302
79718: NOT
79719: OR
79720: PUSH
79721: LD_VAR 0 1
79725: PPUSH
79726: CALL_OW 301
79730: OR
79731: IFFALSE 79678
// RemoveSeeing ( _x , _y , side ) ;
79733: LD_VAR 0 9
79737: PPUSH
79738: LD_VAR 0 10
79742: PPUSH
79743: LD_VAR 0 6
79747: PPUSH
79748: CALL_OW 331
// end ;
79752: LD_VAR 0 4
79756: RET
