// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 41 0 0
// Action ;
  12: CALL 504 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := true ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// prefix := 08_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 08_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
// uc_side := 5 ;
  45: LD_ADDR_OWVAR 20
  49: PUSH
  50: LD_INT 5
  52: ST_TO_ADDR
// uc_nation := nation_arabian ;
  53: LD_ADDR_OWVAR 21
  57: PUSH
  58: LD_INT 2
  60: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING Heike
  68: PPUSH
  69: LD_EXP 1
  73: NOT
  74: PPUSH
  75: LD_EXP 2
  79: PPUSH
  80: CALL 512 0 3
  84: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_STRING Ibrahim
  92: PPUSH
  93: LD_EXP 1
  97: NOT
  98: PPUSH
  99: LD_EXP 2
 103: PPUSH
 104: CALL 512 0 3
 108: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 109: LD_ADDR_EXP 4
 113: PUSH
 114: LD_STRING Givi
 116: PPUSH
 117: LD_EXP 1
 121: NOT
 122: PPUSH
 123: LD_EXP 2
 127: PPUSH
 128: CALL 512 0 3
 132: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 133: LD_ADDR_EXP 7
 137: PUSH
 138: LD_STRING Kamil
 140: PPUSH
 141: LD_EXP 1
 145: NOT
 146: PPUSH
 147: LD_EXP 2
 151: PPUSH
 152: CALL 512 0 3
 156: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_STRING Kaia
 164: PPUSH
 165: LD_EXP 1
 169: NOT
 170: PPUSH
 171: LD_EXP 2
 175: PPUSH
 176: CALL 512 0 3
 180: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 181: LD_ADDR_EXP 9
 185: PUSH
 186: LD_STRING Sophia
 188: PPUSH
 189: LD_EXP 1
 193: NOT
 194: PPUSH
 195: LD_EXP 2
 199: PPUSH
 200: CALL 512 0 3
 204: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 205: LD_ADDR_EXP 10
 209: PUSH
 210: LD_STRING Markov
 212: PPUSH
 213: LD_EXP 1
 217: NOT
 218: PPUSH
 219: LD_EXP 2
 223: PPUSH
 224: CALL 512 0 3
 228: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 229: LD_ADDR_EXP 13
 233: PUSH
 234: LD_STRING Aviradze
 236: PPUSH
 237: LD_EXP 1
 241: NOT
 242: PPUSH
 243: LD_EXP 2
 247: PPUSH
 248: CALL 512 0 3
 252: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 253: LD_ADDR_EXP 12
 257: PUSH
 258: LD_STRING Kurt
 260: PPUSH
 261: LD_EXP 1
 265: NOT
 266: PPUSH
 267: LD_EXP 2
 271: PPUSH
 272: CALL 512 0 3
 276: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 277: LD_ADDR_EXP 5
 281: PUSH
 282: LD_STRING Mike
 284: PPUSH
 285: LD_EXP 1
 289: NOT
 290: PPUSH
 291: LD_EXP 2
 295: PPUSH
 296: CALL 512 0 3
 300: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 301: LD_ADDR_EXP 11
 305: PUSH
 306: LD_STRING Olaf
 308: PPUSH
 309: LD_EXP 1
 313: NOT
 314: PPUSH
 315: LD_EXP 2
 319: PPUSH
 320: CALL 512 0 3
 324: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 325: LD_ADDR_EXP 20
 329: PUSH
 330: LD_STRING 08_others
 332: PPUSH
 333: CALL_OW 31
 337: ST_TO_ADDR
// uc_side := 2 ;
 338: LD_ADDR_OWVAR 20
 342: PUSH
 343: LD_INT 2
 345: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , 09_ ) ;
 346: LD_ADDR_EXP 14
 350: PUSH
 351: LD_STRING Schulz
 353: PPUSH
 354: LD_EXP 1
 358: NOT
 359: PPUSH
 360: LD_STRING 09_
 362: PPUSH
 363: CALL 512 0 3
 367: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , 09_ ) ;
 368: LD_ADDR_EXP 15
 372: PUSH
 373: LD_STRING Basim
 375: PPUSH
 376: LD_EXP 1
 380: NOT
 381: PPUSH
 382: LD_STRING 09_
 384: PPUSH
 385: CALL 512 0 3
 389: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , 09_ ) ;
 390: LD_ADDR_EXP 16
 394: PUSH
 395: LD_STRING Lemmy
 397: PPUSH
 398: LD_EXP 1
 402: NOT
 403: PPUSH
 404: LD_STRING 09_
 406: PPUSH
 407: CALL 512 0 3
 411: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , 09_ ) ;
 412: LD_ADDR_EXP 17
 416: PUSH
 417: LD_STRING Mia
 419: PPUSH
 420: LD_EXP 1
 424: NOT
 425: PPUSH
 426: LD_STRING 09_
 428: PPUSH
 429: CALL 512 0 3
 433: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , 09_ ) ;
 434: LD_ADDR_EXP 18
 438: PUSH
 439: LD_STRING Nia
 441: PPUSH
 442: LD_EXP 1
 446: NOT
 447: PPUSH
 448: LD_STRING 09_
 450: PPUSH
 451: CALL 512 0 3
 455: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , 09_ ) ;
 456: LD_ADDR_EXP 19
 460: PUSH
 461: LD_STRING Jenna
 463: PPUSH
 464: LD_EXP 1
 468: NOT
 469: PPUSH
 470: LD_STRING 09_
 472: PPUSH
 473: CALL 512 0 3
 477: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09_others ) ;
 478: LD_ADDR_EXP 21
 482: PUSH
 483: LD_STRING 09_others
 485: PPUSH
 486: CALL_OW 31
 490: ST_TO_ADDR
// end ; end_of_file end_of_file
 491: LD_VAR 0 1
 495: RET
// export function LoadEnv ; begin
 496: LD_INT 0
 498: PPUSH
// end ; end_of_file end_of_file
 499: LD_VAR 0 1
 503: RET
// export function Action ; begin
 504: LD_INT 0
 506: PPUSH
// end ; end_of_file
 507: LD_VAR 0 1
 511: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
// if exist_mode then
 516: LD_VAR 0 2
 520: IFFALSE 545
// unit := CreateCharacter ( prefix & ident ) else
 522: LD_ADDR_VAR 0 5
 526: PUSH
 527: LD_VAR 0 3
 531: PUSH
 532: LD_VAR 0 1
 536: STR
 537: PPUSH
 538: CALL_OW 34
 542: ST_TO_ADDR
 543: GO 560
// unit := NewCharacter ( ident ) ;
 545: LD_ADDR_VAR 0 5
 549: PUSH
 550: LD_VAR 0 1
 554: PPUSH
 555: CALL_OW 25
 559: ST_TO_ADDR
// result := unit ;
 560: LD_ADDR_VAR 0 4
 564: PUSH
 565: LD_VAR 0 5
 569: ST_TO_ADDR
// end ;
 570: LD_VAR 0 4
 574: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 575: LD_INT 0
 577: PPUSH
 578: PPUSH
// if not side or not nation then
 579: LD_VAR 0 1
 583: NOT
 584: PUSH
 585: LD_VAR 0 2
 589: NOT
 590: OR
 591: IFFALSE 595
// exit ;
 593: GO 1363
// case nation of nation_american :
 595: LD_VAR 0 2
 599: PUSH
 600: LD_INT 1
 602: DOUBLE
 603: EQUAL
 604: IFTRUE 608
 606: GO 822
 608: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 609: LD_ADDR_VAR 0 4
 613: PUSH
 614: LD_INT 35
 616: PUSH
 617: LD_INT 45
 619: PUSH
 620: LD_INT 46
 622: PUSH
 623: LD_INT 47
 625: PUSH
 626: LD_INT 82
 628: PUSH
 629: LD_INT 83
 631: PUSH
 632: LD_INT 84
 634: PUSH
 635: LD_INT 85
 637: PUSH
 638: LD_INT 86
 640: PUSH
 641: LD_INT 1
 643: PUSH
 644: LD_INT 2
 646: PUSH
 647: LD_INT 6
 649: PUSH
 650: LD_INT 15
 652: PUSH
 653: LD_INT 16
 655: PUSH
 656: LD_INT 7
 658: PUSH
 659: LD_INT 12
 661: PUSH
 662: LD_INT 13
 664: PUSH
 665: LD_INT 10
 667: PUSH
 668: LD_INT 14
 670: PUSH
 671: LD_INT 20
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 22
 679: PUSH
 680: LD_INT 25
 682: PUSH
 683: LD_INT 32
 685: PUSH
 686: LD_INT 27
 688: PUSH
 689: LD_INT 36
 691: PUSH
 692: LD_INT 69
 694: PUSH
 695: LD_INT 39
 697: PUSH
 698: LD_INT 34
 700: PUSH
 701: LD_INT 40
 703: PUSH
 704: LD_INT 48
 706: PUSH
 707: LD_INT 49
 709: PUSH
 710: LD_INT 50
 712: PUSH
 713: LD_INT 51
 715: PUSH
 716: LD_INT 52
 718: PUSH
 719: LD_INT 53
 721: PUSH
 722: LD_INT 54
 724: PUSH
 725: LD_INT 55
 727: PUSH
 728: LD_INT 56
 730: PUSH
 731: LD_INT 57
 733: PUSH
 734: LD_INT 58
 736: PUSH
 737: LD_INT 59
 739: PUSH
 740: LD_INT 60
 742: PUSH
 743: LD_INT 61
 745: PUSH
 746: LD_INT 62
 748: PUSH
 749: LD_INT 80
 751: PUSH
 752: LD_INT 82
 754: PUSH
 755: LD_INT 83
 757: PUSH
 758: LD_INT 84
 760: PUSH
 761: LD_INT 85
 763: PUSH
 764: LD_INT 86
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: ST_TO_ADDR
 820: GO 1287
 822: LD_INT 2
 824: DOUBLE
 825: EQUAL
 826: IFTRUE 830
 828: GO 1056
 830: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 831: LD_ADDR_VAR 0 4
 835: PUSH
 836: LD_INT 35
 838: PUSH
 839: LD_INT 45
 841: PUSH
 842: LD_INT 46
 844: PUSH
 845: LD_INT 47
 847: PUSH
 848: LD_INT 82
 850: PUSH
 851: LD_INT 83
 853: PUSH
 854: LD_INT 84
 856: PUSH
 857: LD_INT 85
 859: PUSH
 860: LD_INT 87
 862: PUSH
 863: LD_INT 70
 865: PUSH
 866: LD_INT 1
 868: PUSH
 869: LD_INT 11
 871: PUSH
 872: LD_INT 3
 874: PUSH
 875: LD_INT 4
 877: PUSH
 878: LD_INT 5
 880: PUSH
 881: LD_INT 6
 883: PUSH
 884: LD_INT 15
 886: PUSH
 887: LD_INT 18
 889: PUSH
 890: LD_INT 7
 892: PUSH
 893: LD_INT 17
 895: PUSH
 896: LD_INT 8
 898: PUSH
 899: LD_INT 20
 901: PUSH
 902: LD_INT 21
 904: PUSH
 905: LD_INT 22
 907: PUSH
 908: LD_INT 72
 910: PUSH
 911: LD_INT 26
 913: PUSH
 914: LD_INT 69
 916: PUSH
 917: LD_INT 39
 919: PUSH
 920: LD_INT 40
 922: PUSH
 923: LD_INT 41
 925: PUSH
 926: LD_INT 42
 928: PUSH
 929: LD_INT 43
 931: PUSH
 932: LD_INT 48
 934: PUSH
 935: LD_INT 49
 937: PUSH
 938: LD_INT 50
 940: PUSH
 941: LD_INT 51
 943: PUSH
 944: LD_INT 52
 946: PUSH
 947: LD_INT 53
 949: PUSH
 950: LD_INT 54
 952: PUSH
 953: LD_INT 55
 955: PUSH
 956: LD_INT 56
 958: PUSH
 959: LD_INT 60
 961: PUSH
 962: LD_INT 61
 964: PUSH
 965: LD_INT 62
 967: PUSH
 968: LD_INT 66
 970: PUSH
 971: LD_INT 67
 973: PUSH
 974: LD_INT 68
 976: PUSH
 977: LD_INT 81
 979: PUSH
 980: LD_INT 82
 982: PUSH
 983: LD_INT 83
 985: PUSH
 986: LD_INT 84
 988: PUSH
 989: LD_INT 85
 991: PUSH
 992: LD_INT 87
 994: PUSH
 995: LD_INT 88
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: ST_TO_ADDR
1054: GO 1287
1056: LD_INT 3
1058: DOUBLE
1059: EQUAL
1060: IFTRUE 1064
1062: GO 1286
1064: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1065: LD_ADDR_VAR 0 4
1069: PUSH
1070: LD_INT 46
1072: PUSH
1073: LD_INT 47
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 2
1081: PUSH
1082: LD_INT 82
1084: PUSH
1085: LD_INT 83
1087: PUSH
1088: LD_INT 84
1090: PUSH
1091: LD_INT 85
1093: PUSH
1094: LD_INT 86
1096: PUSH
1097: LD_INT 11
1099: PUSH
1100: LD_INT 9
1102: PUSH
1103: LD_INT 20
1105: PUSH
1106: LD_INT 19
1108: PUSH
1109: LD_INT 21
1111: PUSH
1112: LD_INT 24
1114: PUSH
1115: LD_INT 22
1117: PUSH
1118: LD_INT 25
1120: PUSH
1121: LD_INT 28
1123: PUSH
1124: LD_INT 29
1126: PUSH
1127: LD_INT 30
1129: PUSH
1130: LD_INT 31
1132: PUSH
1133: LD_INT 37
1135: PUSH
1136: LD_INT 38
1138: PUSH
1139: LD_INT 32
1141: PUSH
1142: LD_INT 27
1144: PUSH
1145: LD_INT 33
1147: PUSH
1148: LD_INT 69
1150: PUSH
1151: LD_INT 39
1153: PUSH
1154: LD_INT 34
1156: PUSH
1157: LD_INT 40
1159: PUSH
1160: LD_INT 71
1162: PUSH
1163: LD_INT 23
1165: PUSH
1166: LD_INT 44
1168: PUSH
1169: LD_INT 48
1171: PUSH
1172: LD_INT 49
1174: PUSH
1175: LD_INT 50
1177: PUSH
1178: LD_INT 51
1180: PUSH
1181: LD_INT 52
1183: PUSH
1184: LD_INT 53
1186: PUSH
1187: LD_INT 54
1189: PUSH
1190: LD_INT 55
1192: PUSH
1193: LD_INT 56
1195: PUSH
1196: LD_INT 57
1198: PUSH
1199: LD_INT 58
1201: PUSH
1202: LD_INT 59
1204: PUSH
1205: LD_INT 63
1207: PUSH
1208: LD_INT 64
1210: PUSH
1211: LD_INT 65
1213: PUSH
1214: LD_INT 82
1216: PUSH
1217: LD_INT 83
1219: PUSH
1220: LD_INT 84
1222: PUSH
1223: LD_INT 85
1225: PUSH
1226: LD_INT 86
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: ST_TO_ADDR
1284: GO 1287
1286: POP
// if state > - 1 and state < 3 then
1287: LD_VAR 0 3
1291: PUSH
1292: LD_INT 1
1294: NEG
1295: GREATER
1296: PUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 3
1304: LESS
1305: AND
1306: IFFALSE 1363
// for i in result do
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 4
1317: PUSH
1318: FOR_IN
1319: IFFALSE 1361
// if GetTech ( i , side ) <> state then
1321: LD_VAR 0 5
1325: PPUSH
1326: LD_VAR 0 1
1330: PPUSH
1331: CALL_OW 321
1335: PUSH
1336: LD_VAR 0 3
1340: NONEQUAL
1341: IFFALSE 1359
// result := result diff i ;
1343: LD_ADDR_VAR 0 4
1347: PUSH
1348: LD_VAR 0 4
1352: PUSH
1353: LD_VAR 0 5
1357: DIFF
1358: ST_TO_ADDR
1359: GO 1318
1361: POP
1362: POP
// end ;
1363: LD_VAR 0 4
1367: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1368: LD_INT 0
1370: PPUSH
1371: PPUSH
1372: PPUSH
// result := true ;
1373: LD_ADDR_VAR 0 3
1377: PUSH
1378: LD_INT 1
1380: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1381: LD_ADDR_VAR 0 5
1385: PUSH
1386: LD_VAR 0 2
1390: PPUSH
1391: CALL_OW 480
1395: ST_TO_ADDR
// if not tmp then
1396: LD_VAR 0 5
1400: NOT
1401: IFFALSE 1405
// exit ;
1403: GO 1454
// for i in tmp do
1405: LD_ADDR_VAR 0 4
1409: PUSH
1410: LD_VAR 0 5
1414: PUSH
1415: FOR_IN
1416: IFFALSE 1452
// if GetTech ( i , side ) <> state_researched then
1418: LD_VAR 0 4
1422: PPUSH
1423: LD_VAR 0 1
1427: PPUSH
1428: CALL_OW 321
1432: PUSH
1433: LD_INT 2
1435: NONEQUAL
1436: IFFALSE 1450
// begin result := false ;
1438: LD_ADDR_VAR 0 3
1442: PUSH
1443: LD_INT 0
1445: ST_TO_ADDR
// exit ;
1446: POP
1447: POP
1448: GO 1454
// end ;
1450: GO 1415
1452: POP
1453: POP
// end ;
1454: LD_VAR 0 3
1458: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1459: LD_INT 0
1461: PPUSH
1462: PPUSH
1463: PPUSH
1464: PPUSH
1465: PPUSH
1466: PPUSH
1467: PPUSH
1468: PPUSH
1469: PPUSH
1470: PPUSH
1471: PPUSH
1472: PPUSH
1473: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1474: LD_VAR 0 1
1478: NOT
1479: PUSH
1480: LD_VAR 0 1
1484: PPUSH
1485: CALL_OW 257
1489: PUSH
1490: LD_INT 9
1492: NONEQUAL
1493: OR
1494: IFFALSE 1498
// exit ;
1496: GO 2071
// side := GetSide ( unit ) ;
1498: LD_ADDR_VAR 0 9
1502: PUSH
1503: LD_VAR 0 1
1507: PPUSH
1508: CALL_OW 255
1512: ST_TO_ADDR
// tech_space := tech_spacanom ;
1513: LD_ADDR_VAR 0 12
1517: PUSH
1518: LD_INT 29
1520: ST_TO_ADDR
// tech_time := tech_taurad ;
1521: LD_ADDR_VAR 0 13
1525: PUSH
1526: LD_INT 28
1528: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1529: LD_ADDR_VAR 0 11
1533: PUSH
1534: LD_VAR 0 1
1538: PPUSH
1539: CALL_OW 310
1543: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1544: LD_VAR 0 11
1548: PPUSH
1549: CALL_OW 247
1553: PUSH
1554: LD_INT 2
1556: EQUAL
1557: IFFALSE 1561
// exit ;
1559: GO 2071
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1561: LD_ADDR_VAR 0 8
1565: PUSH
1566: LD_INT 81
1568: PUSH
1569: LD_VAR 0 9
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 3
1580: PUSH
1581: LD_INT 21
1583: PUSH
1584: LD_INT 3
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PPUSH
1599: CALL_OW 69
1603: ST_TO_ADDR
// if not tmp then
1604: LD_VAR 0 8
1608: NOT
1609: IFFALSE 1613
// exit ;
1611: GO 2071
// if in_unit then
1613: LD_VAR 0 11
1617: IFFALSE 1641
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1619: LD_ADDR_VAR 0 10
1623: PUSH
1624: LD_VAR 0 8
1628: PPUSH
1629: LD_VAR 0 11
1633: PPUSH
1634: CALL_OW 74
1638: ST_TO_ADDR
1639: GO 1661
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1641: LD_ADDR_VAR 0 10
1645: PUSH
1646: LD_VAR 0 8
1650: PPUSH
1651: LD_VAR 0 1
1655: PPUSH
1656: CALL_OW 74
1660: ST_TO_ADDR
// if not enemy then
1661: LD_VAR 0 10
1665: NOT
1666: IFFALSE 1670
// exit ;
1668: GO 2071
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1670: LD_VAR 0 11
1674: PUSH
1675: LD_VAR 0 11
1679: PPUSH
1680: LD_VAR 0 10
1684: PPUSH
1685: CALL_OW 296
1689: PUSH
1690: LD_INT 13
1692: GREATER
1693: AND
1694: PUSH
1695: LD_VAR 0 1
1699: PPUSH
1700: LD_VAR 0 10
1704: PPUSH
1705: CALL_OW 296
1709: PUSH
1710: LD_INT 12
1712: GREATER
1713: OR
1714: IFFALSE 1718
// exit ;
1716: GO 2071
// missile := [ 1 ] ;
1718: LD_ADDR_VAR 0 14
1722: PUSH
1723: LD_INT 1
1725: PUSH
1726: EMPTY
1727: LIST
1728: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1729: LD_VAR 0 9
1733: PPUSH
1734: LD_VAR 0 12
1738: PPUSH
1739: CALL_OW 325
1743: IFFALSE 1772
// missile := Replace ( missile , missile + 1 , 2 ) ;
1745: LD_ADDR_VAR 0 14
1749: PUSH
1750: LD_VAR 0 14
1754: PPUSH
1755: LD_VAR 0 14
1759: PUSH
1760: LD_INT 1
1762: PLUS
1763: PPUSH
1764: LD_INT 2
1766: PPUSH
1767: CALL_OW 1
1771: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1772: LD_VAR 0 9
1776: PPUSH
1777: LD_VAR 0 13
1781: PPUSH
1782: CALL_OW 325
1786: PUSH
1787: LD_VAR 0 10
1791: PPUSH
1792: CALL_OW 255
1796: PPUSH
1797: LD_VAR 0 13
1801: PPUSH
1802: CALL_OW 325
1806: NOT
1807: AND
1808: IFFALSE 1837
// missile := Replace ( missile , missile + 1 , 3 ) ;
1810: LD_ADDR_VAR 0 14
1814: PUSH
1815: LD_VAR 0 14
1819: PPUSH
1820: LD_VAR 0 14
1824: PUSH
1825: LD_INT 1
1827: PLUS
1828: PPUSH
1829: LD_INT 3
1831: PPUSH
1832: CALL_OW 1
1836: ST_TO_ADDR
// if missile < 2 then
1837: LD_VAR 0 14
1841: PUSH
1842: LD_INT 2
1844: LESS
1845: IFFALSE 1849
// exit ;
1847: GO 2071
// x := GetX ( enemy ) ;
1849: LD_ADDR_VAR 0 4
1853: PUSH
1854: LD_VAR 0 10
1858: PPUSH
1859: CALL_OW 250
1863: ST_TO_ADDR
// y := GetY ( enemy ) ;
1864: LD_ADDR_VAR 0 5
1868: PUSH
1869: LD_VAR 0 10
1873: PPUSH
1874: CALL_OW 251
1878: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1879: LD_ADDR_VAR 0 6
1883: PUSH
1884: LD_VAR 0 4
1888: PUSH
1889: LD_INT 1
1891: NEG
1892: PPUSH
1893: LD_INT 1
1895: PPUSH
1896: CALL_OW 12
1900: PLUS
1901: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1902: LD_ADDR_VAR 0 7
1906: PUSH
1907: LD_VAR 0 5
1911: PUSH
1912: LD_INT 1
1914: NEG
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: CALL_OW 12
1923: PLUS
1924: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1925: LD_VAR 0 6
1929: PPUSH
1930: LD_VAR 0 7
1934: PPUSH
1935: CALL_OW 488
1939: NOT
1940: IFFALSE 1962
// begin _x := x ;
1942: LD_ADDR_VAR 0 6
1946: PUSH
1947: LD_VAR 0 4
1951: ST_TO_ADDR
// _y := y ;
1952: LD_ADDR_VAR 0 7
1956: PUSH
1957: LD_VAR 0 5
1961: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1962: LD_ADDR_VAR 0 3
1966: PUSH
1967: LD_INT 1
1969: PPUSH
1970: LD_VAR 0 14
1974: PPUSH
1975: CALL_OW 12
1979: ST_TO_ADDR
// case i of 1 :
1980: LD_VAR 0 3
1984: PUSH
1985: LD_INT 1
1987: DOUBLE
1988: EQUAL
1989: IFTRUE 1993
1991: GO 2010
1993: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1994: LD_VAR 0 1
1998: PPUSH
1999: LD_VAR 0 10
2003: PPUSH
2004: CALL_OW 115
2008: GO 2071
2010: LD_INT 2
2012: DOUBLE
2013: EQUAL
2014: IFTRUE 2018
2016: GO 2040
2018: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2019: LD_VAR 0 1
2023: PPUSH
2024: LD_VAR 0 6
2028: PPUSH
2029: LD_VAR 0 7
2033: PPUSH
2034: CALL_OW 153
2038: GO 2071
2040: LD_INT 3
2042: DOUBLE
2043: EQUAL
2044: IFTRUE 2048
2046: GO 2070
2048: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2049: LD_VAR 0 1
2053: PPUSH
2054: LD_VAR 0 6
2058: PPUSH
2059: LD_VAR 0 7
2063: PPUSH
2064: CALL_OW 154
2068: GO 2071
2070: POP
// end ;
2071: LD_VAR 0 2
2075: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2076: LD_INT 0
2078: PPUSH
2079: PPUSH
2080: PPUSH
2081: PPUSH
2082: PPUSH
2083: PPUSH
// if not unit or not building then
2084: LD_VAR 0 1
2088: NOT
2089: PUSH
2090: LD_VAR 0 2
2094: NOT
2095: OR
2096: IFFALSE 2100
// exit ;
2098: GO 2258
// x := GetX ( building ) ;
2100: LD_ADDR_VAR 0 5
2104: PUSH
2105: LD_VAR 0 2
2109: PPUSH
2110: CALL_OW 250
2114: ST_TO_ADDR
// y := GetY ( building ) ;
2115: LD_ADDR_VAR 0 6
2119: PUSH
2120: LD_VAR 0 2
2124: PPUSH
2125: CALL_OW 251
2129: ST_TO_ADDR
// for i = 0 to 5 do
2130: LD_ADDR_VAR 0 4
2134: PUSH
2135: DOUBLE
2136: LD_INT 0
2138: DEC
2139: ST_TO_ADDR
2140: LD_INT 5
2142: PUSH
2143: FOR_TO
2144: IFFALSE 2256
// begin _x := ShiftX ( x , i , 3 ) ;
2146: LD_ADDR_VAR 0 7
2150: PUSH
2151: LD_VAR 0 5
2155: PPUSH
2156: LD_VAR 0 4
2160: PPUSH
2161: LD_INT 3
2163: PPUSH
2164: CALL_OW 272
2168: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2169: LD_ADDR_VAR 0 8
2173: PUSH
2174: LD_VAR 0 6
2178: PPUSH
2179: LD_VAR 0 4
2183: PPUSH
2184: LD_INT 3
2186: PPUSH
2187: CALL_OW 273
2191: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2192: LD_VAR 0 7
2196: PPUSH
2197: LD_VAR 0 8
2201: PPUSH
2202: CALL_OW 488
2206: NOT
2207: IFFALSE 2211
// continue ;
2209: GO 2143
// if HexInfo ( _x , _y ) = 0 then
2211: LD_VAR 0 7
2215: PPUSH
2216: LD_VAR 0 8
2220: PPUSH
2221: CALL_OW 428
2225: PUSH
2226: LD_INT 0
2228: EQUAL
2229: IFFALSE 2254
// begin ComMoveXY ( unit , _x , _y ) ;
2231: LD_VAR 0 1
2235: PPUSH
2236: LD_VAR 0 7
2240: PPUSH
2241: LD_VAR 0 8
2245: PPUSH
2246: CALL_OW 111
// exit ;
2250: POP
2251: POP
2252: GO 2258
// end ; end ;
2254: GO 2143
2256: POP
2257: POP
// end ;
2258: LD_VAR 0 3
2262: RET
// export function ScanBase ( side , base_area ) ; begin
2263: LD_INT 0
2265: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_VAR 0 2
2275: PPUSH
2276: LD_INT 81
2278: PUSH
2279: LD_VAR 0 1
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PPUSH
2288: CALL_OW 70
2292: ST_TO_ADDR
// end ;
2293: LD_VAR 0 3
2297: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2298: LD_INT 0
2300: PPUSH
2301: PPUSH
2302: PPUSH
2303: PPUSH
// result := false ;
2304: LD_ADDR_VAR 0 2
2308: PUSH
2309: LD_INT 0
2311: ST_TO_ADDR
// side := GetSide ( unit ) ;
2312: LD_ADDR_VAR 0 3
2316: PUSH
2317: LD_VAR 0 1
2321: PPUSH
2322: CALL_OW 255
2326: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2327: LD_ADDR_VAR 0 4
2331: PUSH
2332: LD_VAR 0 1
2336: PPUSH
2337: CALL_OW 248
2341: ST_TO_ADDR
// case nat of 1 :
2342: LD_VAR 0 4
2346: PUSH
2347: LD_INT 1
2349: DOUBLE
2350: EQUAL
2351: IFTRUE 2355
2353: GO 2366
2355: POP
// tech := tech_lassight ; 2 :
2356: LD_ADDR_VAR 0 5
2360: PUSH
2361: LD_INT 12
2363: ST_TO_ADDR
2364: GO 2405
2366: LD_INT 2
2368: DOUBLE
2369: EQUAL
2370: IFTRUE 2374
2372: GO 2385
2374: POP
// tech := tech_mortar ; 3 :
2375: LD_ADDR_VAR 0 5
2379: PUSH
2380: LD_INT 41
2382: ST_TO_ADDR
2383: GO 2405
2385: LD_INT 3
2387: DOUBLE
2388: EQUAL
2389: IFTRUE 2393
2391: GO 2404
2393: POP
// tech := tech_bazooka ; end ;
2394: LD_ADDR_VAR 0 5
2398: PUSH
2399: LD_INT 44
2401: ST_TO_ADDR
2402: GO 2405
2404: POP
// if Researched ( side , tech ) then
2405: LD_VAR 0 3
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 325
2419: IFFALSE 2446
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: LD_INT 5
2428: PUSH
2429: LD_INT 8
2431: PUSH
2432: LD_INT 9
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: LIST
2439: PUSH
2440: LD_VAR 0 4
2444: ARRAY
2445: ST_TO_ADDR
// end ;
2446: LD_VAR 0 2
2450: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2451: LD_INT 0
2453: PPUSH
2454: PPUSH
2455: PPUSH
// if not mines then
2456: LD_VAR 0 2
2460: NOT
2461: IFFALSE 2465
// exit ;
2463: GO 2609
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2465: LD_ADDR_VAR 0 5
2469: PUSH
2470: LD_INT 81
2472: PUSH
2473: LD_VAR 0 1
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 21
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: ST_TO_ADDR
// for i in mines do
2508: LD_ADDR_VAR 0 4
2512: PUSH
2513: LD_VAR 0 2
2517: PUSH
2518: FOR_IN
2519: IFFALSE 2607
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2521: LD_VAR 0 4
2525: PUSH
2526: LD_INT 1
2528: ARRAY
2529: PPUSH
2530: LD_VAR 0 4
2534: PUSH
2535: LD_INT 2
2537: ARRAY
2538: PPUSH
2539: CALL_OW 458
2543: NOT
2544: IFFALSE 2548
// continue ;
2546: GO 2518
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2548: LD_VAR 0 4
2552: PUSH
2553: LD_INT 1
2555: ARRAY
2556: PPUSH
2557: LD_VAR 0 4
2561: PUSH
2562: LD_INT 2
2564: ARRAY
2565: PPUSH
2566: CALL_OW 428
2570: PUSH
2571: LD_VAR 0 5
2575: IN
2576: IFFALSE 2605
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2578: LD_VAR 0 4
2582: PUSH
2583: LD_INT 1
2585: ARRAY
2586: PPUSH
2587: LD_VAR 0 4
2591: PUSH
2592: LD_INT 2
2594: ARRAY
2595: PPUSH
2596: LD_VAR 0 1
2600: PPUSH
2601: CALL_OW 456
// end ;
2605: GO 2518
2607: POP
2608: POP
// end ;
2609: LD_VAR 0 3
2613: RET
// export function Count ( array ) ; var i ; begin
2614: LD_INT 0
2616: PPUSH
2617: PPUSH
// result := 0 ;
2618: LD_ADDR_VAR 0 2
2622: PUSH
2623: LD_INT 0
2625: ST_TO_ADDR
// for i in array do
2626: LD_ADDR_VAR 0 3
2630: PUSH
2631: LD_VAR 0 1
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2661
// if i then
2639: LD_VAR 0 3
2643: IFFALSE 2659
// result := result + 1 ;
2645: LD_ADDR_VAR 0 2
2649: PUSH
2650: LD_VAR 0 2
2654: PUSH
2655: LD_INT 1
2657: PLUS
2658: ST_TO_ADDR
2659: GO 2636
2661: POP
2662: POP
// end ;
2663: LD_VAR 0 2
2667: RET
// export function IsEmpty ( building ) ; begin
2668: LD_INT 0
2670: PPUSH
// if not building then
2671: LD_VAR 0 1
2675: NOT
2676: IFFALSE 2680
// exit ;
2678: GO 2723
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2680: LD_ADDR_VAR 0 2
2684: PUSH
2685: LD_VAR 0 1
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_VAR 0 1
2697: PPUSH
2698: CALL_OW 255
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 58
2709: PUSH
2710: EMPTY
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PPUSH
2717: CALL_OW 69
2721: IN
2722: ST_TO_ADDR
// end ;
2723: LD_VAR 0 2
2727: RET
// export function IsNotFull ( building ) ; var places ; begin
2728: LD_INT 0
2730: PPUSH
2731: PPUSH
// if not building then
2732: LD_VAR 0 1
2736: NOT
2737: IFFALSE 2741
// exit ;
2739: GO 2912
// result := false ;
2741: LD_ADDR_VAR 0 2
2745: PUSH
2746: LD_INT 0
2748: ST_TO_ADDR
// places := 0 ;
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: LD_INT 0
2756: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL_OW 266
2766: PUSH
2767: LD_INT 0
2769: DOUBLE
2770: EQUAL
2771: IFTRUE 2829
2773: LD_INT 1
2775: DOUBLE
2776: EQUAL
2777: IFTRUE 2829
2779: LD_INT 6
2781: DOUBLE
2782: EQUAL
2783: IFTRUE 2829
2785: LD_INT 7
2787: DOUBLE
2788: EQUAL
2789: IFTRUE 2829
2791: LD_INT 8
2793: DOUBLE
2794: EQUAL
2795: IFTRUE 2829
2797: LD_INT 4
2799: DOUBLE
2800: EQUAL
2801: IFTRUE 2829
2803: LD_INT 5
2805: DOUBLE
2806: EQUAL
2807: IFTRUE 2829
2809: LD_INT 2
2811: DOUBLE
2812: EQUAL
2813: IFTRUE 2829
2815: LD_INT 3
2817: DOUBLE
2818: EQUAL
2819: IFTRUE 2829
2821: LD_INT 35
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2840
2829: POP
// places := 6 ; b_bunker , b_breastwork :
2830: LD_ADDR_VAR 0 3
2834: PUSH
2835: LD_INT 6
2837: ST_TO_ADDR
2838: GO 2885
2840: LD_INT 32
2842: DOUBLE
2843: EQUAL
2844: IFTRUE 2854
2846: LD_INT 31
2848: DOUBLE
2849: EQUAL
2850: IFTRUE 2854
2852: GO 2865
2854: POP
// places := 1 ; b_control_tower :
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
2863: GO 2885
2865: LD_INT 36
2867: DOUBLE
2868: EQUAL
2869: IFTRUE 2873
2871: GO 2884
2873: POP
// places := 3 ; end ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 3
2881: ST_TO_ADDR
2882: GO 2885
2884: POP
// if places then
2885: LD_VAR 0 3
2889: IFFALSE 2912
// result := UnitsInside ( building ) < places ;
2891: LD_ADDR_VAR 0 2
2895: PUSH
2896: LD_VAR 0 1
2900: PPUSH
2901: CALL_OW 313
2905: PUSH
2906: LD_VAR 0 3
2910: LESS
2911: ST_TO_ADDR
// end ;
2912: LD_VAR 0 2
2916: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2917: LD_INT 0
2919: PPUSH
2920: PPUSH
2921: PPUSH
2922: PPUSH
// tmp := [ ] ;
2923: LD_ADDR_VAR 0 3
2927: PUSH
2928: EMPTY
2929: ST_TO_ADDR
// list := [ ] ;
2930: LD_ADDR_VAR 0 5
2934: PUSH
2935: EMPTY
2936: ST_TO_ADDR
// for i = 16 to 25 do
2937: LD_ADDR_VAR 0 4
2941: PUSH
2942: DOUBLE
2943: LD_INT 16
2945: DEC
2946: ST_TO_ADDR
2947: LD_INT 25
2949: PUSH
2950: FOR_TO
2951: IFFALSE 3024
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2953: LD_ADDR_VAR 0 3
2957: PUSH
2958: LD_VAR 0 3
2962: PUSH
2963: LD_INT 22
2965: PUSH
2966: LD_VAR 0 1
2970: PPUSH
2971: CALL_OW 255
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: LD_INT 91
2982: PUSH
2983: LD_VAR 0 1
2987: PUSH
2988: LD_INT 6
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 30
2998: PUSH
2999: LD_VAR 0 4
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: LIST
3012: PUSH
3013: EMPTY
3014: LIST
3015: PPUSH
3016: CALL_OW 69
3020: ADD
3021: ST_TO_ADDR
3022: GO 2950
3024: POP
3025: POP
// for i = 1 to tmp do
3026: LD_ADDR_VAR 0 4
3030: PUSH
3031: DOUBLE
3032: LD_INT 1
3034: DEC
3035: ST_TO_ADDR
3036: LD_VAR 0 3
3040: PUSH
3041: FOR_TO
3042: IFFALSE 3130
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3044: LD_ADDR_VAR 0 5
3048: PUSH
3049: LD_VAR 0 5
3053: PUSH
3054: LD_VAR 0 3
3058: PUSH
3059: LD_VAR 0 4
3063: ARRAY
3064: PPUSH
3065: CALL_OW 266
3069: PUSH
3070: LD_VAR 0 3
3074: PUSH
3075: LD_VAR 0 4
3079: ARRAY
3080: PPUSH
3081: CALL_OW 250
3085: PUSH
3086: LD_VAR 0 3
3090: PUSH
3091: LD_VAR 0 4
3095: ARRAY
3096: PPUSH
3097: CALL_OW 251
3101: PUSH
3102: LD_VAR 0 3
3106: PUSH
3107: LD_VAR 0 4
3111: ARRAY
3112: PPUSH
3113: CALL_OW 254
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: PUSH
3124: EMPTY
3125: LIST
3126: ADD
3127: ST_TO_ADDR
3128: GO 3041
3130: POP
3131: POP
// result := list ;
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: LD_VAR 0 5
3141: ST_TO_ADDR
// end ;
3142: LD_VAR 0 2
3146: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3147: LD_INT 0
3149: PPUSH
3150: PPUSH
3151: PPUSH
3152: PPUSH
3153: PPUSH
3154: PPUSH
3155: PPUSH
// if not factory then
3156: LD_VAR 0 1
3160: NOT
3161: IFFALSE 3165
// exit ;
3163: GO 3758
// if control = control_apeman then
3165: LD_VAR 0 4
3169: PUSH
3170: LD_INT 5
3172: EQUAL
3173: IFFALSE 3282
// begin tmp := UnitsInside ( factory ) ;
3175: LD_ADDR_VAR 0 8
3179: PUSH
3180: LD_VAR 0 1
3184: PPUSH
3185: CALL_OW 313
3189: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3190: LD_VAR 0 8
3194: PPUSH
3195: LD_INT 25
3197: PUSH
3198: LD_INT 12
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PPUSH
3205: CALL_OW 72
3209: NOT
3210: IFFALSE 3220
// control := control_manual ;
3212: LD_ADDR_VAR 0 4
3216: PUSH
3217: LD_INT 1
3219: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3220: LD_ADDR_VAR 0 8
3224: PUSH
3225: LD_VAR 0 1
3229: PPUSH
3230: CALL 2917 0 1
3234: ST_TO_ADDR
// if tmp then
3235: LD_VAR 0 8
3239: IFFALSE 3282
// begin for i in tmp do
3241: LD_ADDR_VAR 0 7
3245: PUSH
3246: LD_VAR 0 8
3250: PUSH
3251: FOR_IN
3252: IFFALSE 3280
// if i [ 1 ] = b_ext_radio then
3254: LD_VAR 0 7
3258: PUSH
3259: LD_INT 1
3261: ARRAY
3262: PUSH
3263: LD_INT 22
3265: EQUAL
3266: IFFALSE 3278
// begin control := control_remote ;
3268: LD_ADDR_VAR 0 4
3272: PUSH
3273: LD_INT 2
3275: ST_TO_ADDR
// break ;
3276: GO 3280
// end ;
3278: GO 3251
3280: POP
3281: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3282: LD_VAR 0 1
3286: PPUSH
3287: LD_VAR 0 2
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PPUSH
3302: LD_VAR 0 5
3306: PPUSH
3307: CALL_OW 448
3311: IFFALSE 3346
// begin result := [ chassis , engine , control , weapon ] ;
3313: LD_ADDR_VAR 0 6
3317: PUSH
3318: LD_VAR 0 2
3322: PUSH
3323: LD_VAR 0 3
3327: PUSH
3328: LD_VAR 0 4
3332: PUSH
3333: LD_VAR 0 5
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: ST_TO_ADDR
// exit ;
3344: GO 3758
// end ; _chassis := AvailableChassisList ( factory ) ;
3346: LD_ADDR_VAR 0 9
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 475
3360: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3361: LD_ADDR_VAR 0 11
3365: PUSH
3366: LD_VAR 0 1
3370: PPUSH
3371: CALL_OW 476
3375: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3376: LD_ADDR_VAR 0 12
3380: PUSH
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 477
3390: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3391: LD_ADDR_VAR 0 10
3395: PUSH
3396: LD_VAR 0 1
3400: PPUSH
3401: CALL_OW 478
3405: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3406: LD_VAR 0 9
3410: NOT
3411: PUSH
3412: LD_VAR 0 11
3416: NOT
3417: OR
3418: PUSH
3419: LD_VAR 0 12
3423: NOT
3424: OR
3425: PUSH
3426: LD_VAR 0 10
3430: NOT
3431: OR
3432: IFFALSE 3467
// begin result := [ chassis , engine , control , weapon ] ;
3434: LD_ADDR_VAR 0 6
3438: PUSH
3439: LD_VAR 0 2
3443: PUSH
3444: LD_VAR 0 3
3448: PUSH
3449: LD_VAR 0 4
3453: PUSH
3454: LD_VAR 0 5
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: ST_TO_ADDR
// exit ;
3465: GO 3758
// end ; if not chassis in _chassis then
3467: LD_VAR 0 2
3471: PUSH
3472: LD_VAR 0 9
3476: IN
3477: NOT
3478: IFFALSE 3504
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3480: LD_ADDR_VAR 0 2
3484: PUSH
3485: LD_VAR 0 9
3489: PUSH
3490: LD_INT 1
3492: PPUSH
3493: LD_VAR 0 9
3497: PPUSH
3498: CALL_OW 12
3502: ARRAY
3503: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3504: LD_VAR 0 2
3508: PPUSH
3509: LD_VAR 0 3
3513: PPUSH
3514: CALL 3763 0 2
3518: NOT
3519: IFFALSE 3578
// repeat engine := _engine [ 1 ] ;
3521: LD_ADDR_VAR 0 3
3525: PUSH
3526: LD_VAR 0 11
3530: PUSH
3531: LD_INT 1
3533: ARRAY
3534: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3535: LD_ADDR_VAR 0 11
3539: PUSH
3540: LD_VAR 0 11
3544: PPUSH
3545: LD_INT 1
3547: PPUSH
3548: CALL_OW 3
3552: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3553: LD_VAR 0 2
3557: PPUSH
3558: LD_VAR 0 3
3562: PPUSH
3563: CALL 3763 0 2
3567: PUSH
3568: LD_VAR 0 11
3572: PUSH
3573: EMPTY
3574: EQUAL
3575: OR
3576: IFFALSE 3521
// if not control in _control then
3578: LD_VAR 0 4
3582: PUSH
3583: LD_VAR 0 12
3587: IN
3588: NOT
3589: IFFALSE 3615
// control := _control [ rand ( 1 , _control ) ] ;
3591: LD_ADDR_VAR 0 4
3595: PUSH
3596: LD_VAR 0 12
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_VAR 0 12
3608: PPUSH
3609: CALL_OW 12
3613: ARRAY
3614: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3615: LD_VAR 0 2
3619: PPUSH
3620: LD_VAR 0 5
3624: PPUSH
3625: CALL 3983 0 2
3629: NOT
3630: IFFALSE 3689
// repeat weapon := _weapon [ 1 ] ;
3632: LD_ADDR_VAR 0 5
3636: PUSH
3637: LD_VAR 0 10
3641: PUSH
3642: LD_INT 1
3644: ARRAY
3645: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3646: LD_ADDR_VAR 0 10
3650: PUSH
3651: LD_VAR 0 10
3655: PPUSH
3656: LD_INT 1
3658: PPUSH
3659: CALL_OW 3
3663: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3664: LD_VAR 0 2
3668: PPUSH
3669: LD_VAR 0 5
3673: PPUSH
3674: CALL 3983 0 2
3678: PUSH
3679: LD_VAR 0 10
3683: PUSH
3684: EMPTY
3685: EQUAL
3686: OR
3687: IFFALSE 3632
// result := [ ] ;
3689: LD_ADDR_VAR 0 6
3693: PUSH
3694: EMPTY
3695: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3696: LD_VAR 0 1
3700: PPUSH
3701: LD_VAR 0 2
3705: PPUSH
3706: LD_VAR 0 3
3710: PPUSH
3711: LD_VAR 0 4
3715: PPUSH
3716: LD_VAR 0 5
3720: PPUSH
3721: CALL_OW 448
3725: IFFALSE 3758
// result := [ chassis , engine , control , weapon ] ;
3727: LD_ADDR_VAR 0 6
3731: PUSH
3732: LD_VAR 0 2
3736: PUSH
3737: LD_VAR 0 3
3741: PUSH
3742: LD_VAR 0 4
3746: PUSH
3747: LD_VAR 0 5
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: ST_TO_ADDR
// end ;
3758: LD_VAR 0 6
3762: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3763: LD_INT 0
3765: PPUSH
// if not chassis or not engine then
3766: LD_VAR 0 1
3770: NOT
3771: PUSH
3772: LD_VAR 0 2
3776: NOT
3777: OR
3778: IFFALSE 3782
// exit ;
3780: GO 3978
// case engine of engine_solar :
3782: LD_VAR 0 2
3786: PUSH
3787: LD_INT 2
3789: DOUBLE
3790: EQUAL
3791: IFTRUE 3795
3793: GO 3833
3795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3796: LD_ADDR_VAR 0 3
3800: PUSH
3801: LD_INT 11
3803: PUSH
3804: LD_INT 12
3806: PUSH
3807: LD_INT 13
3809: PUSH
3810: LD_INT 14
3812: PUSH
3813: LD_INT 1
3815: PUSH
3816: LD_INT 2
3818: PUSH
3819: LD_INT 3
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: ST_TO_ADDR
3831: GO 3962
3833: LD_INT 1
3835: DOUBLE
3836: EQUAL
3837: IFTRUE 3841
3839: GO 3903
3841: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3842: LD_ADDR_VAR 0 3
3846: PUSH
3847: LD_INT 11
3849: PUSH
3850: LD_INT 12
3852: PUSH
3853: LD_INT 13
3855: PUSH
3856: LD_INT 14
3858: PUSH
3859: LD_INT 1
3861: PUSH
3862: LD_INT 2
3864: PUSH
3865: LD_INT 3
3867: PUSH
3868: LD_INT 4
3870: PUSH
3871: LD_INT 5
3873: PUSH
3874: LD_INT 21
3876: PUSH
3877: LD_INT 23
3879: PUSH
3880: LD_INT 22
3882: PUSH
3883: LD_INT 24
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
3901: GO 3962
3903: LD_INT 3
3905: DOUBLE
3906: EQUAL
3907: IFTRUE 3911
3909: GO 3961
3911: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3912: LD_ADDR_VAR 0 3
3916: PUSH
3917: LD_INT 13
3919: PUSH
3920: LD_INT 14
3922: PUSH
3923: LD_INT 2
3925: PUSH
3926: LD_INT 3
3928: PUSH
3929: LD_INT 4
3931: PUSH
3932: LD_INT 5
3934: PUSH
3935: LD_INT 21
3937: PUSH
3938: LD_INT 22
3940: PUSH
3941: LD_INT 23
3943: PUSH
3944: LD_INT 24
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: ST_TO_ADDR
3959: GO 3962
3961: POP
// result := ( chassis in result ) ;
3962: LD_ADDR_VAR 0 3
3966: PUSH
3967: LD_VAR 0 1
3971: PUSH
3972: LD_VAR 0 3
3976: IN
3977: ST_TO_ADDR
// end ;
3978: LD_VAR 0 3
3982: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3983: LD_INT 0
3985: PPUSH
// if not chassis or not weapon then
3986: LD_VAR 0 1
3990: NOT
3991: PUSH
3992: LD_VAR 0 2
3996: NOT
3997: OR
3998: IFFALSE 4002
// exit ;
4000: GO 5062
// case weapon of us_machine_gun :
4002: LD_VAR 0 2
4006: PUSH
4007: LD_INT 2
4009: DOUBLE
4010: EQUAL
4011: IFTRUE 4015
4013: GO 4045
4015: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4016: LD_ADDR_VAR 0 3
4020: PUSH
4021: LD_INT 1
4023: PUSH
4024: LD_INT 2
4026: PUSH
4027: LD_INT 3
4029: PUSH
4030: LD_INT 4
4032: PUSH
4033: LD_INT 5
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: ST_TO_ADDR
4043: GO 5046
4045: LD_INT 3
4047: DOUBLE
4048: EQUAL
4049: IFTRUE 4053
4051: GO 4083
4053: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4054: LD_ADDR_VAR 0 3
4058: PUSH
4059: LD_INT 1
4061: PUSH
4062: LD_INT 2
4064: PUSH
4065: LD_INT 3
4067: PUSH
4068: LD_INT 4
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: ST_TO_ADDR
4081: GO 5046
4083: LD_INT 11
4085: DOUBLE
4086: EQUAL
4087: IFTRUE 4091
4089: GO 4121
4091: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4092: LD_ADDR_VAR 0 3
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: LD_INT 2
4102: PUSH
4103: LD_INT 3
4105: PUSH
4106: LD_INT 4
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: ST_TO_ADDR
4119: GO 5046
4121: LD_INT 4
4123: DOUBLE
4124: EQUAL
4125: IFTRUE 4129
4127: GO 4155
4129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4130: LD_ADDR_VAR 0 3
4134: PUSH
4135: LD_INT 2
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: ST_TO_ADDR
4153: GO 5046
4155: LD_INT 5
4157: DOUBLE
4158: EQUAL
4159: IFTRUE 4163
4161: GO 4189
4163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4164: LD_ADDR_VAR 0 3
4168: PUSH
4169: LD_INT 2
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: LD_INT 4
4177: PUSH
4178: LD_INT 5
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: ST_TO_ADDR
4187: GO 5046
4189: LD_INT 9
4191: DOUBLE
4192: EQUAL
4193: IFTRUE 4197
4195: GO 4223
4197: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4198: LD_ADDR_VAR 0 3
4202: PUSH
4203: LD_INT 2
4205: PUSH
4206: LD_INT 3
4208: PUSH
4209: LD_INT 4
4211: PUSH
4212: LD_INT 5
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: ST_TO_ADDR
4221: GO 5046
4223: LD_INT 7
4225: DOUBLE
4226: EQUAL
4227: IFTRUE 4231
4229: GO 4257
4231: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4232: LD_ADDR_VAR 0 3
4236: PUSH
4237: LD_INT 2
4239: PUSH
4240: LD_INT 3
4242: PUSH
4243: LD_INT 4
4245: PUSH
4246: LD_INT 5
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: ST_TO_ADDR
4255: GO 5046
4257: LD_INT 12
4259: DOUBLE
4260: EQUAL
4261: IFTRUE 4265
4263: GO 4291
4265: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4266: LD_ADDR_VAR 0 3
4270: PUSH
4271: LD_INT 2
4273: PUSH
4274: LD_INT 3
4276: PUSH
4277: LD_INT 4
4279: PUSH
4280: LD_INT 5
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: ST_TO_ADDR
4289: GO 5046
4291: LD_INT 13
4293: DOUBLE
4294: EQUAL
4295: IFTRUE 4299
4297: GO 4325
4299: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4300: LD_ADDR_VAR 0 3
4304: PUSH
4305: LD_INT 2
4307: PUSH
4308: LD_INT 3
4310: PUSH
4311: LD_INT 4
4313: PUSH
4314: LD_INT 5
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: ST_TO_ADDR
4323: GO 5046
4325: LD_INT 14
4327: DOUBLE
4328: EQUAL
4329: IFTRUE 4333
4331: GO 4351
4333: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4334: LD_ADDR_VAR 0 3
4338: PUSH
4339: LD_INT 4
4341: PUSH
4342: LD_INT 5
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: ST_TO_ADDR
4349: GO 5046
4351: LD_INT 6
4353: DOUBLE
4354: EQUAL
4355: IFTRUE 4359
4357: GO 4377
4359: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4360: LD_ADDR_VAR 0 3
4364: PUSH
4365: LD_INT 4
4367: PUSH
4368: LD_INT 5
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: ST_TO_ADDR
4375: GO 5046
4377: LD_INT 10
4379: DOUBLE
4380: EQUAL
4381: IFTRUE 4385
4383: GO 4403
4385: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4386: LD_ADDR_VAR 0 3
4390: PUSH
4391: LD_INT 4
4393: PUSH
4394: LD_INT 5
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: ST_TO_ADDR
4401: GO 5046
4403: LD_INT 22
4405: DOUBLE
4406: EQUAL
4407: IFTRUE 4411
4409: GO 4437
4411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4412: LD_ADDR_VAR 0 3
4416: PUSH
4417: LD_INT 11
4419: PUSH
4420: LD_INT 12
4422: PUSH
4423: LD_INT 13
4425: PUSH
4426: LD_INT 14
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: ST_TO_ADDR
4435: GO 5046
4437: LD_INT 23
4439: DOUBLE
4440: EQUAL
4441: IFTRUE 4445
4443: GO 4471
4445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4446: LD_ADDR_VAR 0 3
4450: PUSH
4451: LD_INT 11
4453: PUSH
4454: LD_INT 12
4456: PUSH
4457: LD_INT 13
4459: PUSH
4460: LD_INT 14
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: ST_TO_ADDR
4469: GO 5046
4471: LD_INT 24
4473: DOUBLE
4474: EQUAL
4475: IFTRUE 4479
4477: GO 4505
4479: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4480: LD_ADDR_VAR 0 3
4484: PUSH
4485: LD_INT 11
4487: PUSH
4488: LD_INT 12
4490: PUSH
4491: LD_INT 13
4493: PUSH
4494: LD_INT 14
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: ST_TO_ADDR
4503: GO 5046
4505: LD_INT 30
4507: DOUBLE
4508: EQUAL
4509: IFTRUE 4513
4511: GO 4539
4513: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4514: LD_ADDR_VAR 0 3
4518: PUSH
4519: LD_INT 11
4521: PUSH
4522: LD_INT 12
4524: PUSH
4525: LD_INT 13
4527: PUSH
4528: LD_INT 14
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: ST_TO_ADDR
4537: GO 5046
4539: LD_INT 25
4541: DOUBLE
4542: EQUAL
4543: IFTRUE 4547
4545: GO 4565
4547: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4548: LD_ADDR_VAR 0 3
4552: PUSH
4553: LD_INT 13
4555: PUSH
4556: LD_INT 14
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: ST_TO_ADDR
4563: GO 5046
4565: LD_INT 27
4567: DOUBLE
4568: EQUAL
4569: IFTRUE 4573
4571: GO 4591
4573: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4574: LD_ADDR_VAR 0 3
4578: PUSH
4579: LD_INT 13
4581: PUSH
4582: LD_INT 14
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: ST_TO_ADDR
4589: GO 5046
4591: LD_INT 92
4593: DOUBLE
4594: EQUAL
4595: IFTRUE 4599
4597: GO 4625
4599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4600: LD_ADDR_VAR 0 3
4604: PUSH
4605: LD_INT 11
4607: PUSH
4608: LD_INT 12
4610: PUSH
4611: LD_INT 13
4613: PUSH
4614: LD_INT 14
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: ST_TO_ADDR
4623: GO 5046
4625: LD_INT 28
4627: DOUBLE
4628: EQUAL
4629: IFTRUE 4633
4631: GO 4651
4633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4634: LD_ADDR_VAR 0 3
4638: PUSH
4639: LD_INT 13
4641: PUSH
4642: LD_INT 14
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: ST_TO_ADDR
4649: GO 5046
4651: LD_INT 29
4653: DOUBLE
4654: EQUAL
4655: IFTRUE 4659
4657: GO 4677
4659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4660: LD_ADDR_VAR 0 3
4664: PUSH
4665: LD_INT 13
4667: PUSH
4668: LD_INT 14
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: ST_TO_ADDR
4675: GO 5046
4677: LD_INT 31
4679: DOUBLE
4680: EQUAL
4681: IFTRUE 4685
4683: GO 4703
4685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4686: LD_ADDR_VAR 0 3
4690: PUSH
4691: LD_INT 13
4693: PUSH
4694: LD_INT 14
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: ST_TO_ADDR
4701: GO 5046
4703: LD_INT 26
4705: DOUBLE
4706: EQUAL
4707: IFTRUE 4711
4709: GO 4729
4711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4712: LD_ADDR_VAR 0 3
4716: PUSH
4717: LD_INT 13
4719: PUSH
4720: LD_INT 14
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: ST_TO_ADDR
4727: GO 5046
4729: LD_INT 42
4731: DOUBLE
4732: EQUAL
4733: IFTRUE 4737
4735: GO 4763
4737: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4738: LD_ADDR_VAR 0 3
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 22
4748: PUSH
4749: LD_INT 23
4751: PUSH
4752: LD_INT 24
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: ST_TO_ADDR
4761: GO 5046
4763: LD_INT 43
4765: DOUBLE
4766: EQUAL
4767: IFTRUE 4771
4769: GO 4797
4771: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4772: LD_ADDR_VAR 0 3
4776: PUSH
4777: LD_INT 21
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_INT 23
4785: PUSH
4786: LD_INT 24
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: ST_TO_ADDR
4795: GO 5046
4797: LD_INT 44
4799: DOUBLE
4800: EQUAL
4801: IFTRUE 4805
4803: GO 4831
4805: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4806: LD_ADDR_VAR 0 3
4810: PUSH
4811: LD_INT 21
4813: PUSH
4814: LD_INT 22
4816: PUSH
4817: LD_INT 23
4819: PUSH
4820: LD_INT 24
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: ST_TO_ADDR
4829: GO 5046
4831: LD_INT 45
4833: DOUBLE
4834: EQUAL
4835: IFTRUE 4839
4837: GO 4865
4839: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4840: LD_ADDR_VAR 0 3
4844: PUSH
4845: LD_INT 21
4847: PUSH
4848: LD_INT 22
4850: PUSH
4851: LD_INT 23
4853: PUSH
4854: LD_INT 24
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: ST_TO_ADDR
4863: GO 5046
4865: LD_INT 49
4867: DOUBLE
4868: EQUAL
4869: IFTRUE 4873
4871: GO 4899
4873: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4874: LD_ADDR_VAR 0 3
4878: PUSH
4879: LD_INT 21
4881: PUSH
4882: LD_INT 22
4884: PUSH
4885: LD_INT 23
4887: PUSH
4888: LD_INT 24
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: ST_TO_ADDR
4897: GO 5046
4899: LD_INT 51
4901: DOUBLE
4902: EQUAL
4903: IFTRUE 4907
4905: GO 4933
4907: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4908: LD_ADDR_VAR 0 3
4912: PUSH
4913: LD_INT 21
4915: PUSH
4916: LD_INT 22
4918: PUSH
4919: LD_INT 23
4921: PUSH
4922: LD_INT 24
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: ST_TO_ADDR
4931: GO 5046
4933: LD_INT 52
4935: DOUBLE
4936: EQUAL
4937: IFTRUE 4941
4939: GO 4967
4941: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4942: LD_ADDR_VAR 0 3
4946: PUSH
4947: LD_INT 21
4949: PUSH
4950: LD_INT 22
4952: PUSH
4953: LD_INT 23
4955: PUSH
4956: LD_INT 24
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: ST_TO_ADDR
4965: GO 5046
4967: LD_INT 53
4969: DOUBLE
4970: EQUAL
4971: IFTRUE 4975
4973: GO 4993
4975: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: LD_INT 23
4983: PUSH
4984: LD_INT 24
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: ST_TO_ADDR
4991: GO 5046
4993: LD_INT 46
4995: DOUBLE
4996: EQUAL
4997: IFTRUE 5001
4999: GO 5019
5001: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5002: LD_ADDR_VAR 0 3
5006: PUSH
5007: LD_INT 23
5009: PUSH
5010: LD_INT 24
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: ST_TO_ADDR
5017: GO 5046
5019: LD_INT 47
5021: DOUBLE
5022: EQUAL
5023: IFTRUE 5027
5025: GO 5045
5027: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5028: LD_ADDR_VAR 0 3
5032: PUSH
5033: LD_INT 23
5035: PUSH
5036: LD_INT 24
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: ST_TO_ADDR
5043: GO 5046
5045: POP
// result := ( chassis in result ) ;
5046: LD_ADDR_VAR 0 3
5050: PUSH
5051: LD_VAR 0 1
5055: PUSH
5056: LD_VAR 0 3
5060: IN
5061: ST_TO_ADDR
// end ;
5062: LD_VAR 0 3
5066: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5067: LD_INT 0
5069: PPUSH
5070: PPUSH
5071: PPUSH
5072: PPUSH
5073: PPUSH
5074: PPUSH
5075: PPUSH
// result := array ;
5076: LD_ADDR_VAR 0 5
5080: PUSH
5081: LD_VAR 0 1
5085: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5086: LD_VAR 0 1
5090: NOT
5091: PUSH
5092: LD_VAR 0 2
5096: NOT
5097: OR
5098: PUSH
5099: LD_VAR 0 3
5103: NOT
5104: OR
5105: PUSH
5106: LD_VAR 0 2
5110: PUSH
5111: LD_VAR 0 1
5115: GREATER
5116: OR
5117: PUSH
5118: LD_VAR 0 3
5122: PUSH
5123: LD_VAR 0 1
5127: GREATER
5128: OR
5129: IFFALSE 5133
// exit ;
5131: GO 5429
// if direction then
5133: LD_VAR 0 4
5137: IFFALSE 5201
// begin d := 1 ;
5139: LD_ADDR_VAR 0 9
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// if i_from > i_to then
5147: LD_VAR 0 2
5151: PUSH
5152: LD_VAR 0 3
5156: GREATER
5157: IFFALSE 5183
// length := ( array - i_from ) + i_to else
5159: LD_ADDR_VAR 0 11
5163: PUSH
5164: LD_VAR 0 1
5168: PUSH
5169: LD_VAR 0 2
5173: MINUS
5174: PUSH
5175: LD_VAR 0 3
5179: PLUS
5180: ST_TO_ADDR
5181: GO 5199
// length := i_to - i_from ;
5183: LD_ADDR_VAR 0 11
5187: PUSH
5188: LD_VAR 0 3
5192: PUSH
5193: LD_VAR 0 2
5197: MINUS
5198: ST_TO_ADDR
// end else
5199: GO 5262
// begin d := - 1 ;
5201: LD_ADDR_VAR 0 9
5205: PUSH
5206: LD_INT 1
5208: NEG
5209: ST_TO_ADDR
// if i_from > i_to then
5210: LD_VAR 0 2
5214: PUSH
5215: LD_VAR 0 3
5219: GREATER
5220: IFFALSE 5240
// length := i_from - i_to else
5222: LD_ADDR_VAR 0 11
5226: PUSH
5227: LD_VAR 0 2
5231: PUSH
5232: LD_VAR 0 3
5236: MINUS
5237: ST_TO_ADDR
5238: GO 5262
// length := ( array - i_to ) + i_from ;
5240: LD_ADDR_VAR 0 11
5244: PUSH
5245: LD_VAR 0 1
5249: PUSH
5250: LD_VAR 0 3
5254: MINUS
5255: PUSH
5256: LD_VAR 0 2
5260: PLUS
5261: ST_TO_ADDR
// end ; if not length then
5262: LD_VAR 0 11
5266: NOT
5267: IFFALSE 5271
// exit ;
5269: GO 5429
// tmp := array ;
5271: LD_ADDR_VAR 0 10
5275: PUSH
5276: LD_VAR 0 1
5280: ST_TO_ADDR
// for i = 1 to length do
5281: LD_ADDR_VAR 0 6
5285: PUSH
5286: DOUBLE
5287: LD_INT 1
5289: DEC
5290: ST_TO_ADDR
5291: LD_VAR 0 11
5295: PUSH
5296: FOR_TO
5297: IFFALSE 5417
// begin for j = 1 to array do
5299: LD_ADDR_VAR 0 7
5303: PUSH
5304: DOUBLE
5305: LD_INT 1
5307: DEC
5308: ST_TO_ADDR
5309: LD_VAR 0 1
5313: PUSH
5314: FOR_TO
5315: IFFALSE 5403
// begin k := j + d ;
5317: LD_ADDR_VAR 0 8
5321: PUSH
5322: LD_VAR 0 7
5326: PUSH
5327: LD_VAR 0 9
5331: PLUS
5332: ST_TO_ADDR
// if k > array then
5333: LD_VAR 0 8
5337: PUSH
5338: LD_VAR 0 1
5342: GREATER
5343: IFFALSE 5353
// k := 1 ;
5345: LD_ADDR_VAR 0 8
5349: PUSH
5350: LD_INT 1
5352: ST_TO_ADDR
// if not k then
5353: LD_VAR 0 8
5357: NOT
5358: IFFALSE 5370
// k := array ;
5360: LD_ADDR_VAR 0 8
5364: PUSH
5365: LD_VAR 0 1
5369: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5370: LD_ADDR_VAR 0 10
5374: PUSH
5375: LD_VAR 0 10
5379: PPUSH
5380: LD_VAR 0 8
5384: PPUSH
5385: LD_VAR 0 1
5389: PUSH
5390: LD_VAR 0 7
5394: ARRAY
5395: PPUSH
5396: CALL_OW 1
5400: ST_TO_ADDR
// end ;
5401: GO 5314
5403: POP
5404: POP
// array := tmp ;
5405: LD_ADDR_VAR 0 1
5409: PUSH
5410: LD_VAR 0 10
5414: ST_TO_ADDR
// end ;
5415: GO 5296
5417: POP
5418: POP
// result := array ;
5419: LD_ADDR_VAR 0 5
5423: PUSH
5424: LD_VAR 0 1
5428: ST_TO_ADDR
// end ;
5429: LD_VAR 0 5
5433: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5434: LD_INT 0
5436: PPUSH
5437: PPUSH
// result := 0 ;
5438: LD_ADDR_VAR 0 3
5442: PUSH
5443: LD_INT 0
5445: ST_TO_ADDR
// if not array or not value in array then
5446: LD_VAR 0 1
5450: NOT
5451: PUSH
5452: LD_VAR 0 2
5456: PUSH
5457: LD_VAR 0 1
5461: IN
5462: NOT
5463: OR
5464: IFFALSE 5468
// exit ;
5466: GO 5522
// for i = 1 to array do
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: DOUBLE
5474: LD_INT 1
5476: DEC
5477: ST_TO_ADDR
5478: LD_VAR 0 1
5482: PUSH
5483: FOR_TO
5484: IFFALSE 5520
// if value = array [ i ] then
5486: LD_VAR 0 2
5490: PUSH
5491: LD_VAR 0 1
5495: PUSH
5496: LD_VAR 0 4
5500: ARRAY
5501: EQUAL
5502: IFFALSE 5518
// begin result := i ;
5504: LD_ADDR_VAR 0 3
5508: PUSH
5509: LD_VAR 0 4
5513: ST_TO_ADDR
// exit ;
5514: POP
5515: POP
5516: GO 5522
// end ;
5518: GO 5483
5520: POP
5521: POP
// end ;
5522: LD_VAR 0 3
5526: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5527: LD_INT 0
5529: PPUSH
// vc_chassis := chassis ;
5530: LD_ADDR_OWVAR 37
5534: PUSH
5535: LD_VAR 0 1
5539: ST_TO_ADDR
// vc_engine := engine ;
5540: LD_ADDR_OWVAR 39
5544: PUSH
5545: LD_VAR 0 2
5549: ST_TO_ADDR
// vc_control := control ;
5550: LD_ADDR_OWVAR 38
5554: PUSH
5555: LD_VAR 0 3
5559: ST_TO_ADDR
// vc_weapon := weapon ;
5560: LD_ADDR_OWVAR 40
5564: PUSH
5565: LD_VAR 0 4
5569: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5570: LD_ADDR_OWVAR 41
5574: PUSH
5575: LD_VAR 0 5
5579: ST_TO_ADDR
// end ;
5580: LD_VAR 0 6
5584: RET
// export function WantPlant ( unit ) ; var task ; begin
5585: LD_INT 0
5587: PPUSH
5588: PPUSH
// result := false ;
5589: LD_ADDR_VAR 0 2
5593: PUSH
5594: LD_INT 0
5596: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5597: LD_ADDR_VAR 0 3
5601: PUSH
5602: LD_VAR 0 1
5606: PPUSH
5607: CALL_OW 437
5611: ST_TO_ADDR
// if task then
5612: LD_VAR 0 3
5616: IFFALSE 5644
// if task [ 1 ] [ 1 ] = p then
5618: LD_VAR 0 3
5622: PUSH
5623: LD_INT 1
5625: ARRAY
5626: PUSH
5627: LD_INT 1
5629: ARRAY
5630: PUSH
5631: LD_STRING p
5633: EQUAL
5634: IFFALSE 5644
// result := true ;
5636: LD_ADDR_VAR 0 2
5640: PUSH
5641: LD_INT 1
5643: ST_TO_ADDR
// end ;
5644: LD_VAR 0 2
5648: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5649: LD_INT 0
5651: PPUSH
5652: PPUSH
5653: PPUSH
5654: PPUSH
// if pos < 1 then
5655: LD_VAR 0 2
5659: PUSH
5660: LD_INT 1
5662: LESS
5663: IFFALSE 5667
// exit ;
5665: GO 5970
// if pos = 1 then
5667: LD_VAR 0 2
5671: PUSH
5672: LD_INT 1
5674: EQUAL
5675: IFFALSE 5708
// result := Replace ( arr , pos [ 1 ] , value ) else
5677: LD_ADDR_VAR 0 4
5681: PUSH
5682: LD_VAR 0 1
5686: PPUSH
5687: LD_VAR 0 2
5691: PUSH
5692: LD_INT 1
5694: ARRAY
5695: PPUSH
5696: LD_VAR 0 3
5700: PPUSH
5701: CALL_OW 1
5705: ST_TO_ADDR
5706: GO 5970
// begin tmp := arr ;
5708: LD_ADDR_VAR 0 6
5712: PUSH
5713: LD_VAR 0 1
5717: ST_TO_ADDR
// s_arr := [ tmp ] ;
5718: LD_ADDR_VAR 0 7
5722: PUSH
5723: LD_VAR 0 6
5727: PUSH
5728: EMPTY
5729: LIST
5730: ST_TO_ADDR
// for i = 1 to pos - 1 do
5731: LD_ADDR_VAR 0 5
5735: PUSH
5736: DOUBLE
5737: LD_INT 1
5739: DEC
5740: ST_TO_ADDR
5741: LD_VAR 0 2
5745: PUSH
5746: LD_INT 1
5748: MINUS
5749: PUSH
5750: FOR_TO
5751: IFFALSE 5796
// begin tmp := tmp [ pos [ i ] ] ;
5753: LD_ADDR_VAR 0 6
5757: PUSH
5758: LD_VAR 0 6
5762: PUSH
5763: LD_VAR 0 2
5767: PUSH
5768: LD_VAR 0 5
5772: ARRAY
5773: ARRAY
5774: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5775: LD_ADDR_VAR 0 7
5779: PUSH
5780: LD_VAR 0 7
5784: PUSH
5785: LD_VAR 0 6
5789: PUSH
5790: EMPTY
5791: LIST
5792: ADD
5793: ST_TO_ADDR
// end ;
5794: GO 5750
5796: POP
5797: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5798: LD_ADDR_VAR 0 6
5802: PUSH
5803: LD_VAR 0 6
5807: PPUSH
5808: LD_VAR 0 2
5812: PUSH
5813: LD_VAR 0 2
5817: ARRAY
5818: PPUSH
5819: LD_VAR 0 3
5823: PPUSH
5824: CALL_OW 1
5828: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5829: LD_ADDR_VAR 0 7
5833: PUSH
5834: LD_VAR 0 7
5838: PPUSH
5839: LD_VAR 0 7
5843: PPUSH
5844: LD_VAR 0 6
5848: PPUSH
5849: CALL_OW 1
5853: ST_TO_ADDR
// for i = s_arr downto 2 do
5854: LD_ADDR_VAR 0 5
5858: PUSH
5859: DOUBLE
5860: LD_VAR 0 7
5864: INC
5865: ST_TO_ADDR
5866: LD_INT 2
5868: PUSH
5869: FOR_DOWNTO
5870: IFFALSE 5954
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5872: LD_ADDR_VAR 0 6
5876: PUSH
5877: LD_VAR 0 7
5881: PUSH
5882: LD_VAR 0 5
5886: PUSH
5887: LD_INT 1
5889: MINUS
5890: ARRAY
5891: PPUSH
5892: LD_VAR 0 2
5896: PUSH
5897: LD_VAR 0 5
5901: PUSH
5902: LD_INT 1
5904: MINUS
5905: ARRAY
5906: PPUSH
5907: LD_VAR 0 7
5911: PUSH
5912: LD_VAR 0 5
5916: ARRAY
5917: PPUSH
5918: CALL_OW 1
5922: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5923: LD_ADDR_VAR 0 7
5927: PUSH
5928: LD_VAR 0 7
5932: PPUSH
5933: LD_VAR 0 5
5937: PUSH
5938: LD_INT 1
5940: MINUS
5941: PPUSH
5942: LD_VAR 0 6
5946: PPUSH
5947: CALL_OW 1
5951: ST_TO_ADDR
// end ;
5952: GO 5869
5954: POP
5955: POP
// result := s_arr [ 1 ] ;
5956: LD_ADDR_VAR 0 4
5960: PUSH
5961: LD_VAR 0 7
5965: PUSH
5966: LD_INT 1
5968: ARRAY
5969: ST_TO_ADDR
// end ; end ;
5970: LD_VAR 0 4
5974: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5975: LD_INT 0
5977: PPUSH
5978: PPUSH
// if not list then
5979: LD_VAR 0 1
5983: NOT
5984: IFFALSE 5988
// exit ;
5986: GO 6079
// i := list [ pos1 ] ;
5988: LD_ADDR_VAR 0 5
5992: PUSH
5993: LD_VAR 0 1
5997: PUSH
5998: LD_VAR 0 2
6002: ARRAY
6003: ST_TO_ADDR
// if not i then
6004: LD_VAR 0 5
6008: NOT
6009: IFFALSE 6013
// exit ;
6011: GO 6079
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6013: LD_ADDR_VAR 0 1
6017: PUSH
6018: LD_VAR 0 1
6022: PPUSH
6023: LD_VAR 0 2
6027: PPUSH
6028: LD_VAR 0 1
6032: PUSH
6033: LD_VAR 0 3
6037: ARRAY
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6044: LD_ADDR_VAR 0 1
6048: PUSH
6049: LD_VAR 0 1
6053: PPUSH
6054: LD_VAR 0 3
6058: PPUSH
6059: LD_VAR 0 5
6063: PPUSH
6064: CALL_OW 1
6068: ST_TO_ADDR
// result := list ;
6069: LD_ADDR_VAR 0 4
6073: PUSH
6074: LD_VAR 0 1
6078: ST_TO_ADDR
// end ;
6079: LD_VAR 0 4
6083: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6084: LD_INT 0
6086: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6087: LD_ADDR_VAR 0 5
6091: PUSH
6092: LD_VAR 0 1
6096: PPUSH
6097: CALL_OW 250
6101: PPUSH
6102: LD_VAR 0 1
6106: PPUSH
6107: CALL_OW 251
6111: PPUSH
6112: LD_VAR 0 2
6116: PPUSH
6117: LD_VAR 0 3
6121: PPUSH
6122: LD_VAR 0 4
6126: PPUSH
6127: CALL 6137 0 5
6131: ST_TO_ADDR
// end ;
6132: LD_VAR 0 5
6136: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6137: LD_INT 0
6139: PPUSH
6140: PPUSH
6141: PPUSH
6142: PPUSH
// if not list then
6143: LD_VAR 0 3
6147: NOT
6148: IFFALSE 6152
// exit ;
6150: GO 6540
// result := [ ] ;
6152: LD_ADDR_VAR 0 6
6156: PUSH
6157: EMPTY
6158: ST_TO_ADDR
// for i in list do
6159: LD_ADDR_VAR 0 7
6163: PUSH
6164: LD_VAR 0 3
6168: PUSH
6169: FOR_IN
6170: IFFALSE 6372
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6172: LD_ADDR_VAR 0 9
6176: PUSH
6177: LD_VAR 0 7
6181: PPUSH
6182: LD_VAR 0 1
6186: PPUSH
6187: LD_VAR 0 2
6191: PPUSH
6192: CALL_OW 297
6196: ST_TO_ADDR
// if not result then
6197: LD_VAR 0 6
6201: NOT
6202: IFFALSE 6228
// result := [ [ i , tmp ] ] else
6204: LD_ADDR_VAR 0 6
6208: PUSH
6209: LD_VAR 0 7
6213: PUSH
6214: LD_VAR 0 9
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: PUSH
6223: EMPTY
6224: LIST
6225: ST_TO_ADDR
6226: GO 6370
// begin if result [ result ] [ 2 ] < tmp then
6228: LD_VAR 0 6
6232: PUSH
6233: LD_VAR 0 6
6237: ARRAY
6238: PUSH
6239: LD_INT 2
6241: ARRAY
6242: PUSH
6243: LD_VAR 0 9
6247: LESS
6248: IFFALSE 6290
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6250: LD_ADDR_VAR 0 6
6254: PUSH
6255: LD_VAR 0 6
6259: PPUSH
6260: LD_VAR 0 6
6264: PUSH
6265: LD_INT 1
6267: PLUS
6268: PPUSH
6269: LD_VAR 0 7
6273: PUSH
6274: LD_VAR 0 9
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 2
6287: ST_TO_ADDR
6288: GO 6370
// for j = 1 to result do
6290: LD_ADDR_VAR 0 8
6294: PUSH
6295: DOUBLE
6296: LD_INT 1
6298: DEC
6299: ST_TO_ADDR
6300: LD_VAR 0 6
6304: PUSH
6305: FOR_TO
6306: IFFALSE 6368
// begin if tmp < result [ j ] [ 2 ] then
6308: LD_VAR 0 9
6312: PUSH
6313: LD_VAR 0 6
6317: PUSH
6318: LD_VAR 0 8
6322: ARRAY
6323: PUSH
6324: LD_INT 2
6326: ARRAY
6327: LESS
6328: IFFALSE 6366
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6330: LD_ADDR_VAR 0 6
6334: PUSH
6335: LD_VAR 0 6
6339: PPUSH
6340: LD_VAR 0 8
6344: PPUSH
6345: LD_VAR 0 7
6349: PUSH
6350: LD_VAR 0 9
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PPUSH
6359: CALL_OW 2
6363: ST_TO_ADDR
// break ;
6364: GO 6368
// end ; end ;
6366: GO 6305
6368: POP
6369: POP
// end ; end ;
6370: GO 6169
6372: POP
6373: POP
// if result and not asc then
6374: LD_VAR 0 6
6378: PUSH
6379: LD_VAR 0 4
6383: NOT
6384: AND
6385: IFFALSE 6460
// begin tmp := result ;
6387: LD_ADDR_VAR 0 9
6391: PUSH
6392: LD_VAR 0 6
6396: ST_TO_ADDR
// for i = tmp downto 1 do
6397: LD_ADDR_VAR 0 7
6401: PUSH
6402: DOUBLE
6403: LD_VAR 0 9
6407: INC
6408: ST_TO_ADDR
6409: LD_INT 1
6411: PUSH
6412: FOR_DOWNTO
6413: IFFALSE 6458
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6415: LD_ADDR_VAR 0 6
6419: PUSH
6420: LD_VAR 0 6
6424: PPUSH
6425: LD_VAR 0 9
6429: PUSH
6430: LD_VAR 0 7
6434: MINUS
6435: PUSH
6436: LD_INT 1
6438: PLUS
6439: PPUSH
6440: LD_VAR 0 9
6444: PUSH
6445: LD_VAR 0 7
6449: ARRAY
6450: PPUSH
6451: CALL_OW 1
6455: ST_TO_ADDR
6456: GO 6412
6458: POP
6459: POP
// end ; tmp := [ ] ;
6460: LD_ADDR_VAR 0 9
6464: PUSH
6465: EMPTY
6466: ST_TO_ADDR
// if mode then
6467: LD_VAR 0 5
6471: IFFALSE 6540
// begin for i = 1 to result do
6473: LD_ADDR_VAR 0 7
6477: PUSH
6478: DOUBLE
6479: LD_INT 1
6481: DEC
6482: ST_TO_ADDR
6483: LD_VAR 0 6
6487: PUSH
6488: FOR_TO
6489: IFFALSE 6528
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6491: LD_ADDR_VAR 0 9
6495: PUSH
6496: LD_VAR 0 9
6500: PPUSH
6501: LD_VAR 0 7
6505: PPUSH
6506: LD_VAR 0 6
6510: PUSH
6511: LD_VAR 0 7
6515: ARRAY
6516: PUSH
6517: LD_INT 1
6519: ARRAY
6520: PPUSH
6521: CALL_OW 1
6525: ST_TO_ADDR
6526: GO 6488
6528: POP
6529: POP
// result := tmp ;
6530: LD_ADDR_VAR 0 6
6534: PUSH
6535: LD_VAR 0 9
6539: ST_TO_ADDR
// end ; end ;
6540: LD_VAR 0 6
6544: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6545: LD_INT 0
6547: PPUSH
6548: PPUSH
6549: PPUSH
6550: PPUSH
6551: PPUSH
6552: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6553: LD_ADDR_VAR 0 5
6557: PUSH
6558: LD_INT 0
6560: PUSH
6561: LD_INT 0
6563: PUSH
6564: LD_INT 0
6566: PUSH
6567: EMPTY
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: ST_TO_ADDR
// if not x or not y then
6575: LD_VAR 0 2
6579: NOT
6580: PUSH
6581: LD_VAR 0 3
6585: NOT
6586: OR
6587: IFFALSE 6591
// exit ;
6589: GO 8241
// if not range then
6591: LD_VAR 0 4
6595: NOT
6596: IFFALSE 6606
// range := 10 ;
6598: LD_ADDR_VAR 0 4
6602: PUSH
6603: LD_INT 10
6605: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6606: LD_ADDR_VAR 0 8
6610: PUSH
6611: LD_INT 81
6613: PUSH
6614: LD_VAR 0 1
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 92
6625: PUSH
6626: LD_VAR 0 2
6630: PUSH
6631: LD_VAR 0 3
6635: PUSH
6636: LD_VAR 0 4
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 3
6649: PUSH
6650: LD_INT 21
6652: PUSH
6653: LD_INT 3
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: LIST
6668: PPUSH
6669: CALL_OW 69
6673: ST_TO_ADDR
// if not tmp then
6674: LD_VAR 0 8
6678: NOT
6679: IFFALSE 6683
// exit ;
6681: GO 8241
// for i in tmp do
6683: LD_ADDR_VAR 0 6
6687: PUSH
6688: LD_VAR 0 8
6692: PUSH
6693: FOR_IN
6694: IFFALSE 8216
// begin points := [ 0 , 0 , 0 ] ;
6696: LD_ADDR_VAR 0 9
6700: PUSH
6701: LD_INT 0
6703: PUSH
6704: LD_INT 0
6706: PUSH
6707: LD_INT 0
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: ST_TO_ADDR
// bpoints := 1 ;
6715: LD_ADDR_VAR 0 10
6719: PUSH
6720: LD_INT 1
6722: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6723: LD_VAR 0 6
6727: PPUSH
6728: CALL_OW 247
6732: PUSH
6733: LD_INT 1
6735: DOUBLE
6736: EQUAL
6737: IFTRUE 6741
6739: GO 7319
6741: POP
// begin if GetClass ( i ) = 1 then
6742: LD_VAR 0 6
6746: PPUSH
6747: CALL_OW 257
6751: PUSH
6752: LD_INT 1
6754: EQUAL
6755: IFFALSE 6776
// points := [ 10 , 5 , 3 ] ;
6757: LD_ADDR_VAR 0 9
6761: PUSH
6762: LD_INT 10
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: LIST
6775: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6776: LD_VAR 0 6
6780: PPUSH
6781: CALL_OW 257
6785: PUSH
6786: LD_INT 2
6788: PUSH
6789: LD_INT 3
6791: PUSH
6792: LD_INT 4
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: LIST
6799: IN
6800: IFFALSE 6821
// points := [ 3 , 2 , 1 ] ;
6802: LD_ADDR_VAR 0 9
6806: PUSH
6807: LD_INT 3
6809: PUSH
6810: LD_INT 2
6812: PUSH
6813: LD_INT 1
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6821: LD_VAR 0 6
6825: PPUSH
6826: CALL_OW 257
6830: PUSH
6831: LD_INT 5
6833: EQUAL
6834: IFFALSE 6855
// points := [ 130 , 5 , 2 ] ;
6836: LD_ADDR_VAR 0 9
6840: PUSH
6841: LD_INT 130
6843: PUSH
6844: LD_INT 5
6846: PUSH
6847: LD_INT 2
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6855: LD_VAR 0 6
6859: PPUSH
6860: CALL_OW 257
6864: PUSH
6865: LD_INT 8
6867: EQUAL
6868: IFFALSE 6889
// points := [ 35 , 35 , 30 ] ;
6870: LD_ADDR_VAR 0 9
6874: PUSH
6875: LD_INT 35
6877: PUSH
6878: LD_INT 35
6880: PUSH
6881: LD_INT 30
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6889: LD_VAR 0 6
6893: PPUSH
6894: CALL_OW 257
6898: PUSH
6899: LD_INT 9
6901: EQUAL
6902: IFFALSE 6923
// points := [ 20 , 55 , 40 ] ;
6904: LD_ADDR_VAR 0 9
6908: PUSH
6909: LD_INT 20
6911: PUSH
6912: LD_INT 55
6914: PUSH
6915: LD_INT 40
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: LIST
6922: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6923: LD_VAR 0 6
6927: PPUSH
6928: CALL_OW 257
6932: PUSH
6933: LD_INT 12
6935: PUSH
6936: LD_INT 16
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: IN
6943: IFFALSE 6964
// points := [ 5 , 3 , 2 ] ;
6945: LD_ADDR_VAR 0 9
6949: PUSH
6950: LD_INT 5
6952: PUSH
6953: LD_INT 3
6955: PUSH
6956: LD_INT 2
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6964: LD_VAR 0 6
6968: PPUSH
6969: CALL_OW 257
6973: PUSH
6974: LD_INT 17
6976: EQUAL
6977: IFFALSE 6998
// points := [ 100 , 50 , 75 ] ;
6979: LD_ADDR_VAR 0 9
6983: PUSH
6984: LD_INT 100
6986: PUSH
6987: LD_INT 50
6989: PUSH
6990: LD_INT 75
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6998: LD_VAR 0 6
7002: PPUSH
7003: CALL_OW 257
7007: PUSH
7008: LD_INT 15
7010: EQUAL
7011: IFFALSE 7032
// points := [ 10 , 5 , 3 ] ;
7013: LD_ADDR_VAR 0 9
7017: PUSH
7018: LD_INT 10
7020: PUSH
7021: LD_INT 5
7023: PUSH
7024: LD_INT 3
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: LIST
7031: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7032: LD_VAR 0 6
7036: PPUSH
7037: CALL_OW 257
7041: PUSH
7042: LD_INT 14
7044: EQUAL
7045: IFFALSE 7066
// points := [ 10 , 0 , 0 ] ;
7047: LD_ADDR_VAR 0 9
7051: PUSH
7052: LD_INT 10
7054: PUSH
7055: LD_INT 0
7057: PUSH
7058: LD_INT 0
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: LIST
7065: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7066: LD_VAR 0 6
7070: PPUSH
7071: CALL_OW 257
7075: PUSH
7076: LD_INT 11
7078: EQUAL
7079: IFFALSE 7100
// points := [ 30 , 10 , 5 ] ;
7081: LD_ADDR_VAR 0 9
7085: PUSH
7086: LD_INT 30
7088: PUSH
7089: LD_INT 10
7091: PUSH
7092: LD_INT 5
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7100: LD_VAR 0 1
7104: PPUSH
7105: LD_INT 5
7107: PPUSH
7108: CALL_OW 321
7112: PUSH
7113: LD_INT 2
7115: EQUAL
7116: IFFALSE 7133
// bpoints := bpoints * 1.8 ;
7118: LD_ADDR_VAR 0 10
7122: PUSH
7123: LD_VAR 0 10
7127: PUSH
7128: LD_REAL  1.80000000000000E+0000
7131: MUL
7132: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7133: LD_VAR 0 6
7137: PPUSH
7138: CALL_OW 257
7142: PUSH
7143: LD_INT 1
7145: PUSH
7146: LD_INT 2
7148: PUSH
7149: LD_INT 3
7151: PUSH
7152: LD_INT 4
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: IN
7161: PUSH
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_INT 51
7169: PPUSH
7170: CALL_OW 321
7174: PUSH
7175: LD_INT 2
7177: EQUAL
7178: AND
7179: IFFALSE 7196
// bpoints := bpoints * 1.2 ;
7181: LD_ADDR_VAR 0 10
7185: PUSH
7186: LD_VAR 0 10
7190: PUSH
7191: LD_REAL  1.20000000000000E+0000
7194: MUL
7195: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7196: LD_VAR 0 6
7200: PPUSH
7201: CALL_OW 257
7205: PUSH
7206: LD_INT 5
7208: PUSH
7209: LD_INT 7
7211: PUSH
7212: LD_INT 9
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: IN
7220: PUSH
7221: LD_VAR 0 1
7225: PPUSH
7226: LD_INT 52
7228: PPUSH
7229: CALL_OW 321
7233: PUSH
7234: LD_INT 2
7236: EQUAL
7237: AND
7238: IFFALSE 7255
// bpoints := bpoints * 1.5 ;
7240: LD_ADDR_VAR 0 10
7244: PUSH
7245: LD_VAR 0 10
7249: PUSH
7250: LD_REAL  1.50000000000000E+0000
7253: MUL
7254: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7255: LD_VAR 0 1
7259: PPUSH
7260: LD_INT 66
7262: PPUSH
7263: CALL_OW 321
7267: PUSH
7268: LD_INT 2
7270: EQUAL
7271: IFFALSE 7288
// bpoints := bpoints * 1.1 ;
7273: LD_ADDR_VAR 0 10
7277: PUSH
7278: LD_VAR 0 10
7282: PUSH
7283: LD_REAL  1.10000000000000E+0000
7286: MUL
7287: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7288: LD_ADDR_VAR 0 10
7292: PUSH
7293: LD_VAR 0 10
7297: PUSH
7298: LD_VAR 0 6
7302: PPUSH
7303: LD_INT 1
7305: PPUSH
7306: CALL_OW 259
7310: PUSH
7311: LD_REAL  1.15000000000000E+0000
7314: MUL
7315: MUL
7316: ST_TO_ADDR
// end ; unit_vehicle :
7317: GO 8145
7319: LD_INT 2
7321: DOUBLE
7322: EQUAL
7323: IFTRUE 7327
7325: GO 8133
7327: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7328: LD_VAR 0 6
7332: PPUSH
7333: CALL_OW 264
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: LD_INT 42
7343: PUSH
7344: LD_INT 24
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: IN
7352: IFFALSE 7373
// points := [ 25 , 5 , 3 ] ;
7354: LD_ADDR_VAR 0 9
7358: PUSH
7359: LD_INT 25
7361: PUSH
7362: LD_INT 5
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7373: LD_VAR 0 6
7377: PPUSH
7378: CALL_OW 264
7382: PUSH
7383: LD_INT 4
7385: PUSH
7386: LD_INT 43
7388: PUSH
7389: LD_INT 25
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: IN
7397: IFFALSE 7418
// points := [ 40 , 15 , 5 ] ;
7399: LD_ADDR_VAR 0 9
7403: PUSH
7404: LD_INT 40
7406: PUSH
7407: LD_INT 15
7409: PUSH
7410: LD_INT 5
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7418: LD_VAR 0 6
7422: PPUSH
7423: CALL_OW 264
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: LD_INT 23
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: IN
7438: IFFALSE 7459
// points := [ 7 , 25 , 8 ] ;
7440: LD_ADDR_VAR 0 9
7444: PUSH
7445: LD_INT 7
7447: PUSH
7448: LD_INT 25
7450: PUSH
7451: LD_INT 8
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7459: LD_VAR 0 6
7463: PPUSH
7464: CALL_OW 264
7468: PUSH
7469: LD_INT 5
7471: PUSH
7472: LD_INT 27
7474: PUSH
7475: LD_INT 44
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: IN
7483: IFFALSE 7504
// points := [ 14 , 50 , 16 ] ;
7485: LD_ADDR_VAR 0 9
7489: PUSH
7490: LD_INT 14
7492: PUSH
7493: LD_INT 50
7495: PUSH
7496: LD_INT 16
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7504: LD_VAR 0 6
7508: PPUSH
7509: CALL_OW 264
7513: PUSH
7514: LD_INT 6
7516: PUSH
7517: LD_INT 46
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: IN
7524: IFFALSE 7545
// points := [ 32 , 120 , 70 ] ;
7526: LD_ADDR_VAR 0 9
7530: PUSH
7531: LD_INT 32
7533: PUSH
7534: LD_INT 120
7536: PUSH
7537: LD_INT 70
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7545: LD_VAR 0 6
7549: PPUSH
7550: CALL_OW 264
7554: PUSH
7555: LD_INT 7
7557: PUSH
7558: LD_INT 28
7560: PUSH
7561: LD_INT 45
7563: PUSH
7564: LD_INT 92
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: IN
7573: IFFALSE 7594
// points := [ 35 , 20 , 45 ] ;
7575: LD_ADDR_VAR 0 9
7579: PUSH
7580: LD_INT 35
7582: PUSH
7583: LD_INT 20
7585: PUSH
7586: LD_INT 45
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7594: LD_VAR 0 6
7598: PPUSH
7599: CALL_OW 264
7603: PUSH
7604: LD_INT 47
7606: PUSH
7607: EMPTY
7608: LIST
7609: IN
7610: IFFALSE 7631
// points := [ 67 , 45 , 75 ] ;
7612: LD_ADDR_VAR 0 9
7616: PUSH
7617: LD_INT 67
7619: PUSH
7620: LD_INT 45
7622: PUSH
7623: LD_INT 75
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7631: LD_VAR 0 6
7635: PPUSH
7636: CALL_OW 264
7640: PUSH
7641: LD_INT 26
7643: PUSH
7644: EMPTY
7645: LIST
7646: IN
7647: IFFALSE 7668
// points := [ 120 , 30 , 80 ] ;
7649: LD_ADDR_VAR 0 9
7653: PUSH
7654: LD_INT 120
7656: PUSH
7657: LD_INT 30
7659: PUSH
7660: LD_INT 80
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7668: LD_VAR 0 6
7672: PPUSH
7673: CALL_OW 264
7677: PUSH
7678: LD_INT 22
7680: PUSH
7681: EMPTY
7682: LIST
7683: IN
7684: IFFALSE 7705
// points := [ 40 , 1 , 1 ] ;
7686: LD_ADDR_VAR 0 9
7690: PUSH
7691: LD_INT 40
7693: PUSH
7694: LD_INT 1
7696: PUSH
7697: LD_INT 1
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: LIST
7704: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7705: LD_VAR 0 6
7709: PPUSH
7710: CALL_OW 264
7714: PUSH
7715: LD_INT 29
7717: PUSH
7718: EMPTY
7719: LIST
7720: IN
7721: IFFALSE 7742
// points := [ 70 , 200 , 400 ] ;
7723: LD_ADDR_VAR 0 9
7727: PUSH
7728: LD_INT 70
7730: PUSH
7731: LD_INT 200
7733: PUSH
7734: LD_INT 400
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7742: LD_VAR 0 6
7746: PPUSH
7747: CALL_OW 264
7751: PUSH
7752: LD_INT 14
7754: PUSH
7755: LD_INT 53
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: IN
7762: IFFALSE 7783
// points := [ 40 , 10 , 20 ] ;
7764: LD_ADDR_VAR 0 9
7768: PUSH
7769: LD_INT 40
7771: PUSH
7772: LD_INT 10
7774: PUSH
7775: LD_INT 20
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7783: LD_VAR 0 6
7787: PPUSH
7788: CALL_OW 264
7792: PUSH
7793: LD_INT 9
7795: PUSH
7796: EMPTY
7797: LIST
7798: IN
7799: IFFALSE 7820
// points := [ 5 , 70 , 20 ] ;
7801: LD_ADDR_VAR 0 9
7805: PUSH
7806: LD_INT 5
7808: PUSH
7809: LD_INT 70
7811: PUSH
7812: LD_INT 20
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7820: LD_VAR 0 6
7824: PPUSH
7825: CALL_OW 264
7829: PUSH
7830: LD_INT 10
7832: PUSH
7833: EMPTY
7834: LIST
7835: IN
7836: IFFALSE 7857
// points := [ 35 , 110 , 70 ] ;
7838: LD_ADDR_VAR 0 9
7842: PUSH
7843: LD_INT 35
7845: PUSH
7846: LD_INT 110
7848: PUSH
7849: LD_INT 70
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: LIST
7856: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7857: LD_VAR 0 6
7861: PPUSH
7862: CALL_OW 265
7866: PUSH
7867: LD_INT 25
7869: EQUAL
7870: IFFALSE 7891
// points := [ 80 , 65 , 100 ] ;
7872: LD_ADDR_VAR 0 9
7876: PUSH
7877: LD_INT 80
7879: PUSH
7880: LD_INT 65
7882: PUSH
7883: LD_INT 100
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7891: LD_VAR 0 6
7895: PPUSH
7896: CALL_OW 263
7900: PUSH
7901: LD_INT 1
7903: EQUAL
7904: IFFALSE 7939
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7906: LD_ADDR_VAR 0 10
7910: PUSH
7911: LD_VAR 0 10
7915: PUSH
7916: LD_VAR 0 6
7920: PPUSH
7921: CALL_OW 311
7925: PPUSH
7926: LD_INT 3
7928: PPUSH
7929: CALL_OW 259
7933: PUSH
7934: LD_INT 4
7936: MUL
7937: MUL
7938: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7939: LD_VAR 0 6
7943: PPUSH
7944: CALL_OW 263
7948: PUSH
7949: LD_INT 2
7951: EQUAL
7952: IFFALSE 8003
// begin j := IsControledBy ( i ) ;
7954: LD_ADDR_VAR 0 7
7958: PUSH
7959: LD_VAR 0 6
7963: PPUSH
7964: CALL_OW 312
7968: ST_TO_ADDR
// if j then
7969: LD_VAR 0 7
7973: IFFALSE 8003
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7975: LD_ADDR_VAR 0 10
7979: PUSH
7980: LD_VAR 0 10
7984: PUSH
7985: LD_VAR 0 7
7989: PPUSH
7990: LD_INT 3
7992: PPUSH
7993: CALL_OW 259
7997: PUSH
7998: LD_INT 3
8000: MUL
8001: MUL
8002: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8003: LD_VAR 0 6
8007: PPUSH
8008: CALL_OW 264
8012: PUSH
8013: LD_INT 5
8015: PUSH
8016: LD_INT 6
8018: PUSH
8019: LD_INT 46
8021: PUSH
8022: LD_INT 44
8024: PUSH
8025: LD_INT 47
8027: PUSH
8028: LD_INT 45
8030: PUSH
8031: LD_INT 28
8033: PUSH
8034: LD_INT 7
8036: PUSH
8037: LD_INT 27
8039: PUSH
8040: LD_INT 29
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: IN
8055: PUSH
8056: LD_VAR 0 1
8060: PPUSH
8061: LD_INT 52
8063: PPUSH
8064: CALL_OW 321
8068: PUSH
8069: LD_INT 2
8071: EQUAL
8072: AND
8073: IFFALSE 8090
// bpoints := bpoints * 1.2 ;
8075: LD_ADDR_VAR 0 10
8079: PUSH
8080: LD_VAR 0 10
8084: PUSH
8085: LD_REAL  1.20000000000000E+0000
8088: MUL
8089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8090: LD_VAR 0 6
8094: PPUSH
8095: CALL_OW 264
8099: PUSH
8100: LD_INT 6
8102: PUSH
8103: LD_INT 46
8105: PUSH
8106: LD_INT 47
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: IN
8114: IFFALSE 8131
// bpoints := bpoints * 1.2 ;
8116: LD_ADDR_VAR 0 10
8120: PUSH
8121: LD_VAR 0 10
8125: PUSH
8126: LD_REAL  1.20000000000000E+0000
8129: MUL
8130: ST_TO_ADDR
// end ; unit_building :
8131: GO 8145
8133: LD_INT 3
8135: DOUBLE
8136: EQUAL
8137: IFTRUE 8141
8139: GO 8144
8141: POP
// ; end ;
8142: GO 8145
8144: POP
// for j = 1 to 3 do
8145: LD_ADDR_VAR 0 7
8149: PUSH
8150: DOUBLE
8151: LD_INT 1
8153: DEC
8154: ST_TO_ADDR
8155: LD_INT 3
8157: PUSH
8158: FOR_TO
8159: IFFALSE 8212
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8161: LD_ADDR_VAR 0 5
8165: PUSH
8166: LD_VAR 0 5
8170: PPUSH
8171: LD_VAR 0 7
8175: PPUSH
8176: LD_VAR 0 5
8180: PUSH
8181: LD_VAR 0 7
8185: ARRAY
8186: PUSH
8187: LD_VAR 0 9
8191: PUSH
8192: LD_VAR 0 7
8196: ARRAY
8197: PUSH
8198: LD_VAR 0 10
8202: MUL
8203: PLUS
8204: PPUSH
8205: CALL_OW 1
8209: ST_TO_ADDR
8210: GO 8158
8212: POP
8213: POP
// end ;
8214: GO 6693
8216: POP
8217: POP
// result := Replace ( result , 4 , tmp ) ;
8218: LD_ADDR_VAR 0 5
8222: PUSH
8223: LD_VAR 0 5
8227: PPUSH
8228: LD_INT 4
8230: PPUSH
8231: LD_VAR 0 8
8235: PPUSH
8236: CALL_OW 1
8240: ST_TO_ADDR
// end ;
8241: LD_VAR 0 5
8245: RET
// export function DangerAtRange ( unit , range ) ; begin
8246: LD_INT 0
8248: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8249: LD_ADDR_VAR 0 3
8253: PUSH
8254: LD_VAR 0 1
8258: PPUSH
8259: CALL_OW 255
8263: PPUSH
8264: LD_VAR 0 1
8268: PPUSH
8269: CALL_OW 250
8273: PPUSH
8274: LD_VAR 0 1
8278: PPUSH
8279: CALL_OW 251
8283: PPUSH
8284: LD_VAR 0 2
8288: PPUSH
8289: CALL 6545 0 4
8293: ST_TO_ADDR
// end ;
8294: LD_VAR 0 3
8298: RET
// export function DangerInArea ( side , area ) ; begin
8299: LD_INT 0
8301: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8302: LD_ADDR_VAR 0 3
8306: PUSH
8307: LD_VAR 0 2
8311: PPUSH
8312: LD_INT 81
8314: PUSH
8315: LD_VAR 0 1
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PPUSH
8324: CALL_OW 70
8328: ST_TO_ADDR
// end ;
8329: LD_VAR 0 3
8333: RET
// export function IsExtension ( b ) ; begin
8334: LD_INT 0
8336: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8337: LD_ADDR_VAR 0 2
8341: PUSH
8342: LD_VAR 0 1
8346: PUSH
8347: LD_INT 23
8349: PUSH
8350: LD_INT 20
8352: PUSH
8353: LD_INT 22
8355: PUSH
8356: LD_INT 17
8358: PUSH
8359: LD_INT 24
8361: PUSH
8362: LD_INT 21
8364: PUSH
8365: LD_INT 19
8367: PUSH
8368: LD_INT 16
8370: PUSH
8371: LD_INT 25
8373: PUSH
8374: LD_INT 18
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: IN
8389: ST_TO_ADDR
// end ;
8390: LD_VAR 0 2
8394: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8395: LD_INT 0
8397: PPUSH
8398: PPUSH
8399: PPUSH
// result := [ ] ;
8400: LD_ADDR_VAR 0 4
8404: PUSH
8405: EMPTY
8406: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8407: LD_ADDR_VAR 0 5
8411: PUSH
8412: LD_VAR 0 2
8416: PPUSH
8417: LD_INT 21
8419: PUSH
8420: LD_INT 3
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PPUSH
8427: CALL_OW 70
8431: ST_TO_ADDR
// if not tmp then
8432: LD_VAR 0 5
8436: NOT
8437: IFFALSE 8441
// exit ;
8439: GO 8505
// if checkLink then
8441: LD_VAR 0 3
8445: IFFALSE 8495
// begin for i in tmp do
8447: LD_ADDR_VAR 0 6
8451: PUSH
8452: LD_VAR 0 5
8456: PUSH
8457: FOR_IN
8458: IFFALSE 8493
// if GetBase ( i ) <> base then
8460: LD_VAR 0 6
8464: PPUSH
8465: CALL_OW 274
8469: PUSH
8470: LD_VAR 0 1
8474: NONEQUAL
8475: IFFALSE 8491
// ComLinkToBase ( base , i ) ;
8477: LD_VAR 0 1
8481: PPUSH
8482: LD_VAR 0 6
8486: PPUSH
8487: CALL_OW 169
8491: GO 8457
8493: POP
8494: POP
// end ; result := tmp ;
8495: LD_ADDR_VAR 0 4
8499: PUSH
8500: LD_VAR 0 5
8504: ST_TO_ADDR
// end ;
8505: LD_VAR 0 4
8509: RET
// export function ComComplete ( units , b ) ; var i ; begin
8510: LD_INT 0
8512: PPUSH
8513: PPUSH
// if not units then
8514: LD_VAR 0 1
8518: NOT
8519: IFFALSE 8523
// exit ;
8521: GO 8613
// for i in units do
8523: LD_ADDR_VAR 0 4
8527: PUSH
8528: LD_VAR 0 1
8532: PUSH
8533: FOR_IN
8534: IFFALSE 8611
// if BuildingStatus ( b ) = bs_build then
8536: LD_VAR 0 2
8540: PPUSH
8541: CALL_OW 461
8545: PUSH
8546: LD_INT 1
8548: EQUAL
8549: IFFALSE 8609
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8551: LD_VAR 0 4
8555: PPUSH
8556: LD_STRING h
8558: PUSH
8559: LD_VAR 0 2
8563: PPUSH
8564: CALL_OW 250
8568: PUSH
8569: LD_VAR 0 2
8573: PPUSH
8574: CALL_OW 251
8578: PUSH
8579: LD_VAR 0 2
8583: PUSH
8584: LD_INT 0
8586: PUSH
8587: LD_INT 0
8589: PUSH
8590: LD_INT 0
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: PPUSH
8605: CALL_OW 446
8609: GO 8533
8611: POP
8612: POP
// end ;
8613: LD_VAR 0 3
8617: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8618: LD_INT 0
8620: PPUSH
8621: PPUSH
8622: PPUSH
8623: PPUSH
8624: PPUSH
8625: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8626: LD_VAR 0 1
8630: NOT
8631: PUSH
8632: LD_VAR 0 1
8636: PPUSH
8637: CALL_OW 263
8641: PUSH
8642: LD_INT 2
8644: NONEQUAL
8645: OR
8646: IFFALSE 8650
// exit ;
8648: GO 8966
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8650: LD_ADDR_VAR 0 6
8654: PUSH
8655: LD_INT 22
8657: PUSH
8658: LD_VAR 0 1
8662: PPUSH
8663: CALL_OW 255
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 2
8674: PUSH
8675: LD_INT 30
8677: PUSH
8678: LD_INT 36
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 34
8687: PUSH
8688: LD_INT 31
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PPUSH
8704: CALL_OW 69
8708: ST_TO_ADDR
// if not tmp then
8709: LD_VAR 0 6
8713: NOT
8714: IFFALSE 8718
// exit ;
8716: GO 8966
// result := [ ] ;
8718: LD_ADDR_VAR 0 2
8722: PUSH
8723: EMPTY
8724: ST_TO_ADDR
// for i in tmp do
8725: LD_ADDR_VAR 0 3
8729: PUSH
8730: LD_VAR 0 6
8734: PUSH
8735: FOR_IN
8736: IFFALSE 8807
// begin t := UnitsInside ( i ) ;
8738: LD_ADDR_VAR 0 4
8742: PUSH
8743: LD_VAR 0 3
8747: PPUSH
8748: CALL_OW 313
8752: ST_TO_ADDR
// if t then
8753: LD_VAR 0 4
8757: IFFALSE 8805
// for j in t do
8759: LD_ADDR_VAR 0 7
8763: PUSH
8764: LD_VAR 0 4
8768: PUSH
8769: FOR_IN
8770: IFFALSE 8803
// result := Replace ( result , result + 1 , j ) ;
8772: LD_ADDR_VAR 0 2
8776: PUSH
8777: LD_VAR 0 2
8781: PPUSH
8782: LD_VAR 0 2
8786: PUSH
8787: LD_INT 1
8789: PLUS
8790: PPUSH
8791: LD_VAR 0 7
8795: PPUSH
8796: CALL_OW 1
8800: ST_TO_ADDR
8801: GO 8769
8803: POP
8804: POP
// end ;
8805: GO 8735
8807: POP
8808: POP
// if not result then
8809: LD_VAR 0 2
8813: NOT
8814: IFFALSE 8818
// exit ;
8816: GO 8966
// mech := result [ 1 ] ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_VAR 0 2
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: ST_TO_ADDR
// if result > 1 then
8832: LD_VAR 0 2
8836: PUSH
8837: LD_INT 1
8839: GREATER
8840: IFFALSE 8952
// begin for i = 2 to result do
8842: LD_ADDR_VAR 0 3
8846: PUSH
8847: DOUBLE
8848: LD_INT 2
8850: DEC
8851: ST_TO_ADDR
8852: LD_VAR 0 2
8856: PUSH
8857: FOR_TO
8858: IFFALSE 8950
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8860: LD_ADDR_VAR 0 4
8864: PUSH
8865: LD_VAR 0 2
8869: PUSH
8870: LD_VAR 0 3
8874: ARRAY
8875: PPUSH
8876: LD_INT 3
8878: PPUSH
8879: CALL_OW 259
8883: PUSH
8884: LD_VAR 0 2
8888: PUSH
8889: LD_VAR 0 3
8893: ARRAY
8894: PPUSH
8895: CALL_OW 432
8899: MINUS
8900: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8901: LD_VAR 0 4
8905: PUSH
8906: LD_VAR 0 5
8910: PPUSH
8911: LD_INT 3
8913: PPUSH
8914: CALL_OW 259
8918: PUSH
8919: LD_VAR 0 5
8923: PPUSH
8924: CALL_OW 432
8928: MINUS
8929: GREATEREQUAL
8930: IFFALSE 8948
// mech := result [ i ] ;
8932: LD_ADDR_VAR 0 5
8936: PUSH
8937: LD_VAR 0 2
8941: PUSH
8942: LD_VAR 0 3
8946: ARRAY
8947: ST_TO_ADDR
// end ;
8948: GO 8857
8950: POP
8951: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8952: LD_VAR 0 1
8956: PPUSH
8957: LD_VAR 0 5
8961: PPUSH
8962: CALL_OW 135
// end ;
8966: LD_VAR 0 2
8970: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8971: LD_INT 0
8973: PPUSH
8974: PPUSH
8975: PPUSH
8976: PPUSH
8977: PPUSH
8978: PPUSH
8979: PPUSH
8980: PPUSH
8981: PPUSH
8982: PPUSH
8983: PPUSH
8984: PPUSH
8985: PPUSH
// result := [ ] ;
8986: LD_ADDR_VAR 0 7
8990: PUSH
8991: EMPTY
8992: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8993: LD_VAR 0 1
8997: PPUSH
8998: CALL_OW 266
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 1
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: IN
9013: NOT
9014: IFFALSE 9018
// exit ;
9016: GO 10652
// if name then
9018: LD_VAR 0 3
9022: IFFALSE 9038
// SetBName ( base_dep , name ) ;
9024: LD_VAR 0 1
9028: PPUSH
9029: LD_VAR 0 3
9033: PPUSH
9034: CALL_OW 500
// base := GetBase ( base_dep ) ;
9038: LD_ADDR_VAR 0 15
9042: PUSH
9043: LD_VAR 0 1
9047: PPUSH
9048: CALL_OW 274
9052: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9053: LD_ADDR_VAR 0 16
9057: PUSH
9058: LD_VAR 0 1
9062: PPUSH
9063: CALL_OW 255
9067: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9068: LD_ADDR_VAR 0 17
9072: PUSH
9073: LD_VAR 0 1
9077: PPUSH
9078: CALL_OW 248
9082: ST_TO_ADDR
// if sources then
9083: LD_VAR 0 5
9087: IFFALSE 9134
// for i = 1 to 3 do
9089: LD_ADDR_VAR 0 8
9093: PUSH
9094: DOUBLE
9095: LD_INT 1
9097: DEC
9098: ST_TO_ADDR
9099: LD_INT 3
9101: PUSH
9102: FOR_TO
9103: IFFALSE 9132
// AddResourceType ( base , i , sources [ i ] ) ;
9105: LD_VAR 0 15
9109: PPUSH
9110: LD_VAR 0 8
9114: PPUSH
9115: LD_VAR 0 5
9119: PUSH
9120: LD_VAR 0 8
9124: ARRAY
9125: PPUSH
9126: CALL_OW 276
9130: GO 9102
9132: POP
9133: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9134: LD_ADDR_VAR 0 18
9138: PUSH
9139: LD_VAR 0 15
9143: PPUSH
9144: LD_VAR 0 2
9148: PPUSH
9149: LD_INT 1
9151: PPUSH
9152: CALL 8395 0 3
9156: ST_TO_ADDR
// InitHc ;
9157: CALL_OW 19
// InitUc ;
9161: CALL_OW 18
// uc_side := side ;
9165: LD_ADDR_OWVAR 20
9169: PUSH
9170: LD_VAR 0 16
9174: ST_TO_ADDR
// uc_nation := nation ;
9175: LD_ADDR_OWVAR 21
9179: PUSH
9180: LD_VAR 0 17
9184: ST_TO_ADDR
// if buildings then
9185: LD_VAR 0 18
9189: IFFALSE 10511
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9191: LD_ADDR_VAR 0 19
9195: PUSH
9196: LD_VAR 0 18
9200: PPUSH
9201: LD_INT 2
9203: PUSH
9204: LD_INT 30
9206: PUSH
9207: LD_INT 29
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PUSH
9214: LD_INT 30
9216: PUSH
9217: LD_INT 30
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: LIST
9228: PPUSH
9229: CALL_OW 72
9233: ST_TO_ADDR
// if tmp then
9234: LD_VAR 0 19
9238: IFFALSE 9286
// for i in tmp do
9240: LD_ADDR_VAR 0 8
9244: PUSH
9245: LD_VAR 0 19
9249: PUSH
9250: FOR_IN
9251: IFFALSE 9284
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9253: LD_VAR 0 8
9257: PPUSH
9258: CALL_OW 250
9262: PPUSH
9263: LD_VAR 0 8
9267: PPUSH
9268: CALL_OW 251
9272: PPUSH
9273: LD_VAR 0 16
9277: PPUSH
9278: CALL_OW 441
9282: GO 9250
9284: POP
9285: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9286: LD_VAR 0 18
9290: PPUSH
9291: LD_INT 2
9293: PUSH
9294: LD_INT 30
9296: PUSH
9297: LD_INT 32
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 30
9306: PUSH
9307: LD_INT 33
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: PPUSH
9319: CALL_OW 72
9323: IFFALSE 9411
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9325: LD_ADDR_VAR 0 8
9329: PUSH
9330: LD_VAR 0 18
9334: PPUSH
9335: LD_INT 2
9337: PUSH
9338: LD_INT 30
9340: PUSH
9341: LD_INT 32
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PUSH
9348: LD_INT 30
9350: PUSH
9351: LD_INT 33
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 72
9367: PUSH
9368: FOR_IN
9369: IFFALSE 9409
// begin if not GetBWeapon ( i ) then
9371: LD_VAR 0 8
9375: PPUSH
9376: CALL_OW 269
9380: NOT
9381: IFFALSE 9407
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9383: LD_VAR 0 8
9387: PPUSH
9388: LD_VAR 0 8
9392: PPUSH
9393: LD_VAR 0 2
9397: PPUSH
9398: CALL 10657 0 2
9402: PPUSH
9403: CALL_OW 431
// end ;
9407: GO 9368
9409: POP
9410: POP
// end ; for i = 1 to personel do
9411: LD_ADDR_VAR 0 8
9415: PUSH
9416: DOUBLE
9417: LD_INT 1
9419: DEC
9420: ST_TO_ADDR
9421: LD_VAR 0 6
9425: PUSH
9426: FOR_TO
9427: IFFALSE 10491
// begin if i > 4 then
9429: LD_VAR 0 8
9433: PUSH
9434: LD_INT 4
9436: GREATER
9437: IFFALSE 9441
// break ;
9439: GO 10491
// case i of 1 :
9441: LD_VAR 0 8
9445: PUSH
9446: LD_INT 1
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9534
9454: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9455: LD_ADDR_VAR 0 12
9459: PUSH
9460: LD_VAR 0 18
9464: PPUSH
9465: LD_INT 22
9467: PUSH
9468: LD_VAR 0 16
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 58
9479: PUSH
9480: EMPTY
9481: LIST
9482: PUSH
9483: LD_INT 2
9485: PUSH
9486: LD_INT 30
9488: PUSH
9489: LD_INT 32
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: LD_INT 30
9498: PUSH
9499: LD_INT 4
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 30
9508: PUSH
9509: LD_INT 5
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: PPUSH
9527: CALL_OW 72
9531: ST_TO_ADDR
9532: GO 9756
9534: LD_INT 2
9536: DOUBLE
9537: EQUAL
9538: IFTRUE 9542
9540: GO 9604
9542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9543: LD_ADDR_VAR 0 12
9547: PUSH
9548: LD_VAR 0 18
9552: PPUSH
9553: LD_INT 22
9555: PUSH
9556: LD_VAR 0 16
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 2
9567: PUSH
9568: LD_INT 30
9570: PUSH
9571: LD_INT 0
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PUSH
9578: LD_INT 30
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PPUSH
9597: CALL_OW 72
9601: ST_TO_ADDR
9602: GO 9756
9604: LD_INT 3
9606: DOUBLE
9607: EQUAL
9608: IFTRUE 9612
9610: GO 9674
9612: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9613: LD_ADDR_VAR 0 12
9617: PUSH
9618: LD_VAR 0 18
9622: PPUSH
9623: LD_INT 22
9625: PUSH
9626: LD_VAR 0 16
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 2
9637: PUSH
9638: LD_INT 30
9640: PUSH
9641: LD_INT 2
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 30
9650: PUSH
9651: LD_INT 3
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PPUSH
9667: CALL_OW 72
9671: ST_TO_ADDR
9672: GO 9756
9674: LD_INT 4
9676: DOUBLE
9677: EQUAL
9678: IFTRUE 9682
9680: GO 9755
9682: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9683: LD_ADDR_VAR 0 12
9687: PUSH
9688: LD_VAR 0 18
9692: PPUSH
9693: LD_INT 22
9695: PUSH
9696: LD_VAR 0 16
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 2
9707: PUSH
9708: LD_INT 30
9710: PUSH
9711: LD_INT 6
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 30
9720: PUSH
9721: LD_INT 7
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: LD_INT 30
9730: PUSH
9731: LD_INT 8
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PPUSH
9748: CALL_OW 72
9752: ST_TO_ADDR
9753: GO 9756
9755: POP
// if i = 1 then
9756: LD_VAR 0 8
9760: PUSH
9761: LD_INT 1
9763: EQUAL
9764: IFFALSE 9875
// begin tmp := [ ] ;
9766: LD_ADDR_VAR 0 19
9770: PUSH
9771: EMPTY
9772: ST_TO_ADDR
// for j in f do
9773: LD_ADDR_VAR 0 9
9777: PUSH
9778: LD_VAR 0 12
9782: PUSH
9783: FOR_IN
9784: IFFALSE 9857
// if GetBType ( j ) = b_bunker then
9786: LD_VAR 0 9
9790: PPUSH
9791: CALL_OW 266
9795: PUSH
9796: LD_INT 32
9798: EQUAL
9799: IFFALSE 9826
// tmp := Insert ( tmp , 1 , j ) else
9801: LD_ADDR_VAR 0 19
9805: PUSH
9806: LD_VAR 0 19
9810: PPUSH
9811: LD_INT 1
9813: PPUSH
9814: LD_VAR 0 9
9818: PPUSH
9819: CALL_OW 2
9823: ST_TO_ADDR
9824: GO 9855
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9826: LD_ADDR_VAR 0 19
9830: PUSH
9831: LD_VAR 0 19
9835: PPUSH
9836: LD_VAR 0 19
9840: PUSH
9841: LD_INT 1
9843: PLUS
9844: PPUSH
9845: LD_VAR 0 9
9849: PPUSH
9850: CALL_OW 2
9854: ST_TO_ADDR
9855: GO 9783
9857: POP
9858: POP
// if tmp then
9859: LD_VAR 0 19
9863: IFFALSE 9875
// f := tmp ;
9865: LD_ADDR_VAR 0 12
9869: PUSH
9870: LD_VAR 0 19
9874: ST_TO_ADDR
// end ; x := personel [ i ] ;
9875: LD_ADDR_VAR 0 13
9879: PUSH
9880: LD_VAR 0 6
9884: PUSH
9885: LD_VAR 0 8
9889: ARRAY
9890: ST_TO_ADDR
// if x = - 1 then
9891: LD_VAR 0 13
9895: PUSH
9896: LD_INT 1
9898: NEG
9899: EQUAL
9900: IFFALSE 10109
// begin for j in f do
9902: LD_ADDR_VAR 0 9
9906: PUSH
9907: LD_VAR 0 12
9911: PUSH
9912: FOR_IN
9913: IFFALSE 10105
// repeat InitHc ;
9915: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9919: LD_VAR 0 9
9923: PPUSH
9924: CALL_OW 266
9928: PUSH
9929: LD_INT 5
9931: EQUAL
9932: IFFALSE 10002
// begin if UnitsInside ( j ) < 3 then
9934: LD_VAR 0 9
9938: PPUSH
9939: CALL_OW 313
9943: PUSH
9944: LD_INT 3
9946: LESS
9947: IFFALSE 9983
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9949: LD_INT 0
9951: PPUSH
9952: LD_INT 5
9954: PUSH
9955: LD_INT 8
9957: PUSH
9958: LD_INT 9
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: LD_VAR 0 17
9970: ARRAY
9971: PPUSH
9972: LD_VAR 0 4
9976: PPUSH
9977: CALL_OW 380
9981: GO 10000
// PrepareHuman ( false , i , skill ) ;
9983: LD_INT 0
9985: PPUSH
9986: LD_VAR 0 8
9990: PPUSH
9991: LD_VAR 0 4
9995: PPUSH
9996: CALL_OW 380
// end else
10000: GO 10019
// PrepareHuman ( false , i , skill ) ;
10002: LD_INT 0
10004: PPUSH
10005: LD_VAR 0 8
10009: PPUSH
10010: LD_VAR 0 4
10014: PPUSH
10015: CALL_OW 380
// un := CreateHuman ;
10019: LD_ADDR_VAR 0 14
10023: PUSH
10024: CALL_OW 44
10028: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10029: LD_ADDR_VAR 0 7
10033: PUSH
10034: LD_VAR 0 7
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: LD_VAR 0 14
10046: PPUSH
10047: CALL_OW 2
10051: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10052: LD_VAR 0 14
10056: PPUSH
10057: LD_VAR 0 9
10061: PPUSH
10062: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10066: LD_VAR 0 9
10070: PPUSH
10071: CALL_OW 313
10075: PUSH
10076: LD_INT 6
10078: EQUAL
10079: PUSH
10080: LD_VAR 0 9
10084: PPUSH
10085: CALL_OW 266
10089: PUSH
10090: LD_INT 32
10092: PUSH
10093: LD_INT 31
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: IN
10100: OR
10101: IFFALSE 9915
10103: GO 9912
10105: POP
10106: POP
// end else
10107: GO 10489
// for j = 1 to x do
10109: LD_ADDR_VAR 0 9
10113: PUSH
10114: DOUBLE
10115: LD_INT 1
10117: DEC
10118: ST_TO_ADDR
10119: LD_VAR 0 13
10123: PUSH
10124: FOR_TO
10125: IFFALSE 10487
// begin InitHc ;
10127: CALL_OW 19
// if not f then
10131: LD_VAR 0 12
10135: NOT
10136: IFFALSE 10225
// begin PrepareHuman ( false , i , skill ) ;
10138: LD_INT 0
10140: PPUSH
10141: LD_VAR 0 8
10145: PPUSH
10146: LD_VAR 0 4
10150: PPUSH
10151: CALL_OW 380
// un := CreateHuman ;
10155: LD_ADDR_VAR 0 14
10159: PUSH
10160: CALL_OW 44
10164: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10165: LD_ADDR_VAR 0 7
10169: PUSH
10170: LD_VAR 0 7
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: LD_VAR 0 14
10182: PPUSH
10183: CALL_OW 2
10187: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10188: LD_VAR 0 14
10192: PPUSH
10193: LD_VAR 0 1
10197: PPUSH
10198: CALL_OW 250
10202: PPUSH
10203: LD_VAR 0 1
10207: PPUSH
10208: CALL_OW 251
10212: PPUSH
10213: LD_INT 10
10215: PPUSH
10216: LD_INT 0
10218: PPUSH
10219: CALL_OW 50
// continue ;
10223: GO 10124
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10225: LD_VAR 0 12
10229: PUSH
10230: LD_INT 1
10232: ARRAY
10233: PPUSH
10234: CALL_OW 313
10238: PUSH
10239: LD_VAR 0 12
10243: PUSH
10244: LD_INT 1
10246: ARRAY
10247: PPUSH
10248: CALL_OW 266
10252: PUSH
10253: LD_INT 32
10255: PUSH
10256: LD_INT 31
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: IN
10263: AND
10264: PUSH
10265: LD_VAR 0 12
10269: PUSH
10270: LD_INT 1
10272: ARRAY
10273: PPUSH
10274: CALL_OW 313
10278: PUSH
10279: LD_INT 6
10281: EQUAL
10282: OR
10283: IFFALSE 10303
// f := Delete ( f , 1 ) ;
10285: LD_ADDR_VAR 0 12
10289: PUSH
10290: LD_VAR 0 12
10294: PPUSH
10295: LD_INT 1
10297: PPUSH
10298: CALL_OW 3
10302: ST_TO_ADDR
// if not f then
10303: LD_VAR 0 12
10307: NOT
10308: IFFALSE 10326
// begin x := x + 2 ;
10310: LD_ADDR_VAR 0 13
10314: PUSH
10315: LD_VAR 0 13
10319: PUSH
10320: LD_INT 2
10322: PLUS
10323: ST_TO_ADDR
// continue ;
10324: GO 10124
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10326: LD_VAR 0 12
10330: PUSH
10331: LD_INT 1
10333: ARRAY
10334: PPUSH
10335: CALL_OW 266
10339: PUSH
10340: LD_INT 5
10342: EQUAL
10343: IFFALSE 10417
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10345: LD_VAR 0 12
10349: PUSH
10350: LD_INT 1
10352: ARRAY
10353: PPUSH
10354: CALL_OW 313
10358: PUSH
10359: LD_INT 3
10361: LESS
10362: IFFALSE 10398
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10364: LD_INT 0
10366: PPUSH
10367: LD_INT 5
10369: PUSH
10370: LD_INT 8
10372: PUSH
10373: LD_INT 9
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: PUSH
10381: LD_VAR 0 17
10385: ARRAY
10386: PPUSH
10387: LD_VAR 0 4
10391: PPUSH
10392: CALL_OW 380
10396: GO 10415
// PrepareHuman ( false , i , skill ) ;
10398: LD_INT 0
10400: PPUSH
10401: LD_VAR 0 8
10405: PPUSH
10406: LD_VAR 0 4
10410: PPUSH
10411: CALL_OW 380
// end else
10415: GO 10434
// PrepareHuman ( false , i , skill ) ;
10417: LD_INT 0
10419: PPUSH
10420: LD_VAR 0 8
10424: PPUSH
10425: LD_VAR 0 4
10429: PPUSH
10430: CALL_OW 380
// un := CreateHuman ;
10434: LD_ADDR_VAR 0 14
10438: PUSH
10439: CALL_OW 44
10443: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10444: LD_ADDR_VAR 0 7
10448: PUSH
10449: LD_VAR 0 7
10453: PPUSH
10454: LD_INT 1
10456: PPUSH
10457: LD_VAR 0 14
10461: PPUSH
10462: CALL_OW 2
10466: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10467: LD_VAR 0 14
10471: PPUSH
10472: LD_VAR 0 12
10476: PUSH
10477: LD_INT 1
10479: ARRAY
10480: PPUSH
10481: CALL_OW 52
// end ;
10485: GO 10124
10487: POP
10488: POP
// end ;
10489: GO 9426
10491: POP
10492: POP
// result := result ^ buildings ;
10493: LD_ADDR_VAR 0 7
10497: PUSH
10498: LD_VAR 0 7
10502: PUSH
10503: LD_VAR 0 18
10507: ADD
10508: ST_TO_ADDR
// end else
10509: GO 10652
// begin for i = 1 to personel do
10511: LD_ADDR_VAR 0 8
10515: PUSH
10516: DOUBLE
10517: LD_INT 1
10519: DEC
10520: ST_TO_ADDR
10521: LD_VAR 0 6
10525: PUSH
10526: FOR_TO
10527: IFFALSE 10650
// begin if i > 4 then
10529: LD_VAR 0 8
10533: PUSH
10534: LD_INT 4
10536: GREATER
10537: IFFALSE 10541
// break ;
10539: GO 10650
// x := personel [ i ] ;
10541: LD_ADDR_VAR 0 13
10545: PUSH
10546: LD_VAR 0 6
10550: PUSH
10551: LD_VAR 0 8
10555: ARRAY
10556: ST_TO_ADDR
// if x = - 1 then
10557: LD_VAR 0 13
10561: PUSH
10562: LD_INT 1
10564: NEG
10565: EQUAL
10566: IFFALSE 10570
// continue ;
10568: GO 10526
// PrepareHuman ( false , i , skill ) ;
10570: LD_INT 0
10572: PPUSH
10573: LD_VAR 0 8
10577: PPUSH
10578: LD_VAR 0 4
10582: PPUSH
10583: CALL_OW 380
// un := CreateHuman ;
10587: LD_ADDR_VAR 0 14
10591: PUSH
10592: CALL_OW 44
10596: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10597: LD_VAR 0 14
10601: PPUSH
10602: LD_VAR 0 1
10606: PPUSH
10607: CALL_OW 250
10611: PPUSH
10612: LD_VAR 0 1
10616: PPUSH
10617: CALL_OW 251
10621: PPUSH
10622: LD_INT 10
10624: PPUSH
10625: LD_INT 0
10627: PPUSH
10628: CALL_OW 50
// result := result ^ un ;
10632: LD_ADDR_VAR 0 7
10636: PUSH
10637: LD_VAR 0 7
10641: PUSH
10642: LD_VAR 0 14
10646: ADD
10647: ST_TO_ADDR
// end ;
10648: GO 10526
10650: POP
10651: POP
// end ; end ;
10652: LD_VAR 0 7
10656: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10657: LD_INT 0
10659: PPUSH
10660: PPUSH
10661: PPUSH
10662: PPUSH
10663: PPUSH
10664: PPUSH
10665: PPUSH
10666: PPUSH
10667: PPUSH
10668: PPUSH
10669: PPUSH
10670: PPUSH
10671: PPUSH
10672: PPUSH
10673: PPUSH
10674: PPUSH
// result := false ;
10675: LD_ADDR_VAR 0 3
10679: PUSH
10680: LD_INT 0
10682: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10683: LD_VAR 0 1
10687: NOT
10688: PUSH
10689: LD_VAR 0 1
10693: PPUSH
10694: CALL_OW 266
10698: PUSH
10699: LD_INT 32
10701: PUSH
10702: LD_INT 33
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: IN
10709: NOT
10710: OR
10711: IFFALSE 10715
// exit ;
10713: GO 11824
// nat := GetNation ( tower ) ;
10715: LD_ADDR_VAR 0 12
10719: PUSH
10720: LD_VAR 0 1
10724: PPUSH
10725: CALL_OW 248
10729: ST_TO_ADDR
// side := GetSide ( tower ) ;
10730: LD_ADDR_VAR 0 16
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 255
10744: ST_TO_ADDR
// x := GetX ( tower ) ;
10745: LD_ADDR_VAR 0 10
10749: PUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 250
10759: ST_TO_ADDR
// y := GetY ( tower ) ;
10760: LD_ADDR_VAR 0 11
10764: PUSH
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 251
10774: ST_TO_ADDR
// if not x or not y then
10775: LD_VAR 0 10
10779: NOT
10780: PUSH
10781: LD_VAR 0 11
10785: NOT
10786: OR
10787: IFFALSE 10791
// exit ;
10789: GO 11824
// weapon := 0 ;
10791: LD_ADDR_VAR 0 18
10795: PUSH
10796: LD_INT 0
10798: ST_TO_ADDR
// fac_list := [ ] ;
10799: LD_ADDR_VAR 0 17
10803: PUSH
10804: EMPTY
10805: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10806: LD_ADDR_VAR 0 6
10810: PUSH
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 274
10820: PPUSH
10821: LD_VAR 0 2
10825: PPUSH
10826: LD_INT 0
10828: PPUSH
10829: CALL 8395 0 3
10833: PPUSH
10834: LD_INT 30
10836: PUSH
10837: LD_INT 3
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PPUSH
10844: CALL_OW 72
10848: ST_TO_ADDR
// if not factories then
10849: LD_VAR 0 6
10853: NOT
10854: IFFALSE 10858
// exit ;
10856: GO 11824
// for i in factories do
10858: LD_ADDR_VAR 0 8
10862: PUSH
10863: LD_VAR 0 6
10867: PUSH
10868: FOR_IN
10869: IFFALSE 10894
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10871: LD_ADDR_VAR 0 17
10875: PUSH
10876: LD_VAR 0 17
10880: PUSH
10881: LD_VAR 0 8
10885: PPUSH
10886: CALL_OW 478
10890: UNION
10891: ST_TO_ADDR
10892: GO 10868
10894: POP
10895: POP
// if not fac_list then
10896: LD_VAR 0 17
10900: NOT
10901: IFFALSE 10905
// exit ;
10903: GO 11824
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10905: LD_ADDR_VAR 0 5
10909: PUSH
10910: LD_INT 4
10912: PUSH
10913: LD_INT 5
10915: PUSH
10916: LD_INT 9
10918: PUSH
10919: LD_INT 10
10921: PUSH
10922: LD_INT 6
10924: PUSH
10925: LD_INT 7
10927: PUSH
10928: LD_INT 11
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 27
10942: PUSH
10943: LD_INT 28
10945: PUSH
10946: LD_INT 26
10948: PUSH
10949: LD_INT 30
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: PUSH
10958: LD_INT 43
10960: PUSH
10961: LD_INT 44
10963: PUSH
10964: LD_INT 46
10966: PUSH
10967: LD_INT 45
10969: PUSH
10970: LD_INT 47
10972: PUSH
10973: LD_INT 49
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_VAR 0 12
10993: ARRAY
10994: ST_TO_ADDR
// list := list isect fac_list ;
10995: LD_ADDR_VAR 0 5
10999: PUSH
11000: LD_VAR 0 5
11004: PUSH
11005: LD_VAR 0 17
11009: ISECT
11010: ST_TO_ADDR
// if not list then
11011: LD_VAR 0 5
11015: NOT
11016: IFFALSE 11020
// exit ;
11018: GO 11824
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11020: LD_VAR 0 12
11024: PUSH
11025: LD_INT 3
11027: EQUAL
11028: PUSH
11029: LD_INT 49
11031: PUSH
11032: LD_VAR 0 5
11036: IN
11037: AND
11038: PUSH
11039: LD_INT 31
11041: PPUSH
11042: LD_VAR 0 16
11046: PPUSH
11047: CALL_OW 321
11051: PUSH
11052: LD_INT 2
11054: EQUAL
11055: AND
11056: IFFALSE 11116
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11058: LD_INT 22
11060: PUSH
11061: LD_VAR 0 16
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 35
11072: PUSH
11073: LD_INT 49
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 91
11082: PUSH
11083: LD_VAR 0 1
11087: PUSH
11088: LD_INT 10
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: LIST
11100: PPUSH
11101: CALL_OW 69
11105: NOT
11106: IFFALSE 11116
// weapon := ru_time_lapser ;
11108: LD_ADDR_VAR 0 18
11112: PUSH
11113: LD_INT 49
11115: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11116: LD_VAR 0 12
11120: PUSH
11121: LD_INT 1
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: IN
11131: PUSH
11132: LD_INT 11
11134: PUSH
11135: LD_VAR 0 5
11139: IN
11140: PUSH
11141: LD_INT 30
11143: PUSH
11144: LD_VAR 0 5
11148: IN
11149: OR
11150: AND
11151: PUSH
11152: LD_INT 6
11154: PPUSH
11155: LD_VAR 0 16
11159: PPUSH
11160: CALL_OW 321
11164: PUSH
11165: LD_INT 2
11167: EQUAL
11168: AND
11169: IFFALSE 11334
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11171: LD_INT 22
11173: PUSH
11174: LD_VAR 0 16
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 2
11185: PUSH
11186: LD_INT 35
11188: PUSH
11189: LD_INT 11
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 35
11198: PUSH
11199: LD_INT 30
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: LIST
11210: PUSH
11211: LD_INT 91
11213: PUSH
11214: LD_VAR 0 1
11218: PUSH
11219: LD_INT 18
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: LIST
11231: PPUSH
11232: CALL_OW 69
11236: NOT
11237: PUSH
11238: LD_INT 22
11240: PUSH
11241: LD_VAR 0 16
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: LD_INT 2
11252: PUSH
11253: LD_INT 30
11255: PUSH
11256: LD_INT 32
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 30
11265: PUSH
11266: LD_INT 33
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 91
11280: PUSH
11281: LD_VAR 0 1
11285: PUSH
11286: LD_INT 12
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: PPUSH
11302: CALL_OW 69
11306: PUSH
11307: LD_INT 2
11309: GREATER
11310: AND
11311: IFFALSE 11334
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11313: LD_ADDR_VAR 0 18
11317: PUSH
11318: LD_INT 11
11320: PUSH
11321: LD_INT 30
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_VAR 0 12
11332: ARRAY
11333: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11334: LD_VAR 0 18
11338: NOT
11339: PUSH
11340: LD_INT 40
11342: PPUSH
11343: LD_VAR 0 16
11347: PPUSH
11348: CALL_OW 321
11352: PUSH
11353: LD_INT 2
11355: EQUAL
11356: AND
11357: PUSH
11358: LD_INT 7
11360: PUSH
11361: LD_VAR 0 5
11365: IN
11366: PUSH
11367: LD_INT 28
11369: PUSH
11370: LD_VAR 0 5
11374: IN
11375: OR
11376: PUSH
11377: LD_INT 45
11379: PUSH
11380: LD_VAR 0 5
11384: IN
11385: OR
11386: AND
11387: IFFALSE 11641
// begin hex := GetHexInfo ( x , y ) ;
11389: LD_ADDR_VAR 0 4
11393: PUSH
11394: LD_VAR 0 10
11398: PPUSH
11399: LD_VAR 0 11
11403: PPUSH
11404: CALL_OW 546
11408: ST_TO_ADDR
// if hex [ 1 ] then
11409: LD_VAR 0 4
11413: PUSH
11414: LD_INT 1
11416: ARRAY
11417: IFFALSE 11421
// exit ;
11419: GO 11824
// height := hex [ 2 ] ;
11421: LD_ADDR_VAR 0 15
11425: PUSH
11426: LD_VAR 0 4
11430: PUSH
11431: LD_INT 2
11433: ARRAY
11434: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11435: LD_ADDR_VAR 0 14
11439: PUSH
11440: LD_INT 0
11442: PUSH
11443: LD_INT 2
11445: PUSH
11446: LD_INT 3
11448: PUSH
11449: LD_INT 5
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: ST_TO_ADDR
// for i in tmp do
11458: LD_ADDR_VAR 0 8
11462: PUSH
11463: LD_VAR 0 14
11467: PUSH
11468: FOR_IN
11469: IFFALSE 11639
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11471: LD_ADDR_VAR 0 9
11475: PUSH
11476: LD_VAR 0 10
11480: PPUSH
11481: LD_VAR 0 8
11485: PPUSH
11486: LD_INT 5
11488: PPUSH
11489: CALL_OW 272
11493: PUSH
11494: LD_VAR 0 11
11498: PPUSH
11499: LD_VAR 0 8
11503: PPUSH
11504: LD_INT 5
11506: PPUSH
11507: CALL_OW 273
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11516: LD_VAR 0 9
11520: PUSH
11521: LD_INT 1
11523: ARRAY
11524: PPUSH
11525: LD_VAR 0 9
11529: PUSH
11530: LD_INT 2
11532: ARRAY
11533: PPUSH
11534: CALL_OW 488
11538: IFFALSE 11637
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11540: LD_ADDR_VAR 0 4
11544: PUSH
11545: LD_VAR 0 9
11549: PUSH
11550: LD_INT 1
11552: ARRAY
11553: PPUSH
11554: LD_VAR 0 9
11558: PUSH
11559: LD_INT 2
11561: ARRAY
11562: PPUSH
11563: CALL_OW 546
11567: ST_TO_ADDR
// if hex [ 1 ] then
11568: LD_VAR 0 4
11572: PUSH
11573: LD_INT 1
11575: ARRAY
11576: IFFALSE 11580
// continue ;
11578: GO 11468
// h := hex [ 2 ] ;
11580: LD_ADDR_VAR 0 13
11584: PUSH
11585: LD_VAR 0 4
11589: PUSH
11590: LD_INT 2
11592: ARRAY
11593: ST_TO_ADDR
// if h + 7 < height then
11594: LD_VAR 0 13
11598: PUSH
11599: LD_INT 7
11601: PLUS
11602: PUSH
11603: LD_VAR 0 15
11607: LESS
11608: IFFALSE 11637
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11610: LD_ADDR_VAR 0 18
11614: PUSH
11615: LD_INT 7
11617: PUSH
11618: LD_INT 28
11620: PUSH
11621: LD_INT 45
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: LIST
11628: PUSH
11629: LD_VAR 0 12
11633: ARRAY
11634: ST_TO_ADDR
// break ;
11635: GO 11639
// end ; end ; end ;
11637: GO 11468
11639: POP
11640: POP
// end ; if not weapon then
11641: LD_VAR 0 18
11645: NOT
11646: IFFALSE 11706
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11648: LD_ADDR_VAR 0 5
11652: PUSH
11653: LD_VAR 0 5
11657: PUSH
11658: LD_INT 11
11660: PUSH
11661: LD_INT 30
11663: PUSH
11664: LD_INT 49
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: DIFF
11672: ST_TO_ADDR
// if not list then
11673: LD_VAR 0 5
11677: NOT
11678: IFFALSE 11682
// exit ;
11680: GO 11824
// weapon := list [ rand ( 1 , list ) ] ;
11682: LD_ADDR_VAR 0 18
11686: PUSH
11687: LD_VAR 0 5
11691: PUSH
11692: LD_INT 1
11694: PPUSH
11695: LD_VAR 0 5
11699: PPUSH
11700: CALL_OW 12
11704: ARRAY
11705: ST_TO_ADDR
// end ; if weapon then
11706: LD_VAR 0 18
11710: IFFALSE 11824
// begin tmp := CostOfWeapon ( weapon ) ;
11712: LD_ADDR_VAR 0 14
11716: PUSH
11717: LD_VAR 0 18
11721: PPUSH
11722: CALL_OW 451
11726: ST_TO_ADDR
// j := GetBase ( tower ) ;
11727: LD_ADDR_VAR 0 9
11731: PUSH
11732: LD_VAR 0 1
11736: PPUSH
11737: CALL_OW 274
11741: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11742: LD_VAR 0 9
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: CALL_OW 275
11754: PUSH
11755: LD_VAR 0 14
11759: PUSH
11760: LD_INT 1
11762: ARRAY
11763: GREATEREQUAL
11764: PUSH
11765: LD_VAR 0 9
11769: PPUSH
11770: LD_INT 2
11772: PPUSH
11773: CALL_OW 275
11777: PUSH
11778: LD_VAR 0 14
11782: PUSH
11783: LD_INT 2
11785: ARRAY
11786: GREATEREQUAL
11787: AND
11788: PUSH
11789: LD_VAR 0 9
11793: PPUSH
11794: LD_INT 3
11796: PPUSH
11797: CALL_OW 275
11801: PUSH
11802: LD_VAR 0 14
11806: PUSH
11807: LD_INT 3
11809: ARRAY
11810: GREATEREQUAL
11811: AND
11812: IFFALSE 11824
// result := weapon ;
11814: LD_ADDR_VAR 0 3
11818: PUSH
11819: LD_VAR 0 18
11823: ST_TO_ADDR
// end ; end ;
11824: LD_VAR 0 3
11828: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11829: LD_INT 0
11831: PPUSH
11832: PPUSH
// result := true ;
11833: LD_ADDR_VAR 0 3
11837: PUSH
11838: LD_INT 1
11840: ST_TO_ADDR
// if array1 = array2 then
11841: LD_VAR 0 1
11845: PUSH
11846: LD_VAR 0 2
11850: EQUAL
11851: IFFALSE 11911
// begin for i = 1 to array1 do
11853: LD_ADDR_VAR 0 4
11857: PUSH
11858: DOUBLE
11859: LD_INT 1
11861: DEC
11862: ST_TO_ADDR
11863: LD_VAR 0 1
11867: PUSH
11868: FOR_TO
11869: IFFALSE 11907
// if array1 [ i ] <> array2 [ i ] then
11871: LD_VAR 0 1
11875: PUSH
11876: LD_VAR 0 4
11880: ARRAY
11881: PUSH
11882: LD_VAR 0 2
11886: PUSH
11887: LD_VAR 0 4
11891: ARRAY
11892: NONEQUAL
11893: IFFALSE 11905
// begin result := false ;
11895: LD_ADDR_VAR 0 3
11899: PUSH
11900: LD_INT 0
11902: ST_TO_ADDR
// break ;
11903: GO 11907
// end ;
11905: GO 11868
11907: POP
11908: POP
// end else
11909: GO 11919
// result := false ;
11911: LD_ADDR_VAR 0 3
11915: PUSH
11916: LD_INT 0
11918: ST_TO_ADDR
// end ;
11919: LD_VAR 0 3
11923: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11924: LD_INT 0
11926: PPUSH
11927: PPUSH
// if not array1 or not array2 then
11928: LD_VAR 0 1
11932: NOT
11933: PUSH
11934: LD_VAR 0 2
11938: NOT
11939: OR
11940: IFFALSE 11944
// exit ;
11942: GO 12008
// result := true ;
11944: LD_ADDR_VAR 0 3
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// for i = 1 to array1 do
11952: LD_ADDR_VAR 0 4
11956: PUSH
11957: DOUBLE
11958: LD_INT 1
11960: DEC
11961: ST_TO_ADDR
11962: LD_VAR 0 1
11966: PUSH
11967: FOR_TO
11968: IFFALSE 12006
// if array1 [ i ] <> array2 [ i ] then
11970: LD_VAR 0 1
11974: PUSH
11975: LD_VAR 0 4
11979: ARRAY
11980: PUSH
11981: LD_VAR 0 2
11985: PUSH
11986: LD_VAR 0 4
11990: ARRAY
11991: NONEQUAL
11992: IFFALSE 12004
// begin result := false ;
11994: LD_ADDR_VAR 0 3
11998: PUSH
11999: LD_INT 0
12001: ST_TO_ADDR
// break ;
12002: GO 12006
// end ;
12004: GO 11967
12006: POP
12007: POP
// end ;
12008: LD_VAR 0 3
12012: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12013: LD_INT 0
12015: PPUSH
12016: PPUSH
12017: PPUSH
// pom := GetBase ( fac ) ;
12018: LD_ADDR_VAR 0 5
12022: PUSH
12023: LD_VAR 0 1
12027: PPUSH
12028: CALL_OW 274
12032: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12033: LD_ADDR_VAR 0 4
12037: PUSH
12038: LD_VAR 0 2
12042: PUSH
12043: LD_INT 1
12045: ARRAY
12046: PPUSH
12047: LD_VAR 0 2
12051: PUSH
12052: LD_INT 2
12054: ARRAY
12055: PPUSH
12056: LD_VAR 0 2
12060: PUSH
12061: LD_INT 3
12063: ARRAY
12064: PPUSH
12065: LD_VAR 0 2
12069: PUSH
12070: LD_INT 4
12072: ARRAY
12073: PPUSH
12074: CALL_OW 449
12078: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12079: LD_ADDR_VAR 0 3
12083: PUSH
12084: LD_VAR 0 5
12088: PPUSH
12089: LD_INT 1
12091: PPUSH
12092: CALL_OW 275
12096: PUSH
12097: LD_VAR 0 4
12101: PUSH
12102: LD_INT 1
12104: ARRAY
12105: GREATEREQUAL
12106: PUSH
12107: LD_VAR 0 5
12111: PPUSH
12112: LD_INT 2
12114: PPUSH
12115: CALL_OW 275
12119: PUSH
12120: LD_VAR 0 4
12124: PUSH
12125: LD_INT 2
12127: ARRAY
12128: GREATEREQUAL
12129: AND
12130: PUSH
12131: LD_VAR 0 5
12135: PPUSH
12136: LD_INT 3
12138: PPUSH
12139: CALL_OW 275
12143: PUSH
12144: LD_VAR 0 4
12148: PUSH
12149: LD_INT 3
12151: ARRAY
12152: GREATEREQUAL
12153: AND
12154: ST_TO_ADDR
// end ;
12155: LD_VAR 0 3
12159: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12160: LD_INT 0
12162: PPUSH
12163: PPUSH
12164: PPUSH
12165: PPUSH
// pom := GetBase ( building ) ;
12166: LD_ADDR_VAR 0 3
12170: PUSH
12171: LD_VAR 0 1
12175: PPUSH
12176: CALL_OW 274
12180: ST_TO_ADDR
// if not pom then
12181: LD_VAR 0 3
12185: NOT
12186: IFFALSE 12190
// exit ;
12188: GO 12360
// btype := GetBType ( building ) ;
12190: LD_ADDR_VAR 0 5
12194: PUSH
12195: LD_VAR 0 1
12199: PPUSH
12200: CALL_OW 266
12204: ST_TO_ADDR
// if btype = b_armoury then
12205: LD_VAR 0 5
12209: PUSH
12210: LD_INT 4
12212: EQUAL
12213: IFFALSE 12223
// btype := b_barracks ;
12215: LD_ADDR_VAR 0 5
12219: PUSH
12220: LD_INT 5
12222: ST_TO_ADDR
// if btype = b_depot then
12223: LD_VAR 0 5
12227: PUSH
12228: LD_INT 0
12230: EQUAL
12231: IFFALSE 12241
// btype := b_warehouse ;
12233: LD_ADDR_VAR 0 5
12237: PUSH
12238: LD_INT 1
12240: ST_TO_ADDR
// if btype = b_workshop then
12241: LD_VAR 0 5
12245: PUSH
12246: LD_INT 2
12248: EQUAL
12249: IFFALSE 12259
// btype := b_factory ;
12251: LD_ADDR_VAR 0 5
12255: PUSH
12256: LD_INT 3
12258: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12259: LD_ADDR_VAR 0 4
12263: PUSH
12264: LD_VAR 0 5
12268: PPUSH
12269: LD_VAR 0 1
12273: PPUSH
12274: CALL_OW 248
12278: PPUSH
12279: CALL_OW 450
12283: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12284: LD_ADDR_VAR 0 2
12288: PUSH
12289: LD_VAR 0 3
12293: PPUSH
12294: LD_INT 1
12296: PPUSH
12297: CALL_OW 275
12301: PUSH
12302: LD_VAR 0 4
12306: PUSH
12307: LD_INT 1
12309: ARRAY
12310: GREATEREQUAL
12311: PUSH
12312: LD_VAR 0 3
12316: PPUSH
12317: LD_INT 2
12319: PPUSH
12320: CALL_OW 275
12324: PUSH
12325: LD_VAR 0 4
12329: PUSH
12330: LD_INT 2
12332: ARRAY
12333: GREATEREQUAL
12334: AND
12335: PUSH
12336: LD_VAR 0 3
12340: PPUSH
12341: LD_INT 3
12343: PPUSH
12344: CALL_OW 275
12348: PUSH
12349: LD_VAR 0 4
12353: PUSH
12354: LD_INT 3
12356: ARRAY
12357: GREATEREQUAL
12358: AND
12359: ST_TO_ADDR
// end ;
12360: LD_VAR 0 2
12364: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12365: LD_INT 0
12367: PPUSH
12368: PPUSH
12369: PPUSH
// pom := GetBase ( building ) ;
12370: LD_ADDR_VAR 0 4
12374: PUSH
12375: LD_VAR 0 1
12379: PPUSH
12380: CALL_OW 274
12384: ST_TO_ADDR
// if not pom then
12385: LD_VAR 0 4
12389: NOT
12390: IFFALSE 12394
// exit ;
12392: GO 12495
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12394: LD_ADDR_VAR 0 5
12398: PUSH
12399: LD_VAR 0 2
12403: PPUSH
12404: LD_VAR 0 1
12408: PPUSH
12409: CALL_OW 248
12413: PPUSH
12414: CALL_OW 450
12418: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12419: LD_ADDR_VAR 0 3
12423: PUSH
12424: LD_VAR 0 4
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 275
12436: PUSH
12437: LD_VAR 0 5
12441: PUSH
12442: LD_INT 1
12444: ARRAY
12445: GREATEREQUAL
12446: PUSH
12447: LD_VAR 0 4
12451: PPUSH
12452: LD_INT 2
12454: PPUSH
12455: CALL_OW 275
12459: PUSH
12460: LD_VAR 0 5
12464: PUSH
12465: LD_INT 2
12467: ARRAY
12468: GREATEREQUAL
12469: AND
12470: PUSH
12471: LD_VAR 0 4
12475: PPUSH
12476: LD_INT 3
12478: PPUSH
12479: CALL_OW 275
12483: PUSH
12484: LD_VAR 0 5
12488: PUSH
12489: LD_INT 3
12491: ARRAY
12492: GREATEREQUAL
12493: AND
12494: ST_TO_ADDR
// end ;
12495: LD_VAR 0 3
12499: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12500: LD_INT 0
12502: PPUSH
12503: PPUSH
12504: PPUSH
12505: PPUSH
12506: PPUSH
12507: PPUSH
12508: PPUSH
12509: PPUSH
12510: PPUSH
12511: PPUSH
12512: PPUSH
// result := false ;
12513: LD_ADDR_VAR 0 8
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12521: LD_VAR 0 5
12525: NOT
12526: PUSH
12527: LD_VAR 0 1
12531: NOT
12532: OR
12533: PUSH
12534: LD_VAR 0 2
12538: NOT
12539: OR
12540: PUSH
12541: LD_VAR 0 3
12545: NOT
12546: OR
12547: IFFALSE 12551
// exit ;
12549: GO 13365
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12551: LD_ADDR_VAR 0 14
12555: PUSH
12556: LD_VAR 0 1
12560: PPUSH
12561: LD_VAR 0 2
12565: PPUSH
12566: LD_VAR 0 3
12570: PPUSH
12571: LD_VAR 0 4
12575: PPUSH
12576: LD_VAR 0 5
12580: PUSH
12581: LD_INT 1
12583: ARRAY
12584: PPUSH
12585: CALL_OW 248
12589: PPUSH
12590: LD_INT 0
12592: PPUSH
12593: CALL 14598 0 6
12597: ST_TO_ADDR
// if not hexes then
12598: LD_VAR 0 14
12602: NOT
12603: IFFALSE 12607
// exit ;
12605: GO 13365
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12607: LD_ADDR_VAR 0 17
12611: PUSH
12612: LD_VAR 0 5
12616: PPUSH
12617: LD_INT 22
12619: PUSH
12620: LD_VAR 0 13
12624: PPUSH
12625: CALL_OW 255
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: LD_INT 2
12636: PUSH
12637: LD_INT 30
12639: PUSH
12640: LD_INT 0
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 30
12649: PUSH
12650: LD_INT 1
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 72
12670: ST_TO_ADDR
// for i = 1 to hexes do
12671: LD_ADDR_VAR 0 9
12675: PUSH
12676: DOUBLE
12677: LD_INT 1
12679: DEC
12680: ST_TO_ADDR
12681: LD_VAR 0 14
12685: PUSH
12686: FOR_TO
12687: IFFALSE 13363
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12689: LD_ADDR_VAR 0 13
12693: PUSH
12694: LD_VAR 0 14
12698: PUSH
12699: LD_VAR 0 9
12703: ARRAY
12704: PUSH
12705: LD_INT 1
12707: ARRAY
12708: PPUSH
12709: LD_VAR 0 14
12713: PUSH
12714: LD_VAR 0 9
12718: ARRAY
12719: PUSH
12720: LD_INT 2
12722: ARRAY
12723: PPUSH
12724: CALL_OW 428
12728: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12729: LD_VAR 0 14
12733: PUSH
12734: LD_VAR 0 9
12738: ARRAY
12739: PUSH
12740: LD_INT 1
12742: ARRAY
12743: PPUSH
12744: LD_VAR 0 14
12748: PUSH
12749: LD_VAR 0 9
12753: ARRAY
12754: PUSH
12755: LD_INT 2
12757: ARRAY
12758: PPUSH
12759: CALL_OW 351
12763: PUSH
12764: LD_VAR 0 14
12768: PUSH
12769: LD_VAR 0 9
12773: ARRAY
12774: PUSH
12775: LD_INT 1
12777: ARRAY
12778: PPUSH
12779: LD_VAR 0 14
12783: PUSH
12784: LD_VAR 0 9
12788: ARRAY
12789: PUSH
12790: LD_INT 2
12792: ARRAY
12793: PPUSH
12794: CALL_OW 488
12798: NOT
12799: OR
12800: PUSH
12801: LD_VAR 0 13
12805: PPUSH
12806: CALL_OW 247
12810: PUSH
12811: LD_INT 3
12813: EQUAL
12814: OR
12815: IFFALSE 12821
// exit ;
12817: POP
12818: POP
12819: GO 13365
// if not tmp then
12821: LD_VAR 0 13
12825: NOT
12826: IFFALSE 12830
// continue ;
12828: GO 12686
// result := true ;
12830: LD_ADDR_VAR 0 8
12834: PUSH
12835: LD_INT 1
12837: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12838: LD_VAR 0 6
12842: PUSH
12843: LD_VAR 0 13
12847: PPUSH
12848: CALL_OW 247
12852: PUSH
12853: LD_INT 2
12855: EQUAL
12856: AND
12857: PUSH
12858: LD_VAR 0 13
12862: PPUSH
12863: CALL_OW 263
12867: PUSH
12868: LD_INT 1
12870: EQUAL
12871: AND
12872: IFFALSE 13036
// begin if IsDrivenBy ( tmp ) then
12874: LD_VAR 0 13
12878: PPUSH
12879: CALL_OW 311
12883: IFFALSE 12887
// continue ;
12885: GO 12686
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12887: LD_VAR 0 6
12891: PPUSH
12892: LD_INT 3
12894: PUSH
12895: LD_INT 60
12897: PUSH
12898: EMPTY
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 3
12907: PUSH
12908: LD_INT 55
12910: PUSH
12911: EMPTY
12912: LIST
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PPUSH
12922: CALL_OW 72
12926: IFFALSE 13034
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12928: LD_ADDR_VAR 0 18
12932: PUSH
12933: LD_VAR 0 6
12937: PPUSH
12938: LD_INT 3
12940: PUSH
12941: LD_INT 60
12943: PUSH
12944: EMPTY
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 3
12953: PUSH
12954: LD_INT 55
12956: PUSH
12957: EMPTY
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PPUSH
12968: CALL_OW 72
12972: PUSH
12973: LD_INT 1
12975: ARRAY
12976: ST_TO_ADDR
// if IsInUnit ( driver ) then
12977: LD_VAR 0 18
12981: PPUSH
12982: CALL_OW 310
12986: IFFALSE 12997
// ComExit ( driver ) ;
12988: LD_VAR 0 18
12992: PPUSH
12993: CALL 38378 0 1
// AddComEnterUnit ( driver , tmp ) ;
12997: LD_VAR 0 18
13001: PPUSH
13002: LD_VAR 0 13
13006: PPUSH
13007: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13011: LD_VAR 0 18
13015: PPUSH
13016: LD_VAR 0 7
13020: PPUSH
13021: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13025: LD_VAR 0 18
13029: PPUSH
13030: CALL_OW 181
// end ; continue ;
13034: GO 12686
// end ; if not cleaners or not tmp in cleaners then
13036: LD_VAR 0 6
13040: NOT
13041: PUSH
13042: LD_VAR 0 13
13046: PUSH
13047: LD_VAR 0 6
13051: IN
13052: NOT
13053: OR
13054: IFFALSE 13361
// begin if dep then
13056: LD_VAR 0 17
13060: IFFALSE 13196
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13062: LD_ADDR_VAR 0 16
13066: PUSH
13067: LD_VAR 0 17
13071: PUSH
13072: LD_INT 1
13074: ARRAY
13075: PPUSH
13076: CALL_OW 250
13080: PPUSH
13081: LD_VAR 0 17
13085: PUSH
13086: LD_INT 1
13088: ARRAY
13089: PPUSH
13090: CALL_OW 254
13094: PPUSH
13095: LD_INT 5
13097: PPUSH
13098: CALL_OW 272
13102: PUSH
13103: LD_VAR 0 17
13107: PUSH
13108: LD_INT 1
13110: ARRAY
13111: PPUSH
13112: CALL_OW 251
13116: PPUSH
13117: LD_VAR 0 17
13121: PUSH
13122: LD_INT 1
13124: ARRAY
13125: PPUSH
13126: CALL_OW 254
13130: PPUSH
13131: LD_INT 5
13133: PPUSH
13134: CALL_OW 273
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13143: LD_VAR 0 16
13147: PUSH
13148: LD_INT 1
13150: ARRAY
13151: PPUSH
13152: LD_VAR 0 16
13156: PUSH
13157: LD_INT 2
13159: ARRAY
13160: PPUSH
13161: CALL_OW 488
13165: IFFALSE 13196
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13167: LD_VAR 0 13
13171: PPUSH
13172: LD_VAR 0 16
13176: PUSH
13177: LD_INT 1
13179: ARRAY
13180: PPUSH
13181: LD_VAR 0 16
13185: PUSH
13186: LD_INT 2
13188: ARRAY
13189: PPUSH
13190: CALL_OW 111
// continue ;
13194: GO 12686
// end ; end ; r := GetDir ( tmp ) ;
13196: LD_ADDR_VAR 0 15
13200: PUSH
13201: LD_VAR 0 13
13205: PPUSH
13206: CALL_OW 254
13210: ST_TO_ADDR
// if r = 5 then
13211: LD_VAR 0 15
13215: PUSH
13216: LD_INT 5
13218: EQUAL
13219: IFFALSE 13229
// r := 0 ;
13221: LD_ADDR_VAR 0 15
13225: PUSH
13226: LD_INT 0
13228: ST_TO_ADDR
// for j = r to 5 do
13229: LD_ADDR_VAR 0 10
13233: PUSH
13234: DOUBLE
13235: LD_VAR 0 15
13239: DEC
13240: ST_TO_ADDR
13241: LD_INT 5
13243: PUSH
13244: FOR_TO
13245: IFFALSE 13359
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13247: LD_ADDR_VAR 0 11
13251: PUSH
13252: LD_VAR 0 13
13256: PPUSH
13257: CALL_OW 250
13261: PPUSH
13262: LD_VAR 0 10
13266: PPUSH
13267: LD_INT 2
13269: PPUSH
13270: CALL_OW 272
13274: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13275: LD_ADDR_VAR 0 12
13279: PUSH
13280: LD_VAR 0 13
13284: PPUSH
13285: CALL_OW 251
13289: PPUSH
13290: LD_VAR 0 10
13294: PPUSH
13295: LD_INT 2
13297: PPUSH
13298: CALL_OW 273
13302: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13303: LD_VAR 0 11
13307: PPUSH
13308: LD_VAR 0 12
13312: PPUSH
13313: CALL_OW 488
13317: PUSH
13318: LD_VAR 0 11
13322: PPUSH
13323: LD_VAR 0 12
13327: PPUSH
13328: CALL_OW 428
13332: NOT
13333: AND
13334: IFFALSE 13357
// begin ComMoveXY ( tmp , _x , _y ) ;
13336: LD_VAR 0 13
13340: PPUSH
13341: LD_VAR 0 11
13345: PPUSH
13346: LD_VAR 0 12
13350: PPUSH
13351: CALL_OW 111
// break ;
13355: GO 13359
// end ; end ;
13357: GO 13244
13359: POP
13360: POP
// end ; end ;
13361: GO 12686
13363: POP
13364: POP
// end ;
13365: LD_VAR 0 8
13369: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13370: LD_INT 0
13372: PPUSH
// result := true ;
13373: LD_ADDR_VAR 0 3
13377: PUSH
13378: LD_INT 1
13380: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13381: LD_VAR 0 2
13385: PUSH
13386: LD_INT 24
13388: DOUBLE
13389: EQUAL
13390: IFTRUE 13400
13392: LD_INT 33
13394: DOUBLE
13395: EQUAL
13396: IFTRUE 13400
13398: GO 13425
13400: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13401: LD_ADDR_VAR 0 3
13405: PUSH
13406: LD_INT 32
13408: PPUSH
13409: LD_VAR 0 1
13413: PPUSH
13414: CALL_OW 321
13418: PUSH
13419: LD_INT 2
13421: EQUAL
13422: ST_TO_ADDR
13423: GO 13741
13425: LD_INT 20
13427: DOUBLE
13428: EQUAL
13429: IFTRUE 13433
13431: GO 13458
13433: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13434: LD_ADDR_VAR 0 3
13438: PUSH
13439: LD_INT 6
13441: PPUSH
13442: LD_VAR 0 1
13446: PPUSH
13447: CALL_OW 321
13451: PUSH
13452: LD_INT 2
13454: EQUAL
13455: ST_TO_ADDR
13456: GO 13741
13458: LD_INT 22
13460: DOUBLE
13461: EQUAL
13462: IFTRUE 13472
13464: LD_INT 36
13466: DOUBLE
13467: EQUAL
13468: IFTRUE 13472
13470: GO 13497
13472: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13473: LD_ADDR_VAR 0 3
13477: PUSH
13478: LD_INT 15
13480: PPUSH
13481: LD_VAR 0 1
13485: PPUSH
13486: CALL_OW 321
13490: PUSH
13491: LD_INT 2
13493: EQUAL
13494: ST_TO_ADDR
13495: GO 13741
13497: LD_INT 30
13499: DOUBLE
13500: EQUAL
13501: IFTRUE 13505
13503: GO 13530
13505: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13506: LD_ADDR_VAR 0 3
13510: PUSH
13511: LD_INT 20
13513: PPUSH
13514: LD_VAR 0 1
13518: PPUSH
13519: CALL_OW 321
13523: PUSH
13524: LD_INT 2
13526: EQUAL
13527: ST_TO_ADDR
13528: GO 13741
13530: LD_INT 28
13532: DOUBLE
13533: EQUAL
13534: IFTRUE 13544
13536: LD_INT 21
13538: DOUBLE
13539: EQUAL
13540: IFTRUE 13544
13542: GO 13569
13544: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: LD_INT 21
13552: PPUSH
13553: LD_VAR 0 1
13557: PPUSH
13558: CALL_OW 321
13562: PUSH
13563: LD_INT 2
13565: EQUAL
13566: ST_TO_ADDR
13567: GO 13741
13569: LD_INT 16
13571: DOUBLE
13572: EQUAL
13573: IFTRUE 13577
13575: GO 13602
13577: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13578: LD_ADDR_VAR 0 3
13582: PUSH
13583: LD_INT 84
13585: PPUSH
13586: LD_VAR 0 1
13590: PPUSH
13591: CALL_OW 321
13595: PUSH
13596: LD_INT 2
13598: EQUAL
13599: ST_TO_ADDR
13600: GO 13741
13602: LD_INT 19
13604: DOUBLE
13605: EQUAL
13606: IFTRUE 13616
13608: LD_INT 23
13610: DOUBLE
13611: EQUAL
13612: IFTRUE 13616
13614: GO 13641
13616: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13617: LD_ADDR_VAR 0 3
13621: PUSH
13622: LD_INT 83
13624: PPUSH
13625: LD_VAR 0 1
13629: PPUSH
13630: CALL_OW 321
13634: PUSH
13635: LD_INT 2
13637: EQUAL
13638: ST_TO_ADDR
13639: GO 13741
13641: LD_INT 17
13643: DOUBLE
13644: EQUAL
13645: IFTRUE 13649
13647: GO 13674
13649: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13650: LD_ADDR_VAR 0 3
13654: PUSH
13655: LD_INT 39
13657: PPUSH
13658: LD_VAR 0 1
13662: PPUSH
13663: CALL_OW 321
13667: PUSH
13668: LD_INT 2
13670: EQUAL
13671: ST_TO_ADDR
13672: GO 13741
13674: LD_INT 18
13676: DOUBLE
13677: EQUAL
13678: IFTRUE 13682
13680: GO 13707
13682: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13683: LD_ADDR_VAR 0 3
13687: PUSH
13688: LD_INT 40
13690: PPUSH
13691: LD_VAR 0 1
13695: PPUSH
13696: CALL_OW 321
13700: PUSH
13701: LD_INT 2
13703: EQUAL
13704: ST_TO_ADDR
13705: GO 13741
13707: LD_INT 27
13709: DOUBLE
13710: EQUAL
13711: IFTRUE 13715
13713: GO 13740
13715: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13716: LD_ADDR_VAR 0 3
13720: PUSH
13721: LD_INT 35
13723: PPUSH
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 321
13733: PUSH
13734: LD_INT 2
13736: EQUAL
13737: ST_TO_ADDR
13738: GO 13741
13740: POP
// end ;
13741: LD_VAR 0 3
13745: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13746: LD_INT 0
13748: PPUSH
13749: PPUSH
13750: PPUSH
13751: PPUSH
13752: PPUSH
13753: PPUSH
13754: PPUSH
13755: PPUSH
13756: PPUSH
13757: PPUSH
13758: PPUSH
// result := false ;
13759: LD_ADDR_VAR 0 6
13763: PUSH
13764: LD_INT 0
13766: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13767: LD_VAR 0 1
13771: NOT
13772: PUSH
13773: LD_VAR 0 1
13777: PPUSH
13778: CALL_OW 266
13782: PUSH
13783: LD_INT 0
13785: PUSH
13786: LD_INT 1
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: IN
13793: NOT
13794: OR
13795: PUSH
13796: LD_VAR 0 2
13800: NOT
13801: OR
13802: PUSH
13803: LD_VAR 0 5
13807: PUSH
13808: LD_INT 0
13810: PUSH
13811: LD_INT 1
13813: PUSH
13814: LD_INT 2
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: LD_INT 4
13822: PUSH
13823: LD_INT 5
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: IN
13834: NOT
13835: OR
13836: PUSH
13837: LD_VAR 0 3
13841: PPUSH
13842: LD_VAR 0 4
13846: PPUSH
13847: CALL_OW 488
13851: NOT
13852: OR
13853: IFFALSE 13857
// exit ;
13855: GO 14593
// side := GetSide ( depot ) ;
13857: LD_ADDR_VAR 0 9
13861: PUSH
13862: LD_VAR 0 1
13866: PPUSH
13867: CALL_OW 255
13871: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13872: LD_VAR 0 9
13876: PPUSH
13877: LD_VAR 0 2
13881: PPUSH
13882: CALL 13370 0 2
13886: NOT
13887: IFFALSE 13891
// exit ;
13889: GO 14593
// pom := GetBase ( depot ) ;
13891: LD_ADDR_VAR 0 10
13895: PUSH
13896: LD_VAR 0 1
13900: PPUSH
13901: CALL_OW 274
13905: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13906: LD_ADDR_VAR 0 11
13910: PUSH
13911: LD_VAR 0 2
13915: PPUSH
13916: LD_VAR 0 1
13920: PPUSH
13921: CALL_OW 248
13925: PPUSH
13926: CALL_OW 450
13930: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13931: LD_VAR 0 10
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 275
13943: PUSH
13944: LD_VAR 0 11
13948: PUSH
13949: LD_INT 1
13951: ARRAY
13952: GREATEREQUAL
13953: PUSH
13954: LD_VAR 0 10
13958: PPUSH
13959: LD_INT 2
13961: PPUSH
13962: CALL_OW 275
13966: PUSH
13967: LD_VAR 0 11
13971: PUSH
13972: LD_INT 2
13974: ARRAY
13975: GREATEREQUAL
13976: AND
13977: PUSH
13978: LD_VAR 0 10
13982: PPUSH
13983: LD_INT 3
13985: PPUSH
13986: CALL_OW 275
13990: PUSH
13991: LD_VAR 0 11
13995: PUSH
13996: LD_INT 3
13998: ARRAY
13999: GREATEREQUAL
14000: AND
14001: NOT
14002: IFFALSE 14006
// exit ;
14004: GO 14593
// if GetBType ( depot ) = b_depot then
14006: LD_VAR 0 1
14010: PPUSH
14011: CALL_OW 266
14015: PUSH
14016: LD_INT 0
14018: EQUAL
14019: IFFALSE 14031
// dist := 28 else
14021: LD_ADDR_VAR 0 14
14025: PUSH
14026: LD_INT 28
14028: ST_TO_ADDR
14029: GO 14039
// dist := 36 ;
14031: LD_ADDR_VAR 0 14
14035: PUSH
14036: LD_INT 36
14038: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14039: LD_VAR 0 1
14043: PPUSH
14044: LD_VAR 0 3
14048: PPUSH
14049: LD_VAR 0 4
14053: PPUSH
14054: CALL_OW 297
14058: PUSH
14059: LD_VAR 0 14
14063: GREATER
14064: IFFALSE 14068
// exit ;
14066: GO 14593
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14068: LD_ADDR_VAR 0 12
14072: PUSH
14073: LD_VAR 0 2
14077: PPUSH
14078: LD_VAR 0 3
14082: PPUSH
14083: LD_VAR 0 4
14087: PPUSH
14088: LD_VAR 0 5
14092: PPUSH
14093: LD_VAR 0 1
14097: PPUSH
14098: CALL_OW 248
14102: PPUSH
14103: LD_INT 0
14105: PPUSH
14106: CALL 14598 0 6
14110: ST_TO_ADDR
// if not hexes then
14111: LD_VAR 0 12
14115: NOT
14116: IFFALSE 14120
// exit ;
14118: GO 14593
// hex := GetHexInfo ( x , y ) ;
14120: LD_ADDR_VAR 0 15
14124: PUSH
14125: LD_VAR 0 3
14129: PPUSH
14130: LD_VAR 0 4
14134: PPUSH
14135: CALL_OW 546
14139: ST_TO_ADDR
// if hex [ 1 ] then
14140: LD_VAR 0 15
14144: PUSH
14145: LD_INT 1
14147: ARRAY
14148: IFFALSE 14152
// exit ;
14150: GO 14593
// height := hex [ 2 ] ;
14152: LD_ADDR_VAR 0 13
14156: PUSH
14157: LD_VAR 0 15
14161: PUSH
14162: LD_INT 2
14164: ARRAY
14165: ST_TO_ADDR
// for i = 1 to hexes do
14166: LD_ADDR_VAR 0 7
14170: PUSH
14171: DOUBLE
14172: LD_INT 1
14174: DEC
14175: ST_TO_ADDR
14176: LD_VAR 0 12
14180: PUSH
14181: FOR_TO
14182: IFFALSE 14512
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14184: LD_VAR 0 12
14188: PUSH
14189: LD_VAR 0 7
14193: ARRAY
14194: PUSH
14195: LD_INT 1
14197: ARRAY
14198: PPUSH
14199: LD_VAR 0 12
14203: PUSH
14204: LD_VAR 0 7
14208: ARRAY
14209: PUSH
14210: LD_INT 2
14212: ARRAY
14213: PPUSH
14214: CALL_OW 488
14218: NOT
14219: PUSH
14220: LD_VAR 0 12
14224: PUSH
14225: LD_VAR 0 7
14229: ARRAY
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: LD_VAR 0 12
14239: PUSH
14240: LD_VAR 0 7
14244: ARRAY
14245: PUSH
14246: LD_INT 2
14248: ARRAY
14249: PPUSH
14250: CALL_OW 428
14254: PUSH
14255: LD_INT 0
14257: GREATER
14258: OR
14259: PUSH
14260: LD_VAR 0 12
14264: PUSH
14265: LD_VAR 0 7
14269: ARRAY
14270: PUSH
14271: LD_INT 1
14273: ARRAY
14274: PPUSH
14275: LD_VAR 0 12
14279: PUSH
14280: LD_VAR 0 7
14284: ARRAY
14285: PUSH
14286: LD_INT 2
14288: ARRAY
14289: PPUSH
14290: CALL_OW 351
14294: OR
14295: IFFALSE 14301
// exit ;
14297: POP
14298: POP
14299: GO 14593
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14301: LD_ADDR_VAR 0 8
14305: PUSH
14306: LD_VAR 0 12
14310: PUSH
14311: LD_VAR 0 7
14315: ARRAY
14316: PUSH
14317: LD_INT 1
14319: ARRAY
14320: PPUSH
14321: LD_VAR 0 12
14325: PUSH
14326: LD_VAR 0 7
14330: ARRAY
14331: PUSH
14332: LD_INT 2
14334: ARRAY
14335: PPUSH
14336: CALL_OW 546
14340: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14341: LD_VAR 0 8
14345: PUSH
14346: LD_INT 1
14348: ARRAY
14349: PUSH
14350: LD_VAR 0 8
14354: PUSH
14355: LD_INT 2
14357: ARRAY
14358: PUSH
14359: LD_VAR 0 13
14363: PUSH
14364: LD_INT 2
14366: PLUS
14367: GREATER
14368: OR
14369: PUSH
14370: LD_VAR 0 8
14374: PUSH
14375: LD_INT 2
14377: ARRAY
14378: PUSH
14379: LD_VAR 0 13
14383: PUSH
14384: LD_INT 2
14386: MINUS
14387: LESS
14388: OR
14389: PUSH
14390: LD_VAR 0 8
14394: PUSH
14395: LD_INT 3
14397: ARRAY
14398: PUSH
14399: LD_INT 0
14401: PUSH
14402: LD_INT 8
14404: PUSH
14405: LD_INT 9
14407: PUSH
14408: LD_INT 10
14410: PUSH
14411: LD_INT 11
14413: PUSH
14414: LD_INT 12
14416: PUSH
14417: LD_INT 13
14419: PUSH
14420: LD_INT 16
14422: PUSH
14423: LD_INT 17
14425: PUSH
14426: LD_INT 18
14428: PUSH
14429: LD_INT 19
14431: PUSH
14432: LD_INT 20
14434: PUSH
14435: LD_INT 21
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: IN
14453: NOT
14454: OR
14455: PUSH
14456: LD_VAR 0 8
14460: PUSH
14461: LD_INT 5
14463: ARRAY
14464: NOT
14465: OR
14466: PUSH
14467: LD_VAR 0 8
14471: PUSH
14472: LD_INT 6
14474: ARRAY
14475: PUSH
14476: LD_INT 1
14478: PUSH
14479: LD_INT 2
14481: PUSH
14482: LD_INT 7
14484: PUSH
14485: LD_INT 9
14487: PUSH
14488: LD_INT 10
14490: PUSH
14491: LD_INT 11
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: IN
14502: NOT
14503: OR
14504: IFFALSE 14510
// exit ;
14506: POP
14507: POP
14508: GO 14593
// end ;
14510: GO 14181
14512: POP
14513: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14514: LD_VAR 0 9
14518: PPUSH
14519: LD_VAR 0 3
14523: PPUSH
14524: LD_VAR 0 4
14528: PPUSH
14529: LD_INT 20
14531: PPUSH
14532: CALL 6545 0 4
14536: PUSH
14537: LD_INT 4
14539: ARRAY
14540: IFFALSE 14544
// exit ;
14542: GO 14593
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14544: LD_VAR 0 2
14548: PUSH
14549: LD_INT 29
14551: PUSH
14552: LD_INT 30
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: IN
14559: PUSH
14560: LD_VAR 0 3
14564: PPUSH
14565: LD_VAR 0 4
14569: PPUSH
14570: LD_VAR 0 9
14574: PPUSH
14575: CALL_OW 440
14579: NOT
14580: AND
14581: IFFALSE 14585
// exit ;
14583: GO 14593
// result := true ;
14585: LD_ADDR_VAR 0 6
14589: PUSH
14590: LD_INT 1
14592: ST_TO_ADDR
// end ;
14593: LD_VAR 0 6
14597: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14598: LD_INT 0
14600: PPUSH
14601: PPUSH
14602: PPUSH
14603: PPUSH
14604: PPUSH
14605: PPUSH
14606: PPUSH
14607: PPUSH
14608: PPUSH
14609: PPUSH
14610: PPUSH
14611: PPUSH
14612: PPUSH
14613: PPUSH
14614: PPUSH
14615: PPUSH
14616: PPUSH
14617: PPUSH
14618: PPUSH
14619: PPUSH
14620: PPUSH
14621: PPUSH
14622: PPUSH
14623: PPUSH
14624: PPUSH
14625: PPUSH
14626: PPUSH
14627: PPUSH
14628: PPUSH
14629: PPUSH
14630: PPUSH
14631: PPUSH
14632: PPUSH
14633: PPUSH
14634: PPUSH
14635: PPUSH
14636: PPUSH
14637: PPUSH
14638: PPUSH
14639: PPUSH
14640: PPUSH
14641: PPUSH
14642: PPUSH
14643: PPUSH
14644: PPUSH
14645: PPUSH
14646: PPUSH
14647: PPUSH
14648: PPUSH
14649: PPUSH
14650: PPUSH
14651: PPUSH
14652: PPUSH
14653: PPUSH
14654: PPUSH
14655: PPUSH
14656: PPUSH
14657: PPUSH
// result = [ ] ;
14658: LD_ADDR_VAR 0 7
14662: PUSH
14663: EMPTY
14664: ST_TO_ADDR
// temp_list = [ ] ;
14665: LD_ADDR_VAR 0 9
14669: PUSH
14670: EMPTY
14671: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14672: LD_VAR 0 4
14676: PUSH
14677: LD_INT 0
14679: PUSH
14680: LD_INT 1
14682: PUSH
14683: LD_INT 2
14685: PUSH
14686: LD_INT 3
14688: PUSH
14689: LD_INT 4
14691: PUSH
14692: LD_INT 5
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: IN
14703: NOT
14704: PUSH
14705: LD_VAR 0 1
14709: PUSH
14710: LD_INT 0
14712: PUSH
14713: LD_INT 1
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: IN
14720: PUSH
14721: LD_VAR 0 5
14725: PUSH
14726: LD_INT 1
14728: PUSH
14729: LD_INT 2
14731: PUSH
14732: LD_INT 3
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: LIST
14739: IN
14740: NOT
14741: AND
14742: OR
14743: IFFALSE 14747
// exit ;
14745: GO 33138
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14747: LD_VAR 0 1
14751: PUSH
14752: LD_INT 6
14754: PUSH
14755: LD_INT 7
14757: PUSH
14758: LD_INT 8
14760: PUSH
14761: LD_INT 13
14763: PUSH
14764: LD_INT 12
14766: PUSH
14767: LD_INT 15
14769: PUSH
14770: LD_INT 11
14772: PUSH
14773: LD_INT 14
14775: PUSH
14776: LD_INT 10
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: IN
14790: IFFALSE 14800
// btype = b_lab ;
14792: LD_ADDR_VAR 0 1
14796: PUSH
14797: LD_INT 6
14799: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14800: LD_VAR 0 6
14804: PUSH
14805: LD_INT 0
14807: PUSH
14808: LD_INT 1
14810: PUSH
14811: LD_INT 2
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: IN
14819: NOT
14820: PUSH
14821: LD_VAR 0 1
14825: PUSH
14826: LD_INT 0
14828: PUSH
14829: LD_INT 1
14831: PUSH
14832: LD_INT 2
14834: PUSH
14835: LD_INT 3
14837: PUSH
14838: LD_INT 6
14840: PUSH
14841: LD_INT 36
14843: PUSH
14844: LD_INT 4
14846: PUSH
14847: LD_INT 5
14849: PUSH
14850: LD_INT 31
14852: PUSH
14853: LD_INT 32
14855: PUSH
14856: LD_INT 33
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: IN
14872: NOT
14873: PUSH
14874: LD_VAR 0 6
14878: PUSH
14879: LD_INT 1
14881: EQUAL
14882: AND
14883: OR
14884: PUSH
14885: LD_VAR 0 1
14889: PUSH
14890: LD_INT 2
14892: PUSH
14893: LD_INT 3
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: IN
14900: NOT
14901: PUSH
14902: LD_VAR 0 6
14906: PUSH
14907: LD_INT 2
14909: EQUAL
14910: AND
14911: OR
14912: IFFALSE 14922
// mode = 0 ;
14914: LD_ADDR_VAR 0 6
14918: PUSH
14919: LD_INT 0
14921: ST_TO_ADDR
// case mode of 0 :
14922: LD_VAR 0 6
14926: PUSH
14927: LD_INT 0
14929: DOUBLE
14930: EQUAL
14931: IFTRUE 14935
14933: GO 26388
14935: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14936: LD_ADDR_VAR 0 11
14940: PUSH
14941: LD_INT 0
14943: PUSH
14944: LD_INT 0
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 0
14953: PUSH
14954: LD_INT 1
14956: NEG
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 1
14964: PUSH
14965: LD_INT 0
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 1
14974: PUSH
14975: LD_INT 1
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 0
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 1
14994: NEG
14995: PUSH
14996: LD_INT 0
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 1
15005: NEG
15006: PUSH
15007: LD_INT 1
15009: NEG
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 1
15017: NEG
15018: PUSH
15019: LD_INT 2
15021: NEG
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 0
15029: PUSH
15030: LD_INT 2
15032: NEG
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 1
15040: PUSH
15041: LD_INT 1
15043: NEG
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 1
15051: PUSH
15052: LD_INT 2
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 0
15061: PUSH
15062: LD_INT 2
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 1
15071: NEG
15072: PUSH
15073: LD_INT 1
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: LD_INT 1
15082: PUSH
15083: LD_INT 3
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 0
15092: PUSH
15093: LD_INT 3
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 1
15102: NEG
15103: PUSH
15104: LD_INT 2
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15129: LD_ADDR_VAR 0 12
15133: PUSH
15134: LD_INT 0
15136: PUSH
15137: LD_INT 0
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 0
15146: PUSH
15147: LD_INT 1
15149: NEG
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 1
15157: PUSH
15158: LD_INT 0
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 1
15167: PUSH
15168: LD_INT 1
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 0
15177: PUSH
15178: LD_INT 1
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 1
15187: NEG
15188: PUSH
15189: LD_INT 0
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT 1
15198: NEG
15199: PUSH
15200: LD_INT 1
15202: NEG
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 1
15210: PUSH
15211: LD_INT 1
15213: NEG
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 2
15221: PUSH
15222: LD_INT 0
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: LD_INT 1
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: LD_INT 1
15241: NEG
15242: PUSH
15243: LD_INT 1
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 2
15252: NEG
15253: PUSH
15254: LD_INT 0
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 2
15263: NEG
15264: PUSH
15265: LD_INT 1
15267: NEG
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 2
15275: NEG
15276: PUSH
15277: LD_INT 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 3
15286: NEG
15287: PUSH
15288: LD_INT 0
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: LD_INT 3
15297: NEG
15298: PUSH
15299: LD_INT 1
15301: NEG
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15325: LD_ADDR_VAR 0 13
15329: PUSH
15330: LD_INT 0
15332: PUSH
15333: LD_INT 0
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 0
15342: PUSH
15343: LD_INT 1
15345: NEG
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 1
15353: PUSH
15354: LD_INT 0
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 1
15363: PUSH
15364: LD_INT 1
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 0
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 1
15383: NEG
15384: PUSH
15385: LD_INT 0
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 1
15394: NEG
15395: PUSH
15396: LD_INT 1
15398: NEG
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 1
15406: NEG
15407: PUSH
15408: LD_INT 2
15410: NEG
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 2
15418: PUSH
15419: LD_INT 1
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 2
15428: PUSH
15429: LD_INT 2
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 2
15448: NEG
15449: PUSH
15450: LD_INT 1
15452: NEG
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 2
15460: NEG
15461: PUSH
15462: LD_INT 2
15464: NEG
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 2
15472: NEG
15473: PUSH
15474: LD_INT 3
15476: NEG
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 3
15484: NEG
15485: PUSH
15486: LD_INT 2
15488: NEG
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 3
15496: NEG
15497: PUSH
15498: LD_INT 3
15500: NEG
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15524: LD_ADDR_VAR 0 14
15528: PUSH
15529: LD_INT 0
15531: PUSH
15532: LD_INT 0
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 0
15541: PUSH
15542: LD_INT 1
15544: NEG
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: LD_INT 0
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: LD_INT 1
15562: PUSH
15563: LD_INT 1
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 0
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 1
15582: NEG
15583: PUSH
15584: LD_INT 0
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 1
15593: NEG
15594: PUSH
15595: LD_INT 1
15597: NEG
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 1
15605: NEG
15606: PUSH
15607: LD_INT 2
15609: NEG
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 0
15617: PUSH
15618: LD_INT 2
15620: NEG
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 1
15628: PUSH
15629: LD_INT 1
15631: NEG
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 1
15639: PUSH
15640: LD_INT 2
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 0
15649: PUSH
15650: LD_INT 2
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 1
15659: NEG
15660: PUSH
15661: LD_INT 1
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 1
15670: NEG
15671: PUSH
15672: LD_INT 3
15674: NEG
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 0
15682: PUSH
15683: LD_INT 3
15685: NEG
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 1
15693: PUSH
15694: LD_INT 2
15696: NEG
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15720: LD_ADDR_VAR 0 15
15724: PUSH
15725: LD_INT 0
15727: PUSH
15728: LD_INT 0
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 0
15737: PUSH
15738: LD_INT 1
15740: NEG
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 1
15748: PUSH
15749: LD_INT 0
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 1
15758: PUSH
15759: LD_INT 1
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 0
15768: PUSH
15769: LD_INT 1
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 1
15778: NEG
15779: PUSH
15780: LD_INT 0
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 1
15789: NEG
15790: PUSH
15791: LD_INT 1
15793: NEG
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: LD_INT 1
15804: NEG
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 2
15812: PUSH
15813: LD_INT 0
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 2
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 1
15832: NEG
15833: PUSH
15834: LD_INT 1
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 2
15843: NEG
15844: PUSH
15845: LD_INT 0
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 2
15854: NEG
15855: PUSH
15856: LD_INT 1
15858: NEG
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 2
15866: PUSH
15867: LD_INT 1
15869: NEG
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 3
15877: PUSH
15878: LD_INT 0
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PUSH
15885: LD_INT 3
15887: PUSH
15888: LD_INT 1
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15913: LD_ADDR_VAR 0 16
15917: PUSH
15918: LD_INT 0
15920: PUSH
15921: LD_INT 0
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 0
15930: PUSH
15931: LD_INT 1
15933: NEG
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 1
15941: PUSH
15942: LD_INT 0
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 1
15951: PUSH
15952: LD_INT 1
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 0
15961: PUSH
15962: LD_INT 1
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 1
15971: NEG
15972: PUSH
15973: LD_INT 0
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 1
15982: NEG
15983: PUSH
15984: LD_INT 1
15986: NEG
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 1
15994: NEG
15995: PUSH
15996: LD_INT 2
15998: NEG
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 2
16006: PUSH
16007: LD_INT 1
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: LD_INT 2
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 1
16026: PUSH
16027: LD_INT 2
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 2
16036: NEG
16037: PUSH
16038: LD_INT 1
16040: NEG
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 2
16048: NEG
16049: PUSH
16050: LD_INT 2
16052: NEG
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 3
16060: PUSH
16061: LD_INT 2
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 3
16070: PUSH
16071: LD_INT 3
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 2
16080: PUSH
16081: LD_INT 3
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16106: LD_ADDR_VAR 0 17
16110: PUSH
16111: LD_INT 0
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 0
16123: PUSH
16124: LD_INT 1
16126: NEG
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 1
16134: PUSH
16135: LD_INT 0
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 1
16144: PUSH
16145: LD_INT 1
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 0
16154: PUSH
16155: LD_INT 1
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 1
16164: NEG
16165: PUSH
16166: LD_INT 0
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 1
16175: NEG
16176: PUSH
16177: LD_INT 1
16179: NEG
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 1
16187: NEG
16188: PUSH
16189: LD_INT 2
16191: NEG
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 0
16199: PUSH
16200: LD_INT 2
16202: NEG
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 1
16210: PUSH
16211: LD_INT 1
16213: NEG
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 2
16221: PUSH
16222: LD_INT 0
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 2
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 2
16241: PUSH
16242: LD_INT 2
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 1
16251: PUSH
16252: LD_INT 2
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 0
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 1
16271: NEG
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 2
16282: NEG
16283: PUSH
16284: LD_INT 0
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 2
16293: NEG
16294: PUSH
16295: LD_INT 1
16297: NEG
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 2
16305: NEG
16306: PUSH
16307: LD_INT 2
16309: NEG
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16336: LD_ADDR_VAR 0 18
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: LD_INT 0
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 0
16353: PUSH
16354: LD_INT 1
16356: NEG
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 1
16364: PUSH
16365: LD_INT 0
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: LD_INT 1
16374: PUSH
16375: LD_INT 1
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: LD_INT 1
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 1
16394: NEG
16395: PUSH
16396: LD_INT 0
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 1
16405: NEG
16406: PUSH
16407: LD_INT 1
16409: NEG
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 1
16417: NEG
16418: PUSH
16419: LD_INT 2
16421: NEG
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 0
16429: PUSH
16430: LD_INT 2
16432: NEG
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: LD_INT 1
16443: NEG
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 2
16451: PUSH
16452: LD_INT 0
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 2
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: LD_INT 2
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 0
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 1
16501: NEG
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 2
16512: NEG
16513: PUSH
16514: LD_INT 0
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 2
16523: NEG
16524: PUSH
16525: LD_INT 1
16527: NEG
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 2
16535: NEG
16536: PUSH
16537: LD_INT 2
16539: NEG
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16566: LD_ADDR_VAR 0 19
16570: PUSH
16571: LD_INT 0
16573: PUSH
16574: LD_INT 0
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 0
16583: PUSH
16584: LD_INT 1
16586: NEG
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 1
16594: PUSH
16595: LD_INT 0
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 1
16604: PUSH
16605: LD_INT 1
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: LD_INT 0
16614: PUSH
16615: LD_INT 1
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 1
16624: NEG
16625: PUSH
16626: LD_INT 0
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 1
16635: NEG
16636: PUSH
16637: LD_INT 1
16639: NEG
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 1
16647: NEG
16648: PUSH
16649: LD_INT 2
16651: NEG
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 0
16659: PUSH
16660: LD_INT 2
16662: NEG
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 1
16670: PUSH
16671: LD_INT 1
16673: NEG
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 2
16681: PUSH
16682: LD_INT 0
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: LD_INT 1
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 2
16701: PUSH
16702: LD_INT 2
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 1
16711: PUSH
16712: LD_INT 2
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 0
16721: PUSH
16722: LD_INT 2
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 1
16731: NEG
16732: PUSH
16733: LD_INT 1
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 2
16742: NEG
16743: PUSH
16744: LD_INT 0
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 2
16753: NEG
16754: PUSH
16755: LD_INT 1
16757: NEG
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 2
16765: NEG
16766: PUSH
16767: LD_INT 2
16769: NEG
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16796: LD_ADDR_VAR 0 20
16800: PUSH
16801: LD_INT 0
16803: PUSH
16804: LD_INT 0
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 0
16813: PUSH
16814: LD_INT 1
16816: NEG
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 1
16824: PUSH
16825: LD_INT 0
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 1
16834: PUSH
16835: LD_INT 1
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 0
16844: PUSH
16845: LD_INT 1
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 1
16854: NEG
16855: PUSH
16856: LD_INT 0
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 1
16865: NEG
16866: PUSH
16867: LD_INT 1
16869: NEG
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 1
16877: NEG
16878: PUSH
16879: LD_INT 2
16881: NEG
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 0
16889: PUSH
16890: LD_INT 2
16892: NEG
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 1
16900: PUSH
16901: LD_INT 1
16903: NEG
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 2
16911: PUSH
16912: LD_INT 0
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 2
16921: PUSH
16922: LD_INT 1
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 2
16931: PUSH
16932: LD_INT 2
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 1
16941: PUSH
16942: LD_INT 2
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 0
16951: PUSH
16952: LD_INT 2
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 1
16961: NEG
16962: PUSH
16963: LD_INT 1
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 2
16972: NEG
16973: PUSH
16974: LD_INT 0
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 2
16983: NEG
16984: PUSH
16985: LD_INT 1
16987: NEG
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 2
16995: NEG
16996: PUSH
16997: LD_INT 2
16999: NEG
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17026: LD_ADDR_VAR 0 21
17030: PUSH
17031: LD_INT 0
17033: PUSH
17034: LD_INT 0
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 0
17043: PUSH
17044: LD_INT 1
17046: NEG
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: LD_INT 0
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 1
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 0
17074: PUSH
17075: LD_INT 1
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 1
17084: NEG
17085: PUSH
17086: LD_INT 0
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 1
17095: NEG
17096: PUSH
17097: LD_INT 1
17099: NEG
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 1
17107: NEG
17108: PUSH
17109: LD_INT 2
17111: NEG
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 0
17119: PUSH
17120: LD_INT 2
17122: NEG
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: LD_INT 1
17133: NEG
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 2
17141: PUSH
17142: LD_INT 0
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 2
17151: PUSH
17152: LD_INT 1
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 2
17161: PUSH
17162: LD_INT 2
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 1
17171: PUSH
17172: LD_INT 2
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 0
17181: PUSH
17182: LD_INT 2
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 1
17191: NEG
17192: PUSH
17193: LD_INT 1
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 2
17202: NEG
17203: PUSH
17204: LD_INT 0
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 2
17213: NEG
17214: PUSH
17215: LD_INT 1
17217: NEG
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 2
17225: NEG
17226: PUSH
17227: LD_INT 2
17229: NEG
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17256: LD_ADDR_VAR 0 22
17260: PUSH
17261: LD_INT 0
17263: PUSH
17264: LD_INT 0
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 0
17273: PUSH
17274: LD_INT 1
17276: NEG
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 1
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 1
17294: PUSH
17295: LD_INT 1
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: LD_INT 1
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 1
17314: NEG
17315: PUSH
17316: LD_INT 0
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 1
17325: NEG
17326: PUSH
17327: LD_INT 1
17329: NEG
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 1
17337: NEG
17338: PUSH
17339: LD_INT 2
17341: NEG
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 0
17349: PUSH
17350: LD_INT 2
17352: NEG
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 1
17360: PUSH
17361: LD_INT 1
17363: NEG
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: LD_INT 2
17371: PUSH
17372: LD_INT 0
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 2
17381: PUSH
17382: LD_INT 1
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 2
17391: PUSH
17392: LD_INT 2
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 1
17401: PUSH
17402: LD_INT 2
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 0
17411: PUSH
17412: LD_INT 2
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 1
17421: NEG
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 2
17432: NEG
17433: PUSH
17434: LD_INT 0
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 2
17443: NEG
17444: PUSH
17445: LD_INT 1
17447: NEG
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 2
17455: NEG
17456: PUSH
17457: LD_INT 2
17459: NEG
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17486: LD_ADDR_VAR 0 23
17490: PUSH
17491: LD_INT 0
17493: PUSH
17494: LD_INT 0
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 0
17503: PUSH
17504: LD_INT 1
17506: NEG
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 1
17514: PUSH
17515: LD_INT 0
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 1
17524: PUSH
17525: LD_INT 1
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: LD_INT 1
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 1
17544: NEG
17545: PUSH
17546: LD_INT 0
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 1
17555: NEG
17556: PUSH
17557: LD_INT 1
17559: NEG
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 1
17567: NEG
17568: PUSH
17569: LD_INT 2
17571: NEG
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 2
17582: NEG
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 1
17590: PUSH
17591: LD_INT 1
17593: NEG
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 2
17601: PUSH
17602: LD_INT 0
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 2
17611: PUSH
17612: LD_INT 1
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 2
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 1
17631: PUSH
17632: LD_INT 2
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 0
17641: PUSH
17642: LD_INT 2
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 1
17651: NEG
17652: PUSH
17653: LD_INT 1
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 2
17662: NEG
17663: PUSH
17664: LD_INT 0
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 2
17673: NEG
17674: PUSH
17675: LD_INT 1
17677: NEG
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 2
17685: NEG
17686: PUSH
17687: LD_INT 2
17689: NEG
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 2
17697: NEG
17698: PUSH
17699: LD_INT 3
17701: NEG
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 1
17709: NEG
17710: PUSH
17711: LD_INT 3
17713: NEG
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 1
17721: PUSH
17722: LD_INT 2
17724: NEG
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 2
17732: PUSH
17733: LD_INT 1
17735: NEG
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17766: LD_ADDR_VAR 0 24
17770: PUSH
17771: LD_INT 0
17773: PUSH
17774: LD_INT 0
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: LD_INT 1
17786: NEG
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 1
17794: PUSH
17795: LD_INT 0
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 1
17804: PUSH
17805: LD_INT 1
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 0
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 1
17824: NEG
17825: PUSH
17826: LD_INT 0
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 1
17835: NEG
17836: PUSH
17837: LD_INT 1
17839: NEG
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 1
17847: NEG
17848: PUSH
17849: LD_INT 2
17851: NEG
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 0
17859: PUSH
17860: LD_INT 2
17862: NEG
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: LD_INT 1
17873: NEG
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 2
17881: PUSH
17882: LD_INT 0
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 2
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 2
17901: PUSH
17902: LD_INT 2
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 0
17921: PUSH
17922: LD_INT 2
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 1
17931: NEG
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 2
17942: NEG
17943: PUSH
17944: LD_INT 0
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 2
17953: NEG
17954: PUSH
17955: LD_INT 1
17957: NEG
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 2
17965: NEG
17966: PUSH
17967: LD_INT 2
17969: NEG
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 1
17977: PUSH
17978: LD_INT 2
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 1
17991: NEG
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 3
17999: PUSH
18000: LD_INT 1
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 3
18009: PUSH
18010: LD_INT 2
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18042: LD_ADDR_VAR 0 25
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 0
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 1
18100: NEG
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 1
18111: NEG
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: LD_INT 2
18127: NEG
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 0
18135: PUSH
18136: LD_INT 2
18138: NEG
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: LD_INT 1
18149: NEG
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 2
18157: PUSH
18158: LD_INT 0
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 2
18167: PUSH
18168: LD_INT 1
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: LD_INT 2
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 1
18187: PUSH
18188: LD_INT 2
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 0
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 1
18207: NEG
18208: PUSH
18209: LD_INT 1
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 2
18218: NEG
18219: PUSH
18220: LD_INT 0
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 2
18229: NEG
18230: PUSH
18231: LD_INT 1
18233: NEG
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 2
18241: NEG
18242: PUSH
18243: LD_INT 2
18245: NEG
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 3
18253: PUSH
18254: LD_INT 1
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 3
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 2
18273: PUSH
18274: LD_INT 3
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: LD_INT 3
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18316: LD_ADDR_VAR 0 26
18320: PUSH
18321: LD_INT 0
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 0
18333: PUSH
18334: LD_INT 1
18336: NEG
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 1
18344: PUSH
18345: LD_INT 0
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 1
18354: PUSH
18355: LD_INT 1
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 0
18364: PUSH
18365: LD_INT 1
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 1
18374: NEG
18375: PUSH
18376: LD_INT 0
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 1
18385: NEG
18386: PUSH
18387: LD_INT 1
18389: NEG
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 1
18397: NEG
18398: PUSH
18399: LD_INT 2
18401: NEG
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 0
18409: PUSH
18410: LD_INT 2
18412: NEG
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 1
18420: PUSH
18421: LD_INT 1
18423: NEG
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 2
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 2
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 2
18451: PUSH
18452: LD_INT 2
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: LD_INT 2
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 0
18471: PUSH
18472: LD_INT 2
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 1
18481: NEG
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 2
18492: NEG
18493: PUSH
18494: LD_INT 0
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 2
18503: NEG
18504: PUSH
18505: LD_INT 1
18507: NEG
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 2
18515: NEG
18516: PUSH
18517: LD_INT 2
18519: NEG
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 2
18527: PUSH
18528: LD_INT 3
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: LD_INT 3
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 1
18547: NEG
18548: PUSH
18549: LD_INT 2
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 2
18558: NEG
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18592: LD_ADDR_VAR 0 27
18596: PUSH
18597: LD_INT 0
18599: PUSH
18600: LD_INT 0
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: LD_INT 1
18612: NEG
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: LD_INT 0
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 1
18650: NEG
18651: PUSH
18652: LD_INT 0
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 1
18661: NEG
18662: PUSH
18663: LD_INT 1
18665: NEG
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 1
18673: NEG
18674: PUSH
18675: LD_INT 2
18677: NEG
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 0
18685: PUSH
18686: LD_INT 2
18688: NEG
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: LD_INT 1
18699: NEG
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 2
18707: PUSH
18708: LD_INT 0
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 2
18717: PUSH
18718: LD_INT 1
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 2
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 1
18737: PUSH
18738: LD_INT 2
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: LD_INT 2
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 1
18757: NEG
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 2
18768: NEG
18769: PUSH
18770: LD_INT 0
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 2
18779: NEG
18780: PUSH
18781: LD_INT 1
18783: NEG
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 2
18791: NEG
18792: PUSH
18793: LD_INT 2
18795: NEG
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 1
18803: NEG
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 2
18814: NEG
18815: PUSH
18816: LD_INT 1
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 3
18825: NEG
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 3
18837: NEG
18838: PUSH
18839: LD_INT 2
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18872: LD_ADDR_VAR 0 28
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: LD_INT 1
18892: NEG
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: LD_INT 0
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: NEG
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 1
18945: NEG
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: LD_INT 2
18957: NEG
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: LD_INT 2
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: LD_INT 1
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: LD_INT 2
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: LD_INT 2
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 0
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: NEG
19038: PUSH
19039: LD_INT 1
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 2
19048: NEG
19049: PUSH
19050: LD_INT 0
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: NEG
19060: PUSH
19061: LD_INT 1
19063: NEG
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: LD_INT 2
19075: NEG
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 2
19083: NEG
19084: PUSH
19085: LD_INT 3
19087: NEG
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 1
19095: NEG
19096: PUSH
19097: LD_INT 3
19099: NEG
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 3
19107: NEG
19108: PUSH
19109: LD_INT 1
19111: NEG
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 3
19119: NEG
19120: PUSH
19121: LD_INT 2
19123: NEG
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19154: LD_ADDR_VAR 0 29
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: LD_INT 0
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 0
19171: PUSH
19172: LD_INT 1
19174: NEG
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: LD_INT 0
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: LD_INT 1
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: LD_INT 1
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: NEG
19213: PUSH
19214: LD_INT 0
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 1
19223: NEG
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 1
19235: NEG
19236: PUSH
19237: LD_INT 2
19239: NEG
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 0
19247: PUSH
19248: LD_INT 2
19250: NEG
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 1
19258: PUSH
19259: LD_INT 1
19261: NEG
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 2
19269: PUSH
19270: LD_INT 0
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: LD_INT 1
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: LD_INT 2
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 2
19320: NEG
19321: PUSH
19322: LD_INT 1
19324: NEG
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 2
19332: NEG
19333: PUSH
19334: LD_INT 2
19336: NEG
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 2
19344: NEG
19345: PUSH
19346: LD_INT 3
19348: NEG
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 3
19367: PUSH
19368: LD_INT 1
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: LD_INT 3
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 1
19387: NEG
19388: PUSH
19389: LD_INT 2
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 3
19398: NEG
19399: PUSH
19400: LD_INT 2
19402: NEG
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19433: LD_ADDR_VAR 0 30
19437: PUSH
19438: LD_INT 0
19440: PUSH
19441: LD_INT 0
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: LD_INT 1
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: LD_INT 0
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: LD_INT 1
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 1
19491: NEG
19492: PUSH
19493: LD_INT 0
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: LD_INT 1
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 1
19514: NEG
19515: PUSH
19516: LD_INT 2
19518: NEG
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 0
19526: PUSH
19527: LD_INT 2
19529: NEG
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 1
19537: PUSH
19538: LD_INT 1
19540: NEG
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 2
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: LD_INT 2
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 1
19588: NEG
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 2
19599: NEG
19600: PUSH
19601: LD_INT 0
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: LD_INT 1
19614: NEG
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 1
19622: NEG
19623: PUSH
19624: LD_INT 3
19626: NEG
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 1
19634: PUSH
19635: LD_INT 2
19637: NEG
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 3
19645: PUSH
19646: LD_INT 2
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 2
19655: PUSH
19656: LD_INT 3
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: NEG
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 3
19676: NEG
19677: PUSH
19678: LD_INT 1
19680: NEG
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19711: LD_ADDR_VAR 0 31
19715: PUSH
19716: LD_INT 0
19718: PUSH
19719: LD_INT 0
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 0
19728: PUSH
19729: LD_INT 1
19731: NEG
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: LD_INT 0
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 1
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 0
19759: PUSH
19760: LD_INT 1
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 1
19769: NEG
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 1
19780: NEG
19781: PUSH
19782: LD_INT 1
19784: NEG
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: NEG
19793: PUSH
19794: LD_INT 2
19796: NEG
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: LD_INT 1
19807: NEG
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 2
19815: PUSH
19816: LD_INT 0
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 2
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 1
19865: NEG
19866: PUSH
19867: LD_INT 1
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 2
19876: NEG
19877: PUSH
19878: LD_INT 1
19880: NEG
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 2
19888: NEG
19889: PUSH
19890: LD_INT 2
19892: NEG
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 2
19900: NEG
19901: PUSH
19902: LD_INT 3
19904: NEG
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 2
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 3
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: LD_INT 3
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 1
19943: NEG
19944: PUSH
19945: LD_INT 2
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 3
19954: NEG
19955: PUSH
19956: LD_INT 2
19958: NEG
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19989: LD_ADDR_VAR 0 32
19993: PUSH
19994: LD_INT 0
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: LD_INT 1
20009: NEG
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 0
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 1
20047: NEG
20048: PUSH
20049: LD_INT 0
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 1
20058: NEG
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: NEG
20071: PUSH
20072: LD_INT 2
20074: NEG
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 0
20082: PUSH
20083: LD_INT 2
20085: NEG
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: LD_INT 1
20096: NEG
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: LD_INT 1
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: LD_INT 2
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: LD_INT 2
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 1
20144: NEG
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 2
20155: NEG
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 2
20166: NEG
20167: PUSH
20168: LD_INT 1
20170: NEG
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 1
20178: NEG
20179: PUSH
20180: LD_INT 3
20182: NEG
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 1
20190: PUSH
20191: LD_INT 2
20193: NEG
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 3
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 2
20211: PUSH
20212: LD_INT 3
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 2
20221: NEG
20222: PUSH
20223: LD_INT 1
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 3
20232: NEG
20233: PUSH
20234: LD_INT 1
20236: NEG
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20267: LD_ADDR_VAR 0 33
20271: PUSH
20272: LD_INT 0
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 1
20295: PUSH
20296: LD_INT 0
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: LD_INT 1
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 0
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 1
20325: NEG
20326: PUSH
20327: LD_INT 0
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 1
20336: NEG
20337: PUSH
20338: LD_INT 1
20340: NEG
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: NEG
20349: PUSH
20350: LD_INT 2
20352: NEG
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 1
20360: PUSH
20361: LD_INT 1
20363: NEG
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 2
20371: PUSH
20372: LD_INT 0
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: LD_INT 1
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 0
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 1
20411: NEG
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 2
20422: NEG
20423: PUSH
20424: LD_INT 0
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 2
20433: NEG
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: NEG
20446: PUSH
20447: LD_INT 2
20449: NEG
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 2
20457: NEG
20458: PUSH
20459: LD_INT 3
20461: NEG
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 2
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 3
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: LD_INT 3
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 1
20500: NEG
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 3
20511: NEG
20512: PUSH
20513: LD_INT 2
20515: NEG
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20546: LD_ADDR_VAR 0 34
20550: PUSH
20551: LD_INT 0
20553: PUSH
20554: LD_INT 0
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 0
20563: PUSH
20564: LD_INT 1
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 1
20574: PUSH
20575: LD_INT 0
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 0
20594: PUSH
20595: LD_INT 1
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 1
20604: NEG
20605: PUSH
20606: LD_INT 0
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 1
20615: NEG
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 1
20627: NEG
20628: PUSH
20629: LD_INT 2
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 0
20639: PUSH
20640: LD_INT 2
20642: NEG
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: LD_INT 1
20653: NEG
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 2
20661: PUSH
20662: LD_INT 1
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 2
20671: PUSH
20672: LD_INT 2
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: LD_INT 2
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 1
20691: NEG
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 2
20702: NEG
20703: PUSH
20704: LD_INT 0
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 2
20713: NEG
20714: PUSH
20715: LD_INT 1
20717: NEG
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: LD_INT 2
20729: NEG
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 1
20737: NEG
20738: PUSH
20739: LD_INT 3
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 1
20749: PUSH
20750: LD_INT 2
20752: NEG
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 3
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: PUSH
20771: LD_INT 3
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 2
20780: NEG
20781: PUSH
20782: LD_INT 1
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 3
20791: NEG
20792: PUSH
20793: LD_INT 1
20795: NEG
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20826: LD_ADDR_VAR 0 35
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 0
20843: PUSH
20844: LD_INT 1
20846: NEG
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 1
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: LD_INT 1
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 1
20884: NEG
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: NEG
20896: PUSH
20897: LD_INT 1
20899: NEG
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 2
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 2
20917: NEG
20918: PUSH
20919: LD_INT 1
20921: NEG
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20938: LD_ADDR_VAR 0 36
20942: PUSH
20943: LD_INT 0
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: LD_INT 1
20958: NEG
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: LD_INT 1
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 1
20996: NEG
20997: PUSH
20998: LD_INT 0
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 1
21007: NEG
21008: PUSH
21009: LD_INT 1
21011: NEG
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: NEG
21020: PUSH
21021: LD_INT 2
21023: NEG
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 1
21031: PUSH
21032: LD_INT 2
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21050: LD_ADDR_VAR 0 37
21054: PUSH
21055: LD_INT 0
21057: PUSH
21058: LD_INT 0
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 0
21067: PUSH
21068: LD_INT 1
21070: NEG
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: LD_INT 0
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 1
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 0
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 1
21108: NEG
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 1
21119: NEG
21120: PUSH
21121: LD_INT 1
21123: NEG
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: LD_INT 1
21134: NEG
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21162: LD_ADDR_VAR 0 38
21166: PUSH
21167: LD_INT 0
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 0
21179: PUSH
21180: LD_INT 1
21182: NEG
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 1
21190: PUSH
21191: LD_INT 0
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: LD_INT 1
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: LD_INT 0
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 1
21231: NEG
21232: PUSH
21233: LD_INT 1
21235: NEG
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 2
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 2
21253: NEG
21254: PUSH
21255: LD_INT 1
21257: NEG
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21274: LD_ADDR_VAR 0 39
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: LD_INT 0
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 1
21294: NEG
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 1
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 0
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: NEG
21333: PUSH
21334: LD_INT 0
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: NEG
21344: PUSH
21345: LD_INT 1
21347: NEG
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 1
21355: NEG
21356: PUSH
21357: LD_INT 2
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 1
21367: PUSH
21368: LD_INT 2
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21386: LD_ADDR_VAR 0 40
21390: PUSH
21391: LD_INT 0
21393: PUSH
21394: LD_INT 0
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: LD_INT 1
21406: NEG
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: LD_INT 0
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: LD_INT 1
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 0
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 1
21455: NEG
21456: PUSH
21457: LD_INT 1
21459: NEG
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 1
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21498: LD_ADDR_VAR 0 41
21502: PUSH
21503: LD_INT 0
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 0
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: LD_INT 1
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 0
21546: PUSH
21547: LD_INT 1
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: LD_INT 0
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 1
21567: NEG
21568: PUSH
21569: LD_INT 1
21571: NEG
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 1
21579: NEG
21580: PUSH
21581: LD_INT 2
21583: NEG
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: LD_INT 1
21594: NEG
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: LD_INT 0
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 2
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 1
21632: PUSH
21633: LD_INT 2
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 1
21642: NEG
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 2
21653: NEG
21654: PUSH
21655: LD_INT 0
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 2
21664: NEG
21665: PUSH
21666: LD_INT 1
21668: NEG
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 2
21676: NEG
21677: PUSH
21678: LD_INT 2
21680: NEG
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 2
21688: NEG
21689: PUSH
21690: LD_INT 3
21692: NEG
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 2
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 3
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 3
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 3
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 3
21741: PUSH
21742: LD_INT 3
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 2
21751: PUSH
21752: LD_INT 3
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 2
21761: NEG
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 3
21772: NEG
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 3
21783: NEG
21784: PUSH
21785: LD_INT 1
21787: NEG
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 3
21795: NEG
21796: PUSH
21797: LD_INT 2
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 3
21807: NEG
21808: PUSH
21809: LD_INT 3
21811: NEG
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21848: LD_ADDR_VAR 0 42
21852: PUSH
21853: LD_INT 0
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 1
21876: PUSH
21877: LD_INT 0
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 1
21886: PUSH
21887: LD_INT 1
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 0
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 1
21906: NEG
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 1
21917: NEG
21918: PUSH
21919: LD_INT 1
21921: NEG
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 1
21929: NEG
21930: PUSH
21931: LD_INT 2
21933: NEG
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: LD_INT 2
21944: NEG
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 1
21952: PUSH
21953: LD_INT 1
21955: NEG
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: LD_INT 1
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: LD_INT 2
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: LD_INT 2
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: LD_INT 2
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: PUSH
22005: LD_INT 1
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 2
22014: NEG
22015: PUSH
22016: LD_INT 1
22018: NEG
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 2
22026: NEG
22027: PUSH
22028: LD_INT 2
22030: NEG
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 2
22038: NEG
22039: PUSH
22040: LD_INT 3
22042: NEG
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 1
22050: NEG
22051: PUSH
22052: LD_INT 3
22054: NEG
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 0
22062: PUSH
22063: LD_INT 3
22065: NEG
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: LD_INT 2
22076: NEG
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 3
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 3
22094: PUSH
22095: LD_INT 3
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: LD_INT 3
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 3
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: LD_INT 3
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 1
22134: NEG
22135: PUSH
22136: LD_INT 2
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 3
22145: NEG
22146: PUSH
22147: LD_INT 2
22149: NEG
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 3
22157: NEG
22158: PUSH
22159: LD_INT 3
22161: NEG
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22198: LD_ADDR_VAR 0 43
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: LD_INT 0
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: LD_INT 1
22218: NEG
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 1
22226: PUSH
22227: LD_INT 0
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: LD_INT 1
22271: NEG
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: LD_INT 2
22283: NEG
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: LD_INT 2
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 2
22313: PUSH
22314: LD_INT 0
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: LD_INT 2
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 1
22353: NEG
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 2
22364: NEG
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 2
22375: NEG
22376: PUSH
22377: LD_INT 1
22379: NEG
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: NEG
22388: PUSH
22389: LD_INT 3
22391: NEG
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: LD_INT 3
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: LD_INT 2
22413: NEG
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 2
22421: PUSH
22422: LD_INT 1
22424: NEG
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 3
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 3
22442: PUSH
22443: LD_INT 1
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 1
22452: PUSH
22453: LD_INT 3
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 0
22462: PUSH
22463: LD_INT 3
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 1
22472: NEG
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 2
22483: NEG
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 3
22494: NEG
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 3
22505: NEG
22506: PUSH
22507: LD_INT 1
22509: NEG
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22546: LD_ADDR_VAR 0 44
22550: PUSH
22551: LD_INT 0
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 0
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: LD_INT 0
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 0
22594: PUSH
22595: LD_INT 1
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 1
22615: NEG
22616: PUSH
22617: LD_INT 1
22619: NEG
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PUSH
22629: LD_INT 2
22631: NEG
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: LD_INT 1
22642: NEG
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 2
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 2
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 2
22670: PUSH
22671: LD_INT 2
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 1
22680: PUSH
22681: LD_INT 2
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 1
22690: NEG
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 2
22701: NEG
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 2
22712: NEG
22713: PUSH
22714: LD_INT 1
22716: NEG
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 2
22724: NEG
22725: PUSH
22726: LD_INT 2
22728: NEG
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 2
22736: NEG
22737: PUSH
22738: LD_INT 3
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 1
22751: NEG
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 3
22759: PUSH
22760: LD_INT 0
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 3
22769: PUSH
22770: LD_INT 1
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 3
22779: PUSH
22780: LD_INT 2
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 3
22789: PUSH
22790: LD_INT 3
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 2
22799: PUSH
22800: LD_INT 3
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 2
22809: NEG
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 3
22820: NEG
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 3
22831: NEG
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 3
22843: NEG
22844: PUSH
22845: LD_INT 2
22847: NEG
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 3
22855: NEG
22856: PUSH
22857: LD_INT 3
22859: NEG
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22896: LD_ADDR_VAR 0 45
22900: PUSH
22901: LD_INT 0
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 1
22934: PUSH
22935: LD_INT 1
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 1
22954: NEG
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 1
22965: NEG
22966: PUSH
22967: LD_INT 1
22969: NEG
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 1
22977: NEG
22978: PUSH
22979: LD_INT 2
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: LD_INT 2
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: PUSH
23001: LD_INT 1
23003: NEG
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 2
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 2
23021: PUSH
23022: LD_INT 2
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 2
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: LD_INT 2
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 2
23062: NEG
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 2
23074: NEG
23075: PUSH
23076: LD_INT 2
23078: NEG
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 2
23086: NEG
23087: PUSH
23088: LD_INT 3
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 1
23098: NEG
23099: PUSH
23100: LD_INT 3
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: LD_INT 3
23113: NEG
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 1
23121: PUSH
23122: LD_INT 2
23124: NEG
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 2
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 3
23142: PUSH
23143: LD_INT 3
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 2
23152: PUSH
23153: LD_INT 3
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: LD_INT 3
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 0
23172: PUSH
23173: LD_INT 3
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 1
23182: NEG
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 3
23193: NEG
23194: PUSH
23195: LD_INT 2
23197: NEG
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 3
23205: NEG
23206: PUSH
23207: LD_INT 3
23209: NEG
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23246: LD_ADDR_VAR 0 46
23250: PUSH
23251: LD_INT 0
23253: PUSH
23254: LD_INT 0
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 0
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 1
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 1
23284: PUSH
23285: LD_INT 1
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 1
23304: NEG
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 1
23315: NEG
23316: PUSH
23317: LD_INT 1
23319: NEG
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 1
23327: NEG
23328: PUSH
23329: LD_INT 2
23331: NEG
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: LD_INT 2
23342: NEG
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 1
23353: NEG
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 2
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 2
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: LD_INT 2
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: LD_INT 2
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: LD_INT 1
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 2
23412: NEG
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 2
23423: NEG
23424: PUSH
23425: LD_INT 1
23427: NEG
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 1
23435: NEG
23436: PUSH
23437: LD_INT 3
23439: NEG
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: LD_INT 3
23450: NEG
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: LD_INT 2
23461: NEG
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: LD_INT 1
23472: NEG
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 3
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 3
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: PUSH
23501: LD_INT 3
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 0
23510: PUSH
23511: LD_INT 3
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 1
23520: NEG
23521: PUSH
23522: LD_INT 2
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 2
23531: NEG
23532: PUSH
23533: LD_INT 1
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 3
23542: NEG
23543: PUSH
23544: LD_INT 0
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 3
23553: NEG
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23594: LD_ADDR_VAR 0 47
23598: PUSH
23599: LD_INT 0
23601: PUSH
23602: LD_INT 0
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: LD_INT 1
23614: NEG
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 1
23652: NEG
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: LD_INT 1
23667: NEG
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: LD_INT 2
23679: NEG
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 2
23690: NEG
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 1
23698: PUSH
23699: LD_INT 1
23701: NEG
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 2
23709: NEG
23710: PUSH
23711: LD_INT 1
23713: NEG
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 2
23721: NEG
23722: PUSH
23723: LD_INT 2
23725: NEG
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23745: LD_ADDR_VAR 0 48
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: LD_INT 0
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 0
23762: PUSH
23763: LD_INT 1
23765: NEG
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: LD_INT 0
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: NEG
23804: PUSH
23805: LD_INT 0
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 1
23814: NEG
23815: PUSH
23816: LD_INT 1
23818: NEG
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: NEG
23827: PUSH
23828: LD_INT 2
23830: NEG
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 0
23838: PUSH
23839: LD_INT 2
23841: NEG
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: LD_INT 1
23852: NEG
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 2
23860: PUSH
23861: LD_INT 0
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 2
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23892: LD_ADDR_VAR 0 49
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: LD_INT 1
23912: NEG
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: LD_INT 0
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 1
23961: NEG
23962: PUSH
23963: LD_INT 1
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 2
23984: PUSH
23985: LD_INT 0
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 2
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: LD_INT 2
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: PUSH
24015: LD_INT 2
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24036: LD_ADDR_VAR 0 50
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: LD_INT 0
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: LD_INT 1
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: LD_INT 0
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: LD_INT 1
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: NEG
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: LD_INT 1
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 2
24117: PUSH
24118: LD_INT 1
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 2
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 0
24147: PUSH
24148: LD_INT 2
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: NEG
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24180: LD_ADDR_VAR 0 51
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: LD_INT 0
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 1
24238: NEG
24239: PUSH
24240: LD_INT 0
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 1
24249: NEG
24250: PUSH
24251: LD_INT 1
24253: NEG
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 2
24292: NEG
24293: PUSH
24294: LD_INT 0
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 2
24303: NEG
24304: PUSH
24305: LD_INT 1
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24327: LD_ADDR_VAR 0 52
24331: PUSH
24332: LD_INT 0
24334: PUSH
24335: LD_INT 0
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: LD_INT 1
24347: NEG
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: LD_INT 0
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: LD_INT 0
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 1
24396: NEG
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: LD_INT 2
24412: NEG
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: NEG
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 2
24431: NEG
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 2
24442: NEG
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 2
24454: NEG
24455: PUSH
24456: LD_INT 2
24458: NEG
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24478: LD_ADDR_VAR 0 53
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 0
24495: PUSH
24496: LD_INT 1
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 1
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 0
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 1
24536: NEG
24537: PUSH
24538: LD_INT 0
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 1
24547: NEG
24548: PUSH
24549: LD_INT 1
24551: NEG
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: LD_INT 2
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 0
24571: PUSH
24572: LD_INT 2
24574: NEG
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 1
24582: PUSH
24583: LD_INT 1
24585: NEG
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 2
24593: PUSH
24594: LD_INT 0
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 2
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: LD_INT 2
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 2
24654: NEG
24655: PUSH
24656: LD_INT 0
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 2
24665: NEG
24666: PUSH
24667: LD_INT 1
24669: NEG
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 2
24677: NEG
24678: PUSH
24679: LD_INT 2
24681: NEG
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24708: LD_ADDR_VAR 0 54
24712: PUSH
24713: LD_INT 0
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: LD_INT 1
24728: NEG
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: LD_INT 1
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: NEG
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: LD_INT 1
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: LD_INT 2
24793: NEG
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 0
24801: PUSH
24802: LD_INT 2
24804: NEG
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 2
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 2
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 2
24843: PUSH
24844: LD_INT 2
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: LD_INT 2
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 2
24884: NEG
24885: PUSH
24886: LD_INT 0
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 2
24895: NEG
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 2
24907: NEG
24908: PUSH
24909: LD_INT 2
24911: NEG
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24938: LD_ADDR_VAR 0 55
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: LD_INT 1
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: LD_INT 0
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: LD_INT 1
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 1
24996: NEG
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: LD_INT 2
25023: NEG
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: LD_INT 2
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 2
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 2
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 2
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: LD_INT 2
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 2
25114: NEG
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 2
25125: NEG
25126: PUSH
25127: LD_INT 1
25129: NEG
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 2
25137: NEG
25138: PUSH
25139: LD_INT 2
25141: NEG
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25168: LD_ADDR_VAR 0 56
25172: PUSH
25173: LD_INT 0
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: LD_INT 1
25188: NEG
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: LD_INT 1
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: LD_INT 1
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 1
25226: NEG
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: LD_INT 1
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 2
25253: NEG
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 2
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 2
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 2
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 2
25303: PUSH
25304: LD_INT 2
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 1
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: LD_INT 2
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 1
25333: NEG
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 2
25344: NEG
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 2
25355: NEG
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: LD_INT 2
25371: NEG
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25398: LD_ADDR_VAR 0 57
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 1
25436: PUSH
25437: LD_INT 1
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: LD_INT 2
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: LD_INT 2
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 1
25502: PUSH
25503: LD_INT 1
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 2
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 2
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 2
25533: PUSH
25534: LD_INT 2
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: LD_INT 2
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: LD_INT 2
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 1
25563: NEG
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 2
25574: NEG
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 2
25585: NEG
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 2
25597: NEG
25598: PUSH
25599: LD_INT 2
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25628: LD_ADDR_VAR 0 58
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: LD_INT 0
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 1
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 1
25686: NEG
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: NEG
25710: PUSH
25711: LD_INT 2
25713: NEG
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: LD_INT 2
25724: NEG
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 2
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 2
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: LD_INT 2
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 1
25793: NEG
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 2
25815: NEG
25816: PUSH
25817: LD_INT 1
25819: NEG
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 2
25827: NEG
25828: PUSH
25829: LD_INT 2
25831: NEG
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25858: LD_ADDR_VAR 0 59
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 0
25875: PUSH
25876: LD_INT 1
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25946: LD_ADDR_VAR 0 60
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26034: LD_ADDR_VAR 0 61
26038: PUSH
26039: LD_INT 0
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 1
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: NEG
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 1
26103: NEG
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26122: LD_ADDR_VAR 0 62
26126: PUSH
26127: LD_INT 0
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 1
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: LD_INT 1
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 1
26180: NEG
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26210: LD_ADDR_VAR 0 63
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 0
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: LD_INT 1
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: LD_INT 1
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: NEG
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26298: LD_ADDR_VAR 0 64
26302: PUSH
26303: LD_INT 0
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 1
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: LD_INT 1
26371: NEG
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: ST_TO_ADDR
// end ; 1 :
26386: GO 32283
26388: LD_INT 1
26390: DOUBLE
26391: EQUAL
26392: IFTRUE 26396
26394: GO 29019
26396: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26397: LD_ADDR_VAR 0 11
26401: PUSH
26402: LD_INT 1
26404: NEG
26405: PUSH
26406: LD_INT 3
26408: NEG
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: LD_INT 3
26419: NEG
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: LD_INT 2
26430: NEG
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: LIST
26440: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26441: LD_ADDR_VAR 0 12
26445: PUSH
26446: LD_INT 2
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 3
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 3
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: LIST
26481: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26482: LD_ADDR_VAR 0 13
26486: PUSH
26487: LD_INT 3
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 3
26499: PUSH
26500: LD_INT 3
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: PUSH
26510: LD_INT 3
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: LIST
26521: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26522: LD_ADDR_VAR 0 14
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: LD_INT 3
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: LD_INT 3
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: LD_INT 2
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: LIST
26562: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26563: LD_ADDR_VAR 0 15
26567: PUSH
26568: LD_INT 2
26570: NEG
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 3
26581: NEG
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 3
26592: NEG
26593: PUSH
26594: LD_INT 1
26596: NEG
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: LIST
26606: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26607: LD_ADDR_VAR 0 16
26611: PUSH
26612: LD_INT 2
26614: NEG
26615: PUSH
26616: LD_INT 3
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 3
26626: NEG
26627: PUSH
26628: LD_INT 2
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 3
26638: NEG
26639: PUSH
26640: LD_INT 3
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: LIST
26652: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26653: LD_ADDR_VAR 0 17
26657: PUSH
26658: LD_INT 1
26660: NEG
26661: PUSH
26662: LD_INT 3
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: LD_INT 3
26675: NEG
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 1
26683: PUSH
26684: LD_INT 2
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: LIST
26696: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26697: LD_ADDR_VAR 0 18
26701: PUSH
26702: LD_INT 2
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 3
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 3
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26738: LD_ADDR_VAR 0 19
26742: PUSH
26743: LD_INT 3
26745: PUSH
26746: LD_INT 2
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 3
26755: PUSH
26756: LD_INT 3
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: LD_INT 3
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: LIST
26777: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26778: LD_ADDR_VAR 0 20
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: LD_INT 3
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: LD_INT 3
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: LIST
26818: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26819: LD_ADDR_VAR 0 21
26823: PUSH
26824: LD_INT 2
26826: NEG
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 3
26837: NEG
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 3
26848: NEG
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: LIST
26862: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26863: LD_ADDR_VAR 0 22
26867: PUSH
26868: LD_INT 2
26870: NEG
26871: PUSH
26872: LD_INT 3
26874: NEG
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 3
26882: NEG
26883: PUSH
26884: LD_INT 2
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 3
26894: NEG
26895: PUSH
26896: LD_INT 3
26898: NEG
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: LIST
26908: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26909: LD_ADDR_VAR 0 23
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: LD_INT 3
26919: NEG
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: LD_INT 4
26931: NEG
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: LD_INT 3
26942: NEG
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: LIST
26952: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26953: LD_ADDR_VAR 0 24
26957: PUSH
26958: LD_INT 3
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 3
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 4
26981: PUSH
26982: LD_INT 1
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26994: LD_ADDR_VAR 0 25
26998: PUSH
26999: LD_INT 3
27001: PUSH
27002: LD_INT 3
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 4
27011: PUSH
27012: LD_INT 3
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 3
27021: PUSH
27022: LD_INT 4
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27034: LD_ADDR_VAR 0 26
27038: PUSH
27039: LD_INT 0
27041: PUSH
27042: LD_INT 3
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: LD_INT 4
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: LD_INT 3
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27075: LD_ADDR_VAR 0 27
27079: PUSH
27080: LD_INT 3
27082: NEG
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 3
27093: NEG
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 4
27104: NEG
27105: PUSH
27106: LD_INT 1
27108: NEG
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: LIST
27118: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27119: LD_ADDR_VAR 0 28
27123: PUSH
27124: LD_INT 3
27126: NEG
27127: PUSH
27128: LD_INT 3
27130: NEG
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 3
27138: NEG
27139: PUSH
27140: LD_INT 4
27142: NEG
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 4
27150: NEG
27151: PUSH
27152: LD_INT 3
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27165: LD_ADDR_VAR 0 29
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: LD_INT 3
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 0
27184: PUSH
27185: LD_INT 3
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: LD_INT 2
27198: NEG
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 1
27206: NEG
27207: PUSH
27208: LD_INT 4
27210: NEG
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: LD_INT 4
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: LD_INT 3
27232: NEG
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: NEG
27241: PUSH
27242: LD_INT 5
27244: NEG
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 0
27252: PUSH
27253: LD_INT 5
27255: NEG
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: LD_INT 4
27266: NEG
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: LD_INT 6
27278: NEG
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: LD_INT 6
27289: NEG
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: LD_INT 5
27300: NEG
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27320: LD_ADDR_VAR 0 30
27324: PUSH
27325: LD_INT 2
27327: PUSH
27328: LD_INT 1
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 3
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 3
27348: PUSH
27349: LD_INT 1
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 3
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 4
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 4
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 4
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 5
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 5
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 5
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 6
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 6
27441: PUSH
27442: LD_INT 1
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27463: LD_ADDR_VAR 0 31
27467: PUSH
27468: LD_INT 3
27470: PUSH
27471: LD_INT 2
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 3
27480: PUSH
27481: LD_INT 3
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: LD_INT 3
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 4
27500: PUSH
27501: LD_INT 3
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 4
27510: PUSH
27511: LD_INT 4
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 3
27520: PUSH
27521: LD_INT 4
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 5
27530: PUSH
27531: LD_INT 4
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 5
27540: PUSH
27541: LD_INT 5
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 4
27550: PUSH
27551: LD_INT 5
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 6
27560: PUSH
27561: LD_INT 5
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 6
27570: PUSH
27571: LD_INT 6
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 5
27580: PUSH
27581: LD_INT 6
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27602: LD_ADDR_VAR 0 32
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: LD_INT 3
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: LD_INT 3
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 1
27640: PUSH
27641: LD_INT 4
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: LD_INT 4
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: LD_INT 3
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: LD_INT 5
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: LD_INT 5
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: LD_INT 4
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: LD_INT 6
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: LD_INT 6
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 1
27722: NEG
27723: PUSH
27724: LD_INT 5
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27745: LD_ADDR_VAR 0 33
27749: PUSH
27750: LD_INT 2
27752: NEG
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 3
27763: NEG
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 3
27774: NEG
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 3
27786: NEG
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 4
27797: NEG
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 4
27808: NEG
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 4
27820: NEG
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 5
27831: NEG
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 5
27842: NEG
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 5
27854: NEG
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 6
27865: NEG
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 6
27876: NEG
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27900: LD_ADDR_VAR 0 34
27904: PUSH
27905: LD_INT 2
27907: NEG
27908: PUSH
27909: LD_INT 3
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 3
27919: NEG
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 3
27931: NEG
27932: PUSH
27933: LD_INT 3
27935: NEG
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 3
27943: NEG
27944: PUSH
27945: LD_INT 4
27947: NEG
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 4
27955: NEG
27956: PUSH
27957: LD_INT 3
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 4
27967: NEG
27968: PUSH
27969: LD_INT 4
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 4
27979: NEG
27980: PUSH
27981: LD_INT 5
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 5
27991: NEG
27992: PUSH
27993: LD_INT 4
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 5
28003: NEG
28004: PUSH
28005: LD_INT 5
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 5
28015: NEG
28016: PUSH
28017: LD_INT 6
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 6
28027: NEG
28028: PUSH
28029: LD_INT 5
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 6
28039: NEG
28040: PUSH
28041: LD_INT 6
28043: NEG
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28063: LD_ADDR_VAR 0 41
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: LD_INT 2
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 1
28081: NEG
28082: PUSH
28083: LD_INT 3
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: LD_INT 2
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: LIST
28106: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28107: LD_ADDR_VAR 0 42
28111: PUSH
28112: LD_INT 2
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 3
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28148: LD_ADDR_VAR 0 43
28152: PUSH
28153: LD_INT 2
28155: PUSH
28156: LD_INT 2
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 3
28165: PUSH
28166: LD_INT 2
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 2
28175: PUSH
28176: LD_INT 3
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28188: LD_ADDR_VAR 0 44
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: LD_INT 3
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: LD_INT 2
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: LIST
28228: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28229: LD_ADDR_VAR 0 45
28233: PUSH
28234: LD_INT 2
28236: NEG
28237: PUSH
28238: LD_INT 0
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: NEG
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 3
28258: NEG
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28273: LD_ADDR_VAR 0 46
28277: PUSH
28278: LD_INT 2
28280: NEG
28281: PUSH
28282: LD_INT 2
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: LD_INT 3
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 3
28304: NEG
28305: PUSH
28306: LD_INT 2
28308: NEG
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: LIST
28318: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28319: LD_ADDR_VAR 0 47
28323: PUSH
28324: LD_INT 2
28326: NEG
28327: PUSH
28328: LD_INT 3
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: LD_INT 3
28342: NEG
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28352: LD_ADDR_VAR 0 48
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 2
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28383: LD_ADDR_VAR 0 49
28387: PUSH
28388: LD_INT 3
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 3
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28412: LD_ADDR_VAR 0 50
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 3
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: LD_INT 3
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28441: LD_ADDR_VAR 0 51
28445: PUSH
28446: LD_INT 1
28448: NEG
28449: PUSH
28450: LD_INT 2
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 2
28459: NEG
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28472: LD_ADDR_VAR 0 52
28476: PUSH
28477: LD_INT 3
28479: NEG
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 3
28491: NEG
28492: PUSH
28493: LD_INT 2
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28505: LD_ADDR_VAR 0 53
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: LD_INT 3
28516: NEG
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 3
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: LD_INT 2
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: LIST
28548: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28549: LD_ADDR_VAR 0 54
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 3
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 3
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: LIST
28589: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28590: LD_ADDR_VAR 0 55
28594: PUSH
28595: LD_INT 3
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 3
28607: PUSH
28608: LD_INT 3
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 3
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28630: LD_ADDR_VAR 0 56
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: LD_INT 3
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: LD_INT 3
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 1
28657: NEG
28658: PUSH
28659: LD_INT 2
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: LIST
28670: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28671: LD_ADDR_VAR 0 57
28675: PUSH
28676: LD_INT 2
28678: NEG
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 3
28689: NEG
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 3
28700: NEG
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28715: LD_ADDR_VAR 0 58
28719: PUSH
28720: LD_INT 2
28722: NEG
28723: PUSH
28724: LD_INT 3
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 3
28734: NEG
28735: PUSH
28736: LD_INT 2
28738: NEG
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 3
28746: NEG
28747: PUSH
28748: LD_INT 3
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28761: LD_ADDR_VAR 0 59
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: LD_INT 2
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: LD_INT 2
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28805: LD_ADDR_VAR 0 60
28809: PUSH
28810: LD_INT 1
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 2
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 2
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: LIST
28845: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28846: LD_ADDR_VAR 0 61
28850: PUSH
28851: LD_INT 2
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: LD_INT 2
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: LD_INT 2
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28886: LD_ADDR_VAR 0 62
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: LD_INT 2
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 2
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: LD_INT 1
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: LIST
28926: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28927: LD_ADDR_VAR 0 63
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 2
28945: NEG
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 2
28956: NEG
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: LIST
28970: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28971: LD_ADDR_VAR 0 64
28975: PUSH
28976: LD_INT 1
28978: NEG
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 2
28990: NEG
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 2
29002: NEG
29003: PUSH
29004: LD_INT 2
29006: NEG
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: ST_TO_ADDR
// end ; 2 :
29017: GO 32283
29019: LD_INT 2
29021: DOUBLE
29022: EQUAL
29023: IFTRUE 29027
29025: GO 32282
29027: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29028: LD_ADDR_VAR 0 29
29032: PUSH
29033: LD_INT 4
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 4
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 5
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 5
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 4
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 3
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 3
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 3
29107: PUSH
29108: LD_INT 2
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 5
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 3
29128: PUSH
29129: LD_INT 3
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 3
29138: PUSH
29139: LD_INT 2
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 4
29148: PUSH
29149: LD_INT 3
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 4
29158: PUSH
29159: LD_INT 4
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 3
29168: PUSH
29169: LD_INT 4
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 2
29178: PUSH
29179: LD_INT 3
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 2
29188: PUSH
29189: LD_INT 2
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 4
29198: PUSH
29199: LD_INT 2
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: LD_INT 4
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 0
29218: PUSH
29219: LD_INT 4
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: LD_INT 3
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: LD_INT 4
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: LD_INT 5
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: LD_INT 5
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 1
29268: NEG
29269: PUSH
29270: LD_INT 4
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: LD_INT 3
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 2
29290: PUSH
29291: LD_INT 5
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 2
29300: NEG
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 3
29311: NEG
29312: PUSH
29313: LD_INT 0
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 3
29322: NEG
29323: PUSH
29324: LD_INT 1
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 2
29345: NEG
29346: PUSH
29347: LD_INT 1
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 3
29356: NEG
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 4
29367: NEG
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 4
29378: NEG
29379: PUSH
29380: LD_INT 1
29382: NEG
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 4
29390: NEG
29391: PUSH
29392: LD_INT 2
29394: NEG
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 2
29402: NEG
29403: PUSH
29404: LD_INT 2
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 4
29413: NEG
29414: PUSH
29415: LD_INT 4
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 4
29425: NEG
29426: PUSH
29427: LD_INT 5
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 3
29437: NEG
29438: PUSH
29439: LD_INT 4
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 3
29449: NEG
29450: PUSH
29451: LD_INT 3
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 4
29461: NEG
29462: PUSH
29463: LD_INT 3
29465: NEG
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 5
29473: NEG
29474: PUSH
29475: LD_INT 4
29477: NEG
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 5
29485: NEG
29486: PUSH
29487: LD_INT 5
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 3
29497: NEG
29498: PUSH
29499: LD_INT 5
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 5
29509: NEG
29510: PUSH
29511: LD_INT 3
29513: NEG
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29566: LD_ADDR_VAR 0 30
29570: PUSH
29571: LD_INT 4
29573: PUSH
29574: LD_INT 4
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 4
29583: PUSH
29584: LD_INT 3
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 5
29593: PUSH
29594: LD_INT 4
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 5
29603: PUSH
29604: LD_INT 5
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 4
29613: PUSH
29614: LD_INT 5
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: LD_INT 4
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: LD_INT 3
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 5
29643: PUSH
29644: LD_INT 3
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 3
29653: PUSH
29654: LD_INT 5
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 0
29663: PUSH
29664: LD_INT 3
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 0
29673: PUSH
29674: LD_INT 2
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: LD_INT 3
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: LD_INT 4
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: LD_INT 4
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: NEG
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 1
29724: NEG
29725: PUSH
29726: LD_INT 2
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: LD_INT 4
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 2
29745: NEG
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 4
29756: NEG
29757: PUSH
29758: LD_INT 0
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 4
29767: NEG
29768: PUSH
29769: LD_INT 1
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 3
29779: NEG
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 3
29790: NEG
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 4
29801: NEG
29802: PUSH
29803: LD_INT 1
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 5
29812: NEG
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 5
29823: NEG
29824: PUSH
29825: LD_INT 1
29827: NEG
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 5
29835: NEG
29836: PUSH
29837: LD_INT 2
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 3
29847: NEG
29848: PUSH
29849: LD_INT 2
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 3
29858: NEG
29859: PUSH
29860: LD_INT 3
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 3
29870: NEG
29871: PUSH
29872: LD_INT 4
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 2
29882: NEG
29883: PUSH
29884: LD_INT 3
29886: NEG
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 2
29894: NEG
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 3
29906: NEG
29907: PUSH
29908: LD_INT 2
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 4
29918: NEG
29919: PUSH
29920: LD_INT 3
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 4
29930: NEG
29931: PUSH
29932: LD_INT 4
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 2
29942: NEG
29943: PUSH
29944: LD_INT 4
29946: NEG
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 4
29954: NEG
29955: PUSH
29956: LD_INT 2
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: LD_INT 4
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: LD_INT 5
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: LD_INT 4
29991: NEG
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: PUSH
30000: LD_INT 3
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: LD_INT 3
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: NEG
30022: PUSH
30023: LD_INT 4
30025: NEG
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 1
30033: NEG
30034: PUSH
30035: LD_INT 5
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 2
30045: PUSH
30046: LD_INT 3
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 2
30056: NEG
30057: PUSH
30058: LD_INT 5
30060: NEG
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30113: LD_ADDR_VAR 0 31
30117: PUSH
30118: LD_INT 0
30120: PUSH
30121: LD_INT 4
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: LD_INT 3
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: LD_INT 4
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: LD_INT 5
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: LD_INT 5
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: NEG
30171: PUSH
30172: LD_INT 4
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 1
30181: NEG
30182: PUSH
30183: LD_INT 3
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: LD_INT 5
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 2
30202: NEG
30203: PUSH
30204: LD_INT 3
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 3
30213: NEG
30214: PUSH
30215: LD_INT 0
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 3
30224: NEG
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 2
30236: NEG
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 2
30247: NEG
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 3
30258: NEG
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 4
30269: NEG
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 4
30280: NEG
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 4
30292: NEG
30293: PUSH
30294: LD_INT 2
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 2
30304: NEG
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 4
30315: NEG
30316: PUSH
30317: LD_INT 4
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 4
30327: NEG
30328: PUSH
30329: LD_INT 5
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 3
30339: NEG
30340: PUSH
30341: LD_INT 4
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 3
30351: NEG
30352: PUSH
30353: LD_INT 3
30355: NEG
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 4
30363: NEG
30364: PUSH
30365: LD_INT 3
30367: NEG
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 5
30375: NEG
30376: PUSH
30377: LD_INT 4
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 5
30387: NEG
30388: PUSH
30389: LD_INT 5
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: NEG
30400: PUSH
30401: LD_INT 5
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 5
30411: NEG
30412: PUSH
30413: LD_INT 3
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: LD_INT 3
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 0
30434: PUSH
30435: LD_INT 4
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: LD_INT 3
30448: NEG
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: LD_INT 2
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: LD_INT 3
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 1
30490: NEG
30491: PUSH
30492: LD_INT 4
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: LD_INT 2
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 2
30513: NEG
30514: PUSH
30515: LD_INT 4
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 4
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 4
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 5
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 5
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 4
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 3
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 3
30586: PUSH
30587: LD_INT 1
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 3
30597: PUSH
30598: LD_INT 2
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 5
30608: PUSH
30609: LD_INT 2
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30663: LD_ADDR_VAR 0 32
30667: PUSH
30668: LD_INT 4
30670: NEG
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 4
30681: NEG
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 3
30693: NEG
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 3
30704: NEG
30705: PUSH
30706: LD_INT 1
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 4
30715: NEG
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 5
30726: NEG
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 5
30737: NEG
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 5
30749: NEG
30750: PUSH
30751: LD_INT 2
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 3
30761: NEG
30762: PUSH
30763: LD_INT 2
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 3
30772: NEG
30773: PUSH
30774: LD_INT 3
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 3
30784: NEG
30785: PUSH
30786: LD_INT 4
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 2
30796: NEG
30797: PUSH
30798: LD_INT 3
30800: NEG
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 2
30808: NEG
30809: PUSH
30810: LD_INT 2
30812: NEG
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 3
30820: NEG
30821: PUSH
30822: LD_INT 2
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 4
30832: NEG
30833: PUSH
30834: LD_INT 3
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 4
30844: NEG
30845: PUSH
30846: LD_INT 4
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 2
30856: NEG
30857: PUSH
30858: LD_INT 4
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 4
30868: NEG
30869: PUSH
30870: LD_INT 2
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: LD_INT 4
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: LD_INT 5
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: LD_INT 4
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 3
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: LD_INT 3
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: LD_INT 4
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: NEG
30948: PUSH
30949: LD_INT 5
30951: NEG
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: LD_INT 3
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 2
30970: NEG
30971: PUSH
30972: LD_INT 5
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 3
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 4
31003: PUSH
31004: LD_INT 0
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 4
31013: PUSH
31014: LD_INT 1
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 3
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 2
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 2
31043: PUSH
31044: LD_INT 1
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: LD_INT 2
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 4
31065: PUSH
31066: LD_INT 2
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 4
31075: PUSH
31076: LD_INT 4
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 4
31085: PUSH
31086: LD_INT 3
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 5
31095: PUSH
31096: LD_INT 4
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 5
31105: PUSH
31106: LD_INT 5
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 4
31115: PUSH
31116: LD_INT 5
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 4
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: LD_INT 3
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 5
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 3
31155: PUSH
31156: LD_INT 5
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31210: LD_ADDR_VAR 0 33
31214: PUSH
31215: LD_INT 4
31217: NEG
31218: PUSH
31219: LD_INT 4
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 4
31229: NEG
31230: PUSH
31231: LD_INT 5
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 3
31241: NEG
31242: PUSH
31243: LD_INT 4
31245: NEG
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 3
31253: NEG
31254: PUSH
31255: LD_INT 3
31257: NEG
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 4
31265: NEG
31266: PUSH
31267: LD_INT 3
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 5
31277: NEG
31278: PUSH
31279: LD_INT 4
31281: NEG
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 5
31289: NEG
31290: PUSH
31291: LD_INT 5
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 3
31301: NEG
31302: PUSH
31303: LD_INT 5
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 5
31313: NEG
31314: PUSH
31315: LD_INT 3
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: LD_INT 3
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: LD_INT 4
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: LD_INT 3
31350: NEG
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: LD_INT 2
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: LD_INT 2
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: NEG
31381: PUSH
31382: LD_INT 3
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: LD_INT 4
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 2
31404: PUSH
31405: LD_INT 2
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: NEG
31416: PUSH
31417: LD_INT 4
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 4
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 4
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 5
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 5
31458: PUSH
31459: LD_INT 1
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 4
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 3
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 3
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 5
31510: PUSH
31511: LD_INT 2
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 3
31520: PUSH
31521: LD_INT 3
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 3
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 4
31540: PUSH
31541: LD_INT 3
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 4
31550: PUSH
31551: LD_INT 4
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 3
31560: PUSH
31561: LD_INT 4
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: LD_INT 2
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 4
31590: PUSH
31591: LD_INT 2
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: LD_INT 4
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: LD_INT 4
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: LD_INT 3
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: LD_INT 4
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 1
31640: PUSH
31641: LD_INT 5
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: LD_INT 5
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: LD_INT 4
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: LD_INT 3
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: LD_INT 5
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: NEG
31693: PUSH
31694: LD_INT 3
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31748: LD_ADDR_VAR 0 34
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: LD_INT 4
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: LD_INT 5
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: LD_INT 4
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: LD_INT 3
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 0
31799: PUSH
31800: LD_INT 3
31802: NEG
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: LD_INT 4
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: LD_INT 5
31826: NEG
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 2
31834: PUSH
31835: LD_INT 3
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 2
31845: NEG
31846: PUSH
31847: LD_INT 5
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 3
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 3
31867: PUSH
31868: LD_INT 1
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 4
31878: PUSH
31879: LD_INT 0
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 4
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 3
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 2
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: LD_INT 2
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 4
31940: PUSH
31941: LD_INT 2
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 4
31950: PUSH
31951: LD_INT 4
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 4
31960: PUSH
31961: LD_INT 3
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 5
31970: PUSH
31971: LD_INT 4
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 5
31980: PUSH
31981: LD_INT 5
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 4
31990: PUSH
31991: LD_INT 5
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 3
32000: PUSH
32001: LD_INT 4
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 3
32010: PUSH
32011: LD_INT 3
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 5
32020: PUSH
32021: LD_INT 3
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 3
32030: PUSH
32031: LD_INT 5
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: LD_INT 3
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 0
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: LD_INT 3
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: LD_INT 4
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: LD_INT 4
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: LD_INT 3
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: LD_INT 4
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 4
32133: NEG
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 4
32144: NEG
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 3
32156: NEG
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 3
32167: NEG
32168: PUSH
32169: LD_INT 1
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 4
32178: NEG
32179: PUSH
32180: LD_INT 1
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 5
32189: NEG
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 5
32200: NEG
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 5
32212: NEG
32213: PUSH
32214: LD_INT 2
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 3
32224: NEG
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: ST_TO_ADDR
// end ; end ;
32280: GO 32283
32282: POP
// case btype of b_depot , b_warehouse :
32283: LD_VAR 0 1
32287: PUSH
32288: LD_INT 0
32290: DOUBLE
32291: EQUAL
32292: IFTRUE 32302
32294: LD_INT 1
32296: DOUBLE
32297: EQUAL
32298: IFTRUE 32302
32300: GO 32503
32302: POP
// case nation of nation_american :
32303: LD_VAR 0 5
32307: PUSH
32308: LD_INT 1
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32316
32314: GO 32372
32316: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32317: LD_ADDR_VAR 0 9
32321: PUSH
32322: LD_VAR 0 11
32326: PUSH
32327: LD_VAR 0 12
32331: PUSH
32332: LD_VAR 0 13
32336: PUSH
32337: LD_VAR 0 14
32341: PUSH
32342: LD_VAR 0 15
32346: PUSH
32347: LD_VAR 0 16
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: PUSH
32360: LD_VAR 0 4
32364: PUSH
32365: LD_INT 1
32367: PLUS
32368: ARRAY
32369: ST_TO_ADDR
32370: GO 32501
32372: LD_INT 2
32374: DOUBLE
32375: EQUAL
32376: IFTRUE 32380
32378: GO 32436
32380: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32381: LD_ADDR_VAR 0 9
32385: PUSH
32386: LD_VAR 0 17
32390: PUSH
32391: LD_VAR 0 18
32395: PUSH
32396: LD_VAR 0 19
32400: PUSH
32401: LD_VAR 0 20
32405: PUSH
32406: LD_VAR 0 21
32410: PUSH
32411: LD_VAR 0 22
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: PUSH
32424: LD_VAR 0 4
32428: PUSH
32429: LD_INT 1
32431: PLUS
32432: ARRAY
32433: ST_TO_ADDR
32434: GO 32501
32436: LD_INT 3
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32444
32442: GO 32500
32444: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32445: LD_ADDR_VAR 0 9
32449: PUSH
32450: LD_VAR 0 23
32454: PUSH
32455: LD_VAR 0 24
32459: PUSH
32460: LD_VAR 0 25
32464: PUSH
32465: LD_VAR 0 26
32469: PUSH
32470: LD_VAR 0 27
32474: PUSH
32475: LD_VAR 0 28
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: PUSH
32488: LD_VAR 0 4
32492: PUSH
32493: LD_INT 1
32495: PLUS
32496: ARRAY
32497: ST_TO_ADDR
32498: GO 32501
32500: POP
32501: GO 33056
32503: LD_INT 2
32505: DOUBLE
32506: EQUAL
32507: IFTRUE 32517
32509: LD_INT 3
32511: DOUBLE
32512: EQUAL
32513: IFTRUE 32517
32515: GO 32573
32517: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32518: LD_ADDR_VAR 0 9
32522: PUSH
32523: LD_VAR 0 29
32527: PUSH
32528: LD_VAR 0 30
32532: PUSH
32533: LD_VAR 0 31
32537: PUSH
32538: LD_VAR 0 32
32542: PUSH
32543: LD_VAR 0 33
32547: PUSH
32548: LD_VAR 0 34
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: PUSH
32561: LD_VAR 0 4
32565: PUSH
32566: LD_INT 1
32568: PLUS
32569: ARRAY
32570: ST_TO_ADDR
32571: GO 33056
32573: LD_INT 16
32575: DOUBLE
32576: EQUAL
32577: IFTRUE 32635
32579: LD_INT 17
32581: DOUBLE
32582: EQUAL
32583: IFTRUE 32635
32585: LD_INT 18
32587: DOUBLE
32588: EQUAL
32589: IFTRUE 32635
32591: LD_INT 19
32593: DOUBLE
32594: EQUAL
32595: IFTRUE 32635
32597: LD_INT 22
32599: DOUBLE
32600: EQUAL
32601: IFTRUE 32635
32603: LD_INT 20
32605: DOUBLE
32606: EQUAL
32607: IFTRUE 32635
32609: LD_INT 21
32611: DOUBLE
32612: EQUAL
32613: IFTRUE 32635
32615: LD_INT 23
32617: DOUBLE
32618: EQUAL
32619: IFTRUE 32635
32621: LD_INT 24
32623: DOUBLE
32624: EQUAL
32625: IFTRUE 32635
32627: LD_INT 25
32629: DOUBLE
32630: EQUAL
32631: IFTRUE 32635
32633: GO 32691
32635: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32636: LD_ADDR_VAR 0 9
32640: PUSH
32641: LD_VAR 0 35
32645: PUSH
32646: LD_VAR 0 36
32650: PUSH
32651: LD_VAR 0 37
32655: PUSH
32656: LD_VAR 0 38
32660: PUSH
32661: LD_VAR 0 39
32665: PUSH
32666: LD_VAR 0 40
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: PUSH
32679: LD_VAR 0 4
32683: PUSH
32684: LD_INT 1
32686: PLUS
32687: ARRAY
32688: ST_TO_ADDR
32689: GO 33056
32691: LD_INT 6
32693: DOUBLE
32694: EQUAL
32695: IFTRUE 32747
32697: LD_INT 7
32699: DOUBLE
32700: EQUAL
32701: IFTRUE 32747
32703: LD_INT 8
32705: DOUBLE
32706: EQUAL
32707: IFTRUE 32747
32709: LD_INT 13
32711: DOUBLE
32712: EQUAL
32713: IFTRUE 32747
32715: LD_INT 12
32717: DOUBLE
32718: EQUAL
32719: IFTRUE 32747
32721: LD_INT 15
32723: DOUBLE
32724: EQUAL
32725: IFTRUE 32747
32727: LD_INT 11
32729: DOUBLE
32730: EQUAL
32731: IFTRUE 32747
32733: LD_INT 14
32735: DOUBLE
32736: EQUAL
32737: IFTRUE 32747
32739: LD_INT 10
32741: DOUBLE
32742: EQUAL
32743: IFTRUE 32747
32745: GO 32803
32747: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32748: LD_ADDR_VAR 0 9
32752: PUSH
32753: LD_VAR 0 41
32757: PUSH
32758: LD_VAR 0 42
32762: PUSH
32763: LD_VAR 0 43
32767: PUSH
32768: LD_VAR 0 44
32772: PUSH
32773: LD_VAR 0 45
32777: PUSH
32778: LD_VAR 0 46
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: PUSH
32791: LD_VAR 0 4
32795: PUSH
32796: LD_INT 1
32798: PLUS
32799: ARRAY
32800: ST_TO_ADDR
32801: GO 33056
32803: LD_INT 36
32805: DOUBLE
32806: EQUAL
32807: IFTRUE 32811
32809: GO 32867
32811: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32812: LD_ADDR_VAR 0 9
32816: PUSH
32817: LD_VAR 0 47
32821: PUSH
32822: LD_VAR 0 48
32826: PUSH
32827: LD_VAR 0 49
32831: PUSH
32832: LD_VAR 0 50
32836: PUSH
32837: LD_VAR 0 51
32841: PUSH
32842: LD_VAR 0 52
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: PUSH
32855: LD_VAR 0 4
32859: PUSH
32860: LD_INT 1
32862: PLUS
32863: ARRAY
32864: ST_TO_ADDR
32865: GO 33056
32867: LD_INT 4
32869: DOUBLE
32870: EQUAL
32871: IFTRUE 32893
32873: LD_INT 5
32875: DOUBLE
32876: EQUAL
32877: IFTRUE 32893
32879: LD_INT 34
32881: DOUBLE
32882: EQUAL
32883: IFTRUE 32893
32885: LD_INT 37
32887: DOUBLE
32888: EQUAL
32889: IFTRUE 32893
32891: GO 32949
32893: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32894: LD_ADDR_VAR 0 9
32898: PUSH
32899: LD_VAR 0 53
32903: PUSH
32904: LD_VAR 0 54
32908: PUSH
32909: LD_VAR 0 55
32913: PUSH
32914: LD_VAR 0 56
32918: PUSH
32919: LD_VAR 0 57
32923: PUSH
32924: LD_VAR 0 58
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: PUSH
32937: LD_VAR 0 4
32941: PUSH
32942: LD_INT 1
32944: PLUS
32945: ARRAY
32946: ST_TO_ADDR
32947: GO 33056
32949: LD_INT 31
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32999
32955: LD_INT 32
32957: DOUBLE
32958: EQUAL
32959: IFTRUE 32999
32961: LD_INT 33
32963: DOUBLE
32964: EQUAL
32965: IFTRUE 32999
32967: LD_INT 27
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32999
32973: LD_INT 26
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32999
32979: LD_INT 28
32981: DOUBLE
32982: EQUAL
32983: IFTRUE 32999
32985: LD_INT 29
32987: DOUBLE
32988: EQUAL
32989: IFTRUE 32999
32991: LD_INT 30
32993: DOUBLE
32994: EQUAL
32995: IFTRUE 32999
32997: GO 33055
32999: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33000: LD_ADDR_VAR 0 9
33004: PUSH
33005: LD_VAR 0 59
33009: PUSH
33010: LD_VAR 0 60
33014: PUSH
33015: LD_VAR 0 61
33019: PUSH
33020: LD_VAR 0 62
33024: PUSH
33025: LD_VAR 0 63
33029: PUSH
33030: LD_VAR 0 64
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: PUSH
33043: LD_VAR 0 4
33047: PUSH
33048: LD_INT 1
33050: PLUS
33051: ARRAY
33052: ST_TO_ADDR
33053: GO 33056
33055: POP
// temp_list2 = [ ] ;
33056: LD_ADDR_VAR 0 10
33060: PUSH
33061: EMPTY
33062: ST_TO_ADDR
// for i in temp_list do
33063: LD_ADDR_VAR 0 8
33067: PUSH
33068: LD_VAR 0 9
33072: PUSH
33073: FOR_IN
33074: IFFALSE 33126
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33076: LD_ADDR_VAR 0 10
33080: PUSH
33081: LD_VAR 0 10
33085: PUSH
33086: LD_VAR 0 8
33090: PUSH
33091: LD_INT 1
33093: ARRAY
33094: PUSH
33095: LD_VAR 0 2
33099: PLUS
33100: PUSH
33101: LD_VAR 0 8
33105: PUSH
33106: LD_INT 2
33108: ARRAY
33109: PUSH
33110: LD_VAR 0 3
33114: PLUS
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: EMPTY
33121: LIST
33122: ADD
33123: ST_TO_ADDR
33124: GO 33073
33126: POP
33127: POP
// result = temp_list2 ;
33128: LD_ADDR_VAR 0 7
33132: PUSH
33133: LD_VAR 0 10
33137: ST_TO_ADDR
// end ;
33138: LD_VAR 0 7
33142: RET
// export function EnemyInRange ( unit , dist ) ; begin
33143: LD_INT 0
33145: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33146: LD_ADDR_VAR 0 3
33150: PUSH
33151: LD_VAR 0 1
33155: PPUSH
33156: CALL_OW 255
33160: PPUSH
33161: LD_VAR 0 1
33165: PPUSH
33166: CALL_OW 250
33170: PPUSH
33171: LD_VAR 0 1
33175: PPUSH
33176: CALL_OW 251
33180: PPUSH
33181: LD_VAR 0 2
33185: PPUSH
33186: CALL 6545 0 4
33190: PUSH
33191: LD_INT 4
33193: ARRAY
33194: ST_TO_ADDR
// end ;
33195: LD_VAR 0 3
33199: RET
// export function PlayerSeeMe ( unit ) ; begin
33200: LD_INT 0
33202: PPUSH
// result := See ( your_side , unit ) ;
33203: LD_ADDR_VAR 0 2
33207: PUSH
33208: LD_OWVAR 2
33212: PPUSH
33213: LD_VAR 0 1
33217: PPUSH
33218: CALL_OW 292
33222: ST_TO_ADDR
// end ;
33223: LD_VAR 0 2
33227: RET
// export function ReverseDir ( unit ) ; begin
33228: LD_INT 0
33230: PPUSH
// if not unit then
33231: LD_VAR 0 1
33235: NOT
33236: IFFALSE 33240
// exit ;
33238: GO 33263
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33240: LD_ADDR_VAR 0 2
33244: PUSH
33245: LD_VAR 0 1
33249: PPUSH
33250: CALL_OW 254
33254: PUSH
33255: LD_INT 3
33257: PLUS
33258: PUSH
33259: LD_INT 6
33261: MOD
33262: ST_TO_ADDR
// end ;
33263: LD_VAR 0 2
33267: RET
// export function ReverseArray ( array ) ; var i ; begin
33268: LD_INT 0
33270: PPUSH
33271: PPUSH
// if not array then
33272: LD_VAR 0 1
33276: NOT
33277: IFFALSE 33281
// exit ;
33279: GO 33336
// result := [ ] ;
33281: LD_ADDR_VAR 0 2
33285: PUSH
33286: EMPTY
33287: ST_TO_ADDR
// for i := array downto 1 do
33288: LD_ADDR_VAR 0 3
33292: PUSH
33293: DOUBLE
33294: LD_VAR 0 1
33298: INC
33299: ST_TO_ADDR
33300: LD_INT 1
33302: PUSH
33303: FOR_DOWNTO
33304: IFFALSE 33334
// result := Join ( result , array [ i ] ) ;
33306: LD_ADDR_VAR 0 2
33310: PUSH
33311: LD_VAR 0 2
33315: PPUSH
33316: LD_VAR 0 1
33320: PUSH
33321: LD_VAR 0 3
33325: ARRAY
33326: PPUSH
33327: CALL 37980 0 2
33331: ST_TO_ADDR
33332: GO 33303
33334: POP
33335: POP
// end ;
33336: LD_VAR 0 2
33340: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33341: LD_INT 0
33343: PPUSH
33344: PPUSH
33345: PPUSH
33346: PPUSH
33347: PPUSH
33348: PPUSH
// if not unit or not hexes then
33349: LD_VAR 0 1
33353: NOT
33354: PUSH
33355: LD_VAR 0 2
33359: NOT
33360: OR
33361: IFFALSE 33365
// exit ;
33363: GO 33488
// dist := 9999 ;
33365: LD_ADDR_VAR 0 5
33369: PUSH
33370: LD_INT 9999
33372: ST_TO_ADDR
// for i = 1 to hexes do
33373: LD_ADDR_VAR 0 4
33377: PUSH
33378: DOUBLE
33379: LD_INT 1
33381: DEC
33382: ST_TO_ADDR
33383: LD_VAR 0 2
33387: PUSH
33388: FOR_TO
33389: IFFALSE 33476
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33391: LD_ADDR_VAR 0 6
33395: PUSH
33396: LD_VAR 0 1
33400: PPUSH
33401: LD_VAR 0 2
33405: PUSH
33406: LD_VAR 0 4
33410: ARRAY
33411: PUSH
33412: LD_INT 1
33414: ARRAY
33415: PPUSH
33416: LD_VAR 0 2
33420: PUSH
33421: LD_VAR 0 4
33425: ARRAY
33426: PUSH
33427: LD_INT 2
33429: ARRAY
33430: PPUSH
33431: CALL_OW 297
33435: ST_TO_ADDR
// if tdist < dist then
33436: LD_VAR 0 6
33440: PUSH
33441: LD_VAR 0 5
33445: LESS
33446: IFFALSE 33474
// begin hex := hexes [ i ] ;
33448: LD_ADDR_VAR 0 8
33452: PUSH
33453: LD_VAR 0 2
33457: PUSH
33458: LD_VAR 0 4
33462: ARRAY
33463: ST_TO_ADDR
// dist := tdist ;
33464: LD_ADDR_VAR 0 5
33468: PUSH
33469: LD_VAR 0 6
33473: ST_TO_ADDR
// end ; end ;
33474: GO 33388
33476: POP
33477: POP
// result := hex ;
33478: LD_ADDR_VAR 0 3
33482: PUSH
33483: LD_VAR 0 8
33487: ST_TO_ADDR
// end ;
33488: LD_VAR 0 3
33492: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33493: LD_INT 0
33495: PPUSH
33496: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33497: LD_VAR 0 1
33501: NOT
33502: PUSH
33503: LD_VAR 0 1
33507: PUSH
33508: LD_INT 21
33510: PUSH
33511: LD_INT 2
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 23
33520: PUSH
33521: LD_INT 2
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PPUSH
33532: CALL_OW 69
33536: IN
33537: NOT
33538: OR
33539: IFFALSE 33543
// exit ;
33541: GO 33590
// for i = 1 to 3 do
33543: LD_ADDR_VAR 0 3
33547: PUSH
33548: DOUBLE
33549: LD_INT 1
33551: DEC
33552: ST_TO_ADDR
33553: LD_INT 3
33555: PUSH
33556: FOR_TO
33557: IFFALSE 33588
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33559: LD_VAR 0 1
33563: PPUSH
33564: CALL_OW 250
33568: PPUSH
33569: LD_VAR 0 1
33573: PPUSH
33574: CALL_OW 251
33578: PPUSH
33579: LD_INT 1
33581: PPUSH
33582: CALL_OW 453
33586: GO 33556
33588: POP
33589: POP
// end ;
33590: LD_VAR 0 2
33594: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33595: LD_INT 0
33597: PPUSH
33598: PPUSH
33599: PPUSH
33600: PPUSH
33601: PPUSH
33602: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33603: LD_VAR 0 1
33607: NOT
33608: PUSH
33609: LD_VAR 0 2
33613: NOT
33614: OR
33615: PUSH
33616: LD_VAR 0 1
33620: PPUSH
33621: CALL_OW 314
33625: OR
33626: IFFALSE 33630
// exit ;
33628: GO 34097
// if GetLives ( i ) < 250 then
33630: LD_VAR 0 4
33634: PPUSH
33635: CALL_OW 256
33639: PUSH
33640: LD_INT 250
33642: LESS
33643: IFFALSE 33656
// begin ComAutodestruct ( i ) ;
33645: LD_VAR 0 4
33649: PPUSH
33650: CALL 33493 0 1
// exit ;
33654: GO 34097
// end ; x := GetX ( enemy_unit ) ;
33656: LD_ADDR_VAR 0 7
33660: PUSH
33661: LD_VAR 0 2
33665: PPUSH
33666: CALL_OW 250
33670: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33671: LD_ADDR_VAR 0 8
33675: PUSH
33676: LD_VAR 0 2
33680: PPUSH
33681: CALL_OW 251
33685: ST_TO_ADDR
// if not x or not y then
33686: LD_VAR 0 7
33690: NOT
33691: PUSH
33692: LD_VAR 0 8
33696: NOT
33697: OR
33698: IFFALSE 33702
// exit ;
33700: GO 34097
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33702: LD_ADDR_VAR 0 6
33706: PUSH
33707: LD_VAR 0 7
33711: PPUSH
33712: LD_INT 0
33714: PPUSH
33715: LD_INT 4
33717: PPUSH
33718: CALL_OW 272
33722: PUSH
33723: LD_VAR 0 8
33727: PPUSH
33728: LD_INT 0
33730: PPUSH
33731: LD_INT 4
33733: PPUSH
33734: CALL_OW 273
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_VAR 0 7
33747: PPUSH
33748: LD_INT 1
33750: PPUSH
33751: LD_INT 4
33753: PPUSH
33754: CALL_OW 272
33758: PUSH
33759: LD_VAR 0 8
33763: PPUSH
33764: LD_INT 1
33766: PPUSH
33767: LD_INT 4
33769: PPUSH
33770: CALL_OW 273
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_VAR 0 7
33783: PPUSH
33784: LD_INT 2
33786: PPUSH
33787: LD_INT 4
33789: PPUSH
33790: CALL_OW 272
33794: PUSH
33795: LD_VAR 0 8
33799: PPUSH
33800: LD_INT 2
33802: PPUSH
33803: LD_INT 4
33805: PPUSH
33806: CALL_OW 273
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_VAR 0 7
33819: PPUSH
33820: LD_INT 3
33822: PPUSH
33823: LD_INT 4
33825: PPUSH
33826: CALL_OW 272
33830: PUSH
33831: LD_VAR 0 8
33835: PPUSH
33836: LD_INT 3
33838: PPUSH
33839: LD_INT 4
33841: PPUSH
33842: CALL_OW 273
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_VAR 0 7
33855: PPUSH
33856: LD_INT 4
33858: PPUSH
33859: LD_INT 4
33861: PPUSH
33862: CALL_OW 272
33866: PUSH
33867: LD_VAR 0 8
33871: PPUSH
33872: LD_INT 4
33874: PPUSH
33875: LD_INT 4
33877: PPUSH
33878: CALL_OW 273
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_VAR 0 7
33891: PPUSH
33892: LD_INT 5
33894: PPUSH
33895: LD_INT 4
33897: PPUSH
33898: CALL_OW 272
33902: PUSH
33903: LD_VAR 0 8
33907: PPUSH
33908: LD_INT 5
33910: PPUSH
33911: LD_INT 4
33913: PPUSH
33914: CALL_OW 273
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: ST_TO_ADDR
// for i = tmp downto 1 do
33931: LD_ADDR_VAR 0 4
33935: PUSH
33936: DOUBLE
33937: LD_VAR 0 6
33941: INC
33942: ST_TO_ADDR
33943: LD_INT 1
33945: PUSH
33946: FOR_DOWNTO
33947: IFFALSE 34048
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33949: LD_VAR 0 6
33953: PUSH
33954: LD_VAR 0 4
33958: ARRAY
33959: PUSH
33960: LD_INT 1
33962: ARRAY
33963: PPUSH
33964: LD_VAR 0 6
33968: PUSH
33969: LD_VAR 0 4
33973: ARRAY
33974: PUSH
33975: LD_INT 2
33977: ARRAY
33978: PPUSH
33979: CALL_OW 488
33983: NOT
33984: PUSH
33985: LD_VAR 0 6
33989: PUSH
33990: LD_VAR 0 4
33994: ARRAY
33995: PUSH
33996: LD_INT 1
33998: ARRAY
33999: PPUSH
34000: LD_VAR 0 6
34004: PUSH
34005: LD_VAR 0 4
34009: ARRAY
34010: PUSH
34011: LD_INT 2
34013: ARRAY
34014: PPUSH
34015: CALL_OW 428
34019: PUSH
34020: LD_INT 0
34022: NONEQUAL
34023: OR
34024: IFFALSE 34046
// tmp := Delete ( tmp , i ) ;
34026: LD_ADDR_VAR 0 6
34030: PUSH
34031: LD_VAR 0 6
34035: PPUSH
34036: LD_VAR 0 4
34040: PPUSH
34041: CALL_OW 3
34045: ST_TO_ADDR
34046: GO 33946
34048: POP
34049: POP
// j := GetClosestHex ( unit , tmp ) ;
34050: LD_ADDR_VAR 0 5
34054: PUSH
34055: LD_VAR 0 1
34059: PPUSH
34060: LD_VAR 0 6
34064: PPUSH
34065: CALL 33341 0 2
34069: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34070: LD_VAR 0 1
34074: PPUSH
34075: LD_VAR 0 5
34079: PUSH
34080: LD_INT 1
34082: ARRAY
34083: PPUSH
34084: LD_VAR 0 5
34088: PUSH
34089: LD_INT 2
34091: ARRAY
34092: PPUSH
34093: CALL_OW 111
// end ;
34097: LD_VAR 0 3
34101: RET
// export function PrepareApemanSoldier ( ) ; begin
34102: LD_INT 0
34104: PPUSH
// uc_nation := 0 ;
34105: LD_ADDR_OWVAR 21
34109: PUSH
34110: LD_INT 0
34112: ST_TO_ADDR
// hc_sex := sex_male ;
34113: LD_ADDR_OWVAR 27
34117: PUSH
34118: LD_INT 1
34120: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34121: LD_ADDR_OWVAR 28
34125: PUSH
34126: LD_INT 15
34128: ST_TO_ADDR
// hc_gallery :=  ;
34129: LD_ADDR_OWVAR 33
34133: PUSH
34134: LD_STRING 
34136: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34137: LD_ADDR_OWVAR 31
34141: PUSH
34142: LD_INT 0
34144: PPUSH
34145: LD_INT 3
34147: PPUSH
34148: CALL_OW 12
34152: PUSH
34153: LD_INT 0
34155: PPUSH
34156: LD_INT 3
34158: PPUSH
34159: CALL_OW 12
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: ST_TO_ADDR
// end ;
34176: LD_VAR 0 1
34180: RET
// export function PrepareApemanEngineer ( ) ; begin
34181: LD_INT 0
34183: PPUSH
// uc_nation := 0 ;
34184: LD_ADDR_OWVAR 21
34188: PUSH
34189: LD_INT 0
34191: ST_TO_ADDR
// hc_sex := sex_male ;
34192: LD_ADDR_OWVAR 27
34196: PUSH
34197: LD_INT 1
34199: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34200: LD_ADDR_OWVAR 28
34204: PUSH
34205: LD_INT 16
34207: ST_TO_ADDR
// hc_gallery :=  ;
34208: LD_ADDR_OWVAR 33
34212: PUSH
34213: LD_STRING 
34215: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34216: LD_ADDR_OWVAR 31
34220: PUSH
34221: LD_INT 0
34223: PPUSH
34224: LD_INT 3
34226: PPUSH
34227: CALL_OW 12
34231: PUSH
34232: LD_INT 0
34234: PPUSH
34235: LD_INT 3
34237: PPUSH
34238: CALL_OW 12
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: ST_TO_ADDR
// end ;
34255: LD_VAR 0 1
34259: RET
// export function PrepareApeman ( agressivity ) ; begin
34260: LD_INT 0
34262: PPUSH
// uc_side := 0 ;
34263: LD_ADDR_OWVAR 20
34267: PUSH
34268: LD_INT 0
34270: ST_TO_ADDR
// uc_nation := 0 ;
34271: LD_ADDR_OWVAR 21
34275: PUSH
34276: LD_INT 0
34278: ST_TO_ADDR
// hc_sex := sex_male ;
34279: LD_ADDR_OWVAR 27
34283: PUSH
34284: LD_INT 1
34286: ST_TO_ADDR
// hc_class := class_apeman ;
34287: LD_ADDR_OWVAR 28
34291: PUSH
34292: LD_INT 12
34294: ST_TO_ADDR
// hc_gallery :=  ;
34295: LD_ADDR_OWVAR 33
34299: PUSH
34300: LD_STRING 
34302: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34303: LD_ADDR_OWVAR 35
34307: PUSH
34308: LD_VAR 0 1
34312: NEG
34313: PPUSH
34314: LD_VAR 0 1
34318: PPUSH
34319: CALL_OW 12
34323: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34324: LD_ADDR_OWVAR 31
34328: PUSH
34329: LD_INT 0
34331: PPUSH
34332: LD_INT 3
34334: PPUSH
34335: CALL_OW 12
34339: PUSH
34340: LD_INT 0
34342: PPUSH
34343: LD_INT 3
34345: PPUSH
34346: CALL_OW 12
34350: PUSH
34351: LD_INT 0
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: ST_TO_ADDR
// end ;
34363: LD_VAR 0 2
34367: RET
// export function PrepareTiger ( agressivity ) ; begin
34368: LD_INT 0
34370: PPUSH
// uc_side := 0 ;
34371: LD_ADDR_OWVAR 20
34375: PUSH
34376: LD_INT 0
34378: ST_TO_ADDR
// uc_nation := 0 ;
34379: LD_ADDR_OWVAR 21
34383: PUSH
34384: LD_INT 0
34386: ST_TO_ADDR
// hc_class := class_tiger ;
34387: LD_ADDR_OWVAR 28
34391: PUSH
34392: LD_INT 14
34394: ST_TO_ADDR
// hc_gallery :=  ;
34395: LD_ADDR_OWVAR 33
34399: PUSH
34400: LD_STRING 
34402: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34403: LD_ADDR_OWVAR 35
34407: PUSH
34408: LD_VAR 0 1
34412: NEG
34413: PPUSH
34414: LD_VAR 0 1
34418: PPUSH
34419: CALL_OW 12
34423: ST_TO_ADDR
// end ;
34424: LD_VAR 0 2
34428: RET
// export function PrepareEnchidna ( ) ; begin
34429: LD_INT 0
34431: PPUSH
// uc_side := 0 ;
34432: LD_ADDR_OWVAR 20
34436: PUSH
34437: LD_INT 0
34439: ST_TO_ADDR
// uc_nation := 0 ;
34440: LD_ADDR_OWVAR 21
34444: PUSH
34445: LD_INT 0
34447: ST_TO_ADDR
// hc_class := class_baggie ;
34448: LD_ADDR_OWVAR 28
34452: PUSH
34453: LD_INT 13
34455: ST_TO_ADDR
// hc_gallery :=  ;
34456: LD_ADDR_OWVAR 33
34460: PUSH
34461: LD_STRING 
34463: ST_TO_ADDR
// end ;
34464: LD_VAR 0 1
34468: RET
// export function PrepareFrog ( ) ; begin
34469: LD_INT 0
34471: PPUSH
// uc_side := 0 ;
34472: LD_ADDR_OWVAR 20
34476: PUSH
34477: LD_INT 0
34479: ST_TO_ADDR
// uc_nation := 0 ;
34480: LD_ADDR_OWVAR 21
34484: PUSH
34485: LD_INT 0
34487: ST_TO_ADDR
// hc_class := class_frog ;
34488: LD_ADDR_OWVAR 28
34492: PUSH
34493: LD_INT 19
34495: ST_TO_ADDR
// hc_gallery :=  ;
34496: LD_ADDR_OWVAR 33
34500: PUSH
34501: LD_STRING 
34503: ST_TO_ADDR
// end ;
34504: LD_VAR 0 1
34508: RET
// export function PrepareFish ( ) ; begin
34509: LD_INT 0
34511: PPUSH
// uc_side := 0 ;
34512: LD_ADDR_OWVAR 20
34516: PUSH
34517: LD_INT 0
34519: ST_TO_ADDR
// uc_nation := 0 ;
34520: LD_ADDR_OWVAR 21
34524: PUSH
34525: LD_INT 0
34527: ST_TO_ADDR
// hc_class := class_fish ;
34528: LD_ADDR_OWVAR 28
34532: PUSH
34533: LD_INT 20
34535: ST_TO_ADDR
// hc_gallery :=  ;
34536: LD_ADDR_OWVAR 33
34540: PUSH
34541: LD_STRING 
34543: ST_TO_ADDR
// end ;
34544: LD_VAR 0 1
34548: RET
// export function PrepareBird ( ) ; begin
34549: LD_INT 0
34551: PPUSH
// uc_side := 0 ;
34552: LD_ADDR_OWVAR 20
34556: PUSH
34557: LD_INT 0
34559: ST_TO_ADDR
// uc_nation := 0 ;
34560: LD_ADDR_OWVAR 21
34564: PUSH
34565: LD_INT 0
34567: ST_TO_ADDR
// hc_class := class_phororhacos ;
34568: LD_ADDR_OWVAR 28
34572: PUSH
34573: LD_INT 18
34575: ST_TO_ADDR
// hc_gallery :=  ;
34576: LD_ADDR_OWVAR 33
34580: PUSH
34581: LD_STRING 
34583: ST_TO_ADDR
// end ;
34584: LD_VAR 0 1
34588: RET
// export function PrepareHorse ( ) ; begin
34589: LD_INT 0
34591: PPUSH
// uc_side := 0 ;
34592: LD_ADDR_OWVAR 20
34596: PUSH
34597: LD_INT 0
34599: ST_TO_ADDR
// uc_nation := 0 ;
34600: LD_ADDR_OWVAR 21
34604: PUSH
34605: LD_INT 0
34607: ST_TO_ADDR
// hc_class := class_horse ;
34608: LD_ADDR_OWVAR 28
34612: PUSH
34613: LD_INT 21
34615: ST_TO_ADDR
// hc_gallery :=  ;
34616: LD_ADDR_OWVAR 33
34620: PUSH
34621: LD_STRING 
34623: ST_TO_ADDR
// end ;
34624: LD_VAR 0 1
34628: RET
// export function PrepareMastodont ( ) ; begin
34629: LD_INT 0
34631: PPUSH
// uc_side := 0 ;
34632: LD_ADDR_OWVAR 20
34636: PUSH
34637: LD_INT 0
34639: ST_TO_ADDR
// uc_nation := 0 ;
34640: LD_ADDR_OWVAR 21
34644: PUSH
34645: LD_INT 0
34647: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34648: LD_ADDR_OWVAR 37
34652: PUSH
34653: LD_INT 31
34655: ST_TO_ADDR
// vc_control := control_rider ;
34656: LD_ADDR_OWVAR 38
34660: PUSH
34661: LD_INT 4
34663: ST_TO_ADDR
// end ;
34664: LD_VAR 0 1
34668: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34669: LD_INT 0
34671: PPUSH
34672: PPUSH
34673: PPUSH
// uc_side = 0 ;
34674: LD_ADDR_OWVAR 20
34678: PUSH
34679: LD_INT 0
34681: ST_TO_ADDR
// uc_nation = 0 ;
34682: LD_ADDR_OWVAR 21
34686: PUSH
34687: LD_INT 0
34689: ST_TO_ADDR
// InitHc_All ( ) ;
34690: CALL_OW 584
// InitVc ;
34694: CALL_OW 20
// if mastodonts then
34698: LD_VAR 0 6
34702: IFFALSE 34769
// for i = 1 to mastodonts do
34704: LD_ADDR_VAR 0 11
34708: PUSH
34709: DOUBLE
34710: LD_INT 1
34712: DEC
34713: ST_TO_ADDR
34714: LD_VAR 0 6
34718: PUSH
34719: FOR_TO
34720: IFFALSE 34767
// begin vc_chassis := 31 ;
34722: LD_ADDR_OWVAR 37
34726: PUSH
34727: LD_INT 31
34729: ST_TO_ADDR
// vc_control := control_rider ;
34730: LD_ADDR_OWVAR 38
34734: PUSH
34735: LD_INT 4
34737: ST_TO_ADDR
// animal := CreateVehicle ;
34738: LD_ADDR_VAR 0 12
34742: PUSH
34743: CALL_OW 45
34747: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34748: LD_VAR 0 12
34752: PPUSH
34753: LD_VAR 0 8
34757: PPUSH
34758: LD_INT 0
34760: PPUSH
34761: CALL 36897 0 3
// end ;
34765: GO 34719
34767: POP
34768: POP
// if horses then
34769: LD_VAR 0 5
34773: IFFALSE 34840
// for i = 1 to horses do
34775: LD_ADDR_VAR 0 11
34779: PUSH
34780: DOUBLE
34781: LD_INT 1
34783: DEC
34784: ST_TO_ADDR
34785: LD_VAR 0 5
34789: PUSH
34790: FOR_TO
34791: IFFALSE 34838
// begin hc_class := 21 ;
34793: LD_ADDR_OWVAR 28
34797: PUSH
34798: LD_INT 21
34800: ST_TO_ADDR
// hc_gallery :=  ;
34801: LD_ADDR_OWVAR 33
34805: PUSH
34806: LD_STRING 
34808: ST_TO_ADDR
// animal := CreateHuman ;
34809: LD_ADDR_VAR 0 12
34813: PUSH
34814: CALL_OW 44
34818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34819: LD_VAR 0 12
34823: PPUSH
34824: LD_VAR 0 8
34828: PPUSH
34829: LD_INT 0
34831: PPUSH
34832: CALL 36897 0 3
// end ;
34836: GO 34790
34838: POP
34839: POP
// if birds then
34840: LD_VAR 0 1
34844: IFFALSE 34911
// for i = 1 to birds do
34846: LD_ADDR_VAR 0 11
34850: PUSH
34851: DOUBLE
34852: LD_INT 1
34854: DEC
34855: ST_TO_ADDR
34856: LD_VAR 0 1
34860: PUSH
34861: FOR_TO
34862: IFFALSE 34909
// begin hc_class = 18 ;
34864: LD_ADDR_OWVAR 28
34868: PUSH
34869: LD_INT 18
34871: ST_TO_ADDR
// hc_gallery =  ;
34872: LD_ADDR_OWVAR 33
34876: PUSH
34877: LD_STRING 
34879: ST_TO_ADDR
// animal := CreateHuman ;
34880: LD_ADDR_VAR 0 12
34884: PUSH
34885: CALL_OW 44
34889: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34890: LD_VAR 0 12
34894: PPUSH
34895: LD_VAR 0 8
34899: PPUSH
34900: LD_INT 0
34902: PPUSH
34903: CALL 36897 0 3
// end ;
34907: GO 34861
34909: POP
34910: POP
// if tigers then
34911: LD_VAR 0 2
34915: IFFALSE 34999
// for i = 1 to tigers do
34917: LD_ADDR_VAR 0 11
34921: PUSH
34922: DOUBLE
34923: LD_INT 1
34925: DEC
34926: ST_TO_ADDR
34927: LD_VAR 0 2
34931: PUSH
34932: FOR_TO
34933: IFFALSE 34997
// begin hc_class = class_tiger ;
34935: LD_ADDR_OWVAR 28
34939: PUSH
34940: LD_INT 14
34942: ST_TO_ADDR
// hc_gallery =  ;
34943: LD_ADDR_OWVAR 33
34947: PUSH
34948: LD_STRING 
34950: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34951: LD_ADDR_OWVAR 35
34955: PUSH
34956: LD_INT 7
34958: NEG
34959: PPUSH
34960: LD_INT 7
34962: PPUSH
34963: CALL_OW 12
34967: ST_TO_ADDR
// animal := CreateHuman ;
34968: LD_ADDR_VAR 0 12
34972: PUSH
34973: CALL_OW 44
34977: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34978: LD_VAR 0 12
34982: PPUSH
34983: LD_VAR 0 8
34987: PPUSH
34988: LD_INT 0
34990: PPUSH
34991: CALL 36897 0 3
// end ;
34995: GO 34932
34997: POP
34998: POP
// if apemans then
34999: LD_VAR 0 3
35003: IFFALSE 35126
// for i = 1 to apemans do
35005: LD_ADDR_VAR 0 11
35009: PUSH
35010: DOUBLE
35011: LD_INT 1
35013: DEC
35014: ST_TO_ADDR
35015: LD_VAR 0 3
35019: PUSH
35020: FOR_TO
35021: IFFALSE 35124
// begin hc_class = class_apeman ;
35023: LD_ADDR_OWVAR 28
35027: PUSH
35028: LD_INT 12
35030: ST_TO_ADDR
// hc_gallery =  ;
35031: LD_ADDR_OWVAR 33
35035: PUSH
35036: LD_STRING 
35038: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35039: LD_ADDR_OWVAR 35
35043: PUSH
35044: LD_INT 2
35046: NEG
35047: PPUSH
35048: LD_INT 2
35050: PPUSH
35051: CALL_OW 12
35055: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35056: LD_ADDR_OWVAR 31
35060: PUSH
35061: LD_INT 1
35063: PPUSH
35064: LD_INT 3
35066: PPUSH
35067: CALL_OW 12
35071: PUSH
35072: LD_INT 1
35074: PPUSH
35075: LD_INT 3
35077: PPUSH
35078: CALL_OW 12
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: ST_TO_ADDR
// animal := CreateHuman ;
35095: LD_ADDR_VAR 0 12
35099: PUSH
35100: CALL_OW 44
35104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35105: LD_VAR 0 12
35109: PPUSH
35110: LD_VAR 0 8
35114: PPUSH
35115: LD_INT 0
35117: PPUSH
35118: CALL 36897 0 3
// end ;
35122: GO 35020
35124: POP
35125: POP
// if enchidnas then
35126: LD_VAR 0 4
35130: IFFALSE 35197
// for i = 1 to enchidnas do
35132: LD_ADDR_VAR 0 11
35136: PUSH
35137: DOUBLE
35138: LD_INT 1
35140: DEC
35141: ST_TO_ADDR
35142: LD_VAR 0 4
35146: PUSH
35147: FOR_TO
35148: IFFALSE 35195
// begin hc_class = 13 ;
35150: LD_ADDR_OWVAR 28
35154: PUSH
35155: LD_INT 13
35157: ST_TO_ADDR
// hc_gallery =  ;
35158: LD_ADDR_OWVAR 33
35162: PUSH
35163: LD_STRING 
35165: ST_TO_ADDR
// animal := CreateHuman ;
35166: LD_ADDR_VAR 0 12
35170: PUSH
35171: CALL_OW 44
35175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35176: LD_VAR 0 12
35180: PPUSH
35181: LD_VAR 0 8
35185: PPUSH
35186: LD_INT 0
35188: PPUSH
35189: CALL 36897 0 3
// end ;
35193: GO 35147
35195: POP
35196: POP
// if fishes then
35197: LD_VAR 0 7
35201: IFFALSE 35268
// for i = 1 to fishes do
35203: LD_ADDR_VAR 0 11
35207: PUSH
35208: DOUBLE
35209: LD_INT 1
35211: DEC
35212: ST_TO_ADDR
35213: LD_VAR 0 7
35217: PUSH
35218: FOR_TO
35219: IFFALSE 35266
// begin hc_class = 20 ;
35221: LD_ADDR_OWVAR 28
35225: PUSH
35226: LD_INT 20
35228: ST_TO_ADDR
// hc_gallery =  ;
35229: LD_ADDR_OWVAR 33
35233: PUSH
35234: LD_STRING 
35236: ST_TO_ADDR
// animal := CreateHuman ;
35237: LD_ADDR_VAR 0 12
35241: PUSH
35242: CALL_OW 44
35246: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35247: LD_VAR 0 12
35251: PPUSH
35252: LD_VAR 0 9
35256: PPUSH
35257: LD_INT 0
35259: PPUSH
35260: CALL 36897 0 3
// end ;
35264: GO 35218
35266: POP
35267: POP
// end ;
35268: LD_VAR 0 10
35272: RET
// export function WantHeal ( sci , unit ) ; begin
35273: LD_INT 0
35275: PPUSH
// if GetTaskList ( sci ) > 0 then
35276: LD_VAR 0 1
35280: PPUSH
35281: CALL_OW 437
35285: PUSH
35286: LD_INT 0
35288: GREATER
35289: IFFALSE 35359
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35291: LD_VAR 0 1
35295: PPUSH
35296: CALL_OW 437
35300: PUSH
35301: LD_INT 1
35303: ARRAY
35304: PUSH
35305: LD_INT 1
35307: ARRAY
35308: PUSH
35309: LD_STRING l
35311: EQUAL
35312: PUSH
35313: LD_VAR 0 1
35317: PPUSH
35318: CALL_OW 437
35322: PUSH
35323: LD_INT 1
35325: ARRAY
35326: PUSH
35327: LD_INT 4
35329: ARRAY
35330: PUSH
35331: LD_VAR 0 2
35335: EQUAL
35336: AND
35337: IFFALSE 35349
// result := true else
35339: LD_ADDR_VAR 0 3
35343: PUSH
35344: LD_INT 1
35346: ST_TO_ADDR
35347: GO 35357
// result := false ;
35349: LD_ADDR_VAR 0 3
35353: PUSH
35354: LD_INT 0
35356: ST_TO_ADDR
// end else
35357: GO 35367
// result := false ;
35359: LD_ADDR_VAR 0 3
35363: PUSH
35364: LD_INT 0
35366: ST_TO_ADDR
// end ;
35367: LD_VAR 0 3
35371: RET
// export function HealTarget ( sci ) ; begin
35372: LD_INT 0
35374: PPUSH
// if not sci then
35375: LD_VAR 0 1
35379: NOT
35380: IFFALSE 35384
// exit ;
35382: GO 35449
// result := 0 ;
35384: LD_ADDR_VAR 0 2
35388: PUSH
35389: LD_INT 0
35391: ST_TO_ADDR
// if GetTaskList ( sci ) then
35392: LD_VAR 0 1
35396: PPUSH
35397: CALL_OW 437
35401: IFFALSE 35449
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35403: LD_VAR 0 1
35407: PPUSH
35408: CALL_OW 437
35412: PUSH
35413: LD_INT 1
35415: ARRAY
35416: PUSH
35417: LD_INT 1
35419: ARRAY
35420: PUSH
35421: LD_STRING l
35423: EQUAL
35424: IFFALSE 35449
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35426: LD_ADDR_VAR 0 2
35430: PUSH
35431: LD_VAR 0 1
35435: PPUSH
35436: CALL_OW 437
35440: PUSH
35441: LD_INT 1
35443: ARRAY
35444: PUSH
35445: LD_INT 4
35447: ARRAY
35448: ST_TO_ADDR
// end ;
35449: LD_VAR 0 2
35453: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35454: LD_INT 0
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
// if not base_units then
35460: LD_VAR 0 1
35464: NOT
35465: IFFALSE 35469
// exit ;
35467: GO 35556
// result := false ;
35469: LD_ADDR_VAR 0 2
35473: PUSH
35474: LD_INT 0
35476: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35477: LD_ADDR_VAR 0 5
35481: PUSH
35482: LD_VAR 0 1
35486: PPUSH
35487: LD_INT 21
35489: PUSH
35490: LD_INT 3
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PPUSH
35497: CALL_OW 72
35501: ST_TO_ADDR
// if not tmp then
35502: LD_VAR 0 5
35506: NOT
35507: IFFALSE 35511
// exit ;
35509: GO 35556
// for i in tmp do
35511: LD_ADDR_VAR 0 3
35515: PUSH
35516: LD_VAR 0 5
35520: PUSH
35521: FOR_IN
35522: IFFALSE 35554
// begin result := EnemyInRange ( i , 22 ) ;
35524: LD_ADDR_VAR 0 2
35528: PUSH
35529: LD_VAR 0 3
35533: PPUSH
35534: LD_INT 22
35536: PPUSH
35537: CALL 33143 0 2
35541: ST_TO_ADDR
// if result then
35542: LD_VAR 0 2
35546: IFFALSE 35552
// exit ;
35548: POP
35549: POP
35550: GO 35556
// end ;
35552: GO 35521
35554: POP
35555: POP
// end ;
35556: LD_VAR 0 2
35560: RET
// export function FilterByTag ( units , tag ) ; begin
35561: LD_INT 0
35563: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35564: LD_ADDR_VAR 0 3
35568: PUSH
35569: LD_VAR 0 1
35573: PPUSH
35574: LD_INT 120
35576: PUSH
35577: LD_VAR 0 2
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PPUSH
35586: CALL_OW 72
35590: ST_TO_ADDR
// end ;
35591: LD_VAR 0 3
35595: RET
// export function IsDriver ( un ) ; begin
35596: LD_INT 0
35598: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35599: LD_ADDR_VAR 0 2
35603: PUSH
35604: LD_VAR 0 1
35608: PUSH
35609: LD_INT 55
35611: PUSH
35612: EMPTY
35613: LIST
35614: PPUSH
35615: CALL_OW 69
35619: IN
35620: ST_TO_ADDR
// end ;
35621: LD_VAR 0 2
35625: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35626: LD_INT 0
35628: PPUSH
35629: PPUSH
// list := [ ] ;
35630: LD_ADDR_VAR 0 5
35634: PUSH
35635: EMPTY
35636: ST_TO_ADDR
// case d of 0 :
35637: LD_VAR 0 3
35641: PUSH
35642: LD_INT 0
35644: DOUBLE
35645: EQUAL
35646: IFTRUE 35650
35648: GO 35783
35650: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35651: LD_ADDR_VAR 0 5
35655: PUSH
35656: LD_VAR 0 1
35660: PUSH
35661: LD_INT 4
35663: MINUS
35664: PUSH
35665: LD_VAR 0 2
35669: PUSH
35670: LD_INT 4
35672: MINUS
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: PUSH
35682: LD_VAR 0 1
35686: PUSH
35687: LD_INT 3
35689: MINUS
35690: PUSH
35691: LD_VAR 0 2
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: LIST
35703: PUSH
35704: LD_VAR 0 1
35708: PUSH
35709: LD_INT 4
35711: PLUS
35712: PUSH
35713: LD_VAR 0 2
35717: PUSH
35718: LD_INT 4
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: LIST
35725: PUSH
35726: LD_VAR 0 1
35730: PUSH
35731: LD_INT 3
35733: PLUS
35734: PUSH
35735: LD_VAR 0 2
35739: PUSH
35740: LD_INT 3
35742: PLUS
35743: PUSH
35744: LD_INT 5
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: PUSH
35752: LD_VAR 0 1
35756: PUSH
35757: LD_VAR 0 2
35761: PUSH
35762: LD_INT 4
35764: PLUS
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: LIST
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: ST_TO_ADDR
// end ; 1 :
35781: GO 36481
35783: LD_INT 1
35785: DOUBLE
35786: EQUAL
35787: IFTRUE 35791
35789: GO 35924
35791: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35792: LD_ADDR_VAR 0 5
35796: PUSH
35797: LD_VAR 0 1
35801: PUSH
35802: LD_VAR 0 2
35806: PUSH
35807: LD_INT 4
35809: MINUS
35810: PUSH
35811: LD_INT 3
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: PUSH
35819: LD_VAR 0 1
35823: PUSH
35824: LD_INT 3
35826: MINUS
35827: PUSH
35828: LD_VAR 0 2
35832: PUSH
35833: LD_INT 3
35835: MINUS
35836: PUSH
35837: LD_INT 2
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: PUSH
35845: LD_VAR 0 1
35849: PUSH
35850: LD_INT 4
35852: MINUS
35853: PUSH
35854: LD_VAR 0 2
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: LIST
35866: PUSH
35867: LD_VAR 0 1
35871: PUSH
35872: LD_VAR 0 2
35876: PUSH
35877: LD_INT 3
35879: PLUS
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: LIST
35888: PUSH
35889: LD_VAR 0 1
35893: PUSH
35894: LD_INT 4
35896: PLUS
35897: PUSH
35898: LD_VAR 0 2
35902: PUSH
35903: LD_INT 4
35905: PLUS
35906: PUSH
35907: LD_INT 5
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: ST_TO_ADDR
// end ; 2 :
35922: GO 36481
35924: LD_INT 2
35926: DOUBLE
35927: EQUAL
35928: IFTRUE 35932
35930: GO 36061
35932: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35933: LD_ADDR_VAR 0 5
35937: PUSH
35938: LD_VAR 0 1
35942: PUSH
35943: LD_VAR 0 2
35947: PUSH
35948: LD_INT 3
35950: MINUS
35951: PUSH
35952: LD_INT 3
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: PUSH
35960: LD_VAR 0 1
35964: PUSH
35965: LD_INT 4
35967: PLUS
35968: PUSH
35969: LD_VAR 0 2
35973: PUSH
35974: LD_INT 4
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: LIST
35981: PUSH
35982: LD_VAR 0 1
35986: PUSH
35987: LD_VAR 0 2
35991: PUSH
35992: LD_INT 4
35994: PLUS
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: PUSH
36004: LD_VAR 0 1
36008: PUSH
36009: LD_INT 3
36011: MINUS
36012: PUSH
36013: LD_VAR 0 2
36017: PUSH
36018: LD_INT 1
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: LIST
36025: PUSH
36026: LD_VAR 0 1
36030: PUSH
36031: LD_INT 4
36033: MINUS
36034: PUSH
36035: LD_VAR 0 2
36039: PUSH
36040: LD_INT 4
36042: MINUS
36043: PUSH
36044: LD_INT 2
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: ST_TO_ADDR
// end ; 3 :
36059: GO 36481
36061: LD_INT 3
36063: DOUBLE
36064: EQUAL
36065: IFTRUE 36069
36067: GO 36202
36069: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36070: LD_ADDR_VAR 0 5
36074: PUSH
36075: LD_VAR 0 1
36079: PUSH
36080: LD_INT 3
36082: PLUS
36083: PUSH
36084: LD_VAR 0 2
36088: PUSH
36089: LD_INT 4
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: LIST
36096: PUSH
36097: LD_VAR 0 1
36101: PUSH
36102: LD_INT 4
36104: PLUS
36105: PUSH
36106: LD_VAR 0 2
36110: PUSH
36111: LD_INT 4
36113: PLUS
36114: PUSH
36115: LD_INT 5
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: LIST
36122: PUSH
36123: LD_VAR 0 1
36127: PUSH
36128: LD_INT 4
36130: MINUS
36131: PUSH
36132: LD_VAR 0 2
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: LIST
36144: PUSH
36145: LD_VAR 0 1
36149: PUSH
36150: LD_VAR 0 2
36154: PUSH
36155: LD_INT 4
36157: MINUS
36158: PUSH
36159: LD_INT 3
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: LIST
36166: PUSH
36167: LD_VAR 0 1
36171: PUSH
36172: LD_INT 3
36174: MINUS
36175: PUSH
36176: LD_VAR 0 2
36180: PUSH
36181: LD_INT 3
36183: MINUS
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: LIST
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: ST_TO_ADDR
// end ; 4 :
36200: GO 36481
36202: LD_INT 4
36204: DOUBLE
36205: EQUAL
36206: IFTRUE 36210
36208: GO 36343
36210: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36211: LD_ADDR_VAR 0 5
36215: PUSH
36216: LD_VAR 0 1
36220: PUSH
36221: LD_VAR 0 2
36225: PUSH
36226: LD_INT 4
36228: PLUS
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: LIST
36237: PUSH
36238: LD_VAR 0 1
36242: PUSH
36243: LD_INT 3
36245: PLUS
36246: PUSH
36247: LD_VAR 0 2
36251: PUSH
36252: LD_INT 3
36254: PLUS
36255: PUSH
36256: LD_INT 5
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: LIST
36263: PUSH
36264: LD_VAR 0 1
36268: PUSH
36269: LD_INT 4
36271: PLUS
36272: PUSH
36273: LD_VAR 0 2
36277: PUSH
36278: LD_INT 4
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: PUSH
36286: LD_VAR 0 1
36290: PUSH
36291: LD_VAR 0 2
36295: PUSH
36296: LD_INT 3
36298: MINUS
36299: PUSH
36300: LD_INT 3
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: PUSH
36308: LD_VAR 0 1
36312: PUSH
36313: LD_INT 4
36315: MINUS
36316: PUSH
36317: LD_VAR 0 2
36321: PUSH
36322: LD_INT 4
36324: MINUS
36325: PUSH
36326: LD_INT 2
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: LIST
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: ST_TO_ADDR
// end ; 5 :
36341: GO 36481
36343: LD_INT 5
36345: DOUBLE
36346: EQUAL
36347: IFTRUE 36351
36349: GO 36480
36351: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36352: LD_ADDR_VAR 0 5
36356: PUSH
36357: LD_VAR 0 1
36361: PUSH
36362: LD_INT 4
36364: MINUS
36365: PUSH
36366: LD_VAR 0 2
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: PUSH
36379: LD_VAR 0 1
36383: PUSH
36384: LD_VAR 0 2
36388: PUSH
36389: LD_INT 4
36391: MINUS
36392: PUSH
36393: LD_INT 3
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: PUSH
36401: LD_VAR 0 1
36405: PUSH
36406: LD_INT 4
36408: PLUS
36409: PUSH
36410: LD_VAR 0 2
36414: PUSH
36415: LD_INT 4
36417: PLUS
36418: PUSH
36419: LD_INT 5
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: PUSH
36427: LD_VAR 0 1
36431: PUSH
36432: LD_INT 3
36434: PLUS
36435: PUSH
36436: LD_VAR 0 2
36440: PUSH
36441: LD_INT 4
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: LIST
36448: PUSH
36449: LD_VAR 0 1
36453: PUSH
36454: LD_VAR 0 2
36458: PUSH
36459: LD_INT 3
36461: PLUS
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: LIST
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: ST_TO_ADDR
// end ; end ;
36478: GO 36481
36480: POP
// result := list ;
36481: LD_ADDR_VAR 0 4
36485: PUSH
36486: LD_VAR 0 5
36490: ST_TO_ADDR
// end ;
36491: LD_VAR 0 4
36495: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36496: LD_INT 0
36498: PPUSH
36499: PPUSH
36500: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36501: LD_VAR 0 1
36505: NOT
36506: PUSH
36507: LD_VAR 0 2
36511: PUSH
36512: LD_INT 1
36514: PUSH
36515: LD_INT 2
36517: PUSH
36518: LD_INT 3
36520: PUSH
36521: LD_INT 4
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: IN
36530: NOT
36531: OR
36532: IFFALSE 36536
// exit ;
36534: GO 36619
// tmp := [ ] ;
36536: LD_ADDR_VAR 0 5
36540: PUSH
36541: EMPTY
36542: ST_TO_ADDR
// for i in units do
36543: LD_ADDR_VAR 0 4
36547: PUSH
36548: LD_VAR 0 1
36552: PUSH
36553: FOR_IN
36554: IFFALSE 36588
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36556: LD_ADDR_VAR 0 5
36560: PUSH
36561: LD_VAR 0 5
36565: PPUSH
36566: LD_VAR 0 4
36570: PPUSH
36571: LD_VAR 0 2
36575: PPUSH
36576: CALL_OW 259
36580: PPUSH
36581: CALL 37980 0 2
36585: ST_TO_ADDR
36586: GO 36553
36588: POP
36589: POP
// if not tmp then
36590: LD_VAR 0 5
36594: NOT
36595: IFFALSE 36599
// exit ;
36597: GO 36619
// result := SortListByListDesc ( units , tmp ) ;
36599: LD_ADDR_VAR 0 3
36603: PUSH
36604: LD_VAR 0 1
36608: PPUSH
36609: LD_VAR 0 5
36613: PPUSH
36614: CALL_OW 77
36618: ST_TO_ADDR
// end ;
36619: LD_VAR 0 3
36623: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36624: LD_INT 0
36626: PPUSH
36627: PPUSH
36628: PPUSH
// result := false ;
36629: LD_ADDR_VAR 0 3
36633: PUSH
36634: LD_INT 0
36636: ST_TO_ADDR
// if not building then
36637: LD_VAR 0 2
36641: NOT
36642: IFFALSE 36646
// exit ;
36644: GO 36784
// x := GetX ( building ) ;
36646: LD_ADDR_VAR 0 4
36650: PUSH
36651: LD_VAR 0 2
36655: PPUSH
36656: CALL_OW 250
36660: ST_TO_ADDR
// y := GetY ( building ) ;
36661: LD_ADDR_VAR 0 5
36665: PUSH
36666: LD_VAR 0 2
36670: PPUSH
36671: CALL_OW 251
36675: ST_TO_ADDR
// if not x or not y then
36676: LD_VAR 0 4
36680: NOT
36681: PUSH
36682: LD_VAR 0 5
36686: NOT
36687: OR
36688: IFFALSE 36692
// exit ;
36690: GO 36784
// if GetTaskList ( unit ) then
36692: LD_VAR 0 1
36696: PPUSH
36697: CALL_OW 437
36701: IFFALSE 36784
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36703: LD_STRING e
36705: PUSH
36706: LD_VAR 0 1
36710: PPUSH
36711: CALL_OW 437
36715: PUSH
36716: LD_INT 1
36718: ARRAY
36719: PUSH
36720: LD_INT 1
36722: ARRAY
36723: EQUAL
36724: PUSH
36725: LD_VAR 0 4
36729: PUSH
36730: LD_VAR 0 1
36734: PPUSH
36735: CALL_OW 437
36739: PUSH
36740: LD_INT 1
36742: ARRAY
36743: PUSH
36744: LD_INT 2
36746: ARRAY
36747: EQUAL
36748: AND
36749: PUSH
36750: LD_VAR 0 5
36754: PUSH
36755: LD_VAR 0 1
36759: PPUSH
36760: CALL_OW 437
36764: PUSH
36765: LD_INT 1
36767: ARRAY
36768: PUSH
36769: LD_INT 3
36771: ARRAY
36772: EQUAL
36773: AND
36774: IFFALSE 36784
// result := true end ;
36776: LD_ADDR_VAR 0 3
36780: PUSH
36781: LD_INT 1
36783: ST_TO_ADDR
// end ;
36784: LD_VAR 0 3
36788: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36789: LD_INT 0
36791: PPUSH
// result := false ;
36792: LD_ADDR_VAR 0 4
36796: PUSH
36797: LD_INT 0
36799: ST_TO_ADDR
// if GetTaskList ( unit ) then
36800: LD_VAR 0 1
36804: PPUSH
36805: CALL_OW 437
36809: IFFALSE 36892
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36811: LD_STRING M
36813: PUSH
36814: LD_VAR 0 1
36818: PPUSH
36819: CALL_OW 437
36823: PUSH
36824: LD_INT 1
36826: ARRAY
36827: PUSH
36828: LD_INT 1
36830: ARRAY
36831: EQUAL
36832: PUSH
36833: LD_VAR 0 2
36837: PUSH
36838: LD_VAR 0 1
36842: PPUSH
36843: CALL_OW 437
36847: PUSH
36848: LD_INT 1
36850: ARRAY
36851: PUSH
36852: LD_INT 2
36854: ARRAY
36855: EQUAL
36856: AND
36857: PUSH
36858: LD_VAR 0 3
36862: PUSH
36863: LD_VAR 0 1
36867: PPUSH
36868: CALL_OW 437
36872: PUSH
36873: LD_INT 1
36875: ARRAY
36876: PUSH
36877: LD_INT 3
36879: ARRAY
36880: EQUAL
36881: AND
36882: IFFALSE 36892
// result := true ;
36884: LD_ADDR_VAR 0 4
36888: PUSH
36889: LD_INT 1
36891: ST_TO_ADDR
// end ; end ;
36892: LD_VAR 0 4
36896: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36897: LD_INT 0
36899: PPUSH
36900: PPUSH
36901: PPUSH
36902: PPUSH
// if not unit or not area then
36903: LD_VAR 0 1
36907: NOT
36908: PUSH
36909: LD_VAR 0 2
36913: NOT
36914: OR
36915: IFFALSE 36919
// exit ;
36917: GO 37083
// tmp := AreaToList ( area , i ) ;
36919: LD_ADDR_VAR 0 6
36923: PUSH
36924: LD_VAR 0 2
36928: PPUSH
36929: LD_VAR 0 5
36933: PPUSH
36934: CALL_OW 517
36938: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36939: LD_ADDR_VAR 0 5
36943: PUSH
36944: DOUBLE
36945: LD_INT 1
36947: DEC
36948: ST_TO_ADDR
36949: LD_VAR 0 6
36953: PUSH
36954: LD_INT 1
36956: ARRAY
36957: PUSH
36958: FOR_TO
36959: IFFALSE 37081
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36961: LD_ADDR_VAR 0 7
36965: PUSH
36966: LD_VAR 0 6
36970: PUSH
36971: LD_INT 1
36973: ARRAY
36974: PUSH
36975: LD_VAR 0 5
36979: ARRAY
36980: PUSH
36981: LD_VAR 0 6
36985: PUSH
36986: LD_INT 2
36988: ARRAY
36989: PUSH
36990: LD_VAR 0 5
36994: ARRAY
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37000: LD_VAR 0 7
37004: PUSH
37005: LD_INT 1
37007: ARRAY
37008: PPUSH
37009: LD_VAR 0 7
37013: PUSH
37014: LD_INT 2
37016: ARRAY
37017: PPUSH
37018: CALL_OW 428
37022: PUSH
37023: LD_INT 0
37025: EQUAL
37026: IFFALSE 37079
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37028: LD_VAR 0 1
37032: PPUSH
37033: LD_VAR 0 7
37037: PUSH
37038: LD_INT 1
37040: ARRAY
37041: PPUSH
37042: LD_VAR 0 7
37046: PUSH
37047: LD_INT 2
37049: ARRAY
37050: PPUSH
37051: LD_VAR 0 3
37055: PPUSH
37056: CALL_OW 48
// result := IsPlaced ( unit ) ;
37060: LD_ADDR_VAR 0 4
37064: PUSH
37065: LD_VAR 0 1
37069: PPUSH
37070: CALL_OW 305
37074: ST_TO_ADDR
// exit ;
37075: POP
37076: POP
37077: GO 37083
// end ; end ;
37079: GO 36958
37081: POP
37082: POP
// end ;
37083: LD_VAR 0 4
37087: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37088: LD_INT 0
37090: PPUSH
37091: PPUSH
37092: PPUSH
// if not side or side > 8 then
37093: LD_VAR 0 1
37097: NOT
37098: PUSH
37099: LD_VAR 0 1
37103: PUSH
37104: LD_INT 8
37106: GREATER
37107: OR
37108: IFFALSE 37112
// exit ;
37110: GO 37299
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37112: LD_ADDR_VAR 0 4
37116: PUSH
37117: LD_INT 22
37119: PUSH
37120: LD_VAR 0 1
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 21
37131: PUSH
37132: LD_INT 3
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PPUSH
37143: CALL_OW 69
37147: ST_TO_ADDR
// if not tmp then
37148: LD_VAR 0 4
37152: NOT
37153: IFFALSE 37157
// exit ;
37155: GO 37299
// enable_addtolog := true ;
37157: LD_ADDR_OWVAR 81
37161: PUSH
37162: LD_INT 1
37164: ST_TO_ADDR
// AddToLog ( [ ) ;
37165: LD_STRING [
37167: PPUSH
37168: CALL_OW 561
// for i in tmp do
37172: LD_ADDR_VAR 0 3
37176: PUSH
37177: LD_VAR 0 4
37181: PUSH
37182: FOR_IN
37183: IFFALSE 37290
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37185: LD_STRING [
37187: PUSH
37188: LD_VAR 0 3
37192: PPUSH
37193: CALL_OW 266
37197: STR
37198: PUSH
37199: LD_STRING , 
37201: STR
37202: PUSH
37203: LD_VAR 0 3
37207: PPUSH
37208: CALL_OW 250
37212: STR
37213: PUSH
37214: LD_STRING , 
37216: STR
37217: PUSH
37218: LD_VAR 0 3
37222: PPUSH
37223: CALL_OW 251
37227: STR
37228: PUSH
37229: LD_STRING , 
37231: STR
37232: PUSH
37233: LD_VAR 0 3
37237: PPUSH
37238: CALL_OW 254
37242: STR
37243: PUSH
37244: LD_STRING , 
37246: STR
37247: PUSH
37248: LD_VAR 0 3
37252: PPUSH
37253: LD_INT 1
37255: PPUSH
37256: CALL_OW 268
37260: STR
37261: PUSH
37262: LD_STRING , 
37264: STR
37265: PUSH
37266: LD_VAR 0 3
37270: PPUSH
37271: LD_INT 2
37273: PPUSH
37274: CALL_OW 268
37278: STR
37279: PUSH
37280: LD_STRING ],
37282: STR
37283: PPUSH
37284: CALL_OW 561
// end ;
37288: GO 37182
37290: POP
37291: POP
// AddToLog ( ]; ) ;
37292: LD_STRING ];
37294: PPUSH
37295: CALL_OW 561
// end ;
37299: LD_VAR 0 2
37303: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37304: LD_INT 0
37306: PPUSH
37307: PPUSH
37308: PPUSH
37309: PPUSH
37310: PPUSH
// if not area or not rate or not max then
37311: LD_VAR 0 1
37315: NOT
37316: PUSH
37317: LD_VAR 0 2
37321: NOT
37322: OR
37323: PUSH
37324: LD_VAR 0 4
37328: NOT
37329: OR
37330: IFFALSE 37334
// exit ;
37332: GO 37523
// while 1 do
37334: LD_INT 1
37336: IFFALSE 37523
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37338: LD_ADDR_VAR 0 9
37342: PUSH
37343: LD_VAR 0 1
37347: PPUSH
37348: LD_INT 1
37350: PPUSH
37351: CALL_OW 287
37355: PUSH
37356: LD_INT 10
37358: MUL
37359: ST_TO_ADDR
// r := rate / 10 ;
37360: LD_ADDR_VAR 0 7
37364: PUSH
37365: LD_VAR 0 2
37369: PUSH
37370: LD_INT 10
37372: DIVREAL
37373: ST_TO_ADDR
// time := 1 1$00 ;
37374: LD_ADDR_VAR 0 8
37378: PUSH
37379: LD_INT 2100
37381: ST_TO_ADDR
// if amount < min then
37382: LD_VAR 0 9
37386: PUSH
37387: LD_VAR 0 3
37391: LESS
37392: IFFALSE 37410
// r := r * 2 else
37394: LD_ADDR_VAR 0 7
37398: PUSH
37399: LD_VAR 0 7
37403: PUSH
37404: LD_INT 2
37406: MUL
37407: ST_TO_ADDR
37408: GO 37436
// if amount > max then
37410: LD_VAR 0 9
37414: PUSH
37415: LD_VAR 0 4
37419: GREATER
37420: IFFALSE 37436
// r := r / 2 ;
37422: LD_ADDR_VAR 0 7
37426: PUSH
37427: LD_VAR 0 7
37431: PUSH
37432: LD_INT 2
37434: DIVREAL
37435: ST_TO_ADDR
// time := time / r ;
37436: LD_ADDR_VAR 0 8
37440: PUSH
37441: LD_VAR 0 8
37445: PUSH
37446: LD_VAR 0 7
37450: DIVREAL
37451: ST_TO_ADDR
// if time < 0 then
37452: LD_VAR 0 8
37456: PUSH
37457: LD_INT 0
37459: LESS
37460: IFFALSE 37477
// time := time * - 1 ;
37462: LD_ADDR_VAR 0 8
37466: PUSH
37467: LD_VAR 0 8
37471: PUSH
37472: LD_INT 1
37474: NEG
37475: MUL
37476: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37477: LD_VAR 0 8
37481: PUSH
37482: LD_INT 35
37484: PPUSH
37485: LD_INT 875
37487: PPUSH
37488: CALL_OW 12
37492: PLUS
37493: PPUSH
37494: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37498: LD_INT 1
37500: PPUSH
37501: LD_INT 5
37503: PPUSH
37504: CALL_OW 12
37508: PPUSH
37509: LD_VAR 0 1
37513: PPUSH
37514: LD_INT 1
37516: PPUSH
37517: CALL_OW 55
// end ;
37521: GO 37334
// end ;
37523: LD_VAR 0 5
37527: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37528: LD_INT 0
37530: PPUSH
37531: PPUSH
37532: PPUSH
37533: PPUSH
37534: PPUSH
37535: PPUSH
37536: PPUSH
37537: PPUSH
// if not turrets or not factories then
37538: LD_VAR 0 1
37542: NOT
37543: PUSH
37544: LD_VAR 0 2
37548: NOT
37549: OR
37550: IFFALSE 37554
// exit ;
37552: GO 37861
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37554: LD_ADDR_VAR 0 10
37558: PUSH
37559: LD_INT 5
37561: PUSH
37562: LD_INT 6
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 2
37571: PUSH
37572: LD_INT 4
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 3
37581: PUSH
37582: LD_INT 5
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 24
37596: PUSH
37597: LD_INT 25
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 23
37606: PUSH
37607: LD_INT 27
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 42
37620: PUSH
37621: LD_INT 43
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 44
37630: PUSH
37631: LD_INT 46
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 45
37640: PUSH
37641: LD_INT 47
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: LIST
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: ST_TO_ADDR
// result := [ ] ;
37658: LD_ADDR_VAR 0 3
37662: PUSH
37663: EMPTY
37664: ST_TO_ADDR
// for i in turrets do
37665: LD_ADDR_VAR 0 4
37669: PUSH
37670: LD_VAR 0 1
37674: PUSH
37675: FOR_IN
37676: IFFALSE 37859
// begin nat := GetNation ( i ) ;
37678: LD_ADDR_VAR 0 7
37682: PUSH
37683: LD_VAR 0 4
37687: PPUSH
37688: CALL_OW 248
37692: ST_TO_ADDR
// weapon := 0 ;
37693: LD_ADDR_VAR 0 8
37697: PUSH
37698: LD_INT 0
37700: ST_TO_ADDR
// if not nat then
37701: LD_VAR 0 7
37705: NOT
37706: IFFALSE 37710
// continue ;
37708: GO 37675
// for j in list [ nat ] do
37710: LD_ADDR_VAR 0 5
37714: PUSH
37715: LD_VAR 0 10
37719: PUSH
37720: LD_VAR 0 7
37724: ARRAY
37725: PUSH
37726: FOR_IN
37727: IFFALSE 37768
// if GetBWeapon ( i ) = j [ 1 ] then
37729: LD_VAR 0 4
37733: PPUSH
37734: CALL_OW 269
37738: PUSH
37739: LD_VAR 0 5
37743: PUSH
37744: LD_INT 1
37746: ARRAY
37747: EQUAL
37748: IFFALSE 37766
// begin weapon := j [ 2 ] ;
37750: LD_ADDR_VAR 0 8
37754: PUSH
37755: LD_VAR 0 5
37759: PUSH
37760: LD_INT 2
37762: ARRAY
37763: ST_TO_ADDR
// break ;
37764: GO 37768
// end ;
37766: GO 37726
37768: POP
37769: POP
// if not weapon then
37770: LD_VAR 0 8
37774: NOT
37775: IFFALSE 37779
// continue ;
37777: GO 37675
// for k in factories do
37779: LD_ADDR_VAR 0 6
37783: PUSH
37784: LD_VAR 0 2
37788: PUSH
37789: FOR_IN
37790: IFFALSE 37855
// begin weapons := AvailableWeaponList ( k ) ;
37792: LD_ADDR_VAR 0 9
37796: PUSH
37797: LD_VAR 0 6
37801: PPUSH
37802: CALL_OW 478
37806: ST_TO_ADDR
// if not weapons then
37807: LD_VAR 0 9
37811: NOT
37812: IFFALSE 37816
// continue ;
37814: GO 37789
// if weapon in weapons then
37816: LD_VAR 0 8
37820: PUSH
37821: LD_VAR 0 9
37825: IN
37826: IFFALSE 37853
// begin result := [ i , weapon ] ;
37828: LD_ADDR_VAR 0 3
37832: PUSH
37833: LD_VAR 0 4
37837: PUSH
37838: LD_VAR 0 8
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: ST_TO_ADDR
// exit ;
37847: POP
37848: POP
37849: POP
37850: POP
37851: GO 37861
// end ; end ;
37853: GO 37789
37855: POP
37856: POP
// end ;
37857: GO 37675
37859: POP
37860: POP
// end ;
37861: LD_VAR 0 3
37865: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37866: LD_INT 0
37868: PPUSH
// if not side or side > 8 then
37869: LD_VAR 0 3
37873: NOT
37874: PUSH
37875: LD_VAR 0 3
37879: PUSH
37880: LD_INT 8
37882: GREATER
37883: OR
37884: IFFALSE 37888
// exit ;
37886: GO 37947
// if not range then
37888: LD_VAR 0 4
37892: NOT
37893: IFFALSE 37904
// range := - 12 ;
37895: LD_ADDR_VAR 0 4
37899: PUSH
37900: LD_INT 12
37902: NEG
37903: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37904: LD_VAR 0 1
37908: PPUSH
37909: LD_VAR 0 2
37913: PPUSH
37914: LD_VAR 0 3
37918: PPUSH
37919: LD_VAR 0 4
37923: PPUSH
37924: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37928: LD_VAR 0 1
37932: PPUSH
37933: LD_VAR 0 2
37937: PPUSH
37938: LD_VAR 0 3
37942: PPUSH
37943: CALL_OW 331
// end ;
37947: LD_VAR 0 5
37951: RET
// export function Video ( mode ) ; begin
37952: LD_INT 0
37954: PPUSH
// ingame_video = mode ;
37955: LD_ADDR_OWVAR 52
37959: PUSH
37960: LD_VAR 0 1
37964: ST_TO_ADDR
// interface_hidden = mode ;
37965: LD_ADDR_OWVAR 54
37969: PUSH
37970: LD_VAR 0 1
37974: ST_TO_ADDR
// end ;
37975: LD_VAR 0 2
37979: RET
// export function Join ( array , element ) ; begin
37980: LD_INT 0
37982: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37983: LD_ADDR_VAR 0 3
37987: PUSH
37988: LD_VAR 0 1
37992: PPUSH
37993: LD_VAR 0 1
37997: PUSH
37998: LD_INT 1
38000: PLUS
38001: PPUSH
38002: LD_VAR 0 2
38006: PPUSH
38007: CALL_OW 1
38011: ST_TO_ADDR
// end ;
38012: LD_VAR 0 3
38016: RET
// export function JoinUnion ( array , element ) ; begin
38017: LD_INT 0
38019: PPUSH
// result := array union element ;
38020: LD_ADDR_VAR 0 3
38024: PUSH
38025: LD_VAR 0 1
38029: PUSH
38030: LD_VAR 0 2
38034: UNION
38035: ST_TO_ADDR
// end ;
38036: LD_VAR 0 3
38040: RET
// export function GetBehemoths ( side ) ; begin
38041: LD_INT 0
38043: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38044: LD_ADDR_VAR 0 2
38048: PUSH
38049: LD_INT 22
38051: PUSH
38052: LD_VAR 0 1
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 31
38063: PUSH
38064: LD_INT 25
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PPUSH
38075: CALL_OW 69
38079: ST_TO_ADDR
// end ;
38080: LD_VAR 0 2
38084: RET
// export function Shuffle ( array ) ; var i , index ; begin
38085: LD_INT 0
38087: PPUSH
38088: PPUSH
38089: PPUSH
// result := [ ] ;
38090: LD_ADDR_VAR 0 2
38094: PUSH
38095: EMPTY
38096: ST_TO_ADDR
// if not array then
38097: LD_VAR 0 1
38101: NOT
38102: IFFALSE 38106
// exit ;
38104: GO 38205
// Randomize ;
38106: CALL_OW 10
// for i = array downto 1 do
38110: LD_ADDR_VAR 0 3
38114: PUSH
38115: DOUBLE
38116: LD_VAR 0 1
38120: INC
38121: ST_TO_ADDR
38122: LD_INT 1
38124: PUSH
38125: FOR_DOWNTO
38126: IFFALSE 38203
// begin index := rand ( 1 , array ) ;
38128: LD_ADDR_VAR 0 4
38132: PUSH
38133: LD_INT 1
38135: PPUSH
38136: LD_VAR 0 1
38140: PPUSH
38141: CALL_OW 12
38145: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38146: LD_ADDR_VAR 0 2
38150: PUSH
38151: LD_VAR 0 2
38155: PPUSH
38156: LD_VAR 0 2
38160: PUSH
38161: LD_INT 1
38163: PLUS
38164: PPUSH
38165: LD_VAR 0 1
38169: PUSH
38170: LD_VAR 0 4
38174: ARRAY
38175: PPUSH
38176: CALL_OW 2
38180: ST_TO_ADDR
// array := Delete ( array , index ) ;
38181: LD_ADDR_VAR 0 1
38185: PUSH
38186: LD_VAR 0 1
38190: PPUSH
38191: LD_VAR 0 4
38195: PPUSH
38196: CALL_OW 3
38200: ST_TO_ADDR
// end ;
38201: GO 38125
38203: POP
38204: POP
// end ;
38205: LD_VAR 0 2
38209: RET
// export function GetBaseMaterials ( base ) ; begin
38210: LD_INT 0
38212: PPUSH
// result := [ 0 , 0 , 0 ] ;
38213: LD_ADDR_VAR 0 2
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: LIST
38231: ST_TO_ADDR
// if not base then
38232: LD_VAR 0 1
38236: NOT
38237: IFFALSE 38241
// exit ;
38239: GO 38290
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38241: LD_ADDR_VAR 0 2
38245: PUSH
38246: LD_VAR 0 1
38250: PPUSH
38251: LD_INT 1
38253: PPUSH
38254: CALL_OW 275
38258: PUSH
38259: LD_VAR 0 1
38263: PPUSH
38264: LD_INT 2
38266: PPUSH
38267: CALL_OW 275
38271: PUSH
38272: LD_VAR 0 1
38276: PPUSH
38277: LD_INT 3
38279: PPUSH
38280: CALL_OW 275
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: ST_TO_ADDR
// end ;
38290: LD_VAR 0 2
38294: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38295: LD_INT 0
38297: PPUSH
38298: PPUSH
// result := array ;
38299: LD_ADDR_VAR 0 3
38303: PUSH
38304: LD_VAR 0 1
38308: ST_TO_ADDR
// if size >= result then
38309: LD_VAR 0 2
38313: PUSH
38314: LD_VAR 0 3
38318: GREATEREQUAL
38319: IFFALSE 38323
// exit ;
38321: GO 38373
// if size then
38323: LD_VAR 0 2
38327: IFFALSE 38373
// for i := array downto size do
38329: LD_ADDR_VAR 0 4
38333: PUSH
38334: DOUBLE
38335: LD_VAR 0 1
38339: INC
38340: ST_TO_ADDR
38341: LD_VAR 0 2
38345: PUSH
38346: FOR_DOWNTO
38347: IFFALSE 38371
// result := Delete ( result , result ) ;
38349: LD_ADDR_VAR 0 3
38353: PUSH
38354: LD_VAR 0 3
38358: PPUSH
38359: LD_VAR 0 3
38363: PPUSH
38364: CALL_OW 3
38368: ST_TO_ADDR
38369: GO 38346
38371: POP
38372: POP
// end ;
38373: LD_VAR 0 3
38377: RET
// export function ComExit ( unit ) ; var tmp ; begin
38378: LD_INT 0
38380: PPUSH
38381: PPUSH
// if not IsInUnit ( unit ) then
38382: LD_VAR 0 1
38386: PPUSH
38387: CALL_OW 310
38391: NOT
38392: IFFALSE 38396
// exit ;
38394: GO 38456
// tmp := IsInUnit ( unit ) ;
38396: LD_ADDR_VAR 0 3
38400: PUSH
38401: LD_VAR 0 1
38405: PPUSH
38406: CALL_OW 310
38410: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38411: LD_VAR 0 3
38415: PPUSH
38416: CALL_OW 247
38420: PUSH
38421: LD_INT 2
38423: EQUAL
38424: IFFALSE 38437
// ComExitVehicle ( unit ) else
38426: LD_VAR 0 1
38430: PPUSH
38431: CALL_OW 121
38435: GO 38446
// ComExitBuilding ( unit ) ;
38437: LD_VAR 0 1
38441: PPUSH
38442: CALL_OW 122
// result := tmp ;
38446: LD_ADDR_VAR 0 2
38450: PUSH
38451: LD_VAR 0 3
38455: ST_TO_ADDR
// end ;
38456: LD_VAR 0 2
38460: RET
// export function ComExitAll ( units ) ; var i ; begin
38461: LD_INT 0
38463: PPUSH
38464: PPUSH
// if not units then
38465: LD_VAR 0 1
38469: NOT
38470: IFFALSE 38474
// exit ;
38472: GO 38500
// for i in units do
38474: LD_ADDR_VAR 0 3
38478: PUSH
38479: LD_VAR 0 1
38483: PUSH
38484: FOR_IN
38485: IFFALSE 38498
// ComExit ( i ) ;
38487: LD_VAR 0 3
38491: PPUSH
38492: CALL 38378 0 1
38496: GO 38484
38498: POP
38499: POP
// end ;
38500: LD_VAR 0 2
38504: RET
// export function ResetHc ; begin
38505: LD_INT 0
38507: PPUSH
// InitHc ;
38508: CALL_OW 19
// hc_importance := 0 ;
38512: LD_ADDR_OWVAR 32
38516: PUSH
38517: LD_INT 0
38519: ST_TO_ADDR
// end ;
38520: LD_VAR 0 1
38524: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38525: LD_INT 0
38527: PPUSH
38528: PPUSH
38529: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38530: LD_ADDR_VAR 0 6
38534: PUSH
38535: LD_VAR 0 1
38539: PUSH
38540: LD_VAR 0 3
38544: PLUS
38545: PUSH
38546: LD_INT 2
38548: DIV
38549: ST_TO_ADDR
// if _x < 0 then
38550: LD_VAR 0 6
38554: PUSH
38555: LD_INT 0
38557: LESS
38558: IFFALSE 38575
// _x := _x * - 1 ;
38560: LD_ADDR_VAR 0 6
38564: PUSH
38565: LD_VAR 0 6
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: MUL
38574: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38575: LD_ADDR_VAR 0 7
38579: PUSH
38580: LD_VAR 0 2
38584: PUSH
38585: LD_VAR 0 4
38589: PLUS
38590: PUSH
38591: LD_INT 2
38593: DIV
38594: ST_TO_ADDR
// if _y < 0 then
38595: LD_VAR 0 7
38599: PUSH
38600: LD_INT 0
38602: LESS
38603: IFFALSE 38620
// _y := _y * - 1 ;
38605: LD_ADDR_VAR 0 7
38609: PUSH
38610: LD_VAR 0 7
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: MUL
38619: ST_TO_ADDR
// result := [ _x , _y ] ;
38620: LD_ADDR_VAR 0 5
38624: PUSH
38625: LD_VAR 0 6
38629: PUSH
38630: LD_VAR 0 7
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: ST_TO_ADDR
// end ;
38639: LD_VAR 0 5
38643: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38644: LD_INT 0
38646: PPUSH
38647: PPUSH
38648: PPUSH
38649: PPUSH
// task := GetTaskList ( unit ) ;
38650: LD_ADDR_VAR 0 7
38654: PUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: CALL_OW 437
38664: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38665: LD_VAR 0 7
38669: NOT
38670: PUSH
38671: LD_VAR 0 1
38675: PPUSH
38676: LD_VAR 0 2
38680: PPUSH
38681: CALL_OW 308
38685: NOT
38686: AND
38687: IFFALSE 38691
// exit ;
38689: GO 38809
// if IsInArea ( unit , area ) then
38691: LD_VAR 0 1
38695: PPUSH
38696: LD_VAR 0 2
38700: PPUSH
38701: CALL_OW 308
38705: IFFALSE 38723
// begin ComMoveToArea ( unit , goAway ) ;
38707: LD_VAR 0 1
38711: PPUSH
38712: LD_VAR 0 3
38716: PPUSH
38717: CALL_OW 113
// exit ;
38721: GO 38809
// end ; if task [ 1 ] [ 1 ] <> M then
38723: LD_VAR 0 7
38727: PUSH
38728: LD_INT 1
38730: ARRAY
38731: PUSH
38732: LD_INT 1
38734: ARRAY
38735: PUSH
38736: LD_STRING M
38738: NONEQUAL
38739: IFFALSE 38743
// exit ;
38741: GO 38809
// x := task [ 1 ] [ 2 ] ;
38743: LD_ADDR_VAR 0 5
38747: PUSH
38748: LD_VAR 0 7
38752: PUSH
38753: LD_INT 1
38755: ARRAY
38756: PUSH
38757: LD_INT 2
38759: ARRAY
38760: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38761: LD_ADDR_VAR 0 6
38765: PUSH
38766: LD_VAR 0 7
38770: PUSH
38771: LD_INT 1
38773: ARRAY
38774: PUSH
38775: LD_INT 3
38777: ARRAY
38778: ST_TO_ADDR
// if InArea ( x , y , area ) then
38779: LD_VAR 0 5
38783: PPUSH
38784: LD_VAR 0 6
38788: PPUSH
38789: LD_VAR 0 2
38793: PPUSH
38794: CALL_OW 309
38798: IFFALSE 38809
// ComStop ( unit ) ;
38800: LD_VAR 0 1
38804: PPUSH
38805: CALL_OW 141
// end ;
38809: LD_VAR 0 4
38813: RET
// export function Abs ( value ) ; begin
38814: LD_INT 0
38816: PPUSH
// result := value ;
38817: LD_ADDR_VAR 0 2
38821: PUSH
38822: LD_VAR 0 1
38826: ST_TO_ADDR
// if value < 0 then
38827: LD_VAR 0 1
38831: PUSH
38832: LD_INT 0
38834: LESS
38835: IFFALSE 38852
// result := value * - 1 ;
38837: LD_ADDR_VAR 0 2
38841: PUSH
38842: LD_VAR 0 1
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: MUL
38851: ST_TO_ADDR
// end ;
38852: LD_VAR 0 2
38856: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38857: LD_INT 0
38859: PPUSH
38860: PPUSH
38861: PPUSH
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
// if not unit or not building then
38867: LD_VAR 0 1
38871: NOT
38872: PUSH
38873: LD_VAR 0 2
38877: NOT
38878: OR
38879: IFFALSE 38883
// exit ;
38881: GO 39109
// x := GetX ( building ) ;
38883: LD_ADDR_VAR 0 4
38887: PUSH
38888: LD_VAR 0 2
38892: PPUSH
38893: CALL_OW 250
38897: ST_TO_ADDR
// y := GetY ( building ) ;
38898: LD_ADDR_VAR 0 6
38902: PUSH
38903: LD_VAR 0 2
38907: PPUSH
38908: CALL_OW 251
38912: ST_TO_ADDR
// d := GetDir ( building ) ;
38913: LD_ADDR_VAR 0 8
38917: PUSH
38918: LD_VAR 0 2
38922: PPUSH
38923: CALL_OW 254
38927: ST_TO_ADDR
// r := 4 ;
38928: LD_ADDR_VAR 0 9
38932: PUSH
38933: LD_INT 4
38935: ST_TO_ADDR
// for i := 1 to 5 do
38936: LD_ADDR_VAR 0 10
38940: PUSH
38941: DOUBLE
38942: LD_INT 1
38944: DEC
38945: ST_TO_ADDR
38946: LD_INT 5
38948: PUSH
38949: FOR_TO
38950: IFFALSE 39107
// begin _x := ShiftX ( x , d , r + i ) ;
38952: LD_ADDR_VAR 0 5
38956: PUSH
38957: LD_VAR 0 4
38961: PPUSH
38962: LD_VAR 0 8
38966: PPUSH
38967: LD_VAR 0 9
38971: PUSH
38972: LD_VAR 0 10
38976: PLUS
38977: PPUSH
38978: CALL_OW 272
38982: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38983: LD_ADDR_VAR 0 7
38987: PUSH
38988: LD_VAR 0 6
38992: PPUSH
38993: LD_VAR 0 8
38997: PPUSH
38998: LD_VAR 0 9
39002: PUSH
39003: LD_VAR 0 10
39007: PLUS
39008: PPUSH
39009: CALL_OW 273
39013: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39014: LD_VAR 0 5
39018: PPUSH
39019: LD_VAR 0 7
39023: PPUSH
39024: CALL_OW 488
39028: PUSH
39029: LD_VAR 0 5
39033: PPUSH
39034: LD_VAR 0 7
39038: PPUSH
39039: CALL_OW 428
39043: PPUSH
39044: CALL_OW 247
39048: PUSH
39049: LD_INT 3
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: IN
39059: NOT
39060: AND
39061: IFFALSE 39105
// begin ComMoveXY ( unit , _x , _y ) ;
39063: LD_VAR 0 1
39067: PPUSH
39068: LD_VAR 0 5
39072: PPUSH
39073: LD_VAR 0 7
39077: PPUSH
39078: CALL_OW 111
// result := [ _x , _y ] ;
39082: LD_ADDR_VAR 0 3
39086: PUSH
39087: LD_VAR 0 5
39091: PUSH
39092: LD_VAR 0 7
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: ST_TO_ADDR
// exit ;
39101: POP
39102: POP
39103: GO 39109
// end ; end ;
39105: GO 38949
39107: POP
39108: POP
// end ;
39109: LD_VAR 0 3
39113: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39114: LD_INT 0
39116: PPUSH
39117: PPUSH
39118: PPUSH
// result := 0 ;
39119: LD_ADDR_VAR 0 3
39123: PUSH
39124: LD_INT 0
39126: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39127: LD_VAR 0 1
39131: PUSH
39132: LD_INT 0
39134: LESS
39135: PUSH
39136: LD_VAR 0 1
39140: PUSH
39141: LD_INT 8
39143: GREATER
39144: OR
39145: PUSH
39146: LD_VAR 0 2
39150: PUSH
39151: LD_INT 0
39153: LESS
39154: OR
39155: PUSH
39156: LD_VAR 0 2
39160: PUSH
39161: LD_INT 8
39163: GREATER
39164: OR
39165: IFFALSE 39169
// exit ;
39167: GO 39244
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39169: LD_ADDR_VAR 0 4
39173: PUSH
39174: LD_INT 22
39176: PUSH
39177: LD_VAR 0 2
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PPUSH
39186: CALL_OW 69
39190: PUSH
39191: FOR_IN
39192: IFFALSE 39242
// begin un := UnitShoot ( i ) ;
39194: LD_ADDR_VAR 0 5
39198: PUSH
39199: LD_VAR 0 4
39203: PPUSH
39204: CALL_OW 504
39208: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39209: LD_VAR 0 5
39213: PPUSH
39214: CALL_OW 255
39218: PUSH
39219: LD_VAR 0 1
39223: EQUAL
39224: IFFALSE 39240
// begin result := un ;
39226: LD_ADDR_VAR 0 3
39230: PUSH
39231: LD_VAR 0 5
39235: ST_TO_ADDR
// exit ;
39236: POP
39237: POP
39238: GO 39244
// end ; end ;
39240: GO 39191
39242: POP
39243: POP
// end ;
39244: LD_VAR 0 3
39248: RET
// export function GetCargoBay ( units ) ; begin
39249: LD_INT 0
39251: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39252: LD_ADDR_VAR 0 2
39256: PUSH
39257: LD_VAR 0 1
39261: PPUSH
39262: LD_INT 2
39264: PUSH
39265: LD_INT 34
39267: PUSH
39268: LD_INT 12
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 34
39277: PUSH
39278: LD_INT 51
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 34
39287: PUSH
39288: LD_INT 32
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 34
39297: PUSH
39298: LD_INT 89
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: PPUSH
39312: CALL_OW 72
39316: ST_TO_ADDR
// end ;
39317: LD_VAR 0 2
39321: RET
// export function Negate ( value ) ; begin
39322: LD_INT 0
39324: PPUSH
// result := not value ;
39325: LD_ADDR_VAR 0 2
39329: PUSH
39330: LD_VAR 0 1
39334: NOT
39335: ST_TO_ADDR
// end ;
39336: LD_VAR 0 2
39340: RET
// export function Inc ( value ) ; begin
39341: LD_INT 0
39343: PPUSH
// result := value + 1 ;
39344: LD_ADDR_VAR 0 2
39348: PUSH
39349: LD_VAR 0 1
39353: PUSH
39354: LD_INT 1
39356: PLUS
39357: ST_TO_ADDR
// end ;
39358: LD_VAR 0 2
39362: RET
// export function Dec ( value ) ; begin
39363: LD_INT 0
39365: PPUSH
// result := value - 1 ;
39366: LD_ADDR_VAR 0 2
39370: PUSH
39371: LD_VAR 0 1
39375: PUSH
39376: LD_INT 1
39378: MINUS
39379: ST_TO_ADDR
// end ;
39380: LD_VAR 0 2
39384: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39385: LD_INT 0
39387: PPUSH
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39395: LD_VAR 0 1
39399: PPUSH
39400: LD_VAR 0 2
39404: PPUSH
39405: CALL_OW 488
39409: NOT
39410: PUSH
39411: LD_VAR 0 3
39415: PPUSH
39416: LD_VAR 0 4
39420: PPUSH
39421: CALL_OW 488
39425: NOT
39426: OR
39427: IFFALSE 39440
// begin result := - 1 ;
39429: LD_ADDR_VAR 0 5
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: ST_TO_ADDR
// exit ;
39438: GO 39675
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39440: LD_ADDR_VAR 0 12
39444: PUSH
39445: LD_VAR 0 1
39449: PPUSH
39450: LD_VAR 0 2
39454: PPUSH
39455: LD_VAR 0 3
39459: PPUSH
39460: LD_VAR 0 4
39464: PPUSH
39465: CALL 38525 0 4
39469: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39470: LD_ADDR_VAR 0 11
39474: PUSH
39475: LD_VAR 0 1
39479: PPUSH
39480: LD_VAR 0 2
39484: PPUSH
39485: LD_VAR 0 12
39489: PUSH
39490: LD_INT 1
39492: ARRAY
39493: PPUSH
39494: LD_VAR 0 12
39498: PUSH
39499: LD_INT 2
39501: ARRAY
39502: PPUSH
39503: CALL_OW 298
39507: ST_TO_ADDR
// distance := 9999 ;
39508: LD_ADDR_VAR 0 10
39512: PUSH
39513: LD_INT 9999
39515: ST_TO_ADDR
// for i := 0 to 5 do
39516: LD_ADDR_VAR 0 6
39520: PUSH
39521: DOUBLE
39522: LD_INT 0
39524: DEC
39525: ST_TO_ADDR
39526: LD_INT 5
39528: PUSH
39529: FOR_TO
39530: IFFALSE 39673
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39532: LD_ADDR_VAR 0 7
39536: PUSH
39537: LD_VAR 0 1
39541: PPUSH
39542: LD_VAR 0 6
39546: PPUSH
39547: LD_VAR 0 11
39551: PPUSH
39552: CALL_OW 272
39556: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39557: LD_ADDR_VAR 0 8
39561: PUSH
39562: LD_VAR 0 2
39566: PPUSH
39567: LD_VAR 0 6
39571: PPUSH
39572: LD_VAR 0 11
39576: PPUSH
39577: CALL_OW 273
39581: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39582: LD_VAR 0 7
39586: PPUSH
39587: LD_VAR 0 8
39591: PPUSH
39592: CALL_OW 488
39596: NOT
39597: IFFALSE 39601
// continue ;
39599: GO 39529
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39601: LD_ADDR_VAR 0 9
39605: PUSH
39606: LD_VAR 0 12
39610: PUSH
39611: LD_INT 1
39613: ARRAY
39614: PPUSH
39615: LD_VAR 0 12
39619: PUSH
39620: LD_INT 2
39622: ARRAY
39623: PPUSH
39624: LD_VAR 0 7
39628: PPUSH
39629: LD_VAR 0 8
39633: PPUSH
39634: CALL_OW 298
39638: ST_TO_ADDR
// if tmp < distance then
39639: LD_VAR 0 9
39643: PUSH
39644: LD_VAR 0 10
39648: LESS
39649: IFFALSE 39671
// begin result := i ;
39651: LD_ADDR_VAR 0 5
39655: PUSH
39656: LD_VAR 0 6
39660: ST_TO_ADDR
// distance := tmp ;
39661: LD_ADDR_VAR 0 10
39665: PUSH
39666: LD_VAR 0 9
39670: ST_TO_ADDR
// end ; end ;
39671: GO 39529
39673: POP
39674: POP
// end ;
39675: LD_VAR 0 5
39679: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39680: LD_INT 0
39682: PPUSH
39683: PPUSH
// if not driver or not IsInUnit ( driver ) then
39684: LD_VAR 0 1
39688: NOT
39689: PUSH
39690: LD_VAR 0 1
39694: PPUSH
39695: CALL_OW 310
39699: NOT
39700: OR
39701: IFFALSE 39705
// exit ;
39703: GO 39795
// vehicle := IsInUnit ( driver ) ;
39705: LD_ADDR_VAR 0 3
39709: PUSH
39710: LD_VAR 0 1
39714: PPUSH
39715: CALL_OW 310
39719: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39720: LD_VAR 0 1
39724: PPUSH
39725: LD_STRING \
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: PUSH
39755: LD_STRING E
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_VAR 0 3
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PPUSH
39791: CALL_OW 446
// end ;
39795: LD_VAR 0 2
39799: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39800: LD_INT 0
39802: PPUSH
39803: PPUSH
// if not driver or not IsInUnit ( driver ) then
39804: LD_VAR 0 1
39808: NOT
39809: PUSH
39810: LD_VAR 0 1
39814: PPUSH
39815: CALL_OW 310
39819: NOT
39820: OR
39821: IFFALSE 39825
// exit ;
39823: GO 39915
// vehicle := IsInUnit ( driver ) ;
39825: LD_ADDR_VAR 0 3
39829: PUSH
39830: LD_VAR 0 1
39834: PPUSH
39835: CALL_OW 310
39839: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39840: LD_VAR 0 1
39844: PPUSH
39845: LD_STRING \
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: PUSH
39875: LD_STRING E
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: LD_VAR 0 3
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PPUSH
39911: CALL_OW 447
// end ;
39915: LD_VAR 0 2
39919: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39920: LD_INT 0
39922: PPUSH
39923: PPUSH
39924: PPUSH
// tmp := [ ] ;
39925: LD_ADDR_VAR 0 5
39929: PUSH
39930: EMPTY
39931: ST_TO_ADDR
// for i in units do
39932: LD_ADDR_VAR 0 4
39936: PUSH
39937: LD_VAR 0 1
39941: PUSH
39942: FOR_IN
39943: IFFALSE 39981
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39945: LD_ADDR_VAR 0 5
39949: PUSH
39950: LD_VAR 0 5
39954: PPUSH
39955: LD_VAR 0 5
39959: PUSH
39960: LD_INT 1
39962: PLUS
39963: PPUSH
39964: LD_VAR 0 4
39968: PPUSH
39969: CALL_OW 256
39973: PPUSH
39974: CALL_OW 2
39978: ST_TO_ADDR
39979: GO 39942
39981: POP
39982: POP
// if not tmp then
39983: LD_VAR 0 5
39987: NOT
39988: IFFALSE 39992
// exit ;
39990: GO 40040
// if asc then
39992: LD_VAR 0 2
39996: IFFALSE 40020
// result := SortListByListAsc ( units , tmp ) else
39998: LD_ADDR_VAR 0 3
40002: PUSH
40003: LD_VAR 0 1
40007: PPUSH
40008: LD_VAR 0 5
40012: PPUSH
40013: CALL_OW 76
40017: ST_TO_ADDR
40018: GO 40040
// result := SortListByListDesc ( units , tmp ) ;
40020: LD_ADDR_VAR 0 3
40024: PUSH
40025: LD_VAR 0 1
40029: PPUSH
40030: LD_VAR 0 5
40034: PPUSH
40035: CALL_OW 77
40039: ST_TO_ADDR
// end ;
40040: LD_VAR 0 3
40044: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40045: LD_INT 0
40047: PPUSH
40048: PPUSH
// task := GetTaskList ( mech ) ;
40049: LD_ADDR_VAR 0 4
40053: PUSH
40054: LD_VAR 0 1
40058: PPUSH
40059: CALL_OW 437
40063: ST_TO_ADDR
// if not task then
40064: LD_VAR 0 4
40068: NOT
40069: IFFALSE 40073
// exit ;
40071: GO 40115
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40073: LD_ADDR_VAR 0 3
40077: PUSH
40078: LD_VAR 0 4
40082: PUSH
40083: LD_INT 1
40085: ARRAY
40086: PUSH
40087: LD_INT 1
40089: ARRAY
40090: PUSH
40091: LD_STRING r
40093: EQUAL
40094: PUSH
40095: LD_VAR 0 4
40099: PUSH
40100: LD_INT 1
40102: ARRAY
40103: PUSH
40104: LD_INT 4
40106: ARRAY
40107: PUSH
40108: LD_VAR 0 2
40112: EQUAL
40113: AND
40114: ST_TO_ADDR
// end ;
40115: LD_VAR 0 3
40119: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40120: LD_INT 0
40122: PPUSH
// SetDir ( unit , d ) ;
40123: LD_VAR 0 1
40127: PPUSH
40128: LD_VAR 0 4
40132: PPUSH
40133: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40137: LD_VAR 0 1
40141: PPUSH
40142: LD_VAR 0 2
40146: PPUSH
40147: LD_VAR 0 3
40151: PPUSH
40152: LD_VAR 0 5
40156: PPUSH
40157: CALL_OW 48
// end ;
40161: LD_VAR 0 6
40165: RET
// export function ToNaturalNumber ( number ) ; begin
40166: LD_INT 0
40168: PPUSH
// result := number div 1 ;
40169: LD_ADDR_VAR 0 2
40173: PUSH
40174: LD_VAR 0 1
40178: PUSH
40179: LD_INT 1
40181: DIV
40182: ST_TO_ADDR
// if number < 0 then
40183: LD_VAR 0 1
40187: PUSH
40188: LD_INT 0
40190: LESS
40191: IFFALSE 40201
// result := 0 ;
40193: LD_ADDR_VAR 0 2
40197: PUSH
40198: LD_INT 0
40200: ST_TO_ADDR
// end ;
40201: LD_VAR 0 2
40205: RET
// export function SortByClass ( units , class ) ; var un ; begin
40206: LD_INT 0
40208: PPUSH
40209: PPUSH
// if not units or not class then
40210: LD_VAR 0 1
40214: NOT
40215: PUSH
40216: LD_VAR 0 2
40220: NOT
40221: OR
40222: IFFALSE 40226
// exit ;
40224: GO 40321
// result := [ ] ;
40226: LD_ADDR_VAR 0 3
40230: PUSH
40231: EMPTY
40232: ST_TO_ADDR
// for un in units do
40233: LD_ADDR_VAR 0 4
40237: PUSH
40238: LD_VAR 0 1
40242: PUSH
40243: FOR_IN
40244: IFFALSE 40319
// if GetClass ( un ) = class then
40246: LD_VAR 0 4
40250: PPUSH
40251: CALL_OW 257
40255: PUSH
40256: LD_VAR 0 2
40260: EQUAL
40261: IFFALSE 40288
// result := Insert ( result , 1 , un ) else
40263: LD_ADDR_VAR 0 3
40267: PUSH
40268: LD_VAR 0 3
40272: PPUSH
40273: LD_INT 1
40275: PPUSH
40276: LD_VAR 0 4
40280: PPUSH
40281: CALL_OW 2
40285: ST_TO_ADDR
40286: GO 40317
// result := Replace ( result , result + 1 , un ) ;
40288: LD_ADDR_VAR 0 3
40292: PUSH
40293: LD_VAR 0 3
40297: PPUSH
40298: LD_VAR 0 3
40302: PUSH
40303: LD_INT 1
40305: PLUS
40306: PPUSH
40307: LD_VAR 0 4
40311: PPUSH
40312: CALL_OW 1
40316: ST_TO_ADDR
40317: GO 40243
40319: POP
40320: POP
// end ;
40321: LD_VAR 0 3
40325: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40326: LD_INT 0
40328: PPUSH
40329: PPUSH
40330: PPUSH
40331: PPUSH
40332: PPUSH
40333: PPUSH
40334: PPUSH
// result := [ ] ;
40335: LD_ADDR_VAR 0 4
40339: PUSH
40340: EMPTY
40341: ST_TO_ADDR
// if x - r < 0 then
40342: LD_VAR 0 1
40346: PUSH
40347: LD_VAR 0 3
40351: MINUS
40352: PUSH
40353: LD_INT 0
40355: LESS
40356: IFFALSE 40368
// min_x := 0 else
40358: LD_ADDR_VAR 0 8
40362: PUSH
40363: LD_INT 0
40365: ST_TO_ADDR
40366: GO 40384
// min_x := x - r ;
40368: LD_ADDR_VAR 0 8
40372: PUSH
40373: LD_VAR 0 1
40377: PUSH
40378: LD_VAR 0 3
40382: MINUS
40383: ST_TO_ADDR
// if y - r < 0 then
40384: LD_VAR 0 2
40388: PUSH
40389: LD_VAR 0 3
40393: MINUS
40394: PUSH
40395: LD_INT 0
40397: LESS
40398: IFFALSE 40410
// min_y := 0 else
40400: LD_ADDR_VAR 0 7
40404: PUSH
40405: LD_INT 0
40407: ST_TO_ADDR
40408: GO 40426
// min_y := y - r ;
40410: LD_ADDR_VAR 0 7
40414: PUSH
40415: LD_VAR 0 2
40419: PUSH
40420: LD_VAR 0 3
40424: MINUS
40425: ST_TO_ADDR
// max_x := x + r ;
40426: LD_ADDR_VAR 0 9
40430: PUSH
40431: LD_VAR 0 1
40435: PUSH
40436: LD_VAR 0 3
40440: PLUS
40441: ST_TO_ADDR
// max_y := y + r ;
40442: LD_ADDR_VAR 0 10
40446: PUSH
40447: LD_VAR 0 2
40451: PUSH
40452: LD_VAR 0 3
40456: PLUS
40457: ST_TO_ADDR
// for _x = min_x to max_x do
40458: LD_ADDR_VAR 0 5
40462: PUSH
40463: DOUBLE
40464: LD_VAR 0 8
40468: DEC
40469: ST_TO_ADDR
40470: LD_VAR 0 9
40474: PUSH
40475: FOR_TO
40476: IFFALSE 40577
// for _y = min_y to max_y do
40478: LD_ADDR_VAR 0 6
40482: PUSH
40483: DOUBLE
40484: LD_VAR 0 7
40488: DEC
40489: ST_TO_ADDR
40490: LD_VAR 0 10
40494: PUSH
40495: FOR_TO
40496: IFFALSE 40573
// begin if not ValidHex ( _x , _y ) then
40498: LD_VAR 0 5
40502: PPUSH
40503: LD_VAR 0 6
40507: PPUSH
40508: CALL_OW 488
40512: NOT
40513: IFFALSE 40517
// continue ;
40515: GO 40495
// if GetResourceTypeXY ( _x , _y ) then
40517: LD_VAR 0 5
40521: PPUSH
40522: LD_VAR 0 6
40526: PPUSH
40527: CALL_OW 283
40531: IFFALSE 40571
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40533: LD_ADDR_VAR 0 4
40537: PUSH
40538: LD_VAR 0 4
40542: PPUSH
40543: LD_VAR 0 4
40547: PUSH
40548: LD_INT 1
40550: PLUS
40551: PPUSH
40552: LD_VAR 0 5
40556: PUSH
40557: LD_VAR 0 6
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PPUSH
40566: CALL_OW 1
40570: ST_TO_ADDR
// end ;
40571: GO 40495
40573: POP
40574: POP
40575: GO 40475
40577: POP
40578: POP
// end ;
40579: LD_VAR 0 4
40583: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40584: LD_INT 0
40586: PPUSH
40587: PPUSH
40588: PPUSH
40589: PPUSH
40590: PPUSH
40591: PPUSH
40592: PPUSH
40593: PPUSH
// if not units then
40594: LD_VAR 0 1
40598: NOT
40599: IFFALSE 40603
// exit ;
40601: GO 41127
// result := UnitFilter ( units , [ f_ok ] ) ;
40603: LD_ADDR_VAR 0 3
40607: PUSH
40608: LD_VAR 0 1
40612: PPUSH
40613: LD_INT 50
40615: PUSH
40616: EMPTY
40617: LIST
40618: PPUSH
40619: CALL_OW 72
40623: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40624: LD_ADDR_VAR 0 8
40628: PUSH
40629: LD_VAR 0 1
40633: PUSH
40634: LD_INT 1
40636: ARRAY
40637: PPUSH
40638: CALL_OW 255
40642: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40643: LD_ADDR_VAR 0 10
40647: PUSH
40648: LD_INT 29
40650: PUSH
40651: LD_INT 91
40653: PUSH
40654: LD_INT 49
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: LIST
40661: ST_TO_ADDR
// if not result then
40662: LD_VAR 0 3
40666: NOT
40667: IFFALSE 40671
// exit ;
40669: GO 41127
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40671: LD_ADDR_VAR 0 5
40675: PUSH
40676: LD_INT 81
40678: PUSH
40679: LD_VAR 0 8
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PPUSH
40688: CALL_OW 69
40692: ST_TO_ADDR
// for i in result do
40693: LD_ADDR_VAR 0 4
40697: PUSH
40698: LD_VAR 0 3
40702: PUSH
40703: FOR_IN
40704: IFFALSE 41125
// begin tag := GetTag ( i ) + 1 ;
40706: LD_ADDR_VAR 0 9
40710: PUSH
40711: LD_VAR 0 4
40715: PPUSH
40716: CALL_OW 110
40720: PUSH
40721: LD_INT 1
40723: PLUS
40724: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40725: LD_ADDR_VAR 0 7
40729: PUSH
40730: LD_VAR 0 4
40734: PPUSH
40735: CALL_OW 250
40739: PPUSH
40740: LD_VAR 0 4
40744: PPUSH
40745: CALL_OW 251
40749: PPUSH
40750: LD_INT 6
40752: PPUSH
40753: CALL 40326 0 3
40757: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40758: LD_VAR 0 4
40762: PPUSH
40763: CALL_OW 247
40767: PUSH
40768: LD_INT 2
40770: EQUAL
40771: PUSH
40772: LD_VAR 0 7
40776: AND
40777: PUSH
40778: LD_VAR 0 4
40782: PPUSH
40783: CALL_OW 264
40787: PUSH
40788: LD_VAR 0 10
40792: IN
40793: NOT
40794: AND
40795: IFFALSE 40834
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40797: LD_VAR 0 4
40801: PPUSH
40802: LD_VAR 0 7
40806: PUSH
40807: LD_INT 1
40809: ARRAY
40810: PUSH
40811: LD_INT 1
40813: ARRAY
40814: PPUSH
40815: LD_VAR 0 7
40819: PUSH
40820: LD_INT 1
40822: ARRAY
40823: PUSH
40824: LD_INT 2
40826: ARRAY
40827: PPUSH
40828: CALL_OW 116
40832: GO 41123
// if path > tag then
40834: LD_VAR 0 2
40838: PUSH
40839: LD_VAR 0 9
40843: GREATER
40844: IFFALSE 41052
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40846: LD_ADDR_VAR 0 6
40850: PUSH
40851: LD_VAR 0 5
40855: PPUSH
40856: LD_INT 91
40858: PUSH
40859: LD_VAR 0 4
40863: PUSH
40864: LD_INT 8
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: LIST
40871: PPUSH
40872: CALL_OW 72
40876: ST_TO_ADDR
// if nearEnemy then
40877: LD_VAR 0 6
40881: IFFALSE 40950
// begin if GetWeapon ( i ) = ru_time_lapser then
40883: LD_VAR 0 4
40887: PPUSH
40888: CALL_OW 264
40892: PUSH
40893: LD_INT 49
40895: EQUAL
40896: IFFALSE 40924
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40898: LD_VAR 0 4
40902: PPUSH
40903: LD_VAR 0 6
40907: PPUSH
40908: LD_VAR 0 4
40912: PPUSH
40913: CALL_OW 74
40917: PPUSH
40918: CALL_OW 112
40922: GO 40948
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40924: LD_VAR 0 4
40928: PPUSH
40929: LD_VAR 0 6
40933: PPUSH
40934: LD_VAR 0 4
40938: PPUSH
40939: CALL_OW 74
40943: PPUSH
40944: CALL_OW 115
// end else
40948: GO 41050
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40950: LD_VAR 0 4
40954: PPUSH
40955: LD_VAR 0 2
40959: PUSH
40960: LD_VAR 0 9
40964: ARRAY
40965: PUSH
40966: LD_INT 1
40968: ARRAY
40969: PPUSH
40970: LD_VAR 0 2
40974: PUSH
40975: LD_VAR 0 9
40979: ARRAY
40980: PUSH
40981: LD_INT 2
40983: ARRAY
40984: PPUSH
40985: CALL_OW 297
40989: PUSH
40990: LD_INT 6
40992: GREATER
40993: IFFALSE 41036
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40995: LD_VAR 0 4
40999: PPUSH
41000: LD_VAR 0 2
41004: PUSH
41005: LD_VAR 0 9
41009: ARRAY
41010: PUSH
41011: LD_INT 1
41013: ARRAY
41014: PPUSH
41015: LD_VAR 0 2
41019: PUSH
41020: LD_VAR 0 9
41024: ARRAY
41025: PUSH
41026: LD_INT 2
41028: ARRAY
41029: PPUSH
41030: CALL_OW 114
41034: GO 41050
// SetTag ( i , tag ) ;
41036: LD_VAR 0 4
41040: PPUSH
41041: LD_VAR 0 9
41045: PPUSH
41046: CALL_OW 109
// end else
41050: GO 41123
// if enemy then
41052: LD_VAR 0 5
41056: IFFALSE 41123
// begin if GetWeapon ( i ) = ru_time_lapser then
41058: LD_VAR 0 4
41062: PPUSH
41063: CALL_OW 264
41067: PUSH
41068: LD_INT 49
41070: EQUAL
41071: IFFALSE 41099
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41073: LD_VAR 0 4
41077: PPUSH
41078: LD_VAR 0 5
41082: PPUSH
41083: LD_VAR 0 4
41087: PPUSH
41088: CALL_OW 74
41092: PPUSH
41093: CALL_OW 112
41097: GO 41123
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41099: LD_VAR 0 4
41103: PPUSH
41104: LD_VAR 0 5
41108: PPUSH
41109: LD_VAR 0 4
41113: PPUSH
41114: CALL_OW 74
41118: PPUSH
41119: CALL_OW 115
// end ; end ;
41123: GO 40703
41125: POP
41126: POP
// end ;
41127: LD_VAR 0 3
41131: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41132: LD_INT 0
41134: PPUSH
41135: PPUSH
41136: PPUSH
// if not unit or IsInUnit ( unit ) then
41137: LD_VAR 0 1
41141: NOT
41142: PUSH
41143: LD_VAR 0 1
41147: PPUSH
41148: CALL_OW 310
41152: OR
41153: IFFALSE 41157
// exit ;
41155: GO 41248
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41157: LD_ADDR_VAR 0 4
41161: PUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL_OW 250
41171: PPUSH
41172: LD_VAR 0 2
41176: PPUSH
41177: LD_INT 1
41179: PPUSH
41180: CALL_OW 272
41184: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41185: LD_ADDR_VAR 0 5
41189: PUSH
41190: LD_VAR 0 1
41194: PPUSH
41195: CALL_OW 251
41199: PPUSH
41200: LD_VAR 0 2
41204: PPUSH
41205: LD_INT 1
41207: PPUSH
41208: CALL_OW 273
41212: ST_TO_ADDR
// if ValidHex ( x , y ) then
41213: LD_VAR 0 4
41217: PPUSH
41218: LD_VAR 0 5
41222: PPUSH
41223: CALL_OW 488
41227: IFFALSE 41248
// ComTurnXY ( unit , x , y ) ;
41229: LD_VAR 0 1
41233: PPUSH
41234: LD_VAR 0 4
41238: PPUSH
41239: LD_VAR 0 5
41243: PPUSH
41244: CALL_OW 118
// end ;
41248: LD_VAR 0 3
41252: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41253: LD_INT 0
41255: PPUSH
41256: PPUSH
// result := false ;
41257: LD_ADDR_VAR 0 3
41261: PUSH
41262: LD_INT 0
41264: ST_TO_ADDR
// if not units then
41265: LD_VAR 0 2
41269: NOT
41270: IFFALSE 41274
// exit ;
41272: GO 41319
// for i in units do
41274: LD_ADDR_VAR 0 4
41278: PUSH
41279: LD_VAR 0 2
41283: PUSH
41284: FOR_IN
41285: IFFALSE 41317
// if See ( side , i ) then
41287: LD_VAR 0 1
41291: PPUSH
41292: LD_VAR 0 4
41296: PPUSH
41297: CALL_OW 292
41301: IFFALSE 41315
// begin result := true ;
41303: LD_ADDR_VAR 0 3
41307: PUSH
41308: LD_INT 1
41310: ST_TO_ADDR
// exit ;
41311: POP
41312: POP
41313: GO 41319
// end ;
41315: GO 41284
41317: POP
41318: POP
// end ;
41319: LD_VAR 0 3
41323: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41324: LD_INT 0
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
// if not unit or not points then
41330: LD_VAR 0 1
41334: NOT
41335: PUSH
41336: LD_VAR 0 2
41340: NOT
41341: OR
41342: IFFALSE 41346
// exit ;
41344: GO 41436
// dist := 99999 ;
41346: LD_ADDR_VAR 0 5
41350: PUSH
41351: LD_INT 99999
41353: ST_TO_ADDR
// for i in points do
41354: LD_ADDR_VAR 0 4
41358: PUSH
41359: LD_VAR 0 2
41363: PUSH
41364: FOR_IN
41365: IFFALSE 41434
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41367: LD_ADDR_VAR 0 6
41371: PUSH
41372: LD_VAR 0 1
41376: PPUSH
41377: LD_VAR 0 4
41381: PUSH
41382: LD_INT 1
41384: ARRAY
41385: PPUSH
41386: LD_VAR 0 4
41390: PUSH
41391: LD_INT 2
41393: ARRAY
41394: PPUSH
41395: CALL_OW 297
41399: ST_TO_ADDR
// if tmpDist < dist then
41400: LD_VAR 0 6
41404: PUSH
41405: LD_VAR 0 5
41409: LESS
41410: IFFALSE 41432
// begin result := i ;
41412: LD_ADDR_VAR 0 3
41416: PUSH
41417: LD_VAR 0 4
41421: ST_TO_ADDR
// dist := tmpDist ;
41422: LD_ADDR_VAR 0 5
41426: PUSH
41427: LD_VAR 0 6
41431: ST_TO_ADDR
// end ; end ;
41432: GO 41364
41434: POP
41435: POP
// end ;
41436: LD_VAR 0 3
41440: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41441: LD_INT 0
41443: PPUSH
// uc_side := side ;
41444: LD_ADDR_OWVAR 20
41448: PUSH
41449: LD_VAR 0 1
41453: ST_TO_ADDR
// uc_nation := 3 ;
41454: LD_ADDR_OWVAR 21
41458: PUSH
41459: LD_INT 3
41461: ST_TO_ADDR
// vc_chassis := 25 ;
41462: LD_ADDR_OWVAR 37
41466: PUSH
41467: LD_INT 25
41469: ST_TO_ADDR
// vc_engine := engine_siberite ;
41470: LD_ADDR_OWVAR 39
41474: PUSH
41475: LD_INT 3
41477: ST_TO_ADDR
// vc_control := control_computer ;
41478: LD_ADDR_OWVAR 38
41482: PUSH
41483: LD_INT 3
41485: ST_TO_ADDR
// vc_weapon := 59 ;
41486: LD_ADDR_OWVAR 40
41490: PUSH
41491: LD_INT 59
41493: ST_TO_ADDR
// result := CreateVehicle ;
41494: LD_ADDR_VAR 0 5
41498: PUSH
41499: CALL_OW 45
41503: ST_TO_ADDR
// SetDir ( result , d ) ;
41504: LD_VAR 0 5
41508: PPUSH
41509: LD_VAR 0 4
41513: PPUSH
41514: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41518: LD_VAR 0 5
41522: PPUSH
41523: LD_VAR 0 2
41527: PPUSH
41528: LD_VAR 0 3
41532: PPUSH
41533: LD_INT 0
41535: PPUSH
41536: CALL_OW 48
// end ;
41540: LD_VAR 0 5
41544: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41545: LD_INT 0
41547: PPUSH
41548: PPUSH
41549: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41550: LD_ADDR_VAR 0 2
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41573: LD_VAR 0 1
41577: NOT
41578: PUSH
41579: LD_VAR 0 1
41583: PPUSH
41584: CALL_OW 264
41588: PUSH
41589: LD_INT 12
41591: PUSH
41592: LD_INT 51
41594: PUSH
41595: LD_INT 32
41597: PUSH
41598: LD_INT 89
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: IN
41607: NOT
41608: OR
41609: IFFALSE 41613
// exit ;
41611: GO 41711
// for i := 1 to 3 do
41613: LD_ADDR_VAR 0 3
41617: PUSH
41618: DOUBLE
41619: LD_INT 1
41621: DEC
41622: ST_TO_ADDR
41623: LD_INT 3
41625: PUSH
41626: FOR_TO
41627: IFFALSE 41709
// begin tmp := GetCargo ( cargo , i ) ;
41629: LD_ADDR_VAR 0 4
41633: PUSH
41634: LD_VAR 0 1
41638: PPUSH
41639: LD_VAR 0 3
41643: PPUSH
41644: CALL_OW 289
41648: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41649: LD_ADDR_VAR 0 2
41653: PUSH
41654: LD_VAR 0 2
41658: PPUSH
41659: LD_VAR 0 3
41663: PPUSH
41664: LD_VAR 0 4
41668: PPUSH
41669: CALL_OW 1
41673: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41674: LD_ADDR_VAR 0 2
41678: PUSH
41679: LD_VAR 0 2
41683: PPUSH
41684: LD_INT 4
41686: PPUSH
41687: LD_VAR 0 2
41691: PUSH
41692: LD_INT 4
41694: ARRAY
41695: PUSH
41696: LD_VAR 0 4
41700: PLUS
41701: PPUSH
41702: CALL_OW 1
41706: ST_TO_ADDR
// end ;
41707: GO 41626
41709: POP
41710: POP
// end ;
41711: LD_VAR 0 2
41715: RET
// export function Length ( array ) ; begin
41716: LD_INT 0
41718: PPUSH
// result := array + 0 ;
41719: LD_ADDR_VAR 0 2
41723: PUSH
41724: LD_VAR 0 1
41728: PUSH
41729: LD_INT 0
41731: PLUS
41732: ST_TO_ADDR
// end ;
41733: LD_VAR 0 2
41737: RET
// export function PrepareArray ( array ) ; begin
41738: LD_INT 0
41740: PPUSH
// result := array diff 0 ;
41741: LD_ADDR_VAR 0 2
41745: PUSH
41746: LD_VAR 0 1
41750: PUSH
41751: LD_INT 0
41753: DIFF
41754: ST_TO_ADDR
// if not result [ 1 ] then
41755: LD_VAR 0 2
41759: PUSH
41760: LD_INT 1
41762: ARRAY
41763: NOT
41764: IFFALSE 41784
// result := Delete ( result , 1 ) ;
41766: LD_ADDR_VAR 0 2
41770: PUSH
41771: LD_VAR 0 2
41775: PPUSH
41776: LD_INT 1
41778: PPUSH
41779: CALL_OW 3
41783: ST_TO_ADDR
// end ;
41784: LD_VAR 0 2
41788: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41789: LD_INT 0
41791: PPUSH
41792: PPUSH
41793: PPUSH
41794: PPUSH
// sibRocketRange := 25 ;
41795: LD_ADDR_VAR 0 6
41799: PUSH
41800: LD_INT 25
41802: ST_TO_ADDR
// result := false ;
41803: LD_ADDR_VAR 0 4
41807: PUSH
41808: LD_INT 0
41810: ST_TO_ADDR
// for i := 0 to 5 do
41811: LD_ADDR_VAR 0 5
41815: PUSH
41816: DOUBLE
41817: LD_INT 0
41819: DEC
41820: ST_TO_ADDR
41821: LD_INT 5
41823: PUSH
41824: FOR_TO
41825: IFFALSE 41892
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41827: LD_VAR 0 1
41831: PPUSH
41832: LD_VAR 0 5
41836: PPUSH
41837: LD_VAR 0 6
41841: PPUSH
41842: CALL_OW 272
41846: PPUSH
41847: LD_VAR 0 2
41851: PPUSH
41852: LD_VAR 0 5
41856: PPUSH
41857: LD_VAR 0 6
41861: PPUSH
41862: CALL_OW 273
41866: PPUSH
41867: LD_VAR 0 3
41871: PPUSH
41872: CALL_OW 309
41876: IFFALSE 41890
// begin result := true ;
41878: LD_ADDR_VAR 0 4
41882: PUSH
41883: LD_INT 1
41885: ST_TO_ADDR
// exit ;
41886: POP
41887: POP
41888: GO 41894
// end ;
41890: GO 41824
41892: POP
41893: POP
// end ;
41894: LD_VAR 0 4
41898: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41899: LD_INT 0
41901: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41902: LD_VAR 0 1
41906: PPUSH
41907: LD_VAR 0 2
41911: PPUSH
41912: LD_INT 0
41914: PPUSH
41915: LD_INT 0
41917: PPUSH
41918: LD_INT 1
41920: PPUSH
41921: LD_INT 0
41923: PPUSH
41924: CALL_OW 587
// end ; end_of_file end_of_file
41928: LD_VAR 0 3
41932: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
41933: LD_VAR 0 1
41937: PPUSH
41938: LD_VAR 0 2
41942: PPUSH
41943: LD_VAR 0 3
41947: PPUSH
41948: LD_VAR 0 4
41952: PPUSH
41953: LD_VAR 0 5
41957: PPUSH
41958: LD_VAR 0 6
41962: PPUSH
41963: CALL 42147 0 6
// end ;
41967: PPOPN 6
41969: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
41970: LD_INT 0
41972: PPUSH
// begin if not units then
41973: LD_VAR 0 1
41977: NOT
41978: IFFALSE 41982
// exit ;
41980: GO 41982
// end ;
41982: PPOPN 7
41984: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
41985: CALL 42051 0 0
// end ; end_of_file
41989: PPOPN 1
41991: END
// export globalGameSaveCounter ; every 0 0$1 do
41992: GO 41994
41994: DISABLE
// begin enable ;
41995: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
41996: LD_STRING updateTimer(
41998: PUSH
41999: LD_OWVAR 1
42003: STR
42004: PUSH
42005: LD_STRING );
42007: STR
42008: PPUSH
42009: CALL_OW 559
// end ;
42013: END
// every 0 0$1 do
42014: GO 42016
42016: DISABLE
// begin globalGameSaveCounter := 0 ;
42017: LD_ADDR_EXP 22
42021: PUSH
42022: LD_INT 0
42024: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
42025: LD_STRING setGameSaveCounter(0)
42027: PPUSH
42028: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
42032: LD_STRING initStreamRollete();
42034: PPUSH
42035: CALL_OW 559
// InitStreamMode ;
42039: CALL 43365 0 0
// DefineStreamItems ( false ) ;
42043: LD_INT 0
42045: PPUSH
42046: CALL 43829 0 1
// end ;
42050: END
// export function SOS_MapStart ( ) ; begin
42051: LD_INT 0
42053: PPUSH
// if streamModeActive then
42054: LD_EXP 23
42058: IFFALSE 42067
// DefineStreamItems ( true ) ;
42060: LD_INT 1
42062: PPUSH
42063: CALL 43829 0 1
// UpdateLuaVariables ( ) ;
42067: CALL 42084 0 0
// UpdateFactoryWaypoints ( ) ;
42071: CALL 56690 0 0
// UpdateWarehouseGatheringPoints ( ) ;
42075: CALL 56947 0 0
// end ;
42079: LD_VAR 0 1
42083: RET
// function UpdateLuaVariables ( ) ; begin
42084: LD_INT 0
42086: PPUSH
// if globalGameSaveCounter then
42087: LD_EXP 22
42091: IFFALSE 42125
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
42093: LD_ADDR_EXP 22
42097: PUSH
42098: LD_EXP 22
42102: PPUSH
42103: CALL 39341 0 1
42107: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
42108: LD_STRING setGameSaveCounter(
42110: PUSH
42111: LD_EXP 22
42115: STR
42116: PUSH
42117: LD_STRING )
42119: STR
42120: PPUSH
42121: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
42125: LD_STRING setGameDifficulty(
42127: PUSH
42128: LD_OWVAR 67
42132: STR
42133: PUSH
42134: LD_STRING )
42136: STR
42137: PPUSH
42138: CALL_OW 559
// end ;
42142: LD_VAR 0 1
42146: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42147: LD_INT 0
42149: PPUSH
// if p2 = stream_mode then
42150: LD_VAR 0 2
42154: PUSH
42155: LD_INT 100
42157: EQUAL
42158: IFFALSE 43161
// begin if not StreamModeActive then
42160: LD_EXP 23
42164: NOT
42165: IFFALSE 42175
// StreamModeActive := true ;
42167: LD_ADDR_EXP 23
42171: PUSH
42172: LD_INT 1
42174: ST_TO_ADDR
// if p3 = 0 then
42175: LD_VAR 0 3
42179: PUSH
42180: LD_INT 0
42182: EQUAL
42183: IFFALSE 42189
// InitStreamMode ;
42185: CALL 43365 0 0
// if p3 = 1 then
42189: LD_VAR 0 3
42193: PUSH
42194: LD_INT 1
42196: EQUAL
42197: IFFALSE 42207
// sRocket := true ;
42199: LD_ADDR_EXP 28
42203: PUSH
42204: LD_INT 1
42206: ST_TO_ADDR
// if p3 = 2 then
42207: LD_VAR 0 3
42211: PUSH
42212: LD_INT 2
42214: EQUAL
42215: IFFALSE 42225
// sSpeed := true ;
42217: LD_ADDR_EXP 27
42221: PUSH
42222: LD_INT 1
42224: ST_TO_ADDR
// if p3 = 3 then
42225: LD_VAR 0 3
42229: PUSH
42230: LD_INT 3
42232: EQUAL
42233: IFFALSE 42243
// sEngine := true ;
42235: LD_ADDR_EXP 29
42239: PUSH
42240: LD_INT 1
42242: ST_TO_ADDR
// if p3 = 4 then
42243: LD_VAR 0 3
42247: PUSH
42248: LD_INT 4
42250: EQUAL
42251: IFFALSE 42261
// sSpec := true ;
42253: LD_ADDR_EXP 26
42257: PUSH
42258: LD_INT 1
42260: ST_TO_ADDR
// if p3 = 5 then
42261: LD_VAR 0 3
42265: PUSH
42266: LD_INT 5
42268: EQUAL
42269: IFFALSE 42279
// sLevel := true ;
42271: LD_ADDR_EXP 30
42275: PUSH
42276: LD_INT 1
42278: ST_TO_ADDR
// if p3 = 6 then
42279: LD_VAR 0 3
42283: PUSH
42284: LD_INT 6
42286: EQUAL
42287: IFFALSE 42297
// sArmoury := true ;
42289: LD_ADDR_EXP 31
42293: PUSH
42294: LD_INT 1
42296: ST_TO_ADDR
// if p3 = 7 then
42297: LD_VAR 0 3
42301: PUSH
42302: LD_INT 7
42304: EQUAL
42305: IFFALSE 42315
// sRadar := true ;
42307: LD_ADDR_EXP 32
42311: PUSH
42312: LD_INT 1
42314: ST_TO_ADDR
// if p3 = 8 then
42315: LD_VAR 0 3
42319: PUSH
42320: LD_INT 8
42322: EQUAL
42323: IFFALSE 42333
// sBunker := true ;
42325: LD_ADDR_EXP 33
42329: PUSH
42330: LD_INT 1
42332: ST_TO_ADDR
// if p3 = 9 then
42333: LD_VAR 0 3
42337: PUSH
42338: LD_INT 9
42340: EQUAL
42341: IFFALSE 42351
// sHack := true ;
42343: LD_ADDR_EXP 34
42347: PUSH
42348: LD_INT 1
42350: ST_TO_ADDR
// if p3 = 10 then
42351: LD_VAR 0 3
42355: PUSH
42356: LD_INT 10
42358: EQUAL
42359: IFFALSE 42369
// sFire := true ;
42361: LD_ADDR_EXP 35
42365: PUSH
42366: LD_INT 1
42368: ST_TO_ADDR
// if p3 = 11 then
42369: LD_VAR 0 3
42373: PUSH
42374: LD_INT 11
42376: EQUAL
42377: IFFALSE 42387
// sRefresh := true ;
42379: LD_ADDR_EXP 36
42383: PUSH
42384: LD_INT 1
42386: ST_TO_ADDR
// if p3 = 12 then
42387: LD_VAR 0 3
42391: PUSH
42392: LD_INT 12
42394: EQUAL
42395: IFFALSE 42405
// sExp := true ;
42397: LD_ADDR_EXP 37
42401: PUSH
42402: LD_INT 1
42404: ST_TO_ADDR
// if p3 = 13 then
42405: LD_VAR 0 3
42409: PUSH
42410: LD_INT 13
42412: EQUAL
42413: IFFALSE 42423
// sDepot := true ;
42415: LD_ADDR_EXP 38
42419: PUSH
42420: LD_INT 1
42422: ST_TO_ADDR
// if p3 = 14 then
42423: LD_VAR 0 3
42427: PUSH
42428: LD_INT 14
42430: EQUAL
42431: IFFALSE 42441
// sFlag := true ;
42433: LD_ADDR_EXP 39
42437: PUSH
42438: LD_INT 1
42440: ST_TO_ADDR
// if p3 = 15 then
42441: LD_VAR 0 3
42445: PUSH
42446: LD_INT 15
42448: EQUAL
42449: IFFALSE 42459
// sKamikadze := true ;
42451: LD_ADDR_EXP 47
42455: PUSH
42456: LD_INT 1
42458: ST_TO_ADDR
// if p3 = 16 then
42459: LD_VAR 0 3
42463: PUSH
42464: LD_INT 16
42466: EQUAL
42467: IFFALSE 42477
// sTroll := true ;
42469: LD_ADDR_EXP 48
42473: PUSH
42474: LD_INT 1
42476: ST_TO_ADDR
// if p3 = 17 then
42477: LD_VAR 0 3
42481: PUSH
42482: LD_INT 17
42484: EQUAL
42485: IFFALSE 42495
// sSlow := true ;
42487: LD_ADDR_EXP 49
42491: PUSH
42492: LD_INT 1
42494: ST_TO_ADDR
// if p3 = 18 then
42495: LD_VAR 0 3
42499: PUSH
42500: LD_INT 18
42502: EQUAL
42503: IFFALSE 42513
// sLack := true ;
42505: LD_ADDR_EXP 50
42509: PUSH
42510: LD_INT 1
42512: ST_TO_ADDR
// if p3 = 19 then
42513: LD_VAR 0 3
42517: PUSH
42518: LD_INT 19
42520: EQUAL
42521: IFFALSE 42531
// sTank := true ;
42523: LD_ADDR_EXP 52
42527: PUSH
42528: LD_INT 1
42530: ST_TO_ADDR
// if p3 = 20 then
42531: LD_VAR 0 3
42535: PUSH
42536: LD_INT 20
42538: EQUAL
42539: IFFALSE 42549
// sRemote := true ;
42541: LD_ADDR_EXP 53
42545: PUSH
42546: LD_INT 1
42548: ST_TO_ADDR
// if p3 = 21 then
42549: LD_VAR 0 3
42553: PUSH
42554: LD_INT 21
42556: EQUAL
42557: IFFALSE 42567
// sPowell := true ;
42559: LD_ADDR_EXP 54
42563: PUSH
42564: LD_INT 1
42566: ST_TO_ADDR
// if p3 = 22 then
42567: LD_VAR 0 3
42571: PUSH
42572: LD_INT 22
42574: EQUAL
42575: IFFALSE 42585
// sTeleport := true ;
42577: LD_ADDR_EXP 57
42581: PUSH
42582: LD_INT 1
42584: ST_TO_ADDR
// if p3 = 23 then
42585: LD_VAR 0 3
42589: PUSH
42590: LD_INT 23
42592: EQUAL
42593: IFFALSE 42603
// sOilTower := true ;
42595: LD_ADDR_EXP 59
42599: PUSH
42600: LD_INT 1
42602: ST_TO_ADDR
// if p3 = 24 then
42603: LD_VAR 0 3
42607: PUSH
42608: LD_INT 24
42610: EQUAL
42611: IFFALSE 42621
// sShovel := true ;
42613: LD_ADDR_EXP 60
42617: PUSH
42618: LD_INT 1
42620: ST_TO_ADDR
// if p3 = 25 then
42621: LD_VAR 0 3
42625: PUSH
42626: LD_INT 25
42628: EQUAL
42629: IFFALSE 42639
// sSheik := true ;
42631: LD_ADDR_EXP 61
42635: PUSH
42636: LD_INT 1
42638: ST_TO_ADDR
// if p3 = 26 then
42639: LD_VAR 0 3
42643: PUSH
42644: LD_INT 26
42646: EQUAL
42647: IFFALSE 42657
// sEarthquake := true ;
42649: LD_ADDR_EXP 63
42653: PUSH
42654: LD_INT 1
42656: ST_TO_ADDR
// if p3 = 27 then
42657: LD_VAR 0 3
42661: PUSH
42662: LD_INT 27
42664: EQUAL
42665: IFFALSE 42675
// sAI := true ;
42667: LD_ADDR_EXP 64
42671: PUSH
42672: LD_INT 1
42674: ST_TO_ADDR
// if p3 = 28 then
42675: LD_VAR 0 3
42679: PUSH
42680: LD_INT 28
42682: EQUAL
42683: IFFALSE 42693
// sCargo := true ;
42685: LD_ADDR_EXP 67
42689: PUSH
42690: LD_INT 1
42692: ST_TO_ADDR
// if p3 = 29 then
42693: LD_VAR 0 3
42697: PUSH
42698: LD_INT 29
42700: EQUAL
42701: IFFALSE 42711
// sDLaser := true ;
42703: LD_ADDR_EXP 68
42707: PUSH
42708: LD_INT 1
42710: ST_TO_ADDR
// if p3 = 30 then
42711: LD_VAR 0 3
42715: PUSH
42716: LD_INT 30
42718: EQUAL
42719: IFFALSE 42729
// sExchange := true ;
42721: LD_ADDR_EXP 69
42725: PUSH
42726: LD_INT 1
42728: ST_TO_ADDR
// if p3 = 31 then
42729: LD_VAR 0 3
42733: PUSH
42734: LD_INT 31
42736: EQUAL
42737: IFFALSE 42747
// sFac := true ;
42739: LD_ADDR_EXP 70
42743: PUSH
42744: LD_INT 1
42746: ST_TO_ADDR
// if p3 = 32 then
42747: LD_VAR 0 3
42751: PUSH
42752: LD_INT 32
42754: EQUAL
42755: IFFALSE 42765
// sPower := true ;
42757: LD_ADDR_EXP 71
42761: PUSH
42762: LD_INT 1
42764: ST_TO_ADDR
// if p3 = 33 then
42765: LD_VAR 0 3
42769: PUSH
42770: LD_INT 33
42772: EQUAL
42773: IFFALSE 42783
// sRandom := true ;
42775: LD_ADDR_EXP 72
42779: PUSH
42780: LD_INT 1
42782: ST_TO_ADDR
// if p3 = 34 then
42783: LD_VAR 0 3
42787: PUSH
42788: LD_INT 34
42790: EQUAL
42791: IFFALSE 42801
// sShield := true ;
42793: LD_ADDR_EXP 73
42797: PUSH
42798: LD_INT 1
42800: ST_TO_ADDR
// if p3 = 35 then
42801: LD_VAR 0 3
42805: PUSH
42806: LD_INT 35
42808: EQUAL
42809: IFFALSE 42819
// sTime := true ;
42811: LD_ADDR_EXP 74
42815: PUSH
42816: LD_INT 1
42818: ST_TO_ADDR
// if p3 = 36 then
42819: LD_VAR 0 3
42823: PUSH
42824: LD_INT 36
42826: EQUAL
42827: IFFALSE 42837
// sTools := true ;
42829: LD_ADDR_EXP 75
42833: PUSH
42834: LD_INT 1
42836: ST_TO_ADDR
// if p3 = 101 then
42837: LD_VAR 0 3
42841: PUSH
42842: LD_INT 101
42844: EQUAL
42845: IFFALSE 42855
// sSold := true ;
42847: LD_ADDR_EXP 40
42851: PUSH
42852: LD_INT 1
42854: ST_TO_ADDR
// if p3 = 102 then
42855: LD_VAR 0 3
42859: PUSH
42860: LD_INT 102
42862: EQUAL
42863: IFFALSE 42873
// sDiff := true ;
42865: LD_ADDR_EXP 41
42869: PUSH
42870: LD_INT 1
42872: ST_TO_ADDR
// if p3 = 103 then
42873: LD_VAR 0 3
42877: PUSH
42878: LD_INT 103
42880: EQUAL
42881: IFFALSE 42891
// sFog := true ;
42883: LD_ADDR_EXP 44
42887: PUSH
42888: LD_INT 1
42890: ST_TO_ADDR
// if p3 = 104 then
42891: LD_VAR 0 3
42895: PUSH
42896: LD_INT 104
42898: EQUAL
42899: IFFALSE 42909
// sReset := true ;
42901: LD_ADDR_EXP 45
42905: PUSH
42906: LD_INT 1
42908: ST_TO_ADDR
// if p3 = 105 then
42909: LD_VAR 0 3
42913: PUSH
42914: LD_INT 105
42916: EQUAL
42917: IFFALSE 42927
// sSun := true ;
42919: LD_ADDR_EXP 46
42923: PUSH
42924: LD_INT 1
42926: ST_TO_ADDR
// if p3 = 106 then
42927: LD_VAR 0 3
42931: PUSH
42932: LD_INT 106
42934: EQUAL
42935: IFFALSE 42945
// sTiger := true ;
42937: LD_ADDR_EXP 42
42941: PUSH
42942: LD_INT 1
42944: ST_TO_ADDR
// if p3 = 107 then
42945: LD_VAR 0 3
42949: PUSH
42950: LD_INT 107
42952: EQUAL
42953: IFFALSE 42963
// sBomb := true ;
42955: LD_ADDR_EXP 43
42959: PUSH
42960: LD_INT 1
42962: ST_TO_ADDR
// if p3 = 108 then
42963: LD_VAR 0 3
42967: PUSH
42968: LD_INT 108
42970: EQUAL
42971: IFFALSE 42981
// sWound := true ;
42973: LD_ADDR_EXP 51
42977: PUSH
42978: LD_INT 1
42980: ST_TO_ADDR
// if p3 = 109 then
42981: LD_VAR 0 3
42985: PUSH
42986: LD_INT 109
42988: EQUAL
42989: IFFALSE 42999
// sBetray := true ;
42991: LD_ADDR_EXP 55
42995: PUSH
42996: LD_INT 1
42998: ST_TO_ADDR
// if p3 = 110 then
42999: LD_VAR 0 3
43003: PUSH
43004: LD_INT 110
43006: EQUAL
43007: IFFALSE 43017
// sContamin := true ;
43009: LD_ADDR_EXP 56
43013: PUSH
43014: LD_INT 1
43016: ST_TO_ADDR
// if p3 = 111 then
43017: LD_VAR 0 3
43021: PUSH
43022: LD_INT 111
43024: EQUAL
43025: IFFALSE 43035
// sOil := true ;
43027: LD_ADDR_EXP 58
43031: PUSH
43032: LD_INT 1
43034: ST_TO_ADDR
// if p3 = 112 then
43035: LD_VAR 0 3
43039: PUSH
43040: LD_INT 112
43042: EQUAL
43043: IFFALSE 43053
// sStu := true ;
43045: LD_ADDR_EXP 62
43049: PUSH
43050: LD_INT 1
43052: ST_TO_ADDR
// if p3 = 113 then
43053: LD_VAR 0 3
43057: PUSH
43058: LD_INT 113
43060: EQUAL
43061: IFFALSE 43071
// sBazooka := true ;
43063: LD_ADDR_EXP 65
43067: PUSH
43068: LD_INT 1
43070: ST_TO_ADDR
// if p3 = 114 then
43071: LD_VAR 0 3
43075: PUSH
43076: LD_INT 114
43078: EQUAL
43079: IFFALSE 43089
// sMortar := true ;
43081: LD_ADDR_EXP 66
43085: PUSH
43086: LD_INT 1
43088: ST_TO_ADDR
// if p3 = 115 then
43089: LD_VAR 0 3
43093: PUSH
43094: LD_INT 115
43096: EQUAL
43097: IFFALSE 43107
// sRanger := true ;
43099: LD_ADDR_EXP 76
43103: PUSH
43104: LD_INT 1
43106: ST_TO_ADDR
// if p3 = 116 then
43107: LD_VAR 0 3
43111: PUSH
43112: LD_INT 116
43114: EQUAL
43115: IFFALSE 43125
// sComputer := true ;
43117: LD_ADDR_EXP 77
43121: PUSH
43122: LD_INT 1
43124: ST_TO_ADDR
// if p3 = 117 then
43125: LD_VAR 0 3
43129: PUSH
43130: LD_INT 117
43132: EQUAL
43133: IFFALSE 43143
// s30 := true ;
43135: LD_ADDR_EXP 78
43139: PUSH
43140: LD_INT 1
43142: ST_TO_ADDR
// if p3 = 118 then
43143: LD_VAR 0 3
43147: PUSH
43148: LD_INT 118
43150: EQUAL
43151: IFFALSE 43161
// s60 := true ;
43153: LD_ADDR_EXP 79
43157: PUSH
43158: LD_INT 1
43160: ST_TO_ADDR
// end ; if p2 = hack_mode then
43161: LD_VAR 0 2
43165: PUSH
43166: LD_INT 101
43168: EQUAL
43169: IFFALSE 43297
// begin case p3 of 1 :
43171: LD_VAR 0 3
43175: PUSH
43176: LD_INT 1
43178: DOUBLE
43179: EQUAL
43180: IFTRUE 43184
43182: GO 43191
43184: POP
// hHackUnlimitedResources ; 2 :
43185: CALL 55436 0 0
43189: GO 43297
43191: LD_INT 2
43193: DOUBLE
43194: EQUAL
43195: IFTRUE 43199
43197: GO 43206
43199: POP
// hHackSetLevel10 ; 3 :
43200: CALL 55569 0 0
43204: GO 43297
43206: LD_INT 3
43208: DOUBLE
43209: EQUAL
43210: IFTRUE 43214
43212: GO 43221
43214: POP
// hHackSetLevel10YourUnits ; 4 :
43215: CALL 55654 0 0
43219: GO 43297
43221: LD_INT 4
43223: DOUBLE
43224: EQUAL
43225: IFTRUE 43229
43227: GO 43236
43229: POP
// hHackInvincible ; 5 :
43230: CALL 56102 0 0
43234: GO 43297
43236: LD_INT 5
43238: DOUBLE
43239: EQUAL
43240: IFTRUE 43244
43242: GO 43251
43244: POP
// hHackInvisible ; 6 :
43245: CALL 56213 0 0
43249: GO 43297
43251: LD_INT 6
43253: DOUBLE
43254: EQUAL
43255: IFTRUE 43259
43257: GO 43266
43259: POP
// hHackChangeYourSide ; 7 :
43260: CALL 56270 0 0
43264: GO 43297
43266: LD_INT 7
43268: DOUBLE
43269: EQUAL
43270: IFTRUE 43274
43272: GO 43281
43274: POP
// hHackChangeUnitSide ; 8 :
43275: CALL 56312 0 0
43279: GO 43297
43281: LD_INT 8
43283: DOUBLE
43284: EQUAL
43285: IFTRUE 43289
43287: GO 43296
43289: POP
// hHackFog ; end ;
43290: CALL 56413 0 0
43294: GO 43297
43296: POP
// end ; if p2 = game_save_mode then
43297: LD_VAR 0 2
43301: PUSH
43302: LD_INT 102
43304: EQUAL
43305: IFFALSE 43360
// begin if p3 = 1 then
43307: LD_VAR 0 3
43311: PUSH
43312: LD_INT 1
43314: EQUAL
43315: IFFALSE 43327
// globalGameSaveCounter := p4 ;
43317: LD_ADDR_EXP 22
43321: PUSH
43322: LD_VAR 0 4
43326: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
43327: LD_VAR 0 3
43331: PUSH
43332: LD_INT 2
43334: EQUAL
43335: PUSH
43336: LD_EXP 22
43340: AND
43341: IFFALSE 43360
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
43343: LD_STRING setGameSaveCounter(
43345: PUSH
43346: LD_EXP 22
43350: STR
43351: PUSH
43352: LD_STRING )
43354: STR
43355: PPUSH
43356: CALL_OW 559
// end ; end ;
43360: LD_VAR 0 7
43364: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
43365: LD_INT 0
43367: PPUSH
// streamModeActive := false ;
43368: LD_ADDR_EXP 23
43372: PUSH
43373: LD_INT 0
43375: ST_TO_ADDR
// normalCounter := 36 ;
43376: LD_ADDR_EXP 24
43380: PUSH
43381: LD_INT 36
43383: ST_TO_ADDR
// hardcoreCounter := 18 ;
43384: LD_ADDR_EXP 25
43388: PUSH
43389: LD_INT 18
43391: ST_TO_ADDR
// sRocket := false ;
43392: LD_ADDR_EXP 28
43396: PUSH
43397: LD_INT 0
43399: ST_TO_ADDR
// sSpeed := false ;
43400: LD_ADDR_EXP 27
43404: PUSH
43405: LD_INT 0
43407: ST_TO_ADDR
// sEngine := false ;
43408: LD_ADDR_EXP 29
43412: PUSH
43413: LD_INT 0
43415: ST_TO_ADDR
// sSpec := false ;
43416: LD_ADDR_EXP 26
43420: PUSH
43421: LD_INT 0
43423: ST_TO_ADDR
// sLevel := false ;
43424: LD_ADDR_EXP 30
43428: PUSH
43429: LD_INT 0
43431: ST_TO_ADDR
// sArmoury := false ;
43432: LD_ADDR_EXP 31
43436: PUSH
43437: LD_INT 0
43439: ST_TO_ADDR
// sRadar := false ;
43440: LD_ADDR_EXP 32
43444: PUSH
43445: LD_INT 0
43447: ST_TO_ADDR
// sBunker := false ;
43448: LD_ADDR_EXP 33
43452: PUSH
43453: LD_INT 0
43455: ST_TO_ADDR
// sHack := false ;
43456: LD_ADDR_EXP 34
43460: PUSH
43461: LD_INT 0
43463: ST_TO_ADDR
// sFire := false ;
43464: LD_ADDR_EXP 35
43468: PUSH
43469: LD_INT 0
43471: ST_TO_ADDR
// sRefresh := false ;
43472: LD_ADDR_EXP 36
43476: PUSH
43477: LD_INT 0
43479: ST_TO_ADDR
// sExp := false ;
43480: LD_ADDR_EXP 37
43484: PUSH
43485: LD_INT 0
43487: ST_TO_ADDR
// sDepot := false ;
43488: LD_ADDR_EXP 38
43492: PUSH
43493: LD_INT 0
43495: ST_TO_ADDR
// sFlag := false ;
43496: LD_ADDR_EXP 39
43500: PUSH
43501: LD_INT 0
43503: ST_TO_ADDR
// sKamikadze := false ;
43504: LD_ADDR_EXP 47
43508: PUSH
43509: LD_INT 0
43511: ST_TO_ADDR
// sTroll := false ;
43512: LD_ADDR_EXP 48
43516: PUSH
43517: LD_INT 0
43519: ST_TO_ADDR
// sSlow := false ;
43520: LD_ADDR_EXP 49
43524: PUSH
43525: LD_INT 0
43527: ST_TO_ADDR
// sLack := false ;
43528: LD_ADDR_EXP 50
43532: PUSH
43533: LD_INT 0
43535: ST_TO_ADDR
// sTank := false ;
43536: LD_ADDR_EXP 52
43540: PUSH
43541: LD_INT 0
43543: ST_TO_ADDR
// sRemote := false ;
43544: LD_ADDR_EXP 53
43548: PUSH
43549: LD_INT 0
43551: ST_TO_ADDR
// sPowell := false ;
43552: LD_ADDR_EXP 54
43556: PUSH
43557: LD_INT 0
43559: ST_TO_ADDR
// sTeleport := false ;
43560: LD_ADDR_EXP 57
43564: PUSH
43565: LD_INT 0
43567: ST_TO_ADDR
// sOilTower := false ;
43568: LD_ADDR_EXP 59
43572: PUSH
43573: LD_INT 0
43575: ST_TO_ADDR
// sShovel := false ;
43576: LD_ADDR_EXP 60
43580: PUSH
43581: LD_INT 0
43583: ST_TO_ADDR
// sSheik := false ;
43584: LD_ADDR_EXP 61
43588: PUSH
43589: LD_INT 0
43591: ST_TO_ADDR
// sEarthquake := false ;
43592: LD_ADDR_EXP 63
43596: PUSH
43597: LD_INT 0
43599: ST_TO_ADDR
// sAI := false ;
43600: LD_ADDR_EXP 64
43604: PUSH
43605: LD_INT 0
43607: ST_TO_ADDR
// sCargo := false ;
43608: LD_ADDR_EXP 67
43612: PUSH
43613: LD_INT 0
43615: ST_TO_ADDR
// sDLaser := false ;
43616: LD_ADDR_EXP 68
43620: PUSH
43621: LD_INT 0
43623: ST_TO_ADDR
// sExchange := false ;
43624: LD_ADDR_EXP 69
43628: PUSH
43629: LD_INT 0
43631: ST_TO_ADDR
// sFac := false ;
43632: LD_ADDR_EXP 70
43636: PUSH
43637: LD_INT 0
43639: ST_TO_ADDR
// sPower := false ;
43640: LD_ADDR_EXP 71
43644: PUSH
43645: LD_INT 0
43647: ST_TO_ADDR
// sRandom := false ;
43648: LD_ADDR_EXP 72
43652: PUSH
43653: LD_INT 0
43655: ST_TO_ADDR
// sShield := false ;
43656: LD_ADDR_EXP 73
43660: PUSH
43661: LD_INT 0
43663: ST_TO_ADDR
// sTime := false ;
43664: LD_ADDR_EXP 74
43668: PUSH
43669: LD_INT 0
43671: ST_TO_ADDR
// sTools := false ;
43672: LD_ADDR_EXP 75
43676: PUSH
43677: LD_INT 0
43679: ST_TO_ADDR
// sSold := false ;
43680: LD_ADDR_EXP 40
43684: PUSH
43685: LD_INT 0
43687: ST_TO_ADDR
// sDiff := false ;
43688: LD_ADDR_EXP 41
43692: PUSH
43693: LD_INT 0
43695: ST_TO_ADDR
// sFog := false ;
43696: LD_ADDR_EXP 44
43700: PUSH
43701: LD_INT 0
43703: ST_TO_ADDR
// sReset := false ;
43704: LD_ADDR_EXP 45
43708: PUSH
43709: LD_INT 0
43711: ST_TO_ADDR
// sSun := false ;
43712: LD_ADDR_EXP 46
43716: PUSH
43717: LD_INT 0
43719: ST_TO_ADDR
// sTiger := false ;
43720: LD_ADDR_EXP 42
43724: PUSH
43725: LD_INT 0
43727: ST_TO_ADDR
// sBomb := false ;
43728: LD_ADDR_EXP 43
43732: PUSH
43733: LD_INT 0
43735: ST_TO_ADDR
// sWound := false ;
43736: LD_ADDR_EXP 51
43740: PUSH
43741: LD_INT 0
43743: ST_TO_ADDR
// sBetray := false ;
43744: LD_ADDR_EXP 55
43748: PUSH
43749: LD_INT 0
43751: ST_TO_ADDR
// sContamin := false ;
43752: LD_ADDR_EXP 56
43756: PUSH
43757: LD_INT 0
43759: ST_TO_ADDR
// sOil := false ;
43760: LD_ADDR_EXP 58
43764: PUSH
43765: LD_INT 0
43767: ST_TO_ADDR
// sStu := false ;
43768: LD_ADDR_EXP 62
43772: PUSH
43773: LD_INT 0
43775: ST_TO_ADDR
// sBazooka := false ;
43776: LD_ADDR_EXP 65
43780: PUSH
43781: LD_INT 0
43783: ST_TO_ADDR
// sMortar := false ;
43784: LD_ADDR_EXP 66
43788: PUSH
43789: LD_INT 0
43791: ST_TO_ADDR
// sRanger := false ;
43792: LD_ADDR_EXP 76
43796: PUSH
43797: LD_INT 0
43799: ST_TO_ADDR
// sComputer := false ;
43800: LD_ADDR_EXP 77
43804: PUSH
43805: LD_INT 0
43807: ST_TO_ADDR
// s30 := false ;
43808: LD_ADDR_EXP 78
43812: PUSH
43813: LD_INT 0
43815: ST_TO_ADDR
// s60 := false ;
43816: LD_ADDR_EXP 79
43820: PUSH
43821: LD_INT 0
43823: ST_TO_ADDR
// end ;
43824: LD_VAR 0 1
43828: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
43829: LD_INT 0
43831: PPUSH
43832: PPUSH
43833: PPUSH
43834: PPUSH
43835: PPUSH
43836: PPUSH
43837: PPUSH
// result := [ ] ;
43838: LD_ADDR_VAR 0 2
43842: PUSH
43843: EMPTY
43844: ST_TO_ADDR
// if campaign_id = 1 then
43845: LD_OWVAR 69
43849: PUSH
43850: LD_INT 1
43852: EQUAL
43853: IFFALSE 47019
// begin case mission_number of 1 :
43855: LD_OWVAR 70
43859: PUSH
43860: LD_INT 1
43862: DOUBLE
43863: EQUAL
43864: IFTRUE 43868
43866: GO 43944
43868: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
43869: LD_ADDR_VAR 0 2
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: LD_INT 4
43879: PUSH
43880: LD_INT 11
43882: PUSH
43883: LD_INT 12
43885: PUSH
43886: LD_INT 15
43888: PUSH
43889: LD_INT 16
43891: PUSH
43892: LD_INT 22
43894: PUSH
43895: LD_INT 23
43897: PUSH
43898: LD_INT 26
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 101
43914: PUSH
43915: LD_INT 102
43917: PUSH
43918: LD_INT 106
43920: PUSH
43921: LD_INT 116
43923: PUSH
43924: LD_INT 117
43926: PUSH
43927: LD_INT 118
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: ST_TO_ADDR
43942: GO 47017
43944: LD_INT 2
43946: DOUBLE
43947: EQUAL
43948: IFTRUE 43952
43950: GO 44036
43952: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
43953: LD_ADDR_VAR 0 2
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: LD_INT 4
43963: PUSH
43964: LD_INT 11
43966: PUSH
43967: LD_INT 12
43969: PUSH
43970: LD_INT 15
43972: PUSH
43973: LD_INT 16
43975: PUSH
43976: LD_INT 22
43978: PUSH
43979: LD_INT 23
43981: PUSH
43982: LD_INT 26
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 101
43998: PUSH
43999: LD_INT 102
44001: PUSH
44002: LD_INT 105
44004: PUSH
44005: LD_INT 106
44007: PUSH
44008: LD_INT 108
44010: PUSH
44011: LD_INT 116
44013: PUSH
44014: LD_INT 117
44016: PUSH
44017: LD_INT 118
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: ST_TO_ADDR
44034: GO 47017
44036: LD_INT 3
44038: DOUBLE
44039: EQUAL
44040: IFTRUE 44044
44042: GO 44132
44044: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
44045: LD_ADDR_VAR 0 2
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 4
44055: PUSH
44056: LD_INT 5
44058: PUSH
44059: LD_INT 11
44061: PUSH
44062: LD_INT 12
44064: PUSH
44065: LD_INT 15
44067: PUSH
44068: LD_INT 16
44070: PUSH
44071: LD_INT 22
44073: PUSH
44074: LD_INT 26
44076: PUSH
44077: LD_INT 36
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 101
44094: PUSH
44095: LD_INT 102
44097: PUSH
44098: LD_INT 105
44100: PUSH
44101: LD_INT 106
44103: PUSH
44104: LD_INT 108
44106: PUSH
44107: LD_INT 116
44109: PUSH
44110: LD_INT 117
44112: PUSH
44113: LD_INT 118
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: ST_TO_ADDR
44130: GO 47017
44132: LD_INT 4
44134: DOUBLE
44135: EQUAL
44136: IFTRUE 44140
44138: GO 44236
44140: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
44141: LD_ADDR_VAR 0 2
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: LD_INT 4
44151: PUSH
44152: LD_INT 5
44154: PUSH
44155: LD_INT 8
44157: PUSH
44158: LD_INT 11
44160: PUSH
44161: LD_INT 12
44163: PUSH
44164: LD_INT 15
44166: PUSH
44167: LD_INT 16
44169: PUSH
44170: LD_INT 22
44172: PUSH
44173: LD_INT 23
44175: PUSH
44176: LD_INT 26
44178: PUSH
44179: LD_INT 36
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 101
44198: PUSH
44199: LD_INT 102
44201: PUSH
44202: LD_INT 105
44204: PUSH
44205: LD_INT 106
44207: PUSH
44208: LD_INT 108
44210: PUSH
44211: LD_INT 116
44213: PUSH
44214: LD_INT 117
44216: PUSH
44217: LD_INT 118
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: ST_TO_ADDR
44234: GO 47017
44236: LD_INT 5
44238: DOUBLE
44239: EQUAL
44240: IFTRUE 44244
44242: GO 44356
44244: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
44245: LD_ADDR_VAR 0 2
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 4
44255: PUSH
44256: LD_INT 5
44258: PUSH
44259: LD_INT 6
44261: PUSH
44262: LD_INT 8
44264: PUSH
44265: LD_INT 11
44267: PUSH
44268: LD_INT 12
44270: PUSH
44271: LD_INT 15
44273: PUSH
44274: LD_INT 16
44276: PUSH
44277: LD_INT 22
44279: PUSH
44280: LD_INT 23
44282: PUSH
44283: LD_INT 25
44285: PUSH
44286: LD_INT 26
44288: PUSH
44289: LD_INT 36
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 101
44310: PUSH
44311: LD_INT 102
44313: PUSH
44314: LD_INT 105
44316: PUSH
44317: LD_INT 106
44319: PUSH
44320: LD_INT 108
44322: PUSH
44323: LD_INT 109
44325: PUSH
44326: LD_INT 112
44328: PUSH
44329: LD_INT 116
44331: PUSH
44332: LD_INT 117
44334: PUSH
44335: LD_INT 118
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: ST_TO_ADDR
44354: GO 47017
44356: LD_INT 6
44358: DOUBLE
44359: EQUAL
44360: IFTRUE 44364
44362: GO 44496
44364: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
44365: LD_ADDR_VAR 0 2
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 4
44375: PUSH
44376: LD_INT 5
44378: PUSH
44379: LD_INT 6
44381: PUSH
44382: LD_INT 8
44384: PUSH
44385: LD_INT 11
44387: PUSH
44388: LD_INT 12
44390: PUSH
44391: LD_INT 15
44393: PUSH
44394: LD_INT 16
44396: PUSH
44397: LD_INT 20
44399: PUSH
44400: LD_INT 21
44402: PUSH
44403: LD_INT 22
44405: PUSH
44406: LD_INT 23
44408: PUSH
44409: LD_INT 25
44411: PUSH
44412: LD_INT 26
44414: PUSH
44415: LD_INT 30
44417: PUSH
44418: LD_INT 31
44420: PUSH
44421: LD_INT 32
44423: PUSH
44424: LD_INT 36
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 101
44450: PUSH
44451: LD_INT 102
44453: PUSH
44454: LD_INT 105
44456: PUSH
44457: LD_INT 106
44459: PUSH
44460: LD_INT 108
44462: PUSH
44463: LD_INT 109
44465: PUSH
44466: LD_INT 112
44468: PUSH
44469: LD_INT 116
44471: PUSH
44472: LD_INT 117
44474: PUSH
44475: LD_INT 118
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: ST_TO_ADDR
44494: GO 47017
44496: LD_INT 7
44498: DOUBLE
44499: EQUAL
44500: IFTRUE 44504
44502: GO 44616
44504: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
44505: LD_ADDR_VAR 0 2
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: LD_INT 4
44515: PUSH
44516: LD_INT 5
44518: PUSH
44519: LD_INT 7
44521: PUSH
44522: LD_INT 11
44524: PUSH
44525: LD_INT 12
44527: PUSH
44528: LD_INT 15
44530: PUSH
44531: LD_INT 16
44533: PUSH
44534: LD_INT 20
44536: PUSH
44537: LD_INT 21
44539: PUSH
44540: LD_INT 22
44542: PUSH
44543: LD_INT 23
44545: PUSH
44546: LD_INT 25
44548: PUSH
44549: LD_INT 26
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 101
44570: PUSH
44571: LD_INT 102
44573: PUSH
44574: LD_INT 103
44576: PUSH
44577: LD_INT 105
44579: PUSH
44580: LD_INT 106
44582: PUSH
44583: LD_INT 108
44585: PUSH
44586: LD_INT 112
44588: PUSH
44589: LD_INT 116
44591: PUSH
44592: LD_INT 117
44594: PUSH
44595: LD_INT 118
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: ST_TO_ADDR
44614: GO 47017
44616: LD_INT 8
44618: DOUBLE
44619: EQUAL
44620: IFTRUE 44624
44622: GO 44764
44624: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
44625: LD_ADDR_VAR 0 2
44629: PUSH
44630: LD_INT 2
44632: PUSH
44633: LD_INT 4
44635: PUSH
44636: LD_INT 5
44638: PUSH
44639: LD_INT 6
44641: PUSH
44642: LD_INT 7
44644: PUSH
44645: LD_INT 8
44647: PUSH
44648: LD_INT 11
44650: PUSH
44651: LD_INT 12
44653: PUSH
44654: LD_INT 15
44656: PUSH
44657: LD_INT 16
44659: PUSH
44660: LD_INT 20
44662: PUSH
44663: LD_INT 21
44665: PUSH
44666: LD_INT 22
44668: PUSH
44669: LD_INT 23
44671: PUSH
44672: LD_INT 25
44674: PUSH
44675: LD_INT 26
44677: PUSH
44678: LD_INT 30
44680: PUSH
44681: LD_INT 31
44683: PUSH
44684: LD_INT 32
44686: PUSH
44687: LD_INT 36
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 101
44714: PUSH
44715: LD_INT 102
44717: PUSH
44718: LD_INT 103
44720: PUSH
44721: LD_INT 105
44723: PUSH
44724: LD_INT 106
44726: PUSH
44727: LD_INT 108
44729: PUSH
44730: LD_INT 109
44732: PUSH
44733: LD_INT 112
44735: PUSH
44736: LD_INT 116
44738: PUSH
44739: LD_INT 117
44741: PUSH
44742: LD_INT 118
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: ST_TO_ADDR
44762: GO 47017
44764: LD_INT 9
44766: DOUBLE
44767: EQUAL
44768: IFTRUE 44772
44770: GO 44920
44772: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
44773: LD_ADDR_VAR 0 2
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 4
44783: PUSH
44784: LD_INT 5
44786: PUSH
44787: LD_INT 6
44789: PUSH
44790: LD_INT 7
44792: PUSH
44793: LD_INT 8
44795: PUSH
44796: LD_INT 11
44798: PUSH
44799: LD_INT 12
44801: PUSH
44802: LD_INT 15
44804: PUSH
44805: LD_INT 16
44807: PUSH
44808: LD_INT 20
44810: PUSH
44811: LD_INT 21
44813: PUSH
44814: LD_INT 22
44816: PUSH
44817: LD_INT 23
44819: PUSH
44820: LD_INT 25
44822: PUSH
44823: LD_INT 26
44825: PUSH
44826: LD_INT 28
44828: PUSH
44829: LD_INT 30
44831: PUSH
44832: LD_INT 31
44834: PUSH
44835: LD_INT 32
44837: PUSH
44838: LD_INT 36
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 101
44866: PUSH
44867: LD_INT 102
44869: PUSH
44870: LD_INT 103
44872: PUSH
44873: LD_INT 105
44875: PUSH
44876: LD_INT 106
44878: PUSH
44879: LD_INT 108
44881: PUSH
44882: LD_INT 109
44884: PUSH
44885: LD_INT 112
44887: PUSH
44888: LD_INT 114
44890: PUSH
44891: LD_INT 116
44893: PUSH
44894: LD_INT 117
44896: PUSH
44897: LD_INT 118
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: ST_TO_ADDR
44918: GO 47017
44920: LD_INT 10
44922: DOUBLE
44923: EQUAL
44924: IFTRUE 44928
44926: GO 45124
44928: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
44929: LD_ADDR_VAR 0 2
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: LD_INT 4
44939: PUSH
44940: LD_INT 5
44942: PUSH
44943: LD_INT 6
44945: PUSH
44946: LD_INT 7
44948: PUSH
44949: LD_INT 8
44951: PUSH
44952: LD_INT 9
44954: PUSH
44955: LD_INT 10
44957: PUSH
44958: LD_INT 11
44960: PUSH
44961: LD_INT 12
44963: PUSH
44964: LD_INT 13
44966: PUSH
44967: LD_INT 14
44969: PUSH
44970: LD_INT 15
44972: PUSH
44973: LD_INT 16
44975: PUSH
44976: LD_INT 17
44978: PUSH
44979: LD_INT 18
44981: PUSH
44982: LD_INT 19
44984: PUSH
44985: LD_INT 20
44987: PUSH
44988: LD_INT 21
44990: PUSH
44991: LD_INT 22
44993: PUSH
44994: LD_INT 23
44996: PUSH
44997: LD_INT 24
44999: PUSH
45000: LD_INT 25
45002: PUSH
45003: LD_INT 26
45005: PUSH
45006: LD_INT 28
45008: PUSH
45009: LD_INT 30
45011: PUSH
45012: LD_INT 31
45014: PUSH
45015: LD_INT 32
45017: PUSH
45018: LD_INT 36
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 101
45054: PUSH
45055: LD_INT 102
45057: PUSH
45058: LD_INT 103
45060: PUSH
45061: LD_INT 104
45063: PUSH
45064: LD_INT 105
45066: PUSH
45067: LD_INT 106
45069: PUSH
45070: LD_INT 107
45072: PUSH
45073: LD_INT 108
45075: PUSH
45076: LD_INT 109
45078: PUSH
45079: LD_INT 110
45081: PUSH
45082: LD_INT 111
45084: PUSH
45085: LD_INT 112
45087: PUSH
45088: LD_INT 114
45090: PUSH
45091: LD_INT 116
45093: PUSH
45094: LD_INT 117
45096: PUSH
45097: LD_INT 118
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: ST_TO_ADDR
45122: GO 47017
45124: LD_INT 11
45126: DOUBLE
45127: EQUAL
45128: IFTRUE 45132
45130: GO 45336
45132: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
45133: LD_ADDR_VAR 0 2
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: LD_INT 3
45143: PUSH
45144: LD_INT 4
45146: PUSH
45147: LD_INT 5
45149: PUSH
45150: LD_INT 6
45152: PUSH
45153: LD_INT 7
45155: PUSH
45156: LD_INT 8
45158: PUSH
45159: LD_INT 9
45161: PUSH
45162: LD_INT 10
45164: PUSH
45165: LD_INT 11
45167: PUSH
45168: LD_INT 12
45170: PUSH
45171: LD_INT 13
45173: PUSH
45174: LD_INT 14
45176: PUSH
45177: LD_INT 15
45179: PUSH
45180: LD_INT 16
45182: PUSH
45183: LD_INT 17
45185: PUSH
45186: LD_INT 18
45188: PUSH
45189: LD_INT 19
45191: PUSH
45192: LD_INT 20
45194: PUSH
45195: LD_INT 21
45197: PUSH
45198: LD_INT 22
45200: PUSH
45201: LD_INT 23
45203: PUSH
45204: LD_INT 24
45206: PUSH
45207: LD_INT 25
45209: PUSH
45210: LD_INT 26
45212: PUSH
45213: LD_INT 28
45215: PUSH
45216: LD_INT 30
45218: PUSH
45219: LD_INT 31
45221: PUSH
45222: LD_INT 32
45224: PUSH
45225: LD_INT 34
45227: PUSH
45228: LD_INT 36
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 101
45266: PUSH
45267: LD_INT 102
45269: PUSH
45270: LD_INT 103
45272: PUSH
45273: LD_INT 104
45275: PUSH
45276: LD_INT 105
45278: PUSH
45279: LD_INT 106
45281: PUSH
45282: LD_INT 107
45284: PUSH
45285: LD_INT 108
45287: PUSH
45288: LD_INT 109
45290: PUSH
45291: LD_INT 110
45293: PUSH
45294: LD_INT 111
45296: PUSH
45297: LD_INT 112
45299: PUSH
45300: LD_INT 114
45302: PUSH
45303: LD_INT 116
45305: PUSH
45306: LD_INT 117
45308: PUSH
45309: LD_INT 118
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: ST_TO_ADDR
45334: GO 47017
45336: LD_INT 12
45338: DOUBLE
45339: EQUAL
45340: IFTRUE 45344
45342: GO 45564
45344: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
45345: LD_ADDR_VAR 0 2
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: LD_INT 3
45358: PUSH
45359: LD_INT 4
45361: PUSH
45362: LD_INT 5
45364: PUSH
45365: LD_INT 6
45367: PUSH
45368: LD_INT 7
45370: PUSH
45371: LD_INT 8
45373: PUSH
45374: LD_INT 9
45376: PUSH
45377: LD_INT 10
45379: PUSH
45380: LD_INT 11
45382: PUSH
45383: LD_INT 12
45385: PUSH
45386: LD_INT 13
45388: PUSH
45389: LD_INT 14
45391: PUSH
45392: LD_INT 15
45394: PUSH
45395: LD_INT 16
45397: PUSH
45398: LD_INT 17
45400: PUSH
45401: LD_INT 18
45403: PUSH
45404: LD_INT 19
45406: PUSH
45407: LD_INT 20
45409: PUSH
45410: LD_INT 21
45412: PUSH
45413: LD_INT 22
45415: PUSH
45416: LD_INT 23
45418: PUSH
45419: LD_INT 24
45421: PUSH
45422: LD_INT 25
45424: PUSH
45425: LD_INT 26
45427: PUSH
45428: LD_INT 27
45430: PUSH
45431: LD_INT 28
45433: PUSH
45434: LD_INT 30
45436: PUSH
45437: LD_INT 31
45439: PUSH
45440: LD_INT 32
45442: PUSH
45443: LD_INT 33
45445: PUSH
45446: LD_INT 34
45448: PUSH
45449: LD_INT 36
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 101
45490: PUSH
45491: LD_INT 102
45493: PUSH
45494: LD_INT 103
45496: PUSH
45497: LD_INT 104
45499: PUSH
45500: LD_INT 105
45502: PUSH
45503: LD_INT 106
45505: PUSH
45506: LD_INT 107
45508: PUSH
45509: LD_INT 108
45511: PUSH
45512: LD_INT 109
45514: PUSH
45515: LD_INT 110
45517: PUSH
45518: LD_INT 111
45520: PUSH
45521: LD_INT 112
45523: PUSH
45524: LD_INT 113
45526: PUSH
45527: LD_INT 114
45529: PUSH
45530: LD_INT 116
45532: PUSH
45533: LD_INT 117
45535: PUSH
45536: LD_INT 118
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: ST_TO_ADDR
45562: GO 47017
45564: LD_INT 13
45566: DOUBLE
45567: EQUAL
45568: IFTRUE 45572
45570: GO 45780
45572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
45573: LD_ADDR_VAR 0 2
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: LD_INT 4
45589: PUSH
45590: LD_INT 5
45592: PUSH
45593: LD_INT 8
45595: PUSH
45596: LD_INT 9
45598: PUSH
45599: LD_INT 10
45601: PUSH
45602: LD_INT 11
45604: PUSH
45605: LD_INT 12
45607: PUSH
45608: LD_INT 14
45610: PUSH
45611: LD_INT 15
45613: PUSH
45614: LD_INT 16
45616: PUSH
45617: LD_INT 17
45619: PUSH
45620: LD_INT 18
45622: PUSH
45623: LD_INT 19
45625: PUSH
45626: LD_INT 20
45628: PUSH
45629: LD_INT 21
45631: PUSH
45632: LD_INT 22
45634: PUSH
45635: LD_INT 23
45637: PUSH
45638: LD_INT 24
45640: PUSH
45641: LD_INT 25
45643: PUSH
45644: LD_INT 26
45646: PUSH
45647: LD_INT 27
45649: PUSH
45650: LD_INT 28
45652: PUSH
45653: LD_INT 30
45655: PUSH
45656: LD_INT 31
45658: PUSH
45659: LD_INT 32
45661: PUSH
45662: LD_INT 33
45664: PUSH
45665: LD_INT 34
45667: PUSH
45668: LD_INT 36
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 101
45706: PUSH
45707: LD_INT 102
45709: PUSH
45710: LD_INT 103
45712: PUSH
45713: LD_INT 104
45715: PUSH
45716: LD_INT 105
45718: PUSH
45719: LD_INT 106
45721: PUSH
45722: LD_INT 107
45724: PUSH
45725: LD_INT 108
45727: PUSH
45728: LD_INT 109
45730: PUSH
45731: LD_INT 110
45733: PUSH
45734: LD_INT 111
45736: PUSH
45737: LD_INT 112
45739: PUSH
45740: LD_INT 113
45742: PUSH
45743: LD_INT 114
45745: PUSH
45746: LD_INT 116
45748: PUSH
45749: LD_INT 117
45751: PUSH
45752: LD_INT 118
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: ST_TO_ADDR
45778: GO 47017
45780: LD_INT 14
45782: DOUBLE
45783: EQUAL
45784: IFTRUE 45788
45786: GO 46012
45788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
45789: LD_ADDR_VAR 0 2
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: LD_INT 3
45802: PUSH
45803: LD_INT 4
45805: PUSH
45806: LD_INT 5
45808: PUSH
45809: LD_INT 6
45811: PUSH
45812: LD_INT 7
45814: PUSH
45815: LD_INT 8
45817: PUSH
45818: LD_INT 9
45820: PUSH
45821: LD_INT 10
45823: PUSH
45824: LD_INT 11
45826: PUSH
45827: LD_INT 12
45829: PUSH
45830: LD_INT 13
45832: PUSH
45833: LD_INT 14
45835: PUSH
45836: LD_INT 15
45838: PUSH
45839: LD_INT 16
45841: PUSH
45842: LD_INT 17
45844: PUSH
45845: LD_INT 18
45847: PUSH
45848: LD_INT 19
45850: PUSH
45851: LD_INT 20
45853: PUSH
45854: LD_INT 21
45856: PUSH
45857: LD_INT 22
45859: PUSH
45860: LD_INT 23
45862: PUSH
45863: LD_INT 24
45865: PUSH
45866: LD_INT 25
45868: PUSH
45869: LD_INT 26
45871: PUSH
45872: LD_INT 27
45874: PUSH
45875: LD_INT 28
45877: PUSH
45878: LD_INT 29
45880: PUSH
45881: LD_INT 30
45883: PUSH
45884: LD_INT 31
45886: PUSH
45887: LD_INT 32
45889: PUSH
45890: LD_INT 33
45892: PUSH
45893: LD_INT 34
45895: PUSH
45896: LD_INT 36
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 101
45938: PUSH
45939: LD_INT 102
45941: PUSH
45942: LD_INT 103
45944: PUSH
45945: LD_INT 104
45947: PUSH
45948: LD_INT 105
45950: PUSH
45951: LD_INT 106
45953: PUSH
45954: LD_INT 107
45956: PUSH
45957: LD_INT 108
45959: PUSH
45960: LD_INT 109
45962: PUSH
45963: LD_INT 110
45965: PUSH
45966: LD_INT 111
45968: PUSH
45969: LD_INT 112
45971: PUSH
45972: LD_INT 113
45974: PUSH
45975: LD_INT 114
45977: PUSH
45978: LD_INT 116
45980: PUSH
45981: LD_INT 117
45983: PUSH
45984: LD_INT 118
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: ST_TO_ADDR
46010: GO 47017
46012: LD_INT 15
46014: DOUBLE
46015: EQUAL
46016: IFTRUE 46020
46018: GO 46244
46020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
46021: LD_ADDR_VAR 0 2
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: LD_INT 4
46037: PUSH
46038: LD_INT 5
46040: PUSH
46041: LD_INT 6
46043: PUSH
46044: LD_INT 7
46046: PUSH
46047: LD_INT 8
46049: PUSH
46050: LD_INT 9
46052: PUSH
46053: LD_INT 10
46055: PUSH
46056: LD_INT 11
46058: PUSH
46059: LD_INT 12
46061: PUSH
46062: LD_INT 13
46064: PUSH
46065: LD_INT 14
46067: PUSH
46068: LD_INT 15
46070: PUSH
46071: LD_INT 16
46073: PUSH
46074: LD_INT 17
46076: PUSH
46077: LD_INT 18
46079: PUSH
46080: LD_INT 19
46082: PUSH
46083: LD_INT 20
46085: PUSH
46086: LD_INT 21
46088: PUSH
46089: LD_INT 22
46091: PUSH
46092: LD_INT 23
46094: PUSH
46095: LD_INT 24
46097: PUSH
46098: LD_INT 25
46100: PUSH
46101: LD_INT 26
46103: PUSH
46104: LD_INT 27
46106: PUSH
46107: LD_INT 28
46109: PUSH
46110: LD_INT 29
46112: PUSH
46113: LD_INT 30
46115: PUSH
46116: LD_INT 31
46118: PUSH
46119: LD_INT 32
46121: PUSH
46122: LD_INT 33
46124: PUSH
46125: LD_INT 34
46127: PUSH
46128: LD_INT 36
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 101
46170: PUSH
46171: LD_INT 102
46173: PUSH
46174: LD_INT 103
46176: PUSH
46177: LD_INT 104
46179: PUSH
46180: LD_INT 105
46182: PUSH
46183: LD_INT 106
46185: PUSH
46186: LD_INT 107
46188: PUSH
46189: LD_INT 108
46191: PUSH
46192: LD_INT 109
46194: PUSH
46195: LD_INT 110
46197: PUSH
46198: LD_INT 111
46200: PUSH
46201: LD_INT 112
46203: PUSH
46204: LD_INT 113
46206: PUSH
46207: LD_INT 114
46209: PUSH
46210: LD_INT 116
46212: PUSH
46213: LD_INT 117
46215: PUSH
46216: LD_INT 118
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: ST_TO_ADDR
46242: GO 47017
46244: LD_INT 16
46246: DOUBLE
46247: EQUAL
46248: IFTRUE 46252
46250: GO 46388
46252: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
46253: LD_ADDR_VAR 0 2
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: LD_INT 4
46263: PUSH
46264: LD_INT 5
46266: PUSH
46267: LD_INT 7
46269: PUSH
46270: LD_INT 11
46272: PUSH
46273: LD_INT 12
46275: PUSH
46276: LD_INT 15
46278: PUSH
46279: LD_INT 16
46281: PUSH
46282: LD_INT 20
46284: PUSH
46285: LD_INT 21
46287: PUSH
46288: LD_INT 22
46290: PUSH
46291: LD_INT 23
46293: PUSH
46294: LD_INT 25
46296: PUSH
46297: LD_INT 26
46299: PUSH
46300: LD_INT 30
46302: PUSH
46303: LD_INT 31
46305: PUSH
46306: LD_INT 32
46308: PUSH
46309: LD_INT 33
46311: PUSH
46312: LD_INT 34
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 101
46338: PUSH
46339: LD_INT 102
46341: PUSH
46342: LD_INT 103
46344: PUSH
46345: LD_INT 106
46347: PUSH
46348: LD_INT 108
46350: PUSH
46351: LD_INT 112
46353: PUSH
46354: LD_INT 113
46356: PUSH
46357: LD_INT 114
46359: PUSH
46360: LD_INT 116
46362: PUSH
46363: LD_INT 117
46365: PUSH
46366: LD_INT 118
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: ST_TO_ADDR
46386: GO 47017
46388: LD_INT 17
46390: DOUBLE
46391: EQUAL
46392: IFTRUE 46396
46394: GO 46620
46396: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
46397: LD_ADDR_VAR 0 2
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: LD_INT 3
46410: PUSH
46411: LD_INT 4
46413: PUSH
46414: LD_INT 5
46416: PUSH
46417: LD_INT 6
46419: PUSH
46420: LD_INT 7
46422: PUSH
46423: LD_INT 8
46425: PUSH
46426: LD_INT 9
46428: PUSH
46429: LD_INT 10
46431: PUSH
46432: LD_INT 11
46434: PUSH
46435: LD_INT 12
46437: PUSH
46438: LD_INT 13
46440: PUSH
46441: LD_INT 14
46443: PUSH
46444: LD_INT 15
46446: PUSH
46447: LD_INT 16
46449: PUSH
46450: LD_INT 17
46452: PUSH
46453: LD_INT 18
46455: PUSH
46456: LD_INT 19
46458: PUSH
46459: LD_INT 20
46461: PUSH
46462: LD_INT 21
46464: PUSH
46465: LD_INT 22
46467: PUSH
46468: LD_INT 23
46470: PUSH
46471: LD_INT 24
46473: PUSH
46474: LD_INT 25
46476: PUSH
46477: LD_INT 26
46479: PUSH
46480: LD_INT 27
46482: PUSH
46483: LD_INT 28
46485: PUSH
46486: LD_INT 29
46488: PUSH
46489: LD_INT 30
46491: PUSH
46492: LD_INT 31
46494: PUSH
46495: LD_INT 32
46497: PUSH
46498: LD_INT 33
46500: PUSH
46501: LD_INT 34
46503: PUSH
46504: LD_INT 36
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 101
46546: PUSH
46547: LD_INT 102
46549: PUSH
46550: LD_INT 103
46552: PUSH
46553: LD_INT 104
46555: PUSH
46556: LD_INT 105
46558: PUSH
46559: LD_INT 106
46561: PUSH
46562: LD_INT 107
46564: PUSH
46565: LD_INT 108
46567: PUSH
46568: LD_INT 109
46570: PUSH
46571: LD_INT 110
46573: PUSH
46574: LD_INT 111
46576: PUSH
46577: LD_INT 112
46579: PUSH
46580: LD_INT 113
46582: PUSH
46583: LD_INT 114
46585: PUSH
46586: LD_INT 116
46588: PUSH
46589: LD_INT 117
46591: PUSH
46592: LD_INT 118
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: ST_TO_ADDR
46618: GO 47017
46620: LD_INT 18
46622: DOUBLE
46623: EQUAL
46624: IFTRUE 46628
46626: GO 46776
46628: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
46629: LD_ADDR_VAR 0 2
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: LD_INT 4
46639: PUSH
46640: LD_INT 5
46642: PUSH
46643: LD_INT 7
46645: PUSH
46646: LD_INT 11
46648: PUSH
46649: LD_INT 12
46651: PUSH
46652: LD_INT 15
46654: PUSH
46655: LD_INT 16
46657: PUSH
46658: LD_INT 20
46660: PUSH
46661: LD_INT 21
46663: PUSH
46664: LD_INT 22
46666: PUSH
46667: LD_INT 23
46669: PUSH
46670: LD_INT 25
46672: PUSH
46673: LD_INT 26
46675: PUSH
46676: LD_INT 30
46678: PUSH
46679: LD_INT 31
46681: PUSH
46682: LD_INT 32
46684: PUSH
46685: LD_INT 33
46687: PUSH
46688: LD_INT 34
46690: PUSH
46691: LD_INT 35
46693: PUSH
46694: LD_INT 36
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 101
46722: PUSH
46723: LD_INT 102
46725: PUSH
46726: LD_INT 103
46728: PUSH
46729: LD_INT 106
46731: PUSH
46732: LD_INT 108
46734: PUSH
46735: LD_INT 112
46737: PUSH
46738: LD_INT 113
46740: PUSH
46741: LD_INT 114
46743: PUSH
46744: LD_INT 115
46746: PUSH
46747: LD_INT 116
46749: PUSH
46750: LD_INT 117
46752: PUSH
46753: LD_INT 118
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: ST_TO_ADDR
46774: GO 47017
46776: LD_INT 19
46778: DOUBLE
46779: EQUAL
46780: IFTRUE 46784
46782: GO 47016
46784: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
46785: LD_ADDR_VAR 0 2
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: LD_INT 3
46798: PUSH
46799: LD_INT 4
46801: PUSH
46802: LD_INT 5
46804: PUSH
46805: LD_INT 6
46807: PUSH
46808: LD_INT 7
46810: PUSH
46811: LD_INT 8
46813: PUSH
46814: LD_INT 9
46816: PUSH
46817: LD_INT 10
46819: PUSH
46820: LD_INT 11
46822: PUSH
46823: LD_INT 12
46825: PUSH
46826: LD_INT 13
46828: PUSH
46829: LD_INT 14
46831: PUSH
46832: LD_INT 15
46834: PUSH
46835: LD_INT 16
46837: PUSH
46838: LD_INT 17
46840: PUSH
46841: LD_INT 18
46843: PUSH
46844: LD_INT 19
46846: PUSH
46847: LD_INT 20
46849: PUSH
46850: LD_INT 21
46852: PUSH
46853: LD_INT 22
46855: PUSH
46856: LD_INT 23
46858: PUSH
46859: LD_INT 24
46861: PUSH
46862: LD_INT 25
46864: PUSH
46865: LD_INT 26
46867: PUSH
46868: LD_INT 27
46870: PUSH
46871: LD_INT 28
46873: PUSH
46874: LD_INT 29
46876: PUSH
46877: LD_INT 30
46879: PUSH
46880: LD_INT 31
46882: PUSH
46883: LD_INT 32
46885: PUSH
46886: LD_INT 33
46888: PUSH
46889: LD_INT 34
46891: PUSH
46892: LD_INT 35
46894: PUSH
46895: LD_INT 36
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 101
46938: PUSH
46939: LD_INT 102
46941: PUSH
46942: LD_INT 103
46944: PUSH
46945: LD_INT 104
46947: PUSH
46948: LD_INT 105
46950: PUSH
46951: LD_INT 106
46953: PUSH
46954: LD_INT 107
46956: PUSH
46957: LD_INT 108
46959: PUSH
46960: LD_INT 109
46962: PUSH
46963: LD_INT 110
46965: PUSH
46966: LD_INT 111
46968: PUSH
46969: LD_INT 112
46971: PUSH
46972: LD_INT 113
46974: PUSH
46975: LD_INT 114
46977: PUSH
46978: LD_INT 115
46980: PUSH
46981: LD_INT 116
46983: PUSH
46984: LD_INT 117
46986: PUSH
46987: LD_INT 118
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: ST_TO_ADDR
47014: GO 47017
47016: POP
// end else
47017: GO 47248
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
47019: LD_ADDR_VAR 0 2
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: LD_INT 3
47032: PUSH
47033: LD_INT 4
47035: PUSH
47036: LD_INT 5
47038: PUSH
47039: LD_INT 6
47041: PUSH
47042: LD_INT 7
47044: PUSH
47045: LD_INT 8
47047: PUSH
47048: LD_INT 9
47050: PUSH
47051: LD_INT 10
47053: PUSH
47054: LD_INT 11
47056: PUSH
47057: LD_INT 12
47059: PUSH
47060: LD_INT 13
47062: PUSH
47063: LD_INT 14
47065: PUSH
47066: LD_INT 15
47068: PUSH
47069: LD_INT 16
47071: PUSH
47072: LD_INT 17
47074: PUSH
47075: LD_INT 18
47077: PUSH
47078: LD_INT 19
47080: PUSH
47081: LD_INT 20
47083: PUSH
47084: LD_INT 21
47086: PUSH
47087: LD_INT 22
47089: PUSH
47090: LD_INT 23
47092: PUSH
47093: LD_INT 24
47095: PUSH
47096: LD_INT 25
47098: PUSH
47099: LD_INT 26
47101: PUSH
47102: LD_INT 27
47104: PUSH
47105: LD_INT 28
47107: PUSH
47108: LD_INT 29
47110: PUSH
47111: LD_INT 30
47113: PUSH
47114: LD_INT 31
47116: PUSH
47117: LD_INT 32
47119: PUSH
47120: LD_INT 33
47122: PUSH
47123: LD_INT 34
47125: PUSH
47126: LD_INT 35
47128: PUSH
47129: LD_INT 36
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 101
47172: PUSH
47173: LD_INT 102
47175: PUSH
47176: LD_INT 103
47178: PUSH
47179: LD_INT 104
47181: PUSH
47182: LD_INT 105
47184: PUSH
47185: LD_INT 106
47187: PUSH
47188: LD_INT 107
47190: PUSH
47191: LD_INT 108
47193: PUSH
47194: LD_INT 109
47196: PUSH
47197: LD_INT 110
47199: PUSH
47200: LD_INT 111
47202: PUSH
47203: LD_INT 112
47205: PUSH
47206: LD_INT 113
47208: PUSH
47209: LD_INT 114
47211: PUSH
47212: LD_INT 115
47214: PUSH
47215: LD_INT 116
47217: PUSH
47218: LD_INT 117
47220: PUSH
47221: LD_INT 118
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: ST_TO_ADDR
// if result then
47248: LD_VAR 0 2
47252: IFFALSE 48038
// begin normal :=  ;
47254: LD_ADDR_VAR 0 5
47258: PUSH
47259: LD_STRING 
47261: ST_TO_ADDR
// hardcore :=  ;
47262: LD_ADDR_VAR 0 6
47266: PUSH
47267: LD_STRING 
47269: ST_TO_ADDR
// active :=  ;
47270: LD_ADDR_VAR 0 7
47274: PUSH
47275: LD_STRING 
47277: ST_TO_ADDR
// for i = 1 to normalCounter do
47278: LD_ADDR_VAR 0 8
47282: PUSH
47283: DOUBLE
47284: LD_INT 1
47286: DEC
47287: ST_TO_ADDR
47288: LD_EXP 24
47292: PUSH
47293: FOR_TO
47294: IFFALSE 47395
// begin tmp := 0 ;
47296: LD_ADDR_VAR 0 3
47300: PUSH
47301: LD_STRING 0
47303: ST_TO_ADDR
// if result [ 1 ] then
47304: LD_VAR 0 2
47308: PUSH
47309: LD_INT 1
47311: ARRAY
47312: IFFALSE 47377
// if result [ 1 ] [ 1 ] = i then
47314: LD_VAR 0 2
47318: PUSH
47319: LD_INT 1
47321: ARRAY
47322: PUSH
47323: LD_INT 1
47325: ARRAY
47326: PUSH
47327: LD_VAR 0 8
47331: EQUAL
47332: IFFALSE 47377
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
47334: LD_ADDR_VAR 0 2
47338: PUSH
47339: LD_VAR 0 2
47343: PPUSH
47344: LD_INT 1
47346: PPUSH
47347: LD_VAR 0 2
47351: PUSH
47352: LD_INT 1
47354: ARRAY
47355: PPUSH
47356: LD_INT 1
47358: PPUSH
47359: CALL_OW 3
47363: PPUSH
47364: CALL_OW 1
47368: ST_TO_ADDR
// tmp := 1 ;
47369: LD_ADDR_VAR 0 3
47373: PUSH
47374: LD_STRING 1
47376: ST_TO_ADDR
// end ; normal := normal & tmp ;
47377: LD_ADDR_VAR 0 5
47381: PUSH
47382: LD_VAR 0 5
47386: PUSH
47387: LD_VAR 0 3
47391: STR
47392: ST_TO_ADDR
// end ;
47393: GO 47293
47395: POP
47396: POP
// for i = 1 to hardcoreCounter do
47397: LD_ADDR_VAR 0 8
47401: PUSH
47402: DOUBLE
47403: LD_INT 1
47405: DEC
47406: ST_TO_ADDR
47407: LD_EXP 25
47411: PUSH
47412: FOR_TO
47413: IFFALSE 47518
// begin tmp := 0 ;
47415: LD_ADDR_VAR 0 3
47419: PUSH
47420: LD_STRING 0
47422: ST_TO_ADDR
// if result [ 2 ] then
47423: LD_VAR 0 2
47427: PUSH
47428: LD_INT 2
47430: ARRAY
47431: IFFALSE 47500
// if result [ 2 ] [ 1 ] = 100 + i then
47433: LD_VAR 0 2
47437: PUSH
47438: LD_INT 2
47440: ARRAY
47441: PUSH
47442: LD_INT 1
47444: ARRAY
47445: PUSH
47446: LD_INT 100
47448: PUSH
47449: LD_VAR 0 8
47453: PLUS
47454: EQUAL
47455: IFFALSE 47500
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
47457: LD_ADDR_VAR 0 2
47461: PUSH
47462: LD_VAR 0 2
47466: PPUSH
47467: LD_INT 2
47469: PPUSH
47470: LD_VAR 0 2
47474: PUSH
47475: LD_INT 2
47477: ARRAY
47478: PPUSH
47479: LD_INT 1
47481: PPUSH
47482: CALL_OW 3
47486: PPUSH
47487: CALL_OW 1
47491: ST_TO_ADDR
// tmp := 1 ;
47492: LD_ADDR_VAR 0 3
47496: PUSH
47497: LD_STRING 1
47499: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
47500: LD_ADDR_VAR 0 6
47504: PUSH
47505: LD_VAR 0 6
47509: PUSH
47510: LD_VAR 0 3
47514: STR
47515: ST_TO_ADDR
// end ;
47516: GO 47412
47518: POP
47519: POP
// if isGameLoad then
47520: LD_VAR 0 1
47524: IFFALSE 47999
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
47526: LD_ADDR_VAR 0 4
47530: PUSH
47531: LD_EXP 28
47535: PUSH
47536: LD_EXP 27
47540: PUSH
47541: LD_EXP 29
47545: PUSH
47546: LD_EXP 26
47550: PUSH
47551: LD_EXP 30
47555: PUSH
47556: LD_EXP 31
47560: PUSH
47561: LD_EXP 32
47565: PUSH
47566: LD_EXP 33
47570: PUSH
47571: LD_EXP 34
47575: PUSH
47576: LD_EXP 35
47580: PUSH
47581: LD_EXP 36
47585: PUSH
47586: LD_EXP 37
47590: PUSH
47591: LD_EXP 38
47595: PUSH
47596: LD_EXP 39
47600: PUSH
47601: LD_EXP 47
47605: PUSH
47606: LD_EXP 48
47610: PUSH
47611: LD_EXP 49
47615: PUSH
47616: LD_EXP 50
47620: PUSH
47621: LD_EXP 52
47625: PUSH
47626: LD_EXP 53
47630: PUSH
47631: LD_EXP 54
47635: PUSH
47636: LD_EXP 57
47640: PUSH
47641: LD_EXP 59
47645: PUSH
47646: LD_EXP 60
47650: PUSH
47651: LD_EXP 61
47655: PUSH
47656: LD_EXP 63
47660: PUSH
47661: LD_EXP 64
47665: PUSH
47666: LD_EXP 67
47670: PUSH
47671: LD_EXP 68
47675: PUSH
47676: LD_EXP 69
47680: PUSH
47681: LD_EXP 70
47685: PUSH
47686: LD_EXP 71
47690: PUSH
47691: LD_EXP 72
47695: PUSH
47696: LD_EXP 73
47700: PUSH
47701: LD_EXP 74
47705: PUSH
47706: LD_EXP 75
47710: PUSH
47711: LD_EXP 40
47715: PUSH
47716: LD_EXP 41
47720: PUSH
47721: LD_EXP 44
47725: PUSH
47726: LD_EXP 45
47730: PUSH
47731: LD_EXP 46
47735: PUSH
47736: LD_EXP 42
47740: PUSH
47741: LD_EXP 43
47745: PUSH
47746: LD_EXP 51
47750: PUSH
47751: LD_EXP 55
47755: PUSH
47756: LD_EXP 56
47760: PUSH
47761: LD_EXP 58
47765: PUSH
47766: LD_EXP 62
47770: PUSH
47771: LD_EXP 65
47775: PUSH
47776: LD_EXP 66
47780: PUSH
47781: LD_EXP 76
47785: PUSH
47786: LD_EXP 77
47790: PUSH
47791: LD_EXP 78
47795: PUSH
47796: LD_EXP 79
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: ST_TO_ADDR
// tmp :=  ;
47857: LD_ADDR_VAR 0 3
47861: PUSH
47862: LD_STRING 
47864: ST_TO_ADDR
// for i = 1 to normalCounter do
47865: LD_ADDR_VAR 0 8
47869: PUSH
47870: DOUBLE
47871: LD_INT 1
47873: DEC
47874: ST_TO_ADDR
47875: LD_EXP 24
47879: PUSH
47880: FOR_TO
47881: IFFALSE 47917
// begin if flags [ i ] then
47883: LD_VAR 0 4
47887: PUSH
47888: LD_VAR 0 8
47892: ARRAY
47893: IFFALSE 47915
// tmp := tmp & i & ; ;
47895: LD_ADDR_VAR 0 3
47899: PUSH
47900: LD_VAR 0 3
47904: PUSH
47905: LD_VAR 0 8
47909: STR
47910: PUSH
47911: LD_STRING ;
47913: STR
47914: ST_TO_ADDR
// end ;
47915: GO 47880
47917: POP
47918: POP
// for i = 1 to hardcoreCounter do
47919: LD_ADDR_VAR 0 8
47923: PUSH
47924: DOUBLE
47925: LD_INT 1
47927: DEC
47928: ST_TO_ADDR
47929: LD_EXP 25
47933: PUSH
47934: FOR_TO
47935: IFFALSE 47981
// begin if flags [ normalCounter + i ] then
47937: LD_VAR 0 4
47941: PUSH
47942: LD_EXP 24
47946: PUSH
47947: LD_VAR 0 8
47951: PLUS
47952: ARRAY
47953: IFFALSE 47979
// tmp := tmp & ( 100 + i ) & ; ;
47955: LD_ADDR_VAR 0 3
47959: PUSH
47960: LD_VAR 0 3
47964: PUSH
47965: LD_INT 100
47967: PUSH
47968: LD_VAR 0 8
47972: PLUS
47973: STR
47974: PUSH
47975: LD_STRING ;
47977: STR
47978: ST_TO_ADDR
// end ;
47979: GO 47934
47981: POP
47982: POP
// if tmp then
47983: LD_VAR 0 3
47987: IFFALSE 47999
// active := tmp ;
47989: LD_ADDR_VAR 0 7
47993: PUSH
47994: LD_VAR 0 3
47998: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
47999: LD_STRING getStreamItemsFromMission("
48001: PUSH
48002: LD_VAR 0 5
48006: STR
48007: PUSH
48008: LD_STRING ","
48010: STR
48011: PUSH
48012: LD_VAR 0 6
48016: STR
48017: PUSH
48018: LD_STRING ","
48020: STR
48021: PUSH
48022: LD_VAR 0 7
48026: STR
48027: PUSH
48028: LD_STRING ")
48030: STR
48031: PPUSH
48032: CALL_OW 559
// end else
48036: GO 48045
// ToLua ( getStreamItemsFromMission("","","") ) ;
48038: LD_STRING getStreamItemsFromMission("","","")
48040: PPUSH
48041: CALL_OW 559
// end ;
48045: LD_VAR 0 2
48049: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
48050: LD_EXP 23
48054: PUSH
48055: LD_EXP 28
48059: AND
48060: IFFALSE 48184
48062: GO 48064
48064: DISABLE
48065: LD_INT 0
48067: PPUSH
48068: PPUSH
// begin enable ;
48069: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
48070: LD_ADDR_VAR 0 2
48074: PUSH
48075: LD_INT 22
48077: PUSH
48078: LD_OWVAR 2
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 34
48092: PUSH
48093: LD_INT 7
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 34
48102: PUSH
48103: LD_INT 45
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 34
48112: PUSH
48113: LD_INT 28
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 34
48122: PUSH
48123: LD_INT 47
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PPUSH
48141: CALL_OW 69
48145: ST_TO_ADDR
// if not tmp then
48146: LD_VAR 0 2
48150: NOT
48151: IFFALSE 48155
// exit ;
48153: GO 48184
// for i in tmp do
48155: LD_ADDR_VAR 0 1
48159: PUSH
48160: LD_VAR 0 2
48164: PUSH
48165: FOR_IN
48166: IFFALSE 48182
// begin SetLives ( i , 0 ) ;
48168: LD_VAR 0 1
48172: PPUSH
48173: LD_INT 0
48175: PPUSH
48176: CALL_OW 234
// end ;
48180: GO 48165
48182: POP
48183: POP
// end ;
48184: PPOPN 2
48186: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
48187: LD_EXP 23
48191: PUSH
48192: LD_EXP 29
48196: AND
48197: IFFALSE 48281
48199: GO 48201
48201: DISABLE
48202: LD_INT 0
48204: PPUSH
48205: PPUSH
// begin enable ;
48206: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
48207: LD_ADDR_VAR 0 2
48211: PUSH
48212: LD_INT 22
48214: PUSH
48215: LD_OWVAR 2
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 32
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PPUSH
48238: CALL_OW 69
48242: ST_TO_ADDR
// if not tmp then
48243: LD_VAR 0 2
48247: NOT
48248: IFFALSE 48252
// exit ;
48250: GO 48281
// for i in tmp do
48252: LD_ADDR_VAR 0 1
48256: PUSH
48257: LD_VAR 0 2
48261: PUSH
48262: FOR_IN
48263: IFFALSE 48279
// begin SetLives ( i , 0 ) ;
48265: LD_VAR 0 1
48269: PPUSH
48270: LD_INT 0
48272: PPUSH
48273: CALL_OW 234
// end ;
48277: GO 48262
48279: POP
48280: POP
// end ;
48281: PPOPN 2
48283: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
48284: LD_EXP 23
48288: PUSH
48289: LD_EXP 26
48293: AND
48294: IFFALSE 48387
48296: GO 48298
48298: DISABLE
48299: LD_INT 0
48301: PPUSH
// begin enable ;
48302: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
48303: LD_ADDR_VAR 0 1
48307: PUSH
48308: LD_INT 22
48310: PUSH
48311: LD_OWVAR 2
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: LD_INT 25
48325: PUSH
48326: LD_INT 5
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 25
48335: PUSH
48336: LD_INT 9
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 25
48345: PUSH
48346: LD_INT 8
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PPUSH
48363: CALL_OW 69
48367: PUSH
48368: FOR_IN
48369: IFFALSE 48385
// begin SetClass ( i , 1 ) ;
48371: LD_VAR 0 1
48375: PPUSH
48376: LD_INT 1
48378: PPUSH
48379: CALL_OW 336
// end ;
48383: GO 48368
48385: POP
48386: POP
// end ;
48387: PPOPN 1
48389: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
48390: LD_EXP 23
48394: PUSH
48395: LD_EXP 27
48399: AND
48400: PUSH
48401: LD_OWVAR 65
48405: PUSH
48406: LD_INT 7
48408: LESS
48409: AND
48410: IFFALSE 48424
48412: GO 48414
48414: DISABLE
// begin enable ;
48415: ENABLE
// game_speed := 7 ;
48416: LD_ADDR_OWVAR 65
48420: PUSH
48421: LD_INT 7
48423: ST_TO_ADDR
// end ;
48424: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
48425: LD_EXP 23
48429: PUSH
48430: LD_EXP 30
48434: AND
48435: IFFALSE 48637
48437: GO 48439
48439: DISABLE
48440: LD_INT 0
48442: PPUSH
48443: PPUSH
48444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
48445: LD_ADDR_VAR 0 3
48449: PUSH
48450: LD_INT 81
48452: PUSH
48453: LD_OWVAR 2
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 21
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PPUSH
48476: CALL_OW 69
48480: ST_TO_ADDR
// if not tmp then
48481: LD_VAR 0 3
48485: NOT
48486: IFFALSE 48490
// exit ;
48488: GO 48637
// if tmp > 5 then
48490: LD_VAR 0 3
48494: PUSH
48495: LD_INT 5
48497: GREATER
48498: IFFALSE 48510
// k := 5 else
48500: LD_ADDR_VAR 0 2
48504: PUSH
48505: LD_INT 5
48507: ST_TO_ADDR
48508: GO 48520
// k := tmp ;
48510: LD_ADDR_VAR 0 2
48514: PUSH
48515: LD_VAR 0 3
48519: ST_TO_ADDR
// for i := 1 to k do
48520: LD_ADDR_VAR 0 1
48524: PUSH
48525: DOUBLE
48526: LD_INT 1
48528: DEC
48529: ST_TO_ADDR
48530: LD_VAR 0 2
48534: PUSH
48535: FOR_TO
48536: IFFALSE 48635
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
48538: LD_VAR 0 3
48542: PUSH
48543: LD_VAR 0 1
48547: ARRAY
48548: PPUSH
48549: LD_VAR 0 1
48553: PUSH
48554: LD_INT 4
48556: MOD
48557: PUSH
48558: LD_INT 1
48560: PLUS
48561: PPUSH
48562: CALL_OW 259
48566: PUSH
48567: LD_INT 10
48569: LESS
48570: IFFALSE 48633
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
48572: LD_VAR 0 3
48576: PUSH
48577: LD_VAR 0 1
48581: ARRAY
48582: PPUSH
48583: LD_VAR 0 1
48587: PUSH
48588: LD_INT 4
48590: MOD
48591: PUSH
48592: LD_INT 1
48594: PLUS
48595: PPUSH
48596: LD_VAR 0 3
48600: PUSH
48601: LD_VAR 0 1
48605: ARRAY
48606: PPUSH
48607: LD_VAR 0 1
48611: PUSH
48612: LD_INT 4
48614: MOD
48615: PUSH
48616: LD_INT 1
48618: PLUS
48619: PPUSH
48620: CALL_OW 259
48624: PUSH
48625: LD_INT 1
48627: PLUS
48628: PPUSH
48629: CALL_OW 237
48633: GO 48535
48635: POP
48636: POP
// end ;
48637: PPOPN 3
48639: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
48640: LD_EXP 23
48644: PUSH
48645: LD_EXP 31
48649: AND
48650: IFFALSE 48670
48652: GO 48654
48654: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
48655: LD_INT 4
48657: PPUSH
48658: LD_OWVAR 2
48662: PPUSH
48663: LD_INT 0
48665: PPUSH
48666: CALL_OW 324
48670: END
// every 0 0$1 trigger StreamModeActive and sShovel do
48671: LD_EXP 23
48675: PUSH
48676: LD_EXP 60
48680: AND
48681: IFFALSE 48701
48683: GO 48685
48685: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
48686: LD_INT 19
48688: PPUSH
48689: LD_OWVAR 2
48693: PPUSH
48694: LD_INT 0
48696: PPUSH
48697: CALL_OW 324
48701: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
48702: LD_EXP 23
48706: PUSH
48707: LD_EXP 32
48711: AND
48712: IFFALSE 48814
48714: GO 48716
48716: DISABLE
48717: LD_INT 0
48719: PPUSH
48720: PPUSH
// begin enable ;
48721: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
48722: LD_ADDR_VAR 0 2
48726: PUSH
48727: LD_INT 22
48729: PUSH
48730: LD_OWVAR 2
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 34
48744: PUSH
48745: LD_INT 11
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 34
48754: PUSH
48755: LD_INT 30
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: LIST
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PPUSH
48771: CALL_OW 69
48775: ST_TO_ADDR
// if not tmp then
48776: LD_VAR 0 2
48780: NOT
48781: IFFALSE 48785
// exit ;
48783: GO 48814
// for i in tmp do
48785: LD_ADDR_VAR 0 1
48789: PUSH
48790: LD_VAR 0 2
48794: PUSH
48795: FOR_IN
48796: IFFALSE 48812
// begin SetLives ( i , 0 ) ;
48798: LD_VAR 0 1
48802: PPUSH
48803: LD_INT 0
48805: PPUSH
48806: CALL_OW 234
// end ;
48810: GO 48795
48812: POP
48813: POP
// end ;
48814: PPOPN 2
48816: END
// every 0 0$1 trigger StreamModeActive and sBunker do
48817: LD_EXP 23
48821: PUSH
48822: LD_EXP 33
48826: AND
48827: IFFALSE 48847
48829: GO 48831
48831: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
48832: LD_INT 32
48834: PPUSH
48835: LD_OWVAR 2
48839: PPUSH
48840: LD_INT 0
48842: PPUSH
48843: CALL_OW 324
48847: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
48848: LD_EXP 23
48852: PUSH
48853: LD_EXP 34
48857: AND
48858: IFFALSE 49039
48860: GO 48862
48862: DISABLE
48863: LD_INT 0
48865: PPUSH
48866: PPUSH
48867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
48868: LD_ADDR_VAR 0 2
48872: PUSH
48873: LD_INT 22
48875: PUSH
48876: LD_OWVAR 2
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 33
48887: PUSH
48888: LD_INT 3
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PPUSH
48899: CALL_OW 69
48903: ST_TO_ADDR
// if not tmp then
48904: LD_VAR 0 2
48908: NOT
48909: IFFALSE 48913
// exit ;
48911: GO 49039
// side := 0 ;
48913: LD_ADDR_VAR 0 3
48917: PUSH
48918: LD_INT 0
48920: ST_TO_ADDR
// for i := 1 to 8 do
48921: LD_ADDR_VAR 0 1
48925: PUSH
48926: DOUBLE
48927: LD_INT 1
48929: DEC
48930: ST_TO_ADDR
48931: LD_INT 8
48933: PUSH
48934: FOR_TO
48935: IFFALSE 48983
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
48937: LD_OWVAR 2
48941: PUSH
48942: LD_VAR 0 1
48946: NONEQUAL
48947: PUSH
48948: LD_OWVAR 2
48952: PPUSH
48953: LD_VAR 0 1
48957: PPUSH
48958: CALL_OW 81
48962: PUSH
48963: LD_INT 2
48965: EQUAL
48966: AND
48967: IFFALSE 48981
// begin side := i ;
48969: LD_ADDR_VAR 0 3
48973: PUSH
48974: LD_VAR 0 1
48978: ST_TO_ADDR
// break ;
48979: GO 48983
// end ;
48981: GO 48934
48983: POP
48984: POP
// if not side then
48985: LD_VAR 0 3
48989: NOT
48990: IFFALSE 48994
// exit ;
48992: GO 49039
// for i := 1 to tmp do
48994: LD_ADDR_VAR 0 1
48998: PUSH
48999: DOUBLE
49000: LD_INT 1
49002: DEC
49003: ST_TO_ADDR
49004: LD_VAR 0 2
49008: PUSH
49009: FOR_TO
49010: IFFALSE 49037
// if Prob ( 60 ) then
49012: LD_INT 60
49014: PPUSH
49015: CALL_OW 13
49019: IFFALSE 49035
// SetSide ( i , side ) ;
49021: LD_VAR 0 1
49025: PPUSH
49026: LD_VAR 0 3
49030: PPUSH
49031: CALL_OW 235
49035: GO 49009
49037: POP
49038: POP
// end ;
49039: PPOPN 3
49041: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
49042: LD_EXP 23
49046: PUSH
49047: LD_EXP 36
49051: AND
49052: IFFALSE 49171
49054: GO 49056
49056: DISABLE
49057: LD_INT 0
49059: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
49060: LD_ADDR_VAR 0 1
49064: PUSH
49065: LD_INT 22
49067: PUSH
49068: LD_OWVAR 2
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 21
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 3
49089: PUSH
49090: LD_INT 23
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: PPUSH
49109: CALL_OW 69
49113: PUSH
49114: FOR_IN
49115: IFFALSE 49169
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
49117: LD_VAR 0 1
49121: PPUSH
49122: CALL_OW 257
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 3
49135: PUSH
49136: LD_INT 4
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: IN
49145: IFFALSE 49167
// SetClass ( un , rand ( 1 , 4 ) ) ;
49147: LD_VAR 0 1
49151: PPUSH
49152: LD_INT 1
49154: PPUSH
49155: LD_INT 4
49157: PPUSH
49158: CALL_OW 12
49162: PPUSH
49163: CALL_OW 336
49167: GO 49114
49169: POP
49170: POP
// end ;
49171: PPOPN 1
49173: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
49174: LD_EXP 23
49178: PUSH
49179: LD_EXP 35
49183: AND
49184: IFFALSE 49263
49186: GO 49188
49188: DISABLE
49189: LD_INT 0
49191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
49192: LD_ADDR_VAR 0 1
49196: PUSH
49197: LD_INT 22
49199: PUSH
49200: LD_OWVAR 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 21
49211: PUSH
49212: LD_INT 3
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PPUSH
49223: CALL_OW 69
49227: ST_TO_ADDR
// if not tmp then
49228: LD_VAR 0 1
49232: NOT
49233: IFFALSE 49237
// exit ;
49235: GO 49263
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
49237: LD_VAR 0 1
49241: PUSH
49242: LD_INT 1
49244: PPUSH
49245: LD_VAR 0 1
49249: PPUSH
49250: CALL_OW 12
49254: ARRAY
49255: PPUSH
49256: LD_INT 100
49258: PPUSH
49259: CALL_OW 234
// end ;
49263: PPOPN 1
49265: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
49266: LD_EXP 23
49270: PUSH
49271: LD_EXP 37
49275: AND
49276: IFFALSE 49374
49278: GO 49280
49280: DISABLE
49281: LD_INT 0
49283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
49284: LD_ADDR_VAR 0 1
49288: PUSH
49289: LD_INT 22
49291: PUSH
49292: LD_OWVAR 2
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 21
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PPUSH
49315: CALL_OW 69
49319: ST_TO_ADDR
// if not tmp then
49320: LD_VAR 0 1
49324: NOT
49325: IFFALSE 49329
// exit ;
49327: GO 49374
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
49329: LD_VAR 0 1
49333: PUSH
49334: LD_INT 1
49336: PPUSH
49337: LD_VAR 0 1
49341: PPUSH
49342: CALL_OW 12
49346: ARRAY
49347: PPUSH
49348: LD_INT 1
49350: PPUSH
49351: LD_INT 4
49353: PPUSH
49354: CALL_OW 12
49358: PPUSH
49359: LD_INT 3000
49361: PPUSH
49362: LD_INT 9000
49364: PPUSH
49365: CALL_OW 12
49369: PPUSH
49370: CALL_OW 492
// end ;
49374: PPOPN 1
49376: END
// every 0 0$1 trigger StreamModeActive and sDepot do
49377: LD_EXP 23
49381: PUSH
49382: LD_EXP 38
49386: AND
49387: IFFALSE 49407
49389: GO 49391
49391: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
49392: LD_INT 1
49394: PPUSH
49395: LD_OWVAR 2
49399: PPUSH
49400: LD_INT 0
49402: PPUSH
49403: CALL_OW 324
49407: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
49408: LD_EXP 23
49412: PUSH
49413: LD_EXP 39
49417: AND
49418: IFFALSE 49501
49420: GO 49422
49422: DISABLE
49423: LD_INT 0
49425: PPUSH
49426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
49427: LD_ADDR_VAR 0 2
49431: PUSH
49432: LD_INT 22
49434: PUSH
49435: LD_OWVAR 2
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 21
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PPUSH
49458: CALL_OW 69
49462: ST_TO_ADDR
// if not tmp then
49463: LD_VAR 0 2
49467: NOT
49468: IFFALSE 49472
// exit ;
49470: GO 49501
// for i in tmp do
49472: LD_ADDR_VAR 0 1
49476: PUSH
49477: LD_VAR 0 2
49481: PUSH
49482: FOR_IN
49483: IFFALSE 49499
// SetBLevel ( i , 10 ) ;
49485: LD_VAR 0 1
49489: PPUSH
49490: LD_INT 10
49492: PPUSH
49493: CALL_OW 241
49497: GO 49482
49499: POP
49500: POP
// end ;
49501: PPOPN 2
49503: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
49504: LD_EXP 23
49508: PUSH
49509: LD_EXP 40
49513: AND
49514: IFFALSE 49625
49516: GO 49518
49518: DISABLE
49519: LD_INT 0
49521: PPUSH
49522: PPUSH
49523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49524: LD_ADDR_VAR 0 3
49528: PUSH
49529: LD_INT 22
49531: PUSH
49532: LD_OWVAR 2
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 25
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PPUSH
49555: CALL_OW 69
49559: ST_TO_ADDR
// if not tmp then
49560: LD_VAR 0 3
49564: NOT
49565: IFFALSE 49569
// exit ;
49567: GO 49625
// un := tmp [ rand ( 1 , tmp ) ] ;
49569: LD_ADDR_VAR 0 2
49573: PUSH
49574: LD_VAR 0 3
49578: PUSH
49579: LD_INT 1
49581: PPUSH
49582: LD_VAR 0 3
49586: PPUSH
49587: CALL_OW 12
49591: ARRAY
49592: ST_TO_ADDR
// if Crawls ( un ) then
49593: LD_VAR 0 2
49597: PPUSH
49598: CALL_OW 318
49602: IFFALSE 49613
// ComWalk ( un ) ;
49604: LD_VAR 0 2
49608: PPUSH
49609: CALL_OW 138
// SetClass ( un , class_sniper ) ;
49613: LD_VAR 0 2
49617: PPUSH
49618: LD_INT 5
49620: PPUSH
49621: CALL_OW 336
// end ;
49625: PPOPN 3
49627: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
49628: LD_EXP 23
49632: PUSH
49633: LD_EXP 41
49637: AND
49638: PUSH
49639: LD_OWVAR 67
49643: PUSH
49644: LD_INT 4
49646: LESS
49647: AND
49648: IFFALSE 49667
49650: GO 49652
49652: DISABLE
// begin Difficulty := Difficulty + 1 ;
49653: LD_ADDR_OWVAR 67
49657: PUSH
49658: LD_OWVAR 67
49662: PUSH
49663: LD_INT 1
49665: PLUS
49666: ST_TO_ADDR
// end ;
49667: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
49668: LD_EXP 23
49672: PUSH
49673: LD_EXP 42
49677: AND
49678: IFFALSE 49781
49680: GO 49682
49682: DISABLE
49683: LD_INT 0
49685: PPUSH
// begin for i := 1 to 5 do
49686: LD_ADDR_VAR 0 1
49690: PUSH
49691: DOUBLE
49692: LD_INT 1
49694: DEC
49695: ST_TO_ADDR
49696: LD_INT 5
49698: PUSH
49699: FOR_TO
49700: IFFALSE 49779
// begin uc_nation := nation_nature ;
49702: LD_ADDR_OWVAR 21
49706: PUSH
49707: LD_INT 0
49709: ST_TO_ADDR
// uc_side := 0 ;
49710: LD_ADDR_OWVAR 20
49714: PUSH
49715: LD_INT 0
49717: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49718: LD_ADDR_OWVAR 29
49722: PUSH
49723: LD_INT 12
49725: PUSH
49726: LD_INT 12
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: ST_TO_ADDR
// hc_agressivity := 20 ;
49733: LD_ADDR_OWVAR 35
49737: PUSH
49738: LD_INT 20
49740: ST_TO_ADDR
// hc_class := class_tiger ;
49741: LD_ADDR_OWVAR 28
49745: PUSH
49746: LD_INT 14
49748: ST_TO_ADDR
// hc_gallery :=  ;
49749: LD_ADDR_OWVAR 33
49753: PUSH
49754: LD_STRING 
49756: ST_TO_ADDR
// hc_name :=  ;
49757: LD_ADDR_OWVAR 26
49761: PUSH
49762: LD_STRING 
49764: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
49765: CALL_OW 44
49769: PPUSH
49770: LD_INT 0
49772: PPUSH
49773: CALL_OW 51
// end ;
49777: GO 49699
49779: POP
49780: POP
// end ;
49781: PPOPN 1
49783: END
// every 0 0$1 trigger StreamModeActive and sBomb do
49784: LD_EXP 23
49788: PUSH
49789: LD_EXP 43
49793: AND
49794: IFFALSE 49803
49796: GO 49798
49798: DISABLE
// StreamSibBomb ;
49799: CALL 49804 0 0
49803: END
// export function StreamSibBomb ; var i , x , y ; begin
49804: LD_INT 0
49806: PPUSH
49807: PPUSH
49808: PPUSH
49809: PPUSH
// result := false ;
49810: LD_ADDR_VAR 0 1
49814: PUSH
49815: LD_INT 0
49817: ST_TO_ADDR
// for i := 1 to 16 do
49818: LD_ADDR_VAR 0 2
49822: PUSH
49823: DOUBLE
49824: LD_INT 1
49826: DEC
49827: ST_TO_ADDR
49828: LD_INT 16
49830: PUSH
49831: FOR_TO
49832: IFFALSE 50031
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
49834: LD_ADDR_VAR 0 3
49838: PUSH
49839: LD_INT 10
49841: PUSH
49842: LD_INT 20
49844: PUSH
49845: LD_INT 30
49847: PUSH
49848: LD_INT 40
49850: PUSH
49851: LD_INT 50
49853: PUSH
49854: LD_INT 60
49856: PUSH
49857: LD_INT 70
49859: PUSH
49860: LD_INT 80
49862: PUSH
49863: LD_INT 90
49865: PUSH
49866: LD_INT 100
49868: PUSH
49869: LD_INT 110
49871: PUSH
49872: LD_INT 120
49874: PUSH
49875: LD_INT 130
49877: PUSH
49878: LD_INT 140
49880: PUSH
49881: LD_INT 150
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: PPUSH
49904: LD_INT 15
49906: PPUSH
49907: CALL_OW 12
49911: ARRAY
49912: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
49913: LD_ADDR_VAR 0 4
49917: PUSH
49918: LD_INT 10
49920: PUSH
49921: LD_INT 20
49923: PUSH
49924: LD_INT 30
49926: PUSH
49927: LD_INT 40
49929: PUSH
49930: LD_INT 50
49932: PUSH
49933: LD_INT 60
49935: PUSH
49936: LD_INT 70
49938: PUSH
49939: LD_INT 80
49941: PUSH
49942: LD_INT 90
49944: PUSH
49945: LD_INT 100
49947: PUSH
49948: LD_INT 110
49950: PUSH
49951: LD_INT 120
49953: PUSH
49954: LD_INT 130
49956: PUSH
49957: LD_INT 140
49959: PUSH
49960: LD_INT 150
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PPUSH
49983: LD_INT 15
49985: PPUSH
49986: CALL_OW 12
49990: ARRAY
49991: ST_TO_ADDR
// if ValidHex ( x , y ) then
49992: LD_VAR 0 3
49996: PPUSH
49997: LD_VAR 0 4
50001: PPUSH
50002: CALL_OW 488
50006: IFFALSE 50029
// begin result := [ x , y ] ;
50008: LD_ADDR_VAR 0 1
50012: PUSH
50013: LD_VAR 0 3
50017: PUSH
50018: LD_VAR 0 4
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: ST_TO_ADDR
// break ;
50027: GO 50031
// end ; end ;
50029: GO 49831
50031: POP
50032: POP
// if result then
50033: LD_VAR 0 1
50037: IFFALSE 50097
// begin ToLua ( playSibBomb() ) ;
50039: LD_STRING playSibBomb()
50041: PPUSH
50042: CALL_OW 559
// wait ( 0 0$14 ) ;
50046: LD_INT 490
50048: PPUSH
50049: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
50053: LD_VAR 0 1
50057: PUSH
50058: LD_INT 1
50060: ARRAY
50061: PPUSH
50062: LD_VAR 0 1
50066: PUSH
50067: LD_INT 2
50069: ARRAY
50070: PPUSH
50071: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
50075: LD_VAR 0 1
50079: PUSH
50080: LD_INT 1
50082: ARRAY
50083: PPUSH
50084: LD_VAR 0 1
50088: PUSH
50089: LD_INT 2
50091: ARRAY
50092: PPUSH
50093: CALL_OW 429
// end ; end ;
50097: LD_VAR 0 1
50101: RET
// every 0 0$1 trigger StreamModeActive and sReset do
50102: LD_EXP 23
50106: PUSH
50107: LD_EXP 45
50111: AND
50112: IFFALSE 50124
50114: GO 50116
50116: DISABLE
// YouLost (  ) ;
50117: LD_STRING 
50119: PPUSH
50120: CALL_OW 104
50124: END
// every 0 0$1 trigger StreamModeActive and sFog do
50125: LD_EXP 23
50129: PUSH
50130: LD_EXP 44
50134: AND
50135: IFFALSE 50149
50137: GO 50139
50139: DISABLE
// FogOff ( your_side ) ;
50140: LD_OWVAR 2
50144: PPUSH
50145: CALL_OW 344
50149: END
// every 0 0$1 trigger StreamModeActive and sSun do
50150: LD_EXP 23
50154: PUSH
50155: LD_EXP 46
50159: AND
50160: IFFALSE 50188
50162: GO 50164
50164: DISABLE
// begin solar_recharge_percent := 0 ;
50165: LD_ADDR_OWVAR 79
50169: PUSH
50170: LD_INT 0
50172: ST_TO_ADDR
// wait ( 5 5$00 ) ;
50173: LD_INT 10500
50175: PPUSH
50176: CALL_OW 67
// solar_recharge_percent := 100 ;
50180: LD_ADDR_OWVAR 79
50184: PUSH
50185: LD_INT 100
50187: ST_TO_ADDR
// end ;
50188: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
50189: LD_EXP 23
50193: PUSH
50194: LD_EXP 47
50198: AND
50199: IFFALSE 50438
50201: GO 50203
50203: DISABLE
50204: LD_INT 0
50206: PPUSH
50207: PPUSH
50208: PPUSH
// begin tmp := [ ] ;
50209: LD_ADDR_VAR 0 3
50213: PUSH
50214: EMPTY
50215: ST_TO_ADDR
// for i := 1 to 6 do
50216: LD_ADDR_VAR 0 1
50220: PUSH
50221: DOUBLE
50222: LD_INT 1
50224: DEC
50225: ST_TO_ADDR
50226: LD_INT 6
50228: PUSH
50229: FOR_TO
50230: IFFALSE 50335
// begin uc_nation := nation_nature ;
50232: LD_ADDR_OWVAR 21
50236: PUSH
50237: LD_INT 0
50239: ST_TO_ADDR
// uc_side := 0 ;
50240: LD_ADDR_OWVAR 20
50244: PUSH
50245: LD_INT 0
50247: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50248: LD_ADDR_OWVAR 29
50252: PUSH
50253: LD_INT 12
50255: PUSH
50256: LD_INT 12
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: ST_TO_ADDR
// hc_agressivity := 20 ;
50263: LD_ADDR_OWVAR 35
50267: PUSH
50268: LD_INT 20
50270: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
50271: LD_ADDR_OWVAR 28
50275: PUSH
50276: LD_INT 17
50278: ST_TO_ADDR
// hc_gallery :=  ;
50279: LD_ADDR_OWVAR 33
50283: PUSH
50284: LD_STRING 
50286: ST_TO_ADDR
// hc_name :=  ;
50287: LD_ADDR_OWVAR 26
50291: PUSH
50292: LD_STRING 
50294: ST_TO_ADDR
// un := CreateHuman ;
50295: LD_ADDR_VAR 0 2
50299: PUSH
50300: CALL_OW 44
50304: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
50305: LD_VAR 0 2
50309: PPUSH
50310: LD_INT 1
50312: PPUSH
50313: CALL_OW 51
// tmp := tmp ^ un ;
50317: LD_ADDR_VAR 0 3
50321: PUSH
50322: LD_VAR 0 3
50326: PUSH
50327: LD_VAR 0 2
50331: ADD
50332: ST_TO_ADDR
// end ;
50333: GO 50229
50335: POP
50336: POP
// repeat wait ( 0 0$1 ) ;
50337: LD_INT 35
50339: PPUSH
50340: CALL_OW 67
// for un in tmp do
50344: LD_ADDR_VAR 0 2
50348: PUSH
50349: LD_VAR 0 3
50353: PUSH
50354: FOR_IN
50355: IFFALSE 50429
// begin if IsDead ( un ) then
50357: LD_VAR 0 2
50361: PPUSH
50362: CALL_OW 301
50366: IFFALSE 50386
// begin tmp := tmp diff un ;
50368: LD_ADDR_VAR 0 3
50372: PUSH
50373: LD_VAR 0 3
50377: PUSH
50378: LD_VAR 0 2
50382: DIFF
50383: ST_TO_ADDR
// continue ;
50384: GO 50354
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
50386: LD_VAR 0 2
50390: PPUSH
50391: LD_INT 3
50393: PUSH
50394: LD_INT 22
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PPUSH
50408: CALL_OW 69
50412: PPUSH
50413: LD_VAR 0 2
50417: PPUSH
50418: CALL_OW 74
50422: PPUSH
50423: CALL_OW 115
// end ;
50427: GO 50354
50429: POP
50430: POP
// until not tmp ;
50431: LD_VAR 0 3
50435: NOT
50436: IFFALSE 50337
// end ;
50438: PPOPN 3
50440: END
// every 0 0$1 trigger StreamModeActive and sTroll do
50441: LD_EXP 23
50445: PUSH
50446: LD_EXP 48
50450: AND
50451: IFFALSE 50505
50453: GO 50455
50455: DISABLE
// begin ToLua ( displayTroll(); ) ;
50456: LD_STRING displayTroll();
50458: PPUSH
50459: CALL_OW 559
// wait ( 3 3$00 ) ;
50463: LD_INT 6300
50465: PPUSH
50466: CALL_OW 67
// ToLua ( hideTroll(); ) ;
50470: LD_STRING hideTroll();
50472: PPUSH
50473: CALL_OW 559
// wait ( 1 1$00 ) ;
50477: LD_INT 2100
50479: PPUSH
50480: CALL_OW 67
// ToLua ( displayTroll(); ) ;
50484: LD_STRING displayTroll();
50486: PPUSH
50487: CALL_OW 559
// wait ( 1 1$00 ) ;
50491: LD_INT 2100
50493: PPUSH
50494: CALL_OW 67
// ToLua ( hideTroll(); ) ;
50498: LD_STRING hideTroll();
50500: PPUSH
50501: CALL_OW 559
// end ;
50505: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
50506: LD_EXP 23
50510: PUSH
50511: LD_EXP 49
50515: AND
50516: IFFALSE 50579
50518: GO 50520
50520: DISABLE
50521: LD_INT 0
50523: PPUSH
// begin p := 0 ;
50524: LD_ADDR_VAR 0 1
50528: PUSH
50529: LD_INT 0
50531: ST_TO_ADDR
// repeat game_speed := 1 ;
50532: LD_ADDR_OWVAR 65
50536: PUSH
50537: LD_INT 1
50539: ST_TO_ADDR
// wait ( 0 0$1 ) ;
50540: LD_INT 35
50542: PPUSH
50543: CALL_OW 67
// p := p + 1 ;
50547: LD_ADDR_VAR 0 1
50551: PUSH
50552: LD_VAR 0 1
50556: PUSH
50557: LD_INT 1
50559: PLUS
50560: ST_TO_ADDR
// until p >= 60 ;
50561: LD_VAR 0 1
50565: PUSH
50566: LD_INT 60
50568: GREATEREQUAL
50569: IFFALSE 50532
// game_speed := 4 ;
50571: LD_ADDR_OWVAR 65
50575: PUSH
50576: LD_INT 4
50578: ST_TO_ADDR
// end ;
50579: PPOPN 1
50581: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
50582: LD_EXP 23
50586: PUSH
50587: LD_EXP 50
50591: AND
50592: IFFALSE 50738
50594: GO 50596
50596: DISABLE
50597: LD_INT 0
50599: PPUSH
50600: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50601: LD_ADDR_VAR 0 1
50605: PUSH
50606: LD_INT 22
50608: PUSH
50609: LD_OWVAR 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: LD_INT 30
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 30
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: LIST
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PPUSH
50650: CALL_OW 69
50654: ST_TO_ADDR
// if not depot then
50655: LD_VAR 0 1
50659: NOT
50660: IFFALSE 50664
// exit ;
50662: GO 50738
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
50664: LD_ADDR_VAR 0 2
50668: PUSH
50669: LD_VAR 0 1
50673: PUSH
50674: LD_INT 1
50676: PPUSH
50677: LD_VAR 0 1
50681: PPUSH
50682: CALL_OW 12
50686: ARRAY
50687: PPUSH
50688: CALL_OW 274
50692: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
50693: LD_VAR 0 2
50697: PPUSH
50698: LD_INT 1
50700: PPUSH
50701: LD_INT 0
50703: PPUSH
50704: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
50708: LD_VAR 0 2
50712: PPUSH
50713: LD_INT 2
50715: PPUSH
50716: LD_INT 0
50718: PPUSH
50719: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
50723: LD_VAR 0 2
50727: PPUSH
50728: LD_INT 3
50730: PPUSH
50731: LD_INT 0
50733: PPUSH
50734: CALL_OW 277
// end ;
50738: PPOPN 2
50740: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
50741: LD_EXP 23
50745: PUSH
50746: LD_EXP 51
50750: AND
50751: IFFALSE 50848
50753: GO 50755
50755: DISABLE
50756: LD_INT 0
50758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
50759: LD_ADDR_VAR 0 1
50763: PUSH
50764: LD_INT 22
50766: PUSH
50767: LD_OWVAR 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 21
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: LD_INT 23
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: PPUSH
50808: CALL_OW 69
50812: ST_TO_ADDR
// if not tmp then
50813: LD_VAR 0 1
50817: NOT
50818: IFFALSE 50822
// exit ;
50820: GO 50848
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
50822: LD_VAR 0 1
50826: PUSH
50827: LD_INT 1
50829: PPUSH
50830: LD_VAR 0 1
50834: PPUSH
50835: CALL_OW 12
50839: ARRAY
50840: PPUSH
50841: LD_INT 200
50843: PPUSH
50844: CALL_OW 234
// end ;
50848: PPOPN 1
50850: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
50851: LD_EXP 23
50855: PUSH
50856: LD_EXP 52
50860: AND
50861: IFFALSE 50940
50863: GO 50865
50865: DISABLE
50866: LD_INT 0
50868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
50869: LD_ADDR_VAR 0 1
50873: PUSH
50874: LD_INT 22
50876: PUSH
50877: LD_OWVAR 2
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 21
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PPUSH
50900: CALL_OW 69
50904: ST_TO_ADDR
// if not tmp then
50905: LD_VAR 0 1
50909: NOT
50910: IFFALSE 50914
// exit ;
50912: GO 50940
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
50914: LD_VAR 0 1
50918: PUSH
50919: LD_INT 1
50921: PPUSH
50922: LD_VAR 0 1
50926: PPUSH
50927: CALL_OW 12
50931: ARRAY
50932: PPUSH
50933: LD_INT 60
50935: PPUSH
50936: CALL_OW 234
// end ;
50940: PPOPN 1
50942: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
50943: LD_EXP 23
50947: PUSH
50948: LD_EXP 53
50952: AND
50953: IFFALSE 51052
50955: GO 50957
50957: DISABLE
50958: LD_INT 0
50960: PPUSH
50961: PPUSH
// begin enable ;
50962: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
50963: LD_ADDR_VAR 0 1
50967: PUSH
50968: LD_INT 22
50970: PUSH
50971: LD_OWVAR 2
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 61
50982: PUSH
50983: EMPTY
50984: LIST
50985: PUSH
50986: LD_INT 33
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: LIST
51000: PPUSH
51001: CALL_OW 69
51005: ST_TO_ADDR
// if not tmp then
51006: LD_VAR 0 1
51010: NOT
51011: IFFALSE 51015
// exit ;
51013: GO 51052
// for i in tmp do
51015: LD_ADDR_VAR 0 2
51019: PUSH
51020: LD_VAR 0 1
51024: PUSH
51025: FOR_IN
51026: IFFALSE 51050
// if IsControledBy ( i ) then
51028: LD_VAR 0 2
51032: PPUSH
51033: CALL_OW 312
51037: IFFALSE 51048
// ComUnlink ( i ) ;
51039: LD_VAR 0 2
51043: PPUSH
51044: CALL_OW 136
51048: GO 51025
51050: POP
51051: POP
// end ;
51052: PPOPN 2
51054: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
51055: LD_EXP 23
51059: PUSH
51060: LD_EXP 54
51064: AND
51065: IFFALSE 51205
51067: GO 51069
51069: DISABLE
51070: LD_INT 0
51072: PPUSH
51073: PPUSH
// begin ToLua ( displayPowell(); ) ;
51074: LD_STRING displayPowell();
51076: PPUSH
51077: CALL_OW 559
// uc_side := 0 ;
51081: LD_ADDR_OWVAR 20
51085: PUSH
51086: LD_INT 0
51088: ST_TO_ADDR
// uc_nation := 2 ;
51089: LD_ADDR_OWVAR 21
51093: PUSH
51094: LD_INT 2
51096: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
51097: LD_ADDR_OWVAR 37
51101: PUSH
51102: LD_INT 14
51104: ST_TO_ADDR
// vc_engine := engine_siberite ;
51105: LD_ADDR_OWVAR 39
51109: PUSH
51110: LD_INT 3
51112: ST_TO_ADDR
// vc_control := control_apeman ;
51113: LD_ADDR_OWVAR 38
51117: PUSH
51118: LD_INT 5
51120: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
51121: LD_ADDR_OWVAR 40
51125: PUSH
51126: LD_INT 29
51128: ST_TO_ADDR
// un := CreateVehicle ;
51129: LD_ADDR_VAR 0 2
51133: PUSH
51134: CALL_OW 45
51138: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51139: LD_VAR 0 2
51143: PPUSH
51144: LD_INT 1
51146: PPUSH
51147: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
51151: LD_INT 35
51153: PPUSH
51154: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
51158: LD_VAR 0 2
51162: PPUSH
51163: LD_INT 22
51165: PUSH
51166: LD_OWVAR 2
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PPUSH
51175: CALL_OW 69
51179: PPUSH
51180: LD_VAR 0 2
51184: PPUSH
51185: CALL_OW 74
51189: PPUSH
51190: CALL_OW 115
// until IsDead ( un ) ;
51194: LD_VAR 0 2
51198: PPUSH
51199: CALL_OW 301
51203: IFFALSE 51151
// end ;
51205: PPOPN 2
51207: END
// every 0 0$1 trigger StreamModeActive and sStu do
51208: LD_EXP 23
51212: PUSH
51213: LD_EXP 62
51217: AND
51218: IFFALSE 51234
51220: GO 51222
51222: DISABLE
// begin ToLua ( displayStucuk(); ) ;
51223: LD_STRING displayStucuk();
51225: PPUSH
51226: CALL_OW 559
// ResetFog ;
51230: CALL_OW 335
// end ;
51234: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
51235: LD_EXP 23
51239: PUSH
51240: LD_EXP 55
51244: AND
51245: IFFALSE 51386
51247: GO 51249
51249: DISABLE
51250: LD_INT 0
51252: PPUSH
51253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51254: LD_ADDR_VAR 0 2
51258: PUSH
51259: LD_INT 22
51261: PUSH
51262: LD_OWVAR 2
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 21
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PPUSH
51285: CALL_OW 69
51289: ST_TO_ADDR
// if not tmp then
51290: LD_VAR 0 2
51294: NOT
51295: IFFALSE 51299
// exit ;
51297: GO 51386
// un := tmp [ rand ( 1 , tmp ) ] ;
51299: LD_ADDR_VAR 0 1
51303: PUSH
51304: LD_VAR 0 2
51308: PUSH
51309: LD_INT 1
51311: PPUSH
51312: LD_VAR 0 2
51316: PPUSH
51317: CALL_OW 12
51321: ARRAY
51322: ST_TO_ADDR
// SetSide ( un , 0 ) ;
51323: LD_VAR 0 1
51327: PPUSH
51328: LD_INT 0
51330: PPUSH
51331: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
51335: LD_VAR 0 1
51339: PPUSH
51340: LD_OWVAR 3
51344: PUSH
51345: LD_VAR 0 1
51349: DIFF
51350: PPUSH
51351: LD_VAR 0 1
51355: PPUSH
51356: CALL_OW 74
51360: PPUSH
51361: CALL_OW 115
// wait ( 0 0$20 ) ;
51365: LD_INT 700
51367: PPUSH
51368: CALL_OW 67
// SetSide ( un , your_side ) ;
51372: LD_VAR 0 1
51376: PPUSH
51377: LD_OWVAR 2
51381: PPUSH
51382: CALL_OW 235
// end ;
51386: PPOPN 2
51388: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
51389: LD_EXP 23
51393: PUSH
51394: LD_EXP 56
51398: AND
51399: IFFALSE 51505
51401: GO 51403
51403: DISABLE
51404: LD_INT 0
51406: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51407: LD_ADDR_VAR 0 1
51411: PUSH
51412: LD_INT 22
51414: PUSH
51415: LD_OWVAR 2
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: LD_INT 30
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 30
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: LIST
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PPUSH
51456: CALL_OW 69
51460: ST_TO_ADDR
// if not depot then
51461: LD_VAR 0 1
51465: NOT
51466: IFFALSE 51470
// exit ;
51468: GO 51505
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
51470: LD_VAR 0 1
51474: PUSH
51475: LD_INT 1
51477: ARRAY
51478: PPUSH
51479: CALL_OW 250
51483: PPUSH
51484: LD_VAR 0 1
51488: PUSH
51489: LD_INT 1
51491: ARRAY
51492: PPUSH
51493: CALL_OW 251
51497: PPUSH
51498: LD_INT 70
51500: PPUSH
51501: CALL_OW 495
// end ;
51505: PPOPN 1
51507: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
51508: LD_EXP 23
51512: PUSH
51513: LD_EXP 57
51517: AND
51518: IFFALSE 51729
51520: GO 51522
51522: DISABLE
51523: LD_INT 0
51525: PPUSH
51526: PPUSH
51527: PPUSH
51528: PPUSH
51529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51530: LD_ADDR_VAR 0 5
51534: PUSH
51535: LD_INT 22
51537: PUSH
51538: LD_OWVAR 2
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 21
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PPUSH
51561: CALL_OW 69
51565: ST_TO_ADDR
// if not tmp then
51566: LD_VAR 0 5
51570: NOT
51571: IFFALSE 51575
// exit ;
51573: GO 51729
// for i in tmp do
51575: LD_ADDR_VAR 0 1
51579: PUSH
51580: LD_VAR 0 5
51584: PUSH
51585: FOR_IN
51586: IFFALSE 51727
// begin d := rand ( 0 , 5 ) ;
51588: LD_ADDR_VAR 0 4
51592: PUSH
51593: LD_INT 0
51595: PPUSH
51596: LD_INT 5
51598: PPUSH
51599: CALL_OW 12
51603: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
51604: LD_ADDR_VAR 0 2
51608: PUSH
51609: LD_VAR 0 1
51613: PPUSH
51614: CALL_OW 250
51618: PPUSH
51619: LD_VAR 0 4
51623: PPUSH
51624: LD_INT 3
51626: PPUSH
51627: LD_INT 12
51629: PPUSH
51630: CALL_OW 12
51634: PPUSH
51635: CALL_OW 272
51639: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
51640: LD_ADDR_VAR 0 3
51644: PUSH
51645: LD_VAR 0 1
51649: PPUSH
51650: CALL_OW 251
51654: PPUSH
51655: LD_VAR 0 4
51659: PPUSH
51660: LD_INT 3
51662: PPUSH
51663: LD_INT 12
51665: PPUSH
51666: CALL_OW 12
51670: PPUSH
51671: CALL_OW 273
51675: ST_TO_ADDR
// if ValidHex ( x , y ) then
51676: LD_VAR 0 2
51680: PPUSH
51681: LD_VAR 0 3
51685: PPUSH
51686: CALL_OW 488
51690: IFFALSE 51725
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
51692: LD_VAR 0 1
51696: PPUSH
51697: LD_VAR 0 2
51701: PPUSH
51702: LD_VAR 0 3
51706: PPUSH
51707: LD_INT 3
51709: PPUSH
51710: LD_INT 6
51712: PPUSH
51713: CALL_OW 12
51717: PPUSH
51718: LD_INT 1
51720: PPUSH
51721: CALL_OW 483
// end ;
51725: GO 51585
51727: POP
51728: POP
// end ;
51729: PPOPN 5
51731: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
51732: LD_EXP 23
51736: PUSH
51737: LD_EXP 58
51741: AND
51742: IFFALSE 51836
51744: GO 51746
51746: DISABLE
51747: LD_INT 0
51749: PPUSH
51750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
51751: LD_ADDR_VAR 0 2
51755: PUSH
51756: LD_INT 22
51758: PUSH
51759: LD_OWVAR 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 32
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 21
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: LIST
51792: PPUSH
51793: CALL_OW 69
51797: ST_TO_ADDR
// if not tmp then
51798: LD_VAR 0 2
51802: NOT
51803: IFFALSE 51807
// exit ;
51805: GO 51836
// for i in tmp do
51807: LD_ADDR_VAR 0 1
51811: PUSH
51812: LD_VAR 0 2
51816: PUSH
51817: FOR_IN
51818: IFFALSE 51834
// SetFuel ( i , 0 ) ;
51820: LD_VAR 0 1
51824: PPUSH
51825: LD_INT 0
51827: PPUSH
51828: CALL_OW 240
51832: GO 51817
51834: POP
51835: POP
// end ;
51836: PPOPN 2
51838: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
51839: LD_EXP 23
51843: PUSH
51844: LD_EXP 59
51848: AND
51849: IFFALSE 51915
51851: GO 51853
51853: DISABLE
51854: LD_INT 0
51856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
51857: LD_ADDR_VAR 0 1
51861: PUSH
51862: LD_INT 22
51864: PUSH
51865: LD_OWVAR 2
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 30
51876: PUSH
51877: LD_INT 29
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PPUSH
51888: CALL_OW 69
51892: ST_TO_ADDR
// if not tmp then
51893: LD_VAR 0 1
51897: NOT
51898: IFFALSE 51902
// exit ;
51900: GO 51915
// DestroyUnit ( tmp [ 1 ] ) ;
51902: LD_VAR 0 1
51906: PUSH
51907: LD_INT 1
51909: ARRAY
51910: PPUSH
51911: CALL_OW 65
// end ;
51915: PPOPN 1
51917: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
51918: LD_EXP 23
51922: PUSH
51923: LD_EXP 61
51927: AND
51928: IFFALSE 52057
51930: GO 51932
51932: DISABLE
51933: LD_INT 0
51935: PPUSH
// begin uc_side := 0 ;
51936: LD_ADDR_OWVAR 20
51940: PUSH
51941: LD_INT 0
51943: ST_TO_ADDR
// uc_nation := nation_arabian ;
51944: LD_ADDR_OWVAR 21
51948: PUSH
51949: LD_INT 2
51951: ST_TO_ADDR
// hc_gallery :=  ;
51952: LD_ADDR_OWVAR 33
51956: PUSH
51957: LD_STRING 
51959: ST_TO_ADDR
// hc_name :=  ;
51960: LD_ADDR_OWVAR 26
51964: PUSH
51965: LD_STRING 
51967: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
51968: LD_INT 1
51970: PPUSH
51971: LD_INT 11
51973: PPUSH
51974: LD_INT 10
51976: PPUSH
51977: CALL_OW 380
// un := CreateHuman ;
51981: LD_ADDR_VAR 0 1
51985: PUSH
51986: CALL_OW 44
51990: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51991: LD_VAR 0 1
51995: PPUSH
51996: LD_INT 1
51998: PPUSH
51999: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
52003: LD_INT 35
52005: PPUSH
52006: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
52010: LD_VAR 0 1
52014: PPUSH
52015: LD_INT 22
52017: PUSH
52018: LD_OWVAR 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PPUSH
52027: CALL_OW 69
52031: PPUSH
52032: LD_VAR 0 1
52036: PPUSH
52037: CALL_OW 74
52041: PPUSH
52042: CALL_OW 115
// until IsDead ( un ) ;
52046: LD_VAR 0 1
52050: PPUSH
52051: CALL_OW 301
52055: IFFALSE 52003
// end ;
52057: PPOPN 1
52059: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
52060: LD_EXP 23
52064: PUSH
52065: LD_EXP 63
52069: AND
52070: IFFALSE 52082
52072: GO 52074
52074: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
52075: LD_STRING earthquake(getX(game), 0, 32)
52077: PPUSH
52078: CALL_OW 559
52082: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
52083: LD_EXP 23
52087: PUSH
52088: LD_EXP 64
52092: AND
52093: IFFALSE 52184
52095: GO 52097
52097: DISABLE
52098: LD_INT 0
52100: PPUSH
// begin enable ;
52101: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
52102: LD_ADDR_VAR 0 1
52106: PUSH
52107: LD_INT 22
52109: PUSH
52110: LD_OWVAR 2
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 21
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 33
52131: PUSH
52132: LD_INT 3
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: LIST
52143: PPUSH
52144: CALL_OW 69
52148: ST_TO_ADDR
// if not tmp then
52149: LD_VAR 0 1
52153: NOT
52154: IFFALSE 52158
// exit ;
52156: GO 52184
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52158: LD_VAR 0 1
52162: PUSH
52163: LD_INT 1
52165: PPUSH
52166: LD_VAR 0 1
52170: PPUSH
52171: CALL_OW 12
52175: ARRAY
52176: PPUSH
52177: LD_INT 1
52179: PPUSH
52180: CALL_OW 234
// end ;
52184: PPOPN 1
52186: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
52187: LD_EXP 23
52191: PUSH
52192: LD_EXP 65
52196: AND
52197: IFFALSE 52338
52199: GO 52201
52201: DISABLE
52202: LD_INT 0
52204: PPUSH
52205: PPUSH
52206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52207: LD_ADDR_VAR 0 3
52211: PUSH
52212: LD_INT 22
52214: PUSH
52215: LD_OWVAR 2
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 25
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PPUSH
52238: CALL_OW 69
52242: ST_TO_ADDR
// if not tmp then
52243: LD_VAR 0 3
52247: NOT
52248: IFFALSE 52252
// exit ;
52250: GO 52338
// un := tmp [ rand ( 1 , tmp ) ] ;
52252: LD_ADDR_VAR 0 2
52256: PUSH
52257: LD_VAR 0 3
52261: PUSH
52262: LD_INT 1
52264: PPUSH
52265: LD_VAR 0 3
52269: PPUSH
52270: CALL_OW 12
52274: ARRAY
52275: ST_TO_ADDR
// if Crawls ( un ) then
52276: LD_VAR 0 2
52280: PPUSH
52281: CALL_OW 318
52285: IFFALSE 52296
// ComWalk ( un ) ;
52287: LD_VAR 0 2
52291: PPUSH
52292: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
52296: LD_VAR 0 2
52300: PPUSH
52301: LD_INT 9
52303: PPUSH
52304: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
52308: LD_INT 28
52310: PPUSH
52311: LD_OWVAR 2
52315: PPUSH
52316: LD_INT 2
52318: PPUSH
52319: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
52323: LD_INT 29
52325: PPUSH
52326: LD_OWVAR 2
52330: PPUSH
52331: LD_INT 2
52333: PPUSH
52334: CALL_OW 322
// end ;
52338: PPOPN 3
52340: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
52341: LD_EXP 23
52345: PUSH
52346: LD_EXP 66
52350: AND
52351: IFFALSE 52462
52353: GO 52355
52355: DISABLE
52356: LD_INT 0
52358: PPUSH
52359: PPUSH
52360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52361: LD_ADDR_VAR 0 3
52365: PUSH
52366: LD_INT 22
52368: PUSH
52369: LD_OWVAR 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 25
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PPUSH
52392: CALL_OW 69
52396: ST_TO_ADDR
// if not tmp then
52397: LD_VAR 0 3
52401: NOT
52402: IFFALSE 52406
// exit ;
52404: GO 52462
// un := tmp [ rand ( 1 , tmp ) ] ;
52406: LD_ADDR_VAR 0 2
52410: PUSH
52411: LD_VAR 0 3
52415: PUSH
52416: LD_INT 1
52418: PPUSH
52419: LD_VAR 0 3
52423: PPUSH
52424: CALL_OW 12
52428: ARRAY
52429: ST_TO_ADDR
// if Crawls ( un ) then
52430: LD_VAR 0 2
52434: PPUSH
52435: CALL_OW 318
52439: IFFALSE 52450
// ComWalk ( un ) ;
52441: LD_VAR 0 2
52445: PPUSH
52446: CALL_OW 138
// SetClass ( un , class_mortar ) ;
52450: LD_VAR 0 2
52454: PPUSH
52455: LD_INT 8
52457: PPUSH
52458: CALL_OW 336
// end ;
52462: PPOPN 3
52464: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
52465: LD_EXP 23
52469: PUSH
52470: LD_EXP 67
52474: AND
52475: IFFALSE 52619
52477: GO 52479
52479: DISABLE
52480: LD_INT 0
52482: PPUSH
52483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
52484: LD_ADDR_VAR 0 2
52488: PUSH
52489: LD_INT 22
52491: PUSH
52492: LD_OWVAR 2
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 21
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: LD_INT 34
52516: PUSH
52517: LD_INT 12
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 34
52526: PUSH
52527: LD_INT 51
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 34
52536: PUSH
52537: LD_INT 32
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: PPUSH
52555: CALL_OW 69
52559: ST_TO_ADDR
// if not tmp then
52560: LD_VAR 0 2
52564: NOT
52565: IFFALSE 52569
// exit ;
52567: GO 52619
// for i in tmp do
52569: LD_ADDR_VAR 0 1
52573: PUSH
52574: LD_VAR 0 2
52578: PUSH
52579: FOR_IN
52580: IFFALSE 52617
// if GetCargo ( i , mat_artifact ) = 0 then
52582: LD_VAR 0 1
52586: PPUSH
52587: LD_INT 4
52589: PPUSH
52590: CALL_OW 289
52594: PUSH
52595: LD_INT 0
52597: EQUAL
52598: IFFALSE 52615
// SetCargo ( i , mat_siberit , 100 ) ;
52600: LD_VAR 0 1
52604: PPUSH
52605: LD_INT 3
52607: PPUSH
52608: LD_INT 100
52610: PPUSH
52611: CALL_OW 290
52615: GO 52579
52617: POP
52618: POP
// end ;
52619: PPOPN 2
52621: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
52622: LD_EXP 23
52626: PUSH
52627: LD_EXP 68
52631: AND
52632: IFFALSE 52815
52634: GO 52636
52636: DISABLE
52637: LD_INT 0
52639: PPUSH
52640: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
52641: LD_ADDR_VAR 0 2
52645: PUSH
52646: LD_INT 22
52648: PUSH
52649: LD_OWVAR 2
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PPUSH
52658: CALL_OW 69
52662: ST_TO_ADDR
// if not tmp then
52663: LD_VAR 0 2
52667: NOT
52668: IFFALSE 52672
// exit ;
52670: GO 52815
// for i := 1 to 2 do
52672: LD_ADDR_VAR 0 1
52676: PUSH
52677: DOUBLE
52678: LD_INT 1
52680: DEC
52681: ST_TO_ADDR
52682: LD_INT 2
52684: PUSH
52685: FOR_TO
52686: IFFALSE 52813
// begin uc_side := your_side ;
52688: LD_ADDR_OWVAR 20
52692: PUSH
52693: LD_OWVAR 2
52697: ST_TO_ADDR
// uc_nation := nation_american ;
52698: LD_ADDR_OWVAR 21
52702: PUSH
52703: LD_INT 1
52705: ST_TO_ADDR
// vc_chassis := us_morphling ;
52706: LD_ADDR_OWVAR 37
52710: PUSH
52711: LD_INT 5
52713: ST_TO_ADDR
// vc_engine := engine_siberite ;
52714: LD_ADDR_OWVAR 39
52718: PUSH
52719: LD_INT 3
52721: ST_TO_ADDR
// vc_control := control_computer ;
52722: LD_ADDR_OWVAR 38
52726: PUSH
52727: LD_INT 3
52729: ST_TO_ADDR
// vc_weapon := us_double_laser ;
52730: LD_ADDR_OWVAR 40
52734: PUSH
52735: LD_INT 10
52737: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
52738: LD_VAR 0 2
52742: PUSH
52743: LD_INT 1
52745: ARRAY
52746: PPUSH
52747: CALL_OW 310
52751: NOT
52752: IFFALSE 52799
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
52754: CALL_OW 45
52758: PPUSH
52759: LD_VAR 0 2
52763: PUSH
52764: LD_INT 1
52766: ARRAY
52767: PPUSH
52768: CALL_OW 250
52772: PPUSH
52773: LD_VAR 0 2
52777: PUSH
52778: LD_INT 1
52780: ARRAY
52781: PPUSH
52782: CALL_OW 251
52786: PPUSH
52787: LD_INT 12
52789: PPUSH
52790: LD_INT 1
52792: PPUSH
52793: CALL_OW 50
52797: GO 52811
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
52799: CALL_OW 45
52803: PPUSH
52804: LD_INT 1
52806: PPUSH
52807: CALL_OW 51
// end ;
52811: GO 52685
52813: POP
52814: POP
// end ;
52815: PPOPN 2
52817: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
52818: LD_EXP 23
52822: PUSH
52823: LD_EXP 69
52827: AND
52828: IFFALSE 53050
52830: GO 52832
52832: DISABLE
52833: LD_INT 0
52835: PPUSH
52836: PPUSH
52837: PPUSH
52838: PPUSH
52839: PPUSH
52840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52841: LD_ADDR_VAR 0 6
52845: PUSH
52846: LD_INT 22
52848: PUSH
52849: LD_OWVAR 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 21
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: LD_INT 23
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: LIST
52889: PPUSH
52890: CALL_OW 69
52894: ST_TO_ADDR
// if not tmp then
52895: LD_VAR 0 6
52899: NOT
52900: IFFALSE 52904
// exit ;
52902: GO 53050
// s1 := rand ( 1 , 4 ) ;
52904: LD_ADDR_VAR 0 2
52908: PUSH
52909: LD_INT 1
52911: PPUSH
52912: LD_INT 4
52914: PPUSH
52915: CALL_OW 12
52919: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
52920: LD_ADDR_VAR 0 4
52924: PUSH
52925: LD_VAR 0 6
52929: PUSH
52930: LD_INT 1
52932: ARRAY
52933: PPUSH
52934: LD_VAR 0 2
52938: PPUSH
52939: CALL_OW 259
52943: ST_TO_ADDR
// if s1 = 1 then
52944: LD_VAR 0 2
52948: PUSH
52949: LD_INT 1
52951: EQUAL
52952: IFFALSE 52972
// s2 := rand ( 2 , 4 ) else
52954: LD_ADDR_VAR 0 3
52958: PUSH
52959: LD_INT 2
52961: PPUSH
52962: LD_INT 4
52964: PPUSH
52965: CALL_OW 12
52969: ST_TO_ADDR
52970: GO 52980
// s2 := 1 ;
52972: LD_ADDR_VAR 0 3
52976: PUSH
52977: LD_INT 1
52979: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
52980: LD_ADDR_VAR 0 5
52984: PUSH
52985: LD_VAR 0 6
52989: PUSH
52990: LD_INT 1
52992: ARRAY
52993: PPUSH
52994: LD_VAR 0 3
52998: PPUSH
52999: CALL_OW 259
53003: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
53004: LD_VAR 0 6
53008: PUSH
53009: LD_INT 1
53011: ARRAY
53012: PPUSH
53013: LD_VAR 0 2
53017: PPUSH
53018: LD_VAR 0 5
53022: PPUSH
53023: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
53027: LD_VAR 0 6
53031: PUSH
53032: LD_INT 1
53034: ARRAY
53035: PPUSH
53036: LD_VAR 0 3
53040: PPUSH
53041: LD_VAR 0 4
53045: PPUSH
53046: CALL_OW 237
// end ;
53050: PPOPN 6
53052: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
53053: LD_EXP 23
53057: PUSH
53058: LD_EXP 70
53062: AND
53063: IFFALSE 53142
53065: GO 53067
53067: DISABLE
53068: LD_INT 0
53070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
53071: LD_ADDR_VAR 0 1
53075: PUSH
53076: LD_INT 22
53078: PUSH
53079: LD_OWVAR 2
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 30
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PPUSH
53102: CALL_OW 69
53106: ST_TO_ADDR
// if not tmp then
53107: LD_VAR 0 1
53111: NOT
53112: IFFALSE 53116
// exit ;
53114: GO 53142
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
53116: LD_VAR 0 1
53120: PUSH
53121: LD_INT 1
53123: PPUSH
53124: LD_VAR 0 1
53128: PPUSH
53129: CALL_OW 12
53133: ARRAY
53134: PPUSH
53135: LD_INT 1
53137: PPUSH
53138: CALL_OW 234
// end ;
53142: PPOPN 1
53144: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
53145: LD_EXP 23
53149: PUSH
53150: LD_EXP 71
53154: AND
53155: IFFALSE 53267
53157: GO 53159
53159: DISABLE
53160: LD_INT 0
53162: PPUSH
53163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
53164: LD_ADDR_VAR 0 2
53168: PUSH
53169: LD_INT 22
53171: PUSH
53172: LD_OWVAR 2
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: LD_INT 30
53186: PUSH
53187: LD_INT 27
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 30
53196: PUSH
53197: LD_INT 26
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 30
53206: PUSH
53207: LD_INT 28
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PPUSH
53224: CALL_OW 69
53228: ST_TO_ADDR
// if not tmp then
53229: LD_VAR 0 2
53233: NOT
53234: IFFALSE 53238
// exit ;
53236: GO 53267
// for i in tmp do
53238: LD_ADDR_VAR 0 1
53242: PUSH
53243: LD_VAR 0 2
53247: PUSH
53248: FOR_IN
53249: IFFALSE 53265
// SetLives ( i , 1 ) ;
53251: LD_VAR 0 1
53255: PPUSH
53256: LD_INT 1
53258: PPUSH
53259: CALL_OW 234
53263: GO 53248
53265: POP
53266: POP
// end ;
53267: PPOPN 2
53269: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
53270: LD_EXP 23
53274: PUSH
53275: LD_EXP 72
53279: AND
53280: IFFALSE 53567
53282: GO 53284
53284: DISABLE
53285: LD_INT 0
53287: PPUSH
53288: PPUSH
53289: PPUSH
// begin i := rand ( 1 , 7 ) ;
53290: LD_ADDR_VAR 0 1
53294: PUSH
53295: LD_INT 1
53297: PPUSH
53298: LD_INT 7
53300: PPUSH
53301: CALL_OW 12
53305: ST_TO_ADDR
// case i of 1 :
53306: LD_VAR 0 1
53310: PUSH
53311: LD_INT 1
53313: DOUBLE
53314: EQUAL
53315: IFTRUE 53319
53317: GO 53329
53319: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
53320: LD_STRING earthquake(getX(game), 0, 32)
53322: PPUSH
53323: CALL_OW 559
53327: GO 53567
53329: LD_INT 2
53331: DOUBLE
53332: EQUAL
53333: IFTRUE 53337
53335: GO 53351
53337: POP
// begin ToLua ( displayStucuk(); ) ;
53338: LD_STRING displayStucuk();
53340: PPUSH
53341: CALL_OW 559
// ResetFog ;
53345: CALL_OW 335
// end ; 3 :
53349: GO 53567
53351: LD_INT 3
53353: DOUBLE
53354: EQUAL
53355: IFTRUE 53359
53357: GO 53463
53359: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53360: LD_ADDR_VAR 0 2
53364: PUSH
53365: LD_INT 22
53367: PUSH
53368: LD_OWVAR 2
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 25
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PPUSH
53391: CALL_OW 69
53395: ST_TO_ADDR
// if not tmp then
53396: LD_VAR 0 2
53400: NOT
53401: IFFALSE 53405
// exit ;
53403: GO 53567
// un := tmp [ rand ( 1 , tmp ) ] ;
53405: LD_ADDR_VAR 0 3
53409: PUSH
53410: LD_VAR 0 2
53414: PUSH
53415: LD_INT 1
53417: PPUSH
53418: LD_VAR 0 2
53422: PPUSH
53423: CALL_OW 12
53427: ARRAY
53428: ST_TO_ADDR
// if Crawls ( un ) then
53429: LD_VAR 0 3
53433: PPUSH
53434: CALL_OW 318
53438: IFFALSE 53449
// ComWalk ( un ) ;
53440: LD_VAR 0 3
53444: PPUSH
53445: CALL_OW 138
// SetClass ( un , class_mortar ) ;
53449: LD_VAR 0 3
53453: PPUSH
53454: LD_INT 8
53456: PPUSH
53457: CALL_OW 336
// end ; 4 :
53461: GO 53567
53463: LD_INT 4
53465: DOUBLE
53466: EQUAL
53467: IFTRUE 53471
53469: GO 53545
53471: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53472: LD_ADDR_VAR 0 2
53476: PUSH
53477: LD_INT 22
53479: PUSH
53480: LD_OWVAR 2
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 30
53491: PUSH
53492: LD_INT 29
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PPUSH
53503: CALL_OW 69
53507: ST_TO_ADDR
// if not tmp then
53508: LD_VAR 0 2
53512: NOT
53513: IFFALSE 53517
// exit ;
53515: GO 53567
// CenterNowOnUnits ( tmp [ 1 ] ) ;
53517: LD_VAR 0 2
53521: PUSH
53522: LD_INT 1
53524: ARRAY
53525: PPUSH
53526: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
53530: LD_VAR 0 2
53534: PUSH
53535: LD_INT 1
53537: ARRAY
53538: PPUSH
53539: CALL_OW 65
// end ; 5 .. 7 :
53543: GO 53567
53545: LD_INT 5
53547: DOUBLE
53548: GREATEREQUAL
53549: IFFALSE 53557
53551: LD_INT 7
53553: DOUBLE
53554: LESSEQUAL
53555: IFTRUE 53559
53557: GO 53566
53559: POP
// StreamSibBomb ; end ;
53560: CALL 49804 0 0
53564: GO 53567
53566: POP
// end ;
53567: PPOPN 3
53569: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
53570: LD_EXP 23
53574: PUSH
53575: LD_EXP 73
53579: AND
53580: IFFALSE 53736
53582: GO 53584
53584: DISABLE
53585: LD_INT 0
53587: PPUSH
53588: PPUSH
53589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
53590: LD_ADDR_VAR 0 2
53594: PUSH
53595: LD_INT 81
53597: PUSH
53598: LD_OWVAR 2
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 21
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 21
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: LIST
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PPUSH
53639: CALL_OW 69
53643: ST_TO_ADDR
// if not tmp then
53644: LD_VAR 0 2
53648: NOT
53649: IFFALSE 53653
// exit ;
53651: GO 53736
// p := 0 ;
53653: LD_ADDR_VAR 0 3
53657: PUSH
53658: LD_INT 0
53660: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53661: LD_INT 35
53663: PPUSH
53664: CALL_OW 67
// p := p + 1 ;
53668: LD_ADDR_VAR 0 3
53672: PUSH
53673: LD_VAR 0 3
53677: PUSH
53678: LD_INT 1
53680: PLUS
53681: ST_TO_ADDR
// for i in tmp do
53682: LD_ADDR_VAR 0 1
53686: PUSH
53687: LD_VAR 0 2
53691: PUSH
53692: FOR_IN
53693: IFFALSE 53724
// if GetLives ( i ) < 1000 then
53695: LD_VAR 0 1
53699: PPUSH
53700: CALL_OW 256
53704: PUSH
53705: LD_INT 1000
53707: LESS
53708: IFFALSE 53722
// SetLives ( i , 1000 ) ;
53710: LD_VAR 0 1
53714: PPUSH
53715: LD_INT 1000
53717: PPUSH
53718: CALL_OW 234
53722: GO 53692
53724: POP
53725: POP
// until p > 20 ;
53726: LD_VAR 0 3
53730: PUSH
53731: LD_INT 20
53733: GREATER
53734: IFFALSE 53661
// end ;
53736: PPOPN 3
53738: END
// every 0 0$1 trigger StreamModeActive and sTime do
53739: LD_EXP 23
53743: PUSH
53744: LD_EXP 74
53748: AND
53749: IFFALSE 53784
53751: GO 53753
53753: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
53754: LD_INT 28
53756: PPUSH
53757: LD_OWVAR 2
53761: PPUSH
53762: LD_INT 2
53764: PPUSH
53765: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
53769: LD_INT 30
53771: PPUSH
53772: LD_OWVAR 2
53776: PPUSH
53777: LD_INT 2
53779: PPUSH
53780: CALL_OW 322
// end ;
53784: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
53785: LD_EXP 23
53789: PUSH
53790: LD_EXP 75
53794: AND
53795: IFFALSE 53916
53797: GO 53799
53799: DISABLE
53800: LD_INT 0
53802: PPUSH
53803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53804: LD_ADDR_VAR 0 2
53808: PUSH
53809: LD_INT 22
53811: PUSH
53812: LD_OWVAR 2
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 21
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: LD_INT 23
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: PPUSH
53853: CALL_OW 69
53857: ST_TO_ADDR
// if not tmp then
53858: LD_VAR 0 2
53862: NOT
53863: IFFALSE 53867
// exit ;
53865: GO 53916
// for i in tmp do
53867: LD_ADDR_VAR 0 1
53871: PUSH
53872: LD_VAR 0 2
53876: PUSH
53877: FOR_IN
53878: IFFALSE 53914
// begin if Crawls ( i ) then
53880: LD_VAR 0 1
53884: PPUSH
53885: CALL_OW 318
53889: IFFALSE 53900
// ComWalk ( i ) ;
53891: LD_VAR 0 1
53895: PPUSH
53896: CALL_OW 138
// SetClass ( i , 2 ) ;
53900: LD_VAR 0 1
53904: PPUSH
53905: LD_INT 2
53907: PPUSH
53908: CALL_OW 336
// end ;
53912: GO 53877
53914: POP
53915: POP
// end ;
53916: PPOPN 2
53918: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
53919: LD_EXP 23
53923: PUSH
53924: LD_EXP 76
53928: AND
53929: IFFALSE 54217
53931: GO 53933
53933: DISABLE
53934: LD_INT 0
53936: PPUSH
53937: PPUSH
53938: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
53939: LD_OWVAR 2
53943: PPUSH
53944: LD_INT 9
53946: PPUSH
53947: LD_INT 1
53949: PPUSH
53950: LD_INT 1
53952: PPUSH
53953: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
53957: LD_INT 9
53959: PPUSH
53960: LD_OWVAR 2
53964: PPUSH
53965: CALL_OW 343
// uc_side := 9 ;
53969: LD_ADDR_OWVAR 20
53973: PUSH
53974: LD_INT 9
53976: ST_TO_ADDR
// uc_nation := 2 ;
53977: LD_ADDR_OWVAR 21
53981: PUSH
53982: LD_INT 2
53984: ST_TO_ADDR
// hc_name := Dark Warrior ;
53985: LD_ADDR_OWVAR 26
53989: PUSH
53990: LD_STRING Dark Warrior
53992: ST_TO_ADDR
// hc_gallery :=  ;
53993: LD_ADDR_OWVAR 33
53997: PUSH
53998: LD_STRING 
54000: ST_TO_ADDR
// hc_noskilllimit := true ;
54001: LD_ADDR_OWVAR 76
54005: PUSH
54006: LD_INT 1
54008: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
54009: LD_ADDR_OWVAR 31
54013: PUSH
54014: LD_INT 30
54016: PUSH
54017: LD_INT 30
54019: PUSH
54020: LD_INT 30
54022: PUSH
54023: LD_INT 30
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: ST_TO_ADDR
// un := CreateHuman ;
54032: LD_ADDR_VAR 0 3
54036: PUSH
54037: CALL_OW 44
54041: ST_TO_ADDR
// hc_noskilllimit := false ;
54042: LD_ADDR_OWVAR 76
54046: PUSH
54047: LD_INT 0
54049: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54050: LD_VAR 0 3
54054: PPUSH
54055: LD_INT 1
54057: PPUSH
54058: CALL_OW 51
// ToLua ( playRanger() ) ;
54062: LD_STRING playRanger()
54064: PPUSH
54065: CALL_OW 559
// p := 0 ;
54069: LD_ADDR_VAR 0 2
54073: PUSH
54074: LD_INT 0
54076: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
54077: LD_INT 35
54079: PPUSH
54080: CALL_OW 67
// p := p + 1 ;
54084: LD_ADDR_VAR 0 2
54088: PUSH
54089: LD_VAR 0 2
54093: PUSH
54094: LD_INT 1
54096: PLUS
54097: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
54098: LD_VAR 0 3
54102: PPUSH
54103: CALL_OW 256
54107: PUSH
54108: LD_INT 1000
54110: LESS
54111: IFFALSE 54125
// SetLives ( un , 1000 ) ;
54113: LD_VAR 0 3
54117: PPUSH
54118: LD_INT 1000
54120: PPUSH
54121: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
54125: LD_VAR 0 3
54129: PPUSH
54130: LD_INT 81
54132: PUSH
54133: LD_OWVAR 2
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 91
54144: PUSH
54145: LD_VAR 0 3
54149: PUSH
54150: LD_INT 30
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PPUSH
54162: CALL_OW 69
54166: PPUSH
54167: LD_VAR 0 3
54171: PPUSH
54172: CALL_OW 74
54176: PPUSH
54177: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
54181: LD_VAR 0 2
54185: PUSH
54186: LD_INT 80
54188: GREATER
54189: PUSH
54190: LD_VAR 0 3
54194: PPUSH
54195: CALL_OW 301
54199: OR
54200: IFFALSE 54077
// if un then
54202: LD_VAR 0 3
54206: IFFALSE 54217
// RemoveUnit ( un ) ;
54208: LD_VAR 0 3
54212: PPUSH
54213: CALL_OW 64
// end ;
54217: PPOPN 3
54219: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
54220: LD_EXP 77
54224: IFFALSE 54340
54226: GO 54228
54228: DISABLE
54229: LD_INT 0
54231: PPUSH
54232: PPUSH
54233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54234: LD_ADDR_VAR 0 2
54238: PUSH
54239: LD_INT 81
54241: PUSH
54242: LD_OWVAR 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 21
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PPUSH
54265: CALL_OW 69
54269: ST_TO_ADDR
// ToLua ( playComputer() ) ;
54270: LD_STRING playComputer()
54272: PPUSH
54273: CALL_OW 559
// if not tmp then
54277: LD_VAR 0 2
54281: NOT
54282: IFFALSE 54286
// exit ;
54284: GO 54340
// for i in tmp do
54286: LD_ADDR_VAR 0 1
54290: PUSH
54291: LD_VAR 0 2
54295: PUSH
54296: FOR_IN
54297: IFFALSE 54338
// for j := 1 to 4 do
54299: LD_ADDR_VAR 0 3
54303: PUSH
54304: DOUBLE
54305: LD_INT 1
54307: DEC
54308: ST_TO_ADDR
54309: LD_INT 4
54311: PUSH
54312: FOR_TO
54313: IFFALSE 54334
// SetSkill ( i , j , 10 ) ;
54315: LD_VAR 0 1
54319: PPUSH
54320: LD_VAR 0 3
54324: PPUSH
54325: LD_INT 10
54327: PPUSH
54328: CALL_OW 237
54332: GO 54312
54334: POP
54335: POP
54336: GO 54296
54338: POP
54339: POP
// end ;
54340: PPOPN 3
54342: END
// every 0 0$1 trigger s30 do var i , tmp ;
54343: LD_EXP 78
54347: IFFALSE 54416
54349: GO 54351
54351: DISABLE
54352: LD_INT 0
54354: PPUSH
54355: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54356: LD_ADDR_VAR 0 2
54360: PUSH
54361: LD_INT 22
54363: PUSH
54364: LD_OWVAR 2
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PPUSH
54373: CALL_OW 69
54377: ST_TO_ADDR
// if not tmp then
54378: LD_VAR 0 2
54382: NOT
54383: IFFALSE 54387
// exit ;
54385: GO 54416
// for i in tmp do
54387: LD_ADDR_VAR 0 1
54391: PUSH
54392: LD_VAR 0 2
54396: PUSH
54397: FOR_IN
54398: IFFALSE 54414
// SetLives ( i , 300 ) ;
54400: LD_VAR 0 1
54404: PPUSH
54405: LD_INT 300
54407: PPUSH
54408: CALL_OW 234
54412: GO 54397
54414: POP
54415: POP
// end ;
54416: PPOPN 2
54418: END
// every 0 0$1 trigger s60 do var i , tmp ;
54419: LD_EXP 79
54423: IFFALSE 54492
54425: GO 54427
54427: DISABLE
54428: LD_INT 0
54430: PPUSH
54431: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54432: LD_ADDR_VAR 0 2
54436: PUSH
54437: LD_INT 22
54439: PUSH
54440: LD_OWVAR 2
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PPUSH
54449: CALL_OW 69
54453: ST_TO_ADDR
// if not tmp then
54454: LD_VAR 0 2
54458: NOT
54459: IFFALSE 54463
// exit ;
54461: GO 54492
// for i in tmp do
54463: LD_ADDR_VAR 0 1
54467: PUSH
54468: LD_VAR 0 2
54472: PUSH
54473: FOR_IN
54474: IFFALSE 54490
// SetLives ( i , 600 ) ;
54476: LD_VAR 0 1
54480: PPUSH
54481: LD_INT 600
54483: PPUSH
54484: CALL_OW 234
54488: GO 54473
54490: POP
54491: POP
// end ;
54492: PPOPN 2
54494: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
54495: LD_INT 0
54497: PPUSH
// case cmd of 301 :
54498: LD_VAR 0 1
54502: PUSH
54503: LD_INT 301
54505: DOUBLE
54506: EQUAL
54507: IFTRUE 54511
54509: GO 54543
54511: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
54512: LD_VAR 0 6
54516: PPUSH
54517: LD_VAR 0 7
54521: PPUSH
54522: LD_VAR 0 8
54526: PPUSH
54527: LD_VAR 0 4
54531: PPUSH
54532: LD_VAR 0 5
54536: PPUSH
54537: CALL 55744 0 5
54541: GO 54664
54543: LD_INT 302
54545: DOUBLE
54546: EQUAL
54547: IFTRUE 54551
54549: GO 54588
54551: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
54552: LD_VAR 0 6
54556: PPUSH
54557: LD_VAR 0 7
54561: PPUSH
54562: LD_VAR 0 8
54566: PPUSH
54567: LD_VAR 0 9
54571: PPUSH
54572: LD_VAR 0 4
54576: PPUSH
54577: LD_VAR 0 5
54581: PPUSH
54582: CALL 55835 0 6
54586: GO 54664
54588: LD_INT 303
54590: DOUBLE
54591: EQUAL
54592: IFTRUE 54596
54594: GO 54633
54596: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
54597: LD_VAR 0 6
54601: PPUSH
54602: LD_VAR 0 7
54606: PPUSH
54607: LD_VAR 0 8
54611: PPUSH
54612: LD_VAR 0 9
54616: PPUSH
54617: LD_VAR 0 4
54621: PPUSH
54622: LD_VAR 0 5
54626: PPUSH
54627: CALL 54669 0 6
54631: GO 54664
54633: LD_INT 304
54635: DOUBLE
54636: EQUAL
54637: IFTRUE 54641
54639: GO 54663
54641: POP
// hHackTeleport ( unit , x , y ) ; end ;
54642: LD_VAR 0 2
54646: PPUSH
54647: LD_VAR 0 4
54651: PPUSH
54652: LD_VAR 0 5
54656: PPUSH
54657: CALL 56428 0 3
54661: GO 54664
54663: POP
// end ;
54664: LD_VAR 0 12
54668: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
54669: LD_INT 0
54671: PPUSH
54672: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
54673: LD_VAR 0 1
54677: PUSH
54678: LD_INT 1
54680: LESS
54681: PUSH
54682: LD_VAR 0 1
54686: PUSH
54687: LD_INT 3
54689: GREATER
54690: OR
54691: PUSH
54692: LD_VAR 0 5
54696: PPUSH
54697: LD_VAR 0 6
54701: PPUSH
54702: CALL_OW 428
54706: OR
54707: IFFALSE 54711
// exit ;
54709: GO 55431
// uc_side := your_side ;
54711: LD_ADDR_OWVAR 20
54715: PUSH
54716: LD_OWVAR 2
54720: ST_TO_ADDR
// uc_nation := nation ;
54721: LD_ADDR_OWVAR 21
54725: PUSH
54726: LD_VAR 0 1
54730: ST_TO_ADDR
// bc_level = 1 ;
54731: LD_ADDR_OWVAR 43
54735: PUSH
54736: LD_INT 1
54738: ST_TO_ADDR
// case btype of 1 :
54739: LD_VAR 0 2
54743: PUSH
54744: LD_INT 1
54746: DOUBLE
54747: EQUAL
54748: IFTRUE 54752
54750: GO 54763
54752: POP
// bc_type := b_depot ; 2 :
54753: LD_ADDR_OWVAR 42
54757: PUSH
54758: LD_INT 0
54760: ST_TO_ADDR
54761: GO 55375
54763: LD_INT 2
54765: DOUBLE
54766: EQUAL
54767: IFTRUE 54771
54769: GO 54782
54771: POP
// bc_type := b_warehouse ; 3 :
54772: LD_ADDR_OWVAR 42
54776: PUSH
54777: LD_INT 1
54779: ST_TO_ADDR
54780: GO 55375
54782: LD_INT 3
54784: DOUBLE
54785: EQUAL
54786: IFTRUE 54790
54788: GO 54801
54790: POP
// bc_type := b_lab ; 4 .. 9 :
54791: LD_ADDR_OWVAR 42
54795: PUSH
54796: LD_INT 6
54798: ST_TO_ADDR
54799: GO 55375
54801: LD_INT 4
54803: DOUBLE
54804: GREATEREQUAL
54805: IFFALSE 54813
54807: LD_INT 9
54809: DOUBLE
54810: LESSEQUAL
54811: IFTRUE 54815
54813: GO 54867
54815: POP
// begin bc_type := b_lab_half ;
54816: LD_ADDR_OWVAR 42
54820: PUSH
54821: LD_INT 7
54823: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
54824: LD_ADDR_OWVAR 44
54828: PUSH
54829: LD_INT 10
54831: PUSH
54832: LD_INT 11
54834: PUSH
54835: LD_INT 12
54837: PUSH
54838: LD_INT 15
54840: PUSH
54841: LD_INT 14
54843: PUSH
54844: LD_INT 13
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: PUSH
54855: LD_VAR 0 2
54859: PUSH
54860: LD_INT 3
54862: MINUS
54863: ARRAY
54864: ST_TO_ADDR
// end ; 10 .. 13 :
54865: GO 55375
54867: LD_INT 10
54869: DOUBLE
54870: GREATEREQUAL
54871: IFFALSE 54879
54873: LD_INT 13
54875: DOUBLE
54876: LESSEQUAL
54877: IFTRUE 54881
54879: GO 54958
54881: POP
// begin bc_type := b_lab_full ;
54882: LD_ADDR_OWVAR 42
54886: PUSH
54887: LD_INT 8
54889: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
54890: LD_ADDR_OWVAR 44
54894: PUSH
54895: LD_INT 10
54897: PUSH
54898: LD_INT 12
54900: PUSH
54901: LD_INT 14
54903: PUSH
54904: LD_INT 13
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: PUSH
54913: LD_VAR 0 2
54917: PUSH
54918: LD_INT 9
54920: MINUS
54921: ARRAY
54922: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
54923: LD_ADDR_OWVAR 45
54927: PUSH
54928: LD_INT 11
54930: PUSH
54931: LD_INT 15
54933: PUSH
54934: LD_INT 12
54936: PUSH
54937: LD_INT 15
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: PUSH
54946: LD_VAR 0 2
54950: PUSH
54951: LD_INT 9
54953: MINUS
54954: ARRAY
54955: ST_TO_ADDR
// end ; 14 :
54956: GO 55375
54958: LD_INT 14
54960: DOUBLE
54961: EQUAL
54962: IFTRUE 54966
54964: GO 54977
54966: POP
// bc_type := b_workshop ; 15 :
54967: LD_ADDR_OWVAR 42
54971: PUSH
54972: LD_INT 2
54974: ST_TO_ADDR
54975: GO 55375
54977: LD_INT 15
54979: DOUBLE
54980: EQUAL
54981: IFTRUE 54985
54983: GO 54996
54985: POP
// bc_type := b_factory ; 16 :
54986: LD_ADDR_OWVAR 42
54990: PUSH
54991: LD_INT 3
54993: ST_TO_ADDR
54994: GO 55375
54996: LD_INT 16
54998: DOUBLE
54999: EQUAL
55000: IFTRUE 55004
55002: GO 55015
55004: POP
// bc_type := b_ext_gun ; 17 :
55005: LD_ADDR_OWVAR 42
55009: PUSH
55010: LD_INT 17
55012: ST_TO_ADDR
55013: GO 55375
55015: LD_INT 17
55017: DOUBLE
55018: EQUAL
55019: IFTRUE 55023
55021: GO 55051
55023: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
55024: LD_ADDR_OWVAR 42
55028: PUSH
55029: LD_INT 19
55031: PUSH
55032: LD_INT 23
55034: PUSH
55035: LD_INT 19
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: PUSH
55043: LD_VAR 0 1
55047: ARRAY
55048: ST_TO_ADDR
55049: GO 55375
55051: LD_INT 18
55053: DOUBLE
55054: EQUAL
55055: IFTRUE 55059
55057: GO 55070
55059: POP
// bc_type := b_ext_radar ; 19 :
55060: LD_ADDR_OWVAR 42
55064: PUSH
55065: LD_INT 20
55067: ST_TO_ADDR
55068: GO 55375
55070: LD_INT 19
55072: DOUBLE
55073: EQUAL
55074: IFTRUE 55078
55076: GO 55089
55078: POP
// bc_type := b_ext_radio ; 20 :
55079: LD_ADDR_OWVAR 42
55083: PUSH
55084: LD_INT 22
55086: ST_TO_ADDR
55087: GO 55375
55089: LD_INT 20
55091: DOUBLE
55092: EQUAL
55093: IFTRUE 55097
55095: GO 55108
55097: POP
// bc_type := b_ext_siberium ; 21 :
55098: LD_ADDR_OWVAR 42
55102: PUSH
55103: LD_INT 21
55105: ST_TO_ADDR
55106: GO 55375
55108: LD_INT 21
55110: DOUBLE
55111: EQUAL
55112: IFTRUE 55116
55114: GO 55127
55116: POP
// bc_type := b_ext_computer ; 22 :
55117: LD_ADDR_OWVAR 42
55121: PUSH
55122: LD_INT 24
55124: ST_TO_ADDR
55125: GO 55375
55127: LD_INT 22
55129: DOUBLE
55130: EQUAL
55131: IFTRUE 55135
55133: GO 55146
55135: POP
// bc_type := b_ext_track ; 23 :
55136: LD_ADDR_OWVAR 42
55140: PUSH
55141: LD_INT 16
55143: ST_TO_ADDR
55144: GO 55375
55146: LD_INT 23
55148: DOUBLE
55149: EQUAL
55150: IFTRUE 55154
55152: GO 55165
55154: POP
// bc_type := b_ext_laser ; 24 :
55155: LD_ADDR_OWVAR 42
55159: PUSH
55160: LD_INT 25
55162: ST_TO_ADDR
55163: GO 55375
55165: LD_INT 24
55167: DOUBLE
55168: EQUAL
55169: IFTRUE 55173
55171: GO 55184
55173: POP
// bc_type := b_control_tower ; 25 :
55174: LD_ADDR_OWVAR 42
55178: PUSH
55179: LD_INT 36
55181: ST_TO_ADDR
55182: GO 55375
55184: LD_INT 25
55186: DOUBLE
55187: EQUAL
55188: IFTRUE 55192
55190: GO 55203
55192: POP
// bc_type := b_breastwork ; 26 :
55193: LD_ADDR_OWVAR 42
55197: PUSH
55198: LD_INT 31
55200: ST_TO_ADDR
55201: GO 55375
55203: LD_INT 26
55205: DOUBLE
55206: EQUAL
55207: IFTRUE 55211
55209: GO 55222
55211: POP
// bc_type := b_bunker ; 27 :
55212: LD_ADDR_OWVAR 42
55216: PUSH
55217: LD_INT 32
55219: ST_TO_ADDR
55220: GO 55375
55222: LD_INT 27
55224: DOUBLE
55225: EQUAL
55226: IFTRUE 55230
55228: GO 55241
55230: POP
// bc_type := b_turret ; 28 :
55231: LD_ADDR_OWVAR 42
55235: PUSH
55236: LD_INT 33
55238: ST_TO_ADDR
55239: GO 55375
55241: LD_INT 28
55243: DOUBLE
55244: EQUAL
55245: IFTRUE 55249
55247: GO 55260
55249: POP
// bc_type := b_armoury ; 29 :
55250: LD_ADDR_OWVAR 42
55254: PUSH
55255: LD_INT 4
55257: ST_TO_ADDR
55258: GO 55375
55260: LD_INT 29
55262: DOUBLE
55263: EQUAL
55264: IFTRUE 55268
55266: GO 55279
55268: POP
// bc_type := b_barracks ; 30 :
55269: LD_ADDR_OWVAR 42
55273: PUSH
55274: LD_INT 5
55276: ST_TO_ADDR
55277: GO 55375
55279: LD_INT 30
55281: DOUBLE
55282: EQUAL
55283: IFTRUE 55287
55285: GO 55298
55287: POP
// bc_type := b_solar_power ; 31 :
55288: LD_ADDR_OWVAR 42
55292: PUSH
55293: LD_INT 27
55295: ST_TO_ADDR
55296: GO 55375
55298: LD_INT 31
55300: DOUBLE
55301: EQUAL
55302: IFTRUE 55306
55304: GO 55317
55306: POP
// bc_type := b_oil_power ; 32 :
55307: LD_ADDR_OWVAR 42
55311: PUSH
55312: LD_INT 26
55314: ST_TO_ADDR
55315: GO 55375
55317: LD_INT 32
55319: DOUBLE
55320: EQUAL
55321: IFTRUE 55325
55323: GO 55336
55325: POP
// bc_type := b_siberite_power ; 33 :
55326: LD_ADDR_OWVAR 42
55330: PUSH
55331: LD_INT 28
55333: ST_TO_ADDR
55334: GO 55375
55336: LD_INT 33
55338: DOUBLE
55339: EQUAL
55340: IFTRUE 55344
55342: GO 55355
55344: POP
// bc_type := b_oil_mine ; 34 :
55345: LD_ADDR_OWVAR 42
55349: PUSH
55350: LD_INT 29
55352: ST_TO_ADDR
55353: GO 55375
55355: LD_INT 34
55357: DOUBLE
55358: EQUAL
55359: IFTRUE 55363
55361: GO 55374
55363: POP
// bc_type := b_siberite_mine ; end ;
55364: LD_ADDR_OWVAR 42
55368: PUSH
55369: LD_INT 30
55371: ST_TO_ADDR
55372: GO 55375
55374: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
55375: LD_ADDR_VAR 0 8
55379: PUSH
55380: LD_VAR 0 5
55384: PPUSH
55385: LD_VAR 0 6
55389: PPUSH
55390: LD_VAR 0 3
55394: PPUSH
55395: CALL_OW 47
55399: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
55400: LD_OWVAR 42
55404: PUSH
55405: LD_INT 32
55407: PUSH
55408: LD_INT 33
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: IN
55415: IFFALSE 55431
// PlaceWeaponTurret ( b , weapon ) ;
55417: LD_VAR 0 8
55421: PPUSH
55422: LD_VAR 0 4
55426: PPUSH
55427: CALL_OW 431
// end ;
55431: LD_VAR 0 7
55435: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
55436: LD_INT 0
55438: PPUSH
55439: PPUSH
55440: PPUSH
55441: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55442: LD_ADDR_VAR 0 4
55446: PUSH
55447: LD_INT 22
55449: PUSH
55450: LD_OWVAR 2
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 30
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 30
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: LIST
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PPUSH
55491: CALL_OW 69
55495: ST_TO_ADDR
// if not tmp then
55496: LD_VAR 0 4
55500: NOT
55501: IFFALSE 55505
// exit ;
55503: GO 55564
// for i in tmp do
55505: LD_ADDR_VAR 0 2
55509: PUSH
55510: LD_VAR 0 4
55514: PUSH
55515: FOR_IN
55516: IFFALSE 55562
// for j = 1 to 3 do
55518: LD_ADDR_VAR 0 3
55522: PUSH
55523: DOUBLE
55524: LD_INT 1
55526: DEC
55527: ST_TO_ADDR
55528: LD_INT 3
55530: PUSH
55531: FOR_TO
55532: IFFALSE 55558
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
55534: LD_VAR 0 2
55538: PPUSH
55539: CALL_OW 274
55543: PPUSH
55544: LD_VAR 0 3
55548: PPUSH
55549: LD_INT 99999
55551: PPUSH
55552: CALL_OW 277
55556: GO 55531
55558: POP
55559: POP
55560: GO 55515
55562: POP
55563: POP
// end ;
55564: LD_VAR 0 1
55568: RET
// export function hHackSetLevel10 ; var i , j ; begin
55569: LD_INT 0
55571: PPUSH
55572: PPUSH
55573: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
55574: LD_ADDR_VAR 0 2
55578: PUSH
55579: LD_INT 21
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PPUSH
55589: CALL_OW 69
55593: PUSH
55594: FOR_IN
55595: IFFALSE 55647
// if IsSelected ( i ) then
55597: LD_VAR 0 2
55601: PPUSH
55602: CALL_OW 306
55606: IFFALSE 55645
// begin for j := 1 to 4 do
55608: LD_ADDR_VAR 0 3
55612: PUSH
55613: DOUBLE
55614: LD_INT 1
55616: DEC
55617: ST_TO_ADDR
55618: LD_INT 4
55620: PUSH
55621: FOR_TO
55622: IFFALSE 55643
// SetSkill ( i , j , 10 ) ;
55624: LD_VAR 0 2
55628: PPUSH
55629: LD_VAR 0 3
55633: PPUSH
55634: LD_INT 10
55636: PPUSH
55637: CALL_OW 237
55641: GO 55621
55643: POP
55644: POP
// end ;
55645: GO 55594
55647: POP
55648: POP
// end ;
55649: LD_VAR 0 1
55653: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
55654: LD_INT 0
55656: PPUSH
55657: PPUSH
55658: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
55659: LD_ADDR_VAR 0 2
55663: PUSH
55664: LD_INT 22
55666: PUSH
55667: LD_OWVAR 2
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 21
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PPUSH
55690: CALL_OW 69
55694: PUSH
55695: FOR_IN
55696: IFFALSE 55737
// begin for j := 1 to 4 do
55698: LD_ADDR_VAR 0 3
55702: PUSH
55703: DOUBLE
55704: LD_INT 1
55706: DEC
55707: ST_TO_ADDR
55708: LD_INT 4
55710: PUSH
55711: FOR_TO
55712: IFFALSE 55733
// SetSkill ( i , j , 10 ) ;
55714: LD_VAR 0 2
55718: PPUSH
55719: LD_VAR 0 3
55723: PPUSH
55724: LD_INT 10
55726: PPUSH
55727: CALL_OW 237
55731: GO 55711
55733: POP
55734: POP
// end ;
55735: GO 55695
55737: POP
55738: POP
// end ;
55739: LD_VAR 0 1
55743: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
55744: LD_INT 0
55746: PPUSH
// uc_side := your_side ;
55747: LD_ADDR_OWVAR 20
55751: PUSH
55752: LD_OWVAR 2
55756: ST_TO_ADDR
// uc_nation := nation ;
55757: LD_ADDR_OWVAR 21
55761: PUSH
55762: LD_VAR 0 1
55766: ST_TO_ADDR
// InitHc ;
55767: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
55771: LD_INT 0
55773: PPUSH
55774: LD_VAR 0 2
55778: PPUSH
55779: LD_VAR 0 3
55783: PPUSH
55784: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
55788: LD_VAR 0 4
55792: PPUSH
55793: LD_VAR 0 5
55797: PPUSH
55798: CALL_OW 428
55802: PUSH
55803: LD_INT 0
55805: EQUAL
55806: IFFALSE 55830
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
55808: CALL_OW 44
55812: PPUSH
55813: LD_VAR 0 4
55817: PPUSH
55818: LD_VAR 0 5
55822: PPUSH
55823: LD_INT 1
55825: PPUSH
55826: CALL_OW 48
// end ;
55830: LD_VAR 0 6
55834: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
55835: LD_INT 0
55837: PPUSH
55838: PPUSH
// uc_side := your_side ;
55839: LD_ADDR_OWVAR 20
55843: PUSH
55844: LD_OWVAR 2
55848: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
55849: LD_VAR 0 1
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: LD_INT 4
55865: PUSH
55866: LD_INT 5
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: IN
55876: IFFALSE 55888
// uc_nation := nation_american else
55878: LD_ADDR_OWVAR 21
55882: PUSH
55883: LD_INT 1
55885: ST_TO_ADDR
55886: GO 55931
// if chassis in [ 11 , 12 , 13 , 14 ] then
55888: LD_VAR 0 1
55892: PUSH
55893: LD_INT 11
55895: PUSH
55896: LD_INT 12
55898: PUSH
55899: LD_INT 13
55901: PUSH
55902: LD_INT 14
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: IN
55911: IFFALSE 55923
// uc_nation := nation_arabian else
55913: LD_ADDR_OWVAR 21
55917: PUSH
55918: LD_INT 2
55920: ST_TO_ADDR
55921: GO 55931
// uc_nation := nation_russian ;
55923: LD_ADDR_OWVAR 21
55927: PUSH
55928: LD_INT 3
55930: ST_TO_ADDR
// vc_chassis := chassis ;
55931: LD_ADDR_OWVAR 37
55935: PUSH
55936: LD_VAR 0 1
55940: ST_TO_ADDR
// vc_engine := engine ;
55941: LD_ADDR_OWVAR 39
55945: PUSH
55946: LD_VAR 0 2
55950: ST_TO_ADDR
// vc_control := control ;
55951: LD_ADDR_OWVAR 38
55955: PUSH
55956: LD_VAR 0 3
55960: ST_TO_ADDR
// vc_weapon := weapon ;
55961: LD_ADDR_OWVAR 40
55965: PUSH
55966: LD_VAR 0 4
55970: ST_TO_ADDR
// un := CreateVehicle ;
55971: LD_ADDR_VAR 0 8
55975: PUSH
55976: CALL_OW 45
55980: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
55981: LD_VAR 0 8
55985: PPUSH
55986: LD_INT 0
55988: PPUSH
55989: LD_INT 5
55991: PPUSH
55992: CALL_OW 12
55996: PPUSH
55997: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
56001: LD_VAR 0 8
56005: PPUSH
56006: LD_VAR 0 5
56010: PPUSH
56011: LD_VAR 0 6
56015: PPUSH
56016: LD_INT 1
56018: PPUSH
56019: CALL_OW 48
// end ;
56023: LD_VAR 0 7
56027: RET
// export hInvincible ; every 1 do
56028: GO 56030
56030: DISABLE
// hInvincible := [ ] ;
56031: LD_ADDR_EXP 80
56035: PUSH
56036: EMPTY
56037: ST_TO_ADDR
56038: END
// every 10 do var i ;
56039: GO 56041
56041: DISABLE
56042: LD_INT 0
56044: PPUSH
// begin enable ;
56045: ENABLE
// if not hInvincible then
56046: LD_EXP 80
56050: NOT
56051: IFFALSE 56055
// exit ;
56053: GO 56099
// for i in hInvincible do
56055: LD_ADDR_VAR 0 1
56059: PUSH
56060: LD_EXP 80
56064: PUSH
56065: FOR_IN
56066: IFFALSE 56097
// if GetLives ( i ) < 1000 then
56068: LD_VAR 0 1
56072: PPUSH
56073: CALL_OW 256
56077: PUSH
56078: LD_INT 1000
56080: LESS
56081: IFFALSE 56095
// SetLives ( i , 1000 ) ;
56083: LD_VAR 0 1
56087: PPUSH
56088: LD_INT 1000
56090: PPUSH
56091: CALL_OW 234
56095: GO 56065
56097: POP
56098: POP
// end ;
56099: PPOPN 1
56101: END
// export function hHackInvincible ; var i ; begin
56102: LD_INT 0
56104: PPUSH
56105: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
56106: LD_ADDR_VAR 0 2
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: LD_INT 21
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 21
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: LIST
56138: PPUSH
56139: CALL_OW 69
56143: PUSH
56144: FOR_IN
56145: IFFALSE 56206
// if IsSelected ( i ) then
56147: LD_VAR 0 2
56151: PPUSH
56152: CALL_OW 306
56156: IFFALSE 56204
// begin if i in hInvincible then
56158: LD_VAR 0 2
56162: PUSH
56163: LD_EXP 80
56167: IN
56168: IFFALSE 56188
// hInvincible := hInvincible diff i else
56170: LD_ADDR_EXP 80
56174: PUSH
56175: LD_EXP 80
56179: PUSH
56180: LD_VAR 0 2
56184: DIFF
56185: ST_TO_ADDR
56186: GO 56204
// hInvincible := hInvincible union i ;
56188: LD_ADDR_EXP 80
56192: PUSH
56193: LD_EXP 80
56197: PUSH
56198: LD_VAR 0 2
56202: UNION
56203: ST_TO_ADDR
// end ;
56204: GO 56144
56206: POP
56207: POP
// end ;
56208: LD_VAR 0 1
56212: RET
// export function hHackInvisible ; var i , j ; begin
56213: LD_INT 0
56215: PPUSH
56216: PPUSH
56217: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
56218: LD_ADDR_VAR 0 2
56222: PUSH
56223: LD_INT 21
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PPUSH
56233: CALL_OW 69
56237: PUSH
56238: FOR_IN
56239: IFFALSE 56263
// if IsSelected ( i ) then
56241: LD_VAR 0 2
56245: PPUSH
56246: CALL_OW 306
56250: IFFALSE 56261
// ComForceInvisible ( i ) ;
56252: LD_VAR 0 2
56256: PPUSH
56257: CALL_OW 496
56261: GO 56238
56263: POP
56264: POP
// end ;
56265: LD_VAR 0 1
56269: RET
// export function hHackChangeYourSide ; begin
56270: LD_INT 0
56272: PPUSH
// if your_side = 8 then
56273: LD_OWVAR 2
56277: PUSH
56278: LD_INT 8
56280: EQUAL
56281: IFFALSE 56293
// your_side := 0 else
56283: LD_ADDR_OWVAR 2
56287: PUSH
56288: LD_INT 0
56290: ST_TO_ADDR
56291: GO 56307
// your_side := your_side + 1 ;
56293: LD_ADDR_OWVAR 2
56297: PUSH
56298: LD_OWVAR 2
56302: PUSH
56303: LD_INT 1
56305: PLUS
56306: ST_TO_ADDR
// end ;
56307: LD_VAR 0 1
56311: RET
// export function hHackChangeUnitSide ; var i , j ; begin
56312: LD_INT 0
56314: PPUSH
56315: PPUSH
56316: PPUSH
// for i in all_units do
56317: LD_ADDR_VAR 0 2
56321: PUSH
56322: LD_OWVAR 3
56326: PUSH
56327: FOR_IN
56328: IFFALSE 56406
// if IsSelected ( i ) then
56330: LD_VAR 0 2
56334: PPUSH
56335: CALL_OW 306
56339: IFFALSE 56404
// begin j := GetSide ( i ) ;
56341: LD_ADDR_VAR 0 3
56345: PUSH
56346: LD_VAR 0 2
56350: PPUSH
56351: CALL_OW 255
56355: ST_TO_ADDR
// if j = 8 then
56356: LD_VAR 0 3
56360: PUSH
56361: LD_INT 8
56363: EQUAL
56364: IFFALSE 56376
// j := 0 else
56366: LD_ADDR_VAR 0 3
56370: PUSH
56371: LD_INT 0
56373: ST_TO_ADDR
56374: GO 56390
// j := j + 1 ;
56376: LD_ADDR_VAR 0 3
56380: PUSH
56381: LD_VAR 0 3
56385: PUSH
56386: LD_INT 1
56388: PLUS
56389: ST_TO_ADDR
// SetSide ( i , j ) ;
56390: LD_VAR 0 2
56394: PPUSH
56395: LD_VAR 0 3
56399: PPUSH
56400: CALL_OW 235
// end ;
56404: GO 56327
56406: POP
56407: POP
// end ;
56408: LD_VAR 0 1
56412: RET
// export function hHackFog ; begin
56413: LD_INT 0
56415: PPUSH
// FogOff ( true ) ;
56416: LD_INT 1
56418: PPUSH
56419: CALL_OW 344
// end ;
56423: LD_VAR 0 1
56427: RET
// export function hHackTeleport ( unit , x , y ) ; begin
56428: LD_INT 0
56430: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
56431: LD_VAR 0 1
56435: PPUSH
56436: LD_VAR 0 2
56440: PPUSH
56441: LD_VAR 0 3
56445: PPUSH
56446: LD_INT 1
56448: PPUSH
56449: LD_INT 1
56451: PPUSH
56452: CALL_OW 483
// CenterOnXY ( x , y ) ;
56456: LD_VAR 0 2
56460: PPUSH
56461: LD_VAR 0 3
56465: PPUSH
56466: CALL_OW 84
// end ;
56470: LD_VAR 0 4
56474: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
56475: LD_INT 0
56477: PPUSH
56478: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
56479: LD_VAR 0 1
56483: NOT
56484: PUSH
56485: LD_VAR 0 2
56489: PPUSH
56490: LD_VAR 0 3
56494: PPUSH
56495: CALL_OW 488
56499: NOT
56500: OR
56501: PUSH
56502: LD_VAR 0 1
56506: PPUSH
56507: CALL_OW 266
56511: PUSH
56512: LD_INT 3
56514: NONEQUAL
56515: PUSH
56516: LD_VAR 0 1
56520: PPUSH
56521: CALL_OW 247
56525: PUSH
56526: LD_INT 1
56528: EQUAL
56529: NOT
56530: AND
56531: OR
56532: IFFALSE 56536
// exit ;
56534: GO 56685
// if GetType ( factory ) = unit_human then
56536: LD_VAR 0 1
56540: PPUSH
56541: CALL_OW 247
56545: PUSH
56546: LD_INT 1
56548: EQUAL
56549: IFFALSE 56566
// factory := IsInUnit ( factory ) ;
56551: LD_ADDR_VAR 0 1
56555: PUSH
56556: LD_VAR 0 1
56560: PPUSH
56561: CALL_OW 310
56565: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
56566: LD_VAR 0 1
56570: PPUSH
56571: CALL_OW 266
56575: PUSH
56576: LD_INT 3
56578: NONEQUAL
56579: IFFALSE 56583
// exit ;
56581: GO 56685
// if HexInfo ( x , y ) = factory then
56583: LD_VAR 0 2
56587: PPUSH
56588: LD_VAR 0 3
56592: PPUSH
56593: CALL_OW 428
56597: PUSH
56598: LD_VAR 0 1
56602: EQUAL
56603: IFFALSE 56630
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
56605: LD_ADDR_EXP 81
56609: PUSH
56610: LD_EXP 81
56614: PPUSH
56615: LD_VAR 0 1
56619: PPUSH
56620: LD_INT 0
56622: PPUSH
56623: CALL_OW 1
56627: ST_TO_ADDR
56628: GO 56681
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
56630: LD_ADDR_EXP 81
56634: PUSH
56635: LD_EXP 81
56639: PPUSH
56640: LD_VAR 0 1
56644: PPUSH
56645: LD_VAR 0 1
56649: PPUSH
56650: CALL_OW 255
56654: PUSH
56655: LD_VAR 0 1
56659: PUSH
56660: LD_VAR 0 2
56664: PUSH
56665: LD_VAR 0 3
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: PPUSH
56676: CALL_OW 1
56680: ST_TO_ADDR
// UpdateFactoryWaypoints ;
56681: CALL 56690 0 0
// end ;
56685: LD_VAR 0 4
56689: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
56690: LD_INT 0
56692: PPUSH
56693: PPUSH
56694: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
56695: LD_STRING resetFactoryWaypoint();
56697: PPUSH
56698: CALL_OW 559
// if factoryWaypoints then
56702: LD_EXP 81
56706: IFFALSE 56832
// begin list := PrepareArray ( factoryWaypoints ) ;
56708: LD_ADDR_VAR 0 3
56712: PUSH
56713: LD_EXP 81
56717: PPUSH
56718: CALL 41738 0 1
56722: ST_TO_ADDR
// for i := 1 to list do
56723: LD_ADDR_VAR 0 2
56727: PUSH
56728: DOUBLE
56729: LD_INT 1
56731: DEC
56732: ST_TO_ADDR
56733: LD_VAR 0 3
56737: PUSH
56738: FOR_TO
56739: IFFALSE 56830
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
56741: LD_STRING setFactoryWaypointXY(
56743: PUSH
56744: LD_VAR 0 3
56748: PUSH
56749: LD_VAR 0 2
56753: ARRAY
56754: PUSH
56755: LD_INT 1
56757: ARRAY
56758: STR
56759: PUSH
56760: LD_STRING ,
56762: STR
56763: PUSH
56764: LD_VAR 0 3
56768: PUSH
56769: LD_VAR 0 2
56773: ARRAY
56774: PUSH
56775: LD_INT 2
56777: ARRAY
56778: STR
56779: PUSH
56780: LD_STRING ,
56782: STR
56783: PUSH
56784: LD_VAR 0 3
56788: PUSH
56789: LD_VAR 0 2
56793: ARRAY
56794: PUSH
56795: LD_INT 3
56797: ARRAY
56798: STR
56799: PUSH
56800: LD_STRING ,
56802: STR
56803: PUSH
56804: LD_VAR 0 3
56808: PUSH
56809: LD_VAR 0 2
56813: ARRAY
56814: PUSH
56815: LD_INT 4
56817: ARRAY
56818: STR
56819: PUSH
56820: LD_STRING )
56822: STR
56823: PPUSH
56824: CALL_OW 559
56828: GO 56738
56830: POP
56831: POP
// end ; end ;
56832: LD_VAR 0 1
56836: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
56837: LD_INT 0
56839: PPUSH
// if HexInfo ( x , y ) = warehouse then
56840: LD_VAR 0 2
56844: PPUSH
56845: LD_VAR 0 3
56849: PPUSH
56850: CALL_OW 428
56854: PUSH
56855: LD_VAR 0 1
56859: EQUAL
56860: IFFALSE 56887
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
56862: LD_ADDR_EXP 82
56866: PUSH
56867: LD_EXP 82
56871: PPUSH
56872: LD_VAR 0 1
56876: PPUSH
56877: LD_INT 0
56879: PPUSH
56880: CALL_OW 1
56884: ST_TO_ADDR
56885: GO 56938
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
56887: LD_ADDR_EXP 82
56891: PUSH
56892: LD_EXP 82
56896: PPUSH
56897: LD_VAR 0 1
56901: PPUSH
56902: LD_VAR 0 1
56906: PPUSH
56907: CALL_OW 255
56911: PUSH
56912: LD_VAR 0 1
56916: PUSH
56917: LD_VAR 0 2
56921: PUSH
56922: LD_VAR 0 3
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: PPUSH
56933: CALL_OW 1
56937: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
56938: CALL 56947 0 0
// end ;
56942: LD_VAR 0 4
56946: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
56947: LD_INT 0
56949: PPUSH
56950: PPUSH
56951: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
56952: LD_STRING resetWarehouseGatheringPoints();
56954: PPUSH
56955: CALL_OW 559
// if warehouseGatheringPoints then
56959: LD_EXP 82
56963: IFFALSE 57089
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
56965: LD_ADDR_VAR 0 3
56969: PUSH
56970: LD_EXP 82
56974: PPUSH
56975: CALL 41738 0 1
56979: ST_TO_ADDR
// for i := 1 to list do
56980: LD_ADDR_VAR 0 2
56984: PUSH
56985: DOUBLE
56986: LD_INT 1
56988: DEC
56989: ST_TO_ADDR
56990: LD_VAR 0 3
56994: PUSH
56995: FOR_TO
56996: IFFALSE 57087
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
56998: LD_STRING setWarehouseGatheringPointXY(
57000: PUSH
57001: LD_VAR 0 3
57005: PUSH
57006: LD_VAR 0 2
57010: ARRAY
57011: PUSH
57012: LD_INT 1
57014: ARRAY
57015: STR
57016: PUSH
57017: LD_STRING ,
57019: STR
57020: PUSH
57021: LD_VAR 0 3
57025: PUSH
57026: LD_VAR 0 2
57030: ARRAY
57031: PUSH
57032: LD_INT 2
57034: ARRAY
57035: STR
57036: PUSH
57037: LD_STRING ,
57039: STR
57040: PUSH
57041: LD_VAR 0 3
57045: PUSH
57046: LD_VAR 0 2
57050: ARRAY
57051: PUSH
57052: LD_INT 3
57054: ARRAY
57055: STR
57056: PUSH
57057: LD_STRING ,
57059: STR
57060: PUSH
57061: LD_VAR 0 3
57065: PUSH
57066: LD_VAR 0 2
57070: ARRAY
57071: PUSH
57072: LD_INT 4
57074: ARRAY
57075: STR
57076: PUSH
57077: LD_STRING )
57079: STR
57080: PPUSH
57081: CALL_OW 559
57085: GO 56995
57087: POP
57088: POP
// end ; end ;
57089: LD_VAR 0 1
57093: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
57094: LD_EXP 82
57098: IFFALSE 57783
57100: GO 57102
57102: DISABLE
57103: LD_INT 0
57105: PPUSH
57106: PPUSH
57107: PPUSH
57108: PPUSH
57109: PPUSH
57110: PPUSH
57111: PPUSH
57112: PPUSH
57113: PPUSH
// begin enable ;
57114: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
57115: LD_ADDR_VAR 0 3
57119: PUSH
57120: LD_EXP 82
57124: PPUSH
57125: CALL 41738 0 1
57129: ST_TO_ADDR
// if not list then
57130: LD_VAR 0 3
57134: NOT
57135: IFFALSE 57139
// exit ;
57137: GO 57783
// for i := 1 to list do
57139: LD_ADDR_VAR 0 1
57143: PUSH
57144: DOUBLE
57145: LD_INT 1
57147: DEC
57148: ST_TO_ADDR
57149: LD_VAR 0 3
57153: PUSH
57154: FOR_TO
57155: IFFALSE 57781
// begin depot := list [ i ] [ 2 ] ;
57157: LD_ADDR_VAR 0 8
57161: PUSH
57162: LD_VAR 0 3
57166: PUSH
57167: LD_VAR 0 1
57171: ARRAY
57172: PUSH
57173: LD_INT 2
57175: ARRAY
57176: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
57177: LD_ADDR_VAR 0 5
57181: PUSH
57182: LD_VAR 0 3
57186: PUSH
57187: LD_VAR 0 1
57191: ARRAY
57192: PUSH
57193: LD_INT 1
57195: ARRAY
57196: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
57197: LD_VAR 0 8
57201: PPUSH
57202: CALL_OW 301
57206: PUSH
57207: LD_VAR 0 5
57211: PUSH
57212: LD_VAR 0 8
57216: PPUSH
57217: CALL_OW 255
57221: NONEQUAL
57222: OR
57223: IFFALSE 57252
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
57225: LD_ADDR_EXP 82
57229: PUSH
57230: LD_EXP 82
57234: PPUSH
57235: LD_VAR 0 8
57239: PPUSH
57240: LD_INT 0
57242: PPUSH
57243: CALL_OW 1
57247: ST_TO_ADDR
// exit ;
57248: POP
57249: POP
57250: GO 57783
// end ; x := list [ i ] [ 3 ] ;
57252: LD_ADDR_VAR 0 6
57256: PUSH
57257: LD_VAR 0 3
57261: PUSH
57262: LD_VAR 0 1
57266: ARRAY
57267: PUSH
57268: LD_INT 3
57270: ARRAY
57271: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
57272: LD_ADDR_VAR 0 7
57276: PUSH
57277: LD_VAR 0 3
57281: PUSH
57282: LD_VAR 0 1
57286: ARRAY
57287: PUSH
57288: LD_INT 4
57290: ARRAY
57291: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
57292: LD_ADDR_VAR 0 9
57296: PUSH
57297: LD_VAR 0 6
57301: PPUSH
57302: LD_VAR 0 7
57306: PPUSH
57307: LD_INT 16
57309: PPUSH
57310: CALL 40326 0 3
57314: ST_TO_ADDR
// if not cratesNearbyPoint then
57315: LD_VAR 0 9
57319: NOT
57320: IFFALSE 57326
// exit ;
57322: POP
57323: POP
57324: GO 57783
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
57326: LD_ADDR_VAR 0 4
57330: PUSH
57331: LD_INT 22
57333: PUSH
57334: LD_VAR 0 5
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 3
57345: PUSH
57346: LD_INT 60
57348: PUSH
57349: EMPTY
57350: LIST
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 91
57358: PUSH
57359: LD_VAR 0 8
57363: PUSH
57364: LD_INT 6
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: LD_INT 25
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 25
57387: PUSH
57388: LD_INT 16
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: LIST
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: PPUSH
57406: CALL_OW 69
57410: PUSH
57411: LD_VAR 0 8
57415: PPUSH
57416: CALL_OW 313
57420: PPUSH
57421: LD_INT 3
57423: PUSH
57424: LD_INT 60
57426: PUSH
57427: EMPTY
57428: LIST
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: LD_INT 25
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 25
57449: PUSH
57450: LD_INT 16
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: LIST
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PPUSH
57466: CALL_OW 72
57470: UNION
57471: ST_TO_ADDR
// if tmp then
57472: LD_VAR 0 4
57476: IFFALSE 57556
// begin tmp := ShrinkArray ( tmp , 3 ) ;
57478: LD_ADDR_VAR 0 4
57482: PUSH
57483: LD_VAR 0 4
57487: PPUSH
57488: LD_INT 3
57490: PPUSH
57491: CALL 38295 0 2
57495: ST_TO_ADDR
// for j in tmp do
57496: LD_ADDR_VAR 0 2
57500: PUSH
57501: LD_VAR 0 4
57505: PUSH
57506: FOR_IN
57507: IFFALSE 57550
// begin if IsInUnit ( j ) then
57509: LD_VAR 0 2
57513: PPUSH
57514: CALL_OW 310
57518: IFFALSE 57529
// ComExit ( j ) ;
57520: LD_VAR 0 2
57524: PPUSH
57525: CALL 38378 0 1
// AddComCollect ( j , x , y ) ;
57529: LD_VAR 0 2
57533: PPUSH
57534: LD_VAR 0 6
57538: PPUSH
57539: LD_VAR 0 7
57543: PPUSH
57544: CALL_OW 177
// end ;
57548: GO 57506
57550: POP
57551: POP
// exit ;
57552: POP
57553: POP
57554: GO 57783
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
57556: LD_ADDR_VAR 0 4
57560: PUSH
57561: LD_INT 22
57563: PUSH
57564: LD_VAR 0 5
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 91
57575: PUSH
57576: LD_VAR 0 8
57580: PUSH
57581: LD_INT 8
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: LD_INT 34
57594: PUSH
57595: LD_INT 12
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 34
57604: PUSH
57605: LD_INT 51
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 34
57614: PUSH
57615: LD_INT 32
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 34
57624: PUSH
57625: LD_INT 89
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: LIST
57643: PPUSH
57644: CALL_OW 69
57648: ST_TO_ADDR
// if tmp then
57649: LD_VAR 0 4
57653: IFFALSE 57779
// begin for j in tmp do
57655: LD_ADDR_VAR 0 2
57659: PUSH
57660: LD_VAR 0 4
57664: PUSH
57665: FOR_IN
57666: IFFALSE 57777
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
57668: LD_VAR 0 2
57672: PPUSH
57673: CALL_OW 262
57677: PUSH
57678: LD_INT 3
57680: EQUAL
57681: PUSH
57682: LD_VAR 0 2
57686: PPUSH
57687: CALL_OW 261
57691: PUSH
57692: LD_INT 20
57694: GREATER
57695: OR
57696: PUSH
57697: LD_VAR 0 2
57701: PPUSH
57702: CALL_OW 314
57706: NOT
57707: AND
57708: PUSH
57709: LD_VAR 0 2
57713: PPUSH
57714: CALL_OW 263
57718: PUSH
57719: LD_INT 1
57721: NONEQUAL
57722: PUSH
57723: LD_VAR 0 2
57727: PPUSH
57728: CALL_OW 311
57732: OR
57733: AND
57734: IFFALSE 57775
// begin ComCollect ( j , x , y ) ;
57736: LD_VAR 0 2
57740: PPUSH
57741: LD_VAR 0 6
57745: PPUSH
57746: LD_VAR 0 7
57750: PPUSH
57751: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
57755: LD_VAR 0 2
57759: PPUSH
57760: LD_VAR 0 8
57764: PPUSH
57765: CALL_OW 172
// exit ;
57769: POP
57770: POP
57771: POP
57772: POP
57773: GO 57783
// end ;
57775: GO 57665
57777: POP
57778: POP
// end ; end ;
57779: GO 57154
57781: POP
57782: POP
// end ; end_of_file
57783: PPOPN 9
57785: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57786: LD_VAR 0 1
57790: PUSH
57791: LD_INT 200
57793: DOUBLE
57794: GREATEREQUAL
57795: IFFALSE 57803
57797: LD_INT 299
57799: DOUBLE
57800: LESSEQUAL
57801: IFTRUE 57805
57803: GO 57837
57805: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57806: LD_VAR 0 1
57810: PPUSH
57811: LD_VAR 0 2
57815: PPUSH
57816: LD_VAR 0 3
57820: PPUSH
57821: LD_VAR 0 4
57825: PPUSH
57826: LD_VAR 0 5
57830: PPUSH
57831: CALL 58325 0 5
57835: GO 57914
57837: LD_INT 300
57839: DOUBLE
57840: GREATEREQUAL
57841: IFFALSE 57849
57843: LD_INT 399
57845: DOUBLE
57846: LESSEQUAL
57847: IFTRUE 57851
57849: GO 57913
57851: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57852: LD_VAR 0 1
57856: PPUSH
57857: LD_VAR 0 2
57861: PPUSH
57862: LD_VAR 0 3
57866: PPUSH
57867: LD_VAR 0 4
57871: PPUSH
57872: LD_VAR 0 5
57876: PPUSH
57877: LD_VAR 0 6
57881: PPUSH
57882: LD_VAR 0 7
57886: PPUSH
57887: LD_VAR 0 8
57891: PPUSH
57892: LD_VAR 0 9
57896: PPUSH
57897: LD_VAR 0 10
57901: PPUSH
57902: LD_VAR 0 11
57906: PPUSH
57907: CALL 54495 0 11
57911: GO 57914
57913: POP
// end ;
57914: PPOPN 11
57916: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57917: LD_VAR 0 1
57921: PPUSH
57922: LD_VAR 0 2
57926: PPUSH
57927: LD_VAR 0 3
57931: PPUSH
57932: LD_VAR 0 4
57936: PPUSH
57937: LD_VAR 0 5
57941: PPUSH
57942: CALL 58061 0 5
// end ; end_of_file
57946: PPOPN 5
57948: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
57949: LD_INT 0
57951: PPUSH
57952: PPUSH
57953: PPUSH
57954: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
57955: LD_VAR 0 1
57959: PPUSH
57960: CALL_OW 264
57964: PUSH
57965: LD_INT 91
57967: EQUAL
57968: IFFALSE 58040
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57970: LD_INT 68
57972: PPUSH
57973: LD_VAR 0 1
57977: PPUSH
57978: CALL_OW 255
57982: PPUSH
57983: CALL_OW 321
57987: PUSH
57988: LD_INT 2
57990: EQUAL
57991: IFFALSE 58003
// eff := 70 else
57993: LD_ADDR_VAR 0 4
57997: PUSH
57998: LD_INT 70
58000: ST_TO_ADDR
58001: GO 58011
// eff := 30 ;
58003: LD_ADDR_VAR 0 4
58007: PUSH
58008: LD_INT 30
58010: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58011: LD_VAR 0 1
58015: PPUSH
58016: CALL_OW 250
58020: PPUSH
58021: LD_VAR 0 1
58025: PPUSH
58026: CALL_OW 251
58030: PPUSH
58031: LD_VAR 0 4
58035: PPUSH
58036: CALL_OW 495
// end ; end ;
58040: LD_VAR 0 2
58044: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58045: LD_INT 0
58047: PPUSH
// end ;
58048: LD_VAR 0 4
58052: RET
// export function SOS_Command ( cmd ) ; begin
58053: LD_INT 0
58055: PPUSH
// end ;
58056: LD_VAR 0 2
58060: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58061: LD_INT 0
58063: PPUSH
// end ;
58064: LD_VAR 0 6
58068: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
58069: LD_INT 0
58071: PPUSH
58072: PPUSH
// if not vehicle or not factory then
58073: LD_VAR 0 1
58077: NOT
58078: PUSH
58079: LD_VAR 0 2
58083: NOT
58084: OR
58085: IFFALSE 58089
// exit ;
58087: GO 58320
// if factoryWaypoints >= factory then
58089: LD_EXP 81
58093: PUSH
58094: LD_VAR 0 2
58098: GREATEREQUAL
58099: IFFALSE 58320
// if factoryWaypoints [ factory ] then
58101: LD_EXP 81
58105: PUSH
58106: LD_VAR 0 2
58110: ARRAY
58111: IFFALSE 58320
// begin if GetControl ( vehicle ) = control_manual then
58113: LD_VAR 0 1
58117: PPUSH
58118: CALL_OW 263
58122: PUSH
58123: LD_INT 1
58125: EQUAL
58126: IFFALSE 58207
// begin driver := IsDrivenBy ( vehicle ) ;
58128: LD_ADDR_VAR 0 4
58132: PUSH
58133: LD_VAR 0 1
58137: PPUSH
58138: CALL_OW 311
58142: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58143: LD_VAR 0 4
58147: PPUSH
58148: LD_EXP 81
58152: PUSH
58153: LD_VAR 0 2
58157: ARRAY
58158: PUSH
58159: LD_INT 3
58161: ARRAY
58162: PPUSH
58163: LD_EXP 81
58167: PUSH
58168: LD_VAR 0 2
58172: ARRAY
58173: PUSH
58174: LD_INT 4
58176: ARRAY
58177: PPUSH
58178: CALL_OW 171
// AddComExitVehicle ( driver ) ;
58182: LD_VAR 0 4
58186: PPUSH
58187: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
58191: LD_VAR 0 4
58195: PPUSH
58196: LD_VAR 0 2
58200: PPUSH
58201: CALL_OW 180
// end else
58205: GO 58320
// if GetControl ( vehicle ) = control_remote then
58207: LD_VAR 0 1
58211: PPUSH
58212: CALL_OW 263
58216: PUSH
58217: LD_INT 2
58219: EQUAL
58220: IFFALSE 58281
// begin wait ( 0 0$2 ) ;
58222: LD_INT 70
58224: PPUSH
58225: CALL_OW 67
// if Connect ( vehicle ) then
58229: LD_VAR 0 1
58233: PPUSH
58234: CALL 8618 0 1
58238: IFFALSE 58279
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58240: LD_VAR 0 1
58244: PPUSH
58245: LD_EXP 81
58249: PUSH
58250: LD_VAR 0 2
58254: ARRAY
58255: PUSH
58256: LD_INT 3
58258: ARRAY
58259: PPUSH
58260: LD_EXP 81
58264: PUSH
58265: LD_VAR 0 2
58269: ARRAY
58270: PUSH
58271: LD_INT 4
58273: ARRAY
58274: PPUSH
58275: CALL_OW 171
// end else
58279: GO 58320
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58281: LD_VAR 0 1
58285: PPUSH
58286: LD_EXP 81
58290: PUSH
58291: LD_VAR 0 2
58295: ARRAY
58296: PUSH
58297: LD_INT 3
58299: ARRAY
58300: PPUSH
58301: LD_EXP 81
58305: PUSH
58306: LD_VAR 0 2
58310: ARRAY
58311: PUSH
58312: LD_INT 4
58314: ARRAY
58315: PPUSH
58316: CALL_OW 171
// end ; end ;
58320: LD_VAR 0 3
58324: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58325: LD_INT 0
58327: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58328: LD_VAR 0 1
58332: PUSH
58333: LD_INT 250
58335: EQUAL
58336: PUSH
58337: LD_VAR 0 2
58341: PPUSH
58342: CALL_OW 264
58346: PUSH
58347: LD_INT 81
58349: EQUAL
58350: AND
58351: IFFALSE 58372
// MinerPlaceMine ( unit , x , y ) ;
58353: LD_VAR 0 2
58357: PPUSH
58358: LD_VAR 0 4
58362: PPUSH
58363: LD_VAR 0 5
58367: PPUSH
58368: CALL 60757 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58372: LD_VAR 0 1
58376: PUSH
58377: LD_INT 251
58379: EQUAL
58380: PUSH
58381: LD_VAR 0 2
58385: PPUSH
58386: CALL_OW 264
58390: PUSH
58391: LD_INT 81
58393: EQUAL
58394: AND
58395: IFFALSE 58416
// MinerDetonateMine ( unit , x , y ) ;
58397: LD_VAR 0 2
58401: PPUSH
58402: LD_VAR 0 4
58406: PPUSH
58407: LD_VAR 0 5
58411: PPUSH
58412: CALL 61032 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58416: LD_VAR 0 1
58420: PUSH
58421: LD_INT 252
58423: EQUAL
58424: PUSH
58425: LD_VAR 0 2
58429: PPUSH
58430: CALL_OW 264
58434: PUSH
58435: LD_INT 81
58437: EQUAL
58438: AND
58439: IFFALSE 58460
// MinerCreateMinefield ( unit , x , y ) ;
58441: LD_VAR 0 2
58445: PPUSH
58446: LD_VAR 0 4
58450: PPUSH
58451: LD_VAR 0 5
58455: PPUSH
58456: CALL 61449 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58460: LD_VAR 0 1
58464: PUSH
58465: LD_INT 253
58467: EQUAL
58468: PUSH
58469: LD_VAR 0 2
58473: PPUSH
58474: CALL_OW 257
58478: PUSH
58479: LD_INT 5
58481: EQUAL
58482: AND
58483: IFFALSE 58504
// ComBinocular ( unit , x , y ) ;
58485: LD_VAR 0 2
58489: PPUSH
58490: LD_VAR 0 4
58494: PPUSH
58495: LD_VAR 0 5
58499: PPUSH
58500: CALL 61818 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58504: LD_VAR 0 1
58508: PUSH
58509: LD_INT 254
58511: EQUAL
58512: PUSH
58513: LD_VAR 0 2
58517: PPUSH
58518: CALL_OW 264
58522: PUSH
58523: LD_INT 99
58525: EQUAL
58526: AND
58527: PUSH
58528: LD_VAR 0 3
58532: PPUSH
58533: CALL_OW 263
58537: PUSH
58538: LD_INT 3
58540: EQUAL
58541: AND
58542: IFFALSE 58558
// HackDestroyVehicle ( unit , selectedUnit ) ;
58544: LD_VAR 0 2
58548: PPUSH
58549: LD_VAR 0 3
58553: PPUSH
58554: CALL 60121 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58558: LD_VAR 0 1
58562: PUSH
58563: LD_INT 255
58565: EQUAL
58566: PUSH
58567: LD_VAR 0 2
58571: PPUSH
58572: CALL_OW 264
58576: PUSH
58577: LD_INT 14
58579: PUSH
58580: LD_INT 53
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: IN
58587: AND
58588: PUSH
58589: LD_VAR 0 4
58593: PPUSH
58594: LD_VAR 0 5
58598: PPUSH
58599: CALL_OW 488
58603: AND
58604: IFFALSE 58628
// CutTreeXYR ( unit , x , y , 12 ) ;
58606: LD_VAR 0 2
58610: PPUSH
58611: LD_VAR 0 4
58615: PPUSH
58616: LD_VAR 0 5
58620: PPUSH
58621: LD_INT 12
58623: PPUSH
58624: CALL 58691 0 4
// if cmd = 256 then
58628: LD_VAR 0 1
58632: PUSH
58633: LD_INT 256
58635: EQUAL
58636: IFFALSE 58657
// SetFactoryWaypoint ( unit , x , y ) ;
58638: LD_VAR 0 2
58642: PPUSH
58643: LD_VAR 0 4
58647: PPUSH
58648: LD_VAR 0 5
58652: PPUSH
58653: CALL 56475 0 3
// if cmd = 257 then
58657: LD_VAR 0 1
58661: PUSH
58662: LD_INT 257
58664: EQUAL
58665: IFFALSE 58686
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58667: LD_VAR 0 2
58671: PPUSH
58672: LD_VAR 0 4
58676: PPUSH
58677: LD_VAR 0 5
58681: PPUSH
58682: CALL 56837 0 3
// end ;
58686: LD_VAR 0 6
58690: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58691: LD_INT 0
58693: PPUSH
58694: PPUSH
58695: PPUSH
58696: PPUSH
58697: PPUSH
58698: PPUSH
58699: PPUSH
58700: PPUSH
58701: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
58702: LD_VAR 0 1
58706: NOT
58707: PUSH
58708: LD_VAR 0 2
58712: PPUSH
58713: LD_VAR 0 3
58717: PPUSH
58718: CALL_OW 488
58722: NOT
58723: OR
58724: PUSH
58725: LD_VAR 0 4
58729: NOT
58730: OR
58731: IFFALSE 58735
// exit ;
58733: GO 59075
// list := [ ] ;
58735: LD_ADDR_VAR 0 13
58739: PUSH
58740: EMPTY
58741: ST_TO_ADDR
// if x - r < 0 then
58742: LD_VAR 0 2
58746: PUSH
58747: LD_VAR 0 4
58751: MINUS
58752: PUSH
58753: LD_INT 0
58755: LESS
58756: IFFALSE 58768
// min_x := 0 else
58758: LD_ADDR_VAR 0 7
58762: PUSH
58763: LD_INT 0
58765: ST_TO_ADDR
58766: GO 58784
// min_x := x - r ;
58768: LD_ADDR_VAR 0 7
58772: PUSH
58773: LD_VAR 0 2
58777: PUSH
58778: LD_VAR 0 4
58782: MINUS
58783: ST_TO_ADDR
// if y - r < 0 then
58784: LD_VAR 0 3
58788: PUSH
58789: LD_VAR 0 4
58793: MINUS
58794: PUSH
58795: LD_INT 0
58797: LESS
58798: IFFALSE 58810
// min_y := 0 else
58800: LD_ADDR_VAR 0 8
58804: PUSH
58805: LD_INT 0
58807: ST_TO_ADDR
58808: GO 58826
// min_y := y - r ;
58810: LD_ADDR_VAR 0 8
58814: PUSH
58815: LD_VAR 0 3
58819: PUSH
58820: LD_VAR 0 4
58824: MINUS
58825: ST_TO_ADDR
// max_x := x + r ;
58826: LD_ADDR_VAR 0 9
58830: PUSH
58831: LD_VAR 0 2
58835: PUSH
58836: LD_VAR 0 4
58840: PLUS
58841: ST_TO_ADDR
// max_y := y + r ;
58842: LD_ADDR_VAR 0 10
58846: PUSH
58847: LD_VAR 0 3
58851: PUSH
58852: LD_VAR 0 4
58856: PLUS
58857: ST_TO_ADDR
// for _x = min_x to max_x do
58858: LD_ADDR_VAR 0 11
58862: PUSH
58863: DOUBLE
58864: LD_VAR 0 7
58868: DEC
58869: ST_TO_ADDR
58870: LD_VAR 0 9
58874: PUSH
58875: FOR_TO
58876: IFFALSE 58993
// for _y = min_y to max_y do
58878: LD_ADDR_VAR 0 12
58882: PUSH
58883: DOUBLE
58884: LD_VAR 0 8
58888: DEC
58889: ST_TO_ADDR
58890: LD_VAR 0 10
58894: PUSH
58895: FOR_TO
58896: IFFALSE 58989
// begin if not ValidHex ( _x , _y ) then
58898: LD_VAR 0 11
58902: PPUSH
58903: LD_VAR 0 12
58907: PPUSH
58908: CALL_OW 488
58912: NOT
58913: IFFALSE 58917
// continue ;
58915: GO 58895
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58917: LD_VAR 0 11
58921: PPUSH
58922: LD_VAR 0 12
58926: PPUSH
58927: CALL_OW 351
58931: PUSH
58932: LD_VAR 0 11
58936: PPUSH
58937: LD_VAR 0 12
58941: PPUSH
58942: CALL_OW 554
58946: AND
58947: IFFALSE 58987
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58949: LD_ADDR_VAR 0 13
58953: PUSH
58954: LD_VAR 0 13
58958: PPUSH
58959: LD_VAR 0 13
58963: PUSH
58964: LD_INT 1
58966: PLUS
58967: PPUSH
58968: LD_VAR 0 11
58972: PUSH
58973: LD_VAR 0 12
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PPUSH
58982: CALL_OW 2
58986: ST_TO_ADDR
// end ;
58987: GO 58895
58989: POP
58990: POP
58991: GO 58875
58993: POP
58994: POP
// if not list then
58995: LD_VAR 0 13
58999: NOT
59000: IFFALSE 59004
// exit ;
59002: GO 59075
// for i in list do
59004: LD_ADDR_VAR 0 6
59008: PUSH
59009: LD_VAR 0 13
59013: PUSH
59014: FOR_IN
59015: IFFALSE 59073
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59017: LD_VAR 0 1
59021: PPUSH
59022: LD_STRING M
59024: PUSH
59025: LD_VAR 0 6
59029: PUSH
59030: LD_INT 1
59032: ARRAY
59033: PUSH
59034: LD_VAR 0 6
59038: PUSH
59039: LD_INT 2
59041: ARRAY
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: PUSH
59064: EMPTY
59065: LIST
59066: PPUSH
59067: CALL_OW 447
59071: GO 59014
59073: POP
59074: POP
// end ;
59075: LD_VAR 0 5
59079: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59080: LD_EXP 84
59084: NOT
59085: IFFALSE 59135
59087: GO 59089
59089: DISABLE
// begin initHack := true ;
59090: LD_ADDR_EXP 84
59094: PUSH
59095: LD_INT 1
59097: ST_TO_ADDR
// hackTanks := [ ] ;
59098: LD_ADDR_EXP 85
59102: PUSH
59103: EMPTY
59104: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59105: LD_ADDR_EXP 86
59109: PUSH
59110: EMPTY
59111: ST_TO_ADDR
// hackLimit := 3 ;
59112: LD_ADDR_EXP 87
59116: PUSH
59117: LD_INT 3
59119: ST_TO_ADDR
// hackDist := 12 ;
59120: LD_ADDR_EXP 88
59124: PUSH
59125: LD_INT 12
59127: ST_TO_ADDR
// hackCounter := [ ] ;
59128: LD_ADDR_EXP 89
59132: PUSH
59133: EMPTY
59134: ST_TO_ADDR
// end ;
59135: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59136: LD_EXP 84
59140: PUSH
59141: LD_INT 34
59143: PUSH
59144: LD_INT 99
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PPUSH
59151: CALL_OW 69
59155: AND
59156: IFFALSE 59409
59158: GO 59160
59160: DISABLE
59161: LD_INT 0
59163: PPUSH
59164: PPUSH
// begin enable ;
59165: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59166: LD_ADDR_VAR 0 1
59170: PUSH
59171: LD_INT 34
59173: PUSH
59174: LD_INT 99
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PPUSH
59181: CALL_OW 69
59185: PUSH
59186: FOR_IN
59187: IFFALSE 59407
// begin if not i in hackTanks then
59189: LD_VAR 0 1
59193: PUSH
59194: LD_EXP 85
59198: IN
59199: NOT
59200: IFFALSE 59283
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59202: LD_ADDR_EXP 85
59206: PUSH
59207: LD_EXP 85
59211: PPUSH
59212: LD_EXP 85
59216: PUSH
59217: LD_INT 1
59219: PLUS
59220: PPUSH
59221: LD_VAR 0 1
59225: PPUSH
59226: CALL_OW 1
59230: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59231: LD_ADDR_EXP 86
59235: PUSH
59236: LD_EXP 86
59240: PPUSH
59241: LD_EXP 86
59245: PUSH
59246: LD_INT 1
59248: PLUS
59249: PPUSH
59250: EMPTY
59251: PPUSH
59252: CALL_OW 1
59256: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59257: LD_ADDR_EXP 89
59261: PUSH
59262: LD_EXP 89
59266: PPUSH
59267: LD_EXP 89
59271: PUSH
59272: LD_INT 1
59274: PLUS
59275: PPUSH
59276: EMPTY
59277: PPUSH
59278: CALL_OW 1
59282: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59283: LD_VAR 0 1
59287: PPUSH
59288: CALL_OW 302
59292: NOT
59293: IFFALSE 59306
// begin HackUnlinkAll ( i ) ;
59295: LD_VAR 0 1
59299: PPUSH
59300: CALL 59412 0 1
// continue ;
59304: GO 59186
// end ; HackCheckCapturedStatus ( i ) ;
59306: LD_VAR 0 1
59310: PPUSH
59311: CALL 59855 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59315: LD_ADDR_VAR 0 2
59319: PUSH
59320: LD_INT 81
59322: PUSH
59323: LD_VAR 0 1
59327: PPUSH
59328: CALL_OW 255
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 33
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 91
59349: PUSH
59350: LD_VAR 0 1
59354: PUSH
59355: LD_EXP 88
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 50
59367: PUSH
59368: EMPTY
59369: LIST
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: PPUSH
59377: CALL_OW 69
59381: ST_TO_ADDR
// if not tmp then
59382: LD_VAR 0 2
59386: NOT
59387: IFFALSE 59391
// continue ;
59389: GO 59186
// HackLink ( i , tmp ) ;
59391: LD_VAR 0 1
59395: PPUSH
59396: LD_VAR 0 2
59400: PPUSH
59401: CALL 59548 0 2
// end ;
59405: GO 59186
59407: POP
59408: POP
// end ;
59409: PPOPN 2
59411: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59412: LD_INT 0
59414: PPUSH
59415: PPUSH
59416: PPUSH
// if not hack in hackTanks then
59417: LD_VAR 0 1
59421: PUSH
59422: LD_EXP 85
59426: IN
59427: NOT
59428: IFFALSE 59432
// exit ;
59430: GO 59543
// index := GetElementIndex ( hackTanks , hack ) ;
59432: LD_ADDR_VAR 0 4
59436: PUSH
59437: LD_EXP 85
59441: PPUSH
59442: LD_VAR 0 1
59446: PPUSH
59447: CALL 5434 0 2
59451: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59452: LD_EXP 86
59456: PUSH
59457: LD_VAR 0 4
59461: ARRAY
59462: IFFALSE 59543
// begin for i in hackTanksCaptured [ index ] do
59464: LD_ADDR_VAR 0 3
59468: PUSH
59469: LD_EXP 86
59473: PUSH
59474: LD_VAR 0 4
59478: ARRAY
59479: PUSH
59480: FOR_IN
59481: IFFALSE 59507
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59483: LD_VAR 0 3
59487: PUSH
59488: LD_INT 1
59490: ARRAY
59491: PPUSH
59492: LD_VAR 0 3
59496: PUSH
59497: LD_INT 2
59499: ARRAY
59500: PPUSH
59501: CALL_OW 235
59505: GO 59480
59507: POP
59508: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59509: LD_ADDR_EXP 86
59513: PUSH
59514: LD_EXP 86
59518: PPUSH
59519: LD_VAR 0 4
59523: PPUSH
59524: EMPTY
59525: PPUSH
59526: CALL_OW 1
59530: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59531: LD_VAR 0 1
59535: PPUSH
59536: LD_INT 0
59538: PPUSH
59539: CALL_OW 505
// end ; end ;
59543: LD_VAR 0 2
59547: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59548: LD_INT 0
59550: PPUSH
59551: PPUSH
59552: PPUSH
// if not hack in hackTanks or not vehicles then
59553: LD_VAR 0 1
59557: PUSH
59558: LD_EXP 85
59562: IN
59563: NOT
59564: PUSH
59565: LD_VAR 0 2
59569: NOT
59570: OR
59571: IFFALSE 59575
// exit ;
59573: GO 59850
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59575: LD_ADDR_VAR 0 2
59579: PUSH
59580: LD_VAR 0 1
59584: PPUSH
59585: LD_VAR 0 2
59589: PPUSH
59590: LD_INT 1
59592: PPUSH
59593: LD_INT 1
59595: PPUSH
59596: CALL 6084 0 4
59600: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59601: LD_ADDR_VAR 0 5
59605: PUSH
59606: LD_EXP 85
59610: PPUSH
59611: LD_VAR 0 1
59615: PPUSH
59616: CALL 5434 0 2
59620: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59621: LD_EXP 86
59625: PUSH
59626: LD_VAR 0 5
59630: ARRAY
59631: PUSH
59632: LD_EXP 87
59636: LESS
59637: IFFALSE 59826
// begin for i := 1 to vehicles do
59639: LD_ADDR_VAR 0 4
59643: PUSH
59644: DOUBLE
59645: LD_INT 1
59647: DEC
59648: ST_TO_ADDR
59649: LD_VAR 0 2
59653: PUSH
59654: FOR_TO
59655: IFFALSE 59824
// begin if hackTanksCaptured [ index ] = hackLimit then
59657: LD_EXP 86
59661: PUSH
59662: LD_VAR 0 5
59666: ARRAY
59667: PUSH
59668: LD_EXP 87
59672: EQUAL
59673: IFFALSE 59677
// break ;
59675: GO 59824
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59677: LD_ADDR_EXP 89
59681: PUSH
59682: LD_EXP 89
59686: PPUSH
59687: LD_VAR 0 5
59691: PPUSH
59692: LD_EXP 89
59696: PUSH
59697: LD_VAR 0 5
59701: ARRAY
59702: PUSH
59703: LD_INT 1
59705: PLUS
59706: PPUSH
59707: CALL_OW 1
59711: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59712: LD_ADDR_EXP 86
59716: PUSH
59717: LD_EXP 86
59721: PPUSH
59722: LD_VAR 0 5
59726: PUSH
59727: LD_EXP 86
59731: PUSH
59732: LD_VAR 0 5
59736: ARRAY
59737: PUSH
59738: LD_INT 1
59740: PLUS
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PPUSH
59746: LD_VAR 0 2
59750: PUSH
59751: LD_VAR 0 4
59755: ARRAY
59756: PUSH
59757: LD_VAR 0 2
59761: PUSH
59762: LD_VAR 0 4
59766: ARRAY
59767: PPUSH
59768: CALL_OW 255
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PPUSH
59777: CALL 5649 0 3
59781: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59782: LD_VAR 0 2
59786: PUSH
59787: LD_VAR 0 4
59791: ARRAY
59792: PPUSH
59793: LD_VAR 0 1
59797: PPUSH
59798: CALL_OW 255
59802: PPUSH
59803: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59807: LD_VAR 0 2
59811: PUSH
59812: LD_VAR 0 4
59816: ARRAY
59817: PPUSH
59818: CALL_OW 141
// end ;
59822: GO 59654
59824: POP
59825: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59826: LD_VAR 0 1
59830: PPUSH
59831: LD_EXP 86
59835: PUSH
59836: LD_VAR 0 5
59840: ARRAY
59841: PUSH
59842: LD_INT 0
59844: PLUS
59845: PPUSH
59846: CALL_OW 505
// end ;
59850: LD_VAR 0 3
59854: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59855: LD_INT 0
59857: PPUSH
59858: PPUSH
59859: PPUSH
59860: PPUSH
// if not hack in hackTanks then
59861: LD_VAR 0 1
59865: PUSH
59866: LD_EXP 85
59870: IN
59871: NOT
59872: IFFALSE 59876
// exit ;
59874: GO 60116
// index := GetElementIndex ( hackTanks , hack ) ;
59876: LD_ADDR_VAR 0 4
59880: PUSH
59881: LD_EXP 85
59885: PPUSH
59886: LD_VAR 0 1
59890: PPUSH
59891: CALL 5434 0 2
59895: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59896: LD_ADDR_VAR 0 3
59900: PUSH
59901: DOUBLE
59902: LD_EXP 86
59906: PUSH
59907: LD_VAR 0 4
59911: ARRAY
59912: INC
59913: ST_TO_ADDR
59914: LD_INT 1
59916: PUSH
59917: FOR_DOWNTO
59918: IFFALSE 60090
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59920: LD_ADDR_VAR 0 5
59924: PUSH
59925: LD_EXP 86
59929: PUSH
59930: LD_VAR 0 4
59934: ARRAY
59935: PUSH
59936: LD_VAR 0 3
59940: ARRAY
59941: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59942: LD_VAR 0 5
59946: PUSH
59947: LD_INT 1
59949: ARRAY
59950: PPUSH
59951: CALL_OW 302
59955: NOT
59956: PUSH
59957: LD_VAR 0 5
59961: PUSH
59962: LD_INT 1
59964: ARRAY
59965: PPUSH
59966: CALL_OW 255
59970: PUSH
59971: LD_VAR 0 1
59975: PPUSH
59976: CALL_OW 255
59980: NONEQUAL
59981: OR
59982: IFFALSE 60088
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59984: LD_VAR 0 5
59988: PUSH
59989: LD_INT 1
59991: ARRAY
59992: PPUSH
59993: CALL_OW 305
59997: PUSH
59998: LD_VAR 0 5
60002: PUSH
60003: LD_INT 1
60005: ARRAY
60006: PPUSH
60007: CALL_OW 255
60011: PUSH
60012: LD_VAR 0 1
60016: PPUSH
60017: CALL_OW 255
60021: EQUAL
60022: AND
60023: IFFALSE 60047
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60025: LD_VAR 0 5
60029: PUSH
60030: LD_INT 1
60032: ARRAY
60033: PPUSH
60034: LD_VAR 0 5
60038: PUSH
60039: LD_INT 2
60041: ARRAY
60042: PPUSH
60043: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60047: LD_ADDR_EXP 86
60051: PUSH
60052: LD_EXP 86
60056: PPUSH
60057: LD_VAR 0 4
60061: PPUSH
60062: LD_EXP 86
60066: PUSH
60067: LD_VAR 0 4
60071: ARRAY
60072: PPUSH
60073: LD_VAR 0 3
60077: PPUSH
60078: CALL_OW 3
60082: PPUSH
60083: CALL_OW 1
60087: ST_TO_ADDR
// end ; end ;
60088: GO 59917
60090: POP
60091: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60092: LD_VAR 0 1
60096: PPUSH
60097: LD_EXP 86
60101: PUSH
60102: LD_VAR 0 4
60106: ARRAY
60107: PUSH
60108: LD_INT 0
60110: PLUS
60111: PPUSH
60112: CALL_OW 505
// end ;
60116: LD_VAR 0 2
60120: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60121: LD_INT 0
60123: PPUSH
60124: PPUSH
60125: PPUSH
60126: PPUSH
// if not hack in hackTanks then
60127: LD_VAR 0 1
60131: PUSH
60132: LD_EXP 85
60136: IN
60137: NOT
60138: IFFALSE 60142
// exit ;
60140: GO 60227
// index := GetElementIndex ( hackTanks , hack ) ;
60142: LD_ADDR_VAR 0 5
60146: PUSH
60147: LD_EXP 85
60151: PPUSH
60152: LD_VAR 0 1
60156: PPUSH
60157: CALL 5434 0 2
60161: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60162: LD_ADDR_VAR 0 4
60166: PUSH
60167: DOUBLE
60168: LD_INT 1
60170: DEC
60171: ST_TO_ADDR
60172: LD_EXP 86
60176: PUSH
60177: LD_VAR 0 5
60181: ARRAY
60182: PUSH
60183: FOR_TO
60184: IFFALSE 60225
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60186: LD_EXP 86
60190: PUSH
60191: LD_VAR 0 5
60195: ARRAY
60196: PUSH
60197: LD_VAR 0 4
60201: ARRAY
60202: PUSH
60203: LD_INT 1
60205: ARRAY
60206: PUSH
60207: LD_VAR 0 2
60211: EQUAL
60212: IFFALSE 60223
// KillUnit ( vehicle ) ;
60214: LD_VAR 0 2
60218: PPUSH
60219: CALL_OW 66
60223: GO 60183
60225: POP
60226: POP
// end ;
60227: LD_VAR 0 3
60231: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
60232: LD_EXP 90
60236: NOT
60237: IFFALSE 60272
60239: GO 60241
60241: DISABLE
// begin initMiner := true ;
60242: LD_ADDR_EXP 90
60246: PUSH
60247: LD_INT 1
60249: ST_TO_ADDR
// minersList := [ ] ;
60250: LD_ADDR_EXP 91
60254: PUSH
60255: EMPTY
60256: ST_TO_ADDR
// minerMinesList := [ ] ;
60257: LD_ADDR_EXP 92
60261: PUSH
60262: EMPTY
60263: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
60264: LD_ADDR_EXP 93
60268: PUSH
60269: LD_INT 5
60271: ST_TO_ADDR
// end ;
60272: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
60273: LD_EXP 90
60277: PUSH
60278: LD_INT 34
60280: PUSH
60281: LD_INT 81
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PPUSH
60288: CALL_OW 69
60292: AND
60293: IFFALSE 60754
60295: GO 60297
60297: DISABLE
60298: LD_INT 0
60300: PPUSH
60301: PPUSH
60302: PPUSH
60303: PPUSH
// begin enable ;
60304: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60305: LD_ADDR_VAR 0 1
60309: PUSH
60310: LD_INT 34
60312: PUSH
60313: LD_INT 81
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PPUSH
60320: CALL_OW 69
60324: PUSH
60325: FOR_IN
60326: IFFALSE 60398
// begin if not i in minersList then
60328: LD_VAR 0 1
60332: PUSH
60333: LD_EXP 91
60337: IN
60338: NOT
60339: IFFALSE 60396
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60341: LD_ADDR_EXP 91
60345: PUSH
60346: LD_EXP 91
60350: PPUSH
60351: LD_EXP 91
60355: PUSH
60356: LD_INT 1
60358: PLUS
60359: PPUSH
60360: LD_VAR 0 1
60364: PPUSH
60365: CALL_OW 1
60369: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60370: LD_ADDR_EXP 92
60374: PUSH
60375: LD_EXP 92
60379: PPUSH
60380: LD_EXP 92
60384: PUSH
60385: LD_INT 1
60387: PLUS
60388: PPUSH
60389: EMPTY
60390: PPUSH
60391: CALL_OW 1
60395: ST_TO_ADDR
// end end ;
60396: GO 60325
60398: POP
60399: POP
// for i := minerMinesList downto 1 do
60400: LD_ADDR_VAR 0 1
60404: PUSH
60405: DOUBLE
60406: LD_EXP 92
60410: INC
60411: ST_TO_ADDR
60412: LD_INT 1
60414: PUSH
60415: FOR_DOWNTO
60416: IFFALSE 60752
// begin if IsLive ( minersList [ i ] ) then
60418: LD_EXP 91
60422: PUSH
60423: LD_VAR 0 1
60427: ARRAY
60428: PPUSH
60429: CALL_OW 300
60433: IFFALSE 60461
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
60435: LD_EXP 91
60439: PUSH
60440: LD_VAR 0 1
60444: ARRAY
60445: PPUSH
60446: LD_EXP 92
60450: PUSH
60451: LD_VAR 0 1
60455: ARRAY
60456: PPUSH
60457: CALL_OW 505
// if not minerMinesList [ i ] then
60461: LD_EXP 92
60465: PUSH
60466: LD_VAR 0 1
60470: ARRAY
60471: NOT
60472: IFFALSE 60476
// continue ;
60474: GO 60415
// for j := minerMinesList [ i ] downto 1 do
60476: LD_ADDR_VAR 0 2
60480: PUSH
60481: DOUBLE
60482: LD_EXP 92
60486: PUSH
60487: LD_VAR 0 1
60491: ARRAY
60492: INC
60493: ST_TO_ADDR
60494: LD_INT 1
60496: PUSH
60497: FOR_DOWNTO
60498: IFFALSE 60748
// begin side := GetSide ( minersList [ i ] ) ;
60500: LD_ADDR_VAR 0 3
60504: PUSH
60505: LD_EXP 91
60509: PUSH
60510: LD_VAR 0 1
60514: ARRAY
60515: PPUSH
60516: CALL_OW 255
60520: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60521: LD_ADDR_VAR 0 4
60525: PUSH
60526: LD_EXP 92
60530: PUSH
60531: LD_VAR 0 1
60535: ARRAY
60536: PUSH
60537: LD_VAR 0 2
60541: ARRAY
60542: PUSH
60543: LD_INT 1
60545: ARRAY
60546: PPUSH
60547: LD_EXP 92
60551: PUSH
60552: LD_VAR 0 1
60556: ARRAY
60557: PUSH
60558: LD_VAR 0 2
60562: ARRAY
60563: PUSH
60564: LD_INT 2
60566: ARRAY
60567: PPUSH
60568: CALL_OW 428
60572: ST_TO_ADDR
// if not tmp then
60573: LD_VAR 0 4
60577: NOT
60578: IFFALSE 60582
// continue ;
60580: GO 60497
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60582: LD_VAR 0 4
60586: PUSH
60587: LD_INT 81
60589: PUSH
60590: LD_VAR 0 3
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PPUSH
60599: CALL_OW 69
60603: IN
60604: PUSH
60605: LD_EXP 92
60609: PUSH
60610: LD_VAR 0 1
60614: ARRAY
60615: PUSH
60616: LD_VAR 0 2
60620: ARRAY
60621: PUSH
60622: LD_INT 1
60624: ARRAY
60625: PPUSH
60626: LD_EXP 92
60630: PUSH
60631: LD_VAR 0 1
60635: ARRAY
60636: PUSH
60637: LD_VAR 0 2
60641: ARRAY
60642: PUSH
60643: LD_INT 2
60645: ARRAY
60646: PPUSH
60647: CALL_OW 458
60651: AND
60652: IFFALSE 60746
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60654: LD_EXP 92
60658: PUSH
60659: LD_VAR 0 1
60663: ARRAY
60664: PUSH
60665: LD_VAR 0 2
60669: ARRAY
60670: PUSH
60671: LD_INT 1
60673: ARRAY
60674: PPUSH
60675: LD_EXP 92
60679: PUSH
60680: LD_VAR 0 1
60684: ARRAY
60685: PUSH
60686: LD_VAR 0 2
60690: ARRAY
60691: PUSH
60692: LD_INT 2
60694: ARRAY
60695: PPUSH
60696: LD_VAR 0 3
60700: PPUSH
60701: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60705: LD_ADDR_EXP 92
60709: PUSH
60710: LD_EXP 92
60714: PPUSH
60715: LD_VAR 0 1
60719: PPUSH
60720: LD_EXP 92
60724: PUSH
60725: LD_VAR 0 1
60729: ARRAY
60730: PPUSH
60731: LD_VAR 0 2
60735: PPUSH
60736: CALL_OW 3
60740: PPUSH
60741: CALL_OW 1
60745: ST_TO_ADDR
// end ; end ;
60746: GO 60497
60748: POP
60749: POP
// end ;
60750: GO 60415
60752: POP
60753: POP
// end ;
60754: PPOPN 4
60756: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
60757: LD_INT 0
60759: PPUSH
60760: PPUSH
// result := false ;
60761: LD_ADDR_VAR 0 4
60765: PUSH
60766: LD_INT 0
60768: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60769: LD_VAR 0 1
60773: PPUSH
60774: CALL_OW 264
60778: PUSH
60779: LD_INT 81
60781: EQUAL
60782: NOT
60783: IFFALSE 60787
// exit ;
60785: GO 61027
// index := GetElementIndex ( minersList , unit ) ;
60787: LD_ADDR_VAR 0 5
60791: PUSH
60792: LD_EXP 91
60796: PPUSH
60797: LD_VAR 0 1
60801: PPUSH
60802: CALL 5434 0 2
60806: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60807: LD_EXP 92
60811: PUSH
60812: LD_VAR 0 5
60816: ARRAY
60817: PUSH
60818: LD_EXP 93
60822: GREATEREQUAL
60823: IFFALSE 60827
// exit ;
60825: GO 61027
// ComMoveXY ( unit , x , y ) ;
60827: LD_VAR 0 1
60831: PPUSH
60832: LD_VAR 0 2
60836: PPUSH
60837: LD_VAR 0 3
60841: PPUSH
60842: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60846: LD_INT 35
60848: PPUSH
60849: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60853: LD_VAR 0 1
60857: PPUSH
60858: LD_VAR 0 2
60862: PPUSH
60863: LD_VAR 0 3
60867: PPUSH
60868: CALL 36789 0 3
60872: NOT
60873: PUSH
60874: LD_VAR 0 1
60878: PPUSH
60879: CALL_OW 314
60883: AND
60884: IFFALSE 60888
// exit ;
60886: GO 61027
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60888: LD_VAR 0 2
60892: PPUSH
60893: LD_VAR 0 3
60897: PPUSH
60898: CALL_OW 428
60902: PUSH
60903: LD_VAR 0 1
60907: EQUAL
60908: PUSH
60909: LD_VAR 0 1
60913: PPUSH
60914: CALL_OW 314
60918: NOT
60919: AND
60920: IFFALSE 60846
// PlaySoundXY ( x , y , PlantMine ) ;
60922: LD_VAR 0 2
60926: PPUSH
60927: LD_VAR 0 3
60931: PPUSH
60932: LD_STRING PlantMine
60934: PPUSH
60935: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
60939: LD_VAR 0 2
60943: PPUSH
60944: LD_VAR 0 3
60948: PPUSH
60949: LD_VAR 0 1
60953: PPUSH
60954: CALL_OW 255
60958: PPUSH
60959: LD_INT 0
60961: PPUSH
60962: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60966: LD_ADDR_EXP 92
60970: PUSH
60971: LD_EXP 92
60975: PPUSH
60976: LD_VAR 0 5
60980: PUSH
60981: LD_EXP 92
60985: PUSH
60986: LD_VAR 0 5
60990: ARRAY
60991: PUSH
60992: LD_INT 1
60994: PLUS
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PPUSH
61000: LD_VAR 0 2
61004: PUSH
61005: LD_VAR 0 3
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PPUSH
61014: CALL 5649 0 3
61018: ST_TO_ADDR
// result := true ;
61019: LD_ADDR_VAR 0 4
61023: PUSH
61024: LD_INT 1
61026: ST_TO_ADDR
// end ;
61027: LD_VAR 0 4
61031: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61032: LD_INT 0
61034: PPUSH
61035: PPUSH
61036: PPUSH
// if not unit in minersList then
61037: LD_VAR 0 1
61041: PUSH
61042: LD_EXP 91
61046: IN
61047: NOT
61048: IFFALSE 61052
// exit ;
61050: GO 61444
// index := GetElementIndex ( minersList , unit ) ;
61052: LD_ADDR_VAR 0 6
61056: PUSH
61057: LD_EXP 91
61061: PPUSH
61062: LD_VAR 0 1
61066: PPUSH
61067: CALL 5434 0 2
61071: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61072: LD_ADDR_VAR 0 5
61076: PUSH
61077: DOUBLE
61078: LD_EXP 92
61082: PUSH
61083: LD_VAR 0 6
61087: ARRAY
61088: INC
61089: ST_TO_ADDR
61090: LD_INT 1
61092: PUSH
61093: FOR_DOWNTO
61094: IFFALSE 61255
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
61096: LD_EXP 92
61100: PUSH
61101: LD_VAR 0 6
61105: ARRAY
61106: PUSH
61107: LD_VAR 0 5
61111: ARRAY
61112: PUSH
61113: LD_INT 1
61115: ARRAY
61116: PUSH
61117: LD_VAR 0 2
61121: EQUAL
61122: PUSH
61123: LD_EXP 92
61127: PUSH
61128: LD_VAR 0 6
61132: ARRAY
61133: PUSH
61134: LD_VAR 0 5
61138: ARRAY
61139: PUSH
61140: LD_INT 2
61142: ARRAY
61143: PUSH
61144: LD_VAR 0 3
61148: EQUAL
61149: AND
61150: IFFALSE 61253
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61152: LD_EXP 92
61156: PUSH
61157: LD_VAR 0 6
61161: ARRAY
61162: PUSH
61163: LD_VAR 0 5
61167: ARRAY
61168: PUSH
61169: LD_INT 1
61171: ARRAY
61172: PPUSH
61173: LD_EXP 92
61177: PUSH
61178: LD_VAR 0 6
61182: ARRAY
61183: PUSH
61184: LD_VAR 0 5
61188: ARRAY
61189: PUSH
61190: LD_INT 2
61192: ARRAY
61193: PPUSH
61194: LD_VAR 0 1
61198: PPUSH
61199: CALL_OW 255
61203: PPUSH
61204: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61208: LD_ADDR_EXP 92
61212: PUSH
61213: LD_EXP 92
61217: PPUSH
61218: LD_VAR 0 6
61222: PPUSH
61223: LD_EXP 92
61227: PUSH
61228: LD_VAR 0 6
61232: ARRAY
61233: PPUSH
61234: LD_VAR 0 5
61238: PPUSH
61239: CALL_OW 3
61243: PPUSH
61244: CALL_OW 1
61248: ST_TO_ADDR
// exit ;
61249: POP
61250: POP
61251: GO 61444
// end ; end ;
61253: GO 61093
61255: POP
61256: POP
// for i := minerMinesList [ index ] downto 1 do
61257: LD_ADDR_VAR 0 5
61261: PUSH
61262: DOUBLE
61263: LD_EXP 92
61267: PUSH
61268: LD_VAR 0 6
61272: ARRAY
61273: INC
61274: ST_TO_ADDR
61275: LD_INT 1
61277: PUSH
61278: FOR_DOWNTO
61279: IFFALSE 61442
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61281: LD_EXP 92
61285: PUSH
61286: LD_VAR 0 6
61290: ARRAY
61291: PUSH
61292: LD_VAR 0 5
61296: ARRAY
61297: PUSH
61298: LD_INT 1
61300: ARRAY
61301: PPUSH
61302: LD_EXP 92
61306: PUSH
61307: LD_VAR 0 6
61311: ARRAY
61312: PUSH
61313: LD_VAR 0 5
61317: ARRAY
61318: PUSH
61319: LD_INT 2
61321: ARRAY
61322: PPUSH
61323: LD_VAR 0 2
61327: PPUSH
61328: LD_VAR 0 3
61332: PPUSH
61333: CALL_OW 298
61337: PUSH
61338: LD_INT 6
61340: LESS
61341: IFFALSE 61440
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61343: LD_EXP 92
61347: PUSH
61348: LD_VAR 0 6
61352: ARRAY
61353: PUSH
61354: LD_VAR 0 5
61358: ARRAY
61359: PUSH
61360: LD_INT 1
61362: ARRAY
61363: PPUSH
61364: LD_EXP 92
61368: PUSH
61369: LD_VAR 0 6
61373: ARRAY
61374: PUSH
61375: LD_VAR 0 5
61379: ARRAY
61380: PUSH
61381: LD_INT 2
61383: ARRAY
61384: PPUSH
61385: LD_VAR 0 1
61389: PPUSH
61390: CALL_OW 255
61394: PPUSH
61395: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61399: LD_ADDR_EXP 92
61403: PUSH
61404: LD_EXP 92
61408: PPUSH
61409: LD_VAR 0 6
61413: PPUSH
61414: LD_EXP 92
61418: PUSH
61419: LD_VAR 0 6
61423: ARRAY
61424: PPUSH
61425: LD_VAR 0 5
61429: PPUSH
61430: CALL_OW 3
61434: PPUSH
61435: CALL_OW 1
61439: ST_TO_ADDR
// end ; end ;
61440: GO 61278
61442: POP
61443: POP
// end ;
61444: LD_VAR 0 4
61448: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61449: LD_INT 0
61451: PPUSH
61452: PPUSH
61453: PPUSH
61454: PPUSH
61455: PPUSH
61456: PPUSH
61457: PPUSH
61458: PPUSH
61459: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61460: LD_VAR 0 1
61464: PPUSH
61465: CALL_OW 264
61469: PUSH
61470: LD_INT 81
61472: EQUAL
61473: NOT
61474: PUSH
61475: LD_VAR 0 1
61479: PUSH
61480: LD_EXP 91
61484: IN
61485: NOT
61486: OR
61487: IFFALSE 61491
// exit ;
61489: GO 61813
// index := GetElementIndex ( minersList , unit ) ;
61491: LD_ADDR_VAR 0 6
61495: PUSH
61496: LD_EXP 91
61500: PPUSH
61501: LD_VAR 0 1
61505: PPUSH
61506: CALL 5434 0 2
61510: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61511: LD_ADDR_VAR 0 8
61515: PUSH
61516: LD_EXP 93
61520: PUSH
61521: LD_EXP 92
61525: PUSH
61526: LD_VAR 0 6
61530: ARRAY
61531: MINUS
61532: ST_TO_ADDR
// if not minesFreeAmount then
61533: LD_VAR 0 8
61537: NOT
61538: IFFALSE 61542
// exit ;
61540: GO 61813
// tmp := [ ] ;
61542: LD_ADDR_VAR 0 7
61546: PUSH
61547: EMPTY
61548: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61549: LD_ADDR_VAR 0 5
61553: PUSH
61554: DOUBLE
61555: LD_INT 1
61557: DEC
61558: ST_TO_ADDR
61559: LD_VAR 0 8
61563: PUSH
61564: FOR_TO
61565: IFFALSE 61760
// begin _d := rand ( 0 , 5 ) ;
61567: LD_ADDR_VAR 0 11
61571: PUSH
61572: LD_INT 0
61574: PPUSH
61575: LD_INT 5
61577: PPUSH
61578: CALL_OW 12
61582: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61583: LD_ADDR_VAR 0 12
61587: PUSH
61588: LD_INT 2
61590: PPUSH
61591: LD_INT 6
61593: PPUSH
61594: CALL_OW 12
61598: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61599: LD_ADDR_VAR 0 9
61603: PUSH
61604: LD_VAR 0 2
61608: PPUSH
61609: LD_VAR 0 11
61613: PPUSH
61614: LD_VAR 0 12
61618: PPUSH
61619: CALL_OW 272
61623: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61624: LD_ADDR_VAR 0 10
61628: PUSH
61629: LD_VAR 0 3
61633: PPUSH
61634: LD_VAR 0 11
61638: PPUSH
61639: LD_VAR 0 12
61643: PPUSH
61644: CALL_OW 273
61648: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61649: LD_VAR 0 9
61653: PPUSH
61654: LD_VAR 0 10
61658: PPUSH
61659: CALL_OW 488
61663: PUSH
61664: LD_VAR 0 9
61668: PUSH
61669: LD_VAR 0 10
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_VAR 0 7
61682: IN
61683: NOT
61684: AND
61685: PUSH
61686: LD_VAR 0 9
61690: PPUSH
61691: LD_VAR 0 10
61695: PPUSH
61696: CALL_OW 458
61700: NOT
61701: AND
61702: IFFALSE 61744
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61704: LD_ADDR_VAR 0 7
61708: PUSH
61709: LD_VAR 0 7
61713: PPUSH
61714: LD_VAR 0 7
61718: PUSH
61719: LD_INT 1
61721: PLUS
61722: PPUSH
61723: LD_VAR 0 9
61727: PUSH
61728: LD_VAR 0 10
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PPUSH
61737: CALL_OW 1
61741: ST_TO_ADDR
61742: GO 61758
// i := i - 1 ;
61744: LD_ADDR_VAR 0 5
61748: PUSH
61749: LD_VAR 0 5
61753: PUSH
61754: LD_INT 1
61756: MINUS
61757: ST_TO_ADDR
// end ;
61758: GO 61564
61760: POP
61761: POP
// for i in tmp do
61762: LD_ADDR_VAR 0 5
61766: PUSH
61767: LD_VAR 0 7
61771: PUSH
61772: FOR_IN
61773: IFFALSE 61811
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61775: LD_VAR 0 1
61779: PPUSH
61780: LD_VAR 0 5
61784: PUSH
61785: LD_INT 1
61787: ARRAY
61788: PPUSH
61789: LD_VAR 0 5
61793: PUSH
61794: LD_INT 2
61796: ARRAY
61797: PPUSH
61798: CALL 60757 0 3
61802: NOT
61803: IFFALSE 61809
// exit ;
61805: POP
61806: POP
61807: GO 61813
61809: GO 61772
61811: POP
61812: POP
// end ;
61813: LD_VAR 0 4
61817: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
61818: LD_INT 0
61820: PPUSH
61821: PPUSH
61822: PPUSH
61823: PPUSH
61824: PPUSH
61825: PPUSH
61826: PPUSH
// if not GetClass ( unit ) = class_sniper then
61827: LD_VAR 0 1
61831: PPUSH
61832: CALL_OW 257
61836: PUSH
61837: LD_INT 5
61839: EQUAL
61840: NOT
61841: IFFALSE 61845
// exit ;
61843: GO 62233
// dist := 8 ;
61845: LD_ADDR_VAR 0 5
61849: PUSH
61850: LD_INT 8
61852: ST_TO_ADDR
// viewRange := 12 ;
61853: LD_ADDR_VAR 0 7
61857: PUSH
61858: LD_INT 12
61860: ST_TO_ADDR
// side := GetSide ( unit ) ;
61861: LD_ADDR_VAR 0 6
61865: PUSH
61866: LD_VAR 0 1
61870: PPUSH
61871: CALL_OW 255
61875: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61876: LD_INT 61
61878: PPUSH
61879: LD_VAR 0 6
61883: PPUSH
61884: CALL_OW 321
61888: PUSH
61889: LD_INT 2
61891: EQUAL
61892: IFFALSE 61902
// viewRange := 16 ;
61894: LD_ADDR_VAR 0 7
61898: PUSH
61899: LD_INT 16
61901: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61902: LD_VAR 0 1
61906: PPUSH
61907: LD_VAR 0 2
61911: PPUSH
61912: LD_VAR 0 3
61916: PPUSH
61917: CALL_OW 297
61921: PUSH
61922: LD_VAR 0 5
61926: GREATER
61927: IFFALSE 62006
// begin ComMoveXY ( unit , x , y ) ;
61929: LD_VAR 0 1
61933: PPUSH
61934: LD_VAR 0 2
61938: PPUSH
61939: LD_VAR 0 3
61943: PPUSH
61944: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61948: LD_INT 35
61950: PPUSH
61951: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61955: LD_VAR 0 1
61959: PPUSH
61960: LD_VAR 0 2
61964: PPUSH
61965: LD_VAR 0 3
61969: PPUSH
61970: CALL 36789 0 3
61974: NOT
61975: IFFALSE 61979
// exit ;
61977: GO 62233
// until GetDistUnitXY ( unit , x , y ) < dist ;
61979: LD_VAR 0 1
61983: PPUSH
61984: LD_VAR 0 2
61988: PPUSH
61989: LD_VAR 0 3
61993: PPUSH
61994: CALL_OW 297
61998: PUSH
61999: LD_VAR 0 5
62003: LESS
62004: IFFALSE 61948
// end ; ComTurnXY ( unit , x , y ) ;
62006: LD_VAR 0 1
62010: PPUSH
62011: LD_VAR 0 2
62015: PPUSH
62016: LD_VAR 0 3
62020: PPUSH
62021: CALL_OW 118
// wait ( 5 ) ;
62025: LD_INT 5
62027: PPUSH
62028: CALL_OW 67
// _d := GetDir ( unit ) ;
62032: LD_ADDR_VAR 0 10
62036: PUSH
62037: LD_VAR 0 1
62041: PPUSH
62042: CALL_OW 254
62046: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
62047: LD_ADDR_VAR 0 8
62051: PUSH
62052: LD_VAR 0 1
62056: PPUSH
62057: CALL_OW 250
62061: PPUSH
62062: LD_VAR 0 10
62066: PPUSH
62067: LD_VAR 0 5
62071: PPUSH
62072: CALL_OW 272
62076: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
62077: LD_ADDR_VAR 0 9
62081: PUSH
62082: LD_VAR 0 1
62086: PPUSH
62087: CALL_OW 251
62091: PPUSH
62092: LD_VAR 0 10
62096: PPUSH
62097: LD_VAR 0 5
62101: PPUSH
62102: CALL_OW 273
62106: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62107: LD_VAR 0 8
62111: PPUSH
62112: LD_VAR 0 9
62116: PPUSH
62117: CALL_OW 488
62121: NOT
62122: IFFALSE 62126
// exit ;
62124: GO 62233
// ComAnimCustom ( unit , 1 ) ;
62126: LD_VAR 0 1
62130: PPUSH
62131: LD_INT 1
62133: PPUSH
62134: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62138: LD_VAR 0 8
62142: PPUSH
62143: LD_VAR 0 9
62147: PPUSH
62148: LD_VAR 0 6
62152: PPUSH
62153: LD_VAR 0 7
62157: PPUSH
62158: CALL_OW 330
// repeat wait ( 1 ) ;
62162: LD_INT 1
62164: PPUSH
62165: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
62169: LD_VAR 0 1
62173: PPUSH
62174: CALL_OW 316
62178: PUSH
62179: LD_VAR 0 1
62183: PPUSH
62184: CALL_OW 314
62188: OR
62189: PUSH
62190: LD_VAR 0 1
62194: PPUSH
62195: CALL_OW 302
62199: NOT
62200: OR
62201: PUSH
62202: LD_VAR 0 1
62206: PPUSH
62207: CALL_OW 301
62211: OR
62212: IFFALSE 62162
// RemoveSeeing ( _x , _y , side ) ;
62214: LD_VAR 0 8
62218: PPUSH
62219: LD_VAR 0 9
62223: PPUSH
62224: LD_VAR 0 6
62228: PPUSH
62229: CALL_OW 331
// end ;
62233: LD_VAR 0 4
62237: RET
